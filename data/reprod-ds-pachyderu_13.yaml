- en: '*Chapter 10*: Pachyderm Language Clients'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第10章*: Pachyderm语言客户端'
- en: In previous chapters, we have learned how to use Pachyderm through the `pachctl`
    `pachctl`. We briefly looked into the Pachyderm **User Interface** (**UI**)—or
    the dashboard—as well, although we did not use it extensively. The Pachyderm CLI
    enables you to perform all Pachyderm management operations and, in general, provides
    more functionality than the Pachyderm UI.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们已经学习了如何通过`pachctl`来使用Pachyderm。我们简要地介绍了Pachyderm的**用户界面**（**UI**）—或称为仪表板—虽然我们没有广泛使用它。Pachyderm
    CLI允许您执行所有Pachyderm管理操作，并且通常提供比Pachyderm UI更多的功能。
- en: However, many users may decide to take Pachyderm even further by using Pachyderm
    `pachctl` or the dashboard. Many Pachyderm users develop scripts and call the
    Pachyderm API directly from these scripts. As of today, Pachyderm provides two
    official Pachyderm programming language clients, **Golang** (**Go**) and Python,
    to enable advanced users to extend Pachyderm functionality further.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，许多用户可能决定通过使用Pachyderm `pachctl`或仪表板进一步扩展Pachyderm的功能。许多Pachyderm用户开发脚本，并通过这些脚本直接调用Pachyderm
    API。到目前为止，Pachyderm提供了两个官方的Pachyderm编程语言客户端，**Golang**（**Go**）和Python，以便高级用户进一步扩展Pachyderm的功能。
- en: In addition, if you are familiar with `pps.proto` file to access Pachyderm through
    such languages as C, C++, and Java.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果您熟悉`pps.proto`文件，可以通过C、C++和Java等语言访问Pachyderm。
- en: In this chapter, you will learn how to use both Python and Go Pachyderm clients.
    You will learn how to run basic operations by using both of these clients, including
    how to create repositories and pipelines.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何使用Python和Go Pachyderm客户端。您将学习如何通过这两种客户端运行基本操作，包括如何创建仓库和管道。
- en: This chapter is intended to demonstrate how to use official Pachyderm language
    clients.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章旨在展示如何使用官方Pachyderm语言客户端。
- en: 'We will cover the following topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下主题：
- en: Using the Pachyderm Go client
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Pachyderm Go客户端
- en: Cloning the Pachyderm source repository
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 克隆Pachyderm源代码库
- en: Using the Pachyderm Python client
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Pachyderm Python客户端
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You should have already installed the components listed next.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该已经安装了接下来列出的组件。
- en: 'For a local macOS installation, you will need the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本地macOS安装，您需要以下组件：
- en: macOS Mojave, Catalina, Big Sur, or later
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: macOS Mojave、Catalina、Big Sur或更高版本
- en: Docker Desktop for Mac 10.14
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Desktop for Mac 10.14
- en: '`minikube` v1.9.0 or later'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`minikube` v1.9.0或更高版本'
- en: '`pachctl` 2.0.0 or later'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pachctl` 2.0.0或更高版本'
- en: Pachyderm 2.0.0 or later
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pachyderm 2.0.0或更高版本
- en: 'For a local Windows installation, you will need the following:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本地Windows安装，您需要以下组件：
- en: Windows Pro 64-bit v10 or later
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows Pro 64位 v10或更高版本
- en: '**Windows Subsystem for Linux** (**WSL**) 2 or later'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Windows子系统Linux**（**WSL**）2或更高版本'
- en: Microsoft PowerShell v6.2.1 or later
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Microsoft PowerShell v6.2.1或更高版本
- en: Hyper-V
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Hyper-V
- en: '`minikube` v1.9.0 or later'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`minikube` v1.9.0或更高版本'
- en: '`kubectl` v1.18 or later'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kubectl` v1.18或更高版本'
- en: '`pachctl` 2.0.0 or later'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pachctl` 2.0.0或更高版本'
- en: Pachyderm 2.0.0 or later
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pachyderm 2.0.0或更高版本
- en: 'For an **Amazon Elastic Kubernetes Service** (**Amazon EKS**) installation,
    you will need the following:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 对于**Amazon弹性Kubernetes服务**（**Amazon EKS**）的安装，您需要以下组件：
- en: '`kubectl` v1.18 or later'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kubectl` v1.18或更高版本'
- en: '`eksctl`'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`eksctl`'
- en: '`aws-iam-authenticator`'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`aws-iam-authenticator`'
- en: '`pachctl` 2.0.0 or later'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pachctl` 2.0.0或更高版本'
- en: Pachyderm 2.0.0 or later
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pachyderm 2.0.0或更高版本
- en: 'For a Microsoft **Azure Kubernetes Service** (**AKS**) cloud installation,
    you will need the following:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Microsoft **Azure Kubernetes Service**（**AKS**）云端安装，您需要以下组件：
- en: '`kubectl` v1.18 or later'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kubectl` v1.18或更高版本'
- en: The Azure CLI
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure CLI
- en: '`pachctl` 2.0.0 or later'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pachctl` 2.0.0或更高版本'
- en: Pachyderm 2.0.0 or later
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pachyderm 2.0.0或更高版本
- en: '`jq` 1.5 or later'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jq` 1.5或更高版本'
- en: 'For a **Google Kubernetes Engine** (**GKE**) cloud installation, you will need
    the following:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 对于**Google Kubernetes Engine**（**GKE**）云端安装，您需要以下组件：
- en: Google Cloud **Software Development kit** (**SDK**) v124.0.0 or later
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google Cloud **软件开发工具包**（**SDK**）v124.0.0或更高版本
- en: '`kubectl` v1.18 or later'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kubectl` v1.18或更高版本'
- en: '`pachctl` 2.0.0 or later'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pachctl` 2.0.0或更高版本'
- en: Pachyderm 2.0.0 or later
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pachyderm 2.0.0或更高版本
- en: Downloading the source files
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下载源文件
- en: All scripts for this chapter are available at [https://github.com/PacktPublishing/Reproducible-Data-Science-with-Pachyderm/tree/main/Chapter10-Pachyderm-Language-Clients](https://github.com/PacktPublishing/Reproducible-Data-Science-with-Pachyderm/tree/main/Chapter10-Pachyderm-Language-Clients).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的所有脚本可以在[https://github.com/PacktPublishing/Reproducible-Data-Science-with-Pachyderm/tree/main/Chapter10-Pachyderm-Language-Clients](https://github.com/PacktPublishing/Reproducible-Data-Science-with-Pachyderm/tree/main/Chapter10-Pachyderm-Language-Clients)获取。
- en: 'We will use the image processing example that we had in [*Chapter 6*](B17085_06_Final_SB_Epub.xhtml#_idTextAnchor156),
    *Creating Your First Pipeline*. If you do not have them already, download the
    files for this example from here: [https://github.com/PacktPublishing/Reproducible-Data-Science-with-Pachyderm/tree/main/Chapter06-Creating-Your-First-Pipeline](https://github.com/PacktPublishing/Reproducible-Data-Science-with-Pachyderm/tree/main/Chapter06-Creating-Your-First-Pipeline).'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用我们在[*第6章*](B17085_06_Final_SB_Epub.xhtml#_idTextAnchor156)中的图像处理示例，*创建你的第一个Pipeline*。如果你还没有这些文件，可以从这里下载该示例的文件：[https://github.com/PacktPublishing/Reproducible-Data-Science-with-Pachyderm/tree/main/Chapter06-Creating-Your-First-Pipeline](https://github.com/PacktPublishing/Reproducible-Data-Science-with-Pachyderm/tree/main/Chapter06-Creating-Your-First-Pipeline)。
- en: Using the Pachyderm Go client
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Pachyderm Go客户端
- en: The Pachyderm Go client enables you to communicate with Pachyderm through the
    Go API. Go is a popular programming language that has been developed by Google
    and has become widely popular among the developer community in recent years. In
    this chapter, we will learn how to enable the Pachyderm Go client and how to run
    basic Pachyderm operations using the Go client.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Pachyderm Go客户端使你能够通过Go API与Pachyderm进行通信。Go是一种由Google开发的流行编程语言，近年来在开发者社区中变得广泛流行。在本章中，我们将学习如何启用Pachyderm
    Go客户端，并如何使用Go客户端执行基本的Pachyderm操作。
- en: 'The main source files that you can use for reference are located in the [https://github.com/pachyderm/pachyderm/tree/master/src/client](https://github.com/pachyderm/pachyderm/tree/master/src/client)
    directory of the Pachyderm source repository. These files include all the methods
    that you can use to communicate with Pachyderm objects and primitives—specifically,
    the following files:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以参考的主要源文件位于Pachyderm源代码库的[https://github.com/pachyderm/pachyderm/tree/master/src/client](https://github.com/pachyderm/pachyderm/tree/master/src/client)目录下。这些文件包含了你可以用来与Pachyderm对象和原语进行通信的所有方法——具体来说，包括以下文件：
- en: '[https://github.com/pachyderm/pachyderm/blob/master/src/client/client.go](https://github.com/pachyderm/pachyderm/blob/master/src/client/client.go)'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/pachyderm/pachyderm/blob/master/src/client/client.go](https://github.com/pachyderm/pachyderm/blob/master/src/client/client.go)'
- en: '[https://github.com/pachyderm/pachyderm/blob/master/src/client/pfs.go](https://github.com/pachyderm/pachyderm/blob/master/src/client/pfs.go)'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/pachyderm/pachyderm/blob/master/src/client/pfs.go](https://github.com/pachyderm/pachyderm/blob/master/src/client/pfs.go)'
- en: '[https://github.com/pachyderm/pachyderm/blob/master/src/client/pps.go](https://github.com/pachyderm/pachyderm/blob/master/src/client/pps.go)'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/pachyderm/pachyderm/blob/master/src/client/pps.go](https://github.com/pachyderm/pachyderm/blob/master/src/client/pps.go)'
- en: These files include most of the important Pachyderm methods and the ones that
    we will use in the following sections.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这些文件包括了大部分重要的Pachyderm方法，以及我们在接下来的章节中将使用的方法。
- en: Installing Go on your computer
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在你的计算机上安装Go
- en: 'To get started, we need to verify that we have a valid Go installation in our
    environment. Go is supported in all major operating systems, including Microsoft
    Windows, Linux, and macOS. Check that you have Go installed on your computer by
    running the following command:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始使用，我们需要验证环境中是否有有效的Go安装。Go支持所有主要操作系统，包括Microsoft Windows、Linux和macOS。通过运行以下命令，检查你的计算机上是否安装了Go：
- en: '[PRE0]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You should see an output similar to this:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能看到类似下面的输出：
- en: '[PRE1]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If you do not have Go installed on your machine, follow these next steps to
    install it:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的计算机上没有安装Go，请按照以下步骤进行安装：
- en: Go to [https://golang.org/doc/install](https://golang.org/doc/install) and download
    the version of Go for your operating system.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问[https://golang.org/doc/install](https://golang.org/doc/install)并下载适用于你操作系统的Go版本。
- en: 'Open the downloaded package and follow the prompts to install Go in your system.
    You should see the following screen when you are done:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开下载的包并按照提示在系统中安装Go。安装完成后，你应该能看到如下屏幕：
- en: '![Figure 10.1 – Go installation'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.1 – Go安装]'
- en: '](img/B17085_10_001.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17085_10_001.jpg)'
- en: Figure 10.1 – Go installation
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.1 – Go安装
- en: Follow the instructions for your operating system to verify that Go was installed
    as described in [https://golang.org/doc/install](https://golang.org/doc/install).
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据你操作系统的说明，验证Go是否已按[https://golang.org/doc/install](https://golang.org/doc/install)中的描述安装。
- en: 'Restart your Terminal and run `go version` again to verify your installation.
    You should see an output similar to this:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重启你的终端，并再次运行`go version`来验证你的安装。你应该能看到类似下面的输出：
- en: '[PRE2]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now that we have Go installed, let's configure `$GOPATH`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了Go，接下来配置`$GOPATH`。
- en: Configuring $GOPATH
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置$GOPATH
- en: 'If you have never used Go before, you need to make sure that you have your
    `$GOPATH` directory properly set up; otherwise, none of the scripts described
    in this section will work. When you installed Go, it might have already been configured.
    However, you might still want to configure the following:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你以前从未使用过 Go，你需要确保你的`$GOPATH`目录已正确设置；否则，本节中描述的任何脚本都无法正常工作。安装 Go 时，它可能已经被配置好了。不过，你可能还是想要配置以下内容：
- en: 'Verify that you have the following in either `~/.bash_profile`, `~/.profile`,
    or `~/.zsh_profile` file:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证你在`~/.bash_profile`、`~/.profile`或`~/.zsh_profile`文件中有以下内容：
- en: '[PRE3]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If your respective shell configuration file did not have this configuration,
    add it, and then source your shell configuration file, like this:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你的 shell 配置文件中没有这个配置，请添加它，然后像这样执行你的 shell 配置文件：
- en: '[PRE4]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Check your `$GOPATH` directory by running the following command:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令检查你的`$GOPATH`目录：
- en: '[PRE5]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This command prints your Go environment configuration. If you are on macOS,
    your `$GOPATH` directory should be `` `GOPATH="/Users/<username>/go"`. ``
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将打印出你的 Go 环境配置。如果你使用的是 macOS，`$GOPATH`目录应该是`` `GOPATH="/Users/<username>/go"`.
    ``
- en: 'If you don''t have it already, create a `src` directory under your `$GOPATH`
    directory, as follows:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你还没有这个目录，请在你的`$GOPATH`目录下创建一个`src`目录，如下所示：
- en: '[PRE6]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Under `$GOPATH/src`, create a `github.com` directory, as follows:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`$GOPATH/src`下创建一个`github.com`目录，如下所示：
- en: '[PRE7]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You will need to clone the Pachyderm repository into this directory, as described
    in the next chapter.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要将 Pachyderm 仓库克隆到这个目录中，具体步骤将在下一章节中描述。
- en: 'Update to the latest version of `grpc`, as follows:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新到最新版本的`grpc`，如下所示：
- en: '[PRE8]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: After you have configured `$GOPATH`, you need to clone the Pachyderm source
    repository.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 配置好`$GOPATH`后，你需要克隆 Pachyderm 源代码仓库。
- en: Cloning the Pachyderm source repository
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 克隆 Pachyderm 源代码仓库
- en: Before you can use Pachyderm language clients, you need to have a copy of the
    Pachyderm source repository on your machine to be able to use the APIs. You will
    run the client methods against an existing Pachyderm cluster. The Pachyderm repository
    is stored in GitHub at [https://github.com/pachyderm/pachyderm](https://github.com/pachyderm/pachyderm).
    In addition, you need to make sure that you switch to the branch and tag that
    matches your `pachd` and `pachctl` version. In this section, we will learn how
    to clone the Pachyderm repository and how to switch to the required branch and
    tag.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 Pachyderm 语言客户端之前，你需要将 Pachyderm 源代码仓库克隆到你的机器上，以便使用 API。你将通过客户端方法与现有的 Pachyderm
    集群进行交互。Pachyderm 仓库存储在 GitHub 上，地址为[https://github.com/pachyderm/pachyderm](https://github.com/pachyderm/pachyderm)。此外，你还需要确保切换到与
    `pachd` 和 `pachctl` 版本相匹配的分支和标签。在本节中，我们将学习如何克隆 Pachyderm 仓库，以及如何切换到所需的分支和标签。
- en: To be able to run Go modules used in the scripts in this section, you need to
    clone the Pachyderm repository under the `$GOPATH` directory on your computer.
    On Mac, Go is installed under `/Users/<username>/go`, and you can clone the Pachyderm
    repository at `/ Users/<username>/go/src/github.com/`.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够运行本节脚本中使用的 Go 模块，你需要在计算机上的`$GOPATH`目录下克隆 Pachyderm 仓库。在 Mac 上，Go 安装在`/Users/<username>/go`目录下，你可以在`/Users/<username>/go/src/github.com/`路径下克隆
    Pachyderm 仓库。
- en: 'To clone the Pachyderm repository, complete the following steps:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 克隆 Pachyderm 仓库，请完成以下步骤：
- en: Go to [https://github.com/pachyderm/pachyderm](https://github.com/pachyderm/pachyderm).
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问[https://github.com/pachyderm/pachyderm](https://github.com/pachyderm/pachyderm)。
- en: 'Click on the **Code** tab, as shown in the following screenshot:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**代码**标签，如下图所示：
- en: '![Figure 10.2 – Pachyderm source repository'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.2 – Pachyderm 源代码仓库'
- en: '](img/B17085_10_002.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17085_10_002.jpg)'
- en: Figure 10.2 – Pachyderm source repository
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.2 – Pachyderm 源代码仓库
- en: In the drop-down menu, select an option to clone with **HTTPS** or **SSH**,
    and click the **Clone** icon.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下拉菜单中，选择使用**HTTPS**或**SSH**进行克隆，并点击**克隆**图标。
- en: Important note
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重要说明
- en: If you decide to clone with **Secure Shell** (**SSH**) and this is your first
    time cloning from GitHub, you will likely need to configure an SSH key pair. For
    more information, see [https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh](https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh).
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你决定使用**安全外壳**（**SSH**）进行克隆，并且这是你第一次从 GitHub 克隆，可能需要配置一个 SSH 密钥对。有关更多信息，请参见[https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh](https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh)。
- en: 'Go to your terminal and run the `git clone` command with the **HyperText Transfer
    Protocol Secure** (**HTTPS**) or SSH address you copied in *Step 3*, as follows:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端，使用您在*步骤 3*中复制的**超文本传输协议安全** (**HTTPS**) 或 SSH 地址运行 `git clone` 命令，如下所示：
- en: '[PRE9]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You should see an output similar to this:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到类似于以下的输出：
- en: '[PRE10]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The Pachyderm source code will be cloned to the `pachyderm` directory.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Pachyderm 源代码将被克隆到 `pachyderm` 目录。
- en: 'Go to the `pachyderm` directory by running the following command:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令进入 `pachyderm` 目录：
- en: '[PRE11]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Check the branch you are on by running the following command:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令检查您所在的分支：
- en: '[PRE12]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Get a list of tags by running the following command:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令获取标签列表：
- en: '[PRE13]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Verify the version of `pachctl` and `pachd` that you are using by running the
    following command:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令验证您正在使用的 `pachctl` 和 `pachd` 版本：
- en: '[PRE14]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Your output might look like this:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的输出可能如下所示：
- en: '[PRE15]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Check out the tag that corresponds to the version of `pachctl` and `pachd`
    that you are using. In this example, we need to check out the `2.0.1` tag:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看与您使用的 `pachctl` 和 `pachd` 版本相对应的标签。在这个例子中，我们需要查看 `2.0.1` 标签：
- en: '[PRE16]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Check that you have switched to the correct version by running the following
    command:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令检查您是否切换到了正确的版本：
- en: '[PRE17]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'You should see the following output:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下输出：
- en: '[PRE18]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: We now have valid Pachyderm source code that we will use to access our Pachyderm
    cluster. Next, let's connect to Pachyderm with the Go client.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有了有效的 Pachyderm 源代码，我们将用它来访问我们的 Pachyderm 集群。接下来，让我们使用 Go 客户端连接到 Pachyderm。
- en: Connecting to Pachyderm with the Go client
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Go 客户端连接到 Pachyderm
- en: You must have a running Pachyderm cluster to be able to use the Go API client.
    If you have followed previous sections, you likely have one running on a cloud
    platform of your choice or locally. If not, go back to [*Chapter 4*](B17085_04_Final_SB_Epub.xhtml#_idTextAnchor096),
    *Installing Pachyderm Locally*, or [*Chapter 5*](B17085_05_Final_SB_Epub.xhtml#_idTextAnchor123),
    *Installing Pachyderm on a Cloud Platform*, and deploy a cluster.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须有一个正在运行的 Pachyderm 集群才能使用 Go API 客户端。如果您已经按照前面的步骤操作，您可能已经在您选择的云平台或本地运行了一个集群。如果没有，请返回到
    [*第 4 章*](B17085_04_Final_SB_Epub.xhtml#_idTextAnchor096)，*本地安装 Pachyderm*，或者
    [*第 5 章*](B17085_05_Final_SB_Epub.xhtml#_idTextAnchor123)，*在云平台上安装 Pachyderm*，并部署一个集群。
- en: 'We will use the `access.go` script to access Pachyderm. Let''s look at the
    script to understand how it works. The first part of the script imports the required
    components, as we can see here:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 `access.go` 脚本来访问 Pachyderm。让我们看看这个脚本，了解它是如何工作的。脚本的第一部分导入了所需的组件，如我们在这里看到的：
- en: '[PRE19]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The second part of the script defines a `main` function. You must use the `main`
    function with Go; otherwise, it won''t work. The `main` function defines the `localhost`
    or `127.0.0.1`. `30650` is the `pachd` port:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本的第二部分定义了一个 `main` 函数。您必须在 Go 中使用 `main` 函数，否则它将无法工作。`main` 函数定义了 `localhost`
    或 `127.0.0.1`。`30650` 是 `pachd` 端口：
- en: '[PRE20]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The third part of the script, shown here, gets the version of your cluster:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本的第三部分，如下所示，获取您的集群版本：
- en: '[PRE21]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: To connect to a Pachyderm cluster, you need to know the IP address of your cluster.
    If running these examples on a local machine, `grpc://localhost:30650` should
    work.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 要连接到 Pachyderm 集群，您需要知道集群的 IP 地址。如果在本地机器上运行这些示例，`grpc://localhost:30650` 应该有效。
- en: 'Now, let''s run the script. Follow these next steps:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们运行脚本。请按照以下步骤操作：
- en: 'Unless you have a load balancer deployed that enables access to your cluster,
    you also need to make sure that you run Pachyderm port-forwarding all the time
    you are accessing your cluster through the API. To start Pachyderm port-forwarding,
    run the following command in a separate terminal window:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 除非您已经部署了一个负载均衡器，以便访问您的集群，否则在通过 API 访问集群时，您还需要确保始终运行 Pachyderm 的端口转发。要启动 Pachyderm
    端口转发，请在另一个终端窗口中运行以下命令：
- en: '[PRE22]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Run the `access.go` script, as follows:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `access.go` 脚本，如下所示：
- en: '[PRE23]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'This is an example response that you should get:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个您应该获得的示例响应：
- en: '[PRE24]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: We have successfully accessed our cluster through the Go API. Our cluster is
    running version 2.0.1\. Your version might be different.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经通过 Go API 成功访问了我们的集群。我们的集群正在运行版本 2.0.1\。您的版本可能不同。
- en: Now, let's use the Go API to create a Pachyderm repository.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用 Go API 创建一个 Pachyderm 仓库。
- en: Creating a repository with the Go client
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Go 客户端创建仓库
- en: Now that we know how to connect to Pachyderm, let's create a repository with
    the code we have in the `create-repo.go` script.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道如何连接到 Pachyderm，让我们使用 `create-repo.go` 脚本中的代码来创建一个仓库。
- en: 'Here is what the script imports:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是脚本导入的内容：
- en: '[PRE25]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The next part of the script defines a `main` function that performs the following
    operations:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本的下一部分定义了一个`main`函数，执行以下操作：
- en: Connects to the Pachyderm cluster.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 连接到Pachyderm集群。
- en: Creates a repository called `photos`.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建了一个名为`photos`的仓库。
- en: Lists the repositories on this cluster.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出了该集群上的所有仓库。
- en: 'Here is how it looks:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 它的样子如下：
- en: '[PRE26]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: You must run port-forwarding and make sure you replace the IP address listed
    in the script with the IP address of your cluster. If you are running the cluster
    in `minikube`, you probably don't need to change anything.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须运行端口转发，并确保将脚本中列出的IP地址替换为你的集群IP地址。如果你在`minikube`中运行集群，你可能不需要更改任何内容。
- en: 'Run the `create-repo.go` script, as follows:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`create-repo.go`脚本，具体如下：
- en: '[PRE27]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'This command returns the following output:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令返回以下输出：
- en: '[PRE28]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Now that we have created a repository, let's put some data into it.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了一个仓库，接下来让我们往里面添加一些数据。
- en: Putting data into a Pachyderm repository with the Go client
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Go客户端将数据放入Pachyderm仓库
- en: 'In the previous section, we created a Pachyderm repository called `photos`.
    Let''s add the files that we have used in [*Chapter 6*](B17085_06_Final_SB_Epub.xhtml#_idTextAnchor156),
    *Creating Your First Pipeline,* to this repository. We will use the `put-files.go`
    script to add the files. Here is what the script imports:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一部分中，我们创建了一个名为`photos`的Pachyderm仓库。接下来，我们将把我们在[*第六章*](B17085_06_Final_SB_Epub.xhtml#_idTextAnchor156)中使用的文件，*创建你的第一个管道*，添加到这个仓库。我们将使用`put-files.go`脚本添加这些文件。下面是脚本导入的内容：
- en: '[PRE29]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The next part of the script connects to the Pachyderm cluster and adds the `landscape.png`,
    `red_vase.png`, and `hand.png` files to the `master` branch of the `photos` repository.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本的下一部分连接到Pachyderm集群，并将`landscape.png`、`red_vase.png`和`hand.png`文件添加到`photos`仓库的`master`分支中。
- en: 'Here is the part that connects to the repository. Make sure you replace the
    IP address with the address of your cluster:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这是连接到仓库的部分。确保你将IP地址替换为集群的地址：
- en: '[PRE30]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'This part adds the files:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分添加了文件：
- en: '[PRE31]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'And the last part, shown here, lists the files in the master branch of the
    `photos` repository:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一部分，如下所示，列出了`photos`仓库`master`分支中的文件：
- en: '[PRE32]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Let''s run this script with the following command:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过以下命令运行这个脚本：
- en: '[PRE33]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'This script returns the following output:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本返回了以下输出：
- en: '[PRE34]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Great! We have a repository with data in it. Now, let's learn how to create
    a pipeline.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！我们已经有一个包含数据的仓库了。现在，让我们学习如何创建管道。
- en: Creating pipelines with the Go client
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Go客户端创建管道
- en: Finally, we can create pipelines for our example from [*Chapter 6*](B17085_06_Final_SB_Epub.xhtml#_idTextAnchor156),
    *Creating Your First Pipeline*.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以从[*第六章*](B17085_06_Final_SB_Epub.xhtml#_idTextAnchor156)，*创建你的第一个管道*，为我们的示例创建管道。
- en: 'Here is what the `create-pipeline.go` script imports:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是`create-pipeline.go`脚本导入的内容：
- en: '[PRE35]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The second part of the script connects to the Pachyderm cluster by using the
    `pachd` IP address, as follows:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本的第二部分通过使用`pachd`的IP地址连接到Pachyderm集群，具体如下：
- en: '[PRE36]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The next part of the script creates a `contour` pipeline. You can see that
    the script uses the `svekars/contour-histogram:1.0` image and gets the data from
    the `photos` repository with the `/` glob pattern. One important thing to note
    in the example shown here is that you need to specify the `parallelism_spec` for
    all pipelines:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本的下一部分创建了一个`contour`管道。你可以看到脚本使用了`svekars/contour-histogram:1.0`镜像，并通过`/`全局模式从`photos`仓库中获取数据。这里需要注意的一点是，你需要为所有管道指定`parallelism_spec`：
- en: '[PRE37]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Next, the script creates a `histogram` pipeline, as follows:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，脚本创建了一个`histogram`管道，具体如下：
- en: '[PRE38]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'And finally, the script lists all the created pipelines, as follows:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，脚本列出了所有已创建的管道，具体如下：
- en: '[PRE39]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Run the following command:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE40]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Here is an example response:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个示例响应：
- en: '[PRE41]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: You can see that the script has created two of our pipelines, as intended. We
    have the whole example uploaded in one file called `contour-go-example.go` in
    the chapter's GitHub repository. Now that you have learned how to do it, you can
    just run that one script to create a whole contour pipeline example from one command.
    Next, we'll learn how to clean up our cluster.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到脚本已经创建了我们预期的两个管道。我们已经将整个示例上传到这一章的GitHub仓库中的`contour-go-example.go`文件里。现在你已经学会了如何做，你可以只运行这个脚本，通过一个命令创建一个完整的轮廓管道示例。接下来，我们将学习如何清理我们的集群。
- en: Cleaning up the cluster with the Go client
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Go客户端清理集群
- en: The `cleanup.go` script cleans up your cluster and deletes all the pipelines,
    data, and repositories. Only run it if you do not want to preserve the data anymore.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '`cleanup.go` 脚本会清理集群并删除所有管道、数据和仓库。只有在你不再希望保留数据时，才运行它。'
- en: 'This script only needs to import the client from the Pachyderm repository.
    For this, the following code is required:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本只需要从 Pachyderm 仓库中导入客户端。为此，需要以下代码：
- en: '[PRE42]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The next part of the script deletes all the repositories and pipelines. We
    set the `force` flag to `true` for all pipelines and repositories so that Pachyderm
    does not interrupt deletion due to downstream pipeline dependencies. The code
    is illustrated in the following snippet:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本的下一部分删除所有的仓库和管道。我们将所有管道和仓库的 `force` 标志设置为 `true`，以便 Pachyderm 不会因为下游管道的依赖关系而中断删除。代码如下所示：
- en: '[PRE43]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'And the final part of the script returns empty lists since we delete all the
    pipelines and repositories, as illustrated in the following code snippet:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本的最后部分返回空列表，因为我们删除了所有的管道和仓库，如以下代码片段所示：
- en: '[PRE44]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Run the following command:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE45]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'This command returns the following output:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令会返回以下输出：
- en: '[PRE46]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: In this section, we have learned how to use the Go client to create Pachyderm
    pipelines and repositories. Next, let's learn how to do this with the Pachyderm
    Python client.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分中，我们学习了如何使用 Go 客户端创建 Pachyderm 管道和仓库。接下来，让我们学习如何使用 Pachyderm Python 客户端来实现这一点。
- en: Using the Pachyderm Python client
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Pachyderm Python 客户端
- en: Python is probably one of the most popular languages within the software engineering
    and data science community. Pachyderm provides an officially supported Python
    client through the `python-pachyderm` package. You can find the Python Pachyderm
    source repository on GitHub at [https://github.com/pachyderm/python-pachyderm](https://github.com/pachyderm/python-pachyderm)
    and on the **Python Package Index** (**PyPI**) at [https://pypi.org/project/python-pachyderm/](https://pypi.org/project/python-pachyderm/).
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: Python 可能是软件工程和数据科学社区中最受欢迎的编程语言之一。Pachyderm 通过 `python-pachyderm` 包提供了一个官方支持的
    Python 客户端。你可以在 GitHub 上找到 Python Pachyderm 的源代码仓库，网址为 [https://github.com/pachyderm/python-pachyderm](https://github.com/pachyderm/python-pachyderm)，也可以在
    **Python 包索引** (**PyPI**) 上找到，网址为 [https://pypi.org/project/python-pachyderm/](https://pypi.org/project/python-pachyderm/)。
- en: 'The main files that you can use as a Python client reference are located in
    the [https://github.com/pachyderm/python-pachyderm/tree/master/src/python_pachyderm/mixin](https://github.com/pachyderm/python-pachyderm/tree/master/src/python_pachyderm/mixin)
    directory of the Pachyderm source repository—most notably, the following files:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 作为 Python 客户端参考的主要文件位于 Pachyderm 源代码仓库的 [https://github.com/pachyderm/python-pachyderm/tree/master/src/python_pachyderm/mixin](https://github.com/pachyderm/python-pachyderm/tree/master/src/python_pachyderm/mixin)
    目录下，最重要的文件如下：
- en: '[https://github.com/pachyderm/python-pachyderm/blob/master/src/python_pachyderm/client.py](https://github.com/pachyderm/python-pachyderm/blob/master/src/python_pachyderm/client.py)'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/pachyderm/python-pachyderm/blob/master/src/python_pachyderm/client.py](https://github.com/pachyderm/python-pachyderm/blob/master/src/python_pachyderm/client.py)'
- en: '[https://github.com/pachyderm/python-pachyderm/blob/master/src/python_pachyderm/mixin/pfs.py](https://github.com/pachyderm/python-pachyderm/blob/master/src/python_pachyderm/mixin/pfs.py)'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/pachyderm/python-pachyderm/blob/master/src/python_pachyderm/mixin/pfs.py](https://github.com/pachyderm/python-pachyderm/blob/master/src/python_pachyderm/mixin/pfs.py)'
- en: '[https://github.com/pachyderm/python-pachyderm/blob/master/src/python_pachyderm/mixin/pps.py](https://github.com/pachyderm/python-pachyderm/blob/master/src/python_pachyderm/mixin/pps.py)'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/pachyderm/python-pachyderm/blob/master/src/python_pachyderm/mixin/pps.py](https://github.com/pachyderm/python-pachyderm/blob/master/src/python_pachyderm/mixin/pps.py)'
- en: 'Before you proceed, you must have the following components configured on your
    machine:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，你的机器上必须配置以下组件：
- en: A copy of the Pachyderm repository (see the *Cloning the Pachyderm source repository*
    section). With Python Pachyderm, you can clone your repository to any directory
    on your machine. It does not have to be `$GOPATH`.
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pachyderm 仓库的一个副本（参见 *克隆 Pachyderm 源代码仓库* 部分）。使用 Python Pachyderm，你可以将仓库克隆到机器上的任何目录。它不必在
    `$GOPATH` 中。
- en: Python 3.6 or later installed on your machine.
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 机器上安装了 Python 3.6 或更高版本。
- en: Access to an active Pachyderm cluster. If it's a local installation, you need
    to have Pachyderm port-forwarding running all the time you work with the repository
    through the APIs. If it's a cloud installation, you need to either have a load
    balancer running to enable access to your cluster, or you might be able to use
    Pachyderm port-forwarding as well.
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问一个活动的 Pachyderm 集群。如果是本地安装，你需要在通过 API 与仓库交互时保持 Pachyderm 的端口转发始终运行。如果是云安装，你需要启用负载均衡器以允许访问集群，或者你也可能能够使用
    Pachyderm 的端口转发。
- en: We have reviewed the prerequisites for this section. Now, let's install the
    `python-pachyderm` client.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经回顾了本节的先决条件。现在，让我们安装 `python-pachyderm` 客户端。
- en: Installing the Pachyderm Python client
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Pachyderm Python 客户端
- en: Before you can start using the Pachyderm Python client, you need to install
    it on your machine.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始使用 Pachyderm Python 客户端之前，你需要在你的机器上安装它。
- en: 'To install the Python Pachyderm client, complete the following steps:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 Python Pachyderm 客户端，请完成以下步骤：
- en: Open a terminal window.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个终端窗口。
- en: 'If you are on macOS or Linux, run the following command:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你使用的是 macOS 或 Linux，请运行以下命令：
- en: '[PRE47]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'You should see the following output:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '[PRE48]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Your version of the `python-pachyderm` package might be different.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 你安装的 `python-pachyderm` 包的版本可能不同。
- en: Now that we have `python-pachyderm` installed, let's connect to Pachyderm by
    using `python-pachyderm`.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了 `python-pachyderm`，让我们通过使用 `python-pachyderm` 连接到 Pachyderm。
- en: Connecting to your Pachyderm cluster with the Python client
  id: totrans-220
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Python 客户端连接到你的 Pachyderm 集群
- en: 'To get started, let''s use the `access.py` script to connect to your cluster.
    Make sure port-forwarding is running on your machine. Here is the script:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始，我们使用 `access.py` 脚本连接到你的集群。确保端口转发在你的机器上正在运行。这里是脚本：
- en: '[PRE49]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: This script connects to `pachd`, which runs on [https://localhost:30650](https://localhost:30650),
    by using the `python_pachyderm.Client()` invocation and prints the version of
    Pachyderm that you are running.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本通过使用 `python_pachyderm.Client()` 调用连接到运行在 [https://localhost:30650](https://localhost:30650)
    上的 `pachd`，并打印出你正在运行的 Pachyderm 版本。
- en: Let's run this script and see what output it returns.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行这个脚本，看看它返回什么输出。
- en: 'Run the `access.py` script with the following command:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令运行 `access.py` 脚本：
- en: '[PRE50]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'You should see output similar to this:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到类似于以下的输出：
- en: '[PRE51]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: This output means that we are on version 2.0.1\. Your output might be different.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 这个输出意味着我们正在使用版本 2.0.1。你的输出可能不同。
- en: Now that we know how to access the cluster, let's go ahead and create a Pachyderm
    repository.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道如何访问集群了，接下来让我们创建一个 Pachyderm 仓库。
- en: Creating a Pachyderm repository with the Python client
  id: totrans-231
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Python 客户端创建一个 Pachyderm 仓库
- en: We will use the `create-repo.py` script to create a Pachyderm repository called
    `photos`.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 `create-repo.py` 脚本创建一个名为 `photos` 的 Pachyderm 仓库。
- en: 'Here is the code of the script:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 这是脚本的代码：
- en: '[PRE52]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Run the `create-repo.py` script with the following command:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令运行 `create-repo.py` 脚本：
- en: '[PRE53]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Here is an example output:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个示例输出：
- en: '[PRE54]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Now that we have a repository created, let's put some data into it.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了一个仓库，让我们把一些数据放入其中。
- en: Putting data into a Pachyderm repository with the Python client
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Python 客户端将数据放入 Pachyderm 仓库
- en: 'We will put the same files we used in [*Chapter 6*](B17085_06_Final_SB_Epub.xhtml#_idTextAnchor156),
    *Creating Your First Pipeline,* to the `photos` repository we have just created.
    Here is the script that we will use:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把在 [*第 6 章*](B17085_06_Final_SB_Epub.xhtml#_idTextAnchor156) 中使用的相同文件，即 *创建你的第一个管道*，放入我们刚刚创建的
    `photos` 仓库中。以下是我们将使用的脚本：
- en: '[PRE55]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: The script uses the `client.commit` method to start a commit to the master branch
    of the `photos` repository, and the `client.put_file_bytes` adds three files to
    the repository. Note that `client.list_file` needs to be a `list` and not a `string`
    for the command to work correctly.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 该脚本使用 `client.commit` 方法开始提交到 `photos` 仓库的主分支，`client.put_file_bytes` 向仓库添加三个文件。请注意，`client.list_file`
    需要是 `list` 类型，而不是 `string`，以便命令能够正确运行。
- en: Let's run this script.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行这个脚本。
- en: 'Run the `put-files.py` script with the following command:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令运行 `put-files.py` 脚本：
- en: '[PRE56]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Here is the system response that you should get:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你应该得到的系统响应：
- en: '[PRE57]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: The preceding output is truncated. You should see the same output for each file
    that we added to the repository.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的输出被截断了。你应该会看到我们添加到仓库的每个文件的相同输出。
- en: Now that we have added the files, let's create pipelines for this example.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经添加了文件，让我们为这个示例创建管道。
- en: Creating pipelines with the Pachyderm Python client
  id: totrans-251
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Pachyderm Python 客户端创建管道
- en: Now that we have a repository and files uploaded to it, let's use the `create-pipeline.py`
    script to create two pipelines from the example we had in [*Chapter 6*](B17085_06_Final_SB_Epub.xhtml#_idTextAnchor156),
    *Creating Your First Pipeline*.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经上传了仓库和文件，让我们使用`create-pipeline.py`脚本根据我们在[*第6章*](B17085_06_Final_SB_Epub.xhtml#_idTextAnchor156)中介绍的示例，创建两个管道，*创建你的第一个管道*。
- en: '`python-pachyderm` provides two methods to create pipelines, as outlined here:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '`python-pachyderm`提供了两种方法来创建管道，具体如下：'
- en: '`create_pipeline`: This method is for all languages and is equivalent to the
    `pachctl create pipeline` method.'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`create_pipeline`：此方法适用于所有语言，等同于`pachctl create pipeline`方法。'
- en: '`create_python_pipeline`: This pipeline is designed to be run with Python code
    and provides a slightly different **User Experience** (**UX**). You can read more
    about this method in the Pachyderm documentation, at [https://docs.pachyderm.com](https://docs.pachyderm.com).'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`create_python_pipeline`：此管道旨在与Python代码一起运行，并提供稍微不同的**用户体验**（**UX**）。你可以在Pachyderm文档中了解更多关于此方法的信息，访问[https://docs.pachyderm.com](https://docs.pachyderm.com)。'
- en: We will use the standard `create_pipeline` method to create this pipeline.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用标准的`create_pipeline`方法来创建这个管道。
- en: 'The first part of the script creates a `contour` pipeline, as follows:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本的第一部分创建一个`contour`管道，代码如下：
- en: '[PRE58]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'The second part of the script creates a `histogram` pipeline, as follows:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本的第二部分创建一个`histogram`管道，代码如下：
- en: '[PRE59]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'And the last part of the script returns a list of pipelines that were created,
    as illustrated in the following code snippet:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本的最后一部分返回一个列表，显示已创建的管道，如以下代码片段所示：
- en: '[PRE60]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Let's run this script.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行这个脚本。
- en: 'Run the `create-pipeline.py` script with the following command:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令运行`create-pipeline.py`脚本：
- en: '[PRE61]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Here is a fragment of the output:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出的一部分：
- en: '[PRE62]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: In this section, we have learned how to create pipelines by using the `python-pachyderm`
    client. Next, let's clean up our cluster.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们已经学习了如何使用`python-pachyderm`客户端创建管道。接下来，让我们清理我们的集群。
- en: Cleaning up the cluster with the Python client
  id: totrans-269
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Python客户端清理集群
- en: We have successfully recreated our contour and histogram pipeline example. The
    whole example is available as one file called `contour-histogram-example.py` in
    the GitHub repository. You can download it at [https://github.com/PacktPublishing/Reproducible-Data-Science-with-Pachyderm/tree/main/Chapter10-Pachyderm-Language-Clients](https://github.com/PacktPublishing/Reproducible-Data-Science-with-Pachyderm/tree/main/Chapter10-Pachyderm-Language-Clients)
    and recreate it as many times as needed.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经成功地重建了我们的轮廓（contour）和直方图（histogram）管道示例。整个示例作为一个文件`contour-histogram-example.py`，可以在GitHub代码库中找到。你可以通过[https://github.com/PacktPublishing/Reproducible-Data-Science-with-Pachyderm/tree/main/Chapter10-Pachyderm-Language-Clients](https://github.com/PacktPublishing/Reproducible-Data-Science-with-Pachyderm/tree/main/Chapter10-Pachyderm-Language-Clients)下载并根据需要多次重建。
- en: 'In this section, we will clean up our cluster so that we have a clean installation
    for [*Chapter 11*](B17085_11_Final_SB_Epub.xhtml#_idTextAnchor241), *Using Pachyderm
    Notebooks*. We will use the `cleanup.py` script for that, as follows:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将清理集群，以便为[*第11章*](B17085_11_Final_SB_Epub.xhtml#_idTextAnchor241)《使用Pachyderm笔记本》提供一个干净的安装环境。我们将使用`cleanup.py`脚本来实现这一点，代码如下：
- en: '[PRE63]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: This script uses the `delete_all_pipelines` method, which deletes all pipelines
    in the cluster. You can also use `delete_all` to delete all objects and primitives
    in the cluster.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 该脚本使用了`delete_all_pipelines`方法，它会删除集群中的所有管道。你还可以使用`delete_all`来删除集群中的所有对象和原始数据。
- en: Let's run this script.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行这个脚本。
- en: 'Run the `cleanup.py` script with the following command:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令运行`cleanup.py`脚本：
- en: '[PRE64]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'This command should return the following output:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令应该返回以下输出：
- en: '[PRE65]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: That's it! We have successfully cleaned up our cluster.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！我们已经成功地清理了我们的集群。
- en: Summary
  id: totrans-280
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we've learned about how to use the two officially supported
    Pachyderm language clients—the Pachyderm Go client and the Python client. We've
    learned how to clone the Pachyderm repository and switch to the correct branch
    and tag. We've learned how to connect, create repositories, put files into repositories,
    and create pipelines, as well as delete all the objects after we are done. There
    is much more that you can do with these two language clients, but the examples
    in this chapter give you a general idea about how to use them.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用两个官方支持的Pachyderm语言客户端——Pachyderm Go客户端和Python客户端。我们学习了如何克隆Pachyderm代码库并切换到正确的分支和标签。我们学习了如何连接、创建仓库、将文件放入仓库并创建管道，以及完成后删除所有对象。你可以使用这两个语言客户端做更多事情，但本章中的示例为你提供了如何使用它们的一般思路。
- en: In the next chapter, we will learn how to integrate Pachyderm with JupyterHub,
    a popular data science `python-pachyderm` client.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章节，我们将学习如何将 Pachyderm 与流行的数据科学 `python-pachyderm` 客户端集成到 JupyterHub 中。
- en: Further reading
  id: totrans-283
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Setting up Ingress with Traefik to access the Pachyderm UI: [https://docs.pachyderm.com/latest/deploy-manage/deploy/ingress/pach-ui-ingress/#traefik-ingress-controller-on-pachyderm-uis-cluster-in-one-diagram](https://docs.pachyderm.com/latest/deploy-manage/deploy/ingress/pach-ui-ingress/#traefik-ingress-controller-on-pachyderm-uis-cluster-in-one-diagram)'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Traefik 设置 Ingress 以访问 Pachyderm UI：[https://docs.pachyderm.com/latest/deploy-manage/deploy/ingress/pach-ui-ingress/#traefik-ingress-controller-on-pachyderm-uis-cluster-in-one-diagram](https://docs.pachyderm.com/latest/deploy-manage/deploy/ingress/pach-ui-ingress/#traefik-ingress-controller-on-pachyderm-uis-cluster-in-one-diagram)
- en: '*Connecting to GitHub with SSH*: [https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh](https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh)'
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用 SSH 连接 GitHub*：[https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh](https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh)'
- en: 'Go documentation: [https://golang.org/doc/](https://golang.org/doc/)'
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go 文档：[https://golang.org/doc/](https://golang.org/doc/)
- en: 'Python 3 documentation: [https://docs.python.org/3/](https://docs.python.org/3/)'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 3 文档：[https://docs.python.org/3/](https://docs.python.org/3/)
- en: 'Python Pachyderm client documentation: [https://python-pachyderm.readthedocs.io/en/stable/](https://python-pachyderm.readthedocs.io/en/stable/)'
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python Pachyderm 客户端文档：[https://python-pachyderm.readthedocs.io/en/stable/](https://python-pachyderm.readthedocs.io/en/stable/)
