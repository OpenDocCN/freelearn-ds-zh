- en: Leveraging the Spark GraphX API
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用Spark GraphX API
- en: In this chapter, we will learn how to create a graph from a data source. We
    will then carry out experiments with the Edge API and Vertex API. By the end of
    this chapter, you will know how to calculate the degree of vertex and PageRank.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何从数据源创建图。然后，我们将使用Edge API和Vertex API进行实验。在本章结束时，您将知道如何计算顶点的度和PageRank。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Creating a graph from a data source
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从数据源创建图
- en: Using the Vertex API
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Vertex API
- en: Using the Edge API
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Edge API
- en: Calculating the degree of vertex
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算顶点的度
- en: Calculating PageRank
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算PageRank
- en: Creating a graph from a data source
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从数据源创建图
- en: We will be creating a loader component that will be used to load the data, revisit
    the graph format, and load a Spark graph from file.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个加载器组件，用于加载数据，重新审视图格式，并从文件加载Spark图。
- en: Creating the loader component
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建加载器组件
- en: 'The `graph.g` file consists of a structure of vertex to vertex. In the following
    `graph.g` file, if we align `1` to `2`, this means that there is an edge between
    vertex ID `1` and vertex ID `2`. The second line means that there''s an edge from
    vertex ID `1` to `3`, then from `2` to `3`, and finally `3` to `5`:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`graph.g`文件包含顶点到顶点的结构。在下面的`graph.g`文件中，如果我们将`1`对齐到`2`，这意味着顶点ID`1`和顶点ID`2`之间有一条边。第二行表示从顶点ID`1`到顶点ID`3`有一条边，然后从`2`到`3`，最后从`3`到`5`：'
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We will take the `graph.g` file, load it, and see how it will provide results
    in Spark. First, we need to get a resource to our `graph.g` file. We will do this
    using the `getClass.getResource()` method to get the path to it, as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将取`graph.g`文件，加载它，并查看它将如何在Spark中提供结果。首先，我们需要获取我们的`graph.g`文件的资源。我们将使用`getClass.getResource()`方法来获取它的路径，如下所示：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Revisiting the graph format
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重新审视图格式
- en: 'Next, we have the `GraphBuilder` method, which is our own component:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们有`GraphBuilder`方法，这是我们自己的组件：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following is our `GraphBuilder.scala` file for our `GraphBuilder` method:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们的`GraphBuilder.scala`文件，用于我们的`GraphBuilder`方法：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: It uses a `GraphLoader` class from the `org.apache.spark.graphx.{Graph, GraphLoader}` package
    and we are specifying the format.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 它使用了`org.apache.spark.graphx.{Graph, GraphLoader}`包中的`GraphLoader`类，并且我们指定了格式。
- en: The format that's specified here is `edgeListFile`. We are passing the `sc` parameter,
    which is the `SparkContext` and `path` parameter, which contains the path of where
    the file is placed. The resulting graph will be `Graph [Int, Int]`, which we will
    use as the identifier of our vertices.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这里指定的格式是`edgeListFile`。我们传递了`sc`参数，即`SparkContext`和`path`参数，其中包含文件的路径。得到的图将是`Graph
    [Int, Int]`，我们将使用它作为我们顶点的标识符。
- en: Loading Spark from file
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从文件加载Spark
- en: 'Once we have the resulting graph, we can pass the `spark` and `path` parameters
    to our `GraphBuilder.loadFromFile()` method, and at this point, we''ll have a
    `graph` that is a construct graph of `Graph [Int, Int]`, as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们得到了结果图，我们可以将`spark`和`path`参数传递给我们的`GraphBuilder.loadFromFile()`方法，此时，我们将得到一个`Graph
    [Int, Int]`的构造图，如下所示：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To iterate and validate that our graph was properly loaded, we will use `triplets`
    from `graph`, which are a pair of vertex to vertex and also an edge between those
    vertices. We will see that the structure of the graph was loaded properly:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 迭代和验证我们的图是否被正确加载，我们将使用`图`中的`三元组`，它们是一对顶点到顶点，也是这些顶点之间的边。我们将看到图的结构是否被正确加载：
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'At the end, we are asserting that we get `4` triplets (as shown earlier in
    the *Creating the loader component* section, we have four definitions from the
    `graph.g` file):'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们断言我们得到了`4`个三元组（如前面在*创建加载器组件*部分中所示，我们从`graph.g`文件中有四个定义）：
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We will start the test and see whether we are able to load our graph properly.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将开始测试并查看我们是否能够正确加载我们的图。
- en: 'We get the following output. Here, we have `(2, 1)`, `(3, 1)`, `(3,1)`, `(5,1)`,
    `(1,1)`, `(2,1)`, `(1,1)`, and `(3,1)`:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到了以下输出。这里，我们有`(2, 1)`，`(3, 1)`，`(3,1)`，`(5,1)`，`(1,1)`，`(2,1)`，`(1,1)`和`(3,1)`：
- en: '![](img/5623373e-3747-48f4-bcc0-935cffd2fed2.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5623373e-3747-48f4-bcc0-935cffd2fed2.png)'
- en: Hence, according to the output graph, we were able to reload our graph using
    Spark.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，根据输出的图，我们能够使用Spark重新加载我们的图。
- en: Using the Vertex API
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Vertex API
- en: In this section, we will construct the graph using edge. We will learn to use
    the Vertex API and also leverage edge transformations.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将使用边来构建图。我们将学习使用Vertex API，并利用边的转换。
- en: Constructing a graph using the vertex
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用顶点构建图
- en: 'Constructing a graph is not a trivial task; we need to supply vertices and
    edges between them. Let''s focus on the first part. The first part consists of our
    `users`, `users` is an RDD of `VertexId` and `String` as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 构建图不是一项简单的任务；我们需要提供顶点和它们之间的边。让我们专注于第一部分。第一部分包括我们的`users`，`users`是一个`VertexId`和`String`的RDD，如下所示：
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`VertexId` is of the `long` type; this is only a `type` alias for `Long`:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`VertexId`是`long`类型；这只是`Long`的`type`别名：'
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'But since our graph sometimes has a lot of content, the `VertexId` should be
    unique and a very long number. Every vertex in our vertices'' RDD should have
    a unique `VertexId`. The custom data associated with the vertex can be any class,
    but we will go for simplicity with the `String` class. First, we are creating
    a vertex with ID `1` and string data `a`, the next with ID `2` and string data
    `b`, the next with ID `3` and string data `c`, and similarly for the data with
    ID `4` and string `d`, as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 但由于我们的图有时包含大量内容，`VertexId`应该是唯一的且非常长的数字。我们的顶点RDD中的每个顶点都应该有一个唯一的`VertexId`。与顶点关联的自定义数据可以是任何类，但我们将选择使用`String`类来简化。首先，我们创建一个ID为`1`的顶点和字符串数据`a`，下一个ID为`2`的顶点和字符串数据`b`，下一个ID为`3`的顶点和字符串数据`c`，以及ID为`4`的数据和字符串`d`，如下所示：
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Creating a graph from only vertices will be correct but not very useful. A graph
    is the best way to find relationships between the data, which is why a graph is
    the main building block for social networks.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 仅从顶点创建图是正确的，但并不是非常有用。图是查找数据之间关系的最佳方式，这就是为什么图是社交网络的主要构建块。
- en: Creating couple relationships
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建夫妻关系
- en: 'In this section, we will create couple relationships and edges between our
    vertices. Here, we''ll have a relationship that is an `Edge`. An `Edge` is a case
    class from the `org.apache.spark.graphx` package. It is a bit more involved because
    we need to specify the source vertex ID and destination vertex ID. We want to
    specify that vertex ID `1` and `2` have a relationship, so let''s make a label
    for this relationship. In the following code, we will specify vertex ID `1` and
    ID `2` as a `friend`, then we will specify vertex ID `1` and ID `3` as a `friend` as
    well. Lastly, vertex ID `2` and ID `4` will be a `wife`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将创建顶点之间的夫妻关系和边缘。在这里，我们将有一个关系，即`Edge`。`Edge`是来自`org.apache.spark.graphx`包的一个样例类。它稍微复杂一些，因为我们需要指定源顶点ID和目标顶点ID。我们想要指定顶点ID`1`和`2`有一个关系，所以让我们为这个关系创建一个标签。在下面的代码中，我们将指定顶点ID`1`和ID`2`为`friend`，然后我们还将指定顶点ID`1`和ID`3`也为`friend`。最后，顶点ID`2`和ID`4`将是`wife`：
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Also, a label could be of any type—it doesn''t need to be a `String` type;
    we can type what we want and pass it. Once we have our vertices, users, and edge
    relationships, we can create a graph. We are using the `Graph` class'' `apply`
    method to construct our Spark GraphX graph. We need to pass `users`, `VertexId`,
    and `relationships`, as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，标签可以是任何类型-它不需要是`String`类型；我们可以输入我们想要的内容并传递它。一旦我们有了我们的顶点、用户和边缘关系，我们就可以创建一个图。我们使用`Graph`类的`apply`方法来构建我们的Spark
    GraphX图。我们需要传递`users`、`VertexId`和`relationships`，如下所示：
- en: '![](img/f41c7ab7-c2ee-417c-a501-8baa146d05ed.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f41c7ab7-c2ee-417c-a501-8baa146d05ed.png)'
- en: 'Returning `graph` is an RDD, but it''s a special RDD:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的`graph`是一个RDD，但它是一个特殊的RDD：
- en: '[PRE11]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'When we go to the `Graph` class, we will see that the `Graph` class has an
    RDD of `vertices` and an RDD of `edges`, so the `Graph` class is a companion object
    for two RDDs, as shown in the following screenshot:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们转到`Graph`类时，我们会看到`Graph`类有一个顶点的RDD和一个边缘的RDD，所以`Graph`类是两个RDD的伴生对象，如下截图所示：
- en: '![](img/3ed921b5-e3c9-454d-9c28-34296efda1c4.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3ed921b5-e3c9-454d-9c28-34296efda1c4.png)'
- en: 'We can get the underlying RDD of `vertices` and `edges` by issuing some methods.
    For example, if you want to get all the vertices, we can map all vertices and
    we will get the attribute and `VertexId`. Here, we are only interested in the
    attribute and we will convert it into uppercase, as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过发出一些方法来获取`vertices`和`edges`的基础RDD。例如，如果要获取所有顶点，我们可以映射所有顶点，我们将获取属性和`VertexId`。在这里，我们只对属性感兴趣，我们将其转换为大写，如下所示：
- en: '[PRE12]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The following are the attributes:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是属性：
- en: '[PRE13]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Once we convert it into uppercase, we can just collect all the vertices and
    perform `toList()`, as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们将其转换为大写，我们可以收集所有顶点并执行`toList()`，如下所示：
- en: '[PRE14]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We can see that after applying the transformation to the values, our graph
    has the following vertices:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，在对值应用转换后，我们的图具有以下顶点：
- en: '![](img/c5639e74-f504-4de7-9c38-dad03641c394.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c5639e74-f504-4de7-9c38-dad03641c394.png)'
- en: Using the Edge API
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Edge API
- en: In this section, we will construct the graph using the Edge API. We'll also
    use the vertex, but this time we'll focus on the edge transformations.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将使用Edge API构建图。我们还将使用顶点，但这次我们将专注于边缘转换。
- en: Constructing the graph using edge
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用边缘构建图
- en: As we saw in the previous sections, we have edges and vertices, which is an RDD.
    As this is an RDD, we can get an edge. We have a lot of methods that are available
    on the normal RDD. We can use the `max` method, `min` method, `sum` method, and
    all other actions. We will apply the `reduce` method, so the `reduce` method will
    take two edges, we will take `e1`, `e2`, and we can perform some logic on it.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的部分中看到的，我们有边缘和顶点，这是一个RDD。由于这是一个RDD，我们可以获取一个边缘。我们有许多可用于普通RDD的方法。我们可以使用`max`方法、`min`方法、`sum`方法和所有其他操作。我们将应用`reduce`方法，因此`reduce`方法将获取两个边缘，我们将获取`e1`、`e2`，并对其执行一些逻辑。
- en: 'The `e1` edge is an edge that has an attribute, destination, and a source,
    as shown in the following screenshot:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`e1`边缘是一个具有属性、目的地和源的边缘，如下截图所示：'
- en: '![](img/70fff1b2-97e3-4840-845f-7689be653d0a.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/70fff1b2-97e3-4840-845f-7689be653d0a.png)'
- en: 'Since the edge is chaining together two vertices, we can perform some logic
    here. For example, if the `e1` edge attribute is equal to `friend`, we want to
    lift an edge using the `filter` operation. So, the `filter` method is taking only
    one edge, and then if the edge `e1` is a `friend`, it will be perceived automatically.
    We can see that at the end we can `collect` it and perform a `toList` so that
    the API that is on Spark is available for our use. The following code will help
    us implement our logic:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 由于边缘将两个顶点链接在一起，我们可以在这里执行一些逻辑。例如，如果`e1`边缘属性等于`friend`，我们希望使用`filter`操作提升一个边缘。因此，`filter`方法只获取一个边缘，然后如果边缘`e1`是`friend`，它将被自动感知。我们可以看到最后我们可以`collect`它并执行`toList`，以便Spark上的API可供我们使用。以下代码将帮助我们实现我们的逻辑：
- en: '[PRE15]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'It also has a couple of methods on the top of the standard RDD. For example,
    we can do a map edge, which will take an edge, and we can take an attribute and
    map every label to uppercase, as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 它还具有标准RDD的一些方法。例如，我们可以执行一个map edge，它将获取一个边缘，我们可以获取一个属性，并将每个标签映射为大写，如下所示：
- en: '[PRE16]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: On the graph, we can also perform group edges. Grouping edges is similar to
    `GROUP BY`, but only for edges.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在图上，我们还可以执行边缘分组。边缘分组类似于`GROUP BY`，但仅适用于边缘。
- en: 'Type the following command to print line-mapping edges:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 输入以下命令以打印线路映射边缘：
- en: '[PRE17]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Let''s start our code. We can see in the output that our code has filtered
    the `wife` edge—we only perceive the `friend` edge from vertex ID `1` to ID `2`,
    and also vertex ID `1` to ID `3`, and map edges as shown in the following screenshot:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始我们的代码。我们可以在输出中看到，我们的代码已经过滤了`wife`边缘-我们只能感知从顶点ID`1`到ID`2`的`friend`边缘，以及从顶点ID`1`到ID`3`的边缘，并将边缘映射如下截图所示：
- en: '![](img/ad57af2a-f940-43aa-8b89-ed7248c18624.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ad57af2a-f940-43aa-8b89-ed7248c18624.png)'
- en: Calculating the degree of the vertex
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 计算顶点的度
- en: In this section, we will cover the total degree, then we'll split it into two
    parts—an in-degree and an out-degree—and we will understand how this works in
    the code.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将涵盖总度数，然后将其分为两部分——入度和出度——并且我们将了解这在代码中是如何工作的。
- en: 'For our first test, let''s construct the graph that we already know about:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的第一个测试，让我们构建我们已经了解的图：
- en: '[PRE18]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We can get the degrees using the `degrees` method. The `degrees` method is
    returning `VertexRDD` because `degrees` is a vertex:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`degrees`方法获得度。`degrees`方法返回`VertexRDD`，因为`degrees`是一个顶点：
- en: '[PRE19]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The result is as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '[PRE20]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The preceding code explains that for the `4L` instance of `VertexId`, there
    is only one relationship because there is a relationship between `2L` and `4L`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码解释了对于`VertexId 4L`实例，只有一个关系，因为`2L`和`4L`之间存在关系。
- en: 'Then, for the `2L` instance of `VertexId`, there are two, so it is between
    `1L, 2L` and `2L, 4L`. For the `1L` instance of `VertexId`, there are two, which
    are `1L, 2L` and `1L, 3L`, and for `VertexId 3L`, there is only one relationship,
    between `1L` and `3L`. This way, we can check how our graph is coupled and how
    many relationships there are. We can find out which vertex is best known by sorting
    them, so we can see that our test passed in the following screenshot:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，对于`VertexId 2L`实例，有两个，分别是`1L, 2L`和`2L, 4L`。对于`VertexId 1L`实例，有两个，分别是`1L,
    2L`和`1L, 3L`，对于`VertexId 3L`，只有一个关系，即`1L`和`3L`之间。通过这种方式，我们可以检查我们的图是如何耦合的，以及有多少关系。我们可以通过对它们进行排序来找出哪个顶点最知名，因此我们可以看到我们的测试在下面的截图中通过了。
- en: '![](img/14383131-b9a0-495e-b272-bf7b723f32bd.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/14383131-b9a0-495e-b272-bf7b723f32bd.png)'
- en: The in-degree
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入度
- en: 'The in-degree tells us how many vertices come into the second vertex, but not
    the other way around. This time, we can see that for the `2L` instance of `VertexId`,
    there''s only one inbound vertex. We can see that `2L` has a relationship with `1L`,
    `3L` has a relationship with `1L` as well, and `4L` has a relationship with `1L`.
    In the following resulting dataset, there will be no data for `VertexId 1L`, because
    `1L` is the input. So, `1L` would only be a source and not a destination:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 入度告诉我们有多少个顶点进入第二个顶点，但反之则不然。这次，我们可以看到对于`VertexId 2L`实例，只有一个入站顶点。我们可以看到`2L`与`1L`有关系，`3L`也与`1L`有关系，`4L`与`1L`有关系。在下面的结果数据集中，将没有`VertexId
    1L`的数据，因为`1L`是输入。所以，`1L`只会是一个源，而不是目的地：
- en: '[PRE21]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The preceding characteristic of the in-degree is a very useful property. We
    use the in-degree when we are unable to find out which of our pages are very important
    because they are linked through the page, not from it.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 入度的前面特征是一个非常有用的属性。当我们无法找出哪些页面非常重要，因为它们通过页面而不是从页面链接时，我们使用入度。
- en: 'By running this test, we can see that it works as expected:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行这个测试，我们可以看到它按预期工作：
- en: '![](img/b833ae5d-5154-4b61-9758-359815e92eaa.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b833ae5d-5154-4b61-9758-359815e92eaa.png)'
- en: The out-degree
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 出度
- en: The out-degree explains how many vertices are going out. This time, we'll be
    calculating the sources of our edges, relationships, and not destinations, like
    we did in the in-degree method.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 出度解释了有多少个顶点出去。这次，我们将计算边缘、关系的源，而不是目的地，就像我们在入度方法中所做的那样。
- en: 'To get the out-degree, we will use the following code:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获得出度，我们将使用以下代码：
- en: '[PRE22]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The `outDegrees` method contains both `RDD` and `VertexRDD`, which we have collected
    to a list using the `collect` and `toList` methods.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`outDegrees`方法包含`RDD`和`VertexRDD`，我们使用`collect`和`toList`方法将其收集到列表中。'
- en: 'Here, `VertexId 1L` should have two outbound vertices because there is a relationship
    between `1L, 2L` and `1L, 3L`:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`VertexId 1L`应该有两个出站顶点，因为`1L, 2L`和`1L, 3L`之间存在关系：
- en: '[PRE23]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Also, `VertexId 2L` should have one outbound vertex as there is a relationship
    between `2L` and `4L` and not the other way around, as shown in the preceding
    code.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，`VertexId 2L`应该有一个出站顶点，因为`2L`和`4L`之间存在关系，而反之则不然，如前面的代码所示。
- en: 'We will run this test and get the following output:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将运行这个测试并得到以下输出：
- en: '![](img/572ee639-66b1-4f94-8249-ba5853949981.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/572ee639-66b1-4f94-8249-ba5853949981.png)'
- en: Calculating PageRank
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 计算PageRank
- en: In this section, we will load data about users and reload data about their followers.
    We will use the graph API and the structure of our data, and we will calculate
    PageRank to calculate the rank of users.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将加载关于用户的数据并重新加载关于他们关注者的数据。我们将使用图形API和我们的数据结构，并计算PageRank来计算用户的排名。
- en: 'First, we need to load `edgeListFile`, as follows:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要加载`edgeListFile`，如下所示：
- en: '[PRE24]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'We have a `followers.txt` file; the following screenshot shows the format of
    the file, which is similar to the file we saw in the *Creating the loader component*
    section:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个`followers.txt`文件；以下截图显示了文件的格式，与我们在*创建加载器组件*部分看到的文件类似：
- en: '![](img/ce7f1f3a-0eff-4b12-9171-bb5b3fe8a45c.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ce7f1f3a-0eff-4b12-9171-bb5b3fe8a45c.png)'
- en: 'We can see that there''s a relationship between each of the vertex IDs. Hence,
    we are loading the `graph` from the `followers.txt` file and then issuing PageRank.
    We are taking `vertices` that will be needed, as follows:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到每个顶点ID之间存在关系。因此，我们从`followers.txt`文件加载`graph`，然后发出PageRank。我们将需要`vertices`，如下所示：
- en: '[PRE25]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: PageRank will calculate the influence and relationship between our vertices.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: PageRank将计算我们的顶点之间的影响和关系。
- en: Loading and reloading data about users and followers
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加载和重新加载关于用户和关注者的数据
- en: 'To find out which user has which name, we need to load the `users.txt` file.
    The `users.txt` file assigns the `VertexId` with a username and its own name.
    We use the following code:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 为了找出哪个用户有哪个名字，我们需要加载`users.txt`文件。`users.txt`文件将`VertexId`分配给用户名和自己的名字。我们使用以下代码：
- en: '[PRE26]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The following is the `users.txt` file:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`users.txt`文件：
- en: '![](img/b5c42ab0-8639-4371-8915-5905dbba68bc.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b5c42ab0-8639-4371-8915-5905dbba68bc.png)'
- en: 'We are splitting on the comma and the first group is our integer, which will
    be vertex ID, and then `fields(1)` is the name of vertex, as follows:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在逗号上拆分，第一组是我们的整数，它将是顶点ID，然后`fields(1)`是顶点的名称，如下所示：
- en: '[PRE27]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Next, we will `join` the `users` with `ranks`. We will `join` the `users` using
    the `VertexId` by using the `username` and `rank` of the user. Once we have that,
    we can sort everything by the `rank`, so we will take a second element of the
    tuple and it should be sorted as `sortBy ((t) =>t.2`. At the beginning of the
    file, we will have the user with the most influence:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将使用`join`将`users`与`ranks`连接起来。我们将使用用户的`VertexId`通过用户的`username`和`rank`来`join`
    `users`。一旦我们有了这些，我们就可以按`rank`对所有内容进行排序，所以我们将取元组的第二个元素，并且应该按`sortBy ((t) =>t.2`进行排序。在文件的开头，我们将拥有影响力最大的用户：
- en: '[PRE28]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'We will print the following and order the `rankByUsername`, as follows:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将打印以下内容并按`rankByUsername`进行排序：
- en: '[PRE29]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: If we skip the `sortBy` method, Spark does not guarantee any ordering of elements;
    to keep the ordering, we need to issue the `sortBy` method.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们跳过`sortBy`方法，Spark不保证元素的任何排序；为了保持排序，我们需要使用`sortBy`方法。
- en: 'After running the code, we get the following output:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行代码后，我们得到以下输出：
- en: '![](img/3d25a619-5388-4912-97c8-016a62cb11a9.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3d25a619-5388-4912-97c8-016a62cb11a9.png)'
- en: When we start running this test, we can see whether the GraphX PageRank was
    able to calculate the influence of our users. We get the output that's shown in
    the preceding screenshot, where `BarackObama` was first with `1.45` influence,
    then `ladygaga` with an influence of `1.39`, `odersky` with `1.29`, `jeresig`
    with `0.99`, `matai_zaharia` with `0.70`, and at the end, `justinbieber` with
    an influence of `0.15`.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们开始运行这个测试时，我们可以看到GraphX PageRank是否能够计算出我们用户的影响力。我们得到了前面截图中显示的输出，其中`BarackObama`的影响力最大为`1.45`，然后是`ladygaga`，影响力为`1.39`，`odersky`为`1.29`，`jeresig`为`0.99`，`matai_zaharia`为`0.70`，最后是`justinbieber`，影响力为`0.15`。
- en: From the preceding information, we were able to calculate complex algorithms
    with a minimal amount of code.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的信息，我们能够用最少的代码计算复杂的算法。
- en: Summary
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we delved into transformations and actions, and then we learned
    about Spark's immutable design. We studied how to avoid shuffle and how to reduce
    operational expenses. Then, we looked at how to save the data in the correct format.
    We also learned how to work with the Spark key/value API, and how to test Apache
    Spark jobs. After that, we learned how to create a graph from a data source, and
    then we investigated and experimented with the edge and vertex APIs. We learned
    how to calculate the degree of the vertex. Finally, we looked at PageRank and
    how we are able to calculate it using the Spark GraphicX API.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们深入研究了转换和操作，然后学习了Spark的不可变设计。我们研究了如何避免洗牌以及如何减少运营成本。然后，我们看了如何以正确的格式保存数据。我们还学习了如何使用Spark键/值API以及如何测试Apache
    Spark作业。之后，我们学习了如何从数据源创建图形，然后研究并尝试了边缘和顶点API。我们学习了如何计算顶点的度。最后，我们看了PageRank以及如何使用Spark
    GraphicX API进行计算。
