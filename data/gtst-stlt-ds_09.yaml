- en: '*Chapter 7*: Exploring Streamlit Components'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第七章*：探索 Streamlit 组件'
- en: Streamlit has a full-time team of developers working on new features but also
    thrives because it is open to community-driven development. Undoubtedly, there
    will be community members who want a specific feature that did not make it onto
    the roadmap of priorities. Streamlit Components allow them the flexibility to
    go out and make it themselves, and immediately use their idea in their own Streamlit
    apps.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Streamlit 拥有一支全职开发团队，致力于新功能的开发，同时也因为它对社区驱动的开发持开放态度而蓬勃发展。毫无疑问，社区成员会有一些需求，想要实现一个没有进入优先开发路线图的特性。Streamlit
    组件允许他们灵活地自己动手实现这些功能，并立即将自己的创意应用到他们的 Streamlit 应用中。
- en: Our priority in this chapter is to learn how to find and use community-made
    Streamlit Components. For that, we will run through three excellent Streamlit
    apps, one to learn how to embed code into our Streamlit apps, another for adding
    beautiful animations to them, and a third to embed easy automated **exploratory
    data analysis** (**EDA**) to Streamlit apps.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的重点是学习如何找到并使用社区制作的 Streamlit 组件。为此，我们将通过三个优秀的 Streamlit 应用进行实践，一个用于学习如何将代码嵌入到
    Streamlit 应用中，另一个用于为应用添加美丽的动画，第三个用于将简便的自动化 **探索性数据分析**（**EDA**）嵌入到 Streamlit 应用中。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下内容：
- en: 'Using Streamlit Components: `streamlit-embedcode`'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Streamlit 组件：`streamlit-embedcode`
- en: 'Using Streamlit Components: `streamlit-lottie`'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Streamlit 组件：`streamlit-lottie`
- en: 'Using Streamlit Components: `streamlit-pandas-profiling`'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Streamlit 组件：`streamlit-pandas-profiling`
- en: Finding more components
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找更多组件
- en: Let's look at the technical requirements in the next section.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一节中了解技术要求。
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'Before we can work with new Streamlit Components, we need to download them
    first. We can download each using `pip` (or any other package manager), just as
    we did with Streamlit in [*Chapter 1*](B16864_01_Final_VK_ePub.xhtml#_idTextAnchor014),
    *An* *Introduction to Streamlit*. These are the components to be downloaded:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始使用新的 Streamlit 组件之前，需要先下载它们。我们可以像在 [*第一章*](B16864_01_Final_VK_ePub.xhtml#_idTextAnchor014)《Streamlit
    简介》中一样，使用 `pip`（或任何其他包管理器）下载它们。这些是需要下载的组件：
- en: '`streamlit-embedcode`: To download this library, run the following code in
    your terminal:'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`streamlit-embedcode`：要下载此库，在终端中运行以下代码：'
- en: '[PRE0]'
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`streamlit-embedcode` makes it easy to import code blocks from other locations
    (such as a GitHub gist) and show them directly in your apps, and was created by
    Randy Zwitch, a Streamlit employee.'
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`streamlit-embedcode`使得从其他位置（比如 GitHub 的 gist）导入代码块并直接在你的应用中显示变得容易，它是由 Streamlit
    员工 Randy Zwitch 创建的。'
- en: '`streamlit-lottie`: To download this library, run the following code in your
    terminal:'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`streamlit-lottie`：要下载此库，在终端中运行以下代码：'
- en: '[PRE1]'
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`streamlit-lottie` uses the `lottie` open source library to allow us to add
    web-native animations (such as a **Graphics Interchange Format** (**GIF**) file)
    into our Streamlit apps. It is frankly a wonderful library for beautifying Streamlit
    apps and was created by Andy Fanilo, a prolific Streamlit app creator.'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`streamlit-lottie` 使用 `lottie` 开源库，允许我们将 Web 本地动画（如 **图形交换格式**（**GIF**）文件）添加到我们的
    Streamlit 应用中。坦率地说，这是一个美化 Streamlit 应用的绝妙库，由 Streamlit 应用创作者 Andy Fanilo 创建。'
- en: '`streamlit-pandas-profiling`: To download this library, run the following code
    in your terminal:'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`streamlit-pandas-profiling`：要下载此库，在终端中运行以下代码：'
- en: '[PRE2]'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The popular `pandas` Python library is the standard Python data analysis library
    and often tops the list of the most popular and useful Python libraries for data
    scientists. `pandas-profiling` creates an automatically generated EDA on top of
    any DataFrame we create and shows us everything, from descriptive statistics to
    how many duplicate rows we have. It was created by a Streamlit user who goes by
    the name of *Okld* on GitHub ([https://github.com/okld](https://github.com/okld)).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 流行的 `pandas` Python 库是标准的 Python 数据分析库，通常位居数据科学家最受欢迎和最有用的 Python 库榜单之首。`pandas-profiling`
    在我们创建的任何 DataFrame 上生成自动化的 EDA，并展示所有内容，从描述性统计到重复行的数量。它是由一位 GitHub 用户 *Okld* 创建的，GitHub
    地址为 [https://github.com/okld](https://github.com/okld)。
- en: 'Now that we have the three libraries installed, we can move on to learning
    about the first one: `streamlit-embedcode`.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了这三个库，我们可以继续学习第一个库：`streamlit-embedcode`。
- en: Using Streamlit Components – streamlit-embedcode
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Streamlit 组件 – streamlit-embedcode
- en: If we want to display code on Streamlit, we can easily just treat the code as
    text and use the familiar `st.write()`, which takes text as input, or `st.markdown()`,
    which takes markdown as input. This might work well for small snippets but will
    be a struggle to format easily, and may not look good for the average user or
    longer bits of code. As a result, `streamlit-embedcode` was created to help solve
    this problem.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想在 Streamlit 中显示代码，我们可以很容易地将代码作为文本处理，并使用熟悉的 `st.write()`，它接受文本作为输入，或者使用
    `st.markdown()`，它接受 Markdown 格式的输入。这对于小片段可能很好，但对于格式化较长的代码或普通用户来说，可能会显得比较困难且不美观。因此，创建了
    `streamlit-embedcode` 来帮助解决这个问题。
- en: 'Showing snippets of code to others is a commonly solved problem; a few solutions
    that are out there include sharing snippets with GitHub gists (which are like
    mini GitHub repositories with only one text file) with GitLab snippets (which
    are the same as gists but for GitLab) and using Pastebin, which is a shared text/code
    snippets freeway outside of GitHub/GitLab. Now, we can make a Python file with
    some example Streamlit code, put it in a GitHub gist, and call it from a new Streamlit
    app. To do so, we''ll follow these steps:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 向他人展示代码片段是一个常见的需求，现有的一些解决方案包括通过 GitHub 代码片段（它们类似于只包含一个文本文件的迷你 GitHub 仓库）或 GitLab
    代码片段（与 GitHub 代码片段类似，只是为 GitLab 提供）共享代码片段，或者使用 Pastebin，这是一个 GitHub/GitLab 以外的共享文本/代码片段平台。现在，我们可以创建一个包含示例
    Streamlit 代码的 Python 文件，将其放入 GitHub 代码片段，并从一个新的 Streamlit 应用中调用它。为此，我们将按以下步骤操作：
- en: 'For each of these options, we will start by making a quick Streamlit app that
    just exists to show users the code behind the `Palmer''s Penguins` Streamlit app.
    We can house this app in its own `component_example` folder using the following
    code from our `streamlit_apps` folder:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于这些选项，我们将首先创建一个简单的 Streamlit 应用，该应用只展示 `Palmer's Penguins` Streamlit 应用背后的代码。我们可以将此应用放入独立的
    `component_example` 文件夹中，使用以下来自 `streamlit_apps` 文件夹的代码：
- en: '[PRE3]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next, we need to navigate to [https://gist.github.com/](https://gist.github.com/)
    to create our very own gist. After we sign in to GitHub, we need to title the
    gist and then paste our code from `Palmer''s Penguins` to copy it to the following
    code block (which includes a brief explanation in the middle of it):'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要访问 [https://gist.github.com/](https://gist.github.com/) 来创建我们自己的代码片段。在我们登录
    GitHub 后，需要为代码片段命名，然后将 `Palmer's Penguins` 的代码粘贴到以下代码块中（其中包含一个简短的解释）：
- en: '[PRE4]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This first section imports our libraries, adds some text for a title, gathers
    some inputs from the user, and downloads the right dataset. Now, we would just
    like to make a scatterplot graph, and then that will conclude the code that goes
    into our gist. Again, the exact code here does not actually matter because it
    does not execute within a gist—it is instead a prettier way to send code to others.
    The following code snippet illustrates the process:'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 第一部分导入我们的库，添加一些标题文本，从用户那里获取一些输入，并下载正确的数据集。接下来，我们只需要绘制一个散点图，然后这段代码就完成了进入我们代码片段的部分。再次说明，这里的具体代码并不重要，因为它并不会在代码片段中执行——它只是将代码以更优美的方式传递给他人。以下代码片段展示了这一过程：
- en: '[PRE5]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, we should have a GitHub gist that looks like this:'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，我们应该有一个像这样的 GitHub 代码片段：
- en: '![Figure 7.1 – GitHub gist example'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 7.1 – GitHub 代码片段示例'
- en: '](img/B16864_07_1.jpg)'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16864_07_1.jpg)'
- en: Figure 7.1 – GitHub gist example
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.1 – GitHub 代码片段示例
- en: 'When we save our GitHub gist, we can link directly to it from within our Streamlit
    apps. In the `gist_example.py` Python file, we need to import the `github_gist()`
    function from our new library and use it on the GitHub gist we just created. The
    following code does this for my own gist, but you should replace the gist link
    with your own:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们保存 GitHub 代码片段时，我们可以直接在 Streamlit 应用中链接到它。在 `gist_example.py` Python 文件中，我们需要从我们新创建的库中导入
    `github_gist()` 函数，并将其应用于我们刚刚创建的 GitHub 代码片段。以下代码展示了如何对我的代码片段进行操作，但你应该用你自己的代码片段链接替换：
- en: '[PRE6]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now, if we ever need to edit the code in the gist, we can instead edit the
    underlying gist and the Streamlit apps will update automatically. When we start
    up our Streamlit apps held in `gist_example.py`, we will get the following Streamlit
    app:'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，如果我们需要编辑代码片段中的内容，我们可以直接编辑底层的代码片段，Streamlit 应用会自动更新。当我们启动保存在`gist_example.py`中的
    Streamlit 应用时，我们将看到以下的 Streamlit 应用：
- en: '![Figure 7.2 – Streamlit apps with GitHub gist'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.2 – 带 GitHub 代码片段的 Streamlit 应用'
- en: '](img/B16864_07_2.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16864_07_2.jpg)'
- en: Figure 7.2 – Streamlit apps with GitHub gist
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.2 – 带 GitHub 代码片段的 Streamlit 应用
- en: Note
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: For any public Streamlit apps, we can always simply access the source code for
    the app in the **Settings** tab. So, this method is not very useful for showing
    the code behind the Streamlit apps as this is already built-in, but is more useful
    for showing often-used code blocks such as a generic bit of code to make a **machine
    learning** (**ML**) model or a more generic **Structured Query Language** (**SQL**)
    query that users may learn from.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何公开的Streamlit应用程序，我们总是可以通过**设置**标签轻松访问该应用程序的源代码。因此，这种方法对于展示Streamlit应用程序背后的代码并不十分有用，因为这一点已经是内置的，但它对于展示常用的代码块非常有用，例如生成**机器学习**（**ML**）模型的通用代码或用户可能学习到的更通用的**结构化查询语言**（**SQL**）查询。
- en: Now, let's switch over to learning about how to add beautiful animations to
    our app using `streamlit-lottie`!
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来学习如何使用`streamlit-lottie`为我们的应用程序添加美丽的动画吧！
- en: Using Streamlit Components – streamlit-lottie
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Streamlit组件 – streamlit-lottie
- en: As we talked about at the beginning of this chapter, `lottie` is a web-native,
    open source library created by *Airbnb* to make putting animations on your website
    just as easy as putting static images on it. It is very common for large, profitable
    tech companies to put out open source software as a way of giving back to the
    developer community (or, more likely, to recruit developers who think their software
    is cool), and this is no exception. In this case, `streamlit-lottie` wraps around
    `lottie` files and places them directly into our Streamlit apps.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在本章开始时提到的，`lottie`是一个由*Airbnb*创建的原生Web开源库，旨在让在网站上添加动画变得像添加静态图像一样简单。大型且盈利的科技公司常常通过发布开源软件来回馈开发者社区（或更可能是为了吸引认为其软件很酷的开发者），这一点也不例外。在这个案例中，`streamlit-lottie`是一个包装`lottie`文件的库，将它们直接嵌入到我们的Streamlit应用程序中。
- en: To do this, we first need to import the `streamlit-lottie` library, and then
    point the `st_lottie()` function to our `lottie` file. We can either import a
    local `lottie` file or, more likely, we can find a useful animation file on the
    free site ([https://lottiefiles.com/](https://lottiefiles.com/)) and load it from
    there into our app.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们首先需要导入`streamlit-lottie`库，然后将`st_lottie()`函数指向我们的`lottie`文件。我们可以导入本地的`lottie`文件，或者更有可能的是，我们可以在免费的站点([https://lottiefiles.com/](https://lottiefiles.com/))上找到一个有用的动画文件，并将其从该站点加载到我们的应用程序中。
- en: 'To test this out, we can add a cute penguin animation ([https://lottiefiles.com/39646-cute-penguin](https://lottiefiles.com/39646-cute-penguin))
    to the top of the Penguins app we created earlier in [*Chapter 4*](B16864_04_Final_VK_ePub.xhtml#_idTextAnchor049),
    *Using Machine Learning with Streamlit*. In our new `components_example` folder,
    we can add a new `penguin_animated.py` file using the following code:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进行测试，我们可以在我们之前创建的[《第4章》](B16864_04_Final_VK_ePub.xhtml#_idTextAnchor049) *使用Streamlit进行机器学习*的企鹅应用程序顶部，添加一个可爱的企鹅动画（[https://lottiefiles.com/39646-cute-penguin](https://lottiefiles.com/39646-cute-penguin)）。在我们新的`components_example`文件夹中，我们可以添加一个新的`penguin_animated.py`文件，代码如下：
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then, in this new file, we can make this new app. The following code block
    makes a function, as shown in the example from the `streamlit-lottie` library
    ([https://github.com/andfanilo/streamlit-lottie](https://github.com/andfanilo/streamlit-lottie)),
    that allows us to load `lottie` files from the URL and then loads this animation
    at the top of the application:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在这个新文件中，我们可以创建这个新应用程序。以下代码块创建了一个函数，如`streamlit-lottie`库中的示例所示（[https://github.com/andfanilo/streamlit-lottie](https://github.com/andfanilo/streamlit-lottie)），它允许我们从URL加载`lottie`文件，并将该动画加载到应用程序顶部：
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The previous section of code uses the `requests` library to define a function
    that we can use to load `lottie` files from a link. In this case, I have pre-filled
    a link that takes us to a cute penguin animation. We can then load our file using
    our new function, and call that file using the `st_lottie()` function we imported
    from our `streamlit-lottie` library. Next, we can finish out the app with our
    previously defined user inputs and scatterplot. The code is illustrated in the
    following snippet:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 上一段代码使用了`requests`库来定义一个我们可以用来从链接加载`lottie`文件的函数。在这个例子中，我已经预先填写了一个链接，指向一个可爱的企鹅动画。然后，我们可以使用我们的新函数加载文件，并通过我们从`streamlit-lottie`库中导入的`st_lottie()`函数调用该文件。接下来，我们可以用之前定义的用户输入和散点图完成应用程序。代码如下所示：
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This code block will create the following app, which is simply our *Palmer''s
    Penguins* app with the cute penguin animation on top (the app has been cropped
    for brevity):'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将创建如下应用程序，它只是我们带有可爱企鹅动画的*Palmer's Penguins*应用程序（应用程序已被裁剪以简洁显示）：
- en: '![Figure 7.3 – Adorable penguin animation'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.3 – 可爱的企鹅动画](image_placeholder)'
- en: '](img/B16864_07_3.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16864_07_3.jpg)'
- en: Figure 7.3 – Adorable penguin animation
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.3 – 可爱的企鹅动画
- en: '`streamlit-lottie` also allows us to change the animation speed, width, and
    height through the `speed`, `width`, and `height` parameters respectively. If
    the animation goes too slowly for your taste, increase the speed to a number such
    as `1.5` or `2`, which will increase the speed by 50% or 100%. The `height` and
    `width` parameters, however, are the pixel height/width of the animation and default
    to the native size of the animation (the penguin animation is ~700 pixels by ~400
    pixels, for example). In the following code block, we change the speed, width,
    and height of our animation:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`streamlit-lottie` 还允许我们通过 `speed`、`width` 和 `height` 参数分别改变动画的速度、宽度和高度。如果你觉得动画播放得太慢，可以将速度增加到如
    `1.5` 或 `2`，这样可以将速度提高 50% 或 100%。但是，`height` 和 `width` 参数是动画的像素高度/宽度，默认值是动画的原始尺寸（例如，企鹅动画的大小大约是
    ~700 像素 x ~400 像素）。在下面的代码块中，我们将改变动画的速度、宽度和高度：'
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The following code block is the same as for the other app but instead, we have
    changed the speed, width, and height of our animation to `1.5`, `800`, and `400`.
    It takes a while to get used to how these inputs interact, as animations can have
    different sizes and speeds! You can see the different settings being applied here:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码块与其他应用相同，只不过我们已经将动画的速度、宽度和高度分别更改为 `1.5`、`800` 和 `400`。需要一些时间才能适应这些输入如何交互，因为动画可能有不同的大小和速度！你可以在这里看到应用的不同设置：
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'When we make the penguin animation much larger by increasing the width and
    height in comparison to the previous version, we see the impact on the animation
    size, as illustrated in the following screenshot. When you run this yourself,
    you will also notice the animation speed increase as well. I would strongly encourage
    running this app, as the penguin animation is really quite adorable:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们通过增加宽度和高度使企鹅动画变得比之前的版本大得多时，可以看到动画大小的变化，正如下面的截图所示。当你自己运行时，你还会注意到动画速度也有所增加。我强烈建议你运行这个应用，因为企鹅动画真的非常可爱：
- en: '![Figure 7.4 – Final penguin animation app'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.4 – 最终版企鹅动画应用'
- en: '](img/B16864_07_4.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16864_07_4.jpg)'
- en: Figure 7.4 – Final penguin animation app
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.4 – 最终版企鹅动画应用
- en: And that completes our tour of `streamlit-lottie`! I have started getting into
    the habit of putting a nice animation at the top of each and every Streamlit apps
    I create—it creates a sense of design that makes Streamlit apps feel more purposeful,
    and immediately alerts the user to the fact that this is not a static document
    but instead a dynamic and interactive application. Now, let's move on to `pandas-profiling`!
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这就完成了我们对 `streamlit-lottie` 的介绍！我已经养成了在我创建的每个 Streamlit 应用的顶部放置一个漂亮的动画的习惯——这营造了一种设计感，让
    Streamlit 应用显得更有目的性，并立即提醒用户，这不是一个静态文档，而是一个动态互动的应用程序。接下来，让我们进入 `pandas-profiling`！
- en: Using Streamlit Components – streamlit-pandas-profiling
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Streamlit 组件 – streamlit-pandas-profiling
- en: '`pandas-profiling` is a very powerful Python library that automates some of
    the EDA that is often the first step in any data analysis, modeling, or even data
    engineering task. Before a data scientist begins almost any data work, they want
    to start with a good understanding of the distributions of their underlying data,
    the number of missing rows, correlations between variables, and many other basic
    pieces of information. As we mentioned before, this library automates the process
    and then places this interactive analytics document into a Streamlit app for the
    user.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`pandas-profiling` 是一个非常强大的 Python 库，它自动化了一些探索性数据分析（EDA）工作，这通常是任何数据分析、建模甚至数据工程任务的第一步。在数据科学家开始几乎所有的数据工作之前，他们希望先了解底层数据的分布、缺失行的数量、变量之间的相关性以及许多其他基本信息。正如我们之前提到的，这个库自动化了这一过程，并将这个交互式分析文档嵌入到
    Streamlit 应用中供用户使用。'
- en: Behind the Streamlit component called `pandas-profiling`, there is a full Python
    library with the same name that the component imports its functions from. The
    Streamlit component here actually renders the output from the `pandas-profiling`
    Python library in a way that becomes very easy to integrate. For this segment,
    we will first learn how to implement the library, and then explore the generated
    output.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在名为 `pandas-profiling` 的 Streamlit 组件背后，有一个同名的完整 Python 库，该组件从中导入它的功能。这里的 Streamlit
    组件实际上是以非常易于集成的方式呈现 `pandas-profiling` Python 库的输出。对于这一部分，我们将首先学习如何实现该库，然后探索生成的输出。
- en: 'For our example, we will actually continue with our code from the previous
    section on Palmer''s Penguins and add our automatically generated profile to the
    bottom of the app. The code for this is only a few lines—we need to generate a
    report for our dataset and then use the Streamlit component to add it to our app.
    The next code block imports the necessary libraries, and then creates and adds
    to our app a profile based on the `penguins_df` variable we have defined:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们将继续使用上一节关于帕尔默企鹅的数据代码，并将自动生成的个人资料添加到应用程序的底部。该代码只有几行——我们需要为数据集生成报告，然后使用
    Streamlit 组件将其添加到应用程序中。接下来的代码块导入了必要的库，然后基于我们定义的`penguins_df`变量创建并将个人资料添加到应用程序中：
- en: '[PRE12]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This section uses the same `streamlit-lottie` library but also loads the `pandas_profiling`
    and `streamlit-pandas-profiling` library for our use. This is a good lesson—we
    can treat Streamlit Components as unique Lego blocks, combining them at will to
    create new and interesting Streamlit applications. The following section reads
    in our DataFrame and adds a pandas profile to our dataset! Here''s the code:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 本节使用了相同的`streamlit-lottie`库，同时加载了`pandas_profiling`和`streamlit-pandas-profiling`库以供使用。这是一个很好的经验——我们可以将
    Streamlit 组件视为独特的乐高积木，随意组合它们来创建新的有趣的 Streamlit 应用程序。接下来的部分读取我们的 DataFrame，并将 pandas
    个人资料添加到数据集中！以下是代码：
- en: '[PRE13]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The resulting app contains this profile, which starts with an overview that
    contains information on the number of variables, any warnings about the dataset
    (for example, we are warned that some rows are missing gender information for
    our penguin dataset), and other base information. The following screenshot shows
    the top section of the profile:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的应用程序包含这个个人资料，开始时是一个概述，包含有关变量数量、数据集的任何警告（例如，我们被警告说企鹅数据集的某些行缺失了性别信息）以及其他基本信息。以下截图显示了个人资料的顶部部分：
- en: '![Figure 7.5 – pandas profile'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.5 – pandas 个人资料'
- en: '](img/B16864_07_5.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16864_07_5.jpg)'
- en: Figure 7.5 – pandas profile
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.5 – pandas 个人资料
- en: 'I would strongly encourage you to try out this component yourself and see the
    massive amount of information generated from these couple of lines of code. It
    includes histograms and basic statistics about each variable, sample rows from
    the beginning and end of the dataset, and even a correlation matrix with an explanation
    of a few different correlation variables. The following screenshot shows the correlation
    section output for our penguin dataset—we can immediately see that body mass is
    positively correlated with the flipper length of our penguins:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我强烈建议你亲自尝试这个组件，看看这几行代码所生成的大量信息。它包括每个变量的直方图和基本统计信息，数据集开始和结束的样本行，甚至是一个相关矩阵，解释了几种不同的相关变量。以下截图显示了我们企鹅数据集的相关性部分输出——我们可以立即看到，身体质量与企鹅的鳍足长度呈正相关：
- en: '![Figure 7.6 – Pearson''s correlation coefficient'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.6 – Pearson 相关系数'
- en: '](img/B16864_07_6.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16864_07_6.jpg)'
- en: Figure 7.6 – Pearson's correlation coefficient
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.6 – Pearson 相关系数
- en: Note
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Try this out yourself to see the full spectrum of colors.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 自己尝试一下，看看完整的色谱效果。
- en: Hopefully, you now have a solid understanding of how to use this component to
    add EDA, which should help if you are inviting users to bring their own dataset,
    as in the penguin example.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你现在已经对如何使用这个组件添加探索性数据分析（EDA）有了清晰的理解，这对于邀请用户提供他们自己的数据集（例如在企鹅示例中）应该会有所帮助。
- en: Finding more components
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 寻找更多组件
- en: These three components are a tiny percentage of all the components the community
    has created, and by the time you may be reading this, I am sure the number of
    components out there will be dramatically higher. The best place to find new and
    interesting components is on either the Streamlit website at [https://streamlit.io/gallery?type=components&category=featured](https://streamlit.io/gallery?type=components&category=featured)
    or the discussion forums at [https://discuss.streamlit.io/tag/custom-components](https://discuss.streamlit.io/tag/custom-components).
    When you find a component that you think is interesting, try it out by downloading
    it with `pip` as we did earlier, and read enough documentation to get started!
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这三个组件仅仅是社区创建的所有组件的一个小部分，到你阅读这篇文章时，我相信这些组件的数量会大大增加。寻找新的有趣组件的最佳地方是 Streamlit 网站的[https://streamlit.io/gallery?type=components&category=featured](https://streamlit.io/gallery?type=components&category=featured)
    或讨论论坛[https://discuss.streamlit.io/tag/custom-components](https://discuss.streamlit.io/tag/custom-components)。当你找到一个你认为有趣的组件时，就像我们之前做的那样，使用`pip`下载它并阅读足够的文档来开始使用！
- en: Summary
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: At this point, I hope you feel very comfortable downloading and using Streamlit
    Components, which you have learned about here, as well as comfortable with finding
    new Streamlit components created by the community. You should also understand
    how to add GitHub gist examples, Lottie animations, and automatic `pandas-profiling`
    features to the apps you build.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，我希望你已经非常熟悉如何下载和使用Streamlit组件，并且能够轻松找到社区创建的新的Streamlit组件。你还应该了解如何将GitHub
    gist示例、Lottie动画和自动化的`pandas-profiling`功能添加到你构建的应用中。
- en: In the next chapter, we will dive more deeply into deploying your own Streamlit
    apps with a cloud provider such as **Amazon Web Services** (**AWS**).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将深入探讨如何通过云服务提供商，如**亚马逊网络服务**（**AWS**），部署您自己的Streamlit应用。
