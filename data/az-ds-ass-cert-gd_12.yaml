- en: '*Chapter 9*: Optimizing the ML Model'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第9章*：优化机器学习模型'
- en: In this chapter, you will learn about two techniques you can use to discover
    the optimal model for your dataset. You will start by exploring the **HyperDrive**
    package of the AzureML SDK. This package allows you to fine-tune the model's performance
    by tweaking the parameters it exposes, a process also known as **hyperparameter
    tuning**. You will then explore the **Automated ML** (**AutoML**) package of the
    AzureML SDK, which allows you to automate the model selection, training, and optimization
    process through code.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习两种可以帮助你发现数据集最佳模型的技术。你将首先探索**HyperDrive**包，这是AzureML SDK的一部分。这个包允许你通过调整其暴露的参数来优化模型的性能，这个过程也被称为**超参数调优**。接下来，你将探索**自动化机器学习**（**AutoML**）包，这是AzureML
    SDK的一部分，它允许你通过代码自动化模型选择、训练和优化过程。
- en: 'In this chapter, we are going to cover the following main topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要内容：
- en: Hyperparameter tuning using HyperDrive
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用HyperDrive进行超参数调优
- en: Running AutoML experiments with code
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用代码运行AutoML实验
- en: Technical requirements
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You will need to have access to an Azure subscription. Within that subscription,
    you will need a `packt-azureml-rg`. You will need to have either a `Contributor`
    or `Owner` `packt-learning-mlw`, as described in [*Chapter 2*](B16777_02_Final_VK_ePub.xhtml#_idTextAnchor026),
    *Deploying Azure Machine Learning Workspace Resources*.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要有Azure订阅权限。在该订阅中，你需要有一个名为`packt-azureml-rg`的资源组。你还需要拥有`Contributor`或`Owner`权限的`packt-learning-mlw`，如[*第2章*](B16777_02_Final_VK_ePub.xhtml#_idTextAnchor026)《部署Azure机器学习工作区资源》中所述。
- en: You will also need to have a basic understanding of the **Python** language.
    The code snippets target Python version 3.6 or newer. You should also be familiar
    with working in the notebook experience within AzureML Studio, something that
    was covered in [*Chapter 8*](B16777_08_Final_VK_ePub.xhtml#_idTextAnchor117),
    *Experimenting with Python Code*.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要对**Python**语言有基本的了解。本章中的代码片段适用于Python 3.6或更高版本。你还应当熟悉在AzureML Studio中的Notebook体验，这在[*第8章*](B16777_08_Final_VK_ePub.xhtml#_idTextAnchor117)《使用Python代码实验》中有讲解。
- en: This chapter assumes you have registered the **scikit-learn** diabetes dataset
    in your AzureML workspace and that you have created a compute cluster named **cpu-sm-cluster**,
    as described in the sections *Defining datastores*, *Working with datasets*, and
    *Working with compute targets* in [*Chapter 7*](B16777_07_Final_VK_ePub.xhtml#_idTextAnchor102),
    *The AzureML Python SDK*.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章假设你已经在AzureML工作区中注册了**scikit-learn**糖尿病数据集，并且已经创建了一个名为**cpu-sm-cluster**的计算集群，具体内容请参见[*第7章*](B16777_07_Final_VK_ePub.xhtml#_idTextAnchor102)《AzureML
    Python SDK》中的*定义数据存储*、*处理数据集*和*处理计算目标*部分。
- en: You can find all notebooks and code snippets of this chapter in GitHub at the
    URL [http://bit.ly/dp100-ch09](http://bit.ly/dp100-ch09).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在GitHub的[http://bit.ly/dp100-ch09](http://bit.ly/dp100-ch09)网址找到本章的所有笔记本和代码片段。
- en: Hyperparameter tuning using HyperDrive
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 超参数调优使用HyperDrive
- en: In [*Chapter 8*](B16777_08_Final_VK_ePub.xhtml#_idTextAnchor117), *Experimenting
    with Python Code*, you trained a `LassoLars` model that was accepting the `alpha`
    parameter. In order to avoid overfitting to the training dataset, the `LassoLars`
    model uses a technique called `alpha` parameter specifies how important this penalty
    term is, something that directly impacts the training outcome. Parameters that
    affect the training process are referred to as being `DecisionTreeClassifier`
    class located in the `scikit-learn` library, you can define the maximum depth
    of the tree through the `max_depth`, which is an integer. In the same model, you
    can control the maximum amount of leaf nodes by specifying a numeric value to
    the `max_leaf_nodes` **hyperparameter**.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第8章*](B16777_08_Final_VK_ePub.xhtml#_idTextAnchor117)《使用Python代码实验》中，你训练了一个`LassoLars`模型，该模型接受`alpha`参数。为了避免过拟合训练数据集，`LassoLars`模型使用了一种技术，`alpha`参数指定了惩罚项的重要性，这直接影响训练结果。影响训练过程的参数被称为`DecisionTreeClassifier`类，该类位于`scikit-learn`库中。你可以通过`max_depth`来定义树的最大深度，`max_depth`是一个整数。在同一个模型中，你还可以通过为`max_leaf_nodes`**超参数**指定一个数值来控制叶节点的最大数量。
- en: 'These hyperparameters control the size of the decision tree, as depicted in
    *Figure 9.1*:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这些超参数控制决策树的大小，如*图9.1*所示：
- en: '![Figure 9.1 – Decision tree hyperparameters'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.1 – 决策树超参数]'
- en: '](img/B16777_09_001.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16777_09_001.jpg)'
- en: Figure 9.1 – Decision tree hyperparameters
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.1 – 决策树超参数
- en: '**Hyperparameter tuning** is the process of finding the optimal values for
    the **hyperparameters** that produce the best-performing model against the data
    you are using for training. To be able to evaluate the performance of each **hyperparameter**
    combination, the model must be trained, and the performance metric must be evaluated.
    In the case of the diabetes model in [*Chapter 8*](B16777_08_Final_VK_ePub.xhtml#_idTextAnchor117),
    *Experimenting with Python Code*, you were evaluating the models using the **Normalized
    Root Mean Squared Error** (**NRMSE**) metric.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**超参数调整**是找到产生最佳性能模型的**超参数**的最佳值的过程，用于对训练数据进行评估。要评估每个**超参数**组合的性能，必须训练模型并评估性能度量。在糖尿病模型的情况下，在[*第8章*](B16777_08_Final_VK_ePub.xhtml#_idTextAnchor117)中，*使用Python代码进行实验*，您使用**标准化根均方误差**（**NRMSE**）度量评估模型。'
- en: 'The AzureML SDK offers the `HyperDriveConfig` class , which allows you to perform
    `HyperDriveConfig` is a wrapper to the `ScriptRunConfig` class you used in [*Chapter
    8*](B16777_08_Final_VK_ePub.xhtml#_idTextAnchor117), *Experimenting with Python
    Code*. This means that you need to pass in the `run_config` parameter the `ScriptRunConfig`
    that you want to use to train your model. You also need to specify the metric
    that your code is logging and what your goal is for that metric. In the diabetes
    case, you are trying to minimize the `submit` method you saw in [*Chapter 8*](B16777_08_Final_VK_ePub.xhtml#_idTextAnchor117),
    *Experimenting with Python Code*. The pseudo-code that shows the end-to-end process,
    where the `script` variable refers to the `ScriptRunConfig` object that defines
    which training script you are going to use, is the following:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: AzureML SDK提供了`HyperDriveConfig`类，允许您执行`HyperDriveConfig`是您在[*第8章*](B16777_08_Final_VK_ePub.xhtml#_idTextAnchor117)中使用的`ScriptRunConfig`类的包装器，*使用Python代码进行实验*。这意味着您需要在`run_config`参数中传递您要用于训练模型的`ScriptRunConfig`。您还需要指定代码正在记录的度量标准以及该度量标准的目标。在糖尿病案例中，您试图最小化在[*第8章*](B16777_08_Final_VK_ePub.xhtml#_idTextAnchor117)中看到的`submit`方法，*使用Python代码进行实验*。显示端到端过程的伪代码，其中`script`变量是定义要使用的训练脚本的`ScriptRunConfig`对象，如下所示：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Besides `ScriptRunConfig`, you will need to pass the `HyperDriveConfig` will
    use. **Hyperparameters** can accept either discrete or continuous values:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`ScriptRunConfig`，您还需要传递`HyperDriveConfig`将使用。**超参数**可以接受离散或连续值：
- en: A typical example of discrete values is integers or string values. For example,
    in the `activation` `selu` for the `relu` for the **Rectified Linear Unit** (**ReLU**).
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 典型的离散值示例是整数或字符串值。例如，在`activation`中，`selu`用于`relu`的**修正线性单元**（**ReLU**）。
- en: A typical example of continuous values is float values. The `alpha` parameter
    in the `LassoLars` model you have been training is a **hyperparameter** that accepts
    float values.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 典型的连续值示例是浮点数值。您一直在训练的`LassoLars`模型中的`alpha`参数是接受浮点值的**超参数**。
- en: When you are exploring the possible `azureml.train.hyperdrive.parameter_expressions`
    module.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当您探索可能的`azureml.train.hyperdrive.parameter_expressions`模块时。
- en: 'In the case of discrete `choice` function, which allows you to specify the
    list of options the `activation` **hyperparameter** you saw previously with the
    following script:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在离散`choice`函数的情况下，您可以使用以下脚本指定`activation` **超参数**的选项列表，这是您之前看到的典型示例：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This script will try both the `selu` and `relu` activation functions while looking
    for the optimal model.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本将尝试使用`selu`和`relu`激活函数来寻找最佳模型。
- en: Important note
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: If you are interested in working with neural networks, you will probably need
    to understand these activation functions better. There are great books that can
    help you get started in neural network design. For the DP-100 exam, you will not
    need this knowledge.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对神经网络工作感兴趣，可能需要更好地理解这些激活函数。有一些很棒的书籍可以帮助您开始神经网络设计。对于DP-100考试，您不需要这些知识。
- en: 'Note that even in the case of the continuous `alpha` `LassoLars` model, you
    can still use the `choice` method to define discrete values to explore. For example,
    the following use of `choice` is the equivalent of what you did back in the *Tracking
    model evolution* section of [*Chapter 8*](B16777_08_Final_VK_ePub.xhtml#_idTextAnchor117),
    *Experimenting with Python Code*:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，即使在连续的`alpha` `LassoLars`模型的情况下，您仍然可以使用`choice`方法来定义要探索的离散值。例如，以下`choice`的使用等同于您在[*第8章*](B16777_08_Final_VK_ePub.xhtml#_idTextAnchor117)中*跟踪模型演变*部分所做的：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You can also define the probability distribution for the samples that you will
    be getting while you are exploring the search space. For example, if you want
    to provide an equal chance to all values, you will use a uniform distribution.
    On the other hand, you can use a normal distribution to focus the search area
    on the center of the search space. The AzureML SDK offers a couple of methods
    you can use, such as `uniform(low, high)`, `loguniform(low, high)`, `normal(μ,σ)`,
    and `lognormal(μ, σ)`. You can use the `q` prefixed equivalents for discrete values,
    such as `quniform(low, high, q)`, `qloguniform(low, high, q)`, `qnormal(μ, σ,
    q)`, and `qlognormal(μ, σ``, q)`, where the `q` parameter is the quantization
    factor that converts continuous values into discrete ones.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以定义在探索搜索空间时将获得的样本的概率分布。例如，如果您想为所有值提供相等的机会，您将使用均匀分布。另一方面，您可以使用正态分布将搜索区域集中在搜索空间的中心。AzureML
    SDK提供了一些方法，您可以使用它们，如`uniform(low, high)`、`loguniform(low, high)`、`normal(μ, σ)`和`lognormal(μ,
    σ)`。对于离散值，您可以使用以`q`为前缀的等效方法，如`quniform(low, high, q)`、`qloguniform(low, high,
    q)`、`qnormal(μ, σ, q)`和`qlognormal(μ, σ, q)`，其中`q`参数是量化因子，用于将连续值转换为离散值。
- en: 'On the GitHub page of this book, you can find the code that plots 1,000 samples
    being generated with the distributions of these functions. The results can be
    seen in *Figure 9.2*:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的GitHub页面上，您可以找到用于绘制生成1,000个样本并使用这些函数分布的代码。结果可以在*图 9.2*中看到：
- en: '![Figure 9.2 – Advanced discrete and continuous hyperparameter value distributions.
    Sample values are ordered. The x axis shows the ordered value''s index number'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.2 – 高级离散和连续超参数值分布。样本值已排序。x轴显示排序值的索引号](img/B16777_09_002.jpg)'
- en: '](img/B16777_09_002.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16777_09_002.jpg)'
- en: Figure 9.2 – Advanced discrete and continuous hyperparameter value distributions.
    Sample values are ordered. The x axis shows the ordered value's index number
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.2 – 高级离散和连续超参数值分布。样本值已排序。x轴显示排序值的索引号
- en: Important note
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: In *Figure 9.2*, in the `loguniform` and `lognormal` plots, the line of the
    discrete function with quantization factor 1 overlaps with the one from the continuous
    function. Therefore, you can only see two lines.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图 9.2*中，在`loguniform`和`lognormal`的图表中，量化因子为1的离散函数的线与连续函数的线重合。因此，您只能看到两条线。
- en: 'Once you have defined the search space, you need to specify the sampling strategy
    that you will use to select each `azureml.train.hyperdrive` module:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 定义了搜索空间之后，您需要指定将用于选择每个`azureml.train.hyperdrive`模块的采样策略：
- en: '`choice` method you saw above. The Azure ML SDK will search all possible **hyperparameter**
    combinations of those discrete values. Imagine that you wanted to explore the
    following four parameter combinations:'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您在上面看到的`choice`方法。Azure ML SDK将搜索这些离散值的所有可能**超参数**组合。假设您希望探索以下四种参数组合：
- en: a=0.01 and b=10
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: a=0.01，b=10
- en: a=0.01 and b=100
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: a=0.01，b=100
- en: a=0.5 and b=10
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: a=0.5，b=10
- en: a=0.5 and b=100
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: a=0.5，b=100
- en: 'The following code snippet defines the search space for these four combinations:'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下代码片段定义了这四种组合的搜索空间：
- en: '[PRE3]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`RandomParameterSampling` class. It allows you to randomly select **hyperparameter**
    values from the available options. It supports both discrete and continuous **hyperparameters**.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RandomParameterSampling`类。它允许您从可用选项中随机选择**超参数**值。它支持离散和连续的**超参数**。'
- en: '`max_total_runs` you will read about next. It supports both discrete and continuous
    **hyperparameters**.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`max_total_runs`您将会在后面了解。它支持离散和连续的**超参数**。'
- en: 'Let''s put everything you have learned so far into action:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们把到目前为止学到的所有知识付诸实践：
- en: Navigate to the **Author** | **Notebooks** section of your AzureML Studio web
    interface.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到AzureML Studio网页界面的**作者**|**笔记本**部分。
- en: Create a folder named `chapter09`.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`chapter09`的文件夹。
- en: You will need to create a `diabetes-training` folder in the `training.py` script.
    The script is the same as the one used in [*Chapter 8*](B16777_08_Final_VK_ePub.xhtml#_idTextAnchor117),
    *Experimenting with Python Code*, in the section *Moving the code to a Python
    script file*. You can copy the contents from there. The final **Files** tree is
    depicted in *Figure 9.3*.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要在`training.py`脚本中创建一个名为`diabetes-training`的文件夹。该脚本与[*第8章*](B16777_08_Final_VK_ePub.xhtml#_idTextAnchor117)中《使用
    Python 代码实验》一节中*将代码移至 Python 脚本文件*部分使用的脚本相同。您可以从那里复制内容。最终的**文件**结构图见*图 9.3*。
- en: Create a notebook named **chapter09.ipynb** within the **chapter09** folder.
    *Figure 9.3* shows what the final **Files** tree will look like:![Figure 9.3 –
    The Files tree structure that contains the code and the chapter09 notebook
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **chapter09** 文件夹中创建一个名为 **chapter09.ipynb** 的笔记本。*图 9.3* 显示了最终 **文件** 树的结构：![图
    9.3 – 包含代码和 chapter09 笔记本的文件树结构
- en: '](img/B16777_09_003.jpg)'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16777_09_003.jpg)'
- en: Figure 9.3 – The Files tree structure that contains the code and the chapter09
    notebook
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 9.3 – 包含代码和 chapter09 笔记本的文件树结构
- en: 'Add the following initialization code in the first cell:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第一个单元格中添加以下初始化代码：
- en: '[PRE4]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This is a code similar to the one you used in [*Chapter 8*](B16777_08_Final_VK_ePub.xhtml#_idTextAnchor117),
    *Experimenting with Python Code*. The only difference is that you are using the
    `create` method instead of adding the packages one by one.
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这段代码与你在[《第 8 章》](B16777_08_Final_VK_ePub.xhtml#_idTextAnchor117) *使用 Python
    代码进行实验* 部分中使用的代码类似。唯一的区别是你使用了 `create` 方法，而不是逐个添加包。
- en: 'In a new cell, define the `ScriptRunConfig` object that will execute the `training.py`
    script:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新单元格中，定义将执行 `training.py` 脚本的 `ScriptRunConfig` 对象：
- en: '[PRE5]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This `ScriptRunConfig` object is almost identical to the one you created in
    the *Training the diabetes model on a compute cluster* section of [*Chapter 8*](B16777_08_Final_VK_ePub.xhtml#_idTextAnchor117),
    *Experimenting with Python Code*. The only difference is that you do not pass
    the `arguments` parameter. In particular, you don't specify the `--alpha` argument.
    This argument will automatically be appended by the `HyperDriveConfig` object
    you will configure in the next step.
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个 `ScriptRunConfig` 对象与你在[《第 8 章》](B16777_08_Final_VK_ePub.xhtml#_idTextAnchor117)
    *使用 Python 代码进行实验* 部分中创建的几乎相同。唯一的区别是你没有传递 `arguments` 参数，特别是你没有指定 `--alpha` 参数。这个参数将由你在下一步配置的
    `HyperDriveConfig` 对象自动附加。
- en: 'Add and execute the following code in a new cell:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个新单元格中添加并执行以下代码：
- en: '[PRE6]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In this code, you define a `RandomParameterSampling` approach to explore uniformly
    distributed values, ranging from 0.00001 to 0.1, for the `alpha` argument that
    will be passed to the training script you created in *step 3*. This training script
    accepts the `--alpha` argument, which is then passed to the `alpha` `LassoLars`
    model.
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这段代码中，你定义了一个 `RandomParameterSampling` 方法，用来探索均匀分布的值，范围从 0.00001 到 0.1，用于传递给你在
    *第 3 步* 中创建的训练脚本的 `alpha` 参数。这个训练脚本接受 `--alpha` 参数，随后该参数传递给 `alpha` `LassoLars`
    模型。
- en: You assign this `RandomParameterSampling` configuration to the `hyperparameter_sampling`
    argument of `HyperDriveConfig`.
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将此 `RandomParameterSampling` 配置分配给 `HyperDriveConfig` 的 `hyperparameter_sampling`
    参数。
- en: You have also configured the `run_config` property of `HyperDriveConfig` to
    use the `ScriptRunConfig` object you defined in *step 6*. Note that the `RandomParameterSampling`
    class will be passing the `alpha` parameter needed by the script.
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你还已配置 `HyperDriveConfig` 的 `run_config` 属性，以使用你在*第 6 步*中定义的 `ScriptRunConfig`
    对象。注意，`RandomParameterSampling` 类将传递脚本所需的 `alpha` 参数。
- en: You then define that the produced models will be evaluated using the `primary_metric_name`
    parameter). You also specify that you are trying to minimize that value (the `primary_metric_goal`
    parameter), since it's the error you want to minimize.
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后，定义使用 `primary_metric_name` 参数评估生成的模型。你还指定了要最小化该值（`primary_metric_goal` 参数），因为它是你希望最小化的误差。
- en: The last two parameters, `max_total_runs` and `max_concurrent_runs`, control
    the resources you are willing to invest in finding the best model. The `max_total_runs`
    parameter controls the maximum number of experiments to run. This can be between
    1 and 1,000 runs. This is a required parameter. `max_concurrent_runs` is an optional
    parameter and controls the maximum concurrency of the conducted runs. In this
    case, you defined *4*, which means that only four nodes will be provisioned in
    the `ScriptRunConfig`. This means that the cluster will still have one unprovisioned
    node, since the maximum number of nodes it can scale up to is five, as you defined
    in the section *Working with compute targets* of [*Chapter 7*](B16777_07_Final_VK_ePub.xhtml#_idTextAnchor102),
    *The AzureML Python SDK*. There is one more optional parameter you can use to
    limit the amount of time you are searching for the optimal `max_duration_minutes`
    parameter, which you did not specify in the sample above, defines the maximum
    duration in minutes to run the **hyperparameter tuning** process. After that timeout,
    all subsequent scheduled runs are automatically canceled.
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最后的两个参数，`max_total_runs` 和 `max_concurrent_runs`，控制你愿意投入到寻找最佳模型的资源。`max_total_runs`
    参数控制实验的最大运行次数，可以在 1 到 1,000 次之间。这是一个必填参数。`max_concurrent_runs` 是一个可选参数，控制并发运行的最大次数。在这种情况下，你定义了
    *4*，这意味着在 `ScriptRunConfig` 中将仅配置四个节点。这意味着集群仍然会有一个未配置的节点，因为它能扩展到的最大节点数是五个，正如你在[*第七章*](B16777_07_Final_VK_ePub.xhtml#_idTextAnchor102)
    *与计算目标的工作*部分中定义的那样，*AzureML Python SDK*。还有一个可选参数可以用来限制搜索最佳模型的时间，`max_duration_minutes`
    参数，你在上面的示例中没有指定，它定义了执行 **超参数调优** 过程的最大时长（分钟）。超过该时长后，所有后续调度的运行将自动取消。
- en: 'In a new cell, add the following code:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个新单元格中，添加以下代码：
- en: '[PRE7]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In this code, you submit `HyperDriveConfig` to execute under the `hyperdrive_run`
    variable is an instance of `HyperDriveRun`, which inherits from the normal `Run`
    class.
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此代码中，你提交 `HyperDriveConfig` 以在 `hyperdrive_run` 变量下执行，该变量是 `HyperDriveRun`
    的实例，继承自正常的 `Run` 类。
- en: You can review the results of the process in the Studio web UI. Navigate to
    the `alpha` hyperparameter. You can visually explore the effect the various values
    of the `alpha` parameter have regarding the `alpha` value of `HyperDriveRun` (**Run
    1**).
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以在 Studio Web UI 中查看该过程的结果。导航到 `alpha` 超参数。你可以通过视觉化探索 `alpha` 参数的不同值对 `HyperDriveRun`
    (**Run 1**) 的 `alpha` 值的影响。
- en: Important note
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重要提示
- en: Run numbers may be different in your executions. Every time you execute the
    cells, a new run number is created, continuing from the previous number. So, if
    you execute code that performs one hyperdrive run with 20 child runs, the last
    child run will be run 21\. The next time you execute the same code, the hyperdrive
    run will start from run 22, and the last child will be run 42\. The run numbers
    referred to in this section are the ones shown in the various figures, and it
    is normal to observe differences, especially if you had to rerun a couple of cells.
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在你的执行中，运行编号可能不同。每次你执行单元格时，都会创建一个新的运行编号，接着上一个编号。因此，如果你执行一个包含 20 个子运行的超参数调优运行，那么最后一个子运行将是第
    21 号运行。下次执行相同代码时，超参数调优运行将从第 22 号开始，最后一个子运行将是第 42 号。此节中提到的运行编号是各个图示中显示的编号，观察到差异是正常的，尤其是在你需要重新运行某些单元格时。
- en: Navigate to the **Outputs + logs** tab of the completed **Run 1** run. You will
    notice that there is a single file under the **azureml-logs** folder named **hyperdrive.txt**,
    as shown in *Figure 9.5*:![Figure 9.5 – Log file in HyperDriveRun, picking up
    the first four jobs from
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到已完成的 **Run 1** 运行的 **输出 + 日志** 标签。你会注意到，在 **azureml-logs** 文件夹下有一个名为 **hyperdrive.txt**
    的文件，如 *图 9.5* 所示：![图 9.5 – HyperDriveRun 中的日志文件，选取将并行执行的超参数空间中的前四个作业
- en: the hyperparameter space that will be executed in parallel
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将并行执行的超参数空间
- en: '](img/B16777_09_005.jpg)'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16777_09_005.jpg)'
- en: Figure 9.5 – Log file in HyperDriveRun, picking up the first four jobs from
    the hyperparameter space that will be executed in parallel
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 9.5 – HyperDriveRun 中的日志文件，选取将并行执行的超参数空间中的前四个作业
- en: This file contains all the jobs that were scheduled to complete the hyperparameter
    tuning process. The actual run logs and the stored model are stored within the
    child runs. If you need to debug a code issue, you will have to open one of them
    to see the script errors.
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该文件包含所有为完成超参数调优过程而计划的作业。实际的运行日志和存储的模型都保存在子运行中。如果你需要调试代码问题，你需要打开其中一个子运行查看脚本错误。
- en: 'You can also get the best model''s run and the corresponding `get_best_run_by_primary_metric`
    method retrieves the best run of `HyperDriveRun` that the `hyperdrive_run` variable
    references. From there, you can read the `get_metrics` method of the `Run` object,
    and you can get the details of the execution using the `get_details` method. In
    those details, there is a `runDefinition` object that contains an `arguments`
    list, as shown in *Figure 9.6*:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你还可以获取最佳模型的运行情况，并且相应的 `get_best_run_by_primary_metric` 方法可以检索 `hyperdrive_run`
    变量所引用的 `HyperDriveRun` 的最佳运行结果。从那里，你可以读取 `Run` 对象的 `get_metrics` 方法，进而使用 `get_details`
    方法获取执行详情。在这些详情中，有一个 `runDefinition` 对象，它包含一个 `arguments` 列表，如 *图 9.6* 所示：
- en: '![Figure 9.6 – Demystifying the best_run.get_details()[''runDefinition''][''arguments'']
    code'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.6 – 揭开最佳运行.get_details()[''runDefinition''][''arguments''] 代码的神秘面纱'
- en: '](img/B16777_09_006.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16777_09_006.jpg)'
- en: Figure 9.6 – Demystifying the best_run.get_details()['runDefinition']['arguments']
    code
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.6 – 揭开最佳运行.get_details()['runDefinition']['arguments'] 代码的神秘面纱
- en: In this section, you saw how to run a **hyperparameter tuning** process to find
    the optimal value for your model's **hyperparameters**. In the next section, you
    will see how you can optimize the time you search for the best values by using
    an early termination policy.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一节中，你看到了如何运行 **超参数调优** 过程来找到模型 **超参数** 的最佳值。在下一节中，你将看到如何通过使用提前终止策略来优化寻找最佳值的时间。
- en: Using the early termination policy
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用提前终止策略
- en: One of the parameters of the `HyperDriveConfig` constructor is the `policy`
    one. This argument accepts an `EarlyTerminationPolicy` object, which defines the
    policy with which runs can be terminated early. By default, this parameter has
    a `None` value, which means that the `NoTerminationPolicy` class will be used,
    allowing each run to execute until completion.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`HyperDriveConfig` 构造函数的参数之一是 `policy`。该参数接受一个 `EarlyTerminationPolicy` 对象，定义了可以提前终止运行的策略。默认情况下，这个参数的值为
    `None`，意味着会使用 `NoTerminationPolicy` 类，允许每次运行执行直到完成。'
- en: To be able to use an early termination policy, your script must be performing
    multiple iterations during each run.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 要能够使用提前终止策略，你的脚本必须在每次运行中执行多个迭代。
- en: 'In the **Files** view, add a folder named **termination-policy-training** and
    add a **training.py** file to it, as shown in *Figure 9.7*:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **Files** 视图中，添加一个名为 **termination-policy-training** 的文件夹，并在其中添加一个 **training.py**
    文件，如 *图 9.7* 所示：
- en: '![Figure 9.7 – Adding a training script that performs multiple epochs'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.7 – 添加一个执行多个纪元的训练脚本'
- en: '](img/B16777_09_007.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16777_09_007.jpg)'
- en: Figure 9.7 – Adding a training script that performs multiple epochs
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.7 – 添加一个执行多个纪元的训练脚本
- en: 'Add the following code in the training script:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在训练脚本中添加以下代码：
- en: '[PRE8]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The script gets two parameters, `a` and `b`, and then calls the `fake_train`
    method 20 times. In data science literature, people refer to those 20 times as
    20 **epochs**, which are the training cycles over the entire training dataset.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 该脚本获取两个参数，`a` 和 `b`，然后调用 `fake_train` 方法 20 次。在数据科学文献中，人们将这 20 次称为 20 个 **纪元**，它们是整个训练数据集上的训练周期。
- en: In every epoch, the `a` parameter is multiplied by the iteration number, which
    is an integer value from *0* all the way to *19*, and the `fake_train` method
    is invoked. The `fake_train` method sleeps for 5 seconds to simulate a training
    process and then adds the modified `a` value to the `b` parameter. The result
    is logged in the `fake_metric` metric.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个纪元中，`a` 参数会乘以迭代次数，该次数是从 *0* 一直到 *19* 的整数值，然后调用 `fake_train` 方法。`fake_train`
    方法会暂停 5 秒钟以模拟训练过程，然后将修改后的 `a` 值加到 `b` 参数上。结果会记录在 `fake_metric` 指标中。
- en: Moreover, in *line 8*, the code checks the `a` parameter passed to the script.
    If it is greater than *2*, it changes to value *0*. This means that the fake model
    you are training will be performing better as the `a` value increases to value
    *2*, and then its performance will drop, as shown in *Figure 9.8*.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在 *第 8 行*，代码检查传递给脚本的 `a` 参数。如果它大于 *2*，它会变为 *0*。这意味着你正在训练的虚拟模型在 `a` 值增加到 *2*
    时表现更好，然后它的性能会下降，如 *图 9.8* 所示。
- en: Note that you don't need to read any dataset and, thus, you do not need the
    reference to `Workspace`. This is why *line 10* in the code above doesn't need
    to check if this is an `_OfflineRun` object or not, as you did in the section
    *Moving the code to a Python script file* in [*Chapter 8*](B16777_08_Final_VK_ePub.xhtml#_idTextAnchor117),
    *Experimenting with Python Code*.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，你不需要读取任何数据集，因此不需要引用`Workspace`。这就是为什么上面代码中的*第10行*不需要检查它是否是`_OfflineRun`对象，就像你在[*第8章*](B16777_08_Final_VK_ePub.xhtml#_idTextAnchor117)中的*将代码移到Python脚本文件*部分所做的那样，*使用Python代码进行实验*。
- en: 'If you were to run `HyperDriveConfig` with grid search on all values between
    *1* and *4* for the `fake_metric` evolution over the epochs. On the right side
    of the figure, you can see how the `fake_metric` is affected by the various values
    of the `a` and `b` `a` perform better than the models trained with `a` parameter
    *3* and *4*, regarding the `fake_metric`:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你运行`HyperDriveConfig`，并在所有从*1*到*4*之间的值上进行网格搜索，观察`fake_metric`在每个时期的演化。在图的右侧，你可以看到`fake_metric`是如何受到不同`a`和`b`值的影响的，`a`表现得比使用`a`参数*3*和*4*训练的模型更好，关于`fake_metric`：
- en: '![Figure 9.8 – Hyperparameter tuning without early termination policy'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.8 – 没有早期终止策略的超参数调优](img/B16777_09_008.jpg)'
- en: '](img/B16777_09_008.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16777_09_008.jpg)'
- en: Figure 9.8 – Hyperparameter tuning without early termination policy
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.8 – 没有早期终止策略的超参数调优
- en: 'Ideally, you would like to reduce the amount of time waiting for all the runs
    to complete. `EarlyTerminationPolicy` allows you to monitor the jobs that are
    running, and if they are performing poorly compared to the rest of the jobs, cancel
    them early. The resulting output would be like the one in *Figure 9.9*, where
    you can see that some of the jobs were terminated before reaching the twentieth
    reported interval (the graph starts counting from 0), saving time and compute
    resources:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，你希望减少等待所有运行完成的时间。`EarlyTerminationPolicy` 允许你监控正在运行的任务，如果它们的表现比其他任务差，则提前取消它们。最终的输出将像*图
    9.9*中所示，你可以看到有些任务在到达第二十个报告的间隔之前就被终止了（图表从0开始计数），节省了时间和计算资源：
- en: '![Figure 9.9 – Hyperparameter tuning with aggressive early termination policy'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.9 – 使用激进的早期终止策略进行超参数调优](img/B16777_09_009.jpg)'
- en: '](img/B16777_09_009.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16777_09_009.jpg)'
- en: Figure 9.9 – Hyperparameter tuning with aggressive early termination policy
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.9 – 使用激进的早期终止策略进行超参数调优
- en: 'The AzureML SDK offers a few built-in `EarlyTerminationPolicy` implementations,
    located in the `azureml.train.hyperdrive` module:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: AzureML SDK 提供了一些内置的`EarlyTerminationPolicy`实现，位于`azureml.train.hyperdrive`模块中：
- en: '`NoTerminationPolicy`: This is the default stopping policy that allows all
    runs to complete.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NoTerminationPolicy`：这是默认的停止策略，允许所有运行完成。'
- en: '`MedianStoppingPolicy`: The median stopping policy computes the running averages
    across all runs. It then cancels runs whose best performance is worse than the
    median of the running averages. You can think of this policy as comparing the
    performance of each run against the average performance of the previous runs.
    The nice thing about this policy is that it considers all runs that have happened
    so far and does not just compare the current run with the best runs so far. This
    feature allows the median stopping policy to avoid being trapped in local optimum
    values.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MedianStoppingPolicy`：中位数停止策略计算所有运行的运行平均值。然后，它会取消那些最佳表现差于运行平均值中位数的运行。你可以将此策略看作是将每次运行的表现与前面运行的平均表现进行比较。这个策略的优点在于它考虑了到目前为止所有的运行，而不仅仅是将当前的运行与迄今为止最好的运行进行比较。这一特点使得中位数停止策略能够避免陷入局部最优值。'
- en: '`BanditPolicy`: The bandit policy computes the distance between the current
    run and the best-performing one and then terminates it based on some slack criteria.
    You can define either the absolute distance (the `slack_amount` parameter) or
    the maximum allowed ratio (the `slack_factor` parameter) allowed from the best
    performing run.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BanditPolicy`：Bandit策略计算当前运行和表现最佳的运行之间的距离，然后根据某些容差标准终止当前运行。你可以定义绝对距离（`slack_amount`参数）或与表现最佳的运行的最大允许比率（`slack_factor`参数）。'
- en: '`TruncationSelectionPolicy`: The truncation selection policy is the most aggressive
    policy, which cancels a certain percentage (the `truncation_percentage` parameter)
    of runs that rank the lowest for their performance on the primary metric. When
    ranking a relatively young run, at an early iteration, the policy compares them
    with the equivalent iteration performance of the older runs. Thus, this policy
    strives for fairness in ranking the runs by accounting for improving model performance
    with training time.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TruncationSelectionPolicy`：截断选择策略是最激进的策略，它取消某个百分比（由 `truncation_percentage`
    参数定义）的运行，这些运行在主要指标上的表现排在最后。当对一个相对较新的运行进行排名时，在早期的迭代中，该策略会将其与较老运行在同一迭代的表现进行比较。因此，这个策略力图通过考虑随着训练时间推移模型表现的提升来实现排名的公平性。'
- en: 'All policies take two optional parameters:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 所有策略都接受两个可选参数：
- en: '`evaluation_interva`l: The frequency for applying the policy.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`evaluation_interval`：应用策略的频率。'
- en: '`delay_evaluation`: This delays the first policy evaluation for a specified
    number of intervals, giving time for young runs to reach a mature state.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`delay_evaluation`：这将延迟第一次策略评估，直到指定的间隔次数，给予年轻运行足够的时间以达到成熟状态。'
- en: 'Let''s do hyperparameter tuning on the script you created above using the most
    recommended policy, `MedianStoppingPolicy`:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用最推荐的策略 `MedianStoppingPolicy`，对你上面创建的脚本进行超参数调整：
- en: Go to the `ScriptRunConfig` object that will be used in the hyperparameter tuning
    process.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到将在超参数调整过程中使用的 `ScriptRunConfig` 对象。
- en: 'In a new cell, add the following code:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个新单元格中，添加以下代码：
- en: '[PRE9]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This `HyperDriveConfig` object is using `MedianStoppingPolicy` as its policy
    parameter to evaluate all runs after their first *5* iterations and compares their
    results on every iteration with the median of the running averages.
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个 `HyperDriveConfig` 对象使用 `MedianStoppingPolicy` 作为其策略参数，在第一次 *5* 次迭代后评估所有运行，并在每次迭代中将它们的结果与当前的运行平均值的中位数进行比较。
- en: 'In a new cell, add the following code to start the execution of the `HyperDriveConfig`
    object you defined in *step 2*:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个新单元格中，添加以下代码以开始执行你在 *步骤 2* 中定义的 `HyperDriveConfig` 对象：
- en: '[PRE10]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '*Figure 9.10* shows the results of this `HyperDriveRun` run, where only 8 out
    of 16 jobs were terminated early:'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*图 9.10* 显示了此 `HyperDriveRun` 运行的结果，其中16个作业中只有8个提前终止：'
- en: '![Figure 9.10 – Hyperparameter tuning with median stopping early termination
    policy'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.10 – 使用中位数停止早期终止策略的超参数调整'
- en: '](img/B16777_09_010.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16777_09_010.jpg)'
- en: Figure 9.10 – Hyperparameter tuning with median stopping early termination policy
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.10 – 使用中位数停止早期终止策略的超参数调整
- en: Important note
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: In the code above, the `max_total_runs` argument has a value of 50\. This is
    the top limit of how many child runs can potentially occur. In this example, you
    only have 16 combinations. This means that the experiment will run only 16 times
    and then it will stop, since the whole search area has been searched. If you wanted
    the `max_total_runs` parameter to have an effect, you should specify a value less
    than 16.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，`max_total_runs` 参数的值为50。这是潜在的子运行次数的上限。在这个示例中，你只有16种组合。这意味着实验将只运行16次，然后停止，因为整个搜索区域已经被搜索完毕。如果你希望
    `max_total_runs` 参数生效，应指定一个小于16的值。
- en: So far, you have seen how you can optimize a specific model against the data
    you have. In the next section, you will see how you can search for the best model
    to run an AutoML experiment through the SDK, similar to what you did in [*Chapter
    5*](B16777_05_Final_VK_ePub.xhtml#_idTextAnchor072), *Letting the Machines Do
    the Model Training*, through the studio user interface.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经看到了如何针对你拥有的数据优化特定的模型。在下一部分，你将看到如何通过 SDK 搜索最佳模型来运行 AutoML 实验，类似于你在[*第5章*](B16777_05_Final_VK_ePub.xhtml#_idTextAnchor072)中所做的，*让机器进行模型训练*，通过
    Studio 用户界面进行的操作。
- en: Running AutoML experiments with code
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用代码运行 AutoML 实验
- en: So far, in this chapter, you were fine-tuning a `LassoLars` model, performing
    a hyperparameter tuning process to identify the best value for the `alpha` parameter
    based on the training data. In this section, you will use **AutoML** in the AzureML
    SDK to automatically select the best combination of data preprocessing, model,
    and hyperparameter settings for your training dataset.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在本章中，你一直在微调一个 `LassoLars` 模型，执行超参数调整过程，以根据训练数据识别 `alpha` 参数的最佳值。在这一部分，你将使用
    **AutoML** 和 AzureML SDK，自动选择最佳的数据预处理、模型和超参数设置，来匹配你的训练数据集。
- en: 'To configure an `AutoMLConfig` object. You will need to define the **Task type**,
    the **Metric**, the **Training data**, and the **Compute budget** you want to
    invest. The output of this process is a list of models from which you can select
    the best run and the best model associated with that run, as shown in *Figure
    9.11*:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 要配置一个 `AutoMLConfig` 对象，你需要定义 **任务类型**、**指标**、**训练数据** 和 **计算预算**。该过程的输出是一个模型列表，你可以从中选择最佳的运行和与该运行相关的最佳模型，如*图
    9.11*所示：
- en: '![Figure 9.11 – AutoML process'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.11 – AutoML 过程'
- en: '](img/B16777_09_011.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16777_09_011.jpg)'
- en: Figure 9.11 – AutoML process
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.11 – AutoML 过程
- en: 'Depending on the type of problem you are trying to model, you must select the
    `task` parameter, selecting either `classification`, `regression`, or `forecasting`,
    as shown in *Figure 9.12*:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你要建模的问题类型，你必须选择 `task` 参数，选择 `classification`、`regression` 或 `forecasting`，如*图
    9.12*所示：
- en: '![Figure 9.12 – AutoML task types, algorithms, and supported metrics'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.12 – AutoML 任务类型、算法和支持的指标'
- en: '](img/B16777_09_012.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16777_09_012.jpg)'
- en: Figure 9.12 – AutoML task types, algorithms, and supported metrics
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.12 – AutoML 任务类型、算法和支持的指标
- en: '*Figure 9.12* shows only a subset of the supported algorithms that the AzureML
    SDK supports. The `azureml.train.automl.constants.SupportedModels` package contains
    the `classification`, `regression`, and `forecasting` classes that list all supported
    algorithms as attributes. Since forecasting is just a more specialized version
    of regression, all algorithms from regression can be used. AutoML supports some
    additional, more specialized, forecasting algorithms, such as the very popular
    **ARIMA** technique or Facebook''s **Prophet** algorithm.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 9.12* 显示了 AzureML SDK 支持的部分算法。`azureml.train.automl.constants.SupportedModels`
    包含 `classification`、`regression` 和 `forecasting` 类，这些类列出了所有作为属性的支持算法。由于预测只是回归的一个更专门化的版本，因此回归的所有算法都可以使用。AutoML
    支持一些额外的、更专门的预测算法，例如非常流行的 **ARIMA** 技术或 Facebook 的 **Prophet** 算法。'
- en: The `primary_metric` parameter determines the metric to be used during model
    training for optimization. The metrics are the same for both regression and forecasting.
    Classification algorithms use different metrics, as shown in *Figure 9.12*.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`primary_metric` 参数决定了模型训练过程中用于优化的指标。回归和预测的指标相同。分类算法使用不同的指标，如*图 9.12*所示。'
- en: Training data can be provided in the `training_data` parameter, either in the
    format of a pandas `Dataset` objects. The training data is in tabular format and
    includes the `target` column. You define the name of the column you want to predict,
    passing the `label_column_name` parameter. By default, AutoML will use that dataset
    for both the training and validation of produced models. If the dataset is more
    than 20,000 rows, the dataset is split, keeping 10% for validation. If the dataset
    is smaller than 20,000 rows, cross-validation is used. If you want to specify
    how many folds to create out of `training_data`, you can use the `n_cross_validations`
    parameter. Another approach is to provide the `validation_size` parameter, which
    is the percentage (values *0.0* to *1.0*) to hold out of the training data and
    use as validation. If you want to manually split the data into training and validation
    data, then you can assign your validation data to the `validation_data` parameter,
    as you will do later in this section.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 训练数据可以通过 `training_data` 参数提供，可以是 pandas `Dataset` 对象的格式。训练数据是表格格式，并包括 `target`
    列。你定义你希望预测的列名，传递 `label_column_name` 参数。默认情况下，AutoML 会使用该数据集进行训练和验证。如果数据集超过 20,000
    行，则会进行数据集拆分，保留 10% 用于验证。如果数据集小于 20,000 行，则使用交叉验证。如果你想指定从 `training_data` 创建多少个折叠，你可以使用
    `n_cross_validations` 参数。另一种方法是提供 `validation_size` 参数，指定从训练数据中保留并用作验证的百分比（值为
    *0.0* 到 *1.0*）。如果你想手动将数据分割为训练数据和验证数据，你可以将验证数据分配给 `validation_data` 参数，如本节后面所述。
- en: '**Compute budget** is the amount of money you are willing to spend to find
    the best machine learning model out of your training data. It consists of three
    parts:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '**计算预算** 是你愿意为找到最佳机器学习模型而投入的金钱。它由三部分组成：'
- en: '**The compute cluster''s node type**: The more capabilities your compute cluster''s
    type has, the bigger the cost per second is when you run the AutoML job. This
    is a setting you configured when you created the compute cluster, and this cannot
    change at this point in time unless you create a new cluster.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**计算集群的节点类型**：计算集群的类型具有的能力越多，运行AutoML作业时每秒的成本就越高。这是你在创建计算集群时配置的设置，除非你创建一个新集群，否则在此时无法更改。'
- en: '`max_concurrent_iterations` parameter to use up to the maximum number of nodes
    your compute cluster has. This will allow you to run parallel iterations but increases
    the cost. By default, this parameter is *1* and allows only a single iteration
    at a time.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`max_concurrent_iterations`参数允许使用最多计算集群中的节点数。这将允许你运行并行迭代，但会增加成本。默认情况下，这个参数是*1*，意味着一次只允许进行一个迭代。'
- en: '`experiment_timeout_hours` parameter or you can define the `experiment_exit_score`
    parameter, which defines the score to achieve and then stop further exploration.
    Another way to limit your compute spending is to limit the number of different
    algorithms and parameter combinations to explore. By default, AutoML will explore
    1,000 combinations, and you can restrict that by specifying the `iterations` parameter.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`experiment_timeout_hours`参数，或者你可以定义`experiment_exit_score`参数，定义达到某个分数后停止进一步探索。限制计算支出的另一种方法是限制要探索的不同算法和参数组合的数量。默认情况下，AutoML会探索1,000种组合，你可以通过指定`iterations`参数来限制这个数量。'
- en: 'Now that you have explored all the options that you need to configure in the
    `AutoMLConfig` object, navigate to your `chapter09.ipynb` notebook, add a new
    cell, and type the following code:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经探索了所有需要在`AutoMLConfig`对象中配置的选项，导航到你的`chapter09.ipynb`笔记本，添加一个新的单元格，并输入以下代码：
- en: '[PRE11]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In this code, you get the reference to the workspace, your compute cluster,
    and the `diabetes` dataset, which you are splitting into a training one and a
    validation one. You then create an `AutoMLConfig` object that will do `target`
    column. You also specify the `validation_data` parameter.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，你获取了工作空间、计算集群的引用以及`diabetes`数据集，你将其分为训练集和验证集。然后你创建了一个`AutoMLConfig`对象，用于处理`target`列。你还指定了`validation_data`参数。
- en: Important note
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Instead of splitting the dataset, you could have passed the entire dataset in
    the `training_data` parameter and skipped the `validation_data` parameter. Since
    the dataset consists of only 442 rows, AutoML would have split the training dataset
    into 10 folds, which would have been used to perform the cross-validation technique.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不想分割数据集，你可以将整个数据集传递给`training_data`参数，并跳过`validation_data`参数。由于数据集仅包含442行，AutoML会将训练数据集分为10个折叠，用于执行交叉验证技术。
- en: You then define the `compute_target` experiment to use for this training and
    determine your computation budget by allowing the experiment to run for a quarter
    of an hour (the `experiment_timeout_hours` parameter), which is 15 minutes, and
    exploring only 4 model and parameter combinations (the `iterations` parameter).
    In your case, the `iterations` parameter will probably be the reason that will
    terminate the **AutoML** experiment.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你定义了用于此训练的`compute_target`实验，并通过允许实验运行一个小时四分之一（`experiment_timeout_hours`参数），即15分钟，并仅探索4种模型和参数组合（`iterations`参数），来确定你的计算预算。在你的案例中，`iterations`参数可能会是终止**AutoML**实验的原因。
- en: Important note
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'For forecasting, you would need to specify `forecasting_parameters` in addition
    to the regression parameters you defined previously. The `ForecastingParameters`
    class has the following parameters that are commonly used:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 对于预测，你需要指定`forecasting_parameters`，除了你之前定义的回归参数外。`ForecastingParameters`类包含以下常用参数：
- en: '1) `time_column_name`: The column that represents the time dimension of the
    time series.'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 1) `time_column_name`：表示时间序列时间维度的列。
- en: '2) `max_horizon`: The desired forecast horizon in units of the time-series
    frequency. This is by default *1*, meaning that your model will be able to forecast
    a single slot in the future. The slot is the frequency your dataset uses. If your
    dataset has 1 row for every hour and you want to forecast for 7 days, `max_horizon`
    needs to be 7 days x 24 slots per day = 168\.'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 2) `max_horizon`：所需的预测时间范围，以时间序列的频率为单位。默认值为*1*，这意味着你的模型将能够预测未来的一个时间点。这个时间点是你的数据集所使用的频率。如果你的数据集每小时有1行，并且你想预测7天的时间范围，则`max_horizon`需要设置为7天×24个时间点/天=168。
- en: 'So far, you have created `experiment_config`, which contains the configuration
    of the **AutoML** experiment you are about to perform. Add a new cell and add
    the following code to kick off the AutoML training process:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您已经创建了`experiment_config`，它包含了您即将执行的**AutoML**实验的配置。添加一个新单元格，并输入以下代码来启动AutoML训练过程：
- en: '[PRE12]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The `run` variable contains a reference to the `AutoMLRun` object that was
    created using the `submit` method. After a couple of minutes, the process will
    be complete. To get the current best run and best model, you can use the `get_output()`
    method, as shown in the following snippet:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`run`变量包含对通过`submit`方法创建的`AutoMLRun`对象的引用。几分钟后，过程将完成。要获取当前最佳的运行和最佳模型，您可以使用`get_output()`方法，如以下代码片段所示：'
- en: '[PRE13]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Alternatively, you can directly access the best run and the best model using
    the corresponding `Tuple` index, as shown in the following snippet:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您也可以直接通过相应的`Tuple`索引访问最佳运行和最佳模型，如以下代码片段所示：
- en: '[PRE14]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In every automated machine learning experiment, your data is automatically
    scaled or normalized to help algorithms perform well. This data transformation
    is becoming part of the trained model. This means that your data is passing through
    a data transformer first, and then the model is being trained with new feature
    names that are not directly visible to you. You will see an example of `sklearn.composeColumnTransformer`
    in [*Chapter 10*](B16777_10_Final_VK_ePub.xhtml#_idTextAnchor147), *Understanding
    Model Results*. To review the actual steps that are embedded within the AutoML
    model, you can use the `steps` attribute of the produced model:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个自动化机器学习实验中，您的数据会自动进行缩放或归一化，以帮助算法表现得更好。这一数据转换将成为训练模型的一部分。这意味着您的数据首先通过数据转换器，然后模型将使用新的特征名称进行训练，这些特征名称对您不可见。您将在[*第10章*](B16777_10_Final_VK_ePub.xhtml#_idTextAnchor147)《理解模型结果》中看到`sklearn.composeColumnTransformer`的示例。要查看嵌入在AutoML模型中的实际步骤，您可以使用生成的模型的`steps`属性：
- en: '[PRE15]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The first step is named `datatransformer` and contains the imputers used for
    our `diabetes` dataset. This step is named `datatransformer` for both regression
    and classification tasks. For forecasting tasks, this step is named `timeseriestransformer`,
    and it contains additional date-based transformations. To get a list of transformations
    and the names of engineered features, you can use the following code snippet:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步名为`datatransformer`，包含了用于我们的`diabetes`数据集的插补器。无论是回归任务还是分类任务，这一步骤都被命名为`datatransformer`。对于预测任务，这一步骤命名为`timeseriestransformer`，并包含了额外的基于日期的转换。要获取转换列表和工程特征的名称，您可以使用以下代码片段：
- en: '[PRE16]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In this section, you searched for the best model against the diabetes regression
    problem using **AutoML**. This concludes the most frequently used ways you can
    optimize a machine learning model given a specific dataset.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您通过**AutoML**寻找了针对糖尿病回归问题的最佳模型。这也总结了您可以根据特定数据集优化机器学习模型的最常用方法。
- en: Summary
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you explored the most-used approaches in optimizing a specific
    model to perform well against a dataset and how you can even automate the process
    of model selection. You started by performing parallelized `HyperDriveConfig`
    class to optimize the `alpha` parameter of the `LassoLars` model you have been
    training against the `diabetes` dataset. Then, you automated the model selection,
    using AutoML to detect the best combination of algorithms and parameters that
    predicts the `target` column of the `diabetes` dataset.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您探讨了优化特定模型以在数据集上表现良好的最常用方法，以及如何自动化模型选择过程。您首先通过执行并行化的`HyperDriveConfig`类来优化`LassoLars`模型的`alpha`参数，您正在该参数下训练`diabetes`数据集。接着，您自动化了模型选择，使用AutoML来检测最佳的算法和参数组合，从而预测`diabetes`数据集的`target`列。
- en: In the next chapter, you will build on top of this knowledge, learning how to
    use the AzureML SDK to interpret the model results.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将以此为基础，学习如何使用AzureML SDK来解释模型结果。
- en: Questions
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: You want to get the best model trained by an `model = run.get_output()[0]`
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您想通过`model = run.get_output()[0]`获取最佳模型。
- en: b. `model = run.get_output()[1]`
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b. `model = run.get_output()[1]`
- en: c. `model = run.get_outputs()[0]`
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c. `model = run.get_outputs()[0]`
- en: d. `model = run.get_outputs()[1]`
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d. `model = run.get_outputs()[1]`
- en: You want to run a forecasting `ForecastingParameters` class?
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您想运行一个预测的`ForecastingParameters`类吗？
- en: a. *forecast_horizon = 5 * 1*
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a. *forecast_horizon = 5 * 1*
- en: b. *forecast_horizon = 5 * 24*
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b. *forecast_horizon = 5 * 24*
- en: c. *forecast_horizon = 5 * 12*
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c. *forecast_horizon = 5 * 12*
- en: Further reading
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'This section offers a list of helpful web resources that will help you augment
    your knowledge of the AzureML SDK and the various code snippets used in this chapter:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 本节提供了一些有用的网络资源列表，帮助您增加对 AzureML SDK 和本章中使用的各种代码片段的了解：
- en: 'The `HyperDriveConfig` class: [https://docs.microsoft.com/en-us/python/api/azureml-train-core/azureml.train.hyperdrive.hyperdriveconfig?view=azure-ml-py](https://docs.microsoft.com/en-us/python/api/azureml-train-core/azureml.train.hyperdrive.hyperdriveconfig?view=azure-ml-py)'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HyperDriveConfig` 类：[https://docs.microsoft.com/zh-cn/python/api/azureml-train-core/azureml.train.hyperdrive.hyperdriveconfig?view=azure-ml-py](https://docs.microsoft.com/zh-cn/python/api/azureml-train-core/azureml.train.hyperdrive.hyperdriveconfig?view=azure-ml-py)'
- en: 'The `AutoMLConfig` class: [https://docs.microsoft.com/en-us/Python/api/azureml-train-automl-client/azureml.train.automl.automlconfig.automlconfig](https://docs.microsoft.com/en-us/Python/api/azureml-train-automl-client/azureml.train.automl.automlconfig.automlconfig)'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AutoMLConfig` 类：[https://docs.microsoft.com/zh-cn/Python/api/azureml-train-automl-client/azureml.train.automl.automlconfig.automlconfig](https://docs.microsoft.com/zh-cn/Python/api/azureml-train-automl-client/azureml.train.automl.automlconfig.automlconfig)'
- en: 'Data featurization in automated machine learning: [https://docs.microsoft.com/en-us/azure/machine-learning/how-to-configure-auto-features](https://docs.microsoft.com/en-us/azure/machine-learning/how-to-configure-auto-features)'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化机器学习中的数据特征化：[https://docs.microsoft.com/zh-cn/azure/machine-learning/how-to-configure-auto-features](https://docs.microsoft.com/zh-cn/azure/machine-learning/how-to-configure-auto-features)
- en: 'Auto-train a forecast model: [https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-forecast](https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-forecast)'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动训练预测模型：[https://docs.microsoft.com/zh-cn/azure/machine-learning/how-to-auto-train-forecast](https://docs.microsoft.com/zh-cn/azure/machine-learning/how-to-auto-train-forecast)
- en: 'Reference to the diabetes dataset that was loaded from the scikit-learn library:
    [https://scikit-learn.org/stable/modules/generated/sklearn.datasets.load_diabetes.html](https://scikit-learn.org/stable/modules/generated/sklearn.datasets.load_diabetes.html)'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 scikit-learn 库加载的糖尿病数据集参考：[https://scikit-learn.org/stable/modules/generated/sklearn.datasets.load_diabetes.html](https://scikit-learn.org/stable/modules/generated/sklearn.datasets.load_diabetes.html)
