- en: Appendix A
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录 A
- en: It’s Just Logic
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是逻辑
- en: The rules of logic are to mathematics what those of structure are to architecture.
    — Bertrand Russell
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 逻辑规则对数学的重要性，就如同结构规则对建筑学的重要性。—— 伯特兰·罗素
- en: “Mathematics is a language,” one of my professors used to say all the time.
    “Learning mathematics starts with building up a basic vocabulary.”
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: “数学是一种语言，”我的一位教授常常这么说。“学习数学从建立基本词汇开始。”
- en: 'What he forgot to add is that mathematics is the language of thinking. I often
    get asked the question: do you need to know mathematics to be a software engineer/data
    scientist/random technical professional? My answer is simple. If you regularly
    have to solve problems in your profession, then mathematics is extremely beneficial
    to you. You don’t have to think effectively, but you are better off.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 他忘记补充的一点是，数学是思维的语言。我经常被问到这个问题：做软件工程师/数据科学家/随机技术专业人员需要学数学吗？我的回答很简单。如果你在职业生涯中需要经常解决问题，那么数学对你是极其有益的。你不一定要有效地思考，但你会受益更多。
- en: 'The learning curve of mathematics is steep. You have experienced it yourself,
    and the difficulty may have deterred you from reaching a familiarity with its
    fundamentals. I have good news: if we treat learning mathematics as learning a
    foreign language, we can start by building up a basic vocabulary instead of diving
    straight into poems and novels. As my professor suggested.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 数学的学习曲线是陡峭的。你自己也经历过，这种困难可能让你无法熟悉其基础。我有个好消息：如果我们将学习数学视为学习一门外语，我们可以先从建立基本词汇开始，而不是直接深入到诗歌和小说中。正如我的教授所建议的那样。
- en: A.1 Mathematical logic 101
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: A.1 数学逻辑101
- en: Logic and clear thinking lie at the very foundations of mathematics. But what
    are those? How would you explain what “logic” is?
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑和清晰的思维是数学的基础。但那是什么呢？你会如何解释“逻辑”是什么？
- en: Our thinking processes are formalized by the field of mathematical logic. In
    logic, we work with propositions, that is, statements that are either true or
    false. “It is raining outside.” “The sidewalk is wet.” These are both valid propositions.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的思维过程通过数学逻辑这一领域被形式化。在逻辑中，我们处理命题，也就是那些要么为真要么为假的陈述。“外面在下雨。” “人行道是湿的。”这两个都是有效的命题。
- en: To be able to reason about propositions effectively, we often denote them with
    roman capital letters, such as
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够有效地推理命题，我们通常用罗马大写字母表示它们，比如
- en: '![A = ”It is raining outside.” B = ”The sidewalk is wet.” ](img/file2083.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![A = ”外面在下雨。” B = ”人行道是湿的。”](img/file2083.png)'
- en: Each proposition has a corresponding truth value, which is either true or false.
    These are often abbreviated as 1 and 0\. Although this seems like no big deal,
    finding the truth value can be extremely hard. Think about the proposition
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 每个命题都有一个对应的真值，要么为真，要么为假。它们通常用1和0来表示。尽管这看起来没什么大不了的，但找出真值可能是非常困难的。想想这个命题
- en: '![A = “If the solutions of an algorithm can be verified in polynomial time,
    it can also be solved in polynomial time.” ](img/file2084.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![A = “如果一个算法的解可以在多项式时间内验证，那么它也可以在多项式时间内求解。”](img/file2084.png)'
- en: This is the famous P = NP conjecture, one of the longest-standing unsolved problems
    in mathematics. The statement is easy to understand, but solving the problem (that
    is, finding the truth value of the corresponding proposition) has eluded even
    the smartest minds.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这是著名的P = NP猜想，数学中最长期未解决的问题之一。这个命题容易理解，但解决这个问题（也就是找到对应命题的真值）一直令最聪明的大脑也束手无策。
- en: In essence, the entire body of our scientific knowledge lies in propositions
    whose truth values we have identified. So, how do we do that in practice?
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 从本质上讲，我们整个科学知识体系都包含在我们已经确定真值的命题中。那么，如何在实践中做到这一点呢？
- en: A.2 Logical connectives
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: A.2 逻辑连接词
- en: In themselves, propositions are not enough to provide an effective framework
    for reasoning. Mathematics (and the entirety of modern science) is the collection
    of complex propositions formulated from smaller building blocks with logical connectives.
    Each connective takes one or more propositions and transforms their truth value.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 就命题本身而言，它们不足以提供有效的推理框架。数学（以及现代科学的整个体系）是由逻辑连接词构成的小型构件形成的复杂命题的集合。每个连接词接受一个或多个命题，并转变它们的真值。
- en: '“If it is raining outside, then the sidewalk is wet.” This is the combination
    of two propositions, strung together by the implication connective. There are
    four essential connectives: negation, disjunction, conjunction, and implication.
    We will take a close look at each one.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: “如果外面在下雨，那么人行道就会湿。”这是两个命题通过蕴含连接词结合在一起的例子。蕴含连接词共有四种基本类型：否定、析取、联结和蕴含。我们将逐一详细讨论每一种。
- en: 'Negation flips the truth value of a proposition to its opposite. It is denoted
    by the mathematical symbol ¬: if A is a proposition, then ¬A is its negation.
    Connectives are defined by truth tables that enumerate all the possible truth
    values of the resulting expression, given its inputs. In writing, this looks complicated,
    so here is the truth table of ¬ to illustrate the concept.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 否定将命题的真值翻转为相反的值。它用数学符号¬表示：如果A是一个命题，那么¬A就是它的否定。连接词通过真值表来定义，真值表列举了给定输入时结果表达式的所有可能真值。用文字书写，这看起来可能很复杂，所以这里提供¬的真值表来说明这一概念。
- en: '![| | | |A |¬A | |--|----| |0 | 1 | |1 | 0 | | | | | ](img/file2085.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![| | | |A |¬A | |--|----| |0 | 1 | |1 | 0 | | | | | ](img/file2085.png)'
- en: When expressing propositions in a natural language, negation translates to the
    word “not.” For instance, the negation of the proposition “the screen is black”
    is “the screen is not black.” (Not “the screen is white.”)
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在自然语言中表达命题时，否定通常用“not”来表示。例如，“屏幕是黑色”命题的否定是“屏幕不是黑色”。（而不是“屏幕是白色”。）
- en: 'Logical conjunction is equivalent to grammatical conjunction “and”, denoted
    by the symbol ∧. The proposition A ∧B is true if and only if both A and B are
    true. For example, when we say that “the table is set and the food is ready,”
    we mean to convey that both conjuncts are true. Here is the truth table:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑与（conjunction）等同于语法中的“和”连接词，用符号∧表示。命题A ∧B只有在A和B都为真时才为真。例如，当我们说“桌子已摆好，食物也准备好了”时，意味着两个部分都为真。以下是真值表：
- en: '![| | | | |A-|B--|A-∧-B-| |0 | 0 | 0 | | | | | |0 | 1 | 0 | | | | | |1 | 0
    | 0 | |1 | 1 | 1 | | | ](img/file2086.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![| | | | |A-|B--|A-∧-B-| |0 | 0 | 0 | | | | | |0 | 1 | 0 | | | | | |1 | 0
    | 0 | |1 | 1 | 1 | | | ](img/file2086.png)'
- en: 'Disjunction is known as “or” in the English language and is denoted by the
    symbol ∨. The proposition A ∨B is true whenever either one is:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 析取在英语中被称为“or”，用符号∨表示。命题A ∨B在其中一个为真时为真：
- en: '![| | | | |A-|B--|A-∨-B-| | | | | |0 | 0 | 0 | |0 | 1 | 1 | | | | | |1 | 0
    | 1 | |1 | 1 | 1 | | | | | ](img/file2087.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![| | | | |A-|B--|A-∨-B-| | | | | |0 | 0 | 0 | |0 | 1 | 1 | | | | | |1 | 0
    | 1 | |1 | 1 | 1 | | | | | ](img/file2087.png)'
- en: Disjunction is inclusive, unlike the exclusive or we frequently use in our natural
    language. When you say “I am traveling by train or car,” both cannot be true.
    The disjunction connective is not exclusive.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 析取是包容性的，不像我们在自然语言中常用的排他性“或”。当你说“我正在坐火车或开车旅行”时，不能两者都为真。析取连接词不是排他性的。
- en: 'Finally, the implication connective (→) formalizes the deduction of a conclusion
    B from a premise A: “if A, then B.”'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，蕴含连接词（→）形式化了从前提A推导出结论B的过程：“如果A，那么B。”
- en: The implication is false only when the premise is true and the conclusion is
    false; otherwise, it is true.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 蕴含仅在前提为真而结论为假的情况下为假；否则为真。
- en: '![| | | | |A |B |A → B | |---|--|--------| | 0 |0 | 1 | | 0 |1 | 1 | | | |
    | | 1 |0 | 0 | | 1 |1 | 1 | | | | | ](img/file2088.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![| | | | |A |B |A → B | |---|--|--------| | 0 |0 | 1 | | 0 |1 | 1 | | | |
    | | 1 |0 | 0 | | 1 |1 | 1 | | | | | ](img/file2088.png)'
- en: 'One example would be the famous quote from Descartes: “I think, therefore I
    am.” Translated to the language of formal logic, this is simply'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 一个例子是笛卡尔的名言：“我思故我在。”将其翻译为形式逻辑语言，就是
- en: '![”I think” → ”I exist”. ](img/file2089.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![”我思故我在” → ”我存在”。 ](img/file2089.png)'
- en: Sentences of the form “if A, then B” are called conditionals. It’s not all just
    philosophy. Science is the collection of propositions such as “if X is a closed
    system, then the entropy of X cannot decrease.” (As the 2nd law of thermodynamics
    states.)
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 形式为“如果A，那么B”的句子称为条件句。这不仅仅是哲学问题。科学是由这样的命题组成的：“如果X是一个封闭系统，那么X的熵不能减小。”（这是热力学第二定律所述的内容。）
- en: Most of our scientific knowledge is made of A →B propositions, and scientific
    research is equivalent to pursuing the truth value of implications. When solving
    problems in practice, we rely on theorems (that is, implications) that turn our
    premises into conclusions.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的大部分科学知识由A →B命题组成，科学研究等同于追求蕴含的真值。在实际问题中，我们依赖于定理（即蕴含），这些定理将我们的前提转化为结论。
- en: A.3 The propositional calculus
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: A.3 命题演算
- en: If you got the feeling that the connectives are akin to arithmetic operations,
    you are correct. Connectives yield propositions. Thus connectives can again be
    applied, resulting in complex expressions such as ¬(A ∨B) ∧C. Constructing such
    expressions and deductive arguments is called the propositional calculus.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你觉得连接词类似于算术运算，你是对的。连接词生成命题。因此，连接词可以再次应用，形成复杂的表达式，如 ¬(A ∨B) ∧C。构建这样的表达式和推理论证称为命题演算。
- en: Just like arithmetic operations, expressions made up of propositions and connectives
    also have identities. Think about the famous algebraic identity
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 就像算术运算一样，由命题和连接词组成的表达式也有恒等式。想想著名的代数恒等式
- en: '![(a+ b)(a − b) = a2 − b2, ](img/file2090.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![(a+ b)(a − b) = a² − b², ](img/file2090.png)'
- en: which is one of the most frequently used symbolic expressions. Such an identity
    means we can write one thing in another form.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最常用的符号表达式之一。这样的恒等式意味着我们可以用一种形式写出另一种形式。
- en: In mathematical logic, we call these logical equivalences.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在数学逻辑中，我们称这些为逻辑等价性。
- en: Definition 102\. (Logical equivalences)
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 定义 102. （逻辑等价性）
- en: The propositions P and Q are logically equivalent if they always have the same
    truth value.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果命题 P 和 Q 总是有相同的真值，则它们在逻辑上等价。
- en: If P and Q are logically equivalent, we write
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 P 和 Q 在逻辑上等价，我们写作
- en: P ≡ Q.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: P ≡ Q.
- en: To show you an example, let’s look at our first theorem, one that establishes
    logical equivalences for the conjunction connective.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 为了给你一个例子，来看一下我们的第一个定理，它建立了合取连接词的逻辑等价性。
- en: Theorem 140\. (Properties of conjunction)
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 定理 140. （合取的性质）
- en: Let A, B, and C be arbitrary propositions. Then,
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 设 A、B 和 C 为任意命题。那么，
- en: (a) (A ∧B) ∧C ≡A ∧ (B ∧C) (associativity)
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: (a) (A ∧B) ∧C ≡A ∧ (B ∧C) （结合律）
- en: (b) A ∧B ≡B ∧A (commutativity)
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: (b) A ∧B ≡B ∧A （交换律）
- en: (c) A ∨ (B ∧C) ≡ (A ∨B) ∧ (A ∨C) (distributivity)
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: (c) A ∨ (B ∧C) ≡ (A ∨B) ∧ (A ∨C) （分配律）
- en: (d) A ∧A ≡A (idempotence)
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: (d) A ∧A ≡A （幂等律）
- en: Proof. Showing these properties is done by drawing up their truth tables. We
    will do this for (a), while the rest is left for you as an exercise. (I highly
    suggest you do this, as performing a task by yourself is an excellent learning
    opportunity.)
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 证明。通过绘制真值表来展示这些性质。我们将为 (a) 做这一步，而其余部分留给你作为练习。（我强烈建议你做这件事，因为自己完成任务是一个很好的学习机会。）
- en: For the associativity property, the sizable truth table
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 对于结合性性质，庞大的真值表
- en: '![| | | | | | | | |A--|B-|C--|A-∧-B-|B--∧C--|(A-∧-B)-∧-C-|A-∧-(B-∧-C)-| |0
    |0 | 0 | 0 | 0 | 0 | 0 | | | | | | | | | |0 |0 | 1 | 0 | 0 | 0 | 0 | |0 |1 | 0
    | 0 | 0 | 0 | 0 | | | | | | | | | |0 |1 | 1 | 0 | 1 | 0 | 0 | |1 |0 | 0 | 0 |
    0 | 0 | 0 | | | | | | | | | |1 |0 | 1 | 0 | 0 | 0 | 0 | |1 |1 | 0 | 1 | 0 | 0
    | 0 | | | | | | | | | |1 |1 | 1 | 1 | 1 | 1 | 1 | | | ](img/file2092.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![| | | | | | | | |A--|B-|C--|A-∧-B-|B--∧C--|(A-∧-B)-∧-C-|A-∧-(B-∧-C)-| |0
    |0 | 0 | 0 | 0 | 0 | 0 | | | | | | | | | |0 |0 | 1 | 0 | 0 | 0 | 0 | |0 |1 | 0
    | 0 | 0 | 0 | 0 | | | | | | | | | |0 |1 | 1 | 0 | 1 | 0 | 0 | |1 |0 | 0 | 0 |
    0 | 0 | 0 | | | | | | | | | |1 |0 | 1 | 0 | 0 | 0 | 0 | |1 |1 | 0 | 1 | 0 | 0
    | 0 | | | | | | | | | |1 |1 | 1 | 1 | 1 | 1 | 1 | | |](img/file2092.png)'
- en: provides a proof.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 提供了一个证明。
- en: A few remarks are in order. First, we should read the truth table from left
    to right columns. Strictly speaking, we can omit the columns for A∧B and B ∧C.
    However, including them saves the mental gymnastics.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 有几条备注需要说明。首先，我们应该从左到右阅读真值表的列。严格来说，我们可以省略 A∧B 和 B∧C 的列。然而，包含这些列能帮助思维更清晰。
- en: Second, because of the associativity, we can freely write A ∧B ∧C, as the order
    of operations is irrelevant.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，由于结合律，我们可以自由地写 A ∧B ∧C，因为运算顺序无关紧要。
- en: Finally, note that our first theorem is a premise and a conclusion, connected
    by the implication connective. If we denote them by
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，注意我们的第一个定理是一个前提和一个结论，通过蕴含连接词连接起来。如果我们用
- en: '![P = “A, B, C are propositions,” Q = “ (A ∧ B )∧ C ≡ A ∧ (B ∧ C ).” ](img/file2093.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![P = “A, B, C 是命题，” Q = “ (A ∧ B )∧ C ≡ A ∧ (B ∧ C )。”](img/file2093.png)'
- en: then the first part of our theorem is just the proposition P →Q, one that we
    have proven to be true via laying out the truth table. This shows the immense
    power of the propositional calculus we are building here.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我们定理的第一部分就是命题 P →Q，我们已经通过列出真值表证明了它是正确的。这展示了我们在此构建的命题演算的巨大力量。
- en: Theorem [140](ch035.xhtml#x1-358004r140) has an analogue for disjunction. This
    is stated below for the sake of completeness, but the proof is left to you as
    an exercise.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 定理 [140](ch035.xhtml#x1-358004r140) 有一个关于析取的类似命题。为了完整起见，下面陈述了该命题，但证明留给你作为练习。
- en: Theorem 141\. (Properties of disjunction)
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 定理 141. （析取的性质）
- en: Let A, B, and C be arbitrary propositions. Then,
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 设 A、B 和 C 为任意命题。那么，
- en: (a) (A ∨B) ∨C ≡A ∨ (B ∨C) (associativity)
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: (a) (A ∨B) ∨C ≡A ∨ (B ∨C) （结合律）
- en: (b) A ∨B ≡B ∨A (commutativity)
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: (b) A ∨B ≡B ∨A （交换律）
- en: (c) A ∧ (B ∨C) ≡ (A ∧B) ∨ (A ∧C) (distributivity)
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: (c) A ∧ (B ∨C) ≡ (A ∧B) ∨ (A ∧C) （分配律）
- en: (d) A ∨A ≡A (idempotence)
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: (d) A ∨A ≡A （幂等性）
- en: 'Just as with arithmetic operations, connectives have order of precedence as
    well: ¬,∧,∨,→. This means that, for instance, (¬A) ∧B) ∨C can be written as ¬A
    ∧ (B ∨C).'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 就像算术运算一样，逻辑连接词也有优先级顺序：¬,∧,∨,→。这意味着，例如，(¬A) ∧B) ∨C 可以写成 ¬A ∧ (B ∨C)。
- en: In our calculus of propositions, one of the most important rules is De Morgan’s
    laws, describing how conjunction and disjunction behave with respect to negation.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的命题演算中，最重要的规则之一就是德摩根定律，它描述了合取和析取在否定下的行为。
- en: Theorem 142\. (De Morgan’s laws)
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 定理 142\. （德摩根定律）
- en: Let A and B be two arbitrary propositions. Then,
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 设 A 和 B 为两个任意命题。那么，
- en: (a) ¬(A ∧B) ≡¬A ∨¬B
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: (a) ¬(A ∧B) ≡¬A ∨¬B
- en: (b) ¬(A ∨B) ≡¬A ∧¬B
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: (b) ¬(A ∨B) ≡¬A ∧¬B
- en: hold.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 保持成立。
- en: Proof. As usual, we can prove De Morgan’s laws by laying out the two truth tables
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 证明。像往常一样，我们可以通过列出两个真值表来证明德摩根定律
- en: '![| | | | | | | | |A |B | ¬A |¬B | A ∧B |¬(A ∧ B ) |¬A ∨ ¬B | |---|--|----|----|-------|----------|---------|
    | 0 |0 | 1 | 1 | 0 | 1 | 1 | | 0 |1 | 1 | 0 | 0 | 1 | 1 | | | | | | | | | | 1
    |0 | 0 | 1 | 0 | 1 | 1 | | 1 |1 | 0 | 0 | 1 | 0 | 0 | | | | | ](img/file2094.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![| | | | | | | | |A |B | ¬A |¬B | A ∧B |¬(A ∧ B ) |¬A ∨ ¬B | |---|--|----|----|-------|----------|---------|
    | 0 |0 | 1 | 1 | 0 | 1 | 1 | | 0 |1 | 1 | 0 | 0 | 1 | 1 | | | | | | | | | | 1
    |0 | 0 | 1 | 0 | 1 | 1 | | 1 |1 | 0 | 0 | 1 | 0 | 0 | | | | | ](img/file2094.png)'
- en: and
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 并且
- en: '![| | | | | | | | |A--|B-|-¬A-|¬B--|-A-∨B--|¬(A-∨-B-)-|¬A-∧-¬B--| | 0 |0 |
    1 | 1 | 0 | 1 | 1 | | | | | | | | | | 0 |1 | 1 | 0 | 1 | 0 | 0 | | 1 |0 | 0 |
    1 | 1 | 0 | 0 | | | | | | | | | | 1 |1 | 0 | 0 | 1 | 0 | 0 | | | ](img/file2095.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![| | | | | | | | |A--|B-|-¬A-|¬B--|-A-∨B--|¬(A-∨-B-)-|¬A-∧-¬B--| | 0 |0 |
    1 | 1 | 0 | 1 | 1 | | | | | | | | | | 0 |1 | 1 | 0 | 1 | 0 | 0 | | 1 |0 | 0 |
    1 | 1 | 0 | 0 | | | | | | | | | | 1 |1 | 0 | 0 | 1 | 0 | 0 | | | ](img/file2095.png)'
- en: that verify our claim.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 来验证我们的论断。
- en: 'The propositional calculus we have established so far is the mathematical formalization
    of thinking. One thing is missing, though: deduction, or as Wikipedia puts it,
    “the mental process of drawing inferences in which the truth of their premises
    ensures the truth of their conclusion.” This is given via the famous rule of modus
    ponens.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们到目前为止建立的命题演算是思维的数学形式化。然而，还有一个东西缺失：推理，或者正如维基百科所说的，“推理是从前提的真实性中得出结论的心理过程。”这一点通过著名的假言推理规则得到了体现。
- en: Theorem 143\. (Modus ponens)
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 定理 143\. （假言推理）
- en: Let A and B be two propositions. If A and A →B are true, then B is true as well.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 设 A 和 B 为两个命题。如果 A 和 A →B 都成立，那么 B 也成立。
- en: 'Proof. Let’s take a look at the truth table of → once again:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 证明。让我们再看一下 → 的真值表：
- en: '![| | | | |A--|B-|A--→-B--| | 0 |0 | 1 | | | | | | 0 |1 | 1 | | 1 |0 | 0 |
    | | | | | 1 |1 | 1 | | | ](img/file2096.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![| | | | |A--|B-|A--→-B--| | 0 |0 | 1 | | | | | | 0 |1 | 1 | | 1 |0 | 0 |
    | | | | | 1 |1 | 1 | | | ](img/file2096.png)'
- en: By looking at its rows, we can see that when A is true and the implication A
    →B is true, B is true as well, as the principle of modus ponens indicates.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 通过查看其行，我们可以看到，当 A 为真且 A →B 成立时，B 也为真，正如假言推理原则所示。
- en: As modus ponens sounds extremely abstract, here is a concrete example. From
    common sense, we know that the implication “if it’s raining, then the sidewalk
    is wet” is true. If we observe from a roof window that it’s indeed raining, we
    can confidently conclude that the sidewalk is wet, even without looking at it.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 由于模态假言推理听起来非常抽象，这里有一个具体的例子。从常识上讲，我们知道“如果下雨，那么人行道是湿的”这个命题是成立的。如果我们从屋顶窗户观察到确实在下雨，我们就可以毫不犹豫地得出人行道是湿的结论，即使我们没有亲眼看到它。
- en: In symbolic notation, we can write
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在符号表示中，我们可以写成
- en: A → B, A ⊢ B,
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: A → B, A ⊢ B,
- en: where the turnstile symbol ⊢ essentially reads as “proves.” Thus, the modus
    ponens says that A →B and A prove B.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 其中，推导符号 ⊢ 实质上可以理解为“证明”。因此，假言推理表明 A →B 和 A 证明了 B。
- en: Modus ponens is how we use our theorems. It is always in the background.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 假言推理就是我们如何使用定理。它始终在背后支持着我们。
- en: Remark 22\. (Reversing the implication)
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 注 22\. （反转蕴含）
- en: 'This is a great opportunity to point out one of the most frequent logical fallacies:
    reversing the implication. When debating about a given topic, participants often
    resort to the faulty argument'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这是指出最常见的逻辑谬误之一——反转蕴含关系的绝佳机会。当讨论某个话题时，参与者经常会使用错误的论点
- en: A → B, B ⊢ A.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: A → B, B ⊢ A。
- en: 'Of course, this is not true. For instance, consider our favorite example:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这是不成立的。例如，考虑我们最喜欢的例子：
- en: '![A = ”it’s raining outside,” B = ”the sidewalk is wet.” ](img/file2099.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![A = "外面在下雨"，B = "人行道是湿的。"](img/file2099.png)'
- en: Clearly, A →B holds, but B →A does not. There are other reasons for a wet sidewalk.
    For instance, someone accidentally spilled a barrel of water on it.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，A → B 成立，但 B → A 不成立。湿滑的人行道有其他原因。例如，有人不小心把一桶水洒在上面。
- en: A.4 Variables and predicates
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: A.4 变量和谓词
- en: So, mathematics is about propositions, implications, and their truth values.
    We have seen that we can formulate propositions and reason about pretty complicated
    expressions using our propositional calculus. However, the language we have built
    up so far is not suitable for propositions with variables.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，数学是关于命题、蕴涵以及它们的真值的。我们已经看到，可以使用我们的命题演算来构造命题并推理一些相当复杂的表达式。然而，到目前为止，我们建立的语言并不适用于带有变量的命题。
- en: For instance, think about the sentence
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，想想这句话
- en: '![x is a non- negative real number. ](img/file2100.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![x 是一个非负实数。 ](img/file2100.png)'
- en: Because the truth value depends on x, this is not a well-formed proposition.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 因为真值依赖于 x，这并不是一个结构良好的命题。
- en: Sentences with variables are called predicates, and we denote them by emphasizing
    the dependence on their variables; for instance,
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 带有变量的句子叫做谓词，我们通过强调它们对变量的依赖来表示它们；例如，
- en: 'P (x) : x ≥ 0,'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 'P (x) : x ≥ 0，'
- en: or
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 或者
- en: '![Q (x, y) : x + y is an even number. ](img/file2102.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![Q (x, y) : x + y 是偶数。 ](img/file2102.png)'
- en: Each predicate has a domain from which its variables can be taken. You can think
    about a predicate P(x) as a function that maps its domain to the set {0,1}, representing
    its truth value. (Although, strictly speaking, we don’t have functions available
    as tools when defining the very foundation of our formal language. However, we
    are not philosophers or set theorists, so we don’t have to be concerned about
    such details.)
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 每个谓词都有一个域，从中可以获取其变量。你可以将谓词 P(x) 视为一个函数，它将其域映射到集合 {0, 1}，表示它的真值。（严格来说，当我们定义我们形式语言的基础时，并没有可用的函数作为工具。然而，我们不是哲学家或集合论专家，所以我们不需要关心这些细节。）
- en: Predicates define truth sets, that is, subsets of the domain where the predicate
    is true. Formally, they are denoted by
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 谓词定义了真集，即谓词为真的域的子集。从形式上讲，它们表示为
- en: '{*x* ∈ *D* : *P*(*x*)}, (A.1)'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '{*x* ∈ *D* : *P*(*x*)}, (A.1)'
- en: where P(x) is a predicate with domain D.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 P(x) 是一个具有定义域 D 的谓词。
- en: Translated to English, ([A.1](ch035.xhtml#variables-and-predicates)) reads as
    “all elements x of D for which P(x) is true.”
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 翻译成英文为（[A.1](ch035.xhtml#variables-and-predicates)）：“对于 D 中的所有元素 x，P(x) 为真。”
- en: Although we haven’t talked about sets before, truth sets probably seem familiar
    if you have a computer science background. For instance, if you have ever used
    the Python programming language, you have probably seen expressions like
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们之前没有讨论过集合，但如果你有计算机科学背景，真集可能显得很熟悉。例如，如果你曾使用过 Python 编程语言，你可能见过像这样的表达式
- en: '[PRE0]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: all the time. These are called comprehensions, and they are inspired by the
    so-called set-builder notation given by ([A.1](ch035.xhtml#variables-and-predicates)).
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 一直如此。这些叫做概念化，它们受到所谓的集合构造符号的启发，如（[A.1](ch035.xhtml#variables-and-predicates)）。
- en: A.5 Existential and universal quantification
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: A.5 存在量化和全称量化
- en: Predicates are a big step toward properly formalizing mathematical thinking,
    but we are not quite there yet. To give you an example from machine learning,
    let’s talk about finding the minima of loss functions (that is, training a model).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 谓词是正式化数学思维的一大进步，但我们还没有完全到达目标。举一个机器学习的例子，我们来谈谈如何找到损失函数的最小值（也就是训练模型）。
- en: A point x is said to be the global minimum of a function f(x) if, for all other
    y in its domain D, f(x) ≤f(y) holds. For instance, the point x = 0 is a minima
    of the function f(x) = x².
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如果对于其定义域 D 中的所有其他 y，f(x) ≤ f(y) 成立，则称点 x 为函数 f(x) 的全局最小值。例如，点 x = 0 是函数 f(x)
    = x² 的一个最小值。
- en: How would you express this in our formal language? For one, we could say that
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何在我们的形式化语言中表达这个呢？首先，我们可以说
- en: '![for all y ∈ D,f (x ) ≤ f(y) is true, ](img/file2103.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![对于所有 y ∈ D，f (x) ≤ f(y) 为真， ](img/file2103.png)'
- en: 'where we fix f(x) = x² and x = 0\. There are two parts of this sentence: for
    all y ∈D, and f(x) ≤f(y) is true. The second one is a predicate:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 其中我们固定 f(x) = x² 和 x = 0。这个句子有两个部分：对于所有 y ∈ D，以及 f(x) ≤ f(y) 为真。第二部分是一个谓词：
- en: '![P (y) : f (x) ≤ f (y), ](img/file2104.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![P (y) : f (x) ≤ f (y), ](img/file2104.png)'
- en: where y ∈ℝ.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 y ∈ ℝ。
- en: The second part seems new, as we have never seen the words “for all” in our
    formal language before. They express a kind of quantification about when the predicate
    P(y) is true.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 第二部分似乎是新的，因为我们在我们的形式语言中从未见过“对于所有”的词语。它们表达了一种关于何时谓词 P(y) 为真的量化方式。
- en: 'In mathematical logic, there are two quantifiers we need to be happy: the universal
    quantifier “for all” denoted by the symbol ∀, and the existential quantifier “there
    exists” denoted by ∃.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在数学逻辑中，我们需要的两个量词是：全称量词“对所有”，用符号 ∀ 表示，以及存在量词“存在”，用符号 ∃ 表示。
- en: For example, consider the sentence “all of my friends are mathematicians.” By
    defining the set F to be set of my friends and the predicate on this domain as
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑句子“我的所有朋友都是数学家。”通过定义集合 F 为我的朋友集合，并将这个定义域上的谓词表示为
- en: '![M (x) : x is a mathematician, ](img/file2105.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![M (x) : x 是数学家, ](img/file2105.png)'
- en: we can formalize our sentence as
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将我们的句子形式化为
- en: '![∀x ∈ F,M (x). ](img/file2106.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![∀x ∈ F,M (x). ](img/file2106.png)'
- en: Remember that the domain of the predicate M(x) is F. We could omit that, but
    it’s much more user-friendly this way.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，谓词 M(x) 的定义域是 F。我们本可以省略这一点，但这样写更易于理解。
- en: Similarly, “I have at least one friend who is a mathematician” translates to
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，“我至少有一个朋友是数学家”可以翻译为
- en: '![∃x ∈ F,M (x). ](img/file2107.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![∃x ∈ F,M (x). ](img/file2107.png)'
- en: 'When there is a more complex proposition behind the quantifier, we mark its
    scope with parentheses:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 当量词后面有更复杂的命题时，我们用括号标记它的范围：
- en: '![∀x ∈ F,(A (x) → (B(x) ∧C (x))). ](img/file2108.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![∀x ∈ F,(A (x) → (B(x) ∧C (x))). ](img/file2108.png)'
- en: Note that as (∀x ∈F,M(x)) and (∃x ∈F,M(x)) have a single truth value, they are
    propositions, not predicates! Thus, quantifiers turn predicates into propositions.
    Just like any other propositions, logical connectives can be applied to them.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到，由于 (∀x ∈F,M(x)) 和 (∃x ∈F,M(x)) 只有一个真值，它们是命题，而不是谓词！因此，量词将谓词转化为命题。像其他命题一样，逻辑联接词可以应用于它们。
- en: 'Among all the operations, negation is the most interesting here. To see why,
    let’s consider the previous example: “all of my friends are mathematicians.” At
    first, you might say that its negation is “none of my friends are mathematicians,”
    but that is not correct. Think about it: I can have mathematician friends, as
    long as not all of them are mathematicians. Thus,'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有运算中，否定是最有趣的。为了看清楚为什么，假设我们考虑之前的例子：“我的所有朋友都是数学家。”起初，你可能会说它的否定是“我的朋友都不是数学家”，但这并不正确。想一想：我可以有数学家的朋友，只要不是所有朋友都是数学家。所以，
- en: '![¬(”all of my friends are mathematicians”) ≡ ”I have at least one non-mathematician
    friend.” ](img/file2109.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![¬(“我的所有朋友都是数学家”) ≡ “我至少有一个不是数学家的朋友。”](img/file2109.png)'
- en: In other words (or should I say symbols), we have
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说（或者应该说是符号），我们有
- en: '![¬(∀x ∈ F,M (x )) ≡ ∃x ∈ F,¬M (x). ](img/file2110.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![¬(∀x ∈ F,M (x )) ≡ ∃x ∈ F,¬M (x). ](img/file2110.png)'
- en: That is, roughly speaking, the negation of ∀ is ∃ and the negation of ∃ is ∀.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，粗略地说，∀ 的否定是 ∃，而 ∃ 的否定是 ∀。
- en: A.6 Problems
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: A.6 问题
- en: Problem 1\. Using truth tables, show that
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 问题 1\. 使用真值表证明
- en: (a) A ∨¬A is true,
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: (a) A ∨¬A 为真，
- en: (b) and A ∧¬A is false.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: (b) 和 A ∧¬A 为假。
- en: In other words, A ∨¬A is a tautology, while A ∧¬A is a contradiction. (We call
    expressions that are always true tautologies, while expressions that are always
    false are contradictions.)
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，A ∨¬A 是一个重言式，而 A ∧¬A 是一个矛盾式。（我们称总为真的表达式为重言式，总为假的表达式为矛盾式。）
- en: Problem 2\. Define the exclusive or operation XOR, denoted by ⊕, by the truth
    table
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 问题 2\. 定义异或运算 XOR，用 ⊕ 表示，真值表如下
- en: '![| | | | |A-|B--|A-⊕-B--| |0 |0 | 0 | | | | | |0 |1 | 1 | | | | | |1 |0 |
    1 | |1 |1 | 0 | | | | | ](img/file2111.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![| | | | |A-|B--|A-⊕-B--| |0 |0 | 0 | | | | | |0 |1 | 1 | | | | | |1 |0 |
    1 | |1 |1 | 0 | | | | | ](img/file2111.png)'
- en: Show that
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 证明
- en: (a) A ⊕B ≡ (¬A ∧B) ∨ (A ∧¬B)
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: (a) A ⊕B ≡ (¬A ∧B) ∨ (A ∧¬B)
- en: (b) and A ⊕B ≡ (¬A ∨¬B) ∧ (A ∨B)
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: (b) 和 A ⊕B ≡ (¬A ∨¬B) ∧ (A ∨B)
- en: holds.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 保持成立。
- en: Join our community on Discord
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加入我们的 Discord 社区
- en: Read this book alongside other users, Machine Learning experts, and the author
    himself. Ask questions, provide solutions to other readers, chat with the author
    via Ask Me Anything sessions, and much more. Scan the QR code or visit the link
    to join the community. [https://packt.link/math](https://packt.link/math)
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他用户、机器学习专家以及作者本人一起阅读本书。提出问题，为其他读者提供解决方案，通过“问我任何问题”环节与作者聊天，等等。扫描二维码或访问链接加入社区。[https://packt.link/math](https://packt.link/math)
- en: '![PIC](img/file1.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/file1.png)'
