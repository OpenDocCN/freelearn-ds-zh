- en: Embedding Matplotlib in wxWidgets Using wxPython
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 wxPython 将 Matplotlib 嵌入 wxWidgets
- en: This chapter will explain how we can use Matplotlib in the wxWidgets framework,
    particularly using wxPython bindings.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将解释如何在 wxWidgets 框架中使用 Matplotlib，特别是通过 wxPython 绑定。
- en: 'The contents of this chapter are as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章内容如下：
- en: A brief introduction to wxWidgets and wxPython
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: wxWidgets 和 wxPython 的简要介绍
- en: A simple example of embedding Matplotlib in wxWidgets
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 嵌入 Matplotlib 到 wxWidgets 的一个简单示例
- en: Extending the previous example to include the Matplotlib navigation toolbar
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将前一个示例扩展，包含 Matplotlib 导航工具栏
- en: How to update a Matplotlib plot in real time using the wxWidgets framework
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用 wxWidgets 框架实时更新 Matplotlib 图表
- en: How to design a GUI with wxGlade and embed a Matplotlib figure in it
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用 wxGlade 设计 GUI 并将 Matplotlib 图形嵌入其中
- en: Let's start with an overview of the features of wxWidgets and wxPython.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从 wxWidgets 和 wxPython 的特点概述开始。
- en: A brief introduction to wxWidgets and wxPython
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: wxWidgets 和 wxPython 的简要介绍
- en: One of the most important features of wxWidgets is cross-platform portability;
    it currently supports Windows, macOS X, Linux (with the X11, Motif, and GTK+ libraries),
    OS/2, and several other operating systems and platforms (including an embedded
    version that is currently under development).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: wxWidgets 最重要的特性之一是跨平台的可移植性；它目前支持 Windows、macOS X、Linux（支持 X11、Motif 和 GTK+
    库）、OS/2 和多个其他操作系统与平台（包括正在开发中的嵌入式版本）。
- en: wxWidgets can best be described as a native mode toolkit because it provides
    a thin API abstraction layer across platforms and uses platform-native widgets
    under the hood, as opposed to emulating them. Using native controls gives wxWidgets
    applications a natural and familiar look and feel. On the other hand, introducing
    an additional layer can result in a slight performance penalty, although this
    is unlikely to be noticed in the kind of applications we will commonly develop.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: wxWidgets 最好描述为一种本地模式工具包，因为它在各个平台之间提供了一个薄的 API 抽象层，并且在后台使用平台本地的控件，而不是模拟它们。使用本地控件使得
    wxWidgets 应用程序具有自然且熟悉的外观和感觉。另一方面，引入额外的层次可能会导致轻微的性能损失，尽管在我们常开发的应用程序中，这种损失不太容易察觉。
- en: wxWidgets is not restricted to GUI development. It's more than just a graphics
    toolkit, providing a whole set of additional facilities, such as database libraries,
    an inter-process communication layer, networking functionalities, and so on. Though
    it's written in C++, there are several bindings for many commonly used programming
    languages. Among them is a Python binding provided by wxPython.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: wxWidgets 并不仅限于 GUI 开发。它不仅仅是一个图形工具包，还提供了一整套额外的功能，如数据库库、进程间通信层、网络功能等。虽然它是用 C++
    编写的，但有许多绑定可供多种常用编程语言使用。其中包括由 wxPython 提供的 Python 绑定。
- en: wxPython (available at [http://www.wxpython.org/](http://www.wxpython.org/))
    is a Python extension module that provides a set of bindings to the Python language
    from the wxWidgets library. This extension module allows Python programmers to
    create instances of wxWidgets classes and to invoke methods of those classes.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: wxPython（可在 [http://www.wxpython.org/](http://www.wxpython.org/) 获取）是一个 Python
    扩展模块，提供了来自 wxWidgets 库的 Python 语言绑定。这个扩展模块允许 Python 程序员创建 wxWidgets 类的实例，并调用这些类的方法。
- en: It is a great time to introduce wxPython because wxPython 4 was released a year
    ago. The latest version of wxPython is 4.0.1 to date (April 2018), and it is compatible
    with both Python 2 and Python 3.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是引入 wxPython 的好时机，因为 wxPython 4 在一年前发布了。到目前为止（2018 年 4 月），wxPython 的最新版本是
    4.0.1，并且它与 Python 2 和 Python 3 都兼容。
- en: Beginning in 2010, project Phoenix is an effort to clean up the wxPython implementation
    and to make it compatible with Python 3\. As one can imagine, wxPython was entirely
    rewritten with a focus on performance, maintainability, and extensibility.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 从 2010 年开始，凤凰计划是清理 wxPython 实现并使其兼容 Python 3 的努力。正如大家所想，wxPython 完全重写，重点放在了性能、可维护性和可扩展性上。
- en: Let us walk through the most basic example of using wxPython!
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们走一遍使用 wxPython 的最基本示例！
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![](img/d4cc4e5e-3505-4253-8d28-4079cb9ae172.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d4cc4e5e-3505-4253-8d28-4079cb9ae172.png)'
- en: Following on from the preceding example, there is one very important thing for
    beginners.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例基础上，有一件非常重要的事情是初学者需要注意的。
- en: '`wx.Frame` and `wx.Window()` are very different. `wx.Window` in wxWidgets is
    the base class from which all visual elements are derived, such as buttons and
    menus; we always refer to a program window as `wx.Frame` in wxWidgets.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`wx.Frame`和`wx.Window()`是非常不同的。`wx.Window`是wxWidgets中所有视觉元素的基类，如按钮和菜单；在wxWidgets中，我们通常将程序窗口称为`wx.Frame`。'
- en: The syntax for constructing a `wx.Frame` is `wx.Frame(Parent, ID, Title)`. When
    specifying `Parent` as `None`, as shown just now, we are essentially saying that
    the frame is a top-level `window`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 构造`wx.Frame`的语法为`wx.Frame(Parent, ID, Title)`。当将`Parent`指定为`None`时，如刚才所示，我们实际上是在说这个框架是一个顶级`window`。
- en: There is also an **ID system** in wxWidgets. Various controls and other parts
    of wxWidgets need an ID. Sometimes, the ID is provided by users; alternatively,
    it has a predefined value. However, the value of the ID is unimportant in most
    cases (such as the preceding example), and we can use `wx.ID_ANY` as the ID of
    an object, to tell wxWidgets to assign an ID automatically. Remember that all automatically
    assigned IDs are negative, and user-defined IDs should always be positive to avoid
    clashing with them.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: wxWidgets中还有一个**ID系统**。各种控件和wxWidgets的其他部分都需要一个ID。有时，ID由用户提供；另外，ID也有预定义的值。然而，在大多数情况下（如前面的示例），ID的值并不重要，我们可以使用`wx.ID_ANY`作为对象的ID，告诉wxWidgets自动分配ID。请记住，所有自动分配的ID都是负数，而用户定义的ID应始终为正数，以避免与自动分配的ID冲突。
- en: 'Now, let us explore an example written in the OOP style that requires event
    handling—the `Hello world` button example:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看一个需要事件处理的面向对象风格的示例——`Hello world`按钮示例：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The output looks like:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: '![](img/2b24a4cb-87f0-4f55-a26b-d7f99fea8619.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2b24a4cb-87f0-4f55-a26b-d7f99fea8619.png)'
- en: As readers may observe, all three GUI libraries that we have discussed here
    have a similar syntax. Therefore, getting familiar with just one of them lets
    you switch easily among them.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 正如读者可能注意到的，我们讨论过的所有三个GUI库的语法都很相似。因此，熟悉其中一个库后，你可以轻松地在它们之间切换。
- en: 'The layout managers for wxWidgets are `sizer` widgets: they are the containers
    for widgets (including other sizers) that will handle the visual arrangement of
    the widgets'' dimensions according to our configuration. `BoxSizer` takes one
    parameter, its orientation. In this case, we pass the constant `wx.VERTICAL` to
    have widgets laid out in a column; however, there is also the constant `wx.HORIZONTAL`
    if we need a row of widgets:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: wxWidgets的布局管理器是`sizer`小部件：它们是小部件（包括其他sizer）的容器，根据我们的配置处理小部件尺寸的视觉排列。`BoxSizer`接受一个参数，表示其方向。在这种情况下，我们传递常量`wx.VERTICAL`来将小部件按列排列；如果需要一排小部件，也可以使用常量`wx.HORIZONTAL`：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We are now able to add our `FigureCanvas` object to the `sizer`. The arguments
    of the `Add()` function are really important:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在能够将`FigureCanvas`对象添加到`sizer`中了。`Add()`函数的参数非常重要：
- en: The first parameter is a reference to the object to be added.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个参数是要添加的对象的引用。
- en: 'Then, we have the second parameter proportion. This is used to express how
    much of the additional free space should be assigned to this widget. Often, the
    widgets on a GUI don''t take up all the space, so there is some extra space available.
    This space is redistributed to all the widgets based on the proportion value of
    each widget with respect to all the widgets present in the GUI. Let''s take an
    example: if we have three widgets respectively with the proportion set to `0`,
    `1`, and `2`, then the first (with the proportion set to `0`) will not change
    at all. The third (the proportion set to 2) will change twice more than the second
    (proportion `1`). In the book example, we set it to `1`, so we declare that the
    widget should take one slot of the free space available when resizing.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，我们有第二个参数——比例。这个值用于表示应将多少额外的空闲空间分配给此小部件。通常，GUI中的小部件不会占据所有空间，因此会有一些额外的空闲空间可用。这些空间会根据每个小部件与GUI中所有小部件的比例值进行重新分配。举个例子：如果我们有三个小部件，它们的比例分别为`0`、`1`和`2`，那么第一个（比例为`0`）将完全不变化。第三个（比例为`2`）将比第二个（比例为`1`）变化两倍。在书中的示例中，我们将比例设置为`1`，因此我们声明该小部件在调整大小时应占用一份空闲空间。
- en: The third parameter is a combination of flags to further configure widget behavior
    in the sizer. It controls borders, alignment, separation between widgets, and
    expansions. Here we declare that the `FigureCanvas` should expand when the window
    is resized.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三个参数是一个标志组合，用于进一步配置在`sizer`中小部件的行为。它控制边框、对齐、各小部件之间的间隔以及扩展。在这里，我们声明`FigureCanvas`应在窗口调整大小时进行扩展。
- en: 'Let us try an example to embed a Matplotlib figure (polar plot) into the wxWidgets-powered
    GUI:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试一个示例，将Matplotlib图形（极坐标图）嵌入到由wxWidgets支持的GUI中：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Output:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '![](img/7839a8db-0781-4cff-90dc-9a34b946bd2f.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7839a8db-0781-4cff-90dc-9a34b946bd2f.png)'
- en: We have shown how to embed a Matplotlib figure into the GUI; however, we have
    yet to demonstrate the interaction between Matplotlib and wxWidgets. It can be
    achieved easily by adding a button and a binding (`Bind`) a function to the button.
    This will update the figure each time the users click on it.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经展示了如何将Matplotlib图形嵌入到GUI中；然而，我们还没有展示Matplotlib和wxWidgets之间的交互。通过添加一个按钮并将一个函数绑定（`Bind`）到按钮上，可以轻松实现这一点。每次用户点击按钮时，这将更新图形。
- en: 'Let''s walk through one important example showcasing how to update the plot
    by clicking a button! Although we are using the same figure, the underlying update
    methodology is different. Here we will update the figure through a click event
    instead of an auto-timer as shown in [Chapter 6](94590894-fac7-4931-a15e-c7ec328446aa.xhtml),
    *Embedding Matplotlib in Qt 5*:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们走一步通过点击按钮来更新图形的示例！尽管我们使用的是相同的图形，但底层的更新方法不同。这里我们将通过点击事件来更新图形，而不是如[第六章](94590894-fac7-4931-a15e-c7ec328446aa.xhtml)中所示的自动计时器，*在Qt
    5中嵌入Matplotlib*：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Output:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '![](img/535ca0e7-3eba-4638-90f3-52be4b822c30.png) ![](img/551048e3-cd55-4f93-a2d9-708e260b336f.png)![](img/93b02621-4318-45ce-8c04-89ff832ec693.png)
    ![](img/478742a7-0ba1-4e9f-829d-3f2b74b63978.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/535ca0e7-3eba-4638-90f3-52be4b822c30.png) ![](img/551048e3-cd55-4f93-a2d9-708e260b336f.png)![](img/93b02621-4318-45ce-8c04-89ff832ec693.png)
    ![](img/478742a7-0ba1-4e9f-829d-3f2b74b63978.png)'
- en: By clicking on the Start Radar! button, we invoke the function `update_fun`
    and redraw a new graph every time.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击“开始雷达！”按钮，我们调用`update_fun`函数，每次都会重新绘制一个新的图形。
- en: Embedding Matplotlib in a GUI from wxGlade
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在wxGlade中嵌入Matplotlib图形
- en: For very simple applications with limited GUIs, we can design the interface
    from inside the application source code. Once the GUI becomes more complex, this
    solution is not acceptable and we need a tool to support us in the GUI design.
    One of the most well-known tools for this activity in wxWidgets is wxGlade.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 对于非常简单的应用程序，GUI界面比较有限的情况下，我们可以在应用程序源代码内部设计界面。一旦GUI变得更加复杂，这种方案就不可行，我们需要一个工具来支持我们进行GUI设计。wxWidgets中最著名的工具之一就是wxGlade。
- en: wxGlade is an interface design program written in Python using wxPython, and
    this allows it to run on all platforms where these two are available.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: wxGlade是一个使用wxPython编写的界面设计程序，这使得它可以在所有支持这两个工具的平台上运行。
- en: The philosophy is similar to Glade, the famous GTK+ GUI designer, and the look
    and feel are very similar as well. wxGlade is a program that helps us to create
    wxWidgets or wxPython user interfaces, but it is not a full-featured code editor;
    it's just a designer, and the code it generates does nothing more than display
    the created widgets.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 该理念与著名GTK+图形用户界面设计工具Glade相似，外观和体验也非常相似。wxGlade是一个帮助我们创建wxWidgets或wxPython用户界面的程序，但它并不是一个功能完整的代码编辑器；它只是一个设计器，生成的代码只是显示已创建的小部件。
- en: 'Although project Phoenix and wxPython 4 are relatively new, they are both supported
    by wxGlade. wxGlade can be downloaded from sourceforge, and one can easily download
    the zipped file, unzip it, and run wxGlade with the **`python3` **command:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管凤凰计划和wxPython 4相对较新，但它们都得到了wxGlade的支持。wxGlade可以从SourceForge下载，用户可以轻松下载压缩包，解压缩并通过**`python3`**命令运行wxGlade：
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: And here comes the user interface!
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这里就是用户界面！
- en: '![](img/6f2ae096-da93-4e00-b024-50e7dd2fecd9.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6f2ae096-da93-4e00-b024-50e7dd2fecd9.png)'
- en: Here is a breakdown of the three main windows in *Figure 5*. The upper left
    window is the main Palette window. The first button of the first row (Windows)
    is the button to create a frame as a basis of everything. The lower left window
    is the Properties window, which lets us display and edit the properties of applications,
    windows, and controls. The window on the right is the Tree window. It enables
    us to visualize the structure. It allows editing the structure of the project,
    with its application, windows, sizers, and controls. By choosing an item in the Tree window,
    we can edit its corresponding properties in the Properties window.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是*图5*中三个主要窗口的细节。左上角的窗口是主要的调色板窗口。第一行的第一个按钮（Windows）是创建一个框架作为一切基础的按钮。左下角的窗口是属性窗口，它让我们显示和编辑应用程序、窗口和控件的属性。右边的窗口是树形窗口。它让我们可视化结构，允许编辑项目的结构，包括其应用程序、窗口、布局和控件。通过在树形窗口中选择一个项目，我们可以在属性窗口中编辑其对应的属性。
- en: 'Let us click on the button to Add a Frame. This will be followed by this small
    window:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们点击按钮以 添加一个框架。接下来会出现一个小窗口：
- en: '![](img/dfade9ca-1daf-49ac-b009-7c0bf2dbdde8.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dfade9ca-1daf-49ac-b009-7c0bf2dbdde8.png)'
- en: 'Select the base class as wxFrame; and here we will generate a Design window
    as shown in the following screenshot. From here, we can start to click and add
    buttons and features that we like:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 选择基础类为 wxFrame；然后我们将在以下截图中生成一个 设计 窗口。从这里开始，我们可以点击并添加我们喜欢的按钮和功能：
- en: '![](img/3a3e8e5a-5c10-489f-b96f-b25aee9e662d.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3a3e8e5a-5c10-489f-b96f-b25aee9e662d.png)'
- en: 'Let us first create a container for the code we have shown previously. Before
    we click on any buttons, let us revisit the essential elements needed for the
    preceding GUI:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们为之前展示的代码创建一个容器。在点击任何按钮之前，我们先回顾一下前面 GUI 所需的基本元素：
- en: Frame
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 框架
- en: Vertical box (`wx.BoxSizer`)
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 垂直框（`wx.BoxSizer`）
- en: Button
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按钮
- en: 'So it''s very straightforward; let''s click on the sizer button in the Palette window
    and then click on the Design window:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这非常简单；让我们点击 调色板 窗口中的 sizer 按钮，然后点击 设计 窗口：
- en: '![](img/aad979d8-9169-4776-9441-b9066bc58781.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aad979d8-9169-4776-9441-b9066bc58781.png)'
- en: 'From the Tree window, we can see the structure of our GUI. We have a frame
    containing a sizer of two slots. However, we want a vertical box instead of a
    horizontal one; this can be modified in the Properties window when we click on
    sizer_2:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 从 树状窗口 中，我们可以看到 GUI 的结构。我们有一个包含两个插槽的框架。然而，我们希望使用垂直框而不是水平框；这可以在点击 sizer_2 时在 属性 窗口中进行修改：
- en: '![](img/5c26ba1d-803e-481e-8181-4274fad5b641.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5c26ba1d-803e-481e-8181-4274fad5b641.png)'
- en: Now let's add a button to slot 2! This can be done by simply clicking on Button in
    the Palette window, then clicking on the slot in the lower part of the Design window.
    However, the button doesn't look very nice from there. It's on the left-hand side
    of the lower panel. This can be altered by selecting _button1 in the Tree window
    and modifying the alignment details in the Layout tab of the Properties window.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们向插槽 2 添加一个按钮！这可以通过点击 调色板 窗口中的 按钮，然后点击 设计 窗口下部的插槽来完成。不过，从这里看，按钮的显示效果并不好。它位于下方面板的左侧。我们可以通过在 树状窗口中选择
    _button1，并在 属性 窗口的布局选项卡中修改对齐方式来更改它。
- en: 'In here, we have selected wxEXPAND and wxALIGN_CENTER, which indicate that
    it has to expand and fill the width of the frame; this also ensures that it aligns
    at the center of the slot at all times:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们选择了 wxEXPAND 和 wxALIGN_CENTER，这意味着它必须扩展并填充框架的宽度；这也确保它始终对齐到插槽的中心：
- en: '![](img/177dc6d5-cf86-4c02-a609-12ae272d962b.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/177dc6d5-cf86-4c02-a609-12ae272d962b.png)'
- en: 'For now, the frame is all set. Let''s export the code by choosing File and Generate
    Code:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，框架已经设置完成。让我们通过选择 文件 然后 生成代码来导出代码：
- en: '![](img/2e52f081-98d1-4a91-a106-81e76ab0fe51.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2e52f081-98d1-4a91-a106-81e76ab0fe51.png)'
- en: 'Upon clicking on Generate Code, a file will be saved in the desired folder
    (where the user saved the `wxWidget` file) and here is a code snippet:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 点击生成代码后，文件将保存在所选文件夹中（即用户保存 `wxWidget` 文件的文件夹），以下是一个代码片段：
- en: '[PRE6]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The preceding code provides the GUI on its own. However, it lacks some key
    functions to make everything work. Let''s quickly expand on that to see how it
    works:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码提供了一个独立的图形界面。然而，它缺少一些关键功能来使一切正常工作。让我们快速扩展一下，看看它是如何工作的：
- en: '[PRE7]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Summary
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We are now able to develop wxWidgets applications and then embed Matplotlib
    in them. To be specific, readers should be able to embed a Matplotlib figure in
    a wxFrame, use a sizer to embed both the figure and navigation toolbar in a wxFrame,
    update a plot through interaction, and use wxGlade to design a GUI for Matplotlib
    embedding.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以开发 wxWidgets 应用程序，并将 Matplotlib 嵌入其中。具体来说，读者应该能够在 wxFrame 中嵌入 Matplotlib
    图形，使用 sizer 将图形和导航工具栏都嵌入到 wxFrame 中，通过交互更新图表，并使用 wxGlade 设计一个用于 Matplotlib 嵌入的
    GUI。
- en: We are now ready to move further and see how to integrate Matplotlib into the
    web.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在准备继续前进，看看如何将 Matplotlib 集成到网页中。
