- en: Embedding Matplotlib in Qt 5
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Qt 5 中嵌入 Matplotlib
- en: There are several GUI libraries available, and one widely used library is Qt.
    In this book, we will be using Qt 5, the latest major version of this library.
    Unless explicitly mentioned, we are referring to Qt 5 when we simply state Qt
    throughout the chapter.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 有多种 GUI 库可供选择，其中一个广泛使用的库是 Qt。在本书中，我们将使用 Qt 5，这是该库的最新主要版本。除非明确提及，否则我们在本章节中提到的
    Qt 都是指 Qt 5。
- en: We will follow a similar progression to that in [Chapter 5](b069fa19-b6c3-4558-acf4-fcc22b4786c1.xhtml),
    *Embedding Matplotlib in GTK+3*, and we will present similar examples but this
    time written in Qt.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将遵循与 [第 5 章](b069fa19-b6c3-4558-acf4-fcc22b4786c1.xhtml) *在 GTK+3 中嵌入 Matplotlib*
    类似的进度，展示类似的示例，但这次是用 Qt 编写的。
- en: We believe that this method will allow us to directly compare the libraries,
    and it has the advantage of not leaving the *How would I write something with
    library X?* question unanswered.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们认为这种方法将使我们能够直接比较各个库，并且它的优点是不会留下 *我如何使用库 X 编写某个东西？* 这个问题没有答案。
- en: 'In this chapter, we will learn how to:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何：
- en: Embed a Matplotlib figure into a Qt widget
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 Matplotlib 图形嵌入到 Qt 小部件中
- en: Embed a figure and navigation toolbar into a Qt widget
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将图形和导航工具栏嵌入到 Qt 小部件中
- en: Use events to update a Matplotlib plot in real time
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用事件实时更新 Matplotlib 图形
- en: Use QT Designer to draw a GUI and then use it with Matplotlib in a simple Python
    application
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 QT Designer 绘制 GUI，然后在简单的 Python 应用程序中与 Matplotlib 一起使用
- en: We will begin by giving an introduction to the library.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从对该库的介绍开始。
- en: A brief introduction to Qt 5 and PyQt 5
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Qt 5 和 PyQt 5 的简要介绍
- en: Qt is a cross-platform application development framework widely used for graphical
    programs (GUI) and also for non-GUI tools.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Qt 是一个跨平台的应用程序开发框架，广泛用于图形程序（GUI）以及非图形工具。
- en: Qt was developed by Trolltech (now owned by Nokia), and it's probably best known
    for being the foundation of the **K Desktop Environment** (**KDE**) for Linux.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Qt 由 Trolltech（现为诺基亚所有）开发，可能最著名的是作为 **K桌面环境** (**KDE**) 的基础，KDE 是 Linux 的桌面环境。
- en: The Qt toolkit is a collection of classes made to simplify the creation of programs.
    Qt is more than just a GUI toolkit. It includes components for abstractions of
    network sockets, threads, Unicode, regular expressions, SQL databases, SVG, OpenGL,
    and XML. It also has a fully functional web browser, help system, multimedia framework,
    and rich collection of GUI widgets.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Qt 工具包是一个类集合，旨在简化程序的创建。Qt 不仅仅是一个 GUI 工具包，它还包括用于网络套接字、线程、Unicode、正则表达式、SQL 数据库、SVG、OpenGL
    和 XML 的抽象组件。它还具有一个完全功能的 Web 浏览器、帮助系统、多媒体框架以及丰富的 GUI 小部件集合。
- en: Qt is available on several platforms, particularly Unix/Linux, Windows, macOS
    X, and also some embedded devices. As it uses native APIs of the platform to render
    the Qt controls, applications developed with Qt have a look and feel that fits
    the running environment (without looking like something alien in it).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Qt 可在多个平台上使用，尤其是 Unix/Linux、Windows、macOS X，以及一些嵌入式设备。由于它使用平台的原生 API 来渲染 Qt
    控件，因此使用 Qt 开发的应用程序具有适合运行环境的外观和感觉（而不会看起来像是外来物）。
- en: Though written in C++, Qt can also be used in several other programming languages
    through language bindings available for Ruby, Java, Perl, and also Python with
    PyQt.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 Qt 是用 C++ 编写的，但通过可用于 Ruby、Java、Perl 以及通过 PyQt 也支持 Python，Qt 也可以在多个其他编程语言中使用。
- en: PyQt 5 is available for both Python 2.x and 3.x, but in this book, we will consistently
    use Python 3 in all our code. PyQt 5 has over 620 classes and 6,000 functions
    and methods. Before we go into some examples, it is important to know the difference
    between Qt 4/PyQt 4 and Qt 5/PyQt 5.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: PyQt 5 可用于 Python 2.x 和 3.x，但在本书中，我们将在所有代码中一致使用 Python 3。PyQt 5 包含超过 620 个类和
    6,000 个函数和方法。在我们进行一些示例之前，了解 Qt 4/PyQt 4 和 Qt 5/PyQt 5 之间的区别是很重要的。
- en: Differences between Qt 4 and PyQt 4
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Qt 4 和 PyQt 4 之间的区别
- en: PyQt is a comprehensive set of Python bindings for the Qt framework. However, PyQt
    5 is not backward compatible with PyQt 4\. It is noteworthy that PyQt 5 does not
    support any part of the Qt API that are marked as deprecated or obsolete in Qt
    v5.0\. However, it is possible that some of these are included accidentally. If
    included, they *are* considered bugs and will be removed when found.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: PyQt 是 Qt 框架的全面 Python 绑定集。然而，PyQt 5 与 PyQt 4 不兼容。值得注意的是，PyQt 5 不支持 Qt v5.0
    中标记为弃用或过时的任何 Qt API。尽管如此，可能会偶尔包含一些这些 API。如果包含了它们，它们*会*被视为错误，并在发现时被删除。
- en: 'If you are familiar with Qt 4 or have read the first edition of this book,
    one thing to note is that the signals and slots of are no longer supported. Therefore,
    the following are not implemented in PyQt 5:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你熟悉Qt 4或者已经读过本书的第一版，需要注意的是，信号与槽的机制在PyQt 5中已不再被支持。因此，以下内容在PyQt 5中未实现：
- en: '`QtScript`'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtScript`'
- en: '`QObject.connect()`'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QObject.connect()`'
- en: '`QObject.emit()`'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QObject.emit()`'
- en: '`SIGNAL()`'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SIGNAL()`'
- en: '`SLOT()`'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SLOT()`'
- en: Also, there is a modification in `disconnect()` as it no longer takes arguments
    and will disconnect all connections to the `QObject` instance when invoked.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`disconnect()`也做了修改，调用时不再需要参数，且会断开所有与`QObject`实例的连接。
- en: 'However, new modules have been introduced, such as the following:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，已经引入了新模块，如下所示：
- en: '`QtBluetooth`'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtBluetooth`'
- en: '`QtPositioning`'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtPositioning`'
- en: '`Enginio`'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Enginio`'
- en: 'Let''s start with a very simple example—calling a window. Again for best performance,
    copy the code, paste it in a file, and run the script on the Terminal. Our codes
    are optimized for running on a Terminal only:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一个非常简单的例子开始——调用一个窗口。同样，为了获得最佳性能，请复制代码，将其粘贴到文件中，并在终端中运行脚本。我们的代码仅优化用于在终端中运行：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![](img/7588ada9-d7d9-4146-8bb1-f5b67dce764d.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7588ada9-d7d9-4146-8bb1-f5b67dce764d.png)'
- en: The syntax is very similar to what you see in [Chapter 5](b069fa19-b6c3-4558-acf4-fcc22b4786c1.xhtml), *Embedding
    Matplotlib in GTK+3*. Once you know how to use one particular GUI library fairly
    well (such as GTK+3), it is very easy to adapt to a new one readily. The code
    is very similar to that in GTK+3 and the logic follows as well. `QApplication`
    manages the GUI application's control flow and main settings. It's the place where
    the main event loop is executed, processed and dispatched. It is also responsible
    for application initialization and finalization and handling most of the system-wide
    and application-wide settings. Since `QApplication` handles the entire initialization
    phase, it must be created before any other objects related to the UI are created.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 语法与你在[第5章](b069fa19-b6c3-4558-acf4-fcc22b4786c1.xhtml)中看到的*将Matplotlib嵌入GTK+3*非常相似。一旦你对某个特定的GUI库（例如GTK+3）掌握得比较好，就可以很容易地适应新的GUI库。代码与GTK+3非常相似，逻辑也跟着走。`QApplication`管理GUI应用程序的控制流和主要设置。它是主事件循环执行、处理和分发的地方。它还负责应用程序的初始化和最终化，并处理大多数系统级和应用级的设置。由于`QApplication`处理整个初始化阶段，因此必须在创建与UI相关的任何其他对象之前创建它。
- en: The `qApp.exec_()` command enters the Qt main event loop. Once `exit()` or `quit()`
    is called, it returns the relevant return code. Until the main loop is started,
    nothing is displayed on the screen. It's necessary to call this function as the
    main loop handles all events and signals coming from both the application widgets
    and the window system; essentially, no user interaction can take place before
    it is called.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`qApp.exec_()`命令进入Qt主事件循环。一旦调用了`exit()`或`quit()`，它就会返回相关的返回码。在主循环开始之前，屏幕上不会显示任何内容。调用此函数是必要的，因为主循环处理来自应用程序小部件和窗口系统的所有事件和信号；本质上，在调用之前无法进行任何用户交互。'
- en: 'Readers may wonder why there is an underscore in `exec_();`. The reason is
    simple: `exec()` is a reserved word in Python hence the addition of the underscore
    to the `exec()` Qt method. Wrapping it inside `sys.exit()` allows the Python script
    to exit with the same return code, informing the environment how the application
    ended (whether successfully or not).'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 读者可能会疑惑，为什么`exec_();`中有一个下划线。原因很简单：`exec()`是Python中的保留字，因此在`exec()`的Qt方法中加了下划线。将其包装在`sys.exit()`内，可以让Python脚本以相同的返回码退出，告知环境应用程序的结束状态（无论是成功还是失败）。
- en: For more experienced readers, you will find something abnormal in the preceding
    code. While we were instantiating the `QApplication` class, we were required to
    parse `sys.argv` (an empty list in this case) to the constructor of `QApplication`.
    At least I found it unexpected when I first used PyQt, but this is required as
    the instantiation invokes the constructor of the C++ class `QApplication`, and
    it uses `sys.argv` to initialize the Qt application. Parsing `sys.argv` during
    `QApplication` instantiation is a convention in Qt and it is something be aware
    of. Also every PyQt 5 application must create an application object.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 对于经验更丰富的读者，你会发现前面的代码中有些不寻常的地方。当我们实例化`QApplication`类时，需要将`sys.argv`（在此情况下是一个空列表）传递给`QApplication`的构造函数。至少当我第一次使用PyQt时，这让我感到意外，但这是必须的，因为实例化会调用C++类`QApplication`的构造函数，并且它使用`sys.argv`来初始化Qt应用程序。在`QApplication`实例化时解析`sys.argv`是Qt中的一种约定，需要特别注意。另外，每个PyQt
    5应用程序必须创建一个应用程序对象。
- en: 'Again, let''s try to another one in OOP style:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 再次尝试以面向对象编程（OOP）风格编写另一个示例：
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The preceding code creates two buttons, and each button will invoke an individual
    function—print `Hello world` once or print `Hello World` five times in the Terminal.
    Readers should be able to grasp the event handling system from the code easily.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码创建了两个按钮，每个按钮都会调用一个独立的函数——在终端中打印一次 `Hello world` 或打印五次 `Hello World`。读者应该能轻松理解代码中的事件处理系统。
- en: 'Here is the output:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出结果：
- en: '![](img/addd7eec-dc3d-4c38-9ab5-0ce2c4faf4e7.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/addd7eec-dc3d-4c38-9ab5-0ce2c4faf4e7.png)'
- en: This is another implementation of the two buttons example from [Chapter 5](https://cdp.packtpub.com/matplotlib_for_python_developers__second_edition/wp-admin/post.php?post=375&action=edit#post_362), *Embedding
    Matplotlib in GTK+3*, and the goal of this example is to demonstrate the signal
    handling approach in PyQt 5 in comparison with GTK+3\. Readers should find this
    fairly similar as we intentionally write it in a way more similar to the example
    in GTK+3.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这是来自[第 5 章](https://cdp.packtpub.com/matplotlib_for_python_developers__second_edition/wp-admin/post.php?post=375&action=edit#post_362)的另一个两个按钮示例，*将
    Matplotlib 嵌入 GTK+3*，这个示例的目的是展示在 PyQt 5 中的信号处理方法，并与 GTK+3 进行对比。读者应该会发现它非常相似，因为我们故意将其写得更接近
    GTK+3 示例。
- en: 'Let''s try to embed a Matplotlib figure in a Qt window. Be aware that unlike
    the example in the previous chapter, this figure will be refreshed every second!
    Therefore, we also use the `QtCore.QTimer()` function in here and invoke the `update_figure()`
    function as an event-action pair:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试将 Matplotlib 图形嵌入 Qt 窗口。请注意，与上一章的示例不同，这个图形将每秒刷新一次！因此，我们也在这里使用了 `QtCore.QTimer()`
    函数，并将 `update_figure()` 函数作为事件-动作对进行调用：
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Again, the figure in this example will randomize the data and update the figure
    every 1 second through `QTimer`, shown as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，本示例中的图形会通过 `QTimer` 随机化数据，并每秒更新一次，具体如下：
- en: '![](img/46a8be92-2ec5-464a-832b-d46b191de1a1.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/46a8be92-2ec5-464a-832b-d46b191de1a1.png)'
- en: Introducing QT Creator / QT Designer
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引入 QT Creator / QT Designer
- en: The four preceding figures are screenshots of the PyQt 5 window, which will
    refresh itself every second.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 上面四个图形是 PyQt 5 窗口的截图，它会每秒刷新一次。
- en: For simple examples, designing the GUI in the Python code can be good enough,
    but for more complex applications, this solution does not scale.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 对于简单的示例，直接在 Python 代码中设计 GUI 已经足够，但对于更复杂的应用程序，这种解决方案无法扩展。
- en: There are some tools to help you design the GUI for Qt, and one of the most
    commonly used tools was QT Designer. In the first edition of this book, this section
    was about GUI making with QT Designer. Since the late QT4 development, QT Designer
    has merged with QT Creator. In the following example, we would learn how to open
    the secret QT Designer in QT Creator and create a UI file.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些工具可以帮助你为 Qt 设计 GUI，其中一个最常用的工具是 QT Designer。在本书的第一版中，本部分讲述的是如何使用 QT Designer
    制作 GUI。自从 QT4 后期开发以来，QT Designer 已经与 QT Creator 合并。在接下来的示例中，我们将学习如何在 QT Creator
    中打开隐藏的 QT Designer 并创建一个 UI 文件。
- en: Similar to Glade, we can design the user interface part of the application using
    the on-screen form and drag-and-drop interface. Then we can connect the widgets
    with the backend code, where we develop the logic of the application.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于 Glade，我们可以通过屏幕上的表单和拖放界面设计应用程序的用户界面。然后，我们可以将小部件与后端代码连接，在那里我们开发应用程序的逻辑。
- en: 'First of all, let us show you how to open QT Designer in QT Creator. When you
    open QT Creator, you will see the following interface:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们展示如何在 QT Creator 中打开 QT Designer。当你打开 QT Creator 时，界面如下所示：
- en: '![](img/0a97bbe9-7a6e-428d-8d67-c82f04d25895.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0a97bbe9-7a6e-428d-8d67-c82f04d25895.png)'
- en: 'The tricky part is this: Do not create the project by clicking on the New File
    or Project button in the Creator. Instead, create a New Project:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 难点在于：不要通过点击 Creator 中的“新建文件”或“新建项目”按钮来创建项目。相反，选择“新建项目”：
- en: '![](img/9bdc8606-c103-4b4d-a4c2-f8cca343a861.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9bdc8606-c103-4b4d-a4c2-f8cca343a861.png)'
- en: 'Select Qt in Files and Classes and Qt Designer Form in the middle panel:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在文件和类中选择 Qt，并在中间面板中选择 Qt Designer Form：
- en: '![](img/375d6696-bf0f-49f5-a910-c5a59e86367f.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/375d6696-bf0f-49f5-a910-c5a59e86367f.png)'
- en: 'There is a range of template selections, such as Widget or Main Window. In
    our case, we pick Main Window and simply follow through the remaining steps:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 有一系列模板选择，如 Widget 或 Main Window。在我们的例子中，我们选择 Main Window，并简单地按照其余步骤进行操作：
- en: '![](img/3c04934e-c10b-42c3-afef-e3322fff65e5.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c04934e-c10b-42c3-afef-e3322fff65e5.png)'
- en: 'And eventually, we will reach the QT Designer interface. Everything you work
    on here will be put in your desired folder as a UI file:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，我们将进入QT Designer界面。你在这里做的所有工作将被保存到你指定的文件夹中，作为UI文件：
- en: '![](img/994c10ae-9971-44ad-b8d2-0614edde9ac6.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/994c10ae-9971-44ad-b8d2-0614edde9ac6.png)'
- en: Embedding Matplotlib in a GUI made with QT Creator / QT Designer.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用QT Creator / QT Designer制作的GUI中嵌入Matplotlib。
- en: To quickly demonstrate how to embed a Matplotlib figure in Qt 5 using QT Creator,
    let's use the former example and combine it with the scripts generated by QT Creator.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 为了快速演示如何使用QT Creator在Qt 5中嵌入Matplotlib图形，我们将使用前面的例子，并将其与QT Creator生成的脚本结合起来。
- en: 'First of all, adjust the Geometry of the MainWindow at the lower right panel;
    change the Width and Height to 300x300:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在右下角面板调整MainWindow的Geometry；将宽度和高度改为300x300：
- en: '![](img/2bd8cd6c-1bb6-41b4-9438-2298cf4936c6.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2bd8cd6c-1bb6-41b4-9438-2298cf4936c6.png)'
- en: 'After that, drag a Widget from Container in the left panel to the MainWindow in
    the middle. Resize it until it fits well in the MainWindow:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，从左侧面板的Container中拖动一个Widget到中间的MainWindow中。调整大小，直到它恰好适合MainWindow：
- en: '![](img/eac1a19b-7034-4c84-a057-1cf1aa509dff.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eac1a19b-7034-4c84-a057-1cf1aa509dff.png)'
- en: 'That is it for the basic design! Now save it as a UI file. When you view the
    UI file, it should display something like this:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 基本设计就是这样！现在将其保存为UI文件。当你查看UI文件时，它应该显示如下内容：
- en: '[PRE3]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This file is in XML format, and we need to convert it to a Python file. This
    can be done simply by using this command:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件是XML格式的，我们需要将它转换为Python文件。可以简单地通过使用以下命令来完成：
- en: '[PRE4]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'And now we will have a Python file like this:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将得到一个像这样的Python文件：
- en: '[PRE5]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note that this is just the framework for the GUI; we still have to add some
    things in order to make it work.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这只是GUI的框架；我们仍然需要添加一些内容才能使其正常工作。
- en: 'We must add `init()` to initialize the `UiMainWindow`, as well as link the
    `DynamicCanvas` to the widget in the middle of the `MainWindow`. Here it goes:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须添加`init()`来初始化`UiMainWindow`，并将`DynamicCanvas`与`MainWindow`中间的widget连接起来。具体如下：
- en: '[PRE6]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We have added only five lines of code in here. We can simply replace the class `ApplicationWindow` with
    this, and here is the outcome:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里只添加了五行代码。我们可以简单地用这个替换`ApplicationWindow`类，最终的结果如下：
- en: '![](img/40b85b90-afe5-479d-96fa-f9e6febca9cd.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/40b85b90-afe5-479d-96fa-f9e6febca9cd.png)'
- en: 'And here is the complete code generating the preceding figure:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这是生成上述图形的完整代码：
- en: '[PRE7]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Summary
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: GUI design by using QT Creator/ QT Designer has enough material for a book on
    its own. Therefore, in this chapter, we aimed to show you just a glimpse of GUI
    design through PyQt 5\. Upon finishing this chapter, the readers should now understand
    how to embed a figure in a QWidget, use the layout manager to pack a figure in
    a QWidget, create a timer, react to events and update a Matplotlib graph accordingly,
    and use QT Designer to draw a simple GUI for Matplotlib embedding.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 使用QT Creator / QT Designer进行GUI设计本身就有足够的内容可以写成一本书。因此，在本章中，我们旨在通过PyQt 5向你展示GUI设计的冰山一角。完成本章后，读者应能理解如何在QWidget中嵌入图形，使用布局管理器将图形放入QWidget中，创建计时器，响应事件并相应更新Matplotlib图形，以及使用QT
    Designer为Matplotlib嵌入绘制一个简单的GUI。
- en: We are now ready to learn another GUI library, wxWidgets.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在准备学习另一个GUI库，wxWidgets。
