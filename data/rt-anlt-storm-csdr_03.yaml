- en: Chapter 3. Understanding Storm Internals by Examples
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。通过示例了解Storm内部
- en: This chapter of the book is dedicated to making you understand the internals
    of Storm and how it works using practical examples. The intent is to get you accustomed
    to writing you own spouts, go through reliable and non-reliable topologies, and
    acquaint you with various groupings provided by the Storm.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的这一章节致力于让您了解Storm的内部工作原理，并通过实际示例来说明它的工作方式。目的是让您习惯于编写自己的喷口，了解可靠和不可靠的拓扑，并熟悉Storm提供的各种分组。
- en: 'The topics that will be covered in the chapter are as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Storm spouts and custom spouts
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Storm喷口和自定义喷口
- en: Anchoring and acking
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 锚定和确认
- en: Different stream groupings
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同的流分组
- en: By the end of this chapter, you should be able to understand the various groupings
    and the concept of reliability by using of anchoring, and you will be able to
    create your own spouts.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，您应该能够通过使用锚定来理解各种分组和可靠性的概念，并能够创建自己的喷口。
- en: Customizing Storm spouts
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义Storm喷口
- en: You have explored and understood `WordCount` topology provided by the Storm-starter
    project in previous chapters. Now it's time we move on to the next step, the do
    it yourself journey with Storm; so let's take up the next leap and do some exciting
    stuff with our own spouts that read from various sources.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经在之前的章节中探索和了解了Storm-starter项目提供的`WordCount`拓扑。现在是时候我们继续下一步，使用Storm进行自己的实践；让我们迈出下一步，用我们自己的喷口从各种来源读取。
- en: Creating FileSpout
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建FileSpout
- en: Here we will create our own spout to read the events or tuples from a file source
    and emit them into the topology; we would substitute spout in place of `RandomSentenceSpout`
    we used in the `WordCount` topology in the previous chapter.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将创建自己的喷口，从文件源读取事件或元组并将它们发射到拓扑中；我们将在上一章的`WordCount`拓扑中使用`RandomSentenceSpout`的位置替换为喷口。
- en: To start, copy the project we created in [Chapter 2](part0020_split_000.html#page
    "Chapter 2. Getting Started with Your First Topology"), *Getting Started with
    Your First Topology*, into a new project and make the following changes in `RandomSentenceSpout`
    to make a new class called `FileSpout` within the Storm-starter project.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将我们在[第2章](part0020_split_000.html#page "第2章。开始你的第一个拓扑")中创建的项目复制到一个新项目中，并对`RandomSentenceSpout`进行以下更改，以在Storm-starter项目中创建一个名为`FileSpout`的新类。
- en: 'Now we will make changes in `FileSpout` so that it reads sentences from a file
    as shown in the following code:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将更改`FileSpout`，使其从文件中读取句子，如下面的代码所示：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Tip
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all the Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从[http://www.packtpub.com](http://www.packtpub.com)的帐户中下载您购买的所有Packt图书的示例代码文件。如果您在其他地方购买了这本书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，以便直接将文件发送到您的电子邮件。
- en: Tweaking WordCount topology to use FileSpout
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 调整WordCount拓扑以使用FileSpout
- en: 'Now we need to fit `FileSpout` into our `WordCount` topology and execute it.
    To do this, you need to change one line of code in `WordCount` topology and instantiate
    `FileSpout` instead of `RandomSentenceSpout` in `TopologyBuilder`, as shown here:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要将`FileSpout`适应到我们的`WordCount`拓扑中并执行它。为此，您需要在`WordCount`拓扑中更改一行代码，并在`TopologyBuilder`中实例化`FileSpout`而不是`RandomSentenceSpout`，如下所示：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This one line change will take care of instantiation of the new spout that
    will read from the specified file `/home/mylog` (please create this file before
    you execute the program). Here is a screenshot of the output for your reference:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行更改将处理从指定文件`/home/mylog`中读取的新喷口的实例化（请在执行程序之前创建此文件）。以下是您参考的输出的屏幕截图：
- en: '![Tweaking WordCount topology to use FileSpout](img/00021.jpeg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![调整WordCount拓扑以使用FileSpout](img/00021.jpeg)'
- en: The SocketSpout class
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SocketSpout类
- en: 'As a next step to understand the spouts better, let''s create a `SocketSpout`
    class. Assuming that you are proficient in writing Socket Server or Producer,
    I will walk you through the process of creating a custom `SocketSpout` class to
    consume a socket output in the Storm topology:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解喷口，让我们创建一个`SocketSpout`类。假设您擅长编写Socket服务器或生产者，我将带您了解创建自定义`SocketSpout`类以在Storm拓扑中消耗套接字输出的过程：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Anchoring and acking
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 锚定和确认
- en: 'We have talked about DAG that is created for the execution of a Storm topology.
    Now when you are designing your topologies to cater to reliability, there are
    two items that needs to be added to Storm:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经谈到了为执行Storm拓扑创建的DAG。现在，当您设计拓扑以满足可靠性时，有两个需要添加到Storm的项目：
- en: Whenever a new link, that is, a new stream is being added to the DAG, it is
    called anchoring
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每当DAG添加新的链接，即新的流时，它被称为锚定
- en: When the tuple is processed in entirety, it is called acking
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当元组完全处理时，称为确认
- en: When Storm knows these preceding facts, then during the processing of tuples
    it can gauge them and accordingly fail or acknowledge the tuples depending upon
    whether they are completely processed or not.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当Storm知道这些先前的事实时，它可以在元组处理过程中对它们进行评估，并根据它们是否完全处理而失败或确认元组。
- en: 'Let''s take a look at the following `WordCount` topology bolts to understand
    the Storm API anchoring and acking better:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下以下`WordCount`拓扑螺栓，以更好地理解Storm API的锚定和确认：
- en: '`SplitSentenceBolt`: The purpose of this bolt was to split the sentence into
    different words and emit it. Now let''s examine the output declarer and the execute
    methods of this bolt in detail (specially the highlighted sections) as shown in
    the following code:'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SplitSentenceBolt`：这个螺栓的目的是将句子分割成不同的单词并发射它。现在让我们详细检查这个螺栓的输出声明者和执行方法（特别是高亮显示的部分），如下面的代码所示：'
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The output declarer functionality of the preceding code is elaborated as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的输出声明功能如下所述：
- en: '`_collector.emit`: Here each tuple being emitted by the bolt on the stream
    called `word` (the second argument ) is anchored using the first argument of the
    method (the tuple). In this arrangement, if a failure occurs the tuple being anchored
    at the root of the tree would be replayed by the spout.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_collector.emit`: 这里，由bolt在名为`word`的流上发射的每个元组（第二个参数）都使用方法的第一个参数（元组）进行了定位。在这种安排下，如果发生故障，树的根部定位的元组将由spout重新播放。'
- en: '`collector.ack`: Here we are informing Storm that tuple has been processed
    successfully by this bolt. In the event of a failure, the programmer can explicitly
    call a `fail` method, or Storm internally calls it, as in the case of timeout
    events so that it can be replayed.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collector.ack`: 这里我们通知Storm该元组已被这个bolt成功处理。在发生故障时，程序员可以显式调用`fail`方法，或者Storm在超时事件的情况下会内部调用它，以便可以重放。'
- en: '`declarer.declare`: This is the method called to specify the stream on which
    successfully processed tuples would be emitted. Notice that we have used the same
    `word` stream in the `_collector.emit` method. Similarly, if you look into the
    `WordCount` topology''s `Builder` method, you''d find another piece in overall
    integration of `word` stream, which is as follows:'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`declarer.declare`: 这是用来指定成功处理的元组将被发射的流的方法。请注意，我们在`_collector.emit`方法中使用了相同的`word`流。同样，如果你查看`WordCount`拓扑的`Builder`方法，你会发现另一个关于`word`流整体集成的部分，如下所示：'
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The unreliable topology
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不可靠的拓扑
- en: 'Now let''s look at the unreliable version of the same topology. Here, if the
    tuple fails to be processed by Storm in entirety, it is not replayed by the framework.
    The code which we used previously, in this topology, would look like this:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看相同拓扑的不可靠版本。在这里，如果元组未能被Storm完全处理，框架不会重放。我们之前在这个拓扑中使用的代码会像这样：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Thus, an un-anchored tuple is emitted by the bolt. Sometimes, due to programming
    needs to handle various problems, developers deliberately create unreliable topologies.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，未定位的元组由bolt发射。有时，由于编程需要处理各种问题，开发人员会故意创建不可靠的拓扑。
- en: Stream groupings
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 流分组
- en: Next we need to get acquainted with various stream groupings (a stream grouping
    is basically the mechanism that defines how Storm partitions and distributes the
    streams of tuples amongst tasks of bolts) provided by Storm. Streams are the basic
    wiring component of a Storm topology, and understanding them provides a lot of
    flexibility to the developer to handle various problems in programs efficiently.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要熟悉Storm提供的各种流分组（流分组基本上是定义Storm如何在bolt任务之间分区和分发元组流的机制），这为开发人员处理程序中的各种问题提供了很大的灵活性。
- en: Local or shuffle grouping
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本地或shuffle分组
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the following figure, shuffle grouping is depicted:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在下图中，显示了shuffle分组：
- en: '![Local or shuffle grouping](img/00022.jpeg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![本地或shuffle分组](img/00022.jpeg)'
- en: Here **Bolt A** and **Bolt B** both have a parallelism of two, each; so two
    instances of each of these bolts is spawned by the Storm framework. These bolts
    are wired together by *shuffle grouping*. We will now discuss the distribution
    of events.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，**Bolt A**和**Bolt B**都有两个并行度，因此Storm框架会生成每个这些bolt的两个实例。这些bolt通过*shuffle
    grouping*连接在一起。我们现在将讨论事件的分发。
- en: The 50 percent events from **Instance 1** of **Bolt A** would go to **Instance
    1** of **Bolt B**, and the remaining 50 percent would go to **Instance 2** of
    **Bolt B**. Similarly, 50 percent of events emitted by **Instance 2** of **Bolt
    B** would go to **Instance 1** of **Bolt B**, and the remaining 50 percent would
    go to **Instance 2** of **Bolt B**.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 来自**Bolt A**的**Instance 1**的50%事件将发送到**Bolt B**的**Instance 1**，剩下的50%将发送到**Bolt
    B**的**Instance 2**。同样，**Bolt B**的**Instance 2**发射的50%事件将发送到**Bolt B**的**Instance
    1**，剩下的50%将发送到**Bolt B**的**Instance 2**。
- en: Fields grouping
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字段分组
- en: In this grouping, we specify two parameters—the source of the stream and the
    fields. The values of the fields are actually used to control the routing of the
    tuples to various bolts. This grouping guarantees that for the same field's value,
    the tuple will always be routed to the same instance of the bolt.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种分组中，我们指定了两个参数——流的来源和字段。字段的值实际上用于控制元组路由到各种bolt的过程。这种分组保证了对于相同字段的值，元组将始终路由到同一个bolt的实例。
- en: In the following figure, field grouping is depicted between **Bolt A** and **Bolt
    B**, and each of these bolts have two instances each. Notice the flow of events
    based on the value of the field grouping parameter.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在下图中，**Bolt A**和**Bolt B**之间显示了字段分组，并且每个bolt都有两个实例。根据字段分组参数的值，注意事件的流动。
- en: '![Fields grouping](img/00023.jpeg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![字段分组](img/00023.jpeg)'
- en: All the events from **Instance 1** and **Instance 2** of **Bolt A**, where the
    value of **Field** is **P** are sent to **Instance 1** of **Bolt B**.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 来自**Bolt A**的**Instance 1**和**Instance 2**的所有事件，其中**Field**的值为**P**，都发送到**Bolt
    B**的**Instance 1**。
- en: All the events from **Instance 1** and **Instance 2** of **Bolt A**, where the
    value of **Field** is **Q** are sent to **Instance 2** of **Bolt B**.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 来自**Bolt A**的**Instance 1**和**Instance 2**的所有事件，其中**Field**的值为**Q**，都发送到**Bolt
    B**的**Instance 2**。
- en: All grouping
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 所有分组
- en: All grouping is a kind of broadcaster grouping that can be used in situations
    where the same message needs to be sent to all instances of the destination bolt.
    Here, each tuple is sent to all the instances of the bolt.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 所有分组是一种广播分组，可用于需要将相同消息发送到目标bolt的所有实例的情况。在这里，每个元组都发送到所有bolt的实例。
- en: 'This grouping should be used in very specific cases, for specific streams,
    where we want the same information to be replicated to all bolt instances downstream.
    Let''s take a use case that has some information related to a country and its
    currency value and the bolts following the bolt, which does need this information
    for some currency conversion. Now whenever *currency* bolt has any changes, it
    uses *all* grouping to publish it to all the instances of the following bolts:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这种分组应该在非常特定的情况下使用，针对特定的流，我们希望相同的信息被复制到所有下游的bolt实例中。让我们来看一个使用情况，其中包含与国家及其货币价值相关的一些信息，而后续的bolts需要这些信息进行货币转换。现在每当*currency*
    bolt有任何更改时，它使用*all*分组将其发布到所有后续bolts的实例中：
- en: '![All grouping](img/00024.jpeg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![所有分组](img/00024.jpeg)'
- en: Here we have a diagrammatic representation of *all* grouping, where all the
    tuples from **Bolt A** are sent to all the instances of **Bolt B**.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们有一个图解表示*所有*分组，其中来自**Bolt A**的所有元组都被发送到**Bolt B**的所有实例。
- en: Global grouping
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 全局分组
- en: 'Global grouping makes sure that the entire stream from the source component
    (spout or bolt) goes to a single instance of target bolt, to be more precise and
    specific to the instance of the target bolt with the lowest ID. Well let''s understand
    the concept with an example, let''s say my topology is as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 全局分组确保来自源组件（spout或bolt）的整个流都发送到目标bolt的单个实例，更准确地说是发送到具有最低ID的目标bolt实例。让我们通过一个例子来理解这个概念，假设我的拓扑如下：
- en: '![Global grouping](img/00025.jpeg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![全局分组](img/00025.jpeg)'
- en: 'I will assign the following parallelism to the components:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我将为组件分配以下并行性：
- en: '![Global grouping](img/00026.jpeg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![全局分组](img/00026.jpeg)'
- en: 'Also, I will use the following stream groupings:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，我将使用以下流分组：
- en: '![Global grouping](img/00027.jpeg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![全局分组](img/00027.jpeg)'
- en: 'Then, the framework will direct all data from the *myboltA* stream instances,
    that are emitting onto one instance of *myboltB* stream, which would be the one
    to which Storm has assigned a lower ID while instantiation:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，框架将所有来自*myboltA*流实例的数据，都发送到*myboltB*流的一个实例，这个实例是Storm在实例化时分配了较低ID的实例：
- en: '![Global grouping](img/00028.jpeg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![全局分组](img/00028.jpeg)'
- en: As in the preceding figure, in the case of global grouping, all tuples from
    both instances of **Bolt A** would go to **Instance 1** of **Bolt B**, assuming
    it has a lower ID than **Instance 2** of **Bolt B**.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如前图所示，在全局分组的情况下，来自**Bolt A**的两个实例的所有元组都会发送到**Bolt B**的**Instance 1**，假设它的ID比**Bolt
    B**的**Instance 2**的ID更低。
- en: Note
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Storm basically assigns IDs to each instance of a bolt or spout that it creates
    in the topology. In global grouping, the allocations are directed to the instance
    that has a lower value on the ID allocated from Storm.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Storm基本上为拓扑中创建的每个bolt或spout实例分配ID。在全局分组中，分配是指向从Storm分配的ID较低的实例。
- en: Custom grouping
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义分组
- en: Storm, being an extendible framework, provides the facility to developers to
    create their own stream grouping. This can be done by providing an implementation
    to the `backtype.storm.grouping.CustomStreamGroupinginterface` class.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Storm作为一个可扩展的框架，为开发人员提供了创建自己的流分组的功能。这可以通过为`backtype.storm.grouping.CustomStreamGroupinginterface`类提供实现来实现。
- en: Direct grouping
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 直接分组
- en: In this kind of grouping, the Storm framework provides the ability to the sender
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种分组中，Storm框架提供了发送者的能力
- en: component (spout or bolt) to decide which task of the consumer bolt would receive
    the tuple while the sender component is emitting a tuple to the stream.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 组件（spout或bolt）来决定消费者bolt的哪个任务会接收元组，而发送组件正在向流中发射元组。
- en: The tuple must be emitted to the stream using a special `emitDirect` method
    to the stream, and the task of consuming a component has to be specified (note
    that the tasked can be fetched using the `TopologyContext` method).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 必须使用特殊的`emitDirect`方法将元组发送到流中，并且必须指定消费组件的任务（注意可以使用`TopologyContext`方法获取任务）。
- en: Quiz time
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测验时间
- en: 'Q.1 State whether the following statements are true or false:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Q.1 判断以下陈述是真是假：
- en: All components of reliable topologies use anchoring.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可靠拓扑的所有组件都使用锚定。
- en: In the event of a failure, all the tuples are played back again.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在发生故障时，所有元组都会被重新播放。
- en: Shuffle grouping does load balancing.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Shuffle分组进行负载均衡。
- en: Global grouping is like a broadcaster.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 全局分组就像广播一样。
- en: 'Q.2 Fill in the blanks:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Q.2 填空：
- en: _______________ is the method to tell the framework that the tuple has been
    successfully processed.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: _______________是告诉框架元组已成功处理的方法。
- en: The _______________ method specifies the name of the stream.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: _______________方法指定流的名称。
- en: The ___________ method is used to push the tuple downstream in the DAG.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ___________方法用于将元组推送到DAG中的下游。
- en: Make changes to `WordCount` topology of the Storm-starter project to create
    a custom grouping so that all words starting from a particular letter always go
    to same instance of the `WordCount` bolt.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 对Storm-starter项目的`WordCount`拓扑进行更改，以创建自定义分组，使得以特定字母开头的所有单词始终发送到`WordCount` bolt的同一个实例。
- en: Summary
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have understood the intricacies of the Storm spout. We also
    created a custom file spout and integrated it with `WordCount` topology. We also
    introduced you to the concepts of reliability, acking, and anchoring. The knowledge
    of various groupings provided by the current version of Storm further enhance
    the capabilities of a user to explore and experiment.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经了解了Storm spout的复杂性。我们还创建了一个自定义文件spout，并将其与`WordCount`拓扑集成。我们还向您介绍了可靠性、确认和锚定的概念。当前版本的Storm提供的各种分组知识进一步增强了用户探索和实验的能力。
- en: In the next chapter, we shall get you acquainted with the clustered setup of
    Storm as well as give you an insight on various monitoring tools of clustered
    mode.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将让您熟悉Storm的集群设置，并为您提供有关集群模式的各种监控工具的见解。
