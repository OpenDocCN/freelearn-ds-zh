- en: '*Chapter 5*: Deploying Streamlit with Streamlit Sharing'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第 5 章*：使用 Streamlit Sharing 部署 Streamlit'
- en: So far in this book, we have focused on Streamlit app development, from creating
    complex visualizations to deploying and creating **machine learning** (**ML**)
    models. In this chapter, we will learn how to deploy these applications so they
    can be shared with anyone with internet access. This is a crucial part of Streamlit
    apps, as, without the ability to deploy a Streamlit app, the friction still exists
    for users or consumers of your work. If we believe that Streamlit removes the
    friction between creating data science analysis/products/models and sharing them
    with others, then we must also believe that the ability to widely share apps is
    just as crucial as the ease of development.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 迄今为止，本书主要关注 Streamlit 应用开发，从创建复杂的可视化到部署和构建 **机器学习**（**ML**）模型。本章将学习如何部署这些应用，以便它们可以与任何拥有互联网连接的人共享。这是
    Streamlit 应用的重要部分，因为如果没有部署 Streamlit 应用的能力，用户或你的作品消费者仍然会面临一定的使用障碍。如果我们认为 Streamlit
    消除了在创建数据科学分析/产品/模型与与他人共享它们之间的障碍，那么我们也必须相信，广泛共享应用的能力和开发的简便性同样重要。
- en: 'There are three main ways to deploy Streamlit apps: through a product created
    by Streamlit called *Streamlit Sharing*, through a cloud provider such as *Amazon
    Web Services* or *Heroku*, or through another product created by Streamlit called
    *Streamlit for Teams*. All three of these options are paid, but Streamlit Sharing
    has a free tier and Amazon Web Services regularly gives away free credit to students,
    first-time users, and start-ups, and Heroku has a free tier as well. The easiest
    and preferred method for most Streamlit users is Streamlit Sharing, so we will
    cover that directly here, and will cover Amazon Web Services, Heroku, and Streamlit
    for Teams later in this book, in [*Chapter 8*](B16864_08_Final_VK_ePub.xhtml#_idTextAnchor081),
    *Deploying Streamlit Apps with Heroku and AWS*, and [*Chapter 10*](B16864_10_Final_VK_ePub.xhtml#_idTextAnchor105),
    *The Data Project – Prototyping Projects in Streamlit*.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 部署 Streamlit 应用有三种主要方式：通过 Streamlit 创建的产品 *Streamlit Sharing*，通过云服务提供商如 *Amazon
    Web Services* 或 *Heroku*，或通过 Streamlit 创建的另一款产品 *Streamlit for Teams*。这三种方式都需要付费，但
    Streamlit Sharing 提供了免费版，而 Amazon Web Services 经常为学生、首次使用者和初创公司提供免费额度，Heroku 也有免费版。对于大多数
    Streamlit 用户来说，最简单和首选的方法是 Streamlit Sharing，因此我们将在此直接介绍该方法，并将在本书后续章节中，分别在[*第 8
    章*](B16864_08_Final_VK_ePub.xhtml#_idTextAnchor081)（*使用 Heroku 和 AWS 部署 Streamlit
    应用*）和[*第 10 章*](B16864_10_Final_VK_ePub.xhtml#_idTextAnchor105)（*数据项目 - 在 Streamlit
    中进行原型设计*）中介绍 Amazon Web Services、Heroku 和 Streamlit for Teams。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Getting started with Streamlit Sharing
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始使用 Streamlit Sharing
- en: A quick primer on GitHub
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub 简介
- en: Deploying with Streamlit Sharing
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Streamlit Sharing 部署
- en: Debugging Streamlit Sharing
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试 Streamlit Sharing
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This chapter requires access to Streamlit Sharing, which as of this writing
    is in beta. You can request Streamlit Sharing access at [https://streamlit.io/sharing-sign-up](https://streamlit.io/sharing-sign-up).
    They send out new admissions each week! If you are still waiting for Streamlit
    Sharing access and want to deploy an app immediately, feel free to move on to
    [*Chapter 8*](B16864_08_Final_VK_ePub.xhtml#_idTextAnchor081), *Deploying Streamlit
    Apps with Heroku and AWS*, where we deploy on AWS and Heroku.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章需要访问 Streamlit Sharing，截至目前它仍处于测试阶段。你可以在[https://streamlit.io/sharing-sign-up](https://streamlit.io/sharing-sign-up)申请
    Streamlit Sharing 访问权限。每周他们都会发放新的申请名额！如果你仍在等待 Streamlit Sharing 的访问权限，并且希望立即部署应用，可以继续阅读[*第
    8 章*](B16864_08_Final_VK_ePub.xhtml#_idTextAnchor081)，*使用 Heroku 和 AWS 部署 Streamlit
    应用*，在该章中我们将介绍如何在 AWS 和 Heroku 上部署。
- en: This chapter also requires a free GitHub account, which can be attained at [https://www.github.com](https://www.github.com).
    A full Primer on GitHub, along with detailed setup instructions, can be found
    in the section *A quick primer on GitHub* later in this chapter.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章还需要一个免费的 GitHub 账户，可以通过[https://www.github.com](https://www.github.com)进行注册。在本章稍后的*GitHub
    简介*部分，可以找到有关 GitHub 的完整介绍及详细设置说明。
- en: 'The code for this chapter can be found in the following GitHub repository:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码可以在以下 GitHub 仓库中找到：
- en: '[https://github.com/PacktPublishing/Getting-started-with-Streamlit-for-Data-Science](https://github.com/PacktPublishing/Getting-started-with-Streamlit-for-Data-Science'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Getting-started-with-Streamlit-for-Data-Science](https://github.com/PacktPublishing/Getting-started-with-Streamlit-for-Data-Science)'
- en: )
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: Getting started with Streamlit Sharing
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用 Streamlit Sharing
- en: Streamlit Sharing is Streamlit's answer to a fast deployment process and is
    certainly my first recommendation for deploying your Streamlit applications. I
    remember the first time I deployed an app on Streamlit Sharing, I thought that
    there was no way that it was all that simple. We only need to push our code to
    a Github repository, point Streamlit to said repository, and it takes care of
    the rest. There are times when we care about "the rest," such as when we want
    to configure the amount of storage space or memory available, but often, letting
    Streamlit Sharing handle deployment, resourcing, and link creation makes our development
    significantly easier.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Streamlit Sharing 是 Streamlit 对快速部署过程的解决方案，肯定是我部署 Streamlit 应用程序的首选方法。我记得第一次在
    Streamlit Sharing 上部署应用时，我觉得不可能这么简单。我们只需要将代码推送到 GitHub 仓库，指向该仓库，然后 Streamlit 会处理其余的工作。有时候我们需要关注“其余的部分”，比如当我们想要配置可用的存储空间或内存时，但通常情况下，允许
    Streamlit Sharing 处理部署、资源分配和链接创建会让我们的开发变得更加轻松。
- en: The goal here will be to take the Palmer's penguins ML app we have already created
    and deploy it using Streamlit Sharing. Before we get started, Streamlit Sharing
    runs using GitHub. If you are already familiar with Git and GitHub, feel free
    to skip over this section and make a GitHub repository with our `penguins_ml`
    folder.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的目标是将我们已经创建的 Palmer's penguins 机器学习应用程序部署到 Streamlit Sharing 上。在开始之前，Streamlit
    Sharing 依赖于 GitHub。如果你已经熟悉 Git 和 GitHub，可以跳过此部分，直接创建一个包含 `penguins_ml` 文件夹的 GitHub
    仓库。
- en: A quick primer on GitHub
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GitHub 快速入门
- en: GitHub, and the language Git, are collaboration tools for software engineers
    and data scientists that provide a framework for version control. We do not need
    to know everything about how they work to use Streamlit Sharing, but we do need
    to be able to create our own repositories (which act like shared folders) and
    update them as we update our applications. There are two options for dealing with
    Git and GitHub, via the command line and via a product called GitHub Desktop.
    Primarily in this book, so far, we have stayed on the command line, and this tutorial
    will stick there. However, if you would like to use GitHub Desktop instead, head
    over to [https://desktop.github.com](https://desktop.github.com) and follow along
    with the instructions provided there.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 和 Git 语言是为软件工程师和数据科学家提供协作工具，它们为版本控制提供框架。我们并不需要了解它们的所有工作原理就能使用 Streamlit
    Sharing，但我们确实需要能够创建自己的仓库（类似共享文件夹）并在更新应用时进行更新。处理 Git 和 GitHub 有两种方式，通过命令行和通过 GitHub
    Desktop。到目前为止，在本书中，我们主要使用命令行，本教程也将继续沿用此方法。然而，如果你更喜欢使用 GitHub Desktop，可以访问[https://desktop.github.com](https://desktop.github.com)并按照那里的说明操作。
- en: 'Now, use the following steps to get started with Git and GitHub on the command
    line:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用以下步骤在命令行中开始使用 Git 和 GitHub：
- en: First, go to [https://www.github.com](https://www.github.com) and make a free
    account there.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，前往 [https://www.github.com](https://www.github.com) 并在这里创建一个免费的账户。
- en: 'Then, we need to download the language Git onto our own computer and connect
    to our GitHub account with Git. We can do this on a Mac using `brew` in our terminal:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们需要将 Git 语言安装到本地计算机，并通过 Git 连接到我们的 GitHub 账户。我们可以在 Mac 上使用终端中的 `brew` 来完成这个操作：
- en: '[PRE0]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We are also going to want to set a global username and email in Git (if we
    haven''t already), which is recommended by GitHub. The following code sets these
    globally:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要在 Git 中设置一个全局用户名和电子邮件（如果我们还没有设置的话），GitHub 推荐这样做。以下代码将全局设置这些信息：
- en: '[PRE1]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now that we have our GitHub account, and we also have Git installed locally,
    we need to create our first repository! We already have our folder with the files
    that we need inside it, called `penguin_ml`, so we should make sure that is the
    working directory we are working in (if you aren''t sure, the command `pwd` will
    return our working directory). We are going to work with the final version of
    the `penguins_streamlit.py` app, which is shown with brief explanations for some
    context in the following code:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了 GitHub 账户，并且 Git 也已经本地安装好了，我们需要创建我们的第一个仓库！我们已经有了包含必要文件的文件夹，名为 `penguin_ml`，因此我们应该确保当前工作目录就是该文件夹（如果不确定，可以使用命令
    `pwd` 来查看当前工作目录）。我们将使用 `penguins_streamlit.py` 应用的最终版本，并在以下代码中简要说明一些背景信息：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This first section imports our libraries, sets up the titles for our app, and
    loads the model that we created using the `penguins_ml.py` file. This section
    will fail if we do not have the `random_forest_penguin.pickle` and `output_penguin.pickle`
    files. You can either go to [*Chapter 4*](B16864_04_Final_VK_ePub.xhtml#_idTextAnchor049),
    *Using Machine Learning with Streamlit*, to create these files or head over to
    [https://github.com/tylerjrichards/Getting-Started-with-Streamlit-for-Data-Science/tree/main/penguin_ml](https://github.com/tylerjrichards/Getting-Started-with-Streamlit-for-Data-Science/tree/main/penguin_ml)
    to find them directly:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 第一部分导入我们的库，设置应用的标题，并加载我们使用 `penguins_ml.py` 文件创建的模型。如果我们没有 `random_forest_penguin.pickle`
    和 `output_penguin.pickle` 文件，这部分会失败。你可以去[*第 4 章*](B16864_04_Final_VK_ePub.xhtml#_idTextAnchor049)，*使用
    Streamlit 进行机器学习*，来创建这些文件，或者直接访问[https://github.com/tylerjrichards/Getting-Started-with-Streamlit-for-Data-Science/tree/main/penguin_ml](https://github.com/tylerjrichards/Getting-Started-with-Streamlit-for-Data-Science/tree/main/penguin_ml)找到它们：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This next section grabs all the user input we need for our prediction, from
    the island the researcher is on to the sex of the penguin, to the penguin''s bill
    and flipper measurements, which prepares us for the predicting of the penguin
    species in the following code:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的部分会获取我们预测所需的所有用户输入，从研究员所在的岛屿到企鹅的性别，再到企鹅的喙和鳍的测量数据，这些都为我们在接下来的代码中预测企鹅的物种做准备：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'And now this final section creates multiple histograms to explain the prediction
    by the model, showing the bill length/bill depth/flipper length separated by the
    species in hue. We use those three variables because our feature importance graph
    told us those were the best predictors of species in [*Chapter 4*](B16864_04_Final_VK_ePub.xhtml#_idTextAnchor049),
    *Using Machine Learning with Streamlit*:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一部分创建了多个直方图，用以解释模型的预测，显示了按物种区分的喙长/喙深/鳍长数据。我们使用这三个变量，因为我们的特征重要性图告诉我们，这些是[*第
    4 章*](B16864_04_Final_VK_ePub.xhtml#_idTextAnchor049)，*使用 Streamlit 进行机器学习*中预测物种的最佳变量：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now that we are in the correct folder with the right files, we will use the
    following code to initialize our first repository, and to add and then commit
    all our files to the repository:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经进入了正确的文件夹并拥有了正确的文件，我们将使用以下代码来初始化我们的第一个仓库，并将所有文件添加并提交到仓库：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Our next step is to connect the Git repository on our local device to our GitHub
    account:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是将我们本地设备上的 Git 仓库连接到我们的 GitHub 账户：
- en: First, we need to set up a new repository by going back to the GitHub website
    and clicking the **New repository** button as shown in the following screenshot: ![Figure
    5.1 – Setting up a new repository
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要通过返回 GitHub 网站并点击**新建仓库**按钮来设置一个新仓库，如下图所示：![图 5.1 – 设置新仓库
- en: '](img/B16864_05_01.jpg)'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16864_05_01.jpg)'
- en: Figure 5.1 – Setting up a new repository
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.1 – 设置新仓库
- en: We can then fill out our repository name (`penguin_ml`), and click **Create
    repository**:![Figure 5.2 – Repo creation
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们可以填写我们的仓库名称（`penguin_ml`），并点击**创建仓库**：![图 5.2 – 仓库创建
- en: '](img/B16864_05_02.jpg)'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16864_05_02.jpg)'
- en: Figure 5.2 – Repo creation
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.2 – 仓库创建
- en: Now that we have a new repository on GitHub, and also a repository locally,
    we need to connect the two. The following code connects the two repositories and
    pushes our code to the GitHub repo, GitHub also suggests how to connect two repositories
    after you click `penguin_ml` files in our GitHub! If and when we have new code
    to push to our repository, we can follow the general format of using `git add
    .` to add the file changes, `git commit –m "commit message",` and then finally
    `git push` to push the changes to our repository.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们在 GitHub 上有了一个新仓库，并且本地也有一个仓库，我们需要将两者连接起来。以下代码将两个仓库连接并将我们的代码推送到 GitHub 仓库，GitHub
    还会在你点击 `penguin_ml` 文件时建议如何连接两个仓库！如果我们有新的代码需要推送到仓库，我们可以按照一般格式使用 `git add .` 来添加文件更改，`git
    commit –m "提交信息"`，然后最后使用 `git push` 将更改推送到仓库。
- en: We can now move on to the deployment process on the Streamlit side.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们可以进入 Streamlit 端的部署过程。
- en: Deploying with Streamlit Sharing
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Streamlit Sharing 进行部署
- en: 'Now that all our necessary files are in the GitHub repository, we have almost
    all that we need to deploy our application. You can use the following list of
    steps to deploy our application:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，所有必要的文件都已上传到 GitHub 仓库，我们几乎拥有了部署应用所需的一切。你可以按照以下步骤列表来部署我们的应用：
- en: 'When we deploy to Streamlit Sharing, Streamlit uses its own servers to host
    the app. Because of this, we need to explicitly tell Streamlit which Python libraries
    are required for our app to run. The following code installs a very helpful library
    called `pipreqs` and creates a `requirements.txt` file in the format we need for
    Streamlit:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们部署到 Streamlit Sharing 时，Streamlit 使用自己的服务器来托管应用。因此，我们需要明确告诉 Streamlit 我们的应用运行所需的
    Python 库。以下代码安装了一个非常有用的库，名为 `pipreqs`，并创建了一个符合 Streamlit 要求格式的 `requirements.txt`
    文件：
- en: '[PRE7]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: When we look at our `requirements.txt` file, we can see that `pipreqs` looked
    through all of our Python files and checked what we imported and used, and created
    a file that Streamlit can use to install the exact same versions of our libraries
    to prevent errors: ![Figure 5.3 – Requirements.txt
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们查看 `requirements.txt` 文件时，我们可以看到 `pipreqs` 检查了我们所有的 Python 文件，查看了我们导入和使用的库，并创建了一个文件，Streamlit
    可以使用它来安装我们库的相同版本，从而避免错误： ![图 5.3 – Requirements.txt
- en: '](img/B16864_05_03.jpg)'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16864_05_03.jpg)'
- en: Figure 5.3 – Requirements.txt
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.3 – Requirements.txt
- en: 'We have a new file, so we need to also add it to our GitHub repository. The
    following code adds `requirements.txt` to our repository:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们有了一个新文件，因此我们也需要将其添加到我们的 GitHub 仓库中。以下代码将 `requirements.txt` 添加到我们的仓库中：
- en: '[PRE8]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now, our last step is to sign up for Streamlit Sharing ([share.streamlit.io](http://share.streamlit.io))
    and click the `penguins_streamlit.py`. You should also change the username from
    my personal GitHub username (`tylerjrichards`) to your own: ![Figure 5.4 – Adding
    URLs
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们的最后一步是注册 Streamlit Sharing（[share.streamlit.io](http://share.streamlit.io)），并点击
    `penguins_streamlit.py`。你还应该将用户名从我的个人 GitHub 用户名（`tylerjrichards`）改为你自己的： ![图
    5.4 – 添加 URL
- en: '](img/B16864_05_04.jpg)'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16864_05_04.jpg)'
- en: '[PRE9]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, to push the change, we need to update our GitHub repository. We will do
    that using the following code:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，为了推送更改，我们需要更新我们的 GitHub 仓库。我们将使用以下代码来完成此操作：
- en: '[PRE10]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'When we go back to our app, your app will have its own unique URL. If you ever
    cannot find your Streamlit apps, you can always find them at [share.streamlit.io](http://share.streamlit.io).
    Now the top of our app should look like the following screenshot:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们返回到应用时，你的应用将拥有自己的唯一 URL。如果你无法找到你的 Streamlit 应用，可以随时在 [share.streamlit.io](http://share.streamlit.io)
    上找到它们。现在，我们应用的顶部应该像以下截图所示：
- en: '![Figure 5.5 – Our deployed Streamlit app'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 5.5 – 我们部署的 Streamlit 应用'
- en: '](img/B16864_05_05.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16864_05_05.jpg)'
- en: Figure 5.5 – Our deployed Streamlit app
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.5 – 我们部署的 Streamlit 应用
- en: Note
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: It may take a couple of minutes for the app to reload!
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 应用重新加载可能需要几分钟时间！
- en: Now we have a fully deployed Streamlit app! We can share this link with friends,
    with colleagues, or on social media sites such as Twitter (if you make an interesting
    Streamlit app with the help of this book, please tweet it at me *@tylerjrichards*,
    I would love to see it!). Now, to learn how to debug our Streamlit apps.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个完全部署的 Streamlit 应用！我们可以将这个链接分享给朋友、同事，或者在社交媒体上发布，例如 Twitter（如果你通过这本书做了一个有趣的
    Streamlit 应用，请在 Twitter 上@我 *@tylerjrichards*，我很想看看！）。现在，让我们学习如何调试我们的 Streamlit
    应用。
- en: Debugging Streamlit Sharing
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试 Streamlit Sharing
- en: Streamlit Sharing also gives us access to the logs of our apps themselves, which
    will show up on our terminal if we are deploying our apps locally. At the bottom
    right, whenever we are viewing our own applications, there is a **Manage Application**
    button, which allows us to access our logs. From this menu of options, we can
    reboot, delete, or download logs from our app, along with viewing our other available
    apps and logging out from Streamlit.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Streamlit Sharing 还让我们可以访问应用的日志，这些日志会显示在我们的终端上，如果我们是在本地部署应用的话。在右下角，每当我们查看自己的应用时，会有一个
    **管理应用** 按钮，允许我们访问日志。在这个选项菜单中，我们可以重启、删除或下载应用的日志，还可以查看其他可用的应用，并从 Streamlit 注销。
- en: Streamlit Secrets
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Streamlit 密钥
- en: When creating and deploying Streamlit apps, you may want to use some information
    that is not viewable by the user of your app. The default in Streamlit Sharing
    is for public GitHub repositories with entirely public code, data, and models.
    But if, say, you want to use a private API key as many APIs (for example, Twitter's
    scraping API, or the Google Maps API) require, or want to programmatically access
    data stored in a password protected database, or even if you would like to password
    protect your Streamlit app, you need a way to expose a bit of data to Streamlit
    that is private. Streamlit's answer to this is Streamlit Secrets, which lets us
    set hidden and private "secrets" in each app. Let's start with password protecting
    our Streamlit applications, specifically our existing penguin app.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建和部署 Streamlit 应用时，你可能希望使用一些用户无法查看的信息。在 Streamlit Sharing 中，默认情况下是公开 GitHub
    仓库，所有的代码、数据和模型都是公开的。但如果你想使用私密的 API 密钥（比如，许多 API（例如 Twitter 的抓取 API 或 Google Maps
    API）都需要此类密钥），或者希望以编程方式访问存储在受密码保护的数据库中的数据，甚至如果你想对你的 Streamlit 应用进行密码保护，你就需要一种方法，向
    Streamlit 暴露一些私密数据。Streamlit 的解决方案是 Streamlit Secrets，它允许我们在每个应用中设置隐藏的、私密的“秘密”。我们从给我们的
    Streamlit 应用设置密码保护开始，特别是我们现有的企鹅应用。
- en: 'To start out, we can edit the top of our app to require the user to enter a
    password before the rest of the application loads. We can use the `st.stop()`
    function to stop the app from running if the password is incorrect using the following
    code:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们可以编辑应用的顶部，要求用户在加载应用的其余部分之前输入密码。我们可以使用 `st.stop()` 函数，在密码错误时停止应用运行，代码如下：
- en: '[PRE11]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This code will result in the next screenshot, and the rest will only load if
    the user inputs the string `streamlit_password` in the text input box:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将生成下图，只有当用户在文本输入框中输入 `streamlit_password` 字符串时，应用的其余部分才会加载：
- en: '![Figure 5.6 – Password checker'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 5.6 – 密码检查器'
- en: '](img/B16864_05_06.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16864_05_06.jpg)'
- en: Figure 5.6 – Password checker
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.6 – 密码检查器
- en: 'To create a Streamlit Secret, we just need to head over to our Streamlit Sharing
    main page at [https://share.streamlit.io/](https://share.streamlit.io/), and click
    the **Edit secrets** option, as shown in the next screenshot:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建 Streamlit Secret，我们只需要访问 Streamlit Sharing 的主页 [https://share.streamlit.io/](https://share.streamlit.io/)，然后点击
    **编辑秘密** 选项，如下图所示：
- en: '![Figure 5.7 – Secrets'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 5.7 – 秘密'
- en: '](img/B16864_05_07.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16864_05_07.jpg)'
- en: Figure 5.7 – Secrets
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.7 – 秘密
- en: 'Once we click the **Edit secrets** button, we can add new Streamlit Secrets
    to our app:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦点击 **编辑秘密** 按钮，我们就可以向应用中添加新的 Streamlit Secrets：
- en: '![Figure 5.8 – Our first Streamlit Secret'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 5.8 – 我们的第一个 Streamlit Secret'
- en: '](img/B16864_05_08.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16864_05_08.jpg)'
- en: Figure 5.8 – Our first Streamlit Secret
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.8 – 我们的第一个 Streamlit Secret
- en: 'Our last step is to read Streamlit Secrets from our deployed app within our
    code, which we can do by calling `st.secrets` and calling the variable we created
    in Secrets. The following code replaces our hardcoded password with the Streamlit
    Secret:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的最后一步是从已部署的应用中读取 Streamlit Secrets，通过代码中调用 `st.secrets` 和我们在 Secrets 中创建的变量。以下代码用
    Streamlit Secret 替换了我们硬编码的密码：
- en: '[PRE12]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This code will create the following Streamlit app, password protected with
    the Streamlit Secret that we set:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将创建以下 Streamlit 应用，使用我们设置的 Streamlit Secret 进行密码保护：
- en: '![Figure 5.9 – Deployed password'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 5.9 – 部署的密码'
- en: '](img/B16864_05_09.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16864_05_09.jpg)'
- en: Figure 5.9 – Deployed password
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.9 – 部署的密码
- en: When we push this code to our GitHub repository and reboot our Streamlit app,
    we will then have a password-protected Streamlit app deployed on Streamlit Sharing!
    We can use this same method for private API keys, or any other use case where
    we need to hide data from the user of the app.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将这段代码推送到 GitHub 仓库并重新启动我们的 Streamlit 应用时，我们将在 Streamlit Sharing 上部署一个受密码保护的
    Streamlit 应用！我们可以使用相同的方法来处理私密的 API 密钥，或者任何其他需要隐藏数据的应用场景。
- en: Summary
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we've learned how to get started with Git and GitHub on the
    command line, how to debug apps on Streamlit Sharing, how to use Streamlit Secrets
    to use private data on public apps, and how to deploy our apps quickly using Streamlit
    Sharing. This completes part one of this book! Congratulations for making it to
    this point. The next section will use all of part one as a building block for
    more advanced topics such as more complicated formatting and beautification of
    our Streamlit apps and using valuable open source community-built add-ons called
    Streamlit components.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何在命令行中使用 Git 和 GitHub，如何在 Streamlit Sharing 上调试应用程序，如何使用 Streamlit
    Secrets 在公共应用中使用私密数据，以及如何通过 Streamlit Sharing 快速部署我们的应用程序。这完成了本书的第一部分！恭喜你坚持到这一点。下一部分将以第一部分为基础，讲解更高级的主题，例如更复杂的格式化、Streamlit
    应用的美化以及使用由开源社区构建的宝贵附加组件——Streamlit 组件。
- en: In the next chapter, we will cover beautifying Streamlit apps through themes,
    columns, and many more features.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将通过主题、列以及更多功能来讲解如何美化 Streamlit 应用。
