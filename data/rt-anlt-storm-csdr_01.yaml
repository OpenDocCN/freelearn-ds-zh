- en: Chapter 1. Let's Understand Storm
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章 让我们了解风暴
- en: In this chapter, you will be acquainted with the problems requiring distributed
    computed solutions and get to know how complex it could get to create and manage
    such solutions. We will look at the options available to solve distributed computation.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将熟悉需要分布式计算解决方案的问题，并了解创建和管理此类解决方案可能变得多么复杂。我们将研究解决分布式计算的可用选项。
- en: 'The topics that will be covered in the chapter are as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Getting acquainted with a few problems that require distributed computing solutions
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 熟悉需要分布式计算解决方案的一些问题
- en: The complexity of existing solutions
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现有解决方案的复杂性
- en: Technologies offering real-time distributed computing
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供实时分布式计算的技术
- en: A high-level view of the various components of Storm
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对Storm各个组件的高层次视图
- en: A quick peek into the internals of Storm
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 飞机通信寻址和报告系统的内部快速查看
- en: By the end of the chapter, you will be able to understand the real-time scenarios
    and applications of Apache Storm. You should be aware of solutions available in
    the market and reasons as to why Storm is still the best open source choice.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，您将能够了解Apache Storm的实时场景和应用。您应该了解市场上提供的解决方案以及Storm仍然是最佳开源选择的原因。
- en: Distributed computing problems
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分布式计算问题
- en: Let's dive deep and identify some of the problems that require distributed solutions.
    In the world we live in today, we are so attuned to the power of now and that's
    the paradigm that generated the need for distributed real-time computing. Sectors
    such as banking, healthcare, automotive manufacturing, and so on are hubs where
    real-time computing can either optimize or enhance the solutions.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解一些需要分布式解决方案的问题。在我们今天生活的世界中，我们对现在的力量如此敏感，这就产生了分布式实时计算的需求。银行、医疗保健、汽车制造等领域是实时计算可以优化或增强解决方案的中心。
- en: Real-time business solution for credit or debit card fraud detection
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实时商业解决方案，用于信用卡或借记卡欺诈检测
- en: 'Let''s get acquainted with the problem depicted in the following figure; when
    we make any transaction using plastic money and swipe our debit or credit card
    for payment, the duration within which the bank has to validate or reject the
    transaction is less than five seconds. In less than five seconds, data or transaction
    details have to be encrypted, travel over secure network from servicing back bank
    to the issuing bank, then at the issuing back bank the entire fuzzy logic for
    acceptance or decline of the transaction has to be computed, and the result has
    to travel back over the secure network:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们熟悉以下图中描述的问题；当我们使用塑料货币进行任何交易并刷卡进行付款时，银行必须在五秒内验证或拒绝交易。在不到五秒的时间内，数据或交易细节必须加密，通过安全网络从服务银行到发卡银行，然后在发卡银行计算交易的接受或拒绝的整个模糊逻辑，并且结果必须通过安全网络返回。
- en: '![Real-time business solution for credit or debit card fraud detection](img/00002.jpeg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: 实时商业解决方案，用于信用卡或借记卡欺诈检测
- en: Real-time credit card fraud detection
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 实时信用卡欺诈检测
- en: The challenges such as network latency and delay can be optimized to some extent,
    but to achieve the preceding featuring transaction in less than 5 seconds, one
    has to design an application that is able to churn a considerable amount of data
    and generate results within 1 to 2 seconds.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 挑战，如网络延迟和延迟，可以在一定程度上进行优化，但要在5秒内实现前述特性交易，必须设计一个能够处理大量数据并在1到2秒内生成结果的应用程序。
- en: Aircraft Communications Addressing and Reporting system
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 飞机通信寻址和报告系统
- en: The **Aircraft Communications Addressing and Reporting** system (**ACAR**) demonstrates
    another typical use case that cannot be implemented without having a reliable
    real-time processing system in place. These Aircraft communication systems use
    **satellite communication** (**SATCOM**), and as per the following figure, they
    gather voice and packet data from all phases of flight in real time and are able
    to generate analytics and alerts on the data in real time.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 飞机通信寻址和报告系统（ACAR）展示了另一个典型的用例，如果没有可靠的实时处理系统，就无法实现。这些飞机通信系统使用卫星通信（SATCOM），根据以下图，它们实时收集来自飞行各个阶段的语音和数据包数据，并能够实时生成分析和警报。
- en: '![Aircraft Communications Addressing and Reporting system](img/00003.jpeg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: 飞机通信寻址和报告系统
- en: Let's take the example from the figure in the preceding case. A flight encounters
    some real hazardous weather, say, electric Storms on a route, then that information
    is sent through satellite links and voice or data gateways to the air controller,
    which in real time detects and raises the alerts to deviate routes for all other
    flights passing through that area.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以前述案例中的图为例。飞行遭遇一些真正危险的天气，比如航线上的电暴，然后通过卫星链路和语音或数据网关将该信息发送给空中管制员，后者实时检测并发出警报，以便所有通过该区域的其他航班改变航线。
- en: Healthcare
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 医疗保健
- en: Here, let's introduce you to another problem on healthcare.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，让我们向您介绍医疗保健的另一个问题。
- en: This is another very important domain where real-time analytics over high volume
    and velocity data has equipped the healthcare professionals with accurate and
    exact information in real time to take informed life-saving actions.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一个非常重要的领域，实时分析高容量和速度数据，为医疗保健专业人员提供准确和精确的实时信息，以采取知情的挽救生命行动。
- en: '![Healthcare](img/00004.jpeg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: 医疗保健
- en: The preceding figure depicts the use case where doctors can take informed action
    to handle the medical situation of the patients. Data is collated from historic
    patient databases, drug databases, and patient records. Once the data is collected,
    it is processed, and live statistics and key parameters of the patient are plotted
    against the same collated data. This data can be used to further generate reports
    and alerts to aid the health care professionals.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图表描述了医生可以采取明智行动来处理患者的医疗情况的用例。数据来自历史患者数据库、药物数据库和患者记录。一旦数据被收集，它就被处理，患者的实时统计数据和关键参数被绘制到相同的汇总数据上。这些数据可以用来进一步生成报告和警报，以帮助医护人员。
- en: Other applications
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他应用
- en: 'There are varieties of other applications where the power of real-time computing
    can either optimize or help people make informed decisions. It has become a great
    utility and aid in the following industries:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 还有各种其他应用，实时计算的力量可以优化或帮助人们做出明智的决定。它已成为以下行业的重要工具和辅助：
- en: '**Manufacturing**: A real-time defect detection mechanism can help optimize
    production costs. Generally, in the manufacturing segment QC is performed postproduction
    and there, due to one similar defect in goods, entire lot is rejected.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**制造业**：实时的缺陷检测机制可以帮助优化生产成本。通常，在制造业领域，质量控制是在生产后进行的，由于货物中存在类似的缺陷，整批货物就会被拒绝。'
- en: '**Transportation industry**: Based on real-time traffic and weather data, transport
    companies can optimize their trade routes and save time and money.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**交通运输行业**：基于实时交通和天气数据，运输公司可以优化其贸易路线，节省时间和金钱。'
- en: '**Network optimization**: Based on real-time network usage alerts, companies
    can design auto scale up and auto scale down systems for peak and off-peak hours.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络优化**：基于实时网络使用警报，公司可以设计自动扩展和自动缩减系统，以适应高峰和低谷时段。'
- en: Solutions for complex distributed use cases
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复杂分布式用例的解决方案
- en: Now that we understand the power that real-time solutions can get into various
    industry verticals, let's explore and find out what options we have to process
    vast amount of data being generated at a very fast pace.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了实时解决方案可以在各个行业垂直领域发挥的作用，让我们探索并找出我们在处理大量数据时产生的各种选择。
- en: The Hadoop solution
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Hadoop解决方案
- en: The Hadoop solution is one of the solutions to solve the problems that require
    dealing with humongous volumes of data. It works by executing jobs in a clustered
    setup.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Hadoop解决方案是解决需要处理海量数据问题的解决方案之一。它通过在集群设置中执行作业来工作。
- en: MapReduce is a programming paradigm where we process large data sets by using
    a mapper function that processes a key and value pair and thus generates intermediate
    output again in the form of a key-value pair. Then a reduce function operates
    on the mapper output and merges the values associated with the same intermediate
    key and generates a result.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: MapReduce是一种编程范例，我们通过使用一个处理键和值对的mapper函数来处理大数据集，从而生成中间输出，再次以键值对的形式。然后，减速函数对mapper输出进行操作，并合并与相同中间键相关联的值，并生成结果。
- en: '![The Hadoop solution](img/00005.jpeg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![Hadoop解决方案](img/00005.jpeg)'
- en: 'In the preceding figure, we demonstrate the simple word count MapReduce job
    where the simple word count job is being demonstrated using the MapReduce where:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图中，我们演示了简单的单词计数MapReduce作业，其中使用MapReduce演示了简单的单词计数作业，其中：
- en: There is a huge Big Data store, which can go up to zettabytes or petabytes.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有一个巨大的大数据存储，可以达到赫兹或皮字节。
- en: Input datasets or files are split into blocks of configured size and each block
    is replicated onto multiple nodes in the Hadoop cluster depending upon the replication
    factor.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入数据集或文件被分割成配置大小的块，并根据复制因子在Hadoop集群中的多个节点上复制每个块。
- en: Each mapper job counts the number of words on the data blocks allocated to it.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个mapper作业计算分配给它的数据块上的单词数。
- en: Once the mapper is done, the words (which are actually the keys) and their counts
    are stored in a local file on the mapper node. The reducer then starts the reduce
    function and thus generates the result.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦mapper完成，单词（实际上是键）及其计数存储在mapper节点上的本地文件中。然后，减速器启动减速功能，从而生成结果。
- en: Reducers combine the mapper output and the final results are generated.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Reducer将mapper输出合并，生成最终结果。
- en: Big data, as we know, did provide a solution to processing and generating results
    out of humongous volumes of data, but that's predominantly a batch processing
    system and has almost no utility on a real-time use case.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 大数据，正如我们所知，确实提供了一种处理和生成结果的解决方案，但这主要是一个批处理系统，在实时使用情况下几乎没有用处。
- en: A custom solution
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个定制的解决方案
- en: 'Here we talk about a solution that was used in the social media world before
    we had a scalable framework such as Storm. A simplistic version of the problem
    could be that you need a real-time count of the tweets by each user; Twitter solved
    the problem by following the mechanism shown in the figure:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们谈论的是在我们拥有可扩展框架（如Storm）之前在社交媒体世界中使用的解决方案。问题的一个简化版本可能是，您需要实时统计每个用户的推文数量；Twitter通过遵循图中显示的机制解决了这个问题：
- en: '![A custom solution](img/00006.jpeg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![一个定制的解决方案](img/00006.jpeg)'
- en: 'Here is the detailed information of how the preceding mechanism works:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前述机制的详细信息：
- en: A custom solution created a fire hose or queue onto which all the tweets are
    pushed.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个定制的解决方案创建了一个消防软管或队列，所有推文都被推送到这个队列上。
- en: A set of workers' nodes read data from the queue, parse the messages, and maintain
    counts of tweets by each user. The solution is scalable, as we can increase the
    number of workers to handle more load in the system. But the sharding algorithm
    for random distribution of the data among these workers nodes' should ensure equal
    distribution of data to all workers.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一组工作节点从队列中读取数据，解析消息，并维护每个用户的推文计数。该解决方案是可扩展的，因为我们可以增加工作人员的数量来处理系统中的更多负载。但是，用于将数据随机分布在这些工作节点中的分片算法应该确保数据均匀分布给所有工作节点。
- en: These workers assimilate this first level count into the next set of queues.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些工作人员将第一级计数合并到下一组队列中。
- en: From these queues (the ones mentioned at level 1) second level of workers pick
    from these queues. Here, the data distribution among these workers is neither
    equal, nor random. The load balancing or the sharding logic has to ensure that
    tweets from the same user should always go to the same worker, to get the correct
    counts. For example, lets assume we have different users— "A, K, M, P, R, and
    L" and we have two workers "worker A" and "worker B". The tweets from user "A,
    K, and M" always goes to "worker A", and those of "P, R, and L users" goes to
    "worker B"; so the tweet counts for "A, K, and M" are always maintained by "worker
    A". Finally, these counts are dumped into the data store.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从这些队列（在第1级提到的队列）中，第二级工作人员从这些队列中挑选。在这里，这些工作人员之间的数据分布既不均匀，也不随机。负载平衡或分片逻辑必须确保来自同一用户的推文始终应该发送到同一个工作人员，以获得正确的计数。例如，假设我们有不同的用户——"A、K、M、P、R和L"，我们有两个工作人员"工作人员A"和"工作人员B"。来自用户"A、K和M"的推文总是发送到"工作人员A"，而来自"P、R和L用户"的推文发送到"工作人员B"；因此"A、K和M"的推文计数始终由"工作人员A"维护。最后，这些计数被转储到数据存储中。
- en: 'The queue-worker solution described in the preceding points works fine for
    our specific use case, but it has the following serious limitations:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的点中描述的队列工作解决方案对我们的特定用例效果很好，但它有以下严重的限制：
- en: It's very complex and specific to the use case
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是非常复杂的，具体到使用情况
- en: Redeployment and reconfiguration is a huge task
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新部署和重新配置是一项巨大的任务
- en: Scaling is very tedious
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展非常繁琐
- en: The system is not fault tolerant
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统不具备容错性
- en: Licensed proprietary solutions
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 有许可的专有解决方案
- en: After an open source Hadoop and custom Queue-worker solution, let's discuss
    the licensed options' proprietary solutions in the market to cater to the distributed
    real-time processing needs.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在开源Hadoop和自定义队列工作解决方案之后，让我们讨论市场上的有许可选项的专有解决方案，以满足分布式实时处理的需求。
- en: 'The **Alabama Occupational Therapy Association** (**ALOTA**) of big companies
    has invested in such products, because they clearly see where the future of computing
    is moving to. They can foresee demands of such solutions and support them in almost
    every vertical and domain. They have developed such solutions and products that
    let us do complex batch and real-time computing but that comes at a heavy license
    cost. A few solutions to name are from companies such as:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 大公司的**阿拉巴马州职业治疗协会**（**ALOTA**）已经投资于这类产品，因为他们清楚地看到计算的未来发展方向。他们可以预见到这类解决方案的需求，并在几乎每个垂直领域支持它们。他们已经开发了这样的解决方案和产品，让我们进行复杂的批处理和实时计算，但这需要付出沉重的许可成本。一些公司的解决方案包括：
- en: '**IBM**: IBM has developed InfoSphere Streams for real-time ingestion, analysis,
    and correlation of data.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**IBM**：IBM开发了InfoSphere Streams，用于实时摄入、分析和数据相关性。'
- en: '**Oracle**: Oracle has a product called **Real Time Decisions** (**RTD**) that
    provides analysis, machine learning, and predictions in real-time context'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Oracle**：Oracle有一个名为**实时决策**（**RTD**）的产品，提供实时环境下的分析、机器学习和预测'
- en: '**GigaSpaces**: GigaSpaces has come up with a product called **XAP** that provides
    in-memory computation to deliver real-time results'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GigaSpaces**：GigaSpaces推出了一个名为**XAP**的产品，提供内存计算以提供实时结果'
- en: Other real-time processing tools
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他实时处理工具
- en: There are few other technologies that have some similar traits and features
    such as Apache Storm and S4 from Yahoo, but it lacks guaranteed processing. Spark
    is essentially a batch processing system with some features on micro-batching,
    which could be utilized as real time.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些其他技术具有一些类似的特征和功能，如雅虎的Apache Storm和S4，但它缺乏保证处理。Spark本质上是一个批处理系统，具有一些微批处理的功能，可以用作实时处理。
- en: A high-level view of various components of Storm
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Storm各个组件的高级视图
- en: In this section, we will get you acquainted with various components of Storm,
    their role, and their distribution in a Storm cluster.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将让您了解Storm的各个组件，它们的作用以及它们在Storm集群中的分布。
- en: 'A Storm cluster has three sets of nodes (which could be co-located, but are
    generally distributed in clusters), which are as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Storm集群有三组节点（可以共同定位，但通常分布在集群中），分别是：
- en: Nimbus
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Nimbus
- en: Zookeeper
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Zookeeper
- en: Supervisor
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监督者
- en: 'The following figure shows the integration hierarchy of these nodes:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图显示了这些节点的集成层次结构：
- en: '![A high-level view of various components of Storm](img/00007.jpeg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![Storm各个组件的高级视图](img/00007.jpeg)'
- en: 'The detailed explanation of the integration hierarchy is as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 集成层次结构的详细解释如下：
- en: '**Nimbus node** (master node, similar to Hadoop-JobTracker): This is the heart
    of the Storm cluster. You can say that this is the master daemon process that
    is responsible for the following:'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Nimbus节点**（类似于Hadoop-JobTracker的主节点）：这是Storm集群的核心。你可以说这是负责以下工作的主要守护进程：'
- en: Uploading and distributing various tasks across the cluster
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上传和分发各种任务到集群中
- en: Uploading and distributing the topology jars jobs across various supervisors
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上传和分发拓扑JAR作业到各个监督者
- en: Launching workers as per ports allocated on the supervisor nodes
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据分配给监督者节点的端口启动工作人员
- en: Monitoring the topology execution and reallocating workers whenever necessary
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监视拓扑执行并在必要时重新分配工作人员
- en: Storm UI is also executed on the same node
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Storm UI也在同一节点上执行
- en: '**Zookeeper nodes**: Zookeepers can be designated as the bookkeepers in the
    Storm cluster. Once the topology job is submitted and distributed from the Nimbus
    nodes, then even if Nimbus dies the topology would continue to execute because
    as long as Zookeepers are alive, the workable state is maintained and logged by
    them. The main responsibility of this component is to maintain the operational
    state of the cluster and restore the operational state if recovery is required
    from some failure. It''s the coordinator for the Storm cluster.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Zookeeper节点**：Zookeeper可以被指定为Storm集群中的簿记员。一旦拓扑作业从Nimbus节点提交并分发，即使Nimbus死亡，拓扑也会继续执行，因为只要Zookeeper还活着，可工作状态就会被它们维护和记录。这个组件的主要责任是维护集群的运行状态，并在需要从某些故障中恢复时恢复运行状态。它是Storm集群的协调者。'
- en: '**Supervisor nodes**: These are the main processing chambers in the Storm topology;
    all the action happens in here. These are daemon processes that listen and manage
    the work assigned. These communicates with Nimbus through Zookeeper and starts
    and stops workers according to signals from Nimbus.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监督者节点**：这些是Storm拓扑中的主要处理室；所有操作都在这里进行。这些是守护进程，通过Zookeeper与Nimbus通信，并根据Nimbus的信号启动和停止工作进程。'
- en: Delving into the internals of Storm
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入了解Storm的内部
- en: 'Now that we know which physical components are present in a Storm cluster,
    let''s understand what happens inside various Storm components when a topology
    is submitted. When we say topology submission, it means that we have submitted
    a distributed job to Storm Nimbus for execution over the cluster of supervisors.
    In this section, we will explain the various steps that are executed in various
    Storm components when a Storm topology is executed:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了Storm集群中存在哪些物理组件，让我们了解拓扑提交时各种Storm组件内部发生了什么。当我们说拓扑提交时，意味着我们已经向Storm Nimbus提交了一个分布式作业，以在监督者集群上执行。在本节中，我们将解释Storm拓扑在各种Storm组件中执行时所执行的各种步骤：
- en: Topology is submitted on the Nimbus node.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拓扑被提交到Nimbus节点。
- en: Nimbus uploads the code jars on all the supervisors and instructs the supervisors
    to launch workers as per the `NumWorker` configuration or the `TOPOLOGY_WORKERS`
    configuration defined in Storm.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Nimbus在所有监督者上上传代码jar，并指示监督者根据Storm中定义的`NumWorker`配置或`TOPOLOGY_WORKERS`配置启动工作进程。
- en: During the same duration all the Storm nodes (Nimbus and Supervisors) constantly
    co-ordinate with the Zookeeper clusters to maintain a log of workers and their
    activities.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在同一时间段内，所有Storm节点（Nimbus和监督者）不断与Zookeeper集群协调，以维护工作进程及其活动的日志。
- en: 'As per the following figure, we have depicted the topology and distribution
    of the topology components, which are the same across clusters:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 根据以下图，我们已经描述了拓扑结构和拓扑组件的分布，这在所有集群中都是相同的：
- en: '![Delving into the internals of Storm](img/00008.jpeg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![深入了解Storm的内部](img/00008.jpeg)'
- en: In our case, let's assume that our cluster constitutes of one Nimbus node, three
    Zookeepers in a Zookeeper cluster, and one supervisor node.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，假设我们的集群由一个Nimbus节点、一个Zookeeper集群中的三个Zookeeper和一个监督者节点组成。
- en: By default, we have four slots allocated to each supervisor, so four workers
    would be launched per Storm supervisor node unless the configuration is tweaked.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，每个监督者分配了四个插槽，因此每个Storm监督者节点将启动四个工作进程，除非进行了配置调整。
- en: Let's assume that the depicted topology is allocated four workers, and it has
    two bolts each with a parallelism of two and one spout with a parallelism of four.
    So in total, we have eight tasks to be distributed across four workers.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 假设所描述的拓扑分配了四个工作进程，并且每个工作进程都有两个并行度的螺栓和一个并行度为四的喷口。因此，总共有八个任务要分配到四个工作进程中。
- en: 'So this is how the topology would be executed: two workers on each supervisor
    and two executors within each worker, as shown in the following figure:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，拓扑将被执行为：每个监督者上有两个工作进程，每个工作进程内有两个执行器，如下图所示：
- en: '![Delving into the internals of Storm](img/00009.jpeg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![深入了解Storm的内部](img/00009.jpeg)'
- en: Quiz time
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测验时间
- en: 'Q.1\. Try to phrase a problem statement around real-time analytics in the following
    domains:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Q.1 尝试围绕以下领域的实时分析提出一个问题陈述：
- en: Network optimization
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络优化
- en: Traffic management
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 流量管理
- en: Remote sensing
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 远程感知
- en: Summary
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you have understood the need for distributed computing by exploring
    various use cases in different verticals and domains. We have also walked you
    through various solutions to handle these problems and why Storm is the best choice
    in the open source world. You have also been introduced to Storm components and
    the action behind the scenes when these components are at work.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您已经通过探索不同垂直领域和领域中的各种用例，了解了分布式计算的需求。我们还向您介绍了处理这些问题的各种解决方案，以及为什么Storm是开源世界中的最佳选择。您还了解了Storm组件以及这些组件在工作时的内部操作。
- en: In the next chapter, we will walk through the setup aspects and you will get
    familiarized with programming structures in Storm by simple topologies.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍设置方面，并通过简单的拓扑使您熟悉Storm中的编程结构。
