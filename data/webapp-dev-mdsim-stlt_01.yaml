- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Getting to Know Streamlit – A Brief Overview
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解 Streamlit —— 简介
- en: Streamlit is a Python library that allows developers to quickly create interactive
    web applications with plottings, widgets, themes, and more. It provides an intuitive
    and easy-to-use interface that makes it simple to create custom web apps with
    minimal coding effort. It offers a range of built-in widgets and components, such
    as sliders, dropdowns, and text inputs, that can be used to create interactive
    visualizations and dashboards. The library also supports real-time data updates
    and even integrates with popular data science tools, such as pandas, Matplotlib,
    and TensorFlow.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Streamlit 是一个 Python 库，允许开发者快速创建互动式 Web 应用程序，支持绘图、控件、主题等功能。它提供了一个直观且易于使用的界面，使得创建自定义
    Web 应用程序变得简单，并且只需最少的编码工作。它提供了一系列内置的控件和组件，如滑块、下拉框和文本输入框，可用于创建互动式可视化和仪表盘。该库还支持实时数据更新，并且能够与流行的数据科学工具集成，如
    pandas、Matplotlib 和 TensorFlow。
- en: Compared to other Python libraries for creating web apps, such as Flask and
    Django, Streamlit focuses on providing an intuitive interface for creating interactive
    visualizations and dashboards in a very simple and fast way. Flask and Django
    are more general-purpose web frameworks that can be used for a wider range of
    web applications, but they require more coding effort to set up and customize.
    Streamlit is designed to be used primarily for prototyping and creating small
    to medium-sized web apps and makes it possible to speed up the development process,
    enabling programmers to share their results with others in a user-friendly and
    engaging way.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他 Python Web 应用程序库（如 Flask 和 Django）相比，Streamlit 更注重提供一个直观的界面，用以以简单且快速的方式创建互动式可视化和仪表盘。Flask
    和 Django 是更通用的 Web 框架，适用于更广泛的 Web 应用程序，但它们需要更多的编码工作来设置和定制。Streamlit 主要用于原型制作和创建小型至中型
    Web 应用程序，它使得加速开发过程成为可能，帮助程序员以用户友好和引人入胜的方式与他人分享成果。
- en: In this chapter, we will first understand the changing scenario in computing
    methods and cover some key benefits of web applications. Next, we will understand
    the importance of a Python web framework. After that, we will focus on understanding
    when to use a local approach and when to work on the cloud. Then, we will learn
    about some very interesting capabilities of Streamlit. Finally, we will emphasize
    the importance of turning ideas into prototypes.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将首先了解计算方法的变化，并介绍 Web 应用程序的一些关键优势。接下来，我们将了解 Python Web 框架的重要性。之后，我们将重点讨论何时使用本地方法，何时使用云计算。然后，我们将学习
    Streamlit 的一些非常有趣的功能。最后，我们将强调将创意转化为原型的重要性。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要内容：
- en: The changing scenario in computing methods
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算方法的变化
- en: The importance of a full Python web framework
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完整 Python Web 框架的重要性
- en: Local versus the cloud
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本地与云计算
- en: Python libraries for web applications (Flask and Django)
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于 Web 应用程序的 Python 库（Flask 和 Django）
- en: Examples of Streamlit’s capabilities
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Streamlit 功能的示例
- en: The importance of turning an idea into a prototype – the changing scenario in
    computing methods
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将创意转化为原型的重要性 —— 计算方法的变化
- en: Computing has advanced dramatically over the past few decades. Earlier systems
    relied on programs that were installed and run on individual personal computers.
    Users would purchase software licenses, install the programs themselves, and then
    access those applications from their desktops. If you wanted to use an application
    on another computer, you had to install it there as well.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 计算在过去几十年中取得了巨大进展。早期的系统依赖于在个人计算机上安装和运行的程序。用户购买软件许可证，自行安装程序，然后从桌面访问这些应用程序。如果你想在另一台计算机上使用某个应用程序，你也需要在那里安装它。
- en: This model dominated computing for many years but was limited and static. It
    lacked interconnectivity and did not facilitate true collaboration or data sharing
    across machines. Users were confined to the specific software they installed locally
    and had to manage separate copies of files and settings on each computer they
    used.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这种模型主导了计算领域多年，但其局限性明显且静态。它缺乏互联互通，不促进机器之间的真实协作或数据共享。用户只能使用自己本地安装的特定软件，并且需要在每台计算机上管理独立的文件和设置副本。
- en: The rise of networks, improved connectivity, and the early internet started
    to change this. New possibilities emerged for distributed software, real-time
    collaboration, and synchronized information across devices. Users no longer had
    to install and manage many duplicate software installations. Applications could
    be accessed from anywhere with an internet connection.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 网络的崛起、改进的连接性以及早期互联网的出现开始改变这一局面。分布式软件、实时协作以及跨设备同步信息的新可能性不断涌现。用户不再需要安装和管理多个重复的软件。应用程序可以从任何有互联网连接的地方访问。
- en: Web-based services fueled this transition and accelerated the move to more cloud-centric
    and mobile-friendly computing. Apps began to launch directly in web browsers instead
    of requiring installation. Data and files could be stored in central cloud platforms
    instead of locally, and new devices such as smartphones, tablets, and laptops
    made the cloud and web even more compelling.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 基于Web的服务推动了这一转变，加速了向更以云为中心、支持移动设备的计算方式的过渡。应用程序开始直接在Web浏览器中启动，而不再需要安装。数据和文件可以存储在中央云平台中，而不是本地存储，新设备如智能手机、平板电脑和笔记本电脑使得云计算和Web更加具有吸引力。
- en: People now live their digital lives in the cloud through web-based services,
    mobile apps, and cloud platforms. Everything from business software, media, productivity
    tools, educational resources, and more now have predominantly cloud-based and
    web-centered counterparts. The cloud provides ubiquitous access across any connected
    device, constant integration and interoperability between services, automatic
    updates, scalable resources, collaboration features, mobile optimization, and
    cost benefits.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，人们的数字生活通过Web服务、移动应用程序和云平台在云端进行。从商业软件、媒体、生产力工具、教育资源到更多领域，几乎所有的内容现在都有以云为基础和Web为中心的替代品。云计算提供了在任何连接设备上的无处不在的访问，服务间的持续集成和互操作性，自动更新、可扩展的资源、协作功能、移动优化和成本效益。
- en: Local software is still used in some contexts but is increasingly viewed as
    limited or outdated. The transition to the cloud and web computing has been rapid
    and enormously impactful. It has reshaped how we work, learn, play, communicate,
    consume media, and more. And this transformation will likely only accelerate as
    enhanced AI technologies, IoT devices, VR/AR systems, and other innovations integrate
    more deeply into web-based services and cloud platforms.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本地软件在某些情况下仍然被使用，但它正逐渐被视为受限或过时。向云计算和Web计算的过渡是迅速且具有巨大影响的。它重塑了我们的工作、学习、娱乐、沟通、媒体消费等方式。这一转型可能还会随着增强型AI技术、物联网设备、虚拟现实/增强现实系统以及其他创新深度融入Web服务和云平台而加速。
- en: We have come far from the software installations of yesterday, but the potential
    is hugely promising. Cloud computing is reimagining technology to fit our modern
    highly connected and increasingly mobile lifestyles. And this new era of ubiquitous,
    web-first computing is here to stay.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经远远走出了过去的软件下载时代，但未来的潜力巨大。云计算正在重新构想技术，以适应我们现代高度互联和日益移动化的生活方式。而这种无处不在的、以Web为主的计算新时代将会持续下去。
- en: But considering that we are dealing with web applications in this book, what
    exactly is a web app?
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，考虑到本书讨论的是Web应用程序，那么到底什么是Web应用程序呢？
- en: A web application is a software application that runs within a **web browser**.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Web应用程序是运行在**Web浏览器**中的软件应用程序。
- en: It is accessed via a network and delivers an interactive user experience through
    a web browser.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 它通过网络访问，并通过Web浏览器提供互动的用户体验。
- en: The purpose of a web application is to provide access to software capabilities
    and data over a network using standard web technologies. They allow users to access
    features and content from any internet-connected device with a web browser.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Web应用程序的目的是通过使用标准的Web技术，在网络上提供软件功能和数据的访问。它们允许用户从任何连接互联网的设备上，通过Web浏览器访问功能和内容。
- en: Web applications are useful when you want to provide access to software and
    data for a large number of users, potentially within an organization or to external
    customers and partners. They provide a convenient, consistent interface that works
    across devices and locations.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当你需要为大量用户提供软件和数据访问时，Web应用程序非常有用，可能是在一个组织内，或是向外部客户和合作伙伴提供服务。它们提供了一个便捷、一致的界面，可以跨设备和位置使用。
- en: 'Here are some of the key benefits of web applications:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是Web应用程序的一些主要优点：
- en: '**Accessibility**: Available anywhere with an internet connection and web browser.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可访问性**：只要有互联网连接和Web浏览器，随时随地都能使用。'
- en: '**Consistency**: The same interface and features are available on any device.
    The look and feel translate across platforms (desktop, mobile, tablet, and more).'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一致性**：在任何设备上都可以使用相同的界面和功能。外观和体验在各平台间（桌面、移动设备、平板等）保持一致。'
- en: '**Centralized management**: It’s easy to update web applications for all users
    simultaneously. New features and enhancements automatically propagate to all users.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集中管理**：可以同时更新所有用户的 Web 应用程序。新功能和增强会自动推送到所有用户。'
- en: '**Integration**: Can integrate with other web services, databases, APIs, and
    more using standard web technologies.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集成**：可以通过标准 Web 技术与其他 Web 服务、数据库、API 等进行集成。'
- en: '**Scalability**: Can scale to support a large number of simultaneous users
    with minimal additional overhead. Additional computing resources can be allocated
    as needed.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性**：能够支持大量的同时用户，且额外的开销最小。可以根据需要分配额外的计算资源。'
- en: '**Cost-effective**: Often, it’s more affordable and economical to develop and
    deploy web applications versus standalone software applications.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**成本效益**：通常，相较于独立软件应用程序，开发和部署 Web 应用程序更加实惠且经济。'
- en: To summarize, use web applications when you need to provide an application and
    its data to a large number of users over a network, with the benefits of accessibility,
    consistency, integration, and scalability that web applications offer. They are
    a very effective and popular type of software solution.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，当你需要通过网络向大量用户提供应用程序及其数据时，使用 Web 应用程序是最佳选择，因为它们具备 Web 应用程序所提供的可访问性、一致性、集成性和可扩展性。这是一种非常高效且受欢迎的软件解决方案。
- en: Now that we know the benefits of web applications, we can move on to the next
    section, where we will understand the importance of a full Python-based framework.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了 Web 应用程序的好处，我们可以进入下一部分，理解完整的基于 Python 的框架的重要性。
- en: The importance of a full Python web framework
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 完整 Python Web 框架的重要性
- en: 'Building and publishing web applications on the cloud today relies on several
    key frameworks, languages, and techniques. Some of the most important are as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，在云端构建和发布 Web 应用程序依赖于几个关键框架、语言和技术。以下是一些最重要的：
- en: '**Web frameworks**: Frameworks such as React, Angular, and Node.js make developing
    web apps easier and more efficient. They handle key tasks such as routing, state
    management, building components, and handling events. Developers can focus on
    writing code for their specific applications instead of building infrastructure.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Web 框架**：像 React、Angular 和 Node.js 这样的框架使 Web 应用程序的开发变得更加简单高效。它们处理一些关键任务，如路由、状态管理、构建组件和处理事件。开发人员可以专注于编写特定应用程序的代码，而无需构建基础设施。'
- en: '**Server-side languages**: Languages such as PHP, Ruby on Rails, Python, Java,
    and C# are used on the server side to handle requests, access databases, build
    APIs, and generate dynamic web content. Node.js, which uses JavaScript, has also
    become very popular for server-side development.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务器端语言**：如 PHP、Ruby on Rails、Python、Java 和 C# 等语言用于服务器端，处理请求、访问数据库、构建 API
    和生成动态 Web 内容。Node.js 使用 JavaScript，也已成为服务器端开发中非常流行的选择。'
- en: '**JavaScript**: JavaScript is the primary language of the frontend web. It
    is used to build client-side interfaces, animate and create interactive content,
    handle user input, request data via HTTP requests, and more. Modern JavaScript
    frameworks have also enabled the rise of single-page applications.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JavaScript**：JavaScript 是前端 Web 的主要语言。它用于构建客户端界面、动画和创建交互式内容、处理用户输入、通过 HTTP
    请求获取数据等。现代 JavaScript 框架也促进了单页应用程序的崛起。'
- en: '**Version control**: Tools such as Git help developers collaborate and keep
    a project’s code and file history synchronized. They enable useful features such
    as branching, merging, committing, pushing to remote repositories, and rolling
    back changes.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**版本控制**：像 Git 这样的工具帮助开发人员协作并保持项目的代码和文件历史同步。它们提供了诸如分支、合并、提交、推送到远程仓库和回滚更改等有用的功能。'
- en: '**Deployment**: There are several options for deploying web applications, including
    server management services such as AWS EC2, managed services such as Firebase,
    **virtual private servers** (**VPS**), and bare-metal servers. Continuous integration
    and deployment help get new features and code live as quickly and seamlessly as
    possible.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部署**：有多种部署 Web 应用程序的选项，包括服务器管理服务，如 AWS EC2、托管服务如 Firebase、**虚拟私人服务器**（**VPS**）和裸机服务器。持续集成和部署帮助快速、无缝地上线新功能和代码。'
- en: '**Containerization**: Docker containers package web applications and all their
    dependencies into isolated, portable, lightweight environments. They help keep
    development, staging, and production environments consistent and optimized. Containers
    simplify deploying and scaling web apps.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容器化**：Docker容器将Web应用及其所有依赖项打包到隔离的、可移植的、轻量级的环境中。它们帮助保持开发、预发布和生产环境的一致性和优化。容器简化了Web应用的部署和扩展。'
- en: '**Application programming interfaces** (**APIs**): These allow web applications
    to integrate with external services and pass data back and forth seamlessly. APIs
    power features such as user authentication, payment handling, location services,
    social networking, and much more without requiring multiple web apps to share
    code bases.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用程序接口**（**APIs**）：这些接口允许Web应用与外部服务集成，并无缝地传递数据。API为用户认证、支付处理、定位服务、社交网络等功能提供支持，而无需多个Web应用共享代码库。'
- en: As we can see, there are many tools and techniques we can use to build, deploy,
    scale, and integrate web applications professionally and efficiently today. When
    combined effectively, they enable fast, robust development cycles, optimized performance,
    and seamless connectivity between services. Moreover, as technologies continue
    to evolve, these best practices and stacks will adapt to meet new demands.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，今天有许多工具和技术可以帮助我们专业高效地构建、部署、扩展和集成Web应用。通过有效组合，它们能够实现快速、强大的开发周期、优化的性能以及服务之间的无缝连接。此外，随着技术的不断发展，这些最佳实践和技术栈将适应新的需求。
- en: This great variety of frameworks, languages, and techniques is a strong weapon
    in our hands that can make it possible to develop more or less any idea we could
    have. However, this requires continuous learning and huge know-how of too many
    different topics.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这种丰富多样的框架、语言和技术是我们手中的强大武器，它使我们能够实现几乎任何想法。然而，这也要求我们不断学习，并具备对许多不同主题的深入了解。
- en: For this reason, it would be great if a unique framework fully available in
    **Python**, a simplistic programming language, could help us develop our web applications
    quickly, making their deployment simple and smooth. The answer to this problem
    is **Streamlit**.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果有一个完全可用的**Python**框架，作为一种简单的编程语言，能够帮助我们快速开发Web应用，并使部署过程变得简单流畅，那就再好不过了。这个问题的答案就是**Streamlit**。
- en: So, in a few words, Streamlit is something that makes it much easier for us
    to develop, implement, and deploy our ideas and turn them into wonderful web apps.
    But should the product be made available on our local machines or in the cloud?
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，用几句话总结，Streamlit使我们更容易开发、实现和部署我们的想法，并将其转化为精彩的Web应用。但该产品是应该在本地机器上提供，还是在云端提供呢？
- en: Local versus the cloud
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本地与云端
- en: 'There are some key differences to keep in mind when developing software applications
    versus cloud-based web applications:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发软件应用程序与基于云的Web应用程序时，有一些关键的区别需要注意：
- en: '**Installation**: Traditional software needs to be installed on local machines
    or servers. This includes copying files, setting permissions, possibly configuring
    settings, and other setup steps. Web apps hosted on cloud platforms such as AWS,
    GCP, and Azure are deployed and managed by the cloud provider. No local installation
    is required.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安装**：传统软件需要在本地计算机或服务器上安装。这包括复制文件、设置权限、可能需要配置设置以及其他安装步骤。托管在AWS、GCP和Azure等云平台上的Web应用由云服务提供商部署和管理，无需本地安装。'
- en: '**Updates**: Software updates typically require manual installation on all
    machines where the application is installed. Web apps hosted on the cloud are
    automatically updated when developers push new code deployments. Users always
    get the latest version without any manual work.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更新**：软件更新通常需要在安装了该应用程序的所有机器上手动安装。托管在云上的Web应用会在开发者推送新代码时自动更新，用户始终能获得最新版本，无需手动操作。'
- en: '**Scalability**: Servers hosting traditional software applications would require
    manual configuration to scale resources up or down as needed. Cloud infrastructure
    is infinitely scalable on demand through API calls or automatic scaling policies.
    More or less CPU, memory, disk space, and more can be allocated programmatically.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性**：托管传统软件应用的服务器需要手动配置，才能根据需要扩展资源。云基础设施可以通过API调用或自动扩展策略按需无限扩展。可以通过编程方式分配更多或更少的CPU、内存、磁盘空间等资源。'
- en: '**Availability**: Uptime depends on local infrastructure for traditional software.
    Downtime can occur due to issues with individual servers, networking equipment,
    database servers, and more. Web apps benefit from the high availability of scalable
    cloud infrastructure. Regions, availability zones, and replication help minimize
    outages.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可用性**：传统软件的正常运行时间取决于本地基础设施。由于个别服务器、网络设备、数据库服务器等问题，可能会发生停机。Web 应用得益于可扩展云基础设施的高可用性。区域、可用区和复制有助于减少停机。'
- en: '**Mobility**: Traditional software is accessed through dedicated desktop or
    mobile applications. Web apps are accessible through any modern browser on any
    internet-connected device. This includes laptops, phones, tablets, TVs, watches,
    and more.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**移动性**：传统软件通过专用的桌面或移动应用访问。Web 应用可以通过任何现代浏览器在任何连接互联网的设备上访问，包括笔记本、手机、平板、电视、手表等。'
- en: '**Collaboration**: Multiple developers can work together simultaneously, editing
    code and deploying updates to web apps hosted on version control repositories
    and cloud hosting services. Edits to code bases are easily synced through source
    version control systems such as Git. Concurrent editing exposes opportunities
    for conflicts in traditional development workflows.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**协作**：多个开发者可以同时协作，编辑代码并将更新部署到托管在版本控制库和云托管服务上的 web 应用程序中。通过 Git 等源代码版本控制系统，代码库的修改可以轻松同步。并发编辑可能会导致传统开发工作流程中的冲突机会。'
- en: '**Costs**: Significant upfront costs are typically associated with purchasing
    and maintaining hardware and software licenses for traditional infrastructure.
    Cloud computing is based on a pay-per-use model with costs that can be reduced
    by scaling down or turning off unused resources. No large capital expenses are
    required. Resources can be scaled on-demand as needs evolve.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**成本**：传统基础设施通常需要购买和维护硬件以及软件许可证，这会带来较大的前期成本。云计算采用按需付费模式，可以通过缩减或关闭未使用的资源来降低成本。不需要大额资本支出。资源可以根据需求变化按需扩展。'
- en: To summarize, developing web applications on cloud platforms differs from building
    traditional software installations in key ways. Web apps are often easier to deploy,
    update, scale, and make highly available and mobile, involve more concurrent collaboration,
    and have lower upfront costs and more adjustable pricing models.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，在云平台上开发 web 应用程序与构建传统软件安装有显著不同。Web 应用通常更容易部署、更新、扩展，并且具有高度可用性和移动性，支持更多的并发协作，且具有较低的前期成本和更灵活的定价模式。
- en: As we can see, cloud platforms have a lot of advantages and should be our first
    choice. Now, let’s delve a little bit deeper and look at the differences and specific
    features of the most popular Python libraries for web applications.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，云平台具有许多优势，应该成为我们的首选。现在，让我们深入了解一下最流行的 Python web 应用库的差异和具体功能。
- en: Python libraries for web applications (Flask and Django)
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用于 web 应用的 Python 库（Flask 和 Django）。
- en: 'Here’s an overview of some popular Python libraries for building web applications:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一些流行的 Python 库用于构建 web 应用的概览：
- en: '**Flask**: A lightweight and flexible web framework. It’s great for building
    small to mid-sized apps. Some of its main features are as follows:'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Flask**：一个轻量级且灵活的 web 框架，非常适合构建小型到中型的应用程序。它的一些主要特点如下：'
- en: It has a minimal and intuitive core that can be easily extended. This makes
    it suitable for anyone looking to create web applications.
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它具有一个简洁且直观的核心，可以轻松扩展。这使得它适合任何希望创建 web 应用程序的人。
- en: It supports extensions and integrates with many Python libraries. This allows
    you to easily expand its functionality.
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它支持扩展并与许多 Python 库集成。这使得你可以轻松扩展其功能。
- en: It has built-in support for routing, templates, file uploading, and more, which
    means it’s quite easy to build APIs and render HTML templates.
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它内建支持路由、模板、文件上传等功能，这意味着构建 API 和渲染 HTML 模板非常简单。
- en: It’s suited for both small and large-scale projects. Many big companies such
    as Airbnb and Pinterest use Flask.
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它适用于小型和大型项目。许多大公司，如 Airbnb 和 Pinterest，都使用 Flask。
- en: 'Let’s look at some situations when we should use Flask:'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们看看一些应该使用 Flask 的场景：
- en: Building a small to mid-sized website or web app
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个小型到中型的网站或 web 应用。
- en: When we need more flexibility and control than what a microframework provides
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们需要比微框架提供的更多灵活性和控制时。
- en: The need to support extensions and integrations with other libraries
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要支持扩展和与其他库的集成。
- en: When we’re familiar with Python and want a framework that’s easy to get started
    with
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们熟悉 Python 并且想要一个易于上手的框架时
- en: '**Django**: A high-level Python web framework that encourages rapid development
    and clean design. It’s suited for large projects and applications. Some of its
    main features are as follows:'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Django**：一个高级 Python web 框架，鼓励快速开发和清晰的设计。它适用于大型项目和应用程序。以下是它的一些主要特点：'
- en: It has an **object-relational mapper** (**ORM**) that supports multiple databases.
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它具有一个**对象关系映射器**（**ORM**），支持多种数据库。
- en: It has a permission system and built-in support for users, groups, permissions,
    and more.
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它具有权限系统，并内建对用户、组、权限等的支持。
- en: It scales well and is used by huge companies such as Instagram, Netflix, Spotify,
    and others.
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它具有良好的扩展性，并且被 Instagram、Netflix、Spotify 等大公司使用。
- en: It has a lot of add-on libraries and integrations available.
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有许多可用的插件库和集成。
- en: It enforces a certain structure and best practices. This can be good for newcomers
    but can also be restrictive.
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它强制执行一定的结构和最佳实践。对于新手来说，这可能是好的，但也可能带有一定的限制。
- en: 'Let’s look at some situations when we should use Django:'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们来看一下什么时候应该使用 Django：
- en: For building a large and complex website or web application
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于构建大型复杂网站或 web 应用
- en: When we need a structured and scalable framework
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们需要一个结构化且可扩展的框架时
- en: When we require advanced features such as authentication, permissions, administrators,
    and more out of the box
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们需要开箱即用的高级功能，如身份验证、权限管理、管理员等时
- en: When we want a framework that scales well and can support a lot of traffic and
    load
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们需要一个能够良好扩展并支持大量流量和负载的框架时
- en: When we prefer a rigid structure and enforceable best practices
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们偏好强制执行的严格结构和最佳实践时
- en: In summary, choose Flask for small to mid-sized web apps and Django for large,
    complex web applications with advanced features.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，对于小到中型 web 应用，选择 Flask；对于大型、复杂的 web 应用，具有高级功能的选择 Django。
- en: 'If you want to write web applications with beautiful and useful dashboards
    easily, choose Streamlit. This, among all the tools and solutions we’ve described
    so far, is an important Python web application framework for several key reasons:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想轻松编写具有美观且实用的仪表板的 web 应用，选择 Streamlit。在我们迄今描述的所有工具和解决方案中，它是一个重要的 Python web
    应用框架，具有以下几个关键原因：
- en: '**Convenience and ease of use**: Streamlit simplifies building web apps in
    Python dramatically. It handles complex tasks such as setting up servers, routing,
    templating, databases, and more under the hood so that developers can focus on
    their application logic. This makes the development process faster and more accessible.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**便捷性和易用性**：Streamlit 极大简化了在 Python 中构建 web 应用的过程。它在幕后处理复杂任务，如设置服务器、路由、模板、数据库等，使开发人员可以专注于应用程序逻辑。这使得开发过程更快、更易于访问。'
- en: '**Integrated Python support**: Streamlit allows you to build entire web applications
    using only Python code. No additional templates, routing setup, or database configuration
    is required. Developers can utilize all of Python’s libraries and features, and
    there is no need to learn additional languages or frameworks.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集成 Python 支持**：Streamlit 允许你仅使用 Python 代码构建完整的 web 应用。无需额外的模板、路由设置或数据库配置。开发人员可以利用
    Python 的所有库和特性，无需学习额外的语言或框架。'
- en: '**Rapid prototyping**: Streamlit’s convenient and lightweight nature makes
    it ideal for quickly building prototypes, dashboards, demos, and minimum viable
    products. New ideas can be converted into shareable web applications very quickly.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**快速原型设计**：Streamlit 的便捷和轻量特性使其非常适合快速构建原型、仪表板、演示和最小可行产品。新想法可以非常迅速地转化为可分享的 web
    应用。'
- en: '**Reusable components**: Streamlit has a library of pre-built reusable frontend
    and backend components such as dropdowns, file uploaders, search bars, pagination,
    and more. These help speed up development and ensure a consistent user experience.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可重用组件**：Streamlit 拥有一个预构建的前端和后端组件库，如下拉框、文件上传、搜索栏、分页等。这些组件有助于加快开发进度，并确保一致的用户体验。'
- en: '**Cloud deployment**: Streamlit web apps can be deployed on major cloud providers,
    including AWS, GCP, Azure, and Docker. This provides scalable infrastructure,
    global reach, and the flexibility to adapt resource usage as an application grows.
    Deployment is simplified through seamless integration.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**云部署**：Streamlit web 应用可以部署在主要的云提供商上，包括 AWS、GCP、Azure 和 Docker。这提供了可扩展的基础设施、全球覆盖和随着应用程序增长而灵活调整资源使用的能力。通过无缝集成，部署变得更加简化。'
- en: '**Interactive dashboards**: Streamlit specializes in interactive applications
    and dashboards. It is used by data scientists and analysts to create insightful
    exploratory data analysis tools and reports. Users can filter, sort, pivot, search,
    select features, and examine data from multiple angles.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**互动仪表板**：Streamlit 专注于互动应用程序和仪表板。数据科学家和分析师使用它来创建富有洞察力的探索性数据分析工具和报告。用户可以过滤、排序、透视、搜索、选择特征，并从多个角度检查数据。'
- en: '**Community and support**: Streamlit has an active community and team behind
    it that supports usage questions, contributes to documentation, accepts pull requests,
    and addresses security issues promptly. The project is also backed by major tech
    companies and researchers.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**社区与支持**：Streamlit 拥有一个活跃的社区和团队，支持使用问题、贡献文档、接受拉取请求并及时处理安全问题。该项目还得到了主要科技公司和研究人员的支持。'
- en: In summary, Streamlit provides an easy-to-use, integrated, and scalable framework
    for building and deploying full web applications in Python. It allows you to convert
    ideas into apps faster, enables shortcutting low-level setup, facilitates prototyping
    and experimentation, enables interactive visualizations and dashboards, and supports
    customization and contribution from an open community. Overall, Streamlit makes
    web development in Python more accessible, productive, and impactful.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，Streamlit 提供了一个易于使用、集成化和可扩展的框架，用于构建和部署完整的 Python Web 应用程序。它使你能够更快地将创意转化为应用程序，简化低级别设置，促进原型开发和实验，支持互动可视化和仪表板，并支持来自开放社区的自定义和贡献。总体而言，Streamlit
    使得 Python Web 开发更加易于访问、高效和有影响力。
- en: So far, we’ve covered the main Python web application libraries and their specificities.
    Since we’ll be focusing on Streamlit in this book, let’s see what it’s capable
    of.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经介绍了主要的 Python Web 应用程序库及其特点。由于本书将重点介绍 Streamlit，让我们看看它的能力。
- en: Examples of Streamlit’s capabilities
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Streamlit 功能示例
- en: 'Here are some useful examples of Streamlit’s capabilities:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些 Streamlit 功能的有用示例：
- en: '**Interactive data exploration**: Streamlit is great for building dashboards
    that allow users to explore datasets interactively. Users can filter, sort, pivot,
    search, select features, and analyze data from multiple perspectives.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**互动数据探索**：Streamlit 非常适合构建允许用户互动探索数据集的仪表板。用户可以过滤、排序、透视、搜索、选择特征，并从多个角度分析数据。'
- en: '**Prototyping minimum viable products** (**MVPs**): Streamlit’s ease of use
    makes it perfect for building quick prototypes and MVPs. New ideas can be converted
    into shareable web apps in no time without any complex setup. This “code-first”
    approach speeds up iteration and feedback.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**原型设计最小可行产品**（**MVPs**）：Streamlit 易于使用，非常适合快速构建原型和 MVP。新想法可以在没有复杂设置的情况下快速转化为可共享的
    Web 应用程序。这种“先写代码”方法加速了迭代和反馈。'
- en: '**Model deployment**: Streamlit apps can expose trained **machine learning**
    (**ML**) models as web services. This allows other apps, scripts, or users to
    interact with and make predictions from the models. Apps become deployable, productive
    ML applications and platforms.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型部署**：Streamlit 应用程序可以将训练好的**机器学习**（**ML**）模型作为 Web 服务进行公开。这使得其他应用程序、脚本或用户能够与模型进行交互并进行预测。应用程序变得可部署，成为高效的机器学习应用和平台。'
- en: '**Embeddings**: Streamlit code and widgets can be embedded into Jupyter notebooks,
    JupyterLab, and the Jupyter Notebook interface. This close integration with the
    data science ecosystem streamlines the process of building apps from notebooks
    and vice versa.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**嵌入**：Streamlit 代码和小部件可以嵌入到 Jupyter 笔记本、JupyterLab 和 Jupyter Notebook 界面中。这种与数据科学生态系统的紧密集成简化了从笔记本构建应用程序以及从应用程序返回笔记本的过程。'
- en: '**Collaborative editing**: Streamlit streams edits in real time, enabling the
    co-editing of code bases seamlessly. Multiple developers can work together simultaneously
    on one Streamlit app, with changes appearing instantly. Conflicts are avoided,
    and productive collaboration is possible.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**协作编辑**：Streamlit 实时流式传输编辑，支持无缝共同编辑代码库。多个开发者可以同时在同一个 Streamlit 应用上协作，修改内容即时显示。避免冲突，实现高效协作。'
- en: '**Automated testing**: Streamlit includes tools for writing automated tests
    in the form of test suites, individual test functions, fixtures, stubs, mocks,
    and more. Test coverage reports ensure new features do not break existing functionality.
    Continuous integration workflows run tests on each commit, leading to stable,
    high-quality code.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化测试**：Streamlit 包含用于编写自动化测试的工具，包括测试套件、单个测试函数、夹具、存根、模拟等。测试覆盖率报告确保新功能不会破坏现有功能。持续集成工作流会在每次提交时运行测试，从而确保代码的稳定性和高质量。'
- en: '**User interfaces** (**UIs**) **as code**: The Streamlit syntax is based on
    Python, treating UIs as code. This “UI as code” approach provides many benefits
    over graphical tools, including version control, reproducibility, collaboration,
    and integration with the rest of an application’s code base. Streamlit UIs are
    flexible, programmatic, and build-time optimized.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户界面**（**UIs**）**作为代码**：Streamlit 的语法基于 Python，视用户界面为代码。这种“UI 作为代码”的方法相比图形化工具提供了许多优势，包括版本控制、可复现性、协作以及与应用程序其余代码库的集成。Streamlit
    的用户界面灵活、可编程，并且在构建时得到了优化。'
- en: '**Reproducible research**: Streamlit’s apps are executed line by line, building
    up a complete, interactive, and shareable environment. All inputs, code, outputs,
    and widget values are recorded, allowing anyone to reproduce analysis and results.
    Apps can be packaged and archived, then re-opened and resumed later. Streamlit
    facilitates transparent and reproducible data science.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可复现的研究**：Streamlit 的应用程序是逐行执行的，构建了一个完整的、互动的、可分享的环境。所有的输入、代码、输出和小部件值都会被记录下来，允许任何人复现分析和结果。应用程序可以被打包和归档，然后重新打开并继续使用。Streamlit
    促进了透明和可复现的数据科学。'
- en: '**Automating experiments**: Streamlit’s support for modular functions, classes,
    loops, conditionals, and more allows you to automate experiment workflows. Infrastructure
    can be scaled up and down programmatically, different models and hyperparameters
    can be tested systematically, and A/B testing of features and UX elements becomes
    possible. Automation reduces manual effort and leads to discovering the combinations
    that work best faster.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化实验**：Streamlit 支持模块化函数、类、循环、条件语句等，可以帮助你自动化实验工作流程。基础设施可以通过编程进行扩展和缩减，可以系统地测试不同的模型和超参数，同时
    A/B 测试功能和用户体验元素变得可行。自动化减少了人工工作量，并能够更快地发现最佳的组合。'
- en: Streamlit is incredibly versatile and can help us create more or less any kind
    of application we have in mind in quite a short time and with an affordable effort.
    Considering this enormous point of strength, let’s understand why turning our
    ideas into working prototypes in a short time can be the most useful weapon in
    our hands.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Streamlit 是一个极其多功能的工具，可以帮助我们在相对较短的时间内，以可承受的努力创建几乎任何我们心中设想的应用程序。考虑到这一巨大优势，让我们来理解为什么在短时间内将我们的想法转化为可工作的原型，可能是我们手中最有用的武器。
- en: The importance of turning an idea into a prototype
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将一个想法转化为原型的重要性
- en: 'The faster an idea can be turned into a tangible prototype, the greater the
    opportunities and advantages. There are several key benefits to building rough
    prototypes as quickly as possible:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 将一个想法转化为具体的原型越快，机会和优势就越大。尽可能快速地构建粗略原型有几个关键的好处：
- en: '**Get customer feedback early**: By creating prototypes that embody an idea,
    even in a basic form, you can get real user feedback much sooner. Customers can
    experience the idea, comment on what they like and don’t like, and suggest important
    changes to make the final product more useful and appealing. Incorporating feedback
    early avoids wasting time and resources developing features or designs that don’t
    resonate with customers.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**尽早获取客户反馈**：通过创建体现某个想法的原型，即使是一个基础版本，你也可以更早地获得真实的用户反馈。客户可以体验这个想法，评论他们喜欢和不喜欢的地方，并提出重要的改进意见，使最终产品更有用、更具吸引力。尽早采纳反馈可以避免在开发不符合客户需求的功能或设计时浪费时间和资源。'
- en: '**Discover flaws and issues early**: Early prototypes highlight any problems
    with how an idea might work in practice. Issues that are hard to identify conceptually
    become immediately obvious when developing a prototype. These issues can then
    be addressed, and alternative approaches can be explored before a massive amount
    of time has been invested. It’s far easier to change course with a prototype than
    with a nearly finished product.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**尽早发现缺陷和问题**：早期原型可以突出显示一个想法在实际操作中可能出现的问题。那些概念上难以识别的问题，在开发原型时会变得一目了然。这些问题随后可以得到解决，替代方案可以在投入大量时间之前进行探索。相比于几乎完成的产品，改变原型的方向要容易得多。'
- en: '**Gauge viability and enthusiasm**: By demonstrating prototypes for others,
    including team members, managers, mentors, and investors, you can get a sense
    of how compelling and exciting they seem. Enthusiasm and validation at early stages
    provide confidence that an idea has real potential and traction. A lack of enthusiasm
    shows that an idea may not be as promising as what people first thought.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**评估可行性和热情**：通过向其他人展示原型，包括团队成员、经理、导师和投资者，你可以了解它们看起来有多么引人注目和激动人心。在早期阶段的热情和验证能提供信心，证明一个想法具有真正的潜力和吸引力。缺乏热情则表明这个想法可能不像人们最初想的那样有前景。'
- en: '**Iterate and improve rapidly**: Prototyping, by its nature, enables an iterative
    approach. You build, get feedback, make changes, build again, and continue refining.
    Each iteration improves the prototype, making it more attractive and useful. What
    starts as a basic mockup can quickly evolve into an engaging product concept through
    ongoing feedback and development.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**快速迭代与改进**：原型设计本质上是一种迭代式方法。你构建原型，获取反馈，做出修改，重新构建，然后继续完善。每一次迭代都会改善原型，使其更加吸引人和实用。从一个基础的模型开始，通过持续的反馈和开发，它能迅速发展成一个引人入胜的产品概念。'
- en: Turning ideas into prototypes as rapidly and as frequently as possible leads
    to better products, happier customers, higher enthusiasm within teams and partners,
    and a greater likelihood of building something that ultimately succeeds in the
    market. Early and iterative prototyping opens up opportunities and advantages
    at every stage of development and product design. With quick prototypes, you can
    pivot, improve, and innovate your way to success.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 尽可能快速且频繁地将想法转化为原型，能带来更好的产品、更开心的客户、更高的团队与合作伙伴热情，并且更有可能打造出最终在市场上成功的产品。早期的迭代原型设计为每个开发阶段和产品设计带来了机会和优势。有了快速的原型设计，你可以灵活调整、改进和创新，走向成功。
- en: Summary
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we introduced Streamlit from a theoretical point of view and
    looked at several reasons that make this framework an incredible tool for creating
    web applications and prototypes quickly and easily. Turning an idea into a prototype
    – or even better, into a working web application – quickly, easily, and painlessly
    is a terrific weapon in our hands. The power of such a library can only be fully
    expressed by using it, so let’s not wait any longer and start setting up our coding
    environment!
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们从理论角度介绍了 Streamlit，并探讨了几条使这一框架成为快速且轻松地创建 Web 应用程序和原型的绝佳工具的理由。将一个想法快速、轻松、无痛地转化为原型——甚至更好，转化为一个可工作的
    Web 应用程序——是我们手中的一项强大武器。只有通过使用这样的库，才能真正发挥其强大功能，因此我们不再等待，开始设置我们的编码环境吧！
- en: 'To start coding, we still need some things: a good operating system with a
    Python installation, an **integrated development environment** (**IDE**), virtual
    environments, and more.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始编码，我们仍然需要一些东西：一个良好的操作系统，安装了 Python，**集成开发环境**（**IDE**），虚拟环境等等。
- en: In the next chapter, we are going to ensure that everything we need will be
    available and fully functioning. Don’t worry – this installation will act as the
    foundation for all our future developments!
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将确保我们所需的一切都能可用并完全正常运行。别担心——这次安装将为我们未来的所有开发打下基础！
