- en: Chapter 1. Getting Started with D3.js
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 1 章. 使用 D3.js 入门
- en: 'In this chapter we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖：
- en: Setting up a simple D3 development environment
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置简单的 D3 开发环境
- en: Setting up an NPM-based development environment
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置基于 NPM 的开发环境
- en: Understanding D3-style JavaScript
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 D3 风格的 JavaScript
- en: Introduction
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: This chapter is designed to get you up and running with D3.js, covering fundamental
    aspects, such as what D3.js is, and how to set up a typical D3.js data visualization
    environment. One particular section is also devoted in covering some lesser known
    areas of JavaScript that D3.js relies heavily on.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章旨在帮助您开始使用 D3.js，涵盖基本方面，例如 D3.js 是什么，以及如何设置典型的 D3.js 数据可视化环境。本章还特别介绍了一些 D3.js
    依赖的、不太为人所知的 JavaScript 领域。
- en: 'What is D3? D3 refers to **Data-Driven Documents**, and according to the official
    D3 Wiki:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是 D3？D3 指的是 **数据驱动文档**，根据官方 D3 Wiki：
- en: D3.js is a JavaScript library for manipulating documents based on data. D3 helps
    you bring data to life using HTML, SVG, and CSS. D3's emphasis on web standards
    gives you the full capabilities of modern browsers without tying yourself to a
    proprietary framework, combining powerful visualization components and a data-driven
    approach to DOM manipulation.
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: D3.js 是一个基于数据的 JavaScript 库，用于操作文档。D3 帮助您使用 HTML、SVG 和 CSS 使数据生动起来。D3 对网络标准的强调让您能够充分利用现代浏览器的全部功能，而不必绑定到任何专有框架，结合强大的可视化组件和数据驱动的
    DOM 操作方法。
- en: ''
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: D3 Wiki (2013, August)
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: D3 Wiki (2013, 八月)
- en: In a sense, D3 is a specialized JavaScript library that allows you to create
    amazing data visualizations using a simpler (data driven) approach by leveraging
    existing web standards. D3.js was created by Mike Bostock ([http://bost.ocks.org/mike/](http://bost.ocks.org/mike/))
    and superseded his previous work on a different JavaScript data visualization
    library called Protovis. For more information on how D3 was created and on the
    theory that influenced both Protovis and D3.js, please check out links in the
    following information box. Here in this book we will focus more on how to use
    D3.js to power your visualization. Initially, some aspects of D3 may be a bit
    confusing due to its different approach to data visualization using JavaScript.
    I hope that over the course of this book, a large number of topics, both basic
    and advanced, will make you comfortable and effective with D3\. Once properly
    understood, D3 can improve your productivity and expressiveness with data visualizations
    by orders of magnitude.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在某种意义上，D3 是一个专门的 JavaScript 库，它允许您通过利用现有的网络标准，以更简单（数据驱动）的方法创建惊人的数据可视化。D3.js
    由 Mike Bostock ([http://bost.ocks.org/mike/](http://bost.ocks.org/mike/)) 创建，并取代了他之前在名为
    Protovis 的不同 JavaScript 数据可视化库上的工作。有关 D3 的创建以及影响 Protovis 和 D3.js 的理论的信息，请参阅以下信息框中的链接。在本书中，我们将更多地关注如何使用
    D3.js 来驱动您的可视化。最初，由于 D3 在使用 JavaScript 进行数据可视化方面采用了不同的方法，一些方面可能会有些令人困惑。我希望在本书的整个过程中，大量的话题，从基础到高级，都将使您对
    D3 感到舒适和有效。一旦正确理解，D3 可以通过数量级的方式提高您在数据可视化方面的生产力和表现力。
- en: Note
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more formal introduction to the idea behind D3 see the *Declarative Language
    Design for Interactive Visualization* paper published by Mike Bostock on IEEE
    InfoVis 2010 [http://vis.stanford.edu/papers/protovis-design](http://vis.stanford.edu/papers/protovis-design).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要更正式地了解 D3 背后的理念，请参阅 Mike Bostock 在 IEEE InfoVis 2010 上发表的 *Declarative Language
    Design for Interactive Visualization* 论文，网址为 [http://vis.stanford.edu/papers/protovis-design](http://vis.stanford.edu/papers/protovis-design)。
- en: 'If you are interested to know how D3 came about, I recommend you to check out
    the *D3: Data-Driven Document* paper published by Mike Bostock on IEEE InfoVis
    2011 at [http://vis.stanford.edu/papers/d3](http://vis.stanford.edu/papers/d3).'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '如果您想了解 D3 是如何产生的，我建议您查看 Mike Bostock 在 IEEE InfoVis 2011 上发表的 *D3: Data-Driven
    Document* 论文，网址为 [http://vis.stanford.edu/papers/d3](http://vis.stanford.edu/papers/d3)。'
- en: Protovis, the predecessor of D3.js, also created by Mike Bostock and Jeff Heer
    of the Stanford Visualization Group can be found at [http://mbostock.github.io/protovis/](http://mbostock.github.io/protovis/).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: D3.js 的前身 Protovis，也是由 Mike Bostock 和斯坦福可视化小组的 Jeff Heer 创建，可以在 [http://mbostock.github.io/protovis/](http://mbostock.github.io/protovis/)
    找到。
- en: Setting up a simple D3 development environment
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置简单的 D3 开发环境
- en: First thing you need when starting a D3 powered data visualization project is
    a working development environment. In this recipe, we will show you how a simple
    D3 development environment can be set up within minutes.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 开始一个由 D3 驱动的数据可视化项目时，你首先需要的是一个工作开发环境。在本食谱中，我们将向您展示如何在几分钟内设置一个简单的 D3 开发环境。
- en: Getting Ready
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Before we start, make sure you have your favorite text editor installed and
    ready on your computer.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，请确保你已经安装并准备好你喜欢的文本编辑器。
- en: How to do it...
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We''ll start by downloading D3.js:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先下载 D3.js：
- en: Download the latest stable version of D3.js from [http://d3js.org/](http://d3js.org/).
    You can download the archived, older releases from [https://github.com/mbostock/d3/tags](https://github.com/mbostock/d3/tags).
    Additionally, if you are interested in trying out the bleeding edge D3 build on
    master branch, then you can fork [https://github.com/mbostock/d3](https://github.com/mbostock/d3).
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[http://d3js.org/](http://d3js.org/)下载 D3.js 的最新稳定版本。你可以从[https://github.com/mbostock/d3/tags](https://github.com/mbostock/d3/tags)下载存档的旧版本。此外，如果你有兴趣尝试
    master 分支上最新的 D3 构建，你可以分叉[https://github.com/mbostock/d3](https://github.com/mbostock/d3)。
- en: 'Once downloaded and unzipped, you will find three files `d3.v3.js`, `d3.v3.min.js`,
    and its license in the extracted folder. For development it is recommended to
    use `d3.v3.js`, the "non-uglified" (minimized) version, since it can help you
    trace and debug JavaScript inside D3 library. Once extracted place the `d3.v3.js`
    file in the same folder with an `index.html` file containing the following HTML:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载并解压后，你将在提取的文件夹中找到三个文件 `d3.v3.js`、`d3.v3.min.js` 以及其许可证。对于开发，建议使用 `d3.v3.js`，即“未压缩”版本，因为它可以帮助你在
    D3 库内部追踪和调试 JavaScript。一旦提取，将 `d3.v3.js` 文件放置在与包含以下 HTML 的 `index.html` 文件相同的文件夹中：
- en: '[PRE0]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Tip
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you download D3 from a source or a tagged version, the JavaScript file name
    will be slightly different. Instead of `d3.v3.js`, it will simply be called `d3.js`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你从源或标记版本下载 D3，JavaScript 文件名将略有不同。它将简单地被称为 `d3.js` 而不是 `d3.v3.js`。
- en: This is all you need to create, in its simplest form, a D3-powered data visualization
    development environment. With this setup you can essentially open the HTML file
    using your favorite text editor to start your development and also view your visualization
    by opening the file in your browser.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是创建一个最简单的 D3 驱动的数据可视化开发环境所需的所有内容。有了这个设置，你可以基本上使用你喜欢的文本编辑器打开 HTML 文件开始开发，也可以通过在浏览器中打开文件来查看你的可视化。
- en: Note
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The source code for this recipe can be found at [https://github.com/NickQiZhu/d3-cookbook/tree/master/src/chapter1/simple-dev-env](https://github.com/NickQiZhu/d3-cookbook/tree/master/src/chapter1/simple-dev-env).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 本菜谱的源代码可以在[https://github.com/NickQiZhu/d3-cookbook/tree/master/src/chapter1/simple-dev-env](https://github.com/NickQiZhu/d3-cookbook/tree/master/src/chapter1/simple-dev-env)找到。
- en: How it works...
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: D3 JavaScript library is very self-sufficient. It has no dependency on any JavaScript
    library than other what your browser already provides. In fact, it can even be
    used in a non-browser environment such as **Node.js** with some minimum setup
    (I will cover this in more detail in later chapters).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: D3 JavaScript 库非常自给自足。它不依赖于任何浏览器已经提供的 JavaScript 库。实际上，它甚至可以在非浏览器环境（如 **Node.js**）中使用，只需进行一些基本的设置（我将在后面的章节中更详细地介绍这一点）。
- en: Tip
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If your visualization's target browser environment includes Internet Explorer
    9, it is recommended to use the compatibility library **Aight**, which can be
    found at [https://github.com/shawnbot/aight](https://github.com/shawnbot/aight),
    and **Sizzle selector engine** at [http://sizzlejs.com/](http://sizzlejs.com/).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的可视化目标浏览器环境包括 Internet Explorer 9，建议使用兼容性库 **Aight**，它可以在[https://github.com/shawnbot/aight](https://github.com/shawnbot/aight)找到，以及
    **Sizzle 选择器引擎**在[http://sizzlejs.com/](http://sizzlejs.com/)。
- en: 'Having the following character encoding instruction in header section is critical:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在头部部分包含以下字符编码指令是至关重要的：
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The character encoding instructs browsers and validators what set of characters
    to use when rendering web pages. Otherwise your browser will not be able to load
    D3 JavaScript library since D3 uses utf-8 character for certain symbols such as
    π.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码指示浏览器和验证器在渲染网页时使用哪些字符集。否则，由于 D3 使用 utf-8 字符集来表示某些符号（如 π），你的浏览器将无法加载 D3 JavaScript
    库。
- en: Note
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: D3 is completely open source, and it is open sourced under a custom license
    agreement created by its author Michael Bostock. This license is pretty similar
    to the popular MIT license with only one exception where it explicitly states
    that Michael Bostock's name cannot be used to endorse or promote products derived
    from this software without permission.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: D3 是完全开源的，并且它是在其作者 Michael Bostock 创建的自定义许可协议下开源的。这个许可协议与流行的 MIT 许可证非常相似，只有一个例外，即它明确指出，未经许可，不得使用
    Michael Bostock 的名字来认可或推广由此软件派生的产品。
- en: There's more...
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Throughout this cookbook numerous recipe code examples will be provided. All
    example source code are provided and hosted on GitHub ([https://github.com/](https://github.com/))
    a popular open source social coding repository platform.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在整个食谱集中，将提供多个食谱代码示例。所有示例源代码都提供并托管在GitHub（[https://github.com/](https://github.com/)）这个流行的开源社交编码仓库平台上。
- en: How to get source code
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何获取源代码
- en: The easiest way to get all the recipe source code that you need is to clone
    the Git repository ([https://github.com/NickQiZhu/d3-cookbook](https://github.com/NickQiZhu/d3-cookbook))
    for this book. If you are not planning to set up a development environment for
    the recipes then you can safely skip this section.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 获取所有所需食谱源代码的最简单方法是通过克隆这本书的Git仓库（[https://github.com/NickQiZhu/d3-cookbook](https://github.com/NickQiZhu/d3-cookbook)）。如果你不打算为食谱设置开发环境，那么你可以安全地跳过这一节。
- en: Tip
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: If you are not familiar with Git, clone is similar to the check-out concept
    in other versions of control software. However cloning does a lot more than simply
    checking out the files. It also copies all branches and histories to your local
    machine effectively cloning the entire repository to your local machine so you
    can work completely offline with this cloned repository in your own environment.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不太熟悉Git，克隆的概念类似于其他版本控制软件中的检出（check-out）概念。然而，克隆不仅仅只是检出文件，它还会将所有分支和版本历史复制到你的本地机器上，实际上是将整个仓库克隆到你的本地机器，这样你就可以在这个克隆的仓库中完全离线工作。
- en: First install a Git client on your computer. You can find a list of Git client
    software here [http://git-scm.com/downloads](http://git-scm.com/downloads), and
    a detailed guide on how to install it on different operating systems here [http://git-scm.com/book/en/Getting-Started-Installing-Git](http://git-scm.com/book/en/Getting-Started-Installing-Git).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在你的电脑上安装一个Git客户端。你可以在[http://git-scm.com/downloads](http://git-scm.com/downloads)找到Git客户端软件列表，以及如何在不同的操作系统上安装它的详细指南[http://git-scm.com/book/en/Getting-Started-Installing-Git](http://git-scm.com/book/en/Getting-Started-Installing-Git)。
- en: Tip
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Another popular way to get Git and GitHub working is to install the GitHub client,
    which gives you a richer set of features than simply Git. However, at the time
    of writing, GitHub only offered client software for Windows and Mac OS.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种使Git和GitHub工作起来更流行的方式是安装GitHub客户端，它比单纯的Git提供了更丰富的功能。然而，在撰写本文时，GitHub只为Windows和Mac
    OS提供了客户端软件。
- en: 'GitHub for Windows: [http://windows.github.com/](http://windows.github.com/).'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 'GitHub for Windows: [http://windows.github.com/](http://windows.github.com/).'
- en: 'GitHub for Mac: [http://mac.github.com/](http://mac.github.com/).'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 'GitHub for Mac: [http://mac.github.com/](http://mac.github.com/).'
- en: 'Once the Git client is installed, simply issuing the following command will
    download all recipe source code to your computer:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了Git客户端，只需执行以下命令即可将所有食谱源代码下载到你的电脑上：
- en: '[PRE2]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Tip
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Or if you choose to use GitHub client, then simply click the **Fork** button
    on the repository page [https://github.com/NickQiZhu/d3-cookbook](https://github.com/NickQiZhu/d3-cookbook).
    This will make this repository appear in your GitHub client.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果你选择使用GitHub客户端，只需在仓库页面[https://github.com/NickQiZhu/d3-cookbook](https://github.com/NickQiZhu/d3-cookbook)上点击**Fork**按钮。这将使这个仓库出现在你的GitHub客户端中。
- en: Setting up an NPM-based development environment
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置基于NPM的开发环境
- en: When you are working on a more complex data visualization project that requires
    the use of a number of JavaScript libraries, the simple solution we discussed
    before might become a bit clumsy and unwieldy. In this section, we will demonstrate
    an improved setup using **Node Packaged Modules** (**NPM**)—a de facto JavaScript
    library repository management system. If you are as impatient as me and want to
    get to the meaty part of the book—the recipes—you can safely skip this section
    and come back when you need to set up a more production-ready environment for
    your project.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在进行一个需要使用多个JavaScript库的更复杂的数据可视化项目时，我们之前讨论的简单解决方案可能会变得有些笨拙和难以操作。在本节中，我们将展示一个使用**Node
    Packaged Modules**（**NPM**）的改进设置——这是一个事实上的JavaScript库仓库管理系统。如果你和我一样急切，想要直接进入书的核心部分——食谱，你可以安全地跳过这一节，在你需要为项目设置一个更成熟的运行环境时再回来。
- en: Getting Ready
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Before we start please make sure you have NPM properly installed. NPM comes
    as part of the Node.js installation. You can download Node.js from [http://nodejs.org/download/](http://nodejs.org/download/).
    Select the correct Node.js binary build for your OS. Once installed the `npm`
    command will become available in your terminal console.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，请确保你已经正确安装了 NPM。NPM 是 Node.js 安装的一部分。你可以从 [http://nodejs.org/download/](http://nodejs.org/download/)
    下载 Node.js。选择适合你的操作系统的正确 Node.js 二进制构建。一旦安装，`npm` 命令将在你的终端控制台中可用。
- en: '[PRE3]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The preceding command prints out the version number of your NPM client indicating
    the installation is successful.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将打印出你的 NPM 客户端版本号，表明安装成功。
- en: How to do it...
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: With NPM installed, now we can create a package descriptor file to automate
    some of the manual setup steps.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装了 NPM 之后，现在我们可以创建一个包描述文件来自动化一些手动设置步骤。
- en: 'First, under your project folder, create a file named `package.json` containing
    the following code:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在你的项目文件夹下创建一个名为 `package.json` 的文件，包含以下代码：
- en: '[PRE4]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Once the `package.json` file is defined, you can simply run:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦定义了 `package.json` 文件，你就可以简单地运行：
- en: '[PRE5]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How it works...
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Most of the fields in the `package.json` file are for informational purpose
    only, such as the name, description, homepage, author, and the repository. The
    name and version field will be used if you decide to publish your library into
    an NPM repository in the future. What we really care about, at this point, is
    the `dependencies` and `devDependencies` fields.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`package.json` 文件中的大多数字段仅用于信息目的，例如名称、描述、主页、作者和仓库。如果你决定将来将你的库发布到 NPM 仓库，将使用名称和版本字段。目前我们真正关心的是
    `dependencies` 和 `devDependencies` 字段。'
- en: The `dependencies` field describes the runtime library dependencies that your
    project has, meaning the libraries your project needs to run properly in a browser.
    In this simple example we only have one dependency on d3\. `d3` is the name that
    D3 library is published under in the NPM repository. The version number `3.x`
    signifies that this project is compatible with any version 3 releases, and NPM
    should retrieve the latest stable version 3 build to satisfy this dependency.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dependencies` 字段描述了你的项目在浏览器中正常运行所需的运行时库依赖，这意味着你的项目需要的库。在这个简单的例子中，我们只有一个对 d3
    的依赖。`d3` 是 D3 库在 NPM 仓库中发布的名称。版本号 `3.x` 表示该项目与任何 3 版本兼容，并且 NPM 应该检索最新的稳定版本 3 构建来满足这个依赖。'
- en: Tip
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: D3 is a self-sufficient library with zero external runtime dependency. However,
    this does not mean that it cannot work with other popular JavaScript libraries.
    I regularly use D3 with other libraries to make my job easier, for example, JQuery,
    Zepto.js, Underscore.js, and Backbone.js.
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: D3 是一个自给自足的库，没有外部运行时依赖。然而，这并不意味着它不能与其他流行的 JavaScript 库一起工作。我经常使用 D3 与其他库一起工作，以使我的工作更简单，例如
    JQuery、Zepto.js、Underscore.js 和 Backbone.js。
- en: The `devDependencies` field describes development time (compile time) library
    dependencies. What this means is that, libraries specified under this category
    are only required in order to build this project, and not required for running
    your JavaScript project.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`devDependencies` 字段描述了开发时间（编译时间）库依赖。这意味着，在这个类别下指定的库仅用于构建此项目，而不是运行你的 JavaScript
    项目所必需的。'
- en: Note
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Detailed NPM package JSON file documentation can be found at [https://npmjs.org/doc/json.html](https://npmjs.org/doc/json.html).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 详细 NPM 包 JSON 文件文档可以在 [https://npmjs.org/doc/json.html](https://npmjs.org/doc/json.html)
    找到。
- en: Executing the `npm install` command will automatically trigger NPM to download
    all dependencies that your project requires including your dependencies' dependencies
    recursively. All dependency libraries will be downloaded into `node_modules` folder
    under your project root folder. When this is done you can just simply create your
    HTML file as it has been shown in the previous recipe, and load your D3 JavaScript
    library directly from `node_modules/d3/d3.js`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 执行 `npm install` 命令将自动触发 NPM 下载你的项目所需的所有依赖项，包括你的依赖项的依赖项。所有依赖库都将下载到你的项目根目录下的
    `node_modules` 文件夹中。完成此操作后，你只需创建一个 HTML 文件，就像在之前的菜谱中展示的那样，并直接从 `node_modules/d3/d3.js`
    加载你的 D3 JavaScript 库。
- en: The source code for this recipe with an automated build script can be found
    at [https://github.com/NickQiZhu/d3-cookbook/tree/master/src/chapter1/npm-dev-env](https://github.com/NickQiZhu/d3-cookbook/tree/master/src/chapter1/npm-dev-env).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱的源代码以及自动构建脚本可以在 [https://github.com/NickQiZhu/d3-cookbook/tree/master/src/chapter1/npm-dev-env](https://github.com/NickQiZhu/d3-cookbook/tree/master/src/chapter1/npm-dev-env)
    找到。
- en: Relying on NPM is a simple and yet effective way to save you from all the trouble
    of downloading JavaScript libraries manually and the constant need of keeping
    them up-to-date. However, an astute reader might have already noticed that with
    this power we can easily push our environment setup to the next level. Imagine
    if you are building a large visualization project where thousands of lines of
    JavaScript code will be created, obviously our simple setup described here is
    no longer sufficient. However modular JavaScript development by itself can fill
    an entire book; therefore we are not going to try to cover this topic since our
    focus is on data visualization and D3\. If you are interested please refer the
    source code for this recipe where it is demonstrated how a more modular approach
    can be implemented on top of what we described here with a simple automated build
    script. In later chapters, when unit test related recipes are discussed, we will
    expand the coverage on this topic to show how our setup can be enhanced to run
    automated unit tests.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖 NPM 是一种简单而有效的方法，可以让你免于手动下载 JavaScript 库的所有麻烦，以及不断保持它们更新的需求。然而，一个敏锐的读者可能已经注意到，有了这种力量，我们可以轻松地将我们的环境设置提升到下一个层次。想象一下，如果你正在构建一个大型可视化项目，其中将创建数千行
    JavaScript 代码，显然我们这里描述的简单设置就不再足够了。然而，模块化 JavaScript 开发本身就可以填满一本书；因此，我们不会尝试涵盖这个主题，因为我们的重点是数据可视化和
    D3。如果你对此感兴趣，请参考这个菜谱的源代码，其中展示了如何在简单自动化构建脚本的之上实现更模块化的方法。在后面的章节中，当讨论与单元测试相关的菜谱时，我们将扩展这个主题的范围，以展示如何增强我们的设置以运行自动化单元测试。
- en: There's more...
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Though in previous sections, it was mentioned that you can just open the HTML
    page that you have created using your browser to view your visualization result
    directly, this approach does have its limitations. This simple approach stops
    working once we need to load data from separate data file (this is what we will
    do in later chapters and it is also the most likely case in your daily working
    environment) due to the browser's built-in security policy. To get around this
    security constraint it is highly recommended that you set up a local HTTP server
    so your HTML page and the data file can be served from this server instead of
    loaded from file system directly.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在前面的章节中提到，你可以直接使用浏览器打开你创建的 HTML 页面来查看你的可视化结果，但这种方法确实有其局限性。一旦我们需要从单独的数据文件中加载数据（这是我们将在后面的章节中做的，也是你日常工作中最可能的情况），由于浏览器的内置安全策略，这种简单的方法就会失效。为了绕过这个安全限制，强烈建议你设置一个本地
    HTTP 服务器，这样你的 HTML 页面和数据文件就可以从这个服务器上提供服务，而不是直接从文件系统中加载。
- en: Setup a local HTTP server
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置本地 HTTP 服务器
- en: There are probably a dozen ways to set up an HTTP server on your computer based
    on which operating system you use and which software package you decide to use
    to act as an HTTP server. Here I will attempt to cover some of the most popular
    setups.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你使用的操作系统和你决定使用的软件包来充当 HTTP 服务器，可能有一打方法在你的电脑上设置 HTTP 服务器。在这里，我将尝试涵盖一些最受欢迎的设置。
- en: Python Simple HTTP Server
  id: totrans-81
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Python 简单 HTTP 服务器
- en: 'This is my favorite for development and fast prototyping. If you have Python
    installed on your OS, which is usually the case with any Unix/Linux/Mac OS distro,
    then you can simply type this command in your terminal:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我最喜欢的用于开发和快速原型制作的方法。如果你已经在你的操作系统上安装了 Python，这对于任何 Unix/Linux/Mac OS 发行版来说通常是情况，你只需在终端中输入这个命令即可：
- en: '[PRE6]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Or with newer Python distribution:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 或者使用更新的 Python 发行版：
- en: '[PRE7]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This little python program will launch an HTTP server and start serving any
    file right from the folder where this program is launched. This is by far the
    easiest way to get an HTTP server running on any OS.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这个小巧的 Python 程序将启动一个 HTTP 服务器，并从程序启动的文件夹开始服务任何文件。这可能是迄今为止在任意操作系统上运行 HTTP 服务器最简单的方法。
- en: Note
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you don't have python installed on your computer yet, you can get it from
    [http://www.python.org/getit/](http://www.python.org/getit/). It works on all
    modern OS including Windows, Linux and Mac.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有在电脑上安装 Python，你可以从 [http://www.python.org/getit/](http://www.python.org/getit/)
    获取它。它适用于所有现代操作系统，包括 Windows、Linux 和 Mac。
- en: Node.js HTTP Server
  id: totrans-89
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Node.js HTTP 服务器
- en: If you have Node.js installed, perhaps as part of the development environment
    setup exercise we did in the previous section, then you can simply install the
    **http-server** module. Similar to Python Simple HTTP Server, this module will
    allow you to launch a lightweight HTTP server from any folder and starting serving
    pages right away.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经安装了 Node.js，也许是我们之前章节中进行的开发环境设置练习的一部分，那么你可以简单地安装 **http-server** 模块。类似于
    Python Simple HTTP Server，这个模块将允许你从任何文件夹启动一个轻量级 HTTP 服务器，并立即开始服务页面。
- en: 'First install the http-server module:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 首先安装 http-server 模块：
- en: '[PRE8]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The `-g` option in this command will install http-server module globally so
    it will become available in your command line terminal automatically. Once this
    is done, then you can launch the server from any folder you are in by simply issuing
    the following command:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个命令中，`-g` 选项会将 http-server 模块全局安装，这样它就会自动在你的命令行终端中可用。一旦完成，你就可以通过简单地输入以下命令从你所在的任何文件夹启动服务器：
- en: '[PRE9]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This command will launch a Node.js powered HTTP server on the default port 8080
    or if you want you can use the `–p` option to provide a custom port number for
    it.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将在默认端口 8080 上启动一个由 Node.js 驱动的 HTTP 服务器，或者如果你想的话，可以使用 `–p` 选项为它提供一个自定义的端口号。
- en: Tip
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: If you are running the `npm install` command on Linux/Unix/Mac OS, you will
    need to run the command in `sudo` mode or as root in order to use the `–g` global
    installation option.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在 Linux/Unix/Mac OS 上运行 `npm install` 命令，你需要以 `sudo` 模式或作为 root 运行命令，才能使用
    `–g` 全局安装选项。
- en: Understanding D3-style JavaScript
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 D3 风格的 JavaScript
- en: D3 is designed and built using functional style JavaScript which might come
    as to seem unfamiliar or even alien to someone who is more comfortable with the
    procedural or object-oriented JavaScript styles. This recipe is designed to cover
    some of the most fundamental concepts in functional JavaScript required to make
    sense of D3, and furthermore enable you to write your visualization code in D3
    style.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: D3 是使用函数式风格的 JavaScript 设计和构建的，这可能对更习惯于过程式或面向对象 JavaScript 风格的人来说显得陌生甚至不熟悉。本食谱旨在涵盖
    D3 中一些最基本的概念，这些概念对于理解 D3 至关重要，并且还能让你能够以 D3 风格编写可视化代码。
- en: Getting ready
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser: [https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter1/functional-js.html](http://
    https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter1/functional-js.html)'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的网络浏览器中打开以下文件的本地副本：[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter1/functional-js.html](http://
    https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter1/functional-js.html)
- en: How to do it...
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s dig a little deeper into the good part of JavaScript—the more functional
    side. Take a look at the following code snippet:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入探讨 JavaScript 的优点——更函数式的一面。看看以下代码片段：
- en: '[PRE10]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This code snippet generates the following simple widget on your web page:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码片段在你的网页上生成以下简单的小部件：
- en: '![How to do it...](img/2162OS_01_01.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/2162OS_01_01.jpg)'
- en: A Simple Widget with functional JavaScript
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 一个使用函数式 JavaScript 的简单小部件
- en: How it works...
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Despite its simplicity, the interface of this widget has this undeniable similarity
    to D3 style of JavaScript. This is not by coincidence but rather by leveraging
    a JavaScript programming paradigm called functional objects. Like many interesting
    topics, this is another topic that can fill an entire book by itself; nevertheless
    I will try to cover the most important and useful aspects of this particular paradigm
    in this section so you the reader cannot only understand D3''s syntax but will
    also be able to create a library in this fashion. As stated on D3''s project Wiki
    this functional programming style gives D3 much of its flexibility:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这个小部件的界面很简单，但它与 D3 风格的 JavaScript 有着不可否认的相似性。这不是巧合，而是通过利用一种名为函数式对象的 JavaScript
    编程范式来实现的。像许多有趣的话题一样，这也是一个可以单独填满一本书的话题；尽管如此，我仍将尝试在本节中涵盖这个特定范式最重要的和最有用的方面，这样你，作为读者，不仅能够理解
    D3 的语法，还能够以这种方式创建一个库。正如 D3 项目 Wiki 上所述，这种函数式编程风格给了 D3 很大的灵活性：
- en: D3's functional style allows code reuse through a diverse collection of components
    and plugins.
  id: totrans-110
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: D3 的函数式风格通过一系列组件和插件允许代码重用。
- en: ''
  id: totrans-111
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: D3 Wiki (2013, August)
  id: totrans-112
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: D3 Wiki (2013, 八月)
- en: Functions are objects
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 函数是对象
- en: 'Functions in JavaScript are objects. Like any other object, function is just
    a collection of name and value pair. The only difference between a function object
    and a regular object is that function can be invoked and additionally associated
    with two hidden properties: function context and function code. This might come
    as a surprise and unnatural, especially if you are coming from a more procedural
    programming background. Nevertheless this is the critical insight most of us need,
    to make sense of some of the strange ways that D3 uses function.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 中的函数是对象。就像任何其他对象一样，函数只是一个名称和值对的集合。函数对象与普通对象之间的唯一区别是函数可以被调用，并且还关联着两个隐藏属性：函数上下文和函数代码。这可能会让人感到惊讶和不自然，尤其是如果你来自更注重过程式编程的背景。尽管如此，这却是我们大多数人需要的关键洞察，以便理解
    D3 使用函数的一些奇怪方式。
- en: Note
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: JavaScript in its current form is generally considered not very object oriented,
    however, function object is probably one aspect where it outshines some of the
    other more object-oriented cousins.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在的 JavaScript 通常被认为不是非常面向对象，然而，函数对象可能是它超越其他一些更面向对象的同类的方面之一。
- en: 'Now with this insight in mind, let''s take a look at the code snippet again:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在有了这个洞察，让我们再次看看代码片段：
- en: '[PRE11]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: At line marked as A, B, and C we can clearly see that `instance`, `headline`,
    and `description` are all internal private variables belonging to the `SimpleWidget`
    function object. While the `render` function is a function associated with the
    `instance` object which itself is defined as an object literal. Since functions
    are just an object it can also be stored in an object/function, other variables,
    arrays, and being passed as function arguments. The result of the execution of
    function `SimpleWidget` is the returning of object instance at line I.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在标记为 A、B 和 C 的行中，我们可以清楚地看到 `instance`、`headline` 和 `description` 都是 `SimpleWidget`
    函数对象的内部私有变量。而 `render` 函数是与 `instance` 对象关联的函数，该对象本身被定义为对象字面量。由于函数只是一个对象，它也可以存储在对象/函数、其他变量、数组中，并且可以作为函数参数传递。函数
    `SimpleWidget` 执行的结果是在 I 行返回对象实例。
- en: '[PRE12]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `render` function uses some of the D3 functions that we have not covered
    yet, but let's not pay too much attention to them for now since we will cover
    each of them in depth in the next couple of chapters. Also they basically just
    render the visual representation of this widget, not having much to do with our
    topic on hand.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`render` 函数使用了我们尚未介绍的一些 D3 函数，但在这里我们不必过多关注它们，因为我们将在接下来的几章中深入探讨每个函数。此外，它们基本上只是渲染这个小部件的视觉表示，与我们当前的主题关系不大。'
- en: Tip
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Downloading the example code**'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在 [http://www.packtpub.com](http://www.packtpub.com) 的账户下载您购买的所有 Packt
    书籍的示例代码文件。如果您在其他地方购买了这本书，您可以访问 [http://www.packtpub.com/support](http://www.packtpub.com/support)
    并注册，以便将文件直接通过电子邮件发送给您。
- en: Static variable scoping
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 静态变量作用域
- en: 'Curious readers are probably asking by now how the variable scoping is resolved
    in this example since the render function has seemingly strange access to not
    only the `instance`, `headline`, and `description` variables but also the `spec`
    variable that is passed into the base `SimpleWidget` function. This seemingly
    strange variable scoping is actually determined by a simple static scoping rule.
    This rule can be thought as the following: whenever searching for a variable reference,
    variable search will be first performed locally. When variable declaration is
    not found (as in the case of `headline` on line C) then the search continues to
    the parent object (in this case `SimpleWidget` function is its static parent and
    `headline` variable declaration is found at line B). If still not found, then
    this process will continue recursively to the next static parent so on and so
    forth till it reaches global variable definition, if still not found then a reference
    error will be generated for this variable. This scoping behavior is very different
    from variable resolution rules in some of the most popular languages such as Java
    and C#; it might take some time to get used to, however don''t worry too much
    about it if you still find it confusing. With more practice and keeping static
    scoping rule in mind you will be comfortable with this kind of scoping in no time.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在好奇的读者可能正在问，在这个例子中变量作用域是如何解决的，因为渲染函数似乎可以访问`instance`、`headline`、`description`变量，甚至传递给基本`SimpleWidget`函数的`spec`变量。这种看似奇怪的作用域实际上是受一个简单的静态作用域规则决定的。这个规则可以这样理解：在搜索变量引用时，首先在本地执行变量搜索。当找不到变量声明（如行
    C 上的`headline`）时，搜索将继续到父对象（在这种情况下，`SimpleWidget`函数是其静态父对象，`headline`变量声明在行 B 上找到）。如果仍然找不到，则此过程将递归地继续到下一个静态父对象，依此类推，直到达到全局变量定义，如果仍然找不到，则为此变量生成一个引用错误。这种作用域行为与一些最流行的语言（如
    Java 和 C#）中的变量解析规则非常不同；这可能需要一些时间来适应，但是如果你仍然觉得困惑，不要过于担心。通过更多的实践并牢记静态作用域规则，你很快就会适应这种作用域。
- en: Tip
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: One word of caution here—again for folks from Java and C# backgrounds—is that
    JavaScript does not implement block scoping. The static scoping rule we described
    only applies to function/object but not at the block level.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个需要注意的地方——同样适用于来自 Java 和 C# 背景的开发者——JavaScript 不实现块作用域。我们描述的静态作用域规则仅适用于函数/对象，而不适用于块级别。
- en: '[PRE13]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Tip
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You might be inclined to think this code should produce 20 numbers. However
    in JavaScript this code creates an infinite loop. This is because JavaScript does
    not implement block scoping so the `i` in the inner loop is the same `i` used
    by the the outer loop. Therefore it gets reset by the inner loop thus and can
    never end the outer loop.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会认为这段代码应该生成 20 个数字。然而，在 JavaScript 中，这段代码会创建一个无限循环。这是因为 JavaScript 不实现块作用域，所以内层循环中的`i`与外层循环中使用的`i`是同一个。因此，它会被内层循环重置，从而永远无法结束外层循环。
- en: This pattern is usually referred as functional when compared with the more popular
    prototype-based **Pseudo-classical pattern**. The advantage of the functional
    pattern is that it provides a much better mechanism for information hiding and
    encapsulation since the private variables—in our case the `headline` and `description`
    variables—are only accessible by nested functions via the static scoping rule
    therefore the object returned by the `SimpleWidget` function is flexible yet more
    tamper-proof and durable.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 与更流行的基于原型的**伪经典模式**相比，这种模式通常被称为功能模式。功能模式的优势在于它提供了一个更好的机制来实现信息隐藏和封装，因为私有变量——在我们的例子中是`headline`和`description`变量——只能通过嵌套函数通过静态作用域规则访问，因此`SimpleWidget`函数返回的对象既灵活又更难以篡改和损坏。
- en: If we create an object in the functional style, and if all of the methods of
    the object make no use of this, then the object is durable. A durable object is
    simply a collection of functions that act as capabilities.
  id: totrans-134
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果我们以函数式风格创建一个对象，并且如果该对象的所有方法都不使用这个变量，那么这个对象就是持久的。持久对象只是作为能力集合的函数集合。
- en: ''
  id: totrans-135
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: (Crockfort D. 2008)
  id: totrans-136
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: (Crockfort D. 2008)
- en: Variable-parameter function
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 变量参数函数
- en: 'Something strange happens on line G:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在线 G 上发生了一些奇怪的事情：
- en: '[PRE14]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: You might be asking where this `arguments` variable on line G came from. It
    was never defined anywhere in this example. The `arguments` variable is a built-in
    hidden parameter that is available to functions when they are invoked. The `arguments`
    variable contains all arguments for a function invocation in an array.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想知道第 G 行的 `arguments` 变量是从哪里来的。在这个例子中，它从未在任何地方被定义过。`arguments` 变量是一个内置的隐藏参数，当函数被调用时，它对函数是可用的。`arguments`
    变量包含了一个函数调用的所有参数的数组。
- en: Tip
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'In fact, `arguments` is not really a JavaScript array object. It has length
    and can be accessed using an index, however it does not have many of the methods
    associated with a typical JavaScript array object such as `slice` or `concat`.
    When you need to use a standard JavaScript array method on `arguments`, you need
    to use the apply invocation pattern:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，`arguments` 并不是一个真正的 JavaScript 数组对象。它有长度并且可以通过索引访问，然而它并没有与典型 JavaScript
    数组对象相关联的许多方法，例如 `slice` 或 `concat`。当你需要在 `arguments` 上使用标准的 JavaScript 数组方法时，你需要使用
    apply 调用模式：
- en: '[PRE15]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This hidden parameter when combined with the ability to omit function argument
    in JavaScript allows you to write a function like `instance.headline` with unspecified
    number of parameters. In this case, we can either have one argument `h` or none.
    Because `arguments.length` returns 0 when no parameter is passed; therefore the
    `headline` function returns `h` if no parameter is passed, otherwise it turns
    into a setter if parameter `h` is provided. To clarify this explanation let''s
    take a look at the following code snippet:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这个隐藏参数与 JavaScript 中省略函数参数的能力结合使用，允许你编写一个像 `instance.headline` 这样的函数，它具有未指定的参数数量。在这种情况下，我们既可以有一个参数
    `h`，也可以没有。因为当没有传递参数时，`arguments.length` 返回 0；因此，如果没有传递参数，`headline` 函数返回 `h`，否则如果提供了参数
    `h`，它就变成了一个设置器。为了澄清这个解释，让我们看看以下代码片段：
- en: '[PRE16]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Here you can see how headline function can be used as both setter and getter
    with different parameters.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这里你可以看到如何使用不同的参数将标题函数用作设置器和获取器。
- en: Function chaining
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 函数链接
- en: The next interesting aspect of this particular example is the capability of
    chaining functions to each other. This is also the predominant function invocation
    pattern that the D3 library deploys since most of the D3 functions are designed
    to be chainable to provide a more concise and contextual programming interface.
    This is actually quite simple once you understand the variable-parameter function
    concept. Since a variable-parameter function—such as the `headline` function—can
    serve as setter and getter at the same time, then returning the `instance` object
    when it is acting as a setter allows you to immediately invoke another function
    on the invocation result; hence the chaining.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这个特定示例的下一个有趣方面是函数相互链接的能力。这也是 D3 库主要采用的函数调用模式，因为大多数 D3 函数都是设计成可链接的，以提供更简洁和上下文相关的编程接口。一旦你理解了可变参数函数的概念，这实际上是非常简单的。由于可变参数函数——例如
    `headline` 函数——可以同时作为设置器和获取器，那么当它作为设置器返回 `instance` 对象时，允许你立即在调用结果上调用另一个函数；这就是链接。
- en: 'Let''s take a look at the following code:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看以下代码：
- en: '[PRE17]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In this example, the `SimpleWidget` function returns the `instance` object (as
    on line I). Then, the `headline` function is invoked as a setter, which also returns
    the `instance` object (as on line H). The `description` function can then be invoked
    directly on return which again returns the `instance` object. Then finally the
    `render` function can be called.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`SimpleWidget` 函数返回 `instance` 对象（如第 I 行所示）。然后，`headline` 函数作为设置器被调用，它也返回
    `instance` 对象（如第 H 行所示）。然后可以直接在返回值上调用 `description` 函数，它再次返回 `instance` 对象。然后最后调用
    `render` 函数。
- en: Now with the knowledge of functional JavaScript and a working ready-to-go D3
    data visualization development environment, we are ready to dive into the rich
    concepts and techniques that D3 has to offer. However before we take off, I would
    like to cover a few more important areas—how to find and share code and how to
    get help when you are stuck.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了功能 JavaScript 和一个现成的 D3 数据可视化开发环境，我们准备深入探索 D3 提供的丰富概念和技术。然而在我们起飞之前，我想再覆盖几个重要领域——如何寻找和分享代码，以及当你遇到困难时如何寻求帮助。
- en: There's more...
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Let's take a look at some additional helpful resources.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一些额外的有用资源。
- en: Finding and sharing code
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 寻找和分享代码
- en: 'One of the great things about D3 when compared with other visualization options
    is that it offers a wealth of examples and tutorials that you can draw your inspiration
    from. During the course of creating my own open source visualization charting
    library and the creation of this book, I had drawn heavily on these resources.
    I am going to list some of the most popular options available in this aspect.
    This list is by no means a comprehensive directory but rather a starting place
    for you to explore:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他可视化选项相比，D3 的一个优点是它提供了丰富的示例和教程，您可以从中汲取灵感。在创建我自己的开源可视化图表库和本书的过程中，我大量借鉴了这些资源。我将列出一些在这个方面最受欢迎的选项。这个列表绝对不是全面的目录，而是一个供您探索的起点：
- en: The D3 gallery ([https://github.com/mbostock/d3/wiki/Gallery](https://github.com/mbostock/d3/wiki/Gallery))
    contains some of the most interesting examples that you can find online regarding
    D3 usage. It contains examples on different visualization charts, specific techniques,
    and some interesting visualization implementations in the wild, among others.
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: D3 画廊 ([https://github.com/mbostock/d3/wiki/Gallery](https://github.com/mbostock/d3/wiki/Gallery))
    包含了一些您可以在网上找到的关于 D3 使用的最有趣的示例。它包括不同可视化图表的示例、特定技术以及一些有趣的野外可视化实现等。
- en: BioVisualize[(http://biovisualize.github.io/d3visualization](http://(http://biovisualize.github.io/d3visualization))
    is another D3 gallery with categorization, to help you find your desired visualization
    example online quickly.
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BioVisualize[(http://biovisualize.github.io/d3visualization](http://(http://biovisualize.github.io/d3visualization))
    是另一个带有分类的 D3 画廊，可以帮助您快速在线找到所需的可视化示例。
- en: The D3 tutorials page ([https://github.com/mbostock/d3/wiki/Tutorials](https://github.com/mbostock/d3/wiki/Tutorials))
    contains a collection of tutorials, talks and slides created by various contributors
    over time, to demonstrate in detail how to use a lot of D3 concepts and techniques.
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: D3 教程页面 ([https://github.com/mbostock/d3/wiki/Tutorials](https://github.com/mbostock/d3/wiki/Tutorials))
    收集了各种贡献者在不同时间创建的教程、演讲和幻灯片，详细展示了如何使用许多 D3 概念和技术。
- en: D3 plugins ([https://github.com/d3/d3-plugins](https://github.com/d3/d3-plugins)).
    Maybe some features are missing in D3 for your visualization needs? Before you
    decide to implement your own, make sure to check out D3 plugin repository. It
    contains a wide variety of plugins that provide some of the common and, sometimes,
    uncommon features in the visualization world.
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: D3 插件 ([https://github.com/d3/d3-plugins](https://github.com/d3/d3-plugins)).
    可能 D3 对于您的可视化需求缺少一些功能？在您决定实现自己的功能之前，请务必查看 D3 插件仓库。它包含了许多插件，这些插件提供了可视化领域中一些常见和有时不常见的功能。
- en: The D3 API ([https://github.com/mbostock/d3/wiki/API-Reference](https://github.com/mbostock/d3/wiki/API-Reference))
    is very well documented. This is where you can find detailed explanations for
    every function and property that the D3 library has to offer.
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: D3 API ([https://github.com/mbostock/d3/wiki/API-Reference](https://github.com/mbostock/d3/wiki/API-Reference))
    非常详细地记录了。在这里，您可以找到 D3 库提供的每个函数和属性的详细解释。
- en: Mike Bostok's Blocks ([http://bl.ocks.org/mbostock](http://bl.ocks.org/mbostock))
    is a D3 example site, where some of the more intriguing visualization example
    can be found and which is maintained by its author Mike Bostock.
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mike Bostock 的 Blocks ([http://bl.ocks.org/mbostock](http://bl.ocks.org/mbostock))
    是一个 D3 示例网站，其中可以找到一些更引人入胜的可视化示例，并由其作者 Mike Bostock 维护。
- en: JS Bin ([http://jsbin.com/ugacud/1/edit](http://jsbin.com/ugacud/1/edit)) is
    a pre-built D3 test and experiment environment completely hosted online. You can
    easily prototype a simple script using this tool or share your creation with other
    members in the community.
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JS Bin ([http://jsbin.com/ugacud/1/edit](http://jsbin.com/ugacud/1/edit)) 是一个完全在线托管的前置
    D3 测试和实验环境。您可以使用这个工具轻松地原型化一个简单的脚本，或者与社区中的其他成员分享您的创作。
- en: JS Fiddle ([http://jsfiddle.net/qAHC2/](http://jsfiddle.net/qAHC2/)) is similar
    to JS Bin; it also is a hosted-online JavaScript code prototyping and sharing
    platform.
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JS Fiddle ([http://jsfiddle.net/qAHC2/](http://jsfiddle.net/qAHC2/)) 与 JS Bin
    类似；它也是一个在线托管 JavaScript 代码原型和共享平台。
- en: How to get help
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何获取帮助
- en: 'Even with all the examples, tutorial, and cookbook like this, you might still
    run into challenges when creating your visualization. Good news here is that D3
    has a broad and active support community. Simply "googling" your question can
    most often yield a satisfying answer. Even if it does not, don''t worry; D3 has
    a robust community-based support:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 即使有所有这些示例、教程和食谱，当你在创建可视化时可能仍然会遇到挑战。好消息是，D3 拥有一个广泛且活跃的支持社区。简单地“谷歌”你的问题通常可以找到令人满意的答案。即使没有，也不要担心；D3
    拥有一个强大的基于社区的支撑：
- en: 'D3.js on Stack Overflow ([http://stackoverflow.com/questions/tagged/d3.js](http://stackoverflow.com/questions/tagged/d3.js)):
    Stack Overflow is the most popular community-based free Q&A site for technologists.
    D3 is a specific category on the Stack Overflow site to help you reach the experts
    and get an answer to your question quickly.'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'D3.js 在 Stack Overflow ([http://stackoverflow.com/questions/tagged/d3.js](http://stackoverflow.com/questions/tagged/d3.js)):
    Stack Overflow 是技术人员的最受欢迎的基于社区的免费问答网站。D3 是 Stack Overflow 网站上的一个特定类别，帮助你快速找到专家并得到问题的答案。'
- en: 'The D3 Google group ([https://groups.google.com/forum/?fromgroups#!forum/d3-js](https://groups.google.com/forum/?fromgroups#!forum/d3-js)):
    This is the official user group for not just D3 but also other related libraries
    in its ecosystem.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'D3 Google 群组 ([https://groups.google.com/forum/?fromgroups#!forum/d3-js](https://groups.google.com/forum/?fromgroups#!forum/d3-js)):
    这不仅是 D3 的官方用户群，还包括其生态系统中的其他相关库。'
