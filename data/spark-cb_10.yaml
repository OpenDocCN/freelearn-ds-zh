- en: Chapter 10. Recommender Systems
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章。推荐系统
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下内容：
- en: Collaborative filtering using explicit feedback
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用显式反馈的协同过滤
- en: Collaborative filtering using implicit feedback
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用隐式反馈的协同过滤
- en: Introduction
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: 'The following is Wikipedia''s definition of recommender systems:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是维基百科对推荐系统的定义：
- en: '*"Recommender systems are a subclass of information filtering system that seek
    to predict the ''rating'' or ''preference'' that user would give to an item."*'
  id: totrans-6
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “推荐系统是信息过滤系统的一个子类，旨在预测用户对物品的‘评分’或‘偏好’。”
- en: 'Recommender systems have gained immense popularity in recent years. Amazon
    uses them to recommend books, Netflix for movies, and Google News to recommend
    news stories. As the proof is in the pudding, here are some examples of the impact
    recommendations can have (source: Celma, Lamere, 2008):'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 推荐系统近年来变得非常受欢迎。亚马逊用它们来推荐书籍，Netflix用来推荐电影，Google新闻用来推荐新闻故事。以下是一些推荐的影响的例子（来源：Celma，Lamere，2008）：
- en: Two-thirds of the movies watched on Netflix are recommended
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Netflix上观看的电影有三分之二是推荐的
- en: 38 percent of the news clicks on Google News are recommended
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 谷歌新闻点击量的38%是推荐的
- en: 35 percent of the sales at Amazon sales are the result of recommendations
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 亚马逊销售额的35%是推荐的结果
- en: As we have seen in the previous chapters, features and feature selection play
    a major role in the efficacy of machine learning algorithms. Recommender engine
    algorithms discover these features, called **latent features**, automatically.
    In short, there are latent features responsible for a user to like one movie and
    dislike another. If another user has corresponding latent features, there is a
    good chance that this person will also have a similar taste for movies.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前几章中看到的，特征和特征选择在机器学习算法的有效性中起着重要作用。推荐引擎算法会自动发现这些特征，称为**潜在特征**。简而言之，有一些潜在特征决定了用户喜欢一部电影而不喜欢另一部电影。如果另一个用户具有相应的潜在特征，那么这个人也很可能对电影有相似的口味。
- en: 'To understand this better, let''s look at some sample movie ratings:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解这一点，让我们看一些样本电影评分：
- en: '| Movie | Rich | Bob | Peter | Chris |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| 电影 | Rich | Bob | Peter | Chris |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| *Titanic* | 5 | 3 | 5 | ? |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| *Titanic* | 5 | 3 | 5 | ? |'
- en: '| *GoldenEye* | 3 | 2 | 1 | 5 |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| *GoldenEye* | 3 | 2 | 1 | 5 |'
- en: '| *Toy Story* | 1 | ? | 2 | 2 |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| *Toy Story* | 1 | ? | 2 | 2 |'
- en: '| *Disclosure* | 4 | 4 | ? | 4 |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| *Disclosure* | 4 | 4 | ? | 4 |'
- en: '| *Ace Ventura* | 4 | ? | 4 | ? |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| *Ace Ventura* | 4 | ? | 4 | ? |'
- en: 'Our goal is to predict the missing entries shown with the ? symbol. Let''s
    see if we can find some features associated with movies. At first, you will look
    at the genres, as shown here:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标是预测用?符号表示的缺失条目。让我们看看是否能找到一些与电影相关的特征。首先，您将查看电影类型，如下所示：
- en: '| Movie | Genre |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| 电影 | 类型 |'
- en: '| --- | --- |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| *Titanic* | Action, Romance |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| *Titanic* | 动作，爱情 |'
- en: '| *GoldenEye* | Action, Adventure, Thriller |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| *GoldenEye* | 动作，冒险，惊悚 |'
- en: '| *Toy Story* | Animation, Children''s, Comedy |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| *Toy Story* | 动画，儿童，喜剧 |'
- en: '| *Disclosure* | Drama, Thriller |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| *Disclosure* | 戏剧，惊悚 |'
- en: '| *Ace Ventura* | Comedy |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| *Ace Ventura* | 喜剧 |'
- en: Now each movie can be rated for each genre from 0 to 1\. For example, *GoldenEye*
    is not primarily a romance, so it may have 0.1 rating for romance, but 0.98 rating
    for action. Therefore, each movie can be represented as a feature vector.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在每部电影可以根据每种类型进行评分，评分范围从0到1。例如，*GoldenEye*不是一部主要的爱情片，所以它可能在爱情方面的评分为0.1，但在动作方面的评分为0.98。因此，每部电影可以被表示为一个特征向量。
- en: Note
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In this chapter, we are going to use the MovieLens dataset from [grouplens.org/datasets/movielens/](http://grouplens.org/datasets/movielens/).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用[grouplens.org/datasets/movielens/](http://grouplens.org/datasets/movielens/)的MovieLens数据集。
- en: The InfoObjects big data sandbox comes loaded with 100k movie ratings. From
    GroupLens you can also download 1 million-or even up to 10 million-ratings if
    you would like to analyze bigger dataset for better predictions.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: InfoObjects大数据沙箱中加载了100k部电影评分。您还可以从GroupLens下载100万甚至高达1000万的评分，以便分析更大的数据集以获得更好的预测。
- en: 'We are going to use two files from this dataset:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用这个数据集中的两个文件：
- en: '`u.data`: This has a tab-separated list of movie ratings in the following format:'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`u.data`：这是一个以制表符分隔的电影评分列表，格式如下：'
- en: '[PRE0]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Since we are not going to need the time stamp, we are going to filter it out
    from the data in our recipe
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们不需要时间戳，我们将从我们的配方数据中将其过滤掉
- en: '`u.item`: This has a tab-separated list of movies in the following format:'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`u.item`：这是一个以制表符分隔的电影列表，格式如下：'
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This chapter will cover how we can make recommendations using MLlib, the Spark's
    machine learning library.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍如何使用MLlib进行推荐，MLlib是Spark的机器学习库。
- en: Collaborative filtering using explicit feedback
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用显式反馈的协同过滤
- en: Collaborative filtering is the most commonly used technique for recommender
    systems. It has an interesting property—it learns the features on its own. So,
    in the case of movie ratings, we do not need to provide actual human feedback
    on whether the movie is romantic or action.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 协同过滤是推荐系统中最常用的技术。它有一个有趣的特性——它自己学习特征。因此，在电影评分的情况下，我们不需要提供有关电影是浪漫还是动作的实际人类反馈。
- en: As we saw in the *Introduction* section that movies have some latent features,
    such as genre, in the same way users have some latent features, such as age, gender,
    and more. Collaborative filtering does not need them, and figures out latent features
    on its own.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在*介绍*部分看到的，电影有一些潜在特征，比如类型，同样用户也有一些潜在特征，比如年龄，性别等。协同过滤不需要它们，并且自己找出潜在特征。
- en: 'We are going to use an algorithm called **Alternating Least Squares** (**ALS**)
    in this example. This algorithm explains the association between a movie and a
    user based on a small number of latent features. It uses three training parameters:
    rank, number of iterations, and lambda (explained later in the chapter). The best
    way to figure out the optimum values of these three parameters is to try different
    values and see which value has the smallest amount of **Root Mean Square Error**
    (**RMSE**). This error is like a standard deviation, but it is based on model
    results rather than actual data.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将使用一种名为**交替最小二乘法**（**ALS**）的算法。该算法基于少量潜在特征解释电影和用户之间的关联。它使用三个训练参数：秩、迭代次数和lambda（在本章后面解释）。找出这三个参数的最佳值的最佳方法是尝试不同的值，看哪个值的**均方根误差**（**RMSE**）最小。这个误差类似于标准差，但是它是基于模型结果而不是实际数据的。
- en: Getting ready
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Upload the `moviedata` downloaded from GroupLens to the `moviedata` folder
    in `hdfs`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 将从GroupLens下载的`moviedata`上传到`hdfs`中的`moviedata`文件夹：
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We are going to add some personalized ratings to this database so that we can
    test the accuracy of the recommendations.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将向这个数据库添加一些个性化评分，以便测试推荐的准确性。
- en: You can look at `u.item` to pick some movies and rate them. The following are
    some movies I chose, alongside my ratings. Feel free to choose the movies you
    would like to rate and provide your own ratings.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以查看`u.item`来挑选一些电影并对其进行评分。以下是我选择的一些电影，以及我的评分。随意选择你想评分的电影并提供你自己的评分。
- en: '| Movie ID | Movie name | Rating (1-5) |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| 电影ID | 电影名称 | 评分（1-5） |'
- en: '| --- | --- | --- |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| 313 | *Titanic* | 5 |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| 313 | *泰坦尼克号* | 5 |'
- en: '| 2 | *GoldenEye* | 3 |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| 2 | *黄金眼* | 3 |'
- en: '| 1 | *Toy Story* | 1 |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| 1 | *玩具总动员* | 1 |'
- en: '| 43 | *Disclosure* | 4 |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| 43 | *揭秘* | 4 |'
- en: '| 67 | *Ace Ventura* | 4 |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| 67 | *玩具总动员* | 4 |'
- en: '| 82 | *Jurassic Park* | 5 |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| 82 | *侏罗纪公园* | 5 |'
- en: '| 96 | *Terminator 2* | 5 |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| 96 | *终结者2* | 5 |'
- en: '| 121 | *Independence Day* | 4 |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| 121 | *独立日* | 4 |'
- en: '| 148 | *The Ghost and the Darkness* | 4 |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| 148 | *鬼与黑暗* | 4 |'
- en: 'The highest user ID is 943, so we are going to add the new user as 944\. Let''s
    create a new comma-separated file `p.data` with the following data:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 最高的用户ID是943，所以我们将把新用户添加为944。让我们创建一个新的逗号分隔的文件`p.data`，其中包含以下数据：
- en: '[PRE3]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How to do it…
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Upload the personalized movie data to `hdfs`:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将个性化电影数据上传到`hdfs`：
- en: '[PRE4]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Import the ALS and rating classes:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入ALS和评分类：
- en: '[PRE5]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Load the rating data into an RDD:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将评分数据加载到RDD中：
- en: '[PRE6]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Transform the `val data` into the RDD of rating:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`val data`转换为评分的RDD：
- en: '[PRE7]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Load the personalized rating data into the RDD:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将个性化评分数据加载到RDD中：
- en: '[PRE8]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Transform the data into the RDD of personalized rating:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将数据转换为个性化评分的RDD：
- en: '[PRE9]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Combine ratings with personalized ratings:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将评分与个性化评分结合：
- en: '[PRE10]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Build the model using ALS with rank 5 and 10 iterations and 0.01 as lambda:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用秩为5和10次迭代以及0.01作为lambda构建ALS模型：
- en: '[PRE11]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Let's predict what my rating would be for a given movie based on this model.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们根据这个模型预测我对给定电影的评分会是多少。
- en: 'Let''s start with original *Terminator* with movie ID 195:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从原始的*终结者*开始，电影ID为195：
- en: '[PRE12]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Since I rated *Terminator* *2* 5, this is a reasonable prediction.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我给*终结者2*评了5分，这是一个合理的预测。
- en: 'Let''s try *Ghost* with movie ID 402:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们尝试一下*鬼*，电影ID为402：
- en: '[PRE13]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: It's a reasonable guess.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个合理的猜测。
- en: 'Let''s try *The Ghost and the Darkness*, the movie I already rated, with the
    ID 148:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们尝试一下*鬼与黑暗*，这是我已经评分的电影，ID为148：
- en: '[PRE14]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Very close prediction, knowing that I rated the movie 4.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 非常接近的预测，知道我给这部电影评了4分。
- en: You can use more movies to the `train` dataset. There are also 1 million and
    10 million rating datasets available that will refine the algorithm even more.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将更多电影添加到`train`数据集中。还有100万和1000万的评分数据集可用，这将进一步完善算法。
- en: Collaborative filtering using implicit feedback
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用隐式反馈的协同过滤
- en: Sometimes the feedback available is not in the form of ratings but in the form
    of audio tracks played, movies watched, and so on. This data, at first glance,
    may not look as good as explicit ratings by users, but this is much more exhaustive.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，可用的反馈不是评分的形式，而是音轨播放、观看的电影等形式。这些数据乍一看可能不如用户的明确评分好，但这更加详尽。
- en: Getting ready
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We are going to use million song data from [http://www.kaggle.com/c/msdchallenge/data](http://www.kaggle.com/c/msdchallenge/data).
    You need to download three files:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用来自[http://www.kaggle.com/c/msdchallenge/data](http://www.kaggle.com/c/msdchallenge/data)的百万首歌数据。你需要下载三个文件：
- en: '`kaggle_visible_evaluation_triplets`'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kaggle_visible_evaluation_triplets`'
- en: '`kaggle_users.txt`'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kaggle_users.txt`'
- en: '`kaggle_songs.txt`'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kaggle_songs.txt`'
- en: 'Now perform the following steps:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在执行以下步骤：
- en: 'Create a `songdata` folder in `hdfs` and put all the three files here:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`hdfs`中创建一个`songdata`文件夹，并将所有三个文件放在这里：
- en: '[PRE15]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Upload the song data to `hdfs`:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将歌曲数据上传到`hdfs`：
- en: '[PRE16]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We still need to do some more preprocessing. ALS in MLlib takes both user and
    product IDs as integer. The `Kaggle_songs.txt` file has song IDs and sequence
    number next to it, The `Kaggle_users.txt` file does not have it. Our goal is to
    replace the `userid` and `songid` in `triplets` data with the corresponding integer
    sequence numbers. To do this, follow these steps:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仍然需要做一些预处理。MLlib中的ALS需要用户和产品ID都是整数。`Kaggle_songs.txt`文件有歌曲ID和其后的序列号，而`Kaggle_users.txt`文件没有。我们的目标是用相应的整数序列号替换`triplets`数据中的`userid`和`songid`。为此，请按照以下步骤操作：
- en: 'Load the `kaggle_songs` data as an RDD:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`kaggle_songs`数据加载为RDD：
- en: '[PRE17]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Load the user data as an RDD:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将用户数据加载为RDD：
- en: '[PRE18]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Load the triplets (user, song, plays) data as an RDD:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将三元组（用户、歌曲、播放次数）数据加载为RDD：
- en: '[PRE19]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Convert the song data into the `PairRDD`:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将歌曲数据转换为`PairRDD`：
- en: '[PRE20]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Collect the `songIndex` as Map:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 收集`songIndex`作为Map：
- en: '[PRE21]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Convert the user data into the `PairRDD`:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将用户数据转换为`PairRDD`：
- en: '[PRE22]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Collect the `userIndex` as Map:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 收集`userIndex`作为Map：
- en: '[PRE23]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: We will need both `songMap` and `userMap` to replace `userId` and `songId` in
    triplets. Spark will automatically make both these maps available on the cluster
    as needed. This works fine but is expensive to send across the cluster every time
    it is needed.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要`songMap`和`userMap`来替换三元组中的`userId`和`songId`。Spark会根据需要自动在集群上提供这两个映射。这样做效果很好，但每次需要发送到集群时都很昂贵。
- en: A better approach is to use a Spark feature called `broadcast` variables. The
    `broadcast` variables allow the Spark job to keep a read-only copy of a variable
    cached on each machine, rather than shipping a copy with each task. Spark distributes
    broadcast variables using efficient broadcast algorithms, so communication cost
    over the network is negligible.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 更好的方法是使用Spark的一个特性叫做`broadcast`变量。`broadcast`变量允许Spark作业在每台机器上保留一个只读副本的变量缓存，而不是在每个任务中传输一个副本。Spark使用高效的广播算法来分发广播变量，因此网络上的通信成本可以忽略不计。
- en: 'As you can guess, both `songMap` and `userMap` are good candidates to be wrapped
    around the `broadcast` variables. Perform the following steps:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可以猜到的，`songMap`和`userMap`都是很好的候选对象，可以包装在`broadcast`变量周围。执行以下步骤：
- en: 'Broadcast the `userMap`:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 广播`userMap`：
- en: '[PRE24]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Broadcast the `songMap`:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 广播`songMap`：
- en: '[PRE25]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Convert the `triplet` into an array:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`triplet`转换为数组：
- en: '[PRE26]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Import the rating:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入评分：
- en: '[PRE27]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Convert the `triplet` array into an RDD of rating objects:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`triplet`数组转换为评分对象的RDD：
- en: '[PRE28]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Now, our data is ready to do the modeling and prediction.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的数据已经准备好进行建模和预测。
- en: How to do it…
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Import ALS:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入ALS：
- en: '[PRE29]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Build a model using the ALS with rank 10 and 10 iterations:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用ALS构建一个具有rank 10和10次迭代的模型：
- en: '[PRE30]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Extract the user and song tuples from the triplet:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从三元组中提取用户和歌曲元组：
- en: '[PRE31]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Make predictions for the user and song tuples:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为用户和歌曲元组做出预测：
- en: '[PRE32]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: How it works…
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'Our model takes four parameters to work, as shown here:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的模型需要四个参数才能工作，如下所示：
- en: '| Parameter name | Description |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| 参数名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Rank | Number of latent features in the model |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| Rank | 模型中的潜在特征数 |'
- en: '| Iterations | Number of iterations for this factorization to run |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| Iterations | 用于运行此因子分解的迭代次数 |'
- en: '| Lambda | Over fitting parameter |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| Lambda | 过拟合参数 |'
- en: '| Alpha | Relative weight of observed interactions |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| Alpha | 观察交互的相对权重 |'
- en: As you saw in the case of gradient descent, these parameters need to be set
    by hand. We can try different values, but the value that works best is rank=50,
    iterations=30, lambda=0.00001, and alpha= 40.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在梯度下降的情况下看到的，这些参数需要手动设置。我们可以尝试不同的值，但最好的值是rank=50，iterations=30，lambda=0.00001，alpha=40。
- en: There's more…
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: One way to test different parameters quickly is to spawn a spark cluster on
    Amazon EC2\. This gives you flexibility to go with a powerful instance to test
    these parameters fast. I have created a public s3 bucket `com.infoobjects.songdata`
    to pull data to Spark.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 快速测试不同参数的一种方法是在Amazon EC2上生成一个Spark集群。这样可以灵活地选择一个强大的实例来快速测试这些参数。我已经创建了一个名为`com.infoobjects.songdata`的公共s3存储桶，以便将数据传输到Spark。
- en: 'Here are the steps you need to follow to load the data from S3 and run the
    ALS:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是您需要遵循的步骤，从S3加载数据并运行ALS：
- en: '[PRE33]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: These are the predictions made on the `usersSongs` matrix.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是在`usersSongs`矩阵上做出的预测。
