- en: '15'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '15'
- en: Evolutionary Image Reconstruction with Genetic Algorithms
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用遗传算法进行图像进化重建
- en: In this chapter, we are going to experiment with one of the most popular ways
    genetic algorithms have been applied to image processing – the reconstruction
    of an image with a set of semi-transparent polygons. Along the way, we will gain
    useful experience in **image processing**, coupled with a visual insight into
    the evolutionary process.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将尝试遗传算法在图像处理中的一种应用方式——用一组半透明的多边形重建图像。在这个过程中，我们将获得有用的**图像处理**经验，并且对进化过程有直观的了解。
- en: We will start with an overview of image processing in Python and get acquainted
    with two useful libraries – *Pillow* and *OpenCV-Python*. Then, we will find out
    how an image can be drawn from scratch using polygons and how the difference between
    two images can be calculated. Next, we will develop a genetic algorithm-based
    program to reconstruct a segment of a famous painting using polygons and examine
    the results.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先概述 Python 中的图像处理，并熟悉两个有用的库——*Pillow* 和 *OpenCV-Python*。接下来，我们将了解如何从零开始使用多边形绘制图像，并计算两张图像之间的差异。然后，我们将开发一个基于遗传算法的程序，使用多边形重建一幅著名画作的一部分，并检查结果。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Getting familiar with several image processing libraries for Python
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 熟悉几个用于 Python 的图像处理库
- en: Understanding how to programmatically draw an image using polygons
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解如何通过编程使用多边形绘制图像
- en: Finding out how to programmatically compare two given images
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解如何通过编程比较两张给定的图像
- en: Using genetic algorithms, in combination with image processing libraries, to
    reconstruct an image using polygons
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用遗传算法，结合图像处理库，通过多边形重建图像
- en: We will start this chapter by providing an overview of the image reconstruction
    task.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将通过概述图像重建任务开始。
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'In this chapter, we will be using Python 3 with the following supporting libraries:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将使用 Python 3 和以下支持库：
- en: '**deap**'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**deap**'
- en: '**numpy**'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**numpy**'
- en: '**matplotlib**'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**matplotlib**'
- en: '**seaborn**'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**seaborn**'
- en: '**pillow** – introduced in this chapter'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**pillow** – 本章介绍'
- en: '**opencv-python (cv2)** – introduced in this chapter'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**opencv-python (cv2)** – 本章介绍'
- en: Important note
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: If you use the **requirements.txt** file we provide (see [*Chapter 3*](B20851_03.xhtml#_idTextAnchor091)),
    these libraries are already included in your environment.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用我们提供的**requirements.txt**文件（参见[*第 3 章*](B20851_03.xhtml#_idTextAnchor091)），这些库已经包含在你的环境中了。
- en: The programs that will be used in this chapter can be found in this book’s GitHub
    repository at [https://github.com/PacktPublishing/Hands-On-Genetic-Algorithms-with-Python-Second-Edition/tree/main/chapter_15](https://github.com/PacktPublishing/Hands-On-Genetic-Algorithms-with-Python-Second-Edition/tree/main/chapter_15).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 本章使用的程序可以在本书的 GitHub 仓库中找到：[https://github.com/PacktPublishing/Hands-On-Genetic-Algorithms-with-Python-Second-Edition/tree/main/chapter_15](https://github.com/PacktPublishing/Hands-On-Genetic-Algorithms-with-Python-Second-Edition/tree/main/chapter_15)。
- en: 'Check out the following video to see the code in action:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频，查看代码的实际运行：
- en: '[https://packt.link/OEBOd](https://packt.link/OEBOd)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/OEBOd](https://packt.link/OEBOd)'
- en: Reconstructing images with polygons
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用多边形重建图像
- en: One of the most captivating applications of genetic algorithms in image processing
    is reconstructing a given image using a collection of semi-transparent, overlapping
    shapes. This approach is not only enjoyable and educational in terms of image
    processing experience but also offers a compelling visual representation of the
    evolutionary process. Furthermore, these experiments can lead to a deeper understanding
    of visual arts and potentially contribute to advancements in image analysis and
    compression.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 遗传算法在图像处理中的一个最引人注目的应用是通过一组半透明、重叠的形状重建给定图像。这种方法不仅在图像处理经验方面令人愉快且富有教育意义，还提供了进化过程的直观视觉呈现。此外，这些实验可能会加深对视觉艺术的理解，并有助于图像分析和压缩的进展。
- en: In these image reconstruction experiments – multiple variations of which can
    be found on the internet – a familiar image, often a famous painting or a fragment
    of it, is used as a reference. The goal is to construct a similar image by assembling
    a collection of overlapping shapes, typically polygons, of varying colors and
    transparencies.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些图像重建实验中——其中有许多变种可以在互联网上找到——通常使用一张熟悉的图像，往往是著名的画作或其一部分，作为参考。目标是通过拼接一组重叠的形状，通常是多边形，且这些形状具有不同的颜色和透明度，来构建一张相似的图像。
- en: Here, we will address this challenge by utilizing the genetic algorithms approach
    and the `deap` library, just like we’ve done for numerous types of problems throughout
    this book. However, since we will need to draw images and compare them to a reference
    image, let’s get acquainted with the basics of image processing in Python.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将通过使用遗传算法方法和 `deap` 库来应对这一挑战，就像我们在本书中为多种类型的问题所做的那样。然而，由于我们需要绘制图像并将其与参考图像进行比较，因此让我们先了解一下Python中的图像处理基础知识。
- en: Image processing in Python
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python中的图像处理
- en: To achieve our goal, we will need to carry out various image processing operations;
    for example, we will need to create an image from scratch, draw shapes onto an
    image, plot an image, open an image file, save an image to a file, compare two
    images, and possibly resize an image. In the following sections, we will explore
    some of the ways these operations can be performed when using Python.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现我们的目标，我们需要进行各种图像处理操作；例如，我们需要从头开始创建一张图像，在图像上绘制形状，绘制图像，打开图像文件，将图像保存到文件，比较两幅图像，并可能调整图像大小。在接下来的部分中，我们将探讨在使用Python时，如何执行这些操作。
- en: Python image processing libraries
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python图像处理库
- en: Out of the wealth of image processing libraries available for Python programmers,
    we chose to use two of the most prominent ones. These libraries will be briefly
    discussed in the following subsections.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在众多可供Python程序员使用的图像处理库中，我们选择了两个最为突出的库。以下小节将简要讨论这些库。
- en: The Pillow library
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Pillow库
- en: '*Pillow* is a currently maintained fork of the original *Python Imaging Library*
    (`PIL`). It offers support for opening, manipulating, and saving image files of
    various formats. Since it allows us to handle image files, draw shapes, control
    their transparency, and manipulate pixels, we will use it as our main tool in
    creating the reconstructed image.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*Pillow* 是原始 *Python Imaging Library*（`PIL`）的一个当前维护版本。它支持打开、处理和保存多种格式的图像文件。由于它允许我们处理图像文件、绘制形状、控制透明度并操作像素，我们将使用它作为重建图像的主要工具。'
- en: 'The home page of this library can be found at [https://python-pillow.org/](https://python-pillow.org/).
    A typical installation of Pillow uses the `pip` command, as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 该库的主页可以在这里找到：[https://python-pillow.org/](https://python-pillow.org/)。Pillow的典型安装使用
    `pip` 命令，如下所示：
- en: '[PRE0]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The Pillow library uses the `PIL` namespace. If you have the original `PIL`
    library already installed, you will have to uninstall it first. More information
    can be found in the documentation, which is located at [https://pillow.readthedocs.io/en/stable/index.html](https://pillow.readthedocs.io/en/stable/index.html).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Pillow库使用 `PIL` 命名空间。如果你已经安装了原始的 `PIL` 库，你需要先卸载它。更多信息可以在文档中找到，文档地址是 [https://pillow.readthedocs.io/en/stable/index.html](https://pillow.readthedocs.io/en/stable/index.html)。
- en: The OpenCV-Python library
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: OpenCV-Python库
- en: '*OpenCV* is an elaborate library that provides numerous algorithms related
    to computer vision and machine learning. It supports a wide variety of programming
    languages and is available on different platforms. *OpenCV-Python* is the Python
    API for this library. It combines the speed of the C++ API with the ease of use
    of the Python language. Here, we will mainly make use of this library to calculate
    the difference between two images, since it allows us to represent an image as
    a numeric array. We will also use its `GaussianBlur` function, which produces
    a blurred version of an image.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*OpenCV* 是一个复杂的库，提供与计算机视觉和机器学习相关的众多算法。它支持多种编程语言，并且在不同的平台上可用。*OpenCV-Python*
    是该库的Python接口。它结合了C++接口的速度和Python语言的易用性。在这里，我们将主要利用这个库来计算两幅图像之间的差异，因为它允许我们将图像表示为数值数组。我们还将使用其
    `GaussianBlur` 函数，该函数会产生图像的模糊版本。'
- en: 'The home page of OpenCV-Python can be found here: [https://github.com/opencv/opencv-python](https://github.com/opencv/opencv-python)'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: OpenCV-Python的主页可以在这里找到：[https://github.com/opencv/opencv-python](https://github.com/opencv/opencv-python)
- en: 'The library consists of four different packages, all of which use the same
    namespace (`cv2`). Only one of these packages should be selected to be installed
    in a single environment. For our purposes, we can use the following command, which
    only installs the main modules:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 该库包含四个不同的包，它们都使用相同的命名空间（`cv2`）。在单个环境中，应该只选择安装其中一个包。为了我们的目的，可以使用以下命令，只安装主要模块：
- en: '[PRE1]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: More information can be found in the OpenCV documentation, which is located
    at [https://docs.opencv.org/master/](https://docs.opencv.org/master/).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息可以在 OpenCV 文档中找到，文档地址为 [https://docs.opencv.org/master/](https://docs.opencv.org/master/)。
- en: Drawing images with polygons
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用多边形绘制图像
- en: 'To draw an image from scratch, we can use *Pillow*’s `Image` and `ImageDraw`
    classes as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要从头绘制一张图像，我们可以使用 *Pillow* 的 `Image` 和 `ImageDraw` 类，代码如下：
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: draw.polygon([(x1, y1), (x2, y2), (x3, y3)], (red, green, blue,
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: draw.polygon([(x1, y1), (x2, y2), (x3, y3)], (red, green, blue,
- en: alpha))
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: alpha))
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: MSE = np.sum(
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: MSE = np.sum(
- en: (cv2Image1.astype("float") -
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: (cv2Image1.astype("float") -
- en: cv2Image2.astype("float"))**2)/float(numPixels)
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: cv2Image2.astype("float"))**2)/float(numPixels)
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[0.1499488467959301, 0.3812631075049196, 0.000439458056299,'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '[0.1499488467959301, 0.3812631075049196, 0.000439458056299,'
- en: 0.9988170920722447, 0.9975357316889601, 0.9997461395379549,
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 0.9988170920722447, 0.9975357316889601, 0.9997461395379549,
- en: '...'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: 0.9998952203500615, 0.48148512088979356, 0.083285509827404]
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 0.9998952203500615, 0.48148512088979356, 0.083285509827404]
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: POLYGON_SIZE = 3
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: POLYGON_SIZE = 3
- en: NUM_OF_POLYGONS = 100
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: NUM_OF_POLYGONS = 100
- en: '[PRE6]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: imageTest = image_test.ImageTest(MONA_LISA_PATH, POLYGON_SIZE)
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: imageTest = image_test.ImageTest(MONA_LISA_PATH, POLYGON_SIZE)
- en: '[PRE7]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: BOUNDS_LOW, BOUNDS_HIGH = 0.0, 1.0
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: BOUNDS_LOW, BOUNDS_HIGH = 0.0, 1.0
- en: '[PRE8]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: creator.create("FitnessMin", base.Fitness, weights=(-1.0,))
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: creator.create("FitnessMin", base.Fitness, weights=(-1.0,))
- en: '[PRE9]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'def randomFloat(low, up):'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'def randomFloat(low, up):'
- en: return [random.uniform(l, u) for l, u in zip([low] * \
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: return [random.uniform(l, u) for l, u in zip([low] * \
- en: NUM_OF_PARAMS, [up] * NUM_OF_PARAMS)]
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: NUM_OF_PARAMS, [up] * NUM_OF_PARAMS)]
- en: '[PRE10]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: toolbox.register("attrFloat", randomFloat, BOUNDS_LOW,
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: toolbox.register("attrFloat", randomFloat, BOUNDS_LOW,
- en: BOUNDS_HIGH)
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: BOUNDS_HIGH)
- en: '[PRE11]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: toolbox.register("individualCreator",
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: toolbox.register("individualCreator",
- en: tools.initIterate,
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: tools.initIterate,
- en: creator.Individual,
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: creator.Individual,
- en: toolbox.attrFloat)
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: toolbox.attrFloat)
- en: '[PRE12]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'def getDiff(individual):'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'def getDiff(individual):'
- en: return imageTest.getDifference(individual, METRIC),
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: return imageTest.getDifference(individual, METRIC),
- en: toolbox.register("evaluate", getDiff)
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: toolbox.register("evaluate", getDiff)
- en: '[PRE13]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: toolbox.register("select", tools.selTournament, tournsize=2)
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: toolbox.register("select", tools.selTournament, tournsize=2)
- en: '[PRE14]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: toolbox.register("mate",
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: toolbox.register("mate",
- en: tools.cxSimulatedBinaryBounded,
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: tools.cxSimulatedBinaryBounded,
- en: low=BOUNDS_LOW,
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: low=BOUNDS_LOW,
- en: up=BOUNDS_HIGH,
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: up=BOUNDS_HIGH,
- en: eta=CROWDING_FACTOR)
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: eta=CROWDING_FACTOR)
- en: toolbox.register("mutate",
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: toolbox.register("mutate",
- en: tools.mutPolynomialBounded,
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: tools.mutPolynomialBounded,
- en: low=BOUNDS_LOW,
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: low=BOUNDS_LOW,
- en: up=BOUNDS_HIGH,
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: up=BOUNDS_HIGH,
- en: eta=CROWDING_FACTOR,
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: eta=CROWDING_FACTOR,
- en: indpb=1.0/NUM_OF_PARAMS)
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: indpb=1.0/NUM_OF_PARAMS)
- en: '[PRE15]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: population, logbook = \
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: population, logbook = \
- en: elitism_callback.eaSimpleWithElitismAndCallback(
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: elitism_callback.eaSimpleWithElitismAndCallback(
- en: population,
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: population,
- en: toolbox,
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: toolbox,
- en: cxpb=P_CROSSOVER,
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: cxpb=P_CROSSOVER,
- en: mutpb=P_MUTATION,
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: mutpb=P_MUTATION,
- en: ngen=MAX_GENERATIONS,
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ngen=MAX_GENERATIONS,
- en: callback=saveImage,
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: callback=saveImage,
- en: stats=stats,
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: stats=stats,
- en: halloffame=hof,
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: halloffame=hof,
- en: verbose=True)
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: verbose=True)
- en: '[PRE16]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: best = hof.items[0]
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: best = hof.items[0]
- en: print("Best Solution = ", best)
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: print("Best Solution = ", best)
- en: print("Best Score = ", best.fitness.values[0])
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: print("Best Score = ", best.fitness.values[0])
- en: imageTest.plotImages(imageTest.polygonDataToImage(best))
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: imageTest.plotImages(imageTest.polygonDataToImage(best))
- en: '[PRE17]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'with multiprocessing.Pool(processes=20) as pool:'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'with multiprocessing.Pool(processes=20) as pool:'
- en: toolbox.register("map", pool.map)
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: toolbox.register("map", pool.map)
- en: '[PRE18]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: def eaSimpleWithElitismAndCallback(population,
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: def eaSimpleWithElitismAndCallback(population,
- en: toolbox, cxpb, mutpb, ngen, callback=None,
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: toolbox, cxpb, mutpb, ngen, callback=None,
- en: 'stats=None, halloffame=None, verbose=__debug__):'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'stats=None, halloffame=None, verbose=__debug__):'
- en: '[PRE19]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'if callback:'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'if callback:'
- en: callback(gen, halloffame.items[0])
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: callback(gen, halloffame.items[0])
- en: '[PRE20]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'if gen % 100 == 0:'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'if gen % 100 == 0:'
- en: '[PRE21]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: RESULTS_PATH = os.path.join(BASE_PATH, "results",
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: RESULTS_PATH = os.path.join(BASE_PATH, "results",
- en: f"run-{POLYGON_SIZE}-{NUM_OF_POLYGONS}")
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: f"run-{POLYGON_SIZE}-{NUM_OF_POLYGONS}")
- en: '...'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '...'
- en: 'if not os.path.exists(RESULTS_PATH):'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'if not os.path.exists(RESULTS_PATH):'
- en: os.makedirs(RESULTS_PATH)
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: os.makedirs(RESULTS_PATH)
- en: '[PRE22]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: imageTest.imageTest.saveImage(polygonData,
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: imageTest.imageTest.saveImage(polygonData,
- en: os.path.join(RESULTS_PATH, f"after-{gen}-gen.png"),
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: os.path.join(RESULTS_PATH, f"after-{gen}-gen.png"),
- en: f"After {gen} Generations")
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: f"After {gen} Generations")
- en: '[PRE23]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: POLYGON_SIZE = 3
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: POLYGON_SIZE = 3
- en: NUM_OF_POLYGONS = 100
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: NUM_OF_POLYGONS = 100
- en: '[PRE24]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'def getMseBlur(self, image):'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'def getMseBlur(self, image):'
- en: return np.sum(
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: return np.sum(
- en: (self.blur(image).astype("float") -
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: (self.blur(image).astype("float") -
- en: self.refImageCv2.astype("float")) ** 2
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: self.refImageCv2.astype("float")) ** 2
- en: ) / float(self.numPixels)
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ) / float(self.numPixels)
- en: '[PRE25]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
