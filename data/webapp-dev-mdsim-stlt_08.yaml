- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: Advanced Environment Setup and Package Management for Building an AI-Powered
    Web App
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建AI驱动的Web应用的高级环境设置与包管理
- en: 'In *Chapters 8* through *12*, we will be building a new web app together: a
    tool that can detect the presence of COVID-19 from an image. To do so, we will
    leverage a pre-trained model (we are not delving into AI and model training but
    just using a pre-trained convolutional neural network) and in this way, we will
    learn how to integrate our AI models into our web applications by building up
    an entire set of services around them!'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第8章*到*第12章*中，我们将一起构建一个新的网络应用：一个可以从图像中检测COVID-19存在与否的工具。为此，我们将利用一个预训练的模型（我们不深入探讨AI和模型训练，而是直接使用一个预训练的卷积神经网络），通过这种方式，我们将学习如何将AI模型集成到我们的Web应用中，并围绕它们构建一整套服务！
- en: 'In very few words, a pre-trained model is an AI model that has been trained
    previously by someone else in order to make predictions – for example, classifications
    or regressions. To train the model, a dataset of cases related to the problem
    under scrutiny is typically needed. So, in the case of COVID-19 detection, a binary
    classification model (binary means only two possible solutions: COVID or no COVID)
    has been trained in the past and is now ready to be used in our web application.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，预训练模型是一个已经由别人提前训练好的AI模型，用来进行预测——例如分类或回归。为了训练该模型，通常需要一个与所研究问题相关的数据集。因此，在COVID-19检测的案例中，一个二分类模型（二分类意味着只有两种可能的解决方案：COVID或非COVID）已经在过去被训练，现在可以在我们的Web应用中使用。
- en: This chapter covers in a deeper way what we already saw in [*Chapter 4*](B21147_04.xhtml#_idTextAnchor045).
    The chapter is designed to help you better understand how to develop a web application
    from scratch, adding more features that require higher skills. So, once again,
    we will set up a virtual environment, install and manage packages, create an app
    skeleton, and add a menu and decorations to the app. In this part, we will build
    a new web app together to acquire much more high-level skills.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章深入讲解了我们在[*第4章*](B21147_04.xhtml#_idTextAnchor045)中看到的内容。本章旨在帮助你更好地理解如何从零开始开发一个Web应用，添加需要更高技能的更多功能。因此，我们将再次设置一个虚拟环境，安装和管理包，创建应用框架，并为应用添加菜单和装饰。在这一部分，我们将一起构建一个新的Web应用，获得更多高级技能。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将覆盖以下主要内容：
- en: Configuring our environment
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置我们的环境
- en: Installing and importing packages
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和导入包
- en: Building the app skeleton
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建应用框架
- en: Building the menu and adding decorations
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建菜单并添加装饰
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'In this chapter, we will use the following libraries, packages, and tools:'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用以下库、包和工具：
- en: Sublime Text
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sublime Text
- en: Python 3
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 3
- en: '`pipenv`'
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pipenv`'
- en: Streamlit
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Streamlit
- en: 'Code in the chapter can be accessed through the following GitHub link: [https://github.com/PacktPublishing/Web-App-Development-Made-Simple-with-Streamlit/tree/d5860f2916d79752d4b03c615da68f5bbdb4ed63/Chapter08](https://github.com/PacktPublishing/Web-App-Development-Made-Simple-with-Streamlit/tree/d5860f2916d79752d4b03c615da68f5bbdb4ed63/Chapter08)'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的代码可以通过以下GitHub链接访问：[https://github.com/PacktPublishing/Web-App-Development-Made-Simple-with-Streamlit/tree/d5860f2916d79752d4b03c615da68f5bbdb4ed63/Chapter08](https://github.com/PacktPublishing/Web-App-Development-Made-Simple-with-Streamlit/tree/d5860f2916d79752d4b03c615da68f5bbdb4ed63/Chapter08)
- en: Configuring our environment
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置我们的环境
- en: 'Actually, we already created a virtual environment at the beginning of the
    previous project, in [*Chapter 4*](B21147_04.xhtml#_idTextAnchor045), so we should
    be quite skilled at this task. Let’s start by creating an empty directory, which
    can be simply named `covid`. So, let’s write in our terminal the following instruction:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，我们已经在前一个项目的开始创建了一个虚拟环境，在[*第4章*](B21147_04.xhtml#_idTextAnchor045)中，因此我们应该对这项任务非常熟练。让我们从创建一个空目录开始，可以简单地命名为`covid`。那么，让我们在终端中输入以下指令：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, we can move inside the new directory just by typing the following:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以通过输入以下命令进入新目录：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'It’s now time to create our virtual environment. We know that this operation
    is very easy since we can use `pipenv`, as we already did in [*Chapter 4*](B21147_04.xhtml#_idTextAnchor045).
    So, once again, let’s write from our directory (it’s very important to be inside
    the `covid` directory):'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是创建我们虚拟环境的时候了。我们知道这项操作非常简单，因为我们可以使用`pipenv`，就像在[*第4章*](B21147_04.xhtml#_idTextAnchor045)中做的那样。所以，再次提醒，在我们的目录中输入以下命令（非常重要的是要在`covid`目录内）：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The virtual environment will be created quite quickly, and we should be at
    a stage like the one in the following figure:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟环境将很快创建完成，我们应该进入一个类似于下图所示的阶段：
- en: '![Figure 8.1: Virtual environment creation](img/B21147_08_01.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.1: 创建虚拟环境](img/B21147_08_01.jpg)'
- en: 'Figure 8.1: Virtual environment creation'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '图 8.1: 创建虚拟环境'
- en: As shown in *Figure 8**.1*, a new directory named `covid` is created. Then,
    we enter this directory and, by writing `pipenv shell`, we create the virtual
    environment, assigning to it the name of the directory. The tool we are using
    to make the virtual environment (`pipenv`) provides a positive output (the text
    in green) and automatically opens the new virtual environment. In fact, at the
    beginning of the last line in the screenshot, the word `covid` between the parentheses
    indicates that we are inside the virtual environment.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如*图 8.1*所示，创建了一个名为`covid`的新目录。然后，我们进入该目录，并通过输入`pipenv shell`来创建虚拟环境，虚拟环境的名称与目录名相同。我们使用的工具（`pipenv`）提供了一个积极的输出（绿色文本），并自动打开了新的虚拟环境。实际上，在截图的最后一行开始部分，括号中的`covid`表明我们处于虚拟环境中。
- en: At this point, the environment is ready but still empty, since we are still
    missing all the libraries we are going to use in our code. Let’s see what packages
    we need.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，环境已经准备好，但仍然是空的，因为我们还缺少在代码中使用的所有库。让我们来看一下需要哪些包。
- en: Installing and importing packages
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和导入包
- en: Now that we are inside the `covid` directory and our virtual environment has
    been created, it’s time to install all the packages we are going to use in our
    web application.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经进入了`covid`目录，并且虚拟环境已经创建完成，是时候安装我们在网页应用中要用到的所有包了。
- en: 'We need five different libraries:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要五个不同的库：
- en: '`Streamlit`, our wonderful framework for web applications'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Streamlit`，我们用于网页应用的神奇框架'
- en: '`numpy`, a library for advanced numeric calculations'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy`，一个用于高级数值计算的库'
- en: '`tensorflow`, the package needed to manage neural networks'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tensorflow`，用于管理神经网络的包'
- en: '`Pillow`, a library for image management'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Pillow`，一个用于图像管理的库'
- en: '`opencv-python`, the computer vision package'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`opencv-python`，计算机视觉包'
- en: 'Let’s install everything by typing the following instructions one by one:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过依次输入以下指令来安装所有内容：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This installation can take a little while. When it finishes, we should have
    something like this on our screen:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这个安装过程可能会花一些时间。当它完成时，我们的屏幕上应该会显示如下内容：
- en: '![Figure 8.2: Package installation](img/B21147_08_02.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.2: 包安装](img/B21147_08_02.jpg)'
- en: 'Figure 8.2: Package installation'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '图 8.2: 包安装'
- en: 'We can now launch our editor, Sublime Text. You’ll see that in the `covid`
    directory, there are now the two *famous* files, `Pipfile` and `Pipfile.lock`,
    containing the configuration of our virtual environment with the installed libraries
    and the dependencies list:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以启动编辑器 Sublime Text。你会看到，在`covid`目录中，现在有两个*著名*的文件，`Pipfile`和`Pipfile.lock`，它们包含了我们虚拟环境的配置、已安装的库以及依赖列表：
- en: "![Figure 8.3: \uFEFFPipfile](img/B21147_08_03.jpg)"
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: "![图 8.3: \uFEFFPipfile](img/B21147_08_03.jpg)"
- en: 'Figure 8.3: Pipfile'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '图 8.3: Pipfile'
- en: 'Now we can create a new file and call it, as usual, `app.py`, so let’s write
    the following:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以创建一个新文件，并像往常一样命名为`app.py`，然后我们可以写下以下内容：
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Everything is finally ready to start coding.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 一切终于准备好开始编写代码了。
- en: 'Obviously, we have to start by importing the libraries, and this is very easy,
    as we can see in the following figure:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，我们必须从导入库开始，这非常简单，正如下图所示：
- en: '![Figure 8.4: Importing the libraries](img/B21147_08_04.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.4: 导入库](img/B21147_08_04.jpg)'
- en: 'Figure 8.4: Importing the libraries'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '图 8.4: 导入库'
- en: 'As for the previous web application, we need to create a main function. Let’s
    do it by adding some `html` code just to give a title to our app, and since we
    already imported Streamlit, as usual, let’s add as the first instruction, after
    the `import streamlit as st` line, the code for the page configuration (we just
    set the title, an icon – you can use any picture you want – and the initial sidebar
    state). The full code is as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 和之前的网页应用一样，我们需要创建一个主函数。我们可以通过添加一些`html`代码来实现，目的是为我们的应用设置标题。由于我们已经导入了 Streamlit，像往常一样，在`import
    streamlit as st`这一行之后，作为第一条指令添加页面配置的代码（我们设置了标题、图标——你可以使用任何图片——以及初始的侧边栏状态）。完整代码如下：
- en: '![Figure 8.5: First app draft](img/B21147_08_05.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.5: 第一个应用草图](img/B21147_08_05.jpg)'
- en: 'Figure 8.5: First app draft'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '图 8.5: 第一个应用草图'
- en: 'At the moment, we’ve just imported the libraries and added very few lines of
    code, but the web app can be launched. Let’s do it by typing the following well-known
    instruction:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们只导入了库并添加了非常少的代码行，但网页应用已经可以启动了。我们可以通过输入以下常见的指令来启动：
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In the following figure, the result we get upon opening the browser on localhost
    port `8501` can be seen:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在下图中，可以看到在本地浏览器打开`8501`端口后获得的结果：
- en: '![Figure 8.6: First launch of the app](img/B21147_08_06.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图8.6：应用首次启动](img/B21147_08_06.jpg)'
- en: 'Figure 8.6: First launch of the app'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.6：应用首次启动
- en: No errors! We can continue to build the app skeleton now.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 没有错误！现在我们可以继续构建应用框架。
- en: Building the app skeleton
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建应用框架
- en: At this point, we should be quite expert at building the application’s skeleton,
    since we did a very good job with the NLP web app developed previously. In fact,
    if you recall, we first defined and built up a simple skeleton containing just
    a menu with all the functions supposed to be present in the web application and
    only in a second moment, we implemented those functions one by one. Now we are
    going to adopt the same approach.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，我们应该已经相当擅长构建应用的框架了，因为我们之前开发的NLP网页应用做得非常好。事实上，如果你还记得，我们首先定义并构建了一个简单的框架，只包含一个菜单，菜单中有所有网页应用应包含的功能，然后才一步一步地实现这些功能。现在，我们将采用同样的方法。
- en: Before building up the skeleton for the *COVID* app, let us just add a couple
    of other decorations to our app – for example, some text just below the title
    and an image in the sidebar.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建*COVID*应用的框架之前，让我们先为应用添加一些装饰——例如，标题下方的文本和侧边栏中的一张图片。
- en: 'The code with the two new lines of code is shown in the following figure:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 带有两行新代码的代码如下所示：
- en: '![Figure 8.7: Text below the title and sidebar creation](img/B21147_08_07.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![图8.7：标题下方的文本和侧边栏创建](img/B21147_08_07.jpg)'
- en: 'Figure 8.7: Text below the title and sidebar creation'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.7：标题下方的文本和侧边栏创建
- en: As we already know, the code in the third line is responsible for the web application
    configuration, setting the page title (`Covid-19 Detection Tool`), page icon (`covid19.jpeg
    image`), and page layout (`centered`).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们已经知道的，第三行的代码负责网页应用的配置，设置页面标题（`Covid-19 Detection Tool`）、页面图标（`covid19.jpeg
    image`）和页面布局（`centered`）。
- en: 'The result produced on the web side is the following:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 网页端产生的结果如下：
- en: '![Figure 8.8: Image in the sidebar and text below the title](img/B21147_08_08.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![图8.8：侧边栏中的图片和标题下方的文本](img/B21147_08_08.jpg)'
- en: 'Figure 8.8: Image in the sidebar and text below the title'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.8：侧边栏中的图片和标题下方的文本
- en: 'Now, let’s add to the sidebar a very important widget: `file_uploader`. The
    instruction we will use is the following:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在侧边栏中添加一个非常重要的小部件：`file_uploader`。我们将使用的指令如下：
- en: '[PRE6]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As we can see on the web-side, `image_file`. The first argument is just a label
    (the text `type`) contains a list with the types of files users are enabled to
    select.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在网页端所看到的，`image_file`。第一个参数只是一个标签（文本`type`），包含了一个允许用户选择的文件类型列表。
- en: Immediately after `file_uploader`, it’s a good idea to insert a check (an `if`
    clause) just to be sure that an image has been uploaded and, only in this case,
    to open it (leveraging the `Pillow` library we imported at the beginning).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 紧接着`file_uploader`，最好插入一个检查（一个`if`语句），以确保已经上传了图片，只有在这种情况下才打开它（利用我们一开始导入的`Pillow`库）。
- en: 'Once we have the image, and only when the image we uploaded can be opened,
    we can perform some other actions – for example, an `if` clause inside the previous
    one. So, finally, our code inside the main function will be as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了图片，并且只有当上传的图片可以被打开时，我们才可以执行其他操作——例如，在前面的`if`语句内部添加一个`if`语句。最终，我们的主函数中的代码将如下所示：
- en: '![Figure 8.9: How to manage the image](img/B21147_08_09.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图8.9：如何管理图片](img/B21147_08_09.jpg)'
- en: 'Figure 8.9: How to manage the image'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.9：如何管理图片
- en: 'Very easily, we can select an image and when we click on the **Image Preview**
    button, we can see it on the screen, in the sidebar, as shown in the following
    figure:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 非常简单地，我们可以选择一张图片，当我们点击**图片预览**按钮时，就可以在屏幕上、侧边栏中看到它，如下图所示：
- en: '![Figure 8.10: Image upload and preview in the sidebar](img/B21147_08_10.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图8.10：在侧边栏中上传并预览图片](img/B21147_08_10.jpg)'
- en: 'Figure 8.10: Image upload and preview in the sidebar'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.10：在侧边栏中上传并预览图片
- en: At this point, we have a complete app skeleton and are able to upload and show
    an image in the sidebar. We are now ready to build up the menu.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 到这时，我们已经有了一个完整的应用框架，并且能够上传并在侧边栏中显示图片。我们现在准备开始构建菜单了。
- en: Building the menu and adding decorations
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建菜单并添加装饰
- en: Now, we can add a selectbox in the sidebar, which will be the menu of the web
    application, and guidelines for its development. This menu will have three voices
    – `if` clause, the inner one, because it makes sense only if a valid image has
    already been uploaded. For sure, after the selectbox, we can place the three options
    (three `if` clauses) that will contain the code for each one of the menu voices.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以在侧边栏中添加一个选择框，这将是 web 应用程序的菜单，并提供开发指南。这个菜单将有三个选项——`if` 子句，内部的那个，因为它只有在已经上传有效图像时才有意义。肯定地，选择框后面我们可以放置三个选项（三个
    `if` 子句），它们将包含每个菜单选项的代码。
- en: 'We have already built up a menu in the same way in the NLP web application;
    the code is very easy:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在 NLP web 应用程序中以相同的方式构建了一个菜单；代码非常简单：
- en: "![Figure 8.11: The menu (choice) and its voice\uFEFF sections](img/B21147_08_11.jpg)"
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.11: 菜单（选择项）及其选项部分](img/B21147_08_11.jpg)'
- en: 'Figure 8.11: The menu (choice) and its voice sections'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '图 8.11: 菜单（选择项）及其选项部分'
- en: 'Here’s what we are doing:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们正在做的：
- en: At *line 38*, we create a list containing all the menu voices
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在*第 38 行*，我们创建了一个包含所有菜单选项的列表
- en: Then, at *line 39*, we add a selectbox in the sidebar in order to visualize
    all the items contained in this list.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，在*第 39 行*，我们在侧边栏中添加了一个选择框，以便可视化此列表中包含的所有项目。
- en: After that, from *line 41* up to *line 48*, we double-check which one of menu’s
    voices has been selected and just print the information on the screen – for example,
    `st.subheader` (`pass`.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，从*第 41 行*到*第 48 行*，我们检查哪个菜单选项已被选中，并仅将信息打印到屏幕上——例如，`st.subheader`（`pass`）。
- en: 'The messages we print with the `st.subheader` or `pass` function (it’s just
    a function doing nothing) are simple placeholders and, in the next chapters, we
    are going to develop the code related to each one of them. Here’s how the app’s
    menu looks thus far:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `st.subheader` 或 `pass` 函数（它只是一个什么都不做的函数）打印的消息是简单的占位符，在接下来的章节中，我们将开发与它们相关的代码。到目前为止，应用程序菜单看起来是这样的：
- en: '![Figure 8.12: The menu in the browser](img/B21147_08_12.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.12: 浏览器中的菜单](img/B21147_08_12.jpg)'
- en: 'Figure 8.12: The menu in the browser'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '图 8.12: 浏览器中的菜单'
- en: 'As a final decoration, before closing the chapter, we can add an **About the
    Author** button on the sidebar, showing in this way all the information about
    the author of the web application, the link to their website, their email, and
    so on. This is the code:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 作为最终装饰，在关闭本章之前，我们可以在侧边栏添加一个**关于作者**按钮，以此显示所有关于 web 应用程序作者的信息，包括他们的网站链接、电子邮件等。以下是代码：
- en: '![Figure 8.13: About the Author button code](img/B21147_08_13.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.13: 关于作者按钮代码](img/B21147_08_13.jpg)'
- en: 'Figure 8.13: About the Author button code'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '图 8.13: 关于作者按钮代码'
- en: 'This is the effect in the browser:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这是浏览器中的效果：
- en: '![Figure 8.14: About the Author details](img/B21147_08_14.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.14: 关于作者的详细信息](img/B21147_08_14.jpg)'
- en: 'Figure 8.14: About the Author details'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '图 8.14: 关于作者的详细信息'
- en: In this section, we created the menu for our new web application. Now, in the
    sidebar, there are several voices, and the user can clearly select what they want
    to do. This approach is very useful since it can be applied anytime we start working
    on a new app. On the left side, in the sidebar, we have a menu with the list of
    all the features available in the web application, and in the main part, we show
    the title and information and let the user insert data from their case.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们为我们的新 web 应用程序创建了菜单。现在，在侧边栏中有多个选项，用户可以清晰地选择他们想做的操作。这种方法非常有用，因为它可以在我们开始开发新应用时随时应用。在左侧的侧边栏中，我们有一个菜单，列出了
    web 应用程序中所有可用的功能，在主界面部分，我们展示了标题和信息，并让用户从他们的案例中插入数据。
- en: Summary
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we consolidated our knowledge about virtual environments and
    package installation. After that, as usual, we started from an empty file and
    developed the skeleton of our app.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们巩固了关于虚拟环境和包安装的知识。之后，像往常一样，我们从一个空文件开始，开发了我们应用程序的框架。
- en: First, we imported all the libraries and created a main function. We also created
    some nice decorations such as a title in html, a beautiful icon, and a very interesting
    image in the sidebar. We also discovered how to upload files by filtering their
    types and, once imported, we learned how to visualize those images thanks to the
    `Pillow` library.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们导入了所有库并创建了一个主函数。我们还创建了一些漂亮的装饰，比如 HTML 中的标题、一个美丽的图标和侧边栏中非常有趣的图片。我们还发现了如何通过筛选文件类型来上传文件，并且一旦文件导入后，我们学会了如何利用
    `Pillow` 库来可视化这些图片。
- en: Another important step was to build up the menu of our app with all its voices
    and, at the end, we created a button showing all the information about the author,
    with some linkable elements, such as their website and email address.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要步骤是建立我们应用程序的菜单，包含所有的语音，最后我们创建了一个按钮，显示有关作者的所有信息，并包含一些可链接的元素，比如他们的网站和电子邮件地址。
- en: 'Starting from the next chapter, we will focus on developing the three voices
    of the menu, which,, at the moment, are just empty containers: **Image Enhance**,
    **Diagnosis**, and **Disclaimer** **and Info**.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 从下一章开始，我们将专注于开发菜单的三种声音，目前它们只是空的容器：**图像增强**、**诊断**和**免责声明** **及信息**。
