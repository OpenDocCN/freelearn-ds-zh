- en: Chapter 5. Complex Event Processing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章 复杂事件处理
- en: In the previous chapter, we talked about the Table API provided by Apache Flink
    and how we can use it to process relational data structures. This chapter onwards,
    we will start learning more about the libraries provided by Apache Flink and how
    we can use them for specific use cases. To start with, let's try to understand
    a library called **Complex Event Processing** (**CEP**). CEP is a very interesting
    but complex topic that has its value in various industries. Wherever there is
    a stream of events expected, naturally people want to perform complex event processing
    in all such use cases. Let's try to understand what CEP is all about.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们谈到了Apache Flink提供的Table API以及我们如何使用它来处理关系数据结构。从本章开始，我们将开始学习有关Apache
    Flink提供的库以及如何将它们用于特定用例的更多信息。首先，让我们尝试了解一个名为**复杂事件处理**（**CEP**）的库。CEP是一个非常有趣但复杂的主题，在各行业都有其价值。无论在哪里都有预期的事件流，人们自然希望在所有这些用例中执行复杂事件处理。让我们尝试了解CEP的全部内容。
- en: What is complex event processing?
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是复杂事件处理？
- en: 'CEP analyzes streams of disparate events occurring with high frequency and
    low latency. These days, streaming events can be found in various industries,
    for example:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: CEP分析高频率和低延迟发生的不同事件流。如今，各行业都可以找到流事件，例如：
- en: In the oil and gas domain, sensor data comes from various drilling tools or
    from upstream oil pipeline equipment
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在石油和天然气领域，传感器数据来自各种钻井工具或上游油管设备
- en: In the security domain, activity data, malware information, and usage pattern
    data come from various end points
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在安全领域，活动数据、恶意软件信息和使用模式数据来自各种终端
- en: In the wearable domain, data comes from various wrist bands with information
    about your heart beat rate, your activity, and so on
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在可穿戴设备领域，数据来自各种手腕带，包含有关您的心率、活动等信息
- en: In the banking domain, data comes from credit card usage, banking activities,
    and so on
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在银行领域，数据来自信用卡使用、银行活动等
- en: 'It is very important to analyze variation patterns to get notified in real
    time about any change in the regular assembly. CEP can understand patterns across
    the streams of events, sub-events, and their sequences. CEP helps to identify
    meaningful patterns and complex relationships among unrelated events, and sends
    notifications in real and near real time to prevent damage:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 分析变化模式以实时通知常规装配中的任何变化非常重要。CEP可以理解事件流、子事件及其序列中的模式。CEP有助于识别有意义的模式和无关事件之间的复杂关系，并实时或准实时发送通知以防止损害：
- en: '![What is complex event processing?](img/image_05_001.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![什么是复杂事件处理？](img/image_05_001.jpg)'
- en: 'The preceding diagram shows how the CEP flow works. Even though the flow looks
    simple, CEP has various abilities such as:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 上图显示了CEP流程的工作原理。尽管流程看起来很简单，但CEP具有各种能力，例如：
- en: The ability to produce results as soon as the input event stream is available
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在输入事件流可用时立即生成结果的能力
- en: The ability to provide computations such as aggregation over time and timeout
    between two events of interest
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供诸如时间内聚合和两个感兴趣事件之间的超时等计算能力
- en: The ability to provide real-time/near real-time alerts and notifications on
    detection of complex event patterns
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供在检测到复杂事件模式时实时/准实时警报和通知的能力
- en: The ability to connect and correlate heterogeneous sources and analyze patterns
    in them
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够连接和关联异构源并分析其中的模式
- en: The ability to achieve high-throughput, low-latency processing
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现高吞吐量、低延迟处理的能力
- en: There are various solutions available on the market. With big data technology
    advancements, we have multiple options like Apache Spark, Apache Samza, Apache
    Beam, among others, but none of them have a dedicated library to fit all solutions.
    Now let us try to understand what we can achieve with Flink's CEP library.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 市场上有各种解决方案。随着大数据技术的进步，我们有多个选项，如Apache Spark、Apache Samza、Apache Beam等，但没有一个专门的库适用于所有解决方案。现在让我们尝试了解Flink的CEP库可以实现什么。
- en: Flink CEP
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Flink CEP
- en: 'Apache Flink provides the Flink CEP library, which provides APIs to perform
    complex event processing. The library consists of the following core components:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Apache Flink提供了Flink CEP库，提供了执行复杂事件处理的API。该库包括以下核心组件：
- en: Event stream
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件流
- en: Pattern definition
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模式定义
- en: Pattern detection
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模式检测
- en: Alert generation
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 警报生成
- en: '![Flink CEP](img/image_05_002.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![Flink CEP](img/image_05_002.jpg)'
- en: Flink CEP works on Flink's streaming API called DataStream. A programmer needs
    to define the pattern to be detected from the stream of events and then Flink's
    CEP engine detects the pattern and takes the appropriate action, such as generating
    alerts.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Flink CEP使用Flink的数据流API称为DataStream。程序员需要定义要从事件流中检测到的模式，然后Flink的CEP引擎检测到模式并采取适当的操作，例如生成警报。
- en: 'In order to get started, we need to add the following Maven dependency:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始，我们需要添加以下Maven依赖项：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Event streams
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 事件流
- en: A very important component of CEP is its input event stream. In earlier chapters,
    we have seen details of the DataStream API. Now let's use that knowledge to implement
    CEP. The very first thing we need to do is define a Java POJO for the event. Let's
    assume we need to monitor a temperature sensor event stream.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: CEP的一个非常重要的组件是其输入事件流。在早期的章节中，我们已经看到了DataStream API的详细信息。现在让我们利用这些知识来实现CEP。我们需要做的第一件事就是为事件定义一个Java
    POJO。假设我们需要监视温度传感器事件流。
- en: First we define an abstract class and then extend this class.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们定义一个抽象类，然后扩展这个类。
- en: Note
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: While defining the event POJOs we need to make sure that we implement the `hashCode()`
    and `equals()` methods, because while comparing the events, compile will make
    use of them.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义事件POJO时，我们需要确保实现`hashCode()`和`equals()`方法，因为在比较事件时，编译将使用它们。
- en: The following code snippets demonstrate this.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段演示了这一点。
- en: 'First, we write an abstract class as shown here:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们编写一个抽象类，如下所示：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then we create a POJO for the actual temperature event:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们为实际温度事件创建一个POJO：
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now we can define the event source as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以定义事件源如下：
- en: 'In Java:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中：
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In Scala:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在Scala中：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Pattern API
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模式API
- en: The Pattern API allows you to define complex event patterns very easily. Each
    pattern consists of multiple states. To go from one state to another state, generally
    we need to define the conditions. The conditions could be continuity or filtered
    out events.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 模式API允许您非常轻松地定义复杂的事件模式。每个模式由多个状态组成。要从一个状态转换到另一个状态，通常需要定义条件。条件可以是连续性或过滤掉的事件。
- en: '![Pattern API](img/image_05_003.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![Pattern API](img/image_05_003.jpg)'
- en: Let's try to understand each pattern operation in detail.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试详细了解每个模式操作。
- en: Begin
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始
- en: 'The initial state can be defined as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 初始状态可以定义如下：
- en: 'In Java:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中：
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In Scala:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在Scala中：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Filter
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 过滤器
- en: 'We can also specify the filter condition for the initial state:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以为初始状态指定过滤条件：
- en: 'In Java:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中：
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In Scala:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在Scala中：
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Subtype
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 子类型
- en: 'We can also filter out events based on their sub-types, using the `subtype()`
    method:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以根据它们的子类型过滤事件，使用`subtype()`方法：
- en: 'In Java:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中：
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In Scala:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在Scala中：
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: OR
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 或
- en: Pattern API also allows us define multiple conditions together. We can use `OR`
    and `AND` operators.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 模式API还允许我们一起定义多个条件。我们可以使用`OR`和`AND`运算符。
- en: 'In Java:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中：
- en: '[PRE11]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In Scala:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在Scala中：
- en: '[PRE12]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Continuity
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连续性
- en: As stated earlier, we do not always need to filter out events. There can always
    be some pattern where we need continuity instead of filters.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们并不总是需要过滤事件。总是可能有一些我们需要连续而不是过滤的模式。
- en: Continuity can be of two types - strict continuity and non-strict continuity.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 连续性可以有两种类型 - 严格连续性和非严格连续性。
- en: Strict continuity
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 严格连续性
- en: Strict continuity needs two events to succeed directly which means there should
    be no other event in between. This pattern can be defined by `next()`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 严格连续性需要直接成功的两个事件，这意味着两者之间不应该有其他事件。这个模式可以通过`next()`定义。
- en: 'In Java:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中：
- en: '[PRE13]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In Scala:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在Scala中：
- en: '[PRE14]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Non-strict continuity
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 非严格连续
- en: Non-strict continuity can be stated as other events are allowed to be in between
    the specific two events. This pattern can be defined by `followedBy()`.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 非严格连续性可以被定义为其他事件允许在特定两个事件之间。这个模式可以通过`followedBy()`定义。
- en: 'In Java:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中：
- en: '[PRE15]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In Scala:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在Scala中：
- en: '[PRE16]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Within
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内
- en: Pattern API also allows us to do pattern matching based on time intervals. We
    can define a time-based temporal constraint as follows.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 模式API还允许我们根据时间间隔进行模式匹配。我们可以定义基于时间的时间约束如下。
- en: 'In Java:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中：
- en: '[PRE17]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In Scala:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在Scala中：
- en: '[PRE18]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Detecting patterns
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检测模式
- en: To detect patterns against a stream of events, we need to run the stream though
    the pattern. The `CEP.pattern()` returns `PatternStream`.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 要检测事件流中的模式，我们需要通过模式运行流。`CEP.pattern()`返回`PatternStream`。
- en: The following code snippet shows how we can detect a pattern. First the pattern
    is defined to check if the temperature value is greater than `26.0` degrees in
    `10` seconds.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段显示了我们如何检测模式。首先定义模式，以检查温度值是否在`10`秒内大于`26.0`度。
- en: 'In Java:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中：
- en: '[PRE19]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In Scala:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在Scala中：
- en: '[PRE20]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Selecting from patterns
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从模式中选择
- en: Once the pattern stream is available, we need to select the pattern from it
    and then take appropriate actions based on it. We can use the `select` or `flatSelect`
    method to select data from the pattern.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦模式流可用，我们需要从中选择模式，然后根据需要采取适当的操作。我们可以使用`select`或`flatSelect`方法从模式中选择数据。
- en: Select
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选择
- en: The select method needs `PatternSelectionFunction` implementation. It has a
    select method which would be called for each event sequence. The `select` method
    receives a map of string/event pairs of matched events. The string is defined
    by the name of the state. The `select` method returns exactly one result.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: select方法需要`PatternSelectionFunction`实现。它有一个select方法，该方法将为每个事件序列调用。`select`方法接收匹配事件的字符串/事件对的映射。字符串由状态的名称定义。`select`方法返回确切的一个结果。
- en: 'To collect the results, we need to define the output POJO. In our case, let''s
    say we need to generate alerts as output. Then we need to define POJO as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 要收集结果，我们需要定义输出POJO。在我们的案例中，假设我们需要生成警报作为输出。然后我们需要定义POJO如下：
- en: '[PRE21]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Next we define the select functions.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们定义选择函数。
- en: 'In Java:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中：
- en: '[PRE22]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'In Scala:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在Scala中：
- en: '[PRE23]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: flatSelect
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: flatSelect
- en: The `flatSelect` method is similar to the `select` method. The only difference
    between the two is that `flatSelect` can return an arbitrary number of results.
    The `flatSelect` method has an additional `Collector` parameter which is used
    for output element.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`flatSelect`方法类似于`select`方法。两者之间的唯一区别是`flatSelect`可以返回任意数量的结果。`flatSelect`方法有一个额外的`Collector`参数，用于输出元素。'
- en: The following example shows how we can use the `flatSelect` method.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例显示了如何使用`flatSelect`方法。
- en: 'In Java:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中：
- en: '[PRE24]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'In Scala:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在Scala中：
- en: '[PRE25]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Handling timed-out partial patterns
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理超时的部分模式
- en: Sometimes we may miss out certain events if we have constrained the patterns
    with a time boundary. It is possible that events may be discarded because they
    exceed the length. In order to take actions on the timed out events, the `select`
    and `flatSelect` methods allow a timeout handler. This handler is called for each
    timeout event pattern.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，如果我们将模式限制在时间边界内，可能会错过某些事件。可能会丢弃事件，因为它们超出了长度。为了对超时事件采取行动，`select`和`flatSelect`方法允许超时处理程序。对于每个超时事件模式，都会调用此处理程序。
- en: 'In this case, the select method contains two parameters: `PatternSelectFunction`
    and `PatternTimeoutFunction`. The return type for a timed out function can be
    different from the select pattern function. The timed out event and select event
    are wrapped in the class `Either.Right` and `Either.Left`.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，select方法包含两个参数：`PatternSelectFunction`和`PatternTimeoutFunction`。超时函数的返回类型可以与选择模式函数不同。超时事件和选择事件被包装在`Either.Right`和`Either.Left`类中。
- en: The following code snippets shows how we do things in practice.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段显示了我们在实践中如何做事情。
- en: 'In Java:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中：
- en: '[PRE26]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'In Scala, the select API:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在Scala中，选择API：
- en: '[PRE27]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The `flatSelect` API is called with the `Collector` as it can emit an arbitrary
    number of events:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`flatSelect` API与`Collector`一起调用，因为它可以发出任意数量的事件：'
- en: '[PRE28]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Use case - complex event processing on a temperature sensor
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用例 - 在温度传感器上进行复杂事件处理
- en: In earlier sections, we learnt about various features provided by the Flink
    CEP engine. Now it's time to understand how we can use it in real-world solutions.
    For that, let's assume we work for a mechanical company which produces some products.
    In the product factory, there is a need to constantly monitor certain machines.
    The factory has already set up the sensors which keep on sending the temperature
    of the machines at a given time.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在早期的章节中，我们学习了Flink CEP引擎提供的各种功能。现在是时候了解我们如何在现实世界的解决方案中使用它了。为此，让我们假设我们在一个生产某些产品的机械公司工作。在产品工厂中，有必要不断监视某些机器。工厂已经设置了传感器，这些传感器不断发送机器的温度。
- en: Now we will be setting up a system that constantly monitors the temperature
    value and generates an alert if the temperature exceeds a certain value.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将建立一个系统，不断监视温度值，并在温度超过一定值时生成警报。
- en: 'We can use the following architecture:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下架构：
- en: '![Use case - complex event processing on a temperature sensor](img/image_05_004.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![温度传感器上的复杂事件处理用例](img/image_05_004.jpg)'
- en: 'Here we will be using Kafka to collect events from sensors. In order to write
    a Java application, we first need to create a Maven project and add the following
    dependency:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将使用Kafka从传感器收集事件。为了编写一个Java应用程序，我们首先需要创建一个Maven项目并添加以下依赖项：
- en: '[PRE29]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Next we need to do following things for using Kafka.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要做以下事情来使用Kafka。
- en: First we need to define a custom Kafka deserializer. This will read bytes from
    a Kafka topic and convert it into `TemperatureEvent`. The following is the code
    to do this.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要定义一个自定义的Kafka反序列化器。这将从Kafka主题中读取字节并将其转换为`TemperatureEvent`。以下是执行此操作的代码。
- en: '`EventDeserializationSchema.java`:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`EventDeserializationSchema.java`：'
- en: '[PRE30]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Next we create topics in Kafka called `temperature`:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在Kafka中创建名为`temperature`的主题：
- en: '[PRE31]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Now we move to Java code which would listen to these events in Flink streams:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们转到Java代码，该代码将监听Flink流中的这些事件：
- en: '[PRE32]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Next we will define the pattern to check if the temperature is greater than
    `26.0` degrees Celsius within `10` seconds:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将定义模式，以检查温度是否在`10`秒内是否大于`26.0`摄氏度：
- en: '[PRE33]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Next match this pattern with the stream of events and select the event. We
    will also add up the alert messages into results stream as shown here:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来将此模式与事件流匹配并选择事件。我们还将将警报消息添加到结果流中，如下所示：
- en: '[PRE34]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'In order to know what the alerts were generated, we will print the results:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 为了知道警报是如何生成的，我们将打印结果：
- en: '[PRE35]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'And we execute the stream:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们执行流：
- en: '[PRE36]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Now we are all set to execute the application. As and when we get messages in
    Kafka topics, the CEP will keep on executing.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好执行应用程序了。当我们在Kafka主题中收到消息时，CEP将继续执行。
- en: 'The actual execution will looks like the following. Here is how we can provide
    sample input:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 实际执行将如下所示。以下是我们如何提供样本输入：
- en: '[PRE37]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Here is how the sample output will look like:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是样本输出的样子：
- en: '[PRE38]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: We can also configure a mail client and use some external web hook to send e-mail
    or messenger notifications.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以配置邮件客户端并使用一些外部网络钩子来发送电子邮件或即时通讯通知。
- en: Note
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The code for the application can be found on GitHub: [https://github.com/deshpandetanmay/mastering-flink](https://github.com/deshpandetanmay/mastering-flink).'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序的代码可以在GitHub上找到：[https://github.com/deshpandetanmay/mastering-flink](https://github.com/deshpandetanmay/mastering-flink)。
- en: Summary
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learnt about CEP. We discussed the challenges involved and
    how we can use the Flink CEP library to solve CEP problems. We also learnt about
    Pattern API and the various operators we can use to define the pattern. In the
    final section, we tried to connect the dots and see one complete use case. With
    some changes, this setup can be used as it is present in various other domains
    as well.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了CEP。我们讨论了涉及的挑战以及我们如何使用Flink CEP库来解决CEP问题。我们还学习了Pattern API以及我们可以使用的各种运算符来定义模式。在最后一节中，我们试图连接各个点，看到一个完整的用例。通过一些改变，这个设置也可以在其他领域中使用。
- en: In the next chapter, we will see how to use Flink's built-in Machine Learning
    library to solve complex problems.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到如何使用Flink的内置机器学习库来解决复杂的问题。
