- en: pandas Compared with Other Tools
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pandas 与其他工具的比较
- en: 'This chapter focuses on comparing pandas with R, the statistical package on
    which much of the pandas functionality is modeled, and other tools such as SQL
    and SAS, with which it has a significant degree of overlap. It is intended as
    a guide for R, SQL, and SAS users who wish to use pandas, and for users who wish
    to replicate functionality that they have seen in their code in pandas. It focuses
    on a number of key features available to R, SQL, and SAS users, and demonstrates
    how to achieve similar functionality in pandas by using some illustrative examples.
    This chapter assumes that you have the R statistical package installed. If not,
    it can be downloaded and installed from here: [http://www.r-project.org/](http://www.r-project.org/).'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章重点比较 pandas 与 R（许多 pandas 功能的模型工具）、SQL 和 SAS 等工具的异同，后者与 pandas 有着显著的重叠。本章旨在为希望使用
    pandas 的 R、SQL 和 SAS 用户提供指南，也为希望在 pandas 中重现其代码功能的用户提供帮助。本章重点介绍 R、SQL 和 SAS 用户可用的一些关键功能，并通过一些示例演示如何在
    pandas 中实现类似功能。本章假设您已安装 R 统计软件包。如果没有，您可以从此处下载并安装：[http://www.r-project.org/](http://www.r-project.org/)。
- en: 'By the end of the chapter, data analysis users should have a good grasp of
    the data analysis capabilities of these tools as compared to pandas, enabling
    them to transition to, or use, pandas should they need to. The various factors
    where the tools have been compared include the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，数据分析用户应该能够很好地掌握这些工具相对于 pandas 的数据分析能力，从而在需要时能够顺利过渡到或使用 pandas。工具比较的各个因素包括：
- en: Data types and the pandas equivalents
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据类型及其 pandas 对应物
- en: Slicing and selection
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 切片与选择
- en: Arithmetic operations on data type columns
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据类型列的算术运算
- en: Aggregation and GroupBy
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 聚合与 GroupBy
- en: Matching
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 匹配
- en: Split-apply-combine
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分割-应用-合并
- en: Melting and reshaping
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据重塑与熔化
- en: Factors and categorical data
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因子和分类数据
- en: Comparison with R
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与 R 的比较
- en: R is the tool on which pandas is loosely designed. Many of the functionalities
    are very similar in terms of syntax, usage, and output. Differences occur mainly
    in some of the data types, which can be the matrix in R versus arrays in pandas,
    an aggregation framework, such as the `aggregate` function in R and the `GroupBy`
    operation in pandas, and subtle differences in the syntaxes of similarly named
    functions, such as `melt` and `cut`.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: R 是 pandas 设计灵感的工具。两者在语法、用法和输出方面非常相似。主要的差异出现在某些数据类型上，例如 R 中的矩阵与 pandas 中的数组，R
    中的 `aggregate` 函数与 pandas 中的 `GroupBy` 操作，以及一些功能相似的函数在语法上的细微差别，如 `melt` 和 `cut`。
- en: Data types in R
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: R 中的数据类型
- en: 'R has five primitive or atomic types:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: R 具有五种原始类型或原子类型：
- en: Character
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符
- en: Numeric
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数值型
- en: Integer
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 整数
- en: Complex
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复数
- en: Logical/Boolean
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 逻辑/布尔值
- en: 'It also has the following more complex container types:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 它还具有以下更复杂的容器类型：
- en: '**Vector**: This is similar to `numpy.array`. It can only contain objects of
    the same type.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**向量**：这与 `numpy.array` 相似。它只能包含相同类型的对象。'
- en: '**List**: This is a heterogeneous container. Its equivalent in pandas would
    be a series.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**列表**：这是一个异构容器。它在 pandas 中的对应物是一个序列（series）。'
- en: '**DataFrame**: This is a heterogeneous two-dimensional container, equivalent
    to a pandas DataFrame.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据框（DataFrame）**：这是一个异构的二维容器，相当于 pandas 的 DataFrame。'
- en: '**Matrix**: This is a homogeneous two-dimensional version of a vector. It is
    similar to a `numpy.array`.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**矩阵**：这是一个同质的二维版本的向量。它类似于 `numpy.array`。'
- en: For this chapter, we will focus on list and DataFrame, which have the following
    equivalents in pandas: series and DataFrame.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将重点介绍列表和数据框，它们在 pandas 中的对应物是：序列（series）和数据框（DataFrame）。
- en: For more information on R data types, refer to the following document at [http://www.statmethods.net/input/datatypes.html](http://www.statmethods.net/input/datatypes.html).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 R 数据类型的更多信息，请参考以下文档：[http://www.statmethods.net/input/datatypes.html](http://www.statmethods.net/input/datatypes.html)。
- en: For NumPy data types, refer to the following documents at [http://docs.scipy.org/doc/numpy/reference/generated/numpy.array.html](http://docs.scipy.org/doc/numpy/reference/generated/numpy.array.html)
    and [http://docs.scipy.org/doc/numpy/reference/generated/numpy.matrix.html](http://docs.scipy.org/doc/numpy/reference/generated/numpy.matrix.html).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 NumPy 数据类型的更多信息，请参考以下文档：[http://docs.scipy.org/doc/numpy/reference/generated/numpy.array.html](http://docs.scipy.org/doc/numpy/reference/generated/numpy.array.html)
    和 [http://docs.scipy.org/doc/numpy/reference/generated/numpy.matrix.html](http://docs.scipy.org/doc/numpy/reference/generated/numpy.matrix.html)。
- en: R lists
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: R 列表
- en: 'R lists can be created explicitly as a list declaration, shown as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: R列表可以通过显式的列表声明创建，如下所示：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following code block includes its series equivalent in pandas, with the
    creation of a list followed by the creation of a series therefrom:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码块展示了其在pandas中的系列等效版本，其中包括列表的创建，随后从中创建Series：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Array indexing starts at 0 in pandas, unlike R, where it starts at 1\. The
    following is an example:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在pandas中，数组的索引从0开始，而在R中，索引从1开始。以下是一个示例：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: R DataFrames
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: R DataFrames
- en: 'We can construct an R DataFrame as follows by calling the `data.frame()` constructor
    and then displaying it as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过调用`data.frame()`构造函数来构造R DataFrame，然后如下面所示展示它：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the following code block, we construct a pandas DataFrame and then display
    it:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码块中，我们构造了一个pandas DataFrame并展示出来：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Slicing and selection
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 切片和选择
- en: 'In R, we slice objects in the following three ways:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在R中，我们通过以下三种方式进行对象切片：
- en: '`[`: This always returns an object of the same type as the original and can
    be used to select more than one element.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[`: 这总是返回与原始对象相同类型的对象，并且可以用来选择多个元素。'
- en: '`[[`: This is used to extract elements of a list or DataFrame, and can only
    be used to extract a single element. The nature of the returned element will not
    necessarily be a list or DataFrame.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[[`：用于提取列表或DataFrame的元素，只能用于提取单个元素。返回的元素类型不一定是列表或DataFrame。'
- en: '`$`: This is used to extract elements of a list or DataFrame by name and is
    similar to `[[`.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$`：用于通过名称提取列表或DataFrame的元素，类似于`[[`。'
- en: 'Here are some slicing examples in R and their equivalents in pandas:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是R中一些切片示例及其在pandas中的等效形式：
- en: Comparing R-matrix and NumPy array
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 比较R矩阵和NumPy数组
- en: 'Let''s look at creation and selection in R:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下R中的创建和选择：
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To select the first row, we write the following:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 要选择第一行，我们写出如下代码：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To select the second column, we use the following command:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 要选择第二列，我们使用如下命令：
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Let''s now look at NumPy array creation and selection:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们来看NumPy数组的创建和选择：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'To select the first row, we use the following command:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 要选择第一行，我们使用如下命令：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Indexing is different in R and pandas/NumPy.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: R和pandas/NumPy的索引方式不同。
- en: In R, indexing starts at 1, while in pandas/NumPy, it starts at 0\. Hence, we
    have to subtract 1 from all indexes when making the translation from R to pandas/NumPy.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在R中，索引从1开始，而在pandas/NumPy中，索引从0开始。因此，在将R转换为pandas/NumPy时，我们需要将所有索引减去1。
- en: 'To select the second column, we use the following command:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 要选择第二列，我们使用如下命令：
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Another option is to transpose the array first and then select the column,
    as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是先转置数组，然后选择列，如下所示：
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Comparing R lists and pandas series
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 比较R列表和pandas系列
- en: 'List creation and selection in R is as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在R中，列表的创建和选择如下所示：
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Series creation and selection in pandas is effected as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在pandas中，Series的创建和选择如下所示：
- en: '[PRE13]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Here, we see a difference between an R-list and a pandas series from the perspective
    of the `[]` and `[[]]` operators. We can see the difference by considering the
    second item, which is a character string.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到R列表和pandas系列在`[]`和`[[]]`运算符下的不同。通过考虑第二个项目——一个字符字符串，我们可以看出区别。
- en: 'In the case of R, the `[]` operator produces a container type, that is, a list
    containing the string, while the `[[]]` operator produces an atomic type, in this
    case, a character, as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在R中，`[]`运算符返回容器类型，即一个包含字符串的列表，而`[[]]`运算符返回原子类型，在这个例子中是字符类型，如下所示：
- en: '[PRE14]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In the case of pandas, the opposite is true: `[]` produces the atomic type,
    while `[[]]` results in a complex type, that is, a series, as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在pandas中，情况正好相反：`[]`返回原子类型，而`[[]]`返回复杂类型，即Series，如下所示：
- en: '[PRE15]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In both R and pandas, the column name can be specified in order to an element.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在R和pandas中，都可以通过列名来指定元素。
- en: Specifying a column name in R
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在R中指定列名
- en: 'In R, this can be done with the column name preceded by the `$` operator as
    follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在R中，可以通过在列名前加上`$`运算符来完成，如下所示：
- en: '[PRE16]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Specifying a column name in pandas
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在pandas中指定列名
- en: 'In pandas, we subset elements in the usual way with the column name in square
    brackets:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在pandas中，我们可以像往常一样使用方括号中的列名来获取子集：
- en: '[PRE17]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'One area where R and pandas differ is in the subsetting of nested elements.
    For example, to obtain day 4 from weekdays, we have to use the `[[]]` operator
    in R:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: R和pandas在嵌套元素的子集操作上有所不同。例如，要从工作日中获取第四天，我们必须在R中使用`[[]]`运算符：
- en: '[PRE18]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'However, in the case of pandas, we can just use a double `[]`:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在pandas中，我们只需使用双`[]`：
- en: '[PRE19]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: R DataFrames versus pandas DataFrames
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: R DataFrame 与 pandas DataFrame
- en: Selecting data in R DataFrames and pandas DataFrames follows a similar script.
    The following section explains how we perform multi-column selects from both.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在 R DataFrame 和 pandas DataFrame 中选择数据遵循类似的脚本。以下部分解释了我们如何从两者中进行多列选择。
- en: Multi-column selection in R
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: R 中的多列选择
- en: 'In R, we specify the multiple columns to select by stating them in a vector
    within square brackets:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在 R 中，我们通过在方括号内指定向量来选择多个列：
- en: '[PRE20]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Multi-column selection in pandas
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 pandas 中的多列选择
- en: 'In pandas, we subset elements in the usual way with the column names in square
    brackets:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在 pandas 中，我们按照通常的方式使用列名进行子集选择，即列名放在方括号中：
- en: '[PRE21]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Arithmetic operations on columns
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列上的算术操作
- en: In R and pandas, we can apply arithmetic operations in data columns in a similar
    manner. Hence, we can perform arithmetic operations such as addition or subtraction
    on elements in corresponding positions in two or more DataFrames.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在 R 和 pandas 中，我们可以以类似的方式在数据列中应用算术运算。因此，我们可以对两个或多个 DataFrame 中对应位置的元素执行加法或减法等算术操作。
- en: 'Here, we construct a DataFrame in R with columns labeled x and y, and subtract
    column y from column x:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们构建一个 R 中的 DataFrame，列标为 x 和 y，并将列 y 从列 x 中减去：
- en: '[PRE22]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The `with` operator in R also has the same effect as arithmetic operations:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: R 中的 `with` 运算符也具有与算术操作相同的效果：
- en: '[PRE23]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'In pandas, the same arithmetic operations can be performed on columns and the
    equivalent operator is `eval`:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在 pandas 中，相同的算术操作可以在列上执行，相应的运算符是 `eval`：
- en: '[PRE24]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Aggregation and GroupBy
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 聚合与 GroupBy
- en: Sometimes, we wish to split data into subsets and apply a function such as the
    mean, max, or min to each subset. In R, we can do this through the `aggregate`
    or `tapply` functions.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们希望将数据拆分成子集，并对每个子集应用一个函数，如平均值、最大值或最小值。在 R 中，我们可以通过 `aggregate` 或 `tapply`
    函数来实现。
- en: Here, we have a dataset of statistics on the top five strikers of the four clubs
    that made it to the semi-final of the European Champions League Football tournament
    in 2014\. We will use it to illustrate aggregation in R and its equivalent GroupBy
    functionality in pandas.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们有一个数据集，包含了 2014 年欧洲冠军联赛足球赛半决赛四支球队中五位前锋的统计数据。我们将使用它来说明 R 中的聚合及其在 pandas
    中的等效 GroupBy 功能。
- en: Aggregation in R
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: R 中的聚合
- en: 'In R, aggregation is effected using the following command:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在 R 中，聚合是通过以下命令实现的：
- en: '[PRE25]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We now compute the goals-per-game ratio for each striker, so as to measure
    their deadliness in front of goal:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在计算每个前锋的每场比赛进球比率，以此来衡量他们在门前的致命性：
- en: '[PRE26]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Suppose that we wanted to know the highest goals-per-game ratio for each team.
    We would calculate this as follows:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想知道每个球队的最高进球比率。我们可以通过以下方式计算：
- en: '[PRE27]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The `tapply` function is used to apply a function to a subset of an array or
    vector that is defined by one or more columns. The `tapply` function can also
    be used as follows:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`tapply` 函数用于对由一个或多个列定义的数组或向量的子集应用函数。`tapply` 函数也可以如下使用：'
- en: '[PRE28]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The pandas GroupBy operator
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pandas 中的 GroupBy 运算符
- en: 'In pandas, we can achieve the same result by using the `GroupBy` function:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在 pandas 中，我们可以通过使用 `GroupBy` 函数来实现相同的结果：
- en: '[PRE29]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Comparing matching operators in R and pandas
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 比较 R 和 pandas 中的匹配运算符
- en: Here, we demonstrate the equivalence of matching operators between R (`%in%`)
    and pandas (`isin()`). In both cases, a logical vector or series (pandas) is produced,
    which indicates the position at which a match was found.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们演示了 R 中的匹配运算符 (`%in%`) 和 pandas 中的匹配运算符 (`isin()`) 之间的等效性。在这两种情况下，都会生成一个逻辑向量（R）或系列（pandas），它表示找到匹配的位置信息。
- en: R %in% operator
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: R 中的 `%in%` 运算符
- en: 'Here, we demonstrate the use of the `%in%` operator in R:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们演示了如何在 R 中使用 `%in%` 运算符：
- en: '[PRE30]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Pandas isin() function
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pandas 中的 isin() 函数
- en: 'Here is an example of using the pandas `isin()` function:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个使用 pandas `isin()` 函数的例子：
- en: '[PRE31]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Logical subsetting
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 逻辑子集选择
- en: In R, as well as in pandas, there is more than one way to perform logical subsetting.
    Suppose that we wished to display all players with the average goals-per-game
    ratio of greater than or equal to 0.5; that is, on average, they score at least
    one goal every two games.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在 R 和 pandas 中，有多种方式可以执行逻辑子集选择。假设我们希望显示所有平均每场比赛进球数大于或等于 0.5 的球员；也就是说，平均每两场比赛至少进一球。
- en: Logical subsetting in R
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: R 中的逻辑子集选择
- en: 'Here''s how we can do this in R:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们在 R 中如何实现的：
- en: 'Using a logical slice:'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用逻辑切片：
- en: '[PRE32]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Using the `subset()` function:'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `subset()` 函数：
- en: '[PRE33]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Logical subsetting in pandas
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pandas 中的逻辑子集选择
- en: 'In pandas, we do similar:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在 pandas 中，我们做类似的操作：
- en: 'Logical slicing:'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 逻辑切片：
- en: '[PRE34]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '`DataFrame.query()` operator:'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DataFrame.query()` 运算符：'
- en: '[PRE35]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Split-apply-combine
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分割-应用-合并
- en: R has a library called `plyr` for a split-apply-combine data analysis. The `plyr`
    library has a function called `ddply`, which can be used to apply a function to
    a subset of a DataFrame, and then combine the results into another DataFrame.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: R有一个叫做`plyr`的库，用于拆分-应用-合并数据分析。`plyr`库有一个函数叫做`ddply`，它可以用来将一个函数应用到DataFrame的子集上，然后将结果合并成另一个DataFrame。
- en: 'For more information on `ddply`, you can refer to the following link: [http://www.inside-r.org/packages/cran/plyr/docs/ddply](http://www.inside-r.org/packages/cran/plyr/docs/ddply).'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 有关`ddply`的更多信息，请参考以下链接：[http://www.inside-r.org/packages/cran/plyr/docs/ddply](http://www.inside-r.org/packages/cran/plyr/docs/ddply)。
- en: 'To illustrate, let''s consider a subset of a recently created dataset in R,
    which contains data on flights departing NYC in 2013: [http://cran.r-project.org/web/packages/nycflights13/index.html](http://cran.r-project.org/web/packages/nycflights13/index.html).'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明，让我们考虑一个最近创建的R数据集的子集，包含2013年从纽约市出发的航班数据：[http://cran.r-project.org/web/packages/nycflights13/index.html](http://cran.r-project.org/web/packages/nycflights13/index.html)。
- en: Implementation in R
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在R中的实现
- en: 'Here, we install the package in R and instantiate the library:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们在R中安装该包并实例化库：
- en: '[PRE36]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The `ddply` function enables us to summarize the departure delays (mean and 
    standard deviation) by year and month:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`ddply`函数使我们能够按年份和月份总结出发延迟（均值和标准差）：'
- en: '[PRE37]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Let''s save the `flights.sample` dataset to a CSV file so that we can use the
    data to show us how to do the same thing in pandas:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将`flights.sample`数据集保存为CSV文件，这样我们就可以使用这些数据向我们展示如何在pandas中做相同的操作：
- en: '[PRE38]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Implementation in pandas
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在pandas中的实现
- en: 'In order to do the same thing in pandas, we read the CSV file saved in the
    preceding section:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在pandas中做同样的操作，我们读取前面章节保存的CSV文件：
- en: '[PRE39]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'We achieve the same effect as `ddply` by making use of the `GroupBy()` operator,
    as shown in the following code and output:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过使用`GroupBy()`操作符实现了与`ddply`相同的效果，如下所示的代码和输出：
- en: '[PRE40]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Reshaping using melt
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用melt进行重塑
- en: The `melt` function converts data in a wide format to a single column consisting
    of unique ID-variable combinations.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '`melt`函数将宽格式数据转换为由唯一ID-变量组合组成的单列数据。'
- en: R melt function
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: R中的melt函数
- en: 'Here, we demonstrate the use of the `melt()` function in R. It produces long-format
    data in which the rows are unique variable-value combinations:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们展示了在R中使用`melt()`函数。它生成了长格式数据，其中每一行都是独特的变量-值组合：
- en: '[PRE41]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'For more information, you can refer to the following link: [http://www.statmethods.net/management/reshape.html](http://www.statmethods.net/management/reshape.html).'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息请参考以下链接：[http://www.statmethods.net/management/reshape.html](http://www.statmethods.net/management/reshape.html)。
- en: The pandas melt function
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pandas的melt函数
- en: 'In pandas, the `melt` function is similar:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在pandas中，`melt`函数类似：
- en: '[PRE42]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The reference source for this information is as follows: [http://pandas.pydata.org/pandas-docs/stable/reshaping.html#reshaping-by-melt](http://pandas.pydata.org/pandas-docs/stable/reshaping.html#reshaping-by-melt).'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 该信息的参考来源如下：[http://pandas.pydata.org/pandas-docs/stable/reshaping.html#reshaping-by-melt](http://pandas.pydata.org/pandas-docs/stable/reshaping.html#reshaping-by-melt)。
- en: Categorical data
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分类数据
- en: R refers to categorical variables as factors, and the `cut()` function enables
    us to break a continuous numerical variable into ranges and treat the ranges as
    factors or categorical variables, or to classify a categorical variable into a
    larger bin.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在R中，分类变量称为因子，`cut()`函数使我们能够将连续的数值变量分割成不同的范围，并将这些范围视为因子或分类变量，或者将分类变量划分到更大的区间中。
- en: R example using cut()
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: R示例使用cut()
- en: 'The following code block shows an example in R:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码块展示了R中的一个示例：
- en: '[PRE43]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The pandas solution
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pandas解决方案
- en: 'The following code block contains the equivalent of the earlier explained `cut()`
    function in pandas (only applies to version 0.15+):'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码块包含了之前解释的`cut()`函数在pandas中的等效实现（仅适用于版本0.15及以上）：
- en: '[PRE44]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The comparison in the previous sections can be summarized by the following
    table:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 前面章节中的比较可以通过以下表格进行总结：
- en: '**![](img/6c1339fc-8067-47da-be93-3ffa622739d3.png)**'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '**![](img/6c1339fc-8067-47da-be93-3ffa622739d3.png)**'
- en: Comparison of data structures and operations in R and pandas
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: R和pandas中数据结构与操作的比较
- en: Comparison with SQL
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与SQL的比较
- en: Pandas is similar to SQL in many ways in the sense that it is used for data
    selection, data filtering, data aggregation, data generation, and data modification.
    SQL does to the database tables what pandas does to the DataFrames. In this section,
    we will compare the features in SQL with their equivalents in pandas.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 在许多方面与 SQL 类似，它用于数据选择、数据过滤、数据聚合、数据生成和数据修改。SQL 对数据库表执行的操作类似于 pandas 对
    DataFrame 所执行的操作。在本节中，我们将比较 SQL 中的功能与其在 pandas 中的等效功能。
- en: SELECT
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SELECT
- en: SELECT is used to select or subset data in certain columns of the tables. Suppose
    you have a table/DataFrame called `DallasData`. This data would be attached in
    your book packet or could be accessed from the cloud drive of the book. To select
    five rows from the three given columns, you write the following
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: SELECT 用于选择或子集化表中某些列的数据。假设你有一个名为 `DallasData` 的表/DataFrame。这些数据可以附在你的书包中，或者从书中的云盘访问。要从三个给定列中选择五行数据，你可以写出如下命令：
- en: SQL
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL
- en: 'In SQL, you can use the following command:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SQL 中，你可以使用以下命令：
- en: '[PRE45]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: pandas
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pandas
- en: 'In pandas, you can use the following command:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在 pandas 中，你可以使用以下命令：
- en: '[PRE46]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'The following is the output to the preceding commands:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前述命令的输出结果：
- en: '**![](img/a78b25e9-6c2a-43e4-be1d-ed5309ab1ea7.png)**'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '**![](img/a78b25e9-6c2a-43e4-be1d-ed5309ab1ea7.png)**'
- en: Output of select on DallasData
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: DallasData 上的选择结果
- en: Where
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Where
- en: The `Where` statement is used in SQL to apply filter conditions to filter rows
    based on certain criteria. The equivalent in pandas is condition-based logical
    subsetting.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '`Where` 语句在 SQL 中用于应用过滤条件，根据特定标准筛选行。在 pandas 中，相应的操作是基于条件的逻辑子集选择。'
- en: Suppose we want to find out the rows where `active_status ==1`. This can be
    done in the two tools in the following manner.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想找出 `active_status == 1` 的行。这可以在这两种工具中如下进行。
- en: SQL
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL
- en: 'In SQL, you can use the following command:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SQL 中，你可以使用以下命令：
- en: '[PRE47]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: pandas
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pandas
- en: 'In pandas, you can use the following command:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在 pandas 中，你可以使用以下命令：
- en: '[PRE48]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'The following is the output to the preceding commands:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前述命令的输出结果：
- en: '![](img/542ae54e-ff9b-4f7c-86dc-7ce50c95b1cf.png)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![](img/542ae54e-ff9b-4f7c-86dc-7ce50c95b1cf.png)'
- en: DallasData after filtering only active customers
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 过滤掉只有活跃客户后的 DallasData
- en: Suppose we want to find out the rows where the customers are active (`active_status
    ==1`) and have completed fewer than nine services (`services_completed<9`). This
    can be done in the two tools in the following manner.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想找出活跃的客户（`active_status == 1`）且已完成的服务少于九项（`services_completed < 9`）的行。这可以在这两种工具中如下进行。
- en: SQL
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL
- en: 'In SQL, you can use the following command:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SQL 中，你可以使用以下命令：
- en: '[PRE49]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: pandas
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pandas
- en: 'In pandas, you can use the following command:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在 pandas 中，你可以使用以下命令：
- en: '[PRE50]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'The following is the output to the preceding commands:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前述命令的输出结果：
- en: '![](img/4d4d6fb8-55a3-451e-8a32-dd93ba678a47.png)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4d4d6fb8-55a3-451e-8a32-dd93ba678a47.png)'
- en: DallasData after filtering customers who are active and have completed more
    than nine services
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 过滤掉活跃且已完成超过九项服务的客户后的 DallasData
- en: Suppose we want to find out the rows where the customers are active (active_status
    ==1), but only find the customer ID, zip code, and seller ID for those rows. This
    can be done in the two tools in the following manner.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想找出活跃的客户（`active_status == 1`）的行，但只查找这些行的客户 ID、邮政编码和卖家 ID。这可以在这两种工具中如下进行。
- en: SQL
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL
- en: 'In SQL, you can use the following command:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SQL 中，你可以使用以下命令：
- en: '[PRE51]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: pandas
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pandas
- en: 'In pandas, you can use the following command:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在 pandas 中，你可以使用以下命令：
- en: '[PRE52]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'The following is the output to the preceding commands:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前述命令的输出结果：
- en: '![](img/2cd9dfaa-6c71-4afd-b621-b044d2e5f2e7.png)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2cd9dfaa-6c71-4afd-b621-b044d2e5f2e7.png)'
- en: DallasData after filtering only active customers and selecting only particular
    columns
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 过滤掉只有活跃客户且只选择特定列后的 DallasData
- en: group by
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: group by
- en: The `group by` statement is used to aggregate data and find the aggregated values
    of numerical columns. The keyword for performing this operation is the same, but
    the syntax is a little different. Let's look at a few examples.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '`group by` 语句用于聚合数据，并查找数值列的聚合值。执行此操作的关键字相同，但语法略有不同。我们来看看几个示例。'
- en: Suppose we are looking to find the numbers of active and inactive customers
    in the dataset. This can be done as follows in the two tools.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们要查找数据集中活跃和非活跃客户的数量。这可以在这两种工具中如下进行。
- en: SQL
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL
- en: 'In SQL, you can use the following command:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SQL 中，你可以使用以下命令：
- en: '[PRE53]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: pandas
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pandas
- en: 'In pandas, you can use the following command:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在 pandas 中，你可以使用以下命令：
- en: '[PRE54]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The following is the output to the preceding commands:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前述命令的输出结果：
- en: '![](img/7a65325d-d03d-456b-9ef9-7ea443aae685.png)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7a65325d-d03d-456b-9ef9-7ea443aae685.png)'
- en: Count of active and inactive customers using groupby in Python
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Python中的groupby统计活跃和非活跃客户的数量
- en: Different aggregation operations can be applied to two different columns simultaneously
    while aggregating. The following example shows how to do that.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的聚合操作可以同时应用于两个不同的列，下面的示例展示了如何操作。
- en: SQL
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL
- en: 'In SQL, you can use the following command:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在SQL中，你可以使用以下命令：
- en: '[PRE55]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: pandas
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pandas
- en: 'In pandas, you can use the following command:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在pandas中，你可以使用以下命令：
- en: '[PRE56]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '![](img/657bd3dd-26ae-46d7-b579-165425a92689.png)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
  zh: '![](img/657bd3dd-26ae-46d7-b579-165425a92689.png)'
- en: Sum of services completed and the mean customer age grouped by active and inactive
    customers using groupby in Python
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 按照活跃和非活跃客户分组，统计已完成的服务总数和平均客户年龄，使用Python中的groupby
- en: Aggregating by more than one column or multi-index aggregation is also possible.
    Suppose we want zip code-wise details of active and inactive customers.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 对多个列进行聚合或多重索引聚合也是可行的。假设我们希望按邮政编码获取活跃和非活跃客户的详细信息。
- en: SQL
  id: totrans-241
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL
- en: 'In SQL, you can use the following command:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 在SQL中，你可以使用以下命令：
- en: '[PRE57]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: pandas
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pandas
- en: 'In pandas, you can use the following command:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在pandas中，你可以使用以下命令：
- en: '[PRE58]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'The following is the output to the preceding commands:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前述命令的输出：
- en: '![](img/4ce95321-6005-4939-9f4c-4460ada318e6.png)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4ce95321-6005-4939-9f4c-4460ada318e6.png)'
- en: Multi-indexed grouping by customer active status and zip code using groupby
    in Python
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Python中的groupby按客户的活跃状态和邮政编码进行多重索引分组
- en: update
  id: totrans-250
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: update
- en: The `update` statements in SQL are used to filter data rows based on certain
    conditions and to update or modify certain values in those rows. In pandas, there
    is no particular keyword or function for doing this; instead, it is done by means
    of a direct assignment. Let's look at a few examples.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: SQL中的`update`语句用于根据某些条件筛选数据行，并更新或修改这些行中的某些值。在pandas中，没有特定的关键字或函数来执行此操作；相反，它是通过直接赋值来完成的。让我们看几个例子。
- en: Suppose it was established that the data administrator had made a mistake in
    data collection. Due to this error, the data points where the age was actually
    45 were randomly assigned a value greater than 35\. To rectify this, we will update
    all such rows (**age>35**) to 45.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 假设已经确定数据管理员在数据收集过程中犯了错误。由于这个错误，实际上年龄为45的数据点被随机赋值为大于35的数值。为了解决这个问题，我们将把所有这些行（**age>35**）更新为45。
- en: SQL
  id: totrans-253
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL
- en: 'In SQL, you can use the following command:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 在SQL中，你可以使用以下命令：
- en: '[PRE59]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: pandas
  id: totrans-256
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pandas
- en: 'In pandas, you can use the following command:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 在pandas中，你可以使用以下命令：
- en: '[PRE60]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'The following two screenshots show the data before and after performing the
    update:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 以下两个截图展示了执行更新操作前后的数据：
- en: '![](img/51c65a70-65a7-4672-b64b-894ed68ba9b4.png)'
  id: totrans-260
  prefs: []
  type: TYPE_IMG
  zh: '![](img/51c65a70-65a7-4672-b64b-894ed68ba9b4.png)'
- en: Before and after updating all ages greater than 35 to 45
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 更新所有年龄大于35岁为45岁之前和之后的数据
- en: delete
  id: totrans-262
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: delete
- en: The `delete` statements in SQL are used to delete data rows based on certain
    conditions from the database tables. In pandas, we don't delete rows; we just
    deselect them. Let's look at a few examples.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: SQL中的`delete`语句用于根据某些条件从数据库表中删除数据行。在pandas中，我们并不删除行，而是选择取消选中它们。让我们来看一些示例。
- en: Suppose we want to look at those customers who are in the system for at least
    500 days (`days_old>500`).
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想查看那些在系统中至少存在500天的客户（`days_old>500`）。
- en: SQL
  id: totrans-265
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL
- en: 'In SQL, you can use the following command:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 在SQL中，你可以使用以下命令：
- en: '[PRE61]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: pandas
  id: totrans-268
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pandas
- en: 'In pandas, you can use the following command:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 在pandas中，你可以使用以下命令：
- en: '[PRE62]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Run the following command to check whether it did the intended operation.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令以检查是否执行了预期的操作。
- en: '[PRE63]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: This should return 0 rows if the delete action was performed correctly.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 如果删除操作执行正确，这应返回0行数据。
- en: JOIN
  id: totrans-274
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JOIN
- en: The `join` statements are used to merge different tables in a database and extract
    important information spread across a variety of tables. In pandas, the merge
    operator does the same job. The only difference is that the syntax is a little
    different.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '`join`语句用于合并数据库中的不同表，并提取分散在多个表中的重要信息。在pandas中，merge操作符完成了相同的工作。唯一的区别是语法略有不同。'
- en: 'Let''s create two datasets for illustrating different joins and their syntaxes
    in SQL and pandas:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建两个数据集，用来演示SQL和pandas中的不同连接及其语法：
- en: '[PRE64]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'The following is the output to the preceding command:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前述命令的输出：
- en: '![](img/0ef207ef-3c2b-4d03-81b7-2471a4f7f5c9.png)'
  id: totrans-279
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0ef207ef-3c2b-4d03-81b7-2471a4f7f5c9.png)'
- en: Two dummy datasets
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 两个示例数据集
- en: Suppose we want to do an inner join between the two. This can be done in the
    two tools as shown preceding.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想在这两者之间进行内连接。可以按照前述的方法在这两个工具中实现。
- en: SQL
  id: totrans-282
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL
- en: 'In SQL, you can use the following command:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SQL 中，你可以使用以下命令：
- en: '[PRE65]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: pandas
  id: totrans-285
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pandas
- en: 'In pandas, you can use the following command:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 在 pandas 中，你可以使用以下命令：
- en: '[PRE66]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'The following is the output to the preceding commands:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前面命令的输出：
- en: '![](img/4ff132e8-2b5c-4634-830c-c3f368f3057a.png)'
  id: totrans-289
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4ff132e8-2b5c-4634-830c-c3f368f3057a.png)'
- en: Output of the inner join of the two DataFrames
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 两个 DataFrame 的内连接输出
- en: As expected of an inner join, only the key values present in both the tables
    appear in the merged dataset.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 正如内连接所预期的，只有在两个表中都存在的键值才会出现在合并后的数据集中。
- en: 'Suppose we want to implement a left join between the two. This can be done
    in the two tools as shown here:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们要在两者之间实现左连接。这可以通过以下两种工具来完成：
- en: SQL
  id: totrans-293
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL
- en: 'In SQL, you can use the following command:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SQL 中，你可以使用以下命令：
- en: '[PRE67]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: pandas
  id: totrans-296
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pandas
- en: 'In pandas, you can use the following command:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 在 pandas 中，你可以使用以下命令：
- en: '[PRE68]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'The following is the output to the preceding commands:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前面命令的输出：
- en: '![](img/efa176a9-d7a8-451e-9d8a-72731f0f1961.png)'
  id: totrans-300
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efa176a9-d7a8-451e-9d8a-72731f0f1961.png)'
- en: Output of the left join between the two tables
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 两个表的左连接输出
- en: As expected of a left join, it retrieves all the unique values of the key present
    in the left-hand table (`df1`, in this case), as well as the corresponding values
    in the right-hand table. For the key values in the left-hand table for which it
    doesn't find a match in the right-hand table, it returns NaN.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 正如左连接所预期的，它会检索左表（此处为 `df1`）中存在的所有唯一键值及其在右表中的相应值。对于左表中的键值，如果在右表中没有找到匹配项，则返回 NaN。
- en: 'Suppose we want to implement a right join between the two. This can be done
    in the two tools as shown here:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们要在两者之间实现右连接。这可以通过以下两种工具来完成：
- en: SQL
  id: totrans-304
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL
- en: 'In SQL, you can use the following command:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SQL 中，你可以使用以下命令：
- en: '[PRE69]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: pandas
  id: totrans-307
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pandas
- en: 'In pandas, you can use the following command:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 在 pandas 中，你可以使用以下命令：
- en: '[PRE70]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'The following is the output to the preceding commands:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前面命令的输出：
- en: '![](img/b02be011-5eb5-40fc-953e-66477c2f2c8a.png)'
  id: totrans-311
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b02be011-5eb5-40fc-953e-66477c2f2c8a.png)'
- en: Output of the right join between the two tables
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 两个表的右连接输出
- en: As expected of a right join, it retrieves all the unique values of the key present
    in the right-hand table (`df2`, in this case), as well as the corresponding values
    in the left-hand table. For the key values in the right-hand table for which it
    doesn't find a match in the left-hand table, it returns NaN.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 正如右连接所预期的，它会检索右表（此处为 `df2`）中存在的所有唯一键值及其在左表中的相应值。对于右表中的键值，如果在左表中没有找到匹配项，则返回 NaN。
- en: Comparison with SAS
  id: totrans-314
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与 SAS 的比较
- en: SAS is the analytics sledgehammer of yesteryear. It was the market leader in
    analytics solutions before R and Python, the poster boys of the open source movement,
    dethroned it from its *numero uno* position. Nevertheless, many enterprises still
    trust it with all their analytics requirements, despite the unreasonably high
    costs.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: SAS 是过去的分析利器。在 R 和 Python 这两个开源运动的代表工具取代它之前，SAS 是分析解决方案的市场领导者，曾居于**头号**地位。然而，尽管其成本过高，许多企业仍然依赖它处理所有的分析需求。
- en: 'In this section, we will keep all the comparisons to a tabular format. The
    SAS and pandas equivalents are summarized in the following table:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将所有比较都以表格的形式展示。SAS 和 pandas 的对应关系总结在下表中：
- en: '| Pandas | SAS |'
  id: totrans-317
  prefs: []
  type: TYPE_TB
  zh: '| Pandas | SAS |'
- en: '| DataFrame | dataset |'
  id: totrans-318
  prefs: []
  type: TYPE_TB
  zh: '| DataFrame | dataset |'
- en: '| column | variable |'
  id: totrans-319
  prefs: []
  type: TYPE_TB
  zh: '| column | variable |'
- en: '| row | observation |'
  id: totrans-320
  prefs: []
  type: TYPE_TB
  zh: '| row | observation |'
- en: '| groupby | BY-group |'
  id: totrans-321
  prefs: []
  type: TYPE_TB
  zh: '| groupby | BY-group |'
- en: '| NaN | . |'
  id: totrans-322
  prefs: []
  type: TYPE_TB
  zh: '| NaN | . |'
- en: 'Now, let''s see how we can perform the basic data operations in pandas and
    SAS:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何在 pandas 和 SAS 中执行基本的数据操作：
- en: '| Task | Pandas | SAS |'
  id: totrans-324
  prefs: []
  type: TYPE_TB
  zh: '| 任务 | Pandas | SAS |'
- en: '| Creating a dataset | `pd.DataFrame({''odds'': [1, 3, 5, 7, 9], ''evens'':
    [2, 4, 6, 8, 10]})` | `data df;``    input x y;``    datalines;``    1 2``   
    3 4``    5 6``    7 8``    9 10;``run;` |'
  id: totrans-325
  prefs: []
  type: TYPE_TB
  zh: '| 创建数据集 | `pd.DataFrame({''odds'': [1, 3, 5, 7, 9], ''evens'': [2, 4, 6, 8,
    10]})` | `data df; input x y; datalines; 1 2 3 4 5 6 7 8 9 10; run;` |'
- en: '| Reading a dataset | `pd.read_csv(‘DallasData.csv’)` | `proc import datafile=''DallasData.csv''
    dbms=csv out=tips replace;``    getnames=yes;``run;` |'
  id: totrans-326
  prefs: []
  type: TYPE_TB
  zh: '| 读取数据集 | `pd.read_csv(''DallasData.csv'')` | `proc import datafile=''DallasData.csv''
    dbms=csv out=tips replace; getnames=yes; run;` |'
- en: '| Exporting a dataset | `DallasData.to_csv(‘dallas.csv’)` | `proc export data=DallasData
    outfile=''dallas.csv'' dbms=csv;``run;` |'
  id: totrans-327
  prefs: []
  type: TYPE_TB
  zh: '| 导出数据集 | `DallasData.to_csv(''dallas.csv'')` | `proc export data=DallasData
    outfile=''dallas.csv'' dbms=csv; run;` |'
- en: '| Column operations | `DallasData[''days_old_year''] = DallasData[''days_old'']/365`
    | `data DallasData;``    set DallasData;``    days_old_year = days_old / 365;``run;`
    |'
  id: totrans-328
  prefs: []
  type: TYPE_TB
  zh: '| 列操作 | `DallasData[''days_old_year''] = DallasData[''days_old'']/365` | `data
    DallasData;``    set DallasData;``    days_old_year = days_old / 365;``run;` |'
- en: '| Filtering | `DallasData[DallasData[''days_old'']>800].head()` | `data tips;``   
    set DallasData;``    if days_old > 800;``run;` |'
  id: totrans-329
  prefs: []
  type: TYPE_TB
  zh: '| 过滤 | `DallasData[DallasData[''days_old'']>800].head()` | `data tips;``   
    set DallasData;``    if days_old > 800;``run;` |'
- en: '| If-else | `DallasData[''income_class''] = np.where(DallasData[''income_average'']
    < 40000, ''low'', ''high'')` | `data DallasData;``    set dallas;``    format
    income_average $5.;``    if days_old < 40000 then bucket = ''low'';``    else
    bucket = ''high'';``run;` |'
  id: totrans-330
  prefs: []
  type: TYPE_TB
  zh: '| If-else | `DallasData[''income_class''] = np.where(DallasData[''income_average'']
    < 40000, ''low'', ''high'')` | `data DallasData;``    set dallas;``    format
    income_average $5.;``    if days_old < 40000 then bucket = ''low'';``    else
    bucket = ''high'';``run;` |'
- en: '| Column selection | `DallasData[[''zip'',''customerID'',''days_old'',''services_due'']].head()`
    | `data dallas;``    set DallasData;``    keep zip CustomerID days_old services_due;``run;`
    |'
  id: totrans-331
  prefs: []
  type: TYPE_TB
  zh: '| 列选择 | `DallasData[[''zip'',''customerID'',''days_old'',''services_due'']].head()`
    | `data dallas;``    set DallasData;``    keep zip CustomerID days_old services_due;``run;`
    |'
- en: '| Sort | `dallas = DallasData.sort_values([''days_old'',''services_completed''])`
    | `proc sort data=DallasData;``    by days_old services_completed;``run;` |'
  id: totrans-332
  prefs: []
  type: TYPE_TB
  zh: '| 排序 | `dallas = DallasData.sort_values([''days_old'',''services_completed''])`
    | `proc sort data=DallasData;``    by days_old services_completed;``run;` |'
- en: '| String length | `DallasData[''state_name''].str.len().head()` | `data _null_;``set
    DallasData;``put(LENGTHN(state_name));``put(LENGTHC(state_name));``run;` |'
  id: totrans-333
  prefs: []
  type: TYPE_TB
  zh: '| 字符串长度 | `DallasData[''state_name''].str.len().head()` | `data _null_;``set
    DallasData;``put(LENGTHN(state_name));``put(LENGTHC(state_name));``run;` |'
- en: '| Groupby aggregation | `dallas_grouped = DallasData.groupby([''zip'', ''customerID''])[''days_old'',
    ''services_completed''].sum()` | `proc summary data=DallasData nway;``    class
    zip customerID;``    var days_old services_completed;``    output out=dallas_summed
    sum=;``run;` |'
  id: totrans-334
  prefs: []
  type: TYPE_TB
  zh: '| 分组聚合 | `dallas_grouped = DallasData.groupby([''zip'', ''customerID''])[''days_old'',
    ''services_completed''].sum()` | `proc summary data=DallasData nway;``    class
    zip customerID;``    var days_old services_completed;``    output out=dallas_summed
    sum=;``run;` |'
- en: '| Join | `df1 = pd.DataFrame({''key'': [''A'', ''B'', ''C'', ''D''], ''value'':
    np.random.randn(4)})``df2 = pd.DataFrame({''key'': [''B'', ''D'', ''D'', ''E''],''value'':
    np.random.randn(4)})``inner_join = df1.merge(df2, on=[''key''], how=''inner'')``left_join
    = df1.merge(df2, on=[''key''], how=''left'')``right_join = df1.merge(df2, on=[''key''],
    how=''right'')` | `proc sort data=df1;``    by key;``run;``proc sort data=df2;``   
    by key;``run;``data left_join inner_join right_join outer_join;``    merge df1(in=a)
    df2(in=b);``    if a and b then output inner_join;``    if a then output left_join;``   
    if b then output right_join;``    if a or b then output outer_join;``run;` |'
  id: totrans-335
  prefs: []
  type: TYPE_TB
  zh: '| 联接 | `df1 = pd.DataFrame({''key'': [''A'', ''B'', ''C'', ''D''], ''value'':
    np.random.randn(4)})``df2 = pd.DataFrame({''key'': [''B'', ''D'', ''D'', ''E''],''value'':
    np.random.randn(4)})``inner_join = df1.merge(df2, on=[''key''], how=''inner'')``left_join
    = df1.merge(df2, on=[''key''], how=''left'')``right_join = df1.merge(df2, on=[''key''],
    how=''right'')` | `proc sort data=df1;``    by key;``run;``proc sort data=df2;``   
    by key;``run;``data left_join inner_join right_join outer_join;``    merge df1(in=a)
    df2(in=b);``    if a and b then output inner_join;``    if a then output left_join;``   
    if b then output right_join;``    if a or b then output outer_join;``run;` |'
- en: Summary
  id: totrans-336
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, we  attempted to compare key features in R and SQL with their
    pandas equivalents in order to achieve the following objectives:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们尝试将 R 和 SQL 中的关键功能与 pandas 中的对应功能进行比较，以实现以下目标：
- en: To assist R, SQL, and SAS users who may wish to replicate the same functionality
    in pandas
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 帮助 R、SQL 和 SAS 用户，他们可能希望在 pandas 中复制相同的功能
- en: To assist any users who on reading some R, SQL, and SAS code, may wish to rewrite
    the code in pandas
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了帮助任何阅读 R、SQL 和 SAS 代码的用户，他们可能希望将代码重写为 pandas 代码
- en: 'In the next chapter, we will conclude the book by providing a brief introduction
    to the `scikit-learn` library for performing machine learning, and we will demonstrate
    how pandas fits in that framework. Reference documentation for this chapter can
    be found here: [http://pandas.pydata.org/pandas-docs/stable/comparison_with_r.html](http://pandas.pydata.org/pandas-docs/stable/comparison_with_r.html).'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将通过简要介绍 `scikit-learn` 库来进行机器学习，并演示 pandas 如何融入该框架，从而总结本书。本章的参考文档可以在此找到：[http://pandas.pydata.org/pandas-docs/stable/comparison_with_r.html](http://pandas.pydata.org/pandas-docs/stable/comparison_with_r.html)。
