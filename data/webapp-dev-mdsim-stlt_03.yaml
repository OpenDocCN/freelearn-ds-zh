- en: '3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '3'
- en: Exploring Streamlit’s Features and Functionality
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索 Streamlit 的特性和功能
- en: This chapter is a beginner-friendly tutorial that introduces you to the core
    features and functionalities of the Streamlit Python framework, aiming to help
    you get started with the library quickly and easily. This chapter covers the basic
    concepts of Streamlit, such as creating and customizing widgets, laying out the
    user interface, and adding visualizations and charts.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章是一个面向初学者的教程，介绍了 Streamlit Python 框架的核心功能，旨在帮助您快速轻松地开始使用该库。本章涵盖了 Streamlit
    的基本概念，如创建和自定义小部件、布局用户界面，以及添加可视化和图表。
- en: By the end of this chapter, you should be able to create and run Streamlit apps
    and have a solid understanding of the library’s features and capabilities. This
    is the first hands-on step of our exciting journey together!
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您应该能够创建并运行 Streamlit 应用程序，并且对该库的功能和特性有深入的理解。这是我们共同激动人心的旅程的第一步！
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Installing and launching Streamlit
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装并启动 Streamlit
- en: Streamlit features and widgets
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Streamlit 特性和小部件
- en: DataFrames, plots, and visualizations
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据框、图表和可视化
- en: Date, time, and more
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日期、时间等
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'In this chapter, we will use the following libraries, packages, and tools:'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用以下库、包和工具：
- en: Sublime Text
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sublime Text
- en: Python 3
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 3
- en: '`pipenv`'
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pipenv`'
- en: '`streamlit`'
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`streamlit`'
- en: CSV files
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSV 文件
- en: 'The code for this chapter can be found in this book’s GitHub repository: [https://github.com/PacktPublishing/Web-App-Development-Made-Simple-with-Streamlit/tree/fcb2bd740a2df7263b4470164805926fee3157a1/Chapter03](https://github.com/PacktPublishing/Web-App-Development-Made-Simple-with-Streamlit/tree/fcb2bd740a2df7263b4470164805926fee3157a1/Chapter03)'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章的代码可以在本书的 GitHub 仓库中找到：[https://github.com/PacktPublishing/Web-App-Development-Made-Simple-with-Streamlit/tree/fcb2bd740a2df7263b4470164805926fee3157a1/Chapter03](https://github.com/PacktPublishing/Web-App-Development-Made-Simple-with-Streamlit/tree/fcb2bd740a2df7263b4470164805926fee3157a1/Chapter03)
- en: Installing and launching Streamlit
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装并启动 Streamlit
- en: Finally, we are ready to write our code to create beautiful web applications!
    Where do we start? The first thing we must do is install Streamlit.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们准备好编写代码来创建美丽的 Web 应用程序了！我们从哪里开始？我们必须做的第一件事是安装 Streamlit。
- en: 'So, let’s create a new directory – we will call it `streamlit_course`. Once
    you’re inside it, prepare a new virtual environment by typing the well-known `pipenv
    shell` command. Once you are done running the `pipenv shell` command, you will
    get the following output:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，让我们创建一个新的目录——我们将其命名为 `streamlit_course`。进入该目录后，通过输入常用的 `pipenv shell` 命令来准备一个新的虚拟环境。运行
    `pipenv shell` 命令后，您将看到如下输出：
- en: '![Figure 3.1: The streamlit_course virtual environment creation](img/B21147_03_01.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.1：创建 streamlit_course 虚拟环境](img/B21147_03_01.jpg)'
- en: 'Figure 3.1: The streamlit_course virtual environment creation'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.1：创建 streamlit_course 虚拟环境
- en: 'Installing Streamlit is very easy – it’s a matter of using a simple instruction,
    as indicated on its official website ([www.streamlit.io](http://www.streamlit.io)):'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Streamlit 非常简单——只需使用一个简单的命令，如其官方网站上所示 ([www.streamlit.io](http://www.streamlit.io))：
- en: '![Figure 3.2: Installing Streamlit](img/B21147_03_02.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.2：安装 Streamlit](img/B21147_03_02.jpg)'
- en: 'Figure 3.2: Installing Streamlit'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.2：安装 Streamlit
- en: 'Since we are using `pipenv` and the `streamlit_course` virtual environment
    that we just created, we have to modify the instruction suggested in *Figure 3**.2*
    slightly, like so:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们正在使用 `pipenv` 和刚刚创建的 `streamlit_course` 虚拟环境，我们需要稍微修改*图 3.2*中建议的指令，如下所示：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You will get the following result:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 您将得到以下结果：
- en: '![Figure 3.3: Streamlit installation with pipenv](img/B21147_03_03.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.3：使用 pipenv 安装 Streamlit](img/B21147_03_03.jpg)'
- en: 'Figure 3.3: Streamlit installation with pipenv'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.3：使用 pipenv 安装 Streamlit
- en: In this way, Streamlit will be easily installed and `Pipfile` will be updated.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，Streamlit 将轻松安装，并且 `Pipfile` 会被更新。
- en: 'Now, let’s create an empty file to be used as our Python script by typing the
    following:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过输入以下命令来创建一个空文件，用作我们的 Python 脚本：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'As we can see, in our `streamlit_course` directory, we have three files:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，在 `streamlit_course` 目录中，我们有三个文件：
- en: '![Figure 3.4: The files in the streamlit_course directory](img/B21147_03_04.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.4：streamlit_course 目录中的文件](img/B21147_03_04.jpg)'
- en: 'Figure 3.4: The files in the streamlit_course directory'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.4：streamlit_course 目录中的文件
- en: So far, we have installed Streamlit and we have an empty Python file. Although
    this isn’t much, we are ready to launch our first web application!
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经安装了 Streamlit，并且有一个空的 Python 文件。虽然这并不多，但我们已经准备好启动我们的第一个 Web 应用了！
- en: 'The instruction to launch Streamlit is very simple – just type `streamlit run
    <python_file_name.py>`, where the Python file in our case is the empty `app.py`
    file we just created. However, since we are in a `pipenv` virtual environment,
    we have to tell `pipenv` that we want to launch something. So, let’s write the
    following:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 启动 Streamlit 的指令非常简单——只需键入 `streamlit run <python_file_name.py>`，在我们的例子中，Python
    文件就是我们刚刚创建的空白 `app.py` 文件。然而，由于我们处在一个 `pipenv` 虚拟环境中，我们必须告诉 `pipenv` 我们希望启动某个应用。因此，我们需要写下以下内容：
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In this way, `pipenv` launches Streamlit, which runs the `app.py` file. Our
    browser will open on an empty page, but if we check the address bar carefully,
    we will see that something is running on `localhost:8501`. Our Streamlit web app
    is alive and running on our local machine on its standard `8501` port (if you
    are asked to write your email in the terminal, just press *Enter*):'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，`pipenv` 启动了 Streamlit，运行 `app.py` 文件。我们的浏览器会打开一个空白页面，但如果我们仔细查看地址栏，会看到
    `localhost:8501` 上有东西在运行。我们的 Streamlit Web 应用在本地机器上运行，使用的是标准的 `8501` 端口（如果终端要求你输入电子邮件，直接按
    *Enter* 键即可）：
- en: '![Figure 3.5: Streamlit running on localhost:8501](img/B21147_03_05.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.5：Streamlit 运行在 localhost:8501](img/B21147_03_05.jpg)'
- en: 'Figure 3.5: Streamlit running on localhost:8501'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.5：Streamlit 运行在 localhost:8501
- en: At this point, our web app can be improved by adding widgets and elements. Open
    another terminal in our terminator (another tile), enter our virtual environment,
    and run our Sublime Text editor with `"``subl ."`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们的 Web 应用可以通过添加控件和元素来进行改进。在我们的 terminator 中打开另一个终端（另一个平铺窗口），进入虚拟环境，并用 `"``subl
    ."` 启动我们的 Sublime Text 编辑器。
- en: Streamlit features and widgets
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Streamlit 特性和控件
- en: 'The very first step has been completed: Streamlit is up and running. What we
    need to do now is add text, widgets, elements, and more to make something beautiful
    that also works correctly.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步已经完成：Streamlit 已经启动并运行。现在我们需要做的是添加文本、控件、元素等，制作既美观又能正常运行的内容。
- en: 'To start populating our web app with nice and useful widgets, we need to write
    some Python code. The best way to do this is to put Sublime Text and our browser
    side by side, as shown in the following screenshot:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始用漂亮且实用的控件填充我们的 Web 应用，我们需要编写一些 Python 代码。最佳方式是将 Sublime Text 和浏览器并排放置，正如下图所示：
- en: '![Figure 3.6: Sublime Text and a browser side by side](img/B21147_03_06.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.6：Sublime Text 和浏览器并排显示](img/B21147_03_06.jpg)'
- en: 'Figure 3.6: Sublime Text and a browser side by side'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.6：Sublime Text 和浏览器并排显示
- en: 'This kind of visualization is very convenient because we can immediately see
    any change we make to the code (in real time, as soon as we save our code changes),
    in our editor directly, in the browser by just selecting **Always Rerun** from
    the top-right menu of our web application:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这种可视化非常方便，因为我们可以立即看到我们对代码所做的任何更改（实时显示，只要我们保存代码更改），在编辑器中直接显示，在浏览器中只需从 Web 应用的右上角菜单中选择
    **Always Rerun**：
- en: '![Figure 3.7: Code changes and Always Rerun](img/B21147_03_07.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.7：代码更改和 Always Rerun](img/B21147_03_07.jpg)'
- en: 'Figure 3.7: Code changes and Always Rerun'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.7：代码更改和 Always Rerun
- en: 'So, let’s import Streamlit (with `st` as the alias) and start dealing with
    some text. We can write the following:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，让我们导入 Streamlit（使用 `st` 作为别名）并开始处理一些文本。我们可以编写以下代码：
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The result is shown in *Figure 3**.8*:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如 *图 3.8* 所示：
- en: '![Figure 3.8: Code changes and their effect on the web app](img/B21147_03_08.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.8：代码更改及其对 Web 应用的影响](img/B21147_03_08.jpg)'
- en: 'Figure 3.8: Code changes and their effect on the web app'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.8：代码更改及其对 Web 应用的影响
- en: '`st.title` gives back a long string of text. We can use many other text dimensions
    in Sublime Text. For example, we can write and save the following code:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`st.title` 返回一长串文本。我们可以在 Sublime Text 中使用许多其他文本维度。例如，我们可以编写并保存以下代码：'
- en: '[PRE4]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Since we’ve already selected **Always Rerun**, we’ll immediately see that our
    web app changes in the browser, introducing the header, subheader, text, and write
    text dimensions we wish to visualize:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经选择了 **Always Rerun**，我们会立即看到浏览器中的 Web 应用发生变化，展示出我们希望可视化的标题、副标题、文本以及写入文本的维度：
- en: '![Figure 3.9: Different text dimensions](img/B21147_03_09.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.9：不同的文本维度](img/B21147_03_09.jpg)'
- en: 'Figure 3.9: Different text dimensions'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.9：不同的文本维度
- en: 'Streamlit can even directly manage the markdown. This is quite simple since
    we just have to use `markdown` and pass the text inside the parenthesis. For example,
    we can write the following:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Streamlit 甚至可以直接管理 markdown。这非常简单，因为我们只需要使用 `markdown` 并将文本传递给括号。例如，我们可以编写如下内容：
- en: '[PRE5]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In this way, we write the word “Streamlit” on the screen as a hyperlink to
    the official Streamlit website. If we wish to put the link directly on the screen,
    to make the URL visible, we can write the following:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们可以在屏幕上写下“Streamlit”一词，作为指向官方 Streamlit 网站的超链接。如果我们希望将链接直接显示在屏幕上，可以写如下内容：
- en: '[PRE6]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In Streamlit, we can use HTML in a very simple way – we just need to create
    a variable containing all our HTML code, then put it inside a markdown instruction
    together with the `unsafe_allow_html` argument set to `True`. Let’s take a look:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Streamlit 中，我们可以非常简单地使用 HTML —— 只需要创建一个包含所有 HTML 代码的变量，然后将其放入一个带有 `unsafe_allow_html`
    参数设置为 `True` 的 markdown 指令中。让我们来看一下：
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This is the result we get:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们得到的结果：
- en: '![Figure 3.10: Markdown and HTML](img/B21147_03_10.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.10：Markdown 与 HTML](img/B21147_03_10.jpg)'
- en: 'Figure 3.10: Markdown and HTML'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.10：Markdown 与 HTML
- en: See what happens when you set `unsafe_allow_html` to `False`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 查看将 `unsafe_allow_html` 设置为 `False` 时会发生什么。
- en: Colored textboxes
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 彩色文本框
- en: 'In terms of text, we can have beautiful textboxes consisting of different colors
    to indicate a warning, an error, and so on. This kind of color code can be very
    useful when we’re building our web application. Let’s take a look at the code:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在文本方面，我们可以使用不同颜色的文本框来指示警告、错误等。这样的颜色编码在构建网页应用时非常有用。让我们看一下代码：
- en: '[PRE8]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The first piece of code returns a green box with some text, the second a light
    blue box with text, the third a yellowish box containing text, and the last a
    red box containing the error message:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个代码块返回一个绿色框，里面有一些文字；第二个返回一个浅蓝色框，包含文字；第三个返回一个黄色框，里面有文字；最后一个是一个包含错误信息的红色框：
- en: '![Figure 3.11: Colored textboxes](img/B21147_03_11.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.11：彩色文本框](img/B21147_03_11.jpg)'
- en: 'Figure 3.11: Colored textboxes'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.11：彩色文本框
- en: Colored textboxes are something really interesting since we can use them to
    advise about something wrong, such as an issue, using the reddish tone, or something
    very good, such as a success case, using a greenish tone. Moreover, we can use
    this feature to give a little vivacity to our text.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 彩色文本框非常有趣，因为我们可以用它们来提醒某些问题，比如使用红色调表示错误，或者用绿色调表示成功案例。此外，我们还可以利用这一特性为文本增添一些生气。
- en: Images, audio, and video
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图片、音频和视频
- en: 'In Streamlit, it’s extremely easy to manage multimedia, such as images, audio,
    and video. Starting with images, we need to import the PIL library and then add
    a couple of lines of code:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Streamlit 中，管理多媒体（如图片、音频和视频）非常简单。首先，处理图片时，我们需要导入 PIL 库，然后添加几行代码：
- en: '[PRE9]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Here’s the output:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出结果：
- en: '![Figure 3.12: The st.image](img/B21147_03_12.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.12：st.image](img/B21147_03_12.jpg)'
- en: 'Figure 3.12: The st.image'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.12：st.image
- en: Please note that the JPEG image is in the same directory as our `app.py` file.
    If we want, we can change the width and the caption of the image.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，JPEG 图像与我们的 `app.py` 文件在同一目录中。如果需要，我们可以更改图像的宽度和标题。
- en: 'Working with video is not very different – we can put a video file in the same
    directory as our `app.py` file and open it:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 使用视频的方式与此类似——我们可以将视频文件放在与 `app.py` 文件相同的目录中并打开它：
- en: '[PRE10]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In the box, there are buttons for play/pause, volume control, and fullscreen:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在框中，有播放/暂停、音量控制和全屏按钮：
- en: '![Figure 3.13: The st.video widget from a file](img/B21147_03_13.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.13：来自文件的 st.video 小部件](img/B21147_03_13.jpg)'
- en: 'Figure 3.13: The st.video widget from a file'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.13：来自文件的 st.video 小部件
- en: 'We can also open videos directly from the web by using a URL with the `st.video`
    widget. For example, we can write the following:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过使用 URL 和 `st.video` 小部件直接从网络打开视频。例如，我们可以编写如下内容：
- en: '[PRE11]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The result is shown in the following screenshot:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下所示：
- en: '![Figure 3.14: The st.video widget from a URL](img/B21147_03_14.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.14：来自 URL 的 st.video 小部件](img/B21147_03_14.jpg)'
- en: 'Figure 3.14: The st.video widget from a URL'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.14：来自 URL 的 st.video 小部件
- en: 'For audio files, we can do more or less the same. We can write the following:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 对于音频文件，我们也可以做差不多的操作。我们可以编写如下内容：
- en: '[PRE12]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Please note that this time, we have to specify the format. Once again, out
    of the box, we get the play/pause button and volume control:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这次我们需要指定格式。再次强调，默认情况下，我们会得到播放/暂停按钮和音量控制：
- en: '![Figure 3.15: The st.audio widget](img/B21147_03_15.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.15：st.audio 小部件](img/B21147_03_15.jpg)'
- en: 'Figure 3.15: The st.audio widget'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.15：st.audio小部件
- en: 'Now, let’s look at another widget that will be very useful in the next few
    chapters. First up is the “button” widget. So, please comment all the code we’ve
    written so far (we can create a comment by putting `#` at the beginning of the
    line of code we want to ignore), excluding the instruction that imports Streamlit,
    and continue. We can start by writing a simple instruction:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看一下另一个在接下来的章节中非常有用的小部件。首先是“按钮”小部件。因此，请注释掉我们到目前为止写的所有代码（我们可以通过在要忽略的代码行前面加上`#`来创建注释），除了导入Streamlit的指令，然后继续。我们可以先写一个简单的指令：
- en: '[PRE13]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This instruction gives us a beautiful button with a caption stating **Play**.
    However, when we click on it, nothing happens!
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这个指令给我们一个漂亮的按钮，标签上写着**播放**。然而，当我们点击它时，什么也不会发生！
- en: '![Figure 3.16: The st.button widget](img/B21147_03_16.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![图3.16：st.button小部件](img/B21147_03_16.jpg)'
- en: 'Figure 3.16: The st.button widget'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.16：st.button小部件
- en: 'Nothing happens because there is no code related to the button, so things will
    change if we slightly change the previous line of code in the following way:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 什么也不会发生，因为没有与按钮相关的代码，所以如果我们稍微修改前一行代码，情况就会发生变化，如下所示：
- en: '[PRE14]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'As we can see, when the **Play** button is clicked, a beautiful piece of text
    stating **Hello World!** will appear:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，当点击**播放**按钮时，一段漂亮的文本**Hello World!**将会出现：
- en: '![Figure 3.17: Event associated with st.button](img/B21147_03_17.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![图3.17：与st.button关联的事件](img/B21147_03_17.jpg)'
- en: 'Figure 3.17: Event associated with st.button'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.17：与st.button关联的事件
- en: 'Many other widgets work in the same way, such as `"Checkbox"`. Let’s say we
    write the following code:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 许多其他小部件的工作方式与此相同，例如“Checkbox”。假设我们写下以下代码：
- en: '[PRE15]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We will get the result shown in *Figure 3**.18*:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将得到*图3.18*所示的结果：
- en: '![Figure 3.18: The st.checkbox widget](img/B21147_03_18.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图3.18：st.checkbox小部件](img/B21147_03_18.jpg)'
- en: 'Figure 3.18: The st.checkbox widget'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.18：st.checkbox小部件
- en: 'The radio button works a little differently – we have to specify a list of
    options and then decide what happens when we select each of them:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 单选按钮的工作方式有点不同——我们必须指定一个选项列表，然后决定选择每个选项时发生什么：
- en: '[PRE16]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The preceding code will give us the following result:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将给我们以下结果：
- en: '![Figure 3.19: The st.radio widget](img/B21147_03_19.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![图3.19：st.radio小部件](img/B21147_03_19.jpg)'
- en: 'Figure 3.19: The st.radio widget'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.19：st.radio小部件
- en: 'Also, in the selectbox, we need to specify a list of options:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在selectbox中，我们需要指定一个选项列表：
- en: '[PRE17]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We select one of the options (in this case, an Italian city) that will be saved
    in the `city` variable:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择了一个选项（在这种情况下是一个意大利城市），它将保存在`city`变量中：
- en: '![Figure 3.20: The st.selectbox widget](img/B21147_03_20.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![图3.20：st.selectbox小部件](img/B21147_03_20.jpg)'
- en: 'Figure 3.20: The st.selectbox widget'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.20：st.selectbox小部件
- en: 'In this case, we want to have a multi-selection. We can use the `multiselect`
    widget in the following way:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们希望进行多选。我们可以通过以下方式使用`multiselect`小部件：
- en: '[PRE18]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The coding is very similar to the previous one but this time, we can select
    more than one option. This can be seen in the following figure, where we selected
    two jobs (if we want, we can click on the **x** button to cancel a selected option):'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 代码与之前的非常相似，但这次我们可以选择多个选项。可以通过下图看到，我们选择了两个职位（如果需要，我们可以点击**x**按钮取消已选择的选项）：
- en: '![Figure 3.21: The st.multiselect widget](img/B21147_03_21.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![图3.21：st.multiselect小部件](img/B21147_03_21.jpg)'
- en: 'Figure 3.21: The st.multiselect widget'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.21：st.multiselect小部件
- en: Multiselect is a very elegant way to make multiple selections, keeping the screen
    clean and functional.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: Multiselect是一种非常优雅的多选方式，保持界面简洁且功能完善。
- en: Inputting text and numbers
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 输入文本和数字
- en: Another extremely useful function in our web application is *inputting*, which
    is the process of entering some information. In this case, we have many widgets
    available out of the box.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的网页应用程序中的另一个极其有用的功能是*输入*，即输入一些信息的过程。在这种情况下，我们有许多开箱即用的小部件可供使用。
- en: In the `text_input` widget, we only have to specify a label or caption and a
    placeholder – very easy!
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在`text_input`小部件中，我们只需指定一个标签或标题和一个占位符，非常简单！
- en: '[PRE19]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Everything we write will be saved in the `name` variable and printed on the
    screen thanks to `st.text()`:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们写的所有内容将保存在`name`变量中，并通过`st.text()`打印到屏幕上：
- en: '![Figure 3.22: The st.text_input widget](img/B21147_03_22.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![图3.22：st.text_input小部件](img/B21147_03_22.jpg)'
- en: 'Figure 3.22: The st.text_input widget'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.22：st.text_input小部件
- en: 'In the same easy way, we can also input numbers. This time, it’s possible to
    write a number directly or use the `st.number_input`:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 以同样简单的方式，我们也可以输入数字。这次，可以直接写入数字或使用 `st.number_input`：
- en: '[PRE20]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Here’s the output:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出结果：
- en: '![Figure 3.23: The st.number_input widget](img/B21147_03_23.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.23：st.number_input 小部件](img/B21147_03_23.jpg)'
- en: 'Figure 3.23: The st.number_input widget'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.23：st.number_input 小部件
- en: 'Moving back to text, to input text on more than one line, we can use the `text_area`
    widget, like so:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 回到文本输入，如果需要输入多行文本，我们可以使用 `text_area` 小部件，像这样：
- en: '[PRE21]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'As we can see, this time, a wider text area will be displayed:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，这次将显示一个更宽的文本区域：
- en: '![Figure 3.24: The st.text_area widget](img/B21147_03_24.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.24：st.text_area 小部件](img/B21147_03_24.jpg)'
- en: 'Figure 3.24: The st.text_area widget'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.24：st.text_area 小部件
- en: '`text_area` is the perfect tool when we need to input long text, and it can
    be configured according to our needs.'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_area` 是当我们需要输入长文本时的完美工具，它可以根据我们的需求进行配置。'
- en: Slider
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 滑块
- en: 'Another wonderful input widget is the slider, where we just need to specify
    a starting and an ending value to have a nice selector on the screen. The syntax
    is extremely easy:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个非常棒的输入小部件是滑块（slider），我们只需要指定起始值和结束值，就能在屏幕上得到一个很好的选择器。语法非常简单：
- en: '[PRE22]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Here’s the output:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出结果：
- en: '![Figure 3.25: The st.slider widget](img/B21147_03_25.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.25：st.slider 小部件](img/B21147_03_25.jpg)'
- en: 'Figure 3.25: The st.slider widget'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.25：st.slider 小部件
- en: The slider is quite nice to see and very effective in pursuing its task.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 滑块非常好看，并且在完成任务方面非常有效。
- en: Balloons
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 气球
- en: 'A very nice widget is `balloons`. Think of a situation where you want to show
    happiness after something good hashappened. In this case, you can use it by clicking
    on a button, as shown in the following code:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 一个非常好用的小部件是 `balloons`。想象一下你希望在某个好事情发生后表达喜悦的情景。在这种情况下，你可以通过点击按钮来使用它，如下面的代码所示：
- en: '[PRE23]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: See what happens after clicking the button!
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 看看点击按钮后会发生什么！
- en: DataFrames, plots, and visualizations
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DataFrame、图表和可视化
- en: Now, it’s time to deal with DataFrames, so let’s comment on something and continue
    exploring widgets.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候处理 DataFrame 了，让我们来注释一些内容，并继续探索小部件。
- en: DataFrame is the name that the pandas library gives to its data. When a file,
    such as a CSV file, is imported into pandas, the result will be a DataFrame. We
    can think of a DataFrame as an Excel or Google Sheets table – that is, a piece
    of data made up of columns and rows. Columns are the features or variables and
    rows are the records or cases. So, to keep things simple, we can say that a DataFrame
    is a data structure made up of columns and rows.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: DataFrame 是 pandas 库给其数据命名的名称。当一个文件（如 CSV 文件）被导入 pandas 时，结果将是一个 DataFrame。我们可以把
    DataFrame 想象成 Excel 或 Google Sheets 表格——即由列和行组成的数据。列是特征或变量，行是记录或案例。因此，为了简化，我们可以说
    DataFrame 是由列和行组成的数据结构。
- en: 'First, we need to install pandas, with the following command:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要安装 pandas，使用以下命令：
- en: '[PRE24]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'If you followed our suggestion and are using `pipenv` for virtual environments,
    run the following command:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你按照我们的建议，使用 `pipenv` 进行虚拟环境管理，可以运行以下命令：
- en: '[PRE25]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'If you are using a plain, standard Python installation, then write the following
    code:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是标准的 Python 安装，那么请写下以下代码：
- en: '[PRE26]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: First of all, please consider that all the files used in this book are available
    in its GitHub repository, including the `auto.csv` file. Now, let’s comment on
    the code.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，请注意，本书中使用的所有文件都可以在其 GitHub 仓库中找到，包括 `auto.csv` 文件。现在，让我们来注释一下代码。
- en: First, we import pandas, a powerful library for data/datasets management, with
    the `pd` alias. After that, we load the `auto.csv` file into a variable named
    `df` (which stands for DataFrame), and then we visualize the first 10 rows of
    the DataFrame (its head) with the `dataframe` widget.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们导入 pandas，这是一种强大的数据/数据集管理库，使用 `pd` 别名。之后，我们将 `auto.csv` 文件加载到一个名为 `df`（即
    DataFrame）的变量中，然后我们通过 `dataframe` 小部件可视化 DataFrame 的前 10 行（即它的头部）。
- en: 'The result is shown in the following figure:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如图所示：
- en: '![Figure 3.26: The st.dataframe widget](img/B21147_03_26.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.26：st.dataframe 小部件](img/B21147_03_26.jpg)'
- en: 'Figure 3.26: The st.dataframe widget'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.26：st.dataframe 小部件
- en: As we can see, thanks to `st.dataframe`, we can visualize the CSV file in a
    very nice format, with all the columns and rows similar to a Microsoft Excel sheet.
    If we go to the bottom or the right part of it, we can scroll left/right and up/down.
    Moreover, we have the opportunity to maximize the DataFrame!
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，得益于 `st.dataframe`，我们可以以非常美观的格式查看 CSV 文件，所有列和行都类似于 Microsoft Excel 表格。如果我们滚动到最底部或右侧部分，我们可以左右滚动，向上/向下滚动。此外，我们还可以最大化
    DataFrame！
- en: If we prefer, we can visualize the DataFrame in the *table* format since, out
    of the box, we also have a nice `table` widget. Unfortunately, in this case, it’s
    not possible to scroll our data.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们更喜欢的话，也可以以 *表格* 格式查看 DataFrame，因为我们还提供了一个非常不错的 `table` 小部件。不过，不幸的是，在这种情况下，我们无法滚动数据。
- en: 'So, let’s say we write the following:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，假设我们编写以下代码：
- en: '[PRE27]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Then, we’ll get the following table:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将得到如下表格：
- en: '![Figure 3.27: The st.table widget](img/B21147_03_27.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![图3.27：st.table 小部件](img/B21147_03_27.jpg)'
- en: 'Figure 3.27: The st.table widget'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.27：st.table 小部件
- en: Out of the box, Streamlit can also manage plottings – for example, we can show
    area, bar, and line charts. All we need is a DataFrame.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: Streamlit 开箱即用地也可以管理绘图——例如，我们可以显示面积图、条形图和折线图。我们需要做的就是拥有一个 DataFrame。
- en: Streamlit, together with the plottings, automatically displays the list (in
    different colors) of all the visualized variables (please note we are using just
    “mpg” and “cylinders”).
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: Streamlit 会与图表一起，自动显示所有可视化变量的列表（以不同的颜色显示）（请注意，我们只使用了“mpg”和“cylinders”）。
- en: Here, we can use the DataFrames we loaded in the previous example.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以使用我们在前一个示例中加载的数据框。
- en: 'So, let’s write the following:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，让我们编写以下代码：
- en: '[PRE28]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'We’ll get the following area chart:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将得到如下的面积图：
- en: '![Figure 3.28: The st.area_chart widget](img/B21147_03_28.jpg)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![图3.28：st.area_chart 小部件](img/B21147_03_28.jpg)'
- en: 'Figure 3.28: The st.area_chart widget'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.28：st.area_chart 小部件
- en: 'Let’s write the following:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编写以下代码：
- en: '[PRE29]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Then, we’ll get the following bar chart:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将得到如下的条形图：
- en: '![Figure 3.29: The st.bar_chart widget](img/B21147_03_29.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![图3.29：st.bar_chart 小部件](img/B21147_03_29.jpg)'
- en: 'Figure 3.29: The st.bar_chart widget'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.29：st.bar_chart 小部件
- en: 'Let’s write the following:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编写以下代码：
- en: '[PRE30]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Then, we’ll get the following line chart:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将得到如下的折线图：
- en: '![Figure 3.30: The st.line_chart widget](img/B21147_03_30.jpg)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![图3.30：st.line_chart 小部件](img/B21147_03_30.jpg)'
- en: 'Figure 3.30: The st.line_chart widget'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.30：st.line_chart 小部件
- en: 'If we enter the charts, we can zoom in and out. By clicking on the three dots
    at the top right of each plotting, we can save the charts as PNG files, view the
    source, and perform some other operations:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 如果进入图表部分，我们可以进行放大和缩小。点击每个图表右上角的三个点，我们可以将图表保存为 PNG 文件，查看源代码，进行其他操作：
- en: '![Figure 3.31: Out-of-the-box plotting functions](img/B21147_03_31.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![图3.31：开箱即用的绘图功能](img/B21147_03_31.jpg)'
- en: 'Figure 3.31: Out-of-the-box plotting functions'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.31：开箱即用的绘图功能
- en: 'Finally, as we saw with DataFrames, we can maximize all the charts to see them
    fullscreen:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，正如我们在 DataFrame 中看到的那样，我们可以最大化所有图表，查看它们的全屏效果：
- en: "![Figure 3.32: \uFEFFFullscreen plotting](img/B21147_03_32.jpg)"
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![图3.32：全屏绘图](img/B21147_03_32.jpg)'
- en: 'Figure 3.32: Fullscreen plotting'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.32：全屏绘图
- en: 'With Streamlit, we can plot much more beautiful graphs using the `matplotlib`
    and `seaborn` Python packages. So, first of all, let’s install these packages:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Streamlit，我们可以通过 `matplotlib` 和 `seaborn` Python 包绘制更加美观的图表。因此，首先，我们需要安装这些包：
- en: '[PRE31]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'If we are in a pure Python environment, we can run the following code:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在一个纯 Python 环境中，我们可以运行以下代码：
- en: '[PRE32]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'At this point, we can import these packages, like so:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们可以像这样导入这些包：
- en: '[PRE33]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Now, we are ready to start plotting. Here, we’re plotting a heatmap of the
    correlation matrix of our DataFrame:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经准备好开始绘制图表。在这里，我们正在绘制数据框的相关矩阵的热图：
- en: '[PRE34]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The first instruction creates an empty figure. The second line, leveraging
    `seaborn`, creates a heatmap plotting (with annotations) of the correlation matrix
    coming from the variables in the `df` DataFrame. Finally, the third command plots
    our figure using `matplotlib.pyplot`, which is directly managed by Streamlit.
    Here is the result:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行指令创建了一个空的图形。第二行利用 `seaborn` 创建了一个热图（带注释），用于绘制来自 `df` 数据框的相关矩阵。最后，第三条命令使用
    `matplotlib.pyplot` 绘制图形，Streamlit 会直接管理它。以下是结果：
- en: '![Figure 3.33: Heatmap plotting with Seaborn](img/B21147_03_33.jpg)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![图3.33：使用 Seaborn 绘制热图](img/B21147_03_33.jpg)'
- en: 'Figure 3.33: Heatmap plotting with Seaborn'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.33：使用 Seaborn 绘制热图
- en: Please note that we have displayed the correlation plot with labels and the
    heatmap with colors and annotations.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们已经显示了带标签的相关性图和带颜色和注释的热图。
- en: Date, time, and more
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 日期、时间等等
- en: Another very useful element that we can manage out of the box in Streamlit is
    date and time – that is, dates, hours, and so on.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个我们可以在 Streamlit 中轻松管理的非常有用的元素是日期和时间——即日期、小时等。
- en: 'For example, to print today’s date on the screen, we just have to write the
    following:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要在屏幕上打印今天的日期，我们只需要写出以下内容：
- en: '[PRE35]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Here, the first line simply imports the `datetime` package while the second,
    using Streamlit’s `date_input`, asks the user to select a date. This date will
    be saved in the `today` variable:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，第一行简单地导入了 `datetime` 包，而第二行通过 Streamlit 的 `date_input` 提示用户选择一个日期。此日期将保存在
    `today` 变量中：
- en: '![Figure 3.34: The st.date_input widget](img/B21147_03_34.jpg)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.34：st.date_input 小部件](img/B21147_03_34.jpg)'
- en: 'Figure 3.34: The st.date_input widget'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.34：st.date_input 小部件
- en: 'Continuing with date and time, we can do the same with time, as follows:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 继续处理日期和时间，我们也可以以类似的方式处理时间，如下所示：
- en: '[PRE36]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'This time, we are importing `time` and using `time_input`, where we specify
    that the time is 12:30\. On the screen, we can select any time we want:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 这一次，我们导入了 `time` 模块并使用 `time_input`，其中我们指定时间为 12:30。在屏幕上，我们可以选择任何想要的时间：
- en: '![Figure 3.35: The st.time_input widget](img/B21147_03_35.jpg)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.35：st.time_input 小部件](img/B21147_03_35.jpg)'
- en: 'Figure 3.35: The st.time_input widget'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.35：st.time_input 小部件
- en: Streamlit is powerful and easy to use, and we can even manage text in JSON or
    programming language formats such as Julia or Python.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: Streamlit 功能强大且易于使用，我们甚至可以管理 JSON 格式或编程语言格式（如 Julia 或 Python）的文本。
- en: 'Let’s type the following:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们输入以下内容：
- en: '[PRE37]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Here, we’ve created a variable called `data` that contains two key-value pairs
    that are displayed on the screen in JSON format using the `st.json` widget – easy
    and clean:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们创建了一个名为 `data` 的变量，包含两个键值对，通过 `st.json` 小部件以 JSON 格式显示在屏幕上——简单清晰：
- en: '![Figure 3.36: The st.json widget](img/B21147_03_36.jpg)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.36：st.json 小部件](img/B21147_03_36.jpg)'
- en: 'Figure 3.36: The st.json widget'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.36：st.json 小部件
- en: If we click on the arrow, we can close/minimize the JSON.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们点击箭头，就可以关闭/最小化 JSON。
- en: 'Displaying code is also very easy – we simply use `st.code` while specifying
    the programming language as an argument (for Python, this is not necessary since
    it is the default). Here’s an example:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 显示代码也非常简单——我们只需使用 `st.code` 并指定编程语言作为参数（对于 Python，这不是必要的，因为它是默认值）。以下是一个例子：
- en: '[PRE38]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'We’ll see the following output:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到以下输出：
- en: '![Figure 3.37: The st.code widget for Python](img/B21147_03_37.jpg)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.37：Python 的 st.code 小部件](img/B21147_03_37.jpg)'
- en: 'Figure 3.37: The st.code widget for Python'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.37：Python 的 st.code 小部件
- en: 'In the case of Julia, we must specify the programming language, so we can write
    the following:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Julia 的情况下，我们必须指定编程语言，因此可以写出以下内容：
- en: '[PRE39]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'This is the result:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 这是结果：
- en: '![Figure 3.38: The st.code widget for Julia](img/B21147_03_38.jpg)'
  id: totrans-244
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.38：Julia 的 st.code 小部件](img/B21147_03_38.jpg)'
- en: 'Figure 3.38: The st.code widget for Julia'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.38：Julia 的 st.code 小部件
- en: We can use also progress bars and spinners as standard widgets. Let’s see how
    they work.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以将进度条和旋转器作为标准小部件使用。让我们看看它们是如何工作的。
- en: 'For example, to create a progress bar that goes from 0 to 100, increasing its
    value by 1 every 0.1 seconds, we can write the following:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要创建一个从 0 到 100 的进度条，每 0.1 秒增加 1，我们可以写出以下内容：
- en: '[PRE40]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The result is very nice. For a faster bar, we can use `time.sleep(0.01)`, while
    for a slower bar, we can use `time.sleep(1)`. This is the result:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 结果非常好。对于更快的进度条，我们可以使用 `time.sleep(0.01)`，而对于更慢的进度条，我们可以使用 `time.sleep(1)`。以下是结果：
- en: '![Figure 3.39: The st.progress widget](img/B21147_03_39.jpg)'
  id: totrans-250
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.39：st.progress 小部件](img/B21147_03_39.jpg)'
- en: 'Figure 3.39: The st.progress widget'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.39：st.progress 小部件
- en: 'The spinner works more or less in the same way as the progress bar, so we can
    write the following:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 旋转器的工作方式与进度条差不多，因此我们可以写出以下内容：
- en: '[PRE41]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Very easily, we can set a starting message of *wait for 10 seconds*, like so:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 非常简单，我们可以设置一个初始消息 *等待 10 秒钟*，如下所示：
- en: '![Figure 3.40: The st.spinner widget during the waiting time](img/B21147_03_40.jpg)'
  id: totrans-255
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.40：st.spinner 小部件在等待时间中的状态](img/B21147_03_40.jpg)'
- en: 'Figure 3.40: The st.spinner widget during the waiting time'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.40：st.spinner 小部件在等待时间中的状态
- en: 'Finally, we can print *Done!* in green (success), like so:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以打印 *完成!*（绿色表示成功），如下所示：
- en: '![Figure 3.41: The st.spinner widget after completion](img/B21147_03_41.jpg)'
  id: totrans-258
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.41：st.spinner 小部件完成后的状态](img/B21147_03_41.jpg)'
- en: 'Figure 3.41: The st.spinner widget after completion'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.41：st.spinner 小部件完成后的状态
- en: Very nice!
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 非常好！
- en: Now that we’ve covered progress bars and spinners, we can close this quick introduction
    to Streamlit’s main functions and widgets, which acted as a crash course for full
    immersion.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经介绍了进度条和加载动画，可以结束这个对 Streamlit 主要功能和小部件的简短介绍，它充当了一个全身心投入的速成课程。
- en: Summary
  id: totrans-262
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we explored Streamlit’s main out-of-the-box features and widgets.
    We started by creating an empty Python file and launching Streamlit, where we
    saw how to manage its web interface using the “rerun” feature and leverage its
    real-time updating functionality.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了 Streamlit 的主要开箱即用功能和小部件。我们从创建一个空的 Python 文件和启动 Streamlit 开始，展示了如何使用“重新运行”功能管理其
    Web 界面，并利用其实时更新功能。
- en: Then, we learned how to deal with text in various ways, in terms of size, colors,
    and format. We also explored multimedia widgets, such as images, audio, and video.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 接着，我们学习了如何以不同方式处理文本，涉及文本的大小、颜色和格式。我们还探索了多媒体小部件，如图像、音频和视频。
- en: A lot of elements, such as buttons, checkboxes, radio buttons, and others, were
    also explained and utilized.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 许多元素，如按钮、复选框、单选按钮等，也得到了说明和应用。
- en: Many different kinds of inputs are supported natively – it’s very easy to input
    text, numbers, dates, time, and so on. Widgets such as text areas or sliders are
    also ready to be used out of the box.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 本地原生支持许多不同种类的输入——输入文本、数字、日期、时间等非常简单。像文本区域或滑块这样的控件也可以直接使用。
- en: As we saw, data plots are extremely easy to create – we can use DataFrames and
    plot bar, line, or area charts with one line of code. Even heatmaps are a clean
    and neat option.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，数据图表的创建非常简单——我们可以使用数据框架（DataFrames）并用一行代码绘制条形图、折线图或面积图。即使是热力图也是一个清晰且整洁的选择。
- en: Even formatting text in a programming language style, such as Python or Julia,
    is just a matter of a couple of lines of code.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 即使是以编程语言风格格式化文本，如 Python 或 Julia，也只需要几行代码。
- en: Finally, we saw that if we need to wait for some calculation or activity in
    charge of our application, we can use progress bars or spinners to create a nice
    “wait please...” effect on the screen.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们看到，如果我们需要等待一些计算或活动来处理我们的应用程序，我们可以使用进度条或加载动画在屏幕上创建一个“请稍等...”的效果。
- en: All these components are the basic elements that make up the toolbox that we
    are going to use, starting from the next chapter, to build up our real web applications.
    By doing so, we’ll extend our knowledge of Streamlit’s more advanced features!
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些组件都是我们将要使用的工具箱的基本元素，从下一章开始，我们将用它们来构建我们的实际 Web 应用程序。通过这样做，我们将扩展对 Streamlit
    更高级功能的了解！
- en: 'Part 2: Building a Basic Web App for Essential Streamlit Skills'
  id: totrans-271
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2部分：构建一个基本的 Web 应用程序以掌握 Streamlit 的基本技能
- en: Part 2 delves into the hands-on aspect of Streamlit, focusing on building a
    basic yet robust web application. It starts with the essentials of configuring
    the Streamlit environment and managing packages, laying a practical foundation
    for app development. The section progresses to demonstrate how to effectively
    organize and display content, incorporating advanced elements such as columns,
    expanders, and **natural language processing** (**NLP**) techniques. You will
    then explore the implementation of NLP for text analysis and processing, applying
    these skills to enhance your web application. The part concludes with a comprehensive
    guide on sharing and deploying these applications on the cloud using Streamlit
    Share, equipping you with the skills to make your apps accessible to a wider audience.
    This part is designed to boost your confidence in your Streamlit skills, preparing
    you for more complex app development in the subsequent parts.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 第2部分深入探索了 Streamlit 的实践部分，重点是构建一个基本但强大的 Web 应用程序。它从配置 Streamlit 环境和管理软件包的基本知识开始，为应用程序开发奠定了实际基础。接着，本节展示了如何有效地组织和显示内容，结合了诸如列、折叠框和**自然语言处理**（**NLP**）技术等高级元素。随后，你将探讨如何实现
    NLP 进行文本分析和处理，将这些技能应用于增强你的 Web 应用程序。本部分最后提供了一个全面的指南，介绍了如何使用 Streamlit Share 分享和部署这些应用程序到云端，帮助你将应用程序提供给更广泛的受众。本部分旨在增强你对
    Streamlit 技能的信心，为后续更复杂的应用开发做好准备。
- en: 'This part has the following chapters:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分包括以下章节：
- en: '[*Chapter 4*](B21147_04.xhtml#_idTextAnchor045), *Streamlit Essentials – Configuring
    the Environment, Managing Packages, and More*'
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第4章*](B21147_04.xhtml#_idTextAnchor045)，*Streamlit 基础 – 配置环境、管理软件包等*'
- en: '[*Chapter 5*](B21147_05.xhtml#_idTextAnchor053), *Organizing and Displaying
    Content with Columns, Expanders, and NLP Techniques*'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第5章*](B21147_05.xhtml#_idTextAnchor053)，*使用列、折叠框和 NLP 技术组织和显示内容*'
- en: '[*Chapter 6*](B21147_06.xhtml#_idTextAnchor068), *Implementing NLP Techniques
    for Text Analysis and Processing in Streamlit*'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第6章*](B21147_06.xhtml#_idTextAnchor068)，*在Streamlit中实现自然语言处理技术用于文本分析和处理*'
- en: '[*Chapter 7*](B21147_07.xhtml#_idTextAnchor080), *Sharing and Deploying Your
    Apps on the Cloud Using Streamlit Share*'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第7章*](B21147_07.xhtml#_idTextAnchor080)，*使用Streamlit Share共享和部署您的应用程序到云端*'
