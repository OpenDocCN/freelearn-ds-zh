- en: Getting Started
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门
- en: Since there's going to be code associated with this book and sample data that
    you need to get as well, let me first show you where to get that and then we'll
    be good to go. We need to get some setup out of the way first. First things first,
    let's get the code and the data that you need for this book so you can play along
    and actually have some code to mess around with. The easiest way to do that is
    by going right to this - *Getting Started*.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这本书将涉及与代码相关的内容和您需要获取的示例数据，让我先向您展示在哪里获取这些内容，然后我们就可以开始了。我们首先需要做一些设置。首先，让我们获取本书所需的代码和数据，这样您就可以跟着操作，并且有一些代码可以进行实际操作。最简单的方法是直接转到
    *入门*。
- en: 'In this chapter, we will first install and get ready in a working Python environment:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将首先安装并准备好一个可用的 Python 环境：
- en: Installing Enthought Canopy
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Enthought Canopy
- en: Installing Python libraries
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Python 库
- en: How to work with the IPython/Jupyter Notebook
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用 IPython/Jupyter Notebook
- en: How to use, read and run the code files for this book
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用、阅读和运行本书的代码文件
- en: 'Then we''ll dive into a crash course into understanding Python code:'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后我们将进行一个快速课程，了解 Python 代码：
- en: Python basics - part 1
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 基础知识 - 第 1 部分
- en: Understanding Python code
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 Python 代码
- en: Importing modules
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入模块
- en: Experimenting with lists
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试使用列表
- en: Tuples
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 元组
- en: Python basics - part 2
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 基础知识 - 第 2 部分
- en: Running Python scripts
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行 Python 脚本
- en: You'll have everything you need for an amazing journey into data science with
    Python, once we've set up your environment and familiarized you with Python in
    this chapter.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们设置好您的环境并在本章中让您熟悉 Python，您就会拥有一切进行 Python 数据科学的绝妙旅程所需的一切。
- en: Installing Enthought Canopy
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Enthought Canopy
- en: Let's dive right in and get what you need installed to actually develop Python
    code with data science on your desktop. I'm going to walk you through installing
    a package called Enthought Canopy which has both the development environment and
    all the Python packages you need pre-installed. It makes life really easy, but
    if you already know Python you might have an existing Python environment already
    on your PC, and if you want to keep using it, maybe you can.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '让我们立即开始，安装您在桌面上实际开发 Python 数据科学所需的内容。我将带您完成安装一个名为 Enthought Canopy 的软件包，它已经预先安装了开发环境和所有
    Python 软件包。这将使生活变得非常容易，但如果您已经了解 Python，可能已经在您的 PC 上有现有的 Python 环境，如果您想继续使用它，也许您可以。 '
- en: The most important thing is that your Python environment has Python 3.5 or newer,
    that it supports Jupyter Notebooks (because that's what we're going to use in
    this course), and that you have the key packages you need for this book installed
    on your environment. I'll explain exactly how to achieve a full installation in
    a few simple steps - it's going to be very easy.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的是，您的 Python 环境必须具有 Python 3.5 或更新版本，支持 Jupyter Notebook（因为这是我们在本课程中要使用的），并且您的环境中已安装了本书所需的关键软件包。我将详细解释如何通过几个简单的步骤实现完整安装
    - 这将非常容易。
- en: 'Let''s first overview those key packages, most of which Canopy will be installing
    for us automatically for us. Canopy will install Python 3.5 for us, and some further
    packages we need including: `scikit_learn`, `xlrd`, and `statsmodels`. We''ll
    need to manually use the `pip` command, to install a package called `pydot2plus`.
    And that will be it - it''s very easy with Canopy!'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先概述这些关键软件包，其中大部分 Canopy 将自动为我们安装。Canopy 将为我们安装 Python 3.5，以及我们需要的一些其他软件包，包括：`scikit_learn`、`xlrd`
    和 `statsmodels`。我们需要手动使用 `pip` 命令来安装一个名为 `pydot2plus` 的软件包。就是这样 - 使用 Canopy 非常容易！
- en: 'Once the following installation steps are complete, we''ll have everything
    we need to actually get up and running, and so we''ll open up a little sample
    file and do some data science for real. Now let''s get you set up with everything
    you need to get started as quickly as possible:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成以下安装步骤，我们将拥有一切需要的内容来真正开始运行，然后我们将打开一个小样本文件，进行一些真正的数据科学。现在让我们尽快为您设置好一切所需的内容：
- en: 'The first thing you will need is a development environment, called an IDE,
    for Python code. What we''re going to use for this book is Enthought Canopy. It''s
    a scientific computing environment, and it''s going to work well with this book:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您首先需要的是一个称为 IDE 的 Python 代码开发环境。我们将在本书中使用的是 Enthought Canopy。这是一个科学计算环境，将与本书很好地配合使用：
- en: '![](img/d5161280-274a-43b6-897a-2f0c498e8192.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d5161280-274a-43b6-897a-2f0c498e8192.png)'
- en: 'To get Canopy installed, just go to [www.enthought.com](http://www.enthought.com)
    and click on DOWNLOADS: Canopy:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要安装 Canopy，只需转到 [www.enthought.com](http://www.enthought.com)，然后点击下载：Canopy：
- en: '![](img/d0a4a2eb-a490-46ed-8eea-8daf57cc9c88.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d0a4a2eb-a490-46ed-8eea-8daf57cc9c88.png)'
- en: 'Enthought Canopy is free, for the Canopy Express edition - which is what you
    want for this book. You must then select your operating system and architecture.
    For me, that''s Windows 64-bit, but you''ll want to click on corresponding Download
    button for your operating system and with the Python 3.5 option:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Enthought Canopy 是免费的，适用于 Canopy Express 版本 - 这是您在本书中需要的版本。然后您必须选择您的操作系统和架构。对我来说，这是
    Windows 64 位，但您需要点击相应的下载按钮，选择适用于您操作系统的 Python 3.5 选项：
- en: '![](img/4ba2d1bd-66d0-4f65-a5d5-215281aae772.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4ba2d1bd-66d0-4f65-a5d5-215281aae772.png)'
- en: 'We don''t have to give them any personal information at this step. There''s
    a pretty standard Windows installer, so just let that download:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这一步我们不需要提供任何个人信息。这是一个相当标准的 Windows 安装程序，所以只需让它下载：
- en: '![](img/ad212329-f2f5-4fd9-9067-ea4e5e47c0f8.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ad212329-f2f5-4fd9-9067-ea4e5e47c0f8.png)'
- en: After that's downloaded we go ahead and open up the Canopy installer, and run
    it! You might want to read the license before you agree to it, that's up to you,
    and then just wait for the installation to complete.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载完成后，我们继续打开 Canopy 安装程序，并运行它！您可能想在同意之前阅读许可协议，这取决于您，然后只需等待安装完成。
- en: Once you hit the Finish button at the end of the install process, allow it to
    launch Canopy automatically. You'll see that Canopy then sets up the Python environment
    by itself, which is great, but this will take a minute or two.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您在安装过程的最后点击完成按钮，允许它自动启动Canopy。您会看到Canopy自动设置Python环境，这很好，但这将需要一两分钟的时间。
- en: 'Once the installer is done setting up your Python environment, you should get
    a screen that looks like the one below. It says welcome to Canopy and a bunch
    of big friendly buttons:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装程序设置完成您的Python环境后，您应该会看到下面的屏幕。它会显示欢迎来到Canopy和一堆友好的大按钮：
- en: '![](img/8ead44fd-5bf2-46ed-b2e6-615e9e26fb98.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8ead44fd-5bf2-46ed-b2e6-615e9e26fb98.png)'
- en: The beautiful thing is that pretty much everything you need for this book comes
    pre-installed with Enthought Canopy, that's why I recommend using it!
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 美妙的事情是，几乎您在本书中所需的一切都已经预先安装在Enthought Canopy中，这就是为什么我建议使用它！
- en: 'There is just one last thing we need to set up, so go ahead and click the Editor
    button there on the Canopy Welcome screen. You''ll then see the Editor screen
    come up, and if you click down in the window at the bottom, I want you to just
    type in:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们只需要设置最后一件事，所以请点击Canopy欢迎屏幕上的编辑器按钮。然后您会看到编辑器屏幕出现，如果您在底部的窗口中点击，我希望您只是输入：
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here''s how that''s going to look on your screen as you type the above line
    in at the bottom of the Canopy Editor window; don''t forget to press the Return
    button of course:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您在Canopy编辑器窗口底部输入上述行时，屏幕会显示如下；当然不要忘记按回车键：
- en: '![](img/f48fb38b-f3e7-4680-aa80-02591d6569e0.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f48fb38b-f3e7-4680-aa80-02591d6569e0.png)'
- en: One you hit the Return button, this will install that one extra module that
    we need for later on in the book, when we get to talking about decision trees,
    and rendering decision trees.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下回车键后，这将安装我们在本书后面需要的一个额外模块，当我们开始讨论决策树和渲染决策树时。
- en: Once it has finished installing **pydotplus**, it should come back and say it's
    successfully installed and, voila, you have everything you need now to get started!
    The installation is done, at this point - but let's just take a few more steps
    to confirm our installation is running nicely.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦安装完成**pydotplus**，它应该会回来并说它已成功安装，您现在已经拥有了开始的一切！此时安装已经完成-但让我们再走几步来确认我们的安装是否正常运行。
- en: Giving the installation a test run
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对安装进行测试
- en: Let's now give your installation a test run. The first thing to do is actually
    to entirely close the Canopy window! This is because we're not actually going
    to be editing and using our code within this Canopy editor. Instead we're going
    to be using something called an IPython Notebook, which is also now known as the
    Jupyter Notebook.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们对您的安装进行测试。首先要做的事情是完全关闭Canopy窗口！这是因为我们实际上不会在这个Canopy编辑器中编辑和使用我们的代码。相反，我们将使用一个称为IPython笔记本的东西，现在也被称为Jupyter笔记本。
- en: 'Let me show you how that works. If you now open a window in your operating
    system to view the accompanying book files that you downloaded, as described in
    the Preface of this book. It should look something like this, with the set of
    `.ipynb` code files you downloaded for this book:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我向您展示一下它是如何工作的。如果您现在在操作系统中打开一个窗口，查看您下载的附带书籍文件，就像本书的前言中描述的那样。它应该看起来像这样，带有您为本书下载的一组`.ipynb`代码文件：
- en: '![](img/349fff7b-40d9-4e47-887d-33d57016a416.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/349fff7b-40d9-4e47-887d-33d57016a416.png)'
- en: Now go down to the Outliers file in the list, that's the `Outliers.ipynb` file,
    double-click it, and what should happen is it's going to start up Canopy first
    and then it's going to kick off your web browser! This is because IPython/Jupyter
    Notebooks actually live within your web browser. There can be a small pause at
    first, and it can be a little bit confusing first time, but you'll soon get used
    to the idea.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在列表中找到异常值文件，即`Outliers.ipynb`文件，双击它，应该会启动Canopy，然后启动您的网络浏览器！这是因为IPython/Jupyter笔记本实际上存在于您的网络浏览器中。一开始可能会有一小段暂停，第一次可能会有点混乱，但您很快就会习惯的。
- en: 'You should soon see Canopy come up and for me my default web browser Chrome
    comes up. You should see the following Jupyter Notebook page, since we double-clicked
    on the `Outliers.ipynb` file:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 您很快就会看到Canopy出现，对我来说，我的默认网络浏览器Chrome会出现。您应该会看到以下Jupyter笔记本页面，因为我们双击了`Outliers.ipynb`文件：
- en: '![](img/c064b40a-37ef-49a9-acf1-108a8b046eab.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c064b40a-37ef-49a9-acf1-108a8b046eab.png)'
- en: If you see this screen, it means that everything's working great in your installation
    and you're all set for the journey across rest of this book!
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您看到这个屏幕，这意味着您的安装工作得很好，您已经准备好继续阅读本书的其余部分了！
- en: If you occasionally get problems opening your IPNYB files
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如果您偶尔遇到打开IPNYB文件的问题
- en: Just occasionally, I've noticed that things can go a little bit wrong when you
    double-click on a `.ipynb` file. Don't panic! Just sometimes, Canopy can get a
    little bit flaky, and you might see a screen that is looking for some password
    or token, or you might occasionally see a screen that says it can't connect at
    all.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 偶尔，我注意到当您双击`.ipynb`文件时，有时会出现一些小问题。不要惊慌！有时，Canopy可能会有点不稳定，您可能会看到一个寻找密码或令牌的屏幕，或者偶尔会看到一个完全无法连接的屏幕。
- en: Don't panic if either of those things happen to you, they are just random quirks,
    sometimes things just don't start up in the right order or they don't start up
    in time on your PC and it's okay.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您遇到这些情况，不要惊慌，它们只是偶然的怪癖，有时事情就是不按正确的顺序启动，或者它们在您的PC上没有及时启动，没关系。
- en: All you have to do is go back and try to open that file a second time. Sometimes
    it takes two or three tries to actually get it loaded up properly, but if you
    do it a couple of times it should pop up eventually, and a Jupyter Notebook screen
    like the one we saw previously about Dealing with Outliers, is what you should
    see.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 您只需返回并尝试第二次打开该文件。有时需要两三次尝试才能正确加载它，但如果您多试几次，最终它应该会弹出，并且您应该会看到一个Jupyter笔记本屏幕，就像我们之前看到的关于处理异常值的那个。
- en: Using and understanding IPython (Jupyter) Notebooks
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用和理解IPython（Jupyter）笔记本
- en: Congratulations on your installation! Let's now explore using Jupyter Notebooks,
    which is also known as IPython Notebook. These days, the more modern name is the
    Jupyter Notebook, but a lot of people still call it an IPython Notebook, and I
    consider the names interchangeable for working developers as a result. I do also
    find the name IPython Notebooks helps me remember the notebook file name suffix
    which is `.ipynb` as you'll get to know very well in this book!
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜您的安装！现在让我们探索使用Jupyter笔记本，也称为IPython笔记本。如今，更现代的名称是Jupyter笔记本，但很多人仍然称其为IPython笔记本，因此我认为这两个名称对于工作开发人员来说是可以互换的。我也发现IPython笔记本这个名称有助于我记住笔记本文件的后缀名是`.ipynb`，在本书中您将非常熟悉这个后缀名！
- en: Okay so now let's take it right from the top again - with our first exploration
    of the IPython/Jupyter Notebook. If you haven't yet done so, please navigate to
    the `DataScience` folder where we have downloaded all the materials for this book.
    For me, that's `E:DataScience`, and if you didn't do so during the preceding installation
    section, please now double-click and open up the `Outliers.ipynb` file.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在让我们从头开始 - 首先探索IPython/Jupyter笔记本。如果您还没有这样做，请导航到我们为本书下载的“DataScience”文件夹。对我来说，那是“E:DataScience”，如果您在前面的安装部分中没有这样做，请现在双击并打开“Outliers.ipynb”文件。
- en: 'Now what''s going to happen when we double-click on this IPython `.`**`ipynb`**
    file is that first of all it''s going to spark up Canopy, if it''s not sparked
    up already, and then it''s going to launch a web browser. This is how the full
    `Outliers` notebook webpage looks within my browser:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们双击此IPython `.`**`ipynb`**文件时，首先会启动Canopy，然后会启动一个Web浏览器。这是完整的“Outliers”笔记本网页在我的浏览器中的样子：
- en: '![](img/54ec0bbe-fb6c-447a-a671-b7ed06498363.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/54ec0bbe-fb6c-447a-a671-b7ed06498363.png)'
- en: As you can see here, notebooks are structured in such a way that I can intersperse
    my little notes and commentary about what you're seeing here within the actual
    code itself, and you can actually run this code within your web browser! So, it's
    a very handy format for me to give you sort of a little reference that you can
    use later on in life to go and remind yourself how these algorithms work that
    we're going to talk about, and actually experiment with them and play with them
    yourself.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在这里看到的，笔记本的结构使我可以在实际代码中穿插一些关于您在这里看到的内容的小注释和评论，您实际上可以在Web浏览器中运行此代码！因此，对我来说，这是一个非常方便的格式，可以为您提供一些参考，以便以后在生活中去回顾这些我们将要讨论的算法是如何工作的，并且实际上可以自己尝试和玩耍。
- en: The way that the IPython/Jupyter Notebook files work is that they actually run
    from within your browser, like a webpage, but they're backed by the Python engine
    that you installed. So you should be seeing a screen similar to the one shown
    in the previous screenshot.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: IPython/Jupyter笔记本文件的工作方式是它们实际上是在您的浏览器中运行的，就像一个网页，但它们由您安装的Python引擎支持。因此，您应该看到与前一个屏幕截图中显示的类似的屏幕。
- en: 'You''ll notice as you scroll down the notebook in your browser, there are code
    blocks. They''re easy to spot because they contain our actual code. Please find
    the code box for this code in the Outliers notebook, quite near the top:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在浏览器中向下滚动笔记本时，您会注意到有代码块。它们很容易识别，因为它们包含我们的实际代码。请在异常值笔记本中找到此代码的代码框，它就在顶部附近：
- en: '[PRE1]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Let's take a quick look at this code while we're here. We are setting up a little
    income distribution in this code. We're simulating the distribution of income
    in a population of people, and to illustrate the effect that an outlier can have
    on that distribution, we're simulating Donald Trump entering the mix and messing
    up the mean value of the income distribution. By the way, I'm not making a political
    statement, this was all done before Trump became a politician. So you know, full
    disclosure there.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在这里快速看一下这段代码。在这段代码中，我们设置了一些收入分布。我们模拟了人口中的收入分布，并且为了说明异常值对该分布的影响，我们模拟了唐纳德·特朗普加入并扰乱了收入分布的平均值。顺便说一句，我并不是在发表政治言论，这都是在特朗普成为政治人物之前完成的。所以，您知道，完全披露在这里。
- en: 'We can select any code block in the notebook by clicking on it. So if you now
    click in the code block that contains the code we just looked at above, we can
    then hit the run button at the top to run it. Here''s the area at the top of the
    screen where you''ll find the Run button:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过单击来选择笔记本中的任何代码块。因此，如果您现在点击包含我们刚才查看的代码的代码块，然后点击顶部的运行按钮来运行它。这是屏幕顶部的区域，您将在其中找到运行按钮：
- en: '![](img/7cb5299f-028a-431c-b18b-6ec6ff50c3a1.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7cb5299f-028a-431c-b18b-6ec6ff50c3a1.png)'
- en: 'Hitting the Run button with the code block selected, will cause this graph
    to be regenerated:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 选择代码块并点击运行按钮，将导致重新生成此图：
- en: '![](img/c9e0d998-0a11-45d4-8f94-c531692c8a57.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c9e0d998-0a11-45d4-8f94-c531692c8a57.png)'
- en: 'Similarly, we can click on the next code block a little further down, you''ll
    spot the one which has the following single line of code :'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们可以点击稍微向下的下一个代码块，您会看到其中有以下一行代码：
- en: '[PRE2]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If you select the code block containing this line, and hit the Run button to
    run the code, you''ll see the output below it, which ends up being a very large
    value because of the effect of that outlier, something like this:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您选择包含此行的代码块，并点击运行按钮运行代码，您将在其下看到输出，由于异常值的影响，输出将是一个非常大的值，类似于这样：
- en: '[PRE3]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Let''s keep going and have some fun. In the next code block down, you''ll see
    the following code, which tries to detect outliers like Donald Trump and remove
    them from the dataset:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续并且玩得开心。在下面的下一个代码块中，您将看到以下代码，它尝试检测像唐纳德·特朗普这样的异常值，并将它们从数据集中删除：
- en: '[PRE4]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'So select the corresponding code block in the notebook, and press the run button
    again. When you do that, you''ll see this graph instead:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，请在笔记本中选择相应的代码块，然后再次按运行按钮。当您这样做时，您将看到这张图：
- en: '![](img/04eac0d4-af92-4eea-9ef1-d363ce8b557c.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/04eac0d4-af92-4eea-9ef1-d363ce8b557c.png)'
- en: Now we see a much better histogram that represents the more typical American
    - now that we've taken out our outlier that was messing things up.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们看到了一个更好的直方图，代表了更典型的美国人-现在我们已经去掉了混乱的异常值。
- en: So, at this point, you have everything you need to get started in this course.
    We have all the data you need, all the scripts, and the development environment
    for Python and Python notebooks. So, let's rock and roll. Up next we're going
    to do a little crash course on Python itself, and even if you're familiar with
    Python, it might be a good little refresher so you might want to watch it regardless.
    Let's dive in and learn Python.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，此时，您已经具备了开始本课程所需的一切。我们拥有您需要的所有数据，所有脚本，以及Python和Python笔记本的开发环境。所以，让我们开始吧。接下来，我们将进行一些关于Python本身的速成课程，即使您熟悉Python，这也可能是一个不错的温习，所以您可能还是想观看一下。让我们深入学习Python。
- en: Python basics - Part 1
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python基础-第1部分
- en: If you already know Python, you can probably skip the next two sections. However,
    if you need a refresher, or if you haven't done Python before, you'll want to
    go through these. There are a few quirky things about the Python scripting language
    that you need to know, so let's dive in and just jump into the pool and learn
    some Python by writing some actual code.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经了解Python，您可能可以跳过接下来的两个部分。但是，如果您需要温习，或者以前没有接触过Python，您可能需要浏览一下。关于Python脚本语言有一些古怪的地方，您需要知道，所以让我们深入学习一下，通过编写一些实际代码来学习一些Python。
- en: Like I said before, in the requirements for this book, you should have some
    sort of programming background to be successful in this book. You've coded in
    some sort of language, even if it's a scripting language, JavaScript, I don't
    care whether it is C++, Java, or something, but if you're new to Python, I'm going
    to give you a little bit of a crash course here. I'm just going to dive right
    in and go right into some examples in this section.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我之前说的，在本书的要求中，您应该具备某种编程背景才能成功。您已经在某种语言中编写过代码，即使是脚本语言，JavaScript，我不在乎它是C++，Java，还是其他什么，但如果您是Python的新手，我将在这里给您一个速成课程。我将直接开始并在本节中给出一些示例。
- en: 'There are a few quirks about Python that are a little bit different than other
    languages you might have seen; so I just want to walk through what''s different
    about Python from other scripting languages you may have worked with, and the
    best way to do that is by looking at some real examples. Let''s dive right in
    and look at some Python code:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Python有一些与您可能见过的其他语言有些不同的地方；所以我只是想通过查看一些真实的例子来介绍Python与其他脚本语言的不同之处。让我们直接开始，看一些Python代码：
- en: '![](img/33f8faaa-c401-4dd9-8991-623eb6dd90a1.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/33f8faaa-c401-4dd9-8991-623eb6dd90a1.png)'
- en: 'If you open up the `DataScience` folder for this class, which you downloaded
    earlier in the earlier section, you should find a `Python101.ipynb` file; go ahead
    and double-click on that. It should open right up in Canopy if you have everything
    installed properly, and it should look a little bit something like the following
    screenshot:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您打开了在之前部分中下载的`DataScience`文件夹，您应该会找到一个`Python101.ipynb`文件；请双击打开。如果您已经正确安装了所有内容，它应该会在Canopy中立即打开，并且应该看起来有点像以下的截图：
- en: '![](img/3c60bf3f-34c4-4a76-94c7-70d93ac77e80.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c60bf3f-34c4-4a76-94c7-70d93ac77e80.png)'
- en: New versions of Canopy will open the code in your web browser, not the Canopy
    editor! This is okay!
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本的Canopy将在您的网络浏览器中打开代码，而不是Canopy编辑器！这没问题！
- en: One cool thing about Python is that there are several ways to run code with
    Python. You can run it as a script, like you would with a normal programming language.
    You can also write in this thing called the *IPython Notebook*, which is what
    we're using here. So it's this format where you actually have a web browser-like
    view where you can actually write little notations and notes to yourself in HTML
    markup stuff, and you can also embed actual code that really runs using the Python
    interpreter.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Python的一个很酷的地方是，有几种运行Python代码的方式。您可以将其作为脚本运行，就像您使用普通编程语言一样。您还可以在这个叫做*IPython
    Notebook*的东西中编写代码，这就是我们在这里使用的东西。因此，这是一种格式，您实际上可以在其中以类似网络浏览器的视图中编写一些小注释和HTML标记的笔记，还可以嵌入实际使用Python解释器运行的代码。
- en: Understanding Python code
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Python代码
- en: 'The first example that I want to give you of some Python code is right here.
    The following block of code represents some real Python code that we can actually
    run right within this view of the entire notebook page, but let''s zoom in now
    and look at that code:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我想给您展示一些Python代码的第一个例子就在这里。以下代码块代表了一些真正的Python代码，我们实际上可以在整个笔记本页面的视图中运行，但现在让我们放大一下，看看那段代码：
- en: '![](img/371ae236-e1f6-44c8-ae10-425e7a181347.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/371ae236-e1f6-44c8-ae10-425e7a181347.png)'
- en: 'Let''s take a look at what''s going on. We have a list of numbers and a list
    in Python, kind of like an array in other languages. It is designated by these
    square brackets:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看发生了什么。我们有一个数字列表和Python中的一个列表，类似于其他语言中的数组。它由这些方括号指定：
- en: '![](img/7a91681f-4158-42d7-aa12-e55a109c33ef.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7a91681f-4158-42d7-aa12-e55a109c33ef.png)'
- en: We have this data structure of a list that contains the numbers 1 through 6,
    and then to iterate through every number in that list, we'll say `for number in
    listOfNumbers:`, that's the Python syntax for iterating through a list of stuff
    and a colon.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个包含1到6的数字列表的数据结构，然后要遍历该列表中的每个数字，我们将说`for number in listOfNumbers:`，这是Python遍历一系列东西的语法，后面跟着一个冒号。
- en: Tabs and whitespaces have real meaning in Python, so you can't just format things
    the way you want to. You have to pay attention to them.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，制表符和空格是有实际意义的，所以您不能随意格式化。您必须注意它们。
- en: 'The point that I want to make is that in other languages, it''s pretty typical
    to have a bracket or a brace of some sort there to denote that I''m inside a `for`
    loop, an `if` block, or some sort of block of code, but in Python, that''s all
    designated with whitespaces. Tab is actually important in telling Python what''s
    in which block of code:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我想要表达的观点是，在其他语言中，通常会有括号或大括号来表示我在`for`循环、`if`块或某种代码块中，但在Python中，这一切都是由空格来指定的。制表符实际上在告诉Python哪些代码块中有什么：
- en: '[PRE5]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You''ll notice that within this `for` block, we have a tab of one within that
    entire block, and for every `number in listOfNumbers` we will execute all of this
    code that''s tabbed in by one *Tab* stop. We''ll print the number, and the comma
    just means that we''re not going to do a new line afterwards. We''ll print something
    else right after it, and `if (number % 2 = 0)`, we''ll say it''s `even`. Otherwise,
    we''ll say it''s `odd`, and when we''re done, we''ll print out `All done`:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到，在这个`for`块中，我们有一个制表符，对于`listOfNumbers`中的每个`number`，我们将执行所有这些代码，这些代码都是通过一个*Tab*进行缩进的。我们将打印出这个数字，逗号只是表示我们不会在后面换行。我们将在后面打印其他东西，如果`(number
    % 2 = 0)`，我们将说它是`even`。否则，我们将说它是`odd`，当我们完成时，我们将打印出`All done`：
- en: '![](img/4a5c7f9d-ec04-4e4d-86c7-7ba7af10a405.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4a5c7f9d-ec04-4e4d-86c7-7ba7af10a405.png)'
- en: 'You can see the output right below the code. I ran the output before as I had
    actually saved it within my notebook, but if you want to actually run it yourself,
    you can just click within that block and click on the Play button, and we''ll
    actually execute it and do it again. Just to convince yourself that it''s really
    doing something, let''s change the `print` statement to say something else, say,
    `Hooray! We''re all done. Let''s party!` If I run this now, you can see, sure
    enough, my message there has changed:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在代码下方看到输出。我之前已经运行了输出，因为我已经将它保存在我的笔记本中，但如果你想自己运行它，你只需点击该块并点击播放按钮，我们将实际执行它并再次运行。为了让自己确信它确实做了一些事情，让我们把`print`语句改成其他的，比如说，`Hooray!
    We're all done. Let's party!`如果我现在运行这个，你会看到，我的消息确实改变了：
- en: '![](img/85642f84-c3f7-4e70-ba65-44c7b4871c40.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/85642f84-c3f7-4e70-ba65-44c7b4871c40.png)'
- en: So again, the point I want to make is that whitespace is important. You will
    designate blocks of code that run together, you know, such as a `for` loop or
    `if then` statements, using indentation or tabs, so remember that. Also, pay attention
    to your colons too. You'll notice that a lot of these clauses begin with a colon.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我想要表达的观点是空格很重要。你会使用缩进或制表符来指定一起运行的代码块，比如`for`循环或`if then`语句，所以记住这一点。还要注意冒号。你会注意到很多从句都是以冒号开始的。
- en: Importing modules
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导入模块
- en: Python itself, like any language, is fairly limited in what it can do. The real
    power of using Python for machine learning and data mining and data science is
    the power of all the external libraries that are available for it for that purpose.
    One of those libraries is called `NumPy`, or numeric Python, and, for example,
    here we can `import` the `Numpy` package, which is included with Canopy as `np`.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Python本身，就像任何语言一样，其功能是相当有限的。使用Python进行机器学习、数据挖掘和数据科学的真正力量在于为此目的提供的所有外部库的强大功能。其中一个库叫做`NumPy`，或者叫做数值Python，例如，我们可以`import`
    `Numpy`包，它包含在Canopy中，名称为`np`。
- en: 'This means that I''ll refer to the `NumPy` package as `np`, and I could call
    that anything I want. I could call it `Fred` or `Tim`, but it''s best to stick
    with something that actually makes sense; now that I''m calling that `NumPy` package
    `np`, I can refer to it using `np`:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我将把`NumPy`包称为`np`，我可以随意更改它的名称。我可以称它为`Fred`或`Tim`，但最好还是使用有意义的名称；现在我把`NumPy`包称为`np`，我可以使用`np`来引用它了：
- en: '[PRE6]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In this example, I''ll call the `random` function that''s provided as part
    of the `NumPy` package and call its normal function to actually generate a normal
    distribution of random numbers using these parameters and print them out. Since
    it is random, I should get different results every time:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我将调用`NumPy`包提供的`random`函数，并调用其正态函数来生成一组随机数的正态分布，并将其打印出来。由于它是随机的，每次我应该得到不同的结果：
- en: '[PRE7]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The output should look like this:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该是这样的：
- en: '![](img/ba05d5f4-d85a-4fb0-bf4e-1ba2378efc10.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ba05d5f4-d85a-4fb0-bf4e-1ba2378efc10.png)'
- en: Sure enough, I get different results. That's pretty cool.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 果然，我得到了不同的结果。这很酷。
- en: Data structures
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据结构
- en: Let's move on to data structures. If you need to pause and let things sink in
    a little bit, or you want to play around with these a little bit more, feel free
    to do so. The best way to learn this stuff is to dive in and actually experiment,
    so I definitely encourage doing that, and that's why I'm giving you working IPython/Jupyter
    Notebooks, so you can actually go in, mess with the code, do different stuff with
    it.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续讨论数据结构。如果你需要暂停一下，让事情沉淀一下，或者你想更多地玩弄一下这些，随时都可以这样做。学习这些东西的最好方法就是投入其中，实际进行实验，所以我绝对鼓励这样做，这也是为什么我给你们提供了可工作的IPython/Jupyter笔记本，这样你们就可以真正进入其中，改变代码，做不同的事情。
- en: 'For example, here we have a distribution around `25.0`, but let''s make it
    around `55.0`:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，这里我们有一个围绕`25.0`的分布，但让我们把它围绕`55.0`：
- en: '[PRE8]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Hey, all my numbers changed, they're closer to 55 now, how about that?
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 嘿，我的所有数字都变了，它们现在更接近55了，怎么样？
- en: '![](img/a1f51f78-e6e2-4fd5-a764-68cf88d08abc.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a1f51f78-e6e2-4fd5-a764-68cf88d08abc.png)'
- en: Alright, let's talk about data structures a little bit here. As we saw in our
    first example, you can have a list, and the syntax looks like this.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们来谈谈数据结构。就像我们在第一个例子中看到的那样，你可以有一个列表，语法看起来是这样的。
- en: Experimenting with lists
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列表实验
- en: '[PRE9]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You can say, call a list `x`, for example, and assign it to the numbers `1`
    through `6`, and these square brackets indicate that we are using a Python list,
    and those are immutable objects that I can actually add things to and rearrange
    as much as I want to. There's a built-in function for determining the length of
    the list called `len`, and if I type in `len(x)`, that will give me back the number
    `6` because there are 6 numbers in my list.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以说，比如，调用一个名为`x`的列表，并将其赋值为数字`1`到`6`，这些方括号表示我们使用的是Python列表，它们是不可变的对象，我可以随意添加和重新排列。有一个用于确定列表长度的内置函数叫做`len`，如果我输入`len(x)`，那么会返回数字`6`，因为我的列表中有6个数字。
- en: 'Just to make sure, and again to drive home the point that this is actually
    running real code here, let''s add another number in there, such as `4545`. If
    you run this, you''ll get `7` because now there are 7 numbers in that list:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 只是为了确保，再次强调这实际上是在运行真正的代码，让我们在那里再添加一个数字，比如`4545`。如果你运行这个，你会得到`7`，因为现在列表中有7个数字：
- en: '[PRE10]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The output of the previous code example is as follows:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 前面代码示例的输出如下：
- en: '[PRE11]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Go back to the original example there. Now you can also slice lists. If you
    want to take a subset of a list, there''s a very simple syntax for doing so:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 回到原来的例子。现在你也可以对列表进行切片。如果你想要取列表的一个子集，有一个非常简单的语法可以做到：
- en: '[PRE12]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The output of the above code example is as follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 上面代码示例的输出如下：
- en: '[PRE13]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Pre colon
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 冒号之前
- en: If, for example, you want to take the first three elements of a list, everything
    before element number 3, we can say `:3` to get the first three elements, `1`,
    `2`, and `3`, and if you think about what's going on there, as far as indices
    go, like in most languages, we start counting from 0\. So element 0 is `1`, element
    1 is `2`, and element 2 is `3`. Since we're saying we want everything before element
    3, that's what we're getting.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你想要取列表的前三个元素，即第3个元素之前的所有东西，我们可以说`:3`来获取前三个元素，`1`，`2`和`3`，如果你想想那里发生了什么，就是索引方面的事情，就像大多数语言一样，我们从0开始计数。所以第0个元素是`1`，第1个元素是`2`，第2个元素是`3`。因为我们说我们想要在第3个元素之前的所有东西，这就是我们得到的。
- en: So, you know, never forget that in most languages, you start counting at 0 and
    not 1.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，你知道，在大多数语言中，你从0开始计数，而不是1。
- en: 'Now this can confuse matters, but in this case, it does make intuitive sense.
    You can think of that colon as meaning I want everything, I want the first three
    elements, and I could change that to four just again to make the point that we''re
    actually doing something real here:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在这可能会让事情变得混乱，但在这种情况下，它确实是直观的。你可以把冒号理解为我想要所有东西，我想要前三个元素，我可以再次将其更改为四，以再次说明我们实际上正在做一些真实的事情：
- en: '[PRE14]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The output of the above code example is as follows:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 上面代码示例的输出如下：
- en: '[PRE15]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Post colon
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 冒号之后
- en: Now if I put the colon on the other side of the `3`, that says I want everything
    after `3`, so `3` and after. If I say `x[3:]`, that's giving me the third element,
    0, 1, 2, 3, and everything after it. So that's going to return 4, 5, and 6 in
    that example, OK?
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在如果我把冒号放在`3`的另一侧，那就表示我想要`3`之后的所有东西，所以`3`和之后的。如果我说`x[3:]`，那就是给我第三个元素，0，1，2，3，以及之后的所有东西。所以在这个例子中会返回4，5和6，明白吗？
- en: '[PRE16]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The output is as follows:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE17]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: You might want to keep this IPython/Jupyter Notebook file around. It's a good
    reference, because sometimes it can get confusing as to whether the slicing operator
    includes that element or if it's up to or including it or not. So the best way
    is to just play around with it here and remind yourself.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想要保留这个IPython/Jupyter Notebook文件。这是一个很好的参考，因为有时候会让人困惑，不知道切片操作符是否包括该元素，或者是到或包括它，还是不包括。所以最好的方法就是在这里玩一下，提醒自己。
- en: Negative syntax
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 负数语法
- en: 'One more thing you can do is have this negative syntax:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用这种负数语法：
- en: '[PRE18]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The output is as follows:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 上面代码的输出如下：
- en: '[PRE19]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: By saying `x[-2:]`, this means that I want the last two elements in the list.
    This means that go backwards two from the end, and that will give me `5` and `6`,
    because those are the last two things on my list.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 通过说`x[-2:]`，这意味着我想要列表中的最后两个元素。这意味着从末尾向后退两个，这将给我`5`和`6`，因为这些是列表中的最后两个元素。
- en: Adding list to list
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加列表到列表
- en: 'You can also change lists around. Let''s say I want to add a list to the list.
    I can use the `extend` function for that, as shown in the following code block:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以改变列表。比如说我想要把一个列表添加到另一个列表中。我可以使用`extend`函数来做到这一点，如下面的代码块所示：
- en: '[PRE20]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The output of the above code is as follows:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 上面代码的输出如下：
- en: '[PRE21]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: I have my list of `1`, `2`, `3`, `4`, `5`, `6`. If I want to extend it, I can
    say I have a new list here, `[7, 8]`, and that bracket indicates this is a new
    list of itself. This could be a list implicit, you know, that's inline there,
    it could be referred to by another variable. You can see that once I do that,
    the new list I get actually has that list of `7`, `8` appended on to the end of
    it. So I have a new list by extending that list with another list.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我有一个列表`1`，`2`，`3`，`4`，`5`，`6`。如果我想要扩展它，我可以说我有一个新列表在这里，`[7, 8]`，那个方括号表示这本身就是一个新列表。这可能是一个隐式的列表，在那里，它可以被另一个变量引用。你可以看到，一旦我这样做了，我得到的新列表实际上是在原来的列表上附加了`7`，`8`的列表。所以我通过扩展另一个列表来得到一个新列表。
- en: The append function
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加函数
- en: 'If you want to just add one more thing to that list, you can use the `append`
    function. So I just want to stick the number `9` at the end, there we go:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只想在列表中再添加一些东西，你可以使用`append`函数。所以我只想在末尾加上数字`9`，就这样：
- en: '[PRE22]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The output of the above code is as follows:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 上面代码的输出如下：
- en: '[PRE23]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Complex data structures
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复杂的数据结构
- en: 'You can also have complex data structures with lists. So you don''t have to
    just put numbers in it; you can actually put strings in it. You can put numbers
    in it. You can put other lists in it. It doesn''t matter. Python is a weakly-typed
    language, so you can pretty much put whatever kind of data you want, wherever
    you want, and it will generally be an OK thing to do:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用列表创建复杂的数据结构。所以你不只是可以把数字放进去；你实际上可以把字符串放进去。你可以把数字放进去。你可以把其他列表放进去。都没关系。Python是一种弱类型语言，所以你基本上可以把任何类型的数据放到任何地方，通常都是可以的：
- en: '[PRE24]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'In the preceding example, I have a second list that contains `10`, `11`, `12`,
    that I''m calling `y`. I''ll create a new list that contains two lists. How''s
    that for mind blowing? Our `listofLists` list will contain the `x` list and the
    `y` list, and that''s a perfectly valid thing to do. You can see here that we
    have a bracket indicating the `listofLists` list, and within that, we have another
    set of brackets indicating each individual list that is in that list:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我有一个包含`10`，`11`，`12`的第二个列表，我称之为`y`。我将创建一个包含两个列表的新列表。这对你来说是不是很惊人？我们的`listofLists`列表将包含`x`列表和`y`列表，这是完全有效的。你可以看到这里有一个括号表示`listofLists`列表，而在其中，我们有另一组括号表示该列表中的每个单独的列表：
- en: '[PRE25]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: So, sometimes things like these will come in handy.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，有时这样的东西会派上用场。
- en: Dereferencing a single element
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 取消引用单个元素
- en: 'If you want to dereference a single element of the list you can just use the
    bracket like that:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想取消引用列表的单个元素，你可以像这样使用括号：
- en: '[PRE26]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The output of the above code is as follows:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 上面代码的输出如下：
- en: '[PRE27]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: So `y[1]` will return element `1`. Remember that `y` had `10`, `11`, `12` in
    it - observe the previous example, and we start counting from 0, so element 1
    will actually be the second element in the list, or the number `11` in this case,
    alright?
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 所以`y[1]`将返回元素`1`。记住`y`中有`10`，`11`，`12` - 观察上面的例子，我们从0开始计数，所以元素1实际上是列表中的第二个元素，或者在这种情况下是数字`11`，好吗？
- en: The sort function
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 排序函数
- en: 'Finally, let''s have a built-in sort function that you can use:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们来看一个内置的排序函数，你可以使用它：
- en: '[PRE28]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'So if I start with list `z`, which is `3,``2`, and `1`, I can call sort on
    that list, and `z` will now be sorted in order. The output of the above code is
    as follows:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 所以如果我从列表`z`开始，它是`3`，`2`和`1`，我可以在该列表上调用排序，然后`z`现在将按顺序排序。上面代码的输出如下：
- en: '[PRE29]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Reverse sort
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 反向排序
- en: '[PRE30]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The output of the above code is as follows:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 上面代码的输出如下：
- en: '[PRE31]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: If you need to do a reverse sort, you can just say `reverse=True` as an attribute,
    as a parameter in that `sort` function, and that will put it back to `3`, `2`,
    `1`.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要进行反向排序，你可以在`sort`函数中添加一个参数`reverse=True`，这将使它恢复到`3`，`2`，`1`。
- en: If you need to let that sink in a little bit, feel free to go back and read
    it a little bit more.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要让这个概念沉淀一下，可以随意回去再读一下。
- en: Tuples
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 元组
- en: 'Tuples are just like lists, except they''re immutable, so you can''t actually
    extend, append, or sort them. They are what they are, and they behave just like
    lists, apart from the fact that you can''t change them, and you indicate that
    they are immutable and are tuple, as opposed to a list, using parentheses instead
    of a square bracket. So you can see they work pretty much the same way otherwise:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 元组就像列表一样，只是它们是不可变的，所以你实际上不能扩展、追加或排序它们。它们就是它们，除了你不能改变它们，并且你用括号而不是方括号表示它们是不可变的元组，它们的行为就像列表一样。所以你可以看到它们在其他方面基本上是一样的：
- en: '[PRE32]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The output of the previous code is as follows:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 上面代码的输出如下：
- en: '[PRE33]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: We can say `x= (1, 2, 3)`. I can still use `length - len` on that to say that
    there are three elements in that tuple, and even though, if you're not familiar
    with the term `tuple`, a `tuple` can actually contain as many elements as you
    want. Even though it sounds like it's Latin based on the number three, it doesn't
    mean you have three things in it. Usually, it only has two things in it. They
    can have as many as you want, really.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以说`x=(1,2,3)`。我仍然可以在上面使用`length - len`来说这个元组中有三个元素，即使，如果你不熟悉术语`元组`，一个`元组`实际上可以包含任意多个元素。尽管它听起来像是基于数字三的拉丁语，但这并不意味着你在其中有三个东西。通常，它只有两个东西。它们可以有任意多个，真的。
- en: Dereferencing an element
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 取消引用一个元素
- en: 'We can also dereference the elements of a tuple, so element number 2 again
    would be the third element, because we start counting from 0, and that will give
    me back the number `6` in the following screenshot:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以对元组的元素进行取消引用，所以第2个元素再次是第三个元素，因为我们从0开始计数，这将在下面的截图中给我返回数字`6`：
- en: '[PRE34]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The output to the above code is as follows:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 上面代码的输出如下：
- en: '[PRE35]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: List of tuples
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 元组列表
- en: We can also, like we could with lists, use tuples as elements of a list.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以像对待列表一样，使用元组作为列表的元素。
- en: '[PRE36]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The output to the above code is as follows:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 上面代码的输出如下：
- en: '[PRE37]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'We can create a new list that contains two tuples. So in the preceding example,
    we have our `x` tuple of `(1, 2, 3)` and our `y` tuple of `(4, 5, 6)`; then we
    make a list of those two tuples and we get back this structure, where we have
    square brackets indicating a list that contains two tuples indicated by parentheses,
    and one thing that tuples are commonly used for when we''re doing data science
    or any sort of managing or processing of data really is to use it to assign variables
    to input data as it''s read in. I want to walk you through a little bit on what''s
    going on in the following example:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以创建一个包含两个元组的新列表。所以在上面的例子中，我们有我们的`x`元组`(1,2,3)`和我们的`y`元组`(4,5,6)`；然后我们将这两个元组放入一个列表中，我们得到了这样的结构，其中我们有方括号表示包含两个由括号表示的元组的列表，元组在我们进行数据科学或任何数据管理或处理时通常用于将变量分配给输入数据。我想向你解释一下下面例子中发生了什么：
- en: '[PRE38]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The output to the above code is as follows:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 上面代码的输出如下：
- en: '[PRE39]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Let's say we have a line of input data coming in and it's a comma-separated
    value file, which contains ages, say `32`, comma-delimited by an income, say `120000`
    for that age, just to make something up. What I can do is as each line comes in,
    I can call the `split` function on it to actually separate that into a pair of
    values that are delimited by commas, and take that resulting tuple that comes
    out of split and assign it to two variables-`age` and `income`-all at once by
    defining a tuple of age, income and saying that I want to set that equal to the
    tuple that comes out of the `split` function.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一行输入数据进来，它是一个逗号分隔的值文件，其中包含年龄，比如`32`，用逗号分隔的收入，比如`120000`，只是为了举个例子。当每行数据进来时，我可以调用`split`函数来将其分隔成由逗号分隔的一对值，并将`split`的结果元组一次性分配给两个变量-`age`和`income`，通过定义一个年龄、收入的元组，并说我想将其设置为`split`函数的结果元组。
- en: So this is basically a common shorthand you'll see for assigning multiple fields
    to multiple variables at once. If I run that, you can see that the `age` variable
    actually ends up assigned to `32` and `income` to `120,000` because of that little
    trick there. You do need to be careful when you're doing this sort of thing, because
    if you don't have the expected number of fields or the expected number of elements
    in the resulting tuple, you will get an exception if you try to assign more stuff
    or less stuff than you expect to see here.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这基本上是你会看到的一种常见的简写，用于一次性为多个变量分配多个字段。如果我运行它，你会看到`age`变量实际上被分配为`32`，`income`被分配为`120,000`，因为有这个小技巧。当你这样做的时候，你需要小心，因为如果你没有预期的字段数量或者结果元组中的预期元素数量，如果你尝试分配更多或更少的东西，你会得到一个异常。
- en: Dictionaries
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字典
- en: 'Finally, the last data structure that we''ll see a lot in Python is a dictionary,
    and you can think of that as a map or a hash table in other languages. It''s a
    way to basically have a sort of mini-database, sort of a key/value data store
    that''s built into Python. So let''s say, I want to build up a little dictionary
    of Star Trek ships and their captains:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将在Python中经常看到的最后一个数据结构是字典，你可以把它看作是其他语言中的映射或哈希表。这基本上是一种在Python中内置的一种方式，可以有一种类似于键/值数据存储的迷你数据库。所以假设我想建立一个小小的星际迷航飞船和他们的船长的字典：
- en: '![](img/064496bb-a775-4fd9-85c9-cef29783c066.png)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![](img/064496bb-a775-4fd9-85c9-cef29783c066.png)'
- en: I can set up a `captains = {}`, where curly brackets indicates an empty dictionary.
    Now I can use this sort of a syntax to assign entries in my dictionary, so I can
    say `captains` for `Enterprise` is `Kirk`, for `Enterprise D` it is `Picard`,
    for `Deep Space Nine` it is `Sisko`, and for `Voyager` it is `Janeway`. Now I
    have, basically, this lookup table that will associate ship names with their captain,
    and I can say, for example, `print captains["Voyager"]`, and I get back `Janeway`.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以设置`captains = {}`，花括号表示一个空字典。现在我可以使用这种语法来为字典中的条目赋值，所以我可以说`captains`为`Enterprise`是`Kirk`，为`Enterprise
    D`是`Picard`，为`Deep Space Nine`是`Sisko`，为`Voyager`是`Janeway`。现在我基本上有了这个查找表，它将船名与船长关联起来，例如，我可以说`print
    captains["Voyager"]`，我会得到`Janeway`。
- en: A very useful tool for basically doing lookups of some sort. Let's say you have
    some sort of an identifier in a dataset that maps to some human-readable name.
    You'll probably be using a dictionary to actually do that look up when you're
    printing it out.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 这基本上是一种非常有用的工具，可以用来做某种查找。假设你在数据集中有某种标识符，它映射到一些可读的名称。当你打印出来时，你可能会使用字典来进行实际的查找。
- en: 'We can also see what happens if you try to look up something that doesn''t
    exist. Well, we can use the `get` function on a dictionary to safely return an
    entry. So in this case, `Enterprise` does have an entry in my dictionary, it just
    gives me back `Kirk`, but if I call the `NX-01` ship on the dictionary, I never
    defined the captain of that, so it comes back with a `None` value in this example,
    which is better than throwing an exception, but you do need to be aware that this
    is a possibility:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以看看如果尝试查找不存在的东西会发生什么。嗯，我们可以在字典上使用`get`函数来安全地返回一个条目。所以在这种情况下，`Enterprise`在我的字典中有一个条目，它只是给我`Kirk`，但如果我在字典上调用`NX-01`船，我从来没有定义过那个船的船长，所以在这个例子中它会返回一个`None`值，这比抛出异常要好，但你需要意识到这是可能的：
- en: '[PRE40]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The output of the above code is as follows:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 上面代码的输出如下：
- en: '[PRE41]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The captain is Jonathan Archer, but you know, I'm get a little bit too geeky
    here now.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 船长是乔纳森·阿彻，但你知道，我现在有点太迷恋了。
- en: Iterating through entries
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 遍历条目
- en: '[PRE42]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The output of the above code is as follows:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 上面代码的输出如下：
- en: '![](img/0e877e52-c87c-4dce-ba72-9a5af88d2ec8.png)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0e877e52-c87c-4dce-ba72-9a5af88d2ec8.png)'
- en: Let's look at a little example of iterating through the entries in a dictionary.
    If I want to iterate through every ship that I have in my dictionary and print
    out `captains`, I can type for `ship` in `captains`, and this will iterate through
    every single key in my dictionary. Then I can print out the lookup value of each
    ship's captain, and that's the output that I get there.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个遍历字典条目的小例子。如果我想要遍历我字典中的每艘船，并打印出`captains`，我可以输入`for ship in captains`，这将遍历字典中的每个键。然后我可以打印出每艘船船长的查找值，这就是我得到的输出。
- en: There you have it. This is basically the main data structures that you'll encounter
    in Python. There are some others, such as sets, but we'll not really use them
    in this book, so I think that's enough to get you started. Let's dive into some
    more Python nuances in our next section.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。这基本上是你在Python中会遇到的主要数据结构。还有其他一些，比如集合，但我们在这本书中不会真正使用它们，所以我认为这已经足够让你开始了。让我们在下一节中深入了解一些Python的细微差别。
- en: Python basics - Part 2
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python基础-第2部分
- en: In addition to *Python Basics - Part 1*, let us now try to grasp more Python
    concepts in detail.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 除了*Python基础-第1部分*，现在让我们试着更详细地掌握更多Python概念。
- en: Functions in Python
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python中的函数
- en: 'Let''s talk about functions in Python. Like with other languages, you can have
    functions that let you repeat a set of operations over and over again with different
    parameters. In Python, the syntax for doing that looks like this:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们谈谈Python中的函数。与其他语言一样，你可以有函数让你重复一组操作，只是参数不同。在Python中，做到这一点的语法看起来像这样：
- en: '[PRE43]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The output of the above code is as follows:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 上面代码的输出如下：
- en: '[PRE44]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: You declare a function using the `def` keyword. It just says this is a function,
    and we'll call this function `SquareIt`, and the parameter list is then followed
    inside parentheses. This particular function only takes one parameter that we'll
    call `x`. Again, remember that whitespace is important in Python. There's not
    going to be any curly brackets or anything enclosing this function. It's strictly
    defined by whitespace. So we have a colon that says that this function declaration
    line is over, but then it's the fact that it's tabbed by one or more tabs that
    tells the interpreter that we are in fact within the `SquareIt` function.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 你使用`def`关键字声明一个函数。它只是说这是一个函数，我们将称这个函数为`SquareIt`，然后在括号内跟着参数列表。这个特定的函数只接受一个我们将称为`x`的参数。再次记住，在Python中空白很重要。这个函数不会有任何花括号或者其他东西来包围它。它完全由空白定义。所以我们有一个冒号，它表示这个函数声明行结束了，但是它是通过一个或多个制表符来告诉解释器我们实际上在`SquareIt`函数内部。
- en: So `def SquareIt(x):` tab returns `x * x`, and that will return the square of
    `x` in this function. We can go ahead and give that a try. `print squareIt(2)`
    is how we call that function. It looks just like it would be in any other language,
    really. This should return the number `4`; we run the code, and in fact it does.
    Awesome! That's pretty simple, that's all there is to functions. Obviously, I
    could have more than one parameter if I wanted to, even as many parameters as
    I need.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 所以`def SquareIt(x):` tab返回`x * x`，这将返回这个函数中`x`的平方。我们可以试一下。`print squareIt(2)`就是我们调用这个函数的方式。它看起来就像在任何其他语言中一样。这应该返回数字`4`；我们运行代码，事实上确实是这样的。太棒了！这很简单，这就是函数的全部。显然，如果我愿意，我可以有多个参数，甚至需要多少个参数都可以。
- en: 'Now there are some weird things you can do with functions in Python, that are
    kind of cool. One thing you can do is to pass functions around as though they
    were parameters. Let''s take a closer look at this example:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在Python中有一些奇怪的事情你可以做，这些事情有点酷。你可以像传递参数一样传递函数。让我们仔细看看这个例子：
- en: '[PRE45]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The output of the preceding code is as follows:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 前面代码的输出如下：
- en: '[PRE46]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Now I have a function called `DoSomething`, `def DoSomething`, and it will take
    two parameters, one that I'll call `f` and the other I'll call `x`, and if I happen,
    I can actually pass in a function for one of these parameters. So, think about
    that for a minute. Look at this example with a bit more sense. Here, `DoSomething(f,x):`
    will return `f` of `x`; it will basically call the f function with x as a parameter,
    and there's no strong typing in Python, so we have to just kind of make sure that
    what we are passing in for that first parameter is in fact a function for this
    to work properly.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我有一个名为`DoSomething`的函数，`def DoSomething`，它将接受两个参数，一个我将称为`f`，另一个我将称为`x`，如果我愿意，我实际上可以为其中一个参数传递一个函数。所以，请思考一分钟。看看这个例子，更有意义。在这里，`DoSomething(f,x):`将返回`f`的`x`；它基本上会调用f函数并将x作为参数传递进去，Python中没有强类型，所以我们必须确保我们为第一个参数传递的是一个函数，这样才能正常工作。
- en: For example, we'll say print `DoSomething`, and for the first parameter, we'll
    pass in `SquareIt`, which is actually another function, and the number `3`. What
    this should do is to say do something with the `SquareIt` function and the `3`
    parameter, and that will return `(SquareIt, 3)`, and `3` squared last time I checked
    was `9`, and sure enough, that does in fact work.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们将打印`DoSomething`，并且对于第一个参数，我们将传入`SquareIt`，这实际上是另一个函数，以及数字`3`。这应该做的是使用`SquareIt`函数和`3`参数做一些事情，这将返回`(SquareIt,
    3)`，我上次检查的时候，3的平方是9，确实是这样的。
- en: This might be a little bit of a new concept to you, passing functions around
    as parameters, so if you need to stop for a minute there, wait and let that sink
    in, play around with it, please feel free to do so. Again, I encourage you to
    stop and take this at your own pace.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能对你来说是一个新概念，将函数作为参数传递，所以如果你需要停下来一分钟，等一下，让它沉淀下来，玩弄一下，请随意这样做。再次，我鼓励你停下来，按照自己的步调学习。
- en: Lambda functions - functional programming
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Lambda函数 - 函数式编程
- en: 'One more thing that''s kind of a Python-ish sort of a thing to do, which you
    might not see in other languages is the concept of lambda functions, and it''s
    kind of called **functional programming**. The idea is that you can include a
    simple function into a function. This makes the most sense with an example:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一件事，这是一种Python式的做法，你可能在其他语言中看不到，那就是lambda函数的概念，它有点叫做**函数式编程**。这个想法是你可以在一个函数中包含一个简单的函数。通过一个例子来解释会更有意义：
- en: '[PRE47]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'The output of the above code is as follows:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 上面代码的输出如下：
- en: '[PRE48]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: We'll print `DoSomething`, and remember that our first parameter is a function,
    so instead of passing in a named function, I can declare this function inline
    using the `lambda` keyword. Lambda basically means that I'm defining an unnamed
    function that just exists for now. It's transitory, and it takes a parameter `x`.
    In the syntax here, `lambda` means I'm defining an inline function of some sort,
    followed by its parameter list. It has a single parameter, `x`, and the colon,
    followed by what that function actually does. I'll take the `x` parameter and
    multiply it by itself three times to basically get the cube of a parameter.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将打印`DoSomething`，记住我们的第一个参数是一个函数，所以我们可以使用`lambda`关键字内联声明这个函数，而不是传递一个命名函数。Lambda基本上意味着我正在定义一个暂时存在的未命名函数。它是瞬时的，并且它接受一个参数`x`。在这里的语法中，`lambda`意味着我正在定义某种内联函数，后面跟着它的参数列表。它有一个参数`x`，然后是冒号，然后是这个函数实际上要做的事情。我将取`x`参数并将其自身乘以三次，基本上得到参数的立方。
- en: In this example, `DoSomething` will pass in this lambda function as the first
    parameter, which computes the cube of `x` and the `3` parameter. So what's this
    really doing under the hood? This `lambda` function is a function of itself that
    gets passed into the `f` in `DoSomething` in the previous example, and `x` here
    is going to be `3`. This will return `f` of `x`, which will end up executing our
    lambda function on the value `3`. So that `3` goes into our `x` parameter, and
    our lambda function transforms that into `3` times `3` times `3`, which is, of
    course, `27`.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`DoSomething`将这个lambda函数作为第一个参数传递进去，它计算`x`的立方和`3`参数。那么在幕后这实际上是在做什么呢？这个`lambda`函数本身是一个函数，在前面的例子中被传递到`DoSomething`中的`f`，而这里的`x`将是`3`。这将返回`x`的`f`，最终执行我们的lambda函数在值`3`上。所以这个`3`进入我们的`x`参数，我们的lambda函数将其转换为`3`乘以`3`乘以`3`，当然是`27`。
- en: Now this comes up a lot when we start doing MapReduce and Spark and things like
    that. So if we'll be dealing with Hadoop sorts of technologies later on, this
    is a very important concept to understand. Again, I encourage you to take a moment
    to let that sink in and understand what's going on there if you need to.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们开始做MapReduce和Spark等工作时，这种情况经常出现。因此，如果以后要处理Hadoop等技术，这是一个非常重要的概念。再次，我鼓励您花点时间让它沉淀下来，理解发生了什么，如果需要的话。
- en: Understanding boolean expressions
  id: totrans-241
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解布尔表达式
- en: 'Boolean expression syntax is a little bit weird or unusual, at least in Python:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔表达式语法有点奇怪或不寻常，至少在Python中是这样：
- en: '[PRE49]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'The output of the above code is as follows:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 上面代码的输出如下：
- en: '[PRE50]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: As usual, we have the double equal symbol that can test for equality between
    two values. So does `1` equal `3`, no it doesn't, therefore `False`. The value
    `False` is a special value designated by F. Remember that when you're trying to
    test, when you're doing Boolean stuff, the relevant keywords are `True` with a
    T and `False` with an F. That's a little bit different from other languages that
    I've worked with, so keep that in mind.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 像往常一样，我们有双等号符号，可以测试两个值之间的相等性。所以`1`等于`3`吗，不，因此`False`。值`False`是由F指定的特殊值。请记住，在测试时，当您在进行布尔运算时，相关的关键字是`True`和`False`。这与我之前使用过的其他语言有点不同，所以请记住这一点。
- en: '[PRE51]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'The output of the above code is as follows:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 上面代码的输出如下：
- en: '[PRE52]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Well, `True` or `False` is `True`, because one of them is `True`, you run it
    and it comes back `True`.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，`True`或`False`是`True`，因为其中一个是`True`，你运行它，它会返回`True`。
- en: The if statement
  id: totrans-251
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: if语句
- en: '[PRE53]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'The output of the previous code is as follows:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 上面代码的输出如下：
- en: '[PRE54]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: The other thing we can do is use `is`, which is sort of the same thing as equal.
    It's a more Python-ish representation of equality, so `1 == 3` is the same thing
    as `1 is 3`, but this is considered the more Pythonic way of doing it. So `1 is
    3` comes back as `False` because `1` is not `3`.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用`is`，它与等号的作用类似。这是一种更Python风格的相等表示，所以`1 == 3`和`1 is 3`是一样的，但这被认为是更Pythonic的方式。因此`1
    is 3`返回`False`，因为`1`不是`3`。
- en: The if-else loop
  id: totrans-256
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: if-else循环
- en: '[PRE55]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'The output of the above code is as follows:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 上面代码的输出如下：
- en: '[PRE56]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: We can also do `if-else` and `else-if` blocks here too. Let's do something a
    little bit more complicated here. If `1 is 3`, I would print `How did that happen?`
    But of course `1` is not `3`, so we will fall back down to the `else-if` block,
    otherwise, if `1` is not `3`, we'll test if `1 > 3`. Well that's not true either,
    but if it did, we print `Yikes`, and we will finally fall into this catch-all
    `else` clause that will print `All is well with the world`.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在这里使用`if-else`和`else-if`块。让我们在这里做一些更复杂的事情。如果`1是3`，我会打印`怎么会发生这种事？`但当然`1`不是`3`，所以我们将回到`else-if`块，否则，如果`1`不是`3`，我们将测试`1>3`。好吧，那也不对，但如果是的话，我们打印`天哪`，最后我们将进入这个万能的`else`子句，它将打印`世界一切安好`。
- en: In fact, `1` is not `3`, nor is `1` greater than `3`, and sure enough, `All
    is well with the world`. So, you know, other languages have very similar syntax,
    but these are the peculiarities of Python and how to do an `if-else` or `else-if`
    block. So again, feel free to keep this notebook around. It might be a good reference
    later on.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，`1`不是`3`，`1`也不大于`3`，确实，`世界一切安好`。所以，你知道，其他语言有非常相似的语法，但这些是Python的特点，以及如何做`if-else`或`else-if`块。所以，随时保留这个笔记本。以后可能会成为一个很好的参考。
- en: Looping
  id: totrans-262
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 循环
- en: 'The last concept I want to cover in our Python basics is looping, and we saw
    a couple of examples of this already, but let''s just do another one:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 我想在我们的Python基础知识中涵盖的最后一个概念是循环，我们已经看到了一些例子，但让我们再做一个：
- en: '[PRE57]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'The output of the previous code is as follows:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 上面代码的输出如下：
- en: '[PRE58]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: For example, we can use this range operator to automatically define a list of
    numbers in the range. So if we say `for x` in `range(10)`, `range 10` will produce
    a list of `0` through `9`, and by saying for `x` in that list, we will iterate
    through every individual entry in that list and print it out. Again, the comma
    after the `print` statement says don't give me a new line, just keep on going.
    So the output of this ends up being all the elements of that list printed next
    to each other.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以使用这个范围运算符自动定义一个数字范围的列表。所以如果我们说`for x` in `range(10)`，`range 10`将产生一个`0`到`9`的列表，通过在该列表中说`for
    x`，我们将遍历该列表中的每个条目并打印出来。再次强调，`print`语句后的逗号表示不要给我一个新行，继续进行。因此，这样的输出最终是该列表的所有元素打印在一起。
- en: 'To do something a little bit more complicated, we''ll do something similar,
    but this time we''ll show how `continue` and `break` work. As in other languages,
    you can actually choose to skip the rest of the processing for a loop iteration,
    or actually stop the iteration of the loop prematurely:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 要做一些更复杂的事情，我们将做类似的事情，但这次我们将展示`continue`和`break`的工作原理。与其他语言一样，您实际上可以选择跳过循环迭代的其余处理，或者提前停止循环的迭代：
- en: '[PRE59]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'The output of the above code is as follows:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 上面代码的输出如下：
- en: '[PRE60]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: In this example, we'll go through the values 0 through 9, and if we hit on the
    number 1, we will continue before we print it out. We'll skip the number 1, basically,
    and if the number is greater than `5`, we'll break the loop and stop the processing
    entirely. The output that we expect is that we will print out the numbers `0`
    through `5`, unless it's `1`, in which case, we'll skip number `1`, and sure enough,
    that's what it does.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将遍历0到9的值，如果我们遇到数字1，我们将在打印它之前继续。我们将跳过数字1，基本上，如果数字大于`5`，我们将中断循环并完全停止处理。我们期望的输出是，我们将打印出数字`0`到`5`，除非是`1`，在这种情况下，我们将跳过数字`1`，确实，这就是它的作用。
- en: The while loop
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: while循环
- en: 'Another syntax is the while loop. This is kind of a standard looping syntax
    that you see in most languages:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种语法是while循环。这是大多数语言中都能看到的一种标准循环语法：
- en: '[PRE61]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'The output of the previous code is as follows:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的输出如下：
- en: '[PRE62]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: We can also say, start with `x = 0`, and `while (x < 10):`, print it out and
    then increment `x` by `1`. This will go through over and over again, incrementing
    x until it's less than 10, at which point we break out of the `while` loop and
    we're done. So it does the same thing as this first example here, but just in
    a different style. It prints out the numbers `0` through `9` using a `while` loop.
    Just some examples there, nothing too complicated. Again, if you've done any sort
    of programming or scripting before, this should be pretty simple.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以说，从`x = 0`开始，然后`while (x < 10):`，打印它，然后将`x`增加`1`。这将一遍又一遍地进行，递增x直到小于10为止，此时我们跳出`while`循环并完成。所以它和这里的第一个例子做的事情是一样的，只是以不同的风格。它使用`while`循环打印出数字`0`到`9`。只是一些例子，没有太复杂的东西。再次，如果你之前做过任何编程或脚本，这应该很简单。
- en: Now to really let this sink in, I've been saying throughout this entire chapter,
    get in there, get your hands dirty, and play with it. So I'm going to make you
    do that.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 现在为了让这个概念真正深入人心，我一直在整个章节中说，去尝试，动手去做，玩一下。所以我要让你这样做。
- en: Exploring activity
  id: totrans-280
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索活动
- en: 'Here''s an activity, a little bit of a challenge for you:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个活动，对你来说有点挑战：
- en: '![](img/be3d7f36-d26b-4f99-a293-d6f838d85bd2.png)'
  id: totrans-282
  prefs: []
  type: TYPE_IMG
  zh: '![](img/be3d7f36-d26b-4f99-a293-d6f838d85bd2.png)'
- en: Here's a nice little code block where you can start writing your own Python
    code, run it, and play around with it, so please do so. Your challenge is to write
    some code that creates a list of integers, loops through each element of that
    list, pretty easy so far, and only prints out even numbers.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个很好的代码块，你可以开始编写你自己的Python代码，运行它，并玩耍，所以请这样做。你的挑战是编写一些代码，创建一个整数列表，循环遍历该列表的每个元素，到目前为止都很容易，然后只打印出偶数。
- en: Now this shouldn't be too hard. There are examples in this notebook of doing
    all that stuff; all you have to do is put it together and get it to run. So, the
    point is not to give you something that's hard. I just want you to actually get
    some confidence in writing your own Python code and actually running it and seeing
    it operate, so please do so. I definitely encourage you to be interactive here.
    So have at it, good luck, and welcome to Python.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 现在这不应该太难。这本笔记本中有做所有这些事情的例子；你所要做的就是把它们放在一起并让它们运行起来。所以，重点不是给你一些难的东西。我只是想让你真的对编写自己的Python代码并实际运行它并看到它运行有信心，所以请这样做。我绝对鼓励你在这里进行互动。所以加油，祝你好运，欢迎来到Python。
- en: So that's your Python crash course, obviously, just some very basic stuff there.
    As we go through more and more examples throughout the book, it'll make more and
    more sense since you have more examples to look at, but if you do feel a little
    bit intimidated at this point, maybe you're a little bit too new to programming
    or scripting, and it might be a good idea to go and take a Python revision before
    moving forward, but if you feel pretty good about what you've seen so far, let's
    move ahead and we'll keep on going.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这就是你的Python速成课程，显然，只是一些非常基本的东西。随着我们在整本书中越来越多的例子，它会变得越来越有意义，因为你有更多的例子可以参考，但如果你现在感到有点害怕，也许你对编程或脚本有点太新了，那么在继续之前可能最好先进行一次Python复习，但如果你对到目前为止看到的东西感到相当满意，让我们继续前进，我们将继续前进。
- en: Running Python scripts
  id: totrans-286
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行Python脚本
- en: Throughout this book, we'll be using the IPython/Jupyter Notebook format (which
    are `.ipynb` files) that we've been looking at so far, and it's a great format
    for a book like this because it lets me put little blocks of code in there and
    put a little text and things around it explaining what it's doing, and you can
    experiment with things live.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 在整本书中，我们将使用IPython/Jupyter笔记本格式（即`.ipynb`文件），这是一个很好的格式，因为它让我可以在里面放一些代码块，并加一些文字和解释它在做什么，你可以实时尝试一些东西。
- en: Of course, it's great from that standpoint, but in the real world, you're probably
    not going to be using IPython/Jupyter Notebooks to actually run your Python scripts
    in production, so let me just really briefly go through the other ways you can
    run Python code, and other interactive ways of running Python code as well. So
    it's a pretty flexible system. Let's take a look.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，从这个角度来看，这很棒，但在现实世界中，你可能不会真的使用IPython/Jupyter笔记本来在生产中运行你的Python脚本，所以让我简要地介绍一下你可以运行Python代码的其他方式，以及其他交互式运行Python代码的方式。所以这是一个相当灵活的系统。让我们来看看。
- en: More options than just the IPython/Jupyter Notebook
  id: totrans-289
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不仅仅是IPython/Jupyter笔记本
- en: I want to make sure that you know there's more than one way to run Python code.
    Now, throughout this book, we'll be using the IPython/Jupyter Notebook format
    but in the real world, you're not going to be running your code as a notebook.
    You're going to be running it as a standalone Python script. So I just want to
    make sure you know how to do that and see how it works.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 我想确保你知道有多种运行Python代码的方式。现在，在整本书中，我们将使用IPython/Jupyter笔记本格式，但在现实世界中，你不会将你的代码作为笔记本来运行。你将把它作为一个独立的Python脚本来运行。所以我只是想确保你知道如何做到这一点并看看它是如何工作的。
- en: '![](img/378e204b-200b-4ac4-b05a-65f905c25481.png)'
  id: totrans-291
  prefs: []
  type: TYPE_IMG
  zh: '![](img/378e204b-200b-4ac4-b05a-65f905c25481.png)'
- en: So let's go back to this first example that we ran in the book, just to illustrate
    the importance of whitespace. We can just select and copy that code out of the
    notebook format and paste it into a new file.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们回到我们在书中运行的第一个例子，只是为了说明空格的重要性。我们可以从笔记本格式中选择并复制代码，然后粘贴到一个新文件中。
- en: This can be done by clicking on the New button at the extreme left. So let's
    make a new file and paste it in and let's save this file and call it, `test.py`,
    where `py` is the usual extension that we give to Python scripts. Now, I can run
    this in a few different ways.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过点击最左边的“新建”按钮来完成。所以让我们创建一个新文件，粘贴进去，然后保存这个文件，命名为`test.py`，其中`py`是我们给Python脚本通常使用的扩展名。现在，我可以以几种不同的方式运行它。
- en: Running Python scripts in command prompt
  id: totrans-294
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在命令提示符中运行Python脚本
- en: 'I can actually run the script in a command prompt. If I go to Tools, I can
    go to Canopy Command Prompt, and that will open up a command window that has all
    the necessary environment variables already in place for running Python. I can
    just type `python test.py` and run the script, and out comes my result:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 我实际上可以在命令提示符中运行脚本。如果我去工具，我可以选择Canopy命令提示符，这将打开一个命令窗口，其中已经设置好了运行Python所需的所有必要的环境变量。我只需输入`python
    test.py`并运行脚本，结果就出来了：
- en: '![](img/6299c466-90f8-4d46-a9e2-d69794d19776.png)'
  id: totrans-296
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6299c466-90f8-4d46-a9e2-d69794d19776.png)'
- en: So in the real world, you'd probably do something like that. It might be on
    a Crontab or something like that, who knows? But running a real script in production
    is just that simple. You can now close the command prompt.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 所以在现实世界中，你可能会做类似的事情。可能是在Crontab上或其他地方，谁知道呢？但在生产中运行一个真正的脚本就是这么简单。现在你可以关闭命令提示符。
- en: Using the Canopy IDE
  id: totrans-298
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Canopy IDE
- en: 'Moving back, I can also run the script from within the IDE. So from within
    Canopy, I can go to the Run menu. I can either go to Run | Run File, or click
    on the little play icon, and that will also execute my script, and see the results
    at the bottom in the output window, as shown in the following screenshot:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 回到IDE，我也可以在IDE中运行脚本。所以在Canopy中，我可以去运行菜单。我可以选择运行文件，或者点击小播放图标，这也会执行我的脚本，并在输出窗口底部看到结果，如下图所示：
- en: '![](img/1dc55b77-fdb6-4c2f-93dc-2669ac31b7d0.png)'
  id: totrans-300
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1dc55b77-fdb6-4c2f-93dc-2669ac31b7d0.png)'
- en: 'So that''s another way to do it, and finally, you can also run scripts within
    this interactive prompt present at the bottom interactively. I can actually type
    in Python commands one at a time down, and have them just execute and stay within
    the environment down there:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一种方法，最后，你也可以在底部的交互式提示符中运行脚本。我实际上可以逐个输入Python命令，并让它们在环境中执行并保留在那里：
- en: '![](img/5f5a18cf-9165-402f-b685-483810fe90ed.png)'
  id: totrans-302
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5f5a18cf-9165-402f-b685-483810fe90ed.png)'
- en: 'For example, I could say `stuff`, make it a `list` call, and have `1`, `2`,
    `3`, `4`, and now I can say `len(stuff)`, and that will give me `4`:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我可以说`stuff`，将其作为`list`调用，并有`1`，`2`，`3`，`4`，现在我可以说`len(stuff)`，这将给我`4`：
- en: '![](img/4d4be20b-31a7-482a-8a25-024e7bbb09e3.png)'
  id: totrans-304
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4d4be20b-31a7-482a-8a25-024e7bbb09e3.png)'
- en: 'I can say, `for x in stuff:print x`, and we get output as `1 2 3 4`:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以说，`for x in stuff:print x`，我们得到的输出是`1 2 3 4`：
- en: '![](img/d22ff567-5d5f-422a-a8eb-2e0619d62b37.png)'
  id: totrans-306
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d22ff567-5d5f-422a-a8eb-2e0619d62b37.png)'
- en: So you can see you can kind of makeup scripts as you go down in the interactive
    prompt at the bottom and execute things one thing at a time. In this example,
    `stuff` is a variable we created, a list that stays in memory, it's kind of like
    a global variable in other languages within this environment.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你可以看到，你可以在底部的交互式提示符中逐步制作脚本并逐个执行。在这个例子中，`stuff`是我们创建的一个变量，一个保留在内存中的列表，它有点像其他语言中的全局变量在这个环境中。
- en: 'Now if I do want to reset this environment, if I want to get rid of `stuff`
    and start all over, the way you do that is you go up to the Run menu here and
    you can say Restart Kernel, and that will strike you over with a blank slate:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 现在如果我想要重置这个环境，如果我想要摆脱`stuff`并重新开始，你可以这样做，你可以在这里点击运行菜单，然后选择重新启动内核，这将给你一个空白的状态：
- en: '![](img/8204b752-159f-4b65-b3e0-6c99f7f8c49a.png)'
  id: totrans-309
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8204b752-159f-4b65-b3e0-6c99f7f8c49a.png)'
- en: 'So now I have a new Python environment that''s a clean slate, and in this case,
    what did I call it? Type `stuff` and `stuff` doesn''t exist yet because I have
    a new environment, but I can make it something else, such as `[4, 5, 6]`; run
    it and there it is:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 所以现在我有一个新的Python环境，是一个干净的状态，这种情况下，我叫它什么来着？输入`stuff`，`stuff`还不存在，因为我有一个新的环境，但我可以把它变成其他东西，比如`[4,
    5, 6]`；运行它，就是这样：
- en: '![](img/3f4a7f96-ead8-4dfa-8f1c-da8eddf25b03.png)'
  id: totrans-311
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3f4a7f96-ead8-4dfa-8f1c-da8eddf25b03.png)'
- en: 'So there you have it, three ways of running Python code: the IPython/Jupyter
    Notebook, which we''ll use throughout this book just because it''s a good learning
    tool, you can also run scripts as standalone script files, and you can also execute
    Python code in the interactive command prompt.'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你看到了，有三种运行Python代码的方式：IPython/Jupyter Notebook，我们将在本书中使用它，因为它是一个很好的学习工具，你也可以作为独立的脚本文件运行脚本，也可以在交互式命令提示符中执行Python代码。
- en: So there you have it, and there you have three different ways of running Python
    code and experimenting and running things in production. So keep that in mind.
    We'll be using notebooks throughout the rest of this book, but again, you have
    those other options when the time comes.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你看到了，你有三种不同的方式来运行Python代码和在生产中进行实验和运行。记住这一点。在本书的其余部分中，我们将使用笔记本，但当时机到来时，你还有其他选择。
- en: Summary
  id: totrans-314
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we started our journey with building the most important stepping
    stone of the book - Installing Enthought Canopy. We then moved to installing other
    libraries and installing different types of packages. We also grasped some of
    the basics of Python with the help of various Python code. We covered basic concepts
    such as modules, lists along with Tuples, and eventually moved on to understanding
    more of Python basics with a better knowledge of functions and looping in Python.
    Finally, we started with running some of our simple Python scripts.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们开始了我们的旅程，建立了本书最重要的基石 - 安装 Enthought Canopy。然后我们继续安装其他库和不同类型的软件包。我们还借助各种
    Python 代码掌握了一些 Python 的基础知识。我们涵盖了模块、列表以及元组等基本概念，最终更深入地了解了 Python 的基础知识，包括函数和循环。最后，我们开始运行一些简单的
    Python 脚本。
- en: In the next chapter, we will move on to understand concepts of statistics and
    probability.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将继续了解统计和概率的概念。
