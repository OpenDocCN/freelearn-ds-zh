- en: Getting Started
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 开始使用
- en: In this chapter, we will give a brief overview of the principal syntactical
    elements of Python. Readers who have just started learning programming are guided
    through the book in this chapter. Every topic is presented here in a *how-to* way and
    will be explained later in the book in a deeper conceptual manner and will also
    be enriched with many applications and extensions.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将简要概述 Python 的主要语法元素。本章旨在引导刚开始学习编程的读者。每个主题都以 *如何做* 的方式呈现，并将在本书后续部分以更深入的概念性方式解释，并结合许多应用和扩展。
- en: Readers who are already familiar with another programming language will, in
    this chapter, encounter the Python way of doing classical language constructs.
    This offers them a quick start to Python programming.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些已经熟悉其他编程语言的读者，本章将介绍 Python 方式的经典语言构造。这将为他们提供快速入门 Python 编程的机会。
- en: Both types of readers are encouraged to refer to this chapter as a brief guideline
    when zigzagging through the book. However, before we start, we have to make sure
    that everything is in place and that you have the correct version of Python installed
    together with the main modules for scientific computing and tools, such as a good
    editor and a shell, which helps in code development and testing.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 无论哪种类型的读者，都可以将本章作为参考指南，在阅读本书时随时查看。不过，在开始之前，我们需要确保一切准备就绪，确保你已安装正确版本的 Python，并配备好用于科学计算和工具的主要模块，例如一个好的编辑器和
    Shell，这些工具有助于代码开发和测试。
- en: 'In this chapter, we''ll cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下主题：
- en: Installation and configuration instructions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和配置说明
- en: Program and program flow
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 程序和程序流程
- en: Basic data types in Python
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 中的基本数据类型
- en: Repeating statements with loops
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用循环重复语句
- en: Conditional statements
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 条件语句
- en: Encapsulating code with functions
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用函数封装代码
- en: Understanding scripts and modules
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解脚本和模块
- en: Python interpreter
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 解释器
- en: Read the following section, even if you already have access to a computer with
    Python installed. You might want to adjust things to have a working environment
    that conforms to the presentation in this book.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你的计算机上已经安装了 Python，仍然建议阅读以下部分。你可能需要对环境进行调整，以符合本书中的工作环境。
- en: 1.1 Installation and configuration instructions
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1.1 安装和配置说明
- en: Before diving into the subject of the book, you should have all the relevant
    tools installed on your computer. We give you some advice and recommend tools
    that you might want to use. We only describe public domain and free tools.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入研究本书的主题之前，你应该已经在计算机上安装了所有相关工具。我们提供一些建议，并推荐你可能希望使用的工具。我们只描述公共领域和免费的工具。
- en: 1.1.1 Installation
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.1.1 安装
- en: There are currently two major versions of Python; the *2.x* branch and the new *3.x* branch.
    There are language incompatibilities between these branches and you have to be
    aware of which one to use. This book is based on the *3.x* branch, considering
    the language is up to release *3.7*.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 目前有两个主要版本的 Python：*2.x* 分支和新的 *3.x* 分支。两个分支之间存在语言不兼容性，你需要知道该使用哪个版本。本书基于 *3.x*
    分支，考虑到语言已发布到 *3.7* 版本。
- en: 'For this book, you need to install the following:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中，你需要安装以下内容：
- en: 'The interpreter: Python *3.7* (or later)'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解释器：Python *3.7*（或更高版本）
- en: 'The modules for scientific computing: SciPy with NumPy'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于科学计算的模块：SciPy 与 NumPy
- en: 'The module for the graphical representation of mathematical results: matplotlib'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于数学结果图形表示的模块：matplotlib
- en: 'The shell: IPython'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Shell：IPython
- en: 'A Python-related editor: preferably, Spyder (see *Figure 1.1*).'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与 Python 相关的编辑器：最好使用 Spyder（见 *图 1.1*）。
- en: The installation of these is facilitated by the so-called distribution packages.
    We recommend that you use Anaconda.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这些工具的安装通过所谓的发行包来简化。我们建议你使用 Anaconda。
- en: 1.1.2 Anaconda
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.1.2 Anaconda
- en: Even if you have Python pre-installed on your computer, we recommend that you
    create your personal Python environment that allows you to work without the risk
    of accidentally affecting the software on which your computer's functionality
    might depend. With a virtual environment, such as Anaconda, you are free to change
    language versions and install packages without the unintended side effects.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你的计算机上已经预安装了 Python，我们仍然建议你创建个人的 Python 环境，这样你可以在不冒险影响计算机功能所依赖的软件的情况下进行工作。通过使用虚拟环境（例如
    Anaconda），你可以自由地更改语言版本并安装软件包，而不会产生意外的副作用。
- en: 'If the worst happens and you mess things up totally, just delete the Anaconda
    directory and start again. Running the Anaconda installer will install Python,
    a Python development environment and editor (Spyder), the shell (IPython), and
    the most important packages for numerical computations: SciPy, NumPy, and matplotlib.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果最糟糕的情况发生，并且你完全弄乱了，只需删除 Anaconda 目录并重新开始。运行 Anaconda 安装程序将安装 Python、Python
    开发环境和编辑器（Spyder）、shell（IPython）以及最重要的数值计算包：SciPy、NumPy 和 matplotlib。
- en: You can install additional packages with `conda install` within your virtual
    environment created by Anaconda (see also the official documentation*)*.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在 Anaconda 创建的虚拟环境中使用`conda install`安装额外的包（另见官方文档*）。
- en: 1.1.3 Spyder
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.1.3 Spyder
- en: 'The default screen of Spyder consists of an editor window on the left, a console
    window in the lower-right corner, which gives access to an IPython shell, and
    a help window in the upper-right corner, as shown in the following figure:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Spyder 的默认屏幕包括左侧的编辑器窗口，右下角的控制台窗口，它提供对 IPython shell 的访问，以及右上角的帮助窗口，如下图所示：
- en: '![](img/7839f66d-8ddc-4d40-b53f-501e4ec3ae9c.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7839f66d-8ddc-4d40-b53f-501e4ec3ae9c.png)'
- en: 'Figure 1.1: The default screen of Spyder'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1：Spyder 的默认屏幕
- en: 1.1.4 Configuration
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.1.4 配置
- en: 'Most Python codes will be collected in files. We recommend that you use the
    following header in all your Python files:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 Python 代码会保存在文件中。我们建议你在所有 Python 文件中使用以下头部：
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: With this, you make sure that all fundamental data types and functions used
    in this book for scientific computing purposes are imported. Without this step,
    most of the examples in the book would raise errors.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个，你可以确保本书中用于科学计算的所有基本数据类型和函数都已经导入。没有这个步骤，本书中的大多数示例都会抛出错误。
- en: Spyder gives syntax warnings and syntax error indicators. Warnings are marked
    by a yellow triangle; see *Figure 1.2*.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Spyder 会提供语法警告和语法错误指示。警告由黄色三角形标记；参见*图 1.2*。
- en: Syntax warnings indicate statements that are correct but that you are discouraged
    from using for some reason. The preceding statement, `from`, causes such a warning.
    We will discuss the reasons for this later in this book. In this particular case,
    we ignore the warning.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 语法警告表示语句是正确的，但由于某些原因，不建议使用它。前述语句`from`就会引发这样的警告。我们将在本书后面讨论这种警告的原因。在这种特定情况下，我们忽略此警告。
- en: '![](img/8ced60f7-2aab-4532-9fc9-2081297db711.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8ced60f7-2aab-4532-9fc9-2081297db711.png)'
- en: Figure 1.2: Warning triangles in Spyder
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2：Spyder 中的警告三角形
- en: Many editors, such as Spyder, provide the possibility to create a template for
    your files. Look for this feature and put the preceding header into a template.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 许多编辑器，如 Spyder，提供为你的文件创建模板的功能。查找此功能并将前述头部放入模板中。
- en: 1.1.5 Python shell
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.1.5 Python shell
- en: The Python shell is good, but not optimal, for interactive scripting. We therefore
    recommend using IPython instead [[25]](12bddbb5-edd0-46c6-8f7a-9475aaf01a9d.xhtml).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Python shell 很好，但对于交互式脚本编写来说并不最优。因此，我们建议使用 IPython [[25]](12bddbb5-edd0-46c6-8f7a-9475aaf01a9d.xhtml)。
- en: 'IPython can be started in different ways:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: IPython 可以通过不同的方式启动：
- en: In a terminal shell by running the following command: `ipython`
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在终端 shell 中运行以下命令：`ipython`
- en: 'By directly clicking on an icon called Jupyter QT Console:'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直接点击名为 Jupyter QT Console 的图标：
- en: '![](img/343292ea-b649-47e6-be9d-f81ce58f893d.jpeg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/343292ea-b649-47e6-be9d-f81ce58f893d.jpeg)'
- en: When working with Spyder, you should use an IPython console (see *Figure 1.1*).
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在使用 Spyder 时，应该使用 IPython 控制台（参见*图 1.1*）。
- en: 1.1.6 Executing scripts
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.1.6 执行脚本
- en: 'You often want to execute the contents of a file. Depending on the location
    of the file on your computer, it is necessary to navigate to the correct location
    before executing the contents of a file:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 你经常需要执行文件的内容。根据文件在计算机上的位置，执行文件内容之前，必须导航到正确的位置：
- en: Use the command `cd` in IPython in order to move to the directory where your
    file is located.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 IPython 中使用命令`cd`，以便切换到文件所在的目录。
- en: 'To execute the contents of a file named `myfile.py`, just run the following
    command in the IPython shell:'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要执行名为`myfile.py`的文件内容，只需在 IPython shell 中运行以下命令：
- en: '[PRE1]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 1.1.7 Getting help
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.1.7 获取帮助
- en: 'Here are some tips on how to use IPython:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些使用 IPython 的提示：
- en: To get help on an object, just type `?` after the object's name and then press
    the *Return* key.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要获取有关某个对象的帮助，只需在对象的名称后面键入`?`，然后按下*回车*键。
- en: Use the arrow keys to reuse the last executed commands.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用箭头键来*重复*上次执行的命令。
- en: You may use the *Tab* key for completion (that is, you write the first letter
    of a variable or method and IPython shows you a menu with all the possible completions).
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以使用*Tab*键进行补全（即你输入一个变量或方法的首字母，IPython 会展示一个包含所有可能补全项的菜单）。
- en: Use *Ctrl+D* to quit.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用*Ctrl+D*退出。
- en: Use IPython's magic functions. You can find a list and explanations by applying `%magic` on
    the command prompt.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 IPython 的魔法函数。你可以通过在命令提示符下输入 `%%magic` 来查看函数列表和说明。
- en: You can find out more about IPython in its online documentation.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 IPython 的在线文档中了解更多信息。
- en: 1.1.8 Jupyter – Python notebook
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.1.8 Jupyter – Python notebook
- en: The Jupyter notebook is a fantastic tool for demonstrating your work. Students
    might want to use it to make and document homework and exercises and teachers
    can prepare lectures with it, even slides and web pages.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Jupyter notebook 是一个非常棒的工具，用于展示你的工作。学生可能希望用它来制作和记录作业和练习，而老师则可以用它来准备讲座，甚至是幻灯片和网页。
- en: 'If you have installed Python via Anaconda, you already have everything for
    Jupyter in place. You can invoke the notebook by running the following command
    in the terminal window:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你通过 Anaconda 安装了 Python，你已经具备了 Jupyter 所需的一切。你可以通过在终端窗口中运行以下命令来启动 notebook：
- en: '[PRE2]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: A browser window will open and you can interact with Python through your web
    browser.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 一个浏览器窗口将会打开，你可以通过网页浏览器与 Python 进行交互。
- en: 1.2 Program and program flow
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1.2 程序与程序流程
- en: 'A program is a sequence of statements that are executed in top-down order.
    This linear execution order has some important exceptions:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 程序是一个按自上而下顺序执行的语句序列。这个线性执行顺序有一些重要的例外：
- en: There might be a conditional execution of alternative groups of statements (blocks),
    which we refer to as branching.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能会有条件执行替代语句组（代码块），我们称之为分支。
- en: There are blocks that are executed repetitively, which is called looping (see
    *Figure 1.3*).
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有些代码块会被重复执行，这叫做循环（见*图 1.3*）。
- en: There are function calls that are references to another piece of code, which
    is executed before the main program flow is resumed. A function call breaks the
    linear execution and pauses the execution of a program unit while it passes the
    control to another unit – a function. When this gets completed, its control is
    returned to the calling unit.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有一些函数调用，它们是指向另一个代码片段的引用，该代码片段在主程序流程恢复之前被执行。函数调用打断了线性执行，并暂停程序单元的执行，同时将控制权传递给另一个单元——一个函数。当该函数执行完成后，控制权会返回给调用单元。
- en: '![](img/1ed8f89f-6bda-4978-9130-fc7d3e866737.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1ed8f89f-6bda-4978-9130-fc7d3e866737.png)'
- en: 'Figure 1.3: Program flow'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.3：程序流程
- en: 'Python uses a special syntax to mark blocks of statements: a keyword, a colon,
    and an indented sequence of statements, which belong to the block (see *Figure
    1.4*).'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Python 使用特殊的语法来标记语句块：一个关键字，一个冒号，以及一个缩进的语句序列，这些语句属于该代码块（见*图 1.4*）。
- en: '![](img/81e339fa-269a-48a1-bcc8-e21e98312600.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/81e339fa-269a-48a1-bcc8-e21e98312600.png)'
- en: 'Figure 1.4: Block command'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.4：代码块命令
- en: 1.2.1 Comments
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.2.1 注释
- en: 'If a line in a program contains the symbol `#`, everything following on the
    same line is considered as a comment:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果程序中的一行包含符号 `#`，那么该行后面的内容会被视为注释：
- en: '[PRE3]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 1.2.2 Line joining
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.2.2 行连接
- en: A backslash `\` at the end of the line marks the next line as a continuation
    line, that is, *explicit line joining*. If the line ends before all the parentheses
    are closed, the following line will automatically be recognized as a continuation
    line, that is, *implicit line joining.*
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 行末的反斜杠 `\` 表示下一行是续行，即*显式行连接*。如果一行结束时所有括号没有闭合，下一行将自动被识别为续行，即*隐式行连接*。
- en: 1.3 Basic data types in Python
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1.3 Python 中的基本数据类型
- en: Let's go over the basic data types that you will encounter in Python.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看你在 Python 中会遇到的基本数据类型。
- en: 1.3.1 Numbers
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.1 数字
- en: 'A number may be an integer, a real number, or a complex number. The usual operations
    are as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 一个数字可以是整数、实数或复数。常见的运算如下：
- en: Addition and subtraction, `+` and `-`
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加法和减法，`+` 和 `-`
- en: Multiplication and division, `*` and `/`
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 乘法和除法，`*` 和 `/`
- en: Power, `**`
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 幂运算，`**`
- en: 'Here is an example:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个示例：
- en: '[PRE4]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The symbol `j` denotes the imaginary part of a complex number. It is a syntactic
    element and should not be confused with multiplication by a variable.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 符号 `j` 表示复数的虚部。它是一个语法元素，不应与变量的乘法混淆。
- en: 1.3.2 Strings
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.2 字符串
- en: 'Strings are sequences of characters, enclosed by single or double quotes:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串是由字符组成的序列，用单引号或双引号括起来：
- en: '[PRE5]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You can also use triple quotes for strings that have multiple lines:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用三引号来表示多行字符串：
- en: '[PRE6]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 1.3.3 Variables
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.3 变量
- en: 'A variable is a reference to an object. An object may have several references.
    You use the assignment operator = to assign a value to a variable:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 变量是对对象的引用。一个对象可以有多个引用。你使用赋值运算符`=`将值赋给一个变量：
- en: '[PRE7]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The value of a variable can be displayed by the `print` function:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过`print`函数显示变量的值：
- en: '[PRE8]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 1.3.4 Lists
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.4 列表
- en: 'Lists are a very useful construction and one of the basic types in Python.
    A Python list is an ordered list of objects enclosed by square brackets. You can
    access the elements of a list using zero-based indexes inside square brackets:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 列表是非常有用的结构，是Python的基本类型之一。Python中的列表是由方括号包围的有序对象列表。你可以使用基于零的索引通过方括号访问列表的元素：
- en: '[PRE9]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The indexing of the elements starts at zero. You can put objects of any type
    inside a list, even other lists. Some basic list functions are as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 元素的索引从零开始。你可以将任何类型的对象放入列表中，甚至是其他列表。一些基本的列表函数如下：
- en: '`list(range(n))}` creates a list with `n` elements, starting with zero:'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list(range(n))}`创建一个包含`n`个元素的列表，元素从零开始：'
- en: '[PRE10]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '`len` gives the length of a list:'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`len`返回列表的长度：'
- en: '[PRE11]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '`append` is used to append an element to a list:'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`append`用于向列表添加元素：'
- en: '[PRE12]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Operations on lists
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 列表操作
- en: 'The operator `+` concatenates two lists:'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运算符`+`用于连接两个列表：
- en: '[PRE13]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'As you might expect, multiplying a list by an integer concatenates the list
    with itself several times:'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正如你所预期的，使用整数乘以列表会将该列表与自身连接多次：
- en: '`n*L` is equivalent to making *n* additions:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`n*L`等同于进行*n*次添加操作：'
- en: '[PRE14]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 1.3.6 Boolean expressions
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.6 布尔表达式
- en: 'A Boolean expression is an expression that has the value `True` or `False`.
    Some common operators that yield conditional expressions are as follow:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔表达式是一个值为`True`或`False`的表达式。一些常见的返回条件表达式的运算符如下：
- en: Equal: `==`
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 相等：`==`
- en: Not equal: `!=`
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不等于：`!=`
- en: Strictly less, less  or equal: `<`, `<=`
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 严格小于、小于或等于：`<`、`<=`
- en: Strictly greater, greater or equal: `>`, `>=`
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 严格大于、大于或等于：`>`、`>=`
- en: 'You combine different Boolean values with `or` and `and`. The keyword `not` gives
    the logical negation of the expression that follows. Comparisons can be chained
    so that, for example, `x < y < z` is equivalent to `x < y and y < z`. The difference
    is that `y` is only evaluated once in the first example. In both cases, `z` is
    not evaluated at all when the first condition, `x < y`, evaluates to `False`:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`or`和`and`将不同的布尔值组合在一起。关键字`not`对其后的表达式进行逻辑取反。比较可以链式连接，例如，`x < y < z`等同于`x
    < y and y < z`。不同之处在于，第一个例子中`y`只会被计算一次。在这两种情况中，当第一个条件`x < y`为`False`时，`z`根本不会被计算：
- en: '[PRE15]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The binary operators `<`, `>`, `<=`, `>=`, `!=`, and `==` have a higher precedence
    than the unary operator, `not`. The operators `and` and `or` have the lowest precedence.
    Operators with higher precedence rules are evaluated before those with lower precedence
    rules.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 二元运算符`<`、`>`、`<=`、`>=`、`!=`和`==`的优先级高于一元运算符`not`。运算符`and`和`or`的优先级最低。优先级高的运算符会在优先级低的运算符之前被计算。
- en: 1.4 Repeating statements with loops
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1.4 使用循环重复语句
- en: 'Loops are used to repetitively execute a sequence of statements while changing
    a variable from iteration to iteration. This variable is called the index variable.
    It is successively assigned to the elements of a list:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 循环用于重复执行一系列语句，同时在每次迭代时改变一个变量的值。这个变量被称为索引变量。它依次被赋值为列表的元素：
- en: '[PRE16]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The part to be repeated in the `for` loop has to be properly indented:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`for`循环中需要重复的部分必须正确缩进：'
- en: '[PRE17]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 1.4.1 Repeating a task
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.4.1 重复任务
- en: 'One typical use of a `for` loop is to repeat a certain task a fixed number
    of times:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`for`循环的一个典型用法是重复执行某个任务固定次数：'
- en: '[PRE18]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 1.4.2 break and else
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.4.2 break 和 else
- en: 'The `for` statement has two important keywords: `break` and `else`. The keyword
    `break` quits the `for` loop even if the list we are iterating is not exhausted:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`for`语句有两个重要的关键字：`break`和`else`。关键字`break`可以在迭代列表未结束时退出`for`循环：'
- en: '[PRE19]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The finalizing `else` checks whether the `for` loop was broken with the `break` keyword.
    If it was not broken, the block following the `else` keyword is executed:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的`else`检查`for`循环是否通过`break`关键字被中断。如果没有被中断，那么`else`后面的代码块会被执行：
- en: '[PRE20]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 1.5 Conditional statements
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1.5 条件语句
- en: This section covers how to use conditions for branching, breaking, or otherwise
    controlling your code.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 本节内容介绍如何使用条件语句进行分支、跳出或以其他方式控制代码。
- en: 'A conditional statement delimits a block that will be executed if the condition
    is true. An optional block starting with the keyword `else` will be executed if
    the condition is not fulfilled (see* Figure 1.4*). We demonstrate this by printing,
    ![](img/a3b7b1bd-67b2-41b9-a204-e4289a6af25a.png), the absolute value of ![](img/17c7560e-295e-4113-a19b-3d1e2d4a9d3a.png):'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 条件语句定义了一个代码块，如果条件为真则执行。一个可选的以关键字`else`开始的代码块将在条件未满足时执行（见*图1.4*）。我们通过打印来演示这一点，![](img/a3b7b1bd-67b2-41b9-a204-e4289a6af25a.png)，即![](img/17c7560e-295e-4113-a19b-3d1e2d4a9d3a.png)的绝对值：
- en: '![](img/71821b53-43f9-4d55-add5-947474c3b35e.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](img/71821b53-43f9-4d55-add5-947474c3b35e.png)'
- en: 'The Python equivalent is as follows:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: Python等效代码如下：
- en: '[PRE21]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Any object can be tested for the truth value, for use in an `if` or `while` statement.
    The rules for how the truth values are obtained are explained in Section 2.3.2, *Boolean
    casting**.*
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 任何对象都可以测试其布尔值，用于`if`或`while`语句。如何获得布尔值的规则在第2.3.2节中有说明，*布尔转换**。*
- en: 1.6 Encapsulating code with functions
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1.6 使用函数封装代码
- en: 'Functions are useful for gathering similar pieces of code in one place. Consider
    the following mathematical function:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 函数对于将相似的代码片段聚集在一起非常有用。考虑以下的数学函数：
- en: '![](img/0da88fa6-7f50-4fe1-92b6-52e2c1377527.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0da88fa6-7f50-4fe1-92b6-52e2c1377527.png)'
- en: 'The Python equivalent is as follows:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: Python 等效代码如下：
- en: '[PRE22]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'In *Figure 1.5,* the elements of a function block are explained:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图1.5*中，函数块的各个元素已被解释：
- en: The keyword `def` tells Python we are defining a function.
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关键字`def`告诉Python我们正在定义一个函数。
- en: '`f` is the name of the function.'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`f`是函数的名称。'
- en: '`x` is the argument or input of the function.'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x`是函数的参数或输入。'
- en: What is after `return` is called the output of the function.
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return`后面的部分被称为函数的输出。'
- en: '![](img/c649bf58-2c2f-4e89-a109-7a909878de5e.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c649bf58-2c2f-4e89-a109-7a909878de5e.png)'
- en: 'Figure 1.5: Anatomy of a function'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.5：函数的结构
- en: 'Once the function is defined, it can be called using the following code:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦函数定义完成，就可以使用以下代码调用它：
- en: '[PRE23]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 1.7 Understanding scripts and modules
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1.7 理解脚本和模块
- en: 'A collection of statements in a file (which usually has a `py` extension) is called a
    script. Suppose we put the contents of the following code into a file named `smartscript.py`:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 一组语句保存在一个文件中（通常该文件具有`py`扩展名），称为脚本。假设我们将以下代码的内容放入名为`smartscript.py`的文件中：
- en: '[PRE24]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'In a Python or IPython shell, such a script can then be executed with the `exec` command
    after opening and reading the file. Written as a one-liner, it reads as follows:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python或IPython shell中，打开并读取文件后，可以使用`exec`命令执行这样的脚本。写成一行代码如下：
- en: '[PRE25]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The IPython shell provides the magic command `%run` as a handy alternative
    way to execute a script:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: IPython shell提供了魔法命令`%run`，作为执行脚本的便捷替代方法：
- en: '[PRE26]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 1.7.1 Simple modules – collecting functions
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.7.1 简单模块 - 收集函数
- en: 'Often, you collect functions in a script. This creates a module with additional
    Python functionality. To demonstrate this, we create a module by collecting functions
    in a single file, for example, `smartfunctions.py`:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，你会在脚本中收集函数。这将创建一个具有额外Python功能的模块。为了演示这一点，我们通过将函数收集到一个文件中创建一个模块，例如，`smartfunctions.py`：
- en: '[PRE27]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: These functions can now be used by any external script or directly in the IPython
    environment.
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些函数现在可以被任何外部脚本或直接在IPython环境中使用。
- en: Functions within the module can depend on each other._
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块内的函数可以相互依赖。
- en: Grouping functions with a common theme or purpose gives modules that can be
    shared and used by others.
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将具有共同主题或目的的函数组合在一起，能够生成可共享和供他人使用的模块。
- en: Again, the command `exec(open('smartfunctions.py').read())` makes these functions
    available to your IPython shell (note that there is also the IPython magic function, `run`).
    In Python terminology, you say that they are put into the actual namespace.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 再次说明，命令`exec(open('smartfunctions.py').read())`使这些函数可以在你的IPython环境中使用（注意，IPython还提供了魔法命令`run`）。在Python术语中，你可以说这些函数被放入了实际的命名空间中。
- en: 1.7.2 Using modules and namespaces
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.7.2 使用模块和命名空间
- en: 'Alternatively, the modules can be imported by the command `import`. This creates a
    namespace named after the filename*.* The command `from` puts the functions into
    the general namespace without creating a separate namespace:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，也可以通过命令`import`导入模块。这将创建一个以文件名命名的命名空间*.*。命令`from`将函数导入到全局命名空间，而不创建单独的命名空间：
- en: '[PRE28]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Import the commands `import` and `from`. Import the functions only once into
    the respective namespace. Changing the functions after the import has no effect
    on the current Python session.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 导入命令`import`和`from`。仅将函数导入到相应的命名空间中。导入后更改函数对当前的 Python 会话没有影响。
- en: 1.8 Python interpreter
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1.8 Python 解释器
- en: 'The Python interpreter executes the following steps:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: Python 解释器执行以下步骤：
- en: First, it checks the syntax.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，它检查语法。
- en: Then it executes the code line by line.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，它逐行执行代码。
- en: 'The code inside a function or class declaration is *not* executed, but its
    syntax is checked:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 函数或类声明中的代码*不会*被执行，但其语法会被检查：
- en: '[PRE29]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: You can run the preceding program because there are no syntactical errors. You
    get an error only when you call the function `f`.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以运行前面的程序，因为没有语法错误。只有在调用函数`f`时才会出现错误。
- en: 'In that case, we speak about a *runtime error*:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们说的是*运行时错误*：
- en: '[PRE30]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Summary
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we briefly addressed the main language elements of Python without
    going into detail. You should now be able to start playing with small pieces of
    code and test different program constructs. All this is intended as an appetizer
    for the chapters to follows, where we will provide you with the details, examples,
    exercises, and more background information.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们简要介绍了 Python 的主要语言元素，而没有深入讨论。你现在应该能够开始玩一些小代码片段并测试不同的程序构造。所有这些都是为接下来的章节做的预热，我们将在那里为你提供细节、示例、练习以及更多的背景信息。
