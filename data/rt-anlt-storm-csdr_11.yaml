- en: Chapter 11. Distributed Cache and CEP with Storm
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章 分布式缓存和CEP与Storm
- en: In this chapter, we will learn about the need for distributed caching in conjunction
    with Storm and the integration of widely used options with Storm. We will also
    touch upon the **Complex Event Processing** (**CEP**) engines in collaboration
    with Storm.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习与Storm结合使用分布式缓存的需求，以及将广泛使用的选项与Storm集成。我们还将涉及与Storm合作的**复杂事件处理**（CEP）引擎。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: The need for distributed caches in the Storm framework
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Storm框架中分布式缓存的需求
- en: Introduction to memcache
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: memcache简介
- en: Building a topology with caches
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建具有缓存的拓扑
- en: Introduction to CEP and Esper
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CEP和Esper简介
- en: At the end of this chapter, you should be able to apply CEP and cache in conjunction
    with Storm to solve real-time use cases.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的结尾，您应该能够将CEP和缓存与Storm结合起来，以解决实时使用案例。
- en: The need for distributed caching in Storm
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Storm中分布式缓存的需求
- en: 'Now that we have explored Storm enough to understand all its strengths, let''s
    touch on one of its biggest weaknesses: the lack of a shared cache, a common store
    in memory that all tasks running across the workers on various nodes in the Storm
    cluster can access and write to.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经足够了解Storm的所有优势，让我们谈谈它最大的弱点之一：缺乏共享缓存，即所有在Storm集群的各个节点上运行的任务都可以访问和写入的共同内存存储。
- en: 'The following figure illustrates a three node Storm cluster where we have two
    workers running on each of the supervisor nodes:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 下图说明了一个三节点的Storm集群，其中每个监督节点上都有两个运行的worker：
- en: '![The need for distributed caching in Storm](img/00074.jpeg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![Storm中分布式缓存的需求](img/00074.jpeg)'
- en: 'As depicted in the preceding figure, each worker has its own JVM where the
    data can be stored and cached. However, what we are missing here is a layer of
    cache that shares components within the workers on a supervisor as well as across
    the supervisors. The following figure depicts the need for what we are referring
    to:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如前图所示，每个worker都有自己的JVM，数据可以存储和缓存。然而，我们缺少的是一个缓存层，它可以在监督者的worker之间共享组件，也可以跨监督者之间共享。下图描述了我们所指的需求：
- en: '![The need for distributed caching in Storm](img/00075.jpeg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![Storm中分布式缓存的需求](img/00075.jpeg)'
- en: 'The preceding figure depicts the need for a shared caching layer where common
    data can be placed, which is referable from all nodes. These are very valid use
    cases because in production, we encounter scenarios such as the following:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图描述了需要一个共享缓存层的情况，可以在所有节点中引用共同的数据。这些都是非常有效的使用案例，因为在生产中，我们会遇到以下情况：
- en: We have a lot of read-only reference dimensional data, which we would want in
    one place instead of having it replicated and updated at each supervisor level
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们有很多只读的参考维度数据，我们希望将其放在一个地方，而不是在每个监督者级别进行复制和更新
- en: Sometimes, we have transactional data in certain use cases, which are to be
    read and updated by all the workers; for example, when counting certain events,
    the count has to be kept in a common location
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有时，在某些使用案例中，我们有事务性数据，需要所有worker读取和更新；例如，当计算某些事件时，计数必须保存在一个共同的位置
- en: This is where the layer of common shared cache that is accessible across all
    supervisor nodes comes in.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是共享缓存层的作用，可以在所有监督节点上访问。
- en: Introduction to memcached
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: memcached简介
- en: Memcached is a very simple in-memory key value store; we can assume it to be
    an in-memory store for a hash map. This can be used in conjunction with Storm
    supervisors to serve as a common memory storage, which can be accessed for read/write
    operations by all the Storm workers on various nodes in the Storm cluster.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Memcached是一个非常简单的内存键值存储；我们可以将其视为哈希映射的内存存储。它可以与Storm监督者结合使用，作为一个共同的内存存储，可以被Storm集群中各个节点上的所有Storm
    worker进行读写操作。
- en: 'Memcached has the following components:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Memcached有以下组件：
- en: The memcached server
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: memcached服务器
- en: The memcache client
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: memcache客户端
- en: The hashing algorithm (client-based implementation)
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 哈希算法（基于客户端的实现）
- en: The server algorithm for data retention
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据保留的服务器算法
- en: Memcached uses **Least Recently Used** (**LRU**) to discard the elements from
    the cache. This means that the items that have not been referred since the longest
    time are the first ones to be removed from the cache. These items are said to
    be expired from the cache, and if they are referred after expiry, they are reloaded
    from a stable storage.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Memcached使用**最近最少使用**（LRU）算法来丢弃缓存中的元素。这意味着自最长时间以来未被引用的项目首先从缓存中移除。这些项目被认为已从缓存中过期，如果它们在过期后被引用，它们将从稳定存储重新加载。
- en: 'The following is the flow of how entries are loaded and retrieved from or through
    a cache:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是从缓存中加载和检索条目的流程：
- en: '![Introduction to memcached](img/00076.jpeg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![memcached简介](img/00076.jpeg)'
- en: 'The preceding figure depicts the scenarios of cache hit and cache miss, where
    certain items expire as per the LRU algorithm. The scenarios in the preceding
    figure are as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图描述了缓存命中和未命中的情况，其中某些项目根据LRU算法过期。前图中的情况如下：
- en: When the cache app location starts, it's loaded with the data from the stable
    storage, in our case, from the database
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当缓存应用程序启动时，它会从稳定存储（在我们的案例中是数据库）中加载数据。
- en: 'There are two scenarios that can happen in a situation where we request the
    data from the cache:'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在请求从缓存中获取数据的情况下，可能会发生两种情况：
- en: '**Cache hit**: This is where the data we request exists on the cache server
    and in this case, the request is served from the cache'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缓存命中**：这是我们请求的数据存在于缓存服务器上的情况，在这种情况下，请求将从缓存中提供'
- en: '**Cache miss**: This is where the data requested doesn''t exist in the cache
    server, and in this case, the data is fetched from the database into the cache
    and then the request is serviced from the cache'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缓存未命中**：这是请求的数据在缓存服务器中不存在的情况，在这种情况下，数据从数据库中获取到缓存中，然后从缓存中提供请求'
- en: Now we understand how the cache functions and what the need for it in the context
    of solutions for Storm is.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了缓存的功能以及在Storm解决方案背景下的需求。
- en: Setting up memcache
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置memcache
- en: 'The following are the steps that need to be executed and will be required for
    the installation of memcache:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是需要执行并将需要安装memcache的步骤：
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following is the code snippet to connect to the memcache client and functions.
    It retrieves the data from the cache:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是连接到memcache客户端和函数的代码片段。它从缓存中检索数据：
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Once you encode the preceding snippet, you will have built the mechanism to
    create the cache client, load data into the cache, and retrieve values from it.
    So any Storm bolt that needs access to the cache can use the common layer created
    by memcache through interactions with the client.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦编码了前面的代码片段，您将建立创建缓存客户端、将数据加载到缓存中并从中检索值的机制。因此，任何需要访问缓存的Storm bolt都可以使用通过与客户端交互创建的公共层。
- en: Building a topology with a cache
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用缓存构建拓扑
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Introduction to the complex event processing engine
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复杂事件处理引擎简介
- en: There are two terms that are generally used in conjunction; they are **Complex
    Event Processing** (**CEP**) and **Event Stream Processing** (**ESP**).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 通常与之一起使用的有两个术语，它们是**复杂事件处理**（**CEP**）和**事件流处理**（**ESP**）。
- en: Well, in theory, these are part of a technical paradigm that allow us to build
    applications with dramatic, real-time analytics over streaming data. They let
    us process incoming events at a very fast rate and execute SQL-like queries on
    top of the stream of events to generate real-time histograms. We can assume that
    CEP is an inversion of traditional databases. In the case of traditional DBMS
    and RDBMS, we have data stored, and then we run SQL queries over them to arrive
    at results, while in the case of CEPs, we have the queries predefined or stored
    and we run the data through them. We can envision this with an example; let's
    say I am running a department store and I would like to know the highest selling
    item in the last one hour. So if you look here, the query we are about to execute
    is pretty fixed in nature but the input data isn't constant—it changes at each
    sale transaction. Similarly, let's say I run a stock holding company and would
    like to know the top 10 performers over the last 2 minutes every 5 seconds.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，在理论上，这些是技术范式的一部分，使我们能够构建具有戏剧性的实时分析的应用程序。它们让我们以非常快的速度处理传入事件，并在事件流之上执行类似SQL的查询以生成实时直方图。我们可以假设CEP是传统数据库的倒置。在传统的DBMS和RDBMS的情况下，我们有存储的数据，然后我们对它们运行SQL查询以得出结果，而在CEP的情况下，我们有预定义或存储的查询，然后我们通过它们运行数据。我们可以通过一个例子来设想这一点；比方说我经营一个百货商店，我想知道过去一小时内销量最高的商品。所以如果你看这里，我们即将执行的查询在性质上是相当固定的，但输入数据并不是恒定的——它在每次销售交易时都会改变。同样，比方说我经营一个股票持有公司，想知道过去2分钟内每5秒钟的前10名表现者。
- en: '![Introduction to the complex event processing engine](img/00077.jpeg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![复杂事件处理引擎简介](img/00077.jpeg)'
- en: 'The preceding figure depicts the stock ticker use case where we have a sliding
    window of 2 minutes and the stock ticker is sliding every 5 seconds. We have many
    practical use cases for this nowadays, such as:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图示了股票行情使用案例，我们有一个2分钟的滑动窗口，股票行情每5秒钟滑动一次。现在我们有许多实际的用例，比如：
- en: Fraud detection patterns against **Point Of Sales** (**POS**) transactions
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 针对**销售点**（**POS**）交易的欺诈检测模式
- en: Top *N* in any segment
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在任何段中的前 *N* 个
- en: The application of deep learning patterns to stream data from any source
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将深度学习模式应用于来自任何来源的流数据
- en: 'Now, having understood CEP and its need at a high level, let''s touch upon
    its high-level components:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，了解了CEP及其高层次需求后，让我们简要介绍其高层次组件：
- en: The operand in every CEP is `Data` of `Event`; it's essentially an event-driven
    system
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在每个CEP中的操作数是`事件`的`数据`；它本质上是一个事件驱动的系统
- en: '**Event processing language**: This is the tool that facilitates the framing
    of queries to be executed on the data'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事件处理语言**：这是一个工具，用于便利地构建要在数据上执行的查询'
- en: '**Listeners**: These are the components that actually execute the query and
    perform the action on the arrival of the event into the system'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监听器**：这些是实际执行查询并在事件到达系统时执行操作的组件'
- en: Esper
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Esper
- en: 'Esper is one of the leading CEP engines that are available under open source—GPL
    and Enterprise License. The package can be downloaded from [http://www.espertech.com/download/](http://www.espertech.com/download/),
    and if you are attempting to execute a Maven-based Esper project, the dependency
    can be built as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Esper是领先的CEP引擎之一，可在开源（GPL和企业许可证）下使用。该软件包可从[http://www.espertech.com/download/](http://www.espertech.com/download/)下载，如果您尝试执行基于Maven的Esper项目，依赖项可以构建如下：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The next obvious question could be why we want to use Esper-CEP in conjunction
    with Storm. Well, Esper has some unique capabilities that work well with Storm
    and let the EQL facility leverage the results drawn over Storm. The following
    are complementing features that lead to this choice:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个显而易见的问题可能是为什么我们想要将Esper-CEP与Storm一起使用。嗯，Esper具有一些独特的能力，与Storm配合得很好，并让EQL功能利用在Storm上得出的结果。以下是导致这种选择的互补功能：
- en: '**Throughput**: Complementing the capability of Storm, Esper also has a very
    high throughput and can process from 1K to 100K messages per second.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**吞吐量**：作为Storm能力的补充，Esper也具有非常高的吞吐量，可以处理每秒从1K到100K条消息。'
- en: '**Latency**: Esper has the ability to perform EQLs and actions based on results
    of Esper at a very low latency rate; in most cases, this is the order of milliseconds.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**延迟**：Esper有能力以非常低的延迟率执行EQL和基于Esper结果的操作；在大多数情况下，这是毫秒级的顺序。'
- en: '**Computations**: These refer to the ability to perform functions such as pattern
    detection, complex queries based on aggregates, and correlation over time. These
    slice windows of streaming data.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**计算**：这指的是执行功能的能力，例如基于聚合的模式检测、复杂查询和随时间的相关性。这些切片窗口的流数据。'
- en: Getting started with Esper
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始使用Esper
- en: '[PRE6]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Once we have the value object in place, the next step is to instantiate the
    Esper engine and listener and wire in all the pieces together:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了值对象，下一步就是实例化Esper引擎和监听器，并将所有部分连接在一起：
- en: '[PRE8]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: CEPListener is the implementation of `updateListener` (which listens for the
    arrival of the event), `newData` has the stream of one or more new arriving events,
    and `oldData` has the previous state of the stream, that is, before the arrival
    of the current trigger to the listener.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: CEPListener是`updateListener`的实现（用于监听事件的到达），`newData`具有一个或多个新到达事件的流，`oldData`具有流的先前状态，即监听器到达当前触发器之前的状态。
- en: In the main method, we can load the Esper configuration or, as shown in our
    preceding case, create a default configuration. Then, we create an Esper runtime
    engine instance and bind the EQL query to it.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在主方法中，我们可以加载Esper配置，或者如我们前面的案例所示，创建一个默认配置。然后，我们创建一个Esper运行时引擎实例，并将EQL查询绑定到它。
- en: If you look at the `cepStatement.addListener(new CEPListener())` statement in
    the preceding code, you will see that we are also binding the listener to the
    statement, thus wiring all the pieces together.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看前面代码中的`cepStatement.addListener(new CEPListener())`语句，你会发现我们还将监听器绑定到了语句，从而将所有部分连接在一起。
- en: Integrating Esper with Storm
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将Esper与Storm集成
- en: The following figure depicts how we plan to use Esper in conjunction with one
    of the topologies we created earlier in [Chapter 6](part0045_split_000.html#page
    "Chapter 6. Adding NoSQL Persistence to Storm"), *Adding NoSQL Persistence to
    Storm*. The integration of Storm with Esper gives the developer the power to execute
    SQL-like queries on top of the stream of events being processed by Storm.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了我们计划如何将Esper与我们在[第6章](part0045_split_000.html#page "第6章。向Storm添加NoSQL持久性")中早期创建的拓扑之一*向Storm添加NoSQL持久性*结合使用。Storm与Esper的集成使开发人员能够在Storm处理的事件流上执行类似SQL的查询。
- en: '![Integrating Esper with Storm](img/00079.jpeg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![将Esper与Storm集成](img/00079.jpeg)'
- en: '[PRE9]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The next step is to conjugate the Esper bolt into the topology. This can be
    easily downloaded as a bundle from [https://github.com/tomdz/storm-esper](https://github.com/tomdz/storm-esper),
    and it can be quickly bundled into the topology using the following code:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是将Esper bolt结合到拓扑中。这可以从[https://github.com/tomdz/storm-esper](https://github.com/tomdz/storm-esper)轻松下载为捆绑包，并且可以使用以下代码快速捆绑到拓扑中：
- en: '[PRE11]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Here is what the output would be like:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![Integrating Esper with Storm](img/00080.jpeg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![将Esper与Storm集成](img/00080.jpeg)'
- en: 'The Esper query in the preceding figure executes on a stream of incoming data;
    here is its breakdown and explanation:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 前面图中的Esper查询在传入数据流上执行；以下是其分解和解释：
- en: '[PRE12]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We are selecting the following fields from the incoming tuples, such as `Call_Id`,
    `Call_type`, and `count`:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从传入的元组中选择以下字段，如`Call_Id`，`Call_type`和`count`：
- en: '[PRE13]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The named window out of which we are operating is `CDR.WIN`. The batch size
    is 5 minutes, which means that with the arrival of every event or tuple, we are
    looking back into time for 5 minutes and executing the query over data that has
    arrived in the last 5 minutes. The results are grouped by the event type and are
    sorted in reverse order.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在操作的命名窗口是`CDR.WIN`。批处理大小为5分钟，这意味着随着每个事件或元组的到达，我们会回顾过去5分钟的时间，并对过去5分钟内到达的数据执行查询。结果按事件类型分组，并按相反顺序排序。
- en: Quiz time
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测验时间
- en: 'Q.1\. State whether the following statements are true or false:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 问题1.判断以下陈述是真还是假：
- en: Cache is a read-only memory space.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 缓存是只读内存空间。
- en: Data once added in cache remains there forever.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦数据添加到缓存中，就会永远保留在那里。
- en: CEP lets SQL-like queries be implemented over streaming data.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CEP允许在流数据上实现类似SQL的查询。
- en: Esper is based on event-driven architecture.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Esper基于事件驱动架构。
- en: 'Q.2\. Fill in the blanks:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 问题2.填空：
- en: _______________ is the algorithm for memcache.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: _______________是memcache的算法。
- en: When data is not present in the cache, it's called ______________.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当缓存中没有数据时，称为_______________。
- en: _______________ is the component of Esper that triggers the **Endeca Query Language**
    (**EQL**) execution.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: _______________是Esper的组件，触发**Endeca查询语言**（**EQL**）的执行。
- en: _______________ is generally used for the time series windowing function data.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: _______________通常用于时间序列窗口函数数据。
- en: Q.3\. Create an end-to-end topology using Esper to display the top 10 speeding
    devices on a said freeway using Storm and Esper in conjunction.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 问题3.使用Esper创建一个端到端拓扑，以显示在某条高速公路上前10名超速设备的Storm和Esper的结合使用。
- en: Summary
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we covered the concept of cache in conjunction with Storm and
    the utility and application of the solutions developer with cache. We learned
    about memcache as a caching system.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了与Storm结合使用缓存的概念，以及开发人员使用缓存的实用性和应用。我们了解了memcache作为缓存系统。
- en: In the later part of the chapter, we explored Esper as a complex event processing
    system and understood its integration with Storm topologies.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的后部分，我们探讨了Esper作为复杂事件处理系统，并了解了它与Storm拓扑的集成。
