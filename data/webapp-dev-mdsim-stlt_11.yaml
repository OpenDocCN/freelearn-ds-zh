- en: '11'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '11'
- en: Deploying and Managing Complex Libraries on Streamlit Share
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Streamlit Share上部署和管理复杂库
- en: Let’s continue our exploration of deployment on Streamlit Share, a service provided
    by the Streamlit framework that allows users to deploy their web applications,
    implemented with Streamlit, to the cloud with just a few clicks. This time, we
    have to pack up the *Covid-19 Detection Tool* app and try to deploy it. Many heavy
    libraries will be involved here, so this time, the task is a little bit more complex.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续探索在Streamlit Share上的部署，Streamlit框架提供的一个服务，允许用户通过简单的几次点击将他们使用Streamlit实现的网页应用程序部署到云端。这一次，我们需要打包*Covid-19检测工具*应用并尝试部署它。这里将涉及许多大型库，因此任务稍微复杂一些。
- en: When we deal with heavy files, the deployment task becomes more difficult because
    GitHub has some limitations regarding file size; in fact, it is not possible to
    directly upload files with a size over 25 MB. In the case of our *Covid-19 Detection
    Tool* app, unfortunately, the file of the AI model is over 25 MB. Files to be
    uploaded on GitHub can’t be any bigger than this, at least at the time of writing
    this book.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们处理大型文件时，部署任务变得更加困难，因为GitHub在文件大小上有一些限制；实际上，不能直接上传大于25MB的文件。在我们的*Covid-19检测工具*应用中，不幸的是，AI模型的文件大小超过了25MB。上传到GitHub的文件不能大于这个大小，至少在撰写本书时是这样的。
- en: There are some techniques we can use to bypass this limit; I’ll show you a rather
    smart way to do this in this chapter.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用一些技巧来绕过这个限制；在本章中，我将展示一个相当聪明的方法来做到这一点。
- en: 'In this chapter, we’ll cover the following main topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主要主题：
- en: Consolidating cloud deployment skills
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 巩固云部署技能
- en: Avoiding bad behavior
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免不良行为
- en: Managing difficult libraries
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理困难的库
- en: Deploying the app on Streamlit Cloud
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Streamlit Cloud上部署应用
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'In this chapter, we will use the following libraries, packages, and tools:'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用以下库、包和工具：
- en: Sublime Text
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sublime Text
- en: Python 3
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 3
- en: '`pipenv`'
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pipenv`'
- en: Streamlit
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Streamlit
- en: GitHub
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub
- en: Streamlit Cloud
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Streamlit Cloud
- en: 'The code for this chapter can be found in this book’s GitHub repository: [https://github.com/PacktPublishing/Web-App-Development-Made-Simple-with-Streamlit/tree/8e8d3b20f3de84b5ce02bc2352f86ad1c8018a4a/Chapter11](https://github.com/PacktPublishing/Web-App-Development-Made-Simple-with-Streamlit/tree/8e8d3b20f3de84b5ce02bc2352f86ad1c8018a4a/Chapter11)'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章的代码可以在本书的GitHub仓库中找到：[https://github.com/PacktPublishing/Web-App-Development-Made-Simple-with-Streamlit/tree/8e8d3b20f3de84b5ce02bc2352f86ad1c8018a4a/Chapter11](https://github.com/PacktPublishing/Web-App-Development-Made-Simple-with-Streamlit/tree/8e8d3b20f3de84b5ce02bc2352f86ad1c8018a4a/Chapter11)
- en: Consolidating cloud deployment skills
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 巩固云部署技能
- en: Considering that we are at [*Chapter 11*](B21147_11.xhtml#_idTextAnchor116)
    of this book, we should be aware of the fact that implementing a web application
    is only one part of the process and that the process ends only when the web app
    is deployed and shared.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到我们已经进入本书的[*第11章*](B21147_11.xhtml#_idTextAnchor116)，我们应该意识到，实施一个网页应用程序只是过程的一部分，过程直到网页应用程序被部署和共享后才算结束。
- en: 'We already understand the importance of web application deployment as we covered
    this when we created the NLP web application in the first part of this book, as
    well as because it’s one of the first things we see when we land on Streamlit’s
    website:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经理解了网页应用程序部署的重要性，因为我们在本书的第一部分创建NLP网页应用程序时已经涉及过这个话题，而且因为它是我们在访问Streamlit网站时看到的第一个内容之一：
- en: '![Figure 11.1: Streamlit’s slogan about app sharing](img/B21147_11_01.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![图11.1：Streamlit关于应用程序共享的标语](img/B21147_11_01.jpg)'
- en: 'Figure 11.1: Streamlit’s slogan about app sharing'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.1：Streamlit关于应用程序共享的标语
- en: 'When we click on the **Cloud** voice of the main menu, we are redirected to
    a page containing a quick video about the deployment and an important declaration:
    **Deploy, manage, and share your apps with the world, directly from Streamlit
    — all** **for free**:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们点击主菜单中的**Cloud**语音时，我们会被重定向到一个页面，页面包含一个关于部署的快速视频和一条重要声明：**直接从Streamlit部署、管理并分享你的应用程序，与世界分享——全部**
    **免费**：
- en: '![Figure 11.2: Streamlit Cloud](img/B21147_11_02.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![图11.2：Streamlit Cloud](img/B21147_11_02.jpg)'
- en: 'Figure 11.2: Streamlit Cloud'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.2：Streamlit Cloud
- en: The most important message here is *share your apps with the world*. A web application
    is something that lives on the web – that’s its real essence.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这里最重要的信息是*与世界分享你的应用程序*。网页应用程序是一种存在于网络上的东西——这才是它的真正本质。
- en: 'When we deployed the NLP application, we adopted quite a smooth process:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们部署NLP应用程序时，我们采用了相当顺畅的流程：
- en: We created a requirements file.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们创建了一个需求文件。
- en: We hosted the web application on GitHub.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将Web应用程序托管在GitHub上。
- en: We signed into Streamlit Cloud.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已登录Streamlit Cloud。
- en: We shared the web application through a Streamlit Cloud/GitHub connection.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们通过Streamlit Cloud/GitHub连接共享了Web应用程序。
- en: 'The procedure will be the same for our *Covid-19 Detection Tool* app, with
    one important difference: we must manage an external and large file – that is,
    the CNN pretrained model needed to detect Covid-19 cases. Let’s learn how to deal
    with this kind of large artifact.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程与我们的*Covid-19检测工具*应用程序相同，但有一个重要区别：我们必须管理一个外部的大型文件——也就是用于检测Covid-19病例的CNN预训练模型。让我们学习如何处理这种大文件。
- en: Avoiding bad behavior
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 避免不良行为
- en: Bad behavior is any kind of missing, wrong, or incomplete action that produces
    a runtime problem during the deployment, where the result is the deployment task
    failing. For this reason, in this section, we will learn about the steps that
    are required to complete any deployment.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 不良行为是指任何缺失、错误或不完整的操作，导致部署时出现运行时问题，最终导致部署任务失败。出于这个原因，在本节中，我们将学习完成任何部署所需的步骤。
- en: Creating a list of all the packages that were installed and used to develop
    the Python code
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个列出所有安装并用于开发Python代码的包的列表
- en: 'The first thing we need to run our web application is the list of all the packages
    that were installed and used to develop the Python code. As we know, there are
    several ways to get this list, but the easiest one is to use `pipreqs`. Let’s
    take a look:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 运行我们的Web应用程序所需的第一件事是列出所有安装和用于开发Python代码的包。正如我们所知，有多种方法可以获取这个列表，但最简单的方式是使用`pipreqs`。让我们来看一下：
- en: 'First of all, let’s install `pipreqs` by typing the following command in the
    Terminal:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们通过在终端中输入以下命令来安装`pipreqs`：
- en: '[PRE0]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: covid is the name of the directory containing all the code for our web application.
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: covid是包含我们Web应用程序所有代码的目录名称。
- en: '[PRE1]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Finally, let’s check that the required file contains everything by simply writing
    the following instruction:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们只需通过写入以下指令来检查需求文件是否包含所有内容：
- en: '[PRE2]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*Figure 11**.3* shows the contents of the `requirements.txt` file:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '*图11.3* 显示了`requirements.txt`文件的内容：'
- en: '![Figure 11.3: The requirements.txt file](img/B21147_11_03.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![图11.3：requirements.txt文件](img/B21147_11_03.jpg)'
- en: 'Figure 11.3: The requirements.txt file'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.3：requirements.txt文件
- en: Now that we have all the code and the requirements file, we are ready to create
    a dedicated repository on GitHub.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经拥有了所有代码和需求文件，我们准备在GitHub上创建一个专门的仓库。
- en: Creating a GitHub repository
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个GitHub仓库
- en: Let’s log into GitHub with the same account we will be using later on to connect
    to Streamlit Cloud.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用稍后将用于连接Streamlit Cloud的同一账户登录GitHub。
- en: 'Once on GitHub, we can create a new repository by following these steps:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦进入GitHub，我们可以按照以下步骤创建一个新仓库：
- en: 'Click on the **New** tab on the **Repositories** page. We should see the following
    screen:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Repositories**页面点击**New**标签。我们应该看到以下屏幕：
- en: '![Figure 11.4: Creating a new repository on GitHub](img/B21147_11_04.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图11.4：在GitHub上创建新仓库](img/B21147_11_04.jpg)'
- en: 'Figure 11.4: Creating a new repository on GitHub'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.4：在GitHub上创建新仓库
- en: Insert a repository name, such as `covid19-book`, and add a description (this
    is not necessary).
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入仓库名称，例如`covid19-book`，并添加描述（这不是必需的）。
- en: Keep the repository public and check **Add a** **README file**.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持仓库为公开，并勾选**添加README文件**。
- en: Finally, click **Create repository**.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，点击**创建仓库**。
- en: 'After a little while, we’ll get the following page:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 稍等片刻，我们会看到以下页面：
- en: '![Figure 11.5: The new repository is empty](img/B21147_11_05.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图11.5：新仓库为空](img/B21147_11_05.jpg)'
- en: 'Figure 11.5: The new repository is empty'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.5：新仓库为空
- en: As we can see, the new repository is empty. We must add the Python file and
    the `requirements.txt` file to it. This operation is very easy – we just need
    to click **Add file** and upload the files of our interest.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，新的仓库是空的。我们必须将Python文件和`requirements.txt`文件添加到其中。这个操作非常简单——我们只需要点击**Add
    file**并上传我们感兴趣的文件。
- en: In principle, we are ready to go to Streamlit Cloud to deploy the application
    and share it with the world.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 原则上，我们已经准备好前往Streamlit Cloud部署应用程序并与全世界分享它。
- en: However, every time we are at this stage of the deployment process, we must
    pay great attention to our actions. If we try to deploy the files contained in
    the newly created repository to Streamlit Cloud, we’ll get a runtime error and
    the application won’t run. Let’s learn how to fix that.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，每当我们处于部署过程的这一阶段时，我们必须特别注意我们的操作。如果我们尝试将新创建的仓库中的文件部署到Streamlit Cloud，我们将遇到运行时错误，应用程序将无法运行。让我们学习如何修复这个问题。
- en: Avoiding runtime errors
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 避免运行时错误
- en: To avoid runtime errors during deployment, we have to think about what our web
    application needs to run properly.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免部署过程中出现运行时错误，我们必须考虑我们的Web应用程序正常运行所需的内容。
- en: The first item we need is the Covid-19 image that we display in the left sidebar
    of our *Covid-19 Detection Tool* app. This operation is very easy since we just
    have to add the `covid19.jpeg` file to our repository.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要的第一个项是Covid-19图像，该图像显示在*Covid-19检测工具*应用程序的左侧边栏中。这个操作非常简单，因为我们只需将`covid19.jpeg`文件添加到我们的仓库中。
- en: 'The second point of attention is that the Streamlit version available at the
    time of writing this book has some problems with the `opencv` library: there are
    issues when it attempts to import this library. To avoid this issue, we must create
    a new file in the repository by clicking `packages.txt`. This new file must contain
    the following instruction:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个需要注意的事项是，目前编写本书时，Streamlit版本存在与`opencv`库相关的一些问题：在尝试导入该库时会出现问题。为了解决此问题，我们必须通过点击`packages.txt`在仓库中创建一个新文件。该文件必须包含以下指令：
- en: '[PRE3]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In this way, all the right dependencies will be installed by Streamlit Cloud
    at deployment time.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，Streamlit Cloud将在部署时安装所有正确的依赖项。
- en: The third item we must pay extra attention to when using the *Covid-19 Detection
    Tool* app is as follows. When we upload the X-ray image and click on **Diagnosis**
    to determine whether or not it represents a case of Covid-19, the pretrained CNN
    model is run. If the web application is unable to locate the model, we may encounter
    issues.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用*Covid-19检测工具*应用程序时，我们必须特别注意的第三个事项如下。当我们上传X射线图像并点击**诊断**以确定是否为Covid-19病例时，预训练的CNN模型将被运行。如果Web应用程序无法找到该模型，我们可能会遇到问题。
- en: 'The point of attention here is that uploading the AI model file is not enough
    because if we double-check the code we wrote on *line 81*, we’ll see that this
    model must be put inside a directory named `models`, living at the same level
    as the `app.py` file. In short, we must recreate the same files and directory
    order indicated in our Python code in our GitHub repository; otherwise, the files
    we need – specifically the CNN model – will never be found:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这里需要注意的一点是，上传AI模型文件并不足够，因为如果我们仔细检查我们在*第81行*编写的代码，我们会看到该模型必须放在一个名为`models`的目录中，并且该目录与`app.py`文件处于同一层级。简而言之，我们必须在GitHub仓库中重新创建与Python代码中指示的相同文件和目录结构；否则，我们需要的文件——特别是CNN模型——将永远找不到：
- en: '![Figure 11.6: Line 81 indicates where we need to put the CNN model file](img/B21147_11_06.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图11.6：第81行显示了我们需要放置CNN模型文件的位置](img/B21147_11_06.jpg)'
- en: 'Figure 11.6: Line 81 indicates where we need to put the CNN model file'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.6：第81行显示了我们需要放置CNN模型文件的位置
- en: Finally, a rather big issue arises. When we try to upload `Covid19_CNN_Classifier.h5`,
    we discover that this operation is not possible since the file is larger than
    25 MB and GitHub on the web only accepts files that are smaller than this size.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，出现了一个相当大的问题。当我们尝试上传`Covid19_CNN_Classifier.h5`时，我们发现由于文件大于25 MB，GitHub网页只能接受小于此大小的文件，因此无法进行此操作。
- en: In the next section, we’ll learn how to manage this problem.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习如何解决这个问题。
- en: Managing difficult libraries
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理困难的库
- en: 'To fix the problem of file size, we must install the GitHub Desktop application,
    which at the time of writing is only available for Windows or macOS. So, follow
    these steps:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决文件大小问题，我们必须安装GitHub桌面应用程序，目前该应用程序仅适用于Windows或macOS。因此，请按照以下步骤操作：
- en: Download the GitHub Desktop application from [desktop.github.com](http://desktop.github.com)
    and install it.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[desktop.github.com](http://desktop.github.com)下载并安装GitHub桌面应用程序。
- en: 'Then, log into your GitHub account and authorize. You should see the following
    window:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，登录到你的GitHub账户并授权。你应该会看到以下窗口：
- en: '![Figure 11.7: GitHub Desktop application](img/B21147_11_07.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![图11.7：GitHub桌面应用程序](img/B21147_11_07.jpg)'
- en: 'Figure 11.7: GitHub Desktop application'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.7：GitHub桌面应用程序
- en: Now, select the `covid19-book` repository (if you used another name, you must
    look for it) and click **Clone...**.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，选择`covid19-book`仓库（如果你使用了其他名称，必须寻找该名称）并点击**克隆...**。
- en: 'A clone of the repository will be created on your machine, as shown in *Figure
    11**.8*:'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 仓库的克隆副本将创建在你的机器上，如*图 11.8*所示：
- en: '![Figure 11.8: Cloning the GitHub repository locally](img/B21147_11_08.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.8：在本地克隆 GitHub 仓库](img/B21147_11_08.jpg)'
- en: 'Figure 11.8: Cloning the GitHub repository locally'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.8：在本地克隆 GitHub 仓库
- en: 'Once the cloning operation is finished, open the local folder of the repository
    on your Mac Finder or via Windows File Explorer, as shown in *Figure 11**.9*:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 克隆操作完成后，打开你在 Mac Finder 或 Windows 文件资源管理器中的本地仓库文件夹，如*图 11.9*所示：
- en: '![Figure 11.9: Local folder of the repository](img/B21147_11_09.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.9：本地仓库文件夹](img/B21147_11_09.jpg)'
- en: 'Figure 11.9: Local folder of the repository'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.9：本地仓库文件夹
- en: 'Now, create the `models` directory and copy the `Covid19_CNN_Classifier.h5`
    file inside it:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，创建`models`目录并将`Covid19_CNN_Classifier.h5`文件复制到其中：
- en: '![Figure 11.10: Big file copied into the proper directory](img/B21147_11_10.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.10：大文件已复制到正确的目录中](img/B21147_11_10.jpg)'
- en: 'Figure 11.10: Big file copied into the proper directory'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.10：大文件已复制到正确的目录中
- en: 'Move back to the GitHub Desktop application. Here, you will see the big file
    we just added. Write something in the `adding cnn model`, and click **Commit**
    **to main**:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回 GitHub Desktop 应用程序，在这里你会看到我们刚刚添加的大文件。在`adding cnn model`中写一些内容，然后点击**提交**
    **到主分支**：
- en: '![Figure 11.11: Big file copied into the proper directory](img/B21147_11_11.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.11：大文件已复制到正确的目录中](img/B21147_11_11.jpg)'
- en: 'Figure 11.11: Big file copied into the proper directory'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.11：大文件已复制到正确的目录中
- en: 'Now, select **Push origin**, as suggested in *Figure 11**.12*:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，选择**推送原始数据**，如*图 11.12*所示：
- en: '![Figure 11.12: Push origin](img/B21147_11_12.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.12：推送原始数据](img/B21147_11_12.jpg)'
- en: 'Figure 11.12: Push origin'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.12：推送原始数据
- en: 'Now, you can check in your browser whether the big file is included in your
    GitHub repository:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以在浏览器中检查大文件是否已包含在你的 GitHub 仓库中：
- en: '![Figure 11.13: The GitHub repository containing all the necessary files](img/B21147_11_13.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.13：包含所有必要文件的 GitHub 仓库](img/B21147_11_13.jpg)'
- en: 'Figure 11.13: The GitHub repository containing all the necessary files'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.13：包含所有必要文件的 GitHub 仓库
- en: What we have learned here is very important since it is common to deal with
    difficult libraries or heavy files is quite frequent, and knowing how to manage
    this issue properly makes a big difference. Managing this kind of issue makes
    it possible to deploy any kind of web application we could develop.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里学到的非常重要，因为处理复杂的库或大文件的情况非常常见，知道如何正确管理这些问题能够带来很大差异。处理这种问题使得我们能够部署任何我们可能开发的
    Web 应用程序。
- en: Deploying the app on Streamlit Cloud
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Streamlit Cloud 上部署应用程序
- en: 'The hardest part is over. From here on, we can follow the same procedure we
    adopted for the NLP web application. Here are the steps:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 最难的部分已经过去。从现在起，我们可以按照与 NLP Web 应用相同的程序进行操作。以下是步骤：
- en: Sign into Streamlit Cloud by selecting **Continue with Github**, authorizing
    and using the same account you used for GitHub.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过选择**继续使用 Github**并授权，使用你用于 GitHub 的相同帐户登录 Streamlit Cloud。
- en: Once you’re in, select **New app**.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入后，选择**新应用**。
- en: 'You should only have the application we created in [*Chapter 7*](B21147_07.xhtml#_idTextAnchor080)
    among the deployed applications. The window should look like what’s shown in *Figure
    11**.14*:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在部署的应用程序中，你应该只看到我们在[*第7章*](B21147_07.xhtml#_idTextAnchor080)中创建的应用。窗口应该像*图 11.14*所示：
- en: '![Figure 11.14: Creating a new app on Streamlit Cloud](img/B21147_11_14.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.14：在 Streamlit Cloud 上创建新应用](img/B21147_11_14.jpg)'
- en: 'Figure 11.14: Creating a new app on Streamlit Cloud'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.14：在 Streamlit Cloud 上创建新应用
- en: 'After selecting `app.py`), and specify a meaningful name to the app URL, as
    shown in *Figure 11**.15*:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择`app.py`后，为应用程序的URL指定一个有意义的名称，如*图 11.15*所示：
- en: '![Figure 11.15: Deploying the web app on Streamlit Cloud](img/B21147_11_15.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.15：在 Streamlit Cloud 上部署 Web 应用程序](img/B21147_11_15.jpg)'
- en: 'Figure 11.15: Deploying the web app on Streamlit Cloud'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.15：在 Streamlit Cloud 上部署 Web 应用程序
- en: 'When everything is ready, click **Deploy!** and wait since **Your app is in**
    **the oven**:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当一切准备好时，点击**部署！**并等待，因为**你的应用正在烘焙中**：
- en: '![Figure 11.16: Deploying animation](img/B21147_11_16.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.16：部署动画](img/B21147_11_16.jpg)'
- en: 'Figure 11.16: Deploying animation'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.16：部署动画
- en: At the end of this process, your *Covid-19 Detection Tool* app will be deployed
    and ready to be shared with everyone.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在此过程结束时，你的*Covid-19 检测工具*应用程序将被部署，并准备好与大家分享。
- en: 'Here’s how our new web application looks once the deployment process is completed:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这是部署过程完成后我们新的网页应用的样子：
- en: '![Figure 11.17: The Covid-19 Detection Tool app deployed on Streamlit Cloud](img/B21147_11_17.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![图11.17：部署在 Streamlit Cloud 上的 Covid-19 检测工具应用程序](img/B21147_11_17.jpg)'
- en: 'Figure 11.17: The Covid-19 Detection Tool app deployed on Streamlit Cloud'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.17：部署在 Streamlit Cloud 上的 Covid-19 检测工具应用程序
- en: As shown in *Figure 11**.17*, the application now lives on the web, and its
    URL is self-explanatory since it contains `covid19-book-chapter11` in it.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如*图11.17*所示，应用程序现在已经在网络上运行，其 URL 一目了然，因为它包含了`covid19-book-chapter11`。
- en: Once again, it’s very important to highlight how crucial proper deployment capabilities
    are in the web application development process. We can only consider this process
    completed once the web application lives on the cloud and anybody can use it.
    The contents of this chapter have enabled us to deploy any kind of web app, even
    those including difficult libraries and big files.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，正确的部署能力在网页应用程序开发过程中是至关重要的。只有当网页应用程序部署到云端并且任何人都可以使用时，我们才能认为这个过程已经完成。本章内容使我们能够部署任何类型的网页应用，甚至包括那些包含复杂库和大文件的应用。
- en: Important note
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: Depending on the versions of the packages you installed, it might be necessary
    to install the `opencv-python` library as well. If you get this suggestion during
    deployment, just install the library as usual (using `pipenv install...`), add
    it to the `requirements.txt` file, and let the standard deployment process from
    GitHub be completed.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你安装的软件包版本，可能还需要安装`opencv-python`库。如果在部署过程中收到此建议，只需像往常一样安装该库（使用`pipenv install...`），将其添加到`requirements.txt`文件中，然后按照
    GitHub 的标准部署流程完成部署。
- en: Summary
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Great job! Deploying the *Covid-19 Detection Tool* app was complex. As we saw,
    there are many potential problems to avoid.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！部署*Covid-19 检测工具*应用程序是一个复杂的过程。正如我们所见，有许多潜在问题需要避免。
- en: First of all, we needed to recreate the same structure of files and directories
    that were used in the Python code, and not forget to also include the picture
    files in the GitHub repository.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要重新创建与 Python 代码中相同的文件和目录结构，并且不能忘记将图片文件也包含在 GitHub 仓库中。
- en: The second problem was allowing Streamlit Cloud to manage all the dependencies
    related to `opencv`. To do this, it was necessary to add a `packages.txt` file
    to the repository containing the instructions to get these dependencies.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个问题是允许 Streamlit Cloud 管理与`opencv`相关的所有依赖项。为此，需要向仓库中添加一个`packages.txt`文件，其中包含获取这些依赖项的指令。
- en: Finally, we found out that GitHub – at least its online version – only manages
    files that are smaller than 25 MB, but sometimes, such as with the CNN AI model,
    we need to upload bigger files. This operation requires us to install the GitHub
    Desktop application and the local (on our computers) cloning of the repository.
    Once we have the repository on our computers, we can add this big file and push
    it back toward the origin (the Git *server*). In this way, even our AI model file,
    which is over 50 MB, will be hosted in the GitHub repository of interest.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们发现 GitHub——至少是它的在线版本——仅管理小于 25 MB 的文件，但有时，比如使用 CNN AI 模型时，我们需要上传更大的文件。这项操作要求我们安装
    GitHub Desktop 应用程序，并在本地（在我们的计算机上）克隆仓库。一旦我们将仓库克隆到本地，就可以添加这个大文件并将其推送回源（Git *服务器*）。这样，即使是超过
    50 MB 的 AI 模型文件，也可以存储在 GitHub 仓库中。
- en: Once we’ve tackled all these issues, we are ready to deploy the web application
    to Streamlit Cloud and share it with everybody.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们解决了所有这些问题，就准备好将网页应用程序部署到 Streamlit Cloud 并与大家共享了。
- en: Starting from the next chapter, we are going to cover some very advanced topics,
    such as smart file uploading, adding login and signup functionality to our web
    apps, managing databases, and more.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 从下一章开始，我们将讨论一些非常高级的话题，如智能文件上传、为我们的网页应用添加登录和注册功能、管理数据库等。
- en: 'Part 4: Advanced Techniques for Secure and Customizable Web Applications'
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四部分：安全且可定制网页应用的高级技术
- en: Part 4 of the book is dedicated to mastering advanced techniques that are essential
    for creating secure and highly customizable web applications. It starts with an
    exploration of smart file uploading methods, tailored for professional-grade web
    applications, ensuring efficient and user-friendly file management. The section
    then addresses the critical aspect of security, providing in-depth guidance on
    creating secure login and signup processes, a cornerstone for any web application
    dealing with user data. Next, it dives into the customization of pages, personalization
    of themes, and implementation of multi-page layouts, allowing for a more tailored
    and engaging user experience. The part also covers enhancing web applications
    with forms, session state management, and the use of customizable subdomains,
    adding a layer of sophistication and functionality to web apps. The book concludes
    with key takeaways and a thoughtful conclusion, encapsulating what you have learned
    and preparing you for the future of web app development. This final part is essential
    for those looking to elevate their web apps from functional to exceptional, focusing
    on customization, security, and advanced user engagement.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的第4部分致力于掌握创建安全且高度可定制的Web应用所需的高级技术。首先，介绍了智能文件上传方法，专为专业级Web应用定制，确保高效且用户友好的文件管理。接着，本节探讨了安全性问题，提供了关于如何创建安全的登录和注册流程的深入指导，这是任何涉及用户数据的Web应用的基石。然后，本部分讲解了页面定制、主题个性化以及多页面布局的实现，旨在提供更具针对性和吸引力的用户体验。此外，还涵盖了通过表单、会话状态管理和自定义子域来增强Web应用，为Web应用增添了一层复杂性和功能性。最后，本书以关键要点总结和深刻的结论收尾，总结了所学内容，并为Web应用开发的未来做好准备。此部分对于那些希望将Web应用从基础功能提升至卓越水平的开发者至关重要，重点关注定制、安全性和高级用户参与。
- en: 'This part has the following chapters:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分包含以下章节：
- en: '[*Chapter 12*](B21147_12.xhtml#_idTextAnchor128), *Smart File Uploading – Advanced
    Techniques for Professional Web Applications*'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第12章*](B21147_12.xhtml#_idTextAnchor128)，*智能文件上传——专业Web应用的高级技巧*'
- en: '[*Chapter 13*](B21147_13.xhtml#_idTextAnchor138), *Creating a Secure Login
    and Signup Process for Web Applications*'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第13章*](B21147_13.xhtml#_idTextAnchor138)，*为Web应用创建安全的登录和注册流程*'
- en: '[*Chapter 14*](B21147_14.xhtml#_idTextAnchor150), *Customizing Pages, Personalizing
    Themes, and Implementing Multi-Pages*'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第14章*](B21147_14.xhtml#_idTextAnchor150)，*页面定制、主题个性化与多页面实现*'
- en: '[*Chapter 15*](B21147_15.xhtml#_idTextAnchor160), *Enhancing Web Apps with
    Forms, Session State, and Customizable Subdomains*'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第15章*](B21147_15.xhtml#_idTextAnchor160)，*通过表单、会话状态和自定义子域增强Web应用*'
- en: '[*Chapter 16*](B21147_16.xhtml#_idTextAnchor169), *Takeaways and Conclusion*'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第16章*](B21147_16.xhtml#_idTextAnchor169)，*总结与结论*'
