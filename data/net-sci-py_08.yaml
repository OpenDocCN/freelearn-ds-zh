- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: Egocentric Network Analysis
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自我中心网络分析
- en: The previous chapter was a whirlwind. We covered so much material, learning
    how to visualize and analyze whole networks. In comparison, this chapter should
    feel much simpler. It will also be much shorter. In previous chapters, we learned
    how to get and create network data, how to build graphs from network data, how
    to clean graph data, and how to do interesting things such as identifying communities.
    In this chapter, we will be doing what is called **egocentric** **network analysis**.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 前一章内容非常丰富，我们学习了如何可视化和分析整个网络。相比之下，本章应该会感觉更简单，内容也会少得多。在之前的章节中，我们学习了如何获取和创建网络数据，如何从网络数据构建图形，如何清理图形数据，以及如何做一些有趣的事情，比如识别社区。在本章中，我们将进行所谓的
    **自我中心** **网络分析**。
- en: The good news is that everything that was learned in the previous chapter applies
    to egocentric networks. Centralities can be useful for finding important nodes.
    Community algorithms can be useful for identifying communities. The great news
    is that there really isn’t a lot that we need to cover in this chapter. Egocentric
    network analysis is simpler in scale as well as in scope. It’s most important
    that I explain how to get started, show what you can do, and explain future steps
    you might want to take to go further in your analysis. As with any kind of analysis,
    there is always more that you can do, but we will keep things very simple in this
    chapter.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 好消息是，前一章所学的所有内容都可以应用于自我中心网络。中心性可以帮助我们找出重要的节点。社区算法可以帮助我们识别社区。最棒的消息是，本章其实不需要涉及太多内容。自我中心网络分析在规模和范围上都更简单。最重要的是，我会解释如何开始，展示你可以做什么，并说明你未来可能想采取的进一步分析步骤。就像任何类型的分析一样，总是有更多的事情可以做，但我们将在本章中保持简单。
- en: 'We will cover the following topics in the chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涉及以下主题：
- en: Doing egocentric network analysis
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进行自我中心网络分析
- en: Investigating ego nodes and connections
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调查自我节点和连接
- en: Identifying other research opportunities
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 识别其他研究机会
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'In this chapter, we will mostly be using the Python libraries NetworkX and
    pandas. These libraries should be installed by now, so they should be ready for
    your use. If they are not installed, you can install Python libraries with the
    following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将主要使用 Python 库 NetworkX 和 pandas。这些库应该已经安装好了，所以你可以直接使用它们。如果没有安装，你可以通过以下方式安装
    Python 库：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'For instance, to install NetworkX, you would do the following:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要安装 NetworkX，你可以按照以下步骤操作：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In [*Chapter 4*](B17105_04.xhtml#_idTextAnchor158), we also introduced a `draw_graph()`
    function that uses both NetworkX and `scikit-network`. You will need that code
    any time that we do network visualization. You will need it for this chapter and
    most chapters in this book.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第 4 章*](B17105_04.xhtml#_idTextAnchor158)中，我们也介绍了一个 `draw_graph()` 函数，它使用了
    NetworkX 和 `scikit-network`。每当我们进行网络可视化时，你都需要使用这段代码。本章以及本书的大多数章节中，你都需要用到它。
- en: 'The code is available on GitHub: [https://github.com/PacktPublishing/Network-Science-with-Python](https://github.com/PacktPublishing/Network-Science-with-Python).'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 代码可以在 GitHub 上找到：[https://github.com/PacktPublishing/Network-Science-with-Python](https://github.com/PacktPublishing/Network-Science-with-Python)。
- en: Egocentric network analysis
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自我中心网络分析
- en: '**Egocentric network analysis** is a form of network analysis that is useful
    for investigating the relationships that exist around a specific person in a social
    network. Rather than looking at the whole social network, we will zoom in on an
    individual and the individuals that this person interacts with. Egocentric network
    analysis uses a simpler form of a network called an **egocentric network** (**ego
    network**). From this point on, I will refer to these networks as *ego networks*.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**自我中心网络分析** 是一种网络分析方法，适用于研究社交网络中围绕特定个人存在的关系。我们不再研究整个社交网络，而是聚焦于某个个体以及该个体与之互动的人。自我中心网络分析使用一种更简单的网络形式，称为
    **自我中心网络**（**自我网络**）。从现在起，我将这些网络称为 *自我网络*。'
- en: 'In an ego network, there are two types of nodes: **ego** and **alters**. The
    ego node is the node of an individual that you are investigating. Alters, on the
    other hand, are all other nodes that exist in an ego network. If I were to make
    an ego network based on my own life, I would be the ego, and the people I know
    would be the alters. If I wanted to investigate the people who mention or are
    mentioned by the **@spotifykr** Twitter account in the K-pop social network from
    the previous chapter, I would create an ego network for spotifykr. spotifykr would
    be the ego, and all other nodes would be altered.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在自我网络中，有两种类型的节点：**自我节点**和**他者节点**。自我节点是你正在研究的个体的节点。另一方面，他者节点是存在于自我网络中的所有其他节点。如果我基于自己的生活创建一个自我网络，我就是自我节点，我认识的人就是他者节点。如果我想调查在前一章中提到的K-pop社交网络中，**@spotifykr**
    Twitter账号提到或被提到的人，我会为spotifykr创建一个自我网络。spotifykr是自我节点，所有其他节点都是他者节点。
- en: What’s the point of this? Well, you can learn a lot about a person or organization
    based on the people who interact with that person. Like attracts like, in many
    cases. In my own life, most of my friends are engineers or data scientists, but
    my other friends are artists. I enjoy knowing creative and analytical people.
    Someone else might have a completely different makeup of the types of people they
    hang out with. Analyzing and visualizing ego networks can give us insights into
    relationships that we may be unable to see or notice living in the moment. We
    may have a hunch that certain types of relationships exist or how a person is
    being influenced, but being able to analyze and visualize an ego network itself
    is illuminating.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这有什么意义呢？你可以通过与某个个体互动的人了解很多关于这个人或组织的情况。许多情况下，相似的人会相互吸引。在我的生活中，我的大多数朋友都是工程师或数据科学家，但我另外的一些朋友是艺术家。我喜欢认识既具创造力又具分析力的人。其他人可能有完全不同类型的朋友。分析和可视化自我网络可以帮助我们洞察那些我们可能无法在当下察觉或看到的关系。我们可能会有某种直觉，觉得某些类型的关系存在，或者某个人是如何受到影响的，但能够分析和可视化自我网络本身是非常有启发性的。
- en: One nice thing about working with ego networks rather than whole networks is
    that ego networks tend to be much smaller and less complex than whole networks.
    That makes sense, as ego networks are subsets of a larger ecosystem. For instance,
    in a social network of millions of people, an ego network will focus on the ego
    node, and the alter nodes that surround it. As these networks are much smaller
    and less complex, this can allow for easy work with otherwise computationally
    expensive algorithms. There’s less data to crunch. However, ego networks obviously
    scale based on the popularity of an individual. The ego network for a celebrity
    influencer will be much more complex than my own ego network. I don’t have millions
    of followers.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 与整个网络相比，使用自我网络的一个好处是自我网络通常比整个网络小且不太复杂。这很有道理，因为自我网络是更大生态系统的子集。例如，在一个由数百万人的社交网络中，一个自我网络将专注于自我节点和围绕它的其他节点。由于这些网络更小且不太复杂，因此可以使用原本计算量大的算法进行轻松处理。处理的数据量较少。然而，显然，自我网络的规模取决于个体的受欢迎程度。一个名人网红的自我网络将比我自己的自我网络复杂得多。我没有数百万粉丝。
- en: Uses for egocentric network analysis
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自我中心网络分析的应用
- en: In social network analysis, ego networks are used to understand the relationships
    and communities that exist around a person. However, that is not at all the limit
    of what you can do with ego network analysis. I have used ego networks in a variety
    of different kinds of work to understand people’s relationships, communication
    flow, and influence. I have also used networks to map out production data flows
    across a data center, and ego networks to investigate data flows and processes
    that exist around a piece of software or database table. If you can create a network,
    you can use ego networks to drill into the network for a closer look. You are
    not limited to analyzing people. You can use this to analyze families of malware,
    for instance. You can use this to understand how amplification works across social
    media. You can use this to inspect a component involved in a supply chain. You
    are limited by your own creativity and the data you are able to create or acquire.
    Anywhere that a network exists, ego networks can be used for analysis.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在社交网络分析中，**自我网络**用于理解一个人周围的关系和社区。然而，这并不是你可以使用自我网络分析的唯一限制。我已经在各种不同的工作中使用自我网络，来理解人们的关系、沟通流和影响力。我还使用网络来绘制数据中心中的生产数据流，并利用自我网络来调查围绕某个软件或数据库表格的数据流和流程。如果你能创建一个网络，你就可以使用自我网络深入挖掘该网络，进行更细致的观察。你不仅限于分析人类，你还可以用它来分析恶意软件家族。例如，你可以用它来理解社交媒体上的放大效应。你也可以用它来检查供应链中的一个组件。你的限制只有你自己的创造力和你能够创建或获取的数据。只要网络存在，自我网络就可以用于分析。
- en: Explaining the analysis methodology
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解释分析方法论
- en: This chapter is going to be completely hands-on and repeatable. We will use
    a pre-built NetworkX network of the characters involved in the novel *Les Miserables*.
    I chose to use this network because it is large and complex enough to be interesting,
    but also because it has clear communities that can be seen inside various ego
    networks. This is an excellent network for practice with social network analysis.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将完全以实践为主，并且是可重复的。我们将使用一个预先构建的NetworkX网络，该网络包含了小说《*悲惨世界*》中的人物。我选择使用这个网络是因为它既大且复杂，足够有趣，同时也有清晰的社区，可以在不同的自我网络中看到这些社区。这是一个进行社交网络分析练习的极好网络。
- en: The NetworkX network comes with weights, which allow us to draw thicker edges
    between nodes that have more interactions than those that have fewer interactions.
    However, for this analysis, I have chosen to drop the weights, as I want you to
    pay most attention to the alters and communities that exist around an ego node.
    For this analysis, I am more interested in the structure of the ego network and
    the communities that exist inside the ego network. I do recommend that you challenge
    yourself. As you make your way through the code of this chapter, maybe keep the
    weights rather than dropping them, and see how it affects the network visualizations.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: NetworkX网络自带权重，这使得我们可以在互动较多的节点之间绘制较粗的边，区别于互动较少的节点。然而，在本次分析中，我选择去掉权重，因为我希望你们更多地关注围绕自我节点的其他节点和社区。在这个分析中，我更感兴趣的是自我网络的结构以及自我网络内部存在的社区。我确实建议你挑战自己。在本章的代码中，或许你可以保留权重，而不是去除它们，然后看看这对网络可视化产生了什么影响。
- en: We will start by doing a quick whole network spotcheck, just to see what the
    network looks like and to pick up centralities that could be useful for identifying
    interesting nodes that could use an ego network analysis.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从快速检查整个网络开始，先看看网络的样子，并挑选出一些可能对识别有趣节点、进而进行自我网络分析的中心节点。
- en: After that, we’ll look at four separate ego networks. We will start by learning
    just a little bit about the ego character from the novel, but we will not go into
    depth. Then, we will visualize the ego network both with and without its center.
    In an ego network, if you drop the ego node, it’s called dropping the center.
    The ego node sits in the center. In an ego network, all alters have an edge between
    themselves and the ego node. If an alter is in an ego network, the alter has some
    form of relationship with the ego. So, what do you think will happen if you drop
    the ego node from an ego network? The ego network becomes simpler and may even
    break into pieces. This breakage is especially useful when it happens, as it becomes
    very easy to identify different communities, as they show as clusters of nodes.
    So, we will perform ego network analysis with the center dropped.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们将查看四个独立的自我网络。我们将从了解小说中自我角色的简短信息开始，但我们不会深入探讨。然后，我们将分别可视化有无中心的自我网络。在自我网络中，如果你去掉自我节点，这就叫做去掉中心。自我节点位于中心。在自我网络中，所有
    alters 都与自我节点之间有一条边。如果一个 alter 在自我网络中，那么它与自我节点之间有某种关系。那么，你认为如果去掉自我节点会发生什么？自我网络会变得更简单，甚至可能断裂成多个部分。这种断裂尤其有用，因为它能够帮助我们很容易地识别不同的社区，这些社区表现为节点群集。因此，我们将执行去除中心的自我网络分析。
- en: We will look to identify the alters that exist in an ego network, identify the
    most important alters, and we’ll compare the density of each of the four ego networks.
    We will also look for communities as well as bridges that exist between communities.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将识别自我网络中的 alters，找出最重要的 alters，并比较四个自我网络的密度。我们还将寻找存在于不同社区之间的桥梁。
- en: Let’s get started!
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 开始吧！
- en: Whole network spot check
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 整个网络抽查
- en: 'Before we can do anything with ego networks, we must first construct our graph.
    We have done this several times by now, so this should be familiar territory,
    but this time, we are going to use one of NetworkX’s pre-built graphs. Loading
    a pre-built graph is simple:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们进行自我网络分析之前，首先需要构建我们的图。我们已经做过好几次了，所以这应该是熟悉的内容，但这次我们将使用 NetworkX 提供的预构建图。加载一个预构建图非常简单：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: NetworkX has several other graphs available, so be sure to browse the documentation
    as you may find other networks of interest for your own work and learning.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: NetworkX 提供了其他几种图形，因此请务必浏览文档，您可能会找到其他对您工作和学习有帮助的网络。
- en: 'This graph contains edge weights. While this is useful for understanding the
    number of interactions that take place between nodes, I have chosen to remove
    it from our graph so that we have clearer lines and so that we can focus on the
    ego networks themselves. These commands will convert the graph into a pandas edge
    list DataFrame – keeping only the source and target fields – and create a new
    graph using the DataFrame:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 该图包含边权。虽然这对于理解节点之间的交互数量非常有用，但我决定从我们的图中移除它，以便使线条更加清晰，并且能够专注于自我网络本身。以下命令将把图转化为一个
    pandas 边列表 DataFrame —— 只保留源节点和目标节点字段 —— 并使用 DataFrame 创建一个新图：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now that our revised graph is built, we can take a look at the number of nodes
    and edges:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的修改图已经构建完成，我们可以查看节点和边的数量：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'With only `77` nodes and `254` edges, this is a simple network, and we can
    easily visualize it in *Figure 8**.1*:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 只有 `77` 个节点和 `254` 条边，这是一个简单的网络，我们可以轻松地在 *图 8.1* 中可视化它：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This produces the following network:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生如下网络：
- en: '![Figure 8.1 – Les Miserables whole network](img/B17105_08_001.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.1 – 《悲惨世界》整个网络](img/B17105_08_001.jpg)'
- en: Figure 8.1 – Les Miserables whole network
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.1 – 《悲惨世界》整个网络
- en: 'This is good enough to move on, but I want to remind you of something we learned
    about in the previous chapter. We can use `k_core` to remove nodes from the visualization
    that have less than `k` nodes. In this case, I have chosen to not show nodes with
    fewer than two nodes:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在的结果足够了，但我想提醒你，我们在上一章学到过的内容。我们可以使用 `k_core` 来移除可视化中节点数小于 `k` 的节点。在这个例子中，我选择不显示节点数少于两个的节点：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This will draw a network visualization, showing nodes that have two or more
    edges, effectively removing isolates and nodes with only a single edge. This will
    give us a quick understanding and preview of the structure of our network:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这将绘制一个网络可视化，显示具有两个或更多边的节点，有效地移除孤立节点和仅有一条边的节点。这将帮助我们快速了解和预览网络的结构：
- en: '![Figure 8.2 – Les Miserables whole network (k=2)](img/B17105_08_002.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.2 – 《悲惨世界》整个网络 (k=2)](img/B17105_08_002.jpg)'
- en: Figure 8.2 – Les Miserables whole network (k=2)
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.2 – 《悲惨世界》整个网络 (k=2)
- en: 'After visualizing a network, I tend to collect the PageRank scores of all nodes
    on a network. PageRank is a fast algorithm that scales well regardless of network
    size, so this is a good go-to algorithm for quickly identifying node importance,
    as discussed in the previous chapter. As a reminder, the `pagerank` algorithm
    calculates an importance score based on the number of incoming and outgoing edges
    that a node has. For this network, we are using an undirected graph, so `pagerank`
    is really calculating the score based on the number of edges that a node has,
    as there is no such thing as `in_degree` or `out_degree` in an undirected network.
    Here is how we can calculate `pagerank` and put the scores into a pandas DataFrame
    for quick analysis and visualization:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在可视化一个网络后，我通常会收集网络中所有节点的PageRank分数。PageRank是一个快速的算法，能够在网络规模不管多大时都表现良好，因此它是一个快速识别节点重要性的好算法，正如上一章所讨论的那样。提醒一下，`pagerank`算法是基于一个节点的进出边数量来计算其重要性分数的。对于这个网络，我们使用的是无向图，因此`pagerank`实际上是基于一个节点所拥有的边的数量来计算分数的，因为在无向网络中并没有`in_degree`或`out_degree`的概念。以下是我们如何计算`pagerank`并将分数放入pandas
    DataFrame中进行快速分析和可视化：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Let’s visualize the `pagerank` algorithm calculation:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们可视化`pagerank`算法的计算过程：
- en: '![Figure 8.3 – Top 20 PageRank nodes in the Les Miserables network](img/B17105_08_003.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.3 – 《悲惨世界》网络中的前20个PageRank节点](img/B17105_08_003.jpg)'
- en: Figure 8.3 – Top 20 PageRank nodes in the Les Miserables network
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.3 – 《悲惨世界》网络中的前20个PageRank节点
- en: 'A picture can help us see the difference more easily in the PageRank between
    each of the nodes:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 一张图片可以帮助我们更容易地看到每个节点之间PageRank的差异：
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The visualization is as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 可视化结果如下：
- en: '![Figure 8.4 – Top 20 PageRank nodes visualized in the Les Miserables network](img/B17105_08_004.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.4 – 《悲惨世界》网络中前20个PageRank节点的可视化](img/B17105_08_004.jpg)'
- en: Figure 8.4 – Top 20 PageRank nodes visualized in the Les Miserables network
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.4 – 《悲惨世界》网络中前20个PageRank节点的可视化
- en: Excellent. We can clearly see that **Valjean** is a very important character
    in this story. We will definitely want to inspect Valjean’s ego network, as well
    as the ego networks of **Myriel** and **Gavroche**. In an attempt to make sure
    that we don’t get too similar ego networks, I have chosen **Joly** as the fourth
    character to inspect. Joly is much further down on the PageRank list.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 很好。我们可以清楚地看到**瓦尔让**在这个故事中是一个非常重要的角色。我们肯定需要检查瓦尔让的自我网络，以及**米里埃尔**和**加夫罗什**的自我网络。为了确保我们不会得到太相似的自我网络，我选择了**乔利**作为第四个要检查的角色。乔利在PageRank榜单上排得较低。
- en: This is all of the whole network analysis that we will be doing in this chapter.
    From this point on, we will be learning about ego networks. Let’s go!
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们在本章中进行的全部网络分析。从此时起，我们将开始学习自我网络。让我们开始吧！
- en: Investigating ego nodes and connections
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调查自我节点和连接
- en: In egocentric network analysis, we are interested in learning more about the
    communities that exist around a single node in a network. We are much less interested
    in the structure and makeup of the entire network. We are “zooming in,” so to
    speak. We will use egocentric network analysis to inspect the communities that
    exist around core characters from *Les Miserables*.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在自我中心网络分析中，我们感兴趣的是了解围绕一个单一节点存在的社区。我们对整个网络的结构和组成不太感兴趣。可以说，我们是“放大”来看。我们将使用自我中心网络分析来检查《悲惨世界》中核心角色周围存在的社区。
- en: Ego 1 – Valjean
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自我 1 – 瓦尔让
- en: According to Wikipedia, Jean Valjean is the protagonist of Les Miserables. Knowing
    this, it makes sense that Valjean has the highest PageRank score of all characters
    in the network. The main character of any story typically interacts with more
    characters than anyone else, and PageRank will reflect that. For the sake of this
    chapter, this is as much background digging as we will do per character. If you
    want to do a thorough analysis of the networks that exist in a piece of literature,
    you should go much deeper. In this chapter, I am most interested in showing how
    to work with ego networks.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 根据维基百科，尚·瓦尔让是《悲惨世界》的主角。了解这一点后，我们就能明白瓦尔让在网络中拥有最高的PageRank分数。任何故事的主角通常都会与比其他人更多的角色互动，PageRank也会反映这一点。为了本章的目的，这就是我们对每个角色所做的背景分析。如果你想对一部文学作品中的网络进行深入分析，你需要做得更深。在本章中，我最感兴趣的是展示如何处理自我网络。
- en: Full ego network
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 完整的自我网络
- en: 'Before we can analyze an ego network, we must first create one. In NetworkX,
    this is called `ego_graph` and one can be created by simply passing in the full
    graph as well as the name of the node that you would like to analyze:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们能够分析自我网络之前，我们必须先创建一个。在 NetworkX 中，这叫做 `ego_graph`，可以通过简单地传入完整的图以及你想要分析的节点名称来创建：
- en: '[PRE9]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'That’s it. That’s how to create an ego network. There are other parameters
    that you can pass in, but in practice, this is about as complicated as it gets:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样。这就是如何创建自我网络。你还可以传入其他参数，但实际上，这已经是最复杂的部分了：
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We can now visualize the ego network:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以可视化自我网络：
- en: '![Figure 8.5 – The Valjean ego network](img/B17105_08_005.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.5 – Valjean 自我网络](img/B17105_08_005.jpg)'
- en: Figure 8.5 – The Valjean ego network
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.5 – Valjean 自我网络
- en: If you look closely, you should see that Valjean is in the center of his own
    ego network. This makes sense. The ego (Valjean) has some form of relationship
    with all of the alters (other nodes) that exist in the ego network.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仔细看，你应该能看到 Valjean 位于他自己自我网络的中心。这是有道理的。自我节点（Valjean）与存在于自我网络中的所有他人节点（其他节点）都有某种关系。
- en: Before moving on, there is something important that I want to point out. An
    ego network is just another network. Everything that we learned about in the previous
    chapter – *centralities*, *communities*, *degrees*, `k_core`, and `k_corona` –
    also applies to ego networks. Consider that the previous chapter mentioned that
    certain centralities are computationally expensive and time-consuming to run against
    whole networks. That is not always or even usually the case for ego networks,
    in my experience. Algorithms that were impractical for whole networks can be useful
    on ego networks, and can be applied with ease. There is an overlap between what
    can be useful for whole network analysis and egocentric network analysis. Everything
    that we learned in the previous chapter can be applied to ego networks.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，有一件重要的事情我想指出。自我网络只是另一种网络。我们在上一章中学习的所有内容——*中心性*、*社区*、*度数*、`k_core`和`k_corona`——同样适用于自我网络。考虑到上一章提到过，某些中心性计算开销大且耗时，特别是在整个网络上运行时。但根据我的经验，这种情况并不总是发生，甚至通常不会发生。对于自我网络，原本对整个网络来说不切实际的算法反而可以派上用场，而且应用起来非常简单。整个网络分析和自我中心网络分析之间是有重叠的。我们在上一章中学到的所有内容都可以应用于自我网络。
- en: Dropping the center from an ego network
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从自我网络中移除中心节点
- en: 'One important option that is often overlooked is the ability to drop the center
    of an ego network. In simple terms, this means dropping Valjean out of his ego
    network. I find this very useful to do because when you drop a central node, often
    a network will shatter into pieces, making it much easier to identify the communities
    that exist in a network. We can drop the center out of an ego network like so:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 一个常被忽视的重要选项是能够去除自我网络的中心。简单来说，这意味着将 Valjean 从他的自我网络中去除。我发现这样做非常有用，因为当你去除一个中心节点时，网络通常会被拆分成几个部分，这使得识别网络中的社区变得更加容易。我们可以像这样从自我网络中去除中心节点：
- en: '[PRE11]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, that we have removed the center node – the ego – let’s visualize the network
    again:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经移除了中心节点——自我节点——让我们再一次可视化网络：
- en: '[PRE12]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![Figure 8.6 – The Valjean ego network with the center dropped](img/B17105_08_006.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.6 – 删除中心后的 Valjean 自我网络](img/B17105_08_006.jpg)'
- en: Figure 8.6 – The Valjean ego network with the center dropped
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.6 – 删除中心后的 Valjean 自我网络
- en: Compare this visualization to the previous one. What do you see? I can see that
    there is one large cluster of nodes that seems to have at least two communities
    as part of it at the top and to the left. I can also see a community of three
    nodes that has split off as an island on the right. And finally, I can see four
    isolate nodes. I hope it’s clear to you that dropping the center can make it much
    easier to see these kinds of things.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 将这个可视化与之前的进行对比。你看到了什么？我看到有一个较大的节点簇，它的顶部和左侧似乎至少有两个社区。右侧我还看到一个由三个节点组成的社区，它已经独立成岛。我还看到四个孤立节点。我希望你能明白，去掉中心节点可以使这些事情变得更加容易看出。
- en: Ego network (dropped center, denoised)
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自我网络（去除中心，去噪）
- en: 'I often use `k_core` to denoise a network, and the same can be done for ego
    networks. Let’s drop all nodes with less than one edge, effectively dropping the
    four isolate nodes:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我常常使用 `k_core` 来去噪一个网络，同样的操作也可以用于自我网络。让我们去掉所有度数小于一个的节点，实际上就是去掉这四个孤立节点：
- en: '[PRE13]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, let’s use the preceding code to visualize it:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用前面的代码来可视化它：
- en: '![Figure 8.7 – The Valjean ego network with the center and isolates dropped](img/B17105_08_007.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.7 – Valjean 自我网络，去掉中心节点和孤立节点](img/B17105_08_007.jpg)'
- en: Figure 8.7 – The Valjean ego network with the center and isolates dropped
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.7 – Valjean 自我网络，去掉中心节点和孤立节点
- en: Now we have an even cleaner network, and it is clear that there are two clusters
    of nodes. A quick search on Wikipedia shows that **Myriel** is a bishop, **Magloire**
    is his servant and sister, and **Baptistine** is also his sister. It makes sense
    that they are part of their own community.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个更干净的网络，很明显，网络中有两个节点集群。在维基百科上快速搜索发现 **Myriel** 是一位主教，**Magloire** 是他的仆人和妹妹，**Baptistine**
    也是他的妹妹。他们属于自己的社区是有道理的。
- en: Alter list and amount
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 交互者列表和数量
- en: 'The same way we looked up nodes that exist in a whole network can also be used
    on an ego network. Rather than `G.nodes`, we’ll use `ego_1.nodes`, as `ego_1`
    is our ego network:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们查找整个网络中存在的节点的方式，也可以应用于自我网络。我们将使用 `ego_1.nodes`，而不是 `G.nodes`，因为 `ego_1` 是我们的自我网络：
- en: '[PRE14]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'There are two different ways that we can get the number of alters that exist
    in the ego network. Remember, we dropped the center node (the ego), so all remaining
    nodes are alters:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种不同的方式可以获取自我网络中存在的交互者数量。记住，我们已经去掉了中心节点（自我节点），因此所有剩余的节点都是交互者：
- en: 'The first method is just to simply count the number of nodes in the network:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一个方法是简单地计算网络中节点的数量：
- en: '[PRE15]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: That’s fine, but what if we want to see the number of edges as well?
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 没问题，但如果我们还想看到边的数量呢？
- en: 'Let’s just cut to the chase and use the `nx.info()` function instead of looking
    up how to get a list of all edges in a network, as this is easier:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们直接使用 `nx.info()` 函数，而不是查找如何获取网络中所有边的列表，因为这样更简单：
- en: '[PRE17]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The whole network had `77` nodes, so clearly, the ego network is simpler.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 整个网络有 `77` 个节点，因此显然，自我网络更简单。
- en: Important alters
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 重要的交互者
- en: 'Getting a list of alters is one thing, but it is more useful if we can get
    a list of alters accompanied by some relevant centrality score to be able to gauge
    the importance of individual nodes in a network. Remember, there is no one centrality
    score to rule them all. We could have used PageRank, closeness centrality, betweenness
    centrality, or any of the other measures. These are the nodes that are connected
    to most other nodes in the ego network:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 获取交互者列表是一回事，但如果我们能得到一个带有相关中心性分数的交互者列表，那就更有用，这样我们就可以评估网络中单个节点的重要性。记住，没有单一的中心性分数能够代表所有的中心性。我们可以使用
    PageRank、接近中心性、中介中心性或其他任何度量方法。这些是与自我网络中最多其他节点相连的节点：
- en: '[PRE19]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Let’s visualize this and take a look at our centralities:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们可视化这一点，看看我们的中心性：
- en: '![Figure 8.8 – The Valjean ego network alters'' degree centrality](img/B17105_08_008.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.8 – Valjean 自我网络中交互者的度中心性](img/B17105_08_008.jpg)'
- en: Figure 8.8 – The Valjean ego network alters' degree centrality
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.8 – Valjean 自我网络中交互者的度中心性
- en: '`degree_centrality` of around `0.457`. That makes sense, considering how central
    Javert is in the ego network.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`degree_centrality` 大约为 `0.457`。考虑到 Javert 在自我网络中的中心地位，这很有道理。'
- en: '![Figure 8.9 – Javert’s network position in the Valjean ego network](img/B17105_08_009.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.9 – Javert 在 Valjean 自我网络中的网络位置](img/B17105_08_009.jpg)'
- en: Figure 8.9 – Javert’s network position in the Valjean ego network
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.9 – Javert 在 Valjean 自我网络中的网络位置
- en: The other alters with the highest centralities are much more difficult to see.
    **MmeThenardier** is in the center, poking out on the right.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 其他具有最高中心性的交互者则更难以察觉。**MmeThenardier** 位于中心，右侧突出了。
- en: Ego network density
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自我网络密度
- en: 'Let’s wrap up this ego network by getting the network density. Density has
    to do with the level of connectedness between all the nodes in a network. In order
    to have a density of `1.0`, every single node would have an edge with every single
    other node in a network. To have a density of `0.0`, a network would be made entirely
    of isolates, with no edges between any nodes. Can you guess roughly what the density
    would be for this network? It looks loosely connected to me, with a few pockets
    of densely connected communities. So, my guess would be a pretty low score. Let’s
    use NetworkX to calculate the density:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过计算网络密度来总结这个自我网络。密度与网络中所有节点之间的连接程度有关。为了达到 `1.0` 的密度，每个节点都会与网络中的每个其他节点相连。要有
    `0.0` 的密度，网络将完全由孤立节点组成，节点之间没有任何连接。你能大致猜测这个网络的密度是多少吗？它看起来连接松散，且有几个密集连接的社区。因此，我的猜测是一个相当低的分数。让我们使用
    NetworkX 来计算密度：
- en: '[PRE20]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: A density of around `0.12` is a loosely connected network. I’ve calculated density
    because I want to use this to be able to compare the density of each of the ego
    networks.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 密度大约为`0.12`的网络是一个连接松散的网络。我计算了密度，因为我希望用它来比较每个自我网络的密度。
- en: Note
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 注
- en: You might be wondering why we are looking at betweenness centrality and density
    or wondering what the relationship is between centrality and density. Centrality
    scores are useful for understanding the importance of a node in a network. Density
    tells us about the overall composition of the network. If a network is dense,
    then nodes are more connected than in a sparse network. Centrality and density
    scores are a way to get a quick understanding of a network.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能在想，为什么我们在看介数中心性（betweenness centrality）和密度，或者想知道中心性和密度之间的关系。中心性得分有助于了解网络中一个节点的重要性。密度则告诉我们网络的整体构成。如果一个网络是密集的，那么节点之间的连接比稀疏网络要多。中心性和密度得分是快速了解网络的一种方式。
- en: Ego 2 – Marius
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自我节点 2 – 马吕斯
- en: Wikipedia lists Marius Pontmercy as another protagonist in the novel. Let’s
    look at his ego network next.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 维基百科将马吕斯·庞特马西（Marius Pontmercy）列为小说中的另一个主角。接下来，让我们看看他的自我网络。
- en: Full ego network
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 完整的自我网络
- en: 'First, we’ll construct the whole ego network without dropping the center:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将构建完整的自我网络，而不去除中心节点：
- en: '[PRE21]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Next, we’ll visualize the whole ego network:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将可视化整个自我网络：
- en: '![Figure 8.10 – Marius’ ego network](img/B17105_08_010.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![图8.10 – 马吕斯的自我网络](img/B17105_08_010.jpg)'
- en: Figure 8.10 – Marius’ ego network
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.10 – 马吕斯的自我网络
- en: 'Perfect. One thing is clear: this ego network looks completely different than
    Valjean’s. Looking at the bottom left, I can see a densely connected community
    of individuals. Looking to the right, I can see a character that **Marius** has
    fond feelings for, but no spoilers.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 完美。有一点很明确：这个自我网络看起来与瓦尔让的完全不同。看向左下角，我能看到一个密集连接的个体社区。看向右边，我能看到一个**马吕斯**（Marius）对其有深厚感情的角色，但不剧透。
- en: Ego network (dropped center)
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自我网络（去除中心）
- en: 'Let’s drop the center (ego) out of this network and see how it looks:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从这个网络中去除中心节点（自我节点），看看它是什么样子：
- en: '[PRE22]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'This will draw our ego network:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这将绘制出我们的自我网络：
- en: '![Figure 8.11 – Marius’ ego network with the center dropped](img/B17105_08_011.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![图8.11 – 马吕斯的自我网络，去除中心节点](img/B17105_08_011.jpg)'
- en: Figure 8.11 – Marius’ ego network with the center dropped
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.11 – 去除中心节点后的马吕斯自我网络
- en: Dropping the center also has drastically different results than when we did
    it for Valjean’s ego network. In Valjean’s case, four isolates detached from the
    network. In Marius’ ego network, even with the center dropped, there are no isolates.
    The members of his ego network are connected well enough that removing Marius’
    node did not break the network apart. This network is resilient.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 去除中心节点的结果与我们为瓦尔让的自我网络所做的完全不同。在瓦尔让的情况下，四个孤立节点从网络中断开。而在马吕斯的自我网络中，即使去除了中心节点，也没有孤立节点。他的自我网络中的成员连接得足够紧密，以至于去掉马吕斯的节点也没有破坏网络结构。这个网络具有很强的韧性。
- en: The densely connected community that exists in this ego network is also easily
    visible on the right. I can also see Valjean near the center of the network.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个自我网络中，密集连接的社区在右侧也很容易看见。我还可以看到接近网络中心的瓦尔让（Valjean）。
- en: Previously, we used `k_core` to remove the isolate nodes so that we could look
    at the remaining nodes more easily after dropping the center. In Marius’ ego network,
    we will skip that step. There are no isolates to remove.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，我们使用了`k_core`方法来去除孤立节点，以便在去除中心节点后能更容易查看剩余节点。在马吕斯的自我网络中，我们将跳过这一步骤。因为没有孤立节点需要去除。
- en: Alter list and amount
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更改列表和数量
- en: 'Let’s take a look at the alters that exist in Marius’ ego network:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看马吕斯自我网络中的外部节点：
- en: '[PRE23]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Next, let’s get the number of nodes and edges the easy way:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们轻松地获取节点和边的数量：
- en: '[PRE24]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Perfect. This is a very simple network.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 完美。这是一个非常简单的网络。
- en: Important alters
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 重要的外部连接
- en: 'Now, let’s see which alters sit in central positions. They are in powerful
    positions in the network:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看哪些外部节点处于中心位置。它们在网络中占据着强势地位：
- en: '[PRE25]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This will give us our degree centralities. Let’s take a closer look!
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给我们提供度中心性。让我们仔细看看！
- en: '![Figure 8.12 – Marius’ ego network alters'' degree centrality](img/B17105_08_012.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![图8.12 – 马吕斯的自我网络改变后的度中心性](img/B17105_08_012.jpg)'
- en: Figure 8.12 – Marius’ ego network alters' degree centrality
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.12 – 马吕斯的自我网络外部节点的度中心性
- en: Wow, interesting. I would have suspected that Valjean would have been one of
    the most central nodes, but several people are ahead of him. Can you guess why?
    They are part of the densely connected community, and each of them is connected
    to more members of the ego network than **Valjean**. There should be a lot of
    information sharing in this community. Looking at Valjean’s placement now, I can
    see that he is a central figure, but he is less connected than the members of
    the densely connected community.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 哇，有意思。我本以为让·瓦尔让会是最中心的节点之一，但有几个人排在他前面。你能猜到为什么吗？他们是紧密连接社区的一部分，每个人与自我网络中的成员连接的数量都超过了**瓦尔让**。这个社区应该有很多信息共享。现在看看瓦尔让的位置，我可以看到他是一个核心人物，但他连接的节点比紧密连接社区的成员要少。
- en: Do note that several nodes have the same centrality score. That can happen.
    Centrality scores are just the result of math, not magic.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，有几个节点的中心性得分相同。是的，这种情况会发生。中心性得分只是数学的结果，而不是魔法。
- en: Ego network density
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自我网络密度
- en: 'Finally, so that we can compare ego networks, let’s calculate the density score:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为了比较自我网络，让我们计算密度得分：
- en: '[PRE26]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Remember, Valjean’s ego network had a density of around `0.12`. Marius’ ego
    network is almost three times as dense. This would explain why it did not shatter
    into pieces when Marius’ central node was removed. A densely connected network
    is more resilient to breakage when central nodes are removed. This is important
    to remember when considering how real-world networks can be bolstered to provide
    greater availability. From a human standpoint, this community will continue to
    exist even when key nodes are removed.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，瓦尔让的自我网络密度大约是`0.12`。马吕斯的自我网络密度几乎是瓦尔让的三倍。这可以解释为什么在去掉马吕斯的中心节点时，网络并没有破裂。紧密连接的网络在去除中心节点时更加具有韧性。这一点在考虑如何增强现实世界网络的可用性时非常重要。从人的角度来看，即使关键节点被去除，这个社区仍然会继续存在。
- en: Ego 3 – Gavroche
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自我 3 – 加夫罗什
- en: In *Les Miserables*, Gavroche is a young boy who lives on the streets of Paris.
    Keeping that in mind, I would imagine that his ego network would look very different
    from an adult or someone who is much more connected in society. Let’s take a look.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在《悲惨世界》中，加夫罗什是一个生活在巴黎街头的小男孩。考虑到这一点，我想他的自我网络会与成年人或社会中更为联系紧密的人截然不同。让我们来看看。
- en: Full ego network
  id: totrans-154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 完整的自我网络
- en: 'First, let’s visualize the network with the center intact:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们可视化网络，保留中心节点：
- en: '[PRE27]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'This will render Gavroche’s ego network:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 这将呈现加夫罗什的完整自我网络：
- en: '![Figure 8.13 – Gavroche’s ego network](img/B17105_08_013.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.13 – 加夫罗什的自我网络](img/B17105_08_013.jpg)'
- en: Figure 8.13 – Gavroche’s ego network
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.13 – 加夫罗什的自我网络
- en: Interesting. Gavroche is well connected. Knowing that he is a child who lives
    on the streets, it’s interesting to see **Child1** and **Child2** listed at the
    top. The relationship between these three characters seems like it might be pretty
    interesting to understand. I can also see one person (**MmeBurgon**) whose node
    will become an isolate when Gavroche’s center node is dropped. Finally, I see
    what looks like two communities on the bottom left and right of the ego network.
    These should become more clear after dropping the center of this network.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣。加夫罗什的连接广泛。考虑到他是一个生活在街头的孩子，看到**Child1**和**Child2**位于顶部很有意思。这三个人物之间的关系看起来可能非常有趣。我还看到一个人（**MmeBurgon**），当去除加夫罗什的中心节点时，她的节点将变成孤立节点。最后，我看到在自我网络的左下角和右下角似乎有两个社区。这些社区在去除中心节点后应该会更加清晰。
- en: Ego network (dropped center)
  id: totrans-161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自我网络（去除中心节点）
- en: 'Let’s drop the center node and visualize the network again:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们去掉中心节点，再次可视化网络：
- en: '[PRE28]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'This will render Gavroche’s ego network with the center dropped. This should
    make the separate communities more easily identifiable:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 这将呈现加夫罗什的自我网络，去除中心节点后。这应该能让不同的社区更容易识别：
- en: '![Figure 8.14 – Gavroche’s ego network with the center dropped](img/B17105_08_014.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.14 – 加夫罗什的自我网络，去除中心节点](img/B17105_08_014.jpg)'
- en: Figure 8.14 – Gavroche’s ego network with the center dropped
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.14 – 加夫罗什的自我网络，去除中心节点
- en: Perfect. As expected, one node became an isolate, the two children formed their
    own little cluster, and the remaining connected component contains two separate
    communities of people. It could be interesting to use a community detection algorithm
    on the largest cluster, but let’s move on. It’s clear, though, that Valjean is
    positioned between these two communities.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 完美。如预期，一些节点变成了孤立点，两个孩子形成了他们自己的小群体，剩余的连接组件包含两个独立的社区。使用社区检测算法分析最大群体可能会很有趣，但让我们继续。很明显，瓦尔让位于这两个社区之间。
- en: There’s not much point in removing isolates from this network, as there is only
    one, so let’s push forward.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个网络中移除孤立点没有多大意义，因为只有一个孤立点，所以让我们继续前进。
- en: Alter list and amount
  id: totrans-169
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修改列表和数量
- en: 'Let’s see which other characters are a part of Gavroche’s ego network. In other
    words, I want to know who Gavroche knows. This will tell us which characters play
    a part in his life:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看还有哪些其他角色是加夫罗什自我网络的一部分。换句话说，我想知道加夫罗什认识谁。这将告诉我们哪些角色在他的生活中扮演了重要角色：
- en: 'Enter the following code:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下代码：
- en: '[PRE29]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'This simple line will give us all of the nodes in Gavroche’s ego network, sorted
    alphabetically:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这一简单的代码将为我们提供加夫罗什自我网络中的所有节点，按字母顺序排序：
- en: '[PRE30]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Great. I can see some familiar names, and I can clearly see `Child1` and `Child2`
    as well.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 很好。我能看到一些熟悉的名字，而且我也清楚地看到了`Child1`和`Child2`。
- en: 'Next, let’s see how many nodes and edges exist in this network, doing this
    the easy way:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们来看看这个网络中有多少个节点和边，采用简单的方法：
- en: '[PRE31]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'This should give us the following output:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给我们以下输出：
- en: '[PRE32]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Wow. This is much more connected than the protagonist’s own ego network. Valjean’s
    ego network had `36` nodes and `76` edges. How do you think having fewer nodes
    and more edges will affect this network’s density score?
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 哇。这比主角自己的自我网络要紧密得多。瓦尔让的自我网络有`36`个节点和`76`条边。你认为节点较少而边较多会如何影响这个网络的密度分数？
- en: Before we get to that, let’s look at centralities.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们进入这个话题之前，我们先看看中心性。
- en: Important alters
  id: totrans-182
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 重要的变动者
- en: 'Once again, let’s use degree centrality to see who the most connected people
    are in this ego network. These steps should start to look similar by now as they
    are. We are using different centralities to understand which nodes are important
    in our network:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们使用度中心性来看谁是这个自我网络中最有连接的人。到现在为止，这些步骤应该已经开始变得相似了。我们使用不同的中心性来理解哪些节点在我们的网络中是重要的：
- en: '[PRE33]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'This will give us a DataFrame of characters by degree centrality. Let’s look
    closer:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给我们一个按度中心性排序的角色数据框。我们仔细看看：
- en: '![Figure 8.15 – Gavroche’s ego network alters'' degree centrality](img/B17105_08_015.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![图8.15 – 加夫罗什的自我网络变更后的度中心性](img/B17105_08_015.jpg)'
- en: Figure 8.15 – Gavroche’s ego network alters' degree centrality
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.15 – 加夫罗什的自我网络变更后的度中心性
- en: Wow, **Enjoiras** is one highly connected individual, and there are several
    other highly connected individuals as well. We can see them in the especially
    well-connected community.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 哇，**恩乔伊拉斯**是一个高度连接的人，还有其他几个高度连接的人。我们可以看到他们在特别紧密的社区中。
- en: Ego network density
  id: totrans-189
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自我网络密度
- en: 'Finally, let’s calculate density so that we can compare ego networks:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们计算密度，以便比较自我网络：
- en: '[PRE34]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: That is very interesting. Gavroche is a kid who lives on the streets of Paris,
    but his social network is denser than any of the others that we have seen before.
    Valjean’s ego network density was around `0.12`, Marius’ was around `0.33`, and
    Gavroche’s is even higher. I never would have expected this. If I read this story,
    I am going to pay close attention to this character. He seems well connected,
    and I wonder how that plays out in the story.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 这真有趣。加夫罗什是一个生活在巴黎街头的孩子，但他的社交网络比我们之前看到的任何一个都要密集。瓦尔让的自我网络密度大约是`0.12`，马吕斯的是`0.33`，而加夫罗什的更高。我从没想到过这一点。如果我读这本书，我会特别关注这个角色。他看起来非常有联系，我很好奇这在故事中的表现如何。
- en: Ego 4 – Joly
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自我4 – 乔利
- en: Near the beginning of this chapter, I chose four individuals for creating ego
    networks. The first three had high PageRank scores, and I specifically chose someone
    with a lower PageRank score for the fourth, as I was hoping for a drastically
    different ego network than the other three.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的开头，我选择了四个人来创建自我网络。前三个有较高的PageRank分数，而我特意选择了一个PageRank分数较低的人作为第四个，因为我希望能得到一个与其他三个截然不同的自我网络。
- en: Joly is a medicine student, and I wonder if this will affect his ego network.
    Students often socialize with other students, so I’ll investigate a few of his
    direct connections.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 乔利是一个医学学生，我想知道这是否会影响他的自我网络。学生通常会与其他学生社交，所以我会调查一下他的一些直接连接。
- en: Full ego network
  id: totrans-196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 完整的自我网络
- en: 'First, let’s create and visualize an ego network with the center intact:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们创建并可视化一个保持中心不变的自我网络：
- en: '[PRE35]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: This will render Jolys ego network.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 这将展示乔利的自我网络。
- en: '![Figure 8.16 – Joly’s ego network](img/B17105_08_016.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.16 – 乔利的自我网络](img/B17105_08_016.jpg)'
- en: Figure 8.16 – Joly’s ego network
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.16 – 乔利的自我网络
- en: Wow. Very often, when visualizing networks, one will just jump out at me as
    being really unique. Of the four that we have done for this chapter, this one
    stands out. It does not look like a typical ego network. It is densely connected.
    Everybody in Joly’s ego network is well connected, and if we were to remove Joly’s
    node, the ego network would likely change very little. Before we do this, let’s
    take a look at a few of these individuals to see whether any of the others are
    either medicine students or members of Les Amis de l’ABC, which is an association
    of revolutionary students that Joly is a part of.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 哇，通常在可视化网络时，总会有一个网络给我留下特别深刻的印象，觉得它特别独特。在这一章我们做过的四个网络中，这个网络最为突出。它看起来不像典型的自我网络，而是一个密集连接的网络。乔利的自我网络中的每个人都与其他人紧密相连。如果我们移除乔利的节点，这个自我网络可能几乎不会发生变化。在此之前，我们先看看这些人物中的一些，看看是否有其他人是医学学生或“革命学生友会”的成员，乔利正是这个组织的一员。
- en: Bossuet
  id: totrans-203
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 博苏埃
- en: Bossuet Lesgle is known as the unluckiest student and is a member of Les Amis
    de l’ABC. Being both a student and a member of the revolutionary students, it
    makes sense that he is connected to Joly.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 博苏埃·莱斯格尔被称为最不幸的学生，也是“革命学生友会”（Les Amis de l’ABC）的成员。作为一名学生和革命学生的成员，乔利与他有联系是合乎逻辑的。
- en: Enjoiras
  id: totrans-205
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 恩乔拉斯
- en: Enjoiras is the leader of Les Amis de l’ABC. This connection also makes sense.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 恩乔拉斯是“革命学生友会”（Les Amis de l’ABC）的领导人。这一联系也是合情合理的。
- en: Bahoret
  id: totrans-207
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 巴霍雷特
- en: Bahoret is another member of Les Amis de l’ABC.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 巴霍雷特是“革命学生友会”（Les Amis de l’ABC）的另一名成员。
- en: Gavroche
  id: totrans-209
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 加夫罗什
- en: Gavroche does not appear to be a member of Les Amis de l’ABC, but he assists
    in fighting alongside them.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 加夫罗什似乎不是“革命学生友会”（Les Amis de l’ABC）的成员，但他协助与他们并肩作战。
- en: Even without knowing much of the story or even much about the individual characters,
    we can easily identify members of the same community by inspecting whole and ego
    networks as well as communities.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 即使我们对故事或人物了解不多，我们也能通过检查整体网络、自我网络以及社区，轻松识别同一社区的成员。
- en: Ego network (dropped center)
  id: totrans-212
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自我网络（去除中心）
- en: 'Now, let’s drop the center out of the ego network and see whether my hypothesis
    is correct that the ego network will not change very much because it is densely
    connected:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将中心从自我网络中去除，看看我的假设是否正确，即这个自我网络不会发生太大变化，因为它是密集连接的：
- en: '[PRE36]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'This will draw Joly’s ego network with the center dropped. If there are separate
    communities in this network, they will be shown separately as clusters. If there
    is only one community, then that community will show as a single cluster:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 这将绘制出去除中心的乔利自我网络。如果该网络中存在独立的社区，它们将作为群集单独展示。如果只有一个社区，那么该社区将作为一个单一的群集展示：
- en: '![Figure 8.17 – Joly’s ego network with the center dropped](img/B17105_08_017.jpg)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.17 – 去除中心的乔利自我网络](img/B17105_08_017.jpg)'
- en: Figure 8.17 – Joly’s ego network with the center dropped
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.17 – 去除中心的乔利自我网络
- en: That’s very interesting. With Joly removed, the ego network is definitely intact,
    and central individuals remain central. This is a resilient network, and as they
    are a group of revolutionaries, it would be in their best interests to be resilient
    for their revolution to stand a chance.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 这很有趣。去除乔利后，自我网络仍然完整，核心人物依旧是核心。这个网络具有很强的韧性，作为革命者，他们的网络具有韧性是有意义的，因为这样他们的革命才有机会取得成功。
- en: There are no isolates, so there is no point in denoising this network.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 这个网络没有孤立点，因此没有必要对其进行去噪处理。
- en: Alter list and amount
  id: totrans-220
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参与者列表和数量
- en: 'Let’s get a list of all of the individuals who are a part of this ego network:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们列出所有参与此自我网络的个体：
- en: '[PRE37]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'This will give us a sorted list of characters who are part of this ego network:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给我们提供一个排序后的参与者列表，这些人物是该自我网络的一部分：
- en: '[PRE38]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Compared to the other ego networks, there are very few individuals.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他自我网络相比，参与者非常少。
- en: 'Let’s get the number of nodes and edges:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来统计节点和边的数量：
- en: '[PRE39]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'This should tell us a bit about the size and complexity of this ego network:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该能让我们了解这个自我网络的规模和复杂性：
- en: '[PRE40]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: This network has fewer nodes and fewer edges than other networks we’ve looked
    at, but it is visibly denser than any of the other networks.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 这个网络的节点数和边数比我们之前分析的其他网络少，但它的密度明显大于其他网络。
- en: Important alters
  id: totrans-231
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 重要的参与者
- en: 'Let’s take a look at the most important alters in the ego network:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下自我中心网络中最重要的“改变者”：
- en: '[PRE41]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '![Figure 8.18 – Joly’s ego network alters'' degree centrality](img/B17105_08_018.jpg)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![图8.18 – Joly的自我中心网络的“改变者”的度中心性](img/B17105_08_018.jpg)'
- en: Figure 8.18 – Joly’s ego network alters' degree centrality
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.18 – Joly的自我中心网络的“改变者”的度中心性
- en: These centralities are incredible, compared to the others that we have seen.
    The centrality scores of `1.0` for `1.0` have very high-degree centralities. This
    is a well-connected network. How do you think that will affect the density score?
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们看到的其他网络相比，这些中心性得分令人难以置信。`1.0`的中心性得分表明这是一个高中心性的网络，意味着网络连接性非常好。你认为这将如何影响密度得分？
- en: Ego network density
  id: totrans-237
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自我中心网络的密度
- en: 'Let’s calculate the density of this ego network. I suspect that this ego network
    will have a very high density:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们计算一下这个自我中心网络的密度。我怀疑这个网络的密度会非常高：
- en: '[PRE42]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'That is incredibly high compared to the other density scores:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 这与其他密度得分相比，确实非常高：
- en: Valjean’s ego network had a density of around `0.12`
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Valjean的自我中心网络的密度约为`0.12`
- en: Marius’s ego network was around `0.33`
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Marius的自我中心网络的密度约为`0.33`
- en: Gavroche’s ego network was around `0.35`
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Gavroche的自我中心网络的密度约为`0.35`
- en: Joly’s ego network was around `0.86`
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Joly的自我中心网络的密度约为`0.86`
- en: That is dramatically higher than any of the other density scores.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 这个密度比其他任何密度得分都要高得多。
- en: But this makes sense. Joly is both a student and a member of a revolutionary
    group. I would expect both of these groups to be well connected with other students
    and revolutionaries.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 但这也是有道理的。Joly既是学生又是一个革命团体的成员。我预期这两个群体都会与其他学生和革命者保持良好的联系。
- en: Insights between egos
  id: totrans-247
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自我中心网络之间的洞察
- en: 'We’ve looked at four different ego networks. We could have created an ego network
    for every single node in the network, but that would have been very time-consuming.
    When I do egocentric network analysis, I typically start by shortlisting several
    nodes of interest that I would like to investigate. I am typically looking for
    something, such as the following:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 我们查看了四个不同的自我中心网络。我们本可以为网络中的每个节点创建一个自我中心网络，但那样会非常耗时。在进行自我中心网络分析时，我通常从筛选几个我感兴趣的节点开始，然后再进一步调查。我通常是在寻找一些东西，比如以下内容：
- en: Who is most connected
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 谁的连接性最强
- en: Who has the most `out_degrees`
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 谁拥有最多的`out_degrees`
- en: Who has the highest `pagerank`
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 谁的`pagerank`最高
- en: Who has a tie to known opposition
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 谁与已知的对立面有联系
- en: In this chapter, we investigated characters from the novel *Les Miserables*,
    so I purposefully chose individuals with the highest PageRank scores, as I anticipated
    that they’d have interesting ego networks. This strategy worked very well.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们研究了小说《悲惨世界》中的人物，因此我故意选择了那些具有最高PageRank得分的人物，因为我预期他们的自我中心网络会很有趣。这一策略非常有效。
- en: 'There are a few takeaways from all of this that I’d like to leave you with
    before concluding this chapter:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 在总结本章之前，我希望为你留下以下几点启示：
- en: First, it is possible to bolster a network by adding connections, and this will
    make it resilient to failure. If one node is removed, the network can remain intact
    and not shatter into pieces. This has implications for many things. For the flow
    of information to remain constant, an information-sharing network will want to
    be resilient to attack, for instance. Where else might having a network be resilient
    to failure be of value?
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，通过增加连接来增强网络是可行的，这会使网络具有抗失败能力。如果删除一个节点，网络仍然可以保持完整，而不会破裂成碎片。这对于许多事物有深远的影响。例如，为了保持信息流动的稳定，一个信息共享网络希望能抵抗攻击。除此之外，在哪些情况下拥有一个抗失败的网络会是有价值的呢？
- en: Second, removing the center node of an ego network can tell you a lot about
    the communities that exist in a network, as well as the resiliency of that network.
    When removing the center, which networks had isolates and islands? Which networks
    stayed completely intact? Which communities were we able to see?
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其次，删除自我中心网络的中心节点可以告诉你很多关于网络中存在的社区的信息，以及该网络的韧性。当我们移除中心节点时，哪些网络出现了孤立节点或孤岛？哪些网络保持了完全的完整性？我们能看到哪些社区？
- en: Let’s see what’s next.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看接下来会发生什么。
- en: Identifying other research opportunities
  id: totrans-258
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 识别其他研究机会
- en: 'When doing any kind of network analysis, it is important to know that there
    is always more that you can do; for instance, we could do the following:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行任何类型的网络分析时，了解总是有更多的操作空间是很重要的；例如，我们可以做以下几项：
- en: We could embed additional information into the graph, such as weights or node
    types (teacher, student, revolutionary, and so on)
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还可以在图中嵌入更多信息，比如权重或节点类型（教师、学生、革命者等）
- en: We could color nodes by node type for easier identification of communities
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以根据节点类型为节点上色，便于识别社区。
- en: We could size nodes by the number of degrees or the centrality score to make
    it easier to identify important nodes
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以根据节点的度数或中心性得分来调整节点大小，便于识别重要节点。
- en: We could use directed networks to understand the directionality of information
    sharing
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以使用有向网络来理解信息共享的方向性。
- en: There is always more that you can do, but it is important to know that enough
    is enough. You should use what you need. For this chapter, I originally got stuck
    trying to do too much, and I lost time trying to figure out how to do things that
    weren’t actually all that important to teaching this topic. Keep it simple and
    add only what you need and what is helpful. Add more as time permits if it is
    useful.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以做的事情永远不止这些，但重要的是知道“足够”就好。你应该只使用你需要的内容。在这一章，我一开始在做太多事情时遇到困难，浪费了时间去思考一些实际上对教学这个主题并不重要的内容。保持简单，只添加必要和有用的内容。如果有时间，添加更多有价值的内容。
- en: Summary
  id: totrans-265
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned a new kind of network analysis, called egocentric
    network analysis. I tend to call egocentric networks *ego networks*, to be concise.
    We’ve learned that we don’t have to analyze a network as a whole. We can analyze
    it in parts, allowing us to investigate a node's placement in the context of its
    relationship with another node.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你学到了一种新的网络分析方法，叫做自我中心网络分析。我习惯将自我中心网络简称为*自我网络*，以便简洁。我们学到的是，我们不必将网络作为整体进行分析。我们可以将其拆分成部分，这样可以研究某个节点在与另一个节点关系中的位置。
- en: Personally, egocentric network analysis is my favorite form of network analysis
    because I enjoy investigating the level of the individual things that exist in
    a network. Whole network analysis is useful as a broad map, but with egocentric
    network analysis, you can gain a really intimate understanding of the various
    relationships between things that exist in a network. I hope you enjoyed reading
    and learning from this chapter as much as I enjoyed writing it. I hope this inspires
    you to learn more.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 就个人而言，自我中心网络分析是我最喜欢的网络分析方法，因为我喜欢研究网络中个体层面的事物。整体网络分析作为一个广阔的地图很有用，但通过自我中心网络分析，你可以对网络中存在的各种关系有更深入的了解。希望你和我一样享受这一章的阅读和学习。我也希望这能激发你更深入的学习。
- en: In the next chapter, we will dive into community detection algorithms!
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将深入探讨社区检测算法！
