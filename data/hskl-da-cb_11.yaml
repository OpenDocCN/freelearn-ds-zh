- en: Chapter 11. Visualizing Data
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章 数据可视化
- en: 'In this chapter, we will cover the following visualization techniques:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下可视化技术：
- en: Plotting a line chart using Google's Chart API
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Google 的 Chart API 绘制折线图
- en: Plotting a pie chart using Google's Chart API
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Google 的 Chart API 绘制饼图
- en: Plotting bar graphs using Google's Chart API
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Google 的 Chart API 绘制条形图
- en: Displaying a line graph using gnuplot
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 gnuplot 显示折线图
- en: Displaying a scatter plot of two-dimensional points
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示二维点的散点图
- en: Interacting with points in three-dimensional space
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与三维空间中的点进行交互
- en: Visualizing a graph network
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可视化图形网络
- en: Customizing the looks of a graph network diagram
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义图形网络图的外观
- en: Rendering a bar graph in JavaScript using D3.js
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 D3.js 在 JavaScript 中渲染条形图
- en: Rendering a scatter plot in JavaScript using D3.js
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 D3.js 在 JavaScript 中渲染散点图
- en: Diagramming a path from a list of vectors
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从向量列表中绘制路径图
- en: Introduction
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引言
- en: '![Introduction](img/ch11.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![引言](img/ch11.jpg)'
- en: Visualization is important in all steps of data analysis. Whether we are just
    getting acquainted with the data or have completed our analysis, it is always
    useful to have an intuitive understanding through a graphical aid. Fortunately,
    Haskell comes with a plethora of libraries to facilitate this endeavor.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 可视化在数据分析的所有步骤中都非常重要。无论我们是刚开始接触数据，还是已经完成了分析，通过图形辅助工具直观地理解数据总是非常有用的。幸运的是，Haskell
    提供了许多库来帮助实现这一目标。
- en: In this chapter, we will cover recipes to produce line, pie, bar, and scatter
    plots using various APIs. Going beyond typical data visualization, we will also
    learn to draw network diagrams. Moreover, in the last recipe, we will describe
    navigation directions by drawing vectors on a blank canvas.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍使用各种 API 绘制折线图、饼图、条形图和散点图的技巧。除了常见的数据可视化，我们还将学习如何绘制网络图。此外，在最后一个技巧中，我们将通过在空白画布上绘制向量来描述导航方向。
- en: Plotting a line chart using Google's Chart API
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Google 的 Chart API 绘制折线图
- en: We will use the convenient Google Chart API ([https://developers.google.com/chart](https://developers.google.com/chart))
    to render a line chart. This API produces a URL that points to a PNG image of
    the graph. This lightweight URL can be easier to handle than the actual image
    itself.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用方便的 Google Chart API ([https://developers.google.com/chart](https://developers.google.com/chart))
    来渲染折线图。该 API 会生成指向图表 PNG 图像的 URL。这个轻量级的 URL 比实际的图像更易于处理。
- en: Our data will come from a text file that contains a list of numbers separated
    by lines. The code will generate a URL to present this data.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的数据将来自一个文本文件，其中包含按行分隔的数字列表。代码将生成一个 URL 来展示这些数据。
- en: Getting ready
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Install the `GoogleChart` package as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 按如下方式安装 `GoogleChart` 包：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Create a file called `input.txt` with numbers inserted line by line as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为 `input.txt` 的文件，并按如下方式逐行插入数字：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How to do it…
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现…
- en: 'Import the Google Chart API library as follows:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按如下方式导入 Google Chart API 库：
- en: '[PRE2]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Gather the input from the text file and parse it as a list of integers:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从文本文件中获取输入，并将其解析为整数列表：
- en: '[PRE3]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Create a chart URL out of the image by setting the attributes appropriately,
    as shown in the following code snippet:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过适当设置属性，创建一个图表 URL，如以下代码片段所示：
- en: '[PRE4]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Running the program will output a Google Chart URL as follows:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行程序将输出一个 Google Chart URL，如下所示：
- en: '[PRE5]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Ensure an Internet connection exists and navigate to that URL to view the chart,
    as shown in the following screenshot:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 确保网络连接正常，并导航到该 URL 查看图表，如下图所示：
- en: '![How to do it…](img/6331OS_11_01.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![如何实现…](img/6331OS_11_01.jpg)'
- en: How it works…
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: Google encodes all graph data within the URL. The more complicated our graph,
    the longer the Google Chart URL. In this recipe, we use the `encodeDataSimple`
    function that creates a relatively shorter URL, but only accepts integers between
    0 and 61 inclusive.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Google 会将所有图表数据编码到 URL 中。我们的图表越复杂，Google 图表 URL 就越长。在这个技巧中，我们使用 `encodeDataSimple`
    函数，它创建了一个相对较短的 URL，但只接受 0 到 61 之间的整数（包括 0 和 61）。
- en: There's more…
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容…
- en: 'To visualize a more detailed graph that allows data to have decimal places,
    we can use the `encodeDataText :: RealFrac a => [[a]] -> ChartData` function instead.
    This function allows for decimal numbers between 0 and 100 inclusive.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '为了可视化一个更详细的图表，允许数据具有小数位数，我们可以使用 `encodeDataText :: RealFrac a => [[a]] -> ChartData`
    函数。这将允许 0 到 100 之间的十进制数（包含 0 和 100）。'
- en: To represent larger ranges of integers in a graph, we should use the `encodeDataExtended`
    function, which supports integers between 0 and 4095 inclusive.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在图表中表示更大的整数范围，我们应使用 `encodeDataExtended` 函数，它支持 0 到 4095 之间的整数（包括 0 和 4095）。
- en: More information about the Google Charts Haskell package can be found at [https://hackage.haskell.org/package/hs-gchart](https://hackage.haskell.org/package/hs-gchart).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 Google Charts Haskell 包的更多信息，请访问 [https://hackage.haskell.org/package/hs-gchart](https://hackage.haskell.org/package/hs-gchart)。
- en: See also
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: This recipe required a connection to the Internet to view a graph. If we wish
    to perform all actions locally, refer to the *Displaying a line graph using gnuplot*
    recipe. Other Google API recipes can include *Plotting a pie chart using Google's
    Chart API* and *Plotting bar graphs using Google's Chart API*.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方需要连接互联网以查看图表。如果我们希望在本地执行所有操作，请参考 *使用 gnuplot 显示折线图* 配方。其他 Google API 配方包括
    *使用 Google 的 Chart API 绘制饼图* 和 *使用 Google 的 Chart API 绘制条形图*。
- en: Plotting a pie chart using Google's Chart API
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Google 的 Chart API 绘制饼图
- en: The Google Chart API provides a very elegant-looking pie chart interface. We
    can generate images of well-designed pie charts by feeding our input and labels
    properly, as described in this recipe.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Google Chart API 提供了一个外观非常优雅的饼图界面。通过正确地输入数据和标签，我们可以生成设计精良的饼图，如本配方所示。
- en: Getting ready
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Install the GoogleChart package as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 按如下方式安装 GoogleChart 包：
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Create a file called `input.txt` with numbers inserted line by line as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为 `input.txt` 的文件，每行插入数字，格式如下：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How to do it…
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Import the Google Chart API library as follows:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按如下方式导入 Google Chart API 库：
- en: '[PRE8]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Gather the input from the text file and parse it as a list of integers, as
    shown in the following code snippet:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从文本文件中收集输入并将其解析为整数列表，如以下代码片段所示：
- en: '[PRE9]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Print out the Google Chart URL from the pie chart attributes shown in the following
    code:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从以下代码中显示的饼图属性中打印出 Google Chart URL：
- en: '[PRE10]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Running the program will output a Google Chart URL as follows:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行程序将输出如下的 Google Chart URL：
- en: '[PRE11]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Ensure an Internet connection exists and navigate to that URL to view the chart
    shown in the following image:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 确保有网络连接，并访问该网址以查看下图所示的图表：
- en: '![How to do it…](img/6331OS_11_02.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作…](img/6331OS_11_02.jpg)'
- en: How it works…
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何运作…
- en: 'Google encodes all graph data within the URL. The more complicated the graph,
    the longer the Google Chart URL. In this recipe, we use the `encodeDataSimple`
    function, which creates a relatively shorter URL, but only accepts integers between
    0 and 61 inclusive. The legends of the pie chart are specified by the `setLabels
    :: [String] -> PieChart -> PieChart` function in the same order as the data.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 'Google 将所有图表数据编码在 URL 中。图表越复杂，Google Chart URL 越长。在此配方中，我们使用 `encodeDataSimple`
    函数，它创建一个相对较短的 URL，但仅接受 0 到 61（包括 0 和 61）之间的整数。饼图的图例由 `setLabels :: [String] ->
    PieChart -> PieChart` 函数按照与数据相同的顺序指定。'
- en: There's more…
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'To visualize a more detailed graph that allows data to have decimal places,
    we can use the `encodeDataText :: RealFrac a => [[a]] -> ChartData` function instead.
    This function allows decimal numbers between 0 and 100 inclusive.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '为了可视化一个包含小数的更详细的图表，我们可以使用 `encodeDataText :: RealFrac a => [[a]] -> ChartData`
    函数。该函数支持 0 到 100（包括 0 和 100）之间的小数。'
- en: To represent larger ranges of integers in a graph, we should use the `encodeDataExtended`
    function, which supports integers between 0 and 4095 inclusive.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在图表中表示更大的整数范围，我们应使用 `encodeDataExtended` 函数，该函数支持 0 到 4095（包括 0 和 4095）之间的整数。
- en: More information about the Google Charts Haskell package can be found at [https://hackage.haskell.org/package/hs-gchart](https://hackage.haskell.org/package/hs-gchart).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 Google Charts Haskell 包的更多信息，请访问 [https://hackage.haskell.org/package/hs-gchart](https://hackage.haskell.org/package/hs-gchart)。
- en: See also
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: '*Plotting a line chart using Google''s Chart API*'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用 Google 的 Chart API 绘制折线图*'
- en: '*Plotting bar graphs using Google''s Chart API*'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用 Google 的 Chart API 绘制条形图*'
- en: Plotting bar graphs using Google's Chart API
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Google 的 Chart API 绘制条形图
- en: The Google Chart API also has great support for bar graphs. In this recipe,
    we will produce a bar graph of two sets of inputs in the same diagram to show
    the usefulness of this API.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Google Chart API 也很好地支持条形图。在本配方中，我们将生成包含两组输入数据的条形图，以展示该 API 的实用性。
- en: Getting ready
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Install the `GoogleChart` package as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 按如下方式安装 `GoogleChart` 包：
- en: '[PRE12]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Create two files called `input1.txt` and `input2.txt` with numbers inserted
    line by line as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 创建两个文件，名为 `input1.txt` 和 `input2.txt`，每行插入数字，格式如下：
- en: '[PRE13]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: How to do it…
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Import the Google Chart API library as follows:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按如下方式导入 Google Chart API 库：
- en: '[PRE14]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Gather the two input values from both the text files and parse them as two
    separate lists of integers, as shown in the following code snippet:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从两个文本文件中获取两个输入值，并将它们解析为两个独立的整数列表，如以下代码片段所示：
- en: '[PRE15]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Set up the bar chart too and print out the Google Chart URL as follows:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同样设置柱状图并打印出 Google Chart URL，如下所示：
- en: '[PRE16]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Running the program will output a Google Chart URL as follows:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行程序将输出一个 Google Chart URL，如下所示：
- en: '[PRE17]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Ensure an Internet connection exists and navigate to that URL to view the following
    chart:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 确保存在互联网连接并导航到该 URL 以查看以下图表：
- en: '![How to do it…](img/6331OS_11_03.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![如何实现…](img/6331OS_11_03.jpg)'
- en: How it works…
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现…
- en: Google encodes all graph data within the URL. The more complicated the graph,
    the longer the Google Chart URL. In this recipe, we use the `encodeDataSimple`
    function, which creates a relatively shorter URL, but only accepts integers between
    0 and 61 inclusive.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Google 将所有图表数据编码在 URL 中。图表越复杂，Google Chart URL 就越长。在本教程中，我们使用`encodeDataSimple`函数，它创建了一个相对较短的
    URL，但仅接受 0 到 61 之间的整数。
- en: There's more…
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'To visualize a more detailed graph that allows data to have decimal places,
    we can use the `encodeDataText :: RealFrac a => [[a]] -> ChartData` function instead.
    This function allows decimal numbers between 0 and 100 inclusive.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '若要可视化更详细的图表并允许数据具有小数位，我们可以改用 `encodeDataText :: RealFrac a => [[a]] -> ChartData`
    函数。该函数允许介于 0 和 100 之间的小数。'
- en: To represent larger ranges of integers in a graph, we should use the `encodeDataExtended`
    function, which supports integers between 0 and 4095 inclusive.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 若要在图表中表示更大的整数范围，我们应使用 `encodeDataExtended` 函数，该函数支持介于 0 和 4095 之间的整数。
- en: More information about the Google Charts Haskell package can be found at [https://hackage.haskell.org/package/hs-gchart](https://hackage.haskell.org/package/hs-gchart).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 Google Charts Haskell 包的更多信息，请访问 [https://hackage.haskell.org/package/hs-gchart](https://hackage.haskell.org/package/hs-gchart)。
- en: See also
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: To use other Google Chart tools, refer to the *Plotting a pie chart using Google's
    Chart API* and *Plotting a line chart using Google's Chart API* recipes.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 若要使用其他 Google Chart 工具，请参考*使用 Google Chart API 绘制饼图*和*使用 Google Chart API 绘制折线图*的教程。
- en: Displaying a line graph using gnuplot
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 gnuplot 显示折线图
- en: An Internet connection is typically unnecessary for plotting a graph. So, in
    this recipe, we will demonstrate how to make a line graph locally.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 绘制图表通常不需要互联网连接。因此，在本教程中，我们将展示如何在本地绘制折线图。
- en: Getting ready
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The library used in this recipe uses gnuplot to render the graph. We should
    first install gnuplot.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程使用的库通过 gnuplot 渲染图表。我们应首先安装 gnuplot。
- en: 'On Debian-based systems such as Ubuntu, we can install it using `apt-get` as
    follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在基于 Debian 的系统（如 Ubuntu）上，我们可以使用 `apt-get` 安装，如下所示：
- en: '[PRE18]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The official place to download gnuplot is on its main website available at [http://www.gnuplot.info](http://www.gnuplot.info).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: gnuplot 的官方下载地址是其官方网站 [http://www.gnuplot.info](http://www.gnuplot.info)。
- en: 'After gnuplot is set up, install the `EasyPlot` Haskell library using cabal
    as follows:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 gnuplot 后，使用 cabal 安装 `EasyPlot` Haskell 库，如下所示：
- en: '[PRE19]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: How to do it…
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现…
- en: 'Import the `EasyPlot` library as follows:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式导入`EasyPlot`库：
- en: '[PRE20]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Define a list of numbers to plot as follows:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个数字列表进行绘图，如下所示：
- en: '[PRE21]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Plot the chart on the `X11` window as shown in the following code snippet.
    The `X11` X Window System terminal is used by many Linux-based machines. If running
    on Windows, we should instead use the `Windows` terminal. On Mac OS X, we should
    replace `X11` with `Aqua`:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如以下代码片段所示，在`X11`窗口上绘制图表。`X11` X Window 系统终端被许多基于 Linux 的机器使用。如果在 Windows 上运行，我们应使用`Windows`终端。在
    Mac OS X 上，我们应将`X11`替换为`Aqua`：
- en: '[PRE22]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Running the code produces a `plot1.dat` datafile as well as a visual graph
    from the selected terminal, as shown in the following screenshot:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 运行代码将生成一个 `plot1.dat` 数据文件，并从选定的终端显示可视化图表，如下图所示：
- en: '![How to do it…](img/6331OS_11_04.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![如何实现…](img/6331OS_11_04.jpg)'
- en: How it works…
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现…
- en: The `EasyPlot` library translates all user-specified code into a language understood
    by gnuplot to graph the data.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`EasyPlot`库将所有用户指定的代码转换为 gnuplot 可理解的语言，用于绘制数据图表。'
- en: See also
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: To use the Google Chart API instead of easy plot, refer to the *Plotting a line
    chart using Google's Chart API* recipe.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 若要使用 Google Chart API 而不是 easy plot，请参考*使用 Google Chart API 绘制折线图*的教程。
- en: Displaying a scatter plot of two-dimensional points
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示二维点的散点图
- en: This recipe covers a quick and easy way to visualize a list of 2D points as
    scattered dots within an image.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程介绍了一种快速简单的方法，可以将 2D 点列表可视化为图像中的散点。
- en: Getting ready
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The library used in this recipe uses gnuplot to render the graph. We should
    first install gnuplot.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱中使用的库通过 gnuplot 来渲染图表。我们应先安装 gnuplot。
- en: 'On Debian-based systems such as Ubuntu, we can install it using `apt-get` as
    follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在基于 Debian 的系统（如 Ubuntu）上，我们可以使用 `apt-get` 安装，方法如下：
- en: '[PRE23]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The official place to download gnuplot is from its main website, [http://www.gnuplot.info](http://www.gnuplot.info).
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 下载 gnuplot 的官方网站是 [http://www.gnuplot.info](http://www.gnuplot.info)。
- en: 'After gnuplot is set up, install the `easyplot` Haskell library using cabal
    as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置好 gnuplot 后，使用 cabal 安装 `easyplot` Haskell 库，如下所示：
- en: '[PRE24]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Also, install a helper CSV package as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，安装一个辅助的 CSV 包，如下所示：
- en: '[PRE25]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Also, create two comma-separated files, `input1.csv` and `input2.csv`, which
    represent two separate sets of points as follows:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，创建两个逗号分隔的文件 `input1.csv` 和 `input2.csv`，这两个文件表示两组独立的点，如下所示：
- en: '[PRE26]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: How to do it…
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'Import the relevant packages as follows:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入相关的包，如下所示：
- en: '[PRE28]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Define a helper function to convert a CSV record into a tuple of numbers as
    follows:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个辅助函数将 CSV 记录转换为数字元组，如下所示：
- en: '[PRE29]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Read the two CSV files as follows:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 读取这两个 CSV 文件，如下所示：
- en: '[PRE30]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Plot both the datasets alongside each other on the same graph with different
    colors. Use the `X11` terminal for the X Window System used by many Linux-based
    machines, as shown in the following lines of code. If running on Windows, the
    terminal to use is `Windows`. On Mac OS X, we should replace `X11` with `Aqua`:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在同一图表上，使用不同颜色将两个数据集并排绘制。对于许多基于 Linux 的机器，使用 `X11` 终端来支持 X Window 系统，如下代码所示。如果在
    Windows 上运行，则使用 `Windows` 终端。在 Mac OS X 上，应将 `X11` 替换为 `Aqua`：
- en: '[PRE31]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Run the program to display the graph shown in the following screenshot:![How
    to do it…](img/6331OS_11_05.jpg)
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行程序以显示下方截图中所示的图表：![操作方法…](img/6331OS_11_05.jpg)
- en: How it works…
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The `EasyPlot` library translates all user-specified code into language understood
    by gnuplot to graph the data. The last argument to plot can take in a list of
    many datasets to graph.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`EasyPlot` 库将所有用户指定的代码转换为 gnuplot 可理解的语言来绘制数据。plot 函数的最后一个参数可以接受多个数据集的列表来绘制图形。'
- en: See also
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: To visualize 3D points, refer to the *Interacting with points in a three-dimensional
    space* recipe.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 要可视化 3D 点，请参阅 *与三维空间中的点交互* 这一食谱。
- en: Interacting with points in a three-dimensional space
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与三维空间中的点交互
- en: When visualizing points in 3D space, it is often very useful to rotate, zoom,
    and pan the representation interactively. This recipe demonstrates how to plot
    data in 3D and interact with it in real time.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在可视化 3D 空间中的点时，交互式地旋转、缩放和平移表示非常有用。本食谱演示了如何在 3D 中绘制数据并实时交互。
- en: Getting ready
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The library used in this recipe uses gnuplot to render the graph. We should
    first install gnuplot.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱中使用的库通过 gnuplot 来渲染图表。我们应先安装 gnuplot。
- en: 'On Debian-based systems such as Ubuntu, we can install it using `apt-get` as
    follows:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在基于 Debian 的系统（如 Ubuntu）上，我们可以使用 `apt-get` 安装，方法如下：
- en: '[PRE32]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The official place to download gnuplot is from its main website available at
    [http://www.gnuplot.info](http://www.gnuplot.info).
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 下载 gnuplot 的官方网站是 [http://www.gnuplot.info](http://www.gnuplot.info)。
- en: 'After gnuplot is set up, install the `easyplot` Haskell library using Cabal
    as follows:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置好 gnuplot 后，使用 Cabal 安装 `easyplot` Haskell 库，如下所示：
- en: '[PRE33]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Also, install a helper CSV package as follows:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，安装一个辅助的 CSV 包，如下所示：
- en: '[PRE34]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Also, create two comma-separated files, `input1.csv` and `input2.csv`, which
    represent two separate sets of points as follows:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，创建两个逗号分隔的文件 `input1.csv` 和 `input2.csv`，这两个文件表示两组独立的点，如下所示：
- en: '[PRE35]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: How to do it…
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'Import the relevant packages as follows:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入相关的包，如下所示：
- en: '[PRE37]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Define a helper function to convert a CSV record into a tuple of numbers as
    follows:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个辅助函数将 CSV 记录转换为数字元组，如下所示：
- en: '[PRE38]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Read the two CSV files as follows:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 读取这两个 CSV 文件，如下所示：
- en: '[PRE39]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Plot the data using the `plot''` function, which leaves gnuplot running to
    allow for an `Interactive` option. Use the `X11` terminal for the X Window System
    used by many Linux-based machines, as shown in the following lines of code. If
    running on Windows, the terminal to use is `Windows`. On Mac OS X, we should replace
    `X11` with `Aqua`:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `plot'` 函数绘制数据，该函数会保持 gnuplot 运行以启用 `Interactive` 选项。对于许多基于 Linux 的机器，使用
    `X11` 终端来支持 X Window 系统，如下代码所示。如果在 Windows 上运行，则使用 `Windows` 终端。在 Mac OS X 上，应将
    `X11` 替换为 `Aqua`：
- en: '[PRE40]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '![How to do it…](img/6331OS_11_06.jpg)'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![操作方法…](img/6331OS_11_06.jpg)'
- en: How it works…
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The `EasyPlot` library translates all user-specified code into a language understood
    by gnuplot to graph the data. The last argument to plot can take in a list of
    many datasets to graph. By using the `plot'` function, we leave gnuplot running
    so that we can interact with the graph by rotating, zooming, and panning the three-dimensional
    visual.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '`EasyPlot` 库将所有用户指定的代码转换成 gnuplot 能理解的语言，以绘制数据图表。最后一个参数 `plot` 可以接受一个数据集列表进行绘图。通过使用
    `plot''` 函数，我们可以让 gnuplot 持续运行，这样我们可以通过旋转、缩放和平移三维图像与图形进行交互。'
- en: See also
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: To visualize 2D points, refer to the *Displaying a scatter plot of two-dimensional
    points* recipe.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 要可视化二维点，请参考 *显示二维点的散点图* 示例。
- en: Visualizing a graph network
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可视化图形网络
- en: Graphical networks of edges and nodes can be difficult to debug or comprehend,
    and thus, visualization helps tremendously. In this recipe, we will convert a
    graph data structure into an image of nodes and edges.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 边和节点的图形化网络可能很难调试或理解，因此可视化可以极大地帮助我们。在本教程中，我们将把一个图形数据结构转换成节点和边的图像。
- en: Getting ready
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To use Graphviz, the graph visualization library, we must first install it
    on the machine. The official website of Graphviz contains the download and installation
    instructions ([http://www.graphviz.org](http://www.graphviz.org)). On Debian-based
    operating systems, Graphviz can be installed using `apt-get` as follows:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Graphviz 图形可视化库，我们首先需要在机器上安装它。Graphviz 的官方网站包含了下载和安装说明（[http://www.graphviz.org](http://www.graphviz.org)）。在基于
    Debian 的操作系统上，可以通过以下方式使用 `apt-get` 安装 Graphviz：
- en: '[PRE41]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Next, we need to install the Graphviz Haskell bindings from Cabal as follows:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要通过 Cabal 安装 Graphviz 的 Haskell 绑定，具体方法如下：
- en: '[PRE42]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: How to do it…
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Import the relevant libraries as follows:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入相关的库，如下所示：
- en: '[PRE43]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Create a graph defined by identifying the pairs of nodes that form edges using
    the following lines of code:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码行创建一个通过识别形成边的节点对来定义的图形：
- en: '[PRE44]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Set the graph to use the default parameters as follows:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置图形使用默认参数，如下所示：
- en: '[PRE45]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Print out the dot representation of the graph to the terminal as follows:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如下所示，将图形的 dot 表示打印到终端：
- en: '[PRE46]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Run the code to obtain a dot representation of the graph, which can be saved
    in a separate file as follows:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码以获取图形的 dot 表示，并将其保存到一个单独的文件中，如下所示：
- en: '[PRE47]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Run the `dot` command provided by Graphviz on this file to render an image
    as follows:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对该文件运行 Graphviz 提供的 `dot` 命令，以渲染出如下的图像：
- en: '[PRE48]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: We can now view the resulting `graph.png` file shown in the following screenshot:![How
    to do it…](img/6331OS_11_07.jpg)
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以查看生成的 `graph.png` 文件，截图如下所示：![如何操作…](img/6331OS_11_07.jpg)
- en: How it works…
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作…
- en: The `graphToDot` function converts a graph into the DOT language for describing
    graphs. This is a text serialization for a graph, which can be read by the Graphviz
    `dot` command and converted into a viewable image.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphToDot` 函数将图形转换为 DOT 语言，以描述图形。这是图形的文本序列化形式，可以被 Graphviz 的 `dot` 命令读取并转换成可视化图像。'
- en: There's more…
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容…
- en: 'In this recipe, we used the `dot` command. The Graphviz website also describes
    other commands that convert DOT language text into viewable images:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们使用了 `dot` 命令。Graphviz 网站还描述了其他可以将 DOT 语言文本转换成可视化图像的命令：
- en: '*dot - "hierarchical" or layered drawings of directed graphs. This is the default
    tool to use if edges have directionality.*'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '*dot - "层级"或分层绘制有向图。如果边具有方向性，这是默认的工具。*'
- en: '*neato - "spring model'''' layouts. This is the default tool to use if the
    graph is not too large (about 100 nodes) and you don''t know anything else about
    it. Neato attempts to minimize a global energy function, which is equivalent to
    statistical multidimensional scaling.*'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '*neato - "弹簧模型"布局。如果图形不太大（约 100 个节点）且你对图形没有其他了解，这是默认的工具。Neato 尝试最小化一个全局能量函数，这等同于统计多维尺度化。*'
- en: '*fdp - "spring model'''' layouts similar to those of neato, but does this by
    reducing forces rather than working with energy.*'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '*fdp - "弹簧模型"布局，类似于 neato，但通过减少力来完成布局，而不是使用能量。*'
- en: '*sfdp - multiscale version of fdp for the layout of large graphs.*'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '*sfdp - fdp 的多尺度版本，用于大图的布局。*'
- en: '*twopi - radial layouts, after Graham Wills 97\. Nodes are placed on concentric
    circles depending their distance from a given root node.*'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '*twopi - 径向布局，基于 Graham Wills 97。节点根据与给定根节点的距离，放置在同心圆上。*'
- en: '*circo - circular layout, after Six and Tollis 99, Kauffman and Wiese 02\.
    This is suitable for certain diagrams of multiple cyclic structures, such as certain
    telecommunications networks.*'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '*circo - 圆形布局，参考 Six 和 Tollis 99，Kauffman 和 Wiese 02。这适用于某些包含多个循环结构的图，如某些电信网络。*'
- en: See also
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: To further change the look and feel of a graph, refer to the *Customizing the
    looks of a graph network diagram* recipe.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 要进一步更改图形的外观和感觉，请参考 *自定义图形网络图的外观* 这一食谱。
- en: Customizing the looks of a graph network diagram
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义图形网络图的外观
- en: To better present the data, we will cover how to customize the design of a graphical
    network diagram.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地呈现数据，我们将介绍如何定制图形网络图的设计。
- en: Getting ready
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To use Graphviz, the graph visualization library, we must first install it
    on the machine. The official website of Graphviz contains the download and installation
    instructions available at [http://www.graphviz.org](http://www.graphviz.org).
    On Debian-based operating systems, Graphviz can be installed using `apt-get` as
    follows:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Graphviz 图形可视化库，我们首先需要在机器上安装它。Graphviz 的官方网站包含了下载和安装说明，网址为 [http://www.graphviz.org](http://www.graphviz.org)。在基于
    Debian 的操作系统上，可以使用`apt-get`命令来安装 Graphviz，方法如下：
- en: '[PRE49]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Next, we need to install the Graphviz Haskell bindings from Cabal as follows:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要从 Cabal 安装 Graphviz Haskell 绑定，方法如下：
- en: '[PRE50]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: How to do it…
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Import the relevant functions and libraries to customize a Graphviz graph as
    follows:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入相关的函数和库，以自定义 Graphviz 图形，方法如下：
- en: '[PRE51]'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Define our custom graph by first specifying all the nodes, and then specifying
    which pairs of nodes form edges, as shown in the following code snippet:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下代码片段，首先指定所有节点，然后指定哪些节点对形成边，来定义我们的自定义图形：
- en: '[PRE52]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Define our own custom graph parameters as follows:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式定义我们自己的自定义图形参数：
- en: '[PRE53]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Let the graphing engine know that we want the edges to be directed arrows as
    follows:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让图形引擎知道我们希望边缘是有向箭头，方法如下：
- en: '[PRE54]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Set our own global attributes for a graph, node, and edge appearance as follows:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置图形、节点和边缘外观的全局属性如下：
- en: '[PRE55]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Format nodes in our own way as follows:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照我们自己的方式格式化节点如下：
- en: '[PRE56]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Format edges in our own way as follows:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照我们自己的方式格式化边缘如下：
- en: '[PRE57]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Define the customizations as shown in the following code snippet:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下代码片段定义自定义内容：
- en: '[PRE58]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Print the DOT language representation of the graph to the terminal.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将图形的 DOT 语言表示打印到终端。
- en: '[PRE59]'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Run the code to obtain a `dot` representation of the graph, which can be saved
    in a separate file as follows:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码以获取图形的`dot`表示，可以将其保存在单独的文件中，方法如下：
- en: '[PRE60]'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Run the `dot` command provided by Graphviz on this file to render an image
    as follows:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此文件上运行 Graphviz 提供的`dot`命令，以渲染图像，方法如下：
- en: '[PRE61]'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'We can now view the resulting `graph.png` file, as shown in the following screenshot:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以查看生成的`graph.png`文件，如下所示的截图：
- en: '![How to do it…](img/6331OS_11_08.jpg)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作…](img/6331OS_11_08.jpg)'
- en: How it works…
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: The `graphToDot` function converts a graph into the DOT language to describe
    graphs. This is a text serialization for a graph that can be read by the Graphviz
    `dot` command and converted into a viewable image.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphToDot` 函数将图形转换为 DOT 语言，以描述图形。这是一种图形的文本序列化格式，可以被 Graphviz 的 `dot` 命令读取，并转换为可视化图像。'
- en: There's more…
  id: totrans-242
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多……
- en: Every possible customization option for the graph, nodes, and edges can be found
    on the `Data.GraphViz.Attributes.Complete` package documentation available at
    [http://hackage.haskell.org/package/graphviz-2999.12.0.4/docs/Data-GraphViz-Attributes-Complete.html](http://hackage.haskell.org/package/graphviz-2999.12.0.4/docs/Data-GraphViz-Attributes-Complete.html).
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 图形、节点和边缘的所有可能自定义选项都可以在 `Data.GraphViz.Attributes.Complete` 包文档中找到，网址为 [http://hackage.haskell.org/package/graphviz-2999.12.0.4/docs/Data-GraphViz-Attributes-Complete.html](http://hackage.haskell.org/package/graphviz-2999.12.0.4/docs/Data-GraphViz-Attributes-Complete.html)。
- en: Rendering a bar graph in JavaScript using D3.js
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 D3.js 在 JavaScript 中渲染条形图
- en: We will use the portable JavaScript library called `D3.js` to draw a bar graph.
    This allows us to easily create a web page that contains a graph from the Haskell
    code.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用名为`D3.js`的便携式 JavaScript 库来绘制条形图。这使得我们能够轻松地创建一个包含图表的网页，该图表来自 Haskell 代码。
- en: Getting ready
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: An Internet connection is necessary for the setup.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 设置过程中需要连接互联网。
- en: 'Install the `d3js` Haskell library as follows:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下方式安装 `d3js` Haskell 库：
- en: '[PRE62]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Create a website template to hold the generated JavaScript code as follows:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个网站模板，用于承载生成的 JavaScript 代码，方法如下：
- en: '[PRE63]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'The JavaScript code will be as follows:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 代码如下：
- en: '[PRE64]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: How to do it…
  id: totrans-254
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Import the relevant packages as follows:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式导入相关的包：
- en: '[PRE65]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Create a bar chart using the `bars` function. Feed the specified values and
    number of bars to draw, as shown in the following code snippet:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`bars`函数创建条形图。输入指定的值和要绘制的条形数量，如以下代码片段所示：
- en: '[PRE66]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Define the values and number of bars to draw as follows:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义要绘制的条形图的值和数量如下：
- en: '[PRE67]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Use the `reify` function to generate the JavaScript `D3.js` text out of the
    data. Write the JavaScript to a file named `generated.js` as follows:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`reify`函数从数据生成JavaScript `D3.js`代码。将JavaScript写入名为`generated.js`的文件，如下所示：
- en: '[PRE68]'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: With both the `index.html` file and the `generated.js` file existing alongside
    each other, we can open the `index.html` web page using a browser that supports
    JavaScript, and see the resulting graph shown as follows:![How to do it…](img/6331OS_11_09.jpg)
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`index.html`文件和`generated.js`文件并排存在的情况下，我们可以使用支持JavaScript的浏览器打开`index.html`网页，并看到如下所示的图表：![如何操作…](img/6331OS_11_09.jpg)
- en: How it works…
  id: totrans-264
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The `D3.js` library is a JavaScript library used for creating elegant visuals
    and graphs. We use our browser to run the JavaScript code, and it also acts as
    our graph-rendering engine.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '`D3.js`库是一个用于创建优雅可视化和图表的JavaScript库。我们使用浏览器运行JavaScript代码，它也充当我们的图表渲染引擎。'
- en: See also
  id: totrans-266
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: For another use of `D3.js`, refer to the *Rendering a scatter plot in JavaScript
    using D3.js* recipe.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个`D3.js`的用法，请参阅*使用D3.js在JavaScript中渲染散点图*食谱。
- en: Rendering a scatter plot in JavaScript using D3.js
  id: totrans-268
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用D3.js在JavaScript中渲染散点图
- en: We will use the portable JavaScript library called `D3.js` to draw a scatter
    plot. This allows us to easily create a web page that contains a graph from the
    Haskell code.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用名为`D3.js`的便携式JavaScript库来绘制散点图。这样我们就可以轻松地创建一个包含图表的网页，该图表来自Haskell代码。
- en: Getting ready
  id: totrans-270
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: An Internet connection is necessary to perform this setup.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 进行此设置需要互联网连接。
- en: 'Install the `d3js` Haskell library as follows:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 如下所示安装`d3js` Haskell库：
- en: '[PRE69]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Create a website template to hold the generated JavaScript code as follows:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个网站模板来承载生成的JavaScript代码，如下所示：
- en: '[PRE70]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'The JavaScript code will be as follows:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript代码如下所示：
- en: '[PRE71]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: How to do it…
  id: totrans-278
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Import the relevant libraries as follows:'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入相关库，如下所示：
- en: '[PRE72]'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Define the scatter plot and feed in the list of points as follows:'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义散点图并输入点列表，如下所示：
- en: '[PRE73]'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Define a list of points to plot as follows:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义要绘制的点列表，如下所示：
- en: '[PRE74]'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Use the `reify` function to generate the JavaScript `D3.js` text out of the
    data. Write the JavaScript to a file named `generated.js` as follows:'
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`reify`函数从数据生成JavaScript `D3.js`代码。将JavaScript写入名为`generated.js`的文件，如下所示：
- en: '[PRE75]'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: With both the `index.html` and `generated.js` files existing alongside each
    other, we can open the `index.html` web page using a browser that supports JavaScript,
    and see the resulting graph shown as follows:![How to do it…](img/6331OS_11_10.jpg)
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`index.html`和`generated.js`文件并排存在的情况下，我们可以使用支持JavaScript的浏览器打开`index.html`网页，并看到如下所示的图表：![如何操作…](img/6331OS_11_10.jpg)
- en: How it works…
  id: totrans-288
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The `graphToDot` function converts a graph into the DOT language to describe
    graphs. This is a text serialization for a graph, which can be read by the Graphviz
    `dot` command and be converted into a viewable image.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphToDot`函数将图表转换为DOT语言来描述图表。这是图表的文本序列化格式，可以通过Graphviz的`dot`命令读取并转换为可视化图像。'
- en: See also
  id: totrans-290
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: For another use of `D3.js`, refer to the *Rendering a bar graph in JavaScript
    using D3.js* recipe.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个`D3.js`的用法，请参阅*使用D3.js在JavaScript中渲染条形图*食谱。
- en: Diagramming a path from a list of vectors
  id: totrans-292
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从向量列表绘制路径
- en: 'In this recipe, we will use the `diagrams` package to draw a path from driving
    directions. We simply categorize all possible travel headings into eight cardinal
    directions with an associated distance. We use directions provided by Google Maps
    in the following screenshot and reconstruct the directions from a text file:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将使用`diagrams`包来从驾驶路线中绘制路径。我们将所有可能的旅行方向分类为八个基本方向，并附上相应的距离。我们使用下图中Google
    Maps提供的方向，并从文本文件中重建这些方向：
- en: '![Diagramming a path from a list of vectors](img/6331OS_11_12.jpg)'
  id: totrans-294
  prefs: []
  type: TYPE_IMG
  zh: '![从向量列表绘制路径](img/6331OS_11_12.jpg)'
- en: Getting ready
  id: totrans-295
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Install the `diagrams` library as follows:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 如下所示安装`diagrams`库：
- en: '[PRE76]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Create a text file called `input.txt` that contains one of the eight cardinal
    directions followed by the distance, with each step separated by a new line:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`input.txt`的文本文件，其中包含八个基本方向之一，后面跟着距离，每一步用新的一行分隔：
- en: '[PRE77]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: How to do it…
  id: totrans-300
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Import the relevant libraries as follows:'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入相关库，如下所示：
- en: '[PRE78]'
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Draw a line-connected path from a list of vectors as follows:'
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从一系列向量中绘制一个连接的路径，如下所示：
- en: '[PRE79]'
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Read a list of directions, represent it as a list of vectors, and draw the
    path as follows:'
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 读取一系列方向，将其表示为向量列表，并按如下方式绘制路径：
- en: '[PRE80]'
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'Define a helper function to create a vector out of a direction and its corresponding
    distance as follows:'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个辅助函数，根据方向及其对应的距离创建一个向量，如下所示：
- en: '[PRE81]'
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'Compile the code and run it as follows:'
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译代码并按如下方式运行：
- en: '[PRE82]'
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '![How to do it…](img/6331OS_11_11.jpg)'
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/6331OS_11_11.jpg)'
- en: How it works…
  id: totrans-312
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The `mainWith` functions takes in a `Diagram` type and generates the corresponding
    image file when invoked in the terminal. We obtain the `Diagram` from our `drawPath`
    function, which glues together vectors by their offsets.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '`mainWith` 函数接收一个 `Diagram` 类型，并在终端中调用时生成相应的图像文件。我们通过 `drawPath` 函数获得 `Diagram`，该函数通过偏移量将向量连接在一起。'
