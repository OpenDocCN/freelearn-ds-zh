- en: Linear Algebra
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 线性代数
- en: Both linear algebra and statistics are the foundation for any kind of data analysis
    activity. Statistics help us to get an initial descriptive understanding and make
    inferences from data. In the previous chapter, we have understood descriptive
    and inferential statistical measures for data analysis. On the other side, linear
    algebra is one of the fundamental mathematical subjects that is the core foundation
    for any data professional. Linear algebra is useful for working with vectors and
    matrices. Most of the data is available in the form of either a vector or a matrix.
    In-depth knowledge of linear algebra helps data analysts and data scientists understand
    the workflow of machine learning and deep learning algorithms, giving them the
    flexibility to design and modify the algorithms as per your business needs. For
    example, if you want to work with **principal component analysis** (**PCA**) you
    must know the basics of Eigenvalues and Eigenvectors, or if you want to develop
    a recommender system you must know **singular value decomposition** (**SVD**).
    A solid background in mathematics and statistics will facilitate a smoother transition
    into the world of data analytics.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 线性代数和统计学是任何数据分析活动的基础。统计学帮助我们获得初步的描述性理解，并从数据中做出推断。在上一章中，我们已经理解了数据分析的描述性和推断性统计度量。另一方面，线性代数是数据专业人员的核心基础之一。线性代数对于处理向量和矩阵非常有用。大多数数据以向量或矩阵的形式存在。深入理解线性代数有助于数据分析师和数据科学家理解机器学习和深度学习算法的工作流程，使他们能够根据业务需求灵活地设计和修改算法。例如，如果你想使用**主成分分析**（**PCA**），你必须了解特征值和特征向量的基础知识；或者如果你想开发一个推荐系统，你必须了解**奇异值分解**（**SVD**）。扎实的数学和统计学背景将有助于更顺利地过渡到数据分析领域。
- en: This chapter mainly focuses on the core concepts of linear algebra, such as
    polynomials, determinant, matrix inverse; solving linear equations; eigenvalues
    and eigenvectors; SVD; random numbers; binomial and normal distributions; normality
    tests; and masked arrays. We can also perform these operations in Python using
    the NumPy and SciPy packages. NumPy and SciPy both offer the `linalg` package
    for linear algebra operations.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章主要关注线性代数的核心概念，如多项式、行列式、矩阵逆；解线性方程；特征值和特征向量；SVD；随机数；二项分布和正态分布；正态性检验；以及掩码数组。我们还可以使用
    Python 的 NumPy 和 SciPy 包来执行这些操作。NumPy 和 SciPy 都提供了用于线性代数运算的 `linalg` 包。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Fitting to polynomials with NumPy
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 NumPy 拟合多项式
- en: Determinant
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 行列式
- en: Finding the rank of a matrix
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找矩阵的秩
- en: Matrix inverse using NumPy
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 NumPy 计算矩阵逆
- en: Solving linear equations using NumPy
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 NumPy 解线性方程
- en: Decomposing a matrix using SVD
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 SVD 分解矩阵
- en: Eigenvectors and Eigenvalues using NumPy
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 NumPy 计算特征向量和特征值
- en: Generating random numbers
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成随机数
- en: Binomial distribution
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 二项分布
- en: Normal distribution
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正态分布
- en: Testing normality of data using SciPy
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 SciPy 检验数据的正态性
- en: Creating a masked array using the `numpy.ma` subpackage
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `numpy.ma` 子包创建掩码数组
- en: Technical requirements
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'For this chapter, the following technical information is available:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的以下技术信息可供参考：
- en: 'You can find the code and the dataset at the following GitHub link: [https://github.com/PacktPublishing/Python-Data-Analysis-Third-Edition/tree/master/Chapter04](https://github.com/PacktPublishing/Python-Data-Analysis-Third-Edition/tree/master/Chapter04).'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在以下 GitHub 链接找到代码和数据集：[https://github.com/PacktPublishing/Python-Data-Analysis-Third-Edition/tree/master/Chapter04](https://github.com/PacktPublishing/Python-Data-Analysis-Third-Edition/tree/master/Chapter04)。
- en: All the code blocks are available in `ch4.ipynb`.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有的代码块都可以在 `ch4.ipynb` 中找到。
- en: In this chapter, we will use the NumPy, SciPy, Matplotlib, and Seaborn Python
    libraries.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章将使用 NumPy、SciPy、Matplotlib 和 Seaborn Python 库。
- en: Fitting to polynomials with NumPy
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 NumPy 拟合多项式
- en: Polynomials are mathematical expressions with non-negative strategies. Examples
    of polynomial functions are linear, quadratic, cubic, and quartic functions. NumPy
    offers the `polyfit()` function to generate polynomials using least squares. This
    function takes *x*-coordinate, *y-*coordinate, and degree as parameters, and returns
    a list of polynomial coefficients.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 多项式是具有非负策略的数学表达式。多项式函数的例子包括线性函数、二次函数、立方函数和四次函数。NumPy 提供了 `polyfit()` 函数来通过最小二乘法生成多项式。该函数接受
    *x* 坐标、*y* 坐标和阶数作为参数，并返回一个多项式系数列表。
- en: NumPy also offers `polyval()` to evaluate the polynomial at given values. This
    function takes coefficients of polynomials and arrays of points and returns resultant
    values of polynomials. Another function is `linspace()`, which generates a sequence
    of equally separated values. It takes the start, stop, and the number of values
    between the start-stop range and returns equally separated values in the closed
    interval.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 还提供了 `polyval()` 函数来在给定的值上评估多项式。该函数接受多项式的系数和点的数组，并返回多项式的结果值。另一个函数是 `linspace()`，它生成一系列等间隔的值。它接受起始值、终止值和起止范围之间的值的个数，并返回闭区间内等间隔的值。
- en: 'Let''s see an example to generate and evaluate polynomials using NumPy, as
    follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个例子，使用 NumPy 生成并评估多项式，如下所示：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This results in the following output:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '![](img/c79900f3-28a4-4245-a644-e23c87980cf7.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c79900f3-28a4-4245-a644-e23c87980cf7.png)'
- en: The graph shown in the preceding screenshot will change in each iteration using
    the program written previously. The reason for this fluctuation is the random
    value generation of vectors.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的截图中显示的图形将在每次迭代中发生变化，使用的是之前编写的程序。这种波动的原因是向量的随机值生成。
- en: 'Let''s jump on to the next topic: *Determinant*. We will perform most of the
    linear algebra operations using the `numpy.linalg` subpackage. NumPy offers the
    `linalg` subpackage for linear algebra. We can use linear algebra for matrix operations
    such as inverse, rank, eigenvalues, eigenvectors, solving linear equations, and
    performing linear regression.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进入下一个话题：*行列式*。我们将使用 `numpy.linalg` 子包执行大部分的线性代数运算。NumPy 提供了 `linalg` 子包来进行线性代数运算。我们可以利用线性代数进行矩阵操作，如求逆、秩、特征值、特征向量、求解线性方程组以及执行线性回归。
- en: Determinant
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行列式
- en: 'The determinant is the most essential concept of linear algebra. It is a scalar
    value that is calculated from a square matrix. The determinant is a fundamental
    operation that helps us in the inverse matrix and in solving linear equations.
    Determinants are only calculated for square matrices. A square matrix has an equal
    number of rows and columns. The `numpy.linalg` subpackage provides the `det()`
    function for calculating the determinant of a given input matrix. Let''s compute
    the determinant in the following code block:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 行列式是线性代数中最基本的概念。它是一个标量值，由方阵计算得出。行列式是一个基础运算，它帮助我们进行逆矩阵的计算以及解线性方程组。行列式仅适用于方阵，方阵的行数和列数相等。`numpy.linalg`
    子包提供了 `det()` 函数，用于计算给定输入矩阵的行列式。让我们在下面的代码块中计算行列式：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This results in the following output:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the preceding code block, we have calculated the determinant of a given matrix
    using the `np.linalg.det()` method. Let's understand one more concept of linear
    algebra, which is rank, and compute it using the `numpy.linalg` subpackage.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码块中，我们使用 `np.linalg.det()` 方法计算了给定矩阵的行列式。现在让我们理解另一个线性代数的概念——秩，并使用 `numpy.linalg`
    子包计算它。
- en: Finding the rank of a matrix
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 寻找矩阵的秩
- en: 'Rank is a very important concept when it comes to solving linear equations.
    The rank of a matrix represents the amount of information that is kept in the
    matrix. A lower rank means less information, and a higher rank means a high amount
    of information. Rank can be defined as the number of independent rows or columns
    of a matrix. The `numpy.linalg` subpackage provides the `matrix_rank()` function.
    The `matrix_rank()` function takes the matrix as input and returns the computed
    rank of the matrix. Let''s see an example of the `matrix_rank()` function in the
    following code block:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 秩是解决线性方程组时一个非常重要的概念。矩阵的秩表示矩阵中保留的信息量。秩越低表示信息越少，秩越高表示信息量越大。秩可以定义为矩阵中独立行或列的数量。`numpy.linalg`
    子包提供了 `matrix_rank()` 函数。`matrix_rank()` 函数接受矩阵作为输入，并返回计算出的矩阵秩。让我们通过下面的代码块来看一个
    `matrix_rank()` 函数的例子：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This results in the following output:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In the preceding code block, the `matrix_rank()` function of `numpy.linalg`
    is used to generate the rank of the matrix. Let''s see another important concept
    of linear algebra: matrix inverse.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码块中，`numpy.linalg` 的 `matrix_rank()` 函数用于生成矩阵的秩。现在让我们来看线性代数中的另一个重要概念：矩阵逆。
- en: Matrix inverse using NumPy
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 NumPy 计算矩阵的逆
- en: 'A matrix is a rectangular sequence of numbers, expressions, and symbols organized
    in rows and columns. The multiplication of a square matrix and its inverse is
    equal to the identity matrix I. We can write it using the following equation:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 矩阵是由行和列组织的数字、表达式和符号的矩形序列。一个方阵与其逆矩阵相乘的结果是单位矩阵I。我们可以用以下方程表示：
- en: AA^(-1)= I
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: AA^(-1) = I
- en: 'The `numpy.linalg` subpackage provides a function for an inverse operation:
    the `inv()` function. Let''s invert a matrix using the `numpy.linalg` subpackage.
    First, we create a matrix using the `mat()` function and then find the inverse
    of the matrix using the `inv()` function, as illustrated in the following code
    block:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.linalg`子包提供了一个用于求逆的函数：`inv()`函数。让我们使用`numpy.linalg`子包来求矩阵的逆。首先，我们使用`mat()`函数创建一个矩阵，然后使用`inv()`函数求矩阵的逆，如下面的代码块所示：'
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This results in the following output:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the preceding code block, we have computed the inverse of a matrix using
    the `inv()` function of the `numpy.linalg` subpackage.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码块中，我们使用`numpy.linalg`子包的`inv()`函数计算了矩阵的逆。
- en: If the given input matrix is not a square matrix and a singular matrix, it will
    raise a `LinAlgError` error. If you want, you can test the `inv()` function manually.
    I will leave this as an activity for you.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果给定的输入矩阵不是方阵或是奇异矩阵，它将引发`LinAlgError`错误。如果你愿意，可以手动测试`inv()`函数。我将把这个任务留给你自己完成。
- en: Solving linear equations using NumPy
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用NumPy求解线性方程
- en: Matrix operations can transform one vector into another vector. These operations
    will help us to find the solution for linear equations. NumPy provides the `solve()`
    function to solve linear equations in the form of Ax=B. Here, A is the n*n matrix,
    B is a one-dimensional array and x is the unknown one-dimensional vector. We will
    also use the `dot()` function to compute the dot product of two floating-point
    number arrays.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 矩阵操作可以将一个向量转换为另一个向量。这些操作将帮助我们找到线性方程的解。NumPy提供了`solve()`函数来求解形式为Ax = B的线性方程，其中A是n*n矩阵，B是一个一维数组，x是未知的一维向量。我们还将使用`dot()`函数来计算两个浮点数数组的点积。
- en: 'Let''s solve an example of linear equations, as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来解一个线性方程的例子，如下所示：
- en: 'Create matrix A and array B for a given equation, like this:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为给定方程创建矩阵A和数组B，如下所示：
- en: x1+x2 = 200
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: x1 + x2 = 200
- en: 3x1+2x2 = 450
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 3x1 + 2x2 = 450
- en: This is illustrated in the following code block
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这在下面的代码块中进行了说明
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This results in the following output:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In the preceding code block, we have created a 2*2 matrix and a vector.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码块中，我们创建了一个2*2矩阵和一个向量。
- en: 'Solve a linear equation using the `solve()` function, like this:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`solve()`函数求解线性方程，如下所示：
- en: '[PRE9]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This results in the following output:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '[PRE10]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In the preceding code block, we have solved a linear equation using the `solve()`
    function of the `numpy.linalg` subpackage.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码块中，我们使用`numpy.linalg`子包的`solve()`函数求解了一个线性方程。
- en: 'Check the solution using the `dot()` function, like this:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`dot()`函数检查解，如下所示：
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This results in the following output:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In the preceding code block, we have assessed the solution using the `dot()`
    function. You can see the dot product of A and the solution is equivalent to B.
    Till now, we have seen the determinant, rank, inverse, and how to solve linear
    equations. Let's jump to SVD for matrix decomposition.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码块中，我们使用`dot()`函数评估了解决方案。你可以看到，A和解的点积等于B。到目前为止，我们已经看到了行列式、秩、逆矩阵以及如何解线性方程。接下来，我们将讨论用于矩阵分解的SVD。
- en: Decomposing a matrix using SVD
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用SVD分解矩阵
- en: Matrix decomposition is the process of splitting a matrix into parts. It is
    also known as matrix factorization. There are lots of matrix decomposition methods
    available such as **lower-upper** (**LU**) decomposition, **QR** decomposition
    (where **Q** is orthogonal and **R** is upper-triangular), Cholesky decomposition,
    and SVD.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 矩阵分解是将一个矩阵拆分为多个部分的过程，也称为矩阵因式分解。常见的矩阵分解方法包括**下三角-上三角**（**LU**）分解、**QR**分解（其中**Q**是正交矩阵，**R**是上三角矩阵）、Cholesky分解和SVD。
- en: 'Eigenanalysis decomposes a matrix into vectors and values. SVD decomposes a
    matrix into the following parts: singular vectors and singular values. SVD is
    widely used in signal processing, computer vision, **natural language processing**
    (**NLP**), and machine learning—for example, topic modeling and recommender systems
    where SVD is widely accepted and implemented in real-life business solutions.
    Have a look at the following:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 特征分析将矩阵分解为向量和值。SVD将矩阵分解为以下几部分：奇异向量和奇异值。SVD在信号处理、计算机视觉、**自然语言处理**（**NLP**）和机器学习中被广泛应用——例如在主题建模和推荐系统中，SVD在现实商业解决方案中被广泛接受和实现。请看以下内容：
- en: '![](img/5532eee3-3544-47cb-a869-9f70db9ea0c0.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5532eee3-3544-47cb-a869-9f70db9ea0c0.png)'
- en: 'Here, *A* is a *m* x *n* left singular matrix, Σ is a *n x n* diagonal matrix,
    *V* is a *m x n* right singular matrix, and *V^T* is the transpose of the V. The
    `numpy.linalg` subpackage offers the `svd()` function to decompose a matrix. Let''s
    see an example of SVD, as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，*A*是一个*m* x *n*的左奇异矩阵，Σ是一个*n x n*的对角矩阵，*V*是一个*m x n*的右奇异矩阵，*V^T*是V的转置矩阵。`numpy.linalg`子包提供了`svd()`函数来分解矩阵。我们来看一个SVD的例子，如下所示：
- en: '[PRE13]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This results in the following output:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '[PRE14]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In the preceding code block, we have decomposed the given matrix into three
    parts: `Left Singular Matrix`, `Diagonal Matrix`, and `Right Singular Matrix`
    using the `svd()` function of the `scipy.linalg` subpackage.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码块中，我们使用`scipy.linalg`子包的`svd()`函数将给定的矩阵分解成三个部分：`左奇异矩阵`、`对角矩阵`和`右奇异矩阵`。
- en: Eigenvectors and Eigenvalues using NumPy
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用NumPy计算特征向量和特征值
- en: Eigenvectors and Eigenvalues are the tools required to understand linear mapping
    and transformation. Eigenvalues are solutions to the equation Ax = λx. Here, A
    is the square matrix, x is the eigenvector, and λ is eigenvalues. The `numpy.linalg`
    subpackage provides two functions, `eig()` and `eigvals()`. The `eig()` function
    returns a tuple of eigenvalues and eigenvectors, and `eigvals()` returns the eigenvalues.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 特征向量和特征值是理解线性映射和变换所需的工具。特征值是方程Ax = λx的解，其中A是方阵，x是特征向量，λ是特征值。`numpy.linalg`子包提供了两个函数，`eig()`和`eigvals()`。`eig()`函数返回特征值和特征向量的元组，而`eigvals()`返回特征值。
- en: Eigenvectors and eigenvalues are the core fundamentals of linear algebra. Eigenvectors
    and eigenvalues are used in SVD, spectral clustering, and PCA.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 特征向量和特征值是线性代数的核心基础。特征向量和特征值被广泛应用于SVD、谱聚类和PCA。
- en: 'Let''s compute the eigenvectors and eigenvalues of a matrix, as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们计算一个矩阵的特征向量和特征值，如下所示：
- en: 'Create the matrix using the NumPy `mat()` function, like this:'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用NumPy的`mat()`函数创建矩阵，如下所示：
- en: '[PRE15]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This results in the following output:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '[PRE16]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Compute eigenvectors and eigenvalues using the `eig()` function, like this:'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`eig()`函数计算特征向量和特征值，如下所示：
- en: '[PRE17]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This results in the following output:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '[PRE18]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In the preceding two blocks, we have created a 2*2 matrix and computed eigenvectors
    and eigenvalues using the `eig()` function of the `numpy.linalg` subpackage.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的两个代码块中，我们创建了一个2*2的矩阵，并使用`numpy.linalg`子包的`eig()`函数计算了特征向量和特征值。
- en: 'Compute eigenvalues using the `eigvals()` function, like this:'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`eigvals()`函数计算特征值，如下所示：
- en: '[PRE19]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This results in the following output:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '[PRE20]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In the preceding code snippet, we have computed the eigenvalues using the `eigvals()`
    function of the `numpy.linalg` subpackage. After performing eigendecomposition,
    we will see how to generate random numbers and a matrix.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们使用`numpy.linalg`子包的`eigvals()`函数计算了特征值。完成特征分解后，我们将看到如何生成随机数和矩阵。
- en: Generating random numbers
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成随机数
- en: Random numbers offer a variety of applications such as Monte Carlo simulation,
    cryptography, initializing passwords, and stochastic processes. It is not easy
    to generate real random numbers, so in reality, most applications use pseudo-random
    numbers. Pseudo numbers are adequate for most purposes except for some rare cases.
    Random numbers can be generated from discrete and continuous data. The `numpy.random()`
    function will generate a random number matrix for the given input size of the
    matrix.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 随机数在许多应用中都有使用，比如蒙特卡罗模拟、加密学、密码初始化和随机过程。生成真正的随机数并不容易，因此实际上大多数应用程序使用伪随机数。伪随机数对于大多数目的都是足够的，除非遇到一些极少数的特殊情况。随机数可以从离散和连续数据中生成。`numpy.random()`函数将为给定输入矩阵的大小生成一个随机数矩阵。
- en: The core random number generator is based on the Mersenne Twister algorithm
    (refer to [https://en.wikipedia.org/wiki/Mersenne_twister](https://en.wikipedia.org/wiki/Mersenne_twister)).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 核心随机数生成器基于梅森旋转算法（参考 [https://en.wikipedia.org/wiki/Mersenne_twister](https://en.wikipedia.org/wiki/Mersenne_twister)）。
- en: 'Let''s see one example of generating random numbers, as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个生成随机数的示例，如下所示：
- en: '[PRE21]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This results in the following output:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '[PRE22]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: In the preceding example, we have generated a 3*3 random matrix using the `numpy.random.random()`
    function. Let's try other distributions for random number generation, such as
    binomial and normal distributions.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们使用 `numpy.random.random()` 函数生成了一个3*3的随机矩阵。让我们尝试其他分布来生成随机数，例如二项分布和正态分布。
- en: Binomial distribution
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 二项分布
- en: 'Binomial distribution models the number of repeated trials with the same probability
    on each trial. Here, each trial is independent and has two possible outcomes—success
    and failure—that can occur on each client. The following formula represents the
    binomial distribution:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 二项分布模型描述了在每次试验中都有相同概率的重复试验的次数。在这里，每次试验都是独立的，且每次试验有两个可能的结果——成功和失败——这些结果可能出现在每个客户上。以下公式表示二项分布：
- en: '![](img/c0985d39-d707-444f-babe-484dfac674b4.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c0985d39-d707-444f-babe-484dfac674b4.png)'
- en: Here, p and q are the probabilities of success and failure, n is the number
    of trials, and X is the number of the desired output.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，p 和 q 分别是成功和失败的概率，n 是试验次数，X 是期望的输出数量。
- en: The `numpy.random` subpackage provides a `binomial()` function that generates
    samples based on the binomial distribution for certain parameters, number of trials,
    and the probability of success.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.random` 子包提供了一个 `binomial()` 函数，用于基于二项分布生成样本，该分布需要指定参数：试验次数和成功概率。'
- en: 'Let''s consider a 17th-century gambling house where you can bet on eight tossing
    pieces and nine coins being flipped. If you get five or more heads then you win,
    otherwise you will lose. Let''s write code for this simulation for 1,000 coins
    using the `binomial()` function, as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个17世纪的赌博馆，你可以在这里对八个投掷物和九个硬币的翻转进行下注。如果你得到五个或更多的正面朝上，则你获胜，否则你将失败。让我们编写代码，模拟1,000个硬币的投掷，使用
    `binomial()` 函数，如下所示：
- en: '[PRE23]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'This results in the following output:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '![](img/af8abb7c-edbe-42cc-a935-f7d0276d38f8.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/af8abb7c-edbe-42cc-a935-f7d0276d38f8.png)'
- en: In the preceding code block, we first created the `cash_balance` array of size
    500 with zero values and updated the first value with 500\. Then, we generated
    values between 0 to 9 using the `binomial()` function. After this, we updated
    the `cash_balance` array based on the results of coin tosses and plotted the cash
    balance using the Matplotlib library.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码块中，我们首先创建了一个大小为500且初始值为0的 `cash_balance` 数组，并将第一个值更新为500。然后，我们使用 `binomial()`
    函数生成了0到9之间的值。之后，我们根据掷硬币的结果更新了 `cash_balance` 数组，并使用 Matplotlib 库绘制了现金余额。
- en: 'In each execution, the code will generate different results or random walks.
    If you want to make walking constant, you need to use the seed value in the `binomial()`
    function. Let''s try another form of distribution for the random number generator:
    normal distribution.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在每次执行中，代码将生成不同的结果或随机行走。如果你希望行走保持一致，你需要在 `binomial()` 函数中使用种子值。让我们尝试另一种形式的分布来生成随机数：正态分布。
- en: Normal distribution
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 正态分布
- en: Normal distributions occur frequently in real-life scenarios. A normal distribution
    is also known as a bell curve because of its characteristic shape. The probability
    density function models continuous distribution. The `numpy.random` subpackage
    offers lots of continuous distributions such as beta, gamma, logistic, exponential,
    multivariate normal, and normal distribution. The `normal()` functions find samples
    from Gaussian or normal distribution.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 正态分布在现实生活中经常出现。正态分布也被称为钟形曲线，因为它的特征形状。概率密度函数描述了连续分布。`numpy.random` 子包提供了许多连续分布，如贝塔分布、伽马分布、逻辑分布、指数分布、多元正态分布和正态分布。`normal()`
    函数可以从高斯分布或正态分布中生成样本。
- en: 'Let''s write code for visualizing the normal distribution using the `normal()`
    function, as follows:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编写代码，通过 `normal()` 函数可视化正态分布，如下所示：
- en: '[PRE24]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'This results in the following output:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '![](img/c4c38ec6-d2a7-47d0-9857-7884ae05e388.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4c38ec6-d2a7-47d0-9857-7884ae05e388.png)'
- en: Here, we have generated random values using the `normal()` function of the `numpy.
    random` subpackage and displayed the values using a histogram and line plot or
    bell curve or theoretical **probability density function** (**PDF**) with mean
    0 and standard deviation of 1.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用`numpy.random`子包的`normal()`函数生成随机值，并使用直方图和线性图或钟形曲线（即理论上的**概率密度函数**（**PDF**））将值进行展示，均值为0，标准差为1。
- en: Testing normality of data using SciPy
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用SciPy进行数据的正态性检验
- en: A normal distribution is commonly used at a wide scale in scientific and statistical
    operations. As per the central limit theorem, as sample size increases, the sample
    distribution approaches a normal distribution. The normal distribution is well
    known and easy to use. In most cases, it is recommended to confirm the normality
    of data, especially in parametric methods, assuming that the data is Gaussian-distributed.
    There are lots of normality tests that exist in the literature such as the Shapiro-Wilk
    test, the Anderson-Darling test, and the D'Agostino-Pearson test. The `scipy.stats`
    package offers most of the tests for normality.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 正态分布在科学和统计操作中广泛应用。根据中心极限定理，随着样本量的增加，样本分布趋近于正态分布。正态分布因其已知且易于使用而广为人知。在大多数情况下，建议确认数据的正态性，特别是在假设数据符合高斯分布的参数方法中。文献中存在许多正态性检验方法，如Shapiro-Wilk检验、Anderson-Darling检验和D'Agostino-Pearson检验。`scipy.stats`包提供了大多数正态性检验方法。
- en: 'In this section, we will learn how to apply normality tests on data. We are
    using three samples of small-, medium-, and large-sized random data. Let''s generate
    the data samples for all three samples using the `normal()` function, as follows:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何对数据应用正态性检验。我们使用三种样本：小型样本、中型样本和大型样本的随机数据。我们将使用`normal()`函数为这三种样本生成数据，如下所示：
- en: '[PRE25]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We will now explore various techniques to check the normality of the data:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将探索多种方法来检查数据的正态性：
- en: '**Using a histogram:** A histogram is the easiest and fastest method to check
    the normality of the data. It divides the data into bins and counts the observation
    into each bin. Finally, it visualizes the data. Here, we are using `distplot()`
    from the `seaborn` library to plot the histogram and kernel density estimation.
    Let''s see an example of a histogram for a small sample, as follows:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**使用直方图：** 直方图是检查数据正态性的最简单和最快捷的方法。它将数据划分为多个区间，并统计每个区间中的观测值。最后，它将数据可视化。在这里，我们使用来自`seaborn`库的`distplot()`来绘制直方图和核密度估计。让我们来看一个关于小型样本的直方图示例，如下所示：'
- en: '[PRE26]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'This results in the following output:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '![](img/f7cbbbb4-a651-4fbb-afd5-bebb596896ff.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f7cbbbb4-a651-4fbb-afd5-bebb596896ff.png)'
- en: 'Let''s see an example of the histogram for a medium sample, as follows:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个关于中型样本的直方图示例，如下所示：
- en: '[PRE27]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'This results in the following output:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '![](img/f5bb3279-1416-498e-b22b-d684cf26d93a.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f5bb3279-1416-498e-b22b-d684cf26d93a.png)'
- en: 'Let''s see an example of the histogram for a large sample, as follows:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个关于大型样本的直方图示例，如下所示：
- en: '[PRE28]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'This results in the following output:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '![](img/15552b2c-e16e-4535-b5a6-6000bb746f14.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](img/15552b2c-e16e-4535-b5a6-6000bb746f14.png)'
- en: In the preceding three plots, we can observe that as the sample size increases,
    the curve becomes a normal curve. Histograms can be a good tool to test the normality
    of data.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的三个图中，我们可以观察到，随着样本量的增加，曲线逐渐变成正态分布曲线。直方图可以是检验数据正态性的一种有效工具。
- en: '**Shapiro-Wilk test:** This test is used to assess the normality of data. In
    Python, the `shapiro()` function of the `scipy.stats` subpackage can be used to
    assess normality. The `shapiro()` function will return tuples of two values: test
    statistics and p-value. Let''s see the following example:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Shapiro-Wilk检验：** 此检验用于评估数据的正态性。在Python中，可以使用`scipy.stats`子包中的`shapiro()`函数来进行正态性检验。`shapiro()`函数将返回两个值的元组：检验统计量和p值。让我们来看以下示例：'
- en: '[PRE29]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'This results in the following output:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '[PRE30]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: In the preceding code block, you can see that the small and large datasets have
    p-values greater than 0.05, so as the null hypothesis has failed to reject it,
    this means that the sample looks like a Gaussian or normal distribution; while
    for the medium dataset, the p-value is less than 0.05, so the null hypothesis
    has rejected it, which means the sample does not look like a Gaussian or normal
    distribution.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码块中，你可以看到小型和大型数据集的p值都大于0.05，因此由于原假设未被拒绝，这意味着样本看起来像是高斯分布或正态分布；而对于中型数据集，p值小于0.05，因此原假设被拒绝，这意味着样本看起来不像高斯分布或正态分布。
- en: Similarly, we can try the Anderson-Darling test and the D'Agostino-Pearson test
    for normality using the `anderson()` and `normaltest()` functions of the `scipy.stats`
    subpackage. I will leave this for you as an activity. In visualization, we can
    also try the box plot and **quantile-quantile** (**QQ**) plot techniques to assess
    the normality of data. We will learn the box plot technique in the upcoming chapter,
    [Chapter 5](ec078274-ada3-407c-8c0e-61f5c7b57cd4.xhtml), *Data Visualization*.
    Let's move on to the concept of a masked array.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们可以使用 `scipy.stats` 子包中的 `anderson()` 和 `normaltest()` 函数，尝试 Anderson-Darling
    检验和 D'Agostino-Pearson 正态性检验。我将这个留给你作为练习。在可视化方面，我们也可以尝试箱线图和 **分位数-分位数** (**QQ**)
    图技术来评估数据的正态性。我们将在接下来的章节 [第 5 章](ec078274-ada3-407c-8c0e-61f5c7b57cd4.xhtml)，*数据可视化*
    中学习箱线图技术。接下来我们将讨论掩码数组的概念。
- en: Creating a masked array using the numpy.ma subpackage
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 `numpy.ma` 子包创建掩码数组
- en: In most situations, real-life data is noisy and messy. It contains lots of gaps
    or missing characters in the data. Masked arrays are helpful in such cases and
    handle the issue. Masked arrays may contain invalid and missing values. The `numpy.ma`
    subpackage offers all the masked array-required functionality. In this section
    of the chapter, we will use the face image as the original image source and perform
    log mask operations.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，现实数据是嘈杂且杂乱的。数据中通常会有很多空缺或缺失的字符。掩码数组在这种情况下非常有用，能够处理这个问题。掩码数组可能包含无效和缺失值。`numpy.ma`
    子包提供了所有掩码数组所需的功能。在本章的这一部分中，我们将使用面部图像作为原始图像源，并执行对数掩码操作。
- en: 'Have a look at the following code block:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下以下的代码块：
- en: '[PRE31]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'This results in the following output:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '![](img/b52132fc-7279-48e3-a3bc-afea3ef3dd43.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b52132fc-7279-48e3-a3bc-afea3ef3dd43.png)'
- en: In the preceding code block, we first loaded the face image from the `scipy.misc`
    subpackage and created a random mask using the `randint()` function. Then, we
    applied the random mask on the face image. After this, we applied the log operation
    on the original face image and masked face image. Finally, we displayed all the
    images in 2*2 subplots. You can also try a range of mask operations on the image
    from the `numpy.ma` subpackage. Here, we are only focusing on the log operation
    of the masked array. That is all about basic linear algebra concepts. It's time
    to move on to data visualization concepts, in the next chapter.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码块中，我们首先从 `scipy.misc` 子包加载了面部图像，并使用 `randint()` 函数创建了一个随机掩码。然后，我们将随机掩码应用于面部图像。之后，我们对原始面部图像和掩码面部图像进行了对数操作。最后，我们将所有图像显示在
    2*2 的子图中。你还可以尝试对图像进行一系列来自 `numpy.ma` 子包的掩码操作。这里，我们只关注掩码数组的对数操作。这就是基本线性代数概念的全部内容。接下来是时候进入数据可视化的概念了，我们将在下一章学习。
- en: Summary
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Finally, we can conclude that mathematical subjects such as linear algebra are
    the backbone for all machine learning algorithms. Throughout the chapter, we have
    focused on essential linear algebra concepts to improve you as a data professional.
    In this chapter, you learned a lot about linear algebra concepts using the NumPy
    and SciPy subpackages. Our main focus was on polynomials, determinant, matrix
    inverse; solving linear equations; eigenvalues and eigenvectors; SVD; random numbers;
    binomial and normal distributions; normality tests; and masked arrays.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以得出结论，像线性代数这样的数学学科是所有机器学习算法的核心支柱。在本章中，我们专注于基础的线性代数概念，旨在提升你作为数据专业人士的能力。在这一章中，你学习了许多使用
    NumPy 和 SciPy 子包的线性代数概念。我们主要关注了多项式、行列式、矩阵求逆；解线性方程；特征值和特征向量；奇异值分解（SVD）；随机数；二项分布和正态分布；正态性检验；以及掩码数组。
- en: The next chapter, [Chapter 5](ec078274-ada3-407c-8c0e-61f5c7b57cd4.xhtml), *Data
    Visualization*, is about the important topic of visualizing data with Python.
    Visualization is something we often do when we start analyzing data. It helps
    to display relations between variables in the data. By visualizing the data, we
    can also get an idea about its statistical properties.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章，[第 5 章](ec078274-ada3-407c-8c0e-61f5c7b57cd4.xhtml)，*数据可视化*，将介绍如何使用 Python
    进行数据可视化这一重要主题。数据可视化是我们在开始分析数据时经常进行的操作，它有助于展示数据中变量之间的关系。通过数据可视化，我们还可以更好地了解数据的统计属性。
