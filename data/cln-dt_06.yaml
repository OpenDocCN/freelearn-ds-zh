- en: Chapter 6. Cleaning Data in PDF Files
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第六章：清理PDF文件中的数据
- en: In the last chapter, we discovered different ways of separating the data we
    want from the data we do not want. We imagined that the data cleaning process
    was a little like making chicken stock, in which our goal was to keep the broth
    but strain out the bones. But what happens if the data we want is not so easily
    distinguishable from the data we do not want?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们发现了从我们想要的数据中分离不需要的数据的不同方法。我们将数据清理过程想象成做鸡汤，我们的目标是保留汤底，去掉骨头。但是，如果我们想要的数据和不需要的数据难以区分，应该怎么办呢？
- en: Consider a fine, older wine with considerable sediment. At first glance, we
    might not be able to see the sediment suspended in the liquid. But after the wine
    spends some time in a decanter, the sediment falls to the bottom, and we are able
    to pour out a cleaner, more aromatic wine. A simple strainer would not have been
    able to separate the wine from the sediment in this case—a special-purpose tool
    would have been needed.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一瓶陈年好酒，酒中有大量沉淀物。乍一看，我们可能看不见悬浮在液体中的沉淀物。但当酒液在醒酒器中放置一段时间后，沉淀物会沉到底部，我们就能倒出更加清澈、更具香气的酒液。在这种情况下，普通的过滤器无法将酒与沉淀物分开——需要一个专用工具。
- en: 'In this chapter, we will experiment with several data decanters to extract
    all the good stuff hidden inside inscrutable PDF files. We will explore the following
    topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将尝试使用几种数据醒酒器来提取隐藏在难以理解的PDF文件中的所有有用内容。我们将探索以下主题：
- en: What PDF files are for and why it is difficult to extract data from them
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PDF文件的用途是什么，为什么从中提取数据很困难
- en: How to copy and paste from PDF files, and what to do when this does not work
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何从PDF文件中复制和粘贴内容，以及当这不起作用时该怎么办
- en: How to shrink a PDF file by saving only the pages that we need
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何通过只保存我们需要的页面来缩小PDF文件的大小
- en: How to extract text and numbers from a PDF file using the tools inside a Python
    package called **pdfMiner**
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用名为**pdfMiner**的Python包中的工具从PDF文件中提取文本和数字
- en: How to extract tabular data from within a PDF file using a browser-based Java
    application called **Tabula**
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用一种名为**Tabula**的基于浏览器的Java应用程序从PDF文件中提取表格数据
- en: How to use the full, paid version of Adobe Acrobat to extract a table of data
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用完整的、付费版的Adobe Acrobat提取数据表格
- en: Why is cleaning PDF files difficult?
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么清理PDF文件很困难？
- en: Files saved in **Portable Document Format** (**PDF**) are a little more complicated
    than the text files we have looked at so far in this book. PDF is a binary format
    that was invented by Adobe Systems, which later evolved into an open standard
    so that multiple applications could create PDF versions of their documents. The
    purpose of a PDF file is to provide a way of viewing the text and graphics in
    a document independent of the software that did the original layout.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**便携式文档格式**（**PDF**）文件比我们之前在本书中查看的文本文件要复杂一些。PDF是一种二进制格式，由Adobe Systems发明，后来发展成开放标准，以便多个应用程序能够创建文档的PDF版本。PDF文件的目的是提供一种查看文档中文本和图形的方式，而不依赖于进行原始排版的软件。'
- en: In the early 1990s, the heyday of desktop publishing, each graphic design software
    package had a different proprietary format for its files, and the packages were
    quite expensive. In those days, in order to view a document created in Word, Pagemaker,
    or Quark, you would have to open the document using the same software that had
    created it. This was especially problematic in the early days of the Web, since
    there were not many available techniques in HTML to create sophisticated layouts,
    but people still wanted to share files with each other. PDF was meant to be a
    vendor-neutral layout format. Adobe made its Acrobat Reader software free for
    anyone to download, and subsequently the PDF format became widely used.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在1990年代初期，桌面出版的全盛时期，每个图形设计软件包都有不同的专有格式，并且这些软件包非常昂贵。在那个时候，为了查看一个用Word、Pagemaker或Quark创建的文档，你必须使用创建该文档的相同软件打开它。这在Web初期尤为成问题，因为HTML中并没有很多技术可以创建复杂的布局，但人们还是想要相互分享文件。PDF的设计目的是作为一种供应商中立的布局格式。Adobe免费提供其Acrobat
    Reader软件，供任何人下载，随后PDF格式得到了广泛应用。
- en: Note
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Here is a fun fact about the early days of Acrobat Reader. The words `click
    here` when entered into Google search engine still bring up *Adobe's Acrobat PDF
    Reader download website* as the first result, and have done so for years. This
    is because so many websites distribute PDF files along with a message saying something
    like, "To view this file you must have Acrobat Reader installed. Click here to
    download it." Since Google's search algorithm uses the link text to learn what
    sites go with what keywords, the keyword click here is now associated with Adobe
    Acrobat's download site.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这是关于Acrobat Reader早期的一些有趣事实。当你在Google搜索引擎中输入“`click here`”时，仍然会将*Adobe的Acrobat
    PDF Reader下载网站*作为第一个结果，并且已经维持了多年。这是因为许多网站分发PDF文件时会附带类似“要查看此文件，您必须安装Acrobat Reader。点击此处下载。”的信息。由于Google的搜索算法会利用链接文本来判断哪些网站与哪些关键词相关联，因此“click
    here”这一关键词现在与Adobe Acrobat的下载站点紧密相关。
- en: PDF is still used to make vendor- and application-neutral versions of files
    that have layouts that are more complicated than what could be achieved with plain
    text. For example, viewing the same document in the various versions of Microsoft
    Word still sometimes causes documents with lots of embedded tables, styles, images,
    forms, and fonts to look different from one another. This can be due to a number
    of factors, such as differences in operating systems or versions of the installed
    Word software itself. Even with applications that are intended to be compatible
    between software packages or versions, subtle differences can result in incompatibilities.
    PDF was created to solve some of this.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: PDF仍然被用来制作供应商和应用程序中立的文件版本，这些文件的布局比纯文本能够实现的更为复杂。例如，在不同版本的Microsoft Word中查看同一文档时，包含大量嵌入表格、样式、图像、表单和字体的文档仍然可能会表现出不同的效果。这可能是由多个因素引起的，例如操作系统的差异或安装的Word软件版本不同。即使是旨在跨软件包或版本之间兼容的应用程序，细微的差异也可能导致不兼容问题。PDF就是为了解决其中的一些问题而创建的。
- en: Right away we can tell that PDF is going to be more difficult to deal with than
    a text file, because it is a binary format, and because it has embedded fonts,
    images, and so on. So most of the tools in our trusty data cleaning toolbox, such
    as text editors and command-line tools (`less`) are largely useless with PDF files.
    Fortunately there are still a few tricks we can use to get the data out of a PDF
    file.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以立即看出，处理PDF文件要比文本文件更困难，因为它是二进制格式，而且还嵌入了字体、图像等。因此，我们可靠的数据清理工具箱中的大部分工具，比如文本编辑器和命令行工具（`less`），在处理PDF文件时基本无用。幸运的是，仍然有一些技巧可以帮助我们从PDF文件中提取数据。
- en: Try simple solutions first – copying
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 首先尝试简单的解决方案——复制
- en: 'Suppose that on your way to decant your bottle of fine red wine, you spill
    the bottle on the floor. Your first thought might be that this is a complete disaster
    and you will have to replace the whole carpet. But before you start ripping out
    the entire floor, it is probably worth trying to clean the mess with an old bartender''s
    trick: club soda and a damp cloth. In this section, we outline a few things to
    try first, before getting involved in an expensive file renovation project. They
    might not work, but they are worth a try.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 假设在你准备倒出瓶中的美味红酒时，不小心把瓶子打翻了。你可能会认为这是一次彻底的灾难，认为需要更换整个地毯。但在你开始撕掉整个地板之前，或许值得尝试一个老酒吧招数：苏打水和湿布。在这一部分，我们概述了一些可以首先尝试的步骤，而不是直接投入昂贵的文件翻新项目。它们可能不起作用，但值得一试。
- en: Our experimental file
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的实验文件
- en: 'Let''s practice cleaning PDF data by using a real PDF file. We also do not
    want this experiment to be too easy, so let''s choose a very complicated file.
    Suppose we are interested in pulling the data out of a file we found on the Pew
    Research Center''s website called "Is College Worth It?". Published in 2011, this
    PDF file is 159 pages long and contains numerous data tables showing various ways
    of measuring if attaining a college education in the United States is worth the
    investment. We would like to find a way to quickly extract the data within these
    numerous tables so that we can run some additional statistics on it. For example,
    here is what one of the tables in the report looks like:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过使用一个实际的PDF文件来练习清理PDF数据。我们也不希望这个实验太简单，因此我们选择了一个非常复杂的文件。假设我们有兴趣从一个在Pew Research
    Center网站上找到的文件中提取数据，文件名为《Is College Worth It?》。这份2011年发布的PDF文件共有159页，包含了大量数据表格，展示了衡量美国大学教育是否值得投资的各种方法。我们希望找到一种方法，能够快速提取这些表格中的数据，以便进行进一步的统计分析。例如，下面是报告中某个表格的样子：
- en: '![Our experimental file](img/image00282.jpeg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![我们的实验文件](img/image00282.jpeg)'
- en: This table is fairly complicated. It only has six columns and eight rows, but
    several of the rows take up two lines, and the header row text is only shown on
    five of the columns.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这个表格相当复杂。它只有六列和八行，但有几行占用了两行，并且标题行的文本仅在五列中显示。
- en: Tip
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'The complete report can be found at the PewResearch website at [http://www.pewsocialtrends.org/2011/05/15/is-college-worth-it/](http://www.pewsocialtrends.org/2011/05/15/is-college-worth-it/),
    and the particular file we are using is labeled Complete Report: [http://www.pewsocialtrends.org/files/2011/05/higher-ed-report.pdf](http://www.pewsocialtrends.org/files/2011/05/higher-ed-report.pdf).'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 完整报告可以在PewResearch网站找到：[http://www.pewsocialtrends.org/2011/05/15/is-college-worth-it/](http://www.pewsocialtrends.org/2011/05/15/is-college-worth-it/)，我们使用的特定文件标注为《完整报告》：[http://www.pewsocialtrends.org/files/2011/05/higher-ed-report.pdf](http://www.pewsocialtrends.org/files/2011/05/higher-ed-report.pdf)。
- en: Step one – try copying out the data we want
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第一步——尝试复制我们需要的数据
- en: The data we will experiment on in this example is found on page 149 of the PDF
    file (labeled page 143 in their document). If we open the file in a PDF viewer,
    such as Preview on Mac OSX, and attempt to select just the data in the table,
    we already see that some strange things are happening. For example, even though
    we did not mean to select the page number (143); it got selected anyway. This
    does not bode well for our experiment, but let's continue. Copy the data out by
    using Command-C or select **Edit** | **Copy**.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在这个示例中使用的数据位于PDF文件的第149页（在他们的文档中标记为第143页）。如果我们在PDF查看器中打开文件，例如Mac OSX上的预览，并尝试仅选择表格中的数据，我们已经看到一些奇怪的事情发生了。例如，即使我们不打算选择页面编号（143），它仍然被选中了。这对我们的实验来说不是个好兆头，但我们还是继续吧。使用Command-C复制数据，或者选择**编辑**
    | **复制**。
- en: '![Step one – try copying out the data we want](img/image00283.jpeg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![第一步——尝试复制我们需要的数据](img/image00283.jpeg)'
- en: How text looks when selected in this PDF from within Preview
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在预览中选择这个PDF中的文本时的显示效果
- en: Step two – try pasting the copied data into a text editor
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第二步——尝试将复制的数据粘贴到文本编辑器中
- en: 'The following screenshot shows how the copied text looks when it is pasted
    into Text Wrangler, our text editor:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了复制的文本粘贴到我们的文本编辑器Text Wrangler中后的样子：
- en: '![Step two – try pasting the copied data into a text editor](img/image00284.jpeg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![第二步——尝试将复制的数据粘贴到文本编辑器中](img/image00284.jpeg)'
- en: Clearly, this data is not in any sensible order after copying and pasting it.
    The page number is included, the numbers are horizontal instead of vertical, and
    the column headers are out of order. Even some of the numbers have been combined;
    for example, the final row contains the numbers 4,4,3,2; but in the pasted version,
    this becomes a single number **4432**. It would probably take longer to clean
    up this data manually at this point than it would have taken just to retype the
    original table. We can conclude that with this particular PDF file, we are going
    to have to take stronger measures to clean it.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 很明显，在复制并粘贴数据后，这些数据的顺序完全混乱。页面编号被包含在内，数字是横向排列的而非纵向，列标题也排列错乱。甚至有些数字被合并了；例如，最后一行包含了4、4、3、2这四个数字，但在粘贴后的版本中，这些数字变成了一个单一的数字**4432**。此时，手动清理这些数据可能需要比重新输入原始表格更长的时间。我们可以得出结论，在处理这个特定的PDF文件时，我们需要采取更强的措施来清理它。
- en: Tip
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: We should note at this point that the other areas of this PDF file *do* clean
    up nicely. For example, the Preface, a text-only section located on page 3 of
    the file, copies out just fine using the preceding technique. With this file,
    it is only the actual tabular data that is a problem. You should experiment with
    all parts of a PDF file—including text and tabular data—before deciding on an
    extraction technique.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应当注意，此时PDF文件的其他部分*清理得很好*。例如，位于文件第3页的前言（纯文本部分），使用前述技巧复制出来也很顺利。在这个文件中，唯一的问题是实际的表格数据。你应该在决定提取技巧之前，先对PDF文件的所有部分——包括文本和表格数据——进行实验。
- en: Step three – make a smaller version of the file
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第三步——制作文件的简化版本
- en: Our copying and pasting procedures have not worked, so we have resigned ourselves
    to the fact that we are going to need to prepare for more invasive measures. Perhaps
    if we are not interested in extracting data from all 159 pages of this PDF file,
    we can identify just the area of the PDF that we want to operate on, and save
    that section to a separate file.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的复制粘贴操作没有成功，因此我们已经接受了需要采取更具侵入性措施的事实。也许如果我们不打算提取这个 PDF 文件的所有 159 页数据，我们可以仅识别出我们想要操作的
    PDF 区域，并将该部分保存为一个单独的文件。
- en: To do this in **Preview** on MacOSX, launch the **File** | **Print…** dialog
    box. In the **Pages** area, we will enter the range of pages we actually want
    to copy. For the purpose of this experiment, we are only interested in page 149;
    so enter `149` in both the **From:** and **to:** boxes as shown in the following
    screenshot.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在 MacOSX 的 **预览** 中执行此操作，启动 **文件** | **打印…** 对话框。在 **页面** 区域，我们将输入实际想要复制的页面范围。为了进行这个实验，我们只对第
    149 页感兴趣；因此，在 **从：** 和 **到：** 框中都输入 `149`，如以下截图所示。
- en: Then from the **PDF** dropdown box at the bottom, select **Open PDF in Preview**.
    You will see your single-page PDF in a new window. From here, we can save this
    as a new file and give it a new name, such as `report149.pdf` or the like.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在底部的 **PDF** 下拉框中，选择 **在预览中打开 PDF**。您将看到您的单页 PDF 出现在新窗口中。从这里，我们可以将其保存为新文件并给它一个新名称，如
    `report149.pdf` 或类似名称。
- en: '![Step three – make a smaller version of the file](img/image00285.jpeg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![第三步 – 制作文件的较小版本](img/image00285.jpeg)'
- en: Another technique to try – pdfMiner
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另一种可尝试的技术 – pdfMiner
- en: Now that we have a smaller file to experiment with, let's try some programmatic
    solutions to extract the text and see if we fare any better. pdfMiner is a Python
    package with two embedded tools to operate on PDF files. We are particularly interested
    in experimenting with one of these tools, a command-line program called `pdf2txt`
    that is designed to extract text from within a PDF document. Maybe this will be
    able to help us get those tables of numbers out of the file correctly.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个较小的文件来进行实验，让我们尝试一些编程解决方案来提取文本，看看是否能有所改善。pdfMiner 是一个 Python 包，包含两个嵌入式工具，用于处理
    PDF 文件。我们特别感兴趣的是尝试其中一个工具，一个名为 `pdf2txt` 的命令行程序，旨在从 PDF 文档中提取文本。也许它能够帮助我们正确提取文件中的数字表格。
- en: Step one – install pdfMiner
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第一步 – 安装 pdfMiner
- en: 'Launch the Canopy Python environment. From the Canopy Terminal Window, run
    the following command:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 启动 Canopy Python 环境。从 Canopy 终端窗口中，运行以下命令：
- en: '[PRE0]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This will install the entire pdfMiner package and all its associated command-line
    tools.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这将安装整个 pdfMiner 包及其所有相关的命令行工具。
- en: Tip
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The documentation for pdfMiner and the two tools that come with it, `pdf2txt`
    and `dumpPDF`, is located at [http://www.unixuser.org/~euske/python/pdfminer/](http://www.unixuser.org/~euske/python/pdfminer/).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: pdfMiner 及其随附的两个工具 `pdf2txt` 和 `dumpPDF` 的文档可以在 [http://www.unixuser.org/~euske/python/pdfminer/](http://www.unixuser.org/~euske/python/pdfminer/)
    查阅。
- en: Step two – pull text from the PDF file
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第二步 – 从 PDF 文件中提取文本
- en: We can extract all text from a PDF file using the command-line tool called `pdf2txt.py`.
    To do this, use the Canopy Terminal and navigate to the directory where the file
    is located. The basic format of the command is `pdf2txt.py <filename>`. If you
    have a larger file that has multiple pages (or you did not already break the PDF
    into smaller ones), you can also run `pdf2txt.py –p149 <filename>` to specify
    that you only want page 149.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用名为 `pdf2txt.py` 的命令行工具从 PDF 文件中提取所有文本。为此，请使用 Canopy 终端并导航到文件所在目录。命令的基本格式是
    `pdf2txt.py <filename>`。如果您的文件较大并包含多页（或者如果您尚未将 PDF 拆分成较小的文件），您还可以运行 `pdf2txt.py
    –p149 <filename>` 来指定只提取第 149 页。
- en: 'Just as with the preceding copy-and-paste experiment, we will try this technique
    not only on the tables located on page 149, but also on the Preface on page 3\.
    To extract just the text from page 3, we run the following command:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 与前面的复制粘贴实验一样，我们不仅会尝试在第 149 页的表格上使用此技术，还会尝试在第 3 页的序言上。为了仅提取第 3 页的文本，我们运行以下命令：
- en: '[PRE1]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'After running this command, the extracted preface of the Pew Research report
    appears in our command-line window:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此命令后，Pew Research 报告的提取序言将出现在我们的命令行窗口中：
- en: '![Step two – pull text from the PDF file](img/image00286.jpeg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![第二步 – 从 PDF 文件中提取文本](img/image00286.jpeg)'
- en: 'To save this text to a file called `pewPreface.txt`, we can simply add a redirect
    to our command line as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要将此文本保存为名为 `pewPreface.txt` 的文件，我们只需在命令行中添加重定向，如下所示：
- en: '[PRE2]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'But what about those troublesome data tables located on page 149? What happens
    when we use `pdf2txt` on those? We can run the following command:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 那么位于第149页的那些棘手的数据表格呢？当我们对它们使用`pdf2txt`时会发生什么呢？我们可以运行以下命令：
- en: '[PRE3]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The results are slightly better than copy and paste, but not by much. The actual
    data output section is shown in the following screenshot. The column headers and
    data are mixed together, and the data from different columns are shown out of
    order.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 结果比复制粘贴稍微好一些，但差别不大。实际的数据输出部分如下截图所示。列头和数据混在一起，来自不同列的数据顺序错乱。
- en: '![Step two – pull text from the PDF file](img/image00287.jpeg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![步骤二——从PDF文件中提取文本](img/image00287.jpeg)'
- en: We will have to declare the tabular data extraction portion of this experiment
    a failure, though pdfMiner worked reasonably well on line-by-line text-only extraction.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须宣告此次表格数据提取实验失败，尽管pdfMiner在逐行文本提取方面表现得相当不错。
- en: Note
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Remember that your success with each of these tools may vary. Much of it depends
    on the particular characteristics of the original PDF file.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，使用这些工具的成功率可能因人而异，很多时候取决于原始PDF文件的特定特性。
- en: It looks like we chose a very tricky PDF for this example, but let's not get
    disheartened. Instead, we will move on to another tool and see how we fare with
    it.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来我们为这个示例选择了一个非常棘手的PDF文件，但我们不必灰心丧气。相反，我们将转向另一个工具，看看它的表现如何。
- en: Third choice – Tabula
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三种选择——Tabula
- en: '**Tabula** is a Java-based program to extract data within tables in PDF files.
    We will download the Tabula software and put it to work on the tricky tables in
    our page 149 file.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**Tabula**是一个基于Java的程序，用于提取PDF文件中表格内的数据。我们将下载Tabula软件，并让它在我们第149页的棘手表格上发挥作用。'
- en: Step one – download Tabula
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤一——下载Tabula
- en: Tabula is available to be downloaded from its website at [http://tabula.technology/](http://tabula.technology/).
    The site includes some simple download instructions.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Tabula可以从其官方网站下载：[http://tabula.technology/](http://tabula.technology/)。该网站提供了一些简单的下载说明。
- en: Tip
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: On Mac OSX version 10.10.1, I had to download the legacy Java 6 application
    before I was able to run Tabula. The process was straightforward and required
    only following the on-screen instructions.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在Mac OSX 10.10.1版本上，我必须先下载旧版的Java 6应用程序，才能运行Tabula。整个过程非常简单，只需按照屏幕上的说明操作即可。
- en: Step two – run Tabula
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤二——运行Tabula
- en: Launch Tabula from inside the downloaded `.zip` archive. On the Mac, the Tabula
    application file is called simply `Tabula.app`. You can copy this to your `Applications`
    folder if you like.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 从下载的`.zip`压缩文件中启动Tabula。在Mac系统上，Tabula应用程序文件简单地被称为`Tabula.app`。如果你愿意，可以将其复制到`Applications`文件夹中。
- en: 'When Tabula starts, it launches a tab or window within your default web browser
    at the address `http://127.0.0.1:8080/`. The initial action portion of the screen
    looks like this:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 当Tabula启动时，它会在默认的网页浏览器中打开一个标签页或窗口，地址是`http://127.0.0.1:8080/`。屏幕上的初始操作部分如下所示：
- en: '![Step two – run Tabula](img/image00288.jpeg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![步骤二——运行Tabula](img/image00288.jpeg)'
- en: The warning that auto-detecting tables takes a long time is true. For the single-page
    `perResearch149.pdf` file, with three tables in it, table auto-detection took
    two full minutes and resulted in an error message about an incorrectly formatted
    PDF file.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 自动检测表格需要较长时间，这个警告是对的。对于包含三个表格的单页`perResearch149.pdf`文件，表格自动检测花费了整整两分钟，并且出现了一个关于PDF文件格式不正确的错误信息。
- en: Step three – direct Tabula to extract the data
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤三——指示Tabula提取数据
- en: Once Tabula reads in the file, it is time to direct it where the tables are.
    Using your mouse cursor, select the table you are interested in. I drew a box
    around the entire first table.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦Tabula读取了文件，就该指示它所在的位置在哪里了。使用鼠标光标，选择你感兴趣的表格。我在第一个表格的四周画了一个框。
- en: 'Tabula took about 30 seconds to read in the table, and the results are shown
    as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Tabula花了大约30秒钟读取表格，结果如下所示：
- en: '![Step three – direct Tabula to extract the data](img/image00289.jpeg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![步骤三——指示Tabula提取数据](img/image00289.jpeg)'
- en: Compared to the way the data was read with copy and paste and `pdf2txt`, this
    data looks great. But if you are not happy with the way Tabula reads in the table,
    you can repeat this process by clearing your selection and redrawing the rectangle.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 与通过复制粘贴和`pdf2txt`读取数据的方式相比，这些数据看起来非常不错。但是，如果你对Tabula读取表格的方式不满意，你可以通过清除选择并重新绘制矩形来重复此过程。
- en: Step four – copy the data out
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤四——提取数据
- en: We can use the **Download Data** button within Tabula to save the data to a
    friendlier file format, such as CSV or TSV. As we know from our work in previous
    chapters, these are formats that can be cleaned, if necessary, in a spreadsheet
    or text editor. Right on cue, we are ready for our next step.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用Tabula中的**下载数据**按钮将数据保存为更友好的文件格式，如CSV或TSV。正如我们在前几章所学，这些格式如果需要，可以在电子表格或文本编辑器中清理。恰到好处，我们准备进行下一步了。
- en: Step five – more cleaning
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第五步——更多清理
- en: 'Open the CSV file in Excel or a text editor and take a look at it. At this
    stage, we have had a lot of failures in getting this PDF data extracted, so it
    is very tempting to just quit now. However, if you have made it this far in a
    book about data cleaning, you can probably guess that this data could be made
    even cleaner. Here are some simple data cleaning tasks that we know how to do
    already from earlier chapters:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在Excel或文本编辑器中打开CSV文件并查看它。在这个阶段，我们在提取PDF数据时已经遇到了很多失败，所以现在很容易就想放弃。然而，如果你已经读到数据清理的书籍中的这一部分，你可能会猜到这些数据还能进一步清理。这里有一些我们从前几章学到的简单数据清理任务：
- en: We can combine all the two-line text cells into a single cell. For example,
    in column **B**, many of the phrases take up more than one row. **Prepare students
    to be productive** and **members of the workforce** should be in one cell as a
    single phrase. The same is true for the headers in Rows **1** and **2** (**4-year**
    and **Private** should be in a single cell). To clean this in Excel, create a
    new column between columns **B** and **C**. Use the `concatenate()` function to
    join B3:B4, B5:B6, and so on. Use **Paste-Special** to add the new concatenated
    values into a new column. Then remove the two columns you no longer need. Do the
    same for rows **1** and **2**.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以将所有两行文本单元格合并成一个单元格。例如，在**B**列，许多短语占据了不止一行。**让学生具备高效工作能力**和**成为劳动力成员**应该放在一个单元格中，作为一个完整的短语。**1**行和**2**行的表头也是如此（**4-year**和**Private**应该放在一个单元格中）。要在Excel中清理这些内容，可以在**B**列和**C**列之间创建一个新列。使用`concatenate()`函数将B3:B4、B5:B6等进行合并。使用**粘贴特殊**将新合并的值添加到新列中。然后删除不再需要的两列。对**1**行和**2**行也执行相同的操作。
- en: Remove blank lines between rows.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除行之间的空白行。
- en: 'When these procedures are finished, the data looks like this:'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当这些操作完成后，数据看起来是这样的：
- en: '![Step five – more cleaning](img/image00290.jpeg)'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![第五步——更多清理](img/image00290.jpeg)'
- en: Tip
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Tabula might seem like a lot of work compared to cutting and pasting data or
    running a simple command-line tool. That is true, unless your PDF file turns out
    to be finicky like this one was. Remember that specialty tools are there for a
    reason—but do not use them unless you really need them. Start with a simple solution
    first and only proceed to a more difficult tool when you really need it.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 与直接剪切粘贴数据或运行简单命令行工具相比，Tabula可能看起来要花费更多精力。这是真的，除非你的PDF文件像这个一样挑剔。记住，专业工具之所以存在是有原因的——但除非真的需要，否则不要使用它们。首先使用简单的解决方案，只有在真正需要时才使用更复杂的工具。
- en: When all else fails – the fourth technique
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 当一切都失败时——第四种技术
- en: Adobe Systems sells a paid, commercial version of their Acrobat software that
    has some additional features above and beyond just allowing you to read PDF files.
    With the full version of Acrobat, you can create complex PDF files and manipulate
    existing files in various ways. One of the features that is relevant here is the
    **Export Selection As…** option found within Acrobat.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Adobe Systems销售的付费商业版Acrobat软件比起仅仅允许你阅读PDF文件，还具有一些附加功能。使用完整版的Acrobat，你可以创建复杂的PDF文件，并以各种方式操作现有文件。与此相关的一个功能是Acrobat中的**导出选定内容为...**选项。
- en: To get started using this feature, launch Acrobat and use the **File Open**
    dialog to open the PDF file. Within the file, navigate to the table holding the
    data you want to export. The following screenshot shows how to select the data
    from the page 149 PDF we have been operating on. Use your mouse to select the
    data, then right-click and choose **Export Selection As…**
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用此功能，请启动Acrobat，并使用**文件打开**对话框打开PDF文件。在文件内，导航到包含要导出的数据的表格。以下截图展示了如何选择我们操作过的149页PDF中的数据。使用鼠标选择数据，然后右键点击并选择**导出选定内容为...**
- en: '![When all else fails – the fourth technique](img/image00291.jpeg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![当一切都失败时——第四种技术](img/image00291.jpeg)'
- en: At this point, Acrobat will ask you how you want the data exported. CSV is one
    of the choices. Excel Workbook (`.xlsx`) would also be a fine choice if you are
    sure you will not want to also edit the file in a text editor. Since I know that
    Excel can also open CSV files, I decided to save my file in that format so I would
    have the most flexibility between editing in Excel and my text editor.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，Acrobat会询问你想如何导出数据。CSV是其中的一个选择。如果你确定不想在文本编辑器中编辑文件，Excel工作簿（`.xlsx`）也是一个不错的选择。由于我知道Excel也能打开CSV文件，我决定将文件保存为这种格式，以便在Excel和文本编辑器之间具有更大的灵活性。
- en: '![When all else fails – the fourth technique](img/image00292.jpeg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![当一切都失败时——第四种方法](img/image00292.jpeg)'
- en: 'After choosing the format for the file, we will be prompted for a filename
    and location for where to save the file. When we launch the resulting file, either
    in a text editor or in Excel, we can see that it looks a lot like the Tabula version
    we saw in the previous section. Here is how our CSV file will look when opened
    in Excel:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择文件格式后，我们会被提示输入文件名和保存位置。当我们在文本编辑器或Excel中打开生成的文件时，会发现它看起来和我们在前一节看到的Tabula版本很像。以下是CSV文件在Excel中打开后的样子：
- en: '![When all else fails – the fourth technique](img/image00293.jpeg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![当一切都失败时——第四种方法](img/image00293.jpeg)'
- en: At this point, we can use the exact same cleaning routine we used with the Tabula
    data, where we concatenated the B2:B3 cells into a single cell and then removed
    the empty rows.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 到这个阶段，我们可以使用与Tabula数据清洗时相同的清理程序，合并B2:B3单元格到一个单元格中，然后删除空行。
- en: Summary
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'The goal of this chapter was to learn how to export data out of a PDF file.
    Like sediment in a fine wine, the data in PDF files can appear at first to be
    very difficult to separate. Unlike decanting wine, however, which is a very passive
    process, separating PDF data took a lot of trial and error. We learned four ways
    of working with PDF files to clean data: copying and pasting, pdfMiner, Tabula,
    and Acrobat export. Each of these tools has certain strengths and weaknesses:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目标是学习如何从PDF文件中导出数据。就像美酒中的沉淀物，PDF文件中的数据起初看起来非常难以分离。然而，与倒酒这一非常被动的过程不同，分离PDF数据需要大量的反复试探。我们学会了四种处理PDF文件清洗数据的方法：复制粘贴、pdfMiner、Tabula和Acrobat导出。每种工具都有其优缺点：
- en: Copying and pasting costs nothing and takes very little work, but is not as
    effective with complicated tables.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复制粘贴不需要任何成本，且几乎不需要工作，但对于复杂的表格来说，效果并不理想。
- en: pdfMiner/Pdf2txt is also free, and as a command-line tool, it could be automated.
    It also works on large amounts of data. But like copying and pasting, it is easily
    confused by certain types of tables.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: pdfMiner/Pdf2txt也是免费的，作为一个命令行工具，它可以被自动化处理，且能处理大量数据。但和复制粘贴一样，它也容易被某些类型的表格所混淆。
- en: Tabula takes some work to set up, and since it is a product undergoing development,
    it does occasionally give strange warnings. It is also a little slower than the
    other options. However, its output is very clean, even with complicated tables.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Tabula的设置工作量较大，而且由于它是一个正在开发中的产品，有时会出现奇怪的警告。它的处理速度也比其他选项慢一些。然而，它的输出非常干净，即便是复杂的表格。
- en: Acrobat gives similar output to Tabula, but with almost no setup and very little
    effort. It is a paid product.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Acrobat的输出与Tabula类似，但几乎不需要设置，也几乎不费力气。它是一个付费产品。
- en: By the end, we had a clean dataset that was ready for analysis or long-term
    storage.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 到最后，我们得到了一个干净的数据集，准备进行分析或长期存储。
- en: In the next chapter, we will focus on data that has been placed into long-term
    storage in a **Relational Database Management System** (**RDBMS**). We will learn
    about the challenges of cleaning data stored this way, as well as some of the
    common data anomalies and how to fix them.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将重点讨论已存储在**关系型数据库管理系统**（**RDBMS**）中的数据。我们将学习如何清洗这种方式存储的数据，了解一些常见的数据异常以及如何修复它们。
