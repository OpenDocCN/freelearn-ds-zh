- en: Chapter 2. Getting Started with Your First Topology
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。开始您的第一个拓扑
- en: This chapter is dedicated to guiding you through the steps to set up the environment
    for the execution of a Storm topology. The intent is to prepare the user sandbox
    and get you steered toward executing some of the sample code and understanding
    the working of various components. All the concepts will be accompanied by code
    snippets and a "try it yourself" section so that you are equipped to understand
    the components in a practical manner and are ready to explore and harness the
    power of this wonderful technology.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章致力于指导您完成为执行Storm拓扑设置环境的步骤。目的是准备用户沙盒，并引导您执行一些示例代码，并了解各个组件的工作原理。所有概念都将附有代码片段和“自己动手试一试”部分，以便您能够以实际方式理解组件，并准备好探索和利用这一美妙技术的力量。
- en: 'The topics that will be covered in this chapter are as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖的主题如下：
- en: Storm topology and components
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Storm拓扑和组件
- en: Executing the sample Storm topology
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行示例Storm拓扑
- en: Executing the topology in distributed mode
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在分布式模式下执行拓扑
- en: By the end of the chapter, you will be able to understand the components and
    data flow in a topology, understand the simple word count topology, and execute
    it in the local and distributed modes. You will also be able to tweak the starter
    project topologies to add your own flavor to them.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，您将能够理解拓扑中的组件和数据流，理解简单的单词计数拓扑，并在本地和分布式模式下执行它。您还将能够调整启动器项目拓扑，以添加自己的风格。
- en: Prerequisites for setting up Storm
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Storm的先决条件
- en: 'The prerequisites for executing the setup and execution steps are enlisted
    here:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 列出了执行设置和执行步骤的先决条件：
- en: For a local mode setup, you need Maven, Git, Eclipse, and Java
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于本地模式设置，您需要Maven、Git、Eclipse和Java
- en: 'For a distributed setup, you need the following:'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于分布式设置，您需要以下内容：
- en: A Linux or Ubuntu setup or a distributed setup can leverage PowerShell or Cygwin
    over their Windows systems
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux或Ubuntu设置或分布式设置可以在Windows系统上使用PowerShell或Cygwin
- en: Having more than one system or virtual machines using the VMware player would
    help
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用VMware player的多个系统或虚拟机会有所帮助
- en: 'You can refer to the following links and follow the process laid out to set
    up the various open source components required to set up Storm and deploy the
    components explained in this segment of the book:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '您可以参考以下链接，并按照书中所述的过程设置所需的各种开源组件，以设置Storm并部署本书段中解释的组件： '
- en: For Java, [https://java.com/en/download/index.jsp](https://java.com/en/download/index.jsp)
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于Java，[https://java.com/en/download/index.jsp](https://java.com/en/download/index.jsp)
- en: For Eclipse, [https://www.eclipse.org/downloads/](https://www.eclipse.org/downloads/)
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于Eclipse，[https://www.eclipse.org/downloads/](https://www.eclipse.org/downloads/)
- en: For Cygwin, [http://cygwin.com/install.html](http://cygwin.com/install.html)
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于Cygwin，[http://cygwin.com/install.html](http://cygwin.com/install.html)
- en: For Git, [https://help.github.com/articles/set-up-git](https://help.github.com/articles/set-up-git)
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于Git，[https://help.github.com/articles/set-up-git](https://help.github.com/articles/set-up-git)
- en: Components of a Storm topology
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Storm拓扑的组件
- en: 'A Storm topology consists of two basic components: a spout and one or more
    bolts. These building blocks are tied together using streams; it is over these
    streams that endless arrays of tuples flow.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Storm拓扑由两个基本组件组成：一个喷口和一个或多个螺栓。这些构件使用流连接在一起；正是通过这些流，无尽的元组流动。
- en: 'Let''s discuss the topology with a simple analogy, as depicted in the diagram
    and explained thereafter:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用一个简单的类比来讨论拓扑，如图所示，并在此后进行解释：
- en: '![Components of a Storm topology](img/00010.jpeg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![Storm拓扑的组件](img/00010.jpeg)'
- en: In our example topology, we have a big processing unit for roasted chips where
    the input, *raw potato*, is consumed by the spout, and there are various bolts
    such as a peeler bolt, slicer bolt, and roasting bolt that perform the tasks as
    their name suggests. There are various assembly lines or workers that move the
    chips from the peeler unit to the shredder and beyond; in our case, we have streams
    to link and wire in the spout and bolts with each other. Now the basic unit of
    exchange between the peeler and shredder is a peeled potato, and between the shredder
    units and roasting units is a sliced potato. This is analogous to a tuple, the
    datum of information exchange between spouts and bolts.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例拓扑中，我们有一个用于烤薯片的大型处理单元，其中输入的*生土豆*由喷口消耗，还有各种螺栓，如去皮螺栓、切片螺栓和烘烤螺栓，执行其名称所示的任务。有各种装配线或工人将薯片从去皮单元移动到切片机等等；在我们的情况下，我们有流来连接和连接喷口和螺栓。现在，去皮机和切片机之间的交换基本单元是去皮的土豆，切片机和烘烤机之间的交换基本单元是切片的土豆。这类似于元组，是喷口和螺栓之间信息交换的数据。
- en: Let's take a closer look at the building blocks of the Storm topology.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更仔细地看看Storm拓扑的构件。
- en: Note
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The basic unit of data interchange within Storm is called a *tuple*; this is
    sometimes also referred to as an *event*.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Storm中数据交换的基本单元称为*元组*；有时也称为*事件*。
- en: Spouts
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 喷口
- en: A spout is the collection funnel of a topology; it feeds events or tuples into
    the topology. It can be considered as the input source to the Storm processing
    unit—the topology.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 喷口是拓扑的收集漏斗；它将事件或元组馈送到拓扑中。它可以被视为Storm处理单元——拓扑的输入源。
- en: The spout reads messages from external sources such as a queue, file, port,
    and so on. Also, the spout emits them into the stream, which in turn passes them
    to the bolts. It's the task of the Storm spout to track each event or tuple throughout
    its processing through the **Directed Acyclic Graph** (**DAG**). The Storm framework
    then sends and generates either acknowledgement or failure notifications based
    on the outcome of the execution of tuples in the topology. This mechanism gives
    the guaranteed processing feature to Storm. Based on the required functionality,
    spouts can be programmed or configured to be reliable or unreliable. A reliable
    spout plays back the failed events into the topology.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: spout从外部源（如队列、文件、端口等）读取消息。同时，spout将它们发射到流中，然后将它们传递给螺栓。Storm spout的任务是跟踪每个事件或元组在其处理过程中通过**有向无环图**（**DAG**）的整个过程。然后，Storm框架根据拓扑中元组的执行结果发送和生成确认或失败通知。这种机制为Storm提供了保证处理的特性。根据所需的功能，spouts可以被编程或配置为可靠或不可靠。可靠的spout将失败的事件重新播放到拓扑中。
- en: 'The following diagram depicts the same flow, graphically:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的图表以图形方式描述了相同的流程：
- en: '![Spouts](img/00011.jpeg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![Spouts](img/00011.jpeg)'
- en: All Storm spouts are implemented to be able to emit tuples on one or more stream
    bolts. As in the preceding diagram, a spout can emit tuples to both bolt **A**
    and **C**.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的Storm spouts都被实现为能够在一个或多个流螺栓上发射元组。就像前面的图表中，一个spout可以发射元组到螺栓**A**和**C**。
- en: 'Each spout should implement the **IRichSpout** interface. The following are
    important methods to know in context with spout:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 每个spout都应该实现**IRichSpout**接口。以下是与spout相关的重要方法：
- en: '`nextTuple()`: This is the method that keeps on polling the external source
    for new events; for instance, the queue in the preceding example. On every poll,
    if the method finds an event, it is emitted to the topology through a stream,
    and if there is no new event, the method simply returns.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nextTuple()`: 这是一个不断轮询外部源以获取新事件的方法；例如，前面示例中的队列。在每次轮询时，如果方法发现一个事件，它会通过流发射到拓扑结构中，如果没有新事件，方法会简单地返回。'
- en: '`ack()`: This method is called when the tuple emitted by the spout has been
    successfully processed by the topology.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ack()`: 当spout发射的元组被拓扑成功处理时调用这个方法。'
- en: '`fail()`: This method is called when a tuple emitted by the spout is not successfully
    processed within the specified timeout. In this case, for reliable spouts, the
    spout traces and tracks each tuple with the `messageIds` event, which are then
    re-emitted to the topology to be reprocessed. For instance, in the preceding figure,
    the failed tuple is emitted again.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fail()`: 当spout发射的元组在指定的超时内没有成功处理时，调用这个方法。在这种情况下，对于可靠的spouts，spout使用`messageIds`事件跟踪和追踪每个元组，然后重新发射到拓扑中进行重新处理。例如，在前面的图表中，失败的元组被再次发射。'
- en: For unreliable spouts, the tuples are not tracked using `messageIds` and the
    methods such as `ack()` and `fail()` don't hold any value as the spout doesn't
    track the tuples for successful processing. These topologies are identified as
    unreliable.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 对于不可靠的spouts，元组不使用`messageIds`进行跟踪，而`ack()`和`fail()`等方法对于spout没有任何价值，因为spout不跟踪成功处理的元组。这些拓扑被标识为不可靠的。
- en: Note
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: IRichSpout is an interface provided by Storm that provides the details of the
    contracts or methods to be implemented by topology spouts.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: IRichSpout是Storm提供的一个接口，提供了拓扑spout需要实现的合同或方法的详细信息。
- en: Bolts
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 螺栓
- en: 'Bolts are the processing units of a topology. They are the components of the
    topology that perform one or more of the following tasks:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 螺栓是拓扑的处理单元。它们是拓扑的组件，执行以下一个或多个任务：
- en: Parsing
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解析
- en: Transformation
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转换
- en: Aggregation
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 聚合
- en: Joins
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接
- en: Database interaction
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库交互
- en: The entire process being performed by the topology is generally divided into
    smaller tasks and subtasks, each preferably performed by a different bolt to exploit
    the power of the parallel distributed processing of Storm.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 拓扑执行的整个过程通常被分解为更小的任务和子任务，最好由不同的螺栓执行，以利用Storm的并行分布式处理的能力。
- en: 'Let''s look at the following figure that captures a real-time use case where
    the location coordinates from various airplanes are tracked and processed to ascertain
    whether they are moving on the correct trajectory:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下下面的图表，捕捉一个实时用例，其中来自各种飞机的位置坐标被跟踪和处理，以确定它们是否在正确的轨迹上移动：
- en: '![Bolts](img/00012.jpeg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![Bolts](img/00012.jpeg)'
- en: 'Here, the flight location coordinates are sent by sensors in the plane, which
    are collated at log servers and fed into a Storm topology. The Storm topology
    is broken into the following bolts that can act on the tuples emitted by the spout:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，飞行位置坐标由飞机上的传感器发送，这些传感器被整理到日志服务器并输入到Storm拓扑中。Storm拓扑被分解成以下螺栓，可以对spout发射的元组进行操作：
- en: '**The parse event bolt**: This bolt filters and transforms the event emitted
    by the spout. It converts the information into a decipherable format.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解析事件螺栓：这个螺栓过滤和转换spout发射的事件。它将信息转换为可解密的格式。
- en: '**The location bolt**: This is the bolt that extracts the location coordinates
    from the tuples it receives from the parse bolt and then sends them across to
    the next bolt.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 位置螺栓：这是从解析螺栓接收的元组中提取位置坐标然后将它们发送到下一个螺栓的螺栓。
- en: '**The verify bolt**: This is the bolt that verifies the location coordinates
    sent by the location bolt against the predefined trajectory of the plane, and
    if it detects deviation, it sends a tuple to the alert bolt.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证螺栓：这是验证飞机预定义轨迹与位置螺栓发送的位置坐标是否一致的螺栓，如果检测到偏差，它会向警报螺栓发送一个元组。
- en: '**The alert bolt**: This bolt is the actor that informs the external systems,
    such as the air controller in our case, about the anomaly or deviation detected
    in the flight path.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 警报螺栓：这个螺栓是通知外部系统（例如我们的情况下的空中交通管制）有关飞行路径中检测到的异常或偏差的行为者。
- en: Owing to the nature of real-time use cases, such as the one depicted in the
    preceding figure, speed and accuracy of computation is of utmost importance, and
    that's the reason that makes Storm a strong technological choice for the implementation
    of such solutions.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 由于实时使用案例的性质，比如前面图中所示的案例，计算的速度和准确性至关重要，这也是使Storm成为实现这类解决方案的强大技术选择的原因。
- en: The total processing logic gets broken down into smaller tasks that are executed
    in bolts; configuring tasks and parallelism in bolts lets the engineers attain
    the right kind of performance for the solution.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 总体处理逻辑被分解为在bolt中执行的较小任务；在bolt中配置任务和并行性让工程师们获得解决方案的正确性能。
- en: 'One bolt can listen to multiple streams and it can emit to multiple other bolts
    on different streams. As depicted in the figure in the *Sprouts* section:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 一个bolt可以监听多个流，也可以在不同的流上向多个其他bolt发射。如*Sprouts*部分的图所示：
- en: Bolt-A emits to Bolt-B and Bolt-C
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bolt-A向Bolt-B和Bolt-C发射
- en: Bolt-D subscribes to streams from Bolt-C and Bolt-B
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bolt-D订阅来自Bolt-C和Bolt-B的流
- en: 'The common interfaces provided by Storm to be implemented by user-defined bolts
    are as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Storm提供的用户定义的bolt要实现的常见接口如下：
- en: IRichBolt
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IRichBolt
- en: IBasicBolt
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IBasicBolt
- en: The difference in these two interfaces depends upon whether reliable messaging
    and transactional support are required or not.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个接口的区别取决于是否需要可靠的消息传递和事务支持。
- en: 'The main methods used by the bolts are as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: bolt使用的主要方法如下：
- en: '`prepare()`: This is the method that is called when the bolt is initialized.
    Fundamentally, the Storm topology runs forever and the bolt once initialized will
    not terminate till the topology is killed. This method is generally used to initialize
    connections and read other static information, which is required during the entire
    life cycle of the bolt.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`prepare()`: 这是在bolt初始化时调用的方法。基本上，Storm拓扑会一直运行，一旦初始化，bolt就不会在拓扑被终止之前终止。这个方法通常用于初始化连接和读取其他在整个bolt生命周期中需要的静态信息。'
- en: '`execute()`: This is the method that performs the functioning and processing
    logic defined on the bolt. It is executed for every tuple.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`execute()`: 这是在bolt上执行定义的功能和处理逻辑的方法。它为每个元组执行一次。'
- en: Streams
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 流
- en: Stream can be defined as a sequence of tuples or events that are unbounded by
    nature. These streams are generally created in a parallel and distributed manner
    across the topology. Streams can be called the wiring or information flow channels
    between the spout and bolts. These are carriers of unprocessed, semiprocessed,
    and processed information to and from various task-performing components such
    as bolts and spouts. Streams are configured while encoding the topology using
    a schema that gives names to the fields in the stream's tuple.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 流可以被定义为无界的元组或事件序列。这些流通常以并行和分布的方式在拓扑中创建。流可以被称为从喷口到bolt之间的布线或信息流通道。它们是未处理、半处理和已处理信息的载体，用于各种执行任务的组件，如bolt和喷口之间的信息传递。在对拓扑进行编码时，流是使用模式配置的，该模式为流的元组命名字段。
- en: Tuples – the data model in Storm
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 元组-Storm中的数据模型
- en: A tuple is the basic and constituent data structure in Storm. It's a named list
    of values that starts its journey from the spout. It's then emitted from streams
    to bolts, then from bolts to other bolts, where various stages of processing are
    executed. On successful completion of all intended processing, as per the topology
    definition, the tuples are acked back to the spout.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 元组是Storm中的基本和组成数据结构。它是从喷口开始旅程的命名值列表。然后从流到bolt发射，然后从bolt到其他bolt，执行各种处理阶段。在成功完成所有预期的处理后，根据拓扑定义，元组被确认发送回喷口。
- en: Executing a sample Storm topology – local mode
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行一个样本Storm拓扑-本地模式
- en: Before we start this section, the assumption is that you have gone through the
    prerequisites and installed the expected components.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始本节之前，假设您已经完成了先决条件并安装了预期的组件。
- en: WordCount topology from the Storm-starter project
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 来自Storm-starter项目的WordCount拓扑结构
- en: 'To understand the components described in the previous section, let''s download
    the Storm-starter project and execute a sample topology:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解前一节中描述的组件，让我们下载Storm-starter项目并执行一个样本拓扑：
- en: 'The Storm-starter project can be downloaded using the following Git command:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以使用以下Git命令下载Storm-starter项目：
- en: '[PRE0]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, you need to import the project into your Eclipse workspace:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，您需要将项目导入到Eclipse工作区中：
- en: Start Eclipse.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Eclipse。
- en: Click on the **File** menu and select the **Import** wizard.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**文件**菜单，然后选择**导入**向导。
- en: From the **Import** wizard, select **Existing Maven Projects**.![WordCount topology
    from the Storm-starter project](img/00013.jpeg)
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**导入**向导中，选择**现有Maven项目**。![来自Storm-starter项目的WordCount拓扑结构](img/00013.jpeg)
- en: Select **pom.xml** in the Storm-starter project and specify it as `<download-folder>/starter/incubator-storm/examples/storm-starter`.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Storm-starter项目中选择**pom.xml**，并将其指定为`<download-folder>/starter/incubator-storm/examples/storm-starter`。
- en: Once the project has been successfully imported, the Eclipse folder structure
    will look like the following screenshot:![WordCount topology from the Storm-starter
    project](img/00014.jpeg)
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦项目成功导入，Eclipse文件夹结构将如下屏幕截图所示：![来自Storm-starter项目的WordCount拓扑结构](img/00014.jpeg)
- en: 'Execute the topology using the run command and you should be able to see the
    output as shown in the following screenshot:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用run命令执行拓扑，您应该能够看到如下屏幕截图中显示的输出：
- en: '![WordCount topology from the Storm-starter project](img/00015.jpeg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![来自Storm-starter项目的WordCount拓扑结构](img/00015.jpeg)'
- en: 'To understand the functioning of the topology, let''s take a look at the code
    and understand the flow and functioning of each component in the topology:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解拓扑的功能，让我们看一下代码，并了解拓扑中每个组件的流程和功能：
- en: '[PRE1]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`setSpout –RandomSentenceSpout`: This generates random sentences. Please note
    that we are using a property called parallelism hint, which is set to `5` here.
    This is the property that identifies how many instances of this component will
    be spawned at the time of submitting the topology. In our example, we will have
    five instances of the spout.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setSpout –RandomSentenceSpout`：这会生成随机句子。请注意，我们使用了一个称为并行性提示的属性，在这里设置为`5`。这是标识在提交拓扑时将生成多少个此组件实例的属性。在我们的示例中，将有五个spout实例。'
- en: '`setBolt`: We use this method to add two bolts to the topology: `SplitSentenceBolt`,
    which splits the sentence into words, and `WordCountBolt`, which counts the words.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setBolt`：我们使用这个方法向拓扑中添加两个bolt：`SplitSentenceBolt`，将句子拆分为单词，和`WordCountBolt`，对单词进行计数。'
- en: Other noteworthy items in the preceding code snippet are `suffleGrouping` and
    `fieldsGrouping`; we shall discuss these in detail in the next chapter; for now,
    understand that these are the components that control routing of tuples to various
    bolts in the topology.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，其他值得注意的项目是`suffleGrouping`和`fieldsGrouping`；我们将在下一章详细讨论这些；现在，了解这些是控制元组路由到拓扑中各个bolt的组件。
- en: Executing the topology in the distributed mode
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在分布式模式下执行拓扑
- en: To set up Storm in distributed mode, we will need to perform the following steps.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 要在分布式模式下设置Storm，需要执行以下步骤。
- en: Set up Zookeeper (V 3.3.5) for Storm
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为Storm设置Zookeeper（V 3.3.5）
- en: The coordination of a Storm topology is maintained by a Zookeeper cluster. The
    utilization of Zookeeper is not very high, as it just maintains the runnable state
    of the Storm cluster. In most cases, a single Zookeeper node should suffice, but
    in production scenarios, at least a three-node Zookeeper cluster is recommended
    so that a single node doesn't become a single point of failure.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Storm拓扑的协调由Zookeeper集群维护。Zookeeper的利用率并不是很高，因为它只是维护Storm集群的可运行状态。在大多数情况下，单个Zookeeper节点应该足够了，但在生产场景中，建议至少使用一个由三个节点组成的Zookeeper集群，以防止单个节点成为单点故障。
- en: For reliable Zookeeper service, deploy Zookeeper in a cluster known as an **ensemble**.
    As long as the majority of the ensemble is up, the service will be available.
    One of the nodes in the ensemble is automatically selected as a leader and others
    as followers. If the leader goes down, one of the follower nodes becomes the leader.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 为了可靠的Zookeeper服务，将Zookeeper部署在一个称为**集合**的集群中。只要集合中的大多数机器正常运行，服务就会可用。集合中的一个节点会自动被选为领导者，其他节点会成为跟随者。如果领导者宕机，其中一个跟随者节点会成为领导者。
- en: 'Perform the following steps on all the machines that will be part of the Zookeeper
    ensemble to set up the Zookeeper cluster:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有将成为Zookeeper集合一部分的机器上执行以下步骤，以设置Zookeeper集群：
- en: Download the most recent stable release (version 3.3.5) from the Apache Zookeeper
    site.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Apache Zookeeper网站下载最新的稳定版本（版本3.3.5）。
- en: 'Create a `zookeeper` directory under `/usr/local`:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`/usr/local`下创建一个`zookeeper`目录：
- en: '[PRE3]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Extract the downloaded TAR file to the `/usr/local` location. Use the following
    command:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将下载的TAR文件提取到`/usr/local`位置。使用以下命令：
- en: '[PRE4]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Zookeeper needs a directory to store its data. Create `/usr/local/zookeeper/tmp`
    to store this data:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Zookeeper需要一个目录来存储其数据。创建`/usr/local/zookeeper/tmp`来存储这些数据：
- en: '[PRE5]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Create a configuration file, `zoo.cfg`, under `/usr/local/zookeeper/zookeeper-3.3.5/conf`.
    The following properties will go in it:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`/usr/local/zookeeper/zookeeper-3.3.5/conf`下创建一个名为`zoo.cfg`的配置文件。以下属性将放入其中：
- en: '`tickTime`: This is the number of milliseconds of each tick (for example, 2000).'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tickTime`：这是每个滴答的毫秒数（例如，2000）。'
- en: '`initLimit`: This is the number of ticks that the initial synchronization phase
    can take (for example, 5).'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`initLimit`：这是初始同步阶段可以花费的滴答数（例如，5）。'
- en: '`syncLimit`: This is the number of ticks that can pass between sending a request
    and getting an acknowledgement (for example, 2).'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`syncLimit`：这是在发送请求和获得确认之间可以经过的滴答数（例如，2）。'
- en: '`dataDir`: This is the directory where the snapshot is stored (for example,
    `/usr/local/zookeeper/tmp`).'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dataDir`：这是快照存储的目录（例如，`/usr/local/zookeeper/tmp`）。'
- en: '`clientPort`: This is the port at which the Zookeeper clients will connect
    to the port (for example, 2182).'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clientPort`：这是Zookeeper客户端将连接到的端口（例如，2182）。'
- en: '`server.id=host:port:port`: Every machine that is part of the Zookeeper ensemble
    should know about every other machine in the ensemble. This is accomplished with
    the series of lines of the `server.id=host:port:port` form (for example, `server.1:<IP_ADDRESS_OF_ZOOKEEPER_NODE_1>:2888:3888`).'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`server.id=host:port:port`：Zookeeper集合中的每台机器都应该知道集合中的其他每台机器。这是通过`server.id=host:port:port`形式的一系列行来实现的（例如，`server.1:<ZOOKEEPER_NODE_1的IP地址>:2888:3888`）。'
- en: Repeat the preceding steps or copy the distribution to other machines that will
    be part of the Zookeeper cluster.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复前面的步骤或将分发复制到将成为Zookeeper集群一部分的其他机器上。
- en: Create a file with the name `myid` in the directory specified by the `datadir`
    property. The `myid` file consists of a single line containing only the text of
    that machine's ID (1 in the server and 1 in `zoo.cfg`). So, `myid` of server 1
    will contain the text `1` and nothing else. The ID must be unique within the ensemble
    and should have a value between 1 and 255\. The path of the `myid` file in this
    case is `vi /usr/local/zookeeper/tmp/myid`.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在由`datadir`属性指定的目录中创建名为`myid`的文件。`myid`文件包含一行文本，只包含该机器的ID的文本（服务器上的1和`zoo.cfg`中的1）。因此，服务器1的`myid`将包含文本`1`，没有其他内容。ID必须在集合中是唯一的，并且应该在1到255之间。在这种情况下，`myid`文件的路径是`vi
    /usr/local/zookeeper/tmp/myid`。
- en: Edit the `~/.bashrc` file and add an environment variable for the Zookeeper
    home and add its bin directory to the `PATH` environment variable:![Set up Zookeeper
    (V 3.3.5) for Storm](img/00016.jpeg)
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`~/.bashrc`文件，并添加一个Zookeeper主目录的环境变量，并将其bin目录添加到`PATH`环境变量中：![为Storm设置Zookeeper（V
    3.3.5）](img/00016.jpeg)
- en: 'Source the `~/`.`bashrc` file after making changes. This step is required to
    make sure that the changes that are made to `bashrc` are applied to the current
    terminal session:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在进行更改后，对`~/`.`bashrc`文件进行源操作。这一步是为了确保对`bashrc`所做的更改应用到当前的终端会话中：
- en: '[PRE6]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Start the Zookeeper daemon on each node by executing the following command
    from `$ZOOKEEPER_HOME`:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过从`$ZOOKEEPER_HOME`执行以下命令在每个节点上启动Zookeeper守护进程：
- en: '[PRE7]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Stop the Zookeeper daemon on each node by executing the following command from
    `$ZOOKEEPER_HOME`:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过从`$ZOOKEEPER_HOME`执行以下命令在每个节点上停止Zookeeper守护进程：
- en: '[PRE8]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The Zookeeper status can be checked by running the following command from `$ZOOKEEPER_HOME`:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以通过从`$ZOOKEEPER_HOME`运行以下命令来检查Zookeeper状态：
- en: '[PRE9]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The output for the different modes is as follows:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 不同模式的输出如下：
- en: If running in the standalone mode (only a single machine is part of the Zookeeper
    ensemble cluster), the following output will be seen on the console:![Set up Zookeeper
    (V 3.3.5) for Storm](img/00017.jpeg)
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果在独立模式下运行（Zookeeper集群中只有一台机器），将在控制台上看到以下输出：![为Storm设置Zookeeper（V 3.3.5）](img/00017.jpeg)
- en: If running in the clustered mode, the following output is seen on the leader
    node:![Set up Zookeeper (V 3.3.5) for Storm](img/00018.jpeg)
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果在集群模式下运行，将在领导节点上看到以下输出：![为Storm设置Zookeeper（V 3.3.5）](img/00018.jpeg)
- en: If running in the clustered mode, the following output is seen on the follower
    node:![Set up Zookeeper (V 3.3.5) for Storm](img/00019.jpeg)
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果在集群模式下运行，将在follower节点上看到以下输出：![为Storm设置Zookeeper（V 3.3.5）](img/00019.jpeg)
- en: By default, the Zookeeper log (`zookeeper.out`) is created at the same location
    from where its instance is started. This completes the Zookeeper cluster setup.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Zookeeper日志（`zookeeper.out`）将在启动其实例的相同位置创建。这完成了Zookeeper集群的设置。
- en: Setting up Storm in the distributed mode
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在分布式模式下设置Storm
- en: 'Perform the following steps to set up Storm in distributed mode:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤设置分布式模式下的Storm：
- en: Download the `Storm-0.9.2-incubating.zip` package from the GitHub Storm site.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从GitHub Storm网站下载`Storm-0.9.2-incubating.zip`包。
- en: 'Create the directories `storm` and `storm/tmp` under `/usr/local`:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`/usr/local`下创建`storm`和`storm/tmp`目录：
- en: '[PRE10]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Create the following directories for logs:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为日志创建以下目录：
- en: '[PRE11]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Extract the ZIP file on Nimbus and the worker machines from the directory at
    `/usr/local`:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Nimbus和工作机器上的`/usr/local`目录中解压ZIP文件：
- en: '[PRE12]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Make the following changes at `/usr/local/storm/storm-0.9.2-incubating/conf/storm.yaml`:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`/usr/local/storm/storm-0.9.2-incubating/conf/storm.yaml`中进行以下更改：
- en: '`storm.zookeeper.servers`: This is a list of the hosts in the Zookeeper cluster
    for the Storm cluster:'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`storm.zookeeper.servers`：这是Storm集群中Zookeeper集群中主机的列表：'
- en: '[PRE13]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '`storm.zookeeper.port`: This is the port on which the Zookeeper cluster is
    running:'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`storm.zookeeper.port`：这是Zookeeper集群运行的端口：'
- en: '[PRE14]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '`storm.local.dir`: The Nimbus and the supervisor require a location on the
    local disk to store a small amount of data related to configurations and execution
    details of the topology. Please make sure to create the directory and assign read/write
    permissions on all Storm nodes. For our installation, we are going to create this
    directory in the `/usr/local/storm/tmp` location:'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`storm.local.dir`：Nimbus和Supervisor需要本地磁盘上的位置来存储与拓扑的配置和执行细节相关的少量数据。请确保在所有Storm节点上创建该目录并分配读/写权限。对于我们的安装，我们将在`/usr/local/storm/tmp`位置创建此目录：'
- en: '[PRE15]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '`nimbus.host`: The nodes need to know which machine is the master in order
    to download topology jars and confs. This property is used for this purpose:'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nimbus.host`：节点需要知道哪台机器是主节点，以便下载拓扑jar包和配置文件。此属性用于此目的：'
- en: '[PRE16]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '`java.library.path`: This is the load path for the native libraries that Storm
    uses (ZeroMQ and JZMQ). The default of `/usr/local/lib:/opt/local/lib:/usr/lib`
    should be fine for most installations, so validate the libraries in the previously
    mentioned locations before moving forward.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`java.library.path`：这是Storm使用的本地库（ZeroMQ和JZMQ）的加载路径。对于大多数安装来说，默认值`/usr/local/lib:/opt/local/lib:/usr/lib`应该是可以的，所以在继续之前验证前面提到的位置中的库。'
- en: '`storm.messaging.netty`: Storm''s Netty-based transport has been overhauled
    to significantly improve performance through better utilization of thread, CPU,
    and network resources, particularly in cases where message sizes are small. In
    order to provide Netty support, the following configurations need to be added:'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`storm.messaging.netty`：Storm的基于Netty的传输已经进行了大幅改进，通过更好地利用线程、CPU和网络资源，特别是在消息大小较小的情况下，显着提高了性能。为了提供Netty支持，需要添加以下配置：'
- en: '[PRE17]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The `storm.yaml` snippet from our Storm cluster installation is as follows:'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的Storm集群安装中的`storm.yaml`片段如下：
- en: '[PRE18]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Set the `STORM_HOME` environment in the `~/.bashrc` file and add Storm's `bin`
    directory in the `PATH` environment variable. This is added to execute Storm binaries
    from any location.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`~/.bashrc`文件中设置`STORM_HOME`环境，并将Storm的`bin`目录添加到`PATH`环境变量中。这样可以在任何位置执行Storm二进制文件。
- en: 'Copy the `Storm.yaml` file to the `bin` folder of the Storm installation on
    the Nimbus machine using the following command:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令将`Storm.yaml`文件复制到Nimbus机器上Storm安装的`bin`文件夹中：
- en: '[PRE19]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Launching Storm daemons
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动Storm守护进程
- en: 'Now that the Storm cluster is set, we will be required to start three processes
    on respective Storm nodes. They are as follows:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 现在Storm集群已经设置好，我们需要在各自的Storm节点上启动三个进程。它们如下：
- en: '**Nimbus:** Start Nimbus as the background process on the machine identified
    as the master node by running the following command from `$STORM_HOME`:'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Nimbus:** 通过从`$STORM_HOME`运行以下命令在被识别为主节点的机器上作为后台进程启动Nimbus：'
- en: '[PRE20]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '**Supervisor:** Supervisors can be started in a similar way Nimbus is started.
    Run the following command from `$STORM_HOME`:'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Supervisor:** 可以像启动Nimbus一样启动Supervisors。从`$STORM_HOME`运行以下命令：'
- en: '[PRE21]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '**UI:** The Storm UI is a web application to check the Storm cluster, which
    contains the Nimbus/Supervisor status. It also lists all the running topologies
    and their details. The UI can be enabled by using the following command from `$STORM_HOME`:'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**UI:** Storm UI是一个Web应用程序，用于检查Storm集群，其中包含Nimbus/Supervisor状态。它还列出了所有运行中的拓扑及其详细信息。可以通过以下命令从`$STORM_HOME`启用UI：'
- en: '[PRE22]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The UI can be accessed through `http://<IP_ADDRESS_OF_NIMBUS>:8080`.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过`http://<IP_ADDRESS_OF_NIMBUS>:8080`访问UI。
- en: Executing the topology from Command Prompt
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从命令提示符执行拓扑
- en: 'Once the UI is visible and all the daemons are started, the topology can be
    submitted on Nimbus using the following command:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦UI可见并且所有守护程序都已启动，就可以使用以下命令在Nimbus上提交拓扑：
- en: '[PRE23]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The Storm UI with the `WordCount` topology running in distributed mode is shown
    here. It depicts the topology state, uptime, and other details (we shall discuss
    the features of the UI in detail in a later chapter). We can kill the topology
    from the UI.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里显示了以分布式模式运行的带有`WordCount`拓扑的Storm UI。它显示了拓扑状态、正常运行时间和其他详细信息（我们将在后面的章节中详细讨论UI的特性）。我们可以从UI中终止拓扑。
- en: '![Executing the topology from Command Prompt](img/00020.jpeg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![从命令提示符执行拓扑](img/00020.jpeg)'
- en: Tweaking the WordCount topology to customize it
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调整WordCount拓扑以自定义它
- en: 'Now that we have deployed the `WordCount` topology in distributed mode, let''s
    tweak the code in the bolts a bit to write `WordCount` onto a file. To achieve
    this, we will proceed with the following steps:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经以分布式模式部署了`WordCount`拓扑，让我们稍微调整螺栓中的代码，以将`WordCount`写入文件。为了实现这一点，我们将按照以下步骤进行：
- en: 'We intend to create a new bolt, `FileWriterBolt`, to achieve this. Open `WordCountTopology.java`
    and add the following snippet to `WordCountTopology.java`:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们打算创建一个新的螺栓`FileWriterBolt`，以实现这一目标。打开`WordCountTopology.java`并将以下片段添加到`WordCountTopology.java`中：
- en: '[PRE24]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Next we have to make changes to the `main()` method to use this new bolt instead
    of `WordCount Bolt()`; here is the snippet:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们必须更改`main()`方法，以使用这个新的螺栓，而不是`WordCount Bolt()`；以下是片段：
- en: '[PRE25]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Next, you can execute the topology using Eclipse, run it as Java, and the output
    will be saved into a file called `wordCount.txt` in your home directory.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，您可以使用Eclipse执行拓扑，将其作为Java运行，输出将保存到名为`wordCount.txt`的文件中，保存在您的主目录中。
- en: 'To run in distributed mode, use the following steps:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要以分布式模式运行，请使用以下步骤：
- en: 'Compile the topology changes to generate a new Storm-starter project using
    the following command line:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译拓扑更改以生成新的Storm-starter项目，使用以下命令行：
- en: '[PRE26]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Copy `storm-starter-0.0.1-SNAPSHOT-jar-with-dependencies.jar` from the target
    folder under the starter project to Nimbus, let's say, at `/home/admin/topology/`.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从starter项目的目标文件夹中复制`storm-starter-0.0.1-SNAPSHOT-jar-with-dependencies.jar`到Nimbus，比如在`/home/admin/topology/`。
- en: 'Submit the topology using the following command:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令提交拓扑：
- en: '[PRE27]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The output will be the same as the `WordCount` topology executed in the figure
    in the preceding section.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输出将与前一节中图中执行的`WordCount`拓扑相同。
- en: Quiz time
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测验时间
- en: 'Q.1\. State whether the following statements are true or false:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: Q.1\. 判断以下陈述是真还是假：
- en: All Storm topologies are reliable.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有Storm拓扑都是可靠的。
- en: A topology generally has multiple spouts.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个拓扑通常有多个喷口。
- en: A topology generally has multiple bolts.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个拓扑通常有多个螺栓。
- en: One bolt can emit on only one stream.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个螺栓只能在一个流上发射。
- en: 'Q.2\. Fill in the blanks:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: Q.2\. 填空：
- en: _______________ is the template to create the topology.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: _______________是创建拓扑的模板。
- en: _______________ specifies how many instances of a particular bolt or spout are
    spawned.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: _______________指定了特定螺栓或喷嘴的实例数量。
- en: The ___________ daemon of Storm is analogous to the job tracker of Hadoop.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Storm的_______________守护程序类似于Hadoop的作业跟踪器。
- en: 'Q.3\. Perform the following task:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: Q.3\. 执行以下任务：
- en: Make changes to the `WordCount` topology of the Storm-starter project to `RandomSentenceSpout`
    so that it's able to read sentences from a file at a specified location.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对Storm-starter项目的`WordCount`拓扑进行更改，以便它能够从指定位置的文件中读取句子。
- en: Summary
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have set up the Storm ensemble. You were introduced to the
    various building blocks of a Storm topology such as bolts, spouts, and the wiring
    template—topology builder. We executed and understood the `WordCount` topology
    and also made some amendments to it.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经设置了Storm集群。您已经了解了Storm拓扑的各种构建模块，如螺栓、喷口和布线模板-拓扑构建器。我们执行并了解了`WordCount`拓扑，并对其进行了一些修正。
- en: In the next chapter, you will read and understand about stream groupings, anchoring,
    and acking. That will also lead us to reliable and non-reliable mechanisms in
    the topologies under the Storm framework.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将阅读并了解有关流分组、锚定和确认的内容。这也将引导我们了解Storm框架下拓扑中的可靠和非可靠机制。
