- en: Chapter 3. Introducing Petrel
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。介绍Petrel
- en: 'As discussed in [Chapter 1](ch01.html "Chapter 1. Getting Acquainted with Storm"),
    *Getting Acquainted with Storm*, Storm is a platform for processing large amounts
    of data in real time. Storm applications are often written in Java, but Storm
    supports other languages as well, including Python. While the concepts are similar
    across languages, the details vary by language. In this chapter, we''ll get our
    first hands-on experience using Storm with Python. First, you''ll learn about
    a Python library called Petrel, which is necessary for creating topologies in
    Python. Next, we''ll set up our Python/Storm development environment. Then, we''ll
    take a close look at a working Storm topology written in Python. Finally, we''ll
    run the topology and you will learn some key techniques to ease the process of
    developing and debugging topologies. After you complete this chapter, you''ll
    have a good high-level understanding of developing basic Storm topologies. In
    this chapter, we will cover these topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如[第1章](ch01.html "第1章。熟悉Storm")中所讨论的，*熟悉Storm*，Storm是一个用于实时处理大量数据的平台。Storm应用通常用Java编写，但Storm也支持其他语言，包括Python。虽然各种语言的概念相似，但细节因语言而异。在本章中，我们将首次使用Python与Storm进行实际操作。首先，您将了解一个名为Petrel的Python库，这对于在Python中创建拓扑是必要的。接下来，我们将设置Python/Storm开发环境。然后，我们将仔细研究一个用Python编写的工作中的Storm拓扑。最后，我们将运行拓扑，您将学习一些关键技术，以便简化开发和调试拓扑的过程。完成本章后，您将对开发基本Storm拓扑有一个很好的高层理解。在本章中，我们将涵盖以下主题：
- en: What is Petrel?
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是Petrel？
- en: Installing Petrel
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Petrel
- en: Creating your first topology
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建您的第一个拓扑
- en: Running the topology
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行拓扑
- en: Productivity tips with Petrel
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Petrel的生产力技巧
- en: What is Petrel?
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是Petrel？
- en: All Python topologies in this book rely on an open source Python library called
    Petrel. If you have prior experience with Storm, you may recall that there is
    a GitHub project called `storm-starter` that includes examples of using Storm
    with various languages (you can find the latest version of `storm-starter` at
    [https://github.com/apache/storm/tree/master/examples/storm-starter](https://github.com/apache/storm/tree/master/examples/storm-starter)).
    The `storm-starter` project includes a module called `storm.py`, which allows
    you to implement Storm topologies in Python. Given the availability of `storm.py`,
    is it really necessary to use another library? While it is certainly possible
    to build topologies using `storm.py`, it lacks some important features. To work
    around those gaps, a developer must use languages and tools that won't be familiar
    to most Python developers. If you are already familiar with these tools and do
    not mind juggling multiple technology stacks as you work with Storm, you may be
    happy with `storm.py`. But most developers who are new to Storm find the `storm.py`
    approach to be overly complex, even overwhelming. Let's discuss the weaknesses
    of `storm.py` in more detail.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中所有的Python拓扑都依赖于一个名为Petrel的开源Python库。如果您之前有Storm的经验，您可能会记得有一个名为`storm-starter`的GitHub项目，其中包括了使用各种语言与Storm的示例（您可以在[https://github.com/apache/storm/tree/master/examples/storm-starter](https://github.com/apache/storm/tree/master/examples/storm-starter)找到`storm-starter`的最新版本）。`storm-starter`项目包括一个名为`storm.py`的模块，它允许您在Python中实现Storm拓扑。鉴于`storm.py`的可用性，真的有必要使用另一个库吗？虽然使用`storm.py`构建拓扑是完全可能的，但它缺少一些重要的功能。为了解决这些差距，开发者必须使用对大多数Python开发者来说并不熟悉的语言和工具。如果您已经熟悉这些工具，并且在使用Storm时不介意同时使用多种技术栈，您可能会满意于`storm.py`。但大多数对Storm不熟悉的开发者发现`storm.py`的方法过于复杂，甚至令人不知所措。让我们更详细地讨论一下`storm.py`的弱点。
- en: Building a topology
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建拓扑
- en: In order to run a topology, Storm needs a description of spouts, bolts, and
    streams within it. This description is encoded in a format called **Thrift**.
    The `storm.py` module does not support the creation of this description; the developer
    must create it using another programming language (typically Java or Clojure).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了运行一个拓扑，Storm需要其中spouts、bolts和streams的描述。这个描述是用一种叫做**Thrift**的格式编码的。`storm.py`模块不支持创建这个描述；开发者必须使用另一种编程语言（通常是Java或Clojure）来创建它。
- en: Packaging a topology
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 打包拓扑
- en: A topology is submitted to Storm in the form of a Java `.jar` file (similar
    to Python `.egg` or `.tar.gz` files). In addition to the topology description,
    a Python topology `.jar` must also include the Python code for the topology. Creating
    a JAR file typically involves using Java development tools such as Ant or Maven.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 拓扑以Java`.jar`文件的形式提交给Storm（类似于Python`.egg`或`.tar.gz`文件）。除了拓扑描述，Python拓扑`.jar`还必须包括拓扑的Python代码。创建一个JAR文件通常涉及使用Java开发工具，如Ant或Maven。
- en: Logging events and errors
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 记录事件和错误
- en: It is much easier to debug and monitor a topology if it includes logging messages
    to allow tracking of the data that flows through it. If things go wrong in a Python
    topology and the code crashes, it's invaluable to see what the error was and where
    it occurred. The `storm.py` module provides no help in these areas. If a component
    crashes, it simply exits without capturing any information. In my experience,
    this is the most frustrating aspect of working with `storm.py`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果拓扑包括记录消息以跟踪流经其中的数据，那么调试和监视拓扑将更加容易。如果Python拓扑出现问题并且代码崩溃，查看错误和发生错误的位置是非常宝贵的。`storm.py`模块在这些方面提供不了任何帮助。如果一个组件崩溃，它会简单地退出而不捕获任何信息。根据我的经验，这是使用`storm.py`最令人沮丧的方面。
- en: Managing third-party dependencies
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理第三方依赖
- en: 'Real-world Python applications often use third-party libraries. If a cluster
    needs to run multiple topologies, each topology may have different, even conflicting
    versions of these libraries. Python virtual environments are a great tool for
    managing this. However, `storm.py` does not help you create, activate, or install
    third-party libraries in a Python virtual environment. Petrel addresses all of
    these limitations of Storm''s built-in Python support, providing a simpler, more
    streamlined development experience. Petrel''s key features include the following:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现实世界的Python应用程序经常使用第三方库。如果一个集群需要运行多个拓扑，每个拓扑可能具有不同甚至冲突的这些库的版本。Python虚拟环境是管理这一切的好工具。然而，`storm.py`不会帮助您在Python虚拟环境中创建、激活或安装第三方库。Petrel解决了Storm内置Python支持的所有这些限制，提供了更简单、更流畅的开发体验。Petrel的主要特点包括以下内容：
- en: A Python API for building a topology
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于构建拓扑的Python API
- en: Packaging a topology for submission to Storm
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将拓扑打包以提交到Storm
- en: Logging events and errors
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记录事件和错误
- en: On worker nodes, setting up a topology-specific Python runtime environment using
    `setup.sh`
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在工作节点上，使用`setup.sh`设置特定于拓扑的Python运行时环境
- en: In this chapter, we'll talk about the first three points. We'll see an example
    of the fourth in [Chapter 4](ch04.html "Chapter 4. Example Topology – Twitter"),
    *Example Topology – Twitter*.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论前三点。我们将在[第4章](ch04.html "第4章。示例拓扑 - Twitter")中看到第四点的示例，*示例拓扑 - Twitter*。
- en: Installing Petrel
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Petrel
- en: 'Let''s set up our Python development environment. We assume here that you have
    already followed the instructions in [Chapter 1](ch01.html "Chapter 1. Getting
    Acquainted with Storm"), *Getting Acquainted with Storm*, to install Storm 0.9.3:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们设置我们的Python开发环境。我们在这里假设您已经按照[第1章](ch01.html "第1章。熟悉Storm")中的说明安装了Storm 0.9.3：
- en: 'First, we need to install `virtualenv`, a tool for managing Python libraries.
    On Ubuntu, simply run this command:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要安装`virtualenv`，这是一个管理Python库的工具。在Ubuntu上，只需运行此命令：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, we create a Python virtual environment. This provides a way to install
    Python libraries without requiring root access to the machine and without interfering
    with the system''s Python packages:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们创建一个Python虚拟环境。这提供了一种安装Python库的方式，而无需对机器进行根访问，也不会干扰系统的Python包：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You will see something like the following output:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到类似以下的输出：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Next, run this command to activate the virtual environment. Your shell prompt
    will change to include the `virtualenv` name, indicating that the virtual environment
    is active:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，运行此命令以激活虚拟环境。您的shell提示符将更改以包括`virtualenv`名称，表示虚拟环境处于活动状态：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You'll need to run this command again—each time you open a new terminal.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要再次运行此命令 - 每次打开新终端时。
- en: 'Finally, install Petrel:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，安装Petrel：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The first three digits of the Petrel version number must match the version of
    Storm that you're using. If you're using a version of Storm with no corresponding
    Petrel release, you can install Petrel from source. Check out [https://github.com/AirSage/Petrel#installing-petrel-from-source](https://github.com/AirSage/Petrel#installing-petrel-from-source)
    for instructions.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Petrel版本号的前三位数字必须与您使用的Storm版本号匹配。如果您使用的Storm版本没有相应的Petrel发布，您可以从源代码安装Petrel。查看[https://github.com/AirSage/Petrel#installing-petrel-from-source](https://github.com/AirSage/Petrel#installing-petrel-from-source)获取说明。
- en: Tip
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在[http://www.packtpub.com](http://www.packtpub.com)的帐户中下载您购买的所有Packt图书的示例代码文件。如果您在其他地方购买了这本书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，以便将文件直接通过电子邮件发送给您
- en: Creating your first topology
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建您的第一个拓扑
- en: 'Now, we''ll create a Storm topology that breaks sentences into words and then
    counts the number of occurrences of each word. Implementing this topology in Storm
    requires the following components:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将创建一个Storm拓扑，将句子分解为单词，然后计算每个单词的出现次数。在Storm中实现这个拓扑需要以下组件：
- en: 'Sentence spout (`randomsentence.py`): A topology always begins with a spout;
    that''s how data gets into Storm. The sentence spout will emit an infinite stream
    of sentences.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 句子喷口（`randomsentence.py`）：拓扑始终以喷口开始；这就是数据进入Storm的方式。句子喷口将发出无限流的句子。
- en: 'Splitter bolt (`splitsentence.py`): This receives sentences and splits them
    into words.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分割器螺栓（`splitsentence.py`）：接收句子并将其分割成单词。
- en: 'Word count bolt (`wordcount.py`): This receives words and counts the occurrences.
    For each word processed, output the word along with the number of occurrences.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单词计数螺栓（`wordcount.py`）：接收单词并计算出现次数。对于每个处理的单词，输出该单词以及出现次数。
- en: 'The following figure shows how data flows through the topology:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图显示了数据如何通过拓扑流动：
- en: '![Creating your first topology](img/B03471_03_01.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![创建您的第一个拓扑](img/B03471_03_01.jpg)'
- en: Word count topology
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 单词计数拓扑
- en: Now that we've seen the basic data flow, let's implement the topology and see
    how it works.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了基本的数据流动，让我们实现拓扑并看看它是如何工作的。
- en: Sentence spout
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 句子喷口
- en: 'In this section, we implement a spout that generates random sentences. Enter
    this code in a file called `randomsentence.py`:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们实现了一个生成随机句子的喷口。在名为`randomsentence.py`的文件中输入此代码：
- en: '[PRE5]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The spout inherits from Petrel's `Spout` class.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 喷口继承自Petrel的`Spout`类。
- en: Petrel requires every spout and bolt class to implement `__init__()` and pass
    its filename to the `(script=__file__)` base class. The `script` parameter tells
    Petrel which Python script to run while launching an instance of the component.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Petrel要求每个喷口和螺栓类都要实现`__init__()`并将其文件名传递给`(script=__file__)`基类。`script`参数告诉Petrel在启动组件实例时运行哪个Python脚本。
- en: The `declareOutputFields()` function tells Storm about the structure of the
    tuples emitted by this spout. Each tuple consists of a single field named `sentence`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`declareOutputFields()`函数告诉Storm关于这个分流器发出的元组的结构。每个元组由一个名为`sentence`的单个字段组成。'
- en: Storm calls `nextTuple()` each time it is ready for more data from the spout.
    In a real-world spout, you might be reading from an external data source, such
    as Kafka or Twitter. This spout is just an example, so it generates its own data.
    It simply makes a random choice between one of two sentences.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Storm每次准备从分流器获取更多数据时都会调用`nextTuple()`。在真实的分流器中，您可能会从外部数据源（如Kafka或Twitter）读取数据。这个分流器只是一个例子，所以它生成自己的数据。它只是在两个句子之间随机选择一个。
- en: You may have noticed that the spout sleeps for 0.25 seconds on every call to
    `nextTuple()`. Why is this so? It's not technically necessary, but it slows things
    down and makes the output easier to read when the topology runs in local mode.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到，分流器在每次调用`nextTuple()`时都会休眠0.25秒。为什么会这样？这在技术上并不是必要的，但它会减慢速度，并且在本地模式下运行拓扑时，使输出更容易阅读。
- en: What does the `run()` function do? It's a bit of *glue* code required by Petrel.
    When a spout or bolt script is loaded into Storm, Petrel calls the `run()` function
    to create the component and begins processing messages. If your spout or bolt
    needs to do additional initialization, this is a good place for it to do so.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`run()`函数的作用是什么？这是Petrel需要的一点*粘合*代码。当一个分流器或螺栓脚本被加载到Storm中时，Petrel调用`run()`函数来创建组件并开始处理消息。如果您的分流器或螺栓需要进行额外的初始化，这是一个很好的地方。'
- en: Splitter bolt
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分割器螺栓
- en: 'This section provides the splitter bolt, which consumes sentences from the
    spout and splits them into words. Enter this code in a file called `splitsentence.py`:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 本节提供了分割器螺栓，它从分流器中获取句子并将其分割成单词。将以下代码输入名为`splitsentence.py`的文件中：
- en: '[PRE6]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`SplitSentenceBolt` inherits from the `BasicBolt` Petrel class. This class
    is used for most simple bolts. You may recall that Storm has a feature for ensuring
    that every message is processed, "replaying" previous tuples if they were not
    processed to completion. `BasicBolt` simplifies working with this feature. It
    does so by automatically acknowledging to Storm as each tuple is processed. The
    more flexible `Bolt` class allows the programmer to directly acknowledge tuples,
    but is it beyond the scope of this book.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`SplitSentenceBolt`继承自`BasicBolt` Petrel类。这个类用于大多数简单的螺栓。您可能还记得Storm有一个特性，可以确保每条消息都被处理，如果它们没有被完全处理，就会“重放”之前的元组。`BasicBolt`简化了使用这个特性。它通过在每个元组被处理时自动向Storm确认来实现。更灵活的`Bolt`类允许程序员直接确认元组，但这超出了本书的范围。'
- en: The split sentence bolt has a run function, similar to the spout.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 分割句子螺栓具有运行函数，类似于分流器。
- en: The `process()` function receives sentences from the spout and splits them into
    words. Each word is emitted as an individual tuple.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`process()`函数接收来自分流器的句子并将其分割成单词。每个单词都作为一个单独的元组发出。'
- en: Word Counting Bolt
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单词计数螺栓
- en: 'This section implements the word count bolt, which consumes words from the
    spout and counts them. Enter the following code in the `wordcount.py` file:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 本节实现了单词计数螺栓，它从分流器中获取单词并对其进行计数。将以下代码输入名为`wordcount.py`的文件中：
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The word count bolt has a new wrinkle; unlike the sentence bolt, it needs to
    store information from one tuple to the next—the word count. The `__init__()`
    function sets up a `_count` field to handle this.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 单词计数螺栓有一个新的变化；与句子螺栓不同，它需要存储从一个元组到下一个元组的信息——单词计数。`__init__()`函数设置了一个`_count`字段来处理这个问题。
- en: The word count bolt uses Python's handy `defaultdict` class, which simplifies
    counting things by automatically providing a `0` entry when we access a nonexistent
    key.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 单词计数螺栓使用Python方便的`defaultdict`类，它通过在访问不存在的键时自动提供`0`条目来简化计数。
- en: Defining a topology
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义拓扑
- en: 'The previous sections provided the spout and bolts for the word count topology.
    Now, we need to tell Storm how the components combine to form a topology. In Petrel,
    this is done with a `create.py` script. This script provides the following information:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的章节提供了单词计数拓扑的分流器和螺栓。现在，我们需要告诉Storm如何将组件组合成拓扑。在Petrel中，可以通过`create.py`脚本来完成这个任务。该脚本提供以下信息：
- en: Spouts and bolts that make up the topology
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组成拓扑的分流器和螺栓
- en: For each bolt, where its input data comes from
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个螺栓的输入数据来自哪里
- en: How tuples are partitioned among the instances of the bolt
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 元组如何在螺栓的实例之间分区
- en: 'Here is the `create.py` script:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`create.py`脚本：
- en: '[PRE8]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: It is vital that the word count bolt uses Storm's `fieldsGrouping` behavior
    (as described in the *Stream grouping* section of [Chapter 2](ch02.html "Chapter 2. The
    Storm Anatomy"), *The Storm Anatomy*).This setting for a bolt lets you group the
    tuples in your data stream on one or more fields. For the word count topology,
    `fieldsGrouping` ensures that all instances of a word will be counted by the same
    Storm worker process.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 单词计数螺栓必须使用Storm的`fieldsGrouping`行为（如[第2章](ch02.html "第2章. Storm解剖")*Storm解剖*中的*流分组*部分所述）。这个螺栓的设置可以让您在数据流中根据一个或多个字段对元组进行分组。对于单词计数拓扑，`fieldsGrouping`确保所有单词的实例都将由同一个Storm工作进程计数。
- en: 'When the topology is deployed on a cluster, there will probably be many separate
    running instances of the word count bolt. If we didn''t configure `fieldsGrouping`
    on the `"word"` field, then we might get the following results by processing the
    sentence, "the cow jumped over the moon":'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 当拓扑部署在集群上时，单词计数螺栓可能会有很多个独立运行的实例。如果我们没有在`"word"`字段上配置`fieldsGrouping`，那么通过处理句子“the
    cow jumped over the moon”，我们可能会得到以下结果：
- en: '[PRE9]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'There are two entries for `"the"`, and because of this, the count is wrong!
    We want something like this instead:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个`"the"`的条目，因此计数是错误的！我们希望得到这样的结果：
- en: '[PRE10]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Running the topology
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行拓扑
- en: 'Just a few more details and we''ll be ready to run the topology:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 只需再提供一些细节，我们就可以运行拓扑了：
- en: 'Create a `topology.yaml` file. This is a configuration file for Storm. A complete
    explanation of this file is beyond the scope of this book, but you can see the
    entire set of available options at [https://github.com/apache/storm/blob/master/conf/defaults.yaml](https://github.com/apache/storm/blob/master/conf/defaults.yaml):'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`topology.yaml`文件。这是Storm的配置文件。这本书的范围超出了对该文件的完整解释，但您可以在[https://github.com/apache/storm/blob/master/conf/defaults.yaml](https://github.com/apache/storm/blob/master/conf/defaults.yaml)上看到所有可用选项的完整集合：
- en: '[PRE11]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Create an empty `manifest.txt` file. You can use an editor to do this or simply
    run `touch manifest.txt`. This is a Petrel-specific file that tells Petrel what
    additional files (if any) should be included in the `.jar` file that it submits
    to Storm. In [Chapter 4](ch04.html "Chapter 4. Example Topology – Twitter"), *Example
    Topology – Twitter* we'll see an example that really uses this file.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个空的`manifest.txt`文件。您可以使用编辑器来做这个或者简单地运行`touch manifest.txt`。这是一个特定于Petrel的文件，告诉Petrel应该在提交给Storm的`.jar`文件中包含哪些附加文件（如果有的话）。在[第4章](ch04.html
    "第4章。示例拓扑 - Twitter")中，*示例拓扑 - Twitter*我们将看到一个真正使用这个文件的示例。
- en: 'Before running the topology, let''s review the list of files we''ve created.
    Make sure you have created these files correctly:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在运行拓扑之前，让我们回顾一下我们创建的文件列表。确保您已正确创建这些文件：
- en: '`randomsentence.py`'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`randomsentence.py`'
- en: '`splitsentence.py`'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`splitsentence.py`'
- en: '`wordcount.py`'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wordcount.py`'
- en: '`create.py`'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`create.py`'
- en: '`topology.yaml`'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`topology.yaml`'
- en: '`manifest.txt`'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`manifest.txt`'
- en: 'Run the topology with the following command:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令运行拓扑：
- en: '[PRE12]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Congratulations! You have created and run your first topology!
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您已经创建并运行了您的第一个拓扑！
- en: Petrel runs the `create.py` script to discover the structure of the topology,
    and then uses that information plus the `manifest.txt` file to build a `topology.jar`
    file and submit it to Storm. Next, Storm unpacks the `topology.jar` file and prepares
    the workers. With Petrel, this requires creating a Python virtual environment
    and installing Petrel from the Internet. In about 30 seconds, the topology will
    be up and running in Storm.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Petrel运行`create.py`脚本来发现拓扑的结构，然后使用该信息加上`manifest.txt`文件来构建`topology.jar`文件并将其提交给Storm。接下来，Storm解压`topology.jar`文件并准备工作进程。使用Petrel，这需要创建一个Python虚拟环境并从互联网安装Petrel。大约30秒后，拓扑将在Storm中运行起来。
- en: 'You''ll see an endless stream of output, sprinkled with messages similar to
    the following:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到无休止的输出流，其中夹杂着类似以下的消息：
- en: '[PRE13]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'When you''ve seen enough, press *Ctrl* + *C* to kill Storm. Sometimes, it doesn''t
    exit cleanly. If it doesn''t, typically the following steps will clean things
    up: press *Ctrl* + *C* a few more times, and press *Ctrl* + *Z* to pause Storm.'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您看够了，请按*Ctrl* + *C* 杀死Storm。有时它不会干净地退出。如果不行，通常以下步骤会清理问题：多按几次*Ctrl* + *C*，然后按*Ctrl*
    + *Z* 暂停Storm。
- en: Type `ps` to get a list of `processesLook` for a Java process and get its process
    `idType "kill -9 processid"`, replacing `processid` with the ID of the Java process.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 键入`ps`以获取`processes`列表，查找Java进程并获取其进程`idType "kill -9 processid"`，将`processid`替换为Java进程的ID。
- en: Troubleshooting
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 故障排除
- en: 'If the topology doesn''t run correctly, review the log files created in the
    current directory. Errors are often caused by using a version of Storm that does
    not have a corresponding version of Petrel on the PyPI website ([https://pypi.python.org/pypi/petrel](https://pypi.python.org/pypi/petrel)).
    At the time of writing this book, two Storm versions are supported:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果拓扑不能正确运行，请查看在当前目录中创建的日志文件。错误通常是由于使用与PyPI网站上的Petrel对应版本的Storm版本不匹配（[https://pypi.python.org/pypi/petrel](https://pypi.python.org/pypi/petrel)）。在撰写本书时，有两个Storm版本得到支持：
- en: 0.9.3
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 0.9.3
- en: 0.9.4
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 0.9.4
- en: 'If you are using an unsupported version of Storm, you are likely to see an
    error similar to one of these:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是不受支持的Storm版本，可能会看到类似以下错误之一：
- en: '[PRE14]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Productivity tips with Petrel
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Petrel的生产力技巧
- en: We've covered a lot of ground in this chapter. While we don't know every detail
    of Storm, we've seen how to construct a topology with multiple components and
    send data between them.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经涵盖了很多内容。虽然我们不知道Storm的每一个细节，但我们已经看到了如何构建一个具有多个组件的拓扑，并在它们之间发送数据。
- en: The Python code for the topology is quite short—only about 75 lines in all.
    This makes a nice example, but really, it's just a little too short. When you
    start writing your own topologies, things probably won't work perfectly the first
    time. New code usually has bugs, and may even crash sometimes. To get things working
    correctly, you'll need to know what's happening in the topology, especially when
    there are problems. As you work on fixing problems, you'll be running the same
    topology over and over, and the 30-second startup time for a topology can seem
    like eternity.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 拓扑的Python代码非常简短——总共只有大约75行。这是一个很好的例子，但实际上，它只是稍微有点短。当您开始编写自己的拓扑时，事情可能不会一开始就完美。新代码通常会有错误，有时甚至会崩溃。要正确地使事情运行，您需要知道拓扑中发生了什么，特别是在出现问题时。当您努力解决问题时，您将一遍又一遍地运行相同的拓扑，而拓扑的30秒启动时间可能会显得很漫长。
- en: Improving startup performance
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 改进启动性能
- en: 'Let''s address startup performance first. By default, when a Petrel topology
    starts up, it creates a new Python `virtualenv` and installs Petrel and other
    dependencies in it. While this behavior is very useful for deploying a topology
    on a cluster, it is very inefficient during development, when you may be launching
    the topology dozens of times. To skip the `virtualenv` creation step, simply change
    the `submit` command to have Petrel reuse the existing Python virtual environment:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 首先让我们解决启动性能问题。默认情况下，当Petrel拓扑启动时，它会创建一个新的Python `virtualenv` 并在其中安装Petrel和其他依赖项。虽然这种行为在部署拓扑到集群上时非常有用，但在开发过程中，当您可能会多次启动拓扑时，这种行为非常低效。要跳过`virtualenv`创建步骤，只需将`submit`命令更改为Petrel重用现有的Python虚拟环境：
- en: '[PRE15]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This cuts the startup time from 30 seconds down to about 10 seconds.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这将将启动时间从30秒减少到约10秒。
- en: Enabling and using logging
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启用和使用日志记录
- en: 'Like many languages, Python has a logging framework that provides a way to
    capture information on what is happening inside a running application. This section
    describes how to use logging with Storm:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 像许多语言一样，Python有一个日志框架，提供了一种捕获运行应用程序内部发生的情况的方法。本节描述了如何在Storm中使用日志记录：
- en: 'In the same directory as that of the word count topology, create a new file,
    called `logconfig.ini`:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在与单词计数拓扑相同的目录中，创建一个名为`logconfig.ini`的新文件：
- en: '[PRE16]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Note
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: What you just saw is a simple log configuration for demonstration purposes.
    For more information about Python logging, consult the logging module documentation
    at [https://www.python.org/](https://www.python.org/).
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 您刚刚看到的是一个用于演示目的的简单日志配置。有关Python日志记录的更多信息，请参阅[https://www.python.org/](https://www.python.org/)上的日志模块文档。
- en: 'Update `wordcount.py` to log its input and output. The newly added lines are
    highlighted:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`wordcount.py`以记录其输入和输出。新增加的行已经标出：
- en: '[PRE17]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now launch the updated topology:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在启动更新后的拓扑：
- en: '[PRE18]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'As the topology runs, a log file for the word count component will be written
    to the current directory, capturing what''s happening. The filename varies from
    run to run, but it will be something like `petrel22011_wordcount.log`:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 当拓扑运行时，单词计数组件的日志文件将被写入当前目录，捕获正在发生的事情。文件名因运行而异，但类似于`petrel22011_wordcount.log`：
- en: '[PRE19]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Automatic logging of fatal errors
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动记录致命错误
- en: 'If a spout or bolt crashes due to a runtime error, you''ll need to know what
    happened in order to fix it. To help with this, Petrel automatically writes fatal
    runtime errors to the log:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个喷口或螺栓因运行时错误而崩溃，您需要知道发生了什么才能修复它。为了帮助解决这个问题，Petrel会自动将致命的运行时错误写入日志：
- en: 'Add a line at the beginning of the word count bolt''s `process()` function
    so that it crashes:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在单词计数螺栓的`process()`函数开头添加一行，使其崩溃：
- en: '[PRE20]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Run the topology again and examine the word count log file. It''ll contain
    a backtrace for the failure:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次运行拓扑，并检查单词计数日志文件。它将包含失败的回溯：
- en: '[PRE21]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Summary
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned how Petrel makes it possible to develop Storm topologies
    in pure Python. We created and ran a simple topology, and you learned how it works.
    You also learned how to use Petrel's `--venv self` option and Python logging to
    streamline your development and debugging process.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了Petrel如何使得在纯Python中开发Storm拓扑成为可能。我们创建并运行了一个简单的拓扑，您也学会了它是如何工作的。您还学会了如何使用Petrel的`--venv
    self`选项和Python日志记录来简化您的开发和调试过程。
- en: In the next chapter, we will see some more complex topologies, including a spout
    that reads from a real-world data source (Twitter), rather than randomly generated
    data.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到一些更复杂的拓扑结构，包括一个从真实数据源（Twitter）读取而不是随机生成数据的喷口。
