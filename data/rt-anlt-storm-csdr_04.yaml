- en: Chapter 4. Storm in a Clustered Mode
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。集群模式下的风暴
- en: We have now arrived at the next step in our journey with Storm, that is, to
    understand the clustered mode setup of Storm and its associated components. We
    will go through the various configurations in Storm and Zookeeper, and understand
    the concepts behind them.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经到达了我们与风暴的旅程的下一步，也就是理解风暴及其相关组件的集群模式设置。我们将浏览风暴和Zookeeper中的各种配置，并理解它们背后的概念。
- en: 'The topics that will be covered in this chapter are as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖的主题如下：
- en: Setting up the Storm cluster
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置风暴集群
- en: Understanding the configuration of the cluster and its impact on the functioning
    of the system
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解集群的配置及其对系统功能的影响
- en: The Storm UI and understanding the UI parameters
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 风暴UI和理解UI参数
- en: Provisioning and monitoring applications for production setups
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为生产设置提供和监视应用程序
- en: By the end of the chapter, you should be able to understand configurations of
    Storm and Zookeeper nodes. Also, you should be able to understand the Storm UI
    and set up Storm clusters and monitor them using various tools.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您应该能够理解风暴和Zookeeper节点的配置。此外，您应该能够理解风暴UI，并设置风暴集群，并使用各种工具监视它们。
- en: The Storm cluster setup
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 风暴集群设置
- en: Depicted in the following figure is the Storm and Zookeeper reference cluster
    that we set up in [Chapter 2](part0020_split_000.html#page "Chapter 2. Getting
    Started with Your First Topology"), *Getting Started with Your First Topology*.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](part0020_split_000.html#page "第2章。开始使用您的第一个拓扑")中，我们设置了风暴和Zookeeper参考集群，如下图所示，*开始使用您的第一个拓扑*。
- en: We have three-node Zookeeper clusters for a three-node Storm cluster (which
    has one Nimbus and two supervisors).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为一个三节点风暴集群（其中有一个Nimbus和两个监督者）设置了三节点Zookeeper集群。
- en: We are using the recommended three-node Zookeeper clusters to avoid a single
    point of failure in the Storm set up.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用推荐的三节点Zookeeper集群，以避免风暴设置中的单点故障。
- en: 'The Zookeeper cluster should have an odd number of nodes. The reason for this
    requirement is that the Zookeeper election logic requires the leader to have an
    odd number of votes, and that combination is possible only when odd nodes are
    in the quorum, as shown in the following figure:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Zookeeper集群应该有奇数个节点。这个要求的原因是Zookeeper选举逻辑要求领导者拥有奇数个选票，只有在奇数节点在法定人数中时才可能出现这种组合，如下图所示：
- en: '![The Storm cluster setup](img/00029.jpeg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![风暴集群设置](img/00029.jpeg)'
- en: Zookeeper configurations
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Zookeeper配置
- en: Let's assume you have installed Zookeeper on all three Zookeeper nodes; now
    we will walk you through the configurations so that you have a better understanding
    of them.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您已在所有三个Zookeeper节点上安装了Zookeeper；现在我们将带您浏览配置，以便更好地理解它们。
- en: 'An excerpt from `zoo.cfg`, in our case, is located at `<zookeeper_installation_dir>/
    zookeeper-3.4.5/conf/`. The Zookeeper configurations are as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，`zoo.cfg`的摘录位于`<zookeeper_installation_dir>/ zookeeper-3.4.5/conf/`。Zookeeper的配置如下：
- en: '`dataDir=/usr/local/zookeeper/tmp`: This is the path where Zookeeper stores
    its snapshots; these snapshots are actually the state log where the current cluster
    state is maintained for the purpose of coordination. In the event of a failure,
    these snapshots are used to restore the cluster to the last stable state. This
    directory also contains a file containing a single entry called `myID`. This value
    starts from `1` and is different for each Zookeeper node, so we will keep it as
    follows:'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dataDir=/usr/local/zookeeper/tmp`：这是Zookeeper存储其快照的路径；这些快照实际上是状态日志，用于维护当前集群状态以进行协调。在发生故障时，这些快照用于将集群恢复到最后稳定状态。这个目录还包含一个包含单个条目`myID`的文件。这个值从`1`开始，对于每个Zookeeper节点都是不同的，所以我们将保持如下：'
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Whenever you want to start from scratch, or when you upscale or downscale Storm
    or Zookeeper clusters, it is recommended that you clean up this `local.dir` file
    so that stale data is cleared.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 每当您想要从头开始，或者当您升级或降级风暴或Zookeeper集群时，建议您清理这个`local.dir`文件，以便清除陈旧的数据。
- en: '`clientPort=2182`: This configuration specifies the port on which the clients
    build connections with Zookeeper:'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clientPort=2182`：这个配置指定了客户端与Zookeeper建立连接的端口：'
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: These three rows in the preceding code actually specify the IP or the names
    of the servers that form a part of the Zookeeper cluster. In this configuration,
    we have created the three-node Zookeeper cluster.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，这三行实际上指定了组成Zookeeper集群一部分的服务器的IP或名称。在这个配置中，我们创建了一个三节点Zookeeper集群。
- en: '`maxClientCnxns=30l`: This number specifies the maximum number of connections
    a single client can make with this Zookeeper node. Here is how the calculation
    will go in our case:'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`maxClientCnxns=30l`：这个数字指定了单个客户端可以与这个Zookeeper节点建立的最大连接数。在我们的情况下，计算将如下进行：'
- en: The max number of connections one supervisor can make is 30 with one Zookeeper
    node. So, the maximum number of connections one supervisor can create with three
    Zookeeper nodes is 90 (that is, 30*3).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 一个监督者可以建立的最大连接数是30个，与一个Zookeeper节点。因此，一个监督者可以与三个Zookeeper节点创建的最大连接数是90（即30*3）。
- en: 'The following screenshot shows a capture from the Storm UI depicting the used,
    available, and free slots:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了从风暴UI中捕获的已使用、可用和空闲插槽：
- en: '![Zookeeper configurations](img/00030.jpeg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![Zookeeper配置](img/00030.jpeg)'
- en: Note
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The number of workers in the Storm cluster is related to the number of connections
    available in the Zookeeper cluster. If you don't have sufficient Zookeeper cluster
    connections, Storm supervisors will not be able to start.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 风暴集群中的工作人员数量与Zookeeper集群中可用的连接数量有关。如果Zookeeper集群连接不足，风暴监督者将无法启动。
- en: Cleaning up Zookeeper
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 清理Zookeeper
- en: 'We have seen how Zookeeper stores all its coordination data in the form of
    snapshots in the path specified in the `dataDir` configuration. This requires
    periodic clean up or archival to remove old snapshots so that we don''t end up
    consuming the entire disk space. Here is a small cleanup script that needs to
    be configured on all Zookeeper nodes:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到Zookeeper如何以快照的形式将其所有协调数据存储在`dataDir`配置中指定的路径中。这需要定期清理或归档以删除旧的快照，以免消耗整个磁盘空间。这是一个需要在所有Zookeeper节点上配置的小型清理脚本：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here we have the cleanup script as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有以下清理脚本：
- en: '`numBackUps`: Here we specify how many snapshots we want to retain after cleanup;
    the minimum is three and the maximum can vary as per requirements.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numBackUps`：在这里，我们指定了清理后要保留多少个快照；最少为三个，最多可以根据需求变化。'
- en: '`dataDir`: Here we specify the path of the data directory where snapshots need
    to be cleaned up.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dataDir`：在这里，我们指定了需要清理快照的数据目录的路径。'
- en: '`logDir`: This is the path where the clean up script will store its logs.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`logDir`：这是清理脚本将存储其日志的路径。'
- en: '`org.apache.zookeeper.server.PurgeTxnLog`: This is the utility class that purges
    all snapshots except the last three, as mentioned in `n``umBackups`.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.apache.zookeeper.server.PurgeTxnLog`：这是一个实用类，清除除了最后三个快照之外的所有快照，如`numBackups`中所述。'
- en: Storm configurations
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Storm配置
- en: 'We will look at the Storm daemons and configurations around the daemons. For
    the Nimbus node, we have the following configuration settings in `storm.yaml`.
    Let''s understand these configurations as given in the following code:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将查看Storm守护进程和守护进程周围的配置。对于Nimbus节点，在`storm.yaml`中有以下配置设置。让我们根据以下代码中给出的配置来理解这些配置：
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The functions of the configurations used in the preceding code are as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中使用的配置的功能如下：
- en: '`storm.zookeeper.servers`: Here we specify the names or IPs of the Zookeeper
    servers from the Zookeeper cluster; note that we are using the same host names
    as mentioned in the `zoo.cfg` configuration in the previous section.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`storm.zookeeper.servers`：在这里，我们指定了Zookeeper集群中Zookeeper服务器的名称或IP地址；请注意，我们在前一节的`zoo.cfg`配置中使用了与之前相同的主机名。'
- en: '`storm.zookeeper.port`: Here we specify the port on the Zookeeper node to which
    the Storm nodes connect. Again, we specified the same port that we had specified
    on `zoo.cfg` in the previous section.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`storm.zookeeper.port`：在这里，我们指定了Storm节点连接的Zookeeper节点上的端口。同样，我们在前一节中在`zoo.cfg`中指定了相同的端口。'
- en: '`storm.local.dir`: Storm has its own temporary data that is stored in a local
    directory. This data is automatically cleaned up, but whenever you want to start
    from scratch, or when you upscale or downscale the Storm or Zookeeper clusters,
    it is recommended that you clean up this `local.dir` configuration so that stale
    data is cleared.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`storm.local.dir`：Storm有自己的临时数据存储在本地目录中。这些数据会自动清理，但每当您想要从头开始，或者当您扩展或缩小Storm或Zookeeper集群时，建议您清理此`local.dir`配置，以清除陈旧数据。'
- en: '`nimbus.host`: This specifies the hostname or IP of the hostname that is being
    set as Nimbus.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nimbus.host`：这指定了要设置为Nimbus的主机名或IP地址。'
- en: '`topology.message.timeout.secs`: This value specifies the duration in seconds
    after which a tuple being processed by the topology is declared as timed out and
    discarded. Thereafter, depending upon whether it''s a reliable or unreliable topology,
    it''s replayed or not. This value should be set cautiously; if set too low, all
    messages will end up being timed out. If it is set too high, one may never get
    to know the performance bottlenecks in the topology.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`topology.message.timeout.secs`：此值指定拓扑处理的元组在经过一定秒数后被声明为超时并丢弃的持续时间。此后，根据拓扑是可靠还是不可靠，它会被重放或不会。应谨慎设置此值；如果设置得太低，所有消息最终都会超时。如果设置得太高，可能永远不会知道拓扑中的性能瓶颈。'
- en: '`topology.debug`: This parameter denotes whether you want to run the topology
    in the debug mode or node. The debug mode is when all the debug logs are printed,
    and it is recommended in the development and staging mode, but not in the production
    mode because I/O is very high in this mode and thus hits the overall performance.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`topology.debug`：此参数表示是否要在调试模式或节点中运行拓扑。调试模式是指打印所有调试日志，建议在开发和暂存模式下使用，但在生产模式下不建议使用，因为此模式下I/O非常高，从而影响整体性能。'
- en: '`supervisor.slots.ports`: This parameter specifies the ports for the supervisor
    workers. This number directly ties to the number of workers that can be spawned
    on the supervisor. When topologies are spawned, one has to specify the number
    of workers that are to be allocated, which in turn ties to actual resources allocated
    to the topology. The number of workers is really important because they actually
    identify how many topologies can run on the cluster and in turn how much parallelism
    can be achieved. For example, by default, we have four slots per supervisor, so
    in our cluster, we will have *Total number of slots/workers = 4*2 = 8*. Each worker
    takes a certain number of resources from the system in terms of CPU and RAM, so
    how many workers are spawned on the supervisor depends on the system configuration.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`supervisor.slots.ports`：此参数指定了主管工作进程的端口。这个数字直接关联到主管上可以生成的工作进程的数量。当拓扑被生成时，必须指定要分配的工作进程的数量，这又与分配给拓扑的实际资源相关联。工作进程的数量非常重要，因为它们实际上确定了集群上可以运行多少个拓扑，从而确定了可以实现多少并行性。例如，默认情况下，每个主管有四个插槽，所以在我们的集群中，我们将有*总插槽数/工作进程=
    4*2 = 8*。每个工作进程从系统中获取一定数量的CPU和RAM资源，因此在主管上生成多少个工作进程取决于系统配置。'
- en: Storm logging configurations
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Storm日志配置
- en: 'Now we will have a look at the logging configurations of Storm. They use the
    `logback` implementation of Log4J and its configurations can be found and tweaked
    from `cluster.xml` located at `<storm-installation-dir>/apache-storm-0.9.2-incubating/logback`
    using the following code:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将查看Storm的日志配置。它们使用Log4J的`logback`实现，其配置可以在`<storm-installation-dir>/apache-storm-0.9.2-incubating/logback`中的`cluster.xml`中找到并进行调整，使用以下代码：
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In the preceding snippet, a few sections are highlighted, which we will walk
    through for a closer look. They are as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的片段中，有几个部分被突出显示，我们将逐一进行更详细的讨论。它们如下：
- en: '`<file>`: This tag holds the log directory path and the filename on which the
    logs are generated by the Storm framework.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<file>`：这个标签保存了Storm框架生成的日志的日志目录路径和文件名。'
- en: '`<filenamepattern>`: This is the pattern in which files are formed and rolled
    over; for example, with the preceding code pattern, we have worker log files as
    `worker-6700.log` and `worker-6700.1.log`.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<filenamepattern>`：这是文件形成和滚动的模式；例如，使用前面的代码模式，我们有worker日志文件`worker-6700.log`和`worker-6700.1.log`。'
- en: '`<minIndex> and <maxIndex>`: These are very important in order to specify how
    many files we want to retain with this rolling appender; in this case, we will
    have nine backup files, which are numbered from one to nine, and one running log
    file.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<minIndex>和<maxIndex>`：这些非常重要，用于指定我们想要保留多少个文件在这个滚动appender中；在这种情况下，我们将有九个备份文件，编号从一到九，还有一个运行日志文件。'
- en: '`maxFileSize`: This parameter specifies at what size the file should rollover,
    for instance, in our case, it''s 100 MB; this means the worker log file will roll
    over to the next index when it reaches this size.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`maxFileSize`：这个参数指定文件应该在什么大小时滚动，例如，在我们的情况下，它是100MB；这意味着当工作日志文件达到这个大小时，它将滚动到下一个索引。'
- en: '`root level`: This specifies the logging level; in our case, we have specified
    it as *Info*, which means `Info` and the above logs will be printed in the log
    files, but logs from levels below the `Info` level will not be written to the
    logs. The following is the logging level hierarchy for reference:'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`根级别`：这指定了日志级别；在我们的情况下，我们已将其指定为*Info*，这意味着`Info`和以上的日志将被打印到日志文件中，但是低于`Info`级别的日志将不会被写入日志。以下是供参考的日志级别层次结构：'
- en: '`OFF`'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`关闭`'
- en: '`FATAL`'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`致命`'
- en: '`ERROR`'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`错误`'
- en: '`WARN`'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`警告`'
- en: '`INFO`'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`信息`'
- en: '`DEBUG`'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`调试`'
- en: '`TRACE`'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TRACE`'
- en: '`ALL`'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`全部`'
- en: The Storm UI
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Storm UI
- en: '[PRE5]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: cluster.submitTopology("word-count", conf,  builder.createTopology());
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: cluster.submitTopology("word-count", conf, builder.createTopology());
- en: '[PRE6]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: conf.setNumWorkers(3);
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: conf.setNumWorkers(3);
- en: '[PRE7]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: builder.setSpout("spout", new RandomSentenceSpout(), 5);
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: builder.setSpout("spout", new RandomSentenceSpout(), 5);
- en: '[PRE8]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: builder.setSpout("spout", new RandomSentenceSpout(),  5).setNumTasks(10);
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: builder.setSpout("spout", new RandomSentenceSpout(), 5).setNumTasks(10);
- en: '[PRE9]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Section 2
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第2部分
- en: 'This section holds the various actions that can be performed on the topology:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分包含了可以在拓扑上执行的各种操作：
- en: '**Activate**: The UI provides a facility to revive or reactivate a topology
    that has been suspended earlier. Once activated, it can again start consuming
    the messages from the spout and process them.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**激活**：UI提供了一个功能，可以重新激活之前被暂停的拓扑。一旦激活，它可以再次开始从spout消费消息并处理它们。'
- en: '**Deactivate**: When this action is executed, the topology immediately turns
    off the spout, that is, no new messages are read from the spout and pushed downstream
    to the DAG. Existing messages that are already being processed in various bolts
    are processed completely.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**停用**：当执行此操作时，拓扑立即关闭spout，也就是说，不会从spout读取新消息并将其推送到DAG下游。已经在各种bolt中处理的现有消息将被完全处理。'
- en: '**Rebalance**: This action is executed when the worker allocation to a live
    topology is altered.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重新平衡**：当对活动拓扑的worker分配发生变化时执行此操作。'
- en: '**Kill**: As the name suggests, this is used to send a termination signal for
    the topology to the Storm framework. It''s always advisable to provide a reasonable
    kill time so that the topology drains completely and is able to clean the pipelined
    events before it terminates.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**终止**：顾名思义，用于向Storm框架发送拓扑的终止信号。建议提供合理的终止时间，以便拓扑完全排空并能够在终止之前清理流水线事件。'
- en: Section 3
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第3部分
- en: 'This section displays a capture of the number of messages processed on the
    timeline. It has the following key sections:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分显示了时间轴上处理的消息数量的截图。它有以下关键部分：
- en: '**Window**: This field specifies the time duration in the following segments:
    last for 10 minutes, last 3 hours, the past day, or all the time. The topology''s
    progress is captured against these time sections.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**窗口**：这个字段指定了以下时间段的时间段：最近10分钟，最近3小时，过去一天，或者一直。拓扑的进展是根据这些时间段来捕获的。 '
- en: '**Emitted**: This captures the number of tuples emitted by the spout at various
    time segments.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**发射**：这捕获了spout在各个时间段发射的元组数量。'
- en: '**Transferred**: This specifies the number of tuples sent to other components
    in the topology. Please note that the number of emitted tuples may or may not
    be equal to the number of transferred tuples as the former is the exact number
    of times the emit method of the spout is executed, while the latter is the number
    transferred based on the grouping used; for example, if we have bound a spout
    to a bolt that has the parallelism of two tuples using all grouping, then for
    every `x` tuples emitted by the spout, `2x` tuples will be transferred.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**传输**：这指定了发送到拓扑中其他组件的元组数量。请注意，发射的元组数量可能与传输的元组数量相等，也可能不相等，因为前者是spout的emit方法执行的确切次数，而后者是基于使用的分组而传输的数量；例如，如果我们将一个spout绑定到一个具有两个元组并行度的bolt，使用all分组，那么对于spout发射的每个`x`个元组，将传输`2x`个元组。 '
- en: '**Complete latency**(**ms**): This is the average total time taken by a tuple
    to execute throughout the topology.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**完整延迟**（**ms**）：这是元组在整个拓扑中执行所花费的平均总时间。'
- en: '**Acked**: This holds the number of events acked that are successfully processed.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**已确认**：这个字段保存了成功处理的已确认事件的数量。'
- en: '**Failed**: This is the number of events that failed to process successfully.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**失败**：这是处理失败的事件数量。'
- en: Section 4
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第4部分
- en: 'This section is the same as *Section 3*, the only difference being that here,
    the terms are displayed at a component level, that is spouts and bolts, while
    in *Section 3*, it was at the topology level. There are a few more terms on the
    UI that you should be introduced to. They are as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分与*第3部分*相同，唯一的区别是这里的术语显示在组件级别，即spouts和bolts，而在*第3部分*中是在拓扑级别。UI上还有一些术语需要介绍给你。它们如下：
- en: '**Capacity**: This is one of the most important metrics to look at when fine-tuning
    the topology. It indicates the percentage of time the bolt spent in the last ten
    minutes to execute the tuple. Any value close to one or above is an indication
    to increase the parallelism of this bolt. It''s calculated using the following
    formula:'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容量**：这是微调拓扑时要查看的最重要的指标之一。它指示螺栓在最后十分钟内执行元组所花费的时间的百分比。任何接近或超过一的值都表明需要增加此螺栓的并行性。它使用以下公式计算：'
- en: '[PRE10]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**Execute latency**: This is the average time a tuple spends in the execute
    method of the bolt during processing.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**执行延迟**：这是元组在处理过程中在螺栓的执行方法中花费的平均时间。'
- en: '**Process** **latency**: Process latency is the average time it takes from
    when the tuple is received by the bolt to the time when it''s acked (acknowledged
    to denote successful processing).'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**处理延迟**：处理延迟是元组从螺栓接收到到被确认（表示成功处理）的平均时间。'
- en: The visualization section
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 可视化部分
- en: 'One of the improvements in Storm 0.9.2 is visual depiction of the topology.
    The following figure is the depiction of a sample topology in the Storm UI:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: Storm 0.9.2中的一个改进是拓扑的可视化描述。以下图是Storm UI中样本拓扑的描述：
- en: '![The visualization section](img/00033.jpeg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![可视化部分](img/00033.jpeg)'
- en: In the preceding screenshot, you can see all the streams visually labeled by
    various bolts and spouts on the topology along with latency and other key attributes.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，您可以看到拓扑上由各种螺栓和喷口可视标记的所有流，以及延迟和其他关键属性。
- en: 'The Storm UI provides a very rich interface where the user can start from a
    very high level and drill down deeper in specific areas, as you can see in the
    screenshot in *The Storm cluster setup* section where we discussed the Storm cluster
    level attributes; in the second level, we moved to a specific topology. Next,
    within a topology, you can click on any bolt or worker and the component level
    details will be presented to you. One item as highlighted in the following screenshot
    is of high importance for debugging and log deciphering in cluster setup—the worker
    ID. If some component spout or bolt is giving us issues and we want to understand
    the working, the first place to look is the logs. To be able to look at logs,
    one needs to know where the troublesome bolt is executing which supervisor and
    which worker; this can be inferred by drilling on that component and looking into
    the executor section as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Storm UI提供了一个非常丰富的界面，用户可以从非常高的级别开始，并深入到特定领域，就像在*Storm集群设置*部分的截图中所看到的那样，我们讨论了Storm集群级属性；在第二级中，我们移动到特定的拓扑。接下来，在拓扑内，您可以单击任何螺栓或工作程序，组件级别的详细信息将呈现给您。在集群设置中，以下截图中突出显示的一个项目对于调试和日志解密非常重要——工作程序ID。如果某个组件的喷口或螺栓给我们带来问题，并且我们想要了解其工作原理，首先要查看的地方是日志。要能够查看日志，需要知道有问题的螺栓在哪个监督者上执行以及哪个工作程序；这可以通过钻取该组件并查看执行器部分来推断：
- en: '![The visualization section](img/00034.jpeg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![可视化部分](img/00034.jpeg)'
- en: The Storm UI capturing the supervisor port
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Storm UI捕获监督者端口
- en: Here, the host tells you which supervisor this component is running on and the
    port tells you about the worker, so if I want to look for logs of this component,
    I will look into `logdir` for `sup-flm-dev-1.mydomain.net` in the log directory
    under `worker-6711.log`.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，主机告诉您此组件正在哪个监督者上运行，端口告诉您有关工作程序，因此，如果我想查找此组件的日志，我将在`logdir`中查找`sup-flm-dev-1.mydomain.net`下的`worker-6711.log`日志目录。
- en: Storm monitoring tools
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Storm监控工具
- en: 'The clustered setup of the likes of Storm need constant monitoring, because
    they are generally developed to support real-time systems wherein downtime could
    be of concern for **Service Level Agreement** (**SLA**). A lot of tools are available
    on the market that could be used to monitor the Storm cluster and to raise an
    alert. Some of the Storm monitoring tools are as follows:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 像Storm这样的集群设置需要不断监控，因为它们通常是为支持实时系统而开发的，其中停机可能会对**服务级别协议**（**SLA**）构成问题。市场上有很多工具可用于监控Storm集群并发出警报。一些Storm监控工具如下：
- en: '**Nagios**: This is a very powerful monitoring system that can be extended
    to generate e-mail alerts. It can monitor various processes and system KPIs and
    can be tweaked by writing custom scripts and plugins to restart certain components
    in the event of a failure.![Storm monitoring tools](img/00035.jpeg)'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Nagios**：这是一个非常强大的监控系统，可以扩展以生成电子邮件警报。它可以监控各种进程和系统KPI，并可以通过编写自定义脚本和插件来在发生故障时重新启动某些组件。![Storm监控工具](img/00035.jpeg)'
- en: Nagios service console
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Nagios服务控制台
- en: In the preceding screenshot of a Storm cluster with Nagios monitoring, you can
    see various processes and other system level KPIs that can be monitored such as
    CPU, memory, latency, HDD usage, and so on.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的Storm集群与Nagios监控的截图中，您可以看到各种可以监控的进程和其他系统级KPI，如CPU、内存、延迟、硬盘使用率等。
- en: '**Ganglia**: This is another widely used open source tool that lets you set
    up a monitoring framework for Storm clusters.![Storm monitoring tools](img/00036.jpeg)'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Ganglia**：这是另一个广泛使用的开源工具，可以为Storm集群设置监控框架。![Storm监控工具](img/00036.jpeg)'
- en: As seen in the preceding screenshot, we have a lot of drill-down options; we
    can see load and CPU level details as well as other system and cluster level KPIs
    to capture and plot out the cluster health.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的截图所示，我们有很多钻取选项；我们可以看到负载和CPU级别的详细信息，以及其他系统和集群级KPI来捕获和绘制集群的健康状态。
- en: '**SupervisorD**: This is another open source monitoring system that is widely
    used in conjunction with Storm to capture and retain the health of the cluster.
    SupervisorD also helps in provisioning and starting the Storm services and it
    can be configured to restart them in case of any failures.![Storm monitoring tools](img/00037.jpeg)'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SupervisorD**：这是另一个广泛使用的开源监控系统，通常与Storm一起使用以捕获和保持集群的健康状态。SupervisorD还有助于配置和启动Storm服务，并且可以在发生故障时配置以重新启动它们。![Storm监控工具](img/00037.jpeg)'
- en: '**Ankush**: This is another provisioning and monitoring system that could be
    used for Storm and other big data cluster setup and management. It has both paid
    and open source versions ([https://github.com/impetus-opensource/ankush](https://github.com/impetus-opensource/ankush)).
    It has the following salient features:'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Ankush**：这是另一个可以用于Storm和其他大数据集群设置和管理的供应和监控系统。它有付费和开源版本（[https://github.com/impetus-opensource/ankush](https://github.com/impetus-opensource/ankush)）。它具有以下显著特点：'
- en: '| **Provisioning** | **Environment supported by this application****Physical
    nodes****Virtual nodes on Cloud (AWS or On-Premise)** |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| **供应** | **此应用程序支持的环境****物理节点****云上的虚拟节点（AWS或本地）** |'
- en: '| Single technology clusters |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| 单一技术集群 |'
- en: '| Multi-technology clusters |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| 多技术集群 |'
- en: '| Template-based cluster creation |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| 基于模板的集群创建 |'
- en: '| Redeploy an erred cluster |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| 重新部署出错的集群 |'
- en: '| Rack support |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| 机架支持 |'
- en: '| Enhanced node validation before deployment |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| 在部署前增强节点验证 |'
- en: '| **Monitoring** | Heat maps |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| **监控** | 热图 |'
- en: '| Service monitoring |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| 服务监控 |'
- en: '| Technology-based monitoring |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| 基于技术的监控 |'
- en: '| Rich graphs |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| 丰富的图表 |'
- en: '| Alerts and notifications for key events |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| 关键事件的警报和通知 |'
- en: '| Centralized log view |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| 集中式日志视图 |'
- en: '| Audit trail |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| 审计追踪 |'
- en: '| Alerts on dashboard and e-mails |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| 仪表板和电子邮件上的警报 |'
- en: The following screenshot is a dashboard screenshot of Ankush. All the system
    level KPIs such as CPU, load, network, memory, and so on are very well captured.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图是Ankush的仪表板截图。所有系统级KPI（如CPU、负载、网络、内存等）都被很好地捕获。
- en: '![Storm monitoring tools](img/00038.jpeg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![Storm监控工具](img/00038.jpeg)'
- en: Quiz time
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测验时间
- en: 'Q.1\. State whether the following statements are true or false:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: Q.1\. 判断以下陈述是真还是假：
- en: The Storm configurations are stored in `cluster.xml`.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Storm配置存储在`cluster.xml`中。
- en: We can have only four workers allocated per supervisor.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个监督者只能分配四个工作节点。
- en: The Zookeeper cluster always has an odd number of nodes.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Zookeeper集群始终有奇数个节点。
- en: Zookeeper needs a minimum of three snapshots to recover its state from failure.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Zookeeper需要至少三个快照才能从故障中恢复其状态。
- en: A topology can continue to execute if Nimbus and the supervisor dies.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果Nimbus和监督者死亡，拓扑可以继续执行。
- en: 'Q.2\. Fill in the blanks:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: Q.2\. 填空：
- en: _______________ is the average time a tuple takes to get processed and acked.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: _______________是元组被处理和确认所花费的平均时间。
- en: _______________ is the average time a tuple spends in the execute method.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: _______________是元组在执行方法中花费的平均时间。
- en: The ____________ component is responsible for the recovery of the Storm cluster
    in the event of a failure.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在故障发生时，__________组件负责恢复Storm集群。
- en: 'Q.3\. Execute the `WordCount` topology on a three-node Storm cluster (one Nimbus
    and two supervisors) and then perform the following tasks:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: Q.3\. 在一个三节点的Storm集群（一个Nimbus和两个监督者）上执行`WordCount`拓扑，然后执行以下任务：
- en: Kill the Nimbus node while the topology is running—observe that the topology
    will not fail; it will continue unaffected.
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在拓扑运行时终止Nimbus节点—观察拓扑不会失败，它将继续不受影响。
- en: Kill the supervisor while the topology is running—observe that the topology
    does not fail, it will continue unaffected. The workers will continue to execute
    with Zookeeper co-ordination.
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在拓扑运行时终止监督者—观察拓扑不会失败，它将继续不受影响。工作节点将继续执行，并与Zookeeper协调。
- en: Try various operations such as rebalance and deactivate from the Storm UI.
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试从Storm UI进行重新平衡和停用等各种操作。
- en: Summary
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you got a detailed understanding of the Storm and Zookeeper
    configurations. We explored and walked you through the Storm UI and its attributes.
    Having done the cluster setup, we briefly touched upon various monitoring tools
    available for operational production support in Storm.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您详细了解了Storm和Zookeeper的配置。我们探索并向您介绍了Storm UI及其属性。完成了集群设置后，我们简要介绍了Storm中可用于运营生产支持的各种监控工具。
- en: In the next chapter, we will get you introduced to RabbitMQ and its integration
    with Storm.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍RabbitMQ及其与Storm的集成。
