- en: Chapter 12. Deterministic Dynamical Systems
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第12章：确定性动力学系统
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: Plotting the bifurcation diagram of a chaotic dynamical system
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绘制混沌动力学系统的分叉图
- en: Simulating an elementary cellular automaton
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模拟一个初级细胞自动机
- en: Simulating an ordinary differential equation with SciPy
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用SciPy模拟常微分方程
- en: Simulating a partial differential equation – reaction-diffusion systems and
    Turing patterns
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模拟偏微分方程——反应扩散系统与图灵模式
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: 'The previous chapters dealt with classical approaches in data science: statistics,
    machine learning, and signal processing. In this chapter and the next chapter,
    we will cover a different type of approach. Instead of analyzing data directly,
    we will simulate mathematical models that represent how our data was generated.
    A representative model gives us an explanation of the real-world processes underlying
    our data.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 前几章讨论了数据科学中的经典方法：统计学、机器学习和信号处理。在本章和下一章中，我们将介绍另一种方法。我们不会直接分析数据，而是模拟代表数据生成方式的数学模型。一个具有代表性的模型能为我们提供数据背后现实世界过程的解释。
- en: Specifically, we will cover a few examples of dynamical systems. These mathematical
    equations describe the evolution of quantities over time and space. They can represent
    a wide variety of real-world phenomena in physics, chemistry, biology, economics,
    social sciences, computer science, engineering, and other disciplines.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 具体而言，我们将介绍几个动力学系统的例子。这些数学方程描述了量随时间和空间的演变。它们可以表示物理、化学、生物学、经济学、社会科学、计算机科学、工程学等学科中各种现实世界的现象。
- en: In this chapter, we will consider deterministic dynamical systems. This term
    is used in contrast to stochastic systems, which incorporate randomness in their
    rules. We will cover stochastic systems in the next chapter.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论确定性动力学系统。该术语与随机系统相对，后者的规则中包含了随机性。我们将在下一章讨论随机系统。
- en: Types of dynamical systems
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动力学系统的类型
- en: 'The types of deterministic dynamical systems we will consider here are:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在这里讨论的确定性动力学系统类型包括：
- en: '**Discrete-time dynamical systems** (iterated functions)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**离散时间动力学系统**（迭代函数）'
- en: '**Cellular automata**'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**细胞自动机**'
- en: '**Ordinary Differential Equations** (**ODEs**)'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**常微分方程**（**ODEs**）'
- en: '**Partial Differential Equations** (**PDEs**)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**偏微分方程**（**PDEs**）'
- en: In these models, the quantities of interest depend on one or several **independent
    variables**. Often, these variables include time and/or space. The independent
    variables can be discrete or continuous, resulting in different types of models
    and different analysis and simulation techniques.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些模型中，感兴趣的量依赖于一个或多个**独立变量**。这些变量通常包括时间和/或空间。独立变量可以是离散的或连续的，从而导致不同类型的模型和不同的分析与仿真技术。
- en: 'A **discrete-time dynamical system** is described by the iterative application
    of a function on an initial point: *f(x)*, *f(f(x))*, *f(f(f(x)))*, and so on.
    This type of system can lead to complex and **chaotic** behaviors.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**离散时间动力学系统**是通过在初始点上迭代应用一个函数来描述的：*f(x)*, *f(f(x))*, *f(f(f(x)))*，以此类推。这种类型的系统可能会导致复杂且**混沌**的行为。'
- en: A **cellular automaton** is represented by a discrete grid of cells that can
    be in a finite number of states. Rules describe how the state of a cell evolves
    according to the states of the neighboring cells. These simple models can lead
    to highly sophisticated behaviors.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**细胞自动机**由一个离散的单元格网格表示，每个单元格可以处于有限个状态之一。规则描述了单元格状态如何根据相邻单元格的状态演化。这些简单的模型可以导致极其复杂的行为。'
- en: An **ODE** describes the dependence of a continuous function on its derivative
    with respect to the independent variable. In differential equations, the unknown
    variable is a *function* instead of a *number*. ODEs notably arise when the rate
    of change of a quantity depends on the current value of this quantity. For example,
    in classical mechanics, the laws of motion (including movement of planets and
    satellites) can be described by ODEs.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 一个**常微分方程**描述了一个连续函数如何依赖于其相对于独立变量的导数。在微分方程中，未知变量是一个*函数*而不是*数字*。常微分方程特别出现在量的变化率依赖于该量的当前值的情况。例如，在经典力学中，运动定律（包括行星和卫星的运动）可以通过常微分方程来描述。
- en: '**PDEs** are similar to ODEs, but they involve several independent variables
    (for example, time and space). These equations contain **partial derivatives**
    of the function with respect to the different independent variables. For example,
    PDEs describe the propagation of waves (acoustic, electromagnetic, or mechanical
    waves) and fluids (**fluid dynamics**). They are also important in quantum mechanics.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**PDEs** 与 ODEs 相似，但它们涉及多个独立变量（例如时间和空间）。这些方程包含关于不同独立变量的**偏导数**。例如，PDEs 描述波的传播（声波、电磁波或机械波）和流体（**流体力学**）。它们在量子力学中也很重要。'
- en: Differential equations
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 微分方程
- en: ODEs and PDEs can be one-dimensional or multidimensional, depending on the dimensionality
    of the target space. Systems of multiple differential equations can be seen as
    multidimensional equations.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: ODE 和 PDE 可以是单维或多维的，取决于目标空间的维度。多个微分方程的系统可以看作是多维方程。
- en: The **order** of an ODE or a PDE refers to the maximal derivative order in the
    equation. For example, a first-order equation only involves simple derivatives,
    a second-order equation also involves second-order derivatives (the derivatives
    of the derivatives), and so on.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: ODE 或 PDE 的**阶数**指的是方程中最大导数的阶数。例如，一阶方程仅涉及简单的导数，二阶方程则涉及二阶导数（导数的导数），以此类推。
- en: 'Ordinary or partial differential equations come with additional rules: **initial**
    **and** **boundary conditions**. These formulas describe the behavior of the sought
    functions on the spatial and temporal domain boundaries. For example, in classical
    mechanics, boundary conditions include the initial position and initial speed
    of a physical body subject to forces.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 常微分方程或偏微分方程有额外的规则：**初始** **和** **边界条件**。这些公式描述了所求函数在空间和时间域边界上的行为。例如，在经典力学中，边界条件包括物体在力作用下的初始位置和初速度。
- en: Dynamical systems are often classified between **linear** and **nonlinear**
    systems, depending on whether the rules are linear or not (with respect to the
    unknown function). Nonlinear equations are typically much harder to study mathematically
    and numerically than linear equations. They can lead to extremely complex behaviors.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 动态系统通常根据规则是否线性，分为**线性**和**非线性**系统（相对于未知函数）。非线性方程通常比线性方程在数学和数值上更加难以研究。它们可能会导致极其复杂的行为。
- en: For example, the **Navier–Stokes equations**, a set of nonlinear PDEs that describe
    the motion of fluid substances, can lead to **turbulence**, a highly chaotic behavior
    seen in many fluid flows. Despite their high importance in meteorology, medicine,
    and engineering, fundamental properties of the Navier-Stokes equations remain
    unknown at this time. For example, the existence and smoothness problem in three
    dimensions is one of the seven Clay Mathematics Institute's Millennium Prize Problems.
    One million dollars is offered to anyone who comes up with a solution.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，**Navier–Stokes 方程**，一组描述流体物质运动的非线性 PDEs，可能会导致**湍流**，这是一种在许多流体流动中出现的高度混乱的行为。尽管在气象学、医学和工程学中具有重要意义，但
    Navier-Stokes 方程的基本性质目前仍未为人所知。例如，三维中的存在性和平滑性问题是七个克雷数学研究所千年奖问题之一。对于任何能够提出解决方案的人，奖励为一百万美元。
- en: References
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考文献
- en: 'Here are a few references:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些参考文献：
- en: Overview of dynamical systems on Wikipedia, available at [http://en.wikipedia.org/wiki/Dynamical_system](http://en.wikipedia.org/wiki/Dynamical_system)
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维基百科上的动态系统概述，链接：[http://en.wikipedia.org/wiki/Dynamical_system](http://en.wikipedia.org/wiki/Dynamical_system)
- en: Mathematical definition of dynamical systems available at [http://en.wikipedia.org/wiki/Dynamical_system_%28definition%29](http://en.wikipedia.org/wiki/Dynamical_system_%28definition%29)
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态系统的数学定义，链接：[http://en.wikipedia.org/wiki/Dynamical_system_%28definition%29](http://en.wikipedia.org/wiki/Dynamical_system_%28definition%29)
- en: List of dynamical systems topics available at [http://en.wikipedia.org/wiki/List_of_dynamical_systems_and_differential_equations_topics](http://en.wikipedia.org/wiki/List_of_dynamical_systems_and_differential_equations_topics)
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态系统主题列表，链接：[http://en.wikipedia.org/wiki/List_of_dynamical_systems_and_differential_equations_topics](http://en.wikipedia.org/wiki/List_of_dynamical_systems_and_differential_equations_topics)
- en: Navier-Stokes equations on Wikipedia, available at [http://en.wikipedia.org/wiki/Navier%E2%80%93Stokes_equations](http://en.wikipedia.org/wiki/Navier%E2%80%93Stokes_equations)
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维基百科上的 Navier-Stokes 方程，链接：[http://en.wikipedia.org/wiki/Navier%E2%80%93Stokes_equations](http://en.wikipedia.org/wiki/Navier%E2%80%93Stokes_equations)
- en: A course on Computational Fluid Dynamics by Prof. Lorena Barba, written in the
    IPython notebook, available at [https://github.com/barbagroup/CFDPython](https://github.com/barbagroup/CFDPython)
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Prof. Lorena Barba 的《计算流体动力学》课程，使用 IPython 笔记本编写，课程内容可以在 [https://github.com/barbagroup/CFDPython](https://github.com/barbagroup/CFDPython)
    获取
- en: Plotting the bifurcation diagram of a chaotic dynamical system
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绘制混沌动力系统的分叉图
- en: A **chaotic** dynamical system is highly sensitive to initial conditions; small
    perturbations at any given time yield completely different trajectories. The trajectories
    of a chaotic system tend to have complex and unpredictable behaviors.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**混沌**动力系统对初始条件非常敏感；在任何给定时刻的微小扰动都会产生完全不同的轨迹。混沌系统的轨迹通常具有复杂且不可预测的行为。'
- en: Many real-world phenomena are chaotic, particularly those that involve nonlinear
    interactions among many agents (complex systems). Famous examples can be found
    in meteorology, economics, biology, and other disciplines.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 许多现实世界的现象是混沌的，特别是那些涉及多个主体之间非线性相互作用的现象（复杂系统）。气象学、经济学、生物学和其他学科中都有著名的例子。
- en: 'In this recipe, we will simulate a famous chaotic system: the **logistic map**.
    This is an archetypal example of how chaos can arise from a very simple nonlinear
    equation. The logistic map models the evolution of a population, taking into account
    both reproduction and density-dependent mortality (starvation).'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将模拟一个著名的混沌系统：**逻辑映射**。这是一个经典的例子，展示了如何从一个非常简单的非线性方程中产生混沌。逻辑映射模型描述了一个种群的演化，考虑到繁殖和密度依赖性死亡（饥饿）。
- en: We will draw the system's **bifurcation diagram**, which shows the possible
    long-term behaviors (equilibria, fixed points, periodic orbits, and chaotic trajectories)
    as a function of the system's parameter. We will also compute an approximation
    of the system's **Lyapunov exponent**, characterizing the model's sensitivity
    to initial conditions.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将绘制系统的**分叉图**，它展示了作为系统参数函数的可能长期行为（平衡点、固定点、周期轨道和混沌轨迹）。我们还将计算系统的**李雅普诺夫指数**的近似值，以表征模型对初始条件的敏感性。
- en: How to do it...
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'Let''s import NumPy and matplotlib:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们导入 NumPy 和 matplotlib：
- en: '[PRE0]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We define the logistic function by:![How to do it...](img/4818OS_12_01.jpg)
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们通过以下方式定义逻辑函数：![如何实现...](img/4818OS_12_01.jpg)
- en: 'Our discrete dynamical system is defined by the recursive application of the
    logistic function:'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们的离散动力系统由逻辑函数的递归应用定义：
- en: '![How to do it...](img/4818OS_12_02.jpg)'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何实现...](img/4818OS_12_02.jpg)'
- en: 'Here is the implementation of this function in Python:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是该函数在 Python 中的实现：
- en: '[PRE1]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We simulate this system for 10000 values of *r* linearly spaced between `2.5`
    and `4`, and vectorize the simulation with NumPy by considering a vector of independent
    systems (one dynamical system per parameter value):'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们为 10000 个 *r* 值进行模拟，这些值在线性间隔的 `2.5` 和 `4` 之间，并通过 NumPy 向量化模拟，考虑到一个独立系统的向量（每个参数值对应一个动力系统）：
- en: '[PRE2]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Let''s simulate 1000 iterations of the logistic map and keep the last 100 iterations
    to display the bifurcation diagram:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们模拟 1000 次逻辑映射的迭代，并保留最后 100 次迭代，以显示分叉图：
- en: '[PRE3]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We initialize our system with the same initial condition *x[0] = 0.00001*:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用相同的初始条件 *x[0] = 0.00001* 初始化我们的系统：
- en: '[PRE4]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We also compute an approximation of the Lyapunov exponent for every value of
    *r*. The Lyapunov exponent is defined by:![How to do it...](img/4818OS_12_03.jpg)
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还计算了每个 *r* 值的李雅普诺夫指数近似值。李雅普诺夫指数的定义是：![如何实现...](img/4818OS_12_03.jpg)
- en: 'We first initialize the `lyapunov` vector:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先初始化 `lyapunov` 向量：
- en: '[PRE5]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, we simulate the system and plot the bifurcation diagram. The simulation
    only involves the iterative evaluation of the `logistic()` function on our vector
    `x`. Then, to display the bifurcation diagram, we draw one pixel per point *x[n]^((r))*
    during the last 100 iterations:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们模拟系统并绘制分叉图。该模拟仅涉及在我们的向量 `x` 上迭代评估 `logistic()` 函数。然后，为了显示分叉图，我们在最后 100
    次迭代期间每个点 *x[n]^((r))* 绘制一个像素：
- en: '[PRE6]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![How to do it...](img/4818OS_12_04.jpg)'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何实现...](img/4818OS_12_04.jpg)'
- en: The bifurcation diagram and Lyapunov exponent of the logistic map
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 逻辑映射的分叉图和李雅普诺夫指数
- en: The bifurcation diagram brings out the existence of a fixed point for *r<3*,
    then two and four equilibria, and a chaotic behavior when r belongs to certain
    areas of the parameter space.
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 分叉图揭示了在 *r<3* 时存在一个固定点，然后是两个和四个平衡点，当 r 属于参数空间的某些区域时，出现混沌行为。
- en: 'We observe an important property of the Lyapunov exponent: it is positive when
    the system is chaotic (in red here).'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们观察到李雅普诺夫指数的一个重要特性：当系统处于混沌状态时，它是正值（此处为红色）。
- en: There's more...
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'Here are some references:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些参考资料：
- en: Chaos theory on Wikipedia, available at [http://en.wikipedia.org/wiki/Chaos_theory](http://en.wikipedia.org/wiki/Chaos_theory)
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维基百科上的混沌理论，可以通过[http://en.wikipedia.org/wiki/Chaos_theory](http://en.wikipedia.org/wiki/Chaos_theory)查看。
- en: Complex systems on Wikipedia, available at [http://en.wikipedia.org/wiki/Complex_system](http://en.wikipedia.org/wiki/Complex_system)
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维基百科上的复杂系统，可以通过[http://en.wikipedia.org/wiki/Complex_system](http://en.wikipedia.org/wiki/Complex_system)查看。
- en: The logistic map on Wikipedia, available at [https://en.wikipedia.org/wiki/Logistic_map](https://en.wikipedia.org/wiki/Logistic_map)
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维基百科上的逻辑映射，可以通过[https://en.wikipedia.org/wiki/Logistic_map](https://en.wikipedia.org/wiki/Logistic_map)查看。
- en: Iterated functions (discrete dynamical systems) on Wikipedia, available at [http://en.wikipedia.org/wiki/Iterated_function](http://en.wikipedia.org/wiki/Iterated_function)
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维基百科上的迭代函数（离散动力学系统），可以通过[http://en.wikipedia.org/wiki/Iterated_function](http://en.wikipedia.org/wiki/Iterated_function)查看。
- en: Bifurcation diagrams on Wikipedia, available at [http://en.wikipedia.org/wiki/Bifurcation_diagram](http://en.wikipedia.org/wiki/Bifurcation_diagram)
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维基百科上的分叉图，可以通过[http://en.wikipedia.org/wiki/Bifurcation_diagram](http://en.wikipedia.org/wiki/Bifurcation_diagram)查看。
- en: Lyapunov exponent on Wikipedia, available at [http://en.wikipedia.org/wiki/Lyapunov_exponent](http://en.wikipedia.org/wiki/Lyapunov_exponent)
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维基百科上的李雅普诺夫指数，可以通过[http://en.wikipedia.org/wiki/Lyapunov_exponent](http://en.wikipedia.org/wiki/Lyapunov_exponent)查看。
- en: See also
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The *Simulating an ordinary differential equation with SciPy* recipe
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用SciPy模拟常微分方程*示例'
- en: Simulating an elementary cellular automaton
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模拟基础细胞自动机
- en: Cellular automata are discrete dynamical systems evolving on a grid of cells.
    These cells can be in a finite number of states (for example, on/off). The evolution
    of a cellular automaton is governed by a set of rules, describing how the state
    of a cell changes according to the state of its neighbors.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**细胞自动机**是离散的动力学系统，在一个单元格网格上演化。这些单元格可以处于有限的状态（例如，开/关）。细胞自动机的演化遵循一组规则，描述了每个单元格的状态如何根据其邻居的状态发生变化。'
- en: Although extremely simple, these models can initiate highly complex and chaotic
    behaviors. Cellular automata can model real-world phenomena such as car traffic,
    chemical reactions, propagation of fire in a forest, epidemic propagations, and
    much more. Cellular automata are also found in nature. For example, the patterns
    of some seashells are generated by natural cellular automata.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这些模型非常简单，但它们可以引发高度复杂和混乱的行为。细胞自动机可以模拟现实世界中的现象，例如汽车交通、化学反应、森林中的火灾传播、流行病传播等。细胞自动机也存在于自然界中。例如，一些海洋贝壳的图案就是由自然细胞自动机生成的。
- en: An **elementary cellular automaton** is a binary, one-dimensional automaton,
    where the rules concern the immediate left and right neighbors of every cell.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**基础细胞自动机**是一种二进制的一维自动机，其中规则涉及每个单元格的直接左右邻居。'
- en: In this recipe, we will simulate elementary cellular automata with NumPy using
    their Wolfram code.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个实例中，我们将使用NumPy模拟基础细胞自动机，并使用它们的沃尔夫拉姆代码。
- en: How to do it...
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'We import NumPy and matplotlib:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们导入NumPy和matplotlib：
- en: '[PRE7]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We will use the following vector to obtain numbers written in binary representation:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用以下向量来获得二进制表示的数字：
- en: '[PRE8]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Let''s write a function that performs an iteration on the grid, updating all
    cells at once according to the given rule in binary representation (we will give
    all explanations in the *How it works...* section). The first step consists of
    stacking circularly-shifted versions of the grid to get the LCR (left, center,
    right) triplets of each cell (`y`). Then, we convert these triplets into 3-bit
    numbers (`z`). Finally, we compute the next state of every cell using the specified
    rule:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们编写一个函数，执行网格上的迭代，根据给定的规则一次性更新所有单元格，规则以二进制表示（我们将在*它是如何工作的...*部分进行详细解释）。第一步是通过堆叠循环移位版本的网格，得到每个单元格的LCR（左，中，右）三元组(`y`)。然后，我们将这些三元组转换为3位二进制数（`z`）。最后，我们使用指定的规则计算每个单元格的下一个状态：
- en: '[PRE9]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We now write a function that simulates any elementary cellular automaton. First,
    we compute the binary representation of the rule (**Wolfram Code**). Then, we
    initialize the first row of the grid with random values. Finally, we apply the
    function `step()` iteratively on the grid:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们编写一个函数来模拟任何基础细胞自动机。首先，我们计算规则的二进制表示（**沃尔夫拉姆代码**）。然后，我们用随机值初始化网格的第一行。最后，我们在网格上迭代应用函数`step()`：
- en: '[PRE10]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, we simulate and display nine different automata:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们模拟并显示九种不同的自动机：
- en: '[PRE11]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![How to do it...](img/4818OS_12_05.jpg)'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/4818OS_12_05.jpg)'
- en: How it works...
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Let's consider an elementary cellular automaton in one dimension. Every cell
    *C* has two neighbors (*L* and *R*), and it can be either off (0) or on (1). Therefore,
    the future state of a cell depends on the current state of *L*, *C*, and *R*.
    This triplet can be encoded as a number between 0 and 7 (three digits in binary
    representation).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个一维的初等细胞自动机。每个细胞*C*有两个邻居（*L*和*R*），并且它可以是关闭的（0）或开启的（1）。因此，一个细胞的未来状态依赖于其邻居L、C和R的当前状态。这个三元组可以编码为一个0到7之间的数字（二进制表示为三位数）。
- en: A particular elementary cellular automaton is entirely determined by the outcome
    of each of these eight configurations. Therefore, there are 256 different elementary
    cellular automata (*2⁸*). Each of these automata is identified by a number between
    0 and 255.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 一个特定的初等细胞自动机完全由这些八种配置的结果决定。因此，存在256种不同的初等细胞自动机（*2⁸*）。每一个这样的自动机由一个介于0和255之间的数字表示。
- en: 'We consider all eight LCR states in order: 111, 110, 101, ..., 001, 000\. Each
    of the eight digits in the binary representation of the automaton''s number corresponds
    to a LCR state (using the same order). For example, in the **Rule 110 automaton**
    (`01101110` in binary representation), the state 111 yields a new state of 0 for
    the center cell, 110 yields 1, 101 yields 1, and so on. It has been shown that
    this particular automaton is **Turing complete** (or **universal**); it can theoretically
    simulate any computer program.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们按顺序考虑所有八种LCR状态：111、110、101、...、001、000。自动机数字的二进制表示中的每一位对应一个LCR状态（使用相同的顺序）。例如，在**规则110自动机**（其二进制表示为`01101110`）中，状态111会产生中心细胞的0，状态110产生1，状态101产生1，依此类推。已有研究表明，这种特定的自动机是**图灵完备的**（或称**通用的**）；理论上，它能够模拟任何计算机程序。
- en: There's more...
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容...
- en: Other types of cellular automata include **Conway's Game of Life**, in two dimensions.
    This famous system yields various dynamic patterns. It is also Turing complete.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 其他类型的细胞自动机包括**康威的生命游戏**，这是一个二维系统。这个著名的系统可以产生各种动态模式。它也是图灵完备的。
- en: 'Here are a few references:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些参考资料：
- en: Cellular automata on Wikipedia, available at [http://en.wikipedia.org/wiki/Cellular_automaton](http://en.wikipedia.org/wiki/Cellular_automaton)
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维基百科上的细胞自动机，可通过[http://en.wikipedia.org/wiki/Cellular_automaton](http://en.wikipedia.org/wiki/Cellular_automaton)访问
- en: Elementary cellular automata on Wikipedia, available at [http://en.wikipedia.org/wiki/Elementary_cellular_automaton](http://en.wikipedia.org/wiki/Elementary_cellular_automaton)
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维基百科上的初等细胞自动机，可通过[http://en.wikipedia.org/wiki/Elementary_cellular_automaton](http://en.wikipedia.org/wiki/Elementary_cellular_automaton)访问
- en: Rule 110, described at [http://en.wikipedia.org/wiki/Rule_110](http://en.wikipedia.org/wiki/Rule_110)
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 规则110，描述见[http://en.wikipedia.org/wiki/Rule_110](http://en.wikipedia.org/wiki/Rule_110)
- en: The Wolfram code, explained at [http://en.wikipedia.org/wiki/Wolfram_code](http://en.wikipedia.org/wiki/Wolfram_code),
    assigns a 1D elementary cellular automaton to any number between 0 and 255
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解释见[http://en.wikipedia.org/wiki/Wolfram_code](http://en.wikipedia.org/wiki/Wolfram_code)的Wolfram代码，将一个一维初等细胞自动机分配给0到255之间的任何数字
- en: Conway's Game of Life on Wikipedia, available at [http://en.wikipedia.org/wiki/Conway's_Game_of_Life](http://en.wikipedia.org/wiki/Conway's_Game_of_Life)
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维基百科上的《康威的生命游戏》，可通过[http://en.wikipedia.org/wiki/Conway's_Game_of_Life](http://en.wikipedia.org/wiki/Conway's_Game_of_Life)访问
- en: Simulating an ordinary differential equation with SciPy
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用SciPy模拟常微分方程
- en: '**Ordinary Differential Equations** (**ODEs**) describe the evolution of a
    system subject to internal and external dynamics. Specifically, an ODE links a
    quantity depending on a single independent variable (time, for example) to its
    derivatives. In addition, the system can be under the influence of external factors.
    A first-order ODE can typically be written as:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '**常微分方程**（**ODEs**）描述了一个系统在内外部动态影响下的演变。具体来说，ODE将依赖于单一自变量（例如时间）的量与其导数联系起来。此外，系统还可能受到外部因素的影响。一个一阶ODE通常可以写成：'
- en: '![Simulating an ordinary differential equation with SciPy](img/4818OS_12_06.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![使用SciPy模拟常微分方程](img/4818OS_12_06.jpg)'
- en: More generally, an *n*-th order ODE involves successive derivatives of *y* until
    the order *n*. The ODE is said to be linear or nonlinear depending on whether
    *f* is linear in *y* or not.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 更一般地说，一个*n*阶ODE涉及到*y*的连续导数直到阶数*n*。ODE被称为线性或非线性，取决于*f*是否在*y*中是线性的。
- en: ODEs naturally appear when the rate of change of a quantity depends on its value.
    Therefore, ODEs are found in many scientific disciplines such as mechanics (evolution
    of a body subject to dynamic forces), chemistry (concentration of reacting products),
    biology (spread of an epidemic), ecology (growth of a population), economics,
    and finance, among others.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个量的变化率依赖于其值时，常微分方程自然出现。因此，ODE在许多科学领域都有应用，如力学（受动力学力作用的物体演化）、化学（反应产物的浓度）、生物学（流行病的传播）、生态学（种群的增长）、经济学和金融等。
- en: Whereas simple ODEs can be solved analytically, many ODEs require a numerical
    treatment. In this recipe, we will simulate a simple linear second-order autonomous
    ODE, describing the evolution of a particle in the air subject to gravity and
    viscous resistance. Although this equation could be solved analytically, here
    we will use SciPy to simulate it numerically.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然简单的常微分方程（ODE）可以通过解析方法求解，但许多ODE需要数值处理。在这个例子中，我们将模拟一个简单的线性二阶自治ODE，描述一个在重力和粘性阻力作用下的空气中粒子的演化。虽然这个方程可以通过解析方法求解，但在这里我们将使用SciPy进行数值模拟。
- en: How to do it...
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'Let''s import NumPy, SciPy (the `integrate` package), and matplotlib:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们导入NumPy、SciPy（`integrate`包）和matplotlib：
- en: '[PRE12]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We define a few parameters appearing in our model:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们定义了一些在模型中出现的参数：
- en: '[PRE13]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We have two variables: *x* and *y* (two dimensions). We note *u=(x,y)*. The
    ODE that we are going to simulate is:![How to do it...](img/4818OS_12_07.jpg)'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们有两个变量：*x*和*y*（二维）。我们记*u=(x,y)*。我们将要模拟的ODE是：![如何实现...](img/4818OS_12_07.jpg)
- en: Here, *g* is the gravity acceleration vector.
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里，*g*是重力加速度向量。
- en: Tip
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Time derivatives are denoted with *dots* above variables (one dot means *first
    derivative* and two dots means *second derivative*).
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 时间导数用变量上的*点*表示（一个点表示*一阶导数*，两个点表示*二阶导数*）。
- en: 'In order to simulate this second-order ODE with SciPy, we can convert it to
    a first-order ODE (another option would be to solve *u*'' first before integrating
    the solution). To do this, we consider two 2D variables: *u* and *u''*. We note
    *v = (u, u'')*. We can express *v''* as a function of *v*. Now, we create the
    initial vector *v[0]* at time *t=0*: it has four components.'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了使用SciPy模拟这个二阶ODE，我们可以将其转换为一阶ODE（另一种选择是先求解*u*'再进行积分）。为此，我们考虑两个二维变量：*u*和*u'*。我们记*v
    = (u, u')*。我们可以将*v'*表示为*v*的函数。现在，我们创建初始向量*v[0]*，其时间为*t=0*，它有四个分量。
- en: '[PRE14]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Let''s create a Python function *f* that takes the current vector *v(t[0])*
    and a time *t[0]* as arguments (with optional parameters) and that returns the
    derivative *v''(t[0])*:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建一个Python函数*f*，该函数接受当前向量*v(t[0])*和时间*t[0]*作为参数（可以有可选参数），并返回导数*v'(t[0])*：
- en: '[PRE15]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Now, we simulate the system for different values of *k*. We use the SciPy `odeint()`
    function, defined in the `scipy.integrate` package.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们使用不同的*k*值来模拟系统。我们使用SciPy的`odeint()`函数，它定义在`scipy.integrate`包中。
- en: '[PRE16]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![How to do it...](img/4818OS_12_08.jpg)'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何实现...](img/4818OS_12_08.jpg)'
- en: In the preceding figure, the most outward trajectory (blue) corresponds to drag-free
    motion (without air resistance). It is a parabola. In the other trajectories,
    we can observe the increasing effect of air resistance, parameterized with `k`.
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上图中，最外层的轨迹（蓝色）对应于无阻力运动（没有空气阻力）。它是一条抛物线。在其他轨迹中，我们可以观察到空气阻力的逐渐增加，它通过`k`来参数化。
- en: How it works...
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Let''s explain how we obtained the differential equation from our model. Let
    *u = (x,y)* encode the 2D position of our particle with mass *m*. This particle
    is subject to two forces: gravity *g = (0, -9.81)* (in *m/s*) and air drag *F
    = -ku''*. This last term depends on the particle''s speed and is only valid at
    low speed. With higher speeds, we need to use more complex nonlinear expressions.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们解释一下如何从我们的模型中获得微分方程。设* u = (x,y)* 表示粒子在二维空间中的位置，粒子质量为*m*。该粒子受到两个力的作用：重力 *g
    = (0, -9.81)*（单位：*m/s*）和空气阻力 *F = -ku'*。最后一项依赖于粒子的速度，并且只在低速下有效。对于更高的速度，我们需要使用更复杂的非线性表达式。
- en: 'Now, we use **Newton''s second law of motion** in classical mechanics. This
    law states that in an inertial reference frame, the mass multiplied by the acceleration
    of the particle is equal to the sum of all forces applied to that particle. Here,
    we obtain:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们使用**牛顿第二定律**来处理经典力学中的运动。该定律表明，在惯性参考系中，粒子的质量乘以其加速度等于作用于粒子的所有力的合力。在这里，我们得到了：
- en: '![How it works...](img/4818OS_12_09.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/4818OS_12_09.jpg)'
- en: 'We immediately obtain our second-order ODE:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们立即得到我们的二阶ODE：
- en: '![How it works...](img/4818OS_12_10.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/4818OS_12_10.jpg)'
- en: 'We transform it into a single-order system of ODEs with *v=(u, u'')*:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将其转化为一个一阶常微分方程系统，定义 *v=(u, u')*：
- en: '![How it works...](img/4818OS_12_11.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/4818OS_12_11.jpg)'
- en: The last term can be expressed as a function of *v* only.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一项可以仅以 *v* 的函数表示。
- en: The SciPy `odeint()`function is a black-box solver; we simply specify the function
    that describes the system, and SciPy solves it automatically.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: SciPy 的 `odeint()` 函数是一个黑箱求解器；我们只需指定描述系统的函数，SciPy 会自动求解。
- en: This function leverages the FORTRAN library **ODEPACK**, which contains well-tested
    code that has been used for decades by many scientists and engineers.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数利用了 FORTRAN 库 **ODEPACK**，它包含了经过充分测试的代码，已经被许多科学家和工程师使用了几十年。
- en: 'An example of a simple numerical solver is the **Euler method**. To numerically
    solve the autonomous ODE *y''=f(y)*, the method consists of discretizing time
    with a time step *dt* and replacing *y''* with a first-order approximation:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的数值求解器示例是 **欧拉法**。为了数值求解自治常微分方程 *y'=f(y)*，该方法通过用时间步长 *dt* 离散化时间，并将 *y'*
    替换为一阶近似：
- en: '![How it works...](img/4818OS_12_12.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/4818OS_12_12.jpg)'
- en: 'Then, starting from an initial condition *y[0] = y(t[0])*, the method evaluates
    *y* successively with the following recurrence relation:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，从初始条件 *y[0] = y(t[0])* 开始，方法通过以下递推关系依次计算 *y*：
- en: '![How it works...](img/4818OS_12_13.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/4818OS_12_13.jpg)'
- en: There's more...
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Here are a few references:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一些参考资料：
- en: The documentation of the `integrate` package in SciPy available at [http://docs.scipy.org/doc/scipy/reference/integrate.html](http://docs.scipy.org/doc/scipy/reference/integrate.html)
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SciPy 中 `integrate` 包的文档，可以在 [http://docs.scipy.org/doc/scipy/reference/integrate.html](http://docs.scipy.org/doc/scipy/reference/integrate.html)
    查阅
- en: ODEs on Wikipedia, available at [http://en.wikipedia.org/wiki/Ordinary_differential_equation](http://en.wikipedia.org/wiki/Ordinary_differential_equation)
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维基百科上的常微分方程（ODEs）条目，可以在 [http://en.wikipedia.org/wiki/Ordinary_differential_equation](http://en.wikipedia.org/wiki/Ordinary_differential_equation)
    查阅
- en: Newton's laws of motion on Wikipedia, available at [http://en.wikipedia.org/wiki/Newton's_laws_of_motion](http://en.wikipedia.org/wiki/Newton's_laws_of_motion)
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维基百科上的牛顿运动定律条目，可以在 [http://en.wikipedia.org/wiki/Newton's_laws_of_motion](http://en.wikipedia.org/wiki/Newton's_laws_of_motion)
    查阅
- en: Air resistance on Wikipedia, available at [http://en.wikipedia.org/wiki/Drag_%28physics%29](http://en.wikipedia.org/wiki/Drag_%28physics%29)
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维基百科上的空气阻力条目，可以在 [http://en.wikipedia.org/wiki/Drag_%28physics%29](http://en.wikipedia.org/wiki/Drag_%28physics%29)
    查阅
- en: Some numerical methods for ODEs described at [http://en.wikipedia.org/wiki/Numerical_methods_for_ordinary_differential_equations](http://en.wikipedia.org/wiki/Numerical_methods_for_ordinary_differential_equations)
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述常微分方程的数值方法，可以在 [http://en.wikipedia.org/wiki/Numerical_methods_for_ordinary_differential_equations](http://en.wikipedia.org/wiki/Numerical_methods_for_ordinary_differential_equations)
    查阅
- en: The Euler method on Wikipedia, available at [http://en.wikipedia.org/wiki/Euler_method](http://en.wikipedia.org/wiki/Euler_method)
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维基百科上的欧拉法条目，可以在 [http://en.wikipedia.org/wiki/Euler_method](http://en.wikipedia.org/wiki/Euler_method)
    查阅
- en: Documentation of the ODEPACK package in FORTRAN available at [www.netlib.org/odepack/opks-sum](http://www.netlib.org/odepack/opks-sum)
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: FORTRAN 中 ODEPACK 包的文档，可以在 [www.netlib.org/odepack/opks-sum](http://www.netlib.org/odepack/opks-sum)
    查阅
- en: See also
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见：
- en: The *Plotting the bifurcation diagram of a chaotic dynamical system* recipe
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*绘制混沌动力系统的分叉图* 这个配方'
- en: Simulating a partial differential equation – reaction-diffusion systems and
    Turing patterns
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模拟偏微分方程 —— 反应-扩散系统和图灵模式
- en: '**Partial Differential Equations** (**PDEs**) describe the evolution of dynamical
    systems involving both time and space. Examples in physics include sound, heat,
    electromagnetism, fluid flow, and elasticity, among others. Examples in biology
    include tumor growth, population dynamics, and epidemic propagations.'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '**偏微分方程**（**PDEs**）描述了包含时间和空间的动力系统的演化。物理学中的例子包括声音、热、电子磁学、流体流动和弹性等。生物学中的例子包括肿瘤生长、种群动态和疫情传播。'
- en: PDEs are hard to solve analytically. Therefore, PDEs are often studied via numerical
    simulations.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 偏微分方程（PDEs）很难通过解析方法求解。因此，偏微分方程通常通过数值模拟来研究。
- en: 'In this recipe, we will illustrate how to simulate a **reaction-diffusion system**
    described by a PDE called the **FitzHugh–Nagumo equation**. A reaction-diffusion
    system models the evolution of one or several variables subject to two processes:
    reaction (transformation of the variables into each other) and diffusion (spreading
    across a spatial region). Some chemical reactions can be described by this type
    of model, but there are other applications in physics, biology, ecology, and other
    disciplines.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将演示如何模拟由称为**FitzHugh–Nagumo方程**的偏微分方程（PDE）描述的**反应扩散系统**。反应扩散系统模拟了一个或多个变量的演变，这些变量受到两种过程的影响：反应（变量之间的相互转化）和扩散（在空间区域中的传播）。一些化学反应可以用这种模型来描述，但在物理学、生物学、生态学以及其他学科中也有其他应用。
- en: Here, we simulate a system that has been proposed by Alan Turing as a model
    of animal coat pattern formation. Two chemical substances influencing skin pigmentation
    interact according to a reaction-diffusion model. This system is responsible for
    the formation of patterns that are reminiscent of the pelage of zebras, jaguars,
    and giraffes.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们模拟了艾伦·图灵提出的一个系统，用作动物皮毛图案形成的模型。两种影响皮肤着色的化学物质根据反应扩散模型相互作用。这个系统负责形成类似斑马、美洲豹和长颈鹿皮毛的图案。
- en: We will simulate this system with the finite difference method. This method
    consists of discretizing time and space and replacing the derivatives with their
    discrete equivalents.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用有限差分法模拟这个系统。该方法通过离散化时间和空间，并将导数替换为其离散等价物来实现。
- en: How to do it...
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'Let''s import the packages:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们导入必要的包：
- en: '[PRE17]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We will simulate the following system of partial differential equations on the
    domain *E=[-1,1]²*:![How to do it...](img/4818OS_12_14.jpg)
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将在域*E=[-1,1]²*上模拟以下偏微分方程系统：![如何实现...](img/4818OS_12_14.jpg)
- en: The variable *u* represents the concentration of a substance favoring skin pigmentation,
    whereas *v* represents another substance that reacts with the first and impedes
    pigmentation.
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 变量*u*表示有助于皮肤着色的物质浓度，而*v*表示另一种与第一种物质反应并抑制着色的物质。
- en: 'At initialization time, we assume that *u* and *v* contain independent random
    numbers on every grid point. We also take **Neumann boundary conditions**: we
    require the spatial derivatives of the variables with respect to the normal vectors
    to be null on the domain''s boundaries.'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在初始化时，我们假设每个网格点上的*u*和*v*包含独立的随机数。我们还采用**Neumann边界条件**：要求变量相对于法向量的空间导数在域的边界上为零。
- en: 'Let''s define the four parameters of the model:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们定义模型的四个参数：
- en: '[PRE18]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: We discretize time and space. The following condition ensures that the discretization
    scheme we use here is stable:![How to do it...](img/4818OS_12_15.jpg)
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们离散化时间和空间。以下条件确保我们在此使用的离散化方案是稳定的：![如何实现...](img/4818OS_12_15.jpg)
- en: '[PRE19]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We initialize the variables *u* and *v*. The matrices `U` and `V` contain the
    values of these variables on the vertices of the 2D grid. These variables are
    initialized with a uniform noise between 0 and 1:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们初始化变量*u*和*v*。矩阵`U`和`V`包含这些变量在二维网格顶点上的值。这些变量被初始化为介于0和1之间的均匀噪声：
- en: '[PRE20]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Now, we define a function that computes the discrete Laplace operator of a 2D
    variable on the grid, using a five-point stencil finite difference method. This
    operator is defined by:![How to do it...](img/4818OS_12_16.jpg)
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们定义一个函数，使用五点模板有限差分法计算网格上二维变量的离散拉普拉斯算符。这个算符定义为：![如何实现...](img/4818OS_12_16.jpg)
- en: 'We can compute the values of this operator on the grid using vectorized matrix
    operations. Because of side effects on the edges of the matrix, we need to remove
    the borders of the grid in the computation:'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以通过向量化的矩阵操作计算网格上该算符的值。由于矩阵边缘的副作用，我们需要在计算中去除网格的边界：
- en: '[PRE21]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now, we simulate the system of equations using the finite difference method.
    At each time step, we compute the right-hand sides of the two equations on the
    grid using discrete spatial derivatives (Laplacians). Then, we update the variables
    using a discrete time derivative:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们使用有限差分法模拟方程系统。在每个时间步长上，我们使用离散空间导数（拉普拉斯算符）计算网格上两个方程的右侧。然后，我们使用离散时间导数更新变量：
- en: '[PRE22]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Finally, we display the variable `u` after a time `T` of simulation:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们展示在时间`T`的模拟后变量`u`的状态：
- en: '[PRE23]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '![How to do it...](img/4818OS_12_17.jpg)'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何实现...](img/4818OS_12_17.jpg)'
- en: Whereas the variables were completely random at initialization time, we observe
    the formation of patterns after a sufficiently long simulation time.
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 尽管变量在初始化时是完全随机的，但在足够长的模拟时间后，我们观察到模式的形成。
- en: How it works...
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Let''s explain how the finite difference method allowed us to implement the
    update step. We start from the following system of equations:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们解释有限差分法是如何帮助我们实现更新步骤的。我们从以下方程系统开始：
- en: '![How it works...](img/4818OS_12_18.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/4818OS_12_18.jpg)'
- en: 'We first use the following scheme for the discrete Laplace operator:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先使用以下方案来离散化拉普拉斯算子：
- en: '![How it works...](img/4818OS_12_19.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/4818OS_12_19.jpg)'
- en: 'We also use this scheme for the time derivative of *u* and *v*:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也使用这个方案来处理 *u* 和 *v* 的时间导数：
- en: '![How it works...](img/4818OS_12_20.jpg)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/4818OS_12_20.jpg)'
- en: 'We end up with the following iterative update step:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，我们得到以下的迭代更新步骤：
- en: '![How it works...](img/4818OS_12_21.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/4818OS_12_21.jpg)'
- en: 'Here, our Neumann boundary conditions state that the spatial derivatives with
    respect to the normal vectors are null on the boundaries of the domain *E*:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们的诺依曼边界条件规定，法向量方向上的空间导数在区域 *E* 的边界上为零：
- en: '![How it works...](img/4818OS_12_22.jpg)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/4818OS_12_22.jpg)'
- en: We implement these boundary conditions by duplicating values in matrices `U`
    and `V` on the edges (see the preceding code).
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过在矩阵 `U` 和 `V` 的边缘复制值来实现这些边界条件（请参见前面的代码）。
- en: 'In order to ensure that our numerical scheme converges to a numerical solution
    that is close to the actual (unknown) mathematical solution, the stability of
    the scheme needs to be ascertained. One can show that a sufficient condition for
    the stability is:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保我们的数值方案收敛到一个接近实际（未知）数学解的数值解，需要确定该方案的稳定性。可以证明，稳定性的充要条件是：
- en: '![How it works...](img/4818OS_12_23.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/4818OS_12_23.jpg)'
- en: There's more...
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Here are further references on partial differential equations, reaction-diffusion
    systems, and numerical simulations of those systems:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是关于偏微分方程、反应-扩散系统及其数值模拟的进一步参考资料：
- en: Partial differential equations on Wikipedia, available at [http://en.wikipedia.org/wiki/Partial_differential_equation](http://en.wikipedia.org/wiki/Partial_differential_equation)
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维基百科上的偏微分方程，详情请见[http://en.wikipedia.org/wiki/Partial_differential_equation](http://en.wikipedia.org/wiki/Partial_differential_equation)
- en: Reaction-diffusion systems on Wikipedia, available at [http://en.wikipedia.org/wiki/Reaction%E2%80%93diffusion_system](http://en.wikipedia.org/wiki/Reaction%E2%80%93diffusion_system)
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维基百科上的反应-扩散系统，详情请见[http://en.wikipedia.org/wiki/Reaction%E2%80%93diffusion_system](http://en.wikipedia.org/wiki/Reaction%E2%80%93diffusion_system)
- en: FitzHugh-Nagumo system on Wikipedia, available at [http://en.wikipedia.org/wiki/FitzHugh%E2%80%93Nagumo_equation](http://en.wikipedia.org/wiki/FitzHugh%E2%80%93Nagumo_equation)
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维基百科上的FitzHugh-Nagumo系统，详情请见[http://en.wikipedia.org/wiki/FitzHugh%E2%80%93Nagumo_equation](http://en.wikipedia.org/wiki/FitzHugh%E2%80%93Nagumo_equation)
- en: Neumann boundary conditions on Wikipedia, available at [http://en.wikipedia.org/wiki/Neumann_boundary_condition](http://en.wikipedia.org/wiki/Neumann_boundary_condition)
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维基百科上的诺依曼边界条件，详情请见[http://en.wikipedia.org/wiki/Neumann_boundary_condition](http://en.wikipedia.org/wiki/Neumann_boundary_condition)
- en: Von Neumann stability analysis on Wikipedia, available at [http://en.wikipedia.org/wiki/Von_Neumann_stability_analysis](http://en.wikipedia.org/wiki/Von_Neumann_stability_analysis)
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维基百科上的冯·诺依曼稳定性分析，详情请见[http://en.wikipedia.org/wiki/Von_Neumann_stability_analysis](http://en.wikipedia.org/wiki/Von_Neumann_stability_analysis)
- en: A course on Computational Fluid Dynamics by Prof. Lorena Barba, written in the
    IPython notebook, available at [https://github.com/barbagroup/CFDPython](https://github.com/barbagroup/CFDPython)
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由Lorena Barba教授讲授的计算流体力学课程，使用IPython笔记本编写，详情请见[https://github.com/barbagroup/CFDPython](https://github.com/barbagroup/CFDPython)
- en: See also
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The *Simulating an elementary cellular automaton* recipe
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*模拟一个基础的元胞自动机* 方案'
- en: The *Simulating an ordinary differential equation with SciPy* recipe
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用SciPy模拟常微分方程* 方案'
