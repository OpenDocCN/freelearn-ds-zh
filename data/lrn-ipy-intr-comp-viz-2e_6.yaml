- en: Chapter 6. Customizing IPython
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章. 自定义 IPython
- en: 'IPython can be customized and extended for advanced uses. At the end of this
    chapter, you will know:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: IPython 可以定制和扩展以满足高级用途。在本章结束时，你将了解：
- en: How to create and use custom profiles
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何创建和使用自定义配置文件
- en: How to use IPython extensions for advanced purposes
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在高级应用中使用 IPython 扩展
- en: How to use different languages in the notebook
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在笔记本中使用不同的语言
- en: How to create your own extensions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何创建你自己的扩展
- en: How to use rich representations in the frontend
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在前端使用丰富的表示形式
- en: How to embed IPython in your Python code
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何将 IPython 嵌入到 Python 代码中
- en: IPython profiles
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IPython 配置文件
- en: 'A profile is specific to a user on the local computer, and contains IPython
    preferences as well as the history, temporary and log files, and so on. By default,
    there is a single profile called the **default profile**. To create it manually,
    we can run the following command in the system shell:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 配置文件是特定于本地计算机上某个用户的，包含 IPython 偏好设置以及历史记录、临时文件、日志文件等。默认情况下，存在一个名为**默认配置文件**的配置文件。要手动创建它，我们可以在系统
    shell 中运行以下命令：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: To specify a profile's name, we can use `ipython profile create name`.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要指定配置文件的名称，我们可以使用 `ipython profile create name` 命令。
- en: Profile locations
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置文件的位置
- en: Profiles are typically stored in `~/.ipython` or `~/.config/ipython`, where
    `~` is the current user's home directory. This directory is typically called the
    **IPython directory** and is sometimes referred to as `IPYTHONDIR`. To find the
    exact location of the profiles, we can run the `ipython locate` command for the
    IPython configuration directory, or `ipython locate profile default` for a specific
    profile directory, where `default` is the profile's name. A profile name is typically
    stored in a folder named `profile_name` within the IPython configuration folder.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 配置文件通常存储在 `~/.ipython` 或 `~/.config/ipython` 中，其中 `~` 是当前用户的主目录。这个目录通常被称为**IPython
    目录**，有时也称为 `IPYTHONDIR`。要找到配置文件的确切位置，我们可以运行 `ipython locate` 命令来定位 IPython 配置目录，或者运行
    `ipython locate profile default` 来定位特定配置文件目录，其中 `default` 是配置文件的名称。配置文件名称通常存储在
    IPython 配置文件夹中的名为 `profile_name` 的文件夹中。
- en: 'By default, IPython starts with the default profile. To specify a different
    profile when running IPython, we can use the `--profile` command-line argument,
    for example:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，IPython 使用默认配置文件启动。要在运行 IPython 时指定不同的配置文件，我们可以使用 `--profile` 命令行参数，例如：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The IPython configuration files
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IPython 配置文件
- en: In each profile, there is a special configuration file named `ipython_config.py`.
    This Python script is a placeholder for specifying various options. It contains
    a full template containing most possible options and it is fully documented, so
    that it should be straightforward to make changes.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个配置文件中，都有一个名为 `ipython_config.py` 的特殊配置文件。这个 Python 脚本是用于指定各种选项的占位符。它包含一个完整的模板，包含了大多数可能的选项，并且有详细文档，因此修改起来应该很简单。
- en: 'For example, to enable the **pylab** mode automatically in a profile, as well
    as the `qt` event loop integration system, the following lines should appear in
    the corresponding `ipython_config.py` file:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要在配置文件中自动启用**pylab**模式以及 `qt` 事件循环集成系统，以下几行应出现在相应的 `ipython_config.py` 文件中：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Loading scripts when IPython starts
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 IPython 启动时加载脚本
- en: You can have some Python scripts automatically loaded whenever IPython starts,
    just put them in `IPYTHONDIR/startup/`. This can be useful if you want to load
    modules or execute some scripts every time IPython starts.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在每次启动 IPython 时自动加载一些 Python 脚本，只需将它们放入 `IPYTHONDIR/startup/` 文件夹中。如果你希望每次
    IPython 启动时加载模块或执行一些脚本，这个方法会很有用。
- en: IPython extensions
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IPython 扩展
- en: IPython extensions allow to implement entirely customized behaviors in IPython.
    They can be loaded manually with a simple magic command, or automatically when
    IPython starts.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: IPython 扩展允许在 IPython 中实现完全自定义的行为。它们可以通过简单的魔法命令手动加载，或者在 IPython 启动时自动加载。
- en: Several extensions are natively included in IPython. They essentially allow
    to execute non-Python code from IPython. For example, the `cythonmagic` extension
    provides the `%%cython` cell magic for writing Cython code directly in IPython,
    as we saw in [Chapter 5](ch05.html "Chapter 5. High-Performance and Parallel Computing"),
    *High Performance and Parallel Computing*. Similar built-in extensions include
    `octavemagic` and `rmagic` for executing Octave and R code in IPython. They are
    particularly useful in the notebook.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 多个扩展已原生包含在 IPython 中。它们本质上允许从 IPython 执行非 Python 代码。例如，`cythonmagic` 扩展提供了 `%%cython`
    单元魔法，用于直接在 IPython 中编写 Cython 代码，就像我们在[第 5 章](ch05.html "第 5 章：高性能和并行计算")，*高性能和并行计算*中看到的那样。类似的内置扩展还包括
    `octavemagic` 和 `rmagic`，用于在 IPython 中执行 Octave 和 R 代码。它们在笔记本中尤其有用。
- en: Third-party modules can also implement their own extensions, as we will see
    in this section with line-by-line profiling modules. Finally, we will show how
    to create new extensions.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 第三方模块也可以实现自己的扩展，正如我们在本节中看到的逐行分析模块。最后，我们将展示如何创建新的扩展。
- en: Example – line-by-line profiling
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 – 逐行分析
- en: The `line_profiler` and `memory_profiler` packages are line-by-line profilers
    that provide very precise details about the exact portions of the code that take
    too long or use too much memory. They provide magic commands that can be manually
    integrated with IPython. First, we need to install these packages, for example,
    using `easy_install`, `pip`, or Christoph Gohlke's web page for Windows users.
    The `psutil` package is required on Windows, and can be found on the same web
    page.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_profiler` 和 `memory_profiler` 包是逐行分析器，它们提供非常精确的代码段细节，显示哪些部分的代码耗时过长或使用了过多内存。它们提供的魔法命令可以手动与
    IPython 集成。首先，我们需要安装这些包，例如使用 `easy_install`、`pip` 或 Christoph Gohlke 的网页（Windows
    用户）。在 Windows 上需要 `psutil` 包，它可以在同一个网页上找到。'
- en: 'To activate the magic commands implemented in these two packages, we need to
    edit the IPython configuration file and add the following lines:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要激活这两个包中实现的魔法命令，我们需要编辑 IPython 配置文件，并添加以下几行：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Then, the `lprun`, `mprun`, and `memit` magic commands are available. The line-by-line
    profilers work best when the function to profile is defined in a file rather than
    in the interactive session, because the profilers are then able to show the contents
    of each line in the profiling report.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，`lprun`、`mprun` 和 `memit` 魔法命令可供使用。当要分析的函数定义在文件中而非交互式会话中时，逐行分析器效果最佳，因为此时分析器可以在分析报告中显示每一行的内容。
- en: 'As an example, let''s create a script, `myscript.py`, using the following code:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 作为示例，让我们创建一个脚本 `myscript.py`，使用以下代码：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This function simulates 10,000 random walks (Brownian motions) with 1,000 steps
    and plots a histogram of the particle position at the end of the simulation.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数模拟 10,000 次随机游走（布朗运动），每次 1,000 步，并绘制模拟结束时粒子位置的直方图。
- en: 'Now, we are going to load this function in IPython and profile it. The `%lprun`
    magic command accepts a Python statement as well as a list of functions to profile
    line by line, specified with a `-f` option:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将加载这个函数到 IPython 中并进行分析。`%lprun` 魔法命令接受一个 Python 语句以及需要逐行分析的函数列表，函数列表通过
    `-f` 选项指定：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We can observe that most of the execution time happens in the creation of the
    `dx` array.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以观察到，大部分执行时间发生在创建 `dx` 数组的过程中。
- en: The `%mprun` magic command can be used similarly for memory profiling.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`%mprun` 魔法命令也可以类似地用于内存分析。'
- en: These line-by-line profilers are particularly useful when profiling complex
    Python applications. It is particularly convenient to do that interactively from
    IPython with those simple magic commands.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 逐行分析器在分析复杂的 Python 应用时特别有用。通过简单的魔法命令在 IPython 中交互式地进行分析尤其方便。
- en: Creating new extensions
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建新扩展
- en: To create an extension, we need to create a Python module in a directory, which
    is in the Python path. A possibility is to put it in the current directory, or
    in `IPYTHONDIR/extensions/`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建扩展，我们需要在 Python 路径中的目录中创建一个 Python 模块。可以将其放在当前目录，或者放在 `IPYTHONDIR/extensions/`
    中。
- en: An extension implements a `load_ipython_extension(ipython)` function, which
    takes the current `InteractiveShell` instance as an argument (and possibly `unload_ipython_extension(ipython)`,
    which is called when the extension is unloaded). This instance can be used to
    register new magic commands, access the user namespace, execute code, and so on.
    This loading function is called when the extension is loaded, which happens when
    the `%load_ext` or `%reload_ext` magic command is executed. To automatically load
    a module when IPython starts, we need to add the module name to the `c.TerminalIPythonApp.extensions`
    list in the IPython configuration file.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展实现了一个 `load_ipython_extension(ipython)` 函数，该函数以当前的 `InteractiveShell` 实例作为参数（可能还包括
    `unload_ipython_extension(ipython)`，该函数在卸载扩展时被调用）。此实例可用于注册新的魔法命令、访问用户命名空间、执行代码等。当扩展被加载时，会调用此加载函数，这通常发生在执行
    `%load_ext` 或 `%reload_ext` 魔法命令时。为了在 IPython 启动时自动加载模块，我们需要将模块名添加到 IPython 配置文件中的
    `c.TerminalIPythonApp.extensions` 列表中。
- en: Tip
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**The InteractiveShell instance**'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**InteractiveShell 实例**'
- en: 'The `InteractiveShell` instance represents the active IPython interpreter.
    Useful methods and attributes include `register_magics()`, to create new magic
    commands, and `user_ns`, to access the user namespace. You can explore all the
    instance''s attributes interactively from IPython with tab completion. For that,
    you need to execute the following command to get the current instance:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`InteractiveShell` 实例代表当前活跃的 IPython 解释器。其有用的方法和属性包括 `register_magics()`，用于创建新的魔法命令，以及
    `user_ns`，用于访问用户命名空间。你可以通过 IPython 的自动补全功能交互式地探索实例的所有属性。为此，你需要执行以下命令来获取当前实例：'
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Example – executing C++ code in IPython
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例 – 在 IPython 中执行 C++ 代码
- en: In this example, we will create a new extension to execute C++ code directly
    from IPython. This is only a pedagogical example, and in a real-world project,
    it might be a better idea to use Cython or SciPy.weave.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将创建一个新的扩展，以便直接在 IPython 中执行 C++ 代码。这仅是一个教学示例，在实际项目中，使用 Cython 或 SciPy.weave
    可能会是一个更好的选择。
- en: 'The extension defines a new cell magic named `cpp`. The idea is that one will
    be able to write C++ code directly in the cell, and it will be automatically compiled
    and executed. The cell output will contain the standard output of the code. Here
    is an explanation of how this extension works:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 该扩展定义了一个新的单元魔法命令 `cpp`。其理念是能够直接在单元中编写 C++ 代码，并且自动进行编译和执行。单元的输出将包含代码的标准输出。以下是该扩展如何工作的说明：
- en: We create a new class derived from `IPython.core.magic.Magics`
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们创建了一个新的类，继承自 `IPython.core.magic.Magics`
- en: 'In this class, we create a new method with a `cell_magic` decorator: it will
    implement the `cpp` cell magic'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这个类中，我们创建了一个带有 `cell_magic` 装饰器的新方法：它将实现 `cpp` 单元魔法命令
- en: This method accepts the cell's code as input, writes this C++ code in a temporary
    file, and calls the g++ compiler to create an executable
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该方法接受单元的代码作为输入，将 C++ 代码写入一个临时文件，并调用 g++ 编译器来创建可执行文件
- en: The method then calls the newly created executable and returns the output
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该方法随后调用新创建的可执行文件并返回输出
- en: In the `load_ipython_extension` function, we register this magic class
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `load_ipython_extension` 函数中，我们注册了这个魔法类
- en: 'The following code should be written in a `cppmagic.py` script:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码应写入 `cppmagic.py` 脚本：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The following screenshot shows how this extension can be conveniently used
    to write C++ code in the IPython notebook:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了如何方便地在 IPython 笔记本中使用这个扩展来编写 C++ 代码：
- en: '![Example – executing C++ code in IPython](img/9932_06_01.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![示例 – 在 IPython 中执行 C++ 代码](img/9932_06_01.jpg)'
- en: Executing C++ code in the IPython notebook
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在 IPython 笔记本中执行 C++ 代码
- en: This code works on Windows and can be easily adapted to Unix systems.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 该代码在 Windows 上有效，并可以很容易地适配到 Unix 系统。
- en: Tip
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Improving this example**'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**改进这个示例**'
- en: 'This example could be improved in many ways: temporary files could have unique
    names and could be stored in a special temporary directory, compilation errors
    could be nicely handled and redirected to IPython, and so on. The interested reader
    can take a look at the built-in Cython, Octave, and R magic extensions in `IPython/extensions/`
    that are somewhat similar to this example. More generally, the same techniques
    can be used to run non-Python code in IPython. It may even be possible to share
    variables between Python and the other languages.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子可以在很多方面改进：临时文件可以有唯一的名称，并存储在一个特殊的临时目录中，编译错误可以得到很好的处理并重定向到IPython等等。感兴趣的读者可以查看内置的Cython、Octave和R魔法扩展，这些扩展在`IPython/extensions/`目录下，与这个例子有些相似。更一般地说，相同的技术可以用来在IPython中运行非Python代码，甚至可能实现Python与其他语言之间的变量共享。
- en: The IPython extensions are particularly powerful in the context of the notebook,
    because they notably allow the implementation of arbitrarily complex behaviors
    to the cells' code.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: IPython扩展在笔记本环境中尤为强大，因为它们特别允许在单元格代码中实现任意复杂的行为。
- en: Tip
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Extensions index**'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**扩展索引**'
- en: An index of IPython extensions created by IPython users can be found at [https://github.com/ipython/ipython/wiki/Extensions-Index](https://github.com/ipython/ipython/wiki/Extensions-Index).
    If you have developed your own extension, do not hesitate to add it here!
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 由IPython用户创建的IPython扩展索引可以在[https://github.com/ipython/ipython/wiki/Extensions-Index](https://github.com/ipython/ipython/wiki/Extensions-Index)找到。如果你开发了自己的扩展，欢迎在此添加！
- en: Rich representations in the frontend
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前端的丰富表现
- en: 'The notebook and the Qt console can display richer representations of objects.
    Both can display bitmap and SVG images, and the notebook also supports videos,
    HTML code, and mathematical equations in LaTeX. It is particularly easy to display
    rich objects with classes: one just needs to implement a method called `_repr_*_`
    with `*` being `svg`, `png`, `jpeg`, `html`, `json`, `pretty`, or `latex`. For
    instance, let''s define a class, `Disc`, with a SVG representation method:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 笔记本和Qt控制台可以显示更丰富的对象表现。它们都能显示位图和SVG图像，且笔记本还支持视频、HTML代码和LaTeX数学方程式。通过类显示丰富的对象特别简单：只需要实现一个名为`_repr_*_`的方法，其中`*`可以是`svg`、`png`、`jpeg`、`html`、`json`、`pretty`或`latex`。例如，定义一个类`Disc`，并实现SVG表示方法：
- en: '[PRE9]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The constructor of this class accepts a radius size in pixels and a color as
    a string. Then, when an instance of this class is directed on the standard output,
    the SVG representation is automatically shown in the cell''s output as shown in
    the following screenshot:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 该类的构造函数接受一个以像素为单位的半径大小和一个作为字符串的颜色。然后，当该类的实例指向标准输出时，SVG表示会自动显示在单元格的输出中，如下图所示：
- en: '![Rich representations in the frontend](img/9932_06_02.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![前端的丰富表现](img/9932_06_02.jpg)'
- en: SVG representation in the IPython notebook
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: IPython笔记本中的SVG表示
- en: 'Another way of displaying rich representations of objects is to use the `IPython.display`
    module. You can interactively obtain the list of all supported representations
    with tab completion. For example, the following screenshot shows how LaTeX equations
    can be rendered in the notebook:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 显示对象丰富表现的另一种方式是使用`IPython.display`模块。你可以通过标签补全交互式地获取所有受支持的表现列表。例如，下面的截图展示了如何在笔记本中渲染LaTeX方程式：
- en: '![Rich representations in the frontend](img/9932_06_03.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![前端的丰富表现](img/9932_06_03.jpg)'
- en: LaTeX equations in the IPython notebook
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: IPython笔记本中的LaTeX方程式
- en: The rich display features of the notebook make it particularly adapted to the
    creation of pedagogical contents, presentations, blog posts, books, and so on,
    as notebooks can be exported in formats such as HTML or PDF.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 笔记本的丰富显示功能使其特别适合创建教学内容、演示文稿、博客文章、书籍等，因为笔记本可以导出为HTML或PDF等格式。
- en: Yet richer interactive representations will probably be possible in a future
    version of IPython with the support of custom JavaScript extensions and widgets
    in the notebook.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在未来版本的IPython中，支持自定义JavaScript扩展和小部件的笔记本可能会实现更丰富的交互式表现。
- en: Embedding IPython
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 嵌入IPython
- en: It is possible to launch IPython from any Python script, even when the standard
    Python interpreter runs the script. It can be useful in some occasions when you
    need to interact with a complex Python program at some point, and where using
    the IPython interpreter for the whole program is not possible or unwanted. For
    example, in a scientific computing context, you may want to pause the program
    after some automatic, computationally-intensive algorithms to look at the data,
    draw some plots, and so on, before resuming the program. Another possible use
    case is the integration of a widget in a graphical user interface to let the user
    interact with the Python environment through the IPython command-line interface.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在标准的 Python 解释器运行脚本时，也可以从任何 Python 脚本启动 IPython。在某些情况下，当你需要在某个时刻与复杂的 Python
    程序交互，而又不希望或无法对整个程序使用 IPython 解释器时，这个功能非常有用。例如，在科学计算中，你可能希望在某些自动计算密集型算法执行完后暂停程序，查看数据、绘制一些图表等，然后再继续程序。另一个可能的使用场景是将小部件集成到图形用户界面中，通过
    IPython 命令行界面让用户与 Python 环境进行交互。
- en: The easiest way to integrate IPython in a program is to call `IPython.embed()`
    at any point in your Python program (after `import IPython`). You can also specify
    custom options, including the input/output templates in the command-line interface,
    the startup/exit messages, and so on. You can find more information at [http://ipython.org/ipython-doc/stable/interactive/reference.html#embedding-ipython](http://ipython.org/ipython-doc/stable/interactive/reference.html#embedding-ipython).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在程序中集成 IPython 最简单的方法是在你的 Python 程序的任何位置调用 `IPython.embed()`（在 `import IPython`
    之后）。你还可以指定自定义选项，包括命令行界面的输入/输出模板、启动/退出消息等。你可以在 [http://ipython.org/ipython-doc/stable/interactive/reference.html#embedding-ipython](http://ipython.org/ipython-doc/stable/interactive/reference.html#embedding-ipython)
    找到更多信息。
- en: Final words
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结束语
- en: At this point, you should be convinced about the great power and flexibility
    of IPython. Not only does IPython natively offer an impressive number of useful
    features, it also lets you extend and customize it in virtually any aspect. It
    should be noted, however, that this project is still evolving. Although it was
    created more than 10 years ago, Version 1.0 has still not been released at the
    time of writing. The core features of IPython are now quite stable and mature.
    The notebook, which is the most recent feature, is expected to evolve importantly
    in the coming years. The possibility to create custom interactive widgets in the
    notebook is planned and is likely to be a major feature of the whole project.
    More information about the upcoming developments can be found at [https://github.com/ipython/ipython/wiki/Roadmap:-IPython](https://github.com/ipython/ipython/wiki/Roadmap:-IPython)
    and [http://ipython.org/_static/sloangrant/sloan-grant.html](http://ipython.org/_static/sloangrant/sloan-grant.html).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你应该已经确信 IPython 的强大功能和灵活性。IPython 不仅本身提供了大量有用的功能，它还允许你在几乎任何方面扩展和定制它。然而，需要注意的是，这个项目仍在不断发展中。尽管它已经创建超过
    10 年，但在写本文时，版本 1.0 仍未发布。IPython 的核心功能现在已经相当稳定和成熟。最近的功能——笔记本，预计将在未来几年有重要的发展。预计将在笔记本中创建自定义交互式小部件的功能将成为整个项目的一个重要特点。有关即将到来的开发的更多信息，可以在
    [https://github.com/ipython/ipython/wiki/Roadmap:-IPython](https://github.com/ipython/ipython/wiki/Roadmap:-IPython)
    和 [http://ipython.org/_static/sloangrant/sloan-grant.html](http://ipython.org/_static/sloangrant/sloan-grant.html)
    找到。
- en: 'Finally, IPython is an active open source project, meaning that anyone is welcome
    to contribute. Contributing can be as simple as reporting or fixing a bug, but
    it is always highly useful and greatly appreciated! Relatedly, anyone is welcome
    to request some help online, in respect of the common etiquette rules, of course.
    The developers and the most active users are always willing to help. Here are
    some useful links:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，IPython 是一个活跃的开源项目，任何人都可以贡献。贡献可以像报告或修复一个 bug 那样简单，但总是非常有用并且受到高度赞赏！相关地，任何人都可以在遵守公共礼仪规则的前提下在线请求帮助。开发人员和最活跃的用户总是愿意提供帮助。以下是一些有用的链接：
- en: 'GitHub project page: [https://github.com/ipython/ipython](https://github.com/ipython/ipython)'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'GitHub 项目页面: [https://github.com/ipython/ipython](https://github.com/ipython/ipython)'
- en: 'Wiki: [https://github.com/ipython/ipython/wiki](https://github.com/ipython/ipython/wiki)'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Wiki: [https://github.com/ipython/ipython/wiki](https://github.com/ipython/ipython/wiki)'
- en: 'User mailing list: [http://mail.scipy.org/mailman/listinfo/ipython-user](http://mail.scipy.org/mailman/listinfo/ipython-user)'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '用户邮件列表: [http://mail.scipy.org/mailman/listinfo/ipython-user](http://mail.scipy.org/mailman/listinfo/ipython-user)'
- en: 'Chat room: [https://www.hipchat.com/ghSp7E1uY](https://www.hipchat.com/ghSp7E1uY)'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 聊天室：[https://www.hipchat.com/ghSp7E1uY](https://www.hipchat.com/ghSp7E1uY)
- en: Summary
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter we described how IPython can be customized and extended, notably
    through extensions. Non-Python languages can also be called from IPython, which
    is particularly convenient in the notebook where any code can be copied and pasted
    in a cell and transparently compiled and evaluated in the current Python namespace.
    The notebook also supports rich display features and, soon, interactive widgets,
    making it the most advanced tool to date for interactive programming and computing
    in Python.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们描述了如何定制和扩展IPython，特别是通过扩展功能。非Python语言也可以通过IPython调用，这在笔记本中尤其方便，因为任何代码都可以复制并粘贴到一个单元格中，并在当前的Python命名空间中透明地编译和执行。该笔记本还支持丰富的显示功能，并且很快将支持交互式小部件，使其成为目前为止最先进的Python交互式编程和计算工具。
