- en: Chapter 8. Styling Your Map
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。样式化你的地图
- en: 'It''s the one word that strikes fear into the heart of developers: style. They
    think it''s a field for right-brain dominant artists. They treat color theory,
    typography, and whitespace as a foreign language. They long to push these tasks
    onto a web designer and focus on algorithms and API calls.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 这是让开发者感到恐惧的一个词：样式。他们认为这是一个以右脑为主的艺术家领域。他们将色彩理论、排版和空白视为外语。他们渴望将这些任务推给网页设计师，并专注于算法和API调用。
- en: Many small firms, government agencies, and departments don't have the luxury
    of having a web designer on their staff, or even on call. These small organizations
    tend to consist of one or more people hired for their technical and analytical
    skills, while design skills are left as an afterthought. Maybe you're working
    for one of those right now.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 许多小型公司、政府机构和部门没有在他们的员工中配备网页设计师的奢侈，甚至没有可随时调用的人。这些小型组织往往由一或多个因技术分析和技能而被雇佣的人组成，而设计技能则被当作次要考虑。也许你现在就在为这样的组织工作。
- en: While this chapter may not turn you into an instant web designer, it will help
    you use CSS to effectively lay out your web map applications.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这一章可能无法让你立刻成为一名网页设计师，但它将帮助你有效地使用CSS来布局你的网络地图应用程序。
- en: 'In this chapter, we''ll cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: How CSS is applied to an HTML document
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS如何应用于HTML文档
- en: The different ways to position the map on a page
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在页面上定位地图的不同方式
- en: How to use Dojo's `dijit/layout` modules to style your page
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用Dojo的`dijit/layout`模块来样式化你的页面
- en: How to add Bootstrap to the layout of your page
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何将Bootstrap添加到页面的布局中
- en: The inner workings of CSS
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS的内部工作原理
- en: 'As we mentioned in [Chapter 1](ch01.html "Chapter 1. Your First Mapping Application"),
    *Your First Mapping Application*, the **Cascading Style Sheet** (**CSS**) tells
    the browser how to render an HTML page. As the browser scans through the HTML,
    it scans through all the applicable CSS styles from CSS files, as well as any
    overriding styling within the HTML, to see how it should render the element. CSS
    descriptions, such as color and font size, often cascade down from one element
    to its children unless specifically overridden. For example, the style applied
    to the `div` tag will also apply to the `p` tags inside it, as shown in the following
    code:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[第1章](ch01.html "第1章。你的第一个地图应用程序")中提到的，*你的第一个地图应用程序*，**层叠样式表**（**CSS**）告诉浏览器如何渲染HTML页面。当浏览器扫描HTML时，它会扫描所有适用的CSS样式，包括CSS文件中的样式以及HTML中的任何覆盖样式，以确定如何渲染元素。CSS描述，如颜色和字体大小，通常从父元素级联到其子元素，除非有特定的覆盖。例如，应用于`div`标签的样式也将应用于其内部的`p`标签，如下面的代码所示：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: CSS works a little differently from most programming languages. In JavaScript,
    when you have a bug in part of your program, you can step through the code in
    your browser until you find the part that breaks. In CSS, however, the rules that
    define the look of an element can be stretched across multiple style sheets, and
    can even be written inside the element. The appearance of the element can also
    be impacted by elements both inside and out.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: CSS与大多数编程语言的工作方式略有不同。在JavaScript中，当你程序的一部分有错误时，你可以在浏览器中逐步执行代码，直到找到出错的部分。然而，在CSS中，定义元素外观的规则可以跨越多个样式表，甚至可以写在元素内部。元素的外观也可能受到内部和外部元素的影响。
- en: Selector specificity
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择器特定性
- en: 'The browser decides how elements should be styled by comparing the selector
    types used to define the style. It applies weights based on the type and quantity
    of selectors used to define a style. Browsers have five basic ranks for CSS selectors,
    based on how specific they are. Technically, there is a zeroth selector when you
    use the `*` to select every element on the page but, compared to the other selectors,
    it has no value. Selector ranks are as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器通过比较用于定义样式的选择器类型来决定元素应该如何被样式化。它根据选择器的类型和数量应用权重。浏览器有五个基本的CSS选择器等级，根据它们的特定性来划分。技术上，当你使用`*`选择页面上的所有元素时，有一个零级选择器，但与其他选择器相比，它没有价值。选择器等级如下：
- en: By element (for example `h1`, `div`, or `p`)
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过元素（例如`h1`、`div`或`p`）
- en: 'By element classes, attributes, and pseudo selectors. Some examples include:'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过元素类、属性和伪选择器。一些例子包括：
- en: '`.email` or `.form` (classes)'
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.email`或`.form`（类）'
- en: '`input[type=''text'']` (attributes)'
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`input[type=''text'']`（属性）'
- en: '`a:hover` or `p:first-child` (pseudo selectors)'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a:hover`或`p:first-child`（伪选择器）'
- en: By IDs (for example `#main` or `#map-div`)
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过ID（例如`#main`或`#map-div`）
- en: By inline styles (`<p style=""></p>`)
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过内联样式（`<p style=""></p>`）
- en: By styles marked `!important`
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过标记`!important`的样式
- en: A common way to note specificity is to count the number of selectors in each
    category and separate them with a comma. A `p` selector gets a specificity of
    `1`, and a `p > a` gets a specificity of `2`. However, a `p.special > a` gets
    a specificity of `1,2`, because the class falls in a separate, higher category.
    A `#main` selector has a specificity of `1,0,0` while the inline style of a `p`
    tag earns a specificity of `1,0,0,0`. The powerful `!important` clause is the
    only thing that can override an inline selector, and it earns a specificity of
    `1,0,0,0,0`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 记录特定性的一个常见方法是对每个类别的选择器数量进行计数，并用逗号分隔它们。一个`p`选择器得到特定性`1`，而`p > a`得到特定性`2`。然而，`p.special
    > a`得到特定性`1,2`，因为类属于一个单独的、更高等级的分类。一个`#main`选择器的特定性为`1,0,0`，而`p`标签的内联样式得到特定性`1,0,0,0`。强大的`!important`子句是唯一可以覆盖内联选择器的因素，它获得特定性`1,0,0,0,0`。
- en: 'When comparing selector specificity, a single higher rank selector beats any
    number of lower rank selectors. In the case of a tie, the next lowest is compared.
    For example, let''s take a look at the following HTML snippet:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当比较选择器特定性时，一个高等级选择器胜过任何数量低等级选择器。在出现平局的情况下，比较下一个最低等级的选择器。例如，让我们看看以下HTML片段：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'What do you think the background color will be from this? The correct answer
    is green. The `#citytxt` rule is a third ranked selector, since it points to an
    individual element on the page. If we look at the selectors along with their specificity
    ranks, they look as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你认为背景颜色会是什么？正确答案是绿色。`#citytxt`规则是一个第三等级的选择器，因为它指向页面上的单个元素。如果我们查看选择器及其特定性等级，它们看起来如下：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: So what happens when everything else is equal?
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，当其他一切都相等时会发生什么？
- en: Equal selector specificity
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 等级选择器特定性
- en: When two or more rules have equal selector specificity, the last one listed
    wins. This is another feature of the cascading effect of CSS. We always put the
    custom CSS after the Dojo and ArcGIS JavaScript API style sheets in our applications.
    Any style changes we make will then not be overridden by the other style sheets.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当两个或更多规则具有相同的选择器特定性时，最后列出的规则获胜。这是CSS级联效果的另一个特性。我们总是在我们的应用程序中将自定义CSS放在Dojo和ArcGIS
    JavaScript API样式表之后。我们做出的任何样式更改都不会被其他样式表覆盖。
- en: With the last in wins rule, we can undo any unintended side effects of CSS rules
    applied to our widgets. We don't always have to resort to using `!important` tags
    or writing inline styles that get lost in our code reviews. We can use the same
    strength of selector specificity, and get the result we want, as long as we put
    it after the old rule.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 使用“最后者胜出”规则，我们可以撤销应用于我们的小部件的CSS规则可能产生的任何意外副作用。我们不必总是求助于使用`!important`标签或编写丢失在代码审查中的内联样式。只要我们将它放在旧规则之后，我们就可以使用相同的选择器特定性强度，并得到我们想要的结果。
- en: Styling tips and tricks
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 样式技巧和窍门
- en: 'Now that we have an idea how CSS works, we can build on this logic to create
    some working styles for our application:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了CSS的工作原理，我们可以在此基础上构建一些适用于我们应用程序的工作样式：
- en: We'll begin by studying some of the bad patterns we need to avoid. We'll look
    at how they impact styles and further development negatively.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将首先研究一些我们需要避免的不良模式。我们将看看它们如何对样式和进一步的开发产生负面影响。
- en: Next, we'll look into some good practices, such as using responsive design and
    normalizing style sheets.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来，我们将探讨一些良好的实践，例如使用响应式设计和标准化样式表。
- en: We'll look at how to organize your style sheets to make them easier to extend
    and troubleshoot.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将探讨如何组织你的样式表，使它们更容易扩展和调试。
- en: We'll cover how to position your map wherever your application needs it.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将介绍如何将地图定位在应用程序需要的任何位置。
- en: Styling don'ts
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 样式禁忌
- en: 'Before I go too far with telling you what to do, let''s go through a few things
    you should avoid. These bad design habits are typically picked up while working
    through beginner tutorials and copying and pasting single-page applications off
    the Internet:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在我告诉你该做什么之前，让我们先了解一下你应该避免的一些事情。这些不良的设计习惯通常是在完成初学者教程和从互联网上复制粘贴单页应用程序时形成的：
- en: 'Styling your elements inline: Trying to change the appearance of 20 or more
    paragraphs one by one is a pain.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内联样式化元素：试图逐个更改20个或更多段落的样式是一件痛苦的事情。
- en: 'Making everything important: The important clause allows you to override styles
    imposed by other widgets and imported style sheets, but don''t get carried away.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使一切变得重要：`important`子句允许你覆盖其他小部件和导入的样式表施加的样式，但不要过分沉迷。
- en: 'Having lots of references to individual IDs: A few element ID references are
    fine but, if you want to reuse your CSS files on other pages, or in other projects,
    you want them as general as possible. Not everyone will be using your `#pink_and_purple_striped_address2_input`
    element.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对单个 ID 的引用过多：一些元素 ID 引用是可以接受的，但如果你想在其他页面或项目中重用你的 CSS 文件，你希望它们尽可能通用。并不是每个人都会使用你的
    `#pink_and_purple_striped_address2_input` 元素。
- en: 'Writing new changes to your CSS file at the bottom of your page: We all know
    that last in wins, but if you slap every new update at the bottom of the page,
    the file becomes a junk-drawer of unorganized CSS rules.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在页面底部添加新的 CSS 文件更改：我们都知道“后到先得”，但如果每次都将新的更新直接添加到页面底部，文件就会变成一个杂乱无章的 CSS 规则抽屉。
- en: Like any hard and fast rules, there are appropriate times to break them. But,
    by working within the bounds of these rules, you make it easier for yourself and
    others to maintain your applications.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 就像任何硬性规则一样，有时打破它们是合适的。但，在这些规则的范围内工作，会使你自己和他人更容易维护你的应用程序。
- en: Responsive design
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 响应式设计
- en: The **responsive design** movement has taken a firm hold on website development.
    Responsive design revolves around the idea that a website should be useable on
    a wide variety of screen sizes, from large monitors to mobile phone screens. This
    reduces the costs of maintaining multiple websites for desktop and mobile users.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**响应式设计**运动在网站开发中占据了稳固的地位。响应式设计围绕的理念是，网站应该在各种屏幕尺寸上可用，从大屏幕到手机屏幕。这减少了为桌面和移动用户维护多个网站的成本。'
- en: On the surface, responsive design involves assigning percentage widths and heights
    instead of fixed sizes, but there is more. Fluid grid layouts support multiple
    columns on wider screens while collapsing down to a single column on narrow screens.
    Images at different resolutions can be served for tablets and screens with retina
    displays for crisper looking images. CSS media queries can change how elements
    are displayed at different sizes or across different media.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 表面上看，响应式设计涉及分配百分比宽度和高度而不是固定大小，但还有更多。流体网格布局在较宽的屏幕上支持多列，而在较窄的屏幕上则折叠成单列。可以为平板电脑和具有视网膜显示的屏幕提供不同分辨率的图像，以获得更清晰的图像。CSS
    媒体查询可以根据不同大小或不同媒体更改元素的显示方式。
- en: Maps created with the ArcGIS JavaScript API work well with responsive design
    layouts. The maps keep track of the size of their HTML container elements, and
    size changes, while updating their contents. While the map scale stays the same,
    the extent is recalculated, and new map tiles are requested for locations not
    previously stored in memory. These changes can be triggered by resizing the browser
    window in a desktop, or turning a tablet sideways in a mobile browser.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 ArcGIS JavaScript API 创建的地图与响应式设计布局配合良好。地图会跟踪其 HTML 容器元素的尺寸和尺寸变化，同时更新其内容。当地图比例保持不变时，范围会重新计算，并为之前未存储在内存中的位置请求新的地图瓦片。这些更改可以通过在桌面浏览器中调整浏览器窗口大小或是在移动浏览器中将平板电脑侧转来触发。
- en: Normalize.css
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Normalize.css
- en: It can be frustrating trying to make your application look good in your browser.
    Bringing in more browsers compounds the problem. Many browsers have unique rendering
    engines on different devices which make the same HTML elements look different
    on each device. Can't they all come to the same conclusion about how HTML elements
    should look?
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中使你的应用程序看起来良好可能会令人沮丧。引入更多浏览器会加剧这个问题。许多浏览器在不同的设备上都有独特的渲染引擎，这使得相同的 HTML 元素在每个设备上看起来都不同。难道他们不能就
    HTML 元素的样式达成一致吗？
- en: Developers and designers often use a CSS file called `normalize.css` ([http://necolas.github.io/normalize.css/](http://necolas.github.io/normalize.css/)).
    This style sheet styles HTML elements so that they all look similar on different
    browsers and devices. It cuts down on the guesswork when you are concerned about
    how a page will look.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者和设计师经常使用一个名为 `normalize.css` 的 CSS 文件（[http://necolas.github.io/normalize.css/](http://necolas.github.io/normalize.css/)）。这个样式表为
    HTML 元素设置样式，使它们在不同浏览器和设备上看起来相似。当你关心页面外观时，这减少了猜测的工作量。
- en: The `normalize.css` file style is typically inserted as the first style sheet
    in the HTML document head. Any changes you make to your website's style will then
    be made after the normalize rules are applied, and are less likely to be overridden.
    Some CSS frameworks like Twitter Bootstrap, already incorporate `normalize.css`
    in their style sheets.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`normalize.css` 文件样式通常作为HTML文档头部的第一个样式表插入。你对网站样式所做的任何更改都将在此应用normalize规则之后进行，并且不太可能被覆盖。一些CSS框架，如Twitter
    Bootstrap，已经在其样式表中集成了`normalize.css`。'
- en: Organizing your CSS
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组织你的CSS
- en: As previously discussed in the list of things not to do with your styles, the
    greatest offenders involve using higher selector specificity than needed, and
    treating the style sheet like a junk drawer. By organizing your style sheet properly,
    you can cut down on both of these offenders, and make your application easier
    to style and maintain. Let's go through a few best practices.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，在“不要用你的样式做这些事情”的列表中，最大的违规行为包括使用比所需更高的选择器特定性，以及将样式表当作一个杂物抽屉。通过正确组织你的样式表，你可以减少这两种违规行为，并使你的应用程序更容易进行样式化和维护。让我们来探讨一些最佳实践。
- en: Organizing by selector specificity
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 按选择器特定性组织
- en: Current trends in web design call for CSS selectors to be organized from the
    lowest selector specificity to the highest. All your `div`, `h1`, and `p` tags
    might be put at the top of the page in your style sheet. After the appearances
    of the HTML elements are defined, you add various classes, selectors, and pseudo-selectors
    to describe how those would change the appearance of your elements. Finally, you
    could assign the appearances of an individual element by referencing its `id`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 当前网页设计趋势要求CSS选择器从最低的选择器特定性组织到最高的。你所有的`div`、`h1`和`p`标签可能都放在样式表的最顶部。在定义HTML元素的外观之后，你可以添加各种类、选择器和伪选择器来描述它们如何改变元素的外观。最后，你可以通过引用其`id`来分配单个元素的外观。
- en: Group by module
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 按模块分组
- en: Applications written with the ArcGIS JavaScript API can easily be organized
    by dijits, so why not arrange the style sheets by dijits as well? You can define
    the styling of individual dijits in the application after you define the style
    of your page. You can separate your CSS into logical sections using `/* comments
    */` between the module and dijit styles.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 使用ArcGIS JavaScript API编写的应用程序可以很容易地按小部件组织，那么为什么不按小部件组织样式表呢？你可以在定义页面样式之后，在应用程序中定义单个小部件的样式。你可以使用`/*
    comments */`在模块和小部件样式之间分隔你的CSS为逻辑部分。
- en: A class for everything
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一切皆可分类
- en: 'A common practice when organizing code for selector specificity is to assign
    CSS classes as much as possible. Your map dijits may have an `.open` class that
    sets the `width` and `height`. The same dijit may have a `.closed` class that
    hides the dijit. Using the `dojo/dom-class` module, you can add, remove, and toggle
    the classes you define, however you want:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在组织选择器特定性代码时，一个常见的做法是尽可能多地分配CSS类。你的地图小部件可能有一个`.open`类来设置`width`和`height`。同一个小部件可能有一个`.closed`类来隐藏小部件。使用`dojo/dom-class`模块，你可以按任何方式添加、删除和切换你定义的类：
- en: '[PRE3]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Using descriptive classes makes it easier to see what your application is doing,
    especially when you look at the page source. Descriptive classes are easier to
    reference in your style sheet.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 使用描述性类可以使你更容易看到你的应用程序正在做什么，尤其是在查看页面源代码时。描述性类在你的样式表中更容易引用。
- en: Media queries
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 媒体查询
- en: Media queries provide effective ways to create custom looks and responsive grids
    on different screens. You can change the look of your site depending on the media
    type (screen, print, projector, and so on), the screen width, and even the pixel
    depth (retina displays versus standard desktop screens).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 媒体查询提供了在不同屏幕上创建自定义外观和响应式网格的有效方法。你可以根据媒体类型（屏幕、打印、投影仪等）、屏幕宽度和甚至像素深度（视网膜显示屏与标准桌面屏幕）来改变你网站的外观。
- en: One thing to consider when organizing your code is that media queries should
    be placed after normal selectors. You can then take advantage of the last in wins
    principal, and use the same selectors to show different results when the screen
    size changes. I've been guilty of not paying attention to where I placed my media
    queries, and wasted time troubleshooting why my transitions weren't occurring.
    Only later did I find, in the mess of CSS, where I had applied a rule after my
    media query that cancelled the effect.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在组织代码时，有一件事需要考虑的是，媒体查询应该放在正常选择器之后。这样，你可以利用“后入先得”的原则，当屏幕尺寸变化时，使用相同的选择器显示不同的结果。我曾经犯过没有注意我的媒体查询放置位置的错误，浪费了时间排查为什么我的过渡效果没有发生。后来我才发现在CSS的混乱中，我在媒体查询之后应用了一条规则，这取消了效果。
- en: Positioning your map
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定位你的地图
- en: We can't always rely on other frameworks and style sheets to properly position
    our maps. Sometimes, we have to get our hands dirty with CSS and do it ourselves.
    We'll go through some styling scenarios for our maps, and look at what CSS rules
    we need to apply to the map element to position it properly. All examples assume
    that you're creating a map on a `div` element with the ID of "map".
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不能总是依赖其他框架和样式表来正确定位我们的地图。有时候，我们必须自己动手用CSS来做。我们将讨论一些地图的样式场景，并查看我们需要应用到地图元素上的CSS规则以正确定位它。所有示例都假设你正在创建一个ID为"map"的`div`元素上的地图。
- en: The fixed-width map
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 固定宽度的地图
- en: 'By default, a map is created with a specific width and height. The width and
    height can be any non-negative number, from a whole screen, to a narrow column.
    If a height is not assigned, a default `height` of `400px` is assigned to the
    map element. You can see a simple, non-responsive CSS style for the map here:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，地图会创建一个特定的宽度和高度。宽度和高度可以是任何非负数，从全屏到狭窄的列。如果没有指定高度，地图元素将分配一个默认的`height`为`400px`。你可以在以下位置看到地图的简单、非响应式CSS样式：
- en: '[PRE4]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Stretching the map to fullscreen
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将地图拉伸到全屏
- en: 'Sometimes, your map is more than just an important piece of the page. Sometimes,
    the map needs to take up the whole page. That is what this full screen size represents.
    This style works, assuming that the HTML and body tags have a width and height
    of `100%` as well. This full screen style can also be assigned to a map that is
    supposed to fill `100%` of the area in another element:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，你的地图不仅仅是页面上的一个重要部分。有时候，地图需要占据整个页面。这就是全屏尺寸所代表的含义。假设HTML和body标签的宽度和高度也是`100%`，这种样式是可行的。这种全屏样式也可以分配给应该填充另一个元素`100%`区域的地图：
- en: '[PRE5]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Floating the map to the side
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将地图浮动到侧面
- en: 'Sometimes you don''t want a full map. Sometimes you just want a small map on
    the side of the screen, showing the location of whatever content it''s sharing
    the page with. You can then float the content off to the side. Floating an element
    to the right or the left lets other content fill in around it. This technique
    is typically used with photos and text, where the text flows around the photo.
    It works for a map as well:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候你不需要全图。有时候你只需要在屏幕的一侧显示一个小地图，显示与它共享页面的内容的地理位置。然后你可以将内容浮动到一边。将元素浮动到右边或左边可以让其他内容填充在其周围。这种技术通常用于照片和文本，其中文本围绕照片流动。这也适用于地图：
- en: '[PRE6]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Positioning the map top and center
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定位地图顶部和居中
- en: 'Sometimes you need to center your map in your layout. You have some text, and
    you just want the map to line up nicely in the middle. With this centering trick,
    you can horizontally center any block type element on a page. Here, you set the
    position to relative, and you assign a right and left margin of auto. The browser
    will automatically assign an equal number to the right and left margin, essentially
    centering it. But remember, this must be performed on a block element (like the
    map) with relative positioning. Remove any of these criteria, and the trick doesn''t
    work, as shown in the following code:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候你需要将地图在你的布局中居中。你有一些文本，你只想让地图在中间整齐排列。使用这个居中技巧，你可以水平居中页面上的任何块级元素。在这里，你设置位置为相对，并分配一个自动的左右边距。浏览器会自动将相同的数值分配给左右边距，从而实现居中。但请记住，这必须在具有相对定位的块级元素（如地图）上执行。移除这些条件中的任何一个，这个技巧就不起作用，如下面的代码所示：
- en: '[PRE7]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Covering most of the page with the map
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用地图覆盖页面的大部分区域
- en: If you need an almost full page effect, where you need to leave room for a title
    bar or a column to the right or left, you can use absolute positioning to stretch
    the map. Absolute positioning takes the element outside of the normal layout,
    and lets you position it wherever you want.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要一个几乎满页的效果，需要为标题栏或左侧或右侧的列留出空间，你可以使用绝对定位来拉伸地图。绝对定位将元素移出正常布局，并允许你将其定位在任何你想要的位置。
- en: Once you assign absolute positioning to the map, you can use the top, bottom,
    left, and right values to stretch the map out. By assigning a value of `0` to
    the `bottom`, you're telling the browser to set the bottom edge of the element
    at the bottom of the page. By assigning a value of `40px` to the `top`, you are
    telling the browser to assign the top of the map element 40 pixels from the top
    of the page. By assigning both left and right values, you are stretching the map
    element out in both directions.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你为地图分配了绝对定位，你可以使用 top、bottom、left 和 right 值来拉伸地图。将 `bottom` 的值设置为 `0`，告诉浏览器将元素的底部边缘设置为页面底部。将
    `top` 的值设置为 `40px`，告诉浏览器将地图元素的顶部设置为页面顶部下方 40 像素处。通过分配左右两个值，你将地图元素在两个方向上拉伸。
- en: 'As a caveat, remember that absolutely positioned elements escape the bounds
    of their location, and will be positioned either on the whole page, or inside
    the first parent element that has relative positioning:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 作为注意事项，请记住，绝对定位的元素会超出其位置范围，将位于整个页面内，或者位于具有相对定位的第一个父元素内：
- en: '[PRE8]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Centering a map of known width and height
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 居中已知宽度和高度的地图
- en: 'Sometimes, you need to put your map in the center of the page. You want to
    create a modal effect, where the map is centered both vertically and horizontally,
    kind of like a modal dialog. If you know the width and height of the map, you
    can pull this off easily. You assign absolute positioning to the map, and set
    the `top` and `left` edges of the map at `50%` of the page. This won''t look right
    at first, until you assign the margins. The trick is to assign negative top and
    left margins, with values that are half the height and width of the map elements,
    respectively. What you get is a vertically and horizontally centered map that
    also works in older browsers:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，你需要将地图放在页面中心。你想要创建一个模态效果，地图在垂直和水平方向上居中，有点像模态对话框。如果你知道地图的宽度和高度，你可以轻松实现这一点。你将绝对定位分配给地图，并将地图的
    `top` 和 `left` 边缘设置为页面宽度的 `50%`。一开始这看起来可能不太对，直到你分配了边距。技巧是分配负的 top 和 left 边距，其值分别为地图元素高度和宽度的一半。你得到的是一个垂直和水平居中的地图，同时在旧浏览器中也有效：
- en: '[PRE9]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Centering a map of unknown width and height
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 居中未知宽度和高度的地图
- en: If you implement percentages or other units into the styling of your map, you
    may not know at any one time how wide the map is. We can use absolute positioning
    to put the upper left corner of the element in the middle of the page, but how
    can the element be shifted so that it sits in the middle of the page? There is
    an easy way to center the map both vertically and horizontally when the width
    and height is variable. It requires a CSS3 transformation.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将百分比或其他单位应用于地图的样式，你可能不知道在任何时候地图有多宽。我们可以使用绝对定位将元素的左上角放置在页面中间，但如何将元素移动，使其位于页面中间？当宽度和高度可变时，有一个简单的方法来垂直和水平居中地图。这需要
    CSS3 变换。
- en: 'We can translate or move the element in any direction by using the CSS3 transformation.
    The first value moves it to the right or left, while the second value moves it
    up and down. Negative values signify translation to the left and up. We can apply
    width and height in pixels, or we can apply a percentage of the element''s width
    to center it:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用 CSS3 变换来在任何方向上翻译或移动元素。第一个值将其移动到右侧或左侧，而第二个值将其移动到上方或下方。负值表示向左和向上移动。我们可以用像素为单位应用宽度和高度，或者我们可以应用元素宽度的百分比来居中元素：
- en: '[PRE10]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Tip
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: CSS3 transformations are available in most modern browsers, with some slightly
    older ones requiring vendor prefixes. Internet Explorer 8 and earlier do not support
    these transformations. See [http://caniuse.com/#feat=transforms2d](http://caniuse.com/#feat=transforms2d)
    for more details.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: CSS3 变换在大多数现代浏览器中可用，一些稍微旧一点的浏览器需要供应商前缀。Internet Explorer 8 及更早版本不支持这些变换。有关更多详细信息，请参阅
    [http://caniuse.com/#feat=transforms2d](http://caniuse.com/#feat=transforms2d)。
- en: Troubleshooting
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 故障排除
- en: With the rising popularity of web development tools for browsers, your browser
    is the best tool for troubleshooting styling issues on a page. Mozilla Firefox
    initially had the most advanced inspection tools using a free third-party add-on
    called **Firebug**. Later, Chrome released its own development tools, while Firefox
    and Internet Explorer eventually built and improved their own. All modern desktop
    browsers now provide advanced JavaScript and CSS information for desktop and mobile
    devices.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 随着浏览器端Web开发工具的日益流行，您的浏览器是排查页面样式问题的最佳工具。Mozilla Firefox最初拥有最先进的检查工具，这些工具是通过一个名为**Firebug**的免费第三方插件实现的。后来，Chrome发布了自己的开发工具，而Firefox和Internet
    Explorer最终也构建并改进了自己的工具。现在所有现代桌面浏览器都为桌面和移动设备提供了高级JavaScript和CSS信息。
- en: Most browser developer tools can be opened using the same keyboard shortcuts.
    Internet Explorer responds to the *F12* key as far back as version 8\. Chrome
    and Firefox also respond to *F12*, with the keyboard combination of *Ctrl* + *Shift*
    + *I* (*Cmd* + *Opt* + *I* for a Mac).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数浏览器开发者工具都可以使用相同的键盘快捷键打开。Internet Explorer从版本8开始就响应*F12*键。Chrome和Firefox也响应*F12*，键盘组合为*Ctrl*
    + *Shift* + *I*（Mac上的*Cmd* + *Opt* + *I*）。
- en: Responsive resizers
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 响应式调整大小
- en: All desktop browsers shrink and grow as you maximize and shrink them. Many modern
    browsers, however, have extra features and add-ons that can help you test your
    applications as if they were mobile browsers. The latest editions of the Firefox
    Developer Edition have a **Responsive Design View** that resizes your browser
    depending on the mobile device. It can rotate the screen when the user rotates
    their phone, and even triggers touch events. Google Chrome has a **Device Mode**
    that lets you select from popular smartphones and tablets, and can simulate slower
    network speeds, as well as pretending to be a mobile browser by changing the user
    agent it sends on requests. The latest versions of Internet Explorer also have
    these in their developer tools.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 所有桌面浏览器在最大化或缩小它们时都会缩小和增长。然而，许多现代浏览器都有额外的功能和插件，可以帮助您测试应用程序，就像它们是移动浏览器一样。Firefox开发者版的最新版本有一个**响应式设计视图**，可以根据移动设备调整浏览器的大小。当用户旋转手机时，它可以旋转屏幕，甚至触发触摸事件。Google
    Chrome有一个**设备模式**，允许您从流行的智能手机和平板电脑中选择，可以模拟较慢的网络速度，并通过更改请求中发送的用户代理来模拟移动浏览器。最新版本的Internet
    Explorer在其开发者工具中也提供了这些功能。
- en: Now that we've reviewed the tools we can use to test our layouts, let's look
    at the tools the ArcGIS JavaScript API provides to lay out our applications.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经回顾了可以用来测试布局的工具，让我们看看ArcGIS JavaScript API为我们提供布局应用程序的工具。
- en: Dojo layout
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Dojo布局
- en: Dojo uses its own framework to control the layout of the application. Dojo's
    layouts can be found in the `dijit/layout` modules. These modules can be used
    to implement full page applications with all their features implemented, by using
    the Dojo framework.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Dojo使用自己的框架来控制应用程序的布局。Dojo的布局可以在`dijit/layout`模块中找到。这些模块可以通过使用Dojo框架来实现具有所有功能的完整页面应用程序。
- en: Dijits created with `dijit/layout` modules can be encoded directly in the HTML.
    These are encoded using the `data-dojo-type` attribute. Properties for these,
    including styling and behavior, are encoded in the `data-dojo-props` attribute
    of the element. These dijits can be loaded from HTML by using the `dojo/parser`
    module to parse the HTML.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`dijit/layout`模块创建的Dijits可以直接编码在HTML中。这些编码使用`data-dojo-type`属性。包括样式和行为在内的属性编码在元素的`data-dojo-props`属性中。这些Dijits可以通过使用`dojo/parser`模块解析HTML来从HTML中加载。
- en: Tip
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Applications where the `dijit/layout` elements are loaded through HTML often
    break when `dojo/parser` doesn't have access to a `layout` module. Make sure that
    all the modules for the layout elements used in the HTML have been loaded in the
    `require()` or `define()` statement that calls the `parse()` method of the `dojo/parser`
    module. Check for misspellings, either in the module loaders, or in the HTML `data-dojo-type`
    attributes.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在通过HTML加载`dijit/layout`元素的应用中，如果`dojo/parser`无法访问`layout`模块，通常会出错。请确保所有用于HTML中的布局元素模块都已加载在调用`dojo/parser`模块的`parse()`方法的`require()`或`define()`语句中。检查模块加载器或HTML中的`data-dojo-type`属性中的拼写错误。
- en: 'Layouts created with the `dijit/layout` modules can be divided into two classifications:
    **Containers** and **Panes**. Pane elements are generally located inside containers.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`dijit/layout`模块创建的布局可以分为两类：**容器**和**面板**。面板元素通常位于容器内部。
- en: Containers
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 容器
- en: Containers are parent elements that control the position and visibility of child
    panes assigned within them. Containers come in a variety of shapes and functions.
    Some can show multiple panes at once, while others show one or a few at a time.
    In JavaScript, if you have access to the Container `dijit`, you can access the
    pane elements inside it by calling the container's `getChildren()` method.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 容器是父元素，用于控制其中分配的子窗格的位置和可见性。容器有多种形状和功能。有些可以同时显示多个窗格，而有些则一次显示一个或几个。在JavaScript中，如果您可以访问`dijit`容器，您可以通过调用容器的`getChildren()`方法来访问其内部的窗格元素。
- en: Let's look at a few of the common containers.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一些常见的容器。
- en: LayoutContainer
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: LayoutContainer
- en: The `LayoutContainer` allow other panes to be positioned around a central pane.
    The center pane in a `LayoutContainer` is assigned a region attribute of center.
    Panes surrounding it are assigned region values of `top`, `bottom`, `right`, `left`,
    `leading`, or `trailing` to define their position in relation to the center pane.
    Multiple panes can have the same region attribute, such as two or three left panes.
    These will stack side by side to the left of the center pane.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`LayoutContainer`允许其他窗格围绕中心窗格进行定位。在`LayoutContainer`中的中心窗格被分配了一个中心区域属性。围绕它的窗格被分配了`top`、`bottom`、`right`、`left`、`leading`或`trailing`区域值来定义它们相对于中心窗格的位置。多个窗格可以具有相同的区域属性，例如两个或三个左侧窗格。这些窗格将并排堆叠在中心窗格的左侧。'
- en: BorderContainer
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: BorderContainer
- en: The `BorderContainer` is derived from the `LayoutContainer`. As the name implies,
    it adds borders to section off the different panes in the application. `BorderContainers`
    can also provide `livesplitters`, which are draggable elements that let the user
    resize panes as they see fit.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`BorderContainer`是从`LayoutContainer`派生出来的。正如其名称所暗示的，它为应用程序中的不同窗格添加了边框以分隔它们。`BorderContainers`还可以提供`livesplitters`，这些是可拖动的元素，允许用户根据需要调整窗格的大小。'
- en: AccordionContainer
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: AccordionContainer
- en: The `AccordionContainer` arrange and transition between panes using an accordion
    effectIn this arrangement, pane titles appear stacked on top of one another, and
    only one pane is visible at any time. The contents of the other panes are hidden
    by the accordion effect. When the user selects another pane within the `AccordionContainer`,
    the panes animate in a sliding motion, hiding the current pane and showing the
    selected pane.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`AccordionContainer`使用手风琴效果来排列和切换窗格。在这种安排中，窗格标题堆叠在一起，任何给定时间只有一个窗格可见。其他窗格的内容通过手风琴效果被隐藏。当用户在`AccordionContainer`中选择另一个窗格时，窗格将以滑动动画的方式切换，隐藏当前窗格并显示所选窗格。'
- en: TabContainer
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: TabContainer
- en: The `TabContainer` wi provides a tab-based organization of content. Tabs with
    the titles of the `ContentPane` enclosed describe the content, and clicking on
    those tabs removes the content visibility. The effect is similar to a Rolodex
    or a file folder, where you flip through tabs to view the content you need.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`TabContainer`提供了一个基于标签的内容组织。包含`ContentPane`标题的标签描述了内容，点击这些标签将移除内容的可见性。效果类似于旋转文件柜或文件夹，您可以通过翻动标签来查看所需的内容。'
- en: Panes
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 窗格
- en: Panes in the `dijit/layout` modules provide a container in your application
    in which to put user controls and widgets. You can write HTML content or add other
    dijits. Panes can be encoded in HTML, or created with JavaScript and attached
    to their parent container. Let's look at a couple of the panes available in Dojo
    using the ArcGIS JavaScript API.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`dijit/layout`模块中的窗格为您的应用程序提供了一个容器，用于放置用户控件和小部件。您可以编写HTML内容或添加其他dijit。窗格可以用HTML编码，或用JavaScript创建并附加到其父容器。让我们看看使用ArcGIS
    JavaScript API在Dojo中可用的几个窗格。'
- en: ContentPane
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ContentPane
- en: The `ContentPane` tile is the most common pane inserted in a container. It can
    be inserted as a pane inside all the other containers, with the exception of the
    `AccordionContainer`. On the surface, they appear to be glorified `div` elements
    that also track size and relationship to other dijits around them. But a `ContentPane`
    tile can also downloads and displays content from other web pages. Setting the
    `ContentPane` tile's `href` property will download and display another web page's
    HTML content in a single pane in your application.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`ContentPane`瓦片是在容器中插入的最常见的窗格。它可以作为除`AccordionContainer`之外所有其他容器中的窗格插入。表面上，它们看起来像是被赋予了跟踪大小和与其他dijit之间关系的`div`元素。但`ContentPane`瓦片还可以从其他网页下载并显示内容。设置`ContentPane`瓦片的`href`属性将在您的应用程序的单个窗格中下载并显示另一个网页的HTML内容。'
- en: AccordionPane
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: AccordionPane
- en: One or more `AccordionPane` panes are added within an `AccordionContainer` to
    display their content in a collapsible format. `AccordionPane` titles are stacked
    on top of each other and, as you click the titles, the content slides into view,
    covering the previously open `AccordionPane`. An `AccordionPane` otherwise exhibits
    the same functional behavior as a `ContentPane`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在`AccordionContainer`内添加一个或多个`AccordionPane`面板，以以可折叠的格式显示其内容。`AccordionPane`标题堆叠在一起，当你点击标题时，内容滑入视图，覆盖之前打开的`AccordionPane`。否则，`AccordionPane`表现出与`ContentPane`相同的职能行为。
- en: Now that we've reviewed how the Dojo framework handles the application layout,
    let's look at using an alternative style framework.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经回顾了Dojo框架如何处理应用程序布局，让我们看看如何使用替代样式框架。
- en: Bootstrap
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Bootstrap
- en: If you're looking for an alternative to Dojo's way of laying things out, you
    might consider Bootstrap. Bootstrap is a popular styling framework originally
    created by developers at Twitter. The story goes that the developers needed a
    way to release websites quickly, so they drafted a set of style sheets as a starting
    point for their projects. The styling templates proved very popular because they
    were easy to use and met the needs of most web developers. The template, originally
    named Twitter Blueprint, was later released in August 2011 as Bootstrap.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在寻找Dojo布局方式的替代方案，你可能需要考虑Bootstrap。Bootstrap是一个由Twitter的开发者最初创建的流行样式框架。据说，开发者需要一种快速发布网站的方法，因此他们制定了一套样式表作为项目起点。这些样式模板因其易用性和满足大多数网络开发者的需求而非常受欢迎。最初命名为Twitter
    Blueprint的模板后来于2011年8月作为Bootstrap发布。
- en: Bootstrap provides developers with responsive design styles that work well on
    both desktop and mobile browsers. Responsive grids can be fine-tuned to give you
    multi-column layouts that collapse to smaller sizes in smaller browser windows.
    Bootstrap provides stylish looking form elements, and buttons big enough for fat
    fingers on phone browsers. The framework provides easy to understand CSS classes,
    and the documentation and style sheets provide guidance on how to use the framework.
    From picture icons that can be understood across language barriers, to JavaScript
    plugins that create modal dialogs, tabs, carousels, and other elements we're used
    to on websites. Entire applications can be created using Bootstrap.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap为开发者提供了适用于桌面和移动浏览器的响应式设计样式。响应式网格可以根据需要调整，以提供多列布局，在较小的浏览器窗口中折叠成更小的尺寸。Bootstrap提供了看起来很时尚的表单元素和足够大的按钮，以便在手机浏览器上方便操作。该框架提供了易于理解的CSS类，文档和样式表提供了如何使用框架的指导。从可以跨越语言障碍理解的照片图标，到创建模态对话框、标签页、轮播图和其他我们在网站上习惯使用的元素，JavaScript插件都可以实现。可以使用Bootstrap创建整个应用程序。
- en: While Bootstrap styling doesn't require JavaScript libraries, all of the JavaScript
    plugins require jQuery to run. That is not very helpful for those of us using
    Dojo, but we do have an alternative.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Bootstrap样式不需要JavaScript库，但所有JavaScript插件都需要jQuery才能运行。这对那些使用Dojo的人来说并不太有帮助，但我们确实有一个替代方案。
- en: ESRI-Bootstrap
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ESRI-Bootstrap
- en: Combining Bootstrap's ease of use and the compatibility with the ArcGIS JavaScript
    API, ESRI created ESRI-Bootstrap library ([https://github.com/Esri/bootstrap-map-js](https://github.com/Esri/bootstrap-map-js)).
    The style framework resizes maps and other elements just like Bootstrap, while
    many of the elements retain the same look and feel of a Bootstrap site. Dialogs
    don't run off the screen and elements respond to both mouse clicks and touches.
    Finally, ESRI Bootstrap can be used with either a combination of Dojo and jQuery,
    or Dojo alone.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 结合Bootstrap的易用性和与ArcGIS JavaScript API的兼容性，ESRI创建了ESRI-Bootstrap库([https://github.com/Esri/bootstrap-map-js](https://github.com/Esri/bootstrap-map-js))。该样式框架可以像Bootstrap一样调整地图和其他元素的大小，同时许多元素保留了Bootstrap网站相同的视觉和感觉。对话框不会跑出屏幕，元素对鼠标点击和触摸都有响应。最后，ESRI
    Bootstrap可以与Dojo和jQuery的组合或仅使用Dojo一起使用。
- en: We are going to add ESRI-Bootstrap on top of our Y2K application. You can use
    the `Dojo/jQuery` application we wrote in [Chapter 7](ch07.html "Chapter 7. Plays
    Well with Others"), *Plays Well with Others*. We're going to use a pure Dojo application
    written in parallel with jQuery to show how you can add ESRI-Bootstrap to an application
    without jQuery.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在我们的Y2K应用程序上添加ESRI-Bootstrap。你可以使用我们在[第7章](ch07.html "第7章。与其他人相处融洽")中编写的`Dojo/jQuery`应用程序，*与其他人相处融洽*。我们将使用与jQuery并行编写的纯Dojo应用程序来展示如何在不使用jQuery的情况下将ESRI-Bootstrap添加到应用程序中。
- en: Restyling our app
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重新设计我们的应用程序
- en: We recently let our intern create multiple copies of our application using other
    frameworks. While they were busy doing that, we decided to write the update using
    just the ArcGIS JavaScript API. The Y2K society checked out our app and approved
    our changes, but that wasn't all they had to say.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最近让我们的实习生使用其他框架创建了我们的应用程序的多个副本。当他们忙于做这件事的时候，我们决定只用ArcGIS JavaScript API编写更新。Y2K协会检查了我们的应用程序并批准了我们的更改，但这并不是他们要说的全部。
- en: When we met with the Y2K society board, we found a critic in a new member of
    the board. They thought it looked okay, but it needed a more modern look. When
    asked for details, they showed us websites on their tablet that they thought looked
    good. All the sites we were shown had one thing in common, they were all built
    using Bootstrap. He managed to convince others on the board that our app needed
    to embrace this new style.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们与Y2K协会董事会会面时，我们发现董事会的新成员中有一位批评者。他们认为看起来还可以，但需要更现代的外观。当被要求详细说明时，他们向我们展示了他们认为看起来不错的网站。我们看到的所有网站都有一个共同点，它们都是使用Bootstrap构建的。他设法说服董事会上的其他人，我们的应用程序需要采用这种新风格。
- en: Going back to the drawing board, we looked at what ESRI had to offer. We decided
    to incorporate ESRI-Bootstrap into our application. It provides a modern feel.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 回到原点，我们研究了ESRI能提供什么。我们决定将ESRI-Bootstrap整合到我们的应用程序中。它提供了现代感。
- en: Adding ESRI-Bootstrap to our app
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将ESRI-Bootstrap添加到我们的应用程序中
- en: Let's start by adding references to ESRI-Bootstrap to our application. The ESRI-Bootstrap
    **Getting Started** page tells us to download a ZIP file of the latest version
    published on GitHub. Click on the **Download ZIP** button on the right hand side
    of the GitHub page. Once downloaded, unzip the file.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先在我们的应用程序中添加对ESRI-Bootstrap的引用。ESRI-Bootstrap的**入门**页面告诉我们下载GitHub上发布的最新版本的ZIP文件。点击GitHub页面右侧的**下载ZIP**按钮。下载完成后，解压文件。
- en: We're primarily interested in the `bootstrapmap.js` and `bootstrapmap.css` files
    in the `src/js/` and `src/css/` folders, respectively. The rest of the files contain
    templates and samples that you can look at to see how they use Bootstrap with
    their maps. Copy these files into the `js` and `css` folders.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们主要对`src/js/`和`src/css/`文件夹中的`bootstrapmap.js`和`bootstrapmap.css`文件感兴趣。其余的文件包含模板和示例，您可以查看它们如何使用Bootstrap与地图结合。将这些文件复制到`js`和`css`文件夹中。
- en: 'Next, we''ll add the necessary references to the head tag of our `index.html`
    file. We can remove the `nihilo.css` external style sheet as we''re no longer
    using the Dojo widgets to lay out our application, and add the following:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将在`index.html`文件的头部标签中添加必要的引用。由于我们不再使用Dojo小部件来布局我们的应用程序，我们可以移除`nihilo.css`外部样式表，并添加以下内容：
- en: '[PRE11]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now that we have added the stylesheets, we need to add a reference to the Dojo
    version of bootstrap within our `dojoConfig` variable. The Dojo Bootstrap library,
    which covers features normally handled by jQuery, can be found at [https://github.com/xsokev/Dojo-Bootstrap](https://github.com/xsokev/Dojo-Bootstrap),
    but we''ll pull it from [https://rawgit.com](https://rawgit.com), which serves
    GitHub code directly. It should look as follows:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经添加了样式表，我们需要在`dojoConfig`变量中添加对Dojo版Bootstrap的引用。覆盖通常由jQuery处理的特性的Dojo
    Bootstrap库可以在[https://github.com/xsokev/Dojo-Bootstrap](https://github.com/xsokev/Dojo-Bootstrap)找到，但我们将从[https://rawgit.com](https://rawgit.com)拉取它，它直接提供GitHub代码。它应该看起来像这样：
- en: '[PRE12]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now that the head has been taken care of, it's time to overhaul the body.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 现在头部已经处理好了，是时候重新设计主体了。
- en: Bootstrapping our HTML
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动我们的HTML
- en: Since ESRI-Bootstrap provides plenty of CSS styling and JavaScript, most of
    the work involves overhauling our HTML. We can start by removing the references
    to the Dojo layout widgets in the body of our main HTML page. You can remove the
    `class="nihilo"` from the `body` element, the `dijit/layout/BorderContainer` from
    the `#mainwindow div`, and all the `dijit/layout/ContentPane` references.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 由于ESRI-Bootstrap提供了大量的CSS样式和JavaScript，大部分工作涉及重新设计我们的HTML。我们可以从移除主HTML页面主体中的Dojo布局小部件引用开始。您可以移除`body`元素的`class="nihilo"`，`#mainwindow
    div`中的`dijit/layout/BorderContainer`，以及所有`dijit/layout/ContentPane`引用。
- en: Replacing the header with a navbar
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用导航栏替换标题
- en: Our first job is to replace the header in the application. There are many ways
    you could start off a page like this but we'll use the Bootstrap `NavBar` in place
    of the header since the initial layout of the page was a full page app with no
    scrolling, You can see several examples of how to implement a `navbar` in HTML
    at [http://getbootstrap.com](http://getbootstrap.com).
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一项任务是替换应用程序中的头部。你可以用很多种方式开始这样的页面，但我们将使用 Bootstrap `NavBar` 替换头部，因为页面的初始布局是一个没有滚动的全页应用程序。你可以在
    [http://getbootstrap.com](http://getbootstrap.com) 看到如何实现 HTML 中的 `navbar` 的几个示例。
- en: We'll replace the header `div` with a `nav` element with the classes of `navbar`
    and `navbar-default` in the header. We'll add a `div` with the class of `container-fluid`
    inside that, since the size and appearance of its contents varies with different
    browsers. We'll add two `div` elements to the `container-fluid` div element. The
    first will have a class of `navbar-header`, and the second will have the classes
    of collapse and `navbar-collapse`.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在头部中使用具有 `navbar` 和 `navbar-default` 类的 `nav` 元素替换 `header` `div`。我们将在其中添加一个具有
    `container-fluid` 类的 `div`，因为其内容的大小和外观会随着不同的浏览器而变化。我们将在 `container-fluid` div
    元素中添加两个 `div` 元素。第一个将具有 `navbar-header` 类，第二个将具有折叠和 `navbar-collapse` 类。
- en: We'll add a button to the `navbar-header` that will only appear when the browser
    is narrow enough. The button will have the classes of `navbar-toggle` and `collapsed`,
    plus a `data-toggle` attribute of collapse. This button will be floated to the
    far right when visible. The title of the map will go in a span next to the toggle
    button. This span will be given a class of `navbar-brand`.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在 `navbar-header` 中添加一个按钮，该按钮仅在浏览器足够窄时才会出现。该按钮将具有 `navbar-toggle` 和 `collapsed`
    类，以及 `data-toggle` 属性为折叠。当可见时，该按钮将浮动到最右侧。地图的标题将放在与切换按钮相邻的 `span` 中。这个 `span` 将被赋予
    `navbar-brand` 类。
- en: 'We''ll add the button that shows our `Census` dijit to the `navbar-collapse`
    div element. We''ll add the `btn` classes (to make it a button), `btn-default`
    (to make it a default color), and `navbar-btn` (to make the button style fit in
    the `navbar`). When we are done, the HTML should look as follows:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把显示我们的 `Census` 小部件的按钮添加到 `navbar-collapse` div 元素中。我们将添加 `btn` 类（使其成为一个按钮），`btn-default`（使其具有默认颜色），以及
    `navbar-btn`（使按钮样式适合 `navbar`）。完成之后，HTML 应该看起来如下所示：
- en: '[PRE13]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Rearranging the map
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 重新排列地图
- en: 'Now that the header has been redesigned, it''s time to look at the rest of
    the page. We will want to pull the census widget location out of the map in order
    to incorporate a Bootstrap modal dialog. We can move the footer inside the map
    to make up the space lost in previous versions. We can define the map and related
    items below the header, as follows:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 现在头部已经重新设计，是时候看看页面的其余部分了。我们将想要将人口普查小部件的位置从地图中提取出来，以便包含一个 Bootstrap 模态对话框。我们可以将页脚移动到地图内部以填补之前版本中丢失的空间。我们可以在头部下方定义地图和相关项目，如下所示：
- en: '[PRE14]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Restyling our app
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重新设计我们的应用程序
- en: We'll need to manually restyle the page since we're removing all traces of Dojo's
    layout system. We can remove most of the styling references since they'll clash
    with the Bootstrap style. We'll keep the basic styling for the HTML and body tags,
    since they make the application a fullpage app. We'll also keep the styling for
    the `D3.js` graphs, but we can delete the rest of the styles.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们正在移除 Dojo 布局系统的所有痕迹，我们需要手动重新设计页面。我们可以移除大部分样式引用，因为它们将与 Bootstrap 样式冲突。我们将保留
    HTML 和 body 标签的基本样式，因为它们使应用程序成为一个全页应用程序。我们还将保留 `D3.js` 图表的样式，但可以删除其余的样式。
- en: 'We need to stretch the map from top to bottom and from end to end. If we don''t,
    the map will be limited in its width and height. We can use absolute positioning
    to stretch the map across the page. We''ll use the almost full page style we talked
    about earlier. Since the toolbar on the page is 50 pixels high (which you''ll
    see when you experiment with the app), we''ll set the top of the map to be `50px`
    from the top. The bottom, right, and left sides can positioned on the edges of
    the screen:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要将地图从上到下、从左到右拉伸。如果不这样做，地图的宽度和高度将受到限制。我们可以使用绝对定位将地图拉伸到页面。我们将使用之前提到的几乎全页样式。由于页面上的工具栏高度为
    50 像素（当你尝试应用程序时你会看到），我们将地图的顶部设置为从顶部 `50px`。底部、右侧和左侧可以定位在屏幕的边缘：
- en: '[PRE15]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The other item we''ll need to restyle is our footer element. We can position
    it at the bottom of the page, using the same technique we used on the map. We
    can also make the background semi-transparent, for a nice effect:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要重新设计另一个元素，即页脚元素。我们可以使用与地图相同的技巧将其定位在页面底部。我们还可以使背景半透明，以达到很好的效果：
- en: '[PRE16]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Once these styles have been applied, we can see a working example of our map.
    You can see an example of the map in the following picture:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦应用了这些样式，我们就可以看到我们地图的工作示例。您可以在以下图片中看到地图的示例：
- en: '![Restyling our app](img/6459OT_08_01.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![重新设计我们的应用](img/6459OT_08_01.jpg)'
- en: Making our Census dijit modal
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使我们的Census dijit模态化
- en: Now that our page has been transformed into a Bootstrap application, we need
    to add the same to our `Census` dijit. We need to tap into Bootstrap's modal widgets
    to imitate the effect of our floating dialog.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将页面转换成了Bootstrap应用，我们需要将相同的样式应用到我们的`Census` dijit上。我们需要利用Bootstrap的模态小部件来模仿浮动对话框的效果。
- en: 'Open the `Census.html` file in the `js/templates/` folder. In the base `div`
    element, add the classes `modal` and `fade`. The `modal` class tells Bootstrap
    that this will be a modal dialog, while `fade` describes how the element will
    hide and show. We''ll also add a data-backdrop attribute to the element and set
    it to `static`. This will create the generic modal dialog that keeps the rest
    of the page from being clicked while it''s open. In this case, we''ll abandon
    the idea that closing the widget will turn off the map''s click events:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在`js/templates/`文件夹中打开`Census.html`文件。在基础`div`元素中，添加`modal`和`fade`类。`modal`类告诉Bootstrap这将是一个模态对话框，而`fade`描述了元素如何隐藏和显示。我们还将向元素添加一个`data-backdrop`属性并将其设置为`static`。这将创建一个通用的模态对话框，在打开时阻止点击页面的其余部分。在这种情况下，我们将放弃关闭小部件将关闭地图点击事件的想法：
- en: '[PRE17]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We'll add several more `div` elements to the base `div` to define the modal
    and the heading. One level inside our modal class, we'll add a `div` element with
    the classes of `modal-dialog` and `modal-sm`. The `modal-dialog` class defines
    the style for the modal, while `modal-sm` makes the modal smaller. Removing `modal-sm`
    creates a dialog that stretches across larger screens.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在基础`div`中添加几个更多的`div`元素来定义模态和标题。在我们的模态类内部的一个级别，我们将添加一个具有`modal-dialog`和`modal-sm`类的`div`元素。`modal-dialog`类定义了模态的样式，而`modal-sm`使模态更小。移除`modal-sm`将创建一个跨越更大屏幕的对话框。
- en: 'We''ll create a `div` with the class `modal-content` in the `div` with the
    `modal-dialog` class, and two `div` elements inside that, with the classes of
    `modal-header` and `modal-body`, respectively. We''ll add our closing button and
    our title to the `modal-header` div. We''ll add the text and select dropdowns
    for the rest of our dijit to the `modal-body` div:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在具有`modal-dialog`类的`div`中创建一个具有`modal-content`类的`div`，并在其中添加两个`div`元素，分别具有`modal-header`和`modal-body`类。我们将把我们的关闭按钮和标题添加到`modal-header`
    div中。我们将把剩余的`dijit`文本和选择下拉列表添加到`modal-body` div中：
- en: '[PRE18]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We''ll replace the `dijit` closing event with Bootstrap''s modal closing event
    in the `modal-header` div. We''ll add a class of `close` to the button, and a
    `data-dismiss` attribute of modal. Most Bootstrap examples also include ARIA attributes
    to handle screen readers and other accessibility tools, so we''ll add an `aria-hidden`
    value of `true` so that screen-readers do not read aloud the *X* that we place
    in that. For the title, we''ll surround the `Census` data in a span with the class
    of `modal-title`. It should look like the following code:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`modal-header` div中将`dijit`关闭事件替换为Bootstrap的模态关闭事件。我们将向按钮添加一个`close`类，并添加一个模态的`data-dismiss`属性。大多数Bootstrap示例还包含ARIA属性来处理屏幕阅读器和其他辅助工具，因此我们将添加一个`aria-hidden`值为`true`，这样屏幕阅读器就不会大声朗读我们放置在那里的*X*。对于标题，我们将用具有`modal-title`类的`span`包围`Census`数据。它应该看起来像以下代码：
- en: '[PRE19]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We''ll add our description paragraph to the `modal-body` div and format the
    select elements so that they appear as form elements. We''ll add the class `form-group`
    to the `div` elements that surround our select dropdowns. This lines up the content
    and adds proper spacing and formatting. We''ll replace the `b` tags with `label`
    tags, and add the `control-label` class. We''ll add the `form-control` class to
    the select element. This stretches the `select` dropdown across the width of the
    dialog. Our HTML should look as follows:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把我们的描述段落添加到`modal-body` div中，并格式化选择元素，使它们看起来像表单元素。我们将向围绕我们的选择下拉列表的`div`元素添加`form-group`类。这将使内容对齐并添加适当的间距和格式。我们将用`label`标签替换`b`标签，并添加`control-label`类。我们将向选择元素添加`form-control`类。这将使`select`下拉列表扩展到对话框的宽度。我们的HTML应该如下所示：
- en: '[PRE20]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We''ll add a `div` with the class of `modal-footer` to our `modal-body` div.
    Here, we can add another button to dismiss the dialog, just in case the user doesn''t
    notice the *x* in the upper corner. We''ll format the dismiss button by adding
    the classes `btn` and `btn-default`, affecting the shape and color, in that order.
    We''ll also add our `data-dismiss` attribute and set it equal to `modal`. It should
    look as follows:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`modal-body` div中添加一个带有`modal-footer`类的`div`。在这里，我们可以添加另一个按钮来关闭对话框，以防用户没有注意到上角的小`x`。我们将通过添加`btn`和`btn-default`类来格式化关闭按钮，这将影响形状和颜色，顺序如下。我们还将添加`data-dismiss`属性并将其设置为`modal`。它应该看起来如下：
- en: '[PRE21]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Once the widget HTML is properly formatted, the application should look like
    the following image. Notice the dropdowns and buttons with wide spacing, which
    makes it easier to click on them on a smaller mobile device:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦正确格式化小部件HTML，应用程序应该看起来像以下图像。注意下拉菜单和宽间距的按钮，这使得在较小的移动设备上点击它们更容易：
- en: '![Making our Census dijit modal](img/6459OT_08_02.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![制作我们的Census dijit模式](img/6459OT_08_02.jpg)'
- en: Now that the application is functionally complete, we can modify parts of it
    to create our own look and feel. Remember, Bootstrap was meant to be a starting
    point for creating a website. It doesn't have to be the end result. We can still
    change colors and other features to make the application our own.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 现在应用程序功能已经完善，我们可以修改其部分以创建我们自己的外观和感觉。记住，Bootstrap旨在作为创建网站的起点。它不一定是最终结果。我们仍然可以更改颜色和其他功能，使应用程序成为我们自己的。
- en: Summary
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we've discussed the different ways in which you can style your
    ArcGIS JavaScript API application. We looked at how CSS works, how rules affect
    each other, and how your browser decides which CSS rules to follow. We looked
    at the Dojo layout modules, and how those can be used to handle the appearance
    and functionality of your application. We also looked at ESRI-Bootstrap, a version
    of Bootstrap that can run with the ArcGIS JavaScript API. Finally, we added the
    ESRI-Bootstrap look to our application.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了您可以使用不同方式来设置您的ArcGIS JavaScript API应用程序的样式。我们探讨了CSS的工作原理，规则如何相互影响，以及浏览器如何决定遵循哪些CSS规则。我们探讨了Dojo布局模块，以及如何使用这些模块来处理应用程序的外观和功能。我们还探讨了ESRI-Bootstrap，这是一个可以与ArcGIS
    JavaScript API一起运行的Bootstrap版本。最后，我们将ESRI-Bootstrap的外观添加到我们的应用程序中。
- en: In the next chapter, we'll be going mobile. We'll create a mobile application
    that works on most tablets and phone browsers.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将转向移动端。我们将创建一个适用于大多数平板电脑和手机浏览器的移动应用程序。
