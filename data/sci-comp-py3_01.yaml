- en: Chapter 1. Getting Started
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一章 入门
- en: In this chapter, we will give a brief overview of the principal syntactical
    elements of Python. Readers who have just started learning programming are guided
    through the book in this chapter. Every topic is presented here in a *how-to*
    way and will be explained later in the book in a deeper conceptual manner and
    will also be enriched with many applications and extensions.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将简要介绍Python的主要语法元素。对于刚开始学习编程的读者，我们将通过本书引导他们。每个主题在这里都以“如何做”的方式呈现，并在本书的后续部分以更深入的概念方式解释，并丰富许多应用和扩展。
- en: Readers who are already familiar with another programming language will come
    across, in this chapter, the Python way of doing classical language constructs.
    It offers them a quick start to Python programming.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 对于已经熟悉其他编程语言的读者，在本章中，他们会遇到Python实现经典语言结构的Python方式。这为他们提供了Python编程的快速入门。
- en: Both types of readers are encouraged to take this chapter as a brief guideline
    when zigzagging through the book. However, before we start we have to make sure
    that everything is in place and you have the correct version of Python installed
    together with the main modules for Scientific Computing and tools, such as a good
    editor and a shell, which helps in code developing and testing.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 鼓励两种类型的读者将本章作为在书中穿梭时的简要指南。然而，在我们开始之前，我们必须确保一切就绪，并且您已经安装了正确的Python版本，以及科学计算的主要模块和工具，例如一个好的编辑器和Shell，这些工具有助于代码开发和测试。
- en: Read the following section, even if you already have access to a computer with
    Python installed. You might want to adjust things to have a working environment
    conforming to the presentation in this book.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 即使您已经可以访问安装了Python的计算机，也请阅读以下章节。您可能需要调整一些设置，以便拥有一个符合本书展示的演示环境的工作环境。
- en: Installation and configuration instructions
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和配置说明
- en: Before diving into the subject of the book you should have all the relevant
    tools installed on your computer. We will give you some advice and recommend tools
    that you might want to use. We only describe public domain and free tools.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入本书的主题之前，您应该在您的计算机上安装所有相关的工具。我们将为您提供一些建议，并推荐您可能想要使用的工具。我们只描述公共领域和免费工具。
- en: Installation
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装
- en: There are currently two major versions of Python; the *2.x* branch and the new
    *3.x* branch. There are language incompatibilities between these branches and
    one has to be aware of which one to use. This book is based on the *3.x* branch,
    considering the language up to release *3.5*.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 目前Python有两个主要版本；*2.x*分支和新的*3.x*分支。这两个分支之间存在语言不兼容性，必须注意使用哪个版本。本书基于*3.x*分支，考虑到语言版本至*3.5*。
- en: 'For this book you need to install the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本书，您需要安装以下内容：
- en: 'The interpreter: Python *3.5* (or later)'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解释器：Python *3.5*（或更高版本）
- en: 'The modules for scientific computing: SciPy with NumPy'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 科学计算模块：SciPy与NumPy
- en: 'The module for graphical representation of mathematical results: matplotlib'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数学结果图形表示模块：matplotlib
- en: 'The shell: IPython'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Shell：IPython
- en: 'A Python related editor: Spyder (refer to the following *Figure 1.1*, *Spyder*),
    Geany'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个与Python相关的编辑器：Spyder（参见图1.1，*Spyder*），Geany
- en: 'The installation of these is eased by the so-called distribution packages.
    We recommend that you use Anaconda. The default screen of Spyder consists of an
    editor window on left, a console window in the lower right corner which gives
    access to an IPython shell and a help window in the upper right corner as shown
    in the following figure:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这些软件的安装可以通过所谓的发行版软件包来简化。我们建议您使用Anaconda。Spyder的默认界面包括左侧的编辑窗口、位于右下角的控制台窗口，该窗口可以访问IPython
    shell，以及位于右上角的帮助窗口，如图所示：
- en: '![Installation](img/spyder.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![安装](img/spyder.jpg)'
- en: 'Figure 1.1: The default screen of Spyder consists of an editor window on left,
    a console window in the lower right corner which gives access to an IPython shell
    and a help window in the upper right corner.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.1：Spyder的默认界面包括左侧的编辑窗口，右下角的控制台窗口，该窗口可以访问IPython shell，以及右上角的帮助窗口。
- en: Anaconda
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Anaconda
- en: Even if you have Python pre-installed on your computer, we recommend that you
    create your personal Python environment that allows you to work without the risk
    of accidentally affecting the software on which your computer's functionality
    might depend. With a virtual environment, such as Anaconda, you are free to change
    language versions and install packages without the unintended side-effects.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 即使您的计算机上已经预装了Python，我们也建议您创建个人Python环境，这样您就可以在没有风险的情况下工作，不会意外影响可能依赖于计算机功能的软件。使用虚拟环境，如Anaconda，您可以自由更改语言版本和安装包，而不会产生意外的副作用。
- en: If the worst happens and you screw things up totally, just delete the Anaconda
    directory and start again. Running the Anaconda installer will install Python,
    a Python development environment and editor (Spyder), the shell IPython, and the
    most important packages for numerical computations, for example SciPy, NumPy,
    and matplotlib.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果情况最糟，您完全搞砸了，只需删除Anaconda目录并重新开始。运行Anaconda安装程序将安装Python、Python开发环境和编辑器（Spyder）、shell
    IPython以及数值计算最重要的包，例如SciPy、NumPy和matplotlib。
- en: You can install additional packages with `conda install` within your virtual
    environment created by Anaconda (refer for official documentation from[[2]](apa.html
    "Appendix . References")).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在Anaconda创建的虚拟环境中使用`conda install`安装额外的包（有关官方文档，请参阅[[2]](apa.html "附录。参考文献")）。
- en: Configuration
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置
- en: 'Most Python codes will be collected in files. We recommend that you use the
    following header in all your Python files:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数Python代码都将收集在文件中。我们建议您在所有Python文件中使用以下标题：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: With this, you make sure that all standard modules and functions used in this
    book, such as SciPy, are imported. Without this step, most of the examples in
    the book would raise errors. Many editors, such as Spyder, provide the possibility
    to create a template for your files. Look for this feature and put the preceding header
    into a template.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种方法，您可以确保本书中使用的所有标准模块和函数，例如SciPy，都被导入。如果不进行此步骤，本书中的大多数示例都会引发错误。许多编辑器，如Spyder，都提供创建文件模板的可能性。查找此功能并将前面的标题放入模板中。
- en: Python Shell
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python Shell
- en: 'The Python shell is good but not optimal for interactive scripting. We therefore
    recommend using IPython instead (refer to [[26]](apa.html "Appendix . References")
    for the official documentation). IPython can be started in different ways:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Python shell虽然不错，但不是交互式脚本的理想选择。因此，我们建议使用IPython（有关官方文档，请参阅[[26]](apa.html "附录。参考文献")）。IPython可以通过不同的方式启动：
- en: In a terminal shell by running the following command:`ipython`
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在终端shell中，通过运行以下命令`ipython`。
- en: By directly clicking on an icon called Jupyter QT Console
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过直接点击名为Jupyter QT Console的图标
- en: '![Python Shell](img/jupyter.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![Python Shell](img/jupyter.jpg)'
- en: When working with Spyder you should use an IPython console (refer to *Figure
    1.1*, *Spyder*).
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当使用Spyder时，应使用IPython控制台（请参阅*图1.1*，*Spyder*）。
- en: Executing scripts
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 执行脚本
- en: You often want to execute the contents of a file. Depending on the location
    of the file on your computer, it is necessary to navigate to the correct location
    before executing the contents of a file.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 您经常需要执行文件内容。根据文件在您计算机上的位置，在执行文件内容之前，您可能需要导航到正确的位置。
- en: Use the command `cd` in IPython in order to move to the directory where your
    file is located.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在IPython中使用`cd`命令来移动到文件所在的目录。
- en: To execute the contents of a file named `myfile.py`, just run the following
    command in the IPython shell
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要执行名为`myfile.py`的文件内容，只需在IPython shell中运行以下命令
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Getting Help
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取帮助
- en: 'Here are some tips on how to use IPython:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些关于如何使用IPython的提示：
- en: To get help on an object, just type `?` after the object's name and then `return`.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要获取对象的帮助，只需在对象名称后输入`?`然后按回车。
- en: Use the arrow keys to reuse the last executed commands.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用箭头键重复使用最后执行的命令。
- en: You may use the *Tab* key for completion (that is, you write the first letter
    of a variable or method and IPython shows you a menu with all the possible completions).
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以使用*Tab*键进行自动完成（即，您写下变量或方法的第一个字母，IPython就会显示一个包含所有可能完成项的菜单）。
- en: Use *Ctrl+D* to quit.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用*Ctrl+D*退出。
- en: Use IPython's magic functions. You can find a list and explanations by applying 
    `%magic`  on the command prompt.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用IPython的魔术函数。您可以通过在命令提示符中应用`%magic`来找到列表和解释。
- en: Tip
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: You can find out more about IPython in its online documentation, [[15]](apa.html
    "Appendix . References")*.*
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在IPython的在线文档中找到更多关于IPython的信息，[[15]](apa.html "附录。参考文献")*.*
- en: Jupyter – Python notebook
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Jupyter – Python笔记本
- en: The Jupyter notebook is a fantastic tool for demonstrating your work. Students
    might want to use it to make and document homework and exercises and teachers
    can prepare lectures with it, even slides and web pages.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Jupyter 笔记本是演示您工作的绝佳工具。学生可能想用它来制作和记录作业和练习，教师也可以用它准备讲座，甚至制作幻灯片和网页。
- en: 'If you have installed Python via Anaconda, you already have everything for
    Jupyter in place. You can invoke the notebook by running the following command
    in the terminal window:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您通过 Anaconda 安装了 Python，您已经拥有了 Jupyter 所需的一切。您可以在终端窗口中运行以下命令来调用笔记本：
- en: '[PRE2]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: A browser window will open and you can interact with Python through your web
    browser.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 将会打开一个浏览器窗口，您可以通过您的网络浏览器与 Python 进行交互。
- en: Program and program flow
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 程序和程序流程
- en: 'A program is a sequence of statements that are executed in a top-down order.
    This linear execution order has some important exceptions:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 程序是一系列按自顶向下顺序执行的语句。这种线性执行顺序有一些重要的例外：
- en: There might be a conditional execution of alternative groups of statements (blocks),
    which we refer to as branching.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能会执行条件语句的替代语句组（块），我们称之为分支。
- en: There are blocks that are executed repetitively, which is called looping (refer
    to the following *Figure 1.2*, *Program flow*).
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存在重复执行的代码块，这被称为循环（参见图 1.2，程序流程）。
- en: There are function calls that are references to another piece of code, which
    is executed before the main program flow is resumed. A function call breaks the
    linear execution and pauses the execution of a program unit while it passes the
    control to another unit-a function. When this gets completed, its control is returned
    to the calling unit.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存在函数调用，它们是对其他代码段的引用，在主程序流程恢复之前执行。函数调用中断线性执行并暂停程序单元的执行，同时将控制权传递给另一个单元——一个函数。当它完成时，其控制权返回到调用单元。
- en: '![Program and program flow](img/Program_Flow.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![程序和程序流程](img/Program_Flow.jpg)'
- en: 'Figure 1.2: Program flow'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2：程序流程
- en: 'Python uses a special syntax to mark blocks of statements: a keyword, a colon,
    and an indented sequence of statements, which belong to the block (refer to the
    following *Figure 1.3*,  *Block command*).'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Python 使用特殊语法来标记语句块：一个关键字，一个冒号，以及属于该块的缩进语句序列（参见图 1.3，块命令）。
- en: '![Program and program flow](img/Example_of_a_block_command.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![程序和程序流程](img/Example_of_a_block_command.jpg)'
- en: 'Figure 1.3: Block command'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.3：块命令
- en: Comments
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注释
- en: 'If a line in a program contains the symbol `#`, everything following on the
    same line is considered as a comment:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果程序中的一行包含符号 `#`，则该行后面的所有内容都被视为注释：
- en: '[PRE3]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Line joining
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 行连接
- en: A backslash `\` at the end of the line marks the next line as a continuation
    line, that is, explicit line joining. If the line ends before all the parentheses
    are closed, the following line will automatically be recognized as a continuation
    line, that is, implicit line joining.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 行尾的反斜杠 `\` 标记下一行为续行，即显式行连接。如果行在所有括号关闭之前结束，则下一行将自动被识别为续行，即隐式行连接。
- en: Basic types
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本类型
- en: Let's go over the basic data types that you will encounter in Python.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下您将在 Python 中遇到的几种基本数据类型。
- en: Numbers
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数字
- en: 'A number may be an integer, a real number, or a complex number. The usual operations
    are:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 一个数字可能是一个整数、一个实数或一个复数。通常的操作有：
- en: addition and subtraction, `+` and `-`
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加法和减法，`+` 和 `-`
- en: multiplication and division, `*` and `/`
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 乘法和除法，`*` 和 `/`
- en: power, `**`
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 幂，`**`
- en: 'Here is an example:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个例子：
- en: '[PRE4]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**The symbol for complex numbers**'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**复数的符号**'
- en: '`j`  is a symbol to denote the imaginary part of a complex number. It is a
    syntactic element and should not be confused with multiplication by a variable.
    More on complex numbers can be found in section *Numeric Types* of [Chapter 2](ch02.html
    "Chapter 2. Variables and Basic Types"), *Variables and Basic Types*.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`j` 是表示复数虚部的符号。它是一个语法元素，不应与变量的乘法混淆。有关复数的更多信息，请参阅第 2 章的 *数值类型* 部分，*变量和基本类型*。'
- en: Strings
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字符串
- en: 'Strings are sequences of characters, enclosed by simple or double quotes:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串是由简单或双引号包围的字符序列：
- en: '[PRE5]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You can also use triple quotes for strings that have multiple lines:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用三引号来表示多行字符串：
- en: '[PRE6]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Variables
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变量
- en: 'A variable is a reference to an object. An object may have several references.
    One uses the assignment operator `=` to assign a value to a variable:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 变量是对对象的引用。一个对象可能有多个引用。使用赋值运算符 `=` 将值赋给变量：
- en: '[PRE7]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The value of a variable can be displayed by the `print` function:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 变量的值可以通过 `print` 函数显示：
- en: '[PRE8]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Lists
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列表
- en: 'Lists are a very useful construction and one of the basic types in Python.
    A Python list is an ordered list of objects enclosed by square brackets. One can
    access the elements of a list using zero-based indexes inside square brackets:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 列表是一个非常有用的构造，也是 Python 中的基本类型之一。Python 列表是由方括号包围的有序对象列表。可以使用方括号内的零基于索引访问列表的元素：
- en: '[PRE9]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Indexing of the elements starts at zero. One can put objects of any type inside
    a list, even other lists. Some basic list functions are as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 元素的索引从零开始。可以在列表中放置任何类型的对象，甚至其他列表。以下是一些基本的列表函数：
- en: '`list(range(n))}` creates a list with `n` elements, starting with zero:'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list(range(n))` 创建一个包含 `n` 个元素且从零开始的列表：'
- en: '[PRE10]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '`len` gives the length of a list:'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`len` 返回列表的长度：'
- en: '[PRE11]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '`append` is used to append an element to a list:'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`append` 用于向列表中添加一个元素：'
- en: '[PRE12]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Operations on lists
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列表操作
- en: 'The operator `+` concatenates two lists:'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运算符 `+` 连接两个列表：
- en: '[PRE13]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'As one might expect, multiplying a list with an integer concatenates the list
    with itself several times:'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如预期的那样，将列表与整数相乘会将列表与自身连接多次：
- en: '`n*L` is equivalent to making *n* additions.'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`n*L` 等同于进行 *n* 次加法操作。'
- en: '[PRE14]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Boolean expressions
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 布尔表达式
- en: 'A Boolean expression is an expression that may have the value `True` or `False`.
    Some common operators that yield conditional expressions are as follow:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔表达式是一个可能具有 `True` 或 `False` 值的表达式。一些常见的产生条件表达式的运算符如下：
- en: Equal, `==`
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 等于，`==`
- en: Not equal, `!=`
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不等于，`!=`
- en: Less than, Less than or equal to, `<` , `<=`
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小于，小于等于，`<`，`<=`
- en: Greater than, Greater than or equal to, `>` , `>=`
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大于，大于等于，`>`，`>=`
- en: 'One combines different Boolean values with `or` and `and`. The keyword `not`
    , gives the logical negation of the expression that follows. Comparisons can be
    chained so that, for example, `x < y < z` is equivalent to `x < y and y < z`.
    The difference is that `y` is only evaluated once in the first example. In both
    cases, `z` is not evaluated at all when the first condition, `x < y`, evaluates
    to `False`:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `or` 和 `and` 将不同的布尔值组合起来。关键字 `not` 给出后续表达式的逻辑否定。比较可以链式使用，例如，`x < y < z`
    等价于 `x < y and y < z`。区别在于第一个例子中 `y` 只被评估一次。在两种情况下，当第一个条件 `x < y` 评估为 `False`
    时，`z` 都不会被评估：
- en: '[PRE15]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Note
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Precedence rules**'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '**优先级规则**'
- en: The `<`, `>`, `<=`, `>=`, `!=`, and `==` operators have higher precedence than
    `not.`  The operators `and`, `or` have the lowest precedence. Operators with higher
    precedence rules are evaluated before those with lower.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`<`、`>`、`<=`、`>=`、`!=` 和 `==` 运算符的优先级高于 `not`。运算符 `and`、`or` 的优先级最低。优先级高的运算符先于优先级低的运算符进行评估。'
- en: Repeating statements with loops
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用循环重复语句
- en: 'Loops are used to repetitively execute a sequence of statements while changing
    a variable from iteration to iteration. This variable is called the index variable.
    It is successively assigned to the elements of a list, (refer to [Chapter 9](ch09.html
    "Chapter 9. Iterating"), *Iterating)* :'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 循环用于在每次迭代中重复执行一系列语句，同时改变一个变量。这个变量称为索引变量。它依次赋值给列表的元素，（参考[第 9 章](ch09.html "第
    9 章。迭代")，*迭代)*：
- en: '[PRE16]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The part to be repeated in the `for` loop has to be properly indented:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`for` 循环中需要重复的部分必须正确缩进：'
- en: '[PRE17]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Repeating a task
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 循环重复任务
- en: 'One typical use of a `for` loop is to repeat a certain task a fixed number
    of times:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`for` 循环的一个典型用途是重复执行固定次数的任务：'
- en: '[PRE18]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Break and else
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Break 和 else
- en: 'The `for` statement has two important keywords: `break` and `else`. `break`
    quits the `for` loop even if the list we are iterating is not exhausted:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`for` 语句有两个重要的关键字：`break` 和 `else`。`break` 即使迭代的列表未耗尽也会退出 `for` 循环：'
- en: '[PRE19]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The finalizing `else` checks whether the `for` loop was `broken` with the `break`
    keyword. If it was not broken, the block following the `else` keyword is executed:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的 `else` 语句检查 `for` 循环是否被 `break` 关键字中断。如果没有被中断，则执行 `else` 关键字后面的代码块：
- en: '[PRE20]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Conditional statements
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 条件语句
- en: 'This section covers how to use conditions for branching, breaking, or otherwise
    controlling your code. A conditional statement delimits a block that will be executed
    if the condition is true. An optional block, started with the keyword `else` 
    will be executed if the condition is not fulfilled (refer to *Figure 1.3*, *Block
    command* diagram). We demonstrate this by printing `|x|`, the absolute value of
    *x*:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 本节介绍如何使用条件进行分支、中断或其他方式控制代码。条件语句定义了一个在条件为真时将执行的代码块。一个可选的块，以关键字 `else` 开头，将在条件不满足时执行（参见图
    1.3，*块命令* 图）。我们通过打印 `|x|`，即 *x* 的绝对值来演示这一点：
- en: '![Conditional statements](img/B05511_01_02.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![条件语句](img/B05511_01_02.jpg)'
- en: 'The Python equivalent is as follows:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: Python 的等效操作如下：
- en: '[PRE21]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Any object can be tested for the truth value, for use in an `if` or `while`
    statement. The rules for how the truth values are obtained are explained in section
    Boolean of [Chapter 2](ch02.html "Chapter 2. Variables and Basic Types"), *Variables
    and Basic Types*.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 任何对象都可以被测试其真值，用于 `if` 或 `while` 语句中。如何获得真值的规则在 [第二章](ch02.html "第二章。变量和基本类型")
    的布尔部分中解释，*变量和基本类型*。
- en: Encapsulating code with functions
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用函数封装代码
- en: 'Functions are useful for gathering similar pieces of code in one place. Consider
    the following mathematical function:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 函数对于将相似的代码片段集中在一起非常有用。考虑以下数学函数：
- en: '![Encapsulating code with functions](img/B05511_01_03-1.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![使用函数封装代码](img/B05511_01_03-1.jpg)'
- en: 'The Python equivalent is as follows:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: Python 的等效操作如下：
- en: '[PRE22]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: In Figure 1.4 *Anatomy of a function* the  elements of a function block are
    explained.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在图 1.4 “函数的解剖结构”中，解释了函数块中的元素。
- en: The keyword `def`   tells Python we are defining a function.
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关键字 `def` 告诉 Python 我们正在定义一个函数。
- en: '`f` is the name of the function.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`f` 是函数的名称。'
- en: '`x` is the argument, or input of the function.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x` 是函数的参数，或输入。'
- en: What is after `return` is called the output of the function.
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return` 之后的内容被称为函数的输出。'
- en: '![Encapsulating code with functions](img/Anatomy_of_a_function.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![使用函数封装代码](img/Anatomy_of_a_function.jpg)'
- en: 'Figure 1.4: Anatomy of a function'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.4：函数的解剖结构
- en: 'Once the function is defined, it can be called using the following code:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 函数定义后，可以使用以下代码调用它：
- en: '[PRE23]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Scripts and modules
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 脚本和模块
- en: 'A collection of statements in a file (which usually has a `py` extension),
    is called a script. Suppose we put the contents of the following code into a file
    named `smartscript.py`:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 文件中的语句集合（通常具有 `py` 扩展名）被称为脚本。假设我们将以下代码的内容放入一个名为 `smartscript.py` 的文件中：
- en: '[PRE24]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'In a Python or IPython shell, such a script can then be executed with the `exec`
    command after opening and reading the file. Written as a one-liner it reads:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 或 IPython shell 中，打开并读取文件后，可以使用 `exec` 命令执行这样的脚本。将其写为单行代码，它看起来是这样的：
- en: '[PRE25]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The IPython shell provides the magic command `%run` as a handy alternative
    way to execute a script:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: IPython shell 提供了魔法命令 `%run` 作为执行脚本的便捷替代方法：
- en: '[PRE26]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Simple modules - collecting functions
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简单模块 - 收集函数
- en: 'Often one collects functions in a script. This creates a module with additional
    Python functionality. To demonstrate this, we create a module by collecting functions
    in a single file, for example `smartfunctions.py`:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 通常会将函数收集在脚本中。这创建了一个具有额外 Python 功能的模块。为了演示这一点，我们通过在一个文件中收集函数来创建一个模块，例如 `smartfunctions.py`：
- en: '[PRE27]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: These functions can now be used by any external script or directly in the IPython
    environment.
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些函数现在可以被任何外部脚本或直接在 IPython 环境中使用。
- en: Functions within the module can depend on each other.
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块内的函数可以相互依赖。
- en: Grouping functions with a common theme or purpose gives modules that can be
    shared and used by others.
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将具有共同主题或目的的函数分组，可以创建可以共享和供他人使用的模块。
- en: Again, the command `exec(open('smartfunctions.py').read())` makes these functions
    available to your IPython shell (note that there is also the IPython magic function
    `run`). In Python terminology, one says that they are put into the actual namespace.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，命令 `exec(open('smartfunctions.py').read())` 使得这些函数可用于您的 IPython shell（注意，还有
    IPython 的魔法函数 `run`）。在 Python 术语中，可以说它们被放入实际的命名空间中。
- en: Using modules and namespaces
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用模块和命名空间
- en: 'Alternatively, the modules  can be imported by the command `import`. It creates
    a named namespace*.* The command `from` puts the functions into the general namespace:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，可以使用 `import` 命令导入模块。它创建一个命名命名空间。命令 `from` 将函数放入通用命名空间：
- en: '[PRE28]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Tip
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Import**'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '**导入**'
- en: The commands `import` and `from`  import the functions only once into the respective
    namespace. Changing the functions after the import has no effect for the current
    Python session. More on modules can be found in section *Modules* of [Chapter
    11](ch11.html "Chapter 11. Namespaces, Scopes, and Modules"), *Namespaces, Scopes
    and Modules.*
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 命令 `import` 和 `from` 只将函数一次性导入到相应的命名空间中。导入后更改函数对当前 Python 会话没有影响。关于模块的更多信息，请参阅第
    11 章*命名空间、作用域和模块*中的*模块*部分。[第 11 章](ch11.html "第 11 章。命名空间、作用域和模块")，*命名空间、作用域和模块*。
- en: Interpreter
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解释器
- en: 'The Python interpreter executes the following steps:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: Python 解释器执行以下步骤：
- en: First, run the syntax.
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，运行语法。
- en: Then execute the code line by line.
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后逐行执行代码。
- en: Code inside a function or class declaration is *not* executed (but checked for
    syntax).
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数或类声明内部的代码*不会*执行（但会检查语法）。
- en: '[PRE29]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: You can run the preceding program because there are no syntactical errors. You
    get an error only when you call the function `f`.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以运行前面的程序，因为没有语法错误。只有在调用函数 `f` 时才会出现错误。
- en: '[PRE30]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Summary
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we briefly addressed the main language elements of Python without
    going into detail. You should now be able to start playing with small pieces of
    code and to test different program constructs. All this is intended as an appetizer
    for the following chapters in which we will give you the details, examples, exercises,
    and more background information.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们简要介绍了 Python 的主要语言元素，而没有深入探讨。现在你应该能够开始尝试一些小段代码，并测试不同的程序结构。所有这些都是为了为以下章节做铺垫，在那些章节中，我们将提供详细信息、示例、练习以及更多背景信息。
