- en: Data Visualization and Prediction
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据可视化与预测
- en: Making predictions is usually precarious. However, there are methods that have
    been in use that provide some confidence in your results. Under Jupyter, we can
    use Python and/or R for predictions with readily available functionality.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 做预测通常是危险的。然而，已经有一些方法可以让你对结果充满信心。在 Jupyter 下，我们可以使用 Python 和/或 R 来进行预测，并且这些功能是现成的。
- en: Make a prediction using scikit-learn
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 scikit-learn 做预测
- en: scikit-learn is a machine learning toolset built using Python. Part of the package
    is supervised learning, where the sample data points have attributes that allow
    you to assign the data points into separate classes. We use an estimator that
    assigns a data point to a class and makes predictions as to other data points
    with similar attributes. In scikit-learn, an estimator provides two functions,
    `fit()` and `predict()`, providing mechanisms to classify data points and predict
    classes of other data points, respectively.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: scikit-learn 是一个基于 Python 构建的机器学习工具包。该包的一部分是监督学习，其中样本数据点具有属性，允许你将数据点分配到不同的类别中。我们使用一种估算器，它将数据点分配到一个类别，并对其他具有相似属性的数据点做出预测。在
    scikit-learn 中，估算器提供了两个函数，`fit()` 和 `predict()`，分别提供了分类数据点和预测其他数据点类别的机制。
- en: As an example, we will be using the housing data from [https://uci.edu/](https://uci.edu/) (I
    think this is data for the Boston area). There are a number of factors including
    a price factor.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 作为例子，我们将使用来自 [https://uci.edu/](https://uci.edu/) 的住房数据（我认为这些数据来自波士顿地区）。有许多因素，包括价格因素。
- en: 'We will take the following steps:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将采取以下步骤：
- en: We will break up the dataset into a training set and a test set
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将把数据集分成训练集和测试集
- en: From the training set, we will produce a model
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从训练集中，我们将生成一个模型
- en: We will then use the model against the test set and evaluate how well our model
    fits the actual data for predicting housing prices
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将使用该模型在测试集上进行评估，并验证我们的模型如何拟合实际数据以预测住房价格
- en: 'The attributes in the dataset (in corresponding order in our data frame) are:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 数据集中的属性（在我们的数据框中按相应顺序排列）为：
- en: '| **CRIM** | **per capita crime rate by town** |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| **CRIM** | **每个城镇的人均犯罪率** |'
- en: '| `ZN` | proportion of residential land zoned for lots over 25,000 sq.ft. |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| `ZN` | 住宅用地比例，规划为超过 25,000 平方英尺的地块 |'
- en: '| `INDUS` | proportion of non-retail business acres per town |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| `INDUS` | 每个城镇非零售商业用地的比例 |'
- en: '| `CHAS` | Charles River dummy variable (`= 1` if tract bounds river; `0` otherwise)
    |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| `CHAS` | 查尔斯河虚拟变量（`= 1` 如果地区边界为河流；否则为 `0`） |'
- en: '| `NOX` | nitric oxides concentration (parts per 10 million) |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| `NOX` | 氮氧化物浓度（每千万分之一） |'
- en: '| `RM` | average number of rooms per dwelling |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| `RM` | 每个住宅的平均房间数 |'
- en: '| `AGE` | proportion of owner-occupied units built prior to 1940 |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| `AGE` | 1940 年之前建造的自有住宅单元的比例 |'
- en: '| `DIS` | weighted distances to five Boston employment centers |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| `DIS` | 到波士顿五个就业中心的加权距离 |'
- en: '| `RAD` | index of accessibility to radial highways |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| `RAD` | 辐射高速公路的可达性指数 |'
- en: '| `TAX` | full-value property-tax rate per $10,000 |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| `TAX` | 每 $10,000 的全额财产税率 |'
- en: '| `PTRATIO` | pupil-teacher ratio by town |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| `PTRATIO` | 每个城镇的师生比例 |'
- en: '| `B` | *1000(Bk - 0.63)^2* where *Bk* is the proportion of black residents
    by town |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| `B` | *1000(Bk - 0.63)^2* 其中 *Bk* 是每个城镇的黑人居民比例 |'
- en: '| `LSTAT` | % lower status of the population |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| `LSTAT` | 低阶层人口的百分比 |'
- en: '| `MEDV` | Median value of owner-occupied homes in $1,000''s |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| `MEDV` | 自有住宅的中位数价值（单位：$1,000） |'
- en: 'The following coding is followed by a discussion of the algorithm used and
    results:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 以下的代码之后是对所使用的算法和结果的讨论：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The results of the `head()` function is the first few rows of the data frame:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`head()` 函数的结果是数据框的前几行：'
- en: '![](img/6b4abf3c-153f-4452-b502-fa92767d3ddb.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6b4abf3c-153f-4452-b502-fa92767d3ddb.png)'
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Similarly, the preceding `describe` statement gives us some quick statistics
    on the data frame:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，前面的 `describe` 语句为我们提供了一些数据框的快速统计信息：
- en: '![](img/8ec1918c-75cb-4643-992d-7dde81c07065.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8ec1918c-75cb-4643-992d-7dde81c07065.png)'
- en: 'When splitting up the dataset between training and test sets, we use random
    allocation between the two. This gives us an unbiased set of data to work with.
    However, in order for you to reproduce the results shown here, you need to use
    the same random seed/starting value. This is why the `random.seed()` call is made.
    In practice, you would forgo this method call:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当将数据集分割为训练集和测试集时，我们使用两者之间的随机分配。这为我们提供了一组无偏的数据进行处理。然而，为了让你能复现这里展示的结果，你需要使用相同的随机种子/初始值。这就是为什么要调用`random.seed()`的原因。在实践中，你可以省略这个方法调用：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Most of these are small numbers, except for a positive correlation with #6
    at 3.8 for the number of rooms and a negative correlation with #8 at -1.5 for
    the distance from the business center. It is interesting how people value being
    close to work so highly:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这些大多数是小数字，除了与第 6 项（房间数）有 3.8 的正相关，以及与第 8 项（从商业中心的距离）有 -1.5 的负相关。人们如此重视靠近工作地点的价值真是有趣：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'There is an MSE of 23, which seems very low in comparison to the size of the
    numbers being worked with. Now, let us graph our results to get a good visual
    of what is going on:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: MSE 为 23，相较于处理的数字大小来说，这个值似乎非常低。现在，让我们绘制结果图形，以便直观了解发生了什么：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Visually, we appear to have a good fit. Most of the data points are aligned
    with the axis drawn through. There are, as always, a few distinct outliers such
    as at *20*, *50*:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**从视觉上看，我们似乎有一个不错的拟合。大部分数据点都与通过的轴对齐。正如往常一样，也有一些明显的异常值，比如 *20*，*50*：'
- en: '![](img/be50e5ba-bd26-4f82-a0fe-0ad2ccad1861.png)![](img/8fae67be-da54-476d-ae7a-14bcd0a9605f.png)**
    **# Make a prediction using R'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/be50e5ba-bd26-4f82-a0fe-0ad2ccad1861.png)![](img/8fae67be-da54-476d-ae7a-14bcd0a9605f.png)**
    **# 使用 R 进行预测'
- en: We can perform the same analysis using R in a notebook. The functions are different
    for the different language, but the functionality is very close.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 R 在笔记本中执行相同的分析。不同语言的函数不同，但功能非常接近。
- en: 'We use the same algorithm:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用相同的算法：
- en: Load the dataset
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加载数据集
- en: Split the dataset into training and testing partitions
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将数据集划分为训练和测试分区
- en: Develop a model based on the training partition
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于训练分区开发一个模型
- en: Use the model to predict from the testing partition
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用模型从测试分区进行预测
- en: Compare predicted versus actual testing
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比较预测值与实际测试值
- en: 'The coding is as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 编码如下：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Make sure the dataset is in the right order for our modeling.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 确保数据集按正确顺序排列以便进行建模。
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The data display, shown as follows, plots every variable against every other
    variable in the dataset. I am looking to see if there are any nice 45 degree ''lines''
    showing great symmetry between the variables, with the idea that maybe we should
    remove one as the other suffices as a contributing factor. The interesting items
    are:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 数据显示如下，展示了每个变量与数据集中的其他变量的关系。我在查看是否有任何漂亮的 45 度“线”显示出变量之间的高度对称性，目的是看是否应该移除一个变量，因为另一个变量就足够作为一个贡献因子。有趣的项目是：
- en: '`CHAS`: Charles River access, but that is a binary value.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CHAS`：查尔斯河访问权限，但这是一个二值值。'
- en: '`LSTAT` (lower status population) and `MDEV` (price) have an inverse relationship—but
    price will not be a factor.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LSTAT`（低收入群体）和 `MDEV`（价格）有反向关系——但价格不会成为一个因素。'
- en: '`NOX` (smog) and `DIST` (distance to work) have an inverse relationship. I
    think we want that.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NOX`（烟雾）和 `DIST`（到工作地点的距离）有反向关系。我认为我们需要这个。'
- en: 'Otherwise, there doesn''t appear to be any relationship between the data items:'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 否则，数据项之间似乎没有任何关系：
- en: '![](img/7469f515-7daa-4354-a7e8-7d2f7bb836d2.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7469f515-7daa-4354-a7e8-7d2f7bb836d2.png)'
- en: 'We go about forcing the seed, as before, to be able to reproduce results. We
    then split the data into training and testing partitions made with the `createDataPartitions`
    function. We can then train our model and test the resultant model for validation:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们像之前一样强制设置随机种子，以便能够复现结果。然后，我们使用 `createDataPartitions` 函数将数据划分为训练和测试分区。接下来我们可以训练我们的模型并测试结果模型进行验证：
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'It is interesting that this model also picked up on a high premium for Charles
    River views affecting the price. Also, like that, this model provides `p-value`
    (good confidence in the model):'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，这个模型也发现查尔斯河景观对价格有高额溢价的影响。此外，这个模型还提供了 `p-value`（对模型有良好的信心）：
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'It looks like a pretty good correlation, very close to a 45 degree mapping.
    The exception is that the predicted values are a little higher than actuals:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 它看起来像是一个相当好的相关性，非常接近 45 度的映射。唯一的例外是预测值略高于实际值：
- en: '![](img/79ca2a39-3cb8-49c4-8a22-f54746e311af.png)** **# Interactive visualization'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/79ca2a39-3cb8-49c4-8a22-f54746e311af.png)** **# 互动式可视化'
- en: There is a Python package, Bokeh, that can be used to generate a figure in your
    notebook where the user can interact and change the figure.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个 Python 包，Bokeh，可以用来在你的笔记本中生成一个图形，用户可以互动并改变图形。
- en: In this example, I am using the same data from the histogram example later in
    this chapter (also included in the file set for this chapter) to display an interactive
    Bokeh histogram.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我使用了本章稍后直方图示例中的相同数据（也包含在本章的文件集中），以显示一个互动式的 Bokeh 直方图。
- en: The coding is as follows:**
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 编码如下：**
- en: '[PRE9]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**We can see the histogram displayed as follows. There is little being done
    automatically to clean up the graph, such as move counters around or the uninteresting
    axes labels. I assume there are options with the `Histogram` function that would
    allow further changes:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**我们可以看到如下所示的直方图。对于图表的清理，自动执行的操作较少，比如移动计数器或不重要的坐标轴标签。我猜测`Histogram`函数有选项可以进行进一步的更改：'
- en: '![](img/3a7b7992-570e-4e6b-9e4d-a709eca9e425.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3a7b7992-570e-4e6b-9e4d-a709eca9e425.png)'
- en: 'Notice the widgets across the top of the image:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 注意图像顶部的控件小部件：
- en: On the left side is a Bokeh icon
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 左侧是一个Bokeh图标
- en: 'On the right side are icons for:'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 右侧是以下图标：
- en: Moving the image to another portion of the screen
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将图像移动到屏幕的另一部分
- en: Magnifying
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 放大
- en: Resizing
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调整大小
- en: Wheel zoom-slide wheel to zoom in/out
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 滚轮缩放- 滚动滚轮进行放大/缩小
- en: Save the image to disk
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将图像保存到磁盘
- en: Refresh the image
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 刷新图像
- en: Interactive help on Bokeh functions**  **# Plotting using Plotly
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bokeh功能的交互式帮助**  **# 使用Plotly绘图
- en: Plotly is an interesting mix. It is a subscription website that provides significant
    data analysis graphing functionality. You can use the free version of the software,
    but you still need to log in with credentials to use it. The graphics functions
    are available in a variety of languages from Node.js to Python and the like.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Plotly是一个有趣的混合体。它是一个订阅网站，提供强大的数据分析图形功能。你可以使用该软件的免费版本，但仍需要使用凭证登录。图形功能支持多种语言，从Node.js到Python等。
- en: Further, the graphics generated are available in Plotly and in your local notebook.
    If you mark the graphic as public, then you can access it from the notebook, just
    like any other graphic over the internet. Similarly, as a web graphic, you can
    select from the display and save locally as needed.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，生成的图形可以在Plotly和本地笔记本中查看。如果你将图形标记为公开，那么就可以像其他互联网上的图形一样从笔记本中访问它。同样，作为网页图形，你可以从显示中选择并根据需要保存到本地。
- en: In this example, we use the voting histogram again, but using Plotly's capabilities.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们再次使用投票直方图，但这次使用的是Plotly的功能。
- en: 'The script becomes the following:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本如下：
- en: '[PRE10]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'I think this is one of the nicer renderings that I have seen for a histogram
    using the out-of-the-box options/settings. We have the same histogram we had seen
    previously, just displayed using more eye-appealing attributes:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为这是我见过的使用开箱即用的选项/设置绘制的直方图中最漂亮的一种。我们看到了之前看到的相同直方图，只是采用了更具视觉吸引力的属性：
- en: '![](img/c6e195ed-27c8-4579-be22-306541091ae2.png)** **# Creating a human density
    map'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/c6e195ed-27c8-4579-be22-306541091ae2.png)** **# 创建人类密度图'
- en: I had originally planned on producing a worldwide human density map, but the
    graphics available don't allow for setting the color of each country. So, I built
    a density map for the United States.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我原本计划制作一个全球人类密度图，但现有的图形不支持设置每个国家的颜色。因此，我构建了一个美国的密度图。
- en: 'The algorithm is:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 算法是：
- en: Obtain graphic shapes for each of the states.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取每个州的图形形状。
- en: Obtain the density for each state.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取每个州的密度。
- en: Decide on a color range and apply the lowest density to one end of the range
    and the highest to the other end.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 决定颜色范围，并将最低密度应用于范围的一端，最高密度应用于另一端。
- en: 'For each state:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于每个状态：
- en: Determine it's density
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定它的密度
- en: Lookup that density value in the range and select a color
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找该密度值在范围中的位置并选择颜色
- en: Draw the state
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绘制状态
- en: This is coded with the following (comments embedded as the code proceeds):**
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码如下（代码进行时嵌入了注释）：**
- en: '[PRE11]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '**We see a color-coded density map in the following figure. I am not sure why
    Minnesota and Wisconsin did not match up with the data (they show no color for
    the density in the map). The data file looks correct and does appear to map to
    the image points.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**我们在下图中看到了一个颜色编码的密度图。我不确定为什么明尼苏达州和威斯康星州与数据不匹配（它们在地图上显示没有颜色）。数据文件看起来是正确的，并且确实映射到图像点上。'
- en: 'The packages used in this example would need to be installed, as they are not
    part of the standard set issued:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例中使用的包需要安装，因为它们不是标准包的一部分：
- en: '![](img/8de833df-ebec-462b-a03a-5aac1fe1a03b.png)**  **# Draw a histogram of
    social data'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/8de833df-ebec-462b-a03a-5aac1fe1a03b.png)**  **# 绘制社会数据的直方图'
- en: 'There are a wide variety of social sites that produce datasets. In this example,
    we will gather one of the datasets and produce a histogram from the data. The
    specific dataset is the voting behavior on WIKI from [https://snap.stanford.edu/data/wiki-Vote.html](https://snap.stanford.edu/data/wiki-Vote.html).
    Each data item shows user number `N` voted for user number `X`. So, we produce
    some statistics in a histogram to analyze voting behavior by:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 有各种各样的社交网站会生成数据集。在这个示例中，我们将收集其中一个数据集并从数据中生成一个直方图。具体的数据集是来自[https://snap.stanford.edu/data/wiki-Vote.html](https://snap.stanford.edu/data/wiki-Vote.html)的WIKI投票行为数据。每一项数据展示了用户编号`N`为用户编号`X`投票。因此，我们通过生成直方图来分析投票行为，方法如下：
- en: Gathering all of the voting that took place
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 收集所有发生的投票
- en: 'For each vote:'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每一票：
- en: Increment a counter that says who voted
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增加一个计数器，记录谁投了票
- en: Increment a counter that says who was voted for
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增加一个计数器，记录谁被投票
- en: Massage the data so we can display it in two histograms
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对数据进行处理，以便我们可以将其显示在两个直方图中
- en: The coding is as follows:**
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 代码如下：**
- en: '[PRE12]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '**Python will automatically assign the first column as the index into the table,
    regardless of whether the index is re-used (as is this case). You can see in the
    `describe()` results only the `ToNodeId` column is mentioned:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**Python会自动将第一列指定为表格的索引，不管索引是否被重用（如本例所示）。你可以在`describe()`的结果中看到，只有`ToNodeId`列被提到：'
- en: '[PRE13]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Next, we produce grouped totals by the number of votes by a person and number
    of votes for a person. I assume there is a built-in function that would do this
    more nicely, but I did not find it:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们根据每个人的投票数量和每个人收到的投票数量来生成分组总计。我认为应该有一个内建函数可以更好地完成这个任务，但我没有找到：
- en: '[PRE14]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We can already see some big numbers in there, like `743`:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经可以看到其中一些较大的数字，比如`743`：
- en: '[PRE15]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We see the following plot, with the now familiar display of votes by users.
    I think this is one of the plainer layouts I have seen:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到以下图表，展示了用户投票的熟悉布局。我认为这是我见过的最简洁的布局之一：
- en: '![](img/df3b9b68-3e71-4e4d-a94d-a1d679d28f24.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/df3b9b68-3e71-4e4d-a94d-a1d679d28f24.png)'
- en: 'Now we make a histogram of the references made for a user with the following
    code:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们通过以下代码生成一个用户的引用直方图：
- en: '[PRE16]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We see the votes by users plot as follows. I hadn''t expected such lopsided
    results: only a few people vote a lot and only a few people got significant votes:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到如下的用户投票图表。我没想到结果会如此失衡：只有少数人投了很多票，只有少数人收到了大量的投票：
- en: '![](img/4e1121bc-a31a-4b70-ba40-41c9620f8ed8.png)**  **# Plotting 3D data'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/4e1121bc-a31a-4b70-ba40-41c9620f8ed8.png)**  **# 绘制三维数据'
- en: Many of the data analysis packages (R, Python, and so on) have significant data
    visualization capabilities. An interesting one is to display data in three dimensions.
    Often, when three dimensions are used, unexpected visualizations appear.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 许多数据分析包（如R、Python等）具有强大的数据可视化功能。一个有趣的功能是将数据展示为三维图形。通常，当使用三维时，会出现意想不到的可视化效果。
- en: For this example, we are using the car dataset from [https://uci.edu/](https://uci.edu/).
    It is a well-used dataset with several attributes for vehicles, for example, `mpg`,
    `weight`, and `acceleration`. What if we were to plot three of those data attributes
    together and see if we can recognize any apparent rules?
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们使用来自[https://uci.edu/](https://uci.edu/)的汽车数据集。它是一个使用广泛的数据集，包含多个车辆属性，例如`mpg`、`weight`和`acceleration`。如果我们将这三项数据属性一起绘制出来，看看能否识别出任何明显的规律呢？
- en: The coding involved is as follows:**
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 相关的代码如下：**
- en: '[PRE17]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '**In the following code, we plot out the data according to three axes that
    appear to be significant factors—weight, miles per gallon, and the number of cylinders
    in the engines:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '**在以下代码中，我们根据三个看起来重要的因素——重量、每加仑英里数（mpg）和发动机缸数——绘制数据：'
- en: '[PRE18]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Unexpectedly, there appears to be three levels by the apparent three lines
    of data points, regardless of weight:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 意外地，似乎有三个层次，通过明显的三条数据点线可以看出来，不论权重如何：
- en: Six cylinders with higher mpg
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 六缸车的较高mpg
- en: A lower mpg four cylinder
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 较低mpg的四缸车
- en: A higher mpg for four cylinder vehicles
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 四缸车的较高mpg
- en: 'I would have expected the weight to have a bigger effect:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我本来预期权重会有更大的影响：
- en: '>![](img/aa52296f-33f9-424a-b808-b67c42896dbe.png)**  **# Summary'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '>![](img/aa52296f-33f9-424a-b808-b67c42896dbe.png)**  **# 摘要'
- en: In this chapter, we used prediction models from Python and R under Jupyter.
    We used Matplotlib for data visualization. We used interactive plotting (under
    Python). And we covered several graphing techniques available in Jupyter. We created
    a density map with SciPy. We used histograms to visualize social data. Lastly,
    we generated a 3D plot under Jupyter.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使用了来自 Python 和 R 的预测模型，运行环境为 Jupyter。我们使用了 Matplotlib 进行数据可视化。我们使用了交互式绘图（基于
    Python）。并且我们介绍了 Jupyter 中几种可用的图形技术。我们使用 SciPy 创建了一个密度图。我们用直方图来可视化社会数据。最后，我们在 Jupyter
    下生成了一个 3D 图。
- en: In the next chapter, we will look at accessing data in different ways under
    Jupyter.**
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探索在 Jupyter 中以不同方式访问数据。**
