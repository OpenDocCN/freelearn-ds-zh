- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: pandas Foundations
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pandas 基础
- en: The **pandas** library is useful for dealing with structured data. What is structured
    data? Data that is stored in tables, such as CSV files, Excel spreadsheets, or
    database tables, is all structured. Unstructured data consists of free-form text,
    images, sound, or video. If you find yourself dealing with structured data, pandas
    will be of great utility to you.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**pandas** 库对于处理结构化数据非常有用。什么是结构化数据？存储在表格中的数据，如 CSV 文件、Excel 电子表格或数据库表格，都是结构化的。非结构化数据则包括自由格式的文本、图像、声音或视频。如果你处理的是结构化数据，pandas
    对你会非常有帮助。'
- en: '`pd.Series` is a one-dimensional collection of data. If you are coming from
    Excel, you can think of this as a column. The main difference is that, like a
    column in a database, all of the values within `pd.Series` must have a single,
    homogeneous type.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '`pd.Series` 是一维数据集合。如果你来自 Excel，可以把它当作一列。主要的区别是，像数据库中的一列一样，`pd.Series` 中的所有值必须具有相同的数据类型。'
- en: '`pd.DataFrame` is a two-dimensional object. Much like an Excel sheet or database
    table can be thought of as a collection of columns, `pd.DataFrame` can be thought
    of as a collection of `pd.Series` objects. Each `pd.Series` has a homogeneous
    data type, but the `pd.DataFrame` is allowed to be heterogeneous and store a variety
    of `pd.Series` objects with different data types.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '`pd.DataFrame` 是一个二维对象。就像 Excel 表格或数据库表格可以被看作是列的集合，`pd.DataFrame` 可以被看作是 `pd.Series`
    对象的集合。每个 `pd.Series` 具有相同的数据类型，但 `pd.DataFrame` 可以是异构的，允许存储具有不同数据类型的各种 `pd.Series`
    对象。'
- en: '`pd.Index` does not have a direct analogy with other tools. Excel may offer
    the closest with auto-numbered rows on the left-hand side of a worksheet, but
    those numbers tend to be for display purposes only. `pd.Index`, as you will find
    over the course of this book, can be used for selecting values, joining tables,
    and much more.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '`pd.Index` 与其他工具没有直接的类比。Excel 可能提供最接近的功能，通过工作表左侧的自动编号行，但这些数字通常仅用于显示。正如你将在本书的过程中发现的那样，`pd.Index`
    可以用于选择值、连接表格等更多用途。'
- en: The recipes in this chapter will show you how to manually construct `pd.Series`
    and `pd.DataFrame` objects, customize the `pd.Index` object(s) associated with
    each, and showcase common attributes of the `pd.Series` and `pd.DataFrame` that
    you may need to inspect during your analyses.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的教程将展示如何手动构建 `pd.Series` 和 `pd.DataFrame` 对象，定制与之关联的 `pd.Index` 对象，并展示你在分析过程中可能需要检查的
    `pd.Series` 和 `pd.DataFrame` 的常见属性。
- en: 'We are going to cover the following recipes in this chapter:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将讨论以下教程：
- en: Importing pandas
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入 pandas
- en: Series
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Series
- en: DataFrame
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DataFrame
- en: Index
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 索引
- en: Series attributes
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Series 属性
- en: DataFrame attributes
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DataFrame 属性
- en: Importing pandas
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导入 pandas
- en: 'Most users of the **pandas** library will use an import alias so they can refer
    to it as `pd`. In general, in this book, we will not show the pandas and **NumPy**
    imports, but they look like this:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 **pandas** 库的用户会使用导入别名，这样他们就可以用 `pd` 来引用它。一般来说，在本书中，我们不会显示 pandas 和 **NumPy**
    的导入语句，但它们通常是这样的：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'While it is an optional dependency in the 2.x series of pandas, many examples
    in this book will also leverage the **PyArrow** library, which we assume to be
    imported as:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然在 2.x 版本的 pandas 中它是一个可选的依赖项，但本书中的许多示例也会使用 **PyArrow** 库，我们假设它是以如下方式导入的：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Series
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Series
- en: The basic building block in pandas is a `pd.Series`, which is a one-dimensional
    array of data paired with a `pd.Index`. The index labels can be used as a simplistic
    way to look up values in the `pd.Series`, much like the Python dictionary built
    into the language uses key/value pairs (we will expand on this and much more `pd.Index`
    functionality in *Chapter 2*, *Selection and Assignment*).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 中的基本构建块是 `pd.Series`，它是一个与 `pd.Index` 配对的一维数据数组。索引标签可以作为一种简单的方式来查找 `pd.Series`
    中的值，类似于 Python 字典使用键/值对的方式（我们将在*第 2 章*，*选择与赋值*中详细展开这一点，以及更多关于 `pd.Index` 的功能）。
- en: The following section demonstrates a few ways of creating a `pd.Series` directly.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的部分展示了几种直接创建 `pd.Series` 的方式。
- en: How to do it
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到
- en: 'The easiest way to construct a `pd.Series` is to provide a sequence of values,
    like a list of integers:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 构建 `pd.Series` 的最简单方法是提供一个值的序列，比如一个整数列表：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'A **tuple** is another type of sequence, making it valid as an argument to
    the `pd.Series` constructor:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**元组** 是另一种序列类型，使其可以作为 `pd.Series` 构造函数的有效参数：'
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'When generating sample data, you may often reach for the Python `range` function:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在生成示例数据时，你可能会经常使用 Python 的 `range` 函数：
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In all of the examples so far, pandas will try and infer a proper data type
    from its arguments for you. However, there are times when you will know more about
    the type and size of your data than can be inferred. Providing that information
    explicitly to pandas via the `dtype=` argument can be useful to save memory or
    ensure proper integration with other typed systems, like SQL databases.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在到目前为止的所有示例中，pandas会尝试根据其参数推断出适当的数据类型。然而，有时你对数据的类型和大小的了解超过了它所能推断的内容。通过`dtype=`参数明确地提供这些信息，可以帮助节省内存或确保与其他类型系统（如SQL数据库）正确集成。
- en: 'To illustrate this, let’s use a simple `range` argument to fill a `pd.Series`
    with a sequence of integers. When we did this before, the inferred data type was
    a 64-bit integer, but we, as developers, may know that we never expect to store
    larger values in this `pd.Series` and would be fine with only 8 bits of storage
    (if you do not know the difference between an 8-bit and 64-bit integer, that topic
    will be covered in *Chapter 3*, *Data Types*). Passing `dtype="int8"` to the `pd.Series`
    constructor will let pandas know we want to use the smaller data type:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明这一点，让我们使用一个简单的`range`参数来填充一个`pd.Series`，以生成一个整数序列。当我们之前这么做时，推断的数据类型是64位整数，但我们作为开发人员可能知道，永远不会期望在这个`pd.Series`中存储更大的值，使用8位存储就足够了（如果你不知道8位和64位整数的区别，这个话题会在*第3章*，*数据类型*中讨论）。将`dtype="int8"`传递给`pd.Series`构造函数将告诉pandas我们希望使用较小的数据类型：
- en: '[PRE8]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'A `pd.Series` can also have a name attached to it, which can be specified via
    the `name=` argument (if not specified, the name defaults to `None`):'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`pd.Series`还可以附加一个名称，可以通过`name=`参数指定（如果未指定，默认名称为`None`）：'
- en: '[PRE10]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: DataFrame
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DataFrame
- en: While `pd.Series` is the building block, `pd.DataFrame` is the main object that
    comes to mind for users of pandas. `pd.DataFrame` is the primary and most commonly
    used object in pandas, and when people think of pandas, they typically envision
    working with a `pd.DataFrame`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`pd.Series`是构建块，但`pd.DataFrame`是pandas用户首先想到的主要对象。`pd.DataFrame`是pandas中最常用的主要对象，当人们想到pandas时，通常会想到使用`pd.DataFrame`。
- en: In most analysis workflows, you will be importing your data from another source,
    but for now, we will show you how to construct a `pd.DataFrame` directly (input/output
    will be covered in *Chapter 4*, *The pandas I/O System*).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数分析工作流中，你将从其他来源导入数据，但现在，我们将向你展示如何直接构造一个`pd.DataFrame`（输入/输出将在*第4章*，*pandas
    I/O系统*中讨论）。
- en: How to do it
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现
- en: 'The most basic construction of a `pd.DataFrame` happens with a two-dimensional
    sequence, like a list of lists:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`pd.DataFrame`的最基本构造是使用二维序列，例如一个列表的列表：'
- en: '[PRE12]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'With a list of lists, pandas will automatically number the row and column labels
    for you. Typically, users of pandas will at least provide labels for columns,
    as it makes indexing and selecting from a `pd.DataFrame` much more intuitive (see
    *Chapter 2*, *Selection and Assignment*,for an introduction to indexing and selecting).
    To label your columns when constructing a `pd.DataFrame` from a list of lists,
    you can provide a `columns=` argument to the constructor:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 使用列表的列表时，pandas会自动为你编号行和列标签。通常，pandas的用户至少会为列提供标签，因为这使得从`pd.DataFrame`中进行索引和选择变得更加直观（有关索引和选择的介绍，请参见*第2章*，*选择与赋值*）。在从列表的列表构造`pd.DataFrame`时，你可以为构造函数提供一个`columns=`参数，以标记你的列：
- en: '[PRE14]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Instead of using a list of lists, you could also provide a dictionary. The
    keys of the dictionary will be used as column labels, and the values of the dictionary
    will represent the values placed in that column of the `pd.DataFrame`:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用列表的列表，你还可以提供一个字典。字典的键将作为列标签，字典的值将表示放置在`pd.DataFrame`中该列的值：
- en: '[PRE16]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In the above example, our dictionary values were lists of strings, but the
    `pd.DataFrame` does not strictly require lists. Any sequence will work, including
    a `pd.Series`:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，我们的字典值是字符串的列表，但`pd.DataFrame`并不严格要求使用列表。任何序列都可以使用，包括`pd.Series`：
- en: '[PRE18]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Index
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 索引
- en: 'When constructing both the `pd.Series` and `pd.DataFrame` objects in the previous
    sections, you likely noticed the values to the left of these objects starting
    at 0 and incrementing by 1 for each new row of data. The object responsible for
    those values is the `pd.Index`, highlighted in the following image:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 当构造之前部分中的`pd.Series`和`pd.DataFrame`对象时，你可能注意到这些对象左侧的值从0开始，每增加一行数据就递增1。负责这些值的对象是`pd.Index`，如下图所示：
- en: '![](img/B31091_01_01.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31091_01_01.png)'
- en: 'Figure 1.1: Default pd.Index, highlighted in red'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.1：默认的`pd.Index`，以红色突出显示
- en: 'In the case of a `pd.DataFrame`, you have a `pd.Index` not only to the left
    of the object (often referred to as the *row index* or even just *index*) but
    also above (often referred to as the *column index* or *columns*):'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在`pd.DataFrame`的情况下，不仅对象左侧有`pd.Index`（通常称为*行索引*或仅称为*索引*），上方也有（通常称为*列索引*或*列*）：
- en: '![A screenshot of a computer](img/B31091_01_02.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![计算机截图](img/B31091_01_02.png)'
- en: 'Figure 1.2: A pd.DataFrame with a row and column index'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2：一个带有行和列索引的`pd.DataFrame`
- en: Unless explicitly provided, pandas will create an auto-numbered `pd.Index` for
    you (technically, this is a `pd.RangeIndex`, a subclass of the `pd.Index` class).
    However, it is very rare to use `pd.RangeIndex` for your columns, as referring
    to a column named `City` or `Date` is more expressive than referring to a column
    in the *n*^(th) position. The `pd.RangeIndex` appears more commonly in the row
    index, although you may still want custom labels to appear there as well. More
    advanced selection operations with the default `pd.RangeIndex` and custom `pd.Index`
    values will be covered in *Chapter 2*, *Selection and Assignment*, to help you
    understand different use cases, but for now, let’s just look at how you would
    override the construction of the row and column `pd.Index` objects during `pd.Series`
    and `pd.DataFrame` construction.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 除非明确提供，否则pandas会为你创建一个自动编号的`pd.Index`（从技术上讲，这是`pd.RangeIndex`，它是`pd.Index`类的子类）。然而，很少将`pd.RangeIndex`用于列，因为引用名为`City`或`Date`的列比引用第*n*^(th)位置的列更具表达性。`pd.RangeIndex`更常见于行索引中，尽管你可能仍然希望在此使用自定义标签。关于默认的`pd.RangeIndex`和自定义`pd.Index`值的更高级选择操作将在*第2章*《选择与赋值》中进行讲解，帮助你理解不同的用例，但现在我们先来看一下如何在构建`pd.Series`和`pd.DataFrame`时覆盖行和列`pd.Index`对象的构造。
- en: How to do it
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作
- en: 'When constructing a `pd.Series`, the easiest way to change the row index is
    by providing a sequence of labels to the `index=` argument. In this example, the
    labels `dog`, `cat`, and `human` will be used instead of the default `pd.RangeIndex`
    numbered from 0 to 2:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建`pd.Series`时，最简单的改变行索引的方法是向`index=`参数提供一个标签序列。在这个例子中，使用`dog`、`cat`和`human`作为标签，而不是默认的从0到2的`pd.RangeIndex`：
- en: '[PRE20]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'If you want finer control, you may want to construct the `pd.Index` yourself
    before passing it as an argument to `index=`. In the following example, the `pd.Index`
    is given the name `animal`, and the `pd.Series` itself is named `num_legs`, providing
    more context to the data:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要更精细的控制，可能需要在将`pd.Index`作为参数传递给`index=`之前先构建`pd.Index`。在以下示例中，`pd.Index`被命名为`animal`，而`pd.Series`本身被命名为`num_legs`，为数据提供了更多上下文：
- en: '[PRE22]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'A `pd.DataFrame` uses a `pd.Index` for both dimensions. Much like with the
    `pd.Series` constructor, the `index=` argument can be used to specify the row
    labels, but you now also have the `columns=` argument to control the column labels:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`pd.DataFrame`使用`pd.Index`来表示两个维度。与`pd.Series`构造函数类似，`index=`参数可以用来指定行标签，但现在你还可以使用`columns=`参数来控制列标签：'
- en: '[PRE24]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Series attributes
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 序列属性
- en: Once you have a `pd.Series`, there are quite a few attributes you may want to
    inspect. The most basic attributes can tell you the type and size of your data,
    which is often the first thing you will inspect when reading in data from a data
    source.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你拥有了`pd.Series`，你可能想检查一些属性。最基本的属性可以告诉你数据的类型和大小，这通常是你在从数据源读取数据时首先检查的内容。
- en: How to do it
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作
- en: 'Let’s start by creating a `pd.Series` that has a name, alongside a custom `pd.Index`,
    which itself has a name. Although not all of these elements are required, having
    them will help us more clearly understand what the attributes we access through
    this recipe are actually showing us:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建一个带有名称的`pd.Series`开始，同时创建一个自定义的`pd.Index`，该`pd.Index`本身也有名称。虽然这些元素并非全部必需，但它们将帮助我们更清楚地理解通过这个示例访问的属性实际上展示了什么：
- en: '[PRE26]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The first thing users typically want to know about their data is the type of
    `pd.Series`. This can be inspected via the `pd.Series.dtype` attribute:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 用户通常想了解的第一个数据特性是`pd.Series`的类型。可以通过`pd.Series.dtype`属性来检查：
- en: '[PRE28]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The name may be inspected via the `pd.Series.name` attribute. The data we constructed
    in this recipe was created with the `name="num_legs"` argument, which is what
    you will see when accessing this attribute (if not provided, this will return
    `None`):'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过`pd.Series.name`属性检查名称。我们在此例中创建的数据使用了`name="num_legs"`参数，这就是你在访问该属性时看到的内容（如果没有提供名称，则返回`None`）：
- en: '[PRE30]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The associated `pd.Index` can be accessed via `pd.Series.index`:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 相关的`pd.Index`可以通过`pd.Series.index`访问：
- en: '[PRE32]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The name of the associated `pd.Index` can be accessed via `pd.Series.index.name`:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 关联的`pd.Index`的名称可以通过`pd.Series.index.name`访问：
- en: '[PRE34]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The shape can be accessed via `pd.Series.shape`. For a one-dimensional `pd.Series`,
    the shape is returned as a one-tuple where the first element represents the number
    of rows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 形状可以通过`pd.Series.shape`访问。对于一维的`pd.Series`，形状返回为一个单一元组，其中第一个元素表示行数：
- en: '[PRE36]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The size (number of elements) can be accessed via `pd.Series.size`:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 大小（元素个数）可以通过`pd.Series.size`访问：
- en: '[PRE38]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The Python built-in function `len` can show you the length (number of rows):'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Python 内建函数`len`可以显示你数据的长度（行数）：
- en: '[PRE40]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: DataFrame attributes
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DataFrame 属性
- en: The `pd.DataFrame` shares many of the attributes of the `pd.Series`, with some
    slight differences. Generally, pandas tries to share as many attributes as possible
    between the `pd.Series` and `pd.DataFrame`, but the two-dimensional nature of
    the `pd.DataFrame` makes it more natural to express some things in plural form
    (for example, the `.dtype` attribute becomes `.dtypes`) and gives us a few more
    attributes to inspect (for example, `.columns` exists for a `pd.DataFrame` but
    not for a `pd.Series`).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`pd.DataFrame`与`pd.Series`共享许多属性，但也有一些细微差别。通常，pandas会尽量在`pd.Series`和`pd.DataFrame`之间共享尽可能多的属性，但`pd.DataFrame`的二维特性使得某些内容更自然地以复数形式表达（例如，`.dtype`属性变为`.dtypes`），并为我们提供了一些额外的属性进行检查（例如，`.columns`对于`pd.DataFrame`存在，但`pd.Series`则没有）。'
- en: How to do it
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作
- en: 'Much like we did in the previous section, we are going to construct a `pd.DataFrame`
    with a custom `pd.Index` in the rows, while also using custom labels in the columns.
    This will be more helpful when inspecting the various attributes:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们在前一部分所做的那样，我们将构造一个带有自定义`pd.Index`的`pd.DataFrame`，同时在列中使用自定义标签。这在检查各种属性时将更有帮助：
- en: '[PRE42]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The types of each column can be inspected via the `pd.DataFrame.dtypes` attribute.
    This attribute returns a `pd.Series` where each row shows the data type corresponding
    to each column in our `pd.DataFrame`:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 每一列的类型可以通过`pd.DataFrame.dtypes`属性进行检查。此属性返回一个`pd.Series`，其中每一行显示对应于`pd.DataFrame`每列的数据类型：
- en: '[PRE44]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The *row index* can be accessed via `pd.DataFrame.index`:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '*行索引*可以通过`pd.DataFrame.index`访问：'
- en: '[PRE46]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'The *column index* can be accessed via `pd.DataFrame.columns`:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '*列索引*可以通过`pd.DataFrame.columns`访问：'
- en: '[PRE48]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'The shape can be accessed via `pd.DataFrame.shape`. For a two-dimensional `pd.DataFrame`,
    the shape is returned as a two-tuple where the first element represents the number
    of rows and the second element represents the number of columns:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 形状可以通过`pd.DataFrame.shape`访问。对于二维的`pd.DataFrame`，形状返回为一个二元组，第一个元素表示行数，第二个元素表示列数：
- en: '[PRE50]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'The size (number of elements) can be accessed via `pd.DataFrame.size`:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 大小（元素个数）可以通过`pd.DataFrame.size`访问：
- en: '[PRE52]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'The Python built-in function `len` can show you the length (number of rows):'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: Python 内建函数`len`可以显示你数据的长度（行数）：
- en: '[PRE54]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Join our community on Discord
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入我们在 Discord 的社区
- en: 'Join our community’s Discord space for discussions with the authors and other
    readers:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 加入我们社区的 Discord 空间，与作者和其他读者进行讨论：
- en: '[https://packt.link/pandas](https://packt.link/pandas)'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/pandas](https://packt.link/pandas)'
- en: '![](img/QR_Code5040900042138312.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/QR_Code5040900042138312.png)'
