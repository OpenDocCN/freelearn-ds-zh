- en: Series and Dataframes - Working with Pandas
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: Series和Dataframes - 使用Pandas
- en: In this chapter, we give a brief introduction to pandas—the central tool in
    Python for data analysis and data handling. You will learn how to work with various
    time series in Python, the concept of dataframes, and how to access and visualize
    data. You will also find examples that demonstrate how smoothly pandas interacts
    with the other central modules in this book, namely NumPy and Matplotlib.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们简要介绍pandas——Python中用于数据分析和数据处理的核心工具。你将学习如何在Python中使用各种时间序列，了解数据框的概念，并学习如何访问和可视化数据。你还会看到一些示例，展示了pandas如何与本书中的其他核心模块（即NumPy和Matplotlib）顺畅地互动。
- en: But please note, this chapter can, within the scope of this book, only serve
    as an *appetizer*. Its purpose is to equip you with the basic concepts. The full
    range of visualization, data analysis, and data conversion tools in pandas is
    impressive.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 但请注意，本章内容在本书的范围内只能作为*开胃菜*。它的目的是为你提供基本概念。pandas中全套的可视化、数据分析和数据转换工具非常强大。
- en: pandas offers many ways of importing data. Some of them will be presented together
    with guiding examples throughout this chapter.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: pandas提供了许多导入数据的方法。本章将介绍其中的一些方法，并提供指导性示例。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: 'A guiding example: Solar cells'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个指导性示例：太阳能电池
- en: NumPy arrays and pandas DataFrames
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NumPy数组和pandas数据框
- en: Creating and modifying dataframes
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和修改数据框
- en: Working with dataframes
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用数据框
- en: '10\. 1 A guiding example: Solar cells'
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 10.1 一个指导性示例：太阳能电池
- en: To describe pandas in the best way, we need data. Thus, in this chapter, we
    will use production data from solar cell panels on the roof of a private house
    in the south of Sweden.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了最好地描述pandas，我们需要数据。因此，在本章中，我们将使用瑞典南部一座私人住宅屋顶上太阳能电池板的生产数据。
- en: 'In the file `solarWatts.dat` there is data about the electricity production
    in watts per minute. A semicolon is used as a data separator and the first line
    in the file is a header line, explaining the content of the data columns:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在文件`solarWatts.dat`中，包含了每分钟的电力生产数据（单位：瓦特）。使用分号作为数据分隔符，文件的第一行是标题行，解释了数据列的内容：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In another file, `price.dat`, we find the hourly electricity production price
    in Swedish crowns. The file is otherwise organized as before:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在另一个文件`price.dat`中，我们找到每小时电力生产价格（单位：瑞典克朗）。文件的结构与之前相同：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Finally, in a third file, `rates.dat`, we find the daily conversion rates from
    Swedish crowns to Euros (€):'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在第三个文件`rates.dat`中，我们找到了从瑞典克朗到欧元（€）的每日汇率：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We want to extract from this data information about the maximal and minimal
    production per day, the number of hours of sun per month, the sunniest day so
    far, information about sunrise and sunset, and some economic information. We also aim
    to graphically present data.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望从这些数据中提取每天的最大和最小产量、每月的日照小时数、迄今为止最阳光明媚的一天、日出和日落时间以及一些经济信息。我们还打算以图形方式呈现数据。
- en: Note, the data is not collected at the same time points and there might be missing
    data.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，数据不是在相同的时间点收集的，可能会有缺失数据。
- en: Each file contains a so-called time-series, that is, data depending on time or
    a discrete sampling of a time-depending function.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 每个文件包含一个所谓的时间序列，也就是依赖于时间的数据或时间依赖函数的离散采样。
- en: We now introduce the concept of dataframes in pandas and compare it to NumPy
    arrays.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在介绍pandas中的数据框概念，并将其与NumPy数组进行比较。
- en: 10.2 NumPy arrays and pandas dataframes
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 10.2 NumPy数组和pandas数据框
- en: 'Let''s start by just looking at an example of a [![](img/6bc9c04c-a8b4-41ae-82b5-1760f08e0e9d.png)] NumPy
    array:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从仅仅看一个[![](img/6bc9c04c-a8b4-41ae-82b5-1760f08e0e9d.png)]的NumPy数组示例开始：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'It is displayed as:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 它显示为：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: And its elements are accessed by using indexes generated simply by counting
    rows and columns, for example, `A[0,1]`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 它的元素可以通过简单地按行和列计数生成的索引进行访问，例如，`A[0,1]`。
- en: 'This matrix can be converted to the pandas datatype `DataFrame` by keeping
    the same data and order but representing and accessing it in a different way:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这个矩阵可以通过保持相同的数据和顺序，但以不同的方式表示和访问，转换为pandas的数据类型`DataFrame`：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This `DataFrame` object, which we will explain in more detail in this chapter,
    is displayed as
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`DataFrame`对象，我们将在本章中更详细地解释，显示为：
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We see that a pandas dataframe has extra labels for the rows and columns called *index*
    and *columns*. These are the metadata of a dataframe.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到，pandas数据框有额外的行和列标签，称为*index*（索引）和*columns*（列）。这些是数据框的元数据。
- en: 'Here, they coincide with NumPy''s indexing, but that is not always so. The index
    and columns metadata allows the pandas dataframe to label the data in a way that''s
    known from classical table design:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，它们与NumPy的索引方法一致，但并非总是如此。索引和列元数据使得pandas数据框能够以传统表格设计中已知的方式标记数据：
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This gives us the following output:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这给出了如下输出：
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We will see now how to work with these labels to address a subframe or just
    a value in the dataframe.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将看到如何使用这些标签来访问子框架或数据框中的单个值。
- en: 10.2.1 Indexing rules
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 10.2.1 索引规则
- en: 'Similar to the way dictionaries use keys to address a value, pandas dataframes
    use row labels—the dataframe index—and column labels to access individual values:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于字典通过键访问值的方式，pandas数据框通过行标签——数据框索引——和列标签来访问单个值：
- en: '[PRE9]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Or to generate a subframe:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 或者生成一个子框架：
- en: '[PRE10]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Resulting in:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 结果为：
- en: '[PRE11]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You can also address a complete row by using the index label:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过使用索引标签来访问完整的行：
- en: '[PRE12]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This returns a pandas `Series` object:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回一个pandas `Series`对象：
- en: '[PRE13]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: If `loc` or `iloc` are called with list arguments or slices, the result is a
    dataframe.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`loc`或`iloc`使用列表参数或切片调用，结果将是一个数据框。
- en: 'In that way, an individual dataframe element can also be addressed as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式，单个数据框元素也可以如下访问：
- en: '[PRE14]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'An entire column is addressed directly as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过以下方式直接访问整列：
- en: '[PRE15]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This again returns a pandas `Series` object:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这又会返回一个pandas `Series`对象：
- en: '[PRE16]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Alternatively, the column label can be used as an attribute, `AF.C1`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，列标签可以作为属性使用，`AF.C1`。
- en: A single column is an instance of the pandas datatype, `Series`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 单列是pandas数据类型`Series`的一个实例。
- en: '[PRE17]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Note, a pandas series has no column label. It is just a single column corresponding
    to a single type of measured data.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，pandas系列没有列标签。它只是对应于单一类型测量数据的单列。
- en: 'Still, you can use classical indexing by applying the dataframe method `iloc`:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 仍然可以通过应用数据框方法`iloc`使用经典索引：
- en: '[PRE18]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This returns:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回：
- en: '[PRE19]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'If `loc` or `iloc` are called with list arguments or slices, the result is
    a dataframe:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`loc`或`iloc`使用列表参数或切片调用，结果将是一个数据框：
- en: '[PRE20]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Or equivalently:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 或者等效地：
- en: '[PRE21]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'While calling with a pair of single labels just gives an element of the dataframe:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用一对单一标签进行调用时，只会返回数据框中的一个元素：
- en: '[PRE22]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This is in full agreement with the way NumPy handles the indexing of arrays.
    Recall that indexing with slices returns an array, while indexing with single
    integers returns a single element of the indexed array.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这与NumPy处理数组索引的方式完全一致。回想一下，使用切片索引返回一个数组，而使用单个整数索引返回被索引数组的单个元素。
- en: 'It is important to note that `loc` and `iloc` are not dataframe methods. Rather,
    they are attributes that have `__getitem__` method; see also [Section 8.1.5](1654fae9-6203-4871-8352-e436445fa49a.xhtml):
    *Special methods*. That explains the use of brackets instead of parentheses.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，`loc`和`iloc`不是数据框方法。它们是具有`__getitem__`方法的属性；参见[第8.1.5节](1654fae9-6203-4871-8352-e436445fa49a.xhtml)：*特殊方法*。这解释了为什么使用方括号而不是圆括号。
- en: 10.3 Creating and modifying dataframes
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 10.3 创建和修改数据框
- en: We return now to the solar cell data and explain how to create a dataframe from
    a data file. The format of the file with the given data is CSV. Each line in the
    file contains one data record with a comma or another character string as a data
    separator. Here, we used a semicolon as a separator because in many countries
    the comma is used instead of a decimal separator.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们回到太阳能电池数据，并解释如何从数据文件创建数据框。给定数据的文件格式为CSV。文件中的每一行包含一条数据记录，数据分隔符是逗号或其他字符字符串。这里，我们使用分号作为分隔符，因为在许多国家，逗号用于表示小数点。
- en: 10.3.1 Creating a dataframe from imported data
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 10.3.1 从导入数据创建数据框
- en: 'We want to organize the dataframe in such a way that the dates are used as
    the index of the dataframe. To be better prepared for operating with dates, we
    also want that the data import process automatically converts date strings to
    a pandas `Timestamp` object. Finally, you might have noted that the way the date
    is written in the data files is in the ISO-format `YY-MM-DD` format and not in
    the American `MM-DD-YY` or the European `DD-MM-YY` format. We can put on our wishlist
    that pandas automatically recognizes the date format and performs the correct
    conversion:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望以这样的方式组织数据框，即使用日期作为数据框的索引。为了更好地操作日期，我们还希望数据导入过程能自动将日期字符串转换为pandas `Timestamp`对象。最后，你可能已经注意到，数据文件中日期的书写方式是ISO格式`YY-MM-DD`，而不是美国的`MM-DD-YY`格式或欧洲的`DD-MM-YY`格式。我们可以把它列入愿望清单，期望pandas能够自动识别日期格式并执行正确的转换：
- en: '[PRE23]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The pandas command `read_csv` is the central tool. It has many more parameters
    than we used here and carefully studying their functionalities saves a lot of
    programming effort.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 命令 `read_csv` 是中心工具。它具有比我们在此处使用的更多参数，并仔细研究它们的功能可以节省大量编程工作。
- en: 'We now have a pandas dataframe, `solarWatts`, with more than 200,000 data records.
    Let''s directly check the first one:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个包含超过 200,000 条数据记录的 pandas 数据帧 `solarWatts`。让我们直接检查第一个：
- en: '[PRE24]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'This returns the following output:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回以下输出：
- en: '[PRE25]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We can also ask for the last date. To this end, we use the attribute `index` of
    the dataframe:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以询问最后一个日期。为此，我们使用数据帧的 `index` 属性：
- en: '[PRE26]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This returns a pandas `Timestamp` object `Timestamp('2020-06-27 17:54:00')`.
    This object or its string representation can be used for indexing.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这返回一个 pandas `Timestamp` 对象 `Timestamp('2020-06-27 17:54:00')`。可以使用该对象或其字符串表示进行索引。
- en: '`Timestamp` objects make it easy to perform calculations with dates, define
    time ranges, and compare dates. We can check how much time passed between the
    measurements:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`Timestamp` 对象使得在处理日期时能够轻松进行计算、定义时间范围以及比较日期。我们可以检查测量之间经过了多少时间：'
- en: '[PRE27]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The resulting object `Timedelta` tells us that the time elapsed between the
    first and second records is one minute.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的 `Timedelta` 对象告诉我们，第一条和第二条记录之间经过了一分钟。
- en: 'But is all data collected every minute? As pandas is compatible with NumPy,
    we can apply Numpy''s command `diff`, which returns an array with the datatype
    `timedelta64[ns]`, that is, the differences are given in nanoseconds. We convert
    the result directly to minutes and ask for the maximal difference:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 但是所有数据都是每分钟收集的吗？由于 pandas 兼容 NumPy，我们可以应用 NumPy 的 `diff` 命令，它返回一个带有 `timedelta64[ns]`
    数据类型的数组，即差异以纳秒显示。我们直接将结果转换为分钟，并查询最大差异：
- en: '[PRE28]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'With `numpy.argmax`, we find the corresponding date:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `numpy.argmax`，我们找到了对应的日期：
- en: '[PRE29]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: In this piece of code, we first form an array with the time differences (`timedelta`).
    We use this as an index to locate the data record in the pandas dataframe.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，我们首先形成一个时间差数组 (`timedelta`)。我们将其用作索引来定位 pandas 数据帧中的数据记录。
- en: 10.3.2 Setting the index
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 10.3.2 设置索引
- en: The default index of a dataframe is the row numbers. These are generated automatically
    when a dataframe is created and no index is specified. Here is an example.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 数据帧的默认索引是行号。当创建数据帧且未指定索引时，这些索引将自动生成。这里是一个例子。
- en: 'We create a dataframe from a list of lists:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从一个列表列表创建一个数据帧：
- en: '[PRE30]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'This produces a dataframe with rows labeled by their row numbers:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成一个带有按其行号标记的行的数据帧：
- en: '[PRE31]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'We can change this by choosing a column to be the index. The column can be
    duplicated—one serving as the index and the other belonging to the data section
    of the dataframe—or it can be moved to replace the default index column:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 通过选择一个列作为索引来更改此行为。该列可以复制，一个用作索引，另一个属于数据部分的数据帧，或者将其移动以替换默认索引列：
- en: '[PRE32]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'A *new* dataframe is generated, which looks like this when the `drop` parameter
    was set to `True` (default):'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `drop` 参数设置为 `True`（默认）时，生成一个*新的*数据帧，其外观如下：
- en: '[PRE33]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The additional parameter `inplace` enables to change the dataframe directly,
    that is, *in place*, without generating a new object.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 附加参数 `inplace` 允许直接更改数据帧，即*原地*，而不生成新对象。
- en: pandas is not restricted to one index only; indeed, several columns can be chosen
    as an index. Such a multi-index opens for **hierarchical indexing**, a feature
    of pandas which we will meet again in [Section 10.4.3](6db12ffa-0569-4e1e-9059-2f7ada99c3e3.xhtml): *Grouping
    data**.*
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 不仅限于单一索引；事实上，可以选择多个列作为索引。这种多重索引打开了 pandas 的**分层索引**特性，我们将在 [第 10.4.3
    节](6db12ffa-0569-4e1e-9059-2f7ada99c3e3.xhtml) 中再次遇到它：*数据分组*。
- en: 'Several indexes are specified by a list of columns:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 通过列列表指定多个索引：
- en: '[PRE34]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'This gives us the following output:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这给出了以下输出：
- en: '[PRE35]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Note how the dataframe is displayed now: the first index, `Country`, is taken
    as the one with higher hierarchy level than the second index, `City`.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 注意数据帧当前的显示方式：第一个索引 `Country` 被视为比第二个索引 `City` 更高的层次。
- en: 'We can address all Swedish towns in the frame as shown here:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以像这样处理数据帧中的所有瑞典城镇：
- en: '[PRE36]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'We can even address a particular one:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至可以针对特定的索引进行操作：
- en: '[PRE37]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 10.3.3 Deleting entries
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 10.3.3 删除条目
- en: Entries in a dataframe are deleted by the method `drop`.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 数据帧中的条目通过 `drop` 方法删除。
- en: 'Again, we use the dataframe from the previous section:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 再次使用前一节的数据帧：
- en: '[PRE38]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'An entire row is deleted by:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 通过以下方法删除整行：
- en: '[PRE39]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The parameter `axis` specifies here that we look for a row. Deleting a row
    requires the column label and the correct parameter `axis`:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 参数`axis`在此指定我们查找的是一行。删除一行需要列标签和正确的参数`axis`：
- en: '[PRE40]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 10.3.4 Merging dataframes
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 10.3.4 合并数据框
- en: From the three datafiles we provided for this chapter we used the first one,
    `solarwatts.dat`, to set up a dataframe `solarWatts`; see [Section 10.3.1](6db12ffa-0569-4e1e-9059-2f7ada99c3e3.xhtml),
    *Creating a dataframe from imported data*. In a similar way, we can create dataframes
    `price` and `rates` from the other two files.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 从我们为本章提供的三个数据文件中，我们使用第一个文件`solarwatts.dat`来建立数据框`solarWatts`；参见[第10.3.1节](6db12ffa-0569-4e1e-9059-2f7ada99c3e3.xhtml)，*从导入数据创建数据框*。以类似的方式，我们可以从其他两个文件中创建数据框`price`和`rates`。
- en: We show now how to merge these three dataframes into one and to treat rows with
    missing data in the resulting dataframe.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们展示如何将这三个数据框合并成一个，并处理结果数据框中缺失数据的行。
- en: 'First, we merge `solarWatts` with `price`. For this, we use the pandas command
    `merge`:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将`solarWatts`与`price`合并。为此，我们使用pandas命令`merge`：
- en: '[PRE41]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: It sets the column `Date`, which exists in both dataframes as the index of the
    new frame. The parameter `how` defines how to set up the new index column. By
    specifying `outer` we decided to choose the union of both index columns. Finally,
    we want to sort the index.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 它将两个数据框中都存在的列`Date`设置为新数据框的索引。参数`how`定义了如何设置新的索引列。通过指定`outer`，我们选择了两个索引列的并集。最后，我们希望对索引进行排序。
- en: 'As `solarWatts` has data for every minute and the price changes on an hourly
    basis, we obtain in the new dataframe lines like the following:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`solarWatts`的数据是每分钟都有的，而价格是每小时变化一次，我们将在新的数据框中获得如下行：
- en: '[PRE42]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The missing data is automatically filled with `NaN` (which means *not a number*; see
    [Section 2.2](879c0554-386f-4bb1-8fa8-b86c43927545.xhtml): *Numeric types*).'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 缺失数据会自动填充为`NaN`（意味着*不是数字*；参见[第2.2节](879c0554-386f-4bb1-8fa8-b86c43927545.xhtml)：*数值类型*）。
- en: We will study now how to treat missing data.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将研究如何处理缺失数据。
- en: 10.3.5 Missing data in a dataframe
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 10.3.5 数据框中的缺失数据
- en: We saw in the last section that missing data is often indicated by `NaN`. The
    way missing data is indicated depends on the datatype of the column. Missing timestamps
    are indicated by the pandas object `NaT`, while missing data with another non-numeric
    datatype is indicated by `None`.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上一节中看到，缺失数据通常由`NaN`表示。缺失数据的表示方式取决于列的数据类型。缺失的时间戳由pandas对象`NaT`表示，而缺失的其他非数值类型数据则由`None`表示。
- en: The dataframe method `isnull` returns a Boolean dataframe with the entry `True`
    at all places with missing data.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 数据框方法`isnull`返回一个布尔型数据框，在所有缺失数据的地方显示`True`。
- en: We will study various methods for treating missing data before returning to
    the solar cell data example.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在返回到太阳能电池数据示例之前，研究处理缺失数据的各种方法。
- en: 'Let''s demonstrate these methods on a small dataframe:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在一个小数据框上演示这些方法：
- en: '[PRE43]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'This dataframe is displayed as:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 该数据框显示如下：
- en: '[PRE44]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Dataframes with missing data can be handled in different ways:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过不同方式处理包含缺失数据的数据框：
- en: 'Drop all rows containing missing data, `frame.dropna(axis=0)`:'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除所有包含缺失数据的行，`frame.dropna(axis=0)`：
- en: '[PRE45]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Drop all columns containing missing data, `frame.dropna(axis=1)`:'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除所有包含缺失数据的列，`frame.dropna(axis=1)`：
- en: '[PRE46]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Replace the missing data by padding data from previous the row, `frame.fillna(method=''pad'',axis=0)`:'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过使用前一行的数据填充缺失数据，`frame.fillna(method='pad', axis=0)`：
- en: '[PRE47]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: In this case, if there is no data to pad with, `NaN` remains.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，如果没有可用的数据进行填充，则`NaN`将保持不变。
- en: 'Interpolate numeric data column-wise, `frame.interpolate(axis=0, method=''linear'')`:'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按列插值数值数据，`frame.interpolate(axis=0, method='linear')`：
- en: '[PRE48]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Again, values that cannot be computed by interpolation remain as `NaN`.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，无法通过插值计算的值将保持为`NaN`。
- en: The way we used the method interpolate assumes that data is collected on an
    equidistant grid. If the index is numeric or a datetime object it can be used
    as the ![](img/8cf5b441-997d-4736-ace9-01b5b1b415c8.png)-axis. This is achieved,
    for example, by using the parameter value `method='polynomial'`.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用插值方法的方式假设数据是在等距网格上收集的。如果索引是数字或日期时间对象，它可以作为![](img/8cf5b441-997d-4736-ace9-01b5b1b415c8.png)-轴来使用。例如，使用参数值`method='polynomial'`即可实现这一点。
- en: 'To use different methods on different columns is possible by using the parameter
    inplace:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`inplace`参数，可以在不同的列上使用不同的方法：
- en: '[PRE49]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: We return now to the solar cell example. Electricity prices change on an hourly
    basis, valuta exchange rates on a daily basis, and the energy production by the
    solar panels is recorded every minute during daylight times. This is the reason
    why the dataframe merging step introduced many NaN (see [Section 10.3.4](6db12ffa-0569-4e1e-9059-2f7ada99c3e3.xhtml),
    Merging dataframes).
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们回到太阳能电池的例子。电价按小时变化，货币汇率按日变化，而太阳能电池板的能量生产则在白天时段每分钟记录一次。这就是数据框合并步骤引入许多NaN值的原因（参见[第10.3.4节](6db12ffa-0569-4e1e-9059-2f7ada99c3e3.xhtml)，合并数据框）。
- en: 'We replace these missing values by padding:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过填充来替换这些缺失值：
- en: '[PRE50]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: There are still `NaN` values in the table. The solar cells produce only energy
    during the daytime with sufficient light. Outside these periods, the column Watt
    contains the value `NaN`.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 表中仍然存在`NaN`值。太阳能电池仅在白天有足够光照时产生能量。在这些时段之外，Watt列的值为`NaN`。
- en: In the next section, we visualize the data with pandas' dataframe plot functionality
    and we will see that `NaN` values are simply ignored in the plot.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将使用pandas的dataframe绘图功能来可视化数据，并且我们会看到`NaN`值在图中被简单地忽略。
- en: 10.4 Working with dataframes
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 10.4 使用dataframe
- en: So far, we have seen how to create and modify a dataframe. Now, we turn to data
    interpretation. We will look at examples of visualization, show how to make simple
    calculations, and see how to group data. These are all stepping stones into the
    world of pandas. The strength of this module is in its large range of statistical
    tools. We leave the presentation of these tools to textbooks on practical statistics,
    while we focus here on the basic principles of pandas programming. We do not aim
    for completeness. Again, let's serve an appetizer.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了如何创建和修改dataframe。现在，我们转向数据解释部分。我们将查看可视化的示例，展示如何进行简单的计算，并看到如何对数据进行分组。这些都是进入pandas世界的垫脚石。这个模块的强大之处在于其广泛的统计工具。我们将这些工具的介绍留给实用统计学教材，而在这里我们关注pandas编程的基本原则。我们不追求完整性。再一次，让我们先品尝一下开胃菜。
- en: 10.4.1 Plotting from dataframes
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 10.4.1 从dataframe绘图
- en: 'To demonstrate the plotting functionality, we plot the energy price changes
    on May 16, 2020\. For this, we construct a subframe of the data from that day:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示绘图功能，我们绘制了2020年5月16日的能源价格变化。为此，我们从那一天的数据中构建了一个子数据框：
- en: '[PRE51]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'You can see that we indexed here with the full day. This is a short form of
    slicing:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，我们这里使用的是完整的日期索引。这是切片的简短形式：
- en: '[PRE52]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: The resulting plot, Figure 10.1, shows the hourly variation of electricity prices
    in Swedish crowns on a typical day of the year.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 结果图（图10.1）展示了电价在典型一年中的小时变化，单位为瑞典克朗。
- en: '![](img/179951bd-d922-48f3-9ebd-c446adc48dee.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![](img/179951bd-d922-48f3-9ebd-c446adc48dee.png)'
- en: 'Figure 10.1: Plotting one column of a dataframe; the hourly price in Swedish
    crowns (SEK) per kWh on May 16, 2020'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.1：绘制dataframe的一列；2020年5月16日每千瓦时的瑞典克朗（SEK）每小时价格
- en: pandas' plot command is built upon plot from the module matplotlib.pyplot, which
    we met in [Chapter 6](86c61820-e645-486c-9418-10079ffac7f8.xhtml), Plotting.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: pandas的绘图命令是基于matplotlib.pyplot模块的plot函数构建的，我们在[第6章](86c61820-e645-486c-9418-10079ffac7f8.xhtml)，绘图中见过它。
- en: It accepts the same parameters, for example, linestyle or marker.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 它接受相同的参数，例如，线型或标记。
- en: The data for the x axis is taken from the dataframe index if not otherwise specified.
    Alternatively, you can plot one dataframe column versus another.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: x轴的数据来自dataframe的索引，除非另有指定。或者，你可以绘制一个dataframe列与另一个列的关系。
- en: Line plots leave gaps where data is missing. You see this in the next figure
    that displays the solar cell's power in the first week of June 2020\. As there
    is no solar cell data outside daylight time, the plot has gaps. See Figure 10.2.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 折线图在数据缺失的地方会留下空白。你可以在下图中看到这一点，该图展示了2020年6月第一周太阳能电池的功率。由于在白天时段外没有太阳能电池数据，图中会有空白。见图10.2。
- en: '![](img/85f3638d-5375-42c4-8f13-3d79b12ae54d.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![](img/85f3638d-5375-42c4-8f13-3d79b12ae54d.png)'
- en: 'Figure 10.2: A plot of a data series with missing data (`NaN`): the power in
    Watts of the solar cells in the first week of June 2020\. You can clearly see
    the periods where no energy was produced'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.2：具有缺失数据（`NaN`）的数据序列图：2020年6月第一周太阳能电池的瓦特功率。你可以清楚地看到没有能量产生的时段。
- en: 'The command we used for this plot is as follows:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们用来绘制此图的命令如下：
- en: '[PRE53]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Here, you can see the advantage of working with an axis object, ax1 in this
    case. This allows us to modify the axis labels or the legend, for example, ax1.legend(['Power
    [W]').
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以看到使用轴对象（在本例中为ax1）的优势。这使得我们可以修改轴标签或图例，例如，ax1.legend(['功率 [W]））。
- en: We give more plot examples in the next sections, when we see how to do some
    calculations within dataframes and how to group data.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将提供更多的绘图示例，展示如何在数据框内进行一些计算，以及如何对数据进行分组。
- en: 10.4.2 Calculations within dataframes
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 10.4.2 数据框内的计算
- en: We can do simple calculations on dataframe columns by applying functions on
    every element of the column, that is, elementwise application of functions. These
    functions can be built-in Python functions, NumPy functions, or user-defined functions,
    such as lambda functions (see [Section 7.7](35749482-dbc7-41b2-aa19-dc63b242f18f.xhtml),
    Anonymous functions).
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过对数据框列中的每个元素应用函数来进行简单的计算，即对函数的元素逐一应用。这些函数可以是内置的 Python 函数、NumPy 函数或用户定义的函数，如
    lambda 函数（请参见 [第 7.7 节](35749482-dbc7-41b2-aa19-dc63b242f18f.xhtml)，匿名函数）。
- en: 'The simplest way is to operate on the columns directly. In the following example,
    we convert watts into kilowatts and Swedish crowns (SEK) into Euros by using the
    conversion rate, which was the actual rate on the day of the measurement:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的方式是直接对列进行操作。在以下示例中，我们将瓦特转换为千瓦，并使用当天的汇率将瑞典克朗（SEK）转换为欧元：
- en: '[PRE54]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Tacitly, we also adjusted the column labels to the converted units.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 默契地，我们还调整了列标签以符合转换后的单位。
- en: 'The command `solar_converted.loc[''2020-07-01 7:00'':''2020-07-01 7:04'']` then
    returns the converted data for July, 1st 2020:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 命令`solar_converted.loc['2020-07-01 7:00':'2020-07-01 7:04']`然后返回了 2020 年 7 月
    1 日的数据：
- en: '[PRE55]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'We can also apply NumPy''s (universal) functions to entire rows or columns.
    The following example computes the maximal power supplied by the solar cells:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以将 NumPy 的（通用）函数应用于整个行或列。以下示例计算了太阳能电池板提供的最大功率：
- en: '[PRE56]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'To print the corresponding date, we use the function argmax :'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 为了打印对应的日期，我们使用了函数 argmax：
- en: '[PRE57]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'The printed date is then:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 打印的日期是：
- en: '[PRE58]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'From the preceding examples, one can see that missing data marked by NaN is
    treated really as missing data, that is, as if it was not there. As not all computational
    methods have this property, it might be safer to replace NaN with 0 in these cases:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的示例中可以看出，缺失数据用 NaN 标记，实际上它被视为缺失数据，也就是说，仿佛它根本不存在。由于并非所有计算方法都具备这个特性，因此在这些情况下，将
    NaN 替换为 0 可能更为安全：
- en: '[PRE59]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: For the application of general user-defined functions, there is a dataframe
    method apply. It performs row- or column-wise operations on the entire dataframe.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 对于应用通用的用户定义函数，有一个数据框方法 apply。它对整个数据框进行按行或按列的操作。
- en: 10.4.3 Grouping data
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 10.4.3 数据分组
- en: The ability to group data is one of the essential features for pandas' dataframes.
    In the solar cell example, you saw that we had a data frequency of one measurement
    per minute. What if you want to report on an hourly or daily basis instead? We
    just form groups and aggregate the data in a prescribed way.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 数据分组的能力是 pandas 数据框的基本功能之一。在太阳能电池板示例中，您看到我们有每分钟一次的测量频率。如果您想按小时或按日报告数据怎么办？我们只需将数据分成组，并以规定的方式对数据进行聚合。
- en: 'The following example forms a new dataframe with the two columns labeled Watt
    and SEK reporting the peak solar cell power per day and the average price in SEK:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例形成了一个新的数据框，包含标记为 Watt 和 SEK 的两列，分别报告了每日太阳能电池板的峰值功率和平均价格（以 SEK 为单位）：
- en: '[PRE60]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Again, we can visualize the results by using the dataframe method plot:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们可以使用数据框方法 plot 来可视化结果：
- en: '[PRE61]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Note, we created an axis object, ax, in order to change the tick labels on
    the ![](img/82a1cecf-66e2-4cc1-8b3f-f212f89db8fb.png)-axis:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们创建了一个轴对象 ax，以便更改 ![](img/82a1cecf-66e2-4cc1-8b3f-f212f89db8fb.png) 轴上的刻度标签：
- en: '[PRE62]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'This results in Figure 10.3:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 这产生了图 10.3：
- en: '![](img/0e5178b2-1f65-46fa-a11c-48e1267f916c.png)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0e5178b2-1f65-46fa-a11c-48e1267f916c.png)'
- en: 'Figure 10.3: Peak solar cell power per day in June 2020'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.3：2020 年 6 月每日太阳能电池板的峰值功率
- en: Here, we grouped all days within a month.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将一个月内的所有天数进行了分组。
- en: 'We can also jump hierarchies when grouping: In the preceding example we grouped
    days within a month but we can also group by hours within a month or even from
    the entire set. For example, to see if the price for electrical energy normally
    has two peaks per day, we can group the data by hour and form the mean:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在分组时跳过层级：在前面的示例中，我们按月分组了天数，但我们也可以按月内的小时进行分组，甚至可以从整个数据集中进行分组。例如，若要查看电能价格是否通常每天有两个峰值，我们可以按小时对数据进行分组并计算平均值：
- en: '[PRE63]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'These commands result in Figure 10.4:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令产生了图 10.4：
- en: '![](img/3ca5b399-dd25-445e-ac3d-cee442b937af.png)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3ca5b399-dd25-445e-ac3d-cee442b937af.png)'
- en: 'Figure 10.4: The result of data grouping hour-wise'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.4：按小时分组的数据结果
- en: 'Grouping data is often a starting point for getting answers to special questions
    that require computational steps on grouped data. For instance, in our example,
    we have the minute-wise power (in Watts) of the solar cells, but what is the hourly
    energy output in kWh of this system? To answer this question, we have to:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 数据分组通常是解决需要对分组数据进行计算步骤的特殊问题的起点。例如，在我们的示例中，我们有太阳能电池的逐分钟功率（以瓦特为单位），但这个系统的每小时能量输出（以千瓦时为单位）是多少？要回答这个问题，我们必须：
- en: Group the data hour-wise in a hierarchical way.
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以层次化的方式按小时对数据进行分组。
- en: Form the discrete integral of the data on 60 minute intervals.
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 形成基于 60 分钟间隔的离散数据积分。
- en: Store this in a new dataframe or series object.
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将其存储在一个新的数据框或序列对象中。
- en: 'For the first task, we make use of pandas'' ability to make a hierarchical
    indexer. We group hierarchically by year, month, day, and hour:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 对于第一个任务，我们利用 pandas 的层次索引功能。我们按年份、月份、日期和小时进行层次分组：
- en: '[PRE64]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Integration can be done in this case, as we started with the per-minute data,
    just by summing the data:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下可以进行积分，因为我们从每分钟数据开始，只需对数据进行求和：
- en: '[PRE65]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Then we visualize the result in the usual way:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们以常规方式可视化结果：
- en: '[PRE66]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'This gives us Figure 10.5:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给我们带来图 10.5：
- en: '![](img/11a87d19-fc4e-44d6-92b6-86a901817dd7.png)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
  zh: '![](img/11a87d19-fc4e-44d6-92b6-86a901817dd7.png)'
- en: 'Figure 10.5: An example plot of a dataframe produced by hierarchical grouping'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.5：通过层次分组生成的数据框示例图
- en: Alternatively, we could have used the command scipy.integrate.simps for the
    integration of discrete data as a parameter of the aggregate method, agg. As this
    function does not treat missing data, the remark at the end of [Section 10.4.2](6db12ffa-0569-4e1e-9059-2f7ada99c3e3.xhtml),
    Calculations within dataframes, applies, and we would have to replace all NaN values
    with 0 before we start.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们也可以使用命令 `scipy.integrate.simps` 来对离散数据进行积分，将其作为聚合方法 agg 的一个参数。由于此函数不处理缺失数据，因此在[第
    10.4.2 节](6db12ffa-0569-4e1e-9059-2f7ada99c3e3.xhtml)中的备注——数据框中的计算——适用，我们需要在开始之前将所有
    NaN 值替换为 0。
- en: 10.5 Summary
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 10.5 小结
- en: 'In this chapter, you got a brief introduction to pandas and saw how the concept
    of NumPy arrays is extended to dataframes. Instead of a never-complete explanation
    of the possibilities of dataframes, we guided you using an example of solar cell
    energy data through the first steps with pandas: setting up a dataframe from a
    file, merging frames, grouping data, and making calculations.'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你简要了解了 pandas，并看到了 NumPy 数组概念如何扩展到数据框。我们没有对数据框的所有可能性进行详尽的解释，而是通过一个太阳能电池能量数据的示例，带你完成了使用
    pandas 的第一步：从文件中设置数据框、合并数据框、分组数据并进行计算。
