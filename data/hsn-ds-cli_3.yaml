- en: Shell Workflows, and Data Acquisition and Massaging
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Shell 工作流、数据获取与处理
- en: In this chapter, we're going to work on an actual dataset and do some basic
    analysis. We'll learn how to download files straight from the command line, determine
    what type of file it is, and parse the data using a number of commands. We'll
    also cover how to perform non-interactive detached processing and review some
    common terminal multiplexers that enable us to prettify the command line as well
    as organize detached processing.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将处理一个实际的数据集并进行一些基本的分析。我们将学习如何从命令行直接下载文件，确定文件类型，并使用多个命令解析数据。我们还将介绍如何执行非交互式的脱离式处理，并回顾一些常见的终端复用器，它们能让我们美化命令行并组织脱离式处理。
- en: 'In this chapter, we''ll cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将涵盖以下主题：
- en: How to download a dataset using the command line
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用命令行下载数据集
- en: Using built-in tools to inspect the data and its type
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用内建工具检查数据及其类型
- en: How to perform a word count in bash
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在 bash 中执行字数统计
- en: Analyzing a dataset with some simple commands
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用一些简单的命令分析数据集
- en: Detached processing
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 脱离式处理
- en: Terminal multiplexers
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 终端复用器
- en: Download the data
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载数据
- en: 'Now that we have an understanding of the command line, let''s do something
    cool with it! Say we had a couple datasets full of book reviews from Amazon, and
    we wanted to only view the reviews about Packt Publishing. First, let''s go ahead
    and grab the data (if you are using the Docker container, the data is located
    in `/data`):'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经对命令行有了基本了解，那我们来做一些有趣的事情吧！假设我们有一些来自 Amazon 的书评数据集，而我们只想查看关于 Packt 出版社的评论。首先，我们先获取数据（如果你使用的是
    Docker 容器，数据位于 `/data`）：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You should see the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能看到以下内容：
- en: '![](img/f2aac57a-082c-4cb7-ba6a-9c13f894ce67.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f2aac57a-082c-4cb7-ba6a-9c13f894ce67.png)'
- en: We are introducing a couple of new commands and features here to download the
    files. First, we call the `curl` command to download the file. You can run `curl
    --help` to view all of the options available, or `man curl`, but we wanted to
    download a remote file and save it as the original filename, so we used the `-O`
    option. Second, notice the double ampersands (`&&`)? Since we want to download
    both files at the same time (with no errors), the double ampersand allows us to
    combine two commands together. If the first command fails, the second command
    won't run.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里介绍了一些新命令和功能来下载文件。首先，我们使用 `curl` 命令来下载文件。你可以运行 `curl --help` 来查看所有可用选项，或者运行
    `man curl`，但是我们想下载一个远程文件并保存为原始文件名，因此使用了 `-O` 选项。其次，注意双重与号（`&&`）吗？因为我们想同时下载两个文件（并确保没有错误），双重与号让我们能够将两个命令组合在一起。如果第一个命令失败，第二个命令就不会运行。
- en: 'Now you might be asking yourself, "What if I want to run multiple commands
    and I don’t care whether the first command fails, I want to it to run anyway!"
    Well, you''re in luck! If you replace the double ampersands with a semicolon, `ecoh
    "this isn''t a command" ; echo "but this is"`, you should see the following:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可能会问自己，“如果我想运行多个命令，并且不在乎第一个命令是否失败，我希望它仍然执行！”好消息来了！如果你用分号替换双重与号，`ecoh "this
    isn't a command" ; echo "but this is"`，你应该能看到以下内容：
- en: '![](img/178e9c6d-cb55-4576-9177-79b9a81a46b6.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/178e9c6d-cb55-4576-9177-79b9a81a46b6.png)'
- en: 'Ubuntu comes with a nice little helper if you mistype a command and recommends
    what command you probably should have typed. If you''re running this on another
    system, you might not see it, but you will see ecoh: command not found.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 'Ubuntu 自带一个小帮手，如果你输入命令时拼写错误，它会建议你应该输入的命令。如果你在其他系统上运行，可能不会看到这个提示，但你会看到类似 `ecoh:
    command not found` 的错误信息。'
- en: Using the file command
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 file 命令
- en: 'Once the data is done downloading, let''s take a look and see what we''ve got.
    Go ahead and run `ls -al amazon*` to make sure the files actually downloaded:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦数据下载完成，让我们来看一下我们得到了什么。运行 `ls -al amazon*` 来确保文件确实下载好了：
- en: '![](img/8da6abca-a1c2-4a65-a2d5-a72c05f82cb5.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8da6abca-a1c2-4a65-a2d5-a72c05f82cb5.png)'
- en: 'If you have anything else in this directory named `amazon`, that will show
    up as well. Now that the files are downloaded, let''s introduce a new command,
    called `file`. Go ahead and run the following `file amazon*` command:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在这个目录下还有其他名为 `amazon` 的文件，它们也会显示出来。文件下载完成后，让我们介绍一个新命令，叫做 `file`。接下来运行以下命令
    `file amazon*`：
- en: '![](img/d1768b27-0145-4e30-a424-deb99b199182.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d1768b27-0145-4e30-a424-deb99b199182.png)'
- en: Wow, without any parameters set, the `file` command was able to figure out that
    this is a compressed archive. You'll use the `file` command a lot to determine
    the type of files you're working with. Let's decompress the files so we can work
    with them. This might take a little bit, depending on the speed of your system.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 哇，`file`命令在没有任何参数的情况下，竟然能够识别出这是一个压缩档案。你将会经常使用`file`命令来确定你正在处理的文件类型。现在，让我们解压这些文件，这样我们就可以处理它们了。根据你系统的速度，这可能需要一点时间。
- en: 'To do so, run the following:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，执行以下命令：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Go ahead and run the `file` command again against the new datasets. Notice
    anything different? Check out the following:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行`file`命令来检查新的数据集。注意到什么不同了吗？请查看以下内容：
- en: '![](img/59ae892f-d678-4bc0-bc81-c8981092b201.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/59ae892f-d678-4bc0-bc81-c8981092b201.png)'
- en: 'Very cool! The `file` command was able to verify that we are working with text
    files, and it seems like a lot of text with very long lines. Let''s take a look
    and sample one of the datasets to see what we''re working with. To do so, we can
    use the `more` command:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 非常酷！`file`命令成功验证了我们正在处理文本文件，并且这些文件似乎包含了大量长行文本。让我们查看并提取其中一个数据集，看看我们在处理什么。为此，我们可以使用`more`命令：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We''ll just sample the first file we downloaded:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将只取样本中的第一个文件：
- en: '![](img/92bf324d-0b42-4afd-9d1e-af2d62b1ab62.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/92bf324d-0b42-4afd-9d1e-af2d62b1ab62.png)'
- en: Very long lines indeed! You can keep hitting the spacebar to view the file (it
    might take you a while to read the entire thing) and if you want to exit, just
    hit the *Q* key. Don't forget to `man more` for more information on more.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 的确是非常长的行！你可以不断按空格键来查看文件（不过阅读整个文件可能需要一段时间），如果你想退出，按下*Q*键即可。别忘了执行`man more`以获取更多关于more命令的信息。
- en: Performing a word count
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行词数统计
- en: 'Now that we have some data to work with, let''s combine the two files together
    into a single file. To do so, perform the following:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一些数据来处理，接下来让我们将两个文件合并成一个文件。为此，请执行以下操作：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This is what you should see once you run the preceding command:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 运行前面的命令后，你应该看到如下内容：
- en: '![](img/7241018d-c54e-44cf-a83b-42d2aa0548bc.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7241018d-c54e-44cf-a83b-42d2aa0548bc.png)'
- en: 'Excellent. Let''s say we wanted to count how many words or lines are in this
    file. Let''s introduce the `wc` command. `wc` is short for (you guessed it) word
    count. Let''s quickly `man wc` to see the options available:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 很好。假设我们想统计这个文件中的单词或行数。让我们来介绍一下`wc`命令。`wc`是“word count”（词数统计）的缩写。让我们快速执行`man
    wc`查看可用选项：
- en: '![](img/ccaeedfb-24a9-4743-bf3e-6882e82f1dd3.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ccaeedfb-24a9-4743-bf3e-6882e82f1dd3.png)'
- en: 'Looks like `wc` can count the lines and also the words of a file. Let''s see
    how many lines our file actually has:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来`wc`命令可以统计文件的行数以及单词数。让我们看看这个文件实际上有多少行：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The following is what you should see once you run the preceding command:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 运行前面的命令后，你应该看到如下内容：
- en: '![](img/590cf303-43ef-4450-8c3e-b9a74e1b171a.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/590cf303-43ef-4450-8c3e-b9a74e1b171a.png)'
- en: 'That''s a lot of lines! What about words? Run the following:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 行数确实不少！那单词数呢？执行以下命令：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![](img/3102dce5-0d23-4a24-874b-bd1bb0baa943.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3102dce5-0d23-4a24-874b-bd1bb0baa943.png)'
- en: 'This looks like a great dataset to use. It''s not big data by any means, but
    there''s a lot of cool stuff we can do with it. For example, did you notice the
    header in the file from earlier? It''s kind of hard to see since there''s a lot
    of data being displayed on the screen. Let''s strip just the headers out and see
    what we have:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这个数据集看起来是一个很不错的选择。虽然它并不算大数据，但我们可以做很多有趣的事情。例如，你是否注意到之前文件中的标题？由于屏幕上显示了很多数据，它有点难以看清。让我们只提取标题部分，看看我们得到的是什么：
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The following is what you should see once you run the preceding command:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 运行前面的命令后，你应该看到如下内容：
- en: '![](img/2be15f92-0612-418c-aa9e-c2cdf4ac61fd.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2be15f92-0612-418c-aa9e-c2cdf4ac61fd.png)'
- en: Great, now we have a list of the headers we can use. Let's clean this up a bit.
    Imagine we're only interested in the `produce_title`, `star_rating`, `review_headline`,
    and `review_body` columns. Copying and pasting throughout the file would take
    hours, so let's introduce a new command called `cut`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 很好，现在我们有了一份可以使用的标题列表。让我们稍微整理一下。如果我们只对`produce_title`、`star_rating`、`review_headline`和`review_body`这几列感兴趣，复制粘贴整个文件将需要花费很长时间。因此，让我们介绍一个新的命令`cut`。
- en: Introduction to cut
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 剪切命令简介
- en: 'Let''s break the command down before you run it. The `cut` command removes
    sections from each line of a file. The `-d` parameter tells `cut` we are working
    with a **tsv** (**tab separated values**), and the `-f` parameter tells `cut`
    what fields we are interested in. Since `product_title` is the sixth field in
    our file, we started with that:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在你运行命令之前，我们先来分析一下它。`cut` 命令用于删除文件中每行的部分内容。`-d` 参数告诉 `cut` 我们正在处理 **tsv**（**制表符分隔值**），而
    `-f` 参数告诉 `cut` 我们感兴趣的字段。由于 `product_title` 是文件中的第六个字段，我们从这里开始：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Unlike most programs, cut starts at 1 instead of 0.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 与大多数程序不同，`cut` 从 1 开始，而不是从 0。
- en: 'Let’s see the results:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看结果：
- en: '![](img/3e5b9e97-0f2a-4fbb-9c21-2b7957964837.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3e5b9e97-0f2a-4fbb-9c21-2b7957964837.png)'
- en: 'Much better! Let''s go ahead and save this as a new file:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 好得多！让我们将其保存为一个新文件：
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The following is what you should see once you run the preceding command:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是你在运行前述命令后应该看到的内容：
- en: '![](img/77975be4-837b-4a39-8e4f-46160cdcc79b.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/77975be4-837b-4a39-8e4f-46160cdcc79b.png)'
- en: 'Let''s see how many times the word `Packt` shows up in this dataset:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下 `Packt` 这个词在这个数据集中出现了多少次：
- en: '[PRE9]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The following is what you should see once you run the preceding command:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是你在运行前述命令后应该看到的内容：
- en: '![](img/90e2c665-7957-43fa-8979-1218f20e686c.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/90e2c665-7957-43fa-8979-1218f20e686c.png)'
- en: 'Let''s convert this from `.tsv` to `.csv` so we have a little more structure
    to work with:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将 `.tsv` 转换为 `.csv`，这样我们可以获得更多结构化的数据：
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The following is what you should see once you run the preceding command:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是你在运行前述命令后应该看到的内容：
- en: '![](img/1225f008-e7ca-4da8-8622-78cac6a5fb68.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1225f008-e7ca-4da8-8622-78cac6a5fb68.png)'
- en: 'Now let''s go ahead and filter out all of the reviews that have the word `Packt`
    in them:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续筛选出所有包含 `Packt` 的评论：
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The following is what you should see once you run the preceding command:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是你在运行前述命令后应该看到的内容：
- en: '![](img/e81a3ebe-053f-4949-ab4b-aa82d86d1bc0.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e81a3ebe-053f-4949-ab4b-aa82d86d1bc0.png)'
- en: Interesting! Using the commands you just learned, go ahead and play with this
    dataset for a bit.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 有意思！使用你刚学到的命令，接着玩玩这个数据集吧。
- en: We will talk more about the `tr` command in [Chapter 5](df05c890-510b-4e7e-8cc2-200f68f2febf.xhtml),
    *Loops, Functions, and String Processing*; for now, don't worry about it.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第5章](df05c890-510b-4e7e-8cc2-200f68f2febf.xhtml)《循环、函数和字符串处理》中进一步讨论`tr`命令；现在，暂时不用担心它。
- en: Detached processing
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分离处理
- en: Detached processing runs a command in the background. This means that terminal
    control is immediately returned to the shell process while the detached process
    runs in the background. With job control, these back grounded processes can be
    resumed in the foreground or killed directly.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 分离处理在后台运行一个命令。这意味着终端控制会立即返回给 Shell 进程，而分离的进程则在后台运行。通过作业控制，这些后台进程可以被恢复到前台或直接终止。
- en: How to background a process
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何将进程放入后台
- en: 'Remember when we used the double ampersand to conditionally execute two commands
    that run one after another? By using a single ampersand, you can fork a process
    in the background and let it run. Let''s use the command to save to a new file
    and run in the background:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 还记得我们使用双重和符号来有条件地执行两个命令，命令一个接着一个运行吗？通过使用单个和符号，你可以将一个进程放入后台并让它运行。我们使用该命令将数据保存为新文件并在后台运行：
- en: '[PRE12]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This will take the example from earlier but run it in the background, like
    so:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这将会使用前面提到的示例，但会在后台运行，如下所示：
- en: '![](img/30558519-96e7-416c-b387-e890277b52bf.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/30558519-96e7-416c-b387-e890277b52bf.png)'
- en: 'Notice to `<output> [1] 1504</output>` that was printed (avoiding all the output!)
    this shows you that the job was run successfully in the background. You can run
    `tail -F background_words.txt` to view the data in real time as it runs in the
    background:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 `<output> [1] 1504</output>` 这行输出（避免了所有输出！）显示该作业已经成功在后台运行。你可以运行 `tail -F
    background_words.txt` 以实时查看后台运行的数据：
- en: '![](img/195ad611-7a1f-4fce-aeeb-afb903f2507e.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/195ad611-7a1f-4fce-aeeb-afb903f2507e.png)'
- en: 'To bring the job back from the **bg** (**background**), type `fg` and you brought
    the process back to the foreground like so:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 要将作业从 **bg**（**后台**）恢复到前台，输入 `fg`，你就能像这样把进程带回前台：
- en: '![](img/0a4a5258-a18d-4b27-bd0f-00f72371b60b.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0a4a5258-a18d-4b27-bd0f-00f72371b60b.png)'
- en: Go ahead and run a couple of commands in the background. You can use the `jobs` command
    to view them all. Feel free to check the manual page for the `jobs` command by
    entering `man jobs` for more options.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 继续运行几个后台命令。你可以使用 `jobs` 命令查看它们。想了解更多选项，可以输入 `man jobs` 查阅 `jobs` 命令的手册。
- en: Disregarding SIGHUP
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 忽略 SIGHUP
- en: Commands are attached to their controlling command-line terminal by default.
    When the command line terminates, child processes (backgrounded or not) are sent
    a SIGHUP and should terminate. Let's say you wanted to run a command and keep
    it running if you log out. `nohup` comes in handy, especially if you're working
    on remote systems and have a need to log out, or you're worried about your connection
    to the server that keeps disconnecting (I'm looking at you, Amtrak WiFi).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，命令会附加到它们控制的命令行终端。当命令行终止时，子进程（无论是否在后台运行）会收到一个 SIGHUP 信号并应该终止。假设你想运行一个命令并在退出时保持它继续运行，`nohup`
    就派上用场了，尤其是当你在远程系统上工作并需要退出，或者你担心与服务器的连接总是断开（我在看你，Amtrak WiFi）。
- en: 'Go ahead and run the command we ran earlier, but add `nohup` to the beginning,
    like so:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 继续运行我们之前执行的命令，但在前面加上`nohup`，像这样：
- en: '[PRE13]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now, log out of your shell by typing `logout` or by using `control-d`, and then
    bring the shell back up and run `tail` `-f background_words.txt`. You’ll notice
    that the command is still running in the background and the file is being updated.
    You might have tried to bring the command back by issuing `fg` and noticed it
    didn't work. Keep that in mind as `nohup` the command will run until completion
    or failure or until you `kill` the process. Feel free to check out the manual
    page for `kill` by doing a `man kill`, as there's a lot of options to choose from.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，通过输入 `logout` 或使用 `control-d` 来退出你的 shell，然后重新打开 shell 并运行 `tail` `-f background_words.txt`。你会注意到，命令仍然在后台运行，文件也在不断更新。你可能尝试通过输入
    `fg` 来恢复命令，但会发现它没有生效。记住，`nohup` 命令会一直运行直到完成、失败，或者你用 `kill` 杀掉进程。随时可以查看 `kill`
    的手册页面，执行 `man kill`，因为有很多选项可以选择。
- en: Terminal multiplexers
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 终端复用器
- en: Let's now take a look at the `screen` command, it will give you the ability
    to do many different things, as we will see in the following section.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看一下 `screen` 命令，它将赋予你做很多不同操作的能力，正如我们在接下来的章节中所看到的那样。
- en: Introduction to screen
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`screen` 介绍'
- en: So far, you've learned how to run a command in the background and you've mastered `nohup`.
    Now it's time to talk about the `screen` command. `screen` gives you the ability
    to attach and detach sessions on the fly, keep a shell active even with network
    disruptions, disconnect and reconnect to a shell from multiple locations, share
    a shell with a remote user, and keep a long-running process running without maintaining
    an active session.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经学会了如何将命令放到后台运行，并且掌握了 `nohup`。现在是时候谈谈 `screen` 命令了。`screen` 让你可以随时附加和分离会话，保持
    shell 即使在网络中断的情况下仍然活跃，可以从多个位置断开并重新连接 shell，与你的远程用户共享 shell，甚至在不中断会话的情况下让长时间运行的进程继续运行。
- en: 'First, let''s make sure you have `screen` and `tmux` (we will use `tmux` later)
    installed. In Ubuntu, run the following:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们确保你已经安装了 `screen` 和 `tmux`（我们稍后会使用 `tmux`）。在 Ubuntu 中，运行以下命令：
- en: '[PRE14]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You might already have it installed (depending on which version of Ubuntu you
    are running), but better safe than sorry. Now, let''s go ahead and fire up `screen`:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经安装了它（取决于你使用的 Ubuntu 版本），但为了安全起见，我们还是安装一下。现在，让我们启动 `screen`：
- en: '[PRE15]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You should see the following:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下内容：
- en: '![](img/b957ab2c-0c8b-4874-a95b-f51200776821.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b957ab2c-0c8b-4874-a95b-f51200776821.png)'
- en: Go ahead and send the team some pizza and beer (really, these folks are great!)
    and hit the spacebar to continue. You'll notice... well, nothing really changed.
    The command prompt is still the same, just some information about copyrights and
    where to send beer money appeared. Let's go ahead and run a new command, called
    `top`. The top command (table of processes) shows you all of the processes that
    are currently running. Go ahead and give it a try!
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 给团队送点比萨和啤酒（真的，这些人太棒了！），然后按空格键继续。你会注意到...嗯，实际上什么也没改变。命令提示符还是原来的样子，只是一些关于版权和发送啤酒钱的信息出现了。现在让我们继续运行一个新命令，叫做
    `top`。`top` 命令（进程表）显示了当前正在运行的所有进程。来试试吧！
- en: Your output will look slightly different.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 你的输出看起来会稍有不同。
- en: 'Execute the `top`:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 执行 `top`：
- en: '[PRE16]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'With `top` running:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `top` 正在运行时：
- en: '![](img/5af8c382-7786-4d5c-ac7a-01744ce80e75.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5af8c382-7786-4d5c-ac7a-01744ce80e75.png)'
- en: Admire the awesomeness of `top`. This is a great command to use if you ever
    what to know what’s taking up a lot of the system's resources.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 欣赏一下 `top` 的强大功能。如果你想知道哪些进程占用了大量系统资源，这是一个很棒的命令。
- en: 'While `top` is running, let''s go ahead and detach from `screen`. Type the
    following:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `top` 正在运行时，让我们从 `screen` 中分离出来。输入以下命令：
- en: '[PRE17]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Notice that the screen went back to a clean shell:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到屏幕已经回到干净的 shell 界面：
- en: '![](img/b32fa950-cfaa-4680-9f4d-c295bd9d4f2e.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b32fa950-cfaa-4680-9f4d-c295bd9d4f2e.png)'
- en: To check whether the `screen` session is still active, let's go ahead and run `screen
    -r`. Notice that the `top` command didn't die—it ran in a screen session. What's
    great is that you can log out of this session, reconnect, and attach the `screen` session
    like nothing happened. It's very useful for running long processes from a laptop
    or any place where you'll need to disconnect for a bit.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查`screen`会话是否仍然活跃，继续运行`screen -r`。注意，`top`命令并没有死掉——它在一个screen会话中运行。最棒的是，你可以从这个会话中退出，重新连接，并像什么都没发生一样附加上`screen`会话。对于在笔记本或任何需要暂时断开连接的地方运行长时间进程，这非常有用。
- en: Go ahead and run multiple `screen` sessions. You can view them by running `screen
    -list`.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 继续运行多个`screen`会话。你可以通过运行`screen -list`查看它们。
- en: Sharing a screen session between multiple users
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在多个用户之间共享屏幕会话
- en: 'We''ve all been there: trying to troubleshoot someone''s code remotely when
    you’re unable to see what’s going on is a very painful process. A user can create
    a shared session by doing the following:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们都经历过这种情况：在远程排查别人的代码时，无法看到具体情况是一个非常痛苦的过程。用户可以通过以下方式创建一个共享会话：
- en: '[PRE18]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'And while you''re logged into the same machine, go ahead and type the following:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 当你登录到同一台机器时，继续输入以下内容：
- en: '[PRE19]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Introduction to tmux
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`tmux`简介'
- en: '`tmux` is the newest terminal multiplexer on the block, with a lot of great
    features to enhance your command line skills and provides a lot of features over
    just the standard shell. Let''s fire it up and check it out:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`tmux`是最新的终端复用器，拥有许多很棒的功能，能够增强你的命令行技能，并提供比标准shell更多的功能。让我们启动它并查看一下：'
- en: '[PRE20]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'You should see something like this when you run `tmux`:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行`tmux`时，应该会看到如下内容：
- en: '![](img/51786fc8-18b1-432b-9ff5-269c8b6ea57d.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/51786fc8-18b1-432b-9ff5-269c8b6ea57d.png)'
- en: Output for tmux command
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`tmux`命令的输出'
- en: One thing to keep in mind is that, by default, all `tmux` commands require the
    prefix *Ctrl* +* B* before you can run `tmux` commands. For example, let's try
    a couple out. Having one shell window is great, but how about two?
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 需要记住的一件事是，默认情况下，所有`tmux`命令都需要在运行`tmux`命令之前按下*Ctrl* + *B*前缀。例如，让我们试几个命令。一个shell窗口很棒，但两个怎么样？
- en: '![](img/0e3240d0-30a9-4e40-9f9c-0bef63e3bf16.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0e3240d0-30a9-4e40-9f9c-0bef63e3bf16.png)'
- en: Output for tmux command with two shells
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`tmux`命令的输出（带有两个shell）'
- en: How about two more but on the bottom?
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 那么底部再加两个怎么样？
- en: '[PRE21]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '![](img/9e72c8f3-2699-496e-9b27-9837ea9f0f57.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9e72c8f3-2699-496e-9b27-9837ea9f0f57.png)'
- en: Pretty awesome, right? Go ahead and customize your `tmux` session to your liking.
    There's a bunch of options located in the `man` page, `man tmux`, to choose from.
    Our personal favorites are `<key>Ctrl+b</key> : setw` `synchronize-panes` on `<key>enter</key>`.
    Now, go ahead and type `top`. Did you notice that all of the panes are the same?
    This comes in handy when you're logged into multiple servers and need to run a
    command across them all manually.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '相当棒吧？继续根据你的喜好定制你的`tmux`会话。可以从`man`页面（`man tmux`）中找到一堆选项。我们个人最喜欢的是`<key>Ctrl+b</key>
    : setw` `synchronize-panes` on `<key>enter</key>`。现在，继续输入`top`。你有没有注意到所有的窗格都是一样的？当你登录到多个服务器并需要在它们之间手动运行命令时，这个功能非常有用。'
- en: Summary
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we only scratched the surface on what we can do with the command
    line. We were able to download a dataset, save it, inspect the file type, and
    perform some simple analytics. The word count example is considered the "Hello,
    World" of data science and we saw just how easy it is to perform in bash.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们仅仅触及了命令行可以做的事情的表面。我们能够下载数据集，保存它，检查文件类型，并进行一些简单的分析。词数统计示例被视为数据科学的“Hello,
    World”，我们看到了在bash中进行操作是多么简单。
- en: We then took your shell customization to the next level by using terminal multiplexers
    and background processes. Think of it like using an IDE, but for the command line.
    It will make working with bash a lot easier.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们通过使用终端复用器和后台进程将你的shell定制提升到了一个新水平。可以把它想象成使用IDE，但这是针对命令行的。它会让使用bash变得更轻松。
- en: Being able to control processes and workflows will improve productivity. Detached
    processing ensures programs can complete without interruption. The terminal multiplexer
    provides a means of maximizing the use of screen real-estate, while also providing
    a detached processing environment, which is a double win for all.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 能够控制进程和工作流将提高生产力。分离处理确保程序能够在不中断的情况下完成。终端复用器提供了一种最大化屏幕空间使用的方式，同时提供分离的处理环境，对所有人来说都是双赢。
- en: In the next chapter, we'll explore reusable shell bash scripts and functions.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将探讨可重用的 shell bash 脚本和函数。
