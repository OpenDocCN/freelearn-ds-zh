- en: Chapter 8. Looking Forward
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 8 章. 展望未来
- en: 'Congratulations! You are now a proud owner of your very own GIS application;
    but not really. In reality, you have only started the journey. The application
    we created is still very basic, and while it has some of the core essential features,
    it lacks many others. You probably also have a few ideas and customizations that
    you want to implement on your own. Before we send you off to fend for yourself,
    in this final chapter we will look at some of the ways that you can move forward
    with your application:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您现在已经成为您自己的 GIS 应用程序的骄傲所有者；但并非真的如此。实际上，您只是开始了这段旅程。我们创建的应用程序仍然非常基础，尽管它具有一些核心基本功能，但还缺少许多其他功能。您可能也有一些想法和自定义设置想要自己实现。在我们让您自己去应对之前，在本章的最后，我们将探讨一些您可以继续前进的方法：
- en: Areas where the existing user interface should be improved
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应该改进现有用户界面的区域
- en: Some tips on building alternative GUI layouts using our toolkit
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用我们的工具包构建替代 GUI 布局的几点建议
- en: Suggestions for additional GIS functionality to add to the application
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向应用程序添加额外 GIS 功能的建议
- en: How to go about supporting your application on additional platforms such as
    Mac and mobile devices
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在 Mac 和移动设备等额外平台上支持您的应用程序
- en: Improvements to the user interface
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 改进用户界面
- en: In the application, we made in this book, we tried to give it a modern and intuitive
    design. However, since we had to balance this with also building GIS content,
    there are several user interface aspects we were not able to address.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中我们创建的应用程序中，我们试图给它一个现代且直观的设计。然而，由于我们必须在构建 GIS 内容的同时保持这种平衡，因此有几个用户界面方面我们没有能够解决。
- en: Saving and loading user sessions
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保存和加载用户会话
- en: One obvious thing that is missing from our general user interface is that we
    have no way to save or load a user session. That is, saving the current state
    of loaded layers and their properties, the sequence of layers, general map options,
    projection, zoom level, and so on, so that we can return to the same application
    session we previously used. The **Home** tab will be a good place for a load and
    save session button, which can also be called on with the keyboard shortcuts *Ctrl*
    + *O* and *Ctrl* + *S*.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通用用户界面中缺失的一个明显功能是没有保存或加载用户会话的方法。也就是说，保存当前加载图层的状态及其属性、图层顺序、通用地图选项、投影、缩放级别等，以便我们可以返回到之前使用的相同应用程序会话。**主页**标签将是一个放置加载和保存会话按钮的好地方，这个按钮也可以通过键盘快捷键
    *Ctrl* + *O* 和 *Ctrl* + *S* 来调用。
- en: In order to save these settings, we will have to come up with a file format
    specification as well as an identifiable filename extension. This can be, for
    instance, a simple JSON text file ending with `.pgs` (short for Python GIS if
    that is the name of your application) containing a dictionary or dictionaries
    of options. Layers can be reloaded based on their origin file path, and perhaps
    the user can be forced to save to file any virtual layers.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保存这些设置，我们不得不想出一个文件格式规范以及一个可识别的文件名扩展名。例如，这可以是一个以 `.pgs` 结尾的简单 JSON 文本文件（如果您的应用程序名称是
    Python GIS，那么这就是它的缩写），其中包含一个或多个选项字典。可以根据原始文件路径重新加载图层，也许还可以强制用户保存任何虚拟图层到文件中。
- en: File drag and drop
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文件拖放
- en: Adding data layers with the **Add Layer** button is fine, but sometimes it can
    be a hassle to have to repeatedly locate the files each time, especially if they
    are located in deeply nested folders in multiple locations. Dragging and dropping
    series of files from already opened Windows folders to the application window
    is often a preferred way to add layers. Currently, we have not added any support
    for this in our application because Tkinter has no built-in support for detecting
    drag and drop between applications.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 使用**添加图层**按钮添加数据图层是可行的，但有时每次都需要重复定位文件，尤其是如果它们位于多个位置的深层嵌套文件夹中。从已经打开的 Windows
    文件夹拖放一系列文件到应用程序窗口通常是添加图层的一种更受欢迎的方式。目前，我们还没有在我们的应用程序中添加对此的支持，因为 Tkinter 没有内置的检测应用程序间拖放的功能。
- en: Note
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Luckily, there exists a `Tk` extension for this called TkDND at SourceForge
    which you will have to setup: [http://sourceforge.net/projects/tkdnd/](http://sourceforge.net/projects/tkdnd/).
    The following Python wrapper posted on StackOverflow should let you access this
    `Tk` extension in your Tkinter application: [http://stackoverflow.com/questions/14267900/python-drag-and-drop-explorer-files-to-tkinter-entry-widget](http://stackoverflow.com/questions/14267900/python-drag-and-drop-explorer-files-to-tkinter-entry-widget).'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，在SourceForge上存在一个名为TkDND的`Tk`扩展，您需要设置它：[http://sourceforge.net/projects/tkdnd/](http://sourceforge.net/projects/tkdnd/)。以下是在StackOverflow上发布的Python包装器，它应该可以让您在Tkinter应用程序中访问这个`Tk`扩展：[http://stackoverflow.com/questions/14267900/python-drag-and-drop-explorer-files-to-tkinter-entry-widget](http://stackoverflow.com/questions/14267900/python-drag-and-drop-explorer-files-to-tkinter-entry-widget)。
- en: GUI widgets
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GUI小部件
- en: A great deal of our application framework has been spent tweaking and creating
    our own custom widget templates, for the purposes of widget styling and code reusability.
    As you move forward, I suggest following this logic even further so it becomes
    easier for you to build and extend the user interface. For instance, in our `RunToolFrame`,
    we created a method that will add commonly needed combinations of widgets inside
    that particular frame. However, to make it even more flexible you can make these
    into widget classes of their own so you can place them anywhere inside your application.
    In particular, I would suggest adding scrollbars to your widgets, which is something
    our current application is lacking.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在应用程序框架上投入了大量精力，用于调整和创建我们自己的自定义小部件模板，目的是为了小部件的样式化和代码重用性。随着您的前进，我建议进一步遵循这种逻辑，使其更容易构建和扩展用户界面。例如，在我们的`RunToolFrame`中，我们创建了一个方法，可以在该特定框架内添加常用的小部件组合。然而，为了使其更加灵活，您可以将这些组合变成独立的小部件类，这样您就可以在应用程序的任何地方放置它们。特别是，我建议为您的控件添加滚动条，这是我们当前应用程序所缺少的。
- en: On a more superficial note, although Tkinter generally has a nice look, especially
    with custom styling, some of our application widgets still look a bit out of place,
    such as the drop-down choice menu. With some style experimentation though, you
    should be able to improve its look. Alternatively, Python 2.7 and newer versions
    come packaged with a Tkinter extension module called **ttk**, which provides a
    newer looking ComboBox drop-down widget, among many others. The only difference
    that you should note, if you choose to switch to ttk widgets is that, they are
    styled using a different approach that requires you to make changes to the old
    Tkinter based code.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在更表面的层面上，尽管Tkinter通常看起来不错，尤其是在自定义样式下，但我们的一些应用程序小部件仍然显得有些不协调，比如下拉选择菜单。不过，通过一些样式实验，您应该能够改善其外观。或者，Python
    2.7及更高版本包含一个名为**ttk**的Tkinter扩展模块，它提供了许多新的下拉小部件，如ComboBox。如果您选择切换到ttk小部件，请注意的唯一区别是，它们使用不同的方法进行样式化，这需要您对基于旧Tkinter的代码进行更改。
- en: Other variations of the user interface
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户界面的其他变体
- en: The beauty of our approach to building a flexible toolkit of GIS-related widgets,
    is that they can be used, positioned, and combined in any number of ways, rather
    than locking ourselves to the traditional "LayersPane-MapView" layout of a GIS.
    For instance, here are some interesting examples of useful ways to create different
    types of GIS applications and layouts.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们构建灵活的GIS相关小部件工具包的方法之美在于，它们可以以任何数量的方式使用、定位和组合，而不是将自己锁定在GIS的传统“图层面板-地图视图”布局中。例如，这里有一些创建不同类型GIS应用程序和布局的有用方式的有趣示例。
- en: 'Instead of just a single-map GIS application, you can split the window into
    multiple windows, say 2 or 4 maps with a LayersPane in the middle. By connecting
    each map to the same LayerGroup and LayersPane, the layer sequence and symbolizations
    you define there will affect all of the maps, but with the added benefit that
    you can have multiple eyes on the same data, at different locations and zoom levels.
    Refer to the following screenshot:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是仅仅一个地图的GIS应用程序，您可以将窗口分割成多个窗口，比如中间有一个图层面板的2个或4个地图。通过将每个地图连接到相同的图层组和图层面板，您定义的图层序列和符号化将影响所有地图，但您还可以拥有多个视角查看相同的数据，在不同的位置和缩放级别。参考以下截图：
- en: '![Other variations of the user interface](img/5407OS_08_01.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![用户界面的其他变体](img/5407OS_08_01.jpg)'
- en: Alternatively, you don't have to have all of the widgets there at all. You can
    create a minimalistic map-only application, where layers can be preloaded and/or
    managed in a different or a more discrete way. Alternatively, you can have a more
    management-oriented application with only the LayersPane and the functionality
    to manage and organize your files.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你不必在所有地方都拥有所有的小部件。你可以创建一个极简的仅地图应用程序，其中图层可以预先加载和/或以不同的或更隐蔽的方式进行管理。或者，你可以拥有一个更注重管理的应用程序，其中只包含图层面板和用于管理和组织文件的功能。
- en: Finally, remember that all of our widgets are styled and easily changed based
    on color and font instructions in our `app/toolkit/theme.py` module. We built
    it like that for a reason, so make use of it!
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，请记住，我们所有的部件都是根据`app/toolkit/theme.py`模块中的颜色和字体说明进行样式化和轻松更改的。我们这样设计是有原因的，所以请充分利用它！
- en: Adding more GIS functionality
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加更多GIS功能
- en: There are loads of GIS functionalities that you may wish to add to your application.
    Of the many pre-existing modules and libraries available, here are just a few
    suggestions as to what is mostly needed and possible to do. A more comprehensive
    list can be found at [www.pythongisresources.wordpress.com](http://www.pythongisresources.wordpress.com)
    or on the Python Package Index website.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能希望将许多GIS功能添加到你的应用程序中。在许多现有的模块和库中，这里只是提供了一些建议，关于通常需要和可能做到的事情。更全面的列表可以在[www.pythongisresources.wordpress.com](http://www.pythongisresources.wordpress.com)或Python包索引网站上找到。
- en: Note
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more in-depth implementations of some of these tools, and further reading
    and ideas on how to implement a GIS application in Python, refer to *Python Geospatial
    Development - Second Edition* by Erik Westra.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一些这些工具的更深入实现，以及如何在Python中实现GIS应用程序的进一步阅读和想法，请参阅Erik Westra所著的*Python地理空间开发
    - 第二版*。
- en: Basic GIS selections
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本GIS选择
- en: There are a few core data selection functions that we have still not implemented.
    Importantly, these include the ability to subset a layer based on a data query,
    or spatially cropping it based on a region bounding box or overlap with another
    layer. Both of these should be as simple as looping through the features and only
    keeping the matches from the attribute query or spatial query. The ability to
    view the actual information stored in vector data is also something we are currently
    lacking, such as in a table or with a feature identification tool where the user
    can click on any vector feature or raster cell and view their attributes or values.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有一些核心数据选择功能尚未实现。重要的是，这些包括基于数据查询对图层进行子集化，或基于区域边界框或与其他图层的重叠进行空间裁剪的能力。这两者都应该像遍历特征并仅保留来自属性查询或空间查询的匹配项一样简单。查看存储在矢量数据中的实际信息的能力也是我们目前所缺乏的，例如在表格中或在特征识别工具中，用户可以点击任何矢量特征或栅格单元并查看它们的属性或值。
- en: More advanced visualization
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更高级的可视化
- en: Currently, our application is not very flexible when it comes to visualizing
    data. Vector data is rendered with a single random color for all features, and
    rasters as greyscale or RGB, with no ability to change it. However, using our
    RunToolFrame widget, it should be easy to pack it inside a **Symbology** ribbon
    tab in the layer's properties window and assign input widgets and a function that
    updates that layer's `styleoptions` dictionary and redraws it.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们的应用程序在可视化数据方面不太灵活。矢量数据以单个随机颜色渲染所有特征，栅格数据以灰度或RGB渲染，没有更改的能力。然而，使用我们的RunToolFrame小部件，应该很容易将其打包到图层属性窗口中的**符号**选项卡中，并分配输入小部件和更新该图层`styleoptions`字典并重新绘制它的函数。
- en: Even with this though, a hallmark of GIS visualization is that we should also
    be able to have these colors and sizes vary based on each vector feature's attributes
    in order to visualize patterns. Similarly, we need to be able to label layers
    by rendering text over each feature based on its attributes. Finally, we should
    be able to add cartographic elements to the map such as adding a custom title,
    placing a legend, a scale, and a north arrow. These are some very exciting areas
    that you can work on improving.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，GIS可视化的一个标志是我们也应该能够根据每个矢量特征的属性来改变这些颜色和大小，以便可视化模式。同样，我们需要能够根据其属性在特征上渲染文本来标记图层。最后，我们应该能够向地图添加制图元素，例如添加自定义标题、放置图例、比例尺和指向北方的箭头。这些都是你可以努力改进的一些非常激动人心的领域。
- en: Online data services
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在线数据服务
- en: For our application, we built the capability to load data by pointing it to
    a file path on your computer, which is the traditional way of working in a GIS.
    But it is increasingly common to load generic background data or regularly updated
    data feeds such as satellite imagery directly from the web, via the **Open Geospatial
    Consortium** (**OGC**) web service interface standard.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的应用程序，我们构建了通过指向您计算机上的文件路径来加载数据的功能，这是在GIS中工作的传统方式。但是，直接从网络加载通用背景数据或定期更新的数据流，如卫星图像，变得越来越常见，这可以通过**开放地理空间联盟**（**OGC**）的Web服务接口标准实现。
- en: In Python, I would recommend using OWSLib which lets you access a wide variety
    of online services and data sources, and has great documentation for learning
    more about it.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，我推荐使用OWSLib，它允许你访问各种在线服务和数据源，并且提供了很好的文档来学习更多关于它的信息。
- en: Note
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'For a more concrete example, see how PyEarthquake uses web services for retrieving
    real-time earthquake data:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更具体的例子，看看PyEarthquake是如何使用Web服务检索实时地震数据的：
- en: '[http://blog.christianperone.com/?p=1013](http://blog.christianperone.com/?p=1013)'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://blog.christianperone.com/?p=1013](http://blog.christianperone.com/?p=1013)'
- en: Converting between raster and vector data
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在栅格和矢量数据之间进行转换
- en: The ability to convert from a raster grid to vector data of square polygons
    or center points for more custom processing, or to convert from vector data to
    a raster grid of a given resolution, is frequently needed. Both of these are currently
    missing from our application, but should be fairly easy and useful to implement
    within our existing framework. Rasterizing vector data is essentially the same
    as drawing it on an image, so you can just draw it to the desired raster resolution
    using PIL or PyAgg. To vectorize raster data, you can loop through the cells of
    your raster and create a point geometry at each cell's *x* and *y* coordinates
    (or polygon geometry based on the cell bounding box). Alternatively, you can use
    GDAL that already has functions for both rasterizing and vectorizing.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 将栅格网格转换为正方形多边形或中心点的矢量数据，以便进行更定制化的处理，或者将矢量数据转换为给定分辨率的栅格网格，这是经常需要的。这两种功能目前在我们的应用程序中缺失，但应该在现有的框架内实现起来既简单又实用。将矢量数据栅格化本质上等同于在图像上绘制它，因此你可以直接绘制到所需的栅格分辨率，使用PIL或PyAgg。要将栅格数据矢量化，你可以遍历栅格的单元格，并在每个单元格的*x*和*y*坐标（或基于单元格边界框的多边形几何）处创建一个点几何。或者，你可以使用GDAL，它已经具有栅格化和矢量化功能的函数。
- en: Projections
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 投影
- en: As it currently stands, our application can process and visualize data defined
    in any projection, but it cannot convert between these projections. So if multiple
    data have different projections, then there is no way to position or analyze them
    correctly in relation to each other. Luckily, PyProj is an excellent and widely
    used Python package based on PROJ4 for converting coordinates from one projection
    to another and is fairly lightweight. With this, you can add tools to define and
    convert layer projections and to set on-the-fly reprojection of all layers into
    a common map projection.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如目前所示，我们的应用程序可以处理和可视化定义在任何投影中的数据，但它不能在这些投影之间进行转换。所以如果有多个数据具有不同的投影，那么就没有办法正确地将它们定位或分析彼此之间的关系。幸运的是，PyProj是一个基于PROJ4的优秀的、广泛使用的Python包，用于将坐标从一个投影转换为另一个投影，并且相当轻量级。有了这个，你可以添加定义和转换图层投影的工具，以及设置所有图层即时重投影到通用地图投影的工具。
- en: The most difficult part is that there are numerous formats in which projections
    are stored, such as EPSG codes, OGC URN codes, ESRI WKT, OGC WKT, +proj strings,
    and GeoTIFF definitions, to name but a few. PyProj requires that projections be
    defined as +proj strings, so the challenge will be to correctly detect, parse,
    and convert whichever projection format a file is stored in, over to +proj format.
    GDAL is the best way to handle these translations, or using [http://www.spatialreference.org](http://www.spatialreference.org)
    if you only expect to receive codes such as EPSG.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 最困难的部分是投影存储的格式种类繁多，例如EPSG代码、OGC URN代码、ESRI WKT、OGC WKT、+proj字符串和GeoTIFF定义，仅举几例。PyProj要求将投影定义为+proj字符串，因此挑战在于正确检测、解析和将文件存储的任何投影格式转换为+proj格式。GDAL是处理这些转换的最佳方式，或者如果你只期望接收EPSG等代码，可以使用[http://www.spatialreference.org](http://www.spatialreference.org)。
- en: Geocoding
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 地理编码
- en: Today, geocoding of addresses and other textual information into coordinates
    is relatively easy using free online search websites and their programming-friendly
    APIs. GeoPy is a Python package that provides access to numerous online geocoding
    services, such as OpenStreetMap, Google, Bing, and many others. This can be added
    to your application either as a tool for geocoding a table based on a field containing
    textual locations, or by providing an interactive geocoding search widget that
    shows the resulting matches on the map.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，使用免费的在线搜索网站及其编程友好的 API，将地址和其他文本信息地理编码到坐标中相对容易。GeoPy 是一个 Python 包，它提供了访问众多在线地理编码服务的权限，例如
    OpenStreetMap、Google、Bing 以及许多其他服务。这可以添加到你的应用程序中，既可以作为一个基于包含文本位置的字段的表地理编码的工具，也可以提供一个交互式地理编码搜索小部件，该小部件在地图上显示结果匹配项。
- en: Going the GDAL/NumPy/SciPy route
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 采用 GDAL/NumPy/SciPy 方案
- en: If you, at some point, decide to add GDAL, NumPy, and SciPy as dependencies
    to your application, it will add about 100 MB of additional size to your application,
    but will also open up a lot of new doors. For instance, the problem of translating
    between different projection formats will be solved by functions available in
    GDAL. Adding GDAL and NumPy will also let you add a host of new data loading and
    saving capabilities, and especially open up for raster management, analysis, and
    resampling methods using packages like PyResample, RasterStats, and even raster
    interpolation via SMEAR. For vector data, it will also open the door for more
    advanced spatial statistic and hotspot analysis as available in PySAL or various
    clustering algorithms using PyCluster. Matplotlib combined with Basemap or Cartopy
    may provide all the visual projection support you need without much extra work
    on your end.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你，在某个时刻，决定将 GDAL、NumPy 和 SciPy 添加为应用程序的依赖项，这将使你的应用程序增加大约 100 MB 的额外大小，但也将打开许多新的大门。例如，不同投影格式之间的转换问题将通过
    GDAL 中提供的函数得到解决。添加 GDAL 和 NumPy 还将让你添加大量新的数据加载和保存功能，特别是通过 PyResample、RasterStats
    和甚至通过 SMEAR 进行栅格插值等方法，打开栅格管理、分析和重采样的方法。对于矢量数据，它还将为 PySAL 或使用 PyCluster 的各种聚类算法提供更高级的空间统计和热点分析。Matplotlib
    结合 Basemap 或 Cartopy 可能会提供你需要的所有视觉投影支持，而无需你做太多额外的工作。
- en: Expanding to other platforms
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展到其他平台
- en: For now, I can attest that the application works on Windows 7 and even Windows
    8 (single-touch navigation of the MapView is especially fun). However, at some
    point you may find yourself needing to share your GIS application on platforms
    other than Windows. Python and most of our application's dependencies are in principle
    cross-platform, and I have personally tested that the application framework that
    I created over the course of this book also worked on a Mac OS X, though with
    slightly different installation instructions.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我可以证实该应用程序在 Windows 7 上运行良好，甚至 Windows 8（特别是 MapView 的单点触摸导航特别有趣）。然而，在某个时刻，你可能会发现自己需要将你的
    GIS 应用程序分享到除 Windows 之外的其他平台上。Python 和我们应用程序的大多数依赖项原则上都是跨平台的，我亲自测试过，我在本书中创建的应用程序框架在
    Mac OS X 上也能运行，尽管安装说明略有不同。
- en: When you are finished creating your application and are ready to distribute
    it, just get a hold of the operating system that you want to support, install
    the necessary third-party libraries, and copy and paste your application folder.
    If the application works from within Python, then just wrap it all up with one
    of the packaging libraries for your operating system that were suggested in [Chapter
    7](ch07.html "Chapter 7. Packaging and Distributing Your Application"), *Packaging
    and Distributing Your Application*.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当你完成应用程序的创建并准备分发它时，只需获取你想要支持的操作系统，安装必要的第三方库，然后复制并粘贴你的应用程序文件夹。如果应用程序在 Python
    中运行良好，那么只需使用第 7 章中建议的操作系统打包库之一将其打包即可，第 7 章是“打包和分发你的应用程序”。
- en: Touch devices
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 触摸设备
- en: A more trendy and exciting possibility is to be able to port your application
    to the newer wave of recreational tablets and other mobile touch devices. Our
    current Tkinter user interface approach is unfortunately not able to be packaged
    for use on, or contain multitouch gesture support for, phones like Android or
    iPhone or tablets like iPad. If these are your main audiences, you can possibly
    keep the GIS processing engine, but may wish to switch the user interface to one
    based on Kivy, a newer GUI package which is gaining in popularity, which supports
    multitouch inputs, and is said to support packaging for Android, iPhone, and iPad.
    If you only want to support iOS, then the Pythonista app provides a GUI builder,
    several core Python packages like PIL, NumPy, and Matplotlib, access to the iOS
    rendering engine, and even a way to package your application into an app (though
    you will still have to apply to get it onto the Apple store).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 更时尚和令人兴奋的可能性是能够将你的应用移植到新一代的休闲平板电脑和其他移动触摸设备上。遗憾的是，我们当前的Tkinter用户界面方法无法打包用于或包含对Android或iPhone等手机或iPad等平板电脑的多点触控手势支持。如果你主要的目标受众是这些设备，你可能保留GIS处理引擎，但可能希望将用户界面切换到基于Kivy的界面，这是一个越来越受欢迎的新GUI包，它支持多点触控输入，据说还支持为Android、iPhone和iPad打包。如果你只想支持iOS，那么Pythonista应用提供了一个GUI构建器，几个核心Python包如PIL、NumPy和Matplotlib，访问iOS渲染引擎，甚至可以将你的应用打包成一个应用（尽管你仍然需要申请才能将其上传到苹果商店）。
- en: Summary
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We started out in this book seeking to create a basic and lightweight GIS application
    from scratch. As we reach the end of the book, this is exactly what we have done.
    Based on an underlying codebase of interlinked Python libraries, we have a distributable
    visual user interface application that can perform basic loading and saving, visualizing,
    managing, and analysis of spatial data.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这本书的开始就寻求从头开始创建一个基本且轻量级的GIS应用。随着我们接近书尾，这正是我们所做的。基于一个相互链接的Python库底层代码库，我们有一个可分发的可视化用户界面应用，它可以执行基本的数据加载和保存、可视化、管理和空间数据分析。
- en: At the very least, you picked up a few ideas of how to go about creating one.
    The best part about it is that you are fully in control of tweaking, modifying,
    and further developing it. If you have a particular need or a great idea for a
    custom workflow application, just look to the many tools available and build it
    yourself. I am very excited to keep using this application framework myself and
    especially curious to see what kind of GIS applications you will come up with.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 至少，你已经了解了一些如何创建一个应用的方法。最好的部分在于，你可以完全控制对其进行调整、修改和进一步开发。如果你有特定的需求或者一个出色的自定义工作流应用的想法，只需查看可用的众多工具并自行构建。我非常兴奋地继续使用这个应用框架，并且特别好奇你将想出什么样的GIS应用。
