- en: Using Spark SQL in Graph Applications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在图应用中使用Spark SQL
- en: In this chapter, we will present typical use cases for using Spark SQL in graph
    applications. Graphs are common in many different domains. Typically, graphs are
    analyzed using special graph processing engines. GraphX is the Spark component
    for graph computations. It is based on RDDs and supports graph abstractions and
    operations, such as subgraphs, aggregateMessages, and so on. In addition, it also
    exposes a variant of the Pregel API. However, our focus will be on the GraphFrame
    API implemented on top of Spark SQL Dataset/DataFrame APIs. GraphFrames is an
    integrated system that combines graph algorithms, pattern matching, and queries.
    GraphFrame API is still in beta (as of Spark 2.2) but is definitely the future
    graph processing API for Spark applications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍在图应用中使用Spark SQL的典型用例。图在许多不同的领域中很常见。通常，图是使用特殊的图处理引擎进行分析的。GraphX是用于图计算的Spark组件。它基于RDD，并支持图抽象和操作，如子图、aggregateMessages等。此外，它还公开了Pregel
    API的变体。然而，我们的重点将放在建立在Spark SQL Dataset/DataFrame API之上的GraphFrame API上。GraphFrames是一个集成系统，结合了图算法、模式匹配和查询。GraphFrame
    API目前仍处于测试版（截至Spark 2.2），但绝对是Spark应用的未来图处理API。
- en: 'More specifically, in this chapter, you will learn the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，在本章中，您将学习以下主题：
- en: Using GraphFrames for creating large-scale graphs
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用GraphFrames创建大规模图形
- en: Executing some basic graph operations
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行一些基本的图操作
- en: Motif analysis using GraphFrames
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用GraphFrames进行模式分析
- en: Processing subgraphs using GraphFrames
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用GraphFrames处理子图
- en: Executing graph algorithms
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行图算法
- en: Processing graphs containing multiple types of relationships
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理包含多种关系类型的图形
- en: Partitioning in GraphFrames
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GraphFrames中的分区
- en: Introducing large-scale graph applications
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍大规模图应用
- en: Analysis of graphs based on large Datasets is becoming increasingly important
    in various areas, such as social networks, communication networks, citation networks,
    web graphs, transport networks, product co-purchasing networks, and so on. Typically,
    graphs are created from source data in a tabular or relational format, and then
    applications, such as search and graph algorithms, are run on them to derive key
    insights.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 基于大型数据集的图分析在各个领域变得越来越重要，比如社交网络、通讯网络、引用网络、网页图、交通网络、产品共购网络等。通常，图是从表格或关系格式的源数据中创建的，然后应用程序（如搜索和图算法）在其上运行以得出关键见解。
- en: 'GraphFrames provide a declarative API that can be used for both interactive
    queries and standalone programs on large-scale graphs. As GraphFrames are implemented
    on top of Spark SQL, it enables parallel processing and optimization across the
    computation:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: GraphFrames提供了一个声明式API，可用于大规模图形上的交互式查询和独立程序。由于GraphFrames是建立在Spark SQL之上的，它能够实现跨计算的并行处理和优化：
- en: '![](img/00207.jpeg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00207.jpeg)'
- en: The main programming abstraction in GraphFrame's API is a GraphFrame. Conceptually,
    it consists of two DataFrames representing the vertices and edges of the graph.
    The vertices and edges may have multiple attributes, which can also be used in
    queries. For example, in a social network, the vertices can contain the name,
    age, location, and other attributes, while the edges can represent the relationships
    between the nodes (people in the network). As the GraphFrame model can support
    user-defined attributes with each vertex and edge, it is equivalent to the property
    graph model. Additionally, views can be defined using patterns to match various
    shapes of subgraphs in the network.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: GraphFrame API中的主要编程抽象是GraphFrame。在概念上，它由表示图的顶点和边的两个数据框组成。顶点和边可以具有多个属性，这些属性也可以用于查询。例如，在社交网络中，顶点可以包含姓名、年龄、位置等属性，而边可以表示节点（网络中的人）之间的关系。由于GraphFrame模型可以支持每个顶点和边的用户定义属性，因此它等同于属性图模型。此外，可以使用模式定义视图，以匹配网络中各种子图的形状。
- en: In the following sections, we will build graphs from several public Datasets
    that are available in a relational format, and then run various graph operations
    and algorithms on them. GraphFrames optimize the execution across the relational
    and graph portions of the computation. These computations can be specified using
    relational operators, patterns, and calls to algorithms.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将从几个公共数据集中构建图形，这些数据集以关系格式可用，然后在它们上运行各种图操作和算法。GraphFrames优化了关系和图计算的执行。这些计算可以使用关系运算符、模式和算法调用来指定。
- en: In the following sections, we will use the Spark shell for defining graphs,
    querying them, and running algorithms on them interactively.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将使用Spark shell来定义图形、查询它们，并在其上交互式地运行算法。
- en: Exploring graphs using GraphFrames
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用GraphFrames探索图形
- en: In this section, we explore data, modeled as a graph, using Spark GraphFrames.
    The vertices and edges of the graph are stored as DataFrames, and Spark SQL and
    DataFrame-based queries are supported to operate on them. As DataFrames can support
    a variety of data sources, we can read our input vertices and edges information
    from relational tables, files (JSON, Parquet, Avro, and CSV), and so on.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们使用Spark GraphFrames来探索建模为图的数据。图的顶点和边被存储为数据框，并且支持使用Spark SQL和基于数据框的查询来操作它们。由于数据框可以支持各种数据源，我们可以从关系表、文件（JSON、Parquet、Avro和CSV等）等读取输入顶点和边的信息。
- en: The vertex DataFrame must contain a column called `id` which specifies unique
    IDs for each vertex. Similarly, the edges DataFrame must contain two columns named
    `src` (source vertex ID) and `dst` (destination vertex ID). Both the vertices
    and edges DataFrames can contain additional columns for the attributes.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 顶点数据框必须包含一个名为`id`的列，用于指定每个顶点的唯一ID。同样，边数据框必须包含名为`src`（源顶点ID）和`dst`（目标顶点ID）的两列。顶点和边数据框都可以包含用于属性的额外列。
- en: GraphFrames exposes a concise language-integrated API that unifies graph analytics
    and relational queries. The system optimizes across the steps based on join plans
    and performing algebraic optimizations. Machine learning code, external data sources,
    and UDFs can be integrated with GraphFrames to build more complex applications.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: GraphFrames提供了一个简洁的语言集成API，统一了图分析和关系查询。该系统基于连接计划和执行代数优化来优化各个步骤。可以将机器学习代码、外部数据源和UDF与GraphFrames集成，以构建更复杂的应用程序。
- en: We will start our coding exercises with a simple example in which we read in
    the vertices and edges from a file containing Amazon co-purchase data. The nodes
    represent the various items and the edges between the source and destination vertices
    define an **alsopurchased** relationship. The Dataset for these exercises can
    be downloaded from [https://snap.stanford.edu/data/amazon0601.html](https://snap.stanford.edu/data/amazon0601.html).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从一个包含亚马逊共购数据的文件中读取顶点和边开始我们的编码练习。节点代表各种物品，源和目标顶点之间的边定义了一个**alsopurchased**关系。这些练习的数据集可以从[https://snap.stanford.edu/data/amazon0601.html](https://snap.stanford.edu/data/amazon0601.html)下载。
- en: 'Start the Spark shell as shown to include the GraphFrame library in the Spark
    shell environment:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下方式启动Spark shell，以在Spark shell环境中包含GraphFrame库：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'First, we import all the packages we need in our examples, as listed here:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们导入我们示例中需要的所有包，如下所示：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Constructing a GraphFrame
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建图框架
- en: 'A GraphFrame can be constructed using two DataFrames: a vertex DataFrame and
    an edge DataFrame. Here, we create the GraphFrame from a single DataFrame containing
    edge information.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用两个DataFrame构建GraphFrame：一个顶点DataFrame和一个边DataFrame。在这里，我们从包含边信息的单个DataFrame中创建GraphFrame。
- en: We will derive the vertex DataFrame from the source and destination vertices
    specified for the edges contained in our input file.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从包含在我们的输入文件中的边的源和目标顶点派生顶点DataFrame。
- en: 'Read in the input file to create an RDD for the edges, as shown:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 读取输入文件以创建边的RDD，如下所示：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Next, define a schema for the edges and convert the edges RDD into a DataFrame,
    as shown in the next few steps:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，为边定义一个模式，并将边RDD转换为DataFrame，如下几个步骤所示：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next, we create a DataFrame for the vertices by selecting distinct source and
    destination vertices from the edges DataFrame. A union of the resulting two DataFrames,
    with distinct vertices selected, gives us the final vertices DataFrame:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过从边DataFrame中选择不同的源和目标顶点，为顶点创建一个DataFrame。两个结果DataFrame的并集，选择不同的顶点，给我们最终的顶点DataFrame：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We can verify the number of nodes and vertices in these DataFrames by matching
    them with the numbers reported at the source site (for our input Dataset):'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过将它们与源站点报告的数字进行匹配，来验证这些DataFrame中的节点和顶点的数量（对于我们的输入数据集）：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next, we create a `GraphFrame` for the Amazon co-purchase data from the vertices
    and edges DataFrames:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们从顶点和边DataFrame创建一个`GraphFrame`，用于亚马逊共购数据：
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the next section, we will explore a few properties of the graph we just created.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探索我们刚刚创建的图的一些属性。
- en: Basic graph queries and operations
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本图查询和操作
- en: 'In this section, we will cover simple graph queries and operations on the structure
    of our graph. These include displays of the vertices, edges, and the in- and out-degrees
    of the vertices, as shown:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将涵盖图的简单查询和操作，包括显示顶点、边以及顶点的入度和出度，如下所示：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We can also apply filters to the edges and vertices and their properties, as
    shown:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以对边和顶点及其属性应用过滤器，如下所示：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Additionally, we can also use `groupBy` and `sort` operations, as shown in
    the following examples:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还可以使用`groupBy`和`sort`操作，如下面的示例所示：
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In the next section, we explore structural patterns present in our graph.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探索图中存在的结构模式。
- en: Motif analysis using GraphFrames
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用GraphFrames进行模式分析
- en: Finding motifs helps us execute queries to discover structural patterns in our
    graphs. Network motifs are subgraphs or patterns that occur repeatedly in the
    graph and represent the interactions or relationships between the vertices. Motifs
    can be used in our product co-purchasing graph to gain insights into user behavior
    based on structural properties of the graph representing the products, and their
    attributes and the relationships between them. Such information can be used in
    recommendation and/or advertising engines.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 查找模式有助于我们执行查询，以发现图中的结构模式。网络模式是图中反复出现的子图或模式，代表顶点之间的交互或关系。模式可以用于我们的产品共购图，以根据图表示的产品的结构属性、它们的属性和它们之间的关系，获得有关用户行为的见解。这些信息可以用于推荐和/或广告引擎。
- en: 'For example, the following motif represents a use case where a customer who
    bought product **(a)** also purchased the other two products, **(b)**, and **(c)**,
    as well:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下模式表示一个使用情况，其中购买产品**(a)**的客户也购买了另外两种产品**(b)**和**(c)**：
- en: '![](img/00208.jpeg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00208.jpeg)'
- en: Refer to *Motif Analysis* in the *Amazon Product Co-Purchasing Network*, by
    *Abhishek Srivastava* for a detailed coverage of motif analysis.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 有关模式分析的详细内容，请参阅*Abhishek Srivastava*的*《亚马逊产品共购网络》*中的*模式分析*。
- en: In this section, we will use GraphFrames to primarily `model 3-` and `4-`node
    motifs that represent various relationships in the co-purchasing network Dataset.
    GraphFrame motif finding uses a declarative **Domain-Specific Language** (**DSL**)
    for expressing structural queries. Within a pattern, names are assigned to vertices
    and edges. The basic unit of a pattern is an edge. For example, `(a) – [e] ->
    (b)` expresses an edge `e` from vertex `a` to vertex `b`. The vertices are denoted
    by parentheses `(a)`, while edges are denoted by square brackets `[e]`. A pattern
    is expressed as a union of edges and the edge patterns can be joined with semicolons.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用GraphFrames主要对代表购买网络数据集中各种关系的`3-`和`4-`节点模式进行建模。GraphFrame模式查找使用一种用于表达结构查询的声明性**领域特定语言**（**DSL**）。在模式中，顶点和边被赋予名称。模式的基本单位是边。例如，`(a)
    – [e] -> (b)`表示从顶点`a`到顶点`b`的边`e`。顶点用括号`(a)`表示，而边用方括号`[e]`表示。模式被表示为边的并集，边模式可以用分号连接。
- en: 'We will start our coding exercises with a simple query in which we search for
    sets of products where purchases of product `a` also meant purchases of product
    `b` or vice versa. The find operation here will search for pairs of vertices connected
    by edges in both directions:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从一个简单的查询开始我们的编码练习，在这个查询中，我们搜索购买产品`a`也意味着购买产品`b`，反之亦然的产品组合。这里的查找操作将搜索双向边连接的顶点对：
- en: '[PRE10]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We can also apply filters to the result; for example, we have specified the
    value of the vertex `b` as `2` in the following filter:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以对结果应用过滤器；例如，在下面的过滤器中，我们指定了顶点`b`的值为`2`：
- en: '[PRE11]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The following example specifies two separate edges from `a` (to `b` and `c`).
    This pattern typically represents a case in which when a customer buy a product
    **(a)** then she also buys either of, or both, **(b)** and **(c)**:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的例子指定了从`a`到`b`和`c`的两条单独的边。这种模式通常表示的情况是，当客户购买产品**(a)**时，她也会购买**(b)**和**(c)**中的一个或两个：
- en: '![](img/00208.jpeg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00208.jpeg)'
- en: 'Additionally, the pattern also specifies that the same vertex `a` is the common
    source for edges `e1` and `e2`:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，模式还指定了相同的顶点`a`是边`e1`和`e2`的共同源：
- en: '[PRE12]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: As the edges columns contain redundant information, we can omit names for vertices
    or edges in motifs when they are not required; for example, in the pattern `(a)-[]->(b)`,
    `[]` represents an arbitrary edge between vertices `a` and `b`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 由于边的列包含冗余信息，当不需要时，我们可以省略模式中顶点或边的名称；例如，在模式`(a)-[]->(b)`中，`[]`表示顶点`a`和`b`之间的任意边。
- en: 'There is no column for the edge in the result. Similarly, `(a)-[e]->()` indicates
    an outgoing edge of vertex `a` but does not name the destination vertex:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 结果中没有边的列。同样，`(a)-[e]->()`表示顶点`a`的出边，但没有指定目标顶点的名称：
- en: '[PRE13]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In the following example, we specify two separate edges from `a` (to `b` and
    `c`), and another edge from `b` to `a`. This pattern typically represents the
    case in which there is a reciprocating relationship between `a` and `b` (a strongly
    connected component indicative of a close similarity between the products):'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的例子中，我们指定了从`a`到`b`和`c`的两条单独的边，以及从`b`到`a`的另一条边。这种模式通常表示的情况是，`a`和`b`之间存在相互关系（表明产品之间存在密切的相似性）：
- en: '![](img/00209.jpeg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00209.jpeg)'
- en: '[PRE14]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In the following example, we specify two separate edges from `a` and `c` (to
    `b`). This pattern typically represents the case in which when customers buys
    largely unrelated products (`a` and `c`), then they also buy `b`. This is a converging
    motif and the business can use this information to, for example, stock this subset
    of products together:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的例子中，我们指定了从`a`和`c`到`b`的两条单独的边。这种模式通常表示的情况是，当客户购买不相关的产品（`a`和`c`）时，他们也会购买`b`。这是一个汇聚的模式，企业可以利用这些信息，例如将这些产品一起存放：
- en: '![](img/00210.jpeg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00210.jpeg)'
- en: '[PRE15]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In the following example, we specify edges from `a` to `b` and `b` to `c`,
    and another one from `c` to `b`. This pattern typically represents the case in
    which when a customer buys a product **(a)**, she may also buy **(b)** and then
    go on to buy **(c)**. This can be indicative of some prioritization on the items
    being purchased. Additionally, the strongly connected component in the motif indicates
    a close relationship between **(b)** and **(c)**:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的例子中，我们指定了从`a`到`b`和从`b`到`c`的边，以及从`c`到`b`的另一条边。这种模式通常表示的情况是，当客户购买产品**(a)**时，她可能也会购买**(b)**，然后继续购买**(c)**。这可能表明购买商品时的一些优先考虑。此外，模式中的强连接组件表明了**(b)**和**(c)**之间的密切关系：
- en: '![](img/00211.jpeg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00211.jpeg)'
- en: '[PRE16]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The 4-node motifs example is very resource intensive requiring over 100 GB disk
    space and over 14 GB RAM. Alternatively, you can refer to the next section to
    create a smaller subgraph to run this example.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 4-节点模式示例非常消耗资源，需要超过100GB的磁盘空间和超过14GB的RAM。或者，您可以参考下一节创建一个较小的子图来运行这个示例。
- en: 'In the next example, we present a `4-node` motif. This pattern typically represents
    the case in which there is a higher probability of a customer buying **(b)**:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个例子中，我们展示了一个`4-节点`的模式。这种模式通常表示的情况是，客户购买**(b)**的概率更高：
- en: '![](img/00212.jpeg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00212.jpeg)'
- en: '[PRE17]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '![](img/00213.jpeg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00213.jpeg)'
- en: '[PRE18]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In the next section, we shift our focus to creating and processing subgraphs.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将把重点转移到创建和处理子图。
- en: Processing subgraphs
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理子图
- en: 'GraphFrames provide a powerful way to select subgraphs based on a combination
    of motif finding and DataFrame filters. The following examples show how to select
    a subgraph based on vertex and edge filters:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: GraphFrames提供了一种强大的方式来基于模式查找和DataFrame过滤器选择子图。以下示例展示了如何基于顶点和边过滤器选择子图：
- en: '[PRE19]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In the next section, we will apply a series of graph algorithms to our graph.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将对我们的图应用一系列图算法。
- en: Applying graph algorithms
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用图算法
- en: GraphFrames provide a suite of standard graph algorithms. We provide brief descriptions
    of the graph algorithms and code snippets for applying them.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: GraphFrames提供了一套标准的图算法。我们提供了图算法的简要描述和应用它们的代码片段。
- en: 'First, we compute the **strongly connected component** (**SCC**) of each vertex
    and return a graph with each vertex assigned to the SCC containing that vertex.
    We display the count of nodes in the SCC, as shown:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们计算每个顶点的**强连通分量**（**SCC**），并返回一个图，其中每个顶点都分配给包含该顶点的SCC。我们显示SCC中节点的计数，如下所示：
- en: '[PRE20]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Next, we compute the number of triangles passing through each vertex. The number
    of triangles is a measure of the density of the vertex neighborhood. There are
    many practical applications of triangle counting in networks, for example, community
    detection, roles behavior, spam detection, detecting subsets of web pages with
    a common topic, and so on:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们计算通过每个顶点的三角形数量。三角形的数量是顶点邻域密度的度量。在网络中，三角形计数有许多实际应用，例如社区检测、角色行为、垃圾邮件检测、检测具有共同主题的网页子集等：
- en: '[PRE21]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In the following example, we will apply the PageRank algorithm to determine
    an estimate of how important the product is. The underlying assumption is that
    more popular products are likely to receive more links from other product nodes:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，我们将应用PageRank算法来确定产品的重要性的估计值。基本假设是更受欢迎的产品很可能会从其他产品节点接收更多的链接：
- en: '[PRE22]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'In the next example, we apply the Label Propagation algorithm to find communities
    of products in our graph:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个示例中，我们应用标签传播算法来找到图中产品的社区：
- en: '[PRE23]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'In the following example, we apply the Shortest Paths algorithm to find a path
    between two vertices in the graph so that the number of its constituent edges
    is minimized:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，我们应用最短路径算法来找到图中两个顶点之间的路径，以使其构成的边的数量最小化：
- en: '[PRE24]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: In the following section, we show how to save GraphFrames to persistent storage
    and then retrieve the same to recreate the original GraphFrame.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将展示如何将GraphFrames保存到持久存储，然后检索相同的内容以重新创建原始的GraphFrame。
- en: Saving and loading GraphFrames
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保存和加载GraphFrames
- en: 'As GraphFrames are built on the DataFrames API, they support saving and loading
    to and from various data sources. In the following code, we show saving the vertices
    and edges to Parquet files on HDFS:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 由于GraphFrames是建立在DataFrame API上的，它们支持保存和加载到各种数据源。在下面的代码中，我们展示了将顶点和边保存到HDFS上的Parquet文件：
- en: '[PRE25]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We can recreate the vertex and edge DataFrames from persistent storage, and
    then the graph, as shown:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从持久存储中重新创建顶点和边的DataFrame，然后显示图，如下所示：
- en: '[PRE26]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: In the next section, we use a richer Dataset to demonstrate the use of vertex
    and edge attributes in GraphFrames-based applications.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将使用更丰富的数据集来演示基于GraphFrames的应用中的顶点和边属性的使用。
- en: Analyzing JSON input modeled as a graph
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分析建模为图的JSON输入
- en: In this section, we will analyze a JSON Dataset modeled as a graph. We will
    apply GraphFrame functions from the previous sections and introduce some new ones.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将分析一个建模为图的JSON数据集。我们将应用前几节中的GraphFrame函数，并介绍一些新的函数。
- en: For hands-on exercises in this section, we use a Dataset containing Amazon product
    metadata; product information and reviews on around 548,552 products. This Dataset
    can be downloaded from [https://snap.stanford.edu/data/amazon-meta.html](https://snap.stanford.edu/data/amazon-meta.html).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节的实践练习中，我们使用一个包含亚马逊产品元数据的数据集；约548,552个产品的产品信息和评论。该数据集可以从[https://snap.stanford.edu/data/amazon-meta.html](https://snap.stanford.edu/data/amazon-meta.html)下载。
- en: For processing simplicity, the original Dataset was converted to a JSON format
    file with each line representing a complete record. Use the Java program (`Preprocess.java`)
    provided with this chapter for the conversion.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化处理，原始数据集被转换为JSON格式文件，每行代表一个完整的记录。使用本章提供的Java程序（`Preprocess.java`）进行转换。
- en: 'First, we create a DataFrame from the input file, and print out the schema
    and a few sample records. It is a complex schema with nested elements:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们从输入文件创建一个DataFrame，并打印出模式和一些示例记录。这是一个具有嵌套元素的复杂模式：
- en: '[PRE27]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '![](img/00214.jpeg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00214.jpeg)'
- en: 'We can print out an array of struct elements in the data. More specifically,
    we print out the list of similar products (that get co-purchased with the current
    product):'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以打印出数据中的一组结构元素的数组。更具体地说，我们打印出与当前产品一起购买的类似产品的列表：
- en: '[PRE28]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'We can also flatten the nested structure of the reviews element by using explode
    and access specific elements within it:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过使用explode来展开评论元素的嵌套结构，并访问其中的特定元素：
- en: '[PRE29]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Next, we create the nodes and edges DataFrames, as shown:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们创建节点和边的DataFrame，如下所示：
- en: '[PRE30]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'For the edges DataFrame, we use explode on similar or also purchased products
    column called `similarLines` to create new rows for each element in the array:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 对于边的DataFrame，我们使用类似或也购买产品列`similarLines`上的explode来为数组中的每个元素创建新行：
- en: '[PRE31]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Next, we show some basic operations using the node attributes:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们展示一些使用节点属性的基本操作：
- en: '[PRE32]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Next, we create a subgraph for Book group products only:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们仅为图书组产品创建一个子图：
- en: '[PRE33]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'It is important to note that the number of edges is equal to the edges in the
    original graph. GraphFrame does not automatically remove the edges that are not
    related to Book group products:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，边的数量等于原始图中的边的数量。GraphFrame不会自动删除与图书组产品无关的边：
- en: '[PRE34]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'In the following steps, we join the vertices and edges DataFrames, temporarily,
    to get rid of the extra edges in our DataFrame and create a `GraphFrame` with
    nodes and edges related to Book products only:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的步骤中，我们暂时将顶点和边的DataFrame连接起来，以摆脱DataFrame中的额外边，并创建一个仅与图书产品相关的`GraphFrame`：
- en: '[PRE35]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'We can combine the motif finding with filters containing the attributes of
    the vertices:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将模式查找与包含顶点属性的过滤器相结合：
- en: '[PRE36]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '![](img/00215.jpeg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00215.jpeg)'
- en: '[PRE37]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '![](img/00216.jpeg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00216.jpeg)'
- en: '[PRE38]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '![](img/00217.jpeg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00217.jpeg)'
- en: GraphFrames provides the `AggregateMessages` primitive for developing graph
    algorithms. This component can be used for sending messages between vertices,
    and also for aggregating the messages for each vertex.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: GraphFrames提供了`AggregateMessages`原语来开发图算法。该组件可用于在顶点之间发送消息，也可用于聚合每个顶点的消息。
- en: 'In the following example, we compute the sum of the number of purchased products
    of adjacent products:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，我们计算相邻产品的购买产品数量的总和：
- en: '[PRE39]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: In the next section, we explore GraphFrames with edges representing multiple
    types of relationships.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将探索包含多种关系类型的边的GraphFrames。
- en: Processing graphs containing multiple types of relationships
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理包含多种关系类型的图
- en: For the next few examples, we use an augmented edges DataFrame containing a
    relationship column. We insert two types of relationships in the column based
    on the number of similar purchases and the number of categories that a product
    belongs to.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几个示例中，我们使用包含关系列的增强边DataFrame。我们根据相似购买数量和产品所属类别的数量在列中插入两种关系类型。
- en: 'For this, we join the nodes and edges DataFrames, and subsequently drop the
    node-related columns after the relationship computation is completed to obtain
    our final edges DataFrame (with the relationship column suitably populated):'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们将节点和边的DataFrame进行连接，然后在关系计算完成后删除与节点相关的列，以获得我们最终的边DataFrame（关系列适当填充）：
- en: '[PRE40]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Next, we count the number of records for each type of relationship and list
    a few edges along with the relationship values:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们计算每种关系类型的记录数量，并列出一些边以及关系值：
- en: '[PRE41]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'In the following example, we filter on product vertices with a sales rank of
    following 2,000,000 and edges having the `highSimilars` relationship:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，我们筛选出销售排名在2,000,000以下的产品顶点和具有`highSimilars`关系的边：
- en: '[PRE42]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'In the following example, we create a subgraph from selected columns and filter
    on a specific group of products. We also select a subset of edges based on the
    `highSimilars` relationship. Furthermore, we find the motifs and apply further
    filters on them to obtain the final results:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，我们从选定的列创建一个子图，并根据特定产品组进行过滤。我们还根据`highSimilars`关系选择边的子集。此外，我们找到图形并对其应用进一步的过滤，以获得最终结果：
- en: '[PRE43]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Next, we apply a few graph algorithms to the subgraphs that are based on node
    and edge relationship attributes. In the following example, we first find the
    motifs matching the pattern in our graph, and then filter on a combination of
    node and edge attributes. We run the BFS algorithm on the final subgraph:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们对基于节点和边关系属性的子图应用一些图算法。在下面的示例中，我们首先找到图中匹配模式的图形，然后根据节点和边属性的组合进行过滤。我们在最终子图上运行BFS算法：
- en: '[PRE44]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '![](img/00218.jpeg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00218.jpeg)'
- en: 'In the following example, we run the PageRank algorithm on the Books subgraph
    to find the top ten book titles:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，我们在图书子图上运行PageRank算法，以找到前十本书的标题：
- en: '[PRE45]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '![](img/00219.jpeg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00219.jpeg)'
- en: Understanding GraphFrame internals
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解GraphFrame的内部结构
- en: In the following sections, we briefly present GraphFrame internals with respect
    to its execution plan and partitioning.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将简要介绍GraphFrame的内部结构，以及其执行计划和分区。
- en: Viewing GraphFrame physical execution plan
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看GraphFrame的物理执行计划
- en: 'As the GraphFrames are built on Spark SQL DataFrames, we can view the physical
    plan to understand the execution of the graph operations, as shown:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 由于GraphFrames是构建在Spark SQL DataFrames上的，我们可以查看物理计划以了解图操作的执行，如下所示：
- en: '[PRE46]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '![](img/00220.jpeg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00220.jpeg)'
- en: We will explore this in more detail in [Chapter 11](part0197.html#5RRUQ0-e9cbc07f866e437b8aa14e841622275c),
    *Tuning Spark SQL Components for Performance*.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第11章](part0197.html#5RRUQ0-e9cbc07f866e437b8aa14e841622275c)中更详细地探讨这一点，*调整Spark
    SQL组件以提高性能*。
- en: Understanding partitioning in GraphFrames
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解GraphFrames中的分区
- en: Spark splits data into partitions and executes computations on the partitions
    in parallel. You can adjust the level of partitioning to improve the efficiency
    of Spark computations.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: Spark将数据分割成分区，并并行在分区上执行计算。您可以调整分区级别以提高Spark计算的效率。
- en: In the following example, we examine the results of repartitioning a GraphFrame.
    We can partition our GraphFrame based on the column values of the vertices DataFrame.
    Here, we use the values in the group column to partition by group or product type.
    Here, we will present the results of repartitioning by comparing the before and
    after distribution of the records.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，我们检查重新分区GraphFrame的结果。我们可以根据顶点DataFrame的列值对GraphFrame进行分区。在这里，我们使用组列中的值按组或产品类型进行分区。在这里，我们将通过比较记录的分布前后来呈现重新分区的结果。
- en: 'First, we create the two GraphFrames as shown. As there are nulls in the `group`
    column, we replace them with a value of `unknown`:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们按照所示创建两个GraphFrames。由于`group`列中存在空值，我们将其替换为`unknown`的值：
- en: '[PRE47]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Next, we create the second GraphFrame after repartitioning the original GraphFrame.
    Here, we use the number of groups as our initial number of partitions:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在重新分区原始GraphFrame后，我们创建第二个GraphFrame。在这里，我们使用组数作为我们的初始分区数：
- en: '[PRE48]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Displaying the vertices in the following two graphs shows that the records
    are bunched together by groups in the second graph:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 显示以下两个图中的顶点表明，第二个图中的记录是按组聚集在一起的：
- en: '[PRE49]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'The default number of partitions in the first graph is `9` and in the second,
    as specified, there are `11`:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个图的默认分区数为`9`，而第二个图根据指定为`11`：
- en: '[PRE50]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'We can also write out the contents of the partitions to files to explore their
    contents, as shown:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以将分区的内容写入文件以探索其内容，如下所示：
- en: '[PRE51]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'The sample contents of a partition from one of the output files are listed
    here for the first graph showing a mix of records:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是来自输出文件中一个分区的样本内容，用于显示第一个图中记录的混合情况：
- en: '![](img/00221.jpeg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00221.jpeg)'
- en: 'The sample contents of a partition from one of the output files are listed
    here for the second graph showing records belonging to the same group:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是来自输出文件中一个分区的样本内容，用于显示属于同一组的记录的第二个图：
- en: '![](img/00222.jpeg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00222.jpeg)'
- en: 'We notice that most of our records are in five main product groups and we may
    want to reduce the total number of partitions. We use the coalesce operation to
    achieve that, as shown:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 我们注意到我们的大部分记录都属于五个主要产品组，我们可能希望减少总分区数。我们使用coalesce操作来实现这一点，如下所示：
- en: '[PRE52]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Summary
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we introduced GraphFrame applications. We provided examples
    of using Spark SQL DataFrame/Dataset APIs to build graph applications. Additionally,
    we also applied various graph algorithms to graph applications.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了GraphFrame应用程序。我们提供了使用Spark SQL DataFrame/Dataset API构建图应用程序的示例。此外，我们还将各种图算法应用于图应用程序。
- en: In the next chapter, we will shift our focus to using Spark SQL with SparkR.
    Additionally, we will explore typical use cases and data visualization using Spark
    SQL and SparkR.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将把重点转移到使用SparkR的Spark SQL。此外，我们还将探索使用Spark SQL和SparkR进行典型用例和数据可视化。
