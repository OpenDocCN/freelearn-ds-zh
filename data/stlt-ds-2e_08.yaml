- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: Deploying Streamlit Apps with Hugging Face and Heroku
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Hugging Face 和 Heroku 部署 Streamlit 应用
- en: In *Chapter 5*, *Deploying Streamlit with Streamlit Community Cloud*, we learned
    how to deploy our Streamlit applications with Streamlit Community Cloud. Streamlit
    Community Cloud is quick, easy, and very effective for most applications. However,
    it does not have unlimited free computing resources available and is limited to
    1 GB of RAM per deployed app. If we want to have an app that uses more resources
    than that, we do not have that option.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第五章*，*通过 Streamlit Community Cloud 部署 Streamlit*中，我们学习了如何通过 Streamlit Community
    Cloud 部署我们的 Streamlit 应用。Streamlit Community Cloud 对大多数应用来说快速、简单且非常有效。然而，它并没有无限制的免费计算资源，每个部署的应用程序限制为
    1GB 内存。如果我们想要一个使用更多资源的应用程序，那就没有这个选项了。
- en: This leads me to the other aspect to consider—the integration of Streamlit with
    Snowflake. The paid Streamlit offering is now within the Snowflake ecosystem.
    Though it might seem like a constraint, note that Snowflake enjoys immense popularity
    for a reason. If your company already uses Snowflake, this could be a great advantage
    to you. However, if you do not already use Snowflake, this chapter provides you
    with a couple other excellent options for deploying your resource-intensive or
    security-constrained applications.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这让我考虑到另一个需要考虑的方面——Streamlit 与 Snowflake 的集成。付费的 Streamlit 版本现在已经包含在 Snowflake
    生态系统中。尽管这看起来像是一种限制，但请注意，Snowflake 因其庞大的受欢迎程度而值得信赖。如果您的公司已经在使用 Snowflake，这可能对你来说是一个巨大的优势。然而，如果你尚未使用
    Snowflake，本章还为你提供了其他几个优秀的选项，以部署资源密集型或有安全限制的应用程序。
- en: 'When Streamlit first was launched, and also when this book was first launched
    in the Fall of 2021, the deployment options available were sparse. Often the best
    option was to rent out server space from Amazon Web Services or Azure and set
    up all the configuration yourself. Thankfully with the massive success of the
    library the deployment options are much improved. This chapter will focus on three
    main sections:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Streamlit 首次发布时，以及本书在 2021 年秋季首次发布时，可用的部署选项非常有限。通常，最佳选择是租用 Amazon Web Services
    或 Azure 的服务器空间并自行设置所有配置。幸运的是，随着该库的巨大成功，部署选项已经有了很大的改进。本章将重点介绍三个主要部分：
- en: Choosing between Streamlit Community Cloud, Hugging Face, and Heroku
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Streamlit Community Cloud、Hugging Face 和 Heroku 之间进行选择
- en: Deploying Streamlit apps on Hugging Face
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Hugging Face 上部署 Streamlit 应用
- en: Deploying Streamlit apps on Heroku
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Heroku 上部署 Streamlit 应用
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'Here is a list of installments required for this chapter:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本章所需安装的软件：
- en: '**Heroku account**: Heroku is a popular platform that data scientists and software
    engineers use to host their applications, models, and **Application Programming
    Interfaces (APIs**), and is owned by Salesforce. To get a Heroku account, please
    head over to [https://signup.heroku.com](https://signup.heroku.com) to make your
    free account.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Heroku 账户**：Heroku 是一个受欢迎的平台，数据科学家和软件工程师使用它来托管他们的应用、模型和**应用编程接口（API）**，它归
    Salesforce 所有。要获取 Heroku 账户，请前往 [https://signup.heroku.com](https://signup.heroku.com)
    创建免费账户。'
- en: '**Heroku Command-Line Interface** (**CLI**): To use Heroku effectively, we
    will need to download the Heroku CLI, which will allow us to run Heroku commands.
    To download this, please follow the instructions listed here: [https://devcenter.heroku.com/articles/heroku-cli](https://devcenter.heroku.com/articles/heroku-cli).'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Heroku 命令行界面**（**CLI**）：要有效使用 Heroku，我们需要下载 Heroku CLI，它将允许我们运行 Heroku 命令。要下载该工具，请按照这里列出的说明进行操作：[https://devcenter.heroku.com/articles/heroku-cli](https://devcenter.heroku.com/articles/heroku-cli)。'
- en: '**Hugging Face account**: Hugging Face is a wonderful machine learning-focused
    platform, which we used in *Chapter 4*, *Machine Learning and AI with Streamlit*;
    to create an account head over to [https://huggingface.co/join](https://huggingface.co/join).'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Hugging Face 账户**：Hugging Face 是一个以机器学习为重点的优秀平台，我们在*第四章*，*通过 Streamlit 进行机器学习和
    AI*中使用过它；要创建账户，请访问 [https://huggingface.co/join](https://huggingface.co/join)。'
- en: Now that we have the requirements, let’s begin!
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了需求，让我们开始吧！
- en: Choosing between Streamlit Community Cloud, Hugging Face, and Heroku
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Streamlit Community Cloud、Hugging Face 和 Heroku 之间进行选择
- en: At a high level, whenever we are trying to deploy our Streamlit application
    such that users on the internet can see our applications, what we are really doing
    is renting a computer owned by someone else and giving that computer a set of
    instructions to start up our application. Choosing which platform to use is difficult
    to know how to do without either having a background in deploying systems or without
    trying each option out first, but there are a few heuristics that should help
    you out.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 从高层次来看， whenever 我们尝试部署我们的 Streamlit 应用程序，让互联网用户能够看到我们的应用时，实际上我们是在租用一个由他人拥有的计算机，并给这台计算机一组指令来启动我们的应用。选择使用哪个平台，若没有系统部署背景或者没有先尝试过每个选项，往往很难确定，但有一些启发式方法应该能帮助你做出决定。
- en: The two most important factors for this decision are the flexibility of the
    system and the time it takes to get up and running. Note that these two factors
    are often directly traded off with one another. If you are using Streamlit Community
    Cloud, you cannot say “I want this to run this on GPUs with 30 GiB of memory,”
    but in return, you get a wildly simple process where you can simply point Streamlit
    Community Cloud to your GitHub repository, and it will take care of all the other
    little decisions that need to be made. On the other hand, Hugging Face and Heroku
    give you more flexibility through paid options but take a bit more time to set
    up (as you will find out!).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 决定选择哪个平台的两个最重要因素是系统的灵活性和启动所需的时间。需要注意的是，这两个因素通常是相互权衡的。如果你使用的是 Streamlit Community
    Cloud，你无法指定“我想让这个在 30 GiB 内存的 GPU 上运行”，但你可以得到一个极其简单的流程，只需将 Streamlit Community
    Cloud 指向你的 GitHub 仓库，它会处理掉所有其他需要做的小决策。另一方面，Hugging Face 和 Heroku 通过付费选项提供更多灵活性，但设置起来需要更多时间（正如你将会发现的！）。
- en: In short, if you’re working with a platform already (Snowflake, Hugging Face,
    or Heroku), you should just work with the platform you’re already on. If you aren’t
    already using any of these, or are a hobbyist programmer, Streamlit Community
    Cloud is the best option.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，如果你已经在使用某个平台（如 Snowflake、Hugging Face 或 Heroku），你应该继续使用你正在使用的平台。如果你还没有使用这些平台，或者是一个业余程序员，Streamlit
    Community Cloud 是最好的选择。
- en: If you need more compute and are working in the machine learning or natural
    language processing space, you should use Hugging Face. If you need more compute
    and want a more general platform with a broad set of integrations, Heroku is a
    great option for you.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要更多的计算资源，并且正在从事机器学习或自然语言处理工作，你应该使用 Hugging Face。如果你需要更多计算资源，并且希望拥有一个更通用的平台，具有广泛的集成选项，Heroku
    是一个很好的选择。
- en: Let’s get started with Hugging Face!
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始使用 Hugging Face 吧！
- en: Deploying Streamlit with Hugging Face
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Hugging Face 上部署 Streamlit
- en: Hugging Face offers an entire suite of products focused on machine learning
    and is especially used by machine learning engineers and folks in the natural
    language processing space. It gives developers the ability to easily use pre-trained
    models through its transformers library (which we already used!) but also create
    products that let developers host their own models, datasets, and even their own
    data apps through a product called Hugging Face Spaces. You can think of a Space
    as a place to deploy an app on the Hugging Face infrastructure, and it is quite
    easy to get started.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Hugging Face 提供了一整套专注于机器学习的产品，特别受到机器学习工程师和自然语言处理领域专家的青睐。它通过其 transformers 库（我们已经使用过了！）使开发者能够轻松使用预训练模型，还可以创建产品让开发者托管自己的模型、数据集，甚至通过名为
    Hugging Face Spaces 的产品托管他们自己的数据应用。你可以将 Space 看作是一个在 Hugging Face 基础设施上部署应用的地方，而且开始使用非常简单。
- en: For this chapter, we’ll deploy the same Hugging Face app that we created in
    *Chapter 4*. We can deploy any of our Streamlit apps on Hugging Face, but I thought
    it would be more fitting to deploy that one!
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章内容，我们将部署在 *第 4 章* 中创建的同一个 Hugging Face 应用。我们可以在 Hugging Face 上部署任何一个 Streamlit
    应用，但我觉得部署这个会更合适！
- en: To start, we need to go to [https://huggingface.co/spaces](https://huggingface.co/spaces)
    and click the button that says **Create new Space**.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要访问 [https://huggingface.co/spaces](https://huggingface.co/spaces)，然后点击“**Create
    new Space**”按钮。
- en: '![](img/B18444_08_01.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18444_08_01.png)'
- en: 'Figure 8.1: Hugging Face login'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.1：Hugging Face 登录
- en: After logging in, we will get a few options. We can name our Space, choose a
    license, select the type of Space that we want (Gradio is another popular option
    for data apps and is owned by Hugging Face), choose the Space hardware (note the
    paid and free options), and set our Space as public or private. The screenshot
    below shows the options I have chosen (you can name the Space anything you’d like,
    but the rest of these should be the same).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 登录后，我们将看到一些选项。我们可以为我们的 Space 命名，选择一个许可证，选择我们想要的 Space 类型（Gradio 是 Hugging Face
    另一个受欢迎的数据应用选择），选择 Space 硬件（注意付费和免费选项），并将 Space 设置为公开或私有。下面的截图展示了我选择的选项（你可以根据需要为
    Space 命名，但其余的应该保持一致）。
- en: '![](img/B18444_08_02.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18444_08_02.png)'
- en: 'Figure 8.2: Hugging Face options'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.2：Hugging Face 选项
- en: 'Now, you should click the **Create Space** button at the bottom of the page.
    Once you have created the Space, you need to clone that Space on your personal
    computer using the following Git command, which I cloned inside the main Streamlit
    for Data Science GitHub repository that this book is in:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你应该点击页面底部的 **Create Space** 按钮。一旦创建了 Space，你需要使用以下 Git 命令在个人计算机上克隆该 Space，我在这本书所在的主
    Streamlit for Data Science GitHub 仓库中进行了克隆：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now that your repo is cloned, we need to create a file for our Streamlit app
    and another `requirements.txt` file to use to tell Hugging Face Spaces which libraries
    we need for our app, using the following commands:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的仓库已经被克隆，我们需要为我们的 Streamlit 应用创建一个文件，并创建另一个 `requirements.txt` 文件，使用以下命令告诉
    Hugging Face Spaces 我们需要哪些库来运行我们的应用：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Within the `app.py` file, we can directly copy and paste the app we already
    created; the code is copied below:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `app.py` 文件中，我们可以直接复制并粘贴我们已经创建的应用；代码如下所示：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'And for our `requirements.txt` file, we just use three libraries, which we
    can add to the file like so:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的 `requirements.txt` 文件，我们只需使用三个库，可以像这样将它们添加到文件中：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now that we have the files in the right state, we just use Git to add, commit,
    and push the changes:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经把文件放到正确的状态，只需使用 Git 添加、提交并推送更改：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: When we push our changes from the command line, we will be asked to enter our
    Hugging Face username and password, and then if we go back to our **Hugging Face**
    tab, our app is hosted!
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们从命令行推送更改时，系统会要求我们输入 Hugging Face 的用户名和密码，然后如果我们回到 **Hugging Face** 标签页，我们的应用就会被托管！
- en: '![](img/B18444_08_03.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18444_08_03.png)'
- en: 'Figure 8.3: Hugging Face deployed app'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.3：Hugging Face 部署的应用
- en: 'If we go back to our code and look at the `README.md` file, we will notice
    that there are a bunch of useful configuration options, such as changing the emoji
    or the title. Hugging Face also allows us to specify other parameters like the
    Python version. The full documentation is in the link in your `README.md`:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们回到代码中并查看 `README.md` 文件，我们会注意到有很多有用的配置选项，比如更改表情符号或标题。Hugging Face 还允许我们指定其他参数，比如
    Python 版本。完整的文档可以在你的 `README.md` 中的链接中找到：
- en: '![](img/B18444_08_04.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18444_08_04.png)'
- en: 'Figure 8.4: Hugging Face deployed app code'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.4：Hugging Face 部署的应用代码
- en: And that is it for deploying Streamlit apps on Hugging Face!
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是在 Hugging Face 上部署 Streamlit 应用的全部内容！
- en: You can probably already notice some of the downsides of deploying on Hugging
    Face Spaces, which include a few more steps than Streamlit Community Cloud, and
    the large amount of real estate on apps that is taken by Hugging Face. Understandably,
    Hugging Face wants to make sure that anyone who sees your app knows that it is
    created using their product. They place a lot of their own branding and products
    at the top of your deployed app, which certainly negatively affects the app viewing
    experience. For other folks who are already using Hugging Face, this branding
    might be a big benefit as they can clone your Space and view popular Spaces and
    models, but for sending apps to non-ML colleagues or even friends, the branding
    is a downside of Spaces.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到在 Hugging Face Spaces 上部署的一些缺点，包括比 Streamlit Community Cloud 多一些步骤，并且
    Hugging Face 占用了应用程序的很多显示空间。可以理解的是，Hugging Face 希望确保每个看到你应用的人都知道它是使用他们的产品创建的。他们将大量自己的品牌和产品放在你部署的应用程序顶部，这无疑会对应用的观看体验产生负面影响。对于已经在使用
    Hugging Face 的其他人来说，这种品牌展示可能是一个很大的优势，因为他们可以克隆你的 Space，查看流行的 Spaces 和模型，但对于将应用发送给非
    ML 同事甚至朋友来说，这种品牌展示则是 Spaces 的一个缺点。
- en: The other main downside of Hugging Face Spaces is that they are often a bit
    behind in the versions of Streamlit that they support. As of this writing, they
    are running Streamlit version 1.10.0, and the latest version of Streamlit is 1.16.0\.
    If you’re looking for the most recent Streamlit features, Hugging Face Spaces
    might not support them! This also is usually not a big deal for most Streamlit
    apps, but another factor to be aware of when choosing a platform.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Hugging Face Spaces 的另一个主要缺点是，它们支持的 Streamlit 版本通常稍微滞后。截至本书写作时，他们正在使用 Streamlit
    版本 1.10.0，而最新的 Streamlit 版本是 1.16.0。如果你希望使用最新的 Streamlit 特性，Hugging Face Spaces
    可能无法支持！不过，对于大多数 Streamlit 应用来说，这通常不会造成太大问题，但在选择平台时，还是需要考虑这一因素。
- en: I hope it is clear to you the strong benefits and mild disadvantages of using
    Hugging Face Spaces. Now let’s move over to Heroku!
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你已经清楚使用 Hugging Face Spaces 的明显优势和轻微劣势。现在让我们转向 Heroku！
- en: Deploying Streamlit with Heroku
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Heroku 部署 Streamlit
- en: Heroku is a Platform as a Service owned by Salesforce, optimized as a generic
    compute platform that you can use for everything from websites to APIs to Streamlit
    apps. Because of this, you have many more options with Heroku than with either
    Streamlit Community Cloud or Hugging Face Spaces, but getting started takes more
    effort.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Heroku 是由 Salesforce 所拥有的一个平台即服务（PaaS），它作为一个通用的计算平台优化，可以用于从网站到 API 到 Streamlit
    应用等各种用途。因此，与 Streamlit Community Cloud 或 Hugging Face Spaces 相比，Heroku 提供了更多选择，但上手难度更高。
- en: Please note that Heroku has no free tier, so if you do not want to follow along
    (or if you are already happy with Streamlit Community Cloud or Hugging Face Spaces),
    feel free to just skip to the next chapter! The reason Heroku is included in this
    book is that I wanted to provide an option that had more capacity, supported the
    most recent Streamlit versions without much branding, and was easy to use. Heroku
    is the best platform on those metrics, so I’ll cover it below!
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，Heroku 没有免费套餐，所以如果你不想跟着操作（或者你已经对 Streamlit Community Cloud 或 Hugging Face
    Spaces 感到满意），可以直接跳到下一章！之所以在本书中提到 Heroku，是因为我希望提供一个具有更高容量、支持最新版本 Streamlit 且没有太多品牌标识，并且易于使用的选项。Heroku
    在这些标准下表现最好，因此我将在下面详细介绍！
- en: 'To deploy our Streamlit apps on Heroku, we need to do the following:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将我们的 Streamlit 应用部署到 Heroku，我们需要执行以下操作：
- en: Set up and log in to Heroku.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置并登录到 Heroku。
- en: Clone and configure our local repository.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 克隆并配置我们的本地仓库。
- en: Deploy to Heroku.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署到 Heroku。
- en: Let’s look at each of these steps in detail!
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细看看这些步骤！
- en: Setting up and logging in to Heroku
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置并登录到 Heroku
- en: 'In the *Technical requirements* section of this chapter, we covered how to
    download Heroku and create an account. Now, we need to log in to our Heroku from
    our command line by running the following command and logging in when prompted:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的 *技术要求* 部分，我们介绍了如何下载 Heroku 并创建账户。现在，我们需要通过命令行登录 Heroku，运行以下命令并根据提示进行登录：
- en: '[PRE5]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This will take us to the Heroku page, and once we log in, we will be good to
    go. This command will keep you logged in on your machine indefinitely, unless
    your password changes or you purposely log out of Heroku.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这将带我们到 Heroku 页面，登录后我们就可以开始了。该命令会让你在机器上保持登录状态，直到你更改密码或主动退出 Heroku。
- en: Cloning and configuring our local repository
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 克隆并配置我们的本地仓库
- en: 'Next, we need to change our directory to where the penguin machine learning
    app is located. My app folder is inside my `Documents` folder, so the following
    command takes me there, but your folder might be different:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要切换到存放企鹅机器学习应用程序的目录。我的应用程序文件夹在我的 `Documents` 文件夹内，所以以下命令将我带到该目录，但你的文件夹路径可能不同：
- en: '[PRE6]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If you do not already have the repository downloaded locally with a corresponding
    repository on GitHub, go ahead and stop by *Chapter 5*, *Deploying Streamlit with
    Streamlit Community Cloud*, to see how to get started with GitHub. Instead, you
    can also run the following command to download the repository locally from my
    personal GitHub:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有下载本地仓库，并且没有对应的 GitHub 仓库，可以前往 *第 5 章*，*使用 Streamlit Community Cloud 部署
    Streamlit*，了解如何开始使用 GitHub。你也可以运行以下命令，从我的个人 GitHub 仓库将代码下载到本地：
- en: '[PRE7]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: It is highly encouraged that you practice with your own GitHub repository, as
    this is much better practice than cloning an app from me to use to deploy to Heroku.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 强烈建议你使用自己的 GitHub 仓库进行实践，因为这比从我这里克隆应用程序来部署到 Heroku 更具实践意义。
- en: Now we need to create a Heroku app with a unique name for our app with the next
    command (the app will be deployed as this name with `.heroku.com` appended to
    the end of it). Mine will be `penguin-machine-learning`, but go ahead and pick
    your own!
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要使用以下命令创建一个 Heroku 应用，并为我们的应用选择一个独特的名称（该应用将以此名称加上 `.heroku.com` 后缀进行部署）。我的应用名是
    `penguin-machine-learning`，但你可以选择自己的名称！
- en: '[PRE8]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Once we have this, we need to explicitly make the connection between our Git
    repository and the Heroku app we have just created, which can be done with the
    following command:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成此操作，我们需要明确地将我们的 Git 仓库与刚刚创建的 Heroku 应用连接起来，可以通过以下命令完成：
- en: '[PRE9]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'And finally, we are going to add two files to our repository that are needed
    to start up with Heroku, the `Procfile` file and the `streamlit_setup.sh` file.
    Heroku uses something called a `Procfile` as a way to declare which commands the
    app should perform when starting up, and also to tell Heroku what type of application
    this is. For our Heroku apps, we also need this `Procfile` to configure some setup
    for our app specific to Streamlit apps (such as the port configuration), and then
    also to run the `streamlit run` command to launch our app. Let’s start by creating
    the `streamlit_setup.sh` file using the following command:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将向我们的代码库中添加两个文件，这两个文件是启动 Heroku 所必需的，即 `Procfile` 文件和 `streamlit_setup.sh`
    文件。Heroku 使用名为 `Procfile` 的文件来声明应用在启动时应该执行的命令，并告知 Heroku 这是什么类型的应用。对于我们的 Heroku
    应用，我们还需要这个 `Procfile` 来配置一些特定于 Streamlit 应用的设置（比如端口配置），并且还要运行 `streamlit run`
    命令来启动我们的应用。让我们从以下命令开始创建 `streamlit_setup.sh` 文件：
- en: '[PRE10]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We can open this file with our text editor and put the following lines inside
    it, which creates our familiar `config.toml` file in the base directory:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用文本编辑器打开这个文件，并将以下内容添加进去，这样就会在基础目录中创建我们熟悉的`config.toml`文件：
- en: '[PRE11]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Once we save this file, we need to create a `Procfile` that runs this `streamlit_setup.sh`
    file and then also runs our Streamlit app:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦保存了这个文件，我们需要创建一个 `Procfile`，该文件会运行 `streamlit_setup.sh` 文件，并且还会运行我们的 Streamlit
    应用：
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Within the `Procfile` file we just created, we will next add the following
    line:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们刚创建的 `Procfile` 文件中，接下来需要添加以下内容：
- en: '[PRE13]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now that we have our Streamlit app all set up, our final step is to deploy it
    to Heroku!
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置好了我们的 Streamlit 应用，最后一步就是将它部署到 Heroku！
- en: Deploying to Heroku
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署到 Heroku
- en: 'Before we deploy, we have a couple of new files on our app, so we need to add
    those to our Git repository using the following commands:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们部署之前，应用中有几个新文件，我们需要使用以下命令将它们添加到 Git 仓库中：
- en: '[PRE14]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'And now, our final step in this chapter is to push to Heroku, which we can
    do with this next command:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们本章的最后一步是将代码推送到 Heroku，接下来可以通过以下命令来完成：
- en: '[PRE15]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This will kick off the Heroku build, and soon enough, we will see our Penguin
    app deployed to Heroku for anyone to go and view. The app we have been working
    on and just deployed can be found at the following link (with a screenshot attached!),
    [https://penguin-machine-learning.herokuapp.com/](https://penguin-machine-learning.herokuapp.com/),
    and the GitHub repository for this app can be found at [https://github.com/tylerjrichards/penguin_ml](https://github.com/tylerjrichards/penguin_ml).
    You can see the app in the following screenshot:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动 Heroku 构建，过一会儿，我们将看到我们的 Penguin 应用成功部署到 Heroku，任何人都可以访问查看。我们刚刚部署并正在进行开发的应用可以通过以下链接访问（附带截图！），[https://penguin-machine-learning.herokuapp.com/](https://penguin-machine-learning.herokuapp.com/)，GitHub
    仓库可以通过 [https://github.com/tylerjrichards/penguin_ml](https://github.com/tylerjrichards/penguin_ml)
    访问。你可以在以下截图中看到该应用：
- en: '![Figure 8.2 – Heroku App deployment ](img/B18444_08_05.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.2 – Heroku 应用部署](img/B18444_08_05.jpg)'
- en: 'Figure 8.5: Heroku app deployment'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.5：Heroku 应用部署
- en: As you can see, Heroku deployment is more difficult than Hugging Face Spaces
    or Streamlit Community Cloud but gives you the option to put more compute behind
    your app without adding Heroku branding. Heroku will also always support the most
    recent Streamlit features, which Hugging Face Spaces does not always do.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，Heroku 的部署比 Hugging Face Spaces 或 Streamlit Community Cloud 更复杂，但它允许你为应用添加更多计算资源而不带有
    Heroku 品牌。而且，Heroku 始终支持最新的 Streamlit 特性，而 Hugging Face Spaces 不一定会及时更新。
- en: The big downside for Heroku (other than the increased difficulty) is that as
    of November 28^(th), 2022, Heroku no longer has a free tier, whereas Streamlit
    Community Cloud and Hugging Face Spaces both do. If you want the features, you
    have to pay for them!
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Heroku 的一个大缺点（除了增加的复杂性）是，从 2022 年 11 月 28 日起，Heroku 不再提供免费层，而 Streamlit Community
    Cloud 和 Hugging Face Spaces 都提供免费层。如果你想要使用这些功能，就必须为它们付费！
- en: And that covers deploying Streamlit with Heroku! As you can see, Streamlit Community
    Cloud handles the majority of these difficulties out of the box, so I would make
    an effort to make Streamlit Community Cloud work whenever possible. However, this
    section should have given you an appreciation for the true breadth of options
    and configuration controls in front of us when we use Hugging Face Spaces and
    Heroku, which may come in handy in the future.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这就涵盖了如何通过 Heroku 部署 Streamlit！如你所见，Streamlit Community Cloud 开箱即用，处理了大部分这些困难，因此，我建议在可能的情况下尽量使用
    Streamlit Community Cloud。然而，本节内容应该让你意识到，当我们使用 Hugging Face Spaces 和 Heroku 时，面前有多种选项和配置控制，这在未来可能会派上用场。
- en: Summary
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This has been by far the most technical of our chapters so far, so congratulations
    on making it through! Deploying applications is notoriously difficult and time-consuming,
    and requires skills from software engineering and DevOps, along with often requiring
    experience with version control software (such as Git) and UNIX-style commands
    and systems. This is part of the reason why Streamlit Community Cloud is such
    a crucial innovation, but in this chapter, we have learned how to push the edge
    of Streamlit deployment by renting our own virtual machines and deploying apps
    on Hugging Face Spaces and Heroku. We have also learned how to figure out what
    the right deployment strategy is before starting out, which will save hours or
    days of work (nothing is worse than finishing the deployment of an app and finding
    out you need to use another platform!).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，这一章是最具技术性的，恭喜你成功完成！部署应用程序通常是非常困难且耗时的，需要软件工程和 DevOps 技能，还通常需要掌握版本控制软件（如
    Git）和 UNIX 风格的命令及系统。这也是为什么 Streamlit Community Cloud 是如此关键的创新之一，而在本章中，我们学习了通过租用自己的虚拟机并在
    Hugging Face Spaces 和 Heroku 上部署应用来推动 Streamlit 部署的极限。我们还学会了在开始之前确定正确的部署策略，这将节省数小时或数天的工作（没有什么比完成应用部署后发现需要使用其他平台更糟糕的事情了！）。
- en: Next, we’ll move on to learning how to query from databases inside our Streamlit
    apps.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将学习如何在我们的 Streamlit 应用中从数据库查询数据。
- en: Learn more on Discord
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Discord 上了解更多
- en: 'To join the Discord community for this book – where you can share feedback,
    ask questions to the author, and learn about new releases – follow the QR code
    below:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 加入本书的 Discord 社区——在这里你可以分享反馈、向作者提问，并了解新版本的发布——请扫描下方二维码：
- en: '[https://packt.link/sl](https://packt.link/sl)'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/sl](https://packt.link/sl)'
- en: '![](img/QR_Code13440134443835796.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/QR_Code13440134443835796.png)'
