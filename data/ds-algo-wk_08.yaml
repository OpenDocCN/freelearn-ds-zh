- en: Python Reference
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python参考
- en: Introduction
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Python is a general-purpose programming and scripting language. Its simplicity
    and extensive libraries make it possible to develop an application that is compatible
    with the modern requirements of technology quickly.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Python是一种通用编程和脚本语言。其简洁性和丰富的库使得开发出快速符合现代技术需求的应用成为可能。
- en: Python code is written in files with the suffix `.py`, and can be executed with
    the `python` command.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Python代码写在以`.py`为后缀的文件中，可以通过`python`命令执行。
- en: Python Hello World example
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python Hello World示例
- en: The simplest program in Python prints a single line of text.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Python中最简单的程序会打印一行文本。
- en: '**Input**:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**输入**：'
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Output**:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**：'
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Comments
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注释
- en: Comments are not executed in Python. They start with the `#` character, and
    end with the end of the line.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 注释在Python中不会被执行。它们以`#`字符开头，并以行尾结束。
- en: '**Input**:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**输入**：'
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Output**:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**：'
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Data types
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据类型
- en: 'Some of the data types available in Python are as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Python中可用的一些数据类型如下：
- en: '**Numeric data types**: `int` and `float`'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数值数据类型**：`int`和`float`'
- en: '**Text data types**: `str`'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文本数据类型**：`str`'
- en: '**Composite data types**: `tuple`, `list`, `set`, and `dictionary`'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**复合数据类型**：`tuple`、`list`、`set`和`dictionary`'
- en: int
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 整型
- en: The `int` data type can hold only integer values.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`int`数据类型只能存储整数值。'
- en: '**Input**:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**输入**：'
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Output**:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**：'
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: float
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 浮点数
- en: The `float` data type can also hold non-integer rational values.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`float`数据类型也可以存储非整数的有理数值。'
- en: '**Input**:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**输入**：'
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**Output**:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**：'
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: String
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字符串
- en: A string variable can be used to store text.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串变量可以用来存储文本。
- en: '**Input**:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**输入**：'
- en: '[PRE8]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**Output**:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**：'
- en: '[PRE9]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Tuple
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 元组
- en: A `tuple` data type is analogous to a vector in mathematics; for example, `tuple
    = (integer_number, float_number)`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`tuple`数据类型类似于数学中的向量；例如，`tuple = (整数, 浮点数)`。'
- en: '**Input**:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**输入**：'
- en: '[PRE10]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**Output**:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**：'
- en: '[PRE11]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: List
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列表
- en: A list in Python is an ordered set of values.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Python中的列表是一个有序的值集合。
- en: '**Input**:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**输入**：'
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '**Output**:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**：'
- en: '[PRE13]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Set
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集合
- en: A `Set` in Python is a non-ordered mathematical set of values.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`Set`是Python中的一个无序的数学集合类型。'
- en: '**Input**:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**输入**：'
- en: '[PRE14]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '**Output**:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**：'
- en: '[PRE15]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Dictionary
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字典
- en: A `dictionary` is a data structure that can store values by their keys.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`dictionary`是一种数据结构，可以通过键存储对应的值。'
- en: '**Input**:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**输入**：'
- en: '[PRE16]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '**Output**:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**：'
- en: '[PRE17]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Flow control
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 流程控制
- en: The Python programming language controls the flow of program execution through
    the use of conditionals, `for` loops (including the statements `break` and `continue` within
    them), and functions.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Python编程语言通过使用条件语句、`for`循环（包括`break`和`continue`语句）以及函数来控制程序执行流程。
- en: Conditionals
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 条件语句
- en: If a particular condition is met, a certain amount of code can be executed using
    the `if` statement. If the condition is not met, then we can execute the code
    following the `else` statement. If the first condition is not met, we can set
    the next condition for the code to be executed using the `elif` statement.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果满足特定条件，可以使用`if`语句执行一定的代码。如果条件不满足，则可以执行`else`语句后的代码。如果第一个条件不满足，我们可以设置下一个条件，通过`elif`语句来执行代码。
- en: '**I****nput**:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**输入**：'
- en: '[PRE18]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '**Output**:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**：'
- en: '[PRE19]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: For loop
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`for`循环'
- en: The `for` loop facilitates iteration through every element in a set of elements,
    for example, `range`, `python set`, and `list`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`for`循环可以遍历一组元素中的每个元素，例如，`range`、`python set`和`list`。'
- en: For loop on range
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 范围上的`for`循环
- en: '**Input**:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**输入**：'
- en: '[PRE20]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '**Output**:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**：'
- en: '[PRE21]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: For loop on list
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列表上的`for`循环
- en: '**Input**:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**输入**：'
- en: '[PRE22]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '**Output**:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**：'
- en: '[PRE23]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Break and continue
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Break和continue
- en: The `for` loops can be exited earlier using the `break` statement. The remainder
    of the cycle in the `for` loop can be skipped using the `continue` statement.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`for`循环可以通过`break`语句提前退出。使用`continue`语句可以跳过`for`循环中的剩余部分。'
- en: '**Input**:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**输入**：'
- en: '[PRE24]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '**Output**:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**：'
- en: '[PRE25]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Functions
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数
- en: Python supports the definition of functions, which is a good way to define a
    piece of code that can be executed at multiple places in the program. A function
    is defined using the `def` keyword.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Python支持函数的定义，这是一种很好的方式，可以在程序的多个地方执行相同的代码。函数是使用`def`关键字定义的。
- en: '**Input**:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**输入**：'
- en: '[PRE26]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '**Output**:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**：'
- en: '[PRE27]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Input and output
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 输入与输出
- en: Let's look at how to pass arguments to a Python program and how to read and
    write to a file.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何向Python程序传递参数，以及如何读写文件。
- en: Program arguments
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 程序参数
- en: We can pass arguments to a program from the command line.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过命令行向程序传递参数。
- en: '**Input**:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**输入**：'
- en: '[PRE28]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '**Output**:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**：'
- en: '[PRE29]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Reading and writing a file
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读写文件
- en: The following program will write two lines to the `test.txt` `file`, then read
    them, and finally, print them to the output.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 以下程序将写入两行到`test.txt`文件，然后读取它们，最后将其打印到输出。
- en: '**Input**:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '**输入**：'
- en: '[PRE30]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '**Output**:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**：'
- en: '[PRE31]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
