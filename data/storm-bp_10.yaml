- en: Chapter 10. Storm in the Cloud
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章。云中的Storm
- en: In this chapter, we will introduce you to deploying and running Storm in a hosted
    environment of a cloud provider.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将向您介绍在云提供商的托管环境中部署和运行Storm。
- en: In [Chapter 2](ch02.html "Chapter 2. Configuring Storm Clusters"), *Configuring
    Storm Clusters*, you were introduced to the steps necessary to set up Storm in
    a clustered environment, and the subsequent chapters covered the installation
    and configuration of complementary technologies such as Kafka, Hadoop, and Cassandra.
    While most installations are relatively straightforward, the cost to maintain
    even a modestly sized cluster—in terms of the physical asset requirements as well
    as the time necessary to configure and maintain the environment—can easily become
    a burden, if not an outright blocker to the adoption of distributed computing
    technologies.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](ch02.html“第2章。配置Storm集群”) *配置Storm集群*中，您已经了解了在集群环境中设置Storm所需的步骤，随后的章节涵盖了Kafka、Hadoop和Cassandra等辅助技术的安装和配置。虽然大多数安装都相对简单，但即使是维护规模适中的集群的成本——无论是物理资产要求还是配置和维护环境所需的时间——都很容易成为一个负担，甚至是对分布式计算技术采用的直接阻碍。
- en: Fortunately, today there are a number of cloud hosting providers that offer
    services for on-demand dynamic provisioning of multimachine computing environments.
    Most cloud hosting providers offer a wide range of services and options to fit
    most users' needs, ranging from a single small footprint server to a large-scale
    infrastructure consisting of hundreds or even thousands of machines. In fact,
    a common trend among high-profile Internet content providers is to choose a cloud
    hosting provider over an in-house data center.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，今天有许多云托管提供商提供按需动态配置多机计算环境的服务。大多数云托管提供商提供各种服务和选项，以满足大多数用户的需求，从单个小型服务器到由数百甚至数千台机器组成的大规模基础设施。事实上，高知名度的互联网内容提供商之间的一个常见趋势是选择云托管提供商而不是内部数据中心。
- en: One of the key benefits of using a cloud provider is the ability to deploy and
    undeploy computing resources as necessary, and on demand. An online retailer,
    for example, might provision additional servers and resources during the lead
    up to the holiday season in order to meet demand, scaling back later when the
    rush subsides. Also, as we'll see, cloud providers offer a cost-effective method
    for testing and prototyping distributed applications.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 使用云提供商的一个关键好处是能够根据需要和按需部署和取消部署计算资源。例如，网上零售商可能会在节假日季节前提供额外的服务器和资源，以满足需求，在高峰期后缩减。此外，正如我们将看到的，云提供商提供了一种成本效益的方法来测试和原型化分布式应用程序。
- en: We'll start by provisioning a Storm cluster with a cloud provider. Later in
    the chapter, we'll show you how to provision and manage local, virtualized Storm
    instances for testing Storm applications in a fully clustered environment on your
    workstation.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从使用云提供商为Storm集群进行配置开始。本章后面，我们将向您展示如何在工作站上的完全集群环境中为测试Storm应用程序进行本地虚拟化Storm实例的配置和管理。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Provisioning virtual machines using the **Amazon Web Services** (**AWS**) **Elastic
    Compute Cloud** (**EC2**)
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用**Amazon Web Services**（**AWS**）**弹性计算云**（**EC2**）配置虚拟机
- en: Using Apache Whirr to automate the provisioning and deployment of Storm clusters
    to EC2
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Apache Whirr自动配置和部署Storm集群到EC2
- en: Using Vagrant to launch and provision virtualized Storm clusters in a local
    environment for development and testing
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Vagrant在本地环境中启动和配置虚拟化Storm集群
- en: Introducing Amazon Elastic Compute Cloud (EC2)
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Amazon弹性计算云（EC2）
- en: Amazon EC2 is the central part of many remote compute services offered by Amazon.
    EC2 allows users to rent virtual compute resources hosted on Amazon's network
    infrastructure on demand.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon EC2是亚马逊提供的许多远程计算服务的核心部分。EC2允许用户按需租用托管在亚马逊网络基础设施上的虚拟计算资源。
- en: We'll begin by setting up an EC2 account and manually launching a virtual machine
    on Amazon's EC2 infrastructure.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从设置EC2账户并在亚马逊的EC2基础设施上手动启动虚拟机开始。
- en: Setting up an AWS account
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置AWS账户
- en: Establishing an AWS account is easy but requires an Amazon account. If you don't
    already have an Amazon account, sign up for one at [http://www.amazon.com/](http://www.amazon.com/).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 建立AWS账户很容易，但需要一个Amazon账户。如果您还没有Amazon账户，请在[http://www.amazon.com/](http://www.amazon.com/)上注册一个。
- en: With your Amazon account established, you can set up an AWS account at [http://aws.amazon.com/](http://aws.amazon.com/).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 建立了您的Amazon账户后，您可以在[http://aws.amazon.com/](http://aws.amazon.com/)上设置AWS账户。
- en: The AWS Management Console
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AWS管理控制台
- en: 'The **AWS Management Console** acts as the main administrative interface to
    all the cloud services that Amazon offers. We''re primarily interested in the
    EC2 service, so let''s begin by logging in to the EC2 Management Console as shown
    in the following screenshot:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**AWS管理控制台**充当了亚马逊提供的所有云服务的主要管理界面。我们主要关注EC2服务，因此让我们从登录到EC2管理控制台开始，如下面的屏幕截图所示：'
- en: '![The AWS Management Console](img/8294OS_10_01.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![AWS管理控制台](img/8294OS_10_01.jpg)'
- en: Creating an SSH key pair
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建SSH密钥对
- en: 'Before you can launch any EC2 instances, you will need a key pair. To create
    a new key pair, click on the **Key Pairs** link to open the key pair manager,
    as shown in the following screenshot:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动任何EC2实例之前，您将需要一个密钥对。要创建新的密钥对，请单击**密钥对**链接以打开密钥对管理器，如下面的屏幕截图所示：
- en: '![Creating an SSH key pair](img/8294OS_10_02.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![创建SSH密钥对](img/8294OS_10_02.jpg)'
- en: You will be prompted to give the key pair a name. Enter a name and click on
    the **Yes** button. At this point, depending on which browser you are using, you
    will be prompted to download your private certificate file or the file will be
    downloaded automatically.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 您将被提示为密钥对命名。输入名称，然后单击**是**按钮。此时，根据您使用的浏览器，您将被提示下载您的私人证书文件，或者文件将自动下载。
- en: 'It''s very important that you keep this file safe since the key will give you
    full administrator access to any EC2 images launched with that key. Immediately
    after downloading your private key, you should change its file permissions so
    it is not publicly readable; for example, with UNIX, use the following command:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 非常重要的是，您要确保保管好这个文件，因为该密钥将给您对使用该密钥启动的任何EC2映像的完全管理员访问权限。在下载私钥后立即更改其文件权限，以确保它不是公开可读的；例如，使用UNIX，使用以下命令：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Many SSH clients will look at the permissions of the key file and issue a warning
    or refuse to use a key file that is publicly readable.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 许多SSH客户端将查看密钥文件的权限并发出警告，或拒绝使用公开可读的密钥文件。
- en: Launching an EC2 instance manually
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 手动启动EC2实例
- en: Once you have created a key pair, you are ready to launch an EC2 instance.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了密钥对后，您就可以启动EC2实例了。
- en: The first step in launching an EC2 machine is to select an **Amazon Machine
    Image** (**AMI**). An AMI is a virtual appliance template that can be run as a
    virtual machine on Amazon EC2.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 启动EC2机器的第一步是选择**Amazon Machine Image**（**AMI**）。AMI是一个虚拟设备模板，可以在Amazon EC2上作为虚拟机运行。
- en: 'Amazon provides a number of AMIs for popular operating system distributions
    such as Red Hat, Ubuntu, and SUSE. For our purposes, we will be using an Ubuntu
    Server instance as shown in the following screenshot:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊提供了许多流行操作系统发行版的AMI，例如Red Hat、Ubuntu和SUSE。对于我们的目的，我们将使用Ubuntu Server实例，如下截图所示：
- en: '![Launching an EC2 instance manually](img/8294OS_10_03.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![手动启动EC2实例](img/8294OS_10_03.jpg)'
- en: Once you've selected an AMI, you will be prompted to select an **instance type**.
    Instance types represent virtual hardware profiles with varying memory (RAM),
    CPU cores, storage, and I/O performance. Amazon charges by the hour for running
    instances, with prices ranging from a few cents per hour for its weakest instance
    type (**t1.micro**) to several dollars per hour for its most powerful instance
    type (**hs1.8xlarge**). The type you select will depend on your use case and budget.
    For example, a **t1.micro** instance (one CPU, 0.6 GB RAM, and low I/O performance)
    can be useful for testing purposes but is clearly not suited for heavy production
    loads.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 选择了AMI后，您将被提示选择一个**实例类型**。实例类型代表具有不同内存（RAM）、CPU核心、存储和I/O性能的虚拟硬件配置文件。亚马逊按小时收取运行实例的费用，价格从最弱实例类型（**t1.micro**）的几美分每小时到最强实例类型（**hs1.8xlarge**）的几美元每小时不等。您选择的类型将取决于您的用例和预算。例如，**t1.micro**实例（一个CPU，0.6
    GB RAM和低I/O性能）可用于测试目的，但显然不适用于大规模生产负载。
- en: 'After selecting an instance type, you are ready to launch the virtual machine
    by clicking on the **Review and Launch** button, reviewing the instance details,
    and then clicking on **Launch**. You will then be prompted to select a key pair
    for remote login and management of the instance. After a few minutes, your instance
    will be up and running as shown in the following screenshot:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 选择实例类型后，您可以通过单击**审阅并启动**按钮，审阅实例详细信息，然后单击**启动**来启动虚拟机。然后，您将被提示选择一个用于远程登录和管理实例的密钥对。几分钟后，您的实例将如下截图所示启动并运行：
- en: '![Launching an EC2 instance manually](img/8294OS_10_04.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![手动启动EC2实例](img/8294OS_10_04.jpg)'
- en: Logging in to the EC2 instance
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 登录到EC2实例
- en: When you launch an instance, EC2 will preconfigure SSH with the key pair you
    selected during the setup, allowing you to remotely log in to the machine. To
    log in to the instance remotely, you will need the private key file you downloaded
    earlier as well as the public DNS name (or public IP address) assigned to the
    instance. You can find this information in the EC2 Management Console by clicking
    on the instance and viewing the details.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当您启动一个实例时，EC2将使用您在设置过程中选择的密钥对预配置SSH，从而允许您远程登录到该机器。要远程登录到实例，您将需要之前下载的私钥文件以及分配给实例的公共DNS名称（或公共IP地址）。您可以在EC2管理控制台中找到这些信息，方法是单击实例并查看详细信息。
- en: 'You can now connect to the instance with the following command:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以使用以下命令连接到实例：
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'For example, to connect as the "ubuntu" user using the `my-keypair.pem` private
    key file:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以“ubuntu”用户身份使用`my-keypair.pem`私钥文件进行连接：
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The Ubuntu user has administrator permissions on the remote host, giving you
    the ability to configure the machine the way you like.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Ubuntu用户在远程主机上具有管理员权限，使您能够按照自己的喜好配置机器。
- en: At this point, you could install Storm or any other services you like. However,
    manually configuring instances for anything larger than a trivially sized cluster
    will quickly become time-consuming and unmanageable. In the next section, we'll
    introduce a way to automate this process as part of a more scalable workflow.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，您可以安装Storm或任何其他您喜欢的服务。然而，手动配置大于微小规模集群的实例将很快变得耗时且难以管理。在下一节中，我们将介绍一种自动化此过程的方法，作为更可扩展工作流程的一部分。
- en: Introducing Apache Whirr
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Apache Whirr
- en: The Apache Whirr project ([http://whirr.apache.org](http://whirr.apache.org))
    provides a Java API and set of shell scripts for installing and running various
    services on cloud providers such as Amazon EC2 and Rackspace. Whirr allows you
    to define the layout of a cluster in terms of the number of nodes as well as control
    which services run on each node. Whirr also comes with a set of scripts for performing
    management operations such as launching new clusters, starting and stopping clusters,
    and terminating clusters.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Apache Whirr项目（[http://whirr.apache.org](http://whirr.apache.org)）提供了一个Java
    API和一组shell脚本，用于在云提供商（如Amazon EC2和Rackspace）上安装和运行各种服务。Whirr允许您根据节点数量定义集群的布局，以及控制每个节点上运行哪些服务。Whirr还配备了一组用于执行管理操作的脚本，例如启动新集群、启动和停止集群以及终止集群。
- en: Whirr began as a set of shell scripts for running Hadoop on Amazon EC2, and
    later matured to include a Java API based on the Apache jclouds ([http://jclouds.apache.org](http://jclouds.apache.org))
    project, which allowed it to support multiple cloud providers. Whirr has also
    expanded beyond Hadoop to support many additional distributed computing services
    such as Cassandra, Elastic Search, HBase, Pig, and others.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Whirr最初是一组用于在Amazon EC2上运行Hadoop的shell脚本，后来发展成包含基于Apache jclouds ([http://jclouds.apache.org](http://jclouds.apache.org))项目的Java
    API，这使其能够支持多个云提供商。Whirr还扩展到支持许多其他分布式计算服务，如Cassandra、Elastic Search、HBase、Pig等。
- en: Installing Whirr
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Whirr
- en: 'Begin by downloading a recent release and unpacking it on the computer you
    will use to launch and manage your clusters:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 首先下载最新版本并在您用于启动和管理集群的计算机上解压缩：
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'For convenience, add Whirr''s `bin` directory to your system''s `PATH` environment
    variable so you can run the Whirr command from any directory as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便起见，将Whirr的`bin`目录添加到系统的`PATH`环境变量中，这样您就可以从任何目录运行Whirr命令，如下所示：
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Whirr uses SSH to communicate with cloud instances, so we will create a dedicated
    key pair for using it with Whirr. Whirr requires that the key has an empty passphrase
    as shown in the following command:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Whirr使用SSH与云实例通信，因此我们将为其创建一个专用密钥对。Whirr要求密钥没有空密码，如下命令所示：
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In order for Whirr to interact with your cloud provider account, it needs to
    know your credentials. For EC2, this consists of your EC2 Access Key ID and your
    EC2 Secret Access Key. If your AWS account is new, you will need to generate new
    credentials; otherwise, you should already have downloaded your credentials to
    a safe location. To generate a new set of EC2 credentials, perform the following
    steps:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让Whirr与您的云提供商账户进行交互，它需要知道您的凭据。对于EC2，这包括您的EC2访问密钥ID和您的EC2秘密访问密钥。如果您的AWS账户是新的，您需要生成新的凭据；否则，您应该已经将您的凭据下载到一个安全的位置。要生成一组新的EC2凭据，请执行以下步骤：
- en: Log in to the **AWS Management Console**.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到**AWS管理控制台**。
- en: Click on the name in the top-right section of the navigation bar and select
    **Security Credentials**.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击导航栏右上部的名称，然后选择**安全凭据**。
- en: Expand the section titled **Access Keys (Access Key ID and Secret Access Key)**
    and click on the **Create New Access Key** button.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开标题为**访问密钥（访问密钥ID和秘密访问密钥）**的部分，然后点击**创建新的访问密钥**按钮。
- en: Click on the **Download Key File** to download your credentials to a safe location.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下载密钥文件**将您的凭据下载到安全的位置。
- en: 'The key file you downloaded will contain your Access Key ID and Secret Access
    Key in the following format:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 您下载的密钥文件将以以下格式包含您的访问密钥ID和秘密访问密钥：
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Whirr gives you three options for specifying your cloud credentials: command-line
    parameters, cluster configuration file, or a local credentials file (`~/.whirr/credentials`).
    We''ll use the last option as it is the most convenient as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Whirr为指定云凭据提供了三种选项：命令行参数、集群配置文件或本地凭据文件（`~/.whirr/credentials`）。我们将使用最后一个选项，因为它是最方便的，如下所示：
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Configuring a Storm cluster with Whirr
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Whirr配置Storm集群
- en: Now that we have Whirr installed, let's turn our attention toward cluster configuration.
    Whirr's configuration files, or recipes, are just Java property files that contain
    Whirr properties which define the layout of nodes and services within a cluster.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经安装了Whirr，让我们把注意力转向集群配置。Whirr的配置文件或配方只是包含Whirr属性的Java属性文件，这些属性定义了集群中节点和服务的布局。
- en: 'Let''s start by looking at the minimum configuration necessary to launch a
    3-node ZooKeeper cluster:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先看一下启动3节点ZooKeeper集群所需的最小配置：
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `whirr.cluster-name` property simply assigns a unique identifier to the
    cluster and is used when running management commands such as listing the hosts
    in a cluster or destroying a cluster.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`whirr.cluster-name`属性只是为集群分配一个唯一标识符，并且在运行管理命令时使用，比如列出集群中的主机或销毁集群。'
- en: The `whirr.instance-template` property defines the number of nodes in a cluster
    and the services that run on each node. In the preceding example, we've defined
    a cluster of three nodes, with each node assigned with the ZooKeeper role.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`whirr.instance-template`属性定义了集群中节点的数量以及每个节点上运行的服务。在上面的示例中，我们定义了一个由三个节点组成的集群，每个节点分配了ZooKeeper角色。'
- en: 'With just these two properties defined, we have enough to tell Whirr how to
    launch and manage a ZooKeeper cluster. Whirr will use default values for everything
    else. However, there are a few options that you will typically want to override.
    For example, we''ll want Whirr to use the dedicated key pair we created earlier
    as shown in the following code snippet:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 只需定义这两个属性，我们就有足够的信息告诉Whirr如何启动和管理ZooKeeper集群。Whirr将对其他所有内容使用默认值。但是，通常有一些选项您可能想要覆盖。例如，我们希望Whirr使用我们之前创建的专用密钥对，如下面的代码片段所示：
- en: '[PRE9]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Next, we''ll configure Whirr with the hardware specification we want and the
    region in which our cluster should be hosted, as shown in the following code snippet:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将使用以下代码片段配置Whirr所需的硬件规格和我们的集群应该托管的区域：
- en: '[PRE10]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `whirr.image-id` property is provider specific and specifies which machine
    image to use. Here, we've specified an Ubuntu 10.04 64-bit AMI.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`whirr.image-id`属性是特定于提供商的，指定要使用的机器映像。在这里，我们指定了一个Ubuntu 10.04 64位AMI。'
- en: 'Since we''re just testing Whirr, we''ve chosen the smallest (and least expensive)
    instance type: `t1.micro`. Finally, we''ve specified that we want our cluster
    deployed in the `us-east-1` region.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们只是在测试Whirr，我们选择了最小（也是最便宜）的实例类型：`t1.micro`。最后，我们指定我们希望我们的集群部署在`us-east-1`区域。
- en: 'For a complete list of public AMIs, perform the following steps:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取公共AMI的完整列表，请执行以下步骤：
- en: From the EC2 Management Console, select a region from the drop-down menu in
    the upper-right corner.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从EC2管理控制台，从右上角的下拉菜单中选择一个区域。
- en: In the left navigation pane, click on **AMIs**.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧导航窗格中，点击**AMIs**。
- en: From the **Filter** drop-down menu at the top of the page, select **Public images**.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从页面顶部的**筛选**下拉菜单中，选择**公共镜像**。
- en: Whirr is most thoroughly tested with Ubuntu Linux images. While other operating
    systems may work, if you run into problems, try again with an Ubuntu image.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Whirr最彻底地测试了Ubuntu Linux映像。虽然其他操作系统可能有效，但如果遇到问题，请尝试使用Ubuntu映像再次尝试。
- en: Launching the cluster
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动集群
- en: 'Our configuration file for a ZooKeeper cluster now looks like the following
    code snippet:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的ZooKeeper集群的配置文件现在如下所示的代码片段：
- en: '[PRE11]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If we save those properties to a file named `zookeeper.properties`, we can
    then launch the cluster with the following command:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将这些属性保存到名为`zookeeper.properties`的文件中，然后可以使用以下命令启动集群：
- en: '[PRE12]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: When the command completes, Whirr will output the list of instances created
    as well as the SSH command that can be used to connect to each instance.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 当命令完成时，Whirr将输出创建的实例列表，以及可用于连接到每个实例的SSH命令。
- en: 'You can log in to instances using the following SSH commands:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下SSH命令登录实例：
- en: '[PRE13]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: To destroy a cluster, run `whirr destroy-cluster` with the same options used
    to launch it.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 要销毁集群，请使用与启动相同的选项运行`whirr destroy-cluster`。
- en: 'When you are finished with the cluster, you can terminate all instances with
    the following command:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 当您完成集群后，可以使用以下命令终止所有实例：
- en: '[PRE14]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Introducing Whirr Storm
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Whirr Storm
- en: The Whirr Storm project ([https://github.com/ptgoetz/whirr-storm](https://github.com/ptgoetz/whirr-storm))
    is a Whirr service implementation for configuring Storm clusters. Whirr Storm
    supports the configuration of all Storm daemons as well as full control over Storm's
    `storm.yaml` configuration file.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Whirr Storm项目（[https://github.com/ptgoetz/whirr-storm](https://github.com/ptgoetz/whirr-storm)）是用于配置Storm集群的Whirr服务实现。Whirr
    Storm支持所有Storm守护程序的配置，以及对Storm的`storm.yaml`配置文件的完全控制。
- en: Setting up Whirr Storm
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置Whirr Storm
- en: 'To install the Whirr Storm service, simply place the JAR file in the `$WHIRR_HOME/lib`
    directory as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Whirr Storm服务，只需将JAR文件放在`$WHIRR_HOME/lib`目录中，如下所示：
- en: '[PRE15]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Next, verify the installation by running the `Whirr` command without arguments
    to print a list of instance roles available to Whirr. The list should now include
    the roles provided by Whirr Storm as shown in the following code snippet:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过运行`Whirr`命令而不带参数来验证安装，以打印Whirr可用的实例角色列表。现在列表应该包括Whirr Storm提供的角色，如下面的代码片段所示：
- en: '[PRE16]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Cluster configuration
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 集群配置
- en: 'In our previous Whirr example, we created a cluster of three nodes where each
    node had only the ZooKeeper role. Whirr allows you to assign multiple roles to
    a node, which we''ll need to do for a Storm cluster. Before we get into the details
    of configuring Whirr for Storm, let''s take a look at the different roles Whirr
    Storm defines as shown in the following table:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前的Whirr示例中，我们创建了一个由三个节点组成的集群，每个节点只具有ZooKeeper角色。Whirr允许您为节点分配多个角色，这是我们需要为Storm集群做的。在我们深入配置Whirr为Storm做准备之前，让我们看一下Whirr
    Storm定义的不同角色，如下表所示：
- en: '| Role | Description |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: 角色 | 描述
- en: '| --- | --- |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `storm-nimbus` | This is the role for running the Nimbus daemon. Only one
    node per cluster should be assigned with this role. |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '`storm-nimbus` | 这是运行Nimbus守护程序的角色。每个集群只应分配一个节点给此角色。'
- en: '| `storm-supervisor` | This is the role for running the supervisor daemon.
    |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '`storm-supervisor` | 这是运行监督者守护程序的角色。'
- en: '| `storm-ui` | This is the role for running the Storm UI web service. |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '`storm-ui` | 这是运行Storm UI Web服务的角色。'
- en: '| `storm-logviewer` | This is the role for running the Storm logviewer service.
    This role should only be assigned to nodes that also have the `storm-supervisor`
    role. |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '`storm-logviewer` | 这是运行Storm日志查看器服务的角色。此角色只应分配给同时具有`storm-supervisor`角色的节点。'
- en: '| `storm-drpc` | This is the role for running the Storm DRPC service. |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '`storm-drpc` | 这是运行Storm DRPC服务的角色。'
- en: '| `zookeeper` | This role is provided by Whirr. Nodes with this role will be
    part of a ZooKeeper cluster. You must have at least one ZooKeeper node in a Storm
    cluster, and for multi-node ZooKeeper clusters, the number of nodes should be
    odd. |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '`zookeeper` | 这个角色由Whirr提供。具有此角色的节点将成为ZooKeeper集群的一部分。在Storm集群中，您必须至少有一个ZooKeeper节点，对于多节点ZooKeeper集群，节点的数量应该是奇数。'
- en: 'To use these roles in a Whirr configuration, we specify them in the `whirr.instance-template`
    property in the following format:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Whirr配置中使用这些角色，我们以以下格式在`whirr.instance-template`属性中指定它们：
- en: '[PRE17]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'For example, to create a single-node pseudocluster, where all Storm''s daemons
    are run on one machine, we would use the following value for `whirr.instance-template`:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要创建一个单节点伪集群，其中所有Storm的守护程序都在一台机器上运行，我们将使用以下值作为`whirr.instance-template`：
- en: '[PRE18]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'If we wanted to create a multinode cluster with one node running Nimbus and
    Storm UI, three nodes running the supervisor and logviewer daemons, and a 3-node
    ZooKeeper cluster, we would use the following configuration:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要创建一个多节点集群，其中一个节点运行Nimbus和Storm UI，三个节点运行监督者和日志查看器守护程序，以及一个3节点的ZooKeeper集群，我们将使用以下配置：
- en: '[PRE19]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Customizing Storm's configuration
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自定义Storm的配置
- en: Whirr Storm will generate a `storm.yaml` configuration file with values for
    `nimbus.host`, `storm.zookeeper.servers`, and `drpc.servers` that are automatically
    calculated based on the hostnames of nodes in the cluster and which roles they
    have been assigned with. All other Storm configuration parameters will inherit
    default values unless specifically overridden. Note that if you attempt to override
    values for `nimbus.host`, `storm.zookeeper.servers`, or `drpc.servers`, Whirr
    Storm will ignore it and log a warning message.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: Whirr Storm将生成一个`storm.yaml`配置文件，其中包含`nimbus.host`、`storm.zookeeper.servers`和`drpc.servers`的值，这些值是根据集群中节点的主机名自动计算的，以及它们被分配的角色。除非特别覆盖，所有其他Storm配置参数将继承默认值。请注意，如果尝试覆盖`nimbus.host`、`storm.zookeeper.servers`或`drpc.servers`的值，Whirr
    Storm将忽略它并记录警告消息。
- en: Tip
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'Although Whirr Storm will automatically calculate and configure the `nimbus.host`
    value for the cluster, you will still need to tell the Storm executable the host
    name of the Nimbus host when running the command locally. The easiest way to do
    this, and the most convenient if you have multiple clusters, is to specify a hostname
    for nimbus with the `–c` flag as follows:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Whirr Storm将自动计算和配置集群的`nimbus.host`值，但在本地运行命令时，您仍需要告诉Storm可执行文件Nimbus主机的主机名。最简单的方法是，如果您有多个集群，可以使用`-c`标志指定nimbus的主机名，如下所示：
- en: '[PRE20]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Other Storm configuration parameters can be specified in the Whirr configuration
    file by adding a property with a key prefixed with `whirr-storm`. For example,
    to set a value for the `topology.message.timeout.secs` parameter, we would add
    it to the Whirr configuration file as follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 其他Storm配置参数可以通过在Whirr配置文件中添加以`whirr-storm`为前缀的键的属性来指定。例如，要为`topology.message.timeout.secs`参数设置一个值，我们将其添加到Whirr配置文件中，如下所示：
- en: '[PRE21]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The preceding code would result in the following line in `storm.yaml`:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将导致`storm.yaml`中的以下行：
- en: '[PRE22]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Configuration parameters that accept a list of values can be expressed in the
    Whirr configuration file as a comma-separated list, such as the following configuration
    for `supervisor.slots.ports`:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 接受值列表的配置参数可以在Whirr配置文件中表示为逗号分隔的列表，例如`supervisor.slots.ports`的以下配置：
- en: '[PRE23]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The preceding code would produce the following YAML:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将产生以下YAML：
- en: '[PRE24]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Customizing firewall rules
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自定义防火墙规则
- en: When a new machine instance is launched on EC2, most of its network ports are
    blocked by a firewall by default. To enable network communication between instances,
    you must explicitly configure firewall rules to allow ingress and egress on specific
    ports between hosts.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在EC2上启动新的机器实例时，默认情况下，大多数网络端口都会被防火墙阻止。要在实例之间启用网络通信，必须显式配置防火墙规则，以允许特定端口之间的主机之间的入站和出站。
- en: 'By default, Whirr Storm will automatically create the security groups and firewall
    rules necessary for Storm components to communicate, such as opening the Nimbus
    Thrift port for topology submission and opening port 2181 between **Nimbus** and
    **Supervisor** nodes, and ZooKeeper nodes as shown in the following diagram:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Whirr Storm将自动创建安全组和防火墙规则，以便Storm组件进行通信，例如打开Nimbus Thrift端口进行拓扑提交，并在**Nimbus**和**Supervisor**节点之间打开端口2181，以及ZooKeeper节点如下图所示：
- en: '![Customizing firewall rules](img/8294OS_10_05.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![自定义防火墙规则](img/8294OS_10_05.jpg)'
- en: However, in many cases, Storm's worker processes will need to communicate with
    other services on arbitrary ports. For example, if you have a spout that consumes
    data from an external queue or a bolt that writes to a database, you will need
    additional firewall rules to enable that interaction.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在许多情况下，Storm的worker进程将需要与任意端口上的其他服务进行通信。例如，如果您有一个从外部队列消耗数据的spout，或者一个写入数据库的bolt，您将需要额外的防火墙规则来启用该交互。
- en: 'Consider a scenario where we have a spout reading data from a Kafka queue and
    streaming data to a bolt that writes to a Cassandra database. In such scenarios,
    we would set up our cluster with the following `whirr.instance-template` value:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑这样一个情景，我们有一个spout从Kafka队列中读取数据，并将数据流式传输到一个写入Cassandra数据库的bolt。在这种情况下，我们将使用以下`whirr.instance-template`值设置我们的集群：
- en: '[PRE25]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'With this setup, we need a firewall configuration that allows each of the Supervisor/worker
    nodes to connect to each of the Kafka nodes on port 9092 and each of the Cassandra
    nodes on port 9126, as shown in the following diagram:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个设置，我们需要一个防火墙配置，允许每个Supervisor/worker节点连接到每个Kafka节点的9092端口，以及每个Cassandra节点的9126端口，如下图所示：
- en: '![Customizing firewall rules](img/8294OS_10_06.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![自定义防火墙规则](img/8294OS_10_06.jpg)'
- en: 'For this situation, Whirr Storm has the configuration property `whirr.storm.supervisor.firewall-rules`
    that allows you to open arbitrary ports on other nodes in the cluster. The property
    value is a comma-delimited list of role-port pairs as shown in the following code
    snippet:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这种情况，Whirr Storm具有配置属性`whirr.storm.supervisor.firewall-rules`，允许您在集群中的其他节点上打开任意端口。属性值是一个逗号分隔的角色-端口对的列表，如下面的代码片段所示：
- en: '[PRE26]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'For example, to set up the rules for our scenario, we would use the following
    setting:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要为我们的场景设置规则，我们将使用以下设置：
- en: '[PRE27]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This configuration will instruct Whirr Storm to create firewall rules that allow
    each Supervisor node to connect to each Cassandra node on port 9160 and each Supervisor
    node to connect to each Kafka node on port 9092.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 此配置将指示Whirr Storm创建防火墙规则，允许每个Supervisor节点连接到每个Cassandra节点的9160端口，以及每个Supervisor节点连接到每个Kafka节点的9092端口。
- en: Introducing Vagrant
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Vagrant
- en: Vagrant ([http://www.vagrantup.com](http://www.vagrantup.com)) is a tool similar
    to Apache Whirr in that it's designed to help provision virtual machine instances
    in an easy and repeatable manner. However, Whirr and Vagrant differ in a key way.
    While Whirr's primary purpose is to enable cloud-based provisioning, Vagrant focuses
    more on local virtualization with virtualization software such as VirtualBox and
    VMWare.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: Vagrant ([http://www.vagrantup.com](http://www.vagrantup.com))是一个类似于Apache Whirr的工具，它旨在帮助以一种简单和可重复的方式提供虚拟机实例。但是，Whirr和Vagrant在一个关键方面有所不同。Whirr的主要目的是实现基于云的提供，而Vagrant更专注于使用诸如VirtualBox和VMWare等虚拟化软件的本地虚拟化。
- en: Vagrant supports several virtual machine providers, including VirtualBox ([https://www.virtualbox.org](https://www.virtualbox.org))
    and VMWare ([http://www.vmware.com](http://www.vmware.com)). In this chapter,
    we'll cover the use of Vagrant with VirtualBox since it is free and well supported
    by Vagrant.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: Vagrant支持多个虚拟机提供程序，包括VirtualBox ([https://www.virtualbox.org](https://www.virtualbox.org))和VMWare
    ([http://www.vmware.com](http://www.vmware.com))。在本章中，我们将介绍如何使用Vagrant与VirtualBox，因为它是免费的，并且得到了Vagrant的良好支持。
- en: Prior to using Vagrant, you must install a 4.x Version of VirtualBox (Vagrant
    does not yet support Version 5.x). We covered the VirtualBox installation in [Chapter
    2](ch02.html "Chapter 2. Configuring Storm Clusters"), *Configuring Storm Clusters*,
    and will not repeat those instructions here. Installing VirtualBox is largely
    just a matter of running an installer, but if you run into issues, please refer
    to the instructions in [Chapter 2](ch02.html "Chapter 2. Configuring Storm Clusters"),
    *Configuring Storm Clusters*.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Vagrant之前，您必须安装VirtualBox的4.x版本（Vagrant尚不支持5.x版本）。我们在[第2章](ch02.html "第2章。配置Storm集群")*配置Storm集群*中介绍了VirtualBox的安装，并且不会在此重复这些说明。安装VirtualBox主要只是运行安装程序，但如果遇到问题，请参考[第2章](ch02.html
    "第2章。配置Storm集群")*配置Storm集群*中的说明。
- en: Installing Vagrant
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Vagrant
- en: 'Linux packages and Vagrant installers for OS X and Windows are available on
    the Vagrant website ([http://www.vagrantup.com/downloads.html](http://www.vagrantup.com/downloads.html)).
    Be sure to install the latest version of Vagrant as it will include the most recent
    updates and bug fixes. The installation process will update your system''s `PATH`
    variable to include the Vagrant executable. You can verify the installation by
    opening a terminal and typing `vagrant --version` as follows:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: Linux软件包和OS X和Windows的Vagrant安装程序可在Vagrant网站上找到（[http://www.vagrantup.com/downloads.html](http://www.vagrantup.com/downloads.html)）。请确保安装最新版本的Vagrant，因为它将包括最新的更新和错误修复。安装过程将更新系统的“PATH”变量以包括Vagrant可执行文件。您可以通过打开终端并输入“vagrant
    --version”来验证安装：
- en: '[PRE28]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: If the command fails for any reason, consult the Vagrant website for solutions
    to common problems.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 如果命令因任何原因失败，请查阅Vagrant网站以获取常见问题的解决方案。
- en: Launching your first virtual machine
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动您的第一个虚拟机
- en: 'Launching a virtual machine with Vagrant involves two steps. First, you initialize
    a new Vagrant project with the `vagrant init` command as follows:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Vagrant启动虚拟机涉及两个步骤。首先，您可以使用以下命令初始化一个新的Vagrant项目：
- en: '[PRE29]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The two arguments to the `vagrant init` command are `name` and `URL` for a Vagrant
    *box*. A Vagrant box is a virtual machine image that is specially packaged for
    use with Vagrant. Since Vagrant boxes can be quite large (over 300 MB), Vagrant
    will store them locally on the disk rather than download them every time. The
    `name` parameter simply provides an identifier for the box, so it can be reused
    in other Vagrant configurations, while the `URL` parameter tells Vagrant about
    the download location for the box.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: “vagrant init”命令的两个参数是Vagrant *box*的“name”和“URL”。Vagrant box是专门为Vagrant打包的虚拟机映像。由于Vagrant
    box可能相当大（超过300 MB），Vagrant将其存储在本地磁盘上，而不是每次都下载。 “name”参数只是为box提供标识符，以便在其他Vagrant配置中重复使用，而“URL”参数告诉Vagrant有关box的下载位置。
- en: 'The next step is to launch the virtual machine as follows:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是启动虚拟机，如下所示：
- en: '[PRE30]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: If the Vagrant box specified in the `vagrant init` command is not found on the
    local disk, Vagrant will download it. Vagrant will then clone the virtual machine,
    boot it, and configure networking so it is easily accessible from the host machine.
    When the command completes, a VirtualBox virtual machine running Ubuntu 12.04
    LTS 64-bit will be running in the background.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在本地磁盘上找不到“vagrant init”命令中指定的Vagrant box，Vagrant将会下载它。然后，Vagrant将克隆虚拟机，启动它，并配置网络，以便从主机机器轻松访问。当命令完成时，将在后台运行一个运行Ubuntu
    12.04 LTS 64位的VirtualBox虚拟机。
- en: 'You can then log in to the machine using SSH commands:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以使用SSH命令登录到机器：
- en: '[PRE31]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The Vagrant user has administrative privileges so you are free to do anything
    you like with the virtual machine, such as install software packages and modify
    files. When you are finished with the virtual machine, you can shut it down and
    remove all traces of it with the `vagrant destroy` command:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: Vagrant用户具有管理权限，因此您可以自由地对虚拟机进行任何操作，例如安装软件包和修改文件。完成虚拟机后，您可以使用“vagrant destroy”命令关闭它并删除所有痕迹：
- en: '[PRE32]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Vagrant provides additional management commands for operations such as suspending,
    resuming, and halting the virtual machine. For an overview of the commands Vagrant
    provides, run the `vagrant --help` command.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: Vagrant提供了用于操作的其他管理命令，例如暂停、恢复和关闭虚拟机。要了解Vagrant提供的命令的概述，请运行“vagrant --help”命令。
- en: The Vagrantfile and shared filesystem
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Vagrantfile和共享文件系统
- en: 'When we ran the `vagrant init` command, Vagrant created a file named `Vagrantfile`
    in the directory where we ran the command. This file describes the type of machine(s)
    a project requires and how to provision and set up the machines. Vagrantfiles
    are written using a Ruby syntax that is easy to learn even if you are not a Ruby
    developer. The initial content of the `Vagrantfile` will be minimal and largely
    made up of documentation comments. With the comments removed, our Vagrant file
    looks like the following code snippet:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行“vagrant init”命令时，Vagrant会在我们运行命令的目录中创建一个名为“Vagrantfile”的文件。该文件描述了项目所需的机器类型以及如何配置和设置这些机器。Vagrantfiles使用Ruby语法编写，即使您不是Ruby开发人员，也很容易学习。Vagrant文件的初始内容将是最小的，并且主要由文档注释组成。删除注释后，我们的Vagrant文件看起来像以下代码片段：
- en: '[PRE33]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: As you can see, the file simply contains the box name and URL that we passed
    to the `vagrant init` command. We will expand on this later as we build out a
    Vagrant project to provision a virtualized Storm cluster.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，该文件只包含我们传递给“vagrant init”命令的box名称和URL。随后，我们将在构建Vagrant项目以配置虚拟化Storm集群时进行扩展。
- en: When you launch a machine with `vagrant up`, by default Vagrant will create
    a shared folder on the virtual machine (`/vagrant`) that will be synchronized
    with the contents of the project directory (the directory containing the `Vagrantfile`).
    You can verify this functionality by logging in to the virtual machine and listing
    the contents of that directory
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用“vagrant up”启动机器时，默认情况下Vagrant将在虚拟机上创建一个共享文件夹（“/vagrant”），该文件夹将与项目目录（包含“Vagrantfile”的目录）的内容同步。您可以通过登录虚拟机并列出该目录的内容来验证此功能
- en: '[PRE34]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: This is where we will store all our provisioning scripts and data files. While
    the `vagrant destroy` command removes all traces of a virtual machine, it leaves
    the contents of the project directory untouched. This allows us to store persistent
    project data that will always be available to our virtual machines.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们将存储所有配置脚本和数据文件的地方。虚拟机的`vagrant destroy`命令会删除所有痕迹，但不会影响项目目录的内容。这使我们能够存储持久的项目数据，这些数据将始终可用于我们的虚拟机。
- en: Vagrant provisioning
  id: totrans-166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Vagrant配置
- en: Vagrant supports provisioning with shell scripts as well Puppet and Chef. We'll
    use the shell provisioner since it is the easiest to start with as it does not
    require any additional knowledge aside from basic shell scripting.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: Vagrant支持使用shell脚本、Puppet和Chef进行配置。我们将使用shell provisioner，因为它是最容易开始的，除了基本的shell脚本之外不需要任何额外的知识。
- en: 'To illustrate how Vagrant shell provisioning works, we''ll modify our Vagrant
    project to install the Apache web server in the Vagrant virtual machine. We will
    begin by creating a simple shell script to install Apache2 using Ubuntu''s APT
    package manager. Save the following script as `install_apache.sh` in the same
    directory as the `Vagrantfile`:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明Vagrant shell provisioning的工作原理，我们将修改我们的Vagrant项目，以在Vagrant虚拟机中安装Apache
    web服务器。我们将首先创建一个简单的shell脚本，使用Ubuntu的APT软件包管理器安装Apache2。将以下脚本保存为`install_apache.sh`，放在与`Vagrantfile`相同的目录中：
- en: '[PRE35]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Next, we''ll modify our `Vagrantfile` to execute our script when Vagrant provisions
    our virtual machine by adding the following line:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '接下来，我们将修改我们的`Vagrantfile`，在Vagrant配置虚拟机时执行我们的脚本，添加以下行： '
- en: '[PRE36]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Finally, configure port forwarding so requests to port 8080 on the host machine
    are forwarded to port 8080 on the guest (virtual) machine:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，配置端口转发，使主机上端口8080的请求转发到客户（虚拟）机上的端口8080：
- en: '[PRE37]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Our complete Vagrantfile should now look like the following:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们完整的Vagrantfile现在应该如下所示：
- en: '[PRE38]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: If your virtual machine is still running, kill it now by running `vagrant destroy`,
    then execute `vagrant up` to bring up a new virtual machine. When Vagrant completes,
    you should be able to view the default Apache page by pointing your browser to
    `http://localhost:8080` on the host machine.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的虚拟机仍在运行，请立即通过运行`vagrant destroy`来关闭它，然后执行`vagrant up`来启动一个新的虚拟机。当Vagrant完成时，您应该能够通过将浏览器指向主机机器上的`http://localhost:8080`来查看默认的Apache页面。
- en: Configuring multimachine clusters with Vagrant
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Vagrant配置多机集群
- en: In order to model a virtualized Storm cluster with Vagrant, we need a way to
    configure multiple machines within a single Vagrant project. Fortunately, Vagrant
    supports multiple machines with a syntax that makes it easy to convert our existing
    single-machine project into a multimachine configuration.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用Vagrant模拟虚拟化的Storm集群，我们需要一种方法来在单个Vagrant项目中配置多台机器。幸运的是，Vagrant支持多台机器的语法，这使得将现有的单机项目转换为多机配置变得容易。
- en: 'For our multimachine setup, we''ll define two virtual machines named `www1`
    and `www2`. To avoid port conflicts on the host machine, we''ll forward the host
    port 8080 to port 80 on `www1` and the host port 7070 to port 80 on `www2`, as
    shown in the following code snippet:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的多机设置，我们将定义两台名为`www1`和`www2`的虚拟机。为了避免主机机器上的端口冲突，我们将主机端口8080转发到`www1`上的端口80，将主机端口7070转发到`www2`上的端口80，如下面的代码片段所示：
- en: '[PRE39]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'With a multimachine setup, running `vagrant up` without arguments will bring
    up every machine defined in the `Vagrantfile`. This behavior applies to Vagrant''s
    other management commands as well. To control an individual machine, add that
    machine''s name to the command. For example, if we want to launch just the `www1`
    machine, we would use the following command:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 使用多机设置，运行`vagrant up`而不带参数将启动`Vagrantfile`中定义的每台机器。这种行为也适用于Vagrant的其他管理命令。要控制单个机器，将该机器的名称添加到命令中。例如，如果我们只想启动`www1`机器，我们将使用以下命令：
- en: '[PRE40]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Likewise, to destroy virtual machine, we would use the following command:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，要销毁虚拟机，我们将使用以下命令：
- en: '[PRE41]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Creating Storm-provisioning scripts
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Storm配置脚本
- en: In [Chapter 2](ch02.html "Chapter 2. Configuring Storm Clusters"), *Configuring
    Storm Clusters*, we covered the manual installation of Storm and its dependencies
    on Ubuntu Linux. We can leverage the commands we used in [Chapter 2](ch02.html
    "Chapter 2. Configuring Storm Clusters"), *Configuring Storm Clusters*, by using
    them to create Vagrant provisioning scripts to automate what would otherwise be
    a manual process. If you don't understand some of the commands used in the provisioning
    scripts, refer to [Chapter 2](ch02.html "Chapter 2. Configuring Storm Clusters"),
    *Configuring Storm Clusters*, for a more in-depth explanation.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](ch02.html "第2章。配置风暴集群")*配置风暴集群*中，我们介绍了在Ubuntu Linux上手动安装Storm及其依赖项。我们可以利用我们在[第2章](ch02.html
    "第2章。配置风暴集群")*配置风暴集群*中使用的命令，将它们用于创建Vagrant配置脚本，以自动化本来需要手动进行的过程。如果您不理解配置脚本中使用的某些命令，请参考[第2章](ch02.html
    "第2章。配置风暴集群")*配置风暴集群*，以获得更深入的解释。
- en: ZooKeeper
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ZooKeeper
- en: 'ZooKeeper is available pre-packaged for most Linux platforms, which makes our
    installation script simple, letting the package manager do most of the work. The
    following is the command line to install ZooKeeper:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: ZooKeeper已经预打包在大多数Linux平台上，这使得我们的安装脚本变得简单，让软件包管理器完成大部分工作。以下是安装ZooKeeper的命令行：
- en: '[PRE42]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'And the commands to install ZooKeeper are as follows:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 安装ZooKeeper的命令如下：
- en: '[PRE43]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Storm
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 风暴
- en: 'The Storm installation script is a little more complicated since it is not
    pre-packaged and must be installed manually. We''ll take the commands we used
    in [Chapter 2](ch02.html "Chapter 2. Configuring Storm Clusters"), *Configuring
    Storm Clusters*, assemble them into a script, and parameterize them to the script
    so it expects a Storm version string as an argument. This will allow us to easily
    switch between different Storm versions without having to modify the installation
    script as shown in the following code snippet:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: Storm安装脚本稍微复杂，因为它没有预打包，必须手动安装。我们将采用[第2章](ch02.html "第2章。配置Storm集群")中使用的命令，*配置Storm集群*，将它们组装成一个脚本，并将它们参数化，以便脚本期望一个Storm版本字符串作为参数。这将允许我们在不修改安装脚本的情况下轻松切换不同的Storm版本，如下面的代码片段所示：
- en: '[PRE44]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: The `install-storm.sh` script leverages the existence of the Vagrant shared
    directory (`/vagrant`). This allows us to keep the `storm.yaml` and `logback.xml`
    files in a convenient location right next to the `Vagrantfile`.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '`install-storm.sh`脚本利用了Vagrant共享目录(`/vagrant`)的存在。这使我们可以将`storm.yaml`和`logback.xml`文件放在`Vagrantfile`旁边的一个便利位置。'
- en: 'In the `storm.yaml` file, we will use hostnames instead of IP addresses and
    let Vagrant configure the name resolution as shown in the following code snippet:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在`storm.yaml`文件中，我们将使用主机名而不是IP地址，并让Vagrant配置名称解析，如下面的代码片段所示：
- en: '[PRE46]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Supervisord
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Supervisord
- en: 'The supervisord service is installed by the `install-storm.sh` script, but
    we still need to configure it to manage the Storm daemons. Instead of creating
    separate configuration files for each service, we''ll write a script that generates
    the supervisord configuration with a service name as a parameter, as shown in
    the following code snippet:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '`install-storm.sh`脚本安装了supervisord服务，但我们仍然需要配置它来管理Storm守护程序。我们将编写一个脚本，用一个服务名称作为参数生成supervisord配置，而不是为每个服务创建单独的配置文件，如下面的代码片段所示：'
- en: '[PRE48]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'The `configure-supervisord.sh` script expects a single argument representing
    the name of the Storm service to manage. For example, to generate a supervisord
    configuration for the Nimbus daemon, you would invoke the script using the following
    command:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '`configure-supervisord.sh`脚本期望一个表示要管理的Storm服务的参数。例如，要为Nimbus守护程序生成supervisord配置，您可以使用以下命令调用脚本：'
- en: '[PRE50]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: The Storm Vagrantfile
  id: totrans-206
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Storm Vagrantfile
- en: For our Storm cluster, we will create a cluster with one ZooKeeper node, one
    Nimbus node, and one or more Supervisor nodes. Because the `Vagrantfile` is written
    in Ruby, we have access to many of Ruby's language features, which will allow
    us to make the configuration file more robust. We will, for example, make the
    number of Supervisor nodes easily configurable.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的Storm集群，我们将创建一个具有一个ZooKeeper节点、一个Nimbus节点和一个或多个Supervisor节点的集群。由于`Vagrantfile`是用Ruby编写的，我们可以访问许多Ruby语言特性，这将允许我们使配置文件更加健壮。例如，我们将使Supervisor节点的数量易于配置。
- en: 'In the `storm.yaml` file, we used hostnames rather than IP addresses, which
    means our machines must be able to resolve names to IP addresses. Vagrant does
    not come with a facility for managing entries in the `/etc/hosts` file, but fortunately,
    there is a Vagrant plugin that does. Before we delve into the `Vagrantfile` for
    the Storm cluster, install the `vagrant-hostmanager` plugin ([https://github.com/smdahlen/vagrant-hostmanager](https://github.com/smdahlen/vagrant-hostmanager))
    using the following command:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在`storm.yaml`文件中，我们使用了主机名而不是IP地址，这意味着我们的机器必须能够将名称解析为IP地址。Vagrant没有管理`/etc/hosts`文件中条目的功能，但幸运的是，有一个Vagrant插件可以做到这一点。在深入研究Storm集群的`Vagrantfile`之前，使用以下命令安装`vagrant-hostmanager`插件([https://github.com/smdahlen/vagrant-hostmanager](https://github.com/smdahlen/vagrant-hostmanager))：
- en: '[PRE51]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: The `vagrant-hostmanager` plugin will set up hostname resolution for all the
    machines in our cluster. It also has an option to add the name resolution between
    the host machine and virtual machines.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '`vagrant-hostmanager`插件将为我们集群中的所有机器设置主机名解析。它还有一个选项，可以在主机和虚拟机之间添加名称解析。'
- en: 'Next, let''s look at the complete `Vagrantfile` and walk through it line by
    line:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看一下完整的`Vagrantfile`，并逐行讲解它：
- en: '[PRE52]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: The first line of the file tells the Ruby interpreter to require the `uri` module,
    which we will use for URL parsing.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 文件的第一行告诉Ruby解释器要求`uri`模块，我们将用它来进行URL解析。
- en: Next, we set up some variables representing the URL of the Storm distribution
    archive, the number of Supervisor nodes we want, and the name of the Vagrant box
    type for our virtual machines. These variables are intended to be changed by the
    user.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们设置一些变量，表示Storm分发存档的URL、我们想要的Supervisor节点数量，以及我们虚拟机的Vagrant盒子类型的名称。这些变量预期由用户更改。
- en: The `STORM_ARCHIVE` and `STORM_VERSION` values are set to the filename and version
    name of the Storm distribution by parsing the distribution URL using Ruby's `File`
    and `URI` classes. These values will be passed as arguments to the provisioning
    scripts.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用Ruby的`File`和`URI`类解析分发URL，将`STORM_ARCHIVE`和`STORM_VERSION`的值设置为Storm分发的文件名和版本名称。这些值将作为参数传递给配置脚本。
- en: 'Next, we enter the main Vagrant configuration section. We begin by configuring
    the `vagrant-hostmanager` plugin as follows:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们进入主要的Vagrant配置部分。我们首先配置`vagrant-hostmanager`插件如下：
- en: '[PRE53]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Here, we are telling the `vagrant-hostmanager` plugin to manage the hostname
    resolution between the host machine and virtual machines and that it should manage
    the `/etc/hosts` files on the virtual machines as well.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们告诉`vagrant-hostmanager`插件管理主机和虚拟机之间的主机名解析，并且它也应该管理虚拟机上的`/etc/hosts`文件。
- en: 'The next block checks to see whether the Storm distribution archive has already
    been downloaded; if not, it uses the `wget` command to download it as shown in
    the following code snippet:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的块检查Storm分发存档是否已经被下载；如果没有，它将使用`wget`命令进行下载，如下面的代码片段所示：
- en: '[PRE54]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: The preceding code will download the Storm archive to the same directory as
    the `Vagrantfile`, thus making it accessible to the provisioning scripts in the
    `/vagrant` shared directory.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将把Storm存档下载到与`Vagrantfile`相同的目录中，因此可以被`/vagrant`共享目录中的配置脚本访问。
- en: 'The next two code blocks configure ZooKeeper and Nimbus and are relatively
    straightforward. They contain two new directives we have not seen before:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的两个代码块配置了ZooKeeper和Nimbus，相对简单。它们包含了我们之前没有见过的两个新指令：
- en: '[PRE55]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: The `zookeeper.vm.network` directive signals Vagrant to assign a specific IP
    address to the virtual machine using the VirtualBox host-only network adapter.
    The next line tells Vagrant to set the hostname on the virtual machine to a specific
    value. Finally, we invoke the provisioning scripts appropriate for each node.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '`zookeeper.vm.network`指令告诉Vagrant使用VirtualBox主机网络适配器为虚拟机分配特定的IP地址。接下来的一行告诉Vagrant将虚拟机的主机名设置为特定值。最后，我们调用适用于每个节点的配置脚本。'
- en: The final block configures the Supervisor node(s). The Ruby code creates a loop
    iterating from `1` to the value of `STORM_SUPERVISOR_COUNT` and allows you to
    set the number of Supervisor nodes in the cluster. It will dynamically set the
    virtual machine name, hostname, and IP address based on the number of Supervisor
    nodes specified by the `STORM_SUPERVISOR_COUNT` variable.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个代码块配置了监督节点。Ruby代码创建了一个循环，从`1`到`STORM_SUPERVISOR_COUNT`的值进行迭代，并允许您设置集群中监督节点的数量。它将根据`STORM_SUPERVISOR_COUNT`变量指定的监督节点数量动态设置虚拟机名称、主机名和IP地址。
- en: Launching the Storm cluster
  id: totrans-226
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启动Storm集群
- en: With our cluster defined in the `Vagrantfile` and our provisioning scripts in
    place, we're ready to launch the Vagrant cluster with `vagrant up`. With four
    machines and a considerable amount of software to install on each, this will take
    a while.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Vagrantfile`中定义了我们的集群，并且我们的配置脚本已经就位，我们准备使用`vagrant up`启动Vagrant集群。由于有四台机器，每台上需要安装大量软件，这将需要一些时间。
- en: 'Once Vagrant has finished launching the cluster, you should be able to view
    the Storm UI from the host machine at `http://nimbus:8080`. To submit a topology
    to the cluster, you can do so with the following command:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦Vagrant完成启动集群，您应该能够从主机机器上查看Storm UI，网址为`http://nimbus:8080`。要向集群提交拓扑，可以使用以下命令：
- en: '[PRE56]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Summary
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we've just scratched the surface of deploying Storm in a cloud
    environment but hopefully introduced you to the many possibilities available,
    from deploying it to a hosted cloud environment such as Amazon EC2 to deploying
    it to a local cloud provider on your workstation or even an in-house hypervisor
    server.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们只是初步介绍了在云环境中部署Storm的方法，但希望为您介绍了许多可能性，从将其部署到托管的云环境（如Amazon EC2）到将其部署到您的工作站上的本地云提供商，甚至是内部的虚拟化服务器。
- en: We encourage you to explore both cloud hosting providers such as AWS as well
    as virtualization options such as Vagrant in more depth to better equip your Storm
    deployment options. Between the manual installation procedures introduced in [Chapter
    2](ch02.html "Chapter 2. Configuring Storm Clusters"), *Configuring Storm Clusters*,
    and the technology introduced in this chapter, you should be well equipped to
    find the development, test, and deployment solution that best fits your needs.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 我们鼓励您更深入地探索云托管提供商（如AWS）以及虚拟化选项（如Vagrant），以更好地为您的Storm部署选择做准备。在[第2章](ch02.html
    "第2章。配置Storm集群")介绍的手动安装程序和本章介绍的技术之间，您应该已经具备了找到最适合您需求的开发、测试和部署解决方案的能力。
