- en: Chapter 6. Petrel in Practice
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。Petrel实践
- en: 'In previous chapters, we saw working examples of Storm topologies, both simple
    and complex. In doing so, however, we skipped some of the tools and techniques
    that you''ll need while developing your own topologies:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们看到了Storm拓扑的工作示例，既简单又复杂。然而，在这样做的过程中，我们跳过了您在开发自己的拓扑时需要的一些工具和技术：
- en: Storm is a great environment for running your code, but deploying to Storm (even
    on your local machine) adds complexity and takes extra time. We'll see how to
    test your spouts and bolts outside of Storm.
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Storm是一个很好的运行代码的环境，但是部署到Storm（即使在本地机器上）会增加复杂性并需要额外的时间。我们将看到如何在Storm之外测试您的spouts和bolts。
- en: When components run inside Storm, they can't read from the console, which prevents
    the use of pdb, the standard Python debugger. This chapter demonstrates Winpdb,
    an interactive debugging tool suitable for debugging components inside Storm.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当组件在Storm中运行时，它们无法从控制台读取，这阻止了使用pdb，标准Python调试器。本章演示了Winpdb，这是一个适用于在Storm中调试组件的交互式调试工具。
- en: Storm lets you easily harness the power of many servers, but performance of
    your code still matters. In this chapter, we'll see some ways of measuring the
    performance of our topology's components.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Storm让您轻松利用许多服务器的功能，但您的代码性能仍然很重要。在本章中，我们将看到一些测量拓扑组件性能的方法。
- en: Testing a bolt
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试一个bolt
- en: 'Storm makes it easy to deploy and run Python topologies, but developing and
    testing them in Storm is challenging, whether running in standalone Storm or a
    full Storm deployment:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Storm使得部署和运行Python拓扑变得容易，但在Storm中开发和测试它们是具有挑战性的，无论是在独立的Storm中运行还是在完整的Storm部署中运行：
- en: Storm launches programs on your behalf—not only your Python code but auxiliary
    Java processes as well
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Storm代表您启动程序 - 不仅是您的Python代码，还有辅助的Java进程
- en: It controls the Python components' standard input and output channels
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它控制Python组件的标准输入和输出通道
- en: The Python programs must respond regularly to heartbeat messages or be shut
    down by Storm
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python程序必须定期响应心跳消息，否则将被Storm关闭
- en: This makes it difficult to debug Storm topologies using the typical tools and
    techniques used for other pieces of Python code, such as the common technique
    of running from the command line and debugging with pdb.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得使用通常用于其他Python代码片段的典型工具和技术来调试Storm拓扑变得困难，例如通过命令行运行并使用pdb进行调试的常见技术。
- en: Petrel's mock module helps us with this. It provides a simple, standalone Python
    container for testing simple topologies and verifying that the expected results
    are returned.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Petrel的模拟模块帮助我们做到这一点。它提供了一个简单的、独立的Python容器，用于测试简单的拓扑，并验证返回了预期的结果。
- en: In Petrel terms, a **simple** topology is one that only outputs to the default
    stream and has no branches or loops. The `run_simple_topology()` assumes that
    the first component in the list is a spout, passing the output of each component
    to the next component in the sequence.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在Petrel术语中，**简单**拓扑是只输出到默认流并且没有分支或循环的拓扑。`run_simple_topology()`假设列表中的第一个组件是spout，将每个组件的输出传递给序列中的下一个组件。
- en: Example – testing SplitSentenceBolt
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 - 测试SplitSentenceBolt
- en: 'Let''s look at an example. Here is the `splitsentence.py` file from the first
    example in [Chapter 3](ch03.html "Chapter 3. Introducing Petrel"), *Introducing
    Petrel* with a unit test added:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个例子。这是[第3章](ch03.html "第3章。介绍Petrel")中第一个示例中的`splitsentence.py`文件，*介绍Petrel*中添加了一个单元测试：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To run the test, enter the following commands:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行测试，请输入以下命令：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'First, install the Python `nosetests` library by running the following:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，通过运行以下命令安装Python `nosetests`库：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Next, run this line:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，运行这行：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If all goes well, you''ll see the following output:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，您将看到以下输出：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Nose is a very powerful tool with many features. We won't cover it in detail
    here, but you can find the documentation at [https://nose.readthedocs.org/en/latest/](https://nose.readthedocs.org/en/latest/).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Nose是一个非常强大的工具，具有许多功能。我们不会在这里详细介绍它，但您可以在[https://nose.readthedocs.org/en/latest/](https://nose.readthedocs.org/en/latest/)找到文档。
- en: Example – testing SplitSentenceBolt with WordCountBolt
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 - 测试SplitSentenceBolt与WordCountBolt
- en: 'The next example shows how to test a sequence of related components. In the
    following code, we see a new version of `wordcount.py` that tests the interaction
    between `SplitSentenceBolt` and `WordCountBolt`:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个示例展示了如何测试一系列相关组件。在下面的代码中，我们看到了一个新版本的`wordcount.py`，它测试了`SplitSentenceBolt`和`WordCountBolt`之间的交互：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The test is pretty straightforward; we simply instantiate both components and
    include them in the right sequence when calling `mock.run_simple_topology()`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 测试非常简单；我们只需实例化两个组件，并在调用`mock.run_simple_topology()`时以正确的顺序包含它们。
- en: Note
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Both example tests specify `result_type=mock.LIST` while calling `run_simple_topology()`.
    This parameter option tells Petrel which format to use when returning output tuples.
    The options include:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 两个示例测试在调用`run_simple_topology()`时都指定了`result_type=mock.LIST`。此参数选项告诉Petrel在返回输出元组时使用哪种格式。选项包括：
- en: '`STORM_TUPLE`'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`STORM_TUPLE`'
- en: '`LIST`'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`LIST`'
- en: '`TUPLE`'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`TUPLE`'
- en: '`NAMEDTUPLE`'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`NAMEDTUPLE`'
- en: Generally, `LIST` is a good choice for components with a small number of output
    fields, while `NAMEDTUPLE` is more readable for a larger number of fields (that
    is, by allowing the test to access result fields by field name rather than numeric
    indices). `STORM_TUPLE` is useful if the test needs to check other attributes
    of the result, for example, the lesser-used stream property.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，`LIST`是组件具有少量输出字段的良好选择，而`NAMEDTUPLE`对于较多字段更可读（即允许测试通过字段名称而不是数字索引访问结果字段）。如果测试需要检查结果的其他属性，例如较少使用的流属性，则`STORM_TUPLE`是有用的。
- en: Debugging
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试
- en: 'Until now, we''ve debugged topologies using log messages and automated tests.
    These techniques are very powerful, but sometimes it may be necessary to debug
    directly inside the Storm environment. For example, the problem may:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们使用日志消息和自动化测试来调试拓扑。这些技术非常强大，但有时可能需要直接在Storm环境中进行调试。例如，问题可能是：
- en: Depend on running as a particular user
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依赖于作为特定用户运行
- en: Occur only with real data
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅在有真实数据时发生
- en: Occur only when there are many instances of the component running in parallel
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅当有许多组件实例并行运行时才会发生。
- en: This section introduces a tool for debugging inside Storm.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 本节介绍了Storm内部调试工具。
- en: 'Winpdb is a portable, GUI-based debugger for Python, with support for embedded
    debugging. If you''re not familiar with the term "embedded debugging", note this:
    it simply means that Winpdb can attach to a program that was launched in some
    other way and not necessarily from WinDbg or your command shell. For this reason,
    it is a good fit for debugging Petrel components that run in Storm.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Winpdb是一个便携式的基于GUI的Python调试器，支持嵌入式调试。如果您不熟悉术语“嵌入式调试”，请注意：这意味着Winpdb可以附加到以其他方式启动的程序，而不一定是从WinDbg或命令shell启动的。因此，它非常适合调试在Storm中运行的Petrel组件。
- en: Installing Winpdb
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Winpdb
- en: 'Activate your Petrel virtual environment and then use `pip` to install it:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 激活您的Petrel虚拟环境，然后使用`pip`进行安装：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Add Winpdb breakpoint
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加Winpdb断点
- en: 'In the `splitsentence.py` file, add the following at the beginning of the `run()`
    function:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在`splitsentence.py`文件中，在`run()`函数的开头添加以下内容：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `'password'` value can be anything; this is simply the password that you
    will use in the next step to attach to `splitsentence.py`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`''password''`的值可以是任何值；这只是您在下一步中将用于附加到`splitsentence.py`的密码。'
- en: When this line of code executes, the script will freeze for a default period
    of 5 minutes, waiting for a debugger to attach.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当此行代码执行时，脚本将冻结默认等待5分钟，等待调试器附加。
- en: Launching and attaching the debugger
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动和附加调试器
- en: 'Now run the topology:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行拓扑：
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Once you see log messages from the spout, you will know that the topology is
    up and running, so you can connect with the debugger.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您看到来自分流器的日志消息，您将知道拓扑已经启动运行，因此可以连接调试器。
- en: Launch `Winpdb` simply by running `winpdb`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行`winpdb`来启动`Winpdb`。
- en: For more details on how to use Winpdb for embedded debugging, see the documentation
    at [http://winpdb.org/docs/embedded-debugging/](http://winpdb.org/docs/embedded-debugging/).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 有关如何在嵌入式调试中使用Winpdb的更多详细信息，请参阅[http://winpdb.org/docs/embedded-debugging/](http://winpdb.org/docs/embedded-debugging/)中的文档。
- en: 'When the window appears, select **File** | **Attach** from the menu. A password
    dialog will appear. Here, enter the same password that you passed to `start_embedded_debugger()`
    and click on the **OK** button, as shown in this screenshot:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当窗口出现时，从菜单中选择**文件** | **附加**。将出现密码对话框。在这里，输入与`start_embedded_debugger()`传递的相同密码，然后单击**OK**按钮，如此屏幕截图所示：
- en: '![Launching and attaching the debugger](img/B03471_06_01.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![启动和附加调试器](img/B03471_06_01.jpg)'
- en: 'Next, choose the process to attach to and click on **OK**, as shown in the
    following screenshot:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，选择要附加的进程，然后单击**OK**，如下面的屏幕截图所示：
- en: '![Launching and attaching the debugger](img/B03471_06_02.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![启动和附加调试器](img/B03471_06_02.jpg)'
- en: 'Now you''ll see the main Winpdb window, with the line below the breakpoint
    highlighted. If you''ve used other debuggers, Winpdb should be straightforward
    to use. If you need help using Winpdb, the following tutorial is very good for
    you:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您将看到主Winpdb窗口，断点下面的行会被突出显示。如果您使用过其他调试器，Winpdb应该很容易使用。如果您需要帮助使用Winpdb，以下教程对您非常有帮助：
- en: '[https://code.google.com/p/winpdb/wiki/DebuggingTutorial](https://code.google.com/p/winpdb/wiki/DebuggingTutorial).'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://code.google.com/p/winpdb/wiki/DebuggingTutorial](https://code.google.com/p/winpdb/wiki/DebuggingTutorial)。'
- en: '![Launching and attaching the debugger](img/B03471_06_03.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![启动和附加调试器](img/B03471_06_03.jpg)'
- en: Profiling your topology's performance
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对拓扑性能进行分析
- en: Performance can be a concern for any application. This is true for Storm topologies
    as well, perhaps more so.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 性能可能是任何应用程序的问题。这对Storm拓扑同样适用，甚至更多。
- en: When you're trying to push a lot of data through a topology, raw performance
    is certainly a concern—faster components means that more data can be processed.
    But it's also important to understand the tuple processing performance of individual
    components. This information can be used in two ways.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 当您尝试通过拓扑推送大量数据时，原始性能当然是一个问题——更快的组件意味着可以处理更多数据。但了解各个组件的元组处理性能也很重要。这些信息可以用两种方式。
- en: The first is knowing which components are slower, because this tells you where
    to focus your attention if you are trying to make the code faster. Once you know
    which component (or components) is slow, you can use tools such as the Python
    cProfile module ([http://pymotw.com/2/profile/](http://pymotw.com/2/profile/))
    and the line profiler ([https://github.com/rkern/line_profiler](https://github.com/rkern/line_profiler))
    to understand where the code is spending most of its time.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要知道哪些组件速度较慢，因为这可以告诉您在尝试加快代码速度时要关注的地方。一旦知道哪个组件（或哪些组件）速度慢，就可以使用诸如Python cProfile模块（[http://pymotw.com/2/profile/](http://pymotw.com/2/profile/)）和行分析器（[https://github.com/rkern/line_profiler](https://github.com/rkern/line_profiler)）等工具来了解代码大部分时间花在哪里。
- en: Even after profiling, some components will still be faster than others. In this
    case, understanding the relative performance between components can help you configure
    the topology for best performance.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 即使进行了分析，某些组件仍然比其他组件快。在这种情况下，了解组件之间的相对性能可以帮助您配置拓扑以获得最佳性能。
- en: 'This second point is somewhat subtle, so let''s look at an example. In the
    following code, we see log excerpts for two Storm components from the word count
    topology. These log messages are generated automatically by Petrel. The first
    is the split sentence bolt, and the second is the word count bolt:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 第二点有些微妙，让我们看一个例子。在以下代码中，我们看到了来自单词计数拓扑的两个Storm组件的日志摘录。这些日志消息是Petrel自动生成的。第一个是分割句子的分流器，第二个是单词计数的分流器：
- en: '[PRE9]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Split sentence bolt log
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分割句子的日志
- en: 'The following is the split sentence bolt log:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是分割句子的日志：
- en: '[PRE10]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Word count bolt log
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单词计数的日志
- en: These logs demonstrate that the split sentence bolt spends 0.010338 seconds
    processing and acknowledging each tuple (0.010317 + 0.000021), while the word
    count bolt spends 0.000069 seconds (0.000049 + 0.000020) per tuple. The split
    sentence bolt is slower, which suggests that you may want more instances of the
    split sentence bolt than the word count bolt.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这些日志表明，分割句子bolt花费0.010338秒处理和确认每个元组（0.010317 + 0.000021），而单词计数bolt每个元组花费0.000069秒（0.000049
    + 0.000020）。分割句子bolt较慢，这表明您可能需要更多的分割句子bolt实例而不是单词计数bolt。
- en: Note
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Why wasn't the read time considered in the preceding calculation? Read time
    includes the CPU time taken to read tuples from Storm, but it also includes time
    spent waiting (that is, sleeping) for the tuples to arrive. If the upstream component
    is providing data slowly, we don't want to count that time against our component.
    So for simplicity, we omitted the read time from the calculation.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么在前面的计算中没有考虑读取时间？读取时间包括从Storm读取元组所花费的CPU时间，但它还包括等待时间（即睡眠），等待元组到达的时间。如果上游组件提供数据缓慢，我们不希望将那段时间计入我们的组件。因此，为简单起见，我们在计算中省略了读取时间。
- en: 'Of course, the per-tuple performance is only part of the picture. You must
    also consider the sheer number of tuples to be processed. During the 4 seconds
    covered by the preceding logs, the split sentence bolt received 97 tuples (sentences),
    while the word count bolt received 622 tuples (words). Now we''ll apply these
    numbers to the per-tuple processing times:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，每个元组的性能只是问题的一部分。您还必须考虑要处理的元组的数量。在前面的日志所涵盖的4秒内，分割句子bolt接收了97个元组（句子），而单词计数bolt接收了622个元组（单词）。现在我们将这些数字应用到每个元组的处理时间中：
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The total time used by the split sentence bolt is much larger (roughly 23 times
    greater), and we should take this into account while configuring the parallelism
    of the topology. For example, we might configure `topology.yaml` as follows:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 分割句子bolt使用的总时间要大得多（大约是23倍），在配置拓扑的并行性时，我们应该考虑到这一点。例如，我们可以将`topology.yaml`配置如下：
- en: '[PRE12]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: By configuring the topology in this way, we help ensure that at high traffic
    rates, there are enough split sentence bolts to avoid becoming a bottleneck, keeping
    the word count bolts busy all the time.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 通过以这种方式配置拓扑，我们帮助确保在高流量率下，有足够的分割句子的bolt来避免成为瓶颈，使单词计数的bolt始终保持繁忙状态。
- en: Note
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The logs from the preceding section used a version of the split sentence bolt
    that was deliberately modified to run slower and make the example clearer.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 前一节的日志使用了一个特意修改过的分割句子的版本，以便运行得更慢，使示例更清晰。
- en: Summary
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned some skills that will help make you more productive
    building your own topologies. As you develop spouts or bolts, you can test them
    individually before assembling them into a complete topology and deploying on
    Storm. If you encounter a tricky problem that occurs only while running in Storm,
    you can use Winpdb in addition to (or instead of) log messages. When your code
    is working, you can get insights into which components take most of the time,
    so you can focus on improving performance in those areas. With these skills, you
    are now ready to go out and build your own topologies. Good luck!
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学会了一些技能，这些技能将帮助您更有效地构建自己的拓扑。在开发spouts或bolts时，您可以在将它们组装成完整的拓扑并部署到Storm之前对它们进行单独测试。如果在Storm中运行时遇到棘手的问题，您可以使用Winpdb，除了（或者替代）日志消息。当您的代码工作时，您可以了解哪些组件占用了大部分时间，这样您就可以专注于改进这些领域的性能。有了这些技能，您现在可以出去构建自己的拓扑了。祝你好运！
- en: Appendix A. Managing Storm Using Supervisord
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录A. 使用supervisord管理Storm
- en: 'This appendix gives you an overview of the following topics:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 本附录为您概述以下主题：
- en: Storm administration over a cluster
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在集群上进行Storm管理
- en: Introducing supervisord
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍supervisord
- en: Components of supervisord
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: supervisord的组件
- en: Supervisord installation and configuration
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: supervisord的安装和配置
- en: Storm administration over a cluster
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在集群上进行Storm管理
- en: There are many tools available that can create multiple virtual machines, install
    predefined software and even manage the state of that software.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多可用的工具可以创建多个虚拟机，安装预定义的软件，甚至管理该软件的状态。
- en: Introducing supervisord
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍supervisord
- en: Supervisord is a process control system. It is a client-server system that allows
    its users to monitor and control a number of processes on Unix-like operating
    systems. For details, visit [http://supervisord.org/](http://supervisord.org/).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: Supervisord是一个进程控制系统。它是一个客户端-服务器系统，允许用户在类Unix操作系统上监视和控制多个进程。详情请访问[http://supervisord.org/](http://supervisord.org/)。
- en: Supervisord components
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: supervisord组件
- en: 'The server piece of the supervisor is known as supervisord. It is responsible
    for starting child programs upon its own invocation, responding to commands from
    clients, restarting crashed or exited subprocesses, logging its subprocess `stdout`
    and `stderr` output, and generating and handling "events" corresponding to points
    in subprocess lifetimes. The server process uses a configuration file. This is
    typically located in `/etc/supervisord.conf`. This configuration file is a Windows-INI
    style `config` file. It is important to keep this file secure via proper filesystem
    permissions because it might contain decrypted usernames and passwords:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: supervisor的服务器部分被称为supervisord。它负责在自己被调用时启动子程序，响应来自客户端的命令，重新启动崩溃或退出的子进程，记录其子进程的stdout和stderr输出，并生成和处理与子进程生命周期中的事件相对应的“事件”。服务器进程使用一个配置文件。这通常位于`/etc/supervisord.conf`。这个配置文件是一个Windows-INI风格的`config`文件。通过适当的文件系统权限保护这个文件是很重要的，因为它可能包含解密后的用户名和密码：
- en: '**supervisorctl**: The command-line client piece of the supervisor is known
    as supervisorctl. It provides a shell-like interface for the features provided
    by supervisord. From supervisorctl, a user can connect to different supervisord
    processes. They can get the status on the subprocesses controlled by, stop and
    start subprocesses of, and get lists of running processes of a supervisord. The
    command-line client talks to the server across a Unix domain socket or an Internet
    (TCP) socket. The server can assert that the user of a client should present authentication
    credentials before it allows them to use commands. The client process typically
    uses the same configuration file as the server, but any configuration file with
    a `[supervisorctl]` section in it will work.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**supervisorctl**：supervisor的命令行客户端部分称为supervisorctl。它为supervisord提供了类似shell的界面。从supervisorctl，用户可以连接到不同的supervisord进程。他们可以获取由其控制的子进程的状态，停止和启动supervisord的子进程，并获取运行中进程的列表。命令行客户端通过Unix域套接字或Internet（TCP）套接字与服务器通信。服务器可以断言客户端的用户在允许他们使用命令之前应该提供身份验证凭据。客户端进程通常使用与服务器相同的配置文件，但任何具有`[supervisorctl]`部分的配置文件都可以工作。'
- en: '**Web server**: A (sparse) web user interface with functionality comparable
    to supervisorctl may be accessed via a browser if you start supervisord against
    an Internet socket. Visit the server URL (for example, `http://localhost:9001/`)
    to view and control the process status through the web interface after activating
    the configuration file''s `[inet_http_server]` section.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Web服务器**：如果您针对Internet套接字启动supervisord，则可以通过浏览器访问（稀疏）具有与supervisorctl功能相当的Web用户界面。激活配置文件的`[inet_http_server]`部分后，访问服务器URL（例如`http://localhost:9001/`）以通过Web界面查看和控制进程状态。'
- en: '**XML-RPC interface**: The same HTTP server that serves the web UI serves up
    an XML-RPC interface that can be used to interrogate and control the supervisor
    and the programs it runs. See *XML-RPC API Documentation*.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**XML-RPC接口**：提供Web UI的HTTP服务器还提供了一个XML-RPC接口，可用于查询和控制supervisor和其运行的程序。参见*XML-RPC
    API文档*。'
- en: '**Machines**: Let''s assume that we have two EC2 machines of IP addresses `172-31-19-62`
    and `172.31.36.23`. We will install supervisord on both machines and later configure
    to decide what services of Storm would be running on each machine.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**机器**：假设我们有两台IP地址为`172-31-19-62`和`172.31.36.23`的EC2机器。我们将在两台机器上安装supervisord，然后配置以决定每台机器上将运行哪些Storm服务。'
- en: '**Storm and Zookeeper setup**: Let''s run Zookeeper, Nimbus, supervisor, and
    the UI on machine `172.31.36.23` and only the supervisor on `172-31-19-62`.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Storm和Zookeeper设置**：让我们在`172.31.36.23`机器上运行Zookeeper、Nimbus、supervisor和UI，而在`172-31-19-62`上只运行supervisor。'
- en: '**Zookeeper** **version**: `zookeeper-3.4.6.tar.gz`.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Zookeeper** **版本**：`zookeeper-3.4.6.tar.gz`。'
- en: '**Storm** **version**: `apache-storm-0.9.5.tar.gz`.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Storm** **版本**：`apache-storm-0.9.5.tar.gz`。'
- en: 'Here is the process of the Zookeeper server setup and configuration:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Zookeeper服务器设置和配置的过程：
- en: 'Download Zookeeper''s latest version and extract it:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载Zookeeper的最新版本并解压缩：
- en: '[PRE13]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Configure `zoo.cfg` in the `conf` directory to start Zookeeper in cluster mode.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`conf`目录中配置`zoo.cfg`以在集群模式下启动Zookeeper。
- en: 'Zookeeper conf:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Zookeeper配置：
- en: '[PRE14]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Make sure that the directory specified in `dataDir` is created and the user
    has read and write permissions on it.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保在`dataDir`中指定的目录已创建，并且用户对其具有读写权限。
- en: 'Then, go to the Zookeeper `bin` directory and start the `zookeeper` server
    using the following command:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，转到Zookeeper `bin`目录并使用以下命令启动`zookeeper`服务器：
- en: '[PRE15]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Storm server setup and configuration:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: Storm服务器设置和配置：
- en: 'Download Storm''s latest version from the Apache Storm website and extract
    it:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Apache Storm网站下载Storm的最新版本并解压缩：
- en: '[PRE16]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Here is the configuration of the Storm Nimbus machine as well as the slave
    (added/changed configuration only):'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下是Storm Nimbus机器以及从机的配置（仅添加/更改的配置）：
- en: '[PRE17]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Supervisord installation
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Supervisord安装
- en: 'It is possible to install supervisord by the following two ways:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过以下两种方式安装supervisord：
- en: 'Installing on a system with Internet access:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在具有Internet访问权限的系统上安装：
- en: Download the Setup tool and use the `easy_install` method.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 下载Setup工具并使用`easy_install`方法。
- en: 'Installing on a system without Internet access:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在没有Internet访问权限的系统上安装：
- en: Download all dependencies, copy to each machine, and then install it.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 下载所有依赖项，复制到每台机器，然后安装。
- en: We will follow the second method of installation, the one in which Internet
    access is not required. We will download all dependencies and supervisord, and
    copy it to the servers.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将遵循第二种安装方法，即不需要Internet访问的方法。我们将下载所有依赖项和supervisord，并将其复制到服务器上。
- en: 'Supervisord `[supervisor-3.1.3.tar.gz]` requires the following dependencies
    to be installed:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: Supervisord `[supervisor-3.1.3.tar.gz]`需要安装以下依赖项：
- en: Python 2.7 or later
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 2.7或更高版本
- en: '`setuptools` (latest) from [http://pypi.python.org/pypi/setuptools](http://pypi.python.org/pypi/setuptools)'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从[http://pypi.python.org/pypi/setuptools](http://pypi.python.org/pypi/setuptools)下载`setuptools`（最新版本）
- en: '`elementtree` (latest) from [http://effbot.org/downloads#elementtree](http://effbot.org/downloads#elementtree).
    `elementtree-1.2-20040618.tar.gz`'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从[http://effbot.org/downloads#elementtree](http://effbot.org/downloads#elementtree)下载`elementtree`（最新版本）。`elementtree-1.2-20040618.tar.gz`
- en: '`meld3-0.6.5.tar.gz`'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`meld3-0.6.5.tar.gz`'
- en: Let's install supervisord and the necessary dependencies on both machines, `172.31.36.23`
    and `172-31-19-62`.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`172.31.36.23`和`172-31-19-62`两台机器上安装supervisord和必要的依赖项。
- en: 'The following are the steps for installing the dependencies:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是安装依赖项的步骤：
- en: '`setuptools`:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`setuptools`：'
- en: 'Unzip the `.zip` file using this command:'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用以下命令解压缩`.zip`文件：
- en: '[PRE18]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Go to the `setuptools-17.1.1` directory and run the installation command with
    `sudo`:'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转到`setuptools-17.1.1`目录并使用`sudo`运行安装命令：
- en: '[PRE19]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '![Supervisord installation](img/B03471_AppendixA_01.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![Supervisord安装](img/B03471_AppendixA_01.jpg)'
- en: '[PRE20]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '`meld3`:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`meld3`：'
- en: 'Extract the `.ts.gz` file using the following command:'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用以下命令解压缩`.ts.gz`文件：
- en: '[PRE21]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Go to the `meld3.-0.6.5` directory and run this command:'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转到`meld3.-0.6.5`目录并运行以下命令：
- en: '[PRE22]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '![Supervisord installation](img/B03471_AppendixA_02.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![Supervisord安装](img/B03471_AppendixA_02.jpg)'
- en: '`elementtree`:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`elementtree`：'
- en: 'Extract the `.ts.gz` file:'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解压缩`.ts.gz`文件：
- en: '[PRE23]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Go to `elementtree-1.2-20040618` and run the following command:'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转到`elementtree-1.2-20040618`并运行以下命令：
- en: '[PRE24]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '![Supervisord installation](img/B03471_AppendixA_03.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![Supervisord installation](img/B03471_AppendixA_03.jpg)'
- en: 'The following are the supervisord installations:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是supervisord安装：
- en: 'Extract `supervisor-3.1.3` using this command:'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用以下命令提取`supervisor-3.1.3`：
- en: '[PRE25]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Go to the `supervisor-3.1.3` directory and run the following command:'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转到`supervisor-3.1.3`目录并运行以下命令：
- en: '[PRE26]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '![Supervisord installation](img/B03471_AppendixA_04.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![Supervisord installation](img/B03471_AppendixA_04.jpg)'
- en: Note
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A similar setup of supervisord is required on another machine, that is, `172.31.36.23`.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 另一台机器上需要类似的supervisord设置，即`172.31.36.23`。
- en: Configuration of supervisord.conf
  id: totrans-161
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在`172-31-19-62`上的supervisord.conf配置
- en: 'Lets configure services on the `172.31.36.23` machine and assume that the supervisord
    installation is done as explained previously. Once supervisor is installed, you
    can build the `supervisord.conf` file to start the `supervisord` and `supervisorctl`
    commands:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`172.31.36.23`机器上配置服务，并假设supervisord安装已按先前说明完成。安装supervisor后，您可以构建`supervisord.conf`文件以启动`supervisord`和`supervisorctl`命令：
- en: Make the `supervisor.conf` file. Put it into the `/etc` directory.
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 制作`supervisor.conf`文件。将其放入`/etc`目录中。
- en: 'We can refer get sample `supervisord.conf` using the following command:'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以使用以下命令获取样本`supervisord.conf`：
- en: '[PRE27]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Take a look at the `supervisord.conf` file:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 查看`supervisord.conf`文件：
- en: '[PRE28]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Start the supervisor server first:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 首先启动监督服务器：
- en: '[PRE29]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Then, start all processes using `supervisorctl`:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用`supervisorctl`启动所有进程：
- en: '[PRE30]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '![Configuration of supervisord.conf](img/B03471_AppendixA_05.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![Configuration of supervisord.conf](img/B03471_AppendixA_05.jpg)'
- en: 'We can view the supervisord web UI and control processes on the browser. `52.11.193.108`
    is the public IP address of the `172-31-36-23` machine (`http://52.11.193.108:9001`):'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在浏览器上查看supervisord web UI并控制进程。`52.11.193.108`是`172-31-36-23`机器的公共IP地址（`http://52.11.193.108:9001`）：
- en: '![Configuration of supervisord.conf](img/B03471_AppendixA_06.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![Configuration of supervisord.conf](img/B03471_AppendixA_06.jpg)'
- en: Configuration of supervisord.conf on 172-31-19-62
  id: totrans-175
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在172-31-19-62上的supervisord.conf配置
- en: 'Keep only the following services in the configuration file:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置文件中只保留以下服务：
- en: '[PRE31]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: After that, you can start the supervisor server and all processes using `supervisorctl`
    on `172-31-19-62` machine.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，您可以在`172-31-19-62`机器上使用`supervisorctl`启动监督服务器和所有进程。
- en: Summary
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we saw how distributed Storm processes running over multiple
    machines can be managed using the supervisord process. There are many options
    available in supervisord, such as `autostart=true`. If we set this option for
    any Storm process, it also increases the reliability of the overall system and
    manages failure of Nimbus.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了如何使用supervisord进程管理分布式Storm进程在多台机器上运行。supervisord中有许多选项，例如`autostart=true`。如果我们为任何Storm进程设置此选项，还可以增加整个系统的可靠性并管理Nimbus的故障。
