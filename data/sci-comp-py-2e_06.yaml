- en: Plotting
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 绘图
- en: 'Plotting in Python can be done with the `pyplot` part of the module Matplotlib.
    With `matplotlib`, you can create high-quality figures and graphics and also plot
    and visualize your results. Matplotlib is open source and freely available software.
    The Matplotlib website also contains excellent documentation with examples, see
    [35](12bddbb5-edd0-46c6-8f7a-9475aaf01a9d.xhtml). In this section, we will show
    you how to use the most common features. The examples in the upcoming sections
    assume that you have imported the module as:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，绘图可以通过 `matplotlib` 模块的 `pyplot` 部分来完成。使用 `matplotlib`，你可以创建高质量的图形和图表，并可视化你的结果。Matplotlib
    是开源的、免费的软件。Matplotlib 网站还包含了优秀的文档和示例，详见 [35](12bddbb5-edd0-46c6-8f7a-9475aaf01a9d.xhtml)。在本节中，我们将展示如何使用最常见的功能。接下来的示例假设你已经导入了该模块：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In case you want to use the plotting commands in IPython, it is recommended
    that you run the *magic command* `%matplotlib` directly after starting the IPython
    shell. This prepares IPython for interactive plotting.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望在 IPython 中使用绘图命令，建议在启动 IPython shell 后立即运行 *magic command* ` %matplotlib`。这将为
    IPython 准备好交互式绘图功能。
- en: 6.1 Making plots with basic plotting commands
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.1 使用基本绘图命令绘制图形
- en: In this section, we will create plots by means of basic commands. It is the
    entry point for studying how to make graphical representations of mathematical
    objects and data using Python.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中，我们将通过基本命令创建图形。这是学习如何使用 Python 绘制数学对象和数据图形的入门点。
- en: 6.1.1 Using the plot command and some of its variants
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6.1.1 使用 `plot` 命令及其一些变体
- en: The standard plotting function is `plot`. Calling `plot(x,y)` creates a figure
    window with a plot of ![](img/0bebbcfd-cc30-44ee-a0a3-5e07f610d63b.png) as a function
    of ![](img/17e2c94a-5fd0-415b-a4e3-217aebb2fa23.png). The input arguments are
    arrays (or lists) of equal length. It is also possible to use `plot(y)`, in which
    case the values in ![](img/77346714-da93-4af9-97f6-a5ccf7e135d1.png) will be plotted
    against their index, that is, `plot(y)` is a short form of `plot(range(len(y)),y)`.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 标准的绘图函数是 `plot`。调用 `plot(x,y)` 会创建一个图形窗口，并绘制出 ![](img/0bebbcfd-cc30-44ee-a0a3-5e07f610d63b.png)
    作为 ![](img/17e2c94a-5fd0-415b-a4e3-217aebb2fa23.png) 的函数图像。输入参数是等长的数组（或列表）。也可以使用
    `plot(y)`，在这种情况下，![](img/77346714-da93-4af9-97f6-a5ccf7e135d1.png) 中的值将会根据其索引绘制，也就是说，`plot(y)`
    是 `plot(range(len(y)),y)` 的简写。
- en: 'Here is an example that shows how to plot ![](img/d15e859d-6238-4437-987e-6f989435ab76.png)
    using 200 sample points and with markers at every fourth point:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个示例，展示如何使用200个样本点和每隔四个点设置标记来绘制 ![](img/d15e859d-6238-4437-987e-6f989435ab76.png)：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The result is shown in the following figure (*Figure 6.1*):'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 结果显示在下图中（*图 6.1*）：
- en: '![](img/f8bca15b-e7cd-42d6-bc6b-1dc72d497cd7.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f8bca15b-e7cd-42d6-bc6b-1dc72d497cd7.png)'
- en: 'Figure 6.1: A plot of the function sin(x) with grid lines shown'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.1：绘制函数 sin(x) 的图像，并显示网格线
- en: As you can see, the standard plot is a solid blue curve. Each axis gets automatically
    scaled to fit the values, but can also be set manually. Color and plot options
    can be given after the first two input arguments. Here, `r*` indicates red star-shaped
    markers. Formatting is covered in more detail in the next section. The command `title` puts a
    title text string above the plot area.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，标准的绘图是一条实心的蓝色曲线。每个坐标轴都会自动缩放以适应数值，但也可以手动设置。颜色和绘图选项可以在前两个输入参数后提供。在这里，`r*`
    表示红色星形标记。格式设置将在下一节中详细讨论。命令 `title` 在绘图区域上方添加标题文本字符串。
- en: Calling `plot` multiple times will overlay the plots in the same window. To
    get a new clean figure window, use `figure()`. The command `figure` might contain
    an integer, for example, `figure(2)`, which can be used to switch between figure
    windows. If there is no figure window with that number, a new one is created,
    otherwise, the window is activated for plotting and all subsequent plotting commands
    apply to that window.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 多次调用 `plot` 命令将会在同一窗口中叠加图形。若要获得一个新的干净的图形窗口，可以使用 `figure()`。命令 `figure` 可能包含一个整数，例如，`figure(2)`，用于在图形窗口之间切换。如果没有该编号的图形窗口，将会创建一个新的窗口，否则该窗口将被激活进行绘制，所有后续的绘图命令都将应用于该窗口。
- en: 'Multiple plots can be explained by using the function `legend`, along with
    adding labels to each plot call. The following example fits polynomials to a set of
    points using the commands `polyfit` and `polyval`, and plots the result with a
    legend:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过使用 `legend` 函数并为每个绘图调用添加标签来解释多个图形。以下示例使用 `polyfit` 和 `polyval` 命令拟合多项式并绘制结果，同时添加图例：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here, you can also see how to manually set the range of the axis using `axis([xmin,xmax,ymin,ymax])`.
    The command `legend` takes optional arguments on placement and formatting; in
    this case, the legend is put in the upper-left corner and typeset with a small
    font size, as shown in the following figure (*Figure 6.2*):'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你还可以看到如何使用`axis([xmin,xmax,ymin,ymax])`手动设置坐标轴的范围。命令`legend`接受关于位置和格式的可选参数；在这种情况下，图例被放置在左上角，并以小字体显示，如下图所示（*图
    6.2*）：
- en: '![](img/a14516df-6320-4707-9dde-d9e1f12eb6ce.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a14516df-6320-4707-9dde-d9e1f12eb6ce.png)'
- en: 'Figure 6.2: Two polynomials fitted to the same points'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.2：两个多项式拟合同一点集
- en: As final examples for basic plotting, we demonstrate how to do scatter plots and
    logarithmic plots in two dimensions.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 作为基础绘图的最终示例，我们演示了如何绘制散点图和二维对数图。
- en: 'Here is an example of a 2D point scatter plot:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个二维点散点图的示例：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](img/1abff8af-22ad-4ced-b8a8-6d55a08d1841.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1abff8af-22ad-4ced-b8a8-6d55a08d1841.png)'
- en: 'Figure 6.3(a): An example of a scatter plot'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.3(a)：一个散点图示例
- en: 'The following code is an example of a logarithmic plot using `loglog`:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码是使用`loglog`进行对数绘图的示例：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](img/79c6a098-ec45-455b-8a16-454ae29cd3b2.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/79c6a098-ec45-455b-8a16-454ae29cd3b2.png)'
- en: 'Figure 6.3(b): An example of a plot with logarithmic *x* and *y* axes'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.3(b)：一个带有对数 *x* 和 *y* 坐标轴的图形示例
- en: The examples shown in the preceding figure (*Figure 6.3(a)* and *Figure 6.3(b)*)
    used some parameters of `plot` and `loglog`, which allow special formatting. In
    the next section, we will explain the parameters in more detail.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 前面图中展示的示例（*图 6.3(a)* 和 *图 6.3(b)*) 使用了`plot`和`loglog`的一些参数，这些参数允许特殊的格式化。在下一节中，我们将更详细地解释这些参数。
- en: 6.1.2 Formatting
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6.1.2 格式设置
- en: The appearance of figures and plots can be styled and customized to look how
    you want them to look. Some important variables are `linewidth`, which controls
    the thickness of plot lines, `xlabel` and `ylabel`, which set the axis labels, `color` for
    plot colors, and `transparent` for transparency.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图形和绘图的外观可以通过样式和定制设置为你想要的效果。一些重要的变量包括`linewidth`（控制绘图线条的粗细），`xlabel`和`ylabel`（设置坐标轴标签），`color`（设置绘图颜色），以及`transparent`（设置透明度）。
- en: 'This section will tell you how to use some of them. The following is an example
    with more keywords:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将告诉你如何使用其中的一些变量。以下是一个包含更多关键词的示例：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: There are short commands that can be used if you only need basic style changes,
    for example, setting the color and line style. The following table (*Table 6.1*)
    shows some examples of these formatting commands. You may use either the short
    string syntax `plot(...,'ro-')`, or the more explicit syntax `plot(..., marker='o',
    color='r', linestyle='-')`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果只需要进行基本样式修改，例如设置颜色和线型，可以使用简短的命令。下表（*表 6.1*）展示了这些格式化命令的一些示例。你可以使用简洁的字符串语法`plot(...,'ro-')`，或者使用更明确的语法`plot(...,
    marker='o', color='r', linestyle='-')`。
- en: '![](img/eb6fd063-8472-4188-8a3e-a95226d58bad.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eb6fd063-8472-4188-8a3e-a95226d58bad.png)'
- en: 'Table 6.1: Some common plot formatting arguments'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 表 6.1：一些常见的绘图格式化参数
- en: 'To set the color to green with the marker `''o''`, we write the following:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 要将颜色设置为绿色并使用标记`'o'`，我们写下如下代码：
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To plot histograms instead of regular plots, the command `hist` is used:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 要绘制直方图而非常规图形，使用命令`hist`：
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](img/9d2b730a-47c1-40ff-b0cd-b5ff99327b78.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9d2b730a-47c1-40ff-b0cd-b5ff99327b78.png)'
- en: 'Figure 6.4: Normal distribution with 50 bins and a green curve indicating the
    true distribution'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.4：具有 50 个区间的正态分布图，绿色曲线表示真实分布
- en: The resulting plot looks similar to *Figure 6.4*. The title, and any other text,
    can be formatted using LaTeX to show mathematical formulas. LaTeX formatting is
    enclosed within a pair of `$` signs. Also, note the string formatting done using
    the method `format`; see [Section 2.4.3](879c0554-386f-4bb1-8fa8-b86c43927545.xhtml),
    *String formatting*.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 结果图形看起来与*图 6.4*类似。标题以及其他任何文本都可以使用LaTeX格式化来显示数学公式。LaTeX格式化被包含在一对`$`符号之间。另请注意，使用`format`方法进行的字符串格式化；参见[第2.4.3节](879c0554-386f-4bb1-8fa8-b86c43927545.xhtml)，*字符串格式化*。
- en: Sometimes, the brackets for the string formatting interfere with LaTeX bracket
    environments. If this occurs, replace the LaTeX bracket with a double bracket;
    for example, `x_{1}` should be replaced with `x_{{1}}`. The text might contain
    sequences that overlap with string escape sequences, for example, `\tau` will
    be interpreted as the tab character, `\t`. An easy workaround is to add `r` before
    the string, for example, `r'\tau'`. This makes it a raw string.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，字符串格式化的括号会与LaTeX的括号环境发生冲突。如果发生这种情况，可以用双括号替换LaTeX括号；例如，`x_{1}`应该替换为`x_{{1}}`。文本中可能包含与字符串转义序列重叠的序列，例如，`\tau`会被解释为制表符字符`\t`。一种简单的解决方法是在字符串前添加`r`，例如，`r'\tau'`。这会将其转换为原始字符串。
- en: Placing several plots in one figure window can be done using the command `subplot`.
    Consider the following example, which iteratively averages out the noise on a
    sine curve.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 将多个图放置在一个图形窗口中，可以使用命令`subplot`。考虑以下示例，该示例逐步平均掉正弦曲线上的噪声。
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![](img/4ece0cd7-35f1-4ea1-80a4-606d8f8b4633.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4ece0cd7-35f1-4ea1-80a4-606d8f8b4633.png)'
- en: 'Figure 6.5: An example of plotting several subplots in the same figure window'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.5：在同一图形窗口中绘制多个子图的示例
- en: 'The function `avg` uses the NumPy function `roll` to shift all values of the
    array. `subplot` takes three arguments: the number of vertical plots, the number
    of horizontal plots, and an index indicating which location to plot in (counted
    row-wise). Note that we used the command `subplots_adjust` to add extra space
    to adjust the distance between the subplots.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 函数`avg`使用NumPy的`roll`函数来平移数组中的所有值。`subplot`需要三个参数：竖直子图的数量，水平子图的数量，以及表示绘制位置的索引（按行计数）。请注意，我们使用了命令`subplots_adjust`来添加额外的空间，以调整子图之间的距离。
- en: 'A useful command is `savefig`, which lets you save a figure as an image (this
    can also be done from the figure window). Many image and file formats are supported
    by this command; they are specified by the filename''s extension as:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 一个有用的命令是`savefig`，它允许你将图形保存为图像（也可以通过图形窗口完成）。此命令支持多种图像和文件格式，它们通过文件名的扩展名来指定：
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: or
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 或者
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You can place the image against a non-white background, for example, a web
    page. For this, the parameter `transparent` can be set to make the figure''s background
    transparent:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将图像放置在非白色背景上，例如网页。为此，可以设置参数`transparent`，使得图形的背景透明：
- en: '[PRE11]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If you intend to embed a figure into a LaTeX document, it is recommended that
    you reduce the surrounding white space by setting the figure''s bounding box tight around
    the drawing, as shown here:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打算将图形嵌入到LaTeX文档中，建议通过设置图形的边界框为紧密围绕绘图的方式来减少周围的空白，如下所示：
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 6.1.3 Working with meshgrid and contours
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6.1.3 使用meshgrid和等高线
- en: 'A common task is a graphical representation of a scalar function over a rectangle:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 一个常见的任务是对矩形区域内的标量函数进行图形化表示：
- en: '![](img/bf7a60e2-808a-4314-8834-89fbc8f13bed.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bf7a60e2-808a-4314-8834-89fbc8f13bed.png)'
- en: 'For this, first we have to generate a grid on the rectangle ![](img/b8fbb3cc-da62-4469-b2e1-8882e423bac6.png).
    This is done using the command `meshgrid` :'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们首先需要在矩形上生成一个网格！[](img/b8fbb3cc-da62-4469-b2e1-8882e423bac6.png)。这是通过命令`meshgrid`来实现的：
- en: '[PRE13]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '`X` and `Y` are arrays with an `(n,m)` shape such that `X[i,j]` and `Y[i,j]` contain
    the coordinates of the grid point [![](img/30c2ef7b-8ed9-474e-a2c7-fb9dea5e92f3.png)],
    as shown in *Figure 6.6*:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`X`和`Y`是形状为`(n,m)`的数组，其中`X[i,j]`和`Y[i,j]`包含网格点的坐标[![](img/30c2ef7b-8ed9-474e-a2c7-fb9dea5e92f3.png)]，如*图6.6*所示：'
- en: '![](img/f5b1481f-1499-4c11-8758-b8049dd174cb.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f5b1481f-1499-4c11-8758-b8049dd174cb.png)'
- en: 'Figure 6.6: A rectangle discretized by meshgrid.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.6：一个由meshgrid离散化的矩形。
- en: A rectangle discretized by `meshgrid` will be used in the next section to visualize
    the behavior of an iteration, while we will use it here to plot the level curves
    of a function. This is done by the command `contour`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 一个由`meshgrid`离散化的矩形将在下一节中用于可视化迭代过程，而我们将在这里用它绘制函数的等高线。这是通过命令`contour`来完成的。
- en: 'As an example, we choose Rosenbrock''s banana function:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 作为示例，我们选择了罗森布鲁克香蕉函数：
- en: '![](img/3ea8cf3c-24a2-416a-a130-2cefe007da25.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3ea8cf3c-24a2-416a-a130-2cefe007da25.png)'
- en: It is used to challenge optimization methods, see [[27]](12bddbb5-edd0-46c6-8f7a-9475aaf01a9d.xhtml).
    The function values descend toward a banana-shaped valley, which itself decreases
    slowly toward the function's global minimum at (1, 1).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 它用于挑战优化方法，见[[27]](12bddbb5-edd0-46c6-8f7a-9475aaf01a9d.xhtml)。函数值向着一个香蕉形的山谷下降，该山谷本身慢慢下降，最终到达函数的全局最小值(1,
    1)。
- en: 'First, we display the level curves using `contour`:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们使用`contour`显示等高线：
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This plots the level curve at the levels given by the fourth parameter and uses
    the colormap `gray`. Furthermore, we used logarithmically spaced steps from 10^(0.5) to
    10³ using the function `logscale` to define the levels, see *Figure 6.7*.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这将绘制由第四个参数给定的级别的等高线，并使用颜色映射`gray`。此外，我们使用了从10^(0.5)到10³的对数间隔步长，使用函数`logscale`来定义级别，见*图6.7*。
- en: '![](img/297117a6-be35-49fb-bd9a-e882ec0a0d08.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/297117a6-be35-49fb-bd9a-e882ec0a0d08.png)'
- en: 'Figure 6.7: A contour plot of the Rosenbrock function'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.7：罗森布鲁克函数的等高线图
- en: In the preceding example, an anonymous function indicated by the keyword `lambda` is
    used to keep the code compact. Anonymous functions are explained in [Section 7.7](35749482-dbc7-41b2-aa19-dc63b242f18f.xhtml),
    *Anonymous Functions *. If levels are not given as arguments to `contour`, the
    function chooses appropriate levels by itself.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，使用了`lambda`关键字表示的匿名函数来保持代码简洁。匿名函数的解释见[第7.7节](35749482-dbc7-41b2-aa19-dc63b242f18f.xhtml)，*匿名函数*。如果未将级别作为参数传递给`contour`，该函数会自动选择合适的级别。
- en: The function `contourf` performs the same task as `contour`, but fills the plot
    with colors according to different levels. Contour plots are ideal for visualizing
    the behavior of a numerical method. We illustrate this here by showing the iterations
    of an optimization method.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`contourf`函数执行与`contour`相同的任务，但根据不同的级别填充颜色。等高线图非常适合可视化数值方法的行为。我们通过展示优化方法的迭代过程来说明这一点。'
- en: 'We continue the preceding example and depict the steps toward the minimum of
    the Rosenbrock function generated by Powell''s method, which we will apply to
    find the minimum of the Rosenbrock function:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们继续前面的示例，并描绘了通过Powell方法生成的罗森布鲁克函数最小值的步骤，我们将应用该方法来找到罗森布鲁克函数的最小值：
- en: '[PRE15]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The iterative method `fmin_powell` applies Powell's method to find a minimum.
    It is started by a given start value *[![](img/2cc00c09-516b-4d00-828a-1c36ee601c4f.png)]*
    and reports all iterates when the option `retall=True` is given. After 16 iterations,
    the solution ![](img/899aeac0-4ed8-4a07-aa68-aefa0abcfbf9.png) was found. . The
    iterations are depicted as bullets in the contour plot; see *Figure 6.8.*
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 迭代方法`fmin_powell`应用Powell方法找到最小值。通过给定的起始值*[![](img/2cc00c09-516b-4d00-828a-1c36ee601c4f.png)]*启动，并在选项`retall=True`时报告所有迭代结果。经过16次迭代后，找到了解决方案![](img/899aeac0-4ed8-4a07-aa68-aefa0abcfbf9.png)。迭代过程在等高线图中以子弹点表示；见*图6.8*。
- en: '![](img/b8264e8e-e652-40ce-b542-cd5933ccb2b3.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b8264e8e-e652-40ce-b542-cd5933ccb2b3.png)'
- en: 'Figure 6.8: A contour plot of the Rosenbrock function with a search path of
    an optimization method'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.8：罗森布鲁克函数的等高线图，展示了优化方法的搜索路径
- en: The function `contour` also creates a contour set object that we assigned to
    the variable `cs`. This is then used by `clabel` to annotate the levels of the
    corresponding function values, as shown in the *Figure 6.8*.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`contour`函数还创建了一个轮廓集对象，我们将其赋值给变量`cs`。然后，`clabel`用来标注相应函数值的级别，如*图6.8*所示。'
- en: 6.1.4 Generating images and contours
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6.1.4 生成图像和轮廓
- en: 'Let''s take a look at some examples of visualizing arrays as images. The following
    function will create a matrix of color values for the Mandelbrot fractal, see
    also [[20]](12bddbb5-edd0-46c6-8f7a-9475aaf01a9d.xhtml). Here, we consider a fixed-point
    iteration, which depends on a complex parameter, ![](img/7da969b2-9b13-46c2-8302-ac87dcd6ea89.png):'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一些将数组可视化为图像的示例。以下函数将为曼德尔布罗特分形创建一个颜色值矩阵，另见[[20]](12bddbb5-edd0-46c6-8f7a-9475aaf01a9d.xhtml)。这里，我们考虑一个依赖于复数参数的固定点迭代，![](img/7da969b2-9b13-46c2-8302-ac87dcd6ea89.png)：
- en: '![](img/94a571d8-b85c-4c81-b346-4715ff922487.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/94a571d8-b85c-4c81-b346-4715ff922487.png)'
- en: Depending on the choice of this parameter, it may or may not create a bounded
    sequence of complex values, ![](img/79494086-b942-40d5-8ddd-9d5909102f58.png).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 根据此参数的选择，它可能会或可能不会创建一个有界的复数值序列，![](img/79494086-b942-40d5-8ddd-9d5909102f58.png)。
- en: For every value of ![](img/8f79f3af-5180-4652-be25-3ac505e9c0e1.png), we check
    whether [![](img/e18e3d50-d5e0-4d92-9a5b-729259d50640.png)] exceeds a prescribed
    bound. If it remains below the bound within `maxit` iterations, we assume the
    sequence to be bounded.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个![](img/8f79f3af-5180-4652-be25-3ac505e9c0e1.png)的值，我们检查[![](img/e18e3d50-d5e0-4d92-9a5b-729259d50640.png)]是否超过了预定的界限。如果在`maxit`次迭代内仍然低于该界限，则认为序列是有界的。
- en: 'Note how, in the following piece of code,`meshgrid` is used to generate a matrix
    of complex parameter values, *![](img/23c90700-fa16-49ff-a92c-4d06ad22376d.png)*:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在以下代码片段中，`meshgrid`用于生成一个复数参数值矩阵，*![](img/23c90700-fa16-49ff-a92c-4d06ad22376d.png)*：
- en: '[PRE16]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The command `imshow` displays the matrix as an image. The selected color map
    shows the regions where the sequence appeared unbounded in white and others in
    black. Here, we used `axis('off')` to turn off the axis as this might not be so
    useful for images.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 命令 `imshow` 将矩阵显示为图像。选定的颜色图显示了序列在白色区域的无界部分，其他部分为黑色。在这里，我们使用了 `axis('off')` 来关闭坐标轴，因为这对于图像来说可能不太有用。
- en: '![](img/509af838-00f1-4ec8-acce-bf44d789faa4.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/509af838-00f1-4ec8-acce-bf44d789faa4.png)'
- en: 'Figure 6.9: An example of using imshow to visualize a matrix as an image'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.9：使用 imshow 将矩阵可视化为图像的示例
- en: 'By default, `imshow` uses interpolation to make the images look nicer. This
    is clearly seen when the matrices are small. The next figure shows the difference
    between using:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`imshow` 使用插值来使图像看起来更漂亮。当矩阵较小时，这一点尤为明显。下图显示了使用以下方法的区别：
- en: '[PRE17]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: and
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 和
- en: '[PRE18]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In the second example, pixel values are just replicated, see [[30]](12bddbb5-edd0-46c6-8f7a-9475aaf01a9d.xhtml).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个示例中，像素值只是被复制了，见 [[30]](12bddbb5-edd0-46c6-8f7a-9475aaf01a9d.xhtml)。
- en: '![](img/ae936a8e-16d1-4fd1-8a10-bc1a5c07efba.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae936a8e-16d1-4fd1-8a10-bc1a5c07efba.png)'
- en: 'Figure 6.10: The difference between using the linear interpolation of imshow
    compared to using nearest-neighbor interpolation'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.10：使用 `imshow` 的线性插值与使用最近邻插值的区别
- en: For more details on working and plotting with images using Python.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 有关使用 Python 处理和绘制图像的更多详细信息。
- en: After having seen how to make plots in the "command-way," we will consider a
    more object-oriented approach in the following sections. Although slightly more
    complicated, it opens up a vast range of applications.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在了解了如何以“命令方式”制作图表之后，我们将在接下来的部分中考虑一种更面向对象的方法。虽然稍微复杂一些，但它打开了广泛的应用范围。
- en: 6.2 Working with Matplotlib objects directly
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.2 直接使用 Matplotlib 对象
- en: Till now, we have used the `pyplot` module of matplotlib. This module makes
    it easy for us to use the most important plot commands directly. Mostly, we are
    interested in creating a figure and displaying it immediately. Sometimes, though,
    we want to generate a figure that should be modified later by changing some of
    its attributes. This requires us to work with graphical objects in an object-oriented
    way. In this section, we will present some basic steps to modify figures. For
    a more sophisticated object-oriented approach to plotting in Python, you have
    to leave `pyplot` and have to dive directly into `matplotlib` with its extensive
    documentation.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在使用 matplotlib 的 `pyplot` 模块。这个模块使我们可以直接使用最重要的绘图命令。通常，我们感兴趣的是创建一个图形并立即显示它。然而，有时我们希望生成一个图形，稍后可以通过更改某些属性来修改它。这要求我们以面向对象的方式与图形对象进行交互。在这一节中，我们将介绍修改图形的一些基本步骤。要了解
    Python 中更复杂的面向对象绘图方法，您需要离开 `pyplot`，直接进入 `matplotlib`，并参考其广泛的文档。
- en: 6.2.1 Creating axes objects
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6.2.1 创建坐标轴对象
- en: 'When creating a plot that should be modified later, we need references to a
    figure and an axes object. For this, we have to create a figure first and then
    define some axes and their location in the figure, and we should not forget to
    assign these objects to a variable:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 当创建一个需要稍后修改的图表时，我们需要引用一个图形和一个坐标轴对象。为此，我们必须先创建一个图形，然后定义一些坐标轴及其在图形中的位置，并且我们不能忘记将这些对象分配给一个变量：
- en: '[PRE19]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'A figure can have several axes objects depending on the use of `subplot`. In
    a second step, plots are associated with a given axes object:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 一幅图可以有多个坐标轴对象，具体取决于是否使用了 `subplot`。在第二步中，图表与给定的坐标轴对象相关联：
- en: '[PRE20]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Here, we used an anonymous function indicated by the keyword `lambda`. We will
    explain this construct later in [Section 7.7](35749482-dbc7-41b2-aa19-dc63b242f18f.xhtml),
    *Anonymous functions*. In fact, these two plot commands fill the list `ax.lines` with
    two `Lines2D` objects:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用了由关键字 `lambda` 表示的匿名函数。我们将在 [第 7.7 节](35749482-dbc7-41b2-aa19-dc63b242f18f.xhtml)
    中解释这个构造，*匿名函数*。实际上，这两个绘图命令将列表 `ax.lines` 填充了两个 `Lines2D` 对象：
- en: '[PRE21]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'It is a good practice to use labels so that we can later identify objects in
    an easy way:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 使用标签是一个好习惯，这样我们可以稍后轻松地识别对象：
- en: '[PRE22]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: We have now set things up in a way that allows further modifications. The figure
    we have obtained thus far is shown in *Figure* *6.11, (left).*
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经将设置完成，以便进行进一步的修改。到目前为止我们得到的图如 *图 6.11（左图）* 所示。
- en: 6.2.2 Modifying line properties
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6.2.2 修改线条属性
- en: 'We just identified a particular line object by its label. It is an element
    of the list `ax.lines` with the index `il`. All of its properties are collected
    in a dictionary:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚通过标签标识了一个特定的线条对象。它是列表 `ax.lines` 中的一个元素，索引为 `il`。它的所有属性都被收集在一个字典中：
- en: '[PRE23]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'This can be obtained by the following command:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过以下命令获得：
- en: '[PRE24]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'They can be changed by corresponding setter methods. Let''s now change the
    line style of the sine curve:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 它们可以通过相应的setter方法进行修改。现在我们来改变正弦曲线的线条样式：
- en: '[PRE25]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We can even modify the data, as shown:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至可以修改数据，如下所示：
- en: '[PRE26]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The result is shown in *Figure 6.11, (right)*:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如*图 6.11，（右）*所示：
- en: '![](img/fb85293c-d3b5-49dc-b8b7-c982db0cf062.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fb85293c-d3b5-49dc-b8b7-c982db0cf062.png)'
- en: 'Figure 6.11: The amplitude-modulated sine function (left) and a curve with
    the last data point corrupted (right)'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.11：幅度调制正弦函数（左）和数据点被破坏的曲线（右）
- en: 6.2.3 Making annotations
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6.2.3 制作注释
- en: 'One useful axes method is `annotate`. It sets an annotation at a given position
    and points, with an arrow, to another position in the drawing. The arrow can be
    given properties in a dictionary:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 一个有用的坐标轴方法是`annotate`。它可以在给定位置设置注释，并用箭头指向图中的另一个位置。箭头可以通过字典来指定属性：
- en: '[PRE27]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: In the first annotation example above, the arrow points to a point with the
    coordinates (*2.1, 1.0*), and the left-bottom coordinate of the text is (*3.2,
    0.5*). If not otherwise specified, the coordinates are given in the convenient
    data coordinate system, which refers to the data used to generate the plots.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的第一个注释示例中，箭头指向坐标为(*2.1, 1.0*)的点，文本的左下坐标为(*3.2, 0.5*)。如果没有特别指定，坐标是以方便的数据坐标系给出的，即用于生成图形的数据坐标系。
- en: Furthermore, we demonstrated a couple of arrow properties specified by the dictionary `arrowprop`.
    You can scale the arrow by the key `shrink`. The setting `'shrink':0.05` reduces
    the arrow size by 5% to keep a distance to the curve it points to. You can let
    the arrow take the form of a spline arc or give it other shapes using the key
    `connectionstyle`.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们展示了通过字典`arrowprop`指定的几个箭头属性。你可以通过键`shrink`来缩放箭头。设置`'shrink':0.05`会将箭头大小减少5%，以保持与其指向的曲线之间的距离。你还可以使用键`connectionstyle`让箭头呈现为样条曲线或其他形状。
- en: Text properties, or even a bounding box around the text, can be made by extra
    keyword arguments to the annotate method, see *Figure 6.12, (left*).
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 文本属性，甚至是围绕文本的边框框，可以通过额外的关键字参数传递给`annotate`方法，见*图 6.12，（左）*。
- en: 'Experimenting with annotations sometimes requires several attempts and we need to
    reject some of those. Therefore, we assigned the annotate object to a variable,
    which allows us to remove the annotation by its `remove` method:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试注释有时需要多次尝试，我们需要丢弃其中的一些。因此，我们将注释对象赋值给一个变量，这样就可以通过其`remove`方法移除注释：
- en: '[PRE28]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 6.2.4 Filling areas between curves
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6.2.4 填充曲线之间的区域
- en: Filling is an ideal tool for highlighting differences between curves, such as
    noise on top of expected data and approximations versus exact functions.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 填充是一个理想的工具，用于突出曲线之间的差异，例如预期数据上的噪声和近似函数与精确函数之间的差异。
- en: 'Filling is done by the axis method, `fill_between`:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 填充是通过坐标轴方法`fill_between`完成的：
- en: '[PRE29]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'For the next figure, we used the following command:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 对于下一个图，我们使用了以下命令：
- en: '[PRE30]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'From the last chapter, we already know the NumPy method, `where`. In the context
    here, `where` is a very convenient parameter that requires a Boolean array to
    specify the additional filling conditions:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们已经了解了NumPy方法`where`。在这里的上下文中，`where`是一个非常方便的参数，需要一个布尔数组来指定额外的填充条件：
- en: '[PRE31]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The Boolean array that selects the regions to fill is given by the condition
    `amod_sin(x)-sin(x) > 0`.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 选择要填充的区域的布尔数组由条件`amod_sin(x)-sin(x) > 0`给出。
- en: 'The next figure shows the curve with both variants of filling areas:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个图显示了带有两种填充区域变体的曲线：
- en: '![](img/67407da9-48ee-4d76-9731-3596707d1634.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](img/67407da9-48ee-4d76-9731-3596707d1634.png)'
- en: 'Figure 6.12: The amplitude-modulated sine function with annotations and filled
    areas (left), and a modified figure with only partially filled areas, by using
    the where parameter (right)'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.12：带有注释和填充区域的幅度调制正弦函数（左），以及仅通过使用`where`参数部分填充区域的修改图（右）
- en: 'If you test these commands yourself, do not forget to remove the complete filling
    before you try out the partial filling, otherwise you will not see any change:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你自己测试这些命令，记得在尝试部分填充之前移除完整填充，否则你将看不到任何变化：
- en: '[PRE32]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Related filling commands are `fill` for filling polygons and `fill_betweenx` for
    filling the areas in horizontal directions.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 相关的填充命令是`fill`用于填充多边形，`fill_betweenx`用于填充水平方向的区域。
- en: 6.2.5 Defining ticks and tick labels
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6.2.5 定义刻度和刻度标签
- en: 'Figures in talks, posters, and publications look much nicer if they are not
    overloaded with unnecessary information. You want to direct the spectator to those
    parts that contain the message. In our example, we clean up the picture by removing
    ticks from the *x *axis and the *y *axis and by introducing problem-related tick
    labels:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在演讲、海报和出版物中的图形，如果没有过多不必要的信息，看起来会更美观。你希望引导观众关注那些包含信息的部分。在我们的例子中，我们通过去除*x*轴和*y*轴的刻度，并引入与问题相关的刻度标签来清理图像：
- en: '![](img/cc6a84f4-c69e-4d7d-ad83-e4bf7c748600.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cc6a84f4-c69e-4d7d-ad83-e4bf7c748600.png)'
- en: 'Figure 6.13: The completed example of the amplitude-modulated sine function,
    with annotations and filled areas and modified ticks and tick labels'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.13：完成的振幅调制正弦函数示例，带有注释和填充区域，以及修改过的刻度和刻度标签
- en: 'The ticks in *Figure 6.13* were set by the following commands. Note the LaTeX-way
    of setting labels with Greek letters:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6.13*中的刻度线是通过以下命令设置的。注意使用LaTeX方式设置带有希腊字母的标签：'
- en: '[PRE33]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Note that we used LaTeX formatting in the strings to represent Greek letters,
    to set formulas correctly, and to use a LaTeX font. It is also a good practice
    to increase the font size so that the resulting figure can be scaled down into
    a text document without affecting the readability of the axes. The final result
    of this guiding example is shown in *Figure 6.13*.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们在字符串中使用了LaTeX格式来表示希腊字母、正确设置公式并使用LaTeX字体。增加字体大小也是一个好习惯，这样生成的图形可以缩小到文本文档中而不影响坐标轴的可读性。本指导示例的最终结果如*图
    6.13*所示。
- en: 6.2.6 Setting spines makes your plot more instructive – a comprehensive example
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6.2.6 设置脊柱使你的图更具启发性——一个综合示例
- en: Spines are the lines with ticks and labels displaying the coordinates in a figure.
    If you do not take a special action, Matplotlib places them as four lines – bottom,
    right, top, and left, forming a frame defined by the axis parameters.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 脊柱是显示坐标的带有刻度和标签的线条。如果不采取特别措施，Matplotlib 会将它们放置为四条线——底部、右侧、顶部和左侧，形成由坐标轴参数定义的框架。
- en: Often, pictures look better when not framed, and frequently there is a more
    instructive place to put the spines. In this section, we demonstrate different
    ways to alter the position of spines.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，图像在没有框架时看起来更好，而且脊柱有时可以放置在更具教学意义的位置。在这一节中，我们展示了改变脊柱位置的不同方法。
- en: Let's start with a guiding example, see *Figure* 6.14.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一个指导示例开始，见*图* 6.14。
- en: '![](img/edcc56e5-af01-4b23-918a-f5ea1413c186.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![](img/edcc56e5-af01-4b23-918a-f5ea1413c186.png)'
- en: 'Figure 6.14: A Matplotlib figure with a non-automatic placement of the spines'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.14：一个Matplotlib图，具有非自动的脊柱位置设置
- en: In this example, we choose to display only two of the four spines.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们选择只显示四个脊柱中的两个。
- en: 'We deselected the spines at the top and on the right by using the method `set_visible`,
    and positioned the left and bottom spines in data coordinates by using the method
    `set_position`:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过使用`set_visible`方法取消选择了顶部和右侧的脊柱，并通过使用`set_position`方法将左侧和底部的脊柱放置在数据坐标中：
- en: '[PRE34]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Spines carry ticks and tick labels. Normally, they are set automatically, but
    often placing them manually is advantageous.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 脊柱携带刻度和刻度标签。通常，它们是自动设置的，但手动设置它们往往更有优势。
- en: 'In the following example, we even exploited the possibility of two sets of
    ticks, with different placement parameters. Matplotlib refers to these sets as
    ''*minor*'' and ''*major*''. One of these sets was used for horizontally aligning
    the tick labels on the left side of the *y* axis:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们甚至利用了两组刻度线的可能性，并且设置了不同的放置参数。Matplotlib 将这两组刻度线分别称为'*minor*'和'*major*'。其中一组用于水平对齐*y*轴左侧的刻度标签：
- en: '[PRE35]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The result is shown in Figure 6.15.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如图 6.15 所示。
- en: '![](img/dd735ee6-c02a-436f-b715-02b266371708.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dd735ee6-c02a-436f-b715-02b266371708.png)'
- en: 'Figure 6.15: Changing the position of ticks and labels'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.15：改变刻度和标签的位置
- en: This example can be elaborated much more by adding more axes and annotations.
    We refer to *Exercise 7* and *Figure 6.20*.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子可以通过添加更多的轴和注释来进一步展开。我们参考了*练习 7*和*图 6.20*。
- en: So far, we have considered 2D plots. We turn now in the next section to the
    visualization of 3D mathematical objects.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们考虑的是二维图。接下来，我们将在下一节讨论三维数学对象的可视化。
- en: 6.3 Making 3D plots
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.3 制作三维图
- en: There are some useful `matplotlib` toolkits and modules that can be used for
    a variety of special purposes. In this section, we describe a method for producing
    3D plots.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些有用的`matplotlib`工具包和模块，可以用于各种特殊目的。在这一节中，我们描述了一种生成三维图的方法。
- en: 'The toolkit `mplot3d` provides the 3D plotting of points, lines, contours,
    surfaces, and all other basic components, as well as 3D rotation and scaling.
    A 3D plot is generated by adding the keyword `projection=''3d''` to the axes object,
    as shown in the following example:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 工具包 `mplot3d` 提供了三维点、线、等高线、表面及其他基本组件的绘制功能，还支持三维旋转和缩放。通过向坐标轴对象添加关键字 `projection='3d'`
    可以生成三维图，如下示例所示：
- en: '[PRE36]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: As you can see, you need to import the type `axes3D` from `mplot3d`. The resulting
    plot displays the scattered 3D data, which can be seen in *Figure 6.16*.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，你需要从 `mplot3d` 导入 `axes3D` 类型。生成的图展示了散点三维数据，这可以在 *图 6.16* 中看到。
- en: '![](img/9827dbe5-eab1-4a5d-b0ba-1a75281e3a42.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9827dbe5-eab1-4a5d-b0ba-1a75281e3a42.png)'
- en: 'Figure 6.16: Plotting 3D data using the mplot3d toolkit'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.16：使用 mplot3d 工具包绘制三维数据
- en: 'Plotting surfaces is just as easy. The following example uses the built-in
    function `get_test_data` to create sample data for plotting a surface. Consider
    the following example of a surface plot with transparency:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 绘制表面同样简单。以下示例使用内建函数 `get_test_data` 创建样本数据，用于绘制表面。考虑以下具有透明度的表面图示例：
- en: '[PRE37]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The *alpha* value sets the transparency. The surface plot is shown *Figure 6.17.*
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '*alpha* 值设置透明度。表面图如*图 6.17*所示。'
- en: '![](img/acf60e0f-5670-40bc-863f-5156dc8d1cb3.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![](img/acf60e0f-5670-40bc-863f-5156dc8d1cb3.png)'
- en: 'Figure 6.17: Example of plotting a surface mesh'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.17：绘制表面网格的示例
- en: 'You can also plot contours in any of the coordinate projections, as in the
    following example:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以在任意坐标投影中绘制等高线，如以下示例所示：
- en: '[PRE38]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Note the commands for setting the axis limits. The standard `matplotlib` command
    for setting the axis limits is `axis([-40, 40, -40, 40])`. This works fine for
    2D plots. However, `axis([-40,40,-40,40,-40,40])` does not work. For 3D plots,
    you need to use the object-oriented version of this command, `ax.set_xlim3d(-40,40)`.
    The same goes for labeling the axis; note the commands for setting the labels.
    For 2D plots, you can do `xlabel(’X axis’)` and `ylabel(’Y axis’)`, but there
    is no command `zlabel`. Instead, in 3D plots, you need to use `ax.set_xlabel(’X
    axis’)` and likewise for the other labels, as shown in the preceding example.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 注意设置坐标轴范围的命令。设置坐标轴范围的标准 `matplotlib` 命令是 `axis([-40, 40, -40, 40])`。该命令适用于二维图。然而，`axis([-40,40,-40,40,-40,40])`
    则无效。对于三维图，你需要使用面向对象的命令版本 `ax.set_xlim3d(-40,40)`。同样，设置坐标轴标签时也有类似的命令。对于二维图，你可以使用
    `xlabel('X axis')` 和 `ylabel('Y axis')`，但没有 `zlabel` 命令。对于三维图，你需要使用 `ax.set_xlabel('X
    axis')` 和类似的命令设置其他标签，如前面的示例所示。
- en: 'The resulting figure from this code is the following:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码生成的图形如下：
- en: '![](img/90bbde60-4d49-4366-9efe-c6304645e46c.png)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![](img/90bbde60-4d49-4366-9efe-c6304645e46c.png)'
- en: 'Figure 6.18: A 3D plot with additional contour plots in the three coordinate
    projections'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.18：带有额外等高线图的三维图，在三个坐标投影中展示
- en: There are many options for formatting the appearance of the plots, including
    color and the transparency of surfaces. The `mplot3d` documentation website [[23]](12bddbb5-edd0-46c6-8f7a-9475aaf01a9d.xhtml),
    has the details.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多选项可供设置图形的外观，包括颜色和表面透明度。`mplot3d` 文档网站 [[23]](12bddbb5-edd0-46c6-8f7a-9475aaf01a9d.xhtml)
    中有详细信息。
- en: Mathematical objects are sometimes better visualized dynamically by a sequence
    of pictures or even movies. This is the topic of the next section.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 数学对象有时通过一系列图片甚至电影来动态可视化效果更佳。这是下一节的主题。
- en: 6.4 Making movies from plots
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.4 从图形生成电影
- en: If you have data that evolves, you might want to save it as a movie as well
    as showing it in a figure window, similar to the command `savefig`. One way to
    do this is with the module `visvis`, see [37].
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有演变的数据，可能希望将其保存为电影，并在图形窗口中显示，类似于命令 `savefig`。一种方法是使用模块 `visvis`，请参阅 [37]。
- en: Here is a simple example of evolving a circle using an implicit representation.
    Let the circle be represented by the zero level,
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个使用隐式表示演变圆形的简单示例。令圆形由一个函数的零水平表示，
- en: '![](img/53d5e400-f103-4d73-8d95-1d9f771a7e14.png) of a function ![](img/3cad0783-6c67-4da2-8bed-6f3de9a998f8.png).'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/53d5e400-f103-4d73-8d95-1d9f771a7e14.png) 一个函数 ![](img/3cad0783-6c67-4da2-8bed-6f3de9a998f8.png)
    的零水平。'
- en: Alternatively, consider the disk ![](img/4f11df5a-0c9f-413a-9548-2dc4796ac29b.png) inside
    the zero set of ![](img/6f82cbed-2f3f-4614-9e23-eca35223238a.png). If the value
    of ![](img/2b7a8922-2cce-4811-8ef9-6fce4d09ab58.png)decreases at a rate ![](img/66d4131e-1c59-423c-8242-933277ff6eba.png),
    then the circle will move outward at the rate ![](img/cc1d309a-3955-4e88-980a-1c4eff3b32a9.png).
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，考虑到盘面 ![](img/4f11df5a-0c9f-413a-9548-2dc4796ac29b.png) 在 ![](img/6f82cbed-2f3f-4614-9e23-eca35223238a.png)
    的零集内。如果 ![](img/2b7a8922-2cce-4811-8ef9-6fce4d09ab58.png) 的值以速率 ![](img/66d4131e-1c59-423c-8242-933277ff6eba.png)
    递减，则圆圈将以速率 ![](img/cc1d309a-3955-4e88-980a-1c4eff3b32a9.png) 向外移动。
- en: 'This can be implemented as:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以实现为：
- en: '[PRE39]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The result is a flash movie (`*.swf` file) of a growing black circle, as shown
    in *Figure 6.19.*
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是一个黑色圆圈逐渐扩大的动画（`*.swf` 文件），如 *图 6.19* 所示。
- en: '![](img/0683ec0e-d3db-4236-aac8-c127bc6ebfd6.png) ![](img/af022cbe-d334-4cd1-8b0f-a3179199221e.png) ![](img/cb4d0486-dedf-456f-a4ad-60e895a754cd.png) ![](img/03a96259-8454-4516-85ef-f3a9a87f52ff.png)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0683ec0e-d3db-4236-aac8-c127bc6ebfd6.png) ![](img/af022cbe-d334-4cd1-8b0f-a3179199221e.png)
    ![](img/cb4d0486-dedf-456f-a4ad-60e895a754cd.png) ![](img/03a96259-8454-4516-85ef-f3a9a87f52ff.png)'
- en: 'Figure 6.19: An example of evolving a circle'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.19：演变圆圈的示例
- en: In this example, a list of arrays was used to create the movie. The module `visvis` can
    also save a GIF animation and, on certain platforms, an AVI animation (`*.gif`
    and `*.avi` files), and there is also the possibility of capturing movie frames
    directly from the figure window. These options, however, require some more packages
    to be installed on your system (for example, `PyOpenGL` and `PIL`, the Python
    Imaging Library). See the documentation on the `visvis` web page for more details.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，使用了一组数组来创建动画。模块 `visvis` 也可以保存 GIF 动画，并且在某些平台上，可以生成 AVI 动画（`*.gif` 和
    `*.avi` 文件）。此外，还可以直接从图形窗口捕捉电影帧。然而，这些选项要求系统安装更多的包（例如，`PyOpenGL` 和 `PIL`，即 Python
    图像库）。有关更多细节，请参阅 `visvis` 官方网页上的文档。
- en: 'Another option is to use `savefig` to create images, one for each frame. The
    following code example creates a sequence of 200 picture files, which can then
    be combined into a video:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种选择是使用 `savefig` 创建图像，为每一帧生成一张图像。以下代码示例创建了一系列 200 张图片文件，这些文件可以合并成一个视频：
- en: '[PRE40]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: These images can then be combined using standard video editing software, for
    example, Mencoder or ImageMagick. This approach has the advantage that you can
    make high-resolution videos by saving high-resolution images.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 这些图像可以使用标准视频编辑软件进行合并，例如 Mencoder 或 ImageMagick。该方法的优点是你可以通过保存高分辨率图像来制作高分辨率视频。
- en: 6.5 Summary
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.5 小结
- en: A graphical representation is the most compact form in which to present mathematical
    results or the behavior of an algorithm. This chapter provided you with the basic
    tools for plotting and introduced you to a more sophisticated way to work with
    graphical objects, such as figures, axes, and lines in an object-oriented way.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 图形表示是展示数学结果或算法行为最紧凑的形式。本章为你提供了绘图的基本工具，并介绍了一种更精细的面向对象的图形对象工作方式，例如图形、坐标轴和线条。
- en: In this chapter, you learned how to make plots, not only classical *x/y* plots,
    but also 3D plots and histograms. We gave you an appetizer on making films. You
    also saw how to modify plots, considering them to be graphical objects with related
    methods and attributes that can be set, deleted, or modified.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何绘制图形，不仅是经典的 *x/y* 图，还有 3D 图和直方图。我们还为你提供了制作影片的前菜。你还看到了如何修改图形，视其为图形对象，并使用相关的方法和属性进行设置、删除或修改。
- en: 6.6 Exercises
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.6 练习
- en: '**Ex. 1:** Write a function that plots an ellipse given its center coordinates
    (*x,y*), the half axis *a,* and *b* rotation angle ![](img/41ba9462-862e-42f9-9719-4723a30ee33d.png).'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例 1：** 编写一个函数，给定椭圆的中心坐标 (*x,y*)，半轴 *a* 和 *b* 以及旋转角度，绘制椭圆 ![](img/41ba9462-862e-42f9-9719-4723a30ee33d.png)。'
- en: '**Ex. 2:** Write a short program that takes a 2D array, for example, the preceding
    Mandelbrot contour image, and iteratively replace each value by the average of
    its neighbors. Update a contour plot of the array in a figure window to animate
    the evolution of the contours. Explain the behavior.'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例 2：** 编写一个简短的程序，接受一个二维数组，例如前面的曼德尔布罗特轮廓图，并迭代地将每个值替换为其邻居的平均值。在图形窗口中更新数组的轮廓图，以动画形式展示轮廓的演变。解释其行为。'
- en: '**Ex. 3:** Consider an ![](img/ab1805a6-ee8e-44b4-a1e3-043c630fc03e.png) matrix
    or image with integer values. The mapping'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例 3：** 考虑一个 ![](img/ab1805a6-ee8e-44b4-a1e3-043c630fc03e.png) 矩阵或整数值图像。映射'
- en: '![](img/6fb1559c-a1fb-45f5-b477-e3ba88bd5d7e.png)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6fb1559c-a1fb-45f5-b477-e3ba88bd5d7e.png)'
- en: is an example of a mapping of a toroidal square grid of points onto itself.
    This has the interesting property that it distorts the image by shearing and then
    moving the pieces outside the image back using the modulo function, `mod`. Applied
    iteratively, this results in randomizing the image in a way that eventually returns
    the original. Implement the following sequence,
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 是一个点阵网格映射到自身的示例。这个方法有一个有趣的特性，它通过剪切然后使用模函数`mod`将超出图像的部分移回图像内，进而使图像随机化，最终恢复到原始图像。依照以下顺序实施，
- en: '![](img/58f5266a-a958-4494-a86e-0fec0a7dca8d.png),'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/58f5266a-a958-4494-a86e-0fec0a7dca8d.png),'
- en: and save out the first ![](img/324ad186-7011-4d4f-8639-4ce386dfdc15.png) steps
    to files or plot them in a figure window.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 并将前几个步骤！[](img/324ad186-7011-4d4f-8639-4ce386dfdc15.png)保存为文件或绘制到图形窗口中。
- en: 'As an example image, you can use the classic 512 *×* 512 Lena test image from `scipy.misc`:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 作为示例图像，你可以使用经典的512*×*512 Lena测试图像，该图像来自`scipy.misc`：
- en: '[PRE41]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The result should look like this:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 结果应该如下所示：
- en: '| ![](img/1c2ca42a-82c1-49a3-a149-d04714f1d85e.png) | ![](img/862a99ab-c967-4f3d-9632-cffe8776bc6c.png)
    | … | ![](img/e4cea046-8a57-4eba-a979-c88ea1971f44.png) | … | ![](img/122156fe-df35-41e5-a1e2-6b26cb575482.png)
    | … | ![](img/3173fa79-21df-4333-8883-f524e70bc76a.png) | ![](img/f7dc2216-0045-488d-a339-020a20ed5fa6.png)
    |'
  id: totrans-221
  prefs: []
  type: TYPE_TB
  zh: '| ![](img/1c2ca42a-82c1-49a3-a149-d04714f1d85e.png) | ![](img/862a99ab-c967-4f3d-9632-cffe8776bc6c.png)
    | … | ![](img/e4cea046-8a57-4eba-a979-c88ea1971f44.png) | … | ![](img/122156fe-df35-41e5-a1e2-6b26cb575482.png)
    | … | ![](img/3173fa79-21df-4333-8883-f524e70bc76a.png) | ![](img/f7dc2216-0045-488d-a339-020a20ed5fa6.png)
    |'
- en: '| 0 | 1 |   | 128 |   | 256 |   | 511 | 512 |'
  id: totrans-222
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 1 |   | 128 |   | 256 |   | 511 | 512 |'
- en: Compute the *x* and *y* mappings and use array indexing (see [Section 5.3](e60692b7-f6d2-42df-a59f-bfaf357ea932.xhtml): *Array
    indexing*) to copy the pixel values.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 计算*x*和*y*映射，并使用数组索引（参见[第5.3节](e60692b7-f6d2-42df-a59f-bfaf357ea932.xhtml)：*数组索引*）来复制像素值。
- en: '**Ex. 4:** Reading and plotting on images. SciPy comes with the function `imread` (in
    the `scipy.misc` module) for reading images (see [Section 14.6](f95f92d6-d8d1-46a6-bb5b-560714044c70.xhtml):
    *Reading and Writing Images*). Write a short program that reads an image from
    file and plots the image contour at a given gray-level value overlaid on the original
    image. You can get a grey-level version of the image by averaging the color channels
    like this: `mean(im,axis=2)`'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '**Ex. 4:** 读取并绘制图像。SciPy提供了`imread`函数（位于`scipy.misc`模块中）来读取图像（参见[第14.6节](f95f92d6-d8d1-46a6-bb5b-560714044c70.xhtml):
    *读取和写入图像*）。编写一个简短的程序，从文件中读取图像，并在原始图像上叠加给定灰度值的图像轮廓。你可以通过像这样平均颜色通道来获得图像的灰度版本：`mean(im,axis=2)`'
- en: '**Ex. 5:** Image edges. The zero crossings of the 2D Laplacian are a good indication
    of image edges. Modify the program in the previous exercise to use the `gaussian_laplace` or `laplace` function
    from the `scipy.ndimage` module to compute the 2D Laplacian and overlay the edges
    on top of the image.'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '**Ex. 5:** 图像边缘。二维拉普拉斯算子的零交叉是图像边缘的一个很好指示。修改前一个练习中的程序，使用`scipy.ndimage`模块中的`gaussian_laplace`或`laplace`函数来计算二维拉普拉斯算子，并将边缘叠加到图像上。'
- en: '**Ex. 6:** Reformulate the Mandelbrod fractal example [Section 6.1.4](86c61820-e645-486c-9418-10079ffac7f8.xhtml):
    *Generating images and contours*by using `orgid` instead of `meshgrid`. See also
    the explanation of `ogrid` in [Section 5.5.3](e60692b7-f6d2-42df-a59f-bfaf357ea932.xhtml), *Typical
    examples*. What is the difference between `orgid`, `mgrid`, and `meshgrid`?'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '**Ex. 6:** 通过使用`orgid`代替`meshgrid`，重新编写曼德博集合分形示例[第6.1.4节](86c61820-e645-486c-9418-10079ffac7f8.xhtml)：*生成图像和轮廓*。参见[第5.5.3节](e60692b7-f6d2-42df-a59f-bfaf357ea932.xhtml)对`ogrid`的解释，*典型示例*。`orgid`、`mgrid`和`meshgrid`之间有什么区别？'
- en: '**Ex. 7:** In *Figure* *6.20*, the use of the arctan function for approximating
    a jump (Heaviside function) is studied. A section of this curve is zoomed in to
    visualize the quality of the approximation. Reproduce this picture by means of
    your own code.'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '**Ex. 7:** 在*图*6.20中，研究了使用反正切函数来近似跳跃函数（Heaviside函数）。该曲线的一部分被放大以可视化近似的质量。通过你自己的代码重现这张图。'
- en: '![](img/b9ee6bc2-3edd-4d2b-b244-2d86f5b611aa.png)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b9ee6bc2-3edd-4d2b-b244-2d86f5b611aa.png)'
- en: 'Figure 6.20: Approximation of the Heaviside function (jump function) by arctan
    functions'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.20：使用反正切函数近似Heaviside函数（跳跃函数）
