- en: Decorating Graphs with Plot Styles and Types
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 装饰图表的绘图样式和类型
- en: In the previous chapter, we learned some basic concepts to draw line and scatter
    plots with Matplotlib, and made adjustments to a few elements. Now that we are
    familiar with the Matplotlib syntax, we are ready to go further and explore the
    potential of Matplotlib.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了一些基本概念，使用 Matplotlib 绘制折线图和散点图，并对几个元素进行了调整。现在我们熟悉了 Matplotlib 语法，准备深入探索
    Matplotlib 的潜力。
- en: 'In this chapter, we will discuss:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将讨论：
- en: Color specification
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 颜色规格
- en: Line style customization
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 线条样式定制
- en: Point style customization
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点样式定制
- en: More native plot types
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更多原生绘图类型
- en: Inserting text and other annotations
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插入文本和其他注释
- en: Considerations in plot styling
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绘图样式的注意事项
- en: Controlling the colors
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制颜色
- en: Color is an essential element in any visual. It can have a huge impact on how
    graphics are perceived. For example, sharp color contrast can be used to highlight
    a focus; a combination of several distinct colors is useful in setting up a hierarchy.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 颜色是任何视觉效果中的一个重要元素。它会对图形的感知产生巨大影响。例如，鲜明的颜色对比可以用来突出焦点；几种不同颜色的组合有助于建立层次感。
- en: In Matplotlib 2, colors have been set by default to better differentiate between
    categories; and to perceive continuous numerical values more intuitively, yet
    we often need better control over the colors to represent our data. In this section,
    we will introduce the common color options in Matplotlib.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Matplotlib 2 中，颜色已默认设置为更好地区分不同类别；并且为了更直观地感知连续数值，我们通常需要更好地控制颜色以表示数据。在本节中，我们将介绍
    Matplotlib 中常见的颜色选项。
- en: Default color cycle
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 默认颜色循环
- en: 'A color cycle is a list of colors used to control the color of a series of
    elements automatically, such as each data series in multiline plots. In Matplotlib
    2.0, the default color cycle has expanded from 7 to 10 colors using the *category10*
    palette in **Data-Driven Documents** (**D3**)[https://github.com/d3](https://github.com/d3) and
    Vega, a declarative language for visualization grammar. These colors are designed
    to show good contrast between distinct categories. Each color is named `''C0''`
    to `''C9''`, and can be called in manually by specifying a color in the preset
    color cycle. Here is a toy example of a multiline plot with each color in the
    default cycle:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 颜色循环是一个颜色列表，用于自动控制一系列元素的颜色，例如多条数据线图中的每一条数据系列。在 Matplotlib 2.0 中，默认的颜色循环从 7 种颜色扩展到
    10 种颜色，采用 **Data-Driven Documents** (**D3**)[https://github.com/d3] 和 Vega（一种声明性可视化语法语言）中的
    *category10* 调色板。这些颜色设计用于在不同类别之间显示良好的对比度。每种颜色的名称为 `'C0'` 到 `'C9'`，可以通过指定预设颜色循环中的颜色手动调用。以下是一个包含默认颜色循环中每种颜色的多线图的示例：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following is the figure output. The legend displays the name of each color
    in the default cycle:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是图形输出。图例显示了默认颜色循环中每种颜色的名称：
- en: '![](img/5da8130d-045f-4230-95bc-c7000c1c643b.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5da8130d-045f-4230-95bc-c7000c1c643b.png)'
- en: 'To access the hexadecimal codes of the colors, you may use the following code:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 若要访问颜色的十六进制代码，可以使用以下代码：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Single-lettered abbreviations for basic colors
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本颜色的单字母缩写
- en: 'There are several common colors with built-in, single-lettered standard abbreviations
    for quick use. They are listed as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个常用颜色，它们具有内置的单字母标准缩写，便于快速使用。它们如下所示：
- en: '`''b''`: Blue'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''b''`：蓝色'
- en: '`''g''`: Green'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''g''`：绿色'
- en: '`''r''`: Red'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''r''`：红色'
- en: '`''c''`: Cyan'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''c''`：青色'
- en: '`''m''`: Magenta'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''m''`：品红色'
- en: '`''y''`: Yellow'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''y''`：黄色'
- en: '`''k''`: Black'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''k''`：黑色'
- en: '`''w''`: White'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''w''`：白色'
- en: Standard HTML color names
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标准 HTML 颜色名称
- en: When we want to quickly build a palette from a wider range of colors, names
    in plain English may be more intuitive to start with than numerical code. There
    are more than a hundred different color names that are supported by HTML on all
    modern browsers. They are well supported in Matplotlib, for example, salmon, orange,
    yellow-green, chocolate, and cornflower blue.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们想要从更广泛的颜色范围中快速构建调色板时，普通英语中的颜色名称可能比数字代码更直观。现代浏览器支持 HTML 中超过一百种不同的颜色名称。它们在
    Matplotlib 中也得到了良好的支持，例如鲑鱼色、橙色、黄绿色、巧克力色和矢车菊蓝色。
- en: You can find the full list with matched colors and names at: [https://matplotlib.org/examples/color/named_colors.html](https://matplotlib.org/examples/color/named_colors.html).
    The corresponding hexadecimal code is available at: [https://www.w3schools.com/colors/colors_names.asp](https://www.w3schools.com/colors/colors_names.asp).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在此找到与颜色名称匹配的完整列表：[https://matplotlib.org/examples/color/named_colors.html](https://matplotlib.org/examples/color/named_colors.html)。相应的十六进制代码可以在这里找到：[https://www.w3schools.com/colors/colors_names.asp](https://www.w3schools.com/colors/colors_names.asp)。
- en: RGB or RGBA color code
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: RGB 或 RGBA 颜色代码
- en: A color can also be specified as a tuple of three to four float numbers between
    zero and one, such as `(0.1,0.1,0.2)` or `(0.2,0.2,0.3,0.8)`. The first three
    numbers define how much red, green, and blue light should be mixed into the desired
    color output. The optional fourth number is the alpha value to control the transparency
    level.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 颜色也可以指定为三个到四个介于零到一之间的浮点数的元组，例如 `(0.1,0.1,0.2)` 或 `(0.2,0.2,0.3,0.8)`。前三个数字定义了应该混合多少红色、绿色和蓝色光以生成所需的颜色输出。可选的第四个数字是
    alpha 值，用于控制透明度。
- en: Hexadecimal color code
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 十六进制颜色代码
- en: Similar to RGBA values, hexademical (hex) color codes control the amount of
    red, green, and blue light. They also control transparency with a two-digit hex
    number, each starting with a hash sign `'#'`, for instance, `'#81d8d0ec'`. Therefore,
    pure red, green, blue, black, and white's hex codes are `'#ff0000'`, `'#00ff00'`,
    `'#0000ff'`, `'#000000'`, and `'#ffffff'`, respectively.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于RGBA值，十六进制（hex）颜色代码控制红色、绿色和蓝色光的量。它们还通过一个两位数的十六进制数字来控制透明度，每个数字以井号 `'#'` 开头，例如
    `'#81d8d0ec'`。因此，纯红色、绿色、蓝色、黑色和白色的十六进制代码分别是 `'#ff0000'`、`'#00ff00'`、`'#0000ff'`、`'#000000'`
    和 `'#ffffff'`。
- en: Depth of grayscale
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 灰度深度
- en: You can specify any value within *0-1* in a string of a float number, such as
    `'0.5'`. A smaller number gives a darker shade of gray.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在浮点数的字符串中指定任何值，范围为 *0-1*，例如 `'0.5'`。数值越小，灰度越暗。
- en: Colormaps
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 颜色映射
- en: Colormaps map numerical values to a range of colors.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 颜色映射将数值映射到一系列颜色。
- en: 'Since Matplotlib 2.0, the default colormap has been changed from `''jet''`,
    which spans the visible light spectrum from red to blue, to `''viridis''`, which
    is a perceptually uniform continuum from yellow to blue. This makes it more intuitive
    to perceive continuous values:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 从Matplotlib 2.0开始，默认的颜色映射已经从 `'jet'`（横跨从红色到蓝色的可见光谱）更改为 `'viridis'`，这是一种从黄色到蓝色的感知均匀的渐变色。这样做使得感知连续值变得更加直观：
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Check out the following image generated with the preceding code to understand
    what perceptual color uniformity means:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下使用前述代码生成的图像，了解感知颜色均匀性意味着什么：
- en: '![](img/f8c5798f-add3-4613-9c72-952b6697cf7b.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f8c5798f-add3-4613-9c72-952b6697cf7b.png)'
- en: Matplotlib also provides a number of preset colormaps that are optimized for
    displaying diverging values or qualitative categories. Feel free to check them
    out at: [https://matplotlib.org/2.1.0/tutorials/colors/colormaps.html](https://matplotlib.org/2.1.0/tutorials/colors/colormaps.html).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Matplotlib 还提供了一些预设的颜色映射，优化了显示发散值或定性类别的效果。欢迎查看：[https://matplotlib.org/2.1.0/tutorials/colors/colormaps.html](https://matplotlib.org/2.1.0/tutorials/colors/colormaps.html)。
- en: Creating custom colormaps
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义颜色映射
- en: We can set up our own colormap. This is useful when customizing heatmaps and
    surface plots.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以设置自定义的颜色映射。这在自定义热图和表面图时非常有用。
- en: 'A simple way to create a custom linear colormap is to prepare a list of colors
    and allow Matplotlib to handle the transition. Let''s look at the following example:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 创建自定义线性颜色映射的一种简单方法是准备一个颜色列表，并让Matplotlib处理颜色过渡。让我们看一下以下示例：
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Here, we have a scatter plot with a colormap set up on our own, morphing from
    `red` through `yellow` to `green`:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们有一个散点图，使用了我们自定义的颜色映射，从 `红色` 通过 `黄色` 到 `绿色`：
- en: '![](img/d12da00a-66b6-4719-aac4-aac066efe7c8.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d12da00a-66b6-4719-aac4-aac066efe7c8.png)'
- en: Line and marker styles
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 线条和标记样式
- en: We have demonstrated how to draw line plots and scatter plots in the previous
    chapter. We know that scatter plots are made up of dots denoting each data point,
    whereas line plots are generated by joining dots of data points. In Matplotlib,
    the marker to mark the location of data points can be customized to have different
    styles, including shape, size, color, and transparency. Similarly, the line segments
    joining the data points as well as different 2D lines that share the same class
    in the object-oriented Matplotlib structure can have their styles adjusted, as
    briefly demonstrated in the grid section of the previous chapter. Adjusting marker
    and line styles is useful in making the data series more distinguishable, and
    sometimes for aesthetic considerations. In this section, we will go through the
    details and implementation methods of marker and line styles in Matplotlib.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们已经展示了如何绘制折线图和散点图。我们知道，散点图由表示每个数据点的点组成，而折线图是通过连接数据点来生成的。在 Matplotlib
    中，标记用来标示数据点的位置，可以定制其形状、大小、颜色和透明度。类似地，连接数据点的线段以及共享相同类的不同 2D 线条，也可以调整它们的样式，如在上一章的网格部分简要演示的那样。调整标记和线条样式对于使数据系列更加易于区分非常有用，有时也是出于美学考虑。在本节中，我们将详细介绍
    Matplotlib 中标记和线条样式的实现方法。
- en: Marker styles
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标记样式
- en: For markers denoting data points, we can adjust their shapes, sizes, and colors.
    By default, Matplotlib draws markers as single round dots. Here, we introduce
    the methods of adjustment.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 对于表示数据点的标记，我们可以调整它们的形状、大小和颜色。默认情况下，Matplotlib 会将标记绘制为单个圆形点。这里，我们介绍调整方法。
- en: Choosing the shape of markers
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择标记的形状
- en: 'There are dozens of available markers to denote data points. They are grouped
    into unfilled `markers` and the bolder `filled_markers`. Here are a few examples:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 有几十种可用的标记来表示数据点。它们被分为未填充的 `markers` 和更粗的 `filled_markers`。以下是一些示例：
- en: '`''o''`: Circle'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''o''`：圆形'
- en: '`''x''`: Cross'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''x''`：叉号'
- en: '`''+''`: Plus sign'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''+''`：加号'
- en: '`''P''`: Filled plus sign'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''P''`：填充加号'
- en: '`''D''`: Filled diamond'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''D''`：填充菱形'
- en: '`''s''`: Square'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''s''`：方形'
- en: '`''^''`: Triangle'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''^''`：三角形'
- en: 'We can access the keys and names of all available marker shapes under `mpl.lines.Line2D.markers`.
    The following is a code snippet for an overview of all our marker shapes:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过 `mpl.lines.Line2D.markers` 访问所有可用标记形状的键和名称。以下是一个代码片段，用于概览所有标记形状：
- en: '[PRE4]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here is the graphical output of the markers:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是标记的图形输出：
- en: '![](img/8b3e8a2e-494a-4f38-bd0c-85f8812d7845.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8b3e8a2e-494a-4f38-bd0c-85f8812d7845.png)'
- en: Using custom characters as markers
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用自定义字符作为标记
- en: Matplotlib supports the use of custom characters as markers, which now include
    mathtext and emoji. To use characters as custom markers, we concatenate two dollar
    signs `'$'`, each in front of and behind the character, and we pass them as the
    `marker` parameter.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Matplotlib 支持使用自定义字符作为标记，现在包括数学文本和表情符号。要使用字符作为自定义标记，我们将两个美元符号 `'$'` 连接在字符前后，并将其作为
    `marker` 参数传递。
- en: The notations starting with a backslash `'\'`, such as `'\clubsuit'`, are in
    mathtext, which will be introduced later in this chapter (in the text and annotations
    section).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 以反斜杠 `'\'` 开头的符号，如 `'\clubsuit'`，是数学文本（mathtext），将在本章稍后的文本和注释部分介绍。
- en: 'Here is an example of a scatter plot of markers in mathematical symbols and
    an emoji:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个使用数学符号和表情符号的散点图示例：
- en: '[PRE5]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'As seen from the following figure, we have successfully used symbols, a Greek
    alphabet, as well as an emoji as custom markers in a scatter plot:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 从以下图示可以看到，我们成功地在散点图中使用了符号、希腊字母以及表情符号作为自定义标记：
- en: '![](img/73032a2c-8422-42cf-a6df-12d57a65c6ef.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/73032a2c-8422-42cf-a6df-12d57a65c6ef.png)'
- en: Adjusting marker sizes and colors
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调整标记的大小和颜色
- en: In a scatter plot, we can specify the marker size with the parameter `s` and
    the marker color with `c` in the `plt.scatter()` function.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在散点图中，我们可以使用参数 `s` 来指定标记的大小，使用 `c` 来指定标记的颜色，在 `plt.scatter()` 函数中实现。
- en: To draw markers on line plots, we first specify the shape of the markers in
    the `plt.plot()` function, such as `marker='x'`. Marker colors follow the line
    color.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 要在折线图上绘制标记，我们首先在 `plt.plot()` 函数中指定标记的形状，如 `marker='x'`。标记的颜色将与线条颜色一致。
- en: Please note that scatter plots accept list types as size and color values, convenient
    in visualizing clusters, while line plots only accept a single value per data
    series.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，散点图接受列表类型的大小和颜色值，这对于可视化数据聚类非常方便，而折线图每个数据系列只接受单一值。
- en: 'Let''s look at the following example:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下以下示例：
- en: '[PRE6]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This code generates a figure of a scatter plot with marker sizes increasing
    with the data values, and a line plot with cross-shaped markers of a fixed size:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码生成了一个散点图，标记大小随着数据值增加，同时也有一个线性图，标记为固定大小的十字形：
- en: '![](img/b55785d3-30ba-40ab-9699-550e1a0ec628.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b55785d3-30ba-40ab-9699-550e1a0ec628.png)'
- en: Fine-tuning marker styles with keyword arguments
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过关键字参数精细调整标记样式
- en: We can have further refined control over marker styles with some more keyword
    arguments. For example, for `plt.plot()`, we can change the `markeredgecolor`,
    `markeredgewidth,` and `markerfacecolor`.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过一些额外的关键字参数进一步精细调整标记样式。例如，对于 `plt.plot()`，我们可以更改 `markeredgecolor`、`markeredgewidth`
    和 `markerfacecolor`。
- en: 'Here is a code example:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个代码示例：
- en: '[PRE7]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This is the result of adding the extra keyword arguments:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这是添加额外关键字参数后的结果：
- en: '![](img/8f87b433-889d-4045-8ab3-4f14751cd7e3.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8f87b433-889d-4045-8ab3-4f14751cd7e3.png)'
- en: Line styles
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 线条样式
- en: Lines are among the most frequently occurring elements in Matplotlib visualization,
    from those representing data series to those marking axes, grids, and outlines
    of any shape. Hence, it is important to understand how we can adjust line style.
    Lines in Matplotlib are controlled by the `Line2D` class. The object-oriented
    structure of Matplotlib makes it easy to adjust line styles through keyword arguments
    with similar grammar in each API. Here, we shall introduce the several most commonly
    tuned aspects of Matplotlib lines.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 线条是 Matplotlib 可视化中最常见的元素之一，从表示数据序列的线条到标记坐标轴、网格和任何形状轮廓的线条。因此，理解如何调整线条样式非常重要。Matplotlib
    中的线条由 `Line2D` 类控制。Matplotlib 的面向对象结构使得通过关键字参数轻松调整线条样式，每个 API 中的语法都很相似。在这里，我们将介绍几个常用的
    Matplotlib 线条调整方面。
- en: Color
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 颜色
- en: Setting the color of the lines in a line plot is as simple as adding a `color` or
    its shorthand `c` parameter to the `plt.plot()` command. The color option is available
    in many other Matplotlib APIs as well.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 设置线条图中线条的颜色非常简单，只需要在 `plt.plot()` 命令中添加 `color` 或其简写 `c` 参数即可。颜色选项在许多其他 Matplotlib
    API 中也可用。
- en: Line thickness
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 线条粗细
- en: The thickness is set by the `linewidth` or `lw` parameter in most Matplotlib
    elements involving lines, including line plots.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 线条的粗细通过大多数 Matplotlib 涉及线条的元素中的 `linewidth` 或 `lw` 参数设置，包括线条图。
- en: Dash patterns
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 虚线模式
- en: 'Dash patterns of lines are designated by the `linestyle` or `ls` parameter.
    It can sometimes be used as a positional argument for convenience. For example,
    in line plots, we can specify the following:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 线条的虚线模式由 `linestyle` 或 `ls` 参数指定。有时为了方便，它可以作为位置参数使用。例如，在线条图中，我们可以指定以下内容：
- en: '`''solid''` or `''-''`: Solid line; default'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''solid''` 或 `''-''`：实线；默认值'
- en: '`''dashed''` or `''--''`: Equally spaced dashes'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''dashed''` 或 `''--''`：等距虚线'
- en: '`''dashdot''` or `''-.''`: Alternate dashes and dots'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''dashdot''` 或 `''-.''`：交替虚线和点线'
- en: '`''.''`: Loose dotted line'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''.''`：松散的虚线'
- en: '`'':''`: Packed dotted line'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`'':''`：紧密的点线'
- en: '`''None''`, `'' ''`, `''''`: No visible line'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''None''`、`'' ''`、`''''`：没有可见的线条'
- en: '`(offset, on-off-dash-seq)`: Customized dashes'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(offset, on-off-dash-seq)`：自定义虚线'
- en: 'The following is an example of lines in different dash patterns:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是不同虚线模式的线条示例：
- en: '[PRE8]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We can see the effect of each dash style in the following figure:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在下图中看到每种虚线样式的效果：
- en: '![](img/95bae8d9-3487-475f-979e-462082353f63.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/95bae8d9-3487-475f-979e-462082353f63.png)'
- en: Designing a custom dash style
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计自定义虚线样式
- en: Matplotlib does not limit us to its preset line styles. In fact, we can design
    our own dash patterns by specifying the length and space for each repeating dash
    unit, such as `(0, (5,3,1,3,1,3))`.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Matplotlib 不仅仅限制于其预设的线条样式。实际上，我们可以通过指定每个重复虚线单元的长度和间距，设计自己的虚线模式，例如 `(0, (5,3,1,3,1,3))`。
- en: Cap styles
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 端点样式
- en: 'Another parameter for tuning is `dash_capstyle`. It controls the style of the
    dash ends:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个调节参数是 `dash_capstyle`。它控制虚线端点的样式：
- en: '`''butt''`: Blunt end'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''butt''`：钝头'
- en: '`''projecting''`: Extends in length'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''projecting''`：延伸长度'
- en: '`''round''`: Rounded end'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''round''`：圆形末端'
- en: 'To demonstrate the different cap styles, we have a code snippet of a multiline
    plots with thick lines to enlarge the dashes:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示不同的端点样式，我们有一段多线图的代码示例，使用粗线条来放大虚线：
- en: '[PRE9]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'From the following figure, we can clearly see how blunt and round dashes give
    different impressions of sharpness and subtlety:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 从下图中，我们可以清楚地看到钝头和圆形虚线给人不同的锋利度和微妙感：
- en: '![](img/9a85cd40-61a0-414f-9d5d-ae50a91223ef.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9a85cd40-61a0-414f-9d5d-ae50a91223ef.png)'
- en: Spines
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 坐标轴
- en: Spines in Matplotlib refer to the lines surrounding the axes of the plotting
    area. We can set each spine to have different line styles or to be invisible.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在Matplotlib中，脊柱指的是围绕绘图区域坐标轴的线条。我们可以设置每个脊柱具有不同的线条样式或设置为不可见。
- en: To begin, we first access the axes with `plt.gca()`, where **gca** stands for
    **get current axes**, and store it in a variable, say `ax`.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们使用`plt.gca()`访问坐标轴，其中**gca**代表**获取当前坐标轴**，并将其存储在一个变量中，例如`ax`。
- en: We then adjust the properties of each spine in `ax.spines` with either `'top'`,
    `'right'`, `'bottom'`, or `'left'`. The common settings include line widths, color,
    and visibility, which is demonstrated in the following code snippet.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们通过`ax.spines`调整每个脊柱的属性，分别为`'top'`、`'right'`、`'bottom'`或`'left'`。常见的设置包括线宽、颜色和可见性，下面的代码片段演示了这些设置。
- en: 'The following is an example to remove the top and right spines, often seen
    as a convention in certain scientific plots, and to enhance visual simplicity
    in general. It is also common to thicken the remaining spines. The change in color
    is shown as a demonstration. We can adjust it to suit our overall design where
    the plot is displayed:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个示例，演示如何去除顶部和右侧脊柱，这在某些科学图表中常见，并且通常为了简化视觉效果而去除它们。通常还会加粗剩余的脊柱。颜色的变化如下所示，作为演示。我们可以根据图表显示的整体设计进行调整：
- en: '[PRE10]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This will create a graph of blue spines on the left and bottom:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个显示左侧和底部为蓝色脊柱的图：
- en: '![](img/3c9551bf-bc93-44e6-a6b5-febc805bfeb7.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c9551bf-bc93-44e6-a6b5-febc805bfeb7.png)'
- en: More native Matplotlib plot types
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多本地的Matplotlib图表类型
- en: Besides the most basic scatter and line plots, Matplotlib provides a versatile
    collection of plot types to serve different data visualization purposes. In this
    section, we will introduce the rationale of plot type selection and the usage
    of each type.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 除了最基本的散点图和折线图，Matplotlib还提供了多种多样的图表类型，用于不同的数据可视化需求。在本节中，我们将介绍图表类型选择的原理以及每种类型的使用方法。
- en: Choosing the right plot
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择合适的图表
- en: A successful visualization must communicate the message well. In order to achieve
    this goal, we need to have a good understanding of the nature of our data as well
    as the advantages and limitations of each plot type in illustrating different
    relationships in data.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 成功的可视化必须能够有效地传达信息。为了实现这个目标，我们需要对数据的性质有清晰的理解，同时了解每种图表类型在展示不同数据关系时的优缺点。
- en: 'In choosing the right plot type to display, we have the following considerations:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择合适的图表类型时，我们有以下几个考虑因素：
- en: Number of variables
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量的数量
- en: Distribution of data
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据分布
- en: Relationships between data series
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据系列之间的关系
- en: Histogram
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 直方图
- en: Histograms are useful in surveying the distribution of data. For example, we
    can plot data on a histogram when we want to see some age groups distributed in
    a population, light exposure in a photograph, or the amount of precipitation in
    each month in a city.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 直方图有助于调查数据的分布。例如，当我们希望查看某个人群中年龄分布，照片中的光照暴露，或一个城市每个月的降水量时，可以使用直方图绘制数据。
- en: In Matplotlib, we call the `plt.hist()` function with a linear array. Matplotlib
    will automatically group the set of data points into `bins` and plot out the frequencies
    for each bin in bars. We can also specify the bin size by `plt.hist(array,bins=binsize)`.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在Matplotlib中，我们调用`plt.hist()`函数并传入线性数组。Matplotlib会自动将数据点分组为`bins`，并绘制每个bin的频率作为条形图。我们还可以通过`plt.hist(array,
    bins=binsize)`指定bin的大小。
- en: 'Here is an example of plotting a randomly generated binomial distribution:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个绘制随机生成的二项分布的示例：
- en: '[PRE11]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The histogram produced is as follows:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的直方图如下：
- en: '![](img/8e23ba30-9cd2-4931-9193-a05b3a1cd290.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8e23ba30-9cd2-4931-9193-a05b3a1cd290.png)'
- en: Bar plot
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 条形图
- en: Bar plots are useful for comparing absolute levels of discrete data series.
    They are created by the function `plt.bar(labels,heights)` in Matplotlib.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 条形图对于比较离散数据系列的绝对水平非常有用。它们可以通过Matplotlib中的`plt.bar(labels, heights)`函数创建。
- en: 'Let''s look at the example of the market capitalization of today''s much hyped
    cryptocurrencies. The five top cryptocurrencies in terms of market capitalization
    are shown here:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下今天备受关注的加密货币的市值示例。这里展示的是市值排名前五的加密货币：
- en: '[PRE12]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We can see from the following figure that instead of following the input order,
    Matplotlib outputs a figure of bars with labels sorted alphabetically:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 从下图中可以看到，Matplotlib并没有按照输入顺序，而是按字母顺序排列了标签，并输出了一个条形图：
- en: '![](img/8c3f9fbb-4c29-4699-ac95-f89b9fbc97b4.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8c3f9fbb-4c29-4699-ac95-f89b9fbc97b4.png)'
- en: 'To create bar plots with bars in the designated order, we can make use of Pandas
    and its Matplotlib integration. The procedure is as follows:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 要按指定顺序创建条形图，我们可以利用Pandas及其与Matplotlib的集成。步骤如下：
- en: Create a Pandas DataFrame `df`
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个Pandas DataFrame `df`
- en: Plot the bar chart with `df.plot(kind='bar')`
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`df.plot(kind='bar')`绘制条形图
- en: Set the labels of `xticks`
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置`xticks`的标签
- en: Adjust the other plot properties
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调整其他图表属性
- en: Show the plot with `plt.show()`
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`plt.show()`显示图表
- en: Please note that, by default, `df.plot()` includes a legend. We need to specify
    `legend=False` to turn it off.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，默认情况下，`df.plot()`包含一个图例。我们需要指定`legend=False`来关闭它。
- en: 'Here is an example to reorder the bar plot in the previous output figure:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个示例，展示如何重新排序之前输出图中的条形图：
- en: '[PRE13]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![](img/65f71bc5-cb9c-481a-af62-81f1df523cfb.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![](img/65f71bc5-cb9c-481a-af62-81f1df523cfb.png)'
- en: Setting bar plot properties
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置条形图属性
- en: We can set the `width`, `color`, and `bottom` coordinates of the bars as keyword
    arguments in `plt.bar()`.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在`plt.bar()`中作为关键字参数设置条形图的`width`、`color`和`bottom`坐标。
- en: The bar `width` is set in ratios, whereas the color is set as introduced in
    the earlier section of this chapter.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 条形图的`width`是按比例设置的，而颜色则如本章早期部分所介绍的那样设置。
- en: For data that may include experimental or measurement errors, we can input lists
    of `yerr` (and `xerr`) values to show the accuracy.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 对于可能包含实验或测量误差的数据，我们可以输入`yerr`（和`xerr`）值的列表来显示精确度。
- en: Drawing bar plots with error bars using multivariate data
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用多变量数据绘制带误差条的条形图
- en: We can easily create bar plots with multiple data series with Pandas `df.plot()`.
    This API also allows us to easily add error bars by supplying the `xerr` and `yerr`
    parameters. Let's have a look at an example that demonstrates the usage of this
    function along with bar property adjustment.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过Pandas的`df.plot()`轻松创建带有多个数据系列的条形图。这个API还允许我们通过提供`xerr`和`yerr`参数轻松添加误差条。让我们看一个示例，展示如何使用这个函数并调整条形图属性。
- en: 'The following code snippet draws a multibar plot to show the performance of
    an imaginary drug to treat inflammation, by comparing the level of an inflammatory
    protein before and after treatment of a drug and placebo as control:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码段绘制了一个多条形图，展示了一种假想药物治疗炎症的效果，通过比较治疗前后炎症蛋白的水平以及安慰剂对照组：
- en: '[PRE14]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Here, you get a paired bar chart for two conditions. It seems the drug may have
    some effect compared to the placebo control. Can you think of more examples of
    data to draw multibar plots?
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你得到一个双条件的配对条形图。看起来药物相比安慰剂可能有一些效果。你能想到更多的数据示例，用来绘制多条形图吗？
- en: '![](img/6ac134b1-c01c-4cbd-b369-f35052dc0bc5.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6ac134b1-c01c-4cbd-b369-f35052dc0bc5.png)'
- en: Besides using Pandas, we can also call multiple `plt.bar()` commands to draw
    multiple series of bar charts. Note that we will have to shift the coordinates
    so that the bars do not overlap each other.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用Pandas外，我们还可以调用多个`plt.bar()`命令来绘制多个系列的条形图。注意，我们需要调整坐标，以确保条形图不会重叠。
- en: Mean-and-error plots
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 均值和误差图
- en: For experimental sciences, a data point is often averaged from several repeats
    of experiments, necessitating the need to show the error range to illustrate the
    precision level. In this case, mean-and-error plots may be more suitable than
    bar charts. In Matplotlib, mean-and-error plots are generated by the `plt.errorbar()`API.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 对于实验科学，数据点通常是通过多次实验的平均值得到的，这就需要显示误差范围来说明精度水平。在这种情况下，均值和误差图比条形图更为合适。在Matplotlib中，均值和误差图是通过`plt.errorbar()`API生成的。
- en: When the positive errors and negative errors are the same, we can input 1D arrays
    to error values to draw symmetric error bars. Otherwise, we input 2D arrays of
    `[positive errors, negative errors]` for asymmetric error bars. While it is more
    common to have plots with `y` errors only, error values for both `x` and `y` axes
    are supported.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 当正误差和负误差相同时，我们可以将1D数组输入为误差值，绘制对称的误差条。否则，我们将输入2D数组`[正误差，负误差]`来绘制不对称的误差条。虽然只绘制`y`轴误差的图更为常见，但`x`和`y`轴的误差值都被支持。
- en: 'By default, Matplotlib draws a line linking each error bar, with format `fmt` set
    to `''.-''`. For discrete datasets, we can add the keyword argument `fmt=''.''` to
    remove the line. Let''s go through a simple example:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Matplotlib会绘制连接每个误差条的线，格式`fmt`设置为`'.-'`。对于离散数据集，我们可以添加关键字参数`fmt='.'`来去除这条线。让我们来看一个简单的例子：
- en: '[PRE15]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We now get a sine curve with error bars, as follows. Try to substitute it with
    some real testing data you get:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在得到了一个带误差条的正弦曲线，如下所示。试着用你获得的一些真实测试数据来替换它：
- en: '![](img/13b784a0-c887-4fdc-94ed-ca1e6bd90e77.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![](img/13b784a0-c887-4fdc-94ed-ca1e6bd90e77.png)'
- en: Pie chart
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 饼图
- en: Pie chart is a circular representation of component ratios. The angle, and hence
    the arc length of each sector ratio (also called **wedges**), presents the proportion
    that each component accounts for, relative to the whole.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 饼图是以圆形表示各组成部分比例的图表。每个扇区的角度及其弧长（也叫 **楔形**）代表各组成部分相对于整体的比例。
- en: Matplotlib provides the `plt.pie()` function to draw pie charts. We can label
    each sector with `labels` as well as the percentage with `autopct` automatically.
    For different ways to customize the string format of the percentages, you may
    refer to: [https://pyformat.info/](https://pyformat.info/).
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: Matplotlib 提供了 `plt.pie()` 函数来绘制饼图。我们可以通过 `labels` 为每个扇区添加标签，并且可以通过 `autopct`
    自动显示百分比。有关如何自定义百分比字符串格式的不同方式，请参考：[https://pyformat.info/](https://pyformat.info/)。
- en: To maintain the circular shape of our pie chart, we specify the same width and
    length for a square figure with `plt.figure(figsize=(n,n))`.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持饼图的圆形形状，我们通过 `plt.figure(figsize=(n,n))` 为正方形图形指定相同的宽度和长度。
- en: 'Here, we have an example of web server usage in the first week of January 2017:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是2017年1月第一周的网络服务器使用情况示例：
- en: '[PRE16]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The resultant pie chart is as follows:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的饼图如下所示：
- en: '![](img/ba0baf01-10db-4e84-a653-a42c35c4838d.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ba0baf01-10db-4e84-a653-a42c35c4838d.png)'
- en: 'We can also separate each sector by passing a list of ratios to the keyword
    argument `explode`. For example, adding the argument `explode=[0.1]*5` to the
    preceding `plt.pie()` plot will generate the following result:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过传递一个比率列表给关键字参数 `explode` 来分离每个扇区。例如，在之前的 `plt.pie()` 绘图中添加 `explode=[0.1]*5`
    参数，将会生成如下结果：
- en: '![](img/dc2379b5-99ce-4b60-9db6-c2e9e3bd2bd8.png)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dc2379b5-99ce-4b60-9db6-c2e9e3bd2bd8.png)'
- en: 'Please note that if the input array sums up to less than 1, the output pie
    chart will be incomplete, as shown in the following example:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果输入数组的和小于 1，输出的饼图将不完整，正如下图所示：
- en: '[PRE17]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'As seen here, instead of a full circle, we have an incomplete fan-shaped plot:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 如图所示，饼图并不是一个完整的圆，而是一个不完整的扇形图：
- en: '![](img/4d2bafb5-0f0c-4de0-a4a0-a2679a74be35.png)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4d2bafb5-0f0c-4de0-a4a0-a2679a74be35.png)'
- en: In that case, we have to explicitly specify the ratio of each term. For instance,
    in the preceding example, change `x = [0.1,0.3]` to `x = [0.25,0.75]`.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们必须明确指定每个项的比例。例如，在之前的示例中，将 `x = [0.1,0.3]` 改为 `x = [0.25,0.75]`。
- en: Polar chart
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 极坐标图
- en: A polar chart is used to display multivariate data and is also known as a radar
    chart or a spider chart. It is often seen in illustrations of strength in different
    aspects of different objects for comparison, such as the evaluation of the price
    and various specifications of a piece of hardware, or the abilities of a game
    character.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 极坐标图用于显示多维数据，也被称为雷达图或蜘蛛图。它常用于展示不同对象在不同方面的强度对比，例如评估硬件的价格和各种规格，或者游戏角色的能力。
- en: Moreover, polar plots are also useful in drawing mathematical functions, which
    we are going to demonstrate here. In Matplotlib, we draw polar charts with the
    command `plt.polar()`. Apart from the x, y coordinate system we are familiar with,
    polar coordinates are used for polar charts, angles, and radii. The central point
    is called the **pole**. Note that Matplotlib takes a degree unit for the angle
    input.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，极坐标图在绘制数学函数时也很有用，下面我们将进行演示。在 Matplotlib 中，我们使用命令 `plt.polar()` 绘制极坐标图。除了我们熟悉的
    x、y 坐标系外，极坐标用于极坐标图、角度和半径。中心点称为 **极点**。注意，Matplotlib 采用角度单位来输入角度。
- en: 'Here is the code to draw a polar rose:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 这是绘制极坐标玫瑰图的代码：
- en: '[PRE18]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This is the result. How many petals do you see in the rose?
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 这是结果。你看到了多少个花瓣？
- en: '![](img/a3853537-fad8-45a1-9699-ce95b0b8dcb4.png)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a3853537-fad8-45a1-9699-ce95b0b8dcb4.png)'
- en: We can also make use of the polar coordinate system to create charts such as
    a heatmap of wind speed of the earth in geography, or the surface temperature
    of a round object for engineers. We will leave these advanced uses for you as
    an exercise when you have completed this book.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以利用极坐标系创建图表，例如地理学中表示地球风速的热力图，或工程学中表示圆形物体表面温度的图表。我们将把这些高级用法留作练习，等你完成本书后再尝试。
- en: Controlling radial and angular grids
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制径向和角度网格
- en: 'There are two functions to control the radial and angular grids: `rgrid()` and
    `thetagrid()` respectively. We can pass the `radii`, `labels`, and `angle` arguments
    to the `rgrid()` function, and `angles`, `labels`, and `frac` to the `thetagrid()` function,
    respectively.'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个函数可以控制径向网格和角度网格：`rgrid()` 和 `thetagrid()`。我们可以将 `radii`、`labels` 和 `angle`
    参数传递给 `rgrid()` 函数，将 `angles`、`labels` 和 `frac` 参数传递给 `thetagrid()` 函数。
- en: Text and annotations
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文本与注释
- en: To enhance the understanding of plot details, we may sometimes add in text annotations
    for explanation. We will now introduce the methods of adding and adjusting text
    in Matplotlib plots.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解图表细节，我们有时会添加文本注释来进行说明。接下来我们将介绍在 Matplotlib 图表中添加和调整文本的方法。
- en: Adding text annotations
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加文本注释
- en: We can add text to our plot by calling `plt.text(x,y,text)`; we specify the
    `x` and `y` coordinates and the text string.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过调用 `plt.text(x,y,text)` 向图表中添加文本；我们需要指定 `x` 和 `y` 坐标以及文本字符串。
- en: 'Here is a quick example:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个快速示例：
- en: '[PRE19]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'You can see in this figure the **Hello World!** message appearing in the center
    of the plot:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在下图中看到**Hello World!**消息出现在图形的中心：
- en: '![](img/4b742924-31ab-44b1-a66d-50cebdb847f6.png)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4b742924-31ab-44b1-a66d-50cebdb847f6.png)'
- en: Font
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字体
- en: 'Here are some of the common font properties adjustable in Matplotlib:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一些常见的可调节字体属性：
- en: '**Font size**: Float or relative size, for example, smaller and x-large'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**字体大小**：浮动或相对大小，例如，smaller和x-large'
- en: '**Font weight**: For example, bold or semibold'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**字体粗细**：例如，bold 或 semibold'
- en: '**Font style**: For example, italic'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**字体样式**：例如，斜体'
- en: '**Font family**: For example, Arial'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**字体家族**：例如，Arial'
- en: '**Rotation**: Angle in degrees; it is vertical or horizontal'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**旋转**：以度为单位的角度；可以是垂直或水平'
- en: Matplotlib now supports unicode and emoji.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: Matplotlib 现在支持 Unicode 和 Emoji。
- en: Mathematical notations
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数学符号
- en: As a plotting tool, mathematical notations are common. We can use the in-built
    mathtext or LaTeX to render mathematical symbols in Matplotlib.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 作为绘图工具，数学符号非常常见。我们可以使用内置的 mathtext 或 LaTeX 在 Matplotlib 中渲染数学符号。
- en: Mathtext
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Mathtext
- en: 'To create a mathtext notation, we precede a string with r, such as `r''$\alpha''`.
    The following is a short code for demo:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建 mathtext 符号，我们可以在字符串前加上 r，例如 `r'$\alpha'`。以下是一个简短的演示代码：
- en: '[PRE20]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Alpha plus beta in the following plot are printed by MathTex:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图中的 Alpha 和 Beta 是通过 MathTex 打印的：
- en: '![](img/f6b487c8-2294-478a-9341-d8eb29f3942c.png)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f6b487c8-2294-478a-9341-d8eb29f3942c.png)'
- en: LaTeX support
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: LaTeX 支持
- en: Matplotlib supports LaTeX, although it renders slower than mathtext; accordingly,
    it allows more flexible text rendering. Here are more details of the LaTeX usage: [https://matplotlib.org/users/usetex.html](https://matplotlib.org/users/usetex.html).
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: Matplotlib 支持 LaTeX，尽管其渲染速度比 mathtext 慢；因此，它允许更灵活的文本渲染。以下是 LaTeX 用法的更多细节：[https://matplotlib.org/users/usetex.html](https://matplotlib.org/users/usetex.html)。
- en: External text renderer
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 外部文本渲染器
- en: If we have LaTeX installed, we can allow the external LaTeX engine to render
    the text elements by `matplotlib.rc('text', usetex='false')`.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们已经安装了 LaTeX，可以通过 `matplotlib.rc('text', usetex='false')` 让外部 LaTeX 引擎渲染文本元素。
- en: Arrows
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 箭头
- en: 'To point out specific features in a plot, we can draw arrows with the function
    `plt.arrow()`. This code illustrates the different available styles of arrow annotations:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 为了突出图表中的特定特征，我们可以使用 `plt.arrow()` 函数绘制箭头。以下代码演示了不同可用的箭头注释样式：
- en: '[PRE21]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'It generates the following figure to list the available arrow shapes for annotation:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 它生成以下图形，列出了可用的箭头形状进行注释：
- en: '![](img/4b2bc6c2-4308-466c-9b59-79a4a647ee02.png)'
  id: totrans-232
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4b2bc6c2-4308-466c-9b59-79a4a647ee02.png)'
- en: Using style sheets
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用样式表
- en: 'We have learned to style our plots step by step so far. For more persistent
    and portable settings, we can apply a predefined global style via the `matplotlib.style` module:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经一步步学习了如何为图表设置样式。为了获得更持久和可移植的设置，我们可以通过 `matplotlib.style` 模块应用预定义的全局样式：
- en: '[PRE22]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Applying a style sheet
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用样式表
- en: We can call `plt.style.use(stylename)` to apply a style. This function takes
    in built-in style sheets, local paths, and URLs.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以调用 `plt.style.use(stylename)` 来应用样式。此函数可以接受内置样式表、本地路径和 URL。
- en: Creating own style sheet
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自己的样式表
- en: You can also create your own style sheet. For the specifications of a Matplotlib
    style sheet file, please refer to the documentation page at: [http://matplotlib.org/users/customizing.html](http://matplotlib.org/users/customizing.html).
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以创建自己的样式表。关于 Matplotlib 样式表文件的规格，请参考文档页面：[http://matplotlib.org/users/customizing.html](http://matplotlib.org/users/customizing.html)。
- en: Resetting to default styles
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重置为默认样式
- en: The effects set by style sheets are sustained through new plots. To reset to
    the default parameters, call `plt.rcdefaults()`.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 样式表设置的效果会在新的图形中持续。如果要恢复默认参数，请调用`plt.rcdefaults()`。
- en: Aesthetics and readability considerations in styling
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 样式设计中的美学与可读性考虑
- en: As visualization is about delivering messages, the more we think from the reader's
    perspective, the more effective it will be. An attractive graphic catches more
    attention. The easier to read a plot is, the more likely are readers to understand
    the message. Here are several basic principles in designing data plots.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 由于可视化是为了传递信息，从读者的角度思考越多，效果就会越好。一个吸引人的图形更容易引起注意。图形越容易阅读，读者越能理解其中的信息。以下是设计数据图形时的一些基本原则。
- en: Suitable font styles
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 合适的字体样式
- en: The hierarchy can use no more than three levels of font family, weight, and
    sizes. Use less fancy font families, Sans Serif font if possible. Make sure the
    font size is large enough to be legible
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 层次结构最多可以使用三种字体系列、粗细和大小的级别。尽量使用不那么花哨的字体系列，若可能，使用无衬线字体。确保字体大小足够大，便于阅读。
- en: '**Serif versus Sans Serif**'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '**衬线与无衬线**'
- en: Serif means decorative edges on alphabets. And sans means without in French.
    As the names imply, Sans Serif fonts are plainer and more simplistic than Serif
    fonts in general. Let's take the most popular examples of default fonts in Microsoft
    Office. Times New Roman used in Office 2007 and before is a Serif font, whereas
    the newer Calibri is a Sans Serif font.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 衬线字体是字母上带有装饰性边缘的字体。无衬线字体在法语中意为“没有衬线”。如其名所示，无衬线字体通常比衬线字体更简洁、朴素。以微软 Office 中最常用的默认字体为例，2007
    及之前版本使用的 Times New Roman 就是衬线字体，而更新版的 Calibri 则是无衬线字体。
- en: Effective use of colors
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 有效使用颜色
- en: Use sharper color contrasts for emphasis and distinction
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用更强烈的颜色对比来突出重点和区分
- en: Use extra colors with discretion, for example, one color only for one data series
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 谨慎使用额外的颜色，例如每个数据系列只用一种颜色
- en: Be friendly for readers with a color weakness; for example, avoid red-green
    combinations
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对色弱的读者友好；例如，避免红绿组合
- en: Keeping it simple
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保持简单
- en: <q>"Less is more. "</q> <q>                                                 
                                –  Andrea del Sarto (The Faultless Painter) by Robert
    Browning</q>
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: <q>"少即是多。"</q> <q>                                                         
                        –  安德烈亚·德尔·萨托（《无瑕画家》） 罗伯特·布朗宁</q>
- en: This quote spells out the basic principle of the preceding suggestions. The
    philosophy of minimalist design inspires much of the most brilliant work, from
    architecture to graphic design. While the use of different colors and styles creates
    distinction and hierarchy as well as adding attractiveness to our graphics, we
    must reduce the fanciness wherever possible. This helps our readers focus on the
    major message, and also helps keep a professional impression for our figures.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 这句话阐明了前面建议的基本原则。极简主义设计哲学激发了许多杰出的作品，无论是建筑还是平面设计。虽然使用不同的颜色和样式能创造出区别性和层次感，同时增加图形的吸引力，但我们必须尽可能减少复杂性。这有助于读者集中注意力于主要信息，同时也帮助我们的图形保持专业的印象。
- en: Summary
  id: totrans-255
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Congratulations! You have now mastered the most commonly used plots and the
    basic methods to customize plots. We are now ready to move on to more advanced
    Matplotlib usage.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你现在已经掌握了最常用的绘图方法以及自定义图形的基本技巧。接下来，我们将进入更高级的 Matplotlib 使用方法。
- en: In the next chapter, we will cover more plot types with the help of third-party
    packages, methods to optimize displays for multiple plots and axes in certain
    scales, as well as showing pixels in images. Stay tuned!
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍更多图形类型，并借助第三方包来优化多图和多个坐标轴的显示，处理特定比例尺下的显示效果，以及显示图像中的像素。敬请期待！
