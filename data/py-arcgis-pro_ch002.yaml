- en: 'Python: The Beginning'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python：入门
- en: Programming with computers is one of the most rewarding and frustrating of human
    endeavors.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 编程与计算机是人类最有意义同时也是最令人沮丧的努力之一。
- en: Those rewards can be in the form of money, as we can see with today’s high-tech
    salaries. I would argue, however, that the most rewarding part of mastering programming
    is to make yourself into a computer power user who can execute both simple and
    complex applications and analyses, written in reusable code, with ease.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这些回报可以以金钱的形式表现出来，正如我们今天看到的高科技薪资。但我认为，掌握编程最有意义的部分是把自己打造成一个能够轻松执行简单和复杂应用程序以及分析的计算机高手，能编写可重复使用的代码。
- en: 'The frustrations will come and go, and it is a good thing: you, like me and
    millions before you, will learn from each mistake (it helps to be a pedant, perhaps,
    but not being one myself I can’t be sure). You will grow and learn with each exercise
    in this book, and by asking the right questions and paying close attention you
    can avoid some of these issues.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 挫折会时有发生，但这是一件好事：你，像我以及无数人在你之前的人，将从每个错误中学习（或许当个吹毛求疵的人有帮助，但我自己并不是这样，所以不能确定）。你将通过本书中的每一个练习不断成长和学习，通过提问和密切关注，你可以避免一些常见问题。
- en: 'If you are an ArcGIS expert or novice, seeking to expand on your skillsets:
    congratulations, you are in the right place. In this book you will learn how to
    take your existing GIS expertise (or interest) and multiply its potential using
    a deceptively simple programming language called Python.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你是ArcGIS专家还是新手，寻求拓展你的技能：恭喜你，你来对地方了。在本书中，你将学习如何利用一种看似简单的编程语言——Python，来提升你现有的GIS专业知识（或兴趣）并放大其潜力。
- en: 'Computer programming is its own vast field that cannot be captured in one chapter,
    of course. In this chapter I will explain the basic knowledge necessary to read,
    write and run Python scripts. We’ll leave the ArcGIS tools for later chapters
    and focus on Python: its beginnings, its current state, how to use it, and importantly,
    what Python is and what it is not.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机编程是一个庞大的领域，当然无法在一章中完全概述。在这一章中，我将解释阅读、编写和运行Python脚本所必需的基本知识。我们将把ArcGIS工具放到后面的章节，专注于Python：它的起源、现状、如何使用它，最重要的是，Python是什么，它又不是什么。
- en: 'We will cover the following topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下主题：
- en: Basics of Python
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python基础
- en: Basics of computer programming
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算机编程基础
- en: Installing and importing modules
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和导入模块
- en: Writing and executing scripts
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写和执行脚本
- en: 'Python: Built Different'
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python：独具一格
- en: Guido Van Rossum, the creator of the Python programming language, was frustrated
    with the state of computer programming in the late 1980s. Programming languages
    were too complex, and at the same time, too loose with their formatting requirements.
    This led to large codebases with complex scripts poorly written and rarely documented.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Python编程语言的创造者Guido Van Rossum在1980年代末期对计算机编程的现状感到沮丧。当时的编程语言过于复杂，同时在格式要求上也过于宽松。这导致了大量的代码库和复杂的脚本，代码质量差且很少有文档记录。
- en: Merely running a simple program could take a long time, as the code would need
    to be type-checked (variables declared correctly and assigned to the correct data
    type) and compiled (converted from high-level code written in text files into
    the assembly language or machine code understood by the CPU).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅运行一个简单的程序可能需要很长时间，因为代码需要进行类型检查（确保变量正确定义并分配给正确的数据类型）和编译（将文本文件中的高级代码转换为CPU能够理解的汇编语言或机器代码）。
- en: As the Dutch programmer completed professional work on the ABC programming language,
    where he had learned much about language design, he decided he wanted to turn
    his grips about the limits of ABC and other languages into a hobby.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名荷兰程序员，他在ABC编程语言的专业工作中学到了很多关于语言设计的知识，完成该项目后，他决定将自己对ABC及其他语言局限性的看法转化为一种兴趣。
- en: With a master’s degree in mathematics and computer science from the University
    of Amsterdam, his hobbies tended towards the computer, but he did have a love
    for Monty Python, the British comedy series. So, he combined his passions and
    created Python, which is now used for all kinds of programmatic solutions. Today
    Python is everywhere, in the internet and appliances and cars and so much more.
    Because of its ubiquity and its simplicity, it has been adopted by the GIS software
    ecosystem as a standard programming tool.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 范·罗苏姆拥有阿姆斯特丹大学数学与计算机科学的硕士学位，他的兴趣偏向计算机，但他也热爱英国喜剧系列《Monty Python》。因此，他将自己的热情结合在一起，创造了Python语言，现在它被广泛应用于各种编程解决方案。如今，Python无处不在，遍及互联网、家电、汽车等多个领域。由于其普及性和简洁性，它已被GIS软件生态系统采纳为标准编程工具。
- en: Why Python is different
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么Python与众不同
- en: 'Because of Van Rossum’s extensive experience with the state of computer languages
    in the 1980s, he was well positioned to create a language that solved many of
    their deficiencies. He added features that he admired from many other languages
    and added a few of his own. Here is an incomplete list of Python features built
    to improve on other languages:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 由于范·罗苏姆在1980年代对计算机语言的广泛经验，他具备了创造一种解决许多语言缺陷的语言的能力。他从许多其他语言中借鉴了他欣赏的特性，并加入了一些自己的创新。以下是Python为改进其他语言所构建的一些特性：
- en: '| **Issue** | **Improvement** | **Python Feature** |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| **问题** | **改进** | **Python特性** |'
- en: '| Memory overrun | Built-in memory management | Garbage collection and memory
    management |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| 内存溢出 | 内建内存管理 | 垃圾回收和内存管理 |'
- en: '| Slow compiler times | One line testing, dynamic typing | Python Interpreter
    |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| 慢编译时间 | 单行测试，动态类型 | Python解释器 |'
- en: '| Unclear error messages | Messages indicating the offending line and affected
    code | Error Traceback |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| 不清晰的错误信息 | 显示指示错误行和受影响代码的消息 | 错误追踪 |'
- en: '| Spaghetti code | Clean importation and modularization | Importation |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| 意大利面式代码 | 清晰的导入和模块化 | 导入 |'
- en: '| Unclear code formatting and spacing making code unreadable | Indentation
    rules and reduced brackets | Forced whitespace |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| 不清晰的代码格式和间距使代码不可读 | 缩进规则和减少括号 | 强制空白 |'
- en: '| Too many ways to do something | There should be only one way: the Pythonic
    way | The Zen of Python |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| 太多方式做同一件事 | 应该只有一种方式：Pythonic的方式 | Python之禅 |'
- en: Python Versions
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Python版本
- en: The original Python version release in 1991 by Van Rossum, Python 1.0 and its
    successors, was eventually superseded by the widely popular Python 2.x. Care was
    taken to ensure that version 2.0 and beyond were backwards-compatible with Python
    1.x. However, for the new Python 3.0 and beyond, backwards compatibility with
    Python 1 and Python 2 was broken.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Python的最初版本于1991年由范·罗苏姆发布，Python 1.0及其后续版本，最终被广泛流行的Python 2.x所取代。发布时，特别注意确保版本2.0及之后版本与Python
    1.x向后兼容。然而，对于新的Python 3.0及之后的版本，与Python 1和Python 2的向后兼容性被打破。
- en: This break has caused a divergence in the Python ecosystem. Some companies chose
    to stick with Python 2.x, which has meant that the “sunset” date or retirement
    date for the older version was extended from 2015 until April 2020\. Now that
    the sunset date has been passed, there is no active work by the **Python Software
    Foundation** (**PSF**) on Python 2.x. Python 3.x development continues and will
    continue into the future, overseen by the PSF.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这一变化导致Python生态系统出现分歧。一些公司选择坚持使用Python 2.x，这意味着旧版本的“退休”日期从2015年延长到2020年4月。现在，随着“退休”日期的到来，**Python软件基金会**（**PSF**）不再对Python
    2.x进行任何积极开发。Python 3.x的开发仍在继续，并将由PSF监督，持续到未来。
- en: Van Rossum served as the Benevolent Dictator for Life of the PSF until he resigned
    the position in 2018.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 范·罗苏姆曾担任PSF（Python Software Foundation）终身慈善独裁者，直到2018年辞去该职务。
- en: 'Check out more about the history of Python: [https://docs.python.org/3/faq/general.html](https://docs.python.org/3/faq/general.html)'
  id: totrans-29
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 了解更多关于Python的历史：[https://docs.python.org/3/faq/general.html](https://docs.python.org/3/faq/general.html)
- en: '![](img/file0.png)Figure 1:Divergence of Python 3 from Python 2'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/file0.png)图1：Python 3与Python 2的分歧'
- en: ArcGIS Python Versions
  id: totrans-31
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: ArcGIS Python版本
- en: Since ArcMap version 9.x, Python has been integrated into the ArcGIS software
    suite. However, ArcGIS Desktop and ArcGIS Pro now both depend on different versions
    of Python.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 自ArcMap 9.x版本以来，Python已经集成到ArcGIS软件套件中。然而，ArcGIS Desktop和ArcGIS Pro现在都依赖于不同版本的Python。
- en: 'ArcGIS Desktop: Python 2.x'
  id: totrans-33
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: ArcGIS Desktop：Python 2.x
- en: ArcGIS Desktop (or ArcMap) version 9.0 and above ships with Python 2.x included.
    The installer for ArcGIS would automatically install Python 2.x and would add
    the `arcpy` module (originally `arcgisscripting`) to the Python path variable,
    making it available for scripting.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: ArcGIS Desktop（或 ArcMap）版本 9.0 及以上自带 Python 2.x。ArcGIS 的安装程序会自动安装 Python 2.x，并将`arcpy`模块（最初是`arcgisscripting`）添加到
    Python 路径变量中，使其可以用于脚本编写。
- en: ArcMap, ArcCatalog, ArcGIS Engine, and ArcGIS Server all depend on `arcpy` and
    the Python 2.x version included when the ArcGIS Desktop or Enterprise software
    is installed.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: ArcMap、ArcCatalog、ArcGIS Engine 和 ArcGIS Server 都依赖于安装 ArcGIS Desktop 或 Enterprise
    软件时随附的 `arcpy` 和 Python 2.x 版本。
- en: 'ArcGIS Pro: Python 3.x'
  id: totrans-36
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: ArcGIS Pro：Python 3.x
- en: ArcGIS Pro, which was designed after the decision to sunset Python 2.0 was announced,
    was divorced from the Python 2.x ecosystem and instead shipped with Python 3.x.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: ArcGIS Pro 是在宣布停用 Python 2.0 后设计的，它与 Python 2.x 生态系统脱钩，改为随附 Python 3.x。
- en: Instead of `arcpy`, ArcGIS Pro uses the ArcGIS API for Python.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 与`arcpy`不同，ArcGIS Pro 使用 ArcGIS API for Python。
- en: Managing both versions
  id: totrans-39
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 管理两个版本
- en: The sunsetting of ArcGIS Desktop has been extended to March 2025, meaning that
    Python 2.7 will be included by Esri until that time despite it being officially
    retired by the Python Software Foundation.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: ArcGIS Desktop 的停用时间已延长至 2025 年 3 月，这意味着尽管 Python 软件基金会已正式停止对 Python 2.7 的支持，Esri
    仍将在此日期之前将 Python 2.7 包含在内。
- en: Because of this, we will learn use virtual environments to manage the versions,
    and you will learn about the PATH and PYTHONPATH environmental variables, which
    control which version of Python is used to execute a script.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将学习使用虚拟环境来管理版本，并且你将了解控制 Python 脚本执行版本的 PATH 和 PYTHONPATH 环境变量。
- en: 'IMAGE CREDIT: [https://media.geeksforgeeks.org/wp-content/uploads/20190502023317/TIMELINE.jpg](https://media.geeksforgeeks.org/wp-content/uploads/20190502023317/TIMELINE.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：[https://media.geeksforgeeks.org/wp-content/uploads/20190502023317/TIMELINE.jpg](https://media.geeksforgeeks.org/wp-content/uploads/20190502023317/TIMELINE.jpg)
- en: What is Python?
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 什么是 Python？
- en: 'In short, Python is an application: `python.exe`. This application is also
    an executable file, meaning it can be run by itself to interpret code, or it can
    be called from other applications to run custom scripts. This standard interoperability
    is part of why it is included in applications such as ArcGIS Pro. When ArcGIS
    is installed, Python is also installed on your computer, along with a series of
    supporting files and folders.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，Python 是一个应用程序：`python.exe`。该应用程序本身也是一个可执行文件，这意味着它可以独立运行来解释代码，或者可以从其他应用程序中调用来运行自定义脚本。这种标准的互操作性是它被包括在
    ArcGIS Pro 等应用程序中的原因之一。安装 ArcGIS 时，Python 也会随之安装在您的计算机上，并带有一系列支持文件和文件夹。
- en: Python includes a large standard library of tools or “modules”. These include
    support for internet requests, advanced math, CSV reading and writing, JSON serialization,
    and many more modules included in the Python core. While these tools are powerful,
    Python was also built to be extensible, meaning that third-party modules can be
    easily added to a Python installation. The ArcGIS Python modules are both good
    examples of extending the capabilities of Python. There are hundreds of thousands
    of others, covering almost any type of programming need, of varying quality.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Python 包含大量的标准库工具或“模块”。这些包括对互联网请求、高级数学、CSV 读写、JSON 序列化等的支持，以及 Python 核心中包含的许多其他模块。尽管这些工具非常强大，但
    Python 也被设计为可扩展的，这意味着可以轻松地将第三方模块添加到 Python 安装中。ArcGIS Python 模块就是扩展 Python 能力的一个很好的例子。还有成千上万的其他模块，涵盖了几乎所有类型的编程需求，质量各异。
- en: Python is written in the programming language C. There are variants of Python
    written in other languages for a variety of technical reasons, but most implementations
    of Python are built on top of C. This means that Python is often expanded through
    modules built on top of C code, usually for speed improvement reasons. A Python
    code “layer” or “wrapper” is put on top of C code to make it work with normal
    Python packages, gaining the simplicity of Python and the processing speed boosts
    of precompiled C code. NumPy and SciPy are examples of this type of module, and
    are included with the ArcGIS installation of Python.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Python 是用编程语言 C 编写的。为了各种技术原因，Python 有一些用其他语言编写的变体，但大多数 Python 实现都是建立在 C 之上的。这意味着
    Python 通常通过构建在 C 代码之上的模块来扩展，通常是为了提高速度。一个 Python 代码“层”或“包装器”被放置在 C 代码之上，使其能够与普通的
    Python 包兼容，从而获得 Python 的简洁性和预编译 C 代码带来的处理速度提升。NumPy 和 SciPy 就是这种模块的例子，并且它们随 ArcGIS
    安装的 Python 一同提供。
- en: Python is free and open software, which is another reason it is packaged with
    so many other software applications for automation purposes. Python can also be
    installed separately, using a free installer from the Python Software Foundation.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Python 是免费的开源软件，这也是它被打包到许多其他软件应用程序中用于自动化目的的原因之一。Python 也可以单独安装，通过 Python 软件基金会提供的免费安装程序。
- en: 'Check out the Python Software Foundation on the internet: [https://www.python.org/psf](https://www.python.org/psf)'
  id: totrans-48
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在互联网上查看 Python 软件基金会：[https://www.python.org/psf](https://www.python.org/psf)
- en: ''
  id: totrans-49
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Download Python versions directly from the PSF: [https://www.python.org/downloads/](https://www.python.org/downloads/)'
  id: totrans-50
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 从 PSF 直接下载 Python 版本：[https://www.python.org/downloads/](https://www.python.org/downloads/)
- en: Where is it installed
  id: totrans-51
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 它安装在哪里？
- en: '![](img/file1.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file1.png)'
- en: On Windows machines, Python is not included by default – it must be installed
    along with ArcGIS or separately using an installer from the Python Software Foundation.
    Once the ArcGIS Installer is run, you will see a folder inside the `C:\ drive`.
    You can set a custom location or use the default.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 机器上，Python 默认不包含——它必须与 ArcGIS 一起安装，或者通过 Python 软件基金会的安装程序单独安装。运行 ArcGIS
    安装程序后，你将在 `C:\ drive` 下看到一个文件夹。你可以设置自定义位置或使用默认位置。
- en: Python Interpreter
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Python 解释器
- en: When you start python.exe by double-clicking on it (see below for multiple other
    ways to run the executable), it starts what is known as the Python Interpreter.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当你通过双击 `python.exe` 启动它时（下面将介绍多种其他运行可执行文件的方法），它将启动所谓的 Python 解释器。
- en: This is a useful interface, allowing you to enter, one line at a time, bits
    of code for testing and confirmation. Once the line is entered, push Enter/Return
    and the code will be executed. This tool helps you both learn coding and test
    code in the same environment.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个有用的接口，允许你一次输入一行代码进行测试和确认。输入完一行后，按 Enter/Return 键，代码将被执行。这个工具帮助你在同一个环境中学习编码和测试代码。
- en: Starting the Interpreter
  id: totrans-57
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 启动解释器
- en: 'Double-clicking on `python.exe` from the folder or starting Python (command
    line) from the Start Menu, will start the interpreter, which allows for one-line
    commands to be executed.:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 双击文件夹中的 `python.exe` 或从开始菜单启动 Python（命令行），将启动解释器，允许执行单行命令：
- en: '![](img/file2.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file2.png)'
- en: 'Python 3 is very similar:'
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Python 3 非常相似：
- en: '![](img/file3.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file3.png)'
- en: What is a Python script?
  id: totrans-62
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 什么是 Python 脚本？
- en: The `python.exe` executable file, along with being a program where code can
    be run, will also execute Python scripts. These scripts are simple text files
    that can be edited by any text editing software. Python scripts are saved with
    the `.py` extension.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`python.exe` 可执行文件不仅是一个可以运行代码的程序，还可以执行 Python 脚本。这些脚本是可以由任何文本编辑软件编辑的简单文本文件。Python
    脚本的文件扩展名为 `.py`。'
- en: When a Python script is “run”, it is passed as the first command line argument
    to the Python executable (`python.exe`). This program will read and then execute
    the code from the top to the bottom as long as it is valid Python and it contains
    no errors. If there is an error encountered, the script will stop and return an
    error message. If there is no error, nothing will be returned unless you have
    added “`print`” statements to return messages from the main loop to the Python
    window as the script is running.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当“运行”一个 Python 脚本时，它会作为第一个命令行参数传递给 Python 可执行文件（`python.exe`）。此程序将从上到下读取并执行代码，只要它是有效的
    Python 代码并且没有错误。如果遇到错误，脚本将停止并返回错误信息。如果没有错误，除非你添加了“`print`”语句来在脚本运行时从主循环返回消息，否则不会返回任何内容。
- en: 'In this example the script is executed by “passing” the script as an argument
    to the executable (python.exe), which is explicitly called with the full folder
    path to the python.exe file to avoid path issues:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，脚本通过“传递”脚本作为参数给可执行文件（`python.exe`）执行，且明确使用完整的文件夹路径调用 `python.exe` 文件，以避免路径问题：
- en: '[PRE0]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In this example the script is executed by “passing” the script as an argument
    to the executable, along with optional parameters that are accepted by the script
    itself before being run:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，脚本通过“传递”脚本作为参数给可执行文件执行，并可选择接受脚本本身在运行前的可选参数：
- en: '[PRE1]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Versions included
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 包含的版本
- en: 'Python comes with two versions of the `python.exe` file. These are the same
    version of Python, to be clear, but each file has a different role. Python.exe
    is the main file, and the other version is pythonw.exe. This file will not open
    an interpreter if double-clicked, as the normal python.exe will. No interpreter
    is available from pythonw.exe, which is the point: it is used to execute scripts
    more “silently” than `python.exe`. Use python.exe for to start the interpreter.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Python 附带了两个版本的 `python.exe` 文件。为了澄清，它们是相同版本的 Python，但每个文件的角色不同。python.exe 是主文件，另一个版本是
    pythonw.exe。双击 pythonw.exe 不会启动解释器，这与正常的 python.exe 不同。pythonw.exe 没有解释器，它的作用是以比
    `python.exe` 更“安静”的方式执行脚本。要启动解释器，请使用 python.exe。
- en: '![](img/file4.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file4.png)'
- en: How to call the executable
  id: totrans-72
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 如何调用可执行文件
- en: 'The Python “executable” (`python.exe`) is accessed to run the Python Interpreter
    or to run a custom Python script. There are many different ways to “call” or start
    the Python executable:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 访问 Python “可执行文件” (`python.exe`) 以运行 Python 解释器或运行自定义 Python 脚本。启动 Python 可执行文件有许多不同的方法：
- en: '![](img/file5.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file5.png)'
- en: Double-click on python.exe
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 双击 python.exe
- en: Starts the Python Interpreter
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动 Python 解释器
- en: Open IDLE, the included integrated development environment (IDE)
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打开 IDLE，随附的集成开发环境（IDE）
- en: Should be accessible in your Start menu on Windows in the ArcGIS folder
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Windows 中的 ArcGIS 文件夹内，你应该能在开始菜单找到它。
- en: Open a CMD terminal and type “python”
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打开 CMD 终端并键入“python”
- en: Only works if the Python executable is in the PATH environment variable
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只有当 Python 可执行文件位于 PATH 环境变量中时才有效
- en: Using a third-party IDE such as PyCharm
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用第三方 IDE，如 PyCharm
- en: Each PyCharm project can have its own virtual environment, and therefore its
    own executable, or it can use the one installed by Esri when ArcGIS is installed.
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个 PyCharm 项目可以有自己的虚拟环境，因此也有自己的可执行文件，或者它可以使用 Esri 在安装 ArcGIS 时安装的那个。
- en: There are a lot of IDEs but PyCharm is the one I recommend for a variety of
    reasons.
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有很多 IDE，但我推荐 PyCharm，原因有很多。
- en: Using a Jupyter Notebook, which we will discuss extensively in this book
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Jupyter Notebook，本书中将对此进行详细讨论。
- en: This requires the installation of Jupyter, which is not included in the standard
    Python installation.
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这需要安装 Jupyter，而 Jupyter 并不包含在标准 Python 安装包中。
- en: Inside ArcGIS Desktop or ArcGIS Pro
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 ArcGIS Desktop 或 ArcGIS Pro 内部
- en: There are menu buttons that allow you to start a Python interpreter window inside
    ArcMap or ArcCatalog or ArcGIS Pro.
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有一些菜单按钮可以让你在 ArcMap、ArcCatalog 或 ArcGIS Pro 内部启动 Python 解释器窗口。
- en: Run code one line at a time or by using the load script command in the right-click
    menu.
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一行一行地运行代码，或通过右键菜单中的加载脚本命令运行代码。
- en: IDLE development environment
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: IDLE 开发环境
- en: '![](img/file6.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file6.png)'
- en: The included IDE called IDLE is a useful environment that comes standard with
    every Python instance. IDLE is useful for the Python Interpreter, but also because
    you can create and execute scripts in this environment easily by opening a new
    script from the File menu, and then using the script’s Run menu to execute the
    script.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 随附的 IDE，称为 IDLE，是一个有用的环境，标准配置每个 Python 实例时都会包含它。IDLE 对于 Python 解释器很有用，但也因为你可以通过从文件菜单打开新脚本，然后使用脚本的运行菜单来轻松创建和执行脚本。
- en: '![](img/file7.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file7.png)'
- en: The Path environment variable
  id: totrans-93
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Path 环境变量
- en: On Windows there is a system environment variable known as the Windows Path
    environment variable. This variable is available to all applications installed
    on the machine. Other programs use it for different purposes, but for Python it
    is used to find all available Python executables and modules.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 上，有一个系统环境变量被称为 Windows Path 环境变量。这个变量对机器上安装的所有应用程序可用。其他程序将其用于不同的目的，但对
    Python 来说，它用于查找所有可用的 Python 可执行文件和模块。
- en: This is important to understand because you may end up with multiple versions
    of Python on your computer one day, or after just one install of ArcGIS Desktop
    or Pro. When
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 理解这一点很重要，因为你有可能在电脑上安装多个 Python 版本，或者只安装一次 ArcGIS Desktop 或 ArcGIS Pro 后便会出现多个版本。
- en: If a script is run in a CMD window using the “`python script.py`” (passing the
    script to Python as an argument), and it contains import statements, then there
    are three things that have to happen.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在 CMD 窗口中使用 "`python script.py`" 命令运行脚本（将脚本作为参数传递给 Python），并且脚本中包含导入语句，那么有三件事必须发生。
- en: First, Windows will look for an executable called python.exe in the Path. If
    it is there, it will then confirm that the script is valid. If it is, then Python
    will run the script and the Path environment variable will be checked to look
    for allowed locations for all modules you are trying to import.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，Windows会在Path中查找名为python.exe的可执行文件。如果找到了，它会确认脚本是否有效。如果有效，Python会运行该脚本，并且会检查Path环境变量，以查找允许导入所有模块的路径。
- en: 'So the Python executable cannot be run by name (instead of file location) until
    the `python.exe` is in the Path. Here is how you edit the Path variable:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，Python可执行文件不能仅通过名称运行（而不是文件位置），直到`python.exe`被添加到Path中。以下是如何编辑Path变量：
- en: 'Open up the **Advanced System Settings** in the **Control Panel**:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 打开**控制面板**中的**高级系统设置**：
- en: '![](img/file8.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file8.png)'
- en: 'Locate and double-click on the Path variable (or press edit when selected):'
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定位并双击Path变量（或者在选中时按编辑）：
- en: '![](img/file9.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file9.png)'
- en: 'Add a new line to the Path environment variable in the interface. If you have
    multiple version of Python and you are not using virtual environments, be sure
    to order the folders in the Path so that the correct version of Python is called
    when you type “`python`” into a CMD line window:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在界面中为Path环境变量添加新的一行。如果你有多个版本的Python，并且没有使用虚拟环境，确保按正确的顺序排列Path中的文件夹，这样当你在CMD窗口中输入“`python`”时，会调用正确版本的Python：
- en: '![](img/file10.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file10.png)'
- en: 'If you are not allowed to edit the Path variable, you can still run Python
    in the command line by referring to it using the whole path to the executable:
    `C:\ArcGIS10.8\Python\python.exe script.py`'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有权限编辑Path变量，仍然可以通过使用可执行文件的完整路径来在命令行中运行Python：`C:\ArcGIS10.8\Python\python.exe
    script.py`
- en: '**The operating system and Python system modules**'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '**操作系统和Python系统模块**'
- en: Two modules (code libraries) built into Python need to be mentioned first. The
    `os` and `sys` modules, also called the operating system module (`os`) and the
    Python system module (`sys`) are used to control Windows system operations and
    Python system operations respectively.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 需要首先提到两个内置的模块（代码库）。`os`模块和`sys`模块，也称为操作系统模块（`os`）和Python系统模块（`sys`），分别用于控制Windows系统操作和Python系统操作。
- en: The OS module
  id: totrans-108
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: OS模块
- en: The `os` module is used for many things, including folder path operations such
    as creating folders, removing folders, checking if a folder or file exists, or
    executing a file using the operating system-associated application used to run
    that file extension. Getting the current directory, copying files, and more is
    possible with this module.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`os`模块用于许多操作，包括文件夹路径操作，如创建文件夹、删除文件夹、检查文件夹或文件是否存在，或者使用操作系统关联的应用程序来执行文件扩展名相关的文件。获取当前目录、复制文件等操作也可以通过这个模块实现。'
- en: 'In this example, a string is passed to the `os.path.exists` method, which is
    Boolean. If it returns False, the folder does not exist, and is then created using
    the `os.mkdir` method:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，一个字符串被传递给`os.path.exists`方法，该方法返回布尔值。如果返回False，表示文件夹不存在，然后使用`os.mkdir`方法创建该文件夹：
- en: '[PRE2]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Read about the os module here: [https://www.geeksforgeeks.org/os-module-python-examples/](https://www.geeksforgeeks.org/os-module-python-examples/)'
  id: totrans-112
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 了解os模块的更多信息，请访问：[https://www.geeksforgeeks.org/os-module-python-examples/](https://www.geeksforgeeks.org/os-module-python-examples/)
- en: The sys module accepts arguments
  id: totrans-113
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: sys模块接受参数
- en: The sys module allows you to accept arguments to a script at runtime, meaning
    when it is executed. This is done by using the `sys.argv` method, which is a list
    containing all arguments made to Python during the executing of the script.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: sys模块允许你在脚本运行时接受参数，也就是说，在脚本执行时。可以通过使用`sys.argv`方法来实现，该方法是一个列表，包含了在执行脚本时传递给Python的所有参数。
- en: '[PRE3]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The System path
  id: totrans-116
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 系统路径
- en: The sys module contains the Python path or system path (system in this case
    means Python). This is a list that Python uses to search for importable modules,
    after accessing the Windows path. If you can’t edit the Windows path as explained
    above (due to permissions usually), you can alter the Python path at runtime using
    the system path.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: sys模块包含Python路径或系统路径（这里的系统指的是Python）。这是一个列表，Python用它来在访问Windows路径后查找可导入的模块。如果你无法像上面解释的那样编辑Windows路径（通常是由于权限问题），你可以在运行时通过系统路径修改Python路径。
- en: 'The `sys.path` list is a part of the `sys` module built into Python:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`sys.path`列表是Python内置的`sys`模块的一部分：'
- en: '![](img/file11.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file11.png)'
- en: 'Read more about the sys module here: [https://www.geeksforgeeks.org/python-sys-module/](https://www.geeksforgeeks.org/python-sys-module/)'
  id: totrans-120
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 了解更多关于sys模块的信息，请访问：[https://www.geeksforgeeks.org/python-sys-module/](https://www.geeksforgeeks.org/python-sys-module/)
- en: Basics of programming
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编程基础
- en: Computer programming varies from language to language in terms of implementation,
    but there are remarkable similarities among these languages in how their internal
    logic works. These programming basics are applicable for all programming languages
    with specific code implementations shown in Python.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机编程在不同语言的实现方式上各不相同，但这些语言在其内部逻辑如何工作的方面有显著的相似之处。这些编程基础适用于所有编程语言，具体的代码实现以Python为例。
- en: Key Concepts
  id: totrans-123
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 关键概念
- en: '| Variables | Names assigned to Python objects of any data type. Variables
    must start with a letter. Underscores are encouraged. |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| 变量 | 分配给Python任何数据类型对象的名称。变量名必须以字母开头。推荐使用下划线。 |'
- en: '[PRE4]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '|'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Iteration | For loops are used to iterate through an iterable data object
    (e.g. a list). While loops are used to loop until a condition has been met |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| 迭代 | For循环用于遍历可迭代数据对象（例如列表）。While循环用于在满足条件之前不断循环。 |'
- en: '[PRE5]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '|'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Conditionals | If/Elif/Else statements that interpret if an object meets
    a condition. |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| 条件语句 | If/Elif/Else语句用于判断一个对象是否满足某个条件。 |'
- en: '[PRE6]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '|'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Zero-based indexing | Data containers are accessed using indexes that start
    with 0\. The indexes are passed to the list or tuple using square brackets [].
    String characters can be access using the same pattern. |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| 从零开始的索引 | 数据容器通过从0开始的索引来访问。索引通过方括号[]传递给列表或元组。字符串字符也可以使用相同的模式访问。 |'
- en: '[PRE7]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '|'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Data Types | Strings are for text. Integers are for whole numbers. Floats
    are for floating point numbers. Data containers such as lists and tuples and dictionaries
    are used extensively to organized data. |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| 数据类型 | 字符串用于文本。整数用于整数。浮动数用于浮动点数字。数据容器，如列表、元组和字典，广泛用于组织数据。 |'
- en: '[PRE8]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '|'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Code Comments | Comments in code are encouraged. They help explain your thinking
    to both other readers and yourself. Comments are created by using the “#” symbol.
    Comments can be on a line by themselves or can be added to the end of a statement
    as anything after the # symbol will be ignored. |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| 代码注释 | 在代码中使用注释是受到鼓励的。注释有助于向其他读者和自己解释你的思路。注释通过使用“#”符号创建。注释可以单独占一行，也可以添加在语句的末尾，因为#符号后面的内容会被忽略。
    |'
- en: '[PRE9]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '|'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Errors | Error messages of many types are built into Python. The error traceback
    show the affected lines of code and the type of error. It’s not perfect. |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| 错误 | Python内置了许多类型的错误信息。错误追踪会显示受影响的代码行和错误类型。它并不完美。 |'
- en: '[PRE10]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '|'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Counters/Enumerators | Using a variable to keep track of the number of loops
    performed by a for loop or while loop is a good idea. Some languages (including
    Python) have some built-in enumeration functionality. Counters are reassigned
    to themselves after being increased.In Python the shortcut “x += y” is the same
    as “x = x +y” |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| 计数器/枚举器 | 使用变量跟踪for循环或while循环执行的次数是一个好主意。一些语言（包括Python）具有一些内置的枚举功能。计数器在增加后会重新赋值给自己。在Python中，快捷方式“x
    += y”与“x = x + y”是等价的。 |'
- en: '[PRE11]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '|'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Variables
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 变量
- en: Variables are used to assign objects to labels or identifiers. They are used
    to keep track of pieces of data, to organize the flow of the data through the
    script, and to help programmers read the script.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 变量用于将对象分配给标签或标识符。它们用于跟踪数据片段、组织数据在脚本中的流动，并帮助程序员阅读脚本。
- en: '[PRE12]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: It is recommended (by me) to use descriptive variables that are neither too
    long nor too short. When variables are too short, they can become confusing to
    read. When they are too long, they can be confusing to write. Using underscores
    to separate words in variables is a common practice.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议（由我）使用描述性的变量，既不太长也不太短。当变量名太短时，阅读时可能会产生混淆。当变量名太长时，写起来可能会令人困惑。在变量中使用下划线分隔单词是一种常见的做法。
- en: Assigned to vs is equal to (value comparison)
  id: totrans-152
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 赋值与等于（值比较）
- en: 'In Python, variables are assigned to an object using the equals sign “=”. This
    means that there is another way to check if a value is equal to another value:
    using a double equals sign “==”.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，变量通过等号“=”赋值给对象。这意味着还有另一种方法可以检查一个值是否等于另一个值：使用双等号“==”。
- en: '[PRE13]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Variable formatting rules
  id: totrans-155
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 变量格式化规则
- en: Variables must start with a letter. They cannot start with a number or other
    symbol, otherwise a Syntax Error will occur. However, numbers and underscores
    can be used in the
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 变量必须以字母开头，不能以数字或其他符号开头，否则会发生语法错误。不过，数字和下划线可以用在变量名中。
- en: '[PRE14]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Read more about variables here: [https://realpython.com/python-variables/](https://realpython.com/python-variables/)'
  id: totrans-158
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 阅读更多关于变量的内容：[https://realpython.com/python-variables/](https://realpython.com/python-variables/)
- en: Iteration
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**迭代**'
- en: 'The core of computer programming is `iteration`: recursively performing the
    same action or analysis or function call or whatever your script is built to process.
    Computers excel at this type of task: they can quickly iterate through a dataset
    to perform whatever action you deem necessary, on each data item in the set.'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机编程的核心是`迭代`：递归地执行相同的操作、分析、函数调用或你所编写脚本要处理的任何任务。计算机擅长这种类型的任务：它们可以快速遍历数据集，在数据集中的每个数据项上执行你认为必要的操作。
- en: For loops
  id: totrans-161
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**for 循环**'
- en: A “for loop” is an iteration implementation that, when presented with a data
    list, will perform an operation on each member of the list.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: “for 循环”是一种迭代实现方式，当提供数据列表时，它会对列表中的每个成员执行某个操作。
- en: 'In this example, a list of integers are assigned to the variable name `data_list`.
    The list is then used to construct a for loop using the format “`for {var} in
    {iterable}`” where {var} is a variable name that is assigned to each object in
    the list, one at a time as the loop progresses. One convention is to use “`item`”
    but it can be any valid variable:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，一个整数列表被赋值给变量名 `data_list`。然后，使用格式“`for {var} in {iterable}`”构建一个 `for`
    循环，其中 `{var}` 是一个变量名，它会被分配给列表中的每个对象，随着循环的进行，逐一处理。一个常见的约定是使用“`item`”，但它可以是任何有效的变量：
- en: '[PRE15]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: While loops
  id: totrans-165
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**while 循环**'
- en: A “while loop” is an iteration implementation that will loop until a specific
    threshold is met. While loops can be dangerous as they can cause an infinite loop
    in a script if the threshold is never met.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: “while 循环”是一种迭代实现方式，直到满足特定条件时才会停止。`while` 循环可能会很危险，因为如果条件永远不满足，它会导致脚本进入无限循环。
- en: In this example, the while loop will run (doing nothing but adding 1 to x until
    it reaches 100, upon which the threshold is met and the while loop will end
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`while` 循环将执行（除了将 1 加到 x 上直到它达到 100，达到阈值时 `while` 循环结束）。
- en: '[PRE16]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Read more about loops here: [https://www.geeksforgeeks.org/loops-in-python/](https://www.geeksforgeeks.org/loops-in-python/)'
  id: totrans-169
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 阅读更多关于循环的内容：[https://www.geeksforgeeks.org/loops-in-python/](https://www.geeksforgeeks.org/loops-in-python/)
- en: Counter and enumerators
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**计数器和枚举器**'
- en: Iteration in for loops or while loops often requires the use of counters (also
    called enumerators) to track loops in an iteration.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `for` 循环或 `while` 循环中的迭代通常需要使用计数器（也称为枚举器）来跟踪循环的迭代次数。
- en: 'For loops have the option to use the enumerate function by passing the iterator
    to the function and using a count variable (can be any valid variable name but
    count is logical) in front of the item variable. The count variable will keep
    track of the loops, starting at index zero:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '`for` 循环可以通过将迭代器传递给 `enumerate` 函数并在项目变量前面使用一个计数变量（可以是任何有效的变量名，但 `count` 是一个逻辑选择）来使用该函数。计数变量会跟踪循环，从索引零开始：'
- en: '[PRE17]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In Python the shortcut “x += y” is used to increase the value of x while keeping
    the same variable name, which is the same as “x = x +y”:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，快捷方式“`x += y`”用于增加 x 的值，同时保持相同的变量名，这与“`x = x + y`”是等效的：
- en: '[PRE18]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Conditionals
  id: totrans-176
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**条件语句**'
- en: 'If statements and Elif statements (short for else if) and Else statements are
    used to create conditions that will be used to evaluate data objects. If statements
    can be by themselves (`elif` and `else` are optional) and is used by declaring
    the keyword if and then the condition the data must meet:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '`if` 语句、`elif` 语句（即 else if 的缩写）和 `else` 语句用于创建条件，用来评估数据对象。`if` 语句可以单独使用（`elif`
    和 `else` 是可选的），通过声明 `if` 关键字，然后写出数据必须满足的条件：'
- en: '[PRE19]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Read more about conditionals here: [https://realpython.com/python-conditional-statements/](https://realpython.com/python-conditional-statements/)'
  id: totrans-179
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 阅读更多关于条件语句的内容：[https://realpython.com/python-conditional-statements/](https://realpython.com/python-conditional-statements/)
- en: If vs Else
  id: totrans-180
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**if 与 else**'
- en: If statements are usually specific to one condition, while else statements are
    used as catch-alls to ensure that any data that goes through the if statement
    will have some way of being dealt with, even if it doesn’t meet the condition
    of the if statement. Elif statements, which are dependent on the if statement
    existing and are also condition specific, are not catch-all statements.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: If 语句通常特定于一个条件，而 Else 语句作为“兜底”语句，确保任何通过 If 语句的数据都有某种方式被处理，即使它不满足 If 语句的条件。Elif
    语句依赖于 If 语句的存在，并且也是条件特定的，不是兜底语句。
- en: List Position (or why programmers count from 0)
  id: totrans-182
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 列表位置（或者为什么程序员从 0 开始计数）
- en: Iteration occurs over lists that contain data. Within the list, these data are
    differentiated by list order or position. Items in a list are retrieved by item
    index, the (current) position of the data in the list.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 迭代发生在包含数据的列表上。在列表中，这些数据通过列表顺序或位置来区分。列表中的项目是通过项目索引来获取的，即数据在列表中的（当前）位置。
- en: Zero-based indexing
  id: totrans-184
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 从零开始的索引
- en: In Python, like most computer programming languages, the first item in a list
    is at index 0, not index 1.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，与大多数计算机编程语言一样，列表中的第一个项位于索引 0，而不是索引 1。
- en: This is a bit confusing to beginners but is a programming standard. It is slightly
    more computationally efficient to retrieve an item in a list that starts with
    0 than a list that starts with 1, and this became the standard in C and its precursors,
    which meant that Python (written in C) uses zero-based indexing.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 这对初学者来说有点混淆，但这是编程的标准。检索从 0 开始的列表中的项比从 1 开始的列表更高效，且这种标准在 C 语言及其前身中形成，这也意味着 Python（用
    C 编写）使用零索引。
- en: Data extraction using index position
  id: totrans-187
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 使用索引位置提取数据
- en: 'This is the basic format of data retrieval from a list. This list of strings
    has an order, and the string “Bill” is the second item, meaning it is at index
    1\. To assign this string to variable, we pass the index into square brackets:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 这是从列表中检索数据的基本格式。这个字符串列表有一个顺序，其中字符串“Bill”是第二个元素，意味着它位于索引 1。要将这个字符串赋值给变量，我们将索引传递给方括号：
- en: '[PRE20]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Data extraction using reverse index position
  id: totrans-190
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 使用反向索引位置提取数据
- en: 'This is the second format of data retrieval from a list. List order can be
    used in reverse, meaning that the indexing starts from the last member of the
    list and counts backwards. Negative numbers are used, starting at -1, which is
    the index of the last member of the list, and -2 is the second-to-last member
    of the list and so on. This means that the “Bill” string is at index -2 when using
    reverse index position, and so -2 must be passed to the list in square brackets:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 这是从列表中提取数据的第二种格式。可以反向使用列表顺序，意味着索引从列表的最后一个成员开始，向后计数。使用负数来表示，从 -1 开始，这是列表最后一个成员的索引，-2
    是倒数第二个成员的索引，依此类推。这意味着在使用反向索引位置时，“Bill”字符串位于索引 -2，因此必须将 -2 传递给列表的方括号：
- en: '[PRE21]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Read more about indexing here: [https://realpython.com/lessons/indexing-and-slicing/](https://realpython.com/lessons/indexing-and-slicing/)'
  id: totrans-193
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在这里阅读更多关于索引的内容：[https://realpython.com/lessons/indexing-and-slicing/](https://realpython.com/lessons/indexing-and-slicing/)
- en: Data Types
  id: totrans-194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据类型
- en: The data type of a variable determines its behavior. For instance, the character
    5 could be an integer type (5) or a float (5.0) or a string (“5”). Each version
    of 5 will have different available tools, such as the `replace` method for strings
    which can replace characters in the string with other characters.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 变量的数据类型决定了它的行为。例如，字符 5 可以是整数类型（5）、浮点类型（5.0）或字符串类型（“5”）。每种版本的 5 都有不同的可用工具，比如字符串的
    `replace` 方法，可以将字符串中的字符替换为其他字符。
- en: Key Data Types
  id: totrans-196
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 关键数据类型
- en: '| **Data Type** | **Python Data Type Object** |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| **数据类型** | **Python 数据类型对象** |'
- en: '| Text data is stored as a String data type | `str` |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| 文本数据以字符串数据类型存储 | `str` |'
- en: '| Numeric data is stored as an Integer or Float or Complex type | `int` , 
    `float` ,  `complex` |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
  zh: '| 数字数据以整数、浮点数或复数类型存储 | `int` ,  `float` ,  `complex` |'
- en: '| Sequence data (lists or arrays) can be stored as a list or tuple. Range is
    a special generator | `list` ,  `tuple` ,  `range` |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
  zh: '| 序列数据（列表或数组）可以存储为列表或元组。Range 是一种特殊的生成器 | `list` ,  `tuple` ,  `range` |'
- en: '| Mapping or key/value pair data types are also known as dictionaries in Python
    | `dict` |'
  id: totrans-201
  prefs: []
  type: TYPE_TB
  zh: '| 映射或键值对数据类型也被称为字典类型 | `dict` |'
- en: '| A Set is a data type that contains distinct, immutable objects | `set` , 
    `frozenset` |'
  id: totrans-202
  prefs: []
  type: TYPE_TB
  zh: '| 集合是一种包含唯一、不变对象的数据类型 | `set` ,  `frozenset` |'
- en: '| Boolean is either True or False, 1 or 0 | `bool` |'
  id: totrans-203
  prefs: []
  type: TYPE_TB
  zh: '| 布尔值是 True 或 False，1 或 0 | `bool` |'
- en: '| Binary data types are used to access data files in binary mode. | `bytes`
    ,  `bytearray` ,  `memoryview` |'
  id: totrans-204
  prefs: []
  type: TYPE_TB
  zh: '| 二进制数据类型用于以二进制模式访问数据文件。 | `bytes`， `bytearray`， `memoryview` |'
- en: Checking the data type
  id: totrans-205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检查数据类型
- en: 'To check the data type of a Python variable, use the `type()` function:'
  id: totrans-206
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 要检查 Python 变量的数据类型，请使用`type()`函数：
- en: '[PRE22]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Strings
  id: totrans-208
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 字符串
- en: All text data is represented as the String data type in Python. These are known
    as **strings**. Common data stored as strings includes names, addresses, or even
    whole blog posts.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 所有文本数据在 Python 中都表示为 String 数据类型。这些称为**字符串**。常见的存储为字符串的数据包括姓名、地址，甚至整篇博客文章。
- en: Strings can be also templated in code to allow for “fill-in-the-blank” strings
    that are not set until the script is run. Strings are technically immutable but
    can be manipulated using built-in Python string tools and the separate String
    module.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串也可以在代码中进行模板化，以允许“填空”的字符串，直到脚本运行时才设定。字符串技术上是不可变的，但可以使用 Python 内置的字符串工具和独立的
    String 模块进行操作。
- en: Key Concepts
  id: totrans-211
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 关键概念
- en: '| Quotation Marks | Single or double quotation marks can be used to designate
    a string, as long as it is the same at the beginning and end. Triple quotation
    marks are used for strings with multiple lines. Quotes *within* a string can be
    indicated using the opposite mark as the one opening and closing the string. |'
  id: totrans-212
  prefs: []
  type: TYPE_TB
  zh: '| 引号 | 单引号或双引号都可以用来表示字符串，只要开头和结尾的引号一致。三重引号用于多行字符串。在字符串*内部*的引号可以使用与开头和结尾不同的引号表示。
    |'
- en: '| String addition | Strings can be “added” together to form a larger string.
    Strings can also be “multiplied” by an integer to repeat the string X times. |'
  id: totrans-213
  prefs: []
  type: TYPE_TB
  zh: '| 字符串相加 | 字符串可以“相加”在一起形成更大的字符串。字符串也可以通过一个整数“乘法”来重复字符串X次。 |'
- en: '| String formatting | String templates or placeholders can be used in code
    and filled in at run-time with the data required. |'
  id: totrans-214
  prefs: []
  type: TYPE_TB
  zh: '| 字符串格式化 | 可以在代码中使用字符串模板或占位符，并在运行时用所需的数据填充。 |'
- en: '| String manipulation | Strings can be manipulated using built-in functionality.
    Characters can be replaced or located. Strings can be split or joined. |'
  id: totrans-215
  prefs: []
  type: TYPE_TB
  zh: '| 字符串操作 | 可以使用内置功能对字符串进行操作。可以替换或定位字符。可以分割或连接字符串。 |'
- en: Quotation marks
  id: totrans-216
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 引号
- en: 'Strings must be surrounded by quotation marks. In Python, these can be either
    single or double quotes, but they must be consistent. If a single quote is used
    to start the string, a single quote must be used to stop it:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串必须被引号包围。在 Python 中，这些引号可以是单引号或双引号，但必须一致。如果单引号用于开始字符串，那么单引号也必须用于结束字符串：
- en: '[PRE23]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Multiple line strings
  id: totrans-219
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 多行字符串
- en: Multiple line strings are created by pair three single quotes or double quotes
    at the beginning of the string, and three at the end.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 多行字符串通过在字符串开头和结尾分别配对三个单引号或双引号来创建。
- en: 'In this example the variable `string_var` is a multiple line string (“`\n`”
    is a Python character representing a new line):'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，变量`string_var`是一个多行字符串（“`\n`”是一个代表新行的 Python 字符）：
- en: '[PRE24]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: String addition (and more)
  id: totrans-223
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 字符串相加（及更多）
- en: Strings can be “added” together to create a new string. This process allows
    you to build strings from smaller strings, which can be useful for populating
    new fields composed of other fields in a data file and other tasks.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串可以“相加”在一起，创建一个新的字符串。这个过程允许你从小字符串构建字符串，这对于填充数据文件中的其他字段组成的新字段或其他任务非常有用。
- en: In this example the string “forest” is assigned to `string_var`. Another string
    is then added to string_var to create a longer string.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，字符串“forest”被赋值给`string_var`。然后，另一个字符串被添加到string_var中，创建一个更长的字符串。
- en: '[PRE25]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: String formatting
  id: totrans-227
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 字符串格式化
- en: Strings in code often make use of “placeholders” for data that will be filled
    in later. This is known as string formatting, and there are multiple ways to perform
    string formatting using Python.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 代码中的字符串经常使用“占位符”来表示稍后将填充的数据。这被称为字符串格式化，并且有多种方式可以使用 Python 执行字符串格式化。
- en: Key Concepts
  id: totrans-229
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 关键概念
- en: '| Format function | All strings have a built-in function called format that
    allows the string to have arguments passed. It will accept all data types and
    format the string from a template. |'
  id: totrans-230
  prefs: []
  type: TYPE_TB
  zh: '| 格式化函数 | 所有字符串都有一个内置的函数叫做format，允许传入参数。它接受所有数据类型，并根据模板格式化字符串。 |'
- en: '| String literals | For Python 3.6+, there is a new tool called string literals,
    which allow you to insert variables into strings directly. An “f” is placed in
    front of the string. |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
  zh: '| 字符串字面量 | 对于 Python 3.6+，有一个新的工具叫做字符串字面量，它允许你直接在字符串中插入变量。在字符串前面加上一个“f”。 |'
- en: '| Data type string operators | An older but still useful tool are the string
    operators, which are used in strings as placeholders for specific data types (either
    strings or floats or integers). |'
  id: totrans-232
  prefs: []
  type: TYPE_TB
  zh: '| 数据类型字符串操作符 | 一个较旧但仍然有用的工具是字符串操作符，它们在字符串中作为占位符，用于表示特定的数据类型（可以是字符串、浮动点数或整数）。
    |'
- en: String format function
  id: totrans-233
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 字符串格式化函数
- en: This method of formatting is the preferred form for Python 3 (it is also available
    in Python 2.7). It allows you to pass the variables to the `format` function (which
    is built into all strings) and to have them fill up placeholders within the string.
    Any data type can be passed to the format function.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 这种格式化方法是Python 3推荐的形式（在Python 2.7中也可用）。它允许你将变量传递给`format`函数（该函数内建于所有字符串中），并让它们填充字符串中的占位符。任何数据类型都可以传递给`format`函数。
- en: 'In this example, the string template is filled with details contained in other
    variables using the `format` string function. The placeholders are filled in the
    order that the variables are listed, so they must be in correct order. The curly
    brackets are the placeholders, and the format function will accept arguments and
    fill in the string:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，字符串模板通过`format`字符串函数填充了其他变量中的详细信息。占位符按照变量列出的顺序进行填充，因此它们必须按照正确的顺序排列。大括号是占位符，`format`函数将接受参数并填充字符串：
- en: '[PRE26]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'In this example, the placeholders are named, and are passed to keyword arguments
    in the format function. The arguments are named and do not need to be in order
    in the format function:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，占位符已命名，并以关键字参数的格式传递给`format`函数。参数是命名的，因此在`format`函数中不需要按照顺序排列：
- en: '[PRE27]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'In this example, the placeholders are numbered, which makes it much easier
    to repeat a string:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，占位符是按编号排列的，这使得重复字符串变得更容易：
- en: '[PRE28]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: String literals
  id: totrans-241
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 字符串字面量
- en: There is a new (as of Python 3.6) method of formatting strings known as formatted
    string literals. By adding an “`f`” before strings, placeholder variables can
    become populated by variables without using the format function.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: Python 3.6（及更高版本）新增了一种字符串格式化方法，称为格式化字符串字面量。通过在字符串前加上“`f`”，占位符变量可以通过变量来填充，而无需使用`format`函数。
- en: 'In this example, the variables are formatted directly into the string literal,
    which has an “`f`” before the string to indicate that it is a string literal:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，变量直接格式化到字符串字面量中，字符串前加上“`f`”以表示它是一个字符串字面量：
- en: '[PRE29]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Read more about string formatting here: [https://realpython.com/python-string-formatting/](https://realpython.com/python-string-formatting/)'
  id: totrans-245
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 了解更多关于字符串格式化的信息，请访问：[https://realpython.com/python-string-formatting/](https://realpython.com/python-string-formatting/)
- en: String manipulation
  id: totrans-246
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 字符串操作
- en: String manipulation is common and lots of tools are built into the String data
    type. These allow you to replace characters in a string or find their index location
    in the string.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串操作是常见的，许多工具已内建于字符串数据类型中。它们允许你替换字符串中的字符或查找字符在字符串中的索引位置。
- en: Find and index are similar methods but find is able to be used in conditional
    statements. If the character is not found in the string, find will return -1,
    while index will return an error.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: find和index是类似的方法，但find可以用于条件语句。如果字符串中找不到字符，find将返回-1，而index将返回错误。
- en: 'The join method is used to join together a list of string data. The split method
    is the opposite: it splits a string into a list based on a supplied character
    or the default empty space.'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: join方法用于将一个字符串数据列表连接在一起。split方法是其反向操作：它根据提供的字符或默认的空格将一个字符串分割成一个列表。
- en: '| **Method** | **Example** |'
  id: totrans-250
  prefs: []
  type: TYPE_TB
  zh: '| **方法** | **示例** |'
- en: '| join |'
  id: totrans-251
  prefs: []
  type: TYPE_TB
  zh: '| join |'
- en: '[PRE30]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '|'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| replace |'
  id: totrans-254
  prefs: []
  type: TYPE_TB
  zh: '| replace |'
- en: '[PRE31]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '|'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| find, rfind |'
  id: totrans-257
  prefs: []
  type: TYPE_TB
  zh: '| find, rfind |'
- en: '[PRE32]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '|'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| upper, lower, title |'
  id: totrans-260
  prefs: []
  type: TYPE_TB
  zh: '| upper, lower, title |'
- en: '[PRE33]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '|'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| index, rindex |'
  id: totrans-263
  prefs: []
  type: TYPE_TB
  zh: '| index, rindex |'
- en: '[PRE34]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '|'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| split |'
  id: totrans-266
  prefs: []
  type: TYPE_TB
  zh: '| split |'
- en: '[PRE35]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '|'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: String indexing
  id: totrans-269
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 字符串索引
- en: String indexing is similar to list indexing, as explained above. Individual
    characters, or groups of characters, can be selected from a string by passing
    the index of the character needed to the string in square brackets.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串索引类似于列表索引，如上所述。可以通过将需要的字符的索引传递给字符串并用方括号括起来，从字符串中选择单个字符或字符组。
- en: 'In this example, the “`d`” from “`readiness`” is accessed by passing the index
    [3] to square brackets next to the string:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，字符串“`readiness`”中的“`d`”是通过将索引[3]传递给字符串旁的方括号来访问的：
- en: '[PRE36]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Groups of characters are selected by passing a start and end index, where the
    end index is the index of the first character you do not want to include:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 通过传递起始和结束索引，可以选择一组字符，其中结束索引是你不想包含的第一个字符的索引：
- en: '[PRE37]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Integers
  id: totrans-275
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 整数
- en: The Integer data type represents whole numbers. It can be used to perform addition,
    subtraction, multiplication, and division (with one caveat as noted below).
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 整数数据类型表示整数。它可以用于执行加法、减法、乘法和除法（但有一个需要注意的例外，见下文）。
- en: '[PRE38]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Convert a string to an integer
  id: totrans-278
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 将字符串转换为整数
- en: 'To convert a string (or a float) to an integer, use the `int` function:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 要将字符串（或浮点数）转换为整数，请使用`int`函数：
- en: '[PRE39]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Integer math issue in Python 2
  id: totrans-281
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Python 2中的整数运算问题
- en: A well-known and well-intentioned design issue in Python 2 is the integer division
    issue. It means that performing division math with integers will result in a (usually)
    unwanted result where no remainder is returned. It is encouraged to convert integers
    into floats before dividing.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: Python 2中一个著名且有意为之的设计问题是整数除法问题。这意味着，使用整数进行除法运算时，结果通常会是没有余数的（通常是）不希望看到的结果。建议在进行除法操作前将整数转换为浮点数。
- en: 'Here is an example of the issue:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 这是该问题的一个示例：
- en: '[PRE40]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'This issue has been fixed in Python 3:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题在Python 3中已被修复：
- en: '[PRE41]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Read more about integers in Python here: [https://realpython.com/python-numbers/](https://realpython.com/python-numbers/)'
  id: totrans-287
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 了解更多关于Python中整数的内容，请访问：[https://realpython.com/python-numbers/](https://realpython.com/python-numbers/)
- en: Floating Numbers
  id: totrans-288
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 浮动数字
- en: Floating point numbers in Python are used to represent real numbers as 64-bit
    double-precision values. Sometimes using binary systems to represent decimal based
    numbers can be a bit odd, so keep an eye out, but in general these will work as
    expected.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，浮点数用于表示实数，作为64位双精度值。有时使用二进制系统表示基于十进制的数字可能有些奇怪，所以需要留意，但通常它们会按预期工作。
- en: '[PRE42]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Convert a string to a float
  id: totrans-291
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 将字符串转换为浮点数
- en: 'To convert a string (or an integer) to a float, use the `float` function:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 要将字符串（或整数）转换为浮点数，请使用`float`函数：
- en: '[PRE43]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Read more about floating point numbers in Python here: [https://www.geeksforgeeks.org/python-float-type-and-its-methods](https://www.geeksforgeeks.org/python-float-type-and-its-methods)'
  id: totrans-294
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 了解更多关于Python中浮点数的信息，请访问：[https://www.geeksforgeeks.org/python-float-type-and-its-methods](https://www.geeksforgeeks.org/python-float-type-and-its-methods)
- en: Conversion between data types
  id: totrans-295
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据类型之间的转换
- en: Conversion between data types is possible in Python using built-in functions
    that are part of the standard library. To start, the type function is useful to
    find the data type of an object. Once identified, the data object can be converted
    from Integer (`int` function) to String (`str` function) to Float (`float` function),
    as long as the character would be valid in that data type.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，数据类型之间的转换是可能的，使用标准库中的内置函数。首先，`type`函数对查找对象的数据类型很有帮助。一旦确定了数据类型，数据对象可以从整数（`int`函数）转换为字符串（`str`函数）再到浮点数（`float`函数），只要该字符在该数据类型中是有效的。
- en: 'In these examples, a character is converted from String to Integer to Float
    to String using the `int` and `str` and `float` functions:'
  id: totrans-297
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在这些示例中，使用`int`、`str`和`float`函数将字符从字符串转换为整数、浮点数再转换回字符串：
- en: '[PRE44]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Data Structures or Containers
  id: totrans-299
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据结构或容器
- en: Data structures, also called data containers and data collections, are special
    data types that can hold, in a retrievable order, any data item of any data types
    (including other data containers). Data containers are used to organized data
    items by index in tuples or lists, or by key:value pair in dictonaries.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 数据结构，也称为数据容器和数据集合，是可以按可检索顺序存储任何数据项的特殊数据类型，这些数据项可以是任何数据类型（包括其他数据容器）。数据容器用于通过索引（在元组或列表中）或键值对（在字典中）组织数据项。
- en: lData retrieval from data containers
  id: totrans-301
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: l从数据容器中检索数据
- en: To get data out of data containers, square brackets are used to pass either
    indexes (lists and tuples) or keys (dictionaries). If there is more than one level
    of data container (i.e. one container contains another), first the data container
    inside is referenced using an index or key inside a first square bracket, and
    then the data inside the container is accessed using a second.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 要从数据容器中提取数据，可以使用方括号来传递索引（列表和元组）或键（字典）。如果有多个级别的数据容器（即一个容器包含另一个容器），首先使用第一个方括号中的索引或键来引用内部的数据容器，然后使用第二个方括号来访问容器中的数据。
- en: '| **Data Container** | **Example** |'
  id: totrans-303
  prefs: []
  type: TYPE_TB
  zh: '| **数据容器** | **示例** |'
- en: '| Tuple |'
  id: totrans-304
  prefs: []
  type: TYPE_TB
  zh: '| 元组 |'
- en: '[PRE45]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '|'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| List |'
  id: totrans-307
  prefs: []
  type: TYPE_TB
  zh: '| 列表 |'
- en: '[PRE46]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '|'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Dictionary |'
  id: totrans-310
  prefs: []
  type: TYPE_TB
  zh: '| 字典 |'
- en: '[PRE47]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '|'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Tuples
  id: totrans-313
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 元组
- en: Tuples are ordered lists that can hold any data type, even in the same tuple.
    They are immutable, meaning they cannot be altered, and data cannot be added to
    or removed from the tuple once it has been created. They have length and the built-in
    `len` function can be used to get the length of the tuple.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 元组是有序的列表，可以存放任何类型的数据，甚至是同一元组中不同类型的数据。元组是不可变的，这意味着它们不能被修改，并且一旦创建，数据不能添加或删除。元组有长度，可以使用内置的
    `len` 函数获取元组的长度。
- en: In Python they are declared by using round brackets () or the `tuple` function.
    Data is accessed using zero-based indexing by passing the index to square brackets
    next to the tuple.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，元组是通过使用圆括号 () 或 `tuple` 函数来声明的。数据通过零基索引访问，方法是将索引传递给紧邻元组的方括号。
- en: 'In this example, a tuple is assigned to the variable name `tuple_var`, and
    data is accessed using indexing:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，一个元组被赋值给变量名 `tuple_var`，并通过索引访问数据：
- en: '[PRE48]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Read more about tuples in Python here: [https://www.geeksforgeeks.org/python-tuples/](https://www.geeksforgeeks.org/python-tuples/)'
  id: totrans-318
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 阅读更多关于元组的信息，点击这里：[https://www.geeksforgeeks.org/python-tuples/](https://www.geeksforgeeks.org/python-tuples/)
- en: Lists
  id: totrans-319
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 列表
- en: Lists (often called Arrays in other programming languages) are data containers
    that can hold any other type of data type, even in the same list, meaning they
    do not have to be only one data type. Lists can be altered after they are created.
    In Python they are declared by using square brackets [] or the `list` function.
    Data is accessed using zero-based indexing by passing the index to square brackets
    next to the list.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 列表（在其他编程语言中通常称为数组）是数据容器，可以存放任何类型的数据，甚至可以在同一个列表中存放不同类型的数据，这意味着它们不必只有一种数据类型。列表在创建后可以被修改。在
    Python 中，可以通过使用方括号 [] 或 `list` 函数来声明列表。数据通过零基索引访问，方法是将索引传递给紧邻列表的方括号。
- en: 'In this example, a list is assigned to the variable name `list_var`, and data
    is accessed using indexing:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，一个列表被赋值给变量名 `list_var`，并通过索引访问数据：
- en: '[PRE49]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Read more about lists in Python here: [https://www.geeksforgeeks.org/python-list/](https://www.geeksforgeeks.org/python-list/)'
  id: totrans-323
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 阅读更多关于列表的信息，点击这里：[https://www.geeksforgeeks.org/python-list/](https://www.geeksforgeeks.org/python-list/)
- en: Convert between lists and tuples
  id: totrans-324
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 在列表和元组之间转换
- en: Lists can be copied into a new tuple object using the `tuple` function. Conversely,
    Tuples can be copied into a list data type using the `list` function. Technically
    this does not convert the original data item, but instead creates a copy of the
    data item in the new data type.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 列表可以通过使用 `tuple` 函数复制到一个新的元组对象中。反过来，元组可以通过 `list` 函数复制到一个列表数据类型中。从技术上讲，这并没有转换原始数据项，而是创建了数据项在新数据类型中的副本。
- en: 'In this example, the list is copied into a tuple data type, and then the tuple
    is copied into a list data type. Note that the brackets change with each new data
    type created:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，列表被复制到一个元组数据类型中，然后元组被复制到一个列表数据类型中。注意，每创建一个新数据类型，方括号会发生变化：
- en: '[PRE50]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: List operations for both tuples and lists
  id: totrans-328
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 列表和元组的操作
- en: Lists and tuples can be iterated using for loops. They can both be “sliced”
    as well, creating a subset of the list or tuple that will be operated on for the
    for loop or other operation.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 列表和元组都可以通过 `for` 循环进行迭代。它们也可以被“切片”，从而创建列表或元组的一个子集，该子集将用于 `for` 循环或其他操作。
- en: Slicing
  id: totrans-330
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 切片
- en: Slicing a list or tuple will create a new list or tuple. The slice is created
    by passing indexes to the list or tuple in square brackets, separated by a colon.
    The first index is the start index, and it can be ignored if it is index 0 (i.e.
    the beginning of the original list). The second index is the index of the first
    value that you do NOT want to include (it can be blank if it the rest of the original
    list).
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 对列表或元组进行切片会创建一个新的列表或元组。切片是通过将索引传递给列表或元组，方括号中用冒号分隔的方式创建的。第一个索引是起始索引，如果是索引 0（即原始列表的开始），可以忽略不写。第二个索引是你**不**想包含的第一个值的索引（如果是原始列表的其余部分，可以为空）。
- en: '[PRE51]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'In this example we see a list with four data items sliced to only include the
    last two items. The first index is the index of the first data item we want (the
    string “`right”`). The last index is blank:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们看到一个包含四个数据项的列表，通过切片操作仅包含最后两个项。第一个索引是我们想要的第一个数据项的索引（字符串 "`right`"）。最后一个索引为空：
- en: '[PRE52]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: List operations for only lists
  id: totrans-335
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 仅限列表的操作
- en: A list can be appended (one data item added) or extended (a list or tuple of
    data items are all added to the main list). The list order can be reversed or
    sorted. Built-in functions allow for the calculation of the maximum or minimum
    value of a list or even the sum of a list (given the data type of the items in
    the list is correct).
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 列表可以通过 `append` 方法添加单个数据项，或者通过 `extend` 方法扩展（将一个列表或元组中的所有数据项添加到主列表）。列表顺序可以被反转或排序。内建函数允许计算列表的最大值或最小值，甚至是列表的总和（前提是列表中数据项的类型正确）。
- en: Sets
  id: totrans-337
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 集合
- en: Sets represent a collection of distinct objects. In Python, sets are unordered,
    no duplicates are allowed, and all data items inside a set must be immutable.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 集合表示一组独特的对象。在 Python 中，集合是无序的，不允许重复，并且集合中的所有数据项必须是不可变的。
- en: Set operations
  id: totrans-339
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 集合操作
- en: 'Sets are especially useful for getting all distinct members of a list. They
    cannot be accessed using indexing (they are unordered) but they can be iterated:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 集合特别适用于获取列表中所有不同的成员。它们不能通过索引访问（因为是无序的），但是可以进行迭代：
- en: '[PRE53]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Dictionaries
  id: totrans-342
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 字典
- en: Dictionaries are key:value stores, mean they are data containers that use unordered
    key and value pairs to organize data. Keys are used as reference points for organization
    and retrieval. When a key is supplied to a dictionary in square brackets, the
    value is returned.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 字典是键值对存储，意味着它们是使用无序的键值对来组织数据的数据容器。键被用作组织和检索的参考点。当通过方括号提供键时，会返回对应的值。
- en: '[PRE54]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Read more about dictionaries in Python here: [https://www.geeksforgeeks.org/python-dictionary/](https://www.geeksforgeeks.org/python-dictionary/)'
  id: totrans-345
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在 Python 中阅读更多关于字典的内容：[https://www.geeksforgeeks.org/python-dictionary/](https://www.geeksforgeeks.org/python-dictionary/)
- en: Keys and values
  id: totrans-346
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 键和值
- en: Keys can be any immutable data type (meaning lists cannot be used as keys, but
    strings and integers and floats and tuples can be used as keys. Values can be
    any type of data, including other dictionaries.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 键可以是任何不可变的数据类型（这意味着列表不能用作键，但字符串、整数、浮点数和元组可以用作键）。值可以是任何类型的数据，包括其他字典。
- en: All keys in a dictionary can be accessed as a list using the dictionary `keys`
    function. In Python 2.x this is a list. In Python 3.x it is a generator.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用字典的 `keys` 函数将字典中的所有键作为列表进行访问。在 Python 2.x 中，这是一个列表；在 Python 3.x 中，这是一个生成器。
- en: All values in a dictionary can be accessed as a list using the dictionary values
    function. In Python 2.x this is a list. In Python 3.x it is a generator.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用字典的 `values` 函数将字典中的所有值作为列表进行访问。在 Python 2.x 中，这是一个列表；在 Python 3.x 中，这是一个生成器。
- en: Functions
  id: totrans-350
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 函数
- en: Functions are sub routines defined by code. When “called” or run, functions
    will do something (or nothing if written that way). Functions often accept parameters,
    and these can be required or optional.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 函数是由代码定义的子程序。当“调用”或运行时，函数会执行某些操作（如果写成这样的话，也可以什么都不做）。函数通常接受参数，且这些参数可以是必需的或可选的。
- en: Functions make it easy to perform the same action over and over without writing
    the same code over and over. This makes code cleaner, shorter and smarter. They
    are a good idea and should be used often.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 函数使得反复执行相同的操作变得容易，而无需反复编写相同的代码。这使得代码更加简洁、短小且智能。它们是一个好主意，应该经常使用。
- en: 'Read more about functions here: [https://realpython.com/defining-your-own-python-function/](https://realpython.com/defining-your-own-python-function/)'
  id: totrans-353
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在这里阅读更多关于函数的内容：[https://realpython.com/defining-your-own-python-function/](https://realpython.com/defining-your-own-python-function/)
- en: Def keyword
  id: totrans-354
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '`def` 关键字'
- en: Functions are defined using the “`def`” keyword, which is short for “define
    function”. The keyword is written, and then the name of the function and round
    brackets (), into which expected parameters can be defined.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 函数使用 `def` 关键字定义，`def` 是“定义函数”的缩写。编写该关键字后，紧接着是函数名和圆括号 `()`，其中可以定义期望的参数。
- en: Return statement
  id: totrans-356
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 返回语句
- en: Functions allow for data to be returned from the subroutine to the main loop
    using `return` statements. These allow the user to calculate a value or perform
    some action in the function, and then return back a value to the main loop.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 函数允许通过 `return` 语句将数据从子程序返回到主循环。这些语句使得用户可以在函数中计算一个值或执行某些操作，然后将该值返回给主循环。
- en: Parameters
  id: totrans-358
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 参数
- en: Parameters or arguments are values expected by functions and supplied by the
    code at runtime.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 参数或论据是函数期望的值，并由代码在运行时提供。
- en: Namespaces
  id: totrans-360
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 命名空间
- en: 'In Python, there is a concept called namespaces. These are refined into two
    types of namespaces: global and local.'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，有一个叫做命名空间的概念。这些命名空间细分为两种类型：全局命名空间和局部命名空间。
- en: All variables defined in the main part of a script (outside of any functions)
    are considered to be in the global namespace. Within the function, variables have
    a different “namespace”, meaning that variables inside a function are in a `local`
    `namespace` and are not the same as variables in the main script, which are in
    the `global` `namespace`. If a variable name inside a function is the same as
    one outside of the function, changing values inside the function (in the local
    namespace) will not affect the variable outside the function (in the global namespace)
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本的主部分（函数外）中定义的所有变量都被认为是在全局命名空间中。在函数内部，变量有不同的“命名空间”，这意味着函数内部的变量位于`局部` `命名空间`中，它们与主脚本中的全局变量不同。如果函数内的变量名与函数外的变量名相同，改变函数内的值（在局部命名空间中）不会影响函数外的变量（在全局命名空间中）。
- en: Function Examples
  id: totrans-363
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 函数示例
- en: 'In this example, a function is defined and written to return “hello world”
    every time it is called. There are no parameters, but the `return` keyword is
    used:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，定义了一个函数，每次调用时返回“hello world”。没有参数，但使用了`return`关键字：
- en: '[PRE55]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'In this example, an expected parameter is defined in the brackets. When called,
    this value is supplied and the function then returns the value from the local
    namespace back to the global namespace in the main loop:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，一个预期的参数在括号中定义。调用时，提供该值，函数会将局部命名空间中的值返回到主循环中的全局命名空间：
- en: '[PRE56]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'In this example an expected parameter has a default value assigned, meaning
    it only has to be supplied if the function uses a non-default parameter:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，一个预期的参数有一个默认值，这意味着只有在函数使用非默认参数时才需要提供该参数：
- en: '[PRE57]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Doc strings
  id: totrans-370
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 文档字符串
- en: Functions allow for a string after the definition line that is used to declare
    the purpose of the function for documentation purposes.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 函数允许在定义行后添加一个字符串，用于声明该函数的用途，以便于文档化。
- en: '[PRE58]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Classes
  id: totrans-373
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 类
- en: Classes are special blocks of code that organize multiple variables and functions
    into an object with its own methods and functions. Classes make it easy to create
    code tools that can reference the same internal data lists and functions. The
    internal functions and variables are able to communicate across the class, so
    that variables defined in one part of the class are available in another.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 类是组织多个变量和函数的特殊代码块，它们将这些内容整合成一个具有自身方法和函数的对象。类使得创建可以引用相同内部数据列表和函数的代码工具变得容易。类内部的函数和变量可以相互通信，从而使得在类的某一部分定义的变量可以在另一部分中使用。
- en: Classes use the idea of “self” to allow for the different parts of the class
    to communicate. By introducing self as a parameter into each function inside a
    class, the data can be called.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 类使用“self”这一概念来允许类的不同部分进行通信。通过将self作为参数引入类中的每个函数，数据可以被调用。
- en: Classes are called or “instantiated” to create a class object. This means the
    class definition is kind of like a factory for that class, and when you want one
    of those class objects, you call the class type and pass the correct parameters
    if required.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 类是通过“实例化”来创建类对象的。这意味着类定义有点像该类的工厂，当你需要其中一个类对象时，你调用类类型并传递正确的参数（如果需要）。
- en: '[PRE59]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Read more about classes here: [https://www.geeksforgeeks.org/python-classes-and-objects/](https://www.geeksforgeeks.org/python-classes-and-objects/)'
  id: totrans-378
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 阅读更多关于类的信息：[https://www.geeksforgeeks.org/python-classes-and-objects/](https://www.geeksforgeeks.org/python-classes-and-objects/)
- en: Installing and importing modules
  id: totrans-379
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装和导入模块
- en: 'To extend the capabilities of the included standard Python library of modules,
    Python was built to be extensible. Third-party modules are downloaded in some
    format from a provider (often PyPI, the Python Package Index, where most are held)
    using either the built-in `pip` program or another method. For us modules such
    as `arcpy` and the ArcGIS API for Python are perfect examples: they extend the
    capabilities of Python to be able to control the tools that are available within
    ArcGIS Desktop or Pro respectively.'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 为了扩展内置标准Python库的功能，Python被设计成可扩展的。第三方模块通常以某种格式从提供者（通常是PyPI，即Python包索引，大部分模块都托管在此）下载，使用内置的`pip`程序或其他方法。像`arcpy`和ArcGIS
    Python API这样的模块就是很好的例子：它们扩展了Python的功能，使得可以控制ArcGIS Desktop或Pro中可用的工具。
- en: Using pip
  id: totrans-381
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 pip
- en: To make Python module installation easier, Python is now installed with a program
    called pip. This name is an recursive acronym which stands for Pip Installs Programs.
    It simplifies installation by allowing for one line command line calls both locates
    the requested module on an online repository and runs the installation commands.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化 Python 模块的安装，现在 Python 附带了一个名为 pip 的程序。这个名字是一个递归首字母缩写，代表 Pip Installs Programs。它通过允许一行命令同时定位请求的模块并执行安装命令，简化了安装过程。
- en: Pip connects to the Python Package Index (or PyPI). Stored on this repository
    are hundreds of thousands of free modules written by other developers. It is worth
    checking the license of the module to confirm that it will allow for your use
    of its code.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: pip 连接到 Python 包索引（或 PyPI）。在这个仓库中存储了由其他开发者编写的成千上万的免费模块。值得检查模块的许可证，确认它是否允许你使用其代码。
- en: 'Pip lives in the Scripts folder, where lots of executable files are stored:'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: pip 位于 Scripts 文件夹中，那里存放着许多可执行文件：
- en: '![](img/file12.png)'
  id: totrans-385
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file12.png)'
- en: Installing modules
  id: totrans-386
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装模块
- en: We will cover the
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将介绍
- en: The setup.py file
  id: totrans-388
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: setup.py 文件
- en: Often Python 2.x and sometimes in Python 3.x a module is includes a “`setup.py`”
    file. This file is not run by `pip`; instead, it is run by Python itself.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 2.x 及有时在 Python 3.x 中，一个模块通常会包含一个 “`setup.py`” 文件。这个文件不是由 `pip` 运行的，而是由
    Python 本身运行。
- en: 'Usually, a module will have a downloadable `zip` file that should be copied
    to the `/sites/packages` folder. This should be unzipped, and then the Python
    executable should be used to run the `setup.py` file using the `install` command:
    `python setup.py install`'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，一个模块会有一个可下载的 `zip` 文件，该文件应复制到 `/sites/packages` 文件夹中。然后解压缩，并使用 Python 可执行文件运行
    `setup.py` 文件，通过 `install` 命令进行安装：`python setup.py install`
- en: Installing in virtual environments
  id: totrans-391
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在虚拟环境中安装
- en: Virtual environments are a bit of an odd concept at first, but they are extremely
    useful when programming in Python. Because you will probably have two different
    Python versions installed on your computer if you have ArcGIS Desktop and ArcGIS
    Pro, it is convenient to have these versions located in a virtual environment.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟环境刚开始可能是一个有点奇怪的概念，但在 Python 编程中非常有用。因为如果你安装了 ArcGIS Desktop 和 ArcGIS Pro，可能会有两个不同的
    Python 版本在你的电脑上，因此将这些版本放在虚拟环境中会非常方便。
- en: The core idea is to use one of the Python virtual environment modules to create
    a copy of your preferred Python version, which is then isolated from the rest
    of the Python versions on your machine. This avoids path issues when calling modules,
    allowing you to have more than one version of these important modules on the same
    computer.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 核心思路是使用 Python 虚拟环境模块中的一个，创建你所需的 Python 版本副本，然后将其与机器上其他 Python 版本隔离。这避免了在调用模块时出现路径问题，允许你在同一台计算机上拥有多个版本的这些重要模块。
- en: 'Here are a few of the Python virtual environment modules:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些 Python 虚拟环境模块：
- en: '| **Name** | **Description** | **Example virtual environment creation** |'
  id: totrans-395
  prefs: []
  type: TYPE_TB
  zh: '| **名称** | **描述** | **示例虚拟环境创建** |'
- en: '| `venv` | Built into Python 3.3+ | `python3 -m venv` |'
  id: totrans-396
  prefs: []
  type: TYPE_TB
  zh: '| `venv` | 内置于 Python 3.3+ | `python3 -m venv` |'
- en: '| `virtualenv` | Most be installed separately. It is very useful and my personal
    favorite. |'
  id: totrans-397
  prefs: []
  type: TYPE_TB
  zh: '| `virtualenv` | 必须单独安装。它非常有用，也是我个人最喜欢的。 |'
- en: '[PRE60]'
  id: totrans-398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '|'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `pyenv` | Used to isolate Python versions for testing purposes. Must be installed
    separately. |'
  id: totrans-400
  prefs: []
  type: TYPE_TB
  zh: '| `pyenv` | 用于隔离 Python 版本以进行测试。必须单独安装。 |'
- en: '[PRE61]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '|'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `Conda` /Anaconda | Used often in academic and scientific environments. Must
    be installed separately. |'
  id: totrans-403
  prefs: []
  type: TYPE_TB
  zh: '| `Conda` /Anaconda | 在学术和科研环境中使用频繁。必须单独安装。 |'
- en: '[PRE62]'
  id: totrans-404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '|'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: 'Read more about virtual environments here: [https://towardsdatascience.com/python-environment-101-1d68bda3094d](https://towardsdatascience.com/python-environment-101-1d68bda3094d)'
  id: totrans-406
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 了解更多关于虚拟环境的内容，请访问：[https://towardsdatascience.com/python-environment-101-1d68bda3094d](https://towardsdatascience.com/python-environment-101-1d68bda3094d)
- en: Importing modules
  id: totrans-407
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 导入模块
- en: To access the wide number of modules in the Python standard library, as well
    as third-party modules such as `arcpy`, we need to be able to import these modules
    in our script (or in the interpreter).
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 为了访问 Python 标准库中的大量模块，以及第三方模块，如 `arcpy`，我们需要能够在脚本（或解释器）中导入这些模块。
- en: To do this you will use import statements. These declare the module or submodules
    (smaller components of the module) that you will use in the script, and as long
    as the modules are in the `/sites/packages` folder in your Python installation,
    or in the PATH (as `arcpy` is after its been installed).
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，你将使用导入语句。这些语句声明你将在脚本中使用的模块或子模块（模块的较小组成部分），只要这些模块在你安装的 Python 的`/sites/packages`文件夹中，或者在
    PATH 中（就像`arcpy`在安装后一样）。
- en: '[PRE63]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Three ways to import
  id: totrans-411
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 导入模块的三种方式
- en: There are three different and related ways to import modules. These modules,
    from either the standard library or from third-parties, are all imported the same
    in a script.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种不同且相关的方式可以导入模块。这些模块，无论是来自标准库还是第三方库，在脚本中的导入方式都是相同的。
- en: 'Method 1: import the whole module'
  id: totrans-413
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 方法 1：导入整个模块
- en: 'This is the simplest way to import a module, by importing its top-level object.
    Its sub-methods are accessed using dot notation (e.g. `csv.Reader`, a method used
    to read CSV files):'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 这是导入模块的最简单方式，通过导入它的顶级对象。其子方法通过点符号访问（例如`csv.Reader`，一个用于读取CSV文件的方法）：
- en: '[PRE64]'
  id: totrans-415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Method 2: import a sub module'
  id: totrans-416
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 方法 2：导入子模块
- en: 'Instead of importing a top-level object, you can import only the module or
    method you need, using the “`from X import Y`” format:'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用“`from X import Y`”的格式，只导入你需要的模块或方法，而不是导入顶级对象：
- en: '[PRE65]'
  id: totrans-418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Method 3: import all sub modules'
  id: totrans-419
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 方法 3：导入所有子模块
- en: 'Instead of importing one sub-object, you can import all the modules or methods,
    using the “`from X import *`” format:'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用“`from X import *`”的格式导入所有模块或方法，而不是只导入一个子对象：
- en: '[PRE66]'
  id: totrans-421
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Read more about importing modules here: [https://realpython.com/python-import/](https://realpython.com/python-import/)'
  id: totrans-422
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 阅读更多关于导入模块的内容：[https://realpython.com/python-import/](https://realpython.com/python-import/)
- en: Importing custom code
  id: totrans-423
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 导入自定义代码
- en: 'Modules don’t have to just come from “third-parties”: they can come from you
    as well. With the use of the special `__init__.py` file, you can convert a normal
    folder into an importable module'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 模块不一定只是来自“第三方”：它们也可以来自你自己。通过使用特殊的`__init__.py`文件，你可以将普通文件夹转换为可导入的模块
- en: The __init__.py file
  id: totrans-425
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`__init__.py` 文件'
- en: This special file, which can contain code but mostly is just an empty file,
    indicates to Python that a folder is a module that can be imported into a script.
    The file itself is just a text file with a `.py` extension and the name `__init__.py`
    (that’s two underscores on each side), which is placed inside a folder. As long
    as the folder with the `__init__.py` is either next to the script or in the Python
    Path (e.g. in the site-packages folder), the code inside the folder can be imported.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 这个特殊的文件可以包含代码，但通常只是一个空文件，它告诉 Python 一个文件夹是一个可以导入到脚本中的模块。该文件本身只是一个带有`.py`扩展名的文本文件，名为`__init__.py`（两边各有两个下划线），并放置在文件夹内。只要包含`__init__.py`的文件夹位于脚本旁边或在
    Python 路径中（例如在 site-packages 文件夹中），文件夹中的代码就可以被导入。
- en: Example custom module
  id: totrans-427
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例自定义模块
- en: 'In this example, we see some code in a script called example_module.py:'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们看到在名为`example_module.py`的脚本中的一些代码：
- en: '[PRE67]'
  id: totrans-429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '![](img/file13.png)'
  id: totrans-430
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file13.png)'
- en: 'Create a folder called `mod_test`. Copy this script into the folder. Then,
    create an empty text file called `__init__.py`:'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`mod_test`的文件夹。将此脚本复制到该文件夹中。然后，创建一个名为`__init__.py`的空文本文件：
- en: '![](img/file14.png)'
  id: totrans-432
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file14.png)'
- en: Import your module
  id: totrans-433
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 导入你的模块
- en: 'Create a new script next to the `mod_test` folder. Call it “`module_import.py`”:'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 在`mod_test`文件夹旁边创建一个新脚本，命名为“`module_import.py`”：
- en: '![](img/file15.png)'
  id: totrans-435
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file15.png)'
- en: 'Inside the script you will import the function “`test_function`” from the `example_module`
    script in the `mod_test` folder using the format below:'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 在脚本内，你将使用下面的格式从`mod_test`文件夹中的`example_module`脚本中导入“`test_function`”函数：
- en: '![](img/file16.png)'
  id: totrans-437
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file16.png)'
- en: Scripts inside the module are accessed using dot notation (e.g. `mod_test.example_module`).
    The functions and classes inside the script called `example_module.py` are able
    to be imported by name.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 模块内的脚本可以通过点符号访问（例如`mod_test.example_module`）。在名为`example_module.py`的脚本中的函数和类可以通过名称进行导入。
- en: Because the module is sitting next to the script that is importing the function,
    this import statement will work. But if you move your script and don’t copy the
    module to somewhere that is on the Python Path, it won’t be a successful import
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 因为模块与导入函数的脚本位于同一目录，所以这个导入语句会正常工作。但如果你移动了脚本，并且没有将模块复制到 Python 路径中的某个位置，那么这个导入就不会成功。
- en: That is because the way import statements work is based on the Python Path.
    This is a list of folder locations that Python will look for the module that you
    are requesting. By default, the first location is the local folder, meaning the
    folder containing your script. The next location is the site-packages folder.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为导入语句的工作方式是基于 Python 路径的。Python 会根据这个路径列表查找你请求的模块。默认情况下，第一个位置是本地文件夹，即包含你脚本的文件夹。下一个位置是
    site-packages 文件夹。
- en: The site-packages folder
  id: totrans-441
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: site-packages 文件夹
- en: Most modules are installed in a folder inside the Python folder. This is called
    the site-packages folder and it sits at `*/Lib/sites-packages`.
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数模块都安装在 Python 文件夹中的一个子文件夹内，这个文件夹叫做 site-packages 文件夹，它位于 `*/Lib/sites-packages`。
- en: To make your module available to for import without needing it to be next to
    your script, put your module folder in the site-packages folder. When you run
    “`from mod_test.example_module import test_function`” it will locate the module
    called mod_test in the sites packages folder.
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 要使你的模块可以导入，而无需将其与脚本放在同一目录下，请将模块文件夹放入 site-packages 文件夹。当你运行 "`from mod_test.example_module
    import test_function`" 时，它将定位到位于 site-packages 文件夹中的名为 mod_test 的模块。
- en: '![](img/file17.png)'
  id: totrans-444
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file17.png)'
- en: Basic style tips for writing scripts
  id: totrans-445
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写脚本的基本风格建议
- en: To make clean, readable code, it is encouraged to follow these basic tips about
    how the code should be written and organized. The major rule enforced by Python
    is the required indentation, which is intended to make the code easier to read
    and write.
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 为了编写干净、可读的代码，建议遵循一些关于如何编写和组织代码的基本建议。Python 强制执行的主要规则是要求缩进，这旨在让代码更容易阅读和编写。
- en: 'Read more about Python code style here: [https://realpython.com/python-pep8/](https://realpython.com/python-pep8/)'
  id: totrans-447
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 阅读更多关于 Python 代码风格的内容： [https://realpython.com/python-pep8/](https://realpython.com/python-pep8/)
- en: Indentation
  id: totrans-448
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 缩进
- en: Python code has strict indentation rules that are enforced by all IDEs. These
    rules relate to functions and loops especially.
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: Python 代码有严格的缩进规则，所有 IDE 都会强制执行这些规则。这些规则尤其与函数和循环相关。
- en: As a standard, 4 spaces are used after a function is declared or a loop is created.
    This is just a standard, as it could be only one space, but that indentation level
    becomes important when scripts get big and it helps to have 4 spaces for all indented
    lines so that they can be more easily read.
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 按照标准，函数声明或创建循环后使用 4 个空格。这只是一个标准，虽然可以使用一个空格，但当脚本变得庞大时，保持 4 个空格的缩进对于提高可读性非常有帮助。
- en: It is encouraged to not mix tabs and spaces when indenting.
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 强烈建议在缩进时不要混用制表符和空格。
- en: 'Read more about indentation here: [https://www.python.org/dev/peps/pep-0008/
    - indentation](https://www.python.org/dev/peps/pep-0008/)'
  id: totrans-452
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 阅读更多关于缩进的内容： [https://www.python.org/dev/peps/pep-0008/ - 缩进](https://www.python.org/dev/peps/pep-0008/)
- en: Add a comment at the top with script details
  id: totrans-453
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在顶部添加包含脚本细节的注释
- en: 'This is an optional but recommended way to start your scripts: write a comment
    at the top with your name, the date, and some quick explanation about what the
    script is supposed to do. This is especially nice when other people have to read
    your code.'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个可选但推荐的方式来开始你的脚本：在顶部写一个注释，包含你的名字、日期和脚本功能的简短说明。当其他人需要阅读你的代码时，这特别有用。
- en: Add lots of other comments throughout the script as well, to make sure you know
    what is happening throughout the script.
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 在脚本中添加更多注释，以确保你知道脚本中的每一部分发生了什么。
- en: Follow with Import statements
  id: totrans-456
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 紧接着是导入语句
- en: It is encouraged but not required to put the import statements at or near the
    top of the script. Imports must happen before the module objects are called in
    the script, but the import statements can be placed anywhere. It is best to put
    them at the top so that people reading the script can understand what is being
    imported.
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 强烈建议但并非要求将导入语句放在脚本的顶部或靠近顶部。导入必须在调用模块对象之前发生，但导入语句可以放在任何地方。最好将它们放在顶部，这样阅读脚本的人可以很容易理解导入了哪些内容。
- en: Define global variables
  id: totrans-458
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义全局变量
- en: After the import statements, define the necessary variables that will be used
    in this script. Sometimes it is necessary to define variables later in the script
    but it is best to put major variables near the top.
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 在导入语句之后，定义脚本中需要用到的变量。有时需要在脚本的后面定义变量，但最好将重要的变量放在顶部。
- en: Define functions
  id: totrans-460
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义函数
- en: By placing function definitions below the global variables, it is easy to read
    and understand what the functions do when reading them. It is sometimes hard to
    find a function that is called in another part of the script if the function is
    not in a known location in the script.
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将函数定义放在全局变量下方，在阅读时更容易理解函数的作用。如果函数不在脚本中的已知位置，有时很难找到在脚本其他部分调用的函数。
- en: Include print statements
  id: totrans-462
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 包含`print`语句
- en: The built-in function called print is used to send messages from the script
    to the command window while the script is running. Pass any valid data to the
    print statement and use it to track progress or to debug if there are issues.
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 内置函数`print`用于在脚本运行时将消息发送到命令窗口。将任何有效的数据传递给`print`语句，并用它来跟踪进度或在出现问题时进行调试。
- en: '[PRE68]'
  id: totrans-464
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Read more about print statements here: [https://realpython.com/python-print/](https://realpython.com/python-print/)'
  id: totrans-465
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 阅读更多关于`print`语句的内容：[https://realpython.com/python-print/](https://realpython.com/python-print/)
- en: Write the executable parts of the script
  id: totrans-466
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编写脚本的可执行部分
- en: After importing modules and defining functions, the next part of the script
    is where the action takes place. The for loops are run, the functions are called,
    and the script is then done.
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 在导入模块和定义函数之后，脚本的下一部分是实际执行的地方。`for`循环运行，函数被调用，脚本完成执行。
- en: Make sure to add lots of comments to help yourself understand what is happening
    throughout the script, and print statements as well to help while the script is
    running.
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 确保添加大量注释，以帮助自己理解脚本中的操作，并添加`print`语句帮助在脚本运行时进行调试。
- en: If __name__ == ‘__main__’
  id: totrans-469
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如果`__name__ == '__main__'`
- en: Often at the end of scripts you will see this line, `if __name__ == “__main__”`.
    What it means is that the indented code below this line will be run if the script
    is executed directly, but if the code in the script is imported by another script,
    the code will not execute until called in the second script.
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 在脚本的末尾，你常常会看到这一行，`if __name__ == "__main__"`。这意味着，如果脚本被直接执行，下面缩进的代码将会运行；但是如果脚本中的代码被另一个脚本导入，那么代码将不会执行，直到在第二个脚本中被调用。
- en: 'Read more about this here: [https://www.geeksforgeeks.org/what-does-the-if-__name__-__main__-do/](https://www.geeksforgeeks.org/what-does-the-if-__name__-__main__-do/)'
  id: totrans-471
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 阅读更多关于此的内容：[https://www.geeksforgeeks.org/what-does-the-if-__name__-__main__-do/](https://www.geeksforgeeks.org/what-does-the-if-__name__-__main__-do/)
- en: Summary
  id: totrans-472
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 小结
- en: In this chapter, we did a fast but comprehensive overview of computer programming
    and the Python programming language. We reviewed the basics of computer programming,
    including variables and iteration and conditionals. We reviewed the Windows Path
    environment variable and the Python system path. We explored the data types of
    Python, including Integers and Strings and Float, and the data containers of Python
    such as lists and tuples and dictionaries. We learned some basic code structure
    for scripts, and how to execute those scripts.
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们快速而全面地概述了计算机编程和Python编程语言。我们回顾了计算机编程的基础，包括变量、迭代和条件语句。我们回顾了Windows的Path环境变量和Python系统路径。我们探讨了Python的数据类型，包括整数、字符串和浮点数，以及Python的数据容器，如列表、元组和字典。我们学习了脚本的一些基本代码结构，以及如何执行这些脚本。
- en: In the next chapter we will discuss the basics of `arcpy` and the ArcGIS API
    for Python. We will learn how to import these modules and access their methods
    and submodules. We will begin to execute Python code to automate ArcGIS Desktop
    and ArcGIS Pro.
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将讨论`arcpy`和ArcGIS Python API的基础知识。我们将学习如何导入这些模块并访问它们的方法和子模块。我们将开始执行Python代码，以自动化ArcGIS
    Desktop和ArcGIS Pro。
