- en: Chapter 4. Publish your Data Analysis to the Web - the PixieApp Tool
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章：将您的数据分析发布到Web - PixieApp工具
- en: '"Data, I think, is one of the most powerful mechanisms for telling stories.
    I take a huge pile of data and I try to get it to tell stories."'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '"我认为数据是讲故事最强大的机制之一。我拿一大堆数据，试图让它讲述故事。"'
- en: – *Steven Levitt*, co-author of *Freakonomics*
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: – *史蒂文·列维特*，《怪诞经济学》合著者
- en: In the previous chapter, we discussed how Jupyter Notebooks, coupled with PixieDust,
    accelerate your data science projects with simple APIs that let you load, clean,
    and visualize data without the need to write extensive code, as well as enable
    collaboration between data scientists and developers with PixieApps. In this chapter,
    we'll show how to *liberate* your PixieApps and associated data analytics from
    the Jupyter Notebook by publishing them as web applications using the PixieGateway
    server. This operationalization of the Notebook is particularly attractive to
    the line of business user persona (business analysts, C-Suite executives, and
    many more) who would like to use the PixieApps but who, unlike data scientists
    or developers, may not be comfortable using Jupyter Notebooks to do so. Instead,
    they would prefer to access it as a classic web application or perhaps, similar
    to a YouTube video, embed it into a blog post or a GitHub page. Using a website
    or a blog post, it will be easier to communicate the valuable insights and other
    results extracted from the data analytics from your data.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们讨论了如何通过将PixieDust与Jupyter Notebooks结合使用，借助简单的API加速您的数据科学项目，这些API可以让您加载、清理和可视化数据，而无需编写大量代码，还能通过PixieApps实现数据科学家和开发人员之间的协作。在本章中，我们将展示如何通过使用PixieGateway服务器，将您的PixieApps和相关的数据分析从Jupyter
    Notebook中“解放”出来，发布为Web应用程序。这种Notebook的操作化特别吸引那些业务用户（如商业分析师、高层管理人员等）使用，他们希望使用PixieApps，但与数据科学家或开发人员不同，他们可能不太愿意使用Jupyter
    Notebooks。相反，他们更愿意将其作为经典的Web应用程序访问，或者像YouTube视频一样，将其嵌入到博客文章或GitHub页面中。通过网站或博客文章，您可以更轻松地传达从数据分析中提取的有价值的见解和其他结果。
- en: By the end of this chapter, you will be able to install and configure a PixieGateway
    server instance both locally for testing or in a Kubernetes container on the cloud
    for production. For those readers who are not familiar with Kubernetes, we'll
    cover the basics in the next section.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将能够在本地安装和配置PixieGateway服务器实例进行测试，或者在云端的Kubernetes容器中进行生产部署。对于那些不熟悉Kubernetes的读者，我们将在下一节中介绍其基础知识。
- en: The other main capability of the PixieGateway server that we'll cover in this
    chapter, is the ability to easily share a chart created with the PixieDust `display()`
    API. We'll show how to publish it as a web page accessible by your team with a
    single click of a button. Finally, we'll cover the PixieGateway admin console
    that lets you manage your applications, charts, kernels, server logs, and a Python
    console executing ad-hoc code requests against a kernel.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍PixieGateway服务器的另一个主要功能，即轻松共享使用PixieDust `display()` API创建的图表。我们将展示如何通过单击一个按钮，将其发布为一个网页，供您的团队访问。最后，我们将介绍PixieGateway管理控制台，它可以让您管理应用程序、图表、内核、服务器日志，并在Python控制台中执行对内核的即席代码请求。
- en: Note
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Note**: The PixieGateway server is a subcomponent of PixieDust, its source
    code can be found here:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：PixieGateway服务器是PixieDust的一个子组件，其源代码可以在此找到：'
- en: '[https://github.com/pixiedust/pixiegateway](https://github.com/pixiedust/pixiegateway)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/pixiedust/pixiegateway](https://github.com/pixiedust/pixiegateway)'
- en: Overview of Kubernetes
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes概述
- en: 'Kubernetes ([https://kubernetes.io](https://kubernetes.io)) is a scalable open
    source system for automating and orchestrating the deployment and management of
    containerized applications, which are very popular among cloud service providers.
    It is most often used with Docker containers ([https://www.docker.com](https://www.docker.com))
    although other types of containers are supported. Before you start, you will need
    access to a set of computers that have been configured as a Kubernetes cluster;
    you can find a tutorial on how to create such a cluster here: [https://kubernetes.io/docs/tutorials/kubernetes-basics](https://kubernetes.io/docs/tutorials/kubernetes-basics).'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes ([https://kubernetes.io](https://kubernetes.io)) 是一个可扩展的开源系统，用于自动化和编排容器化应用程序的部署和管理，这些应用程序在云服务提供商中非常流行。它通常与Docker容器（[https://www.docker.com](https://www.docker.com)）一起使用，尽管也支持其他类型的容器。在开始之前，您需要访问一组已经配置为Kubernetes集群的计算机；您可以在此处找到如何创建该集群的教程：[https://kubernetes.io/docs/tutorials/kubernetes-basics](https://kubernetes.io/docs/tutorials/kubernetes-basics)。
- en: If you don't have the computer resources, a good solution would be to use a public cloud
    vendor that provides a Kubernetes service, such as Amazon AWS EKS ([https://aws.amazon.com/eks](https://aws.amazon.com/eks)),
    Microsoft Azure ([https://azure.microsoft.com/en-us/services/container-service/kubernetes](https://azure.microsoft.com/en-us/services/container-service/kubernetes)),
    or IBM Cloud Kubernetes Service ([https://www.ibm.com/cloud/container-service](https://www.ibm.com/cloud/container-service)).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有足够的计算资源，一个不错的解决方案是使用提供Kubernetes服务的公共云服务商，例如Amazon AWS EKS（[https://aws.amazon.com/eks](https://aws.amazon.com/eks)）、Microsoft
    Azure（[https://azure.microsoft.com/en-us/services/container-service/kubernetes](https://azure.microsoft.com/en-us/services/container-service/kubernetes)）或IBM
    Cloud Kubernetes Service（[https://www.ibm.com/cloud/container-service](https://www.ibm.com/cloud/container-service)）。
- en: 'To better understand how a Kubernetes cluster works, let''s look at the high-level
    architecture shown in the following diagram:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解Kubernetes集群是如何工作的，让我们看看以下图示的高层架构：
- en: '![Overview of Kubernetes](img/B09699_04_01.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![Kubernetes概览](img/B09699_04_01.jpg)'
- en: Kubernetes high-level architecture
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes高层架构
- en: 'At the top of the stack, we have the `kubectl` command-line tool that enables
    users to manage the Kubernetes cluster by sending commands to the **Kubernetes
    Master Node**. The `kubectl` commands use the following syntax:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在架构的顶部，我们有`kubectl`命令行工具，它允许用户通过向**Kubernetes主节点**发送命令来管理Kubernetes集群。`kubectl`命令使用以下语法：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Where:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 其中：
- en: '`command`: This specifies the operation, for example, `create`, `get`, `describe`,
    and `delete`'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`command`：指定操作，例如`create`、`get`、`describe`和`delete`。'
- en: '`TYPE`: This specifies the resource type, for example, `pods`, `nodes`, and
    `services`'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TYPE`：指定资源类型，例如`pods`、`nodes`和`services`。'
- en: '`NAME`: This specifies the name of the resource'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NAME`：指定资源的名称。'
- en: '`flags`: This specifies optional flags specific to the operation'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flags`：指定特定操作的可选标志。'
- en: Note
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'For more information on how to use `kubectl,` visit the following:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解如何使用`kubectl`，请访问以下链接：
- en: '[https://kubernetes.io/docs/reference/kubectl/overview](https://kubernetes.io/docs/reference/kubectl/overview)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://kubernetes.io/docs/reference/kubectl/overview](https://kubernetes.io/docs/reference/kubectl/overview)'
- en: Another important component present in the worker node is the **kubelet,** which
    controls the pod's life cyle by reading the pod configuration from the **kube
    API Server**. It also is responsible for communication with the master node. The
    kube-proxy provides load balancing capabilities between all the pods according
    to the policy specified in the master node, hence ensuring high-availability of
    the overall application.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 工作节点中的另一个重要组件是**kubelet**，它通过从**kube API Server**读取pod配置来控制pod的生命周期。它还负责与主节点的通信。kube-proxy根据主节点指定的策略提供所有pods之间的负载均衡功能，从而确保整个应用程序的高可用性。
- en: In the next section, we will discuss the different ways to install and configure
    the PixieGateway server, including one method that uses a Kubernetes cluster.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一部分，我们将讨论安装和配置PixieGateway服务器的不同方法，包括使用Kubernetes集群的其中一种方法。
- en: Installing and configuring the PixieGateway server
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和配置PixieGateway服务器
- en: Before we dive into the technical details, it would be a good idea to deploy
    a PixieGateway server instance to try things out.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入技术细节之前，部署一个PixieGateway服务器实例来进行尝试会是一个好主意。
- en: 'There are mainly two types of installation you can try: local install and server
    install.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 主要有两种安装类型：本地安装和服务器安装。
- en: '**Local install**: Use this method for testing and development.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**本地安装**：使用这种方法进行测试和开发。'
- en: For this part, I strongly recommend using Anaconda virtual environments ([https://conda.io/docs/user-guide/tasks/manage-environments.html](https://conda.io/docs/user-guide/tasks/manage-environments.html))
    because they provide good isolation between the environments, enabling you to experiment
    with different versions and configurations of the Python package.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这一部分，我强烈推荐使用Anaconda虚拟环境（[https://conda.io/docs/user-guide/tasks/manage-environments.html](https://conda.io/docs/user-guide/tasks/manage-environments.html)），因为它们提供了良好的环境隔离，允许您在不同版本和配置的Python包之间进行实验。
- en: 'If you are managing multiple environments, you can get a list of all the available
    environments by using the following command:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您管理多个环境，您可以使用以下命令获取所有可用环境的列表：
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'First, select the environment of your choice by using the following command
    from a Terminal:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，通过在终端使用以下命令选择您选择的环境：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You should see the name of your environment in the Terminal, which is an indication
    that you've correctly activated it.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能在终端中看到你的环境名称，这表明你已正确激活它。
- en: 'Next, install the `pixiegateway` package from PyPi by running the following
    command:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过运行以下命令从 PyPi 安装`pixiegateway`包：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Note**: You can find more information about the `pixiegateway` package on
    PyPi here:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：你可以在 PyPi 上找到更多关于`pixiegateway`包的信息：'
- en: '[https://pypi.python.org/pypi/pixiegateway](https://pypi.python.org/pypi/pixiegateway)'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://pypi.python.org/pypi/pixiegateway](https://pypi.python.org/pypi/pixiegateway)'
- en: 'Once all the dependencies have been installed, you''re ready to start the server.
    Assuming that you want to use the `8899 port`, you can start the PixieGateway
    server using the following command:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完所有依赖项后，你可以开始启动服务器。假设你想使用`8899端口`，可以通过以下命令启动 PixieGateway 服务器：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Example output should look like this:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 示例输出应如下所示：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Note**: To stop the PixieGateway server, simply use *Ctrl* + *C* from the Terminal.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：要停止 PixieGateway 服务器，只需在终端中按*Ctrl* + *C*。'
- en: 'You can now open the PixieGateway admin console at the following URL: `http://localhost:8899/admin`.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以通过以下 URL 打开 PixieGateway 管理控制台：`http://localhost:8899/admin`。
- en: Note
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Note**: When challenged, use `admin` as the user and blank (no password)
    as the password. We''ll review how to configure security and other properties
    in the *PixieGateway server configuration* section later in this chapter.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：在遇到挑战时，使用`admin`作为用户名，密码留空（即没有密码）。我们将在本章稍后通过*PixieGateway服务器配置*部分介绍如何配置安全性和其他属性。'
- en: '**Server install using Kubernetes and Docker**: Use this install method if
    you need to run PixieGateway in a production environment where you want to give
    access to the deployed PixieApps to multiple users over the web.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用 Kubernetes 和 Docker 安装服务器**：如果你需要在生产环境中运行 PixieGateway，并且希望通过 Web 向多个用户提供已部署的
    PixieApps 访问权限，请使用此安装方法。'
- en: 'The following instructions will use IBM Cloud Kubernetes Service, but they
    can easily be adapted to other providers:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 以下说明将使用 IBM Cloud Kubernetes 服务，但也可以很容易地适应其他提供商：
- en: Create an IBM Cloud account if you don't already have one and create a container
    service instance from the catalog.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你还没有 IBM Cloud 账户，请创建一个，并从目录中创建一个容器服务实例。
- en: Note
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Note**: A lite version plan is available for testing at no cost.'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**注意**：有一个适用于测试的免费轻量版计划。'
- en: Download and install the Kubernetes CLI ([https://kubernetes.io/docs/tasks/tools/install-kubectl](https://kubernetes.io/docs/tasks/tools/install-kubectl))
    and the IBM Cloud CLI ([https://console.bluemix.net/docs/cli/reference/bluemix_cli/get_started.html#getting-started](https://console.bluemix.net/docs/cli/reference/bluemix_cli/get_started.html#getting-started)).
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载并安装 Kubernetes CLI（[https://kubernetes.io/docs/tasks/tools/install-kubectl](https://kubernetes.io/docs/tasks/tools/install-kubectl)）和
    IBM Cloud CLI（[https://console.bluemix.net/docs/cli/reference/bluemix_cli/get_started.html#getting-started](https://console.bluemix.net/docs/cli/reference/bluemix_cli/get_started.html#getting-started)）。
- en: Note
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Note**: An additional get started article on Kubernetes containers can be found here:'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**注意**：关于 Kubernetes 容器的其他入门文章可以在此找到：'
- en: '[https://console.bluemix.net/docs/containers/container_index.html#container_index](https://console.bluemix.net/docs/containers/container_index.html#container_index)'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://console.bluemix.net/docs/containers/container_index.html#container_index](https://console.bluemix.net/docs/containers/container_index.html#container_index)'
- en: 'Log in to the IBM Cloud and then target the org and space where your Kubernetes
    instance resides. Install and initialize the `container-service` plugin:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到 IBM Cloud 后，定向到你的 Kubernetes 实例所在的组织和空间。安装并初始化`container-service`插件：
- en: '[PRE6]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Check that your cluster is created and, if not, create one:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查你的集群是否已创建，如果没有，创建一个：
- en: '[PRE7]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Download the cluster configuration that will be used by the `kubectl` command,
    which is executed on your local machine, later on:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载稍后将用于`kubectl`命令的集群配置文件，该命令将在你的本地计算机上执行：
- en: '[PRE8]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The preceding command will generate a temporary YML file that contains the
    cluster information and an environment variable export statement that you must
    run before starting to use the `kubectl` command, as in the example:'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述命令将生成一个临时的 YML 文件，包含集群信息和一个环境变量导出语句，你必须在开始使用`kubectl`命令之前运行，如示例所示：
- en: '[PRE9]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Note**: YAML is a very popular data serialization format commonly used for
    system configuration. You can find more information here:'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**注意**：YAML 是一种非常流行的数据序列化格式，通常用于系统配置。你可以在此找到更多信息：'
- en: '[http://www.yaml.org/start.html](http://www.yaml.org/start.html)'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://www.yaml.org/start.html](http://www.yaml.org/start.html)'
- en: 'You can now use `kubectl` to create the deployment and services for your PixieGateway
    server. For convenience, the PixieGateway GitHub repository already has a generic
    version of `deployment.yml` and `service.yml` that you can directly reference.
    We''ll review how to configure these files for Kubernetes in the *PixieGateway
    server configuration* section later in this chapter:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以使用`kubectl`为 PixieGateway 服务器创建部署和服务。为了方便，PixieGateway GitHub 仓库中已经有一个通用版本的`deployment.yml`和`service.yml`，你可以直接引用。我们将在本章后面*PixieGateway
    服务器配置*部分回顾如何为 Kubernetes 配置这些文件：
- en: '[PRE10]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'It would be a good idea to verify the state of your clusters using the `kubectl
    get` command:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`kubectl get`命令验证集群的状态是一个不错的主意：
- en: '[PRE11]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Finally, you''ll need the public IP address of the server, which you can find
    by looking at the `Public IP` column of the output returned using the following
    command, in the Terminal:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，你需要服务器的公共 IP 地址，你可以通过在终端使用以下命令获取的输出中的`Public IP`列来找到它：
- en: '[PRE12]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: If all goes well, you can now test your deployment by opening the admin console
    at `http://<server_ip>>:32222/admin`. This time, the default credentials for the
    admin console are `admin`/`changeme` and we'll show how to change them in the
    next section.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一切顺利，你现在可以通过在`http://<server_ip>>:32222/admin`打开管理员控制台来测试你的部署。这次，管理员控制台的默认凭据是`admin`/`changeme`，我们将在下一节中演示如何更改这些凭据。
- en: The `deployment.yml` file used in the Kubernetes install instructions is referencing
    a Docker image that has the PixieGateway binaries and all its dependencies preinstalled
    and configured. The PixieGateway Docker image is available at [https://hub.docker.com/r/dtaieb/pixiegateway-python35](https://hub.docker.com/r/dtaieb/pixiegateway-python35).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 安装说明中使用的`deployment.yml`文件引用了一个 Docker 镜像，该镜像已预安装并配置了 PixieGateway
    二进制文件及其所有依赖项。PixieGateway Docker 镜像可以通过以下链接获取：[https://hub.docker.com/r/dtaieb/pixiegateway-python35](https://hub.docker.com/r/dtaieb/pixiegateway-python35)。
- en: 'When working locally, the recommended method is to follow the steps of the
    local install described earlier. However, for readers who prefer to work with
    Docker images, it is possible to try out the PixieGateway Docker image locally
    without Kubernetes, by directly installing it on your local laptop with a simple
    Docker command:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在本地工作时，推荐的方法是遵循之前描述的本地安装步骤。然而，对于那些喜欢使用 Docker 镜像的读者，可以尝试在没有 Kubernetes 的情况下直接在本地笔记本电脑上使用简单的
    Docker 命令安装 PixieGateway Docker 镜像。
- en: '[PRE13]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The preceding command assumes that you have already installed Docker and that
    it is currently running on your local machine. If not, you can download an installer
    from the following link: [https://docs.docker.com/engine/installation](https://docs.docker.com/engine/installation).'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令假设你已经安装了 Docker，并且它当前正在本地机器上运行。如果没有，你可以从以下链接下载安装程序：[https://docs.docker.com/engine/installation](https://docs.docker.com/engine/installation)。
- en: 'The Docker image will automatically be pulled if not already present and the
    container will start, starting the PixieGateway server at local port `8888`. The
    `-p` switch in the command maps the `8888 port` local to the container, to the
    `9999 port` local to the host machine. With the given configuration, you would
    access the Docker instance of the PixieGateway server at the following URL: `http://localhost:9999/admin`.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果本地没有现成的 Docker 镜像，它将自动拉取该镜像，容器将启动，并在本地端口`8888`上启动 PixieGateway 服务器。命令中的`-p`选项将本地的`8888端口`映射到主机机器的`9999端口`。通过这个配置，你可以通过以下
    URL 访问 PixieGateway 服务器的 Docker 实例：`http://localhost:9999/admin`。
- en: Note
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can find more information about the Docker command line here:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里找到更多关于 Docker 命令行的信息：
- en: '[https://docs.docker.com/engine/reference/commandline/cli](https://docs.docker.com/engine/reference/commandline/cli)'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.docker.com/engine/reference/commandline/cli](https://docs.docker.com/engine/reference/commandline/cli)'
- en: Note
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Note**: Another reason why you would use this method is to provide your own
    custom Docker image for the PixieGateway server. This can be useful if you have
    built an extension to PixieGateway and want to provide it to your users as an
    already configured Docker image. Discussion around how to build a Docker image
    from a base image is beyond the scope of this book, but you can find detailed
    information here:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：使用这种方法的另一个原因是为 PixieGateway 服务器提供你自定义的 Docker 镜像。如果你为 PixieGateway 构建了扩展，并希望将其作为已经配置好的
    Docker 镜像提供给用户，这会很有用。如何从基础镜像构建 Docker 镜像的讨论超出了本书的范围，但你可以在这里找到详细信息：'
- en: '[https://docs.docker.com/engine/reference/commandline/image_build](https://docs.docker.com/engine/reference/commandline/image_build)'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.docker.com/engine/reference/commandline/image_build](https://docs.docker.com/engine/reference/commandline/image_build)'
- en: PixieGateway server configuration
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PixieGateway服务器配置
- en: 'Configuring the PixieGateway server is very similar to configuring the Jupyter
    Kernel Gateway. Most options are configured using a Python configuration file;
    to start things off, you can generate a template configuration file using the
    following command:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 配置PixieGateway服务器与配置Jupyter Kernel Gateway非常相似。大多数选项都是通过Python配置文件进行配置的；为了开始，你可以使用以下命令生成一个模板配置文件：
- en: '[PRE14]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The `jupyter_kernel_gateway_config.py` template file will be generated under
    the `~/.jupyter` directory (`~` indicates the user home directory). You can find
    more information about the standard Jupyter Kernel Gateway options here: [http://jupyter-kernel-gateway.readthedocs.io/en/latest/config-options.html](http://jupyter-kernel-gateway.readthedocs.io/en/latest/config-options.html).'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`jupyter_kernel_gateway_config.py`模板文件将在`~/.jupyter`目录下生成（`~`表示用户主目录）。你可以在这里找到更多关于标准Jupyter
    Kernel Gateway选项的信息：[http://jupyter-kernel-gateway.readthedocs.io/en/latest/config-options.html](http://jupyter-kernel-gateway.readthedocs.io/en/latest/config-options.html)。'
- en: Using the `jupyter_kernel_gateway_config.py` file is fine when you are working
    locally and have easy access to the filesystem. When using the Kubernetes install,
    it is recommended to configure the options as environment variables, which you
    can set directly in the `deployment.yml` file by using the predefined `env` category.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在本地工作并且可以轻松访问文件系统时，使用`jupyter_kernel_gateway_config.py`文件是可以的。对于使用Kubernetes安装时，建议将选项配置为环境变量，你可以通过在`deployment.yml`文件中使用预定义的`env`类别直接设置这些变量。
- en: 'Let''s now look at each configuration options for the PixieGateway server.
    A list is provided here using both the Python and Environment method:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看一下PixieGateway服务器的每个配置选项。这里提供了一个列表，包含了Python方法和环境方法：
- en: Note
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Note**: As a reminder, Python method means setting the parameter in the `jupyter_kernel_gateway_config.py`
    Python config file, while the Environment method means setting the parameters
    in the Kubernetes `deployment.yml` file.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：提醒一下，Python方法是指在`jupyter_kernel_gateway_config.py` Python配置文件中设置参数，而环境方法是指在Kubernetes的`deployment.yml`文件中设置参数。'
- en: '**Admin console credentials**: Configure the user ID/password for the admin
    console:'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管理员控制台凭证**：配置管理员控制台的用户ID/密码：'
- en: '**Python**: `PixieGatewayApp.admin_user_id`, `PixieGatewayApp.admin_password`'
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Python**: `PixieGatewayApp.admin_user_id`, `PixieGatewayApp.admin_password`'
- en: '**Environment**: `ADMIN_USERID` and `ADMIN_PASSWORD`'
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**环境**: `ADMIN_USERID` 和 `ADMIN_PASSWORD`'
- en: '**Storage connector**: Configure a persistent storage for various resources,
    such as charts, and Notebooks. By default, PixieGateway uses the local filesystem;
    for example, it will store the published Notebooks under the `~/pixiedust/gateway`
    directory. Using the local filesystem is probably fine for a local test environment,
    but when using a Kubernetes install, you will need to explicitly use persistent
    volumes ([https://kubernetes.io/docs/concepts/storage/persistent-volumes](https://kubernetes.io/docs/concepts/storage/persistent-volumes)),
    which can be difficult to use. If no persistence strategy is put in place, the
    persisted files will be deleted when the container is restarted and all your published
    chart and PixieApps will disappear. PixieGateway provides another option, which
    is to configure a storage connector that lets you persist the data using the mechanism
    and backend of your choice.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**存储连接器**: 配置一个持久化存储以保存各种资源，如图表和笔记本。默认情况下，PixieGateway使用本地文件系统；例如，它会将发布的笔记本保存在`~/pixiedust/gateway`目录下。使用本地文件系统对于本地测试环境可能是可以的，但当使用Kubernetes安装时，你将需要明确地使用持久卷（[https://kubernetes.io/docs/concepts/storage/persistent-volumes](https://kubernetes.io/docs/concepts/storage/persistent-volumes)），这可能会比较难以使用。如果没有配置持久化策略，当容器重启时，已持久化的文件将被删除，所有已发布的图表和PixieApps也会消失。PixieGateway提供了另一种选项，可以配置一个存储连接器，让你使用你选择的机制和后端来持久化数据。'
- en: 'To configure a storage connector for charts, you must specify a fully qualified class
    name in either one of the following configuration variables:'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要配置图表的存储连接器，你必须在以下配置变量中的任何一个中指定一个完全限定的类名：
- en: '**Python**: `SingletonChartStorage.chart_storage_class`'
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Python**: `SingletonChartStorage.chart_storage_class`'
- en: '**Environment**: `PG_CHART_STORAGE`'
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**环境**: `PG_CHART_STORAGE`'
- en: 'The referenced connector class must inherit from the `ChartStorage` abstract
    class defined in the `pixiegateway.chartsManager` package (implementation can
    be found here: [https://github.com/ibm-watson-data-lab/pixiegateway/blob/master/pixiegateway/chartsManager.py](https://github.com/ibm-watson-data-lab/pixiegateway/blob/master/pixiegateway/chartsManager.py)).'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用的连接器类必须继承自`pixiegateway.chartsManager`包中定义的`ChartStorage`抽象类（实现可以在这里找到：[https://github.com/ibm-watson-data-lab/pixiegateway/blob/master/pixiegateway/chartsManager.py](https://github.com/ibm-watson-data-lab/pixiegateway/blob/master/pixiegateway/chartsManager.py)）。
- en: 'PixieGateway provides an out of the box connector to the Cloudant/CouchDB NoSQL
    database ([http://couchdb.apache.org](http://couchdb.apache.org)). To use this
    connector, you''ll need to set the connector class to `pixiegateway.chartsManager.CloudantChartStorage`.
    You''ll also need to specify secondary configuration variables to specify the
    server and credential information (we show the Python/Environment form):'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: PixieGateway提供一个开箱即用的连接器，用于连接Cloudant/CouchDB NoSQL数据库 ([http://couchdb.apache.org](http://couchdb.apache.org))。要使用此连接器，你需要将连接器类设置为`pixiegateway.chartsManager.CloudantChartStorage`。你还需要指定其他配置变量来指定服务器和凭证信息（我们展示了Python/环境变量形式）：
- en: '`CloudantConfig.host / PG_CLOUDANT_HOST`'
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CloudantConfig.host / PG_CLOUDANT_HOST`'
- en: '`CloudantConfig.port / PG_CLOUDANT_PORT`'
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CloudantConfig.port / PG_CLOUDANT_PORT`'
- en: '`CloudantConfig.protocol / PG_CLOUDANT_PROTOCOL`'
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CloudantConfig.protocol / PG_CLOUDANT_PROTOCOL`'
- en: '`CloudantConfig.username / PG_CLOUDANT_USERNAME`'
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CloudantConfig.username / PG_CLOUDANT_USERNAME`'
- en: '`CloudantConfig.password / PG_CLOUDANT_PASSWORD`'
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CloudantConfig.password / PG_CLOUDANT_PASSWORD`'
- en: '**Remote Kernels**: Specify the configuration for a remote Jupyter Kernel Gateway.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**远程内核**：指定远程Jupyter Kernel Gateway的配置。'
- en: 'At the moment, this configuration option is only supported in Python mode.
    The variable name you need to use is `ManagedClientPool.remote_gateway_config`.
    The expected value is a JSON object that contains the server information, which
    can be specified in two ways:'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 目前，此配置选项仅在Python模式下受支持。你需要使用的变量名是`ManagedClientPool.remote_gateway_config`。预期的值是一个包含服务器信息的JSON对象，可以通过两种方式指定：
- en: '`protocol`, `host`, and `port`'
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`protocol`，`host`，和`port`'
- en: '`notebook_gateway` specifies fully qualified URL to the server'
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`notebook_gateway`指定服务器的完全限定URL'
- en: 'Depending on the kernel configuration, security can also be provided using
    two ways:'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 根据内核配置，安全性也可以通过两种方式提供：
- en: '`auth_token`'
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`auth_token`'
- en: '`user` and `password`'
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`user`和`password`'
- en: 'This can be seen in the following example:'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这可以在以下示例中看到：
- en: '[PRE15]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Note
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Notice that, in the preceding example, you need to prefix the variable with
    `c.`. This is a requirement coming from the underlying Jupyter/IPython configuration
    mechanism.
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，在前面的示例中，你需要在变量前加上`c.`。这是来自底层Jupyter/IPython配置机制的要求。
- en: 'For reference, here are the complete configuration example files using both
    Python and Kubernetes Environment variables formats:'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为参考，以下是使用Python和Kubernetes环境变量格式的完整配置示例文件：
- en: 'The following are the contents of `jupyter_kernel_gateway_config.py`:'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下是`jupyter_kernel_gateway_config.py`的内容：
- en: '[PRE16]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The following are the contents of deployment.yml:'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下是`deployment.yml`的内容：
- en: '[PRE17]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: PixieGateway architecture
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PixieGateway架构图
- en: Now would be a good time to look again at the PixieGateway architecture diagram
    presented in [Chapter 2](ch02.xhtml "Chapter 2. Python and Jupyter Notebooks to
    Power your Data Analysis"), *Python and Jupyter Notebooks to Power your Data Analysis*.
    The server is implemented as a custom extension (called Personality) to the Jupyter Kernel
    Gateway ([https://github.com/jupyter/kernel_gateway](https://github.com/jupyter/kernel_gateway)).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候再次查看在[第2章](ch02.xhtml "第2章. 使用Python和Jupyter Notebooks进行数据分析")中展示的PixieGateway架构图，*使用Python和Jupyter
    Notebooks为你的数据分析提供动力*。服务器作为Jupyter Kernel Gateway的自定义扩展（称为Personality）实现 ([https://github.com/jupyter/kernel_gateway](https://github.com/jupyter/kernel_gateway))。
- en: In turn, the PixieGateway server provides extension points to customize some
    behavior that we'll discuss later in this chapter.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 反过来，PixieGateway服务器提供了扩展点，以自定义一些行为，我们将在本章稍后讨论。
- en: 'The high-level architecture diagram for the PixieGateway server is shown here:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: PixieGateway服务器的高级架构图如下所示：
- en: '![PixieGateway architecture](img/B09699_04_02.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![PixieGateway架构图](img/B09699_04_02.jpg)'
- en: PixieGateway architecture diagram
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: PixieGateway架构图
- en: 'As the diagram indicates, PixieGateway provides a REST interface for three
    types of clients:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如图所示，PixieGateway为三种类型的客户端提供REST接口：
- en: '**Jupyter Notebook Server**: This calls a dedicated set of REST APIs for sharing
    charts and publishing PixieApps as web applications'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Jupyter Notebook 服务器**：调用一组专门的 REST API 来共享图表和发布 PixieApps 作为 Web 应用程序'
- en: '**Browser client running a PixieApp**: A special REST API manages the execution
    of Python code in the associated kernel'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**浏览器客户端运行 PixieApp**：一个特殊的 REST API 管理着与之关联的内核中 Python 代码的执行'
- en: '**Browser client running the admin console**: A dedicated set of REST APIs for managing
    various server resources and stats, for example, PixieApps and kernel instances'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**浏览器客户端运行管理控制台**：一组专门的 REST API 用于管理各种服务器资源和统计信息，例如 PixieApps 和内核实例'
- en: 'On the backend, the PixieGateway server manages the life cycle of one or more
    Jupyter Kernel instances responsible for running the PixieApps. At runtime, each
    PixieApp is deployed on a kernel instance using a specific set of steps. The following
    diagram shows a typical topology of all the PixieApp user instances running on
    the server:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在后台，PixieGateway 服务器管理一个或多个负责运行 PixieApps 的 Jupyter 内核实例的生命周期。在运行时，每个 PixieApp
    都会使用一组特定的步骤在内核实例上进行部署。下图展示了在服务器上运行的所有 PixieApp 用户实例的典型拓扑结构：
- en: '![PixieGateway architecture](img/B09699_04_03.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![PixieGateway 架构](img/B09699_04_03.jpg)'
- en: The topology of running PixieApp instances
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 运行中的 PixieApp 实例拓扑结构
- en: 'When a PixieApp is deployed on the server, the code contained in every cell of the Jupyter
    Notebook is analyzed and broken into two parts:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 当 PixieApp 部署在服务器上时，Jupyter Notebook 中每个单元的代码都会被分析并分为两部分：
- en: '**Warmup code**: This is all the code defined in all the cells above the main
    PixieApp definition. This code is run only once, when the PixieApp application
    is first started on the kernel, and will not run again until the kernel is restarted,
    or until it is called explicitly from the run code. This is important because
    it will help you better optimize performances; for example, you should always
    put in the warmup section, code that loads a large amount of data that doesn''t
    change much or that may require a long time to initialize.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**预热代码**：这是在所有主 PixieApp 定义之上的所有单元中定义的代码。此代码仅在 PixieApp 应用程序第一次在内核上启动时运行一次，除非内核重新启动，或者显式从运行代码中调用，否则不会再次运行。这一点很重要，因为它有助于优化性能；例如，您应该始终将那些加载大量数据且变化不大或者初始化可能需要较长时间的代码放在预热部分。'
- en: '**Run code**: This is code that will be run in its own instance for every user
    session. The run code is typically extracted from the cell that contains the PixieApp
    class declaration. The publisher automatically discovers this cell by doing a static
    analysis of the Python code and specifically looking for the following two criteria,
    which must both be met:'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运行代码**：这是每个用户会话中在其独立实例中运行的代码。运行代码通常是从包含 PixieApp 类声明的单元中提取的。发布者通过对 Python
    代码进行静态分析，自动发现这个单元，并特别查找以下两个条件，这两个条件必须同时满足：'
- en: The cell contains a class that has the `@PixieApp` annotation
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该单元包含一个带有 `@PixieApp` 注解的类
- en: The cell instantiates the class and call its `run()` method
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该单元实例化该类并调用其 `run()` 方法
- en: '[PRE18]'
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'For example, the following code must be in its own cell to qualify as the run code:'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如，以下代码必须放在单独的单元中，才能符合作为运行代码的条件：
- en: As we've seen in [Chapter 3](ch03.xhtml "Chapter 3. Accelerate your Data Analysis
    with Python Libraries"), *Accelerate your Data Analysis with Python Libraries*,
    it is possible to declare multiple PixieApps in the same notebook that will be
    used as child PixieApp or as base classes to the main PixieApp. In this case,
    we need to make sure that they are defined in their own cell and that you don't
    try to instantiate them and call their `run()` method.
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 正如我们在 [第 3 章](ch03.xhtml "第 3 章 加速使用 Python 库进行数据分析") *加速使用 Python 库进行数据分析*
    中看到的那样，可以在同一个笔记本中声明多个 PixieApps，作为子 PixieApp 或作为主 PixieApp 的基类。在这种情况下，我们需要确保它们定义在自己的单元中，并且不要尝试实例化它们并调用其
    `run()` 方法。
- en: The rule is that there can be only one main PixieApp class for which the `run()`
    method will be called and the cell that contains this code is considered the run
    code by the PixieGateway.
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 规则是，只有一个主 PixieApp 类可以调用 `run()` 方法，包含此代码的单元会被 PixieGateway 视为运行代码。
- en: Note
  id: totrans-149
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Note**: Cells that are not marked as Code, such as Markdown, Raw NBConvert, or
    Heading are ignored during the static analysis done by the PixieGateway server.
    Therefore, it is safe to keep them in your Notebook.'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**注意**：在 PixieGateway 服务器进行静态分析时，未标记为代码的单元（如 Markdown、Raw NBConvert 或 Heading）会被忽略。因此，您可以安全地将它们保留在您的笔记本中。'
- en: For each client session, PixieGateway will instantiate an instance of the main
    PixieApp class using the run code (represented as colored hexagons in the preceding
    diagram). Depending on current load, PixieGateway will decide how many PixieApps
    should run in a particular kernel instance and, if needed, automatically spawn
    a new kernel to serve the extra users. For example, if five users are using the
    same PixieApp, three instances may be running in a particular kernel instance
    and the two others will be run in another kernel instance. PixieGateway is constantly
    monitoring the usage patterns to optimize workload distribution by load balancing
    the instances of PixieApps between multiple kernels.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个客户端会话，PixieGateway将使用运行代码（如上图中的彩色六边形表示）实例化主PixieApp类的一个实例。根据当前负载，PixieGateway将决定在特定内核实例中应该运行多少个PixieApp，如果需要，自动创建一个新的内核来服务额外的用户。例如，如果五个用户正在使用同一个PixieApp，三个实例可能在特定的内核实例中运行，而另外两个将会在另一个内核实例中运行。PixieGateway会不断监控使用模式，通过负载均衡将PixieApp实例分配到多个内核之间，从而优化工作负载分配。
- en: 'To help understand how the Notebook code is broken down, the following diagram reflects
    how the warmup and run code are extracted from the Notebook and transformed to
    make sure that multiple instances coexist peacefully within the same kernel:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助理解笔记本代码是如何被分解的，下面的图表展示了如何从笔记本中提取热身代码和运行代码，并将其转化，以确保多个实例能够在同一内核中和平共存：
- en: Note
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: As a reminder, the cell that contains the main PixieApp must also have code
    that instantiates it and calls the `run()` method.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 提醒一下，包含主PixieApp的单元格也必须有代码来实例化它并调用`run()`方法。
- en: '![PixieGateway architecture](img/B09699_04_04.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![PixieGateway架构](img/B09699_04_04.jpg)'
- en: 'PixieApp life cycle: Warmup and Run Code'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: PixieApp生命周期：热身代码与运行代码
- en: Because a given kernel instance can host more than one Notebook with its main
    PixieApp, we need to make sure that there is no accidental name collision when
    the warmup code for two main PixieApps is executed. For example, the `title` variable
    may be used in both PixieApps and, if left alone, the value for the second one
    would override the value for the first one. To avoid this conflict, all the variable
    names in the warmup code are made unique by injecting a namespace.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 因为一个给定的内核实例可以托管多个包含主PixieApp的笔记本，我们需要确保在执行两个主PixieApp的热身代码时不会发生意外的名称冲突。例如，`title`变量可能在两个PixieApp中都有使用，如果不加以处理，第二个PixieApp的值将覆盖第一个的值。为了避免这种冲突，所有热身代码中的变量名都会通过注入命名空间来使其唯一。
- en: The `title = 'some string'` statement becomes `ns1_title = 'some string'` after
    publication. The PixieGateway publisher will also update all references to `title`
    throughout the code to reflect the new name. All of this renaming is automatically
    done at runtime and there are no specific things that need to be done by the developer.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '`title = ''some string''`语句在发布后会变成`ns1_title = ''some string''`。PixieGateway发布程序还会更新代码中所有`title`的引用，以反映新的名称。所有这些重命名操作都是在运行时自动完成的，开发者无需做任何特别的事情。'
- en: We will show real code examples later on when we cover the *PixieApp details*
    page of the admin console.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们稍后将在介绍*PixieApp详细信息*页面时展示真实的代码示例。
- en: Tip
  id: totrans-160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you have packaged the code for your main PixieApp as a Python module that
    is imported in the Notebook, you still need to declare the code for a wrapper
    PixieApp that inherits from it. This is because the PixieGateway does a static
    code analysis, looking for the `@PixieApp` notation, and if not found, the main
    PixieApp will not be properly recognized.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经将主PixieApp的代码打包为一个在笔记本中导入的Python模块，你仍然需要声明一个封装的PixieApp代码，该代码继承自主PixieApp。这是因为PixieGateway会进行静态代码分析，查找`@PixieApp`注释，如果没有找到，主PixieApp将无法被正确识别。
- en: 'For example, let''s assume that you have a PixieApp named `AwesomePixieApp`
    imported from the `awesome package`. In this case, you would put the following
    code in its own cell:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设你有一个名为`AwesomePixieApp`的PixieApp，它是从`awesome package`中导入的。在这种情况下，你需要将以下代码放入它自己的单元格中：
- en: '[PRE19]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Publishing an application
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发布应用程序
- en: In this section, we'll publish the *GitHub Tracking* application that we created in [Chapter
    3](ch03.xhtml "Chapter 3. Accelerate your Data Analysis with Python Libraries"),
    *Accelerate your Data Analysis with Python Libraries,* into a PixieGateway instance.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将发布我们在[第3章](ch03.xhtml "第3章：使用Python库加速数据分析")中创建的*GitHub跟踪*应用程序，*使用Python库加速数据分析*，并将其发布到PixieGateway实例中。
- en: Note
  id: totrans-166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can use the completed notebook from this GitHub location:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从这个GitHub位置使用已完成的笔记本：
- en: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%203/GitHub%20Tracking%20Application/GitHub%20Sample%20Application%20-%20Part%204.ipynb](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%203/GitHub%20Tracking%20Application/GitHub%20Sample%20Application%20-%20Part%204.ipynb)'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%203/GitHub%20Tracking%20Application/GitHub%20Sample%20Application%20-%20Part%204.ipynb](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%203/GitHub%20Tracking%20Application/GitHub%20Sample%20Application%20-%20Part%204.ipynb)'
- en: 'From the Notebook, run the application as usual and use the publish button
    located on the top-left of the cell output, to start the process:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 从笔记本中，像往常一样运行应用程序，并使用位于单元输出左上方的发布按钮，开始该过程：
- en: '![Publishing an application](img/B09699_04_05.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![发布应用程序](img/B09699_04_05.jpg)'
- en: Invoke the publish dialog
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 调用发布对话框
- en: 'The publish dialog has multiple tab menus:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 发布对话框包含多个标签菜单：
- en: '**Options**:'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**选项**：'
- en: '**PixieGateway Server**: For example, `http://localhost:8899`'
  id: totrans-174
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PixieGateway 服务器**：例如，`http://localhost:8899`'
- en: '**Page Title**: A short description that will be used as the page title when
    displayed in the browser'
  id: totrans-175
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**页面标题**：一个简短的描述，将作为浏览器中显示时的页面标题'
- en: '**Security**: Configure the PixieApp security when accessed through the web:'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全性**：通过网页访问时，请配置 PixieApp 的安全性：'
- en: '**No security**'
  id: totrans-177
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无安全性**'
- en: '**Token**: A security token must be added as a query parameter to the URL,
    for example, `http://localhost:8899/GitHubTracking?token=941b3990d5c0464586d67e48705b9deb`.'
  id: totrans-178
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**令牌**：必须将安全令牌作为查询参数添加到 URL 中，例如，`http://localhost:8899/GitHubTracking?token=941b3990d5c0464586d67e48705b9deb`。'
- en: Note
  id: totrans-179
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Note**: At this time, PixieGateway doesn''t provide any authentication/authorization
    mechanism. Third party authorization, such as OAuth 2.0 ([https://oauth.net/2](https://oauth.net/2)),
    JWT ([https://jwt.io](https://jwt.io)), and others will be added in the future.'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**注意**：此时，PixieGateway 并未提供任何身份验证/授权机制。第三方授权，如 OAuth 2.0（[https://oauth.net/2](https://oauth.net/2)）、JWT（[https://jwt.io](https://jwt.io)）等，将在未来添加。'
- en: '**Imports**: Display the list of Python package dependencies automatically
    detected by the PixieDust publisher. These imported packages will be automatically
    installed, if not already present, on the kernel where the application is running.
    When detecting a particular dependency, PixieDust looks at the current system
    to get the version and install location, for example, PyPi or a custom install
    URL such as a GitHub repo, for example.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**导入**：显示 PixieDust 发布器自动检测到的 Python 包依赖列表。这些导入的包将自动安装，如果目标内核中没有这些包的话。当检测到某个特定的依赖项时，PixieDust
    会查看当前系统的版本和安装位置，例如，PyPi 或者自定义的安装 URL（如 GitHub 仓库等）。'
- en: '**Kernel Spec**: This is where you can choose a kernel spec for your PixieApp.
    By default, PixieDust selects the default kernel available on the PixieGateway
    server but if, for example, your Notebook relies on Apache Spark, you should be
    able to pick a kernel that supports it. This option can also be changed after
    the PixieApp has been deployed using the admin console.'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内核规格**：在这里，您可以为 PixieApp 选择内核规格。默认情况下，PixieDust 会选择 PixieGateway 服务器上可用的默认内核，但如果您的笔记本依赖于
    Apache Spark，例如，您应该能够选择一个支持该功能的内核。此选项也可以在 PixieApp 部署后，通过管理员控制台进行更改。'
- en: 'Here''s a sample screenshot of the PixieApp publish dialog:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 PixieApp 发布对话框的示例截图：
- en: '![Publishing an application](img/B09699_04_06.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![发布应用程序](img/B09699_04_06.jpg)'
- en: PixieApp publish dialog
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: PixieApp 发布对话框
- en: 'Clicking the **Publish** button will start the publishing process. Upon completion
    (which depending on the size of the Notebook is pretty fast), you''ll see the
    following screen:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 单击 **发布** 按钮将启动发布过程。完成后（根据笔记本的大小，通常非常快速），您将看到以下屏幕：
- en: '![Publishing an application](img/B09699_04_07.jpg)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![发布应用程序](img/B09699_04_07.jpg)'
- en: Successful publish screen
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 成功发布屏幕
- en: 'You can then test the application by clicking on the provided link, which you
    can copy and share with users on your team. The following screenshot shows the
    three main screens of the *GitHub Tracking* application running as a web application
    on the PixieGateway:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以通过单击提供的链接来测试该应用程序，您可以复制该链接并与团队中的其他用户共享。以下截图显示了 *GitHub Tracking* 应用程序作为
    Web 应用程序在 PixieGateway 上运行的三个主要屏幕：
- en: '![Publishing an application](img/B09699_04_08.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![发布应用程序](img/B09699_04_08.jpg)'
- en: PixieApp running as a web application
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: PixieApp 作为 Web 应用程序运行
- en: 'Now that you know how to publish a PixieApp, let''s review a few developer
    best practices and rules that will help you optimize PixieApps that are intended
    to be published as web applications:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经知道如何发布PixieApp，接下来我们来回顾一些开发者最佳实践和规则，这些规则将帮助你优化那些打算发布为Web应用的PixieApp：
- en: A PixieApp instance is created for each user session, therefore to improve performances,
    make sure that it doesn't include code that is long-running or that loads a large
    amount of static data (data that doesn't change often). Instead, place it in the
    warmup code section and reference it from the PixieApp as needed.
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个用户会话都会创建一个PixieApp实例，因此为了提高性能，确保其中不包含长时间运行的代码或加载大量静态数据（不常更改的数据）。相反，将其放在热身代码部分，并根据需要从PixieApp中引用。
- en: 'Don''t forget to add the code that runs the PixieApp in the same cell. If not,
    you''ll end up with a blank page when running it on the web. As a good practice,
    it is recommended to assign the PixieApp instance into its own variable. For example,
    do this:'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要忘记在同一个单元格中添加运行PixieApp的代码。如果没有这样做，运行时会在网页上显示一个空白页面。作为一种良好的实践，建议将PixieApp实例分配到一个单独的变量中。例如，可以这样做：
- en: '[PRE20]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: That's instead of the following
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是替代以下代码的做法
- en: '[PRE21]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: You can have multiple PixieApp classes declared in the same Notebook, which
    is needed if you are using child PixieApp or PixieApp inheritance. However, only
    one of them can be the main PixieApp, which the PixieGateway will run. It is the
    one that has the extra code that instantiates and runs the PixieApp.
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在同一个Notebook中声明多个PixieApp类，如果你使用子PixieApp或PixieApp继承，这会是必要的。但是，只有其中一个可以是主PixieApp，它是PixieGateway运行的那个。这个类包含了额外的代码，用于实例化并运行PixieApp。
- en: 'It''s a good idea to add a Docstring ([https://www.python.org/dev/peps/pep-0257](https://www.python.org/dev/peps/pep-0257))
    to your PixieApp class that gives a short description of the application. As we''ll
    see in the *PixieGateway admin Console* section, later in this chapter, this docstring
    will be displayed in the PixieGateway admin console, as in the following example:'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为你的PixieApp类添加文档字符串（[https://www.python.org/dev/peps/pep-0257](https://www.python.org/dev/peps/pep-0257)）是一个好主意，它简要描述应用程序的功能。正如我们在本章稍后的*PixieGateway管理控制台*部分中所看到的，这个文档字符串将在PixieGateway管理控制台中显示，如以下示例所示：
- en: '[PRE22]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Encoding state in the PixieApp URL
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在PixieApp URL中编码状态
- en: In some cases, you may want to capture the state of a PixieApp in the URL as
    query parameters so that it can be bookmarked and/or shared with other people.
    The idea is that, when using query parameters, the PixieApp doesn't start from
    the main screen but rather automatically activates the route corresponding to
    the parameters. For example, in the *GitHub Tracking* application, you could use
    `http://localhost:8899/pixieapp/GitHubTracking?query=pixiedust` to bypass the
    initial screen and jump directly to the table showing the list of repositories
    that match the given query.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，你可能希望将PixieApp的状态捕捉到URL中作为查询参数，以便可以书签化和/或与其他人共享。这个思路是，当使用查询参数时，PixieApp不会从主屏幕开始，而是自动激活与参数相对应的路由。例如，在*GitHub
    Tracking*应用中，你可以使用`http://localhost:8899/pixieapp/GitHubTracking?query=pixiedust`来跳过初始屏幕，直接进入显示与给定查询匹配的仓库列表的表格。
- en: You can have the query parameters automatically added to the URL when the route
    is activated by adding the `persist_args` special argument to the route.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在路由中添加`persist_args`特殊参数，使查询参数在路由激活时自动添加到URL中。
- en: 'It would look like this for the `do_search()` route:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`do_search()`路由，它看起来应该是这样的：
- en: '[PRE23]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Note
  id: totrans-206
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can find the code file here:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里找到代码文件：
- en: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%204/sampleCode1.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%204/sampleCode1.py)'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%204/sampleCode1.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%204/sampleCode1.py)'
- en: The `persist_args` keyword argument does not affect how the route is activated.
    It is only there to automatically add the proper query arguments to the URL when
    activated. You can try to make this simple change in the Notebook, republish the
    PixieApp to the PixieGateway server, and try it out. As soon as you hit the submit
    button on the first screen, you'll notice that the URL is automatically updated
    to include the query argument.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '`persist_args`关键字参数不会影响路由的激活方式。它只是为了在路由激活时自动将适当的查询参数添加到URL中。你可以尝试在Notebook中做出这个简单的更改，重新发布PixieApp到PixieGateway服务器并进行测试。当你在第一个屏幕上点击提交按钮时，你会发现URL会自动更新，包含查询参数。'
- en: Note
  id: totrans-210
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Note**: The `persist_args` argument also works when running in the Notebook
    although the implementation is different since we don''t have a URL. Instead,
    the parameters are added to the cell metadata using the `pixieapp` key, as shown
    in the following screenshot:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：`persist_args` 参数在 Notebook 中运行时也能工作，尽管实现方式不同，因为我们没有 URL。相反，参数会通过 `pixieapp`
    键添加到单元格元数据中，如下图所示：'
- en: '![Encoding state in the PixieApp URL](img/B09699_04_09.jpg)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![PixieApp URL中的编码状态](img/B09699_04_09.jpg)'
- en: Cell metadata showing the PixieApp parameters
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 显示 PixieApp 参数的单元格元数据
- en: If you are using the `persist_args` feature, you may find that, while doing
    iterative development, it becomes cumbersome to always go to the cell metadata
    to remove the parameters. As a shortcut, the PixieApp framework adds a home button
    in the top-right toolbar to reset the arguments with a single click.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用 `persist_args` 功能，可能会发现，在进行迭代开发时，每次都去单元格元数据中移除参数会变得很麻烦。作为快捷方式，PixieApp
    框架在右上角的工具栏中添加了一个主页按钮，单击即可重置参数。
- en: 'As an alternative, you could also avoid saving the route arguments in the cell
    metadata altogether when running in the Notebook (but still save them while running
    on the web). To do that, you would need to use `web` as the value for the `persist_args`
    argument instead of `true`:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 作为替代方案，您也可以完全避免在 Notebook 中运行时将路由参数保存到单元格元数据中（但在 Web 上运行时仍然保存）。为此，您需要使用 `web`
    作为 `persist_args` 参数的值，而不是 `true`：
- en: '[PRE24]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Sharing charts by publishing them as web pages
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过将图表发布为网页进行分享
- en: In this section, we show how to easily share a chart created by the `display()`
    API and publish it as a web page.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们展示了如何轻松分享通过 `display()` API 创建的图表，并将其发布为网页。
- en: 'Using the example from [Chapter 2](ch02.xhtml "Chapter 2. Python and Jupyter
    Notebooks to Power your Data Analysis"), *Python and Jupyter Notebooks to Power
    your Data Analysis,* let''s load the cars performance dataset and create a chart
    using `display()`:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [第二章](ch02.xhtml "第二章。使用 Python 和 Jupyter Notebooks 来增强数据分析")中的示例，*使用 Python
    和 Jupyter Notebooks 来增强数据分析*，让我们加载汽车性能数据集并使用 `display()` 创建一个图表：
- en: '[PRE25]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Note
  id: totrans-221
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can find the code file here:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在这里找到代码文件：
- en: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%204/sampleCode2.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%204/sampleCode2.py)'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%204/sampleCode2.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%204/sampleCode2.py)'
- en: 'In the PixieDust output interface, select the **Bar Chart** menu, then in the
    options dialog, select `horsepower` for the **Keys** and `mpg` for the **Values,**
    as shown in the following screenshot:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PixieDust 输出界面中，选择 **柱状图** 菜单，然后在选项对话框中选择 `horsepower` 作为 **Keys** 和 `mpg`
    作为 **Values**，如图所示：
- en: '![Sharing charts by publishing them as web pages](img/B09699_04_10.jpg)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![通过将图表发布为网页进行分享](img/B09699_04_10.jpg)'
- en: PixieDust Chart options
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: PixieDust 图表选项
- en: 'We then use the **Share** button to invoke the chart sharing dialog as shown
    in the following screenshot, which uses Bokeh as the renderer:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用**分享**按钮来调用图表分享对话框，如下图所示，使用 Bokeh 作为渲染器：
- en: Note
  id: totrans-228
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Note**: Chart sharing works with any renderer, and I encourage you to try
    it with other renderers such as Matplotlib and Mapbox.'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：图表分享适用于任何渲染器，我鼓励您尝试使用其他渲染器，如 Matplotlib 和 Mapbox。'
- en: '![Sharing charts by publishing them as web pages](img/B09699_04_11.jpg)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![通过将图表发布为网页进行分享](img/B09699_04_11.jpg)'
- en: Invoke the Share Chart dialog
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 调用分享图表对话框
- en: 'In the **Share Chart** dialog, you can specify the PixieGateway server and
    an optional description for the chart:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在**分享图表**对话框中，您可以指定 PixieGateway 服务器和图表的可选描述：
- en: Note
  id: totrans-233
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that as a convenience, PixieDust will automatically remember the last one
    used.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，作为一种便捷功能，PixieDust 会自动记住上次使用的设置。
- en: '![Sharing charts by publishing them as web pages](img/B09699_04_12.jpg)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![通过将图表发布为网页进行分享](img/B09699_04_12.jpg)'
- en: Share Chart dialog
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 分享图表对话框
- en: 'Clicking on the **Share** button will start the publishing process that takes
    the chart content to the PixieGateway and then returns a unique URL to the web
    page. Similar to the PixieApp, you can then share this URL with the team:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 单击 **分享** 按钮将启动发布过程，图表内容会传送到 PixieGateway，然后返回一个指向网页的唯一 URL。与 PixieApp 类似，您可以将此
    URL 分享给团队：
- en: '![Sharing charts by publishing them as web pages](img/B09699_04_13.jpg)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
  zh: '![通过将图表发布为网页进行分享](img/B09699_04_13.jpg)'
- en: Chart sharing confirmation dialog
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 图表分享确认对话框
- en: The confirmation dialog contains the unique URL for the chart and an HTML fragment
    that lets you embed the chart in your own web page, such as a blog post, and a
    dashboard.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 确认对话框包含图表的唯一URL以及一个HTML片段，让您将图表嵌入到自己的网页中，比如博客文章或仪表板。
- en: 'Clicking on the link will show the following PixieGateway page:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 点击链接将显示以下PixieGateway页面：
- en: '![Sharing charts by publishing them as web pages](img/B09699_04_14.jpg)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![通过将图表发布为网页来共享](img/B09699_04_14.jpg)'
- en: Chart page
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 图表页面
- en: The preceding page shows metadata about the chart, for example, **Author**,
    **Description**, and **Date,** as well as the embedded HTML fragment. Notice that
    if the chart has interactivity (as is the case for Bokeh, Brunel, or Mapbox),
    then it is preserved in the PixieGateway page.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的页面显示了图表的元数据，例如**作者**、**描述**和**日期**，以及嵌入的HTML片段。请注意，如果图表具有交互性（如Bokeh、Brunel或Mapbox），则它会在PixieGateway页面中得到保留。
- en: For example, in the preceding screenshot, the user can still wheel zoom, box
    zoom, and pan to explore the chart or download the chart as a PNG file.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在前面的截图中，用户仍然可以使用滚轮缩放、框选缩放和拖动来探索图表或将图表下载为PNG文件。
- en: 'Embedding the chart in your own page is also very easy. Simply copy the embedded
    HTML fragment anywhere in your HTML, as shown in the following example:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 将图表嵌入到您自己的页面中也非常简单。只需将嵌入的HTML片段复制到HTML的任何位置，如下例所示：
- en: '[PRE26]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Note
  id: totrans-248
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can find the code file here:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在此处找到代码文件：
- en: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%204/sampleCode3.html](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%204/sampleCode3.html)'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%204/sampleCode3.html](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%204/sampleCode3.html)'
- en: Tip
  id: totrans-251
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Embedded chart objects must use the same level of security or higher as the
    browser. If not, the browser will throw a Mixed Content error. For example, if
    the host page is loaded over HTTPS, then the embedded chart must also be loaded
    over HTTPS, which means that you'll need to enable HTTPS in the PixieGateway server.
    You can also visit [http://jupyter-kernel-gateway.readthedocs.io/en/latest/config-options.html](http://jupyter-kernel-gateway.readthedocs.io/en/latest/config-options.html)
    to configure an SSL/TLS certificate for the PixieGateway server. Another solution
    that is easier to maintain would be to configure an Ingress service for the Kubernetes
    cluster that provides TLS termination.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌入的图表对象必须使用与浏览器相同级别或更高的安全性。如果不符合，浏览器将抛出混合内容错误。例如，如果主机页面是通过HTTPS加载的，则嵌入的图表也必须通过HTTPS加载，这意味着您需要在PixieGateway服务器上启用HTTPS。您还可以访问[http://jupyter-kernel-gateway.readthedocs.io/en/latest/config-options.html](http://jupyter-kernel-gateway.readthedocs.io/en/latest/config-options.html)为PixieGateway服务器配置SSL/TLS证书。另一种更容易维护的解决方案是为提供TLS终止的Kubernetes集群配置Ingress服务。
- en: 'For convenience, we provide a template ingress YAML file for the PixieGateway
    service here: [https://github.com/ibm-watson-data-lab/pixiegateway/blob/master/etc/ingress.yml](https://github.com/ibm-watson-data-lab/pixiegateway/blob/master/etc/ingress.yml).
    You will need to update this file with the TLS host and the secret provided by
    your provider. For example, if you are using the IBM Cloud Kubernetes Service,
    you just have to enter the cluster name in the `<your cluster name>` placeholder.
    You can find more information on how to redirect HTTP to HTTPS here: [https://console.bluemix.net/docs/containers/cs_annotations.html#redirect-to-https](https://console.bluemix.net/docs/containers/cs_annotations.html#redirect-to-https).
    Ingress services are a great way to improve security, reliability, and protect
    against DDOS attacks. For example, you can set various limits, such as the number
    of requests/connections per seconds allowed for each unique IP address or maximum
    bandwidth allowed. For more information please see [https://kubernetes.io/docs/concepts/services-networking/ingress](https://kubernetes.io/docs/concepts/services-networking/ingress).'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便起见，我们在此提供了一个PixieGateway服务的模板入口YAML文件：[https://github.com/ibm-watson-data-lab/pixiegateway/blob/master/etc/ingress.yml](https://github.com/ibm-watson-data-lab/pixiegateway/blob/master/etc/ingress.yml)。您需要使用提供的TLS主机和密钥更新此文件。例如，如果您使用的是IBM
    Cloud Kubernetes服务，只需在`<your cluster name>`占位符中输入集群名称。有关如何将HTTP重定向到HTTPS的更多信息，请参阅：[https://console.bluemix.net/docs/containers/cs_annotations.html#redirect-to-https](https://console.bluemix.net/docs/containers/cs_annotations.html#redirect-to-https)。入口服务是提高安全性、可靠性并防止DDOS攻击的好方法。例如，您可以设置各种限制，例如允许每个唯一IP地址每秒的请求/连接次数或最大带宽限制。有关更多信息，请参见[https://kubernetes.io/docs/concepts/services-networking/ingress](https://kubernetes.io/docs/concepts/services-networking/ingress)。
- en: PixieGateway admin console
  id: totrans-254
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PixieGateway 管理控制台
- en: The admin console is a great tool to manage your resources and troubleshoot
    them. You can access it using the `/admin` URL. Notice that you will need to authenticate
    with the user/password that you configured (see the *PixieGateway server configuration*
    section for instructions on how to configure the user/password in this chapter;
    by default the user is `admin` and the password is <blank>).
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 管理控制台是管理资源和进行故障排除的好工具。你可以通过`/admin`网址访问它。请注意，你需要使用你配置的用户名/密码进行身份验证（关于如何配置用户名/密码的说明，请参见本章中的*PixieGateway服务器配置*部分；默认情况下，用户名是`admin`，密码为空）。
- en: 'The user interface for the admin console is composed of multiple menus focused
    on a specific task. Let''s look at them one by one:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 管理控制台的用户界面由多个菜单组成，集中在特定任务上。让我们逐一查看：
- en: '**PixieApps**:'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PixieApps**：'
- en: 'Information about all the deployed PixieApps: URL, description, and so on'
  id: totrans-258
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于所有已部署PixieApps的信息：网址、描述等
- en: Security management
  id: totrans-259
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全管理
- en: Actions, for example, delete, and download
  id: totrans-260
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作，例如，删除和下载
- en: '![PixieGateway admin console](img/B09699_04_15.jpg)'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![PixieGateway 管理控制台](img/B09699_04_15.jpg)'
- en: Admin console PixieApp management page
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 管理控制台PixieApp管理页面
- en: '**Charts**:'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**图表**：'
- en: 'Information about all the published charts: link, preview, and so on'
  id: totrans-264
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于所有已发布图表的信息：链接、预览等
- en: Actions, for example, delete, download, and embed fragment
  id: totrans-265
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作，例如，删除、下载和嵌入片段
- en: '![PixieGateway admin console](img/B09699_04_16.jpg)'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![PixieGateway 管理控制台](img/B09699_04_16.jpg)'
- en: Admin console chart management page
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 管理控制台图表管理页面
- en: '**Kernel Stats**:'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内核统计**：'
- en: 'The following screenshot shows the **Kernel Stats** screen:'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下截图显示了**内核统计**屏幕：
- en: '![PixieGateway admin console](img/B09699_04_17.jpg)'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![PixieGateway 管理控制台](img/B09699_04_17.jpg)'
- en: Admin console Kernel Stats page
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 管理控制台内核统计页面
- en: 'This screen shows a live table of all the kernels currently running in the
    PixieGateway. Each row contains the following information:'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此屏幕显示PixieGateway中当前运行的所有内核的实时表格。每一行包含以下信息：
- en: '**Kernel Name**: This is the name of the kernel with a drill-down link, which
    shows the **Kernel Spec**, **Log**, and **Python Console**.'
  id: totrans-273
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内核名称**：这是带有深入链接的内核名称，点击后会显示**内核规格**、**日志**和**Python 控制台**。'
- en: '**Status**: This shows the status as `idle` or `busy`.'
  id: totrans-274
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**状态**：这显示状态为`空闲`或`忙碌`。'
- en: '**Busy Ratio**: This is a value between 0 and 100% that denotes the kernel
    utilization since it was started.'
  id: totrans-275
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**忙碌比率**：这是一个介于0和100%之间的值，表示自启动以来内核的利用率。'
- en: '**Running Apps**: This is a list of running PixieApps. Each PixieApp is a drill-down
    link that displays the warmup code and runs code for the PixieApp. This is very
    useful for troubleshooting errors since you can see what code is being run by
    the PixieGateway.'
  id: totrans-276
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**正在运行的应用**：这是一个正在运行的PixieApps列表。每个PixieApp都是一个深入链接，显示该PixieApp的预热代码并运行代码。这对于故障排除非常有用，因为你可以查看PixieGateway正在运行的代码。'
- en: '**Users Count**: This is the number of users with open sessions in this kernel.'
  id: totrans-277
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户数量**：这是在该内核中有活动会话的用户数量。'
- en: '**Server Logs**:'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务器日志**：'
- en: Full access the tornado server log for troubleshooting
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 完整访问龙卷风服务器日志以进行故障排除
- en: '![PixieGateway admin console](img/B09699_04_18.jpg)'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![PixieGateway 管理控制台](img/B09699_04_18.jpg)'
- en: Admin console server logs page
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 管理控制台服务器日志页面
- en: Python Console
  id: totrans-282
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python 控制台
- en: The Python Console is invoked by clicking on the kernel link in the **Kernel
    Stats** screen. The admin can use it to execute any code against the kernel, which
    can be useful to troubleshoot issues.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击**内核统计**屏幕中的内核链接来调用Python控制台。管理员可以使用它来执行任何针对内核的代码，这对于故障排除非常有用。
- en: 'For example, the following screenshot shows how to invoke the PixieDust log:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下截图展示了如何调用PixieDust日志：
- en: '![Python Console](img/B09699_04_19.jpg)'
  id: totrans-285
  prefs: []
  type: TYPE_IMG
  zh: '![Python 控制台](img/B09699_04_19.jpg)'
- en: Display PixieDust log from the PixieGateway admin Python Console
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 从PixieGateway管理员Python控制台显示PixieDust日志
- en: Displaying warmup and run code for a PixieApp
  id: totrans-287
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 显示PixieApp的预热和运行代码
- en: When an execution error happens while loading a page, the PixieGateway will
    show the full Python traceback in the browser. However, the error may be hard
    to find because its root cause may be in the warmup code that is executed once
    when the PixieApp starts. One important debugging technique is to look at the
    warmup and run code executed by the PixieGateway to spot any anomalies.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 当加载页面时发生执行错误时，PixieGateway将在浏览器中显示完整的Python回溯。然而，错误可能很难找到，因为其根本原因可能在于PixieApp启动时执行一次的预热代码。一项重要的调试技巧是查看PixieGateway执行的预热和运行代码，以发现任何异常。
- en: If the error is still not obvious, you could, for example, copy the warmup and
    run code in a temporary Notebook and try to run it from there, with the hope that
    you can reproduce the error and spot the issue.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 如果错误仍然不明显，你可以例如将热身和运行代码复制到一个临时笔记本中，然后尝试从那里运行，期望能够重现错误并找出问题。
- en: 'You can access the warmup and run code by clicking on the PixieApp link on
    the **Kernel Stats** screen, which will take you to the following screen:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过点击**Kernel Stats**屏幕上的PixieApp链接来访问热身和运行代码，点击后会进入如下屏幕：
- en: '![Displaying warmup and run code for a PixieApp](img/B09699_04_20.jpg)'
  id: totrans-291
  prefs: []
  type: TYPE_IMG
  zh: '![显示PixieApp的热身和运行代码](img/B09699_04_20.jpg)'
- en: Display the warmup and run code
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 显示热身和运行代码
- en: Note that the warmup and run code do not contain the original code formatting
    and therefore can be harder to read. You can mitigate this issue by copying it
    and pasting the code into a temporary Notebook and reformatting it again.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，热身和运行代码没有原始的代码格式，因此可能较难阅读。你可以通过将其复制并粘贴到临时笔记本中，再重新格式化来缓解这个问题。
- en: Summary
  id: totrans-294
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: After reading this chapter, you should be able to install, configure, and manage
    a PixieGateway microservice server, publish charts as a web page, and deploy a PixieApp
    from a Notebook to a web application. Whether you are a data scientist working
    on analytics in a Jupyter Notebook or a developer writing and deploying applications
    targeted at the line of a business user, we've shown, in this chapter, how PixieDust
    can help accomplish your tasks more efficiently and reduce the time it takes to
    operationalize your analytics.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读完本章后，你应该能够安装、配置和管理PixieGateway微服务服务器，将图表发布为网页，并将PixieApp从笔记本部署到网页应用程序。无论你是从事Jupyter笔记本中分析的数据显示科学家，还是为业务用户编写和部署应用程序的开发者，本章展示了PixieDust如何帮助你更高效地完成任务，减少将分析运用到生产中的时间。
- en: In the next chapter, we'll look at advanced topics and best practices related
    to PixieDust and the PixieApp programming model, which will be useful when we
    go over the industry use cases and sample data pipelines in the remaining chapters.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论与PixieDust和PixieApp编程模型相关的高级主题和最佳实践，这些内容在后续章节中讨论行业用例和示例数据管道时将非常有用。
