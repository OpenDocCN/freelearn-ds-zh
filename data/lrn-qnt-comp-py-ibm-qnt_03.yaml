- en: '3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '3'
- en: Introducing and Installing Qiskit
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍和安装Qiskit
- en: In this chapter, you will learn about the **Quantum Information Science Kit**
    (**Qiskit**) and its advanced features to develop and implement various quantum
    algorithms, quantum application modules, and noise models. Qiskit (pronounced
    kiss-kit) is comprised of various features that help you build quantum circuits,
    algorithms, and applications easily, and it allows you to run them on both classical
    simulators and real quantum systems and visualize the results. In this chapter,
    you’ll also see instructions on how to install Qiskit on your local machine to
    create quantum circuits and run them on a quantum computer.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将了解**量子信息科学套件**（**Qiskit**）及其高级功能，用于开发和管理各种量子算法、量子应用模块和噪声模型。Qiskit（发音为kiss-kit）包含各种功能，可以帮助您轻松构建量子电路、算法和应用，并允许您在经典模拟器和真实量子系统上运行它们，并可视化结果。在本章中，您还将看到如何在您的本地机器上安装Qiskit以创建量子电路并在量子计算机上运行它们的说明。
- en: This chapter will also discuss how to contribute to the open-source community
    and the development of future quantum applications, as well as how to connect
    to other like-minded developers and enthusiasts via the **Qiskit community**.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章还将讨论如何为开源社区和未来量子应用的开发做出贡献，以及如何通过**Qiskit社区**连接到其他志同道合的开发者和爱好者。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Understanding quantum and classical system interconnections
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解量子与经典系统互连
- en: Understanding Qiskit APIs
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解Qiskit API
- en: Installing and configuring Qiskit on your local machine
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在您的本地机器上安装和配置Qiskit
- en: Getting support from the Qiskit community
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从Qiskit社区获取支持
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'Knowledge of GitHub is recommended as we will review how to contribute to the
    Qiskit open-source project, which is hosted on GitHub. Having **Agile** and **open-source
    development** practices is also recommended, but not required. Here is the source
    code used throughout this book: [https://github.com/PacktPublishing/Learning-Quantum-Computing-with-Python-and-IBM-Quantum-Second-Edition](https://github.com/PacktPublishing/Learning-Quantum-Computing-with-Python-and-IBM-Quantum-Second-Edition).'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 推荐了解GitHub，因为我们将在本章中回顾如何为托管在GitHub上的Qiskit开源项目做出贡献。推荐采用**敏捷**和**开源开发**实践，但不是必需的。以下是本书中使用的源代码：[https://github.com/PacktPublishing/Learning-Quantum-Computing-with-Python-and-IBM-Quantum-Second-Edition](https://github.com/PacktPublishing/Learning-Quantum-Computing-with-Python-and-IBM-Quantum-Second-Edition)。
- en: Understanding quantum and classical system interconnections
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解量子与经典系统互连
- en: In this section, we’ll review how quantum computational systems are integrated
    with classical systems. As quantum computers do not have ways to store the state
    of a qubit, there is a dependency on classical systems to provide persistent storage
    for information that is sent to or received from a quantum computer.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将回顾量子计算系统如何与经典系统集成。由于量子计算机没有存储量子比特状态的方法，因此需要依赖经典系统为发送到或从量子计算机接收的信息提供持久存储。
- en: Since most data originates from classical sources, whether they are from data
    repositories or remote sensors, there is a need to prepare the data to be used
    in a quantum system. Likewise, the results from the quantum systems need to be
    returned not in a quantum state but in binary form so that they can be read back
    to a classical system for any post-processing that’s required.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 由于大多数数据源自经典来源，无论是来自数据存储库还是远程传感器，因此需要准备数据以便在量子系统中使用。同样，量子系统的结果需要以二进制形式返回，而不是量子状态，以便它们可以被读取回经典系统进行任何所需的后期处理。
- en: 'This hybrid or interconnectivity between classical systems and quantum systems
    is what we will be reviewing in this section so that you understand how both systems
    work together to provide you with the most optimal results. Qiskit Runtime, which
    is a new feature that was introduced in early 2022, has some good examples you
    can try. There are lots of papers that describe other forms of integrating classical
    and quantum resources, such as this paper, *A Serverless Cloud Integration For
    Quantum Computing*: [https://arxiv.org/abs/2107.02007](https://arxiv.org/abs/2107.02007).'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将回顾经典系统和量子系统之间的这种混合或互连性，以便您了解这两个系统如何协同工作以提供最优化结果。Qiskit Runtime，这是2022年初引入的新功能，有一些很好的示例您可以尝试。有许多论文描述了其他形式集成经典和量子资源的方法，例如这篇论文，*用于量子计算的Serverless云集成*：[https://arxiv.org/abs/2107.02007](https://arxiv.org/abs/2107.02007)。
- en: Reviewing the Qiskit library
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看Qiskit库
- en: If you worked on some of the previous chapters, then you would have noticed
    that we used Qiskit to create sample circuits, which we used to describe some
    quantum concepts. As Python developers, you would have also noticed that Qiskit
    is functionally no different from using any other Python libraries, such as **NumPy**,
    **scikit-learn**, and so on. How we use it within our Python notebooks is also
    the same as we would use any other package, where we can import the complete package
    or just a subset of classes and functions. By having the Qiskit modules available
    through Python, this allows us to integrate our classical algorithms and applications
    into a quantum system. Leveraging the libraries available in Qiskit to create
    quantum circuits that execute on quantum devices from a classical development
    environment such as Python makes integration with your existing classical applications
    very seamless and straightforward.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经学习了前面的一些章节，那么您就会注意到我们使用了Qiskit来创建示例电路，我们用这些电路来描述一些量子概念。作为Python开发者，您也会注意到Qiskit在功能上与使用任何其他Python库（如**NumPy**、**scikit-learn**等）并无不同。我们在Python笔记本中使用它的方式也与使用任何其他包相同，我们可以导入整个包或仅导入类和函数的子集。通过在Python中提供Qiskit模块，这使得我们能够将经典算法和应用集成到量子系统中。利用Qiskit中的库创建在经典开发环境（如Python）上执行的量子电路，使得与现有经典应用的集成非常顺畅且简单。
- en: Qiskit, much like most other open-source projects, is easy to set up, both as
    a package with Python or as a branch or a fork if you’re just acting as a contributor.
    It’s very compact and does not require much with respect to resources to run on
    local machines.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Qiskit与其他大多数开源项目一样，设置起来非常简单，无论是作为Python的包，还是如果您只是作为贡献者，作为分支或分叉。它非常紧凑，在本地机器上运行时对资源的需求不大。
- en: 'Another advantage of creating it as a package for an existing platform such
    as Python is that there is no need to install a separate integrated development
    environment or set up complex build systems with confusing dependencies. For those
    of you who already have Python installed with the currently supported version,
    you can install Qiskit with a simple `pip` command:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 将其创建为现有平台（如Python）的包的另一个优点是无需安装单独的集成开发环境或设置复杂的构建系统，这些系统具有令人困惑的依赖关系。对于那些已经安装了当前支持版本的Python的用户，您可以使用简单的`pip`命令安装Qiskit：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: But let’s not get too ahead of ourselves. Now that we understand the purpose
    of Qiskit and its general functionality, we will work our way to installing Qiskit
    locally by first understanding how it is organized. Then, we’ll cover how it interacts
    with your classic systems such as your laptop, server, or cloud application.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们不要过于急躁。现在我们已经了解了Qiskit的目的和其一般功能，我们将通过首先了解其组织结构来逐步安装Qiskit。然后，我们将介绍它是如何与您的经典系统（如笔记本电脑、服务器或云应用）交互的。
- en: Understanding how to organize and interact with Qiskit
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解如何组织和与Qiskit交互
- en: If you use Python for most of your development, which I assume you do, based
    on the title of this book, then you will understand that most packages are created
    in some form of hierarchy. At the top level, there are the application modules,
    while the lower levels refer to the components within each module.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的大部分开发工作都是使用Python，根据这本书的标题，我假设您确实如此，那么您会理解大多数包都是以某种形式创建的层次结构。在最高级别，有应用模块，而较低级别则指每个模块内的组件。
- en: Qiskit has components such as classes or objects, and under each of those components,
    you have functions and members. Qiskit is no different regarding how everything
    is organized from most other packages, which makes it very easy to find certain
    features.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Qiskit有诸如类或对象之类的组件，在每个组件下，您都有函数和成员。在组织方式上，Qiskit与其他大多数包并无不同，这使得找到某些功能变得非常容易。
- en: At the base level you have hardware connectors; these are what connects Qiskit
    to the various quantum providers. In addition to hardware connectors are the classical
    simulators; in this book, we will be using the Qiskit Runtime service to run our
    circuits, which includes some locally installed Qiskit simulators. Of course,
    as these simulators run on classical systems, they are limited to the number of
    resources to simulate quantum circuits. As the quantum circuits become more complex,
    the cost in resources grows rather fast. This has been highlighted in various
    publications where certain complex quantum circuits can be simulated on classical
    systems; however, there are discrepancies in the accuracy across the various classical
    results. This is why having the hardware connectors available to run complex circuits
    is important, as it allows you to offload complex circuits from classical simulators
    to real quantum systems that run at utility scale. You might be asking yourself,
    *what makes a circuit complex?* Well, I can say that it does not have to do with
    relationship status. It’s more about the width of the circuit, which correlates
    to the number of qubits, and the depth of the circuit, which correlates to the
    number of operations deep, particularly the number of multi-qubit gates that entangle
    two or more qubits together. We’ll cover details about each of these in more detail
    as you progress through the book.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在基础层，您有硬件连接器；这些是连接Qiskit到各种量子提供商的东西。除了硬件连接器之外，还有经典模拟器；在这本书中，我们将使用Qiskit Runtime服务来运行我们的电路，这包括一些本地安装的Qiskit模拟器。当然，由于这些模拟器在经典系统上运行，它们在模拟量子电路的资源数量上是有限的。随着量子电路变得更加复杂，资源成本增长相当快。这一点已在各种出版物中得到强调，其中某些复杂的量子电路可以在经典系统上模拟；然而，各种经典结果之间的准确性存在差异。这就是为什么拥有可供运行复杂电路的硬件连接器很重要，因为它允许您将复杂电路从经典模拟器卸载到运行在实用规模的真正量子系统。您可能会问自己，“什么使电路变得复杂？”好吧，我可以这样说，这并不涉及关系状态。这更多关于电路的宽度，它与量子比特的数量相关，以及电路的深度，这与操作的深度相关，尤其是将两个或更多量子比特纠缠在一起的多量子比特门的数量。随着您在本书中的进展，我们将更详细地介绍这些细节。
- en: Above the connectors and simulators is the fundamental building block for researchers
    and developers, the Qiskit Runtime. We will go deeper into what the Qiskit Runtime
    is in later chapters, but for now just think of it as a runtime that provides
    you with a lot of features to create, run, and optimize your quantum circuits.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接器和模拟器之上，是研究人员和开发者所依赖的基本构建块，即Qiskit Runtime。我们将在后续章节中更深入地探讨Qiskit Runtime是什么，但在此阶段，只需将其视为一个提供大量功能以创建、运行和优化您的量子电路的运行时。
- en: 'In the previous versions of Qiskit, the modules were set up such that the domain
    of each algorithm was spread out: by that, I mean the modules covered error correction,
    simulators, gate and circuit components, and applications. In this case, an algorithm
    developer would have to learn how to incorporate multiple modules together, therefore
    causing the developer to have to understand the various components and modules
    at the base level to incorporate them into their application. This has since changed
    after the introduction of the latest code changes to Qiskit.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在Qiskit的先前版本中，模块的设置使得每个算法的领域分布较广：我的意思是，这些模块涵盖了纠错、模拟器、门和电路组件以及应用。在这种情况下，算法开发者必须学习如何将多个模块结合在一起，因此开发者必须理解基础层面的各种组件和模块，以便将它们集成到他们的应用中。自从引入Qiskit的最新代码更改后，这种情况已经发生了变化。
- en: First, we need to introduce the three development layers or segments, which
    allow developers to provide modules to each other to help create quantum applications.
    Having these three layers, which are not that much different from classical application
    development, allows classical developers to solely focus on their own layer, which
    eliminates the need to fully understand what is occurring at another layer. Let’s
    take a quick look at the three development layers.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要介绍三个开发层或部分，这些层允许开发者相互提供模块以帮助创建量子应用。这三个层与经典应用开发没有太大区别，使得经典开发者可以专注于自己的层，从而消除了完全理解另一层发生的必要。让我们快速看一下这三个开发层。
- en: A **kernel** developer is one who develops code at the lowest level of the three
    layers. They work mostly on creating quantum circuits, the composition of gates,
    hardware pulse level controls, and other features that are close to the hardware.
    Qiskit Terra is the module that the kernel developer would work with, which includes
    the circuit library that allows them to create new or use existing circuits.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内核**开发者是在三个层次中开发代码的人。他们主要工作于创建量子电路、门组合、硬件脉冲级控制和其他接近硬件的功能。Qiskit Terra是内核开发者将与之合作的模块，其中包括电路库，使他们能够创建新电路或使用现有电路。'
- en: An **algorithm** developer is one who leverages the circuits created by the
    kernel developer to create quantum algorithms. These algorithms can provide ways
    to encode classical data into a quantum state. For example, the information of
    a pixel can be represented as a quantum state where the qubits would represent
    the location and color value of each pixel of an image. They can also create a
    quantum algorithm that would not need to encode any classical data at all. The
    algorithm developer could also include some of the latest Qiskit features that
    provide infrastructure optimizations, such as the Qiskit Runtime, so that the
    integration of classical and quantum systems is robust.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**算法**开发者是利用内核开发者创建的电路来创建量子算法的人。这些算法可以提供将经典数据编码成量子状态的方法。例如，像素的信息可以表示为一个量子状态，其中量子比特将代表图像中每个像素的位置和颜色值。他们还可以创建一个不需要编码任何经典数据的量子算法。算法开发者还可以包括一些最新的Qiskit特性，如Qiskit
    Runtime，以提供基础设施优化，从而使经典和量子系统的集成更加稳健。'
- en: A **model** developer is one who applies algorithms to create applications that
    solve real-world problems. These model developers can be domain or industry experts
    that understand the problems that may be intractable for classical systems and
    determine how to apply quantum algorithms to these problems. By creating models
    for certain problems, the model developer could provide a quantum application
    that could, for example, integrate as part of a large workflow or as a service
    provider, which classical applications could call upon as needed.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型**开发者是将算法应用于创建解决现实世界问题的应用程序的人。这些模型开发者可以是领域或行业专家，他们了解经典系统可能难以处理的问题，并确定如何将这些量子算法应用于这些问题。通过为某些问题创建模型，模型开发者可以提供一个量子应用程序，例如，可以作为大型工作流程的一部分或作为服务提供商，经典应用程序可以根据需要调用。'
- en: These three layers working together allow the developer to focus solely within
    their layer to develop components that could provide the others with the tools
    they need to enhance their applications. This also facilitates collaboration between
    each of the developers, as they can provide feedback to each other to further
    optimize their components.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这三个层次共同工作，使开发者能够专注于其层内开发组件，这些组件可以为其他人提供他们需要增强应用程序的工具。这也促进了开发者之间的协作，因为他们可以相互提供反馈，以进一步优化他们的组件。
- en: The following diagram illustrates the layers and what Qiskit libraries or components
    would generally apply to each developer type.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的图示说明了层以及Qiskit库或组件通常适用于每种开发者类型。
- en: '![A diagram of a software  Description automatically generated](img/B18420_03_01.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![软件描述自动生成的图](img/B18420_03_01.png)'
- en: 'Figure 3.1: Kernel, Algorithm, and Model developer layers'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.1：内核、算法和模型开发者层次
- en: Of course, the preceding information is based on the current version of Qiskit.
    In the future, like many projects, this may change. I highly recommend keeping
    up to date with the current **Application Programming Interface** (**API**) documentation
    to ensure that you are using the proper calls when writing your code. The API
    for this can be found on the Qiskit documentation page at [https://www.qiskit.org/documentation/](https://www.qiskit.org/documentation/).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，前面的信息是基于Qiskit当前版本的。在未来，像许多项目一样，这可能会改变。我强烈建议您保持与当前**应用程序编程接口**（**API**）文档的最新同步，以确保在编写代码时使用正确的调用。此API可以在Qiskit文档页面上找到，网址为[https://www.qiskit.org/documentation/](https://www.qiskit.org/documentation/)。
- en: The documentation page provides the latest information on the four available
    modules, often referred to as elements due to their names, as explained at the
    beginning of this chapter.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 文档页面提供了有关四个可用模块的最新信息，通常由于它们的名称而被称为元素，如本章开头所述。
- en: So far, we have defined the three different development layers that help simplify
    developers jumping into programming quantum applications without too much of a
    learning curve. For example, a model developer might only need to understand how
    the quantum algorithms work to create a model for a classical application rather
    than having to also learn which gates the circuits used to create the algorithm.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经定义了三个不同的开发层次，这些层次有助于简化开发者跳入编程量子应用的过程，而无需过多的学习曲线。例如，一个模型开发者可能只需要了解量子算法是如何工作的，以便为经典应用创建一个模型，而不是还需要学习创建算法所使用的哪些门。
- en: The following section will describe the API references so that you understand
    how to leverage them in your code. The development specifics will be covered in
    future chapters, where we will talk about the functionality and operations that
    each can provide.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 以下部分将描述 API 参考，以便您了解如何在代码中利用它们。开发的具体细节将在未来的章节中介绍，我们将讨论每个 API 可以提供的功能和操作。
- en: Understanding Qiskit APIs
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 Qiskit API
- en: Qiskit was built for anyone who wants to work with quantum computers at every
    level and domain. By this, we mean that if a quantum researcher wanted to work
    on how the pulses are scheduled on a quantum device, they could do so very easily.
    The same can be said about users who simply want to extend their applications
    to leverage a quantum computer to compute information.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Qiskit 是为任何想在各个层次和领域与量子计算机一起工作的人而构建的。通过这种方式，我们是指，如果量子研究人员想研究量子设备上脉冲的安排方式，他们可以非常容易地做到这一点。同样，对于只想将他们的应用程序扩展以利用量子计算机来计算信息的人来说也是如此。
- en: In this section, we will learn about the various APIs that are available in
    Qiskit today. As mentioned earlier, Qiskit has various layers that can be leveraged
    by any domain expert to start using quantum computing in their applications.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将了解 Qiskit 当今可用的各种 API。如前所述，Qiskit 拥有多种层次，任何领域的专家都可以利用这些层次开始在其应用中使用量子计算。
- en: Let’s take, for example, chemistry researchers who wish to compute the energy
    state of two molecules but don’t want to go through the hassle of learning about
    quantum gates and pulses. They just want to load their dataset, classically, to
    a quantum algorithm and obtain the results transparently. Qiskit was built as
    a full stack open-source software package to facilitate those and many more user-type
    scenarios using the application modules.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 以化学研究人员为例，他们希望计算两个分子的能量状态，但不想费心学习量子门和脉冲。他们只想将他们的数据集经典地加载到量子算法中，并透明地获得结果。Qiskit
    被构建为一个全栈开源软件包，以促进这些以及其他更多用户场景的应用模块。
- en: Quantum physicists can experiment at the hardware level by researching ways
    to schedule pulses to single and multi-qubits. Quantum researchers can work on
    developing quantum circuits that could minimize noise, which would optimize the
    results of your quantum circuits.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 量子物理学家可以通过研究如何安排脉冲到单比特和多比特硬件级别进行实验。量子研究人员可以致力于开发量子电路，以最小化噪声，这将优化您的量子电路的结果。
- en: Algorithm researchers and developers usually work on creating quantum algorithms
    that can be used by various domains and industries either to solve problems faster
    or provide more accurate results.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 算法研究人员和开发者通常致力于创建量子算法，这些算法可以被各个领域和行业使用，要么更快地解决问题，要么提供更准确的结果。
- en: Finally, domain researchers such as chemists, data scientists, economists, and
    many others can integrate their classic applications into a quantum system to
    compute complex problems more optimally or accurately using various features such
    as the Qiskit Runtime.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，领域研究人员，如化学家、数据科学家、经济学家以及许多人，可以将他们的经典应用集成到量子系统中，利用各种功能，如 Qiskit Runtime，以更优化或更准确地计算复杂问题。
- en: Qiskit, at the time of writing, has released its latest version, Qiskit 1.0\.
    This new version provides you with a lot of great features that will take your
    development skills to the next level. Most particularly to the new era of quantum
    utility!
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，Qiskit 已经发布了其最新版本，Qiskit 1.0。这个新版本为您提供了许多出色的功能，将把您的开发技能提升到新的水平。尤其是针对量子实用性的新时代！
- en: Let’s start off by learning about the built-in simulators that are available
    in Qiskit. The simulators are great for getting started, but as your development
    skills and understanding of quantum increase, so to will your need to run more
    complex circuits where classical simulators, such as those described herein, could
    have some limitations.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从了解 Qiskit 中可用的内置模拟器开始。模拟器非常适合入门，但随着你的开发技能和对量子计算的深入理解，你对运行更复杂电路的需求也会增加，而经典模拟器，如本文中描述的，可能存在一些限制。
- en: Aer
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Aer
- en: 'Before getting into what Aer is, let’s first make sure we install it, as Aer
    has moved to its own separate component and as it makes sense to run some simulations
    when starting, do install it onto your system as it is now a requirement if you
    plan to run local simulations on your classical system. Simply run `pip install
    qiskit-aer` from your command line, or Python environment, and that should be
    all you need. Aer provides a framework that can be used to develop debugging tools
    and create noise models. These tools help replicate a lot of the characteristics
    of a quantum system by simulating the noise that affects not just the qubit but
    also the environment and computations. There are generally five highly efficient
    compiled *simulator categories* available in Aer; they are:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入了解 Aer 之前，我们首先确保已经安装了它，因为 Aer 已经迁移到其独立的组件中，并且当开始运行一些模拟时，将其安装到你的系统中是有意义的，因为它现在是你计划在经典系统上运行本地模拟的必要条件。只需从你的命令行或
    Python 环境中运行 `pip install qiskit-aer` 即可，这样应该就足够了。Aer 提供了一个框架，可用于开发调试工具和创建噪声模型。这些工具通过模拟影响不仅仅是量子比特，还包括环境和计算的噪声，从而帮助复制量子系统的大量特性。在
    Aer 中通常有五种高度高效的编译**模拟器类别**可用；它们是：
- en: '**AerProvider**, the main class that contains all the simulators'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AerProvider**，包含所有模拟器的主要类'
- en: '**QasmSimulator**, a quantum simulator that allows for simulation methods and
    options'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**QasmSimulator**，一个允许进行模拟方法和选项的量子模拟器'
- en: '**StatevectorSimulator**, an ideal quantum state vector simulator used to produce
    non-noisy results from your circuit'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**StatevectorSimulator**，一个理想的量子状态矢量模拟器，用于从你的电路中产生无噪声的结果'
- en: '**UnitarySimulator**, an ideal quantum unitary simulator'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**UnitarySimulator**，一个理想的量子单位算子模拟器'
- en: '**Pulse**, a simulator used to generate and schedule pulse operations'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Pulse**，一个用于生成和调度脉冲操作的模拟器'
- en: Note, there is discussion over whether **Pulse** will be removed in the near
    future. It’s included here for the sake of completeness, but it may not always
    be available. For that reason, we will not explore Pulse further in this chapter.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，关于**Pulse**是否将在不久的将来被移除存在讨论。它被包含在这里是为了完整性，但它可能并不总是可用。因此，我们不会在本章中进一步探讨 Pulse。
- en: We will look at the differences between each simulator category in the upcoming
    sections and in *Chapter 9*, *Simulating Quantum Systems and Noise Models*, you
    will learn more about the specific simulators within each category, including
    those within Aer itself.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '我们将在接下来的章节中查看每个模拟器类别之间的差异，并在第 9 章“模拟量子系统和噪声模型”中，你将了解每个类别中特定的模拟器，包括 Aer 中的那些模拟器。 '
- en: The Aer simulator
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Aer 模拟器
- en: Aer itself is also a category that contains a list of its own types of simulators
    that are specific to obtaining specific information about the quantum circuit,
    such as the density matrix, matrix product state, and multiple stabilizer simulators.
    This simulator is the main simulator to reproduce how an actual backend system
    can behave and includes an `options` object, which can be used to provide parameters
    such as density matrices to reproduce noise typically found in a quantum system.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Aer 本身也是一个类别，其中包含其自己的模拟器列表，这些模拟器专门用于获取有关量子电路的特定信息，例如密度矩阵、矩阵乘积状态和多稳定器模拟器。这个模拟器是主要的模拟器，用于再现实际后端系统可能的行为，并包括一个
    `options` 对象，该对象可用于提供如密度矩阵等参数，以再现量子系统中通常发现的噪声。
- en: The Qasm simulator
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Qasm 模拟器
- en: The **Qasm** simulator allows us to run our circuits in both clean and noisy
    simulated environments. The difference between the two is the amount of noise
    that you wish to apply to the simulator. On the one hand, it could run as an error-free
    ideal system that you can use to confirm the computational results of your circuit.
    On the other hand, you could run your circuit through a simulator that includes
    noise models so that you can replicate the noise and understand how it affects
    your computations. We will learn more about noise and noise models in *Chapter
    10*, *Understanding and Mitigating Quantum Noise*.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**Qasm**模拟器允许我们在干净和有噪声的模拟环境中运行我们的电路。两者之间的区别是您希望应用到模拟器中的噪声量。一方面，它可以作为一个无错误的理想系统运行，您可以使用它来确认电路的计算结果。另一方面，您可以通过包含噪声模型的模拟器运行您的电路，以便您可以复制噪声并了解它如何影响您的计算。我们将在第10章*理解和缓解量子噪声*中了解更多关于噪声和噪声模型的内容。'
- en: The Qasm simulator also has multi-functional capabilities and methods to simulate
    circuits, such as `statevector`, `density_matrix`, `stabilizer`, `matrix_product_state`,
    and many more. By allowing you the flexibility to configure the Qasm simulator
    using any of these methods, you can expect an ideal outcome from the measured
    circuits, along with any models that you wish to incorporate.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Qasm模拟器还具有多功能能力和模拟电路的方法，例如`statevector`、`density_matrix`、`stabilizer`、`matrix_product_state`等。通过允许您使用这些方法中的任何一种来配置Qasm模拟器，您可以期望从测量的电路中获得理想的结果，以及您希望结合的任何模型。
- en: The Qasm simulator also provides a list of backend options you can use to execute
    your quantum circuit. These options include setting threshold values to truncate
    results or setting floating-point precision values and maximum value constraints
    for executing circuits. These features make Aer the ideal component for those
    who wish to develop an ideal or replicated noisy system. Typically, Aer is used
    by researchers who wish to develop noise mitigation or error correction techniques.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Qasm模拟器还提供了一组后端选项，您可以使用这些选项来执行您的量子电路。这些选项包括设置阈值值以截断结果或设置浮点精度值和执行电路的最大值约束。这些功能使Aer成为那些希望开发理想或复制的有噪声系统的理想组件。通常，研究人员使用Aer来开发噪声缓解或错误校正技术。
- en: Statevector simulator
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 状态向量模拟器
- en: The **Statevector** simulator is, as its name suggests, a state vector simulator
    that provides the final state vector of the circuit without the measurement operation
    at the end.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**状态向量**模拟器，正如其名称所暗示的，是一个状态向量模拟器，它提供电路的最终状态向量，而不包括最后的测量操作。'
- en: Results from the Statevector simulator can be visualized by leveraging the various
    visualization tools of quantum states, such as **histograms** and **cityscape**.
    The **cityscape** option provides a nice 3D view of both the real and imaginary
    components of the density matrix (![](img/Icon_1.png)). Other visualization plots
    include **Hinton** diagrams, **Pauli vector** plots, and **Bloch spheres**, to
    name a few. Some of these, such as the Bloch sphere and the qsphere and other
    visualization tools will be covered in future chapters, as they will help you
    visualize some of the effects that gates have on qubits.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过利用量子状态的多种可视化工具来可视化状态向量模拟器的结果，例如**直方图**和**城市景观**。**城市景观**选项提供了一个关于密度矩阵的实部和虚部的3D视图（![](img/Icon_1.png)）。其他可视化图包括**Hinton**图、**Pauli向量**图和**Bloch球**等。其中一些，如Bloch球、qsphere和其他可视化工具将在未来的章节中介绍，因为它们将帮助您可视化门对量子比特产生的一些效果。
- en: The Unitary simulator
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 单元模拟器
- en: The **Unitary** simulator is quite simply just that — it provides the unitary
    matrix result of your circuit by computing the overall matrix of the circuit.
    The idea is that a circuit with only unitary operators/gates each operating on
    a subset of the qubits can be expressed as a single unitary operator. This can
    be accomplished by multiplying all the operator matrices in the circuit to arrive
    at a single overall matrix/operator.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**单元**模拟器非常简单，就是那样——它通过计算电路的整体矩阵来提供电路的单元矩阵结果。其理念是，一个仅由单元算子/门组成、每个门操作量子比特子集的电路可以表示为一个单一的单元算子。这可以通过将电路中所有算子矩阵相乘来实现，从而得到一个单一的总体矩阵/算子。'
- en: This is very helpful if you want to confirm that the operations you applied
    to the qubits match your expected calculations.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于您想要确认对量子比特应用的操作与您的预期计算相匹配非常有帮助。
- en: You can imagine how helpful this will be when you start to work on multiple
    qubits with many operators. The Unitary simulator helps provide state information
    so that you can ensure that the results are what you expected.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 当您开始处理具有许多算子的多个量子位时，您可以想象这将多么有帮助。单元模拟器有助于提供状态信息，以确保结果符合您的预期。
- en: Installing and configuring Qiskit on your local machine
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在您的本地机器上安装和配置 Qiskit
- en: In this section, we will walk you through the installation process of Qiskit.
    It is important to note that to complete the examples in this book, you will need
    to install Qiskit on your machine locally, as the IBM Quantum Platform no longer
    has a lab, nor does it have any simulators to run circuits on the cloud, only
    the actual quantum systems, which you will have limited access. The installation
    will include installing Anaconda, which is the tool used by many Qiskit developers
    to install Python, Jupyter Notebooks, Qiskit, and many other data science packages.
    It also serves as a simple way to manage packages and how they are installed on
    your local machine. In our case, it will help by installing the prepackaged dependencies
    we will need, such as Python, Jupyter Notebooks, `pip`, and many others.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将向您介绍 Qiskit 的安装过程。需要注意的是，为了完成本书中的示例，您需要在您的机器上本地安装 Qiskit，因为 IBM 量子平台不再有实验室，也没有任何云上运行的电路模拟器，只有实际的量子系统，您将只能有限地访问。安装将包括安装
    Anaconda，这是许多 Qiskit 开发者用来安装 Python、Jupyter Notebooks、Qiskit 以及许多其他数据科学包的工具。它还提供了一种简单的方式来管理包以及它们在本地机器上的安装。在我们的案例中，它将帮助我们安装我们将需要的预包装依赖项，例如
    Python、Jupyter Notebooks、`pip` 以及许多其他。
- en: Once installed, you can create an environment specific to quantum development
    with all the dependencies and features already installed. By having a local installation,
    you can run your circuits from the local system onto simulators on your local
    device.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，您可以创建一个包含所有依赖项和功能的特定于量子开发的虚拟环境。通过本地安装，您可以从本地系统运行电路到本地设备上的模拟器。
- en: Preparing the installation
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备安装
- en: Qiskit is an open-source project that is available for free to everyone. It
    is licensed under the **Apache 2.0** license ([https://apache.org/licenses/LICENSE-2.0](https://apache.org/licenses/LICENSE-2.0)).
    A copy has also been included in each Qiskit module (for example, [https://www.github.com/Qiskit/qiskit/blob/master/LICENSE.txt](https://www.github.com/Qiskit/qiskit/blob/master/LICENSE.txt)).
    This allows you to use the source code, along with all its rights and privileges,
    as defined in the license.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Qiskit 是一个开源项目，对所有人免费提供。它遵循 **Apache 2.0** 许可协议 ([https://apache.org/licenses/LICENSE-2.0](https://apache.org/licenses/LICENSE-2.0))。每个
    Qiskit 模块（例如，[https://www.github.com/Qiskit/qiskit/blob/master/LICENSE.txt](https://www.github.com/Qiskit/qiskit/blob/master/LICENSE.txt)）中也包含了一份副本。这允许您使用源代码，以及根据许可证定义的所有权利和特权。
- en: The installation of Qiskit is quite simple, particularly if you are already
    familiar with the package management application known as **pip**. To review the
    Qiskit metadata package information, such as its current stable version, build
    status, and other details, go to [https://pypi.org/project/qiskit](https://pypi.org/project/qiskit).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Qiskit 的安装相当简单，尤其是如果你已经熟悉名为 **pip** 的包管理应用。要查看 Qiskit 元数据包信息，例如其当前稳定版本、构建状态和其他细节，请访问
    [https://pypi.org/project/qiskit](https://pypi.org/project/qiskit)。
- en: We have highlighted that you should install the full version as there have been
    issues with the mini version. You can, of course, try either, but if you get issues
    with the mini version, it is recommended that you install the full version.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经强调，您应该安装完整版本，因为迷你版本存在一些问题。当然，您可以尝试安装任意一个版本，但如果迷你版本出现问题，建议您安装完整版本。
- en: Installing Anaconda
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Anaconda
- en: Anaconda ([https://www.anaconda.com/distribution](https://www.anaconda.com/distribution))
    is an open-source cross-platform distribution of Python. It allows the user to
    create separate environments so that they can install multiple versions of Python.
    This is very useful, particularly for those of you who are Python developers and
    already have a version of Python installed on your machine.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Anaconda ([https://www.anaconda.com/distribution](https://www.anaconda.com/distribution))
    是一个开源的跨平台 Python 发行版。它允许用户创建独立的虚拟环境，以便他们可以安装多个 Python 版本。这对你们这些已经在机器上安装了 Python
    版本的 Python 开发者来说非常有用。
- en: By creating a separate environment using Anaconda, you can eliminate issues
    that may come up due to installing a different version of Python that may affect
    your existing Python projects or applications. Having separate environments also
    provides you with the ability to have multiple versions of Qiskit. You need to
    have a working version of Qiskit up and running while you install an update on
    a separate environment so that you can test if your quantum applications currently
    support the latest releases without worrying about dependency issues.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用Anaconda创建一个单独的环境，你可以消除由于安装不同版本的Python可能引起的问题，这可能会影响你的现有Python项目或应用程序。拥有单独的环境还使你能够拥有多个版本的Qiskit。在你安装更新时，你需要有一个正在运行的Qiskit版本，以便你可以测试你的量子应用程序是否支持最新的发布，而不用担心依赖性问题。
- en: '*It is recommended to follow the installation instructions on the Anaconda
    site*. The installation steps of Anaconda also include versions of Jupyter Notebook,
    which comes in handy, as the Qiskit notebooks will not be available locally. However,
    since the Qiskit notebooks are built on Jupyter Notebooks, you shouldn’t expect
    to see much of a difference between the two.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '*建议遵循Anaconda网站上的安装说明*。Anaconda的安装步骤还包括Jupyter Notebook的版本，这很有用，因为Qiskit笔记本将不会在本地可用。然而，由于Qiskit笔记本是基于Jupyter
    Notebook构建的，你不应该期望两者之间有太大的区别。'
- en: After installing Anaconda with the supported version of Python – at the time
    of this writing, the currently supported version is 3.9 – be sure to create an
    environment in your installation and switch to that environment before proceeding
    and installing Qiskit. Otherwise, it will install on your base environment. After
    successfully completing the installation and creating your Anaconda environment,
    you are now ready to install Qiskit!
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用支持的Python版本安装Anaconda（在撰写本文时，当前支持的版本是3.9）后，务必在你的安装中创建一个环境，并在继续安装Qiskit之前切换到该环境。否则，它将安装在你的基础环境中。在成功完成安装并创建你的Anaconda环境后，你现在就可以安装Qiskit了！
- en: Installing Qiskit
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Qiskit
- en: 'Before installing Qiskit, be sure to check the installation page ([https://docs.quantum.ibm.com/start/install](https://docs.quantum.ibm.com/start/install))
    for any updates on either the installation or configuration steps, as things might
    change. The following steps will lead you through the installation process:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装Qiskit之前，务必检查安装页面([https://docs.quantum.ibm.com/start/install](https://docs.quantum.ibm.com/start/install))，查看有关安装或配置步骤的任何更新，因为事情可能会发生变化。以下步骤将引导你完成安装过程：
- en: 'We’ll begin by ensuring that you are in the environment you created. The best
    way to determine this is to launch your command line and enter the following:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先确保你处于你创建的环境中。确定这一点最好的方法是启动你的命令行并输入以下内容：
- en: '[PRE1]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The preceding code will list all the environments on your system. You will
    see one titled `base` and another with the name of the environment that you created.
    The current environment is identified by an asterisk, as illustrated in the following
    screenshot:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码将列出你系统上的所有环境。你会看到一个标题为`base`的，另一个是你创建的环境的名称。当前环境通过一个星号标识，如下面的截图所示：
- en: '![Graphical user interface, text  Description automatically generated](img/B18420_03_02.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，自动生成文本描述](img/B18420_03_02.png)'
- en: 'Figure 3.2: Output of the current environment command'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.2：当前环境命令的输出
- en: 'As shown in the preceding screenshot, another way to identify the environment
    is to look at the far left of the command line before the machine name. There,
    in parentheses, is the current environment. In the preceding screenshot, I created
    an environment called `QiskitEnv`. Now, let’s activate the environment by running
    the following in the command line so we can enable it and start the installation
    process:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一个截图所示，识别环境的一种方法是查看机器名之前命令行最左侧的内容。在那里，括号内显示的是当前环境。在前一个截图中，我创建了一个名为`QiskitEnv`的环境。现在，让我们在命令行中运行以下命令来激活环境，以便我们可以启用它并开始安装过程：
- en: '[PRE2]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This will now activate the environment on your machine.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这将现在激活你的机器上的环境。
- en: 'For details, I recommend reviewing the documentation on getting started with
    `conda` here: [https://docs.conda.io/projects/conda/en/latest/user-guide/getting-started.html](https://docs.conda.io/projects/conda/en/latest/user-guide/getting-started.html).'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 对于详细信息，我建议查看这里关于如何开始使用`conda`的文档：[https://docs.conda.io/projects/conda/en/latest/user-guide/getting-started.html](https://docs.conda.io/projects/conda/en/latest/user-guide/getting-started.html)。
- en: 'Once you are in the Qiskit environment after activating it in the previous
    step, you can now run the `pip` command to install Qiskit:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在上一步激活 Qiskit 环境后，您现在可以运行 `pip` 命令来安装 Qiskit：
- en: '[PRE3]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Based on your machine and network speed, this may take a few moments.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您的机器和网络速度，这可能需要几分钟时间。
- en: 'Once completed, you can verify the installation by entering the following on
    the command line:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，您可以通过在命令行中输入以下内容来验证安装：
- en: '[PRE4]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This will list the installed Qiskit packages and their respective versions,
    which you should see includes all the various Qiskit libraries. To see the most
    current list of optional packages, just visit the Qiskit metadata package information
    page at [https://pypi.org/project/qiskit](https://pypi.org/project/qiskit).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这将列出已安装的 Qiskit 包及其相应的版本，您应该看到包括所有各种 Qiskit 库。要查看可选包的最新列表，请访问 Qiskit 元数据包信息页面
    [https://pypi.org/project/qiskit](https://pypi.org/project/qiskit)。
- en: With that, you have installed and verified that Qiskit is installed on your
    local device. Now, you can launch a Jupyter Notebook and start using Qiskit!
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，您已经安装并验证了 Qiskit 已安装在本地的设备上。现在，您可以启动一个 Jupyter Notebook 并开始使用 Qiskit！
- en: '*Wait! Not so fast*. There are just a couple of steps we should cover before
    we start coding and running circuits. We want to make sure your local machine
    is configured. The first thing you need to ensure is that you have your **token
    ID** saved on your local device. This way, when you are ready to run an experiment
    on a real device or on the simulator on the cloud, you can do so very easily.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '*等等！不要这么快*。在我们开始编码和运行电路之前，还有一些步骤需要介绍。我们想确保您的本地机器已配置好。首先，您需要确保您的 **令牌 ID** 已保存在本地设备上。这样，当您准备好在真实设备或云上的模拟器上运行实验时，您可以非常容易地做到这一点。'
- en: Configuring your local Qiskit environment
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置您的本地 Qiskit 环境
- en: Next, we’ll need to install some new features to leverage the latest building
    blocks and visualization packages. The IBM Runtime package and optional visualization
    package will allow you to run circuits efficiently on a quantum system and visualize
    the results from your circuit, respectively. Subsequent steps include saving your
    account information onto your local machine, which will be used to connect and
    use the IBM Quantum systems.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要安装一些新功能，以利用最新的构建块和可视化包。IBM 运行时包和可选的可视化包将允许您在量子系统上高效地运行电路，并分别可视化您的电路结果。后续步骤包括将您的账户信息保存到您的本地机器上，这将用于连接和使用
    IBM 量子系统。
- en: 'The steps needed to get yourselves up and running are as follows. Note for
    **Mac** users that the strings in the brackets, in this case, `visualization`,
    need to be wrapped with single quotes (i.e., `''visualization''`) – otherwise,
    you will get an error:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 启动并运行所需的步骤如下。注意对于 **Mac** 用户，括号中的字符串，在本例中为 `visualization`，需要用单引号括起来（即 `'visualization'`）——否则您将得到一个错误：
- en: 'Open your terminal and run each of the following:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的终端并运行以下每个命令：
- en: '[PRE5]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Once the installations have been completed, you can move on to the next step,
    which is to set up your account information on your local machine by copying your
    account API token.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，您可以继续下一步，即在您的本地机器上设置账户信息，通过复制您的账户 API 令牌。
- en: 'There are two places where you can obtain your API token; the first is from
    your dashboard on the IBM Quantum Platform page ([https://quantum.ibm.com](https://quantum.ibm.com)),
    as illustrated in the following figure:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以从两个地方获取您的 API 令牌；第一个是从 IBM 量子平台页面上的仪表板 ([https://quantum.ibm.com](https://quantum.ibm.com))，如图所示：
- en: '![](img/B18420_03_03.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![图片 B18420_03_03](img/B18420_03_03.png)'
- en: 'Figure 3.3: API token on the dashboard'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.3：仪表板上的 API 令牌
- en: 'The second way to obtain your API token is via the **Manage account** page.
    To get to your account page, just click on your avatar at the top right of the
    page and select **Manage account** from the drop-down list, as illustrated in
    the following screenshot:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取您的 API 令牌的第二种方式是通过 **管理账户** 页面。要转到您的账户页面，只需点击页面右上角的头像，然后从下拉列表中选择 **管理账户**，如图所示：
- en: '![A screenshot of a computer  Description automatically generated](img/B18420_03_04.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![计算机截图，描述自动生成](img/B18420_03_04.png)'
- en: 'Figure 3.4: API token on the Manage account page'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.4：管理账户页面上的 API 令牌
- en: 'After the account page opens, click the **Copy token** icon located to the
    right of the **API token** field, as highlighted in the following screenshot:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 账户页面打开后，点击位于 **API 令牌** 字段右侧的 **复制令牌** 图标，如图所示：
- en: '![Graphical user interface, application  Description automatically generated](img/B18420_03_05.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，应用程序描述自动生成](img/B18420_03_05.png)'
- en: 'Figure 3.5: Copy your account API token'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.5：复制您的账户API令牌
- en: Now that you have copied your **API token**, let’s save it on your local machine.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经复制了您的**API令牌**，让我们将其保存在您的本地机器上。
- en: 'Launch **Jupyter Notebook** by entering the following on the command line:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在命令行中输入以下内容来启动**Jupyter Notebook**：
- en: '[PRE6]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'As we are launching this locally, we do not have the launcher here to create
    a new notebook, so we will have to create one ourselves. Let’s do that now by
    clicking **New** | **Python 3** at the top right of Jupyter Notebook, as illustrated
    in the following figure:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们是在本地启动，这里没有创建新笔记本的启动器，因此我们必须自己创建一个。现在让我们通过点击Jupyter Notebook右上角的**新建** |
    **Python 3**来完成，如图所示：
- en: '![Graphical user interface, application  Description automatically generated](img/B18420_03_06.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，应用程序描述自动生成](img/B18420_03_06.png)'
- en: 'Figure 3.6: Creating a new Python 3 notebook'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.6：创建新的Python 3笔记本
- en: This will create a new Python 3 notebook. Note this created a blank notebook,
    so we also do not have the nice boilerplate cell that imported a lot of the commonly
    used classes and functions. We will have to either import them, as we need them,
    or you can just copy/paste in the boilerplate code from a previously created notebook
    that contains the boilerplate cell. In the following, we will just add the classes
    and functions as needed.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个新的Python 3笔记本。请注意，这创建了一个空白笔记本，因此我们也没有导入大量常用类和函数的漂亮模板单元格。我们将不得不根据需要导入它们，或者您也可以直接从包含模板单元格的先前创建的笔记本中复制/粘贴模板代码。在以下内容中，我们将根据需要添加类和函数。
- en: 'Once it has launched, enter the following into the first cell. You will also
    want to do this on the “`setup_save_account.ipynb`" file that is included in the
    code samples you have access to. This file will be imported and used in the early
    chapters for convenience, so please be sure you update the API token information
    there as well; otherwise, you will see errors when running the sample code:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦启动，请将以下内容输入到第一个单元格中。您还希望这样做“`setup_save_account.ipynb`"文件，该文件包含您可访问的代码示例。此文件将在早期章节中导入和使用，以便请确保您也更新那里的API令牌信息；否则，在运行示例代码时您将看到错误：
- en: '[PRE7]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Be sure to include the single quotes (`'` `'`) around your API token in the
    argument; otherwise, you may get an error.
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请确保在参数周围包含单引号(`'` `'`)，否则您可能会收到错误。
- en: Now that we have saved our API token locally, we won’t have to save it to our
    local system again unless we delete or change the API token value. Remember to
    copy your token, as indicated in the preceding command.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将API令牌保存在本地，除非我们删除或更改API令牌值，否则我们不需要再次将其保存在本地系统中。请记住，按照前面的命令复制您的令牌。
- en: '**Important note**'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '**重要提示**'
- en: 'Note that you only run this command once. If by chance, you forget and rerun
    the above function again, you may get a warning. You can find other account setting
    commands here in the Qiskit API documentation: [https://docs.quantum-computing.ibm.com/start/setup-channel#select-and-set-up-an-ibm-quantum-channel](https://docs.quantum-computing.ibm.com/start/setup-channel#select-and-set-up-an-ibm-quantum-channel).'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，您只需运行此命令一次。如果不幸忘记并再次运行上述功能，您可能会收到警告。您可以在Qiskit API文档中找到其他账户设置命令：[https://docs.quantum-computing.ibm.com/start/setup-channel#select-and-set-up-an-ibm-quantum-channel](https://docs.quantum-computing.ibm.com/start/setup-channel#select-and-set-up-an-ibm-quantum-channel)。
- en: Congratulations! You have successfully configured your local version of Qiskit!
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您已成功配置了您的本地Qiskit版本！
- en: You are now ready to run circuits locally on your system. Creating and executing
    circuits can now be done locally on a simulator for those times when you are unable
    to obtain network access. Of course, once you are back online, you can use your
    local version to execute circuits on real devices. This also allows you the freedom
    to integrate with your own applications or systems with ease. By having the ability
    to run your code locally, you can integrate new code into your own local applications
    easily.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以在系统上本地运行电路。当您无法获得网络访问时，现在可以在模拟器上本地创建和执行电路。当然，一旦您重新上线，您可以使用本地版本在真实设备上执行电路。这也允许您轻松地将自己的应用程序或系统集成。通过能够在本地运行代码，您可以轻松地将新代码集成到自己的本地应用程序中。
- en: In this section, you learned how to install Anaconda, which includes a lot of
    the dependencies necessary to install Qiskit; how to create a quantum circuit;
    how to execute the circuit on a simulator; and how to execute the circuit on a
    quantum computer. Now, we’ll learn how to contribute, collaborate, and get support
    from the Qiskit global community.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你学习了如何安装 Anaconda，它包括安装 Qiskit 所需的许多依赖项；如何创建量子电路；如何在模拟器上执行电路；以及如何在量子计算机上执行电路。现在，我们将学习如何贡献、协作，并从
    Qiskit 全球社区获得支持。
- en: Getting support from the Qiskit community
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 Qiskit 社区获得支持
- en: 'The Qiskit community is a global group of developers, researchers, and pretty
    much anyone who is curious about quantum computing that comes together, collaborates,
    and supports each other to help build knowledge across all community members.
    It is also used to keep everyone up to speed on the latest in quantum research,
    education, events, and updates: [https://www.ibm.com/quantum/events](https://www.ibm.com/quantum/events).
    A recent add-on is the ability to get certified as a Qiskit developer via the
    **Qiskit Developer Certification** exam. There is currently an updated course
    based on the Qiskit 1.x version coming out in late 2024.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: Qiskit 社区是一个全球性的开发者、研究人员和几乎所有对量子计算感兴趣的人组成的群体，他们聚集在一起，协作并相互支持，以帮助所有社区成员构建知识。它还用于让每个人都能了解量子研究、教育、活动和更新的最新动态：[https://www.ibm.com/quantum/events](https://www.ibm.com/quantum/events)。最近新增的功能是可以通过**Qiskit
    开发者认证**考试获得 Qiskit 开发者认证。目前有一个基于 Qiskit 1.x 版本的更新课程将在 2024 年晚些时候推出。
- en: In this section, you will learn about the community, its many programs, and
    how you can contribute and become a **Qiskit advocate** ([https://www.ibm.com/quantum/community#advocates](https://www.ibm.com/quantum/community#advocates)).
    Qiskit advocates are members of the Qiskit community who have passed a rigorous
    exam, have made many contributions to the Qiskit community, and have helped many
    others along the way. Let’s start by introducing you to the community itself.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将了解社区、其众多项目以及你如何贡献并成为**Qiskit 活动家**([https://www.ibm.com/quantum/community#advocates](https://www.ibm.com/quantum/community#advocates))。Qiskit
    活动家是 Qiskit 社区的成员，他们已经通过了一项严格的考试，对 Qiskit 社区做出了许多贡献，并在旅途中帮助了许多其他人。让我们首先向你介绍社区本身。
- en: Introducing the Qiskit community
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍 Qiskit 社区
- en: Ever since Qiskit was first deployed as an open-source project, the open-source
    community has contributed so many features and enhancements that it has only improved
    over time. The development ecosystem itself has flourished so much that it is
    being used in universities, industry, and governments around the world, even in
    Antarctica!
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 自从 Qiskit 首次作为开源项目部署以来，开源社区已经贡献了许多功能和改进，它随着时间的推移而不断改进。本身的发展生态系统已经繁荣发展，以至于它被用于世界各地的大学、工业和政府，甚至在南极洲！
- en: Members of the Qiskit community, often referred to as **Qiskitters**, often
    work together as a solid diverse group to ensure everyone is supported. Whether
    they are newbies to quantum computing or veteran quantum researchers, they all
    share a passion for collaborating and connecting on various projects. The link
    to information on Qiskit and the community can be found at [https://www.ibm.com/quantum/qiskit](https://www.ibm.com/quantum/qiskit),
    where you will find various links at the top and bottom of the page to tutorials
    and where to join the Qiskit community and be a part of the largest quantum ecosystem
    in the world.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: Qiskit 社区的成员，通常被称为**Qiskitters**，通常作为一个稳固的多元化团队一起工作，以确保每个人都得到支持。无论是量子计算的新手还是经验丰富的量子研究人员，他们都对在各种项目上进行协作和连接有着共同的热情。有关
    Qiskit 和社区的信息链接可以在 [https://www.ibm.com/quantum/qiskit](https://www.ibm.com/quantum/qiskit)
    找到，在那里你可以在页面顶部和底部找到各种教程链接，以及如何加入 Qiskit 社区和成为世界上最大的量子生态系统的一部分。
- en: One of the early projects was to create resources for those new to quantum computing.
    These resources vary from generating enablement materials to **YouTube** video
    series. The topics included both hardware and software that described what happened
    on the backend and software that described new research that others were working
    on. Along with the resources, there are also events that are planned all over
    the world at any given time. This includes events such as workshops, where communities
    join either in person or virtually to learn the latest in quantum computing.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 早期的一个项目是为那些刚开始接触量子计算的人创建资源。这些资源包括从生成启用材料到**YouTube**视频系列。这些主题涵盖了硬件和软件，描述了后端发生的事情，以及描述其他人正在进行的新的研究。除了资源之外，还有在世界各地任何给定时间都计划举行的活动。这包括研讨会等活动，社区成员可以亲自或虚拟地参加，以了解量子计算的最新进展。
- en: Other events also include **hackathons** and code camps, of which the largest
    is **Qiskit Camp**, which the IBM Quantum team hosts quarterly in different continents
    around the world. The 3-to-4-day camp usually includes accommodation in very exotic
    locations, meals, transportation to and from airports, and so on. Researchers
    from **IBM Research** also participate as lecturers, coaches, and judges. Teams
    are created and brainstorm ideas for projects that they work together on during
    the weekend, where they would compete and win prizes. This is very similar to
    hackathons.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 其他活动还包括**黑客马拉松**和编码营，其中最大的活动是**Qiskit Camp**，IBM量子团队在每个季度在世界不同大陆举办。为期3到4天的营通常包括在非常异国他乡的住宿、餐食、机场往返交通等。来自**IBM研究**的研究人员也作为讲师、教练和评委参与。团队被创建出来，在周末共同构思项目想法，他们一起工作，竞争并赢得奖品。这非常类似于黑客马拉松。
- en: Recently, the Qiskit community initiated the **Qiskit advocate program**. This
    program was created to provide support to individuals who have actively been involved
    with the Qiskit community and have contributed over time. To become a Qiskit advocate,
    you will need to apply online ([https://www.ibm.com/quantum/community#advocates](https://www.ibm.com/quantum/community#advocates)),
    where you will be given an exam to test your knowledge of Qiskit and specify at
    least three community contributions. These qualifications, of course, can change
    over time, so it is recommended that you check the site for any updates and application
    deadlines.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，Qiskit社区启动了**Qiskit倡导者计划**。该计划旨在为那些积极参与Qiskit社区并在一段时间内做出贡献的个人提供支持。要成为Qiskit倡导者，您需要在线申请([https://www.ibm.com/quantum/community#advocates](https://www.ibm.com/quantum/community#advocates))，在那里您将接受考试以测试您对Qiskit的了解，并至少指定三个社区贡献。当然，这些资格可能会随时间而变化，因此建议您检查网站以获取任何更新和申请截止日期。
- en: Once accepted into the Qiskit advocate program, you will have the opportunity
    to network with other experts and access core members of the Qiskit development
    team. You will also gain support and recognition from IBM through the Qiskit community,
    as well as receive invitations to special events such as Qiskit Summer School,
    seminars, and other major events where you can not only collaborate with others
    but also lead or mentor as well.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦被接受加入Qiskit倡导者计划，您将有机会与其他专家建立联系，并访问Qiskit开发团队的核心成员。您还将通过Qiskit社区从IBM获得支持和认可，并收到参加Qiskit暑期学校、研讨会和其他重大活动的邀请，在这些活动中，您不仅可以与其他人合作，还可以担任领导或导师。
- en: Contributing to the Qiskit community
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为Qiskit社区做出贡献
- en: 'Support across members is key, not just for Qiskit advocates but for all members.
    The Qiskit community has set up various channels to offer support to all the members
    of the community. They have a **Slack workspace** ([https://qisk.it/join-slack](https://qisk.it/join-slack))
    that is very active and has various channels so that members can ask questions,
    post event updates, or just chat about the latest quantum research that had been
    recently published. There are also other collaborative sources that Qiskit connects
    through. The current list of collaboration tools can be found on the main quantum
    community page: [https://www.ibm.com/quantum/community](https://www.ibm.com/quantum/community).'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 成员间的支持至关重要，不仅对于Qiskit倡导者，对于所有成员也是如此。Qiskit社区已经建立了各种渠道，为社区的所有成员提供支持。他们有一个非常活跃的**Slack工作空间**([https://qisk.it/join-slack](https://qisk.it/join-slack))，拥有多个频道，成员可以提问、发布活动更新，或者只是讨论最近发表的量子研究。还有其他Qiskit通过的合作资源。当前的合作工具列表可以在主要量子社区页面上找到：[https://www.ibm.com/quantum/community](https://www.ibm.com/quantum/community)。
- en: Specializing your skill set in the Qiskit community
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 Qiskit 社区中专业化你的技能集
- en: 'One of the most common questions asked about contributing to the Qiskit community,
    particularly those who are interested in becoming Qiskit advocates, is, *what
    are the various ways you can contribute?* There are many ways in which you can
    contribute to the Qiskit community. Ideally, you want to become familiar with
    the different forms of contributions, such as the following:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 关于为 Qiskit 社区做出贡献，尤其是那些有兴趣成为 Qiskit 拥趸的人提出的最常见问题之一是，*你可以通过哪些不同的方式做出贡献？* 你可以通过许多方式为
    Qiskit 社区做出贡献。理想情况下，你希望熟悉不同的贡献形式，如下所示：
- en: '**Code contributions**: Adding a new feature, optimizing the performance of
    a function, and bug fixes are some of the good ways to start if you are a developer.
    If you are new to coding, there is a label that the Qiskit development team has
    created for this called **good first issue**. This is an umbrella term for the
    issues that are ideal for those who are new to the code base.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码贡献**：如果你是开发者，添加新功能、优化函数性能和修复错误是一些好的开始方式。如果你是编程新手，Qiskit 开发团队为此创建了一个标签，称为
    **good first issue**。这是一个涵盖对新代码库新手理想的议题的通用术语。'
- en: '**Host a Qiskit event in your area or virtually**: You can host an event and
    invite a Qiskit advocate to run a workshop or talk to a group about the latest
    updates in Qiskit.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在你的地区或虚拟举办 Qiskit 活动**：你可以举办活动并邀请 Qiskit 拥趸进行研讨会或与一群人讨论 Qiskit 的最新更新。'
- en: '**Help others**: You can help others by answering questions asked by other
    community members, reporting bugs, identifying features that may enhance the development
    of circuits, and so on.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**帮助他人**：你可以通过回答其他社区成员提出的问题、报告错误、识别可能增强电路开发的功能等方式来帮助他人。'
- en: 'Specializing in an area such as noise mitigation, error correction, or algorithm
    design is an advantage to the community. The **Qiskit Slack community** has several
    channels that focus on specific areas of quantum computing: quantum systems, the
    IBM Quantum Platform, Qiskit Runtime, quantum algorithms and applications, Qiskit
    on Raspberry Pi, and many more. If you specialize in any of these areas, you can
    join the Slack group and collaborate on many technologies and topics.'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在噪声缓解、错误纠正或算法设计等领域专业化是社区的一个优势。**Qiskit Slack 社区**有几个专注于量子计算特定领域的频道：量子系统、IBM
    Quantum 平台、Qiskit Runtime、量子算法和应用、Qiskit 在 Raspberry Pi 上，等等。如果你在这些领域中的任何一个领域专业化，你可以加入
    Slack 群组，并在许多技术和主题上进行合作。
- en: In this section, you learned about the open-source contribution process and
    how to find tasks for both beginners and experts so that everyone can contribute.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你了解了开源贡献流程以及如何找到适合初学者和专家的任务，以便每个人都能做出贡献。
- en: Summary
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned about the general features and capabilities provided
    by Qiskit so that you can create highly efficient quantum algorithms. You then
    learned how to install Qiskit locally, as well as how to contribute and find support
    from the Qiskit community.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你了解了 Qiskit 提供的通用功能和特性，以便你可以创建高效的量子算法。然后，你学习了如何在本地安装 Qiskit，以及如何为 Qiskit
    社区做出贡献并寻求支持。
- en: We’ve learned more about Qiskit and how it fits on the development stack, and
    we covered an overview of the application modules and simulators provided in the
    Qiskit libraries. This provided you with the general skills and functionality
    to create circuits, which you can then use to apply various operations to the
    qubits via gates and operators.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们更多地了解了 Qiskit 以及它在开发堆栈中的位置，并概述了 Qiskit 库中提供的应用模块和模拟器。这为你提供了创建电路的一般技能和功能，然后你可以使用这些电路通过门和算子对量子比特应用各种操作。
- en: Then, we learned about Aer, which allows us to create better simulators and
    how to execute them locally and on the IBM Quantum platform.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们学习了 Aer，它允许我们创建更好的模拟器，以及如何在本地和 IBM Quantum 平台上执行它们。
- en: You learned details on how you can install your own version of Qiskit on your
    platform using Anaconda. Finally, we learned about the Qiskit community and its
    advantages to all, particularly those who are new to quantum computing and need
    a little support to understand some of the challenging content or find someone
    to collaborate with and expand their horizons.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 你学习了如何在你的平台上使用 Anaconda 安装你自己的 Qiskit 版本。最后，我们了解了 Qiskit 社区及其对所有人，尤其是那些对量子计算新手需要一点支持以理解一些具有挑战性的内容或找到合作者以拓宽视野的人的优势。
- en: With that, you now have the skills to install and configure Qiskit on your local
    machine to create and execute quantum circuits in offline mode.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经拥有了在本地机器上安装和配置 Qiskit 的技能，以便在离线模式下创建和执行量子电路。
- en: In the next chapter, we will start delving into understanding the fundamental
    basics of quantum computing so we can learn how to create and execute quantum
    circuits.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开始深入了解量子计算的基本原理，以便我们学习如何创建和执行量子电路。
- en: Questions
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提问
- en: In your own words, describe the difference between a kernel developer and an
    application developer.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用你自己的话描述内核开发者和应用程序开发者之间的区别。
- en: If you wanted to obtain the unitary matrix of a circuit, which simulator would
    provide the unitary matrix result?
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你想要获取电路的单位矩阵，哪个模拟器会提供单位矩阵的结果？
- en: Can you name and describe in your own words each of the five simulator categories
    that are provided by Aer?
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请用你自己的话命名并描述 Aer 提供的五个模拟器类别。
- en: Which module would you need to import to plot a histogram?
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你需要导入哪个模块来绘制直方图？
- en: Join us on Discord
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入我们的 Discord 社区
- en: 'Join our community’s Discord space for discussions with the author and other
    readers:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 加入我们社区的 Discord 空间，与作者和其他读者进行讨论：
- en: '[https://packt.link/3FyN1](Chapter_3.xhtml)'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/3FyN1](Chapter_3.xhtml)'
- en: '![](img/QR_Code2617625996838265932.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![二维码](img/QR_Code2617625996838265932.png)'
