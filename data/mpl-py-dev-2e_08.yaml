- en: Integrating Matplotlib with Web Applications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 Matplotlib 与 Web 应用程序集成
- en: Web-based applications (web apps) offer multi-level advantages. First, users
    can enjoy a unified experience across platforms. Second, since an installation
    process is not required, users can enjoy a simpler workflow. Lastly, from the
    perspective of developers, the development cycle can be simplified as less platform-specific
    code has to be maintained. Given these advantages, more and more applications
    are being developed online.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 基于 Web 的应用程序（Web 应用）具有多重优势。首先，用户可以跨平台享受统一的体验。其次，由于无需安装过程，用户可以享受更简化的工作流。最后，从开发者的角度来看，开发周期可以简化，因为需要维护的特定平台代码较少。鉴于这些优势，越来越多的应用程序正在在线开发。
- en: Owing to the popularity and flexibility of Python, it makes sense for web developers
    to use Python-based web frameworks such as Django and Flask to develop web applications.
    In fact, Django and Flask ranked 6th and 13th out of 175 respectively in terms
    of popularity, according to [http://hotframeworks.com/](http://hotframeworks.com/).
    These frameworks are *batteries included*. From user authentication, user administration,
    and content management to API design, these frameworks have got them all covered.
    The code base is closely reviewed by the open source community such that sites
    that were developed using these frameworks are protected against common attacks,
    such as SQL injection, cross-site request forgery, and cross-site scripting.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Python 的流行和灵活性，Web 开发者使用基于 Python 的 Web 框架（如 Django 和 Flask）开发 Web 应用程序是有道理的。事实上，根据
    [http://hotframeworks.com/](http://hotframeworks.com/) 的数据，Django 和 Flask 分别在175个框架中排名第6和第13。这些框架是
    *功能齐全的*。从用户身份验证、用户管理、内容管理到 API 设计，它们都提供了完整的解决方案。代码库经过开源社区的严格审查，因此使用这些框架开发的网站可以防御常见攻击，如
    SQL 注入、跨站请求伪造和跨站脚本攻击。
- en: In this chapter, we are going to learn how to develop a simple site that displays
    the price of Bitcoin. Examples based on Django  will be covered. We will use Docker
    18.03.0-ce, and Django 2.0.4 for demonstration. Let's begin by going through the
    steps of initializing a Docker-based development environment.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何开发一个简单的网站，展示比特币的价格。将介绍基于 Django 的示例。我们将使用 Docker 18.03.0-ce 和 Django
    2.0.4 进行演示。首先，我们将通过初始化基于 Docker 的开发环境的步骤来开始。
- en: Installing Docker
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Docker
- en: Docker allows developers to run applications in self-contained and lightweight
    containers. Since its introduction in 2013, Docker has quickly gained popularity
    among developers. At the center of its technology, Docker uses the resource isolation
    methods of the Linux kernel instead of a full-blown virtualization hypervisor
    to run applications.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 允许开发者在自包含且轻量级的容器中运行应用程序。自2013年推出以来，Docker迅速在开发者中获得了广泛的关注。在其技术的核心，Docker
    使用 Linux 内核的资源隔离方法，而不是完整的虚拟化监控程序来运行应用程序。
- en: This enables easier development, packaging, deployment, and management of code.
    Therefore, all code development work in this chapter will be conducted using a
    Docker-based environment.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得代码的开发、打包、部署和管理变得更加简便。因此，本章中的所有代码开发工作将基于 Docker 环境进行。
- en: Docker for Windows users
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker for Windows 用户
- en: 'There are two ways to install Docker on Windows: the aptly named Docker for
    Windows package, and Docker Toolbox. I recommend stable versions of the Docker
    Toolbox because Docker for Windows requires Hyper-V support in 64-bit Windows
    10 Pro. Meanwhile, Docker for Windows is not supported by older versions of Windows.
    Detailed installation instructions can be found at [https://docs.docker.com/toolbox/toolbox_install_windows/](https://docs.docker.com/toolbox/toolbox_install_windows/),
    but we will also cover the important steps here.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 上安装 Docker 有两种方式：名为 Docker for Windows 的包和 Docker Toolbox。我推荐使用稳定版本的
    Docker Toolbox，因为 Docker for Windows 需要在 64 位 Windows 10 Pro 中支持 Hyper-V。同时，Docker
    for Windows 不支持较旧版本的 Windows。详细的安装说明可以在 [https://docs.docker.com/toolbox/toolbox_install_windows/](https://docs.docker.com/toolbox/toolbox_install_windows/)
    中找到，但我们也将在这里介绍一些重要步骤。
- en: 'First, download Docker Toolbox from the following link: [https://github.com/docker/toolbox/releases](https://github.com/docker/toolbox/releases).
    Choose the file with the name `DockerToolbox-xx.xx.x-ce.exe`, where `x` refers
    to the latest version numbers:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，从以下链接下载 Docker Toolbox：[https://github.com/docker/toolbox/releases](https://github.com/docker/toolbox/releases)。选择名为
    `DockerToolbox-xx.xx.x-ce.exe` 的文件，其中 `x` 表示最新版本号：
- en: '![](img/5b2481e4-15e3-4773-8857-70a68bb5f567.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5b2481e4-15e3-4773-8857-70a68bb5f567.png)'
- en: 'Next, run the downloaded installer. Follow the default instructions of each
    prompt to install:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，运行下载的安装程序。按照每个提示的默认说明进行安装：
- en: '![](img/68bda216-8509-443e-983d-34dcc30d1d3e.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/68bda216-8509-443e-983d-34dcc30d1d3e.png)'
- en: Windows might ask you for permission to make certain changes. It is normal,
    and make sure you allow the changes to happen.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 可能会询问你是否允许进行某些更改，这是正常的，确保你允许这些更改发生。
- en: 'Finally, once the installation is complete, you should be able to locate Docker
    Quickstart Terminal in the Start menu:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，一旦安装完成，你应该能够在开始菜单中找到 Docker Quickstart Terminal：
- en: '![](img/22c6c3b3-51f5-4351-a2ac-b3ba3a4e1e83.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/22c6c3b3-51f5-4351-a2ac-b3ba3a4e1e83.png)'
- en: 'Click on the icon to launch the Docker Toolbox Terminal, which begins an initialization
    process. When the process is complete, the following terminal will be shown:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 点击图标启动 Docker Toolbox 终端，这将开始初始化过程。当该过程完成时，将显示以下终端：
- en: '![](img/fb2879b8-18b6-4986-91dd-9a2a111858ac.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fb2879b8-18b6-4986-91dd-9a2a111858ac.png)'
- en: Docker for Mac users
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Mac 用户的 Docker
- en: For Mac users, I recommend the Docker CE for Mac (stable) app, which is available
    at [https://store.docker.com/editions/community/docker-ce-desktop-mac](https://store.docker.com/editions/community/docker-ce-desktop-mac).
    In addition, a full installation guide can be found via the following link: [https://docs.docker.com/docker-for-mac/install/](https://docs.docker.com/docker-for-mac/install/).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Mac 用户，我推荐 Docker CE for Mac（稳定版）应用程序，可以在 [https://store.docker.com/editions/community/docker-ce-desktop-mac](https://store.docker.com/editions/community/docker-ce-desktop-mac)
    下载。此外，完整的安装指南可以通过以下链接找到：[https://docs.docker.com/docker-for-mac/install/](https://docs.docker.com/docker-for-mac/install/)。
- en: 'The installation process of Docker CE for Mac is arguably simpler than for
    its Windows counterpart. Here are the major steps:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Docker CE for Mac 的安装过程可能比 Windows 版本更简单。以下是主要步骤：
- en: 'First, double-click on the downloaded `Docker.dmg` file to mount the image.
    When you see the following popup, drag and drop the Docker icon on the left to
    the Applications folder on the right:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，双击下载的 `Docker.dmg` 文件以挂载映像。当你看到以下弹窗时，将左侧的 Docker 图标拖动到右侧的应用程序文件夹中：
- en: '![](img/cc00110a-9fb4-43a6-b6f2-aa17b92743d9.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cc00110a-9fb4-43a6-b6f2-aa17b92743d9.png)'
- en: 'Next, in your Applications folder or Launchpad, locate and double-click on
    the Docker app. You should be able to see a whale icon in the top status bar if
    Docker was successfully launched:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在你的应用程序文件夹或启动台中，找到并双击 Docker 应用程序。如果 Docker 启动成功，你应该能够在顶部状态栏看到一个鲸鱼图标：
- en: '![](img/2d5fb604-2f21-4bef-9a35-b9551dc3eef0.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2d5fb604-2f21-4bef-9a35-b9551dc3eef0.png)'
- en: 'Finally, open the Terminal app in the Applications | Utilities folder. Type
    `docker info`, followed by *Enter* to check whether Docker is installed properly:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，打开应用程序 | 实用工具文件夹中的终端应用程序。键入 `docker info`，然后按 *Enter* 键检查 Docker 是否正确安装：
- en: '![](img/e255ba06-af04-4976-ba33-1f5c5d7e4a12.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e255ba06-af04-4976-ba33-1f5c5d7e4a12.png)'
- en: More about Django
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多关于 Django
- en: Django is a popular web framework that is designed to simplify the development
    and deployment of web applications. It includes loads of boilerplate code for
    everyday tasks, such as database model management, frontend templating, session
    authentication, and security. Django was built around the **Model-Template-View**
    (**MTV**) design pattern.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Django 是一个流行的 web 框架，旨在简化 web 应用程序的开发和部署。它包括大量的模板代码，处理日常任务，如数据库模型管理、前端模板、会话认证和安全性。Django
    基于 **模型-模板-视图**（**MTV**）设计模式构建。
- en: The model is perhaps the most critical component of MTV. It refers to how you
    represent your data in terms of different tables and attributes. It also abstracts
    away the nitty-gritty details of different database engines such that the same
    model can be applied to SQLite, MySQL, and PostgreSQL. Meanwhile, the model layer
    of Django would expose engine-specific parameters, such as `ArrayField` and `JSONField`
    in PostgreSQL, for fine-tuning of your data representation.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 模型可能是 MTV 中最关键的组件。它指的是如何通过不同的表格和属性来表示你的数据。它还将不同数据库引擎的细节抽象化，使得相同的模型可以应用于 SQLite、MySQL
    和 PostgreSQL。同时，Django 的模型层会暴露特定于引擎的参数，如 PostgreSQL 中的 `ArrayField` 和 `JSONField`，用于微调数据表示。
- en: The template is similar to the role of a view in the canonical MTV framework.
    It handles the presentation of data to the users. In other words, it doesn't handle
    the logic of how the data was generated.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 模板类似于经典 MTV 框架中视图的作用。它处理数据的展示给用户。换句话说，它不涉及数据是如何生成的逻辑。
- en: The view in Django is responsible for handling a user's request, and the subsequent
    logic of returning a response. It sits between the model layer and the template
    layer. A view determines what kind of data should be fetched from the model and
    how to process the data for the template.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Django中的视图负责处理用户请求，并返回相应的逻辑。它位于模型层和模板层之间。视图决定应该从模型中提取何种数据，以及如何处理数据以供模板使用。
- en: 'The key selling points of Django are as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Django的主要卖点如下：
- en: '**Development speed**: Loads of key components are provided; this reduces the
    number of repetitive tasks in a development cycle. For instance, it takes mere
    minutes to build a simple blog using Django.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发速度**：提供了大量的关键组件；这减少了开发周期中的重复任务。例如，使用Django构建一个简单的博客只需几分钟。'
- en: '**Security**: Best practices of web security are included in Django. The risks
    of hacks such as SQL injection, cross-site scripting, cross-site request forgery,
    and clickjacking are greatly reduced. Its user authentication system uses the
    PBKDF2 algorithm with a salted SHA256 hash, which is recommended by NIST. Other
    state-of-the-art hash algorithms, such as Argon2, are also available.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全性**：Django包含了Web安全的最佳实践。SQL注入、跨站脚本、跨站请求伪造和点击劫持等黑客攻击的风险大大降低。其用户认证系统使用PBKDF2算法和加盐的SHA256哈希，这是NIST推荐的。其他先进的哈希算法，如Argon2，也可用。'
- en: '**Scalability**: The MTV layers of Django use a shared-nothing architecture.
    If a certain layer is the bottleneck of the web application, just throw more hardware
    to it; Django will take advantage of the additional hardware for each of the layers.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性**：Django的MTV层使用的是无共享架构。如果某一层成为Web应用程序的瓶颈，只需增加更多硬件；Django将利用额外的硬件来支持每一层。'
- en: Django development in Docker containers
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Docker容器中进行Django开发
- en: To keep things tidy, let's create an empty directory named `Django` to host
    all the files. Inside the `Django` directory, we need to define the content of
    a container by creating a `Dockerfile` using our favorite text editor. A `Dockerfile` defines
    the base image of a container as well as the commands that are necessary to compile
    an image.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持整洁，让我们创建一个名为`Django`的空目录来托管所有文件。在`Django`目录内，我们需要使用我们喜欢的文本编辑器创建一个`Dockerfile`来定义容器的内容。`Dockerfile`定义了容器的基础镜像以及编译镜像所需的命令。
- en: For more information about Dockerfile, please visit [https://docs.docker.com/engine/reference/builder/](https://docs.docker.com/engine/reference/builder/).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解更多有关Dockerfile的信息，请访问[https://docs.docker.com/engine/reference/builder/](https://docs.docker.com/engine/reference/builder/)。
- en: 'We will use Python 3.6.5 as our base image. Please copy the following code
    to your Dockerfile. A series of additional commands define the working directory
    and the initiation process:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Python 3.6.5作为基础镜像。请将以下代码复制到您的Dockerfile中。一系列附加命令定义了工作目录和初始化过程：
- en: '[PRE0]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'As you may notice, we also need a text file, `requirements.txt`, to define
    any package dependencies in our project. Please add the following content to the `requirements.txt` file
    in the folder where the project is present:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们还需要一个文本文件`requirements.txt`，以定义项目中的任何包依赖。请将以下内容添加到项目所在文件夹中的`requirements.txt`文件中：
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, we can run `docker build -t django` in the terminal to build the image.
    It takes up to several minutes before the process is complete:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以在终端中运行`docker build -t django`来构建镜像。构建过程可能需要几分钟才能完成：
- en: Please make sure you are currently located in the same project folder before
    running the command.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行命令之前，请确保您当前位于相同的项目文件夹中。
- en: '![](img/99b24f91-28c0-4404-b0d9-e9ed1982a87e.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/99b24f91-28c0-4404-b0d9-e9ed1982a87e.png)'
- en: 'The following message will be shown if the building process is complete. The
    exact hash code at the end of the `Successfully built ...` message could be different:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果构建过程完成，将显示以下消息。`Successfully built ...`消息结尾的哈希码可能会有所不同：
- en: '[PRE2]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Starting a new Django site
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动一个新的Django站点
- en: We will now create a new Docker container using the `docker run` command. The
    `-v "$(pwd)":/app` parameter creates a bind-mount of the current directory to
    `/app` in the container. Files in the current directory are shared between the
    host and the guest systems.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将使用`docker run`命令创建一个新的Docker容器。`-v "$(pwd)":/app`参数创建了当前目录到容器内`/app`的绑定挂载。当前目录中的文件将在主机和客机系统之间共享。
- en: 'The second untagged parameter `django` defines the image that we use for the
    creation of a container. The rest of the command string is as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个未标记的参数 `django` 定义了用于创建容器的映像。命令字符串的其余部分如下：
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This is passed to the guest container for execution. It creates a new Django
    project named `crypto_stats` using the edge template by Arun Ravindran ([https://django-edge.readthedocs.io/en/latest/](https://django-edge.readthedocs.io/en/latest/)):'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这被传递给客户机容器以执行。它使用 Arun Ravindran 的边缘模板 ([https://django-edge.readthedocs.io/en/latest/](https://django-edge.readthedocs.io/en/latest/))
    创建了一个名为 `crypto_stats` 的新 Django 项目：
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Upon successful execution, you should be able to see the following files and
    directories if you go inside the newly created `crypto_stats` folder:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 成功执行后，如果您进入新创建的 `crypto_stats` 文件夹，您应该能看到以下文件和目录：
- en: '![](img/ce85ce17-fff8-4bf1-83d7-a7ad9f454c72.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ce85ce17-fff8-4bf1-83d7-a7ad9f454c72.png)'
- en: Installation of Django dependencies
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Django 依赖项的安装
- en: The `requirements.txt` file in the `crypto_stats` folder defines the Python
    package dependencies of our Django project. To install these dependencies, please
    issue the following `docker run` command.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`crypto_stats` 文件夹中的 `requirements.txt` 文件定义了我们的 Django 项目的 Python 包依赖关系。要安装这些依赖项，请执行以下
    `docker run` 命令。'
- en: The `-p 8000:8000` parameter exposes port `8000` from the guest to the host
    machine. The `-it` parameter creates a pseudo-terminal with `stdin` support to
    allow an interactive terminal session.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 参数 `-p 8000:8000` 将端口 `8000` 从客户机暴露给主机机器。参数 `-it` 创建一个支持 `stdin` 的伪终端，以允许交互式终端会话。
- en: 'We are again using the `django` image, but this time we launch a Bash Terminal
    shell instead:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们再次使用 `django` 映像，但这次我们启动了一个 Bash 终端 shell：
- en: '[PRE5]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You should make sure that you are still in your root project folder (that is, `Django`)
    when you issue the command.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行命令时，请确保您仍然位于项目的根目录（即 `Django`）中。
- en: 'The chain of commands would produce the following results:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 命令链将产生以下结果：
- en: '![](img/183d2d48-3040-439f-bd55-6459f01a66bc.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/183d2d48-3040-439f-bd55-6459f01a66bc.png)'
- en: Django environment setup
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Django 环境设置
- en: 'Sensitive environment variables, such as Django''s `SECRET_KEY` ([https://docs.djangoproject.com/en/2.0/ref/settings/#std:setting-SECRET_KEY](https://docs.djangoproject.com/en/2.0/ref/settings/#std:setting-SECRET_KEY)),
    should be kept in a private file that is excluded from version control software.
    For simplicity, we can just use the sample from the project template:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 敏感的环境变量，例如 Django 的 `SECRET_KEY` ([https://docs.djangoproject.com/en/2.0/ref/settings/#std:setting-SECRET_KEY](https://docs.djangoproject.com/en/2.0/ref/settings/#std:setting-SECRET_KEY))，应该保存在一个从版本控制软件中排除的私有文件中。为简单起见，我们可以直接使用项目模板中的示例：
- en: '[PRE6]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Next, we can use `manage.py` to create a default SQLite database and the superuser:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以使用 `manage.py` 来创建一个默认的 SQLite 数据库和超级用户：
- en: '[PRE7]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `migrate` command initializes the database models, including user authentication,
    admin, user profiles, user sessions, content types, and thumbnails.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`migrate` 命令初始化数据库模型，包括用户认证、管理员、用户配置文件、用户会话、内容类型和缩略图。'
- en: 'The `createsuperuser` command will ask you a series of questions for the creation
    of a superuser:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`createsuperuser` 命令将询问您一系列问题以创建超级用户：'
- en: '![](img/533006a6-da8b-49b8-8c0d-d5bccd54502f.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/533006a6-da8b-49b8-8c0d-d5bccd54502f.png)'
- en: Running the development server
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行开发服务器
- en: 'Launching the default development server is very simple; in fact, it takes
    only a single line of code:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 启动默认的开发服务器非常简单；实际上，只需一行代码：
- en: '[PRE8]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `0.0.0.0:8000` parameter will tell Django to serve the website to all addresses
    at port `8000`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 参数 `0.0.0.0:8000` 将告诉 Django 在端口 `8000` 上为所有地址提供网站服务。
- en: 'In your host machine, you can now launch your favorite browser and go to `http://localhost:8000`
    to see your site:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的主机上，您现在可以启动您喜欢的浏览器，并访问 `http://localhost:8000` 查看您的网站：
- en: '![](img/c5a99622-ec6d-41b6-86b6-44d0c3d7ff24.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c5a99622-ec6d-41b6-86b6-44d0c3d7ff24.png)'
- en: The look of the site is decent, isn't it?
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 网站的外观还不错，是吗？
- en: Showing Bitcoin prices using Django and Matplotlib
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Django 和 Matplotlib 显示比特币价格
- en: We have now established a fully fledged website backbone using just a few commands.
    I hope you will appreciate the simplicity of using Django for web development.
    Now, I will demonstrate how we can integrate Matplotlib charts into a Django site,
    which is the key topic of this chapter.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们仅使用几个命令就建立了一个完整的网站框架。希望您能欣赏使用 Django 进行网页开发的简便性。现在，我将演示如何将 Matplotlib 图表集成到
    Django 网站中，这是本章的关键主题。
- en: Creating a Django app
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个 Django 应用程序
- en: An app in the Django ecosystem refers to an application that handles a specific
    function within a site. For instance, our default project comes with the profile
    and account apps already. With the terminology clarified, we are set to build
    an app to display the latest price of bitcoin.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Django生态系统中的一个应用指的是在网站中处理特定功能的应用程序。例如，我们的默认项目已经包含了profile和account应用程序。澄清了术语后，我们准备构建一个显示比特币最新价格的应用。
- en: 'We should keep our development server running in the background. When the server
    detects any changes to our code base, it will reload automatically to reflect
    the changes. Therefore, right now, we need to launch a new Terminal and attach
    to the running server container:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该让开发服务器在后台运行。当服务器检测到代码库的任何更改时，它将自动重新加载以反映更改。因此，现在我们需要启动一个新的终端并连接到正在运行的服务器容器：
- en: '[PRE9]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The strange-looking numbers before `bash` refer to the ID of the container.
    We can find the ID from the terminal that holds the running server:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`bash`前面的那些看起来很奇怪的数字是容器的ID。我们可以从持有正在运行的服务器的终端中找到该ID：'
- en: '![](img/e4bba061-76af-4b7f-8b59-e6b3833a7929.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e4bba061-76af-4b7f-8b59-e6b3833a7929.png)'
- en: 'Alternatively, we can get the IDs of all running containers by issuing the
    following command:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以通过发出以下命令来获取所有正在运行的容器的ID：
- en: '[PRE10]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The `docker exec` command helps you go back to the same Bash environment as
    the development server. We can now start a new app:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker exec`命令帮助你返回到与开发服务器相同的Bash环境。我们现在可以启动一个新应用：'
- en: '[PRE11]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Inside the host computer''s project directory, we should be able to see a new
    `bitcoin` folder inside `crypto_stats/src/`:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在主机计算机的项目目录中，我们应该能够看到`crypto_stats/src/`下的新`bitcoin`文件夹：
- en: '![](img/b2ab9c7d-d86b-4ce8-af7c-3b26f15e6b70.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b2ab9c7d-d86b-4ce8-af7c-3b26f15e6b70.png)'
- en: Creating a simple Django view
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个简单的Django视图
- en: I will demonstrate the workflow of creating a Django view via a simple line
    chart.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我将通过一个简单的折线图演示创建Django视图的工作流程。
- en: 'Inside the newly created bitcoin app folder, you should be able to find `views.py`,
    which stores all the views within the app. Let''s edit it and create a view that
    outputs a Matplotlib line chart:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在新创建的比特币应用文件夹中，你应该能够找到`views.py`，它存储了应用中的所有视图。让我们编辑它并创建一个输出Matplotlib折线图的视图：
- en: '[PRE12]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Since Tkinter is not available inside our server container, we need to switch
    the Matplotlib graphical backend from the default TkAgg to Agg by calling `matplotlib.use('Agg')`
    first.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的服务器容器中没有Tkinter，我们需要通过首先调用`matplotlib.use('Agg')`来将Matplotlib图形后端从默认的TkAgg切换到Agg。
- en: '`matplotlib.use(''Agg'')` must be called right after the line `import matplotlib` and
    before any other function calls of Matplotlib.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`matplotlib.use(''Agg'')`必须在`import matplotlib`之后，并且在调用任何Matplotlib函数之前立即调用。'
- en: The function `test_view` (request) expects a Django `HttpRequest` object ([https://docs.djangoproject.com/en/2.0/ref/request-response/#django.http.HttpRequest](https://docs.djangoproject.com/en/2.0/ref/request-response/#django.http.HttpRequest))
    as input, and outputs a Django `HttpResponse` object ([https://docs.djangoproject.com/en/2.0/ref/request-response/#django.http.HttpResponse](https://docs.djangoproject.com/en/2.0/ref/request-response/#django.http.HttpResponse)).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 函数`test_view`（request）期望一个Django `HttpRequest`对象（[https://docs.djangoproject.com/en/2.0/ref/request-response/#django.http.HttpRequest](https://docs.djangoproject.com/en/2.0/ref/request-response/#django.http.HttpRequest)）作为输入，并输出一个Django
    `HttpResponse`对象（[https://docs.djangoproject.com/en/2.0/ref/request-response/#django.http.HttpResponse](https://docs.djangoproject.com/en/2.0/ref/request-response/#django.http.HttpResponse)）。
- en: To import a Matplotlib plot to the `HttpResponse` object, we need to save the
    plot to an intermediate `BytesIO` object first, which can be found in the `io`
    package ([https://docs.python.org/3/library/io.html#binary-i-o](https://docs.python.org/3/library/io.html#binary-i-o)).
    The `BytesIO` object acts as a buffer of the binary image file, such that `plt.savefig`
    can write a PNG file directly into it.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将Matplotlib图表导入到`HttpResponse`对象中，我们需要先将图表保存到一个中间的`BytesIO`对象中，该对象可以在`io`包中找到（[https://docs.python.org/3/library/io.html#binary-i-o](https://docs.python.org/3/library/io.html#binary-i-o)）。`BytesIO`对象充当二进制图像文件的缓冲区，以便`plt.savefig`能够直接将PNG文件写入其中。
- en: Next, we create a new `HttpResponse()` object with the `content_type` parameter
    set to `image/png`. The binary content inside the buffer is exported to the `HttpResponse()`
    object via `response.write(fig_buffer.getvalue())`. Finally, the buffer is closed
    to free up the temporary memory.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们创建一个新的`HttpResponse()`对象，并将`content_type`参数设置为`image/png`。缓冲区中的二进制内容通过`response.write(fig_buffer.getvalue())`导出到`HttpResponse()`对象中。最后，关闭缓冲区以释放临时内存。
- en: To direct users to this view, we need to create a new file called `urls.py`
    inside the `{Project_folder}/crypto_stats/src/bitcoin` folder.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将用户引导到这个视图，我们需要在`{Project_folder}/crypto_stats/src/bitcoin`文件夹内创建一个名为`urls.py`的新文件。
- en: '[PRE13]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The line `path('test/', views.test_view)` states that all URLs with suffix `test/` 
    will be directed to the `test_view`.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行`path('test/', views.test_view)`表示所有以`test/`结尾的URL将被定向到`test_view`。
- en: 'We need to add our app''s `url` patterns to the global patterns as well. Let''s
    edit `{Project_folder}/crypto_stats/src/crypto_stats/urls.py`, and add the two
    lines commented as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要将应用的`url`模式添加到全局模式中。让我们编辑`{Project_folder}/crypto_stats/src/crypto_stats/urls.py`，并添加以下两行注释：
- en: '[PRE14]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The line `path('bitcoin/', include(bitcoin.urls)),` states that every URL that
    begins with [http://<your-domain>/bitcoin](http://%3Cyour-domain/bitcoin) would
    be directed to the bitcoin app.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行`path('bitcoin/', include(bitcoin.urls)),`表示所有以[http://<your-domain>/bitcoin](http://%3Cyour-domain/bitcoin)开头的URL将被定向到比特币应用。
- en: Wait for a few seconds until the development server reloads. You can now head
    to [http://localhost:8000/bitcoin/test/](http://localhost:8000/bitcoin/test/)
    to see your plot.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 等待几秒钟直到开发服务器重新加载。现在，你可以前往[http://localhost:8000/bitcoin/test/](http://localhost:8000/bitcoin/test/)查看你的图表。
- en: '![](img/99e179ea-dfce-41fe-9964-cb70c7ef4e74.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/99e179ea-dfce-41fe-9964-cb70c7ef4e74.png)'
- en: Creating a Bitcoin candlestick view
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建比特币K线图视图
- en: In this section, we are going to fetch the historical prices of Bitcoin from
    the Quandl API. Please note that we do not guarantee the accuracy, completeness,
    or validity of the visualizations presented; nor are we responsible for any errors
    or omissions that may have occurred. The data, visualizations, and analyses are
    provided on an *as is* basis for educational purposes only, without any warranties
    of any kind. Readers are advised to conduct their own independent research into
    individual cryptocurrencies before making a investment decision.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将从Quandl API获取比特币的历史价格。请注意，我们无法保证所展示的可视化数据的准确性、完整性或有效性；也不对可能发生的任何错误或遗漏负责。数据、可视化和分析仅以*现状*提供，仅供教育用途，且不提供任何形式的保证。建议读者在做出投资决策之前，先进行独立的个别加密货币研究。
- en: If you are not familiar with Quandl, it is a financial and economic data warehouse
    that stores millions of datasets from hundreds of publishers. Before you can use
    the Quandl API, you would need to register an account on its website ([https://www.quandl.com](https://www.quandl.com)).
    A free API access key can be obtained by following the instructions in this link [https://docs.quandl.com/docs#section-authentication](https://docs.quandl.com/docs#section-authentication).
    I will cover more about Quandl and APIs in the next chapter.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不熟悉Quandl，它是一个金融和经济数据仓库，存储着来自数百个发布者的数百万数据集。在使用Quandl API之前，你需要在其网站上注册一个账户（[https://www.quandl.com](https://www.quandl.com)）。可以通过以下链接的说明获取免费的API访问密钥：[https://docs.quandl.com/docs#section-authentication](https://docs.quandl.com/docs#section-authentication)。在下一章我会介绍更多关于Quandl和API的内容。
- en: Now, remove the existing `views.py` file from the `crypto_stats/src/bitcoin`
    folder. Copy `views1.py` from this chapter's code repository to `crypto_stats/src/bitcoin`,
    and rename it as `views.py`. I will explain each part of `views1.py` accordingly.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，删除`crypto_stats/src/bitcoin`文件夹中的现有`views.py`文件。从本章的代码库中将`views1.py`复制到`crypto_stats/src/bitcoin`，并将其重命名为`views.py`。我会相应地解释`views1.py`中的每一部分。
- en: 'The historical bitcoin prices data in the Bitstamp exchange can be found here:
    [https://www.quandl.com/data/BCHARTS/BITSTAMPUSD-Bitcoin-Markets-bitstampUSD](https://www.quandl.com/data/BCHARTS/BITSTAMPUSD-Bitcoin-Markets-bitstampUSD).
    The corresponding unique identifier for our target dataset is `BCHARTS/BITSTAMPUSD`.
    Although an official Python client library is available from Quandl, we are not
    going to use that for the sake of demonstrating the general procedures of importing
    JSON data. The function `get_bitcoin_dataset` uses nothing more than `urllib.request.urlopen`
    and `json.loads` to fetch the JSON data from the API. Finally the data is processed
    into a pandas DataFrame for our further consumption.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在Bitstamp交易所的比特币历史价格数据可以在此找到：[https://www.quandl.com/data/BCHARTS/BITSTAMPUSD-Bitcoin-Markets-bitstampUSD](https://www.quandl.com/data/BCHARTS/BITSTAMPUSD-Bitcoin-Markets-bitstampUSD)。我们目标数据集的唯一标识符是`BCHARTS/BITSTAMPUSD`。尽管Quandl提供了官方的Python客户端库，我们为了演示导入JSON数据的一般流程，将不使用该库。`get_bitcoin_dataset`函数仅使用`urllib.request.urlopen`和`json.loads`来从API获取JSON数据。最后，数据被处理为pandas
    DataFrame，以供进一步使用。
- en: '[PRE15]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Remember to specify your own API key at this line:  `api_key = ""`.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 记得在这一行指定你自己的API密钥：`api_key = ""`。
- en: The `Date` column in `df` is recorded as a series of Python strings. Although
    Seaborn can use string-formatted dates in some functions, Matplotlib cannot. To
    make the dates malleable to data processing and visualizations, we need to convert
    the values to float numbers that is supported by Matplotlib. Therefore, I have
    used `matplotlib.dates.date2num` to perform the conversion.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`df`中的`Date`列是作为一系列Python字符串记录的。尽管Seaborn可以在某些函数中使用字符串格式的日期，Matplotlib却不行。为了使日期能够进行数据处理和可视化，我们需要将其转换为Matplotlib支持的浮动点数。因此，我使用了`matplotlib.dates.date2num`来进行转换。'
- en: Our data frame contains the opening and closing price, as well as the highest
    and lowest price per trading day. None of the plots we described thus far are
    able to describe the trend of all these variables in a single plot.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的数据框包含每个交易日的开盘价和收盘价，以及最高价和最低价。到目前为止，我们描述的所有图表都无法在一个图表中描述所有这些变量的趋势。
- en: In the financial world, candlestick plot is almost the default choice for describing
    price movements of stocks, currencies, and commodities over a time period. Each
    candlestick consists of the body that describes the opening and closing prices,
    and extended wicks that illustrate the highest and lowest prices, in one particular
    trading day. If the closing price is higher than the opening price, the candlestick
    is often colored black. Conversely, the candlestick would be colored red if the
    closing is lower. Traders can then infer the opening and closing prices based
    on the combination of color and the boundary of candlestick body.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在金融世界中，蜡烛图几乎是描述股票、货币和商品在一段时间内价格变动的默认选择。每根蜡烛由描述开盘价和收盘价的主体，以及展示最高价和最低价的延伸蜡烛线组成，表示某一特定交易日。如果收盘价高于开盘价，蜡烛通常为黑色。相反，如果收盘价低于开盘价，蜡烛则为红色。交易者可以根据颜色和蜡烛主体的边界来推断开盘价和收盘价。
- en: In the following example, we are going to prepare a candlestick chart of bitcoin
    in the last 30 trading days of our data frame. The `candlestick_ohlc` function
    was adapted from the deprecated `matplotlib.finance` package. It plots the time,
    open, high, low, and close as a vertical line ranging from low to high. It further
    uses a series of colored rectangular bars to represent the open-close span.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，我们将准备一个比特币在过去30个交易日的数据框中的蜡烛图。`candlestick_ohlc`函数是从已废弃的`matplotlib.finance`包中改编而来。它绘制时间、开盘价、最高价、最低价和收盘价为一个从低到高的垂直线。它进一步使用一系列彩色矩形条来表示开盘和收盘之间的跨度。
- en: '[PRE16]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The `bitcoin_chart` function handles the actual processing of user requests
    and the output of `HttpResponse`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`bitcoin_chart`函数处理用户请求的实际处理和`HttpResponse`的输出。'
- en: '[PRE17]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '`ax.xaxis.set_major_formatter(DateFormatter(''%Y-%m-%d''))` is useful for the
    conversion of floating point numbers back to dates.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`ax.xaxis.set_major_formatter(DateFormatter(''%Y-%m-%d''))` 对于将浮动点数转换回日期非常有用。'
- en: Like the first Django view example, we need to modify our urls.py to direct
    the URLs to our `bitcoin_chart` view.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 与第一个Django视图示例类似，我们需要修改`urls.py`，将URL指向我们的`bitcoin_chart`视图。
- en: '[PRE18]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Voila! You can look at the bitcoin candlestick plot by going to `http://localhost:8000/bitcoin/30/`.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 完成！你可以通过访问`http://localhost:8000/bitcoin/30/`查看比特币蜡烛图。
- en: '![](img/d2616a8d-0e10-4c28-a726-986aa922e1be.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d2616a8d-0e10-4c28-a726-986aa922e1be.png)'
- en: Integrating more pricing indicators
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成更多的价格指标
- en: The candlestick plot in the current form is a bit bland. Traders would usually
    overlay stock indicators such as **average true range** (**ATR**), Bollinger band,
    **commodity channel index** (**CCI**), **exponential moving average** (**EMA**),
    **moving average convergence divergence** (**MACD**), **relative strength index**
    (**RSI**), and other various stats for technical analysis.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 当前形式的蜡烛图有些单调。交易者通常会叠加股票指标，如**平均真实范围**（**ATR**）、布林带、**商品通道指数**（**CCI**）、**指数移动平均线**（**EMA**）、**平滑异同移动平均线**（**MACD**）、**相对强弱指数**（**RSI**）等，用于技术分析。
- en: Stockstats ([https://github.com/jealous/stockstats](https://github.com/jealous/stockstats))
    is a great package for calculating the preceding indicators/stats and much more.
    It wraps around pandas DataFrames and generate that stats on the fly when they
    are accessed.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: Stockstats ([https://github.com/jealous/stockstats](https://github.com/jealous/stockstats))
    是一个很棒的包，可以用来计算前面提到的指标/统计数据以及更多内容。它基于pandas DataFrame，并在访问时动态生成这些统计数据。
- en: In this section, we can convert a pandas DataFrame to a stockstats DataFrame
    via `stockstats.StockDataFrame.retype()`. A plethora of stock indicators can then
    be accessed by following the pattern `StockDataFrame["variable_timeWindow_indicator"]`.
    For example, `StockDataFrame['open_2_sma']` would give us 2-day simple moving
    average on opening price. Shortcuts may be available for some indicators, so please
    consult the official documentation for more information.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们可以通过`stockstats.StockDataFrame.retype()`将一个pandas DataFrame转换为一个stockstats
    DataFrame。然后，可以通过遵循`StockDataFrame["variable_timeWindow_indicator"]`的模式访问大量的股票指标。例如，`StockDataFrame['open_2_sma']`会给我们开盘价的2日简单移动平均。某些指标可能有快捷方式，因此请参考官方文档获取更多信息。
- en: The file `views2.py` in our code repository contains the code to create an extended
    Bitcoin pricing view. You can copy `views2.py` from this chapter's code repository
    to `crypto_stats/src/bitcoin`, and rename it as `views.py`.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们代码库中的`views2.py`文件包含了创建扩展比特币定价视图的代码。你可以将本章代码库中的`views2.py`复制到`crypto_stats/src/bitcoin`目录，并将其重命名为`views.py`。
- en: 'Here are the important changes to our previous code:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是我们之前代码中需要的重要更改：
- en: '[PRE19]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Again, remember to specify your own API key at the line inside `get_bitcoin_dataset(): 
    api_key = ""`.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 再次提醒，请确保在`get_bitcoin_dataset()`函数中的代码行内指定你自己的API密钥：`api_key = ""`。
- en: The modified `bitcoin_chart` view would create three subplots that are spread
    across three rows, with a shared *x* axis. The height ratio between the subplots
    is specified via `gridspec_kw`.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 修改后的`bitcoin_chart`视图将创建三个子图，它们跨越三行，并共享一个*x*轴。子图之间的高度比通过`gridspec_kw`进行指定。
- en: The first subplot would display a candlestick chart as well as various stock
    indicators from the `stockstats` package.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个子图将显示蜡烛图以及来自`stockstats`包的各种股票指标。
- en: The second subplot displays the **relative strength index** (**RSI**) of bitcoin
    across the 30-day window.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个子图显示了比特币在30天窗口中的**相对强弱指数**（**RSI**）。
- en: Finally, the third subplot displays the volume (USD) of Bitcoin. A custom `FuncFormatter
    millions` is used to convert the *y* axis values to millions.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，第三个子图显示了比特币的交易量（美元）。自定义的`FuncFormatter millions`被用来将*y*轴的值转换为百万。
- en: You can now go to the same link at [http://localhost:8000/bitcoin/30/](http://localhost:8000/bitcoin/30/)
    to view the complete chart.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可以访问相同的链接[http://localhost:8000/bitcoin/30/](http://localhost:8000/bitcoin/30/)来查看完整的图表。
- en: '![](img/2bb2dd45-be87-4286-ab8e-08e8b26093d9.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2bb2dd45-be87-4286-ab8e-08e8b26093d9.png)'
- en: Integrating the image into a Django template
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将图像集成到Django模板中
- en: To display the chart in our home page, we can modify the home page template
    at `{Project_folder}/crypto_stats/src/templates/home.html`.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 要在首页显示图表，我们可以修改位于`{Project_folder}/crypto_stats/src/templates/home.html`的首页模板。
- en: 'We would need to modify the lines after the comment sentence `<!-- Benefits
    of the Django application -->` to the following:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要修改`<!-- Benefits of the Django application -->`注释后的代码行，修改为以下内容：
- en: '[PRE20]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Basically, our `bitcoin_chart` view is loaded as an image through the line `<img
    src="img/" alt="Bitcoin prices" style="width:100%">`. I have also reduced the
    number of columns in the container section from 3 to 2, and adjusted the size
    of the first column by setting the class to  `col-lg-8` instead.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，我们的`bitcoin_chart`视图是通过`<img src="img/" alt="Bitcoin prices" style="width:100%">`这一行作为图像加载的。我还将容器部分的列数从3列减少到了2列，并通过将类设置为`col-lg-8`来调整了第一列的大小。
- en: 'If you go to the home page (that is, `http://localhost:8000`), you will see
    the following screen when you scroll to the bottom:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你访问首页（即`http://localhost:8000`），当你滚动到页面底部时，你会看到以下屏幕：
- en: '![](img/d802a17d-36f4-431d-8928-437e70197d26.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d802a17d-36f4-431d-8928-437e70197d26.png)'
- en: There are a few caveats of this implementation. First, each page visit would
    incur an API call to Quandl, so your free API quota will be consumed quickly.
    A better way would be to fetch the prices daily and record the data in a proper
    database model.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 这个实现有一些注意事项。首先，每次访问页面都会触发一次API调用到Quandl，因此你的免费API配额会很快被消耗。更好的方法是每天获取一次价格，并将数据记录到合适的数据库模型中。
- en: Second, the image output in its current form is not integrated into the app-specific
    template. This is out of the scope of this Matplotlib-focused book. However, interested
    readers can refer to the instructions in the online documentation ([https://docs.djangoproject.com/en/2.0/topics/templates/](https://docs.djangoproject.com/en/2.0/topics/templates/)).
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，当前形式的图像输出并没有集成到特定的应用模板中。这超出了本书以Matplotlib为主题的范围。然而，感兴趣的读者可以参考在线文档中的说明（[https://docs.djangoproject.com/en/2.0/topics/templates/](https://docs.djangoproject.com/en/2.0/topics/templates/)）。
- en: Lastly, the images are static. There are third-party packages such as `mpld3`
    and Plotly that can turn a Matplotlib chart into an interactive Javascript-based
    chart. The use of these packages may further enhance the user experience.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，这些图像是静态的。像`mpld3`和Plotly这样的第三方包可以将Matplotlib图表转换为基于Javascript的交互式图表。使用这些包可以进一步增强用户体验。
- en: Summary
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned about a popular framework made to simplify the
    development and deployment of web applications, called Django. You further learned
    about integrating Matplotlib charts into a Django site.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你了解了一个流行的框架，旨在简化Web应用程序的开发和部署，即Django。你还进一步学习了如何将Matplotlib图表集成到Django网站中。
- en: In the next chapter, we will cover some useful techniques to customize figure
    aesthetics for effective storytelling.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍一些有用的技术，用于定制图形美学，以便有效讲述故事。
