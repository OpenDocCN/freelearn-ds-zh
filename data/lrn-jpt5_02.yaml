- en: Jupyter Python Scripting
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jupyter Python 脚本编写
- en: Jupyter was originally IPython, an interactive version of Python to be used
    as a development environment. As such, most of the features of Python are available
    to you when developing your Notebook.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Jupyter 最初是 IPython，一个交互式版本的 Python，用作开发环境。因此，当你在开发 Notebook 时，大多数 Python 的特性都可以使用。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将覆盖以下主题：
- en: Basic Python scripting
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基础 Python 脚本编写
- en: Python dataset access (from a library)
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 数据集访问（来自库）
- en: Python pandas
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python pandas
- en: Python graphics
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 图形
- en: Python random numbers
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 随机数
- en: Basic Python in Jupyter
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jupyter 中的基础 Python
- en: 'We must open a Python section of our Notebook to use Python coding. So, start
    your Notebook, and then in the upper-right menu, select Python 3:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须打开 Notebook 的 Python 部分才能使用 Python 代码。因此，启动你的 Notebook，然后在右上角的菜单中选择 Python
    3：
- en: '![](img/c47da8b7-1269-47b6-9750-be5bdea4b51e.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c47da8b7-1269-47b6-9750-be5bdea4b51e.png)'
- en: 'This will open a Python window to work in:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打开一个用于工作的 Python 窗口：
- en: '![](img/e1bd59aa-a937-47e9-8f25-82c351e44d9e.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e1bd59aa-a937-47e9-8f25-82c351e44d9e.png)'
- en: As mentioned in the previous chapter, the new window shows an empty cell so
    that you can enter Python code.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 正如上一章所提到的，新窗口显示了一个空单元格，方便你输入 Python 代码。
- en: 'Let''s give the new work area a name, `Learning Jupyter 5, Chapter 2`. Autosave
    should be on (as you can see next to the title). With an accurate name, we can
    find this section again easily from the Notebook home page. If you select your
    browser''s Home tab and refresh it, you will see this new window name being displayed:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 给新的工作区命名为`Learning Jupyter 5, Chapter 2`。自动保存应该已开启（如你在标题旁边所见）。通过准确的命名，我们可以轻松地从
    Notebook 首页再次找到这一部分。如果你选择浏览器的主页标签并刷新它，你将看到这个新窗口名称显示出来：
- en: '![](img/a3ef1515-d01b-4f63-9445-b35fb0e27a88.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a3ef1515-d01b-4f63-9445-b35fb0e27a88.png)'
- en: 'Note that it has an Notebook icon versus a folder icon. The extension that''s
    automatically assigned is `.ipynb` (Python Notebook). And, since the item is in
    a browser in a Jupyter environment, it is marked as running. There is a file by
    that name in your directory on the disk as well:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，它有一个 Notebook 图标，而不是文件夹图标。自动分配的扩展名是 `.ipynb`（Python Notebook）。并且，由于该项处于 Jupyter
    环境中的浏览器中，因此它被标记为正在运行。你的磁盘目录中也有一个相同名称的文件：
- en: '![](img/8fdd1af0-d3a8-4943-9825-0e202a1c0363.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8fdd1af0-d3a8-4943-9825-0e202a1c0363.png)'
- en: 'If you open the `.ipynb` file in a text editor, you will see the basic contents
    of a Jupyter node (as mentioned in the *Notebook structure* section in [Chapter
    1](5b555482-7a8c-4327-8d4a-b7223db52388.xhtml), *Introduction to Jupyter*). We
    have one empty cell and metadata about the Notebook:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在文本编辑器中打开 `.ipynb` 文件，你会看到 Jupyter 节点的基本内容（如在[第一章](5b555482-7a8c-4327-8d4a-b7223db52388.xhtml)的
    *Notebook 结构* 部分中提到的，*Jupyter 入门*）。我们有一个空的单元格和关于 Notebook 的元数据：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We can now enter Python coding into the cells. For example:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以在单元格中输入 Python 代码。例如：
- en: Type in some Python in the first cell
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第一个单元格中输入一些 Python 代码
- en: 'Add another cell to the end (using the Insert Cell Above or Insert Cell Below
    menu command):'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在末尾添加一个新的单元格（使用“插入单元格上方”或“插入单元格下方”菜单命令）：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'And in the second cell, enter the Python code that references the variables
    from the first cell:'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第二个单元格中，输入引用第一个单元格中变量的 Python 代码：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We will then have this display:'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后我们将看到这个显示：
- en: '![](img/15352f6d-8b7f-4591-a2f9-fa80053525c8.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/15352f6d-8b7f-4591-a2f9-fa80053525c8.png)'
- en: It's important to note that Jupyter color codes your Python (just as a decent
    editor would), and that we have these empty braces to the left of each code block.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，Jupyter 会为你的 Python 代码着色（就像一个合格的编辑器一样），并且每个代码块的左侧都有这些空的括号。
- en: 'If we execute Run All, the results are displayed inline:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们执行“运行全部”，结果会以内联的形式显示出来：
- en: '![](img/a5e9e5e1-00b3-4efb-abd8-9d3e20b8bcf0.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a5e9e5e1-00b3-4efb-abd8-9d3e20b8bcf0.png)'
- en: We now have the braces filled in with cell numbers, and the output of cells
    is appended to the bottom of each cell. It's important to note that cell two was
    able to reference variables that were declared in cell one.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经填充了括号，显示了单元格编号，单元格的输出被附加在每个单元格的底部。需要注意的是，第二个单元格能够引用在第一个单元格中声明的变量。
- en: 'If we either wait for autosave to kick in or hit the save icon (the leftmost
    icon of a diskette), we will update the `.pynb` file on the disk with our results:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们等待自动保存启动或点击保存图标（最左边的软盘图标），我们将更新磁盘上的 `.pynb` 文件，并保存我们的结果：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: It's interesting that Jupyter keeps track of the output last generated in the
    saved version of the file. You can also clear the output using the Cell| All Ouput
    | Clear command.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，Jupyter 会跟踪最后一次生成的输出，并保存在文件的保存版本中。你也可以使用 Cell| All Output | Clear 命令来清除输出。
- en: If you were then to rerun your cells (using Cell | Run All), the output would
    be regenerated (and saved via autosave). The cell numbering is incremented if
    you do this – Jupyter is keeping track of the latest version of each cell.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你重新运行单元格（使用 Cell | Run All），输出将被重新生成（并通过自动保存保存）。如果你这样做，单元格编号会递增——Jupyter 会跟踪每个单元格的最新版本。
- en: Similarly, if you were to close the browser tab, refresh the display in the
    Home tab, find the new item we created (`Learning Jupyter 5, Chapter 2.pynb`)
    and click on it, the new tab (as created previously) will be displayed, showing
    the outputs that we generated when we last run it.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，如果你关闭浏览器标签页，刷新主页标签页的显示，找到我们创建的新项目（`Learning Jupyter 5, Chapter 2.pynb`），并点击它，之前创建的新标签页将显示出来，展示我们上次运行时生成的输出。
- en: 'If you open the server command-line window (where the Jupyter service is running),
    you will see a list of the actions that we have made during our session:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打开服务器命令行窗口（Jupyter 服务运行的地方），你会看到我们在会话中所做的操作列表：
- en: '![](img/c0a4138d-c1ea-4ed7-beba-0c1def638dac.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c0a4138d-c1ea-4ed7-beba-0c1def638dac.png)'
- en: The logging entries are at a high level. There may be a way to increase the
    logging level if there is some difficulty being encountered.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 日志条目处于较高的级别。如果遇到困难，可能可以增加日志级别。
- en: Python data access in Jupyter
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 数据访问在 Jupyter 中
- en: Now that we have seen how Python works in Jupyter, including the underlying
    encoding, how does Python access a large dataset of work in Jupyter?
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了 Python 在 Jupyter 中的工作方式，包括底层编码，那么 Python 如何在 Jupyter 中访问一个大型数据集呢？
- en: I started another view for pandas, using Python data access as the name. From
    here, we will read in a large dataset and compute some standard statistics on
    the data. We are interested in seeing how we use pandas in Jupyter, how well the
    script performs, and what information is stored in the metadata (especially if
    it is a larger dataset).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我为 pandas 创建了另一个视图，使用 Python 数据访问作为名称。从这里开始，我们将读取一个大型数据集，并计算一些标准统计数据。我们感兴趣的是了解如何在
    Jupyter 中使用 pandas，脚本的性能如何，以及元数据中存储了哪些信息（尤其是当数据集较大时）。
- en: Our script accesses the `iris` dataset that is built-in to one of the Python
    packages. All we are looking to do is read in a slightly large number of items
    and calculate some basic operations on the dataset. We are really interested to
    see how much of the data is cached in the `.pynb` file.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的脚本访问了一个内建于 Python 包中的`iris`数据集。我们要做的仅仅是读取略多数量的项目，并对数据集进行一些基本操作。我们真正感兴趣的是看到有多少数据被缓存到了`.pynb`文件中。
- en: 'The Python code is as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Python 代码如下：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'I broke these steps into a couple of cells in Jupyter:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我将这些步骤分成了几个 Jupyter 单元格：
- en: '![](img/04922030-dd2e-46a9-9f64-02eae1c0e6a2.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/04922030-dd2e-46a9-9f64-02eae1c0e6a2.png)'
- en: 'Now, run the cells (using Cell | Run All) and we will get the following display.
    The only difference is the last out line where our values are displayed:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，运行单元格（使用 Cell | Run All），我们将看到以下显示。唯一的区别是最后一行输出，我们的值将在那里显示：
- en: '![](img/67517812-7148-4a11-8a1c-f2c20abe383d.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/67517812-7148-4a11-8a1c-f2c20abe383d.png)'
- en: It seemed to take longer to load the library (the first time I ran the script)
    than to read the data and calculate the statistics.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来加载库的时间（我第一次运行脚本时）比读取数据和计算统计数据的时间还要长。
- en: 'If we look in the `.pynb` file for this Notebook, we can see that none of the
    data is cached in the `.pynb` file. We simply have code references to the library,
    our code, and the output from when we last calculated the script:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看这个 Notebook 的`.pynb`文件，我们会发现没有数据被缓存到`.pynb`文件中。我们只是有对库的代码引用、我们的代码和上次计算脚本时的输出：
- en: '[PRE5]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Python pandas in Jupyter
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python pandas 在 Jupyter 中
- en: One of the most widely used features of Python is pandas. The pandas are built-in
    libraries of data analysis packages that can be used freely. In this example,
    we will develop a Python script that uses pandas to see if there is any affect
    of using them in Jupyter.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Python 最广泛使用的功能之一是 pandas。pandas 是内建的数据分析库，可以自由使用。在这个示例中，我们将开发一个 Python 脚本，利用
    pandas 来查看它们在 Jupyter 中的使用效果。
- en: I am using the Titanic dataset from [https://www.kaggle.com/c/titanic/data](https://www.kaggle.com/c/titanic/data).
    I am sure that the same data is available from a variety of sources.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用的是[https://www.kaggle.com/c/titanic/data](https://www.kaggle.com/c/titanic/data)上的Titanic数据集。我确信其他来源也有相同的数据。
- en: Note that you have to sign up for **Kaggle** in order to download the data.
    It's free.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，你必须注册**Kaggle**才能下载数据，且注册是免费的。
- en: 'Here is our Python script that we want to run in Jupyter:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们希望在Jupyter中运行的Python脚本：
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The result is that we calculate the survival rates of the passengers based on
    sex.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是我们根据性别计算了乘客的生存率。
- en: We create a new Notebook, enter the script into the appropriate cells, include
    adding displays of calculated data at each point, and produce our results.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建一个新的Notebook，将脚本输入到适当的单元格中，在每个步骤中添加计算数据的显示，并生成我们的结果。
- en: 'Here is our Notebook laid out, where we added displays of calculated data at
    each cell:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们布局的Notebook，在每个单元格中都添加了计算数据的显示：
- en: '![](img/662c6bd0-e8af-4ab8-8035-7adf3a2e1f88.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/662c6bd0-e8af-4ab8-8035-7adf3a2e1f88.png)'
- en: 'When I ran this script, I had two problems:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当我运行这个脚本时，我遇到了两个问题：
- en: On Windows, it is common to use a backslash (`\`) to separate parts of a filename.
    However, this coding uses the backslash as a special character. So, I had to change
    over to using a forward slash (`/`) in my `.csv` file path.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上，通常使用反斜杠（`\`）来分隔文件名的各部分。然而，这种编码将反斜杠用作特殊字符。因此，我不得不将`.csv`文件路径中的反斜杠改为正斜杠（`/`）。
- en: The dataset column names are taken directly from the file and are case-sensitive.
    In this case, I was originally using the `sex` field in my script, but in the
    `.csv` file, the column is named `Sex`. Similarly, I had to change `survived` to
    `Survived`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 数据集的列名直接来自文件，并且区分大小写。在这种情况下，我最初在脚本中使用了`sex`字段，但在`.csv`文件中，列名是`Sex`。类似地，我不得不将`survived`改为`Survived`。
- en: 'The final script and results look like this when we run it:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行脚本时，最终的脚本和结果如下所示：
- en: '![](img/a7051258-a2c7-4cb3-b5ad-0310a852d356.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a7051258-a2c7-4cb3-b5ad-0310a852d356.png)'
- en: I have used the `head()` function to display the first few lines of the dataset.
    It is interesting the amount of detail that is available for all of the passengers.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用了`head()`函数来显示数据集的前几行。很有趣的是，所有乘客的详细信息都能显示出来。
- en: 'If you scroll down, you will see the results:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你向下滚动，你将看到结果：
- en: '![](img/62b99992-e518-4740-a37b-8c4f95af9d6d.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/62b99992-e518-4740-a37b-8c4f95af9d6d.png)'
- en: We can see that 74% of the survivors were women versus just 19% men. I would
    like to think that chivalry is not dead.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，74%的幸存者是女性，而只有19%是男性。我希望绅士风度没有消失。
- en: It's curious that the results do not total to 100%. However, like every other
    dataset I have seen, there is missing and/or inaccurate data present.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 很奇怪，结果总和并不等于100%。然而，就像我见过的其他数据集一样，这里也存在缺失和/或不准确的数据。
- en: Python graphics in Jupyter
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jupyter中的Python图形
- en: How do Python graphics work in Jupyter?
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Python图形如何在Jupyter中工作？
- en: I started another view for this named Python graphic*s* so as to distinguish
    the work.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我为此开始了另一个视图，命名为Python图形*（s）*，以便区分这部分工作。
- en: If we were to build a sample dataset of baby names and the number of births
    in a year of that name, we could then plot the data.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们构建一个包含婴儿名字及该名字每年出生数量的样本数据集，我们就可以绘制出数据图表。
- en: 'The Python coding is simple:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Python编码很简单：
- en: '[PRE7]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The steps for the script are as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本的步骤如下：
- en: Import the graphics library (and data library) we need
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入我们需要的图形库（和数据库）
- en: Define our data
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义我们的数据
- en: Convert the data into a format that allows for an easy graphical display
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将数据转换为一种便于图形显示的格式
- en: Plot the data
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 绘制数据
- en: We would expect a resultant graph of the number of births by baby name.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以预期得到一个按婴儿名字分布的出生数量图表。
- en: 'Taking the previous script and placing it into cells of our Jupyter node, we
    get something that looks like this:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 将之前的脚本放入Jupyter单元格后，我们得到如下结果：
- en: '![](img/5798f7b5-1fec-4c5e-820e-d24a2bf3c82b.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5798f7b5-1fec-4c5e-820e-d24a2bf3c82b.png)'
- en: I have broken the script into different cells for easier readability. Having
    different cells also allows you to develop the script easily, step-by-step, where
    you can display the values computed so far to validate your results. I have done
    this in most of the cells by displaying the dataset and dataframe at the bottom
    of those cells.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我将脚本拆分成不同的单元格，以提高可读性。拥有不同的单元格还允许你一步步地开发脚本，在每个步骤展示计算的值，以验证结果。我在大多数单元格中通过显示数据集和数据框来实现这一点。
- en: 'When we run this script (Cell | Run All), we can see the results at each step
    being displayed as the script progresses:'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们运行这个脚本（Cell | Run All）时，我们可以看到每一步的结果随着脚本的执行逐步显示：
- en: '![](img/312b8b3f-503f-449a-91ef-b5b134eefba4.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/312b8b3f-503f-449a-91ef-b5b134eefba4.png)'
- en: 'And finally, we can see our plot of the births:'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最终，我们可以看到我们的出生数据图：
- en: '![](img/936fed00-074c-40d3-9a76-4c9a7a4fea33.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/936fed00-074c-40d3-9a76-4c9a7a4fea33.png)'
- en: I was curious about what metadata was stored for this script. Looking into the
    `.ipynb` file, you can see the expected value for the formula cells.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我对这个脚本存储了什么元数据感到好奇。通过查看 `.ipynb` 文件，你可以看到公式单元格的期望值。
- en: 'The tabular data display of the dataframe is stored as HTML convenient:'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据框的表格数据以 HTML 格式方便地存储：
- en: '[PRE8]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The graphic output cell is stored like this:'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图形输出单元格存储如下：
- en: '[PRE9]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Where the `image/png` tag contains a large hex digit string representation of
    the graphical image displayed on screen (I abbreviated the display in the coding
    that's shown). So, the actual generated image is stored in the metadata for the
    page.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 `image/png` 标签包含一个大型十六进制数字字符串表示屏幕上显示的图形图像（我在显示的代码中简化了这个显示）。因此，实际生成的图像存储在页面的元数据中。
- en: So, rather than a cache, Jupyter is remembering the output from when each cell
    was last executed.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，Jupyter 不是缓存，而是记住了每个单元格最后执行时的输出。
- en: Python random numbers in Jupyter
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jupyter 中的 Python 随机数
- en: For many analyses, we are interested in calculating repeatable results. However,
    much of this analysis relies on some random numbers being used. In Python, you
    can set `seed` for the random number generator to achieve repeatable results with
    the `random.seed()` function.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 对于许多分析，我们需要计算可重复的结果。然而，很多分析依赖于使用随机数。在 Python 中，你可以通过 `random.seed()` 函数设置 `seed`
    来为随机数生成器实现可重复的结果。
- en: In this example, we simulate rolling a pair of dice and look at the outcome.
    We would expect the average total of the two dice to be six, which is the half-way
    point between the faces.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们模拟掷一对骰子并观察结果。我们预计两个骰子的总和的平均值是六，这是两个面之间的中点。
- en: 'The script we are using is as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用的脚本如下：
- en: '[PRE10]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Once we have the script in Jupyter and execute it, we will get the following
    result:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们在 Jupyter 中执行脚本，我们将得到以下结果：
- en: '![](img/8691328d-6cb5-48d2-a554-b1a59a303926.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8691328d-6cb5-48d2-a554-b1a59a303926.png)'
- en: I added some more statistics. I'm not sure that I would have counted on such
    a high standard deviation. If we increased the number of `samples`, this would
    decrease.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我增加了一些统计数据。我不确定我是否会依赖如此高的标准差。如果我们增加 `samples` 的数量，这个标准差会减少。
- en: 'The resulting graph was opened in a new window, much as it would if you ran
    this script in another Python development environment:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 结果图形被打开在一个新窗口中，就像你在另一个 Python 开发环境中运行这个脚本时那样：
- en: '![](img/8b018639-3a67-454b-81c1-a47a5aa9c928.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8b018639-3a67-454b-81c1-a47a5aa9c928.png)'
- en: The graphic looks a little more jagged than I would have expected for a thousand
    samples.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图形看起来比我预期的略显锯齿状，尤其是在一千个样本的情况下。
- en: Summary
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we walked through a simple Notebook and the underlying structure.
    Then, we saw an example of using pandas and looked at a graphics example. Finally,
    we looked at an example using random numbers in a Python script.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们介绍了一个简单的 Notebook 及其基础结构。然后，我们看了一个使用 pandas 的示例，并查看了图形示例。最后，我们看了一个使用
    Python 脚本生成随机数的示例。
- en: In the next chapter, we will learn about R scripting in a Jupyter Notebook.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习在 Jupyter Notebook 中使用 R 脚本。
