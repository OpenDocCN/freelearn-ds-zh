- en: Basics of ArcPy
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ArcPy 基础
- en: Now that you have an understanding of python syntax you can start working with
    the **ArcPy** package. ArcPy is the Python package provided by ArcGIS to perform
    and automate geoprocessing and map production tools tasks. In addition to the
    **geoprocessing** tools available in ArcGIS you have access to additional modules,
    functions, and classes. When combined you can create workflows and standalone
    tools that simplify and automate complex analysis and map production.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经理解了 Python 语法，可以开始使用 **ArcPy** 包。ArcPy 是 ArcGIS 提供的 Python 包，用于执行和自动化地理处理和制图任务。除了
    ArcGIS 中提供的 **地理处理** 工具外，你还可以访问其他模块、函数和类。将这些组合在一起，你可以创建简化并自动化复杂分析和制图的工作流程和独立工具。
- en: 'This chapter will cover:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖：
- en: Ensuring your Python Environment is set up for ArcPy
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保你的 Python 环境已为 ArcPy 配置
- en: ArcPy Tools and how to use them in ArcGIS Pro
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ArcPy 工具以及如何在 ArcGIS Pro 中使用它们
- en: Accessing **environment settings** in ArcPy
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 ArcPy 中访问 **环境设置**
- en: '**Functions** in ArcPy'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ArcPy** 中的 **函数**'
- en: ArcPy **Module**s
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ArcPy **模块**
- en: Checking your ArcPy Install
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查你的 ArcPy 安装
- en: The ArcPy package allows you access to the geoprocessing function of ArcGIS
    Pro. Python packages contain multiple modules, functions, and classes. A package
    is set up with a hierarchical structure and uses dot notation for the modules
    and functions.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: ArcPy 包使你能够访问 ArcGIS Pro 的地理处理功能。Python 包包含多个模块、函数和类。一个包采用层次结构，并使用点表示法来访问模块和函数。
- en: ArcPy is installed with ArcGIS for Pro and ArcGIS Desktop. ArcPy has been used
    to write Python scripts in ArcGIS since ArcGIS 10.0\. It is the official ArcGIS
    scripting language and can be used to automate analysis and map production workflows.
    ArcGIS desktop uses Python 2.7, which is currently up to release 2.7.18\. ArcGIS
    Pro uses a new version of Python, Python 3\. The most recent release of Python
    3 is Python 3.9.5\. You can check what version of Python you have installed by
    going to the **Project>Python>Installed Packages** and finding **Python.**
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: ArcPy 随 ArcGIS for Pro 和 ArcGIS Desktop 一起安装。从 ArcGIS 10.0 开始，ArcPy 就被用于在 ArcGIS
    中编写 Python 脚本。它是官方的 ArcGIS 脚本语言，可用于自动化分析和制图工作流程。ArcGIS 桌面版使用 Python 2.7，当前版本为
    2.7.18。ArcGIS Pro 使用的是新的 Python 版本 Python 3，当前最新版本是 Python 3.9.5。你可以通过前往 **项目>Python>已安装的包**
    并查找 **Python** 来检查你安装的 Python 版本。
- en: '![](img/file18.png)![](img/file19.png)![](img/file20.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file18.png)![](img/file19.png)![](img/file20.png)'
- en: 'To use the ArcPy package it must be imported. Most scripts start with import
    statements to allow access to all the modules that are part of the package. To
    import ArcPy use the following line of code:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 ArcPy 包时，必须先导入。大多数脚本都以导入语句开始，以便访问包中的所有模块。要导入 ArcPy，可以使用以下代码行：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Importing ArcPy gives access to all of the geoprocessing tools and the modules
    included.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 导入 ArcPy 可以访问所有的地理处理工具和所包含的模块。
- en: 'Some of the modules are:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一些模块包括：
- en: '**Arcpy.sa** (Spatial Anlayst)'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Arcpy.sa**（空间分析）'
- en: '**Arcpy.geocoding** (Geocoding)'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Arcpy.geocoding**（地理编码）'
- en: '**Arcpy.na** (Network Analyst)'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Arcpy.na**（网络分析）'
- en: '**Arcpy.da** (Data Access)'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Arcpy.da**（数据访问）'
- en: '**Arcoy.mp** (Mapping)'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Arcoy.mp**（制图）'
- en: Later chapters will take a closer at the data access and mapping modules. Both
    of those are very powerful and can automate work.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 后续章节将深入探讨数据访问和制图模块。这两个模块都非常强大，可以自动化工作。
- en: Python IDLE Shell for ArcGIS Pro Install
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Python IDLE Shell for ArcGIS Pro 安装
- en: Since Python and ArcPy are installed with ArcGIS Pro, if you are using the **IDLE
    Shell** for the version of Python installed with ArcGIS Pro you will not get an
    error when importing ArcPy. If you are using a different Python interpreter you
    will have to set it up to find the ArcPy module. Most of the time you will be
    writing scripts either directly into ArcGIS Pro’s Python window, an ArcGIS Notebook
    in ArcGIS Pro, or to turn into script tools, so it is easiest to use the Python
    IDLE that comes with the ArcGIS Pro install.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Python 和 ArcPy 是与 ArcGIS Pro 一起安装的，如果你使用的是 ArcGIS Pro 中安装的 Python 版本的 **IDLE
    Shell**，导入 ArcPy 时不会出现错误。如果你使用的是其他 Python 解释器，则需要进行配置，以使其找到 ArcPy 模块。大多数情况下，你会直接在
    ArcGIS Pro 的 Python 窗口、ArcGIS Pro 中的 ArcGIS Notebook 或转化为脚本工具中编写脚本，因此使用 ArcGIS
    Pro 安装中附带的 Python IDLE 最为方便。
- en: The easiest way to ensure accessing the Python IDLE that comes with the install
    of ArcGIS Pro is to create a shortcut, as one is not created on install.
  id: totrans-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 确保访问 ArcGIS Pro 安装附带的 Python IDLE 最简单的方法是创建一个快捷方式，因为安装时不会自动创建。
- en: 'Find the path to run IDLE, for a typical ArcGIS Pro installation it is here:
    `C:\Program Files\ArcGIS\Pro\bin\Python\envs\arcgispro-py3\Lib\idlelib\idle.bat`
    *Double clicking* on that will open IDLE:'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找运行 IDLE 的路径，对于典型的 ArcGIS Pro 安装，它通常在这里：`C:\Program Files\ArcGIS\Pro\bin\Python\envs\arcgispro-py3\Lib\idlelib\idle.bat`，*双击*
    它将打开 IDLE：
- en: '![](img/file21.png)'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](img/file21.png)'
- en: 'To create a shortcut, *right click* on your **desktop** and *click* **New>Shortcut**
    and paste the full path of the idle.bat file:'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要创建快捷方式，*右键点击* **桌面** 并 *点击* **新建 > 快捷方式**，然后粘贴 idle.bat 文件的完整路径：
- en: '![](img/file22.png)'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](img/file22.png)'
- en: '*Click* **Next**, and then give your shortcut name:'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*点击* **下一步**，然后为你的快捷方式命名：'
- en: '![](img/file23.png)'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](img/file23.png)'
- en: I suggest using a name that will allow you to remember this is the Python environment
    that was installed with ArcGIS Pro.
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我建议使用一个名称，这样你就能记住这是与 ArcGIS Pro 一起安装的 Python 环境。
- en: The icon will be the default shortcut icon
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图标将是默认的快捷方式图标。
- en: '![.](img/file24.png)'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![.](img/file24.png)'
- en: .
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: .
- en: 'To change the icon to the standard Python IDLE Icon:'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要更改图标为标准的 Python IDLE 图标：
- en: '*Right click* on it'
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*右键点击* 它'
- en: '*Click* **Properties**.'
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*点击* **属性**。'
- en: On the **Shortcut** tab *click* **on Change Icon**.
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 **快捷方式** 标签中，*点击* **更改图标**。
- en: You may get an alert that there are no icons and that you need to choose an
    icon from a different file. If so click okay so you can navigate to the icon location.
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你可能会收到一个警告，提示没有图标，需要从其他文件中选择一个图标。如果是这种情况，点击确定，这样你就可以导航到图标所在的位置。
- en: 'Navigate to the Python IDLE location, which should be located here: `C:\Program
    Files\ArcGIS\Pro\bin\Python\envs\arcgispro-py3\Lib\idlelib\Icons`'
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导航到 Python IDLE 所在位置，通常在此路径：`C:\Program Files\ArcGIS\Pro\bin\Python\envs\arcgispro-py3\Lib\idlelib\Icons`
- en: A shortcut to access the IDLE install for ArcGIS Pro is now installed on the
    desktop. This install is a place to test snippets of code when working on complex
    scripts tools. Something that will be explored in later chapters.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个用于访问 ArcGIS Pro 安装的 IDLE 快捷方式现在已经安装在桌面上。这个安装是一个测试代码片段的地方，特别是在处理复杂脚本工具时，稍后的章节将对此进行详细探讨。
- en: '![](img/file25.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file25.png)'
- en: '*When you want to use an IDLE to work with ArcGIS Pro you need to use this
    one as it is associated with your install of ArcGIS Pro.*'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '*当你想要使用 IDLE 与 ArcGIS Pro 一起工作时，你需要使用这个版本，因为它与你安装的 ArcGIS Pro 相关联。*'
- en: A good way to ensure the correct IDLE is being used is to import arcpy. If three
    carets >>> will be displayed after the install was successful
  id: totrans-44
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 确保使用正确的 IDLE 的一种好方法是导入 arcpy。如果安装成功后显示三个尖括号 >>>，说明 IDLE 已正确设置。
- en: '![](img/file26.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file26.png)'
- en: 'If not an error will be displayed:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有显示，系统将会显示一个错误：
- en: '![](img/file27.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file27.png)'
- en: The Python IDLE Shell
  id: totrans-48
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Python IDLE Shell
- en: 'The Python IDLE Shell is a good place to try out code as it is interactive
    and will display immediate results to code:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Python IDLE Shell 是尝试代码的好地方，因为它是交互式的，并且会立即显示代码结果：
- en: '![](img/file28.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file28.png)'
- en: The IDLE Shell also shows how elements of the code will be interpreted using
    different colors. Strings are shown in green, functions are in purple, loops and
    condition statements are in orange, and results are in blue.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: IDLE Shell 还使用不同的颜色显示代码元素的解释。字符串用绿色显示，函数用紫色显示，循环和条件语句用橙色显示，结果用蓝色显示。
- en: While it is useful to get immediate results from IDLE Shell it is not meant
    to be used for saving code. It is possible to copy it out if needed, but it is
    better practice to write it into a script file for saving.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然从 IDLE Shell 获取即时结果很有用，但它并不适合用来保存代码。虽然可以在需要时将其复制出来，但更好的做法是将其写入脚本文件中以便保存。
- en: To start a script file you *click* in the menu bar of the IDLE Shell on **File>New
    File**. This opens a new window that is an empty Python script file called Untitled.
    Unlike the IDLE Shell it doesn’t have a command prompt and the menu bar is different.
  id: totrans-53
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 要启动脚本文件，你需要在 IDLE Shell 的菜单栏上*点击* **文件>新建文件**。这将打开一个新的窗口，这是一个名为 Untitled 的空
    Python 脚本文件。与 IDLE Shell 不同，它没有命令提示符，并且菜单栏也有所不同。
- en: '![](img/file29.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file29.png)'
- en: You can create a script file
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以创建一个脚本文件。
- en: Copy the previous code you wrote in IDLE into the script file
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将之前在 IDLE 中编写的代码复制到脚本文件中。
- en: Remove the carets
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除尖括号。
- en: Fix the indentation to match below.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修正缩进以匹配下面的格式。
- en: Save the file.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保存文件。
- en: '![](img/file30.png)![](img/file31.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file30.png)![](img/file31.png)'
- en: This new file `HelloLoop.py` has `.py` extension signifying that it is a Python
    file. It can be run by clicking **Run > Run Module**. Sending the results to the
    Python IDLE Shell.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这个新文件 `HelloLoop.py` 有 `.py` 扩展名，表示它是一个 Python 文件。你可以通过点击 **运行 > 运行模块** 来运行它，并将结果发送到
    Python IDLE Shell。
- en: '![](img/file32.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file32.png)'
- en: Now that you have an understanding of
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了
- en: How to ensure your Python environment is set up to work with ArcPy
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何确保你的 Python 环境已设置为与 ArcPy 一起使用
- en: How to use the IDLE Shell
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用 IDLE Shell
- en: How to start a new script file
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何启动新的脚本文件
- en: You are now ready to look at the Python window in ArcGIS Pro and what you can
    do there.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在已经准备好查看 ArcGIS Pro 中的 Python 窗口以及你能在其中做什么了。
- en: Python Window in ArcGIS Pro
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ArcGIS Pro 中的 Python 窗口
- en: ArcPy can be accessed not just through IDLE but by using the Python window in
    ArcGIS Pro.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅可以通过 IDLE 访问 ArcPy，还可以通过 ArcGIS Pro 中的 Python 窗口访问。
- en: '![](img/file33.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file33.png)'
- en: The Python window allows you to write and run code directly in ArcGIS Pro and
    see the results of any geoprocessing tool as you run them. This can be an advantage
    when testing out new code to see what it is doing and how it is working. Code
    written in the Python window can then be copied or saved into large script tools.
    You will learn more about script tools in later chapters. For now let’s look at
    the Python window in ArcGIS Pro and see how powerful it can be.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Python 窗口允许你直接在 ArcGIS Pro 中编写和运行代码，并查看你运行任何地理处理工具时的结果。在测试新代码时，这可以帮助你看到代码的执行情况和效果。你编写的代码可以复制或保存到大型脚本工具中。你将在后续章节中学习更多关于脚本工具的内容。现在，让我们看看
    ArcGIS Pro 中的 Python 窗口，了解它有多强大。
- en: Once you click on the icon the Python window will pop up, usually the first
    time it will be docked at the bottom of your screen.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦点击图标，Python 窗口会弹出，通常第一次它会固定在屏幕底部。
- en: '![](img/file34.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file34.png)'
- en: Like all windows in ArcGIS Pro the Python window can be docked anywhere or can
    be floating. You can move it to where it is best for you to work using the same
    process of dragging and hiding as you would any ArcGIS Pro window.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 就像 ArcGIS Pro 中的所有窗口一样，Python 窗口可以固定在任何位置，或者可以自由浮动。你可以像处理任何 ArcGIS Pro 窗口一样，通过拖动和隐藏来将其移动到最适合你工作的地方。
- en: The top part of the window is called the **transcript** and is where code you
    have previously written is. The bottom where it says **Enter Python code here**
    is called the **prompt** and is where you would type code into. When you first
    open the Python window the transcript is blank as you haven’t written any code
    yet.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 窗口的顶部部分称为 **转录内容**，其中显示你之前编写的代码。底部标有 **在此处输入 Python 代码** 的部分称为 **提示符**，这是你输入代码的地方。当你第一次打开
    Python 窗口时，转录内容是空的，因为你还没有编写任何代码。
- en: Try some of the code you wrote in IDLE to see how it works in the Python window.
    Just like in IDLE when you enter a line of code you need to press *Enter*.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试在 IDLE 中编写的一些代码，看看它在 Python 窗口中是如何工作的。就像在 IDLE 中一样，当你输入一行代码时，需要按 *Enter*。
- en: Type in `x = 10 a`nd Press *Enter*
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入 `x = 10` 并按 *Enter*
- en: '![](img/file35.png)'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](img/file35.png)'
- en: Type in `y = 3` and Press *Enter*
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入 `y = 3` 并按 *Enter*
- en: '![](img/file36.png)'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](img/file36.png)'
- en: Type `x + y a`nd press *Enter*
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入 `x + y` 并按 *Enter*
- en: '![](img/file37.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file37.png)'
- en: You can see that this is working just like IDLE. *This means that all standard
    Python functions and tools will work in the Python window the same as they would
    in the IDLE Shell*.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到这就像在 IDLE 中一样正常工作。*这意味着所有标准的 Python 函数和工具在 Python 窗口中的运行方式与它们在 IDLE Shell
    中的表现是一样的*。
- en: The transcript can be cleared at any time by right clicking in the transcript
    box and selecting Clear Transcript. This does not remove your code or your variables
    from memory.
  id: totrans-84
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 转录框可以随时通过右键点击转录框并选择清除转录内容来清空。这不会从内存中删除你的代码或变量。
- en: Click in the transcript and select **Clear Transcript**.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击转录框并选择 **清除转录内容**。
- en: '![](img/file38.png)'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](img/file38.png)'
- en: Type `x + y` And press *Enter*
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入 `x + y` 并按 *Enter*
- en: '![](img/file39.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file39.png)'
- en: As you can see the variables for x and y were saved in memory and still usable
    even after clearing the transcript. These variables are even available if you
    save and close the project and open it again. *They are saved into the memory
    of the project so they can be used again later on the same project.* This can
    be useful but you will look at better ways to save code for reuse in the same
    and other projects in a later chapter.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，x 和 y 的变量已经保存在内存中，即使清除了转录内容，它们仍然可用。即使你保存并关闭项目，再次打开时这些变量仍然可用。*它们被保存在项目的内存中，因此可以在同一个项目中稍后再次使用。*
    这可能会很有用，但你将在后续章节中了解更好的方法来保存代码以便在同一项目和其他项目中重复使用。
- en: Just like in the IDLE Shell the Python Window understands when you are writing
    multiple lines of connected code. You can see this by writing in the for the HelloLoop.py
    script you wrote earlier in this chapter.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在 IDLE Shell 中一样，Python 窗口能够理解你编写的多行连接代码。你可以通过在本章前面编写的 HelloLoop.py 脚本来看到这一点。
- en: Type in `String = “Hello”` and press *Enter*
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入 `String = “Hello”` 并按 *Enter*
- en: Type in `i = 1` and press *Enter*
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入 `i = 1` 并按 *Enter*
- en: '*Type in* `while i < 5:` and press *Enter*'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*输入* `while i < 5:` 并按 *Enter*'
- en: Notice that the prompt window gets bigger and your cursor is indented. The Python
    Window understands that while statement is starting a block of code and is part
    of a multiline construct. As you continue to type in your code the prompt window
    will get bigger as additional lines are needed. The if statement is part of a
    multiline construct so it too will get the additional lines and indent as the
    while statement does
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注意，提示窗口变大了，并且光标有了缩进。Python 窗口理解 `while` 语句开始了一个代码块，并且是多行构造的一部分。当你继续输入代码时，提示窗口会变大，以容纳需要的额外行数。`if`
    语句也是多行构造的一部分，因此它也会像 `while` 语句一样增加额外的行并进行缩进。
- en: Type in `if i == 1:` and press *Enter Enter*
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入 `if i == 1:` 并按 *Enter Enter*
- en: Type in `print(string)` and press Enter
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入 `print(string)` 并按 *Enter*
- en: Type in `else:` and press *Enter*
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入 `else:` 并按 *Enter*
- en: Type in `print(i)` and press *Enter*
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入 `print(i)` 并按 *Enter*
- en: Type in `i+=1` and press *Enter*
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入 `i+=1` 并按 *Enter*
- en: Press *Enter*
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按 *Enter*
- en: When you are doing writing your multiple lines of code and hit Enter you will
    just move down another line
  id: totrans-101
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当你编写多行代码并按下回车时，光标将移动到下一行。
- en: '![](img/file40.png)![](img/file41.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file40.png)![](img/file41.png)'
- en: '**What happens if you forget the i += 1 and get an endless loop? How do you
    stop the loop?**'
  id: totrans-103
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**如果你忘记了 i += 1 而导致死循环会发生什么？如何停止循环？**'
- en: ''
  id: totrans-104
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: You can either click the X in the bottom of the Python Window to stop the execution.
  id: totrans-105
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你可以点击 Python 窗口底部的 X 来停止执行。
- en: ''
  id: totrans-106
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Or type *Ctrl*+*C* in the prompt window to stop the execution.
  id: totrans-107
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 或者在提示窗口中输入*Ctrl*+*C*来停止执行。
- en: '![](img/file42.png)![](img/file43.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file42.png)![](img/file43.png)'
- en: ArcPy Environment Settings
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ArcPy 环境设置
- en: ArcPy environment settings allow you access to general geoprocessing settings
    as well as the geoprocessing settings of a specific tool.
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ArcPy 环境设置允许你访问通用的地理处理设置，以及特定工具的地理处理设置。
- en: For tools they act as parameters you can set to change the results of a tool.
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于工具，它们作为参数，可以设置来改变工具的结果。
- en: There are many that can be used but you will find yourself using a few of them
    commonly.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有很多环境设置可以使用，但你会发现自己常用其中的一些。
- en: 'You are going to look at the most common one and see how to set it: `arcpy.env.workspace`.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到最常见的一种情况，并学习如何设置它：`arcpy.env.workspace`。
- en: Using the workspace property of the environment class you can check and change
    your workspace or scratch workspace
  id: totrans-114
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 使用环境类的工作空间属性，你可以检查并更改你的工作空间或临时工作空间
- en: '[PRE1]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You can check and set your **workspace**
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以检查并设置你的 **工作空间**
- en: Type in `arcpy.env.workspace` and press *Enter*
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入 `arcpy.env.workspace` 并按 *Enter*
- en: The return you see is your current workspace.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的结果是你当前的工作空间。
- en: '![](img/file44.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file44.png)'
- en: Now you can set your workspace
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以设置你的工作空间
- en: Type in `arcpy.env.workspace = r"C:\PythonBook\Project_2\Project_2.gdb"` and
    press *Enter*
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入 `arcpy.env.workspace = r"C:\PythonBook\Project_2\Project_2.gdb"` 并按 *Enter*
- en: '![](img/file45.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file45.png)'
- en: You can check your scratch workspace in a similar way
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过类似的方法检查你的临时工作空间
- en: '`Type in arcpy.env.workspace` and press *Enter*'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`输入 arcpy.env.workspace` 并按 *Enter*'
- en: '![](img/file46.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file46.png)'
- en: Now you can set your scratch workspace
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以设置你的临时工作空间
- en: '`Type in arcpy.env.scratchWorkspace = r”C:\PythonBook\Project_2\Project_2.gdb”`
    and press *Enter*'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`输入 arcpy.env.scratchWorkspace = r”C:\PythonBook\Project_2\Project_2.gdb”`
    并按 *Enter*'
- en: '![](img/file47.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file47.png)'
- en: Setting your scratch workspace and workspace is a good idea as it allows you
    to have a default location to send data you are creating. It is also the workspace
    that will be used when using the List functions you will explore below. In the
    examples you have set your workspace and scratch workspace to geodatabases. You
    could set them to folder or a feature dataset or any workspace you wanted.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 设置你的临时工作空间和工作空间是一个好主意，因为它可以为你创建的数据提供一个默认存放位置。它也是你在使用下文将要探索的列表函数时所使用的工作空间。在示例中，你已经将工作空间和临时工作空间设置为地理数据库。你也可以将它们设置为文件夹、要素数据集或你想要的任何工作空间。
- en: '**What is the r in front of the path for the geodatabase?**'
  id: totrans-130
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**路径前面的 r 是什么意思？**'
- en: ''
  id: totrans-131
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Note the way you type in the locations. It has an r followed by the location
    enclosed in a double quote. The r stands for “raw string” and means that Python
    will read everything within the quotes exactly as it is written. This is important
    because the \ character in Python is an escape character and can be used to insert
    characters otherwise not allowed in a string. You have already seen how to use
    the escape character in a query to get quotes within the quotes of a string. Here
    though you don’t want the escape character so there are 3 options.
  id: totrans-132
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注意输入位置的方式。它以字母r开头，后面跟着用双引号括起来的路径。字母r代表“原始字符串”，意思是 Python 会按原样读取引号中的内容。这一点很重要，因为在
    Python 中，\ 字符是一个转义字符，用于插入字符串中通常不允许出现的字符。你已经看到过如何在查询中使用转义字符来在字符串中的引号内插入引号。不过在这里你不需要转义字符，因此有3种选择。
- en: ''
  id: totrans-133
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Use an r in front of the quotes to create a raw string
  id: totrans-134
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在引号前加上字母r来创建原始字符串。
- en: ''
  id: totrans-135
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Change all the single \ to double \
  id: totrans-136
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 将所有单个的 \ 替换为双 \\。
- en: ''
  id: totrans-137
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Change the single to \
  id: totrans-138
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 将单个 \ 改为 \\。
- en: There are many other environment settings that could be useful to you depending
    on the process you are running. Most of the settings that you find for a tool
    in the properties of a tool can be set in the environment settings. Things like
    analysis extent can be set with `arcpy.env.extent`, or a snap raster when doing
    raster analysis with `arcpy.env.snapRaster`.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你运行的过程，可能还有许多其他环境设置对你有用。你在工具属性中找到的大多数设置都可以在环境设置中进行设置。例如，分析范围可以通过 `arcpy.env.extent`
    设置，做栅格分析时的栅格快照可以通过 `arcpy.env.snapRaster` 设置。
- en: It is important to remember that once you set an environment setting it stays
    set until you change it. You can change it and in more advanced script tools you
    will change it or have it set and reset throughout the code.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要记住，一旦你设置了环境设置，它会保持不变，直到你修改它。在更高级的脚本工具中，你会修改它，或者在代码中设置并重置它。
- en: ArcPy Tools - Geoprocessing using ArcPy
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ArcPy 工具 - 使用 ArcPy 进行地理处理
- en: Now that you have some of the basics of how to use the Python Window it is time
    to look at how to use geoprocessing tools.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经掌握了 Python 窗口的基本用法，是时候了解如何使用地理处理工具了。
- en: You will learn how to use select, buffer, make feature layer, and select by
    feature layer tool, add field, and calculate field tools in the Python window.
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你将学习如何在 Python 窗口中使用选择、缓冲、创建要素图层、按要素图层选择工具、添加字段和计算字段工具。
- en: The end result will be a feature class of bus stops within 1,000 feet of parks.
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最终结果将是一个包含公园周围1,000英尺范围内的公交车站的要素类。
- en: To do some geoprocessing you will need some data. Make sure you have a map open
    in ArcGIS Pro and add in the CPAD_2020b_Units.shp data from where you downloaded
    it to. This data is California Protected Areas Database data that shows parks
    and other protected areas throughout the state of California. For more information
    about the dataset please go to [https://www.calands.org/](https://www.calands.org/).
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 要进行一些地理处理，你需要一些数据。确保你在 ArcGIS Pro 中打开了一个地图，并将你下载的 CPAD_2020b_Units.shp 数据添加进来。该数据来自加利福尼亚保护区数据库，展示了加利福尼亚州内的公园及其他保护区。有关该数据集的更多信息，请访问
    [https://www.calands.org/](https://www.calands.org/)。
- en: You are going to use the Python window to select the a parks in Oakland, buffer
    them by 1,000 feet and select the bus stops within that 1,000 foot buffer, and
    write them to out to a new feature class.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 你将使用 Python 窗口选择奥克兰市的公园，进行1,000英尺的缓冲，选择缓冲区内的公交车站，并将它们写入新的要素类。
- en: Right click in the table of contents and select **attribute table** and see
    what the data shows.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 右键点击目录表，选择**属性表**，查看数据展示的内容。
- en: '![](img/file48.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file48.png)'
- en: 'You are going to use the **AGENCY_NAME** field to run a Select tool to create
    a new feature class of just the protected areas in the City of Oakland. You are
    going to do this in the Python Window by typing in the following: `arcpy.Se` The
    Python window shows you some autocomplete options to help you find the tool you
    want. You are using the Select tool from the Analysis Toolset so you want **Select()
    analysis.**'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将使用 **AGENCY_NAME** 字段运行一个选择工具，创建一个仅包含奥克兰市保护区的新要素类。你将在 Python 窗口中通过输入以下内容来完成此操作：`arcpy.Se`。Python
    窗口会显示一些自动完成选项，帮助你找到所需的工具。你将使用分析工具集中的选择工具，因此需要使用 **Select() analysis**。
- en: '![](img/file49.png)'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](img/file49.png)'
- en: After selecting the tool you can see what **parameters** the tool expects. Hover
    on the tool to get a help window popping up showing the tool parameters. The select
    tool takes the following mandatory parameters
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择工具后，你可以看到该工具期望的**参数**。将光标悬停在工具上，帮助窗口会弹出，显示工具的参数。选择工具需要以下必需参数：
- en: '`in_features`'
  id: totrans-152
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`in_features`'
- en: '`out_features,`'
  id: totrans-153
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`out_features,`'
- en: And the following optional parameter
  id: totrans-154
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以及以下可选参数
- en: '`where_clause`. The where clause is in curly braces {} because it is optional.'
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`where_clause`。`where_clause`用大括号{}表示，因为它是可选的。'
- en: The `in_features` is bold because it is the parameter the tool is currently
    looking to be entered. Type in the following in between the parenthesis to create
    the selection query `“CPAD_2020b_Units”,”CPAD_2020b_units_Oakland”,’”AGNCY_NAME
    = \’Oakland, City of\’` And press *Enter*![](img/file50.png)![](img/file51.png)![](img/file52.png)
  id: totrans-156
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`in_features`是加粗的，因为它是当前工具希望输入的参数。将以下内容输入括号中以创建选择查询：`“CPAD_2020b_Units”,”CPAD_2020b_units_Oakland”,’”AGNCY_NAME
    = \’Oakland, City of\’` 然后按*Enter*键！[](img/file50.png)![](img/file51.png)![](img/file52.png)'
- en: After running it will look like this and you should have a new feature class
    that is just the protected areas in Oakland.
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 运行后，它将如下所示，你应该会有一个新的要素类，表示奥克兰的保护区。
- en: '**How to write the query in the where clause so it works? Using the escape
    character “\” properly**'
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**如何编写where子句查询以确保其有效？正确使用转义字符“\”**'
- en: ''
  id: totrans-159
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The \ marks are escape characters that are necessary when you need to use multiple
    single or double quotes. In this instance since you are running a selection query
    on a shapefile the attribute field being selected on needs double quotes and the
    string value needs single quotes. The entire where clause needs to be inside a
    single or double quote. So the easiest option is wrap the entire query in a single
    quote and use the escape clauses around the string being selected. If you wanted
    to wrap the entire where clause in double quotes it would look like this `“/”AGNCY_NAME”
    = ‘Oakland, City of’”` Both will work the same.
  id: totrans-160
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 反斜杠（\）是转义字符，在你需要使用多个单引号或双引号时非常必要。在此实例中，由于你正在对shapefile执行选择查询，所选属性字段需要使用双引号，而字符串值则需要使用单引号。整个where子句需要放在单引号或双引号内。因此，最简单的选项是将整个查询用单引号括起来，并在所选字符串周围使用转义字符。如果你想将整个where子句放在双引号中，它将如下所示：`“/”AGNCY_NAME”
    = ‘Oakland, City of’”`。这两种方式都能正常工作。
- en: If you are working in an ArcGIS Pro project then a new file will be created
    in that project’s geodatabase as that is the default workspace. If you have set
    a workspace through the environment settings it will write to that workspace.
    If you are not then it will be stored in a temp space and not written to disk.
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你在ArcGIS Pro项目中工作，那么新文件将会保存在该项目的地理数据库中，因为这是默认的工作空间。如果你通过环境设置指定了工作空间，则将写入该工作空间。如果没有设置，它将存储在临时空间中，且不会写入磁盘。
- en: '**How do you specify a different workspace if you don’t want to use the default
    workspace?**'
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**如果不想使用默认工作空间，如何指定不同的工作空间？**'
- en: ''
  id: totrans-163
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: To specify a different location you need to write the full path when saving.
    To write out a shapefile to the `MyProject` folder you would write the following
    `arcpy.analysis.Select(“CPAD_2020b_Units”,r”C:\PythonBook\MyProject\CPAD_2020b_Units_Oakland.shp”,’”AGNCY_Name”
    = \’Oakland, City of\’’)`
  id: totrans-164
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 若要指定不同的保存位置，需要在保存时写出完整路径。例如，要将shapefile写入`MyProject`文件夹，你可以写出如下命令：`arcpy.analysis.Select(“CPAD_2020b_Units”,r”C:\PythonBook\MyProject\CPAD_2020b_Units_Oakland.shp”,’”AGNCY_Name”
    = \’Oakland, City of\’’)`
- en: Now you can take the selected parks and buffer them by 1,000 feet. The buffer
    tool is in the **analysis** **toolbox** so the call it you type `arcpy.analysis.Buffer()`
    You can see the buffer tool parameters the buffer tool takes by hovering in the
    parenthesis. It takes the following mandatory parameters in this order
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你可以选择这些公园，并将它们缓冲1000英尺。缓冲工具位于**分析** **工具箱**中，因此要调用它，只需输入`arcpy.analysis.Buffer()`。你可以通过将光标悬停在括号中查看缓冲工具的参数。它按以下顺序接受以下必需参数：
- en: '`in_features`'
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`in_features`'
- en: '`out_features`'
  id: totrans-167
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`out_features`'
- en: '`buffer_distance_or_field`'
  id: totrans-168
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`buffer_distance_or_field`'
- en: And the following optional parameters in this order
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以及以下可选参数，按此顺序排列：
- en: '`line_side`'
  id: totrans-170
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`line_side`'
- en: '`line_end_type`'
  id: totrans-171
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`line_end_type`'
- en: '`dissolve_option`'
  id: totrans-172
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`dissolve_option`'
- en: '`dissolve_field`'
  id: totrans-173
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`dissolve_field`'
- en: '`method`'
  id: totrans-174
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`method`'
- en: You want to have a buffer of 1,000 feet for the parks, dissolved to just the
    `UNIT_NAME`, `AGENCY_NAME`, and `LABEL_NAME`. To get this you will be typing in
    the `in_features`, `out_featuers`, `buffer_distance`, `dissolve_option`, and `dissolve_field
    paramaters`. The `in_features`, `out_features`, and `buffer_distance` are the
    first 3 parameters, but the `dissolve_option` and `dissolve_field` are the 6^(th)
    and 7^(th) parameters. To make sure they are in those positions you will type
    a pair of single or double quotes in the 4^(th) and 5^(th) parameters. This signifies
    to the function that those optional parameters are blank, just as if they weren’t
    entered; and allows you to enter parameters after them. Type in `“CPAD_2020b_Units_Oakland”,”CPAD_2020b_Units_Oakland_1000ft”,”1000
    FEET”, “”,””,”LIST”,[“UNIT_NAME”,”AGNCY_NAME”,”LABEL_NAME”]` And press *Enter*
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你希望为公园设置1,000英尺的缓冲区，仅解散为`UNIT_NAME`、`AGENCY_NAME`和`LABEL_NAME`。为此，你将输入`in_features`、`out_featuers`、`buffer_distance`、`dissolve_option`和`dissolve_field
    paramaters`。其中，`in_features`、`out_features`和`buffer_distance`是前3个参数，但`dissolve_option`和`dissolve_field`是第6和第7个参数。为确保它们处于正确位置，你将在第4和第5个参数中输入一对单引号或双引号。这告诉函数这些可选参数为空，就像它们没有被输入一样；并允许你在它们之后输入参数。在括号内输入`“CPAD_2020b_Units_Oakland”,”CPAD_2020b_Units_Oakland_1000ft”,”1000
    FEET”, “”,””,”LIST”,[“UNIT_NAME”,”AGNCY_NAME”,”LABEL_NAME”]`，然后按*Enter*键。
- en: '![](img/file53.png)'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](img/file53.png)'
- en: The buffers should have been added to your map. You can explore them and see
    what they look like. When you are ready you are going to now make a feature layer
    of the bus stops feature class with the **Make Feature Layer** Tool type in `arcpy.management.MakeFeatureLayer().`
    You can see that the Make Feature Layer tool takes two mandatory parameters
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 缓冲区应该已添加到你的地图中。你可以探索它们，看看它们的样子。当你准备好时，你现在要用**创建要素图层**工具制作公交车站要素类的要素图层。在括号内输入`arcpy.management.MakeFeatureLayer()`。你可以看到创建要素图层工具需要两个必填参数
- en: '`in_features`'
  id: totrans-178
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`in_features`'
- en: '`out_layer`And the following optional parameters'
  id: totrans-179
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`out_layer`以及以下可选参数'
- en: '`where_clause`'
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`where_clause`'
- en: '`workspace`'
  id: totrans-181
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`workspace`'
- en: '`field_info`'
  id: totrans-182
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`field_info`'
- en: You are going to enter the following parameters to make a feature layer of all
    the bus stops by typing in the following inside the parenthesis. `“UniqueStops_Summer21”,”AC_TransitStops_Summer21”`
    And press *Enter*
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将输入以下参数来制作所有公交车站的要素图层，只需在括号内输入以下内容。`“UniqueStops_Summer21”,”AC_TransitStops_Summer21”`，然后按*Enter*键。
- en: '![](img/file54.png)'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](img/file54.png)'
- en: The feature layer should have been added to your map. You can explore it and
    see that it is just like the UniqueStops_Summer21 feature class. But because it
    is a feature layer you can use the **Select Layer By Location** tool to select
    all of the bus stops within the buffer. Type in `arcpy.management.SelectLayerByLocation()`.
    You can see that the Select Layer By Location tool takes one mandatory parameter
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要素图层应已添加到你的地图中。你可以探索它，看看它与UniqueStops_Summer21要素类相似。但由于它是要素图层，你可以使用**按位置选择图层**工具选择缓冲区内的所有公交车站。在括号内输入`arcpy.management.SelectLayerByLocation()`。你可以看到按位置选择图层工具有一个必填参数
- en: '`in_layer`And the following optional parameters'
  id: totrans-186
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`in_layer`以及以下可选参数'
- en: '`overlap_type`'
  id: totrans-187
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`overlap_type`'
- en: '`select_features`'
  id: totrans-188
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`select_features`'
- en: '`search_distance`'
  id: totrans-189
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`search_distance`'
- en: '`selection_type`'
  id: totrans-190
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`selection_type`'
- en: '`invert_spatial_relationship`'
  id: totrans-191
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`invert_spatial_relationship`'
- en: You are going to enter the following parameters to select the bus stops within
    the 1,000 foot buffer by typing in the following inside the parenthesis. `“AC_TransitStops_Summer21”,”INTERSECT”,”CPAD_2020b_Units_Oakland_1000ft”`
    And press *Enter*
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将输入以下参数来选择1,000英尺缓冲区内的公交车站，只需在括号内输入以下内容。`“AC_TransitStops_Summer21”,”INTERSECT”,”CPAD_2020b_Units_Oakland_1000ft”`，然后按*Enter*键。
- en: '![](img/file55.png)'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](img/file55.png)'
- en: You should see the bus stops get selected. You can explore the data and see
    if this is what you were looking for. From here you can export your data to table,
    csv, or feature class. Or just use it for a map display. Right now you are going
    to export to a feature class for later use when you explore the data access module
    and using cursors. To do this you will use the **Copy Features tool**. Type in
    `arcpy.management.CopyFeatures()`. The Copy Features tool has two mandatory parameters
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该看到已选择的公交车站。你可以探索数据，看看是否符合你的预期。从这里，你可以将数据导出为表格、CSV或要素类，或者仅用于地图显示。现在，你要将数据导出为要素类以备日后使用，当你探索数据访问模块并使用游标时。为此，你将使用**复制要素工具**。在括号内输入`arcpy.management.CopyFeatures()`。复制要素工具有两个必填参数
- en: '`in_features`'
  id: totrans-195
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`in_features`'
- en: '`out_features`And one optional parameter'
  id: totrans-196
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`out_features`以及一个可选参数'
- en: '`config_keyword`'
  id: totrans-197
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`config_keyword`'
- en: You are going to enter the following parameters in the parenthesis to copy the
    selected bus stops out to a new feature class `“AC_TransitStops_Summer21”, “AC_TransitStops_Within1000ft_OaklandPark”`
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将输入以下参数到括号中，将选定的公交站点复制到新的要素类中：`“AC_TransitStops_Summer21”, “AC_TransitStops_Within1000ft_OaklandPark”`
- en: '![](img/file56.png)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file56.png)'
- en: 'Your resulting feature class is displayed in your map and written to your current
    workspace. The next steps with this data will be explored in Chapter 4: Data Access
    and Rows. In there you will learn how to do this process all in memory and add
    the park names to the bus stops.'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 你的结果要素类将在地图中显示，并写入当前工作空间。有关此数据的下一步将在第 4 章：数据访问与行中探索。在那里，你将学习如何在内存中完成此过程并将公园名称添加到公交站点。
- en: Built in ArcPy Functions
  id: totrans-201
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 内置 ArcPy 函数
- en: ArcPy has many built in functions to help with geoprocessing. ArcPy functions
    look like geoprocessing tools in the way they are written. When you wrote the
    code to create a selection feature class you wrote `arcpy.analysis.select(in_features,out_features,{where_clause}`).
    By encasing the in features, out features, and where clause in parenthesis you
    were calling the function by passing to it those parameters. *That is all a function
    is, code that you can call later by passing different parameters to it.*
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: ArcPy 有许多内置函数可以帮助进行地理处理。ArcPy 函数的写法与地理处理工具类似。当你编写代码创建一个选择要素类时，你写了 `arcpy.analysis.select(in_features,out_features,{where_clause})`。通过将输入要素、输出要素和查询条件放在括号中，你调用了这个函数并向其传递了这些参数。*这就是函数的全部内容，你可以稍后通过传递不同的参数来调用它。*
- en: ArcPy has functions to assist with things such as the environment settings,
    describing data, licensing, ArcGIS Online, raster, listing data, along with functions
    for specific modules like the spatial analyst of mapping modules. In this section
    you will explore two of the more commonly used built in functions
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: ArcPy 具有帮助环境设置、描述数据、许可、ArcGIS Online、栅格、列出数据等功能，还有针对特定模块（如空间分析或映射模块）的函数。在本节中，你将探索两个更常用的内置函数。
- en: Describe function
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: describe 函数
- en: List functions
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列出函数
- en: These are common because they help you in setting up and completing iterative
    processes like doing the same analysis on different feature classes in one location.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数很常见，因为它们帮助你设置并完成迭代过程，比如在同一位置对不同的要素类进行相同的分析。
- en: Describe Function
  id: totrans-207
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: describe 函数
- en: 'The describe function will return different properties depending on what type
    of element it is. *The describe function can be called on a variety of elements,
    including but not limited to: shapefiles, geodatabases, feature classes, feature
    datasets, tables, LAS files, rasters and map documents.*'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: describe 函数将根据元素的类型返回不同的属性。*describe 函数可以作用于多种元素，包括但不限于：shapefile、地理数据库、要素类、要素数据集、表格、LAS
    文件、栅格数据和地图文档。*
- en: The describe function returns an object with all of the properties so you need
    to create a variable to hold those properties and then call them later. You can
    try this on CPAD data.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: describe 函数返回一个包含所有属性的对象，因此你需要创建一个变量来保存这些属性，然后稍后调用它们。你可以在 CPAD 数据上尝试此操作。
- en: Type `desc = arcpy.Describe(r”C:\PythonBook\cpad_2020b\CPAD_2020b\CPAD_2020b_Units.shp`
    And press *Enter*
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入 `desc = arcpy.Describe(r”C:\PythonBook\cpad_2020b\CPAD_2020b\CPAD_2020b_Units.shp`
    然后按 *Enter* 键
- en: '![](img/file57.png)'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](img/file57.png)'
- en: It looks like nothing has happened but now you can use that desc variable to
    get information about the shapefile. You can see is what data type this is by
    typing `desc.dataType` and press *Enter*
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 看起来没有发生任何事情，但现在你可以使用该 desc 变量来获取有关 shapefile 的信息。你可以通过输入 `desc.dataType` 并按
    *Enter* 键来查看数据类型。
- en: '![](img/file58.png)'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](img/file58.png)'
- en: You can also see what type of geometry a feature class has by typing in `desc.shapeType`
    and press *Enter*
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你还可以通过输入 `desc.shapeType` 并按 *Enter* 键来查看要素类的几何类型。
- en: '![](img/file59.png)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file59.png)'
- en: You can see that if you don’t know anything about a file you can call a describe
    function on it and use the properties to find out information about the file.
  id: totrans-216
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你可以看到，如果你不了解某个文件，你可以调用 describe 函数并使用其属性来查找文件的相关信息。
- en: In the sample above you know the data is a shapefile you can see how this information
    could be useful if you were searching through a folder and only wanted to run
    an analysis on the shapefiles.
  id: totrans-217
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在上述示例中，你知道数据是一个 shapefile，你可以看到如果你在文件夹中搜索并且只想对 shapefile 执行分析时，这些信息是多么有用。
- en: List Functions
  id: totrans-218
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 列出函数
- en: List functions are very powerful as they allow you to create a list of data
    in a workspace, which you can then iterate over. For these examples you are going
    to use the data in the `MyProject.gdb` geodatabase.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 列表函数非常强大，因为它们允许你创建一个工作空间中数据的列表，然后你可以遍历这些数据。对于这些示例，你将使用`MyProject.gdb`地理数据库中的数据。
- en: List functions take the current workspace you are in and will create a list
    of all the datasets for that type of list function. There are the following list
    functions
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 列表函数获取你所在的当前工作空间，并将为该类型的列表函数创建一个所有数据集的列表。以下是一些列表函数：
- en: '`ListDatasets`'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ListDatasets`'
- en: '`ListFeatureClasses`'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ListFeatureClasses`'
- en: '`ListFields`'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ListFields`'
- en: '`ListFiles`'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ListFiles`'
- en: '`ListIndexes`'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ListIndexes`'
- en: '`ListRasters`'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ListRasters`'
- en: '`ListTables`'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ListTables`'
- en: '`ListVersions`'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ListVersions`'
- en: '`ListWorkspace`'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ListWorkspace`'
- en: '`ListDatasets`, `ListFeatureClasses`, `ListFiles`, `ListRasters`, `ListTables`,
    and `ListWorkspaces` need to have the workspace set before being run as they will
    only run on the current workspace.'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '`ListDatasets`、`ListFeatureClasses`、`ListFiles`、`ListRasters`、`ListTables`和`ListWorkspaces`需要在运行之前设置工作空间，因为它们只会在当前工作空间上运行。'
- en: Start by listing the workspaces that your `MyProject.gdb` is in. You need to
    first set your workspace to the location of the geodatabase. `arcpy.env.workspace
    = r”C:\\PythonBook\MyProject”` and press *Enter*
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先列出`MyProject.gdb`所在的工作空间。你需要首先将工作空间设置为地理数据库的所在位置。`arcpy.env.workspace = r"C:\\PythonBook\\MyProject"`并按下*Enter*键。
- en: '![](img/file60.png)'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](img/file60.png)'
- en: Next assign the ListWorkspaces function to a variable called wksp, `wksp = arcpy.ListWorkspaces()`
    and press *Enter*
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来，将`ListWorkspaces`函数分配给一个名为`wksp`的变量，`wksp = arcpy.ListWorkspaces()`并按下*Enter*键。
- en: '![](img/file61.png)'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](img/file61.png)'
- en: The `ListWorkspaces` function has two optional parameters,
  id: totrans-235
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`ListWorkspaces`函数有两个可选参数，'
- en: ''
  id: totrans-236
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: Wildcard - used to limit the values returned to the list to those that match
    what you put in.
  id: totrans-237
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 通配符 - 用于限制返回列表的值，只有匹配你输入的值时才会返回。
- en: ''
  id: totrans-238
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: Workspace Type - used to limit the types of workspace.
  id: totrans-239
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 工作空间类型 - 用于限制工作空间的类型。
- en: You can see what that looks like by just typing in `wksp` and press *Enter*
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以通过输入`wksp`并按下*Enter*键来看它是什么样子。
- en: '![](img/file62.png)'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](img/file62.png)'
- en: You can see it is all of the workspaces that are standard when creating a new
    project in ArcGIS Pro. They are a bit hard to read in that list. So to make them
    easier to read iterate through the list printing out each one. Type in `for w
    in wksp:` and press *Enter* `print(w)` and press *Enter* and press *Enter*
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以看到它是创建新项目时，在ArcGIS Pro中标准的所有工作空间。它们在这个列表中有些难以阅读。因此，为了让它们更容易阅读，你可以遍历该列表，逐个打印出来。输入`for
    w in wksp:`并按*Enter*键，再输入`print(w)`并按*Enter*键，然后按下*Enter*键。
- en: '![](img/file63.png)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file63.png)'
- en: Now you can really read what you have
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以真正看清楚你拥有什么了。
- en: '![](img/file64.png)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file64.png)'
- en: This is great as you can see all the workspace in the folder. But you just want
    the geodatabases in the folder. This is where you can use the parameters. For
    this you can use the workspace type parameter. The workspace parameter takes the
    following values as strings
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 这很棒，因为你可以看到文件夹中所有的工作空间。但是你只想要文件夹中的地理数据库。这时，你可以使用参数。为此，你可以使用工作空间类型参数。工作空间参数接受以下字符串值：
- en: Access - personal geodatabases will be selected
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问 - 个人地理数据库将被选中
- en: Coverage - coverage workspaces will be selected
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 覆盖 - 覆盖工作空间将被选中
- en: FileGDB - file geodatabases will be selected
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: FileGDB - 文件地理数据库将被选中
- en: Folder - shapefile workspaces will be selected
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件夹 - 将选择 shapefile 工作空间
- en: SDE - enterprise databases will be selected
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SDE - 企业数据库将被选中
- en: All - all workspaces - this is the default
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有 - 所有工作空间 - 这是默认设置
- en: To select just the file geodatabase you need to write this.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 要仅选择文件地理数据库，你需要输入以下内容。
- en: '[PRE2]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Why is there a “” followed by a ,?**'
  id: totrans-255
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**为什么会有一个“”后跟一个逗号？**'
- en: ''
  id: totrans-256
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The first parameter is for the wildcard and writing “” will leave it blank.
    That needs to be there though as functions take the parameter in the order they
    are written in. If you write it like this `wksp = arpcy.ListWorkspaces(“FileGDB”)`
    the function will still run. But when you call it you won’t have any data in the
    list because there is no workspace called “FileGDB”
  id: totrans-257
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 第一个参数是通配符，输入“”将留空。不过需要有这个参数，因为函数会按书写顺序处理参数。如果你像这样写`wksp = arpcy.ListWorkspaces("FileGDB")`，函数仍然会运行。但是当你调用它时，你不会得到任何数据，因为没有名为“FileGDB”的工作空间。
- en: You can see when calling the `wksp` variable you now have a list of just one
    value the `MyProject.gdb`
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到当调用`wksp`变量时，你现在只会得到一个值：`MyProject.gdb`。
- en: '![](img/file65.png)'
  id: totrans-259
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file65.png)'
- en: While there is just the one value in the list it is still a list and acts as
    such in Python. That means that functions in ArcPy that expect a string will fail
    if given a list. For example you cannot update the workspace to this geodatabase
    location by using the `wksp` variable
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然列表中只有一个值，但它仍然是一个列表，在Python中表现为列表。也就是说，如果ArcPy函数期望的是一个字符串而给它一个列表，它会失败。例如，你不能通过使用`wksp`变量将工作空间更新为该地理数据库位置。
- en: '![](img/file66.png)'
  id: totrans-261
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file66.png)'
- en: The elements of the list can be set as the workspace through by using different
    methods on the list. If you wanted to set each element of the list as a workspace
    you could do the following
  id: totrans-262
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 列表的元素可以通过不同的方法设置为工作空间。如果你想将列表中的每个元素都设置为工作空间，可以按以下方式操作。
- en: ''
  id: totrans-263
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Type `for w in wksp:` press *Enter*
  id: totrans-264
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 输入`for w in wksp:` 按下*Enter*
- en: ''
  id: totrans-265
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Type `arcpy.env.workspace = w` press *Enter*
  id: totrans-266
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 输入`arcpy.env.workspace = w` 按下*Enter*
- en: ''
  id: totrans-267
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Type `print(arcpy.env.workspace)` press *Enter* press *Enter*
  id: totrans-268
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 输入`print(arcpy.env.workspace)` 按下*Enter* 按下*Enter*
- en: '![](img/file67.png)'
  id: totrans-269
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file67.png)'
- en: '**What if you know you only have a single workspace that you are targeting?**'
  id: totrans-270
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**如果你知道只有一个目标工作空间该怎么办？**'
- en: ''
  id: totrans-271
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In this example you only have one item in the list so it only runs once. In
    these cases where you do only have one item you could just write this `w = wksp[0]`
  id: totrans-272
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在这个例子中，你只有一个项目在列表中，因此只会执行一次。在这种情况下，如果只有一个项目，你可以直接写`w = wksp[0]`
- en: '![](img/file68.png)'
  id: totrans-273
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file68.png)'
- en: In fact when you know you only have one item in your list you can just write
    the following to set you workspace `arcpy.env.workspace = ListWorkspaces(“”,”FileGDB”)[0]`*Be
    careful with using this notation as if you have more than workspace you will only
    be setting the workspace to the first one on the list*
  id: totrans-274
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 事实上，当你知道列表中只有一个项目时，你可以直接写以下代码来设置工作空间：`arcpy.env.workspace = ListWorkspaces(“”,”FileGDB”)[0]`
    *请小心使用这种表示法，如果你有多个工作空间，它将只会将工作空间设置为列表中的第一个。*
- en: Now that the workspace is set to your geodatabase you can use the ListFeatureClasses
    function to get a list of all the feature classes in the geodatabase and assign
    it to a variable.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 现在工作空间已经设置为你的地理数据库，你可以使用ListFeatureClasses函数获取该地理数据库中所有要素类的列表，并将其赋值给一个变量。
- en: You are going to write the code to get a list of feature classes and then write
    a for loop to iterate through the list so you can easily read what feature classes
    are in your list
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 你将编写代码获取要素类的列表，然后编写一个for循环遍历该列表，以便你可以轻松读取列表中有哪些要素类。
- en: '![](img/file69.png)'
  id: totrans-277
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file69.png)'
- en: '`fcs = arcpy.ListFeatureClasses()`press *Enter*'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入`fcs = arcpy.ListFeatureClasses()` 按下*Enter*
- en: '`for fc in fcs:` press *Enter*'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入`for fc in fcs:` 按下*Enter*
- en: '`print(fc)` press *Enter.* press *Enter*'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入`print(fc)` 按下*Enter* 按下*Enter*
- en: '![](img/file70.png)'
  id: totrans-281
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file70.png)'
- en: You now have a list that contains all the feature classes in your geodatabase.
    This list can be iterated through to give you a single feature class which you
    can run through other ArcPy functions or geoprocessing tools. You could use the
    Describe function from above to find only the feature classes of a certain geometry
    to make sure you only run your analysis on that.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你有一个包含地理数据库中所有要素类的列表。这个列表可以进行迭代，得到单个要素类，你可以将其传递给其他ArcPy函数或地理处理工具。你可以使用上述的Describe函数来仅查找特定几何类型的要素类，确保分析只在该类型的要素类上进行。
- en: You are starting with your list of feature classes stored in the variable fcs
    and will iterate through it like above when you just printed out the name. You
    will then determine use the ShapeType Property of feature classes to determine
    what the shape is of each feature class and print out a statement saying that.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 你将从存储在变量fcs中的要素类列表开始，并像上面那样遍历它，之前你只是打印出了名称。然后，你将使用要素类的ShapeType属性来确定每个要素类的形状，并打印出相应的说明。
- en: The following code is what you will write into the Python window
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码是你将在Python窗口中编写的内容。
- en: '[PRE3]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: These are the steps to write it in
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 这是编写它的步骤。
- en: '`for fc in fcs:` and press *Enter*'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入`for fc in fcs:` 按下*Enter*
- en: '`desc = arcpy.Describe(fc)` and press *Enter*'
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入`desc = arcpy.Describe(fc)` 按下*Enter*
- en: '`fcName = desc.name` and press *Enter*'
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入`fcName = desc.name` 按下*Enter*
- en: '`if desc.shapeType == “Polygon”:` and press *Enter*'
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '输入`if desc.shapeType == “Polygon”: ` 按下*Enter*'
- en: '`print(“Shape Type for “ + fcName + “ is “ + desc.ShapeType)` and press *Enter*'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入`print(“Shape Type for “ + fcName + “ is “ + desc.ShapeType)` 按下*Enter*
- en: '`elif desc.ShapeType == “Polyline”:` and press *Enter r*'
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '输入`elif desc.ShapeType == “Polyline”: ` 按下*Enter*'
- en: '`print(“Shape Type for “ + fcName + “ is “ + desc.ShapeType)` and press *Enter*'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入`print(“Shape Type for “ + fcName + “ is “ + desc.ShapeType)` 按下*Enter*
- en: '`elif desc.ShapeType == “Point”:` and press *Enter*'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '输入`elif desc.ShapeType == “Point”: ` 按下*Enter*'
- en: '`print(“Shape Type for “ + fcName + “ is “ + desc.ShapeType)` and press *Enter*'
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`print(“Shape Type for “ + fcName + “ is “ + desc.ShapeType)`并按*Enter*键'
- en: '`else:` and press *Enter*'
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`else:`并按*Enter*键'
- en: '`print(fcName + “ is not a Point, Line, or Polygon”)` and press *Enter* press
    *Enter*'
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`print(fcName + “ is not a Point, Line, or Polygon”)`并按*Enter*键，再按*Enter*键'
- en: '![](img/file71.png)'
  id: totrans-298
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file71.png)'
- en: The for loop will iterate through each feature class. For that feature class
    you are creating a variable to hold the Describe properties of that feature class.
    You then create a variable to hold the name of that feature class. Then you write
    if/elif/else statements to test the ShapeType property of the Describe object.
    The output statement will look like this.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: for循环会遍历每个要素类。对于该要素类，你会创建一个变量来保存该要素类的Describe属性。接着，你创建一个变量来保存该要素类的名称。然后，你编写if/elif/else语句来测试Describe对象的ShapeType属性。输出语句会像这样。
- en: '![](img/file72.png)'
  id: totrans-300
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file72.png)'
- en: '**Could the if/elif statement be condensed?**'
  id: totrans-301
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**if/elif语句可以简化吗？**'
- en: ''
  id: totrans-302
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Yes it could be, depending on what you wanted. But if you don’t know what you
    are looking for sometimes it can be better to be specific. And now that you have
    this code written out you can save it and copy and paste certain sections. For
    example if you wanted to run separate geoprocessing tools on the point, lines,
    and polygons in your geodatabase you now have the sample if/elif statement to
    use.
  id: totrans-303
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 是的，根据你的需求，它是可以的。但如果你不知道自己在寻找什么，有时候明确一些会更好。现在你已经写出了这段代码，可以保存它并复制粘贴某些部分。例如，如果你想对地理数据库中的点、线和多边形运行不同的地理处理工具，那么你现在已经有了示例的if/elif语句可以使用。
- en: Another way to select elements in the List functions before putting them into
    the list is to use the **wildcard parameter**. The wildcard limits what the function
    returns. It is not case sensitive and uses the * to include any number of characters
    before or after the *. Let’s look at some examples of this works using our current
    geodatabase workspace.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种选择列表函数中元素的方式是在将它们放入列表之前使用**通配符参数**。通配符限制了函数返回的内容。它不区分大小写，并使用*来包含任意数量的字符，可以在*前后使用。让我们看一下如何使用当前的地理数据库工作区的几个示例。
- en: You can select all of the CPAD data
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以选择所有的CPAD数据
- en: type in `cpad_fcs = arcpy.ListFeatureClasses(“CPAD*”)` and press *Enter*
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入`cpad_fcs = arcpy.ListFeatureClasses(“CPAD*”)`并按*Enter*键
- en: '![](img/file73.png)'
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](img/file73.png)'
- en: View what is the list using a for loop. Type in `for fc in cpad_fcs:` and press
    *Enter*
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用for循环查看列表内容。输入`for fc in cpad_fcs:`并按*Enter*键
- en: Type in `print(fc)` and press *Enter* and press *Enter*
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入`print(fc)`并按*Enter*键，再按*Enter*键
- en: '![](img/file74.png)'
  id: totrans-310
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file74.png)'
- en: The wildcard is finding any feature class that starts with CPAD the * then tells
    it to match anything after CPAD. You can see in the results that you now have
    a list that contains all the CPAD feature classes.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 通配符正在查找以CPAD开头的任何要素类，*告诉它匹配CPAD后面的任何内容。你可以在结果中看到，你现在有了一个包含所有CPAD要素类的列表。
- en: The * can be used after, before, or before and after any characters.
  id: totrans-312
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '* 可以在任意字符前、后或前后使用。'
- en: You could select just the CPAD units and super units by writing this
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过写出如下代码仅选择CPAD单元和超单元
- en: '[PRE4]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: And verify using the for loop to print out
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 并通过for循环验证输出
- en: '[PRE5]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![](img/file75.png)'
  id: totrans-317
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file75.png)'
- en: And the wildcard could be used to select just the census feature classes with
    2019 in them by writing this
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 通配符可以用于选择仅包含2019的普查要素类，可以通过写出如下代码
- en: '[PRE6]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: And verify using the for loop to print out
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 并通过for循环验证输出
- en: '[PRE7]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](img/file76.png)'
  id: totrans-322
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file76.png)'
- en: 'The wildcard is one of the optional parameters in many of the list functions
    and can be used with the other parameters. The `ListFeatureClasses` function has
    a parameter for feature type, and feature dataset. The feature type parameter
    can be used to select specific feature types, including but not limited to: point,
    polygon, polyline. The feature dataset can be used to specify the feature dataset
    in a geodatabase that is to be searched for feature classes. If no feature dataset
    is specified the `ListFeatureClasses` function will only look for stand alone
    feature classes in the geodatabase.'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 通配符是许多列表函数中的可选参数之一，可以与其他参数一起使用。`ListFeatureClasses`函数有一个用于要素类型和要素数据集的参数。要素类型参数可以用来选择特定的要素类型，包括但不限于：点、面、多段线。要素数据集可以用来指定要在地理数据库中搜索的要素数据集。如果未指定要素数据集，则`ListFeatureClasses`函数只会查找地理数据库中的独立要素类。
- en: Using your `MyProjects.gdb` you can see how to combine both the wildcard and
    feature type parameters to get a specific feature class.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 使用你的`MyProjects.gdb`，你可以看到如何结合通配符和要素类型参数来获取特定的要素类。
- en: You can select just the census polygon feature class by writing the following
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过输入以下代码来选择仅包含人口普查多边形要素类：
- en: '[PRE8]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: And verify by entering the variable
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 并通过输入变量来验证
- en: '[PRE9]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![](img/file77.png)'
  id: totrans-329
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file77.png)'
- en: Note that the feature class is stored within the [] as it is in a list. To do
    any geoprocessing tasks on this you either need to iterate through the list and
    do the tasks in the for loop or extract the feature class using the list index
    to grab whichever list index you need.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，要素类是以列表的形式存储在 [] 中。要执行任何地理处理任务，你需要通过迭代列表并在 for 循环中执行任务，或者使用列表索引提取要素类，获取你需要的列表索引。
- en: '[PRE10]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![](img/file78.png)'
  id: totrans-332
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file78.png)'
- en: Note that what the `census_county` variable returns is the name of the feature
    class. As long as your workspace is still the geodatabase you can use just that
    name to do geoprocessing tasks. But if you reset your workspace ArcPy won’t know
    where to find the feature class with that name. So it is good practice to use
    the `os` library to create a variable that contains the full path for your feature
    class. To use the `os` library it needs to be imported like ArcPy when working
    in IDLE.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`census_county` 变量返回的是要素类的名称。只要你的工作空间仍然是地理数据库，你可以仅使用该名称来执行地理处理任务。但是，如果你重置了工作空间，ArcPy
    将不知道在哪里找到具有该名称的要素类。因此，使用 `os` 库创建一个包含要素类完整路径的变量是一个良好的做法。在 IDLE 中工作时，要使用 `os` 库，它需要像
    ArcPy 一样被导入。
- en: Type in `import os` and press *Enter*
  id: totrans-334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入 `import os` 然后按 *Enter*
- en: Now you can create a variable with the census feature class full path. Type
    in `gdb = wksp[0]` and press *Enter*
  id: totrans-335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在你可以创建一个变量，包含人口普查要素类的完整路径。输入 `gdb = wksp[0]` 然后按 *Enter*
- en: '*Type in* `census_county_full = os.path.join(gdb,census_county)` and press
    *Enter*'
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*输入* `census_county_full = os.path.join(gdb,census_county)` 然后按 *Enter*'
- en: Now you have the full path for the census county shapefile in a variable that
    you can use throughout any further code you may write.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经在一个变量中得到了人口普查县 shapefile 的完整路径，可以在你编写的任何后续代码中使用该变量。
- en: '![](img/file79.png)'
  id: totrans-338
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file79.png)'
- en: Introduction to ArcPy Modules
  id: totrans-339
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ArcPy模块介绍
- en: ArcPy comes with a set of modules in addition to the geoprocessing tools and
    functions. Modules are just files that contain additional Python definitions and
    statements, including things like functions and variables. They are used to help
    organize code more logically.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: ArcPy 附带了一套模块，除了地理处理工具和函数。模块是包含额外 Python 定义和语句的文件，包括函数和变量等。它们有助于更逻辑地组织代码。
- en: ArcPy comes with the following modules
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: ArcPy 附带了以下模块：
- en: Charts module (`arcpy.charts`)
  id: totrans-342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图表模块 (`arcpy.charts`)
- en: Data Access module (`arcpy.da`)
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据访问模块 (`arcpy.da`)
- en: Geocoding module (`arcpy.geocoding`)
  id: totrans-344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 地理编码模块 (`arcpy.geocoding`)
- en: Image Analysis module (`arcpy.ia`)
  id: totrans-345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图像分析模块 (`arcpy.ia`)
- en: Mapping module (`arcpy.mp`)
  id: totrans-346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 映射模块 (`arcpy.mp`)
- en: Metadata module (`arcpy.metadata`)
  id: totrans-347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 元数据模块 (`arcpy.metadata`)
- en: Network Analyst module (`arcpy.na` or `arcpy.nax`)
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络分析模块 (`arcpy.na` 或 `arcpy.nax`)
- en: Sharing module (`arcpy.sharing`)
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 共享模块 (`arcpy.sharing`)
- en: Spatial Analyst module (`arcpy.sa`)
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 空间分析模块 (`arcpy.sa`)
- en: Workflow Manager module (`arpcy.wmx`)
  id: totrans-351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作流管理模块 (`arpcy.wmx`)
- en: Some of the above modules do require specific licenses to use the functions
    and tools within them. For example the network analyst module and spatial analyst
    module would require you to have network analyst and spatial analyst extensions
    available. The two you will look at in depth in later chapters, the data access
    module and the mapping module do not. The data access module can help you to streamline
    your data cleaning and analyses processes. The mapping module can streamline mass
    map production and make creating 100s of maps a simple process.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 上述一些模块确实需要特定的许可才能使用其中的功能和工具。例如，网络分析模块和空间分析模块需要你拥有网络分析和空间分析扩展。你将在后面的章节中深入学习的两个模块——数据访问模块和映射模块则不需要。数据访问模块可以帮助你简化数据清理和分析过程。映射模块可以简化大量地图的制作，并使得创建数百张地图成为一个简单的过程。
- en: Spatial Analyst Module
  id: totrans-353
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 空间分析模块
- en: The spatial analyst module contains all of the geoprocessing tools associated
    with the spatial analyst extension. Because it is uses the spatial analyst extension
    you need to import the extension.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 空间分析模块包含所有与空间分析扩展相关的地理处理工具。因为它使用了空间分析扩展，所以你需要导入该扩展。
- en: '[PRE11]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Just like with wild cards the star means everything. You could import just specific
    modules, classes, or functions from the spatial analyst module but most of the
    time you will be importing the entire module.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 就像使用通配符一样，星号表示所有内容。你可以仅导入空间分析模块中的特定模块、类或函数，但大多数时候你将导入整个模块。
- en: 'You will learn how to write the code to run spatial analyst tools in the Python
    window using the FVEG data from CalFire. The data is available here: [https://frap.fire.ca.gov/mapping/gis-data/](https://frap.fire.ca.gov/mapping/gis-data/)'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 你将学习如何编写代码，在Python窗口中运行空间分析工具，使用来自CalFire的FVEG数据。数据可以在这里找到：[https://frap.fire.ca.gov/mapping/gis-data/](https://frap.fire.ca.gov/mapping/gis-data/)
- en: Load the `fveg15_1` data into the map
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`fveg15_1`数据加载到地图中
- en: Right click on it and select **Symbology**
  id: totrans-359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 右键点击它并选择**符号系统**
- en: Click the drop down where it says **Stretch** and select **Unique Values**
  id: totrans-360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击下拉菜单中的**Stretch**，选择**唯一值**
- en: Click on the drop down for **Field 1** and select WHR10Name. You can play with
    the colors and color scheme if you want. But also explore the data a little to
    see what is showing. It is a land cover dataset for the entire state of California.
    You are going to extract the data in the protected areas in the City of Oakland
  id: totrans-361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击**Field 1**的下拉菜单并选择WHR10Name。如果需要，可以调整颜色和色彩图案。同时也可以稍微浏览一下数据，看看显示了什么。这是加利福尼亚州整个州的土地覆盖数据。你将提取奥克兰市受保护区域的数据。
- en: Type in `from arcpy.sa import *` and press *Enter*
  id: totrans-362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入`from arcpy.sa import *`并按下*Enter*
- en: If you created the feature class for the parks in the City of Oakland you can
    skip the next step
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你已经为奥克兰市的公园创建了要素类，可以跳过下一步
- en: Type in `arcpy.analysis.Select(“CPAD_2020b_Units”,r”C:\PythonBook\MyProject\MyProject.gdb\CPAD_2020b_Units_Oakland”,’”AGNCY_NAME”
    = \’Oakland, City of\’’)` and press *Enter*
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入`arcpy.analysis.Select(“CPAD_2020b_Units”,r”C:\PythonBook\MyProject\MyProject.gdb\CPAD_2020b_Units_Oakland”,’”AGNCY_NAME”
    = \’Oakland, City of\’’)`并按下*Enter*
- en: Check if a spatial analyst extension is available by typing in `arcpy.CheckExtension(“Spatial”)`
    and press *Enter*. It should return `‘Available’` if not you need to either enable
    your spatial analyst license or if on a shared license network have someone release
    theirs.
  id: totrans-365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过输入`arcpy.CheckExtension(“Spatial”)`并按下*Enter*检查是否有空间分析扩展可用。如果没有，它应返回`‘Available’`，如果没有，你需要启用你的空间分析许可证，或者如果是在共享许可证网络上，需要让其他人释放他们的许可证。
- en: Once you have confirmed a license is available type in `arcpy.CheckOutExtension(“Spatial”)`
    and press *Enter*. It should return `‘Checked Out’`
  id: totrans-366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦确认许可证可用，输入`arcpy.CheckOutExtension(“Spatial”)`并按下*Enter*。它应返回`‘已签出’`
- en: Type in `oaklandParksLandCover = ExtractByMask(“fveg15_1”,“CPAD_2020b_Units_Oakland”)`
    and press *Enter*
  id: totrans-367
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入`oaklandParksLandCover = ExtractByMask(“fveg15_1”,“CPAD_2020b_Units_Oakland”)`并按下*Enter*
- en: Type in `oaklandParksLandCover.save(r”C:\MyProject\MyProject.gdb\OaklandParksLandCover”)`
    and press *Enter*
  id: totrans-368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入`oaklandParksLandCover.save(r”C:\MyProject\MyProject.gdb\OaklandParksLandCover”)`并按下*Enter*
- en: '**Why do you have to save the raster? Could it be done in a single line of
    code?**'
  id: totrans-369
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**为什么需要保存栅格？是否可以用一行代码完成？**'
- en: ''
  id: totrans-370
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: When working with the spatial analyst extension in ArcPy and you run the geoprocessing
    tool it is actually a function. The function returns the extraction raster. That
    raster is created in memory, if you want to save you have to use the save property
    of that returned raster.
  id: totrans-371
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在ArcPy中使用空间分析扩展时，运行地理处理工具实际上是一个函数。该函数返回提取栅格。该栅格是在内存中创建的，如果你想保存它，必须使用返回栅格的保存属性。
- en: ''
  id: totrans-372
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: It could be done in one line of code. That would look like this `oaklandParksLandCover_2
    = ExtractByMask("fveg15_1","CPAD_2020b_Units_Oakland").save(r"C:\PythonBook\MyProject\MyProject.gdb\OakalndParksLandCover_2")`
  id: totrans-373
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这可以用一行代码完成。代码如下：`oaklandParksLandCover_2 = ExtractByMask("fveg15_1","CPAD_2020b_Units_Oakland").save(r"C:\PythonBook\MyProject\MyProject.gdb\OakalndParksLandCover_2")`
- en: Now that you have this data you can find just the areas of the parks that are
    not urban by using the Con tool.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你拥有了这些数据，你可以使用Con工具找到公园中非城市区域的部分。
- en: Start by giving your raster a name, type in `oaklandParksNonUrban =`
  id: totrans-375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先为你的栅格命名，输入`oaklandParksNonUrban =`
- en: Call the Con tool by typing `con(`
  id: totrans-376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过输入`con(`调用Con工具
- en: The first parameter is the input raster, it is our newly created parks land
    cover, type in `oaklandParksLandCover,`
  id: totrans-377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个参数是输入栅格，它是我们新创建的公园土地覆盖，输入`oaklandParksLandCover,`
- en: The next parameter is the true raster or constant, this is the value that the
    new raster will get. This is going to be the same raster, as you want to keep
    the different land covers that are not urban in the new raster, type in `oaklandParksLandCover,`
  id: totrans-378
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下一个参数是实际的栅格或常量，这是新栅格将获取的值。由于你希望保留不是城市的不同土地覆盖类型在新栅格中，所以这是同样的栅格，输入`oaklandParksLandCover,`
- en: The next parameter is an optional parameter and it is the false raster or constant.
    This is what the new raster will get in areas that are urban. You want it to be
    No Data so that all the areas of parks that are urban will be blank in the new
    raster, type in `“”,`
  id: totrans-379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下一个参数是可选的，它是虚假栅格或常数。这是新的栅格在城市区域中会得到的值。你希望它为无数据，这样新的栅格中的城市公园区域就会是空白，输入`“”,`
- en: The final parameter is an optional parameter and it is a where clause. This
    is written just like a query for running a select tool, type in `“WHR10NAME <>
    ‘Urban’”)`
  id: totrans-380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后一个参数是可选参数，它是一个where子句。它的写法就像运行选择工具的查询，输入`“WHR10NAME <> ‘Urban’”)`
- en: The full code should look like this `oaklandParksNonUrban = Con(oaklandParksLandCover,oaklandParksLandCover,””,”WHRNAME
    <> ‘Urban’”)`
  id: totrans-381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完整的代码应该如下所示`oaklandParksNonUrban = Con(oaklandParksLandCover,oaklandParksLandCover,””,”WHRNAME
    <> ‘Urban’”)`
- en: Open up the attribute table on the new raster in your table of contents. It
    only has a Value field and not the rest of the attributes. That is because the
    con tool just takes the Value attribute from the true raster. This can be fixed
    by doing a join.
  id: totrans-382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在目录中的新栅格上打开属性表。它只有一个值字段，没有其他属性。这是因为con工具仅提取真实栅格的值属性。可以通过做连接来解决这个问题。
- en: The Join Field tool is in the management tool box and works on rasters as well
    as feature classes and creates a permanent join. Type in `arcpy.management.JoinField(`
  id: totrans-383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Join Field工具位于管理工具箱中，适用于栅格数据、要素类，并创建一个永久连接。输入`arcpy.management.JoinField(`
- en: The first parameter is the input layer, type in `oaklandParksNonUrban,`
  id: totrans-384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个参数是输入图层，输入`oaklandParksNonUrban,`
- en: The second parameter is the field to join on, type in `VALUE,`
  id: totrans-385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个参数是要连接的字段，输入`VALUE,`
- en: The third parameter is the table to be joined, type in `oaklandParksLandCover,`
  id: totrans-386
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三个参数是要连接的表，输入`oaklandParksLandCover,`
- en: The fourth parameter is the field to join on from the join table, type in `VALUE,`
  id: totrans-387
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第四个参数是从连接表中连接的字段，输入`VALUE,`
- en: The last parameter is optional and is the list of fields you want to join from
    the join table to the input layer. You can select the fields to join by using
    a list. If left blank it will join all of the fields. You are going to join the
    WHR fields, type in `[“WHRNUM”,”WHRNAME”,”WHRTYPE”,”WHR10NUM”,”WHR10NAME”,”WHR13NUM”,”WHR13NAME”]`
  id: totrans-388
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后一个参数是可选的，它是你想从连接表中加入到输入图层的字段列表。你可以使用列表来选择要连接的字段。如果留空，将连接所有字段。你将连接WHR字段，输入`[“WHRNUM”,”WHRNAME”,”WHRTYPE”,”WHR10NUM”,”WHR10NAME”,”WHR13NUM”,”WHR13NAME”]`
- en: The full code should look like this `arcpy.management.JoinField(oaklandParksNonUrban,”VALUE”,oaklandParksLandCover,”VALUE”,[
    [“WHRNUM”,”WHRNAME”,”WHRTYPE”,”WHR10NUM”,”WHR10NAME”,”WHR13NUM”,”WHR13NAME”])`
  id: totrans-389
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完整的代码应该如下所示`arcpy.management.JoinField(oaklandParksNonUrban,”VALUE”,oaklandParksLandCover,”VALUE”,[
    [“WHRNUM”,”WHRNAME”,”WHRTYPE”,”WHR10NUM”,”WHR10NAME”,”WHR13NUM”,”WHR13NAME”])`
- en: Again this needs to be saved to store it. Type in `(oaklandParksNonUrban.save(r”C:\MyProject\MyProject.gdb\OaklandParksLandCover”)`
    and press *Enter*
  id: totrans-390
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同样，必须保存以便存储。输入`(oaklandParksNonUrban.save(r”C:\MyProject\MyProject.gdb\OaklandParksLandCover”)`并按*Enter*
- en: In the following chapters you will learn how to use search cursors to create
    lists of the different attributes and iterate through them to create multiple
    rasters and do further analysis on them.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，你将学习如何使用搜索游标创建不同属性的列表，并遍历它们以创建多个栅格并进行进一步分析。
