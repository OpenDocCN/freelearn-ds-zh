- en: Linear Algebra
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 线性代数
- en: In this chapter, we will be covering the main concepts of linear algebra, and
    the concepts learned here will serve as the backbone on which we will learn all
    the concepts in the chapters to come, so it is important that you pay attention.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讲解线性代数的主要概念，这些概念将成为我们学习接下来的各章内容的基础，因此你需要认真听讲。
- en: It is very important for you to know that these chapters cannot be substituted
    for an education in mathematics; they exist merely to help you better grasp the
    concepts of deep learning and how various architectures work and to develop an
    intuition for why that is, so you can become a better practitioner in the field.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须知道，这些章节无法替代数学教育；它们仅仅是为了帮助你更好地理解深度学习的概念以及各种架构如何工作，并培养你对这些概念的直觉，以便你能成为这个领域的更好实践者。
- en: At its core, algebra is nothing more than the study of mathematical symbols
    and the rules for manipulating these symbols. The field of algebra acts as a unifier
    for all of mathematics and provides us with a way of thinking. Instead of using
    numbers, we use letters to represent variables.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 从本质上讲，代数不过是研究数学符号及其操作规则的学科。代数领域作为数学的统一体，为我们提供了一种思维方式。我们不再使用数字，而是使用字母来表示变量。
- en: Linear algebra, however, concerns only linear transformations and vector spaces.
    It allows us to represent information through vectors, matrices, and tensors,
    and having a good understanding of linear algebra will take you a long way on
    your journey toward getting a very strong understanding of deep learning. It is
    said that a mathematical problem can only be solved if it can be reduced to a
    calculation in linear algebra. This speaks to the power and usefulness of linear
    algebra.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，线性代数只涉及线性变换和向量空间。它使我们能够通过向量、矩阵和张量表示信息，深入理解线性代数将大大推动你对深度学习的理解。人们常说，只有将一个数学问题转化为线性代数中的计算，它才有可能被解决。这体现了线性代数的强大力量和实用性。
- en: 'This chapter will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涉及以下主题：
- en: Comparing scalars and vectors
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比较标量和向量
- en: Linear equations
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 线性方程
- en: Matrix operations
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 矩阵运算
- en: Vector spaces and subspaces
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向量空间与子空间
- en: Linear maps
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 线性映射
- en: Matrix decompositions
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 矩阵分解
- en: Comparing scalars and vectors
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 比较标量和向量
- en: Scalars are regular numbers, such as 7, 82, and 93,454\. They only have a magnitude
    and are used to represent time, speed, distance, length, mass, work, power, area,
    volume, and so on.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 标量是常规数字，如 7、82 和 93,454。它们只有大小，用于表示时间、速度、距离、长度、质量、功、功率、面积、体积等。
- en: Vectors, on the other hand, have magnitude and direction in many dimensions.
    We use vectors to represent velocity, acceleration, displacement, force, and momentum.
    We write vectors in bold—such as ***a*** instead of *a—*and they are usually an
    array of multiple numbers, with each number in this array being an element of
    the vector.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，向量在许多维度上具有大小和方向。我们用向量表示速度、加速度、位移、力和动量等。我们用粗体字表示向量—例如 ***a*** 而不是 *a*—它们通常是多个数字的数组，这些数字中的每一个都是向量的一个元素。
- en: 'We denote this as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们用以下方式表示：
- en: '![](img/182b5235-dd83-4e93-bb5f-7ffb0b494aa2.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/182b5235-dd83-4e93-bb5f-7ffb0b494aa2.png)'
- en: Here, ![](img/4e0dc3f8-4384-43dd-a3ee-ae289462d55f.png)shows the vector is in
    *n*-dimensional real space, which results from taking the Cartesian product of ![](img/e4c8153a-ac55-41a2-bded-96c31ad09cb7.png) *n*
    times; [![](img/be3c5f05-bafc-4fa7-ba6a-7ef8fa77a41a.png)] shows each element
    is a real number; *i* is the position of each element; and, finally, ![](img/2e60c6b4-990a-48c3-ab6c-7be222119a91.png) is
    a natural number, telling us how many elements are in the vector.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，![](img/4e0dc3f8-4384-43dd-a3ee-ae289462d55f.png) 表示向量位于 *n* 维实数空间中，这是通过取
    ![](img/e4c8153a-ac55-41a2-bded-96c31ad09cb7.png) 的 *n* 次笛卡尔积得到的；[![](img/be3c5f05-bafc-4fa7-ba6a-7ef8fa77a41a.png)]
    表示每个元素是实数；*i* 是每个元素的位置；最后，![](img/2e60c6b4-990a-48c3-ab6c-7be222119a91.png) 是自然数，表示向量中有多少个元素。
- en: As with regular numbers, you can add and subtract vectors. However, there are
    some limitations.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 与常规数字一样，你可以对向量进行加法和减法运算。然而，向量有一些限制。
- en: 'Let''s take the vector we saw earlier (*x*) and add it with another vector
    (*y*), both of which are in ![](img/4e64ae8f-de5b-4140-9e5f-c10c59a33e28.png),
    so that the following applies:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们拿之前看到的向量（*x*）和另一个向量（*y*）进行加法运算，它们都位于 ![](img/4e64ae8f-de5b-4140-9e5f-c10c59a33e28.png)，因此可以得到以下结果：
- en: '![](img/3289f2fc-8c7f-4a4e-b3cd-326e542b31b2.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3289f2fc-8c7f-4a4e-b3cd-326e542b31b2.png)'
- en: However, we cannot add vectors with vectors that do not have the same dimension
    or scalars.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们不能将维度不同的向量或标量相加。
- en: Note that when ![](img/f5721bc0-a2b6-415e-90d0-13304d25a4e7.png) in ![](img/8d0ad35c-1f10-4286-8a31-584a4c2afe33.png),
    we reduce to 2-dimensions (for example, the surface of a sheet of paper), and
    when *n = 3*, we reduce to 3-dimensions (the real world).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当 ![](img/f5721bc0-a2b6-415e-90d0-13304d25a4e7.png) 在 ![](img/8d0ad35c-1f10-4286-8a31-584a4c2afe33.png)
    中时，我们降维到二维（例如，纸张的表面），当 *n = 3* 时，我们降维到三维（现实世界）。
- en: 'We can, however, multiply scalars with vectors. Let λ be an arbitrary scalar,
    which we will multiply with the vector ![](img/a3312634-96a4-46f8-bdc8-624d2ab782aa.png),
    so that the following applies:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们可以将标量与向量相乘。设 λ 为任意标量，我们将其与向量 ![](img/a3312634-96a4-46f8-bdc8-624d2ab782aa.png)
    相乘，得到如下关系：
- en: '![](img/eb17ae75-c9c2-47a1-a950-17b930f6b6b4.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eb17ae75-c9c2-47a1-a950-17b930f6b6b4.png)'
- en: As we can see, λ gets multiplied by each *x[i]* in the vector. The result of
    this operation is that the vector gets scaled by the value of the scalar.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，λ 被乘以向量中的每个 *x[i]*。这个操作的结果是，向量按标量的值进行了缩放。
- en: 'For example, let ![](img/6479accd-0fcb-4c42-9a5e-f9d36bd87288.png), and ![](img/017c6d94-ddc4-4711-9039-49e898bd9771.png).
    Then, we have the following:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，设 ![](img/6479accd-0fcb-4c42-9a5e-f9d36bd87288.png)，和 ![](img/017c6d94-ddc4-4711-9039-49e898bd9771.png)。然后，我们得到如下结果：
- en: '![](img/77f4a99d-ec7c-4f3a-8474-5d7cf0bda91f.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/77f4a99d-ec7c-4f3a-8474-5d7cf0bda91f.png)'
- en: While this works fine for multiplying by a whole number, it doesn't help when
    working with fractions, but you should be able to guess how it works. Let's see
    an example.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这样乘以整数时没问题，但在处理分数时它就不起作用了，但你应该能够猜出它是如何工作的。让我们看一个例子。
- en: 'Let ![](img/10896d38-44f3-4208-b47d-e9b8c3c7ad1f.png), and ![](img/15e24cac-aff8-4358-a2ee-51bc9e15a589.png).
    Then, we have the following:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 令 ![](img/10896d38-44f3-4208-b47d-e9b8c3c7ad1f.png)，和 ![](img/15e24cac-aff8-4358-a2ee-51bc9e15a589.png)。然后，我们得到如下结果：
- en: '![](img/7d0fc872-48e8-4ab3-bba0-5d6136ca205f.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7d0fc872-48e8-4ab3-bba0-5d6136ca205f.png)'
- en: There is a very special vector that we can get by multiplying any vector by
    the scalar, **0**. We denote this as **0** and call it the **zero vector** (a
    vector containing only zeros).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 存在一个非常特殊的向量，我们可以通过将任何向量乘以标量 **0** 来得到。我们将其表示为 **0**，并称其为 **零向量**（一个仅包含零的向量）。
- en: Linear equations
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 线性方程
- en: Linear algebra, at its core, is about solving a set of linear equations, referred
    to as **a system of equations**. A large number of problems can be formulated
    as a system of linear equations.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 线性代数的核心是解一组线性方程，称为 **方程组**。许多问题可以表述为线性方程组。
- en: 'We have two equations and two unknowns, as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有两个方程和两个未知数，如下所示：
- en: '![](img/7517d76f-e4f5-4316-90b5-447587adf16d.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7517d76f-e4f5-4316-90b5-447587adf16d.png)'
- en: Both equations produce straight lines. The solution to both these equations
    is the point where both lines meet. In this case, the answer is the point (3,
    1).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 两个方程都表示直线。两个方程的解是这两条直线交点的位置。在这种情况下，答案是点 (3, 1)。
- en: 'But for our purposes, in linear algebra, we write the preceding equations as
    a vector equation that looks like this:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 但为了我们的目的，在线性代数中，我们将前面的方程写成一个向量方程，如下所示：
- en: '![](img/76e54c6c-f5a2-4080-b865-6f014b81ca89.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/76e54c6c-f5a2-4080-b865-6f014b81ca89.png)'
- en: Here, **b** is the result vector.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，**b** 是结果向量。
- en: 'Placing the point (3, 1) into the vector equation, we get the following:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 将点 (3, 1) 代入向量方程，我们得到如下结果：
- en: '![](img/486783f2-84f5-4d1f-988e-6589190e3b32.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/486783f2-84f5-4d1f-988e-6589190e3b32.png)'
- en: 'As we can see, the left-hand side is equal to the right-hand side, so it is,
    in fact, a solution! However, I personally prefer to write this as a coefficient
    matrix, like so:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，左边等于右边，因此它实际上是一个解！不过，我个人更喜欢将其写成系数矩阵，形式如下：
- en: '![](img/372c5f68-002c-4d39-84ea-db6b6e783b5c.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/372c5f68-002c-4d39-84ea-db6b6e783b5c.png)'
- en: 'Using the coefficient matrix, we can express the system of equations as a matrix
    problem in the form ![](img/6b7983fe-ee48-44a0-b74c-59fb3cd58c61.png), where the
    column vector *v* is the variable vector. We write this as shown:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 使用系数矩阵，我们可以将方程组表示为如下矩阵问题 ![](img/6b7983fe-ee48-44a0-b74c-59fb3cd58c61.png)，其中列向量
    *v* 是变量向量。我们写成如下形式：
- en: '![](img/2adc65f3-31fd-471e-9eef-d2074df5d327.png).'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/2adc65f3-31fd-471e-9eef-d2074df5d327.png)。'
- en: Going forward, we will express all our problems in this format.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将以这种格式表示我们所有的问题。
- en: 'To develop a better understanding, we''ll break down the multiplication of matrix
    *A* and vector *v*. It is easiest to think of it as a linear combination of vectors.
    Let''s take a look at the following example with a 3x3 matrix and a 3x1 vector:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解，我们将分解矩阵 *A* 和向量 *v* 的乘法。最简单的理解方法是将其看作是向量的线性组合。让我们看一下下面的例子，其中有一个 3x3
    的矩阵和一个 3x1 的向量：
- en: '![](img/791c49d6-f452-406a-904c-c786dd91dbd8.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/791c49d6-f452-406a-904c-c786dd91dbd8.png)'
- en: It is important to note that matrix and vector multiplication is only possible
    when the number of columns in the matrix is equal to the number of rows (elements)
    in the vector.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，矩阵与向量的乘法仅在矩阵的列数等于向量的行数（元素数）时才能进行。
- en: 'For example, let''s look at the following matrix:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，让我们看一下以下矩阵：
- en: '![](img/40d1e7b3-1f2f-4475-a5b5-58972acaf62a.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/40d1e7b3-1f2f-4475-a5b5-58972acaf62a.png)'
- en: 'This can be multiplied since the number of columns in the matrix is equal to
    the number of rows in the vector, but the following matrix cannot be multiplied
    as the number of columns and number of rows are not equal:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 由于矩阵的列数等于向量的行数，因此可以进行乘法运算，但以下矩阵由于列数和行数不相等，不能进行乘法：
- en: '![](img/e1fbdf70-7cf3-4e4c-8cac-fc3a61635393.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e1fbdf70-7cf3-4e4c-8cac-fc3a61635393.png)'
- en: 'Let''s visualize some of the operations on vectors to create an intuition of
    how they work. Have a look at the following screenshot:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一些向量运算来可视化它们，以帮助我们更直观地理解它们是如何工作的。请看以下截图：
- en: '![](img/a1d03a07-cc24-4dbf-be7f-db99e763e835.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a1d03a07-cc24-4dbf-be7f-db99e763e835.png)'
- en: The preceding vectors we dealt with are all in ![](img/76445ae4-3f8e-42c9-adea-ff3339448905.png) (in
    2-dimensional space), and all resulting combinations of these vectors will also
    be in ![](img/faf91354-3538-4a30-924e-42dc074da709.png). The same applies for
    vectors in ![](img/8eb58b6f-21bf-4860-873f-ed3e5a65f586.png), ![](img/2b7e9af7-c89e-44e8-af1c-7c14ece9527f.png),
    and ![](img/533cd992-1a9f-4589-9ffa-520098985a13.png).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前处理的向量都位于 ![](img/76445ae4-3f8e-42c9-adea-ff3339448905.png)（二维空间中），并且这些向量的所有组合也将位于
    ![](img/faf91354-3538-4a30-924e-42dc074da709.png)。同样的情况也适用于位于 ![](img/8eb58b6f-21bf-4860-873f-ed3e5a65f586.png)、![](img/2b7e9af7-c89e-44e8-af1c-7c14ece9527f.png)
    和 ![](img/533cd992-1a9f-4589-9ffa-520098985a13.png) 中的向量。
- en: 'There is another very important vector operation called the dot product, which
    is a type of multiplication. Let''s take two arbitrary vectors in ![](img/643c9f21-82b7-49a6-b8ef-eaf073e41d6c.png),
    **v** and **w**, and find its dot product, like this:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一种非常重要的向量运算，称为点积，它是一种乘法。让我们取两个任意向量 **v** 和 **w**，并计算它们的点积，如下所示：
- en: '![](img/c194786f-cefc-4ae2-8306-9afe5231bfa7.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c194786f-cefc-4ae2-8306-9afe5231bfa7.png)'
- en: 'The following is the product:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是乘积：
- en: '![](img/c113d54b-9c6e-4691-a17c-df055b4386fc.png).'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/c113d54b-9c6e-4691-a17c-df055b4386fc.png)。'
- en: 'Let''s continue, using the same vectors we dealt with before, as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续，使用之前处理的相同向量，如下所示：
- en: '![](img/07226613-36d6-4cd9-96ea-609f4e4736a3.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/07226613-36d6-4cd9-96ea-609f4e4736a3.png)'
- en: 'And by taking their dot product, we get zero, which tells us that the two vectors
    are perpendicular (there is a 90° angle between them), as shown here:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 通过计算它们的点积，我们得到了零，这告诉我们这两个向量是垂直的（它们之间有 90° 的角度），如图所示：
- en: '![](img/9a7ed323-155b-45e6-a628-d7424b8cce1a.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9a7ed323-155b-45e6-a628-d7424b8cce1a.png)'
- en: The most common example of a perpendicular vector is seen with the vectors that
    represent the *x* axis, the *y* axis, and so on. In ![](img/66ae3c43-3e63-4682-a9a7-fc82c039451c.png),
    we write the *x* axis vector as [![](img/63b86189-6d7f-4aa7-baab-a1ebfb6ac991.png)]and
    the *y* axis vector as [![](img/5c747d51-ecf1-4d10-ac7e-5af1dfde6bc9.png)]. If
    we take the dot product *i*•*j*, we find that it is equal to zero, and they are
    thus perpendicular.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的垂直向量例子是表示 *x* 轴、*y* 轴等的向量。在 ![](img/66ae3c43-3e63-4682-a9a7-fc82c039451c.png)
    中，我们将 *x* 轴向量写作 [![](img/63b86189-6d7f-4aa7-baab-a1ebfb6ac991.png)]，将 *y* 轴向量写作
    [![](img/5c747d51-ecf1-4d10-ac7e-5af1dfde6bc9.png)]。如果我们计算 *i*•*j* 的点积，我们会发现结果为零，因此它们是垂直的。
- en: 'By combining *i* and *j* into a 2x2 matrix, we get the following identity matrix,
    which is a very important matrix:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将 *i* 和 *j* 组合成一个 2x2 矩阵，我们得到以下单位矩阵，这是一个非常重要的矩阵：
- en: '![](img/0fe94128-1604-47f8-a2b8-a999f83cd53b.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0fe94128-1604-47f8-a2b8-a999f83cd53b.png)'
- en: 'The following are some of the scenarios we will face when solving linear equations
    of the type ![](img/6b7983fe-ee48-44a0-b74c-59fb3cd58c61.png):'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们在求解类型为 ![](img/6b7983fe-ee48-44a0-b74c-59fb3cd58c61.png) 的线性方程时可能遇到的几种情况：
- en: Let's consider the matrix [![](img/59d7a363-9573-4da7-9d5e-e40f4c8a433d.png)]and
    the equations [![](img/e6b6fc6a-c0e5-4e8e-89f9-c3f767e5e9bf.png)] and [![](img/37a4cfcb-522a-4687-9f9d-4cef1a955fa0.png)].
    If we do the algebra and multiply the first equation by 3, we get [![](img/ccc9c421-0c52-4f15-a3aa-e0d9fc771341.png)].
    But the second equation is equal to zero, which means that these two equations
    do not intersect and therefore have no solution. When one column is dependent
    on another—that is, is a multiple of another column—all combinations of [![](img/50950cd5-e2c2-409e-8183-deacbc2d2ed0.png)] and [![](img/9fb0c18b-5ed3-49f9-a5a0-ef39e12d4767.png)] lie
    in the same direction. However, seeing as [![](img/caa1a971-d158-4ab0-93b6-1b04e55e2fc0.png)] is
    not a combination of the two aforementioned column vectors and does not lie on
    the same line, it cannot be a solution to the equation.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让我们考虑矩阵[![](img/59d7a363-9573-4da7-9d5e-e40f4c8a433d.png)]和方程[![](img/e6b6fc6a-c0e5-4e8e-89f9-c3f767e5e9bf.png)]以及[![](img/37a4cfcb-522a-4687-9f9d-4cef1a955fa0.png)]。如果我们进行代数运算并将第一个方程乘以
    3，我们得到[![](img/ccc9c421-0c52-4f15-a3aa-e0d9fc771341.png)]。但是第二个方程等于零，这意味着这两个方程没有交点，因此没有解。当一个列向量依赖于另一个列向量——即它是另一个列向量的倍数时，[![](img/50950cd5-e2c2-409e-8183-deacbc2d2ed0.png)]和[![](img/9fb0c18b-5ed3-49f9-a5a0-ef39e12d4767.png)]的所有组合都位于同一方向。然而，由于[![](img/caa1a971-d158-4ab0-93b6-1b04e55e2fc0.png)]不是这两个列向量的组合，并且不在同一条直线上，它不能是方程的解。
- en: 'Let''s take the same matrix as before, but this time, [![](img/d49790e7-c5f8-47b4-9bf4-2e64bbcb2700.png)].
    Since **b** is on the line and is a combination of the dependent vectors, there
    is an infinite number of solutions. We say that **b** is in the column space of
    A. While there is only one specific combination of **v** that produces **b**,
    there are infinite combinations of the column vectors that result in the zero
    vector (**0**). For example, for any value, *a*, we have the following:'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们采用之前相同的矩阵，但这次是[![](img/d49790e7-c5f8-47b4-9bf4-2e64bbcb2700.png)]。由于**b**在这条线上，并且是依赖向量的组合，因此存在无限多个解。我们说**b**在矩阵A的列空间中。虽然只有一种特定的**v**组合能够产生**b**，但存在无限多的列向量组合可以得到零向量（**0**）。例如，对于任意值*a*，我们有以下等式：
- en: '![](img/c4eeebdc-0420-47b0-96ce-1d4e2e90bfab.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4eeebdc-0420-47b0-96ce-1d4e2e90bfab.png)'
- en: This leads us to another very important concept, known as the complete solution.
    The complete solution is all the possible ways to produce [![](img/f6146508-ced5-40a4-a9d0-1bfb8c6e4ac5.png)].
    We write this as [![](img/dd655452-f231-4ca3-9157-3fd61d2eb9ee.png)], where [![](img/a4763160-2b3e-4dd3-a820-89698095c2ad.png)].
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这引出了另一个非常重要的概念，即完全解。完全解是所有可能的产生[![](img/f6146508-ced5-40a4-a9d0-1bfb8c6e4ac5.png)]的方式。我们将其表示为[![](img/dd655452-f231-4ca3-9157-3fd61d2eb9ee.png)]，其中[![](img/a4763160-2b3e-4dd3-a820-89698095c2ad.png)]。
- en: Solving linear equations in n-dimensions
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 求解 n 维空间中的线性方程组
- en: Now that we've dealt with linear equations in 2-dimensions and have developed
    an understanding of them, let's go a step further and look at equations in 3-dimensions.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经处理了二维线性方程组并理解了它们，接下来我们进一步研究三维方程组。
- en: Earlier, our equations produced curves in the 2-dimensional space (*xy*-plane).
    Now, the equations we will be dealing with will produce planes in 3-dimensional
    space (*xyz*-plane).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，我们的方程在二维空间（*xy*平面）中产生了曲线。现在，我们将处理的方程将在三维空间（*xyz*平面）中产生平面。
- en: 'Let''s take an arbitrary 3x3 matrix, as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们取一个任意的 3x3 矩阵，如下所示：
- en: '![](img/2d9e7043-cc8b-4743-a537-7d71f68e6688.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2d9e7043-cc8b-4743-a537-7d71f68e6688.png)'
- en: We know from earlier in having dealt with linear equations in two dimensions
    that our solution **b**, as before, is a linear combination of the three column
    vectors, so that [![](img/b6269a28-f488-440d-856a-abec7d06726e.png)].
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 从之前处理二维线性方程组时我们知道，我们的解**b**，像以前一样，是三个列向量的线性组合，因此有[![](img/b6269a28-f488-440d-856a-abec7d06726e.png)]。
- en: The equation [![](img/ccd382f2-fa54-459a-be3a-8043fd2ba13d.png)] (equation 1)
    produces a plane, as do [![](img/2467172b-cec3-4323-b81a-fc6acc1a5059.png)] (equation
    2), and [![](img/5fa43033-d4aa-4585-9de8-35138fdbb6eb.png)] (equation 3).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 方程[![](img/ccd382f2-fa54-459a-be3a-8043fd2ba13d.png)]（方程 1）产生一个平面，方程[![](img/2467172b-cec3-4323-b81a-fc6acc1a5059.png)]（方程
    2）和[![](img/5fa43033-d4aa-4585-9de8-35138fdbb6eb.png)]（方程 3）也分别产生平面。
- en: When two planes intersect, they intersect at a line; however, when three planes
    intersect, they intersect at a point. That point is the vector [![](img/1d78b343-c418-4a7e-9216-a937b806d8bf.png)],
    which is the solution to our problem.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 当两平面相交时，它们会在一条直线上相交；然而，当三平面相交时，它们会在一个点上相交。这个点就是向量[![](img/1d78b343-c418-4a7e-9216-a937b806d8bf.png)]，它是我们问题的解。
- en: However, if the three planes do not intersect at a point, there is no solution
    to the linear equation. This same concept of solving linear equations can be extended
    to many more dimensions.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果三个平面没有在一个点相交，那么线性方程就没有解。解决线性方程的这个概念可以扩展到更多的维度。
- en: Suppose now that we have a system with 15 linear equations and 15 unknown variables.
    We can use the preceding method and, according to it, we need to find the point
    that satisfies all the 15 equations—that is, where they intersect (if it exists).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们现在有一个包含15个线性方程和15个未知数的系统。我们可以使用前述方法，并根据该方法，我们需要找到满足所有15个方程的点——也就是它们的交点（如果存在的话）。
- en: 'It will look like this:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 它看起来将是这样的：
- en: '![](img/c72baa97-897f-4a90-94c0-850d1abd9c00.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c72baa97-897f-4a90-94c0-850d1abd9c00.png)'
- en: As you can tell, that's a lot of equations we have to deal with, and the greater
    the number of dimensions, the harder this becomes to solve.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，我们需要处理很多方程，而且维度越大，解起来就越困难。
- en: Solving linear equations using elimination
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用消元法解线性方程
- en: One of the best ways to solve linear equations is by a systematic method known
    as **elimination**. This is a method that allows us to systematically eliminate
    variables and use substitution to solve equations.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 解决线性方程的一种最佳方法是通过一种系统化的方法，称为**消元法**。这是一种允许我们系统地消去变量并通过代入法解方程的方法。
- en: 'Let''s take a look at two equations with two variables, as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看两个包含两个变量的方程，如下所示：
- en: '![](img/4f496b41-d3fd-4919-ac59-2eb5d4300ada.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4f496b41-d3fd-4919-ac59-2eb5d4300ada.png)'
- en: 'After elimination, this becomes the following:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 消元后，结果变为如下：
- en: '![](img/ba4ab482-dfc9-49f6-adae-aad2f001d085.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ba4ab482-dfc9-49f6-adae-aad2f001d085.png)'
- en: As we can see, the *x* variable is no longer in the second equation. We can
    plug the *y* value back into the first equation and solve for *x*. Doing this,
    we find that *x = 3* and *y = 1*.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，*x* 变量不再出现在第二个方程中。我们可以将 *y* 值代入第一个方程，解出 *x*。这样，我们得到 *x = 3* 和 *y = 1*。
- en: We call this **triangular factorization**. There are two types—lower triangular
    and upper triangular. We solve the upper triangular system from top to bottom
    using a process known as **back substitution**, and this works for systems of
    any size.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们称之为**三角形分解**。它有两种类型——下三角矩阵和上三角矩阵。我们通过一种叫做**回代法**的过程，从上到下解决上三角矩阵系统，这种方法适用于任何大小的系统。
- en: While this is an effective method, it is not fail-proof. We could come across
    a scenario where we have more equations than variables, or more variables than
    equations, which are unsolvable. Or, we could have a scenario such as *0x = 7*,
    and, as we know, dividing by zero is impossible.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这是一个有效的方法，但并非万无一失。我们可能会遇到方程比变量多，或者变量比方程多的情况，这种情况是无法解的。或者，我们可能遇到像 *0x = 7*
    这样的情况，正如我们所知，除以零是无法进行的。
- en: 'Let''s solve three equations with three variables, as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们解决以下三个包含三个变量的方程：
- en: '![](img/de168eab-7179-44f1-a395-d1da75a426c9.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/de168eab-7179-44f1-a395-d1da75a426c9.png)'
- en: 'We will use upper triangular factorization and eliminate variables, starting
    with *y* and then *z*. Let''s start by putting this into our matrix form, as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用上三角形分解法并逐一消去变量，首先是 *y*，然后是 *z*。让我们首先将其表示为矩阵形式，如下所示：
- en: '![](img/8fc3e9e1-ee34-4538-9177-9ed91be78ac4.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8fc3e9e1-ee34-4538-9177-9ed91be78ac4.png)'
- en: 'For our purposes and to make things simpler, we will drop ***v***, the column
    vector, and get the following result:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化问题并使其更易理解，我们将忽略***v***，即列向量，并得到以下结果：
- en: '![](img/587fb1a2-2227-4b48-8a83-2f4feaa340aa.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/587fb1a2-2227-4b48-8a83-2f4feaa340aa.png)'
- en: 'Then, exchange row 2 and row 3 with each other, like this:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，交换第二行和第三行，如下所示：
- en: '![](img/961c5862-e493-4a5e-bf05-1faa01c3542d.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/961c5862-e493-4a5e-bf05-1faa01c3542d.png)'
- en: 'Then, add row 2 and row 1 together to eliminate the first value in row 2, like
    this:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将第二行与第一行相加，以消去第二行中的第一个值，如下所示：
- en: '![](img/66ed810d-f02d-4d1b-a71c-0a3614fdd40f.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/66ed810d-f02d-4d1b-a71c-0a3614fdd40f.png)'
- en: 'Next, multiply row 1 by 3/2 and subtract it from row 3, like this:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将第一行乘以3/2，并从第三行中减去，如下所示：
- en: '![](img/4b9907b5-99c4-4fe0-b5d8-9cc881331eb1.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4b9907b5-99c4-4fe0-b5d8-9cc881331eb1.png)'
- en: 'Finally, multiply row 2 by 6 and subtract it from row 3, like this:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将第二行乘以6并从第三行中减去，如下所示：
- en: '![](img/d1af6fb1-b98c-416a-81de-9ffe836300b6.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d1af6fb1-b98c-416a-81de-9ffe836300b6.png)'
- en: As you can notice, the values in the matrix now form a triangle pointing upward,
    which is why we call it upper triangular. By substituting the values back into
    the previous equation backward (from bottom to top), we can solve, and find that [![](img/a01e9e4a-2748-428d-aebd-1ea043400ed1.png)], [![](img/5f884d7a-e7a1-499a-a4f1-54c2dcc6377c.png)],
    and [![](img/ed84a059-cdf7-4685-8b2e-a6c294e503a9.png)].
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，矩阵中的值现在形成一个指向上方的三角形，这就是为什么我们称其为上三角矩阵。通过将值代入之前的方程并反向求解（从下到上），我们可以求得：[![](img/a01e9e4a-2748-428d-aebd-1ea043400ed1.png)]，[![](img/5f884d7a-e7a1-499a-a4f1-54c2dcc6377c.png)]，以及[![](img/ed84a059-cdf7-4685-8b2e-a6c294e503a9.png)]。
- en: 'In summary, ![](img/d9373151-de9b-4942-812a-70b29d99c5fb.png) becomes ![](img/9621aa55-0027-41be-84c4-8417adb89d0d.png),
    as illustrated here:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，![](img/d9373151-de9b-4942-812a-70b29d99c5fb.png)变成了![](img/9621aa55-0027-41be-84c4-8417adb89d0d.png)，如下所示：
- en: '![](img/e1a093f9-bad6-47ba-a9bf-47741619dff3.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e1a093f9-bad6-47ba-a9bf-47741619dff3.png)'
- en: '**Note**: The values across the diagonal in the triangular factorized matrix
    are called pivots, and when factorized, the values below the diagonal are all
    zeros.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：在三角形分解矩阵的对角线上方的值被称为枢轴，当矩阵分解时，对角线下方的值全部为零。'
- en: 'To check that our found solution is right, we solve ![](img/1194653c-0df1-4954-ac63-f40786e74eac.png),
    using our found values for *x*, *y,* and *z*, like this:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 为了验证我们找到的解是否正确，我们使用找到的*x*、*y*和*z*值来解这个方程：![](img/1194653c-0df1-4954-ac63-f40786e74eac.png)，像这样：
- en: '![](img/8067f820-eff7-435d-980b-6daff80a91e5.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8067f820-eff7-435d-980b-6daff80a91e5.png)'
- en: 'This then becomes the following equation:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 然后变成了如下方程：
- en: '![](img/c7cf7b61-401c-4446-b92b-84bcfa47f15f.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c7cf7b61-401c-4446-b92b-84bcfa47f15f.png)'
- en: And as we can see, the left-hand side is equal to the right-hand side.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，左侧等于右侧。
- en: 'After upper triangular factorization, an arbitrary 4x4 matrix will look like
    this:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 上三角分解后，任意一个4x4矩阵将会是这样的：
- en: '![](img/aaf4ec59-37bf-41ad-b82e-5b0028860e2b.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aaf4ec59-37bf-41ad-b82e-5b0028860e2b.png)'
- en: 'We could take this a step further and factorize the upper triangular matrix
    until we end up with a matrix that contains only the pivot values along the diagonal,
    and zeros everywhere else. This resulting matrix **P** essentially fully solves
    the problem for us without us having to resort to forward or backward substitution,
    and it looks like this:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以进一步分解上三角矩阵，直到得到一个仅包含对角线上的枢轴值，其他位置为零的矩阵。这个得到的矩阵**P**基本上完全解决了问题，无需进行前向或后向代入，结果如下所示：
- en: '![](img/574b75b9-9eb5-4b4c-bb07-ce0154c385df.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/574b75b9-9eb5-4b4c-bb07-ce0154c385df.png)'
- en: But as you can tell, there are a lot of steps involved in getting us from **A** to
    **P**.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 但正如你所看到的，从**A**到**P**的过程中涉及了很多步骤。
- en: There is one other very important factorization method called **lower-upper**
    (**LU) decomposition**. The way it works is we factorize **A** into an upper triangular
    matrix **U**, and record the steps of Gaussian elimination in a lower triangular
    matrix **L**, such that [![](img/b5ee1b4e-a497-4c37-873c-b147e73f74d1.png)].
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一种非常重要的分解方法，叫做**下三角-上三角** (**LU分解**)。其方法是将**A**分解为一个上三角矩阵**U**，并将高斯消元的步骤记录在下三角矩阵**L**中，最终得到如下结果：[![](img/b5ee1b4e-a497-4c37-873c-b147e73f74d1.png)]。
- en: 'Let''s revisit the matrix we upper-triangular factorized before and put it
    into LU factorized form, like this:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们重新审视之前进行的上三角矩阵分解，并将其转化为LU分解的形式，像这样：
- en: '![](img/37dce8d5-7c0a-45fb-a51b-80f7269227ec.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/37dce8d5-7c0a-45fb-a51b-80f7269227ec.png)'
- en: 'If we multiply the two matrices on the right, we will get the original matrix
    **A**. But how did we get here? Let''s go through the steps, as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将右侧的两个矩阵相乘，就能得到原始矩阵**A**。但是我们是怎么得到这个结果的呢？让我们一步步来看：
- en: 'We start with ![](img/42357787-303e-434f-8a90-864135a19ec1.png), so that the
    following applies:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们从![](img/42357787-303e-434f-8a90-864135a19ec1.png)开始，得出如下结论：
- en: '![](img/5f11564a-313c-4613-a616-89d647c9ad71.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5f11564a-313c-4613-a616-89d647c9ad71.png)'
- en: 'We add -1 to what was the identity matrix at *l[2,1]* to represent the operation
    (row 2)-(-1)(row 1), so it becomes the following:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在原本是单位矩阵的*l[2,1]*位置上加上-1，以表示操作（第二行）-( -1 )(第一行)，因此它变成了如下所示：
- en: '![](img/a9dac746-1c92-4770-aa75-3c6ef67aff43.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a9dac746-1c92-4770-aa75-3c6ef67aff43.png)'
- en: 'We then add [![](img/5931f8e1-70cc-4886-9256-66f4880fb85d.png)] to the matrix
    at *l[3,1]* to represent the [![](img/cd8b62e1-0be4-491f-a862-2a64a5781bf4.png) ]operation,
    so it becomes the following:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们将[![](img/5931f8e1-70cc-4886-9256-66f4880fb85d.png)]加到*l[3,1]*的位置，表示[![](img/cd8b62e1-0be4-491f-a862-2a64a5781bf4.png)]操作，结果变成了如下所示：
- en: '![](img/d999f17f-ba8e-4058-af67-e4ff6a6f7555.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d999f17f-ba8e-4058-af67-e4ff6a6f7555.png)'
- en: 'We then add 6 to the matrix at *l[3,2]* to represent the operation (row 3)-6(row
    2), so it becomes the following:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将6加到矩阵的*l[3,2]*位置上，表示操作（行3）-6（行2），结果如下：
- en: '![](img/231a078a-f411-4fc1-8631-016ecd7609a1.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](img/231a078a-f411-4fc1-8631-016ecd7609a1.png)'
- en: This is the LU factorized matrix we saw earlier.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们之前看到的LU分解矩阵。
- en: You might now be wondering what this has to do with solving ![](img/60491e0d-7150-433b-ba6b-bf0c5bf0caeb.png),
    which is very valid. The elimination process tends to work quite well, but we
    have to additionally apply all the operations we did on **A** to ***b** *as well,
    and this involves extra steps. However, LU factorization is only applied to **A**.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可能会想，这与解![](img/60491e0d-7150-433b-ba6b-bf0c5bf0caeb.png)有什么关系，这个问题非常有效。消去法通常效果不错，但我们必须将对**A**做的所有操作同样应用于***b**，并且这涉及到额外的步骤。然而，LU分解仅应用于**A**。
- en: Let's now take a look at how we can solve our system of linear equations using
    this method.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看一下如何使用这个方法解线性方程组。
- en: 'For simplicity, we drop the variables vector and write **A** and **b** as follows:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化，我们省略了变量向量，直接将**A**和**b**写成如下：
- en: '![](img/961c5862-e493-4a5e-bf05-1faa01c3542d.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](img/961c5862-e493-4a5e-bf05-1faa01c3542d.png)'
- en: 'But even this can get cumbersome to write as we go, so we will instead write
    it in the following way for further simplicity:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 但即便如此，随着推导的进行，这样写会变得繁琐，因此为了简化，我们将以如下方式书写：
- en: '![](img/c766d0c3-0dec-4001-926a-43f3392d6f22.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c766d0c3-0dec-4001-926a-43f3392d6f22.png)'
- en: 'We then multiply both sides by ![](img/799cb620-2b53-4a46-a42a-f0d351b4a4bc.png)and
    get the following result:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们两边同时乘以![](img/799cb620-2b53-4a46-a42a-f0d351b4a4bc.png)，得到以下结果：
- en: '![](img/ff2aaab2-8480-4537-afa7-5242a9ef6029.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ff2aaab2-8480-4537-afa7-5242a9ef6029.png)'
- en: This tells us that ![](img/6635e792-8f7a-4022-a2de-cd3f398a60c9.png), and we
    already know from the preceding equation that [![](img/43d8a95a-f8c4-49dd-92af-c96973a49357.png)] (so
    [![](img/50f2f8f9-db05-4674-9982-fcf5570d9f71.png)]). And by using back substitution,
    we can find the vector **v**.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉我们![](img/6635e792-8f7a-4022-a2de-cd3f398a60c9.png)，并且我们已经从之前的方程得知[![](img/43d8a95a-f8c4-49dd-92af-c96973a49357.png)](因此[![](img/50f2f8f9-db05-4674-9982-fcf5570d9f71.png)])。通过回代法，我们可以求解出向量**v**。
- en: In the preceding example, you may have noticed some new notation that I have
    not yet introduced, but not to worry—we will observe all the necessary notation
    and operations in the next section.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，你可能注意到一些我还未介绍的符号，但不用担心——我们将在下一节中观察所有必要的符号和操作。
- en: Matrix operations
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 矩阵运算
- en: Now that we understand how to solve systems of linear equations of the type ![](img/c3085ddc-2bf6-43b2-81df-37ede45e7ed2.png) where
    we multiplied a matrix with a column vector, let's move on to dealing with the
    types of operations we can do with one or more matrices.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经理解了如何解类型为![](img/c3085ddc-2bf6-43b2-81df-37ede45e7ed2.png)的线性方程组，即我们将矩阵与列向量相乘，接下来我们将探讨如何进行一个或多个矩阵的运算。
- en: Adding matrices
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 矩阵加法
- en: 'As with scalars and vectors, sometimes we may have to add two or more matrices
    together, and the process of doing so is rather straightforward. Let''s take two
    ![](img/b70e9807-7600-4d82-bb97-4fe0408bf0ff.png) matrices, *A* and *B*, and add
    them:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 与标量和向量类似，有时我们需要将两个或多个矩阵相加，过程相当直接。我们以两个![](img/b70e9807-7600-4d82-bb97-4fe0408bf0ff.png)矩阵*A*和*B*为例，将它们相加：
- en: '![](img/d1a55f22-b8bb-421d-9e27-7ed05f8e1a72.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d1a55f22-b8bb-421d-9e27-7ed05f8e1a72.png)'
- en: It is important to note that we can only add matrices that have the same dimensions,
    and, as you have probably noticed, we add the matrices element-wise.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，我们只能相加具有相同维度的矩阵，正如你可能已经注意到的，我们是按元素对矩阵进行加法运算的。
- en: Multiplying matrices
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 矩阵乘法
- en: So far, we have only multiplied a matrix by a column vector. But now, we will
    multiply a matrix *A* with another matrix *B*.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只进行了矩阵与列向量的乘法运算。但现在，我们将矩阵*A*与另一个矩阵*B*相乘。
- en: 'There are four simple rules that will help us in multiplying matrices, listed
    here:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这里列出了四个简单的规则，帮助我们进行矩阵乘法：
- en: Firstly, we can only multiply two matrices when the number of columns in matrix
    *A* is equal to the number of rows in matrix *B*.
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，当矩阵*A*的列数等于矩阵*B*的行数时，我们才能进行矩阵的乘法运算。
- en: Secondly, the first row of matrix *A* multiplied by the first column of matrix
    *B* gives us the first element in the matrix *AB*, and so on.
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其次，矩阵*A*的第一行与矩阵*B*的第一列相乘，得到矩阵*AB*中的第一个元素，依此类推。
- en: Thirdly, when multiplying, order matters—specifically, *AB* ≠ *BA*.
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三，当进行乘法运算时，顺序非常重要——具体来说，*AB* ≠ *BA*。
- en: Lastly, the element at row *i*, column *j* is the product of the *i^(th)* row
    of matrix *A* and the *j^(th)* column of matrix *B*.
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，位于第 *i* 行，第 *j* 列的元素是矩阵 *A* 的第 *i* 行与矩阵 *B* 的第 *j* 列的乘积。
- en: 'Let''s multiply an arbitrary 4x5 matrix with an arbitrary 5x6 matrix, as follows:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将一个任意的 4x5 矩阵与一个任意的 5x6 矩阵相乘，如下所示：
- en: '![](img/cf39a6fc-ea74-4d5c-9e27-b94ea3aff4c7.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cf39a6fc-ea74-4d5c-9e27-b94ea3aff4c7.png)'
- en: 'This results in a 4x6 matrix, like this:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 这将得到一个 4x6 的矩阵，如下所示：
- en: '![](img/7f013907-7b56-409b-86c9-6c5ff9c29919.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7f013907-7b56-409b-86c9-6c5ff9c29919.png)'
- en: 'From that, we can deduce that in general, the following applies:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 从中我们可以推导出，一般来说，以下结论成立：
- en: '![](img/3e89a845-02b9-437f-8f25-aa241cfdacf5.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3e89a845-02b9-437f-8f25-aa241cfdacf5.png)'
- en: 'Let''s take the following two matrices and multiply them, like this:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将以下两个矩阵相乘，如下所示：
- en: '![](img/d32786c0-cc3f-454e-86be-d69a00a1f9af.png) and ![](img/23235442-c6f3-44fe-b693-076fc232e5dd.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d32786c0-cc3f-454e-86be-d69a00a1f9af.png) 和 ![](img/23235442-c6f3-44fe-b693-076fc232e5dd.png)'
- en: 'This will give us the following matrix:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这将得到如下矩阵：
- en: '![](img/bcc54925-a1dc-4772-b339-7d8ce304aac2.png).'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/bcc54925-a1dc-4772-b339-7d8ce304aac2.png)。'
- en: '**Note**: In this example, the matrix *B* is the identity matrix, usually written
    as *I*.'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：在这个例子中，矩阵 *B* 是单位矩阵，通常表示为 *I*。'
- en: The identity matrix has two unique properties in matrix multiplication. When
    multiplied by any matrix, it returns the original matrix unchanged, and the order
    of multiplication does not matter—so, *AI = IA = A*.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 单位矩阵在矩阵乘法中有两个独特的性质。当它与任何矩阵相乘时，返回原始矩阵不变，并且乘法的顺序不影响结果——所以，*AI = IA = A*。
- en: 'For example, let''s use the same matrix *A* from earlier, and multiply it by
    another matrix *B*, as follows:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们使用之前的矩阵 *A*，并将其与另一个矩阵 *B* 相乘，如下所示：
- en: '![](img/73ae2b9e-33a7-4bb1-93bc-f2fc03ff02be.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![](img/73ae2b9e-33a7-4bb1-93bc-f2fc03ff02be.png)'
- en: Another very special matrix is the inverse matrix, which is written as *A^(-1)*.
    And when we multiply *A* with *A^(-1)*, we receive *I*, the identity matrix.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个非常特殊的矩阵是逆矩阵，表示为 *A^(-1)*。当我们将 *A* 与 *A^(-1)* 相乘时，我们得到 *I*，即单位矩阵。
- en: 'As mentioned before, the order in which we multiply matters. We must keep the
    matrices in order, but we do have some flexibility. As we can see in the following
    equation, the parentheses can be moved:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，乘法的顺序很重要。我们必须保持矩阵的顺序，但也有一些灵活性。正如我们在以下方程中看到的，括号可以移动：
- en: '![](img/2ee7c381-74a9-4daa-a773-3c492e1cf2e5.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2ee7c381-74a9-4daa-a773-3c492e1cf2e5.png)'
- en: This is the first law of matrix operations, known as **associativity**.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 这是矩阵运算的第一条法则，称为 **结合律**。
- en: 'The following are three important laws that cannot be broken:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是三条重要的法则，必须遵守：
- en: '**commutativity**: [![](img/b548464d-80d3-4bba-8ec9-997a3707ffd9.png)]'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**交换律**：[![](img/b548464d-80d3-4bba-8ec9-997a3707ffd9.png)]'
- en: '**distributivity**: [![](img/2d775123-c5e6-431e-b436-894b598fad3d.png)] or [![](img/44a52be2-f47b-4e4d-bad5-70277c329a46.png)]'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分配律**：[![](img/2d775123-c5e6-431e-b436-894b598fad3d.png)] 或 [![](img/44a52be2-f47b-4e4d-bad5-70277c329a46.png)]'
- en: '**associativity**: [![](img/2d6c6496-8c34-42be-880b-91170d0091f0.png)]'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**结合律**：[![](img/2d6c6496-8c34-42be-880b-91170d0091f0.png)]'
- en: 'As proof that *AB ≠ BA*, let''s take a look at the following example:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 作为证明 *AB ≠ BA* 的例子，让我们看一下以下示例：
- en: '![](img/f79ed756-09fc-4be7-9a14-997774bd40e7.png)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f79ed756-09fc-4be7-9a14-997774bd40e7.png)'
- en: This conclusively shows that the two results are not the same.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 这清楚地证明了这两个结果是不同的。
- en: We know that we can raise numbers to powers, but we can also raise matrices
    to powers.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道可以将数字进行幂运算，但我们也可以将矩阵进行幂运算。
- en: 'If we raise the matrix *A* to power *p*, we get the following:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将矩阵 *A* 提升到 *p* 次幂，我们得到以下结果：
- en: '![](img/71d83d9f-212c-4d9d-a6e1-8d0e8c98ccc9.png) (multiplying the matrix by
    itself *p* times)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![](img/71d83d9f-212c-4d9d-a6e1-8d0e8c98ccc9.png)（将矩阵乘以自己 *p* 次）'
- en: There are two additional power laws for matrices—[![](img/3a088ac9-9eb6-48b3-b774-eb53eaeff2f7.png)] and [![](img/ef86610b-94de-449e-85ec-14afe594593f.png)].
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 矩阵的幂运算还有两个额外的法则—[![](img/3a088ac9-9eb6-48b3-b774-eb53eaeff2f7.png)] 和 [![](img/ef86610b-94de-449e-85ec-14afe594593f.png)]。
- en: Inverse matrices
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 逆矩阵
- en: Let's revisit the concept of inverse matrices and go a little more in depth
    with them. We know from earlier that *AA^(-1 )*= *I*, but not every matrix has
    an inverse.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们重新审视逆矩阵的概念，并深入了解它们。我们之前知道 *AA^(-1)* = *I*，但并不是每个矩阵都有逆矩阵。
- en: 'There are, again, some rules we must follow when it comes to finding the inverses
    of matrices, as follows:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在求逆矩阵时，我们需要遵循一些规则，具体如下：
- en: The inverse only exists if, through the process of upper or lower triangular
    factorization, we obtain all the pivot values on the diagonal.
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只有通过上三角或下三角分解的过程，得到所有主元值在对角线上时，才存在逆矩阵。
- en: If the matrix is invertible, it has only one unique inverse matrix—that is,
    if *AB* = *I* and *AC* = *I*, then *B* = *C*.
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果矩阵是可逆的，它只有一个唯一的逆矩阵——也就是说，如果 *AB* = *I* 且 *AC* = *I*，则 *B* = *C*。
- en: If *A* is invertible, then to solve *Av* = *b* we multiply both sides by *A^(-1)* and
    get *AA^(-1)v* = *A^(-1)b*, which finally gives us = *A^(-1)b*.
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 *A* 可逆，那么解 *Av* = *b* 时，我们可以两边同时乘以 *A^(-1)*，得到 *AA^(-1)v* = *A^(-1)b*，最终得到
    *A^(-1)b*。
- en: If *v* is nonzero and *b* = 0, then the matrix does not have an inverse.
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 *v* 非零且 *b* = 0，那么该矩阵没有逆矩阵。
- en: '2 x 2 matrices are invertible only if *ad* - *bc* ≠ 0, where the following
    applies:'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2 x 2 矩阵只有在 *ad* - *bc* ≠ 0 时才可逆，具体规则如下：
- en: '![](img/013c60f9-7633-490c-aece-0fada2543d5e.png)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![](img/013c60f9-7633-490c-aece-0fada2543d5e.png)'
- en: And *ad* - *bc* is called the **determinant** of *A*. *A^(-1)* involves dividing
    each element in the matrix by the determinant.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 而 *ad* - *bc* 被称为 **行列式**。 *A^(-1)* 涉及将矩阵中的每个元素除以行列式。
- en: Lastly, if the matrix has any zero values along the diagonal, it is non-invertible.
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，如果矩阵的对角线有零值，则它是不可逆的。
- en: Sometimes, we may have to invert the product of two matrices, but that is only
    possible when both the matrices are individually invertible (follow the rules
    outlined previously).
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们可能需要求两个矩阵的乘积的逆矩阵，但只有当两个矩阵本身都是可逆的时候才可能（遵循之前的规则）。
- en: For example, let's take two matrices A and B, which are both invertible. Then, [![](img/0c509cb9-9272-488f-a67b-f6374d0bdc38.png)] so
    that [![](img/bb4a926f-aed2-4f85-983d-bf9a3547518e.png)].
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们有两个矩阵 A 和 B，它们都是可逆的。然后， [![](img/0c509cb9-9272-488f-a67b-f6374d0bdc38.png)]，因此
    [![](img/bb4a926f-aed2-4f85-983d-bf9a3547518e.png)]。
- en: '**Note**: Pay close attention to the order of the inverse—it too must follow
    the order. The left-hand side is the mirror image of the right-hand side.'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：请密切注意逆矩阵的顺序——它也必须遵循顺序。左侧是右侧的镜像。'
- en: Matrix transpose
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 矩阵转置
- en: 'Let''s take an ![](img/ab7680f6-95f0-4d68-ba9c-3d2e38318c94.png) matrix *A*.
    If the matrix''s transpose is *B*, then the dimensions of *B* are ![](img/94bb719d-cb12-4f62-9cce-0bc2b057effe.png),
    such that: [![](img/ee4e4aed-0235-496e-82b8-1afe39ab4c5e.png)].  Here is the matrix
    *A*:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个矩阵 *A*。如果该矩阵的转置是 *B*，那么 *B* 的维度为 ![](img/94bb719d-cb12-4f62-9cce-0bc2b057effe.png)，如此：
    [![](img/ee4e4aed-0235-496e-82b8-1afe39ab4c5e.png)]。 这里是矩阵 *A*：
- en: '![](img/867914db-b723-48b4-b247-5e036bf6bcb7.png)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![](img/867914db-b723-48b4-b247-5e036bf6bcb7.png)'
- en: 'Then, the matrix *B* is as given:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，矩阵 *B* 如下所示：
- en: '![](img/073aeb58-5497-4697-9ae1-2841d7b48e03.png).'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/073aeb58-5497-4697-9ae1-2841d7b48e03.png)。'
- en: Essentially, we can think of this as writing the columns of *A* as the rows
    of the transposed matrix, *B*.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 本质上，我们可以将 *A* 的列看作转置矩阵 *B* 的行。
- en: We usually write the transpose of *A* as *A^T*.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通常将 *A* 的转置写作 *A^T*。
- en: A symmetric matrix is a special kind of matrix. It is an *n×n* matrix that,
    when transposed, is exactly the same as before we transposed it.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 对称矩阵是一种特殊类型的矩阵。它是一个 *n×n* 的矩阵，当转置后，它与转置前完全相同。
- en: 'The following are the properties of inverses and transposes:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是逆矩阵和转置的性质：
- en: '[![](img/8305ca1b-6dc0-4caa-8d2d-ba4b96592abc.png)]'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[![](img/8305ca1b-6dc0-4caa-8d2d-ba4b96592abc.png)]'
- en: '[![](img/2f9790a9-9bc9-404e-aa53-f4ff7be116e2.png)]'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[![](img/2f9790a9-9bc9-404e-aa53-f4ff7be116e2.png)]'
- en: '[![](img/53efb269-ac19-435c-8350-28696549f039.png)]'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[![](img/53efb269-ac19-435c-8350-28696549f039.png)]'
- en: '[![](img/47a5e35c-f82f-47e2-92d1-8a9f6d7b0299.png)]'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[![](img/47a5e35c-f82f-47e2-92d1-8a9f6d7b0299.png)]'
- en: '[![](img/a1710de3-2ebc-4e00-aae4-9822a0affca5.png)]'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[![](img/a1710de3-2ebc-4e00-aae4-9822a0affca5.png)]'
- en: '[![](img/0846e2c5-db1a-43da-a3e8-24c6ef96fe48.png)]'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[![](img/0846e2c5-db1a-43da-a3e8-24c6ef96fe48.png)]'
- en: <q>If A is an invertible matrix, then so is A^T, and so (A^(-1))^T = (A^T)^(-1)
    = A^(-T).</q>
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: <q>如果 A 是可逆矩阵，那么 A^T 也是可逆的，因此 (A^(-1))^T = (A^T)^(-1) = A^(-T)。</q>
- en: Permutations
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 排列
- en: In the example on solving systems of linear equations, we swapped the positions
    of rows 2 and 3\. This is known as a **permutation**.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在解线性方程组的例子中，我们交换了第 2 行和第 3 行的位置。这被称为 **排列**。
- en: When we are doing triangular factorization, we want our pivot values to be along
    the diagonal of the matrix, but this won't happen every time—in fact, it usually
    won't. So, instead, what we do is swap the rows so that we get our pivot values
    where we want them.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行三角分解时，我们希望将主元值放在矩阵的对角线上，但这并非每次都会发生——事实上，通常不会。所以，取而代之的是，我们交换行，以便将主元值放在我们想要的位置。
- en: But that is not their only use case. We can also use them to scale individual
    rows by a scalar value or add rows to or subtract rows from other rows.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 但这并不是它们唯一的应用场景。我们还可以用它们通过标量值对单独的行进行缩放，或将行加到其他行，或从其他行中减去行。
- en: 'Let''s start with some of the more basic permutation matrices that we obtain
    by swapping the rows of the identity matrix. In general, we have *n!* possible
    permutation matrices that can be formed from an *n*x*n* identity matrix. In this
    example, we will use a 3×3 matrix and therefore have six permutation matrices,
    and they are as follows:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一些基本的置换矩阵开始，这些矩阵通过交换单位矩阵的行得到。通常，我们有 *n!* 种可能的置换矩阵，可以从一个 *n*×*n* 的单位矩阵中构建。在这个例子中，我们使用的是
    3×3 矩阵，因此我们有六个置换矩阵，它们如下：
- en: '[![](img/8edbd7d1-57ee-44ce-bdac-feaf61fe18b1.png)] This matrix makes no change
    to the matrix it is applied on.'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[![](img/8edbd7d1-57ee-44ce-bdac-feaf61fe18b1.png)] 这个矩阵对它所应用的矩阵没有任何改变。'
- en: '[![](img/de0bdfe3-c2d9-4c81-be0b-738ab96987e1.png)] This matrix swaps rows
    two and three of the matrix it is applied on.'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[![](img/de0bdfe3-c2d9-4c81-be0b-738ab96987e1.png)] 这个矩阵交换它所应用的矩阵的第二行和第三行。'
- en: '[![](img/a9635367-129f-45b6-9fc8-21e88a13af91.png) ]This matrix swaps rows
    one and two of the matrix it is applied on.'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[![](img/a9635367-129f-45b6-9fc8-21e88a13af91.png)] 这个矩阵交换它所应用的矩阵的第一行和第二行。'
- en: '[![](img/20133a22-4f28-4529-8da3-d6a0ae7eee8a.png) ]This matrix shifts rows
    two and three up one and moves row one to the position of row three of the matrix
    it is applied on.'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[![](img/20133a22-4f28-4529-8da3-d6a0ae7eee8a.png)] 这个矩阵将第二行和第三行上移一行，并将第一行移至第三行的位置。'
- en: '[![](img/66df650f-aff2-4922-8f6a-df9e89e07d6e.png)] This matrix shifts rows
    one and two down one and moves row three to the row-one position of the matrix
    it is applied on.'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[![](img/66df650f-aff2-4922-8f6a-df9e89e07d6e.png)] 这个矩阵将第一行和第二行下移一行，并将第三行移到第一行的位置。'
- en: '[![](img/9b553584-caaf-4548-9864-6bcbde8f35dc.png)] This matrix swaps rows
    one and three of the matrix it is applied on.'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[![](img/9b553584-caaf-4548-9864-6bcbde8f35dc.png)] 这个矩阵交换它所应用的矩阵的第一行和第三行。'
- en: 'It is important to note that there is a particularly fascinating property of
    permutation matrices that states that if we have a matrix ![](img/26f5430f-c8bb-41e6-9a89-543e2bf9950a.png) and
    it is invertible, then there exists a permutation matrix that when applied to
    *A* will give us the LU factor of *A*. We can express this like so:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，置换矩阵有一个特别迷人的性质，即如果我们有一个矩阵 ![](img/26f5430f-c8bb-41e6-9a89-543e2bf9950a.png) 并且它是可逆的，那么存在一个置换矩阵，当它作用于
    *A* 时，会得到 *A* 的 LU 分解。我们可以这样表示：
- en: '![](img/92bc5c01-f9d3-489f-9ed6-8783132ac7ab.png)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![](img/92bc5c01-f9d3-489f-9ed6-8783132ac7ab.png)'
- en: Vector spaces and subspaces
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向量空间和子空间
- en: In this section, we will explore the concepts of vector spaces and subspaces.
    These are very important to our understanding of linear algebra. In fact, if we
    do not have an understanding of vector spaces and subspaces, we do not truly have
    an understanding of how to solve linear algebra problems.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨向量空间和子空间的概念。这些对我们理解线性代数非常重要。实际上，如果我们不理解向量空间和子空间，我们就无法真正理解如何解决线性代数问题。
- en: Spaces
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 空间
- en: Vector spaces are one of the fundamental settings for linear algebra, and, as
    the name suggests, they are spaces where all vectors reside. We will denote the
    vector space with V.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 向量空间是线性代数的基本设置之一，正如名称所示，它们是所有向量所在的空间。我们将向量空间表示为 V。
- en: The easiest way to think of dimensions is to count the number of elements in
    the column vector. Suppose we have [![](img/f844062d-c870-4c63-8da4-9c367d12665a.png)],
    then ![](img/b83dee00-ee90-44cc-a62b-be53a3b1779b.png). ![](img/c0be8f8b-2060-45d3-a5d3-84aac64ebf02.png) is
    a straight line, ![](img/b306fc56-e969-41c7-8bfa-f37854133f01.png) is all the
    possible points in the *xy*-plane, and ![](img/37a7dfff-6c23-4f1a-86af-e7ccc17cce8b.png) is
    all the possible points in the *xyz*-plane—that is, 3-dimensional space, and so
    on.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 思考维度最简单的方式是计算列向量中的元素数量。假设我们有 [![](img/f844062d-c870-4c63-8da4-9c367d12665a.png)]，那么 ![](img/b83dee00-ee90-44cc-a62b-be53a3b1779b.png)。 ![](img/c0be8f8b-2060-45d3-a5d3-84aac64ebf02.png) 是一个直线， ![](img/b306fc56-e969-41c7-8bfa-f37854133f01.png) 是所有可能的点在
    *xy* 平面上， ![](img/37a7dfff-6c23-4f1a-86af-e7ccc17cce8b.png) 是所有可能的点在 *xyz* 平面上——即三维空间，以此类推。
- en: 'The following are some of the rules for vector spaces:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些关于向量空间的规则：
- en: There exists in *V* an additive identity element such that ![](img/9beb757e-6a2d-462b-8634-ee8c79d8ab11.png) for
    all ![](img/8c64162a-985e-488b-9afd-e2065e102868.png).
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 *V* 中存在一个加法单位元素，使得 ![](img/9beb757e-6a2d-462b-8634-ee8c79d8ab11.png) 对所有 ![](img/8c64162a-985e-488b-9afd-e2065e102868.png)
    都成立。
- en: For all ![](img/72e37558-dab0-4707-95d1-e3531553ee79.png), there exists an additive
    inverse such that [![](img/7a4abfc2-17f6-48ca-9db4-f9754cc3ee0c.png)].
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于所有 [![](img/72e37558-dab0-4707-95d1-e3531553ee79.png)]，存在加法逆元，使得 [![](img/7a4abfc2-17f6-48ca-9db4-f9754cc3ee0c.png)]。
- en: For all ![](img/73b70efa-1d94-44f8-9bed-8f936ca38de0.png), there exists a multiplicative
    identity such that ![](img/e6918d7b-3df3-4d99-952e-3f8655fc3501.png).
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于所有 [![](img/73b70efa-1d94-44f8-9bed-8f936ca38de0.png)]，存在一个乘法单位元，使得 [![](img/e6918d7b-3df3-4d99-952e-3f8655fc3501.png)]。
- en: Vectors are commutative, such that for all [![](img/8a616fa2-317e-45d6-b02f-d0aba9a4280d.png)], [![](img/12689855-e010-4a34-acde-56945f94ab77.png)].
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向量是可交换的，即对于所有 [![](img/8a616fa2-317e-45d6-b02f-d0aba9a4280d.png)]，有 [![](img/12689855-e010-4a34-acde-56945f94ab77.png)]。
- en: Vectors are associative, such that [![](img/58b58922-0bd4-4d4e-bc68-c0c13907c741.png)].
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向量是可结合的，例如 [![](img/58b58922-0bd4-4d4e-bc68-c0c13907c741.png)]。
- en: Vectors have distributivity, such that [![](img/447375df-bf81-4687-be00-faa44d6fae45.png)] and [![](img/4ef06655-1d74-49ea-b3b3-992d1569536b.png)] for
    all [![](img/6a84499a-6142-43bc-9dd0-e436f6af128f.png)] and for all [![](img/9e915871-db33-4314-b024-9f8562c0a820.png)].
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向量具有分配性，即对于所有 [![](img/6a84499a-6142-43bc-9dd0-e436f6af128f.png)] 和所有 [![](img/9e915871-db33-4314-b024-9f8562c0a820.png)]，有
    [![](img/447375df-bf81-4687-be00-faa44d6fae45.png)] 和 [![](img/4ef06655-1d74-49ea-b3b3-992d1569536b.png)]。
- en: A set of vectors is said to be linearly independent if [![](img/81baafd7-b0d0-40f0-b313-132bb8b4012a.png)],
    which implies that [![](img/f78c7ab6-2fa7-47ab-ac6d-d9e95aea9cd3.png)].
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 一组向量被称为线性无关，如果 [![](img/81baafd7-b0d0-40f0-b313-132bb8b4012a.png)]，这意味着 [![](img/f78c7ab6-2fa7-47ab-ac6d-d9e95aea9cd3.png)]。
- en: Another important concept for us to know is called **span**. The span of [![](img/7dd1d26b-d04e-4e28-b6c8-c7a64cfeb149.png)] is
    the set of all linear combinations that can be made using the *n* vectors. Therefore, [![](img/c4e15e74-1733-4695-adba-78e26a18609c.png)] if
    the vectors are linearly independent and span *V* completely; then, the vectors
    [![](img/dbc93f18-3f2b-4d8c-a3e9-5688c00f0aeb.png)] are the basis of *V*.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个我们需要了解的重要概念是 **生成**。向量组 [![](img/7dd1d26b-d04e-4e28-b6c8-c7a64cfeb149.png)]
    的生成是通过 *n* 个向量所能组成的所有线性组合的集合。因此， [![](img/c4e15e74-1733-4695-adba-78e26a18609c.png)]，如果向量是线性无关并且完全生成
    *V*，那么这些向量 [![](img/dbc93f18-3f2b-4d8c-a3e9-5688c00f0aeb.png)] 就是 *V* 的基。
- en: Therefore, the dimension of *V* is the number of basis vectors we have, and
    we denote it *dimV*.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，*V* 的维度是我们拥有的基向量的数量，我们表示为 *dimV*。
- en: Subspaces
  id: totrans-246
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 子空间
- en: 'Subspaces are another very important concept that state that we can have one
    or many vector spaces inside another vector space. Let''s suppose *V* is a vector
    space, and we have a subspace [![](img/a602de35-3055-4e2e-82aa-563c44767ff1.png)].
    Then, *S* can only be a subspace if it follows the three rules, stated as follows:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 子空间是另一个非常重要的概念，它表明我们可以在一个向量空间内拥有一个或多个子空间。假设 *V* 是一个向量空间，并且我们有一个子空间 [![](img/a602de35-3055-4e2e-82aa-563c44767ff1.png)]。那么，*S*
    只有在遵循以下三个规则时，才能成为一个子空间：
- en: '[![](img/f230abc5-6336-415b-b5bf-6c54332c66fa.png)]'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[![](img/f230abc5-6336-415b-b5bf-6c54332c66fa.png)]。'
- en: '[![](img/61436647-3352-487a-9d71-4def0832edfe.png)] and [![](img/b3fb2604-8b33-4e9e-b336-36115f0f1a0f.png)],
    which implies that *S* is closed under addition'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[![](img/61436647-3352-487a-9d71-4def0832edfe.png)] 和 [![](img/b3fb2604-8b33-4e9e-b336-36115f0f1a0f.png)]，这意味着
    *S* 在加法下是封闭的。'
- en: '[![](img/e314788f-8f13-4302-92a0-d9e818fdbb12.png)] and ![](img/d1a7dedd-4412-4dee-a314-cca86bc4332d.png) so
    that [![](img/ab71728c-9292-4dfc-8014-756cbebb2ea2.png)], which implies that *S*
    is closed under scalar multiplication'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[![](img/e314788f-8f13-4302-92a0-d9e818fdbb12.png)] 和 [![](img/d1a7dedd-4412-4dee-a314-cca86bc4332d.png)]，因此
    [![](img/ab71728c-9292-4dfc-8014-756cbebb2ea2.png)]，这意味着 *S* 在标量乘法下是封闭的。'
- en: If [![](img/8d92b7e1-bbfb-4388-a191-0e954364794b.png)], then their sum is [![](img/cda6b403-b85a-4810-8de1-a32ec98b2afb.png)],
    where the result is also a subspace of *V*.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 [![](img/8d92b7e1-bbfb-4388-a191-0e954364794b.png)]，那么它们的和是 [![](img/cda6b403-b85a-4810-8de1-a32ec98b2afb.png)]，其中结果也是
    *V* 的子空间。
- en: 'The dimension of the sum [![](img/b464bbc9-fca3-4bce-b0ed-041fc6ba0dab.png)] is
    as follows:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 和的维度 [![](img/b464bbc9-fca3-4bce-b0ed-041fc6ba0dab.png)] 如下所示：
- en: '![](img/f60e2d10-8138-4538-bc8f-68ed61411b04.png)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
  zh: '[![](img/f60e2d10-8138-4538-bc8f-68ed61411b04.png)]。'
- en: Linear maps
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 线性映射
- en: 'A linear map is a function [![](img/ac0809fa-111a-40d8-b331-d7157fdd43b3.png)],
    where *V* and *W* are both vector spaces. They must satisfy the following criteria:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 线性映射是一个函数 [![](img/ac0809fa-111a-40d8-b331-d7157fdd43b3.png)]，其中 *V* 和 *W* 都是向量空间。它们必须满足以下条件：
- en: '[![](img/e1a8d556-6c13-4aee-896d-0b3ed210e527.png)], for all [![](img/36462293-378b-48df-928f-ad0affdb936e.png)]'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[![](img/e1a8d556-6c13-4aee-896d-0b3ed210e527.png)]，对于所有 [![](img/36462293-378b-48df-928f-ad0affdb936e.png)]。'
- en: '[![](img/fd7d3f66-580f-4603-84dc-b46f1ffec174.png)], for all ![](img/9f555bb5-8a65-46e2-99b2-e42246724dde.png) and ![](img/72e1df16-deb3-4998-afe5-0d497cd2d20f.png)'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[![](img/fd7d3f66-580f-4603-84dc-b46f1ffec174.png)]，对于所有的 ![](img/9f555bb5-8a65-46e2-99b2-e42246724dde.png)
    和 ![](img/72e1df16-deb3-4998-afe5-0d497cd2d20f.png)'
- en: Linear maps tend to preserve the properties of vector spaces under addition
    and scalar multiplication. A linear map is called a **homomorphism of vector spaces;** however,
    if the homomorphism is invertible (where the inverse is a homomorphism), then
    we call the mapping an **isomorphism**.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 线性映射通常会保持向量空间在加法和数乘下的性质。一个线性映射被称为 **向量空间同态**；然而，如果这个同态是可逆的（其中的逆映射也是同态），那么我们称这个映射为
    **同构**。
- en: When *V* and *W* are isomorphic, we denote this as [![](img/26027ade-7a86-45e5-bb09-ac388bb121c9.png)],
    and they both have the same algebraic structure.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 当 *V* 和 *W* 是同构时，我们表示为 [![](img/26027ade-7a86-45e5-bb09-ac388bb121c9.png)]，并且它们具有相同的代数结构。
- en: 'If *V* and *W* are vector spaces in ![](img/910e77b1-f616-4036-bada-4c99ea52bede.png),
    and [![](img/09622b11-f715-4c5e-a913-ef23d82cd630.png)], then it is called a **natural
    isomorphism**. We write this as follows:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 *V* 和 *W* 是 ![](img/910e77b1-f616-4036-bada-4c99ea52bede.png) 中的向量空间，且 [![](img/09622b11-f715-4c5e-a913-ef23d82cd630.png)]，那么它被称为
    **自然同构**。我们可以写作：
- en: '![](img/22fa3783-7c2e-49c3-86ca-981bb4223707.png)'
  id: totrans-261
  prefs: []
  type: TYPE_IMG
  zh: '![](img/22fa3783-7c2e-49c3-86ca-981bb4223707.png)'
- en: Here, [![](img/601b901c-1bb0-46fa-8917-68127c269361.png)] and [![](img/4d96e1bb-bd16-47aa-83ef-6f74d21eb605.png)] are
    the bases of *V* and *W*. Using the preceding equation, we can see that [![](img/34f9d116-e22a-4fb1-b265-f392c2ce11a7.png)],
    which tells us that ![](img/67ebcbe5-26df-4898-90db-b048a6ff8448.png) is an isomorphism.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，[![](img/601b901c-1bb0-46fa-8917-68127c269361.png)] 和 [![](img/4d96e1bb-bd16-47aa-83ef-6f74d21eb605.png)]
    是 *V* 和 *W* 的基。使用前面的方程，我们可以看到 [![](img/34f9d116-e22a-4fb1-b265-f392c2ce11a7.png)]，这告诉我们
    ![](img/67ebcbe5-26df-4898-90db-b048a6ff8448.png) 是一个同构。
- en: 'Let''s take the same vector spaces *V* and *W* as before, with bases [![](img/601b901c-1bb0-46fa-8917-68127c269361.png)] and
    [![](img/12bd3b39-0d26-4da0-9d90-9cc966fe50d2.png)] respectively. We know that [![](img/ac0809fa-111a-40d8-b331-d7157fdd43b3.png)] is
    a linear map, and the matrix *T* that has entries *A[ij]*, where [![](img/e0df65fc-46d3-428d-9a8a-102f64731a6d.png)] and
    [![](img/6774c8d6-2f4f-4648-a039-903a08738ab9.png)] can be defined as follows:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们再次使用相同的向量空间 *V* 和 *W*，它们的基分别为 [![](img/601b901c-1bb0-46fa-8917-68127c269361.png)]
    和 [![](img/12bd3b39-0d26-4da0-9d90-9cc966fe50d2.png)]。我们知道 [![](img/ac0809fa-111a-40d8-b331-d7157fdd43b3.png)]
    是一个线性映射，矩阵 *T* 的元素是 *A[ij]*，其中 [![](img/e0df65fc-46d3-428d-9a8a-102f64731a6d.png)]
    和 [![](img/6774c8d6-2f4f-4648-a039-903a08738ab9.png)] 可以定义如下：
- en: '![](img/7cda3d08-be4c-413c-b1ff-60d1f1b9780f.png).'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/7cda3d08-be4c-413c-b1ff-60d1f1b9780f.png)。'
- en: From our knowledge of matrices, we should know that the *j^(th)* column of A contains
    *Tv[j]* in the basis of *W*.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们对矩阵的了解，我们应该知道 A 的 *j^(th)* 列包含 *Tv[j]*，这是在 *W* 的基下的表示。
- en: Thus, [![](img/4d5d4c14-13fc-4851-b71f-e678d1f5074e.png)] produces a linear
    map [![](img/c358e717-1517-46e6-ad53-d3feed59270f.png)], which we write as [![](img/6865cab1-d211-4b93-8a1a-615255d165b2.png)].
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，[![](img/4d5d4c14-13fc-4851-b71f-e678d1f5074e.png)] 生成了一个线性映射 [![](img/c358e717-1517-46e6-ad53-d3feed59270f.png)]，我们可以写作
    [![](img/6865cab1-d211-4b93-8a1a-615255d165b2.png)]。
- en: Image and kernel
  id: totrans-267
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图像与核
- en: 'When dealing with linear mappings, we will often encounter two important terms:
    the image and the kernel, both of which are vector subspaces with rather important
    properties.'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理线性映射时，我们常常会遇到两个重要的术语：图像和核，它们都是具有非常重要性质的向量子空间。
- en: 'The **kernel** (sometimes called the **null space**) is 0 (the zero vector)
    and is produced by a linear map, as follows:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '**核**（有时称为 **零空间**）是 0（零向量），并且由线性映射生成，定义如下：'
- en: '![](img/09bdec99-0281-4c85-ac22-23a61bf2b888.png)'
  id: totrans-270
  prefs: []
  type: TYPE_IMG
  zh: '![](img/09bdec99-0281-4c85-ac22-23a61bf2b888.png)'
- en: 'And the **image** (sometimes called the **range**) of T is defined as follows:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '**图像**（有时称为 **值域**）的定义如下：'
- en: '![](img/79f69b4a-54ec-4660-a8fc-7941a335376d.png) such that ![](img/84c1e82c-9ade-4597-8e3f-01c258a99038.png).'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/79f69b4a-54ec-4660-a8fc-7941a335376d.png) 使得 ![](img/84c1e82c-9ade-4597-8e3f-01c258a99038.png)。'
- en: '*V* and *W* are also sometimes known as the **domain** and **codomain** of
    *T*.'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '*V* 和 *W* 有时也被称为 *T* 的 **定义域** 和 **值域**。'
- en: It is best to think of the kernel as a linear mapping that maps the vectors [![](img/7fb41e44-9879-45ab-9014-041563a056a1.png)] to
    [![](img/03d14613-91ca-452a-be46-a829033a023f.png)]. The image, however, is the
    set of all possible linear combinations of ![](img/f57a5c66-6e0e-440c-98e6-8de3fad7c04e.png) that
    can be mapped to the set of vectors [![](img/07b20ab5-840d-4c18-b6ae-6d3ce53df6ad.png)].
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 最好将核视为一个线性映射，它将向量 [![](img/7fb41e44-9879-45ab-9014-041563a056a1.png)] 映射到 [![](img/03d14613-91ca-452a-be46-a829033a023f.png)]。然而，像是图像，是所有可能的线性组合的集合，![](img/f57a5c66-6e0e-440c-98e6-8de3fad7c04e.png)
    可以被映射到向量集合 [![](img/07b20ab5-840d-4c18-b6ae-6d3ce53df6ad.png)]。
- en: 'The **Rank-Nullity theorem** (sometimes referred to as the **fundamental theorem
    of linear mappings**) states that given two vector spaces *V* and *W* and a linear
    mapping [![](img/c1fc64ab-aeaa-4265-bf37-e1f82c113979.png)], the following will
    remain true:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '**秩-零空间定理**（有时称为**线性映射的基本定理**）指出，给定两个向量空间 *V* 和 *W* 以及一个线性映射 [![](img/c1fc64ab-aeaa-4265-bf37-e1f82c113979.png)]，以下内容始终成立：'
- en: '![](img/6fc2d842-a5e5-4b4b-86f4-d591b8978768.png).'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/6fc2d842-a5e5-4b4b-86f4-d591b8978768.png)。'
- en: Metric space and normed space
  id: totrans-277
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 度量空间和范数空间
- en: Metrics help define the concept of distance in Euclidean space (denoted by ![](img/b7bcefa4-b4a6-4848-8a71-a5d63b1ecf70.png)). Metric
    spaces, however, needn't always be vector spaces. We use them because they allow
    us to define limits for objects besides real numbers.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 度量帮助定义欧几里得空间（用 ![](img/b7bcefa4-b4a6-4848-8a71-a5d63b1ecf70.png) 表示）中的距离概念。然而，度量空间不一定总是向量空间。我们之所以使用它们，是因为它们使我们能够为除了实数以外的对象定义极限。
- en: So far, we have been dealing with vectors, but what we don't yet know is how
    to calculate the length of a vector or the distance between two or more vectors,
    as well as the angle between two vectors, and thus the concept of orthogonality
    (perpendicularity). This is where Euclidean spaces come in handy. In fact, they
    are the fundamental space of geometry. This may seem rather trivial at the moment,
    but their importance will become more apparent to you as we get further on in
    the book.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在处理向量，但我们尚不清楚如何计算一个向量的长度，或计算两个或多个向量之间的距离，以及它们之间的角度，因此也涉及正交（垂直）的概念。这时，欧几里得空间就派上用场了。事实上，它们是几何学的基本空间。现在看起来这可能显得有些琐碎，但随着我们进一步深入，本书会让你更加清楚它们的重要性。
- en: <q>In Euclidean space, we tend to refer to vectors as points. </q>
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: <q>在欧几里得空间中，我们通常将向量称为点。</q>
- en: 'A metric on a set *S* is defined as a function ![](img/6f786cc5-9264-4891-a248-778807493a47.png) and
    satisfies the following criteria:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 集合 *S* 上的度量被定义为一个函数 ![](img/6f786cc5-9264-4891-a248-778807493a47.png)，并满足以下标准：
- en: '[![](img/8b8bb6a5-d500-45b4-ab76-6c08e4480d65.png)], and when [![](img/112dca43-e1ca-4662-9ae2-e384dfef930d.png)] then [![](img/45075729-42e3-4fc0-b53a-63ec239465fd.png)]'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[![](img/8b8bb6a5-d500-45b4-ab76-6c08e4480d65.png)]，当 [![](img/112dca43-e1ca-4662-9ae2-e384dfef930d.png)] 时 [![](img/45075729-42e3-4fc0-b53a-63ec239465fd.png)]'
- en: '[![](img/331b5c2e-39e4-4584-b838-0cdff3ab4323.png)]'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[![](img/331b5c2e-39e4-4584-b838-0cdff3ab4323.png)]'
- en: '[![](img/52f95b13-d6af-4ed9-a372-42e71b11508a.png)] (known as the **triangle
    inequality**)'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[![](img/52f95b13-d6af-4ed9-a372-42e71b11508a.png)]（称为**三角不等式**）'
- en: For all [![](img/fb6600a3-ac68-4c0c-8740-f92106e6bff5.png)].
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 对所有 [![](img/fb6600a3-ac68-4c0c-8740-f92106e6bff5.png)]。
- en: That's all well and good, but how exactly do we calculate distance?
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 这些都很好，但我们到底该如何计算距离呢？
- en: 'Let''s suppose we have two points, [![](img/e6b07452-f8d1-424c-a80d-7365c8467686.png)] and [![](img/dc41fe2e-6d5c-422a-8fe3-0e90c22efb13.png)];
    then, the distance between them can be calculated as follows:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有两个点，[![](img/e6b07452-f8d1-424c-a80d-7365c8467686.png)] 和 [![](img/dc41fe2e-6d5c-422a-8fe3-0e90c22efb13.png)]；那么，它们之间的距离可以如下计算：
- en: '![](img/65b4a10a-7be3-40ad-a9a0-e5b28ef19972.png)'
  id: totrans-288
  prefs: []
  type: TYPE_IMG
  zh: '![](img/65b4a10a-7be3-40ad-a9a0-e5b28ef19972.png)'
- en: 'And we can extend this to find the distance of points in ![](img/93d0f60e-ce6a-4ff9-b140-11ce34ca9ad2.png),
    as follows:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将此扩展到找到 ![](img/93d0f60e-ce6a-4ff9-b140-11ce34ca9ad2.png) 中的点之间的距离，如下所示：
- en: '![](img/298ce5eb-d7eb-480f-97ac-c2519734d4a5.png)'
  id: totrans-290
  prefs: []
  type: TYPE_IMG
  zh: '![](img/298ce5eb-d7eb-480f-97ac-c2519734d4a5.png)'
- en: While metrics help with the notion of distance, norms define the concept of
    length in Euclidean space.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然度量有助于距离的概念，但范数定义了欧几里得空间中长度的概念。
- en: 'A norm on a vector space is a function [![](img/c834d5a8-9576-47b0-a9ae-c1822af7b8e8.png)],
    and satisfies the following conditions:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 向量空间上的范数是一个函数 [![](img/c834d5a8-9576-47b0-a9ae-c1822af7b8e8.png)]，并满足以下条件：
- en: '[![](img/72bc7a6f-2a09-4ba9-bafa-9c695dcd10de.png)], and when ![](img/a03f156f-b86c-4430-b2f3-3811be4bb295.png) then
    [![](img/25c15f48-aae3-4452-9b36-3d9abe6fc113.png)]'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[![](img/72bc7a6f-2a09-4ba9-bafa-9c695dcd10de.png)]，当 ![](img/a03f156f-b86c-4430-b2f3-3811be4bb295.png) 时，[![](img/25c15f48-aae3-4452-9b36-3d9abe6fc113.png)]'
- en: '[![](img/9f86425e-9412-4554-991e-0beea79e92bf.png)]'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[![](img/9f86425e-9412-4554-991e-0beea79e92bf.png)]'
- en: '[![](img/a58c4997-49ac-4e80-8eb4-86efdab0d37f.png)] (also known as the triangle
    inequality)'
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[![](img/a58c4997-49ac-4e80-8eb4-86efdab0d37f.png)] （也称为三角不等式）'
- en: For all [![](img/cab63016-71db-4057-ab15-3703ef992ad9.png)] and [![](img/0f046b15-4f88-4a7b-a403-58bba1534d5b.png)].
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 对所有[![](img/cab63016-71db-4057-ab15-3703ef992ad9.png)] 和 [![](img/0f046b15-4f88-4a7b-a403-58bba1534d5b.png)]。
- en: 'It is important to note that any norm on the vector space creates a distance
    metric on the said vector space, as follows:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，向量空间上的任何范数都会在该向量空间上创建一个距离度量，具体如下所示：
- en: '![](img/6994d830-0dca-4777-be75-49cc53797436.png)'
  id: totrans-298
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6994d830-0dca-4777-be75-49cc53797436.png)'
- en: This satisfies the rules for metrics, telling us that a normed space is also
    a metric space.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 这满足度量的规则，告诉我们范数空间也是度量空间。
- en: 'In general, for our purposes, we will only be concerned with four norms on ![](img/0d75292c-8c3c-4994-ac3c-78a27dd24bac.png),
    as follows:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，对于我们的目的，我们只关心在 ![](img/0d75292c-8c3c-4994-ac3c-78a27dd24bac.png) 上的四种范数，如下所示：
- en: '[![](img/cf34c63d-eda9-4b4c-bb3f-064673f30e83.png)]'
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[![](img/cf34c63d-eda9-4b4c-bb3f-064673f30e83.png)]'
- en: '[![](img/f5ce1683-a04d-47b4-acad-6c74e6b2e768.png)]'
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[![](img/f5ce1683-a04d-47b4-acad-6c74e6b2e768.png)]'
- en: '[![](img/82f4939a-4a81-430f-93e6-ab044683ec6f.png)]'
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[![](img/82f4939a-4a81-430f-93e6-ab044683ec6f.png)]'
- en: '[![](img/7954e61a-5c7b-4e5b-8e0b-dd7a90b03c55.png)] (this applies only if [![](img/93e7929c-5409-4644-be2c-d041a2ebb7ed.png)])'
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[![](img/7954e61a-5c7b-4e5b-8e0b-dd7a90b03c55.png)] （仅当 [![](img/93e7929c-5409-4644-be2c-d041a2ebb7ed.png)]
    时适用）'
- en: If you look carefully at the four norms, you can notice that the 1- and 2-norms
    are versions of the p-norm. The ![](img/ea30e469-f5e2-49af-ab89-7aa947c30178.png)-norm,
    however, is a limit of the p-norm, as p tends to infinity.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细观察这四种范数，你可以注意到1范数和2范数是p范数的特例。然而，![](img/ea30e469-f5e2-49af-ab89-7aa947c30178.png)-范数是p范数的极限，当p趋于无穷大时。
- en: 'Using these definitions, we can define two vectors to be orthogonal if the
    following applies:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些定义，我们可以定义两个向量为正交，如果满足以下条件：
- en: '![](img/c826bdcc-b2bd-4ae8-9bce-6d974fb3159c.png)'
  id: totrans-307
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c826bdcc-b2bd-4ae8-9bce-6d974fb3159c.png)'
- en: Inner product space
  id: totrans-308
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内积空间
- en: 'An inner product on a vector space is a function [![](img/11fa8b10-ff24-4368-b7d8-ce2916a811d6.png)],
    and satisfies the following rules:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 向量空间上的内积是一个函数 [![](img/11fa8b10-ff24-4368-b7d8-ce2916a811d6.png)]，并满足以下规则：
- en: '[![](img/edecd649-b285-42da-95d0-50ef97703613.png)]'
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[![](img/edecd649-b285-42da-95d0-50ef97703613.png)]'
- en: '[![](img/c6897dba-84d1-4113-9a2c-376d7b02c3bf.png)] and [![](img/068f5509-eba5-4b14-9dce-5c73cc7cb6e4.png)]'
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[![](img/c6897dba-84d1-4113-9a2c-376d7b02c3bf.png)] 和 [![](img/068f5509-eba5-4b14-9dce-5c73cc7cb6e4.png)]'
- en: '[![](img/aa9ee405-2b72-4510-8146-801e44f27a2c.png)]'
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[![](img/aa9ee405-2b72-4510-8146-801e44f27a2c.png)]'
- en: For all [![](img/360827c7-e6c8-48a2-b8b9-0d6c7c9c8915.png)] and ![](img/26da689b-7b4c-4897-bfea-5d3e05701f31.png).
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 对所有 [![](img/360827c7-e6c8-48a2-b8b9-0d6c7c9c8915.png)] 和 ![](img/26da689b-7b4c-4897-bfea-5d3e05701f31.png)。
- en: 'It is important to note that any inner product on the vector space creates
    a norm on the said vector space, which we see as follows:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，向量空间上的任何内积都会在该向量空间上创建一个范数，具体如下所示：
- en: '![](img/9f4d1f5a-b9b4-4569-9a97-91b60b372e5c.png)'
  id: totrans-315
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9f4d1f5a-b9b4-4569-9a97-91b60b372e5c.png)'
- en: We can notice from these rules and definitions that all inner product spaces
    are also normed spaces, and therefore also metric spaces.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从这些规则和定义中注意到，所有内积空间也是范数空间，因此也是度量空间。
- en: Another very important concept is orthogonality, which in a nutshell means that
    two vectors are perpendicular to each other (that is, they are at a right angle
    to each other) from Euclidean space.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个非常重要的概念是正交性，简而言之，意味着两个向量彼此垂直（即它们在欧几里得空间中相互成直角）。
- en: Two vectors are orthogonal if their inner product is zero—that is, [![](img/9bfe6457-f3ef-4fa4-8dc3-edd1c2e176a6.png)].
    As a shorthand for perpendicularity, we write [![](img/d93ae4ed-625f-4062-8d2c-d621e791349e.png)].
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 如果两个向量的内积为零——即 [![](img/9bfe6457-f3ef-4fa4-8dc3-edd1c2e176a6.png)]，则这两个向量是正交的。为了简化表示垂直性，我们写作
    [![](img/d93ae4ed-625f-4062-8d2c-d621e791349e.png)]。
- en: Additionally, if the two orthogonal vectors are of unit length—that is, [![](img/65b6d59f-e6d0-47e8-994d-1ebd7b956809.png)],
    then they are called **orthonormal**.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果两个正交向量的长度为单位长度——即 [![](img/65b6d59f-e6d0-47e8-994d-1ebd7b956809.png)]，则它们称为**正交归一**。
- en: 'In general, the inner product in ![](img/94ad46fa-e5a2-4bdd-9200-ecc374b7114c.png) is
    as follows:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，![](img/94ad46fa-e5a2-4bdd-9200-ecc374b7114c.png) 中的内积如下所示：
- en: '![](img/25a6f7b2-28ab-42b3-ba0b-d7abecd25de0.png)'
  id: totrans-321
  prefs: []
  type: TYPE_IMG
  zh: '![](img/25a6f7b2-28ab-42b3-ba0b-d7abecd25de0.png)'
- en: Matrix decompositions
  id: totrans-322
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 矩阵分解
- en: Matrix decompositions are a set of methods that we use to describe matrices
    using more interpretable matrices and give us insight to the matrices' properties.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 矩阵分解是一组方法，我们用它们来描述矩阵，通过更易解释的矩阵给我们提供关于矩阵性质的洞见。
- en: Determinant
  id: totrans-324
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行列式
- en: Earlier, we got a quick glimpse of the determinant of a square 2x2 matrix when
    we wanted to determine whether a square matrix was invertible. The determinant
    is a very important concept in linear algebra and is used frequently in the solving
    of systems of linear equations.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，我们简要地看了一下2x2方阵的行列式，当我们想要判断一个方阵是否可逆时。行列式是线性代数中的一个非常重要的概念，在解线性方程组时经常使用。
- en: '**Note**: The determinant only exists when we have square matrices.'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：只有在我们拥有方阵时，行列式才存在。'
- en: Notationally, the determinant is usually written as either [![](img/0b5d46e7-aab7-404f-9c5a-2a521719a65e.png)] or [![](img/7bcc7667-d12b-4b59-8555-698b7a657630.png)].
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 在符号表示上，行列式通常写作[![](img/0b5d46e7-aab7-404f-9c5a-2a521719a65e.png)]或[![](img/7bcc7667-d12b-4b59-8555-698b7a657630.png)]。
- en: 'Let''s take an arbitrary *n*×*n* matrix A, as follows:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以一个任意的*n*×*n*矩阵A为例，表示如下：
- en: '![](img/fc549b9a-a279-4403-8cf3-d969793bb540.png)'
  id: totrans-329
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fc549b9a-a279-4403-8cf3-d969793bb540.png)'
- en: 'We will also take its determinant, as follows:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将计算它的行列式，具体如下：
- en: '![](img/fd70cd28-87b3-499f-831f-f601aa3060e7.png)'
  id: totrans-331
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fd70cd28-87b3-499f-831f-f601aa3060e7.png)'
- en: The determinant reduces the matrix to a real number (or, in other words, maps
    *A* onto a real number).
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 行列式将矩阵简化为一个实数（换句话说，将*A*映射为一个实数）。
- en: We start by checking if a square matrix is invertible. Let's take a 2x2 matrix,
    and from the earlier definition, we know that the matrix applied to its inverse
    produces the identity matrix. It works no differently than when we multiply *a* with [![](img/12381ce9-b5a4-484d-a30b-398b96719371.png)] (only
    true when [![](img/5d8ed9bc-035b-4b1f-8f4e-2f7c5055d0a9.png)] ), which produces
    1, except with matrices. Therefore, *AA^(-1)* = *I*.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先检查一个方阵是否可逆。让我们以一个2x2的矩阵为例，根据前面的定义，我们知道该矩阵与其逆矩阵相乘会得到单位矩阵。它的原理与我们将*a*与[![](img/12381ce9-b5a4-484d-a30b-398b96719371.png)]相乘时相同（仅在[![](img/5d8ed9bc-035b-4b1f-8f4e-2f7c5055d0a9.png)]为真时），结果为1，唯一的区别是应用在矩阵上。因此，*AA^(-1)*
    = *I*。
- en: 'Let''s go ahead and find the inverse of our matrix, as follows:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续求解我们矩阵的逆矩阵，具体如下：
- en: '![](img/389534d5-c840-4a54-9660-9d435f4bf5eb.png)'
  id: totrans-335
  prefs: []
  type: TYPE_IMG
  zh: '![](img/389534d5-c840-4a54-9660-9d435f4bf5eb.png)'
- en: A is invertible only when [![](img/e692bb68-b0ff-4b7b-833d-11d882613c56.png)],
    and this resulting value is what we call the **determinator**.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: A只有在[![](img/e692bb68-b0ff-4b7b-833d-11d882613c56.png)]时才可逆，这个结果值就是我们所称的**行列式**。
- en: 'Now that we know how to find the determinant in the 2x2 case, let''s move on
    to a 3x3 matrix and find its determinant. It looks like this:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道如何在2x2的情况下找到行列式，让我们继续研究3x3矩阵并求解它的行列式。它的形式如下：
- en: '![](img/dcaacbbd-301c-442c-8df0-943aaa3a4dd1.png)'
  id: totrans-338
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dcaacbbd-301c-442c-8df0-943aaa3a4dd1.png)'
- en: 'This produces the following:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 这会产生以下结果：
- en: '![](img/b34b0f2a-e554-41c0-b9ba-8b6f21a6419d.png)'
  id: totrans-340
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b34b0f2a-e554-41c0-b9ba-8b6f21a6419d.png)'
- en: I know that probably looks more intimidating, but it's really not. Take a moment
    to look carefully at what we did and how this would work for a larger *n*×*n* matrix.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道这看起来可能更让人畏惧，但实际上并不是这样的。花点时间仔细看看我们做了什么，以及这对于更大的*n*×*n*矩阵是如何工作的。
- en: 'If we have an *n*×*n* matrix and if it can be triangularly factorized (upper
    or lower), then its determinant will be the product of all the pivot values. For
    the sake of simplicity, we will represent all triangularly factorizable matrices
    with *T*. Therefore, the determinant can be written like so:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们有一个*n*×*n*矩阵，并且它可以被三角分解（上三角或下三角），那么它的行列式将是所有主元素值的乘积。为了简单起见，我们将所有可以三角分解的矩阵表示为*T*。因此，行列式可以这样表示：
- en: '![](img/da4fdfad-6530-4e3d-a1b0-890ab28ddc31.png)'
  id: totrans-343
  prefs: []
  type: TYPE_IMG
  zh: '![](img/da4fdfad-6530-4e3d-a1b0-890ab28ddc31.png)'
- en: Looking at the preceding 3×3 matrix example, I'm sure you've figured out that
    computing the determinant for matrices where *n > 3* is quite a lengthy process.
    Luckily, there is a way in which we can simplify the calculation, and this is
    where the Laplace expansion comes to the rescue.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 看着前面的3×3矩阵示例，我敢肯定你已经明白，对于*n > 3*的矩阵，计算行列式是一个相当冗长的过程。幸运的是，有一种方法可以简化计算，这就是拉普拉斯展开式的作用。
- en: When we want to find the determinant of an n×n matrix, the Laplace expansion
    finds the determinant of (*n*×*1*)×(*n*×*1*) matrices and does so repeatedly until
    we get to 2×2 matrices. In general, we can calculate the determinant of an n×n matrix
    using 2×2 matrices.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们想找到一个n×n矩阵的行列式时，拉普拉斯展开通过对(*n*×*1*)×(*n*×*1*)矩阵的展开来计算行列式，并重复这一过程，直到得到2×2矩阵。一般来说，我们可以使用2×2矩阵来计算n×n矩阵的行列式。
- en: 'Let''s again take an *n*-dimensional square matrix, where ![](img/71135850-46ac-4950-b5f2-fec0700bb77c.png).
    We then expand for all [![](img/292e75e4-2d2c-4510-89bd-edf85b8ea306.png)], as
    follows:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再考虑一个*n*维方阵，其中 ![](img/71135850-46ac-4950-b5f2-fec0700bb77c.png)。然后，我们对所有 [![](img/292e75e4-2d2c-4510-89bd-edf85b8ea306.png)]进行展开，如下所示：
- en: 'Expansion along row *i*:'
  id: totrans-347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 沿第*i*行展开：
- en: '![](img/740c3339-ac7b-43e0-b951-b5a16a378603.png)'
  id: totrans-348
  prefs: []
  type: TYPE_IMG
  zh: '![](img/740c3339-ac7b-43e0-b951-b5a16a378603.png)'
- en: 'Expansion along row *j*:'
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 沿第*j*行展开：
- en: '![](img/3e2ee856-f224-4ed0-8a26-d0ba52f6e264.png)'
  id: totrans-350
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3e2ee856-f224-4ed0-8a26-d0ba52f6e264.png)'
- en: And [![](img/7c55b884-5d5a-423d-96f4-b24ed9d40d33.png)] is a sub-matrix of ![](img/d3e70cf9-6931-454a-a598-aedda811b7ce.png),
    which we get after removing row *i* and column *j*.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 并且 [![](img/7c55b884-5d5a-423d-96f4-b24ed9d40d33.png)] 是 ![](img/d3e70cf9-6931-454a-a598-aedda811b7ce.png)的一个子矩阵，它是通过去掉第*i*行和第*j*列得到的。
- en: 'For example, we have a 3×3 matrix, as follows:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们有一个3×3矩阵，如下所示：
- en: '[![](img/fdfc3731-cb32-4bba-9f3a-4fb2d67d3fa0.png)]'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: '[![](img/fdfc3731-cb32-4bba-9f3a-4fb2d67d3fa0.png)]'
- en: 'We want to find its determinant using the Laplace expansion along the first
    row. This results in the following:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望通过沿第一行应用拉普拉斯展开来找到它的行列式。结果如下：
- en: '![](img/8e2a7584-c66f-447b-bcb9-e52b961806c2.png)'
  id: totrans-355
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8e2a7584-c66f-447b-bcb9-e52b961806c2.png)'
- en: 'We can now use the preceding equation from the 2×2 case and calculate the determinant
    for *A*, as follows:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用前面2×2情况的公式，计算 *A* 的行列式，如下所示：
- en: '![](img/d2636f71-4cb6-4e75-93a3-7dde21e0a3ab.png).'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/d2636f71-4cb6-4e75-93a3-7dde21e0a3ab.png)。'
- en: 'Here are some of the very important properties of determinants that are important
    to know:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些非常重要的行列式性质，了解这些性质非常重要：
- en: '[![](img/16f6d3c7-74ba-43bf-92f7-2f16b8e8579b.png)]'
  id: totrans-359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[![](img/16f6d3c7-74ba-43bf-92f7-2f16b8e8579b.png)]'
- en: '[![](img/e3a76aee-a665-4fed-8547-9d627251a41f.png)]'
  id: totrans-360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[![](img/e3a76aee-a665-4fed-8547-9d627251a41f.png)]'
- en: '[![](img/d74c7ad1-a991-49d4-a5a4-c6c4fe85a941.png)]'
  id: totrans-361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[![](img/d74c7ad1-a991-49d4-a5a4-c6c4fe85a941.png)]'
- en: '[![](img/e9868c92-8b5d-4db8-ba77-71ec39270d0b.png)]'
  id: totrans-362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[![](img/e9868c92-8b5d-4db8-ba77-71ec39270d0b.png)]'
- en: '[![](img/e8510fbc-b008-4249-b409-1e1ff4453953.png)]'
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[![](img/e8510fbc-b008-4249-b409-1e1ff4453953.png)]'
- en: There is one other additional property of the determinant, and it is that we
    can use it to find the volume of an object in ![](img/8ef7980e-5e44-44fc-a825-f5a9b7af77ce.png) whose
    vertices are formed by the column vectors in the matrix.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 行列式还有一个附加性质，即我们可以使用它来计算一个位于 ![](img/8ef7980e-5e44-44fc-a825-f5a9b7af77ce.png)中，顶点由矩阵中的列向量构成的物体的体积。
- en: 'As an example, let''s take a parallelogram in ![](img/cb11cc18-bb9b-47d9-9429-042daa54d451.png) with
    the vectors [![](img/d639af5c-9a15-4fac-ac1a-aaba700f41b2.png)] and [![](img/0264b501-74e2-4b51-b168-40bac0458137.png)].
    By taking the determinant of the 2×2 matrix, we find the area of the shape (we
    can only find the volume for objects in ![](img/cdb89bea-609f-4c72-9b15-180eecd91e80.png) or
    higher), as follows:'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个例子，我们来考虑一个平行四边形，位于 ![](img/cb11cc18-bb9b-47d9-9429-042daa54d451.png)，它由向量 [![](img/d639af5c-9a15-4fac-ac1a-aaba700f41b2.png)]
    和 [![](img/0264b501-74e2-4b51-b168-40bac0458137.png)] 组成。通过计算这个2×2矩阵的行列式，我们可以得到该形状的面积（对于高于二维的物体，我们只能找到体积），如下所示：
- en: '![](img/364c1723-9301-4179-976d-be8f35b9d566.png)'
  id: totrans-366
  prefs: []
  type: TYPE_IMG
  zh: '![](img/364c1723-9301-4179-976d-be8f35b9d566.png)'
- en: You are welcome to try it for any 3×3 matrix for yourselves as practice.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎你自己动手尝试对任何3×3矩阵进行练习。
- en: Eigenvalues and eigenvectors
  id: totrans-368
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 特征值和特征向量
- en: 'Let''s imagine an arbitrary real n×n matrix, A. It is very possible that when
    we apply this matrix to some vector, they are scaled by a constant value. If this
    is the case, we say that the nonzero ![](img/c05b0be4-1382-4acb-b4bc-e5c2684a8f53.png)-dimensional vector
    is an eigenvector of *A*, and it corresponds to an eigenvalue λ. We write this
    as follows:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个任意的实数n×n矩阵A。当我们将此矩阵应用于某个向量时，很可能它们被一个常数值缩放。如果是这种情况，我们说该非零的 ![](img/c05b0be4-1382-4acb-b4bc-e5c2684a8f53.png)维向量是*A*的特征向量，并且它对应于特征值λ。我们可以表示为：
- en: '![](img/e06e0f16-b9c4-43ec-beec-7324ed13a11d.png)'
  id: totrans-370
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e06e0f16-b9c4-43ec-beec-7324ed13a11d.png)'
- en: '**Note**: The zero vector (0) cannot be an eigenvector of *A*, since *A*0 =
    0 = λ0 for all λ.'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：零向量（0）不能是*A*的特征向量，因为 *A*0 = 0 = λ0 对所有λ都成立。'
- en: 'Let''s consider again a matrix *A* that has an eigenvector **x** and a corresponding
    eigenvalue λ. Then, the following rules will apply:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次考虑一个矩阵 *A*，它有一个特征向量 **x** 和相应的特征值 λ。那么，以下规则将适用：
- en: If we have a matrix *A* and it has been shifted from its current position to [![](img/d338804b-269b-4add-bc22-baccc681304c.png)],
    then it has the eigenvector **x** and the corresponding eigenvalue [![](img/7a3942f7-0d59-4f5c-aded-9de201f01fa7.png)],
    for all [![](img/866b4328-a0bd-4c19-9f44-71ded4428307.png)], so that [![](img/54b269b0-a6ac-49eb-840c-5dc60ea59105.png)].
  id: totrans-373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们有一个矩阵 *A*，并且它已从当前位置移动到 [![](img/d338804b-269b-4add-bc22-baccc681304c.png)]，那么它有特征向量
    **x** 和对应的特征值 [![](img/7a3942f7-0d59-4f5c-aded-9de201f01fa7.png)]，对于所有 [![](img/866b4328-a0bd-4c19-9f44-71ded4428307.png)]，使得
    [![](img/54b269b0-a6ac-49eb-840c-5dc60ea59105.png)]。
- en: If the matrix *A* is invertible, then **x** is also an eigenvector of the inverse
    of the matrix, [![](img/92fb6002-13bb-400b-a9ef-a95ab7c53723.png)], with the corresponding
    eigenvalue [![](img/1ad20846-524a-423b-8aab-e1b2c4d2bb04.png)].
  id: totrans-374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果矩阵 *A* 可逆，那么 **x** 也是矩阵的逆的特征向量，[![](img/92fb6002-13bb-400b-a9ef-a95ab7c53723.png)]，对应的特征值为
    [![](img/1ad20846-524a-423b-8aab-e1b2c4d2bb04.png)]。
- en: '[![](img/034a9f84-edde-414f-bf6f-1be21c06138e.png)] for any [![](img/e22e2d20-7d9f-434d-acc9-157ed4de652c.png)].'
  id: totrans-375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[![](img/034a9f84-edde-414f-bf6f-1be21c06138e.png)] 对任何 [![](img/e22e2d20-7d9f-434d-acc9-157ed4de652c.png)]。'
- en: We know from earlier in the chapter that whenever we multiply a matrix and a
    vector, the direction of the vector is changed, but this is not the case with
    eigenvectors. They are in the same direction as *A*, and thus **x** remains unchanged.
    The eigenvalue, being a scalar value, tells us whether the eigenvector is being
    scaled, and if so, how much, as well as if the direction of the vector has changed.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从本章之前知道，每当我们将一个矩阵与一个向量相乘时，向量的方向会发生变化，但特征向量并非如此。它们与 *A* 的方向相同，因此 **x** 保持不变。特征值作为标量值，告诉我们特征向量是否被缩放，如果是，缩放了多少，以及向量的方向是否发生了变化。
- en: 'Another very fascinating property the determinant has is that it is equivalent
    to the product of the eigenvalues of the matrix, and it is written as follows:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个非常有趣的性质是，行列式等于矩阵的特征值的乘积，可以写成如下形式：
- en: '![](img/5f0dc73e-df42-4b6f-8403-e51d4e14fb74.png)'
  id: totrans-378
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5f0dc73e-df42-4b6f-8403-e51d4e14fb74.png)'
- en: But this isn't the only relation that the determinant has with eigenvalues.
    We can rewrite ![](img/e06e0f16-b9c4-43ec-beec-7324ed13a11d.png) in the form[![](img/54f8feb6-24e6-40ca-a150-a81609a01707.png)].
    And since this is equal to zero, this means it is a non-invertible matrix, and
    therefore its determinant too must be equal to zero. Using this, we can use the
    determinant to find the eigenvalues. Let's see how.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 但这并不是行列式与特征值之间唯一的关系。我们可以将 ![](img/e06e0f16-b9c4-43ec-beec-7324ed13a11d.png)
    重写成 [![](img/54f8feb6-24e6-40ca-a150-a81609a01707.png)]。由于这等于零，这意味着它是一个不可逆矩阵，因此它的行列式也必须等于零。利用这一点，我们可以通过行列式来求特征值。让我们看看如何做到这一点。
- en: 'Suppose we have [![](img/8b38bf6a-c7d7-4140-82e5-d4448a14148a.png)]. Then,
    its determinant is shown as follows:'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有 [![](img/8b38bf6a-c7d7-4140-82e5-d4448a14148a.png)]。然后，它的行列式表示如下：
- en: '![](img/c8f73db5-d21e-4319-8523-232236f34680.png)'
  id: totrans-381
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c8f73db5-d21e-4319-8523-232236f34680.png)'
- en: 'We can rewrite this as the following quadratic equation:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将其重写为以下二次方程：
- en: '![](img/b69adf5d-20df-41b5-a9a5-178ac85c62f0.png)'
  id: totrans-383
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b69adf5d-20df-41b5-a9a5-178ac85c62f0.png)'
- en: We know that the quadratic equation will give us both the eigenvalues [![](img/cc10d4f1-77ba-4e34-b505-8163033da02c.png)].
    So, we plug our values into the quadratic formula and get our roots.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道，二次方程会给出两个特征值 [![](img/cc10d4f1-77ba-4e34-b505-8163033da02c.png)]。因此，我们将数值代入二次公式并得到根。
- en: Another interesting property is that when we have triangular matrices such as
    the ones we found earlier in this chapter, their eigenvalues are the pivot values.
    So, if we want to find the determinant of a triangular matrix, then all we have
    to do is find the product of all the entries along the diagonal.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有趣的性质是，当我们遇到如本章前面找到的三角矩阵时，它们的特征值就是主元值。因此，如果我们想找到一个三角矩阵的行列式，那么我们所要做的就是找到对角线上的所有元素的乘积。
- en: Trace
  id: totrans-386
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 迹
- en: 'Given an *n*×*n* matrix *A*, the sum of all the entries on the diagonal is
    called the **trace**. We write it like so:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个 *n*×*n* 矩阵 *A*，所有对角线元素的和称为 **迹**。我们写成这样：
- en: '![](img/364d9cba-7c3e-47b9-aa4c-63463575bf6b.png)'
  id: totrans-388
  prefs: []
  type: TYPE_IMG
  zh: '![](img/364d9cba-7c3e-47b9-aa4c-63463575bf6b.png)'
- en: 'The following are four important properties of the trace:'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是迹的四个重要性质：
- en: '[![](img/f55f233e-e4eb-47ae-9e2f-90995eafbea4.png)]'
  id: totrans-390
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[![](img/f55f233e-e4eb-47ae-9e2f-90995eafbea4.png)]'
- en: '[![](img/d913abcb-54c7-4539-9e57-732fab57c84c.png)]'
  id: totrans-391
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[![](img/d913abcb-54c7-4539-9e57-732fab57c84c.png)]'
- en: '[![](img/d225bee2-8f51-4b81-a891-eb1c01968470.png)]'
  id: totrans-392
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[![](img/d225bee2-8f51-4b81-a891-eb1c01968470.png)]'
- en: '[![](img/ed5a77f4-db75-4421-9830-c6c19b4ce1c6.png)]'
  id: totrans-393
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[![](img/ed5a77f4-db75-4421-9830-c6c19b4ce1c6.png)]'
- en: 'A very interesting property of the trace is that it is equal to the sum of
    its eigenvalues, so that the following applies:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 迹的一个非常有趣的性质是，它等于其特征值的和，因此以下关系成立：
- en: '![](img/6b6d57a8-b831-442e-8ed4-f3555b173032.png)'
  id: totrans-395
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6b6d57a8-b831-442e-8ed4-f3555b173032.png)'
- en: Orthogonal matrices
  id: totrans-396
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 正交矩阵
- en: The concept of orthogonality arises frequently in linear algebra. It's really
    just a fancy word for perpendicularity, except it goes beyond two dimensions or
    a pair of vectors.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 正交性的概念在线性代数中经常出现。它其实只是“垂直”的一种更花哨的说法，只不过它不仅仅局限于二维或一对向量。
- en: 'But to get an understanding, let''s start with two column vectors [![](img/d048e20b-765d-4b6f-8f31-cd58d6b3d93c.png)].
    If they are orthogonal, then the following holds:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解这一点，我们从两个列向量开始 [![](img/d048e20b-765d-4b6f-8f31-cd58d6b3d93c.png)]。如果它们是正交的，那么以下关系成立：
- en: '![](img/fbc99477-3307-41b6-9603-98bb8dd7cf1c.png).'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/fbc99477-3307-41b6-9603-98bb8dd7cf1c.png)。'
- en: 'Orthogonal matrices are a special kind of matrix where the columns are pairwise
    orthonormal. What this means is that we have a matrix [![](img/7d7de76e-8356-43d4-88db-62dedaeb9347.png)]with the
    following property:'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 正交矩阵是一种特殊的矩阵，其中列是成对正交标准化的。这意味着我们有一个矩阵 [![](img/7d7de76e-8356-43d4-88db-62dedaeb9347.png)]，它具有以下特性：
- en: '![](img/e795f258-7b2f-461b-8bf9-052485c05a31.png)'
  id: totrans-401
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e795f258-7b2f-461b-8bf9-052485c05a31.png)'
- en: Then, we can deduce that [![](img/85df4b42-b4b9-4739-a142-15905a07a1d0.png)] (that
    is, the transpose of *Q* is also the inverse of *Q*).
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以推导出 [![](img/85df4b42-b4b9-4739-a142-15905a07a1d0.png)] （即 *Q* 的转置也是
    *Q* 的逆矩阵）。
- en: As with other types of matrices, orthogonal matrices have some special properties.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他类型的矩阵一样，正交矩阵也有一些特殊的性质。
- en: 'Firstly, they preserve inner products, so that the following applies:'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，它们保持内积，因此以下关系成立：
- en: '![](img/4fbd99a0-b27c-42e0-bb75-467eafd134ac.png).'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/4fbd99a0-b27c-42e0-bb75-467eafd134ac.png)。'
- en: 'This brings us to the second property, which states that 2-norms are preserved
    for orthogonal matrices, which we see as follows:'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 这引出了第二个特性，即正交矩阵保持 2-范数，如下所示：
- en: '![](img/a378af5b-63c5-47c5-b9b5-220bd5fddea5.png)'
  id: totrans-407
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a378af5b-63c5-47c5-b9b5-220bd5fddea5.png)'
- en: When multiplying by orthogonal matrices, you can think of it as a transformation
    that preserves length, but the vector may be rotated about the origin by some
    degree.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 当与正交矩阵相乘时，可以将其视为一种保持长度的变换，但向量可能会围绕原点旋转一定角度。
- en: The most well-known orthogonal matrix that is also orthonormal is a special
    matrix we have dealt with a few times already. It is the identity matrix *I*,
    and since it represents a unit of length in the direction of axes, we generally
    refer to it as the standard basis.
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 最著名的正交矩阵，也是标准化的正交矩阵，是我们已经处理过几次的特殊矩阵。它就是单位矩阵 *I*，由于它表示轴方向上的单位长度，我们通常称之为标准基。
- en: Diagonalization and symmetric matrices
  id: totrans-410
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对角化和对称矩阵
- en: 'Let''s suppose we have a matrix [![](img/d8bc4a80-34a1-4747-bf06-08764233ed32.png)] that
    has ![](img/551f57d1-22cf-4fd0-9ca6-c835a358402c.png) eigenvectors. We put these
    vectors into a matrix *X* that is invertible and multiply the two matrices. This
    gives us the following:'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个矩阵 [![](img/d8bc4a80-34a1-4747-bf06-08764233ed32.png)]，它具有 ![](img/551f57d1-22cf-4fd0-9ca6-c835a358402c.png) 特征向量。我们将这些向量放入一个可逆矩阵 *X* 中并将两个矩阵相乘，结果如下：
- en: '![](img/52b2fc21-cdc0-4d05-87d8-3e9ec34e8f84.png)'
  id: totrans-412
  prefs: []
  type: TYPE_IMG
  zh: '![](img/52b2fc21-cdc0-4d05-87d8-3e9ec34e8f84.png)'
- en: We know from ![](img/7f206c31-9575-42b3-ab95-0284067d480c.png) that when dealing
    with matrices, this becomes ![](img/e8874b7e-1006-4644-8838-c68a2d2d573f.png),
    where [![](img/5d66989d-b7b4-409d-a682-045e3f9b0998.png)] and each *x[i]* has
    a unique λ*[i]*. Therefore, [![](img/029ad3b2-e319-4292-b49c-9d0cb059f951.png)].
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从 ![](img/7f206c31-9575-42b3-ab95-0284067d480c.png) 知道，当处理矩阵时，这变成了 ![](img/e8874b7e-1006-4644-8838-c68a2d2d573f.png)，其中 [![](img/5d66989d-b7b4-409d-a682-045e3f9b0998.png)] 和每个
    *x[i]* 都有唯一的 λ*[i]*。因此， [![](img/029ad3b2-e319-4292-b49c-9d0cb059f951.png)]。
- en: Let's move on to symmetric matrices. These are special matrices that, when transposed,
    are the same as the original, implying that [![](img/678972cc-c1f8-4a32-9573-ae1a26083511.png)] and
    for all [![](img/a0a6af0d-8910-4371-b3f3-31a7b0bcab0d.png)], [![](img/023b2d00-ee92-4a7e-8dcb-972b27e910d1.png)].
    This may seem rather trivial, but its implications are rather strong.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续讨论对称矩阵。这些是特殊的矩阵，当转置后，它们与原矩阵相同，意味着 [![](img/678972cc-c1f8-4a32-9573-ae1a26083511.png)]，并且对所有 [![](img/a0a6af0d-8910-4371-b3f3-31a7b0bcab0d.png)]，有 [![](img/023b2d00-ee92-4a7e-8dcb-972b27e910d1.png)]。这看起来可能有些微不足道，但它的含义却相当深远。
- en: The spectral theorem states that if a matrix ![](img/d8bc4a80-34a1-4747-bf06-08764233ed32.png) is
    a symmetric matrix, then there exists an orthonormal basis for ![](img/879be859-9317-4137-9128-f37eb55dedad.png),
    which contains the eigenvectors of A.
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 谱定理指出，如果一个矩阵 ![](img/d8bc4a80-34a1-4747-bf06-08764233ed32.png) 是对称矩阵，则存在一个正交标准基用于
    ![](img/879be859-9317-4137-9128-f37eb55dedad.png)，其中包含矩阵 A 的特征向量。
- en: This theorem is important to us because it allows us to factorize symmetric
    matrices. We call this **spectral decomposition** (also sometimes referred to
    as **Eigendecomposition**).
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 这个定理对我们很重要，因为它允许我们分解对称矩阵。我们称之为**谱分解**（有时也称为**特征分解**）。
- en: Suppose we have an orthogonal matrix *Q*, with the orthonormal basis of eigenvectors [![](img/86835d82-66f0-4cdd-a720-32f72739bc8b.png)] and
    [![](img/5d66989d-b7b4-409d-a682-045e3f9b0998.png)] being the matrix with corresponding
    eigenvalues.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个正交矩阵 *Q*，其特征向量的标准正交基为 [![](img/86835d82-66f0-4cdd-a720-32f72739bc8b.png)]
    和 [![](img/5d66989d-b7b4-409d-a682-045e3f9b0998.png)]，对应的特征值矩阵为 [![](img/5d66989d-b7b4-409d-a682-045e3f9b0998.png)]。
- en: 'From earlier, we know that [![](img/0d19d219-6c28-4bb3-a122-c6b3469f13b3.png)] for
    all [![](img/fc112d41-bab9-4fb3-9ffa-c8c20461ad16.png)]; therefore, we have the
    following:'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 从之前的结果中，我们知道 [![](img/0d19d219-6c28-4bb3-a122-c6b3469f13b3.png)] 对于所有 [![](img/fc112d41-bab9-4fb3-9ffa-c8c20461ad16.png)]
    都成立；因此，我们得出以下结论：
- en: '![](img/1b6c7941-bb3b-423d-b124-92890c550716.png)'
  id: totrans-419
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1b6c7941-bb3b-423d-b124-92890c550716.png)'
- en: '**Note**: Λ comes after *Q* because it is a diagonal matrix, and the [![](img/c342b78a-6b41-47a3-9c17-eb7d0eb6726c.png)]s
    need to multiply the individual columns of *Q*.'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：Λ 排在 *Q* 后面是因为它是一个对角矩阵，而 [![](img/c342b78a-6b41-47a3-9c17-eb7d0eb6726c.png)]
    需要乘以 *Q* 的各个列。'
- en: 'By multiplying both sides by *Q^T*, we get the following result:'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 通过两边同时乘以 *Q^T*，我们得到以下结果：
- en: '![](img/5e69ce71-fb08-43b4-8c6f-4b0d4a45f36b.png)'
  id: totrans-422
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5e69ce71-fb08-43b4-8c6f-4b0d4a45f36b.png)'
- en: Singular value decomposition
  id: totrans-423
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 奇异值分解
- en: '**Singular Value Decomposition** (**SVD**) is widely used in linear algebra
    and is known for its strength, particularly arising from the fact that every matrix
    has an SVD. It looks like this:'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: '**奇异值分解** (**SVD**) 在线性代数中广泛应用，并且因其强大而著称，特别是因为每个矩阵都有一个 SVD。其形式如下：'
- en: '![](img/2a9d9100-4f2c-4d8e-a28d-2c79f1c394b7.png)'
  id: totrans-425
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2a9d9100-4f2c-4d8e-a28d-2c79f1c394b7.png)'
- en: For our purposes, let's suppose [![](img/c983f0bd-e4c4-4f1c-b5a9-48f3864ef227.png)],
    [![](img/c2a55e81-b23d-4b32-85c0-5a2549e917e9.png)], [![](img/b0f481fc-deb2-4819-aeed-1b8187780c09.png)],
    and [![](img/f09fa2f7-db96-4689-b1cf-f2f61f5195f1.png)], and that *U, V *are orthogonal
    matrices, whereas ∑ is a matrix that contains singular values (denoted by σ[i]) of
    *A* along the diagonal.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的目的，假设 [![](img/c983f0bd-e4c4-4f1c-b5a9-48f3864ef227.png)]、[![](img/c2a55e81-b23d-4b32-85c0-5a2549e917e9.png)]、[![](img/b0f481fc-deb2-4819-aeed-1b8187780c09.png)]
    和 [![](img/f09fa2f7-db96-4689-b1cf-f2f61f5195f1.png)]，并且 *U, V* 是正交矩阵，而 ∑ 是一个包含矩阵
    A 奇异值（用 σ[i] 表示）沿对角线排列的矩阵。
- en: '*∑* in the preceding equation looks like this:'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 上述方程中的 *∑* 看起来是这样的：
- en: '![](img/be5c5338-fbd4-4dec-a368-1dd17f879ae2.png)'
  id: totrans-428
  prefs: []
  type: TYPE_IMG
  zh: '![](img/be5c5338-fbd4-4dec-a368-1dd17f879ae2.png)'
- en: 'We can also write the SVD like so:'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以将 SVD 写成如下形式：
- en: '![](img/e2638ca7-7dbf-4dc0-a887-ae2af1fb7b08.png)'
  id: totrans-430
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e2638ca7-7dbf-4dc0-a887-ae2af1fb7b08.png)'
- en: Here, *u[i]*, *v[i]* are the column vectors of *U, V*.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，*u[i]*，*v[i]* 是 *U, V* 的列向量。
- en: Cholesky decomposition
  id: totrans-432
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Cholesky 分解
- en: As I'm sure you've figured out by now, there is more than one way to factorize
    a matrix, and there are special methods for special matrices.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你现在应该已经明白的那样，矩阵分解有不止一种方法，而且对于特定矩阵，有专门的分解方法。
- en: The Cholesky decomposition is square root-like and works only on symmetric positive
    definite matrices.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: Cholesky 分解类似于平方根，只能应用于对称正定矩阵。
- en: This works by factorizing *A* into the form *LL^T*. Here, *L*, as before, is
    a lower triangular matrix.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法通过将 *A* 分解为 *LL^T* 形式来实现。在这里，*L*，如之前所述，是一个下三角矩阵。
- en: 'Do develop some intuition. It looks like this:'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 为了培养一些直觉，它大概是这样的：
- en: '![](img/dc5af252-82e4-4b19-9309-28bd423b9c64.png)'
  id: totrans-437
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dc5af252-82e4-4b19-9309-28bd423b9c64.png)'
- en: However, here, *L* is called a **Cholesky factor**.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在这里，*L* 被称为 **Cholesky 因子**。
- en: Let's take a look at the case where [![](img/95c6b814-1506-4f8e-bad3-9f7771f0fab6.png)].
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下 [![](img/95c6b814-1506-4f8e-bad3-9f7771f0fab6.png)] 的情况。
- en: 'We know from the preceding matrix that [![](img/14988fc6-2973-4534-9dbb-d2f0fa493a60.png)];
    therefore, we have the following:'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 从之前的矩阵中我们知道 [![](img/14988fc6-2973-4534-9dbb-d2f0fa493a60.png)]；因此，我们得到以下结论：
- en: '![](img/1cb6fb08-04e8-4ebe-8d22-8bee05f7c6a0.png)'
  id: totrans-441
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1cb6fb08-04e8-4ebe-8d22-8bee05f7c6a0.png)'
- en: 'Let''s multiply the upper and lower triangular matrices on the right, as follows:'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按如下方式相乘右边的上三角和下三角矩阵：
- en: '![](img/6bc01725-9a50-450c-98fa-acb8d95d0de7.png)'
  id: totrans-443
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6bc01725-9a50-450c-98fa-acb8d95d0de7.png)'
- en: 'Writing out *A* fully and equating it to our preceding matrix gives us the
    following:'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 完全写出 *A* 并将其与我们之前的矩阵等式相比较，得到以下结果：
- en: '![](img/055c9913-37fa-491e-a439-7e0da68f09cc.png)'
  id: totrans-445
  prefs: []
  type: TYPE_IMG
  zh: '![](img/055c9913-37fa-491e-a439-7e0da68f09cc.png)'
- en: 'We can then compare, element-wise, the corresponding entries of *A* and *LL^T* and
    solve algebraically for [![](img/26f39821-1aaa-4fb9-a9f1-c44a475c2371.png), ]as
    follows:'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来可以逐元素地比较 *A* 和 *LL^T* 的对应项，并通过代数方法求解 [![](img/26f39821-1aaa-4fb9-a9f1-c44a475c2371.png),
    ]，如下所示：
- en: '![](img/46bd6583-b5d0-4563-8b92-cf2fc765ffd0.png)'
  id: totrans-447
  prefs: []
  type: TYPE_IMG
  zh: '![](img/46bd6583-b5d0-4563-8b92-cf2fc765ffd0.png)'
- en: We can repeat this process for any symmetric positive definite matrix, and compute
    the *l[i,j]* values given *a[i,j]*.
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以对任何对称正定矩阵重复这个过程，并计算给定的 *a[i,j]* 值对应的 *l[i,j]* 值。
- en: Summary
  id: totrans-449
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: With this, we conclude our chapter on linear algebra. So far, we have learned
    all the fundamental concepts of linear algebra, such as matrix multiplication
    and factorization, that will lead you on your way to gaining a deep understanding
    of how **deep neural networks** (**DNNs**) work and are designed, and what it
    is that makes them so powerful.
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些内容，我们结束了关于线性代数的章节。到目前为止，我们已经学会了线性代数的所有基础概念，如矩阵乘法和因式分解，这将帮助你深入理解 **深度神经网络**
    (**DNNs**) 是如何工作的，以及它们为何如此强大。
- en: In the next chapter, we will be learning about calculus and will combine it
    with the concepts learned earlier on in this chapter to understand vector calculus.
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将学习微积分，并将其与本章前面学到的概念结合，来理解向量微积分。
