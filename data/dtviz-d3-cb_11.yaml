- en: Chapter 11. Using Force
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 11 章。使用力
- en: 'In this chapter we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下内容：
- en: Using gravity and charge
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用重力和电荷
- en: Generating momentum
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成动量
- en: Setting the link constraint
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置链接约束
- en: Using force to assist visualization
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用力辅助可视化
- en: Manipulating force
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作力
- en: Building a force-directed graph
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建力导向图
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Use the force, Luke!
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 用力，卢克！
- en: ''
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A master's words of wisdom to his apprentice
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 大师对学徒的智慧之言
- en: 'In this chapter we are going to cover one of the most fascinating aspects of
    D3: force. Force simulation is one of the most awe-inspiring techniques that you
    can add to your visualization. Through a number of highly interactive and fully-functional
    examples, we will help you explore not only the typical application of D3 force
    (for example, the force-directed graph), but also other essential aspects of force
    manipulation.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍 D3 中最迷人的方面之一：力。力模拟是您可以添加到可视化中的最具震撼力的技术之一。通过一系列高度交互和完全功能性的示例，我们将帮助您探索
    D3 力的典型应用（例如，力导向图），以及力操作的其他基本方面。
- en: D3 force simulation support was created not as a separate capability, but rather
    as an additional D3 layout. As we have mentioned in [Chapter 9](ch09.html "Chapter 9. Lay
    Them Out"), *Lay Them Out*, D3 layouts are non-visual data oriented layout management
    programs designed to be used with different visualization. Force layout was originally
    created for the purpose of implementing a specific visualization type called **force-directed
    graph**. Its implementation uses standard **verlet integration** based particle
    motion simulation with support for simple constraints.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: D3 力模拟支持并非作为一个独立的功能，而是一个额外的 D3 布局。正如我们在[第 9 章](ch09.html "第 9 章。布局")中提到的，“布局”，D3
    布局是非视觉数据导向的布局管理程序，旨在与不同的可视化一起使用。力布局最初是为了实现一种特定的可视化类型——**力导向图**而创建的。其实施使用基于标准 **verlet
    集成**的粒子运动模拟，并支持简单的约束。
- en: 'In other words, D3 implements a numeric method that is capable of loosely simulating
    Newton''s equation of motion on particle level and with simple constraints simulated
    as links between particles. This kind of layout, of course, was ideal in implementing
    a force-directed graph; however, we will also discover through recipes in this
    chapter that force layout is capable of generating many other interesting visualization
    effects due to its flexibility in custom force manipulation. The application of
    the techniques introduced in this chapter go even beyond the data visualization
    realm and has practical applications in many other domains, for example, user
    interface design. Of course, we will also cover the classical application of force
    layout: the force-directed graph in this chapter.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，D3 实现了一种数值方法，能够在粒子层面上松散地模拟牛顿的运动方程，并以简单的约束作为粒子之间的链接进行模拟。当然，这种布局在实现力导向图时是理想的；然而，通过本章中的配方，我们还将发现力布局能够生成许多其他有趣的可视化效果，这得益于其在自定义力操作方面的灵活性。本章介绍的技术应用甚至超出了数据可视化领域，并在许多其他领域有实际应用，例如用户界面设计。当然，我们还将介绍力布局的经典应用：本章中的力导向图。
- en: Using gravity and charge
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用重力和电荷
- en: 'In this recipe we will introduce you to the first two fundamental forces: gravity
    and charge. As we have mentioned before, one objective of force layout''s design
    is to loosely simulate Newton''s equation of motion with particles, and one major
    feature of this simulation is the force of charge. Additionally, force layout
    also implements pseudo gravity or more accurately a weak geometric constraint
    typically centered on the SVG that can be leveraged to keep your visualization
    from escaping the SVG canvas. In the following example we will learn how these
    two fundamental, and sometimes opposing forces, can be leveraged to generate various
    effects with a particle system.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将向您介绍前两个基本力：重力和电荷。正如我们之前提到的，力布局设计的目的是松散地模拟牛顿的粒子运动方程，而这种模拟的一个主要特征就是电荷力。此外，力布局还实现了伪重力或更准确地说是一种通常以
    SVG 为中心的弱几何约束，可以利用它来防止您的可视化逃离 SVG 画布。在以下示例中，我们将学习如何利用这两种基本且有时相反的力，通过粒子系统生成各种效果。
- en: Getting ready
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的网页浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter11/gravity-and-charge.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter11/gravity-and-charge.html).'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter11/gravity-and-charge.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter11/gravity-and-charge.html).'
- en: How to do it...
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In the following example we will experiment with the force layout gravity and
    charge settings so you can better understand different opposing forces involved
    and their interaction:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们将实验力布局的重力和电荷设置，以便您更好地理解涉及的不同对抗力及其相互作用：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This recipe generates a force-enabled particle system that is capable of operating
    in the modes shown in the following diagram:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方生成一个具有力功能的粒子系统，能够在以下图中显示的模式下运行：
- en: '![How to do it...](img/2162OS_11_01.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/2162OS_11_01.jpg)'
- en: Force Simulation Modes
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 力模拟模式
- en: How it works...
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Before we get our hands dirty with the preceding code example, let's first dig
    a little bit deeper into the concept of gravity, charge, and friction so we can
    have an easier time understanding all the magic number settings we will use in
    this recipe.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们动手编写前面的代码示例之前，让我们先深入探讨一下重力、电荷和摩擦的概念，这样我们就能更容易地理解在这个配方中我们将使用到的所有神奇数字设置。
- en: Charge
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 电荷
- en: Charge is specified to simulate mutual n-body forces among the particles. A
    negative value results in a mutual node repulsion while a positive value results
    in a mutual node attraction. The default value for charge is `-30`. Charge value
    can also be a function that will be evaluated for each node whenever the force
    simulation starts.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 电荷被指定来模拟粒子之间的相互n体力。负值导致节点相互排斥，而正值导致节点相互吸引。电荷的默认值是`-30`。电荷值也可以是一个函数，该函数将在力模拟开始时为每个节点进行评估。
- en: Gravity
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 重力
- en: Gravity simulation in force layout is not designed to simulate physical gravity,
    which can be simulated using positive charge. Instead, it is implemented as a
    weak geometric constraint similar to a virtual spring connecting to each node
    from the center of the layout. The default gravitational strength is set to `0.1`.
    As the nodes get further away from the center the gravitational strength gets
    stronger in linear proportion to the distance while near the center of the layout
    the gravitational strength is almost zero. Hence, gravity will always overcome
    repulsive charge at some point, therefore, preventing nodes from escaping the
    layout.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 力布局中的重力模拟并不是为了模拟物理重力，这可以通过使用正电荷来模拟。相反，它被实现为一个类似于虚拟弹簧的弱几何约束，连接到布局的每个节点。默认的重力强度设置为`0.1`。随着节点远离中心，重力强度以线性比例增加，而接近布局中心时，重力强度几乎为零。因此，重力将在某个时刻克服排斥电荷，从而防止节点逃离布局。
- en: Friction
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 摩擦
- en: Friction in D3 force layout does not represent a standard physical coefficient
    of friction, but it is rather implemented as a velocity decay. At each tick of
    the simulation particle, velocity is scaled down by a specified friction. Thus
    a value of `1` corresponds to a frictionless environment while a value of `0`
    freezes all particles in place since they lose their velocity immediately. Values
    outside the range of `[0, 1]` are not recommended since they might destabilize
    the layout.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: D3力布局中的摩擦并不代表标准的物理摩擦系数，而是实现为一个速度衰减。在模拟粒子的每个时间步长中，速度会通过指定的摩擦系数进行缩放。因此，`1`的值对应于无摩擦环境，而`0`的值会使所有粒子立即冻结，因为它们失去了速度。建议不要使用范围之外的值
    `[0, 1]`，因为它们可能会使布局不稳定。
- en: Alright, now with the dry definition behind us, let's take a look at how these
    forces can be leveraged to generate interesting visual effects.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在我们已经了解了干燥的定义，让我们来看看如何利用这些力来生成有趣的视觉效果。
- en: Setting up zero force layout
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置零力布局
- en: 'First, we simply set up force layout with neither gravity nor charge. The force
    layout can be created using the `d3.layout.force` function:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们简单地设置一个没有重力和电荷的力布局。力布局可以通过使用`d3.layout.force`函数来创建：
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Here, we set the size of the layout to the size of our SVG graphic, which is
    a common approach though not mandatory. In some use cases you might find it useful
    to have a layout larger or smaller than your SVG. At the same time, we disable
    both gravity and charge while setting the `friction` to `0.7`. With this setting
    in place, we then create additional nodes represented as `svg:circle` on SVG whenever
    the user moves the mouse:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将布局的大小设置为我们的SVG图形的大小，这是一个常见的做法，尽管不是强制性的。在某些用例中，您可能会发现有一个比SVG大或小的布局是有用的。同时，我们在设置`friction`为`0.7`的同时禁用了重力和电荷。有了这个设置，我们就可以在用户移动鼠标时在SVG上创建表示为`svg:circle`的额外节点：
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Node object was created initially on line A with its coordinates set to the
    current mouse location. Like all other D3 layouts, force layout is not aware and
    has no visual elements. Therefore, every node we create needs to be added to the
    layout''s nodes array on line C and removed when visual representation of these
    nodes was removed on line B. On line D we call the `start` function to start force
    simulation. With zero gravity and charge the layout essentially lets us place
    a string of nodes with our mouse movement as shown in the following screenshot:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 节点对象最初在行A上创建，其坐标设置为当前鼠标位置。像所有其他D3布局一样，力布局没有感知并且没有视觉元素。因此，我们创建的每个节点都需要在行C上添加到布局的节点数组中，并在行B上移除这些节点的视觉表示。在行D上，我们调用`start`函数以开始力模拟。在没有重力和电荷的情况下，布局基本上允许我们通过鼠标移动放置一串节点，如下面的截图所示：
- en: '![Setting up zero force layout](img/2162OS_11_02.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![设置零力布局](img/2162OS_11_02.jpg)'
- en: No Gravity or Charge
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 无重力或电荷
- en: Setting up mutual repulsion
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置相互排斥
- en: 'In the next mode, we will set the charge to a negative value while still keeping
    gravity to zero in order to generate a mutual repulsive force field:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个模式中，我们将电荷设置为负值，同时保持重力为零，以产生相互排斥的力场：
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'These lines tell force layout to apply `-60` charge on each node and update
    the node''s `{x, y}` coordinate accordingly, based on the simulation result on
    each tick. However, only doing this is still not enough to move the particles
    on SVG since the layout has no knowledge of the visual elements. Next, we need
    to write some code to connect the data that are being manipulated by force layout
    to our graphical elements. Following is the code to do that:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这些行告诉力布局对每个节点应用`-60`电荷，并根据每个tick的模拟结果相应地更新节点的`{x, y}`坐标。然而，仅此还不够将粒子移动到SVG上，因为布局没有关于视觉元素的知识。接下来，我们需要编写一些代码将力布局正在操作的数据连接到我们的图形元素。以下是要执行此操作的代码：
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here, we register a `tick` event listener function that updates all circle elements
    to its new position based on the force layout's calculation. Tick listener is
    triggered on each tick of the simulation. At each tick we set the `cx` and `cy`
    attribute to be the `x` and `y` values on `d`. This is because we have already
    bound the node object as datum to these circle elements, therefore, they already
    contain the new coordinates calculated by force layout. This effectively establishes
    force layout's control over all the particles.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们注册了一个`tick`事件监听器函数，该函数根据力布局的计算更新所有圆元素到其新位置。Tick监听器在模拟的每个tick上触发。在每个tick上，我们将`cx`和`cy`属性设置为`d`上的`x`和`y`值。这是因为我们已将节点对象作为datum绑定到这些圆元素上，因此它们已经包含了力布局计算出的新坐标。这有效地建立了力布局对所有粒子的控制。
- en: 'Other than `tick`, force layout also supports some other events:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`tick`之外，力布局还支持一些其他事件：
- en: '`start`: Triggered when simulation starts'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`start`: 当模拟开始时触发'
- en: '`tick`: Triggered on each tick of the simulation'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tick`: 在模拟的每个tick上触发'
- en: '`end`: Triggered when simulation ends'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`end`: 当模拟结束时触发'
- en: 'This force setting generates the following visual effect:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 此力设置产生以下视觉效果：
- en: '![Setting up mutual repulsion](img/2162OS_11_03.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![设置相互排斥](img/2162OS_11_03.jpg)'
- en: Mutual Repulsion
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 相互排斥
- en: Setting up mutual attraction
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置相互吸引
- en: 'When we change the charge to a positive value, it generates mutual attraction
    among the particles:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将电荷更改为正值时，粒子之间产生相互吸引：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This generates the following visual effect:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这产生了以下视觉效果：
- en: '![Setting up mutual attraction](img/2162OS_11_04.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![设置相互吸引](img/2162OS_11_04.jpg)'
- en: Mutual Attraction
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 相互吸引
- en: Setting up gravity
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置重力
- en: 'When we turn on gravity and turn off charge then it generates a similar effect
    as the mutual attraction; however, you can notice the linear scaling of gravitational
    pull as the mouse moves away from the center:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们打开重力并关闭电荷时，它会产生类似于相互吸引的效果；然而，你可以注意到当鼠标从中心移开时，重力吸引的线性缩放：
- en: '[PRE6]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'With gravity alone this recipe generates the following effect:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 仅使用重力时，这个菜谱会产生以下效果：
- en: '![Setting up gravity](img/2162OS_11_05.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![设置重力](img/2162OS_11_05.jpg)'
- en: Gravity
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 重力
- en: Using gravity with repulsion
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用带有排斥力的重力
- en: 'Finally, we can turn on both gravity and mutual repulsion. The result is an
    equilibrium of forces that keeps all particles somewhat stable neither escaping
    the layout nor colliding with each other:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以打开重力和相互排斥。结果是力的平衡，使所有粒子保持某种稳定性，既不会逃离布局，也不会相互碰撞：
- en: '[PRE7]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here is what this force equilibrium looks like:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这是这种力平衡的外观：
- en: '![Using gravity with repulsion](img/2162OS_11_06.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![使用带有排斥力的重力](img/2162OS_11_06.jpg)'
- en: Gravity with Repulsion
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 带有排斥力的重力
- en: See also
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'Verlet integration: [http://en.wikipedia.org/wiki/Verlet_integration](http://en.wikipedia.org/wiki/Verlet_integration)'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Verlet 集成：[http://en.wikipedia.org/wiki/Verlet_integration](http://en.wikipedia.org/wiki/Verlet_integration)
- en: 'Scalable, Versatile and Simple Constrained Graph Layout: [http://www.csse.monash.edu.au/~tdwyer/Dwyer2009FastConstraints.pdf](http://www.csse.monash.edu.au/~tdwyer/Dwyer2009FastConstraints.pdf)'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可扩展、多功能且简单的约束图布局：[http://www.csse.monash.edu.au/~tdwyer/Dwyer2009FastConstraints.pdf](http://www.csse.monash.edu.au/~tdwyer/Dwyer2009FastConstraints.pdf)
- en: 'Physical simulation: [http://www.gamasutra.com/resource_guide/20030121/jacobson_pfv.htm](http://www.gamasutra.com/resource_guide/20030121/jacobson_pfv.htm)'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 物理模拟：[http://www.gamasutra.com/resource_guide/20030121/jacobson_pfv.htm](http://www.gamasutra.com/resource_guide/20030121/jacobson_pfv.htm)
- en: 'The content of this chapter is inspired by Mike Bostock''s brilliant talk on
    D3 Force: [http://mbostock.github.io/d3/talk/20110921/](http://mbostock.github.io/d3/talk/20110921/)'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章内容受 Mike Bostock 在 D3 力方面的精彩演讲启发：[http://mbostock.github.io/d3/talk/20110921/](http://mbostock.github.io/d3/talk/20110921/)
- en: '[Chapter 10](ch10.html "Chapter 10. Interacting with your Visualization"),
    *Interacting with your Visualization*, for more details on how to interact with
    the mouse in D3'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第10章](ch10.html "第10章。与可视化交互"), *与可视化交互*，了解更多关于如何在 D3 中使用鼠标交互的详细信息'
- en: 'D3 Force Layout API document for more details on force layout: [https://github.com/mbostock/d3/wiki/Force-Layout](https://github.com/mbostock/d3/wiki/Force-Layout)'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: D3 力布局 API 文档，了解更多关于力布局的详细信息：[https://github.com/mbostock/d3/wiki/Force-Layout](https://github.com/mbostock/d3/wiki/Force-Layout)
- en: Generating momentum
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成动量
- en: 'In our previous recipe we have touched upon force layout node object and its
    `{x, y}` attributes, which determine where a node locates on the layout. In this
    recipe we will discuss another interesting aspect of physical motion simulation:
    momentum. D3 force layout has built-in support for momentum simulation which relies
    on the `{px, py}` attributes on the node object. Let''s see how this can be done
    in the example described in this recipe.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前的菜谱中，我们提到了力布局节点对象及其 `{x, y}` 属性，这些属性决定了节点在布局中的位置。在这个菜谱中，我们将讨论物理运动模拟的另一个有趣方面：动量。D3
    力布局内置了对动量模拟的支持，这依赖于节点对象上的 `{px, py}` 属性。让我们看看在这个菜谱中描述的示例中如何实现这一点。
- en: Getting ready
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter11/momentum-and-friction.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter11/momentum-and-friction.html).'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter11/momentum-and-friction.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter11/momentum-and-friction.html).'
- en: How to do it...
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In this recipe we will modify the previous recipe by first disabling both gravity
    and charge then giving newly added node some initial velocity. As a result now
    the faster you move the mouse higher the initial velocity and momentum will be
    for each node. Here is the code to do that:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将通过首先禁用重力和电荷，然后给新添加的节点一些初始速度来修改之前的菜谱。结果现在鼠标移动得越快，每个节点的初始速度和动量就越高。以下是实现这一点的代码：
- en: '[PRE8]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This recipe generates a particle system with initial directional velocity proportional
    to the user''s mouse movement as shown in the following screenshot:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱生成一个粒子系统，其初始方向速度与用户的鼠标移动成正比，如以下截图所示：
- en: '![How to do it...](img/2162OS_11_07.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/2162OS_11_07.jpg)'
- en: Momentum
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 动量
- en: How it works...
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The overall structure of this recipe is very similar to the previous one. It
    also generates particles as the user moves the mouse around. Moreover, once the
    force simulation starts, the particle position is fully controlled by force layout
    in its `tick` event listener function. However, in this recipe we have turned
    off both gravity and charge so that we can focus more clearly on momentum alone.
    We left some friction so the velocity decay making simulation look more realistic.
    Here is our force layout configuration:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱的整体结构与之前的非常相似。它也像用户移动鼠标一样生成粒子。此外，一旦力模拟开始，粒子位置就完全由其`tick`事件监听器函数中的力布局控制。然而，在这个菜谱中，我们关闭了重力和电荷，以便我们可以更清晰地专注于动量。我们留下了一些摩擦，使得速度衰减使模拟看起来更真实。以下是我们的力布局配置：
- en: '[PRE9]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The major difference in this recipe is that we keep track of not only the current
    mouse position, but also the previous mouse position. Additionally, whenever the
    user moves the mouse we generate a node object containing the current location
    `{x, y}` as well as the previous location `{px, py}`:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中的主要区别是，我们不仅跟踪当前鼠标位置，还跟踪前一个鼠标位置。此外，每当用户移动鼠标时，我们都会生成一个包含当前位置`{x, y}`以及前一个位置`{px,
    py}`的节点对象：
- en: '[PRE10]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Since user mouse location is sampled on fixed interval, the faster the user
    moves the mouse the further apart these two positions will be. This property plus
    the directional information gained from these two positions are nicely translated
    automatically by force layout into initial momentum for each particle we create
    as we have demonstrated in this recipe.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 由于用户鼠标位置是在固定间隔上采样的，用户移动鼠标的速度越快，这两个位置之间的距离就越远。这个属性加上从这两个位置获得的方向信息，被力布局自动很好地转换成我们在这个菜谱中展示的每个粒子的初始动量。
- en: 'Besides the `{x, y, px, py}` attributes we have discussed so far, force layout
    node object also supports some other useful attributes that we will list here
    for your reference:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 除了我们之前讨论的`{x, y, px, py}`属性之外，力布局节点对象还支持一些其他有用的属性，我们将在此列出供您参考：
- en: '`index`: Zero-based index of the node within the nodes array.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index`：节点在节点数组中的零基索引。'
- en: '`x`: The x-coordinate of the current node position.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x`：当前节点位置的x坐标。'
- en: '`y`: The y-coordinate of the current node position.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`y`：当前节点位置的y坐标。'
- en: '`px`: The x-coordinate of the previous node position.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`px`：前一个节点位置的x坐标。'
- en: '`py`: The y-coordinate of the previous node position.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`py`：前一个节点位置的y坐标。'
- en: '`fixed`: A Boolean indicating if the node position is locked.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fixed`：一个布尔值，表示节点位置是否被锁定。'
- en: '`weight`: The node weight; the number of associated links. Links are used to
    connect nodes in a force layout, which we will cover in depth in the next recipe.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`weight`：节点权重；关联的链接数量。链接用于在力布局中连接节点，我们将在下一菜谱中深入探讨。'
- en: See also
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Interacting with mouse events* recipe in [Chapter 10](ch10.html "Chapter 10. Interacting
    with your Visualization"), *Interacting with your Visualization*, for more details
    on how to interact with the mouse in D3
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第10章的*与你的可视化交互*中，*与你的可视化交互*的*与鼠标事件交互*菜谱，了解更多关于如何在D3中与鼠标交互的细节
- en: D3 Force Layout Nodes API for more details on force layout node attributes [https://github.com/mbostock/d3/wiki/Force-Layout#wiki-nodes](https://github.com/mbostock/d3/wiki/Force-Layout#wiki-nodes)
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: D3 Force Layout Nodes API，有关力布局节点属性的更多详细信息 [https://github.com/mbostock/d3/wiki/Force-Layout#wiki-nodes](https://github.com/mbostock/d3/wiki/Force-Layout#wiki-nodes)
- en: Setting the link constraint
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置链接约束
- en: 'So far we have covered some important aspects of the force layout such as gravity,
    charge, friction, and momentum. In this recipe we will discuss another critical
    functionality: links. As we have mentioned in the introduction section, D3 force
    layout implements a scalable simple graph constraint, and in this recipe we will
    demonstrate how link constraint can be leveraged in conjunction with other forces.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经涵盖了力布局的一些重要方面，如重力、电荷、摩擦和动量。在这个菜谱中，我们将讨论另一个关键功能：链接。正如我们在介绍部分提到的，D3力布局实现了一个可扩展的简单图约束，在这个菜谱中，我们将演示如何结合其他力利用链接约束。
- en: Getting ready
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 打开以下文件的本地副本到您的网页浏览器中：
- en: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter11/link-constraint.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter11/link-constraint.html).'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter11/link-constraint.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter11/link-constraint.html).'
- en: How to do it...
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In this recipe, whenever the user clicks their mouse we will generate a force-directed
    ring of particles constrained by links between nodes. Here is how it is implemented:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，每当用户点击鼠标时，我们都会生成一个由节点之间的链接约束的力导向粒子环。以下是它的实现方式：
- en: '[PRE11]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This recipe generates force-directed particle rings on a mouse click as shown
    in the following screenshot:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方在鼠标点击时生成力导向的粒子环，如下面的截图所示：
- en: '![How to do it...](img/2162OS_11_08.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/2162OS_11_08.jpg)'
- en: Force-Directed Particle Rings
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 力导向粒子环
- en: How it works...
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'Link constraint adds another useful dimension to force assisted visualization.
    In this recipe we set up our force layout with the following parameters:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 链接约束为力辅助可视化添加了另一个有用的维度。在这个配方中，我们使用以下参数设置我们的力布局：
- en: '[PRE12]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Besides gravity, charge, and friction, this time we have two additional parameters:
    link distance and link strength. Both parameters are exclusively link related:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 除了重力、电荷和摩擦之外，这次我们还有两个额外的参数：链接距离和链接强度。这两个参数都是与链接相关的：
- en: '`linkDistance`: Could be a constant or a function; defaults to 20 pixels. Link
    distances are evaluated when the layout starts, and it is implemented as weak
    geometric constraints. For each tick of the layout, the distance between each
    pair of linked nodes is computed and compared to the target distance; the links
    are then moved towards each other or away from each other.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`linkDistance`: 可以为一个常量或一个函数；默认为20像素。链接距离在布局开始时进行评估，并且它被实现为弱几何约束。对于布局的每一次迭代，都会计算每对链接节点之间的距离，并将其与目标距离进行比较；然后链接会相互靠近或远离。'
- en: '`linkStength`: Could be a constant or a function; defaults to 1\. Link strength
    sets the strength (rigidity) of links with value in the range of `[0, 1]`. Link
    strength is also evaluated on layout start.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`linkStength`: 可以为一个常量或一个函数；默认为1。链接强度设置链接的强度（刚性），其值在`[0, 1]`范围内。链接强度也在布局开始时进行评估。'
- en: 'When the user clicks their mouse, a random number of nodes are being created
    and put under force layout''s control similar to what we have done in the previous
    recipes. The major addition in this recipe is the link creation and its control
    logic is shown in the following code snippet:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击鼠标时，会创建一定数量的节点并将其置于力布局的控制之下，这与我们在之前的配方中所做的一样。在这个配方中的主要新增内容是链接的创建及其控制逻辑，如下面的代码片段所示：
- en: '[PRE13]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In the `createLinks` function, `n-1` link objects were created connecting a
    set of nodes into a ring (for loop on line A). Each link object must have two
    attributes specified as `source` and `target`, telling force layout which pair
    of nodes are connected by this link object. Once created, we decided to visualize
    the links in this recipe using `svg:line` element (line B). We will see in the
    next recipe that this does not have to always be the case. As a matter of fact,
    you can use pretty much anything; you can imagine to visualize (including hiding
    them, but retain the links for layout computation) the links as long as it makes
    sense for the audience of your visualization. After that we also need to add link
    objects to force layout''s links array (on line C) so they can be put under force
    layout''s control. Finally, we need to translate the positioning data generated
    by force layout to SVG implementation in the `tick` function for each link similar
    to what we did for the nodes:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在`createLinks`函数中，创建了`n-1`个链接对象，将一组节点连接成一个环（在A行上的for循环）。每个链接对象必须指定两个属性，即`source`和`target`，告诉力布局哪些节点对通过此链接对象连接。一旦创建，我们决定在这个配方中使用`svg:line`元素（B行）来可视化链接。在下一个配方中，我们将看到这并不总是必须如此。事实上，你可以使用几乎所有东西来可视化（包括隐藏它们，但保留链接以进行布局计算），只要这对你的可视化观众有意义。之后，我们还需要将链接对象添加到力布局的链接数组中（C行），以便它们可以置于力布局的控制之下。最后，我们需要在`tick`函数中为每个链接将力布局生成的位置数据转换为SVG实现，类似于我们对节点所做的那样：
- en: '[PRE14]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'As we can see here, D3 force layout has again done most of the heavy lifting,
    therefore, all we need to do is simply set `{x1, y1}` and `{x2, y2}` on the `svg:line`
    elements in the `tick` function. For reference, the following screenshot is what
    a link object looks like after it has been manipulated by force layout:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，D3力布局再次承担了大部分繁重的工作，因此我们只需要在`tick`函数中的`svg:line`元素上简单地设置`{x1, y1}`和`{x2,
    y2}`。为了参考，以下截图是链接对象在经过力布局操作后的样子：
- en: '![How it works...](img/2162OS_11_09.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/2162OS_11_09.jpg)'
- en: Link Object
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 链接对象
- en: 'One last additional technique worth mentioning in this recipe is force-enabled
    dragging. All nodes generated by this recipe are "draggable" and force layout
    automatically re-computes all forces and constraints as user drags the rings around
    as shown in the following screenshot:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，还有一个值得提及的额外技术，即力启用拖动。本配方生成的所有节点都是“可拖动的”，并且当用户拖动环时，力布局会自动重新计算所有力和约束，如下截图所示：
- en: '![How it works...](img/2162OS_11_10.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/2162OS_11_10.jpg)'
- en: Dragging with Force Layout
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 力布局拖动
- en: 'D3 force layout has dragging built-in, hence, this fancy effect is quite easily
    achieved by simply calling `force.drag` on the `svg:circle` selection (line D):'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: D3 力布局内置了拖动功能，因此，通过在 `svg:circle` 选择器上简单地调用 `force.drag`，就可以轻松实现这种花哨的效果（代码行
    D）：
- en: '[PRE15]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: See also
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考以下
- en: 'Scalable, Versatile and Simple Constrained Graph Layout: [http://www.csse.monash.edu.au/~tdwyer/Dwyer2009FastConstraints.pdf](http://www.csse.monash.edu.au/~tdwyer/Dwyer2009FastConstraints.pdf)'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可扩展、多功能且简单的约束图布局：[http://www.csse.monash.edu.au/~tdwyer/Dwyer2009FastConstraints.pdf](http://www.csse.monash.edu.au/~tdwyer/Dwyer2009FastConstraints.pdf)
- en: '`force.links()`: [https://github.com/mbostock/d3/wiki/Force-Layout#wiki-links](https://github.com/mbostock/d3/wiki/Force-Layout#wiki-links)'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`force.links()`: [https://github.com/mbostock/d3/wiki/Force-Layout#wiki-links](https://github.com/mbostock/d3/wiki/Force-Layout#wiki-links)'
- en: '`force.linkDistance()`: [https://github.com/mbostock/d3/wiki/Force-Layout#wiki-linkDistance](https://github.com/mbostock/d3/wiki/Force-Layout#wiki-linkDistance)'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`force.linkDistance()`: [https://github.com/mbostock/d3/wiki/Force-Layout#wiki-linkDistance](https://github.com/mbostock/d3/wiki/Force-Layout#wiki-linkDistance)'
- en: '`force.linkStrength()`: [https://github.com/mbostock/d3/wiki/Force-Layout#wiki-linkStrength](https://github.com/mbostock/d3/wiki/Force-Layout#wiki-linkStrength)'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`force.linkStrength()`: [https://github.com/mbostock/d3/wiki/Force-Layout#wiki-linkStrength](https://github.com/mbostock/d3/wiki/Force-Layout#wiki-linkStrength)'
- en: '`force.drag`: [https://github.com/mbostock/d3/wiki/Force-Layout#wiki-drag](https://github.com/mbostock/d3/wiki/Force-Layout#wiki-drag)'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`force.drag`: [https://github.com/mbostock/d3/wiki/Force-Layout#wiki-drag](https://github.com/mbostock/d3/wiki/Force-Layout#wiki-drag)'
- en: Using force to assist visualization
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用力辅助可视化
- en: So far we have learned to use force layout visualizing particles and links similar
    to how you would use force layout in its classic application, the forced-directed
    graph. This kind of visualization is what force layout was designed for in the
    first place. However, this is by no means the only way to utilize force in your
    visualization. In this recipe we will explore techniques that I call force-assisted
    visualization. With this technique you can add some randomness and arbitrariness
    into your visualization by leveraging force.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经学会了如何使用力布局可视化粒子及其链接，类似于在经典应用中（如力导向图）使用力布局。这种可视化正是力布局最初设计的目的。然而，这绝对不是利用力进行可视化的唯一方式。在本配方中，我们将探讨我称之为力辅助可视化的技术。利用这种技术，您可以通过利用力来为您的可视化添加一些随机性和任意性。
- en: Getting ready
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter11/arbitrary-visualization.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter11/arbitrary-visualization.html).'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter11/arbitrary-visualization.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter11/arbitrary-visualization.html).'
- en: How to do it...
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In this recipe we will generate bubbles on user mouse click. The bubbles are
    made of `svg:path` elements filled with gradient color. The `svg:path` elements
    are not strictly controlled by force layout though they are influenced by force,
    therefore, giving them the randomness required to simulate a bubble in real-life:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将生成用户鼠标点击时的气泡。这些气泡由填充渐变颜色的 `svg:path` 元素组成。尽管 `svg:path` 元素不是严格由力布局控制的，但它们受到力的影响，因此，赋予它们所需的随机性来模拟现实生活中的气泡：
- en: '[PRE16]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This recipe generates force assisted bubbles on user mouse click as shown in
    the following screenshot:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方在用户鼠标点击时生成力辅助气泡，如下截图所示：
- en: '![How to do it...](img/2162OS_11_11.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/2162OS_11_11.jpg)'
- en: Force Assisted Bubbles
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 力辅助气泡
- en: How it works...
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作...
- en: 'This recipe is built on top of what we have done in the previous recipe, therefore,
    its overall approach is quite similar to the last recipe in which we created force
    controlled particle rings on user mouse click. The major difference between this
    recipe and the last one is in this one we decided to use `d3.svg.line` generator
    to create the `svg:path` element that outlines our bubbles instead of using `svg:circle`
    and `svg:line`:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方建立在之前配方的基础上，因此其整体方法与上一个配方（我们在用户鼠标点击时创建力控制的粒子环）非常相似。这个配方与上一个配方的主要区别在于，我们决定使用`d3.svg.line`生成器来创建轮廓我们气泡的`svg:path`元素，而不是使用`svg:circle`和`svg:line`：
- en: '[PRE17]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'On line A we created a line generator with `basis-closed` interpolation mode
    since this gives us the smoothest outline for our bubble. Whenever user clicks
    the mouse a `svg:path` element was created connecting all nodes (line C). Additionally,
    we also fill the bubble with our pre-defined gradient to give it a nice glow (line
    B). Finally, we also need to implement the force based positioning in the `tick`
    function:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在线A上，我们使用`basis-closed`插值模式创建了一个线生成器，因为这样可以给我们气泡最平滑的轮廓。每当用户点击鼠标时，就会创建一个`svg:path`元素，连接所有节点（线C）。此外，我们还用我们预定义的渐变填充气泡，使其看起来很漂亮（线B）。最后，我们还需要在`tick`函数中实现基于力的定位：
- en: '[PRE18]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In the `tick` function we simply re-invoke the line generator function to update
    the `d` attribute for each path thus animating the bubbles using force layout
    computation.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在`tick`函数中，我们简单地重新调用线生成器函数来更新每个路径的`d`属性，从而使用力布局计算来动画化气泡。
- en: See also
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: 'SVG Gradients and Patterns: [http://www.w3.org/TR/SVG/pservers.html](http://www.w3.org/TR/SVG/pservers.html)'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SVG渐变和图案：[http://www.w3.org/TR/SVG/pservers.html](http://www.w3.org/TR/SVG/pservers.html)
- en: The *Using line generator* recipe in [Chapter 7](ch07.html "Chapter 7. Getting
    into Shape"), *Getting into Shape*, for more information on D3 line generator
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第7章](ch07.html "第7章。塑形")的“塑形”一节中，有关D3线生成器的*使用线生成器*配方，获取更多信息
- en: Manipulating force
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 力操纵
- en: So far we have explored many interesting aspects and applications of D3 force
    layout; however, in all of these prior recipes we simply apply force layout's
    computation (gravity, charge, friction, and momentum) directly to our visualization.
    In this recipe we will go one step further to implement custom force manipulation,
    hence creating our own type of force.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经探索了D3力布局的许多有趣方面和应用；然而，在所有这些先前的配方中，我们只是直接将力布局的计算（重力、电荷、摩擦和动量）应用于我们的可视化。在这个配方中，我们将更进一步，实现自定义力操纵，从而创建我们自己的力类型。
- en: 'In this recipe we will first generate five sets of colored particles then we
    assign corresponding colors and categorical force pull to user''s touch, hence
    pulling only the particles that match the color. Since this recipe is a bit complex,
    I will give an example here: if I touch the visualization with my first finger
    it will generate a blue circle and pull all blue particles to that circle, while
    my second touch will generate an orange circle and only pull the orange particles.
    This type of force manipulation is commonly referred to as categorical multi-foci.'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们首先生成五组彩色粒子，然后我们为用户的触摸分配相应的颜色和分类力，从而只拉动匹配颜色的粒子。由于这个配方比较复杂，我在这里给出一个例子：如果我用我的第一个手指触摸可视化，它将生成一个蓝色圆圈并将所有蓝色粒子拉到那个圆圈，而我的第二个触摸将生成一个橙色圆圈，并且只拉动橙色粒子。这种力操纵通常被称为分类多焦点。
- en: Getting ready
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter11/multi-foci.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter11/multi-foci.html).'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter11/multi-foci.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter11/multi-foci.html).'
- en: How to do it...
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Here is how you can achieve this in code:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是如何在代码中实现它的方法：
- en: '[PRE19]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This recipe generates multi-categorical foci on touch as shown in the following
    screenshot:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方在触摸时生成多分类焦点，如下截图所示：
- en: '![How to do it...](img/2162OS_11_12.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![如何做到这一点...](img/2162OS_11_12.jpg)'
- en: Multi-Categorical Foci on Touch
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 触摸时的多分类焦点
- en: How it works...
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The first step of this recipe is to create colored particles and standard force
    equilibrium between gravity and repulsion. All node objects contain separate color
    and type ID attributes (line A and B) so they can be easily identified later.
    Next, we need to create a `svg:circle` element on user touch to represent the
    touch point:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方的第一步是创建彩色粒子以及重力和排斥力之间的标准力平衡。所有节点对象都包含单独的颜色和类型ID属性（行A和B），这样它们就可以在以后轻松识别。接下来，我们需要在用户触摸时创建一个`svg:circle`元素来表示触摸点：
- en: '[PRE20]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Once the touch point is identified, all custom force magic is implemented in
    the `tick` function. Now, let''s take a look at the `tick` function:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦确定了接触点，所有自定义的力魔法都在`tick`函数中实现。现在，让我们来看看`tick`函数：
- en: '[PRE21]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The first new concept we encounter here is the alpha parameter. Alpha is an
    internal cooling parameter used by force layout. Alpha starts with `0.1` and moves
    towards `0` as layout ticks. In simpler terms the higher the alpha value the more
    chaotic the forces are and as alpha approaches `0` the layout becomes more stable.
    In this implementation we leverage the alpha value to make our custom force implementation
    cool down in synchronous with other built-in forces, since the movements of the
    particles are calculated with `k` coefficient (a derivative of alpha) on line
    C and D moving them closer to the matching touch point.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里遇到的第一种新概念是alpha参数。Alpha是力布局使用的内部冷却参数。Alpha从`0.1`开始，随着布局的tick值向`0`移动。简单来说，alpha值越高，力越混乱，当alpha接近`0`时，布局变得更加稳定。在这个实现中，我们利用alpha值来使我们的自定义力实现与内置的其他力同步冷却，因为粒子的运动是通过`k`系数（alpha的导数）在行C和D上计算的，将它们移动到匹配的触摸点附近。
- en: See also
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Interacting with a multi-touch device* recipe in [Chapter 10](ch10.html
    "Chapter 10. Interacting with your Visualization"), *Interacting with your Visualization*,
    for more information on D3 multi-touch support
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第10章](ch10.html "第10章。与你的可视化交互")的*与你的可视化交互*部分，*与多触点设备交互*的配方，了解更多关于D3多触点支持的信息
- en: Building a force-directed graph
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建力导向图
- en: At last, we will show how to implement a force-directed graph, the classic application
    of D3 force layout. However, we believe with all the techniques and knowledge
    you have gained so far from this chapter implementing force-directed graph should
    feel quite straightforward.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将展示如何实现一个力导向图，这是D3力布局的经典应用。然而，我们认为，凭借你从本章学到的所有技术和知识，实现力导向图应该感觉相当直接。
- en: Getting ready
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的网络浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter11/force-directed-graph.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter11/force-directed-graph.html).'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter11/force-directed-graph.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter11/force-directed-graph.html)。'
- en: How to do it...
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In this recipe we will visualize the flare data set as a force-directed tree
    (tree is a special type of graph):'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将可视化flare数据集作为一个力导向树（树是图的一种特殊类型）：
- en: '[PRE22]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'This recipe visualizes hierarchical flare data set as a force-directed tree:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方将层次化的flare数据集可视化为一个力导向树：
- en: '![How to do it...](img/2162OS_11_13.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/2162OS_11_13.jpg)'
- en: Force-Directed Graph (Tree)
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 力导向图（树）
- en: How it works...
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: As we can already see, this recipe is pretty short and a quarter of the code
    was actually devoted to data processing. This is due to the fact that force-directed
    graph is what force layout was designed for in the first place. Thus there is
    really not much to do other than simply apply the layout with correct data structure.
    First, we flatten the hierarchical data set in flatten function (line A) since
    this is what force layout expects. Second, we leverage the `d3.layout.tree.links`
    function to generate proper linkage between tree nodes. The `d3.layout.tree.links`
    function returns an array of link objects representing links from parent to child
    for each given node object, in other words, builds the tree structure. Once the
    data is properly formatted the rest of this recipe applies standard force layout
    usage with hardly any customization at all.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，这个菜谱相当简短，四分之一的代码实际上用于数据处理。这是因为力导向图最初就是为了力布局而设计的。因此，除了简单地应用正确的数据结构来布局之外，实际上并没有太多的事情要做。首先，我们在`flatten`函数（行A）中使层次化数据集扁平化，因为这是力布局所期望的。其次，我们利用`d3.layout.tree.links`函数在树节点之间生成适当的链接。`d3.layout.tree.links`函数返回一个表示从父节点到子节点的链接对象的数组，换句话说，构建树结构。一旦数据格式正确，剩下的这个菜谱就应用标准的力布局用法，几乎没有任何定制。
- en: See also
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Building a tree* recipe in [Chapter 9](ch09.html "Chapter 9. Lay Them Out"),
    *Lay Them Out*, for more information on D3 tree layout
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于D3树布局的更多信息，请参阅第9章的*构建树*菜谱，*布局它们*
- en: 'For more information on force-directed graphs, visit the site: [http://en.wikipedia.org/wiki/Force-directed_graph_drawing](http://en.wikipedia.org/wiki/Force-directed_graph_drawing)'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 想了解更多关于力导向图的信息，请访问网站：[http://en.wikipedia.org/wiki/Force-directed_graph_drawing](http://en.wikipedia.org/wiki/Force-directed_graph_drawing)
