- en: Data Wrangling
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据清理
- en: In this chapter, we look at data in several different forms and pry useful statistics.
    The tools to access the data have been well developed and allow for data to be
    missing headings or data points in some of the records.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们查看了不同形式的数据，并提取了有用的统计信息。用于访问数据的工具已经得到很好的开发，并允许某些记录中缺失标题或数据点。
- en: Reading a CSV file
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取 CSV 文件
- en: 'One of the standards for file formats is CSV. In this section, we will walk
    through the process of reading a CSV and adjusting the dataset to arrive at some
    conclusions about the data. The data I am using is from the Heating System Choice
    in California Houses dataset, found at [https://vincentarelbundock.github.io/Rdatasets/datasets.html](https://vincentarelbundock.github.io/Rdatasets/datasets.html):'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 文件格式的标准之一是 CSV。在本节中，我们将通过读取 CSV 文件并调整数据集的过程，得出一些关于数据的结论。我使用的数据来自加利福尼亚房屋的供暖系统选择数据集，网址为
    [https://vincentarelbundock.github.io/Rdatasets/datasets.html](https://vincentarelbundock.github.io/Rdatasets/datasets.html)：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![](img/6d82a49c-9ad3-48b7-9da1-26d3d294e172.png)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6d82a49c-9ad3-48b7-9da1-26d3d294e172.png)'
- en: 'The data appears to be as expected; however, a number of the columns have acronym
    names and are somewhat duplicated. Let us change the names of interest that we
    want to be more readable and remove the extras we are not going to use:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 数据似乎符合预期；然而，许多列有缩写名称，并且有些列内容重复。让我们修改我们感兴趣的名称，使其更易读，并移除我们不打算使用的多余内容：
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![](img/55a0112e-f23a-4b20-9c5d-0b88e9672645.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![](img/55a0112e-f23a-4b20-9c5d-0b88e9672645.png)'
- en: 'Now that we have a tighter dataset, let us start to look over the data:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个更精简的数据集，让我们开始查看数据：
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](img/ee0b06ea-9bad-4384-9e73-c865a9f8ab4d.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ee0b06ea-9bad-4384-9e73-c865a9f8ab4d.png)'
- en: 'Some points pop out from the summary:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 总结中有几点突出：
- en: There are five different types of heating systems, gas cooling being most prevalent
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有五种不同类型的供暖系统，其中以燃气制冷最为普遍
- en: Costs vary much more than expected
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 成本变化远比预期的要大
- en: The data covers four large regions of California
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据涵盖了加利福尼亚的四个大区域
- en: The ration of the annual cost versus the initial cost varies much more than
    expected
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 年度成本与初始成本的比率变化远比预期的要大
- en: 'It is not obvious what the data relationships might be, but we can use the
    R `plot()` function to provide a quick snapshot that shows anything significant:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 数据关系并不显而易见，但我们可以使用 R 中的 `plot()` 函数提供一个快速的快照，显示任何重要的内容：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](img/9d1ba861-4bb7-4d37-a9c8-de91513f3153.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9d1ba861-4bb7-4d37-a9c8-de91513f3153.png)'
- en: 'Again, several interesting facts jump out:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，几个有趣的事实浮现出来：
- en: The initial cost varies widely within the type of system
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初始成本在不同类型的系统中变化很大
- en: The annual cost varies within the type of system as well
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 年度成本在不同类型的系统中也有所不同
- en: Costs vary widely within the ranges of customer income, age, number of rooms
    in the house, and region
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 成本在客户收入、年龄、房屋房间数和地区范围内变化很大
- en: 'The only direct relationship between variables appears to be the initial cost
    of system and the annual cost. With covariance, we are looking for a measure of
    how much two variables change in relation to each other. If we run a covariance
    between the install and annual cost, we get:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 变量之间唯一的直接关系似乎是系统的初始成本和年度成本。通过协方差，我们可以衡量两个变量之间如何相互变化。如果我们对安装成本和年度成本进行协方差分析，我们得到：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: I am not sure I have seen a higher covariance result.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我不确定我是否见过更高的协方差结果。
- en: Reading another CSV file
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取另一个 CSV 文件
- en: 'We can look at another CSV in the same dataset to see what kind of issues we
    run across. Using the yearly batting records for all Major League Baseball players
    that we previously downloaded from the same site, we can use coding like the following
    to start analyzing the data:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以查看同一数据集中的另一个 CSV 文件，看看我们会遇到什么问题。使用我们之前从同一网站下载的所有大联盟棒球运动员的年度击球记录，我们可以使用类似以下的代码开始分析数据：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This produces the following head display:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这会生成以下的表头显示：
- en: '![](img/9fd09754-548d-4d37-b6c0-d87bcfbedd60.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9fd09754-548d-4d37-b6c0-d87bcfbedd60.png)'
- en: 'There are many statistics for baseball players in this dataset. There are also
    many `NA` values. R is pretty good at ignoring `NA` values. Let us first look
    at the statistics for the data using:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这个数据集中包含了很多棒球运动员的统计数据。也有很多 `NA` 值。R 对 `NA` 值的处理非常好。让我们首先使用以下方法查看数据的统计信息：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This generates statistics on all the fields involved (there are several more
    that are not in this display):'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这会生成所有相关字段的统计数据（还有一些未在此显示的字段）：
- en: '![](img/9c6d3adf-d3dd-4208-a297-fb4e3a883cf0.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9c6d3adf-d3dd-4208-a297-fb4e3a883cf0.png)'
- en: 'A number of interesting points are visible in the preceding display that are
    worth noting:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的显示中有一些有趣的点，值得注意：
- en: We have about 30 data points per player
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个球员大约有30个数据点
- en: It is interesting that the player data goes back to 1871
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有趣的是，球员数据追溯到1871年
- en: There are about 1,000 data points per team
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每支队伍大约有1,000个数据点
- en: American League and National League are clearly more popular
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 美国联赛和国家联赛显然更受欢迎
- en: 'The range of some of the data points is surprising:'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些数据点的范围令人惊讶：
- en: At bats range from 0 to 700
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打击数范围从0到700
- en: Runs (r) range from 0 to 177
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跑垒数（r）范围从0到177
- en: Hits (h) range from 0 to 257
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 击球数（h）范围从0到257
- en: 'If we just plot some of the dominant data points, we can see the following:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们只绘制一些主导性数据点，我们可以看到如下内容：
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The statistic graphs are displayed in this order so that smaller values are
    not overwritten by larger values (for example, the hits (largest numbers) are
    displayed first and the triples (smallest numbers) are displayed last on top of
    the previous numbers).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 统计图按此顺序显示，以避免较小的值被较大的值覆盖（例如，击球数（最大数字）首先显示，而三垒打（最小数字）最后显示在先前数字的上方）。
- en: We have a display of the types of hits made by players over time as follows.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们显示了球员随时间变化的击球类型，如下所示。
- en: '![](img/b4df2ed3-24c6-46fa-b6d0-bff059c68eb1.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b4df2ed3-24c6-46fa-b6d0-bff059c68eb1.png)'
- en: I thought it was interesting that so few triples were hit. Also, since the data
    is organized somewhat chronologically, the number of triples that are hit has
    been decreasing for some time. Maybe there is an emphasis on batting to go for
    the home run over batting to get a triple.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我觉得很有趣的是，三垒打如此少见。而且，由于数据的组织方式是按时间顺序的，三垒打的数量已经有一段时间在减少。也许现在更注重击球员争取本垒打，而不是击三垒打。
- en: Manipulating data with dplyr
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 `dplyr` 操作数据
- en: The `dplyr` package for R is described as a package providing a grammar for
    data manipulation. It has the entry points you would expect for wrangling your
    data frame in one package. We will use the `dplyr` package against the baseball
    player statistics we used earlier in this chapter.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: R 的 `dplyr` 包被描述为一个提供数据操作语法的包。它具备你期望的所有数据框操作入口，整合在一个包中。我们将使用 `dplyr` 包处理本章前面使用的棒球选手统计数据。
- en: 'We read in the player data and show the first few rows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们读取球员数据并显示前几行：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![](img/344ae5cd-7bf7-4991-a635-54c400946447.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/344ae5cd-7bf7-4991-a635-54c400946447.png)'
- en: 'We will be using the `dplyr` package, so we need to pull the package into our
    notebook:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 `dplyr` 包，因此我们需要将该包导入我们的笔记本：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Converting a data frame to a dplyr table
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将数据框转换为 `dplyr` 表
- en: The `dplyr` package has functions to convert your data object into a `dplyr`
    table. A `dplyr` table stores data in a compact format using much less memory.
    Most of the other `dplyr` functions can operate directly on the table as well.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`dplyr` 包有函数可以将数据对象转换为 `dplyr` 表。`dplyr` 表以紧凑的格式存储数据，使用的内存远小于普通数据框。大多数其他 `dplyr`
    函数也可以直接在该表上操作。'
- en: 'We can convert our data frame to a table using:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下方式将数据框转换为表：
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This results in a very similar display pattern:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致一个非常相似的显示模式：
- en: '![](img/74e65b8e-b129-4e02-8c27-e95eab88d1a0.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/74e65b8e-b129-4e02-8c27-e95eab88d1a0.png)'
- en: Getting a quick overview of the data value ranges
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 快速了解数据值范围
- en: 'Another function available in `dplyr` is the `glimpse()` function. It takes
    every column and displays the range of values present for that variable. We use
    the function in the following way:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`dplyr` 还有一个可用的函数是 `glimpse()`。它会显示每一列的值范围。我们可以按以下方式使用该函数：'
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This has the following display:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这有如下显示效果：
- en: '![](img/432954bc-562d-4a2a-9545-e367f7f5654e.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/432954bc-562d-4a2a-9545-e367f7f5654e.png)'
- en: I think I like this, in addition to the set of `summary`/`head` displays, as
    you get a feel for the variables involved rather than the rows involved, inverting
    the dataset.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我喜欢这个方法，除了 `summary`/`head` 的显示方式，它能让你感知涉及的变量，而不是涉及的行，实际上是倒转了数据集。
- en: Sampling a dataset
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 抽样数据集
- en: 'The `dplyr` package has a function to gather a sample from your dataset, `sample()`.
    You pass in the dataset to operate against and how many samples you want drawn,
    `sample_n()`, and the fraction percentage, `sample_frac()`, as in this example:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`dplyr` 包有一个函数可以从数据集中抽取样本，`sample()`。你传入数据集和你想要抽取的样本数量，`sample_n()`，以及样本比例，`sample_frac()`，如下例所示：'
- en: '[PRE12]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We see the results as shown in the following screenshot:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到如下截图中的结果：
- en: '![](img/5278664c-08a9-43fb-b4d1-44f5621aaafa.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5278664c-08a9-43fb-b4d1-44f5621aaafa.png)'
- en: Note that there are 30 observations in the results set, as requested.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，结果集中有30个观察值，如请求的那样。
- en: Filtering rows in a data frame
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在数据框中筛选行
- en: 'Another function we can use is the `filter` function. The `filter` function
    takes a data frame as an argument and a filtering statement. The function passes
    over each row of the data frame and returns those rows that meet the filtering
    statement:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用的另一个函数是`filter`函数。`filter`函数以数据框作为参数并使用过滤语句。该函数在数据框的每一行上运行，并返回满足过滤语句的行：
- en: '[PRE13]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![](img/35016582-6cf7-4a2b-8fb2-fd3686bd0918.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/35016582-6cf7-4a2b-8fb2-fd3686bd0918.png)'
- en: it looks like many players were capable of 200 hits a season. How about if we
    look at those players that could also get over 40 home runs in a season?
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来很多球员每赛季都能达到200次击球。如果我们看看那些在赛季中还能超过40次本垒打的球员呢？
- en: '[PRE14]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![](img/7a05a0ac-505e-45b1-9a7a-74d3dbb572f4.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7a05a0ac-505e-45b1-9a7a-74d3dbb572f4.png)'
- en: It's a very small list. I know that player names are somewhat mangled, but you
    can recognize a few, such as Babe Ruth.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常小的清单。我知道球员的名字有些混乱，但你可以认出一些，比如贝贝·卢斯（Babe Ruth）。
- en: I wonder if any of the players hit over 300 times in a season.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我想知道有没有球员在一个赛季中击中超过300次。
- en: '[PRE15]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![](img/d42cbf4f-24fc-450f-b567-4371a9f56c67.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d42cbf4f-24fc-450f-b567-4371a9f56c67.png)'
- en: It's interesting that no records met our `filter`, but the results handler requires
    a number of columns, and throws an error, as in this case there are none. Usually,
    errors in R are due to programming errors. It is unusual for R to generate an
    error for what I think would be normal no result data.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，没有记录符合我们的`filter`条件，但结果处理程序需要一些列，并抛出错误，因为在这种情况下没有列。通常，R中的错误是由于编程错误造成的。R很少因我认为正常的无结果数据而生成错误。
- en: Adding a column to a data frame
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向数据框添加列
- en: 'The `mutate` function can be used to add a column to a data frame using the
    familiar R programming syntax you have seen elsewhere. In this case, we are adding
    a column to the data frame that has the percentage of time the player got a hit
    when at bat:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`mutate`函数可以使用您在其他地方看到过的熟悉的R编程语法向数据框添加列。在本例中，我们正在向数据框添加一个列，该列显示球员上场击中的百分比：'
- en: '[PRE16]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![](img/8137e49a-8240-409f-9537-93270d4f2fe9.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8137e49a-8240-409f-9537-93270d4f2fe9.png)'
- en: 'You can see the new column on the right in the preceding display. If we run
    a `summary`, we will get a summary of all fields (including the new `hitpct`):'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在上面的显示中看到右侧的新列。如果我们运行`summary`，我们将得到所有字段（包括新的`hitpct`）的汇总：
- en: '[PRE17]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '![](img/95a85481-9c45-430c-a92d-75106f42aced.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/95a85481-9c45-430c-a92d-75106f42aced.png)'
- en: With the max at `1.0`, that would mean some players got a hit every time they
    were at bat. Similarly, those with `0.0` never got a hit. It looks like a narrow
    range in the 20% area. Assume the `1.0` is one at bat and one hit, as all the
    other values are measured in multiple decimal points.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 最大值为`1.0`，这意味着一些球员每次上场都能击中。同样地，那些值为`0.0`的球员从未击中。看起来在20%范围内有一个狭窄的区间。假设`1.0`表示一次上场一次击中，因为所有其他值都是用多个小数点来衡量的。
- en: Obtaining a summary on a calculated field
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在计算字段上获得汇总
- en: 'We can arrive more directly at the summary value for the column using the `summarize`
    function. The function takes a data frame and a singular calculated result. We
    can see the same result using the script as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`summarize`函数更直接地得到列的汇总值。该函数接受一个数据框和一个计算出的结果。我们可以通过以下脚本看到相同的结果：
- en: '[PRE18]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '![](img/e62ff202-0a34-42e0-be83-16cd0b7abfa5.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e62ff202-0a34-42e0-be83-16cd0b7abfa5.png)'
- en: Piping data between functions
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在函数之间进行数据传输
- en: We can obtain the same results by *piping* the data between functions. Piping
    is denoted using the symbols `%>%` in R programming. It is available from the
    `magrittr` package. The piping symbols are normally thought of as synonyms for
    *then* in English. For example, the R statement `data %>% function()` means take
    the data object and then pass it along to the `function()`, just as if we had
    entered the statement `function(data)`.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过*piping*数据在函数之间传递来获得相同的结果。在R编程中，使用符号`%>%`来表示管道。它是从`magrittr`包中获取的。管道符号通常被认为是英语中*then*的同义词。例如，R语句`data
    %>% function()`意味着获取数据对象，然后将其传递给`function()`，就像我们输入了语句`function(data)`一样。
- en: 'To produce the same summary on a calculated field using piping, we would write
    the following (meaning take the `pct` dataset and then pipe it into the `summarize`
    function, and take the `hitpct` field and pipe it into the mean function):'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用管道对计算字段进行相同的汇总，我们将编写以下内容（意思是获取`pct`数据集，然后将其管道传递到`summarize`函数，并获取`hitpct`字段并将其管道传递给均值函数）：
- en: '[PRE19]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Obtaining the 99% quantile
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获得99%分位数
- en: 'We can look at the cut-off for the 99% mark using the `quantile()` function.
    Using the same sample data, we could use:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`quantile()`函数查看99%分界点的值。使用相同的样本数据，我们可以使用：
- en: '[PRE20]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This would have corresponding output:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生相应的输出：
- en: '[PRE21]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: So, the hit percentage of 47% is the cutoff for the 99% level of the data. Given
    that the three-quarter percentile was at 28% (as in the preceding `hitpct` graphic),
    there is quite a range of performance for that last quarter of data points—that
    is, there are some great baseball players.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，47%的击球率是数据中99%水平的分界点。考虑到三分之四的百分位数是28%（如前面的`hitpct`图示），最后四分之一的数据点的表现差异很大——也就是说，确实有一些优秀的棒球选手。
- en: 'We could get a list of those players in the top 25% of the hit percentage using:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下方法列出那些在击球率前25%的球员：
- en: '[PRE22]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: If the players are arranged by hit percentage in descending order, then the
    players with perfect hit ratios are displayed, but they all had under 10 at bats.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如果球员按击球率降序排列，则会显示出击球率完美的球员，但他们的打击次数都不到10次。
- en: 'We can see the data points as follows:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以如下查看数据点：
- en: '![](img/9d3a65bd-f463-49e1-89d2-0411916ac7a9.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9d3a65bd-f463-49e1-89d2-0411916ac7a9.png)'
- en: So, we have 200 (`198`) players in the top 25% of our dataset, meaning that
    1% of the players are in the top 25% of hit performance. I did not think the data
    would be that lopsided.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们在数据集中排名前25%的有200个（`198`）球员，这意味着1%的球员位于击球表现的前25%。我没想到数据会如此失衡。
- en: Obtaining a summary on grouped data
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取分组数据的摘要
- en: Okay, the preceding steps tell us something about individual players. There
    is always the argument that team *X* is always better than everyone else. What
    if we could get a hit percentage by team and compare the results?
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，前面的步骤告诉我们一些关于单个球员的信息。总有一种说法，*X队*总是比其他队更强。那么如果我们能按团队获得击球率并进行比较呢？
- en: 'In this example, we are grouping the players by team and then computing an
    average hit percentage for the entire team:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们按团队对球员进行分组，然后计算整个团队的平均击球率：
- en: '[PRE23]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '![](img/15ab6c7a-dc74-475b-aa0a-0c77147d12db.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/15ab6c7a-dc74-475b-aa0a-0c77147d12db.png)'
- en: 'So, who were the best teams ever? We can order the data by the teams'' hit
    percentages (the `-teamhitpct` clause means that the results should be arranged
    in descending order) using:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，历史上最强的队伍是谁呢？我们可以通过队伍的击球率对数据进行排序（`-teamhitpct`子句意味着结果应该按降序排列），方法如下：
- en: '[PRE24]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '![](img/2198b3f7-9cc5-46e7-b314-9f0187ea0d5c.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2198b3f7-9cc5-46e7-b314-9f0187ea0d5c.png)'
- en: I'm not sure what the CNU team is; I assume it is an earlier Chicago team. The
    others are recognizable as Philadelphia, Toronto, and Boston.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我不确定CNU队是什么，我猜它是一个早期的芝加哥队。其他队伍可以识别为费城、多伦多和波士顿。
- en: 'We can find the top percentile of teams using the `quantile` function that
    we used previously for player hit performance:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用之前为球员击球表现使用过的`quantile`函数，找出排名前几的队伍：
- en: '[PRE25]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'This gives us the following result:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给我们以下结果：
- en: '[PRE26]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Comparing this to the previous table, we can see that only two teams (out of
    130) are in the top performance group (which is about the 1% mark).
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 与前面的表格相比，我们可以看到只有两个队伍（在130个队伍中）位于顶尖表现组（大约是1%的水平）。
- en: Tidying up data with tidyr
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用tidyr整理数据
- en: 'The `tidyr` package is available to clean up/tidy your dataset. The use of
    `tidyr` is to rearrange your data so that:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`tidyr`包可用于清理/整理你的数据集。`tidyr`的作用是重新排列你的数据，使其：'
- en: Each column is a variable
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每一列是一个变量
- en: Each row is an observation
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每一行是一个观察值
- en: When your data is arranged in this manner, it becomes much easier to analyze.
    There are many datasets published that mix columns and rows with values. You then
    must adjust them accordingly if you use the data in situ.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的数据以这种方式排列时，分析起来会容易得多。有很多数据集发布时混合了列和行以及数值。如果你在实际应用中使用这些数据，你就必须根据需要进行调整。
- en: '`tidyr` provides three functions for cleaning up your data:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`tidyr`提供了三个函数来清理你的数据：'
- en: '`gather`'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gather`'
- en: '`separate`'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`separate`'
- en: '`spread`'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spread`'
- en: 'The `gather()` function takes your data and arranges the data into key-value
    pairs, much like the Hadoop database model. Let''s use the standard example of
    stock prices for a date using the following:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`gather()`函数将你的数据整理成键值对，类似于Hadoop数据库模型。我们使用股票价格在某个日期的标准例子，数据如下：'
- en: '[PRE27]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'This will generate data that looks like this:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成如下的数据：
- en: '![](img/b3cb9fa5-88a7-4fe6-b012-2a5bfc4c1fb5.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b3cb9fa5-88a7-4fe6-b012-2a5bfc4c1fb5.png)'
- en: Every row has a timestamp and the prices of the three stocks at that time.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 每一行都有一个时间戳和当时三个股票的价格。
- en: 'We first use `gather()` to split out key-value pairs for the stocks. The `gather()`
    function is called with the data frame that it will work with, the output column
    names, and the columns to ignore (`-time`). So we get a row with the distinct
    time, stock, and prices using the following:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先使用`gather()`将股票的键值对拆分出来。`gather()`函数与其将处理的数据框、输出列名以及需要忽略的列（`-time`）一起调用。因此，我们可以使用以下方法获得一个包含不同时间、股票和价格的行：
- en: '[PRE28]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'This will generate the following `head()` display:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成如下的`head()`显示：
- en: '![](img/feff73a6-bc34-4586-8b17-f14f3d07d910.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](img/feff73a6-bc34-4586-8b17-f14f3d07d910.png)'
- en: The `separate()` function is used to split apart values that are in the same
    entry points.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '`separate()`函数用于拆分同一条目点中的值。'
- en: 'We will use Dow Jones Index history about industrial prices from UCI ([https://archive.ics.uci.edu/ml/datasets/Dow+Jones+Index](https://archive.ics.uci.edu/ml/datasets/Dow+Jones+Index)):'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用来自UCI的道琼斯工业价格历史数据（[https://archive.ics.uci.edu/ml/datasets/Dow+Jones+Index](https://archive.ics.uci.edu/ml/datasets/Dow+Jones+Index)）：
- en: '[PRE29]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: We are only interested in the `stock`, `date`, and `close` columns.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只关注`stock`、`date`和`close`列。
- en: '![](img/0aee2ec6-dd2c-4bac-b243-7abf360b1b6b.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0aee2ec6-dd2c-4bac-b243-7abf360b1b6b.png)'
- en: So, we have the date already gathered to start with (if we had disorganized
    data to start with, we would have used `gather` to organize it up to this point).
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们已经收集了日期数据以开始（如果我们一开始有未整理的数据，我们会使用`gather`函数将其整理到此为止）。
- en: 'The `spread()` function will take the key-value pairs (from the `gather()`
    function) and separate out the values into multiple columns. We call `spread()`
    using the data frame containing our source date, the values to use for our columns,
    and the data points for each date/column. Continuing with our example, we can
    spread out all of the securities by date using:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '`spread()`函数将从`gather()`函数得到的键值对拆分成多个列。我们使用包含源数据框的日期、作为列的值以及每个日期/列的数据点来调用`spread()`。继续我们的示例，我们可以使用以下方法按日期展开所有证券：'
- en: '[PRE30]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'This results in the following `summary` display (shortened to just the first
    few securities):'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这会导致如下的`summary`显示（缩短为仅显示前几个证券）：
- en: '![](img/4a4ba21d-98c7-4247-bdf4-fa386875bdb8.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4a4ba21d-98c7-4247-bdf4-fa386875bdb8.png)'
- en: 'It also results in the following `head` display, showing the prices of all
    the securities by date:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 它还会产生如下的`head`显示，按日期显示所有证券的价格：
- en: '![](img/5aeb3b09-73c3-4a90-b704-84af48fdc495.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5aeb3b09-73c3-4a90-b704-84af48fdc495.png)'
- en: 'We can also similarly reorganize the data by listing all prices for a stock
    per row using:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过列出每行股票的所有价格来以类似的方式重新组织数据，使用：
- en: '[PRE31]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Here, our row driver is the stock, the column heading is the date value, and
    the data point for each stock/date is the closing price of the security on that
    date.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们的行驱动项是股票，列标题是日期值，而每个股票/日期的数据点是该日期证券的收盘价。
- en: 'From the `summary` (abbreviated), we can see the following:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 从`summary`（简化版）中，我们可以看到以下内容：
- en: '![](img/0f5399d2-b45a-4445-839c-c6d8d1bce274.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0f5399d2-b45a-4445-839c-c6d8d1bce274.png)'
- en: 'The following is the `head` sample showing the data in our desired format:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是显示我们所需格式的`head`示例：
- en: '![](img/49bff9b4-ab28-452a-9dd5-ec2150a54cde.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![](img/49bff9b4-ab28-452a-9dd5-ec2150a54cde.png)'
- en: Summary
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we read in CSV files and performed a quick analysis of the
    data, including visualizations to help understand the data. Next, we considered
    some of the functions available in the `dplyr` package, including drawing a glimpse
    of the ranges of the data items, sampling a dataset, filtering out data, adding
    columns using mutate, and producing a summary. While doing so, we also started
    to use piping to more easily transfer the results of one operation into another
    operation. Lastly, we looked into the `tidyr` package to clean or tidy up our
    data into distinct columns and observations using the associated gather, separate,
    and spread functions.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们读取了CSV文件并进行了快速数据分析，包括可视化以帮助理解数据。接下来，我们考虑了`dplyr`包中的一些函数，包括绘制数据项范围的概览、对数据集进行采样、筛选数据、使用mutate添加列以及生成摘要。在此过程中，我们还开始使用管道操作，便于将一个操作的结果传递到另一个操作中。最后，我们研究了`tidyr`包，通过使用相应的gather、separate和spread函数，将数据整理成独立的列和观测值。
- en: In the next chapter, we will look at producing a dashboard under Jupyter.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将查看如何在Jupyter下生成仪表板。
