- en: Chapter 9. Unsupervised Learning with MLlib
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章  使用MLlib进行无监督学习
- en: This chapter will cover how we can do unsupervised learning using MLlib, Spark's
    machine learning library.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍如何使用MLlib、Spark的机器学习库进行无监督学习。
- en: 'This chapter is divided into the following recipes:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章分为以下几个部分：
- en: Clustering using k-means
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用k-means进行聚类
- en: Dimensionality reduction with principal component analysis
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用主成分分析进行降维
- en: Dimensionality reduction with singular value decomposition
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用奇异值分解进行降维
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: 'The following is Wikipedia''s definition of unsupervised learning:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是维基百科对无监督学习的定义：
- en: '*"In machine learning, the problem of unsupervised learning is that of trying
    to find hidden structure in unlabeled data."*'
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*"在机器学习中，无监督学习的问题是尝试在未标记的数据中找到隐藏的结构。"*'
- en: 'In contrast to supervised learning where we have labeled data to train an algorithm,
    in unsupervised learning we ask the algorithm to find a structure on its own.
    Let''s take a look at the following sample dataset:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 与监督学习相比，我们有标记数据来训练算法，在无监督学习中，我们要求算法自行找到结构。让我们来看下面的样本数据集：
- en: '![Introduction](img/3056_09_01.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![介绍](img/3056_09_01.jpg)'
- en: 'As you can see from the preceding graph, the data points are forming two clusters
    as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 从上图可以看出，数据点形成了两个簇，如下所示：
- en: '![Introduction](img/3056_09_02.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![介绍](img/3056_09_02.jpg)'
- en: In fact, clustering is the most common type of unsupervised learning algorithm.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，聚类是最常见的无监督学习算法类型。
- en: Clustering using k-means
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用k-means进行聚类
- en: Cluster analysis or clustering is the process of grouping data into multiple
    groups so that the data in one group is similar to the data in other groups.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 聚类分析或聚类是将数据分成多个组的过程，使得一组中的数据类似于其他组中的数据。
- en: 'The following are a few examples where clustering is used:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是聚类使用的一些示例：
- en: '**Market segmentation**: Dividing the target market into multiple segments
    so that the needs of each segment can be served better'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**市场细分**：将目标市场分成多个细分，以便更好地满足每个细分的需求'
- en: '**Social network analysis**: Finding a coherent group of people in the social
    network for ad targeting through a social networking site such as Facebook'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**社交网络分析**：通过社交网络网站（如Facebook）找到社交网络中一致的人群进行广告定位'
- en: '**Data center computing clusters**: Putting a set of computers together to
    improve performance'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据中心计算集群**：将一组计算机放在一起以提高性能'
- en: '**Astronomical data analysis**: Understanding astronomical data and events
    such as galaxy formations'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**天文数据分析**：理解天文数据和事件，如星系形成'
- en: '**Real estate**: Identifying neighborhoods based on similar features'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**房地产**：根据相似特征识别社区'
- en: '**Text analysis**: Dividing text documents, such as novels or essays, into
    genres'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文本分析**：将小说或散文等文本文档分成流派'
- en: 'The k-means algorithm is best illustrated using imagery, so let''s look at
    our sample figure again:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: k-means算法最好通过图像来说明，所以让我们再次看看我们的样本图：
- en: '![Clustering using k-means](img/3056_09_01.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![使用k-means进行聚类](img/3056_09_01.jpg)'
- en: 'The first step in k-means is to randomly select two points called **cluster
    centroids**:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: k-means的第一步是随机选择两个点，称为**聚类中心**：
- en: '![Clustering using k-means](img/3056_09_03.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![使用k-means进行聚类](img/3056_09_03.jpg)'
- en: 'The k-means algorithm is an iterative algorithm and works in two steps:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: k-means算法是一个迭代算法，分为两个步骤：
- en: '**Cluster assignment step**: This algorithm will go through each data point
    and, depending upon which centroid it is nearer to, it will be assigned that centroid
    and, in turn, the cluster it represents'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**簇分配步骤**：该算法将遍历每个数据点，并根据其距离更近的质心，将其分配给该质心，从而分配给它代表的簇'
- en: '**Move centroid step**: This algorithm will take each centroid and move it
    to the mean of the data points in the cluster'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**移动质心步骤**：该算法将取每个质心并将其移动到簇中数据点的平均值'
- en: 'Let''s see how our data looks after the cluster assignment:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看在簇分配后我们的数据是什么样子：
- en: '![Clustering using k-means](img/3056_09_04.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![使用k-means进行聚类](img/3056_09_04.jpg)'
- en: 'Now let''s move the cluster centroids to the mean value of the data points
    in a cluster, as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们将聚类中心移动到簇中数据点的平均值，如下所示：
- en: '![Clustering using k-means](img/3056_09_05.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![使用k-means进行聚类](img/3056_09_05.jpg)'
- en: In this case, one iteration is enough and further iterations will not move the
    cluster centroids. For most real data, multiple iterations are required to move
    the centroid to the final position.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，一次迭代就足够了，进一步的迭代不会移动聚类中心。对于大多数真实数据，需要多次迭代才能将质心移动到最终位置。
- en: The k-means algorithm takes a number of clusters as input.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: k-means算法需要输入一定数量的簇。
- en: Getting ready
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Let''s use some different housing data from the City of Saratoga, CA. This
    time, we are going to take lot size and house price:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用加利福尼亚州萨拉托加市的一些不同的住房数据。这次，我们将考虑地块面积和房价：
- en: '| Lot size | House price (in $1,000) |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: 地块面积 | 房价（以千美元计）
- en: '| --- | --- |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '--- | ---'
- en: '| 12839 | 2405 |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: 12839 | 2405
- en: '| 10000 | 2200 |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: 10000 | 2200
- en: '| 8040 | 1400 |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: 8040 | 1400
- en: '| 13104 | 1800 |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: 13104 | 1800
- en: '| 10000 | 2351 |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: 10000 | 2351
- en: '| 3049 | 795 |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: 3049 | 795
- en: '| 38768 | 2725 |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: 38768 | 2725
- en: '| 16250 | 2150 |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: 16250 | 2150
- en: '| 43026 | 2724 |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: 43026 | 2724
- en: '| 44431 | 2675 |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: 44431 | 2675
- en: '| 40000 | 2930 |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: 40000 | 2930
- en: '| 1260 | 870 |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: 1260 | 870
- en: '| 15000 | 2210 |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: 15000 | 2210
- en: '| 10032 | 1145 |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: 10032 | 1145
- en: '| 12420 | 2419 |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: 12420 | 2419
- en: '| 69696 | 2750 |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: 69696 | 2750
- en: '| 12600 | 2035 |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: 12600 | 2035
- en: '| 10240 | 1150 |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: 10240 | 1150
- en: '| 876 | 665 |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: 876 | 665
- en: '| 8125 | 1430 |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: 8125 | 1430
- en: '| 11792 | 1920 |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: 11792 | 1920
- en: '| 1512 | 1230 |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: 1512 | 1230
- en: '| 1276 | 975 |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: 1276 | 975
- en: '| 67518 | 2400 |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: 67518 | 2400
- en: '| 9810 | 1725 |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: 9810 | 1725
- en: '| 6324 | 2300 |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: 6324 | 2300
- en: '| 12510 | 1700 |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: 12510 | 1700
- en: '| 15616 | 1915 |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: 15616 | 1915
- en: '| 15476 | 2278 |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: 15476 | 2278
- en: '| 13390 | 2497.5 |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: 13390 | 2497.5
- en: '| 1158 | 725 |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: 1158 | 725
- en: '| 2000 | 870 |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: 2000 | 870
- en: '| 2614 | 730 |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: 2614 | 730
- en: '| 13433 | 2050 |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: 13433 | 2050
- en: '| 12500 | 3330 |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: 12500 | 3330
- en: '| 15750 | 1120 |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: 15750 | 1120
- en: '| 13996 | 4100 |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: 13996 | 4100
- en: '| 10450 | 1655 |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: 10450 | 1655
- en: '| 7500 | 1550 |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: 7500 | 1550
- en: '| 12125 | 2100 |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: 12125 | 2100
- en: '| 14500 | 2100 |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: 14500 | 2100
- en: '| 10000 | 1175 |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: 10000 | 1175
- en: '| 10019 | 2047.5 |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: 10019 | 2047.5
- en: '| 48787 | 3998 |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: 48787 | 3998
- en: '| 53579 | 2688 |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| 53579 | 2688 |'
- en: '| 10788 | 2251 |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| 10788 | 2251 |'
- en: '| 11865 | 1906 |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| 11865 | 1906 |'
- en: 'Let''s convert this data into a **comma-separated value** (**CSV**) file called
    `saratoga.c` `sv` and draw it as a scatter plot:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将这些数据转换为一个名为`saratoga.c` `sv`的逗号分隔值（CSV）文件，并将其绘制为散点图：
- en: '![Getting ready](img/3056_09_06.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![准备工作](img/3056_09_06.jpg)'
- en: 'Finding a number of clusters is a tricky task. Here, we have the advantage
    of visual inspection, which is not available for data on hyperplanes (more than
    three dimensions). Let''s roughly divide the data into four clusters as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 找到簇的数量是一项棘手的任务。在这里，我们有视觉检查的优势，而对于超平面上的数据（超过三个维度），这是不可用的。让我们粗略地将数据分成四个簇，如下所示：
- en: '![Getting ready](img/3056_09_07.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![准备工作](img/3056_09_07.jpg)'
- en: We will run the k-means algorithm to do the same and see how close our results
    come.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将运行k-means算法来做同样的事情，并看看我们的结果有多接近。
- en: How to do it…
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Load `sarataga.csv` to HDFS:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`sarataga.csv`加载到HDFS：
- en: '[PRE0]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Start the Spark shell:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Spark shell：
- en: '[PRE1]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Import statistics and related classes:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入统计和相关类：
- en: '[PRE2]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Load `saratoga.csv` as an RDD:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`saratoga.csv`作为RDD加载：
- en: '[PRE3]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Transform the data into an RDD of dense vectors:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将数据转换为密集向量的RDD：
- en: '[PRE4]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Train the model for four clusters and five iterations:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为四个簇和五次迭代训练模型：
- en: '[PRE5]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Collect `parsedData` as a local scala collection:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`parsedData`收集为本地scala集合：
- en: '[PRE6]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Predict the cluster for the 0th element:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 预测第0个元素的簇：
- en: '[PRE7]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now let''s compare the cluster assignments by k-means versus the ones we have
    done individually. The k-means algorithm gives the cluster IDs starting from 0\.
    Once you inspect the data, you find out the following mapping between the A to
    D cluster IDs we gave versus k-means: A=>3, B=>1, C=>0, D=>2.'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们比较k-means与我们单独完成的簇分配。k-means算法从0开始给出簇ID。一旦你检查数据，你会发现我们给出的A到D簇ID与k-means之间的以下映射：A=>3,
    B=>1, C=>0, D=>2。
- en: Now, let's pick some of the data from different parts of the chart and predict
    which cluster it belongs to.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们从图表的不同部分挑选一些数据，并预测它属于哪个簇。
- en: 'Let''s look at the house (18) data, which has a lot size of 876 sq ft and is
    priced at $665K:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们看看房屋（18）的数据，占地面积为876平方英尺，售价为665K美元：
- en: '[PRE8]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, look at the data for house (35) with a lot size of 15,750 sq ft and a
    price of $1.12 million:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，看看占地面积为15,750平方英尺，价格为1.12百万美元的房屋（35）的数据：
- en: '[PRE9]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now look at the house (6) data, which has a lot size of 38,768 sq ft and is
    priced at $2.725 million:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在看看房屋（6）的数据，占地面积为38,768平方英尺，售价为2.725百万美元：
- en: '[PRE10]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now look at the house (15) data, which has a lot size of 69,696 sq ft and is
    priced at $2.75 million:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在看看房屋（15）的数据，占地面积为69,696平方英尺，售价为275万美元：
- en: '[PRE11]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You can test the prediction capability with more data. Let's do some neighborhood
    analysis to see what meaning these clusters carry. Most of the houses in cluster
    3 are near downtown. The cluster 2 houses are on hilly terrain.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以用更多的数据测试预测能力。让我们进行一些邻域分析，看看这些簇承载着什么含义。簇3中的大多数房屋都靠近市中心。簇2中的房屋位于多山的地形上。
- en: In this example, we dealt with a very small set of features; common sense and
    visual inspection would also lead us to the same conclusions. The beauty of the
    k-means algorithm is that it does the clustering on the data with an unlimited
    number of features. It is a great tool to use when you have a raw data and would
    like to know the patterns in that data.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们处理了一组非常小的特征；常识和视觉检查也会导致相同的结论。k-means算法的美妙之处在于它可以对具有无限数量特征的数据进行聚类。当你有原始数据并想了解数据中的模式时，它是一个很好的工具。
- en: Dimensionality reduction with principal component analysis
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用主成分分析进行降维
- en: Dimensionality reduction is the process of reducing the number of dimensions
    or features. A lot of real data contains a very high number of features. It is
    not uncommon to have thousands of features. Now, we need to drill down to features
    that matter.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 降维是减少维度或特征数量的过程。很多真实数据包含非常多的特征。拥有成千上万个特征并不罕见。现在，我们需要深入研究重要的特征。
- en: 'Dimensionality reduction serves several purposes such as:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 降维有几个目的，比如：
- en: Data compression
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据压缩
- en: Visualization
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可视化
- en: When the number of dimensions is reduced, it reduces the disk footprint and
    memory footprint. Last but not least; it helps algorithms to run much faster.
    It also helps reduce highly correlated dimensions to one.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 当维度减少时，它会减少磁盘占用和内存占用。最后但同样重要的是；它可以帮助算法运行得更快。它还可以将高度相关的维度减少到一个维度。
- en: Humans can only visualize three dimensions, but data can have a much higher
    number of dimensions. Visualization can help find hidden patterns in the data.
    Dimensionality reduction helps visualization by compacting multiple features into
    one.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 人类只能可视化三个维度，但数据可以拥有更高的维度。可视化可以帮助发现数据中隐藏的模式。降维可以通过将多个特征压缩成一个特征来帮助可视化。
- en: The most popular algorithm for dimensionality reduction is **principal component
    analysis** (**PCA**).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 降维最流行的算法是主成分分析（PCA）。
- en: 'Let''s look at the following dataset:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看以下数据集：
- en: '![Dimensionality reduction with principal component analysis](img/3056_09_08.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![使用主成分分析进行降维](img/3056_09_08.jpg)'
- en: 'Let''s say the goal is to divide this two-dimensional data into one dimension.
    The way to do that would be to find a line on which we can project this data.
    Let''s find a line that is good for projecting this data on:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 假设目标是将这个二维数据分成一维。做法是找到一条我们可以将这些数据投影到的线。让我们找一条适合将这些数据投影的线：
- en: '![Dimensionality reduction with principal component analysis](img/3056_09_09.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![使用主成分分析进行降维](img/3056_09_09.jpg)'
- en: 'This is the line that has the shortest projected distance from the data points.
    Let''s explain it further by dropping the shortest lines from each data point
    to this projected line:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这是与数据点具有最短投影距离的线。让我们通过从每个数据点到这条投影线的最短线来进一步解释：
- en: '![Dimensionality reduction with principal component analysis](img/3056_09_10.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![使用主成分分析进行降维](img/3056_09_10.jpg)'
- en: Another way to look at it is that we have to find a line to project the data
    on so that the sum of the square distances of the data points from this line is
    minimized. These gray line segments are also called **projection errors**.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种看待的方式是，我们必须找到一条线来投影数据，使得数据点到这条线的平方距离之和最小化。这些灰色线段也被称为**投影误差**。
- en: Getting ready
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备好了
- en: Let's look at the three features of the housing data of the City of Saratoga,
    CA—that is, house size, lot size, and price. Using PCA, we will merge the house
    size and lot size features into one feature— *z*. Let's call this feature **z
    density of a house**.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看萨拉托加市的房屋数据的三个特征，即房屋大小、地块大小和价格。使用PCA，我们将房屋大小和地块大小特征合并为一个特征—*z*。让我们称这个特征为**房屋密度**。
- en: It is worth noting that it is not always possible to give meaning to the new
    feature created. In this case, it is easy as we have only two features to combine
    and we can use our common sense to combine the effect of the two. In a more practical
    case, you may have 1,000 features that you are trying to project to 100 features.
    It may not be possible to give real-life meaning to each of those 100 features.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，并不总是可能赋予新特征以意义。在这种情况下，很容易，因为我们只有两个特征要合并，我们可以用常识来结合这两者的效果。在更实际的情况下，您可能有1000个特征要投影到100个特征。可能不可能给这100个特征中的每一个赋予现实生活中的意义。
- en: In this exercise, we will derive the housing density using PCA and then we will
    do linear regression to see how this density affects the house price.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将使用PCA推导出房屋密度，然后我们将进行线性回归，看看这个密度如何影响房价。
- en: 'There is a preprocessing stage before we delve into PCA: **feature scaling**.
    Feature scaling comes into the picture when two features have ranges that are
    at very different scales. Here, house size varies in the range of 800 sq ft to
    7,000 sq ft, while the lot size varies between 800 sq ft to a few acres.'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入PCA之前有一个预处理阶段：**特征缩放**。当两个特征的范围相差很大时，特征缩放就会出现。在这里，房屋大小的范围在800平方英尺到7000平方英尺之间变化，而地块大小在800平方英尺到几英亩之间变化。
- en: Why did we not have to do feature scaling before? The answer is that we really
    did not have to put features on a level playing field. Gradient descent is another
    area where feature scaling is very useful.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么我们之前不需要进行特征缩放？答案是我们真的不需要让特征处于一个公平的水平上。梯度下降是另一个特征缩放非常有用的领域。
- en: 'There are different ways of doing feature scaling:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 有不同的特征缩放方法：
- en: Dividing a feature value with a maximum value that will put every feature in
    the ![Getting ready](img/3056_09_22.jpg) range
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将特征值除以最大值，这将使每个特征处于![Getting ready](img/3056_09_22.jpg)范围内
- en: Dividing a feature value with the range, that is, maximum value - minimum value
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将特征值除以范围，即最大值减最小值
- en: Subtracting a feature value by its mean and then dividing by the range
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过减去特征值的平均值，然后除以范围
- en: Subtracting a feature value by its mean and then dividing by the standard deviation
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过减去特征值的平均值，然后除以标准差
- en: 'We are going to use the fourth choice to scale in the best way possible. The
    following is the data we are going to use for this recipe:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用最佳的第四种选择来进行缩放。以下是我们将用于此示例的数据：
- en: '| House size | Lot size | Scaled house size | Scaled lot size | House price
    (in $1,000) |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| 房屋大小 | 地块大小 | 缩放后的房屋大小 | 缩放后的地块大小 | 房屋价格（以1000美元计） |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| 2524 | 12839 | -0.025 | -0.231 | 2405 |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| 2524 | 12839 | -0.025 | -0.231 | 2405 |'
- en: '| 2937 | 10000 | 0.323 | -0.4 | 2200 |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| 2937 | 10000 | 0.323 | -0.4 | 2200 |'
- en: '| 1778 | 8040 | -0.654 | -0.517 | 1400 |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| 1778 | 8040 | -0.654 | -0.517 | 1400 |'
- en: '| 1242 | 13104 | -1.105 | -0.215 | 1800 |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| 1242 | 13104 | -1.105 | -0.215 | 1800 |'
- en: '| 2900 | 10000 | 0.291 | -0.4 | 2351 |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| 2900 | 10000 | 0.291 | -0.4 | 2351 |'
- en: '| 1218 | 3049 | -1.126 | -0.814 | 795 |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| 1218 | 3049 | -1.126 | -0.814 | 795 |'
- en: '| 2722 | 38768 | 0.142 | 1.312 | 2725 |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| 2722 | 38768 | 0.142 | 1.312 | 2725 |'
- en: '| 2553 | 16250 | -0.001 | -0.028 | 2150 |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| 2553 | 16250 | -0.001 | -0.028 | 2150 |'
- en: '| 3681 | 43026 | 0.949 | 1.566 | 2724 |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| 3681 | 43026 | 0.949 | 1.566 | 2724 |'
- en: '| 3032 | 44431 | 0.403 | 1.649 | 2675 |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| 3032 | 44431 | 0.403 | 1.649 | 2675 |'
- en: '| 3437 | 40000 | 0.744 | 1.385 | 2930 |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| 3437 | 40000 | 0.744 | 1.385 | 2930 |'
- en: '| 1680 | 1260 | -0.736 | -0.92 | 870 |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| 1680 | 1260 | -0.736 | -0.92 | 870 |'
- en: '| 2260 | 15000 | -0.248 | -0.103 | 2210 |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| 2260 | 15000 | -0.248 | -0.103 | 2210 |'
- en: '| 1660 | 10032 | -0.753 | -0.398 | 1145 |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| 1660 | 10032 | -0.753 | -0.398 | 1145 |'
- en: '| 3251 | 12420 | 0.587 | -0.256 | 2419 |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| 3251 | 12420 | 0.587 | -0.256 | 2419 |'
- en: '| 3039 | 69696 | 0.409 | 3.153 | 2750 |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| 3039 | 69696 | 0.409 | 3.153 | 2750 |'
- en: '| 3401 | 12600 | 0.714 | -0.245 | 2035 |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| 3401 | 12600 | 0.714 | -0.245 | 2035 |'
- en: '| 1620 | 10240 | -0.787 | -0.386 | 1150 |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| 1620 | 10240 | -0.787 | -0.386 | 1150 |'
- en: '| 876 | 876 | -1.414 | -0.943 | 665 |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| 876 | 876 | -1.414 | -0.943 | 665 |'
- en: '| 1889 | 8125 | -0.56 | -0.512 | 1430 |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| 1889 | 8125 | -0.56 | -0.512 | 1430 |'
- en: '| 4406 | 11792 | 1.56 | -0.294 | 1920 |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| 4406 | 11792 | 1.56 | -0.294 | 1920 |'
- en: '| 1885 | 1512 | -0.564 | -0.905 | 1230 |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| 1885 | 1512 | -0.564 | -0.905 | 1230 |'
- en: '| 1276 | 1276 | -1.077 | -0.92 | 975 |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| 1276 | 1276 | -1.077 | -0.92 | 975 |'
- en: '| 3053 | 67518 | 0.42 | 3.023 | 2400 |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| 3053 | 67518 | 0.42 | 3.023 | 2400 |'
- en: '| 2323 | 9810 | -0.195 | -0.412 | 1725 |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| 2323 | 9810 | -0.195 | -0.412 | 1725 |'
- en: '| 3139 | 6324 | 0.493 | -0.619 | 2300 |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| 3139 | 6324 | 0.493 | -0.619 | 2300 |'
- en: '| 2293 | 12510 | -0.22 | -0.251 | 1700 |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| 2293 | 12510 | -0.22 | -0.251 | 1700 |'
- en: '| 2635 | 15616 | 0.068 | -0.066 | 1915 |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| 2635 | 15616 | 0.068 | -0.066 | 1915 |'
- en: '| 2298 | 15476 | -0.216 | -0.074 | 2278 |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| 2298 | 15476 | -0.216 | -0.074 | 2278 |'
- en: '| 2656 | 13390 | 0.086 | -0.198 | 2497.5 |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| 2656 | 13390 | 0.086 | -0.198 | 2497.5 |'
- en: '| 1158 | 1158 | -1.176 | -0.927 | 725 |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| 1158 | 1158 | -1.176 | -0.927 | 725 |'
- en: '| 1511 | 2000 | -0.879 | -0.876 | 870 |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| 1511 | 2000 | -0.879 | -0.876 | 870 |'
- en: '| 1252 | 2614 | -1.097 | -0.84 | 730 |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| 1252 | 2614 | -1.097 | -0.84 | 730 |'
- en: '| 2141 | 13433 | -0.348 | -0.196 | 2050 |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| 2141 | 13433 | -0.348 | -0.196 | 2050 |'
- en: '| 3565 | 12500 | 0.852 | -0.251 | 3330 |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| 3565 | 12500 | 0.852 | -0.251 | 3330 |'
- en: '| 1368 | 15750 | -0.999 | -0.058 | 1120 |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| 1368 | 15750 | -0.999 | -0.058 | 1120 |'
- en: '| 5726 | 13996 | 2.672 | -0.162 | 4100 |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| 5726 | 13996 | 2.672 | -0.162 | 4100 |'
- en: '| 2563 | 10450 | 0.008 | -0.373 | 1655 |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| 2563 | 10450 | 0.008 | -0.373 | 1655 |'
- en: '| 1551 | 7500 | -0.845 | -0.549 | 1550 |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| 1551 | 7500 | -0.845 | -0.549 | 1550 |'
- en: '| 1993 | 12125 | -0.473 | -0.274 | 2100 |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
  zh: '| 1993 | 12125 | -0.473 | -0.274 | 2100 |'
- en: '| 2555 | 14500 | 0.001 | -0.132 | 2100 |'
  id: totrans-190
  prefs: []
  type: TYPE_TB
  zh: '| 2555 | 14500 | 0.001 | -0.132 | 2100 |'
- en: '| 1572 | 10000 | -0.827 | -0.4 | 1175 |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
  zh: '| 1572 | 10000 | -0.827 | -0.4 | 1175 |'
- en: '| 2764 | 10019 | 0.177 | -0.399 | 2047.5 |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '| 2764 | 10019 | 0.177 | -0.399 | 2047.5 |'
- en: '| 7168 | 48787 | 3.887 | 1.909 | 3998 |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '| 7168 | 48787 | 3.887 | 1.909 | 3998 |'
- en: '| 4392 | 53579 | 1.548 | 2.194 | 2688 |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '| 4392 | 53579 | 1.548 | 2.194 | 2688 |'
- en: '| 3096 | 10788 | 0.457 | -0.353 | 2251 |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| 3096 | 10788 | 0.457 | -0.353 | 2251 |'
- en: '| 2003 | 11865 | -0.464 | -0.289 | 1906 |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| 2003 | 11865 | -0.464 | -0.289 | 1906 |'
- en: Let's take the scaled house size and scaled house price data and save it as
    `scaledhousedata.csv`.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '让我们将经过缩放的房屋大小和经过缩放的房价数据保存为`scaledhousedata.csv`。 '
- en: How to do it…
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'Load `scaledhousedata.csv` to HDFS:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`scaledhousedata.csv`加载到HDFS：
- en: '[PRE12]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Start the Spark shell:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Spark shell：
- en: '[PRE13]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Import statistics and related classes:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入统计和相关类：
- en: '[PRE14]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Load `saratoga.csv` as an RDD:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`saratoga.csv`加载为一个RDD：
- en: '[PRE15]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Transform the data into an RDD of dense vectors:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将数据转换为密集向量的RDD：
- en: '[PRE16]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Create a `RowMatrix` from `parsedData`:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`parsedData`创建一个`RowMatrix`：
- en: '[PRE17]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Compute one principal component:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算一个主成分：
- en: '[PRE18]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Project the rows to the linear space spanned by the principal component:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将行投影到由主成分张成的线性空间：
- en: '[PRE19]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Convert the projected `RowMatrix` back to the RDD:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将投影的`RowMatrix`转换回RDD：
- en: '[PRE20]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Save `projectedRDD` back to HDFS:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`projectedRDD`保存回HDFS：
- en: '[PRE21]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now we will use this projected feature, which we decided to call housing density,
    plot it against the house price, and see whether any new pattern emerges:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将使用这个投影特征，我们决定称之为住房密度，将其与房价绘制在一起，看看是否出现任何新的模式：
- en: 'Download the HDFS directory `phdata` to the local directory `phdata`:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将HDFS目录`phdata`下载到本地目录`phdata`：
- en: '[PRE22]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Trim start and end brackets in the data and load the data into MS Excel, next
    to the house price.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修剪数据中的起始和结束括号，并将数据加载到MS Excel中，放在房价旁边。
- en: 'The following is the plot of the house price versus the housing density:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是房价与住房密度的图表：
- en: '![How to do it…](img/3056_09_11.jpg)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![如何做到这一点…](img/3056_09_11.jpg)'
- en: 'Let''s draw some patterns in this data as follows:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下数据画一些模式：
- en: '![How to do it…](img/3056_09_12.jpg)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![如何做到这一点…](img/3056_09_12.jpg)'
- en: What patterns do we see here? For moving from a very high-density to low-density
    housing, people are ready to pay a heavy premium. As the housing density reduces,
    this premium flattens out. For example, people will pay a heavy premium to move
    from condominiums and town-homes to a single-family home, but the premium on a
    single- family home with a 3-acre lot size is not going to be much different from
    a single-family house with a 2-acre lot size in a comparable built-up area.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里看到了什么模式？从高密度到低密度住房的转移，人们愿意支付高昂的溢价。随着住房密度的降低，这种溢价趋于平稳。例如，人们愿意支付高额溢价，从公寓和联排别墅搬到独栋住宅，但是在一个可比的建成区域内，拥有3英亩地块大小的独栋住宅与拥有2英亩地块大小的独栋住宅的溢价并不会有太大的不同。
- en: Dimensionality reduction with singular value decomposition
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 奇异值分解降维
- en: Often, the original dimensions do not represent data in the best way possible.
    As we saw in PCA, you can, sometimes, project the data to fewer dimensions and
    still retain most of the useful information.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，原始维度并不能最好地表示数据。正如我们在PCA中看到的，有时可以将数据投影到更少的维度，仍然保留大部分有用的信息。
- en: Sometimes, the best approach is to align dimensions along the features that
    exhibit most of the variations. This approach helps to eliminate dimensions that
    are not representative of the data.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，最好的方法是沿着展现大部分变化的特征对齐维度。这种方法有助于消除不代表数据的维度。
- en: 'Let''s look at the following figure again, which shows the best-fit line on
    two dimensions:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次看一下下图，它显示了两个维度上的最佳拟合线：
- en: '![Dimensionality reduction with singular value decomposition](img/3056_09_10.jpg)'
  id: totrans-232
  prefs: []
  type: TYPE_IMG
  zh: '![奇异值分解降维](img/3056_09_10.jpg)'
- en: 'The projection line shows the best approximation of the original data with
    one dimension. If we take the points where the gray line is intersecting with
    the black line and isolates the black line, we will have a reduced representation
    of the original data with as much variation retained as possible, as shown in
    the following figure:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 投影线显示了对原始数据的最佳近似，使用了一个维度。如果我们取灰线与黑线相交的点，并隔离黑线，我们将得到原始数据的减少表示，尽可能保留了尽可能多的变化，如下图所示：
- en: '![Dimensionality reduction with singular value decomposition](img/3056_09_13.jpg)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![奇异值分解降维](img/3056_09_13.jpg)'
- en: 'Let''s draw a line perpendicular to the first projection line, as shown in
    the following figure:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们画一条垂直于第一投影线的线，如下图所示：
- en: '![Dimensionality reduction with singular value decomposition](img/3056_09_14.jpg)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![奇异值分解降维](img/3056_09_14.jpg)'
- en: This line captures as much variation as possible along the second dimension
    of the original dataset. It does a bad job at approximating the original data
    as this dimension exhibits less variation to start with. It is possible to use
    these projection lines to generate a set of uncorrelated data points that will
    show subgroupings in the original data, not visible at first glance.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 这条线尽可能多地捕捉了原始数据集的第二维度上的变化。它在近似原始数据方面做得不好，因为这个维度本来就变化较少。可以使用这些投影线来生成一组不相关的数据点，这些数据点将显示原始数据中一开始看不到的子分组。
- en: This is the basic idea behind SVD. Take a high dimension, a highly variable
    set of data points, and reduce it to a lower dimensional space that exposes the
    structure of the original data more clearly and orders it from the most variation
    to the least. What makes SVD very useful, especially for NLP application, is that
    you can simply ignore variation below a certain threshold to massively reduce
    the original data, making sure that the original relationship interests are retained.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是SVD的基本思想。将高维度、高变异性的数据点集合减少到一个更低维度的空间，更清晰地展现原始数据的结构，并按照变化最大到最小的顺序排列。SVD非常有用的地方，尤其是对于NLP应用，是可以简单地忽略某个阈值以下的变化，从而大幅减少原始数据，确保保留原始关系的兴趣。
- en: 'Let''s get slightly into the theory now. SVD is based on a theorem from linear
    algebra that a rectangular matrix A can be broken down into a product of three
    matrices—an orthogonal matrix U, a diagonal matrix S, and the transpose of an
    orthogonal matrix V. We can show it as follows:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们稍微深入理论。SVD基于线性代数中的一个定理，即一个矩阵A可以分解为三个矩阵的乘积——一个正交矩阵U，一个对角矩阵S，和一个正交矩阵V的转置。我们可以如下展示：
- en: '![Dimensionality reduction with singular value decomposition](img/3056_09_15.jpg)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![奇异值分解降维](img/3056_09_15.jpg)'
- en: '*U* and *V* are orthogonal matrices:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '*U*和*V*是正交矩阵：'
- en: '![Dimensionality reduction with singular value decomposition](img/3056_09_16.jpg)![Dimensionality
    reduction with singular value decomposition](img/3056_09_17.jpg)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![奇异值分解降维](img/3056_09_16.jpg)![奇异值分解降维](img/3056_09_17.jpg)'
- en: The columns of *U* are orthonormal eigenvectors of ![Dimensionality reduction
    with singular value decomposition](img/3056_09_18.jpg) and the columns of *V*
    are orthonormal eigenvectors of ![Dimensionality reduction with singular value
    decomposition](img/3056_09_19.jpg). *S* is a diagonal matrix containing the square
    roots of eigenvalues from *U* or *V* in descending order.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '*U*的列是![奇异值分解降维](img/3056_09_18.jpg)的正交归一化特征向量，*V*的列是![奇异值分解降维](img/3056_09_19.jpg)的正交归一化特征向量。*S*是一个对角矩阵，按降序包含来自*U*或*V*的特征值的平方根。'
- en: Getting ready
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'Let''s look at an example of a term-document matrix. We are going to look at
    two new items about the US presidential elections. The following are the links
    to the two documents:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个术语-文档矩阵的例子。我们将看两篇关于美国总统选举的新闻。以下是两篇文章的链接：
- en: '**Fox**: [http://www.foxnews.com/politics/2015/03/08/top-2016-gop-presidential-hopefuls-return-to-iowa-to-hone-message-including/](http://www.foxnews.com/politics/2015/03/08/top-2016-gop-presidential-hopefuls-return-to-iowa-to-hone-message-including/)'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Fox**: [http://www.foxnews.com/politics/2015/03/08/top-2016-gop-presidential-hopefuls-return-to-iowa-to-hone-message-including/](http://www.foxnews.com/politics/2015/03/08/top-2016-gop-presidential-hopefuls-return-to-iowa-to-hone-message-including/)'
- en: '**Npr**: [http://www.npr.org/blogs/itsallpolitics/2015/03/09/391704815/in-iowa-2016-has-begun-at-least-for-the-republican-party](http://www.npr.org/blogs/itsallpolitics/2015/03/09/391704815/in-iowa-2016-has-begun-at-least-for-the-republican-party)'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Npr**: [http://www.npr.org/blogs/itsallpolitics/2015/03/09/391704815/in-iowa-2016-has-begun-at-least-for-the-republican-party](http://www.npr.org/blogs/itsallpolitics/2015/03/09/391704815/in-iowa-2016-has-begun-at-least-for-the-republican-party)'
- en: 'Let''s build the presidential candidate matrix out of these two news items:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用这两条新闻构建总统候选人矩阵：
- en: '![Getting ready](img/3056_09_20.jpg)![Getting ready](img/3056_09_21.jpg)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/3056_09_20.jpg)![准备就绪](img/3056_09_21.jpg)'
- en: Let's put this matrix in a CSV file and then put it in HDFS. We will apply SVD
    to this matrix and analyze the results.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们把这个矩阵放在一个CSV文件中，然后把它放在HDFS中。我们将对这个矩阵应用SVD并分析结果。
- en: How to do it…
  id: totrans-251
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Load `scaledhousedata.csv` to HDFS:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`scaledhousedata.csv`加载到HDFS中：
- en: '[PRE23]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Start the Spark shell:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Spark shell：
- en: '[PRE24]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Import statistics and related classes:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入统计和相关类：
- en: '[PRE25]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Load `pres.csv` as an RDD:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`pres.csv`加载为RDD：
- en: '[PRE26]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Transform data into an RDD of dense vectors:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将数据转换为密集向量的RDD：
- en: '[PRE27]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Create a `RowMatrix` from `parsedData`:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`parsedData`创建`RowMatrix`：
- en: '[PRE28]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Compute `svd`:'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算`svd`：
- en: '[PRE29]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Calculate the `U` factor (eigenvector):'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算`U`因子（特征向量）：
- en: '[PRE30]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Calculate the matrix of singular values (eigenvalues):'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算奇异值（特征值）矩阵：
- en: '[PRE31]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Calculate the `V` factor (eigenvector):'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算`V`因子（特征向量）：
- en: '[PRE32]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: If you look at `s`, you will realize that it gave a much higher score to the
    Npr article than to the Fox article.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看`S`，你会意识到它给Npr文章的评分比Fox文章高得多。
