- en: '*Chapter 6*: Creating Your First Pipeline'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第6章*：创建你的第一个管道'
- en: In [*Chapter 3*](B17085_03_Final_SB_Epub.xhtml#_idTextAnchor055), *Pachyderm
    Pipeline Specification*, we learned about the Pachyderm pipeline specification
    and what parameters you can configure in it. The pipeline specification is the
    most critical configuration piece of your pipeline, along with your code. In this
    chapter, we will learn how to create a Pachyderm pipeline that performs image
    processing. We will walk through all the steps that are involved in this process,
    including creating the Pachyderm repository, creating a pipeline, viewing the
    results of our computations, and adding an extra step to our original pipeline.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第3章*](B17085_03_Final_SB_Epub.xhtml#_idTextAnchor055)中，我们学习了Pachyderm管道规范以及你可以在其中配置的参数。管道规范是管道中最关键的配置部分，与代码一起使用。在本章中，我们将学习如何创建一个执行图像处理的Pachyderm管道。我们将详细介绍这一过程的所有步骤，包括创建Pachyderm仓库、创建管道、查看计算结果，并在原有管道中添加一个额外步骤。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Pipeline overview
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管道概述
- en: Creating a repository
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建仓库
- en: Creating a pipeline specification
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建管道规范
- en: Viewing the pipeline result
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看管道结果
- en: Adding another pipeline step
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加另一个管道步骤
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This chapter requires that you have access to the following components and that
    they are installed and configured.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章要求你具备以下组件，并确保它们已安装和配置。
- en: 'For a local macOS installation, you will need the following:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本地macOS安装，你需要以下内容：
- en: macOS Mojave, Catalina, Big Sur, or later
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: macOS Mojave、Catalina、Big Sur或更高版本
- en: Docker Desktop for Mac 10.14
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Desktop for Mac 10.14
- en: '`minikube` v1.19.0 or later'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`minikube` v1.19.0 或更高版本'
- en: '`pachctl` 2.0.x or later'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pachctl` 2.0.x 或更高版本'
- en: Pachyderm 2.0.x or later
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pachyderm 2.0.x 或更高版本
- en: 'For a local Windows installation, you will need the following:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本地Windows安装，你需要以下内容：
- en: Windows Pro 64-bit v10 or later
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows Pro 64位 v10 或更高版本
- en: '**Windows Subsystem for Linux** (**WSL**) 2 or later'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Windows Subsystem for Linux**（**WSL**）2 或更高版本'
- en: Microsoft Powershell v6.2.1 or later
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Microsoft Powershell v6.2.1 或更高版本
- en: Hyper-V
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Hyper-V
- en: '`minikube` v1.19.0 or later'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`minikube` v1.19.0 或更高版本'
- en: '`kubectl` v1.18 or later'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kubectl` v1.18 或更高版本'
- en: '`pachctl` 2.0.x or later'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pachctl` 2.0.x 或更高版本'
- en: Pachyderm 2.0.x or later
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pachyderm 2.0.x 或更高版本
- en: 'For an **Amazon Elastic Kubernetes Service** (**Amazon EKS**) installation,
    you will need the following:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 对于**Amazon Elastic Kubernetes Service**（**Amazon EKS**）安装，你需要以下内容：
- en: '`kubectl` v.18 or later'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kubectl` v.18 或更高版本'
- en: '`eksctl`'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`eksctl`'
- en: '`aws-iam-authenticator`'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`aws-iam-authenticator`'
- en: '`pachctl` 2.0.x or later'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pachctl` 2.0.x 或更高版本'
- en: Pachyderm 2.0.x or later
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pachyderm 2.0.x 或更高版本
- en: 'For a Microsoft Azure cloud installation, you will need the following:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Microsoft Azure云安装，你需要以下内容：
- en: '`kubectl` v.18 or later'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kubectl` v.18 或更高版本'
- en: The Azure CLI
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure CLI
- en: '`pachctl` 2.0.x or later'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pachctl` 2.0.x 或更高版本'
- en: Pachyderm 2.0.x or later
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pachyderm 2.0.x 或更高版本
- en: '`jq` 1.5 or later'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jq` 1.5 或更高版本'
- en: 'For a **Google Kubernetes Engine** (**GKE**) cloud installation, you will need
    the following:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 对于**Google Kubernetes Engine**（**GKE**）云安装，你需要以下内容：
- en: Google Cloud SDK v124.0.0\. or later
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google Cloud SDK v124.0.0 或更高版本
- en: '`kubectl` v.18 or later'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kubectl` v.18 或更高版本'
- en: '`pachctl` 2.0.x or later'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pachctl` 2.0.x 或更高版本'
- en: Pachyderm 2.0.x or later
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pachyderm 2.0.x 或更高版本
- en: You do not need any special hardware to be able to run the pipelines in this
    chapter. If you are running your Pachyderm cluster locally, any modern laptop
    should support all the operations in this chapter. If you are running Pachyderm
    in a cloud platform, you will need to have a **Persistent Volume** (**PV**). See
    [*Chapter 5*](B17085_05_Final_SB_Epub.xhtml#_idTextAnchor123), *Installing Pachyderm
    on a Cloud Platform*, for more details.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要任何特殊硬件来运行本章中的管道。如果你在本地运行Pachyderm集群，任何现代笔记本电脑都应支持本章中的所有操作。如果你在云平台上运行Pachyderm，你需要一个**持久卷**（**PV**）。更多细节请参见[*第5章*](B17085_05_Final_SB_Epub.xhtml#_idTextAnchor123)，*在云平台上安装Pachyderm*。
- en: All the scripts and data described in this chapter are available at [https://github.com/PacktPublishing/Reproducible-Data-Science-with-Pachyderm/tree/main/Chapter06-Creating-Your-First-Pipeline](https://github.com/PacktPublishing/Reproducible-Data-Science-with-Pachyderm/tree/main/Chapter06-Creating-Your-First-Pipeline).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中描述的所有脚本和数据可以在[https://github.com/PacktPublishing/Reproducible-Data-Science-with-Pachyderm/tree/main/Chapter06-Creating-Your-First-Pipeline](https://github.com/PacktPublishing/Reproducible-Data-Science-with-Pachyderm/tree/main/Chapter06-Creating-Your-First-Pipeline)获取。
- en: Now that we have reviewed the technical requirements for this chapter, let's
    take a closer look at our pipeline.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经回顾了本章的技术要求，接下来让我们更深入地了解我们的管道。
- en: Pipeline overview
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管道概述
- en: In [*Chapter 4*](B17085_04_Final_SB_Epub.xhtml#_idTextAnchor096), *Installing
    Pachyderm Locally*, and [*Chapter 5*](B17085_05_Final_SB_Epub.xhtml#_idTextAnchor123),
    *Installing Pachyderm on a Cloud Platform*, we learned how to deploy Pachyderm
    locally or on a cloud platform. By now, you should have some version of Pachyderm
    up and running, either on your computer or a cloud platform. Now, let's create
    our first pipeline.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第4章*](B17085_04_Final_SB_Epub.xhtml#_idTextAnchor096)《*本地安装Pachyderm*》和[*第5章*](B17085_05_Final_SB_Epub.xhtml#_idTextAnchor123)《*在云平台上安装Pachyderm*》中，我们学习了如何在本地或云平台上部署Pachyderm。到现在为止，你应该已经在自己的电脑或云平台上运行了某个版本的Pachyderm。现在，让我们创建我们的第一个管道。
- en: A Pachyderm pipeline is a technique that processes data from a Pachyderm input
    repository or repositories and uploads it to a Pachyderm output repository. Every
    time new data is uploaded to the input repository, the pipeline automatically
    processes it. Every time new data lands in the repository, it is recorded as a
    commit hash and can be accessed, rerun, or analyzed later. Therefore, a pipeline
    is an essential component of the Pachyderm ecosystem that ensures the reproducibility
    of your data science workloads.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Pachyderm管道是一种技术，它处理来自Pachyderm输入仓库或多个输入仓库的数据，并将其上传到Pachyderm输出仓库。每次新的数据上传到输入仓库时，管道会自动处理这些数据。每次新的数据进入仓库时，它会被记录为一个提交哈希，可以稍后访问、重新运行或分析。因此，管道是Pachyderm生态系统中的一个重要组件，确保数据科学工作负载的可复现性。
- en: To get you started quickly, we have prepared a simple example of image processing
    that will draw a contour on an image. A contour is an outline that represents
    the shape of an object. This is a useful technique that is often applied to image
    processing pipelines.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助你快速入门，我们准备了一个简单的图像处理示例，它将在图像上绘制轮廓。轮廓是表示物体形状的外框。这是一项常用于图像处理管道的有用技术。
- en: Image processing is a widely used technique that enables you to enhance the
    quality of images, transform an image into another image, extract various information
    about an image, and so on. With machine learning, you can set up pipelines that
    can determine objects in an image, create a histogram of an image, and so on.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图像处理是一项广泛使用的技术，它可以增强图像质量、将图像转换为另一张图像、提取图像的各种信息等。通过机器学习，你可以建立管道来确定图像中的物体、生成图像的直方图等。
- en: There are many open source libraries that you can use for advanced image processing,
    with the most famous among them being **OpenCV** and **scikit-image**. Both of
    these libraries are widely used by machine learning experts for various image
    processing tasks.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多开源库可用于高级图像处理，其中最著名的是**OpenCV**和**scikit-image**。这两个库广泛应用于机器学习专家的各种图像处理任务。
- en: For this example, we will use scikit-image. Scikit-image, or `skimage`, is an
    open-source image processing library that enables you to run various image processing
    algorithms to analyze and transform images. Scikit-image is built to work with
    the Python programming language.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将使用scikit-image。scikit-image或`skimage`是一个开源图像处理库，允许你运行各种图像处理算法来分析和转换图像。scikit-image是专门为Python编程语言设计的。
- en: 'In this example, we will use scikit-image with a couple of other open source
    components, including the following:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将使用scikit-image和其他几个开源组件，包括以下内容：
- en: '**NumPy**: An open source Python library that enables you to work with arrays.
    When you need to analyze or segment an image, it must be transformed into an array
    for processing.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NumPy**：一个开源的Python库，帮助你处理数组。当你需要分析或分割图像时，图像必须先转换为数组才能进行处理。'
- en: '**Matplotlib**: An extension to NumPy that enables you to plot images and create
    data visualizations.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Matplotlib**：一个扩展NumPy的库，帮助你绘制图像并创建数据可视化。'
- en: We will create a pipeline that will consume the data from the `photos` repository,
    run a `contour.py` script against the images in the `photos` repository, and upload
    the result to the `contour` output repository.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个管道，使用来自`photos`仓库的数据，运行一个`contour.py`脚本来处理`photos`仓库中的图像，并将结果上传到`contour`输出仓库。
- en: 'The following diagram explains our pipeline:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表解释了我们的管道：
- en: '![](img/B17085_06_001.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17085_06_001.jpg)'
- en: Figure 6.1 – Contour pipeline
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.1 – 轮廓管道
- en: 'The following code explains the `contour.py` script:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码解释了`contour.py`脚本：
- en: '[PRE0]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The preceding script contains a function called `create_contours`. This function
    does the following:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的脚本包含一个名为`create_contours`的函数。该函数执行以下操作：
- en: First, it reads the image file from the `pfs/photos` repository and converts
    it into a grayscale image. This is needed to transform a color image (RGB) into
    a two-dimensional NumPy array.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，它从`pfs/photos`仓库中读取图像文件，并将其转换为灰度图像。这是因为需要将彩色图像（RGB）转换为二维的NumPy数组。
- en: Then, it uses the `measure.find_contours` API method from the `skimage.measure.find_contours`
    module to find the contour of the two-dimensional array that we converted our
    image into at a value of 0.9\. This value represents the position between light
    and dark tones. Typically, it's best to use a middle value, but in this case,
    0.9 created the best results.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，它使用`measure.find_contours` API方法，这个方法来自`skimage.measure.find_contours`模块，用于在值为0.9的位置找到我们将图像转换成的二维数组的轮廓。这个值代表了明暗之间的位置。通常，最好使用一个中间值，但在这个例子中，0.9得到了最佳结果。
- en: Then, it defined subplots to visualize our image and saved it in the `pfs/out`
    directory, which, in reality, will be the `pfs/out/contour` output repository.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，它定义了子图以可视化我们的图像，并将其保存在`pfs/out`目录中，实际上，这将是`pfs/out/contour`输出仓库。
- en: The last part of the script tells the program to apply the `create_contours`
    function to all the files in the `pfs/photos` repository.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 脚本的最后一部分告诉程序将`create_contours`函数应用于`pfs/photos`仓库中的所有文件。
- en: This script is built into a Docker image that we will use to run our pipeline.
    This Docker image is hosted in Docker Hub.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本内置在一个Docker镜像中，我们将使用它来运行我们的管道。这个Docker镜像托管在Docker Hub上。
- en: 'We will use the following images from freepik.com for processing. The first
    image is an image of a brown vase:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用来自freepik.com的以下图像进行处理。第一张图像是棕色花瓶的图像：
- en: '![](img/B17085_06_002.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17085_06_002.jpg)'
- en: Figure 6.2 – Brown vase
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.2 – 棕色花瓶
- en: 'The second image is an image of a hand:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 第二张图像是手的图像：
- en: '![](img/B17085_06_003.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17085_06_003.jpg)'
- en: Figure 6.3 – Hand
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.3 – 手
- en: 'Finally, the third image is an image of a landscape:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，第三张图像是风景的图像：
- en: '![](img/B17085_06_004.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17085_06_004.jpg)'
- en: Figure 6.4 – Landscape
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.4 – 风景
- en: As you can see, these are some simple images where finding the contours should
    be easy. You can try to run this pipeline against more complex images and see
    the results you'll get. In general, the more contrast you have between the elements
    in the image, the more precise contours the algorithm will be able to find.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这些是一些简单的图像，找出轮廓应该很容易。你可以尝试将这个管道应用于更复杂的图像，看看你能得到什么结果。一般来说，图像中元素之间的对比度越大，算法能找到的轮廓就越精确。
- en: Now that we understand the example we are working on, let's go ahead and create
    a repository.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经理解了正在处理的示例，让我们继续创建一个仓库吧。
- en: Creating a repository
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个仓库
- en: The first step in creating your pipeline is to create a Pachyderm repository
    and put some data in it. As you probably remember from [*Chapter 2*](B17085_02_Final_SB_Epub.xhtml#_idTextAnchor037),
    *Pachyderm Basics*, a Pachyderm repository is a location inside of a Pachyderm
    cluster where you store your data. We will be creating an input repository, and
    the pipeline will automatically create an output repository on the first run.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 创建管道的第一步是创建一个Pachyderm仓库并将一些数据放入其中。正如你可能还记得的，[*第2章*](B17085_02_Final_SB_Epub.xhtml#_idTextAnchor037)《Pachyderm基础》，Pachyderm仓库是Pachyderm集群中的一个位置，用于存储数据。我们将创建一个输入仓库，管道将在第一次运行时自动创建一个输出仓库。
- en: 'To create an input repository, perform the following steps:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个输入仓库，请执行以下步骤：
- en: Log into your Terminal.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到你的终端。
- en: 'Verify that Pachyderm is up and running:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证Pachyderm是否已启动并运行：
- en: '[PRE1]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You should see an output similar to the following:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到类似以下的输出：
- en: '[PRE2]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `pachd` component must list a version.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`pachd`组件必须列出一个版本。'
- en: 'Create a Pachyderm input repository called `photos`:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`photos`的Pachyderm输入仓库：
- en: '[PRE3]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: No output will be returned.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 不会返回任何输出。
- en: 'Verify that the `photos` repository was created:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证`photos`仓库是否已经创建：
- en: '[PRE4]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You should see the following output:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '[PRE5]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Here, you can see that the `photos` repository was created and that it is empty.
    Although the size is counted for the master branch, at this point, no branches
    exist in this repository. Pachyderm will automatically create a specified branch
    when you put files in it.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以看到`photos`仓库已经创建，并且是空的。尽管主分支的大小被计算在内，但此时该仓库中没有分支。Pachyderm会在你放入文件时自动创建指定的分支。
- en: 'Put some images in the `photos` repository. We need to put the files into the
    root of our `photos` repository. To do this, you need to use the `-r` (recursive)
    flag and specify the path to the directory that contains the files on your computer.
    For example, if you have downloaded the files to a data folder on your computer,
    you need to run the following command:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将一些图片放入`photos`仓库中。我们需要将文件放入`photos`仓库的根目录中。为此，您需要使用`-r`（递归）标志，并指定包含文件的计算机目录路径。例如，如果您将文件下载到计算机上的数据文件夹中，则需要运行以下命令：
- en: '[PRE6]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The following is some sample output:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些示例输出：
- en: '[PRE7]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Pachyderm automatically creates the specified branch. In this example, Pachyderm
    creates the `master` branch. You could name the branch anything you want, but
    for simplicity, let's call it `master`. All the commands in this section are written
    with the `master` branch in mind.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Pachyderm会自动创建指定的分支。在此示例中，Pachyderm会创建`master`分支。您可以随意命名分支，但为了简便起见，我们称之为`master`。本节中的所有命令都假设使用`master`分支。
- en: 'Verify that the files were added to the repository:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证文件是否已添加到仓库：
- en: '[PRE8]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The following is some sample output:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些示例输出：
- en: '[PRE9]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Alternatively, you could place each file one by one by running the `pachctl
    put file` command for each image. For example, to place the `landscape.jpg` file,
    change the directory on your computer to `data` and use the following command:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 另外，您可以通过对每个图像运行`pachctl put file`命令，将每个文件逐一放入。例如，要放置`landscape.jpg`文件，请将计算机上的目录更改为`data`并使用以下命令：
- en: '[PRE10]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The following is some sample output:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些示例输出：
- en: '[PRE11]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Repeat this command for all image files.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 对所有图像文件重复此命令。
- en: Important note
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Make sure that the `TYPE` parameter in the output says `file` and not `dir`.
    Pachyderm does not distinguish between directories and files, and you use `-f`
    to put files in a directory or the root of the repository. If any of your files
    are listed as `dir`, you need to delete them by running `pachctl delete file photos@master:<path>`
    and start over. The pipeline will not work as expected if you place the files
    in the directories.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 确保输出中的`TYPE`参数显示为`file`而不是`dir`。Pachyderm不区分目录和文件，您需要使用`-f`将文件放入目录或仓库根目录。如果您的任何文件列出为`dir`，则需要通过运行`pachctl
    delete file photos@master:<path>`删除它们并重新开始。如果您将文件放在目录中，管道将无法按预期工作。
- en: Now that we have created a repository, let's create our pipeline specification.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了一个仓库，让我们创建我们的管道规范。
- en: Creating a pipeline specification
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建管道规范
- en: 'In the *Creating a repository* section, we created a repository called `photos`
    and put some test files in it. The pipeline specification for this example must
    reference the following elements:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在*创建仓库*部分中，我们创建了一个名为`photos`的仓库并放入了一些测试文件。此示例的管道规范必须引用以下元素：
- en: An input repository with data to process
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个包含待处理数据的输入仓库
- en: A computer program or a script that needs to run against your data
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要在您的数据上运行的计算机程序或脚本
- en: A glob pattern that specifies the datum granularity
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指定数据粒度的通配符模式
- en: A Docker image with built-in dependencies that contains your code
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含您的代码的具有内建依赖项的Docker镜像
- en: 'We have created a pipeline specification for you so that you can use it to
    create the pipeline. Here is what is in the pipeline specification file in the
    **YAML Ain''t Markup Language** (**YAML**) format:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经为您创建了一个管道规范，您可以用它来创建管道。以下是管道规范文件中的内容，格式为**YAML Ain't Markup Language**（**YAML**）：
- en: '[PRE12]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Let''s look at the pipeline specification in more detail. Here are the parameters
    in the pipeline:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地查看管道规范。以下是管道中的参数：
- en: '![](img/Table_01.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Table_01.jpg)'
- en: Figure 6.5 – Contour pipeline parameters
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.5 – Contour管道参数
- en: This pipeline specification does not include any optimization or other extra
    parameters. It is a minimum pipeline that will do the required computation for
    our example.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 此管道规范不包括任何优化或额外参数。它是一个最小管道，将执行我们示例所需的计算。
- en: 'To create a pipeline, perform the following steps:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建管道，请执行以下步骤：
- en: Log into your terminal.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到您的终端。
- en: 'Create the `contour` pipeline by running the following command:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令创建`contour`管道：
- en: '[PRE13]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: No output will be returned.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 不会返回任何输出。
- en: 'Verify that the pipeline has been created:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证管道是否已创建：
- en: '[PRE14]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The following is the system output:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是系统输出：
- en: '[PRE15]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: As soon as you create the pipeline, it will set its status to `running` and
    attempt to process the data in the input repository. You might also see that `LAST
    JOB` is set to starting or running.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你创建管道，它将把状态设置为 `running` 并尝试处理输入仓库中的数据。你可能还会看到 `LAST JOB` 的状态为 starting 或
    running。
- en: Important note
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Another important thing in the preceding output is the pipeline version. The
    version of our pipeline is `1`. If you change anything in your pipeline's YAML
    file and update your pipeline after that, the version counter will be updated
    to a subsequent number.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在前述输出中的另一个重要内容是管道版本。我们的管道版本是 `1`。如果你更改了管道 YAML 文件中的内容并进行了更新，版本号会更新为下一个数字。
- en: 'View the job that has been started for your pipeline:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看已经为你的管道启动的作业：
- en: '[PRE16]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The following is the system output:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是系统输出：
- en: '[PRE17]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The output of the `pachctl list job` command gives us the following information:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`pachctl list job` 命令的输出给出了以下信息：'
- en: '![](img/Table_02.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Table_02.jpg)'
- en: Figure 6.6 – Pipeline output explained
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.6 – 管道输出解释
- en: Now that our pipeline has run successfully, let's see the output in the output
    repository.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的管道已成功运行，让我们在输出仓库中查看结果。
- en: Viewing the pipeline result
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看管道结果
- en: Once your pipeline has finished running, you can view the result in the output
    repository. We will look at the output result in both the command line and the
    Pachyderm dashboard for visibility.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你的管道运行完毕，你可以在输出仓库中查看结果。我们将同时查看命令行和 Pachyderm 仪表板中的输出结果，以便进行查看。
- en: If you are using a local Pachyderm deployment with minikube, you need to enable
    port-forwarding before you can access the Pachyderm UI.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是本地的 Pachyderm 部署并且使用了 minikube，你需要启用端口转发才能访问 Pachyderm 用户界面。
- en: 'To view the pipeline result in the terminal, perform the following steps:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 要在终端中查看管道结果，请执行以下步骤：
- en: Log into your terminal.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到你的终端。
- en: 'Verify that the output repository called `contour` has been created:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证名为 `contour` 的输出仓库是否已创建：
- en: '[PRE18]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The following is the system output:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是系统输出：
- en: '[PRE19]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: As you can see, the `contour` repository has been created, and it contains 117.6
    KiB of data. If you are running Pachyderm locally, you can also preview what those
    files look like by running one of the following commands.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，`contour` 仓库已经创建，并且其中包含 117.6 KiB 的数据。如果你是在本地运行 Pachyderm，你还可以通过运行以下命令来预览这些文件的内容。
- en: 'If you are on macOS, run the following command to list the files in the output
    repository:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你使用的是 macOS，请运行以下命令列出输出仓库中的文件：
- en: '[PRE20]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The following is the system output:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是系统输出：
- en: '[PRE21]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now, pipe the `open` command to the `pachctl get file` command to open one
    of the images in the default preview application on your Mac. For example, to
    preview `hand.png`, run the following command:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将 `open` 命令与 `pachctl get file` 命令连接，打开 Mac 上默认的预览应用程序中显示的一张图片。例如，要预览 `hand.png`，请运行以下命令：
- en: '[PRE22]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'You should see the following output:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到以下输出：
- en: '![](img/B17085_06_007.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17085_06_007.jpg)'
- en: Figure 6.7 – Hand processed
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.7 – 手动处理
- en: Now, let's view the processed results in the UI. If you are running Pachyderm
    on a cloud provider, just point your browser to the IP address where the Pachyderm
    dashboard is running. If you are running Pachyderm in Pachyderm Hub, follow the
    instructions in Pachyderm Hub to access the console. If you are running Pachyderm
    locally in minikube, follow the remaining steps to enable port-forwarding.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在用户界面中查看处理后的结果。如果你是在云服务提供商上运行 Pachyderm，只需在浏览器中输入 Pachyderm 仪表板运行的 IP
    地址。如果你是在 Pachyderm Hub 上运行 Pachyderm，请按照 Pachyderm Hub 中的指示访问控制台。如果你是在本地的 minikube
    中运行 Pachyderm，请继续执行剩下的步骤以启用端口转发。
- en: Important note
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Unless you are running your experiments in Pachyderm Hub, the Pachyderm console
    is only available if you have deployed it. You need to have a trial or an enterprise
    license to deploy the Pachyderm console locally or in the cloud.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 除非你在 Pachyderm Hub 中运行实验，否则 Pachyderm 控制台仅在你已部署的情况下可用。你需要拥有试用版或企业版许可证，才能在本地或云中部署
    Pachyderm 控制台。
- en: Open a separate terminal window.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个独立的终端窗口。
- en: 'Enable port forwarding for your local Pachyderm deployment by running the following
    command:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令为本地 Pachyderm 部署启用端口转发：
- en: '[PRE23]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'You should see the following output:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到以下输出：
- en: '[PRE24]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: If you have used the default settings, the Pachyderm dashboard must load at
    http://localhost:30080.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是默认设置，Pachyderm 仪表板应在 http://localhost:30080 加载。
- en: Paste the dashboard IP address into a web browser.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将仪表板的 IP 地址粘贴到网页浏览器中。
- en: 'If you are prompted to log in, follow the onscreen instructions to do so. When
    you log in, you should see the following screen:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果系统提示您登录，请按照屏幕上的指示进行操作。登录后，您应该会看到以下界面：
- en: '![](img/B17085_06_008.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17085_06_008.jpg)'
- en: Figure 6.8 – Pachyderm Direct Acyclic Graph (DAG)
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.8 – Pachyderm直接无环图（DAG）
- en: This is a **Direct Acyclic Graph** (**DAG**) that's been created for the input
    and output repositories, as well as the pipeline.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个为输入和输出仓库以及管道创建的**直接无环图**（**DAG**）。
- en: 'Click on the contour output repository (the last one on the screen) and then
    click **View Files**:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击轮廓输出仓库（屏幕上的最后一个），然后点击**查看文件**：
- en: '![](img/B17085_06_009.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17085_06_009.jpg)'
- en: Figure 6.9 – Output repository information
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.9 – 输出仓库信息
- en: A list of files will appear.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 文件列表将会显示出来。
- en: 'Click `hand.png`:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`hand.png`：
- en: '![](img/B17085_06_010.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17085_06_010.jpg)'
- en: Figure 6.10 – Output file
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.10 – 输出文件
- en: You can preview all the resulting files from the UI in the same way. From here,
    the files can be either consumed by another pipeline or served outside of Pachyderm
    through an S3 Gateway, or the output repository can be mounted and accessible
    on a local disk. Let's look at what the other images should look like.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过UI预览所有结果文件。同样，这些文件可以由另一个管道消费，或者通过S3网关提供给Pachyderm之外的服务，或者输出仓库可以被挂载并在本地磁盘上访问。接下来，我们来看看其他图像应该是什么样子。
- en: 'You should see that the landscape image has changed, as follows:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到景观图像已发生变化，如下所示：
- en: '![](img/B17085_06_011.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17085_06_011.jpg)'
- en: Figure 6.11 – Processed landscape image
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.11 – 处理后的景观图像
- en: 'The `brown_vase.png` image should look like this:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '`brown_vase.png`图像应该如下所示：'
- en: '![](img/B17085_06_012.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17085_06_012.jpg)'
- en: Figure 6.12 – Processed vase image
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.12 – 处理后的花瓶图像
- en: In this section, we learned how to view the results of a pipeline. Now, let's
    add another pipeline step.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了如何查看管道的结果。现在，让我们添加另一个管道步骤。
- en: Adding another pipeline step
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加另一个管道步骤
- en: Pachyderm pipelines can be chained into multi-step workflows. For each step,
    you will need to have a separate pipeline specification and a Docker image if
    you are using one. In this section, we will add another step to our image processing
    workflow. We will use the `skimage.exposure.histogram` module to create histograms
    of all the images we have in our `contour` output repository.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: Pachyderm管道可以连接成多步骤工作流。对于每个步骤，您需要有单独的管道规范和一个Docker镜像（如果使用了的话）。在本节中，我们将为我们的图像处理工作流添加另一个步骤。我们将使用`skimage.exposure.histogram`模块为我们在`contour`输出仓库中的所有图像创建直方图。
- en: Example overview
  id: totrans-194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例概述
- en: A histogram is a visual representation of data that provides information about
    the image, such as the number of pixels, their intensity, and other information.
    Because we represent images as numerical data, we can create a histogram for each
    of the images we processed in the first step of our workflow – the contour pipeline.
    In this new step of the workflow, we will create histograms for each image that
    has landed in the `contour` output repository and save them in the `histogram`
    output repository in PNG format.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 直方图是数据的可视化表示，提供了有关图像的信息，如像素的数量、强度以及其他信息。由于我们将图像表示为数值数据，因此可以为我们在工作流第一步——轮廓管道中处理的每个图像创建一个直方图。在工作流的这一步中，我们将为每个已存入`contour`输出仓库的图像创建直方图，并将它们以PNG格式保存到`histogram`输出仓库中。
- en: 'Here is an example of a histogram that has been generated for the `hand.png`
    image:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 这是为`hand.png`图像生成的直方图示例：
- en: '![](img/B17085_06_013.jpg)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17085_06_013.jpg)'
- en: Figure 6.13 – Grayscale image histogram
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.13 – 灰度图像直方图
- en: The **y-axis** represents the count of pixels, while the **x-axis** represents
    the intensity of the pixels.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '**y 轴**表示像素的数量，而**x 轴**表示像素的强度。'
- en: 'Here is a diagram of the new two-step workflow, which includes the contour
    and histogram pipelines:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 这是包含轮廓和直方图管道的新两步工作流图：
- en: '![](img/B17085_06_014.jpg)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17085_06_014.jpg)'
- en: Figure 6.14 – Contour and histogram workflow
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.14 – 轮廓和直方图工作流
- en: The `histogram` pipeline will consume the files from the `contour` repository,
    create histograms for them, and output them to the `histogram` repository.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '`histogram`管道将从`contour`仓库中获取文件，为它们创建直方图，并将它们输出到`histogram`仓库。'
- en: Histogram creation script overview
  id: totrans-204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 直方图创建脚本概述
- en: In this pipeline step, we will use `histogram.yaml`, which will create a pipeline
    for us. The pipeline will run the `histogram.py` script.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在此管道步骤中，我们将使用`histogram.yaml`，它将为我们创建一个管道。该管道将运行`histogram.py`脚本。
- en: 'Let'' review the `histogram.py` script, which creates histograms from the file
    in the `contour` repository:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下 `histogram.py` 脚本，它从 `contour` 仓库中的文件创建直方图：
- en: '[PRE25]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'This script imports the following libraries:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 该脚本导入了以下库：
- en: '`skimage.io`: The `io` module from the scikit-image library enables read and
    write operations within your Python file. We need this module to read files from
    the contour repository.'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`skimage.io`：`io` 模块来自 scikit-image 库，它使我们能够在 Python 文件中进行读写操作。我们需要这个模块从 `contour`
    仓库中读取文件。'
- en: '`matploit.pyplot`: This Matplotlib interface enables us to plot our images.
    We use it to create the histogram, add labels to the x- and y-axis of the plot,
    and so on.'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`matploit.pyplot`：这个 Matplotlib 接口使我们能够绘制图像。我们使用它来创建直方图，为图表的 x 轴和 y 轴添加标签等等。'
- en: '`numpy`: We need NumPy to represent the image as an array and keep the number
    of bins in the required range.'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy`：我们需要 NumPy 将图像表示为数组，并保持所需范围内的柱状图数量。'
- en: '`os`: The `os` module from the standard Python library enables read and write
    operations with files. We need this module to read images from the Pachyderm contour
    repository and save our images in the correct output repository.'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`os`：Python 标准库中的 `os` 模块使我们能够进行文件的读写操作。我们需要这个模块从 Pachyderm 的 `contour` 仓库中读取图像，并将图像保存到正确的输出仓库中。'
- en: 'Let''s take a closer look at what the script does. The `create_histogram` function
    reads image files from the contour repository. Then, using the `matploit.pyplot.hist`
    (`plt.hist`) function, the script creates a histogram with the following parameters:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更仔细地看一下脚本的功能。`create_histogram` 函数从 `contour` 仓库中读取图像文件。然后，使用 `matploit.pyplot.hist`
    (`plt.hist`) 函数，脚本使用以下参数创建一个直方图：
- en: The `numpy.ravel` function converts our images from the 2D array into a 1D array,
    which is needed to plot a histogram.
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.ravel` 函数将图像从二维数组转换为一维数组，这对于绘制直方图是必要的。'
- en: The `bins` parameter defines the shape and distribution of vertical bars in
    your histogram. To distribute them evenly on the plot, we have a defined range
    by using the `np.arange` function.
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bins` 参数定义了直方图中垂直条形的形状和分布。为了在图表中均匀分布它们，我们使用 `np.arange` 函数定义了一个范围。'
- en: The `color='blue'` parameter defines the color of the histogram bins.
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`color=''blue''` 参数定义了直方图柱状图的颜色。'
- en: The `alpha=0.5` parameter defines the level of transparency.
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`alpha=0.5` 参数定义了透明度的级别。'
- en: The `rwidth=0.7` parameter defines the width of each bin.
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rwidth=0.7` 参数定义了每个柱状图的宽度。'
- en: The `plt.yscale('log')` parameter defines the logarithmic y-axis scale. We need
    this parameter to narrow the scale of the y-axis for better data visualization.
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`plt.yscale(''log'')` 参数定义了 y 轴的对数尺度。我们需要这个参数来缩小 y 轴的尺度，以便更好地进行数据可视化。'
- en: The `plt.margins(x=0.03, y=-0.05)` parameter determines the amount of whitespace
    between the histogram and the start of the plot.
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`plt.margins(x=0.03, y=-0.05)` 参数定义了直方图与图表起始位置之间的空白区域。'
- en: The `plt.xlabel('Intensity')` and `plt.ylabel('Count')` parameters define the
    labels for the x- and y-axes.
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`plt.xlabel(''Intensity'')` 和 `plt.ylabel(''Count'')` 参数定义了 x 轴和 y 轴的标签。'
- en: The `plt.savefig` function defines where to save the histogram. In our case,
    we will save it in the `pfs/out` directory, in which Pachyderm will automatically
    create a histogram repository under the `pfs/out/histogram` path.
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`plt.savefig` 函数定义了直方图的保存位置。在我们的例子中，我们将把它保存在 `pfs/out` 目录下，Pachyderm 会自动在 `pfs/out/histogram`
    路径下创建一个直方图仓库。'
- en: Important note
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重要说明
- en: In your scripts, you do not need to add the path to the repository, just to
    the `pfs/out` directory.
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在你的脚本中，你不需要添加仓库的路径，只需添加 `pfs/out` 目录的路径。
- en: Pipeline specification overview
  id: totrans-225
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 流水线规范概述。
- en: The `histogram.yaml` pipeline specification creates the histogram pipeline.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '`histogram.yaml` 流水线规范创建了直方图流水线。'
- en: 'Here is what our pipeline specification will look like:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是我们的流水线规范的样子：
- en: '[PRE26]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'This pipeline does the following:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 这个流水线的功能如下：
- en: Uploads the files stored in the `contour` repository as a single datum
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将存储在 `contour` 仓库中的文件上传为一个单独的数据项。
- en: Pulls the Docker image stored in Docker Hub under `svekars/histogram:1.0`
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Docker Hub 拉取存储的 Docker 镜像 `svekars/histogram:1.0`。
- en: Runs the `histogram.py` script against all the files that have been downloaded
    from the `contour` repository
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对从 `contour` 仓库下载的所有文件运行 `histogram.py` 脚本。
- en: Uploads the results of the transformation to the `histogram` output repository
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将转换结果上传到 `histogram` 输出仓库。
- en: Now that we have reviewed what goes into this pipeline, let's go ahead and create
    it.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经审查了流水线的内容，让我们继续创建它。
- en: Creating the pipeline
  id: totrans-235
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建流水线。
- en: The next step is to create the histogram pipeline, which will create a histogram
    for each image in the `photos` repository.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是创建直方图流水线，该流水线将为`photos`仓库中的每个图像创建一个直方图。
- en: 'Let''s create the second step of our workflow by using the `histogram.yaml`
    file:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过使用`histogram.yaml`文件创建工作流的第二个步骤：
- en: Log into your terminal.
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到终端。
- en: 'Verify that Pachyderm is up and running:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证 Pachyderm 是否已启动并运行：
- en: '[PRE27]'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The following is the system output:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是系统输出：
- en: '[PRE28]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: If `pachd` is unresponsive, you might need to run `minikube stop` and `minikube
    start` in a local installation to be able to resume working with it. If you are
    in a cloud environment, you will need to check your connection. If you are running
    Pachyderm in Pachyderm Hub, check that you are authenticated from the console
    and follow the onscreen instructions.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`pachd`没有响应，您可能需要在本地安装中运行`minikube stop`和`minikube start`，以便能够继续使用它。如果您在云环境中，您需要检查您的连接。如果您在
    Pachyderm Hub 中运行 Pachyderm，请检查您是否已经从控制台进行身份验证，并按照屏幕上的说明操作。
- en: 'Create the `histogram` pipeline:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`histogram`流水线：
- en: '[PRE29]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: No system output will be returned.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 不会返回系统输出。
- en: 'Verify that the pipeline was created:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证流水线是否已创建：
- en: '[PRE30]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The following is the system output:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是系统输出：
- en: '[PRE31]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: According to the preceding output, the histogram pipeline was created and is
    currently running the code.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的输出，直方图流水线已创建，并且当前正在运行代码。
- en: 'Get the list of repositories:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取仓库列表：
- en: '[PRE32]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The following is the system output:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是系统输出：
- en: '[PRE33]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The `histogram` output repository was created and contains 27.48 KiB of data.
    These are our histogram files.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '`histogram`输出仓库已创建，并包含 27.48 KiB 的数据。这些是我们的直方图文件。'
- en: 'List the files in the `histogram` repository:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出`histogram`仓库中的文件：
- en: '[PRE34]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The following is the system output:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是系统输出：
- en: '[PRE35]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: With that, our histogram visualizations have been added to the repository.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 到此，我们的直方图可视化已经被添加到仓库中。
- en: 'View the histogram files. For example, if you are on Mac, to view the `landscape.png`
    histogram file, run the following command:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看直方图文件。例如，如果您在 Mac 上查看`landscape.png`直方图文件，请运行以下命令：
- en: '[PRE36]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Here is the resulting histogram:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 这是结果直方图：
- en: '![](img/B17085_06_015.jpg)'
  id: totrans-265
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17085_06_015.jpg)'
- en: Figure 6.15 – Histogram of the landscape image
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.15 – 风景图像的直方图
- en: You can preview other files in a similar way or through the Pachyderm dashboard,
    as described earlier.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过类似的方式或通过前面提到的 Pachyderm 控制面板预览其他文件。
- en: 'Go to the console and view the DAG for this newly added pipeline:'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入控制台，查看新添加的流水线的 DAG：
- en: '![](img/B17085_06_016.jpg)'
  id: totrans-269
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17085_06_016.jpg)'
- en: Figure 6.16 – Updated DAG
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.16 – 更新后的 DAG
- en: As you can see, you now have a new pipeline called `histogram` and a new eponymous
    output repository added to your DAG.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，您现在有一个名为`histogram`的新流水线，并且在 DAG 中新增了一个同名的输出仓库。
- en: Now that we have created our first pipeline, let's clean up our environment
    so that we have a clean cluster to work on the tasks in the next chapter.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了第一个流水线，让我们清理环境，以便有一个干净的集群来处理下章中的任务。
- en: Cleaning up
  id: totrans-273
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 清理
- en: 'Once you are done experimenting, you might want to clean up your cluster so
    that you start your next experiment with a fresh install. To clean up the environment,
    perform the following steps:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦实验完成，您可能想清理集群，以便开始下一个实验时有一个全新的安装。要清理环境，请执行以下步骤：
- en: 'Delete all the pipelines and repositories:'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除所有流水线和仓库：
- en: '[PRE37]'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Verify that no repositories and pipelines exist in your cluster:'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证集群中是否存在仓库和流水线：
- en: '[PRE38]'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'You should see the following output:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下输出：
- en: '[PRE39]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: With that, you have successfully cleaned up your cluster.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 至此，您已成功清理了集群。
- en: Summary
  id: totrans-282
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you successfully created your first Pachyderm repository, pipeline,
    and even extended it with another pipeline step. We used scikit-image, Matplotlib,
    and NumPy to create contours on images stored in Pachyderm repositories and created
    histograms for all of these images. This is the first step in understanding how
    Pachyderm works. In Pachyderm, you'll work with pipelines quite a lot. As you
    have already noticed, you can put any code in your pipeline. Although most of
    the examples in this book will use Python, you can use any programming language
    of your choice.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您成功创建了第一个 Pachyderm 仓库、流水线，甚至通过添加另一个流水线步骤进行了扩展。我们使用了 scikit-image、Matplotlib
    和 NumPy 来创建存储在 Pachyderm 仓库中的图像的轮廓，并为这些图像创建了直方图。这是理解 Pachyderm 如何工作的第一步。在 Pachyderm
    中，您将经常使用流水线。正如您已经注意到的，您可以在流水线中放入任何代码。尽管本书中的大多数示例将使用 Python，您可以使用任何您选择的编程语言。
- en: In the next chapter, we will learn more about Pachyderm functionality, how to
    ingest data into Pachyderm and export it to outside systems, how to make changes
    to a pipeline's code, how to tune various parameters, and other important Pachyderm
    operations.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入学习 Pachyderm 的功能，如何将数据导入 Pachyderm 并将其导出到外部系统，如何修改管道代码，如何调整各种参数以及其他重要的
    Pachyderm 操作。
- en: Further reading
  id: totrans-285
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'For more information about the topics that were covered in this chapter, take
    a look at the following resources:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 有关本章涵盖的主题的更多信息，请查看以下资源：
- en: 'Docker Hub documentation: [https://docs.docker.com/docker-hub/](https://docs.docker.com/docker-hub/)'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Docker Hub 文档: [https://docs.docker.com/docker-hub/](https://docs.docker.com/docker-hub/)'
- en: 'Matplotlib documentation: [https://matplotlib.org/](https://matplotlib.org/)'
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Matplotlib 文档: [https://matplotlib.org/](https://matplotlib.org/)'
- en: 'NumPy documentation: [https://numpy.org/doc/stable/](https://numpy.org/doc/stable/)'
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'NumPy 文档: [https://numpy.org/doc/stable/](https://numpy.org/doc/stable/)'
- en: 'Scikit-image documentation: [https://scikit-image.org](https://scikit-image.org)'
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Scikit-image 文档: [https://scikit-image.org](https://scikit-image.org)'
- en: 'Landscape image: [https://www.freepik.com/free-vector/beautiful-gradient-spring-landscape_6969720.htm](https://www.freepik.com/free-vector/beautiful-gradient-spring-landscape_6969720.htm)'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '风景图片: [https://www.freepik.com/free-vector/beautiful-gradient-spring-landscape_6969720.htm](https://www.freepik.com/free-vector/beautiful-gradient-spring-landscape_6969720.htm)'
- en: 'Brown vase image: [https://www.freepik.com/free-photo/narrow-neck-vase_921733.htm](https://www.freepik.com/free-photo/narrow-neck-vase_921733.htm)'
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '棕色花瓶图片: [https://www.freepik.com/free-photo/narrow-neck-vase_921733.htm](https://www.freepik.com/free-photo/narrow-neck-vase_921733.htm)'
- en: 'Hand image: [https://www.freepik.com/free-photo/hand-holding-something-with-white-background_978615.htm](https://www.freepik.com/free-photo/hand-holding-something-with-white-background_978615.htm)'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '手部图片: [https://www.freepik.com/free-photo/hand-holding-something-with-white-background_978615.htm](https://www.freepik.com/free-photo/hand-holding-something-with-white-background_978615.htm)'
