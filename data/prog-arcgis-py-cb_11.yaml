- en: Chapter 11. Error Handling and Troubleshooting
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 11 章. 错误处理和故障排除
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下菜谱：
- en: Exploring the default Python error message
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索默认的 Python 错误信息
- en: Adding Python exception handling structures (try/except/else)
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加 Python 异常处理结构（try/except/else）
- en: Retrieving tool messages with GetMessages()
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 GetMessages() 获取工具消息
- en: Filtering tool messages by the level of severity
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过严重程度过滤工具消息
- en: Testing for and responding to specific error messages
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试并响应特定错误信息
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Various messages are returned during the execution of ArcGIS geoprocessing tools
    and functions. These messages can be informational in nature or indicate warning
    or error conditions that can result in the tool not creating the expected output
    or result in outright failure of the tool to be executed. These messages do not
    appear as message boxes. Instead, you will need to retrieve them by using various
    ArcPy functions. Up to this point in the book, we have ignored the existence of
    these messages, warnings, and errors. This is mainly due to the fact that I wanted
    you to concentrate on learning some basic concepts, without adding the extra layer
    of code complexity that is necessary to create robust geoprocessing scripts that
    can handle error situations gracefully. This being said, it's now time that you
    learn how to create geoprocessing and Python exception handling structures that
    will enable you to create versatile geoprocessing scripts. These scripts can handle
    messages that indicate warnings, errors, and general information, which are generated
    while your script is running. These code details will help make your scripts more
    flexible and less error prone. You've already used the basic `try` and `except`
    blocks to perform some basic error handling. However, in this chapter, we'll go
    into more detail about why and how these structures are used.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行 ArcGIS 地理处理工具和函数的过程中，会返回各种消息。这些消息可能是信息性的，或者指示警告或错误条件，可能导致工具无法创建预期的输出，或者导致工具执行失败。这些消息不会以消息框的形式出现。相反，你需要使用各种
    ArcPy 函数来检索它们。到目前为止，本书中我们忽略了这些消息、警告和错误的存在。这主要是因为我想让你集中学习一些基本概念，而不添加创建能够优雅处理错误情况的健壮地理处理脚本的必要代码复杂性。话虽如此，现在是时候学习如何创建地理处理和
    Python 异常处理结构，这将使你能够创建灵活的地理处理脚本。这些脚本可以处理在脚本运行时生成的指示警告、错误和一般信息的消息。这些代码细节将帮助使你的脚本更加灵活，减少错误发生的可能性。你已经使用基本的
    `try` 和 `except` 块执行了一些基本的错误处理。然而，在本章中，我们将更详细地介绍为什么以及如何使用这些结构。
- en: Exploring the default Python error message
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索默认的 Python 错误信息
- en: By default, Python will generate an error message whenever it encounters a problem
    in your script. These error messages will not always be very informative to the
    end user who is running the script. However, it is valuable to take a look at
    these raw messages. In later recipes, we'll use Python error handling structures
    to get a cleaner look at the errors and respond as required.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Python 遇到脚本中的问题时会生成错误信息。这些错误信息并不总是对运行脚本的最终用户非常有信息量。然而，查看这些原始消息是有价值的。在后面的菜谱中，我们将使用
    Python 错误处理结构来更清晰地查看错误并按要求做出响应。
- en: Getting ready
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this recipe, we will create and run a script that intentionally contains
    error conditions. We will not include any geoprocessing or Python exception handling
    techniques in the script. We are doing this intentionally because we want you
    to see the error information returned by Python.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本菜谱中，我们将创建并运行一个故意包含错误条件的脚本。我们不会在脚本中包含任何地理处理或 Python 异常处理技术。我们故意这样做，因为我们想让你看到
    Python 返回的错误信息。
- en: How to do it…
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Follow these steps to see a raw Python error message, which is generated when
    an error occurs while a tool is being executed in a script:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤查看在脚本执行过程中工具执行时生成的原始 Python 错误信息：
- en: Open **IDLE** and create a new script.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 **IDLE** 并创建一个新的脚本。
- en: Save the script to `C:\ArcpyBook\Ch11\ErrorHandling.py`.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将脚本保存到 `C:\ArcpyBook\Ch11\ErrorHandling.py`。
- en: 'Import the `arcpy` module:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入 `arcpy` 模块：
- en: '[PRE0]'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Set the workspace:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置工作空间：
- en: '[PRE1]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Call the `Buffer` tool. The `Buffer` tool requires a buffer distance be entered
    as one of its parameters. In this code block, we have intentionally left out the
    distance parameter:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用 `Buffer` 工具。`Buffer` 工具需要一个缓冲距离作为其参数之一。在这个代码块中，我们故意省略了距离参数：
- en: '[PRE2]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You can check your work by examining the `C:\ArcpyBook\code\Ch11\ErrorHandling1.py`
    solution file.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以通过检查 `C:\ArcpyBook\code\Ch11\ErrorHandling1.py` 解决方案文件来检查你的工作。
- en: 'Run the script. You should see the following error message:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行脚本。你应该看到以下错误消息：
- en: '[PRE3]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How it works…
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: This output error message isn't terribly informative. If you are a fairly experienced
    programmer, you'll generally be able to make out what the problem is in this case
    (it did not include buffer distance). However, in many cases, the returned error
    message will not give you much information that you can use to resolve the problem.
    Errors in your code are simply a fact of life in programming. However, how your
    code responds to these errors, also called exceptions, is very important. You
    should plan to handle errors gracefully through the use of Python error handling
    structures, which examine `arcpy` generated exceptions and act accordingly. Without
    these structures in place, your scripts will fail immediately, frustrating your
    users in the process.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这个输出错误消息并不十分有用。如果你是一个相当有经验的程序员，你通常能够在这个情况下弄清楚问题所在（它没有包括缓冲距离）。然而，在许多情况下，返回的错误消息不会给你提供多少你可以用来解决问题的信息。代码中的错误是编程生活中一个简单的事实。然而，你的代码如何响应这些错误，也称为异常，是非常重要的。你应该计划使用
    Python 错误处理结构来优雅地处理错误，这些结构检查 `arcpy` 生成的异常并相应地采取行动。如果没有这些结构，你的脚本将立即失败，从而让用户感到沮丧。
- en: Adding Python exception handling structures (try/except/else)
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加 Python 异常处理结构（try/except/else）
- en: Python has built-in exception handling structures that allows you to capture
    error messages that are generated. Using this error information, you can then
    display a more appropriate message to the end user and respond to the situation
    as needed.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Python 有内置的异常处理结构，允许你捕获生成的错误消息。使用这些错误信息，你可以向最终用户显示更合适的消息，并根据需要响应情况。
- en: Getting ready
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Exceptions are unusual or error conditions that occur in your code. Exception
    statements in Python enable you to trap and handle errors in your code, allowing
    you to gracefully recover from error conditions. In addition to error handling,
    exceptions can be used for a variety of other things, including event notification
    and handling of special cases.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 异常是在你的代码中发生的异常或错误条件。Python 中的异常语句使你能够捕获和处理代码中的错误，从而让你能够优雅地从错误条件中恢复。除了错误处理之外，异常还可以用于各种其他事情，包括事件通知和处理特殊情况。
- en: Python exceptions occur in two ways. Exceptions in Python can either be intercepted
    or triggered. When an error condition occurs in your code, Python automatically
    triggers an exception, which may or may not be handled by your code. It is up
    to you as a programmer to catch an automatically triggered exception. Exceptions
    can also be triggered manually by your code. In this case, you would also provide
    an exception handling routine to catch these manually triggered exceptions. You
    can manually trigger an exception by using the `raise` statement.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Python 异常以两种方式发生。Python 中的异常可以是捕获的或触发的。当你的代码中发生错误条件时，Python 会自动触发一个异常，这个异常可能被你的代码处理，也可能不被处理。作为程序员，你有责任捕获自动触发的异常。异常也可以通过你的代码手动触发。在这种情况下，你还需要提供一个异常处理例程来捕获这些手动触发的异常。你可以通过使用
    `raise` 语句来手动触发一个异常。
- en: The `try`/`except` statement is a complete, compound Python statement, which
    is used to handle exceptions. This variety of `try` statement starts with a `try`
    header line followed by a block of indented statements, then one or more optional
    `except` clauses that name exceptions to be caught, and an optional `else` clause
    at the end.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`try`/`except` 语句是一个完整的、复合的 Python 语句，用于处理异常。这种 `try` 语句以一个 `try` 标题行开始，后面跟着一个缩进的语句块，然后是一个或多个可选的
    `except` 子句，这些子句命名了要捕获的异常，以及一个可选的 `else` 子句在末尾。'
- en: The `try`/`except`/`else` statement works as follows. Once inside a `try` statement,
    Python marks the fact that you are in a `try` block and knows that any exception
    condition that occurs within this block will be forwarded to the various `except`
    statements for handling.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`try`/`except`/`else` 语句的工作方式如下。一旦进入 `try` 语句，Python 会标记你处于 `try` 块中，并且知道在这个块中发生的任何异常条件都将被转发到各种
    `except` 语句进行处理。'
- en: 'Each statement inside the `try` block is executed. Assuming there aren''t any
    conditions in which exceptions occur, the code pointer will then jump to the `else`
    statement and execute the code block contained within the `else` statement before
    moving to the next line of code below the `try` block. If an exception occurs
    inside the `try` block, Python searches for a matching exception code. If a matching
    exception is found, the code block inside the `except` block is executed. The
    code then reappears below the full `try` statement. The `else` statements are
    not executed in this case. If a matching exception header is not found, Python
    will propagate the exception to a `try` statement above this code block. In the
    event that no matching `except` header is found, the exception comes out of the
    top level of the process. This results in an unhandled exception and you wind
    up with the type of error message that we saw in our first recipe in this chapter.
    This is illustrated in the following figure:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`try`块内的每个语句都会被执行。假设没有发生异常的条件，代码指针将跳转到`else`语句并执行`else`语句中包含的代码块，然后再移动到`try`块下面的下一行代码。如果在`try`块内部发生异常，Python将搜索匹配的异常代码。如果找到匹配的异常，将执行`except`块内的代码块。然后代码再次出现在完整的`try`语句下面。在这种情况下，不会执行`else`语句。如果没有找到匹配的异常头，Python将把异常传播到这个代码块上面的`try`语句。如果在整个过程中没有找到匹配的`except`头，异常将出现在进程的最顶层。这会导致未处理的异常，最终你会得到我们在本章第一个菜谱中看到的错误消息类型。这如图所示：'
- en: '![Getting ready](img/B04314_11_03.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/B04314_11_03.jpg)'
- en: In this recipe, we're going to add in some basic Python exception handling structures.
    There are several variations of the `try`/`except`/`else`/`finally` exception
    handling structure. In this recipe, we'll start with a very simple `try`/`except`
    structure.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将添加一些基本的Python异常处理结构。`try`/`except`/`else`/`finally`异常处理结构有多种变体。在这个菜谱中，我们将从一个非常简单的`try`/`except`结构开始。
- en: How to do it…
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Follow these steps to add Python error handling structures to a script.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤将Python错误处理结构添加到脚本中。
- en: If necessary, open the `C:\ArcpyBook\Ch11\ErrorHandling.py` file in **IDLE**.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果需要，打开`C:\ArcpyBook\Ch11\ErrorHandling.py`文件在**IDLE**中。
- en: 'Alter your script to include a `try`/`except` block:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改您的脚本以包含一个`try`/`except`块：
- en: '[PRE4]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You can check your work by examining the `C:\ArcpyBook\code\Ch11\ErrorHandling2.py`
    solution file.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过检查`C:\ArcpyBook\code\Ch11\ErrorHandling2.py`解决方案文件来检查您的工作。
- en: Save and run the script. You should see the simple `Error` message. This is
    no more helpful than the output we received in our first recipe. In fact, it's
    even less useful. However, the point of this recipe is simply to introduce you
    to the `try`/`except` error handling structure.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并运行脚本。你应该会看到简单的`Error`消息。这并不比我们在第一个菜谱中收到的输出更有帮助。事实上，它甚至更不实用。然而，这个菜谱的目的仅仅是向您介绍`try`/`except`错误处理结构。
- en: How it works…
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This is an extremely simple structure. The `try` block indicates that everything
    indented under the `try` statement will be subject to exception handling. If an
    exception of any type is found, control of the code processing jumps to the `except`
    section and prints the error message(s), which in this case is simply `Error`.
    Now, as I mentioned, this is hardly informative to your users, but hopefully,
    it gives you a basic idea of how the `try`/`except` blocks work, and as a programmer
    you will better understand any errors reported by your users. In the next recipe,
    you'll learn how to add tool-generated messages to this structure.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个极其简单的结构。`try`块表示`try`语句下面的所有缩进内容都将受到异常处理的影响。如果找到任何类型的异常，代码处理的控制将跳转到`except`部分并打印错误消息（在这种情况下是简单的`Error`）。正如我提到的，这对用户来说几乎没有任何信息量，但希望这能给你一个基本的想法，了解`try`/`except`块是如何工作的，并且作为程序员，你会更好地理解用户报告的任何错误。在下一个菜谱中，你将学习如何向这个结构添加工具生成的消息。
- en: There's more…
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The other type of `try` statement is the `try`/`finally` statement, which allows
    for finalization actions. When a `finally` clause is used in a `try` statement,
    its block of statements always run at the very end, whether an error condition
    occurs or not. This is how the `try`/`finally` statement works: if an exception
    occurs, Python runs the `except` block, then the `finally` block. If an exception
    does not occur during execution, Python runs the `try` block, and then the `finally`
    block. This is useful when you want to make sure that an action takes place after
    a code block runs, regardless of whether or not an error condition occurs.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种类型的 `try` 语句是 `try`/`finally` 语句，它允许执行最终化操作。当在 `try` 语句中使用 `finally` 子句时，其语句块始终在最后执行，无论是否发生错误条件。这就是
    `try`/`finally` 语句的工作方式：如果发生异常，Python 将运行 `except` 块，然后运行 `finally` 块。如果在执行过程中没有发生异常，Python
    将运行 `try` 块，然后运行 `finally` 块。这在您想要确保代码块运行后执行某个操作时非常有用，无论是否发生错误条件。
- en: Retrieving tool messages with GetMessages()
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 GetMessages() 获取工具消息
- en: ArcPy includes a `GetMessages()` function that you can use to retrieve messages
    generated when an ArcGIS tool is executing. Messages can include informational
    messages, such as the start and ends times of a tool execution as well as warnings
    and errors, which can result in something less than the desired result or complete
    failure of the tool to execute to completion.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: ArcPy 包含一个 `GetMessages()` 函数，您可以使用它来检索在执行 ArcGIS 工具时生成的消息。消息可以包括信息性消息，例如工具执行的开始和结束时间，以及警告和错误，这些可能导致结果不如预期或工具执行失败。
- en: Getting ready
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: During the execution of a tool, various messages are generated. These messages
    include informational messages, such as the start and end times of a tool execution,
    parameter values passed to the tool, and progress information. In addition to
    this, warnings and errors can also be generated by the tool. These messages can
    be read by your Python script, and your code can be designed to appropriately
    handle any warnings or errors that have been generated.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在工具执行期间，会生成各种消息。这些消息包括信息性消息，例如工具执行的开始和结束时间，传递给工具的参数值以及进度信息。此外，工具还可以生成警告和错误。这些消息可以通过您的
    Python 脚本读取，并且您的代码可以设计为适当地处理已生成的任何警告或错误。
- en: ArcPy stores the messages from the last tool that was executed and you can retrieve
    these messages using the `GetMessages()` function, which returns a single string
    containing all messages from the tool that was last executed. You can filter this
    string in terms of severity to return only certain types of messages such as warnings
    or errors. The first message will always include the name of the tool executed,
    and the last message is the start and end time.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: ArcPy 存储了最后执行的工具的消息，您可以使用 `GetMessages()` 函数检索这些消息，该函数返回一个包含最后执行的工具的所有消息的单个字符串。您可以根据严重性过滤此字符串，以返回仅包含某些类型的消息，例如警告或错误。第一条消息将始终包含执行的工具的名称，最后一条消息是开始和结束时间。
- en: In this recipe, you will add a line of code to the `except` statement, which
    will print more descriptive information about the current tool run.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，您将在 `except` 语句中添加一行代码，这将打印有关当前工具运行的更多描述性信息。
- en: How to do it…
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Follow these steps to learn how to add a `GetMessages()` function to your script
    that generates a list of messages from the tool that was last executed:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤学习如何将 `GetMessages()` 函数添加到您的脚本中，以便从最后执行的工具生成消息列表：
- en: If necessary, open the `C:\ArcpyBook\Ch11\ErrorHandling.py` file in IDLE.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果需要，在 IDLE 中打开 `C:\ArcpyBook\Ch11\ErrorHandling.py` 文件。
- en: 'Alter your script to include the `GetMessages()` function:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改您的脚本以包含 `GetMessages()` 函数：
- en: '[PRE5]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You can check your work by examining the `C:\ArcpyBook\code\Ch11\ErrorHandling3.py`
    solution file.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过检查 `C:\ArcpyBook\code\Ch11\ErrorHandling3.py` 解决方案文件来检查您的工作。
- en: 'Save and run the script. This time, the error message should be much more informative.
    Also notice that there are other types of messages that are generated including
    the start and end times of the script''s execution:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并运行脚本。这次，错误消息应该更加详细。同时请注意，还会生成其他类型的消息，包括脚本执行的开始和结束时间：
- en: '[PRE6]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works…
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The `GetMessages()` function returns all the messages generated by the last
    tool that was run. I want to emphasize that it only returns messages from the
    last tool that was run. Keep this in mind if you have a script with multiple tools
    that are being run. Historical tool messages are not accessible through this function.
    However, there is a `Result` object that you can use if you need to retrieve historical
    tool messages.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`GetMessages()` 函数返回最后运行的工具生成的所有消息。我想强调的是，它只返回最后运行的工具的消息。如果您有一个运行多个工具的脚本，请记住这一点。历史工具消息无法通过此函数访问。然而，如果您需要检索历史工具消息，可以使用一个
    `Result` 对象。'
- en: Filtering tool messages by the level of severity
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过严重程度过滤工具消息
- en: As I mentioned in the last recipe, all tools generate a number of messages that
    can be classified as information, warnings, or error messages. The `GetMessages()`
    method accepts a parameter that allows you to filter the messages that are returned.
    For example, you may not be interested in the informative or warning messages
    in your script. However, you will certainly be interested in error messages as
    they indicate a fatal error that will not allow a tool to successfully execute.
    Using `GetMessages()`, you can filter the returned message to include only error
    messages.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如我在上一道菜谱中提到的，所有工具都会生成一些可以被分类为信息、警告或错误信息的消息。`GetMessages()` 方法接受一个参数，允许您过滤返回的消息。例如，您可能对脚本中的信息性或警告性消息不感兴趣。然而，您肯定会对错误消息感兴趣，因为它们表明了一个致命错误，这将阻止工具成功执行。使用
    `GetMessages()`，您可以过滤返回的消息，只包括错误消息。
- en: Getting ready
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Messages are classified into one of three types, which are indicated by the
    level of severity. **Informational messages** provide descriptive information
    concerning things, such as a tools progress, start and end times of the tool,
    output data characteristics, and much more. The severity of an informational message
    is indicated by a value of `0`. **Warning messages** are generated when a problem
    has occurred during execution that may affect the output. Warnings are indicated
    with a severity level of `1` and don''t normally stop a tool from running. The
    last type of message is an **error message**, which is indicated by a numeric
    value of `2`. These indicate fatal events that prevent a tool from running. Multiple
    messages may be generated during the execution of a tool, and these are stored
    in a list. More information about the severity of message is provided in the following
    image. In this recipe, you will learn how to filter the messages generated by
    the `GetMessages()` function:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 消息被分类为三种类型之一，这由严重程度级别指示。**信息性消息**提供了有关事物描述性的信息，例如工具的进度、工具的开始和结束时间、输出数据特征等。信息性消息的严重程度由
    `0` 的值表示。**警告消息**在执行过程中发生问题时生成，可能会影响输出。警告用严重程度级别 `1` 表示，通常不会阻止工具运行。最后一种消息是**错误消息**，由
    `2` 的数值表示。这些指示阻止工具运行的事件。在工具执行过程中可能会生成多个消息，这些消息存储在列表中。有关消息严重程度的更多信息，请参阅以下图像。在本菜谱中，您将学习如何过滤
    `GetMessages()` 函数生成的消息：
- en: '![Getting ready](img/B04314_11_01.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![准备工作](img/B04314_11_01.jpg)'
- en: How to do it…
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: Filtering the messages returned by a tool is really quite simple. You simply
    provide the severity level you'd like to return as a parameter for the `GetMessages()`
    function.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 通过严重程度过滤工具返回的消息实际上非常简单。您只需提供您想要返回的严重程度级别作为 `GetMessages()` 函数的参数。
- en: If necessary, open the `C:\ArcpyBook\Ch11\ErrorHandling.py` file in IDLE.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果需要，在 IDLE 中打开 `C:\ArcpyBook\Ch11\ErrorHandling.py` 文件。
- en: 'Alter the `GetMessages()` function so that you pass in a value of `2` as the
    only parameter:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改 `GetMessages()` 函数，使其只传递一个值为 `2` 的参数：
- en: '[PRE7]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You can check your work by examining the `C:\ArcpyBook\code\Ch11\ErrorHandling4.py`
    solution file.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过检查 `C:\ArcpyBook\code\Ch11\ErrorHandling4.py` 解决方案文件来检查您的作业。
- en: 'Save and run the script to see the output:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并运行脚本以查看输出：
- en: '[PRE8]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: How it works…
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: As I mentioned earlier, the `GetMessages()` method can accept an integer argument
    of `0`, `1`, or `2`. Passing a value of `0` indicates that all messages should
    be returned, while passing a value of `1` indicates that you wish to see warnings.
    In our case, we have passed a value of `2`, which indicates that we only want
    to see error messages. Therefore, you won't see any of the other information messages,
    such as the start and end times of the script.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如我之前提到的，`GetMessages()`方法可以接受`0`、`1`或`2`的整数参数。传递`0`表示应返回所有消息，而传递`1`表示你想看到警告。在我们的情况下，我们传递了`2`，这意味着我们只想看到错误消息。因此，你不会看到其他信息消息，例如脚本的开始和结束时间。
- en: Testing for and responding to specific error messages
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试和响应特定错误消息
- en: All errors and warnings generate a specific error code. It is possible to check
    for specific error codes in your scripts and perform some type of action based
    on these errors. This can make your scripts even more versatile.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 所有错误和警告都会生成一个特定的错误代码。你可以在脚本中检查特定的错误代码，并根据这些错误执行某些操作。这可以使你的脚本更加灵活。
- en: Getting ready
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中
- en: 'All errors and warnings generated by a geoprocessing tool contain both a six-digit
    code and a description. Your script can test for specific error codes and respond
    accordingly. You can get a listing of all the available error messages and codes
    in the ArcGIS for Desktop help system by navigating to **Geoprocessing** | **Tool
    errors and warnings**. This is illustrated in the following screenshot. All errors
    have a unique page that briefly describes the error by the code number:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 地理处理工具生成的所有错误和警告都包含一个六位代码和描述。你的脚本可以测试特定的错误代码并相应地做出反应。你可以在 ArcGIS for Desktop
    帮助系统中通过导航到**地理处理** | **工具错误和警告**来获取所有可用错误消息和代码的列表。这在上面的屏幕截图中有所说明。所有错误都有一个独特的页面，简要描述了错误代码：
- en: '![Getting ready](img/B04314_11_02.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![准备中](img/B04314_11_02.jpg)'
- en: How to do it…
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps to learn how to write code that responds to specific error
    codes generated by the execution of a geoprocessing tools:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤学习如何编写代码，以响应由地理处理工具执行生成的特定错误代码：
- en: Open the ArcGIS for Desktop help system by navigating to **Start** | **All Programs**
    | **ArcGIS** | **ArcGIS for Desktop Help**
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到**开始** | **所有程序** | **ArcGIS** | **ArcGIS for Desktop 帮助**来打开 ArcGIS for
    Desktop 帮助系统。
- en: Navigate to **Geoprocessing** | **Tool errors and warnings** | **Tool errors
    1-10000** | **Tool errors and warnings 701-800**.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**地理处理** | **工具错误和警告** | **工具错误 1-10000** | **工具错误和警告 701-800**。
- en: 'Select **000735:<value>:Value is required**. This error indicates that a parameter
    required by the tool has not been provided. You''ll recall from running this script
    earlier that we have not provided the buffer distance and the resulting error
    message generated, as a result, contains the error code that we are viewing in
    the help system. In the following code, you will find the full text of the error
    message. Notice the error code:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**000735:<value>:Value is required**。这个错误表示工具所需的参数尚未提供。你会记得在运行此脚本之前，我们没有提供缓冲距离，因此生成的错误消息包含我们在帮助系统中查看的错误代码。在以下代码中，你可以找到错误消息的完整文本。注意错误代码：
- en: '[PRE9]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: If necessary, open the `C:\ArcpyBook\Ch11\ErrorHandling.py` file in IDLE.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果需要，在 IDLE 中打开`C:\ArcpyBook\Ch11\ErrorHandling.py`文件。
- en: 'In your script, alter the `except` statement so that it appears as follows:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的脚本中，修改`except`语句，使其如下所示：
- en: '[PRE10]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: You can check your work by examining the `C:\ArcpyBook\code\Ch11\ErrorHandling5.py`
    solution file.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以通过检查`C:\ArcpyBook\code\Ch11\ErrorHandling5.py`解决方案文件来验证你的工作。
- en: 'Save and run the script. You should see various messages printed, as follows:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并运行脚本。你应该会看到各种消息打印出来，如下所示：
- en: '[PRE11]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: How it works…
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: What you've done in this code block is use the `arcpy.GetReturnCode()` function
    to return the error code generated by the tool. Then, an `if` statement is used
    to test whether the error code contains the `735` value, which is the code that
    indicates that a required parameter has not been provided to the tool. You then
    provided a default value for the buffer distance and called the `Buffer` tool
    again, providing the default buffer value this time.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个代码块中，你使用`arcpy.GetReturnCode()`函数来返回工具生成的错误代码。然后，使用`if`语句测试错误代码是否包含`735`值，这是表示工具未提供所需参数的代码。然后，你为缓冲距离提供了默认值，并再次调用`Buffer`工具，这次提供默认的缓冲值。
