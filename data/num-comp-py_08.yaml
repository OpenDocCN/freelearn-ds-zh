- en: Visualizing Multivariate Data
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可视化多变量数据
- en: When we have **big data** that contains many variables, the plot types in [Chapter
    7](7daeb59b-3e8e-4a33-9437-2839c6ed47e4.xhtml), *Visualizing Online Data* may
    no longer be an effective way of data visualization. We may try to cramp as many
    variables in a single plot as possible, but the overcrowded or cluttered details
    would quickly reach the boundary of a human's visual perception capabilities.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们拥有包含许多变量的**大数据**时，[第7章](7daeb59b-3e8e-4a33-9437-2839c6ed47e4.xhtml)中 *可视化在线数据*的图表类型可能不再是有效的数据可视化方式。我们可能会尝试在单一图表中尽可能多地压缩变量，但过度拥挤或杂乱的细节很快就会超出人类的视觉感知能力。
- en: 'In this chapter, we aim to introduce multivariate data visualization techniques;
    they enable us to better understand the distribution of data and the relationships
    between variables. Here is the outline of this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章旨在介绍多变量数据可视化技术；这些技术使我们能够更好地理解数据的分布以及变量之间的关系。以下是本章的概述：
- en: Getting End-of-Day (EOD) stock data from Quandl
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从Quandl获取日终（EOD）股票数据
- en: 'Two-dimensional faceted plots:'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 二维分面图：
- en: Factor plot in Seaborn
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Seaborn中的因子图
- en: Faceted grid in Seaborn
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Seaborn中的分面网格
- en: Pair plot in Seaborn
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Seaborn中的配对图
- en: 'Other two-dimensional multivariate plots:'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他二维多变量图：
- en: Heatmap in Seaborn
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Seaborn中的热力图
- en: 'Candlestick plot in matplotlib.finance:'
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: matplotlib.finance中的蜡烛图：
- en: Visualizing various stock market indicators
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可视化各种股市指标
- en: Building a comprehensive stock chart
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建综合股票图表
- en: 'Three-dimensional plots:'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 三维图表：
- en: Scatter plot
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 散点图
- en: Bar chart
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 条形图
- en: Caveats of using Matplotlib 3D
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Matplotlib 3D的注意事项
- en: First, we will discuss faceted plots, which is a divide-and-conquer approach
    to visualizing multivariate data. The gestalt of this approach is to slice input
    data into different facets such that only a handful of attributes will be represented
    in each visualization panel. This will reduce visual clutter by allowing inspection
    of variables in reduced subsets. Sometimes, finding a suitable way to represent
    multivariate data in a 2D graph is difficult. Therefore, we are going to introduce
    3D plotting functions in Matplotlib as well.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将讨论分面图，这是一种用于可视化多变量数据的分而治之的方法。这种方法的要义是将输入数据切分成不同的分面，每个可视化面板中只展示少数几个属性。通过在减少的子集上查看变量，这样可以减少视觉上的杂乱。有时，在二维图表中找到合适的方式来表示多变量数据是困难的。因此，我们还将介绍Matplotlib中的三维绘图函数。
- en: The data used in this chapter was collected from Quandl's End-of-Day (EOD) stock
    database. Let's get the data from Quandl first.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本章使用的数据来自Quandl的日终（EOD）股票数据库。首先让我们从Quandl获取数据。
- en: Getting End-of-Day (EOD) stock data from Quandl
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从Quandl获取日终（EOD）股票数据
- en: Since we are going to discuss stock data extensively, note that we do not guarantee
    the accuracy, completeness, or validity of the content presented; nor are we responsible
    for any errors or omissions that may have occurred. The data, visualizations,
    and analyses are provided on an “as is” basis for educational purposes only, without
    any representations, warranties, or conditions of any kind. Therefore, the publisher
    and the authors do not accept liability for your use of the content. It should
    be noted that past stock performance may not predict future performance. Readers
    should also be aware of the risks involved in stock investments and should not
    take any investment decisions based on the content in this chapter. In addition,
    readers are advised to conduct their own independent research into individual
    stocks before making an investment decision.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将广泛讨论股票数据，请注意，我们不保证所呈现内容的准确性、完整性或有效性；也不对可能发生的任何错误或遗漏负责。数据、可视化和分析仅以“原样”方式提供，仅用于教育目的，不附带任何形式的声明、保证或条件。因此，出版商和作者不对您使用内容承担任何责任。需要注意的是，过去的股票表现不能预测未来的表现。读者还应意识到股票投资的风险，并且不应根据本章内容做出任何投资决策。此外，建议读者在做出投资决策之前，对个别股票进行独立研究。
- en: 'We are going to adapt the Quandl JSON API code in [Chapter 7](7daeb59b-3e8e-4a33-9437-2839c6ed47e4.xhtml), *Visualizing
    Online Data* to get EOD stock data from Quandl. The historical stock data from
    January 1, 2017 to June 30, 2017 for six stock codes will be obtained: Apple Inc.(EOD/AAPL),
    The Procter & Gamble Company (EOD/PG), Johnson & Johnson (EOD/JNJ), Exxon Mobil
    Corporation (EOD/XOM), International Business Machines Corporation (EOD/IBM),
    and Microsoft Corporation (EOD/MSFT). Again, we will use the default `urllib`
    and `json` modules to handle Quandl API calls, followed by converting the data
    into a Pandas DataFrame:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将调整[第七章](7daeb59b-3e8e-4a33-9437-2839c6ed47e4.xhtml)《*可视化在线数据*》中的Quandl JSON
    API代码，以便从Quandl获取EOD股票数据。我们将获取2017年1月1日至2017年6月30日之间六只股票代码的历史股市数据：苹果公司（EOD/AAPL）、宝洁公司（EOD/PG）、强生公司（EOD/JNJ）、埃克森美孚公司（EOD/XOM）、国际商业机器公司（EOD/IBM）和微软公司（EOD/MSFT）。同样，我们将使用默认的`urllib`和`json`模块来处理Quandl
    API调用，接着将数据转换为Pandas DataFrame：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '| - | **Date** | **Open** | **High** | **Low** | **Close** | **Volume** | **Dividend**
    | **Split** | **Adj_Open** | **Adj_High** | **Adj_Low** | **Adj_Close** | **Adj_Volume**
    | **Company** |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| - | **日期** | **开盘** | **最高** | **最低** | **收盘** | **成交量** | **分红** | **拆股**
    | **调整后开盘** | **调整后最高** | **调整后最低** | **调整后收盘** | **调整后成交量** | **公司** |'
- en: '| **124** | 2017-01-03 | 115.80 | 116.3300 | 114.76 | 116.15 | 28781865.0 |
    0.0 | 1.0 | 114.833750 | 115.359328 | 113.802428 | 115.180830 | 28781865.0 | AAPL
    |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| **124** | 2017-01-03 | 115.80 | 116.3300 | 114.76 | 116.15 | 28781865.0 |
    0.0 | 1.0 | 114.833750 | 115.359328 | 113.802428 | 115.180830 | 28781865.0 | AAPL
    |'
- en: '| **123** | 2017-01-04 | 115.85 | 116.5100 | 115.75 | 116.02 | 21118116.0 |
    0.0 | 1.0 | 114.883333 | 115.537826 | 114.784167 | 115.051914 | 21118116.0 | AAPL
    |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| **123** | 2017-01-04 | 115.85 | 116.5100 | 115.75 | 116.02 | 21118116.0 |
    0.0 | 1.0 | 114.883333 | 115.537826 | 114.784167 | 115.051914 | 21118116.0 | AAPL
    |'
- en: '| **122** | 2017-01-05 | 115.92 | 116.8642 | 115.81 | 116.61 | 22193587.0 |
    0.0 | 1.0 | 114.952749 | 115.889070 | 114.843667 | 115.636991 | 22193587.0 | AAPL
    |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| **122** | 2017-01-05 | 115.92 | 116.8642 | 115.81 | 116.61 | 22193587.0 |
    0.0 | 1.0 | 114.952749 | 115.889070 | 114.843667 | 115.636991 | 22193587.0 | AAPL
    |'
- en: '| **121** | 2017-01-06 | 116.78 | 118.1600 | 116.47 | 117.91 | 31751900.0 |
    0.0 | 1.0 | 115.805573 | 117.174058 | 115.498159 | 116.926144 | 31751900.0 | AAPL
    |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| **121** | 2017-01-06 | 116.78 | 118.1600 | 116.47 | 117.91 | 31751900.0 |
    0.0 | 1.0 | 115.805573 | 117.174058 | 115.498159 | 116.926144 | 31751900.0 | AAPL
    |'
- en: '| **120** | 2017-01-09 | 117.95 | 119.4300 | 117.94 | 118.99 | 33561948.0 |
    0.0 | 1.0 | 116.965810 | 118.433461 | 116.955894 | 117.997132 | 33561948.0 | AAPL
    |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| **120** | 2017-01-09 | 117.95 | 119.4300 | 117.94 | 118.99 | 33561948.0 |
    0.0 | 1.0 | 116.965810 | 118.433461 | 116.955894 | 117.997132 | 33561948.0 | AAPL
    |'
- en: The dataframe contains **Opening, High, Low, and Closing** (**OHLC**) prices
    for each stock. Extra information is also available; for example, the dividend
    column reflects the cash dividend value on that day. The split column shows the
    ratio of new shares to old shares if a split occurred on that day. The adjusted
    prices account for price fluctuations due to distributions or corporate actions
    by assuming that all these actions were reinvested into the current stock. For
    more information about these columns, consult the documentation pages on Quandl.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 数据框包含每只股票的**开盘价、最高价、最低价和收盘价**（**OHLC**）。此外，还提供了额外信息；例如，分红列反映了当天的现金分红值。拆股列显示当天如果发生了拆股事件，新的股票与旧股票的比例。调整后的价格考虑了分配或公司行为引起的价格波动，假设所有这些行动已被再投资到当前股票中。有关这些列的更多信息，请查阅Quandl文档页面。
- en: Grouping the companies by industry
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 按行业分组公司
- en: 'As you may have noticed, three of the companies (AAPL, IBM, and MSFT) are tech
    companies, while the remaining three companies are not. Stock analysts often group
    companies by industry to gain deeper insights. Let''s try to label the companies
    by industry:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能注意到的，三家公司（AAPL、IBM和MSFT）是科技公司，而剩余三家公司则不是。股市分析师通常根据行业将公司分组，以便深入了解。让我们尝试按行业对公司进行标记：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Converting the date to a supported format
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 转换日期为支持的格式
- en: 'The `Date` column in `stock_df` is recorded as a series of Python strings.
    Although Seaborn can use string-formatted dates in some functions, Matplotlib
    cannot. To make the dates malleable to data processing and visualizations, we
    need to convert the values to float numbers supported by Matplotlib:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`stock_df`中的`Date`列以一系列Python字符串的形式记录。尽管Seaborn可以在某些函数中使用字符串格式的日期，但Matplotlib则不能。为了使日期更适合数据处理和可视化，我们需要将这些值转换为Matplotlib支持的浮动数字：'
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Getting the percentage change of the closing price
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取收盘价的百分比变化
- en: 'Next, we want to calculate the change of the closing price with regard to the
    previous day''s close. The `pct_change()` function in Pandas makes this task very
    easy:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们想要计算相对于前一天收盘价的收盘价变化。Pandas中的`pct_change()`函数使得这个任务变得非常简单：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Two-dimensional faceted plots
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 二维分面图
- en: 'We are going to introduce three major ways to create faceted plots: `seaborn.factorplot()`,
    `seaborn.FacetGrid()`, and `seaborn.pairplot()`. You might have seen some faceted
    plots in the previous chapter, when we talked about `seaborn.lmplot()`. Actually,
    the `seaborn.lmplot()` function combines `seaborn.regplot()` with `seaborn.FacetGrid()`,
    and the definitions of data subsets can be adjusted by the `hue`, `col`, and `row` parameters.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将介绍三种创建分面图的主要方法：`seaborn.factorplot()`、`seaborn.FacetGrid()`和`seaborn.pairplot()`。在上一章当我们讨论`seaborn.lmplot()`时，你可能已经见过一些分面图。实际上，`seaborn.lmplot()`函数将`seaborn.regplot()`和`seaborn.FacetGrid()`结合在一起，并且数据子集的定义可以通过`hue`、`col`和`row`参数进行调整。
- en: 'We are going to introduce three major ways to create faceted plots: `seaborn.factorplot()`,
    `seaborn.FacetGrid()`, and `seaborn.pairplot()`. These functions actually work
    similarly to `seaborn.lmplot()` in the way of defining facets.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将介绍三种创建分面图的主要方法：`seaborn.factorplot()`、`seaborn.FacetGrid()`和`seaborn.pairplot()`。这些函数在定义分面时与`seaborn.lmplot()`的工作方式非常相似。
- en: Factor plot in Seaborn
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Seaborn中的因子图
- en: 'With the help of `seaborn.factorplot()`, we can draw categorical point plots,
    box plots, violin plots, bar plots, or strip plots onto a `seaborn.FacetGrid()`
    by tuning the `kind` parameter. The default plot type for `factorplot` is point
    plot. Unlike other plotting functions in Seaborn, which support a wide variety
    of input data formats, `factorplot` supports pandas DataFrames as input only,
    while variable/column names can be supplied as string to `x`, `y`, `hue`, `col`,
    or `row`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在`seaborn.factorplot()`的帮助下，我们可以通过调节`kind`参数，将类别点图、箱线图、小提琴图、条形图或条纹图绘制到`seaborn.FacetGrid()`上。`factorplot`的默认绘图类型是点图。与Seaborn中的其他绘图函数不同，后者支持多种输入数据格式，`factorplot`仅支持pandas
    DataFrame作为输入，而变量/列名可以作为字符串传递给`x`、`y`、`hue`、`col`或`row`：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![](img/a7c1f5ff-03a5-457c-88df-43387f11b9eb.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a7c1f5ff-03a5-457c-88df-43387f11b9eb.png)'
- en: There are several issues in the preceding plot.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的图存在几个问题。
- en: First, the aspect ratio (length divided by height) is slightly suboptimal for
    a time series chart. A wider plot would allow us to observe minute changes during
    the time period. We are going to adjust that using the `aspect` parameter.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，纵横比（长度与高度之比）对于时间序列图来说稍显不理想。较宽的图形将使我们能够观察到在这一时间段内的微小变化。我们将通过调整`aspect`参数来解决这个问题。
- en: Second, the lines and dots are too thick, thereby masking some details in the
    plot. We can reduce the size of these visual elements by tweaking the `scale` parameter.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，线条和点的粗细过大，从而遮盖了一些图中的细节。我们可以通过调整`scale`参数来减小这些视觉元素的大小。
- en: 'Lastly, the ticks are too close to each other, and the tick labels are overlapping.
    After plotting, `sns.factorplot()` returns a FacetGrid, which was denoted as `g` in
    the code. We can further tweak the aesthetics of the plot, such as tick positions
    and labels, by calling the relevant functions in the `FacetGrid` object:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，刻度线之间太近，且刻度标签重叠。绘图完成后，`sns.factorplot()`返回一个FacetGrid，在代码中表示为`g`。我们可以通过调用`FacetGrid`对象中的相关函数进一步调整图形的美学，比如刻度位置和标签：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![](img/7d9f248d-c1a1-49a3-8bce-5e0fcd17860d.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7d9f248d-c1a1-49a3-8bce-5e0fcd17860d.png)'
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](img/9bd895a6-fd03-4b75-b4ec-aceacf3e227b.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9bd895a6-fd03-4b75-b4ec-aceacf3e227b.png)'
- en: Faceted grid in Seaborn
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Seaborn中的分面网格
- en: Up until now, we have already mentioned `FacetGrid` a few times, but what exactly
    is it?
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经提到过`FacetGrid`几次，但它到底是什么呢？
- en: 'As you may know, `FacetGrid` is an engine for subsetting data and drawing plot
    panels determined by assigning variables to the rows and columns of `hue` parameters.
    While we can use wrapper functions such as `lmplot` and `factorplot` to scaffold
    plots on `FacetGrid` easily, it would be more flexible to build FacetGrid from
    scratch. To do that, we first supply a pandas DataFrame to the `FacetGrid` object
    and specify the way to lay out the grid via `col`, `row`, and `hue` parameters.
    Then we can assign a Seaborn or Matplotlib plotting function to each panel by
    calling the `map()` function of the `FacetGrid` object:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所知，`FacetGrid`是一个用于对数据进行子集化和绘制绘图面板的引擎，由将变量分配给`hue`参数的行和列来确定。虽然我们可以使用`lmplot`和`factorplot`等包装函数轻松地在`FacetGrid`上搭建绘图，但更灵活的方法是从头开始构建FacetGrid。为此，我们首先向`FacetGrid`对象提供一个pandas
    DataFrame，并通过`col`、`row`和`hue`参数指定布局网格的方式。然后，我们可以通过调用`FacetGrid`对象的`map()`函数为每个面板分配一个Seaborn或Matplotlib绘图函数：
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![](img/e74166a5-0600-434c-8e64-6a522ee0e42b.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e74166a5-0600-434c-8e64-6a522ee0e42b.png)'
- en: 'We can also supply keyword arguments to the plotting functions:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以向绘图函数提供关键字参数：
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![](img/b43fd7ec-bb68-4cbd-9774-0e4b67927941.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b43fd7ec-bb68-4cbd-9774-0e4b67927941.png)'
- en: '`FacetGrid` is not limited to the use of Seaborn plotting functions; let''s
    try to map the good old `Matplotlib.pyplot.plot()` function to `FacetGrid`:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`FacetGrid`不仅限于使用Seaborn绘图函数；让我们尝试将老式的`Matplotlib.pyplot.plot()`函数映射到`FacetGrid`上：'
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![](img/f84aae52-3a98-4977-a152-67f75474aa82.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f84aae52-3a98-4977-a152-67f75474aa82.png)'
- en: Pair plot in Seaborn
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Seaborn中的pair plot
- en: 'A pair plot is a special type of `FacetGrid`. Pairwise relationships between
    all variables in the input DataFrame will be visualized as scatter plots. In addition,
    a series of histograms will be displayed along the diagonal axes to show the distribution
    of the variable in that column:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 对角线轴上将显示一系列直方图，以显示该列中变量的分布：
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![](img/41b3562e-4fe4-44d6-a6b9-6513e117f5a8.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/41b3562e-4fe4-44d6-a6b9-6513e117f5a8.png)'
- en: 'We can tweak many aspects of the plot. In the next example, we will increase
    the aspect ratio, change the plot type in the diagonal line to KDE plot, and adjust
    the aesthetics of the plots using keyword arguments:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以调整绘图的许多方面。在下一个示例中，我们将增加纵横比，将对角线上的绘图类型更改为KDE绘图，并使用关键字参数调整绘图的美学效果：
- en: '[PRE12]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![](img/0cc657ec-9fb4-4433-862f-8dac69d6e56c.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0cc657ec-9fb4-4433-862f-8dac69d6e56c.png)'
- en: 'Similar to other plots based on `FacetGrid`, we can define the variables to
    be displayed in each panel. We can also manually define the comparisons that matter
    to us instead of an all-versus-all comparison by setting the `x_vars` and `y_vars` parameters.
    You may also use `seaborn.PairGrid()` directly if you require even higher flexibility
    for defining comparison groups:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 与基于`FacetGrid`的其他绘图类似，我们可以定义要在每个面板中显示的变量。我们还可以手动定义对我们重要的比较，而不是通过设置`x_vars`和`y_vars`参数进行全对全比较。如果需要更高的灵活性来定义比较组，也可以直接使用`seaborn.PairGrid()`：
- en: '[PRE13]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![](img/6978d291-58f4-41f9-a2d0-ac3c3ffa0622.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6978d291-58f4-41f9-a2d0-ac3c3ffa0622.png)'
- en: Other two-dimensional multivariate plots
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他二维多变量图
- en: FacetGrid, factor plot, and pair plot may take up a lot of space when we need
    to visualize more variables or samples. There are two special plot types that
    come in handy if you want the maximize space efficiency - Heatmaps and Candlestick
    plots.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们需要可视化更多变量或样本时，FacetGrid、factor plot和pair plot可能会占用大量空间。如果您希望最大化空间效率，则有两种特殊的绘图类型非常方便
    - 热力图和蜡烛图。
- en: Heatmap in Seaborn
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Seaborn中的热力图
- en: A heatmap is an extremely compact way to display a large amount of data. In
    the finance world, color-coded blocks can give investors a quick glance at which
    stocks are up or down. In the scientific world, heatmaps allow researchers to
    visualize the expression level of thousands of genes.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 热力图是显示大量数据的极其紧凑的方式。在金融世界中，色块编码可以让投资者快速了解哪些股票上涨或下跌。在科学世界中，热力图允许研究人员可视化成千上万基因的表达水平。
- en: The `seaborn.heatmap()` function expects a 2D list, 2D Numpy array, or pandas
    DataFrame as input. If a list or array is supplied, we can supply column and row
    labels via `xticklabels` and `yticklabels` respectively. On the other hand, if
    a DataFrame is supplied, the column labels and index values will be used to label
    the columns and rows respectively.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`seaborn.heatmap()`函数期望以2D列表、2D Numpy数组或pandas DataFrame作为输入。如果提供了列表或数组，我们可以通过`xticklabels`和`yticklabels`分别提供列和行标签。另一方面，如果提供了DataFrame，则将使用列标签和索引值分别标记列和行。'
- en: To get started, we will plot an overview of the performance of the six stocks
    using a heatmap. We define stock performance as the change of closing price when
    compared to the previous close. This piece of information was already calculated
    earlier in this chapter (that is, the `Close_change` column). Unfortunately, we
    can't supply the whole DataFrame to `seaborn.heatmap()` directly, since it expects
    company names as columns, date as index, and the change in closing price as values.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始，我们将使用热图绘制六只股票的表现概览。我们将股票表现定义为与前一个收盘价相比的收盘价变化。这些信息在本章前面已经计算过（即 `Close_change`
    列）。不幸的是，我们不能直接将整个 DataFrame 提供给 `seaborn.heatmap()`，因为它需要公司名称作为列，日期作为索引，收盘价变化作为数值。
- en: 'If you are familiar with Microsoft Excel, you might have experience in using
    pivot tables, a powerful technique to summarize the levels or values of a particular
    variable. pandas includes such functionality. The following code excerpt makes
    use of the wonderful `Pandas.DataFrame.pivot()` function to make a pivot table:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你熟悉 Microsoft Excel，你可能有使用透视表的经验，这是总结特定变量水平或数值的强大技巧。pandas 也包含了类似的功能。以下代码片段使用了
    `Pandas.DataFrame.pivot()` 函数来创建透视表：
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '| **Company Date** | **AAPL** | **IBM** | **JNJ** | **MSFT** | **PG** | **XOM**
    |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| **公司日期** | **AAPL** | **IBM** | **JNJ** | **MSFT** | **PG** | **XOM** |'
- en: '| **2017-06-01** | 0.002749 | 0.000262 | 0.004133 | 0.003723 | 0.000454 | 0.002484
    |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| **2017-06-01** | 0.002749 | 0.000262 | 0.004133 | 0.003723 | 0.000454 | 0.002484
    |'
- en: '| **2017-06-02** | 0.014819 | -0.004061 | 0.010095 | 0.023680 | 0.005220 |
    -0.014870 |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| **2017-06-02** | 0.014819 | -0.004061 | 0.010095 | 0.023680 | 0.005220 |
    -0.014870 |'
- en: '| **2017-06-05** | -0.009778 | 0.002368 | 0.002153 | 0.007246 | 0.001693 |
    0.007799 |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| **2017-06-05** | -0.009778 | 0.002368 | 0.002153 | 0.007246 | 0.001693 |
    0.007799 |'
- en: '| **2017-06-06** | 0.003378 | -0.000262 | 0.003605 | 0.003320 | 0.000676 |
    0.013605 |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| **2017-06-06** | 0.003378 | -0.000262 | 0.003605 | 0.003320 | 0.000676 |
    0.013605 |'
- en: '| **2017-06-07** | 0.005957 | -0.009123 | -0.000611 | -0.001793 | -0.000338
    | -0.003694 |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| **2017-06-07** | 0.005957 | -0.009123 | -0.000611 | -0.001793 | -0.000338
    | -0.003694 |'
- en: 'With the pivot table ready, we can proceed to plot our first heatmap:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 透视表创建完成后，我们可以继续绘制第一个热图：
- en: '[PRE15]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![](img/67b07b08-fcdf-4b0c-a0e6-6a95b296085c.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/67b07b08-fcdf-4b0c-a0e6-6a95b296085c.png)'
- en: The default heatmap implementation is not really compact enough. Of course,
    we can resize the figure via `plt.figure(figsize=(width, height))`; we can also
    toggle the square parameter to create square-shaped blocks. To ease visual recognition,
    we can add a thin border around the blocks.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的热图实现并不够紧凑。当然，我们可以通过`plt.figure(figsize=(width, height))`来调整图形大小；我们还可以切换方形参数来创建方形的块。为了方便视觉识别，我们可以在块周围添加一条细边框。
- en: 'By US stock market convention, green denotes a rise and red denotes a fall
    in prices. Hence we can adjust the `cmap` parameter to adjust the color map. However,
    neither Matplotlib nor Seaborn includes a red-green color map, so we need to create
    our own:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 根据美国股市的惯例，绿色表示价格上涨，红色表示价格下跌。因此，我们可以调整`cmap`参数来调整颜色图。然而，Matplotlib 和 Seaborn
    都没有包含红绿颜色图，所以我们需要自己创建一个：
- en: 'At the end of [Chapter 7](7daeb59b-3e8e-4a33-9437-2839c6ed47e4.xhtml), *Visualizing
    Online Data*, we briefly introduced functions for creating custom color maps.
    Here we will use `seaborn.diverging_palette()` to create the red-green color map,
    which requires us to specify the hues, saturation, and lightness (husl) for the
    negative and positive extents of the color map. You may also use this code to
    launch an interactive widget in Jupyter Notebook to help select the colors:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第7章](7daeb59b-3e8e-4a33-9437-2839c6ed47e4.xhtml)《可视化在线数据》末尾，我们简要介绍了创建自定义颜色图的函数。这里我们将使用`seaborn.diverging_palette()`来创建红绿颜色图，它要求我们为颜色图的负值和正值指定色调、饱和度和亮度（husl）。你还可以使用以下代码在
    Jupyter Notebook 中启动交互式小部件，帮助选择颜色：
- en: '`%matplotlib notebook`'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`%matplotlib notebook`'
- en: '`import seaborn as sns`'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`import seaborn as sns`'
- en: '`sns.choose_diverging_palette(as_cmap=True)`'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`sns.choose_diverging_palette(as_cmap=True)`'
- en: '[PRE16]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![](img/6c6e3457-478c-4902-9df9-38304a360e53.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6c6e3457-478c-4902-9df9-38304a360e53.png)'
- en: 'It could be hard to discern small differences in values when color is the only
    discriminative factor. Adding text annotations to each color block may help readers
    understand the magnitude of the difference:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 当颜色是唯一的区分因素时，可能很难分辨数值间的小差异。为每个颜色块添加文本注释可能有助于读者理解差异的大小：
- en: '[PRE17]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '![](img/8157d51c-154a-4507-b8f8-845ed511a41a.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8157d51c-154a-4507-b8f8-845ed511a41a.png)'
- en: Candlestick plot in matplotlib.finance
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: matplotlib.finance 中的蜡烛图
- en: As you have seen in the first part of this chapter, our dataset contains the
    opening and closing prices as well as the highest and lowest price per trading
    day. None of the plots we have described thus far are able to describe the trend
    of all these variables in a single plot.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在本章的第一部分所看到的，我们的数据集包含每个交易日的开盘价、收盘价以及最高和最低价格。到目前为止，我们描述的任何图表都无法在单个图表中描述所有这些变量的趋势。
- en: In the financial world, the candlestick plot is almost the default choice for
    describing price movements of stocks, currencies, and commodities over a time
    period. Each candlestick consists of the body, describing the opening and closing
    prices, and extended wicks illustrating the highest and lowest prices of a particular
    trading day. If the closing price is higher than the opening price, the candlestick
    is often colored black. Conversely, the candlestick is colored red if the closing
    price is lower. The trader can then infer the opening and closing prices based
    on the combination of color and the boundary of the candlestick body.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在金融界，蜡烛图几乎是描述股票、货币和商品在一段时间内价格变动的默认选择。每个蜡烛图由实体组成，描述开盘和收盘价，以及展示特定交易日最高和最低价格的延伸影线。如果收盘价高于开盘价，则蜡烛图通常为黑色。相反，如果收盘价低于开盘价，则为红色。交易员可以根据颜色的组合和蜡烛图实体的边界推断开盘和收盘价。
- en: 'In the following example, we are going to prepare a candlestick chart of Apple
    Incorporation in the last 50 trading days of our DataFrame. We will also apply
    the tick formatter to label the ticks as dates:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们将准备一个苹果公司在我们的 DataFrame 最近 50 个交易日的蜡烛图。我们还将应用刻度格式化程序来标记日期的刻度：
- en: '[PRE19]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '![](img/3c187f5e-6be3-47c0-b30d-e6f741886c36.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c187f5e-6be3-47c0-b30d-e6f741886c36.png)'
- en: Starting from Matplotlib 2.0, `matplotlib.finance` is deprecated. Readers should
    use `mpl_finance` ([https://github.com/matplotlib/mpl_finance](https://github.com/matplotlib/mpl_finance))
    in the future instead. However, as of writing this chapter, `mpl_finance` is not
    yet available on PyPI, so let's stick to `matplotlib.finance` for the time being.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Matplotlib 2.0 开始，`matplotlib.finance` 已被弃用。读者应该将来使用`mpl_finance`（[https://github.com/matplotlib/mpl_finance](https://github.com/matplotlib/mpl_finance)）。然而，截至本章撰写时，`mpl_finance`
    尚未在 PyPI 上提供，因此我们暂时还是使用`matplotlib.finance`。
- en: Visualizing various stock market indicators
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可视化各种股市指标
- en: The candlestick plot in the current form is a bit bland. Traders usually overlay
    stock indicators such as **Average True Range** (**ATR**), Bollinger band, **Commodity
    Channel Index** (**CCI**), **Exponential Moving Average** (**EMA**), **Moving
    Average Convergence Divergence** (**MACD**), **Relative Strength Index** (**RSI**),
    and various other stats for technical analysis.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 当前形式的蜡烛图有些单调。交易员通常会叠加股票指标，如**平均真实范围**（**ATR**）、布林带、**商品通道指数**（**CCI**）、**指数移动平均**（**EMA**）、**移动平均收敛背离**（**MACD**）、**相对强弱指数**（**RSI**）以及各种其他技术分析的统计数据。
- en: 'Stockstats ([https://github.com/jealous/stockstats](https://github.com/jealous/stockstats))
    is a great package for calculating these indicators/stats and many more. It wraps
    around pandas DataFrames and generate the stats on the fly when they are accessed.
    To use `stockstats`, we simply install it via PyPI: `pip install stockstats`.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Stockstats（[https://github.com/jealous/stockstats](https://github.com/jealous/stockstats)）是一个用于计算这些指标/统计数据以及更多内容的优秀包。它封装了
    pandas 的数据框架，并在访问时动态生成这些统计数据。要使用`stockstats`，我们只需通过 PyPI 安装它：`pip install stockstats`。
- en: 'Next, we can convert a pandas DataFrame to a stockstats DataFrame via `stockstats.StockDataFrame.retype()`.
    A plethora of stock indicators can then be accessed by following the pattern `StockDataFrame["variable_timeWindow_indicator"]`.
    For example, `StockDataFrame[''open_2_sma'']` would give us the 2-day simple moving
    average on the opening price. Shortcuts may be available for some indicators,
    so please consult the official documentation for more information:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以通过`stockstats.StockDataFrame.retype()`将 pandas DataFrame 转换为 stockstats
    DataFrame。然后，可以按照`StockDataFrame["variable_timeWindow_indicator"]`的模式访问大量股票指标。例如，`StockDataFrame['open_2_sma']`将给出开盘价的
    2 天简单移动平均线。一些指标可能有快捷方式，请查阅官方文档获取更多信息：
- en: '[PRE20]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'With the stock indicators ready, we can overlay them on the same candlestick
    chart:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好股票指标后，我们可以将它们叠加在同一个蜡烛图上：
- en: '[PRE21]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '![](img/cc3ee719-5c97-415e-a83b-fc86db81482a.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cc3ee719-5c97-415e-a83b-fc86db81482a.png)'
- en: Building a comprehensive stock chart
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建全面的股票图表
- en: 'In the following elaborate example, we are going to apply the many techniques
    that we have covered thus far to create a more comprehensive stock chart. In addition
    to the preceding plot, we will add a line chart to display the **Relative Strength
    Index** (**RSI**) and a bar chart to show trade volume. A special market event
    ([http://markets.businessinsider.com/news/stocks/apple-stock-price-falling-new-iphone-speed-2017-6-1002082799](http://markets.businessinsider.com/news/stocks/apple-stock-price-falling-new-iphone-speed-2017-6-1002082799))
    is going to be annotated on the chart as well:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下详细示例中，我们将应用到目前为止讲解的多种技巧，创建一个更全面的股票图表。除了前面的图表外，我们还将添加一条线图来显示**相对强弱指数**（**RSI**）以及一条柱状图来显示交易量。一个特殊的市场事件（[http://markets.businessinsider.com/news/stocks/apple-stock-price-falling-new-iphone-speed-2017-6-1002082799](http://markets.businessinsider.com/news/stocks/apple-stock-price-falling-new-iphone-speed-2017-6-1002082799)）也将在图表中做注释：
- en: If you look closely at the charts, you might notice some missing dates. These
    days are usually non-trading days or public holidays that were not present in
    our DataFrame.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仔细观察图表，你可能会注意到一些缺失的日期。这些日期通常是非交易日或公共假期，它们在我们的数据框中没有出现。
- en: '[PRE22]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '![](img/69797210-b5fa-42bc-9a89-e4eedda2a87b.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](img/69797210-b5fa-42bc-9a89-e4eedda2a87b.png)'
- en: Three-dimensional (3D) plots
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 三维（3D）图表
- en: By transitioning to the three-dimensional space, you may enjoy greater creative
    freedom when creating visualizations. The extra dimension can also accommodate
    more information in a single plot. However, some may argue that 3D is nothing
    more than a visual gimmick when projected to a 2D surface (such as paper) as it
    would obfuscate the interpretation of data points.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 通过过渡到三维空间，在创建可视化时，你可能会享有更大的创作自由度。额外的维度还可以在单一图表中容纳更多信息。然而，有些人可能会认为，当三维图形被投影到二维表面（如纸张）时，三维不过是一个视觉噱头，因为它会模糊数据点的解读。
- en: In Matplotlib version 2, despite significant developments in the 3D API, annoying
    bugs or glitches still exist. We will discuss some workarounds toward the end
    of this chapter. More powerful Python 3D visualization packages do exist (such
    as MayaVi2, Plotly, and VisPy), but it's good to use Matplotlib's 3D plotting
    functions if you want to use the same package for both 2D and 3D plots, or you
    would like to maintain the aesthetics of its 2D plots.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在Matplotlib版本2中，尽管三维API有了显著的进展，但依然存在一些令人烦恼的错误或问题。我们将在本章的最后讨论一些解决方法。确实有更强大的Python
    3D可视化包（如MayaVi2、Plotly和VisPy），但如果你希望使用同一个包同时绘制2D和3D图，或者希望保持其2D图的美学，使用Matplotlib的三维绘图功能是很好的选择。
- en: For the most part, 3D plots in Matplotlib have similar structures to 2D plots.
    As such, we will not go through every 3D plot type in this section. We will put
    our focus on 3D scatter plots and bar charts.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数情况下，Matplotlib中的三维图与二维图有相似的结构。因此，在本节中我们不会讨论每种三维图类型。我们将重点介绍三维散点图和柱状图。
- en: 3D scatter plot
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 三维散点图
- en: 'In [Chapter 6](bf358e3c-35c4-47c5-9683-7378dfa01c4e.xhtml), *Hello Plotting
    World!*, we have already explored scatter plots in two dimensions. In this section,
    let''s try to create a 3D scatter plot. Before doing that, we need some data points
    in three dimensions (*x*, *y*, *z*):'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第6章](bf358e3c-35c4-47c5-9683-7378dfa01c4e.xhtml)，《你好，绘图世界！》中，我们已经探索了二维散点图。在这一节中，让我们尝试创建一个三维散点图。在此之前，我们需要一些三维数据点（*x*，*y*，*z*）：
- en: '[PRE23]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '| **Point** | **x** | **y** | **z** |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| **点** | **x** | **y** | **z** |'
- en: '| **0** | -17.034178 | 18.972282 | 40.482403 |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| **0** | -17.034178 | 18.972282 | 40.482403 |'
- en: '| **1** | -16.881481 | 21.815451 | 44.156799 |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| **1** | -16.881481 | 21.815451 | 44.156799 |'
- en: '| **2** | -16.749582 | 18.154911 | 34.131474 |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| **2** | -16.749582 | 18.154911 | 34.131474 |'
- en: '| **3** | -16.876919 | 20.598286 | 36.271809 |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| **3** | -16.876919 | 20.598286 | 36.271809 |'
- en: '| **4** | -16.849340 | 17.403711 | 42.993984 |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| **4** | -16.849340 | 17.403711 | 42.993984 |'
- en: 'To declare a 3D plot, we first need to import the `Axes3D` object from the
    `mplot3d` extension in `mpl_toolkits`, which is responsible for rendering 3D plots
    in a 2D plane. After that, we need to specify `projection=''3d''` when we create
    subplots:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 要声明一个三维图，我们首先需要从`mpl_toolkits`中的`mplot3d`扩展导入`Axes3D`对象，它负责在二维平面中渲染三维图表。然后，在创建子图时，我们需要指定`projection='3d'`：
- en: '[PRE24]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '![](img/0c1800e1-f59a-4c26-a62e-f42eac2c6a47.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0c1800e1-f59a-4c26-a62e-f42eac2c6a47.png)'
- en: Behold, the mighty sCATter plot in 3D. Cats are currently taking over the internet.
    According to the New York Times, cats are "the essential building block of the
    Internet" ([https://www.nytimes.com/2014/07/23/upshot/what-the-internet-can-see-from-your-cat-pictures.html](https://www.nytimes.com/2014/07/23/upshot/what-the-internet-can-see-from-your-cat-pictures.html)).
    Undoubtedly, they deserve a place in this chapter as well.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 瞧，强大的 3D 散点图。猫目前正在占领互联网。根据《纽约时报》的报道，猫是“互联网的基本构建单元”（[https://www.nytimes.com/2014/07/23/upshot/what-the-internet-can-see-from-your-cat-pictures.html](https://www.nytimes.com/2014/07/23/upshot/what-the-internet-can-see-from-your-cat-pictures.html)）。毫无疑问，它们也应该在本章中占有一席之地。
- en: 'Contrary to the 2D version of `scatter()`, we need to provide X, Y, and Z coordinates
    when we are creating a 3D scatter plot. Yet the parameters that are supported
    in 2D `scatter()` can be applied to 3D `scatter()` as well:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 与 2D 版本的 `scatter()` 相反，当创建 3D 散点图时，我们需要提供 X、Y 和 Z 坐标。然而，2D `scatter()` 支持的参数也可以应用于
    3D `scatter()`：
- en: '[PRE25]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '![](img/06ee11d2-4d8c-495c-a134-117b8d0bb11b.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](img/06ee11d2-4d8c-495c-a134-117b8d0bb11b.png)'
- en: 'To change the viewing angle and elevation of the 3D plot, we can make use of
    `view_init()`. The `azim` parameter specifies the azimuth angle in the X-Y plane,
    while `elev` specifies the elevation angle. When the azimuth angle is 0, the X-Y
    plane would appear to the north from you. Meanwhile, an azimuth angle of 180 would
    show you the south side of the X-Y plane:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改 3D 图的视角和仰角，我们可以使用 `view_init()`。`azim` 参数指定 X-Y 平面上的方位角，而 `elev` 指定仰角。当方位角为
    0 时，X-Y 平面将从你的北侧看起来。同时，方位角为 180 时，你将看到 X-Y 平面的南侧：
- en: '[PRE26]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '![](img/8e24fedd-2a1c-4960-a65c-9912cb91dca5.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8e24fedd-2a1c-4960-a65c-9912cb91dca5.png)'
- en: 3D bar chart
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3D 条形图
- en: 'We introduced candlestick plots for showing **Open-High-Low-Close** (**OHLC**)
    financial data. In addition, a 3D bar chart can be employed to show OHLC across
    time. The next figure shows a typical example of plotting a 5-day OHLC bar chart:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们引入了烛台图来展示**开盘-最高-最低-收盘**（**OHLC**）金融数据。此外，可以使用 3D 条形图来展示随时间变化的 OHLC。下图展示了绘制
    5 天 OHLC 条形图的典型示例：
- en: '[PRE27]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '![](img/cd5659d3-e410-4dbe-a51c-12fb5a218e01.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cd5659d3-e410-4dbe-a51c-12fb5a218e01.png)'
- en: 'The method for setting ticks and labels is similar to other Matplotlib plotting
    functions:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 设置刻度和标签的方法与其他 Matplotlib 绘图函数类似：
- en: '[PRE28]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '![](img/802994e2-c7c6-4e94-aece-6fea3a3eeea7.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](img/802994e2-c7c6-4e94-aece-6fea3a3eeea7.png)'
- en: Caveats of Matplotlib 3D
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Matplotlib 3D 的注意事项
- en: Due to the lack of a true 3D graphical rendering backend (such as OpenGL) and
    proper algorithm for detecting 3D objects' intersections, the 3D plotting capabilities
    of Matplotlib are not great but just adequate for typical applications. In the
    official Matplotlib FAQ ([https://matplotlib.org/mpl_toolkits/mplot3d/faq.html](https://matplotlib.org/mpl_toolkits/mplot3d/faq.html)),
    the author noted that 3D plots may not look right at certain angles. Besides,
    we also reported that `mplot3d` would fail to clip bar charts if zlim is set ([https://github.com/matplotlib/matplotlib/issues/8902](https://github.com/matplotlib/matplotlib/issues/8902);
    see also [https://github.com/matplotlib/matplotlib/issues/209](https://github.com/matplotlib/matplotlib/issues/209)).
    Without improvements in the 3D rendering backend, these issues are hard to fix.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 由于缺乏真正的 3D 图形渲染后端（如 OpenGL）和适当的算法来检测 3D 对象的交叉点，Matplotlib 的 3D 绘图能力并不强大，但对于典型应用来说仅仅够用。在官方
    Matplotlib FAQ 中（[https://matplotlib.org/mpl_toolkits/mplot3d/faq.html](https://matplotlib.org/mpl_toolkits/mplot3d/faq.html)），作者指出
    3D 图可能在某些角度看起来不正确。此外，我们还报告了如果设置了 zlim，`mplot3d` 会无法裁剪条形图的问题（[https://github.com/matplotlib/matplotlib/issues/8902](https://github.com/matplotlib/matplotlib/issues/8902)；另见
    [https://github.com/matplotlib/matplotlib/issues/209](https://github.com/matplotlib/matplotlib/issues/209)）。在没有改进
    3D 渲染后端的情况下，这些问题很难解决。
- en: 'To better illustrate the latter issue, let''s try to add `ax.set_zlim3d(bottom=110,
    top=150)` right above `plt.tight_layout()` in the previous 3D bar chart:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地说明后一个问题，让我们尝试在之前的 3D 条形图中的 `plt.tight_layout()` 上方添加 `ax.set_zlim3d(bottom=110,
    top=150)`：
- en: '![](img/8edd8612-18d7-40dc-880f-1d264127265f.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8edd8612-18d7-40dc-880f-1d264127265f.png)'
- en: 'Clearly, something is going wrong, as the bars overshoot the lower boundary
    of the axes. We will try to address the latter issue through the following workaround:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，柱状图超出了坐标轴的下边界。我们将尝试通过以下解决方法解决后一个问题：
- en: '[PRE29]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '![](img/3893c300-afb5-489e-9222-2088a3ff323c.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3893c300-afb5-489e-9222-2088a3ff323c.png)'
- en: Basically, we truncated the *y* values by 110, and then we used a tick formatter
    (`major_formatter`) to shift the tick value back to the original. For 3D scatter
    plots, we can simply remove the data points that exceed the boundary of `set_zlim3d()`
    in order to generate a proper figure. However, these workarounds may not work
    for every 3D plot type.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，我们将 *y* 值截断了 110，然后使用刻度格式化器（`major_formatter`）将刻度值恢复到原始值。对于三维散点图，我们可以简单地移除超过
    `set_zlim3d()` 边界的数据点，以生成正确的图形。然而，这些解决方法可能并不适用于所有类型的三维图形。
- en: Summary
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: You have successfully learned the techniques for visualizing multivariate data
    in 2D and 3D forms. Although most examples in this chapter revolved around the
    topic of stock trading, the data processing and visualization methods can be applied readily to
    other fields as well. In particular, the divide-and-conquer approach used to visualize
    multivariate data in facets is extremely useful in the scientific field.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经成功掌握了将多变量数据以二维和三维形式可视化的技术。尽管本章中的大部分示例围绕股票交易这一主题展开，但数据处理和可视化方法也可以轻松应用于其他领域。特别是，用于在多个面上可视化多变量数据的分治法在科学领域中非常有用。
- en: We didn't go into too much detail of the 3D plotting capability of Matplotlib,
    as it is yet to be polished. For simple 3D plots, Matplotlib already suffices.
    The learning curve can be reduced if we use the same package for both 2D and 3D
    plots. You are advised to take a look at MayaVi2, Plotly, and VisPy if you require
    more powerful 3D plotting functions.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们没有过多探讨 Matplotlib 的三维绘图功能，因为它尚未完善。对于简单的三维图形，Matplotlib 已经足够了。如果我们使用同一个库来绘制二维和三维图形，可以减少学习曲线。如果你需要更强大的三维绘图功能，建议你查看
    MayaVi2、Plotly 和 VisPy。
