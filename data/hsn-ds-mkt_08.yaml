- en: Product Analytics
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 产品分析
- en: From this chapter on, we are going to switch gears from conducting analyses
    on customer behaviors and start discussing how we can use data science for more
    granular, product-level analytics. There has been increasing interest and demand
    from various companies, especially among e-commerce businesses, for utilizing
    data to understand how customers engage and interact with different products.
    It has also been proven that rigorous product analytics can help businesses to
    improve user engagements and conversions that ultimately leads to higher profits.
    In this chapter, we are going to discuss what product analytics is and how it
    can be employed for different use cases.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 从本章开始，我们将转变方向，从对客户行为的分析转向讨论如何利用数据科学进行更细粒度的产品层级分析。各家公司，特别是电子商务企业，日益关注和需求利用数据了解客户如何与不同的产品互动和参与。研究也证明，严格的产品分析可以帮助企业提升用户参与度和转化率，最终带来更高的利润。在本章中，我们将讨论什么是产品分析，以及它如何用于不同的应用场景。
- en: Once we familiarize ourselves with the concept of product analytics, we are
    going to use the *Online Retail Data Set* from the UCI Machine Learning Repository for
    our programming exercises. We are going to start by analyzing the overall time
    series trends we can observe from the dataset. Then, we will look into how the
    customer engagements and interactions with individual products change over time
    with the goal of being able to build a simple product recommendation logic or
    algorithm in the end. For Python exercises, we will mainly utilize the `pandas`
    and `matplotlib` libraries for data analyses and visualizations. For R exercises,
    we will mainly use the `dplyr` and `ggplot2` libraries and introduce two other
    R libraries, `readxl` and `lubridate`.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们熟悉了产品分析的概念，我们将使用来自 UCI 机器学习库的*在线零售数据集*进行编程练习。我们将从分析数据集中可以观察到的整体时间序列趋势开始。然后，我们将研究客户与单个产品的互动和参与如何随时间变化，目标是最终能够构建一个简单的产品推荐逻辑或算法。对于
    Python 练习，我们将主要利用`pandas`和`matplotlib`库进行数据分析和可视化。对于 R 练习，我们将主要使用`dplyr`和`ggplot2`库，并介绍另外两个
    R 库，`readxl`和`lubridate`。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: The importance of product analytics
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 产品分析的重要性
- en: Product analytics using Python
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Python 进行产品分析
- en: Product analytics using R
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 R 进行产品分析
- en: The importance of product analytics
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 产品分析的重要性
- en: '**Product analytics** is a way to draw insights from data on how customers
    engage and interact with products offered, how different products perform, and
    what some of the observable weaknesses and strengths in a business are. However,
    product analytics does not just stop at analyzing the data. The ultimate goal
    of product analytics is really to build actionable insights and reports that can
    further help optimize and improve product performance and generate new marketing
    or product ideas based on the findings of product analytics.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**产品分析**是一种从数据中提取见解的方法，帮助了解客户如何与所提供的产品互动和参与，不同产品的表现如何，以及业务中的一些可观察到的弱点和优势。然而，产品分析不仅仅停留在分析数据上。产品分析的最终目标是构建可操作的见解和报告，进一步帮助优化和改善产品表现，并根据产品分析的发现生成新的营销或产品创意。'
- en: 'Product analytics starts by tracking events. These events can be customer website
    visits, page views, browser histories, purchases, or any other actions that customers
    can take with the products that you offer. Then, you can start analyzing and visualizing
    any observable patterns in these events with the goal of creating actionable insights
    or reports. Some of the common goals with product analytics are as follows:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 产品分析从跟踪事件开始。这些事件可以是客户的网站访问、页面浏览、浏览器历史记录、购买行为或客户对你所提供产品采取的任何其他操作。然后，你可以开始分析和可视化这些事件中的任何可观察到的模式，目标是创建可操作的见解或报告。产品分析的常见目标如下：
- en: '**Improve customer and product retention**: By analyzing what customers viewed
    and purchased, you can identify what items customers repeatedly purchase and who
    those repeat customers are. On the other hand, you can also identify what items
    customers do not buy and the customers who are at risk of churning. Analyzing
    and understanding the common attributes of the repeatedly purchased items and
    repeat customers can help you improve your retention strategy.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提高客户和产品的留存率**：通过分析客户浏览和购买的商品，您可以识别出客户反复购买的商品以及这些回头客是谁。另一方面，您还可以识别出客户未购买的商品以及可能流失的客户。分析并理解反复购买商品和回头客的共同属性可以帮助您改善留存策略。'
- en: '**Identify popular and trending products**: As a marketer for retail businesses,
    it is important to have a good understanding of popular and trending products.
    These best-selling products are key revenue drivers for the business and provide
    new selling opportunities, such as cross-sells or bundle sales. With product analytics,
    you should be able to identify and track these popular and trending products easily and
    generate new strategies to explore different opportunities using these best-selling
    products.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**识别热门和流行的产品**：作为零售企业的营销人员，了解热门和流行产品非常重要。这些畅销产品是企业的主要收入来源，并提供新的销售机会，如交叉销售或捆绑销售。通过产品分析，您应该能够轻松识别和追踪这些热门和流行产品，并基于这些畅销产品制定新的策略，挖掘不同的机会。'
- en: '**Segment customers and products based on their key attributes**: With the
    customer profile and product data, you can segment your customer base and products
    based on their attributes using product analytics. Some of the ways to segment
    your product data are based on their profitability, volumes of sales, volumes
    of reorders, and numbers of refunds. With these segmentations, you can draw actionable
    insights on which product or customer segments to target next.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**根据关键属性对客户和产品进行细分**：通过客户画像和产品数据，您可以使用产品分析根据客户和产品的属性对其进行细分。细分产品数据的一些方式包括基于其盈利能力、销售量、重复订购量以及退款数量。通过这些细分，您可以获得可操作的洞察，确定下一个目标的产品或客户细分。'
- en: '**Develop marketing strategies with higher ROI**: Product analytics can also
    be used to analyze the **return on investment** (**ROI**) of your marketing strategies.
    By analyzing the marketing dollars spent on promoting certain items and the revenue
    generated from those products, you can understand what works and what does not.
    Using product analytics for marketing ROI analyses can help you create more efficient
    marketing strategies.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**制定更高投资回报率的营销策略**：产品分析还可以用来分析您的营销策略的**投资回报率**（**ROI**）。通过分析用于推广某些商品的营销费用以及这些商品所产生的收入，您可以了解哪些方法有效，哪些无效。使用产品分析来进行营销投资回报率分析可以帮助您制定更高效的营销策略。'
- en: With what we have discussed here about product analytics, we are going to discuss
    how to achieve some of these product analytics goals using retail business data
    in the following programming exercises. We are going to discuss how we can use
    the data to analyze the patterns of repeat customers and their contributions to
    overall revenue. Also, we will be covering how we can use product analytics to
    analyze the behaviors of best-selling products. More specifically, we are going
    to discuss how to track the trends of popular items over time and then briefly
    discuss how we can utilize this trending item data for product recommendations
    in your marketing strategies.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里讨论的产品分析基础上，我们将在以下编程练习中探讨如何利用零售业务数据实现这些产品分析目标。我们将讨论如何使用数据分析回头客的模式及其对整体收入的贡献。此外，我们还将介绍如何使用产品分析来分析畅销产品的行为。更具体地说，我们将讨论如何追踪热门商品的趋势，并简要讨论如何利用这些趋势数据为您的营销策略中的产品推荐提供支持。
- en: Product analytics using Python
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Python 进行产品分析
- en: In this section, we are going to discuss how to conduct product analytics using
    the `pandas` and `matplotlib` packages in Python. For those readers who would
    like to use R, instead of Python, for this exercise, you can skip to the next
    section. We will start this section by analyzing the overall time series trends
    in the revenue and numbers of purchases, and the purchase patterns of repeat purchase
    customers, and then we will move on to analyze the trends in products being sold.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将讨论如何使用Python中的`pandas`和`matplotlib`包进行产品分析。对于那些想使用R而非Python进行练习的读者，你可以跳到下一部分。我们将从分析收入和购买数量的总体时间序列趋势，以及重复购买客户的购买模式开始，接着分析销售产品的趋势。
- en: 'For this exercise, we will be using one of the publicly available datasets
    from the UCI Machine Learning Repository, which can be found using this link: [http://archive.ics.uci.edu/ml/datasets/online+retail#](http://archive.ics.uci.edu/ml/datasets/online+retail#).
    From this link, you can download the data in Microsoft Excel format, named `Online
    Retail.xlsx`. Once you have downloaded this data, you can load it into your Jupyter
    Notebook by running the following command:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个练习，我们将使用来自UCI机器学习库的一个公开可用数据集，可以通过以下链接找到：[http://archive.ics.uci.edu/ml/datasets/online+retail#](http://archive.ics.uci.edu/ml/datasets/online+retail#)。从这个链接中，你可以下载名为`Online
    Retail.xlsx`的Excel格式数据。一旦下载了数据，你可以通过运行以下命令将其加载到你的Jupyter Notebook中：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Similar to the other Python exercises in previous chapters, we use the `%matplotlib
    inline` command to display plots on the Jupyter Notebook. Then, we can import
    the `matplotlib` and `pandas` packages that we will be using for further product
    analytics. One thing to note in this code snippet is the new function in the `pandas`
    package that we are using here, `read_excel`. This function lets you load any
    Excel file into your `pandas` `DataFrame`. As you can see from this code, we are
    passing two arguments to the `read_excel` function—`io`, for the path to the data
    file, and `sheet_name`, for the name of the Excel sheet that we want to load the
    data from.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 与前面章节中的其他Python练习类似，我们使用`%matplotlib inline`命令来显示Jupyter Notebook中的图表。然后，我们可以导入用于进一步产品分析的`matplotlib`和`pandas`包。值得注意的是，在这段代码中，我们使用了`pandas`包中的新函数`read_excel`。这个函数允许你将任何Excel文件加载到`pandas`的`DataFrame`中。从这段代码可以看出，我们向`read_excel`函数传递了两个参数——`io`，用于指定数据文件的路径，以及`sheet_name`，用于指定要加载的Excel工作表的名称。
- en: 'Once you have loaded this data into a `pandas` `DataFrame`, it should look
    as shown in the following screenshot:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你将数据加载到`pandas`的`DataFrame`中，它应当如下所示：
- en: '![](img/096f311a-dc65-4cc1-9982-e1b9e9611777.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/096f311a-dc65-4cc1-9982-e1b9e9611777.png)'
- en: 'Before we move on to the next step, there is one data-cleaning step we need
    to take. Let''s look quickly at the distribution of the `Quantity` column. We
    will visualize the distributions of `Quantity` by using the following code:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续进行下一步之前，有一个数据清理的步骤需要完成。我们快速查看一下`Quantity`（数量）列的分布情况。我们将使用以下代码可视化`Quantity`的分布：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'As you can see from this code, we are visualizing the distribution of the `Quantity` column,
    in a box plot, by using `pandas` `DataFrame`''s `plot.box` function. The resulting
    box plot looks as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 从这段代码可以看到，我们使用`pandas`的`DataFrame`的`plot.box`函数，在箱线图中可视化`Quantity`列的分布。生成的箱线图如下所示：
- en: '![](img/54de30b6-5883-437f-a6e5-bc5c570d2da6.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/54de30b6-5883-437f-a6e5-bc5c570d2da6.png)'
- en: 'As you can see from this plot, some orders have negative quantities. This is
    because the cancelled or refunded orders are recorded with negative values in
    the `Quantity` column of our dataset. For illustration purposes in this exercise,
    we are going to disregard the cancelled orders. We can filter out all the cancelled
    orders in our `DataFrame` by using the following code:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个图表中可以看到，一些订单的数量是负数。这是因为被取消或退款的订单在我们的数据集中的`Quantity`列中记录了负值。为了说明本练习中的问题，我们将忽略被取消的订单。我们可以使用以下代码在`DataFrame`中过滤掉所有被取消的订单：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now, we are ready to conduct further analyses and dive into our data.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以进行进一步的分析，深入探索我们的数据。
- en: Time series trends
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 时间序列趋势
- en: Before we look at product-level data, as a marketer for an e-commerce business,
    it will be beneficial to have a better understanding of the overall time series
    trends in the revenue and the numbers of orders or purchases. This will help us
    understand whether the business is growing or shrinking in terms of both the overall
    revenue and the numbers of orders we receive over time.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在查看产品级别的数据之前，作为一名电商行业的营销人员，了解整体收入和订单或购买数量的时间序列趋势会是非常有益的。这将帮助我们了解业务在收入和订单数量上是增长还是收缩。
- en: 'First, we are going to look into the numbers of orders received over time.
    Take a look at the following code:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将查看随着时间推移接收的订单数量。请查看以下代码：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'As you can see from this code, we are using the `resample` and `nunique` functions
    that we have not used in the previous chapters. The `resample` function resamples
    and converts time series data into the frequency we desire. In our example, we
    are resampling our time series data into monthly time series data, by using `''M''`
    as our target frequency and counting the number of distinct or unique invoice
    numbers. This way, we can get the number of unique purchases or orders month-on-month.
    The resulting DataFrame looks like the following screenshot:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 从这段代码中你可以看到，我们使用了在前几章中没有用到的`resample`和`nunique`函数。`resample`函数重新采样并将时间序列数据转换为我们所需的频率。在我们的示例中，我们通过使用`'M'`作为目标频率，将时间序列数据重新采样为按月划分的时间序列数据，并计算不同的发票号的数量。这样，我们就可以得到每月独特购买或订单的数量。结果的DataFrame如下所示：
- en: '![](img/48e37c4a-56ab-46ef-ba29-ebe5e0f740bc.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/48e37c4a-56ab-46ef-ba29-ebe5e0f740bc.png)'
- en: 'Often, time series data is better visualized using line charts. Let''s take
    a look at the following code to see how we can visualize this monthly data in
    a line chart:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，时间序列数据通过折线图可视化效果更好。让我们查看以下代码，看看如何将这些月度数据在折线图中进行可视化：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'As you can see from this code, we are using the `plot` function of a `pandas`
    `DataFrame`. Using the `xticks` function of the `matplotlib` package, we can customize
    the labels of the *x*-ticks. Let''s take a look at the following plot first:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 从这段代码中你可以看到，我们正在使用`pandas` `DataFrame`的`plot`函数。通过使用`matplotlib`包的`xticks`函数，我们可以自定义*x*轴刻度的标签。让我们先看一下以下的图表：
- en: '![](img/ad4f12ae-d753-49b2-ac9f-a60d18a5c2c3.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ad4f12ae-d753-49b2-ac9f-a60d18a5c2c3.png)'
- en: As you may notice from this plot, the tick labels in the *x *axis are formatted
    by month and year. If you look back at the previous code, we formatted them using `x.strftime('%m.%Y')`,
    where `x` is the `Python` `date` object, `%m` is the placeholder for the month
    value, and `%Y` is the placeholder for the year value. The `strftime` function
    of the `Python` `date` object formats the date into the given format.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你从这张图表中看到的那样，*x*轴的刻度标签按月和年格式化。如果你回顾之前的代码，我们使用`x.strftime('%m.%Y')`来格式化，其中`x`是`Python`的`date`对象，`%m`是月份值的占位符，`%Y`是年份值的占位符。`Python`的`date`对象的`strftime`函数将日期格式化为给定的格式。
- en: 'One thing that is noticeable from this chart is that there is a sudden radical
    drop in the number of orders in December 2011\. If you look closely at the data,
    this is simply because we do not have the data for the full month of December
    2011\. We can verify this by using the following code:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 从这张图表中可以明显看到，2011年12月的订单数量出现了突然而剧烈的下降。如果你仔细查看数据，会发现这只是因为我们没有完整的2011年12月的数据。我们可以使用以下代码来验证这一点：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In this code, we get a series of all invoice dates from December 1, 2011\.
    Then, we print out the minimum and maximum dates. When you run this code, you
    will get the following output:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，我们获取了从2011年12月1日开始的所有发票日期的序列。然后，我们打印出最小和最大日期。当你运行这段代码时，你将得到以下输出：
- en: '![](img/01decec3-7868-42e0-9104-b2ef6c8cbd2b.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/01decec3-7868-42e0-9104-b2ef6c8cbd2b.png)'
- en: 'As you can see from this output, we only have the data from December 1, to
    December 9, 2011\. It would be a misrepresentation if we use this data for analyzing
    December sales and revenue. For further analyses, we will disregard any data from December
    1, 2011\. You can use the following code to remove those data points:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个输出中你可以看到，我们只有2011年12月1日到12月9日的数据。如果我们用这些数据来分析12月的销售和收入，那将是误导性的。为了进一步分析，我们将忽略2011年12月1日的数据。你可以使用以下代码来删除这些数据点：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now that we have filtered out incomplete data for December 2011, we can redraw
    the line chart using the previous codes. After removing those data points from
    December 2011, the line chart looks like the following:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经排除了2011年12月的不完整数据，可以使用之前的代码重新绘制折线图。去除2011年12月的数据点后，折线图如下所示：
- en: '![](img/c5682d30-7659-4fa2-8bcf-1f6078448ba5.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c5682d30-7659-4fa2-8bcf-1f6078448ba5.png)'
- en: Let's take a closer look at this chart. The monthly number of orders seems to
    float around 1,500 from December 2010 to August 2011, and then increases significantly
    from September 2011, and almost doubles by November 2011\. One explanation for
    this could be that the business is actually growing significantly from September
    2011\. Another explanation could be seasonal effects. In e-commerce businesses,
    it is not rare to see spikes in sales as it approaches the end of the year. Typically,
    sales rise significantly from October to January for many e-commerce businesses,
    and without the data from the previous year, it is difficult to conclude whether
    this spike in sales is due to a growth in business or due to seasonal effects.
    When you are analyzing your data, we advise you to compare the current year's
    data against the previous year's data.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们仔细看一下这个图表。从2010年12月到2011年8月，每月订单数量大约在1500左右波动，然后从2011年9月开始显著增加，到2011年11月几乎翻倍。对此的一个解释可能是从2011年9月起，业务实际上在显著增长。另一个解释可能是季节性效应。在电子商务行业，接近年末时销售量激增并不罕见。通常，很多电商企业的销售在10月到1月间会显著上升，如果没有前一年的数据，很难判断这次销售的激增是由于业务增长还是季节性因素。我们建议在分析数据时，将今年的数据与去年进行比较。
- en: 'Let''s take a quick look at the monthly revenue data by looking at the following
    code:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速看一下月度收入数据，通过以下代码：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'As you can see from this code, the first thing we do here is to calculate the
    aggregate sales amount from each order, which is simply the `UnitPrice` multiplied
    by the `Quantity`. Once we have computed and created this `Sales` column, we can
    use the `resample` function with an `''M''` flag to resample and convert our time
    series data into monthly data. Then, using `sum` as the aggregate function, we
    can get the monthly sales revenue data. The resulting data looks like the following:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 从这段代码中可以看到，我们首先要做的是计算每个订单的总销售额，简单来说，就是`UnitPrice`乘以`Quantity`。计算并创建了这个`Sales`列后，我们可以使用带`'M'`标志的`resample`函数对我们的时间序列数据进行重采样，将其转换为按月的数据。然后，使用`sum`作为聚合函数，我们就可以获得每月的销售收入数据。得到的数据如下所示：
- en: '![](img/b829132b-f558-48b6-8f00-3c740fdbf9db.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b829132b-f558-48b6-8f00-3c740fdbf9db.png)'
- en: 'We can visualize this data into a line plot, using the following code:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下代码将这些数据可视化为折线图：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'As previously discussed, we can use the `pandas` `DataFrame` plot function
    to build a line chart and the `xticks` function of the `matplotlib` package to
    rename the labels of the ticks on the *x *axis. The line plot looks like the following:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们可以使用`pandas`的`DataFrame`绘图函数来构建折线图，并使用`matplotlib`包的`xticks`函数来重新命名*X轴*上的刻度标签。该折线图如下所示：
- en: '![](img/37e02fa6-0a42-46e8-8506-1809d6509d55.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/37e02fa6-0a42-46e8-8506-1809d6509d55.png)'
- en: We see a similar pattern to the previous monthly Total Number of Orders Over
    Time chart in this monthly revenue chart. The monthly revenue floats around 700,000
    from December 2010 to August 2011 and then it increases significantly from September
    2011\. As discussed before, to verify whether this significant increase in sales
    and revenue is due to a growth in business or due to seasonal effects, we need
    to look further back in the sales history and compare the current year's sales
    against the previous year's sales.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这个月度收入图表中看到的模式与之前的月度订单总数随时间变化图表类似。从2010年12月到2011年8月，月收入大约在70万左右波动，然后从2011年9月开始显著增加。如前所述，为了验证这次销售和收入的显著增长是由于业务增长还是季节性因素，我们需要进一步回顾销售历史，并将今年的销售与去年的销售进行比较。
- en: These types of general and broad time series analyses can help marketers gain
    a better understanding of the overall performance of the business and identify
    any potential problems that might be occurring within the business. It is generally
    a good idea to start with broader analyses, and then drill down into more granular
    and specific parts of the business for further product analytics.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这种广泛的时间序列分析可以帮助营销人员更好地了解业务的整体表现，并识别可能在业务中发生的潜在问题。一般来说，最好先进行较为广泛的分析，然后再深入到业务的具体和细节部分，进行进一步的产品分析。
- en: Repeat customers
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重复购买客户
- en: Another important factor of a successful business is how well it is retaining
    customers and how many repeat purchases and customers it has. In this section,
    we are going to analyze the number of monthly repeat purchases and how much of
    the monthly revenue is attributable to these repeat purchases and customers. A
    typical strong and stable business has a steady stream of sales from existing
    customers. Let's see how much of the sales are from repeat and existing customers
    of the online retail business that we are currently analyzing in this chapter.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个成功业务的重要因素是它如何保持客户忠诚度以及其重复购买和客户的数量。在本节中，我们将分析每月的重复购买次数，以及每月收入中有多少来自这些重复购买和客户。一个典型的强大而稳定的企业，往往会有源源不断的来自现有客户的销售。让我们看看在本章中我们正在分析的在线零售业务，重复购买和现有客户的销售占比有多少。
- en: 'We are going to look at the number of monthly repeat purchases. This means
    a customer placed more than one order within a given month. Let''s take a quick
    look at the data we have:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将分析每月的重复购买次数。这意味着一个客户在给定的月份内下了多个订单。让我们快速看一下我们拥有的数据：
- en: '![](img/c5276037-522c-44b8-a7ac-1da03529ebb4.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c5276037-522c-44b8-a7ac-1da03529ebb4.png)'
- en: 'As you might have noticed from this snapshot of the data, there are multiple
    records for one purchase order (`InvoiceNo`). However, what we need is the aggregate
    data for each order, so that one record in the `DataFrame` represents one purchase
    order. We can aggregate this raw data for each `InvoiceNo` by using the following
    code:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你从这张数据快照中可能注意到的，针对一个购买订单（`InvoiceNo`）有多个记录。然而，我们需要的是每个订单的汇总数据，以便`DataFrame`中的一条记录代表一个购买订单。我们可以通过以下代码按`InvoiceNo`对这些原始数据进行汇总：
- en: '[PRE9]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'As you can see from this code, we are grouping the `DataFrame`, `df`, by `InvoiceNo`
    and `InvoiceDate` and summing up all the `Sales`. This way, our new `DataFrame`,
    `invoice_customer_df`, has one record for each purchase order. The resulting `DataFrame`
    looks like the following:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，在这段代码中，我们将`DataFrame`（`df`）按`InvoiceNo`和`InvoiceDate`进行分组，并对所有`Sales`进行求和。这样，我们得到的新`DataFrame`（`invoice_customer_df`）中，每个购买订单都有一条记录。结果的`DataFrame`如下所示：
- en: '![](img/d1fa9422-1138-414c-979b-596795fa74d1.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d1fa9422-1138-414c-979b-596795fa74d1.png)'
- en: 'As you can see here, each record in the `DataFrame` now has all the information
    we need for each order. Now, we need to aggregate this data per month and compute
    the number of customers who made more than one purchase in a given month. Take
    a look at the following code:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这里`DataFrame`中的每一条记录现在都包含了我们每个订单所需的所有信息。现在，我们需要按月汇总这些数据，并计算在给定月份内购买超过一次的客户数量。请查看以下代码：
- en: '[PRE10]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Let''s take a closer look at the `groupby` function in this code. Here, we
    group by two conditions—`pd.Grouper(freq=''M'')` and `CustomerID`. The first `groupby`
    condition, `pd.Grouper(freq=''M'')`, groups the data by the index, `InvoiceDate`,
    into each month. Then, we group this data by each `CustomerID`. Using the `filter`
    function, we can subselect the data by a custom rule. Here, the filtering rule, `lambda
    x: len(x) > 1`, means we want to retrieve those with more than one record in the
    group. In other words, we want to retrieve only those customers with more than
    one order in a given month. Lastly, we resample and aggregate by each month and
    count the number of unique customers in each month by using `resample(''M'')`
    and `nunique`.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '让我们仔细看看这段代码中的`groupby`函数。这里，我们按两个条件进行分组——`pd.Grouper(freq=''M'')`和`CustomerID`。第一个`groupby`条件，`pd.Grouper(freq=''M'')`，是按索引`InvoiceDate`将数据分组到每个月。接着，我们按每个`CustomerID`对数据进行分组。通过使用`filter`函数，我们可以按自定义规则筛选数据。这里，筛选规则`lambda
    x: len(x) > 1`表示我们想要检索那些在组内有多条记录的数据。换句话说，我们只想检索那些在某个月内下了多个订单的客户。最后，我们通过`resample(''M'')`和`nunique`按月重新采样并汇总，统计每个月内的独立客户数。'
- en: 'The resulting data looks like the following:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 结果数据如下所示：
- en: '![](img/f6eae90f-fb10-4aab-a8ed-29eec5ede24a.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f6eae90f-fb10-4aab-a8ed-29eec5ede24a.png)'
- en: 'Let''s now compare these numbers against the total number of monthly customers.
    You can use the following code to compute the total number of monthly customers:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们将这些数字与每月顾客的总数进行比较。你可以使用以下代码计算每月顾客的总数：
- en: '[PRE11]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'And the resulting data looks like the following:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 结果数据如下所示：
- en: '![](img/cd010434-9dd1-41b3-8215-0e8369e318c6.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cd010434-9dd1-41b3-8215-0e8369e318c6.png)'
- en: 'If you compare these two sets of numbers, roughly about 20 to 30% of the customers
    are repeat customers. You can use the following code to calculate the percentages
    of repeat customers for each month:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你比较这两组数字，大约有20%到30%的顾客是回头客。你可以使用以下代码计算每个月回头客的百分比：
- en: '[PRE12]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Let''s visualize all of this data in one chart:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将所有这些数据绘制到一个图表中：
- en: '[PRE13]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In this code, you will notice a new flag, `secondary_y=True`, to the `plot`
    function. As the name suggests, if you set this `secondary_y` flag to `True`,
    then it will create a new *y *axis on the right side of the chart. This is especially
    useful when you want to visualize two sets of data with different scales. In our
    case, the scale for one set of our data is the number of users, and the scale
    for another set of our data is the percentage. Using this `secondary_y` flag,
    we can easily visualize data with different scales in one plot.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，你会注意到在`plot`函数中新增了一个标志`secondary_y=True`。顾名思义，如果你将`secondary_y`标志设置为`True`，它将会在图表的右侧创建一个新的*Y轴*。这对于你想要可视化两个不同尺度的数据集非常有用。在我们的案例中，一个数据集的尺度是用户数量，另一个数据集的尺度是百分比。使用这个`secondary_y`标志，我们可以轻松地在一个图表中可视化不同尺度的数据。
- en: 'Once you run this code, you will see the following chart:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你运行这段代码，你会看到以下图表：
- en: '![](img/1daa0094-575f-461e-996d-0e0d3589a170.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1daa0094-575f-461e-996d-0e0d3589a170.png)'
- en: As you can see from this chart, the numbers of both repeat and all customers
    start to rise significantly from September 2011\. The percentage of Repeat Customers
    seems to stay pretty consistent at about 20 to 30%. This online retail business
    will benefit from this steady stream of Repeat Customers, as they will help the
    business to generate a stable stream of sales. Let's now analyze how much of the
    monthly revenue comes from these Repeat Customers.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 从这张图表中可以看到，回头客和所有顾客的数量从2011年9月开始显著上升。回头客的百分比似乎保持在大约20%到30%之间。这家在线零售业务将从这稳定的回头客流中受益，因为它们将帮助企业产生稳定的销售流。现在让我们分析这些回头客贡献的月收入。
- en: 'The following code shows how to compute the monthly revenue from Repeat Customers:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码展示了如何计算回头客的月收入：
- en: '[PRE14]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The only difference between this code and the previous code is the aggregate
    function, `sum`, that follows `resample(''M'')`. In the previous case, when we
    were computing the number of monthly repeat customers, we used the `nunique` function.
    However, this time we are using the `sum` function to add all the sales from repeat
    customers for a given month. For visualization, you can use the following code:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码和之前的代码唯一的不同点是`resample('M')`后面的聚合函数`sum`。在之前的情况中，当我们计算每月回头客数量时，我们使用了`nunique`函数。然而，这次我们使用了`sum`函数来计算每个月回头客的所有销售总和。为了可视化，你可以使用以下代码：
- en: '[PRE15]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'One thing to note in this code is the line, `ax2 = ax.twinx()`. This essentially
    does the same job as the `secondary_y` flag that we discussed previously. The
    `twinx` function simply creates a twin *y *axis that shares the same *x *axis
    and has the same effect as the `secondary_y` flag. The resulting graph looks like
    the following:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，这段代码中的一行：`ax2 = ax.twinx()`。这实际上和我们之前讨论的`secondary_y`标志起到相同的作用。`twinx`函数只是创建了一个共享相同*x轴*的双*Y轴*，效果与`secondary_y`标志相同。生成的图表如下所示：
- en: '![](img/26e29621-d7e2-4383-bb6e-0777fac54591.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/26e29621-d7e2-4383-bb6e-0777fac54591.png)'
- en: We see a similar pattern as before, where there is a significant increase in
    the revenue from September 2011\. One interesting thing to notice here is the
    percentage of the monthly revenue from repeat customers. We have seen that roughly
    20-30% of the customers who made purchases are repeat customers. However, in this
    graph, we can see that roughly 40-50% of the Total Revenue is from repeat customers.
    In other words, roughly half of the revenue was driven by the 20-30% of the customer
    base who are repeat customers. This shows how important it is to retain existing
    customers.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到与之前类似的模式，2011年9月开始收入有了显著增长。这里需要注意的一点是来自重复购买客户的月收入占比。我们看到大约20-30%的购买客户是重复购买客户。然而，在这个图表中，我们可以看到大约40-50%的总收入来自重复购买客户。换句话说，大约一半的收入是由这20-30%的重复购买客户驱动的。这显示了留住现有客户的重要性。
- en: Trending items over time
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 随时间变化的畅销商品
- en: So far, we have analyzed the overall time series patterns and how customers
    engage with the overall business, but not how customers engage with individual
    products. In this section, we are going to explore and analyze how customers interact
    with individual products that are sold. More specifically, we will take a look
    at the trends of the top five best-sellers over time.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们分析了整体的时间序列模式，以及客户如何与整个业务进行互动，但我们还没有分析客户如何与单个产品进行互动。在本节中，我们将探索并分析客户如何与销售的单个产品互动。更具体地，我们将查看前五名畅销产品随时间变化的趋势。
- en: 'For time series trending-item analysis, let''s count the number of items sold
    for each product for each period. Take a look at the following code:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 对于时间序列趋势商品分析，我们来统计每个产品在每个时期销售的商品数量。请查看以下代码：
- en: '[PRE16]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'As you can see from this code snippet, we are grouping the DataFrame, `df`,
    by month with `StockCode`, which is the unique code for each product, and then
    summing up the quantities sold for each month and `StockCode`. The first nine
    records of the result look like the following:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 从这段代码可以看出，我们正在按月对`DataFrame` `df`进行分组，按`StockCode`（每个产品的唯一编码）进行分组，然后对每个月和`StockCode`的销售数量进行求和。结果的前九条记录如下所示：
- en: '![](img/41652208-aee7-4f48-849e-ec662d3c34de.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/41652208-aee7-4f48-849e-ec662d3c34de.png)'
- en: 'With this data in `data_item_df`, let''s see what items were sold the most
    on November 30, 2011\. Take a look at the following code:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 有了`data_item_df`中的这些数据，我们来看看2011年11月30日最畅销的商品。请查看以下代码：
- en: '[PRE17]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'As you can see from this code, we can use the `sort_values` function to sort
    a `pandas` `DataFrame` by any column we want by providing the column name in the
    input argument, `by`. Here, we are sorting the data by the column, `Quantity`,
    in descending order, by setting the `ascending` flag to `False`. The result looks
    like the following:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 从这段代码可以看出，我们可以使用`sort_values`函数通过提供输入参数`by`中的列名来按任何我们想要的列对`pandas` `DataFrame`进行排序。在这里，我们通过将`ascending`标志设置为`False`，按照`Quantity`列对数据进行降序排序。结果如下所示：
- en: '![](img/56cd63bf-2140-4d12-91cd-dca5bb456e73.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/56cd63bf-2140-4d12-91cd-dca5bb456e73.png)'
- en: As you can see from this result, the products with the codes 23084, 84826, 22197,
    22086, and 85099B were the top five best-sellers in the month of November 2011.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个结果可以看出，代码为23084、84826、22197、22086和85099B的产品是2011年11月的前五名畅销产品。
- en: 'Now that we know what the top five best-sellers were in November 2011, let''s
    aggregate the monthly sales data for these five products again. Take a look at
    the following code:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了2011年11月的前五名畅销产品，让我们再次汇总这五个产品的月销售数据。请查看以下代码：
- en: '[PRE18]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'As you can see from this code, we are still grouping the data by each month
    and `StockCode`, and summing up the quantities sold. However, one thing to note
    here is the `isin` operator. The `isin` operator within the `loc` operator checks
    whether each record matches with one of the elements in the array. In our case,
    we are checking if the `StockCode` of each record matches with the top five best-sellers''
    item codes. Using this code, we can aggregate the data by month and product just
    for the top five best-sellers in November 2011\. The first few records of the
    result look like the following:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 从这段代码可以看出，我们仍然是按月和`StockCode`对数据进行分组，并对销售数量进行求和。然而，这里需要注意的一点是`isin`操作符。`isin`操作符在`loc`操作符内检查每条记录是否与数组中的某个元素匹配。在我们的例子中，我们正在检查每条记录的`StockCode`是否与前五名畅销产品的商品代码匹配。使用这段代码，我们可以仅针对2011年11月的前五名畅销产品按月和产品汇总数据。结果的前几条记录如下所示：
- en: '![](img/b714e195-cc81-4279-a650-21e4021dd6ec.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b714e195-cc81-4279-a650-21e4021dd6ec.png)'
- en: 'Now that we have this monthly sales data for the top five products, we need
    to transform this data into a tabular format, where the columns are the individual
    item codes, the row indexes are the invoice dates, and the values are the number
    of items sold, so that we can visualize this data as a time series chart. The
    following code shows you how you can transform this data into a tabular format:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了这五种产品的月度销售数据，我们需要将这些数据转换成表格格式，其中列是各个商品编号，行索引是发票日期，值是销售的商品数量，这样我们才能将数据可视化为时间序列图。以下代码展示了如何将这些数据转换成表格格式：
- en: '[PRE19]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'As you can see in this code, we are using the `pivot` function to `pivot` this
    `DataFrame`, where the index is the `InvoiceDate` and the columns are individual
    codes in the `StockCode` column. The result looks like the following:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在这段代码中看到的，我们正在使用`pivot`函数来对这个`DataFrame`进行`pivot`，其中索引是`InvoiceDate`，而列是`StockCode`列中的各个商品编号。结果如下所示：
- en: '![](img/aad00b6d-60e1-45c8-b128-16da0503822a.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aad00b6d-60e1-45c8-b128-16da0503822a.png)'
- en: 'With this time series data, we can now visualize the trends over time. You
    can use the following code to build a time series plot for trending items:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些时间序列数据，我们现在可以可视化随时间变化的趋势。您可以使用以下代码来构建一个展示趋势商品的时间序列图：
- en: '[PRE20]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'When you run this code, you should see the following chart:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行这段代码时，你应该看到如下图表：
- en: '![](img/844eee16-fbd5-4e66-b64c-a2cc6599bf4b.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/844eee16-fbd5-4e66-b64c-a2cc6599bf4b.png)'
- en: Let's take a closer look at this time series plot. The sales of these five products
    spiked in November 2011, especially, the sales of the product with the stock code,
    85099B, which were close to 0 from February 2011 to October 2011\. Then, it suddenly
    spiked in November 2011\. It might be worth taking a closer look into what might
    have driven this spike. It could be an item that is highly sensitive to seasonality,
    such that this item becomes very popular during November, or it could also be
    due to a genuine change in trends that led this item to become suddenly more popular
    than before.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们仔细看看这个时间序列图。这五种产品的销量在2011年11月激增，尤其是产品编号为85099B的产品，其销量在2011年2月至2011年10月几乎为零。然后，它在2011年11月突然激增。或许值得深入探讨一下是什么原因导致了这次激增。这可能是一个季节性影响很大的产品，因此这个产品在11月变得非常受欢迎，或者也有可能是由于趋势的真实变化，导致该产品突然比以前更受欢迎。
- en: The popularity of the rest of the top five products, 22086, 22197, 23084, and
    84826, seem to have built up in the few months prior to November 2011\. As a marketer,
    it would be worthwhile taking a closer look at the potential drivers behind this
    buildup of rising popularity for these items. You could look at whether these
    items are typically more popular in colder seasons or whether there is a rising
    trend for these specific items in the market.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 其余四种最畅销产品22086、22197、23084和84826的销量似乎是在2011年11月之前的几个月内逐渐积累起来的。作为市场营销人员，值得深入探讨是什么因素导致这些商品的热度不断上升。你可以看看这些商品是否通常在寒冷季节更受欢迎，或者它们是否在市场上出现了逐渐上升的趋势。
- en: Analyzing the trends and changes in the popularity of products not only helps
    you understand what your customers like and purchase the most, but also helps
    you tailor your marketing messages. For example, you can recommend these items
    with rising popularity in your marketing emails, calls, or advertisements to improve
    customer engagement. As it has been shown that your customers are more interested
    and more likely to purchase these items, you might get higher marketing engagement
    from your customers when you market these items more and you might eventually
    get higher conversion rates when you target your customers with these trending
    items. Using these popular and trending items is one way to build a product recommendation
    engine, which we are going to expand on and experiment with thoroughly in the
    next chapter.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 分析产品受欢迎程度的趋势和变化，不仅有助于你了解客户最喜欢和最常购买的商品，还能帮助你调整营销信息。例如，你可以在营销邮件、电话或广告中推荐这些日益受欢迎的商品，从而提高客户的参与度。研究表明，当你的客户对这些商品更加感兴趣，并且更有可能购买时，通过更多地推广这些商品，你可能会获得更高的营销参与度，最终可能会获得更高的转化率。当你针对这些趋势商品进行营销时，使用这些受欢迎和热门商品是一种建立产品推荐引擎的方式，我们将在下一章深入展开并进行实验。
- en: 'The full code for Python exercises in this section can be found at: [https://github.com/yoonhwang/hands-on-data-science-for-marketing/blob/master/ch.5/python/Product%20Analytics.ipynb](https://github.com/yoonhwang/hands-on-data-science-for-marketing/blob/master/ch.5/python/Product%20Analytics.ipynb).'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中 Python 练习的完整代码可以在以下链接找到：[https://github.com/yoonhwang/hands-on-data-science-for-marketing/blob/master/ch.5/python/Product%20Analytics.ipynb](https://github.com/yoonhwang/hands-on-data-science-for-marketing/blob/master/ch.5/python/Product%20Analytics.ipynb)。
- en: Product analytics using R
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 R 进行产品分析
- en: In this section, we are going to discuss how to conduct product analytics using
    the `dplyr` and `ggplot2` libraries in R. For those readers who would like to
    use Python, instead of R, you can ignore this section and move to the following
    section. We will start this section by analyzing the overall time series trends
    in the revenue, numbers of purchases, and purchasing patterns of repeat purchase
    customers, and then we will move on to analyzing the trends in products being
    sold.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论如何使用 R 中的`dplyr`和`ggplot2`库进行产品分析。对于那些想使用 Python 而非 R 的读者，可以跳过本节并进入下一节。我们将从分析收入、购买数量以及重复购买客户的购买模式的总体时间序列趋势开始，然后再分析销售产品的趋势。
- en: 'For this exercise, we will be using one of the publicly available datasets
    from the UCI Machine Learning Repository, which can be found at: [http://archive.ics.uci.edu/ml/datasets/online+retail#](http://archive.ics.uci.edu/ml/datasets/online+retail#).
    You can follow this link and download the data in Microsoft Excel format, named `Online
    Retail.xlsx`. Once you have downloaded this data, you can load it by running the
    following code:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个练习，我们将使用 UCI 机器学习库中公开提供的一个数据集，数据集可以在以下链接找到：[http://archive.ics.uci.edu/ml/datasets/online+retail#](http://archive.ics.uci.edu/ml/datasets/online+retail#)。你可以点击这个链接并下载名为`Online
    Retail.xlsx`的 Microsoft Excel 格式数据。一旦你下载了这些数据，可以通过运行以下代码加载它：
- en: '[PRE21]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: As you may notice from this code, one thing we are doing differently here from
    previous chapters is using the `readxl` library and the `read_excel` function.
    Since our data is in Excel format, we cannot use the `read.csv` function that
    we have been using so far. In order to load a dataset in Excel format, we need
    to use the `readxl` library that you can install using the `install.packages("readxl")`
    command in your RStudio. In the `readxl` library, there is a function named `read_excel`,
    which helps you load an Excel file easily.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如你从这段代码中可能注意到的，与前几章不同的地方是我们在使用`readxl`库和`read_excel`函数。由于我们的数据是 Excel 格式的，因此不能使用我们之前使用的`read.csv`函数。为了加载
    Excel 格式的数据集，我们需要使用`readxl`库，可以通过在 RStudio 中运行`install.packages("readxl")`命令进行安装。在`readxl`库中，有一个名为`read_excel`的函数，帮助你轻松加载
    Excel 文件。
- en: 'Once you have loaded this data into a `DataFrame`, it should look like the
    following:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 当你将这些数据加载到`DataFrame`中后，它应该如下所示：
- en: '![](img/759e7e8c-3724-4802-92e6-3c2abf2cafbb.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](img/759e7e8c-3724-4802-92e6-3c2abf2cafbb.png)'
- en: 'Before we move on to the next step, there is one data-cleaning step we need
    to take. Let''s look quickly at the distribution of the `Quantity` column. We
    will visualize the distributions of `Quantity` by using the following code:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在进入下一步之前，我们需要进行一个数据清理步骤。让我们快速查看`Quantity`列的分布情况。我们将使用以下代码可视化`Quantity`的分布：
- en: '[PRE22]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: As you can see from this code, we are visualizing the distribution of the `Quantity` column,
    in a box plot, using `geom_boxplot`.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们正在使用`geom_boxplot`可视化`Quantity`列的分布情况，呈现为箱型图。
- en: 'The resulting box plot looks like the following screenshot:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的箱型图如下所示：
- en: '![](img/6fcd6fd9-4bd1-4cf8-a8d8-d243b895a16b.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6fcd6fd9-4bd1-4cf8-a8d8-d243b895a16b.png)'
- en: 'As you can see from this plot, some orders have negative quantities. This is
    because the cancelled or refunded orders are recorded with negative values in
    the `Quantity` column of our dataset. For illustration purposes in this exercise,
    we are going to disregard the cancelled orders. We can filter out all the cancelled
    orders in our `DataFrame` by using the following code:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如你从该图中看到的那样，部分订单的数量为负。这是因为取消或退款的订单在数据集中的`Quantity`列里会以负值记录。为了本次练习的说明，我们将忽略这些取消的订单。我们可以通过以下代码过滤掉所有取消的订单：
- en: '[PRE23]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Now, we are ready to conduct further analyses and dive into our data.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以进行进一步的分析，深入探索数据。
- en: Time series trends
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 时间序列趋势
- en: Before we look at product-level data, as a marketer for an e-commerce business,
    it will be beneficial to have a better understanding of the overall time series
    trends in the revenue and the numbers of orders or purchases. This will help us
    understand whether the business is growing or shrinking in terms of both its overall
    revenue and the numbers of orders it receives over time.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们查看产品层级数据之前，作为一名电子商务企业的营销人员，了解整体收入和订单或购买数量的时间序列趋势会非常有帮助。这有助于我们了解企业在整体收入和订单数量方面是否在增长或缩小。
- en: 'First, we are going to look into the number of orders over time. Take a look
    at the following code:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将研究一段时间内的订单数量。请看以下代码：
- en: '[PRE24]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'In this code, we are using the `group_by` function first to group the data
    by each month. In order to group by each month, we are using the `floor_date`
    function in the `lubridate` library. If you do not have this library installed
    already, you can install it using the `install.packages("lubridate")` command.
    The `floor_date` function simply takes the date and rounds it down by the provided
    unit. In our case, we are rounding down the `InvoiceDate` column to the first
    day of the month. Then, for each month, we are counting the number of unique purchase
    orders by using the `n_distinct` function on the `InvoiceNo` column. The resulting `DataFrame` looks
    like the following:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，我们首先使用`group_by`函数按月对数据进行分组。为了按月分组，我们使用了`lubridate`库中的`floor_date`函数。如果你还没有安装这个库，可以使用`install.packages("lubridate")`命令进行安装。`floor_date`函数会将日期向下舍入到指定的单位。在我们的案例中，我们将`InvoiceDate`列的日期向下舍入到每个月的第一天。然后，对于每个月，我们通过对`InvoiceNo`列使用`n_distinct`函数来计算唯一购买订单的数量。最终得到的`DataFrame`如下所示：
- en: '![](img/466de2a6-6a41-4d1f-8e65-953dd19b0a2e.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](img/466de2a6-6a41-4d1f-8e65-953dd19b0a2e.png)'
- en: 'Often, time series data is better visualized using line charts. Let''s take
    a look at the following code to see how we can visualize this monthly data as
    a line chart:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，时间序列数据使用折线图来展示效果更好。让我们看一下下面的代码，看看如何将这些按月的数据可视化为折线图：
- en: '[PRE25]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'As you can see from this code, we are using the `ggplot` function in the `ggplot2`
    library with the `geom_line` function to display the data using a line plot. Let''s
    take a look at the following plot first:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你从这段代码中看到的，我们使用了`ggplot`函数，它来自`ggplot2`库，并结合`geom_line`函数，通过折线图展示数据。首先让我们来看一下下面的图表：
- en: '![](img/3f00ecf3-7fdf-4548-95d6-d32d0e75e68e.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3f00ecf3-7fdf-4548-95d6-d32d0e75e68e.png)'
- en: 'One thing that is noticeable from this chart is that there is a sudden, radical
    drop in the number of orders in December 2011\. If you look closely at the data,
    this is simply because we do not have the data for the full month of December
    2011\. We can verify this by using the following code:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 从这张图表中可以看出，有一个显著的、突然而剧烈的订单数量下降发生在2011年12月。如果仔细查看数据，实际上是因为我们没有2011年12月完整的数据。我们可以通过使用以下代码来验证这一点：
- en: '[PRE26]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'In this code, we get a summary of all invoice dates from December 1, 2011 that
    looks like the following:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，我们获得了从2011年12月1日开始的所有发票日期的摘要，结果如下所示：
- en: '![](img/445b9553-e46b-4fdf-b0dc-3178b24e0695.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](img/445b9553-e46b-4fdf-b0dc-3178b24e0695.png)'
- en: 'As you can see from this output, we only have the data from December 1, to December
    9, 2011\. It would be a misrepresentation if we used this data for analyzing December
    sales and revenue, as we cannot get the full picture of this month from the dataset
    we have. For further analyses, we will disregard any data from December 1, 2011\.
    You can use the following code to remove those data points:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你从输出中看到的，我们只拥有2011年12月1日至12月9日的数据。如果我们用这些数据来分析12月的销售和收入，会导致误导，因为我们无法从现有数据集中获得完整的12月情况。为了进一步分析，我们将忽略2011年12月1日的数据。你可以使用以下代码来去除这些数据点：
- en: '[PRE27]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now that we have filtered out incomplete data for December 2011, we can redraw
    the line chart using the previous codes. After removing those data points in December
    2011, the line chart looks like the following:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经筛选出了2011年12月的不完整数据，可以使用之前的代码重新绘制折线图。去掉2011年12月的数据点后，折线图看起来如下所示：
- en: '![](img/f2deaff8-b0ae-4547-be91-bd45f2a96dd3.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f2deaff8-b0ae-4547-be91-bd45f2a96dd3.png)'
- en: Let's take a closer look at this chart. The monthly number of orders seems to
    float around 1,500 from December 2010 to August 2011, then increases significantly
    from September 2011, and almost doubles by November 2011\. One explanation for
    this could be that the business is actually growing significantly from September
    2011\. Another explanation could be seasonal effects. In e-commerce businesses,
    it is not rare to see spikes in sales as it approaches the end of the year. Typically,
    sales rise significantly from October to January for many e-commerce businesses
    and, without the data from the previous year, it is difficult to conclude whether
    this spike in sales is due to a growth in business or due to seasonal effects.
    When you are analyzing your data, we advise you to compare the current year's
    data against the previous year's data.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更仔细地看看这个图表。每月订单数量似乎在2010年12月到2011年8月之间大约保持在1,500左右，然后从2011年9月开始显著增加，到2011年11月几乎翻倍。对此的一个解释可能是，业务自2011年9月开始确实显著增长。另一个解释可能是季节性因素。在电子商务业务中，接近年末时销售出现激增并不罕见。通常，很多电子商务企业的销售额在10月到1月之间会大幅上升，而没有前一年的数据，很难判断这次销售激增是由于业务增长还是季节性因素。当你分析数据时，我们建议将今年的数据与去年的数据进行对比。
- en: 'Similar to the monthly number of orders, let''s take a quick look at the monthly
    revenue data. Take a look at the following code:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于每月订单数量，我们快速看一下每月收入数据。请看下面的代码：
- en: '[PRE28]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'As you can see from this code, the first thing we do here is calculate the
    aggregate sales amount from each order, which is simply the `UnitPrice` multiplied
    by the `Quantity`. Once we have computed and created this `Sales` column, we can
    use the `group_by` function with the `floor_date` function to group our data into
    monthly sales data. Using `sum` as the aggregate function in the `summarise` function,
    we can get the monthly sales revenue data. The resulting data looks like the following:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 从这段代码中可以看出，我们首先要做的是计算每个订单的总销售额，计算方法是将`UnitPrice`与`Quantity`相乘。一旦我们计算并创建了这个`Sales`列，就可以使用`group_by`函数配合`floor_date`函数将数据按月进行分组。通过在`summarise`函数中使用`sum`作为聚合函数，我们可以得到每月的销售收入数据。最终得到的数据如下：
- en: '![](img/d788593f-0669-48c2-9956-1b99694f979b.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d788593f-0669-48c2-9956-1b99694f979b.png)'
- en: 'We can visualize this data as a line plot, using the following code:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下代码将这些数据可视化为折线图：
- en: '[PRE29]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'As we have seen in previous chapters, we can use the `geom_line` function to
    build a line chart. The line plot for the monthly revenue data looks like the
    following:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面章节中看到的，我们可以使用`geom_line`函数来绘制折线图。每月收入数据的折线图如下所示：
- en: '![](img/cbc487fe-11c3-4f57-8724-57ce72ef34fe.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc487fe-11c3-4f57-8724-57ce72ef34fe.png)'
- en: We see a similar pattern to the previous monthly Number of Orders over Time
    chart in this monthly Revenue over Time chart. The monthly revenue floats around
    700,000 from December 2010 to August 2011 and then it increases significantly
    from September 2011\. As discussed before, to verify whether this significant
    increase in sales and revenue is due to a growth in business or due to seasonal
    effects, we need to look further back in the sales history and compare the current
    year's sales against the previous year's sales.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在这个每月收入随时间变化的图表中看到与之前的每月订单数量随时间变化图表相似的模式。从2010年12月到2011年8月，每月收入大约保持在700,000左右，之后从2011年9月开始显著增加。如前所述，为了验证这种销售和收入的显著增长是由于业务增长还是季节性因素，我们需要回顾销售历史，并将今年的销售与去年做对比。
- en: These types of general and broad time series analyses can help marketers have
    a better understanding of the overall performance of the business and identify
    any potential problems that might be occurring within the business. It is generally
    a good idea to start with broader analyses and then drill down into more granular
    and specific parts of the business for further product analytics.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 这类一般性和广泛的时间序列分析可以帮助营销人员更好地了解业务的整体表现，并识别出可能存在的潜在问题。通常，先进行广泛的分析再深入挖掘业务中的具体部分进行进一步的产品分析是一个不错的做法。
- en: Repeat customers
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回头客
- en: Another important factor of a successful business is how well it is retaining
    customers and how many repeat purchases and customers it has. In this section,
    we are going to analyze the number of monthly repeat purchases and how much of
    the monthly revenue is attributable to these repeat purchases and customers. A
    typical strong and stable business has a steady stream of sales from existing
    customers. Let's see how many of the sales are from repeat and existing customers
    for the online retail business that we are currently analyzing in this chapter.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 成功企业的另一个重要因素是它如何留住客户，以及有多少重复购买和客户。在本节中，我们将分析每月的重复购买数量，以及这些重复购买和客户对每月收入的贡献。一个典型的强大且稳定的企业，来自现有客户的销售额会保持稳定。让我们看看我们目前在本章中分析的在线零售业务中，来自重复和现有客户的销售额有多少。
- en: 'We are going to look at the number of monthly repeat purchases. This means
    a customer has placed more than one order within a given month. Let''s take a
    quick look at the data we have:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将查看每月的重复购买数量。这意味着客户在一个月内下了超过一个订单。让我们快速查看一下我们拥有的数据：
- en: '![](img/e40dda22-7885-4f36-be9f-2a2d26ce3030.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e40dda22-7885-4f36-be9f-2a2d26ce3030.png)'
- en: 'As is noticeable from this snapshot of the data, there are multiple records
    for one purchase order (`InvoiceNo`). However, what we need is the aggregate data
    for each order, so that one record in the `DataFrame` represents one purchase
    order. We can aggregate this raw data for each `InvoiceNo` by using the following
    code:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 从这段数据快照中可以看出，一个购买订单（`InvoiceNo`）可能会有多条记录。然而，我们需要的是每个订单的汇总数据，以便每条`DataFrame`记录代表一个购买订单。我们可以通过以下代码对每个`InvoiceNo`的原始数据进行汇总：
- en: '[PRE30]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'As you can see from this code, we are grouping the `DataFrame`, `df`, by `InvoiceNo` and `InvoiceDate` and
    summing up all the `Sales`, while taking one value for `CustomerID`. This way,
    the new `DataFrame`, `invoiceCustomerDf`, has one record for each purchase order.
    The resulting `DataFrame` looks like the following:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 从这段代码可以看出，我们按`InvoiceNo`和`InvoiceDate`对`DataFrame`，`df`进行分组，并对所有`Sales`求和，同时取`CustomerID`的一个值。这样，新的`DataFrame`，`invoiceCustomerDf`，就有了每个购买订单的记录。结果`DataFrame`如下所示：
- en: '![](img/a7d7cdf1-4af7-45c3-bf69-835ba2d1596b.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a7d7cdf1-4af7-45c3-bf69-835ba2d1596b.png)'
- en: 'As you can see here, each record in the `DataFrame` represents all the information
    we need for each order. Now, we need to aggregate this data for each month and
    compute the number of customers who made more than one purchase in a given month.
    Take a look at the following code:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，`DataFrame`中的每条记录代表了我们所需的每个订单的所有信息。现在，我们需要将这些数据按月汇总，并计算每个月有多少客户进行了超过一次的购买。请查看以下代码：
- en: '[PRE31]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Similarly to the previous section, we are using the `group_by` and `floor_date`
    functions to aggregate the data into each month. We are also grouping by `CustomerID`,
    so that we can count how many orders and how many sales each customer has brought
    in for each month. This data now looks like the following:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 与前一部分类似，我们使用`group_by`和`floor_date`函数将数据汇总到每个月。我们还按`CustomerID`进行分组，这样我们就可以计算每个客户在每个月下了多少订单，产生了多少销售额。现在的数据如下所示：
- en: '![](img/9c3b3484-606e-4214-98f8-e722a9ca9d86.png)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9c3b3484-606e-4214-98f8-e722a9ca9d86.png)'
- en: 'Now, in order to get the number of repeat customers, all we need to do is filter
    out customers who only have 1 in the Count column in this data. The code to perform
    this operation looks like the following:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了得到重复客户的数量，我们需要做的就是筛选出在`Count`列中只有1的客户。执行此操作的代码如下所示：
- en: '[PRE32]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The newly created `DataFrame`, `reapeatCustomers`, now contains all the customers
    who have made more than one purchase in each month. In order to get the aggregate
    monthly repeat customer counts, we are going to run the following code:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 新创建的`DataFrame`，`reapeatCustomers`，现在包含了每个月内有超过一次购买的所有客户。为了得到每月的重复客户总数，我们将运行以下代码：
- en: '[PRE33]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'As you can see from this code, we are simply grouping by `InvoiceDate`, which
    is a date that is rounded down to the first day of each month, and then we are
    counting the number of unique or distinct customers and summing up the total sales.
    The result looks like the following:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 从这段代码中可以看到，我们仅仅是按`InvoiceDate`进行分组，`InvoiceDate`是被舍入到每个月的第一天的日期，然后我们计算每个月内唯一或不同的客户数量，并求和总销售额。结果如下所示：
- en: '![](img/70e4dda2-93ee-41fb-8765-d0782633bb98.png)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![](img/70e4dda2-93ee-41fb-8765-d0782633bb98.png)'
- en: 'Let''s now compare these repeat customer numbers against the total number of
    monthly customers. You can use the following code to compute the total number
    of monthly customers:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将这些重复客户的数量与每月总客户数进行比较。你可以使用以下代码来计算每月总客户数：
- en: '[PRE34]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The result looks like the following:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下所示：
- en: '![](img/5f505e4a-9681-4d6f-9b79-ed91705df7dc.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5f505e4a-9681-4d6f-9b79-ed91705df7dc.png)'
- en: 'Lastly, we are going to analyze the percentage of monthly revenue that can
    be attributed to the repeat customers. Take a look at the following code:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将分析每月收入中可以归因于重复客户的百分比。请看以下代码：
- en: '[PRE35]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: As you can see from this code, we are simply dividing the `Sales` column in
    the `timeSeriesRepeatCustomers` `DataFrame` by the `Sales` column in the `timeSeriesRevenue`
    `DataFrame` that we created in the previous section. Then, we are appending the
    number of monthly unique customers to the new column, `Total`, of the `timeSeriesRepeatCustomers`
    `DataFrame`.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 如代码所示，我们只是将`timeSeriesRepeatCustomers` `DataFrame`中的`Sales`列除以我们在前一节中创建的`timeSeriesRevenue`
    `DataFrame`中的`Sales`列。然后，我们将每月独立客户的数量附加到`timeSeriesRepeatCustomers` `DataFrame`中的新列`Total`。
- en: 'Let''s visualize all of this data in one chart, using the following code:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用以下代码将所有这些数据可视化为一张图表：
- en: '[PRE36]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'As you can see from this code, we are creating two line plots and one bar plot
    by using the `geom_line` and `geom_bar` functions in the `ggplot2` library. The
    first line plot represents the total number of monthly customers, `Total`, and
    will be drawn with a `navy` color. The second line plot is the number of monthly
    repeat customers, `Count`, which will be drawn with an `orange` color. Lastly,
    we are drawing a bar plot with a `gray` color for the percentage of revenue from
    repeat customers, `Perc`. One thing to note here is the scaling factor, `20`,
    for the secondary *y *axis. The `sec_axis` function defines the formula for the
    scale of the secondary *y *axis. Here, we are using `~./20`, which means the secondary
    *y *axis ranges from 0 to 1/20th of the maximum value of the first axis. Since
    we are scaling down the secondary *y *axis by a factor of `20`, we are multiplying
    this number to `Perc` in the `geom_bar` function to match the scale of our data
    to the range of the secondary *y *axis. The result looks like the following:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 如代码所示，我们通过使用`ggplot2`库中的`geom_line`和`geom_bar`函数来绘制两条折线图和一条柱状图。第一条折线图表示每月总客户数`Total`，并将使用`navy`颜色绘制。第二条折线图表示每月重复客户数`Count`，将使用`orange`颜色绘制。最后，我们绘制了一条柱状图，表示来自重复客户的收入百分比`Perc`，并使用`gray`颜色绘制。这里需要注意的是，次要*y轴*的缩放因子`20`。`sec_axis`函数定义了次要*y轴*的缩放公式。这里我们使用的是`~./20`，意味着次要*y轴*的范围从0到主轴最大值的1/20。由于我们将次要*y轴*按`20`缩放，因此我们将这个数字乘以`Perc`，并在`geom_bar`函数中进行计算，以便将数据的尺度与次要*y轴*的范围匹配。结果如下所示：
- en: '![](img/59b61f5e-851b-4449-8427-9e81ff8c9cda.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![](img/59b61f5e-851b-4449-8427-9e81ff8c9cda.png)'
- en: 'As discussed from the code, we see three plots in this chart: a line of a navy
    color that represents the total number of monthly customers, a line of an orange
    color that represents the number of monthly repeat customers, and bars of a gray
    color that represent the percentage of revenue from the repeat customers. As you
    can see from this chart, the secondary *y *axis, labeled as Percentage (%), ranges
    from 0 to 1/20th of the maximum of the primary *y *axis, labeled as Total, which
    matches with our scaling factor of `20`.'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 如代码所示，我们在这张图中看到三个图表：一条表示每月总客户数的海军蓝折线图、一条表示每月重复客户数的橙色折线图，以及表示重复客户收入百分比的灰色柱状图。从这张图可以看到，次要*y轴*（标记为百分比（%））的范围从0到主*y轴*最大值的1/20，符合我们设置的缩放因子`20`。
- en: Let's now take a closer look at the chart. There seems to be an upward trend
    in both the number of monthly customers and the number of repeat customers from
    September 2011, and repeat customers are roughly 20-30% of the total monthly customers.
    However, if you look at the percentage of revenue from these repeat customers,
    you can see that roughly 40-50% of the total revenue comes from repeat customers.
    In other words, roughly half of the revenue is driven by the 20-30% of the customer
    base who are repeat customers. As this online retail business has a large portion
    of revenue from repeat customers, this business will benefit from this steady
    stream of revenue from repeat customers. This shows how important it is to retain
    existing customers. As a marketer, it will be important to keep in mind how to
    retain existing customers and build up your repeat customer base.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们仔细看看图表。从2011年9月开始，月度客户数量和重复客户数量似乎都有上升趋势，且重复客户大约占月度客户总数的20-30%。然而，如果你查看来自这些重复客户的收入百分比，你会发现大约40-50%的总收入来自重复客户。换句话说，约一半的收入来自20-30%的重复客户群体。由于该在线零售业务有着大量来自重复客户的收入，这意味着它将从这些稳定的重复客户收入中获益。这也表明了留住现有客户的重要性。作为一名营销人员，关键在于如何留住现有客户，并建立起稳定的重复客户群体。
- en: Trending items over time
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 随着时间变化的畅销产品
- en: So far, we have analyzed the overall time series patterns and how customers
    engage with the overall business, but not how customers engage with individual
    products. In this section, we are going to explore and analyze how customers interact
    with individual products that are sold. More specifically, we will take a look
    at the trends of the top five best-sellers over time.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经分析了整体的时间序列模式以及客户如何与整体业务互动，但还没有分析客户如何与单个产品互动。在本节中，我们将探讨并分析客户如何与单个销售的产品互动。更具体地说，我们将查看这些产品的前五大畅销品随时间变化的趋势。
- en: 'The first task for analyzing the time series trending items is to count the
    number of items sold for each product for each period. Take a look at the following
    code:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 分析时间序列趋势项的第一个任务是统计每个产品在每个周期内的销售数量。请看以下代码：
- en: '[PRE37]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: As you can notice from this code, we are grouping the data by the month and
    the `StockCode`, which is the unique code for each product. Then, we are adding
    up all the quantities, `Quantity`, sold for the given month and product, by using
    the `sum` function in the `summarise` function.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 从这段代码中可以看出，我们按照月份和每个产品的唯一代码`StockCode`对数据进行了分组。然后，我们通过在`summarise`函数中使用`sum`函数，将给定月份和产品的所有销售数量`Quantity`加总起来。
- en: 'Since we are only interested in the top five best-sellers, we will need to
    subselect those top five products from this `DataFrame`, `popularItems`. Take
    a look at the following code:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们只关注前五大畅销品，我们需要从`DataFrame` `popularItems`中选择这五个产品。请看以下代码：
- en: '[PRE38]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Here, we first sort the items in descending order by the number of items sold,
    `Quantity`, in November 2011\. Using the `which` function, we can subselect the
    data from `popularItems` for November 2011 and then with the `arrange` function,
    we can sort the data by the column we want, `Quantity`. By having `desc` in the
    `arrange` function, we can sort the data in descending order. Lastly, we are taking
    the top five items by using the `head` function. The newly created variable, `top5Items`,
    now has the top five best-sellers in November 2011\. The last thing we need to
    do is retrieve the time series data for these five items. By using the `which`
    function and the `%in%` operator, we can subselect the data for those items with
    `StockCode` in `top5Items`.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们首先按2011年11月销售的商品数量`Quantity`对商品进行降序排序。使用`which`函数，我们可以从`popularItems`中选择2011年11月的数据，然后使用`arrange`函数按我们想要的列`Quantity`对数据进行排序。通过在`arrange`函数中使用`desc`，我们可以按降序排列数据。最后，我们使用`head`函数选取前五名商品。新创建的变量`top5Items`现在包含了2011年11月的前五大畅销品。最后一步是提取这五个商品的时间序列数据。通过使用`which`函数和`%in%`操作符，我们可以从`top5Items`中选择那些`StockCode`在其中的商品数据。
- en: 'To visualize the time series trends of these five products, we can use the
    following code:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 为了可视化这五个产品的时间序列趋势，我们可以使用以下代码：
- en: '[PRE39]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The chart looks like the following:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 图表如下所示：
- en: '![](img/a6bbc0a6-89c8-411d-a4e4-3ec349679e21.png)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a6bbc0a6-89c8-411d-a4e4-3ec349679e21.png)'
- en: Let's take a closer look at this time series plot. The sales of these five products
    spiked in November 2011, especially the sales of the product with stock code, 85099B,
    which were close to 0 from February 2011 to October 2011\. Then, it suddenly spiked
    in November 2011\. It might be worth taking a closer look into what might have
    driven this spike. It could be an item that is highly sensitive to seasonality,
    becoming very popular during November, or it could also be that there was a genuine
    change in trends, which led to this item becoming more popular than before.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们仔细看看这个时间序列图。这五个产品的销售在2011年11月出现了激增，特别是股票代码为85099B的产品，其销售额从2011年2月到2011年10月几乎为零，直到2011年11月突然激增。值得深入探讨一下是什么原因导致了这个激增。这可能是一个对季节性变化高度敏感的商品，在11月变得非常流行，或者也可能是趋势发生了真正的变化，导致这个商品比之前更受欢迎。
- en: The popularity of the other top five products, 22086, 22197, 23084, and 84826,
    seems to have built up in the few months prior to November 2011\. As a marketer,
    it would also be worthwhile taking a closer look at the potential drivers behind
    this buildup and the rising popularity of these items. You could look at whether
    these items are typically more popular in colder seasons, or whether there is
    a growing trend for these specific items in the market.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 其他五个热销产品22086、22197、23084和84826的流行度似乎在2011年11月之前的几个月里逐渐积累。作为营销人员，也值得仔细分析一下这种积累和这些商品流行度上升背后的潜在因素。你可以研究这些商品是否通常在寒冷季节更受欢迎，或者市场中这些特定商品的趋势是否正在增长。
- en: Analyzing the trends and changes in the popularity of products not only helps
    you understand what your customers like and purchase the most, but it also helps
    you tailor your marketing messages. For example, you can recommend these items
    with rising popularity in your marketing emails, calls, or advertisements to improve
    customer engagement. As your customers are more interested and more likely to
    purchase these items, you might get higher marketing engagement from your customers
    when you market these items more, and you might eventually get higher conversion
    rates when you target your customers with these trending items. Using these popular
    and trending items is one way to build a product recommendation engine, which
    we are going to expand on and experiment with thoroughly in the next chapter.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 分析产品的流行趋势和变化不仅帮助你了解客户最喜欢和最常购买的产品，还能帮助你定制营销信息。例如，你可以在营销邮件、电话或广告中推荐这些人气上升的商品，以提高客户的参与度。由于客户对这些商品更感兴趣，也更可能购买它们，因此在你增加这些商品的营销时，可能会获得更高的营销参与度，最终通过这些趋势商品吸引目标客户时，可能会得到更高的转化率。利用这些流行和趋势商品是一种构建产品推荐引擎的方式，我们将在下一章中进一步扩展并深入实验。
- en: The full code for the R exercise in this section can be found at: [https://github.com/yoonhwang/hands-on-data-science-for-marketing/blob/master/ch.5/R/ProductAnalytics.R](https://github.com/yoonhwang/hands-on-data-science-for-marketing/blob/master/ch.5/R/ProductAnalytics.R).
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中R练习的完整代码可以在以下链接找到：[https://github.com/yoonhwang/hands-on-data-science-for-marketing/blob/master/ch.5/R/ProductAnalytics.R](https://github.com/yoonhwang/hands-on-data-science-for-marketing/blob/master/ch.5/R/ProductAnalytics.R)。
- en: Summary
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we discussed the concepts and importance of product analytics.
    We briefly discussed how product analytics starts from tracking events and customer
    actions, such as website or app visits, page views, and purchases. Then, we discussed
    some of the common goals of product analytics and how it should be used to generate
    actionable insights and reports. With these discussions on product analytics,
    we explored how we can utilize product analytics for customer and product retention
    in our programming exercises, using e-commerce business data. First, we analyzed
    the time series trends in the revenue and the numbers of purchase orders. Then,
    we drilled down to identify the patterns of monthly repeat customers. We have
    seen from the data that even though monthly repeat customers represent a relatively
    small portion of the overall customer base, they drive roughly half of the total
    monthly revenue. This shows the importance of retaining customers and how developing
    a retention strategy should be taken seriously. Lastly, we discussed how to analyze
    popular and trending items over time. In this section, we have discussed the potential
    effects of seasonality and how the analysis of trending items can be used in marketing
    strategies and in product recommendations.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了产品分析的概念和重要性。我们简要讨论了产品分析如何从追踪事件和客户行为开始，例如网站或应用访问、页面浏览和购买。接着，我们讨论了一些常见的产品分析目标，以及如何利用它来生成可操作的洞察和报告。通过这些关于产品分析的讨论，我们探索了如何在编程练习中利用产品分析来实现客户和产品的留存，使用的是电子商务业务数据。首先，我们分析了收入和购买订单数量的时间序列趋势。然后，我们深入分析了月度重复客户的模式。从数据中我们发现，尽管月度重复客户占整体客户群体的比例相对较小，但他们却贡献了大约一半的月度总收入。这表明了客户留存的重要性，以及如何认真制定留存策略。最后，我们讨论了如何分析随着时间推移而流行和趋势化的商品。在这一部分，我们讨论了季节性效应的潜在影响，以及如何通过分析流行商品来制定营销策略和产品推荐。
- en: In the next chapter, we are going to expand and apply our knowledge gained from
    this chapter to build product recommendation engines. We will learn about the
    collaborative filtering algorithm and how it can be used for product recommendations.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将扩展并应用本章所学的知识，构建产品推荐引擎。我们将学习协同过滤算法以及它如何用于产品推荐。
