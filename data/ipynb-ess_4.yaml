- en: Chapter 4. Handling Data with pandas
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章：使用 pandas 处理数据
- en: In this chapter, we will introduce **pandas**, a powerful and versatile Python
    library that provides tools for data handling and analysis. We will consider the
    two main pandas structures for storing data, the `Series` and `DataFrame` objects,
    in detail. You will learn how to create these structures and how to access and
    insert data into them. We also cover the important topic of **slicing**, that
    is, how to access portions of data using the different indexing methods provided
    by pandas. Next, we'll discuss the computational and graphics tools offered by
    pandas, and finish the chapter by demonstrating how to work with a realistic dataset.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍 **pandas**，一个功能强大且多用途的 Python 库，提供了数据处理和分析的工具。我们将详细介绍 pandas 中用于存储数据的两个主要结构：`Series`
    和 `DataFrame` 对象。你将学习如何创建这些结构以及如何访问和插入数据。我们还将介绍一个重要的主题：**切片**，即如何使用 pandas 提供的不同索引方法访问数据的部分内容。接下来，我们将讨论
    pandas 提供的计算和图形工具，并通过展示如何使用实际数据集来结束本章。
- en: '*pandas* is an extensive package for data-oriented manipulation, and it is
    beyond the scope of this book to realistically cover all aspects of the package.
    We will cover only some of the most useful data structures and functionalities.
    In particular, we will not cover the `Panel` data structure and multi-indexes.
    However, we will provide a solid foundation for readers who wish to expand their
    knowledge by consulting the official package documentation. Throughout this chapter,
    we assume the following imports:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*pandas* 是一个广泛的数据处理包，涵盖的内容超出了本书的范围。我们将仅介绍一些最有用的数据结构和功能。特别地，我们不会覆盖 `Panel` 数据结构和多重索引。然而，我们将为希望通过查阅官方文档扩展知识的读者打下坚实的基础。在本章中，我们假设进行了以下导入：'
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The Series class
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Series 类
- en: 'A `Series` object represents a one-dimensional, indexed series of data. It
    can be thought of as a dictionary, with one main difference: the indexes in a
    `Series` class are ordered. The following example constructs a `Series` object
    and displays it:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '`Series` 对象表示一个一维的、带索引的数据系列。它可以看作是一个字典，主要的不同在于：`Series` 类中的索引是有序的。以下示例构造了一个
    `Series` 对象并显示它：'
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This produces the following output:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这会产生以下输出：
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Notice the format of the constructor call:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意构造函数调用的格式：
- en: '[PRE3]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Both `data` and `indexes` are usually lists or `NumPy` arrays, but can be any
    Python iterable. The lists must have the same length. The `name` variable is a
    string that describes the data in the series. The `type` variable is a `NumPy`
    data type. The `indexes` and the `name` variables are optional (if `indexes` are
    omitted, they are set to integers—starting at 0). The data type is also optional,
    in which case it is inferred from the data.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`data` 和 `indexes` 通常是列表或 `NumPy` 数组，但也可以是任何 Python 可迭代对象。列表必须具有相同的长度。`name`
    变量是一个描述序列中数据的字符串。`type` 变量是一个 `NumPy` 数据类型。`indexes` 和 `name` 变量是可选的（如果省略 `indexes`，则默认为从
    0 开始的整数）。数据类型也是可选的，在这种情况下，它将从数据中推断出来。'
- en: 'A `Series` object supports the standard dictionary interface. As an example,
    run the following code in a cell:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`Series` 对象支持标准字典接口。举个例子，在一个单元格中运行以下代码：'
- en: '[PRE4]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The output of the preceding command lines is as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令行的输出如下：
- en: '[PRE5]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here is another interesting example:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一个有趣的示例：
- en: '[PRE6]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The preceding command lines produce the following output:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令行产生以下输出：
- en: '[PRE7]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Note that the order of the output is exactly the same as the order in which
    each of the elements were inserted in the series. Contrary to a standard Python
    dictionary, the `Series` object keeps track of the order of the elements. In fact,
    elements can be accessed through an integer index, as shown in the following example:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，输出的顺序与元素在序列中插入的顺序完全相同。与标准的 Python 字典不同，`Series` 对象会跟踪元素的顺序。事实上，元素可以通过整数索引进行访问，如以下示例所示：
- en: '[PRE8]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The preceding command returns the following output:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令返回以下输出：
- en: '[PRE9]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Actually, all of Python''s list-access interface is supported. For instance,
    we can use slices, which return `Series` objects:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，Python 的所有列表访问接口都被支持。例如，我们可以使用切片，它返回 `Series` 对象：
- en: '[PRE10]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The preceding command gives the following output:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令给出以下输出：
- en: '[PRE11]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The indexing capabilities are even more flexible; this is illustrated in the
    following example:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 索引功能更加灵活；以下示例展示了这一点：
- en: '[PRE12]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The preceding command returns the following output:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令返回以下输出：
- en: '[PRE13]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'It is also possible to append new data to the series, by using the following
    command:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以通过以下命令将新数据附加到序列中：
- en: '[PRE14]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The output of the preceding command is as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 前面命令的输出如下：
- en: '[PRE15]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Note that the series now contains two entries corresponding to the key, `Theo`.
    This makes sense, since in real-life data there could be more than one data value
    associated to the same index. In our example, a student might be able to hand
    in more than one version of the assignment. What happens when we try to access
    this data? pandas conveniently returns a `Series` object so that no data is lost:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，序列现在包含与键`Theo`相关的两个条目。这是有意义的，因为在现实数据中，可能会有多个数据值与相同的索引相关联。在我们的例子中，一个学生可能提交了多版本的作业。当我们尝试访问这些数据时会发生什么呢？pandas方便地返回一个`Series`对象，因此没有丢失任何数据：
- en: '[PRE16]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The output of the preceding command is as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 前面命令的输出如下：
- en: '[PRE17]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Note
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that the `append()` method does not append the values to the existing `Series`
    object. Instead, it creates a new object that consists of the original `Series`
    object with the appended elements. This behavior is not the same as what happens
    when elements are appended to a Python list. Quite a few methods of the `Series`
    class display behavior that is different from their corresponding list counterparts.
    A little experimentation (or reading the documentation) may be required to understand
    the conventions that pandas uses.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`append()`方法并不会将值附加到现有的`Series`对象中。相反，它会创建一个新的对象，该对象由原始`Series`对象和附加的元素组成。这种行为与向Python列表中附加元素的行为不同。`Series`类的许多方法表现出的行为与它们相应的列表方法不同。需要进行一些实验（或阅读文档）才能理解pandas所采用的约定。
- en: 'Let''s define a new series with the following command lines:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们来定义一个新的序列，使用以下命令行：
- en: '[PRE18]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The preceding command lines give the following output:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令行给出以下输出：
- en: '[PRE19]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'If we want to compute each student''s average in the two assignments, we can
    use the following command:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要计算每个学生在两个作业中的平均分，可以使用以下命令：
- en: '[PRE20]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'On running the preceding code, we get the following output:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 运行前面的代码后，我们得到以下输出：
- en: '[PRE21]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The value `NaN` stands for **Not a number**, which is a special floating-point
    value that is used to indicate the result of an invalid operation, such as zero
    divided by zero. In pandas, it is used to represent a missing data value. We can
    locate the missing values in `Series` using the `isnull()` method. For example,
    run the following code in a cell:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 值`NaN`代表**非数值**，它是一个特殊的浮点值，用于表示无效操作的结果，例如零除以零。在pandas中，它用于表示缺失的数据值。我们可以使用`isnull()`方法定位`Series`中的缺失值。例如，在单元格中运行以下代码：
- en: '[PRE22]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Running the preceding command line produces the following output:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 运行前面的命令行会产生以下输出：
- en: '[PRE23]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'If we decide that the missing data can be safely removed from the series, we
    can use the `dropna()` method:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们决定可以安全地从序列中删除缺失数据，可以使用`dropna()`方法：
- en: '[PRE24]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The preceding command line produces the following output:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令行产生以下输出：
- en: '[PRE25]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Notice that this is another case in which the original series is not modified.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这是另一个原始序列未被修改的情况。
- en: 'The `Series` class provides a series of useful methods for its instances. For
    example, we can sort both the values and the indexes. To sort the values in-place,
    we use the `sort()` method:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`Series`类为其实例提供了一系列有用的方法。例如，我们可以对值和索引进行排序。要就地排序值，我们使用`sort()`方法：'
- en: '[PRE26]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'This generates the following output:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这会生成以下输出：
- en: '[PRE27]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'To sort the indexes of a series, use the `sort_index()` method. For example,
    consider the following command:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要排序序列的索引，使用`sort_index()`方法。例如，考虑以下命令：
- en: '[PRE28]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'This produces the following output:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这会产生以下输出：
- en: '[PRE29]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Note
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that the sorting is *not* in-place this time, a new series object is returned.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这次排序*不是*就地进行的，返回了一个新的序列对象。
- en: 'For the next examples, we will use data on maximum daily temperatures for the
    month of June from a weather station nearby the author''s location. The following
    command lines generates the series of temperatures for the days from June 6 to
    June 15:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 对于接下来的示例，我们将使用来自作者所在地附近气象站的6月每日最高气温数据。以下命令行生成了6月6日至6月15日的温度序列：
- en: '[PRE30]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The preceding command produces the following output:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令产生以下输出：
- en: '[PRE31]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Let''s first compute the mean and standard deviation of the temperatures using
    the following command:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先使用以下命令计算温度的均值和标准差：
- en: '[PRE32]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The result of the preceding computation is as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 前面计算的结果如下：
- en: '[PRE33]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'If we want a quick overview of the data in the series, we can use the `describe()`
    method:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想快速了解系列数据的概况，可以使用`describe()`方法：
- en: '[PRE34]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The preceding command produces the following output:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令产生以下输出：
- en: '[PRE35]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Note that the information is returned as a `Series` object, so it can be stored
    in case it is needed in further computations.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，返回的信息是一个`Series`对象，因此可以存储以备后续计算需要。
- en: 'To draw a plot of the series, we use the `plot()` method. If we just need a
    quick graphical overview of the data, we can just run the following command:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 要绘制系列的图表，我们使用`plot()`方法。如果我们只需要快速的图形数据概览，可以运行以下命令：
- en: '[PRE36]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'However, it''s also possible to produce nicely formatted, production-quality
    plots of the data, since all matplotlib features are supported in pandas. The
    following code illustrates how some of the graph formatting options discussed
    in [Chapter 3](ch03.html "Chapter 3. Graphics with matplotlib"), *Graphics with
    matplotlib*,are being used:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，使用`pandas`也可以生成格式化良好的生产级数据图，因为`matplotlib`的所有功能都被`pandas`所支持。以下代码展示了如何使用在[第3章](ch03.html
    "第3章. 使用matplotlib绘图")，*使用matplotlib绘图*中讨论的某些图形格式化选项：
- en: '[PRE37]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The preceding command lines produce the following plot:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令行生成如下图表：
- en: '![The Series class](img/8341OS_04_01.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![Series类](img/8341OS_04_01.jpg)'
- en: 'Suppose we want to find the days in which the maximum temperature was above
    75 degrees. This can be achieved with the following expression:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们要找出温度超过75度的日期。可以通过以下表达式实现：
- en: '[PRE38]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The preceding command returns the following series:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令返回以下系列：
- en: '[PRE39]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: There are many more useful methods provided by the `Series` class. Remember
    that in order to see all the available methods, we can use the code completion
    feature of IPython. Start typing `temps.` and you will get the available methods.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`Series`类提供了许多有用的方法。记住，为了查看所有可用的方法，我们可以使用IPython的代码补全功能。开始输入`temps.`，你将看到可用的方法列表。'
- en: Then press the *Tab* key. A window with a list of all available methods will
    pop up. You can then explore what is available.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 然后按下*Tab*键，一个列出所有可用方法的窗口将弹出。你可以探索其中的可用项。
- en: The DataFrame class
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DataFrame类
- en: 'The `DataFrame` class is used to represent two-dimensional data. To illustrate
    its use, let''s create a `DataFrame` class containing student data as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`DataFrame`类用于表示二维数据。为了说明它的使用，下面我们创建一个包含学生数据的`DataFrame`类：'
- en: '[PRE40]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: This code demonstrates one of the most straightforward ways to construct a `DataFrame`
    class. In the preceding case, the data can be specified as any two-dimensional
    Python data structure, such as a list of lists (as shown in the example) or a
    `NumPy` array. The `index` option sets the row names, which are integers representing
    student IDs here. Likewise, the `columns` option sets the column names. Both the
    `index` and `column` arguments can be given as any one-dimensional Python structure,
    such as lists, `NumPy` arrays, or a `Series` object.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码展示了构建`DataFrame`类的最直接方式之一。在前面的例子中，数据可以指定为任何二维的Python数据结构，比如列表的列表（如示例所示）或`NumPy`数组。`index`选项设置行名，这里是表示学生ID的整数。同样，`columns`选项设置列名。`index`和`column`参数都可以作为任何一维的Python结构给出，例如列表、`NumPy`数组或`Series`对象。
- en: 'To display the output of the `DataFrame` class, run the following statement
    in a cell:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示`DataFrame`类的输出，在单元格中运行以下语句：
- en: '[PRE41]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The preceding command displays a nicely formatted table as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令显示一个格式化良好的表格，如下所示：
- en: '![The DataFrame class](img/8341OS_04_02.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![DataFrame类](img/8341OS_04_02.jpg)'
- en: 'The `DataFrame` class features an extremely flexible interface for initialization.
    We suggest that the reader run the following command to know more about it:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`DataFrame`类具有极为灵活的初始化接口。我们建议读者运行以下命令来了解更多信息：'
- en: '[PRE42]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'This will display information about the construction options. Our goal here
    is not to cover all possibilities, but to give an idea of the offered flexibility.
    Run the following code in a cell:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示有关构造选项的信息。我们的目标不是覆盖所有可能性，而是给出其灵活性的概念。请在单元格中运行以下代码：
- en: '[PRE43]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The preceding code produces the following table:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码生成如下表格：
- en: '![The DataFrame class](img/8341OS_04_03.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![DataFrame类](img/8341OS_04_03.jpg)'
- en: 'This example illustrates a useful way of thinking of a `DataFrame` object:
    it consists of a dictionary of `Series` objects with a common `Index` object labeling
    the rows of the table. Each element in the dictionary corresponds to a column
    in the table. Keep in mind that this is simply a way to conceptualize a `DataFrame`
    object, and this is not a description of its internal storage.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子展示了一种有用的方式来理解`DataFrame`对象：它由一个`Series`对象的字典组成，`Index`对象标记表格的行。字典中的每个元素对应表格中的一列。请记住，这仅仅是用来概念化`DataFrame`对象的一种方式，并不是描述其内部存储。
- en: 'Let''s go back to our student data example. Let''s add a column with the total
    score of each student, which is the average of the grades, with the final having
    weight two. This can be computed with the following code:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 回到我们的学生数据示例。我们来添加一个列，表示每个学生的总分，计算方法是所有成绩的平均值，期末成绩的权重是两倍。可以使用以下代码进行计算：
- en: '[PRE44]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The output for the preceding command line is as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 前述命令行的输出如下：
- en: '![The DataFrame class](img/8341OS_04_04.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![DataFrame 类](img/8341OS_04_04.jpg)'
- en: 'In the preceding command line, we used one of the following recommended methods
    of accessing elements from a `DataFrame` class:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的命令行中，我们使用了以下推荐的`DataFrame`类元素访问方法：
- en: '`.loc`: This method is label-based, that is, the element positions are interpreted
    as labels (of columns or rows) in the table. This method was used in the preceding
    example.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.loc`：该方法基于标签，即元素位置被解释为表格中的标签（行或列）。在前面的示例中使用了该方法。'
- en: '`.iloc`: This method is integer-based. The arguments must be integers and are
    interpreted as zero-based indexes for the rows and columns of the table. For example,
    `grades.iloc[0,1]` refers to the data in row 0 and column 1, which is Alice''s
    grade in Test 1 in the preceding example.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.iloc`：该方法基于整数索引。参数必须是整数，并作为表格行和列的零基索引进行解释。例如，`grades.iloc[0,1]`表示前面示例中第0行和第1列的数据，即Alice在测试1中的成绩。'
- en: '`.ix`: This indexing method supports mixed integer and label-based access.
    For example, both `grades.ix[17035, 4]` and `grades.ix[17035, ''Score'']` refer
    to Bob''s score in the course. Notice that pandas is smart enough to know that
    the row labels are integers, so that the index `17035` refers to a label, not
    a position in the table. Indeed, attempting to access the `grades.ix[1, 4]` element
    will flag an error because there is no row with label 1.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.ix`：这种索引方法支持混合整数和标签索引。例如，`grades.ix[17035, 4]`和`grades.ix[17035, ''Score'']`都指Bob在该课程中的成绩。请注意，pandas足够智能，能够识别行标签是整数，因此索引`17035`指的是标签，而不是表格中的位置。实际上，尝试访问`grades.ix[1,
    4]`元素会引发错误，因为没有标签为1的行。'
- en: To use any of these methods, the corresponding entry (or entries) in the `DataFrame`
    object must already exist. So, these methods cannot be used to insert or append
    new data.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用这些方法，`DataFrame`对象中必须已经存在相应的条目（或条目）。因此，这些方法不能用于插入或附加新数据。
- en: 'Notice that Bob does not have a grade in his second test, indicated by the
    `NaN` entry (he was probably sick on the day of the test). When he takes a retest,
    his grade can be updated as follows:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，Bob在第二次测试中没有成绩，这通过`NaN`条目表示（他可能在测试当天生病了）。当他进行补考时，可以通过以下方式更新他的成绩：
- en: '[PRE45]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'In the output, you will notice that Bob''s final score is not automatically
    updated. This is no surprise because a `DataFrame` object is not designed to work
    as a spreadsheet program. To perform the update, you must explicitly execute the
    cell that computes the score again. After you do that, the table will look like
    this:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在输出中，你会注意到Bob的期末成绩没有自动更新。这并不令人惊讶，因为`DataFrame`对象并不是作为电子表格程序设计的。要执行更新，你必须显式地再次执行计算成绩的单元格。这样做后，表格将如下所示：
- en: '![The DataFrame class](img/8341OS_04_05.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![DataFrame 类](img/8341OS_04_05.jpg)'
- en: Tip
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: It is also possible to use regular indexing to access `DataFrame` entries, but
    that is frowned upon. For example, to refer to Samaly's grade in the final, we
    could use the **chained** **reference**, that is, by using `grades['Test 2'][17028]`.
    (Notice the order of the indexes!) We will avoid this usage.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以使用常规索引来访问`DataFrame`条目，但这种做法不被推荐。例如，要引用Samaly的期末成绩，我们可以使用**链式****引用**，即使用`grades['Test
    2'][17028]`。 （注意索引的顺序！）我们将避免这种用法。
- en: 'The teacher is a little disappointed, because no student got an A grade (score
    above 90). So, students are given an extra credit assignment. To add a column
    with the new grade component beside the `Final` column, we can run the following
    command lines:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 老师有点失望，因为没有学生获得A（分数超过90）。于是，学生们被布置了一个额外的学分作业。为了在`Final`列旁边添加一个新成绩组成的列，我们可以运行以下命令：
- en: '[PRE46]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Obviously, we can also insert rows. To add a new student we could use the following
    command lines:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，我们也可以插入行。为了添加一个新学生，我们可以使用以下命令：
- en: '[PRE47]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Of course, the scores have to be updated as follows to take the extra credit
    into account:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，必须根据以下方式更新成绩，以考虑额外学分：
- en: '[PRE48]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Now, suppose we want to find all students who got an A and had a score of less
    than 78 in Test 1\. We can do this by using a Boolean expression as index, as
    shown in the following code:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设我们想找到所有在Test 1中获得A并且分数低于78的学生。我们可以通过使用布尔表达式作为索引来实现，如下代码所示：
- en: '[PRE49]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Two important things should be noted from the preceding example:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 从上面的示例中应注意两点重要内容：
- en: We need to use the `&` operator instead of the `and` operator
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要使用`&`操作符，而不是`and`操作符。
- en: The parentheses are necessary due to the high precedence of the `&` operator
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于`&`操作符的优先级较高，括号是必须的。
- en: This will return a subtable with the rows that satisfy the condition expressed
    by the Boolean expression.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回一个子表格，包含满足布尔表达式条件的行。
- en: 'Suppose we want the names and scores of the students who have a score of at
    least 80, but less than 90 (these could represent the "B" students). The following
    command lines will be useful to do so:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要获得分数至少为80但不到90的学生的名字和分数（这些学生可能代表“B”级学生）。以下命令将对我们有所帮助：
- en: '[PRE50]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'This is what this code does:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码的作用如下：
- en: The expression `grades[(80 <= grades['Score']) & grades['Score'] < 90]` creates
    a `DataFrame` class that contains all student data for students who have a score
    of at least 80 but less than 90.
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表达式`grades[(80 <= grades['Score']) & grades['Score'] < 90]`创建一个`DataFrame`类，包含所有学生的数据，这些学生的分数至少为80，但小于90。
- en: Then, `.loc[:,'Name', 'Score']` takes a slice of this `DataFrame` class, which
    consists of all rows in the columns labeled `Name` and `Score`.
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，`.loc[:,'Name', 'Score']`获取这个`DataFrame`类的一个切片，其中包含所有行及标签为`Name`和`Score`的列。
- en: 'An important point about pandas data structures is that whenever data is referred
    to, the returned object may be either a copy or a view of the original data. Let''s
    create a `DataFrame` class with pseudorandom data to see some examples. To make
    things interesting, each column will contain normal data with a given mean and
    standard deviation. The code is as follows:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 关于pandas数据结构的一个重要点是，每当引用数据时，返回的对象可能是原始数据的副本或视图。让我们创建一个带有伪随机数据的`DataFrame`类来查看一些示例。为了让事情更有趣，每列将包含具有给定均值和标准差的正态数据。代码如下：
- en: '[PRE51]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'The preceding command lines create the data we need for the examples. Perform
    the following steps:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令行创建了我们需要的数据，用于示例。请执行以下步骤：
- en: Define the Python lists, `means` and `sdevs`, which contain the mean and standard
    deviation values of the distributions.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义Python列表`means`和`sdevs`，分别包含分布的均值和标准差值。
- en: Then, create a dictionary named `random_data`, with string keys that correspond
    to the column labels of the `DataFame` class that will be created.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，创建一个名为`random_data`的字典，字典的键为字符串类型，且对应将要创建的`DataFrame`类的列标签。
- en: Each entry in the dictionary corresponds to a list of size `nrows` containing
    the data, which is generated by the function call to the `normal()` function of
    `NumPy`.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 字典中的每个条目都对应一个大小为`nrows`的列表，包含由`NumPy`的`normal()`函数生成的数据。
- en: Create a list named `row_labels`, which contains row labels of the `DataFrame`
    class.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`row_labels`的列表，包含`DataFrame`类的行标签。
- en: Use both the data, that is, the `random_data` dictionary and the `row_labels`
    list, in the `DataFrame` constructor.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用这两组数据，即`random_data`字典和`row_labels`列表，在`DataFrame`构造函数中。
- en: The preceding code will generate a table of 30 rows and 8 columns. You can see
    the table, as usual, by evaluating `dframe` by itself in a cell. Notice that even
    though the table is of a moderately large size, the IPython notebook does a good
    job of displaying it.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将生成一个30行8列的表格。你可以通过在单元格中单独评估`dframe`来查看这个表格。请注意，尽管这个表格的大小适中，但IPython笔记本在显示时做得非常好。
- en: 'Let''s now select a slice of the `DataFrame` class. For the purpose of demonstration,
    we will use the mixed indexing `.ix` method:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们选择`DataFrame`类的一个切片。为了演示的目的，我们将使用混合索引的`.ix`方法：
- en: '[PRE52]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Notice how the ranges are specified:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，范围是如何指定的：
- en: The expression `'Row 3':'Row 11'` represents a range specified by labels. Notice
    that, contrary to the usual assumptions in Python, the range includes the last
    element (`Row 11`, in this case).
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表达式`'Row 3':'Row 11'`表示一个由标签指定的范围。请注意，与Python中的常见假设相反，这个范围包括最后一个元素（在本例中是`Row
    11`）。
- en: The expression `5:` (the number 5 followed by a colon) represents a range numerically,
    from the fifth column to the end of the table.
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表达式`5:`（数字5后跟一个冒号）表示一个数值范围，从第五列到表格的末尾。
- en: 'Now, run the following command lines in a cell:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在一个单元格中运行以下命令行：
- en: '[PRE53]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'The first line resamples a single cell in the data table, and the other two
    rows print the result. Notice that the printed values are the same! This shows
    that no copying has taken place, and the variable `dframe_slice` refers to the
    same objects (memory area) that already existed in the `DataFrame` class referred
    to by the `dframe` variable. (This is the analogous to pointers in languages such
    as C, where more than one pointer can refer to the same memory. It is, actually,
    the standard way variables behave in Python: there is no default copying.)'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行对数据表中的一个单元格进行了重采样，接下来的两行打印了结果。请注意，打印的值是相同的！这表明没有发生复制，变量`dframe_slice`引用了已经存在于由`dframe`变量引用的`DataFrame`类中的相同对象（内存区域）。（这类似于C语言中的指针，多个指针可以引用同一块内存。实际上，这是Python中变量的标准行为：默认没有复制。）
- en: 'What if we really want a copy? All pandas objects have a `copy()` method, so
    we can use the following code:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们真的想要一个副本怎么办？所有pandas对象都有一个`copy()`方法，所以我们可以使用以下代码：
- en: '[PRE54]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The preceding command lines will produce the same output as the previous example.
    However, notice what happens if we modify `dframe_slice_copy`:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的命令行将产生与前一个示例相同的输出。然而，注意如果我们修改`dframe_slice_copy`会发生什么：
- en: '[PRE55]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Now the printed values are different, confirming that only the copy was modified.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 现在打印的值不同，确认只有副本被修改。
- en: Note
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In certain cases, it is important to know if the data is copied or simply referred
    to during a slicing operation. Care should be taken, specially, with more complex
    data structures. Full coverage of this topic is beyond the scope of this book.
    However, using `.loc`, `.iloc`, and `.ix` as shown in the preceding examples is
    sufficient to avoid trouble. For an example where *chained indexing* can cause
    errors, see [http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy](http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy)
    for more information.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，了解数据是在切片操作中被复制还是仅仅被引用是很重要的。特别是在处理更复杂的数据结构时，要格外小心。本书无法全面覆盖这一话题。然而，使用`.loc`、`.iloc`和`.ix`，如前面的例子所示，足以避免问题。关于*链式索引*可能引发错误的示例，请参考[http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy](http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy)以获取更多信息。
- en: If you ever encounter a warning referring to `SettingWithCopy`, check if you
    are trying to modify an entry of a `DataFrame` object using chained indexing,
    such as in `dframe_object['a_column']['a_row']`. Changing the object access to
    use `.loc` instead, for example, will eliminate the warning.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你遇到与`SettingWithCopy`相关的警告，检查一下是否尝试使用链式索引修改`DataFrame`对象的条目，比如在`dframe_object['a_column']['a_row']`中。将对象访问改为使用`.loc`，例如，将消除警告。
- en: To finish this section, let's consider a few more examples of slicing a `DataFrame`
    as follows. In all of the following examples, there is no copying; only a new
    reference to the data is created.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 为了结束这一节，我们来看一些更多的切片`DataFrame`的示例。在以下所有示例中，都没有发生复制；只是创建了数据的新引用。
- en: 'Slicing with lists as indexes is performed using the following command line:'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用列表作为索引进行切片可以通过以下命令行执行：
- en: '[PRE56]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Slicing to reorder columns is performed using the following command line:'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用切片重新排序列可以通过以下命令行执行：
- en: '[PRE57]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'The preceding example reverses the column order. To have an arbitrary reordering,
    use a list with a permutation of the column positions:'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上面的示例颠倒了列的顺序。若要进行任意的重新排序，可以使用包含列位置排列的列表：
- en: '[PRE58]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Note that there is no actual reordering of columns in the `dframe` object, since
    there is no copying of the data.
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，`dframe`对象中的列没有实际重新排序，因为数据没有被复制。
- en: 'Slicing with Boolean operations is performed using the following command line:'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用布尔运算进行切片可以通过以下命令行执行：
- en: '[PRE59]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'The preceding command line selects the elements in the column labeled `Mean=1,
    sd=1` (that are positive), and returns a `Series` object (since the data is one-dimensional).
    If you are having trouble understanding the way this works, run the following
    command line in a cell by itself:'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述命令行选择标记为`Mean=1, sd=1`（且为正数）的列元素，并返回一个`Series`对象（因为数据是一维的）。如果你对这种方式理解有困难，可以单独在一个单元格中运行以下命令行：
- en: '[PRE60]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: This statement will return a `Series` object with Boolean values. The previous
    command line selects the rows of `dframe` corresponding to the positions that
    result as `True` in the `Series` object.
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个语句将返回一个包含布尔值的`Series`对象。之前的命令行选择了`dframe`中对应于`Series`对象中为`True`的位置的行。
- en: Slicing will, in general, return an object with a different shape than the original.
    The `where()` method can be used, as follows, in cases where the shape has to
    be preserved.
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 切片通常会返回一个形状与原始对象不同的对象。在需要保持形状不变的情况下，可以使用`where()`方法，如下所示。
- en: '[PRE61]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: The preceding command line returns a `DataFrame` class that has missing values
    (`NaN`) in the entries that correspond to non-negative values of the original
    `dframe` object.
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述命令行返回一个`DataFrame`类，其条目对应于原始`dframe`对象中非负值的位置，并包含缺失值（`NaN`）。
- en: 'We can also indicate a value to be replaced by the values that do not satisfy
    the given condition using the following command line:'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们还可以使用以下命令行指定一个值，用来替换不满足给定条件的值：
- en: '[PRE62]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: This command line will replace the entries corresponding to non-negative values
    by 0.
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这条命令行将把对应于非负值的条目替换为0。
- en: Computational and graphics tools
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 计算和图形工具
- en: 'The objects of pandas have a rich set of built-in computational tools. To illustrate
    some of this functionality, we will use the random data stored in the `dframe`
    object defined in the previous section. If you discarded that object, here is
    how to construct it again:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: pandas对象具有丰富的内建计算工具。为了说明这些功能，我们将使用前一节中定义的`dframe`对象中存储的随机数据。如果你丢弃了该对象，这里是如何重新构造它的：
- en: '[PRE63]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Let's explore some of this functionality of the built-in computational tools.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索一些内建计算工具的功能。
- en: 'To get a list of the methods available for the object, start typing the following
    command in a cell:'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要获取对象的可用方法列表，可以在单元格中输入以下命令：
- en: '[PRE64]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Then, press the *Tab* key. The completion popup allows us to select a method
    by double clicking on it. For example, double click on `mean`. The cell text changes
    to the following:'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，按下*Tab*键。自动完成弹出窗口允许我们通过双击选择一个方法。例如，双击`mean`。单元格文本会变为以下内容：
- en: '[PRE65]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Now, add a question mark to the preceding command line and run the cell:'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在，在上述命令行后加上问号并运行该单元格：
- en: '[PRE66]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: This will display information about the `mean` method (which, not surprisingly,
    computes the mean of the data).
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将显示关于`mean`方法的信息（该方法显而易见地计算数据的平均值）。
- en: Using tab-completion and IPython's help features is an excellent way to learn
    about pandas' features. I recommend that you always display the documentation
    this way, at least the first few times a method is used. Learning about the features
    that pandas offers can be a real time-saver.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Tab自动完成和IPython的帮助功能是学习pandas功能的一个极好的方法。我建议你总是通过这种方式显示文档，至少在第一次使用方法时要这样做。了解pandas提供的功能可以节省大量时间。
- en: 'Now, let''s continue with the functionalities:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续探索更多的功能：
- en: 'Let''s say that we want to compute the column means for our random data. This
    can be done by evaluating the following command:'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 假设我们想计算随机数据的列均值。这可以通过评估以下命令来实现：
- en: '[PRE67]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'The standard deviation values can be computed with the following command:'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准差值可以通过以下命令计算：
- en: '[PRE68]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Note that the results for all of the immediately preceding command lines are
    returned as `Series` objects, which is the default object type that pandas uses
    for one-dimensional data. In particular, the column labels become the indexes
    of the objects. Let's say we want to create a `DataFrame` object containing the
    mean and standard deviation in two rows. pandas makes this a very easy task, using
    built-in conversions and constructors.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，所有紧接着的命令行结果都作为`Series`对象返回，这是pandas为一维数据使用的默认对象类型。特别是，列标签成为对象的索引。假设我们想创建一个包含均值和标准差的`DataFrame`对象，且有两行。pandas通过内建转换和构造器使得这一任务变得非常容易。
- en: '[PRE69]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'In this code, we first compute the means and standard deviations and assign
    them to variables for clarity. Then, we call the `DataFrame` constructor that
    accepts a list of Python dictionaries. This is made easy because pandas allows
    conversion from a `Series` object to a dictionary in a convenient way: `dict(mean_series)`
    returns the representation of `mean_series` as a dictionary, using the indexes
    of the `Series` object as keys to the dictionary.'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，我们首先计算均值和标准差，并将它们赋值给变量以便清晰表达。然后，我们调用接受Python字典列表的`DataFrame`构造函数。这是因为pandas允许将`Series`对象便捷地转换为字典：`dict(mean_series)`返回`mean_series`的字典表示，使用`Series`对象的索引作为字典的键。
- en: 'Let''s say we want to standardize the data in all columns so that they all
    have a common mean value 100 and standard deviation value 20\. This can be achieved
    using the following command lines:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要标准化所有列的数据，使它们都具有相同的均值100和标准差20。这可以通过以下命令行实现：
- en: '[PRE70]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'The preceding command lines simply implement the definition of standardization:
    we subtract the means from the data, divide by the standard deviation, scale by
    the desired value of the deviation, and add the desired mean. To check that we
    get the expected results, run the following command lines:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令行只是实现了标准化的定义：我们从数据中减去均值，除以标准差，按期望的偏差值进行缩放，然后加上期望的均值。为了检查我们是否得到预期结果，请运行以下命令行：
- en: '[PRE71]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'To illustrate the possibilities, let''s do a two-sided test of the hypothesis
    that the mean of each column is 0\. We first compute the **Z-scores** for the
    columns. The Z-score of each column is just the deviation from the column mean
    to the model mean (0 in this case), properly scaled by the standard deviation:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明这些可能性，让我们进行一个双侧检验，假设每列的均值为0。我们首先计算列的**Z分数**。每列的Z分数就是该列均值与模型均值（此处为0）之间的偏差，并按标准差正确缩放：
- en: '[PRE72]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'The scaling factor, `sqrt(len(dframe))`, is the square root of the number of
    data points, which is given by the number of rows in the table. The last step
    is to compute the **p-values** for each column. The p-values are simply a measure
    of the probability that the data deviates from the mean by more than the corresponding
    Z-score, given the assumed distribution. These values are obtained from a normal
    distribution (technically, we should use a **t-distribution**, since we are using
    the sample standard deviation, but in this example this does not really make any
    difference, since the data is normally generated, and the sample size is large
    enough). The following command lines use the normal distribution object, `norm`,
    from SciPy to compute the p-values as percentages:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 缩放因子`sqrt(len(dframe))`是数据点数量的平方根，数据点数量由表格中的行数给出。最后一步是计算每列的**p值**。p值只是衡量数据偏离均值超过相应Z分数的概率，这个概率基于假定的分布。这些值是从正态分布中获得的（严格来说，我们应该使用**t分布**，因为我们使用的是样本标准差，但在这个示例中，这并不会产生实质性差异，因为数据是正态生成的，而且样本量足够大）。以下命令行使用SciPy中的正态分布对象`norm`来计算p值，并转换为百分比：
- en: '[PRE73]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'The line that computes the p-values is as follows:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 计算p值的代码行如下：
- en: '[PRE74]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: We use the `cdf()` method, which computes the cumulative distribution function
    for the normal curve from the `norm` object. We then multiply it with `2`, since
    this is a two-sided test, and multiply by `100` to get a percentage.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`cdf()`方法，它计算来自`norm`对象的正态分布的累积分布函数。然后我们将其乘以`2`，因为这是一个双侧检验，再乘以`100`以获得百分比。
- en: The next line converts the p-values into a `Series` object. This is not necessary,
    but makes the results easier to visualize.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 下一行将p值转换为`Series`对象。这不是必需的，但能使结果更容易可视化。
- en: 'The following are the results obtained:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是获得的结果：
- en: '[PRE75]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: Note
  id: totrans-219
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Please note that in the preceding example, you will get different numbers, since
    the data is randomly generated.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在前面的示例中，您将得到不同的数字，因为数据是随机生成的。
- en: 'The results are what we expect, given the way the data was generated: the p-values
    are all very small, except for the columns that have mean `0`.'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 由于数据生成方式的原因，结果正如我们所预期：除了均值为`0`的列之外，所有列的p值都非常小。
- en: 'Now, let''s explore some of the graphical capabilities provided by pandas.
    The pandas plots are produced using matplotlib, so the basic interface has already
    been discussed in [Chapter 3](ch03.html "Chapter 3. Graphics with matplotlib"),
    *Graphics with matplotlib*. In the examples that follow, we will assume that we
    are using the magic. Run the following command in the cell:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们探索 pandas 提供的一些图形功能。pandas 绘图是使用 matplotlib 生成的，因此基本接口已经在[第 3 章](ch03.html
    "Chapter 3. Graphics with matplotlib")，*使用 matplotlib 进行图形绘制*中讨论过。在接下来的示例中，我们假设正在使用魔法。请在单元格中运行以下命令：
- en: '[PRE76]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: Most of the plotting capabilities of pandas are implemented as methods of `Series`
    or `DataFrame` objects.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 大多数的绘图功能是作为 `Series` 或 `DataFrame` 对象的方法实现的。
- en: 'Let''s define the following data in our table to include more data points:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在表格中定义以下数据，以包括更多的数据点：
- en: '[PRE77]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'To display a grid of histograms of the data, we can use the following command:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示数据的直方图网格，我们可以使用以下命令：
- en: '[PRE78]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'We use the `hist()` method to generate the histograms and use the `color` option
    as well, which is passed to the matplotlib function calls that actually do the
    drawing. The second line of code adds spaces to the plots so that the axis labels
    do not overlap. You may find that some of the histograms do not look normal. To
    fix their appearance, it is possible to fiddle with the `bins` and `range` options
    of the `hist()` method, as shown in the following example:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `hist()` 方法生成直方图，并使用 `color` 选项，该选项传递给实际绘图的 matplotlib 函数调用。代码的第二行通过在图表中添加空隙，避免了坐标轴标签重叠。你可能会发现有些直方图看起来不正常。要修复它们的外观，可以调整
    `hist()` 方法的 `bins` 和 `range` 选项，如下所示：
- en: '[PRE79]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: This will draw a histogram of the data in the column for a mean of `0` and standard
    deviation of `2`, with `40` bins in the range from `-10` to `10`. In other words,
    each bin will have a width of `0.5`. Note that the plot may not include all the
    range from `-10` to `10`, since pandas restricts the drawing to ranges that actually
    contain data.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 这将绘制一个列中数据的直方图，均值为 `0`，标准差为 `2`，在从 `-10` 到 `10` 的范围内有 `40` 个区间。换句话说，每个区间的宽度是
    `0.5`。请注意，绘图可能不包括从 `-10` 到 `10` 的整个范围，因为 pandas 会将绘图限制在实际包含数据的范围内。
- en: 'For example, let''s generate data according to **Geometrical Brownian Motion**
    (**GBM**), which is a model used in mathematical finance to represent the evolution
    of stock prices. (For details, see [http://en.wikipedia.org/wiki/Geometric_Brownian_motion](http://en.wikipedia.org/wiki/Geometric_Brownian_motion).)
    This model is defined in terms of two parameters, representing the **percentage
    drift** and **percentage volatility** of the stock. We start by defining these
    two values in our model, as well as the initial value of the stock:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，让我们根据**几何布朗运动**（**GBM**）生成数据，这是一种在数学金融中用于表示股票价格演变的模型。（详情见 [http://en.wikipedia.org/wiki/Geometric_Brownian_motion](http://en.wikipedia.org/wiki/Geometric_Brownian_motion)。）这个模型通过两个参数定义，表示股票的**百分比漂移**和**百分比波动率**。我们从在模型中定义这两个值开始，并定义股票的初始值：
- en: '[PRE80]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'The simulation should run from time `0.0` to the maximum time `20.0`, and we
    want to generate 200 data points. The following command lines define these parameters:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟应该从时间 `0.0` 运行到最大时间 `20.0`，并且我们希望生成 200 个数据点。以下命令定义了这些参数：
- en: '[PRE81]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'The stock model would naturally be represented by a time series (a `Series`
    object). However, to make the simulation simpler, we will use a `DataFame` object
    and build the simulation column by column. We will start with a very simple table
    containing only integer indexes and the simulation times:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 股票模型自然会通过时间序列（`Series` 对象）来表示。然而，为了简化模拟，我们将使用 `DataFrame` 对象，并逐列构建模拟。我们从一个非常简单的表格开始，该表格仅包含整数索引和模拟时间：
- en: '[PRE82]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'To see the first few rows of the table, we can use the following command line:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看表格的前几行，我们可以使用以下命令：
- en: '[PRE83]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: You might want to run this command after each column is added in order to get
    a better idea of how the simulation progresses.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在每一列添加后，你可能想要运行这个命令，以便更好地了解模拟的进展。
- en: 'The basis for the GBM model is (unsurprisingly) a stochastic process called
    **Brownian Motion** (**BM**). This process has two parts. A deterministic component,
    called **drift**, is computed as follows:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: GBM 模型的基础是（毫不奇怪）一种叫做**布朗运动**（**BM**）的随机过程。这个过程包含两个部分。一个确定性成分，叫做**漂移**，其计算方法如下：
- en: '[PRE84]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'The next component adds randomness. It is defined in terms of increments, which
    are normally distributed with mean zero and standard deviation given by the time
    interval multiplied by the percentage volatility:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个组件添加了随机性。它通过增量来定义，这些增量是正态分布的，均值为零，标准差由时间间隔乘以百分比波动性给出：
- en: '[PRE85]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'The BM component is then defined as the cumulative sum of the increments, as
    shown in the following command lines:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，BM 组件被定义为增量的累计和，如下命令行所示：
- en: '[PRE86]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: In the preceding command lines, we add the second line because we want the process
    to start at `0`, which is not the convention adopted by the `cumsum()` method.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的命令行中，我们添加了第二行，因为我们希望从`0`开始，这不是`cumsum()`方法采用的默认设置。
- en: 'We are now ready to compute the stock simulation. It is calculated by taking
    the drift component, adding to the BM component, taking the exponential of the
    result, and finally, multiplying it by the initial value of the stock. This is
    all done with the following command:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在准备计算股票模拟。计算方法是取漂移成分，加上 BM 成分，然后对结果取指数，最后将其与股票的初始值相乘。所有这些操作可以通过以下命令完成：
- en: '[PRE87]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'We are now ready to plot the result of the simulation using the following command
    lines:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在准备使用以下命令行绘制模拟结果：
- en: '[PRE88]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: The preceding command lines produce the following graph. Obviously, the graph
    you will get will be different due to randomness.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令行生成了以下图表。显然，由于随机性，您得到的图表会有所不同。
- en: '![Computational and graphics tools](img/8341OS_04_06.jpg)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
  zh: '![计算与图形工具](img/8341OS_04_06.jpg)'
- en: An example with a realistic dataset
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用现实数据集的示例
- en: In this section, we will work with a realistic dataset of moderate size. We
    will use the **World Development Indicators** dataset, which is provided free
    of charge by the World Bank. This is a reasonably sized dataset that is not too
    large or complex to experiment with.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将使用一个中等规模的现实数据集。我们将使用**世界发展指标**数据集，该数据集由世界银行免费提供。这个数据集规模适中，不算太大或复杂，适合用来实验。
- en: 'In any real application, we will need to read data from some source, reformat
    it to our purposes, and save the reformatted data back to some storage system.
    pandas offers facilities for data retrieval and storage in multiple formats:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何实际应用中，我们都需要从某个来源读取数据，将其重新格式化以满足我们的需求，然后将重新格式化的数据保存回某个存储系统。pandas 提供了多种格式的数据检索和存储功能：
- en: '**Comma-separated** **values** (**CSV**) in text files'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**逗号分隔** **值**（**CSV**）在文本文件中'
- en: Excel
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Excel
- en: JSON
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSON
- en: SQL
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQL
- en: HTML
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTML
- en: Stata
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Stata
- en: Clipboard data in text format
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文本格式的剪贴板数据
- en: Python-pickled data
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 序列化数据
- en: The list of formats supported by pandas keeps growing with each new update to
    the library. Please refer to [http://pandas.pydata.org/pandas-docs/stable/io.html](http://pandas.pydata.org/pandas-docs/stable/io.html)
    for a current list.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 支持的格式列表随着每次库的更新而不断增长。请参考[http://pandas.pydata.org/pandas-docs/stable/io.html](http://pandas.pydata.org/pandas-docs/stable/io.html)获取当前的列表。
- en: Treating all formats supported by pandas is not possible in a book with the
    current scope. We will restrict examples to CSV files, which is a simple text
    format that is widely used. Most software packages and data sources have options
    to format data as CSV files.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 由于本书的范围限制，无法覆盖 pandas 支持的所有格式。我们将把示例限制为 CSV 文件，这是一种简单的文本格式，广泛使用。大多数软件包和数据源都可以将数据格式化为
    CSV 文件。
- en: Curiously enough, CSV is not a formally described storage format. pandas does
    a good job of providing enough options to read the great majority of files. However,
    the format of the data may vary depending on the data source. Luckily, since CSV
    files are simply text files, we can open the files in a spreadsheet program or
    even a text editor to examine their structure.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，CSV 并不是一个正式描述的存储格式。pandas 在提供足够的选项来读取大多数文件方面做得很好。然而，数据的格式可能会因数据源而异。幸运的是，由于
    CSV 文件只是文本文件，我们可以在电子表格程序或文本编辑器中打开文件，查看其结构。
- en: The dataset for this section can be downloaded from [http://data.worldbank.org/data-catalog/world-development-indicators](http://data.worldbank.org/data-catalog/world-development-indicators),
    and is also available in the book website. If you choose to download the data
    from the original website, make sure you choose the CSV file format. The file
    is in compressed ZIP format, and is about 40 MB in size. Once the archive is decompressed,
    we get the following files.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的数据集可以从[http://data.worldbank.org/data-catalog/world-development-indicators](http://data.worldbank.org/data-catalog/world-development-indicators)下载，也可以在本书网站上获取。如果选择从原始网站下载数据，请确保选择CSV文件格式。该文件为压缩的ZIP格式，大小约为40
    MB。解压缩后，我们将获得以下文件。
- en: '`WDI_Country.csv`'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WDI_Country.csv`'
- en: '`WDI_CS_Notes.csv`'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WDI_CS_Notes.csv`'
- en: '`WDI_Data.csv`'
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WDI_Data.csv`'
- en: '`WDI_Description.csv`'
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WDI_Description.csv`'
- en: '`WDI_Footnotes.csv`'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WDI_Footnotes.csv`'
- en: '`WDI_Series.csv`'
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WDI_Series.csv`'
- en: '`WDI_ST_Notes.csv`'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WDI_ST_Notes.csv`'
- en: As is typical of any realistic dataset, there's always a lot of ancillary information
    associated with the data. This is called **metadata** and is used to give information
    about the dataset, including things such as the labels used for rows and/or columns,
    data collection details, and explanations concerning the meaning of the data.
    The metadata is contained in the various files contained within the archive. The
    reader is encouraged to open the different files using spreadsheet software (or
    a text editor) to get a feel for the kind of information available. For us, the
    most important metadata file is `WDI_Series.csv`, which contains information on
    the meaning of data labels for the several time series contained in the data.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 如同任何现实数据集一样，总是有很多与数据相关的附加信息。这些信息称为**元数据**，用于提供关于数据集的信息，包括行和/或列使用的标签、数据收集的细节以及数据含义的解释。元数据包含在归档中的各个文件中。建议读者使用电子表格软件（或文本编辑器）打开不同的文件，以便了解可用的信息类型。对我们来说，最重要的元数据文件是`WDI_Series.csv`，它包含有关数据标签含义的信息，涉及数据中包含的多个时间序列。
- en: The actual data is in the `WDI_Data.csv` file. As this file contains some of
    the metadata information, we will be able to do all the work using this file only.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 实际的数据存储在`WDI_Data.csv`文件中。由于该文件包含一些元数据，我们可以仅使用该文件完成所有工作。
- en: 'Make sure the `WDI_Data.csv` file is in the same directory that contains your
    IPython notebook files, and run the following command in a cell:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 确保`WDI_Data.csv`文件与包含IPython笔记本文件的目录在同一目录中，并在一个单元格中运行以下命令：
- en: '[PRE89]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'This will read the file and store it in a `DataFrame` object that we assign
    to the variable, `wdi`. The first row in the file is assumed to contain the column
    labels by default. We can see the beginning of the table by running the following
    command:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 这将读取文件并将其存储在一个`DataFrame`对象中，我们将该对象赋值给变量`wdi`。文件的第一行默认假设包含列标签。我们可以通过运行以下命令来查看表格的开头：
- en: '[PRE90]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: Note that the `DataFrame` class is indexed by integers by default. It is possible
    to choose one of the columns in the data file as the index by passing the `index_col`
    parameter to the `read_csv()` method. The index column can be specified either
    by its position or by its label in the file. The many options available to `read_csv()`
    are discussed in detail at [http://pandas.pydata.org/pandas-docs/stable/io.html#io-read-csv-table](http://pandas.pydata.org/pandas-docs/stable/io.html#io-read-csv-table).
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`DataFrame`类默认是按整数索引的。可以通过向`read_csv()`方法传递`index_col`参数来选择数据文件中的某一列作为索引。索引列可以通过其位置或标签在文件中指定。`read_csv()`的许多选项在[http://pandas.pydata.org/pandas-docs/stable/io.html#io-read-csv-table](http://pandas.pydata.org/pandas-docs/stable/io.html#io-read-csv-table)中有详细讨论。
- en: 'An examination of the file shows that it will need some work to be put in a
    format that can be easily used. Each row of the file contains a time series of
    annual data corresponding to one country and economic indicator. One initial step
    is to get all the countries and economic indicators contained in the file. To
    get a list of unique country names, we can use the following command line:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 对文件进行检查后发现，需要对其进行一些处理，才能将其转换为易于使用的格式。文件的每一行包含一个国家和经济指标的年度数据时间序列。一个初步步骤是获取文件中包含的所有国家和经济指标。要获取唯一国家名称的列表，可以使用以下命令：
- en: '[PRE91]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'To see how many countries are represented, run the following command line:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 若要查看代表了多少个国家，请运行以下命令：
- en: '[PRE92]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: Some of the entries in the file actually correspond to groups of countries,
    such as Sub-Saharan Africa.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 文件中的一些条目实际上对应的是国家组，如撒哈拉以南非洲。
- en: 'Now, for indicators, we can run the following command line:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，对于指标，我们可以运行以下命令行：
- en: '[PRE93]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'There are more than 1300 different economic indicators in the file. This can
    be verified by running the following command line:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 文件中有超过1300个不同的经济指标。可以通过运行以下命令来验证：
- en: '[PRE94]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'To show the different kinds of computation one might be interested in performing,
    let''s consider a single country, for example, Brazil. Let''s also suppose that
    we are only interested on the **Gross Domestic Product** (**GDP**) information.
    Now, we''ll see how to select the data we are interested in from the table. To
    make the example simpler, we will perform the selection in two steps. First, we
    select all rows for the country name `Brazil`, using the following command line:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示可能感兴趣的不同计算方法，我们以一个单一国家为例，比如巴西。假设我们只关心**国内生产总值**（**GDP**）信息。现在，我们将看到如何从表格中选择我们感兴趣的数据。为了简化示例，我们将分两步进行选择。首先，我们使用以下命令选择所有`Brazil`的行：
- en: '[PRE95]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'In the code preceding command line, consider the following expression:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的命令行代码中，考虑以下表达式：
- en: '[PRE96]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: This selects all the rows in which the country name string is equal to `Brazil`.
    For these rows, we want to select all columns of the table, as indicated by the
    colon in the first term of the slicing operation.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 这会选择所有国家名称字符串等于`Brazil`的行。对于这些行，我们想选择表格的所有列，正如切片操作中的第一个术语中的冒号所示。
- en: 'Let''s now select all the rows that refer to the GDP data. We start by defining
    a function that, given a string, determines if it contains the substring `GDP`
    (ignoring the case):'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们选择所有与GDP数据相关的行。我们首先定义一个函数，给定一个字符串，判断它是否包含子字符串`GDP`（忽略大小写）：
- en: '[PRE97]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'We now want to select the rows in `wdi_br` that return `True` when `select_fcn`
    is applied to the `Indicator Code` column. This can be done with the following
    command lines:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在想要在`wdi_br`中选择那些当`select_fcn`应用于`Indicator Code`列时返回`True`的行。这可以通过以下命令行完成：
- en: '[PRE98]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'The `map()` method of the `Series` object does exactly what we want: it applies
    a function to all elements of a series. We assign the result of this call to the
    variable, `criterion`. Then, we use `criterion` in the slicing operation that
    defines `wdi_br_gdp`. To see how many rows were selected, run the following command:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '`Series`对象的`map()`方法正是我们需要的功能：它会将函数应用于序列的所有元素。我们将此调用的结果赋值给变量`criterion`。然后，我们在定义`wdi_br_gdp`的切片操作中使用`criterion`。要查看选中了多少行，可以运行以下命令：'
- en: '[PRE99]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'In the dataset used at the writing of this book, the preceding command returns
    `32`. This means that there are 32 GDP-related indicators for the country named
    `Brazil`. Since we now have a manageable amount of data, we can display a table
    that has the indicator codes and their meanings using the following command line:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写本书时使用的数据集中，前面的命令返回`32`。这意味着名为`Brazil`的国家有32个与GDP相关的指标。由于数据量现在变得可控，我们可以使用以下命令显示一个包含指标代码及其含义的表格：
- en: '[PRE100]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: 'The preceding command line generates a nicely formatted table of the indicator
    and corresponding names, as shown in the following table:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令行生成了一个格式良好的表格，包含指标及其对应名称，如下表所示：
- en: '![An example with a realistic dataset](img/8341OS_04_07.jpg)'
  id: totrans-306
  prefs: []
  type: TYPE_IMG
  zh: '![一个使用现实数据集的示例](img/8341OS_04_07.jpg)'
- en: 'Let''s say that we are interested only in four indicators: the GDP, annual
    GDP growth, GDP per capita, and GDP per capita growth. We can further trim the
    data with the following command:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们只对四个指标感兴趣：GDP、年GDP增长率、人均GDP和人均GDP增长率。我们可以通过以下命令进一步筛选数据：
- en: '[PRE101]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: This produces quite a manageable table with 4 rows and 58 columns. Each row
    contains a time series of the corresponding GDP data starting with the year 1960.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成一个相对易于处理的表格，包含4行58列。每行都包含从1960年开始的相应GDP数据的时间序列。
- en: 'The problem with this table as it is laid out is that it is the "transpose"
    of what is the usual convention in pandas: the time series are across the rows
    of the table, instead of being down the columns. So, we still need to do a little
    more work with our table. We want the indexes of our table to be the years. We
    also want to have one column for each economic indicator and want to use the economic
    indicator names (not the codes) as the labels of the columns. Here is how this
    can be done:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 当前表格布局的问题在于，它是“转置”的，和 pandas 中常见的布局惯例相反：时间序列横跨表格的行，而不是纵向排列在列中。因此，我们还需要对表格做一些调整。我们希望表格的索引是年份。我们还希望为每个经济指标设置一列，并使用经济指标名称（而不是代码）作为列的标签。以下是如何实现这一点：
- en: '[PRE102]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: 'The following is an explanation of what the preceding command lines do:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对上述命令行功能的解释：
- en: We first define an `Index` object corresponding to the years in the table using
    the `columns` field of the `DataFrame` object. The object is stored in the variable
    `idx`.
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先使用 `DataFrame` 对象的 `columns` 字段定义一个与表格中年份对应的 `Index` 对象。该对象存储在变量 `idx` 中。
- en: Then, we create an object containing the column names. This is a `Series` object
    stored in the variable `cols`.
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们创建一个包含列名的对象。这是一个 `Series` 对象，存储在变量 `cols` 中。
- en: Next, we extract the data we are interested in, that is, the portion of the
    table corresponding to the years after 1960\. We use the `as_matrix()` method
    of the `DataFrame` object to convert the data to a `NumPy` array, and store it
    in the variable `data`.
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们提取感兴趣的数据，即表格中对应1960年之后年份的部分数据。我们使用 `DataFrame` 对象的 `as_matrix()` 方法将数据转换为
    `NumPy` 数组，并将其存储在变量 `data` 中。
- en: Finally, we call the `DataFrame` constructor to create the new table.
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们调用 `DataFrame` 构造函数来创建新表格。
- en: 'Now that we have the data we want in a nice format, it is a good time to save
    it:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经获得了格式良好的数据，是时候保存它了：
- en: '[PRE103]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: At this point, we can open the `WDI_Brazil_GDP.csv` file in a spreadsheet program
    to view it.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们可以在电子表格程序中打开 `WDI_Brazil_GDP.csv` 文件进行查看。
- en: Now, let's start playing with the data by creating a few plots. Let's first
    plot the GDP and GDP growth, starting in 1980\. Since the data is given in dollars,
    we scale to give values in billions of dollars.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们开始通过创建一些图表来操作数据。首先绘制自1980年起的 GDP 和 GDP 增长图表。由于数据是以美元表示的，我们进行缩放以使其以十亿美元为单位。
- en: '[PRE104]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'The preceding command lines produce the following chart:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令行将生成以下图表：
- en: '![An example with a realistic dataset](img/8341OS_04_08.jpg)'
  id: totrans-323
  prefs: []
  type: TYPE_IMG
  zh: '![一个包含真实数据集的示例](img/8341OS_04_08.jpg)'
- en: 'As a final example, let''s draw a chart comparing the percent growth of per
    capita GDP for the **BRIC** (**Brazil, Russia, India, and China**) countries in
    the period 2000 to 2010\. Since we already have explored the structure of the
    data, the task is somewhat simpler:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 作为最后一个示例，让我们绘制一张比较 **BRIC**（**巴西、俄罗斯、印度和中国**）国家在2000到2010年间人均GDP增长百分比的图表。由于我们已经探索了数据的结构，这项任务相对简单：
- en: '[PRE105]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'We first define a list with the names of the BRIC countries and a string with
    the indicator code for percent GDP growth per capita. Then, we define a selection
    function: a string is selected if it is one of the BRIC country names. The `map()`
    method is then used to apply the selection function to all entries of the `Country
    Name` column. The last command line performs the actual selection. Note the use
    of the Boolean operator `&` to combine the two criteria used in the row selection.'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先定义一个包含金砖国家名称的列表，并定义一个表示人均 GDP 增长百分比的指标代码字符串。接着，我们定义一个选择函数：如果字符串是金砖国家名称之一，则选择该字符串。然后，使用
    `map()` 方法将选择函数应用于 `Country Name` 列的所有条目。最后一行命令执行实际的选择操作。请注意使用布尔运算符 `&` 来结合行选择中使用的两个条件。
- en: 'We now perform the reformatting of the data to have the relevant data series
    along the columns of the table. The command lines are similar to the ones in the
    previous example:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们对数据进行重新格式化，将相关数据系列排列在表格的列中。命令行与前一个示例中的命令相似：
- en: '[PRE106]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'Once this is done, plotting the data is straightforward:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，绘制数据就变得非常简单：
- en: '[PRE107]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: 'The preceding command lines result in the following plot:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令行将生成以下图表：
- en: '![An example with a realistic dataset](img/8341OS_04_09.jpg)'
  id: totrans-332
  prefs: []
  type: TYPE_IMG
  zh: '![一个包含真实数据集的示例](img/8341OS_04_09.jpg)'
- en: Summary
  id: totrans-333
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, we covered the objects of pandas, `Series` and `DataFrame`,
    which are specialized containers for data-oriented computations. We discussed
    how to create, access, and modify these objects, including advanced indexing and
    slicing operations. We also considered the computational and graphical capabilities
    offered by pandas. We then discussed how these capabilities can be leveraged to
    work with a realistic dataset.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了 pandas 的对象 `Series` 和 `DataFrame`，它们是用于数据导向计算的专用容器。我们讨论了如何创建、访问和修改这些对象，包括高级索引和切片操作。我们还探讨了
    pandas 提供的计算和图形能力。然后，我们讨论了如何利用这些功能处理真实数据集。
- en: In the next chapter, we will learn how to use SciPy to solve advanced mathematical
    problems of modeling, science, and engineering.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何使用 SciPy 解决建模、科学和工程中的高级数学问题。
