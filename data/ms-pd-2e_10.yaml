- en: Special Data Operations in pandas
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pandas 中的特殊数据操作
- en: pandas has an array of special operators for generating, aggregating, transforming,
    reading, and writing data from and to a variety of data types, such as number,
    string, date, timestamp, and time series. The basic operators in pandas were introduced
    in the previous chapter. In this chapter, we will continue that discussion and
    elaborate on the methods, syntax, and usage of some of these operators.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 提供了一系列特殊操作符，用于生成、聚合、转换、读取和写入来自不同数据类型（如数字、字符串、日期、时间戳和时间序列）的数据。pandas 中的基本操作符已在前一章介绍。本章将继续这一讨论，并详细说明一些操作符的方法、语法和用法。
- en: 'Reading this chapter will allow you to perform the following tasks with confidence:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读本章后，你将能够自信地完成以下任务：
- en: Writing custom functions and applying them on a column or an entire DataFrame
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写自定义函数并将其应用于列或整个 DataFrame
- en: Understanding the nature of missing values and handling them
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解缺失值的性质并进行处理
- en: Transforming and performing calculations on series using functions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用函数转换和计算序列
- en: Miscellaneous numeric operations on data
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对数据进行的其他数值操作
- en: Let's delve into it right away. For the most part, we will generate our own
    data to demonstrate the methods.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们立即深入探讨。大部分情况下，我们将生成自己的数据来演示这些方法。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Writing and applying one-liner custom functions
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写并应用一行自定义函数
- en: Handling missing values
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理缺失值
- en: A survey of methods on series
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于序列的方法调查
- en: pandas string methods
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: pandas 字符串方法
- en: Binary operations on DataFrames and series
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 DataFrame 和序列上进行二元操作
- en: Binning values
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对值进行分箱
- en: Using mathematical methods on DataFrames
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 DataFrame 上使用数学方法
- en: Writing and applying one-liner custom functions
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写并应用一行自定义函数
- en: Python provides lambda functions, which are a way to write one-liner custom
    functions so that we can perform certain tasks on a DataFrame's column(s) or the
    entire DataFrame. Lambda functions are similar to the traditional functions that
    are defined using the `def` keyword but are more elegant, are more amenable to
    apply on DataFrame columns, and have lucid and crisp syntax, much like a list
    comprehension for implementing for loops on lists. Let's look at how lambda functions
    are defined and applied.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Python 提供了 lambda 函数，它是一种编写一行自定义函数的方法，使我们能够在 DataFrame 的列或整个 DataFrame 上执行某些任务。lambda
    函数类似于使用 `def` 关键字定义的传统函数，但更加优雅，更适用于 DataFrame 列的应用，且语法简洁清晰，类似于在列表上实现 for 循环的列表推导式。让我们看看如何定义和应用
    lambda 函数。
- en: lambda and apply
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: lambda 和 apply
- en: In order to see how the `lambda` keyword can be used, we need to create some
    data. We'll create data containing date columns. Handling date columns is a topic
    in itself, but we'll get a brief glimpse of this process here.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为了查看 `lambda` 关键字如何使用，我们需要创建一些数据。我们将创建包含日期列的数据。处理日期列本身是一个话题，但我们将在这里简要了解这一过程。
- en: 'In the following code, we are creating two date columns:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中，我们正在创建两列日期：
- en: '**Start Date**: A sequence of 300 consecutive days starting from 2016-01-15'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开始日期**：从 2016-01-15 开始的 300 个连续日期'
- en: '**End Date**: A sequence of 300 days taken randomly from any day between 2010
    and 2025'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**结束日期**：从 2010 到 2025 年之间的任意一天随机选取的 300 个日期'
- en: 'Some date/time methods have been used to create these dates in the following
    code block. Please take note of them and ensure that you understand them:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码块中使用了一些日期/时间方法来创建这些日期。请注意它们，并确保你理解它们：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The output DataFrame has two columns, as shown here:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 输出的 DataFrame 有两列，如下所示：
- en: '![](img/68717efc-f9b8-48fd-ad2f-4b567e9d8b07.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/68717efc-f9b8-48fd-ad2f-4b567e9d8b07.png)'
- en: Output DataFrame with **Start Date** and **End** **Date**
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 输出的 DataFrame 包含 **开始日期** 和 **结束日期**
- en: 'Using this data, we will create some lambda functions to find the following:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些数据，我们将创建一些 lambda 函数来查找以下内容：
- en: Number of days between today and start date or end date
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 今天与开始日期或结束日期之间的天数
- en: Number of days between the start date and end date
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始日期和结束日期之间的天数
- en: Days in the start date or end date that come before a given date
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始日期或结束日期中早于给定日期的天数
- en: 'In the following code block, we have written the lambda functions carry out
    these tasks:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码块中，我们编写了 lambda 函数来执行这些任务：
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note how `x` and `y` have been used as placeholder arguments, that is, the parameters
    of the functions. While applying these functions to a column of data, these placeholders
    are replaced with the column name.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 `x` 和 `y` 被用作占位符参数，即函数的参数。在将这些函数应用于一列数据时，这些占位符会被列名替换。
- en: 'Lambda just helps to define a function. We need to call these functions with
    the actual arguments to execute these functions. Let''s see how this is done.
    For example, to execute the functions we defined previously, we can do the following:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Lambda 仅仅帮助定义一个函数。我们需要用实际参数来调用这些函数以执行它们。我们来看一下怎么做。例如，要执行我们之前定义的函数，我们可以这样做：
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following will be the output:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 以下将是输出结果：
- en: '![](img/99793a3c-26f8-4d1a-a585-27f467c880d2.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/99793a3c-26f8-4d1a-a585-27f467c880d2.png)'
- en: Output DataFrame with calculated fields on the date columns
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 输出包含日期列计算字段的DataFrame
- en: 'It should be noted that these functions can be called like so:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 应当注意，这些函数可以这样调用：
- en: '**Like simple functions**: With a function name and required argument'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**像简单函数一样**：使用函数名和必要的参数'
- en: '**With the apply method**: The DataFrame column name for this to be applied
    on, followed by `apply`, which takes a function name as an argument'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用 apply 方法**：首先是DataFrame列名，接着是 `apply`，它将函数名作为参数'
- en: 'Instead of `apply`, in this case, `map` would also work. Try the following
    and compare the results of `diff1` and `diff3`. They should be the same:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`map` 也可以代替 `apply` 使用。尝试以下操作，并比较 `diff1` 和 `diff3` 的结果。它们应该是相同的：
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'There are three related methods that perform similar kinds of work with subtle
    differences:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 有三个相关的方法，它们执行类似的工作，但有一些细微的区别：
- en: '| **Name** | **What does it do?** |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| **名称** | **功能是什么？** |'
- en: '| `map` | Applies a function over a column or a list of columns. |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `map` | 对一列或一列列列表应用一个函数。 |'
- en: '| `apply` | Applies a function over a column, row, or a list of columns or
    rows. |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `apply` | 对列、行或列/行列表应用一个函数。 |'
- en: '| `applymap` | Applies a function over the entire DataFrame, that is, each
    cell. Will work if the function is executable on each column. |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `applymap` | 对整个DataFrame应用一个函数，即对每个单元格应用。当函数可以作用于每一列时，将会生效。 |'
- en: Some use cases where these methods are very useful are as follows.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是这些方法非常有用的一些使用场景：
- en: 'Suppose each row in a dataset represents daily sales of an SKU for a retail
    company for a year. Each column represents an SKU. We''ll call this data `sku_sales`.
    Let''s get started:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 假设数据集中的每一行代表一个零售公司每年每个SKU的日销售额，每一列代表一个SKU。我们将把这个数据称为 `sku_sales`。让我们开始：
- en: 'To find the annual sales of each SKU, we will use the following code:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了查找每个 SKU 的年销售额，我们将使用以下代码：
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To find the daily sales across each SKU for each day, we will use the following
    code:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了找出每个SKU每天的销售额，我们将使用以下代码：
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To find the mean daily sales for `SKU1` and `SKU2`, we will use the following
    code:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了找出 `SKU1` 和 `SKU2` 的日均销售额，我们将使用以下代码：
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To find the mean and standard deviation of daily sales for all SKUs, we will
    use the following code:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了找到所有 SKU 的每日销售额的均值和标准差，我们将使用以下代码：
- en: '[PRE7]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now, you will be able to write and apply one-liner custom Lambda functions.
    Now, we'll look into how missing values can be handled.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你将能够编写并应用单行的自定义 Lambda 函数。接下来，我们将研究如何处理缺失值。
- en: Handling missing values
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理缺失值
- en: Missing values and NANs are commonplace occurrences in a dataset and need to
    be taken care of before data can be put to any use. We will look into various
    sources of missing values and the different types, as well as how to handle them
    in the upcoming sections.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 缺失值和 NAN 是数据集中常见的现象，在数据使用之前需要处理它们。我们将在接下来的部分中探讨缺失值的不同来源、类型以及如何处理它们。
- en: Sources of missing values
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缺失值的来源
- en: A missing value can enter a dataset because of or during the following processes.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 缺失值可能在以下过程中进入数据集：
- en: Data extraction
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据提取
- en: 'This entails the data that''s available but we missed during its extraction
    from a source. It deals with engineering tasks such as the following:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这指的是数据是可用的，但在从源中提取时我们错过了它。它涉及到以下工程任务：
- en: Scraping from a website
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从网站抓取数据
- en: Querying from a database
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从数据库查询
- en: Extracting from flat files
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从平面文件提取数据
- en: 'There can be many sources of missing values, some of which are as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 缺失值的来源有很多，以下是其中的一些：
- en: Regular expressions resulting in the wrong or non-unique results
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正则表达式可能导致错误或非唯一的结果
- en: Wrong query
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误查询
- en: A different data type storage
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同的数据类型存储
- en: Incomplete download
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载不完整
- en: Incomplete processing
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理不完整
- en: Data collection
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据收集
- en: This entails the data points that are not available or are difficult to collect.
    Suppose you are surveying 100,000 people for the type of electric car they own.
    In this case, if we encounter someone who doesn't own an electric car, we would
    have a missing value for that person's car type.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这包括无法获取或难以收集的数据点。假设你正在调查100,000人拥有何种电动汽车。如果遇到一个不拥有电动汽车的人，那么该人的汽车类型就会缺失。
- en: Missing values originating because of data extraction, in theory, can be rectified
    if we are able to identify the issue that led to the missing value and rerun the
    extraction process. Missing values originating from data collection issues are
    difficult to rectify.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 由于数据提取导致的缺失值，理论上可以通过识别导致缺失值的问题并重新运行提取过程来修正。而由于数据收集问题导致的缺失值则难以修正。
- en: 'How do you know your data has missing values? The easiest way to find this
    out is to run a summary of the dataset, which gives a count of rows as well. Since
    the rows containing missing values don''t get counted, this count will be lower
    for columns containing a missing value. Take a look at the following diagram,
    which shows a summary of the famous `titanic` dataset, for an illustration of
    this:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如何判断数据中是否有缺失值？最简单的方法是运行数据集摘要，它会给出行数的计数。由于包含缺失值的行不被计数，包含缺失值的列行数会较少。请看下面的图表，它展示了著名的`titanic`数据集的摘要，以说明这一点：
- en: '![](img/00decef1-d9b5-4618-b122-43a23572fc8b.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00decef1-d9b5-4618-b122-43a23572fc8b.png)'
- en: Data summary table showing the differences in the count of columns, indicating
    missing values
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 数据汇总表显示列计数差异，表示缺失值
- en: The **age** and **body** columns have missing values as they have fewer rows
    than the others.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '**年龄**和**体重**列有缺失值，因为它们的行数比其他列少。'
- en: It is of prime importance to take care of missing values because they propagate
    the missing values to the results of numeric operations and can lead to incorrect
    interpretations of data. They don't allow many numeric computations to run. They
    may also lead to an incorrect hypothesis if only a sample of the data gets used.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 处理缺失值至关重要，因为它们会将缺失值传播到数值运算的结果中，可能导致错误的数据解释。缺失值会阻止许多数值计算的进行。如果只使用数据的一个样本，也可能导致错误的假设。
- en: There are other ways in which the origin of missing values can be classified.
    Let's go over them now.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他方式可以分类缺失值的来源。现在我们来逐一讲解。
- en: Data missing at random
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 随机缺失数据
- en: Here, there is no particular reason why the data may be missing. Taking the
    previous example of electric cars, a missing car type is the case of data missing
    at random.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，数据缺失没有特定原因。以电动汽车为例，缺失的汽车类型属于随机缺失数据的情况。
- en: Data not missing at random
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 非随机缺失数据
- en: In this case, there may be a particular reason why data may be missing. Continuing
    with the same example, suppose among the people who have cars, we have some license
    plate numbers missing in a certain pocket where they use a fancy font on their
    license plate and the OCR software is unable to decipher it properly and returns
    a missing value. This is a case of data not missing at random.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，数据缺失可能有特定原因。继续使用之前的例子，假设在拥有汽车的人群中，某些车牌号缺失，因为在某个区域，他们的车牌使用了奇特的字体，导致OCR软件无法正确识别，结果返回缺失值。这就是非随机缺失数据的一个例子。
- en: Different types of missing values
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不同类型的缺失值
- en: 'The following are different types of missing values:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是不同类型的缺失值：
- en: '**Not a Number** (**NaN**): NaN is a placeholder for missing values for any
    data type. These can be created using `numpy.nan`. NaNs that are created using
    `numpy.nan` can be assigned to a nullable integer datatype. The missing value
    of an integer type is saved as a NaN. It is the default identifier of a missing
    value in Python.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**非数字**（**NaN**）：NaN是任何数据类型缺失值的占位符。这些可以通过`numpy.nan`来创建。使用`numpy.nan`创建的NaN可以分配给可空整数数据类型。整数类型的缺失值保存为NaN。它是Python中缺失值的默认标识符。'
- en: '**NA**: NA comes mostly from R, where NA is an identifier for a missing value.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NA**：NA主要来源于R语言，在R中，NA是缺失值的标识符。'
- en: '**NaT**: This is equivalent to a NaN for timestamp data points.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NaT**：这相当于时间戳数据点的NaN（非数字）。'
- en: '**None**: This represents missing values of data types other than numeric.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**None**：表示非数值数据类型的缺失值。'
- en: '**Null**: This originates when a function doesn''t return a value or if the
    value is undefined.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Null**：当函数没有返回值或值未定义时，产生Null。'
- en: '**Inf**: **Inf** is **infinity**—a value that is greater than any other value.
    `inf` is, therefore, smaller than any other value. It is generated by all the
    calculations, leading to very large or very small values. Often, we need to treat
    `inf` as a missing value. This can be done by specifying the following options
    in `pandas`:'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Inf**: **Inf**是**无穷大**——一个大于任何其他数值的值。因此，`inf`比任何其他值都要小。它是由所有计算产生的，导致非常大或非常小的值。通常，我们需要将`inf`视为缺失值。这可以通过在`pandas`中指定以下选项来完成：'
- en: '[PRE8]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'A placeholder infinity variable can also be generated for comparison purposes,
    as shown in the following example:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以生成一个占位符的无穷大变量用于比较，如下所示：
- en: '[PRE9]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: It returns `True`.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 它返回`True`。
- en: Miscellaneous analysis of missing values
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缺失值的杂项分析
- en: 'To get a sense of how mad the missing value problem is, you may want to find
    out about the following information:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解缺失值问题的严重程度，你可能想了解以下信息：
- en: How many cells in a column have a missing value
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一列中有多少个单元格包含缺失值
- en: Which cells in a column have a missing value
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 哪些单元格在一列中有缺失值
- en: How many columns have missing values
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 哪些列有缺失值
- en: 'These tasks can be performed as follows:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这些任务可以如下执行：
- en: 'Finding cells that have missing values:'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找包含缺失值的单元格：
- en: '[PRE10]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Finding the number of missing values in a column:'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找一列中缺失值的数量：
- en: '[PRE11]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The third one has been left as an exercise for you.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个问题留给你作为练习。
- en: Strategies for handling missing values
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理缺失值的策略
- en: The following are the major strategies for handling missing values.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是处理缺失值的主要策略：
- en: Deletion
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除
- en: This will delete the entire row or column that contains the missing value.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这将删除包含缺失值的整行或整列。
- en: Deletion leads to data loss and is not recommended unless there is no other
    way out.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 删除会导致数据丢失，除非别无选择，否则不推荐使用。
- en: 'Deletion can be performed as follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 删除可以如下执行：
- en: 'Dropping all the rows where all the cells have missing values:'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除所有单元格都包含缺失值的行：
- en: '[PRE12]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Dropping all the rows where any of the cells have missing values:'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除所有单元格有缺失值的行：
- en: '[PRE13]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Imputation
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 插补
- en: This replaces the missing value with a number that makes sense.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把缺失值替换为一个合理的数字。
- en: 'There are various ways in which imputation can be performed. Some of them are
    as follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 插补可以通过多种方式进行。以下是其中一些方法：
- en: 'Imputing all the missing values in a dataset with 0:'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用0插补数据集中所有缺失值：
- en: '[PRE14]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Imputing all the missing values with specified text:'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用指定文本插补所有缺失值：
- en: '[PRE15]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Imputing only the missing values in the `body` column with 0:'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅用0插补`body`列中的缺失值：
- en: '[PRE16]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Imputing with a mean of non-missing values:'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用非缺失值的均值进行插补：
- en: '[PRE17]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Imputing with a forward fill – this works especially well for time series data.
    Here, a missing value is replaced with the value in the previous row (period):'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用向前填充进行插补——这种方法特别适用于时间序列数据。在这里，缺失值会被替换为前一行（周期）的值：
- en: '[PRE18]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The following is the output:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/347e1fb1-2255-4b2b-9b33-601c5c077b8a.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](img/347e1fb1-2255-4b2b-9b33-601c5c077b8a.png)'
- en: Output DataFrame with missing values imputed with the forward fill method
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 输出DataFrame，其中缺失值使用向前填充方法进行了插补
- en: 'Imputing with a backward fill – this works especially well for time series
    data. Here, a missing value is replaced with the value in the previous row (period).
    You can control the number of rows that get filled after the first NaN using `pad`
    options. `Pad=1` means only 1 row will be filled forward or backward:'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用向后填充进行插补——这种方法特别适用于时间序列数据。在这里，缺失值会被替换为前一行（周期）的值。你可以通过`pad`选项控制在第一个NaN之后填充的行数。`Pad=1`意味着只会填充1行：
- en: '[PRE19]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The following is the output:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/c03ad3b9-4d2a-47d6-8170-f63193c5a7fb.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c03ad3b9-4d2a-47d6-8170-f63193c5a7fb.png)'
- en: Output DataFrame with missing values imputed with the backward fill method
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 输出DataFrame，其中缺失值使用向后填充方法进行了插补
- en: Interpolation
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 插值
- en: Interpolation is a technique that uses two endpoints at the extremes of consecutive
    missing values to create a rough mathematical relationship to fill the missing
    values. By default, it does a linear interpolation (which assumes a linear relationship
    between data points), but there are many more methods, such as polynomial, spline,
    quadratic, and Akima (which assumes a polynomial or piece-wise polynomial relationship).
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 插值是一种技术，它使用连续缺失值两端的端点，创建一个粗略的数学关系来填补缺失值。默认情况下，它执行线性插值（假设数据点之间有线性关系），但还有许多其他方法，如多项式插值、样条插值、二次插值和Akima插值（假设数据关系是多项式或分段多项式关系）。
- en: 'The `interpolate` method can be applied to a series or all the columns of a
    DataFrame directly:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`interpolate`方法可以直接应用于序列或DataFrame中的所有列：'
- en: '[PRE20]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The following is the output:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/0f3d54e8-c4af-4915-8f49-f2d5f005c013.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0f3d54e8-c4af-4915-8f49-f2d5f005c013.png)'
- en: Output DataFrame with missing values filled using simple interpolation
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 使用简单插值填充缺失值后的输出DataFrame
- en: 'Instead, other methods, such as `spline`, can be used, which assume a piece-wise
    polynomial relationship:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，可以使用其他方法，例如`spline`，该方法假定分段多项式关系：
- en: '[PRE21]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The following is the output:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/a9a24e57-a9a7-4da8-bb6b-a92e7c1bfc4b.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a9a24e57-a9a7-4da8-bb6b-a92e7c1bfc4b.png)'
- en: Output DataFrame with missing values filled using spline interpolation
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 使用样条插值填充缺失值后的输出DataFrame
- en: 'Similarly, polynomial interpolation can be done like so:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，可以进行多项式插值，如下所示：
- en: '[PRE22]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'A different column can be created for each interpolation method in the same
    DataFrame to compare their results, as shown here:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 可以为每种插值方法在同一个DataFrame中创建不同的列，以比较它们的结果，如下所示：
- en: '[PRE23]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The following is the output:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/0d5242e9-dccb-4806-8ca4-ba91c5ece93c.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0d5242e9-dccb-4806-8ca4-ba91c5ece93c.png)'
- en: Comparing mean values after interpolating using different methods
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 使用不同方法进行插值后的均值比较
- en: As we can see, the means are slightly different for each column because separate
    interpolation methods were used.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，每列的均值略有不同，因为使用了不同的插值方法。
- en: 'You can also check the values where interpolations were made to see how different/similar
    they are. This can be done as follows:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以检查插值的值，看看它们有多么不同/相似。可以按如下方式进行：
- en: '[PRE24]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: KNN
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: KNN
- en: '**K-nearest neighbors** (**KNN**) is an unsupervised locality-based regression
    and classification method. It considers each row of data as a point in n-dimensional
    space and finds k similar (neighboring) points based on their distance (for example,
    Euclidean for numeric data and Hamming for categorical data). To find the value
    for that row and that column of data, it takes an average of all its neighboring
    rows for that column and assigns the average as a value.'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '**K-近邻**（**KNN**）是一种无监督的基于局部的回归和分类方法。它将每行数据视为n维空间中的一个点，并根据它们之间的距离（例如，对于数值数据使用欧几里得距离，对于分类数据使用汉明距离）找到k个相似（邻近）点。为了找到该行和该列的值，它取所有邻近行在该列的平均值，并将平均值作为该值。'
- en: To summarize, it can be said that it defines a locality around a point and calculates
    a local average instead of a global average. This makes sense most of the time
    and is used instead of the global average because neighborhood behavior is a better
    approximator of the behavior of a sample point.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，可以说它定义了一个围绕某点的局部区域，并计算局部平均值，而不是全局平均值。大多数情况下，这种方法是合理的，通常用来代替全局平均值，因为邻域行为比样本点的全局行为更能逼近。
- en: Because of this property, KNN can be used for imputing missing values. The intuition
    is that missing value should have a value similar to its neighboring points. It
    is a local imputation method, in contrast with the `fillna` method, which is a
    global method.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个特性，KNN可以用于填充缺失值。其直觉是，缺失值应与其邻近点的值相似。这是一种局部填充方法，与`fillna`方法（全局方法）不同。
- en: '`kNeighborsClassifier` or `kNeighborsRegressor` from scikit-learn can be used
    for KNN and using the results for imputation. The following is an illustrated
    example where the following occurs, in order:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用scikit-learn中的`kNeighborsClassifier`或`kNeighborsRegressor`进行KNN，并将结果用于填充。以下是一个插图示例，其中按照顺序发生以下操作：
- en: Sample training data is generated.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成了样本训练数据。
- en: NaNs are introduced in the same data.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数据中引入了NaN值。
- en: A KNN model is fit on the sample training data.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个KNN模型在样本训练数据上进行了拟合。
- en: The fitted model is used to predict/impute the missing values.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 拟合的模型用于预测/填充缺失值。
- en: 'This is represented in the following code block:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 这在以下代码块中有所体现：
- en: '[PRE25]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'You can print `A` and `imputed_values` to see the difference between them or
    to assess how accurately the values were imputed. The following screenshot shows
    the actual values of column A:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以打印`A`和`imputed_values`，查看它们之间的差异，或评估填充值的准确性。以下截图显示了A列的实际值：
- en: '![](img/bddb164e-43c2-423e-aacf-99917397f62e.png)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bddb164e-43c2-423e-aacf-99917397f62e.png)'
- en: Actual values of column A
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: A列的实际值
- en: 'The following screenshot shows `imputed_values` of column A:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了A列的`imputed_values`：
- en: '![](img/c113b7b4-23c5-4733-b36c-6ae72fa8fe93.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c113b7b4-23c5-4733-b36c-6ae72fa8fe93.png)'
- en: Imputed values of column A
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: A列的填充值
- en: A survey of methods on series
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一项关于序列方法的调查
- en: 'Let''s use the following DataFrame to understand some methods and functions
    that can be used with a series:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我们来使用以下 DataFrame 来了解一些可以与系列一起使用的方法和函数：
- en: '[PRE26]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The following is the output:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '![](img/2408e589-827a-49b0-b191-f7018e0a3c4b.png)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2408e589-827a-49b0-b191-f7018e0a3c4b.png)'
- en: Sample DataFrame—IMDB database
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 DataFrame — IMDB 数据库
- en: The items() method
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`items()` 方法'
- en: 'The `items()` method provides a means of iteratively accessing each row in
    a series or DataFrame. It performs a lazy evaluation to store each value in a
    row, along with the index in the form of a tuple. The results of this lazy evaluation
    can be obtained through an iterative process such as a `for` loop. Let''s apply
    the `items` method on the `Wins` column of the DataFrame:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '`items()` 方法提供了一种迭代访问系列或 DataFrame 中每一行的方式。它采用惰性求值，将每行的值与索引以元组的形式存储。可以通过诸如
    `for` 循环等迭代过程获得这种惰性求值的结果。我们来在 DataFrame 的 `Wins` 列上应用 `items` 方法：'
- en: '[PRE27]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The following is the output:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '![](img/34949d59-83f7-47eb-b1d5-d203718593c0.png)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![](img/34949d59-83f7-47eb-b1d5-d203718593c0.png)'
- en: Looping with the items method
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `items` 方法进行循环
- en: 'The `iteritems()` method behaves in a similar way to the `items()` method:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '`iteritems()` 方法的行为与 `items()` 方法类似：'
- en: '[PRE28]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '![](img/3f362b59-358d-4eb6-b9ff-c4545df8d482.png)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3f362b59-358d-4eb6-b9ff-c4545df8d482.png)'
- en: Looping with the iteritems method
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `iteritems` 方法进行循环
- en: 'The `items` and iteritems methods return a zip type object. We need an iterative
    process to unzip the object. Applying the `items` or `iteritems` methods on a
    DataFrame give different results. In this case, each column is stacked within
    a tuple, along with the column name:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '`items` 和 `iteritems` 方法返回一个 zip 类型的对象。我们需要一个迭代过程来解压这个对象。在 DataFrame 上应用 `items`
    或 `iteritems` 方法会得到不同的结果。在这种情况下，每一列会被堆叠在一个元组中，并带有列名：'
- en: '[PRE29]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The following is the output:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '![](img/d003c701-a757-48e0-aecd-43503c6b8e93.png)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d003c701-a757-48e0-aecd-43503c6b8e93.png)'
- en: Items method used on a DataFrame
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在 DataFrame 上使用 `items` 方法
- en: The keys() method
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`keys()` 方法'
- en: 'When used with a series, the `keys()` method returns the row-labels or index
    of the series and serves the same function it does when accessing the index attribute
    of a DataFrame or series. The `keys()` method shows different behaviors when used
    with a DataFrame and with a series; it returns the column labels when used on
    a DataFrame and the row index when used with a series:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在系列中使用时，`keys()` 方法返回系列的行标签或索引，并且与访问 DataFrame 或系列的索引属性时执行的功能相同。`keys()` 方法在用于
    DataFrame 和系列时表现不同；当用于 DataFrame 时，它返回列标签；而用于系列时，它返回行索引：
- en: '[PRE30]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The pop() method
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`pop()` 方法'
- en: If you are familiar with lists in Python, the `pop()` method will ring a bell.
    The `pop()` method in series and DataFrames behaves exactly the same as it does
    with lists. It helps remove entire columns from DataFrames or specific rows from
    series. Upon being called, the `pop()` method returns the popped out entity (row
    or column).
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你熟悉 Python 中的列表，`pop()` 方法一定会让你有所了解。系列和 DataFrame 中的 `pop()` 方法与列表中的表现完全相同。它帮助我们从
    DataFrame 中移除整列，或者从系列中移除特定行。调用 `pop()` 方法后，它会返回被弹出的实体（行或列）。
- en: 'The following snippet demonstrates the use of `pop()` with a series. Let''s
    pop the item with row index 2 from the `"Wins"` column:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段展示了如何在系列中使用 `pop()`。让我们从 `"Wins"` 列中弹出索引为 2 的项：
- en: '[PRE31]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Now, let''s print the `Wins` series:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们打印 `Wins` 系列：
- en: '![](img/66128494-9754-452d-a267-2cbcc4b59b4d.png)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![](img/66128494-9754-452d-a267-2cbcc4b59b4d.png)'
- en: Output of the `pop` method
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '`pop` 方法的输出'
- en: 'It can be seen that index 2 is no longer present in the series. The same method
    can be applied to a DataFrame as well. Let''s pop the `Nominations` column to
    understand this:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 可以看到，索引 2 在系列中不再存在。同样的方法也可以应用于 DataFrame。让我们弹出 `Nominations` 列来理解这一点：
- en: '[PRE32]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The following is the output:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '![](img/d1860777-0ae1-4fca-b74d-6c3e43359175.png)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d1860777-0ae1-4fca-b74d-6c3e43359175.png)'
- en: Pop applied on the DataFrame
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在 DataFrame 上应用 Pop
- en: 'The following command is used to show the DataFrame result after popping:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令用于显示弹出后的 DataFrame 结果：
- en: '[PRE33]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The following is the output:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '![](img/ec436cc9-02d0-421a-aa6c-90decc73b3c5.png)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ec436cc9-02d0-421a-aa6c-90decc73b3c5.png)'
- en: DataFrame result after popping
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 弹出后的 DataFrame 结果
- en: The apply() method
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`apply()` 方法'
- en: The `apply()` method provides us with a fast and efficient way to apply a function
    to all the values in a series. The function could be a built-in function such
    as a NumPy function or a user-defined function.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '`apply()` 方法为我们提供了一种快速高效的方式，将一个函数应用到系列中的所有值。这个函数可以是一个内置函数，比如 NumPy 函数，也可以是一个用户自定义的函数。'
- en: 'In the following snippet, `apply()` has been used to find the exponential value
    of all the rows in the `Wins` series:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码片段中，`apply()` 被用来计算 `Wins` 序列中所有行的指数值：
- en: '[PRE34]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The following is the output:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '![](img/3a110368-2a66-46b0-b139-dd97bc9e1c89.png)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3a110368-2a66-46b0-b139-dd97bc9e1c89.png)'
- en: Apply method on series
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在序列上使用 Apply 方法
- en: 'You can also define your own function and apply it to a series. Let''s demonstrate
    this with a simple function to divide values by 100:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以定义自己的函数并将其应用于序列。让我们用一个简单的函数演示，将值除以 100：
- en: '[PRE35]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The following is the output:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '![](img/2b499660-15aa-4ca2-bc1a-878a436a8bbd.png)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2b499660-15aa-4ca2-bc1a-878a436a8bbd.png)'
- en: Apply for user-defined functions
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 对用户定义函数应用 Apply 方法
- en: The map() method
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: map() 方法
- en: The `map()` method is similar to the `apply` method as it helps in making elementwise
    changes that have been defined by functions. However, in addition, the `map` function
    also accepts a series or dictionary to define these elementwise changes.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '`map()` 方法类似于 `apply` 方法，因为它有助于进行元素级别的修改，这些修改由函数定义。然而，`map` 函数除了这一点外，还接受一个序列或字典来定义这些元素级别的修改。'
- en: 'Using the map function, let''s change some of the values in the `"Wins"` column:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 map 函数，我们来更改 `"Wins"` 列中的一些值：
- en: '[PRE36]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The following is the output:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '![](img/0205330f-3da8-4262-89cf-070657f823a7.png)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0205330f-3da8-4262-89cf-070657f823a7.png)'
- en: Map method used on a series
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在序列上使用 Map 方法
- en: Values for which the mapping is not defined are replaced with NAs.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 映射未定义的值将被替换为 NAs。
- en: The drop() method
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: drop() 方法
- en: The `drop()` method is another useful method that removes entire rows or columns
    from a DataFrame or a series. Indices can be dropped along any axis – row indices
    can be dropped along axis 0 and column indices can be dropped along axis 1.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '`drop()` 方法是另一个有用的方法，用于删除 DataFrame 或序列中的整行或整列。可以沿任意轴删除索引 —— 行索引可以沿轴 0 删除，列索引可以沿轴
    1 删除。'
- en: 'Let''s drop indices 0 and 2 from the `Wins` series. The indices to be removed
    can be defined through a list. The default setting for the axis is 0, and hence
    no change is needed in this case:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从 `Wins` 序列中删除索引 0 和 2。要删除的索引可以通过列表定义。默认情况下，`axis` 设置为 0，因此在此情况下无需更改：
- en: '[PRE37]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The following is the output:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '![](img/b8a54d51-7aaa-484d-aaac-33d47e826477.png)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b8a54d51-7aaa-484d-aaac-33d47e826477.png)'
- en: Drop method used on a series
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 在序列上使用 Drop 方法
- en: 'As we can see, the result does not have 0 and 2 and indexes. The following
    snippet shows the use of the `drop` method to remove columns from DataFrames:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，结果中没有索引 0 和 2。以下代码片段展示了如何使用 `drop` 方法从 DataFrame 中删除列：
- en: '[PRE38]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The following is the output:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '![](img/72725fd0-1417-4b06-a3b6-10fd33ed57ef.png)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
  zh: '![](img/72725fd0-1417-4b06-a3b6-10fd33ed57ef.png)'
- en: Using the drop method on a DataFrame
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 在 DataFrame 上使用 drop 方法
- en: 'Indices can also be effectively removed when there is multi-level indexing.
    The level parameter of drop helps us do this. Consider the following DataFrame
    with multi-level indexing:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 当存在多级索引时，也可以有效地删除索引。drop 的 `level` 参数可以帮助我们做到这一点。请看以下具有多级索引的 DataFrame：
- en: '![](img/32f81cd2-5039-43cf-87a8-c92ec9a34bde.png)'
  id: totrans-256
  prefs: []
  type: TYPE_IMG
  zh: '![](img/32f81cd2-5039-43cf-87a8-c92ec9a34bde.png)'
- en: Multi-level indexed DataFrame
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 多级索引的 DataFrame
- en: 'To remove a specific movie from the `Movie` column, the `level` parameter should
    be set to 1\. By default, `level` is set to 0\. The following snippet removes
    the movie `Matrix`:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 要从 `Movie` 列中删除特定的电影，`level` 参数应设置为 1。默认情况下，`level` 被设置为 0。以下代码片段移除了电影 `Matrix`：
- en: '[PRE39]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The following is the output:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '![](img/1468418b-8e50-486c-be4d-3ffe2f0d30b9.png)'
  id: totrans-261
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1468418b-8e50-486c-be4d-3ffe2f0d30b9.png)'
- en: Dropping index for a hierarchical index
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 删除层次索引的索引
- en: The equals() method
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: equals() 方法
- en: 'The `equals()` method checks whether two series or DataFrames are equal in
    terms of values, datatype, and shape. The column headers could be of different
    data types. The output is a Boolean. A practical application of this function
    is shown here. Let''s create a new series that we can compare with the existing `sample_df`
    DataFrame:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '`equals()` 方法检查两个序列或 DataFrame 在值、数据类型和形状上是否相等。列标题可以具有不同的数据类型。输出结果是布尔值。此函数的一个实际应用如下所示。让我们创建一个新的序列，并将其与现有的
    `sample_df` DataFrame 进行比较：'
- en: '[PRE40]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: This function can be applied this way to compare two DataFrames or two series
    within the same DataFrame.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数可以这样应用，以比较两个 DataFrame 或同一个 DataFrame 中的两个序列。
- en: The sample() method
  id: totrans-267
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: sample() 方法
- en: The `sample()` method can be used for the random sampling of a DataFrame or
    series. The parameters of the `sample` function support sampling across either
    axis and also sampling with and without replacement. For sampling, either the
    number of records to be sampled or the fraction of records to be sampled must
    be specified.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '`sample()`方法可用于对DataFrame或系列进行随机采样。`sample`函数的参数支持在任意轴上进行采样，并且支持有放回或无放回的采样。进行采样时，必须指定要采样的记录数量或采样的记录比例。'
- en: 'Let''s sample three records from the `Movie` series:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从`Movie`系列中采样三条记录：
- en: '[PRE41]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The following is the output:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/fea04d34-f602-475d-a39e-890c0d470872.png)'
  id: totrans-272
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fea04d34-f602-475d-a39e-890c0d470872.png)'
- en: Sample function for series
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 适用于系列的`sample`函数
- en: 'Now, let''s sample 50% of the columns from the DataFrame:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们从DataFrame中随机采样50%的列：
- en: '[PRE42]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The following is the output:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/82cefaaf-9cfe-484e-b4fe-d8912594c8bb.png)'
  id: totrans-277
  prefs: []
  type: TYPE_IMG
  zh: '![](img/82cefaaf-9cfe-484e-b4fe-d8912594c8bb.png)'
- en: Column sampling with the fraction parameter
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 带有`fraction`参数的列采样
- en: The replace parameter can be set to `True` or `False` so that we can sample
    with or without replacement; the default is `False`. The random state parameter
    helps in setting the seed of the random number generator and it depends on the
    `Random` module of the NumPy package.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '`replace`参数可以设置为`True`或`False`，从而可以选择是否进行有放回采样；默认值为`False`。`random_state`参数有助于设置随机数生成器的种子，它依赖于NumPy包的`Random`模块。'
- en: The ravel() function
  id: totrans-280
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`ravel()`函数'
- en: 'The `ravel()` function flattens out a series into a one-dimensional array.
    It is fundamentally similar to the `numpy.ravel` function. The `ravel` function
    cannot be applied on DataFrames:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '`ravel()`函数将一系列数据展平为一维数组。它与`numpy.ravel`函数本质相似。`ravel`函数不能应用于DataFrame：'
- en: '[PRE43]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The value_counts() function
  id: totrans-283
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`value_counts()`函数'
- en: 'The `value_counts()` function works only on series, and not DataFrames. It
    counts the number of times each variable occurs and provides a frequency table-like
    output:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '`value_counts()`函数仅适用于系列，而不适用于DataFrame。它统计每个变量出现的次数，并提供类似频率表的输出：'
- en: '[PRE44]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The following is the output:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/759c18ec-05a9-4b26-a066-66e28e74ef3e.png)'
  id: totrans-287
  prefs: []
  type: TYPE_IMG
  zh: '![](img/759c18ec-05a9-4b26-a066-66e28e74ef3e.png)'
- en: Frequency count for categorical series
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 类别系列的频次统计
- en: 'The `value_counts()` function can also be applied to a numeric column. It results
    in a count of each time a value occurs:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '`value_counts()`函数也可以应用于数值列。它将统计每个值出现的次数：'
- en: '[PRE45]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The following is the output:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/f3e40a26-c972-46de-a42d-f8c951490c7a.png)'
  id: totrans-292
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f3e40a26-c972-46de-a42d-f8c951490c7a.png)'
- en: The value_counts function used on the numeric column
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 在数值列上使用的`value_counts`函数
- en: 'It is more useful to count the occurrence of numeric values within the range
    of bins. The `bins` parameter of `value_counts` groups data into bins before counting:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 统计数值在分箱范围内的出现更为有用。`value_counts`的`bins`参数会在统计前将数据分成不同的箱：
- en: '[PRE46]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'The following is the output:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/9842f0d0-801d-4955-84f6-b835d8541e0a.png)'
  id: totrans-297
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9842f0d0-801d-4955-84f6-b835d8541e0a.png)'
- en: The `value_counts` function with binning for the `numeric` columns
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '`value_counts`函数用于对`numeric`列进行分箱统计'
- en: The interpolate() function
  id: totrans-299
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`interpolate()`函数'
- en: The `interpolate()` function provides an efficient way to handle missing data.
    Through this method, the NaNs can be replaced with a value through linear interpolation
    or polynomial interpolation, or even simple padding. This function fits the series
    to a function such as a `spline` or `quadratic` and then computes the possible
    missing data.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '`interpolate()`函数提供了一种有效处理缺失数据的方法。通过此方法，NaN值可以通过线性插值、多项式插值或简单的填充进行替换。该函数将系列拟合到如`spline`或`quadratic`等函数上，然后计算可能缺失的数据。'
- en: 'Consider the following series:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下系列：
- en: '[PRE47]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Since the values are all equally spaced apart, linear interpolation is the
    most suitable method here. Linear interpolation is the default value of the `method`
    parameter of the `interpolate` function:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 由于值是均匀分布的，因此线性插值是最合适的方法。线性插值是`interpolate`函数中`method`参数的默认值：
- en: '[PRE48]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'The following is the output:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/98d37fb5-735c-43ed-948d-df9a1ce1c368.png)'
  id: totrans-306
  prefs: []
  type: TYPE_IMG
  zh: '![](img/98d37fb5-735c-43ed-948d-df9a1ce1c368.png)'
- en: Linear interpolation
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 线性插值
- en: 'The direction in which interpolation should take place can be specified. Let''s
    consider the preceding example and fill in the NaNs through backward padding,
    as shown here:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 可以指定插值应进行的方向。让我们考虑前面的例子，并通过后向填充来填充NaN，如下所示：
- en: '[PRE49]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'The following is the output:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/9aad3f3b-5bf7-4648-a650-3397a5b7558d.png)'
  id: totrans-311
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9aad3f3b-5bf7-4648-a650-3397a5b7558d.png)'
- en: Backward interpolation with padding
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 带填充的反向插值
- en: The align() function
  id: totrans-313
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`align()` 函数'
- en: 'The `align()` function takes two objects, reindexes both objects based on a
    `join` condition (inner, outer, and so on), and returns a tuple with both objects:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '`align()` 函数接受两个对象，基于 `join` 条件（如内连接、外连接等）重新索引两个对象，并返回一个包含两个对象的元组：'
- en: '[PRE50]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'The following is the output:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/86de389c-c622-497e-a162-44dd849e1bde.png)'
  id: totrans-317
  prefs: []
  type: TYPE_IMG
  zh: '![](img/86de389c-c622-497e-a162-44dd849e1bde.png)'
- en: Align with outer join
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 使用外连接对齐
- en: 'Since the alignment was based on an outer join, the indexes that were found
    in both series are found in the output. For an inner join, only the common indexes
    are returned, such as `a`, `b`, and `d`:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 由于对齐是基于外连接的，因此输出中显示了在两个系列中找到的索引。对于内连接，只有公共的索引会被返回，如 `a`、`b` 和 `d`：
- en: '[PRE51]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'The following is the output:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/28fdb72a-bc1b-42fa-82fe-d7f57ef14414.png)'
  id: totrans-322
  prefs: []
  type: TYPE_IMG
  zh: '![](img/28fdb72a-bc1b-42fa-82fe-d7f57ef14414.png)'
- en: Align with inner join
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 使用内连接对齐
- en: pandas string methods
  id: totrans-324
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pandas 字符串方法
- en: This section talks about the pandas string methods. These methods are useful
    when dealing with messy text data. These methods clean the text data, structure
    it, segment it, and search important chunks of it. Let's look into these methods
    and find out what each of them contains.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 本节讨论了 pandas 字符串方法。这些方法在处理混乱的文本数据时非常有用。它们可以清理文本数据、结构化数据、分割数据并搜索其中的重要部分。让我们了解这些方法，并找出它们各自包含的功能。
- en: upper(), lower(), capitalize(), title(), and swapcase()
  id: totrans-326
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`upper()`、`lower()`、`capitalize()`、`title()` 和 `swapcase()`'
- en: 'String methods such as `upper()`, `lower()`, `capitalize()`, `title()`, and
    `swapcase()` help when we wish to convert all the string elements into an entire
    series. The `upper` and `lower` methods convert the entire string into uppercase
    or lowercase. The following command shows converting a series into uppercase:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串方法如 `upper()`、`lower()`、`capitalize()`、`title()` 和 `swapcase()` 在我们希望将所有字符串元素转换为整个系列时非常有用。`upper`
    和 `lower` 方法将整个字符串转换为大写或小写。以下命令展示了将一系列数据转换为大写字母：
- en: '[PRE52]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'The following is the output:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/0b9dabc7-2a14-4708-885f-6f00ca566f9e.png)'
  id: totrans-330
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0b9dabc7-2a14-4708-885f-6f00ca566f9e.png)'
- en: Converting a series into uppercase
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 将系列数据转换为大写字母
- en: 'The following command shows converting a series into lowercase:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令展示了将一系列数据转换为小写字母：
- en: '[PRE53]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'The following is the output:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/7a6c0566-ef4d-45e6-9654-14653dc46d68.png)'
  id: totrans-335
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7a6c0566-ef4d-45e6-9654-14653dc46d68.png)'
- en: Converting a series into lowercase
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 将系列数据转换为小写字母
- en: 'The `capitalize()` method converts the first letter into uppercase and the
    rest into lowercase:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: '`capitalize()` 方法将第一个字母转换为大写，其他字母转换为小写：'
- en: '[PRE54]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The following is the output:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/b6f4fe24-6945-45d6-83b1-5fd4892e579c.png)'
  id: totrans-340
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b6f4fe24-6945-45d6-83b1-5fd4892e579c.png)'
- en: Capitalize function for a series
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 针对系列数据的 Capitalize 函数
- en: 'The `title()` method ensures that the first letter of each word of a string
    is capitalized while the rest are in lowercase:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '`title()` 方法确保字符串中的每个单词的首字母大写，其余字母小写：'
- en: '[PRE55]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '![](img/f01cafb0-1108-49d1-a12b-8ae89b43c19f.png)'
  id: totrans-344
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f01cafb0-1108-49d1-a12b-8ae89b43c19f.png)'
- en: Title case conversion for a string
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串的标题大小写转换
- en: 'The `swapcase()` method switches uppercase to lowercase and vice versa:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '`swapcase()` 方法将大写字母转换为小写字母，反之亦然：'
- en: '[PRE56]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'The following is the output:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/b903886d-a9fb-44b6-be72-9bdcebd6604c.png)'
  id: totrans-349
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b903886d-a9fb-44b6-be72-9bdcebd6604c.png)'
- en: The swapcase() function
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '`swapcase()` 函数'
- en: contains(), find(), and replace()
  id: totrans-351
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`contains()`、`find()` 和 `replace()`'
- en: 'The `contains()` method returns checks for the presence of a substring or pattern
    in all the elements of the series and returns a series of Booleans:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: '`contains()` 方法检查子串或模式是否存在于系列的所有元素中，并返回一个布尔值系列：'
- en: '[PRE57]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'The following is the output:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/0f2b731d-58e5-4d89-9c05-b9910c482099.png)'
  id: totrans-355
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0f2b731d-58e5-4d89-9c05-b9910c482099.png)'
- en: Contains function for string type series
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 针对字符串类型系列的 Contains 函数
- en: 'Since `Matrix` is the only movie that contains the `atr` substring, `True`
    is returned at index `2`. The substring can also be a regex pattern. To use a
    regex pattern for string matching, the `regex` parameter should be set to `True`.
    For example, let''s identify a string that contains either `atr` or `der`:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `Matrix` 是唯一包含 `atr` 子串的电影，`True` 被返回在索引 `2` 处。子串也可以是正则表达式模式。要使用正则表达式模式进行字符串匹配，应将
    `regex` 参数设置为 `True`。例如，我们可以查找包含 `atr` 或 `der` 的字符串：
- en: '[PRE58]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'The following is the output:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/e456ffe7-21e8-45c0-9424-0efad202619a.png)'
  id: totrans-360
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e456ffe7-21e8-45c0-9424-0efad202619a.png)'
- en: Contains function with a regex
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 使用正则表达式的 Contains 函数
- en: 'As we can see, two matches have been identified. Setting the `case` parameter
    to `True` ensures case sensitivity when pattern matching is executed:'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，已经识别出两个匹配项。将`case`参数设置为`True`可以确保在模式匹配执行时区分大小写：
- en: '[PRE59]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'The following is the output:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/8c8e55b7-5c27-4c1a-901c-6a1b826b8ed2.png)'
  id: totrans-365
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8c8e55b7-5c27-4c1a-901c-6a1b826b8ed2.png)'
- en: Handling case sensitivity in the contains function
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 在`contains`函数中处理大小写敏感性
- en: 'The `flags` parameter can be used to indicate any regex condition, such as
    ignoring case:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: '`flags`参数可用于指定任何正则表达式条件，例如忽略大小写：'
- en: '[PRE60]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'The following is the output:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/586354c1-6d40-42c6-b8df-4a1f8381bb74.png)'
  id: totrans-370
  prefs: []
  type: TYPE_IMG
  zh: '![](img/586354c1-6d40-42c6-b8df-4a1f8381bb74.png)'
- en: Regex flags for the contains function
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: '`contains`函数的正则表达式标志'
- en: Note that the `re` package should be imported before defining any regex flags.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在定义任何正则表达式标志之前，应先导入`re`包。
- en: 'The `find` function returns the lowest index at which the substring could be
    found. Consider the following series:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: '`find`函数返回可以找到子字符串的最小索引位置。考虑以下系列：'
- en: '[PRE61]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Let''s use the `find` function to get the index of the `ra` substring from
    the previous series:'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`find`函数从之前的系列中获取`ra`子字符串的索引：
- en: '[PRE62]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'The following is the output:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/a0742189-4baa-4254-8bec-5d12b1812173.png)'
  id: totrans-378
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a0742189-4baa-4254-8bec-5d12b1812173.png)'
- en: Find function for a series
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 一系列的`find`函数
- en: In the first element, `abracadabra`, the first occurrence of `ra` was at index
    position `2`. Hence, `2` is returned. The second element, `mad man`, did not show
    a string match, and so `-1` is returned.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个元素`abracadabra`中，`ra`的第一次出现位于索引位置`2`。因此，返回`2`。第二个元素`mad man`没有找到匹配的字符串，因此返回`-1`。
- en: 'The `find` function has a `start` parameter that can be used to specify the
    left-most index to begin the search from. Equivalently, there is an `end` parameter
    to define the right-most index until which search is permissible. `start` is set
    to `0` and `end` is set to `None` by default:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: '`find`函数有一个`start`参数，可以用来指定从哪个最左侧的索引开始查找。相应地，还存在一个`end`参数，用于定义查找允许的最右侧索引。默认情况下，`start`设置为`0`，`end`设置为`None`：'
- en: '[PRE63]'
  id: totrans-382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'The following is the output:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/3b73f4b6-4b63-4103-a142-1dc0c7cb15f1.png)'
  id: totrans-384
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3b73f4b6-4b63-4103-a142-1dc0c7cb15f1.png)'
- en: The find function with a start limit specified
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 指定了起始限制的`find`函数
- en: In the preceding example, we can see that by specifying the starting index,
    `a`, index 0 and 1 are ignored.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们可以看到，通过指定起始索引`a`，索引0和1被忽略。
- en: 'The `replace` function can be considered as an extension of the `contains`
    function since most of the parameters are similar. Functionally, `replace` finds
    a substring within a string in a series and substitutes it with a replacement
    string. Parameters such as `flags`, `case`, and `regex`, which are found in the
    `contains` function, are also found here, and they serve the same purpose. Let''s
    replace the letter `I` in the series with the `rep` substring:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: '`replace`函数可以被视为`contains`函数的扩展，因为大多数参数是相似的。从功能上讲，`replace`在一系列字符串中查找子字符串并用替换字符串替换它。`contains`函数中也有的参数，如`flags`、`case`和`regex`，在这里也会出现，作用是相同的。让我们用`rep`子字符串替换系列中的字母`I`：'
- en: '[PRE64]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'The following is the output:'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/f5211976-e7e0-45de-95ca-43394c185071.png)'
  id: totrans-390
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f5211976-e7e0-45de-95ca-43394c185071.png)'
- en: The replace function for a series
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 一系列的`replace`函数
- en: 'Note that in cases where there is more than one occurrence of `i`, multiple
    replacements are made. The number of replacements can be controlled with the `n`
    parameter:'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果`i`出现多次，则会进行多次替换。可以使用`n`参数控制替换的次数：
- en: '[PRE65]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'The following is the output:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/36a7d778-1b44-45fc-b53d-3addc6672878.png)'
  id: totrans-395
  prefs: []
  type: TYPE_IMG
  zh: '![](img/36a7d778-1b44-45fc-b53d-3addc6672878.png)'
- en: The replace function with the number of replacements specified
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 带有指定替换次数的`replace`函数
- en: strip() and split()
  id: totrans-397
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`strip()`和`split()`'
- en: 'The `strip()` function can come in quite handy in data cleaning. It removes trailing
    whitespaces or any specific pattern of a string from textual content in series.
    If the substring to be removed is not specified, trailing whitespaces are trimmed
    by default. The following example demonstrates an application of the `strip` function
    with stray whitespaces:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: '`strip()`函数在数据清理中非常有用。它可以从系列中的文本内容中删除尾部空格或任何特定的字符串模式。如果要删除的子字符串未指定，则默认会删除尾部空格。以下示例演示了`strip`函数在清理多余空格时的应用：'
- en: '[PRE66]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'The following is the output:'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/186be31b-2115-435c-b8b6-be4df7f46122.png)'
  id: totrans-401
  prefs: []
  type: TYPE_IMG
  zh: '![](img/186be31b-2115-435c-b8b6-be4df7f46122.png)'
- en: Series with stray whitespaces
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 含有多余空格的系列
- en: 'The following example demonstrates an application of the `strip()` function
    with trailing whitespaces:'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例演示了 `strip()` 函数在尾部空格中的应用：
- en: '[PRE67]'
  id: totrans-404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'The following is the output:'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/15fe8b2f-58ec-438a-9493-0efb5efa0b7f.png)'
  id: totrans-406
  prefs: []
  type: TYPE_IMG
  zh: '![](img/15fe8b2f-58ec-438a-9493-0efb5efa0b7f.png)'
- en: Stripping trailing whitespaces
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 去除尾部空格
- en: 'This shows that `strip()` only removes trailing whitespaces and not those in
    the middle. Now, let''s use `strip()` to remove a specific string:'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 这表明 `strip()` 仅移除尾部的空格，而不会移除中间的空格。现在，让我们使用 `strip()` 来移除特定字符串：
- en: '[PRE68]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'The following is the output:'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/dce382c0-e1fc-43c0-9010-d1c7a7476dca.png)'
  id: totrans-411
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dce382c0-e1fc-43c0-9010-d1c7a7476dca.png)'
- en: The strip function for removing string sequences
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 用于移除字符串序列的 `strip` 函数
- en: In the preceding example, the `strip()` function strips out any of the characters
    of the substring found in the trailing ends of the series elements.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，`strip()` 函数移除了系列元素尾部中的任何子字符串字符。
- en: 'The `split()` function splits a string at specified delimiters. Consider the
    following series:'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: '`split()` 函数按指定的分隔符拆分字符串。考虑以下系列：'
- en: '[PRE69]'
  id: totrans-415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'The following is the output:'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/da181a01-a186-4737-9cca-ebed82dc3187.png)'
  id: totrans-417
  prefs: []
  type: TYPE_IMG
  zh: '![](img/da181a01-a186-4737-9cca-ebed82dc3187.png)'
- en: Sample series for the split function
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 拆分函数的示例系列
- en: 'Each element has two to three items separated by `,`. Let''s use this as a
    delimiter to separate the items stacked together in each row of the series:'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 每个元素有两到三个项目，用 `,` 分隔。让我们用这个作为分隔符，将堆叠在每行中的项目分开：
- en: '[PRE70]'
  id: totrans-420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'The following is the output:'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/f1ea22bf-0079-4ed2-81c5-22142aec804e.png)'
  id: totrans-422
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f1ea22bf-0079-4ed2-81c5-22142aec804e.png)'
- en: Splitting as a list
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 作为列表拆分
- en: 'The result is a list of items in each row. The `expand()` parameter creates
    a separate column for each item. By default, `expand` is set to `False`, which
    leads to a list being created in each row:'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是每行的项目列表。`expand()` 参数为每个项目创建一个单独的列。默认情况下，`expand` 设置为 `False`，这会导致在每行中创建一个列表：
- en: '[PRE71]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'The following is the output:'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/393771c4-bae4-4575-9dbd-18f85f9fd98e.png)'
  id: totrans-427
  prefs: []
  type: TYPE_IMG
  zh: '![](img/393771c4-bae4-4575-9dbd-18f85f9fd98e.png)'
- en: Splitting multiple columns
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 拆分多个列
- en: startswith() and endswith()
  id: totrans-429
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`startswith()` 和 `endswith()`'
- en: 'While the `contains()` function helps evaluate whether a substring is present
    in each element of a series, the `startswith()` and `endswith()` functions specifically
    look for the presence of the substring at the start and the end of strings, respectively:'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 `contains()` 函数帮助评估子字符串是否出现在系列的每个元素中，`startswith()` 和 `endswith()` 函数则分别专门检查子字符串是否出现在字符串的开始和结束位置：
- en: '[PRE72]'
  id: totrans-431
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'The following is the output:'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/a633eb2e-d188-47f8-bfcb-056411e9d359.png)'
  id: totrans-433
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a633eb2e-d188-47f8-bfcb-056411e9d359.png)'
- en: The `startswith` function
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: '`startswith` 函数'
- en: 'Similarly, `endswith` can be used as shown here:'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，`endswith` 可以像这样使用：
- en: '[PRE73]'
  id: totrans-436
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'The following is the output:'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/4aaa09de-958c-4e09-b9cc-45a1fcf07d65.png)'
  id: totrans-438
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaa09de-958c-4e09-b9cc-45a1fcf07d65.png)'
- en: The `endswith` function
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: '`endswith` 函数'
- en: However, unlike `contains()`, these functions do not accept regular expressions.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，与 `contains()` 不同，这些函数不接受正则表达式。
- en: The is...() functions
  id: totrans-441
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 各种 is...() 函数
- en: 'The following table lists a group of functions that help ascertain other properties
    of the string elements of a series. For example, the `isupper` function returns
    `True` if all the characters of a string are in uppercase. These functions return
    a Boolean output corresponding to each row in the series:'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格列出了帮助确认系列字符串元素其他属性的一组函数。例如，`isupper` 函数如果字符串中的所有字符都是大写字母，则返回 `True`。这些函数会返回与系列中每行对应的布尔值输出：
- en: '| **Function** | **Returns true when all characters are...** |'
  id: totrans-443
  prefs: []
  type: TYPE_TB
  zh: '| **函数** | **当所有字符为...时返回真** |'
- en: '| `isalnum()` | Alphanumeric |'
  id: totrans-444
  prefs: []
  type: TYPE_TB
  zh: '| `isalnum()` | 字母数字 |'
- en: '| `isalpha()` | Alphabetic |'
  id: totrans-445
  prefs: []
  type: TYPE_TB
  zh: '| `isalpha()` | 字母 |'
- en: '| `isdigit()` | Digits |'
  id: totrans-446
  prefs: []
  type: TYPE_TB
  zh: '| `isdigit()` | 数字字符 |'
- en: '| `isspace()` | Whitespace |'
  id: totrans-447
  prefs: []
  type: TYPE_TB
  zh: '| `isspace()` | 空白字符 |'
- en: '| `islower()` | Lowercase |'
  id: totrans-448
  prefs: []
  type: TYPE_TB
  zh: '| `islower()` | 小写字母 |'
- en: '| `isupper()` | Uppercase |'
  id: totrans-449
  prefs: []
  type: TYPE_TB
  zh: '| `isupper()` | 大写字母 |'
- en: '| `istitle()` | Title case |'
  id: totrans-450
  prefs: []
  type: TYPE_TB
  zh: '| `istitle()` | 标题大小写 |'
- en: '| `isnumeric()` | Numeric |'
  id: totrans-451
  prefs: []
  type: TYPE_TB
  zh: '| `isnumeric()` | 数字 |'
- en: '| `isdecimal()` | Decimal |'
  id: totrans-452
  prefs: []
  type: TYPE_TB
  zh: '| `isdecimal()` | 十进制 |'
- en: 'Some examples of the preceding functions are as follows:'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前述函数的一些示例：
- en: '[PRE74]'
  id: totrans-454
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'The following is the output:'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/13c6abee-f0e4-47c1-b37a-5bb31f029f60.png)'
  id: totrans-456
  prefs: []
  type: TYPE_IMG
  zh: '![](img/13c6abee-f0e4-47c1-b37a-5bb31f029f60.png)'
- en: The isalpha function
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: '`isalpha` 函数'
- en: 'This is a example of the `isalnum` function:'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 `isalnum` 函数的示例：
- en: '[PRE75]'
  id: totrans-459
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'The following is the output:'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/bd5ae6ea-6396-47a9-8c64-4b78be246383.png)'
  id: totrans-461
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bd5ae6ea-6396-47a9-8c64-4b78be246383.png)'
- en: The isalnum function
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: '`isalnum` 函数'
- en: 'This is an example of the `isnumeric` function:'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`isnumeric`函数的示例：
- en: '[PRE76]'
  id: totrans-464
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'The following is the output:'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/4e397795-5ed4-4686-ac0a-36040579326b.png)'
  id: totrans-466
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4e397795-5ed4-4686-ac0a-36040579326b.png)'
- en: The isnumeric function
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: isnumeric函数
- en: These functions are only applicable to strings and not to other data types.
    Using these with other data types results in `NaN` being returned.
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数仅适用于字符串，不能应用于其他数据类型。与其他数据类型一起使用时，会返回`NaN`。
- en: 'The following is an example of the `isdigit()` function:'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`isdigit()`函数的示例：
- en: '[PRE77]'
  id: totrans-470
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'The following is the output:'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/b19fc19a-9970-49cc-86b0-5c2c41a919ec.png)'
  id: totrans-472
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b19fc19a-9970-49cc-86b0-5c2c41a919ec.png)'
- en: The isdigit function
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: isdigit函数
- en: Binary operations on DataFrames and series
  id: totrans-474
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对数据框和系列进行的二元操作
- en: Some binary functions such as, `add`, `sub`, `mul`, `div`, `mod`, and `pow`,
    perform common arithmetic operations involving two DataFrames or series.
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 一些二元函数，如`add`、`sub`、`mul`、`div`、`mod`和`pow`，执行涉及两个数据框或系列的常见算术运算。
- en: 'The following example shows the addition of two DataFrames. One of the DataFrames
    has the shape (2,3) while the other has the shape (1,3). The add function performs
    an elementwise addition. When a corresponding element is missing in any of the
    DataFrames, the missing values are filled with NaNs:'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例展示了两个数据框的加法。一个数据框的形状是(2,3)，另一个的形状是(1,3)。`add`函数执行逐元素加法。当某个数据框中缺少对应的元素时，缺失的值会被填充为NaN：
- en: '[PRE78]'
  id: totrans-477
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'The following is the output:'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/d0659c30-48e4-4d2e-835d-7c5f104164d9.png)'
  id: totrans-479
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d0659c30-48e4-4d2e-835d-7c5f104164d9.png)'
- en: Adding two DataFrames elementwise
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 对两个数据框进行逐元素相加
- en: 'Instead of using NaNs, we can choose to fill it with any value using the `fill_value`
    argument. Let''s explore this through the `mul` function for multiplication:'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以选择使用`fill_value`参数来填充NaN，而不是直接使用NaN。让我们通过`mul`函数进行乘法来探索这一点：
- en: '[PRE79]'
  id: totrans-482
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'The following is the output:'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/476387db-1077-4054-94bd-caf32aaf0cee.png)'
  id: totrans-484
  prefs: []
  type: TYPE_IMG
  zh: '![](img/476387db-1077-4054-94bd-caf32aaf0cee.png)'
- en: The fill_value parameter in binary operators in pandas
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: pandas中二元操作符的`fill_value`参数
- en: 'The second value that''s used for the arithmetic operation doesn''t necessarily
    need be a DataFrame or series; it can also be a scalar, as shown here:'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 用于算术运算的第二个值不一定需要是数据框或系列；它也可以是标量，如下所示：
- en: '[PRE80]'
  id: totrans-487
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'The following is the output:'
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/1ee09dee-6899-4ac0-90a6-777ffb3425a3.png)'
  id: totrans-489
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1ee09dee-6899-4ac0-90a6-777ffb3425a3.png)'
- en: Binary operation with a scalar
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: 与标量的二元操作
- en: 'In the preceding cases, the two DataFrames were uniformly indexed. Elements
    are compatible for operations that are across the same index labels:'
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，两个数据框是统一索引的。元素可以在相同的索引标签下进行操作：
- en: '[PRE81]'
  id: totrans-492
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'The following is the output:'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/f43c4c20-d308-4435-9854-8d21f9d05f6e.png)'
  id: totrans-494
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f43c4c20-d308-4435-9854-8d21f9d05f6e.png)'
- en: Binary operations being used on a series with different indexes
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 对具有不同索引的系列进行的二元操作
- en: 'For indexes that aren''t in both series, `NaN` is returned. Similar behavior
    will be seen with respect to column labels. Only elements sharing a similar column
    name can be used together. This is shown in the following code:'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 对于在两个系列中不存在的索引，返回`NaN`。在列标签方面也会表现出类似的行为。只有共享相同列名的元素才能一起使用。以下代码演示了这一点：
- en: '[PRE82]'
  id: totrans-497
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'The following is the output:'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/55468323-1ca2-43e2-8b9f-fbd0f11f3d64.png)'
  id: totrans-499
  prefs: []
  type: TYPE_IMG
  zh: '![](img/55468323-1ca2-43e2-8b9f-fbd0f11f3d64.png)'
- en: Binary operations used on DataFrames with different columns
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 对具有不同列的数据框进行的二元操作
- en: 'Now, consider the following two DataFrames, one of which shows hierarchical
    indexing:'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，考虑以下两个数据框，其中一个显示了层次索引：
- en: '[PRE83]'
  id: totrans-502
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'The following is the output:'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/20cd2e42-4df4-452e-97a1-9ecc541b3622.png)'
  id: totrans-504
  prefs: []
  type: TYPE_IMG
  zh: '![](img/20cd2e42-4df4-452e-97a1-9ecc541b3622.png)'
- en: Sample DataFrame
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 示例数据框
- en: 'The following code block is an example of a multi-indexed DataFrame:'
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码块是多重索引数据框的示例：
- en: '[PRE84]'
  id: totrans-507
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'The following is the output:'
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/efe5edcf-5c00-40b8-a2e8-749eef7f518f.png)'
  id: totrans-509
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efe5edcf-5c00-40b8-a2e8-749eef7f518f.png)'
- en: Multi-indexed DataFrame
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 多重索引数据框
- en: 'To divide `df` by the elements of `df_multi`, or to perform any of the aforementioned
    binary operations, the level parameter can be used to specify the `level` of the
    index that is shared by both DataFrames:'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: 要将`df`除以`df_multi`的元素，或执行任何前述的二元操作，可以使用`level`参数来指定两个数据框共享的索引级别：
- en: '[PRE85]'
  id: totrans-512
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'The following is the output:'
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/7d1431ec-4b7c-4688-b749-7849b158a1f4.png)'
  id: totrans-514
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7d1431ec-4b7c-4688-b749-7849b158a1f4.png)'
- en: Binary operations used for DataFrames with a hierarchical index
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 对具有层次索引的数据框使用的二元操作
- en: 'The `lt`, `le`, `gt`, and `ge` functions help with DataFrame comparisons by
    establishing the truth of *less than*, *less than or equal to*, *greater than*,
    and *greater than or equal to* comparisons. They have the same parameters as the
    functions we discussed previously and show similar behaviors in all those scenarios.
    Let''s compare `df` and `df_multi`:'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: '`lt`、`le`、`gt`和`ge`函数通过建立“小于”、“小于或等于”、“大于”和“大于或等于”比较，帮助DataFrame进行比较。它们具有与我们之前讨论的函数相同的参数，并在所有这些场景中显示出类似的行为。我们来比较`df`和`df_multi`：'
- en: '[PRE86]'
  id: totrans-517
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'The following is the output:'
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '![](img/d80bc522-99b0-43cf-bd6d-33c6aa2bef61.png)'
  id: totrans-519
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d80bc522-99b0-43cf-bd6d-33c6aa2bef61.png)'
- en: Less than function
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: 小于函数
- en: 'The following code block shows the `le` function:'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码块展示了`le`函数：
- en: '[PRE87]'
  id: totrans-522
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'The following is the output:'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '![](img/8f0460c6-9f7e-4709-8a67-1f283920e2bf.png)'
  id: totrans-524
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8f0460c6-9f7e-4709-8a67-1f283920e2bf.png)'
- en: Less than or equal to function
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 小于或等于函数
- en: 'The `round` function rounds decimals to the desired number of places, as specified
    by the `decimals` parameter:'
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: '`round`函数根据`decimals`参数指定的小数位数四舍五入：'
- en: '[PRE88]'
  id: totrans-527
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'The following is the output:'
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '![](img/88f9bee5-8b96-40fa-8eff-d4793c1818e9.png)'
  id: totrans-529
  prefs: []
  type: TYPE_IMG
  zh: '![](img/88f9bee5-8b96-40fa-8eff-d4793c1818e9.png)'
- en: The round function
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: '`round`函数'
- en: 'By default, rounding off takes place to make the input a whole number (`decimals
    = 0`):'
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，会进行四舍五入操作，将输入值变成整数（`decimals = 0`）：
- en: '[PRE89]'
  id: totrans-532
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'The following is the output:'
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '![](img/7a6e2ed8-144a-41c1-96e0-0641ebe00fa9.png)'
  id: totrans-534
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7a6e2ed8-144a-41c1-96e0-0641ebe00fa9.png)'
- en: The round function with a number of places set
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: 设置小数位数的`round`函数
- en: 'The `combine` function takes two overlapping DataFrames and executes the function
    defined within them. Let''s combine two series and find the maximum of the two.
    Note that a comparison takes place, with the index as a reference:'
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: '`combine`函数接受两个重叠的DataFrame并执行其中定义的函数。我们来合并两个序列并找到两者的最大值。注意，这里进行的是一个比较，以索引为参考：'
- en: '[PRE90]'
  id: totrans-537
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'The following is the output:'
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '![](img/99c8ea57-7ad6-4044-b7a1-188fff0b269d.png)'
  id: totrans-539
  prefs: []
  type: TYPE_IMG
  zh: '![](img/99c8ea57-7ad6-4044-b7a1-188fff0b269d.png)'
- en: The combine function
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: '`combine`函数'
- en: Binning values
  id: totrans-541
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分箱值
- en: 'The pandas `cut()` function bins values in a 1-dimensional array. Consider
    the following 1-dimensional array with 10 values. Let''s group it into three bins:'
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: pandas `cut()`函数将值分箱到一个一维数组中。考虑以下包含10个值的一维数组。我们将其分为三个区间：
- en: '[PRE91]'
  id: totrans-543
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'The following is the output:'
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '![](img/75641e12-5a07-462d-8231-ff5fef914d71.png)'
  id: totrans-545
  prefs: []
  type: TYPE_IMG
  zh: '![](img/75641e12-5a07-462d-8231-ff5fef914d71.png)'
- en: pandas cut function with three bins
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: pandas `cut`函数与三个区间
- en: 'Each of the 10 elements is mapped to one of the three bins. The `cut` function
    maps the items to a bin and provides information about each bin. Instead of specifying
    the number of bins, the boundaries of the bins could also be provided in a sequence:'
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: 这10个元素中的每个都映射到三个区间中的一个。`cut`函数将元素映射到一个区间，并提供每个区间的信息。除了指定区间数之外，还可以通过序列提供区间的边界：
- en: '[PRE92]'
  id: totrans-548
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'The following is the output:'
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '![](img/600f7098-daa5-42e6-930a-c5eb88b32d15.png)'
  id: totrans-550
  prefs: []
  type: TYPE_IMG
  zh: '![](img/600f7098-daa5-42e6-930a-c5eb88b32d15.png)'
- en: pandas cut function with bin values
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: pandas `cut`函数与区间值
- en: 'The intervals for binning can be directly defined using the pandas `interval_range`
    function. Consider the following example, demonstrating the creation of a pandas
    `IntervalIndex` object:'
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: 通过pandas的`interval_range`函数，可以直接定义分箱的区间。考虑以下示例，演示如何创建pandas的`IntervalIndex`对象：
- en: '[PRE93]'
  id: totrans-553
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'The following is the output:'
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '![](img/bd09961d-6c76-4904-8e4a-2aced11cb297.png)'
  id: totrans-555
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bd09961d-6c76-4904-8e4a-2aced11cb297.png)'
- en: pandas IntervalIndex
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: pandas `IntervalIndex`
- en: 'This interval can be directly passed to the `cut` function:'
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: 这个区间可以直接传递给`cut`函数：
- en: '[PRE94]'
  id: totrans-558
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'The following is the output:'
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '![](img/04a60603-87d5-401d-91e3-86e26339ebf9.png)'
  id: totrans-560
  prefs: []
  type: TYPE_IMG
  zh: '![](img/04a60603-87d5-401d-91e3-86e26339ebf9.png)'
- en: pandas cut function with the interval index
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: pandas `cut`函数与区间索引
- en: 'Setting the `right` parameter to `True` includes the right interval in the
    bin, while setting the `right` parameter to `False` excludes it from the bin range.
    The default setting is `True`:'
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: 设置`right`参数为`True`表示包括右区间，设置为`False`表示排除右区间。默认设置为`True`：
- en: '[PRE95]'
  id: totrans-563
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'The following is the output:'
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '![](img/62348564-86f6-414e-8434-54a16ef80c9e.png)'
  id: totrans-565
  prefs: []
  type: TYPE_IMG
  zh: '![](img/62348564-86f6-414e-8434-54a16ef80c9e.png)'
- en: Open right interval
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: 开区间
- en: 'Equivalently, the `include_lowest` parameter decides whether the lowest interval
    should be included. By default, it is set to `False`:'
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: 等效地，`include_lowest`参数决定是否包含最小区间。默认情况下，它设置为`False`：
- en: '[PRE96]'
  id: totrans-568
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'The following is the output:'
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '![](img/0513d85e-5958-44a7-ab53-5c0e498129ce.png)'
  id: totrans-570
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0513d85e-5958-44a7-ab53-5c0e498129ce.png)'
- en: Including the lowest value in the left range
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: 包括左范围中的最低值
- en: 'The function returns the bins when `retbins` is set to `True`:'
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `retbins` 设置为 `True` 时，函数返回箱：
- en: '[PRE97]'
  id: totrans-573
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'The following is the output:'
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '![](img/ec0a959d-585d-4eb3-9f6f-80888af2be29.png)'
  id: totrans-575
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ec0a959d-585d-4eb3-9f6f-80888af2be29.png)'
- en: Returning bins
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: 返回箱
- en: The second value in the output tuple is an array of the bin values.
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 输出元组中的第二个值是箱值的数组。
- en: 'The bins can be assigned labels by passing a list of label names to the `labels`
    parameter:'
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过将标签名称列表传递给 `labels` 参数来为箱分配标签：
- en: '[PRE98]'
  id: totrans-579
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'The following is the output:'
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '![](img/0c5f8005-9ddd-4f60-aeaa-81997e6b845c.png)'
  id: totrans-581
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0c5f8005-9ddd-4f60-aeaa-81997e6b845c.png)'
- en: Label bins
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: 标记箱
- en: 'When the bins that are passed contain duplicates, an error is raised by default.
    This is because the duplicates parameter is set to `raise` by default. Setting
    it to `drop` will drop the duplicates:'
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: 当传递的箱包含重复值时，默认情况下会引发错误。这是因为默认情况下重复参数设置为 `raise`。将其设置为 `drop` 将删除重复项：
- en: '[PRE99]'
  id: totrans-584
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'The following is the output:'
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '![](img/eaf56718-eddb-48ca-997d-6d05d2ef079f.png)'
  id: totrans-586
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eaf56718-eddb-48ca-997d-6d05d2ef079f.png)'
- en: Handling duplicates in bins
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: 处理箱中的重复项
- en: 'The precision of digits up to which the bins are created and stored can be
    set by the `precision` parameter:'
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过 `precision` 参数设置创建和存储箱的精度：
- en: '[PRE100]'
  id: totrans-589
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: 'The following is the output:'
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '![](img/7bdc0653-e4dd-49d6-b2b8-7031195e36cc.png)'
  id: totrans-591
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7bdc0653-e4dd-49d6-b2b8-7031195e36cc.png)'
- en: Setting precision in bins
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: 设置箱中的精度
- en: 'The `qcut` function is similar to the `cut` function, with the exception that
    bins can be created by specifying the number of quantiles based on which the bins
    are to be created:'
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: '`qcut` 函数类似于 `cut` 函数，唯一的区别在于可以通过指定基于哪些分位数创建箱来创建箱：'
- en: '[PRE101]'
  id: totrans-594
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'The following is the output:'
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '![](img/7af0fc2c-9a4f-4af1-b34a-65150bc474d7.png)'
  id: totrans-596
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7af0fc2c-9a4f-4af1-b34a-65150bc474d7.png)'
- en: The qcut function
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: '`qcut` 函数'
- en: Using mathematical methods on DataFrames
  id: totrans-598
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 DataFrames 上使用数学方法
- en: 'Computations such as sum, mean, and median can be performed with ease on pandas
    DataFrames using the built-in mathematical methods in the pandas library. Let''s
    make use of a subset of the sales data to explore the mathematical functions and
    methods in pandas. While applying these mathematical functions, it should be ensured
    that the selected columns are numeric. The following screenshot shows the data
    with five rows and three columns, all of which will be used in this section:'
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 pandas 库中内置的数学方法在 pandas DataFrames 上轻松执行诸如求和、平均值和中位数等计算。让我们利用销售数据的子集来探索
    pandas 库中的数学函数和方法。在应用这些数学函数时，应确保所选列是数值型的。以下截图显示了具有五行和三列的数据，所有这些数据将在本节中使用：
- en: '![](img/f6a8b8b8-2173-42bb-a910-35849975f88c.png)'
  id: totrans-600
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f6a8b8b8-2173-42bb-a910-35849975f88c.png)'
- en: Sample sales data
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: 样本销售数据
- en: The abs() function
  id: totrans-602
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: abs() 函数
- en: 'The `abs()` function returns the absolute values of records in the DataFrame.
    For columns with complex values in the form x+yj, the absolute value is computed
    as ![](img/eda1f3fa-ea77-4427-a19f-b174c53d7584.png):'
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: '`abs()` 函数返回 DataFrame 中记录的绝对值。对于形式为 x+yj 的复数值列，绝对值计算为 ![](img/eda1f3fa-ea77-4427-a19f-b174c53d7584.png)：'
- en: '[PRE102]'
  id: totrans-604
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: 'The following is the output:'
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '![](img/aa02a787-d40f-4a8a-8029-7a52fe83a414.png)'
  id: totrans-606
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aa02a787-d40f-4a8a-8029-7a52fe83a414.png)'
- en: The abs() function
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: abs() 函数
- en: corr() and cov()
  id: totrans-608
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`corr()` 和 `cov()`'
- en: 'The `corr()` function returns the correlation coefficient of each combination
    of variables in the DataFrame. If any NAs are present, they are excluded for correlation
    computation. The `corr()` function accepts the Pearson, Kendall, and Spearman
    methods. By default, the Pearson correlation coefficient is calculated:'
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: '`corr()` 函数返回 DataFrame 中每个变量组合的相关系数。如果存在任何 NAs，则将其排除在相关计算之外。`corr()` 函数接受
    Pearson、Kendall 和 Spearman 方法。默认情况下，计算 Pearson 相关系数：'
- en: '[PRE103]'
  id: totrans-610
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: 'The following is the output:'
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '![](img/909bfd77-7725-42a9-928c-01dafea21849.png)'
  id: totrans-612
  prefs: []
  type: TYPE_IMG
  zh: '![](img/909bfd77-7725-42a9-928c-01dafea21849.png)'
- en: The corr() function
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
  zh: '`corr()` 函数'
- en: 'Just like the correlation function, the `cov()` function returns the covariance
    matrix:'
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: 就像相关函数一样，`cov()` 函数返回协方差矩阵：
- en: '[PRE104]'
  id: totrans-615
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'The following is the output:'
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '![](img/4590bcbf-8146-4093-a6fe-d96c3790afb1.png)'
  id: totrans-617
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4590bcbf-8146-4093-a6fe-d96c3790afb1.png)'
- en: The cov() function
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
  zh: '`cov()` 函数'
- en: The `min_periods` argument in `corr()` and `cov()` decides the minimal presence
    of non-NA values in the DataFrame.
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: '`corr()` 和 `cov()` 中的 `min_periods` 参数决定了 DataFrame 中非 NA 值的最小存在。'
- en: cummax(), cumin(), cumsum(), and cumprod()
  id: totrans-620
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: cummax()、cumin()、cumsum() 和 cumprod()
- en: 'The `cummax()`, `cummin()`, `cumsum()`, and `cumprod()` functions compute the
    maximum, minimum, sum, and product on a cumulative basis, respectively. Let''s
    understand this by applying the `cummax()` function on the sample DataFrame:'
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: '`cummax()`、`cummin()`、`cumsum()` 和 `cumprod()` 函数分别计算累计最大值、最小值、和、乘积。通过在示例数据框上应用
    `cummax()` 函数来理解这一点：'
- en: '[PRE105]'
  id: totrans-622
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'The following is the output:'
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/064a2bf2-bb86-498c-98e2-ce8485760f7e.png)'
  id: totrans-624
  prefs: []
  type: TYPE_IMG
  zh: '![](img/064a2bf2-bb86-498c-98e2-ce8485760f7e.png)'
- en: The cummax() function
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: '`cummax()` 函数'
- en: 'The `skipna` parameter in these functions provides control over handling NAs.
    It is set to `True` by default, and NAs are excluded. Consider the following DataFrame
    with NAs to understand the function of this parameter:'
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数中的 `skipna` 参数提供了对处理缺失值（NAs）的控制。默认情况下，它设置为 `True`，即排除缺失值。考虑以下包含缺失值（NAs）的数据框，以了解此参数的功能：
- en: '[PRE106]'
  id: totrans-627
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'The following is the output:'
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/f9776827-9504-4cc5-8eb1-52646a3d74f7.png)'
  id: totrans-629
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f9776827-9504-4cc5-8eb1-52646a3d74f7.png)'
- en: Sample data with NAs
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: 包含缺失值的示例数据
- en: 'The `cumsum()` method can be applied as shown here:'
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
  zh: '`cumsum()` 方法可以如下所示应用：'
- en: '[PRE107]'
  id: totrans-632
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: 'The following is the output:'
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/1112b092-89d2-4947-aef7-59eafea31094.png)'
  id: totrans-634
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1112b092-89d2-4947-aef7-59eafea31094.png)'
- en: The cumsum() function
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: '`cumsum()` 函数'
- en: 'We can choose to not ignore NAs while doing a cumulative sum by setting `skipna`
    to `False`:'
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以选择不忽略缺失值（NAs）来进行累计求和，通过将 `skipna` 设置为 `False`：
- en: '[PRE108]'
  id: totrans-637
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: 'The following is the output:'
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/38c77232-e746-4f4b-8fa6-0d1798d42bfd.png)'
  id: totrans-639
  prefs: []
  type: TYPE_IMG
  zh: '![](img/38c77232-e746-4f4b-8fa6-0d1798d42bfd.png)'
- en: The cumulative function with skipna
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: 跳过缺失值的累计函数
- en: 'By default, the aggregation is performed across the row axis since the `axis`
    parameter is set to `0` by default. Using the `axis` parameter, cumulative aggregation
    can also be performed across columns:'
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，聚合是沿行轴进行的，因为 `axis` 参数默认设置为 `0`。通过使用 `axis` 参数，也可以沿列轴执行累计聚合：
- en: '[PRE109]'
  id: totrans-642
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: 'The following is the output:'
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/a511ae4a-d276-406a-be33-3e8d76c352f8.png)'
  id: totrans-644
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a511ae4a-d276-406a-be33-3e8d76c352f8.png)'
- en: The cumprod() function
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
  zh: '`cumprod()` 函数'
- en: The describe() function
  id: totrans-646
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`describe()` 函数'
- en: 'The `describe()` function provides a representation of the distribution of
    data and computes some useful summary statistics. It serves quite useful for **exploratory
    data analysis** (**EDA**) techniques:'
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
  zh: '`describe()` 函数提供数据分布的表示，并计算一些有用的汇总统计信息。它对于**探索性数据分析**（**EDA**）技术非常有用：'
- en: '[PRE110]'
  id: totrans-648
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: 'The following is the output:'
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/030729c7-6d6d-4e33-b683-d07e19b76981.png)'
  id: totrans-650
  prefs: []
  type: TYPE_IMG
  zh: '![](img/030729c7-6d6d-4e33-b683-d07e19b76981.png)'
- en: The describe() function
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
  zh: '`describe()` 函数'
- en: 'The `describe()` function can be applied to numeric and categorical variables.
    The `include` and `exclude` parameters of the `describe` function set the data
    type of the function it should evaluate. By default, `include` is set to `numeric`.
    Hence, any categorical variables in the Dataframe will be ignored. Let''s apply
    `describe` on the following DataFrame by setting the `include` parameter to the
    `object` data type:'
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
  zh: '`describe()` 函数可以应用于数值型和类别型变量。`describe` 函数的 `include` 和 `exclude` 参数设置了该函数应评估的数据类型。默认情况下，`include`
    设置为 `numeric`，因此数据框中的任何类别型变量都会被忽略。我们通过将 `include` 参数设置为 `object` 数据类型，来应用 `describe`
    到以下数据框：'
- en: '[PRE111]'
  id: totrans-653
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: 'The following is the output:'
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/5a3deecc-a6d6-4b50-85f0-1b38e9dd1c06.png)'
  id: totrans-655
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5a3deecc-a6d6-4b50-85f0-1b38e9dd1c06.png)'
- en: Sample data with mixed datatypes
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
  zh: 包含混合数据类型的示例数据
- en: 'Take a look at the following:'
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看以下内容：
- en: '[PRE112]'
  id: totrans-658
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: 'The following is the output:'
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/337bc1ad-b82f-4401-95e7-e7f120b0f962.png)'
  id: totrans-660
  prefs: []
  type: TYPE_IMG
  zh: '![](img/337bc1ad-b82f-4401-95e7-e7f120b0f962.png)'
- en: The describe() function for categorical variables
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
  zh: 类别型变量的 `describe()` 函数
- en: All the datatypes can be included by setting `include` to `all`. Similarly,
    the `exclude` parameter can also be used to exclude certain datatypes.
  id: totrans-662
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将 `include` 设置为 `all` 可以包含所有数据类型。类似地，也可以使用 `exclude` 参数来排除某些数据类型。
- en: 'For numeric variables, `describe` evaluates the percentiles at 0.25, 0.5, 0.75,
    and 1\. This can be customized like so:'
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
  zh: 对于数值变量，`describe` 函数会评估 0.25、0.5、0.75 和 1 的分位数。可以按如下方式自定义：
- en: '[PRE113]'
  id: totrans-664
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: 'The following is the output:'
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/017a1dc1-3e58-4534-b588-cce4cb6dc905.png)'
  id: totrans-666
  prefs: []
  type: TYPE_IMG
  zh: '![](img/017a1dc1-3e58-4534-b588-cce4cb6dc905.png)'
- en: Custom percentiles in the describe function
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `describe` 函数中使用自定义分位数
- en: The diff() function
  id: totrans-668
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`diff()` 函数'
- en: 'The `diff()` function computes the difference between subsequent rows in the
    same column or subsequent columns in the same row. `diff()` can be evaluated along
    a row or column by setting the `axis` parameter, which is set to 0 by default.
    Therefore, computation takes place by row:'
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
  zh: '`diff()` 函数计算同一列中的后续行之间的差异或同一行中后续列之间的差异。通过设置默认为0的 `axis` 参数，可以沿着行或列评估 `diff()`。因此，计算是按行进行的：'
- en: '[PRE114]'
  id: totrans-670
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: 'The following is the output:'
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '![](img/aab6fa7e-2546-42c6-825c-f24ab052feae.png)'
  id: totrans-672
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aab6fa7e-2546-42c6-825c-f24ab052feae.png)'
- en: The diff() function
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
  zh: '`diff()` 函数'
- en: 'The `diff` method can be applied as shown here:'
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
  zh: 可以应用 `diff` 方法如下所示：
- en: '[PRE115]'
  id: totrans-675
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: 'The following is the output:'
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '![](img/4e3e20e0-c8d7-4d14-9442-1705a24ed8f8.png)'
  id: totrans-677
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4e3e20e0-c8d7-4d14-9442-1705a24ed8f8.png)'
- en: The diff() function applied along axis 1
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
  zh: 沿轴1应用的diff()函数
- en: 'The `periods()` parameter can be used to find the difference of the nth previous
    row. A negative value would allow us to find the difference from the nth row that
    follows:'
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
  zh: '`periods()` 参数可用于找到第n个前一行的差异。负值允许我们找到接下来的第n行的差异：'
- en: '[PRE116]'
  id: totrans-680
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: 'The following is the output:'
  id: totrans-681
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '![](img/001f6e9f-cfc2-4ebb-8874-d79826c23b62.png)'
  id: totrans-682
  prefs: []
  type: TYPE_IMG
  zh: '![](img/001f6e9f-cfc2-4ebb-8874-d79826c23b62.png)'
- en: diff() being used at different periodic intervals
  id: totrans-683
  prefs: []
  type: TYPE_NORMAL
  zh: 在不同周期间隔使用diff()
- en: The rank() function
  id: totrans-684
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: rank() 函数
- en: 'The `rank()` function returns a DataFrame with the rank of each value that
    was estimated along the specified axis. Ranking takes place in ascending order
    by default:'
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
  zh: '`rank()` 函数返回一个DataFrame，其中包含沿指定轴估计的每个值的排名。默认情况下，排名是按升序进行的：'
- en: '[PRE117]'
  id: totrans-686
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: 'The following is the output:'
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '![](img/70dab829-f10d-43fa-99b9-2d543d2f0dfc.png)'
  id: totrans-688
  prefs: []
  type: TYPE_IMG
  zh: '![](img/70dab829-f10d-43fa-99b9-2d543d2f0dfc.png)'
- en: Ranking function result
  id: totrans-689
  prefs: []
  type: TYPE_NORMAL
  zh: 排名函数结果
- en: 'The `rank()` method can be applied as shown here:'
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
  zh: '`rank()` 方法可以如下应用：'
- en: '[PRE118]'
  id: totrans-691
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: 'The following is the output:'
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '![](img/ea5b41be-b19e-432a-b012-8970e77d519c.png)'
  id: totrans-693
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ea5b41be-b19e-432a-b012-8970e77d519c.png)'
- en: Ranking in descending order
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
  zh: 降序排名
- en: 'Ranking can also be obtained as a percentage, as shown here:'
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
  zh: 排名也可以以百分比的形式获得，如下所示：
- en: '[PRE119]'
  id: totrans-696
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: 'The following is the output:'
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '![](img/3070fb9d-8481-4e11-97b3-fc6465effa57.png)'
  id: totrans-698
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3070fb9d-8481-4e11-97b3-fc6465effa57.png)'
- en: Ranking with percentiles
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
  zh: 百分位数排名
- en: 'The `method()` argument helps settle ties. By default, the average of the range
    of ranks that could possibly be occupied by items in a tie is shown in the result.
    It can also be modified to show the minimum rank, maximum rank, the order in which
    values appear, or dense ranking:'
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
  zh: '`method()` 参数有助于解决平局。默认情况下，显示了平局中可能被项目占据的排名范围的平均值。也可以修改为显示最小排名、最大排名、值出现的顺序或密集排名：'
- en: '[PRE120]'
  id: totrans-701
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: 'The following is the output:'
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '![](img/f1e18e41-4d28-4689-b2b9-998e5c02b5bb.png)'
  id: totrans-703
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f1e18e41-4d28-4689-b2b9-998e5c02b5bb.png)'
- en: Using the ranking method to find the minimum value for a tiebreaker
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
  zh: 使用排名方法找到平局的最小值
- en: The quantile() function
  id: totrans-705
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: quantile() 函数
- en: 'The `quantile()` function returns the value for every column for the specified
    quantiles. It accepts a single quantile value or an array of quantile values:'
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
  zh: '`quantile()` 函数返回指定分位数的每列的值。它接受单个分位数值或分位数值数组：'
- en: '[PRE121]'
  id: totrans-707
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: 'The following is the output:'
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '![](img/d2ebabbc-b3fc-4466-851b-9cae14407fc6.png)'
  id: totrans-709
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d2ebabbc-b3fc-4466-851b-9cae14407fc6.png)'
- en: Finding the quantiles for a DataFrame
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
  zh: 查找DataFrame的分位数
- en: 'Quantiles can also be computed for timestamps. We can achieve this by setting
    the `numeric_only` parameter to `False`:'
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
  zh: 时间戳也可以计算分位数。我们可以通过将 `numeric_only` 参数设置为 `False` 来实现这一点：
- en: '[PRE122]'
  id: totrans-712
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: 'The following is the output:'
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '![](img/6374dfd5-754f-4174-af75-5a2a7cf85095.png)'
  id: totrans-714
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6374dfd5-754f-4174-af75-5a2a7cf85095.png)'
- en: Quantiles for the datetime value
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
  zh: 日期时间值的分位数
- en: The round() function
  id: totrans-716
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`round()` 函数'
- en: 'The `round()` function helps in rounding off decimals. By default, the values
    are rounded off to a whole number:'
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
  zh: '`round()` 函数用于四舍五入小数。默认情况下，值会被四舍五入为整数：'
- en: '[PRE123]'
  id: totrans-718
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: 'The following is the output:'
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '![](img/ff14f7fd-af30-44f4-86e6-6f4c49b73fcd.png)'
  id: totrans-720
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ff14f7fd-af30-44f4-86e6-6f4c49b73fcd.png)'
- en: The `round()` function's results
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
  zh: '`round()` 函数的结果'
- en: 'The `round` function can be applied as shown here:'
  id: totrans-722
  prefs: []
  type: TYPE_NORMAL
  zh: 可以应用 `round` 函数如下所示：
- en: '[PRE124]'
  id: totrans-723
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: 'The following is the output:'
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '![](img/ad4f15c5-ade2-426b-b79b-0e9891992189.png)'
  id: totrans-725
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ad4f15c5-ade2-426b-b79b-0e9891992189.png)'
- en: The `round()` function for `decimals = 10`
  id: totrans-726
  prefs: []
  type: TYPE_NORMAL
  zh: '`decimals = 10` 的 `round()` 函数'
- en: The pct_change() function
  id: totrans-727
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pct_change() 函数
- en: 'The `pct_change()` function works similar to the `diff` function and computes
    the percentage of the difference between two different values in the DataFrame.
    Just like in `diff()`, the `periods` parameter provides flexibility so that we
    can evaluate between different elements that are spaced apart by a few rows:'
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
  zh: '`pct_change()` 函数类似于 `diff` 函数，计算 DataFrame 中两个不同值之间的百分比差异。就像在 `diff()` 中，`periods`
    参数提供了灵活性，可以评估之间相隔几行的不同元素：'
- en: '[PRE125]'
  id: totrans-729
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: 'The following is the output:'
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/c77c376d-0209-425e-b664-090c9017ed1c.png)'
  id: totrans-731
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c77c376d-0209-425e-b664-090c9017ed1c.png)'
- en: Percentage change across rows
  id: totrans-732
  prefs: []
  type: TYPE_NORMAL
  zh: 跨行的百分比变化
- en: The `fill_method` parameter allows NAs to be handled by methods such as padding
    prior to computation. The `limit` parameter helps set a threshold on a permissible
    number of NAs.
  id: totrans-733
  prefs: []
  type: TYPE_NORMAL
  zh: '`fill_method` 参数允许通过诸如填充等方法在计算前处理 NA 值。`limit` 参数帮助设置 NA 值的允许数量阈值。'
- en: min(), max(), median(), mean(), and mode()
  id: totrans-734
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: min()、max()、median()、mean() 和 mode()
- en: 'These functions accept a similar set of parameters and compute the aggregates
    (min, max, median, or mode) for each column or row based on the axis parameter
    setting:'
  id: totrans-735
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数接受类似的参数集，并根据轴参数设置计算每列或每行的聚合（最小值、最大值、中位数或众数）：
- en: '[PRE126]'
  id: totrans-736
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: 'The following is the output:'
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/b2b3c5db-ba68-4348-99f5-63cf87bbe5ee.png)'
  id: totrans-738
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b2b3c5db-ba68-4348-99f5-63cf87bbe5ee.png)'
- en: The `min()` result
  id: totrans-739
  prefs: []
  type: TYPE_NORMAL
  zh: '`min()` 结果'
- en: 'The `max` method can be applied as shown here:'
  id: totrans-740
  prefs: []
  type: TYPE_NORMAL
  zh: '`max` 方法可以按照如下方式应用：'
- en: '[PRE127]'
  id: totrans-741
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: 'The following is the output:'
  id: totrans-742
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/c3f5c0f1-f20b-4883-807c-140ae916f5c6.png)'
  id: totrans-743
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c3f5c0f1-f20b-4883-807c-140ae916f5c6.png)'
- en: The `max()` result
  id: totrans-744
  prefs: []
  type: TYPE_NORMAL
  zh: '`max()` 结果'
- en: 'The `skipna` parameter helps us handle NAs. Consider the following DataFrame:'
  id: totrans-745
  prefs: []
  type: TYPE_NORMAL
  zh: '`skipna` 参数帮助我们处理 NA。考虑以下 DataFrame：'
- en: '[PRE128]'
  id: totrans-746
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: 'The following is the output:'
  id: totrans-747
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/132d2fd7-32c9-411a-980e-20d08f5ddcb1.png)'
  id: totrans-748
  prefs: []
  type: TYPE_IMG
  zh: '![](img/132d2fd7-32c9-411a-980e-20d08f5ddcb1.png)'
- en: DataFrame with NAs
  id: totrans-749
  prefs: []
  type: TYPE_NORMAL
  zh: 带有 NA 的 DataFrame
- en: 'By default, the NAs are skipped during evaluation, as the `skipna` parameter
    is set to `True`:'
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，评估时会跳过 NA 值，因为 `skipna` 参数设置为 `True`：
- en: '[PRE129]'
  id: totrans-751
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: 'The following is the output:'
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/2d09307e-9c2a-4c9d-bfe2-f1b8dc47e93d.png)'
  id: totrans-753
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2d09307e-9c2a-4c9d-bfe2-f1b8dc47e93d.png)'
- en: The `median()` function
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
  zh: '`median()` 函数'
- en: 'By default, NAs are ignored in mean calculations. If `skipna` is set to `False`,
    the calculation also result to NA if there is a missing value:'
  id: totrans-755
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，NA 值在均值计算中会被忽略。如果 `skipna` 设置为 `False`，则计算结果也会因为缺失值而返回 NA：
- en: '[PRE130]'
  id: totrans-756
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: 'The following is the output:'
  id: totrans-757
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/73773c33-7696-459e-87d9-b38ea0d72767.png)'
  id: totrans-758
  prefs: []
  type: TYPE_IMG
  zh: '![](img/73773c33-7696-459e-87d9-b38ea0d72767.png)'
- en: The `median()` function with `skipna`
  id: totrans-759
  prefs: []
  type: TYPE_NORMAL
  zh: 带有 `skipna` 的 `median()` 函数
- en: 'Consider the following multi indexed DataFrame. Let''s compute the mean for
    it:'
  id: totrans-760
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下多重索引 DataFrame。让我们计算它的均值：
- en: '[PRE131]'
  id: totrans-761
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: 'The following is the output:'
  id: totrans-762
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/8528079d-141d-4743-9f5f-f8425394041c.png)'
  id: totrans-763
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8528079d-141d-4743-9f5f-f8425394041c.png)'
- en: Multi indexed DataFrame
  id: totrans-764
  prefs: []
  type: TYPE_NORMAL
  zh: 多重索引 DataFrame
- en: 'The mean of this multi-index dataset can be obtained as shown here:'
  id: totrans-765
  prefs: []
  type: TYPE_NORMAL
  zh: 这个多重索引数据集的均值可以通过如下方式获得：
- en: '[PRE132]'
  id: totrans-766
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: 'The following is the output:'
  id: totrans-767
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/dafe3a03-8403-463b-a734-151464b11488.png)'
  id: totrans-768
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dafe3a03-8403-463b-a734-151464b11488.png)'
- en: The mean of the multi indexed DataFrame
  id: totrans-769
  prefs: []
  type: TYPE_NORMAL
  zh: 多重索引 DataFrame 的均值
- en: 'The `level` parameter computes the aggregate across any level of index in a
    multi-indexed DataFrame:'
  id: totrans-770
  prefs: []
  type: TYPE_NORMAL
  zh: '`level` 参数计算多重索引 DataFrame 中任意级别的聚合：'
- en: '[PRE133]'
  id: totrans-771
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: 'The following is the output:'
  id: totrans-772
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/6dc322d1-d642-4662-962b-61fa46cc92ce.png)'
  id: totrans-773
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6dc322d1-d642-4662-962b-61fa46cc92ce.png)'
- en: '`mean()` for a specific index level'
  id: totrans-774
  prefs: []
  type: TYPE_NORMAL
  zh: 针对特定索引级别的 `mean()`
- en: all() and any()
  id: totrans-775
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: all() 和 any()
- en: 'The `all()` and `any()` functions help us test for the presence of `False`
    values or zeros in a DataFrame. If all the values along the chosen axis are `True`,
    then the `all()` function returns `True`. The `any()` function requires at least
    a single value to be `True` to return `True`. Let''s apply `all()` and `any()`
    on the following DataFrame:'
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
  zh: '`all()` 和 `any()` 函数帮助我们检测 DataFrame 中是否存在 `False` 值或零值。如果所选轴上的所有值都是 `True`，则
    `all()` 函数返回 `True`。`any()` 函数需要至少一个值为 `True` 才返回 `True`。让我们在以下 DataFrame 上应用
    `all()` 和 `any()`：'
- en: '[PRE134]'
  id: totrans-777
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: 'This results in the following output:'
  id: totrans-778
  prefs: []
  type: TYPE_NORMAL
  zh: 这会得到以下输出：
- en: '![](img/7f96a54f-450f-4a4e-b01e-af421bb45fb9.png)'
  id: totrans-779
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7f96a54f-450f-4a4e-b01e-af421bb45fb9.png)'
- en: Sample DataFrame
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 DataFrame
- en: 'All the values are `True` in columns B, C, and D. Hence, `all()` returns `True`
    for these columns. Column E, which has no `True` values, returns `False` with
    `any()`:'
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
  zh: B、C 和 D 列中的所有值都是 `True`，因此 `all()` 对这些列返回 `True`。没有 `True` 值的 E 列则会在 `any()`
    中返回 `False`：
- en: '[PRE135]'
  id: totrans-782
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: 'The following is the output:'
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/b58a4e51-fd8e-4b81-a41f-8e7075f9423f.png)'
  id: totrans-784
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b58a4e51-fd8e-4b81-a41f-8e7075f9423f.png)'
- en: The `all()` result
  id: totrans-785
  prefs: []
  type: TYPE_NORMAL
  zh: '`all()` 结果'
- en: 'Similarly, `any()` can be applied as shown here:'
  id: totrans-786
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，`any()` 可以如下应用：
- en: '[PRE136]'
  id: totrans-787
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: 'The following is the output:'
  id: totrans-788
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/5e5a67cf-7e0f-48b5-aec1-4c08cb8f2191.png)'
  id: totrans-789
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5e5a67cf-7e0f-48b5-aec1-4c08cb8f2191.png)'
- en: The `any()` result
  id: totrans-790
  prefs: []
  type: TYPE_NORMAL
  zh: '`any()` 结果'
- en: 'The `all()` and `any()` functions have the `axis`, `skipna`, and `level` parameters,
    just like some of the functions we discussed previously. The `bool_only` parameter
    can be used to include or exclude datatypes other than Booleans:'
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
  zh: '`all()` 和 `any()` 函数具有 `axis`、`skipna` 和 `level` 参数，像我们之前讨论的某些函数一样。`bool_only`
    参数可以用于包括或排除布尔值以外的数据类型：'
- en: '[PRE137]'
  id: totrans-792
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: 'The following is the output:'
  id: totrans-793
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/6b9ad684-efac-4446-9c4b-3bd247439657.png)'
  id: totrans-794
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6b9ad684-efac-4446-9c4b-3bd247439657.png)'
- en: The bool_only parameter
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
  zh: bool_only 参数
- en: The clip() function
  id: totrans-796
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: clip() 函数
- en: 'The `clip()` function specifies a lower limit and upper limit. Values in the
    DataFrame exceeding the upper limit, are reduced to the upper limit and values
    under the lower limit are raised to this lower limit:'
  id: totrans-797
  prefs: []
  type: TYPE_NORMAL
  zh: '`clip()` 函数指定了下限和上限。DataFrame 中超过上限的值将被减少到上限，低于下限的值将被提高到下限：'
- en: '[PRE138]'
  id: totrans-798
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: 'The following is the output:'
  id: totrans-799
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/0014d934-58e5-4bbe-9f08-6166593f4fc5.png)'
  id: totrans-800
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0014d934-58e5-4bbe-9f08-6166593f4fc5.png)'
- en: clip() result
  id: totrans-801
  prefs: []
  type: TYPE_NORMAL
  zh: clip() 结果
- en: The count() function
  id: totrans-802
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: count() 函数
- en: 'The `count()` function helps count the total non-NA values in the DataFrame:'
  id: totrans-803
  prefs: []
  type: TYPE_NORMAL
  zh: '`count()` 函数帮助统计 DataFrame 中非 NA 值的总数：'
- en: '[PRE139]'
  id: totrans-804
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: 'The following is the output:'
  id: totrans-805
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/5ef7d318-a7cc-45d8-b4fa-811385cc1921.png)'
  id: totrans-806
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5ef7d318-a7cc-45d8-b4fa-811385cc1921.png)'
- en: DataFrame with NA
  id: totrans-807
  prefs: []
  type: TYPE_NORMAL
  zh: 带有 NA 的 DataFrame
- en: 'The count method can be applied as shown here:'
  id: totrans-808
  prefs: []
  type: TYPE_NORMAL
  zh: count 方法可以如下应用：
- en: '[PRE140]'
  id: totrans-809
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: 'The following is the output:'
  id: totrans-810
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/5d374bae-d1ba-43e6-b154-6522a932961a.png)'
  id: totrans-811
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5d374bae-d1ba-43e6-b154-6522a932961a.png)'
- en: count() result
  id: totrans-812
  prefs: []
  type: TYPE_NORMAL
  zh: count() 结果
- en: The `count()` function has the `axis`, `level`, and `numeric_only` parameters,
    just like several other functions we discussed previously.
  id: totrans-813
  prefs: []
  type: TYPE_NORMAL
  zh: '`count()` 函数具有 `axis`、`level` 和 `numeric_only` 参数，像我们之前讨论的几个其他函数一样。'
- en: Summary
  id: totrans-814
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 小结
- en: This chapter provided a collection of special methods that show the flexibility
    and usefulness of pandas. This chapter has been like an illustrated glossary in
    which each function serves a very unique purpose. Now, you should have an idea
    of how to create and apply one-liner functions in pandas, and you should understand
    the concepts of missing values and the methods that take care of them. This is
    also a compendium of all the miscellaneous methods that can be applied to a series
    and the numeric methods that can be applied to any kind of Python data structure.
  id: totrans-815
  prefs: []
  type: TYPE_NORMAL
  zh: 本章提供了一些特殊方法，展示了 pandas 的灵活性和实用性。本章就像一本插图词典，每个函数都有非常独特的用途。现在，你应该对如何在 pandas 中创建和应用单行函数有了一定了解，并且理解了缺失值的概念以及处理它们的方法。这也是一本汇总了可以应用于序列的各种杂项方法和可以应用于任何
    Python 数据结构的数值方法的大全。
- en: In the next chapter, we will take a look at how we can handle time series data
    and plot it using `matplotlib`. We will also have a look into the manipulation
    of time series data by looking at rolling, resampling, shifting, lagging, and
    time element separation.
  id: totrans-816
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将看看如何处理时间序列数据并使用 `matplotlib` 绘制图表。我们还将通过观察滚动、重采样、偏移、滞后和时间元素分离来了解如何操作时间序列数据。
