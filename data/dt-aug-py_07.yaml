- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: Audio Data Augmentation
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 音频数据增强
- en: Similar to image and text augmentation, the objective of audio data augmentation
    is to extend the dataset to gain a higher accuracy forecast or prediction in a
    generative AI system. Audio augmentation is cost-effective and is a viable option
    when acquiring additional audio files is expensive or time-consuming.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 与图像和文本增强类似，音频数据增强的目标是扩展数据集，从而在生成AI系统中获得更高的准确预测或预测。音频增强具有成本效益，并且当获取额外音频文件既昂贵又耗时时，是一个可行的选择。
- en: Writing about audio augmentation methods poses unique challenges. The first
    is that audio is not visual like images or text. If the format is audiobooks,
    web pages, or mobile apps, then we play the sound, but the medium is paper. Thus,
    we must transform the audio signal into a visual representation. The **Waveform**
    graph, also known as the **time series graph**, is a standard method for representing
    an audio signal. You can listen to the audio in the accompanying Python Notebook.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 关于音频增强方法的写作面临独特的挑战。首先，音频不像图像或文本那样具有视觉特性。如果格式是有声书、网页或移动应用，我们播放声音，但介质是纸张。因此，我们必须将音频信号转换为可视化的表示形式。**波形**图，也称为**时间序列图**，是表示音频信号的标准方法。你可以在附带的Python笔记本中聆听音频。
- en: 'In this chapter, you will learn how to write Python code to read an audio file
    and draw a Waveform graph from scratch. Pluto has provided a preview here so that
    we can discuss the components of the Waveform graph. The function is as follows:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何编写Python代码从零开始读取音频文件并绘制波形图。Pluto在这里提供了一个预览，以便我们可以讨论波形图的各个组成部分。功能如下：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following is a Waveform graph of piano scales in D major:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是D大调钢琴音阶的波形图：
- en: '![Figure 7.1 – Piano scales in D major](img/B17990_07_01.jpg)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.1 – D大调钢琴音阶](img/B17990_07_01.jpg)'
- en: Figure 7.1 – Piano scales in D major
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.1 – D大调钢琴音阶
- en: In *Figure 7**.1*, Pluto drew the positive amplitude in blue and the negative
    amplitude in yellow in the **Waveform** graph. This makes the chart easier to
    read and prettier. The **amplitude** is the value of the *Y*-axis. It measures
    the vibration or compression and decompression of the air molecules. The higher
    the amplitude, the greater the air displacement. In other words, the zero amplitude
    value is silent, and the greater the absolute distance from zero, the louder the
    sound.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图7.1*中，Pluto将波形图中的正振幅用蓝色表示，负振幅用黄色表示。这使得图表更易于阅读，也更加美观。**振幅**是*Y*轴的值。它衡量空气分子振动或压缩与膨胀的程度。振幅越大，空气位移越大。换句话说，零振幅值代表静音，离零点越远的绝对值代表声音越响亮。
- en: The **frequency**, also known as the **sampling rate**, is the value of the
    *X*-axis. The sampling rate measures how many times you recorded the amplitude
    value in a second. The unit for sound frequency or the sampling rate is **hertz**
    (**Hz**). For example, a sampling rate of 1,000 Hz or 1 **kilohertz** (**kHz**)
    means you record a thousand amplitude values in 1 second. In other words, you
    register an amplitude value for every millisecond. Thus, the higher the frequency,
    the more accurate the sound, and therefore, a larger sound file size. This is
    because there is a higher recorded amplitude value. 1 kHz is equal to 1,000 Hz.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**频率**，也称为**采样率**，是*X*轴的值。采样率衡量的是每秒钟记录的振幅值次数。声音频率或采样率的单位是**赫兹**（**Hz**）。例如，1,000
    Hz或1 **千赫**（**kHz**）的采样率意味着你在1秒钟内记录了1,000个振幅值。换句话说，你每毫秒记录一个振幅值。因此，频率越高，声音越精确，声音文件的大小也越大。这是因为记录了更多的振幅值。1
    kHz等于1,000 Hz。'
- en: Fun fact
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 趣味事实
- en: A human’s range of hearing is between 20 Hz and 20 kHz. Younger children can
    hear sounds higher than 20 kHz, while older adults can’t listen to sounds greater
    than 17 kHz. Deep and low music bass sound is between 20 Hz and 120 Hz, while
    everyday human speech ranges from 600 Hz to 5 kHz. In contrast, a canine’s hearing
    frequency is approximately 40 Hz to 60 kHz, which is better than a human’s hearing
    frequency. That is why you can’t hear an above 20 kHz dog whistle.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 人类的听力范围是20 Hz到20 kHz。年幼的孩子能够听到超过20 kHz的声音，而年长的成年人则无法听到超过17 kHz的声音。深沉的低音乐音频在20
    Hz到120 Hz之间，而日常人类语言的频率范围是600 Hz到5 kHz。与此相对，犬类的听力频率大约是40 Hz到60 kHz，优于人类的听力频率。这就是为什么你无法听到超过20
    kHz的狗哨声的原因。
- en: '**Pitch** is the same as **frequency** but from a human point of view. It refers
    to the loudness of the sound and is measured in **decibels** (**dB**). Thus, high
    pitch means high frequency.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**音高**与**频率**相同，但从人类的角度来看。它指的是声音的响亮程度，单位是**分贝**（**dB**）。因此，高音高频率。'
- en: dB is the unit for the degree of loudness. A rocket sound is about 165 dB, busy
    traffic noise is about 85 dB, human speech is about 65 dB, rainfall is about 45
    dB, and zero dB means silence.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 分贝（dB）是响度的单位。火箭声约为165 dB，繁忙交通的噪音约为85 dB，人类语音约为65 dB，雨声约为45 dB，零分贝表示静音。
- en: The standard sampling rate for MP3 and other audio formats is 22.05 kHz. The
    frequency of high-quality sound, also known as **Compact Disk** (**CD**) sound,
    is 44.1 kHz.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: MP3和其他音频格式的标准采样率为22.05 kHz。高质量声音的频率，也被称为**光盘**（**CD**）音频的频率为44.1 kHz。
- en: When storing an audio file on a computer, **bit depth** is the accuracy of the
    amplitude value. **16 bits** has 65,536 levels of detail, while **24 bits** has
    16,777,216 levels of information. The higher the bit depth, the closer the digital
    recording is to the analog sound and the larger the audio file size.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机上存储音频文件时，**比特深度**表示振幅值的准确性。**16位**有65,536个细节级别，而**24位**有16,777,216个信息级别。比特深度越高，数字录音越接近模拟声音，同时音频文件的大小也会更大。
- en: The **bit rate** is similar to the sampling rate, where the bit rate measures
    the number of bits per second. In audio processing, the playback function uses
    the bit rate, while the record function uses the sampling rate.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**比特率**类似于采样率，比特率衡量的是每秒传输的比特数。在音频处理过程中，播放功能使用比特率，而录制功能使用采样率。'
- en: '**Mono sound** has one channel (**1-channel**), while **stereo sound** has
    two channels (**2-channel**). Stereo sound has one channel for the right ear and
    another channel for the left ear.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**单声道音频**只有一个通道（**1通道**），而**立体声音频**有两个通道（**2通道**）。立体声音频为右耳提供一个通道，为左耳提供另一个通道。'
- en: The bottom graph in *Figure 7**.1* shows a zoom-in Waveform chart. It shows
    only 100 sampling rate points, starting at the midpoint of the top Waveform graph.
    Upon closer inspection, the Waveform is a simple time series plot. Many data types,
    such as text and images, can be represented as a time series chart because Python
    can represent the data as a one-dimensional array, regardless of the data type.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 7.1*中的底部图显示了一个放大的波形图。它只显示100个采样率点，从顶部波形图的中点开始。仔细观察，波形是一个简单的时间序列图。许多数据类型，如文本和图像，都可以表示为时间序列图，因为Python可以将数据表示为一维数组，而不考虑数据类型。'
- en: Fun fact
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 趣味小知识
- en: '**Pitch correction** involves tuning a vocal’s performance in a recording so
    that the singer sings on key. You can use software such as **Antares Auto-Tune
    Pro** or **Waves Tune Real Time** to correct the highness or lowness in singing
    pitch. It saves time and money in terms of re-recording. Pitch correction was
    relatively uncommon before 1977 when **Antares Audio Technology’s Auto-Tune Pitch
    Correcting Plug-In** was released. Today, about 90% of radio, television, website,
    or app songs have pitch correction. **Autotune** is used for vocal effects, while
    pitch correction is for fixing vocals.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**音高修正**是指在录音中调整人声表现，使得歌手能够准确地唱出音符。你可以使用**Antares Auto-Tune Pro**或**Waves Tune
    Real Time**等软件来修正歌声的高低音。它可以节省重新录音的时间和成本。在1977年之前，音高修正相对较少见，而在**Antares Audio Technology**发布**Auto-Tune音高修正插件**后，音高修正得到了广泛应用。如今，大约90%的广播、电视、网站或应用中的歌曲都使用了音高修正。**自动调音**用于声效，而音高修正则用于修正歌声。'
- en: 'Since most data can be used for Waveform graphs, Pluto can draw a time series
    graph for the phrase “*Mary had a little lamb, whose fleece was white as snow.
    And everywhere that Mary went, the lamb was sure to go.*” Pluto uses the following
    function:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 由于大多数数据可以用于波形图，Pluto可以为短语“*玛丽有只小羊羔，它的羊毛像雪一样白。玛丽走到哪里，小羊就跟到哪里*”绘制时间序列图。Pluto使用以下函数：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The output is as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 7.2 – Text as a time series graph](img/B17990_07_02.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.2 – 文本作为时间序列图](img/B17990_07_02.jpg)'
- en: Figure 7.2 – Text as a time series graph
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.2 – 文本作为时间序列图
- en: In *Figure 7**.2*, blue is for alphanumeric characters, while yellow is for
    punctuation. The *Y*-axis consists of the ASCII value of the character.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图 7.2*中，蓝色表示字母数字字符，黄色表示标点符号。*Y*轴表示字符的ASCII值。
- en: The conversion is straightforward because each letter is encoded as an **ASCII**
    value, such as “A” as 65, “B” as 66, and so on. Similarly, an image composed of
    a three-dimensional array (width, height, and depth) has an RGB value. The result
    of collapsing the depth dimension by multiplying the RGB value is between zero
    and 16,581,375\. Flatten the remaining two-dimensional array into a one-dimensional
    array and plot it as a time series graph.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 转换过程是直接的，因为每个字母都被编码为**ASCII**值，例如“A”是65，“B”是66，依此类推。同样，一个由三维数组（宽度、高度和深度）组成的图像也有RGB值。通过乘以RGB值来压缩深度维度的结果介于零和16,581,375之间。将剩余的二维数组展平成一维数组，并将其绘制为时间序列图。
- en: 'This chapter will cover audio augmentation using **Waveform** transformation,
    and in particular, the following topics:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍使用**波形**变换进行音频增强，特别是以下主题：
- en: Standard audio augmentation techniques
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准音频增强技术
- en: Filters
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 滤波器
- en: Audio augmentation libraries
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 音频增强库
- en: Real-world audio datasets
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现实世界的音频数据集
- en: Reinforcing your learning
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强化你的学习
- en: Let’s begin by discussing common audio augmentation methods.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先讨论一些常见的音频增强方法。
- en: Standard audio augmentation techniques
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标准音频增强技术
- en: Similar to image augmentation in [*Chapter 3*](B17990_03.xhtml#_idTextAnchor058),
    various audio libraries provide many more functions than are necessary for augmentation.
    Therefore, we will only cover some of the methods available in the chosen audio
    library.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于[*第3章*](B17990_03.xhtml#_idTextAnchor058)中的图像增强，许多音频库提供了比增强所需的更多功能。因此，我们只会介绍所选音频库中一些可用的方法。
- en: In image augmentation, the term **safe level** is defined as not altering or
    distorting the original image beyond an acceptable level. There is no standard
    terminology for deforming the original audio signal beyond a permissible point.
    Thus, the term **safe** or **true** will be used interchangeably to denote a limit
    point for the audio signal.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在图像增强中，**安全水平**的定义是指不改变或扭曲原始图像超过可接受的水平。对于将原始音频信号扭曲到超出允许范围的情况，并没有标准的术语。因此，**安全**或**真实**这两个词将交替使用，表示音频信号的极限点。
- en: Fun challenge
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的挑战
- en: 'Here is a thought experiment: all audio files are represented as numbers in
    time series format. Thus, can you create a statistically valid augmentation method
    that does not consider human hearing perception? In other words, use math to manipulate
    a statistically valid number array, but never listen to the before and after effects.
    After all, audio augmentation aims to have more data for enhancing the AI prediction,
    which does not comprehend human speech or good music from bad music.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个思想实验：所有音频文件都以时间序列格式表示数字。那么，你能创建一个不考虑人类听觉感知的统计有效的增强方法吗？换句话说，使用数学操作统计有效的数字数组，但从不听取前后效果。毕竟，音频增强的目的是为了提供更多数据，以增强AI预测，而AI并不能理解人类的言语或区分好音乐和坏音乐。
- en: 'The following functions are commonly used for audio augmentation:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是音频增强中常用的功能：
- en: Time stretching
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时间拉伸
- en: Time shifting
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时间位移
- en: Pitch scaling
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 音高缩放
- en: Noise injection
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 噪声注入
- en: Polarity inversion
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 极性反转
- en: Let’s start with time stretching.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从时间拉伸开始。
- en: Time stretching
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 时间拉伸
- en: '**Time stretching** involves lengthening or shortening the duration of an audio
    signal. It is done without changing the pitch level. For example, in human speech,
    you would slow down and drag out your words or speed up and talk like a chipmunk
    cartoon character.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**时间拉伸**是指延长或缩短音频信号的持续时间，而不改变音高。例如，在人类的语言中，你会放慢语速，拖长词语，或者加快语速，像松鼠卡通角色一样说话。'
- en: What is the **safe** level for **time stretching**? It depends on the type of
    audio and the goal of AI prediction. In general, you can speed up or slow down
    human speech and it can still be understood. But if the goal is to predict the
    speaker’s name, then there is a small time stretching range you can apply to the
    speech and stay **true** to the speaker’s talking style.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**时间拉伸**的**安全**水平是多少？这取决于音频类型和AI预测的目标。一般来说，你可以加速或减慢人类的言语，并且仍然能听懂。但如果目标是预测说话者的名字，那么你可以对语音应用小范围的时间拉伸，同时保持**真实**的说话风格。'
- en: Music, on the other hand, is generally considered **unsafe** for time stretching.
    Changing the tempo beat of a music segment alters the music beyond the true musician’s
    intention.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，音乐通常被认为对时间拉伸是**不安全**的。改变音乐片段的节奏会改变音乐，超出真正音乐家的意图。
- en: Environmental or nature sounds are generally **safe** for time stretching within
    an acceptable safe range.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 环境或自然声音通常在可接受的安全范围内对时间拉伸是**安全**的。
- en: This augmentation technique, and all other methods, are covered in the Python
    Notebook; hence, it is easier to grasp the effect by listening to the original
    and the augmented sound.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 本增强技术，以及所有其他方法，都在Python Notebook中讲解；因此，通过听原始音频和增强后的音频，可以更容易理解效果。
- en: Similar to time stretching is time shifting.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于时间拉伸的是时间移位。
- en: Time shifting
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 时间移位
- en: '**Time shifting** involves moving an audio segment forward or backward. For
    example, if you want a more dramatic pause between a speaker’s announcement and
    the audience’s applause, you can timeshift the applauses a few seconds forward.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**时间移位**是指将音频片段向前或向后移动。例如，如果你想在演讲者的宣布和观众的掌声之间制造更戏剧性的暂停，你可以将掌声向前移几秒钟。'
- en: Timeshift with rollover means the last sound will be added back to the beginning.
    Without rollover, the audio will have silence for the beginning or end, depending
    on whether you’re shifting forward or backward.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 带翻转的时间移位意味着最后的声音将被添加到开头。如果没有翻转，根据你是向前移位还是向后移位，音频的开头或结尾将会有静音。
- en: For example, suppose the goal of the AI prediction is to identify gunshots in
    a city to alert the police. In that case, timeshift with rollover is an acceptable
    **safe** augmentation technique. Another example of good use of timeshift with
    rollover is looped background music.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设AI预测的目标是识别城市中的枪声并报警。那么，带翻转的时间移位是一种可接受的**安全**增强技术。另一个良好的使用带翻转时间移位的例子是循环的背景音乐。
- en: Human speech or music is typically **unsafe** for time shifting. This is because
    the sequential order is essential for it to stay **true** to the original audio.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 人类语音或音乐通常对于时间移位来说是**不安全**的，因为顺序对保持音频的**真实性**至关重要。
- en: Moving away from time, pitch shifting or pitch scaling is another augmented
    parameter.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 离开时间后，音高移位或音高缩放是另一个增强参数。
- en: Pitch shifting
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 音高移位
- en: '**Pitch shifting** or **pitch scaling** changes the frequency of sound without
    affecting the speed or time shift. For example, a man has a lower voice pitch
    than a woman. Increasing the pitch level in a voice recording might make a man
    sound like a woman.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**音高移位**或**音高缩放**是在不改变速度或时间移位的情况下改变声音的频率。例如，男性的声音音高低于女性。增加声音记录中的音高水平可能会使男性听起来像女性。'
- en: Pitch shifting should be used cautiously when augmenting human speech, music,
    environment, and nature audio files. The **safe** level can change drastically
    for the same dataset, depending on the AI prediction’s objective.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在增强人类语音、音乐、环境和自然音频文件时，音高移位应谨慎使用。对于相同的数据集，**安全**级别可能会根据AI预测目标的不同而大幅变化。
- en: For example, the recordings of daily meadow sounds can be used to count how
    many birds visit the meadow a day, or an AI can predict what kinds of birds dwell
    in the field. The pitch-shifting **safe** range for counting birds is higher than
    for identifying birds. Applying pitch shifting to bird songs may inadvertently
    make one bird sound like other birds.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，记录日常草地的声音可以用来统计每天有多少只鸟访问草地，或者AI可以预测哪些种类的鸟类栖息在该领域。用于计算鸟类数量的音高移位**安全**范围比用于识别鸟类的范围要高。将音高移位应用于鸟鸣声可能会无意中使一种鸟的叫声听起来像其他鸟的叫声。
- en: Another pitch alternation method is polarity inversion.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种音高变化方法是极性反转。
- en: Polarity inversion
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 极性反转
- en: '**Polarity inversion** involves switching the amplitude value from positive
    to negative and vice versa. Mathematically, it multiplies the amplitude by a negative
    value. Graphically, it alters the color blue and makes it yellow and vice versa
    in *Figure 7**.1*.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**极性反转**是指将幅度值从正数转为负数，反之亦然。从数学角度来看，它通过负值乘以幅度。从图形角度来看，它改变了蓝色并将其变为黄色，反之亦然，详见*图7.1*。'
- en: To most humans, the playback after polarity inversion sounds the same as the
    original audio. It is most beneficial for ML when used with the phase-awareness
    model. There is no **safe** range because it is either used or not used.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 对大多数人来说，极性反转后的播放听起来与原始音频相同。当与相位意识模型一起使用时，它对机器学习最为有利。没有**安全**范围，因为它要么被使用，要么不被使用。
- en: The following augmentation is about adding noise to an audio file.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 以下增强方法是向音频文件中添加噪声。
- en: Noise injection
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 噪声注入
- en: '**Noise injection** adds signal noise to an audio file. The effect of adding
    noise is that the augmented sound appears as though it consists of pops and crackles.
    The five types of noise typically used in audio augmentation are **background
    noise**, **Gaussian**, **random**, **signal-to-noise ratio** (**SNR**), and **short**
    **burst noise**.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**噪声注入**向音频文件添加信号噪声。添加噪声的效果是增强后的声音看起来像是由爆裂声和噼啪声组成的。通常用于音频增强的五种噪声类型是**背景噪声**、**高斯噪声**、**随机噪声**、**信噪比**（**SNR**）和**短暂**
    **突发噪声**。'
- en: How much noise or the **safe** level depends on the AI project’s objective and
    the recording. Sometimes, you might have to employ a domain expert to attain a
    **safe** level.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 噪声或**安全**级别的高低取决于AI项目的目标和录音内容。有时，您可能需要聘请领域专家来达到**安全**级别。
- en: Many more techniques could be classified as commonly used audio augmentations,
    such as clip, gain transition, normalize, padding, or reverse, but let’s move
    on and look at filters and masking.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 许多其他技术可以归类为常用的音频增强技术，如剪辑、增益过渡、归一化、填充或反向处理，但我们接下来将讨论滤波器和掩蔽技术。
- en: Filters
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 滤波器
- en: Audio filters help eliminate unwanted interference or noise from an audio recording.
    The result is to improve the tone and playback of human speech, music, nature,
    and environmental recordings.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 音频滤波器有助于消除音频录音中的不必要干扰或噪声。其结果是改善人声、音乐、自然和环境录音的音调和播放效果。
- en: The audio filter changes frequency by **increasing**, **boosting**, or **amplifying**
    a range of frequencies. A filter could also **decrease**, **delete**, **cut**,
    **attenuate**, or **pass** a frequency range. For example, using a low-pass filter,
    you could remove the traffic noise from a recording of two people talking in a
    city.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 音频滤波器通过**增加**、**增强**或**放大**一定范围的频率来改变频率。滤波器还可以**减少**、**删除**、**切除**、**衰减**或**通过**某个频率范围。例如，使用低通滤波器，可以去除城市中两人对话录音中的交通噪声。
- en: 'In particular, we will cover the following filters:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 特别地，我们将介绍以下滤波器：
- en: Low-pass filter
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 低通滤波器
- en: High-pass filter
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高通滤波器
- en: Band-pass filter
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带通滤波器
- en: Low-shelf filter
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 低架滤波器
- en: High-shelf filter
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高架滤波器
- en: Band-stop filter
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带阻滤波器
- en: Peak filter
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 峰值滤波器
- en: Let’s start with the low pass filter.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从低通滤波器开始。
- en: Low-pass filter
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 低通滤波器
- en: The **low-pass filter** cuts or deletes low-frequency sounds, such as traffic
    noise, machine engine rumbles, or elephant calls.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**低通滤波器**切除或删除低频声音，如交通噪声、机器发动机轰鸣声或大象叫声。'
- en: Typically, the minimum cut-off frequency is 150 Hz, the maximum cut-off is 7.5
    kHz, the minimum roll-off is 12 dB, and the maximum roll-off is 24 dB.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，最小截止频率为150 Hz，最大截止频率为7.5 kHz，最小滚降为12 dB，最大滚降为24 dB。
- en: 'Here is a fun fact: elephant calls are lower than 20 Hz or into the infrasound
    range. The next filter we’ll cover is the high pass filter.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有个有趣的事实：大象的叫声低于20 Hz，或进入次声波范围。接下来我们要讨论的滤波器是高通滤波器。
- en: High-pass filter
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 高通滤波器
- en: Similar to the low-pass filter, the **high-pass filter** cuts high-frequency
    sound, such as whistling, babies crying, nail scratching, or bell ringing.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 与低通滤波器类似，**高通滤波器**切除高频声音，如口哨声、婴儿哭声、指甲刮擦声或钟声。
- en: Typically, the minimum and maximum cut-off frequencies are 20 Hz and 2.4 kHz,
    and the minimum and maximum roll-offs are 12 dB and 24 dB, respectively.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，最小和最大截止频率分别为20 Hz和2.4 kHz，最小和最大滚降分别为12 dB和24 dB。
- en: 'Fun fact: a human can whistle around 3 to 4 kHz. There is one more pass filter
    we need to look at: the ban pass filter.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的事实：人类的口哨声音大约在3到4 kHz之间。我们还需要了解另一个滤波器：带通滤波器。
- en: Band-pass filter
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 带通滤波器
- en: The **band-pass filter** limits the sound wave to a range of frequencies. In
    other words, it combines the low and high-band filters. For example, a band-pass
    filter can make it clearer to listen to a recording of two friends’ conversations
    in a busy Paris outdoor restaurant. Similarly, it can be used to isolate bird
    song recordings in a noisy Amazon jungle.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**带通滤波器**将声波限制在一定范围的频率内。换句话说，它结合了低带和高带滤波器。例如，带通滤波器可以让您更清楚地听到巴黎户外餐厅中两人对话的录音。同样，它也可以用于在嘈杂的亚马逊丛林中隔离鸟鸣录音。'
- en: Typically, the minimum and maximum center frequencies are 200 Hz and 4 kHz,
    the minimum and maximum bandwidth fractions are 0.5 and 1.99, and the minimum
    and maximum roll-offs are 12 dB and 24 dB, respectively.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，最小和最大中心频率分别为200 Hz和4 kHz，最小和最大带宽比例分别为0.5和1.99，最小和最大滚降分别为12 dB和24 dB。
- en: Now, let’s move on from pass filters to shelf filters.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们从通滤波器转到架滤波器。
- en: Low-shelf filter
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 低架滤波器
- en: '**Shelf filtering** is also known as **shelf equalization**. In particular,
    the **low-shelf filter** boosts or cuts the frequencies at the lower end of the
    spectrum. For example, you can use a low-shelf filter to reduce the bass in a
    heavy metal song.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**架滤波**也叫做**架均衡**。特别是，**低架滤波器**会提升或削减频谱低端的频率。例如，你可以使用低架滤波器来减少重金属歌曲中的低音。'
- en: Usually, the minimum and maximum center frequencies are 50 Hz and 4 kHz, and
    the minimum and maximum gain are -18 dB to 18 dB, respectively.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，最小和最大中心频率分别为50 Hz和4 kHz，最小和最大增益分别为-18 dB到18 dB。
- en: The next technique is the high-shelf filter.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个技术是高架滤波器。
- en: High-shelf filter
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 高架滤波器
- en: Similarly, a **high-shelf filter** increases or decreases the frequencies’ amplitude
    at the higher end of the spectrum. For example, you can use a high-shelf filter
    to brighten a music recording.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，**高架滤波器**会增加或减少频谱高端的频率幅度。例如，你可以使用高架滤波器来使音乐录音更加明亮。
- en: Commonly, the minimum and maximum center frequencies are 300 Hz and 7.5 kHz,
    and the minimum and maximum gains are -18 dB and 18 dB, respectively.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，最小和最大中心频率分别为300 Hz和7.5 kHz，最小和最大增益分别为-18 dB和18 dB。
- en: The band-stop filter is the next technique we’ll cover.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 带阻滤波器是我们接下来要讲解的技术。
- en: Band-stop filter
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 带阻滤波器
- en: The **band-stop filter** is also known as a **ban-reject filter** or **notch
    filter**. It deletes frequencies between two cut-off points or on either side
    of the range. In addition, it uses low and high-pass filters under the hood. For
    example, a band-stop filter can remove unwanted spikes and noises from a backyard
    music session jam.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**带阻滤波器**也叫做**带阻滤波器**或**陷波滤波器**。它删除位于两个截止点之间或在频率范围两侧的频率。此外，它在内部使用低通和高通滤波器。例如，带阻滤波器可以去除后院音乐会即兴演奏中的不需要的尖峰和噪音。'
- en: Typically, the minimum and maximum center frequencies are 200 Hz and 4 kHz,
    the minimum and maximum bandwidth fractions are 0.5 and 1.99, and the minimum
    and maximum roll-offs are 12 dB and 24 dB, respectively.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，最小和最大中心频率分别为200 Hz和4 kHz，最小和最大带宽分数分别为0.5和1.99，最小和最大滚降分别为12 dB和24 dB。
- en: The peak filter is the last audio augmentation technique that will be covered
    in this chapter.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 峰值滤波器是本章将要讲解的最后一种音频增强技术。
- en: Peak filter
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 峰值滤波器
- en: The **peak** or **bell filter** is the opposite of the band-stop filter. In
    other words, it boosts shelf filters with a narrow band and higher gain signal
    or allows a boost or cut around a center frequency.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '**峰值**或**钟形滤波器**与带阻滤波器相反。换句话说，它增强具有窄带和更高增益信号的架滤波器，或允许围绕中心频率进行增益或削减。'
- en: Typically, the minimum and maximum center frequencies are 50 Hz and 7.5 kHz,
    and the minimum and maximum gains are -24 dB and 24 dB, respectively.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，最小和最大中心频率分别为50 Hz和7.5 kHz，最小和最大增益分别为-24 dB和24 dB。
- en: Many methods are available in audio augmentation libraries. Thus, the next step
    is to select one or two audio augmentation libraries for Pluto’s wrapper functions.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 音频增强库中有很多方法。因此，下一步是为Pluto的包装函数选择一个或两个音频增强库。
- en: Audio augmentation libraries
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 音频增强库
- en: There are many commercial and open source audio data augmentation libraries.
    In this chapter, we will focus on open source libraries available on **GitHub**.
    Some libraries are more robust than others, and some focus on a particular subject,
    such as human speech. Pluto will write wrapper functions using the libraries provided
    to do the heavy lifting; thus, you can select more than one library in your project.
    If a library is implemented in the **CPU**, it may not be suitable for dynamic
    data augmenting during the ML training cycle because it will slow down the process.
    Instead, choose a library that can run on the **GPU**. Choose a robust and easy-to-implement
    library to learn new audio augmentation techniques or output the augmented data
    on local or cloud disk space.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多商业和开源的音频数据增强库。在本章中，我们将重点介绍**GitHub**上可用的开源库。有些库比其他库更强大，有些库专注于某一特定主题，例如人类语音。Pluto将使用提供的库编写包装函数来进行繁重的计算，因此，你可以在项目中选择多个库。如果一个库是用**CPU**实现的，它可能不适合在机器学习训练周期中进行动态数据增强，因为它会减慢过程。因此，选择一个可以在**GPU**上运行的库。选择一个强大且易于实现的库，以便学习新的音频增强技术或将增强后的数据输出到本地或云端磁盘空间。
- en: 'The well-known open source libraries for audio augmentation are as follows:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 知名的开源音频增强库如下：
- en: '**Librosa** is an open source Python library for music and audio analysis.
    It was made available in 2015 and has long been a popular choice. Many other audio
    processing and augmentation libraries use Librosa’s functions as building blocks.
    It can be found on GitHub at [https://github.com/librosa/librosa](https://github.com/librosa/librosa).'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Librosa** 是一个开源的 Python 库，用于音乐和音频分析。它在 2015 年发布，并长期以来一直是流行的选择。许多其他音频处理和增强库将
    Librosa 的功能作为构建模块。它可以在 GitHub 上找到，网址为 [https://github.com/librosa/librosa](https://github.com/librosa/librosa)。'
- en: '**Audiomentations** is a Python library specifically for audio data augmentation.
    Its key benefit is its robustness and easy project integration. It is cited in
    many Kaggle competition winners. It can be found on GitHub at [https://github.com/iver56/audiomentations](https://github.com/iver56/audiomentations).'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Audiomentations** 是一个专门用于音频数据增强的 Python 库。其主要优点是其鲁棒性和易于集成到项目中。它被许多 Kaggle
    比赛的获胜者引用。它可以在 GitHub 上找到，网址为 [https://github.com/iver56/audiomentations](https://github.com/iver56/audiomentations)。'
- en: Facebook or Meta research published **Augly** as an open source Python library
    for image and audio augmentation. The goal is to provide specific data augmentations
    for real-life projects. It can be found on GitHub at [https://github.com/facebookresearch/AugLy/tree/main/augly/audio](https://github.com/facebookresearch/AugLy/tree/main/augly/audio).
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Facebook 或 Meta 研究发布了 **Augly**，这是一个用于图像和音频增强的开源 Python 库。其目标是为实际项目提供特定的数据增强。它可以在
    GitHub 上找到，网址为 [https://github.com/facebookresearch/AugLy/tree/main/augly/audio](https://github.com/facebookresearch/AugLy/tree/main/augly/audio)。
- en: '**Keras** is a Python library for audio and music signal preprocessing. It
    implements frequency conversions and data augmentation using **GPU** preprocessing.
    It can be found on GitHub at [https://github.com/keunwoochoi/kapre](https://github.com/keunwoochoi/kapre).'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Keras** 是一个用于音频和音乐信号预处理的 Python 库。它实现了频率转换和使用 **GPU** 预处理的数据增强。它可以在 GitHub
    上找到，网址为 [https://github.com/keunwoochoi/kapre](https://github.com/keunwoochoi/kapre)。'
- en: '**Nlpaug** is a Python library that’s versatile for both language and audio
    data augmentation. [*Chapter 5*](B17990_05.xhtml#_idTextAnchor101) used Nlpaug
    for text augmentation, but in this chapter, we will use the audio library. It
    can be found on GitHub at [https://github.com/makcedward/nlpaug](https://github.com/makcedward/nlpaug).'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Nlpaug** 是一个多功能的 Python 库，适用于语言和音频数据增强。[*第 5 章*](B17990_05.xhtml#_idTextAnchor101)使用
    Nlpaug 进行文本增强，但在本章中，我们将使用音频库。它可以在 GitHub 上找到，网址为 [https://github.com/makcedward/nlpaug](https://github.com/makcedward/nlpaug)。'
- en: Spotify’s Audio Intelligence Lab published the **Pedalboard** Python library.
    The goal is to enable studio-quality audio effects for ML. It can be found on
    GitHub at [https://github.com/spotify/pedalboard](https://github.com/spotify/pedalboard).
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spotify 的音频智能实验室发布了 **Pedalboard** Python 库。其目标是为机器学习提供工作室级别的音频效果。它可以在 GitHub
    上找到，网址为 [https://github.com/spotify/pedalboard](https://github.com/spotify/pedalboard)。
- en: '**Pydiogment** is a Python library that aims to simplify audio augmentation.
    It is easy to use but less robust than other audio augmentation libraries. It
    can be found on GitHub at [https://github.com/SuperKogito/pydiogment](https://github.com/SuperKogito/pydiogment).'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Pydiogment** 是一个旨在简化音频增强的 Python 库。它易于使用，但不如其他音频增强库强大。它可以在 GitHub 上找到，网址为
    [https://github.com/SuperKogito/pydiogment](https://github.com/SuperKogito/pydiogment)。'
- en: '**Torch-augmentations** is an implementation of the **Audiomentations** library
    for **GPU** processing. It can be found on GitHub at [https://github.com/asteroid-team/torch-audiomentations](https://github.com/asteroid-team/torch-audiomentations).'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Torch-augmentations** 是 **Audiomentations** 库在 **GPU** 上的实现。它可以在 GitHub 上找到，网址为
    [https://github.com/asteroid-team/torch-audiomentations](https://github.com/asteroid-team/torch-audiomentations)。'
- en: Fun fact
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 趣味事实
- en: '**Audiomentations** library version 0.28.0 consists of 36 augmentation functions,
    **Librosa** library version 0.9.2 consists of over 400 methods, and the **Pydiogment**
    library’s latest update (July 2020) consists of 14 augmentation methods.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '**Audiomentations** 库的版本 0.28.0 包含 36 个增强函数，**Librosa** 库的版本 0.9.2 包含超过 400
    个方法，**Pydiogment** 库的最新更新（2020 年 7 月）包含 14 个增强方法。'
- en: Pluto will primarily use the **Audiomentations** and **Librosa** libraries to
    demonstrate the concepts we’ve mentioned in Python code. But first, we will download
    Pluto and use him to download real-world audio datasets from the *Kaggle* website.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: Pluto 将主要使用 **Audiomentations** 和 **Librosa** 库来演示我们在 Python 代码中提到的概念。但首先，我们将下载
    Pluto 并使用它从 *Kaggle* 网站下载真实世界的音频数据集。
- en: Real-world audio datasets
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 真实世界的音频数据集
- en: By now, you should be familiar with downloading Pluto and real-world datasets
    from the *Kaggle* website. We chose to download Pluto from [*Chapter 2*](B17990_02.xhtml#_idTextAnchor038)
    because the image augmentation functions shown in *Chapters 3* and *4*, and the
    text augmentation techniques shown in *Chapters 5* and *6*, are not beneficial
    for audio augmentation.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 到现在为止，你应该已经熟悉如何从 *Kaggle* 网站下载 Pluto 和真实世界数据集。我们选择从 [*第二章*](B17990_02.xhtml#_idTextAnchor038)
    下载 Pluto，因为在 *第三章* 和 *第四章* 中展示的图像增强功能，以及在 *第五章* 和 *第六章* 中展示的文本增强技术，对于音频增强并没有太大帮助。
- en: 'The three real-world audio datasets we will use are as follows:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用的三个真实世界音频数据集如下：
- en: 'The *Musical Emotions Classification* (*MEC*) real-world audio dataset from
    Kaggle contains 2,126 songs separated into **train** and **test** folders. They
    are instrumental music, and the goal is to predict **happy** or **sad** music.
    Each piece is about 9 to 10 minutes in length and is in ***.wav** format. It was
    published in 2020 and is available to the public. Its license is **Attribution-ShareAlike
    4.0 International (CC BY-SA** **4.0)**: [https://creativecommons.org/licenses/by-sa/4.0/](https://creativecommons.org/licenses/by-sa/4.0/).'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自 Kaggle 的 *Musical Emotions Classification*（*MEC*）真实世界音频数据集包含 2,126 首歌曲，分为
    **训练** 和 **测试** 文件夹。它们是器乐音乐，目标是预测 **快乐** 或 **悲伤** 的音乐。每首歌曲大约 9 到 10 分钟，格式为 ***.wav**。该数据集于
    2020 年发布，并对公众开放，许可证为 **Attribution-ShareAlike 4.0 International (CC BY-SA** **4.0)**：[https://creativecommons.org/licenses/by-sa/4.0/](https://creativecommons.org/licenses/by-sa/4.0/)。
- en: 'The *Crowd Sourced Emotional Multimodal Actors Dataset* (*CREMA-D*) real-world
    audio dataset from Kaggle contains 7,442 original clips from 91 actors. The actors
    are 48 **males** and 43 **females** between 20 to 74 years old, and their ethnicities
    are **African American**, **Asian**, **Caucasian**, **Hispanic**, and **Unspecified**.
    In addition, the spoken phrases represent six different emotions. They are **anger**,
    **disgust**, **fear**, **happy**, **neutral**, and **sad**. There is no set goal
    for the datasets, but you can use them to predict age, sex, ethnicity, or emotions.
    It was published in 2019 and is available to the public. Its license is **Open
    Data Commons Attribution License (ODC-By)** **v1.0**: [https://opendatacommons.org/licenses/by/1-0/index.html](https://opendatacommons.org/licenses/by/1-0/index.html).'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自 Kaggle 的 *Crowd Sourced Emotional Multimodal Actors Dataset*（*CREMA-D*）真实世界音频数据集包含
    7,442 个来自 91 位演员的原始片段。这些演员中，48 位为 **男性**，43 位为 **女性**，年龄介于 20 至 74 岁之间，种族包括 **非裔美国人**、**亚洲人**、**白人**、**西班牙裔**和
    **未指定**。此外，语音片段表达了六种不同的情感，包括 **愤怒**、**恶心**、**恐惧**、**快乐**、**中立**和 **悲伤**。该数据集没有固定的目标，但你可以用它来预测年龄、性别、种族或情感。该数据集于
    2019 年发布，并对公众开放，许可证为 **Open Data Commons Attribution License (ODC-By)** **v1.0**：[https://opendatacommons.org/licenses/by/1-0/index.html](https://opendatacommons.org/licenses/by/1-0/index.html)。
- en: 'The *urban_sound_8k* (*US8K*) real-world dataset from Kaggle contains 8,732
    labeled sound excerpts from an urban setting. Each clip is between 2 to 4 seconds,
    and the classification is **Air conditioner, Car horn, Children playing, Dogs
    barking, Drilling, Engine idling, Gunshots, Jackhammers, Sirens, and Street music**.
    It was published in 2021 and is available to the public. Its license is **CC0
    1.0 Universal (CC0 1.0) Public Domain** **Dedication**: [https://creativecommons.org/publicdomain/zero/1.0/](https://creativecommons.org/publicdomain/zero/1.0/).'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自 Kaggle 的 *urban_sound_8k*（*US8K*）真实世界数据集包含来自城市环境的 8,732 个标注音频片段。每个片段长度为 2
    到 4 秒，分类包括 **空调、汽车喇叭、儿童玩耍、狗吠、钻孔、发动机怠速、枪声、电锯声、警笛声和街头音乐**。该数据集于 2021 年发布并对公众开放，许可证为
    **CC0 1.0 Universal (CC0 1.0) Public Domain** **Dedication**：[https://creativecommons.org/publicdomain/zero/1.0/](https://creativecommons.org/publicdomain/zero/1.0/)。
- en: The three audio datasets – music, human speech, and environmental sound – represent
    the typical sounds you hear daily.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这三个音频数据集——音乐、人类语音和环境声音——代表了你每天听到的典型声音。
- en: 'The following four steps are the same in every chapter. Review *Chapters 2*
    and *3* if you need clarification. The steps are as follows:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 以下四个步骤在每一章中都是相同的。如果需要澄清，请回顾 *第二章* 和 *第三章*。步骤如下：
- en: Retrieve the Python Notebook and Pluto.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取 Python Notebook 和 Pluto。
- en: Download real-world data.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载真实世界的数据。
- en: Load the data into pandas.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将数据加载到 pandas 中。
- en: Listen to and view the audio.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 听并查看音频。
- en: Let’s begin by downloading Pluto in the Python Notebook.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从在 Python Notebook 中下载 Pluto 开始。
- en: Python Notebook and Pluto
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python Notebook 和 Pluto
- en: Start by loading the `data_augmentation_with_python_chapter_7.ipynb` file into
    Google Colab or your chosen Jupyter Notebook or JupyterLab environment. From this
    point onward, the code snippets will be from the Python Notebook, which contains
    the complete functions.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将`data_augmentation_with_python_chapter_7.ipynb`文件加载到Google Colab或您选择的Jupyter
    Notebook或JupyterLab环境中。从此开始，代码片段将来自Python Notebook，包含完整的函数。
- en: 'The next step is to clone the repository. We will reuse the code from [*Chapter
    2*](B17990_02.xhtml#_idTextAnchor038). The `!git` and `%run` statements are used
    to start up Pluto:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是克隆仓库。我们将重用来自[*第二章*](B17990_02.xhtml#_idTextAnchor038)的代码。`!git`和`%run`语句用于启动冥王星：
- en: '[PRE2]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The output will be as follows or similar:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示或类似：
- en: '[PRE3]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We need to do one more check to ensure Pluto is loaded satisfactorily. The
    following command asks Pluto to state his status:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要再做一次检查，以确保冥王星已正确加载。以下命令会要求冥王星报告其状态：
- en: '[PRE4]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The output will be as follows or similar, depending on your system:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示或类似，具体取决于您的系统：
- en: '[PRE5]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Next, Pluto will download the audio dataset.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，冥王星将下载音频数据集。
- en: Real-world data and pandas
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 现实世界数据与pandas
- en: 'Pluto has downloaded the real-world music dataset, the MEC, using the `fetch_kaggle_dataset(url)`
    function from [*Chapter 2*](B17990_02.xhtml#_idTextAnchor038). He found that the
    dataset consists of a comma-separated variable (CSV) header file. Thus, he used
    the `fetch_df(fname)` function to import it into pandas:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 冥王星已通过`fetch_kaggle_dataset(url)`函数从[*第二章*](B17990_02.xhtml#_idTextAnchor038)下载了现实世界的音乐数据集MEC。他发现数据集由逗号分隔的变量（CSV）头文件组成。因此，他使用`fetch_df(fname)`函数将其导入到pandas中：
- en: '[PRE6]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The result is as follows:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Figure 7.3 – Music (MEC) top 3 records](img/B17990_07_03.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.3 – 音乐（MEC）前三条记录](img/B17990_07_03.jpg)'
- en: Figure 7.3 – Music (MEC) top 3 records
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.3 – 音乐（MEC）前三条记录
- en: 'The `_append_music_full_path()` and `fetch_music_full_path()` helper functions.
    The key code lines are as follows:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '`_append_music_full_path()`和`fetch_music_full_path()`辅助函数。关键代码行如下：'
- en: '[PRE7]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The function’s code can be found in the Python Notebook. The result is as follows:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 函数的代码可以在Python Notebook中找到。结果如下：
- en: '![Figure 7.4 – Music (MEC) top 3 records revised](img/B17990_07_04.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.4 – 音乐（MEC）前三条记录修订版](img/B17990_07_04.jpg)'
- en: Figure 7.4 – Music (MEC) top 3 records revised
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.4 – 音乐（MEC）前三条记录修订版
- en: 'The next real-world dataset from Kaggle is for human speech (**CREMA-D**).
    Pluto must download and import it into pandas using the following commands:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 来自Kaggle的下一个现实世界数据集是人类语音（**CREMA-D**）。冥王星必须使用以下命令下载并将其导入到pandas中：
- en: '[PRE8]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The output is as follows:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 7.5 – Voice (CREMA-D) top 3 records revised](img/B17990_07_05.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.5 – 声音（CREMA-D）前三条记录修订版](img/B17990_07_05.jpg)'
- en: Figure 7.5 – Voice (CREMA-D) top 3 records revised
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.5 – 声音（CREMA-D）前三条记录修订版
- en: 'The third audio dataset from Kaggle is for urban sound (**US8K**). Incidentally,
    Kaggle consists of about 1,114 real-world audio datasets as of December 2022\.
    Pluto must download and import it into pandas using the following commands:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 来自Kaggle的第三个音频数据集是城市声音（**US8K**）。顺便提一下，截至2022年12月，Kaggle包含大约1,114个现实世界的音频数据集。冥王星必须下载并使用以下命令将其导入到pandas中：
- en: '[PRE9]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The output is as follows:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 7.6 – Urban sound (US8K) top 3 records revised](img/B17990_07_06.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.6 – 城市声音（US8K）前三条记录修订版](img/B17990_07_06.jpg)'
- en: Figure 7.6 – Urban sound (US8K) top 3 records revised
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.6 – 城市声音（US8K）前三条记录修订版
- en: Lastly, the `pluto_data` directory; he stored the control clip in the `pluto.audio_control_dmajor`
    variable.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在`pluto_data`目录中，他将控制剪辑存储在`pluto.audio_control_dmajor`变量中。
- en: Fun challenge
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的挑战
- en: 'Pluto challenges you to search for and download an additional audio dataset
    from the *Kaggle* website or your project. It is more meaningful if you work with
    the data that matters to you. So long as you download and import it into pandas,
    all the augmentation wrapper functions will work the same for your audio files.
    Hint: use Pluto’s `fetch_kaggle_dataset()` and `fetch_df()` functions.'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 冥王星挑战你搜索并下载一个额外的音频数据集，来自*Kaggle*网站或你的项目。如果你使用与你有关的数据工作，它将更具意义。只要你下载并将其导入到pandas中，所有的数据增强包装函数都会对你的音频文件起作用。提示：使用冥王星的`fetch_kaggle_dataset()`和`fetch_df()`函数。
- en: With that, Pluto has downloaded the three real-world audio datasets. The next
    step is to play the audio and view the audio **Waveform** graph.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 至此，冥王星已下载了三个现实世界的音频数据集。下一步是播放音频并查看音频**波形**图。
- en: Listening and viewing
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 听取和查看
- en: 'Pluto has written three new functions to play the audio and display the `_draw_area_with_neg()`
    helper method, which displays the area graph for positive and negative numbers
    in the same dataset. Incidentally, the pandas and **Matplotlib** area graphs can
    only show positive values. The essential code line for this function is as follows:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: Pluto 写了三个新函数来播放音频并展示 `_draw_area_with_neg()` 辅助方法，该方法展示同一数据集中正负数的面积图。顺便提一下，Pandas
    和 **Matplotlib** 面积图只能显示正值。该函数的核心代码行如下：
- en: '[PRE10]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The full function code can be found in the Python Notebook. The next helper
    function is `_draw_audio()`. Its main objectives are loading or reading the audio
    file using the **Librosa** library, drawing the two **Waveform** graphs, and displaying
    the play audio button. Pandas has the same filename that it had when fetching
    the audio datasets. The key code lines for the function are as follows:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的函数代码可以在 Python Notebook 中找到。下一个辅助函数是 `_draw_audio()`。它的主要目标是使用 **Librosa**
    库加载或读取音频文件，绘制两个 **Waveform** 图表，并显示播放音频按钮。Pandas 使用与提取音频数据集时相同的文件名。该函数的关键代码行如下：
- en: '[PRE11]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The entirety of this function can be found in the Python Notebook. The `draw_audio()`
    method invokes the two helper functions. Additionally, it selects a random audio
    file from the pandas DataFrame. Thus, Pluto runs the command repeatedly to listen
    to and view a different audio file from the real-world dataset.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数的完整内容可以在 Python Notebook 中找到。`draw_audio()` 方法调用了两个辅助函数。此外，它还从 Pandas DataFrame
    中选择了一个随机音频文件。因此，Pluto 会反复执行命令，以便聆听并查看来自现实世界数据集的不同音频文件。
- en: 'Pluto can display a music clip from the **MEC** dataset using the following
    command:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: Pluto 可以使用以下命令展示来自 **MEC** 数据集的音乐片段：
- en: '[PRE12]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The audio play button is as follows:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 音频播放按钮如下：
- en: '![Figure 7.7 – Audio play button](img/B17990_07_07.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.7 – 音频播放按钮](img/B17990_07_07.jpg)'
- en: Figure 7.7 – Audio play button
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.7 – 音频播放按钮
- en: 'The **Waveform** graphs are as follows:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '**Waveform** 图表如下：'
- en: '![Figure 7.8 – Music waveform graph (Happy36521)](img/B17990_07_08.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.8 – 音乐波形图 (Happy36521)](img/B17990_07_08.jpg)'
- en: Figure 7.8 – Music waveform graph (Happy36521)
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.8 – 音乐波形图 (Happy36521)
- en: The audio play button in *Figures 7.7* and *7.8* (`Happy36521.wav`) will play
    the instrumental music with the flute, drum, and guitar.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 7.7* 和 *7.8* 中的音频播放按钮 (`Happy36521.wav`) 将播放包含长笛、鼓和吉他的器乐音乐。'
- en: Fun fact
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的事实
- en: Pluto names the function `draw_audio()` and not `play_audio()` because this
    book needs a Waveform graph, and to listen to the audio, you have to go to the
    Python Notebook and click on the play button shown in *Figure 7**.7*. Like all
    wrapper functions, you can repeatedly run the `draw_audio()` method to see and
    listen to different audio files from the datasets.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: Pluto 将该函数命名为 `draw_audio()` 而非 `play_audio()`，因为本书需要一个 Waveform 图表，并且要听音频，你必须进入
    Python Notebook 并点击 *图 7.7* 中显示的播放按钮。像所有包装函数一样，你可以反复运行 `draw_audio()` 方法，查看并听取数据集中不同的音频文件。
- en: 'Pluto displays a human speech clip from the **CREMA-D** dataset using the following
    command:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: Pluto 使用以下命令展示来自 **CREMA-D** 数据集的人类语音片段：
- en: '[PRE13]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The audio play button’s output is not displayed here because it looks the same
    as in *Figure 7**.7*. The result of the **Waveform** graph is as follows:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 音频播放按钮的输出此处没有显示，因为它与 *图 7.7* 中的播放按钮相同。**Waveform** 图表的结果如下：
- en: '![Figure 7.9 – Human speech waveform graph (1078_TIE_HAP_XX)](img/B17990_07_09.jpg)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.9 – 人类语音波形图 (1078_TIE_HAP_XX)](img/B17990_07_09.jpg)'
- en: Figure 7.9 – Human speech waveform graph (1078_TIE_HAP_XX)
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.9 – 人类语音波形图 (1078_TIE_HAP_XX)
- en: 'The audio of *Figure 7**.9* (`1078_TIE_HAP_XX.wav`) is a woman speaking the
    phrase: *that is exactly what happens*. She sounds happy and middle-aged.'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 7.9* 的音频 (`1078_TIE_HAP_XX.wav`) 是一位女性说出短语：*这正是发生的事情*。她听起来很开心，年龄中等。'
- en: 'Pluto displays an urban sound clip from the **US8K** dataset using the following
    command:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: Pluto 使用以下命令展示来自 **US8K** 数据集的城市声音片段：
- en: '[PRE14]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The result of the **Waveform** graph is as follows:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '**Waveform** 图表的结果如下：'
- en: '![Figure 7.10 – Urban sound waveform graph (119455-5-0-7)](img/B17990_07_10.jpg)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.10 – 城市声音波形图 (119455-5-0-7)](img/B17990_07_10.jpg)'
- en: Figure 7.10 – Urban sound waveform graph (119455-5-0-7)
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.10 – 城市声音波形图 (119455-5-0-7)
- en: The audio for *Figure 7**.10* (`119455-5-0-7.wav`) is the sound of jackhammers.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 7.10* 的音频 (`119455-5-0-7.wav`) 是电锤的声音。'
- en: With that, we’ve discussed various audio augmentation concepts, selected audio
    libraries, downloaded Pluto, and asked him to fetch real-world datasets for music,
    human speech, and urban sounds. Pluto now also plays the audio and displays the
    Waveform graph for each file.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 到这里，我们已经讨论了各种音频增强概念，选择了音频库，下载了Pluto，并要求他获取音乐、人声和城市声音的真实世界数据集。现在，Pluto也会播放音频并显示每个文件的波形图。
- en: The next step is writing Python wrapper code from scratch to gain a deeper understanding
    of the audio augmentation techniques we’ve covered.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是从头开始编写Python包装代码，以更深入地理解我们所涵盖的音频增强技术。
- en: Reinforcing your learning
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 强化你的学习
- en: 'The key objectives of the `_audio_transform()` helper function are selecting
    a random clip, performing the augmentation using the Audiomentations library function,
    displaying the WaveForm graph using the `_fetch_audio_data()` and `_draw_audio()`
    helper functions, and showing the audio play button. The key code lines are as
    follows:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '`_audio_transform()`辅助函数的主要目标是选择一个随机剪辑，使用Audiomentations库函数进行增强，使用`_fetch_audio_data()`和`_draw_audio()`辅助函数显示波形图，并显示音频播放按钮。关键代码如下：'
- en: '[PRE15]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The full function’s code can be found in the Python Notebook. Pluto will write
    the Python wrapper functions for audio augmentation in the same order as previously
    discussed. In particular, they are as follows:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 完整函数的代码可以在Python笔记本中找到。Pluto将按之前讨论的顺序编写音频增强的Python包装函数，具体如下：
- en: Time shifting
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时间位移
- en: Time stretching
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时间拉伸
- en: Pitch scaling
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 音高缩放
- en: Noise injection
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 噪声注入
- en: Polarity inversion
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 极性反转
- en: Let’s start with **time shifting**.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从**时间位移**开始。
- en: Time shifting
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 时间位移
- en: 'The definition and key code lines for the `play_aug_time_shift()` function
    are as follows:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '`play_aug_time_shift()`函数的定义和关键代码如下：'
- en: '[PRE16]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The full function’s code can be found in the Python Notebook. Pluto tests the
    time shift wrapper function with the audio control file as follows:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 完整函数的代码可以在Python笔记本中找到。Pluto测试了音频控制文件上的时间位移包装函数，如下所示：
- en: '[PRE17]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The output for the time shift augmented audio clip is as follows:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 时间位移增强音频剪辑的输出如下：
- en: '![Figure 7.11 – Time shift (control-d-major.mp3)](img/B17990_07_11.jpg)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.11 – 时间位移（control-d-major.mp3）](img/B17990_07_11.jpg)'
- en: Figure 7.11 – Time shift (control-d-major.mp3)
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.11 – 时间位移（control-d-major.mp3）
- en: 'The wrapper function displays the augmented audio clip, *Figure 7**.11*, and
    the original audio clip, *Figure 7**.12*, for comparison. Sometimes, you must
    look at the bottom, zoom-in waveform graph to see the augmented effects. The other
    option to hear the augmented impact is to click the play button, as shown in *Figure
    7**.13*, to listen to the before and after audio files in the Python Notebook:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 包装函数显示了增强后的音频剪辑，*图 7.11*，以及原始音频剪辑，*图 7.12*，以便进行比较。有时，您需要查看底部的放大波形图来观察增强效果。听到增强效果的另一种方式是点击播放按钮，如*图
    7.13*所示，听听在Python笔记本中播放前后的音频文件：
- en: '![Figure 7.12 – Original time shift (control-d-major.mp3)](img/B17990_07_12..jpg)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.12 – 原始时间位移（control-d-major.mp3）](img/B17990_07_12..jpg)'
- en: Figure 7.12 – Original time shift (control-d-major.mp3)
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.12 – 原始时间位移（control-d-major.mp3）
- en: 'Pluto plays the audio by clicking on the audio play button in the Python Notebook:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: Pluto通过点击Python笔记本中的音频播放按钮播放音频：
- en: '![Figure 7.13 – Audio play buttons, before and after](img/B17990_07_13..jpg)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.13 – 音频播放按钮，前后对比](img/B17990_07_13..jpg)'
- en: Figure 7.13 – Audio play buttons, before and after
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.13 – 音频播放按钮，前后对比
- en: Fun fact
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的事实
- en: Every time you run the wrapper function command, you will see and hear a new
    audio file with a random shift between the minimum and maximum range. It will
    select a different audio file from the real-world dataset.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 每次运行包装函数命令时，您将看到并听到一个具有随机位移的新音频文件，位移范围在最小和最大值之间。它将从真实世界数据集中选择不同的音频文件。
- en: The audio in *Figure 7**.11* shows that the piano scale in D major is shifted
    almost at the midpoint. Thus, it plays from **C#** scale down to **D** and then
    from **D** scale up to **C#**. Therefore, there were better options for music
    with time order dependency than the time shift technique.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 7.11*中的音频显示，D大调的钢琴音阶几乎被移位至中点。因此，它从**C#**音阶向下到**D**，然后从**D**音阶向上到**C#**。因此，对于具有时间顺序依赖关系的音乐，时间位移技术并不是最佳选择。'
- en: 'Moving on to the first of three datasets, Pluto runs the time shift function
    using default parameters on the music clip from the MEC dataset, as follows:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是三个数据集中的第一个，Pluto使用默认参数在MEC数据集中的音乐剪辑上运行时间位移功能，如下所示：
- en: '[PRE18]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The output augmented file is as follows:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 增强后的输出文件如下：
- en: '![Figure 7.14 – Time shift, music clip (Sad17422.wav)](img/B17990_07_14..jpg)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.14 – 时间移位，音乐片段 (Sad17422.wav)](img/B17990_07_14..jpg)'
- en: Figure 7.14 – Time shift, music clip (Sad17422.wav)
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.14 – 时间移位，音乐片段 (Sad17422.wav)
- en: 'The original file output for comparison is as follows:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 用于比较的原始文件输出如下：
- en: '![Figure 7.15 – Original music clip for the time shift (Sad17422.wav)](img/B17990_07_15..jpg)'
  id: totrans-241
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.15 – 时间移位的原始音乐片段 (Sad17422.wav)](img/B17990_07_15..jpg)'
- en: Figure 7.15 – Original music clip for the time shift (Sad17422.wav)
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.15 – 时间移位的原始音乐片段 (Sad17422.wav)
- en: It is hard to see the effect between *Figures 7.14* and *7.15* in the WaveForm
    graph, but if Pluto focuses on the lower zoom-in charts, he can see that it has
    shifted. When Pluto plays the audio, he cannot notice any difference between the
    before and after excerpts.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在波形图中，很难看到 *图 7.14* 和 *图 7.15* 之间的效果，但如果 Pluto 专注于较低的缩放图表，他可以看到它已经发生了偏移。当 Pluto
    播放音频时，他无法察觉前后片段之间的任何区别。
- en: The music in *Figure 7**.14* sounds like an adventure cinematic orchestra clip
    for a Westen movie that is on a repeating loop, so shifting and looping back works
    perfectly. Pluto repeatedly ran the wrapper function to retrieve a different audio
    file and confirmed no adverse effects. Thus, it is **safe** to timeshift the music
    from the MEC dataset using the default parameters.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 7.14* 中的音乐听起来像是一部西部电影的冒险电影乐队片段，在循环中重复播放，因此移位和循环回放效果完美。Pluto 反复运行包装函数以获取不同的音频文件，并确认没有不良影响。因此，使用默认参数对
    MEC 数据集中的音乐进行时间移位是 **安全** 的。'
- en: 'Moving on to the second real-world dataset, Pluto knows human speech is time
    sequence-dependent in the CREMA-D dataset. Thus, it is `0.5` so that you can see
    the damaging results. The command is as follows:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 转到第二个真实世界数据集，Pluto 知道在人类语音是时间序列依赖的 CREMA-D 数据集中。因此，`0.5` 让你可以看到有害的结果。命令如下：
- en: '[PRE19]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The output for the augmented timeshift audio clip is as follows:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 增强后的时间移位音频片段输出如下：
- en: '![Figure 7.16 – Time shift voice clip (1027_IEO_DIS_HI.wav)](img/B17990_07_16..jpg)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.16 – 时间移位语音片段 (1027_IEO_DIS_HI.wav)](img/B17990_07_16..jpg)'
- en: Figure 7.16 – Time shift voice clip (1027_IEO_DIS_HI.wav)
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.16 – 时间移位语音片段 (1027_IEO_DIS_HI.wav)
- en: 'The wrapper function also displays the original audio clip for comparison:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 包装函数还显示了原始音频片段以便比较：
- en: '![Figure 7.17 – Original time shift voice clip (1027_IEO_DIS_HI.wav)](img/B17990_07_17..jpg)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.17 – 原始时间移位语音片段 (1027_IEO_DIS_HI.wav)](img/B17990_07_17..jpg)'
- en: Figure 7.17 – Original time shift voice clip (1027_IEO_DIS_HI.wav)
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.17 – 原始时间移位语音片段 (1027_IEO_DIS_HI.wav)
- en: In the audio for *Figure 7**.16*, a man’s voice said, *eleven o’clock [a pause]
    it is*, while in the audio for *Figure 7**.17*, it said, *It is eleven o’clock*.
    Once again, the timeshifting technique is not a safe option for the human speech
    (CREMA-D) dataset.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *图 7.16* 的音频中，一位男士的声音说：“十一点 [停顿] 是的”，而在 *图 7.17* 的音频中，他说：“是十一点”。再次证明，时间移位技术对人类语音
    (CREMA-D) 数据集并不是一个安全的选项。
- en: 'On the third dataset, Pluto repeated running the following command on the urban
    sound from the US8K database:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 在第三个数据集中，Pluto 重复运行以下命令来处理来自 US8K 数据库的城市声音：
- en: '[PRE20]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The output for the augmented timeshift audio clip is as follows:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 增强后的时间移位音频片段输出如下：
- en: '![Figure 7.18 – Time shift urban sound (135526-6-3-0.wav)](img/B17990_07_18..jpg)'
  id: totrans-257
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.18 – 时间移位城市声音 (135526-6-3-0.wav)](img/B17990_07_18..jpg)'
- en: Figure 7.18 – Time shift urban sound (135526-6-3-0.wav)
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.18 – 时间移位城市声音 (135526-6-3-0.wav)
- en: 'The wrapper function also displays the original audio clip for comparison:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 包装函数还显示了原始音频片段以便比较：
- en: '![Figure 7.19 – Original time shift urban sound (135526-6-3-0.wav)](img/B17990_07_19..jpg)'
  id: totrans-260
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.19 – 原始时间移位城市声音 (135526-6-3-0.wav)](img/B17990_07_19..jpg)'
- en: Figure 7.19 – Original time shift urban sound (135526-6-3-0.wav)
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.19 – 原始时间移位城市声音 (135526-6-3-0.wav)
- en: '*Figures 7.17* and *7.18* are audio of a gunshot with a high level of urban
    noise. The time shift moved the gunshot a bit later. After running the command
    repeatedly, Pluto found the time shift with a **minimum fraction** of 0.5 acceptable
    for the US8K real-world dataset.'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 7.17* 和 *图 7.18* 是带有高水平城市噪音的枪声音频。时间移位使枪声稍微延后。经过多次运行命令后，Pluto 发现时间移位的 **最小分数**
    0.5 对于 US8K 真实世界数据集是可以接受的。'
- en: The next audio augmentation technique we’ll cover is time stretching.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们要介绍的音频增强技术是时间拉伸。
- en: Time stretching
  id: totrans-264
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 时间拉伸
- en: 'The definition and key code lines for the `play_aug_time_stretch()` function
    are as follows:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '`play_aug_time_stretch()` 函数的定义和关键代码行如下：'
- en: '[PRE21]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The fill function’s code can be found in the Python Notebook. Pluto tests the
    time stretch wrapper function with the audio control file and a `5.4`, as follows:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 填充函数的代码可以在 Python Notebook 中找到。Pluto 使用音频控制文件和 `5.4` 来测试时间拉伸包装函数，如下所示：
- en: '[PRE22]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The output for the time stretch augmented audio clip is as follows:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 时间拉伸增强音频片段的输出如下：
- en: '![Figure 7.20 – Time stretch (control-d-major.mp3)](img/B17990_07_20..jpg)'
  id: totrans-270
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.20 – 时间拉伸 (control-d-major.mp3)](img/B17990_07_20..jpg)'
- en: Figure 7.20 – Time stretch (control-d-major.mp3)
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.20 – 时间拉伸 (control-d-major.mp3)
- en: 'The wrapper function also displays the original audio clip for comparison:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 包装函数还会显示原始音频片段以供对比：
- en: '![Figure 7.21 – Original time stretch (control-d-major.mp3)](img/B17990_07_21..jpg)'
  id: totrans-273
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.21 – 原始时间拉伸 (control-d-major.mp3)](img/B17990_07_21..jpg)'
- en: Figure 7.21 – Original time stretch (control-d-major.mp3)
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.21 – 原始时间拉伸 (control-d-major.mp3)
- en: Pluto runs the wrapper function repeatedly, and the scaled audio is recognizable
    every time. *Figure 7**.20* audio plays the D major clip about three times faster,
    but the scales are recognizable.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: Pluto 多次运行包装函数，每次都能辨认出音频的音调。*图 7.20* 中的音频播放了 D 大调片段，大约是原速的三倍，但音调仍然可以辨认出来。
- en: 'The wrapper function works well on the control audio files, so Pluto applies
    to the music (MEC) dataset with a `3.0`, as follows:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 包装函数在控制音频文件上运行良好，因此 Pluto 对音乐（MEC）数据集应用 `3.0`，如下所示：
- en: '[PRE23]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The output for the time stretch augmented audio clip is as follows:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 时间拉伸增强音频片段的输出如下：
- en: '![ Figure 7.22 – Time stretch music (Sad44404.wav)](img/B17990_07_22..jpg)'
  id: totrans-279
  prefs: []
  type: TYPE_IMG
  zh: '![ 图 7.22 – 时间拉伸音乐 (Sad44404.wav)](img/B17990_07_22..jpg)'
- en: Figure 7.22 – Time stretch music (Sad44404.wav)
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.22 – 时间拉伸音乐 (Sad44404.wav)
- en: 'The wrapper function also displays the original audio clip for comparison:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 包装函数还会显示原始音频片段以供对比：
- en: '![Figure 7.23 – Original time stretch music (Sad44404.wav)](img/B17990_07_23..jpg)'
  id: totrans-282
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.23 – 原始时间拉伸音乐 (Sad44404.wav)](img/B17990_07_23..jpg)'
- en: Figure 7.23 – Original time stretch music (Sad44404.wav)
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.23 – 原始时间拉伸音乐 (Sad44404.wav)
- en: The audio in *Figures 7.22* and *7.23* is of an afternoon lunch in a garden
    with a strong lead guitar and cinematic orchestra clip. With the time stretch
    filter at a `3.0`, the audio in *Figure 7**.22* plays a bit faster, but Pluto
    did not notice any degradation in the music’s mood. Pluto repeatedly ran the wrapper
    function on the MEC dataset and concluded that the time stretch technique is `3.0`.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 7.22* 和 *图 7.23* 中的音频是一个下午花园午餐的声音，伴随着强烈的主奏吉他和电影交响乐片段。在 `3.0` 的时间拉伸滤镜下，*图
    7.22* 中的音频播放速度稍微加快，但 Pluto 没有注意到音乐情绪的下降。Pluto 多次在 MEC 数据集上运行包装函数，并得出结论，时间拉伸技术的安全范围是
    `3.0`。'
- en: Fun challenge
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的挑战
- en: Find a universal **safe** range for the time stretch technique for all types
    of music (MEC). You can use the Python Notebook to find a safe range for the MEC
    datasets and download other music datasets from the Kaggle website. On the other
    hand, is this an impossible task? Does a universal safe range exist for pop, classical,
    folklore, country, and hip-hop music?
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 为所有类型的音乐（MEC）找到一个通用的 **安全** 范围。你可以使用 Python Notebook 来找到 MEC 数据集的安全范围，并从 Kaggle
    网站下载其他音乐数据集。另一方面，这是否是一个不可能完成的任务？对于流行音乐、古典音乐、民间音乐、乡村音乐和嘻哈音乐，是否存在一个通用的安全范围？
- en: 'Pluto does the same for the human speech (CREMA-D) dataset. The command is
    as follows:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: Pluto 对人声（CREMA-D）数据集进行了相同的处理。命令如下：
- en: '[PRE24]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The output for the time stretch augmented audio clip is as follows:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 时间拉伸增强音频片段的输出如下：
- en: '![Figure 7.24 – Time stretch voice clip (1073_WSI_SAD_XX.wav)](img/B17990_07_24..jpg)'
  id: totrans-290
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.24 – 时间拉伸语音片段 (1073_WSI_SAD_XX.wav)](img/B17990_07_24..jpg)'
- en: Figure 7.24 – Time stretch voice clip (1073_WSI_SAD_XX.wav)
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.24 – 时间拉伸语音片段 (1073_WSI_SAD_XX.wav)
- en: 'The wrapper function also displays the original audio clip for comparison:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 包装函数还会显示原始音频片段以供对比：
- en: '![Figure 7.25 – Original time stretch voice clip (1073_WSI_SAD_XX.wav)](img/B17990_07_25..jpg)'
  id: totrans-293
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.25 – 原始时间拉伸语音片段 (1073_WSI_SAD_XX.wav)](img/B17990_07_25..jpg)'
- en: Figure 7.25 – Original time stretch voice clip (1073_WSI_SAD_XX.wav)
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.25 – 原始时间拉伸语音片段 (1073_WSI_SAD_XX.wav)
- en: The audio in *Figures 7.24* and *7.25* is of a woman’s voice saying, *Let’s
    stop for a couple of minutes*, while the audio in *Figure 7**.24* says it a bit
    faster but it’s recognizable. Pluto repeatedly runs the wrapper function on the
    CREMA-D dataset with a `3.5` and hears no deterioration in the recordings. Thus,
    he concluded that the CREMA-D dataset is `3.5`.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 7.24* 和 *7.25* 中的音频是一个女人的声音说：“*我们休息几分钟*”，而 *图 7.24* 中的音频稍微快一些，但仍然可以辨认出来。Pluto
    多次在 CREMA-D 数据集上运行包装函数，使用 `3.5`，并且没有发现录音质量下降。因此，他得出结论，CREMA-D 数据集的安全范围是 `3.5`。'
- en: 'Pluto does the same for the urban sound (US8K) dataset. The command is as follows:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: Pluto对城市声音（US8K）数据集也做了同样的操作。命令如下：
- en: '[PRE25]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The output for the time stretch augmented audio clip is as follows:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 时间拉伸增强音频片段的输出如下：
- en: '![Figure 7.26 – Time stretch urban sound (76266-2-0-50.wav)](img/B17990_07_26..jpg)'
  id: totrans-299
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.26 – 时间拉伸城市声音（76266-2-0-50.wav）](img/B17990_07_26..jpg)'
- en: Figure 7.26 – Time stretch urban sound (76266-2-0-50.wav)
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.26 – 时间拉伸城市声音（76266-2-0-50.wav）
- en: 'The wrapper function also displays the original audio clip for comparison:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 包装函数还会显示原始音频片段以供比较：
- en: "![Figure 7.2\uFEFF7 – Original \uFEFFtime stretch urban sound (76266-2-0-50.wav)](img/B17990_07_27..jpg)"
  id: totrans-302
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.27 – 原始时间拉伸城市声音（76266-2-0-50.wav）](img/B17990_07_27..jpg)'
- en: Figure 7.27 – Original time stretch urban sound (76266-2-0-50.wav)
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.27 – 原始时间拉伸城市声音（76266-2-0-50.wav）
- en: The audio in *Figures 7.26* and *7.27* is of an urban clip of adults and children
    talking in a playground with high traffic or wind noises in the recording. The
    audio in *Figure 7**.26* plays a bit faster. Pluto repeatedly runs the wrapper
    function on the US8K dataset with a `2.4`, and he concluded that the US8K dataset
    is **safe** for the time stretching technique.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 7.26* 和 *图 7.27* 中的音频是城市声音，录音中包含成人和儿童在操场上说话的声音，以及高强度交通或风声。*图 7.26* 中的音频播放略快。Pluto在US8K数据集上反复运行包装函数，并使用了`2.4`，他得出结论，US8K数据集对时间拉伸技术是**安全**的。'
- en: The next technique we’ll look at is **pitch scaling**.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将介绍的技术是**音高缩放**。
- en: Pitch scaling
  id: totrans-306
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 音高缩放
- en: 'The definition and key code lines for the `play_aug_pitch_scaling()` function
    are as follows:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '`play_aug_pitch_scaling()`函数的定义和关键代码行如下：'
- en: '[PRE26]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Pluto tests the pitch scaling wrapper function with the audio control file
    using the default parameters, as follows:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: Pluto使用默认参数测试音高缩放包装函数，音频控制文件如下所示：
- en: '[PRE27]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The output augmented audio clip is as follows:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 输出的增强音频片段如下：
- en: '![Figure 7.28 – Pitch scaling (control-d-major.mp3)](img/B17990_07_28..jpg)'
  id: totrans-312
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.28 – 音高缩放（control-d-major.mp3）](img/B17990_07_28..jpg)'
- en: Figure 7.28 – Pitch scaling (control-d-major.mp3)
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.28 – 音高缩放（control-d-major.mp3）
- en: 'The wrapper function also displays the original audio clip for comparison:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 包装函数还会显示原始音频片段以供比较：
- en: '![Figure 7.29 – Original pitch scaling (control-d-major.mp3)](img/B17990_07_29..jpg)'
  id: totrans-315
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.29 – 原始音高缩放（control-d-major.mp3）](img/B17990_07_29..jpg)'
- en: Figure 7.29 – Original pitch scaling (control-d-major.mp3)
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.29 – 原始音高缩放（control-d-major.mp3）
- en: Pluto can’t tell the difference from looking at the complete Waveform graphs
    in *Figures 7.28* and *7.29*, but if he focuses on the zoom-in chart, he can see
    the differences. Listening to the audio file is the best method. To do that, you
    must go to the Python Notebook and click on the audio play button. The audio in
    *Figure 2**.28* plays more like a harpsichord than the original piano scale in
    D major.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: Pluto无法从*图 7.28*和*图 7.29*中的完整波形图中看出区别，但如果他聚焦于放大的图表，就可以看到差异。听音频文件是最好的方法。为此，你必须进入Python笔记本并点击音频播放按钮。*图
    7.28*中的音频听起来更像是大键琴，而不是原始的大调钢琴音阶。
- en: 'Next, Pluto applies the pitch scaling wrapper function to the music (MEC) dataset,
    as follows:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，Pluto将音高缩放包装函数应用于音乐（MEC）数据集，如下所示：
- en: '[PRE28]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The output for the augmented audio clip is as follows:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 增强音频片段的输出如下：
- en: '![Figure 7.30 – Pitch scaling music (Sad11601.wav)](img/B17990_07_30..jpg)'
  id: totrans-321
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.30 – 音高缩放音乐（Sad11601.wav）](img/B17990_07_30..jpg)'
- en: Figure 7.30 – Pitch scaling music (Sad11601.wav)
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.30 – 音高缩放音乐（Sad11601.wav）
- en: 'The wrapper function also displays the original audio clip for comparison:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 包装函数还会显示原始音频片段以供比较：
- en: '![Figure 7.31 – Original pitch scaling music (Sad11601.wav)](img/B17990_07_31..jpg)'
  id: totrans-324
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.31 – 原始音高缩放音乐（Sad11601.wav）](img/B17990_07_31..jpg)'
- en: Figure 7.31 – Original pitch scaling music (Sad11601.wav)
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.31 – 原始音高缩放音乐（Sad11601.wav）
- en: The audio in*Figure 7**.30* plays warmer, is melodic, and accentuates the moodiness
    of a dramatic cinematic clip. It’s like a calm evening before a dramatic turn.
    Pluto purposefully exaggerated the pitch effects by setting the `-11.0` and the
    `-9.0`. The audio in *Figure 7**.31* plays the original clip. Using the default
    parameter value, Pluto found minimal pitch scaling effects on the MEC dataset.
    Thus, it is a **safe** technique.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 7.30* 中的音频播放较为温暖，旋律感强，突出了戏剧性电影片段的情绪变化。就像是戏剧性转折前的宁静黄昏。Pluto通过设置`-11.0`和`-9.0`，故意夸大了音高效果。*图
    7.31* 中的音频播放的是原始片段。使用默认参数，Pluto发现MEC数据集的音高缩放效果极小。因此，这是一种**安全**的技术。'
- en: 'Using the default parameter values, Pluto does the same for the voice (CREMA-D)
    dataset. The command is as follows:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 使用默认参数值，Pluto 对语音 (CREMA-D) 数据集执行相同操作。命令如下：
- en: '[PRE29]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The output for the augmented audio clip is as follows:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 增强音频片段的输出如下：
- en: '![Figure 7.32 – Pitch scaling voice (1031_IEO_ANG_LO.wav)](img/B17990_07_32..jpg)'
  id: totrans-330
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.32 – 音高缩放语音 (1031_IEO_ANG_LO.wav)](img/B17990_07_32..jpg)'
- en: Figure 7.32 – Pitch scaling voice (1031_IEO_ANG_LO.wav)
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.32 – 音高缩放语音 (1031_IEO_ANG_LO.wav)
- en: 'The wrapper function also displays the original audio clip for comparison:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 包装函数还会显示原始音频片段以供比较：
- en: '![Figure 7.33 - Original pitch scaling voice (1031_IEO_ANG_LO.wav)](img/B17990_07_33..jpg)'
  id: totrans-333
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.33 - 原始音高缩放语音 (1031_IEO_ANG_LO.wav)](img/B17990_07_33..jpg)'
- en: Figure 7.33 - Original pitch scaling voice (1031_IEO_ANG_LO.wav)
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.33 - 原始音高缩放语音 (1031_IEO_ANG_LO.wav)
- en: Pluto compares the zoom-in graphs in *Figures 7.32* and *7.33* to see the effects.
    When listening to the audio files, he heard the augmented version, from *Figure
    7**.32*, of a high-pitched kid saying, *It is eleven o’clock.* The original version
    is an adult man’s voice. After repeatedly running the wrapper command with safe
    **minimum and maximum semitones** set to -2.4 and 2.4, Pluto found it minimized
    the effects for the CREMA-D dataset.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: Pluto 比较了 *图 7.32* 和 *7.33* 中的放大图，以查看效果。在听这些音频文件时，他听到了增强版，从 *图 7.32* 中的一个高音调孩子的声音说：“现在是十一点。”
    原版是一个成年男子的声音。经过反复运行包装命令，并将安全的 **最小和最大半音** 设置为 -2.4 和 2.4，Pluto 发现这对 CREMA-D 数据集的效果最小化。
- en: 'The urban sound (US8K) dataset has a diverse frequency range. Machine noises
    are repetitive low-frequency sounds, while sirens are high-frequency sounds. Pluto
    could not find a safe range unless he limited the `4.0` and `14.0`. The command
    is as follows:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 城市声音 (US8K) 数据集具有多样化的频率范围。机器噪声是重复的低频声音，而警笛是高频声音。除非他限制了 `4.0` 和 `14.0`，否则 Pluto
    找不到安全范围。命令如下：
- en: '[PRE30]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The output for the augmented audio clip is as follows:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 增强音频片段的输出如下：
- en: '![Figure 7.34 – Pitch scaling urban sound (93567-8-3-0.wav)](img/B17990_07_34..jpg)'
  id: totrans-339
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.34 – 音高缩放城市声音 (93567-8-3-0.wav)](img/B17990_07_34..jpg)'
- en: Figure 7.34 – Pitch scaling urban sound (93567-8-3-0.wav)
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.34 – 音高缩放城市声音 (93567-8-3-0.wav)
- en: 'The wrapper function also displays the original audio clip for comparison:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 包装函数还会显示原始音频片段以供比较：
- en: '![Figure 7.35 – Original pitch scaling urban sound (93567-8-3-0.wav)](img/B17990_07_35..jpg)'
  id: totrans-342
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.35 – 原始音高缩放城市声音 (93567-8-3-0.wav)](img/B17990_07_35..jpg)'
- en: Figure 7.35 – Original pitch scaling urban sound (93567-8-3-0.wav)
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.35 – 原始音高缩放城市声音 (93567-8-3-0.wav)
- en: The audio in *Figures 7.34* and *7.35* play an urban clip of sirens in a busy
    urban street. The audio in *Figure 7**.34* has the sirens sound clearer and with
    a bit less interference from the traffic noise.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 7.34* 和 *7.35* 中的音频播放的是繁忙城市街道上警笛的城市片段。*图 7.34* 中的音频警笛声音更清晰，交通噪声干扰稍少。'
- en: Fun challenge
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的挑战
- en: This challenge is a thought experiment. Can you define rules for which audio
    augmentation methods are suitable for an audio category, such as human speech,
    music, bird songs, and so on? For example, can human speech be safely augmented
    using pitch shifting in a small range?
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 这个挑战是一个思维实验。你能为哪些音频增强方法适用于特定的音频类别（例如人声、音乐、鸟鸣等）定义规则吗？例如，能否安全地使用小范围音高变化来增强人声？
- en: The next technique we’ll look at is **noise injection**.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来要看的技术是 **噪声注入**。
- en: Noise injection
  id: totrans-348
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 噪声注入
- en: 'The definition and key code lines for the `play_aug_noise_injection()` function
    are as follows:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: '`play_aug_noise_injection()` 函数的定义和关键代码行如下：'
- en: '[PRE31]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The full function’s code can be found in the Python Notebook. Pluto will not
    explain the result here because they are similar to the previous three audio augmentation
    techniques. You should try them out on the Python Notebook to see and hear the
    results.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的函数代码可以在 Python Notebook 中找到。Pluto 在这里不会解释结果，因为它们与之前三种音频增强技术相似。你应该在 Python
    Notebook 中尝试它们，查看和听取结果。
- en: 'For the **background noise injection** method, the code snippet is as follows:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 **背景噪声注入** 方法，代码片段如下：
- en: '[PRE32]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'For the **short noise injection** method, the code snippet is as follows:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 **短噪声注入** 方法，代码片段如下：
- en: '[PRE33]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The full function code can be found in the Python Notebook. The next technique
    we’ll look at is **polarity inversion**.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的函数代码可以在 Python Notebook 中找到。接下来我们要看的技术是 **极性反转**。
- en: Polarity inversion
  id: totrans-357
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 极性反转
- en: 'The definition and key code lines for the `play_aug_polar_inverse()` function
    are as follows:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: '`play_aug_polar_inverse()` 函数的定义和关键代码行如下：'
- en: '[PRE34]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Once again, Pluto will not explain the result here because they have similar
    outputs to what you saw previously. Try them out on the Python Notebook to see
    and hear the results. Pluto has written the Python code for you.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 再次说明，Pluto 在这里不会解释结果，因为它们与之前看到的输出类似。你可以在 Python Notebook 中尝试它们，查看和听取结果。Pluto
    已经为你编写了 Python 代码。
- en: Fun fact
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的事实
- en: 'There is one fun fact about the polarity inversion technique: you will not
    hear any difference between the augmented and original recordings. You couldn’t
    even see the difference in the WaveForm graph, but you could see it in the zoom-in
    chart. The blue/positive and yellow/negative are flipped.'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个关于极性反转技术的有趣事实：你不会听出增强录音和原始录音之间的任何差异。你甚至在波形图中也看不出差别，但你可以在放大图表中看到。蓝色/正和黄色/负被翻转了。
- en: 'For example, Pluto applies the wrapper function to the voice (CREMA-D) dataset
    as follows:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，Pluto 将包装函数应用于语音（CREMA-D）数据集，如下所示：
- en: '[PRE35]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The output for the augmented audio clip is as follows:'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 增强音频片段的输出如下：
- en: '![Figure 7.36 – Polar inversion voice (1081_WSI_HAP_XX.wav)](img/B17990_07_36..jpg)'
  id: totrans-366
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.36 – 极性反转语音（1081_WSI_HAP_XX.wav）](img/B17990_07_36..jpg)'
- en: Figure 7.36 – Polar inversion voice (1081_WSI_HAP_XX.wav)
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.36 – 极性反转语音（1081_WSI_HAP_XX.wav）
- en: 'The wrapper function also displays the original audio clip for comparison:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 包装函数还会显示原始音频片段以供比较：
- en: '![Figure 7.37 – Original polar inversion voice (1081_WSI_HAP_XX.wav)](img/B17990_07_37..jpg)'
  id: totrans-369
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.37 – 原始极性反转语音（1081_WSI_HAP_XX.wav）](img/B17990_07_37..jpg)'
- en: Figure 7.37 – Original polar inversion voice (1081_WSI_HAP_XX.wav)
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.37 – 原始极性反转语音（1081_WSI_HAP_XX.wav）
- en: 'Another fun fact is that polar inversion is as simple as multiplying the **amplitude**
    array with a negative one, like so:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有趣的事实是，极性反转就像将**振幅**数组乘以负一，像这样：
- en: '[PRE36]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Fun challenge
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的挑战
- en: 'Here is a thought experiment: why does polarity inversion not affect the sound?
    After all, it is a drastic change in the data, as evidenced in the Waveform graph.
    Hint: think about the technical complexities of molecules’ vibration from compression
    and expansion relating to absolute measurement.'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个思想实验：为什么极性反转不会影响声音？毕竟，这在数据上是一个剧烈的变化，如波形图所示。提示：考虑从压缩和膨胀引起的分子振动的技术复杂性，涉及绝对测量。
- en: The next few techniques we’ll look at use **filters**.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们将介绍一些使用**滤波器**的技巧。
- en: Low-pass filter
  id: totrans-376
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 低通滤波器
- en: Before Pluto digs in and explains the filter’s audio techniques, he will only
    partially present all the filters in this book. This is because the process is
    repetitive, and you can gain much more insight from running the code in the Python
    Notebook. Pluto will thoroughly explain the code and the Waveform graph for the
    **low-pass** and **band-pass** filters; for the other filters, he will explain
    the code but not the output Waveform graphs.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Pluto 深入解释滤波器的音频技巧之前，他只会部分展示本书中的所有滤波器。这是因为过程是重复的，通过在 Python Notebook 中运行代码，你能获得更多的洞察力。Pluto
    将详细解释**低通**和**带通**滤波器的代码和波形图；对于其他滤波器，他将解释代码，但不解释输出的波形图。
- en: 'The definition and key code lines for the `play_aug_low_pass_filter()` function
    are as follows:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: '`play_aug_low_pass_filter()` 函数的定义和关键代码行如下：'
- en: '[PRE37]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The full function’s code can be found in the Python Notebook. Pluto tests the
    low-pass filter wrapper function with the audio control file using default parameters,
    as follows:'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 完整功能的代码可以在 Python Notebook 中找到。Pluto 使用默认参数，测试低通滤波器包装函数与音频控制文件，如下所示：
- en: '[PRE38]'
  id: totrans-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The output for the augmented audio clip is as follows:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 增强音频片段的输出如下：
- en: '![Figure 7.38 – Low-pass filter control (control-d-major.mp3)](img/B17990_07_38..jpg)'
  id: totrans-383
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.38 – 低通滤波器控制（control-d-major.mp3）](img/B17990_07_38..jpg)'
- en: Figure 7.38 – Low-pass filter control (control-d-major.mp3)
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.38 – 低通滤波器控制（control-d-major.mp3）
- en: 'The wrapper function also displays the original audio clip for comparison:'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 包装函数还会显示原始音频片段以供比较：
- en: '![Figure 7.39 – Original low-pass filter control (control-d-major.mp3)](img/B17990_07_39..jpg)'
  id: totrans-386
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.39 – 原始低通滤波器控制（control-d-major.mp3）](img/B17990_07_39..jpg)'
- en: Figure 7.39 – Original low-pass filter control (control-d-major.mp3)
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.39 – 原始低通滤波器控制（control-d-major.mp3）
- en: Pluto does not detect any difference in listening to the augmented and original
    recordings shown in *Figures 7.38* and *7.39*. At first glance at the WaveForm
    graphs, Pluto did not see any differences until he inspected the zoom-in charts.
    There is a slight decrease in the positive (blue color) **amplitude** values and,
    inversely, a tiny increase in the negative (yellow color) values. In other words,
    the absolute differences between the before and after are slightly lower **amplitude**
    values.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: Pluto 没有检测到 *图 7.38* 和 *7.39* 中的增强录音与原始录音之间的任何区别。初看 WaveForm 图，Pluto 没有看到任何差异，直到他检查了放大图。正值（蓝色）**幅度**略有减少，相反，负值（黄色）略有增加。换句话说，前后音频的绝对差异表现为幅度值略低。
- en: 'Next, Pluto applies the low-pass filter wrapper function to the music (MEC)
    dataset, as follows:'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，Pluto 将低通滤波器包装函数应用于音乐 (MEC) 数据集，如下所示：
- en: '[PRE39]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The output for the augmented audio clip is as follows:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 增强后的音频片段的输出如下：
- en: '![Figure 7.40 – Low-pass filter music (Sad21828.wav)](img/B17990_07_40..jpg)'
  id: totrans-392
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.40 – 低通滤波音乐 (Sad21828.wav)](img/B17990_07_40..jpg)'
- en: Figure 7.40 – Low-pass filter music (Sad21828.wav)
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.40 – 低通滤波音乐 (Sad21828.wav)
- en: 'The wrapper function also displays the original audio clip for comparison:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 包装函数还显示了原始音频片段以供比较：
- en: '![Figure 7.41 – Original low-pass filter music (Sad21828.wav)](img/B17990_07_41..jpg)'
  id: totrans-395
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.41 – 原始低通滤波音乐 (Sad21828.wav)](img/B17990_07_41..jpg)'
- en: Figure 7.41 – Original low-pass filter music (Sad21828.wav)
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.41 – 原始低通滤波音乐 (Sad21828.wav)
- en: The audio in *Figures 7.40* and *7.41* is of a cinematic orchestra music clip
    with a driving drum beat. It could be the background music from an Indiana Jones
    movie before the giant boulder bars down the cave. In particular, the augmented
    file sounds, shown in *Figure 7**.40*, are smoother and the edges have been nipped
    off. Pluto repeatedly ran the wrapper function on the MEC dataset using the default
    parameter settings and found that the augmented audio file does not alter the
    happy or sad mood of the music. Hence, it is a **safe** technique.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 7.40* 和 *7.41* 中的音频是一段电影管弦乐音乐片段，伴随着强烈的鼓点。这可能是印第安纳·琼斯电影中，在巨石滚下山洞前的背景音乐。特别是
    *图 7.40* 中显示的增强文件声音更为平滑，边缘已被修整。Pluto 反复使用默认参数设置运行包装函数处理 MEC 数据集，发现增强后的音频文件并未改变音乐的悲伤或快乐情感。因此，这是一个
    **安全的** 技术。'
- en: 'For the voice (CREMA-D) dataset, Pluto does the same:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 对于语音 (CREMA-D) 数据集，Pluto 做了同样的处理：
- en: '[PRE40]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The output for the augmented audio clip is as follows:'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 增强后的音频片段的输出如下：
- en: '![Figure 7.42 – Low-pass filter voice (1067_IEO_HAP_LO.wav)](img/B17990_07_42..jpg)'
  id: totrans-401
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.42 – 低通滤波语音 (1067_IEO_HAP_LO.wav)](img/B17990_07_42..jpg)'
- en: Figure 7.42 – Low-pass filter voice (1067_IEO_HAP_LO.wav)
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.42 – 低通滤波语音 (1067_IEO_HAP_LO.wav)
- en: 'The wrapper function also displays the original audio clip for comparison:'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 包装函数还显示了原始音频片段以供比较：
- en: '![Figure 7.43 – Original low-pass filter voice (1067_IEO_HAP_LO.wav)](img/B17990_07_43..jpg)'
  id: totrans-404
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.43 – 原始低通滤波语音 (1067_IEO_HAP_LO.wav)](img/B17990_07_43..jpg)'
- en: Figure 7.43 – Original low-pass filter voice (1067_IEO_HAP_LO.wav)
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.43 – 原始低通滤波语音 (1067_IEO_HAP_LO.wav)
- en: The audio in *Figures 7.42* and *7.43* both said *It is eleven o’clock*. Furthermore,
    the audio in *Figure 7**.42* has fewer snaps and crackles. Pluto has an unscientific
    thought that the zoom-in graph displays a smoother curve with fewer dips and dimples,
    which could translate to a cleaner voice in the augmented recording. After repeatedly
    applying the wrapper function to the CREMA-D dataset, Pluto thinks the low-pass
    filter is **safe**.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 7.42* 和 *7.43* 中的音频都说了 *现在是十一点*。此外，*图 7.42* 中的音频较少有啪嗒声和爆裂声。Pluto 有一个不太科学的想法，即放大图显示了一个更平滑的曲线，较少的波动和凹陷，这可能意味着增强录音中的声音更加清晰。在反复将包装函数应用于
    CREMA-D 数据集之后，Pluto 认为低通滤波器是 **安全的**。'
- en: 'The last of the three real-world datasets is the urban sound (US8K) dataset.
    Pluto applies the wrapper function as follows:'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 三个真实世界数据集中的最后一个是城市声音 (US8K) 数据集。Pluto 通过以下方式应用包装函数：
- en: '[PRE41]'
  id: totrans-408
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The output for the augmented audio clip is as follows:'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 增强后的音频片段的输出如下：
- en: '![Figure 7.44 – Low-pass filter urban sound (185373-9-0-6.wav)](img/B17990_07_44..jpg)'
  id: totrans-410
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.44 – 低通滤波城市声音 (185373-9-0-6.wav)](img/B17990_07_44..jpg)'
- en: Figure 7.44 – Low-pass filter urban sound (185373-9-0-6.wav)
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.44 – 低通滤波城市声音 (185373-9-0-6.wav)
- en: 'The wrapper function also displays the original audio clip for comparison:'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 包装函数还显示了原始音频片段以供比较：
- en: '![Figure 7.45 – Original low-pass filter urban sound (185373-9-0-6.wav)](img/B17990_07_45..jpg)'
  id: totrans-413
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.45 – 原始低通滤波城市声音 (185373-9-0-6.wav)](img/B17990_07_45..jpg)'
- en: Figure 7.45 – Original low-pass filter urban sound (185373-9-0-6.wav)
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.45 – 原始低通滤波器城市声音（185373-9-0-6.wav）
- en: The audio in *Figures 7.44* and *7.45* is of street music playing outdoors with
    traffic and urban noise. Repeatedly executing the wrapper functions gives mixed
    results for the US8K dataset. Pluto does not know which parameter values are **safe**.
    He needs to consult a domain expert – that is, a sound engineer.
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 7.44* 和 *图 7.45* 中的音频是带有交通和城市噪声的街头音乐。重复执行包装函数时，US8K 数据集的结果混合。Pluto 不知道哪些参数值是**安全**的，他需要咨询领域专家——即音响工程师。'
- en: The next technique we’ll look at is the **band-pass filter**.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来要了解的技巧是**带通滤波器**。
- en: Band-pass filter
  id: totrans-417
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 带通滤波器
- en: 'The definition and key code lines for the `play_aug_band_pass_filter()` function
    are as follows:'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: '`play_aug_band_pass_filter()` 函数的定义及关键代码行如下：'
- en: '[PRE42]'
  id: totrans-419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The full function’s code can be found in the Python Notebook. Pluto tests the
    band-pass filter wrapper function with the audio control file using default parameters,
    as follows:'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的函数代码可以在 Python Notebook 中找到。Pluto 使用默认参数测试带通滤波器包装函数与音频控制文件，命令如下：
- en: '[PRE43]'
  id: totrans-421
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The output for the augmented audio clip is as follows:'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 增强音频片段的输出如下：
- en: '![Figure 7.46 – Band-pass filter control (control-d-major.mp3)](img/B17990_07_46..jpg)'
  id: totrans-423
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.46 – 带通滤波器控制（control-d-major.mp3）](img/B17990_07_46..jpg)'
- en: Figure 7.46 – Band-pass filter control (control-d-major.mp3)
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.46 – 带通滤波器控制（control-d-major.mp3）
- en: 'The wrapper function also displays the original audio clip for comparison:'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 包装函数还会显示原始音频片段以供对比：
- en: '![Figure 7.47 – Original band-pass filter control (control-d-major.mp3)](img/B17990_07_47..jpg)'
  id: totrans-426
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.47 – 原始带通滤波器控制（control-d-major.mp3）](img/B17990_07_47..jpg)'
- en: Figure 7.47 – Original band-pass filter control (control-d-major.mp3)
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.47 – 原始带通滤波器控制（control-d-major.mp3）
- en: From *Figure 7**.46*, Pluto could guess that the sound has been slightly altered.
    When listening to the audio file, he confirms that the scale is the same, but
    it has a whom-whom sound to it.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 从*图 7.46*中，Pluto 可以推测声音略有改变。听音频文件时，他确认音阶是一样的，但听起来有一种嗡嗡声。
- en: 'Next, Pluto applies the band-pass filter function to the music (MEC) dataset.
    The command is as follows:'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，Pluto 对音乐（MEC）数据集应用带通滤波器函数。命令如下：
- en: '[PRE44]'
  id: totrans-430
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The output for the augmented audio clip is as follows:'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 增强音频片段的输出如下：
- en: '![Figure 7.48 – Band-pass filter music (Happy15804.wav)](img/B17990_07_48..jpg)'
  id: totrans-432
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.48 – 带通滤波器音乐（Happy15804.wav）](img/B17990_07_48..jpg)'
- en: Figure 7.48 – Band-pass filter music (Happy15804.wav)
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.48 – 带通滤波器音乐（Happy15804.wav）
- en: 'The wrapper function also displays the original audio clip for comparison:'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 包装函数还会显示原始音频片段以供对比：
- en: '![Figure 7.49 – Original band-pass filter music (Happy15804.wav)](img/B17990_07_49..jpg)'
  id: totrans-435
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.49 – 原始带通滤波器音乐（Happy15804.wav）](img/B17990_07_49..jpg)'
- en: Figure 7.49 – Original band-pass filter music (Happy15804.wav)
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.49 – 原始带通滤波器音乐（Happy15804.wav）
- en: The sound for this clip is a happy-go-lucky cinematic tune with a sprinkle of
    a drum beat. The augmented sound, shown in *Figure 7**.48*, is brighter, bunchier,
    and yet smoother. Pluto repeatedly executes the wrapper function against the **MEC**
    dataset, and it enhances the **happier** mood music and infuses a more substantial
    tone into the **sadder** clips. Thus, it is **safe** for the MEC dataset.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 该音频片段的声音是一段快乐随意的电影音乐，并带有一丝鼓点。增强后的声音，显示在*图 7.48*中，显得更明亮、更紧凑，同时也更加平滑。Pluto 对**MEC**
    数据集重复执行包装函数，它增强了**更快乐**的情绪音乐，并为**更悲伤**的片段注入了更有深度的音调。因此，它对MEC数据集是**安全**的。
- en: 'Pluto does the same for the voice (CREMA-D) dataset. The command is as follows:'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: Pluto 对语音（CREMA-D）数据集做了相同的处理。命令如下：
- en: '[PRE45]'
  id: totrans-439
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The output for the augmented audio clip is as follows:'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 增强音频片段的输出如下：
- en: '![Figure 7.50 – Band-pass filter voice (1071_IWL_NEU_XX.wav)](img/B17990_07_50..jpg)'
  id: totrans-441
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.50 – 带通滤波器语音（1071_IWL_NEU_XX.wav）](img/B17990_07_50..jpg)'
- en: Figure 7.50 – Band-pass filter voice (1071_IWL_NEU_XX.wav)
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.50 – 带通滤波器语音（1071_IWL_NEU_XX.wav）
- en: 'The wrapper function also displays the original audio clip for comparison:'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 包装函数还会显示原始音频片段以供对比：
- en: '![Figure 7.51 – Original band-pass filter voice (1071_IWL_NEU_XX.wav)](img/B17990_07_51..jpg)'
  id: totrans-444
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.51 – 原始带通滤波器语音（1071_IWL_NEU_XX.wav）](img/B17990_07_51..jpg)'
- en: Figure 7.51 – Original band-pass filter voice (1071_IWL_NEU_XX.wav)
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.51 – 原始带通滤波器语音（1071_IWL_NEU_XX.wav）
- en: The audio for *Figures 7.50* and *7.51* is of a woman saying, *I would like
    a new alarm clock*. The augmented audio file sounds cleaner with less noise interference
    than the original clip. The same results were found for most of the files in the
    CREMA-D dataset. Thus, the CREMA-D dataset is **safe** for use with the band-pass
    filter technique.
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 7.50* 和 *7.51* 中的音频是一个女人说的，*“我想要一个新的闹钟”*。增强后的音频文件听起来更清晰，噪声干扰比原始片段少。对CREMA-D数据集中的大多数文件进行了相同的处理，得到了相似的结果。因此，CREMA-D数据集对于带通滤波器技术是**安全的**。'
- en: 'Pluto suspects the same improvement or at least a safe level for the urban
    sound (US8K) dataset. The command is as follows:'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: Pluto怀疑对城市声音（US8K）数据集进行相同的改进，或者至少达到一个安全的水平。命令如下：
- en: '[PRE46]'
  id: totrans-448
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'The output for the augmented audio clip is as follows:'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 增强后的音频片段输出如下：
- en: '![Figure 7.52 – Band-pass filter urban sound (95404-3-0-0.wav)](img/B17990_07_52..jpg)'
  id: totrans-450
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.52 – 带通滤波器城市声音 (95404-3-0-0.wav)](img/B17990_07_52..jpg)'
- en: Figure 7.52 – Band-pass filter urban sound (95404-3-0-0.wav)
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.52 – 带通滤波器城市声音 (95404-3-0-0.wav)
- en: 'The wrapper function also displays the original audio clip for comparison:'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 这个包装函数还展示了原始音频片段以供比较：
- en: '![Figure 7.53 – Original band-pass filter urban sound (95404-3-0-0.wav)](img/B17990_07_53..jpg)'
  id: totrans-453
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.53 – 原始带通滤波器城市声音 (95404-3-0-0.wav)](img/B17990_07_53..jpg)'
- en: Figure 7.53 – Original band-pass filter urban sound (95404-3-0-0.wav)
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.53 – 原始带通滤波器城市声音 (95404-3-0-0.wav)
- en: The audio file for this is the sound of a windy backyard with birds singing
    and fading dogs barking from far away. The augmented audio file, *Figure 7**.52*,
    sounds more distinct but with echoes in a tunnel effect. Pluto thinks the band-pass
    filter is **safe** for the US8K dataset.
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 这段音频文件是一个有风的后院，鸟儿在唱歌，远处有狗叫的声音。增强后的音频文件，*图 7.52*，听起来更为清晰，但带有隧道回声效果。Pluto认为带通滤波器对US8K数据集是**安全的**。
- en: Fun challenge
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的挑战
- en: Pluto challenges you to implement the reversed audio technique. Can you think
    of a use case where reversed audio is a `play_aug_time_shift()` wrapper function.
    Change `xtransform = audiomentations.Shift()` to `xtransform =` `audiomentations.Reverse()`.
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: Pluto挑战你实现反向音频技术。你能想到一个使用反向音频的应用场景吗？它是一个 `play_aug_time_shift()` 的包装函数。将 `xtransform
    = audiomentations.Shift()` 改为 `xtransform = audiomentations.Reverse()`。
- en: The audio augmentation process becomes slightly repetitive, but the results
    are fascinating. Thus, Pluto has shared the code for the following audio filter
    techniques, but the resulting WaveForm graphs and audio play buttons are in the
    Python Notebook.
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 音频增强过程略显重复，但结果非常有趣。因此，Pluto分享了以下音频滤波器技术的代码，但生成的波形图和音频播放按钮位于Python笔记本中。
- en: The next filter we’ll cover is the **high-pass filter**.
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们要介绍的滤波器是**高通滤波器**。
- en: High-pass and other filters
  id: totrans-460
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 高通和其他滤波器
- en: 'The definition and key code lines for the `play_aug_high_pass_filter()` function
    are as follows:'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: '`play_aug_high_pass_filter()` 函数的定义和关键代码行如下：'
- en: '[PRE47]'
  id: totrans-462
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: The results can be found in the Python Notebook.
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 结果可以在Python笔记本中找到。
- en: Fun challenge
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的挑战
- en: Pluto challenges you to implement other audio filters in the Audiomentations
    library, such as `audiomentations.HighPassFilter`, `audiomentations.LowShelfFilter`,
    `audiomentations.HighShelfFilter`, `audiomentations.BandStopFilter`, and `audiomentations.PeakingFilter`.
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: Pluto挑战你实现Audiomentations库中的其他音频滤波器，如 `audiomentations.HighPassFilter`、`audiomentations.LowShelfFilter`、`audiomentations.HighShelfFilter`、`audiomentations.BandStopFilter`
    和 `audiomentations.PeakingFilter`。
- en: With that, we have covered the fundamentals of audio augmentations and practiced
    coding them. Next, we will summarize this chapter.
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 至此，我们已经涵盖了音频增强的基本原理并实践了相关编码。接下来，我们将总结这一章的内容。
- en: Summary
  id: totrans-467
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概要
- en: As we saw from the beginning, audio augmentation is a challenging topic without
    hearing the audio recording in question, but we can visualize the techniques’
    effect using **Waveform** graphs and zoom-in charts. Still, there is no substitution
    for listening to the before and after augmentation recordings. You have access
    to the Python Notebook with the complete code and audio button to play the augmented
    and original recordings.
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们一开始所看到的，音频增强是一个具有挑战性的主题，因为我们无法直接听到待处理的音频录音，但我们可以通过**波形**图和放大图来可视化技术的效果。然而，仍然没有什么能代替直接聆听增强前后音频录音。你可以访问包含完整代码和音频播放按钮的Python笔记本，以便播放增强后的音频和原始录音。
- en: First, we discussed the theories and concepts of an audio file. The three fundamental
    components of an audio file are **amplitude**, **frequency**, and **sampling rate**.
    The measurements of unit for frequency are **Hertz** (**Hz**) and **Kilohertz**
    (**kHz**). **Pitch** is similar to frequency, but the unit of measurement is the
    **decibel** (**dB**). Similarly, **bit rate** and **bit depth** are other forms
    expressing the sampling rate.
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们讨论了音频文件的理论和概念。音频文件的三个基本组成部分是**振幅**、**频率**和**采样率**。频率的单位是**赫兹**（**Hz**）和**千赫**（**kHz**）。**音高**类似于频率，但测量单位是**分贝**（**dB**）。类似地，**比特率**和**比特深度**是表示采样率的其他形式。
- en: Next, we explained the standard audio augmentation techniques. The three essentials
    are **time stretching**, **time shifting**, and **pitch scaling**. The others
    are **noise injection** and **polarity inversion**. Even more methods are available
    in the augmentation libraries, such as clip, gain, normalize, and **hyperbolic
    tangent** (**tanh**) distortion.
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们解释了标准的音频增强技术。三个基本要素是**时间拉伸**、**时间偏移**和**音高缩放**。其他的包括**噪声注入**和**极性反转**。增强库中还提供了更多方法，比如剪辑、增益、归一化和**双曲正切**（**tanh**）失真。
- en: Before downloading the real-world audio datasets, we discussed the top eight
    open source audio augmentation libraries. There are many robust audio augmentation
    libraries available. Pluto picked the **Librosa** library – after all, it’s the
    most established. Its second choice was the **Audiomentations** library because
    it is powerful and easy to integrate with other libraries. Facebook’s **Augly**
    libraries are strong contenders, and Pluto used them in other projects. Ultimately,
    because Pluto uses the wrapper function concept, he can choose any library or
    combination of libraries.
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 在下载现实世界的音频数据集之前，我们讨论了八大开源音频增强库。有许多强大的音频增强库可供选择。Pluto 选择了**Librosa**库——毕竟，它是最成熟的。其次是**Audiomentations**库，因为它功能强大且易于与其他库集成。Facebook
    的**Augly**库也很有竞争力，Pluto 在其他项目中也使用过它们。最终，因 Pluto 使用了包装函数的概念，他可以选择任何库或库的组合。
- en: 'As with image and text augmentation, Pluto downloaded three real-world audio
    datasets from the *Kaggle* website. Each dataset represents an audio category
    in everyday experiences: music, human speech, and urban sound.'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 与图像和文本增强一样，Pluto 从*Kaggle*网站下载了三个现实世界的音频数据集。每个数据集代表日常经验中的一个音频类别：音乐、人声和城市声音。
- en: Writing code in the Python Notebook helps us reinforce our understanding of
    each audio augmentation technique. Pluto explains the code and the output in detail.
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python Notebook 中编写代码帮助我们巩固对每种音频增强技术的理解。Pluto 会详细解释代码和输出结果。
- en: The output is fantastic, but the coding process seems repetitive. It is easy
    because Pluto follows the established pattern of creating a reusable class, adding
    new methods, downloading real-world data from the *Kaggle* website, importing
    it into pandas, leveraging best-of-class augmentation libraries, and writing new
    wrapper functions.
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 输出非常棒，但编码过程看起来有些重复。这很简单，因为 Pluto 遵循了创建可重用类、添加新方法、从*Kaggle*网站下载现实世界数据、导入 pandas、利用一流的增强库并编写新的包装函数的既定模式。
- en: Throughout this chapter, there were *fun facts* and *fun challenges*. Pluto
    hopes you will take advantage of these and expand your experience beyond the scope
    of this chapter.
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，有很多*有趣的事实*和*有趣的挑战*。Pluto 希望你能利用这些内容，扩展你在本章之外的经验。
- en: In the next chapter, Pluto will demystify audio using **spectograms**.
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 在下章中，Pluto 将用**频谱图**揭开音频的神秘面纱。
