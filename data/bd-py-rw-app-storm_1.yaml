- en: Chapter 1. Getting Acquainted with Storm
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。熟悉Storm
- en: 'In this chapter, you will get acquainted with the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将熟悉以下主题：
- en: An overview of Storm
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Storm概述
- en: The "before Storm" era and key features of Storm
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “风暴”之前的时代和风暴的关键特性
- en: Storm cluster modes
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 风暴集群模式
- en: Storm installation
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Storm安装
- en: Starting various daemons
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动各种守护程序
- en: Playing with Storm configurations
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 玩转Storm配置
- en: Over the complete course of the chapter, you will learn why Storm is creating
    a buzz in the industry and why it is relevant in present-day scenarios. What is
    this real-time computation? We will also explain the different types of Storm's
    cluster modes, the installation, and the approach to configuration.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在整个本章课程中，您将了解为什么Storm在行业中引起轰动，以及为什么它在当今的场景中很重要。这是什么实时计算？我们还将解释Storm的不同类型的集群模式，安装和配置方法。
- en: Overview of Storm
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Storm概述
- en: Storm is a distributed, fault-tolerant, and highly scalable platform for processing
    streaming data in a real-time manner. It became an Apache top-level project in
    September 2014, and was previously an Apache Incubator project since September
    2013.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Storm是一个分布式，容错和高度可扩展的平台，可实时处理流数据。它于2014年9月成为Apache顶级项目，并且自2013年9月以来一直是Apache孵化器项目。
- en: Real-time processing on a massive scale has become a requirement of businesses.
    Apache Storm provides the capability to process data (a.k.a tuples or stream)
    as and when it arrives in a real-time manner with distributed computing options.
    The ability to add more machines to the Storm cluster makes Storm scalable. Then,
    the third most important thing that comes with storm is fault tolerance. If the
    storm program (also known as topology) is equipped with reliable spout, it can
    reprocess the failed tuples lost due to machine failure and also give fault tolerance.
    It is based on XOR magic, which will be explained in [Chapter 2](ch02.html "Chapter 2. The
    Storm Anatomy"), *The Storm Anatomy*.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 实时处理大规模数据已成为企业的需求。Apache Storm提供了在分布式计算选项中以实时方式处理数据（也称为元组或流）的能力。向Storm集群添加更多机器使Storm具有可伸缩性。然后，随风暴而来的第三个最重要的事情是容错性。如果风暴程序（也称为拓扑）配备了可靠的喷口，它可以重新处理由于机器故障而丢失的失败元组，并且还具有容错性。它基于XOR魔术，将在[第2章](ch02.html
    "第2章。风暴解剖") *风暴解剖*中进行解释。
- en: Storm was originally created by Nathan Marz and his team at BackType. The project
    was made open source after it was acquired by Twitter. Interestingly, Storm received
    a tag as Real Time Hadoop.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Storm最初是由Nathan Marz及其BackType团队创建的。该项目在被Twitter收购后成为开源项目。有趣的是，Storm被称为实时Hadoop。
- en: 'Storm is best suited for many real-time use cases. A few of its interesting
    use cases are explained here:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Storm非常适合许多实时用例。这里解释了一些有趣的用例：
- en: '**ETL pipeline**: ETL stands for **Extraction**, **Transformation**, and **Load**.
    It is a very common use case of Storm. Data can be extracted or read from any
    source. Here, the data can be complex XML, a JDBC result set row, or simply a
    few key-value records. Data (also known as tuples in Storm) can be enriched on
    the fly with more information, transformed into the required storage format, and
    stored in a NoSQL/RDBMS data store. All of these things can be achieved at a very
    high throughput in a real-time manner with simple storm programs. Using the Storm
    ETL pipeline, you can ingest into a big data warehouse at high speed.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ETL管道**：ETL代表**提取**，**转换**和**加载**。这是Storm的一个非常常见的用例。数据可以从任何来源提取或读取。这里的数据可以是复杂的XML，JDBC结果集行，或者只是一些键值记录。数据（在Storm中也称为元组）可以在飞行中用更多信息进行丰富，转换为所需的存储格式，并存储在NoSQL/RDBMS数据存储中。所有这些都可以以实时方式通过简单的风暴程序以非常高的吞吐量实现。使用Storm
    ETL管道，您可以以高速将数据摄入到大数据仓库中。'
- en: '**Trending topic analysis**: Twitter uses such use cases to know the trending
    topics within a given time frame or at present. There are numerous use cases,
    and finding the top trends in a real-time manner is required. Storm can fit well
    in such use cases. You can also perform running aggregation of values with the
    help of any database.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**趋势话题分析**：Twitter使用这样的用例来了解给定时间范围内或当前的趋势话题。有许多用例，实时查找热门趋势是必需的。Storm可以很好地适应这样的用例。您还可以借助任何数据库执行值的运行聚合。'
- en: '**Regulatory check engine**: Real-time event data can pass through a business-specific
    regulatory algorithm, which can perform a compliance check in a real-time manner.
    Banks use these for trade data checks in real time.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监管检查引擎**：实时事件数据可以通过特定于业务的监管算法，以实时方式进行合规性检查。银行在实时进行交易数据检查时使用这些。'
- en: Storm can ideally fit into any use case where there is a need to process data
    in a fast and reliable manner, at a rate of more than 10,000 messages processing
    per second, as soon as data arrives. Actually, 10,000+ is a small number. Twitter
    is able to process millions of tweets per second on a large cluster. It depends
    on how well the Storm topology is written, how well it is tuned, and the cluster
    size.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 风暴可以理想地适应任何需要以快速可靠的方式处理数据的用例，每秒处理超过10,000条消息，一旦数据到达。实际上，10,000+是一个很小的数字。Twitter能够在大型集群上每秒处理数百万条推文。这取决于Storm拓扑结构的编写情况，调优情况以及集群大小。
- en: Storm program (a.k.a topologies) are designed to run 24x7 and will not stop
    until someone stops them explicitly.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Storm程序（也称为拓扑）旨在全天候运行，并且除非有人明确停止它们，否则不会停止。
- en: Storm is written using both Clojure as well as Java. Clojure is a Lisp, functional
    programming language that runs on JVM and is best for concurrency and parallel
    programming. Storm leverages the mature Java library, which was built over the
    last 10 years. All of these can be found inside the `storm`/`lib` folder.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Storm使用Clojure和Java编写。Clojure是一种Lisp，运行在JVM上的函数式编程语言，最适合并发和并行编程。Storm利用了成熟的Java库，该库在过去10年中构建。所有这些都可以在`storm`/`lib`文件夹中找到。
- en: Before the Storm era
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 风暴时代之前
- en: Before Storm became popular, real-time or near-real-time processing problems
    were solved using intermediate brokers and with the help of message queues. Listener
    or worker processes run using the Python or Java languages. For parallel processing,
    code was dependent on the threading model supplied using the programming language
    itself. Many times, the old style of working did not utilize CPU and memory very
    well. In some cases, mainframes were used as well, but they also became outdated
    over time. Distributed computing was not so easy. There were either many intermediate
    outputs or hops in this old style of working. There was no way to perform a fail
    replay automatically. Storm addressed all of these pain areas very well. It is
    one of the best real-time computation frameworks available for use.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在Storm变得流行之前，实时或准实时处理问题是使用中间代理和消息队列解决的。监听器或工作进程使用Python或Java语言运行。对于并行处理，代码依赖于编程语言本身提供的线程模型。许多时候，旧的工作方式并没有很好地利用CPU和内存。在某些情况下，还使用了大型机，但随着时间的推移，它们也变得过时了。分布式计算并不那么容易。在这种旧的工作方式中，要么有许多中间输出或跳跃。没有办法自动执行故障重放。Storm很好地解决了所有这些痛点。它是目前可用的最好的实时计算框架之一。
- en: Key features of Storm
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Storm的关键特性
- en: 'Here are Storm''s key features; they address the aforementioned problems:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Storm的关键特性；它们解决了前面提到的问题：
- en: '**Simple to program**: It''s easy to learn the Storm framework. You can write
    code in the programming language of your choice and can also use the existing
    libraries of that programming language. There is no compromise.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编程简单**：学习Storm框架很容易。您可以使用自己选择的编程语言编写代码，也可以使用该编程语言的现有库。没有妥协。'
- en: '**Storm already supports most programming languages**: However, even if something
    is not supported, it can be done by supplying code and configuration using the
    JSON protocol defined in the Storm **Data Specification Language** (**DSL**).'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Storm已经支持大多数编程语言**：但即使某些语言不受支持，也可以通过使用Storm **数据规范语言** (**DSL**)中定义的JSON协议提供代码和配置来实现。'
- en: '**Horizontal scalability or distributed computing is possible**: Computation
    can be multiplied by adding more machines to the Storm cluster without stopping
    running programs, also known as topologies.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**水平扩展性或分布式计算是可能的**：通过向Storm集群添加更多机器，可以增加计算而无需停止运行的程序，也称为拓扑。'
- en: '**Fault tolerant**: Storm manages worker and machine-level failure. Heartbeats
    of each process are tracked to manage different types of failure, such as task
    failure on one machine or an entire machine''s failure.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容错性**：Storm管理工作进程和机器级别的故障。跟踪每个进程的心跳以管理不同类型的故障，例如一台机器上的任务故障或整个机器的故障。'
- en: '**Guaranteed message processing**: There is a provision of performing auto
    and explicit ACK within storm processes on messages (tuples). If ACK is not received,
    storm can do a reply of a message.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**消息处理保证**：Storm进程可以在消息（元组）上执行自动和显式的ACK。如果未收到ACK，Storm可以重发消息。'
- en: '**Free, open source, and lots of open source community support**: Being an
    Apache project, Storm has free distribution and modifying rights without any worry
    about the legal aspect. Storm gets a lot of attention from the open source community
    and is attracting a large number of good developers to contribute to the code.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**免费、开源，以及大量的开源社区支持**：作为Apache项目，Storm具有免费分发和修改权，无需担心法律方面的问题。Storm受到开源社区的高度关注，并吸引了大量优秀的开发人员为其贡献代码。'
- en: Storm cluster modes
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Storm集群模式
- en: The Storm cluster can be set up in four flavors based on the requirement. If
    you want to set up a large cluster, go for distributed installation. If you want
    to learn Storm, then go for a single machine installation. If you want to connect
    to an existing Storm cluster, use client mode. Finally, if you want to perform
    development on an IDE, simply unzip the `storm` TAR and point to all dependencies
    of the `storm` library. At the initial learning phase, a single-machine storm
    installation is actually what you need.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 根据需求，Storm集群可以设置为四种不同的类型。如果您想要设置一个大型集群，可以选择分布式安装。如果您想学习Storm，那么选择单机安装。如果您想连接到现有的Storm集群，则使用客户端模式。最后，如果您想在IDE上进行开发，只需解压`storm`
    TAR并指向`storm`库的所有依赖项。在最初的学习阶段，单机器Storm安装实际上是您需要的。
- en: Developer mode
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 开发者模式
- en: A developer can download storm from the distribution site, unzip it somewhere
    in `$HOME`, and simply submit the Storm topology as local mode. Once the topology
    is successfully tested locally, it can be submitted to run over the cluster.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员可以从分发站点下载Storm，在`$HOME`的某个位置解压缩，并简单地以本地模式提交Storm拓扑。一旦拓扑在本地成功测试，就可以提交以在集群上运行。
- en: Single-machine Storm cluster
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 单机器Storm集群
- en: 'This flavor is best for students and medium-scale computation. Here, everything
    runs on a single machine, including **Zookeeper**, **Nimbus**, and **Supervisor**.
    `Storm/bin` is used to run all commands. Also, no extra Storm client is required.
    You can do everything from the same machine. This case is well demonstrated in
    the following figure:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型最适合学生和中等规模的计算。在这里，包括**Zookeeper**，**Nimbus**和**Supervisor**在内的所有内容都在一台机器上运行。`Storm/bin`用于运行所有命令。也不需要额外的Storm客户端。您可以在同一台机器上完成所有操作。这种情况在下图中有很好的演示：
- en: '![Single-machine Storm cluster](img/B03471_01_01.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![单机器Storm集群](img/B03471_01_01.jpg)'
- en: Multimachine Storm cluster
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 多机器Storm集群
- en: This option is required when you have a large-scale computation requirement.
    It is a horizontal scaling option. The following figure explains this case in
    detail. In this figure, we have five physical machines, and to increase fault
    tolerance in the systems, we are running Zookeeper on two machines. As shown in
    the diagram, **Machine 1** and **Machine 2** are a group of Zookeeper machines;
    one of them is the leader at any point of time, and when it dies, the other becomes
    the leader. **Nimbus** is a lightweight process, so it can run on either machine,
    1 or 2\. We also have **Machine 3**, **Machine 4**, and **Machine 5** dedicated
    for performing actual processing. Each one of these machines (3, 4, and 5) requires
    a supervisor daemon to run over there. Machines 3, 4, and 5 should know where
    the Nimbus/Zookeeper daemon is running and that entry should be present in their
    `storm.yaml`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当您有大规模计算需求时，需要选择此选项。这是一个水平扩展选项。下图详细解释了这种情况。在这个图中，我们有五台物理机器，为了增加系统的容错性，我们在两台机器上运行Zookeeper。如图所示，**Machine
    1**和**Machine 2**是一组Zookeeper机器；它们中的一个在任何时候都是领导者，当它死掉时，另一个就成为领导者。**Nimbus**是一个轻量级进程，所以它可以在机器1或2上运行。我们还有**Machine
    3**、**Machine 4**和**Machine 5**专门用于执行实际处理。这三台机器（3、4和5）中的每一台都需要运行一个监督守护进程。机器3、4和5应该知道Nimbus/Zookeeper守护进程运行的位置，并且该条目应该存在于它们的`storm.yaml`中。
- en: '![Multimachine Storm cluster](img/B03471_01_02.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![多机器Storm集群](img/B03471_01_02.jpg)'
- en: So, each physical machine (3, 4, and 5) runs one supervisor daemon, and each
    machine's `storm.yaml` points to the IP address of the machine where Nimbus is
    running (this can be 1 or 2). All Supervisor machines must add the Zookeeper IP
    addresses (1 and 2) to `storm.yaml`. The Storm UI daemon should run on the Nimbus
    machine (this can be 1 or 2).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，每台物理机器（3、4和5）运行一个监督守护进程，并且每台机器的`storm.yaml`指向Nimbus运行的机器的IP地址（可以是1或2）。所有监督守护进程机器都必须将Zookeeper的IP地址（1和2）添加到`storm.yaml`中。Storm
    UI守护进程应该在Nimbus机器上运行（可以是1或2）。
- en: The Storm client
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Storm客户端
- en: The Storm client is required only when you have a Storm cluster of multiple
    machines. To start the client, unzip the Storm distribution and add the Nimbus
    IP address to the `storm.yaml` file. The Storm client can be used to submit Storm
    topologies and check the status of running topologies from command-line options.
    Storm versions older than 0.9 should put the `yaml` file inside `$STORM_HOME/.storm/storm.yaml`
    (not required for newer versions).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 只有当您有多台机器的Storm集群时才需要Storm客户端。要启动客户端，解压Storm分发包，并将Nimbus IP地址添加到`storm.yaml`文件中。Storm客户端可用于从命令行选项提交Storm拓扑和检查正在运行的拓扑的状态。Storm版本早于0.9的版本应该将`yaml`文件放在`$STORM_HOME/.storm/storm.yaml`中（新版本不需要）。
- en: Note
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `jps` command is a very useful Unix command for seeing the Java process
    ID of Zookeeper, Nimbus, and Supervisor. The `kill -9 <pid>` option can stop a
    running process. The `jps` command will work only when `JAVA_HOME` is set in the
    `PATH` environment variable.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`jps`命令是一个非常有用的Unix命令，用于查看Zookeeper、Nimbus和Supervisor的Java进程ID。`kill -9 <pid>`选项可以停止正在运行的进程。`jps`命令只有在`PATH`环境变量中设置了`JAVA_HOME`时才能工作。'
- en: Prerequisites for a Storm installation
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Storm安装的先决条件
- en: 'Installing Java and Python is easy. Let''s assume our Linux machine is ready
    with Java and Python:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Java和Python很容易。让我们假设我们的Linux机器已经准备好了Java和Python：
- en: A Linux machine (Storm version 0.9 and later can also run on Windows machines)
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个Linux机器（Storm版本0.9及更高版本也可以在Windows机器上运行）
- en: Java 6 (`set export PATH=$PATH:$JAVA_HOME/bin`)
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 6 (`set export PATH=$PATH:$JAVA_HOME/bin`)
- en: Python 2.6 (required to run Storm daemons and management commands)
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 2.6（用于运行Storm守护进程和管理命令）
- en: We will be making lots of changes in the storm configuration file (that is,
    `storm.yaml`), which is actually present under `$STORM_HOME/config`. First, we
    start the Zookeeper process, which carries out coordination between Nimbus and
    the Supervisors. Then, we start the Nimbus master daemon, which distributes code
    in the Storm cluster. Next, the Supervisor daemon listens for work assigned (by
    Nimbus) to the node it runs on and starts and stops the worker processes as necessary.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在storm配置文件（即`storm.yaml`）中进行许多更改，实际上该文件位于`$STORM_HOME/config`下。首先，我们启动Zookeeper进程，它在Nimbus和Supervisors之间进行协调。然后，我们启动Nimbus主守护进程，它在Storm集群中分发代码。接下来，Supervisor守护进程监听由Nimbus分配给其所在节点的工作，并根据需要启动和停止工作进程。
- en: ZeroMQ/JZMQ and Netty are inter-JVM communication libraries that permit two
    machines or two JVMs to send and receive process data (tuples) between each other.
    JZMQ is a Java binding of ZeroMQ. The latest versions of Storm (0.9+) have now
    been moved to Netty. If you download an old version of Storm, installing ZeroMQ
    and JZMQ is required. In this book, we will be considering only the latest versions
    of Storm, so you don't really require ZeroMQ/JZMQ.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: ZeroMQ/JZMQ和Netty是允许两台机器或两个JVM之间发送和接收进程数据（元组）的JVM间通信库。JZMQ是ZeroMQ的Java绑定。最新版本的Storm（0.9+）现在已经转移到Netty。如果您下载的是旧版本的Storm，则需要安装ZeroMQ和JZMQ。在本书中，我们只考虑最新版本的Storm，因此您实际上不需要ZeroMQ/JZMQ。
- en: Zookeeper installation
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Zookeeper installation
- en: Zookeeper is a coordinator for the Storm cluster. The interaction between Nimbus
    and worker nodes is done through Zookeeper. The installation of Zookeeper is well
    explained on the official website at [http://zookeeper.apache.org/doc/trunk/zookeeperStarted.html#sc_InstallingSingleMode](http://zookeeper.apache.org/doc/trunk/zookeeperStarted.html#sc_InstallingSingleMode).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Zookeeper是Storm集群的协调器。Nimbus和工作节点之间的交互是通过Zookeeper完成的。Zookeeper的安装在官方网站[http://zookeeper.apache.org/doc/trunk/zookeeperStarted.html#sc_InstallingSingleMode](http://zookeeper.apache.org/doc/trunk/zookeeperStarted.html#sc_InstallingSingleMode)上有很好的解释。
- en: 'The setup can be downloaded from:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 可以从以下位置下载设置：
- en: '[https://archive.apache.org/dist/zookeeper/zookeeper-3.3.5/zookeeper-3.3.5.tar.gz](https://archive.apache.org/dist/zookeeper/zookeeper-3.3.5/zookeeper-3.3.5.tar.gz).
    After downloading, edit the `zoo.cfg` file.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://archive.apache.org/dist/zookeeper/zookeeper-3.3.5/zookeeper-3.3.5.tar.gz](https://archive.apache.org/dist/zookeeper/zookeeper-3.3.5/zookeeper-3.3.5.tar.gz)。下载后，编辑`zoo.cfg`文件。'
- en: 'The following are the Zookeeper commands that are used:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用的Zookeeper命令：
- en: 'Starting the `zookeeper` process:'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动`zookeeper`进程：
- en: '[PRE0]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Checking the running status of the `zookeeper` service:'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查`zookeeper`服务的运行状态：
- en: '[PRE1]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Stopping the `zookeeper` service:'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 停止`zookeeper`服务：
- en: '[PRE2]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Alternatively, use `jps` to find `<pid>` and then use `kill -9 <pid>` to kill
    the processes.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，使用`jps`查找`<pid>`，然后使用`kill -9 <pid>`来终止进程。
- en: Storm installation
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Storm安装
- en: 'Storm can be installed in either of these two ways:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Storm可以通过以下两种方式安装：
- en: 'Fetch a Storm release from this location using Git:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Git从此位置获取Storm版本：
- en: '[https://github.com/nathanmarz/storm.git](https://github.com/nathanmarz/storm.git)'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/nathanmarz/storm.git](https://github.com/nathanmarz/storm.git)'
- en: 'Download directly from the following link: [https://storm.apache.org/downloads.html](https://storm.apache.org/downloads.html)'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 直接从以下链接下载：[https://storm.apache.org/downloads.html](https://storm.apache.org/downloads.html)
- en: Storm configurations can be done using `storm.yaml`, which is present in the
    `conf` folder.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`conf`文件夹中的`storm.yaml`进行Storm配置。
- en: The following are the configurations for a single-machine Storm cluster installation.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是单机Storm集群安装的配置。
- en: 'Port `# 2181` is the default port of Zookeeper. To add more than one `zookeeper`,
    keep entry – separated:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 端口`＃2181`是Zookeeper的默认端口。要添加多个`zookeeper`，请保持条目之间的分隔：
- en: '[PRE3]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Notice `supervisor.childopts: "-Xmx256m"`. In this setting, we reserved four
    supervisor ports, which means that a maximum of four worker processes can run
    on this machine.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '注意`supervisor.childopts: "-Xmx256m"`。在此设置中，我们保留了四个supervisor端口，这意味着最多可以在此机器上运行四个worker进程。'
- en: '`storm.local.dir`: This directory location should be cleaned if there is a
    problem with starting Nimbus and Supervisor. In the case of running a topology
    on the local IDE on a Windows machine, `C:\Users\<User-Name>\AppData\Local\Temp`
    should be cleaned.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`storm.local.dir`：如果启动Nimbus和Supervisor时出现问题，应清理此目录位置。在Windows机器上的本地IDE上运行拓扑的情况下，应清理`C:\Users\<User-Name>\AppData\Local\Temp`。'
- en: Enabling native (Netty only) dependency
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启用本地（仅Netty）依赖项
- en: Netty enables inter JVM communication and it is very simple to use.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Netty使得JVM之间的通信变得非常简单。
- en: Netty configuration
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Netty配置
- en: You don't really need to install anything extra for Netty. This is because it's
    a pure Java-based communication library. All new versions of Storm support Netty.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 您实际上不需要安装任何额外的内容来使用Netty。这是因为它是一个纯Java-based通信库。所有新版本的Storm都支持Netty。
- en: 'Add the following lines to your `storm.yaml` file. Configure and adjust the
    values to best suit your use case:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下行添加到您的`storm.yaml`文件中。配置和调整值以最适合您的用例：
- en: '[PRE4]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Starting daemons
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启动守护程序
- en: 'Storm daemons are the processes that are needed to pre-run before you submit
    your program to the cluster. When you run a topology program on a local IDE, these
    daemons auto-start on predefined ports, but over the cluster, they must run at
    all times:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Storm守护程序是在将程序提交到集群之前需要预先运行的进程。当您在本地IDE上运行拓扑程序时，这些守护程序会在预定义端口上自动启动，但在集群上，它们必须始终运行：
- en: 'Start the master daemon, `nimbus`. Go to the `bin` directory of the Storm installation
    and execute the following command (assuming that `zookeeper` is running):'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动主守护程序`nimbus`。转到Storm安装的`bin`目录并执行以下命令（假设`zookeeper`正在运行）：
- en: '[PRE5]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now we have to start the `supervisor` daemon. Go to the `bin` directory of
    the Storm installation and execute this command:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们必须启动`supervisor`守护程序。转到Storm安装的`bin`目录并执行此命令：
- en: '[PRE6]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To run in the background, use the following command:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 要在后台运行，请使用以下命令：
- en: '[PRE7]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If Nimbus or the Supervisors restart, the running topologies are unaffected
    as both are stateless.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果Nimbus或Supervisors重新启动，则运行中的拓扑不受影响，因为两者都是无状态的。
- en: 'Let''s start the `storm` UI. The Storm UI is an optional process. It helps
    us to see the Storm statistics of a running topology. You can see how many executors
    and workers are assigned to a particular topology. The command needed to run the
    storm UI is as follows:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们启动`storm` UI。 Storm UI是一个可选进程。它帮助我们查看运行拓扑的Storm统计信息。您可以看到为特定拓扑分配了多少执行器和工作进程。运行storm
    UI所需的命令如下：
- en: '[PRE8]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Alternatively, to run in the background, use this line with `nohup`:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，要在后台运行，请使用以下命令与`nohup`一起使用：
- en: '[PRE9]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: To access the Storm UI, visit `http://localhost:8080`.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问Storm UI，请访问`http://localhost:8080`。
- en: 'We will now start `storm logviewer`. Storm UI is another optional process for
    seeing the log from the browser. You can also see the `storm` log using the command-line
    option in the `$STORM_HOME/logs` folder. To start logviewer, use this command:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将启动`storm logviewer`。 Storm UI是另一个可选的进程，用于从浏览器查看日志。您还可以使用`$STORM_HOME/logs`文件夹中的命令行选项查看`storm`日志。要启动logviewer，请使用此命令：
- en: '[PRE10]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To run in the background, use the following line with `nohup`:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 要在后台运行，请使用以下命令与`nohup`一起使用：
- en: '[PRE11]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'To access Storm''s log, visit `http://localhost:8000log viewer` daemon should
    run on each machine. Another way to access the log of `<machine name>` for worker
    port `6700` is given here:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问Storm的日志，请访问`http://localhost:8000log viewer`守护程序应在每台机器上运行。另一种访问`<machine
    name>`的worker端口`6700`日志的方法在这里给出：
- en: '[PRE12]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'DRPC daemon: DRPC is another optional service. **DRPC** stands for **Distributed
    Remote Procedure Call**. You will require the DRPC daemon if you want to supply
    to the storm topology an argument externally through the DRPC client. Note that
    an argument can be supplied only once, and the DRPC client can wait for long until
    storm topology does the processing and the return. DRPC is not a popular option
    to use in projects, as firstly, it is blocking to the client, and secondly, you
    can supply only one argument at a time. DRPC is not supported by Python and Petrel.'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: DRPC守护程序：DRPC是另一个可选服务。**DRPC**代表**分布式远程过程调用**。如果您想通过DRPC客户端从外部提供参数给storm拓扑，您将需要DRPC守护程序。请注意，参数只能提供一次，DRPC客户端可能会长时间等待，直到storm拓扑进行处理并返回。DRPC不是项目中常用的选项，首先它对客户端是阻塞的，其次您一次只能提供一个参数。DRPC不受Python和Petrel支持。
- en: 'Summarizing, the steps for starting processes are as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，启动进程的步骤如下：
- en: First, all the Zookeeper daemons.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先是所有Zookeeper守护程序。
- en: Nimbus daemons.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Nimbus守护程序。
- en: Supervisor daemon on one or more machine.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个或多个机器上的Supervisor守护程序。
- en: The UI daemon where Nimbus is running (optional).
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: UI守护程序，Nimbus正在运行的地方（可选）。
- en: The Logviewer daemon (optional).
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Logviewer守护程序（可选）。
- en: Submitting the topology.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提交拓扑。
- en: You can restart the `nimbus` daemon anytime without any impact on existing processes
    or topologies. You can restart the supervisor daemon and can also add more supervisor
    machines to the Storm cluster anytime.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以随时重新启动`nimbus`守护程序，而不会对现有进程或拓扑产生影响。您可以重新启动监督程序守护程序，并随时向Storm集群添加更多监督程序机器。
- en: 'To submit `jar` to the Storm cluster, go to the `bin` directory of the Storm
    installation and execute the following command:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 要向Storm集群提交`jar`，请转到Storm安装的`bin`目录并执行以下命令：
- en: '[PRE13]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Playing with optional configurations
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 玩弄可选配置
- en: All the previous settings are required to start the cluster, but there are many
    other settings that are optional and can be tuned based on the topology's requirement.
    A prefix can help find the nature of a configuration. The complete list of default
    `yaml` configuration is available at [https://github.com/apache/storm/blob/master/conf/defaults.yaml](https://github.com/apache/storm/blob/master/conf/defaults.yaml).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 启动集群需要之前的所有设置，但还有许多其他可选设置可以根据拓扑的要求进行调整。前缀可以帮助找到配置的性质。默认的`yaml`配置的完整列表可在[https://github.com/apache/storm/blob/master/conf/defaults.yaml](https://github.com/apache/storm/blob/master/conf/defaults.yaml)上找到。
- en: Configurations can be identified by how the prefix starts. For example, all
    UI configurations start with `ui*`.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 配置可以通过前缀的起始方式进行识别。例如，所有UI配置都以`ui*`开头。
- en: '| Nature of the configuration | Prefix to look into |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| 配置的性质 | 要查找的前缀 |'
- en: '| --- | --- |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| General | `storm.*` |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| 一般 | `storm.*` |'
- en: '| Nimbus | `nimbus.*` |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| Nimbus | `nimbus.*` |'
- en: '| UI | `ui.*` |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| UI | `ui.*` |'
- en: '| Log viewer | `logviewer.*` |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| 日志查看器 | `logviewer.*` |'
- en: '| DRPC | `drpc.*` |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| DRPC | `drpc.*` |'
- en: '| Supervisor | `supervisor.*` |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| Supervisor | `supervisor.*` |'
- en: '| Topology | `topology.*` |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| 拓扑 | `topology.*` |'
- en: 'All of these optional configurations can be added to `STORM_HOME/conf/storm.yaml`
    for any change other than the default values. All settings that start with `topology.*`
    can either be set programmatically from the topology or from `storm.yaml`. All
    other settings can be set only from the `storm.yaml` file. For example, the following
    table shows three different ways to play with these parameters. However, all of
    these three do the same thing:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 除默认值以外，所有这些可选配置都可以添加到`STORM_HOME/conf/storm.yaml`中。所有以`topology.*`开头的设置可以从拓扑或`storm.yaml`中以编程方式设置。所有其他设置只能从`storm.yaml`文件中设置。例如，以下表格显示了玩弄这些参数的三种不同方式。然而，这三种方式都是做同样的事情：
- en: '| /conf/storm.yaml | Topology builder | Custom yaml |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| /conf/storm.yaml | 拓扑构建器 | 自定义yaml |'
- en: '| --- | --- | --- |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Changing `storm.yaml`(impacts all the topologies of the cluster) | Changing
    the topology builder while writing code(impacts only the current topology) | Supplying
    `topology.yaml` as a command-line option(impacts only the current topology) |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| 更改`storm.yaml`（影响集群的所有拓扑） | 在编写代码时更改拓扑构建器（仅影响当前拓扑） | 作为命令行选项提供`topology.yaml`（仅影响当前拓扑）
    |'
- en: '| `topology.workers: 1` | `conf.setNumberOfWorker(1);`This is supplied through
    Python code | Create `topology.yaml` with the entry made into it similar to `storm.yaml`,
    and supply it when running the topologyPython:`petrel submit --config topology.yaml`
    |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| `topology.workers: 1` | `conf.setNumberOfWorker(1);`这是通过Python代码提供的 | 创建`topology.yaml`，其中包含类似于`storm.yaml`的条目，并在运行拓扑时提供Python：`petrel
    submit --config topology.yaml` |'
- en: Any configuration change in `storm.yaml` will affect all running topologies,
    but when using the `conf.setXXX` option in code, different topologies can overwrite
    that option, what is best suited for each of them.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在`storm.yaml`中进行任何配置更改都会影响所有正在运行的拓扑，但在代码中使用`conf.setXXX`选项时，不同的拓扑可以覆盖该选项，以适应它们各自的最佳选择。
- en: Summary
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Here comes the conclusion of the first chapter. This chapter gave an overview
    of how applications were developed before Storm came into existence. A brief knowledge
    of what real-time computations are and how Storm, as a programming framework,
    is becoming so popular was also acquired as we went through the chapter and approached
    the conclusion. This chapter taught you to perform Storm configurations. It also
    gave you details about the daemons of Storm, Storm clusters, and their step up.
    In the next chapter, we will be exploring the details of Storm's anatomy.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 第一章的结论就要来了。本章概述了Storm出现之前应用程序是如何开发的。随着我们阅读本章并接近结论，我们还获得了实时计算的简要知识以及Storm作为编程框架如何变得如此受欢迎。本章教会了你执行Storm配置。它还为你提供了有关Storm的守护程序、Storm集群及其设置的详细信息。在下一章中，我们将探索Storm解剖的细节。
