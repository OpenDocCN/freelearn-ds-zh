- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Python Development Environment Setup
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 开发环境设置
- en: Before we can go through our FastAPI journey, we need to configure a Python
    environment following the best practices and conventions Python developers use
    daily to run their projects. By the end of this chapter, you’ll be able to run
    Python projects and install third-party dependencies in a contained environment
    that won’t raise conflicts if you happen to work on another project that uses
    different versions of the Python language or dependencies.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始 FastAPI 之旅之前，我们需要按照 Python 开发者日常使用的最佳实践和约定来配置 Python 环境，以运行他们的项目。在本章结束时，您将能够在一个受限的环境中运行
    Python 项目，并安装第三方依赖项，这样即使您在处理另一个使用不同 Python 版本或依赖项的项目时，也不会产生冲突。
- en: 'In this chapter, we will cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主要内容：
- en: Installing a Python distribution using `pyenv`
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `pyenv` 安装 Python 发行版
- en: Creating a Python virtual environment
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 Python 虚拟环境
- en: Installing Python packages with `pip`
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `pip` 安装 Python 包
- en: Installing the HTTPie command-line utility
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 HTTPie 命令行工具
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Throughout this book, we’ll assume you have access to a Unix-based environment,
    such as a Linux distribution or macOS.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们假设您可以访问基于 Unix 的环境，例如 Linux 发行版或 macOS。
- en: If you haven’t done so already, macOS users should install the *Homebrew* package
    ([https://brew.sh](https://brew.sh)), which helps a lot in installing command-line
    tools.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还没有这样做，macOS 用户应该安装 *Homebrew* 包管理器（[https://brew.sh](https://brew.sh)），它在安装命令行工具时非常有用。
- en: 'If you are a Windows user, you should enable **Windows Subsystem for Linux**
    (**WSL**) ([https://docs.microsoft.com/windows/wsl/install-win10](https://docs.microsoft.com/windows/wsl/install-win10))
    and install a Linux distribution (such as Ubuntu) that will run alongside the
    Windows environment, which should give you access to all the required tools. There
    are currently two versions of WSL: WSL and WSL2\. Depending on your Windows version,
    you might not be able to install the newest version. However, we do recommend
    using WSL2 if your Windows installation supports it.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是 Windows 用户，您应该启用 **Windows 子系统 Linux**（**WSL**）（[https://docs.microsoft.com/windows/wsl/install-win10](https://docs.microsoft.com/windows/wsl/install-win10)）并安装与
    Windows 环境并行运行的 Linux 发行版（如 Ubuntu），这将使您能够访问所有必需的工具。目前，WSL 有两个版本：WSL 和 WSL2。根据您的
    Windows 版本，您可能无法安装最新版本。然而，如果您的 Windows 安装支持，建议使用 WSL2。
- en: Installing a Python distribution using pyenv
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 pyenv 安装 Python 发行版
- en: 'Python is already bundled with most Unix environments. To ensure this is the
    case, you can run this command in a command line to show the Python version currently
    installed:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Python 已经捆绑在大多数 Unix 环境中。为了确保这一点，您可以在命令行中运行以下命令，查看当前安装的 Python 版本：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The output version displayed will vary depending on your system. You may think
    that this is enough to get started, but it poses an important issue: *you can’t
    choose the Python version for your project*. Each Python version introduces new
    features and breaking changes. Thus, it’s important to be able to switch to a
    recent version for new projects to take advantage of the new features but still
    be able to run older projects that may not be compatible. This is why we need
    `pyenv`.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 显示的版本输出将根据您的系统有所不同。您可能认为这足以开始，但它带来了一个重要问题：*您无法为您的项目选择 Python 版本*。每个 Python 版本都引入了新功能和重大变化。因此，能够切换到较新的版本以便为新项目利用新特性，同时还能运行可能不兼容的旧项目是非常重要的。这就是为什么我们需要
    `pyenv`。
- en: The **pyenv** tool ([https://github.com/pyenv/pyenv](https://github.com/pyenv/pyenv))
    helps you manage and switch between multiple Python versions on your system. It
    allows you to set a default Python version for your whole system but also per
    project.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**pyenv** 工具（[https://github.com/pyenv/pyenv](https://github.com/pyenv/pyenv)）帮助您管理并在系统中切换多个
    Python 版本。它允许您为整个系统设置默认的 Python 版本，也可以为每个项目设置。'
- en: 'Beforehand, you need to install several build dependencies on your system to
    allow `pyenv` to compile Python on your system. The official documentation provides
    clear guidance on this ([https://github.com/pyenv/pyenv/wiki#suggested- build-environment](https://github.com/pyenv/pyenv/wiki#suggested-%20build-environment)),
    but here are the commands you should run:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，您需要在系统上安装一些构建依赖项，以便 `pyenv` 可以在您的系统上编译 Python。官方文档提供了明确的指导（[https://github.com/pyenv/pyenv/wiki#suggested-build-environment](https://github.com/pyenv/pyenv/wiki#suggested-build-environment)），但以下是您应该运行的命令：
- en: 'Install the build dependencies:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装构建依赖项：
- en: 'For macOS users, use the following:'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 macOS 用户，请使用以下命令：
- en: '[PRE1]'
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'For Ubuntu users, use the following:'
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 Ubuntu 用户，使用以下命令：
- en: '[PRE2]'
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Package managers
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 包管理器
- en: '`brew` `and apt` are what are commonly known as package managers. Their role
    is to automate the installation and management of software on your system. Thus,
    you don’t have to worry about where to download them from and how to install and
    uninstall them. Those commands just tell the package manager to update its internal
    package index and then install the list of required packages.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`brew` 和 `apt` 是通常所说的软件包管理器。它们的作用是自动化系统上软件的安装和管理。因此，你不必担心从哪里下载它们，以及如何安装和卸载它们。这些命令只是告诉包管理器更新其内部的软件包索引，然后安装所需的软件包列表。'
- en: 'Install `pyenv`:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 `pyenv`：
- en: '[PRE3]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Tip for macOS users
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: macOS 用户提示
- en: 'If you are a macOS user, you can also install it with Homebrew: `brew` `install
    pyenv`.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是 macOS 用户，你也可以使用 Homebrew 安装它：`brew` `install pyenv`。
- en: 'This will download and execute an installation script that will handle everything
    for you. At the end, it’ll prompt you with some instructions to add some lines
    to your shell scripts so that `pyenv` is discovered properly by your shell:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将下载并执行一个安装脚本，为你处理所有事情。最后，它会提示你添加一些行到 shell 脚本中，以便 `pyenv` 能被 shell 正确发现：
- en: 'If your shell is `bash` (the default for most Linux distributions and older
    versions of macOS), run the following commands:'
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你的 shell 是 `bash`（大多数 Linux 发行版和旧版 macOS 的默认 shell），运行以下命令：
- en: '[PRE4]'
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: echo 'export PYENV_ROOT="$HOME/.pyenv"' >> ~/.zshrcecho 'command -v pyenv >/dev/null
    || export PATH="$PYENV_ROOT/bin:$PATH"' >> ~/.zshrcecho 'eval "$(pyenv init -)"'
    >> ~/.zshrc
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: echo 'export PYENV_ROOT="$HOME/.pyenv"' >> ~/.zshrcecho 'command -v pyenv >/dev/null
    || export PATH="$PYENV_ROOT/bin:$PATH"' >> ~/.zshrcecho 'eval "$(pyenv init -)"'
    >> ~/.zshrc
- en: '[PRE5]'
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: What is a shell and how do I know the one I’m using?
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是 shell，我怎么知道自己在使用哪个 shell？
- en: The shell is the underlying program running when you start a command line. It’s
    responsible for interpreting and running your commands. Several variants of those
    programs have been developed over time, such as `bash` and `zsh`. Even though
    they have their differences, in particular the names of their configuration files,
    they are mostly inter-compatible. To find out which shell you’re using, you can
    run the `echo $``SHELL` command.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Shell 是你启动命令行时正在运行的底层程序。它负责解释并执行你的命令。随着时间的推移，已经开发出了多种变种程序，如 `bash` 和 `zsh`。尽管它们在某些方面有所不同，尤其是在配置文件的命名上，但它们大多是兼容的。要查找你使用的是哪个
    shell，你可以运行 `echo $``SHELL` 命令。
- en: 'Reload your shell configuration to apply those changes:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新加载你的 shell 配置以应用这些更改：
- en: '[PRE6]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '$ pyenv>>> pyenv 2.3.6>>> Usage: pyenv <command> [<args>]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $ pyenv>>> pyenv 2.3.6>>> 用法：pyenv <command> [<args>]
- en: '[PRE7]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We can now install the Python distribution of our choice. Even though FastAPI
    is compatible with Python 3.7 and later, we’ll use Python 3.10 throughout this
    book, which has a more mature handling of the asynchronous paradigm and type hinting.
    All the examples in the book were tested with this version but should work flawlessly
    with newer versions. Let’s install Python 3.10:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在可以安装我们选择的 Python 发行版。虽然 FastAPI 兼容 Python 3.7 及以上版本，但本书中我们将使用 Python 3.10，这个版本在处理异步范式和类型提示方面更为成熟。本书中的所有示例都是用这个版本测试的，但应该在更新版本中也能顺利运行。让我们安装
    Python 3.10：
- en: '[PRE8]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This may take a few minutes since your system will have to compile Python from
    the source.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能需要几分钟，因为系统需要从源代码编译 Python。
- en: What about Python 3.11?
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 那 Python 3.11 呢？
- en: 'You might wonder why we use Python 3.10 here while Python 3.11 is already released
    and is available. At the time of writing, not every library we’ll use throughout
    this book officially supports this newest version. That’s why we prefer to stick
    with a more mature version. Don’t worry, though: what you’ll learn here will still
    be relevant to future versions of Python.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想，既然 Python 3.11 已经发布并可用，为什么我们在这里使用 Python 3.10？在写这本书的时候，我们将使用的所有库并不都正式支持最新版本。这就是我们选择使用一个更成熟版本的原因。不过别担心：你在这里学到的内容对未来的
    Python 版本仍然是相关的。
- en: 'Finally, you can set the default Python version with the following command:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，你可以使用以下命令设置默认的 Python 版本：
- en: '[PRE9]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This will tell your system to always use Python 3.10 by default unless specified
    otherwise in a specific project.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这将告诉系统，除非在特定项目中另有指定，否则默认始终使用 Python 3.10。
- en: 'To make sure everything is in order, run the following command to check the
    Python version that is invoked by default:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为确保一切正常，运行以下命令检查默认调用的 Python 版本：
- en: '[PRE10]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Congratulations! You can now handle any version of Python on your system and
    switch it whenever you like!
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！现在你可以在系统上处理任何版本的 Python，并随时切换！
- en: Why does it show 3.10.8 instead of just 3.10?
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么显示的是 3.10.8 而不是仅仅 3.10？
- en: 'The 3.10 version corresponds to a major version of Python. The Python core
    team regularly publishes major versions with new features, depreciations, and
    sometimes breaking changes. However, when a new major version is published, previous
    versions are not forgotten: they continue to receive bug and security fixes. It’s
    the purpose of the third part of the version.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 3.10 版本对应 Python 的一个主要版本。Python 核心团队定期发布主要版本，带来新特性、弃用和有时会有破坏性更改。然而，当发布新主要版本时，之前的版本并没有被遗忘：它们继续接收错误和安全修复。这就是版本号第三部分的意义。
- en: 'It’s very possible by the time you’re reading this book that you’ve installed
    a more recent version of Python 3.10, such as 3.10.9\. It just means that fixes
    have been published. You can find more information about how the Python life cycle
    works and how long the Python core team plans to support previous versions in
    this official document: [https://devguide.python.org/versions/](https://devguide.python.org/versions/).'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当你阅读本书时，你很可能已经安装了更新版本的 Python 3.10，例如 3.10.9，这意味着修复已发布。你可以在这个官方文档中找到更多关于 Python
    生命周期以及 Python 核心团队计划支持旧版本的时间的信息：[https://devguide.python.org/versions/](https://devguide.python.org/versions/)。
- en: Creating a Python virtual environment
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 Python 虚拟环境
- en: As for many programming languages of today, the power of Python comes from the
    vast ecosystem of third-party libraries, including FastAPI, of course, that help
    you build complex and high-quality software very quickly. The `pip`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 和今天的许多编程语言一样，Python 的强大来自于庞大的第三方库生态系统，其中当然包括 FastAPI，这些库帮助你非常快速地构建复杂且高质量的软件。`pip`。
- en: By default, when you install a third-party package with `pip`, it will install
    it for the *whole system*. This is different from some other languages, such as
    Node.js’ `npm`, which by default creates a local directory for the current project
    to install those dependencies. Obviously, this may cause issues when you work
    on several Python projects with dependencies having conflicting versions. It also
    makes it difficult to retrieve only the dependencies necessary to deploy a project
    properly on a server.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，当你使用 `pip` 安装第三方包时，它会为*整个系统*安装。与一些其他语言不同，例如 Node.js 的 `npm`，它默认会为当前项目创建一个本地目录来安装这些依赖项。显然，当你在多个
    Python 项目中工作，且这些项目的依赖项版本冲突时，这可能会导致问题。它还使得仅检索部署项目所需的依赖项变得困难。
- en: 'This is why Python developers generally use **virtual environments**. Basically,
    a virtual environment is just a directory in your project containing a copy of
    your Python installation and the dependencies of your project. This pattern is
    so common that the tool to create them is bundled with Python:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么 Python 开发者通常使用**虚拟环境**的原因。基本上，虚拟环境只是项目中的一个目录，其中包含你的 Python 安装副本和项目的依赖项。这个模式非常常见，以至于用于创建虚拟环境的工具已与
    Python 一起捆绑：
- en: 'Create a directory that will contain your project:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个将包含你的项目的目录：
- en: '[PRE11]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Tip for Windows with WSL users
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 针对使用 WSL 的 Windows 用户的提示
- en: If you are on Windows with WSL, we recommend that you create your working folder
    on the Windows drive rather than the virtual filesystem of the Linux distribution.
    It’ll allow you to edit your source code files in Windows with your favorite text
    editor or **integrated development environment** (**IDE**) while running them
    in Linux.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是带有 WSL 的 Windows，我们建议你在 Windows 驱动器上创建工作文件夹，而不是在 Linux 发行版的虚拟文件系统中。这样，你可以在
    Windows 中使用你最喜欢的文本编辑器或**集成开发环境**(**IDE**)编辑源代码文件，同时在 Linux 中运行它们。
- en: To do this, you can access your `C:` drive in the Linux command line through
    `/mnt/c`. You can thus access your personal documents using the usual Windows
    path, for example, `cd /mnt/c/Users/YourUsername/Documents`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，你可以通过 `/mnt/c` 在 Linux 命令行中访问你的 `C:` 驱动器。因此，你可以使用常规的 Windows 路径访问个人文档，例如
    `cd /mnt/c/Users/YourUsername/Documents`。
- en: 'You can now create a virtual environment:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你现在可以创建一个虚拟环境：
- en: '[PRE12]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Basically, this command tells Python to run the `venv` package of the standard
    library to create a virtual environment in the `venv` directory. The name of this
    directory is a convention, but you can choose another name if you wish.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，这个命令告诉 Python 运行标准库中的 `venv` 包，在 `venv` 目录中创建一个虚拟环境。这个目录的名称是一个约定，但你可以根据需要选择其他名称。
- en: 'Once this is done, you have to activate this virtual environment. It’ll tell
    your shell session to use the Python interpreter and the dependencies in the local
    directory instead of the global ones. Run the following command:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成此操作后，你需要激活这个虚拟环境。它会告诉你的shell会话使用本地目录中的Python解释器和依赖项，而不是全局的。运行以下命令：
- en: '[PRE13]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'After doing this, you may notice the prompt adds the name of the virtual environment:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此操作后，你可能会注意到提示符添加了虚拟环境的名称：
- en: '[PRE14]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Remember that the activation of this virtual environment is only available for
    the *current session*. If you close it or open other command prompts, you’ll have
    to activate it again. This is quite easy to forget, but it will become natural
    after some practice with Python.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，这个虚拟环境的激活仅对*当前会话*有效。如果你关闭它或打开其他命令提示符，你将需要重新激活它。这很容易被忘记，但经过一些Python实践后，它会变得自然而然。
- en: You are now ready to install Python packages safely in your project!
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以在项目中安全地安装Python包了！
- en: Installing Python packages with pip
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用pip安装Python包
- en: As we said earlier, `pip` is the built-in Python package manager that will help
    us install third-party libraries.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前所说，`pip`是内置的Python包管理器，它将帮助我们安装第三方库。
- en: A word on alternate package managers such as Poetry, Pipenv, and Conda
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 关于替代包管理器，如Poetry、Pipenv和Conda的一些话
- en: While exploring the Python community, you may hear about alternate package managers
    such as Poetry, Pipenv, and Conda. These managers were created to solve some issues
    posed by `pip`, especially around sub-dependencies management. While they are
    very good tools, we’ll see in [*Chapter 10*](B19528_10.xhtml#_idTextAnchor694),
    *Deploying a FastAPI Project*, that most cloud hosting platforms expect dependencies
    to be managed with the standard `pip` command. Therefore, they may not be the
    best choice for a FastAPI application.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在探索Python社区时，你可能会听说过像Poetry、Pipenv和Conda这样的替代包管理器。这些管理器的出现是为了解决`pip`的一些问题，特别是在子依赖项管理方面。虽然它们是非常好的工具，但我们将在[*第10章*](B19528_10.xhtml#_idTextAnchor694)《部署FastAPI项目》中看到，大多数云托管平台期望使用标准的`pip`命令来管理依赖项。因此，它们可能不是FastAPI应用程序的最佳选择。
- en: 'To get started, let’s install FastAPI and Uvicorn:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 开始之前，让我们先安装FastAPI和Uvicorn：
- en: '[PRE15]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We’ll talk about it in later chapters, but Uvicorn is required to run a FastAPI
    project.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在后面的章节中讨论它，但运行FastAPI项目需要Uvicorn。
- en: What does “standard” stand for after “uvicorn”?
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: “标准”在“uvicorn”后面是什么意思？
- en: You probably noticed the `standard` word inside square brackets just after `uvicorn`.
    Sometimes, some libraries have sub-dependencies that are not required to make
    the library work. Usually, they are needed for optional features or specific project
    requirements. The square brackets are here to indicate that we want to install
    the standard sub-dependencies of `uvicorn`.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能注意到`uvicorn`后面方括号中的`standard`一词。有时，一些库有一些子依赖项，这些依赖项不是必需的来使库工作。通常，它们是为了可选功能或特定项目需求而需要的。方括号在这里表示我们想要安装`uvicorn`的标准子依赖项。
- en: 'To make sure the installation worked, we can open a Python interactive shell
    and try to import the `fastapi` package:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保安装成功，我们可以打开Python交互式Shell并尝试导入`fastapi`包：
- en: '[PRE16]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: If it passes without any errors, congratulations, FastAPI is installed and ready
    to use!
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有错误出现，恭喜你，FastAPI已经安装并准备好使用了！
- en: Installing the HTTPie command-line utility
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装HTTPie命令行工具
- en: 'Before getting to the heart of the topic, there is one last tool that we’ll
    install. FastAPI is, as you probably know, mainly about building **REST APIs**.
    Thus, we need a tool to make HTTP requests to our API. To do so, we have several
    options:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在进入主题之前，我们还需要安装最后一个工具。正如你可能知道的，FastAPI主要用于构建**REST API**。因此，我们需要一个工具来向我们的API发送HTTP请求。为了做到这一点，我们有几种选择：
- en: '**FastAPI** **automatic documentation**'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**FastAPI** **自动文档**'
- en: '**Postman**: A GUI tool to perform HTTP requests'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Postman**：一个GUI工具，用于执行HTTP请求'
- en: '**cURL**: The well-known and widely used command-line tool to perform network
    requests'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**cURL**：广泛使用的命令行工具，用于执行网络请求'
- en: Even if visual tools such as FastAPI automatic documentation and Postman are
    nice and easy to use, they sometimes lack some flexibility and may not be as productive
    as command-line tools. On the other hand, cURL is a very powerful tool with thousands
    of options, but it can be complex and verbose for testing simple REST APIs.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 即使像FastAPI自动文档和Postman这样的可视化工具很好用且容易操作，它们有时缺乏一些灵活性，并且可能不如命令行工具高效。另一方面，cURL是一个非常强大的工具，具有成千上万的选项，但对于测试简单的REST
    API来说，它可能显得复杂和冗长。
- en: 'This is why we’ll introduce **HTTPie**, a command-line tool aimed at making
    HTTP requests. Compared to cURL, its syntax is much more approachable and easier
    to remember, so you can run complex requests off the top of your head. Besides,
    it comes with built-in JSON support and syntax highlighting. Since it’s a **command-line
    interface** (**CLI**) tool, we keep all the benefits of the command line: for
    example, we can directly pipe a JSON file and send it as the body of an HTTP request.
    It’s available to install from most package managers:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们将介绍 **HTTPie** 的原因，它是一个旨在简化 HTTP 请求的命令行工具。与 cURL 相比，它的语法更加友好，更容易记住，因此你可以随时运行复杂的请求。而且，它内置支持
    JSON 和语法高亮。由于它是一个 **命令行界面** (**CLI**) 工具，我们保留了命令行的所有优势：例如，我们可以直接将 JSON 文件通过管道传输，并作为
    HTTP 请求的主体发送。它可以通过大多数包管理器安装：
- en: 'macOS users can use this:'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: macOS 用户可以使用此命令：
- en: '[PRE17]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Ubuntu users can use this:'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ubuntu 用户可以使用此命令：
- en: '[PRE18]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Let’s see how to perform simple requests on a dummy API:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何对一个虚拟 API 执行简单请求：
- en: 'First, let’s retrieve the data:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们获取数据：
- en: '[PRE19]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: As you can see, you can invoke HTTPie with the `http` command and simply type
    the HTTP method and the URL. It outputs both the HTTP headers and the JSON body
    in a clean and formatted way.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，你可以使用 `http` 命令调用 HTTPie，简单地输入 HTTP 方法和 URL。它以清晰且格式化的方式输出 HTTP 头和 JSON
    请求体。
- en: 'HTTPie also supports sending JSON data in a request body very quickly without
    having to format the JSON yourself:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: HTTPie 还支持非常快速地在请求体中发送 JSON 数据，而无需手动格式化 JSON：
- en: '[PRE20]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: By simply typing the property name and its value separated by `=`, HTTPie will
    understand that it’s part of the request body in JSON. Notice here that we specified
    the `-v` option, which tells HTTPie to *output the request* before the response,
    which is very useful to check that we properly specified the request.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 只需输入属性名称及其值，用 `=` 分隔，HTTPie 就会理解这是请求体的一部分（JSON 格式）。注意，这里我们指定了 `-v` 选项，告诉 HTTPie
    在响应之前 *输出请求*，这对于检查我们是否正确指定了请求非常有用。
- en: 'Finally, let’s see how we can specify *request headers*:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们看看如何指定 *请求头部*：
- en: '[PRE21]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: That’s it! Just type your header name and value separated by a colon to tell
    HTTPie it’s a header.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！只需输入你的头部名称和值，用冒号分隔，告诉 HTTPie 这是一个头部。
- en: Summary
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: You now have all the tools and setup required to confidently run the examples
    of this book and all your future Python projects. Understanding how to work with
    `pyenv` and virtual environments is a key skill to ensure everything goes smoothly
    when you switch to another project or when you have to work on somebody else’s
    code. You also learned how to install third-party Python libraries using `pip`.
    Finally, you saw how to use HTTPie, a simple and efficient way to run HTTP queries
    that will make you more productive while testing your REST APIs.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经掌握了所有必要的工具和配置，可以自信地运行本书中的示例以及所有未来的 Python 项目。理解如何使用 `pyenv` 和虚拟环境是确保在切换到另一个项目或在其他人的代码上工作时一切顺利的关键技能。你还学会了如何使用
    `pip` 安装第三方 Python 库。最后，你了解了如何使用 HTTPie，这是一种简单高效的方式来运行 HTTP 查询，能够提高你在测试 REST API
    时的生产力。
- en: In the next chapter, we’ll highlight some of Python’s peculiarities as a programming
    language and grasp what it means *to* *be Pythonic*.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将重点介绍 Python 作为编程语言的一些独特之处，并理解什么是 *Pythonic*。
