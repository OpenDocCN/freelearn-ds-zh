- en: Chapter 5. First-cut Design and Implementation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章. 初步设计和实现
- en: Riding on the ingredients of a Cassandra data model that were explained in the
    previous chapters, now it is time to put them into a working application. We will
    begin defining what we really want to store and inquire in the data model, setting
    up the environment, writing the program code, and finally testing the application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 基于前几章中解释的Cassandra数据模型组件，现在是时候将它们应用到实际的工作应用中了。我们将开始定义在数据模型中真正想要存储和查询的内容，设置环境，编写程序代码，并最终测试应用。
- en: The application to be built is a Stock Screener Application, which stores the
    historical stock quotes in a Cassandra database for technical analysis. The application
    collects the stock quote data from a free source on the Internet and then applies
    some technical analysis indicators to find out the buy and sell reference signals.
    A brief and quick introduction of technical analysis is given in order to enable
    you to easily understand what the application does. Although it is oversimplified
    in architecture and not complete in features, it does provide a good foundation
    for further improvement on more advanced features to be made by you.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建的应用是一个股票筛选器应用，它将历史股票报价存储在Cassandra数据库中，用于技术分析。该应用从互联网上的免费来源收集股票报价数据，然后应用一些技术分析指标来找出买卖参考信号。为了使您能够轻松理解应用的功能，这里给出技术分析的一个简短快速介绍。尽管在架构上过于简化，功能上也不完整，但它确实为您提供了进一步改进更多高级功能的基础。
- en: Note
  id: totrans-3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Disclaimer**'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**免责声明**'
- en: It should be assumed that the methods, techniques, or indicators discussed in
    this book will be profitable and will not result in losses. There is no assurance
    that the strategies and methods presented will be successful, or that you will
    become a profitable trader. The past performance and results of any trading system
    or trading methodology are not necessarily indicative of future results. You should
    not trade with money that you cannot afford to lose. The examples discussed and
    presented in this book are for educational purposes only. These are not solicitations
    of any order to buy or sell. I assume no responsibility for your trading results.
    No representation is being made that any account will, or is likely to, achieve
    profits or losses similar to those discussed in this book. There is a very high
    degree of risk in trading. You are encouraged to consult a certified financial
    advisor before making any investment or trading decisions.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 应假定本书中讨论的方法、技术或指标将是有利可图的，不会导致损失。不能保证所提出的策略和方法将成功，或者您将成为一个有利可图的交易者。任何交易系统或交易方法的历史表现和结果并不一定预示未来的结果。您不应使用无法承受损失的资金进行交易。本书中讨论和展示的例子仅用于教育目的。这些不是购买或出售任何订单的招揽。我对您的交易结果不承担任何责任。没有表示任何账户将或可能实现与本书中讨论的类似利润或损失。交易风险非常高。在做出任何投资或交易决策之前，鼓励您咨询认证的财务顾问。
- en: Stock Screener Application
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 股票筛选器应用
- en: In this section, we will learn some background information of the sample application.
    Then, we will discuss the data source, the initial data model, and the high-level
    processing logic of the application.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习一些关于示例应用的背景信息。然后，我们将讨论数据源、初始数据模型以及应用的高级处理逻辑。
- en: An introduction to financial analysis
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 金融分析简介
- en: A stock screener is a utility program that uses a certain set of criteria to
    screen a large number of stocks that match your preferences. It is akin to a search
    engine on stocks but not on websites. The screening criteria might be based on
    fundamental and/or technical analysis methods.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 股票筛选器是一个使用一定套标准来筛选大量符合您偏好的股票的实用程序。它类似于股票搜索引擎，而不是网站搜索引擎。筛选标准可能基于基本面和/或技术分析方法。
- en: Firstly, let us look at what fundamental analysis is.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看看什么是基本面分析。
- en: Note
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Fundamental analysis**'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**基本面分析**'
- en: Fundamental analysis involves analyzing a company's historical and present financial
    statements and health, its management and competitive advantages, and its competitors
    and markets, in order to assess and calculate the value of a company stock and
    predict its probable price evolution. The goal is to make financial forecasts
    and find out the undervalued stock (stock that is cheap, in other words) for buy-and-hold.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 基本面分析涉及分析一家公司的历史和当前财务报表和健康状况，其管理和竞争优势，以及其竞争对手和市场，以便评估和计算公司股票的价值并预测其可能的价格走势。目标是进行财务预测并找出被低估的股票（换句话说，就是便宜的股票）用于买入并持有。
- en: In contrast, technical analysis is a totally different approach.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，技术分析是一种完全不同的方法。
- en: Note
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Technical analysis**'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**技术分析**'
- en: Technical analysis is a stock analysis methodology used to forecast the direction
    of prices through the study of past market data, primarily price and volume. The
    fundamental principle of technical analysis is that the market price reflects
    all the relevant information, so the analysis looks at the history of the trading
    patterns rather than external drivers such as economic, fundamental, and news
    events.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 技术分析是一种股票分析方法，通过研究过去的市场数据（主要是价格和成交量）来预测价格走势。技术分析的基本原理是市场价格反映了所有相关信息，因此分析关注的是交易模式的过去历史，而不是外部驱动因素，如经济、基本面和新闻事件。
- en: In this book, technical analysis is solely used for the Stock Screener Application.
    As technical analysis focuses on price actions, the Stock Screener Application
    requires stock price data as its input and then it applies technical analysis
    techniques to determine whether the stock fulfills the buy or sell conditions.
    Whenever such a condition is fulfilled, we can say that a trading signal is triggered.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，技术分析仅用于股票筛选器应用。由于技术分析侧重于价格行为，股票筛选器应用需要股票价格数据作为其输入，然后应用技术分析技术来确定股票是否满足买入或卖出条件。每当满足这种条件时，我们就可以说触发了交易信号。
- en: 'The conceptual design of the Stock Screener Application is shown in the following
    figure:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 股票筛选器应用程序的概念设计如图所示：
- en: '![An introduction to financial analysis](img/8884OS_05_01.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![金融分析简介](img/8884OS_05_01.jpg)'
- en: We will go through the preceding figure from the left to the right. **Data Feed
    Provider** is the source of stock quote data that is collected from a free Data
    Feed Provider on the Internet, such as Yahoo! Finance. It should be noted that
    Yahoo! Finance provides free-of-charge **end-of-day** (**EOD**) stock quote data,
    thus providing the daily stock quote. If you want the **Stock Screener** to produce
    intraday signals, you need to look for other Data Feed Providers who typically
    have a wide range of paid service offers available. **Historical Data** is a repository
    to store the historical stock quote data. **Stock Screener** is the application
    to be developed in this chapter. Lastly, **Alert List** is a list of trading signals
    found by the **Stock Screener**.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从左到右依次解释前面的图示。**数据提供者**是股票报价数据的来源，这些数据是从互联网上的免费数据提供者收集的，例如雅虎财经。需要注意的是，雅虎财经提供免费的**每日收盘价**（**EOD**）股票报价数据，因此提供每日股票报价。如果您希望**股票筛选器**产生日内信号，您需要寻找其他数据提供者，他们通常提供广泛的付费服务。**历史数据**是一个存储历史股票报价数据的仓库。**股票筛选器**是本章要开发的应用程序。最后，**警报列表**是**股票筛选器**找到的交易信号列表。
- en: Before we proceed to the high-level design of the **Stock Screener**, I would
    like to highlight the reasons of establishing the **Historical Data** repository.
    There are three major reasons. First, it can save tremendous network bandwidth
    from repeatedly downloading historical stock quote data from the Data Feed Provider
    (actually, Yahoo! Finance provides as many as 10 years of historical price data.)
    Second, it serves as a canonical data model so that the **Stock Screener** does
    not need to cater for the different data formats of different Data Feed Providers.
    Finally, the **Stock Screener** can still perform technical analysis on the historical
    data even though it is disconnected from the Internet.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续进行**股票筛选器**的高级设计之前，我想强调建立**历史数据**仓库的原因。主要有三个原因。首先，它可以节省大量网络带宽，避免从数据提供者（实际上，雅虎财经提供了多达10年的历史价格数据）反复下载历史股票报价数据。其次，它作为规范的数据模型，这样**股票筛选器**就不需要适应不同数据提供者的不同数据格式。最后，即使**股票筛选器**与互联网断开连接，它仍然可以对历史数据进行技术分析。
- en: Stock quote data
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 股票报价数据
- en: Technical analysis only focuses on price action. So what is price action? Price
    action is simply the movement of a stock's price. It is encompassed in technical
    and chart pattern analysis in an attempt to discover the order in the seemingly
    random movement of price.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 技术分析只关注价格动作。那么，价格动作是什么？价格动作简单地说就是股票价格的运动。它包含在技术分析和图表模式分析中，试图发现价格看似随机运动中的秩序。
- en: 'On a single day, the price action of a stock can be summarized by four important
    prices:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在单日，股票的价格动作可以总结为四个重要的价格：
- en: '**Open price**: This is the starting price for that day'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开盘价**：这是当天的起始价格'
- en: '**High price**: This is the highest price for that day'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最高价**：这是当天的最高价格'
- en: '**Low price**: This is the lowest price for that day'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最低价**：这是当天的最低价格'
- en: '**Close price**: This is the closing price for that day'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**收盘价**：这是当天的收盘价格'
- en: These four prices are usually abbreviated as OHLC. In addition to OHLC, another
    measure of how much of a given stock has been traded in a given period of time
    is known as Volume. For a complete trading day, the volume is called daily volume.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这四个价格通常被缩写为OHLC。除了OHLC之外，衡量在特定时间段内给定股票交易量的另一个指标被称为成交量。对于完整交易日，成交量被称为日成交量。
- en: Only five attributes such as **open price**, **high price**, **low price**,
    **close price**, and **volume** (**OHLCV**), provide all the necessary and sufficient
    data for technical analysis of stock. Now we know the input for technical analysis,
    but how do we get them?
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 只有开盘价、最高价、最低价、收盘价和成交量（**OHLC**）这五个属性，就提供了进行股票技术分析所需的所有必要和充分的数据。现在我们知道了技术分析的输入，但我们如何获取它们呢？
- en: 'Many websites provide free-of-charge stock quote data that are very easy to
    obtain, and are especially suitable for amateur or retail traders. The following
    websites are just a few of them listed for your reference:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 许多网站提供免费且易于获取的股票报价数据，特别适合业余或零售交易者。以下是一些供您参考的网站：
- en: 'Yahoo! Finance: [http://finance.yahoo.com](http://finance.yahoo.com)'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Yahoo! Finance: [http://finance.yahoo.com](http://finance.yahoo.com)'
- en: 'Google Finance: [https://www.google.com/finance](https://www.google.com/finance)'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Google Finance: [https://www.google.com/finance](https://www.google.com/finance)'
- en: 'EODData: [http://eoddata.com](http://eoddata.com)'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'EODData: [http://eoddata.com](http://eoddata.com)'
- en: 'However, there is a caveat that stock quote data might have errors, for example,
    incorrect high and low prices. In this book, I selected Yahoo! Finance as the
    prime Data Feed Provider. The following screenshot is a sample of the historical
    prices of a stock called *GS*:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有一个需要注意的问题，即股票报价数据可能存在错误，例如，最高价和最低价不正确。在这本书中，我选择了雅虎财经作为主要的数据流提供商。以下截图是名为*GS*的股票的历史价格样本：
- en: '![Stock quote data](img/8884OS_05_02.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![股票报价数据](img/8884OS_05_02.jpg)'
- en: 'As you scroll to the bottom of the web page, you will see a link *Download
    to Spreadsheet*. When you click on this link, the historical stock quote data
    can be downloaded as a **Comma Separated Values** (**CSV**) file. An excerpt of
    the CSV file is shown in the following screenshot:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当你滚动到网页底部时，你会看到一个链接*下载到电子表格*。当你点击这个链接时，可以下载历史股票报价数据作为**逗号分隔值**（**CSV**）文件。以下截图显示了CSV文件的一个片段：
- en: '![Stock quote data](img/8884OS_05_03.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![股票报价数据](img/8884OS_05_03.jpg)'
- en: Of course, we can manually download the historical stock quote data from the
    website. Nonetheless, it becomes impractical when we want to download the data
    of many different stocks on a daily basis. Thus, we will develop a program to
    automatically collect the data feed.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们可以从网站上手动下载历史股票报价数据。然而，当我们需要每天下载许多不同股票的数据时，这变得不切实际。因此，我们将开发一个程序来自动收集数据流。
- en: Initial data model
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 初始数据模型
- en: We now know that a single daily price action consists of a stock symbol, trading
    date, open price, high price, low price, close price, and volume. Obviously, a
    sequence of price action measured typically at successive trading days is of a
    time-series nature and Cassandra is very suitable for storing time-series type
    data.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在知道，单个每日价格动作包括股票代码、交易日期、开盘价、最高价、最低价、收盘价和成交量。显然，在连续交易日的价格动作序列是时间序列性质的，Cassandra非常适合存储这种类型的数据。
- en: As mentioned previously, it is beneficial to store the collected stock quote
    data locally in a repository. Therefore, we will implement the repository as a
    table in a Cassandra database.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，将收集到的股票报价数据本地存储在仓库中是有益的。因此，我们将实现一个Cassandra数据库中的表作为仓库。
- en: 'We can use CQL to define a table called `quote` to store the historical prices:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用CQL定义一个名为`quote`的表来存储历史价格：
- en: '[PRE0]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The column data types and names are self-explanatory.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 列的数据类型和名称是自解释的。
- en: 'One useful technique of designing a Cassandra data model is to imagine the
    visual representation of the internal storage of a row. The following figure is
    such an example:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 设计Cassandra数据模型的一个有用技术是想象行内部存储的视觉表示。以下是一个这样的例子：
- en: '![Initial data model](img/8884OS_05_04.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![初始数据模型](img/8884OS_05_04.jpg)'
- en: Based on the design of the primary key, the row key is `symbol` and the clustering
    column is `price_time`. It is expected that a row will become a wide row, as more
    historical stock quote data gets added to it. Without the internal storage picture,
    this might not be easy to spot in the initial data model design stage. For the
    time being, we just take note of the potential wide row problem and leave it as
    is (one possible solution is the date bucket pattern).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 根据主键的设计，行键是`symbol`，聚类列是`price_time`。预计随着更多历史股票报价数据的添加，行将变成宽行。如果没有内部存储图，在初始数据模型设计阶段可能不容易发现这一点。目前，我们只需注意潜在的宽行问题，并保持现状（一个可能的解决方案是日期桶模式）。
- en: Processing flow
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理流程
- en: 'The following figure shows the processing flow of the **Stock Screener**, which
    elaborates the conceptual design with a more detailed sequence of steps. Each
    of the building blocks is explained starting first from the top, as shown in the
    following screenshot:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图显示了**股票筛选器**的处理流程，它通过更详细的步骤序列详细阐述了概念设计。每个构建块的解释从顶部开始，如下面的截图所示：
- en: '![Processing flow](img/8884OS_05_05.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![处理流程](img/8884OS_05_05.jpg)'
- en: '**Data Feed Provider** consists of **Data Feed**, **Data Feed Adapter**, and
    **Data Mapper and Archiver**. Yahoo! Finance is chosen as the data feed. **Data
    Feed Adapter** is used to deal with the different connectivity and interfacing
    methods if we switch to other Data Feed Providers. **Data Mapper and Archiver**
    caters for the different stock quote data formats and standardizes them to the
    corresponding columns of the `quote` table.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**数据馈送提供者**由**数据馈送**、**数据馈送适配器**和**数据映射器和归档器**组成。Yahoo! Finance被选为数据馈送。**数据馈送适配器**用于处理如果我们切换到其他数据馈送提供者时的不同连接性和接口方法。**数据映射器和归档器**针对不同的股票报价数据格式，并将它们标准化为`quote`表的相应列。'
- en: The `quote` table is the **Historical Data** repository and has been explained
    previously.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`quote`表是**历史数据**存储库，之前已经解释过。'
- en: We now turn our focus to the core **Stock Screener**. The heart of the **Stock
    Screener** is the **Stock Screener Engine** that uses the **Screening Rule** on
    the **Historical Data**, which is filtered by the **Data Scoper**. The **Screen
    Rule** is used by one or more **Technical Analysis Signals** so that the **Stock
    Screener Engine** produces an alert if the conditions of the **Technical Analysis
    Signals** are met.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将重点转向核心**股票筛选器**。**股票筛选器**的核心是**股票筛选器引擎**，它使用**筛选规则**在**历史数据**上，这些数据通过**数据范围器**过滤。**筛选规则**被一个或多个**技术分析信号**使用，以便当**技术分析信号**的条件满足时，**股票筛选器引擎**生成警报。
- en: The alert generated by the **Stock Screener Engine** is presented in the form
    of an **Alert List**, which can be kept as records or distributed through other
    means.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**股票筛选器引擎**生成的警报以**警报列表**的形式呈现，可以保留为记录或通过其他方式分发。'
- en: Basically, the **Data Feed Provider** and the **Stock Screener** need not run
    in the same process. They work in an asynchronous mode. This means that the **Data
    Feed Provider** can collect, map, and archive the historical stock quote data
    into the **Historical Data** repository, whereas the **Stock Screener** can analyze
    and produce alerts independently.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，**数据馈送提供者**和**股票筛选器**不需要在同一个进程中运行。它们以异步模式工作。这意味着**数据馈送提供者**可以收集、映射和归档历史股票报价数据到**历史数据**存储库，而**股票筛选器**可以独立分析和生成警报。
- en: We have come up with a high-level design of the application, the next thing
    to do is conceivably see how it can be implemented.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经提出了应用程序的高级设计，接下来要做的事情可能是看看它如何实现。
- en: System design
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 系统设计
- en: In this section, we will select the appropriate software for various system
    components.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将选择适合各种系统组件的适当软件。
- en: The operating system
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作系统
- en: When considering the implementation, the first fundamental choice is the operating
    system. The single most important constraint is that it must be supported by Cassandra.
    For this book, I have selected Ubuntu 14.04 LTS 64-bit Version, which can be obtained
    at the official Ubuntu website, [http://www.ubuntu.com/](http://www.ubuntu.com/).
    You should be able to painlessly set up your Linux box by following the verbose
    installation instructions.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在考虑实施时，第一个基本选择是操作系统。最重要的限制条件是它必须得到Cassandra的支持。对于这本书，我选择了Ubuntu 14.04 LTS 64位版本，可以在官方Ubuntu网站上获取，[http://www.ubuntu.com/](http://www.ubuntu.com/)。你应该能够通过遵循详细的安装说明轻松地设置你的Linux系统。
- en: However, it is entirely up to you to use any other operating systems, supported
    by Cassandra, such as Microsoft Windows and Mac OS X. Please follow the respective
    operating system installation instructions to set up your machine. I have already
    considered the portability of the Stock Screener. As you will see in the subsequent
    sections, the Stock Screener Application is designed and developed in order to
    be compatible with a great number of operating systems.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，使用任何其他由Cassandra支持的操作系统（如Microsoft Windows和Mac OS X）完全取决于你。请遵循相应操作系统的安装说明来设置你的机器。我已经考虑了Stock
    Screener的可移植性。正如你将在后续章节中看到的，Stock Screener应用程序被设计和开发成与大量操作系统兼容。
- en: Java Runtime Environment
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Java运行时环境
- en: As Cassandra is Java-based, a **Java Runtime Environment** (**JRE**) is required
    as a prerequisite. I have used Oracle Java SE Runtime Environment 7 64-bit Version
    1.7.0_65\. It is provided at the following URL:[http://www.oracle.com/technetwork/java/javase/downloads/jre7-downloads-1880261.html](http://www.oracle.com/technetwork/java/javase/downloads/jre7-downloads-1880261.html).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Cassandra是基于Java的，因此需要一个**Java运行时环境**（**JRE**）作为先决条件。我使用了Oracle Java SE运行时环境7
    64位版本1.7.0_65。可以在以下URL获取：[http://www.oracle.com/technetwork/java/javase/downloads/jre7-downloads-1880261.html](http://www.oracle.com/technetwork/java/javase/downloads/jre7-downloads-1880261.html)。
- en: Of course, I have downloaded the Linux x64 binary and followed the instructions
    at [http://www.datastax.com/documentation/cassandra/2.0/cassandra/install/installJreDeb.html](http://www.datastax.com/documentation/cassandra/2.0/cassandra/install/installJreDeb.html)
    to properly set up the JRE.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我已经下载了Linux x64二进制文件，并遵循了[http://www.datastax.com/documentation/cassandra/2.0/cassandra/install/installJreDeb.html](http://www.datastax.com/documentation/cassandra/2.0/cassandra/install/installJreDeb.html)上的说明来正确设置JRE。
- en: At the time of writing, Java SE has been updated to Version 8\. However, I have
    not tested JRE 8 and DataStax recommends JRE 7 for Cassandra 2.0 too. Therefore,
    I will stick to JRE 7 in this book.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，Java SE已更新到版本8。然而，我尚未测试JRE 8，DataStax也建议对于Cassandra 2.0使用JRE 7。因此，在这本书中，我将坚持使用JRE
    7。
- en: Java Native Access
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Java本地访问
- en: If you want to deploy Cassandra in production use on Linux platforms, **Java
    Native Access** (**JNA**) is required to improve Cassandra's memory usage. When
    installed and configured, Linux does not swap the **Java virtual machine** (**JVM**),
    and thus avoids any performance related issues. This is recommended as a best
    practice even when Cassandra, which is to be installed, is for non-production
    use.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在Linux平台上将Cassandra用于生产部署，**Java本地访问**（**JNA**）是必需的，以提高Cassandra的内存使用。安装和配置完成后，Linux不会交换**Java虚拟机**（**JVM**），从而避免任何与性能相关的问题。即使要安装的Cassandra不是用于生产用途，这也是一种最佳实践。
- en: 'To install JNA on Ubuntu, simply use Aptitude Package Manager with the following
    command in a terminal:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Ubuntu上安装JNA，只需在终端中使用以下命令通过Aptitude软件包管理器：
- en: '[PRE1]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Cassandra version
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Cassandra版本
- en: I used Cassandra Version 2.0.9, which is distributed by DataStax Community,
    on Debian or Ubuntu. The installation steps are well documented at [http://www.datastax.com/documentation/getting_started/doc/getting_started/gettingStartedDeb_t.html](http://www.datastax.com/documentation/getting_started/doc/getting_started/gettingStartedDeb_t.html).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用了由DataStax Community分发的Cassandra版本2.0.9，适用于Debian或Ubuntu。安装步骤在[http://www.datastax.com/documentation/getting_started/doc/getting_started/gettingStartedDeb_t.html](http://www.datastax.com/documentation/getting_started/doc/getting_started/gettingStartedDeb_t.html)上有很好的文档说明。
- en: The installation process typically takes several minutes depending on your Internet
    bandwidth and the performance of your machine.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 安装过程通常需要几分钟，具体取决于你的网络带宽和机器的性能。
- en: Note
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**DataStax**'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**DataStax**'
- en: DataStax is a computer software company based in Santa Clara, California which
    offers commercial enterprise grade for Apache Cassandra in its DataStax Enterprise
    product. It also provides tremendous support for the Apache Cassandra community.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: DataStax是一家位于加利福尼亚州圣克拉拉的计算机软件公司，它在DataStax Enterprise产品中提供Apache Cassandra的商业企业级支持。它还为Apache
    Cassandra社区提供巨大的支持。
- en: Programming language
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编程语言
- en: It is now time to turn our attention to the programming language for the implementation
    of the Stock Screener Application. For this book, I have chosen Python. Python
    is a high-level programming language designed for speed of development. It is
    open source, free, and cross-platform. It possesses a wealthy set of libraries
    for almost every popular algorithm you can imagine.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候将我们的注意力转向用于实现股票筛选器应用程序的编程语言了。对于这本书，我选择了Python。Python是一种为开发速度而设计的面向高级的编程语言。它是开源的、免费的，并且跨平台。它拥有几乎涵盖你所能想象到的几乎所有流行算法的丰富库集。
- en: You need not be afraid of learning Python if you are not familiar with it. Python
    is designed such that it is very easy to learn when compared to other programming
    languages such as C++. Coding a Python program is pretty much like writing pseudocode
    that improves the speed of development.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不太熟悉Python，不必害怕学习Python。Python的设计使得与其他编程语言（如C++）相比，学习起来非常容易。编写Python程序几乎就像编写伪代码，这可以加快开发速度。
- en: In addition, there are many renowned Python libraries used for data analysis,
    for example, NumPy, SciPy, pandas, scikit-learn, and matplotlib. You can make
    use of them to quickly build a full-blown application with all the bells and whistles.
    For the Stock Screener Application, you will use NumPy and pandas extensively.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还有许多用于数据分析的知名Python库，例如NumPy、SciPy、pandas、scikit-learn和matplotlib。你可以利用它们快速构建一个功能齐全的应用程序，包括所有功能。对于股票筛选器应用程序，你将广泛使用NumPy和pandas。
- en: When it comes to high performance, Python can also utilize Cython, which is
    an optimizing static complier for Python programs to run as fast as native C or
    C++ programs.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 当谈到高性能时，Python也可以利用Cython，这是一个用于Python程序的优化静态编译器，可以使程序运行得和原生C或C++程序一样快。
- en: The latest major version of Python is Python 3\. However, there are still many
    programs running that are written in Python 2\. This is caused by the breaking
    backward compatibility of Python 3 that makes the migration of so many libraries
    written in Python 2 to Python 3, a very long way to go. Hence, the coexistence
    of Python 2 and Python 3 is expected for quite a long time in future. For this
    book, Python 2.7.x is used.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Python的最新主要版本是Python 3。然而，仍然有许多程序是用Python 2编写的。这是由于Python 3向后不兼容性造成的，使得许多用Python
    2编写的库迁移到Python 3变得非常漫长。因此，预计Python 2和Python 3在未来相当长一段时间内会共存。对于这本书，使用Python 2.7.x。
- en: 'The following steps are used to install Python 2.7 in Ubuntu using a terminal:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤用于在Ubuntu中使用终端安装Python 2.7：
- en: '[PRE2]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Once the installation is complete, type the following command:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，输入以下命令：
- en: '[PRE3]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You should see the version string returned by Python, which tells you that the
    installation has been successful.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能看到Python返回的版本字符串，这告诉你安装已经成功。
- en: One problem that many Python beginners face is the cumbersome installation of
    the various library packages. To rectify this problem, I suggest that the reader
    downloads the Anaconda distribution. Anaconda is completely free and includes
    almost 200 of the most popular Python packages for Science, Mathematics, engineering,
    and data analysis. Although it is rather bulky in size, it frees you from the
    Python package hustle. Anaconda can be downloaded at [http://continuum.io/downloads](http://continuum.io/downloads),
    where you can select the appropriate versions of Python and the operating system.
    It is straightforward to install Anaconda by following the installation instructions,
    so I will not detail the steps here.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 许多Python初学者面临的一个问题是各种库包的繁琐安装。为了解决这个问题，我建议读者下载Anaconda发行版。Anaconda完全免费，包括近200个最流行的Python科学、数学、工程和数据分析包。尽管它体积相当大，但它让你摆脱了Python包的烦恼。Anaconda可以在[http://continuum.io/downloads](http://continuum.io/downloads)下载，在那里你可以选择合适的Python版本和操作系统。按照安装说明安装Anaconda非常简单，所以这里不会详细说明步骤。
- en: Cassandra driver
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Cassandra驱动程序
- en: The last item of the system environment is the driver software for Python to
    connect to a Cassandra database. In fact, there are several choices out there,
    for example, pycassa, Cassandra driver, and Thrift. I have chosen Python Driver
    2.0 for Apache Cassandra distributed by DataStax. It exclusively supports CQL
    3 and Cassandra's new binary protocol, which was introduced in Version 1.2\. More
    detailed information can be found at [http://www.datastax.com/documentation/developer/python-driver/2.0/common/drivers/introduction/introArchOverview_c.html](http://www.datastax.com/documentation/developer/python-driver/2.0/common/drivers/introduction/introArchOverview_c.html).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 系统环境的最后一个是Python连接到Cassandra数据库的驱动软件。实际上，有几种选择，例如pycassa、Cassandra驱动程序和Thrift。我选择了DataStax分发的Apache
    Cassandra Python驱动程序2.0。它仅支持CQL 3和Cassandra在1.2版本中引入的新二进制协议。更详细的信息可以在[http://www.datastax.com/documentation/developer/python-driver/2.0/common/drivers/introduction/introArchOverview_c.html](http://www.datastax.com/documentation/developer/python-driver/2.0/common/drivers/introduction/introArchOverview_c.html)找到。
- en: 'The driver can be easily installed with pip in a Ubuntu terminal:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 驱动程序可以很容易地在Ubuntu终端中使用pip安装：
- en: '[PRE4]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**pip**'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**pip**'
- en: pip is a command-line package management system used to install and manage Python
    library packages. Its project page can be found at Github, [https://github.com/pypa/pip](https://github.com/pypa/pip).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: pip是一个用于安装和管理Python库包的命令行包管理系统。其项目页面可在GitHub上找到，[https://github.com/pypa/pip](https://github.com/pypa/pip)。
- en: The integrated development environment
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集成开发环境
- en: Spyder is an open source, cross-platform **integrated development environment**
    (**IDE**), usually used for scientific programming in Python. It is automatically
    installed by Anaconda and integrates NumPy, SciPy, matplotlib, IPython, and other
    open source software. It is also my favorite Python development environment.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Spyder是一个开源的、跨平台的**集成开发环境**（**IDE**），通常用于Python的科学编程。它由Anaconda自动安装，并集成了NumPy、SciPy、matplotlib、IPython和其他开源软件。它也是我最喜欢的Python开发环境。
- en: There are many other good and popular Python IDEs, such as IPython and Eclipse.
    The code in this book is friendly to these IDEs.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多其他优秀且流行的Python IDE，如IPython和Eclipse。本书中的代码对这些IDE友好。
- en: The system overview
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 系统概述
- en: 'Alright, we have gone through the major system components of the Stock Screener
    Application and decided their implementation. The following figure depicts the
    system overview for the implementation of the application:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们已经了解了Stock Screener应用程序的主要系统组件，并决定了它们的实现。以下图展示了应用程序实现的系统概述：
- en: '![The system overview](img/8884OS_05_06.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![系统概述](img/8884OS_05_06.jpg)'
- en: It is worth noting that the system will be developed on a single Ubuntu machine
    first and then on a single node Cassandra cluster (In [Chapter 7](ch07.html "Chapter 7. Deployment
    and Monitoring"), *Deployment and Monitoring*, we will expand the cluster to a
    two-node cluster). It serves as a limit to the superb clustering capabilities
    of Cassandra. However, from the software development perspective, the most important
    thing is to completely realize the required functionalities rather than splitting
    the significant efforts on the system or infrastructure components, which are
    of second priority.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，系统将首先在单个Ubuntu机器上开发，然后在一个单节点Cassandra集群上开发（在[第7章](ch07.html "第7章。部署和监控")中，我们将集群扩展到双节点集群）。这限制了Cassandra卓越的集群能力。然而，从软件开发的角度来看，最重要的是完全实现所需的功能，而不是将大量精力分散在系统或基础设施组件上，这些组件的优先级较低。
- en: Code design and development
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码设计和开发
- en: We are now entering the development stage. I will walk you through the coding
    of the application building blocks step-by-step. Logically, two core modules will
    be built, namely, Data Feed Provider and Stock Screener. First, we will build
    the Data Feed Provider.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在进入开发阶段。我将逐步向您展示应用程序构建块的编码。从逻辑上讲，将构建两个核心模块，即数据源提供者和Stock Screener。首先，我们将构建数据源提供者。
- en: Data Feed Provider
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据源提供者
- en: 'The Data Feed Provider achieves the following three tasks:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 数据源提供者实现了以下三个任务：
- en: Collecting the historical stock quote data from Yahoo! Finance.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Yahoo! Finance收集历史股票报价数据。
- en: Transforming the received data into a standardized format.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将接收到的数据转换为标准格式。
- en: Saving the standardized data into the Cassandra database.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将标准化数据保存到Cassandra数据库中。
- en: Python has a well-known data analysis library called pandas. It is an open source
    library providing high-performance, easy-to-use data structures, and data analysis
    tools, especially, for time-series type of data. You can go to [http://pandas.pydata.org/](http://pandas.pydata.org/)
    for more details.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Python有一个著名的数据分析库，称为pandas。它是一个开源库，提供高性能、易于使用的数据结构和数据分析工具，特别是针对时间序列数据。您可以访问[http://pandas.pydata.org/](http://pandas.pydata.org/)获取更多详细信息。
- en: Collecting stock quote
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 收集股票报价
- en: 'pandas offers a `DataReader` function in its `pandas.io.data` package. `DataReader`
    extracts financial data from various Internet sources into a data structure known
    as `DataFrame`. Yahoo! Finance is one of the supported Internet sources, making
    the collection of the historical stock quote data a piece of cake. Refer to the
    following Python code, `cha` `pter05_001.py`:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: pandas在其`pandas.io.data`包中提供了一个`DataReader`函数。`DataReader`从各种互联网来源提取金融数据到称为`DataFrame`的数据结构中。Yahoo!
    Finance是支持的互联网来源之一，使得收集历史股票报价数据变得轻而易举。参考以下Python代码，`cha` `pter05_001.py`：
- en: '[PRE5]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: A brief explanation is required. pandas offers a very handy data structure called
    `DataFrame`, which is a two-dimensional labeled data structure with columns of
    potentially different types. You can think of it as a spreadsheet or SQL table.
    It is generally the most commonly used pandas object.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 需要简要说明。pandas提供了一个非常实用的数据结构，称为`DataFrame`，它是一个具有不同类型列的二维标签数据结构。您可以将其视为电子表格或SQL表。它通常是pandas中最常用的对象。
- en: 'The following is a screenshot demonstrating the use of Spyder to write and
    test `chapter05_001.py` code:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个使用Spyder编写和测试`chapter05_001.py`代码的截图：
- en: '![Collecting stock quote](img/8884OS_05_07.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![收集股票报价](img/8884OS_05_07.jpg)'
- en: The left-hand side of the Spyder IDE is the place where you write Python code.
    The middle panel on the right-hand side is the **IPython console** that runs the
    code.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: Spyder IDE的左侧是您编写Python代码的地方。右侧中间面板是**IPython控制台**，用于运行代码。
- en: Transforming data
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据转换
- en: Along with the data in the `DataFrame`, you can optionally pass index (row labels)
    and columns (column labels). The row and column labels can be accessed respectively,
    by accessing the index and columns attributes. For example, you can revisit the
    screenshot of `table.csv` and see that the column names returned by Yahoo! Finance
    are **Date**, **Open**, **High**, **Low**, **Close**, **Volume**, and **Adj Close**,
    respectively. `DataReader` uses **Date** as the index of the returned `DataFrame`.
    The remaining column names become the column labels of the `DataFrame`.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`DataFrame`中的数据外，您还可以选择性地传递索引（行标签）和列（列标签）。可以通过访问索引和列属性分别访问行和列标签。例如，您可以回顾`table.csv`的截图，并看到Yahoo!
    Finance返回的列名分别是**日期**、**开盘价**、**最高价**、**最低价**、**收盘价**、**成交量**和**调整后收盘价**，分别。`DataReader`使用**日期**作为返回的`DataFrame`的索引。其余的列名成为`DataFrame`的列标签。
- en: The last for-loop in `chapter05_001.py` is also worth some remarks. `DataFrame`
    has a function, `iterrows()`, for iterating over its rows as (index, columns)
    pairs. Therefore, the for-loop uses `iterrows()` to iterate the daily stock quotes
    and we simply print out the index (that is converted to a string by the `date()`
    function), and the **Open**, **High**, **Low**, **Close**, **Volume** columns
    by passing the respective column labels to the row. **Adj Close** is a close price
    with adjustments of stock split, merge, and dividend. We do not use this, as we
    want to focus on pure prices.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`chapter05_001.py`中的最后一个for循环也值得注意。`DataFrame`有一个名为`iterrows()`的函数，用于遍历其行作为（索引，列）对。因此，for循环使用`iterrows()`遍历每日股票报价，我们简单地打印出索引（通过`date()`函数转换为字符串），以及通过传递相应的列标签到行的**开盘价**、**最高价**、**最低价**、**收盘价**、**成交量**列。**调整后收盘价**是经过股票分割、合并和股息调整的收盘价。我们不使用它，因为我们想专注于纯价格。'
- en: 'Please be aware that stock quote data from the different sources might have
    different formats and, needless to say, different column names. Therefore, we
    need to take care of such a subtle difference, when mapping them to our standardized
    data model. `DataFrame` provides a very handy way to retrieve the data by column
    names and a few useful functions to manipulate the index and columns. We can make
    use of them to standardize the data format, as shown in `chapter05_002.py`:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，来自不同来源的股票报价数据可能有不同的格式，不用说，列名也不同。因此，在将它们映射到我们的标准化数据模型时，我们需要注意这种细微的差异。`DataFrame`提供了一个非常方便的方法通过列名检索数据，以及一些有用的函数来操作索引和列。我们可以利用它们来标准化数据格式，如`chapter05_002.py`所示：
- en: '[PRE6]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Storing data in Cassandra
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Cassandra中存储数据
- en: 'Before storing the retrieved data in Cassandra, we need to create the keyspace
    and table in the Cassandra database. We will create a keyspace called `packtcdma`
    and a table called `quote` in `chapter05_003.py` to hold the Historical Data,
    as shown in the following code:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在将检索到的数据存储到Cassandra之前，我们需要在Cassandra数据库中创建键空间和表。我们将在`chapter05_003.py`中创建一个名为`packtcdma`的键空间和一个名为`quote`的表来存储历史数据，如下面的代码所示：
- en: '[PRE7]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The comments of the code are sufficient to explain what it is doing. Now, we
    have the Historical Data repository ready and what follows is to store the received
    data into it. This is exactly the purpose of `chapter05_004.py` in which a Python
    function is created to insert the data, as shown in the following code:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 代码注释足以解释它在做什么。现在，我们已经准备好了历史数据存储库，接下来是将接收到的数据存储到其中。这正是`chapter05_004.py`的目的，其中创建了一个Python函数来插入数据，如下面的代码所示：
- en: '[PRE8]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Although `chapter05_004.py` contains less than ten lines of code, it is rather
    complicated and needs some explanation.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`chapter05_004.py`的代码行数不到十行，但它相当复杂，需要一些解释。
- en: We can create a function in Python using the keyword `def`. This must be followed
    by the function name and the parenthesized list of formal parameters. The code
    that form the body of the function starts in the next line, indented by a tab.
    Thus, in `chapter05_004.py`, the function name is `insert_quote()` with three
    parameters, namely, `ss`, `sym`, and `d`.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`def`关键字在Python中创建一个函数。这必须后跟函数名和括号内的形式参数列表。构成函数主体的代码从下一行开始，缩进一个制表符。因此，在`chapter05_004.py`中，函数名为`insert_quote()`，有三个参数，分别是`ss`、`sym`和`d`。
- en: Note
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Indentation in Python**'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '**Python中的缩进**'
- en: In Python, leading whitespace (spaces and tabs) at the beginning of a logical
    line is used to compute the indentation level of the line, which in turn is used
    to determine the grouping of statements. Be very careful of this. Most of the
    Python IDE has features to check against the indentations. The article on the
    myths about indentation of Python is worth reading, which is available at [http://www.secnetix.de/olli/Python/block_indentation.hawk](http://www.secnetix.de/olli/Python/block_indentation.hawk).
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，逻辑行开头的空白（空格和制表符）用于计算行的缩进级别，这反过来又用于确定语句的分组。对此要非常小心。大多数Python IDE都有检查缩进的特性。关于Python缩进神话的文章值得一读，可在[http://www.secnetix.de/olli/Python/block_indentation.hawk](http://www.secnetix.de/olli/Python/block_indentation.hawk)找到。
- en: The second interesting thing is the `prepare()` function. It is used to prepare
    CQL statements that are parsed by Cassandra and then saved for later use. When
    the driver uses a prepared statement, it only needs to send the values of parameters
    to bind. This lowers network traffic and CPU utilization as a result of the avoidance
    of re-parsing the statement each time.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个有趣的事情是`prepare()`函数。它用于准备由Cassandra解析并随后保存以供以后使用的CQL语句。当驱动程序使用预定义语句时，它只需要发送绑定参数的值。这避免了每次重新解析语句，从而降低了网络流量和CPU利用率。
- en: The placeholders for prepared statements are `?` characters so that the parameters
    are passed in sequence. This method is called positional parameter passing.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 预定义语句的占位符是`?`字符，这样参数就可以按顺序传递。这种方法称为位置参数传递。
- en: The last segment of code is a for-loop that iterates through the `DataFrame`
    and inserts each row into the quote table. We also use the `Decimal()` function
    to cast the string into numeric value.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的最后一段是一个for循环，它遍历`DataFrame`并将每一行插入到quote表中。我们还使用`Decimal()`函数将字符串转换为数值。
- en: Putting them all together
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将它们全部放在一起
- en: All pieces of Python code can be combined to make the Data Feed Provider. To
    make the code cleaner, the code fragment for the collection of stock quote is
    encapsulated in a function called `collect_data()` and that for data transformation
    in `transform_yahoo()` function. The complete program, `chapter05_` `005.py`,
    is listed as follows:.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 所有Python代码片段都可以组合起来制作数据馈送提供者。为了使代码更简洁，收集股票报价的代码片段被封装在一个名为`collect_data()`的函数中，而数据转换的代码片段被封装在`transform_yahoo()`函数中。完整的程序`chapter05_005.py`如下所示：
- en: '[PRE9]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Stock Screener
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 股票筛选器
- en: 'The Stock Screener retrieves historical data from the Cassandra database and
    applies technical analysis techniques to produce alerts. It has four components:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 股票筛选器从Cassandra数据库中检索历史数据，并应用技术分析技术以产生警报。它包含以下四个组件：
- en: Retrieve historical data over a specified period
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在指定时间段内检索历史数据
- en: Program a technical analysis indicator for time-series data
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为时间序列数据编程技术分析指标
- en: Apply the screening rule to the historical data
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将筛选规则应用于历史数据
- en: Produce alert signals
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 产生警报信号
- en: Data Scoper
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据范围
- en: 'To utilize technical analysis techniques, a sufficient optimal number of stock
    quote data is required for calculation. We do not need to use all the stored data,
    and therefore a subset of data should be retrieved for processing. The following
    code, `chapte05_006.py`, retrieves the historical data from the table quote within
    a specified period:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 为了利用技术分析技术，需要足够数量的股票报价数据进行计算。我们不需要使用所有存储的数据，因此应该检索数据的一个子集进行处理。以下代码`chapte05_006.py`从指定日期范围内的`quote`表中检索历史数据：
- en: '[PRE10]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The first portion of the function should be easy to understand. It executes
    a `select_cql` query for a particular stock symbol over a specified date period.
    The clustering column, `price_time`, makes range query possible here. The query
    result set is returned and used to fill two NumPy arrays, `idx` for index, and
    `cols` for columns. The `cols` array is then reshaped as a two-dimensional array
    with rows of prices and volume for each day. Finally, both `idx` and `cols` arrays
    are used to create a `DataFrame` to return `df`.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 函数的前一部分应该容易理解。它执行一个针对特定股票符号和指定日期段的`select_cql`查询。聚类列`price_time`使得范围查询成为可能。查询结果集被返回并用于填充两个NumPy数组，`idx`用于索引，`cols`用于列。然后`cols`数组被重塑为一个二维数组，其中包含每天的价格和成交量行。最后，使用`idx`和`cols`数组创建一个`DataFrame`以返回`df`。
- en: Time-series data
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 时间序列数据
- en: 'As a simple illustration, we use a 10-day **Simple Moving Average** (**SMA**)
    as the technical analysis signal for stock screening. pandas provides a rich set
    of functions to work with time-series data. The SMA can be easily computed by
    the `rolling_mean()` function, as shown in `chapter05_007.py`:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 作为简单的说明，我们使用10天的**简单移动平均**（**SMA**）作为股票筛选的技术分析信号。pandas提供了一套丰富的函数来处理时间序列数据。SMA可以通过`rolling_mean()`函数轻松计算，如`chapter05_007.py`所示：
- en: '[PRE11]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The screening rule
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 筛选规则
- en: 'When SMA is calculated, we can apply a screening rule in order to look for
    trading signals. A very simple rule is adopted: a buy-and-hold signal is generated
    whenever a trading day whose close price is higher than 10-day SMA. In Python,
    it is just a one liner by virtue of pandas power. Amazing! Here is an example:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 当计算简单移动平均（SMA）时，我们可以应用一个筛选规则来寻找交易信号。采用一个非常简单的规则：只要交易日的收盘价高于10日SMA，就生成一个买入并持有的信号。在Python中，这只是一个利用pandas功能的单行代码。太棒了！以下是一个示例：
- en: '[PRE12]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The Stock Screener engine
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 股票筛选引擎
- en: 'Until now, we coded the components of the Stock Screener. We now combine them
    together to generate the Alert List, as shown in the following code:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们编写了股票筛选器的组件。现在我们将它们组合起来生成警报列表，如下面的代码所示：
- en: '[PRE13]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Test run
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试运行
- en: An End-to-End Test consists of two parts. First, we test and verify `chapter05_005.py`,
    which is the complete Data Feed Provider module. Then run `chapter05_005.py` in
    Spyder. Historical stock quote data should be stored in the Cassandra database.
    Then run and verify the Stock Screener module, `chapter05_009.py`, also in Spyder.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 一个端到端测试包括两个部分。首先，我们测试和验证`chapter05_005.py`，这是完整的数据提供者模块。然后在Spyder中运行`chapter05_005.py`。历史股票报价数据应存储在Cassandra数据库中。然后运行并验证股票筛选模块`chapter05_009.py`，同样在Spyder中。
- en: 'A sample screen of the test run is shown in the following screenshot. The Alert
    List should have seven buy-and-hold trading signals:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了测试运行的样本筛选。警报列表应该有七个买入并持有的交易信号：
- en: '![Test run](img/8884OS_05_08.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![测试运行](img/8884OS_05_08.jpg)'
- en: Summary
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter was rather jam-packed. We designed a simple stock screening application
    that collects stock quote data from Yahoo! Finance, which uses Cassandra as its
    repository. The system environment of the application was also introduced with
    brief setup instructions. Then we developed the application in Python with a step-by-step
    explanation. Despite of using one Cassandra table, the basic row manipulation
    logic has been demonstrated.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 本章内容相当紧凑。我们设计了一个简单的股票筛选应用程序，该程序从雅虎财经收集股票报价数据，其存储库使用Cassandra。还介绍了应用程序的系统环境以及简要的设置说明。然后我们使用Python逐步解释开发了这个应用程序。尽管只使用了一个Cassandra表，但基本的行操作逻辑已经得到了演示。
- en: In the next chapter, we will continue enhancing the Stock Screener Application
    to collect stock quote data of a bunch of stocks and optimize the application
    with several refinements.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将继续增强股票筛选应用程序，以收集一批股票的股票报价数据，并通过几个改进来优化应用程序。
