- en: Jupyter Scala
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jupyter Scala
- en: Scala has become very popular. It is built on top of Java (so has full interoperability,
    including resorting to inline Java in your Scala code). However, the syntax is
    much cleaner and more intuitive, reworking some of the quirks in Java.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Scala 已经变得非常流行。它是建立在 Java 之上的（因此具有完全的互操作性，包括在 Scala 代码中嵌入 Java）。然而，它的语法更加简洁直观，改进了
    Java 中的一些怪异之处。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Installing Scala for Jupyter
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Scala 用于 Jupyter
- en: Using Scala features
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Scala 特性
- en: Installing the Scala kernel
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Scala 内核
- en: 'The steps for macOS are as follows (taken from [https://developer.ibm.com/hadoop/2016/05/04/install-jupyter-notebook-spark](https://developer.ibm.com/hadoop/2016/05/04/install-jupyter-notebook-spark)):'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: macOS 的安装步骤如下（摘自 [https://developer.ibm.com/hadoop/2016/05/04/install-jupyter-notebook-spark](https://developer.ibm.com/hadoop/2016/05/04/install-jupyter-notebook-spark)）：
- en: I could not get the steps for using the Scala kernel to work on a Windows 10
    machine.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我无法在 Windows 10 机器上使用 Scala 内核的步骤。
- en: 'Install `git` using the following command:'
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令安装 `git`：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Copy the `scala` package locally:'
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `scala` 包复制到本地：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Install the `sbt` build tool by running:'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令安装 `sbt` 构建工具：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Move the `jupyter-scala` directory to the `scala` package:'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `jupyter-scala` 目录移动到 `scala` 包：
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Build the package:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建包：
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To launch Scala shell, use the following command:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要启动 Scala shell，请使用以下命令：
- en: '[PRE5]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Check the kernels installed by running this command (you should now see Scala
    in the list):'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行此命令检查已安装的内核（现在应该可以在列表中看到 Scala）：
- en: '[PRE6]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Launch the Jupyter Notebook:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 Jupyter Notebook：
- en: '[PRE7]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You can now choose to use a Scala 2.11 shell.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您可以选择使用 Scala 2.11 的 shell。
- en: 'At this point, if you start Jupyter, you will see Scala listed:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，如果启动 Jupyter，您将看到 Scala 被列出：
- en: '![](img/15744930-19af-444a-ae79-ff8f777136a5.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/15744930-19af-444a-ae79-ff8f777136a5.png)'
- en: 'If we create a Scala Notebook, we end up with the familiar layout with an icon
    displaying that we are running Scala and the engine type string identified as
    Scala. The kernel name is also specified in the URL to Jupyter:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们创建一个 Scala Notebook，我们最终会看到熟悉的布局，图标显示我们正在运行 Scala，并且引擎类型字符串标识为 Scala。内核名称也在
    Jupyter 的 URL 中指定：
- en: '![](img/1f7e9abe-8026-471e-85e8-d4833d05eaee.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1f7e9abe-8026-471e-85e8-d4833d05eaee.png)'
- en: So, after naming our Notebook as Scala Notebook and then saving it, we get the
    familiar display of Notebooks on the home page, where the new Notebook is called
    `Scala Notebook.ipynb`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，在将我们的 Notebook 命名为 Scala Notebook 并保存后，我们将在主页上看到熟悉的 Notebook 显示，其中新 Notebook
    被命名为 `Scala Notebook.ipynb`。
- en: 'If we look in the `.ipynb` file, we can see markup similar to other Notebook
    types, with special markings for Scala:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看 `.ipynb` 文件，我们可以看到类似于其他 Notebook 类型的标记，带有 Scala 特有的标记：
- en: '[PRE8]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, we can enter Scala coding in some of the cells. Following the previous
    language examples (from earlier chapters), we can enter the following:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以在某些单元格中输入 Scala 代码。根据之前章节中的语言示例，我们可以输入以下内容：
- en: '[PRE9]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Scala has changeable variables (`var`) and fixed variables (`val`). We are not
    going to be changing the fields, so they are `val`. The last statement, `show`,
    is a Jupyter extension for use in Scala to display a variable.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Scala 有可变变量（`var`）和不可变变量（`val`）。我们不打算更改字段，因此它们是 `val`。最后一条语句 `show` 是 Jupyter
    为 Scala 提供的扩展，用于显示一个变量。
- en: 'If we run this script in Jupyter, we see the following:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在 Jupyter 中运行这个脚本，我们将看到如下内容：
- en: '![](img/5b1cc8ba-804b-436c-af82-e9c3a45dadb5.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5b1cc8ba-804b-436c-af82-e9c3a45dadb5.png)'
- en: In the output area of the cell, we see the expected `Dan is 37`. Interestingly,
    Scala also displays the current type and value for each variable in the script
    at that point as well.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在单元格的输出区域，我们看到预期的 `Dan is 37`。有趣的是，Scala 还会在脚本的这一点显示每个变量的当前类型和值。
- en: Scala data access in Jupyter
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jupyter 中的 Scala 数据访问
- en: 'There is a copy of the `iris` dataset on the University of California''s website
    (**Irvine**) at [https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data](https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data).
    We will access this data and perform several statistical operations on the same:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在加利福尼亚大学（**Irvine**）的网站上有一个 `iris` 数据集的副本，网址是 [https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data](https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data)。我们将访问此数据并进行几个统计操作：
- en: 'The Scala code is as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Scala 代码如下：
- en: '[PRE10]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: There seems to be an issue with accessing the CSV file over the internet. So,
    I copied the file locally, into the same directory where the Notebook resides).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 似乎存在通过互联网访问 CSV 文件的问题。所以，我将文件复制到本地，放入与 Notebook 相同的目录中。
- en: One noteworthy aspect regarding this script is the fact that we do not have
    to wrap the Scala code in an object, as would normally be required, since Jupyter
    provides the `wrapper` class.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这个脚本，有一个值得注意的地方是，我们不必像通常那样将Scala代码包裹在一个对象中，因为Jupyter提供了`wrapper`类。
- en: 'When we run the script, we see these results:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行脚本时，看到这些结果：
- en: '![](img/5d28e144-b10e-493d-bf9a-e0d5e7476a6c.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5d28e144-b10e-493d-bf9a-e0d5e7476a6c.png)'
- en: This is a different version of the `iris` data, hence, we see different results
    in the statistics than we saw earlier.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`iris`数据的不同版本，因此，我们看到的统计结果与之前有所不同。
- en: Scala array operations
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Scala数组操作
- en: Scala does not have pandas, but we can emulate some of that logic with our own
    coding. We will use the `Titanic` dataset used in [Chapter 2](5b1dcec0-2cf7-45b3-b09d-7b3536095926.xhtml), *Jupyter
    Python Scripting*, from [http://titanic-gettingStarted/fdownload/train.csv](http://titanic-gettingStarted/fdownload/train.csv)
    which we have downloaded to our local space.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Scala没有pandas，但我们可以通过自己的编码来模拟其中的一些逻辑。我们将使用[第2章](5b1dcec0-2cf7-45b3-b09d-7b3536095926.xhtml)中使用的`Titanic`数据集，*Jupyter
    Python脚本*，该数据集来自[http://titanic-gettingStarted/fdownload/train.csv](http://titanic-gettingStarted/fdownload/train.csv)，并已下载到我们的本地空间。
- en: 'We can then use similar coding to that used in [Chapter 2](5b1dcec0-2cf7-45b3-b09d-7b3536095926.xhtml), *Jupyter
    Python Scripting,* for pandas:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用类似于[第2章](5b1dcec0-2cf7-45b3-b09d-7b3536095926.xhtml)中*Jupyter Python脚本*使用的代码来处理pandas：
- en: '[PRE11]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In the code, we read the file line by line, parse out the columns (it is CSV),
    and then make calculations based on the `sex` column of the data. What is interesting
    is that Scala arrays are not zero-based.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码中，我们逐行读取文件，解析出列（它是CSV格式），然后根据数据的`sex`列进行计算。有趣的是，Scala的数组不是零索引的。
- en: 'When we run this script, we see very similar results to before:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行这个脚本时，我们看到的结果与之前非常相似：
- en: '![](img/fe76cf0c-5397-416f-99d0-08edf15d846a.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fe76cf0c-5397-416f-99d0-08edf15d846a.png)'
- en: So, we see drastically higher survival rates for women. I think the stories
    about women and children first are true.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们看到女性的生存率显著更高。我认为关于“妇女和儿童优先”的故事是事实。
- en: Scala random numbers in Jupyter
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Scala随机数在Jupyter中的使用
- en: In this example, we simulate rolling dice and counting how many times each combination
    appears. We then present a simple histogram for illustrative purposes.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们模拟掷骰子并统计每种组合出现的次数。然后我们展示了一个简单的直方图来做说明。
- en: 'The script is as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本如下：
- en: '[PRE12]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We first pull in the Scala `Random` library. We set the seed (in order to have
    repeatable results). We are drawing `1000` rolls. For each roll, we increment
    a counter of how many times the total number of pips on die one and die two appear.
    We then present an abbreviated histogram of the results.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先引入了Scala的`Random`库。我们设置了种子（以便得到可重复的结果）。我们进行`1000`次掷骰。每次掷骰时，我们都会增加一个计数器，记录骰子一和骰子二上的点数之和出现的次数。然后我们展示结果的简化直方图。
- en: Scala has a number of shortcut methods for quickly scanning through a list/collection,
    as seen in the `reduceLeft(_ max _)` statement. We can also find the minimum value
    by using `min` instead of `max` in the `reduceLeft` statement.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Scala有许多快捷方法，可以快速扫描列表/集合，如`reduceLeft(_ max _)`语句所示。我们也可以通过在`reduceLeft`语句中使用`min`代替`max`来找到最小值。
- en: 'When we run the script, we get these results:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行脚本时，我们得到这些结果：
- en: '![](img/dca9b1e4-0b6e-49f2-ba91-be0381ea936f.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dca9b1e4-0b6e-49f2-ba91-be0381ea936f.png)'
- en: We can see the crude histogram and the follow-on display of the current values
    of scalar variables in the script. Do note that I divided by three so that the
    results would fit on one page.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到粗略的直方图，以及脚本中标量变量的当前值显示。请注意，我将结果除以三，以便让结果能适应一页显示。
- en: Scala closures
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Scala闭包
- en: A closure is a function. The function resultant value depends on the value of
    variable(s) declared outside the function.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 闭包就是一个函数。这个函数的返回值依赖于函数外部声明的变量值。
- en: 'We can use this small script by way of illustration:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下小脚本进行说明：
- en: '[PRE13]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We define a function named `multiplier`. The function expects an `Int` argument.
    For each argument, we take the argument and multiply it by the external `factor`
    variable.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了一个名为`multiplier`的函数。该函数期望一个`Int`类型的参数。对于每个参数，我们将其与外部`factor`变量相乘。
- en: 'We see the following result:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到以下结果：
- en: '![](img/e1c38549-bc39-43c4-a300-d9e8618ecc66.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e1c38549-bc39-43c4-a300-d9e8618ecc66.png)'
- en: Closures have a nice feel as they do what you expect with little fanfare.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 闭包的使用感觉很好，它们做了你所期望的事情，而且非常简单直接。
- en: Scala higher-order functions
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Scala高阶函数
- en: A higher-order function either takes other functions as arguments or returns
    a function as its result.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 高阶函数要么接受其他函数作为参数，要么将一个函数作为结果返回。
- en: 'We can use this example script:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下示例脚本：
- en: '[PRE14]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We define two functions: one squares the number passed, and the other cubes
    the number passed.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了两个函数：一个对传入的数字进行平方，另一个对传入的数字进行立方。
- en: Next, we define a higher-order function that takes a number to work on and a
    processor to apply.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们定义了一个高阶函数，该函数接受一个数字进行处理并应用一个处理器。
- en: 'Lastly, we call each function. For example, we call `process()` with `5` and
    the `squared` function. The `process()` function passes `5` to the `squared()`
    function and returns the result:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们调用每个函数。例如，我们调用`process()`并传入`5`和`squared`函数。`process()`函数将`5`传递给`squared()`函数并返回结果：
- en: '![](img/cafafeae-b8fc-4543-ad8c-49c02cb40cf3.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cafafeae-b8fc-4543-ad8c-49c02cb40cf3.png)'
- en: We take advantage of Scala's engine automatically printing out variable values
    to see the  expected result.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们利用 Scala 的引擎自动打印变量值，以查看预期的结果。
- en: These functions are not doing very much. When I ran them, it took a few seconds
    for the results to display. I think there is a big performance hit using higher-order
    functions in Scala.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数并没有做太多的事情。当我运行它们时，结果显示花费了几秒钟。我认为在 Scala 中使用高阶函数会导致性能上的大幅下降。
- en: Scala pattern matching
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Scala 模式匹配
- en: Scala has very useful, built-in pattern matching. Pattern matching can be used
    to test for exact and/or partial matches of entire values, parts of objects, you
    name it.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Scala 具有非常有用的内置模式匹配。模式匹配可以用于测试整个值、对象的部分内容等的精确匹配和/或部分匹配。
- en: 'We can use this sample script for reference:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用这个示例脚本作为参考：
- en: '[PRE15]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We define a function called `matchTest`. The `matchTest` function takes any
    kind of argument and can return any type of result. (Not sure if that is real-life
    programming).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了一个名为`matchTest`的函数。`matchTest`函数可以接受任何类型的参数，并返回任何类型的结果。（不确定这是否是实际编程中的情况）
- en: The keyword of interest is `match`. This means the function will walk down the
    list of choices until it gets a match on to the `x` value passed and then returns.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 关键字是`match`。这意味着函数会遍历选择列表，直到找到与传入的`x`值匹配的项，然后返回。
- en: As you can see, we have numbers and strings as input and output.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们有数字和字符串作为输入和输出。
- en: The last `case` statement is a wildcard, and `_` is `catchall`, meaning that
    if the code gets that far, it will match any argument.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的`case`语句是一个通配符，`_`是`catchall`，这意味着如果代码执行到这一行，它将匹配任何参数。
- en: 'We can see the output as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到以下输出：
- en: '![](img/daebe713-33d9-4c05-ba21-6bd051a54120.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/daebe713-33d9-4c05-ba21-6bd051a54120.png)'
- en: Scala case classes
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Scala `case`类
- en: 'A `case` class is a simplified type that can be used without calling `new Classname(..)`.
    For example, we could have this script that defines a `case` class and uses it:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`case`类是一种简化类型，可以在不调用`new Classname(..)`的情况下使用。例如，我们可以有以下脚本，定义一个`case`类并使用它：'
- en: '[PRE16]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: So, we have a `case` class called `Car`. We make an instance of that class called
    `buickLeSabre`.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们有一个名为`Car`的`case`类。我们创建了这个类的一个实例，称为`buickLeSabre`。
- en: 'The `case` classes are most useful for pattern matching, since we can easily
    construct complex objects and examine their content. For example:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`case`类最适用于模式匹配，因为我们可以轻松构造复杂对象并检查其内容。例如：'
- en: '[PRE17]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We define a pattern `match` block (as in the previous section of this chapter).
    In the `match` block, we look at a `Car` object that has `brand` as `GM` and `model`
    as `Denali`, and so forth. For each of the models of interest, we classify its
    type. We also have the `catchall _` at the end so we can catch unexpected values.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义一个模式`match`块（如本章前一部分所述）。在`match`块中，我们查看一个`Car`对象，它的`brand`是`GM`，`model`是`Denali`，等等。对于每个感兴趣的模型，我们对其类型进行分类。我们还在末尾使用了`catchall
    _`，这样我们就可以捕捉到意外的值。
- en: 'We can exercise the `case` classes in Jupyter, as shown in this screenshot:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在 Jupyter 中练习`case`类，如下截图所示：
- en: '![](img/76e06323-2a6a-4072-b8a3-89c13a0d27ab.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/76e06323-2a6a-4072-b8a3-89c13a0d27ab.png)'
- en: We defined and used the `case` class as `Car`. We then did pattern matching
    using the `Car` class.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义并使用了`case`类作为`Car`。然后我们使用`Car`类进行了模式匹配。
- en: Scala immutability
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Scala 不变性
- en: Immutable means you cannot change something. In Scala, all variables are immutable,
    unless specifically marked otherwise. This is the opposite to languages such as
    Java, where all variables are mutable unless specifically marked otherwise.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 不变性意味着你不能改变某些东西。在 Scala 中，除非特别标记，否则所有变量都是不可变的。这与像 Java 这样的语言相反，在这些语言中，所有变量默认都是可变的，除非特别标记为不可变。
- en: 'In Java, we can have the following function:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Java 中，我们可以有如下的函数：
- en: '[PRE18]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We can modify the value of `amount` inside the `calculate` function. We can
    tell Java not to allow changing the value if we use the `final` keyword, as in:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在`calculate`函数内部修改`amount`的值。如果我们使用`final`关键字，我们可以告诉Java不允许更改该值，如下所示：
- en: '[PRE19]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Whereas in Scala:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 而在Scala中：
- en: '[PRE20]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'A similar routine leaves the value of the `amount` variable as it was before
    the routine was called:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 一个类似的例程将`amount`变量的值保持在例程调用前的状态：
- en: '![](img/daf89191-deb2-483f-8bbc-b2b3757a783c.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/daf89191-deb2-483f-8bbc-b2b3757a783c.png)'
- en: We can see in the display that even though `balance` is a variable (marked as
    `var`), Scala will not allow you to change its value inside the function. The
    `amount` parameter to the `calculate` function is assumed to be a `val` and cannot
    be changed once initialized.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在显示中看到，即使`balance`是一个变量（标记为`var`），Scala也不会允许你在函数内部更改它的值。传递给`calculate`函数的`amount`参数被认为是一个`val`，一旦初始化后就不能更改。
- en: Scala collections
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Scala集合
- en: 'In Scala, collections are automatically `mutable` or `immutable` depending
    on your usage. All collections in `scala.collections.immutable` are `immutable`.
    And vice-versa for `scala.collections.immutable`. Scala picks `immutable` collections
    by default, so your code will then draw automatically from the `mutable` collections,
    as in:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在Scala中，集合根据你的使用方式自动是`mutable`或`immutable`。`scala.collections.immutable`中的所有集合都是`immutable`。反之亦然，对于`scala.collections.mutable`。默认情况下，Scala选择`immutable`集合，因此你的代码将自动使用`mutable`集合，如下所示：
- en: '[PRE21]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Or, you can prefix your variable with `immutable`:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可以在变量前加上`immutable`：
- en: '[PRE22]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We can see this in this short example:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在这个简短的示例中看到这一点：
- en: '[PRE23]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'As we can see in this Notebook:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在这个Notebook中看到的：
- en: '![](img/2cc19d53-856b-400e-91ea-122c47b02234.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2cc19d53-856b-400e-91ea-122c47b02234.png)'
- en: 'Note that Scala cheated a little here: it created a new `collection` when we
    updated `immutableList`, as you can see with the variable name `real_3` instead.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，Scala在这里有一点小伎俩：当我们更新`immutableList`时，它创建了一个新的`collection`，正如你可以看到的变量名`real_3`所示。
- en: Named arguments
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命名参数
- en: 'Scala allows you to specify parameter assignment by name rather than just ordinal
    position. For example, we can have this code:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: Scala允许你通过名称而不是仅仅通过位置来指定参数赋值。例如，我们可以有如下代码：
- en: '[PRE24]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'If we run this in a Notebook, we can see the results:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在Notebook中运行这个代码，我们可以看到结果：
- en: '![](img/ed4ba648-b628-4de2-9abc-4632f7b2be1a.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ed4ba648-b628-4de2-9abc-4632f7b2be1a.png)'
- en: The first call divides the assigned parameters by position. The second call
    sets the parameters specifically, rather than using standard ordinal position
    assignment.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次调用通过位置划分传递的参数。第二次调用通过指定参数，而不是使用标准的序号位置分配。
- en: Scala traits
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Scala特性
- en: The `trait` function in Scala defines a set of features that can be implemented
    by classes. A `trait` interface is similar to an interface in Java.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: Scala中的`trait`函数定义了一组可以被类实现的特性。`trait`接口类似于Java中的接口。
- en: The `trait` function can be partially implemented, forcing the user (class)
    of `trait` to implement the details.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`trait`函数可以部分实现，强制`trait`的使用者（类）来实现具体的细节。'
- en: 'By way of an example, we could have this code:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，我们可以有如下代码：
- en: '[PRE25]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The code creates a `trait` called `Color`, with one partially implemented function, `isRed`.
    So, every class that uses `Color` will have to implement `isRed()`.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 该代码创建了一个名为`Color`的`trait`，并包含一个部分实现的函数`isRed`。因此，任何使用`Color`的类都必须实现`isRed()`。
- en: We then implement two classes, `Red` and `Blue`, that extend the `Color` trait
    (this is the Scala syntax for using `trait`). Since the `isRed()` function is
    partially implemented, both classes have to provide implementations for the `trait`
    function.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们实现两个类，`Red`和`Blue`，它们继承`Color`特性（这是使用`trait`的Scala语法）。由于`isRed()`函数是部分实现的，因此两个类都必须提供`trait`函数的实现。
- en: 'We can see how this operates in the following Notebook display:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在以下Notebook显示中看到这如何操作：
- en: '![](img/c55974d0-4def-45fb-b94d-0d5e6405088a.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c55974d0-4def-45fb-b94d-0d5e6405088a.png)'
- en: We see (in the output section at the bottom) that `trait` and `class` are created,
    and that two instances are created, along with the result of calling the `trait`
    function for both classes.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在输出部分（底部）看到，`trait`和`class`被创建，并且创建了两个实例，同时显示了调用这两个类的`trait`函数的结果。
- en: Summary
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we installed Scala for Jupyter. We used Scala coding to access
    larger datasets. We saw how Scala can manipulate arrays. We generated random numbers
    in Scala. There were examples of higher-order functions and pattern matching.
    We used `case` classes. We saw examples of immutability in Scala. We built collections
    using Scala packages. Finally, we looked at Scala traits.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们为 Jupyter 安装了 Scala。我们使用 Scala 编写代码来访问更大的数据集。我们展示了 Scala 如何操作数组。我们在 Scala
    中生成了随机数。还展示了高阶函数和模式匹配的例子。我们使用了 `case` 类。我们看到了 Scala 中不变性的例子。我们使用 Scala 包构建了集合。最后，我们了解了
    Scala 特质。
- en: In the next chapter, we will be looking at using big data in Jupyter.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何在 Jupyter 中使用大数据。
