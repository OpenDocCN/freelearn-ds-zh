- en: Chapter 1. Setting Up Your Geospatial Python Environment
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 1 章. 设置你的地理空间 Python 环境
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Installing virtualenv and virtualenvwrapper
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 virtualenv 和 virtualenvwrapper
- en: Installing pyproj and NumPy
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 pyproj 和 NumPy
- en: Installing shapely, matplotlib, and descartes
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 shapely、matplotlib 和 descartes
- en: Installing pyshp, geojson, and pandas
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 pyshp、geojson 和 pandas
- en: Installing SciPy, PySal, and IPython
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 SciPy、PySal 和 IPython
- en: Installing GDAL and OGR
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 GDAL 和 OGR
- en: Installing GeoDjango and PostgreSQL with PostGIS
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 PostGIS 安装 GeoDjango 和 PostgreSQL
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: This chapter will get the grunt work done for you so that you can freely and
    actively complete all the recipes in this book. We will start off by installing,
    each of the libraries you will be using, one by one. Once each step is completed,
    we will test each library installation to make sure it works. Since this book
    is directed toward those of you already working with spatial data, you can skip
    this chapter if you have it installed already. If not, you will find the installation
    instructions here useful as a reference.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将为你完成一些基础工作，以便你可以自由地、积极地完成本书中的所有菜谱。我们将从安装你将使用的每个库开始。一旦每个步骤完成，我们将测试每个库的安装以确保其工作。由于本书面向那些已经在处理空间数据的人，如果你已经安装了这些库，你可以跳过本章。如果没有，你将在这里找到有用的安装说明作为参考。
- en: The choice of Python libraries is based on industry-proven reliability and functionality.
    The plethora of functions in Python libraries has led to a flourishing GIS support
    on many top desktop GIS systems, such as QGIS and ESRI ArcGIS.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Python 库的选择基于行业验证的可靠性和功能性。Python 库中的众多功能导致了众多顶级桌面 GIS 系统上 GIS 支持的蓬勃发展，例如 QGIS
    和 ESRI ArcGIS。
- en: Also included in this book is an `installer.sh` bash file. The `installer.sh`
    file can be used to install the Python libraries that are available for your virtual
    environment from `pip` and other dependencies via the `apt-get` command. The `installer.sh`
    bash file is executed from the command line and installs almost everything in
    one go, so please take a look at it. For those of you who are starting with Python
    for the first time, follow the instructions in this chapter and your machine will
    be set up to complete different recipes.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本书还包括一个 `installer.sh` bash 文件。`installer.sh` 文件可用于使用 `pip` 和其他依赖项通过 `apt-get`
    命令安装你的虚拟环境中可用的 Python 库。`installer.sh` bash 文件从命令行执行，几乎一次性安装几乎所有内容，所以请查看它。对于那些第一次使用
    Python 的你，请遵循本章中的说明，你的机器将被设置以完成不同的菜谱。
- en: Installations can sometimes be tricky even for advanced users, so you will find
    some of the most common pitfalls and hook-ups described in this chapter.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对于高级用户来说，安装有时可能很棘手，所以你会在本章中找到一些最常见的陷阱和连接方法。
- en: The development of these recipes was completed on a fresh **Linux/Ubuntu 14.04**
    machine. Therefore, the code examples, if not otherwise specified, are Linux/Ubuntu-specific
    with Windows notes wherever necessary, unless otherwise specified.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这些菜谱的开发是在一个全新的 **Linux/Ubuntu 14.04** 机器上完成的。因此，除非另有说明，否则代码示例是针对 Linux/Ubuntu
    的，必要时会有 Windows 的注意事项。
- en: Installing virtualenv and virtualenvwrapper
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 virtualenv 和 virtualenvwrapper
- en: This recipe will enable you to manage different versions of different libraries
    for multiple projects. We use `virtualenv` to create virtual Python environments
    to host collections of project-specific libraries in an isolated directory. For
    example, you may have an old legacy project using Django 1.4, whereas a new project
    requires you use Django version 1.8\. With `virtualenv`, you can have both versions
    of Django installed on the same machine, and each project can access the appropriate
    version of Django without any conflicts or problems.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱将使你能够管理多个项目中不同库的不同版本。我们使用 `virtualenv` 来创建虚拟 Python 环境，在隔离的目录中托管项目特定的库集合。例如，你可能有一个使用
    Django 1.4 的旧遗留项目，而一个新的项目则需要你使用 Django 版本 1.8。使用 `virtualenv`，你可以在同一台机器上安装这两个版本的
    Django，并且每个项目都可以访问适当的 Django 版本，而不会出现任何冲突或问题。
- en: Without `virtualenv`, you are forced to either upgrade the old project or find
    a workaround to implement the new features of the other version, therefore limiting
    or complicating the new project.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 没有使用 `virtualenv`，你被迫要么升级旧项目，要么找到一种方法来实现其他版本的新的功能，因此限制了或复杂化了新项目。
- en: The `virtualenv` allows you to simply switch between different Python virtual
    environments for your individual projects. This has the added benefit that you
    can easily and quickly set up a new machine for testing or help a new developer
    get their machine up and running as fast as possible.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`virtualenv` 允许你轻松地在不同的 Python 虚拟环境中切换你的个人项目。这还有一个额外的好处，就是你可以轻松快速地设置一台新机器进行测试，或者帮助新开发者尽快将机器配置好。'
- en: Getting ready
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Before anything, we are going to assume that you already have a Linux/Ubuntu
    machine or a **virtualbox** instance running Linux/Ubuntu so you can follow these
    instructions.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在做任何事情之前，我们假设你已经有一个运行 Linux/Ubuntu 的机器或一个 **virtualbox** 实例，这样你就可以遵循这些说明。
- en: Tip
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: I also suggest trying out Vagrant ([http://www.vagrantup.com](http://www.vagrantup.com)),
    which uses virtualbox to box and standardize your development environment.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我还建议尝试使用 Vagrant ([http://www.vagrantup.com](http://www.vagrantup.com))，它使用
    virtualbox 来封装和标准化你的开发环境。
- en: Ubuntu 14.04 comes with Python 2.7.6 and Python 3.4 preinstalled; the other
    libraries are your responsibility as explained in the following sections.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Ubuntu 14.04 预装了 Python 2.7.6 和 Python 3.4；其他库的安装责任由以下章节解释。
- en: Windows users need to download and install Python 2.7.x from the Python home
    page at [https://www.python.org/downloads/windows/](https://www.python.org/downloads/windows/);
    please download the newest version of the 2.7.x series since this book is written
    with 2.7.X in mind. The installer includes a bundled version of pip, so make sure
    you install it!
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 用户需要从 Python 主页 [https://www.python.org/downloads/windows/](https://www.python.org/downloads/windows/)
    下载并安装 Python 2.7.x；请下载 2.7.x 系列的最新版本，因为本书是以 2.7.X 为前提编写的。安装程序包含 pip 的捆绑版本，所以请确保安装它！
- en: Take a close look at the correct version to download, making sure that you get
    either the *32-bit* or *64-bit* download. You cannot mix and match the versions,
    so be careful and remember to install the correct version.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细查看正确的版本以下载，确保你获得的是 *32 位* 或 *64 位* 下载。你不能混合使用版本，所以请小心，并记住安装正确的版本。
- en: 'A great site for other kinds of Windows binaries can be found at [http://www.lfd.uci.edu/~gohlke/pythonlibs/](http://www.lfd.uci.edu/~gohlke/pythonlibs/).
    Wheel files are the new norms of installations and can be executed from the command
    line as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在 [http://www.lfd.uci.edu/~gohlke/pythonlibs/](http://www.lfd.uci.edu/~gohlke/pythonlibs/)
    找到其他类型 Windows 二进制文件的优秀网站。Wheel 文件是安装的新规范，可以从命令行执行，如下所示：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: On Windows, make sure that your Python interpreter is set up on your system
    path. This way, you can simply call Python directly from the command prompt using
    the `C:\Users\Michael> python filename.py` command. If you need more help, information
    can be found by following one of the online instructions at [https://pypi.python.org/pypi/pip](https://pypi.python.org/pypi/pip).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 上，请确保你的 Python 解释器已设置在系统路径中。这样，你就可以通过命令提示符使用 `C:\Users\Michael> python
    filename.py` 命令直接调用 Python。如果你需要更多帮助，可以通过遵循在线说明之一来获取信息，信息可以在 [https://pypi.python.org/pypi/pip](https://pypi.python.org/pypi/pip)
    找到。
- en: As of Python 2.7.9 and later versions, `pip` is available on installation.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Python 2.7.9 及更高版本开始，`pip` 在安装时可用。
- en: Python 3 would be awesome to use, and for many Python GIS libraries, it is ready
    for show time. Unfortunately, not all GIS libraries jive with Python 3 (pyproj)
    as one would love to see at the time of writing this. If you want, feel free to
    go for Python 3.x and give it a go. A great webpage to check the compatibility
    of a library can be found at [https://caniusepython3.com/](https://caniusepython3.com/).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Python 3 会很棒，对于许多 Python GIS 库来说，它已经准备好展示其功能。不幸的是，并非所有 GIS 库都与 Python 3 (pyproj)
    兼容，正如在撰写本文时人们所期望的那样。如果你想尝试 Python 3.x，请随意尝试。一个检查库兼容性的优秀网页可以在 [https://caniusepython3.com/](https://caniusepython3.com/)
    找到。
- en: 'To install `virtualenv`, you need to have a running installation of Python
    and pip. The pip package manager manages and installs Python packages, making
    our lives easier. Throughout this book, if we need to install a package, `pip`
    will be our tool of choice for this job. The official installation instructions
    for pip can be found at [https://pip.pypa.io/en/latest/installing.html](https://pip.pypa.io/en/latest/installing.html).
    To install pip from the command line, we first need to install `easy_install`.
    Let''s try it out from the Terminal:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 `virtualenv`，您需要有一个运行的 Python 和 pip 安装。pip 软件包管理器管理和安装 Python 软件包，使我们的生活更轻松。在这本书的整个过程中，如果我们需要安装一个软件包，`pip`
    将是我们完成这项工作的首选工具。pip 的官方安装说明可以在 [https://pip.pypa.io/en/latest/installing.html](https://pip.pypa.io/en/latest/installing.html)
    找到。要从命令行安装 pip，我们首先需要安装 `easy_install`。让我们在终端中试试：
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: With this one line, you have both `pip` and `easy_install` installed.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行代码就安装了 `pip` 和 `easy_install`。
- en: Note
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**What is sudo?**'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**什么是 sudo？**'
- en: sudo is a program for Unix-like computer operating systems that allows users
    to run programs with the security privileges of another user (normally, the super
    user or root). Its name is a concatenation of **su** (**substitute user**) and
    **do** (**take action**). Take a look at [http://en.wikipedia.org/wiki/Sudo](http://en.wikipedia.org/wiki/Sudo)
    for more information on this.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: sudo 是一个用于类 Unix 计算机操作系统的程序，允许用户以其他用户的权限（通常是超级用户或 root）运行程序。其名称是 **su**（**substitute
    user**）和 **do**（**take action**）的组合。查看 [http://en.wikipedia.org/wiki/Sudo](http://en.wikipedia.org/wiki/Sudo)
    了解有关 sudo 的更多信息。
- en: 'The command **sudo** means to run an execution as a super user. If this fails,
    you will need to get the`ez_setup.py` file, which is available at [https://bootstrap.pypa.io/ez_setup.py](https://bootstrap.pypa.io/ez_setup.py).
    After downloading the file, you can run it from the command line:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 命令 **sudo** 表示以超级用户权限运行执行。如果失败，您将需要获取 `ez_setup.py` 文件，该文件可在 [https://bootstrap.pypa.io/ez_setup.py](https://bootstrap.pypa.io/ez_setup.py)
    找到。下载文件后，您可以从命令行运行它：
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now `pip` should be up and running and you can execute commands to complete
    the installations of **virtualenv** and **virtualenvwrapper**. The `virtualenvwrapper`
    creates shortcuts that are faster ways to create or delete your virtual environments.
    You can test it as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在 `pip` 应该已经启动并运行，您可以执行命令来完成 `virtualenv` 和 `virtualenvwrapper` 的安装。`virtualenvwrapper`
    创建了快捷方式，这是创建或删除虚拟环境的更快方式。您可以按照以下方式测试它：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How to do it...
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'The steps to install your Python `virtualenv` and `virtualenvwrapper` packages
    are as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 安装您的 Python `virtualenv` 和 `virtualenvwrapper` 软件包的步骤如下：
- en: 'Install `virtualenv` using the pip installer:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 pip 安装程序安装 `virtualenv`：
- en: '[PRE4]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Install `virtualenvwrapper` using `easy_install`:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `easy_install` 安装 `virtualenvwrapper`：
- en: '[PRE5]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We use `easy_install` instead of `pip` because with Ubuntu 14.04, the `virtualenvwrapper.sh`
    file is unfortunately not located at `/usr/local/bin/virtualenvwrapper.sh` where
    it should be according to the online documentation.
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们使用 `easy_install` 而不是 `pip`，因为在 Ubuntu 14.04 中，`virtualenvwrapper.sh` 文件不幸地没有位于
    `/usr/local/bin/virtualenvwrapper.sh`，而根据在线文档，它应该在那里。
- en: 'Assign the `WORKON_HOME` variable to your home directory with the folder name
    `venvs`. Create a single folder where you want to store all your different Python
    virtual environments; in my case, the folder is located at `/home/mdiener/venvs`:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `WORKON_HOME` 变量分配给您的家目录，文件夹名称为 `venvs`。创建一个文件夹，用于存储您所有的不同 Python 虚拟环境；在我的情况下，该文件夹位于
    `/home/mdiener/venvs`：
- en: '[PRE6]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Run the source command to execute the `virtualenvrapper.sh` bash file:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 source 命令以执行 `virtualenvrapper.sh` bash 文件：
- en: '[PRE7]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next, we create a new virtual environment called `pygeoan_cb`, and this is
    also the name of the new folder where the virtual environment is installed:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们创建一个新的虚拟环境，命名为 `pygeoan_cb`，这也是虚拟环境安装的新文件夹名称：
- en: '[PRE8]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: To use `virtualenvwrapper` the next time you start up your machine, we need
    to set it up so that your bash terminal runs the `virtualenvwrapper.sh` script
    when your computer starts.
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了在下次启动计算机时使用 `virtualenvwrapper`，我们需要设置它，以便您的 bash 终端在计算机启动时运行 `virtualenvwrapper.sh`
    脚本。
- en: 'First, put it in your `~/.bashrc` file:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，将其放入您的 `~/.bashrc` 文件中：
- en: '[PRE9]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Next, we''ll import the `virtualenvwrapper` function in our bash:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将导入 bash 中的 `virtualenvwrapper` 函数：
- en: '[PRE10]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now we can execute our bash:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以执行我们的 bash：
- en: '[PRE11]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: How it works...
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Step one shows how pip installs the `virtualenv` package into your system-wide
    Python installation. Step two shows how the `virtualenvwrapper` helper package
    is installed with `easy_install` because the `virtualenvwrapper.sh` file is not
    created using the pip installer. This will help us create, enter, and generally,
    work or switch between Python virtual environments with ease. Step three assigns
    the `WORKON_HOME` variable to a directory where we want to have all of our virtual
    environments. Then, we'll create a new directory to hold all the virtual environments.
    In step four, the command source is used to execute the shell script to set up
    the `virtualenvwrapper` package. In step five, we see how to actually create a
    new `virtualenv` called `pygeoan_cb` in our `/home/mdiener/venvs` directory. This
    final step automatically starts our `virtualenv` session.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步展示了pip如何将`virtualenv`包安装到您的系统级Python安装中。第二步展示了如何使用`easy_install`安装`virtualenvwrapper`辅助包，因为`virtualenvwrapper.sh`文件不是使用pip安装程序创建的。这将帮助我们轻松地创建、进入以及通常在Python虚拟环境之间工作或切换。第三步将`WORKON_HOME`变量分配给一个目录，我们希望在那里拥有所有虚拟环境。然后，我们将创建一个新的目录来存放所有虚拟环境。在第四步中，使用命令source执行shell脚本以设置`virtualenvwrapper`包。在第五步中，我们看到如何在`/home/mdiener/venvs`目录中创建一个新的名为`pygeoan_cb`的`virtualenv`。这一步将自动启动我们的`virtualenv`会话。
- en: 'Once the `virtualenv` session starts, we can now see the name of `virtualenv`
    in brackets like this:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦`virtualenv`会话开始，我们现在可以看到括号中的`virtualenv`名称，如下所示：
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'To exit `virtualenv`, simply type the following code:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 要退出`virtualenv`，只需输入以下代码：
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, your command line should be back to normal as shown here:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您的命令行应该恢复到正常状态，如下所示：
- en: '[PRE14]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'To reactivate `virtualenv`, simply type:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 要重新激活`virtualenv`，只需输入以下命令：
- en: '[PRE15]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Tip
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The `workon` command has *Tab* completion. So, simply type `workon`, and then
    the first letter of the name of the virtual environment you want to enter, such
    as `py`. Hit *Tab* and it will autocomplete the name.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`workon`命令有*Tab*自动完成功能。所以，只需输入`workon`，然后输入您想要进入的虚拟环境名称的第一个字母，例如`py`。按*Tab*键，它将自动完成名称。'
- en: Inside the `/venvs` folder, you will find specific individual virtual environments
    for each project in the form of a subfolder. The `virtualenvwrapper` package will
    always create a new folder for each new project you create. You can, therefore,
    easily delete a folder and it will remove your virtual environment.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在`/venvs`文件夹中，您将找到每个项目的特定虚拟环境，形式为一个子文件夹。`virtualenvwrapper`包将为每个新创建的项目创建一个新的文件夹。因此，您可以轻松地删除一个文件夹，这将删除您的虚拟环境。
- en: 'To quickly print a list all of the installed libraries to a file, we''ll use
    the `pip` command:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 要快速将所有已安装的库列表打印到文件中，我们将使用`pip`命令：
- en: '[PRE16]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This will create a text file called `requirements.txt` in the current folder.
    The text file contains a list of all the installed Python packages inside the
    Python virtual environment currently running.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在当前文件夹中创建一个名为`requirements.txt`的文本文件。该文本文件包含当前运行的Python虚拟环境中安装的所有Python包的列表。
- en: 'To create a new `virtualenv` from a requirements file, use the following command:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 要从需求文件创建新的`virtualenv`，请使用以下命令：
- en: '[PRE17]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: There's more…
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'For those of you who are just starting out with geospatial Python development,
    it should be noted that you should keep your project-specific code at another
    location outside your Python virtual environment folder. For example, I always
    have each project-related code contained in a separate folder called `01_projects`,
    which is my main folder. The path to my projects folder is `/home/mdiener/01_projects`,
    and the structure of two of my projects is as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些刚开始进行地理空间Python开发的人来说，应该注意的是，你应该将项目特定的代码保存在Python虚拟环境文件夹外的另一个位置。例如，我总是将每个项目相关的代码包含在一个名为`01_projects`的单独文件夹中，这是我的主要文件夹。我的项目文件夹的路径是`/home/mdiener/01_projects`，我两个项目的结构如下：
- en: '`01_projects/Name_project1`'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`01_projects/Name_project1`'
- en: '`01_projects/Name_project2`'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`01_projects/Name_project2`'
- en: 'All virtual environments are located under `/home/mdiener/venvs/`. Usually,
    I give them the same name as a project to keep things organized, as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 所有虚拟环境都位于`/home/mdiener/venvs/`下。通常，我会将它们命名为与项目相同的名称，以保持整洁，如下所示：
- en: '`/home/mdiener/venvs/Name_project1`'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/home/mdiener/venvs/Name_project1`'
- en: '`/home/mdiener/venvs/Name_project2`'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/home/mdiener/venvs/Name_project2`'
- en: Installing pyproj and NumPy
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装pyproj和NumPy
- en: The **pyproj** is a wrapper around the PROJ.4 library that works with projections
    and performs transformations ([https://pypi.python.org/pypi/pyproj/](https://pypi.python.org/pypi/pyproj/))
    in Python. All your geographic information should be projected into one of the
    many coordinate systems supported by the **European Petroleum Survey Group** (**EPSG**).
    This information is necessary for the systems to correctly place data at the appropriate
    location on Earth. The geographic data can then be placed on top of each other
    as layers upon layers of data in order to create maps or perform analysis. The
    data must be correctly positioned or we won't be able to add, combine, or compare
    it to other data sources spatially.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**pyproj** 是围绕 PROJ.4 库的一个包装器，它在 Python 中用于处理投影和执行变换 ([https://pypi.python.org/pypi/pyproj/](https://pypi.python.org/pypi/pyproj/))。所有你的地理信息都应该投影到由
    **欧洲石油调查组** （**EPSG**） 支持的众多坐标系之一。这些信息对于系统正确地将数据放置在地球上的适当位置是必要的。然后，地理数据可以像层层叠加的数据一样放置在彼此之上，以创建地图或执行分析。数据必须正确定位，否则我们无法将其添加、组合或与其他数据源在空间上进行比较。'
- en: Data comes from many sources and, often, a projection is not the same as a dataset.
    Even worse, the data could be delivered with a description from a data provider
    stating it's in projection UTM31 when, in reality, the data is in projection UTM34!
    This can lead to big problems later on when trying to get your data to work together
    as programs will throw you some ugly error messages.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 数据来自许多来源，并且，通常，投影并不等同于数据集。更糟糕的是，数据可能由数据提供者提供描述，声称它在投影 UTM31 中，而实际上数据在投影 UTM34
    中！这可能导致在尝试使数据协同工作时出现大问题，程序可能会抛出一些难看的错误信息。
- en: '**NumPy** is the scientific backbone of number crunching arrays and complex
    numbers that are used to power several popular geospatial libraries including
    **GDAL** (**geospatial abstraction library**). The power of NumPy lies is in its
    support for large matrices, arrays, and math functions. The installation of NumPy
    is, therefore, necessary for the other libraries to function smoothly, but is
    seldom used directly in our quest for spatial analysis.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**NumPy** 是用于科学计算数组以及复数的科学基础，这些被用于驱动多个流行的地理空间库，包括 **GDAL** （**地理空间抽象库**）。NumPy
    的强大之处在于其对大型矩阵、数组和数学函数的支持。因此，NumPy 的安装对于其他库能够顺利运行是必要的，但在我们进行空间分析的过程中，NumPy 很少被直接使用。'
- en: Getting ready
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Fire up your virtual environment, if it is not already running, using the following
    standard start command:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 启动你的虚拟环境，如果它还没有运行，请使用以下标准启动命令：
- en: '[PRE18]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Your prompt should now look like this:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 你的提示符现在应该看起来像这样：
- en: '[PRE19]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Note
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If `workon` for some reason does not start your virtual environment, you can
    start it simply by executing `source /home/mdiener/venvs/pygeoan_cb/bin/activate`
    from the command line; try the steps listed in the *Installing virtualenv and
    virtualenvwrapper* recipe again to get it going.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果由于某种原因 `workon` 没有启动你的虚拟环境，你可以简单地通过在命令行中执行 `source /home/mdiener/venvs/pygeoan_cb/bin/activate`
    来启动它；再次尝试列出在 *安装 virtualenv 和 virtualenvwrapper* 菜单中列出的步骤以使其运行。
- en: 'Now, we need to install some Python tools for development that allow us to
    install NumPy, so run this command:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要安装一些 Python 开发工具，以便我们可以安装 NumPy，因此运行此命令：
- en: '[PRE20]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: You are now ready to move on and install pyproj and NumPy inside your running
    virtual environment.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经准备好继续安装 pyproj 和 NumPy 到你的运行虚拟环境中。
- en: How to do it...
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Simply fire up `virtualenv` and we will use the pip installer to do all the
    heavy lifting as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 简单地启动 `virtualenv`，我们将使用 pip 安装程序来完成所有繁重的工作，如下所示：
- en: 'Use pip to go ahead and install NumPy; this can take a couple of minutes as
    many lines of installation verbosity are written on screen:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 pip 继续安装 NumPy；这可能需要几分钟，因为屏幕上会写出许多安装详细输出：
- en: '[PRE21]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Windows users can grab the `.whl` file for NumPy and execute it using following
    command:'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Windows 用户可以获取 NumPy 的 `.whl` 文件并使用以下命令执行它：
- en: '[PRE22]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Use `pip` one more time to install pyproj:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次使用 `pip` 来安装 pyproj：
- en: '[PRE23]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Windows users can use the following command to install pyproj:'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Windows 用户可以使用以下命令来安装 pyproj：
- en: '[PRE24]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Wait a few minutes; NumPy should be now running along with pyproj. To test
    if it''s worked out, enter the following command in the Python console. The output
    should look like this:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待几分钟；NumPy 应该现在与 pyproj 一起运行。要测试它是否成功，请在 Python 控制台中输入以下命令。输出应该看起来像这样：
- en: '[PRE25]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: No errors, I hope. You have now successfully installed NumPy and pyproj.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 希望没有错误。你现在已经成功安装了 NumPy 和 pyproj。
- en: Note
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'All sorts of errors could show up, so please take a look at the respective
    installation links to help you solve them:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 可能会出现各种错误，所以请查看相应的安装链接以帮助您解决问题：
- en: 'For pyproj: [https://pypi.python.org/pypi/pyproj/](https://pypi.python.org/pypi/pyproj/)'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 pyproj：[https://pypi.python.org/pypi/pyproj/](https://pypi.python.org/pypi/pyproj/)
- en: 'For NumPy: [http://www.numpy.org](http://www.numpy.org)'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 NumPy：[http://www.numpy.org](http://www.numpy.org)
- en: How it works...
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This easy installation works using the standard pip installation method. No
    tricks or special commands are needed. You need to simply execute the `pip install
    <library_name>` command and you are off to the races.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这种简单的安装使用标准的 pip 安装方法。不需要任何技巧或特殊命令。您只需执行 `pip install <library_name>` 命令，然后就可以开始了。
- en: Tip
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Library names can be found by visiting the [https://pypi.python.org/pypi](https://pypi.python.org/pypi)
    web page if you are unsure of the exact name you want to install.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不确定要安装的确切名称，可以通过访问 [https://pypi.python.org/pypi](https://pypi.python.org/pypi)
    网页来查找库名称。
- en: Installing shapely, matplotlib, and descartes
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 shapely、matplotlib 和 descartes
- en: A large part of geospatial analysis and visualization is made possible using
    Shapely, matplotlib, GDAL, OGR, and descartes, which are installed later. Most
    of the recipes here will use these libraries extensively so setting them up is
    necessary to complete our exercises.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 地理空间分析和可视化的大部分工作都是通过使用 Shapely、matplotlib、GDAL、OGR 和 descartes 实现的，这些库将在之后安装。这里的大部分食谱将广泛使用这些库，因此设置它们是完成我们的练习所必需的。
- en: '**Shapely** ([http://toblerity.org/shapely](http://toblerity.org/shapely))
    provides pure spatial analysis of geometries using the Cartesian coordinate system
    as is used by AutoCAD, for those of you familiar with CAD-like programs. The benefit
    of using a flat coordinate system is that all the rules of Euclidean geometry
    and analytic geometry are applied. For a quick refresher in the coordinate systems
    that we all learned in school, here is a little image to quickly jolt your memory.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '**Shapely** ([http://toblerity.org/shapely](http://toblerity.org/shapely))
    使用与 AutoCAD 相同的笛卡尔坐标系进行纯空间分析，对于那些熟悉类似 CAD 的程序的人来说。使用平面坐标系统的优点是，所有欧几里得几何和分析几何的规则都适用。为了快速回顾我们在学校学过的坐标系，这里有一个小图来快速唤醒您的记忆。'
- en: '![Installing shapely, matplotlib, and descartes](img/B03543_01_02.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![安装 shapely、matplotlib 和 descartes](img/B03543_01_02.jpg)'
- en: Note
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Description**: A Cartesian coordinate system demonstrating a flat plane to
    plot and measure geometry.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '**描述**：一个展示平面以绘制和测量几何形状的笛卡尔坐标系。'
- en: '**Illustration 1**: Source: [http://en.wikipedia.org/wiki/Cartesian_coordinate_system](http://en.wikipedia.org/wiki/Cartesian_coordinate_system).'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '**插图 1**: 来源：[http://en.wikipedia.org/wiki/Cartesian_coordinate_system](http://en.wikipedia.org/wiki/Cartesian_coordinate_system).'
- en: The classic overlay analysis and other geometric computations is where Shapely
    shines using the GEOS library as its workhorse in the background.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: Shapely 在使用 GEOS 库作为其后台工作马力的经典叠加分析和其他几何计算中表现出色。
- en: As for **matplotlib** ([http://matplotlib.org/](http://matplotlib.org/)), it
    is the plotting engine that renders nice graphs and data to your screen as an
    image or **scalable vector graphic** (**svg**). The uses of matplotlib are only
    limited to your imagination. So, like the name partially implies, matplotlib enables
    you to plot your data on a graph or even on a map. For those of you familiar with
    MATLAB, you will find matplotlib quite similar in functionality.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 **matplotlib** ([http://matplotlib.org/](http://matplotlib.org/))，它是将图形和数据渲染到屏幕上的图像或
    **可缩放矢量图形**（**svg**）的绘图引擎。matplotlib 的用途仅限于您的想象力。因此，就像名字部分所暗示的那样，matplotlib 使您能够将数据绘制在图表上，甚至是在地图上。对于那些熟悉
    MATLAB 的人来说，您会发现 matplotlib 在功能上非常相似。
- en: The **descartes** library provides a nicer integration of Shapely geometry objects
    with Matplotlib. Here, you will see that descartes opens the `fill` and `patch`
    of matplotlib plots to work with the geometries from Shapely and saves you from
    typing them individually.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '**descartes** 库提供了 Shapely 几何对象与 Matplotlib 的更好集成。在这里，您将看到 descartes 打开了 matplotlib
    绘图的 `fill` 和 `patch`，以便与 Shapely 的几何体一起工作，并为您节省了单独输入它们的麻烦。'
- en: Getting ready
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To prepare for installation, it is necessary to install some global packages,
    such as `libgeos_c`, as these are required by Shapely. NumPy is also a requirement
    that we have already met and is also used by Shapely.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 为了准备安装，有必要安装一些全局包，例如 `libgeos_c`，因为这些是 Shapely 所必需的。NumPy 也是我们已满足的要求，并且也被 Shapely
    使用。
- en: 'Install the requirements of matplotlib from the command line like this:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下方式从命令行安装 matplotlib 的需求：
- en: '[PRE26]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: These are the dependencies of matplotlib, which can be seen on a Ubuntu 14.04
    machine.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是 matplotlib 的依赖项，可以在 Ubuntu 14.04 机器上看到。
- en: How to do it...
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these instructions:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下说明操作：
- en: 'Run pip to install shapely:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 pip 安装 shapely：
- en: '[PRE27]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Run pip to install matplotlib:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 pip 安装 matplotlib：
- en: '[PRE28]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Finally, run pip to install descartes:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，运行 pip 安装 descartes：
- en: '[PRE29]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Another test to see if all has gone well is to simply enter the Python console
    and try to import the packages, and if no errors occur, your console should show
    an empty Python cursor. The output should look like what is shown in the following
    code:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个测试是否一切顺利的方法是简单地进入 Python 控制台并尝试导入这些包，如果没有错误发生，你的控制台应该显示一个空的 Python 光标。输出应该看起来像以下代码所示：
- en: '[PRE30]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: If any errors occur, Python usually provides some good clues as to where the
    problem is located and there is always **Stack Overflow**. For example, have a
    look at [http://stackoverflow.com/questions/19742406/could-not-find-library-geos-c-or-load-any-of-its-variants/23057508#2305750823057508](http://stackoverflow.com/questions/19742406/could-not-find-library-geos-c-or-load-any-of-its-variants/23057508#2305750823057508).
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 如果出现任何错误，Python 通常会提供一些很好的线索，告诉你问题所在，并且总有 **Stack Overflow**。例如，查看[http://stackoverflow.com/questions/19742406/could-not-find-library-geos-c-or-load-any-of-its-variants/23057508#2305750823057508](http://stackoverflow.com/questions/19742406/could-not-find-library-geos-c-or-load-any-of-its-variants/23057508#2305750823057508)。
- en: How it works...
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Here, the order in which you install the packages is very important. The descartes
    package depends on matplotlib, and matplotlib depends on NumPy plus freetype and
    libpng. This narrows you down to installing NumPy first, then matplotlib and its
    dependencies, and finally, descartes.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，安装包的顺序非常重要。descartes 包依赖于 matplotlib，而 matplotlib 依赖于 NumPy、freetype 和 libpng。这让你不得不首先安装
    NumPy，然后是 matplotlib 及其依赖项，最后是 descartes。
- en: The installation itself is simple with pip and should be quick and painless.
    The tricky parts occur if `libgeos_c` is not installed properly, and you might
    need to install the `libgeos-dev` library.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 pip 安装本身很简单，应该快速且无痛苦。如果 `libgeos_c` 没有正确安装，那么你可能需要安装 `libgeos-dev` 库。
- en: Installing pyshp, geojson, and pandas
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 pyshp、geojson 和 pandas
- en: These specific libraries are for specific formats that make our life easier
    and simpler than using GDAL for some projects. pyshp will work with shapefiles,
    geojson with GeoJSON, and pandas with all other textual data types in a structured
    manner.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这些特定的库是为了特定的格式而设计的，使得我们的生活和使用 GDAL 进行某些项目相比更加简单和方便。pyshp 将与 shapefiles 一起工作，geojson
    与 GeoJSON 一起工作，而 pandas 则以结构化的方式处理所有其他文本数据类型。
- en: '**pyshp** is pure Python and is used to import and export shapefiles; you can
    find the source code for pyshp here at [https://github.com/GeospatialPython/pyshp](https://github.com/GeospatialPython/pyshp).
    The pyshp library''s sole purpose is to work with shapefiles. GDAL will be used
    to do most of our data''s in/out needs, but sometimes, a pure Python library is
    simpler when working with shapefiles.'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '**pyshp** 是纯 Python 编写的，用于导入和导出 shapefiles；你可以在[https://github.com/GeospatialPython/pyshp](https://github.com/GeospatialPython/pyshp)找到
    pyshp 库的源代码。pyshp 库的唯一目的是与 shapefiles 一起工作。GDAL 将用于处理我们大部分数据的输入/输出需求，但有时，当与 shapefiles
    一起工作时，纯 Python 库会更简单。'
- en: '**geojson** is the name of a Python library and also a format, making it a
    little confusing to understand. The GeoJSON format ([http://geojson.org](http://geojson.org))
    is becoming ever more popular and to this extent, we use the Python geojson library
    to handle its creation. You will find it on **Python Package Index** (**PyPI**)
    if you search for geojson. As you would expect, this will help us create all the
    different geometry types supported in the GeoJSON specifications.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '**geojson** 是一个 Python 库的名称，也是一个格式，这使得理解它有点令人困惑。GeoJSON 格式 ([http://geojson.org](http://geojson.org))
    正变得越来越受欢迎，因此我们使用 Python geojson 库来处理其创建。如果你搜索 geojson，你会在 **Python 包索引**（**PyPI**）上找到它。正如你所期望的，这将帮助我们创建
    GeoJSON 规范中支持的所有不同几何类型。'
- en: '**pandas** ([http://pandas.pydata.org](http://pandas.pydata.org)) is a data
    analysis library that structures your data in a spreadsheet-like manner for further
    computations. Since our geospatial data comes from a broad set of sources and
    formats, such as CSV, pandas helps work with the data with minimal effort.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '**pandas** ([http://pandas.pydata.org](http://pandas.pydata.org)) 是一个数据分析库，它以类似电子表格的方式组织你的数据，以便进行进一步的计算。由于我们的地理空间数据来自广泛的来源和格式，例如
    CSV，pandas 有助于以最小的努力处理数据。'
- en: Getting ready
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Enter your virtual environment using the following command:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令进入你的虚拟环境：
- en: '[PRE31]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Your prompt should now look like this:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 你的提示符现在应该看起来像这样：
- en: '[PRE32]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: How to do it...
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The three installations are as follows:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是三个安装步骤：
- en: 'Pyshp will first be installed by simply using pip as follows:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Pyshp 将首先通过以下方式使用 pip 安装：
- en: '[PRE33]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Next, the geojson library will be installed using pip:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将使用 pip 安装 geojson 库：
- en: '[PRE34]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Finally, pip will install pandas:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，pip 将安装 pandas：
- en: '[PRE35]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'To test your installation of pyshp, use the `import shapefile` type. The output
    should look like what is shown in the following output:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试 pyshp 的安装，请使用 `import shapefile` 类型。输出应类似于以下输出：
- en: '[PRE36]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Note
  id: totrans-172
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `import shapefile` statement imports the `pyshp` library; unlike the other
    libraries, the import name is not the same as the installation name.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`import shapefile` 语句导入了 `pyshp` 库；与其它库不同，导入名称与安装名称不同。'
- en: How it works...
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: As seen in the other modules, we've used the standard installation pip package
    to execute installations. There are no other dependencies to worry about, making
    for fast progress.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 如同在其他模块中看到的那样，我们使用了标准的安装 pip 软件包来执行安装。没有其他依赖项需要担心，这使得进度快速。
- en: Installing SciPy, PySAL, and IPython
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 SciPy、PySAL 和 IPython
- en: '**SciPy** is a collection of Python libraries, including SciPy library, matplotlib,
    pandas, SymPy, and IPython. The SciPy library itself is used for many operations,
    but we are particularly interested in the **spatial** module. This module can
    do many things including running a nearest neighbor query.'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '**SciPy** 是一个包含 SciPy 库、matplotlib、pandas、SymPy 和 IPython 等库的 Python 库集合。SciPy
    库本身用于许多操作，但我们特别感兴趣的是 **空间** 模块。此模块可以执行许多操作，包括运行最近邻查询。'
- en: '**PySAL** is a geospatial computing library that''s used for spatial analysis.
    Creating models and running simulations directly from Python code are some of
    the many library functions that PySAL offers. PySAL is a library that, when put
    together with our visualization tools such as matplotlib, gives us a great tool.'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '**PySAL** 是一个用于空间分析的地理空间计算库。从 Python 代码中直接创建模型和运行模拟是 PySAL 提供的许多库功能之一。PySAL
    是一个库，当与我们的可视化工具（如 matplotlib）结合使用时，为我们提供了一个强大的工具。'
- en: '**IPython** is a Python interpreter for a console that replaces the normal
    Python console you may be used to when running and testing Python code from your
    terminal. This is really just an advanced interpreter with some cool features,
    such as *Tab* completion, which means that beginners can get commands quickly
    by typing a letter and hitting *Tab*. The IPython notebooks help share code in
    the form of a web page, including code, images, and more without any installation.'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '**IPython** 是一个用于控制台的 Python 解释器，它取代了您在终端运行和测试 Python 代码时可能习惯的正常 Python 控制台。这实际上只是一个具有一些酷功能的先进解释器，例如
    *Tab* 自动完成，这意味着初学者可以通过输入一个字母并按 *Tab* 键来快速获取命令。IPython 笔记本可以帮助以网页形式共享代码，包括代码、图像等，而无需安装。'
- en: Getting ready
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The dependency jungle we looked at earlier is back and we need three more universal
    installations to our Ubuntu system using `apt-get install` as follows:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前查看的依赖关系丛林又回来了，我们需要在 Ubuntu 系统中使用 `apt-get install` 安装三个通用安装，如下所示：
- en: '[PRE37]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Note
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Windows and Mac users can use a full installer ([http://www.scipy.org/install.html](http://www.scipy.org/install.html)),
    such as Anaconda or Enthought Canopy, which will perform all the installation
    dependencies for you in one go.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 和 Mac 用户可以使用完整的安装程序（[http://www.scipy.org/install.html](http://www.scipy.org/install.html)），例如
    Anaconda 或 Enthought Canopy，它将一次性为你完成所有安装依赖。
- en: Three dependencies are used for the SciPy installation. PySAL depends on SciPy
    so make sure to install SciPy first. Only IPython does not need any extra installations.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: SciPy 安装使用了三个依赖项。PySAL 依赖于 SciPy，因此请确保首先安装 SciPy。只有 IPython 不需要额外的安装。
- en: 'Start up your Python virtual environment with the following code:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下代码启动你的 Python 虚拟环境：
- en: '[PRE38]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: How to do it...
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Let''s look at these steps:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这些步骤：
- en: 'First, we''ll install SciPy since PySAL depends on it. This will take a while
    to install; it took my machine 5 minutes to go through so take a break:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将安装 SciPy，因为 PySAL 依赖于它。安装需要一些时间；我的机器花费了 5 分钟，所以请休息一下：
- en: '[PRE39]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'PySAL can be installed super quickly using pip:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: PySAL 可以使用 pip 非常快速地安装：
- en: '[PRE40]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'As usual, we''d like to see whether everything''s working, so let''s fire up
    the Python shell as follows:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如同往常，我们想看看一切是否正常工作，所以让我们按照以下方式启动 Python 壳：
- en: '[PRE41]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'IPython is to be installed globally or inside the virtual environment using
    pip as follows:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: IPython 可以通过 pip 全局安装或安装在虚拟环境中，如下所示：
- en: '[PRE42]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: How it works...
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'SciPy and PySAL libraries are both geared to help accomplish various spatial
    analysis duties. The choice of tool is based on the task at hand, so make sure
    that you check which library offers what function at the command prompt as follows:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: SciPy和PySAL库都是为了帮助完成各种空间分析任务而设计的。工具的选择取决于手头的任务，所以请确保在命令提示符下检查哪个库提供了什么功能，如下所示：
- en: '[PRE43]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The output should look like what is shown in the following screenshot:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应类似于以下截图所示：
- en: '![How it works...](img/B03543_01_06.jpg)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/B03543_01_06.jpg)'
- en: Installing GDAL and OGR
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装GDAL和OGR
- en: Converting formats is boring, repetitive, and is one of the many, many responsibilities
    that the GDAL library provides, not to mention format transformations. However,
    GDAL also shines with regard to other geospatial functions, such as getting the
    current projections of a Shapefile or generating contours from elevation data.
    So, to only say that GDAL is a transformation library would be wrong; it really
    is so much more. The father of GDAL, Frank Warmerdam, deserves credit for starting
    it all off, and the GDAL project is now part of the **OSGEO** (**Open Source Geospatial
    Foundation**, refer to [www.osgeo.org](http://www.osgeo.org)).
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 格式转换是枯燥的、重复的，GDAL库提供的许多功能之一，更不用说格式转换了。然而，GDAL在其他地理空间功能方面也表现出色，例如获取Shapefile的当前投影或从高程数据生成等高线。所以，仅仅说GDAL是一个转换库是不准确的；它实际上要丰富得多。GDAL的创始人Frank
    Warmerdam为启动该项目应得到认可，GDAL项目现在是**OSGEO**（**开源地理空间基金会**，请参阅[www.osgeo.org](http://www.osgeo.org)）的一部分。
- en: Note
  id: totrans-205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The GDAL installation includes OGR; there is no extra installation required.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: GDAL安装包括OGR；不需要额外安装。
- en: Currently, GDAL covers working with raster data, and OGR covers working with
    vector data. With GDAL 2.x now here, the two sides, raster and vector, are merged
    under one hat. GDAL and OGR are the so-called Swiss Army knives of geospatial
    data transformations, covering over 200 different spatial data formats.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，GDAL涵盖了处理栅格数据，而OGR涵盖了处理矢量数据。随着GDAL 2.x版本的推出，栅格和矢量两个方面现在都合并为一个整体。GDAL和OGR是地理空间数据转换的瑞士军刀，覆盖了200多种不同的空间数据格式。
- en: Getting ready
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: GDAL isn't known to be the friendliest beast to install on Windows, Linux, or
    OSX. There are many dependencies and even more ways to install them. The descriptions
    are not all very straightforward. Keep in mind that this description is just one
    way of doing things and will not always work on all machines, so please refer
    to the online instructions for the latest and best ways to get your system up
    and running.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: GDAL在Windows、Linux或OSX上安装时并不总是那么友好。它有许多依赖项，安装方式也多种多样。描述并不总是非常直接。请记住，这种描述只是处理事情的一种方式，并不总是适用于所有机器，因此请参考在线说明以获取最新和最佳的系统配置方法。
- en: To start with, we will install some dependencies globally on our machine. After
    the dependencies have been installed, we will go into the global installation
    of GDAL for Python in our global site packages.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将在我们的机器上全局安装一些依赖项。依赖项安装完成后，我们将进入全局安装Python的GDAL全局站点包。
- en: How to do it...
  id: totrans-211
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To globally install GDAL into our Python site packages, we will proceed with
    the following steps:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 要将GDAL全局安装到我们的Python站点包中，我们将按照以下步骤进行：
- en: 'The following command is used when installing build and XML tools:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装构建和XML工具时使用以下命令：
- en: '[PRE44]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Install the GDAL development files using the following command:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令安装GDAL开发文件：
- en: '[PRE45]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: This following command will install GDAL package in the main Python package.
    This means that GDAL will be installed globally. The global installation of GDAL
    is usually not a bad thing since, as far as I am aware, there are no backward
    incompatible versions, which is very rare these days. The installation of GDAL
    directly and only in `virtualenv` is painful, to say the least, and if you are
    interested in attempting it, I've mentioned some links for you to try out.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下命令将在主Python包中安装GDAL包。这意味着GDAL将被全局安装。就我所知，GDAL的全局安装通常不是坏事，因为没有向后不兼容的版本，这在当今时代是非常罕见的。在`virtualenv`中直接且仅安装GDAL是非常痛苦的，如果你有兴趣尝试，我提供了一些链接供你尝试。
- en: '[PRE46]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Note
  id: totrans-219
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you would like to attempt the installation inside your virtual environment,
    please take a look at this Stack Overflow question at [http://gis.stackexchange.com/questions/28966/python-gdal-package-missing-header-file-when-installing-via-pip](http://gis.stackexchange.com/questions/28966/python-gdal-package-missing-header-file-when-installing-via-pip).
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您想在虚拟环境中尝试安装，请查看这个 Stack Overflow 问题：[http://gis.stackexchange.com/questions/28966/python-gdal-package-missing-header-file-when-installing-via-pip](http://gis.stackexchange.com/questions/28966/python-gdal-package-missing-header-file-when-installing-via-pip)。
- en: 'To get GDAL in the Python virtual environment, we only need to run a simple
    virtualevnwrapper command:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在 Python 虚拟环境中获取 GDAL，我们只需要运行一个简单的 virtualevnwrapper 命令：
- en: '[PRE47]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Make sure you have your virtual environment activated as follows:'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保您已激活虚拟环境，如下所示：
- en: '[PRE48]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Now, activate the global Python site packages in your current virtual environment:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在您的当前虚拟环境中激活全局 Python 站点包：
- en: '[PRE49]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'The final check is to see if GDAL is available as follows:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后的检查是查看 GDAL 是否可用，如下所示：
- en: '[PRE50]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: No errors have been found and GDAL is ready for action.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 没有发现错误，GDAL 已准备好使用。
- en: Windows 7 plus users should use the OSGeo4W windows installer ([https://trac.osgeo.org/osgeo4w/](https://trac.osgeo.org/osgeo4w/)).Find
    the following section on the web page and download your Windows version in 32-bit
    or 64-bit. Follow the graphical installer instructions and the GDAL installation
    will then be complete.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 7 及以上用户应使用 OSGeo4W Windows 安装程序 ([https://trac.osgeo.org/osgeo4w/](https://trac.osgeo.org/osgeo4w/))。在网页上找到以下部分，下载您的
    32 位或 64 位 Windows 版本。遵循图形安装程序的说明，然后 GDAL 安装将完成。
- en: Tip
  id: totrans-231
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Windows users can also directly get binaries if all fails at [http://www.gisinternals.com/sdk/](http://www.gisinternals.com/sdk/).
    This installer should help avoid any other Windows specific problems that can
    arise and this site can help get you going in the right direction.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 如果所有方法都失败，Windows 用户也可以直接从 [http://www.gisinternals.com/sdk/](http://www.gisinternals.com/sdk/)
    获取二进制文件。此安装程序可以帮助避免可能出现的任何其他特定于 Windows 的问题，并且该网站可以帮助您走上正确的道路。
- en: How it works...
  id: totrans-233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The GDAL installation encompasses both the raster (GDAL) and vector (OGR) tools
    in one. Within the GDAL install are five modules that can be separately imported
    into your project depending on your needs:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: GDAL 安装包括栅格（GDAL）和矢量（OGR）工具。在 GDAL 安装中包含五个模块，根据您的需求可以单独导入到您的项目中：
- en: '[PRE51]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'To see what packages are included with your Python GDAL installation, we use
    the Python built-in help function to list what the OSGeo module has to offer.
    This is what you should see:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看与您的 Python GDAL 安装一起包含的包，我们使用 Python 内置的帮助功能来列出 OSGeo 模块可以提供的内容。您应该看到以下内容：
- en: '[PRE52]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: At the time of writing this, the GDAL version is now bumped up to 2.0, and in
    developer land, this is old even before it gets printed. Beware that the GDAL
    2.0 has compatibility issues and for this book, version 1.x.x is recommended.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，GDAL 版本已提升到 2.0，在开发者领域，甚至在它被打印出来之前就已经是旧版本了。请注意，GDAL 2.0 存在兼容性问题，并且对于本书，建议使用
    1.x.x 版本。
- en: See also
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考以下内容
- en: The [http://www.gdal.org](http://www.gdal.org) homepage is always the best place
    for reference regarding any information about it. The OSGEO includes GDAL as a
    supported project, and you can find more information on it at [http://www.osgeo.org](http://www.osgeo.org).
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.gdal.org](http://www.gdal.org) 的主页始终是关于其任何信息的最佳参考地点。OSGEO 将 GDAL
    作为支持项目之一，您可以在 [http://www.osgeo.org](http://www.osgeo.org) 上找到更多关于它的信息。'
- en: Installing GeoDjango and PostgreSQL with PostGIS
  id: totrans-241
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 GeoDjango 和 PostgreSQL 与 PostGIS
- en: This is our final installation recipe and if you have followed along so far,
    you are ready for a simple, straightforward start to Django. Django is a web framework
    for professionals with deadlines, according to the Django homepage. The spatial
    part of it can be found in **GeoDjango**. GeoDjango is a contrib module installed
    with every Django installation therefore, you only need to install Django to get
    GeoDjango running. Of course, "geo" has its dependencies that were met in the
    previous sections. For reference purposes, take a look at this great documentation
    on the Django homepage at
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们最终的安装方案，如果您到目前为止一直跟随，那么您就可以开始一个简单直接的 Django 之旅了。根据 Django 主页，Django 是为有截止日期的专业人士提供的
    Web 框架。其空间部分可以在 **GeoDjango** 中找到。GeoDjango 是与每个 Django 安装一起安装的 contrib 模块，因此，您只需要安装
    Django 就可以运行 GeoDjango。当然，“geo”有其依赖关系，这些依赖关系在前面的章节中已经满足。为了参考，请查看 Django 主页上的这份优秀的文档。
- en: '[https://docs.djangoproject.com/en/dev/ref/contrib/gis/install/#ref-gis-install](https://docs.djangoproject.com/en/dev/ref/contrib/gis/install/#ref-gis-install).'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.djangoproject.com/en/dev/ref/contrib/gis/install/#ref-gis-install](https://docs.djangoproject.com/en/dev/ref/contrib/gis/install/#ref-gis-install).'
- en: We will use PostgreSQL and PostGIS since they are the open source industry go-to
    spatial databases. The installations are not 100% necessary, but without them
    there is no real point because you then limit your operations, and they're definitely
    needed if you plan to store your spatial data in a spatial database. The combination
    of PostgreSQL and PostGIS is the most common spatial database setup for GeoDjango.
    This installation is definitely more involved and can lead to some hook-ups depending
    on your system.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用PostgreSQL和PostGIS，因为它们是开源行业常用的空间数据库。安装不是100%必要的，但没有它们就没有真正的意义，因为你限制了你的操作，而且如果你计划将你的空间数据存储在空间数据库中，它们绝对是必需的。PostgreSQL和PostGIS的组合是GeoDjango最常见空间数据库设置。这个安装肯定更复杂，可能会根据你的系统导致一些连接问题。
- en: Getting ready
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To use GeoDjango, we will need to have a spatial database installed, and in
    our case, we will be using PostgreSQL with the PostGIS extension. GeoDjango also
    supports Oracle, Spatialite, and MySQL. The dependencies of PostGIS include GDAL,
    GEOS, PROJ.4, LibXML2, and JSON-C.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用GeoDjango，我们需要安装一个空间数据库，在我们的案例中，我们将使用带有PostGIS扩展的PostgreSQL。GeoDjango还支持Oracle、Spatialite和MySQL。PostGIS的依赖包括GDAL、GEOS、PROJ.4、LibXML2和JSON-C。
- en: 'Start up your Python virtual environment as follows:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 按如下方式启动你的Python虚拟环境：
- en: '[PRE53]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Tip
  id: totrans-249
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Downloading the example code**'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从你购买的所有Packt书籍的账户中下载示例代码文件[http://www.packtpub.com](http://www.packtpub.com)。如果你在其他地方购买了这本书，你可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册以直接将文件通过电子邮件发送给你。
- en: How to do it...
  id: totrans-252
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps. These are taken from the PostgreSQL homepage for Ubuntu
    Linux:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤操作。这些步骤来自Ubuntu Linux的PostgreSQL主页：
- en: 'Create a new file called `pgdg.list` using the standard gedit text editor.
    This stores the command to fire up your Ubuntu installer package:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用标准的gedit文本编辑器创建一个名为`pgdg.list`的新文件。该文件存储启动你的Ubuntu安装器包的命令：
- en: '[PRE54]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Add this line to the file, save, and then close it:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此行添加到文件中，保存并关闭：
- en: '[PRE55]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Now, run the `wget` command for add the key:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，运行`wget`命令添加密钥：
- en: '[PRE56]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Run the `update` command to actualize your installer packages:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`update`命令以实际更新你的安装器包：
- en: '[PRE57]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Run the `install` command to actually install PostgreSQL 9.3:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`install`命令以实际安装PostgreSQL 9.3：
- en: '[PRE58]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'To install PostGIS 2.1, we will have one unmet dependency, `libgdal1`, so go
    ahead and install it:'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要安装PostGIS 2.1，我们将有一个未满足的依赖项`libgdal1`，所以继续安装它：
- en: '[PRE59]'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Now we can install PostGIS 2.1 for PostgreSQL 9.3 on our machine:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以在我们的机器上安装PostGIS 2.1 for PostgreSQL 9.3：
- en: '[PRE60]'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Install the PostgreSQL header files:'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装PostgreSQL头文件：
- en: '[PRE61]'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Finally, install the `contrib` module with contributions:'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，使用以下贡献安装`contrib`模块：
- en: '[PRE62]'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Install the Python database adapter, `psycopg2`, to connect to your PostgreSQL
    database from Python:'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装Python数据库适配器`psycopg2`，以便从Python连接到你的PostgreSQL数据库：
- en: '[PRE63]'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Now we can create a standard PostgreSQL database as follows:'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以创建一个标准的PostgreSQL数据库如下：
- en: '[PRE64]'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Using the `psql` command-line tool, we can create a PostGIS extension to our
    newly created database to give it all the PostGIS functions as follows:'
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`psql`命令行工具，我们可以创建一个PostGIS扩展到我们新创建的数据库，如下赋予它所有PostGIS功能：
- en: '[PRE65]'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Moving on, we can finally install Django in one line directly in our activated
    virtual environment:'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们终于可以在激活的虚拟环境中直接一行安装Django：
- en: '[PRE66]'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Test out your install of Django and GDAL and, as always, try to import them
    as follows:'
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试你的Django和GDAL安装，并始终尝试如下导入：
- en: '[PRE67]'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Windows users should be directed to the PostgreSQL Windows ([http://www.postgresql.org/download/windows/](http://www.postgresql.org/download/windows/))
    binaries provided by EnterpriseDB ([http://www.enterprisedb.com/products-services-training/pgdownload#windows](http://www.enterprisedb.com/products-services-training/pgdownload#windows)).
    Download the correct version and follow the installer instructions. PostGIS is
    also included in the list of extensions that you can directly install using the
    installer.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: Windows用户应被指引到EnterpriseDB提供的PostgreSQL Windows ([http://www.postgresql.org/download/windows/](http://www.postgresql.org/download/windows/))二进制文件，[http://www.enterprisedb.com/products-services-training/pgdownload#windows](http://www.enterprisedb.com/products-services-training/pgdownload#windows)。下载正确的版本并遵循安装说明。PostGIS也包含在可以直接使用安装程序安装的扩展列表中。
- en: How it works...
  id: totrans-283
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Installations using the apt-get Ubuntu installer and the Windows installers
    are simple enough in order to have PostgreSQL, PostGIS, and Django up and running.
    However, the inner workings of the installers are beyond the scope of this book.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 使用apt-get Ubuntu安装程序和Windows安装程序安装足够简单，以便PostgreSQL、PostGIS和Django能够正常运行。然而，安装程序的内部工作原理超出了本书的范围。
- en: There's more...
  id: totrans-285
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'To summarize all the installed libraries, take a look at this table:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 要总结所有已安装的库，请查看以下表格：
- en: '| Library name | Description | Reason to install |'
  id: totrans-287
  prefs: []
  type: TYPE_TB
  zh: '| 库名称 | 描述 | 安装原因 |'
- en: '| --- | --- | --- |'
  id: totrans-288
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| NumPy | This adds support for large multidimensional arrays and matrices
    | It is a requirement for many other libraries |'
  id: totrans-289
  prefs: []
  type: TYPE_TB
  zh: '| NumPy | 这增加了对大型多维数组和矩阵的支持 | 它是许多其他库的要求 |'
- en: '| pyproj | This handles projections | It transforms projections |'
  id: totrans-290
  prefs: []
  type: TYPE_TB
  zh: '| pyproj | 这处理投影 | 它转换投影 |'
- en: '| shapely | This handles geospatial operations | It performs fast geometry
    manipulations and operations |'
  id: totrans-291
  prefs: []
  type: TYPE_TB
  zh: '| shapely | 这处理地理空间操作 | 它执行快速的几何操作和操作 |'
- en: '| matplotlib | This plots libraries | It provides a quick visualization of
    results |'
  id: totrans-292
  prefs: []
  type: TYPE_TB
  zh: '| matplotlib | 这提供绘图库 | 它提供了结果的快速可视化 |'
- en: '| descartes | This uses Shapely or GeoJSON objects as matplotlib paths and
    patches | It speedily plots geo-data |'
  id: totrans-293
  prefs: []
  type: TYPE_TB
  zh: '| descartes | 这使用Shapely或GeoJSON对象作为matplotlib路径和补丁 | 它快速绘制地理数据 |'
- en: '| pandas | This provides high-performance data structures and data analysis
    | It performs data manipulation, CSV creation, and data manipulation |'
  id: totrans-294
  prefs: []
  type: TYPE_TB
  zh: '| pandas | 这提供了高性能的数据结构和数据分析 | 它执行数据操作、CSV创建和数据操作 |'
- en: '| SciPy | This provides a collection of Python libraries for scientific computing
    | It has the best collection of necessary tools |'
  id: totrans-295
  prefs: []
  type: TYPE_TB
  zh: '| SciPy | 这提供了一组用于科学计算的Python库 | 它拥有最佳的工具集合 |'
- en: '| PySAL | This contains a geospatial analysis library | It performs a plethora
    of spatial operations (optional) |'
  id: totrans-296
  prefs: []
  type: TYPE_TB
  zh: '| PySAL | 这包含一个地理空间分析库 | 它执行大量的空间操作（可选） |'
- en: '| IPython | This provides interactive Python computing | It is a helpful notebook
    to store and save your scripts (optional) |'
  id: totrans-297
  prefs: []
  type: TYPE_TB
  zh: '| IPython | 这提供了交互式Python计算 | 它是一个有用的笔记本，用于存储和保存你的脚本（可选） |'
- en: '| Django | This contains a web application framework | It is used for our demo
    web application in [Chapter 11](ch11.html "Chapter 11. Web Analysis with GeoDjango"),
    *Web Analysis with GeoDjango* |'
  id: totrans-298
  prefs: []
  type: TYPE_TB
  zh: '| Django | 这包含一个网络应用框架 | 它用于我们第11章中的演示网络应用，*使用GeoDjango进行网络分析* |'
- en: '| pyshp | This provides pure Python shapefile manipulation and generation |
    It helps input and output shapefiles |'
  id: totrans-299
  prefs: []
  type: TYPE_TB
  zh: '| pyshp | 这提供了纯Python的shapefile操作和生成 | 它有助于输入和输出shapefiles |'
- en: '| GeoJSON | This contains the JSON format for spatial data | It facilitates
    the exchange and publication of this format |'
  id: totrans-300
  prefs: []
  type: TYPE_TB
  zh: '| GeoJSON | 这包含空间数据的JSON格式 | 它促进了此格式的交换和发布 |'
- en: '| PostgreSQL | This is a relational database | It helps store spatial data
    |'
  id: totrans-301
  prefs: []
  type: TYPE_TB
  zh: '| PostgreSQL | 这是一个关系型数据库 | 它有助于存储空间数据 |'
- en: '| PostGIS | This is the spatial extension to PostgreSQL | It stores and performs
    spatial operations on geographic data in PostgreSQL |'
  id: totrans-302
  prefs: []
  type: TYPE_TB
  zh: '| PostGIS | 这是PostgreSQL的空间扩展 | 它在PostgreSQL中存储和执行地理数据的空间操作 |'
