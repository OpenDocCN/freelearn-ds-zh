- en: Chapter 7. Creating Custom Geoprocessing Tools
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 7 章。创建自定义地理处理工具
- en: 'In this chapter, we will cover the following recipe:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下配方：
- en: Creating a custom geoprocessing tool
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义地理处理工具
- en: Introduction
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In addition to accessing the system tools provided by ArcGIS, you can also create
    your own custom tools. These tools work in the same way that system tools do and
    can be used in ModelBuilder, Python window, or in standalone Python scripts. Many
    organizations build their own library of tools that perform geoprocessing operations
    specific to their data.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 除了访问 ArcGIS 提供的系统工具外，您还可以创建自己的自定义工具。这些工具与系统工具的工作方式相同，可以在 ModelBuilder、Python
    窗口或独立 Python 脚本中使用。许多组织构建了自己的工具库，这些工具库执行特定于其数据的地理处理操作。
- en: Creating a custom geoprocessing tool
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义地理处理工具
- en: In addition to being able to execute any of the available tools in your scripts,
    you can also create your own custom tools, which can also be called from a script.
    Custom tools are frequently created to handle geoprocessing tasks that are specific
    to an organization. These tools can easily be shared as well.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 除了能够在脚本中执行任何可用的工具外，您还可以创建自己的自定义工具，这些工具也可以从脚本中调用。自定义工具通常被创建来处理特定于组织的地理处理任务。这些工具也易于共享。
- en: Getting ready
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this recipe, you will learn to create custom geoprocessing script tools by
    attaching a Python script to a custom toolbox in ArcToolbox. There are a number
    of advantages of creating a custom script tool. When you take this approach, the
    script becomes a part of the geoprocessing framework, which means that it can
    be run from a model, command line, or another script. In addition to this, the
    script has access to ArcMap environment settings and help documentation. Other
    advantages include a nice, easy-to-use user interface and error-prevention capabilities.
    Error-prevention capabilities provided include a dialog box that informs the user
    of certain errors.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，您将学习如何通过将 Python 脚本附加到 ArcToolbox 中的自定义工具箱来创建自定义地理处理脚本工具。创建自定义脚本工具有许多优点。当您采取这种方法时，脚本成为地理处理框架的一部分，这意味着它可以从模型、命令行或另一个脚本中运行。此外，脚本可以访问
    ArcMap 环境设置和帮助文档。其他优点包括美观、易于使用的用户界面和错误预防能力。提供的错误预防能力包括一个对话框，它会通知用户某些错误。
- en: These custom developed script tools must be added to a custom toolbox that you
    create because the system toolboxes provided with ArcToolbox are read-only toolboxes
    and thus can't accept new tools.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这些自定义开发的脚本工具必须添加到您创建的自定义工具箱中，因为 ArcToolbox 提供的系统工具箱是只读工具箱，因此不能接受新工具。
- en: In this recipe, you are going to be provided with a pre-written Python script
    that reads wildfire data from a comma-delimited text file, and writes this information
    to a point feature class called `FireIncidents`. References to these datasets
    have been hardcoded, so you are going to alter the script to accept dynamic variable
    input. You'll then attach the script to a custom tool in ArcToolbox to give your
    end users a visual interface for using the script.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，您将获得一个预先编写的 Python 脚本，该脚本从逗号分隔的文本文件中读取野火数据，并将这些信息写入名为 `FireIncidents`
    的点要素类。对这些数据集的引用是硬编码的，因此您将修改脚本以接受动态变量输入。然后，您将脚本附加到 ArcToolbox 中的自定义工具，以便您的最终用户可以使用脚本的可视界面。
- en: How to do it…
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: The custom Python geoprocessing scripts that you write can be added to ArcToolbox
    inside custom toolboxes. You are not allowed to add your scripts to any of the
    system toolboxes, such as **Analysis** or **Data Management**. However, by creating
    a new custom toolbox, you can add these scripts.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 您编写的自定义 Python 地理处理脚本可以添加到 ArcToolbox 中的自定义工具箱中。您不允许将您的脚本添加到任何系统工具箱中，例如**分析**或**数据管理**。然而，通过创建一个新的自定义工具箱，您可以添加这些脚本。
- en: Open ArcMap with an empty map document file and open the ArcToolbox window.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用空地图文档文件打开 ArcMap 并打开 ArcToolbox 窗口。
- en: Right-click anywhere in the white space area of ArcToolbox and select **Add
    Toolbox**. On the **Add Toolbox** dialog box, click on the **New Toolbox** button.
    This will create a new toolbox with a default name of `Toolbox.tbx`; you will
    rename the toolbox in the next step:![How to do it…](img/4445_07_1.jpg)
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 ArcToolbox 的空白区域中右键单击，然后选择**添加工具箱**。在**添加工具箱**对话框中，单击**新建工具箱**按钮。这将创建一个名为
    `Toolbox.tbx` 的默认名称的新工具箱；您将在下一步中重命名工具箱：![如何操作…](img/4445_07_1.jpg)
- en: Navigate to the `c:\ArcpyBook\Ch7` folder and name the toolbox `Wildfire Tools`:![How
    to do it…](img/4445_07_13.jpg)
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 `c:\ArcpyBook\Ch7` 文件夹，并将工具箱命名为 `Wildfire Tools`：![如何操作…](img/4445_07_13.jpg)
- en: Open the toolbox by selecting **WildfireTools.tbx** and clicking on the **Open**
    button. The toolbox should now be displayed in ArcToolbox as shown in the following
    screenshot:![How to do it…](img/4445_07_14.jpg)
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过选择**WildfireTools.tbx**并点击**打开**按钮来打开工具箱。现在工具箱应如以下截图所示显示在ArcToolbox中：![如何操作…](img/4445_07_14.jpg)
- en: Each toolbox should be given a name and an alias. The alias will be used to
    uniquely define your custom tool. Alias names should be kept short and should
    not include any special characters. Right-click on the new toolbox and select
    **Properties**. Add an alias of `wildfire` as shown in the following screenshot:![How
    to do it…](img/4445_07_15.jpg)
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个工具箱都应该有一个名称和一个别名。别名将用于唯一定义您的自定义工具。别名名称应保持简短，且不应包含任何特殊字符。右键单击新工具箱并选择**属性**。添加一个别名为`wildfire`，如以下截图所示：![如何操作…](img/4445_07_15.jpg)
- en: Note
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can optionally create a new toolset inside this toolbox by right-clicking
    on the toolbox and selecting **New** | **Toolset**. Toolsets allow you to functionally
    group your scripts. In this example, it won't be necessary to do this, but if
    you need to group your scripts in the future, then this is how you can accomplish
    it.
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以选择在此工具箱内创建一个新的工具集，方法是右键单击工具箱并选择**新建** | **工具集**。工具集允许您按功能分组脚本。在这个例子中，这样做可能不是必要的，但如果您将来需要分组脚本，那么这就是您如何实现它的方法。
- en: In this next step, we will alter an existing Python script called `InsertWildfires.py`
    to accept dynamic inputs that will be provided by the user of the tool through
    the ArcToolbox interface. Open `c:\ArcpyBook\Ch7\InsertWildfires.py` in IDLE.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此下一步中，我们将修改一个名为`InsertWildfires.py`的现有Python脚本，以便接受通过ArcToolbox界面由工具用户提供的动态输入。在IDLE中打开`c:\ArcpyBook\Ch7\InsertWildfires.py`。
- en: 'Notice that we have hardcoded the path to our workspace as well as the comma-delimited
    text file containing the wildland fire incidents:'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，我们还将硬编码了工作空间路径以及包含野火事件的逗号分隔文本文件：
- en: '[PRE0]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Delete the preceding two lines of code.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除前两行代码。
- en: 'In addition, we have also hardcoded the output feature class name:'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此外，我们还将硬编码输出要素类名称：
- en: '[PRE1]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This hardcoding limits the usefulness of our script. If the datasets move or
    are deleted, the script will no longer run. In addition to this, the script lacks
    the flexibility to specify different input and output datasets. In the next step,
    we will remove this hardcoding and replace it with the ability to accept dynamic
    input.
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这种硬编码限制了脚本的有用性。如果数据集移动或被删除，脚本将无法运行。此外，脚本缺乏指定不同输入和输出数据集的灵活性。在下一步中，我们将移除这种硬编码，并替换为接受动态输入的能力。
- en: 'We will use the `GetParameterAsText()` function found in `arcpy` to accept
    dynamic input from the user. Add the following lines of code to your `try` block,
    so that your code appears as follows:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用`arcpy`中找到的`GetParameterAsText()`函数来接受用户动态输入。将以下代码行添加到您的`try`块中，以便您的代码如下所示：
- en: '[PRE2]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Notice that we call the `CreateFeatureClass` tool, found in the **Data Management
    Tools** toolbox, passing in the `outputFC` variable along with the template feature
    class (`fClassTemplate`). This tool will create the empty feature class containing
    the output feature class defined by the user.
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，我们调用位于**数据管理工具**工具箱中的`CreateFeatureClass`工具，传递`outputFC`变量以及模板要素类（`fClassTemplate`）。此工具将创建包含用户定义的输出要素类的空要素类。
- en: 'You will also need to alter the line of code that creates an `InsertCursor`
    object. Change the line as follows:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还需要修改创建`InsertCursor`对象的代码行。将行更改为以下内容：
- en: '[PRE3]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The entire script should appear as follows:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 整个脚本应如下所示：
- en: '[PRE4]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the next step, we will add the script that we just created to the **Wildfire
    Tools** toolbox as a script tool.
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在下一步中，我们将把刚刚创建的脚本添加到**Wildfire Tools**工具箱中作为脚本工具。
- en: In ArcToolbox, right-click on the **Wildfire Tools** custom toolbox that you
    created earlier and select **Add** | **Script**. This will display the **Add Script**
    dialog, as shown in the following screenshot. Give your script a name, label,
    and description. The **Name** field can not contain any spaces or special characters.
    **Label** is the name that shows up next to the script. For this example, give
    it a label of `Load Wildfires From Text`. Finally, add some descriptive information
    that details the operations the script will perform.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 ArcToolbox 中，右键单击你之前创建的**Wildfire Tools**自定义工具箱，然后选择**添加** | **脚本**。这将显示**添加脚本**对话框，如图下所示。给你的脚本一个名称、标签和描述。**名称**字段不能包含任何空格或特殊字符。**标签**是显示在脚本旁边的名称。对于这个例子，给它一个标签为
    `Load Wildfires From Text`。最后，添加一些描述性信息，详细说明脚本将执行的操作。
- en: See the following screenshot for **Name**, **Label**, and **Description** details:![How
    to do it…](img/4445_07_2.jpg)
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请参阅以下截图以获取**名称**、**标签**和**描述**的详细信息：![如何操作…](img/4445_07_2.jpg)
- en: Click on **Next** to display the next input dialog box for **Add Script**.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步**以显示**添加脚本**的下一个输入对话框。
- en: In this dialog box, you will specify the script that will be attached to the
    tool. Navigate to `c:\ArcpyBook\Ch7\InsertWildfires.py` and add `InsertWildfires.py`
    as the script.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此对话框中，你将指定将附加到工具的脚本。导航到 `c:\ArcpyBook\Ch7\InsertWildfires.py` 并将 `InsertWildfires.py`
    添加为脚本。
- en: You will also want to make sure that the **Run Python script in process** checkbox
    is selected, as shown in the following screenshot. Running a Python script "in
    process" increases the performance of your script.![How to do it…](img/4445_07_10.jpg)
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你还需要确保选择勾选了**在进程中运行 Python 脚本**复选框，如图下所示。在进程中运行 Python 脚本可以提高脚本的性能。![如何操作…](img/4445_07_10.jpg)
- en: Note
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Running a script out of process requires ArcGIS to create a separate process
    to execute the script. The time it takes to start this process and execute the
    script leads to performance problems. Always run your scripts in process. Running
    a script in process means that ArcGIS does not have to spawn a second process
    to run the script. It runs in the same process space as ArcGIS.
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在进程外运行脚本需要 ArcGIS 创建一个单独的进程来执行脚本。启动此进程并执行脚本所需的时间会导致性能问题。始终在进程中运行你的脚本。在进程中运行脚本意味着
    ArcGIS 不需要启动第二个进程来运行脚本。它将在与 ArcGIS 相同的进程空间中运行。
- en: Click on **Next** to display the parameter window, as shown in the following
    screenshot:![How to do it…](img/4445_07_3.jpg)
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步**以显示参数窗口，如图下所示：![如何操作…](img/4445_07_3.jpg)
- en: 'Each parameter that you enter in this dialog box corresponds to a single call
    to `GetParameterAsText()`. Earlier, you altered your script to accept dynamic
    parameters through the `GetParameterAsText()` method. The parameters should be
    entered in this dialog box in the same order that your script expects to receive
    them. For instance, you inserted the following line of code in your code:'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你在此对话框中输入的每个参数都对应于对 `GetParameterAsText()` 的单个调用。之前，你修改了你的脚本以通过 `GetParameterAsText()`
    方法接受动态参数。参数应按你的脚本期望接收它们的顺序输入此对话框。例如，你在代码中插入了以下行：
- en: '[PRE5]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The first parameter that you add to the dialog box will need to correspond to
    this line. In our code, this parameter represents the feature class that will
    be created as a result of running this script. You add parameters by clicking
    on the first available row under **Display Name**. You can enter in any text in
    this row. This text will be displayed to the user. You will also need to select
    a corresponding datatype for the parameter. In this case, Data Type should be
    set to **Feature Class**, since this is the expected data that will be gathered
    from the user. Each parameter also has a number of properties that can be set.
    Some of the more important properties include **Type**, **Direction**, and **Default**.
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你添加到对话框中的第一个参数需要与这一行相对应。在我们的代码中，这个参数代表运行此脚本将创建的特征类。你通过点击**显示名称**下第一个可用的行来添加参数。你可以在这一行输入任何文本。此文本将显示给用户。你还需要为参数选择一个相应的数据类型。在这种情况下，数据类型应设置为**特征类**，因为这是从用户那里收集的预期数据。每个参数还可以设置一些属性。一些比较重要的属性包括**类型**、**方向**和**默认值**。
- en: Enter the information, as shown in the following screenshot, into your dialog
    box, for the output feature class. Make sure that you set **Direction** to **Output**:![How
    to do it…](img/4445_07_4.jpg)
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下截图所示的信息输入到你的对话框中，用于输出特征类。确保将**方向**设置为**输出**：![如何操作…](img/4445_07_4.jpg)
- en: Next, we need to add a parameter that defines the feature class that will be
    used as the attribute template for our new feature class. Enter the following
    information in your dialog box:![How to do it…](img/4445_07_11.jpg)
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要添加一个参数，用于定义将用作新要素类属性模板的要素类。将以下信息输入到您的对话框中：![如何操作…](img/4445_07_11.jpg)
- en: Finally, we need to add a parameter that will be used to specify the comma-delimited
    text file that will be used as an input in the creation of our new feature class.
    Enter the following information into your dialog box:![How to do it…](img/4445_07_12.jpg)
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要添加一个参数，用于指定在创建新的要素类时用作输入的逗号分隔的文本文件。将以下信息输入到您的对话框中：![如何操作…](img/4445_07_12.jpg)
- en: Click on **Finish**. The new script tool will be added to your **Wildfire Tools**
    toolbox, as shown in the following screenshot:![How to do it…](img/4445_07_5.jpg)
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**完成**。新的脚本工具将被添加到您的**Wildfire Tools**工具箱中，如下一截图所示：![如何操作…](img/4445_07_5.jpg)
- en: Now, we'll test the tool to make sure it works. Double-click on the script tool
    to display the dialog box, as shown in the following screenshot:![How to do it…](img/4445_07_6.jpg)
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将测试工具以确保它正常工作。双击脚本工具以显示如下截图所示的对话框：![如何操作…](img/4445_07_6.jpg)
- en: Define a new output feature class, which should be loaded inside the existing
    `WildlandFires.mdb` personal geodatabase, as shown in the next screenshot. Click
    on the open folder icon and navigate to the `WildlandFires.mdb` personal geodatabase,
    which should be located in `c:\ArcpyBook\data\Wildfires`.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个新的输出要素类，该要素类应加载到现有的`WildlandFires.mdb`个人地理数据库中，如下一截图所示。点击打开文件夹图标，导航到`WildlandFires.mdb`个人地理数据库，它应位于`c:\ArcpyBook\data\Wildfires`。
- en: You will also need to give your new feature class a name. In this case, we'll
    name the feature class `TodaysWildfires`, but the name can be whatever you'd like.
    In the following screenshot, you can see an example of how this should be done.
    Click on the **Save** button:![How to do it…](img/4445_07_16.jpg)
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还需要为新要素类提供一个名称。在这种情况下，我们将要素类命名为`TodaysWildfires`，但名称可以是您想要的任何名称。在以下截图中，您可以看到一个示例，说明如何进行此操作。点击**保存**按钮：![如何操作…](img/4445_07_16.jpg)
- en: For the attribute template, you will want to point to the `FireIncidents` feature
    class that has already been created for you. This feature class contains a field
    called `CONFIDENCEVAL`. This field will be created in our new feature class. Click
    on the **Browse** button, navigate to `c:\ArcpyBook\data\Wildfires\WildlandFires.mdb`,
    and you should see the `FireIncidents` feature class. Select it and click on **Add**.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于属性模板，您希望指向已经为您创建的`FireIncidents`要素类。此要素类包含一个名为`CONFIDENCEVAL`的字段。此字段将在我们的新要素类中创建。点击**浏览**按钮，导航到`c:\ArcpyBook\data\Wildfires\WildlandFires.mdb`，您应该看到`FireIncidents`要素类。选择它，然后点击**添加**。
- en: 'Finally, the last parameter needs to point to our comma-delimited text file
    containing wildland fires. This file can be found at: `c:\ArcpyBook\data\Wildfires\NorthAmericaWildfires_2007275.txt`.
    Click on the **Browse** button and navigate to `c:\ArcpyBook\data\Wildfires`.
    Click on `NorthAmericaWildfires_2007275.txt` and click on the **Add** button.'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，最后一个参数需要指向包含野火信息的逗号分隔的文本文件。此文件可在以下位置找到：`c:\ArcpyBook\data\Wildfires\NorthAmericaWildfires_2007275.txt`。点击**浏览**按钮，导航到`c:\ArcpyBook\data\Wildfires`。点击`NorthAmericaWildfires_2007275.txt`，然后点击**添加**按钮。
- en: 'Your tool should appear as follows:'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您的工具应如下所示：
- en: '![How to do it…](img/4445_07_7.jpg)'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/4445_07_7.jpg)'
- en: Click on **OK** to execute the tool. Any messages will be written to the dialog
    box as shown in the following screenshot. This is a standard dialog box for any
    geoprocessing tool. If everything has been set up correctly, you should see the
    following screenshot, which shows that a new feature class will be added to the
    ArcMap display:![How to do it…](img/4445_07_8.jpg)
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**确定**以执行工具。任何消息都将写入到如下截图所示的对话框中。这是任何地理处理工具的标准对话框。如果一切设置正确，您应该看到如下截图，显示将有一个新的要素类添加到ArcMap显示中：![如何操作…](img/4445_07_8.jpg)
- en: 'If everything is set up correctly, you should see the following screenshot,
    which shows that a new feature class will be added to the ArcMap display:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切设置正确，您应该看到如下截图，显示将有一个新的要素类添加到ArcMap显示中：
- en: '![How to do it…](img/4445_07_9.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作…](img/4445_07_9.jpg)'
- en: How it works…
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Almost all script tools have parameters, and the values are set on the tool
    dialog box. When the tool is executed, the parameter values are sent to your script.
    Your script reads these values and then proceeds with its work. Python scripts
    can accept parameters as input. Parameters, also known as arguments, allow your
    scripts to become dynamic. Up to this point, all of our scripts have used hard
    coded values. By specifying input parameters for a script, you are able to supply
    the name of the feature class at run time. This capability makes your scripts
    more versatile.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎所有的脚本工具都有参数，这些值在工具对话框中设置。当工具执行时，参数值会被发送到您的脚本。您的脚本读取这些值，然后继续其工作。Python脚本可以接受参数作为输入。参数，也称为参数，使您的脚本变得动态。到目前为止，我们所有的脚本都使用了硬编码的值。通过为脚本指定输入参数，您可以在运行时提供要素类的名称。这种能力使您的脚本更加灵活。
- en: The `GetParameterAsText()` method, which is used to capture parameter input,
    is zero-based with the first parameter entered occupying index `0`. Each successive
    parameter is incremented by 1\. The output feature class that will be created
    by reading the comma-delimited text file is specified in the variable `outputFC`,
    which is retrieved by `GetParameterAsText(0)`. With `GetParameterAsText(1)`, we
    capture a feature class that will act as a template for the output feature class
    attribute schema. The attribute fields in the template feature class are used
    to define the fields that will populate our output feature class. Finally, `GetParameterAsText(2)`
    is used to create a variable called `f`, which will hold the comma-delimited text
    file that will be read.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 用于捕获参数输入的`GetParameterAsText()`方法是从0开始的，第一个输入的参数占据索引`0`。每个后续参数增加1。通过读取逗号分隔的文本文件创建的输出要素类由变量`outputFC`指定，该变量通过`GetParameterAsText(0)`检索。使用`GetParameterAsText(1)`，我们捕获一个将作为输出要素类属性模式的模板的要素类。模板要素类中的属性字段用于定义将填充我们的输出要素类的字段。最后，`GetParameterAsText(2)`用于创建一个名为`f`的变量，该变量将保存要读取的逗号分隔的文本文件。
- en: There's more...
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The `arcpy.GetParameterAsText()` method is not the only way to capture information
    passed into your script. When you call a Python script from the command line,
    you can pass in a set of arguments. When passing arguments to a script, each word
    must be separated by a space. These words are stored in a zero-based list object
    called `sys.argv`. With `sys.argv`, the first item in the list, referenced by
    index `0`, stores the name of the script. Each successive word is referenced by
    the next integer. Therefore, the first parameter will be stored in `sys.argv[1]`,
    the second in `sys.argv[2]`, and so on. These arguments can then be accessed from
    within your script.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`arcpy.GetParameterAsText()`方法并不是捕获传递到您的脚本中的信息的唯一方式。当您从命令行调用Python脚本时，您可以传递一组参数。在传递参数到脚本时，每个单词必须由一个空格分隔。这些单词存储在一个从0开始的列表对象中，称为`sys.argv`。在`sys.argv`中，列表中的第一个项目，通过索引`0`引用，存储了脚本的名称。每个后续的单词通过下一个整数引用。因此，第一个参数将存储在`sys.argv[1]`中，第二个在`sys.argv[2]`中，依此类推。然后可以从脚本内部访问这些参数。'
- en: It is recommended that you use the `GetParameterAsText()` function rather than
    `sys.argv`, because `GetParameterAsText()` does not have a character limit whereas
    `sys.argv` has a limit of 1,024 characters per parameter. In either case, once
    parameters have been read into the script, your script can continue execution
    using the input values.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 建议您使用`GetParameterAsText()`函数而不是`sys.argv`，因为`GetParameterAsText()`没有字符限制，而`sys.argv`每个参数的字符限制为1,024个字符。在任一情况下，一旦参数被读入脚本，您的脚本就可以使用输入值继续执行。
