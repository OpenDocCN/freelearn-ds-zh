- en: Communication by a Graphical User Interface
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 通过图形用户界面进行通信
- en: '**Graphical user interfaces (GUIs)** are convenient tools to input user data
    to your Python program. In all likelihood, you have used tools such as *selection
    lists*, *radio buttons,* or *sliders* to communicate with an application. In this
    chapter, we show how to add some of these tools to your program. We base this
    chapter on tools provided by the module **Matplotlib**, which we already met in
    [Section 6.2](86c61820-e645-486c-9418-10079ffac7f8.xhtml): *Working with Matplotlib
    objects directly*.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**图形用户界面（GUIs）** 是一种便捷的工具，用于将用户数据输入到 Python 程序中。很可能，你已经使用过诸如 *选择列表*、*单选按钮*
    或 *滑块* 等工具与应用程序进行交互。在本章中，我们将展示如何将这些工具添加到程序中。本章基于 **Matplotlib** 模块提供的工具，我们已经在
    [第 6.2 节](86c61820-e645-486c-9418-10079ffac7f8.xhtml)：“直接操作 Matplotlib 对象”中见过它们。'
- en: Although there are alternatives such as the module **Tkinter** for a more sophisticated
    design of GUIs, Matplotlib appears as an ideal entry point with a low threshold
    to add this comfortable way of communicating with your code.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管有像 **Tkinter** 这样的替代模块可以用来设计更复杂的图形用户界面（GUI），但 Matplotlib 作为一种理想的入门工具，门槛较低，是与代码进行交互的一种便捷方式。
- en: The purpose of this chapter is to demonstrate the basic principles of GUI programming
    within Matplotlib. The role of events, slider movements, or mouse clicks and their
    interaction with so-called call-back functions is explained, along with a couple
    of examples.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目的是演示 Matplotlib 中 GUI 编程的基本原理。解释事件、滑块动作或鼠标点击及其与所谓回调函数的交互，并提供一些示例。
- en: Clearly, we do not aim for completeness. Having understood the basic principles,
    the Matplotlib documentation is a reservoir of detailed information on various
    widgets and their parameters.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，我们并不追求完整性。在理解了基本原理之后，Matplotlib 文档是一个关于各种小部件及其参数的详细信息宝库。
- en: 'We''ll cover the following main topics in this chapter:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主要主题：
- en: A guiding example to widgets
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个指导小部件的示例
- en: The button widget and mouse events
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按钮小部件和鼠标事件
- en: 11.1 A guiding example to widgets
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 11.1 小部件的指导示例
- en: 'In this section, we present the basic components11.1 A guiding example to widgets
    of a **widget** and their counterparts in **Python**. We do this by using the
    guiding example displayed in the following figure:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中，我们展示了 **小部件** 的基本组件 11.1 小部件指导示例及其在 **Python** 中的对应部分。我们通过以下图示的指导示例来实现这一点：
- en: '![](img/78061f1f-cc54-4907-b56c-dbbe1456ad89.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](img/78061f1f-cc54-4907-b56c-dbbe1456ad89.png)'
- en: 'Figure 11.1: A widget to display ![](img/b7925514-4664-4123-958a-9553478a9f75.png) for
    user-given frequencies ![](img/9517305e-55a6-4f64-b1c6-3abe53043510.png)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.1：一个小部件，用于显示用户给定频率的 ![](img/b7925514-4664-4123-958a-9553478a9f75.png) ![](img/9517305e-55a6-4f64-b1c6-3abe53043510.png)
- en: In this figure, we see a slider bar at the top. With the use of a computer mouse,
    the blue bar can be moved from left to right and the value for ![](img/591c783c-9836-44ff-8973-c7f37f8af6f9.png),
    ranging between 1 and 5, is displayed on the right of the bar.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个图形中，我们可以看到顶部有一个滑块条。使用计算机鼠标，可以将蓝色条从左到右移动，右侧会显示一个值，范围在 1 到 5 之间，表示 ![](img/591c783c-9836-44ff-8973-c7f37f8af6f9.png)。
- en: Correspondingly, the frequency of the sine wave displayed in the plot window
    changes.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 相应地，显示在绘图窗口中的正弦波频率发生变化。
- en: 'This widget consists of three parts:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 该小部件由三个部分组成：
- en: A figure object with an axes object and the plot
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个包含坐标轴对象和绘图的图形对象
- en: An axes object containing a slider object
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含滑块对象的坐标轴对象
- en: A call-back function for updating the plot as soon as the slider value changes
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个回调函数，用于在滑块值变化时更新绘图
- en: We discussed how to program the first part, in [Section 6.2](86c61820-e645-486c-9418-10079ffac7f8.xhtml): *Working
    with Matplotlib objects directly*.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 [第 6.2 节](86c61820-e645-486c-9418-10079ffac7f8.xhtml) 中讨论了如何编写第一部分：“直接操作
    Matplotlib 对象”。
- en: 'In the following code snippet, we first create a figure with a given size and
    then a sufficiently large axes object that is placed into the figure such that
    its lower-left corner point is placed at the pair of figure coordinates ![](img/4eb07a74-351a-45dd-b7d9-ebfdbdbdfd6a.png).
    Then, the user is asked to input a floating-point number between 1 and 5 for the
    frequency ![](img/01537198-cd5f-4422-b047-3271dda4542a.png):'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码片段中，我们首先创建一个指定大小的图形，然后创建一个足够大的坐标轴对象，并将其放置到图形中，使得坐标轴的左下角与图形坐标 ![](img/4eb07a74-351a-45dd-b7d9-ebfdbdbdfd6a.png)
    对齐。然后，要求用户输入一个介于 1 到 5 之间的浮动数字，用于表示频率 ![](img/01537198-cd5f-4422-b047-3271dda4542a.png)：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, in the next step, we add a second axes object and put it into it a slider:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在下一步中，我们添加了第二个轴对象，并在其中放入一个滑块：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The axes object for the slider, `sld_ax`, is defined by giving its dimensions
    and the location of the left lower point in the figure's coordinate system.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 滑块的轴对象`sld_ax`是通过给定其尺寸和左下角点在图形坐标系统中的位置来定义的。
- en: The new construction element is the `Slider` object. Its constructor uses the
    slider axes, a label, and maximum and minimum values displayed on the left and
    right sides of the slider. The slider object has an attribute `val`, which contains
    the value given by the slider position.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 新的构建元素是`Slider`对象。它的构造函数使用滑块轴、标签以及显示在滑块左侧和右侧的最大值和最小值。滑块对象有一个属性`val`，它包含由滑块位置给出的值。
- en: Initially, the slider position is set to `valinit`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，滑块的位置设置为`valinit`。
- en: 'The last part is the core part of the program, the call-back function, and
    the update of the plot, whenever the slider value changes:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 最后部分是程序的核心部分——回调函数和更新图表的操作，每当滑块值发生变化时：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: A call-back function is a function called when the slider (or another widget
    object) is changed. In our case, it is the function `update_frequency`. The slider
    method `on_changed` defines the action to be performed whenever the slider value
    changes. Here, the function `update_frequency` is called with the slider value
    `val` as its single argument.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 回调函数是指在滑块（或其他小部件对象）发生变化时被调用的函数。在我们的例子中，它是函数`update_frequency`。滑块方法`on_changed`定义了每当滑块值发生变化时要执行的操作。在这里，`update_frequency`函数被调用，传入滑块值`val`作为其唯一参数。
- en: 'We will conclude this introductory section by putting the parts together. Note
    that there is no longer any need for the input function used in the beginning
    as we now use the much more elegant GUI method to input values. We also provided
    the plot with a legend to display the use of the slider value. Note how string
    formatting and LaTeX commands were combined:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过将各个部分结合起来来结束本节介绍。注意，已经不再需要最初使用的输入函数，因为我们现在使用了更为优雅的 GUI 方法来输入值。我们还为图表提供了一个图例，用以显示滑块值的使用情况。注意字符串格式化和
    LaTeX 命令是如何结合使用的：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In this section, we demonstrated the use of a widget for user input. It is a
    user-friendly way to ask for parameters and to display related results.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们展示了使用小部件进行用户输入的方法。这是一种用户友好的方式来请求参数并显示相关结果。
- en: 11.1.1 Changing a value with a slider bar
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 11.1.1 使用滑块条改变值
- en: In the last section, we covered the use of a slider. The most important attribute
    of a slider is its value, `val`. This is communicated to the call-back function.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们介绍了滑块的使用。滑块最重要的属性是其值，`val`。这个值会传递给回调函数。
- en: Other attributes are the limits of the value given by the slider, `valmin`,
    and `valmax`, and a stepping functionality, `valstep`, to make the change to the
    value discrete. A formatting attribute, `valfmt`, allows us to specify how `valmin`
    and `valmax` are displayed.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 其他属性包括滑块值的限制`valmin`和`valmax`，以及一个步进功能`valstep`，使得值的变化变得离散。格式化属性`valfmt`允许我们指定如何显示`valmin`和`valmax`。
- en: 'In the next example, we modify the slider definition from above and provide
    it with these more specific attributes:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个示例中，我们修改了上面的滑块定义，并为它提供了这些更具体的属性：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The formatting argument, `%1.1f`, in this example says that the value should
    be displayed as a floating-point number, with one digit to the left of the decimal
    point and one digit to the right of it.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，格式化参数`%1.1f`表示值应作为浮动小数显示，左侧有一位数字，右侧也有一位数字。
- en: An example with two sliders
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一个包含两个滑块的示例
- en: We extend the preceding example by providing two sliders, one for the amplitude
    and another for the frequency, and we put the sliders in vertical mode.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过提供两个滑块来扩展前面的示例，一个用于振幅，另一个用于频率，并将滑块设置为垂直模式。
- en: 'First, we define the two slider axes:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们定义了两个滑块轴：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Then, we define the two sliders with different minimum and maximum values and
    an orientation parameter:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们定义了两个滑块，分别具有不同的最小值和最大值，以及一个方向参数：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Both sliders have different call-back functions. They use the value of the
    related slider as an argument and the value of the other slider as a global variable:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 两个滑块有不同的回调函数。它们使用相关滑块的值作为参数，并将另一个滑块的值作为全局变量：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the following figure, the GUI is displayed:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在下图中，显示了 GUI：
- en: '![](img/b3cf3597-3db5-46a7-ac04-38ca819f57c1.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b3cf3597-3db5-46a7-ac04-38ca819f57c1.png)'
- en: 'Figure 11.2: A curve with two parameters given by two vertical sliders'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.2：由两个垂直滑块给定的曲线参数
- en: Some actions require that the user has to wait until the result of a change
    is seen. Often, it is more convenient and user-friendly to first collect the changes
    and then do the update. This can be made by a special button widget, which will
    be introduced in the next section.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 一些操作要求用户等待，直到看到变化的结果。通常，将更改收集起来后再进行更新会更加方便和用户友好。可以通过一个特殊的按钮小部件来实现这一点，接下来的部分将介绍它。
- en: 11.2 The button widget and mouse events
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 11.2 按钮小部件与鼠标事件
- en: The button widget is a simple little tool with a big variety of useful applications.
    We introduce it here by continuing the previous example and adding an update button
    to the GUI. Then we use a button to extract data from a curve.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮小部件是一个简单的小工具，具有广泛的实用应用。我们通过继续前一个例子并向GUI添加一个更新按钮来介绍它。然后我们使用按钮从曲线中提取数据。
- en: 11.2.1 Updating curve parameters with a button
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 11.2.1 使用按钮更新曲线参数
- en: So far, we have updated the curve when the slider value changed and used the
    method `on_changed` for this. A complicated graphical output might take some computing
    time to update. In such a case, you would like to design the GUI in such a way
    that first, the curve parameters are set by sliders, and then a button is pressed
    to initiate the updating of the curve.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经在滑块值改变时更新了曲线，并使用了`on_changed`方法。复杂的图形输出可能需要一些计算时间来更新。在这种情况下，您希望设计GUI，使得首先通过滑块设置曲线参数，然后按下一个按钮以启动曲线更新。
- en: 'This can be achieved by the `Button` widget:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过`Button`小部件实现：
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The coordinates in this example are set in such a way that the button is located
    under the two sliders. It is labeled by Update and its color turns to red when
    the mouse is placed over the button.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，坐标设置的方式使得按钮位于两个滑块下方。按钮上标有“更新”字样，当鼠标悬停在按钮上时，按钮的颜色会变为红色。
- en: 'This widget has a method, `on_clicked`, that is used instead of the slider
    method `on_changed`:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这个小部件有一个方法，`on_clicked`，它代替了滑块方法`on_changed`：
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The call-back function has a single parameter, `event`. It is not used in this
    example. It could be used to assign different actions to the button depending
    on how the mouse was clicked – by a single click, double click, right-button click,
    or left-button click. We will look at events in more detail in the next section.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 回调函数有一个参数，`event`。在这个例子中没有使用它。它可以用来根据鼠标点击的方式（单击、双击、右键点击或左键点击）为按钮分配不同的操作。我们将在下一节更详细地讨论事件。
- en: 11.2.2 Mouse events and textboxes
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 11.2.2 鼠标事件与文本框
- en: In the last example, we encountered mouse events in the context of a button
    widget. We can also catch a mouse event without using a button. To this end, we
    need to connect a general button click to a call-back function.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个例子中，我们遇到了按钮小部件的鼠标事件。我们也可以在不使用按钮的情况下捕捉鼠标事件。为此，我们需要将一个普通的按钮点击事件连接到回调函数。
- en: To demonstrate this, we consider again the previously generated plot of the
    sine wave and pick by mouse clicks points and display their coordinates in a textbox
    to the plot. If clicked with the right mouse button, we also display the point
    picked by means of a red circle in the plot.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示这一点，我们再次考虑之前生成的正弦波图，并通过鼠标点击选取点，显示其坐标在图中的文本框中。如果右键点击，我们还通过一个红色圆圈在图中显示所选的点。
- en: 'First, we prepare a textbox widget. We already know that we first have to position
    the widget by defining an axes object and then providing the widget with the desired
    properties:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们准备一个文本框小部件。我们已经知道，首先必须通过定义一个坐标轴对象来定位小部件，然后为小部件提供所需的属性：
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We provided the box with no label but some initial text. The textbox has the
    attribute `val` containing the text. We will change this attribute now depending
    on the position of a mouse click:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为文本框提供了没有标签但有一些初始文本的框。文本框有一个包含文本的`val`属性。现在我们将根据鼠标点击的位置改变这个属性：
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'As there is no widget like a button widget used, we have to couple an event
    to a call-back function. This is done by the canvas method, `mpl_connect`. The
    call-back function `onclick` reacts to the position of the mouse click. We know
    from the event attribute `inaxes` in which axes object the mouse click occurred.
    Through this, we can even access information about the button pressed, and the
    exact coordinates of the mouse click are also available. The call-back function
    makes use of a `Line2D` object, `points`, which is initialized with empty data
    lists before the call-back function is used for the first time. This initialization
    defines the plot style, red circles in this case:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 由于没有像按钮小部件那样的控件，我们必须将事件与回调函数关联。通过画布方法`mpl_connect`实现这一点。回调函数`onclick`响应鼠标点击的位置。通过事件属性`inaxes`，我们知道鼠标点击发生在哪个坐标轴对象上。通过这个，我们甚至可以获取关于按下的按钮的信息，并且鼠标点击的精确坐标也能获得。回调函数使用了一个`Line2D`对象，`points`，在回调函数首次使用之前，它已用空数据列表进行初始化。这个初始化定义了绘图样式，在这个例子中是红色圆圈：
- en: '![](img/1f660987-525b-46b8-a02b-df6051726003.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1f660987-525b-46b8-a02b-df6051726003.png)'
- en: 'Figure 11.3: Displaying a value on the curve by using a mouse click'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.3：通过鼠标点击在曲线上显示一个值
- en: 11.3 Summary
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 11.3 总结
- en: In this chapter, we learned the basic principles of GUI programming within Matplotlib.
    We also considered an example that helped us to learn more about widgets. In the
    next chapter, we are going to learn about error and exception handling.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了Matplotlib中GUI编程的基本原理。我们还考虑了一个示例，帮助我们更好地理解小部件。在下一章中，我们将学习错误和异常处理。
