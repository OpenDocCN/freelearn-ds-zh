- en: Regression
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回归分析
- en: Regression analysis is the process of estimating the relationship between dependent
    variables. For example, if a variable *y* is linearly dependent on variable *x*,
    then regression analysis tries to estimate the constants *a* and *b* in the equation ![](img/2dccd9f3-8947-4b52-80fd-556c55181b55.png),
    which  expresses the linear relationship between the variables *y* and *x*.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 回归分析是估计因变量之间关系的过程。例如，如果变量*y* 线性依赖于变量*x*，那么回归分析将尝试估算方程![](img/2dccd9f3-8947-4b52-80fd-556c55181b55.png)中的常数*a*
    和 *b*，该方程表示变量*y* 与 *x* 之间的线性关系。
- en: 'In this chapter, you will learn about the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习以下主题：
- en: The core idea of regression by performing a simple linear regression on the
    perfect data from first principles in a Fahrenheit and Celsius conversion example
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过对完美数据进行简单线性回归来执行回归分析的核心思想，以便从第一原理推导华氏度与摄氏度转换示例。
- en: Performing linear regression analysis by using the **least squares method**
    from the  `scipy.linalg` Python library on perfect and real-world data in the
    examples of Fahrenheit and Celsius conversion, weight prediction based on height,
    and flight time duration prediction based on distance
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Python库**scipy.linalg**中的最小二乘法进行线性回归分析，应用于华氏度与摄氏度转换、基于身高的体重预测以及基于距离的飞行时间预测的完美数据和实际数据。
- en: The *gradient descent algorithm* in order to find a regression model with the
    best fit (using the least mean squares rule) and how to implement it in Python
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用*梯度下降算法*来找到最佳拟合的回归模型（采用最小均方误差规则），并学习如何在Python中实现它。
- en: The establishment of a non-linear regression model using the least squares method
    in a ballistic flight analysis example and *Problem 4*, *Bacteria population prediction*
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用最小二乘法建立非线性回归模型，应用于弹道飞行分析示例和*问题4*，*细菌种群预测*。
- en: Fahrenheit and Celsius conversion – linear regression on perfect data
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 华氏度与摄氏度转换 – 对完美数据的线性回归
- en: 'Fahrenheit and Celsius degrees are related in a linear way. Given a table with
    pairs of both Fahrenheit and Celsius degrees, we can estimate the constants to
    devise a conversion formula from degrees Fahrenheit to degrees Celsius, or vice
    versa:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 华氏度和摄氏度之间的关系是线性的。给定一个包含华氏度和摄氏度数据对的表格，我们可以估计常数，推导出华氏度与摄氏度之间的转换公式，或者反过来：
- en: '| **⁰F** | **⁰C** |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| **⁰F** | **⁰C** |'
- en: '| 5 | -15 |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| 5 | -15 |'
- en: '| 14 | -10 |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| 14 | -10 |'
- en: '| 23 | -5 |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| 23 | -5 |'
- en: '| 32 | 0 |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| 32 | 0 |'
- en: '| 41 | 5 |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| 41 | 5 |'
- en: '| 50 | 10 |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| 50 | 10 |'
- en: Analysis from first principles
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从第一原理的分析
- en: 'We would like to derive a formula for converting *F* (degrees Fahrenheit) to
    *C* (degrees Celsius), as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望推导出一个将*F*（华氏度）转换为*C*（摄氏度）的公式，如下所示：
- en: '![](img/e6e06d66-a0f6-4acb-a168-3765aae8af12.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e6e06d66-a0f6-4acb-a168-3765aae8af12.png)'
- en: 'Here, *a* and *b* are the constants to be found. A graph of the ![](img/0f020fdd-0b0c-4ebc-9bee-9800243b9137.png) function
    is a straight line and, thus, is uniquely determined by two points. Therefore,
    we actually only need two points from the table, say, pairs *(F1,C1)* and *(F2,C2)*.
    Then, we will have the following:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，*a* 和 *b* 是需要找到的常数。*![](img/0f020fdd-0b0c-4ebc-9bee-9800243b9137.png)* 函数的图像是一条直线，因此，它唯一由两个点确定。因此，我们实际上只需要表格中的两个点，比如，*(F1,C1)*
    和 *(F2,C2)*。然后，我们将得到以下内容：
- en: '![](img/86fac300-c064-4ed7-833e-34ee03a495e3.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/86fac300-c064-4ed7-833e-34ee03a495e3.png)'
- en: '![](img/f738c092-095b-47bf-8d7f-38aebf40d624.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f738c092-095b-47bf-8d7f-38aebf40d624.png)'
- en: 'Now, we have the following:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有以下内容：
- en: '![](img/b1bcf1b4-439f-459c-8d45-a352ea779f93.png).'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/b1bcf1b4-439f-459c-8d45-a352ea779f93.png)。'
- en: 'Therefore, we have the following:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们得到以下内容：
- en: '![](img/aebfa86b-a45d-4776-bead-fd0025af9103.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aebfa86b-a45d-4776-bead-fd0025af9103.png)'
- en: '![](img/0f1f0522-7709-49ad-8167-dade292c58c1.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0f1f0522-7709-49ad-8167-dade292c58c1.png)'
- en: 'Here, let''s take the first two pairs *(F1,C1)*=*(5,-15)* and *(F2,C2)*=*(14,-10)*.
    This will give us the following:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们取前两个数据对*(F1,C1)*=*(5,-15)*和*(F2,C2)*=*(14,-10)*。这将给我们以下内容：
- en: '![](img/d51f112b-dcfc-4cb1-9985-f4df4527229b.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d51f112b-dcfc-4cb1-9985-f4df4527229b.png)'
- en: '![](img/e3897e5c-fb72-4d97-8ed2-4bb06a4f3d15.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e3897e5c-fb72-4d97-8ed2-4bb06a4f3d15.png)'
- en: 'Therefore, the formula to calculate degrees Celsius from degrees Fahrenheit
    is as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，从华氏度计算摄氏度的公式如下：
- en: '![](img/1fb314f6-9c9c-4b51-be2d-0940486a49a4.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1fb314f6-9c9c-4b51-be2d-0940486a49a4.png)'
- en: 'Let''s verify this against the data in the table:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过表格中的数据验证这一点：
- en: '| **⁰F** | **⁰C** | **(5/9)*F-160/9** |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| **⁰F** | **⁰C** | **(5/9)*F-160/9** |'
- en: '| 5 | -15 | -15 |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| 5 | -15 | -15 |'
- en: '| 14 | -10 | -10 |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| 14 | -10 | -10 |'
- en: '| 23 | -5 | -5 |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| 23 | -5 | -5 |'
- en: '| 32 | 0 | 0 |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| 32 | 0 | 0 |'
- en: '| 41 | 5 | 5 |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| 41 | 5 | 5 |'
- en: '| 50 | 10 | 10 |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| 50 | 10 | 10 |'
- en: We can see that the formula fits 100% of our input data. The data we worked
    with was perfect. In later examples, we will see that the formula that we derive
    doesn't fit the data perfectly. The aim will be to derive a formula that fits
    the data best so that the difference between the prediction and the actual data
    is minimized.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到公式完美地拟合了100%的输入数据。我们所处理的数据是完美的。在后续的示例中，我们将看到我们推导出的公式并不完全符合数据。我们的目标是推导出一个最适合数据的公式，以使预测值与实际数据之间的差异最小化。
- en: Least squares method for linear regression
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 线性回归的最小二乘法
- en: Given the input variables ![](img/e769f8d4-6c54-43f0-ae05-5eb65ed63e8c.png) and
    the output variables ![](img/c2ad0f17-b24e-4e95-a031-f404790f46db.png), we would
    like to find the variables a and b so that ![](img/ce5eac9f-5402-4186-8a36-a99bafc0a3e3.png) for
    every value of *i* from 1 to *n*. If the data is perfect, this is possible. In
    real-world data, we want *y[i]* to be as close to ![](img/c1e305eb-fbf2-40b1-9f18-d0c9d0a02b90.png) as
    possible instead; that is, we want to minimize the absolute value of ![](img/7e6b02b2-3444-4227-96f5-9bcb8a55f5c6.png).
    For one specific term, this is equivalent to minimizing  ![](img/b54cd9ca-24f3-4bd8-b937-8924134ab6b8.png).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 给定输入变量 ![](img/e769f8d4-6c54-43f0-ae05-5eb65ed63e8c.png) 和输出变量 ![](img/c2ad0f17-b24e-4e95-a031-f404790f46db.png)，我们希望找到变量a和b，使得
    ![](img/ce5eac9f-5402-4186-8a36-a99bafc0a3e3.png) 对于每个*i*值从1到*n*都成立。如果数据是完美的，这是可能的。在实际数据中，我们希望*
    y[i] *尽可能接近 ![](img/c1e305eb-fbf2-40b1-9f18-d0c9d0a02b90.png)，也就是说，我们希望最小化 ![](img/7e6b02b2-3444-4227-96f5-9bcb8a55f5c6.png)
    的绝对值。对于一个特定的项，这等价于最小化 ![](img/b54cd9ca-24f3-4bd8-b937-8924134ab6b8.png)。
- en: A square function instead of an absolute value is often used, as it has more
    desirable mathematical properties.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 通常使用平方函数而不是绝对值，因为平方函数具有更理想的数学性质。
- en: 'The least squares method finds a and b so that the following term, called **error**,
    is minimized:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 最小二乘法找出 a 和 b，使得以下项（称为**误差**）最小化：
- en: '![](img/f95f7aee-f91e-47d6-acc1-867aa8cf3e5a.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f95f7aee-f91e-47d6-acc1-867aa8cf3e5a.png)'
- en: Analysis using the least squares method in Python
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用最小二乘法在Python中进行分析
- en: We use the `lstsq` least squares method from the `scipy.linalg` Python library to
    calculate the linear dependence relation between the degrees Celsius and degrees
    Fahrenheit variables.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `scipy.linalg` Python 库中的 `lstsq` 最小二乘法来计算摄氏度和华氏度变量之间的线性依赖关系。
- en: The `lstsq` function is used as `lstsq(M,y)`, where *M* is a matrix of `M =
    x[:, np.newaxis]**[0, 1]`, constructed from the input vector *x*, and *y* is the
    output vector. In other words, *y* is the variable that's dependent on *x*.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`lstsq` 函数用作 `lstsq(M, y)`，其中 *M* 是矩阵 `M = x[:, np.newaxis]**[0, 1]`，由输入向量
    *x* 构造，*y* 是输出向量。换句话说，*y* 是依赖于 *x* 的变量。'
- en: '**Input**:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**输入**：'
- en: '[PRE0]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Output**:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**：'
- en: '[PRE1]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Therefore, we can see the following approximate linear dependence relation
    between *C* (degrees Celsius) and *F* (degrees Fahrenheit):'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以看到摄氏度（*C*）和华氏度（*F*）之间的以下近似线性依赖关系：
- en: '![](img/3ae7bcce-d2d6-4dde-99a5-66fe0fc31168.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3ae7bcce-d2d6-4dde-99a5-66fe0fc31168.png)'
- en: Note that this corresponds to our previous calculation.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这与我们之前的计算相对应。
- en: Visualization
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可视化
- en: 'Here is the linear model for predicting degrees Celsius from degrees Fahrenheit
    via a linear line. Its meaning is that point *(F,C)* is on the green line if,
    and only if, *F* converts to *C* and vice versa:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这是用于通过直线从华氏度预测摄氏度的线性模型。其含义是，只有当*(F,C)*点在绿色线上时，*F*才能转换为*C*，反之亦然：
- en: '![](img/f88d19e6-3645-44d5-a5f2-8220e567b5d1.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f88d19e6-3645-44d5-a5f2-8220e567b5d1.png)'
- en: Weight prediction from height – linear regression on real-world data
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 根据身高预测体重——使用实际数据的线性回归
- en: 'Here, we are predicting the weight of a man from his height by using linear
    regression on the following data:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们通过线性回归使用以下数据来预测一个人的体重：
- en: '| **Height in cm** | **Weight in kg** |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| **身高（厘米）** | **体重（公斤）** |'
- en: '| 180 | 75 |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| 180 | 75 |'
- en: '| 174 | 71 |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| 174 | 71 |'
- en: '| 184 | 83 |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| 184 | 83 |'
- en: '| 168 | 63 |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| 168 | 63 |'
- en: '| 178 | 70 |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| 178 | 70 |'
- en: '| 172 | ? |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| 172 | ? |'
- en: We would like to estimate the weight of a man given that his height is 172 cm.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要估算一个人的体重，已知他的身高是172厘米。
- en: Analysis
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分析
- en: In the previous example of Fahrenheit and Celsius conversion, the data fitted
    the linear model perfectly. Thus, we could perform even a simple mathematical
    analysis (solving basic equations) to gain the conversion formula. Most data in
    the real world does not fit a model perfectly. For such an analysis, it would
    be good to find a model that fits the given data with minimal errors. We can use
    the least squares method to find such a linear model.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一个示例中，华氏度与摄氏度的转换数据完美地符合线性模型。因此，我们甚至可以进行简单的数学分析（求解基本方程）来获得转换公式。然而，现实世界中的大多数数据并不完全符合一个模型。对于这种分析，找到一个拟合给定数据且误差最小的模型是非常有益的。我们可以使用最小二乘法来找到这样的线性模型。
- en: '**Input**:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**输入**：'
- en: 'We put the data from the preceding table into the vectors and try to fit the
    linear model:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将前面表格中的数据放入向量中，并尝试拟合线性模型：
- en: '[PRE2]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Output**:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**：'
- en: '[PRE3]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Thus, the formula expressing the linear relationship between weight and height
    is as follows:  ![](img/81cec6b9-0970-4ad3-b255-304c7f8c1399.png)
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，表示体重与身高之间线性关系的公式如下：！[](img/81cec6b9-0970-4ad3-b255-304c7f8c1399.png)
- en: Therefore, we estimate that a man with a height of 172 cm would have a weight
    of ![](img/579661d9-3e22-4898-ac48-e45e1e769ff9.png).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们估计身高为172厘米的人体重大约为！[](img/579661d9-3e22-4898-ac48-e45e1e769ff9.png)。
- en: Gradient descent algorithm and its implementation
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 梯度下降算法及其实现
- en: To understand how we may be able to predict a value by using linear regression
    from first principles in an even better way, we need to study the gradient descent
    algorithm and then implement it in Python.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解如何利用线性回归从基本原理出发预测一个值，我们需要研究梯度下降算法，并将其在Python中实现。
- en: Gradient descent algorithm
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 梯度下降算法
- en: A gradient descent algorithm is an iterative algorithm that updates the variables
    in the model to fit the data, making as few errors as possible. More generally,
    it finds the minimum of a function.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 梯度下降算法是一种迭代算法，通过更新模型中的变量来拟合数据，使误差尽可能小。更一般地说，它找到一个函数的最小值。
- en: 'We would like to express the weight in terms of height by using a linear formula:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望通过使用线性公式来表达体重与身高的关系：
- en: '![](img/35d1b776-24ea-4b9f-a743-c1055652655c.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/35d1b776-24ea-4b9f-a743-c1055652655c.png)'
- en: 'We estimate the parameter,  ![](img/ab3c0555-5e0e-47b7-b37d-46fa6859b84d.png), using
    *n* data samples ![](img/1340e2f8-9993-4f60-a81c-1b5d3238f829.png) to minimize
    the following square error:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用*n*个数据样本！[](img/1340e2f8-9993-4f60-a81c-1b5d3238f829.png)来估计参数！[](img/ab3c0555-5e0e-47b7-b37d-46fa6859b84d.png)，以最小化以下平方误差：
- en: '![](img/c65b1094-e420-4ff0-bd8c-c3ef34a5f831.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c65b1094-e420-4ff0-bd8c-c3ef34a5f831.png)'
- en: 'The gradient descent algorithm does this by updating the *p[i]* parameter in
    the direction of *(∂/∂ p[j]) E(p)*, in particular:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 梯度下降算法通过在*(∂/∂ p[j]) E(p)*的方向上更新*p[i]*参数来实现这一点，具体为：
- en: '![](img/3074ea29-31f0-44ac-90f1-9021e283b8c4.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3074ea29-31f0-44ac-90f1-9021e283b8c4.png)'
- en: Here, *learning_rate* determines that the speed of the convergence of *E(p)*
    is at the minimum. Updating the *p* parameter will result in the convergence of
    *E(p)* to a certain value, providing that *learning_rate* is sufficiently small.
    In the Python program, we use a *learning_rate* of 0.000001\. However, the drawback
    of this update rule is that the minimum of *E(p)* may only be a local minimum.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，*learning_rate*决定了*E(p)*收敛速度的最小值。更新*p*参数将导致*E(p)*收敛到某个值，前提是*learning_rate*足够小。在Python程序中，我们使用*learning_rate*为0.000001。然而，这种更新规则的缺点是*E(p)*的最小值可能只是局部最小值。
- en: 'To update the *p* parameter programmatically, we need to unfold the partial
    derivative on *E(p)*. Therefore, we update the *p* parameter as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过编程更新*p*参数，我们需要展开对*E(p)*的偏导数。因此，我们更新*p*参数如下：
- en: '![](img/26a3025a-d100-4c83-b85b-33b58699e68b.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/26a3025a-d100-4c83-b85b-33b58699e68b.png)'
- en: '![](img/f3ad7ca4-f5c3-4d2a-bed2-95f42780acfa.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f3ad7ca4-f5c3-4d2a-bed2-95f42780acfa.png)'
- en: We will keep updating the *p* parameter until it changes only very slightly;
    that is, until the change in both *p[0]* and *p[1]* is less than some constant
    *acceptable_error*. Once the *p* parameter stabilizes, we can use it to estimate
    the weight from the height.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续更新*p*参数，直到其变化非常微小；即，直到*p[0]*和*p[1]*的变化小于某个常数*acceptable_error*。一旦*p*参数稳定，我们可以利用它从身高估计体重。
- en: Implementation
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现
- en: '[PRE4]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Input**:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**输入**：'
- en: 'We use the data from the table in the preceding example *Weight prediction
    from height* and save it in a CSV file:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用前一个示例中的数据 *身高预测体重* 并将其保存在CSV文件中：
- en: '[PRE5]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Output**:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**：'
- en: '[PRE6]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The output for the linear model means that the weight can be expressed in terms
    of the height as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 线性模型的输出意味着体重可以通过身高来表示，如下所示：
- en: '![](img/c3a1c56e-580e-4ae1-a1b0-ee064eee9af0.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c3a1c56e-580e-4ae1-a1b0-ee064eee9af0.png)'
- en: 'Therefore, a man with a height of 172 cm is predicted to weigh the following:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，一个身高为 172 厘米的人预测的体重大约是：
- en: '![](img/95a4a9a7-0ef4-4b4d-a4b3-3c89b657d68d.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/95a4a9a7-0ef4-4b4d-a4b3-3c89b657d68d.png)'
- en: Note that this prediction of 71.455 kg is slightly different from the prediction
    of 67.016 kg achieved when using the least squares method. This may be due to
    the fact that the Python gradient descent algorithm found only a local minimum
    in the prediction.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这个 71.455 公斤的预测与使用最小二乘法预测得到的 67.016 公斤略有不同。这可能是因为 Python 梯度下降算法仅找到了局部最小值。
- en: Visualization – comparison of the least squares method and the gradient descent
    algorithm
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可视化——最小二乘法与梯度下降算法的比较
- en: 'By using weight prediction based on height, we can visualize the linear prediction
    models of the least squares method and of the gradient descent algorithm that
    are implemented in Python as follows:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用基于身高的体重预测，我们可以可视化最小二乘法和梯度下降算法的线性预测模型，以下是在 Python 中实现的代码：
- en: '![](img/42ccbc48-8a35-4e86-b4db-d9e3e57050c9.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/42ccbc48-8a35-4e86-b4db-d9e3e57050c9.png)'
- en: Flight time duration prediction based on distance
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于距离的飞行时间预测
- en: 'Given a table of flights with their origin, destination, and flight time, we
    would like to estimate the length of a proposed flight from Bratislava, Slovakia,
    to Amsterdam, the Netherlands:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个包含航班起点、终点和飞行时间的表格，我们希望估算从斯洛伐克布拉迪斯拉发到荷兰阿姆斯特丹的拟议飞行时间：
- en: '| **Origin** | **Destination** | **Distance in km** | **Flight duration** |
    **Flight duration in hours** |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| **起点** | **终点** | **距离（公里）** | **飞行时长** | **飞行时长（小时）** |'
- en: '| London | Amsterdam | 365 | 1 hr 10 m | 1.167 |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| 伦敦 | 阿姆斯特丹 | 365 | 1 小时 10 分钟 | 1.167 |'
- en: '| London | Budapest | 1462 | 2 hr 20 m | 2.333 |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| 伦敦 | 布达佩斯 | 1462 | 2 小时 20 分钟 | 2.333 |'
- en: '| London | Bratislava | 1285 | 2 hr 15 m | 2.250 |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| 伦敦 | 布拉迪斯拉发 | 1285 | 2 小时 15 分钟 | 2.250 |'
- en: '| Bratislava | Paris | 1096 | 2 hr 5 m | 2.083 |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| 布拉迪斯拉发 | 巴黎 | 1096 | 2 小时 5 分钟 | 2.083 |'
- en: '| Bratislava | Berlin | 517 | 1 hr 15 m | 2.250 |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| 布拉迪斯拉发 | 柏林 | 517 | 1 小时 15 分钟 | 2.250 |'
- en: '| Vienna | Dublin | 1686 | 2 hr 50 m | 2.833 |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| 维也纳 | 都柏林 | 1686 | 2 小时 50 分钟 | 2.833 |'
- en: '| Vienna | Amsterdam | 932 | 1 hr 55 m | 1.917 |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| 维也纳 | 阿姆斯特丹 | 932 | 1 小时 55 分钟 | 1.917 |'
- en: '| Amsterdam | Budapest | 1160 | 2 hr 10 m | 2.167 |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| 阿姆斯特丹 | 布达佩斯 | 1160 | 2 小时 10 分钟 | 2.167 |'
- en: '| Bratislava | Amsterdam | 978 | ? | ? |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| 布拉迪斯拉发 | 阿姆斯特丹 | 978 | ? | ? |'
- en: Analysis
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分析
- en: We can reason that the flight duration time consists of two times—the first
    is the time to take off and the landing time; the second is the time that the
    airplane moves at a certain speed in the air. The first time is a constant. The
    second time depends linearly on the speed of the plane, which we assume is similar
    for all of the flights in the table. Therefore, the flight time can be expressed
    by using a linear formula in terms of the flight distance.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以推理，飞行时间由两部分组成——第一部分是起飞和着陆的时间；第二部分是飞机在空中以某一速度飞行的时间。第一部分是一个常数。第二部分与飞机的速度成线性关系，我们假设所有航班的速度在表格中是相似的。因此，飞行时间可以通过一个线性公式来表示，涉及飞行距离。
- en: '**Input**:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '**输入**：'
- en: '[PRE7]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**Output**:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**：'
- en: '[PRE8]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: According to linear regression, the time between takeoff and landing for an
    average flight is about 1.2335890 hours. To travel 1 km with the plane takes 0.0008387
    hours; in other words, the speed of an airplane is 1,192 km per hour. The actual
    usual speed of an airplane for short-distance flights, like the ones in the preceding
    table, is about 850 km per hour. This leaves room for improvement in our estimation
    (refer to *Problem 3*).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 根据线性回归，平均飞行的起飞和着陆时间大约为 1.2335890 小时。飞行 1 公里的时间为 0.0008387 小时；换句话说，飞机的速度为每小时
    1192 公里。对于像前述表格中的短途航班，飞机的实际通常速度大约是每小时 850 公里。这为我们的估算留出了改进的空间（参见 *问题 3*）。
- en: 'Therefore, we derived the following formula:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们推导出了以下公式：
- en: '![](img/ec93fd1d-dfbb-413d-8a23-5883d8de657a.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ec93fd1d-dfbb-413d-8a23-5883d8de657a.png)'
- en: Using this, we estimate that the flight from Bratislava to Amsterdam, with a
    distance of 978 km, would take about *0.0008387*978 + 1.2335890=2.0538376* hours,
    or about 2 hours and 3 minutes, which is a little longer than from Vienna to Amsterdam
    (1 hr 55 m), and a little shorter than from Budapest to Amsterdam (2 hr 10 m).
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 利用这个，我们估算从布拉迪斯拉发到阿姆斯特丹的航程（978公里）大约需要 *0.0008387*978 + 1.2335890 = 2.0538376*
    小时，约为2小时03分钟，这比从维也纳到阿姆斯特丹的时间（1小时55分钟）稍长，比从布达佩斯到阿姆斯特丹的时间（2小时10分钟）稍短。
- en: Ballistic flight analysis – non-linear model
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 弹道飞行分析——非线性模型
- en: 'An interplanetary spaceship lands on a planet with a negligible atmosphere
    and fires three projectiles carrying exploratory bots at the planet, but at different
    initial velocities. After the bots land on the surface, their distances are measured
    and the data is recorded, as follows:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 一艘星际飞船降落在一个大气层几乎不存在的行星上，并以不同的初速度发射了三枚携带探测机器人的投射物。当机器人降落在表面后，测量它们的距离并记录数据，结果如下：
- en: '| **Velocity in m/s** | **Distance in m** |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| **速度 (米/秒)** | **距离 (米)** |'
- en: '| 400 | 38,098 |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| 400 | 38,098 |'
- en: '| 600 | 85,692 |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| 600 | 85,692 |'
- en: '| 800 | 152,220 |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| 800 | 152,220 |'
- en: '| ? | 300,000 |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| ? | 300,000 |'
- en: At what speed should the projectile carrying the fourth bot be fired in order
    for it to land 300 km from the spacecraft?
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使携带第四个机器人的投射物落地在距飞船300公里的地方，应该以什么速度发射？
- en: Analysis
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分析
- en: 'For this problem, we need to understand the trajectory of the projectile. Since
    the atmosphere on the planet is weak, the trajectory is almost equivalent to the
    ballistic curve without any air drag. The distance, *d*, traveled by an object
    fired from a point on the ground, neglecting the curvature of the planet''s surface,
    is given approximately by the following equation:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个问题，我们需要理解投射物的轨迹。由于该行星的大气层较弱，轨迹几乎等同于没有空气阻力的弹道曲线。从地面发射的物体所经过的距离 *d*，忽略行星表面的曲率，近似由以下方程给出：
- en: '![](img/c6236e1c-1fa2-4ae6-95f7-e00ab9bda0db.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c6236e1c-1fa2-4ae6-95f7-e00ab9bda0db.png)'
- en: 'Where *v* is the initial velocity of the object, τ is the angle at which the
    object was fired, and *g* is the gravitational force exerted by the planet on
    the object. Note that the angle, *τ*, and the gravitational force, *g*, do not
    change. Therefore, you can define a constant as ![](img/60fa7b3a-76a6-4093-aaf4-7667d2a191d8.png).
    This means that the distance traveled on the explored planet can be explained
    in terms of velocity by the following equation:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 *v* 是物体的初速度，τ 是物体发射的角度，*g* 是行星对物体施加的重力。请注意，角度 *τ* 和重力 *g* 是不变的。因此，可以定义一个常量为
    ![](img/60fa7b3a-76a6-4093-aaf4-7667d2a191d8.png)。这意味着，可以通过以下方程用速度来解释探测行星上的旅行距离：
- en: '![](img/c739c20b-599b-436e-912d-77af2d0b48b8.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c739c20b-599b-436e-912d-77af2d0b48b8.png)'
- en: Although *d* and *v* are not in a linear relationship, *d* and the square of
    *v* are. Therefore, we can still apply linear regression to determine the relationship
    between *d* and *v*.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 *d* 和 *v* 之间没有线性关系，但 *d* 和 *v* 的平方之间有线性关系。因此，我们仍然可以应用线性回归来确定 *d* 和 *v* 之间的关系。
- en: Analysis by using the least squares method in Python
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Python的最小二乘法进行分析
- en: '**Input**:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '**输入**：'
- en: '[PRE9]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**Output**:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**：'
- en: '[PRE10]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Therefore, the relationship between the squared velocity and the distance is
    predicted by the regression as follows:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，通过回归可以预测速度平方与距离之间的关系，如下所示：
- en: '![](img/6d3bed92-2f2c-4346-a7c9-e81992170df2.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6d3bed92-2f2c-4346-a7c9-e81992170df2.png)'
- en: 'The presence of the intercept term may be caused by errors in the measurements,
    or by other forces in the equation. Since it is relatively small, the final velocity
    should be estimated reasonably well. Adding the distance of 300 km into the equation,
    we get the following:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 截距项的存在可能是由测量误差或方程中其他力的影响所造成的。由于它相对较小，最终的速度应该能被合理估计出来。将300公里的距离代入方程，我们得到如下结果：
- en: '![](img/e835a7fc-168f-4465-806f-88237f5f322e.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e835a7fc-168f-4465-806f-88237f5f322e.png)'
- en: '![](img/0e3161f3-da46-4f98-9279-893ea26b801a.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0e3161f3-da46-4f98-9279-893ea26b801a.png)'
- en: Therefore, for the projectile to reach 300 km from the source, we need to fire
    it at a speed of approximately 1123.157 m/s.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为了使投射物从源头到达300公里的距离，我们需要以大约1123.157米/秒的速度发射它。
- en: Summary
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about regression analysis. We can think of variables
    as being dependent on each other in a functional way. For example, the *y* variable is
    a function of *x* denoted by *y=f(x)*. The *f(x)* function has constant parameters.
    If *y* depends on *x* linearly, then *f(x)=a*x+b*, where *a* and *b* are constant
    parameters in the *f(x)* function.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们学习了回归分析。我们可以将变量看作是相互依赖的函数关系。例如，*y* 变量是 *x* 的函数，记作 *y=f(x)*。函数 *f(x)*
    拥有常数参数。如果 *y* 线性依赖于 *x*，那么 *f(x)=a*x+b*，其中 *a* 和 *b* 是 *f(x)* 函数中的常数参数。
- en: We saw that regression is a method to estimate these constant parameters in
    such a way that the estimated *f(x)* follows *y* as closely as possible. This
    is formally measured by the squared error between *f(x)* and *y* for *x* data
    samples.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到，回归是一种估算这些常数参数的方法，目的是使得估算出的 *f(x)* 尽可能接近 *y*。这通常通过计算 *f(x)* 和 *y* 之间的平方误差来衡量，以
    *x* 数据样本为基础。
- en: We also covered the gradient descent method, which minimizes this error by updating
    the constant parameters in the direction of the steepest descent (that is, the
    partial derivative of the error), ensuring that the parameters converge to the
    values resulting in minimal errors in the quickest possible way.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还介绍了梯度下降法，通过更新常数参数，沿着最陡的下降方向（即误差的偏导数）来最小化误差，从而确保参数快速收敛到使误差最小的值。
- en: Finally, we learned about the `scipy.linalg` Python library which supports the
    estimation of linear regression using the `lstsq` function based on the least
    squares method.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们学习了`scipy.linalg` Python库，它支持使用基于最小二乘法的`lstsq`函数估算线性回归。
- en: In the next chapter, you will apply regression analysis to the analysis of time-dependent
    data.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将把回归分析应用于时间相关数据的分析。
- en: Problems
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: '**Problem 1: Cloud storage prediction cost**: Our software application generates
    data on a monthly basis and stores this data in cloud storage, together with the
    data from the previous months. We are given the following bills for cloud storage,
    and would like to estimate the running costs for the first year of using it:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '**问题 1：云存储费用预测**：我们的软件应用程序每月生成数据，并将这些数据与前几个月的数据一起存储在云存储中。我们得到以下云存储费用账单，并希望估算使用云存储的第一年的运营费用：'
- en: '| **Months using cloud storage** | **Monthly bill in euros** |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| **使用云存储的月份** | **每月费用（欧元）** |'
- en: '| 1 | 120.00 |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 120.00 |'
- en: '| 2 | 131.20 |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 131.20 |'
- en: '| 3 | 142.10 |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 142.10 |'
- en: '| 4 | 152.90 |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| 4 | 152.90 |'
- en: '| 5 | 164.30 |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| 5 | 164.30 |'
- en: '| 1 to 12 | ? |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| 1到12 | ? |'
- en: '**Problem 2: Fahrenheit and Celsius conversion**: In the example that we looked
    at earlier in this chapter, we devised a formula for converting degrees Fahrenheit
    to degrees Celsius. Devise a formula converting degrees Celsius into degrees Fahrenheit.'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '**问题 2：华氏度与摄氏度转换**：在本章前面我们看过的例子中，我们制定了一个将华氏度转换为摄氏度的公式。现在，制定一个将摄氏度转换为华氏度的公式。'
- en: '**Problem 3: Flight time duration prediction based on distance**: Why do you
    think that a linear regression model resulted in an estimation of the speed of
    1,192 km/h, as opposed to the real speed of about 850 km/h? Can you suggest a
    way to better model the estimation of the flight duration based on flight distances
    and times?'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '**问题 3：基于距离的飞行时间预测**：你认为为什么线性回归模型得出的飞行速度估算为1192 km/h，而实际速度大约是850 km/h？你能提出一种更好的方法来建模基于飞行距离和时间的飞行时长估算吗？'
- en: '**Problem 4: Bacteria population prediction**: A bacteria, Escherichia coli,
    has been observed in the laboratory, and the size of its population was estimated
    by various measurements at 5-minute intervals, as follows:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '**问题 4：细菌种群预测**：实验室观察到了一种细菌——大肠杆菌，并通过各种在5分钟间隔进行的测量估算了其种群数量，具体数据如下：'
- en: '| **Time** | **Size of population in millions** |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| **时间** | **种群数量（百万）** |'
- en: '| 10:00 | 47.5 |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| 10:00 | 47.5 |'
- en: '| 10:05 | 56.5 |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| 10:05 | 56.5 |'
- en: '| 10:10 | 67.2 |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| 10:10 | 67.2 |'
- en: '| 10:15 | 79.9 |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| 10:15 | 79.9 |'
- en: '| 11:00 | ? |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| 11:00 | ? |'
- en: What is the expected number of bacteria at 11:00, assuming that the bacteria
    continues to grow at the same rate?
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 假设细菌继续以相同的速度生长，那么在11:00时，预计细菌数量是多少？
- en: Analysis
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分析
- en: '**Problem 1**: Every month, we have to pay for the data we have stored in the
    cloud thus far, plus the new data that is added in that month. We will use linear
    regression to predict the cost for a general month, and then we will calculate
    the sum of the first 12 months to calculate the cost for the whole year.'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '**问题 1**：每个月，我们都需要支付存储在云端的数据费用，包括本月新增的数据。我们将使用线性回归来预测一般月份的费用，然后计算前 12 个月的费用来计算全年的费用。'
- en: '**Input**:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '**输入**：'
- en: '[PRE11]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '**Output**:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**：'
- en: '[PRE12]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This means that the base cost is *base_cost*=*109.01* euros, and then to store
    the data added in 1 month costs an additional *month_data*=*11.03* euros. Therefore,
    the formula for the *n*^(th) monthly bill is as follows:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着基础费用为*base_cost*=*109.01*欧元，然后每月存储新增数据的费用为*month_data*=*11.03*欧元。因此，第*n*^(月)账单的公式如下：
- en: '![](img/17aec100-d2ec-4d1d-9150-bc3be72b6c1d.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![](img/17aec100-d2ec-4d1d-9150-bc3be72b6c1d.png)'
- en: 'Remember that the sum of the first *n* numbers is ![](img/f1df1b67-7715-418a-b818-2acfe72ebb63.png).
    Thus, the cost for the first *n* months will be as follows:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，前*n*个数字的和是 ![](img/f1df1b67-7715-418a-b818-2acfe72ebb63.png)。因此，前*n*个月的费用将如下所示：
- en: '![](img/91de9956-7eb5-4a19-be32-f76d7769b26a.png)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![](img/91de9956-7eb5-4a19-be32-f76d7769b26a.png)'
- en: '![](img/62a1df79-5c3d-4778-9865-4a79243fe601.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![](img/62a1df79-5c3d-4778-9865-4a79243fe601.png)'
- en: '![](img/0d6e8440-a175-4c8a-be88-b39814a308c3.png)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0d6e8440-a175-4c8a-be88-b39814a308c3.png)'
- en: '![](img/84b305f3-61ed-4281-a942-20f7bf60044c.png)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![](img/84b305f3-61ed-4281-a942-20f7bf60044c.png)'
- en: 'For the whole year, the cost will be as follows:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 全年的费用将如下所示：
- en: '![](img/c2e56ce0-ad26-4d20-9bba-fb2afcaaddf0.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c2e56ce0-ad26-4d20-9bba-fb2afcaaddf0.png)'
- en: '**Visualization**'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '**可视化**'
- en: 'In the following graph, we can observe the linearity of the model, which is
    represented by the blue line. On the other hand, the sum of the points on the
    linear line is quadratic in nature and is represented by the area beneath the
    line:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下图中，我们可以观察到模型的线性特性，由蓝线表示。另一方面，线性线上的点的和是二次的，并由线下的区域表示：
- en: '![](img/7b1e2ef5-6302-42ed-b800-e1a51869f8b9.png)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7b1e2ef5-6302-42ed-b800-e1a51869f8b9.png)'
- en: '**Problem 2**: There are many ways to obtain the formula for converting degrees
    Celsius into degrees Fahrenheit. We could use the least squares method and, from
    the initial Python file, take the following lines:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '**问题 2**：有多种方法可以获得将摄氏度转换为华氏度的公式。我们可以使用最小二乘法，并从初始的Python文件中提取以下几行：'
- en: '*M = fahrenheit[:, np.newaxis]**[0, 1]*'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '*M = fahrenheit[:, np.newaxis]**[0, 1]*'
- en: '*model, _, _, _ = lstsq(M,celsius)*'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '*model, _, _, _ = lstsq(M,celsius)*'
- en: 'We then change them to the following:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将其更改为以下内容：
- en: '*M = celsius[:, np.newaxis]**[0, 1]*'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '*M = celsius[:, np.newaxis]**[0, 1]*'
- en: '*model, _, _, _ = lstsq(M,fahrenheit)*'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '*model, _, _, _ = lstsq(M,fahrenheit)*'
- en: 'Then, we would obtain the desired reversed model:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将得到期望的反向模型：
- en: '[PRE13]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Therefore, degrees Fahrenheit can be expressed from degrees Celsius as follows:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，可以通过以下方式将摄氏度转换为华氏度：
- en: '![](img/2ce39eee-b0db-4233-b64c-7017908266d5.png)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2ce39eee-b0db-4233-b64c-7017908266d5.png)'
- en: 'Alternatively, we may obtain the preceding formula by modifying the following
    one:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，我们可以通过修改以下公式得到前面的公式：
- en: '![](img/692d4fcd-e9db-4ff6-9dba-f31ae315a8c3.png)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![](img/692d4fcd-e9db-4ff6-9dba-f31ae315a8c3.png)'
- en: '![](img/33408aea-deeb-49a1-ba72-b42e9dd5b3fb.png)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![](img/33408aea-deeb-49a1-ba72-b42e9dd5b3fb.png)'
- en: '![](img/80aceb80-491b-4cee-bdb0-a363cba685c0.png)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![](img/80aceb80-491b-4cee-bdb0-a363cba685c0.png)'
- en: '**Problem 3**: The estimated speed is so high because even flights over a short
    distance take quite a long time; for example, the flight from London to Amsterdam,
    where the distance between the two cities is only 365 km, takes about 1.167 hours.
    But, on the other hand, if the distance changes only slightly, then the flight
    time changes only slightly as well. This results in us estimating a very long
    initial setup time. Consequently, the speed has to be very fast because there
    is only a small amount of time left to travel a certain distance.'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '**问题 3**：估计的速度如此之高，因为即使是短途航班也需要相当长的时间；例如，从伦敦到阿姆斯特丹的航班，两个城市之间的距离仅为365公里，但需要约1.167小时。然而，另一方面，如果距离只稍微变化，则飞行时间也只会略有变化。这导致我们估计初始设置时间非常长。因此，飞行速度必须非常快，因为只剩下少量时间来完成某个距离的旅行。'
- en: If we consider very long flights, where the initial setup time to flight time
    ratio is much smaller, we could predict the flight speed more accurately.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们考虑非常长的航班，其中初始设置时间与飞行时间的比率要小得多，我们可以更准确地预测飞行速度。
- en: '**Problem 4**: The number of bacteria at the 5-minute intervals is 47.5, 56.5,
    67.2, and 79.9 million. The differences between these numbers are 9, 10.7, and
    12.7\. The sequence is increasing. Therefore, we need to look at the ratios of
    the neighbor terms to see how the sequence grows: 56.5/47.5=1.18947, 67.2/56.5=1.18938,
    and 79.9/67.2=1.18899\. The ratios of the successive terms are close to each other,
    so we have reason to believe that the number of bacteria in the growing population
    can be estimated by using the exponential distribution of the model:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '**问题 4**：在5分钟间隔内，细菌数量分别为47.5、56.5、67.2和79.9百万。这些数字之间的差值为9、10.7和12.7。序列是递增的。因此，我们需要查看相邻项的比率，以观察序列的增长方式：56.5/47.5=1.18947，67.2/56.5=1.18938，79.9/67.2=1.18899。相邻项的比率接近，因此我们有理由相信，生长中的细菌数量可以通过模型的指数分布进行估算：'
- en: '![](img/f690933f-84aa-4f42-9cd5-bb9f2493cbf9.png)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f690933f-84aa-4f42-9cd5-bb9f2493cbf9.png)'
- en: Where *n* is the number of bacteria in millions, *b* is a constant (the base),
    the letter *m* is the exponent expressing the number of minutes since 10:00, which
    was the time of the first measurement, and 47.7 is the number of bacteria at that
    time in millions.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 *n* 是细菌数量（单位：百万），*b* 是常数（底数），字母 *m* 是指数，表示自10:00以来的分钟数，10:00是第一次测量的时间，47.7是当时的细菌数量（单位：百万）。
- en: 'To estimate the constant, *b*, we use the ratios between the sequence terms.
    We know that *b⁵* is approximately *(56.5/47.5 + 67.2/56.5 + 79.9/67.2)/3=1.18928*.
    Therefore, the constant, *b*, is approximately *b=1.18928^(1/5)=1.03528*. Thus,
    the number of bacteria in millions is as follows:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 为了估算常数*b*，我们使用序列项之间的比率。我们知道 *b⁵* 大约等于 *(56.5/47.5 + 67.2/56.5 + 79.9/67.2)/3=1.18928*。因此，常数*b*
    大约等于 *b=1.18928^(1/5)=1.03528*。于是，细菌数量（单位：百万）如下：
- en: '![](img/d7a4c750-dfdd-46ec-a922-af4ac8ab4ec0.png)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d7a4c750-dfdd-46ec-a922-af4ac8ab4ec0.png)'
- en: 'At 11:00, which is 60 minutes later than 10:00, the estimated number of bacteria
    is as follows:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在11:00，也就是比10:00晚60分钟时，估算的细菌数量如下：
- en: '![](img/f26cd4e6-3dad-4109-9fd8-c182cf9c30bf.png)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f26cd4e6-3dad-4109-9fd8-c182cf9c30bf.png)'
