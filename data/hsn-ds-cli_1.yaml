- en: Data Science at the Command Line and Setting It Up
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命令行中的数据科学与其设置
- en: '"In the beginning... was the command line" Years ago, we didn''t have fancy
    frameworks that handled our distributed computing for us, or applications that
    could read files intelligently and give us accurate results. If we did, it was
    very expensive or only worked for a small problem set, very few people had access
    to this technology, and it was mostly proprietary.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: “一开始……就是命令行” 多年前，我们没有处理分布式计算的高级框架，也没有能够智能地读取文件并给出准确结果的应用程序。如果我们有这些，通常代价非常昂贵，或者只适用于小范围的问题集，极少数人能接触到这项技术，而且它通常是专有的。
- en: For newcomers to the world of data science, you might have used the command
    line for a small number of things. Maybe you moved a file from one place to another
    using `mv`, or read a file using `cat`. Or you might have never used the command
    line at all, or at least not for data science. In this book, we hope to show you
    a number of tools and ways you can perform some everyday tasks that you can do
    locally, without using today's buzzword framework.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 对于数据科学新手来说，你可能仅使用命令行做过少量操作。也许你使用`mv`命令将文件从一个地方移动到另一个地方，或使用`cat`命令读取文件。或者，你可能从未使用过命令行，至少没有用于数据科学。在本书中，我们希望向你展示一些工具和方法，让你能够在本地执行一些日常任务，而无需使用当前流行的框架。
- en: We created this book for the folks who have little to no experience with the
    command line, and perform a lot of data extraction, modelling, parsing, and analyzing.
    This doesn't mean that if you do have a lot of command-line experience (a lot
    of DevOps and systems folks do), you shouldn't read this book. In fact, you might
    pick up a couple commands and techniques that you haven't used before.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们编写这本书是为了那些几乎没有命令行经验的人，或者那些从事大量数据提取、建模、解析和分析工作的人。这并不意味着，如果你已经有很多命令行经验（很多DevOps和系统工程师都有），你就不应该阅读本书。事实上，你可能会学到一些之前没有使用过的命令和技巧。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖以下主题：
- en: The history of the command line
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命令行的历史
- en: Language-focused shells
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以语言为中心的外壳
- en: Why use the command line?
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么要使用命令行？
- en: 'We will also walk through the setup and configuration of the command line with
    the following operating systems:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将逐步讲解命令行的设置和配置，涵盖以下操作系统：
- en: Windows 10
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows 10
- en: Mac OS X
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mac OS X
- en: Ubuntu Linux
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ubuntu Linux
- en: If you are running a different operating system, we suggest obtaining an instance
    from a cloud provider or using the Docker container that's provided in this book.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用不同的操作系统，我们建议从云服务提供商那里获得一个实例，或使用本书中提供的Docker容器。
- en: History of the command line
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命令行的历史
- en: 'Since the very first electronic machines, people have strived to communicate
    with them the same way that we humans talk to each other. But since natural-language
    processing was beyond the technological grasp of early computer systems, engineers
    relatively quickly replaced the punch cards, dials, and knobs of early computing
    machines with teletypes: typewriter-like machines that enabled keyed input and
    textual output to a display. Teletypes were replaced fairly quickly with video
    monitors, enabling a world of graphical displays. A novelty of the time, teletypes
    served a function that was missing in graphical environments, and thus terminal
    emulators were born for serving as the modern interface to the command line. The
    programs behind the terminals started out as an ingrained part of the computer
    itself: resident monitor programs that were able to start a job, detect when it
    was done, and clean up.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 从最早的电子机器开始，人们就一直在努力以与人类之间相同的方式与其进行交流。但由于早期计算机系统的自然语言处理技术尚未成熟，工程师们很快就用电传打字机替代了早期计算机的打孔卡片、旋钮和拨盘：这种类似打字机的机器使得键入输入和将文本输出到显示器成为可能。电传打字机很快被视频显示器所取代，使得图形显示的世界成为可能。作为当时的一个新奇事物，电传打字机填补了图形环境中缺失的功能，因此，终端仿真器应运而生，成为现代命令行的接口。这些终端背后的程序最初是计算机的一部分：居民监控程序，能够启动任务、检测任务完成并进行清理。
- en: As computers grew in complexity, so did the programs controlling them. Resident
    monitors gave way to operating systems that were able to share time between multiple
    jobs. In the early 1960s, Louis Pouzin had the brilliant idea to use the commands
    being fed to the computer as a kind of program, a *shell* around the operating
    system.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 随着计算机复杂性的增加，控制它们的程序也变得更加复杂。居民监控程序让位于能够在多个任务之间分配时间的操作系统。在1960年代初期，路易·普兹因灵感启发，提出了一个出色的想法——使用输入到计算机的命令作为一种程序，作为操作系统的*外壳*。
- en: '"After having written dozens of commands for CTSS, I reached the stage where
    I felt that commands should be usable as building blocks for writing more commands,
    just like subroutine libraries. Hence, I wrote RUNCOM, a sort of shell that drives
    the execution of command scripts, with argument substitution. The tool became
    instantly popular, as it became possible to go home in the evening and leaving
    long runcoms to execute overnight."'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '"在为CTSS编写了几十个命令之后，我到达了一个阶段，我觉得命令应该可以作为构建更多命令的构件，就像子程序库一样。因此，我编写了RUNCOM，一种类似于shell的工具，驱动命令脚本的执行，并进行参数替换。这个工具立即受到了欢迎，因为它使得人们可以在晚上回家时，将长时间运行的runcoms留给它执行，直到第二天早上。"'
- en: Scripting in this way, and the reuse of tooling, would become an ingrained trope
    in the exciting new world of programmable computing. Pouzin's concepts for a programmable
    shell made their way into the design and philosophy of Multics in the 1960s and
    its Bell Labs successor, Unix.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式进行脚本编写和工具的重用，将成为编程计算新世界中根深蒂固的一个主题。Pouzin为可编程shell提出的概念，进入了1960年代Multics的设计和理念，并传承到Bell
    Labs的继任者Unix中。
- en: 'In the Bell System Technical Journal from 1978, Doug McIlroy wrote the following
    regarding the Unix system:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在1978年的《Bell System Technical Journal》中，Doug McIlroy写了以下关于Unix系统的内容：
- en: '"A number of maxims have gained currency among the builders and users of the
    UNIX system to explain and promote its characteristic style: Make each program
    do one thing well. To do a new job, build afresh rather than complicate old programs
    by adding new features."'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '"在UNIX系统的构建者和用户中，有许多格言广泛流传，用以解释和促进其独特的风格：让每个程序只做好一件事。要做一个新任务，不要通过增加新功能来使旧程序复杂化，而是重新构建新的程序。"'
- en: Expect the output of every program to become the input to another, as yet unknown,
    program. Don't clutter output with extraneous information. Avoid stringently columnar
    or binary input formats. Don't insist on interactive input.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 期望每个程序的输出成为另一个尚未知的程序的输入。不要让输出充满无关的信息。避免严格的列格式或二进制输入格式。不要坚持交互式输入。
- en: Design and build software, even operating systems, to be tried early, ideally
    within weeks. Don't hesitate to throw away the clumsy parts and rebuild them.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计并构建软件，甚至是操作系统，应该尽早进行测试，理想情况下是在几周内完成。不要犹豫，丢弃笨拙的部分并重新构建它们。
- en: Use tools in preference to unskilled help to lighten a programming task, even
    if you have to detour to build the tools and expect to throw some of them out
    after you've finished using them.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在编程任务中，优先使用工具而非没有技能的帮助，即使你必须绕道去构建这些工具，并且预期在使用完之后会抛弃其中一些工具。
- en: 'This is the core of the Unix philosophy and the key tenets that make the command
    line not just a way to launch programs or list files, but a powerful group of
    community-built tools that can work together to process data in a clean, simple
    manner. In fact, McIlroy follows up with this great example of how this had led
    to success with data processing, even back in 1978:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是Unix哲学的核心，也是使命令行不仅仅是启动程序或列出文件的方式，而是一个强大的社区构建工具集合，可以以简洁的方式共同处理数据的关键理念。实际上，McIlroy接着举了一个极好的例子，说明这一理念如何在数据处理方面带来成功，甚至是在1978年：
- en: '"Unexpected uses of files abound: programs may be compiled to be run and also
    typeset to be published in a book from the same text without human intervention;
    text intended for publication serves as grist for statistical studies of English
    to help in data compression or cryptography; mailing lists turn into maps. The
    prevalence of free-format text, even in "data" files, makes the text-processing
    utilities useful for many strictly data processing functions such as shuffling
    fields, counting, or collating."'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '"文件的意外用途比比皆是：程序可以编译成可运行的文件，也可以排版以便出版，且无需人工干预；为出版而准备的文本可以作为统计英语研究的素材，帮助数据压缩或密码学研究；邮件列表变成了地图。自由格式的文本的普遍存在，即便是在''数据''文件中，也使得文本处理工具在许多严格的数据处理功能中发挥了重要作用，比如字段重排、计数或汇总。"'
- en: 'Having access to simple yet powerful components, programmers needed an easy
    way to construct, reuse, and execute more complicated commands and scripts to
    do the processing specific to their needs. Enter the early fully-featured command
    line shell: the Bourne shell. Developed by Stephen Bourne (also at Bell Labs)
    in the late 1970s for Unix''s System 7, the Bourne shell was designed from the
    start with programmers like us in mind: it had all the scripting tools needed
    to put the community-developed single-purpose tools to good use. It was the right
    tool, in the right place, at the right time; almost all Unix systems today are
    based upon System 7 and nearly all still include the original Bourne shell as
    an option. In this book, we will use a descendant of the venerable Bourne shell,
    known as Bash, which is a rewrite of the Bourne shell released in 1989 for the
    GNU project that incorporated the best features of the Bourne shell itself along
    with several of its earlier spinoffs.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 程序员需要访问简单而强大的组件，因此他们需要一种简单的方式来构建、重用和执行更复杂的命令和脚本，以完成特定的处理任务。这时，早期的全功能命令行 shell
    —— Bourne shell 就应运而生了。Bourne shell 是由 Stephen Bourne（也在贝尔实验室工作）于 1970 年代末为 Unix
    的 System 7 开发的，它从一开始就为像我们这样的程序员设计：它拥有所有脚本工具，可以很好地利用社区开发的单一功能工具。它是一个恰到好处的工具，在恰当的时间和地点；几乎所有的
    Unix 系统今天都基于 System 7，且几乎所有的系统仍然将原始的 Bourne shell 作为一个选项。在本书中，我们将使用 Bourne shell
    的后裔 —— Bash，它是 1989 年为 GNU 项目重写的 Bourne shell，结合了 Bourne shell 本身的最佳特性以及它的若干早期衍生版本的功能。
- en: We don't want to BaSH other shells, but...
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们并不想去贬低其他的 shell，但是...
- en: In this book, we decided to focus on using the **Bourne-again shell** (**bash**)
    for multiple reasons. First, it's the most popular shell and you can find it everywhere.
    In fact, for the majority of Linux distributions, bash is the default shell. It's
    a great first shell to learn and very easy to work with. There's a number of examples
    and resources available to help you with bash if you ever get stuck. It's also
    safe to say that since it's so popular, you can find it on almost any system available
    today. From a bare-metal installation in a data center to an instance running
    in the cloud, bash is there, installed, and waiting for input.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们决定专注于使用 **Bourne 再次 shell**（**bash**），有多个原因。首先，它是最流行的 shell，你可以在任何地方找到它。事实上，对于大多数
    Linux 发行版来说，bash 是默认 shell。它是学习 shell 的绝佳选择，且非常易于使用。如果你遇到困难，bash 有大量的示例和资源可供参考。可以肯定地说，由于其极高的普及度，几乎可以在当今的任何系统上找到它。从数据中心的裸机安装到云端实例，bash
    都在那儿，已安装并等待输入。
- en: There are a number of other shells you can choose from, such as the *Z* shell
    (`zsh`). The *Z* shell is fairly new (and by new I mean released in 1990, which
    is new in shell land) and provides a number of powerful features. Other notable
    shells are `tcsh`, `ksh`, and `fish`. The *C* Shell (`tcsh`), the Korn Shell (`ksh`),
    and the **Friendly Interactive Shell** (**fish**) are still widely used today.
    FreeBSD has made `tcsh` its default shell for the root user and `ksh` is still
    used for a lot of Solaris operating systems. Fish is also a great starter shell
    with a lot of features to help the user navigate the shell without feeling lost.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以选择许多其他的 shell，例如 *Z* shell（`zsh`）。*Z* shell 相对较新（“新”指的是 1990 年发布，在 shell
    世界里已经算新了），并提供了许多强大的功能。其他 notable 的 shell 包括 `tcsh`、`ksh` 和 `fish`。*C* shell（`tcsh`）、Korn
    shell（`ksh`）和 **友好的交互式 shell**（**fish**）至今仍被广泛使用。FreeBSD 将 `tcsh` 设置为 root 用户的默认
    shell，而 `ksh` 在许多 Solaris 操作系统中仍被使用。Fish 也是一个很好的入门 shell，拥有许多功能，帮助用户在使用 shell
    时不至于迷失方向。
- en: While these shells are still very powerful and stable, we will be focusing on
    using bash, as we want to focus on consistency across multiple platforms and help
    you learn a very active and popular shell that's been around for 30 years.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这些 shell 仍然非常强大和稳定，但我们将重点使用 bash，因为我们希望在多个平台之间保持一致性，并帮助你学习一个已经存在了 30 年的、非常活跃且流行的
    shell。
- en: Language-focused shells
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 面向语言的 shell
- en: As a data scientist, I'm sure you do a lot of work with Python and Scala or
    have at least heard of those two languages. Two of our favorite shell replacements
    are Xonsh and Ammonite. Xonsh ([https://xon.sh/](https://xon.sh/)) is a Python-powered
    shell that uses Python 3.4, and Ammonite ([http://ammonite.io/](http://ammonite.io/))
    is a Scala-powered shell that uses Scala 2.11.7 (both versions are at time of
    writing). If you find yourself using a lot of Python or Scala in your day-to-day
    work, we recommend checking those shell replacements out as well after you've
    mastered the command line using bash.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名数据科学家，我相信你在Python和Scala上做了很多工作，或者至少听说过这两种语言。我们两个最喜欢的Shell替代品是Xonsh和Ammonite。Xonsh（[https://xon.sh/](https://xon.sh/)）是一个由Python
    3.4支持的Python驱动Shell，而Ammonite（[http://ammonite.io/](http://ammonite.io/)）是一个由Scala
    2.11.7支持的Scala驱动Shell（截至撰写本文时）。如果你在日常工作中经常使用Python或Scala，我们建议你在掌握了bash命令行之后，也查看这些Shell替代品。
- en: So, why the command line?
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 那么，为什么要使用命令行呢？
- en: As the field of data science is still fairly new (it used to be called **operations
    research**), the tools and frameworks are also fairly new. With that being said,
    the command line is almost 50 years old and still one of the most powerful tools
    used today. If you're familiar with interpreters, the command line will come easy
    to you. Think of it as a place to experiment and see your results in real time.
    Every command you enter is executed interactively, and when you call a bash script
    to run, it executes sequentially (unless you decide not to, more in later chapters).
    As we know, experimenting and exploring is most of what data science tries to
    accomplish (and it's the most fun!).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 由于数据科学领域仍然相对较新（以前被称为**运营研究**），工具和框架也是相对较新的。话虽如此，命令行已经存在了将近50年，至今仍然是最强大的工具之一。如果你熟悉解释器，命令行将变得很容易。把它看作是一个实时实验和查看结果的地方。你输入的每个命令都是交互执行的，当你调用一个bash脚本运行时，它是顺序执行的（除非你决定不这样做，在后面的章节中会详细介绍）。正如我们所知，实验和探索是数据科学试图实现的大部分内容（而且这是最有趣的部分！）。
- en: I was having a conversation with a newly-graduated data science student about
    parsing text and asked, "How would you take a small file and provide a word count
    on how many time the words appear?" By now everyone is familiar with the infamous
    Hadoop word-count example. It's considered the "Hello, World" of data science.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我正在与一位新毕业的数据科学学生讨论解析文本，并问道，“你会如何处理一个小文件，并统计单词出现的次数？”现在每个人都熟悉臭名昭著的Hadoop单词计数示例。它被认为是数据科学的“Hello,
    World”。
- en: The answer I received was a little shocking but expected. The student instantly
    replied that they'd use Hadoop to read the file, tokenize the words to form a
    key/value pair, reduce all the keys and values that are grouped together, and
    add up the occurrences. The student isn't wrong, in fact, that's a perfectly acceptable
    answer. Especially if the file is too large for a single system (big data), you
    already have the code in place to scale.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我收到的答案有点震惊但是意料之中。学生立即回答说他们会使用Hadoop来读取文件，将单词标记化以形成键/值对，减少所有分组在一起的键和值，并累加出现次数。学生并没有错，事实上，这是一个完全可以接受的答案。特别是如果文件太大无法在单一系统上处理（大数据），你已经有了扩展代码。
- en: 'With that being said, what if I told you there''s a quicker way to obtain the
    results that doesn''t require programming in Java and setting up a cluster or
    having Hadoop run locally? In fact, it would only take one line to complete the
    task? Check out the following code:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，如果我告诉你有一种更快的方法可以获得结果，而不需要在Java中编程并设置集群或者在本地运行Hadoop，你会怎么想？事实上，只需要一行代码就能完成任务？看看下面的代码：
- en: '[PRE0]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This may seem like a lot, especially if you've never used the command line before,
    so let's break it down. The `cat` command reads files sequentially and writes
    them to standard output. `|`, also known as pipe or the pipe operator, combines
    a sequence of commands chained together by their standard streams so that the
    output of each process (`stdout`) feeds directly as input (`stdin`) to the next
    one. `tr` (translate) reads the input from `cat` (via `|` ) and writes the result
    to standard output that replaces spaces with new lines. The `grep` command is
    very powerful and the most used for a lot of data parsing. `grep` is used to search
    plain-text data for lines that match a regular expression. In this example, `grep` trims
    out the empty lines. `sort` is used for, well, sorting! You'll notice a lot of
    the commands are named for what they actually do. The `sort` command prints the
    lines of its input or concatenation of files listed in its argument list in sorted
    order. `uniq` is a command that, when fed a text file, outputs the file with adjacent
    identical lines collapsed to one. It usually works well with the `sort` command.
    In this example, `uniq -c` is called to count occurrences. And finally, `sort
    -bnr` sorts in numeric reverse order and ignores whitespace.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来可能有点多，尤其是如果你之前从未使用过命令行，别急，我们可以一步步来。`cat` 命令按顺序读取文件并将内容输出到标准输出。`|`，也叫管道符或管道操作符，将一系列命令通过标准流连接起来，使每个进程的输出（`stdout`）直接作为下一个进程的输入（`stdin`）。`tr`（翻译）命令从
    `cat` 中读取输入（通过 `|`），并将结果输出到标准输出，作用是将空格替换为换行符。`grep` 命令非常强大，是用于数据解析时最常用的命令。`grep`
    用于搜索纯文本数据中与正则表达式匹配的行。在本例中，`grep` 用于去除空行。`sort` 命令用于排序！你会注意到，很多命令的命名都直接反映了它们的功能。`sort`
    命令会将其输入的行或其参数列表中列出的文件按排序顺序打印出来。`uniq` 命令用于将文件中相邻的相同内容的行合并为一行。它通常与 `sort` 命令一起使用。在本例中，使用了
    `uniq -c` 来统计每个元素的出现次数。最后，`sort -bnr` 会以数值逆序排序，并忽略空格。
- en: Don't worry if the example looks foreign to you. The command line also comes
    with manual pages for each command. All you have to do is `man` the command to
    view the page. You can even `man man` to get an idea of what the `man` command
    does! Give it a whirl and `man tr` or `man sort`. Oh, you don't have the command
    line set up? It's easier than you think, and we can get you up in running in minutes,
    so let's get started.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对示例中的命令感到陌生，别担心。命令行还附带了每个命令的手册页面。你只需输入 `man` 加上命令名来查看手册页面。你甚至可以输入 `man man`
    来了解 `man` 命令的作用！试试看，输入 `man tr` 或 `man sort`。哦，你还没设置好命令行？其实比你想象的简单，我们可以在几分钟内帮你配置好，所以我们现在开始吧。
- en: Getting set up with Windows 10
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 Windows 10 环境
- en: 'We want the readers to keep in mind that PowerShell will not work with the
    examples listed in this book. However, Microsoft has seen fit to release their
    Windows Subsystem for Linux as of Windows 10 version 1607 and later. It''s also
    easy to install: open the Microsoft Store, search for `Ubuntu` (a Linux distribution),
    and install it:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望读者注意，PowerShell 无法运行本书中列出的示例。然而，微软已经在 Windows 10 1607 版本及更高版本中推出了 Windows
    子系统 Linux。安装也很简单：打开 Microsoft Store，搜索 `Ubuntu`（一个 Linux 发行版），然后安装它：
- en: '![](img/e5389436-22c5-435c-befe-9804a4516a01.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e5389436-22c5-435c-befe-9804a4516a01.png)'
- en: 'In Windows 10 version 1607 and later, you have the ability to run Linux natively
    with your choice of distribution. In this example, we will use Ubuntu on top of
    Windows 10 to get our workspace set up. Make sure you have the latest version
    of Windows installed in order to take advantage of WSL (Windows Subsystem for
    Linux); at a minimum, you need the Windows 10 Fall Creator update to proceed.
    Also keep in mind that WSL is in beta at the time of writing. If you don''t feel
    comfortable installing beta software, I recommend finding an alternative, such
    as an EC2 instance on AWS, or skipping ahead to the *Docker* section of this book:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 10 1607 版本及更高版本中，你可以选择 Linux 发行版并在 Windows 上原生运行 Linux。在本例中，我们将使用
    Ubuntu 作为 Windows 10 的子系统来设置我们的工作环境。确保你安装了最新版本的 Windows 以便利用 WSL（Windows Subsystem
    for Linux）；至少，你需要安装 Windows 10 秋季创作者更新才能继续。另外，请注意，WSL 在编写本文时仍处于测试阶段。如果你不想安装测试版软件，建议选择其他替代方案，如
    AWS 上的 EC2 实例，或者直接跳到本书的 *Docker* 部分：
- en: 'Go to the Start menu and search for PowerShell:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到开始菜单并搜索 PowerShell：
- en: '![](img/f180f301-e6c7-48d1-a70f-abb501ae6088.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f180f301-e6c7-48d1-a70f-abb501ae6088.png)'
- en: Double-click Windows PowerShell and click Run as Administrator.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击 Windows PowerShell 并点击“以管理员身份运行”。
- en: 'Type the following command to enable WSL:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下命令以启用 WSL：
- en: '[PRE1]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The following should be displayed:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 以下内容应显示：
- en: '![](img/c252c57c-b17f-453c-9cf2-348d91ffe433.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c252c57c-b17f-453c-9cf2-348d91ffe433.png)'
- en: 'You will be asked to confirm your choice. Use *Y* or press *Enter*:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 系统会要求你确认选择。请使用 *Y* 或按 *Enter* 键：
- en: '![](img/c1a8cfbd-f638-496e-9f41-91bca02a5666.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c1a8cfbd-f638-496e-9f41-91bca02a5666.png)'
- en: Press *Y* to reboot.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *Y* 重新启动。
- en: 'Once your system has rebooted, do the following:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 系统重启后，请执行以下操作：
- en: Go to the Start menu and search for Store.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开“开始”菜单并搜索“Store”。
- en: 'Search for Ubuntu:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 搜索 Ubuntu：
- en: '![](img/b9902b06-f6e2-4cab-8f17-56ecb250c1f9.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b9902b06-f6e2-4cab-8f17-56ecb250c1f9.png)'
- en: 'Click Install:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击安装：
- en: '![](img/c7a4523d-722c-423a-8766-1c9f1fd00cca.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c7a4523d-722c-423a-8766-1c9f1fd00cca.png)'
- en: Click Launch.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击启动。
- en: 'When asked to create a username and password, go ahead and create one. Make
    sure you remember this information as you''ll need it throughout this book:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 系统会要求你创建用户名和密码，请创建一个并确保记住这些信息，因为你将在本书中多次用到：
- en: '![](img/98f6a139-2bba-4acc-826d-15bf51f551c5.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/98f6a139-2bba-4acc-826d-15bf51f551c5.png)'
- en: Success! You now have completed the setup and installation of Linux on Windows
    10.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 恭喜！你现在已经完成了 Linux 在 Windows 10 上的安装和设置。
- en: 'Install the following tools as we will be using them throughout this book:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 安装以下工具，因为我们将在本书中使用它们：
- en: '[PRE2]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Getting set up on OS X
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 OS X 上设置
- en: 'OS X already has a full command-line system installed using bash as the default
    shell. To access this shell, click the magnifying glass in the upper-right corner
    and type `terminal` in the dialog box:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: OS X 已经预装了完整的命令行系统，默认 shell 为 bash。要访问该 shell，请点击右上角的放大镜图标，并在对话框中输入 `terminal`：
- en: '![](img/d1f9b9a6-592a-4076-be14-879d811fa2a7.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d1f9b9a6-592a-4076-be14-879d811fa2a7.png)'
- en: 'This will open a bash Terminal:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打开一个 bash 终端：
- en: '![](img/e2c0707a-4bfc-4cad-8d5b-62dbefaec631.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e2c0707a-4bfc-4cad-8d5b-62dbefaec631.png)'
- en: 'As in other bash shells, this Terminal doesn''t have everything installed,
    so type the following commands to install the requisite installers and command-line
    tools that we''ll be using in this book:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 和其他 bash shell 一样，这个终端并没有安装所有内容，因此键入以下命令来安装本书中使用的必要安装工具和命令行工具：
- en: '[PRE3]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: On OS X, this script installs a few installation tools, including `pip` and `homebrew`.
    It then uses these tools to install the commands that we use in this book that
    aren't natively installed, namely `jq`, `gnuplot`, `sqlite`, and `pandas`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在 OS X 中，该脚本会安装一些安装工具，包括 `pip` 和 `homebrew`。然后，利用这些工具来安装本书中使用但没有默认安装的命令，包括 `jq`、`gnuplot`、`sqlite`
    和 `pandas`。
- en: One thing to look out for in OS X is that certain standard tools are built a
    little differently than the ones that come with Debian-based systems like the
    rest of the systems we talk about in this chapter. In some circumstances, OS X
    tools work slightly differently or have different options. Where this is the case
    we have noted it in the text.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在 OS X 中需要注意的一点是，某些标准工具的构建方式与其他基于 Debian 系统的工具（例如本章中讨论的系统）有所不同。在某些情况下，OS X 工具的工作方式略有不同或提供不同的选项。如果是这种情况，我们已经在文中进行了说明。
- en: Getting set up on Ubuntu Linux
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Ubuntu Linux 上设置
- en: 'Ubuntu has a full built-in command-line shell and typically uses bash as the
    default shell. Different window managers have slightly different ways of opening
    a Terminal window. For example, in the image of Ubuntu 17.10 Artful (located at
    [https://www.osboxes.org/ubuntu/](https://www.osboxes.org/ubuntu/)), open the
    Terminal by clicking on Activities in the upper-left corner and typing `terminal`
    in the dialog:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Ubuntu 配有完整的内建命令行 shell，通常使用 bash 作为默认 shell。不同的窗口管理器有略微不同的打开终端窗口的方式。例如，在 Ubuntu
    17.10 Artful（位于 [https://www.osboxes.org/ubuntu/](https://www.osboxes.org/ubuntu/)）的图像中，可以通过点击左上角的“Activities”并在对话框中输入
    `terminal` 来打开终端：
- en: '![](img/1b3a32d8-96a6-4e9e-9a8d-2d7ce0ba587d.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1b3a32d8-96a6-4e9e-9a8d-2d7ce0ba587d.png)'
- en: 'This will bring up a command-line prompt:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这将弹出命令行提示符：
- en: '![](img/33e324a6-3279-4df3-a3cc-87e03638bedb.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/33e324a6-3279-4df3-a3cc-87e03638bedb.png)'
- en: 'As in other bash shells, this shell doesn''t have everything installed, so
    type the following command to install the installers and command-line tools that
    we will use in this book:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 和其他 bash shell 一样，这个 shell 并没有安装所有内容，因此请键入以下命令来安装我们将在本书中使用的安装程序和命令行工具：
- en: '[PRE4]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: On Ubuntu, this script installs a few installation tools, including pip. It
    then uses these tools to install the commands that we use in this book that aren't
    natively installed, namely `jq`, `gnuplot`, `sqlite`, `curl`, and `pandas`.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Ubuntu 中，该脚本会安装一些安装工具，包括 pip。然后，利用这些工具来安装本书中使用但没有默认安装的命令，包括 `jq`、`gnuplot`、`sqlite`、`curl`
    和 `pandas`。
- en: Getting set up with Docker
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 Docker
- en: 'What if there were a way to obtain an image with all the commands preinstalled
    and you were able to run it on most major operating systems without any issues?
    That''s exactly what Docker provides, and you can quickly get up and running in
    a matter of minutes:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有一种方法可以获取预安装了所有命令的镜像，并且您可以在大多数主要操作系统上运行它而无需任何问题，那将会怎样？这正是 Docker 提供的功能，您可以在几分钟内快速启动和运行：
- en: Visit [https://www.docker.com/community-edition](https://www.docker.com/community-edition) and
    install the version of Docker for your operating system
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 [https://www.docker.com/community-edition](https://www.docker.com/community-edition)，并安装适合您操作系统的
    Docker 版本。
- en: 'Run the following command to obtain the Docker image:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令以获取 Docker 镜像：
- en: '[PRE5]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Summary
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: The command line has a long history, and it can be quite foreign to newcomers.
    In this chapter, we covered the environment setup steps so that you can follow
    along with the examples in this book. Essential commands will introduce what you
    need to succeed, followed by acquiring datasets that we can play with. We will
    cover all the shell magic, such as background processes, writing shell functions,
    basic shell control-flow constructs, visualizing results, processing strings,
    simulating database functionality, simple math constructs, and finally a synthesis
    of all of these in a penultimate chapter of magical fascination.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 命令行有着悠久的历史，对新手来说可能会感到非常陌生。在本章中，我们介绍了环境设置步骤，以便您能够跟随本书中的示例。基本命令将介绍您成功所需的内容，接着是获取我们可以使用的数据集。我们将涵盖所有的
    shell 魔法，如后台进程、编写 shell 函数、基本的 shell 控制流构造、可视化结果、处理字符串、模拟数据库功能、简单的数学构造，最终在倒数第二章中将所有这些内容综合起来，以奇妙的魔力吸引人。
- en: Everything you need to explore the rest of the book is now installed and configured.
    As you saw, the command line can run on pretty much anything, which makes it an
    invaluable tool to have in your toolkit.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在已经安装和配置了探索本书其余部分所需的一切。正如您所见，命令行可以在几乎任何地方运行，这使它成为您工具箱中必不可少的工具。
- en: In the next chapter, we will use our newly-installed command-line environment
    to run some essential commands, learn how to customize the shell, and look at
    how to use the built-in help when we get stuck.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将使用新安装的命令行环境运行一些基本命令，学习如何自定义 shell，并学习在遇到困难时如何使用内置帮助。
