- en: Jupyter JavaScript Coding
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jupyter JavaScript 编程
- en: JavaScript is a high-level, dynamic, untyped, and interpreted programming language.
    There are several outgrowth languages that are based on JavaScript. In the case
    of Jupyter, the underlying JavaScript is really Node.js. Node.js is an event-based
    framework that uses JavaScript, which can be used to develop large, scalable applications.
    Note that this is in contrast to the earlier languages covered in this book which
    are primarily used for data analysis (Python is a general language as well, but
    has clear aspects that deal with its capabilities of performing data analysis).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 是一种高级、动态、无类型并且解释型的编程语言。许多基于 JavaScript 的衍生语言应运而生。对于 Jupyter 来说，底层的
    JavaScript 实际上是 Node.js。Node.js 是一个基于事件的框架，使用 JavaScript，可以用于开发大型可扩展的应用程序。需要注意的是，这与本书前面介绍的主要用于数据分析的语言不同（虽然
    Python 也是一种通用语言，但它有着明确的数据分析能力）。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Adding JavaScript packages to Jupyter
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向 Jupyter 添加 JavaScript 包
- en: JavaScript Jupyter Notebook
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript Jupyter Notebook
- en: Basic JavaScript in Jupyter
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jupyter 中的基本 JavaScript
- en: Node.js `d3` package
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js `d3` 包
- en: Node.js `stats-analysis` package
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js `stats-analysis` 包
- en: Node.js JSON handling
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js JSON 处理
- en: Node.js `canvas` package
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js `canvas` 包
- en: Node.js `plotly` package
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js `plotly` 包
- en: Node.js asynchronous threads
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 异步线程
- en: Node.js `decision-tree` package
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js `decision-tree` 包
- en: Adding JavaScript scripting to your installation
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向你的安装中添加 JavaScript 脚本
- en: In this section, we will install JavaScript scripting on macOS and Windows.
    There are separate steps for getting JavaScript scripting available on your Jupyter
    installation for each environment. The macOS installation is very clean. The Windows
    installation still appears to be in flux, and I would expect the following instructions
    to change over time.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将安装 macOS 和 Windows 上的 JavaScript 脚本。对于每个环境，Jupyter 安装中启用 JavaScript
    脚本的步骤是不同的。macOS 的安装非常简洁，而 Windows 的安装仍然在变化中，我预计以下说明将随着时间变化。
- en: Adding JavaScript scripts to Jupyter on macOS or Windows
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 macOS 或 Windows 上向 Jupyter 添加 JavaScript 脚本
- en: 'I followed the instructions for loading the JavaScript engine for Anaconda
    from [https://github.com/n-riesco/iJavaScript](https://github.com/n-riesco/ijavascript).
    The steps are as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我按照 [https://github.com/n-riesco/iJavaScript](https://github.com/n-riesco/ijavascript)
    中的说明加载了 Anaconda 的 JavaScript 引擎。步骤如下：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'At this point, starting Jupyter will provide the JavaScript (Node.js) engine
    as a choice, as shown in the following screenshot:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，启动 Jupyter 时会提供 JavaScript（Node.js）引擎作为选择，如下截图所示：
- en: '![](img/019ed732-2d3f-49aa-bc4a-5b59eef553ae.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/019ed732-2d3f-49aa-bc4a-5b59eef553ae.png)'
- en: JavaScript Hello World Jupyter Notebook
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript Hello World Jupyter Notebook
- en: 'Once installed, we can attempt the first JavaScript Notebook by clicking on
    the New menu and selecting JavaScript. We will name the Notebook `Hello, World!` and
    put the following lines in this script:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，我们可以通过点击“New”菜单并选择 JavaScript 来尝试第一个 JavaScript Notebook。我们将把 Notebook
    命名为 `Hello, World!` 并在脚本中输入以下行：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This script sets a variable and displays the contents of the variable. After
    entering the script and running (Cell | Run All), we will end up with a Notebook
    screen that looks like the following screenshot:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本设置了一个变量并显示该变量的内容。输入脚本并运行（单击“Cell | Run All”），我们将看到如下截图所示的 Notebook 界面：
- en: '![](img/c70ff5e9-b013-448c-9ad3-603ba646dd71.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c70ff5e9-b013-448c-9ad3-603ba646dd71.png)'
- en: 'We should point out some of the highlights of this page:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该指出这一页的一些亮点：
- en: We have the now-familiar language logo in the upper-right corner that depicts
    the type of script in use
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们在右上角看到熟悉的语言标识，表示正在使用的脚本类型
- en: There is output from every line of the Notebook
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Notebook 中的每一行都有输出
- en: More importantly, we can see the true output of the Notebook (following line
    one) where the string is echoed
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更重要的是，我们可以看到 Notebook 的真实输出（如第一个行所示），其中字符串被回显
- en: Otherwise, the Notebook looks as familiar as the other types we have seen
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 否则，Notebook 看起来和我们见过的其他类型一样熟悉
- en: 'If we look at the contents of the Notebook on disk, we can see similar results
    as well:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果查看磁盘上的 Notebook 内容，我们也能看到类似的结果：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: So, using the same Notebook and the JSON file format, Jupyter provides a different
    language for use in the Notebook by changing the `metadata` and `language_info`
    values appropriately.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，通过使用相同的 Notebook 和 JSON 文件格式，Jupyter 通过适当修改 `metadata` 和 `language_info`
    值，提供了不同的语言供 Notebook 使用。
- en: Adding JavaScript packages to Jupyter
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向 Jupyter 添加 JavaScript 包
- en: The JavaScript language does not normally install additional packages—it makes
    reference to other packages via the runtime include directive which is used in
    your programs. Other packages can be referenced across the network or copied locally
    into your environment. It is assumed that accessing a library across the network
    via a CDN is a more efficient and faster mechanism.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 语言通常不会安装额外的包，它通过程序中的运行时包含指令来引用其他包。其他包可以通过网络引用，也可以本地复制到你的环境中。假设通过
    CDN 访问库是一种更高效、更快速的机制。
- en: 'However, Node.js adds the required verb to the JavaScript syntax. In this case,
    your code requires another module to be loaded, which is assumed to be installed
    in your current environment. To install another module, use `npm`, for example,
    in the following command:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Node.js 为 JavaScript 语法添加了所需的动词。在这个例子中，你的代码需要加载另一个模块，假设它已经安装在你当前的环境中。要安装另一个模块，可以使用
    `npm`，例如，在以下命令中：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This will install the module that's been referenced (including any embedded
    packages that are required) on your machine so that a required statement will
    work correctly.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这将安装被引用的模块（包括所需的嵌入式包）到你的计算机上，以便 `require` 语句可以正常工作。
- en: Basic JavaScript in Jupyter
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jupyter 中的基础 JavaScript
- en: JavaScript, and even Node.js, are not usually noted for data handling, but for
    application (website) development. This differentiates JavaScript coding in Jupyter
    from the languages that we covered earlier. However, the examples in this chapter
    will highlight using JavaScript for application development with data access and
    analysis features.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript，甚至 Node.js，通常并不以数据处理著称，而是以应用（网站）开发为主。这一点与我们之前讨论的语言有所不同。然而，本章的例子将重点介绍如何使用
    JavaScript 进行应用开发，并结合数据访问和分析功能。
- en: JavaScript limitations in Jupyter
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jupyter 中的 JavaScript 限制
- en: JavaScript was originally used to specifically address the need for scripting
    inside of an HTML page, usually on the client-side (in a browser). As such, it
    was built to be able to manipulate HTML elements on the page. Several packages
    have been developed to further this feature, even for creating a web server, especially
    using extensions such as Node.js.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 最初是专门为了在 HTML 页面中进行脚本编写而设计的，通常是在客户端（浏览器中）。因此，它被构建为能够操作页面上的 HTML 元素。为进一步扩展这一功能，尤其是使用
    Node.js 等扩展，已经开发了多个包，甚至可以用来创建 Web 服务器。
- en: The use of any of the HTML manipulation and generation features inside of Jupyter
    runs into a roadblock, since Jupyter expects to control presentation to the user.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Jupyter 中使用任何 HTML 操作和生成特性时都会遇到障碍，因为 Jupyter 期望控制用户的呈现方式。
- en: Node.js d3 package
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Node.js d3 包
- en: The `d3` package has data access functionality. In this case, we will read from
    a tab-separated file and compute an average. Note the use of the underscore variable
    name for `lodash`. Variable names starting with an underscore are assumed to be
    private. However, in this case, it is just a play on the name of the package we
    are using, which is `lodash`, or underscore. `lodash` is also a widely used a `utility`
    package.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`d3` 包具有数据访问功能。在这个例子中，我们将从一个制表符分隔的文件中读取数据并计算平均值。请注意使用了变量名以 _ 开头来表示 `lodash`。以下划线开头的变量名通常被认为是私有的。然而，在这个例子中，它仅仅是我们使用的包名的变体，即
    `lodash`，或者叫做 underscore。`lodash` 也是一个广泛使用的 `utility` 包。'
- en: 'For this script to execute, I had to do the following:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为了执行这个脚本，我做了如下操作：
- en: Install `d3`
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 `d3`
- en: Install `lodash`
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 `lodash`
- en: Install `isomorphic-fetch` (`npm install --save isomorphic-fetch es6-promise`)
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 `isomorphic-fetch` （`npm install --save isomorphic-fetch es6-promise`）
- en: Import `isomorphic-fetch`
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入 `isomorphic-fetch`
- en: 'The script we will use is as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用的脚本如下：
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This assumes that we have previously loaded the `fs` and `d3` packages using
    `npm`, as described in the previous script.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这假设我们已经使用 `npm` 加载了 `fs` 和 `d3` 包，如前面的脚本所述。
- en: 'For this example, I created a `data` directory on my website, since the URL
    that we entered is expected to be an absolute URL, and created a CSV file (`animal.csv`)
    in that directory:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个例子，我在我的网站上创建了一个 `data` 目录，因为我们输入的 URL 被期望是一个绝对 URL，并在该目录下创建了一个 CSV 文件（`animal.csv`）：
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If we load this script into a Notebook and run it, we get the following output,
    as expected:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将这个脚本加载到一个 Notebook 中并运行，它将输出以下内容，正如预期：
- en: '![](img/9c6b27f8-6ece-42e0-9d88-ad10870f4f2f.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9c6b27f8-6ece-42e0-9d88-ad10870f4f2f.png)'
- en: It's important to note that the `d3` function (many of them, actually) operate
    asynchronously. In our case, we are just printing every row of the file. You can
    imagine more elaborate functionality.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，`d3` 函数（实际上有很多）是异步操作的。在我们的例子中，我们只是打印文件的每一行。你可以想象更复杂的功能。
- en: Node.js stats-analysis package
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Node.js 数据分析包
- en: The `stats-analysis` package has many of the common statistics that you may
    want to perform on your data. You will have to install this package using `npm`,
    as explained previously.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`stats-analysis` 包包含了你可能需要对数据执行的许多常见统计操作。你需要使用 `npm` 安装这个包，正如之前所解释的那样。'
- en: 'If we had a small set of people''s temperatures to work with, we could get
    some of the statistics on the data readily by using this script:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们有一小组人的体温数据可以使用，我们可以通过使用这个脚本快速获得数据的一些统计信息：
- en: '[PRE6]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'When this script is entered in a Notebook, we get something similar to what''s
    shown in the following screenshot:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当这个脚本输入到 Notebook 中时，我们会得到类似于下图所示的内容：
- en: '![](img/a885f097-9c9c-477e-bd46-aa359363eac3.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a885f097-9c9c-477e-bd46-aa359363eac3.png)'
- en: 'When run, we get the results that are shown in the following screenshot:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 执行时，我们得到如下截图所示的结果：
- en: '![](img/f6c0cc74-468c-4ee7-8f83-651dcdfc3e9d.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f6c0cc74-468c-4ee7-8f83-651dcdfc3e9d.png)'
- en: Interestingly, `98.5` is considered an outlier. I assume that there is an optional
    parameter to the command that would change the limits used. Otherwise, the results
    are as expected.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，`98.5` 被认为是一个异常值。我猜测命令中有一个可选参数可以改变使用的限制。否则，结果与预期一致。
- en: The outliers are coming from dealing with the raw data as pure mathematical
    items. So, technically, from the data provided, we have the outliers identified.
    However, we would likely use a different method to determine outliers, knowing
    the domain average human temperatures.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 异常值来自于将原始数据当作纯数学项处理。所以，技术上来说，从提供的数据中，我们已经识别出异常值。然而，我们可能会使用不同的方法来确定异常值，了解人类体温的领域平均值。
- en: Node.js JSON handling
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Node.js JSON 处理
- en: 'In this example, we will load a JSON dataset and perform some standard manipulations
    on the data. I am referencing the list of FORD Models from [http://www.carqueryapi.com/api/0.3/?callback=?&cmd=getModels&make=ford](http://www.carqueryapi.com/api/0.3/?callback=?&cmd=getModels&make=ford).
    I can''t reference this directly, as it is not a flat file, but an API call. Therefore,
    I downloaded the data into a local file called `fords.json`. Also, the output
    from the API call wraps the JSON like so: `?(json);`. This would have to be removed
    before parsing.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将加载一个 JSON 数据集，并对数据进行一些标准的操作。我引用了来自 [http://www.carqueryapi.com/api/0.3/?callback=?&cmd=getModels&make=ford](http://www.carqueryapi.com/api/0.3/?callback=?&cmd=getModels&make=ford)
    的 FORD 模型列表。我不能直接引用这个，因为它不是一个扁平化文件，而是一个 API 调用。因此，我将数据下载到一个名为 `fords.json` 的本地文件中。此外，API
    调用的输出会将 JSON 包裹成这样：`?(json);`。在解析之前，这部分需要被移除。
- en: The scripting we will use is as follows. In the script, `JSON` is a built-in
    package of Node.js, so we can reference this package directly. The `JSON` package
    provides many of the standard tools that you need to handle your JSON files and
    objects.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用的脚本如下。在脚本中，`JSON` 是 Node.js 的内建包，因此我们可以直接引用这个包。`JSON` 包提供了处理 JSON 文件和对象所需的许多标准工具。
- en: 'Of interest here is the JSON file reader, which constructs a standard JavaScript
    array of objects. Attributes of each object can be referenced by `name`, for example,
    `model.model_name`:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这里值得关注的是 JSON 文件读取器，它构建了一个标准的 JavaScript 对象数组。每个对象的属性可以通过 `name` 进行引用，例如 `model.model_name`：
- en: '[PRE7]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If we pull this script into a new Notebook entry, we get the following screenshot:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将这个脚本引入一个新的 Notebook 条目中，我们会得到以下截图：
- en: '![](img/e71fc713-c218-46bd-a173-cf97ff1e1d10.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e71fc713-c218-46bd-a173-cf97ff1e1d10.png)'
- en: 'When the script is executed, we get the expected results, as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 当脚本执行时，我们会得到预期的结果，如下所示：
- en: '![](img/c4572efc-acef-4288-a74c-cfa81553d655.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4572efc-acef-4288-a74c-cfa81553d655.png)'
- en: Node.js canvas package
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Node.js canvas 包
- en: The `canvas` package is used for generating graphics in Node.js. We can use
    the example from the `canvas` package home page ([https://www.npmjs.com/package/canvas](https://www.npmjs.com/package/canvas)).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`canvas` 包用于在 Node.js 中生成图形。我们可以使用来自 `canvas` 包主页的示例 ([https://www.npmjs.com/package/canvas](https://www.npmjs.com/package/canvas))。'
- en: 'First, we need to install `canvas` and its dependencies. There are directions
    on the home page for the different operating systems, but it is very familiar
    to the tools we have seen before (we have seen them for macOS):'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要安装 `canvas` 及其依赖项。不同操作系统的安装指南可以在主页上找到，但它与我们之前见过的工具非常相似（我们已经见过 macOS 的版本）：
- en: '[PRE8]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This example does not work in Windows. The Windows install required Microsoft
    Visual C++ to be installed. I tried several iterations to no avail.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例在 Windows 中无法运行。Windows 安装要求安装 Microsoft Visual C++。我尝试了多个版本，但未能成功。
- en: 'With the `canvas` package installed on your machine, we can use a small Node.js
    script to create a graphic:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在机器上安装了 `canvas` 包后，我们可以使用一个小的 Node.js 脚本来创建图形：
- en: '[PRE9]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This script is creating `canvas`, writing `string` as `Jupyter!` across `canvas`,
    and then generating an HTML `img` tag with the graphic.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本在 `canvas` 上写入字符串 `Jupyter!`，然后生成带有图形的 HTML `img` 标签。
- en: 'After we run the script in a Notebook, we get the `img` tag as the output:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Notebook 中运行脚本后，我们会得到 `img` 标签作为输出：
- en: '![](img/c1a4a82e-dfa7-449f-9fae-d3712bebd296.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c1a4a82e-dfa7-449f-9fae-d3712bebd296.png)'
- en: 'We can take the `img` tag and save it to an HTML page so it looks like this:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将 `img` 标签保存为 HTML 页面，效果如下：
- en: '[PRE10]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We can then open the HTML file with a browser to display our graphic:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以用浏览器打开 HTML 文件来显示我们的图形：
- en: '![](img/2c108493-6bf8-47c7-82dd-73fe882a699e.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c108493-6bf8-47c7-82dd-73fe882a699e.png)'
- en: Node.js plotly package
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Node.js plotly 包
- en: '`plotly` is a package that works differently to most. To use this software,
    you must register with a `username` so that you are provided with an `api_key`
    (at [https://plot.ly/](https://plot.ly/)). You then place the `username` and `api_key` in
    your script. At that point, you can use all of the `plotly` package features.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`plotly` 是一个与大多数包不同的工具。使用此软件时，您必须注册一个 `username` 账户，这样您就能获得一个 `api_key`（在 [https://plot.ly/](https://plot.ly/)）。然后将
    `username` 和 `api_key` 放入您的脚本中。此时，您可以使用 `plotly` 包的所有功能。'
- en: 'First, like all of the other packages, we need to install it:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，像其他包一样，我们需要先安装它：
- en: '[PRE11]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Once installed, we can reference the `plotly` package as needed. Using a simple
    script, we can generate a `histogram` with `plotly`:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，我们可以根据需要引用 `plotly` 包。使用一个简单的脚本，我们可以使用 `plotly` 生成一个 `histogram`（直方图）：
- en: '[PRE12]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Once loaded and run in Jupyter as a Notebook, we get the following screen:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦在 Jupyter 中加载并运行为 Notebook，我们将看到以下界面：
- en: '![](img/8fc767c6-a753-4589-9e67-8efd6ae214fc.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8fc767c6-a753-4589-9e67-8efd6ae214fc.png)'
- en: Instead of creating a local file, or just displaying the graphic on the screen,
    any graphic that is created is stored on Plotly. The output of the `plot` command
    is a set of return values from your graphic's creation. Most important is the
    URL where you can access the graphic.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 与创建本地文件或仅在屏幕上显示图形不同，任何创建的图形都会存储在 Plotly 上。`plot` 命令的输出是一组返回值，其中最重要的是您可以访问图形的
    URL。
- en: 'Ideally, what should happen is that I should be able to access my graphic (histogram)
    using the URL provided, which is [https://plot.ly/~dantoomey/1](https://plot.ly/~dantoomey/1).
    The returned URL works as expected after inserting a `~` character into the URL.
    However, when I looked around the Plotly website, I did find my graphics in slightly
    different paths than expected. All of your graphics are in your home page, which
    in my case is [https://plot.ly/~dantoomey](https://plot.ly/~dantoomey). I can
    now access all of my graphics. The histogram is shown in the following screenshot:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，我应该能够通过提供的 URL 访问我的图形（直方图），URL 为 [https://plot.ly/~dantoomey/1](https://plot.ly/~dantoomey/1)。插入
    `~` 字符后，返回的 URL 按预期工作。然而，当我浏览 Plotly 网站时，我发现我的图形位于与预期略有不同的路径中。所有图形都在我的主页上，在我的情况下是
    [https://plot.ly/~dantoomey](https://plot.ly/~dantoomey)。现在，我可以访问所有的图形。直方图如下所示：
- en: '![](img/3b5e0edf-a875-46ad-8984-3acad0d269e0.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3b5e0edf-a875-46ad-8984-3acad0d269e0.png)'
- en: Node.js asynchronous threads
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Node.js 异步线程
- en: 'Node.js has built-in mechanisms for creating threads and having them fire asynchronously.
    Using an example from [http://book.mixu.net/node/ch7.html](http://book.mixu.net/node/ch7.html),
    we have the following:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js 内置了创建线程并使其异步执行的机制。借用 [http://book.mixu.net/node/ch7.html](http://book.mixu.net/node/ch7.html)
    中的示例，我们可以得到以下代码：
- en: '[PRE13]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This script creates an asynchronous function that operates on a number. For
    every number (`item`), we call upon the inline function, passing the number to
    the function which applies the number to the `results` list. In this case, it
    just triples the number and waits for two seconds. The main loop (at the bottom
    of the script) creates a thread for each number in the list and then waits for
    them all to complete before calling the `final()` routine.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 该脚本创建了一个对数字进行操作的异步函数。对于每个数字（`item`），我们调用内联函数，将数字传递给该函数，函数将该数字应用于 `results` 列表。在这个例子中，它只是将数字乘以三并等待两秒钟。主循环（在脚本的底部）为列表中的每个数字创建一个线程，然后等待它们全部完成后再调用
    `final()` 例程。
- en: 'The Notebook page looks like this:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 笔记本页面如下所示：
- en: '![](img/34652c45-a6fc-4291-94d6-e7c90016d892.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/34652c45-a6fc-4291-94d6-e7c90016d892.png)'
- en: 'When we run the script, we get something like the following output:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行脚本时，我们会得到类似于以下的输出：
- en: '![](img/c5aefacc-b73c-4bd5-aecb-45dae4c77472.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c5aefacc-b73c-4bd5-aecb-45dae4c77472.png)'
- en: It is odd to see the delay for the last line of output (from the `final()` routine)
    to display, although we specifically stated to add a delay when we coded the `async`
    function previously.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 很奇怪的是，看到最后一行输出（来自 `final()` 例程）显示时有延迟，尽管我们在之前编写 `async` 函数时明确指定了添加延迟。
- en: Also, when I played around with other functions, such as cubing each number,
    the `results` list came back in a very different order. I would not have thought
    such a basic mathematics function would have any effect on performance.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，当我尝试其他函数时，例如对每个数字进行立方运算，`results` 列表的顺序发生了很大的变化。我本来没想到这么基础的数学运算会对性能产生影响。
- en: Node.js decision-tree package
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Node.js 的 decision-tree 包
- en: 'The `decision-tree` package is an example of a machine learning package. It
    is available at [https://www.npmjs.com/package/decision-tree](https://www.npmjs.com/package/decision-tree).
    The package is installed by using the following command:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`decision-tree` 包是一个机器学习包的例子。它可以在 [https://www.npmjs.com/package/decision-tree](https://www.npmjs.com/package/decision-tree)
    获取。该包可以通过以下命令安装：'
- en: '[PRE14]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We need a dataset to use for training/developing our decision tree. I am using
    the car MPG dataset from the following web page: [https://alliance.seas.upenn.edu/~cis520/wiki/index.php?n=Lectures.DecisionTrees](https://alliance.seas.upenn.edu/~cis520/wiki/index.php?n=Lectures.DecisionTrees).
    It did not seem to be available directly, so I copied it into Excel and saved
    it as a local CSV.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个数据集来用于训练/开发我们的决策树。我使用了以下网页中的汽车MPG数据集：[https://alliance.seas.upenn.edu/~cis520/wiki/index.php?n=Lectures.DecisionTrees](https://alliance.seas.upenn.edu/~cis520/wiki/index.php?n=Lectures.DecisionTrees)。它似乎无法直接获得，所以我将其复制到Excel并保存为本地CSV文件。
- en: 'The logic for machine learning is very similar:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 机器学习的逻辑非常相似：
- en: Load our dataset
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加载我们的数据集
- en: Split into a training set and a testing set
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将数据集划分为训练集和测试集
- en: Use the training set to develop our model
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用训练集来开发我们的模型
- en: Test the mode on the test set
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在测试集上测试模式
- en: Typically, you might use two-thirds of your data for training and one-third
    for testing.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，您可能会将三分之二的数据用于训练，三分之一用于测试。
- en: 'Using the `decision-tree` package and the `car-mpg` dataset, we would have
    a script similar to the following:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `decision-tree` 包和 `car-mpg` 数据集，我们将拥有一个类似于以下的脚本：
- en: '[PRE15]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: There is wide use of `console.log` to display progressive information about
    the processing that is occurring. I am using the `util()` function further in
    order to display members of objects in use.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`console.log` 被广泛用于显示关于正在进行的处理过程的渐进信息。我进一步使用了 `util()` 函数，以便显示正在使用的对象成员。'
- en: The packages must also be installed using `npm`.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这些包也必须使用 `npm` 进行安装。
- en: 'If we run this in a Notebook, we end up with the results that are shown at
    the top of the following output:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在笔记本中运行它，我们会得到如下输出顶部显示的结果：
- en: '![](img/26107f8f-8baf-4db3-865e-6f1af5d3ab35.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/26107f8f-8baf-4db3-865e-6f1af5d3ab35.png)'
- en: Here, the system is just logging the entries that it finds in the file and presenting
    decision points on the different variables we have assigned. For example, `mpg`
    is `Bad` when `cylinders` is `8`, `displacement` is `400`, and so on.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，系统仅记录它在文件中找到的条目，并根据我们分配的不同变量呈现决策点。例如，当 `cylinders` 为 `8`、`displacement`
    为 `400` 时，`mpg` 是 `Bad`，依此类推。
- en: We arrive at a model for determining whether `mpg` for a vehicle is acceptable,
    based on the vehicle's characteristics. In this case, we have a bad predictor,
    as noted in the results.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到了一个模型，用于确定车辆的 `mpg` 是否可接受，这取决于车辆的特征。在这种情况下，正如结果中所示，我们有一个不太好的预测器。
- en: Summary
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how to add JavaScript to our Jupyter Notebook. We
    saw some of the limitations of using JavaScript in Jupyter. We had a look at examples
    of several packages that are typical of Node.js coding, including `d3` for graphics,
    `stats-analysis` for statistics, built-in JSON handling, `canvas` for creating
    graphics files, and `plotly`, which is used for generating graphics with a third-party
    tool. We also saw how multi-threaded applications can be developed using Node.js
    under Jupyter. Lastly, we saw machine learning for developing a decision tree.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何将 JavaScript 添加到我们的 Jupyter Notebook 中。我们了解了在 Jupyter 中使用 JavaScript
    的一些限制。我们还看了一些典型的 Node.js 编程包的示例，包括用于图形的`d3`，用于统计分析的`stats-analysis`，内置的 JSON 处理，`canvas`
    用于创建图形文件，以及 `plotly`，它用于通过第三方工具生成图形。我们还看到了如何在 Jupyter 中使用 Node.js 开发多线程应用程序。最后，我们看到了如何进行机器学习以开发决策树。
- en: In the next chapter, we will see how to create interactive widgets that can
    be used in your Notebook.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何创建可以在你的 Notebook 中使用的交互式小部件。
