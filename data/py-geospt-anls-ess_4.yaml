- en: Chapter 4. Creating Maps
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章 创建地图
- en: In this chapter, we will look at how Python programs can create great-looking
    maps using the Mapnik library. You will install Mapnik onto your computer, learn
    the basics of the Mapnik library, and see how you can use it to generate simple
    maps. We will then explore some of the more advanced aspects of Mapnik, and see
    how it can be used to produce a wide range of complex visual effects. Finally,
    we will create a useful program that displays the contents of any shapefile as
    a map.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨 Python 程序如何使用 Mapnik 库创建外观精美的地图。你将在计算机上安装 Mapnik，学习 Mapnik 库的基础知识，并了解如何使用它生成简单的地图。然后，我们将探索
    Mapnik 的更多高级特性，并了解它如何用于产生各种复杂的视觉效果。最后，我们将创建一个有用的程序，该程序将任何形状文件的 内容以地图的形式显示出来。
- en: Introducing Mapnik
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 Mapnik
- en: It is very difficult to make sense of geospatial data without being able to
    visualize it. The usual way in which spatial data is made visible is by drawing
    a map—indeed, a map is nothing more than an image created out of spatial data.
    **Mapnik** ([http://mapnik.org](http://mapnik.org)) is a powerful tool for transforming
    raw geospatial data into a map image.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不能可视化地理空间数据，很难理解其含义。通常，通过绘制地图来使空间数据可见——实际上，地图只不过是由空间数据创建的图像。**Mapnik** ([http://mapnik.org](http://mapnik.org))
    是一个强大的工具，可以将原始地理空间数据转换为地图图像。
- en: Mapnik itself is written in C++ but comes with bindings that allow you to access
    it from Python. Using Python code, you can define the various layers that make
    up a map, specify the datasources containing the data to be displayed, and then
    set up the styles which control how the various features are to be drawn.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Mapnik 本身是用 C++ 编写的，但它附带了一些绑定，允许你从 Python 访问它。使用 Python 代码，你可以定义组成地图的各个图层，指定包含要显示的数据的数据源，然后设置样式，以控制如何绘制各种特征。
- en: Mapnik can be a little intimidating when you first start working with it, so
    let's jump in and get our hands dirty right away. Let's start by installing Mapnik
    onto your computer and use it to generate a simple map, before delving a bit deeper
    into how to build and style maps using the Mapnik library.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 当你刚开始使用 Mapnik 时，它可能会让你感到有些难以接近，所以让我们直接动手，立即开始。首先，让我们在你的计算机上安装 Mapnik，并使用它生成一个简单的地图，然后再深入探讨如何使用
    Mapnik 库构建和样式化地图。
- en: Installing Mapnik
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Mapnik
- en: To install Mapnik, go to the downloads page on the main Mapnik website ([http://mapnik.org/pages/downloads.html](http://mapnik.org/pages/downloads.html)),
    and choose the installer for your operating system. Pre-built packages are available
    for both Mac OS X and MS Windows. For Linux machines, you will need to either
    compile the program from source, or use a package manager to download, compile,
    and install Mapnik and its various dependencies; full instructions on how to do
    this are provided on the Mapnik download page.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 Mapnik，请访问 Mapnik 主网站上的下载页面 ([http://mapnik.org/pages/downloads.html](http://mapnik.org/pages/downloads.html))，并选择适合你操作系统的安装程序。对于
    Mac OS X 和 MS Windows，都有预构建的包可用。对于 Linux 计算机，你需要从源代码编译程序，或者使用包管理器下载、编译和安装 Mapnik
    及其各种依赖项；有关如何操作的完整说明可在 Mapnik 下载页面上找到。
- en: A taste of Mapnik
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Mapnik 的初体验
- en: We will start our exploration of Mapnik by writing a simple program that generates
    a map using the World Borders Dataset we downloaded earlier. Copy the contents
    of the `TM_WORLD_BORDERS-0.3` directory into a convenient place, and then create
    a new Python program in the same directory. Name your new program `mapnik_example.py`.
    This program will generate a PNG-format image file based on the contents of the
    World Borders Dataset shapefile.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过编写一个简单的程序来开始对 Mapnik 的探索，该程序使用我们之前下载的世界边界数据集生成地图。将 `TM_WORLD_BORDERS-0.3`
    目录的内容复制到方便的位置，然后在同一目录中创建一个新的 Python 程序。将你的新程序命名为 `mapnik_example.py`。此程序将根据世界边界数据集形状文件的内容生成一个
    PNG 格式的图像文件。
- en: 'Type the following into your `mapnik_example.py` file:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下内容输入到你的 `mapnik_example.py` 文件中：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When you run this program, a new file named `map.png` should be created in
    the same directory. Opening this file will display the generated map:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行此程序时，应在同一目录中创建一个名为 `map.png` 的新文件。打开此文件将显示生成的地图：
- en: '![A taste of Mapnik](img/4102_04_01.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![Mapnik 的初体验](img/4102_04_01.jpg)'
- en: 'Now that we''ve seen what our example program does, let''s take a closer look
    at it and examine each part in turn. Let''s start with the very beginning of our
    program:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了我们的示例程序是如何工作的，让我们仔细看看它，并依次检查每个部分。让我们从程序的开始部分开始：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here we simply import the Mapnik library, and then create and initialize a new
    **map** object. The map image will be 1,200 pixels wide and 600 pixels high, and
    the map will have a pale blue background defined by the hexadecimal color value
    `#e0e0ff`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们简单地导入 Mapnik 库，然后创建并初始化一个新的 **地图** 对象。地图图像宽度为 1,200 像素，高度为 600 像素，地图背景为浅蓝色，由十六进制颜色值
    `#e0e0ff` 定义。
- en: 'A map consists of one or more **map layers**. In our program, we only have
    one map layer, which we set up to access the `TM_WORLD_BORDERS` shapefile:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 一个地图由一个或多个 **地图层** 组成。在我们的程序中，我们只有一个地图层，我们将其设置为访问 `TM_WORLD_BORDERS` shapefile：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'There are a few things to notice about this layer definition:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个层定义中，有几个需要注意的地方：
- en: Each map layer is given a **name** which uniquely identifies the layer within
    the map; in our program, we've called our map layer `countries`.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个地图层都有一个 **名称**，该名称在地图中唯一标识了层；在我们的程序中，我们称我们的地图层为 `countries`。
- en: Each layer has a **datasource** which tells Mapnik where the data should come
    from. In this case, we're using the `mapnik.Shapefile` class to load the data
    from a shapefile, though there are many different types of datasources that can
    be used. For example, you can load data directly from a spatial database, or even
    use a Python datasource to create and display features programmatically.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个层都有一个 **数据源**，它告诉 Mapnik 数据应该从哪里获取。在这种情况下，我们使用 `mapnik.Shapefile` 类从 shapefile
    加载数据，尽管可以使用许多不同类型的数据源。例如，您可以直接从空间数据库加载数据，甚至可以使用 Python 数据源以编程方式创建和显示要素。
- en: The `layer.styles.append("country_style")` line tells Mapnik which **style**
    to use to draw the layer's data. Mapnik styles are referred to by name, and you
    can have any number of styles associated with each layer.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`layer.styles.append("country_style")` 这一行告诉 Mapnik 应该使用哪个 **风格** 来绘制层的数据。Mapnik
    风格通过名称引用，并且可以与每个层关联任意数量的风格。'
- en: Note
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Mapnik layers can also have a spatial reference system associated with them.
    If you don't specify a spatial reference system, Mapnik will assume that the data
    is in the standard EPSG 4326 spatial reference system.
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Mapnik 层还可以与一个空间参考系统相关联。如果您没有指定空间参考系统，Mapnik 将假设数据位于标准的 EPSG 4326 空间参考系统中。
- en: We next want to define the `country_style` style which will draw the contents
    of our map layer. A style consists of any number of **rules**, where each rule
    has an optional **filter** identifying which of the features in the datasource
    should be drawn using this rule, and a list of **symbolizers** which will be used
    to draw the matching features onto the map.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们想要定义 `country_style` 风格，该风格将绘制我们的地图层的内容。一个风格由任意数量的 **规则** 组成，其中每个规则都有一个可选的
    **过滤器**，用于标识数据源中哪些要素应该使用此规则绘制，以及一个用于将匹配的要素绘制到地图上的 **符号化器** 列表。
- en: 'We start by creating two symbolizers: one to fill the interior of each polygon
    with a faded green color, and another to draw the outline of each polygon using
    a thin black line:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先创建两个符号化器：一个用于用淡绿色填充每个多边形的内部，另一个用于用细黑线绘制每个多边形的轮廓：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: For the fill symbol, we are once again using a hexadecimal color code to define
    the color to use to draw the interior of the polygon, while for the line symbol
    we make use of a named color. Note that the `0.5` value defines the width, in
    pixels, to use to draw the outline of each polygon.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 对于填充符号，我们再次使用十六进制颜色代码来定义用于绘制多边形内部的颜色，而对于线符号，我们使用一个命名颜色。请注意，`0.5` 值定义了绘制每个多边形轮廓的宽度，单位为像素。
- en: 'Now that we have our two symbolizers, we next define a rule which uses them
    to draw the contents of the shapefile:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了我们的两个符号化器，接下来我们定义一个规则，使用它们来绘制 shapefile 的内容：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Notice that this rule has no filter; the absence of a filter tells Mapnik that
    every feature in the layer's datasource should be drawn using these two symbolizers.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这个规则没有过滤器；过滤器的缺失告诉 Mapnik 应该使用这两个符号化器绘制层数据源中的每个要素。
- en: 'To finish defining our `country_style` style, we initialize the `Style` object
    itself, add our one-and-only rule to the style, and then add the style object
    to our map:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成定义我们的 `country_style` 风格，我们初始化 `Style` 对象本身，将我们唯一的规则添加到风格中，然后将风格对象添加到我们的映射中：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Notice that we give the style a name when we add it to the map object; because
    this name is used to identify the styles used by the map layer, it is important
    that we use exactly the same name both when adding the style to the map and when
    referring to the style in the map layer.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们在将风格添加到地图对象时给出了一个名称；因为这个名称用于标识地图层使用的风格，所以当我们添加风格到地图以及引用地图层中的风格时，使用完全相同的名称是很重要的。
- en: 'Our final task is to tell the map which area of the world to display, and how
    to **render** the visible portion of the map into an image file:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最后的任务是告诉地图要显示世界的哪个区域，以及如何将地图的可见部分**渲染**成图像文件：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In our example, we are zooming out to show all the data in the map layer, and
    saving the results to a PNG format image file named `map.png`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们放大以显示地图层中的所有数据，并将结果保存为名为`map.png`的PNG格式图像文件。
- en: This completes our example Python program to generate a map image using Mapnik.
    There are lots of more sophisticated things you can do using Mapnik, but this
    will give you an idea of how it works and what you can do with it.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这就完成了我们使用Mapnik生成地图图像的示例Python程序。你可以使用Mapnik做很多更复杂的事情，但这将给你一个了解它是如何工作以及你可以用它做什么的思路。
- en: Building a map
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建地图
- en: 'Now that we''ve seen an example of how Mapnik works, let''s look more closely
    at some of the ideas behind the Mapnik library. Consider, for example, the following
    map of the west coast of the United States:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了Mapnik的一个示例，让我们更仔细地看看Mapnik库背后的某些理念。例如，考虑以下美国西海岸的地图：
- en: '![Building a map](img/4102_04_02.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![构建地图](img/4102_04_02.jpg)'
- en: 'This map is actually made up of four different map layers:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这张地图实际上由四个不同的地图层组成：
- en: '![Building a map](img/4102_04_03.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![构建地图](img/4102_04_03.jpg)'
- en: As you can see, the map layers are drawn one on top of the other, as indicated
    by the arrow on the right-hand side of the diagram. In order to achieve the right
    visual effect, the layers need to be added in *reverse* order, so that each layer
    added will appear in front of the layers already in the map. That is, the base
    layer should be added first, then the urban area layer, and so on. The order in
    which the layers are added to the map is very important; if you get the order
    wrong, some of your layers will be obscured.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，地图层是逐层叠加绘制的，如图表右侧的箭头所示。为了达到正确的视觉效果，层需要以*相反*的顺序添加，这样添加的每一层都会出现在地图中已有的层之前。也就是说，基础层应该首先添加，然后是城市区域层，依此类推。层添加到地图中的顺序非常重要；如果你顺序错误，某些层可能会被遮挡。
- en: Styling a map
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 地图样式化
- en: 'As we saw earlier, the map''s styles are defined by creating `mapnik.Style`
    objects and adding them to the map, giving each one a unique name:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前看到的，地图的样式是通过创建`mapnik.Style`对象并将其添加到地图中定义的，每个对象都有一个独特的名称：
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We then tell each map layer which styles we want that layer to use by adding
    the style name to the layer''s `styles` list:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过将样式名称添加到层的`styles`列表中，告诉每个地图层我们希望该层使用哪些样式：
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You might think that it would be easier to simply add the style definition
    directly to the map layer, but this process of referring to styles by name is
    deliberate: it separates *what* will be displayed from *how* it is displayed.
    This approach lets you use the same set of styles across multiple map layers,
    or completely alter the appearance of your map just by swapping style names.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会认为直接将样式定义添加到地图层会更简单，但通过名称引用样式的这个过程是有意为之的：它将*显示的内容*与*显示的方式*分离开来。这种方法允许你在多个地图层中使用相同的样式集，或者只需通过交换样式名称就可以完全改变地图的外观。
- en: Note
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: There is an alternative way of defining your map styles. Rather than creating
    your own `mapnik.Style` objects and adding them to the map one at a time, you
    can define all your styles at once using an XML-format stylesheet. While this
    is very powerful, XML stylesheets are rather hard to read and very un-Pythonic.
    For these reasons, we won't be using XML stylesheets in this book.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 定义你的地图样式有另一种方式。而不是创建自己的`mapnik.Style`对象并逐个将其添加到地图中，你可以使用XML格式的样式表一次性定义所有样式。虽然这非常强大，但XML样式表很难阅读，而且非常不符合Python风格。出于这些原因，我们在这本书中不会使用XML样式表。
- en: 'In our example program, we created a single `mapnik.Style` object that consisted
    of just one rule. This rule had two symbolizers associated with it, telling Mapnik
    how to draw the interior and exterior of each country''s polygon. Rules can be
    more sophisticated, however, including various *conditions* which must be met
    before the rule is used. For example, consider the following Python code snippet:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例程序中，我们创建了一个单一的`mapnik.Style`对象，它只包含一条规则。这条规则有两个符号化器与之相关联，告诉Mapnik如何绘制每个国家多边形的内部和外部。然而，规则可以更加复杂，包括在规则被使用之前必须满足的各种*条件*。例如，考虑以下Python代码片段：
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Because the style's rules are evaluated one after the other, this style will
    draw the feature using `symbol1` if the feature's `POPULATION` attribute has a
    value of less than 500,000; it will draw the feature using `symbol2` if the feature's
    `POPULATION` attribute has a value between 500,000 and 1,000,000; and it will
    draw the feature using `symbol3` if the feature's `POPULATION` attribute is 1,000,000
    or more.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 由于样式的规则是依次评估的，因此当特征的`POPULATION`属性值小于500,000时，此样式将使用`symbol1`绘制特征；如果特征的`POPULATION`属性值在500,000到1,000,000之间，则使用`symbol2`绘制特征；如果特征的`POPULATION`属性值是1,000,000或更多，则使用`symbol3`绘制特征。
- en: Note
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: As well as having filters, rules can also have a minimum and maximum scale factor
    at which the rule will apply. This can be used, for example, to hide smaller features
    when the map is zoomed right out.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 除了具有过滤器外，规则还可以有一个最小和最大比例因子，在这个比例因子下规则将生效。例如，当地图被放大到最大时，可以使用此功能隐藏较小的特征。
- en: 'Because you can have multiple symbols within a rule, the way that features
    are drawn can also get quite sophisticated. For example, you could define a single
    rule which uses three separate symbolizers to draw a LineString geometry as a
    street:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 由于规则中可以有多个符号，特征的绘制方式也可以变得相当复杂。例如，您可以定义一个规则，该规则使用三个不同的符号化器来绘制LineString几何形状作为街道：
- en: '![Styling a map](img/4102_04_04.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![地图样式](img/4102_04_04.jpg)'
- en: As you can imagine, combining symbolizers, rules, filters, and styles will give
    you tremendous flexibility in choosing which features should appear within a map,
    and how those features will be drawn.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所想象，结合符号化、规则、过滤器和样式将为您在选择哪些特征应在地图中显示以及如何绘制这些特征方面提供极大的灵活性。
- en: Learning Mapnik
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学习Mapnik
- en: Now that you've seen what Mapnik can do and have some idea of how Mapnik works,
    let's look more deeply at some of the other aspects of the Mapnik library. We
    will be covering datasources, symbolizers, and map rendering in this section of
    the chapter.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经看到了Mapnik能做什么，并对Mapnik的工作方式有了一些了解，让我们更深入地了解Mapnik库的其他方面。在本章的这一节中，我们将介绍数据源、符号化和地图渲染。
- en: Datasources
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据源
- en: 'Each map layer is associated with a **datasource** (a subclass of `mapnik.Datasource`)
    that provides the data to be displayed on the map. The various types of datasources
    are made available through C++ plugins, which are enabled or disabled when Mapnik
    is compiled. To see if a given type of datasource is available, you check to see
    if the associated plugin has been installed into your copy of Mapnik. You can
    see a list of the installed plugins (and therefore, the supported datasources)
    by typing the following into the Python command prompt:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 每个地图层都与一个**数据源**（`mapnik.Datasource`的子类）相关联，该数据源提供要在地图上显示的数据。各种类型的数据源通过C++插件提供，这些插件在编译Mapnik时启用或禁用。要检查是否安装了特定类型的数据源，请检查相关的插件是否已安装到您的Mapnik副本中。您可以通过在Python命令提示符中输入以下内容来查看已安装的插件列表（因此，支持的源数据）：
- en: '[PRE10]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The following datasource plugins are currently supported by Mapnik:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Mapnik当前支持以下数据源插件：
- en: '**csv**: This plugin provides the `mapnik.CSV` datasource, which reads tabular
    data from either a text file or a string. By default, the data is in **CSV** (**comma-separated
    value**) format, though other similar formats are also supported.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**csv**：此插件提供`mapnik.CSV`数据源，可以从文本文件或字符串中读取表格数据。默认情况下，数据以**CSV**（逗号分隔值）格式存储，尽管也支持其他类似格式。'
- en: The CSV datasource will automatically identify point geometries based on columns
    with headers containing names like "lat", "latitude", "lon", "long", and "longitude".
    The datasource will also detect GeoJSON and WKT formatted geometries if the column
    header is named "geojson" or "wkt". Documentation for the `csv` plugin can be
    found at [https://github.com/mapnik/mapnik/wiki/CSV-Plugin](https://github.com/mapnik/mapnik/wiki/CSV-Plugin).
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: CSV数据源将自动根据包含“lat”、“latitude”、“lon”、“long”和“longitude”等名称的列头识别点几何形状。如果列头命名为“geojson”或“wkt”，数据源还将检测GeoJSON和WKT格式的几何形状。有关`csv`插件的文档，请参阅[https://github.com/mapnik/mapnik/wiki/CSV-Plugin](https://github.com/mapnik/mapnik/wiki/CSV-Plugin)。
- en: '**gdal**: This plugin provides the `mapnik.Gdal` datasource. This datasource
    uses the GDAL library to read raster-format data and make it available to the
    map layer. To use this datasource in a map layer, you need to add a style to the
    map layer which includes a `mapnik.RasterSymbolizer` to draw the raster data onto
    the map. Documentation for the `gdal` plugin can be found at [https://github.com/mapnik/mapnik/wiki/GDAL](https://github.com/mapnik/mapnik/wiki/GDAL).'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**gdal**: 此插件提供了 `mapnik.Gdal` 数据源。此数据源使用 GDAL 库读取栅格格式数据并将其提供给地图层。要在地图层中使用此数据源，您需要向地图层添加一个样式，该样式包含一个
    `mapnik.RasterSymbolizer` 以在地图上绘制栅格数据。有关 `gdal` 插件的文档，请参阅 [https://github.com/mapnik/mapnik/wiki/GDAL](https://github.com/mapnik/mapnik/wiki/GDAL)。'
- en: '**ogr**: This plugin implements the `mapnik.Ogr` datasource. This datasource
    uses the OGR library to read vector-format data. Documentation for the `ogr` plugin
    can be found at [https://github.com/mapnik/mapnik/wiki/OGR](https://github.com/mapnik/mapnik/wiki/OGR).'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ogr**: 此插件实现了 `mapnik.Ogr` 数据源。此数据源使用 OGR 库读取矢量格式数据。有关 `ogr` 插件的文档，请参阅 [https://github.com/mapnik/mapnik/wiki/OGR](https://github.com/mapnik/mapnik/wiki/OGR)。'
- en: '**osm**: The `osm` plugin provides the `mapnik.Osm` datasource. This datasource
    reads data in OpenStreetMap XML format. Documentation for the `osm` plugin can
    be found at [https://github.com/mapnik/mapnik/wiki/OsmPlugin](https://github.com/mapnik/mapnik/wiki/OsmPlugin).'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**osm**: `osm` 插件提供了 `mapnik.Osm` 数据源。此数据源读取 OpenStreetMap XML 格式的数据。有关 `osm`
    插件的文档，请参阅 [https://github.com/mapnik/mapnik/wiki/OsmPlugin](https://github.com/mapnik/mapnik/wiki/OsmPlugin)。'
- en: '**postgis**: This plugin provides the `mapnik.PostGIS` datasource. This datasource
    connects to a PostGIS database and reads spatial data from a specified database
    table. You use the `host`, `dbname`, `user`, and `password` parameters when creating
    a PostGIS datasource to tell Mapnik how to connect to a given PostGIS database,
    while the `table` parameter specifies which table in the database to read the
    data from.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**postgis**: 此插件提供了 `mapnik.PostGIS` 数据源。此数据源连接到 PostGIS 数据库，并从指定的数据库表中读取空间数据。在创建
    PostGIS 数据源时，您使用 `host`、`dbname`、`user` 和 `password` 参数来告诉 Mapnik 如何连接到特定的 PostGIS
    数据库，而 `table` 参数指定从哪个表中读取数据。'
- en: Additional parameters are available for special purposes, for example to limit
    the extent of the data to display, or to use an SQL subquery to include only some
    of the records in the database table. Complete documentation for the postgis plugin
    can be found at [https://github.com/mapnik/mapnik/wiki/PostGIS](https://github.com/mapnik/mapnik/wiki/PostGIS).
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于特殊目的，还提供了额外的参数，例如限制显示数据的范围，或使用 SQL 子查询仅包括数据库表中的某些记录。有关 postgis 插件的完整文档，请参阅
    [https://github.com/mapnik/mapnik/wiki/PostGIS](https://github.com/mapnik/mapnik/wiki/PostGIS)。
- en: '**python**: This plugin provides the `mapnik.Python` datasource. This allows
    you to implement your own datasource by writing a custom Python class that provides
    access to the data to be displayed. To write a custom Python datasource, you would
    typically create a subclass of `mapnik.PythonDatasource` and then use the name
    of your custom class as the `factory` parameter when calling the mapnik.Python()
    function to instantiate your datasource. You then implement the necessary methods
    within your class to provide access to the data. Documentation for the python
    plugin can be found at [https://github.com/mapnik/mapnik/wiki/Python-Plugin](https://github.com/mapnik/mapnik/wiki/Python-Plugin).'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**python**: 此插件提供了 `mapnik.Python` 数据源。这允许您通过编写一个自定义的 Python 类来访问要显示的数据，从而实现自己的数据源。要编写自定义
    Python 数据源，您通常需要创建 `mapnik.PythonDatasource` 的子类，然后在调用 mapnik.Python() 函数实例化数据源时使用您自定义类的名称作为
    `factory` 参数。然后，在您的类中实现必要的函数以提供对数据的访问。有关 python 插件的文档，请参阅 [https://github.com/mapnik/mapnik/wiki/Python-Plugin](https://github.com/mapnik/mapnik/wiki/Python-Plugin)。'
- en: '**raster**: This plugin implements the `mapnik.Raster` datasource, which displays
    the contents of a raster image file in either TIFF or GeoTIFF format. While you
    can also read raster-format data using the `gdal` plugin, the `raster` plugin
    is faster when reading these types of files. To use this datasource in a map layer,
    you need to add a style to the map layer which includes a `RasterSymbolizer` to
    draw the contents of the image file onto the map. Documentation for the `raster`
    plugin can be found at [https://github.com/mapnik/mapnik/wiki/Raster](https://github.com/mapnik/mapnik/wiki/Raster).'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**栅格**：此插件实现了 `mapnik.Raster` 数据源，用于显示 TIFF 或 GeoTIFF 格式的栅格图像文件的内容。虽然您也可以使用
    `gdal` 插件读取栅格格式数据，但在读取这些类型的文件时，`raster` 插件速度更快。要在地图层中使用此数据源，您需要向地图层添加一个样式，该样式包括一个
    `RasterSymbolizer` 以在地图上绘制图像文件的内容。有关 `raster` 插件的文档，请参阅 [https://github.com/mapnik/mapnik/wiki/Raster](https://github.com/mapnik/mapnik/wiki/Raster)。'
- en: '**shape**: This plugin provides the `mapnik.Shapefile` datasource, which allows
    you to read shapefiles. While the `ogr` datasource is also able to read shapefiles,
    it is often more convenient to use the `mapnik.Shapefile` datasource. Documentation
    for the `shape` plugin can be found at [https://github.com/mapnik/mapnik/wiki/ShapeFile](https://github.com/mapnik/mapnik/wiki/ShapeFile).'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**形状**：此插件提供了 `mapnik.Shapefile` 数据源，允许您读取形状文件。虽然 `ogr` 数据源也能读取形状文件，但通常使用 `mapnik.Shapefile`
    数据源更方便。有关 `shape` 插件的文档，请参阅 [https://github.com/mapnik/mapnik/wiki/ShapeFile](https://github.com/mapnik/mapnik/wiki/ShapeFile)。'
- en: '**sqlite**: This plugin provides the `mapnik.SQLite` datasource. This datasource
    reads spatial data from an SQLite database. The database can either be an ordinary
    SQLite database holding geometry data in WKB format, or a spatially-enabled database
    using the Spatialite database extension. Documentation for the `sqlite` plugin
    can be found at [https://github.com/mapnik/mapnik/wiki/SQLite](https://github.com/mapnik/mapnik/wiki/SQLite).'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**sqlite**：此插件提供了 `mapnik.SQLite` 数据源。此数据源从 SQLite 数据库读取空间数据。数据库可以是包含 WKB 格式几何数据的普通
    SQLite 数据库，也可以是使用 Spatialite 数据库扩展的空间数据库。有关 `sqlite` 插件的文档，请参阅 [https://github.com/mapnik/mapnik/wiki/SQLite](https://github.com/mapnik/mapnik/wiki/SQLite)。'
- en: Symbolizers
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 符号化器
- en: Symbolizers do the actual work of drawing a feature onto the map. Multiple symbolizers
    are often used to draw a single feature—we saw this earlier when we used a `PolygonSymbolizer`
    to draw the interior of a polygon together with a `LineSymbolizer` to draw the
    polygon's outline.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 符号化器负责在地图上绘制特征。通常使用多个符号化器来绘制单个特征——我们之前在同时使用 `PolygonSymbolizer` 绘制多边形内部和 `LineSymbolizer`
    绘制多边形轮廓时看到了这一点。
- en: There are many different types of symbolizers available within Mapnik, and many
    of the symbolizers have complex options associated with them. Rather than exhaustively
    listing all the symbolizers and their various options, we will instead just look
    at some of the more common types of symbolizers and how they can be used.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Mapnik 内部有许多不同类型的符号化器可用，许多符号化器都与复杂的选项相关联。我们不会详尽地列出所有符号化器和它们的选项，而是仅查看一些更常见的符号化器类型及其使用方法。
- en: PointSymbolizer
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 点符号化
- en: 'The `PointSymbolizer` class is used to draw an image centered over a Point
    geometry. By default, each point is displayed as a 4 x 4 pixel black square:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`PointSymbolizer` 类用于在点几何上绘制图像。默认情况下，每个点都显示为一个 4 x 4 像素的黑色方块：'
- en: '![PointSymbolizer](img/4102_04_05.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![点符号化](img/4102_04_05.jpg)'
- en: 'To use a different image, you have to create a `mapnik.PathExpression` object
    to represent the path to the desired image file, and then pass that to the `PointSymbolizer`
    object when you instantiate it:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用不同的图像，您必须创建一个 `mapnik.PathExpression` 对象来表示所需图像文件的路径，然后在实例化时将其传递给 `PointSymbolizer`
    对象：
- en: '[PRE11]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![PointSymbolizer](img/4102_04_06.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![点符号化](img/4102_04_06.jpg)'
- en: 'Note that `PointSymbolizer` draws the image centered on the desired point.
    To use a drop-pin image as shown in the preceding example, you will need to add
    extra transparent whitespace so that the tip of the pin is in the middle of the
    image, like this:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`PointSymbolizer` 在期望的点周围绘制图像。要使用前面示例中显示的推针图像，您需要添加额外的透明空白区域，以便推针的尖端位于图像的中间，如下所示：
- en: '![PointSymbolizer](img/4102_04_07.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![点符号化](img/4102_04_07.jpg)'
- en: You can control the opacity of the drawn image by setting the symbolizer's `opacity`
    attribute. You can also control whether labels will be drawn on top of the image
    by setting the `allow_overlap` attribute to `True`. Finally, you can apply an
    SVG transformation to the image by setting the `transform` attribute to a string
    containing a standard SVG transformation expression, for example `point_symbol.transform
    = "rotate(45)"`.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过设置符号化的 `opacity` 属性来控制绘制图像的不透明度。你还可以通过设置 `allow_overlap` 属性为 `True` 来控制是否在图像上绘制标签。最后，你可以通过将
    `transform` 属性设置为包含标准 SVG 变换表达式的字符串来对图像应用 SVG 变换，例如 `point_symbol.transform =
    "rotate(45)"`。
- en: Documentation for the PointSymbolizer can be found at [https://github.com/mapnik/mapnik/wiki/PointSymbolizer](https://github.com/mapnik/mapnik/wiki/PointSymbolizer).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: PointSymbolizer 的文档可以在 [https://github.com/mapnik/mapnik/wiki/PointSymbolizer](https://github.com/mapnik/mapnik/wiki/PointSymbolizer)
    找到。
- en: LineSymbolizer
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: LineSymbolizer
- en: 'A `mapnik.LineSymbolizer` is used to draw LineString geometries and the outlines
    of Polygon geometries. When you create a new LineSymbolizer, you would typically
    configure it using two parameters: the color to use to draw the line as a `mapnik.Color`
    object, and the width of the line, measured in pixels. For example:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`mapnik.LineSymbolizer` 用于绘制 LineString 几何形状和 Polygon 几何形状的轮廓。当你创建一个新的 LineSymbolizer
    时，通常会使用两个参数来配置它：用于绘制线的颜色，作为一个 `mapnik.Color` 对象，以及线的宽度，以像素为单位。例如：'
- en: '[PRE12]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Notice that you can use fractional line widths; because Mapnik uses anti-aliasing,
    a line narrower than 1 pixel will often look better than a line with an integer
    width if you are drawing many lines close together.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，你可以使用分数线宽；由于 Mapnik 使用抗锯齿，如果你在绘制很多紧密排列的线时，宽度小于 1 像素的线通常比整数宽度的线看起来更好。
- en: In addition to the color and the width, you can also make the line semi-transparent
    by setting the `opacity` attribute. This should be set to a number between 0.0
    and 1.0, where 0.0 means the line will be completely transparent and 1.0 means
    the line will be completely opaque.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 除了颜色和宽度之外，你还可以通过设置 `opacity` 属性使线半透明。这应该设置为介于 0.0 和 1.0 之间的数字，其中 0.0 表示线将完全透明，1.0
    表示线将完全不透明。
- en: 'You can also use the `stroke` attribute to get access to (or replace) the stroke
    object used by the line symbolizer. The stroke object, an instance of `mapnik.Stroke`,
    can be used for more complicated visual effects. For example, you can create a
    dashed line effect by calling the stroke''s `add_dash()` method:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用 `stroke` 属性来访问（或替换）由线符号化器使用的线对象。线对象是一个 `mapnik.Stroke` 的实例，可以用于更复杂的视觉效果。例如，你可以通过调用线的
    `add_dash()` 方法来创建虚线效果：
- en: '[PRE13]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Both numbers are measured in pixels; the first number is the length of the dash
    segment, while the second is the length of the gap between dashes.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个数字都是以像素为单位的；第一个数字是虚线段的长度，而第二个数字是虚线之间的间隙长度。
- en: Tip
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Note that you can create alternating dash patterns by calling `add_dash()` more
    than once.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，你可以通过多次调用 `add_dash()` 来创建交替的虚线模式。
- en: 'You can also set the stroke''s `line_cap` attribute to control how the ends
    of the line should be drawn, and the stroke''s `line_join` attribute to control
    how the joins between the individual line segments are drawn whenever the LineString
    changes direction. The `line_cap` attribute can be set to one of the following
    values:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过设置 `stroke` 的 `line_cap` 属性来控制线端应该如何绘制，以及通过设置 `stroke` 的 `line_join` 属性来控制当
    LineString 改变方向时，各个线段之间的连接应该如何绘制。`line_cap` 属性可以设置为以下值之一：
- en: '[PRE14]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The `line_join` attribute can be set to one of the following:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_join` 属性可以设置为以下值之一：'
- en: '[PRE15]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Documentation for the `LineSymbolizer` class can be found at [https://github.com/mapnik/mapnik/wiki/LineSymbolizer](https://github.com/mapnik/mapnik/wiki/LineSymbolizer).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`LineSymbolizer` 类的文档可以在 [https://github.com/mapnik/mapnik/wiki/LineSymbolizer](https://github.com/mapnik/mapnik/wiki/LineSymbolizer)
    找到。'
- en: PolygonSymbolizer
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PolygonSymbolizer
- en: 'The `mapnik.PolygonSymbolizer` class is used to fill the interior of a Polygon
    geometry with a given color. When you create a new PolygonSymbolizer, you would
    typically pass it a single parameter: the `mapnik.Color` object to use to fill
    the polygon. You can also change the opacity of the symbolizer by setting the
    `fill_opacity` attribute, for example:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`mapnik.PolygonSymbolizer` 类用于用给定的颜色填充 Polygon 几何形状的内部。当你创建一个新的 PolygonSymbolizer
    时，通常会传递给它一个参数：用于填充多边形的 `mapnik.Color` 对象。你也可以通过设置 `fill_opacity` 属性来改变符号化的不透明度，例如：'
- en: '[PRE16]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Once again, the opacity is measured from 0.0 (completely transparent) to 1.0
    (completely opaque).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 一次又一次，不透明度是从0.0（完全透明）到1.0（完全不透明）测量的。
- en: 'There is one other PolygonSymbolizer attribute which you might find useful:
    `gamma`. The `gamma` value can be set to a number between 0.0 and 1.0\. The `gamma`
    value controls the amount of anti-aliasing used to draw the edge of the polygon;
    with the default `gamma` value of `1.0`, the edges of the polygon will be fully
    anti-aliased. While this is usually a good thing, if you try to draw adjacent
    polygons with the same color, the antialiasing will cause the edges of the polygons
    to be visible rather than combining them into a single larger area. By turning
    down the gamma slightly (for example, `fill_symbol.gamma = 0.6`), the edges between
    adjacent polygons will disappear.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 除了PolygonSymbolizer属性外，还有一个你可能觉得有用的属性：`gamma`。`gamma`值可以设置为0.0到1.0之间的数字。`gamma`值控制绘制多边形边缘时使用的反走样量；默认的`gamma`值为`1.0`，多边形的边缘将完全反走样。虽然这通常是好事，但如果你尝试用相同的颜色绘制相邻的多边形，反走样会导致多边形的边缘可见，而不是将它们组合成更大的单一区域。通过稍微降低gamma值（例如，`fill_symbol.gamma
    = 0.6`），相邻多边形之间的边缘将消失。
- en: Documentation for the `PolygonSymbolizer` class can be found at [https://github.com/mapnik/mapnik/wiki/PolygonSymbolizer](https://github.com/mapnik/mapnik/wiki/PolygonSymbolizer).
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`PolygonSymbolizer`类的文档可以在[https://github.com/mapnik/mapnik/wiki/PolygonSymbolizer](https://github.com/mapnik/mapnik/wiki/PolygonSymbolizer)找到。'
- en: TextSymbolizer
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文本符号化
- en: 'The `TextSymbolizer` class is used to draw textual labels onto a map. This
    type of symbolizer can be used for point, LineString, and Polygon geometries.
    The following example shows how a TextSymbolizer can be used:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`TextSymbolizer`类用于在地图上绘制文本标签。此类符号化器可用于点、LineString和Polygon几何形状。以下示例显示了如何使用TextSymbolizer：'
- en: '[PRE17]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'As you can see, four parameters are typically passed to the TextSymbolizer''s
    initializer:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，通常将四个参数传递给TextSymbolizer的初始化器：
- en: A `mapnik.Expression` object defining the text to be displayed. In this case,
    the text to be displayed will come from the `label` attribute in the datasource.
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义要显示的文本的`mapnik.Expression`对象。在这种情况下，要显示的文本将来自数据源中的`label`属性。
- en: 'The name of the font to use for drawing the text. To see what fonts are available,
    type the following into the Python command line:'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于绘制文本的字体名称。要查看可用的字体，请在Python命令行中输入以下内容：
- en: '[PRE18]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The font size, measured in pixels.
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字体大小，以像素为单位。
- en: The color to use to draw the text.
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于绘制文本的颜色。
- en: 'By default, the text will be drawn in the center of the geometry; for example:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，文本将在几何形状的中心绘制；例如：
- en: '![TextSymbolizer](img/4102_04_08.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![文本符号化](img/4102_04_08.jpg)'
- en: 'This positioning of the label is called **point** **placement**. The TextSymbolizer
    allows you to change this to use what is called **line** **placement**, where
    the label will be drawn along the lines:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这种标签定位被称为**点** **放置**。TextSymbolizer允许你将其更改为使用所谓的**线** **放置**，其中标签将沿着线条绘制：
- en: '[PRE19]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '![TextSymbolizer](img/4102_04_09.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![文本符号化](img/4102_04_09.jpg)'
- en: As you can see, this causes the label to be drawn along the length of a LineString
    geometry, or along the perimeter of a Polygon. The text won't be drawn at all
    for a Point geometry, since there are no lines within a point.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这会导致标签沿着LineString几何形状的长度或多边形的周长绘制。对于点几何形状，不会绘制文本，因为点内没有线条。
- en: 'The TextSymbolizer will normally just draw the label once, but you can tell
    the symbolizer to repeat the label if you wish by specifying a pixel gap to use
    between each label:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: TextSymbolizer通常会只绘制一次标签，但你可以通过指定每个标签之间的像素间隔来告诉符号化器重复标签：
- en: '[PRE20]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '![TextSymbolizer](img/4102_04_10.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![文本符号化](img/4102_04_10.jpg)'
- en: 'By default, Mapnik is smart enough to stop labels from overlapping each other.
    If possible, it moves the label slightly to avoid an overlap, and then hides the
    label completely if it would still overlap. For example:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Mapnik足够智能，可以阻止标签相互重叠。如果可能，它会稍微移动标签以避免重叠，如果仍然会重叠，则会完全隐藏标签。例如：
- en: '![TextSymbolizer](img/4102_04_11.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![文本符号化](img/4102_04_11.jpg)'
- en: 'You can change this by setting the `allow_overlap` attribute:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过设置`allow_overlap`属性来更改此设置：
- en: '[PRE21]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '![TextSymbolizer](img/4102_04_12.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![文本符号化](img/4102_04_12.jpg)'
- en: Finally, you can set a halo effect to draw a lighter-colored border around the
    text so that it is visible even against a dark background. For example,
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你可以设置一个光环效果，在文本周围绘制较浅颜色的边框，使其即使在深色背景上也能可见。例如，
- en: '[PRE22]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '![TextSymbolizer](img/4102_04_13.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![文本符号化](img/4102_04_13.jpg)'
- en: There are many more labeling options, all of which are described at length in
    the documentation for the `TextSymbolizer` class. This can be found at [https://github.com/mapnik/mapnik/wiki/TextSymbolizer](https://github.com/mapnik/mapnik/wiki/TextSymbolizer).
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多其他标签选项，所有这些都在`TextSymbolizer`类的文档中详细描述。这可以在[https://github.com/mapnik/mapnik/wiki/TextSymbolizer](https://github.com/mapnik/mapnik/wiki/TextSymbolizer)找到。
- en: RasterSymbolizer
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: RasterSymbolizer
- en: 'The `RasterSymbolizer` class is used to draw raster-format data onto a map.
    This type of symbolizer is typically used in conjunction with a Raster or GDAL
    datasource. To create a new raster symbolizer, you instantiate a new `mapnik.RasterSymbolizer`
    object:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`RasterSymbolizer`类用于在地图上绘制栅格格式数据。这种符号化类型通常与栅格或GDAL数据源一起使用。要创建一个新的栅格符号化，你需要实例化一个新的`mapnik.RasterSymbolizer`对象：'
- en: '[PRE23]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The raster symbolizer will automatically draw any raster-format data provided
    by the map layer''s datasource. This is often used to draw a basemap onto which
    the vector data is to be displayed; for example:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 栅格符号化将自动绘制地图层数据源提供的任何栅格格式数据。这通常用于绘制基图，在基图上显示矢量数据；例如：
- en: '![RasterSymbolizer](img/4102_04_14.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![RasterSymbolizer](img/4102_04_14.jpg)'
- en: While there are some advanced options to control the way the raster data is
    displayed, in most cases, the only option you might be interested in is the `opacity`
    attribute. As usual, this sets the opacity for the displayed image, allowing you
    to layer semi-transparent raster images one on top of the other.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然有一些高级选项可以控制栅格数据的显示方式，但在大多数情况下，你可能感兴趣的唯一选项是`opacity`属性。像往常一样，这设置了显示图像的不透明度，允许你将半透明的栅格图像一层层叠加。
- en: Documentation for the `RasterSymbolizer` can be found at [https://github.com/mapnik/mapnik/wiki/RasterSymbolizer](https://github.com/mapnik/mapnik/wiki/RasterSymbolizer).
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`RasterSymbolizer`的文档可以在[https://github.com/mapnik/mapnik/wiki/RasterSymbolizer](https://github.com/mapnik/mapnik/wiki/RasterSymbolizer)找到。'
- en: Map rendering
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 地图渲染
- en: 'We have now examined in detail many of the building blocks for generating maps:
    layers, datasources, styles, rules, filters, and symbolizers. Using what you have
    learned, you should be able to build and style your own maps. But what can you
    do with a `mapnik.Map` object once you have set one up?'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经详细检查了生成地图的许多构建块：图层、数据源、样式、规则、过滤器以及符号化。使用你所学的知识，你应该能够构建和设计你自己的地图。但是，一旦设置了`mapnik.Map`对象，你能用它做什么呢？
- en: 'In the example program we examined at the start of this chapter, we used the
    `mapnik.render_to_file()` function to save the generated map into an image file.
    When rendering the map, you first have to set the map''s **extent**—that is, the
    rectangle that defines the visible portion of the map:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章开头我们检查的示例程序中，我们使用了`mapnik.render_to_file()`函数将生成的地图保存到图像文件中。在渲染地图时，你首先必须设置地图的**范围**——即定义地图可见部分的矩形：
- en: '![Map rendering](img/4102_04_15.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![地图渲染](img/4102_04_15.jpg)'
- en: Only the visible extent of the map will be included in the generated image;
    everything else will be ignored.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 只有地图的可见范围将被包含在生成的图像中；其他所有内容都将被忽略。
- en: 'In our example program, we used `map.zoom_all()` to set the visible extent
    of the map to include all the features in all the map layers. Of course, there
    are times when you only want to display part of the overall map. To do this, you
    can use the `map.zoomToBox()` method to set the visible extent of the map. For
    example:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例程序中，我们使用了`map.zoom_all()`来设置地图的可见范围，包括所有地图层中的所有要素。当然，有时你可能只想显示整体地图的一部分。为此，你可以使用`map.zoomToBox()`方法设置地图的可见范围。例如：
- en: '[PRE24]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The four numbers represent the minimum longitude, the minimum latitude, the
    maximum longitude, and the maximum latitude, respectively. If you execute this
    statement using these latitude and longitude values, the visible extent of the
    map will cover approximately the American state of California.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这四个数字分别代表最小经度、最小纬度、最大经度和最大纬度。如果你使用这些纬度和经度值执行此语句，地图的可见范围将覆盖大约美国的加利福尼亚州。
- en: Note that you aren't limited to only rendering a map once. If you want, you
    can create multiple images from a single `mapnik.Map` object, changing the visible
    extent and then calling `mapnik.render_to_file()` to save the newly-visible portion
    of the map to a different file each time.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，你不仅限于只渲染一次地图。如果你想，你可以从单个`mapnik.Map`对象创建多个图像，改变可见范围，然后每次调用`mapnik.render_to_file()`将新可见的地图部分保存到不同的文件中。
- en: A working example
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个工作示例
- en: Let's put together everything that we have learned to write a program that can
    display the contents of a shapefile. This is quite a useful program to have, as
    you can manipulate or generate some spatial data, save the results into a shapefile,
    and then run this program to display the shapefile's contents as a generated map
    image.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将我们所学的所有内容结合起来，编写一个可以显示 shapefile 内容的程序。这是一个非常有用的程序，因为你可以操作或生成一些空间数据，将结果保存到
    shapefile 中，然后运行此程序以显示生成的地图图像。
- en: 'We''ll call our program `shapeToMap.py`. Create this file, and start entering
    the following Python code into it:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将我们的程序命名为 `shapeToMap.py`。创建此文件，并将以下 Python 代码开始输入到其中：
- en: '[PRE25]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Note that the various constants we have defined here will be used to configure
    the map that we are going to generate:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们在这里定义的各种常量将被用于配置我们将要生成的地图：
- en: '`LAYERS`: This is a list of the map layers to display on the map. Each item
    in this list should be a dictionary with all or some of following entries:'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LAYERS`: 这是一个要在地图上显示的地图层列表。列表中的每个项目应是一个字典，包含以下条目之一或全部：'
- en: '`shapefile`: The name and path of the desired shapefile'
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`shapefile`: 目标 shapefile 的名称和路径'
- en: '`lineColor`: The hexadecimal color code to use to draw the feature''s exterior,
    if any'
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lineColor`: 用于绘制特征外部的十六进制颜色代码（如果有的话）'
- en: '`lineWidth`: The width of the line to use to draw the feature''s exterior,
    measured in pixels'
  id: totrans-163
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lineWidth`: 用于绘制特征外部的线条宽度，以像素为单位'
- en: '`fillColor`: The hexadecimal color code to use to draw the feature''s interior,
    if any'
  id: totrans-164
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fillColor`: 用于绘制特征内部的十六进制颜色代码（如果有的话）'
- en: '`labelField`: The name of the attribute in the source file to use to label
    each feature, if any'
  id: totrans-165
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`labelField`: 如果有的话，用于标记每个特征的源文件中的属性名称'
- en: '`labelSize`: The font size to use when labeling the features, measured in pixels'
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`labelSize`: 标记特征时使用的字体大小，以像素为单位'
- en: '`labelColor`: The hexadecimal color code to use to draw the label'
  id: totrans-167
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`labelColor`: 用于绘制标签的十六进制颜色代码'
- en: '`BACKGROUND_COLOR`: This is the hexadecimal color code to use to draw the background
    of the map.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BACKGROUND_COLOR`: 这是用于绘制地图背景的十六进制颜色代码。'
- en: '`BOUNDS_MIN_LAT`, `BOUNDS_MIN_LONG`, `BOUNDS_MAX_LAT`, and `BOUNDS_MAX_LONG`:
    These define the visible extent of the map you want to generate.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BOUNDS_MIN_LAT`, `BOUNDS_MIN_LONG`, `BOUNDS_MAX_LAT`, 和 `BOUNDS_MAX_LONG`:
    这些定义了你想要生成的地图的可视范围。'
- en: '`MAX_WIDTH` and `MAX_HEIGHT`: These specify the maximum size of the generated
    map image. Note that the generated image may actually be smaller than these values,
    depending on the aspect ratio of the bounding rectangle.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MAX_WIDTH` 和 `MAX_HEIGHT`: 这些指定生成的地图图像的最大尺寸。请注意，生成的图像实际上可能小于这些值，具体取决于边界矩形的纵横比。'
- en: Whenever you want to generate a map using this program, you will need to edit
    these constants to suit your requirements.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 每次你想使用此程序生成地图时，你都需要编辑这些常量以适应你的需求。
- en: 'We next need to calculate the height and width to use for our map. Because
    the visible extent can be any shape, we calculate the actual width and height
    to be as large as possible while matching the aspect ratio of the visible extent.
    We do this by first calculating the map''s width and height so that the width
    is the maximum allowable width, and the height is whatever is needed to match
    the aspect ratio of the visible extent. To do this, add the following code to
    the end of your program:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来需要计算用于地图的高度和宽度。因为可视范围可以是任何形状，我们计算实际宽度和高度尽可能大，同时匹配可视范围的纵横比。我们通过首先计算地图的宽度和高度来实现这一点，使宽度为最大允许宽度，高度为匹配可视范围纵横比所需的任何值。为此，请将以下代码添加到程序末尾：
- en: '[PRE26]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We next see if the calculated height is too big, and if so, scale down the
    map so that the height is no bigger than the allowable maximum:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来查看计算出的高度是否太大，如果是，则缩小地图，使高度不超过允许的最大值：
- en: '[PRE27]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This ensures that the generated map is as large as possible, while ensuring
    the map has the same aspect ratio as the visible extent.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 这确保生成的地图尽可能大，同时确保地图具有与可视范围相同的纵横比。
- en: 'Now that we know how big our map will be, we can create and initialize our
    `mapnik.Map` object:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了我们的地图有多大，我们可以创建并初始化我们的 `mapnik.Map` 对象：
- en: '[PRE28]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'We next need to define our various map styles, using a single style and rule
    for each of our map layers. Note that we use the various dictionary entries from
    our `LAYERS` list to define a map style for each layer:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来需要定义我们各种地图样式，为每个地图层使用单个样式和规则。注意，我们使用 `LAYERS` 列表中的各种字典条目来为每个层定义地图样式：
- en: '[PRE29]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'We now need to define the various layers for our map:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在需要定义我们地图的各种层：
- en: '[PRE30]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Finally, we render the map image:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们渲染地图图像：
- en: '[PRE31]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Since you have studied the various classes and methods in the *Learning Mapnik*
    section of this chapter, you should hopefully be able to understand what all this
    code does. If anything is unclear, please go back and review the relevant part
    of that section. A complete copy of this program can be downloaded as part of
    the source code available for this chapter.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你已经学习了本章“学习Mapnik”部分的各种类和方法，你应该希望能够理解所有这些代码的作用。如果有什么不清楚的地方，请返回并复习该部分的相应部分。本章节的源代码中可以下载此程序的完整副本。
- en: 'Using the various constants we defined earlier, you should be able to use this
    program to draw the contents of the World Borders Dataset. Simply place the `TM_WORLD_BORDERS-0.3`
    directory into the same folder as the `shapeToMap.py` program, and try running
    the program. All going well, the program should generate a `map.png` image, which
    displays the contents of the World Borders Dataset for Western and Central Europe:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们之前定义的各种常数，你应该能够使用这个程序来绘制世界边界数据集的内容。只需将`TM_WORLD_BORDERS-0.3`目录放置在与`shapeToMap.py`程序相同的文件夹中，然后尝试运行程序。如果一切顺利，程序应该生成一个`map.png`图像，该图像显示西欧和中欧的世界边界数据集内容：
- en: '![A working example](img/4102_04_16.jpg)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![一个工作示例](img/4102_04_16.jpg)'
- en: 'If you look closely at this image, you''ll notice that some of the labels are
    hidden behind other polygons. This is because we have told our program to draw
    the polygons and their labels in the same map layer. To fix this, replace your
    `LAYERS` definition with the following:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仔细观察这张图片，你会注意到一些标签被其他多边形遮挡。这是因为我们告诉程序在同一地图层中绘制多边形及其标签。为了解决这个问题，将你的`LAYERS`定义替换为以下内容：
- en: '[PRE32]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: As you can see, we're now displaying the shapefile in two separate map layers,
    one to draw the country polygons, and a second map layer to draw all the labels
    in front of the polygons. If you run your program again, you'll see that the labeling
    problem has been fixed.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们现在正在两个独立的地图层中显示shapefile，一个用于绘制国家多边形，另一个地图层用于在多边形前面绘制所有标签。如果你再次运行程序，你会看到标签问题已经得到解决。
- en: This should give you an idea of how useful the `shapeToMap.py` program can be.
    Simply by changing the constants at the top of the program, you can quickly view
    the contents of any shapefile. In fact, many of the illustrations in this book
    were generated using a modified version of this program.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会让你了解`shapeToMap.py`程序有多有用。只需更改程序顶部的常数，你就可以快速查看任何shapefile的内容。实际上，本书中的许多插图都是使用此程序的修改版本生成的。
- en: Next steps
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下一步
- en: 'While the `shapeToMap.py` program has been kept deliberately simple to make
    it easier to understand, there is a lot that can be done to improve this program
    and make it more useful. You might like to try challenging yourself by implementing
    the following new features:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`shapeToMap.py`程序被故意保持简单，以便更容易理解，但还有很多可以做的事情来改进这个程序并使其更有用。你可能喜欢通过实现以下新功能来挑战自己：
- en: Add an optional `labelHalo` entry to each map layer, which is used to draw a
    halo around the label text.
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向每个地图层添加一个可选的`labelHalo`条目，用于在标签文本周围绘制光环。
- en: Add a `labelPlacement` entry to the map layer, to make it easy to control the
    label placement options.
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向地图层添加一个`labelPlacement`条目，以便轻松控制标签放置选项。
- en: Add a `labelAllowOverlap` entry to the map layer, which controls whether or
    not the labels are allowed to overlap.
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向地图层添加一个`labelAllowOverlap`条目，用于控制标签是否允许重叠。
- en: Add a `filter` entry to the map layer, which is used to build a `mapnik.Filter()`
    expression to limit the set of features displayed within the map layer.
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向地图层添加一个`filter`条目，用于构建一个`mapnik.Filter()`表达式，以限制在地图层中显示的特征集。
- en: Add an option to dynamically calculate the visible extent of the map based on
    the bounding box for each feature. This would allow you to generate the map without
    having to calculate the bounds beforehand.
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加一个选项，根据每个特征的边界框动态计算地图的可视范围。这将允许你在事先计算边界之前生成地图。
- en: Add a call to `os.system("open map.png")` (for Mac OS X) or `os.startfile("map.png")`
    (for MS Windows) to automatically display the image once it has been generated.
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加一个调用`os.system("open map.png")`（适用于Mac OS X）或`os.startfile("map.png")`（适用于MS
    Windows）的调用，以便在生成图像后自动显示该图像。
- en: Add support for shapefiles which use a projection other than the default EPSG
    4326.
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加对使用除默认EPSG 4326以外的投影的shapefile的支持。
- en: Load the configuration constants from a separate module, so you don't have to
    edit the Python source file every time you want to change the data to be displayed.
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从单独的模块中加载配置常量，这样你就不必每次想要更改要显示的数据时都编辑Python源文件。
- en: A more sophisticated version of `shapeToMap.py` called `generateMap.py` has
    been provided as part of the source code for this chapter. The `generateMap.py`
    program implements all of the preceding suggestions.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 作为本章源代码的一部分，提供了一个名为`generateMap.py`的`shapeToMap.py`的更复杂版本。`generateMap.py`程序实现了前面提到的所有建议。
- en: Summary
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered the Mapnik map-generation library and how to use
    it within a Python program to create great-looking maps. You installed Mapnik,
    looked at a simple example of how it could be used, and then began to learn more
    about the process of constructing and styling a map.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了Mapnik地图生成库以及如何在Python程序中使用它来创建外观精美的地图。你安装了Mapnik，查看了一个简单的示例，了解它如何使用，然后开始学习构建和样式化地图的过程。
- en: We then examined Mapnik in more detail, looking at the various types of datasources
    which you can use to load spatial data into a map layer. We also examined the
    various symbolizers which can be used to display spatial features, how the visible
    extent is used to control the portion of the map to be displayed, and how to render
    a map as an image file. We then created a useful Python program called `shapeToMap.py`,
    which can be used to generate a map out of any spatial data stored in shapefiles,
    and finally looked at some of the ways in which `shapeToMap.py` could be improved
    to make it even more useful.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 我们随后对Mapnik进行了更详细的考察，研究了你可以用来将空间数据加载到地图层的各种数据源类型。我们还考察了可以用来显示空间特征的符号化工具，如何使用可见范围来控制要显示的地图部分，以及如何将地图渲染为图像文件。然后我们创建了一个有用的Python程序，名为`shapeToMap.py`，它可以用来从存储在shapefiles中的任何空间数据生成地图，并最终探讨了如何改进`shapeToMap.py`使其更加有用。
- en: In the next chapter, we will look at various tools and techniques for analyzing
    spatial data, including how to use Python to solve a variety of interesting geospatial
    problems.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨分析空间数据的各种工具和技术，包括如何使用Python解决各种有趣的地理空间问题。
