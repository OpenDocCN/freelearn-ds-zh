- en: Chapter 8. Introduction to ArcPy.Mapping
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 8 章。ArcPy.Mapping 简介
- en: 'Creating maps is an art, one that can be learned through years of dedicated
    study of cartography. The visual display of information is both exciting and difficult,
    and can be a rewarding part of the daily workflow of geospatial professionals.
    Once the basics have been learned and mastered, cartographic output becomes a
    constant battle to produce more maps at a faster pace. ArcPy, once again, has
    a powerful solution: the `arcpy.mapping` module.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 制作地图是一种艺术，需要通过多年的专注研究地图学才能掌握。信息的视觉展示既令人兴奋又具有挑战性，可以成为地理空间专业人士日常工作流程中的一项有价值的部分。一旦掌握了基础知识，地图学输出就变成了一个持续不断的战斗，以更快的速度制作出更多的地图。ArcPy
    再次提供了一个强大的解决方案：`arcpy.mapping` 模块。
- en: By allowing for the automatic manipulation of all map components, including
    the map window, the layers, the legend, and all text elements, `arcpy.mapping`
    makes creating, modifying, and outputting multiple maps fast and simple. Map book
    creation – another important skill for geospatial professionals, is also made
    easy using the module. In this chapter we will discuss some basic functionalities
    available through `arcpy.mapping` and use it to output a map book of bus stops
    and their surrounding census blocks.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 通过允许自动操作所有地图组件，包括地图窗口、图层、图例以及所有文本元素，`arcpy.mapping` 使得创建、修改和输出多张地图变得快速简单。地图集创建——对于地理空间专业人士来说的另一项重要技能，也通过该模块变得容易。在本章中，我们将讨论通过
    `arcpy.mapping` 可用的基本功能，并使用它来输出公交车站及其周边人口普查区的地图集。
- en: 'This chapter will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Inspecting and updating Map Document (MXD) layer data sources
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查和更新地图文档（MXD）图层数据源
- en: Exporting MXDs to PDF or other image formats
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 MXDs 导出为 PDF 或其他图像格式
- en: Adjusting map document elements
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调整地图文档元素
- en: Using ArcPy with map documents
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 ArcPy 与地图文档
- en: Recognizing the limitations of the previous `arcgisscripting` module, ESRI designed
    the ArcPy module to not only work with data but also included the `arcpy.mapping`
    module to allow direct interaction with map documents (MXDs) and the layers they
    contain. This new module opened up a multitude of map automation possibilities.
    A script might aid in identifying broken layer links, update the data source of
    these layers, and apply new color schemes to layers. Another script might use
    a map template and create a set of maps, one from each feature class in a feature
    dataset. A third script could create a map book from an MXD, moving from cell
    to cell in a grid layer to output the pages of the book, or even calculating the
    coordinates on the fly. Dynamically created maps, based on data from a fresh analysis,
    can be outputted at the same time the data is produced. `Arcpy.mapping` moves
    the ArcPy module from helpful to instrumental, in any geospatial workflow.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 认识到先前 `arcgisscripting` 模块的局限性，ESRI 设计了 ArcPy 模块，不仅能够处理数据，还包含了 `arcpy.mapping`
    模块，以便直接与地图文档（MXDs）及其包含的图层进行交互。这个新模块为地图自动化提供了多种可能性。一个脚本可能有助于识别损坏的图层链接，更新这些图层的数据源，并应用新的配色方案到图层上。另一个脚本可能使用地图模板创建一系列地图，每个地图对应于一个要素数据集中的要素类。第三个脚本可以创建一个地图集，从
    MXD 中移动到网格图层中的每个单元格，以输出书籍的页面，甚至可以实时计算坐标。基于最新分析数据动态创建的地图可以在数据生成的同时输出。`Arcpy.mapping`
    将 ArcPy 模块从有用的工具转变为任何地理空间工作流程中的工具。
- en: To investigate the utility of the `arcpy.mapping` module, we'll need the help
    of an MXD template. I've prepared a map package containing the data and MXD that
    we will use for the exercises in this chapter. It includes the data from our San
    Francisco bus stop's analysis, which we will continue and extend to include maps.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了调查 `arcpy.mapping` 模块的功效，我们需要一个 MXD 模板的帮助。我已经准备了一个包含数据和 MXD 的地图包，我们将用它来完成本章的练习。它包括我们旧金山公交车站分析的数据，我们将继续扩展它以包括地图。
- en: Inspecting and replacing layer sources
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查和替换图层源
- en: The first and most important `arcpy.mapping` module use is to identify and fix
    the broken links between layers in a map document and their data sources. Layer
    symbology and GIS data storage are separated, meaning that layer data sources
    are often moved. `Arcpy.mapping` offers a quick solution, though imperfect.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`arcpy.mapping` 模块的第一种也是最重要的用途是识别和修复地图文档中图层与它们数据源之间的损坏链接。图层符号和 GIS 数据存储是分开的，这意味着图层数据源经常被移动。`Arcpy.mapping`
    提供了一个快速的解决方案，尽管并不完美。'
- en: This solution depends on a number of methods included in the `arcpy.mapping`
    module. First, we will need to identify the broken links, and then we will fix
    them. To identify the broken links we will use the `ListBrokenDataSources()` method
    included in `arcpy.mapping`.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 此解决方案依赖于 `arcpy.mapping` 模块中包含的多个方法。首先，我们需要识别损坏的链接，然后修复它们。为了识别损坏的链接，我们将使用 `arcpy.mapping`
    中包含的 `ListBrokenDataSources()` 方法。
- en: 'The `ListBrokenDataSources()` method requires an MXD path to be passed to the
    `MapDocument()` method of `arcpy.mapping`. Once the map document object has been
    created, it is passed to the `ListBrokenDataSources()` method, and a list will
    be generated containing layer objects, one for each layer with a broken link.
    The layer objects have a number of properties available to them. Using these properties,
    let''s print out the name and data source of each layer using the name and data
    source properties of each object:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`ListBrokenDataSources()` 方法需要将 MXD 路径传递给 `arcpy.mapping.MapDocument()` 方法。一旦创建地图文档对象，它就会被传递给
    `ListBrokenDataSources()` 方法，并生成一个包含图层对象列表，每个损坏链接的图层都有一个图层对象。图层对象有多个属性可供使用。使用这些属性，让我们使用每个对象的名称和数据源属性打印出每个图层的名称和数据源：'
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Fixing the broken links
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修复损坏的链接
- en: Now that we have identified the broken links, the next step is to fix them.
    In this case, it was revealed that the data sources should be in a folder called
    Data, but they are not contained within that folder. The script must then be stepped
    up to replace the data sources of each layer, so that they point at the actual
    location of the data source.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经识别出损坏的链接，下一步是修复它们。在这种情况下，发现数据源应该在名为 Data 的文件夹中，但它们并不包含在该文件夹内。然后脚本必须升级以替换每个图层的数据源，使它们指向实际的数据源位置。
- en: 'There are methods included in both layer objects and map document objects that
    can accomplish this next step. If all of the data sources for an MXD have been
    moved, it is better to use the MXD object and its methods to fix the sources.
    In the example MXD, the data sources have all been moved into a new folder called
    `NewData`, so we will employ the `findAndReplaceWorkspacePaths()` method to repair
    the links:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图层对象和地图文档对象中包含的方法可以完成此下一步。如果 MXD 的所有数据源都已移动，则最好使用 MXD 对象及其方法来修复数据源。在示例 MXD 中，数据源已全部移动到一个名为
    `NewData` 的新文件夹中，因此我们将使用 `findAndReplaceWorkspacePaths()` 方法来修复链接：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'As long as the data sources are still in the same format (such that shapefiles
    are still shapefiles or feature classes are still feature classes), the `findAndReplaceWorkspacePaths()`
    method will work. If the data source types have been changed (such that, shapefiles
    are imported into a file geodatabase), the `replaceWorkspaces()` method will have
    to be used instead as it requires workspace type as a parameter:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 只要数据源仍然以相同的格式存在（例如，形状文件仍然是形状文件或要素类仍然是要素类），`findAndReplaceWorkspacePaths()` 方法就会起作用。如果数据源类型已更改（例如，形状文件已导入到文件地理数据库中），则必须使用
    `replaceWorkspaces()` 方法代替，因为它需要一个工作空间类型作为参数：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Fixing the links of individual layers
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修复单个图层的链接
- en: 'If the individual layers do not share a data source, the layer objects will
    need to be adjusted using the `findAndReplaceWorkspacePath()` method available
    to layers. This method is similar to the method used previously, but it will only
    replace the data source of the layer object it is applied to instead of all of
    the layers. When combined with a dictionary, the layer data sources can be updated
    using the layer name property:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果各个图层不共享数据源，则需要使用图层对象可用的 `findAndReplaceWorkspacePath()` 方法进行调整。此方法与之前使用的方法类似，但它只会替换应用到的图层对象的数据源，而不是所有图层。当与字典结合使用时，可以通过图层名称属性更新图层数据源：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'These solutions work well for individual map documents and layers. They can
    also be extended to folders full of MXDs by using the `glob.glob()` method of
    the built-in `glob` module (which helps to generate a list of files that match
    a certain file extension) and the `os.path.join()` method of the `os` module:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这些解决方案适用于单个地图文档和图层。通过使用内置的 `glob` 模块的 `glob.glob()` 方法（它有助于生成匹配特定文件扩展名的文件列表）和
    `os` 模块的 `os.path.join()` 方法，也可以扩展到包含 MXD 文件的文件夹：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Exporting to PDF from an MXD
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从 MXD 导出为 PDF
- en: 'The next most important use of `arcpy.mapping` is to automatically export MXDs.
    The following code will highlight the export of PDFs, but note that the module
    also supports the export of JPEGs and other image formats. Using `arcpy.mapping`
    for this process is a joy, as the usual process of opening and exporting the MXDs
    involves a lot of waiting for ArcMap to start and the map to load, which can be
    a time sink:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`arcpy.mapping` 的下一个最重要的用途是自动导出 MXDs。以下代码将突出显示 PDF 的导出，但请注意，该模块还支持 JPEG 和其他图像格式的导出。使用
    `arcpy.mapping` 进行此过程是一种乐趣，因为通常打开和导出 MXDs 的过程涉及很多等待 ArcMap 启动和地图加载，这可能会浪费很多时间：'
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that the output folder must exist for this code to run correctly. While
    there are `os` module methods to check whether a path exists (`os.path.exists`)
    and to create a folder (`os.mkdir`), that is not included in this code snippet
    and the `arcpy.mapping.ExportToPDF()` method will throw an exception if the input
    or output paths do not exist.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，输出文件夹必须存在，此代码才能正确运行。虽然 `os` 模块有方法来检查路径是否存在（`os.path.exists`）和创建文件夹（`os.mkdir`），但这些方法不包括在此代码片段中，并且如果输入或输出路径不存在，`arcpy.mapping.ExportToPDF()`
    方法将抛出异常。
- en: This example code is very useful and can be converted into a function that would
    accept the folder path as a parameter. The function could then be added to a script
    tool, as discussed in the last chapter.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例代码非常有用，可以将其转换为接受文件夹路径作为参数的函数。然后，可以将该函数添加到脚本工具中，正如上一章所讨论的那样。
- en: Adjusting map document elements
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调整地图文档元素
- en: '`Arcpy.mapping` includes important methods that will facilitate the automation
    of map document manipulation. These include the ability to add new layers or turn
    layers on and off within MXDs, the ability to adjust the scale of the data frame
    or move a data frame to focus on a specific region, and the ability to adjust
    text components of the map (such as titles or subtitles). These methods will be
    addressed as we continue our bus stop analysis.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`Arcpy.mapping` 包含了一些重要的方法，这些方法将有助于地图文档操作的自动化。这些方法包括在 MXDs 中添加新图层或开启/关闭图层的能力，调整数据帧的比例或移动数据帧以聚焦特定区域的能力，以及调整地图文本组件（如标题或副标题）的能力。这些方法将在我们继续进行公交车站分析时进行讨论。'
- en: Open up the MXD called `MapAdjust.mxd`. This represents our base map document,
    with layers and elements that we will adjust to our needs. It contains layers
    that we have generated from our analysis, and the base layers that fill out the
    map. There are also a number of text elements that will be automatically replaced
    by the script to fit the specific needs of each map. However, it does not do a
    good job of representing the results of the analysis as the census blocks that
    intersect the bus stop buffers overlap, making it hard to interpret the cartography.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 打开名为 `MapAdjust.mxd` 的 MXD。这代表我们的基础地图文档，其中包含我们将调整以满足我们需求的图层和元素。它包含我们从分析中生成的图层和填充地图的基础图层。还有许多文本元素，脚本将自动替换以适应每个地图的具体需求。然而，它并不能很好地表示分析结果，因为与公交车站缓冲区相交的普查区重叠，使得地图解读变得困难。
- en: The script will replace the data source of the census block layer and the bus
    stop layer to make it possible to only produce one map for each bus stop, and
    the census blocks that are intersected with each buffer surrounding the stops.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 该脚本将替换人口普查区图层和公交车站图层的源数据，以便只为每个公交车站制作一张地图，以及与每个公交车站周围缓冲区相交的普查区。
- en: '![Adjusting map document elements](img/8662OS_08_01.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![调整地图文档元素](img/8662OS_08_01.jpg)'
- en: 'To make this possible, we will have to create two empty feature classes: one,
    with all of the attributes of the census blocks, and the other, with the attributes
    of the bus stops. This will allow the data source to be replaced with the data
    produced by the analysis.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现这一点，我们需要创建两个空的特征类：一个包含所有人口普查区的属性，另一个包含公交车站的属性。这将允许数据源被分析产生的数据所替换。
- en: Open up the `SanFrancisco.gdb` File Geodatabase and right click on the `Chapter8Results`
    feature dataset. Select **New** from the drop-down menu and then select **Feature
    Class. Name** the first feature class `SelectedCensusBlocks` and make it a polygon.
    Select the **defaults keyword** on the next menu, and then on the following menu,
    push the **import** button. Select the **CensusBlocks** feature class from the
    SanFrancisco feature dataset; this will load the fields into the new feature class.
    Do the same thing for a second feature class called `SelectedBusStops`, but make
    sure that it is a point geometry type and import the schema from the `BusStops`
    feature class. Repeat the same process for a third feature class called `SelectedStopBuffers`,
    but make sure that it is a point geometry type and import the schema from the
    `Buffers` feature class.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`SanFrancisco.gdb`文件地理数据库，在`Chapter8Results`要素数据集上右键单击。从下拉菜单中选择**新建**，然后选择**要素类**。将第一个要素类命名为`SelectedCensusBlocks`并使其成为多边形。在下一个菜单中选择**默认关键字**，然后在接下来的菜单中，点击**导入**按钮。从SanFrancisco要素数据集中选择**CensusBlocks**要素类；这将把字段加载到新的要素类中。对第二个名为`SelectedBusStops`的要素类重复此操作，但确保它是点几何类型，并从`BusStops`要素类导入模式。对第三个名为`SelectedStopBuffers`的要素类重复相同的过程，但确保它是点几何类型，并从`Buffers`要素类导入模式。
- en: Once the feature classes have been created, it is now possible to use them to
    load the results of the analysis. We will be redoing the analysis in memory and
    writing out the results to the newly created feature classes, so that the entire
    census block will be captured, instead of only the portion that intersects with
    the buffer, as it will better illustrate the results of the analysis.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了要素类，现在就可以使用它们来加载分析的结果。我们将重新在内存中执行分析，并将结果写入新创建的要素类，这样就可以捕捉整个普查区，而不仅仅是与缓冲区相交的部分，这将更好地说明分析的结果。
- en: 'The initial state of the `MapAdjust.mxd` map document features a number of
    feature classes with which we are now familiar: the downloaded feature class `Bus_Stops`,
    the generated feature class Buffers, the intersected and clipped Census Blocks,
    and four feature classes used for cartographic purposes, namely the **Streets
    feature** class, the **Parks feature** class, a **Neighborhoods feature** class,
    and an outline of **San Francisco**. There are two data frames, one with the default
    name **Layers** and another called **Inset**, that are used to create the small
    inset that will show the position of the Layers data frame as it moves around
    San Francisco. The small rectangle that depicts the extent of the Layers data
    frame is an Extent frame created in the properties of the Inset data frame.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`MapAdjust.mxd`地图文档的初始状态包含我们现在熟悉的几个要素类：下载的要素类`Bus_Stops`、生成的要素类`Buffers`、相交和裁剪的`Census
    Blocks`，以及用于制图的四个要素类，即**街道要素**类、**公园要素**类、一个**邻里要素**类，以及**旧金山**的轮廓。有两个数据框，一个默认命名为**图层**，另一个命名为**插入框**，用于创建将显示图层数据框在旧金山周围移动位置的小插入框。描述图层数据框范围的矩形是一个在插入框数据框属性中创建的范围框架。'
- en: 'Here is an exported view of the initial state of the map document:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是地图文档初始状态的导出视图：
- en: '![Adjusting map document elements](img/8662OS_08_02.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![调整地图文档元素](img/8662OS_08_02.jpg)'
- en: The idea here, is to use the initial results of our analysis to generate the
    symbology of the population layer as well as the bus stop layer and the buffer
    layer. Once they have been set and saved, they can be used as a basis for the
    individual map pages that we will be producing from this basic map document.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这里提出的想法是，利用我们分析初始结果来生成人口层、公交车站层和缓冲层的符号。一旦设置并保存，它们就可以作为我们将从这个基本地图文档中生成的单个地图页面的基础。
- en: Note
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note the text elements that make up the title and subtitle, as well as the legend
    and attribution text at the bottom of the right pane. These elements are available
    for adjustment along with the layers and data sources that make up the map document
    by using the `arcpy.mapping.ListElements()` method.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 注意构成标题和副标题的文本元素，以及右窗格底部的图例和归属文本。这些元素可以通过使用`arcpy.mapping.ListElements()`方法与地图文档中构成图层和数据源的其他元素一起进行调整。
- en: Automated map document adjustment
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动地图文档调整
- en: 'Now that we understand the initial configuration of the map document, we will
    introduce a script that will automate the adjustment. This script will include
    a number of concepts that we have covered in this chapter and earlier chapters,
    and will also introduce some new methods for map document adjustments that we
    will detail in the following:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了地图文档的初始配置，我们将介绍一个将自动调整的脚本。此脚本将包括我们在本章和前几章中介绍的一些概念，并将介绍一些用于地图文档调整的新方法，我们将在以下内容中详细说明：
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Wow! That's a lot of code. Let's review it section by section to address what
    each part of the script is doing.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 哇！代码真的很多。让我们逐节回顾，以了解脚本的每一部分都在做什么。
- en: This code will be run in the Python Window of the MXD, so make sure to open
    the MXD. Once it is, open the **Python** Window and right click in it, and then
    select **Load** from the right-click menu. Using the file navigation browser,
    find the script called `Chapter8_6_AdjustmapCURRENT.py` and select it by clicking
    on it. Push **OK** and it will load in the Python Window. Pushing **Enter** will
    execute the script, or use the scroll bar to peruse the loaded lines.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码将在MXD的Python窗口中运行，因此请确保打开MXD。一旦打开，请打开**Python**窗口，并在其中右键单击，然后从右键菜单中选择**加载**。使用文件导航浏览器，找到名为`Chapter8_6_AdjustmapCURRENT.py`的脚本，并单击它以选择它。点击**确定**，它将在Python窗口中加载。按**Enter**键将执行脚本，或使用滚动条浏览加载的行。
- en: The variables
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变量
- en: 'Within the script, a number of variables are first created to hold the `string`
    file paths, the `integer` buffer distance, and the `sql` statement used to identify
    the bus line of interest:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在脚本中，首先创建了一些变量来保存`string`文件路径、`integer`缓冲距离和用于识别感兴趣公交线路的`sql`语句：
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: These will be used later to allow us to search the layers and perform analysis
    on them.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这些将在以后被用来允许我们搜索图层并对它们进行分析。
- en: The map document object and the text elements
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 地图文档对象和文本元素
- en: 'Because this code will be executed in an open map document, we don''t have
    to pass an MXD file path to the `arcpy.mapping.MapDocument()` method. Instead,
    we will use the keyword `CURRENT` to indicate that we are referencing the open
    map document:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 因为此代码将在打开的地图文档中执行，所以我们不需要将MXD文件路径传递给`arcpy.mapping.MapDocument()`方法。相反，我们将使用关键字`CURRENT`来表示我们正在引用打开的地图文档：
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Once the map document object has been created, the Layers data frame is selected
    from a list of data frames using the `ListDataFrames()` method and passed to the
    variable called dataFrame.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了地图文档对象，就使用`ListDataFrames()`方法从数据帧列表中选择图层数据帧，并将其传递给名为dataFrame的变量。
- en: 'Next, the layout elements are passed as a list to the elements variable using
    the `ListLayoutElements()` method. The layout elements include the various elements
    of the map document layout view: the legend, the neat lines, the north arrow,
    the scale bar, and the text elements used as titles and descriptions. Unfortunately,
    there is no nice order to the list returned, as their position throughout the
    layout is undetermined. Access to the text elements, which we would like to assign
    to a variable for later use, must be identified using two properties of the element
    objects: the type and the text. We want to adjust the title and subtitle elements,
    so a `for` loop is used to search through the list of elements and the properties
    are used to find the elements of interest.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用`ListLayoutElements()`方法将布局元素作为列表传递给elements变量。布局元素包括地图文档布局视图的各种元素：图例、整洁线、指向北方的箭头、比例尺和用作标题和描述的文本元素。不幸的是，返回的列表没有很好的顺序，因为它们在布局中的位置是不确定的。要访问我们希望分配给变量以供以后使用的文本元素，必须使用元素对象的两个属性：类型和文本。我们想要调整标题和副标题元素，因此使用`for`循环遍历元素列表，并使用属性来找到感兴趣的元素。
- en: The layer objects
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 图层对象
- en: The Make Feature Layer tool, part of the Data Management toolset, is used to
    copy data from disk into memory as a layer. ArcGIS requires the generation of
    layers to perform selections and operations on data, instead of operating on the
    feature classes directly. By using layers to perform these operations, the source
    feature classes are protected.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Make Feature Layer工具是数据管理工具集的一部分，用于将数据从磁盘复制到内存中作为一个图层。ArcGIS需要生成图层来对数据进行选择和操作，而不是直接在要素类上操作。通过使用图层来执行这些操作，可以保护源要素类。
- en: The Make Feature Layer tool is accessed using ArcPy's `MakeFeatureLayer_management()`
    method. When using this tool in the Python Window, the result is added to the
    map document as a layer that will be visible in the Table of Contents. When the
    tool is not used in the Python Window in ArcMap, the resulting layer is only generated
    in memory and is not added to the map document.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 使用ArcPy的`MakeFeatureLayer_management()`方法访问Make Feature Layer工具。当在Python窗口中使用此工具时，结果作为将在目录表中可见的图层添加到地图文档中。当在ArcMap的Python窗口中未使用此工具时，生成的图层仅存在于内存中，并不会添加到地图文档中。
- en: 'In the portion of the following code, a layer called `blocks_lyr` is generated
    in memory by passing the file path of the census blocks feature class. The layer
    objects contained within the initial MXD are then accessed using the `ListLayers()`
    method of the `arcpy.mapping()` module. They are returned in the order that they
    are listed in the Table of Contents of the map document and are assigned to variables
    using list indexing, including the newly created `blocks_lyr`:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码的部分中，通过传递人口普查区块要素类的文件路径，在内存中生成了一个名为`blocks_lyr`的图层。然后使用`arcpy.mapping()`模块的`ListLayers()`方法访问初始MXD中包含的图层对象。它们按照在地图文档的目录表中列出的顺序返回，并使用列表索引分配给变量，包括新创建的`blocks_lyr`：
- en: '[PRE9]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Replacing the data sources
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 替换数据源
- en: 'Now that we have assigned the layer objects to variables, we will check whether
    their data sources are the correct feature classes that we use for map production.
    Using the `dataSource` property of each layer object, they are compared to the
    file path variables that we want to use as data sources:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将图层对象分配给了变量，我们将检查它们的数据源是否是我们用于地图生产的正确要素类。使用每个图层对象的`dataSource`属性，我们将它们与我们要用作数据源的文件路径变量进行比较：
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '`If` statements are used to check whether the data sources are correct. If
    not, they are replaced with the correct data sources using the `replaceDataSource()`
    layer method. This method requires three parameters: the workspace (in this case,
    the File Geodatabase), the workspace type, and the name of the new feature class
    data source, which must be in the same workspace for the `replaceDataSource()`
    method to work (though it does not need to be in the same feature dataset).'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`If`语句检查数据源是否正确。如果不正确，将使用`replaceDataSource()`图层方法将它们替换为正确的数据源。此方法需要三个参数：工作空间（在这种情况下，文件地理数据库）、工作空间类型以及新要素类数据源名称，该名称必须位于同一工作空间中，以便`replaceDataSource()`方法能够工作（尽管它不需要位于同一要素数据集中）。
- en: Adjusting layer visibility
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调整图层可见性
- en: 'The layer objects have a property that allows us to adjust their visibility.
    Setting this Boolean property to `True` or `False` will adjust the layer''s visibility
    on (True) or off (False):'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图层对象有一个属性允许我们调整它们的可见性。将此布尔属性设置为`True`或`False`将调整图层的可见性（开启为True，关闭为False）：
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We want the layer variable `layerCensus`, which is the new `blocks_lyr` object,
    to be turned off, so it is set to `False`, but the bus stops and buffer layer
    objects need to be visible, so they are set to `True`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望图层变量`layerCensus`，即新的`blocks_lyr`对象，被关闭，因此将其设置为`False`，但公交车站和缓冲区图层对象需要可见，因此将它们设置为`True`。
- en: Generating a buffer from the bus stops feature class
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从公交车站要素类生成缓冲区
- en: 'All of the variables have been generated or assigned, so the next step is to
    use a `SearchCursor` to search through the selected bus stops. For each bus stop,
    buffer objects will be generated to find census blocks that intersect with these
    individual bus stops:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 所有变量都已生成或分配，所以下一步是使用`SearchCursor`搜索选定的公交车站。对于每个公交车站，将生成缓冲区对象以找到与这些单独公交车站相交的人口普查区块：
- en: '[PRE12]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: For each row of data retrieved from the Bus Stops feature class, a number of
    attributes are returned, contained in a tuple. The first of these, row[0], is
    a `PointGeometry` object. This object has a buffer method that is used to generate
    a buffer `Polygon` object in memory, which is then assigned to the `stopBuffer`
    variable. Once the buffer object is created, the data access UpdateCursor's `deleteRow()`
    method is used to erase the rows in the census blocks layer. Once the rows have
    been deleted, the layer can then be repopulated with newly selected census blocks
    that will be identified in the next section.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 对于从公交车站特征类检索到的每一行数据，返回一系列属性，包含在一个元组中。其中第一个，row[0]，是一个`PointGeometry`对象。此对象有一个缓冲方法，用于在内存中生成一个缓冲`Polygon`对象，然后将其分配给`stopBuffer`变量。一旦创建了缓冲区对象，就使用数据访问UpdateCursor的`deleteRow()`方法来擦除人口普查区图层中的行。一旦删除了行，该图层就可以用下一节中将要识别的新选定的人口普查区重新填充。
- en: Intersecting the bus stop buffer and census blocks
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 交集公交车站缓冲区和人口普查区
- en: 'To identify the census blocks intersecting with the buffer around each bus
    stop, the ArcToolbox tool SelectLayerByLocation is invoked using the ArcPy method
    `SelectLayerByLocation_management()`:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 为了识别与每个公交车站周围的缓冲区相交的人口普查区，使用ArcToolbox工具`SelectLayerByLocation`通过ArcPy方法`SelectLayerByLocation_management()`调用：
- en: '[PRE13]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This method requires the in-memory `blocks_lyr` layer object and the newly created
    buffer object assigned to the variable `stopBuffer`. It also requires the type
    of selection `intersect` and another parameter that controls whether the selection
    will be added to an existing selection or will be a new selection. In this case,
    we want a new selection, as only the census blocks that intersect the current
    bus stop are needed.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法需要内存中的`blocks_lyr`图层对象和分配给变量`stopBuffer`的新创建的缓冲区对象。它还需要选择类型`intersect`以及另一个参数，该参数控制选择是否添加到现有选择中，或者将是一个新选择。在这种情况下，我们想要一个新选择，因为只需要与当前公交车站相交的人口普查区。
- en: Once the census blocks have been selected and identified, the shape data and
    population data is passed to the feature class represented by the variable `selectedBlock`
    using an `InsertCursor`. The InsertCursor must be deleted using the del keyword,
    as only one `InsertCursor` or `UpdateCursor` can be in memory at a time.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦选择了人口普查区并进行了识别，形状数据和人口数据通过`InsertCursor`传递到由变量`selectedBlock`表示的特征类。`InsertCursor`必须使用del关键字删除，因为一次只能有一个`InsertCursor`或`UpdateCursor`在内存中。
- en: Populating the selected bus stop and buffer feature classes
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 填充选定的公交车站和缓冲特征类
- en: 'In a similar manner, the next step is to populate the bus stop and buffer feature
    classes that will be used in the map production. The bus stops feature class is
    first made blank using the `deleteRow()` method, and then the selected bus stop
    shape field data is inserted into the feature class. The same steps are then taken
    with the bus stop buffers feature class and the buffer geometry object:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 以类似的方式，下一步是填充将在地图制作中使用的公交车站和缓冲特征类。首先使用`deleteRow()`方法将公交车站特征类清空，然后将选定的公交车站形状字段数据插入到特征类中。然后对公交车站缓冲特征类和缓冲几何对象执行相同的步骤：
- en: '[PRE14]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Updating the text elements
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新文本元素
- en: 'Now that the data has been generated and written to the feature classes created
    to hold them, the next step is to update the layout elements. This includes layer
    properties that will affect the legend, the extent of the data frame, and the
    text elements:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在数据已经生成并写入创建来存储它们的特征类后，下一步是更新布局元素。这包括将影响图例、数据框架范围和文本元素的图层属性：
- en: '[PRE15]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The name of the bus stops layer is adjusted using its name property to reflect
    the current bus stop. The data frame extent is adjusted by creating an `arcpy.Extent`
    object and passing it four parameters: *Xmin*, *Ymin*, *Xmax*, *Ymax*. To generate
    these values I have used the somewhat arbitrary value of 1200 feet to create a
    square around the bus stop. The text elements are updated using their text property.
    Finally, the `RefreshActiveView()` method is used to ensure that the map document
    window is correctly updated to the new extent.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 使用其名称属性调整公交车站图层名称，以反映当前公交车站。通过创建一个`arcpy.Extent`对象并传递四个参数：*Xmin*、*Ymin*、*Xmax*、*Ymax*来调整数据框架范围。为了生成这些值，我使用了1200英尺这个相对任意的值，在公交车站周围创建一个正方形。使用它们的文本属性更新文本元素。最后，使用`RefreshActiveView()`方法确保地图文档窗口正确更新到新的范围。
- en: Exporting the adjusted map to PDF
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将调整后的地图导出为PDF
- en: 'The final step is to pass the newly adjusted map document object to ArcPy''s
    `ExportToPDF` method. This method requires two parameters, the map document object
    and a string that represents the file path of the PDF:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将新调整的地图文档对象传递给 ArcPy 的 `ExportToPDF` 方法。此方法需要两个参数，即地图文档对象和表示 PDF 文件路径的字符串：
- en: '[PRE16]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The PDF file path string is generated from the pdfFolder string template and
    the ID of the bus stop, along with the object ID and the file extension `.pdf`.
    Once that and the map document object represented by the variable `mxdObject`
    are passed to the `ExportToPDF` method, the PDF will be generated. The text elements
    are then reset and the view is refreshed to ensure that the map document will
    be ready for the next time the script is used.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: PDF 文件路径字符串是由 pdfFolder 字符串模板和公交站点的 ID 以及对象 ID 和文件扩展名 `.pdf` 生成的。一旦这些和变量 `mxdObject`
    所表示的地图文档对象传递给 `ExportToPDF` 方法，就会生成 PDF。然后重置文本元素并刷新视图，以确保地图文档在下次使用脚本时准备就绪。
- en: Running the script in the Python Window
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Python 窗口中运行脚本
- en: Open up the map document called `MapAdjust.mxd` if it is not open already. Open
    the **Python** Window and right click in the window. Select **Load** from the
    menu. When the file dialog opens, find the script called `Chapter8_6_AdjustmapCURRENT.py`
    and select it, making sure that the file paths within it are correct. Push **OK**
    and it will load in the Python Window. Push **Enter** once the script is loaded
    to run the script. It can take a few seconds or more for it to be obvious that
    the script is running.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果尚未打开，请打开名为 `MapAdjust.mxd` 的地图文档。打开 **Python** 窗口，并在窗口中右键单击。从菜单中选择 **Load**。当文件对话框打开时，找到名为
    `Chapter8_6_AdjustmapCURRENT.py` 的脚本并选择它，确保其中的文件路径正确。点击 **OK**，它将在 Python 窗口中加载。脚本加载后，按一次
    **Enter** 运行脚本。脚本运行可能需要几秒钟或更长时间才能明显看出它在运行。
- en: Note
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that the Python Window is not a great place to execute ArcPy scripts in
    most cases, as it is somewhat limited when compared to IDEs. Using it to load
    and execute a script that performs these map document adjustments is one of the
    best uses of the Python Window.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在大多数情况下，Python 窗口并不是执行 ArcPy 脚本的好地方，因为它与 IDE 相比有些局限。使用它来加载和执行执行这些地图文档调整的脚本，是
    Python 窗口最好的用途之一。
- en: Once the script is running, the adjustments to the map document will begin to
    appear and repeat. This is a fascinating process, as the effects of running the
    script are visible in a manner that is not readily available when running Python
    scripts. Once the PDFs begin to be generated, open one up to view the output.
    The script will generate a map for each bus stop on the selected bus line, so
    feel free to shut down the map document after generating a set number of the PDFs.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦脚本开始运行，地图文档的调整将开始出现并重复。这是一个令人着迷的过程，因为运行脚本的效果以一种在运行 Python 脚本时不太容易看到的方式显现出来。一旦开始生成
    PDF 文件，打开一个查看输出。脚本将为所选公交线上的每个公交站生成一个地图，因此生成一定数量的 PDF 文件后，您可以自由关闭地图文档。
- en: 'Here is an example of the output:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是输出示例：
- en: '![Running the script in the Python Window](img/8662OS_08_03.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![在 Python 窗口中运行脚本](img/8662OS_08_03.jpg)'
- en: 'The maps generated by the script show each bus stop at the center, surrounded
    by the buffer and the symbolized census blocks with which the buffer intersects.
    The title, subtitle and the legend have been adjusted to indicate the bus stop
    depicted in the map. With ArcPy, we are now in control of both the parts of geospatial
    analysis: the analysis itself, and the cartographic production depicting the result
    of the output.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本生成的地图显示每个公交站位于中心，周围是缓冲区和与缓冲区相交的符号化人口普查区块。标题、副标题和图例已调整，以指示地图中描绘的公交站。使用 ArcPy，我们现在控制着地理空间分析的各个方面：分析本身以及描绘输出结果的制图生产。
- en: Summary
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter arcpy.mapping was introduced and used to control the elements
    of map documents that need to be adjusted to create custom maps. By joining geospatial
    analysis and map production together, we are closer to utilizing the full power
    of ArcPy.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中介绍了 arcpy.mapping 并使用它来控制需要调整以创建自定义地图的地图文档元素。通过将地理空间分析和地图制作结合起来，我们更接近于利用
    ArcPy 的全部功能。
- en: In the next chapter, we will go further with arcpy.mapping and create a script
    tool that can be added to ArcToolbox, which will run the analysis as well as generate
    maps from the resulting data. We will also refine the script and introduce Data
    Driven Pages to discuss how that powerful tool can be used in an ArcPy script.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将进一步探讨arcpy.mapping，并创建一个可以添加到ArcToolbox中的脚本工具，该工具将运行分析并从结果数据生成地图。我们还将完善脚本，并介绍数据驱动页面，以讨论如何在该ArcPy脚本中使用这个强大的工具。
