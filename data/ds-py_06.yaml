- en: 'Chapter 6. Analytics Study: AI and Image Recognition with TensorFlow'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第六章：分析学习：使用TensorFlow进行AI和图像识别
- en: '|   | *"Artificial Intelligence, deep learning, machine learning — whatever
    you''re doing if you don''t understand it — learn it. Because otherwise, you''re
    going to be a dinosaur within 3 years."* |   |'
  id: totrans-1
  prefs: []
  type: TYPE_TB
  zh: '|   | *“人工智能、深度学习、机器学习——无论你在做什么，如果你不理解它——就学习它。因为不然，你将在3年内变成恐龙。”* |   |'
- en: '|   | --*Mark Cuban* |'
  id: totrans-2
  prefs: []
  type: TYPE_TB
  zh: '|   | --*马克·库班* |'
- en: This is the first chapter of a series of sample applications covering popular
    industry use cases, and it is no coincidence that I start with a use case related
    to machine learning and, more specifically, deep learning through a image recognition
    sample application. We're seeing accelerated growth in the field of **Artificial
    Intelligence** (**AI**) over the last few years, to the point where many practical applications
    are becoming a reality, such as self-driving cars, and chatbots with advanced
    automated speech recognition that, for some tasks, are perfectly able to replace
    human operators, while more and more people, from academia to industry, are starting
    to get involved. However, there is a perception that the cost of entry is very
    high and that mastering the underlying mathematical concepts of machine learning
    is a prerequisite. In this chapter, we try to demonstrate, through the use of
    examples, that this is not the case.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个涵盖流行行业用例的系列示例应用中的第一章，毫无疑问，我从一个与机器学习，特别是通过图像识别示例应用的深度学习相关的用例开始。这几年，**人工智能**（**AI**）领域经历了加速增长，许多实际应用已成为现实，比如自动驾驶汽车，具备高级自动语音识别的聊天机器人，这些技术在某些任务中完全能够替代人工操作员，而越来越多的人，无论是学术界还是产业界，开始参与其中。然而，仍然存在一种看法，认为进入的门槛很高，并且掌握机器学习背后的数学概念是前提条件。在本章中，我们尝试通过示例来演示，事实并非如此。
- en: We will start this chapter with a quick introduction to machine learning, and
    a subset of it called deep learning. We will then introduce a very popular deep
    learning framework called TensorFlow that we'll use to build an image recognition
    model. In the second part of this chapter, we'll show how to operationalize the
    model we've built by implementing a sample PixieApp that lets the user enter a
    link to a website, have all the images scraped, and use as input to the model
    to categorize them.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将以简要介绍机器学习开始本章，并介绍其一个子集——深度学习。接着我们将介绍一个非常流行的深度学习框架——TensorFlow，我们将利用它来构建一个图像识别模型。在本章的第二部分，我们将展示如何通过实现一个名为PixieApp的示例应用来将我们构建的模型投入实际使用，用户可以输入一个网站链接，获取该网站的所有图片，并将其作为输入传递给模型进行分类。
- en: At the end of this chapter, you should be convinced that it is possible to build
    meaningful applications and operationalize them without a Ph.D. in machine learning.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，你应该确信，即使没有机器学习博士学位，也完全可以构建有意义的应用并将其投入实际使用。
- en: What is machine learning?
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是机器学习？
- en: 'One definition that I think captures very well the intuition behind machine
    learning comes from Andrew Ng, adjunct professor at Stanford University, in his *Machine
    Learning* class on Coursera ([https://www.coursera.org/learn/machine-learning](https://www.coursera.org/learn/machine-learning)):'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为很好地捕捉到机器学习直觉的一个定义来自斯坦福大学的副教授Andrew Ng，在他的Coursera课程*机器学习*中提到（[https://www.coursera.org/learn/machine-learning](https://www.coursera.org/learn/machine-learning)）：
- en: Machine learning is the science of getting computers to learn, without being
    explicitly programmed.
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 机器学习是让计算机通过学习来完成任务，而不是通过显式编程。
- en: 'The key word from the preceding definition is *learn,* which, in this context,
    has a meaning that is very similar to how, we, humans learn. To continue with
    this parallel, from a young age, we were taught how to accomplish a task either
    by example, or on our own by trial and error. Broadly speaking, machine learning
    algorithms can be categorized into two types that correspond to the two ways in which
    humans learn:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 上述定义中的关键词是*学习*，在此上下文中，*学习*的含义与我们人类的学习方式非常相似。继续这一类比，从小开始，我们就被教导如何通过示范或者通过自身的试错过程完成一项任务。广义来说，机器学习算法可以分为两种类型，这两种类型对应于人类学习的两种方式：
- en: '**Supervised**: The algorithm learns from example data that has been properly
    labeled. This data is also called training data, or sometimes referred to as *ground
    truth*.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监督学习**：算法从已正确标注的示例数据中学习。这些数据也叫做训练数据，或者有时被称为*地面真实*。'
- en: '**Unsupervised**: The algorithm is able to learn on its own from data that
    has not been labeled.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无监督学习**：算法能够从未标记的数据中自行学习。'
- en: 'For each of the two categories described here, the following table gives a
    high-level overview of the most commonly used machine learning algorithms and
    the type of problem they solve:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的表格概述了每个类别中最常用的机器学习算法及其解决的问题类型：
- en: '![What is machine learning?](img/B09699_06_01.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![什么是机器学习？](img/B09699_06_01.jpg)'
- en: List of machine learning algorithms
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 机器学习算法列表
- en: The output of these algorithms is called a **model** and is used to make predictions
    on new input data that has not been seen before. The overall end-to-end process
    for building and deploying these models is very consistent across the different
    types of algorithms.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这些算法的输出被称为**模型**，并用于对从未见过的新输入数据进行预测。构建和部署这些模型的整个端到端过程在不同类型的算法中是非常一致的。
- en: 'The following diagram shows a high-level workflow of this process:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了这个过程的高层次工作流：
- en: '![What is machine learning?](img/B09699_06_02.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![什么是机器学习？](img/B09699_06_02.jpg)'
- en: Machine learning model workflow
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 机器学习模型工作流
- en: As always, the workflow starts with data. In the case of supervised learning,
    the data will be used as an example and therefore must be correctly labeled with
    the correct answers. The input data is then processed to extract intrinsic properties
    called **features,** which we can think of as numerical values representing the
    input data. Subsequently, these features are fed into a machine learning algorithm
    that builds a model. In typical settings, the original data is split between training,
    test, and blind data. The test and blind data are used during the model building
    phase to validate and optimize the model to make sure that it doesn't overfit
    the training data. Overfitting happens when the model parameters are such that
    they follow too closely the training data, leading to errors when unseen data
    is used. When the model produces the desired accuracy level, it is then deployed
    in production and used against new data as needed by the host application.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 和往常一样，工作流从数据开始。在监督学习的情况下，数据将作为示例使用，因此必须正确标记答案。然后，输入数据被处理以提取内在特性，称为**特征**，我们可以将它们看作是代表输入数据的数值。随后，这些特征被输入到一个机器学习算法中，构建出一个模型。在典型设置中，原始数据会被拆分为训练数据、测试数据和盲数据。在模型构建阶段，测试数据和盲数据用于验证和优化模型，以确保模型不会过度拟合训练数据。过度拟合发生在模型参数过于紧密地跟随训练数据，导致在使用未见过的数据时出现错误。当模型达到预期的准确度时，它会被部署到生产环境中，并根据宿主应用的需求对新数据进行预测。
- en: In this section, we will provide a very high-level introduction to machine learning
    with a simplified data pipeline workflow, just enough to give the intuition of
    how a model is built and deployed. Once again, if you are a beginner, I highly
    recommend Andrew Ng's *Machine Learning* class on Coursera (which I still revisit
    from time to time). In the next section, we will introduce a branch of machine
    learning called deep learning, which we'll use to build the image recognition
    sample application.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将提供一个非常高层次的机器学习介绍，配以简化的数据流水线工作流，足以让你理解模型是如何构建和部署的。如果你是初学者，我强烈推荐Andrew
    Ng在Coursera上的*机器学习*课程（我自己也时常回顾）。在接下来的部分，我们将介绍机器学习的一个分支——深度学习，我们将用它来构建图像识别示例应用。
- en: What is deep learning?
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是深度学习？
- en: 'Getting computers to learn, reason, and think (make decisions) is a science
    that is commonly called **cognitive computing,** of which machine learning and
    deep learning are a big part. The following Venn diagram shows how these fields
    are related to the overarching field of AI:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让计算机学习、推理和思考（做决策）是一门被称为**认知计算**的科学，其中机器学习和深度学习是重要组成部分。下图展示了这些领域如何与AI这一广泛领域相关：
- en: '![What is deep learning?](img/B09699_06_03.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![什么是深度学习？](img/B09699_06_03.jpg)'
- en: How deep learning fits in to AI
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 深度学习在AI中的位置
- en: As the diagram suggests, deep learning is one type of machine learning algorithm.
    What is perhaps not widely known is that the field of deep learning has existed
    for quite some time, but hasn't really been widely used until very recently. The
    rekindling in interest is due to the extraordinary advances in computer, cloud,
    and storage technologies observed in the last few years that have fuelled exponential
    growth in AI with the development of many new deep learning algorithms, each best suited
    to solve a particular problem.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 正如图示所示，深度学习是机器学习算法的一种类型。或许不为人所广知的是，深度学习领域已经存在相当长的时间，但直到最近才被广泛应用。兴趣的复燃是由于近年来计算机、云计算和存储技术的巨大进步，这些技术推动了人工智能的指数增长，并催生了许多新的深度学习算法，每个算法都特别适合解决特定问题。
- en: As we'll discuss later in this chapter, deep learning algorithms are especially
    good at learning complex non-linear hypotheses. Their design is actually inspired
    by how the human brain works, for example, the input data flows through multiple
    layers of computation units in order to decompose complex model representations
    (such as an image, for example) into simpler ones, before passing the results
    to the next layer, and so on and so forth, until reaching the final layer that
    is responsible for outputting the results. The assembly of these layers is also
    referred to as **neural networks**, and the computation units that compose a layer
    are called **neurons**. In essence, a neuron is responsible for taking multiple
    inputs and transforming them into a single output that can then be fed into other
    neurons in the next layers.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在本章稍后讨论的，深度学习算法特别擅长学习复杂的非线性假设。它们的设计实际上是受到人脑工作方式的启发，例如，输入数据通过多个计算单元层进行处理，以将复杂的模型表示（例如图像）分解为更简单的表示，然后将结果传递到下一层，依此类推，直到到达负责输出结果的最终层。这些层的组合也被称为**神经网络**，构成一层的计算单元被称为**神经元**。本质上，一个神经元负责接收多个输入，并将其转换为单一输出，然后这个输出可以输入到下一层的其他神经元。
- en: 'The following diagram represents a multilayer neural network for image classification:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图示表示了一个用于图像分类的多层神经网络：
- en: '![What is deep learning?](img/B09699_06_04.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![什么是深度学习？](img/B09699_06_04.jpg)'
- en: High-level representation of a neural network for image classification
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图像分类的神经网络高级表示
- en: The preceding neural network is also called **feed-forward** because the output
    of each computation unit is used as input to the next layer, starting with the
    input layer. The intermediary layers are called the **hidden layers** and contain
    intermediary features that are automatically learned by the network. In our image
    example, certain neurons could be responsible for detecting corners, while certain
    others might focus on edges, and so on. The final output layer is responsible
    for assigning a confidence level (score) to each of the output classes.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 上述神经网络也被称为**前馈网络**，因为每个计算单元的输出作为输入传递到下一层，从输入层开始。中间层被称为**隐藏层**，包含由网络自动学习的中间特征。在我们的图像示例中，某些神经元可能负责检测角落，而其他神经元则可能专注于边缘，依此类推。最终的输出层负责为每个输出类别分配一个置信度（得分）。
- en: One important question is how does the neuron output get generated from its
    input? Without diving too deeply in to the mathematics involved, each artificial
    neuron applies an activation function ![What is deep learning?](img/B09699_06_26.jpg)
    on the weighted sum of its inputs to decide whether it should *fire* or not.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 一个重要的问题是，神经元的输出是如何从输入生成的？在不深入探讨涉及的数学内容的前提下，每个人工神经元会对其输入的加权和应用激活函数 ![什么是深度学习？](img/B09699_06_26.jpg)，以决定它是否应该*激活*。
- en: 'The following formula calculates the weighted sum:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以下公式计算加权和：
- en: '![What is deep learning?](img/B09699_06_27.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![什么是深度学习？](img/B09699_06_27.jpg)'
- en: Where ![What is deep learning?](img/B09699_06_28.jpg) is the matrix of weights
    between the layer *i* and *i + 1*. These weights are computed during the training
    phase that we will discuss briefly a little later.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 ![什么是深度学习？](img/B09699_06_28.jpg) 是层 *i* 和 *i + 1* 之间的权重矩阵。这些权重是在稍后讨论的训练阶段中计算得出的。
- en: Note
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Note**: The bias in the preceding formula represents the weight of the bias
    neuron, which is an extra neuron added to each layer with an x value of +1\. The
    bias neuron is special because it contributes to the input for the next layer,
    but it is not connected to the previous one. Its weight, however, is still normally
    learned like any other neuron. The intuition behind the bias neuron is that it
    provides the constant term b in the linear regression equation:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：前面公式中的偏置表示偏置神经元的权重，它是每一层中添加的一个额外神经元，其 x 值为 +1。偏置神经元很特殊，因为它贡献了下一层的输入，但与上一层没有连接。然而，它的权重仍然像其他神经元一样被正常学习。偏置神经元的直觉是，它为线性回归方程提供了常数项
    b：'
- en: '![What is deep learning?](img/B09699_06_29.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![什么是深度学习？](img/B09699_06_29.jpg)'
- en: Of course, applying the neuron activation function ![What is deep learning?](img/B09699_06_30.jpg)
    on *A* cannot simply produce a binary (0 or 1) value, because we wouldn't be able
    to correctly rank the final candidate answers if multiple classes are given the
    score of 1\. Instead, we use activation functions that provide a non-discrete
    score between 0 and 1 and set a threshold value (for example, 0.5) to decide whether
    to activate the neuron or not.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，应用神经元激活函数 ![什么是深度学习？](img/B09699_06_30.jpg) 在 *A* 上，不能简单地产生一个二进制（0 或 1）值，因为如果多个类别都被赋予了
    1 的分数，我们就无法正确地排序最终的候选答案。相反，我们使用提供 0 到 1 之间非离散分数的激活函数，并设置一个阈值（例如 0.5）来决定是否激活神经元。
- en: 'One of the most popular activation functions is the sigmoid function:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 最常用的激活函数之一是 sigmoid 函数：
- en: '![What is deep learning?](img/B09699_06_31.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![什么是深度学习？](img/B09699_06_31.jpg)'
- en: 'The following diagram shows how a neuron output is calculated from its input
    and its weight using a sigmoid activation function:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了如何使用 sigmoid 激活函数根据输入和权重计算神经元的输出：
- en: '![What is deep learning?](img/B09699_06_05.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![什么是深度学习？](img/B09699_06_05.jpg)'
- en: Neuron output calculation using the sigmoid function
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 sigmoid 函数计算神经元输出
- en: 'Other popular activation functions include the hyperbolic tangent ![What is
    deep learning?](img/B09699_06_32.jpg) and the **Rectified Linear Unit** (**ReLu**):
    ![What is deep learning?](img/B09699_06_33.jpg). ReLu works better when there
    are a lot of layers because it provides sparsity of *firing* neurons, thereby
    reducing noise and resulting in faster learning.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 其他常用的激活函数包括双曲正切 ![什么是深度学习？](img/B09699_06_32.jpg) 和 **修正线性单元**（**ReLu**）：![什么是深度学习？](img/B09699_06_33.jpg)。当有很多层时，ReLu
    的表现更好，因为它提供了稀疏的*激活*神经元，从而减少噪音并加快学习速度。
- en: Feed-forward propagation is used during scoring of the model, but when it comes
    to training the weight matrix of the neural network, a popular method used is
    called **backpropagation** ([https://en.wikipedia.org/wiki/Backpropagation](https://en.wikipedia.org/wiki/Backpropagation)).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 前馈传播用于模型评分时，但在训练神经网络的权重矩阵时，一种常用的方法叫做**反向传播**（[https://en.wikipedia.org/wiki/Backpropagation](https://en.wikipedia.org/wiki/Backpropagation)）。
- en: 'The following high-level steps describe how the training works:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 以下高层步骤描述了训练是如何进行的：
- en: Randomly initialize the weight matrix (preferably using small values, for example,
    ![What is deep learning?](img/B09699_06_34.jpg).
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 随机初始化权重矩阵（最好使用较小的值，例如 ![什么是深度学习？](img/B09699_06_34.jpg)）。
- en: Use the forward propagation described earlier on all the training examples to
    compute the outputs of each neuron using the activation function of your choice.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用之前描述的前向传播方法，对所有训练样本进行计算，使用你选择的激活函数计算每个神经元的输出。
- en: Implement a cost function for your neural network. A **cost function** quantifies
    the error with respect to the training examples. There are multiple cost functions
    that can be used with the backpropagation algorithm, such as a mean-square error
    ([https://en.wikipedia.org/wiki/Mean_squared_error](https://en.wikipedia.org/wiki/Mean_squared_error))
    and cross-entropy ([https://en.wikipedia.org/wiki/Cross_entropy](https://en.wikipedia.org/wiki/Cross_entropy)).
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为你的神经网络实现一个成本函数。**成本函数**量化了与训练样本的误差。可以与反向传播算法一起使用的成本函数有多种，例如均方误差（[https://en.wikipedia.org/wiki/Mean_squared_error](https://en.wikipedia.org/wiki/Mean_squared_error)）和交叉熵（[https://en.wikipedia.org/wiki/Cross_entropy](https://en.wikipedia.org/wiki/Cross_entropy)）。
- en: Use backpropagation to minimize your cost function and compute the weight matrix.
    The idea behind backpropagation is to start with the activation values of the
    output layer, compute the error with respect to the training data, and pass their
    errors backward to the hidden layers. These errors are then adjusted to minimize
    the cost function implemented in step 3.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用反向传播来最小化你的成本函数并计算权重矩阵。反向传播的基本思想是从输出层的激活值开始，计算与训练数据的误差，并将这些误差反向传递到隐藏层。然后，这些误差会被调整，以最小化步骤
    3 中实现的成本函数。
- en: Note
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Note**: Explaining in detail these cost functions and how they are being optimized
    is beyond the scope of this book. For a deeper dive, I highly recommend looking
    at the *Deep Learning* book from MIT press (Ian Goodfellow, Yoshua Bengio, and
    Aaron Courville)'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：详细解释这些成本函数以及它们如何被优化超出了本书的范围。若想深入了解，我强烈推荐阅读 MIT 出版社的《深度学习》一书（Ian Goodfellow、Yoshua
    Bengio 和 Aaron Courville）。'
- en: In this section, we've discussed at a high level how neural networks work and
    how they are trained. Of course, we've only touched the surface of this exciting
    technology, but you hopefully should have an idea as to how they work. In the
    next section, we start looking at TensorFlow, which is a programming framework
    that helps abstract the underlying complexity of implementing a neural network.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们从高层次讨论了神经网络的工作原理以及它们是如何训练的。当然，我们只触及了这项激动人心的技术的皮毛，但希望你应该能大致了解它们的工作方式。在接下来的部分，我们将开始研究
    TensorFlow，这是一个帮助抽象实现神经网络底层复杂性的编程框架。
- en: Getting started with TensorFlow
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用 TensorFlow
- en: There are multiple open source deep learning frameworks besides TensorFlow ([https://www.tensorflow.org](https://www.tensorflow.org))
    that I could have chosen for this sample application.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 TensorFlow ([https://www.tensorflow.org](https://www.tensorflow.org)) 之外，我还可以选择多个开源深度学习框架用于这个示例应用程序。
- en: 'Some of the most popular frameworks are as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些最流行的框架：
- en: PyTorch ([http://pytorch.org](http://pytorch.org))
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PyTorch ([http://pytorch.org](http://pytorch.org))
- en: Caffee2 ([https://caffe2.ai](https://caffe2.ai))
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Caffee2 ([https://caffe2.ai](https://caffe2.ai))
- en: MXNet ([https://mxnet.apache.org](https://mxnet.apache.org))
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MXNet ([https://mxnet.apache.org](https://mxnet.apache.org))
- en: 'Keras ([https://keras.io](https://keras.io)): A high-level neural network abstraction
    API capable of running other deep learning frameworks such as TensorFlow, CNTK
    ([https://github.com/Microsoft/cntk](https://github.com/Microsoft/cntk)), and
    Theano ([https://github.com/Theano/Theano](https://github.com/Theano/Theano))'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Keras ([https://keras.io](https://keras.io))：一个高级神经网络抽象 API，能够运行其他深度学习框架，如 TensorFlow、CNTK
    ([https://github.com/Microsoft/cntk](https://github.com/Microsoft/cntk)) 和 Theano
    ([https://github.com/Theano/Theano](https://github.com/Theano/Theano))
- en: 'TensorFlow APIs are available in multiple languages: Python, C++, Java, Go,
    and, more recently, JavaScript. We can distinguish two categories of APIs: high
    level and low level, represented by this diagram:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: TensorFlow API 支持多种语言：Python、C++、Java、Go，最近还包括 JavaScript。我们可以将 API 分为两类：高级和低级，具体如下图所示：
- en: '![Getting started with TensorFlow](img/B09699_06_06.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![开始使用 TensorFlow](img/B09699_06_06.jpg)'
- en: TensorFlow high-level API architecture
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: TensorFlow 高级 API 架构
- en: To get started with the TensorFlow API, let's build a simple neural network
    that will learn the XOR transformation.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始使用 TensorFlow API，让我们构建一个简单的神经网络，学习 XOR 转换。
- en: 'As a reminder, the XOR operator has only four training examples:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 提醒一下，XOR 运算符只有四个训练样本：
- en: '| **X** | **Y** | **Result** |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| **X** | **Y** | **结果** |'
- en: '| 0 | 0 | 0 |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 0 | 0 |'
- en: '| 0 | 1 | 1 |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 1 | 1 |'
- en: '| 1 | 0 | 1 |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 0 | 1 |'
- en: '| 1 | 1 | 0 |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 1 | 0 |'
- en: 'It''s interesting to note that linear classifiers ([https://en.wikipedia.org/wiki/Linear_classifier](https://en.wikipedia.org/wiki/Linear_classifier))
    are not able to learn the XOR transformation. However, we can solve this problem
    with a simple neural network with two neurons in the input layer, one hidden layer
    with two neurons, and an output layer with one neuron (binary classification),
    demonstrated as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，线性分类器 ([https://en.wikipedia.org/wiki/Linear_classifier](https://en.wikipedia.org/wiki/Linear_classifier))
    无法学习 XOR 转换。然而，我们可以通过一个简单的神经网络来解决这个问题，该网络有两个输入层神经元、一个隐藏层（包含两个神经元）和一个输出层（包含一个神经元，进行二分类），如下所示：
- en: '![Getting started with TensorFlow](img/B09699_06_07.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![开始使用 TensorFlow](img/B09699_06_07.jpg)'
- en: XOR neural network
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: XOR 神经网络
- en: Note
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Note**: You can install TensorFlow directly from the Notebook by using the following
    command:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：你可以通过以下命令直接从 Notebook 安装 TensorFlow：'
- en: '[PRE0]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As always, don't forget to restart the kernel after any successful install.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 像往常一样，在成功安装任何内容后，别忘了重启内核。
- en: 'To create the input and output layer tensors, we use the `tf.placeholder` API,
    as shown in the following code:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建输入层和输出层的张量，我们使用`tf.placeholder` API，如下代码所示：
- en: '[PRE1]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then, we use the `tf.Variable` API ([https://www.tensorflow.org/programmers_guide/variables](https://www.tensorflow.org/programmers_guide/variables))
    to initialize the random value for the matrices ![Getting started with TensorFlow](img/B09699_new_01.jpg),
    and ![Getting started with TensorFlow](img/B09699_new_02.jpg) corresponding to
    the hidden layer and the output layer:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用`tf.Variable` API ([https://www.tensorflow.org/programmers_guide/variables](https://www.tensorflow.org/programmers_guide/variables))
    初始化矩阵的随机值！[TensorFlow入门](img/B09699_new_01.jpg) 和 ![TensorFlow入门](img/B09699_new_02.jpg)，分别对应隐藏层和输出层：
- en: '[PRE2]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'For the activation function, we use the sigmoid function:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 对于激活函数，我们使用sigmoid函数：
- en: Note
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Note**: For simplicity, we omit to introduce the bias.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：为了简化，我们省略了偏置的介绍。'
- en: '[PRE3]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'For the cost function, we use the **MSE** (short for, **mean square error**):'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 对于损失函数，我们使用**MSE**（即**均方误差**）：
- en: '[PRE4]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'With all the tensors in place in the graph, we can now proceed with the training
    by using the `tf.train.GradientDescentOptimizer` with a learning rate of `0.05` to minimize
    our cost function:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在图中的所有张量就位后，我们可以使用`tf.train.GradientDescentOptimizer`，学习率为`0.05`，来最小化我们的损失函数，开始训练：
- en: '[PRE5]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can find the code file here:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里找到代码文件：
- en: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode1.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode1.py)'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode1.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode1.py)'
- en: The preceding code introduces the concept of a TensorFlow `Session` for the
    first time, which is a foundational part of the framework. In essence, any TensorFlow
    operation must be executed within the context of `Session` by using its `run`
    method. Sessions also maintain resources that need to be explicitly released using
    the `close` method. For convenience, the `Session` class supports the context
    management protocol by providing an `__enter__` and `__exit__` method. This allows
    the caller to call TensorFlow operations using the `with` statement ([https://docs.python.org/3/whatsnew/2.6.html#pep-343-the-with-statement](https://docs.python.org/3/whatsnew/2.6.html#pep-343-the-with-statement))
    and have the resources automatically freed.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码首次引入了TensorFlow `Session` 的概念，这是框架的基础部分。实际上，任何TensorFlow操作必须在`Session`的上下文中执行，使用其`run`方法。会话还维护需要显式释放的资源，通过`close`方法来释放。为了方便，`Session`类通过提供`__enter__`和`__exit__`方法支持上下文管理协议。这允许调用者使用`with`语句
    ([https://docs.python.org/3/whatsnew/2.6.html#pep-343-the-with-statement](https://docs.python.org/3/whatsnew/2.6.html#pep-343-the-with-statement))
    来调用TensorFlow操作，并自动释放资源。
- en: 'The following pseudo-code shows a typical structure of a TensorFlow execution:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 以下伪代码展示了一个典型的TensorFlow执行结构：
- en: '[PRE6]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In this section, we quickly explored the low-level TensorFlow APIs to build
    a simple neural network that learned the XOR transformation. In the next section,
    we'll explore the higher level estimator APIs that provide an abstraction layer
    on top of the low-level API.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们快速探讨了低级TensorFlow API，构建了一个简单的神经网络，学习了XOR转换。在下一节中，我们将探讨提供高级抽象层的更高层次的估计器API。
- en: Simple classification with DNNClassifier
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用DNNClassifier进行简单的分类
- en: Note
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Note**: This section discusses the source code for a sample PixieApp. If you
    want to follow along, it might be easier to download the complete Notebook at
    this location:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：本节讨论了一个示例PixieApp的源代码。如果你想跟着操作，可能更容易直接下载完整的Notebook文件，位于这个位置：'
- en: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/TensorFlow%20classification.ipynb](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/TensorFlow%20classification.ipynb)'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/TensorFlow%20classification.ipynb](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/TensorFlow%20classification.ipynb)'
- en: Before we look at using Tensors, Graphs, and Sessions from the low-level TensorFlow
    APIs, it would be good to get familiar with the high-level API provided in the
    `Estimators` package. In this section, we build a simple PixieApp that takes a
    pandas DataFrame as input and trains a classification model with the categorical
    output.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始使用低级 TensorFlow API 中的张量、图和会话之前，先熟悉一下 `Estimators` 包提供的高级 API 是很有帮助的。在这一部分，我们构建了一个简单的
    PixieApp，它接受 pandas DataFrame 作为输入，并训练一个具有类别输出的分类模型。
- en: Note
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Note**: There are essentially two types of classification output: categorical
    and continuous. In a categorical classifier model, the output can only be chosen
    from a list of finite predefined values with or without a logical order. We commonly
    call binary classification a classification model with only two classes. On the
    other hand, the continuous output can have any numerical values.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：分类输出基本上有两种类型：类别型和连续型。在类别型分类模型中，输出只能从有限的预定义值列表中选择，且可能有或没有逻辑顺序。我们通常称二分类为只有两个类别的分类模型。另一方面，连续输出可以有任何数值。'
- en: The user is first asked to choose a numerical column to predict on, and a classification
    model is trained on all the other numerical columns present in the DataFrame.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 用户首先需要选择一个数值列进行预测，然后使用数据框中所有其他数值列训练一个分类模型。
- en: Note
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Note**: Some of the code of this sample app is adapted from [https://github.com/tensorflow/models/tree/master/samples/core/get_started](https://github.com/tensorflow/models/tree/master/samples/core/get_started).'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：这个示例应用的一些代码改编自 [https://github.com/tensorflow/models/tree/master/samples/core/get_started](https://github.com/tensorflow/models/tree/master/samples/core/get_started)。'
- en: 'For this example, we''ll use built-in sample dataset #7: Boston Crime data,
    two-week sample, but you could use any other dataset as long it has sufficient
    data and numerical columns.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '对于这个示例，我们将使用内置的示例数据集 #7：波士顿犯罪数据，两周的样本数据，但你也可以使用任何其他数据集，只要它有足够的数据和数值列。'
- en: 'As a reminder, you can browse the PixieDust built-in datasets using the following
    code:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 提醒一下，你可以使用以下代码浏览 PixieDust 内置的数据集：
- en: '[PRE7]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![Simple classification with DNNClassifier](img/B09699_06_08.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![使用 DNNClassifier 进行简单分类](img/B09699_06_08.jpg)'
- en: List of built-in datasets in PixieDust
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: PixieDust 中的内置数据集列表
- en: 'The following code loads the *Boston Crime* dataset using the `sampleData()`
    API:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码使用 `sampleData()` API 加载 *波士顿犯罪* 数据集：
- en: '[PRE8]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'As always, we first start by exploring the data using the `display()` command.
    The goal here is to look for a suitable column to predict on:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 和往常一样，我们首先通过 `display()` 命令探索数据。这里的目标是寻找一个合适的列进行预测：
- en: '[PRE9]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![Simple classification with DNNClassifier](img/B09699_06_09.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![使用 DNNClassifier 进行简单分类](img/B09699_06_09.jpg)'
- en: Table view of the crime dataset
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 犯罪数据集的表格视图
- en: 'It looks like `nonviolent` is a good candidate for binary classification. Let''s
    now bring up a bar chart to make sure we have a good data distribution in this
    column:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来 `nonviolent` 是一个适合二分类的良好候选项。现在让我们展示一个条形图，以确保该列的数据分布良好：
- en: '![Simple classification with DNNClassifier](img/B09699_06_10.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![使用 DNNClassifier 进行简单分类](img/B09699_06_10.jpg)'
- en: Select the nonviolent column in the option dialog
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在选项对话框中选择非暴力列
- en: 'Clicking **OK** produces the following chart:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 **OK** 会生成以下图表：
- en: '![Simple classification with DNNClassifier](img/B09699_06_11.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![使用 DNNClassifier 进行简单分类](img/B09699_06_11.jpg)'
- en: Distribution of nonviolent crimes
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 非暴力犯罪分布
- en: Unfortunately, the data is skewed toward nonviolent crimes, but we have close
    to 2,000 data points for violent crimes, which, for the purpose of this sample
    application, should be OK.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，数据倾向于非暴力犯罪，但我们有接近 2,000 个暴力犯罪的数据点，对于这个示例应用程序来说，应该足够了。
- en: We are now ready to create the `do_training` method that will use a `tf.estimator.DNNClassifier`
    to create a classification model.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在准备创建 `do_training` 方法，使用 `tf.estimator.DNNClassifier` 创建一个分类模型。
- en: Note
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Note**: You can find more information on `DNNClassifier` and other high-level
    TensorFlow estimators here:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：你可以在这里找到更多关于 `DNNClassifier` 和其他高级 TensorFlow 估算器的信息：'
- en: '[https://www.tensorflow.org/api_docs/python/tf/estimator](https://www.tensorflow.org/api_docs/python/tf/estimator)'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.tensorflow.org/api_docs/python/tf/estimator](https://www.tensorflow.org/api_docs/python/tf/estimator)'
- en: 'The `DNNClassifier` constructor takes a lot of optional parameters. In our
    sample application, we''ll only use three of them, but I encourage you to take
    a look at the other parameters in the documentation:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`DNNClassifier` 构造函数有很多可选参数。在我们的示例应用中，我们只会使用其中三个，但我鼓励你查看文档中的其他参数：'
- en: '`feature_columns`: An iterable of `feature_column._FeatureColumn` model inputs.
    In our case, we can just create an array from the numerical columns of the pandas
    DataFrame using Python comprehension.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`feature_columns`：`feature_column._FeatureColumn`模型输入的可迭代对象。在我们的例子中，我们可以使用Python推导式仅通过pandas
    DataFrame的数值列创建一个数组。'
- en: '`hidden_units`: An iterable of a number of hidden layers per unit. Here, we''ll use only
    two layers with 10 nodes each.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hidden_units`：每个单元隐藏层数的可迭代对象。在这里，我们只使用两个层，每个层有10个节点。'
- en: '`n_classes`: The number of label classes. We''ll infer this number by grouping
    the DataFrame on the predictor columns and count the rows.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`n_classes`：标签类别的数量。我们将通过对预测列进行分组并计算行数来推断此数字。'
- en: 'Here''s the code for the `do_training` method:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`do_training`方法的代码：
- en: '[PRE10]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can find the code file here:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里找到代码文件：
- en: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode2.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode2.py)'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode2.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode2.py)'
- en: The `classifier.train` method uses a `train_input_fn` method that is responsible
    for providing training input data (a.k.a ground truth) as minibatches, returning
    either a `tf.data.Dataset` or a tuple of `(features, labels)`. Our code is also
    performing a model evaluation using `classifier.evaluate` to validate the accuracy
    by scoring the model against the test dataset and comparing the results in the
    given label. The results are then returned as part of the function output.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`classifier.train`方法使用一个`train_input_fn`方法，负责以小批量的形式提供训练输入数据（即真实标签），返回一个`tf.data.Dataset`或`(features,
    labels)`元组。我们的代码还通过`classifier.evaluate`进行模型评估，通过对测试数据集进行评分并将结果与给定标签进行比较来验证准确性。结果随后作为函数输出的一部分返回。'
- en: 'This method requires an `eval_input_fn` method that is similar to the `train_input_fn`,
    with the exception that we do not make the dataset repeatable during evaluation.
    Since the two methods share most of the same code, we use a helper method called
    `input_fn` that is called by both methods with the appropriate flag:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法需要一个与`train_input_fn`类似的`eval_input_fn`方法，唯一的区别是在评估过程中我们不使数据集可重复。由于这两个方法共享大部分相同的代码，我们使用一个名为`input_fn`的辅助方法，该方法由两个方法调用，并带有适当的标志：
- en: '[PRE11]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can find the code file here:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里找到代码文件：
- en: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode3.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode3.py)'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode3.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode3.py)'
- en: The next step is to build the PixieApp that will create the classifier from
    a pandas DataFrame passed as input to the `run` method. The main screen builds
    a list of all the numerical columns into a drop-down control and asks the user
    to select a column that will be used as the classifier output. This is done in
    the following code using a Jinja2 `{%for ...%}` loop iterating over the DataFrame
    passed as input that is referenced using the `pixieapp_entity` variable.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是构建PixieApp，它将从传递给`run`方法的pandas DataFrame创建分类器。主屏幕构建了所有数值列的下拉列表，并要求用户选择一个将用作分类器输出的列。这是通过以下代码完成的，使用Jinja2
    `{%for ...%}` 循环遍历作为输入传递的DataFrame，DataFrame通过`pixieapp_entity`变量引用。
- en: Note
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Note**: The following code uses the `[[SimpleClassificationDNN]]` notation
    to denote that it is incomplete code from the specified class. Do not try to run
    this code yet until the full implementation is provided.'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：以下代码使用`[[SimpleClassificationDNN]]`符号表示它是指定类的不完整代码。请勿尝试运行此代码，直到提供完整实现为止。'
- en: '[PRE12]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can find the code file here:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里找到代码文件：
- en: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode4.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode4.py)'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode4.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode4.py)'
- en: 'Using the `crimes` dataset, we run the PixieApp with the following code:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`crimes`数据集，我们通过以下代码运行PixieApp：
- en: '[PRE13]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Note
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Note**: The PixieApp code is incomplete at this time, but we can still see
    the results of the welcome page, as shown in the following screenshot:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：此时PixieApp代码尚不完整，但我们仍然可以看到欢迎页面的结果，如下图所示：'
- en: '![Simple classification with DNNClassifier](img/B09699_06_12.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![使用DNNClassifier的简单分类](img/B09699_06_12.jpg)'
- en: The main screen showing the list of columns in the input pandas DataFrame
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 显示输入 pandas DataFrame 列表的主屏幕
- en: 'When the user selects the prediction column (for example, `nonviolent`), a
    new `prepare_training` route is triggered by the attribute: `pd_options="predictor=$val(cols{{prefix}})"`.
    This route will show two bar charts showing the output class distribution for
    both the training and test sets that are randomly selected using an 80/20 split
    from the original dataset.'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户选择预测列（例如 `nonviolent`）时，通过属性 `pd_options="predictor=$val(cols{{prefix}})"`
    会触发一个新的 `prepare_training` 路由。该路由将显示两个条形图，分别显示训练集和测试集的输出类别分布，这些数据是通过从原始数据集中以 80/20
    的比例随机选取得到的。
- en: Note
  id: totrans-158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Note**: We use an 80/20 split between training and test sets, which, from
    my experience, is quite common. Of course, this is not an absolute rule and could
    be adjusted depending on the use case'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：我们在训练集和测试集之间使用 80/20 的分割比例，从我的经验来看，这种做法很常见。当然，这不是绝对规则，根据具体情况可以进行调整。'
- en: The screen fragment also includes a button to start training the classifier.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 屏幕片段还包括一个按钮，用于启动训练分类器。
- en: 'The code for the `prepare_training` route is shown here:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '`prepare_training` 路由的代码如下所示：'
- en: '[PRE14]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Note
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can find the code file here:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在此找到代码文件：
- en: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode5.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode5.py)'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode5.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode5.py)'
- en: '**Note**: `@templateArgs` is used due to the fact that we compute the `bar_chart_options`
    variable once and then use it in the Jinja2 template.'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：由于我们计算了 `bar_chart_options` 变量一次，并且在 Jinja2 模板中使用它，所以使用了 `@templateArgs`。'
- en: 'Selecting the `nonviolent` prediction column gives us the following screenshot
    result:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 选择 `nonviolent` 预测列将给我们以下截图结果：
- en: '![Simple classification with DNNClassifier](img/B09699_06_13.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![使用 DNNClassifier 进行简单分类](img/B09699_06_13.jpg)'
- en: Pretraining screen
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 预训练屏幕
- en: 'The **Start Training** button invokes the `do_training` route using the attribute
    `pd_options="do_training=true",` which invokes the `do_training` method we created
    earlier. Note that we use the `@captureOutput` decorator because, since we set
    the TensorFlow log level to `INFO`, we want to capture the log messages and display
    them to the user. These log messages are sent back to the browser using the *stream*
    mode, and PixieDust will automatically display them as a specially created `<div>`
    element that will append the data to it as it arrives. When the training is done,
    the route returns an HTML fragment that generates a table with the evaluation metrics
    returned by the `do_training` method, as shown in the following code:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '**开始训练** 按钮通过属性 `pd_options="do_training=true",` 调用 `do_training` 路由，该路由触发我们之前创建的
    `do_training` 方法。注意，我们使用了 `@captureOutput` 装饰器，因为我们将 TensorFlow 日志级别设置为 `INFO`，所以我们希望捕获日志消息并将其显示给用户。这些日志消息会通过
    *stream* 模式返回到浏览器，PixieDust 会自动将它们显示为专门创建的 `<div>` 元素，并随着数据的到达动态追加到该元素中。当训练完成时，路由返回一个
    HTML 片段，生成一个表格，显示 `do_training` 方法返回的评估指标，如下所示的代码：'
- en: '[PRE15]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Note
  id: totrans-172
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can find the code file here:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在此找到代码文件：
- en: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode6.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode6.py)'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode6.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode6.py)'
- en: 'The following screenshot shows the results after the model has been successfully
    created and includes the evaluation metrics table for the classification model
    with an accuracy of 87%:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了模型成功创建后的结果，并包括分类模型的评估指标表，准确率为87%：
- en: '![Simple classification with DNNClassifier](img/B09699_06_14.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![使用 DNNClassifier 进行简单分类](img/B09699_06_14.jpg)'
- en: Final screen showing the result of successful training
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 显示成功训练结果的最终屏幕
- en: 'This PixieApp was run using the `crimes` dataset as an argument, as shown in
    the following code:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 PixieApp 使用 `crimes` 数据集作为参数运行，如下所示的代码所示：
- en: '[PRE16]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Once the model is successfully trained, you can access it to classify new data
    by calling the `predict` method on the `app.classifier` variable. Similar to the
    `train` and `evaluate` method, `predict` also takes an `input_fn` that constructs
    the input features.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦模型成功训练，你可以通过在 `app.classifier` 变量上调用 `predict` 方法来分类新数据。与 `train` 和 `evaluate`
    方法类似，`predict` 也接受一个 `input_fn`，用于构造输入特征。
- en: Note
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Note**: More details on the `predict` method are provided here:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：有关 `predict` 方法的更多细节，请参见此处：'
- en: '[https://www.tensorflow.org/api_docs/python/tf/estimator/DNNClassifier#predict](https://www.tensorflow.org/api_docs/python/tf/estimator/DNNClassifier#predict)'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.tensorflow.org/api_docs/python/tf/estimator/DNNClassifier#predict](https://www.tensorflow.org/api_docs/python/tf/estimator/DNNClassifier#predict)'
- en: This sample application provides a good starting point for getting familiar
    with the TensorFlow framework by using the high-level estimator APIs.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例应用程序通过使用高层次的估算器 API，为熟悉 TensorFlow 框架提供了一个很好的起点。
- en: Note
  id: totrans-185
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Note**: The complete Notebook for this sample application can be found here:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：此示例应用程序的完整笔记本可以在这里找到：'
- en: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/TensorFlow%20classification.ipynb](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/TensorFlow%20classification.ipynb)'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/TensorFlow%20classification.ipynb](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/TensorFlow%20classification.ipynb)'
- en: In the next section, we'll start building our image recognition sample application
    using the low-level TensorFlow APIs, including Tensors, Graphs, and Sessions.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一部分，我们将开始使用低级 TensorFlow API（包括张量、图和会话）构建我们的图像识别示例应用程序。
- en: Image recognition sample application
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图像识别示例应用程序
- en: When it comes to building an open-ended application, you want to start by defining
    the requirements for an **MVP** (short for, **Minimum Viable Product**) version
    that contains just enough functionalities to make it usable and valuable to your
    users. When it comes to making technical decisions for your implementation, making
    sure that you get a working end-to-end implementation as quickly as possible,
    without investing too much time, is a very important criteria. The idea is that
    you want to start small so that you can quickly iterate and improve your application.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 当谈到构建一个开放式应用程序时，你应该从定义**MVP**（即**最小可行产品**）版本的需求开始，该版本仅包含足够的功能，足以使其对用户有用且有价值。在做技术决策时，确保你能够尽快获得一个完整的端到端实现，而不会投入过多时间，这是一个非常重要的标准。其核心思想是，你需要从小做起，这样你可以快速迭代并改进应用程序。
- en: 'For the MVP of our image recognition sample application, we''ll use the following
    requirements:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们图像识别示例应用程序的 MVP，我们将使用以下要求：
- en: 'Don''t build a model from scratch; instead, reuse one of the pretrained generic
    **convolutional neural network** (**CNN**: [https://en.wikipedia.org/wiki/Convolutional_neural_network](https://en.wikipedia.org/wiki/Convolutional_neural_network))
    models that are publicly available, such as MobileNet. We can always retrain these
    models later with custom training images using transfer learning ([https://en.wikipedia.org/wiki/Transfer_learning](https://en.wikipedia.org/wiki/Transfer_learning)).'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要从头开始构建模型；而是重用公开可用的预训练通用**卷积神经网络**（**CNN**：[https://en.wikipedia.org/wiki/Convolutional_neural_network](https://en.wikipedia.org/wiki/Convolutional_neural_network)）模型，如
    MobileNet。我们可以稍后使用迁移学习（[https://en.wikipedia.org/wiki/Transfer_learning](https://en.wikipedia.org/wiki/Transfer_learning)）用自定义训练图像重新训练这些模型。
- en: For MVP, while we are focusing on scoring only and not training, we should still
    make it interesting for the users. So let's build a PixieApp that allows the user
    to input the URL of a web page and display all the images scraped from the page,
    including the classification output inferred by our model.
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 MVP，我们虽然只关注评分而不涉及训练，但仍应确保应用程序对用户有吸引力。所以让我们构建一个 PixieApp，允许用户输入网页的 URL，并显示从页面中抓取的所有图片，包括我们的模型推断的分类输出。
- en: Since we are learning about deep learning neural networks and TensorFlow, it
    would be great if we could display the TensorBoard Graph Visualization ([https://www.tensorflow.org/programmers_guide/graph_viz](https://www.tensorflow.org/programmers_guide/graph_viz))
    in the Jupyter Notebook directly without forcing the user to use another tool.
    This will provide a better user experience and increase their engagement with
    the application.
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于我们正在学习深度学习神经网络和 TensorFlow，如果我们能够在 Jupyter Notebook 中直接显示 TensorBoard 图形可视化（[https://www.tensorflow.org/programmers_guide/graph_viz](https://www.tensorflow.org/programmers_guide/graph_viz)），而不强迫用户使用其他工具，那将会非常棒。这将提供更好的用户体验，并增强用户与应用程序的互动。
- en: Note
  id: totrans-195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Note**: The implementation of the application in this section is adapted
    from the tutorial:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：本节中的应用程序实现是根据以下教程改编的：'
- en: '[https://codelabs.developers.google.com/codelabs/tensorflow-for-poets](https://codelabs.developers.google.com/codelabs/tensorflow-for-poets)'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://codelabs.developers.google.com/codelabs/tensorflow-for-poets](https://codelabs.developers.google.com/codelabs/tensorflow-for-poets)'
- en: Part 1 – Load the pretrained MobileNet model
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第 1 部分 – 加载预训练的 MobileNet 模型
- en: Note
  id: totrans-199
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Note**: You can download the completed Notebook to follow this section discussion
    here:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：你可以下载完成的Notebook来跟进本节讨论：'
- en: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/Tensorflow%20VR%20Part%201.ipynb](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/Tensorflow%20VR%20Part%201.ipynb)'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/Tensorflow%20VR%20Part%201.ipynb](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/Tensorflow%20VR%20Part%201.ipynb)'
- en: There are plenty of publicly available image classification models, using CNNs,
    that are pretrained on large image databases such as ImageNet ([http://www.image-net.org](http://www.image-net.org)).
    ImageNet has started multiple public challenges, such as the **ImageNet Large
    Scale Visual Recognition Challenge** (**ILSVRC**) or the *ImageNet Object Localization
    Challenge* on Kaggle ([https://www.kaggle.com/c/imagenet-object-localization-challenge](https://www.kaggle.com/c/imagenet-object-localization-challenge)),
    with very interesting results.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多公开可用的图像分类模型，使用CNNs，且在如ImageNet等大型图像数据库上进行了预训练。ImageNet发起了多个公开挑战，如**ImageNet大规模视觉识别挑战赛**（**ILSVRC**）或Kaggle上的*ImageNet物体定位挑战*（[https://www.kaggle.com/c/imagenet-object-localization-challenge](https://www.kaggle.com/c/imagenet-object-localization-challenge)），并取得了非常有趣的结果。
- en: These challenges have produced multiple models, such as ResNet, Inception, SqueezeNet,
    VGGNet, or Xception, each using a different neural network architecture. Going
    over each of these architectures is beyond the scope of this book, but even if
    you are not yet an expert in machine learning (which I am definitely not), I encourage
    you to read about them online. The model I've selected for this sample application
    is MobileNet because it is small, fast, and very accurate. It provides an image
    classification model for 1,000 categories of images, which is sufficient for this
    sample application.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 这些挑战催生了多个模型，如ResNet、Inception、SqueezeNet、VGGNet或Xception，每个模型都使用不同的神经网络架构。详细讲解每个架构超出了本书的范围，但即使你还不是机器学习专家（我也绝对不是），我也鼓励你在网上阅读相关内容。为了这个示例应用，我选择了MobileNet模型，因为它小巧、快速且非常准确。它提供了一个包含1,000个类别的图像分类模型，足以满足此示例应用的需求。
- en: 'To ensure the stability of the code, I''ve made a copy of the model in the
    GitHub repo: [https://github.com/DTAIEB/Thoughtful-Data-Science/tree/master/chapter%206/Visual%20Recognition/mobilenet_v1_0.50_224](https://github.com/DTAIEB/Thoughtful-Data-Science/tree/master/chapter%206/Visual%20Recognition/mobilenet_v1_0.50_224).'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保代码的稳定性，我已在GitHub仓库中创建了模型的副本：[https://github.com/DTAIEB/Thoughtful-Data-Science/tree/master/chapter%206/Visual%20Recognition/mobilenet_v1_0.50_224](https://github.com/DTAIEB/Thoughtful-Data-Science/tree/master/chapter%206/Visual%20Recognition/mobilenet_v1_0.50_224)。
- en: 'In this directory, you can find the following files:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个目录中，你可以找到以下文件：
- en: '`frozen_graph.pb`: A serialized binary version of the TensorFlow graph'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`frozen_graph.pb`：TensorFlow图的序列化二进制版本'
- en: '`labels.txt`: A text file that includes a description of the 1,000 image categories
    and their index'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`labels.txt`：包含1,000个图像类别及其索引的文本文件'
- en: '`quantized_graph.pb`: A compressed form of the model graph that used an 8-bit
    fixed point representation'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`quantized_graph.pb`：采用8位定点表示的模型图的压缩形式'
- en: 'Loading the model consists of building a `tf.graph` object and associated labels.
    Since we may want to load multiple models in the future, we first define a dictionary
    that provides metadata about the model:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 加载模型的过程包括构建一个`tf.graph`对象及相关标签。由于未来可能会加载多个模型，因此我们首先定义一个字典，用来提供有关模型的元数据：
- en: '[PRE17]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Note
  id: totrans-211
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can find the file here:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里找到文件：
- en: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode7.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode7.py)'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode7.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode7.py)'
- en: 'Each key in the preceding `models` dictionary represents the metadata of a
    particular model:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的`models`字典中，每个键代表特定模型的元数据：
- en: '`base_url`: Points to the URL where the files are stored'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`base_url`：指向文件存储的URL'
- en: '`model_file_url`: The name of the model file that is assumed to be relative
    to `base_url`'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`model_file_url`：假定相对于`base_url`的模型文件名称'
- en: '`label_file`: The name of the labels that are assumed to be relative to `base_url`'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`label_file`：假定相对于`base_url`的标签文件名称'
- en: '`output_layer`: The name of the output layer that provides final scoring for
    each category'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`output_layer`：提供每个类别最终得分的输出层名称'
- en: 'We implement a `get_model_attribute` helper method to facilitate reading from
    the `model` metadata, which will be very useful throughout our application:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 我们实现了一个`get_model_attribute`辅助方法，以便从`model`元数据中读取内容，这在我们整个应用程序中都非常有用：
- en: '[PRE18]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Note
  id: totrans-221
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can find the code file here:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里找到代码文件：
- en: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode8.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode8.py)'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode8.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode8.py)'
- en: 'To load the graph, we download the binary file, load it into a `tf.GraphDef`
    object using the `ParseFromString` method, and we then invoke the `tf.import_graph_def`
    method using the graph as the current content manager:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 为了加载图形，我们下载二进制文件，使用`ParseFromString`方法将其加载到`tf.GraphDef`对象中，然后我们调用`tf.import_graph_def`方法，将图形作为当前内容管理器：
- en: '[PRE19]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Note
  id: totrans-226
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can find the code file here:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里找到代码文件：
- en: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode9.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode9.py)'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode9.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode9.py)'
- en: 'The method that loads the labels returns either a JSON object or an array (we''ll
    see later that both are needed). The following code uses a Python list comprehension
    to iterate over the lines returned by the `requests.get` call. It then uses the
    `as_json` flag to format the data as appropriate:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 加载标签的方法返回一个JSON对象或一个数组（稍后我们会看到这两者都需要）。以下代码使用Python列表推导式迭代`requests.get`调用返回的行。然后，它使用`as_json`标志将数据格式化为适当的形式：
- en: '[PRE20]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Note
  id: totrans-231
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can find the code file here:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里找到代码文件：
- en: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode10.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode10.py)'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode10.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode10.py)'
- en: 'The next step is to invoke the model to classify images. To make it simpler
    and perhaps more valuable, we ask the user to provide a URL to an HTML page that
    contains the images to be classified. We''ll use the BeautifulSoup4 library to
    help parsing the page. To install BeautifulSoup4, simply run the following command:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是调用模型来分类图像。为了简化操作并可能提高其价值，我们要求用户提供一个包含待分类图像的HTML页面的URL。我们将使用BeautifulSoup4库来帮助解析页面。要安装BeautifulSoup4，只需运行以下命令：
- en: '[PRE21]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Note
  id: totrans-236
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Note**: As always, don''t forget to restart the kernel once installation
    is complete.'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：像往常一样，安装完成后不要忘记重启内核。'
- en: 'The following `get_image_urls` method takes a URL as an input, downloads the
    HTML, instantiates a BeautifulSoup parser and extracts all the images found in
    any `<img>` elements and `background-image` styles. BeautifulSoup has a very elegant
    and easy-to-use API for parsing HTML. Here, we simply use the `find_all` method
    to find all `<img>` elements and the `select` method to select all elements with
    an inline style. The reader will be quick to notice that there are many other
    ways to create images using HTML that we are not discovering, such as, for example,
    images declared as CSS classes. As always, if you have the interest and time to
    improve it, I strongly welcome pull requests in the GitHub repo (see here for
    instructions on how to create a pull request: [https://help.github.com/articles/creating-a-pull-request](https://help.github.com/articles/creating-a-pull-request)).'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 以下`get_image_urls`方法接受一个URL作为输入，下载HTML，实例化一个BeautifulSoup解析器，并提取所有`<img>`元素和`background-image`样式中找到的图像。BeautifulSoup提供了一个非常优雅且易于使用的API来解析HTML。在这里，我们只使用`find_all`方法来查找所有的`<img>`元素，并使用`select`方法选择所有具有内联样式的元素。读者很快会注意到，我们没有探索通过HTML创建图像的其他方式，例如，作为CSS类声明的图像。像往常一样，如果你有兴趣和时间改进它，我非常欢迎你在GitHub仓库中提交拉取请求（关于如何创建拉取请求，请参阅此处：[https://help.github.com/articles/creating-a-pull-request](https://help.github.com/articles/creating-a-pull-request)）。
- en: 'The code for `get_image_urls` looks like this:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '`get_image_urls`的代码如下：'
- en: '[PRE22]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Note
  id: totrans-241
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can find the code file here:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里找到代码文件：
- en: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode11.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode11.py)'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode11.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode11.py)'
- en: For each of the images discovered, we'll also need a helper function to download
    the images that will be passed as input to the model for classification.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 对于发现的每一张图片，我们还需要一个辅助函数来下载这些图片，这些图片将作为输入传递给模型进行分类。
- en: 'The following `download_image` method downloads the image into a temporary
    file:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 以下`download_image`方法将图片下载到临时文件：
- en: '[PRE23]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Note
  id: totrans-247
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can find the code file here:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里找到代码文件：
- en: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode12.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode12.py)'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode12.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode12.py)'
- en: Given a local path to an image, we now need to decode it into a tensor by calling
    the right decode method from the `tf.image` package, that is, the `decode_png`
    for `.png` files.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一张本地路径的图片，我们现在需要通过调用`tf.image`包中的正确解码方法将其解码为张量，也就是`.png`文件需要使用`decode_png`方法。
- en: Note
  id: totrans-251
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Note**: In mathematics, a tensor is a generalization of a vector, which is
    defined by a direction and a size, to support higher dimensionality. Vectors are
    tensors of order 1, similarly, scalars are tensors of order 0\. Intuitively, we
    can think of order 2 tensors as a two-dimensional array with values defined as
    a result of multiplying two vectors. In TensorFlow, tensors are arrays of n-dimensions.'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：在数学中，张量是向量的一个推广，向量由方向和大小定义，张量则支持更高的维度。向量是1阶张量，同样，标量是0阶张量。直观地讲，我们可以把2阶张量看作一个二维数组，其中的值是通过乘以两个向量得到的结果。在TensorFlow中，张量是n维数组。'
- en: 'After a few transformations on the image reader tensor (casting to the right
    decimal representation, resizing, and normalization), we call `tf.Session.run`
    on the normalizer tensor to execute the steps defined earlier, as shown in the
    following code:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 在对图片读取器张量进行一些转换（转换为正确的十进制表示、调整大小和归一化）之后，我们在归一化器张量上调用`tf.Session.run`以执行之前定义的步骤，如以下代码所示：
- en: '[PRE24]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Note
  id: totrans-255
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can find the code file here:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里找到代码文件：
- en: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode13.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode13.py)'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode13.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode13.py)'
- en: 'With all the pieces in place, we are now ready to implement the `score_image`
    method that takes a `tf.graph`, a model metadata, and a URL to an image as input parameters,
    and returns the top five candidate classifications based on their confidence score,
    including their labels:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有部分准备好后，我们现在可以实现`score_image`方法，该方法接受`tf.graph`、模型元数据和图片的URL作为输入参数，并根据置信度分数返回前五个候选分类，包括它们的标签：
- en: '[PRE25]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Note
  id: totrans-260
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can find the code file here:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里找到代码文件：
- en: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode14.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode14.py)'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode14.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode14.py)'
- en: 'We can now test the code using the following steps:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以使用以下步骤来测试代码：
- en: Pick the `mobilenet` model and load the corresponding graph
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`mobilenet`模型并加载对应的图
- en: Get a list of image URLs scraped from the Flickr website
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取从Flickr网站抓取的图片URL列表
- en: Call the `score_image` method for each image URL and print the result
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对每个图片URL调用`score_image`方法并打印结果
- en: 'The code is shown here:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 代码如下所示：
- en: '[PRE26]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Note
  id: totrans-269
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can find the code file here:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里找到代码文件：
- en: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode15.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode15.py)'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode15.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode15.py)'
- en: 'The results are pretty accurate (except for the first image that is a blank
    image) as shown in the following screenshot:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 结果非常准确（除了第一张是空白图片），如以下截图所示：
- en: '![Part 1 – Load the pretrained MobileNet model](img/B09699_06_15.jpg)'
  id: totrans-273
  prefs: []
  type: TYPE_IMG
  zh: '![第1部分 – 加载预训练的MobileNet模型](img/B09699_06_15.jpg)'
- en: Classification of the images found on a Flickr page related to cats
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 对与猫相关的Flickr页面上发现的图片进行分类
- en: 'Part 1 of our image recognition sample application is now complete; you can
    find the full Notebook at the following location: [https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/Tensorflow%20VR%20Part%201.ipynb](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/Tensorflow%20VR%20Part%201.ipynb).'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的图像识别示例应用程序的第1部分现已完成；您可以在以下位置找到完整的Notebook：[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/Tensorflow%20VR%20Part%201.ipynb](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/Tensorflow%20VR%20Part%201.ipynb)。
- en: In the next section, we will build a more user-friendly experience by building
    a user interface with a PixieApp.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将通过构建PixieApp的用户界面来构建一个更加用户友好的体验。
- en: Part 2 – Create a PixieApp for our image recognition sample application
  id: totrans-277
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第2部分 – 创建一个PixieApp用于我们的图像识别示例应用程序
- en: Note
  id: totrans-278
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Note**: You can download the completed Notebook to follow this section discussion
    here:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：您可以在此下载完成的Notebook，以便跟随本部分的讨论：'
- en: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/Tensorflow%20VR%20Part%202.ipynb](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/Tensorflow%20VR%20Part%202.ipynb)'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/Tensorflow%20VR%20Part%202.ipynb](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/Tensorflow%20VR%20Part%202.ipynb)'
- en: 'As a reminder, the `setup` method of a PixieApp, if defined, is executed before
    the app starts running. We use it to select our model and initialize the graph:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 提醒一下，PixieApp的`setup`方法（如果定义的话）会在应用程序开始运行之前执行。我们用它来选择模型并初始化图形：
- en: '[PRE27]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Note
  id: totrans-283
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can find the code file here:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在此找到代码文件：
- en: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode16.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode16.py)'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode16.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode16.py)'
- en: 'In the main screen of the PixieApp, we use an input box to let the user enter
    the URL to the web page, as shown in the following code snippet:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 在PixieApp的主屏幕上，我们使用一个输入框让用户输入网页的URL，如下所示的代码片段所示：
- en: '[PRE28]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Note
  id: totrans-288
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can find the code file here:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在此找到代码文件：
- en: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode17.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode17.py)'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode17.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode17.py)'
- en: For convenience, we initialize the input text with a default value of `https://www.flickr.com/search/?text=cats`.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便起见，我们将输入文本初始化为默认值`https://www.flickr.com/search/?text=cats`。
- en: 'We can already run the code to test the main screen by using the following code:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以使用以下代码来运行并测试主屏幕：
- en: '[PRE29]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The main screen looks like this:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 主屏幕看起来是这样的：
- en: '![Part 2 – Create a PixieApp for our image recognition sample application](img/B09699_06_16.jpg)'
  id: totrans-295
  prefs: []
  type: TYPE_IMG
  zh: '![Part 2 – 创建一个PixieApp用于我们的图像识别示例应用程序](img/B09699_06_16.jpg)'
- en: The main screen for the image recognition PixieApp
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 图像识别PixieApp的主屏幕
- en: Note
  id: totrans-297
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Note**: This is good for testing, but we should keep in mind that the `do_process_url`
    route has not yet been implemented and, therefore, clicking on the **Go** button
    will fall back to the default route again.'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：这对于测试是好的，但我们应该记住，`do_process_url`路由尚未实现，因此，点击**Go**按钮将会回退到默认路由。'
- en: Let's now implement the `do_process_url` route, which is triggered when the
    user clicks on the **Go** button. This route first calls the `get_image_urls`
    method to get the list of image URLs. Using Jinja2, we then build an HTML fragment
    that displays all the images. For each image, we asynchronously invoke the `do_score_url`
    route that runs the model and displays the results.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们实现`do_process_url`路由，它会在用户点击**Go**按钮时触发。该路由首先调用`get_image_urls`方法获取图像URL列表。然后，我们使用Jinja2构建一个HTML片段，显示所有图像。对于每个图像，我们异步调用`do_score_url`路由，运行模型并显示结果。
- en: 'The following code shows the implementation of the `do_process_url` route:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码展示了`do_process_url`路由的实现：
- en: '[PRE30]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Note
  id: totrans-302
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can find the code file here:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在此找到代码文件：
- en: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode18.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode18.py)'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode18.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode18.py)'
- en: Notice the use of the `@templateArgs` decorator, which allows the Jinja2 fragment
    to reference the local `image_urls` variable.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`@templateArgs`装饰器的使用，它允许Jinja2片段引用本地的`image_urls`变量。
- en: 'Finally, in the `do_score_url` route, we call the `score_image` and display
    the results as a list:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在 `do_score_url` 路由中，我们调用 `score_image` 并将结果以列表形式显示：
- en: '[PRE31]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Note
  id: totrans-308
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can find the code file here:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在这里找到代码文件：
- en: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode19.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode19.py)'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode19.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode19.py)'
- en: 'The following screenshot shows the results for the Flickr page that contains
    images of cats:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了包含猫咪图像的 Flickr 页面结果：
- en: '![Part 2 – Create a PixieApp for our image recognition sample application](img/B09699_06_17.jpg)'
  id: totrans-312
  prefs: []
  type: TYPE_IMG
  zh: '![第二部分 – 为我们的图像识别示例应用创建 PixieApp](img/B09699_06_17.jpg)'
- en: Results of the image classification for cats
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 猫咪的图像分类结果
- en: Note
  id: totrans-314
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'As a reminder, you can find the complete Notebook at this location:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 提醒您，您可以在此位置找到完整的 Notebook：
- en: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/Tensorflow%20VR%20Part%202.ipynb](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/Tensorflow%20VR%20Part%202.ipynb)'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/Tensorflow%20VR%20Part%202.ipynb](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/Tensorflow%20VR%20Part%202.ipynb)'
- en: Our MVP application is almost complete. In the next section, we will integrate
    the TensorBoard graph visualization directly in the Notebook.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 MVP 应用程序几乎完成。在下一节中，我们将直接在 Notebook 中集成 TensorBoard 图形可视化。
- en: Part 3 – Integrate the TensorBoard graph visualization
  id: totrans-318
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第三部分 – 集成 TensorBoard 图形可视化
- en: Note
  id: totrans-319
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Note**: Part of the code described in this section is adapted from the `deepdream`
    notebook located here:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：本节中描述的部分代码改编自位于此处的 `deepdream` notebook：'
- en: '[https://github.com/tensorflow/tensorflow/blob/master/tensorflow/examples/tutorials/deepdream/deepdream.ipynb](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/examples/tutorials/deepdream/deepdream.ipynb)'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/tensorflow/tensorflow/blob/master/tensorflow/examples/tutorials/deepdream/deepdream.ipynb](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/examples/tutorials/deepdream/deepdream.ipynb)'
- en: 'You can download the completed Notebook to follow this section discussion here:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在这里下载完整的 Notebook 来跟随本节内容：
- en: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/Tensorflow%20VR%20Part%203.ipynb](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/Tensorflow%20VR%20Part%203.ipynb)'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/Tensorflow%20VR%20Part%203.ipynb](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/Tensorflow%20VR%20Part%203.ipynb)'
- en: 'TensorFlow comes with a very powerful suite of visualizations that help with
    debugging and performance optimization of your application. Please take a moment to
    explore the TensorBoard capabilities here: [https://www.tensorflow.org/programmers_guide/summaries_and_tensorboard](https://www.tensorflow.org/programmers_guide/summaries_and_tensorboard).'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: TensorFlow 提供了一套非常强大的可视化工具，帮助调试和优化应用程序性能。请花点时间在这里探索 TensorBoard 的功能：[https://www.tensorflow.org/programmers_guide/summaries_and_tensorboard](https://www.tensorflow.org/programmers_guide/summaries_and_tensorboard)。
- en: 'One issue here is that configuring the TensorBoard server to work with your
    Notebook could be difficult, especially if your Notebooks are hosted on the cloud,
    and you have little to no access to the underlying operating systems. In this
    case, configuring and starting the TensorBoard server could prove to be an impossible
    task. In this section, we show how to work around this problem by integrating
    the model graph visualization directly in your Notebook with zero configuration
    required. To provide a better user experience, we want to add the TensorBoard
    visualization to our PixieApp. We do that by changing the main layout to a tab
    layout and assign the TensorBoard visualization to its own tab. Conveniently,
    PixieDust provides a base PixieApp called `TemplateTabbedApp` that takes care
    of building a tabbed layout. When using `TemplateTabbedApp` as the base class,
    we need to configure the tab in the `setup` method as follows:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的一个问题是，将 TensorBoard 服务器配置为与您的 Notebook 一起使用可能会很困难，特别是当您的 Notebooks 托管在云端时，且您几乎无法访问底层操作系统。在这种情况下，配置和启动
    TensorBoard 服务器可能会变得几乎不可能。在本节中，我们展示了如何通过将模型图形可视化直接集成到 Notebook 中来解决这个问题，无需任何配置。为了提供更好的用户体验，我们希望将
    TensorBoard 可视化功能添加到我们的 PixieApp 中。我们通过将主布局更改为选项卡布局，并将 TensorBoard 可视化分配到单独的选项卡中来实现这一点。方便的是，PixieDust
    提供了一个名为 `TemplateTabbedApp` 的基础 PixieApp，它负责构建选项卡布局。当使用 `TemplateTabbedApp` 作为基类时，我们需要在
    `setup` 方法中配置选项卡，如下所示：
- en: '[PRE32]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Note
  id: totrans-327
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can find the code file here:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在这里找到代码文件：
- en: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode20.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode20.py)'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode20.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode20.py)'
- en: It should be noted that in the preceding code, we have added the `LabelsApp`
    child PixieApp to the list of tabs even though it hasn't yet been implemented.
    Therefore, as expected, if you run the code as is, the `Labels` tab will fail.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，在前面的代码中，我们已经将`LabelsApp`子PixieApp添加到了标签页列表中，尽管它尚未实现。因此，正如预期的那样，如果直接运行这段代码，`Labels`标签将会失败。
- en: '`self.apps` contains an array of objects that define the tabs:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: '`self.apps`包含一个对象数组，用于定义标签页：'
- en: '`title`: Tab title'
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`title`：标签页标题'
- en: '`app_class`: PixieApp to run when the tab is selected'
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app_class`: 选中标签时运行的PixieApp'
- en: 'In `ImageRecoApp`, we configure three tabs associated with three child PixieApps:
    the `ScoreImageApp` that we''ve already created in *Part 2 – Create a PixieApp
    for our image recognition sample application*, the `TensorGraphApp` for displaying
    the model graph, and the `LabelsApp` to display a table of all the labeled categories
    used in the model.'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 在`ImageRecoApp`中，我们配置了三个与三个子PixieApps相关联的标签页：我们在*第2部分 – 为图像识别示例应用创建PixieApp*中已经创建的`ScoreImageApp`，用于显示模型图的`TensorGraphApp`，以及用于显示模型中所有标注类别的表格的`LabelsApp`。
- en: 'The results are shown in the following screenshot:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 结果显示在以下截图中：
- en: '![Part 3 – Integrate the TensorBoard graph visualization](img/B09699_06_18.jpg)'
  id: totrans-336
  prefs: []
  type: TYPE_IMG
  zh: '![第3部分 – 集成TensorBoard图形可视化](img/B09699_06_18.jpg)'
- en: Tabbed layout that includes Score, Model, and Labels
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 包含Score、Model和Labels的标签布局
- en: What's also nice about using `TemplateTabbedApp` superclass is that the sub-PixieApps
    are defined separately, which makes the code more maintainable and reusable.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`TemplateTabbedApp`超类的另一个优点是，子PixieApps是分开定义的，这使得代码更易于维护和重用。
- en: Let's first look at the `TensorGraphApp` PixieApp. Its main route returns an
    HTML fragment that loads the `tf-graph-basic.build.html` into an Iframe from `https://tensorboard.appspot.com,`
    and using a JavaScript load listener applies the serialized graph definition that
    was computed using the `tf.Graph.as_graph_def` method. To make sure the graph
    definition remains at a reasonable size, and to avoid unnecessary performance
    degradation on the browser client, we call the `strip_consts` method to remove
    tensors with constant values that have a large size.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 首先来看一下`TensorGraphApp` PixieApp。它的主路由返回一个HTML片段，该片段从`https://tensorboard.appspot.com`的Iframe加载`tf-graph-basic.build.html`，并使用JavaScript加载监听器应用通过`tf.Graph.as_graph_def`方法计算得到的序列化图定义。为了确保图定义保持在合理的大小，并避免在浏览器客户端上不必要的性能下降，我们调用`strip_consts`方法删除具有大尺寸常量值的张量。
- en: 'The code for `TensorGraphApp` is shown here:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: '`TensorGraphApp`的代码如下所示：'
- en: '[PRE33]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Note
  id: totrans-342
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can find the code file here:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里找到代码文件：
- en: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode21.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode21.py)'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode21.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode21.py)'
- en: '**Note**: Child PixieApps have access to their parent PixieApp through the
    `self.parent_pixieapp` variables.'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：子PixieApps可以通过`self.parent_pixieapp`变量访问其父PixieApp。'
- en: The resulting screen for the `TensorGraphApp` child PixieApp is shown in the
    following screenshot. It provides an interactive visualization of the TensorFlow
    graph for the selected model, allowing the user to navigate through the different
    nodes and to drill down deeper into the model. However, it is important to note
    that the visualization runs entirely within the browser, without the TensorBoard
    server. Therefore, some of the functions available in the full TensorBoard, such
    as runtime statistics, are disabled.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '`TensorGraphApp`子PixieApp的结果屏幕如以下截图所示。它提供了选定模型的TensorFlow图的交互式可视化，允许用户浏览不同的节点，并深入探索模型。然而，重要的是要注意，整个可视化是在浏览器内运行的，而没有使用TensorBoard服务器。因此，TensorBoard中的一些功能，如运行时统计信息，是禁用的。'
- en: '![Part 3 – Integrate the TensorBoard graph visualization](img/B09699_06_19.jpg)'
  id: totrans-347
  prefs: []
  type: TYPE_IMG
  zh: '![第3部分 – 集成TensorBoard图形可视化](img/B09699_06_19.jpg)'
- en: Displaying the model graph for MobileNet V1
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 显示MobileNet V1的模型图
- en: 'In the `LabelsApp` PixieApp, we simply load the labels as JSON format, and display it in
    a PixieDust table, using the `handlerId=tableView` option:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 在`LabelsApp` PixieApp中，我们只是将标签作为JSON格式加载，并使用`handlerId=tableView`选项在PixieDust表格中显示它。
- en: '[PRE34]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Note
  id: totrans-351
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can find the code file here:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在此找到代码文件：
- en: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode22.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode22.py)'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode22.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode22.py)'
- en: '**Note**: We configure the table to not show the schema by setting `table_noschema`
    to `true`, but we keep the search bar for convenience.'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：我们通过将`table_noschema`设置为`true`来配置表格，以避免显示模式架构，但为了方便起见，我们保留了搜索栏。'
- en: 'The results are shown in the following screenshot:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下截图所示：
- en: '![Part 3 – Integrate the TensorBoard graph visualization](img/B09699_06_20.jpg)'
  id: totrans-356
  prefs: []
  type: TYPE_IMG
  zh: '![第3部分 – 集成TensorBoard图形可视化](img/B09699_06_20.jpg)'
- en: Searchable table for the model categories
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 可搜索的模型类别表格
- en: 'Our MVP image recognition sample application is now complete; you can find
    the full Notebook here: [https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/Tensorflow%20VR%20Part%203.ipynb](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/Tensorflow%20VR%20Part%203.ipynb).'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的MVP图像识别示例应用程序现在已经完成；您可以在此找到完整的Notebook：[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/Tensorflow%20VR%20Part%203.ipynb](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/Tensorflow%20VR%20Part%203.ipynb)。
- en: In the next section, we will improve the application by allowing the user to
    retrain the model using custom images.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将通过允许用户使用自定义图像重新训练模型来改进应用程序。
- en: Part 4 – Retrain the model with custom training data
  id: totrans-360
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第4部分 – 使用自定义训练数据重新训练模型
- en: Note
  id: totrans-361
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Note**: You can download the completed Notebook to follow this section discussion
    here:'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：您可以在此下载完整的Notebook以便跟随本节的讨论：'
- en: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/Tensorflow%20VR%20Part%204.ipynb](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/Tensorflow%20VR%20Part%204.ipynb)'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/Tensorflow%20VR%20Part%204.ipynb](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/Tensorflow%20VR%20Part%204.ipynb)'
- en: The code in this section is quite extensive, and some helper functions that are
    not directly related to the topic will be omitted. However, as always, refer to
    the complete Notebook on GitHub for more information on the code.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中的代码相当广泛，部分与主题无关的辅助函数将被省略。然而，和往常一样，更多关于代码的信息请参阅GitHub上的完整Notebook。
- en: In this section, we want to retrain the MobileNet model with custom training
    data and use it to classify images that would have had a low score on the generic
    model otherwise.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用自定义训练数据重新训练MobileNet模型，并用它来分类那些在通用模型中得分较低的图像。
- en: Note
  id: totrans-366
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Note**: The code in this section is adapted from the *TensorFlow for poets*
    tutorial:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：本节中的代码改编自*TensorFlow for poets*教程：'
- en: '[https://github.com/googlecodelabs/tensorflow-for-poets-2/blob/master/scripts/retrain.py](https://github.com/googlecodelabs/tensorflow-for-poets-2/blob/master/scripts/retrain.py)'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/googlecodelabs/tensorflow-for-poets-2/blob/master/scripts/retrain.py](https://github.com/googlecodelabs/tensorflow-for-poets-2/blob/master/scripts/retrain.py)'
- en: As is the case most of the time, getting quality training data can be one of
    the most daunting and time-consuming tasks. In our example, we need images in
    large quantities for each of the classes we want to train. For the sake of simplicity
    and reproducibility, we are using the ImageNet databases that conveniently provide APIs
    for getting URLs and associated labels. We also limit the downloaded files to `.jpg`
    files. Of course, feel free to acquire your own training data if needed.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 正如大多数时候一样，获取高质量的训练数据可能是最具挑战性且耗时的任务。在我们的示例中，我们需要为每个要训练的类别获取大量图像。为了简便和可复现性，我们使用了ImageNet数据库，该数据库方便地提供了获取URL和相关标签的API。我们还将下载的文件限制为`.jpg`格式。当然，如果需要，您也可以自行获取训练数据。
- en: 'We first download the list of all the image URLs from the Fall 2011 release
    that is available here: [http://image-net.org/imagenet_data/urls/imagenet_fall11_urls.tgz](http://image-net.org/imagenet_data/urls/imagenet_fall11_urls.tgz),
    and unpack the file into a local directory of your choice (for example, I chose
    `/Users/dtaieb/Downloads/fall11_urls.txt`).We also need to download the mapping
    between WordNet ID and words for all `synsets` available at [http://image-net.org/archive/words.txt](http://image-net.org/archive/words.txt),
    which we''ll use to find the WordNet IDs containing the URLs that we need to download.'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先从2011年秋季发布的版本下载所有图片URL的列表，链接在这里：[http://image-net.org/imagenet_data/urls/imagenet_fall11_urls.tgz](http://image-net.org/imagenet_data/urls/imagenet_fall11_urls.tgz)，并将文件解压到你选择的本地目录（例如，我选择了`/Users/dtaieb/Downloads/fall11_urls.txt`）。我们还需要下载所有`synsets`的WordNet
    ID与单词的映射文件，链接在这里：[http://image-net.org/archive/words.txt](http://image-net.org/archive/words.txt)，这个文件将帮助我们找到包含我们需要下载的URL的WordNet
    ID。
- en: 'The following code will load both files into a pandas DataFrame respectively:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码将分别加载两个文件到pandas DataFrame中：
- en: '[PRE35]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Note
  id: totrans-373
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can find the code file here:'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里找到代码文件：
- en: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode23.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode23.py)'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode23.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode23.py)'
- en: Notice that we needed to clean the `wnid` column in the `wnid_to_urls` dataset
    because it contains a suffix corresponding to the index of the image in the category.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们需要清理`wnid_to_urls`数据集中的`wnid`列，因为它包含一个后缀，表示该图片在类别中的索引。
- en: 'We can then define a method `get_url_for_keywords` that returns a dictionary
    containing the categories as keys and an array of URLs as values:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以定义一个方法`get_url_for_keywords`，它返回一个字典，字典的键是类别，值是包含URL的数组：
- en: '[PRE36]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Note
  id: totrans-379
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can find the code file here:'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里找到代码文件：
- en: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode24.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode24.py)'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode24.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode24.py)'
- en: 'We can easily glance at the data distribution by using PixieDust `display`.
    As always, feel free to do more exploration on your own:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用PixieDust的`display`轻松查看数据分布。和往常一样，随时可以自己进行更多探索：
- en: '![Part 4 – Retrain the model with custom training data](img/B09699_06_21.jpg)'
  id: totrans-383
  prefs: []
  type: TYPE_IMG
  zh: '![第4部分 – 使用自定义训练数据重新训练模型](img/B09699_06_21.jpg)'
- en: Distribution of images by categories
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 按类别分布的图片
- en: 'We can now build the code that will download the images corresponding to a
    list of categories of our choice. In our case, we chose fruits: `["apple", "orange",
    "pear", "banana"]`. The images will be downloaded in a subdirectory of the PixieDust
    home directory (using the PixieDust `Environment` helper class from the `pixiedust.utils`
    package), limiting the number of images to `500` for speed:'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以构建代码来下载与我们选择的类别列表对应的图片。在我们的例子中，我们选择了水果：`["apple", "orange", "pear", "banana"]`。这些图片将下载到PixieDust主目录的子目录中（使用PixieDust的`Environment`助手类，来自`pixiedust.utils`包），并限制下载图片的数量为`500`，以提高速度：
- en: Note
  id: totrans-386
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Note**: The following code uses methods and imports defined earlier in the
    Notebook. Make sure to run the corresponding cell before attempting to run the
    following code.'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：以下代码使用了Notebook中先前定义的方法和导入内容。在尝试运行以下代码之前，请确保先运行相应的单元格。'
- en: '[PRE37]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Note
  id: totrans-389
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can find the code file here:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里找到代码文件：
- en: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode25.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode25.py)'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode25.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode25.py)'
- en: 'The next part of the code processes each of the images in the training set
    using the following steps:'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的下一部分处理训练集中的每张图片，使用以下步骤：
- en: Note
  id: totrans-393
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Note**: As mentioned before, the code is quite extensive, and part of it
    is omitted; only the important parts are explained here. Please do not attempt
    to run the following code as is and refer to the complete Notebook for full implementation.'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：如前所述，代码比较长，并且部分代码被省略，这里仅解释了重要部分。请不要直接运行以下代码，完整实现请参阅完整的Notebook。'
- en: 'Decode the `.jpeg` file using the following code:'
  id: totrans-395
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码解码`.jpeg`文件：
- en: '[PRE38]'
  id: totrans-396
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Note
  id: totrans-397
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can find the code file here:'
  id: totrans-398
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以在这里找到代码文件：
- en: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode26.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode26.py)'
  id: totrans-399
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode26.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode26.py)'
- en: 'Create the bottleneck values (caching them as appropriate) that normalize the
    image by resizing and rescaling it. This is done in the following code:'
  id: totrans-400
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建瓶颈值（根据需要进行缓存），通过调整图像大小和缩放来标准化图像。这是在以下代码中完成的：
- en: '[PRE39]'
  id: totrans-401
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Note
  id: totrans-402
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can find the code file here:'
  id: totrans-403
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以在这里找到代码文件：
- en: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode27.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode27.py)'
  id: totrans-404
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode27.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode27.py)'
- en: 'Add the final training operations using the `add_final_training_ops` method,
    under a common namespace, so that it''s easier to manipulate when visualizing
    the graph. The training steps are as follows:'
  id: totrans-405
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`add_final_training_ops`方法添加最终训练操作，放在一个公共命名空间下，方便在可视化图时进行操作。训练步骤如下：
- en: 'Generate random weight with the `tf.truncated_normal` API:'
  id: totrans-406
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`tf.truncated_normal` API生成随机权重：
- en: '[PRE40]'
  id: totrans-407
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Add the biases, initialized to zero:'
  id: totrans-408
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加偏置，初始化为零：
- en: '[PRE41]'
  id: totrans-409
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Compute the weighted sum:'
  id: totrans-410
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算加权和：
- en: '[PRE42]'
  id: totrans-411
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Add the `cross_entropy` cost function:'
  id: totrans-412
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`cross_entropy`成本函数：
- en: '[PRE43]'
  id: totrans-413
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Minimize the cost function:'
  id: totrans-414
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最小化成本函数：
- en: '[PRE44]'
  id: totrans-415
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'To visualize the retrained graph, we first need to update the `TensorGraphApp`
    PixieApp to let the user select which model to visualize: generic MobileNet or
    custom. This is done by adding a `<select>` drop-down in the main route and attaching a
    `pd_script` element to update the state:'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 为了可视化重新训练后的图，我们首先需要更新`TensorGraphApp` PixieApp，让用户选择可视化的模型：通用的MobileNet还是自定义模型。通过在主路由中添加`<select>`下拉菜单并附加`pd_script`元素来更新状态：
- en: '[PRE45]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Note
  id: totrans-418
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can find the code file here:'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里找到代码文件：
- en: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode28.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode28.py)'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode28.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode28.py)'
- en: 'Rerunning our `ImageReco` PixieApp produces the following screenshot:'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 重新运行我们的`ImageReco` PixieApp生成以下截图：
- en: '![Part 4 – Retrain the model with custom training data](img/B09699_06_22.jpg)'
  id: totrans-422
  prefs: []
  type: TYPE_IMG
  zh: '![Part 4 – 使用自定义训练数据重新训练模型](img/B09699_06_22.jpg)'
- en: Visualization of the retrained graph
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 可视化重新训练后的图
- en: 'Clicking on the train node will reveal the nested operations that run the backpropagation
    algorithms to minimize the `cross_entropy_mean` cost functions specified in the
    preceding `add_final_training_ops`:'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 点击火车节点将显示运行反向传播算法的嵌套操作，以最小化前面`add_final_training_ops`中指定的`cross_entropy_mean`成本函数：
- en: '[PRE46]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Note
  id: totrans-426
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can find the code file here:'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里找到代码文件：
- en: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode29.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode29.py)'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode29.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode29.py)'
- en: 'The following screenshot shows the details of the **train** namespace:'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了**train**命名空间的详细信息：
- en: '![Part 4 – Retrain the model with custom training data](img/B09699_06_23.jpg)'
  id: totrans-430
  prefs: []
  type: TYPE_IMG
  zh: '![Part 4 – 使用自定义训练数据重新训练模型](img/B09699_06_23.jpg)'
- en: Backpropagation during training
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 训练过程中的反向传播
- en: 'Similarly, we can add the drop-down toggle in the `LabelsApp` to switch the visualization
    between the generic MobileNet and custom model:'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，我们可以在`LabelsApp`中添加下拉切换，以切换通用MobileNet和自定义模型之间的可视化：
- en: '[PRE47]'
  id: totrans-433
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Note
  id: totrans-434
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can find the code file here:'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里找到代码文件：
- en: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode30.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode30.py)'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode30.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode30.py)'
- en: 'The results are displayed in the following screenshot:'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 结果显示在以下截图中：
- en: '![Part 4 – Retrain the model with custom training data](img/B09699_06_24.jpg)'
  id: totrans-438
  prefs: []
  type: TYPE_IMG
  zh: '![Part 4 – 使用自定义训练数据重新训练模型](img/B09699_06_24.jpg)'
- en: Display labels information for each model
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 显示每个模型的标签信息
- en: The last step for our Part 4 MVP is to update the `score_image` method to classify
    the image with both models and add the results in a dictionary with an entry for
    each model. We define a local method `do_score_image` that returns the top 5 candidates
    answers.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 第四部分 MVP 的最后一步是更新 `score_image` 方法，使其同时使用两个模型对图像进行分类，并将结果以字典形式存储，其中每个模型有一个条目。我们定义了一个本地方法
    `do_score_image`，该方法返回前 5 个候选答案。
- en: 'This method is called for each model, and the results populate a dictionary
    with the model name as the key:'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法会为每个模型调用，并将结果填充到一个字典中，字典的键是模型名称：
- en: '[PRE48]'
  id: totrans-442
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Note
  id: totrans-443
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can find the code file here:'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里找到代码文件：
- en: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode31.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode31.py)'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode31.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode31.py)'
- en: 'Since we modified the returned values for the `score_image` method, we need
    to adjust the HTML fragment returned in `ScoreImageApp` to loop over all the model
    entries of the `results` dictionary:'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们修改了 `score_image` 方法返回的值，我们需要调整 `ScoreImageApp` 中返回的 HTML 片段，以便遍历 `results`
    字典中的所有模型条目：
- en: '[PRE49]'
  id: totrans-447
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Note
  id: totrans-448
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can find the code file here:'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里找到代码文件：
- en: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode32.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode32.py)'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode32.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/sampleCode32.py)'
- en: With these changes in place, the PixieApp will automatically invoke the custom
    models if available and, if that's the case, display the results for both models.
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些更改生效后，PixieApp 将会自动调用可用的自定义模型，并且如果存在自定义模型，它会显示两个模型的结果。
- en: 'The following screenshot shows the results for images related to *banana*:'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了与 *香蕉* 相关的图像的结果：
- en: '![Part 4 – Retrain the model with custom training data](img/B09699_06_25.jpg)'
  id: totrans-453
  prefs: []
  type: TYPE_IMG
  zh: '![Part 4 – 使用自定义训练数据重新训练模型](img/B09699_06_25.jpg)'
- en: Score with generic MobileNet and custom-trained model
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 使用通用的 MobileNet 和自定义训练模型进行评分
- en: The reader will notice that the scores for the custom models are pretty low.
    One possible explanation is that the training data acquisition is fully automated
    and used without human curation. One possible enhancement to this sample application
    would be to move the training data acquisition and retraining steps into its own
    tab PixieApp. We should also give the user the opportunity to validate the images
    and reject the one that is of poor quality. It would also be great to let the
    user relabel the images that have been wrongly categorized.
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 读者会注意到自定义模型的分数相当低。一个可能的解释是，训练数据获取是完全自动化的，并且没有人工筛选。对这个示例应用程序的一个可能改进是，将训练数据获取和再训练步骤移到一个独立的
    PixieApp 标签页中。我们还应当给用户机会验证图像，并拒绝质量差的图像。让用户重新标注错误分类的图像也是一个不错的主意。
- en: Note
  id: totrans-456
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The completed Notebook for Part 4 can be found here:'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 第四部分的完整 Notebook 可以在这里找到：
- en: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/Tensorflow%20VR%20Part%204.ipynb](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/Tensorflow%20VR%20Part%204.ipynb)'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/Tensorflow%20VR%20Part%204.ipynb](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%206/Tensorflow%20VR%20Part%204.ipynb)'
- en: 'In this section, we''ve discussed the incremental approach of building an image
    recognition sample application in a Jupyter Notebook using TensorFlow, with a special
    focus on operationalizating the algorithms using PixieApps. We started with building
    a simple classification model from a pandas DataFrame using the TensorFlow `DNNClassifier`
    estimator. We then built an MVP version of the image recognition sample application
    in four parts:'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 本节讨论了使用 TensorFlow 在 Jupyter Notebook 中构建图像识别示例应用程序的增量方法，特别关注如何通过 PixieApps
    实现算法的操作化。我们首先通过 TensorFlow `DNNClassifier` 估计器，从 pandas DataFrame 中构建了一个简单的分类模型。接着，我们将图像识别示例应用程序的
    MVP 版本分为四部分来构建：
- en: We loaded the pretrained MobileNet model
  id: totrans-460
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们加载了预训练的 MobileNet 模型
- en: We created a PixieApp for our image recognition sample application
  id: totrans-461
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们为我们的图像识别示例应用程序创建了一个 PixieApp
- en: We integrated the TensorBoard graph visualization into the PixieApp
  id: totrans-462
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将 TensorBoard 图形可视化集成到 PixieApp 中
- en: We enabled users to retrain the model with custom training data from ImageNet
  id: totrans-463
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用户能够使用来自 ImageNet 的自定义训练数据重新训练模型
- en: Summary
  id: totrans-464
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: Machine learning is a vast topic that enjoys tremendous growth, both in research
    and development. In this chapter, we've explored only a tiny fraction of the state
    of the art in connection with machine learning algorithms, namely, using a deep
    learning neural network to perform image recognition. For some readers who are
    just beginning to get familiar with machine learning, the sample PixieApps and
    associated algorithms code may be too deep to digest at one time. However, the
    underlying aim was to demonstrate how to iteratively build an application that
    leverages a machine learning model. We happened to use a convolutional neural
    network model for image recognition, but any other model would do.
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 机器学习是一个庞大的领域，享有巨大的增长，无论是在研究还是开发方面。在本章中，我们只探讨了与机器学习算法相关的极小一部分前沿技术，具体来说，是使用深度学习神经网络进行图像识别。对于一些刚刚开始接触机器学习的读者，示例
    PixieApp 及其关联的算法代码可能一次性难以消化。然而，底层的目标是展示如何逐步构建一个应用程序，并利用机器学习模型。我们恰好使用了一个卷积神经网络模型进行图像识别，但任何其他模型都可以使用。
- en: Hopefully, you got a good idea of how PixieDust and the PixieApp programming
    model can help you with your own project, and I strongly encourage you to use
    this sample application as a starting point to build your own custom application
    using the machine learning of your choice. I also recommend deploying your PixieApp
    as a web application with the PixieGateway microservice and exploring whether
    it's a viable solution.
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你已经对 PixieDust 和 PixieApp 编程模型如何帮助你完成自己的项目有了一个不错的了解，我强烈建议你以这个示例应用程序为起点，使用你选择的机器学习方法来构建自己的自定义应用程序。我还推荐将你的
    PixieApp 部署为一个 web 应用程序，并通过 PixieGateway 微服务进行测试，看看它是否是一个可行的解决方案。
- en: In the next chapter, we will cover another important industry use case related
    to big data and natural language processing. We'll build a sample application
    that analyzes social media trends using a natural language understanding service.
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将介绍另一个与大数据和自然语言处理相关的重要行业应用案例。我们将构建一个示例应用程序，通过自然语言理解服务分析社交媒体趋势。
