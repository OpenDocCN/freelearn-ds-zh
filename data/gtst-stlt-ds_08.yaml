- en: '*Chapter 6*: Beautifying Streamlit Apps'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第6章*：美化Streamlit应用程序'
- en: Welcome to Section 2 of the book! In *Section 1*, *Creating Basic Streamlit
    Applications*, we focused on the basics – visualization, deployment, and data
    munging, all the topics that are crucial to getting started with Streamlit. In
    this part of the book, the purpose is to explore Streamlit through more complex
    applications and use cases, with the intent of turning you into an expert Streamlit
    user.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到本书的第2部分！在*第1部分*，*创建基本的Streamlit应用程序*中，我们专注于基础知识——可视化、部署和数据处理，这些都是开始使用Streamlit时至关重要的主题。在本部分中，我们的目的是通过更复杂的应用程序和用例来探索Streamlit，目的是将您培养成Streamlit的专家用户。
- en: Throughout this chapter, we'll work with elements including sidebars, columns,
    colors, and themes to extend our ability to make beautiful Streamlit applications.
    By the end of this chapter, you should feel much more comfortable creating applications
    that are better than the average **Minimum Viable Product** (**MVP**). We'll start
    by learning about columns and move on to the rest of the elements discussed, weaving
    each into the main Streamlit app for the chapter.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将处理包括侧边栏、列、颜色和主题等元素，来扩展我们制作美观Streamlit应用程序的能力。到本章结束时，您应该能更自如地创建比普通**最小可行产品**（**MVP**）更好的应用程序。我们将从学习列的使用开始，然后继续介绍本章讨论的其他元素，并将每个元素融入到主Streamlit应用程序中。
- en: 'Specifically, in this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Setting up the SF (San Francisco) Trees dataset
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置SF（旧金山）Trees数据集
- en: Working with columns in Streamlit
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Streamlit中使用列
- en: Exploring page configuration
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索页面配置
- en: Using the Streamlit sidebar
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Streamlit侧边栏
- en: Picking colors with Color Picker
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用颜色选择器选择颜色
- en: Utilizing Streamlit themes
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Streamlit主题
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This chapter requires a free GitHub account, which can be obtained at [https://www.github.com](https://www.github.com).
    A full primer on GitHub, along with detailed setup instructions, can be found
    in the *A quick primer on GitHub* section in the previous chapter, [*Chapter 5*](B16864_05_Final_VK_ePub.xhtml#_idTextAnchor056),
    *Deploying Streamlit with Streamlit Sharing*.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章需要一个免费的GitHub帐户，您可以在[https://www.github.com](https://www.github.com)注册。有关GitHub的完整介绍以及详细的设置说明，可以在前一章的*GitHub快速入门*部分找到，[*第5章*](B16864_05_Final_VK_ePub.xhtml#_idTextAnchor056)，*使用Streamlit
    Sharing部署Streamlit*。
- en: Setting up the SF Trees dataset
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置SF Trees数据集
- en: 'For this chapter, we will be working with the SF Trees dataset again, the same
    dataset that we used in [*Chapter 3*](B16864_03_Final_VK_ePub.xhtml#_idTextAnchor036),
    *Data Visualization*. As we did in the previous chapters, we need to follow this
    list of steps for the setup:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将再次使用SF Trees数据集，这是我们在[*第3章*](B16864_03_Final_VK_ePub.xhtml#_idTextAnchor036)中使用的数据集，*数据可视化*。正如我们在之前的章节中所做的那样，我们需要按照以下步骤进行设置：
- en: Create a new folder for the chapter.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为本章创建一个新文件夹。
- en: Add our data to the folder.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将我们的数据添加到文件夹中。
- en: Create a Python file for our app.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为我们的应用程序创建一个Python文件。
- en: Let's see each of these steps in detail.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细查看每个步骤。
- en: 'In our main `streamlit_apps` folder, run the following code in your terminal
    to make a new folder cleverly called `pretty_trees`. You can also create a new
    folder manually outside the terminal:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的主`streamlit_apps`文件夹中，在终端运行以下代码来创建一个名为`pretty_trees`的新文件夹。您也可以在终端外手动创建一个新文件夹：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, we need to move our data from [*Chapter 3*](B16864_03_Final_VK_ePub.xhtml#_idTextAnchor036),
    *Data Visualization*, into our folder for this chapter. The following code copies
    the data into the correct folder:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要将数据从[*第3章*](B16864_03_Final_VK_ePub.xhtml#_idTextAnchor036)，*数据可视化*，移动到本章的文件夹中。以下代码将数据复制到正确的文件夹：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If you do not have the `trees_app` folder and have not yet completed [*Chapter
    3*](B16864_03_Final_VK_ePub.xhtml#_idTextAnchor036), *Data Visualization*, you
    can also download the necessary data from [https://github.com/tylerjrichards/Getting-Started-with-Streamlit-for-Data-Science](https://github.com/tylerjrichards/Getting-Started-with-Streamlit-for-Data-Science)
    within the folder entitled `trees_app`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有`trees_app`文件夹并且还没有完成[*第3章*](B16864_03_Final_VK_ePub.xhtml#_idTextAnchor036)，*数据可视化*，您也可以从[https://github.com/tylerjrichards/Getting-Started-with-Streamlit-for-Data-Science](https://github.com/tylerjrichards/Getting-Started-with-Streamlit-for-Data-Science)下载必要的数据，数据将位于名为`trees_app`的文件夹中。
- en: 'Now that we have our data ready, we need to create a Python file to host our
    Streamlit app''s code; the following code does precisely this:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好了数据，我们需要创建一个Python文件来托管我们的Streamlit应用程序代码；以下代码正是为此目的而写：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `pretty_trees` file will hold our Python code, so go ahead and open it up
    in the text editor of your choice and the chapter can officially begin with us
    learning how to work with columns in Streamlit!
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`pretty_trees` 文件将包含我们的 Python 代码，因此请打开它并在你选择的文本编辑器中进行编辑，章节正式开始，我们将学习如何在 Streamlit
    中使用列！'
- en: Working with columns in Streamlit
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Streamlit 中使用列
- en: In all of our apps prior to this point, we have viewed each Streamlit task as
    a top-down experience. We output text as our title, collect some user input below,
    and then put our visualizations below that. However, Streamlit allows us to format
    our app into dynamic columns using the `st.beta_columns()` feature. As of now,
    the columns feature is in beta (hence the `beta_` in the function name), but the
    feature should be out of beta at some point in 2021, where it will be called `st.columns()`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之前的所有应用中，我们都将每个 Streamlit 任务视为自上而下的体验。我们将文本作为标题输出，收集用户输入，然后再展示我们的可视化内容。然而，Streamlit
    允许我们通过 `st.beta_columns()` 特性将应用格式化为动态列。截至目前，列特性仍处于测试版（因此函数名中有 `beta_`），但预计在 2021
    年某个时候该功能将不再是测试版，届时它将被命名为 `st.columns()`。
- en: We can divide our Streamlit app into multiple columns of variable lengths, and
    then treat each column as its own unique space in our app to include text, graphs,
    images, or anything else we would like.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将 Streamlit 应用分为多个不同长度的列，然后将每列视为我们应用中的一个独特区域，用来展示文本、图形、图片或任何其他我们希望展示的内容。
- en: 'The syntax for columns in Streamlit uses `with` notation, which you may already
    be familiar with for use cases such as resource management and dealing with opening
    and writing to files in Python. The easiest way to think about `with` notation
    in Streamlit columns is that they are self-contained blocks of code that tell
    Streamlit exactly where to place items in our apps. Let''s check out an example
    to see how it works. The following code imports our SF Trees dataset and creates
    three columns of equal length within it, writing text into each one:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Streamlit 中，列的语法使用 `with` 语法，你可能已经熟悉这种语法，用于资源管理、处理文件的打开和写入等 Python 用例。将 `with`
    语法应用于 Streamlit 列的最简单理解方式是，它们是自包含的代码块，告诉 Streamlit 在我们的应用中准确地放置项目。让我们通过一个示例来看它是如何工作的。以下代码导入我们的
    SF Trees 数据集，并在其中创建三个等长的列，每个列中写入一些文本：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The preceding code will create the app shown in the following screenshot:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将创建如下截图所示的应用：
- en: '![Figure 6.1 – First three columns'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.1 – 前三列'
- en: '](img/B16864_06_01.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16864_06_01.jpg)'
- en: Figure 6.1 – First three columns
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.1 – 前三列
- en: 'As we can see, `st.beta_columns()` defines three columns of equal length, and
    we use the `with` notation to print some text in each. We can also call the `st.write()`
    function (or any other Streamlit function that writes content to our Streamlit
    app) directly on our predefined columns for the same outcome, as shown in the
    following code. The following code will have the exact same output as the preceding
    code block:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，`st.beta_columns()` 定义了三个等长的列，我们使用 `with` 语法在每个列中打印一些文本。我们也可以直接在预定义的列上调用
    `st.write()` 函数（或任何其他将内容写入 Streamlit 应用的 Streamlit 函数），以获得相同的结果，如以下代码所示。以下代码将产生与前一个代码块完全相同的输出：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As we write more complex Streamlit apps with more content in each column, `with`
    statements tend to make for cleaner apps that are easier to understand and debug.
    The majority of this book will use `with` statements whenever possible.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们编写更多复杂的 Streamlit 应用，每个列中包含更多内容，`with` 语句往往使得应用更加简洁，更容易理解和调试。本书的大多数部分将尽可能使用
    `with` 语句。
- en: 'In Streamlit, the column width is relative to the size of the other defined
    columns. Because of this, if we scale up the width of each column to `10` instead
    of `1`, our app will not change at all. Additionally, we can also pass a single
    number into `st.beta_columns()`, and `st.beta_columns()` will return that number
    of columns of equal width. The following code block shows three options for column
    width that all result in the same column widths:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Streamlit 中，列的宽度是相对于其他已定义列的大小的。因此，如果我们将每列的宽度从 `1` 扩大到 `10`，我们的应用不会发生任何变化。此外，我们也可以传递一个数字给
    `st.beta_columns()`，它将返回指定数量的等宽列。以下代码块展示了三种列宽度选项，它们都会产生相同的列宽：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'As a final example, the following code block allows the user input to determine
    the width of each column. Go ahead and play around with the resulting app to better
    understand how we can use columns to change the format behind our Streamlit apps:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个例子，以下代码块允许用户输入来确定每一列的宽度。请随意尝试生成的应用程序，以更好地理解我们如何使用列来改变 Streamlit 应用程序中的布局格式：
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In [*Chapter 3*](B16864_03_Final_VK_ePub.xhtml#_idTextAnchor036), *Data Visualization*,
    we used the following code to show the difference between the built-in Streamlit
    functions `st.line_chart()`, `st.bar_chart()`, and `st.area_chart()`:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第3章*](B16864_03_Final_VK_ePub.xhtml#_idTextAnchor036)《数据可视化》中，我们使用以下代码来展示
    Streamlit 内置函数 `st.line_chart()`、`st.bar_chart()` 和 `st.area_chart()` 之间的差异：
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The preceding code block creates the following Streamlit app, with three graphs
    of San Francisco trees grouped by their width placed one right after the other
    (only the two graphs are shown for brevity):'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码块创建了以下 Streamlit 应用程序，其中三个按宽度分组的旧金山树木图表依次排列（为了简洁起见，仅显示了两个图表）：
- en: '![Figure 6.2 – SF line and bar charts'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.2 – SF 线形图和条形图'
- en: '](img/B16864_06_02.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16864_06_02.jpg)'
- en: Figure 6.2 – SF line and bar charts
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.2 – SF 线形图和条形图
- en: 'The point of this exercise was to better understand the three Streamlit functions,
    but how can we do that if we need to scroll to see them all? Let''s improve on
    this by putting our three graphs side by side using three columns. The following
    code predefines three equally wide columns and places one graph in each:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 本次练习的目的是更好地理解 Streamlit 的三个函数，但如果我们需要滚动才能看到所有内容，那我们该怎么做呢？让我们通过使用三列将三个图表并排放置来改进这一点。以下代码预定义了三个宽度相等的列，并将每个图表放入其中：
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'When we run the preceding code, we get a strange result shown in the following
    screenshot:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行前面的代码时，得到一个奇怪的结果，如下截图所示：
- en: '![Figure 6.3 – Skinny graphs'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.3 – 窄图表'
- en: '](img/B16864_06_03.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16864_06_03.jpg)'
- en: Figure 6.3 – Skinny graphs
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.3 – 窄图表
- en: This is most certainly not what we wanted! Each graph is far too narrow. Luckily
    for us, this brings us to our next mini-topic, page configuration in Streamlit.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这显然不是我们想要的结果！每个图表都太窄了。幸运的是，这引出了我们的下一个小主题——Streamlit 中的页面配置。
- en: Exploring page configuration
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索页面配置
- en: Streamlit allows us to configure a few essential page-specific features at the
    top of each Streamlit app. So far, we have been using the Streamlit defaults,
    but at the top of our Streamlit app, we can manually configure everything, from
    the page title shown on the web browser used to open our Streamlit apps, to the
    page layout, to the sidebar default state (we will cover the sidebar in the *Using
    the Streamlit sidebar* section!).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Streamlit 允许我们在每个 Streamlit 应用程序的顶部配置一些基本的页面特定功能。到目前为止，我们一直在使用 Streamlit 默认设置，但在
    Streamlit 应用程序的顶部，我们可以手动配置所有内容，从在 Web 浏览器中打开 Streamlit 应用时显示的页面标题，到页面布局，再到侧边栏的默认状态（我们将在*使用
    Streamlit 侧边栏*章节中介绍！）。
- en: 'The default for Streamlit apps is to have a centered page layout, which is
    why there is copious white space on the edges of our apps. The following code
    sets up our Streamlit app in a wide format instead of our default centered one:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Streamlit 应用程序的默认设置是页面布局居中，这也是为什么我们的应用程序在边缘有大量空白空间的原因。以下代码将我们的 Streamlit 应用程序设置为宽屏格式，而不是默认的居中格式：
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'When we run the preceding code, we now see that our three graphs are well spaced
    and we can easily compare between the three. The following screenshot shows the
    Streamlit app in a wide format:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行前面的代码时，我们会看到三个图表之间的间距合适，我们可以轻松比较三个图表。以下截图展示了宽格式的 Streamlit 应用程序：
- en: '![Figure 6.4 – Wide-format graphs'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.4 – 宽格式图表'
- en: '](img/B16864_06_04.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16864_06_04.jpg)'
- en: Figure 6.4 – Wide-format graphs
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.4 – 宽格式图表
- en: This concludes our exploration of using columns in Streamlit, and also concludes
    our first look at page configuration defaults. We will increasingly use both of
    these skills in the remainder of the book. Our next topic is to introduce the
    Streamlit sidebar.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这标志着我们对 Streamlit 列的探索结束，也结束了对页面配置默认设置的首次介绍。在本书的剩余部分，我们将越来越多地使用这两项技能。我们的下一个主题是介绍
    Streamlit 侧边栏。
- en: Using the Streamlit sidebar
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Streamlit 侧边栏
- en: As we have already seen in Streamlit, when we start to both accept large amounts
    of user input and also start to develop longer Streamlit apps, we often lose the
    ability for the user to see both their input and the output on the same screen.
    In other cases, we may want to put all the user input into its own section to
    clearly separate input and output in our Streamlit app. For both of these use
    cases, we can use the Streamlit sidebar, which allows us to place a minimizable
    sidebar on the left side of the Streamlit app and add any Streamlit component
    to it.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们已经在Streamlit中看到的，当我们开始接受大量用户输入并且开发较长的Streamlit应用时，我们经常失去让用户在同一屏幕上查看输入和输出的能力。在其他情况下，我们可能希望将所有用户输入放入一个独立的部分，以清晰地将输入和输出在我们的Streamlit应用中区分开来。对于这两种用例，我们可以使用Streamlit侧边栏，它允许我们在Streamlit应用的左侧放置一个可最小化的侧边栏，并在其中添加任何Streamlit组件。
- en: 'To begin with, we can make a basic example that takes one of the graphs from
    our preceding app and filter the data behind it based on the user''s input. In
    this case, we can ask the user to specify the type of tree owner (for example,
    a private owner, or the Department of Public Works), and filter on those conditions
    using the `st.multiselect()` function, which allows the user to select multiple
    options from a list:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们可以制作一个基础示例，使用我们前面的应用中的一个图形，并根据用户输入过滤背后的数据。在这种情况下，我们可以要求用户指定树木所有者的类型（例如私人所有者或公共工程部门），并使用`st.multiselect()`函数在这些条件下进行过滤，该函数允许用户从列表中选择多个选项：
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The preceding code will create the following Streamlit app. As we have done
    before, we hide the `owners` variable within an `if` statement, as we would like
    the app to run with the entire dataset if the user has yet to select from the
    options. The sidebar allows the user to easily see both the options they selected
    and the output to our app:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 前述代码将创建以下Streamlit应用。与之前一样，我们将`owners`变量隐藏在`if`语句中，因为我们希望应用在用户未从选项中选择之前，使用整个数据集。侧边栏使用户能够轻松看到他们选择的选项和我们应用的输出：
- en: '![Figure 6.5 – First sidebar'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.5 – 第一个侧边栏'
- en: '](img/B16864_06_05.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16864_06_05.jpg)'
- en: Figure 6.5 – First sidebar
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.5 – 第一个侧边栏
- en: Our next step for this app is going to be to add a few more visualizations,
    starting with the tree map we created in [*Chapter 3*](B16864_03_Final_VK_ePub.xhtml#_idTextAnchor036),
    *Data Visualization*, and then combine the sidebar with what we have already learned
    about columns in this chapter.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为这个应用程序的下一步将是添加更多的可视化，首先从我们在[*第3章*](B16864_03_Final_VK_ePub.xhtml#_idTextAnchor036)中创建的树木地图开始，然后将侧边栏与我们在本章中学到的列结合。
- en: 'The following code places the map of trees throughout San Francisco, filtered
    by our multi-select box, below the histogram:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码将整个旧金山地区的树木地图，按我们的多选框过滤，放在直方图下方：
- en: '[PRE11]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The following screenshot shows the Streamlit app from the preceding code, with
    the line chart just above the new map of the trees in SF, filtered by tree owner:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了前述代码生成的Streamlit应用，其中折线图位于新地图的上方，地图显示了按树木所有者过滤的旧金山树木：
- en: '![Figure 6.6 – Filtered map with sidebar'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.6 – 带侧边栏的过滤地图'
- en: '](img/B16864_06_06.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16864_06_06.jpg)'
- en: Figure 6.6 – Filtered map with sidebar
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.6 – 带侧边栏的过滤地图
- en: 'Our next step for this application is going to be to combine what we learned
    about columns with the sidebar by adding another graph on top of the geographic
    map. In [*Chapter 3*](B16864_03_Final_VK_ePub.xhtml#_idTextAnchor036), *Data Visualization*,
    we created a histogram of the age of the trees. We can use that as our third graph
    in this Streamlit app. The following code block does this, and also switches the
    line graph into the same library (`seaborn`) as our tree age graph:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为这个应用程序的下一步将是将我们在列中学到的内容与侧边栏结合，通过在地理地图上方添加另一个图形来实现。在[*第3章*](B16864_03_Final_VK_ePub.xhtml#_idTextAnchor036)中，*数据可视化*，我们创建了一个树龄的直方图。我们可以将其用作这个Streamlit应用中的第三个图形。以下代码块实现了这一点，并且将折线图转换为与我们树龄图形相同的库（`seaborn`）：
- en: '[PRE12]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This first section does the following:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 第一部分做了以下事情：
- en: It loads the trees dataset.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它加载树木数据集。
- en: It adds an age column based on the date column in our dataset.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它基于数据集中的日期列添加了一个年龄列。
- en: It creates a multi-select widget on the sidebar.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它在侧边栏创建了一个多选组件。
- en: It filters based on the sidebar.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它根据侧边栏进行过滤。
- en: 'Our next step is to create our three graphs:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的下一步是创建三个图形：
- en: '[PRE13]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'As we have already discussed in [*Chapter 3*](B16864_03_Final_VK_ePub.xhtml#_idTextAnchor036),
    *Data Visualization*, built-in Streamlit functions such as `st.map()` and `st.line_chart()`
    are useful for quick visualizations but lack some configurability options, such
    as proper titles or axis renaming. The following screenshot shows our Streamlit
    application with a few tree owner filters pre-set:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在 [*第 3 章*](B16864_03_Final_VK_ePub.xhtml#_idTextAnchor036) *数据可视化* 中讨论的那样，Streamlit
    的内置功能，如 `st.map()` 和 `st.line_chart()`，对于快速可视化非常有用，但缺少一些配置选项，如适当的标题或轴名称更改。以下截图展示了我们的
    Streamlit 应用，其中预设了几个树主筛选器：
- en: '![Figure 6.7 – Three filtered graphs'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.7 – 三个过滤后的图表'
- en: '](img/B16864_06_07.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16864_06_07.jpg)'
- en: Figure 6.7 – Three filtered graphs
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.7 – 三个过滤后的图表
- en: Our next feature to discuss in this chapter is how to get and use user input
    on color, which will be covered in the next section.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 本章要讨论的下一个特性是如何获取和使用用户输入的颜色，这将在下一节中详细介绍。
- en: Picking colors with Color Picker
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用颜色选择器选择颜色
- en: 'Colors are very difficult to take in as user input in applications. If a user
    wants red, do they want light red or dark red? Maroon or a pinkish red? Streamlit''s
    approach to this problem is `st.color_picker()`, which lets the user pick a color,
    and returns that color in a hex string (which is a unique string that defines
    very specific color shades used by most graphing libraries as input). The following
    code adds this color picker to our previous app and changes the color of the Seaborn
    graphs to be based on the color that the user selects:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序中，获取颜色作为用户输入是非常困难的。如果用户想要红色，他们是想要浅红色还是深红色？是栗色还是带点粉色的红色？Streamlit 解决这个问题的方法是
    `st.color_picker()`，它允许用户选择颜色，并返回该颜色的十六进制字符串（十六进制字符串是定义特定颜色阴影的唯一字符串，通常作为大多数图形库的输入）。以下代码将颜色选择器添加到我们之前的应用程序中，并根据用户选择的颜色更改
    Seaborn 图表的颜色：
- en: '[PRE14]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The change here from our previous app is to add the `graph_color` variable,
    which is a result of the `st.color_picker()` function. We added a name to this
    color picker and placed the color picker in the sidebar right under the owner''s
    multi-select widget. Now that we have the color input from the user, we can use
    this to change the colors in our graphs, as shown in the following code:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们之前的应用不同的是，这里添加了 `graph_color` 变量，它是 `st.color_picker()` 函数的结果。我们为这个颜色选择器添加了一个名称，并将其放置在侧边栏中，紧挨着所有者的多选组件。现在，我们已获取到用户的颜色输入，可以使用这个颜色来改变图表中的颜色，如下所示的代码所示：
- en: '[PRE15]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'When you run this Streamlit app, you can see exactly how the color picker works
    (this book is published in grayscale, so is not visible in the hard copy). It
    has a default color (in our case, black) that you can change by selecting the
    component and then clicking on your color of choice. The following screenshot
    shows both the component when clicked on and the result in our SF Trees app:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行这个 Streamlit 应用时，你可以准确看到颜色选择器是如何工作的（本书为黑白印刷版，因此在纸质版中不可见）。它有一个默认颜色（在我们的例子中是黑色），你可以通过选择组件然后点击你想要的颜色来进行更改。以下截图展示了点击组件后的状态和我们
    SF Trees 应用中的结果：
- en: '![Figure 6.8 – Color picker'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.8 – 颜色选择器'
- en: '](img/B16864_06_08.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16864_06_08.jpg)'
- en: Figure 6.8 – Color picker
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.8 – 颜色选择器
- en: Now that we know how to change the colors of visualizations in Streamlit, how
    can we change the entire format and color scheme of Streamlit apps themselves?
    The next chapter explores Streamlit themes, and how to set up different themes
    to beautify Streamlit apps.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经知道如何在 Streamlit 中更改可视化图表的颜色，如何更改整个 Streamlit 应用程序的格式和配色方案呢？下一章将探讨 Streamlit
    主题，以及如何设置不同的主题来美化 Streamlit 应用。
- en: Utilizing Streamlit themes
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Streamlit 主题
- en: So far, our applications have all had the exact same background and color scheme,
    apart from the previous section on the color picker. Streamlit allows us to update
    our applications and change the color of the background and the various components
    in our app as a customization feature. Using this, we can create Streamlit apps
    that default to dark mode, or that have the perfect colors for our app, or even
    create themes that ensure that people affected by color-blindness can see all
    of our visualizations.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的应用程序除了在颜色选择器部分外，所有的背景和配色方案都是完全相同的。Streamlit 允许我们更新应用程序，并将背景和各种组件的颜色作为自定义功能进行更改。通过这个功能，我们可以创建默认使用暗黑模式的
    Streamlit 应用，或是具有完美配色的应用，甚至可以创建确保色盲人士也能看到我们所有可视化内容的主题。
- en: 'There are two ways to edit the *theme* of an app – through the UI or through
    the same `config.toml` setup we used in [*Chapter 3*](B16864_03_Final_VK_ePub.xhtml#_idTextAnchor036),
    *Data Visualization*. When we run our Streamlit apps, in the top-right corner,
    there is a little hamburger icon. When we click that icon and then click **Settings**,
    we will see the following options pop up in the middle of our screen:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑应用程序*主题*有两种方法——通过UI界面或通过我们在[*第3章*](B16864_03_Final_VK_ePub.xhtml#_idTextAnchor036)中使用的相同`config.toml`设置，*数据可视化*。当我们运行Streamlit应用程序时，在右上角会有一个小的汉堡菜单图标。点击该图标后，再点击**设置**，我们将看到以下选项出现在屏幕中间：
- en: '![Figure 6.9 – Theme edits'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.9 – 主题编辑'
- en: '](img/B16864_06_09.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16864_06_09.jpg)'
- en: Figure 6.9 – Theme edits
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.9 – 主题编辑
- en: 'Using the preceding menu, we can switch between **Light** and **Dark** themes,
    and when we click on **Edit active theme**, we can see all of our theme editing
    options as demonstrated in the following screenshot:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 使用前面的菜单，我们可以在**浅色**和**深色**主题之间切换，当我们点击**编辑当前主题**时，可以看到所有的主题编辑选项，如下图所示：
- en: '![Figure 6.10 – Editing active themes'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.10 – 编辑当前主题'
- en: '](img/B16864_06_10.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16864_06_10.jpg)'
- en: Figure 6.10 – Editing active themes
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.10 – 编辑当前主题
- en: 'From the preceding screenshot, we can observe that the following can be switched:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的截图中，我们可以观察到以下内容可以切换：
- en: '**Primary color**: For interactive colors'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主色**：用于交互的颜色'
- en: '**Background color**: Background of the app'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**背景色**：应用程序的背景'
- en: '**Secondary background color**: Background within components'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**次要背景色**：组件内部的背景'
- en: '**Text color/font**: The color and font of the app text'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文本颜色/字体**：应用程序文本的颜色和字体'
- en: 'Feel free to click on them and change the colors and see how this affects your
    Streamlit app. Once you have found a few colors that you like for our SF Trees
    app, you can add them to the theme section of your `.streamlit`/`config.toml`
    file as the instructions in `config.toml` file and shows the colors I have selected
    for my theme:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 随意点击它们并更改颜色，观察这如何影响你的Streamlit应用程序。一旦你找到了几种喜欢的颜色用于我们的SF Trees应用程序，你可以将它们添加到`.streamlit`/`config.toml`文件中的主题部分，以下是`config.toml`文件中的说明以及我为我的主题选择的颜色：
- en: '[PRE16]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'When we save this file and rerun our application, we will see in the next screenshot
    that our app now has a custom theme, as expected:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们保存这个文件并重新运行应用程序时，我们将在下图中看到我们的应用程序现在拥有了自定义主题，正如预期的那样：
- en: '![Figure 6.11 – Custom theme output'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.11 – 自定义主题输出'
- en: '](img/B16864_06_11.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16864_06_11.jpg)'
- en: Figure 6.11 – Custom theme output
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.11 – 自定义主题输出
- en: The easiest way I have found to make your Streamlit themes look great is to
    edit in the in-browser editor live, and then copy and paste your results to the
    Streamlit configuration file, as we just did in this example. But, as with all
    things, have fun with it! Try new combinations and make your Streamlit apps as
    beautiful as they can be.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我发现让Streamlit主题看起来很棒的最简单方法是使用浏览器内的编辑器进行实时编辑，然后将结果复制并粘贴到Streamlit配置文件中，正如我们在这个例子中所做的那样。不过，和所有事情一样，玩得开心！尝试新的组合，尽可能使你的Streamlit应用程序变得更美丽。
- en: Summary
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This concludes our adventures with the SF Trees dataset, and with learning about
    the various ways to make our Streamlit apps more aesthetically pleasing. We covered
    separating our apps into columns and page configuration, along with gathering
    user input in the sidebar, getting specific colors in user input through the `st.color_picker()`
    feature, and finally learning how to use Streamlit themes.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们与SF Trees数据集的冒险，以及学习如何使我们的Streamlit应用程序更加美观的方式。我们涵盖了将应用程序分成列和页面配置的内容，以及如何在侧边栏收集用户输入，通过`st.color_picker()`功能获取用户输入的特定颜色，最后学习如何使用Streamlit主题。
- en: In the next chapter, we will learn about the open source community around Streamlit,
    by understanding how to download and use Streamlit components built by users.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将通过了解如何下载和使用用户构建的Streamlit组件，来学习关于Streamlit的开源社区。
