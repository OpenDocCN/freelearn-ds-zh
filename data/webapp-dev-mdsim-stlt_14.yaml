- en: '14'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '14'
- en: Customizing Pages, Personalizing Themes, and Implementing Multi-Pages
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义页面、个性化主题和实现多页面
- en: Streamlit recently added many advanced features to make customizing our apps
    easier and more accurate. Now, it’s possible to configure our pages so that we
    can hide the *burger menu* or the footer, for example. It’s possible to change
    many standard links and deeply personalize themes, colors, and styles. Finally,
    it’s possible to deal with multi-pages natively, naming and configuring folders
    in a very specific way.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Streamlit最近增加了许多高级功能，使得定制我们的应用程序变得更加简便和精准。现在，我们可以配置我们的页面，比如隐藏*汉堡菜单*或页脚。例如，可以更改许多标准链接，并深度个性化主题、颜色和样式。最后，我们可以本地处理多页面，使用非常特定的方式命名和配置文件夹。
- en: All these new features are a very powerful way to deeply customize our web applications,
    making their look and behavior exactly the way we imagined during the design stage
    of the project.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些新特性是深度自定义我们网页应用程序的一种非常强大的方式，使它们的外观和行为完全符合我们在项目设计阶段的设想。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要内容：
- en: Understanding new features related to deep customization
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解与深度自定义相关的新特性
- en: Creating deeply customized pages
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建深度定制页面
- en: Understanding theming and `.``toml` files
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解主题和`.toml`文件
- en: Exploring the multi-pages feature
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索多页面功能
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'In this chapter, we will be using the following libraries, packages, and tools:'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用以下库、包和工具：
- en: Sublime Text
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sublime Text
- en: Python 3
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 3
- en: '`pipenv`'
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pipenv`'
- en: Streamlit
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Streamlit
- en: 'The code for this chapter can be found in this book’s GitHub repository: [https://github.com/PacktPublishing/Web-App-Development-Made-Simple-with-Streamlit/tree/e54d7b3d8840a3971ab8241acf6a1a6212e51f77/Chapter14](https://github.com/PacktPublishing/Web-App-Development-Made-Simple-with-Streamlit/tree/e54d7b3d8840a3971ab8241acf6a1a6212e51f77/Chapter14)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章节的代码可以在本书的GitHub仓库找到：[https://github.com/PacktPublishing/Web-App-Development-Made-Simple-with-Streamlit/tree/e54d7b3d8840a3971ab8241acf6a1a6212e51f77/Chapter14](https://github.com/PacktPublishing/Web-App-Development-Made-Simple-with-Streamlit/tree/e54d7b3d8840a3971ab8241acf6a1a6212e51f77/Chapter14)
- en: Understanding new features related to deep customization
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解与深度自定义相关的新特性
- en: 'For this chapter, no new packages are needed – all we need is Streamlit. Let’s
    start by creating a new empty Python file; as usual, you can call it `app.py`.
    Then, open the IDE. We can start coding by just importing `streamlit` and adding
    a title both in the sidebar and in the main part of the web application, as shown
    in *Figure 14**.1*:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本章节不需要新的包——我们只需要Streamlit。首先，创建一个新的空Python文件；如常，你可以将其命名为`app.py`。然后，打开IDE。我们可以通过仅仅导入`streamlit`并在侧边栏和网页应用的主部分添加一个标题来开始编程，如*图
    14.1*所示：
- en: '![Figure 14.1: The starting code](img/B21147_14_01.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.1：启动代码](img/B21147_14_01.jpg)'
- en: 'Figure 14.1: The starting code'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.1：启动代码
- en: 'Launching the application opens the browser on localhost at port `8501` and,
    as usual, we get something like this:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 启动应用程序会在`8501`端口的localhost上打开浏览器，通常我们会看到类似这样的界面：
- en: '![Figure 14.2: The starting web app](img/B21147_14_02.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.2：启动网页应用](img/B21147_14_02.jpg)'
- en: 'Figure 14.2: The starting web app'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.2：启动网页应用
- en: 'This is very simple: we get the same title in the sidebar and the main part
    of the web app. Taking a closer look, we can find some very interesting elements
    that can be customized:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这非常简单：我们在侧边栏和网页应用的主部分都得到相同的标题。仔细观察，我们可以发现一些非常有趣的元素可以进行定制：
- en: '![Figure 14.3: App title and icon, footer, and menu](img/B21147_14_03.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.3：应用标题与图标、页脚及菜单](img/B21147_14_03.jpg)'
- en: 'Figure 14.3: App title and icon, footer, and menu'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.3：应用标题与图标、页脚及菜单
- en: 'In *Figure 14**.3*, we have the following:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图 14.3*中，我们可以看到以下内容：
- en: 'In red, we can see the *title* and *icon* of our web application. At the moment,
    these are the default ones: Streamlit’s icon and our Python filename.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在红色部分，我们可以看到我们网页应用的*标题*和*图标*。此时，这些是默认的：Streamlit的图标和我们的Python文件名。
- en: In green, we can see the so-called *footer*.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在绿色部分，我们可以看到所谓的*页脚*。
- en: In yellow, we can see the *three points menu*. In previous versions of Streamlit,
    this was the so-called *hamburger menu*.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在黄色部分，我们可以看到*三个点菜单*。在Streamlit的早期版本中，这就是所谓的*汉堡菜单*。
- en: 'Let’s start from the *three points menu* and click on it. We’ll get the following
    pop-up menu:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 从*三个点菜单*开始，点击它。我们将看到如下弹出菜单：
- en: '![Figure 14.4: The “three points” menu](img/B21147_14_04.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.4：三个点菜单](img/B21147_14_04.jpg)'
- en: 'Figure 14.4: The “three points” menu'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.4：三个点菜单
- en: 'In this pop-up menu, there are several voices:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个弹出菜单中，有几个选项：
- en: '**Rerun**, to rerun the web app after a change in the code'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重新运行**，在代码更改后重新运行Web应用'
- en: '**Print**, to print the screen'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**打印**，打印屏幕内容'
- en: '**Record a screencast**, to record our web app'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**录制屏幕录像**，录制我们的Web应用'
- en: '**Clear cache**, to clear the cache with just one click'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**清除缓存**，一键清除缓存'
- en: The other two voices, **About** and **Settings**, are very interesting because
    they can be customized, helping us in personalizing the look and feel of our application.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 另外两个选项，**关于**和**设置**，非常有趣，因为它们可以自定义，帮助我们个性化应用程序的外观和感觉。
- en: 'Let’s open **Settings**. We’ll get the following new window:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们打开**设置**，我们将看到以下新窗口：
- en: '![Figure 14.5: Settings](img/B21147_14_05.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图14.5：设置](img/B21147_14_05.jpg)'
- en: 'Figure 14.5: Settings'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.5：设置
- en: From this menu, we can automatically update the app when the underlying code
    is updated. We can also choose to run it in wide or normal mode and set the theme;
    this can be **Light**, **Dark**, or the same as our system’s settings (**Use**
    **system setting**).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个菜单中，我们可以在底层代码更新时自动更新应用程序。我们还可以选择以宽屏或正常模式运行，并设置主题；可以选择**浅色**、**深色**，或者与系统设置相同（**使用系统设置**）。
- en: 'The customization level is even deeper. In fact, by clicking on **Edit active
    theme**, we’ll see the following window:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义级别甚至更深。实际上，点击**编辑活动主题**后，我们将看到以下窗口：
- en: "![Figure 14.6: The\uFEFF Edit active theme\uFEFF window](img/B21147_14_06.jpg)"
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图14.6：编辑活动主题窗口](img/B21147_14_06.jpg)'
- en: 'Figure 14.6: The Edit active theme window'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.6：编辑活动主题窗口
- en: From this window, we can customize the **Primary color**, **Text color**, **Background
    color**, and **Secondary background color** value. Moreover, we can select the
    font from a list, and we can copy the configuration to the clipboard.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个窗口中，我们可以自定义**主色**、**文本颜色**、**背景色**和**次背景色**的值。此外，我们可以从列表中选择字体，并将配置复制到剪贴板。
- en: As indicated in the note below the font selection, if we want to make these
    choices permanent, we must edit a file named `config.toml` in the `.streamlit`
    directory; it’s a hidden folder. We’ll take care of this file later, in the *Understanding
    theming and .toml* *files* section.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如字体选择下方的注释所示，如果我们希望这些选择永久生效，我们必须编辑`.streamlit`目录下名为`config.toml`的文件；这是一个隐藏文件夹。我们将在*理解主题和
    .toml 文件*部分处理这个文件。
- en: Now, it’s time to see how we can customize our pages.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候看看如何自定义我们的页面了。
- en: Creating deeply customized pages
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建深度自定义页面
- en: 'Now, let’s move back to the code, taking care of the title and icon marked
    in red in *Figure 14**.3*:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们回到代码，处理*图14.3*中标红的标题和图标：
- en: "![Figure 14.7: The \uFEFFset_page_config\uFEFF method](img/B21147_14_07.jpg)"
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![图14.7：set_page_config方法](img/B21147_14_07.jpg)'
- en: 'Figure 14.7: The set_page_config method'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.7：set_page_config方法
- en: On *line 3*, immediately after `import streamlit as st`, we set the page configuration
    using the `st.set_page_config` method. In this way, we can customize the page
    title and icon (an emoji or even a PNG or an ICO file is supported), set the layout
    of the content in the main section (it can be wide or centered), and decide whether
    the sidebar is expanded or collapsed at start time.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第3行*，紧接着`import streamlit as st`后，我们使用`st.set_page_config`方法设置页面配置。通过这种方式，我们可以自定义页面标题和图标（支持表情符号，甚至是PNG或ICO文件），设置主区域内容的布局（可以是宽屏或居中），并决定侧边栏在启动时是展开还是折叠。
- en: 'The result, with the configuration reported in *Figure 14**.7*, is as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 根据*图14.7*中报告的配置，结果如下：
- en: '![Figure 14.8: A customized page](img/B21147_14_08.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图14.8：自定义页面](img/B21147_14_08.jpg)'
- en: 'Figure 14.8: A customized page'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.8：自定义页面
- en: It is up to you to try different settings while using all the available parameters.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以尝试不同的设置，使用所有可用的参数。
- en: 'With the `set_page_config` method, we can do even more. In fact, by adding
    the few lines of code shown in *Figure 14**.9*, we can modify the *three points
    menu* and the **About** section:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`set_page_config`方法，我们可以做得更多。事实上，通过添加*图14.9*中显示的几行代码，我们可以修改*三点菜单*和**关于**部分：
- en: "![Figure 14.9: Full customization with \uFEFFset_page_config\uFEFF](img/B21147_14_09.jpg)"
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![图14.9：使用set_page_config的完整自定义](img/B21147_14_09.jpg)'
- en: 'Figure 14.9: Full customization with set_page_config'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.9：使用set_page_config的完整自定义
- en: 'Here’s a breakdown of what we did in the preceding code:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是我们在前面的代码中所做的工作：
- en: On *lines 9* and *10*, we added two voices to the *three points menu* called
    **Get Help** and **Report a bug**. They direct the users to the Streamlit website
    and GitHub, respectively. You can insert any kind of URL you wish here.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在*第 9 行*和*第 10 行*，我们为*三点菜单*添加了两个选项，分别是**获取帮助**和**报告 Bug**。它们分别将用户引导到 Streamlit
    网站和 GitHub。你可以在这里插入任何你想要的 URL。
- en: On *line 11*, we added a note that will be shown in the **About** option of
    the menu; this note supports the standard Markdown syntax.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在*第 11 行*，我们添加了一个注释，将在菜单的**关于**选项中显示；这个注释支持标准的 Markdown 语法。
- en: '*Figure 14**.10* shows the new *three points menu* and the customized **About**
    section side by side:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 14.10* 显示了新的*三点菜单*和定制的**关于**部分并排展示：'
- en: "![Figure 14.10: The customized \uFEFFthree points\uFEFF menu and \uFEFFAbout\uFEFF\
    \ section](img/B21147_14_10.jpg)"
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.10：定制的三点菜单和关于部分](img/B21147_14_10.jpg)'
- en: 'Figure 14.10: The customized three points menu and About section'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.10：定制的三点菜单和关于部分
- en: 'Next, referring to the *footer* shown in *Figure 14**.3*, let’s learn how to
    remove it with a very short instruction:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，参考*图 14.3*中显示的*页脚*，让我们通过一个非常简短的指令来学习如何去除它：
- en: '![Figure 14.11: Instruction to remove the footer](img/B21147_14_11.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.11：去除页脚的指令](img/B21147_14_11.jpg)'
- en: 'Figure 14.11: Instruction to remove the footer'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.11：去除页脚的指令
- en: 'Here’s what we are doing in the preceding code:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们在前面代码中所做的操作：
- en: On *line 19*, we added very simple html code to set the footer’s visibility
    to *hidden*
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在*第 19 行*，我们添加了非常简单的 HTML 代码，将页脚的可见性设置为*隐藏*
- en: On *line 25*, as usual, using `st.markdown` with `unsafe_allow_html`, we used
    that `html` code
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在*第 25 行*，像往常一样，使用 `st.markdown` 和 `unsafe_allow_html`，我们使用了那个 `html` 代码
- en: 'It is quite interesting that just by adding another line of code before the
    `footer` row, we can easily remove the *three point menu* as well. The final code
    is as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 非常有趣的是，只需在 `footer` 行之前再添加一行代码，我们就可以轻松去除*三点菜单*。最终的代码如下：
- en: '![Figure 14.12: The instruction to remove the footer and main menu](img/B21147_14_12.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.12：去除页脚和主菜单的指令](img/B21147_14_12.jpg)'
- en: 'Figure 14.12: The instruction to remove the footer and main menu'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.12：去除页脚和主菜单的指令
- en: 'The web application looks as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 网页应用如下所示：
- en: '![Figure 14.13: The web app without a footer and main menu](img/B21147_14_13.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.13：没有页脚和主菜单的网页应用](img/B21147_14_13.jpg)'
- en: 'Figure 14.13: The web app without a footer and main menu'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.13：没有页脚和主菜单的网页应用
- en: In this section, we learned how to customize our pages by leveraging the `set_page_config`
    instruction. Moreover, we learned how to remove the `footer` row and the *three
    points menu* from our Streamlit pages. In the next section, we’ll learn how to
    work on *themes*.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们学习了如何利用 `set_page_config` 指令来定制页面。此外，我们还学会了如何从 Streamlit 页面中去除 `footer`
    行和*三点菜单*。在下一部分，我们将学习如何处理*主题*。
- en: Understanding theming and .toml files
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解主题和 .toml 文件
- en: At the beginning of this chapter, in the *Understanding new features related
    to deep customization* section, we learned how to change the theme of our web
    apps directly from the browser. Streamlit has supported natively custom theming
    since version 0.79.0, which means that we can customize our theme directly from
    the backend without working in the browser.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章开始时，在*理解与深度定制相关的新功能*部分，我们学习了如何直接从浏览器更改网页应用的主题。Streamlit 自版本 0.79.0 起原生支持自定义主题，这意味着我们可以直接从后台定制主题，而无需在浏览器中进行操作。
- en: We’ve already seen that there is a hidden directory named `.streamlit` and that
    inside this directory, there is a file named `config.toml`.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到有一个隐藏的目录叫 `.streamlit`，并且在这个目录中，有一个名为 `config.toml` 的文件。
- en: 'If we want to customize the theme, first of all, we must open this `config.toml`
    file, then add the following instructions to it:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想定制主题，首先必须打开这个 `config.toml` 文件，然后向其中添加以下指令：
- en: "![Figure 14.14: Theme configuration with the\uFEFF config.toml\uFEFF file](img/B21147_14_14.jpg)"
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.14：使用 config.toml 文件进行主题配置](img/B21147_14_14.jpg)'
- en: 'Figure 14.14: Theme configuration with the config.toml file'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.14：使用 config.toml 文件进行主题配置
- en: The configuration in *Figure 14**.14* is the classical light theme. If you want
    to have a completely different effect, you can use your preferred color codes
    and choose a font between Sans-serif, Serif, or Monospace. To get a quick indication
    of color codes, try to look for *HTML Color Codes* on the internet or check a
    website such as [https://html-color.codes/](https://html-color.codes/).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 14.14*中的配置是经典的浅色主题。如果你想要完全不同的效果，可以使用你喜欢的颜色代码，并在无衬线、衬线或等宽字体之间选择。要快速查看颜色代码，可以在互联网上搜索*HTML颜色代码*，或者访问像[https://html-color.codes/](https://html-color.codes/)这样的站点。'
- en: 'For example, let’s say we adopt the following HTML color codes:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们采用以下HTML颜色代码：
- en: '![Figure 14.15: A completely different theme configuration](img/B21147_14_15.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.15：一个完全不同的主题配置](img/B21147_14_15.jpg)'
- en: 'Figure 14.15: A completely different theme configuration'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.15：一个完全不同的主题配置
- en: 'We will get a rather strong result, as shown in the following figure:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将得到一个相当强烈的结果，如下图所示：
- en: '![Figure 14.16: A rather strong theme with a Monospace font](img/B21147_14_16.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.16：一个相当强烈的主题，使用了等宽字体](img/B21147_14_16.jpg)'
- en: 'Figure 14.16: A rather strong theme with a Monospace font'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.16：一个相当强烈的主题，使用了等宽字体
- en: Very simple! Customizing the theme is just a matter of using HTML color codes
    and a TOML file. Now, let’s learn what *multi-pages* are.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 非常简单！定制主题只需使用HTML颜色代码和一个TOML文件。现在，让我们来了解什么是*多页面*。
- en: Exploring the multi-pages feature
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索多页面功能
- en: Multi-pages in Streamlit are a way to organize your app into multiple pages,
    each with its own content. This can be useful for large apps with a lot of functionalities,
    or for apps that need to be divided into different sections for different users.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Streamlit中的多页面是将你的应用组织成多个页面的一种方式，每个页面有其独立的内容。这对于功能丰富的大型应用或需要为不同用户划分不同部分的应用非常有用。
- en: To create a multi-page app in Streamlit, you simply need to create a new folder
    called `pages` in the same folder as your main app file. Then, create new Python
    files inside the `pages` folder, each of which will represent a different page
    in your app.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Streamlit中创建一个多页面应用，只需要在与你的主应用文件同一文件夹下创建一个名为`pages`的新文件夹。然后，在`pages`文件夹中创建新的Python文件，每个文件将代表你应用中的一个不同页面。
- en: Once you have created your pages, you can start adding content to them. You
    can use any Streamlit widgets and functions that you want, just like you would
    in a regular Streamlit app.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了页面，你就可以开始为它们添加内容。你可以使用任何你想要的Streamlit小部件和函数，就像在常规的Streamlit应用中一样。
- en: When you run your app, Streamlit will automatically detect the pages in the
    `pages` folder and add them to a navigation bar in the sidebar. Users can then
    click on the different pages to navigate between them.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行你的应用时，Streamlit将自动检测`pages`文件夹中的页面，并将它们添加到侧边栏的导航栏中。用户可以点击不同的页面在它们之间导航。
- en: According to the preceding explanation, everything sounds easy; as we are going
    to see, it really is.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的解释，一切听起来都很简单；正如我们将看到的，确实如此。
- en: Creating multi-pages
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建多页面
- en: 'Let’s build a simple multi-pages web application. As usual, we’ll start by
    building the skeleton of the app:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们构建一个简单的多页面网页应用。像往常一样，我们将从构建应用的框架开始：
- en: First, we’ll create a new file. We will call it `app.py`.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将创建一个新文件，命名为`app.py`。
- en: Then, open the `app.py` file in Sublime Text and import `streamlit`.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在Sublime Text中打开`app.py`文件并导入`streamlit`。
- en: 'Now, create a `main` function that displays just the title, as shown in *Figure
    14**.17*:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，创建一个`main`函数，只显示标题，如*图 14.17*所示：
- en: "![Figure 14.17: The basic skeleton for our “multi-page\uFEFF” web app](img/B21147_14_17.jpg)"
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.17：我们“多页面”网页应用的基本框架](img/B21147_14_17.jpg)'
- en: 'Figure 14.17: The basic skeleton for our “multi-page” web app'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.17：我们“多页面”网页应用的基本框架
- en: 'As you can imagine, the preceding code produces a rather simple web app in
    the browser. This is the result:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，前面的代码会在浏览器中生成一个相当简单的网页应用。结果如下：
- en: '![Figure 14.18: The starting point](img/B21147_14_18.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.18：起始点](img/B21147_14_18.jpg)'
- en: 'Figure 14.18: The starting point'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.18：起始点
- en: Please note that the theme is still the one we configured in the *Understanding
    theming and .toml* *files* section.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，主题仍然是我们在*理解主题和.toml* *文件*部分配置的主题。
- en: 'Now, let’s create a directory named `pages`. This directory must be at the
    same level as our main file – that is, it must be in the same folder as the `app.py`
    file. We can write the following instruction in the terminal:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建一个名为`pages`的目录。这个目录必须与我们的主文件处于同一级别——也就是说，它必须与`app.py`文件在同一个文件夹中。我们可以在终端中输入以下指令：
- en: '[PRE0]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, we can move inside this `pages` directory and then create a new file named
    `page1.py`. To do so, we must write the following instruction in the terminal:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以进入`pages`目录，然后创建一个名为`page1.py`的新文件。为此，我们必须在终端中输入以下指令：
- en: '[PRE1]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The structure of our folders is shown in *Figure 14**.19*:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们文件夹的结构如*图 14.19*所示：
- en: '![Figure 14.19: The structure of our folders and files](img/B21147_14_19.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.19：我们文件夹和文件的结构](img/B21147_14_19.jpg)'
- en: 'Figure 14.19: The structure of our folders and files'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.19：我们文件夹和文件的结构
- en: There is a `root` directory containing the `app.py` file and a directory named
    `pages`. There is also a file named `page1.py` inside the `pages` directory.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个包含`app.py`文件的`root`目录和一个名为`pages`的目录。`pages`目录中还有一个名为`page1.py`的文件。
- en: 'If we check our browser, we’ll see that Streamlit automatically recognized
    the presence of two pages – one named `app` and another named `page1`:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看浏览器，会看到Streamlit自动识别出了两个页面——一个名为`app`，另一个名为`page1`：
- en: '![](img/B21147_14_20.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21147_14_20.png)'
- en: 'Figure 14.20: Two pages in the sidebar'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.20：侧边栏中的两个页面
- en: The names of the two pages in the sidebar are the same as the names of the Python
    files in our directories, just without `.py`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 侧边栏中的两个页面名称与我们目录中Python文件的名称相同，只是没有`.py`后缀。
- en: 'Upon clicking on `page1`, we get an empty page because the `page1.py` file
    is still empty. Let’s move back to Sublime Text and add some code to it:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 点击`page1`后，我们会看到一个空白页面，因为`page1.py`文件仍然为空。让我们返回到Sublime Text并添加一些代码：
- en: '![](img/B21147_14_21.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21147_14_21.png)'
- en: 'Figure 14.21: Some simple code to add to the page1.py file'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.21：一些简单的代码，添加到page1.py文件中
- en: 'The new code is very simple – it just prints **Page1** on the screen. This
    is the result:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 新的代码非常简单——它只是将**Page1**打印到屏幕上。结果是：
- en: "![Figure 14.22: The result after clicking on \uFEFFpage1\uFEFF](img/B21147_14_22.jpg)"
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.22：点击`page1`后的结果](img/B21147_14_22.jpg)'
- en: 'Figure 14.22: The result after clicking on page1'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.22：点击`page1`后的结果
- en: 'We can continue in the same way by creating a new file named `page2.py` inside
    the `pages` directory. In the terminal, we can simply write the following:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以继续按照相同的方式，在`pages`目录中创建一个名为`page2.py`的新文件。在终端中，我们只需输入以下内容：
- en: '[PRE2]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then, moving to Sublime Text, we can edit the `page2.py` file in the same way
    we did with `page1.py`, as shown in the following figure:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，进入Sublime Text，我们可以像编辑`page1.py`那样编辑`page2.py`文件，如下图所示：
- en: "![Figure 14.23: Some simple code to add to the \uFEFFpage2.py\uFEFF file](img/B21147_14_23.jpg)"
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.23：一些简单的代码，添加到page2.py文件中](img/B21147_14_23.jpg)'
- en: 'Figure 14.23: Some simple code to add to the page2.py file'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.23：一些简单的代码，添加到page2.py文件中
- en: 'This is the result in the web application:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在Web应用中的结果：
- en: "![Figure 14.24: A new page in our\uFEFF multi-page\uFEFF web application](img/B21147_14_24.jpg)"
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.24：我们多页面Web应用中的新页面](img/B21147_14_24.jpg)'
- en: 'Figure 14.24: A new page in our multi-page web application'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.24：我们多页面Web应用中的新页面
- en: As we can see, we have a new page in the list in the sidebar. After clicking
    **page2**, a new page can be visualized in the main part of the web application.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，侧边栏中的列表中有一个新页面。点击**page2**后，Web应用程序的主界面中将显示一个新页面。
- en: 'Let’s create another file inside the `pages` directory, this time naming it
    `new_feature.py`. We’ll add the same code we used for `page1.py` and `page2.py`
    to it. This is the result in the browser:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`pages`目录中创建另一个文件，这次命名为`new_feature.py`。我们将把与`page1.py`和`page2.py`相同的代码添加到其中。浏览器中的结果是：
- en: '![Figure 14.25: The pages in the sidebar are in alphabetical order](img/B21147_14_25.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.25：侧边栏中的页面按字母顺序排列](img/B21147_14_25.jpg)'
- en: 'Figure 14.25: The pages in the sidebar are in alphabetical order'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.25：侧边栏中的页面按字母顺序排列
- en: We can see that the pages in the sidebar are ordered alphabetically. If we want
    to change the order of the pages, we must change their names in a specific way.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到侧边栏中的页面是按字母顺序排列的。如果我们想更改页面的顺序，必须以特定的方式更改它们的名称。
- en: 'In the terminal, write the following:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端中，输入以下内容：
- en: '[PRE3]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In this way, we renamed the old `page1.py` to `01_page1.py`.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，我们将旧的`page1.py`重命名为`01_page1.py`。
- en: 'Similarly, we can rename the old `page2.py` to `02_page2.py` and the old `new_feature.py`
    to `03_new_feature.py`:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们可以将旧的`page2.py`重命名为`02_page2.py`，并将旧的`new_feature.py`重命名为`03_new_feature.py`：
- en: '[PRE4]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If we check our browser now, we’ll see that the page order is different:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在检查浏览器，我们会看到页面顺序发生了变化：
- en: '![Figure 14.26: The pages in the sidebar now follow a customized order](img/B21147_14_26.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.26：侧边栏中的页面现在按照自定义顺序排列](img/B21147_14_26.jpg)'
- en: 'Figure 14.26: The pages in the sidebar now follow a customized order'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.26：侧边栏中的页面现在按照自定义顺序排列
- en: The order of the pages in the sidebar now follows the changes we applied to
    the files since we placed 01, 02, and 03 at the beginning of their names.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 侧边栏中页面的顺序现在遵循我们对文件所做的更改，因为我们将 01、02 和 03 放在它们名称的开头。
- en: As we can see, Streamlit is very smart since it doesn’t put the numeration at
    the beginning of the page names, only their real names.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，Streamlit 非常智能，因为它没有将编号放在页面名称的开头，而只是显示它们的真实名称。
- en: If we check the address bar of the browser shown in *Figure 14**.26*, we’ll
    see that the *new feature* page URL is `localhost:8501/new_feature`. So, Streamlit
    uses the page names to change the URL accordingly.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们检查*图 14.26*中显示的浏览器地址栏，我们会看到 *new feature* 页面的 URL 是 `localhost:8501/new_feature`。因此，Streamlit
    使用页面名称相应地更改 URL。
- en: Passing a variable from one page to another
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从一个页面传递变量到另一个页面
- en: Multi-pages is something very powerful since it is possible to pass variables
    from one page to another. Let’s learn how to leverage this feature.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 多页功能非常强大，因为可以将变量从一个页面传递到另一个页面。让我们学习如何利用这个功能。
- en: 'Let’s make a little change to our `app.py` file – that is, to the main page
    – as shown in the following screenshot:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们对 `app.py` 文件（即主页）做一个小修改，如下图所示：
- en: '![Figure 14.27: A new variable in the “app.py” file](img/B21147_14_27.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.27：在“app.py”文件中添加的新变量](img/B21147_14_27.jpg)'
- en: 'Figure 14.27: A new variable in the “app.py” file'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.27：在“app.py”文件中添加的新变量
- en: 'On *line 3*, we created a text variable named `my_variable` that is printed
    on the screen on *line 8*. This is the result in the web application:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第3行*，我们创建了一个名为 `my_variable` 的文本变量，并在*第8行*将其打印到屏幕上。以下是在 Web 应用中的结果：
- en: "![Figure 14.28: The new variable shown on the\uFEFF app\uFEFF page](img/B21147_14_28.jpg)"
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.28：在应用页面上显示的新变量](img/B21147_14_28.jpg)'
- en: 'Figure 14.28: The new variable shown on the app page'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.28：在应用页面上显示的新变量
- en: On the main page – that is, the `my_variable` that was created in the `app.py`
    file.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在主页上——即在`app.py`文件中创建的`my_variable`。
- en: 'Now, in Sublime Text, we will change the `01_page1.py` code, as shown in the
    following screenshot:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在 Sublime Text 中，我们将更改`01_page1.py`代码，如下图所示：
- en: '![Figure 14.29: Code changes in the “01_page1.py” file](img/B21147_14_29.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.29：“01_page1.py”文件中的代码更改](img/B21147_14_29.jpg)'
- en: 'Figure 14.29: Code changes in the “01_page1.py” file'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.29：“01_page1.py”文件中的代码更改
- en: 'Here’s what we are doing:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我们正在做的事情：
- en: On *line 4*, we imported `my_variable` from the `app` file.
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在*第4行*，我们从 `app` 文件中导入了 `my_variable`。
- en: Please note that according to the specific syntax, we do not need to write `from
    app.py` but simply `from app` – that is, excluding the `.py` from the filename.
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，根据特定语法，我们不需要写 `from app.py`，只需写 `from app` —— 即文件名中省略 `.py` 后缀。
- en: Then, on *line 7*, we printed the imported variable on the screen.
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，在*第7行*，我们将导入的变量打印到屏幕上。
- en: 'This is the result in the web application:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在 web 应用中的结果：
- en: "![Figure 14.30: The new variable shown on the \uFEFFpage1\uFEFF page](img/B21147_14_30.jpg)"
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.30：在 page1 页面上显示的新变量](img/B21147_14_30.jpg)'
- en: 'Figure 14.30: The new variable shown on the page1 page'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.30：在 page1 页面上显示的新变量
- en: 'The result is very interesting: here, we are showing the content of a variable
    that has been created on another page on **page1**!'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 结果非常有趣：在这里，我们展示了在另一个页面上创建的变量的内容，在**page1**页面上！
- en: 'Let’s also modify the `02_page2.py` file in the following way:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将以下面方式修改 `02_page2.py` 文件：
- en: "![Figure 14.31: A new variable in the \uFEFF02_page2.py\uFEFF file](img/B21147_14_31.jpg)"
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.31：在 02_page2.py 文件中添加的新变量](img/B21147_14_31.jpg)'
- en: 'Figure 14.31: A new variable in the 02_page2.py file'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.31：在 02_page2.py 文件中添加的新变量
- en: 'On *line 3*, we introduce a new variable that is printed on *line 6*. This
    is the result in the web application:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第3行*，我们引入了一个新变量，并在*第6行*打印它。以下是在 Web 应用中的结果：
- en: "![Figure 14.32: The new variable shown on the \uFEFFpage2\uFEFF page](img/B21147_14_32.jpg)"
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.32：在 page2 页面上显示的新变量](img/B21147_14_32.jpg)'
- en: 'Figure 14.32: The new variable shown on the page2 page'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.32：在 page2 页面上显示的新变量
- en: 'Now, let’s try to print the variable we created on `page2` on `page1`. To achieve
    this result, this time, for the `01_page1.py` file, we must use slightly different
    code, as shown in the following figure:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们尝试在 `page1` 中打印我们在 `page2` 中创建的变量。为此，我们这次需要对 `01_page1.py` 文件使用稍微不同的代码，如下图所示：
- en: '![Figure 14.33: The new code for the “01_page1.py” file](img/B21147_14_33.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.33： “01_page1.py” 文件的新代码](img/B21147_14_33.jpg)'
- en: 'Figure 14.33: The new code for the “01_page1.py” file'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.33： “01_page1.py” 文件的新代码
- en: 'Here’s what we did:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们所做的：
- en: On *line 5*, we imported `my_variable_page2` from the `02_page2.py` file. However,
    since this file is inside the `pages` folder, we had to write `from` `pages.02_page2
    import...`.
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 *第 5 行*，我们从 `02_page2.py` 文件导入了 `my_variable_page2`。然而，由于该文件位于 `pages` 文件夹内，我们必须写
    `from` `pages.02_page2 import...`。
- en: On *line 9*, we printed the `my_variable_page2` variable.
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 *第 9 行*，我们打印了 `my_variable_page2` 变量。
- en: 'When we move to the browser, we’ll get the following error:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们切换到浏览器时，我们会遇到以下错误：
- en: '![Figure 14.34: A script execution error](img/B21147_14_34.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.34：脚本执行错误](img/B21147_14_34.jpg)'
- en: 'Figure 14.34: A script execution error'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.34：脚本执行错误
- en: As the error explains, we are facing an *invalid decimal literal*. This means
    that when we tried to import `from pages.02_page2…`, as shown in *Figure 14**.33*,
    Streamlit couldn’t manage `02` at the beginning of the filename.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 正如错误所解释的那样，我们遇到了 *无效的十进制字面量*。这意味着当我们尝试从 `pages.02_page2…` 导入时，如 *图 14.33* 所示，Streamlit
    无法处理文件名开头的 `02`。
- en: 'To fix this issue, we must rename the file in the following way:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 要解决此问题，我们必须按以下方式重命名文件：
- en: '[PRE5]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Accordingly, we must change the code in the `01_page1.py` file, as follows:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们必须按照如下方式更改 `01_page1.py` 文件中的代码：
- en: "![Figure 14.35: The final code changes to the\uFEFF 01_page1.py\uFEFF file](img/B21147_14_35.jpg)"
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.35：对 01_page1.py 文件的最终代码更改](img/B21147_14_35.jpg)'
- en: 'Figure 14.35: The final code changes to the 01_page1.py file'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.35：对 01_page1.py 文件的最终代码更改
- en: 'Now, we are correctly importing from `pages.page2`. Checking our browser, we’ll
    see that everything works fine:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经正确地从 `pages.page2` 导入了内容。检查浏览器后，我们会看到一切正常：
- en: '![Figure 14.36: page1 showing variables from other pages](img/B21147_14_36.jpg)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.36：page1 显示来自其他页面的变量](img/B21147_14_36.jpg)'
- en: 'Figure 14.36: page1 showing variables from other pages'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.36：page1 显示来自其他页面的变量
- en: '`app.py`) and a variable from `page2.app`, which means that variables are correctly
    exchanged among different pages.'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '`app.py`）和来自 `page2.app` 的变量，这意味着变量在不同页面之间正确交换。'
- en: This is proof that to exchange variables among files, we don’t have to put numbers
    in the filenames.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 这证明了要在文件之间交换变量，我们不必在文件名中使用数字。
- en: Our main task is to implement web applications that completely satisfy specific
    needs, such as disease detection, as we did with the *Covid-19 Detection Tool*
    app; however, making these applications very beautiful and easy to use is also
    very important. Deep customization is how we can make our application very attractive
    and simple to use.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的主要任务是实现完全满足特定需求的 Web 应用程序，例如我们使用 *Covid-19 检测工具* 应用程序实现的疾病检测。然而，使这些应用程序既美观又易于使用也是非常重要的。深度定制是让我们应用程序既具有吸引力又易于使用的方式。
- en: Summary
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we focused on advanced customization techniques in Streamlit.
    We delved into the new features that enable deep customization, allowing for more
    personalized and complex web pages. This chapter guided you through the process
    of creating highly customized pages, emphasizing the ability to tailor the user
    interface and functionality to specific requirements.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们专注于 Streamlit 中的高级定制技术。我们深入探讨了那些可以实现深度定制的新功能，允许开发更具个性化和复杂性的网页。本章指导你创建高度定制的页面，强调根据特定需求量身定制用户界面和功能的能力。
- en: A significant portion of this chapter was dedicated to understanding theming
    and the use of TOML files. This involves exploring how themes can be manipulated
    to change the look and feel of a Streamlit app, making it more appealing and brand-aligned.
    The use of TOML files was explained in detail, demonstrating how they can be used
    to define and manage these themes efficiently.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的大部分内容都致力于理解主题和使用 TOML 文件。这涉及到探索如何操作主题以改变 Streamlit 应用程序的外观，使其更加吸引人并符合品牌要求。TOML
    文件的使用也被详细解释，展示了如何有效地使用它们来定义和管理这些主题。
- en: Finally, this chapter explored Streamlit’s multi-pages feature. We learned how
    to structure a Streamlit application into multiple pages, thereby enhancing its
    organization and user navigation. We offered practical examples and best practices
    for implementing multi-page applications, ensuring you can effectively organize
    complex Streamlit projects into more manageable and user-friendly formats. This
    comprehensive chapter has empowered you to elevate your Streamlit applications
    to new levels of customization and sophistication.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，本章探讨了 Streamlit 的多页面功能。我们学习了如何将 Streamlit 应用程序结构化为多个页面，从而增强其组织性和用户导航性。我们提供了实际示例和最佳实践，帮助您实现多页面应用程序，确保您能够有效地将复杂的
    Streamlit 项目组织成更易管理和用户友好的格式。本章内容使您能够将 Streamlit 应用程序提升到更高的定制化和复杂度水平。
- en: In the next chapter, we’ll learn how to enhance our web applications with Streamlit’s
    forms, Session State, and customizable subdomain features.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将学习如何使用 Streamlit 的表单、会话状态和可自定义子域功能来增强我们的 Web 应用程序。
