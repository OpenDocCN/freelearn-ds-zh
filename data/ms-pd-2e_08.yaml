- en: Indexing and Selecting in pandas
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pandas 中的索引和选择
- en: 'In the previous chapter, you learned how pandas makes it possible to read from
    any source and store structured data as a pandas object—Series, DataFrame, or
    panel. This chapter elaborates on how to slice and dice these objects. The row
    labels and column labels serve as identifiers that help us with selecting a subset
    of the data. Instead of a label, positional identifiers such as the row index
    and column index can also be used. Indexing and selecting are the most fundamental
    yet vital operations performed on data. The topics that will be addressed in this
    chapter include the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你学习了如何通过 pandas 从任何来源读取并将结构化数据存储为 pandas 对象——Series、DataFrame 或 Panel。本章详细介绍了如何对这些对象进行切片操作。行标签和列标签作为标识符，帮助我们选择数据的子集。除了标签外，位置标识符（如行索引和列索引）也可以使用。索引和选择是对数据进行的最基本但至关重要的操作。本章将讨论的主题包括以下内容：
- en: Basic indexing
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本索引
- en: Labels, integer, and mixed indexing
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标签、整数和混合索引
- en: Multi-indexing
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多重索引
- en: Boolean indexing
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 布尔索引
- en: Operations on indexes
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 索引操作
- en: Basic indexing
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本索引
- en: If you have come across lists in Python, you will know that a pair of square
    brackets (`[]`) is used to index and subset a list. This square bracket operator
    is also useful in slicing NumPy arrays. The square bracket `[]` is the basic indexing
    operator in pandas as well.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你接触过 Python 中的列表，你会知道一对方括号（`[]`）用于索引和子集化列表。方括号运算符在切片 NumPy 数组时也很有用。方括号 `[]`
    也是 pandas 中的基本索引运算符。
- en: 'Let''s create a Series, DataFrame, and panel to understand how the square bracket
    operator is used in pandas:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个 Series、DataFrame 和 Panel 来了解在 pandas 中如何使用方括号运算符：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'For a Series, the square bracket operator can be used to slice by specifying
    the label or the positional index. Both use cases are shown in the following code
    block:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Series，方括号运算符可以通过指定标签或位置索引来进行切片。以下代码块展示了这两种用法：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The use of the square bracket operator in a DataFrame does have some restrictions.
    It allows only the column label to be passed and not the positional index or even
    the row label. Passing any other string that does not represent a column name
    raises `KeyError`:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在 DataFrame 中使用方括号运算符确实有一些限制。它只允许传递列标签，而不允许传递位置索引或甚至行标签。传递任何不代表列名的其他字符串会引发 `KeyError`：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This results in the following output:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '![](img/63e255b7-39ae-4b4d-83af-2a48f5e129f8.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/63e255b7-39ae-4b4d-83af-2a48f5e129f8.png)'
- en: Subset of a single column by column name
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 按列名称子集化单列
- en: 'A sequence of square bracket operators can be used to specify the row index
    or row label following the column attribute:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用一系列方括号运算符，在列属性后指定行索引或行标签：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This results in the following output:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '![](img/a1f2e659-668c-468d-bd4c-b3001ae6e32b.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a1f2e659-668c-468d-bd4c-b3001ae6e32b.png)'
- en: Slicing a single element using the square bracket operator
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 使用方括号运算符切片单个元素
- en: 'The rules that apply to a DataFrame apply to a panel as well—each item can
    be sliced from the panel by specifying the item name. The square bracket operator
    accepts only a valid item name:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 适用于 DataFrame 的规则也适用于 Panel——每个项都可以通过指定项名称从 Panel 中切片。方括号运算符仅接受有效的项名称：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This results in the following output:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '![](img/a01f5d7f-9f80-4977-a4cf-2f354c42c307.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a01f5d7f-9f80-4977-a4cf-2f354c42c307.png)'
- en: Subset of a panel
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Panel 的子集
- en: 'To subset multiple values, a list of the labels of the entities to be subset
    should be passed into the square bracket operator. Let''s examine this using the
    DataFrame. This holds good for Series and Panels as well:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要子集化多个值，应该将实体标签的列表传递给方括号运算符。让我们使用 DataFrame 来检查这一点。这对 Series 和 Panel 同样适用：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This results in the following output:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '![](img/ec0a9c3e-8d71-4b21-b10b-fd40e5109ade.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ec0a9c3e-8d71-4b21-b10b-fd40e5109ade.png)'
- en: Slicing multiple columns from a DataFrame
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 从 DataFrame 中切片多个列
- en: 'When a string that is not a column name is passed in, it raises an exception.
    This can be overcome by using the `get()` method:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当传入的字符串不是列名时，会引发异常。可以通过使用 `get()` 方法来克服这个问题：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The square bracket operator is also useful for inserting a new column in a
    DataFrame, as shown in the following code block:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 方括号运算符在 DataFrame 中也用于插入新列，以下代码块演示了这一点：
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This results in the following output:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '![](img/5f45a054-209b-4437-a669-f486965dbc95.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5f45a054-209b-4437-a669-f486965dbc95.png)'
- en: Adding a new column to a DataFrame
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 向 DataFrame 添加新列
- en: New values can be added to Series and Panels as well, via the method shown here.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以通过这里显示的方法向 Series 和 Panels 中添加新值。
- en: Accessing attributes using the dot operator
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用点操作符访问属性
- en: 'To access a single entity (a column, value, or item), the square bracket operator
    can be replaced by the dot operator. Let''s subset `colA` in the DataFrame using
    the dot (`.`) operator:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问单个实体（列、值或项），可以将方括号操作符替换为点操作符。让我们使用点（`.`）操作符来选择 DataFrame 中的 `colA`：
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This results in the following output:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '![](img/a5930687-5da6-4f77-9428-975df89e904f.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a5930687-5da6-4f77-9428-975df89e904f.png)'
- en: Slicing a column with the dot operator
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 使用点操作符切片列
- en: 'By using two dot operators in a chain, an individual element can be accessed:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在链中使用两个点操作符，可以访问单个元素：
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This is also applicable to Panels and Series. However, unlike the square bracket
    operator in Series, the positional index cannot be used here. For the dot operator
    to be used, the row labels or column labels must have valid names. A valid Python
    identifier must follow the following lexical convention:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这同样适用于 Panels 和 Series。然而，与 Series 中的方括号操作符不同，这里不能使用位置索引。为了使用点操作符，行标签或列标签必须具有有效的名称。有效的
    Python 标识符必须遵循以下词法规则：
- en: '[PRE10]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Using the dot operator, the values of existing columns can be changed. However,
    new columns cannot be created.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 使用点操作符，现有列的值可以被更改。然而，不能创建新列。
- en: Range slicing
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 范围切片
- en: 'Slicing by supplying the start and end position to subset a range of values
    can be done in pandas objects, just as in NumPy arrays. The `[ : ]` operator helps
    in range slicing.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '通过提供起始和结束位置来切片以获取一系列值，像在 NumPy 数组中一样，这在 pandas 对象中也适用。`[ : ]` 操作符有助于范围切片。'
- en: 'Let''s slice the Series that we created earlier to subset the second, third,
    and fourth rows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们切片之前创建的 Series，选取第二、第三和第四行：
- en: '[PRE11]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This results in the following output:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '![](img/424795dc-55ee-4ef6-872d-a8551d236324.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/424795dc-55ee-4ef6-872d-a8551d236324.png)'
- en: Slicing a Series with a range of indexes
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 使用索引范围切片 Series
- en: As always with a range in Python, the value after the colon is excluded when
    slicing.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Python 中的范围一样，切片时冒号后的值会被排除。
- en: 'Range slicing can be done by providing either the start or end index. If the
    end index is not provided, values are sliced from the given starting index to
    the end of the data structure. Likewise, when only the end index is given, the
    first row is considered as the starting position for slicing:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 范围切片可以通过提供起始或结束索引来完成。如果没有提供结束索引，值将从给定的起始索引切片到数据结构的末尾。同样，当只提供结束索引时，第一行会被视为切片的起始位置：
- en: '[PRE12]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This results in the following output:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '![](img/5aab6d02-1a19-48cc-be1b-750c176be125.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5aab6d02-1a19-48cc-be1b-750c176be125.png)'
- en: Range slicing with the posterior end of the range defined
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 使用定义范围末端的范围切片
- en: 'When the starting index is given, the row corresponding to that index value
    is chosen as the starting position for slicing:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当给定起始索引时，选择该索引值对应的行作为切片的起始位置：
- en: '[PRE13]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This results in the following output:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '![](img/43e084aa-1fd6-4607-9cb6-baeabd69b615.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/43e084aa-1fd6-4607-9cb6-baeabd69b615.png)'
- en: Range slicing with the anterior end of the range defined
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 使用定义范围起始端的范围切片
- en: 'Range slicing can be made even more interesting through a property to select
    rows at evenly spaced intervals. For instance, you can select only the odd-numbered
    rows or even-numbered rows this way:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 通过属性使范围切片变得更有趣，可以选择间隔均匀的行。例如，你可以通过这种方式选择奇数行或偶数行：
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This results in the following output:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '![](img/174bb860-123e-4a07-a88e-9b7a64b9510a.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/174bb860-123e-4a07-a88e-9b7a64b9510a.png)'
- en: Range slicing to select odd-numbered rows
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 使用范围切片选择奇数行
- en: 'To select even rows, you can use the following code:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 要选择偶数行，可以使用以下代码：
- en: '[PRE15]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This results in the following output:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '![](img/3a981f78-0ceb-4124-a46a-e118457da6ca.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3a981f78-0ceb-4124-a46a-e118457da6ca.png)'
- en: Range slicing to select even-numbered rows
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 使用范围切片选择偶数行
- en: 'If you want to reverse the order of the rows, you can use the following command:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想反转行的顺序，可以使用以下命令：
- en: '[PRE16]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This results in the following output:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '![](img/66dce428-832c-411c-8070-6783d9d9dee9.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/66dce428-832c-411c-8070-6783d9d9dee9.png)'
- en: Range slicing to reverse the order of rows
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 使用范围切片反转行的顺序
- en: Labels, integer, and mixed indexing
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标签、整数和混合索引
- en: 'In addition to the standard indexing operator, `[]`, and attribute operator,
    there are operators provided in pandas to make the job of indexing easier and
    more convenient. By label indexing, we generally mean indexing by a header name,
    which tends to be a string value in most cases. These operators are as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 除了标准的索引操作符 `[]` 和属性操作符外，pandas 还提供了一些操作符，使得索引更加简便和高效。通过标签索引，通常是指使用列标题进行索引，这些标题通常是字符串类型的值。这些操作符包括：
- en: '**The** `.loc` **operator**: This allows label-oriented indexing.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`.loc` 操作符**：该操作符允许基于标签的索引。'
- en: '**The `.iloc` operator**: This allows integer-based indexing.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`.iloc` 操作符**：该操作符允许基于整数的索引。'
- en: '**The `.ix` operator**: This allows mixed label and integer-based indexing.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`.ix` 操作符**：该操作符允许混合标签和基于整数的索引。'
- en: We'll now turn our attention to these operators.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将重点介绍这些操作符。
- en: Label-oriented indexing
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于标签的索引
- en: 'The `.loc` operator supports pure label-based indexing. It accepts the following
    as valid inputs:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`.loc` 操作符支持纯标签基础的索引。它接受以下作为有效输入：'
- en: A single label such as `["colC"]`, `[2]`, or `["R1"]`—note that in cases where
    the label is an integer, it doesn't refer to the integer position of the index,
    but the integer is itself a label.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单个标签，如 `["colC"]`、`[2]` 或 `["R1"]` —— 请注意，在标签是整数的情况下，它并不代表索引的位置，而是整数本身作为标签。
- en: A list or array of labels, for example, `["colA", "colB" ]`.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标签列表或数组，例如 `["colA", "colB"]`。
- en: A slice object with labels, for example, `"colB":"colD"`.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带标签的切片对象，例如 `"colB":"colD"`。
- en: A Boolean array.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个布尔数组。
- en: 'Let''s examine each of these four cases with respect to the following two Series—one
    with an integer-based label and another with a string-based label:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分别查看这四种情况，针对以下两个 Series —— 一个是基于整数标签，另一个是基于字符串标签：
- en: '[PRE17]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This results in the following output:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成以下输出：
- en: '![](img/c79d572a-546a-4917-a5c4-d0e6abd79a7f.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c79d572a-546a-4917-a5c4-d0e6abd79a7f.png)'
- en: Output of loc1.loc with a list of integer labels
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `loc1.loc` 对整数标签列表进行索引的输出
- en: '[PRE18]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '![](img/fdab5360-f534-4f9e-9cd3-91774a7b7dd5.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fdab5360-f534-4f9e-9cd3-91774a7b7dd5.png)'
- en: Output of loc2.loc with a list of labels
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `loc2.loc` 对标签列表进行索引的输出
- en: '[PRE19]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '![](img/c722f22a-c2a7-4161-aaab-8ad8a2078ab9.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c722f22a-c2a7-4161-aaab-8ad8a2078ab9.png)'
- en: Output of loc with range slicing (integer labels)
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `loc` 进行范围切片（整数标签）的输出
- en: '[PRE20]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '![](img/dd3f4e13-5719-4369-8db6-030f8e1708cc.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dd3f4e13-5719-4369-8db6-030f8e1708cc.png)'
- en: Output of loc with range slicing
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `loc` 进行范围切片的输出
- en: 'Notice that, unlike the ranges in Python where the posterior end is excluded,
    here, both the exteriors are included in the selected data. pandas objects can
    also be filtered based on logical conditions applied to values within the objects:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，与 Python 中的范围不同，后端端点不被排除，这里两个端点都包括在所选数据中。pandas 对象还可以基于对对象内部值应用的逻辑条件进行过滤：
- en: '[PRE21]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '![](img/f141cc8d-442a-44c9-992e-611072fa7c06.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f141cc8d-442a-44c9-992e-611072fa7c06.png)'
- en: Output of loc with a Boolean array for indexing
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 使用布尔数组进行索引的 `loc` 输出
- en: 'Now, these techniques for slicing can be applied to a DataFrame. It works the
    same, except for the fact that there is a provision to supply two sets of labels—one
    for each axis:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这些切片技巧可以应用到 DataFrame 中。它的工作方式相同，只是有一个额外的要求：可以为每个轴提供两个标签集合。
- en: '[PRE22]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '![](img/cd799db4-795c-4d65-932e-190cb3cf9f66.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cd799db4-795c-4d65-932e-190cb3cf9f66.png)'
- en: Output of loc for slicing a single column
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `loc` 对单列进行切片的输出
- en: '[PRE23]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '![](img/a669a756-30ff-48d2-91e3-e974b6d6f0cc.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a669a756-30ff-48d2-91e3-e974b6d6f0cc.png)'
- en: Output of loc for slicing a single row (integer label)
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `loc` 对单行（整数标签）进行切片的输出
- en: 'In the preceding case, "2" did not represent the position, but the index label:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，“2”并没有代表位置，而是代表索引标签：
- en: '[PRE24]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '![](img/63723539-7ee5-47d1-a5be-c0710018880f.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](img/63723539-7ee5-47d1-a5be-c0710018880f.png)'
- en: Output of loc for slicing a single row
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `loc` 对单行进行切片的输出
- en: '[PRE25]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '![](img/c4d8eb7a-0702-4293-8d7c-d98d5062e6a0.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4d8eb7a-0702-4293-8d7c-d98d5062e6a0.png)'
- en: Output of loc for selecting through a list of labels
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `loc` 通过标签列表进行选择的输出
- en: '[PRE26]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '![](img/d9d1349d-4334-4f00-8d1e-3791633bf3f0.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d9d1349d-4334-4f00-8d1e-3791633bf3f0.png)'
- en: Output of loc for range slicing
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `loc` 进行范围切片的输出
- en: '[PRE27]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '![](img/5bc1bee1-2294-49f6-bc43-f0ad4d174c85.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5bc1bee1-2294-49f6-bc43-f0ad4d174c85.png)'
- en: Output of loc for slicing based on a Boolean array
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `loc` 进行基于布尔数组切片的输出
- en: Integer-oriented indexing
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 整数基础的索引
- en: 'Integer-oriented indexing can be implemented for the same four cases as label-oriented
    indexing: single labels, a list of labels, range slicing, and Boolean arrays.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 整数基础的索引可以实现与基于标签的索引相同的四种情况：单个标签、一组标签、范围切片和布尔数组。
- en: 'Let''s use the same DataFrames as in the previous session to understand integer-oriented
    indexing. Here, let''s use two values—one for each axis—to examine integer-based
    indexing. Passing an index for one axis is also permissible. This can also be
    done with the `loc` operator by passing in both the row and column labels:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用与前一节相同的DataFrame来理解面向整数的索引。在这里，我们使用两个值——分别针对每个轴——来检查基于整数的索引。也允许仅传递一个轴的索引。通过`loc`运算符也可以做到这一点，只需传入行和列标签：
- en: '[PRE28]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '![](img/12d678e0-1364-4f53-acd7-85716669bae2.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](img/12d678e0-1364-4f53-acd7-85716669bae2.png)'
- en: Output of iloc for slicing with a list of indices
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 使用索引列表进行切片时的iloc输出
- en: '[PRE29]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '![](img/271db284-08af-455d-acc5-48d826c62034.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/271db284-08af-455d-acc5-48d826c62034.png)'
- en: Output of iloc for ranged slicing
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 使用范围切片时的iloc输出
- en: '[PRE30]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '![](img/f56d6eb3-1b21-49ee-ad00-725ba8cb38f0.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f56d6eb3-1b21-49ee-ad00-725ba8cb38f0.png)'
- en: Output of iloc for slicing with a Boolean array
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 使用布尔数组进行切片时的iloc输出
- en: For Boolean array-based indexing with the `iloc` operator, the array must be
    extracted using logical conditions around array values.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 对于基于布尔数组的`iloc`运算符索引，必须通过围绕数组值的逻辑条件提取数组。
- en: The .iat and .at operators
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`.iat`和`.at`运算符'
- en: 'The `.iat` and `.at` operators are equivalent to `.iloc` and `.loc` operators—the
    former is for position-based indexing and the latter for label-based indexing.
    While `.loc` and `.iloc` support the selection of multiple values, `.at` and `.iat`
    can only extract a single scalar value. Hence they require row and column indices
    for slicing:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '`.iat`和`.at`运算符等同于`.iloc`和`.loc`运算符——前者用于基于位置的索引，后者用于基于标签的索引。虽然`.loc`和`.iloc`支持选择多个值，但`.at`和`.iat`只能提取单个标量值。因此，它们需要行和列索引进行切片：'
- en: '[PRE31]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The `.iat` and `.at` operators are considerably faster in performance than
    `.iloc` and `.loc`:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '`.iat`和`.at`运算符的性能比`.iloc`和`.loc`要快得多：'
- en: '![](img/9255123f-bdae-46fa-b7c1-e95ffadf7ed7.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9255123f-bdae-46fa-b7c1-e95ffadf7ed7.png)'
- en: Benchmarking .iat with respect to .iloc
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 对`.iat`与`.iloc`的基准测试
- en: Mixed indexing with the .ix operator
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用.ix运算符进行混合索引
- en: The `.ix` operator accepts both label-based and position-based indexing and
    is considered to be a more generic version of the `.loc` and `.iloc` operators.
    Due to ambiguity, this operator is deprecated and will not be available in a future
    version. Hence, it is advised not to use the `.ix` operator. Let's get an understanding
    of the `.ix` operator.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`.ix`运算符既支持基于标签的索引，也支持基于位置的索引，并且被认为是`.loc`和`.iloc`运算符的通用版本。由于存在歧义，这个运算符已经被弃用，并且在未来的版本中将不再可用。因此，建议不要使用`.ix`运算符。让我们来了解一下`.ix`运算符。'
- en: 'Here, the row index is label-based and the column index is position-based:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，行索引是基于标签的，列索引是基于位置的：
- en: '[PRE32]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '![](img/a33ee537-af4c-47be-acd7-d45df89c359f.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a33ee537-af4c-47be-acd7-d45df89c359f.png)'
- en: Mixed indexing with .ix in a DataFrame
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在DataFrame中使用.ix进行混合索引
- en: Multi-indexing
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多重索引
- en: 'We''ll now turn to the topic of multi-indexing. Multi-level or hierarchical
    indexing is useful because it enables pandas users to select and massage data
    in multiple dimensions by using data structures such as Series and DataFrames.
    In order to start, let''s save the following data to a file, `stock_index_prices.csv`,
    and read it in:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将转向多重索引的话题。多级或层次化索引非常有用，因为它允许pandas用户通过使用诸如Series和DataFrame等数据结构，在多个维度中选择和处理数据。为了开始，让我们将以下数据保存到文件`stock_index_prices.csv`，并读取它：
- en: '[PRE33]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Here, we create a multi-index from the `TradingDate` and `PriceType` columns:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们通过`TradingDate`和`PriceType`列创建一个多重索引：
- en: '[PRE34]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Upon inspection, we see that the multi-index consists of a list of tuples.
    Applying the `get_level_values` function with the appropriate argument produces
    a list of the labels for each level of the index:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 经检查，我们发现多重索引由一组元组组成。使用适当参数应用`get_level_values`函数，生成每个索引级别的标签列表：
- en: '[PRE35]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '`IndexError` will be thrown if the value passed to `get_level_values()` is
    invalid or out of range:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 如果传递给`get_level_values()`的值无效或超出范围，将抛出`IndexError`：
- en: '[PRE36]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'You can achieve hierarchical indexing with a multi-indexed DataFrame:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过多重索引的DataFrame实现层次化索引：
- en: '[PRE37]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'We can slice using a multi-index:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用多重索引进行切片：
- en: '[PRE38]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'We can try slicing at a lower level:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以尝试在更低级别进行切片：
- en: '[PRE39]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: However, this results in `KeyError` with a rather strange error message. The
    key lesson to be learned here is that the current incarnation of multi-index requires
    the labels to be sorted for the lower-level slicing routines to work correctly.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这会导致`KeyError`，并伴随一个相当奇怪的错误信息。这里的关键教训是，目前版本的多重索引要求标签已排序，才能确保低级切片操作正确执行。
- en: 'In order to do this, you can utilize the `sortlevel()` method, which sorts
    the labels of an axis within a multi-index. To be on the safe side, sort first
    before slicing with a multi-index. Thus, we can do the following:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，你可以使用`sortlevel()`方法，它对多重索引中的轴标签进行排序。为了安全起见，先排序再进行多重索引切片。因此，我们可以这样做：
- en: '[PRE40]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'We can also pass a list of tuples:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以传递一个元组列表：
- en: '[PRE41]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Note that by specifying a list of tuples instead of a range, as in the previous
    example, we display only the values of open `PriceType` rather than all three
    for `TradingDate = 2014/02/24`.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，通过指定一个元组列表而不是范围，如前面的示例所示，我们仅显示`TradingDate = 2014/02/24`时的`PriceType`的开盘值，而不是显示所有三个值。
- en: Swapping and re-ordering levels
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交换和重新排序级别
- en: 'The `swaplevel` function enables levels within the multi-index to be swapped:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '`swaplevel`函数允许在多重索引中交换级别：'
- en: '[PRE42]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The `reorder_levels` function is more general, allowing you to specify the
    order of the levels:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '`reorder_levels`函数更加通用，允许你指定级别的顺序：'
- en: '[PRE43]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Cross-sections
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交叉截面
- en: 'The `xs` method provides a shortcut means of selecting data based on a particular
    index-level value:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '`xs`方法提供了一种基于特定索引级别值选择数据的快捷方式：'
- en: '[PRE44]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The more long-winded alternative to the preceding command would be to use `swaplevel`
    to switch between the `TradingDate` and `PriceType` levels and then perform the
    selection as follows:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 前面命令的冗长替代方法是使用`swaplevel`在`TradingDate`和`PriceType`级别之间切换，然后执行如下选择：
- en: '[PRE45]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Using `.xs` achieves the same effect as obtaining a cross-section in the previous
    section on integer-oriented indexing.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`.xs`实现的效果与在前一节关于整数索引的内容中获取交叉截面相同。
- en: Boolean indexing
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 布尔索引
- en: 'We use Boolean indexing to filter or select parts of the data. The operators
    are as follows:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用布尔索引来过滤或选择数据的部分内容。操作符如下：
- en: '| **Operators** | **Symbol** |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '| **操作符** | **符号** |'
- en: '| OR | &#124; |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| 或 | &#124; |'
- en: '| AND | & |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| 与 | & |'
- en: '| NOT | ~ |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| 非 | ~ |'
- en: 'These operators must be grouped using parentheses when used together. Using
    the earlier DataFrame from the previous section, here we display the trading dates
    for which NASDAQ closed above 4,300:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 当这些操作符一起使用时，必须用括号将它们分组。使用前一节中的DataFrame，我们在这里显示了纳斯达克收盘价高于4,300的交易日期：
- en: '[PRE46]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'You can also create Boolean conditions in which you use arrays to filter out
    parts of the data, as shown in the following code:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以创建布尔条件，使用数组来筛选数据的部分，如下代码所示：
- en: '[PRE47]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Thus, the preceding code snippet displays the only date in the dataset for which
    the NASDAQ Composite index stayed below the 4,300 level for the entire trading
    session.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，上面的代码片段显示了数据集中唯一一个在整个交易会话中，纳斯达克综合指数始终保持低于4,300点的日期。
- en: The isin and any all methods
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`isin`和`any all`方法'
- en: 'These methods enable the user to achieve more with Boolean indexing than the
    standard operators used in the preceding sections. The `isin` method takes a list
    of values and returns a Boolean array with `True` at the positions within the
    Series or DataFrame that match the values in the list. This enables the user to
    check for the presence of one or more elements within a Series. Here is an illustration
    using `Series`:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法使用户通过布尔索引比前面章节中使用的标准操作符能够实现更多功能。`isin`方法接受一个值列表，并返回一个布尔数组，其中在Series或DataFrame中与列表中的值匹配的位置标记为`True`。这使得用户能够检查Series中是否存在一个或多个元素。下面是一个使用`Series`的示例：
- en: '[PRE48]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Here, we use the Boolean array to select a sub-series containing the values
    that we''re interested in:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用布尔数组来选择一个包含我们感兴趣值的子系列：
- en: '[PRE49]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'For our DataFrame example, we switch to a more interesting dataset for those
    of us who are of a biological anthropology bent—that of classifying Australian
    mammals (a pet interest of mine):'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的DataFrame示例，我们切换到一个更有趣的数据集，对于那些从事生物人类学研究的人来说，这是分类澳大利亚哺乳动物的数据集（这是我的一个兴趣爱好）：
- en: '[PRE50]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Some more information on mammals: Marsupials are pouched mammals, monotremes
    are egg-laying, and placentals give birth to live young. The source of this information
    is the following: [http://en.wikipedia.org/wiki/List_of_mammals_of_Australia](http://en.wikipedia.org/wiki/List_of_mammals_of_Australia).'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于哺乳动物的信息：有袋类动物是有袋哺乳动物，单孔目是卵生的，胎盘动物则是生育活幼。该信息来源于：[http://en.wikipedia.org/wiki/List_of_mammals_of_Australia](http://en.wikipedia.org/wiki/List_of_mammals_of_Australia).
- en: '![](img/764b993d-5a63-451a-8e9c-a62c465387e1.jpg)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![](img/764b993d-5a63-451a-8e9c-a62c465387e1.jpg)'
- en: The source of the preceding image is Bennett's wallaby at [http://bit.ly/NG4R7N.](http://bit.ly/NG4R7N.)
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 前面图像的来源是Bennett的袋鼠，网址：[http://bit.ly/NG4R7N.](http://bit.ly/NG4R7N.)
- en: 'Let''s read the Australian Mammals dataset, convert that to a DataFrame, and
    transpose it before using it:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们读取澳大利亚哺乳动物数据集，将其转换为 DataFrame，并在使用之前转置它：
- en: '[PRE51]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Let''s try to select mammals that are native to Australia:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试选择原产于澳大利亚的哺乳动物：
- en: '[PRE52]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'The set of values passed to `isin` can be an array or a dictionary. That works
    to some extent, but we can achieve better results by creating a mask as a combination
    of the `isin` and `all()` methods:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给 `isin` 的值集可以是数组或字典。虽然这样做在某种程度上是有效的，但通过将 `isin` 和 `all()` 方法结合使用创建掩码，我们可以获得更好的结果：
- en: '[PRE53]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Thus, we see that kangaroo, koala, and wallaby are the native marsupials in
    our dataset. The `any()` method returns whether any element is `True` in a Boolean
    DataFrame. The `all()` method filters return whether all elements are `True` in
    a Boolean DataFrame.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们看到袋鼠、考拉和沙袋鼠是我们数据集中原生的有袋动物。`any()` 方法返回布尔型 DataFrame 中是否有任何元素为 `True`。`all()`
    方法则会筛选返回布尔型 DataFrame 中所有元素是否都为 `True`。
- en: More can be read about the pandas methods from their official documentation
    page: [http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.any.html.](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.any.html.)
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于 pandas 方法的信息，可以从其官方文档页面查看：[http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.any.html.](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.any.html.)
- en: Using the where() method
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 `where()` 方法
- en: 'The `where()` method is used to ensure that the result of Boolean filtering
    is the same shape as the original data. First, we set the random number generator
    seed to 100 so that the user can generate the same values, as shown next:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '`where()` 方法用于确保布尔过滤的结果与原始数据的形状相同。首先，我们将随机数生成器的种子设置为 100，以便用户可以生成相同的值，如下所示：'
- en: '[PRE54]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'This method seems to be useful only in the case of a Series, as we get this
    behavior for free in the case of a DataFrame:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法似乎只在 Series 的情况下有用，因为在 DataFrame 的情况下，我们已经可以免费获得这个行为：
- en: '[PRE55]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'The inverse operation of the `where` method is `mask`:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '`where` 方法的逆操作是 `mask`：'
- en: '[PRE56]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Operations on indexes
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 索引操作
- en: 'To complete this chapter, we''ll discuss operations on indexes. We sometimes
    need to operate on indexes when we wish to realign our data or select it in different
    ways. There are various operations:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成本章内容，我们将讨论索引操作。当我们希望重新对齐数据或以不同方式选择数据时，有时需要操作索引。这里有多种操作：
- en: 'Note that `set_index` allows the creation of an index on an existing DataFrame
    and returns an indexed DataFrame, as we have seen before:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`set_index` 允许在现有的 DataFrame 上创建索引，并返回一个已索引的 DataFrame，正如我们之前所看到的：
- en: '[PRE57]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Now, we can set the index as follows:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以按如下方式设置索引：
- en: '[PRE58]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Furthermore, `reset_index` reverses `set_index`:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`reset_index` 会逆转 `set_index` 的操作：
- en: '[PRE59]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: After reading this chapter, you have come a long way in wrangling data using
    pandas. We will continue to learn about useful tools for data wrangling in the
    next chapter.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读完这一章后，你在使用 pandas 进行数据整理方面已经取得了长足的进步。在下一章中，我们将继续学习更多有用的数据整理工具。
- en: Summary
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how to access and select data from panda data structures.
    We also looked in detail at basic indexing and label-oriented, integer-oriented,
    and mixed indexing. We also learned how to use a Boolean/logical index as well.
    At the end of the chapter, we discussed the index operations.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何访问和选择 pandas 数据结构中的数据。我们还详细了解了基本索引和标签导向、整数导向及混合索引方法。我们还学习了如何使用布尔/逻辑索引。在本章结束时，我们讨论了索引操作。
- en: For further references about indexing in pandas, please take a look at the official
    documentation at [http://pandas.pydata.org/pandas-docs/stable/indexing.html](http://pandas.pydata.org/pandas-docs/stable/indexing.html).
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 若要了解有关 pandas 中索引的更多信息，请查阅官方文档：[http://pandas.pydata.org/pandas-docs/stable/indexing.html](http://pandas.pydata.org/pandas-docs/stable/indexing.html)。
- en: In the next chapter, we will examine the topics of grouping, reshaping, and
    merging data using pandas.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨使用 pandas 进行分组、重塑和合并数据的主题。
