- en: Chapter 6. Working with ArcPy Geometry Objects
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章：使用ArcPy几何对象
- en: The essence of geospatial analysis is using geometric shapes – points, lines,
    and polygons – to model the geography of real world objects and their location-based
    relationships. The simple shapes and their geometric properties of location, length
    and area are processed using geospatial operations to generate analysis results.
    It is the combination of modeled geographic data and the associated attribute
    information that separate geospatial information systems from all other information
    systems.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 地理空间分析的本质是使用几何形状——点、线和多边形——来模拟现实世界对象及其基于位置的关系。简单的形状及其位置、长度和面积等几何属性通过地理空间操作进行处理，以生成分析结果。正是模型化地理数据和相关的属性信息将地理信息系统与其他所有信息系统区分开来。
- en: Until ArcPy, processing the feature class geometry using the geospatial operations
    was depended on the pre-built tools within ArcToolbox. ArcPy has made it possible
    to directly access the geometric shapes which are stored as mathematical representations
    in the shape field of feature classes. Once accessed, this geometric data is loaded
    into ArcPy geometry objects to make the data available for analysis within an
    ArcPy script. Because of this advance, writing scripts that access geometry fields
    and use them to perform analysis has transformed ArcGIS geospatial analysis. In
    this chapter, we'll explore how to generate and use the ArcPy geometry objects
    to perform geospatial operations, and apply them to the bus stops analysis.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在ArcPy之前，使用地理空间操作处理要素类几何主要依赖于ArcToolbox中的预建工具。ArcPy使得直接访问存储在要素类形状字段中的数学表示的几何形状成为可能。一旦访问，这些几何数据就被加载到ArcPy几何对象中，以便在ArcPy脚本中进行分析。正因为这一进步，编写访问几何字段并使用它们进行分析的脚本已经改变了ArcGIS的地理空间分析。在本章中，我们将探讨如何生成和使用ArcPy几何对象来执行地理空间操作，并将它们应用于公交车站分析。
- en: 'In this chapter, we will cover: `Point` and `Array` constructor objects and
    `PointGeometry`, `Polyline`, and `Polygon` geometry objects'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍：`Point`和`Array`构造函数对象以及`PointGeometry`、`Polyline`和`Polygon`几何对象
- en: How to use the geometry objects to perform geospatial operations
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用几何对象执行地理空间操作
- en: How to integrate the geometry objects into scripts
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何将几何对象集成到脚本中
- en: How to perform common geospatial operations using the geometry objects
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用几何对象执行常见的地理空间操作
- en: How to replace the use of ArcToolbox tools in the script with geometry object
    methods
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在脚本中使用几何对象方法替换ArcToolbox工具的使用
- en: ArcPy geometry object classes
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ArcPy几何对象类
- en: In designing geometry objects, the authors of ArcPy made it possible to perform
    geospatial operations in memory, reducing the need to use tools in the ArcToolbox
    for these operations. This will result in speed gains as there is no need to write
    the results of the calculations to disk at each step of the analysis. Instead,
    the results of the steps can be passed from function to function within the script.
    The final results of the analysis can be written to the hard drive as a feature
    class, or they can be written into a spreadsheet or passed to another program.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计几何对象时，ArcPy的作者使得在内存中执行地理空间操作成为可能，减少了使用ArcToolbox中工具进行这些操作的需求。这将导致速度提升，因为在分析的每一步中都不需要将计算结果写入磁盘。相反，步骤的结果可以在脚本中的函数之间传递。分析的最后结果可以写入硬盘上的要素类，或者可以写入电子表格或传递给另一个程序。
- en: The geometry objects are written as Python classes- special blocks of code that
    contain internal functions. The internal functions are the methods and properties
    of the geometry objects; when called they allow the object to perform an operation
    (a method) or to reveal information about the geometry object (a property). Python
    classes are written with a main class that contains shared methods and properties,
    and with sub-classes that reference the main class but also have specific methods
    and properties that are not shared. Here, the main class is the ArcPy `Geometry`
    object, while the sub-classes are the `PointGeometry`, `Multipoint`, `Polyline`
    and `Polygon` objects.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 几何对象被编写为Python类——包含内部函数的特殊代码块。内部函数是几何对象的方法和属性；当被调用时，它们允许对象执行操作（方法）或揭示有关几何对象的信息（属性）。Python类使用一个包含共享方法和属性的父类编写，以及引用父类但还具有特定方法和不共享属性的子类。在这里，父类是ArcPy的`Geometry`对象，而子类是`PointGeometry`、`Multipoint`、`Polyline`和`Polygon`对象。
- en: The geometry objects are generated in three ways. The first requires using data
    cursors to read existing feature classes and passing a special keyword as a field
    name. The shape data returned by the cursor is a geometry object. The second method
    is to create new data by passing raw coordinates to a constructor object (either
    a `Point` or `Array` object), which is then passed to a geometry object. The third
    method is to read data from a feature class using the Copy Features tool from
    the ArcToolbox.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 几何对象可以通过三种方式生成。第一种方法需要使用数据游标来读取现有的要素类，并传递一个特殊的关键字作为字段名。游标返回的形状数据是一个几何对象。第二种方法是通过将原始坐标传递给构造函数对象（无论是`Point`还是`Array`对象）来创建新数据，然后将其传递给几何对象。第三种方法是通过使用ArcToolbox中的复制要素工具从要素类中读取数据。
- en: Each geometry object has methods that allow for read access and write access.
    The read access methods are important for accessing the coordinate points that
    constitute the points, lines and polygons. The write access methods are important
    when generating new data objects that can be analyzed or written to disk.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 每个几何对象都有允许进行读取访问和写入访问的方法。读取访问方法对于访问构成点、线和多边形的坐标点是重要的。写入访问方法在生成新的数据对象时很重要，这些对象可以进行分析或写入磁盘。
- en: The `PointGeometry`, `Multipoint`, `Polyline`, and `Polygon` geometry objects
    are used for performing analysis upon their respective geometry types. The generic
    geometry object can accept any geometry type and an optional spatial reference
    to perform geospatial operations when there is no need to discern the geometry
    type.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`PointGeometry`、`Multipoint`、`Polyline`和`Polygon`几何对象用于对其各自的几何类型进行分析。通用几何对象可以接受任何几何类型，并在不需要区分几何类型时执行地理空间操作。'
- en: 'Two other ArcPy classes will be used for performing geospatial operations in
    memory: the `Array` object and the `Point` object. They are constructor objects,
    as they are not sub-classed from the geometry class, but are instead used to construct
    the geometry objects. The `Point` object is used to create coordinate points from
    raw coordinates. The `Array` object is a list of coordinate points that can be
    passed to a `Polyline` or `Polygon` object, as a regular Python list of ArcPy
    `Point` objects cannot be used to generate those geometry objects.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 将使用两个其他ArcPy类在内存中执行地理空间操作：`Array`对象和`Point`对象。它们是构造函数对象，因为它们不是从几何类派生的子类，而是用于构建几何对象。`Point`对象用于从原始坐标创建坐标点。`Array`对象是一系列坐标点，可以传递给`Polyline`或`Polygon`对象，因为普通的Python列表中的ArcPy
    `Point`对象不能用来生成这些几何对象。
- en: ArcPy Point objects
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ArcPy `Point`对象
- en: '`Point` objects are the building blocks used to generate geometry objects.
    Also, all of the geometry objects will return component coordinates as `Point`
    objects when using read access methods. `Point` objects allow for simple geometry
    access using its *X*, *Y* and *Z* properties, and a limited number of geospatial
    methods, such as `contains`, `overlaps`, `within`, `touches`, `crosses, equals`,
    and `disjoint`. Let''s use IDLE to explore some of these methods with two `Point`
    geometry objects with the same coordinates:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`Point`对象是用于生成几何对象的基本构建块。此外，所有几何对象在读取访问方法时都将返回组件坐标作为`Point`对象。`Point`对象允许通过其*X*、*Y*和*Z*属性进行简单的几何访问，以及有限数量的地理空间方法，例如`contains`、`overlaps`、`within`、`touches`、`crosses`、`equals`和`disjoint`。让我们使用IDLE来探索一些这些方法，使用具有相同坐标的两个`Point`几何对象：'
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In these examples, we see some of the idiosyncrasies of the `Point` object.
    With two points that have the same coordinates, the results of the `equals` method
    and the `disjoint` method are as expected. The `disjoint` method will return `True`
    when the two objects do not share coordinates, while the opposite is true with
    the `equals` method. The `contains` method will work with the two Point objects
    and return True. The `crosses` method and `overlaps` method are somewhat surprising
    results, as the two Point objects do overlap in location and could be considered
    to cross; however, those methods do not return the expected result as they are
    not built to compare two points.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些示例中，我们可以看到`Point`对象的一些特性。对于具有相同坐标的两个点，`equals`方法和`disjoint`方法的结果符合预期。当两个对象不共享坐标时，`disjoint`方法将返回`True`，而`equals`方法则相反。`contains`方法将适用于两个`Point`对象并返回`True`。`crosses`方法和`overlaps`方法的结果有些令人惊讶，因为两个`Point`对象在位置上确实重叠，并且可以被认为是交叉的；然而，这些方法并没有返回预期的结果，因为它们并不是用来比较两个点的。
- en: ArcPy Array objects
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ArcPy `Array`对象
- en: Before we progress up to `Polyline` and `Polygon` objects, we need to understand
    the ArcPy `Array` object. It is the bridge between the `Point` objects and those
    geometry objects that require multiple coordinate points. `Array` objects accept
    `Point` objects as parameters, and the `Array` object is in turn passed as a parameter
    to the geometry object to be created. Let's use Point objects with an Array object
    to understand better how they work together.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续学习`Polyline`和`Polygon`对象之前，我们需要了解ArcPy的`Array`对象。它是`Point`对象和需要多个坐标点的几何对象之间的桥梁。`Array`对象接受`Point`对象作为参数，而`Array`对象反过来又作为参数传递给要创建的几何对象。让我们使用`Point`对象和`Array`对象一起，更好地理解它们是如何协同工作的。
- en: 'The `Array` object is similar to a Python list, with `extend`, `append`, and
    `replace` methods, and also has unique methods such as `add` and `clone`. The
    `add` method will be used to add `Point` objects individually:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`Array`对象类似于Python列表，具有`extend`、`append`和`replace`方法，并且还具有独特的`add`和`clone`方法。`add`方法将用于单独添加`Point`对象：'
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `extend()` method would add a list of Point objects all at once:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`extend()`方法会一次性添加一个`Point`对象的列表：'
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The `insert` method will put a `Point` object in the Array at a specific index,
    while the `replace` method is used to replace a `Point` object in an Array by
    passing an index and a new `Point` object:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`insert`方法将在Array中的特定索引处放置一个`Point`对象，而`replace`方法通过传递索引和一个新的`Point`对象来替换Array中的`Point`对象：'
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `Array` object, when loaded with `Point` objects, can then be used to generate
    the other geometry objects.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当`Array`对象加载了`Point`对象后，可以用来生成其他几何对象。
- en: ArcPy Polyline objects
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ArcPy Polyline对象
- en: 'The `Polyline` object is generated with an `Array` object that has at least
    two `Point` objects. As given in the following IDLE example, once an `Array` object
    has been generated and loaded with the `Point` objects, it can then be passed
    as a parameter to a `Polyline` object:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`Polyline`对象是由至少包含两个`Point`对象的`Array`对象生成的。如下面的IDLE示例所示，一旦生成了`Array`对象并加载了`Point`对象，它就可以作为参数传递给`Polyline`对象：'
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now that the Polyline object has been created, its methods can be accessed.
    This includes methods to reveal the constituent coordinate points within the polyline,
    and other relevant information:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在Polyline对象已经创建，我们可以访问其方法。这包括揭示多段线中的构成坐标点和其他相关信息的方法：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This example `Polyline` object has not been assigned a spatial reference system,
    so the length is unitless. When a geometry object does have a spatial reference
    system, the linear and areal units will be returned in the linear unit of the
    system.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例`Polyline`对象尚未分配空间参考系统，因此长度是无单位的。当一个几何对象确实有空间参考系统时，线性单位和面积单位将以系统的线性单位返回。
- en: 'The `Polyline` object is also our first geometry object with which we can invoke
    geometry class methods that perform geospatial operations, such as buffers, distance
    analyses, and clips:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`Polyline`对象也是我们第一个可以调用执行地理空间操作（如缓冲区、距离分析和裁剪）的几何对象：'
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Another useful method of `Polyline` objects is the `positionAlongLine` method.
    It is used to return a `PointGeometry` object, discussed in the following, at
    a specific position along the line. This position along the line can either be
    a numeric distance from the first Point or as a percentage (expressed as a float
    from 0-1), when using the optional second parameter:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`Polyline`对象的另一个有用方法是`positionAlongLine`方法。它用于在特定位置返回一个`PointGeometry`对象，如下文所述。这个位置可以是沿线的数值距离，也可以是百分比（以0-1之间的浮点数表示），当使用可选的第二个参数时：'
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'There are a number of other methods available to `Polyline` objects. More information
    is available here: [http://resources.arcgis.com/en/help/main/10.2/index.html#//018z00000008000000](http://resources.arcgis.com/en/help/main/10.2/index.html#//018z00000008000000)'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`Polyline`对象还有许多其他方法可用。更多信息请参阅：[http://resources.arcgis.com/en/help/main/10.2/index.html#//018z00000008000000](http://resources.arcgis.com/en/help/main/10.2/index.html#//018z00000008000000)'
- en: ArcPy Polygon objects
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ArcPy Polygon对象
- en: 'To create a `Polygon` object, an `Array` object must be loaded with `Point`
    objects and then passed as a parameter to the `Polygon` object. Once the `Polygon`
    object has been generated, the methods available to it are very useful for performing
    geospatial operations. The geometry objects can also be saved to disk using the
    ArcToolbox `CopyFeatures` tool. This IDLE example demonstrates how to generate
    a `shapefile` by passing a `Polygon` object and a raw string filename to the tool:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个 `Polygon` 对象，必须使用 `Array` 对象加载 `Point` 对象，然后将它作为参数传递给 `Polygon` 对象。一旦生成了
    `Polygon` 对象，它所拥有的方法对于执行地理空间操作非常有用。几何对象也可以使用 ArcToolbox 的 `CopyFeatures` 工具保存到磁盘。以下
    IDLE 示例演示了如何通过将 `Polygon` 对象和原始字符串文件名传递给工具来生成 `shapefile`：
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Polygon object buffers
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Polygon 对象缓冲区
- en: '`Polygon` objects, like `Polyline` objects, have methods that make it easy
    to perform geospatial operations such as buffers. By passing a number to the buffer
    method as a parameter, a buffer will be generated in memory. The unit of the number
    is determined by the `SpatialReference` system. Internal buffers can be generated
    by supplying negative buffer numbers; the buffer generated being the area within
    the `Polygon` object at the specified distance from the Polygon perimeter. Clips,
    unions, symmetrical differences, and more operations are available as methods,
    as are within or contains operations; even projections can be performed using
    the `Polygon` object methods as long as it has a `SpatialReference` system object
    passed as a parameter. Following is a script that will create two shapefiles with
    two separate `SpatialReference` systems, each identified by a numeric code (2227
    and 4326) from the EPSG coding system:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`Polygon` 对象，就像 `Polyline` 对象一样，拥有使执行地理空间操作（如缓冲区）变得容易的方法。通过将一个数字传递给缓冲区方法作为参数，可以在内存中生成一个缓冲区。数字的单位由
    `SpatialReference` 系统确定。可以通过提供负缓冲区数字来生成内部缓冲区；生成的缓冲区是 `Polygon` 对象内部在指定距离处的区域。裁剪、并集、对称差集以及更多操作都作为方法提供，还有在内部或包含操作；只要传递了
    `SpatialReference` 系统对象作为参数，就可以使用 `Polygon` 对象方法执行投影。以下是一个脚本，它将创建两个具有两个不同的 `SpatialReference`
    系统的 shapefile，每个系统由 EPSG 编码系统中的一个数字代码（2227 和 4326）标识：'
- en: '[PRE9]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Here is how the second shapefile looks in the **ArcCatalog** **Preview** window:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是第二个 shapefile 在 **ArcCatalog** **预览**窗口中的样子：
- en: '![Polygon object buffers](img/8662OS_06_01.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![Polygon 对象缓冲区](img/8662OS_06_01.jpg)'
- en: Other Polygon object methods
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他 Polygon 对象方法
- en: 'Unlike the clip tool in the ArcToolbox, which can clip a Polygon using another
    polygon, the clip method requires an extent object (another ArcPy class) and is
    limited to a rectangular envelope around the area to be clipped. To remove areas
    from a polygon, the difference method can work like the clip or erase tool in
    the ArcToolbox:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 与 ArcToolbox 中的裁剪工具不同，该工具可以使用另一个多边形裁剪多边形，裁剪方法需要一个范围对象（另一个 ArcPy 类）并且仅限于裁剪区域周围的矩形边界。要从多边形中移除区域，可以使用差集方法，就像在
    ArcToolbox 中的裁剪或擦除工具一样：
- en: '[PRE10]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Here is the donut hole-like result of the buffer and difference operation.
    The buffer with the donut hole surrounds the original `Polygon` object:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是缓冲区和差集操作类似甜甜圈孔的结果。具有甜甜圈孔的缓冲区包围了原始的 `Polygon` 对象：
- en: '![Other Polygon object methods](img/8662OS_06_02.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![其他 Polygon 对象方法](img/8662OS_06_02.jpg)'
- en: ArcPy geometry objects
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ArcPy 几何对象
- en: The generic geometry object is quite useful for creating in memory a copy of
    the geometry of a feature class, without first needing to know which type of geometry
    the feature class contains. Like all of the ArcPy geometry objects, its read methods
    include the extraction of the data in many formats such as JSON, WKT, and WKB.
    The area (if it is a polygon), the centroid, the extent, and the constituent points
    of each geometry are also available, as demonstrated previously.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 通用几何对象对于在内存中创建特征类的几何形状的副本非常有用，而无需首先知道特征类包含哪种类型的几何形状。与所有 ArcPy 几何对象一样，它的读取方法包括以多种格式提取数据，如
    JSON、WKT 和 WKB。每个几何形状的面积（如果它是多边形）、质心、范围和构成点也都可以使用，如前所述。
- en: 'Here is an example of reading the geometry of a feature class into memory using
    the `CopyFeatures` tool:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是使用 `CopyFeatures` 工具将特征类的几何形状读入内存的示例：
- en: '[PRE11]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The variable `blockPolys` is a Python list containing all of the geometries
    loaded into it; in this case it is census blocks. The list can then be iterated
    to be analyzed.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 变量 `blockPolys` 是一个包含所有加载到其中的几何形状的 Python 列表；在这种情况下，它是人口普查区块。然后可以遍历该列表以进行分析。
- en: ArcPy PointGeometry objects
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ArcPy PointGeometry 对象
- en: The `PointGeometry` object is very useful for performing these same geospatial
    operations with points, which are not available with the `Point` objects. When
    a cursor is used to retrieve shape data from a feature class with a `PointGeometry`
    type, the shape data is returned as a `PointGeometry` object. While `Point` objects
    are required to construct all other geometry objects when a cursor is not used
    to retrieve data from a feature class, it's the `PointGeometry` object that is
    used to perform point geospatial operations.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`PointGeometry`对象在执行与`Point`对象不可用的相同地理空间操作时非常有用。当使用光标从具有`PointGeometry`类型的要素类中检索形状数据时，形状数据以`PointGeometry`对象的形式返回。当不使用光标从要素类中检索数据时，需要`Point`对象来构建所有其他几何对象，但执行点地理空间操作时使用的是`PointGeometry`对象。'
- en: 'Let''s explore getting `PointGeometry` objects from a data access module `SearchCursor`
    and using the returned data rows to create buffered points. In our bus stop analysis,
    this will replace the need to use the ArcToolbox Buffer tool to create the 400
    foot buffers around each stop. The script in the following uses a dictionary to
    collect the buffer objects and then searches the census blocks using another Search
    Cursor. To access the shape field using the `SearchCursor()` method, the `SHAPE@`
    token is passed as one of the fields. Then, the script will iterate through the
    bus stops and find all census blocks with which each stop intersects:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索从数据访问模块`SearchCursor`获取`PointGeometry`对象，并使用返回的数据行创建缓冲点。在我们的公交车站分析中，这将取代使用ArcToolbox缓冲工具在每个车站周围创建400英尺缓冲区的需求。以下脚本使用字典收集缓冲区对象，然后使用另一个搜索光标搜索人口普查块。要使用`SearchCursor()`方法访问形状字段，将`SHAPE@`令牌作为其中一个字段传递。然后，脚本将遍历公交车站，找到与每个车站相交的所有人口普查块：
- en: '[PRE12]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now that the data has been retrieved and the buffers have been generated using
    the buffer method of the `PointGeometry` objects, the buffers can be compared
    against the census block geometry using iteration and a Search Cursor. There will
    be two geospatial methods used in this analysis: `overlap` and `intersect`. The
    overlaps method is a boolean operation, returning a value of true or false when
    one geometry is compared against another. The `intersect` method is used to get
    the actual area of the intersect as well as identifying the population of each
    block. Using the intersect requires two parameters: a second geometry object,
    and an integer indicating which type of geometry to return (1 for point, 2 for
    line, 4 for polygon). We want the polygonal area of intersect returned to have
    an area of intersection available along with the population data:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在数据已经检索，并且使用`PointGeometry`对象的缓冲方法生成了缓冲区，可以使用迭代和搜索光标将缓冲区与人口普查块几何体进行比较。在此分析中，将使用两种地理空间方法：`overlap`和`intersect`。重叠方法是一个布尔运算，当比较两个几何体时返回true或false。`intersect`方法用于获取相交的实际面积以及识别每个块的人口。使用`intersect`需要两个参数：第二个几何对象和一个整数，表示要返回的几何类型（1为点，2为线，4为多边形）。我们希望返回的多边形相交面积具有相交面积和人口数据：
- en: '[PRE13]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This portion of the script iterates through the blocks and intersects against
    the buffered bus stops. Now that we can identify the blocks that touch the buffer
    around each stop and the data of interest has been collected into the dictionary,
    it can be processed and the average population of all of the blocks touched by
    the buffer can be calculated:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 此部分脚本遍历块并与缓冲的公交车站相交。现在我们可以识别接触每个车站周围缓冲区的块，并且感兴趣的数据已经收集到字典中，可以对其进行处理，并计算所有被缓冲区接触到的块的总体人口：
- en: '[PRE14]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now that the data has been created and added to a list, it can be outputted
    to a spreadsheet using the `createCSV` module we created in [Chapter 4](ch04.html
    "Chapter 4. Complex ArcPy Scripts and Generalizing Functions"), *Complex ArcPy
    Scripts and Generalizing Functions*:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在数据已经创建并添加到列表中，可以使用我们在[第4章](ch04.html "第4章。复杂的ArcPy脚本和泛化函数")中创建的`createCSV`模块将其输出到电子表格中，*复杂的ArcPy脚本和泛化函数*：
- en: '[PRE15]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The data has been processed and written to the spreadsheet. There is one more
    step that we can take with the data and that is to use the area of the intersection
    to create a proportional population value for each buffer. Let''s redo the processing
    of the data to include the proportional areas:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 数据已经处理并写入电子表格。我们可以对数据进行的一个额外步骤是使用相交面积为每个缓冲区创建一个成比例的人口值。让我们重新处理数据以包括成比例的面积：
- en: '[PRE16]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Now the script is taking full advantage of the power of ArcPy geometry objects,
    and the script is running completely in memory which avoids producing any intermediate
    datasets.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，脚本正在充分利用 ArcPy 几何对象的力量，并且脚本完全在内存中运行，这避免了产生任何中间数据集。
- en: Summary
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we discussed in detail the use of ArcPy geometry objects. These
    varied objects have similar methods and are, in fact, sub-classed from the same
    Python class. They are useful for performing in-memory geospatial analyses, which
    avoids having to read and write data from the hard drive and also skips creating
    any intermediate data.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们详细讨论了 ArcPy 几何对象的使用。这些多样化的对象具有相似的方法，实际上是从同一个 Python 类派生出来的子类。它们对于执行内存中的地理空间分析非常有用，这避免了从硬盘读取和写入数据，同时也跳过了创建任何中间数据。
- en: ArcPy geometry objects will become an important part of automating geospatial
    workflows. Combining them with Search Cursors makes ArcPy more useful than any
    earlier implementation of Python scripting tools for ArcGIS. Next, we will convert
    the raw script into a script tool that can be executed directly from the ArcToolbox
    or a personal toolbox in a geodatabase.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: ArcPy 几何对象将成为自动化地理空间工作流程的重要组成部分。将它们与搜索游标结合使用，使得 ArcPy 比任何早期的 ArcGIS Python 脚本工具实现都更有用。接下来，我们将原始脚本转换为可以直接从
    ArcToolbox 或地理数据库中的个人工具箱中执行的脚本工具。
