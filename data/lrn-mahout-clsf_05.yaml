- en: Chapter 5. Learning the Hidden Markov Model Using Mahout
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章. 使用Mahout学习隐马尔可夫模型
- en: 'In this chapter, we will cover one of the most interesting topics of classification
    techniques: the **Hidden Markov Model** (**HMM**). To understand the HMM, we will
    cover the following topics in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍分类技术中最有趣的主题之一：**隐马尔可夫模型**（**HMM**）。为了理解HMM，我们将在本章中介绍以下主题：
- en: Deterministic and nondeterministic patterns
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定性和非确定性模式
- en: The Markov process
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 马尔可夫过程
- en: Introducing the HMM
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍HMM
- en: Using Mahout for the HMM
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Mahout进行HMM
- en: Deterministic and nondeterministic patterns
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 确定性和非确定性模式
- en: In a deterministic system, each state is solely dependent on the state it was
    previously in. For example, let's take the case of a set of traffic lights. The
    sequence of lights is red → green → amber → red. So, here we know what state will
    follow after the current state. Once the transitions are known, deterministic
    systems are easy to understand.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在确定性系统中，每个状态仅依赖于它之前的状态。例如，让我们以一组交通信号灯为例。灯光的序列是红色→绿色→黄色→红色。所以，在这里我们知道当前状态之后将是什么状态。一旦确定了转换，确定性系统就很容易理解。
- en: 'For nondeterministic patterns, consider an example of a person named Bob who
    has his snacks at 4:00 P.M. every day. Let''s say he has any one of the three
    items from the menu: ice cream, juice, or cake. We cannot say for sure what item
    he will have the next day, even if we know what he had today. This is an example
    of a nondeterministic pattern.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 对于非确定性模式，考虑一个名叫鲍勃的人，他每天下午4:00吃零食的例子。假设他从菜单上的三个选项中任选其一：冰淇淋、果汁或蛋糕。即使我们知道他今天吃什么，我们也无法确定他明天会吃什么。这是一个非确定性模式的例子。
- en: The Markov process
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 马尔可夫过程
- en: 'In the Markov process, the next state is dependent on the previous states.
    If we assume that we have an *n* state system, then the next state is dependent
    on the previous *n* states. This process is called an *n* model order. In the
    Markov process, we make the choice for the next state probabilistically. So, considering
    our previous example, if Bob had juice today, he can have juice, ice cream, or
    cake the next day. In the same way, we can reach any state in the system from
    the previous state. The Markov process is shown in the following diagram:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在马尔可夫过程中，下一个状态依赖于前面的状态。如果我们假设我们有一个*n*状态系统，那么下一个状态将依赖于前面的*n*个状态。这个过程被称为*n*阶模型。在马尔可夫过程中，我们以概率的方式选择下一个状态。所以，考虑到我们之前的例子，如果鲍勃今天喝了果汁，他明天可以喝果汁、冰淇淋或蛋糕。同样，我们可以从上一个状态达到系统中的任何状态。马尔可夫过程如下图中所示：
- en: '![The Markov process](img/4959OS_05_01.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![马尔可夫过程](img/4959OS_05_01.jpg)'
- en: 'If we have *n* states in a process, then we can reach any state with n2 transitions.
    We have a probability of moving to any state, and hence, we will have n2 probabilities
    of doing this. For a Markov process, we will have the following three items:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个过程中有*n*个状态，那么我们可以通过n^2个转换达到任何状态。我们移动到任何状态的概率，因此我们将有n^2个这样做概率。对于马尔可夫过程，我们将有以下三个项目：
- en: '**States**: This refers to the states in the system. In our example, let''s
    say there are three states: state 1, state 2, and state 3.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**状态**：这指的是系统中的状态。在我们的例子中，让我们假设有三个状态：状态1、状态2和状态3。'
- en: '**Transition matrix**: This will have the probabilities of moving from one
    state to any other state. An example of the transition matrix is shown in the
    following screenshot:![The Markov process](img/4959OS_05_02.jpg)'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**转移矩阵**：这将包含从一个状态移动到任何其他状态的概率。以下截图显示了转移矩阵的示例：![马尔可夫过程](img/4959OS_05_02.jpg)'
- en: This matrix shows that if the system was in state 1 yesterday, then the probability
    of it to remain in the same state today will be 0.1.
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个矩阵显示，如果系统昨天处于状态1，那么它今天保持同一状态的概率将是0.1。
- en: '**Initial state vector**: This is the vector of the initial state of the system.
    (Any one of the states will have a probability of 1 and the rest will have a probability
    of 0 in this vector.)![The Markov process](img/4959OS_05_03.jpg)'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**初始状态向量**：这是系统的初始状态向量。（在这个向量中，任何一个状态将有1的概率，其余状态将有0的概率。）![马尔可夫过程](img/4959OS_05_03.jpg)'
- en: Introducing the Hidden Markov Model
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍隐马尔可夫模型
- en: The **Hidden Markov Model** (**HMM**) is a classification technique to predict
    the states of a system by observing the outcomes without having access to the
    actual states themselves. It is a Markov model in which the states are hidden.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**隐马尔可夫模型**（**HMM**）是一种分类技术，通过观察结果来预测系统的状态，而不需要访问实际的州本身。它是一个状态是隐藏的马尔可夫模型。'
- en: Let's continue with Bob's snack example we saw earlier. Now assume we have one
    more set of events in place that is directly observable. We know what Bob has
    eaten for lunch and his snacks intake is related to his lunch. So, we have an
    observation state, which is Bob's lunch, and hidden states, which are his snacks
    intake. We want to build an algorithm that can forecast what would be Bob's choice
    of snack based on his lunch.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续之前看到的鲍勃的零食例子。现在假设我们有一个直接可观察的事件集。我们知道鲍勃吃了什么午餐，他的零食摄入量与他的午餐有关。因此，我们有一个观察状态，即鲍勃的午餐，以及隐藏状态，即他的零食摄入量。我们想要构建一个算法，可以根据鲍勃的午餐预测他选择的零食。
- en: '![Introducing the Hidden Markov Model](img/4959OS_05_04.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![介绍隐马尔可夫模型](img/4959OS_05_04.jpg)'
- en: 'In addition to the transition probability matrix in the Hidden Markov Model,
    we have one more matrix that is called an **emission matrix**. This matrix contains
    the probability of the observable state, provided it is assigned a hidden state.
    The emission matrix is as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 除了隐马尔可夫模型中的转移概率矩阵外，我们还有一个称为**发射矩阵**的矩阵。这个矩阵包含在分配了一个隐藏状态的情况下，可观察状态的概率。发射矩阵如下：
- en: P (observable state | one state)
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: P (可观察状态 | 一个状态)
- en: 'So, a Hidden Markov Model has the following properties:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，隐马尔可夫模型具有以下属性：
- en: '**State vector**: This contains the probability of the hidden model to be in
    a particular state at the start'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**状态向量**：这包含隐藏模型在开始时处于特定状态的概率'
- en: '**Transition matrix**: This has the probabilities of a hidden state, given
    the previous hidden state'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**转移矩阵**：这包含给定前一个隐藏状态时隐藏状态的概率'
- en: '**Emission matrix**: Given that the hidden model is in a particular hidden
    state, this has the probabilities of observing a particular observable state'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**发射矩阵**：给定隐藏模型处于特定隐藏状态，这包含观察特定可观察状态的概率'
- en: '**Hidden states**: This refers to the states of the system that can be defined
    by the Hidden Markov Model'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**隐藏状态**：这指的是可以由隐马尔可夫模型定义的系统状态'
- en: '**Observable state**: The states that are visible in the process'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可观察状态**：在过程中可见的状态'
- en: 'Using the Hidden Markov Model, three types of problems can be solved. The first
    two are related to the pattern recognition problem and the third type of problem
    generates a Hidden Markov Model, given a sequence of observations. Let''s look
    at these three types of problems:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 使用隐马尔可夫模型可以解决三种类型的问题。前两种与模式识别问题相关，第三种类型的问题是在给定一系列观察的情况下生成一个隐马尔可夫模型。让我们看看这三种类型的问题：
- en: '**Evaluation**: This is finding out the probability of an observed sequence,
    given an HMM. From the number of different HMMs that describe different systems
    and a sequence of observations, our goal will be to find out which HMM will most
    probably generate the required sequence. We use the forward algorithm to calculate
    the probability of an observation sequence when a particular HMM is given and
    find out the most probable HMM.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**评估**：这是在给定一个隐马尔可夫模型（HMM）的情况下，找出观察序列的概率。从描述不同系统和一系列观察的不同隐马尔可夫模型的数量，我们的目标将是找出哪个HMM最有可能生成所需的序列。我们使用前向算法来计算当给定一个特定的HMM时观察序列的概率，并找出最可能的HMM。'
- en: '**Decoding**: This is finding the most probable sequence of hidden states from
    some observations. We use the Viterbi algorithm to determine the most probable
    sequence of hidden states when you have a sequence of observations and an HMM.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**解码**：这是从某些观察中找到最可能的隐藏状态序列。当你有一系列观察和一个隐马尔可夫模型（HMM）时，我们使用维特比算法来确定最可能的隐藏状态序列。'
- en: '**Learning**: Learning is generating the HMM from a sequence of observations.
    So, if we have such a sequence, we may wonder which is the most likely model to
    generate this sequence. The forward-backward algorithms are useful in solving
    this problem.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**学习**：学习是从一系列观察中生成HMM。所以，如果我们有这样的序列，我们可能会想知道哪个模型最有可能生成这个序列。前向-后向算法在解决这个问题时很有用。'
- en: The Hidden Markov Model is used in different applications such as speech recognition,
    handwritten letter recognition, genome analysis, parts of speech tagging, customer
    behavior modeling, and so on.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 隐马尔可夫模型被用于不同的应用，如语音识别、手写字母识别、基因组分析、词性标注、客户行为建模等。
- en: Using Mahout for the Hidden Markov Model
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Mahout 进行隐马尔可夫模型
- en: Apache Mahout has the implementation of the Hidden Markov Model. It is available
    in the `org.apache.mahout.classifier.sequencelearning.hmm` package.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Apache Mahout 有隐马尔可夫模型的实现。它位于 `org.apache.mahout.classifier.sequencelearning.hmm`
    包中。
- en: 'The overall implementation is provided by eight different classes:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 整体实现由八个不同的类提供：
- en: '`HMMModel`: This is the main class that defines the Hidden Markov Model.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HMMModel`: 这是定义隐马尔可夫模型的主要类。'
- en: '`HmmTrainer`: This class has algorithms that are used to train the Hidden Markov
    Model. The main algorithms are supervised learning, unsupervised learning, and
    unsupervised Baum-Welch.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HmmTrainer`: 这个类有用于训练隐马尔可夫模型的算法。主要算法包括监督学习、无监督学习和无监督Baum-Welch。'
- en: '`HmmEvaluator`: This class provides different methods to evaluate an HMM model.
    The following use cases are covered in this class:'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HmmEvaluator`: 这个类提供了评估HMM模型的不同方法。以下用例包含在这个类中：'
- en: Generating a sequence of output states from a model (prediction)
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从模型（预测）生成输出状态的序列
- en: Computing the likelihood that a given model will generate the given sequence
    of output states (model likelihood)
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算给定模型生成给定输出状态序列的概率（模型似然）
- en: Computing the most likely hidden sequence for a given model and a given observed
    sequence (decoding)
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算给定模型和给定观察序列的最可能隐藏序列（解码）
- en: '`HmmAlgorithms`: This class contains implementations of the three major HMM
    algorithms: forward, backward, and Viterbi.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HmmAlgorithms`: 这个类包含三个主要HMM算法的实现：前向、后向和维特比。'
- en: '`HmmUtils`: This is a utility class and provides methods to handle HMM model
    objects.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HmmUtils`: 这是一个实用类，提供处理HMM模型对象的方法。'
- en: '`RandomSequenceGenerator`: This is a command-line tool to generate a sequence
    by the given HMM.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RandomSequenceGenerator`: 这是一个命令行工具，可以根据给定的HMM生成序列。'
- en: '`BaumWelchTrainer`: This is the class to train HMM from the console.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BaumWelchTrainer`: 这是一个从控制台训练HMM的类。'
- en: '`ViterbiEvaluator`: This is also a command-line tool for Viterbi evaluation.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ViterbiEvaluator`: 这也是一个用于维特比评估的命令行工具。'
- en: Now, let's work with Bob's example.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们用鲍勃的例子来操作。
- en: 'The following is the given matrix and the initial probability vector:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个给定的矩阵和初始概率向量：
- en: '| Ice cream | Cake | Juice |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| 冰淇淋 | 蛋糕 | 果汁 |'
- en: '| --- | --- | --- |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| 0.36 | 0.51 | 0.13 |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| 0.36 | 0.51 | 0.13 |'
- en: 'The following will be the state transition matrix:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 以下将是状态转移矩阵：
- en: '|   | Ice cream | Cake | Juice |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '|   | 冰淇淋 | 蛋糕 | 果汁 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| **Ice cream** | 0.365 | 0.500 | 0.135 |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| **冰淇淋** | 0.365 | 0.500 | 0.135 |'
- en: '| **Cake** | 0.250 | 0.125 | 0.625 |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| **蛋糕** | 0.250 | 0.125 | 0.625 |'
- en: '| **Juice** | 0.365 | 0.265 | 0.370 |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| **果汁** | 0.365 | 0.265 | 0.370 |'
- en: 'The following will be the emission matrix:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 以下将是发射矩阵：
- en: '|   | Spicy food | Normal food | No food |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '|   | 辣食 | 正常食物 | 没有食物 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| **Ice cream** | 0.1 | 0.2 | 0.7 |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| **冰淇淋** | 0.1 | 0.2 | 0.7 |'
- en: '| **Cake** | 0.5 | 0.25 | 0.25 |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| **蛋糕** | 0.5 | 0.25 | 0.25 |'
- en: '| **Juice** | 0.80 | 0.10 | 0.10 |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| **果汁** | 0.80 | 0.10 | 0.10 |'
- en: 'Now we will execute a command-line-based example of this problem. We have three
    hidden states of what Bob''s eaten for snacks: ice-cream, cake, or juice. Then,
    we have three observable states of what he is having at lunch: spicy food, normal
    food, or no food at all. Now, the following are the steps to execute from the
    command line:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将执行这个问题的基于命令行的示例。鲍勃吃零食的三个隐藏状态：冰淇淋、蛋糕或果汁。然后，我们有三个可观察状态，即他在午餐时吃什么：辣食、正常食物或完全不吃。现在，以下是从命令行执行的步骤：
- en: 'Create a directory with the name `hmm: mkdir /tmp/hmm`. Go to this directory
    and create the sample input file of the observed states. This will include a sequence
    of Bob''s lunch habit: spicy food (state 0), normal food (state 1), and no food
    (state 2). Execute the following command:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`hmm`的目录：`mkdir /tmp/hmm`。进入此目录并创建观察状态的样本输入文件。这将包括鲍勃午餐习惯的序列：辣食（状态0）、正常食物（状态1）和没有食物（状态2）。执行以下命令：
- en: '[PRE0]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Run the BaumWelch algorithm to train the model using the following command:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令运行BaumWelch算法来训练模型：
- en: '[PRE1]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The parameters used in the preceding command are as follows:'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的命令中使用的参数如下：
- en: '`i`: This is the input file location'
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`i`: 这是输入文件的位置'
- en: '`o`: This is the output location for the model'
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`o`: 这是模型的输出位置'
- en: '`nh`: This is the number of hidden states. In our example, it is three (ice
    cream, juice, or cake)'
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nh`: 这是隐藏状态的数量。在我们的例子中，它是三个（冰淇淋、果汁或蛋糕）'
- en: '`no`: This is the number of observable states. In our example, it is three
    (spicy, normal, or no food)'
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`no`: 这是可观察状态的数量。在我们的例子中，它是三个（辣的、正常的或没有食物）'
- en: '`e`: This is the epsilon number. This is the convergence threshold value'
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`e`: 这是epsilon数值。这是收敛阈值值'
- en: '`m`: This is the maximum iteration number'
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`m`: 这是最大迭代次数'
- en: 'The following screenshot shows the output on executing the previous command:'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下截图显示了执行上一个命令的输出：
- en: '![Using Mahout for the Hidden Markov Model](img/4959OS_05_05.jpg)'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![使用 Mahout 进行隐马尔可夫模型](img/4959OS_05_05.jpg)'
- en: 'Now we have an HMM model that can be used to build a predicted sequence. We
    will run the model to predict the next 15 states of the observable sequence using
    the following command:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们有一个 HMM 模型，可以用来构建预测序列。我们将运行该模型，使用以下命令预测可观测序列的下一个 15 个状态：
- en: '[PRE2]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The parameters used in the preceding command are as follows:'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述命令中使用的参数如下：
- en: '`m`: This is the path for the HMM model'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`m`：这是 HMM 模型的路径'
- en: '`o`: This is the output directory path'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`o`：这是输出目录路径'
- en: '`l`: This is the length of the generated sequence'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`l`：这是生成的序列长度'
- en: 'To view the prediction for the next 10 observable states, use the following
    command:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看下一个 10 个可观测状态的预测，请使用以下命令：
- en: '[PRE3]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The output of the previous command is shown in the following screenshot:'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述命令的输出如下截图所示：
- en: '![Using Mahout for the Hidden Markov Model](img/4959OS_05_06.jpg)'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![使用 Mahout 进行隐马尔可夫模型](img/4959OS_05_06.jpg)'
- en: From the output, we can say that the next observable states for Bob's lunch
    will be spicy, spicy, spicy, normal, normal, no food, no food, no food, no food,
    and no food.
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从输出中，我们可以得出结论，Bob 的午餐下一个可观测状态将是辣的，辣的，辣的，正常，正常，没有食物，没有食物，没有食物，没有食物，以及没有食物。
- en: 'Now, we will use one more algorithm to predict the hidden state. We will use
    the Viterbi algorithm to predict the hidden states for a given observational state''s
    sequence. We will first create the sequence of the observational state using the
    following command:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将使用另一个算法来预测隐藏状态。我们将使用 Viterbi 算法来预测给定观测状态序列的隐藏状态。我们将首先使用以下命令创建观测状态的序列：
- en: '[PRE4]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We will use the Viterbi command-line option to generate the output with the
    likelihood of generating this sequence:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用 Viterbi 命令行选项来生成具有生成此序列似然值的输出：
- en: '[PRE5]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The parameters used in the preceding command are as follows:'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述命令中使用的参数如下：
- en: '`input`: This is the input location of the file'
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`input`：这是文件的输入位置'
- en: '`output`: This is the output location of the Viterbi algorithm''s output'
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`output`：这是 Viterbi 算法输出的输出位置'
- en: '`model`: This is the HMM model location that we created earlier'
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`model`：这是我们之前创建的 HMM 模型位置'
- en: '`likelihood`: This is the computed likelihood of the observed sequence'
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`likelihood`：这是计算出的观测序列的似然值'
- en: 'The following screenshot shows the output on executing the previous command:'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下截图显示了执行上述命令的输出：
- en: '![Using Mahout for the Hidden Markov Model](img/4959OS_05_07.jpg)'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![使用 Mahout 进行隐马尔可夫模型](img/4959OS_05_07.jpg)'
- en: 'Predictions from the Viterbi are saved in the output file and can be seen using
    the `cat` command:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Viterbi 的预测结果保存在输出文件中，可以使用 `cat` 命令查看：
- en: '[PRE6]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The following output shows the predictions for the hidden state:'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下输出显示了隐藏状态的预测：
- en: '![Using Mahout for the Hidden Markov Model](img/4959OS_05_08.jpg)'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![使用 Mahout 进行隐马尔可夫模型](img/4959OS_05_08.jpg)'
- en: Summary
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, we discussed another classification technique: the Hidden
    Markov Model. You learned about deterministic and nondeterministic patterns. We
    also touched upon the Markov process and Hidden Markov process in general. We
    checked the classes implemented inside Mahout to support the Hidden Markov Model.
    We took up an example to create the HMM model and further used this model to predict
    the observational state''s sequence. We used the Viterbi algorithm implemented
    in Mahout to predict the hidden states in the system.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了另一种分类技术：隐马尔可夫模型。你学习了确定性和非确定性模式。我们还简要介绍了马尔可夫过程和隐马尔可夫过程。我们检查了 Mahout
    中实现以支持隐马尔可夫模型的类。我们举了一个例子来创建 HMM 模型，并进一步使用此模型来预测观测状态序列。我们使用了 Mahout 中实现的 Viterbi
    算法来预测系统中的隐藏状态。
- en: 'Now, in the next chapter, we will cover one more interesting algorithm used
    in classification area: Random forest.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在下一章中，我们将介绍分类领域中使用的另一个有趣的算法：随机森林。
