- en: Advanced Matplotlib
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高级 Matplotlib
- en: In previous chapters, we have learnt the versatile usage of basic Matplotlib
    APIs to create and customize various plot types. In order to create more suitable
    visuals for our data, there are more advanced techniques to make more refined
    figures. In fact, we can leverage not only the native Matplotlib functionalities
    but also a number of third-party packages built on top of Matplotlib. They provide
    easy ways to create more advanced plots that are also aesthetically styled by
    default. We can then make use of Matplotlib techniques to refine our data plots.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们学习了基础的 Matplotlib API 的多种用法，可以创建并自定义各种类型的图表。为了为我们的数据创建更合适的可视化图形，还有一些更高级的技术来制作更精细的图形。实际上，我们不仅可以利用原生的
    Matplotlib 功能，还可以利用一些建立在 Matplotlib 之上的第三方包。这些包提供了创建更加先进且默认具有美学样式的图形的简便方法。我们可以利用
    Matplotlib 技术进一步优化我们的数据图形。
- en: 'In this chapter, we would further explore the advanced usage of Matplotlib.
    We would learn how to group multiple relevant plots into subplots in one figure,
    using non-linear scale axis scales, plotting images, and creating advanced plots
    with the help of some popular third-party packages. Here are the detailed list
    of topics we would cover:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将进一步探索 Matplotlib 的高级用法。我们将学习如何将多个相关图表分组为一个图形中的子图，使用非线性坐标轴比例，绘制图像，并在一些流行的第三方包的帮助下创建高级图表。以下是我们将涵盖的详细主题列表：
- en: Drawing subplots
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绘制子图
- en: Using non-linear axis scales
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用非线性坐标轴比例
- en: Plotting images
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绘制图像
- en: Using Pandas-Matplotlib plotting integration
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Pandas-Matplotlib 绘图集成
- en: Hexbin plots on bivariate datasets
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 双变量数据集的六边形图
- en: 'Using Seaborn to construct:'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Seaborn 构建：
- en: Kernel density estimation plots for bivariate data
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于双变量数据的核密度估计图
- en: Heatmaps with and without hierarchical clustering
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有/无层次聚类的热图
- en: '`mpl_finance` to plot finance data'
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `mpl_finance` 绘制金融数据
- en: 3D plotting with `Axes3D`
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `Axes3D` 进行 3D 绘图
- en: Using Basemap and GeoPandas to visualize geographical data
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Basemap 和 GeoPandas 可视化地理数据
- en: Drawing Subplots
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绘制子图
- en: In designing layouts of visual aids, it is often necessary to organize multiple
    relevant plots into panels in the same figure, such as when illustrating different
    aspects of the same dataset. Matplotlib provides a few ways to create figures
    with multiple subplots.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计视觉辅助工具的布局时，通常需要将多个相关的图形组织到同一个图形中的面板中，比如在展示同一数据集的不同方面时。Matplotlib 提供了几种方法来创建具有多个子图的图形。
- en: Initiating a figure with plt.figure()
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 `plt.figure()` 初始化图形
- en: 'The `plt.figure()` API is the API that is used to initiate a figure that serves
    as the base canvas. It takes in arguments that determines the number of figures
    and parameters such as size and background color of the plot image. It displays
    a new area as the canvas for plotting `axes` when called. We wouldn''t obtain
    any graphical output unless we add other plotting elements. If we were to call
    `plt.show()` at this point, we would see a Matplotlib `figure` object being returned,
    as shown in the following screen capture:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`plt.figure()` API 是用来初始化图形的 API，它作为绘图的基础画布。它接受参数来确定图形的数量以及绘图图像的大小、背景颜色等参数。调用时，它会显示一个新的区域作为绘制
    `axes` 的画布。除非添加其他绘图元素，否则不会得到任何图形输出。如果此时调用 `plt.show()`，将会返回一个 Matplotlib `figure`
    对象，如下图所示：'
- en: '![](img/20e628d4-18e2-4959-8b51-be612a5c1160.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/20e628d4-18e2-4959-8b51-be612a5c1160.png)'
- en: When we are plotting simple figures that involve only a single plot, without
    the need for multiple panels, we can omit calling `plt.figure()`. If `plt.figure()` is
    not called or if no argument is supplied to `plt.figure()`, then a single figure
    is initiated by default, equivalent to `plt.figure(1)`. If the dimension ratio
    of a figure is crucial, we should adjust it by passing a tuple of `(width, height)` as
    the `figsize` argument here.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们绘制简单图形时，如果只涉及单个图表且不需要多个面板，可以省略调用 `plt.figure()`。如果没有调用 `plt.figure()` 或没有给
    `plt.figure()` 传递参数，则默认会初始化一个单一图形，相当于 `plt.figure(1)`。如果图形的比例非常关键，我们应该通过传递一个 `(width,
    height)` 元组作为 `figsize` 参数来调整它。
- en: Initiating subplots as axes with plt.subplot()
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 `plt.subplot()` 初始化子图作为坐标轴
- en: 'To initiate the axes plot instances that actually frame each plot, we can use
    `plt.subplot()`. It takes three parameters: number of rows, number of columns,
    and plot number. When the total number of plots is less than 10, we can omit the
    delimiting commas in the input arguments. Here is a code snippet example:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要初始化实际框住每个图形的坐标轴绘图实例，我们可以使用`plt.subplot()`。它需要三个参数：行数、列数和图号。当总图形数量少于10时，我们可以省略输入参数中的逗号。这里是一个代码示例：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The preceding code generates the following figure. Note how the subplots are
    ordered from left to right, top to bottom. When adding actual plot elements, it
    is essential to place them accordingly:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码生成了以下图形。请注意子图是从左到右、从上到下排列的。在添加实际的绘图元素时，必须相应地放置它们：
- en: '![](img/5a8d73b4-9e93-4dc9-b41b-33b80268e61a.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5a8d73b4-9e93-4dc9-b41b-33b80268e61a.png)'
- en: Also note that printing the type of one of the axes returns `<class 'matplotlib.axes._subplots.AxesSubplot'>`
    as a result.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 还需要注意的是，打印其中一个坐标轴的类型会返回`<class 'matplotlib.axes._subplots.AxesSubplot'>`作为结果。
- en: Adding subplots with plt.figure.add_subplot()
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`plt.figure.add_subplot()`添加子图
- en: There is an `add_subplot()` function similar to `plt.subplot()` under `plt.figure()`
    that allows us to create additional subplots under the same figure. Similar to `plt.subplot()`,
    it takes the row number, column number, and plot number as input arguments and
    allows arguments without commas for fewer than 10 plots.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在`plt.figure()`下，有一个类似于`plt.subplot()`的`add_subplot()`函数，允许我们在同一个图形下创建额外的子图。与`plt.subplot()`类似，它接受行号、列号和图号作为输入参数，并且对于少于10个子图时，可以省略输入参数中的逗号。
- en: 'We can also initiate the first subplot using this function. This code is a
    quick example:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用这个函数来初始化第一个子图。下面是一个快速的代码示例：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This creates an empty plot area enclosed by four spines containing the *x*
    axis and *y* axis, as shown below. Note that we must call the `add_subplot()` function
    under a `figure` but not by `plt`:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个空白的绘图区域，四个边框包含了*x*轴和*y*轴，如下所示。请注意，我们必须在`figure`下调用`add_subplot()`函数，而不是通过`plt`：
- en: '![](img/737ac4e6-a17f-4f9c-9076-00981dc8809a.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/737ac4e6-a17f-4f9c-9076-00981dc8809a.png)'
- en: Let us further compare the differences between `fig.add_subplot()`. and  `plt.subplot()`.
    Here, we would be creating three empty subplots with different sizes and face
    colors.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进一步比较`fig.add_subplot()`和`plt.subplot()`之间的区别。在这里，我们将创建三个不同大小和面色的空子图。
- en: 'We will first use try using `fig.add_subplot()`:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先尝试使用`fig.add_subplot()`：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We get three overlapping subplots on the same figure, as shown below:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在同一图形上得到三个重叠的子图，如下所示：
- en: '![](img/eb143e39-1165-42ec-92a5-14be5611bee0.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eb143e39-1165-42ec-92a5-14be5611bee0.png)'
- en: 'Next, we replace `fig.add_subplot()` with `plt.subplot()`:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将`fig.add_subplot()`替换为`plt.subplot()`：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Notice in the following image that the red `ax1` subplot cannot be displayed:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在以下图片中，红色的`ax1`子图无法显示：
- en: '![](img/9d671846-baab-4884-8ffe-0eae4a0f5458.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9d671846-baab-4884-8ffe-0eae4a0f5458.png)'
- en: If we have already plotted the first subplot using `plt.subplot()` and would
    like to create additional subplots, we can call the `plt.gcf()` function to retrieve
    the `figure` object and store it as a variable. Then, we can call `fig.add_subplot()`
    as shown in the example before.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们已经使用`plt.subplot()`绘制了第一个子图，并且想要创建更多的子图，可以调用`plt.gcf()`函数来获取`figure`对象并将其存储为变量。然后，我们可以像之前的示例一样调用`fig.add_subplot()`。
- en: 'Hence, the following code is an alternative way to generate the three overlapping
    subplots:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，以下代码是一种生成三个重叠子图的替代方法：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Initiating an array of subplots with plt.subplots()
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`plt.subplots()`初始化一组子图
- en: When we need to create a larger number of subplots of the same size, it can
    be quite inefficient to generate them one by one with the `plt.subplot()` or `fig.add_subplot()`
    function. In this case, we can call `plt.subplots()` to generate an array of subplots
    at once.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们需要创建大量相同大小的子图时，逐个使用`plt.subplot()`或`fig.add_subplot()`函数生成它们会非常低效。在这种情况下，我们可以调用`plt.subplots()`一次性生成一组子图。
- en: '`plt.subplots()` takes in the number of rows and columns as input parameters,
    and returns a `Figure` together with a grid of subplots stored in a NumPy array.
    When there is no input parameter, `plt.subplots()` is equivalent to `plt.figure()`
    plus `plt.subplot()` by default.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`plt.subplots()`接受行数和列数作为输入参数，并返回一个`Figure`对象以及存储在NumPy数组中的子图网格。当没有输入参数时，`plt.subplots()`默认等同于`plt.figure()`加上`plt.subplot()`。'
- en: 'Here is a code snippet for demonstration:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个演示用的代码片段：
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'From the resultant screenshot , we can observe that `plt.subplots()` also returns
    the `Figure` and `AxesSubplot` objects:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 从结果截图中，我们可以观察到`plt.subplots()`也返回了`Figure`和`AxesSubplot`对象：
- en: '![](img/f8efed31-c92c-4601-98be-2a1a6465223f.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f8efed31-c92c-4601-98be-2a1a6465223f.png)'
- en: The next example illustrates a more useful case of  `plt.subplots()`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个示例演示了`plt.subplots()`的更有用的应用案例。
- en: 'This time, we will create a figure of 3x4 subplots and label each in a nested
    `for` loop:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，我们将创建一个3x4子图的图形，并在一个嵌套的`for`循环中标记每个子图：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Again, we can observe from this figure that the subplots are ordered in rows
    and then columns, as seen in the preceding examples:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们可以从这个图形中观察到，子图是按行排列，然后是列排列的，就像之前的示例所示：
- en: '![](img/dfa8130b-a90d-405b-9650-462c71a1921b.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dfa8130b-a90d-405b-9650-462c71a1921b.png)'
- en: 'It is also possible to supply only one input parameter to `plt.subplots()`,
    which will be interpreted as the specified number of plots vertically stacked
    in rows. As the  `plt.subplots()` function has essentially incorporated the `plt.figure()`
    function, we can also specify the figure dimensions by providing input to the
    `figsize` argument:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以只向`plt.subplots()`提供一个输入参数，这将被解释为指定数量的子图，垂直堆叠在行中。由于`plt.subplots()`函数本质上包含了`plt.figure()`函数，我们还可以通过向`figsize`参数提供输入来指定图形尺寸：
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note that the type of  `axarr` is `<class 'numpy.ndarray'>`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`axarr`的类型是`<class 'numpy.ndarray'>`。
- en: 'The preceding code results in the following figure with two rows of subplots:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码会产生一个包含两行子图的图形：
- en: '![](img/5c8472ca-408c-4f3b-a64d-5cab0b0bc860.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5c8472ca-408c-4f3b-a64d-5cab0b0bc860.png)'
- en: Shared axes
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 共享轴
- en: When using `plt.subplots()`, we can specify that the subplots should share the
    *x* axis and/or *y* axis to avoid cluttering.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用`plt.subplots()`时，我们可以指定子图应共享* x *轴和/或* y *轴，以避免混乱。
- en: 'Returning to the 3x4 subplots example earlier, suppose we turn on the shared
    axes option in `plt.subplots()` by supplying `sharex=True` and `sharey=True` as
    arguments, as in:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 回到之前的3x4子图示例，假设我们通过提供`sharex=True`和`sharey=True`作为参数，在`plt.subplots()`中启用共享轴选项，如下所示：
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We now obtain the following figure. Compared to the preceding example, it looks
    neater with the subplot axis labels removed except for the leftmost and bottom
    ones:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们得到如下图形。与之前的示例相比，子图的轴标签被移除，除了最左边和最下面的标签，看起来更加整洁：
- en: '![](img/1bbd290b-2f28-4b58-a008-52a1d354593c.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1bbd290b-2f28-4b58-a008-52a1d354593c.png)'
- en: Setting the margin with plt.tight_layout()
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`plt.tight_layout()`设置边距
- en: 'Next, we can adjust the alignment. We may want to adjust the margin between
    each subplot, or leave no margin instead of having rows and columns of discrete
    boxes. In this case, we can use the `plt.tight_layout()` function. By default,
    it fits all subplots into the figure area when no parameters are supplied. It
    takes the keyword arguments `pad`, `w_pad`, and `h_pad` to control the padding
    around subplots. Let''s look at the following code example:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以调整对齐方式。我们可能希望调整每个子图之间的边距，或者干脆不留边距，而是避免出现行和列之间的离散框。此时，我们可以使用`plt.tight_layout()`函数。默认情况下，当没有提供参数时，它会将所有子图适应到图形区域内。它接受关键字参数`pad`、`w_pad`和`h_pad`来控制子图周围的填充。让我们看一下下面的代码示例：
- en: '[PRE9]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We see from the following figure that the now there is no space between subplots,
    but there's some overlap of axis ticks.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 从下面的图形中，我们可以看到现在子图之间没有间距，但轴刻度有些重叠。
- en: 'We will learn how to adjust tick properties or to remove ticks in a later section:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在后续部分学习如何调整刻度属性或移除刻度：
- en: '![](img/a308847c-9176-4fd1-b595-41a3bb6f6547.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a308847c-9176-4fd1-b595-41a3bb6f6547.png)'
- en: Aligning subplots of different dimensions with plt.subplot2grid()
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`plt.subplot2grid()`对不同尺寸的子图进行对齐
- en: While `plt.subplots()` provides a handy way to create grids of same-sized subplots,
    at times we may need to combine subplots of different sizes in a group. This is
    when `plt.subplot2grid()` comes into use.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`plt.subplots()`提供了一种方便的方法来创建大小相同的子图网格，但有时我们可能需要将不同大小的子图组合在一起。这时`plt.subplot2grid()`就派上用场了。
- en: '`plt.subplot2grid()` takes in three to four parameters. The first tuple specifies
    the overall dimensions of the grid. The second tuple determines where in the grid
    the top left corner of a subplot starts. Finally we describe the subplot dimensions
    using the `rowspan` and `colspan` arguments.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`plt.subplot2grid()`接受三个到四个参数。第一个元组指定网格的整体尺寸。第二个元组确定子图左上角在网格中的起始位置。最后，我们使用`rowspan`和`colspan`参数描述子图的尺寸。'
- en: 'Here is a code example to showcase the usage of this function:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个代码示例，展示了如何使用这个函数：
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The following is the resultant plot. Notice how the subplots of different sizes
    are aligned:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是生成的图形。请注意不同大小的子图是如何对齐的：
- en: '![](img/9971f73e-b74f-44e1-90d7-29782d2abb8b.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9971f73e-b74f-44e1-90d7-29782d2abb8b.png)'
- en: Drawing inset plots with fig.add_axes()
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`fig.add_axes()`绘制插图
- en: 'It is not a must for subplots to align side by side. In some occasions, such
    as when zooming in or out, we can also embed subplots on top of the parent plot
    layer. This can be done by `fig.add_axes()`. To add a subplot, here is the basic
    usage:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 子图不一定要并排对齐。在某些情况下，例如放大或缩小时，我们也可以将子图嵌入父图层上方。通过`fig.add_axes()`可以实现这一点。添加子图的基本用法如下：
- en: '[PRE11]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `left`, `bottom`, `width`, and `height` parameters are specified relative
    to the parent figure in terms of `float`. Note that `fig.add_axes()` returns an
    axes object, so you may store it as a variable such as `ax = fig.add_axes([left,
    bottom, width, height])` for further adjustments.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`left`、`bottom`、`width`和`height`参数是相对于父图的`float`值来指定的。注意，`fig.add_axes()`返回一个坐标轴对象，因此你可以将其存储为变量，如`ax
    = fig.add_axes([left, bottom, width, height])`，以便进一步调整。'
- en: 'The following is a complete example where we try to plot the overview in a
    smaller embedded subplot:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个完整示例，我们尝试在一个较小的嵌入子图中绘制概览：
- en: '[PRE12]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Let''s check out the result in the figure:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们查看图中的结果：
- en: '![](img/bd328180-6a7d-461c-bb03-66dc7e0a5485.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bd328180-6a7d-461c-bb03-66dc7e0a5485.png)'
- en: Adjusting subplot dimensions post hoc with plt.subplots_adjust
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`plt.subplots_adjust`调整子图尺寸
- en: We can adjust the dimensions of a subplot with `plt.subplots_adjust()`, which
    takes in any combinations of parameters—`left`, `right`, `top`, and `bottom`—each
    defined relative to the parent axes.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`plt.subplots_adjust()`来调整子图的尺寸，它接受任意组合的参数——`left`、`right`、`top`和`bottom`——这些参数是相对于父坐标轴的。
- en: Adjusting axes and ticks
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调整坐标轴和刻度
- en: In data visualization, it is often not enough to only display the trend in a
    relative sense. An axis scale is essential to facilitate value estimation for
    proper interpretation. Ticks are markers on an axis that denote the scale for
    this purpose. Depending on the nature of data and figure layout, we often need
    to adjust the scale and tick spacing to provide enough information without clutter.
    In this section, we are going to introduce the customization methods.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据可视化中，仅仅展示趋势在相对意义上往往是不够的。轴的刻度对于正确解释和便于价值估算至关重要。刻度是轴上的标记，表示此目的的比例。根据数据的性质和图形布局，我们常常需要调整刻度和间距，以提供足够的信息而不显得杂乱。在本节中，我们将介绍一些自定义方法。
- en: Customizing tick spacing with locators
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用定位器自定义刻度间距
- en: 'There are two sets of ticks to mark coordinates on each axis: major and minor
    ticks. By default, Matplotlib tries to  automatically optimize the tick spacing
    and format based on the data input. Wherever manual adjustment is needed, it can
    be done through setting these four locators: `xmajorLocator`, `xminorLocator`,
    `ymajorLocator`, `yminorLocator` via the function `set_major_locator`, or `set_minor_locator`
    on the respective axis. The following is a usage example, where `ax` is an axes
    object:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 每个轴上有两组刻度标记：主刻度和次刻度。默认情况下，Matplotlib会自动根据输入的数据优化刻度间距和格式。如果需要手动调整，可以通过设置以下四个定位器来实现：`xmajorLocator`、`xminorLocator`、`ymajorLocator`、`yminorLocator`，通过`set_major_locator`或`set_minor_locator`函数在相应的轴上进行设置。以下是一个使用示例，其中`ax`是一个坐标轴对象：
- en: '[PRE13]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Here, we list the common locators and their usage.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这里列出了常见的定位器及其用法。
- en: Removing ticks with NullLocator
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用NullLocator移除刻度
- en: When `NullLocator` is used, ticks are removed from view.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用`NullLocator`时，刻度会从视图中移除。
- en: Locating ticks in multiples with MultipleLocator
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用MultipleLocator定位刻度倍数
- en: As the name implies, `MultipleLocator` generates ticks in multiples of a user-specified
    base. For example, if we would like our ticks to mark integers instead of floats,
    we can initialize the base by `MultipleLocator(1)`.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 顾名思义，`MultipleLocator`根据用户指定的基数生成倍数刻度。例如，如果我们希望刻度标记为整数而不是浮动数值，可以通过`MultipleLocator(1)`来初始化基数。
- en: Locators to display date and time
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示日期和时间的定位器
- en: 'For time series plotting, Matplotlib provides a list of tick locators to serve
    as datetime markers:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 对于时间序列绘图，Matplotlib提供了一系列的刻度定位器，用于作为日期时间标记：
- en: '`MinuteLocator`'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MinuteLocator`'
- en: '`HourLocator`'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HourLocator`'
- en: '`DayLocator`'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DayLocator`'
- en: '`WeekdayLocator`'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WeekdayLocator`'
- en: '`MonthLocator `'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MonthLocator`'
- en: '`YearLocator`'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`YearLocator`'
- en: '`RRuleLocator`, which allows arbitrary date tick specification'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RRuleLocator`，允许指定任意的日期刻度'
- en: '`AutoDateLocator`'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AutoDateLocator`'
- en: '`MultipleDateLocator`'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MultipleDateLocator`'
- en: To plot time series, we can also use Pandas to specify the datetime format for
    data in the *x* axis.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 要绘制时间序列图，我们也可以使用 Pandas 来指定 *x* 轴上数据的日期时间格式。
- en: Time series data can be resampled by aggregation methods such as  `mean()`, `sum()`,
    or a custom function.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 时间序列数据可以通过聚合方法进行重采样，如 `mean()`、`sum()` 或自定义函数。
- en: Customizing tick formats with formatters
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用格式化器自定义刻度标签格式
- en: 'Tick formatters control the formats of tick labels. It is used similarly to tick
    locators, as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 刻度格式化器控制刻度标签的格式。它的使用方式类似于刻度定位器，具体如下：
- en: '[PRE14]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Using a non-linear axis scale
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用非线性坐标轴刻度
- en: Depending on the distribution of our data, a linear scale may not be the best
    way to fit in all useful data points in a figure. In this case, we may need to
    modify the scale of the axes into a log or symmetric log scale. In Matplotlib,
    this can be done by `plt.xscale()` and `plt.yscale()` before defining the axes,
    or by `ax.set_xscale()` and `ax.set_yscale()` after an axis is defined.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 根据数据的分布情况，线性刻度可能并不是将所有有效数据点都适合图中的最佳方式。在这种情况下，我们可能需要将坐标轴的刻度调整为对数刻度或对称对数刻度。在 Matplotlib
    中，可以通过在定义坐标轴之前使用 `plt.xscale()` 和 `plt.yscale()`，或者在定义坐标轴之后使用 `ax.set_xscale()`
    和 `ax.set_yscale()` 来完成此操作。
- en: We do not need to change the scale of the entire axis. To display a part of
    the axis in linear scale, we adjust the linear threshold with the argument `linthreshx`
    or `linthreshy`. To obtain a smooth continuous line, we can also mask the non-positive
    numbers with the argument `nonposx` or `nonposy`.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不需要更改整个坐标轴的刻度。为了以线性刻度显示坐标轴的一部分，我们可以通过 `linthreshx` 或 `linthreshy` 参数来调整线性阈值。为了获得平滑的连续线条，我们还可以通过
    `nonposx` 或 `nonposy` 参数来屏蔽非正数。
- en: 'The following code snippet is an example of the different axis scales. For
    a simpler illustration, we only change the scale in the `y` axis. Similar operations
    can be applied to the `x` axis:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段是不同坐标轴刻度的示例。为了简化说明，我们只更改了 `y` 轴的刻度。类似的操作也可以应用于 `x` 轴：
- en: '[PRE15]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Let''s compare the results of each axis scale in the following figure:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们比较一下以下图表中每种坐标轴刻度的结果：
- en: '![](img/f251b6f4-a95a-42bc-9abd-6e3dd65e6920.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f251b6f4-a95a-42bc-9abd-6e3dd65e6920.png)'
- en: More on Pandas-Matplotlib integration
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多关于 Pandas 和 Matplotlib 集成的内容
- en: Pandas provides the DataFrame data structure commonly used in handling multivariate
    data. When we usually use the Pandas package for data I/O, storage, and preprocessing,
    it also provides a number of native integrations with Matplotlib for quick visualization.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: Pandas 提供了常用于处理多变量数据的 DataFrame 数据结构。通常在使用 Pandas 包进行数据输入/输出、存储和预处理时，它还提供了与
    Matplotlib 的多个原生集成，便于快速可视化。
- en: 'To create these plots, we can call `df.plot(kind=plot_type)`, `df.plot.scatter()`,
    and so on. Here is a list of available plot types:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建这些图表，我们可以调用 `df.plot(kind=plot_type)`、`df.plot.scatter()` 等等。以下是可用的图表类型列表：
- en: '`line`: Line plot (default)'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`line`: 线图（默认）'
- en: '`bar`: Vertical bar plot'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bar`: 垂直条形图'
- en: '`barh`: Horizontal bar plot'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`barh`: 水平条形图'
- en: '`hist`: Histogram'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hist`: 直方图'
- en: '`box`: Boxplot'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`box`: 箱型图'
- en: '`kde`: **Kernel Density Estimation** (**KDE**) plot'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kde`: **核密度估计** (**KDE**) 图'
- en: '`density`: The same as `kde`'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`density`: 与 `kde` 相同'
- en: '`area`: Area plot'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`area`: 区域图'
- en: '`pie`: Pie plot'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pie`: 饼图'
- en: We have created some of the simpler graphs in the previous chapters. Here, we
    will take the density plot as an example for discussion.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章中，我们已经创建了一些简单的图表。在这里，我们将以密度图为例进行讨论。
- en: Showing distribution with the KDE plot
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 KDE 图显示分布
- en: Similar to a histogram, the KDE plot is a method to visualize the shape of data
    distribution. It uses kernel smoothing to create smooth curves and is often combined
    with a histogram. It is useful in exploratory data analysis.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于直方图，KDE 图是可视化数据分布形态的一种方法。它通过核平滑创建平滑曲线，通常与直方图结合使用。这在探索性数据分析中非常有用。
- en: In the following example, we will compare the income in various age groups across
    different countries, with data obtained from surveys binned with different age
    groupings.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们将比较不同国家各年龄组的收入数据，这些数据来自按不同年龄分组的调查结果。
- en: 'Here is the code for data curation:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是数据整理的代码：
- en: '[PRE16]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Let''s now draw the KDE plots for comparison. We have prepared a reusable function
    to plot the three pieces of data with less repetition in the code:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来绘制 KDE 图进行比较。我们准备了一个可重复使用的函数，用于绘制三组数据，减少代码的重复性：
- en: '[PRE17]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now we can look at the results, which are from top to bottom for the US, the
    Netherlands, and Hong Kong, respectively:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以查看结果，按顺序分别为美国、荷兰和香港：
- en: '![](img/a4482080-2a6e-43fc-85d1-fa49f955b6fc.png)  ![](img/b4c0fe40-280e-4823-a56c-eb7af4e5b34a.png)![](img/bac62f69-6f70-4e25-b22f-8b3bfa51d3de.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a4482080-2a6e-43fc-85d1-fa49f955b6fc.png)  ![](img/b4c0fe40-280e-4823-a56c-eb7af4e5b34a.png)![](img/bac62f69-6f70-4e25-b22f-8b3bfa51d3de.png)'
- en: Of course, the figure is not a very accurate reflection of the original data,
    as extrapolation was involved before any tweaking (for instance, we do not have
    child labor data here, but the contours extend even to children below age **10**).
    Yet, we can observe a general difference in the pattern of income structures between
    ages **20** and **50** across the three economies, and to what extent the downloaded
    public data is comparable. We may then be able to suggest surveys with more useful
    groupings and perhaps to get more raw data points to suit our analyses.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，图中的数据并不完全准确地反映原始数据，因为在进行任何调整之前就已经进行了外推（例如，这里并没有儿童劳动数据，但等高线图扩展到了 **10** 岁以下的儿童）。然而，我们仍然可以观察到三种经济体中，**20**
    岁和 **50** 岁收入结构的总体差异，以及下载的公共数据与之的可比性。然后，我们可能能够建议进行更多有用分组的调查，并或许获取更多原始数据点来支持我们的分析。
- en: Showing the density of bivariate data with hexbin plots
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用六边形图展示双变量数据的密度
- en: Scatter plot is a common method to show the distribution of data in a more raw
    form. But when data density goes over a threshold, it may not be the best visualization
    method as points can overlap and we lose information about the actual distribution.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 散点图是一种常见的方法，用于展示数据的分布，以较为原始的形式呈现。但当数据密度超过某一阈值时，可能不再是最好的可视化方法，因为点可能重叠，我们将失去关于实际分布的信息。
- en: A hexbin map is a way to improve the interpretation of data density, by showing
    the data density in an area by color intensity.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 六边形图（hexbin map）是一种通过颜色强度展示区域内数据密度的方式，从而改善对数据密度的解读。
- en: 'Here is an example to compare the visualization of the same dataset that aggregates
    in the center:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个示例，用于比较将数据聚集在中心的相同数据集的可视化：
- en: '[PRE18]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This is the scatter plot in `ax1`. We can see that many data points are overlapping:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 `ax1` 中的散点图。我们可以看到许多数据点是重叠的：
- en: '![](img/034ece3e-1b74-4f8b-bfe6-f1cba0a872d2.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](img/034ece3e-1b74-4f8b-bfe6-f1cba0a872d2.png)'
- en: 'As for the hexbin map in `ax2`, although not all discrete raw data points are
    shown, we can clearly see the variation of data distribution in the center:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 至于 `ax2` 中的六边形图，虽然并未显示所有离散的原始数据点，但我们可以清晰地看到数据分布在中心的变化：
- en: '![](img/03d572e0-8ea2-4e36-b963-bce115f3621e.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](img/03d572e0-8ea2-4e36-b963-bce115f3621e.png)'
- en: Expanding plot types with Seaborn
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Seaborn 扩展图表类型
- en: To install the Seaborn package, we open the terminal or command prompt and call `pip3
    install --user seaborn`. For each use, we import the library by `import seaborn
    as sns`, where `sns` is a commonly used shorthand to save typing.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 Seaborn 包，我们打开终端或命令提示符，并调用 `pip3 install --user seaborn`。每次使用时，我们通过 `import
    seaborn as sns` 导入该库，其中 `sns` 是常用的简写形式，旨在减少输入量。
- en: Visualizing multivariate data with a heatmap
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用热力图可视化多变量数据
- en: A heatmap is a useful visualization method to illustrate multivariate data when
    there are many variables to compare, such as in a big data analysis. It is a plot
    that displays values in a color scale in a grid. It is among the most common plots
    utilized by bioinformaticians to display hundreds or thousands of gene expression
    values in one plot.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 热力图是一种在变量较多时展示多变量数据的有用可视化方法，适用于大数据分析等场景。它是一种在网格中使用颜色渐变来显示数值的图表。它是生物信息学家最常用的图表之一，用于在一张图中展示数百或数千个基因表达值。
- en: With Seaborn, drawing a heatmap is just one line away from importing the library.
    It is done by calling `sns.heatmap(df)`, where `df` is the Pandas DataFrame to
    be plotted. We can supply the `cmap` parameter to specify the color scale `("colormap")`
    to be used. You can revisit the previous chapter for more details on colormap
    usage.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Seaborn，绘制热力图只需要一行代码，它通过调用 `sns.heatmap(df)` 来完成，其中 `df` 是要绘制的 Pandas DataFrame。我们可以提供
    `cmap` 参数来指定要使用的颜色映射（“colormap”）。你可以回顾上一章，以了解更多关于颜色映射的使用细节。
- en: 'To get a feel for heatmap, in the following example, we demonstrate the usage
    with the specification of the *7^(th)* and *8^(th)* generations of Intel Core
    CPUs, which involves dozens of models and four chosen metrics. Before looking
    at the plotting code, let''s look at the structure of the Pandas DataFrame that
    stores the data:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解热力图，以下示例中，我们演示了使用英特尔 Core CPU 第 *7^(代)* 和 *8^(代)* 处理器系列的应用，涉及几十种型号和四个选择的指标。在查看绘图代码之前，我们先来看看存储数据的
    Pandas DataFrame 结构：
- en: '[PRE19]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'From the following screen capture of the output, we see that we simply put
    the labels as the index and different properties in each column:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 从以下输出的屏幕截图中，我们可以看到，我们只是简单地将标签作为索引，将不同的属性放在每一列中：
- en: '![](img/6044ea05-9d53-466c-8f5c-c29f742f8544.png)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6044ea05-9d53-466c-8f5c-c29f742f8544.png)'
- en: 'Notice that there are 16 models that do not support boosting without the **Max
    Frequency** property value. It makes sense to consider the **Base Frequency**
    as the maximum for our purpose here. We will fill in the **NA** values with the
    `''Max Frequency''` by the corresponding `''Base Frequency''`:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，有16个模型在没有**最大频率**属性值的情况下不支持提升。考虑到我们在此的目的，使用**基础频率**作为最大值是合理的。我们将用相应的**基础频率**填充**NA**值：
- en: '[PRE20]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now, let''s draw the heatmap with the following code:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们使用以下代码来绘制热图：
- en: '[PRE21]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Simple, isn''t it? Only one line of code actually draws the heatmap. This is
    also an example of how we can use basic Matplotlib code to adjust other fine details
    of the plot, such as figure dimensions and the `xticks` font size in this case.
    Let''s look at the result:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 很简单，不是吗？其实只需一行代码就能绘制热图。这也是一个示例，说明我们如何使用基本的Matplotlib代码来调整图表的其他细节，例如在这个例子中调整图形的维度和`xticks`字体大小。我们来看一下结果：
- en: '![](img/ae986f5c-53a7-408d-b421-66246feee4d1.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae986f5c-53a7-408d-b421-66246feee4d1.png)'
- en: From the figure, even if we have absolutely no idea about these CPU models,
    we can easily infer something from the darker colors at the top among the i7 models.
    They are designed for higher performance with more core and cache space.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 从图形中，即使我们对这些CPU型号毫无了解，也能很容易地从顶部i7型号的较深颜色推测出一些信息。它们是为更高性能而设计的，具有更多的核心和缓存空间。
- en: Showing hierarchy in multivariate data with clustermap
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用聚类图显示多变量数据的层次结构
- en: Sometimes, a heatmap illustration can be hard to interpret when there are too
    many alternating color bands. This is because our data may not be ordered in terms
    of similarity. In this case, we need to group more similar data together in order
    to see the structure.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，当热图中存在过多交替的颜色带时，可能难以解读。这是因为我们的数据可能没有按相似性排序。在这种情况下，我们需要将更相似的数据分组，以便看到结构。
- en: For this purpose, Seaborn offers the `clustermap` API, which is a combination
    of heatmap and dendrogram. A dendrogram is a tree-shaped graph that clusters more
    similar variables under the same branches/leaves. Drawing a dendrogram involves
    generally unsupervised hierarchical clustering, which is run in the background
    by default when we call the `clustermap()` function.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，Seaborn 提供了`clustermap` API，它结合了热图和树状图。树状图是一种树形图，将相似的变量聚类在同一分支/叶子下。绘制树状图通常涉及无监督的层次聚类，默认情况下，当我们调用`clustermap()`函数时，它会在后台运行。
- en: Besides unsupervised clustering, if we have a priori knowledge of certain labels,
    we can also show it in colors with the `row_colors` keyword argument.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 除了无监督聚类外，如果我们事先知道某些标签，我们还可以使用`row_colors`关键字参数将其以颜色的形式显示出来。
- en: 'Here, we extend from the preceding heatmap example of CPU models, draw a clustered
    heatmap, and label the generation as row colors. Let''s look at the code:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们从前面的CPU型号热图示例扩展，绘制了一个聚类热图，并将代际信息标记为行颜色。让我们看看代码：
- en: '[PRE22]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Again, calling the API is just as simple as the earlier heatmap, and we have
    generated the following figure:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 再次调用API就像前面的热图一样简单，我们生成了以下图形：
- en: '![](img/321092df-964b-47e8-8b69-3d92fb9116c2.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![](img/321092df-964b-47e8-8b69-3d92fb9116c2.png)'
- en: Other than being helpful in showing multiple properties of a larger number of
    samples, with some tweaking, clustermap can also be used in pairwise clustering
    to show the similarity among samples with all the available properties considered
    together.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 除了帮助显示多个样本的多个属性之外，通过一些调整，clustermap还可以用于成对聚类，显示考虑所有可用属性后样本之间的相似性。
- en: To draw a pairwise clustering heatmap, we have to first calculate the correlation
    between samples from the various property values, convert the correlation matrix
    into a distance matrix, and then perform hierarchical clustering to generate linkage
    values for dendrogram plotting. We use the `scipy` package for this purpose. To
    understand more about linkage calculation methods, please refer to the SciPy documentation.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 要绘制成对聚类热图，我们首先需要计算来自不同属性值的样本之间的相关性，将相关矩阵转换为距离矩阵，然后执行层次聚类生成树状图的连接值。我们使用`scipy`包来实现这一目的。要了解更多关于连接值计算方法的内容，请参考SciPy文档。
- en: 'We will provide the user-defined function here:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在此提供用户自定义函数：
- en: '[PRE23]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Here is the result of the pairwise clustering plot:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 这是配对聚类图的结果：
- en: '![](img/94272b55-7117-4e23-95cc-353f6b98d980.png)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![](img/94272b55-7117-4e23-95cc-353f6b98d980.png)'
- en: From both heatmaps, we can observe that, based on these four properties, the
    CPUs seem to be better clustered by the product line suffix such as **U**, **K**,
    and **Y** than by brand modifiers such as **i5** and **i7**. When we approach
    data, this is among the analytical skills where observation of the similarity
    within a large group is required.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 从这两个热力图中，我们可以观察到，根据这四个属性，CPU 似乎根据产品线后缀（如 **U**、**K**、**Y**）而非品牌修饰符（如 **i5**
    和 **i7**）进行更好的聚类。在处理数据时，这是一项需要观察大组相似性的分析技能。
- en: Image plotting
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图像绘制
- en: In analyzing images, the first step is to convert colors into numerical values. Matplotlib
    provides APIs to read and show an image matrix of RGB values.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在分析图像时，第一步是将颜色转换为数值。Matplotlib 提供了用于读取和显示 RGB 值图像矩阵的 API。
- en: 'The following is a quick code example of reading an image into a NumPy array
    with `plt.imread(''image_path'')`, and we show it with `plt.imshow(image_ndarray)`. Make
    sure that the Pillow package is installed so that more image types other than
    PNG can be handled:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个快速的代码示例，演示如何使用 `plt.imread('image_path')` 将图像读取为 NumPy 数组，并使用 `plt.imshow(image_ndarray)`
    展示它。确保已安装 Pillow 包，以便处理 PNG 以外的更多图像类型：
- en: '[PRE24]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Here is the original image displayed with the preceding code:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是使用前面代码显示的原始图像：
- en: '![](img/87fc37f7-8b79-4806-9aae-2b4c81089c0c.jpg)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![](img/87fc37f7-8b79-4806-9aae-2b4c81089c0c.jpg)'
- en: 'After showing the original image, we will try to work with transforming the
    image by changing the color values in the image matrix. We will create a high-contrast
    image by setting the RGB values to either `0` or `255` (max) at the threshold
    of `160`. Here is how to do so:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在展示原始图像后，我们将尝试通过改变图像矩阵中的颜色值来转换图像。我们将通过将 RGB 值设置为 `0` 或 `255`（最大值）并设定阈值为 `160`
    来创建高对比度图像。以下是操作方法：
- en: '[PRE25]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This is the result of the transformed image. By artificially increasing the
    contrast, we have created a pop art image!
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 这是转换后图像的结果。通过人为地增加对比度，我们创造了一幅波普艺术风格的图像！
- en: '![](img/75fb4efd-ebc6-4134-b4db-8daf801ff55d.png)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![](img/75fb4efd-ebc6-4134-b4db-8daf801ff55d.png)'
- en: To demonstrate a more practical use for the image processing feature of Matplotlib,
    we will demonstrate MNIST. MNIST is a famous dataset of handwritten digits. It
    is often used in tutorials of machine learning algorithms. Here, we will not go
    into details of machine learning but rather will try to recreate the scenario
    where we visually inspect the dataset during the exploratory data analysis stage.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示 Matplotlib 图像处理功能的更实际应用，我们将展示 MNIST 数据集。MNIST 是一个著名的手写数字数据集，常用于机器学习算法的教程。在这里，我们不深入探讨机器学习，而是尝试重现一个情景，在探索性数据分析阶段，我们通过视觉检查数据集。
- en: We can download the entire MNIST dataset from the official site at [http://yann.lecun.com/exdb/mnist/](http://yann.lecun.com/exdb/mnist/). To
    ease our discussion and introduce useful package for Python machine learning,
    we load the data from Keras, which is a high-level API that facilitates neural
    network implementation. The MNIST dataset from the Keras package contains 70,000
    images, arranged in tuples of coordinates and corresponding labels to facilitate
    model training and testing when building neural networks.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从官方网站下载整个 MNIST 数据集：[http://yann.lecun.com/exdb/mnist/](http://yann.lecun.com/exdb/mnist/)。为了简化讨论并引入有用的
    Python 机器学习包，我们从 Keras 加载数据。Keras 是一个高级 API，便于神经网络的实现。Keras 包中的 MNIST 数据集包含 70,000
    张图像，按坐标和相应标签的元组排列，方便在构建神经网络时进行模型训练和测试。
- en: 'Let''s first import the package:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先导入这个包：
- en: '[PRE26]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The data is loaded only when `load_data()` is called. Because Keras is intended
    for training, the data is returned in tuples of training and testing datasets,
    each containing the actual image color values and labels, named `X` and `y` by
    convention here:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 数据只有在调用`load_data()`时才会被加载。因为 Keras 主要用于训练，所以数据会以训练集和测试集的元组形式返回，每个元组包含实际的图像颜色值和标签，在此约定中命名为`X`和`y`：
- en: '[PRE27]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: When initially called, `load_data()` may take some time to download the MNIST
    dataset from the online database.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 当首次调用`load_data()`时，可能需要一些时间来从在线数据库下载 MNIST 数据集。
- en: 'We can inspect the dimensions of the data as follows:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以按如下方式检查数据的维度：
- en: '[PRE28]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Here is the output:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出结果：
- en: '[PRE29]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Finally let''s take one of the images in the `X_train` set and plot it in black
    and white with `plt.imshow()`:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们从 `X_train` 集合中取出一张图像，并使用 `plt.imshow()` 将其以黑白方式绘制：
- en: '[PRE30]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'From the following figure, we can easily read seven with our bare eyes. In
    the case of solving real image recognition problems, we may sample some mis-called
    images and consider strategies to optimize our training algorithms:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 从下图中，我们可以轻松地用肉眼读出七个数据点。在解决实际的图像识别问题时，我们可能会对一些被误分类的图像进行采样，并考虑优化训练算法的策略：
- en: '![](img/a24cfbfa-a8f0-43db-bd90-800672d82eca.png)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24cfbfa-a8f0-43db-bd90-800672d82eca.png)'
- en: Financial plotting
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 财务绘图
- en: There are situations where more raw values per time point are needed to understand
    a trend for prediction. The candlestick plot is a commonly used visualization
    in technical analysis in finance to show a price trend, most often seen in the
    stock market.  To draw a candlestick plot, we can use the `candlestick_ohlc` API
    in the `mpl_finance` package.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，为了理解预测趋势，我们需要每个时间点的更多原始值。蜡烛图是金融技术分析中常用的一种可视化方式，用于展示价格趋势，最常见于股市。要绘制蜡烛图，我们可以使用
    `mpl_finance` 包中的 `candlestick_ohlc` API。
- en: '`mpl_finance` can be downloaded from GitHub. After cloning the repository in
    the Python site-packages directory, call `python3 setup.py install` in the terminal
    to install it.'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '`mpl_finance` 可以从 GitHub 上下载。在 Python 的 site-packages 目录中克隆仓库后，在终端中运行 `python3
    setup.py install` 来安装它。'
- en: '`candlestick_ohlc()` takes the input of a Pandas DataFrame with five columns: `date`
    in floating-point numbers, `open`, `high`, `low`, and `close`.'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '`candlestick_ohlc()` 接受一个 Pandas DataFrame 作为输入，DataFrame 包含五列：`date`（浮动数值）、`open`、`high`、`low`
    和 `close`。'
- en: 'In our tutorial, we use the cryptocurrency  market values as an example. Let''s
    again look at the data table we obtained:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的教程中，我们以加密货币市场的价值为例。让我们再次查看我们获得的数据表：
- en: '[PRE31]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Here is the how the table looks:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 这是表格的样子：
- en: '![](img/be107386-df27-4788-a10a-145b23e535c1.png)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![](img/be107386-df27-4788-a10a-145b23e535c1.png)'
- en: 'Let''s select the first cryptocurrency, Bitcoin, as our example. The following
    code selects the OHLC values in the month of December 2017 and sets the index
    as `date` in the datetime format:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们选择第一个加密货币，比特币，作为示例。以下代码选择了 2017 年 12 月的 OHLC 值，并将索引设置为 `date`，格式为日期时间格式：
- en: '[PRE32]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Next, we will draw the candlestick plot. Recall the techniques to set axis
    ticks to fine-tune time markers:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将绘制蜡烛图。回顾设置坐标轴刻度以微调时间标记的技巧：
- en: '[PRE33]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '`mpl_finance` can be installed by running the following command:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '`mpl_finance` 可以通过运行以下命令进行安装：'
- en: '[PRE34]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'We can observe that the rapid rise of Bitcoin values in early December turns
    its direction in mid-December 2017:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以观察到，比特币在 12 月初的快速上涨，在 2017 年 12 月中旬出现了方向的转变：
- en: '![](img/61517768-e7bb-4fd9-8122-23f2947ec253.png)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![](img/61517768-e7bb-4fd9-8122-23f2947ec253.png)'
- en: 3D plots with Axes3D
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Axes3D 绘制 3D 图
- en: We have so far discussed plotting in two dimensions. In fact, there are numerous
    occasions where we may need 3D data visualizations. Examples include illustrating
    more complex mathematical functions, terrain features, fluid dynamics in physics,
    as well as just showing one more facet of our data.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们讨论了二维绘图。事实上，在很多情况下，我们可能需要进行 3D 数据可视化。例子包括展示更复杂的数学函数、地形特征、物理学中的流体动力学，以及展示数据的其他方面。
- en: In Matplotlib, it can done by `Axes3D` in the `mplot3d` library within `mpl_toolkits`.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Matplotlib 中，这可以通过 `mpl_toolkits` 中的 `mplot3d` 库中的 `Axes3D` 来实现。
- en: We just need to specify `projection='3d'` when defining an axes object after
    importing the library. Next, we just have to define the axes with `x`, `y`, and
    `z` coordinates. Supported plot types include scatter plot, line plot, bar plot,
    contour plots, wireframe plots, and surface plots with or without triangulation.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需要在导入库后定义一个坐标轴对象时指定 `projection='3d'`。接下来，我们只需定义带有 `x`、`y` 和 `z` 坐标的坐标轴。支持的图形类型包括散点图、线图、条形图、等高线图、网格框架图和表面图（带或不带三角化）。
- en: 'The following is an example of drawing a 3D surface plot:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是绘制 3D 曲面图的示例：
- en: '[PRE35]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Matplotlib Axes3D is useful for plotting simple 3D plots with the usual Matplotlib
    syntax and appearance. For advanced scientific 3D plotting with Python demanding
    high rendering, it is recommended to use the Mayavi package. Here is the official
    website of the project for more details: [http://code.enthought.com/pages/mayavi-project.html](http://code.enthought.com/pages/mayavi-project.html).'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: Matplotlib 的 Axes3D 对于使用常见的 Matplotlib 语法和外观绘制简单的 3D 图非常有用。对于需要高渲染的高级科学 3D 绘图，建议使用
    Mayavi 包。这里是该项目的官方网站，供您了解更多信息：[http://code.enthought.com/pages/mayavi-project.html](http://code.enthought.com/pages/mayavi-project.html)。
- en: 'From the following screenshot, we see that the color gradient also helps in
    portraying the shape of the 3D plot:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 从以下截图中，我们可以看到，颜色渐变有助于展示 3D 图的形状：
- en: '![](img/31b62490-cdcf-4714-8a62-ca2c101ae8a7.png)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![](img/31b62490-cdcf-4714-8a62-ca2c101ae8a7.png)'
- en: Geographical plotting
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 地理绘图
- en: To demonstrate the power of Matplotlib with third-party packages, we will illustrate
    its usage in spatial analysis. Since the invention of satellites, a myriad of
    useful **Geographics Information System** (**GIS**) data has been generated to
    facilitate various analyses, from natural phenomena to human activities.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示Matplotlib与第三方包的强大功能，我们将演示其在空间分析中的应用。自卫星发明以来，产生了大量有用的**地理信息系统**（**GIS**）数据，帮助各种分析，从自然现象到人类活动。
- en: To utilize this data, there are common Python packages integrated with Matplotlib
    to show spatial data on a map, such as Basemap, GeoPandas, Cartopy, and Descartes.
    In this final section of the chapter, we will briefly introduce the usage of the
    first two packages.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 为了利用这些数据，Matplotlib集成了多个常见的Python包来展示空间数据，如Basemap、GeoPandas、Cartopy和Descartes。在本章的最后部分，我们将简要介绍前两个包的用法。
- en: Basemap
  id: totrans-239
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Basemap
- en: Basemap is among the most popular Matplotlib-based plotting toolkits to plot over
    world maps. It is a handy way to show any geographical location.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: Basemap是最受欢迎的基于Matplotlib的绘图工具包之一，用于在世界地图上绘图。它是展示任何地理位置的便捷方式。
- en: 'To install Basemap, do this:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Basemap的步骤如下：
- en: Unpack in `$Python3_dir/site-packages/mpl_toolkits`
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解压到`$Python3_dir/site-packages/mpl_toolkits`
- en: 'Enter the Basemap installation directory: `cd $basemap_dir`'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入Basemap安装目录：`cd $basemap_dir`
- en: Enter the `geos` directory in the `Basemap` directory: `cd $basemap/geos-3.3.3`
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入`Basemap`目录中的`geos`目录：`cd $basemap/geos-3.3.3`
- en: Install the GEOS library via `./configure`, `make`, and `make install`
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`./configure`、`make`和`make install`安装GEOS库。
- en: Install PyProj (refer to the following tip)
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装PyProj（参见以下提示）
- en: Return to the Basemap installation directory and run `python3 setup.py install`
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回Basemap安装目录并运行`python3 setup.py install`。
- en: Set the environment variable `` `PROJ_DIR=$pyproj_dir/lib/pyproj/data` ``
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置环境变量`` `PROJ_DIR=$pyproj_dir/lib/pyproj/data` ``
- en: Basemap requires PyProj as a dependency, where there are recurrent reports of
    installation failures. We recommend installing  from GitHub with prior installation
    of the Cython dependency.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: Basemap需要PyProj作为依赖项，但常有安装失败的报告。我们建议先安装Cython依赖，再从GitHub安装。
- en: Clone the PyProj GitHub repository from [https://github.com/jswhit/pyproj](https://github.com/jswhit/pyproj) into
    the Python site packages directory
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[https://github.com/jswhit/pyproj](https://github.com/jswhit/pyproj)克隆PyProj
    GitHub仓库到Python站点包目录。
- en: Install the Cython dependency with `pip install --user cython`
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`pip install --user cython`安装Cython依赖。
- en: Enter the PyProj directory and install using `python3 setup.py install`
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入PyProj目录并使用`python3 setup.py install`安装。
- en: For Windows users, it could be easier to install via Anaconda with the command
    prompt `conda install -c conda-forge geopandas`.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Windows用户，通过Anaconda安装可能更为简便，使用命令行`conda install -c conda-forge geopandas`。
- en: 'As a brief introduction, we will show how to draw our beautiful Earth with
    shaded terrain with the following code snippet:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 作为简短介绍，我们将通过以下代码片段展示如何绘制美丽的地球及阴影地形：
- en: '[PRE36]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Here is how the plot looks:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 这是绘图的效果：
- en: '![](img/f15542ca-4594-4baf-b966-f2ac7abbf9b3.png)'
  id: totrans-257
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f15542ca-4594-4baf-b966-f2ac7abbf9b3.png)'
- en: Besides showing the earth as a sphere with orthogonal projection as shown in
    the preceding figure, we can also set `projection='cyl'` to use the Miller Cylindrical
    projection for a flat rectangular illustration.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 除了展示如前图所示的正交投影的地球作为球体外，我们还可以设置`projection='cyl'`，使用米勒圆柱投影来展示平面矩形图。
- en: Basemap provides plenty map drawing functions, such as drawing coastlines and
    plotting data over maps with hexbin or streamplot. Their details can be found
    in the official tutorials at [http://basemaptutorial.readthedocs.io](http://basemaptutorial.readthedocs.io).
    As in-depth geographical analysis is beyond the scope of this book, we will leave
    a more specific exploration of its usage as an exercise for interested readers.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: Basemap提供了许多地图绘制功能，如绘制海岸线和在地图上绘制数据（使用hexbin或streamplot）。详细信息可以在官方教程中找到[http://basemaptutorial.readthedocs.io](http://basemaptutorial.readthedocs.io)。由于深入的地理分析超出了本书的范围，我们将把更具体的用法留给感兴趣的读者作为练习。
- en: GeoPandas
  id: totrans-260
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GeoPandas
- en: GeoPandas is a geographical plotting package integrated with Matplotlib. It
    has comprehensive functionalities to read common GIS file formats.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: GeoPandas是与Matplotlib集成的地理绘图库，具有读取常见GIS文件格式的全面功能。
- en: 'To use GeoPandas, we will import the library as follows:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用GeoPandas，我们将按如下方式导入库：
- en: '[PRE37]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: In the following example, we will explore the climate change data prepared by
    the World Bank Group.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的示例中，我们将探讨世界银行集团准备的气候变化数据。
- en: 'We have selected the projection of precipitation in 2080-2099 based on scenario
    B1: a convergent world with global population peaking in mid-century and then
    declining. The storyline describes economies becoming more service- and information-oriented,
    with the introduction of clean and resource-efficient technologies but without
    additional climate initiatives.'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择了基于 B1 场景的 2080-2099 年降水投影：这是一个收敛的世界，全球人口在本世纪中期达到峰值后开始下降。故事情节描述了经济逐渐转向以服务和信息为主，采用清洁和资源高效的技术，但没有额外的气候行动。
- en: 'As input, we have downloaded the shapefile (`.shp`), which is one of the standard
    formats used in geographical data analysis:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 作为输入，我们已经下载了 shapefile（`.shp`），这是地理数据分析中使用的标准格式之一：
- en: '[PRE38]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'We can look at the first few rows of the GeoPandas DataFrame. Note that the
    shape data is stored in the `geometry` column:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以查看 GeoPandas DataFrame 的前几行。请注意，形状数据存储在 `geometry` 列中：
- en: '![](img/8d7306f6-ad9c-45e7-bdcd-4da14d11b7c2.png)'
  id: totrans-269
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8d7306f6-ad9c-45e7-bdcd-4da14d11b7c2.png)'
- en: 'Next, we will add borders to the world map to better identify the locations:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将在世界地图上添加边界，以便更好地识别位置：
- en: '[PRE39]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Here we inspect the GeoPandas DataFrame. The shape information is also stored
    in the `geometry` as expected:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们检查 GeoPandas DataFrame。正如预期的那样，形状信息也存储在 `geometry` 中：
- en: '![](img/6f45a74a-9b3a-4cb9-bc6e-e2166a2438b8.png)'
  id: totrans-273
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6f45a74a-9b3a-4cb9-bc6e-e2166a2438b8.png)'
- en: 'The geometry data will be plotted as filled polygons. To draw the edges only,
    we will generate the geometry of borders by `GeoSeries.boundary`:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 几何数据将作为填充的多边形绘制。为了仅绘制边界，我们将通过 `GeoSeries.boundary` 生成边界几何：
- en: '[PRE40]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Now, we have obtained this result:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经获得了以下结果：
- en: '![](img/3e6456a8-90b6-4080-8c12-d5816fdc3e37.png)'
  id: totrans-277
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3e6456a8-90b6-4080-8c12-d5816fdc3e37.png)'
- en: The website also provides data for another scenario, A2, which describes a very
    heterogeneous world, with local identities preserved. How will the picture look?
    Will it look similar or strikingly different? Let's download the file to find
    out!
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 网站还提供了另一个场景 A2 的数据，描述了一个非常异质的世界，本地身份得以保存。那幅图将是什么样的？它会看起来相似还是截然不同？让我们下载文件来看看！
- en: Again, GeoPandas provides many APIs for more advanced usage. Readers can refer
    to `http://geopandas.org/` for the full documentation or further details.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，GeoPandas 提供了许多 API 供更高级的使用。读者可以参考 `http://geopandas.org/` 获取完整的文档或更多细节。
- en: Summary
  id: totrans-280
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概要
- en: Congratulations! We have come a long way in our advanced usage of Matplotlib.
    In this chapter, we learned how to draw and share axes between subplots, use a
    non-linear axis scale, adjust tick formatters and locators, plot images, create
    advanced plots with Seaborn, create a candlestick plot for financial data, draw
    simple 3D plots with Axes3D, and visualize geographic data with Basemap and GeoPandas.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你！我们在 Matplotlib 的高级使用方面已经取得了长足的进展。在本章中，我们学习了如何在子图之间共享和绘制坐标轴，使用非线性坐标轴尺度，调整刻度格式化器和定位器，绘制图像，使用
    Seaborn 创建高级图表，创建金融数据的蜡烛图，使用 Axes3D 绘制简单的 3D 图，以及使用 Basemap 和 GeoPandas 可视化地理数据。
- en: You're all set to dig deeper into integrating these skills with your desired
    applications. In the next few chapters, we will be working with the different
    backends supported by Matplotlib. Stay tuned!
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经准备好深入将这些技能与所需的应用程序整合了。在接下来的几个章节中，我们将使用 Matplotlib 支持的不同后端。敬请期待！
