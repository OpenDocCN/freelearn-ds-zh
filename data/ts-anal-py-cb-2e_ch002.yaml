- en: 1 Getting Started with Time Series Analysis
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1 开始时间序列分析
- en: Join our book community on Discord
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加入我们在 Discord 上的书籍社区
- en: '![](img/file0.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file0.png)'
- en: '[https://packt.link/zmkOY](https://packt.link/zmkOY)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/zmkOY](https://packt.link/zmkOY)'
- en: When embarking on a journey to learn coding in **Python**, you will often find
    yourself following instructions to install packages and import libraries, followed
    by a flow of a code-along stream. Yet an often-neglected part of any data analysis
    or data science process is ensuring that the right development environment is
    in place. Therefore, it is critical to have the proper foundation from the beginning
    to avoid any future hassles, such as an overcluttered implementation or package
    conflicts and dependency crisis. Having the right environment setup will serve
    you in the long run when you complete your project, ensuring you are ready to
    package your deliverable in a reproducible and production-ready manner.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 当你开始学习**Python**编程时，你经常会按照指示安装包并导入库，然后进入一段跟着代码走的学习流程。然而，在任何数据分析或数据科学过程中，一个常常被忽视的部分就是确保正确的开发环境已经搭建好。因此，从一开始就打好基础是至关重要的，这样可以避免未来可能出现的麻烦，比如实现过于复杂、包冲突或依赖危机。搭建好合适的开发环境会在你完成项目时帮助你，确保你能够以可重现和生产就绪的方式交付成果。
- en: Such a topic may not be as fun and may feel administratively heavy as opposed
    to diving into the core topic or the project at hand. But it is this foundation
    that differentiates a seasoned developer from the pack. Like any project, whether
    it is a **machine learning** project, a **data visualization** project, or a **data
    integration** project, it all starts with planning and ensuring all the required
    pieces are in place before you even **begin** with the core development.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这样的主题可能不会那么有趣，甚至可能会感觉有些行政负担，而不是直接进入核心主题或当前的项目。但正是这个基础，才将一个经验丰富的开发者与其他人区分开来。就像任何项目一样，无论是**机器学习**项目、**数据可视化**项目，还是**数据集成**项目，一切都始于规划，并确保在开始核心开发之前，所有需要的部分都已经到位。
- en: In this chapter, you will learn how to set up a **Python virtual environment**,
    and we will introduce you to two common approaches for doing so. The steps will
    cover commonly used environment and package management tools. This chapter is
    designed to be hands-on so that you avoid too much jargon and can dive into creating
    your virtual environments in an iterative and fun way.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，你将学习如何设置**Python 虚拟环境**，我们将介绍两种常见的方法来实现这一点。步骤将涵盖常用的环境和包管理工具。本章旨在实践操作，避免过多的行话，并让你以迭代和有趣的方式开始创建虚拟环境。
- en: As we progress throughout this book, there will be several new Python libraries
    that you will need to install specific to **time series analysis**, **time series
    visualization**, **machine learning**, and **deep learning** on time series data.
    It is advised that you don't skip this chapter, regardless of the temptation to
    do so, as it will help you establish the proper foundation for any code development
    that follows. By the end of this chapter, you will have mastered the necessary
    skills to create and manage your Python virtual environments using either **conda**
    or **venv**.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 随着本书的进展，你将需要安装多个特定于**时间序列分析**、**时间序列可视化**、**机器学习**和**深度学习**（针对时间序列数据）的 Python
    库。不管你有多大的诱惑跳过这一章，都不建议这么做，因为它将帮助你为随后的任何代码开发打下坚实的基础。在这一章结束时，你将掌握使用**conda**或**venv**创建和管理
    Python 虚拟环境所需的技能。
- en: 'The following recipes will be covered in this chapter:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下内容：
- en: Development environment setup
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发环境设置
- en: Installing Python libraries
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Python 库
- en: Installing JupyterLab and JupyterLab extensions
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 JupyterLab 和 JupyterLab 扩展
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 技术要求
- en: In this chapter, you will be primarily using the command line. For macOS and
    Linux, this will be the default Terminal (`bash` or `zsh`), while on a Windows
    OS, you will use the **Anaconda Prompt**, which comes as part of the Anaconda
    or Miniconda installation. Installing Anaconda or Miniconda will be discussed
    in the following *Getting ready* section.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，你将主要使用命令行。对于 macOS 和 Linux，默认的终端将是 (`bash` 或 `zsh`)，而在 Windows 操作系统中，你将使用**Anaconda
    提示符**，这是 Anaconda 或 Miniconda 安装包的一部分。关于如何安装 Anaconda 或 Miniconda，将在随后的*准备工作*部分讨论。
- en: We will use **Visual Studio Code** for the IDE, which is available for free
    at [https://code.visualstudio.com](https://code.visualstudio.com). It supports
    Linux, Windows, and macOS.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 **Visual Studio Code** 作为 IDE，它可以免费获取，网址为 [https://code.visualstudio.com](https://code.visualstudio.com)。它支持
    Linux、Windows 和 macOS。
- en: 'Other valid alternative options that will allow you to follow along include
    the following:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 其他有效的替代选项也可以让你跟随学习，具体包括：
- en: '**Sublime Text** at https://www.sublimetext.com'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Sublime Text**，网址为 https://www.sublimetext.com'
- en: '**Spyder** at [https://www.spyder-ide.org](https://www.spyder-ide.org)'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Spyder**，网址为 [https://www.spyder-ide.org](https://www.spyder-ide.org)'
- en: '**PyCharm Community Edition** at [https://www.jetbrains.com/pycharm/download/](https://www.jetbrains.com/pycharm/download/)'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PyCharm Community Edition**，网址为 [https://www.jetbrains.com/pycharm/download/](https://www.jetbrains.com/pycharm/download/)'
- en: '**Jupyter Notebook at** [https://jupyter.org](https://jupyter.org)'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Jupyter Notebook**，网址为 [https://jupyter.org](https://jupyter.org)'
- en: The source code for this chapter is available at [https://github.com/PacktPublishing/Time-Series-Analysis-with-Python-Cookbook](https://github.com/PacktPublishing/Time-Series-Analysis-with-Python-Cookbook)
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的源代码可以在 [https://github.com/PacktPublishing/Time-Series-Analysis-with-Python-Cookbook](https://github.com/PacktPublishing/Time-Series-Analysis-with-Python-Cookbook)
    获取
- en: Development environment setup
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开发环境设置
- en: As we dive into the various recipes provided in this book, you will be creating
    different Python virtual environments to install all your dependencies without
    impacting other Python projects.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们深入本书提供的各种配方时，你将会创建不同的 Python 虚拟环境，以便安装所有依赖项而不影响其他 Python 项目。
- en: 'You can think of a virtual environment as isolated buckets or folders, each
    with a Python interpreter and associated libraries. The following diagram illustrates
    the concept behind isolated, self-contained virtual environments, each with a
    different Python interpreter and different versions of packages and libraries
    installed:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将虚拟环境看作是独立的桶或文件夹，每个文件夹都包含一个 Python 解释器和相关的库。下面的图示说明了独立的自包含虚拟环境的概念，每个虚拟环境都有不同的
    Python 解释器，并且安装了不同版本的包和库：
- en: '![Figure 1.1: An example of three different Python virtual environments, one
    for each Python project](img/file1.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.1：三个不同 Python 虚拟环境的示例，每个环境对应一个 Python 项目](img/file1.jpg)'
- en: 'Figure 1.1: An example of three different Python virtual environments, one
    for each Python project'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1：三个不同 Python 虚拟环境的示例，每个环境对应一个 Python 项目
- en: If you installed Anaconda then these environments are typically stored and contained
    in separate folders inside the `envs` subfolder within the main Anaconda (or Miniconda)
    folder installation. As an example, on macOS, you can find the `envs` folder under
    `Users/<yourusername>/opt/anaconda3/envs/`. On Windows OS, it may look more like
    `C:\Users\<yourusername>\anaconda3\envs`. If you installed Miniconda, then the
    `main` folder will be `miniconda3` instead of `anaconda3`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你安装了 Anaconda，那么这些环境通常会存储在 `envs` 子文件夹中的单独文件夹内，该子文件夹位于主 Anaconda（或 Miniconda）文件夹的安装目录下。举例来说，在
    macOS 上，你可以在 `Users/<yourusername>/opt/anaconda3/envs/` 路径下找到 `envs` 文件夹。在 Windows
    操作系统中，路径可能看起来像 `C:\Users\<yourusername>\anaconda3\envs`。如果你安装的是 Miniconda，那么 `main`
    文件夹将是 `miniconda3` 而不是 `anaconda3`。
- en: Each environment (folder) contains a **Python interpreter**, as specified during
    the creation of the environment, such as a Python 2.7.18 or Python 3.9 interpreter.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 每个环境（文件夹）都包含一个 **Python 解释器**，该解释器在创建环境时指定，例如 Python 2.7.18 或 Python 3.9 解释器。
- en: Generally speaking, upgrading your Python version or packages can lead to many
    undesired side effects if testing is not part of your strategy. A common practice
    is to replicate your current Python environment to perform the desired upgrades
    for testing purposes before deciding whether to move forward with the upgrades.
    This is the value that environment managers (`conda` or `venv`) and package managers
    (`conda` or `pip`) bring to your development and production deployment process.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，如果没有测试作为策略的一部分，升级 Python 版本或包可能会导致许多不希望出现的副作用。常见的做法是复制当前的 Python 环境，在进行所需的升级并进行测试之后，再决定是否继续进行升级。这正是环境管理器（`conda`
    或 `venv`）和包管理器（`conda` 或 `pip`）在你的开发和生产部署过程中所带来的价值。
- en: Getting ready
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this section, it is assumed that you have the latest Python version installed
    by doing one of the following:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，假设你已经通过以下任一方式安装了最新版本的 Python：
- en: The recommended approach is to install through a Python distribution such as
    **Anaconda** ([https://www.anaconda.com/products/distribution](https://www.anaconda.com/products/distribution)),
    which comes preloaded with all the essential packages and supports Windows, Linux,
    and macOS (including M1 support as of version 2022.05). Alternatively, you can
    install **Miniconda** ([https://docs.conda.io/en/latest/miniconda.html](https://docs.conda.io/en/latest/miniconda.html))
    or **Miniforge** ([https://github.com/conda-forge/miniforge](https://github.com/conda-forge/miniforge)).
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 推荐的方法是通过像 **Anaconda**（[https://www.anaconda.com/products/distribution](https://www.anaconda.com/products/distribution)）这样的
    Python 发行版来安装，Anaconda 自带所有必需的包，并支持 Windows、Linux 和 macOS（2022.05 版本起支持 M1）。另外，你也可以安装
    **Miniconda**（[https://docs.conda.io/en/latest/miniconda.html](https://docs.conda.io/en/latest/miniconda.html)）或
    **Miniforge**（[https://github.com/conda-forge/miniforge](https://github.com/conda-forge/miniforge)）。
- en: Download an installer directly from the official Python site [https://www.python.org/downloads/](https://www.python.org/downloads/).
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直接从官方 Python 网站下载安装程序：[https://www.python.org/downloads/](https://www.python.org/downloads/)。
- en: 'If you are familiar with **Docker**, you can download the official Python image.
    You can visit Docker Hub to determine the desired image to pull [https://hub.docker.com/_/python](https://hub.docker.com/_/python).
    Similarly, **Anaconda** and **Miniconda** can be used with Docker by following
    the official instructions here : [https://docs.anaconda.com/anaconda/user-guide/tasks/docker/](https://docs.anaconda.com/anaconda/user-guide/tasks/docker/)'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你熟悉**Docker**，你可以下载官方的 Python 镜像。你可以访问 Docker Hub 来确定要拉取的镜像：[https://hub.docker.com/_/python](https://hub.docker.com/_/python)。同样，**Anaconda**
    和 **Miniconda** 可以通过遵循官方说明与 Docker 一起使用，说明请见此处：[https://docs.anaconda.com/anaconda/user-guide/tasks/docker/](https://docs.anaconda.com/anaconda/user-guide/tasks/docker/)
- en: At the time of writing, the latest Python version that's available is Python
    3.11.3.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 截至撰写时，最新的 Python 版本是 Python 3.11.3。
- en: LATEST PYTHON VERSION SUPPORTED IN ANACONDA
  id: totrans-35
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Anaconda 支持的最新 Python 版本
- en: ''
  id: totrans-36
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The latest version of Anaconda, 2023.03, released on April 2023\. By default,
    Anaconda will implement Python 3.10.9 as the base interpreter. In addition, you
    can create a Python virtual environment with Python version 3.11.3 using `conda
    create`, which you will see later in this recipe.
  id: totrans-37
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Anaconda 的最新版本是 2023.03，于 2023 年 4 月发布。默认情况下，Anaconda 会将 Python 3.10.9 作为基础解释器。此外，你可以使用
    `conda create` 创建一个 Python 版本为 3.11.3 的虚拟环境，稍后你将在本食谱中看到如何操作。
- en: The simplest and most efficient way to get you up and running quickly and smoothly
    is to go with a Python distribution such as *Anaconda* or *Miniconda*. I would
    even go further and recommend that you go with Anaconda if you are a beginner.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 获取快速顺利启动的最简单有效方法是使用像*Anaconda*或*Miniconda*这样的 Python 发行版。如果你是初学者，我甚至更推荐使用 Anaconda。
- en: 'If you are a macOS or Linux user, once you have Anaconda installed, you are
    pretty much all set for using your default Terminal. To verify the installation,
    open your Terminal and type the following:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是 macOS 或 Linux 用户，一旦安装了 Anaconda，你几乎可以直接使用默认的终端。要验证安装情况，打开终端并输入以下命令：
- en: '[PRE0]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following screenshot shows the standard output when running `conda info`,
    which outlines information regarding the installed `conda` environment. You should
    be interested in the listed versions for both `conda` and Python:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了运行 `conda info` 时的标准输出，列出了有关已安装 `conda` 环境的信息。你应该关注列出的 `conda` 和 Python
    的版本：
- en: '![Figure 1.2 – Verifying Conda''s installation on Linux (Ubuntu) using the
    Terminal](img/file2.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.2 – 在 Linux（Ubuntu）上使用终端验证 Conda 的安装](img/file2.png)'
- en: Figure 1.2 – Verifying Conda's installation on Linux (Ubuntu) using the Terminal
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2 – 在 Linux（Ubuntu）上使用终端验证 Conda 的安装
- en: If you installed Anaconda on a Windows OS, you need to use the Anaconda Prompt.
    To launch it, you can type Anaconda in the Windows search bar and select one of
    the Anaconda Prompts listed (**Anaconda Prompt** or **Anaconda PowerShell Prompt**).
    Once **Anaconda Prompt** has been launched, you can run the `conda` `info` command.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在 Windows 操作系统上安装了 Anaconda，你需要使用 Anaconda Prompt。要启动它，你可以在 Windows 搜索栏中输入
    Anaconda，并选择列出的其中一个 Anaconda Prompt（**Anaconda Prompt** 或 **Anaconda PowerShell
    Prompt**）。一旦启动了 **Anaconda Prompt**，你可以运行 `conda` `info` 命令。
- en: '![Figure 1.3: Verifying Conda''s installation on Windows using the Anaconda
    Prompt](img/file3.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.3：使用 Anaconda Prompt 在 Windows 上验证 Conda 的安装](img/file3.png)'
- en: 'Figure 1.3: Verifying Conda''s installation on Windows using the Anaconda Prompt'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.3：使用 Anaconda Prompt 在 Windows 上验证 Conda 的安装
- en: How to do it…
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何操作…
- en: In this recipe, I will cover two popular environment management tools. If you
    have Anaconda, Miniconda, or Miniforge installed, then `conda` should be your
    preferred choice since it provides both *package dependency management* and *environment
    management* for Python (and supports many other languages). On the other hand,
    the other option is using `venv`, which is a built-in Python module that provides
    *environment management* and requires no additional installation.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在本指南中，我将介绍两个流行的环境管理工具。如果你已经安装了Anaconda、Miniconda或Miniforge，那么`conda`应该是你的首选，因为它为Python（并且支持许多其他语言）提供了*包依赖管理*和*环境管理*。另一方面，另一个选项是使用`venv`，这是一个内置的Python模块，提供*环境管理*，无需额外安装。
- en: Both `conda` and `venv` allow you to create multiple virtual environments for
    your Python projects that may require different Python interpreters (for example,
    3.4, 3.8, or 3.9) or different Python packages. In addition, you can create a
    sandbox virtual environment to experiment with new packages to understand how
    they work without affecting your base Python installation.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`conda`和`venv`都允许你为你的Python项目创建多个虚拟环境，这些项目可能需要不同版本的Python解释器（例如，3.4、3.8或3.9）或不同的Python包。此外，你可以创建一个沙箱虚拟环境来尝试新的包，以了解它们如何工作，而不会影响你基础的Python安装。'
- en: Creating a separate virtual environment for each project is a best practice
    taken by many developers and data science practitioners. Following this recommendation
    will serve you well in the long run, helping you avoid common issues when installing
    packages, such as package dependency conflicts.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 为每个项目创建一个单独的虚拟环境是许多开发者和数据科学实践者采纳的最佳实践。遵循这一建议从长远来看会对你有所帮助，避免在安装包时遇到常见问题，如包依赖冲突。
- en: Using Conda
  id: totrans-51
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用Conda
- en: 'Start by opening your terminal (Anaconda Prompt for Windows):'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 首先打开你的终端（Windows的Anaconda提示符）：
- en: 'First, let''s ensure that you have the latest `conda` version. This can be
    done by using the following command:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们确认你拥有最新版本的`conda`。你可以通过以下命令来做到这一点：
- en: '[PRE1]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The preceding code will update the conda package manager. This is helpful if
    you are using an existing installation. This way, you make sure you have the latest
    version.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码将更新conda包管理器。如果你使用的是现有的安装，这将非常有用。通过这种方式，你可以确保拥有最新版本。
- en: 'If you have Anaconda installed, then you can update to the latest version using
    the following command:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你已经安装了Anaconda，可以使用以下命令更新到最新版本：
- en: '[PRE2]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You will now create a new virtual environment named `py310` with a specific
    Python version, which in this case, is Python 3.10:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你将创建一个名为`py310`的新虚拟环境，指定的Python版本为Python 3.10：
- en: '[PRE3]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here, `-n` is a shortcut for `--name`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`-n`是`--name`的快捷方式。
- en: '`conda` may identify additional packages that need to be downloaded and installed.
    You may be prompted on whether you want to proceed or not. Type `y` and then hit
    *Enter* to proceed.'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`conda`可能会识别出需要下载和安装的其他包。系统可能会提示你是否继续。输入`y`然后按*Enter*键继续。'
- en: 'You could have skipped the confirmation message in the preceding step by adding
    the `-y` option. Use this if you are confident in what you are doing and do not
    require the confirmation message, allowing `conda` to proceed immediately without
    prompting you for a response. You can update your command by adding the `-y` or
    `--yes` option, as shown in the following code:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以通过添加`-y`选项跳过前面步骤中的确认消息。如果你对自己的操作有信心，并且不需要确认消息，可以使用此选项，让`conda`立即继续而不提示你进行响应。你可以通过添加`-y`或`--yes`选项来更新你的命令，如以下代码所示：
- en: '[PRE4]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Once the setup is complete, you will be ready to *activate* the new environment.
    Activating a Python environment means that our **$PATH** environment variable
    will be updated to point to the specified Python interpreter from the virtual
    environment (folder). You can confirm this using the **echo** command:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦设置完成，你就可以*激活*新的环境。激活一个Python环境意味着我们的**$PATH**环境变量会被更新，指向虚拟环境（文件夹）中的指定Python解释器。你可以使用**echo**命令来确认这一点：
- en: '[PRE5]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The preceding code works on Linux and macOS. If you are using the Windows Anaconda
    Prompt you can use `echo %path%`. On the Anaconda PowerShell Prompt you can use
    `echo $env:path`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码适用于Linux和macOS。如果你使用的是Windows Anaconda提示符，可以使用`echo %path%`。在Anaconda PowerShell提示符中，你可以使用`echo
    $env:path`。
- en: Here, we can see that our `$PATH` variable is pointing to our base `conda` environment
    and not our newly created virtual environment.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到我们的`$PATH`变量指向的是基础的`conda`环境，而不是我们新创建的虚拟环境。
- en: 'Now, activate your new `py310` environment and test the `$PATH` environment
    variable again. You will notice that it is now pointing to the `envs` folder –
    more specifically, the `py310/bin` subfolder:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，激活你新的 `py310` 环境，并再次测试 `$PATH` 环境变量。你会注意到它现在指向 `envs` 文件夹——更具体地说，是 `py310/bin`
    子文件夹：
- en: '[PRE6]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Another way to confirm that our new virtual environment is the active environment
    is by running the following command:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 另一种确认我们新虚拟环境是活动环境的方法是运行以下命令：
- en: '[PRE7]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The preceding command will list all the `conda` environments that have been
    created. Notice that `py310` is listed with an `*`, indicating it is the active
    environment. The following screenshot shows that we have four virtual environments
    and that `py310` is currently the active one:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的命令将列出所有已创建的 `conda` 环境。请注意，`py310` 前面有一个 `*`，表示它是当前活动环境。以下截图显示我们有四个虚拟环境，且
    `py310` 是当前活动的环境：
- en: '![Figure 1.4: List of all Python virtual environments that have been created
    using conda in MacOS](img/file4.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.4：在 MacOS 上通过 conda 创建的所有 Python 虚拟环境列表](img/file4.png)'
- en: 'Figure 1.4: List of all Python virtual environments that have been created
    using conda in MacOS'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.4：在 MacOS 上通过 conda 创建的所有 Python 虚拟环境列表
- en: 'Once you activate a specific environment, any package you install will only
    be available in that isolated environment. For example, let''s install the pandas
    library and specify which version to install in the `py310` environment. At the
    time of writing, pandas 2.0.1 is the latest version:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦激活了特定环境，你安装的任何软件包将只会在该隔离环境中可用。例如，假设我们安装 pandas 库并指定要在 `py310` 环境中安装哪个版本。写作时，pandas
    2.0.1 是最新版本：
- en: '[PRE8]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Notice that `conda` will prompt you again for confirmation to let you know what
    additional package will be downloaded and installed. Here, conda is checking for
    all the dependencies that pandas 2.0.1 needs and is installing them for you. You
    can also skip this confirmation step by adding the `-y` or `--yes` option at the
    end of the statement.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`conda` 会再次提示你确认，并告知将下载并安装哪些额外的软件包。在这里，conda 正在检查 pandas 2.0.1 所需的所有依赖项，并为你安装它们。你还可以通过在命令末尾添加
    `-y` 或 `--yes` 选项来跳过此确认步骤。
- en: 'The message will also point out the environment location where the installation
    will occur. The following is an example of a prompted message for installing pandas
    2.0.1:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 消息还会指出安装将发生的环境位置。以下是安装 pandas 2.0.1 时的一个提示消息示例：
- en: '![Figure 1.5: Conda''s confirmation prompt listing all the packages](img/file5.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.5：Conda 确认提示，列出所有软件包](img/file5.png)'
- en: 'Figure 1.5: Conda''s confirmation prompt listing all the packages'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.5：Conda 确认提示，列出所有软件包
- en: 'If you get `PackagesNotFoundError` you may need to add the conda-forge channel
    to install the latest version of pandas (for example 2.0.1). You can accomplish
    this using the following command:'
  id: totrans-81
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果你遇到 `PackagesNotFoundError` 错误，你可能需要添加 conda-forge 通道来安装最新版本的 pandas（例如 2.0.1）。你可以使用以下命令来完成此操作：
- en: ''
  id: totrans-82
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: $ conda config --add channels conda-forge
  id: totrans-83
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: $ conda config --add channels conda-forge
- en: ''
  id: totrans-84
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Conda-Forge provides builds for different platforms and architectures and will
    automatically pick the appropriate build for your platform and architecture.
  id: totrans-85
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Conda-Forge 提供适用于不同平台和架构的构建，并会自动选择适合你平台和架构的构建版本。
- en: ''
  id: totrans-86
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'As an example, if you want to specify a conda-forge build for MacOS ARM then
    you can specify the build as shown in the following:'
  id: totrans-87
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 作为示例，如果你想为 MacOS ARM 指定一个 conda-forge 构建版本，你可以按照以下方式指定该构建：
- en: ''
  id: totrans-88
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: $ conda config --add channels conda-forge/osx-arm64
  id: totrans-89
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: $ conda config --add channels conda-forge/osx-arm64
- en: Once you press *y* and hit *Enter*, `conda` will begin downloading and installing
    these packages.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你按下 *y* 并按 *Enter* 键，`conda` 将开始下载并安装这些软件包。
- en: 'Once you are done working in the current `py310` environment, you can `deactivate`
    and return to the base Python as shown in the following command:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你完成在当前 `py310` 环境中的工作，你可以使用以下命令 `deactivate` 来退出并返回到基础 Python 环境：
- en: '[PRE9]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If you no longer need the py310 environment and wish to delete it, you can
    do so with the `env remove` command. The command will completely delete the environment
    and all the installed libraries. In other words, it will delete (remove) the entire
    folder for that environment:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你不再需要 py310 环境并希望删除它，你可以使用 `env remove` 命令来删除它。该命令将完全删除该环境及所有已安装的库。换句话说，它将删除（移除）该环境的整个文件夹：
- en: '[PRE10]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Using venv
  id: totrans-95
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用 venv
- en: Once Python 3x has been installed, you get access to the built-in `venv` module,
    which allows you to create virtual environments (similar to `conda`). Notice that
    when using `venv`, you will need to provide a *path* to where you want the virtual
    environment (folder) to be created. If one isn't provided, it will be created
    in the current directory where you are running the command from. In the following
    code, we will create the virtual environment in the `Desktop` directory.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了 Python 3x，你可以使用内置的`venv`模块，该模块允许你创建虚拟环境（类似于`conda`）。注意，当使用`venv`时，你需要提供一个*路径*，以指定虚拟环境（文件夹）创建的位置。如果没有提供路径，虚拟环境将会在你运行命令的当前目录下创建。在下面的代码中，我们将在`Desktop`目录中创建虚拟环境。
- en: 'Follow these steps to create a new environment, install a package, and then
    delete the environment using `venv`:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤创建新环境、安装包并使用`venv`删除该环境：
- en: 'First, decide where you want to place the new virtual environment and specify
    the path. In this example, I have navigated to `Desktop` and ran the following
    command:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，决定你希望将新的虚拟环境放在哪里，并指定路径。在这个示例中，我已经导航到`Desktop`并运行了以下命令：
- en: '[PRE11]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The preceding code will create a new py310 folder in the `Desktop` directory.
    The `py310` folder contains several subdirectories, the Python interpreter, standard
    libraries, and other supporting files. The folder structure is similar to how
    `conda` creates its environment folders in the `envs` directory.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码将在`Desktop`目录中创建一个新的py310文件夹。`py310`文件夹包含若干子目录、Python 解释器、标准库以及其他支持文件。该文件夹结构类似于`conda`在`envs`目录中创建的环境文件夹。
- en: 'Let''s activate the py310 environment and examine the $PATH environment variable
    to verify that it is active. The following script is for Linux and macOS (bash
    or zsh) and assumes you are running the command from the Desktop directory:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们激活py310环境，并检查$PATH环境变量以确认它已经被激活。以下脚本适用于Linux和macOS（bash或zsh），假设你是在Desktop目录下运行命令：
- en: '[PRE12]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Here, we can see that the `py310` environment has been activated.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到`py310`环境已经被激活。
- en: 'On Windows using Anaconda PowerShell Prompt, there is no `bin` subfolder, so
    you will need to run the command using the following syntax, again assuming you
    are running the command from the `Desktop` directory:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上使用Anaconda PowerShell Prompt时，没有`bin`子文件夹，因此你需要使用以下语法运行命令，假设你是在`Desktop`目录下运行命令：
- en: '[PRE13]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'There are two activate files under the Scripts folders: `activate.bat` and
    `Activate.ps1` where the latter is to be used with Anaconda PowerShell Prompt
    instead of the Anaconda Windows Command Prompt. Generally, in PowerShell If you
    omit the file extension the right script will be executed. It is better though
    that you specify the proper file extension, for example specifying `Activate.ps1`,
    as shown in the following:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在Scripts文件夹下有两个激活文件：`activate.bat`和`Activate.ps1`，后者应在Anaconda PowerShell Prompt中使用，而不是Anaconda
    Windows命令提示符。通常在PowerShell中，如果你省略文件扩展名，正确的脚本会被执行。但最好是指定正确的文件扩展名，例如指定`Activate.ps1`，如下所示：
- en: '[PRE14]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, let''s check which version has been installed by using the following command:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们使用以下命令检查已安装的版本：
- en: '[PRE15]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Once you are done developing using the **py310** environment, you can deactivate
    it to return to the base Python environment using the **deactivate** command:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦完成使用**py310**环境进行开发，你可以使用**deactivate**命令将其停用，返回到基础Python环境：
- en: '[PRE16]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: If you no longer need the `py310` environment and wish to remove it, just delete
    the entire `py310` folder and that's it.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你不再需要`py310`环境并希望删除它，只需删除整个`py310`文件夹即可。
- en: How it works…
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Once a virtual environment is activated, you can validate the location of the
    active Python interpreter to confirm that you are using the right one. Earlier,
    you saw how the `$PATH` environment variable changes once you activate a virtual
    environment. You can achieve similar results using the `which` command in Linux
    and macOS, the `Get-Command` in Windows PowerShell, or the `where` command in
    Windows Command Prompt.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦虚拟环境被激活，你可以验证当前活跃的 Python 解释器位置，以确认你正在使用正确的解释器。之前，你看到激活虚拟环境后，`$PATH`环境变量是如何变化的。在Linux和macOS中，你可以使用`which`命令实现类似的效果，在Windows
    PowerShell中使用`Get-Command`，或者在Windows命令提示符中使用`where`命令。
- en: 'The following is an example on macOS or Linux:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是macOS或Linux的示例：
- en: '[PRE17]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The following is an example on Windows OS (PowerShell):'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Windows操作系统（PowerShell）的示例：
- en: '[PRE18]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'An alternative to where is the Get-Command as shown in the following:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`where`命令的替代方法是`Get-Command`，如下所示：'
- en: '[PRE19]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The commands will output the path to the active Python interpreter. The output
    of the preceding statements will show a different path, depending on whether the
    active environment was created with `conda` or `venv`. When activating a `conda`
    virtual environment, it will be inside the `envs` folder, as shown in the following
    on a MacOS:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令将输出活动Python解释器的路径。前述命令的输出将显示不同的路径，具体取决于活动环境是使用`conda`还是`venv`创建的。激活`conda`虚拟环境时，它将位于`envs`文件夹中，如MacOS上所示：
- en: '`/Users/tarekatwan/opt/anaconda3/envs/py310/bin/python`'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`/Users/tarekatwan/opt/anaconda3/envs/py310/bin/python`'
- en: 'When activating a `venv` virtual environment, the path will be the same path
    that you provided when it was created, as shown here on a MacOS:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 当激活`venv`虚拟环境时，路径将与创建时提供的路径相同，如MacOS上的示例所示：
- en: '`/Users/tarekatwan/Desktop/py310/bin/python`'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`/Users/tarekatwan/Desktop/py310/bin/python`'
- en: Any additional packages or libraries that you install after you have *activated*
    a virtual environment will be isolated from other environments and reside in the
    environment's folder structure.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 您在*激活*虚拟环境后安装的任何额外包或库都将与其他环境隔离，并保存在该环境的文件夹结构中。
- en: 'If we compare the folder structures of both `venv` and `conda`, you can see
    similarities, as shown in the following screenshot:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们比较`venv`和`conda`的文件夹结构，您会看到相似之处，如下图所示：
- en: '![Figure 1.6: Comparing folder structures using conda and venv](img/file6.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![图1.6：使用conda和venv比较文件夹结构](img/file6.png)'
- en: 'Figure 1.6: Comparing folder structures using conda and venv'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.6：使用conda和venv比较文件夹结构
- en: 'Recall that when using `conda`, all environments will default to the `/envs/`
    location inside the `anaconda3/` or `minconda3/` directory. When using `venv`,
    you need to provide a path to specify where to create the directory or project;
    otherwise, it will default to the current directory that you used to run the command.
    Similarly, you can specify a different path using `conda` with the option `-p`
    or `--prefix`. Note that when using `venv`, you cannot specify the Python version
    since it relies on the active or base Python version being used to run the command.
    This is in contrast to `conda`, which allows you to specify a different Python
    version regardless of the **base** Python version installed. For example, the
    current Python version for the base environment is 3.10, and you can still create
    a 3.11.x environment using the following:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 请回忆，当使用`conda`时，所有环境默认位于`anaconda3/`或`minconda3/`目录下的`/envs/`位置。而使用`venv`时，您需要提供一个路径来指定创建目录或项目的位置；否则，它将默认为您运行命令时所用的当前目录。类似地，您可以使用`conda`通过选项`-p`或`--prefix`指定不同的路径。请注意，使用`venv`时，您无法指定Python版本，因为它依赖于当前活动或基础Python版本来运行命令。这与`conda`不同，`conda`允许您指定不同的Python版本，而不管**基础**Python版本是什么。例如，当前基础环境的Python版本是3.10，您仍然可以使用以下命令创建一个3.11.x环境：
- en: '[PRE20]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The preceding code will create a new `py311` environment with Python 3.11.3.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将创建一个新的`py311`环境，并安装Python 3.11.3版本。
- en: 'Another advantage of `conda`, is that it provides two features: a *package
    and dependency manager* and a *virtual environment manager*. This means we can
    use the same `conda` environment to create additional environments using `conda
    create`, and install packages using `conda install <package name>`, which you
    will use in the next recipe, *Installing Python libraries*.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`conda`的另一个优点是，它提供了两个功能：*包和依赖管理器*以及*虚拟环境管理器*。这意味着我们可以使用相同的`conda`环境，通过`conda
    create`创建额外的环境，并使用`conda install <package name>`安装包，这将在下一个章节“*安装Python库*”中使用。'
- en: Keep in mind that when using `venv`, it is *only* a virtual environment manager,
    and you will still need to rely on `pip` as a package manager to install packages;
    for example, `pip install <package name>`.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，使用`venv`时，它*仅*是一个虚拟环境管理器，您仍然需要依赖`pip`作为包管理器来安装包；例如，使用`pip install <package
    name>`。
- en: Additionally, when using `conda` to install packages, it will check for any
    conflicts and will prompt you for any recommendations, including the need to upgrade,
    downgrade, or install additional package dependencies.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，当使用`conda`安装包时，它会检查是否存在冲突，并会提示您进行任何推荐操作，包括是否需要升级、降级或安装额外的包依赖。
- en: Lastly, an added benefit of using `conda` is that you can create environments
    for other languages and not just Python. This includes Julia, R, Lua, Scala, Java,
    and more.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，使用`conda`的一个额外好处是，您不仅可以为Python创建环境，还可以为其他语言创建环境。包括Julia、R、Lua、Scala、Java等。
- en: There's more…
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 还有更多…
- en: In the preceding examples, you were able to create Python virtual environments
    from scratch using either `conda` or `venv`. The virtual environments you created
    may not contain the desired packages yet, so you will need to specifically install
    such packages for your project. You will explore how you can install packages
    in the upcoming recipe “*Installing Python Libraries*”.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，你可以使用`conda`或`venv`从零开始创建Python虚拟环境。你创建的虚拟环境可能还不包含所需的包，因此你需要特别为项目安装这些包。你将会在接下来的食谱“*安装Python库*”中了解如何安装包。
- en: There are other ways to create your virtual environment in `conda` that we will
    discuss here.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他方式可以在`conda`中创建虚拟环境，我们将在这里讨论这些方式。
- en: Creating a virtual environment using a YAML file
  id: totrans-139
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用YAML文件创建虚拟环境
- en: You can create a virtual environment from a **YAML** file. This option gives
    greater control in defining many aspects of the environment, including all the
    packages that should be installed all in one step.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从**YAML**文件创建虚拟环境。这个选项可以让你在一步中定义环境的多个方面，包括应该安装的所有包。
- en: 'You can create a YAML file in VSCode. Here is an example of a YAML file (`env.yml`)
    that creates a `conda` environment labeled `tscookbook` using Python 3.10:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在VSCode中创建一个YAML文件。以下是一个`env.yml`文件的示例，使用Python 3.10创建一个名为`tscookbook`的`conda`环境：
- en: '[PRE21]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'To create your virtual environment using the `env.yml` file, you can use `conda
    env create` with the `-f` or `--file` option like so:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用`env.yml`文件创建虚拟环境，可以使用`conda env create`命令，并添加`-f`或`--file`选项，如下所示：
- en: '[PRE22]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Once this process is completed, you can activate the environment:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦这个过程完成，你可以激活该环境：
- en: '[PRE23]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'You can also bootstrap your YAML file from an existing environment. This is
    very useful if you want to share your environment configurations with others or
    create a backup for later use. The following three commands will achieve the same
    results of exporting the `py310` conda environment to a YAML file named `env.yml`,
    using slightly different syntax options:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以从现有环境引导生成YAML文件。如果你想与他人分享环境配置或为将来使用创建备份，这个方法非常有用。以下三个命令将使用稍微不同的语法选项，达到将`py310`的`conda`环境导出为`env.yml`的YAML文件的相同效果：
- en: '[PRE24]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This will generate the `env.yml` file for you in the current directory.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在当前目录下为你生成`env.yml`文件。
- en: Cloning a virtual environment from another environment
  id: totrans-150
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 从另一个环境克隆虚拟环境
- en: 'This is a great feature if you want to experiment with new packages or upgrade
    existing packages, but you do not want to risk breaking the existing code in your
    current project. Using the –clone option you can create a copy or a clone of your
    environment in one step. This achieves the same results as the previous examples
    of using `conda env export` to create a YAML file of an existing environment and
    then creating a new environment based on that YAML file. The following example
    will clone the `py310` conda environment to a new environment named `py310_clone`:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个很棒的功能，适用于你想要尝试新包或升级现有包，但又不希望破坏当前项目中的现有代码。使用`–clone`选项，你可以一步创建环境的副本或克隆。这样可以实现与前面使用`conda
    env export`命令生成现有环境的YAML文件，再基于该YAML文件创建新环境相同的效果。以下示例将把`py310`的`conda`环境克隆为一个名为`py310_clone`的新环境：
- en: '[PRE25]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: See also
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 另见
- en: 'It is worth mentioning that Anaconda comes with another tool **called anaconda-project**
    to package your `conda` project artifacts and create a YAML file for reproducibility.
    This is ideal for creating, sharing, and ensuring reproducibility of your data
    science projects. Think of this as an alternative approach to developing your
    YAML manually. For more information, please reference the official GitHub repository
    here: [https://github.com/Anaconda-Platform/anaconda-project](https://github.com/Anaconda-Platform/anaconda-project).'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 值得一提的是，Anaconda附带了一个工具，**叫做anaconda-project**，它可以将你的`conda`项目工件打包并创建一个YAML文件以确保可重复性。这个工具非常适合创建、共享和确保数据科学项目的可重复性。可以把它看作是手动编写YAML的替代方案。更多信息，请参考官方GitHub仓库：[https://github.com/Anaconda-Platform/anaconda-project](https://github.com/Anaconda-Platform/anaconda-project)。
- en: 'For a list of arguments, you can type the following in your terminal:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看参数列表，你可以在终端中输入以下命令：
- en: '[PRE26]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: If you are using a machine that does not allow you to install any software or
    you are using an older machine with limited capacity or performance, then do not
    worry. There are other options so that you can follow the recipes in this book
    with hands-on practice.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用一台不允许安装软件的机器，或者使用一台性能有限的旧机器，不用担心。还有其他选项可以让你在本书中进行动手实践。
- en: 'Some alternative options that you can explore are as follows:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以探索的一些替代选项如下：
- en: '**Google Colab** a cloud-based platform to write and run Python code in notebooks
    that already have some of the most popular data science packages preinstalled,
    including `pandas`, `statsmodels`, `scikit-learn`, and `TensorFlow`. Colab allows
    you to install additional packages from within the notebook using `pip install`.
    A great feature of Colab is that you get the option to configure your notebook
    so that you can use a CPU, GPU, or TPU for free. You can explore Colab by going
    to [https://colab.research.google.com/](https://colab.research.google.com/).'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Google Colab** 是一个基于云的平台，允许你在笔记本中编写和运行 Python 代码，这些笔记本已经预装了一些最受欢迎的数据科学包，包括`pandas`、`statsmodels`、`scikit-learn`
    和 `TensorFlow`。Colab 允许你通过 `pip install` 在笔记本中安装额外的包。Colab 的一个好特点是你可以选择配置你的笔记本，以便免费使用
    CPU、GPU 或 TPU。你可以通过访问 [https://colab.research.google.com/](https://colab.research.google.com/)
    来探索 Colab。'
- en: '**Kaggle Notebooks**, similar to Colab, comprises hosted Jupyter notebooks
    with many of the most popular data science packages already preinstalled. It also
    allows you to `pip install` any additional packages that are required. For more
    information, please refer to [https://www.kaggle.com/docs/notebooks](https://www.kaggle.com/docs/notebooks)'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Kaggle Notebooks** 类似于 Colab，包含托管的 Jupyter 笔记本，并且已经预装了许多最受欢迎的数据科学包。它也允许你通过
    `pip install` 安装任何需要的额外包。有关更多信息，请参考 [https://www.kaggle.com/docs/notebooks](https://www.kaggle.com/docs/notebooks)。'
- en: '**Replit** offers a free, in-browser IDE that supports more than 50+ languages,
    including Python. All you need to do is create an account and create your new
    `replit` space by visiting [https://replit.com/](https://replit.com/)'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Replit** 提供一个免费的在线 IDE，支持超过 50 种语言，包括 Python。你只需创建一个帐户，并通过访问 [https://replit.com/](https://replit.com/)
    来创建你的新 `replit` 空间。'
- en: '**Binder** an online open-source platform that allows you to turn a Git repository
    into a collection of interactive notebooks. You can explore Binder by visiting
    [https://mybinder.org](https://mybinder.org)'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Binder** 是一个在线开源平台，允许你将 Git 仓库转化为一组交互式笔记本。你可以通过访问 [https://mybinder.org](https://mybinder.org)
    来探索 Binder。'
- en: '**Deepnote**, similar to Colab, is an online platform to write, run, and collaborate
    on Python notebooks and offers a free plan which you can check out here [https://deepnote.com](https://deepnote.com)'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Deepnote** 类似于 Colab，是一个在线平台，允许你编写、运行和协作 Python 笔记本，并提供了一个免费的计划，你可以在这里查看
    [https://deepnote.com](https://deepnote.com)。'
- en: Installing Python libraries
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Python 库
- en: 'In the preceding recipe, you were introduced to the YAML environment configuration
    file, which allows you to create a Python virtual environment and all the necessary
    packages in one step using one line of code:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的配方中，你已经了解了 YAML 环境配置文件，它允许你通过一行代码一步创建一个 Python 虚拟环境和所有必要的包。
- en: '[PRE27]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Throughout this book, you will need to install several Python libraries to follow
    the recipes. There are several methods for installing Python libraries, which
    you will explore in this recipe.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的整个过程中，你需要安装若干个 Python 库来跟随本书的配方。你将探索几种安装 Python 库的方法。
- en: Getting ready
  id: totrans-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'You will create and use different files in this recipe, including a `requirements.txt`,
    `environment_history.yml`, and other files. These files are available to download
    from the GitHub repository for this book: [https://github.com/PacktPublishing/Time-Series-Analysis-with-Python-Cookbook/tree/main/code/Ch1](https://github.com/PacktPublishing/Time-Series-Analysis-with-Python-Cookbook/tree/main/code/Ch1)'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，你将创建并使用不同的文件，包括 `requirements.txt`、`environment_history.yml` 和其他文件。这些文件可以从本书的
    GitHub 仓库中下载：[https://github.com/PacktPublishing/Time-Series-Analysis-with-Python-Cookbook/tree/main/code/Ch1](https://github.com/PacktPublishing/Time-Series-Analysis-with-Python-Cookbook/tree/main/code/Ch1)。
- en: In this chapter, you will become familiar with how to generate your `requirements.txt`
    file, as well as installing libraries in general.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何生成你的 `requirements.txt` 文件，并了解如何安装库的一般过程。
- en: How to do it…
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何做...
- en: The easiest way to install a collection of libraries at once is by using a `requirements.txt`
    file.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 一次性安装一组库的最简单方法是使用 `requirements.txt` 文件。
- en: In a nutshell, the `requirements.txt` file lists the Python libraries and their
    associated versions that you want to install. You can create your `requirements.txt`
    file manually or export it from an existing Python environment.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，`requirements.txt`文件列出了你想要安装的Python库及其相应的版本。你可以手动创建`requirements.txt`文件，也可以从现有的Python环境中导出它。
- en: The file does not need to be named `requirements.txt`, it is more of a naming
    convention and a very common one embraced by the Python community. Some tools,
    such as PyCharm, will autodetect the `requirements.txt` file if is placed in the
    root project directory.
  id: totrans-174
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 该文件不一定需要命名为`requirements.txt`，它更多的是一种命名约定，并且是Python社区非常常见的一种命名方式。一些工具，如PyCharm，如果`requirements.txt`文件位于项目的根目录中，会自动检测到该文件。
- en: Using conda
  id: totrans-175
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用conda
- en: 'With `conda`, you have different options for installing our packages in bulk.
    You can either create a new environment and install all the packages listed in
    a `requirements.txt` file at once (using the `conda` `create` statement), or you
    can install the Python packages to an existing environment using the `requirements.txt`
    file (using the `conda install` statement):'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`conda`时，你有不同的选择来批量安装包。你可以创建一个新的环境，并一次性安装`requirements.txt`文件中列出的所有包（使用`conda
    create`命令），或者你可以使用`requirements.txt`文件将Python包安装到现有的环境中（使用`conda install`命令）：
- en: '**Option 1**: Create a new `conda` environment and install the libraries in
    one step. For example, you can create a new environment for each chapter and use
    the associated `requirements.txt` file. The following example will create a new
    environment named `ch1` and install all the packages listed in the requirements.txt
    file:'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**选项1**：创建一个新的`conda`环境，并一步到位安装库。例如，你可以为每一章创建一个新的环境，并使用关联的`requirements.txt`文件。以下示例将创建一个名为`ch1`的新环境，并安装`requirements.txt`文件中列出的所有包：'
- en: '[PRE28]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '**Option 2**: Install the necessary libraries to an existing `conda` environment.
    In this example, you have an existing `timeseries` environment, which you will
    need to activate first and then install the libraries from the `requirements.txt`
    file:'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**选项2**：将所需的库安装到现有的`conda`环境中。在此示例中，你有一个现有的`timeseries`环境，首先需要激活该环境，然后从`requirements.txt`文件中安装库：'
- en: '[PRE29]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Using venv and pip
  id: totrans-181
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用venv和pip
- en: 'Since `venv` is just an environment manager, you will need to use `pip` as
    your package manager tool. You will start by using `venv` to create a new environment,
    and then use `pip` to install the packages:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`venv`只是一个环境管理器，你将需要使用`pip`作为包管理工具。你将首先使用`venv`创建一个新环境，然后使用`pip`安装包：
- en: 'On **MacOS/Linux**: Create and then activate the `venv` environment before
    you install the packages:'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**MacOS/Linux**上：创建并激活`venv`环境，然后再安装包：
- en: '[PRE30]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'On **Windows**: Create and activate the `venv` environment and then install
    the packages:'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**Windows**上：创建并激活`venv`环境，然后安装包：
- en: '[PRE31]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Notice that in the preceding code for Windows, the `activate` file extension
    was not specified (either `.bat` or `.ps1`). This is valid and will work on either
    Windows Prompt or PowerShell.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在前面的Windows代码中，没有指定`activate`文件的扩展名（`.bat`或`.ps1`）。这是有效的，能够在Windows命令提示符或PowerShell中工作。
- en: How it works…
  id: totrans-188
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: In the preceding code, the `requirements.txt` file was provided so that you
    can install the necessary libraries.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，提供了`requirements.txt`文件，以便你可以安装所需的库。
- en: But how can you generate your `requirements.txt` file?
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，如何生成你的`requirements.txt`文件呢？
- en: There are two approaches to creating the `requirements.txt` file. Let's take
    a look at both.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`requirements.txt`文件有两种方法。让我们来看看这两种方法。
- en: Creating the file manually
  id: totrans-192
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 手动创建文件
- en: 'Since it is a simple file format, you can create the file using any text editor,
    such as VSCode, and list the packages you want to install. If you do not specify
    the package version, then the latest version that''s available will be considered
    for installation. See the following example for the `simple.txt` file:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 由于它是一个简单的文件格式，你可以使用任何文本编辑器来创建该文件，例如VSCode，并列出你想要安装的包。如果你没有指定包的版本，那么安装时将考虑最新版本。请参见以下`simple.txt`文件的示例：
- en: '[PRE32]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'First, let''s test out `venv` and `pip`. Run the following script (I am running
    this on a Mac):'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们测试一下`venv`和`pip`。运行以下脚本（我在Mac上运行此操作）：
- en: '[PRE33]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: What are those additional packages? These are based on the dependencies in `pandas`
    and `matplotlib` that `pip` identified and installed for us.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 那些额外的包是什么？这些是基于`pip`为我们识别和安装的`pandas`和`matplotlib`的依赖关系。
- en: 'Now, let''s use the same `simple.txt` file but using `conda` this time:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们这次使用`conda`，并使用相同的`simple.txt`文件：
- en: '[PRE34]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Once the installation is completed, you can activate the environment and list
    the packages that were installed:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，您可以激活环境并列出已安装的包：
- en: '[PRE35]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'You may notice that the list is pretty large. More packages are installed compared
    to the `pip` approach. You can get a count of the libraries that have been installed
    using the following command:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会注意到列表相当庞大。与 `pip` 方法相比，安装了更多的包。您可以使用以下命令来计算已安装的库数：
- en: '[PRE36]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'There are a few things to keep in mind here:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有几个需要注意的事项：
- en: '`conda` installs packages from the Anaconda repository, as well as from the
    Anaconda cloud.'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`conda` 从 Anaconda 仓库以及 Anaconda 云安装包。'
- en: '`pip` installs packages from **Python Package Index (PyPI)** repository.'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pip` 从 **Python 包索引（PyPI）** 仓库安装包。'
- en: '`conda` does a very thorough analysis of all the packages it plans to download
    and does a better job when it comes to version conflicts than `pip`.'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`conda` 会对它计划下载的所有包进行非常彻底的分析，并且在处理版本冲突时比 `pip` 做得更好。'
- en: Bootstrapping a file
  id: totrans-208
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 引导文件
- en: The second option is to generate the `requirements.txt` file from an existing
    environment. This is very useful when you are recreating environments for future
    use or when sharing your list of packages and dependencies with others, to ensure
    reproducibility and consistency. Say you worked on a project and installed specific
    libraries and you want to ensure that when you share your code, other users can
    install the same libraries. This is where generating the `requirements.txt` file
    comes in handy. Similarly, the option to export the YAML environment configuration
    file was demonstrated earlier.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个选项是从现有环境中生成 `requirements.txt` 文件。当您为将来的使用重建环境，或与他人共享包和依赖关系列表时，这非常有用，可以确保可重现性和一致性。假设您在一个项目中工作并安装了特定的库，您希望确保在共享代码时，其他用户能够安装相同的库。这时，生成
    `requirements.txt` 文件就显得非常方便。同样，导出 YAML 环境配置文件的选项之前已经展示过。
- en: Let's see how this can be done in both `pip` and `conda`. Keep in mind that
    both methods will export the list of packages that are already installed and their
    current versions.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何在`pip`和`conda`中执行此操作。请记住，两种方法都会导出已经安装的包及其当前版本的列表。
- en: venv and pip freeze
  id: totrans-211
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: venv 和 pip freeze
- en: '`pip freeze` allows you to export all pip-installed libraries in your environment.
    First, activate the `ch1` environment you created earlier with `venv`, then export
    the list of packages to a `requirements.txt` file. The following example is on
    macOS using the Terminal:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '`pip freeze` 允许您导出环境中所有通过 pip 安装的库。首先，激活之前用 `venv` 创建的 `ch1` 环境，然后将包列表导出到 `requirements.txt`
    文件中。以下示例是在 macOS 上使用终端：'
- en: '[PRE37]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Once done, you can run the `deactivate` command.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，您可以运行 `deactivate` 命令。
- en: Conda
  id: totrans-215
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Conda
- en: 'Let''s activate the environment we created earlier with `conda` (the `ch1`
    environment) and export the list of packages:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们激活之前使用 `conda` 创建的环境（`ch1` 环境），并导出已安装的包列表：
- en: '[PRE38]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: There's more…
  id: totrans-218
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 还有更多……
- en: 'When you exported the list of packages installed with `conda`, the `conda_requirements.txt`
    file contained a large list of packages. If you want to export only the packages
    that you explicitly installed (without the additional packages that conda added),
    then you can use the `conda env export` command with the `--from-history` flag:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用 `conda` 导出已安装包的列表时，`conda_requirements.txt` 文件包含了大量的包。如果您只想导出您显式安装的包（而不是
    `conda` 添加的附加包），则可以使用带有 `--from-history` 标志的 `conda env export` 命令：
- en: '[PRE39]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Note that you do not have to activate that environment first, as we have been
    doing so far. Instead, you can add the `-n` or `--name` option to specify the
    name of the environment. Otherwise, it will default to the currently active environment.
    This is what the modified script would look like:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您不必像之前那样先激活环境。相反，您可以添加 `-n` 或 `--name` 选项来指定环境的名称。否则，它将默认为当前激活的环境。这是修改后的脚本示例：
- en: '[PRE40]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: See also
  id: totrans-223
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 另请参见
- en: To find a list of all the available packages from Anaconda, you can visit [https://docs.anaconda.com/anaconda/packages/pkg-docs/](https://docs.anaconda.com/anaconda/packages/pkg-docs/).
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要查找 Anaconda 中所有可用的包，您可以访问 [https://docs.anaconda.com/anaconda/packages/pkg-docs/](https://docs.anaconda.com/anaconda/packages/pkg-docs/)。
- en: To search for packages in the PyPI repository, you can visit [https://pypi.org/](https://pypi.org/).
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要在 PyPI 仓库中搜索包，您可以访问 [https://pypi.org/](https://pypi.org/)。
- en: Installing JupyterLab and JupyterLab extensions
  id: totrans-226
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 JupyterLab 和 JupyterLab 扩展
- en: 'Throughout this book, you can follow along using your favorite Python IDE (for
    example, PyCharm or Spyder) or text editor (for example, Visual Studio Code, Atom,
    or Sublime). There is another option based on the concept of notebooks that allows
    interactive learning through a web interface. More specifically, **Jupyter Notebook**
    or **Jupyter Lab** are the preferred methods for learning, experimenting, and
    following along with the recipes in this book. Interestingly, the name Jupyter
    is derived from the three programming languages: Julia, Python, and R. Alternatively,
    you can use Google''s Colab, or Kaggle Notebooks. For more information, refer
    to the *See also* section from the *Development environment setup* recipe of this
    chapter. If you are not familiar with Jupyter Notebooks, you can get more information
    here: [https://jupyter.org/](https://jupyter.org/).'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，你可以使用自己喜欢的 Python IDE（例如 PyCharm 或 Spyder）或文本编辑器（例如 Visual Studio Code、Atom
    或 Sublime）进行操作。另一种选择是基于笔记本概念的交互式学习，它通过 Web 界面进行。更具体地说，**Jupyter Notebook** 或 **Jupyter
    Lab** 是学习、实验和跟随本书教程的首选方法。有趣的是，Jupyter 这个名字来源于三种编程语言：Julia、Python 和 R。或者，你也可以使用
    Google 的 Colab 或 Kaggle Notebooks。欲了解更多信息，请参考本章 *开发环境设置* 教程中的 *另见* 部分。如果你不熟悉 Jupyter
    Notebooks，可以在这里了解更多信息：[https://jupyter.org/](https://jupyter.org/)。
- en: In this recipe, you will install Jupyter Notebook, JupyterLab, and additional
    JupyterLab extensions.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，你将安装 Jupyter Notebook、JupyterLab 以及额外的 JupyterLab 扩展。
- en: Additionally, you will learn how to install individual packages as opposed to
    the bulk approach we tackled in earlier recipes.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你还将学习如何安装单个软件包，而不是像前面教程中那样采用批量安装方法。
- en: USING CONDA IN FUTURE EXAMPLES
  id: totrans-230
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在后续示例中使用 CONDA
- en: ''
  id: totrans-231
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Moving forward, when a new environment is created, the code will be written
    using **conda**. The previous recipes already covered the two different approaches
    to creating virtual environments (**venv** versus **conda**) and installing packages
    (**pip** versus **conda**), which should allow you to proceed with whichever choice
    you prefer.
  id: totrans-232
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在后续的操作中，当新环境被创建时，代码将使用 **conda** 进行编写。前面的教程已经涵盖了创建虚拟环境的两种不同方法（**venv** 与 **conda**）以及安装软件包的两种方法（**pip**
    与 **conda**），这将允许你根据自己的选择继续操作。
- en: Getting ready
  id: totrans-233
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'We will create a new environment and install the main packages needed for this
    chapter, primarily pandas:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个新环境并安装本章所需的主要软件包，主要是 pandas：
- en: '[PRE41]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'This code creates a new Python 3.9 environment named `timeseries`. The last
    portion of the statement lists the individual packages that you will be installing.
    If the list of packages is large, you should use a `requirements.txt` file instead.
    If there are a handful of packages, then they can be listed individually separated
    by spaces, as follows:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码创建了一个名为 `timeseries` 的新的 Python 3.9 环境。语句的最后部分列出了你将要安装的各个软件包。如果软件包列表较大，建议使用
    `requirements.txt` 文件。如果软件包不多，可以直接用空格分隔列出，如下所示：
- en: '[PRE42]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Once the environment has been created and the packages have been installed,
    go ahead and activate it:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦环境创建完毕并且软件包安装完成，可以继续激活该环境：
- en: '[PRE43]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: How to do it…
  id: totrans-240
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 操作方法……
- en: 'Now that we have created our environment and activated it, let''s install Jupyter:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建并激活了环境，接下来安装 Jupyter：
- en: 'Now that we have activated our environment, we can simply use `conda` `install`
    to install any additional packages that were not included in `conda create`:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经激活了环境，可以使用 `conda` `install` 安装 `conda create` 时未包含的其他软件包：
- en: '[PRE44]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'You can launch your JupyterLab instance by typing the following command:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以通过输入以下命令启动 JupyterLab 实例：
- en: '[PRE45]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Notice that this runs a local web server and launches the JupyterLab interface
    on your default browser, pointing to `localhost:8888/lab`. The following screenshot
    shows a similar screen that you would see in your terminal once you''ve typed
    in the preceding code:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这会运行一个本地 Web 服务器，并在你的默认浏览器中启动 JupyterLab 界面，指向 `localhost:8888/lab`。以下截图展示了你在终端中输入上述代码后看到的类似界面：
- en: '![Figure 1.6: Launching JupyterLab will run a local web server](img/file7.jpg)'
  id: totrans-247
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.6：启动 JupyterLab 将运行本地 Web 服务器](img/file7.jpg)'
- en: 'Figure 1.6: Launching JupyterLab will run a local web server'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.6：启动 JupyterLab 将运行本地 Web 服务器
- en: 'To terminate the web server, press *Ctrl* + *C* twice on your terminal or click
    **Shut Down** from the **File** menu in the Jupyter GUI, as shown in the following
    screenshot:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要终止 Web 服务器，请在终端中按 *Ctrl* + *C* 两次，或者在 Jupyter GUI 中点击 **Shut Down**，如以下截图所示：
- en: '![Figure 1.7: Shutting down the JupyterLab web server](img/file8.jpg)'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图 1.7：关闭 JupyterLab 网络服务器](img/file8.jpg)'
- en: 'Figure 1.7: Shutting down the JupyterLab web server'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 1.7：关闭 JupyterLab 网络服务器
- en: Now, you can safely close your browser.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以安全地关闭浏览器。
- en: 'Notice that in the preceding example, when JupyterLab was initiated, it launched
    on your default browser. If you wish to use a different browser, you can update
    the code like so:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请注意，在前面的例子中，当 JupyterLab 启动时，它是在默认浏览器中启动的。如果你希望使用不同的浏览器，可以像这样更新代码：
- en: '[PRE46]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: In this example, I am specifying that I want it to launch on Chrome as opposed
    to Safari, which is the default on my machine. You can change the value to your
    preferred browser, such as Firefox, Opera, Chrome, and so on.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我指定了我要在 Chrome 上启动，而不是 Safari，这是我机器上的默认浏览器。你可以将值更改为你偏好的浏览器，比如 Firefox、Opera、Chrome
    等。
- en: 'In Windows OS, if the preceding code did not launch Chrome automatically, you
    will need to register the browser type using `webbrowser.register()`. To do so,
    first generate the Jupyter Lab configuration file using the following command:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 操作系统中，如果前面的代码没有自动启动 Chrome，你需要使用`webbrowser.register()`注册浏览器类型。为此，首先使用以下命令生成
    Jupyter Lab 配置文件：
- en: '[PRE47]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Open the `jupyter_lab_config.py` file and add the following on the top:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`jupyter_lab_config.py`文件，并在顶部添加以下内容：
- en: '[PRE48]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Save and close the file. You can rerun `jupyter lab --browser=chrome` and this
    should launch the Chrome browser.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 保存并关闭文件。你可以重新运行`jupyter lab --browser=chrome`，这应该会启动 Chrome 浏览器。
- en: 'If you do not want the system to launch the browser automatically, you can
    do this with the following code:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你不希望系统自动启动浏览器，可以使用以下代码：
- en: '[PRE49]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: The web server will start, and you can open any of your preferred browsers manually
    and just point it to `http://localhost:8888`.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 网络服务器将启动，你可以手动打开任何你偏好的浏览器，并将其指向`http://localhost:8888`。
- en: 'If you are asked for a token, you can copy and paste the URL with the token
    as displayed in the Terminal, which looks like this:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 如果系统要求你输入 token，你可以复制并粘贴终端中显示的带 token 的 URL，格式如下：
- en: '[PRE50]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Lastly, if the default `port 8888` is in use or you wish to change the port,
    then you can add `-p` and specify the port number you desire, as shown in the
    following example. Here, I am instructing the web server to use `port 8890`:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，如果默认的`port 8888`端口正在使用中，或者你希望更改端口号，可以添加`-p`并指定你想要的端口号，如下例所示。在这里，我指示网络服务器使用`port
    8890`：
- en: '[PRE51]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: This will launch Chrome at `localhost:8890/lab`.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动 Chrome 并指向`localhost:8890/lab`。
- en: 'Notice that when JupyterLab launches, you only see one kernel in the **Notebooks**/**Console**
    sections. This is the base Python kernel. The expectation was to see two kernels
    reflecting the two environments we have: the base and the `timeseries` virtual
    environment. Let''s check how many virtual environments we have with this command:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当 JupyterLab 启动时，你只会在**笔记本**/**控制台**部分看到一个内核。这是基础 Python 内核。我们原本预期看到两个内核，分别反映我们拥有的两个环境：基础环境和`timeseries`虚拟环境。让我们使用以下命令检查我们有多少个虚拟环境：
- en: 'The following screenshot shows the JupyterLab interface, with only one kernel.
    This belongs to the base environment:'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下图显示了 JupyterLab 界面，只有一个内核，属于基础环境：
- en: '![Figure 1.8: JupyterLab interface showing only one kernel, which belongs to
    the base environment](img/file9.jpg)'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图 1.8：JupyterLab 界面，只显示一个内核，该内核属于基础环境](img/file9.jpg)'
- en: 'Figure 1.8: JupyterLab interface showing only one kernel, which belongs to
    the base environment'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 1.8：JupyterLab 界面，只显示一个内核，该内核属于基础环境
- en: 'The following screenshot shows the two Python environments:'
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下图显示了两个 Python 环境：
- en: '![Figure 1.9: Showing two Python environments](img/file10.jpg)'
  id: totrans-274
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.9：显示两个 Python 环境](img/file10.jpg)'
- en: 'Figure 1.9: Showing two Python environments'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.9：显示两个 Python 环境
- en: We can see that the timeseries virtual environment is the active one.I
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到 timeseries 虚拟环境是活动的。
- en: 'You will need to install a Jupyter kernel for the new `timeseries` environment.
    First, shut down the web server (though it will still work even if you did not).
    Assuming you are still in the active `timeseries` Python environment, just type
    the following command:'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你需要为新的`timeseries`环境安装 Jupyter 内核。首先，关闭网络服务器（即使没有关闭它也可以继续使用）。假设你仍然处于活动的`timeseries`
    Python 环境中，只需输入以下命令：
- en: '[PRE52]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'We can check the number of kernels available for Jupyter using the following
    command:'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用以下命令检查 Jupyter 可用的内核数量：
- en: '[PRE53]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'The following screenshot shows the `kernelspec` files that were created and
    their location:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了创建的`kernelspec`文件及其位置：
- en: '![Figure 1.10: List of kernels available for Jupyter](img/file11.jpg)'
  id: totrans-282
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.10：Jupyter 可用内核列表](img/file11.jpg)'
- en: 'Figure 1.10: List of kernels available for Jupyter'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.10：Jupyter 可用内核列表
- en: These act as pointers that connect the GUI to the appropriate environment to
    execute our Python code.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 这些作为指针，将 GUI 与适当的环境连接，以执行我们的 Python 代码。
- en: 'Now, you can launch your JupyterLab again and notice the changes:'
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以重新启动 JupyterLab，并注意到变化：
- en: '[PRE54]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The following screen will appear once it has been launched:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 启动后将出现以下屏幕：
- en: '![Figure 1.11: Notice now our Time Series kernel is available in JupyterLab](img/file12.jpg)'
  id: totrans-288
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.11：现在我们的时间序列内核已在 JupyterLab 中可用](img/file12.jpg)'
- en: 'Figure 1.11: Notice now our Time Series kernel is available in JupyterLab'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.11：现在我们的时间序列内核已在 JupyterLab 中可用
- en: How it works…
  id: totrans-290
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: 'When you created the new `timeseries` environment and installed your desired
    packages using `conda install`, it created a new subfolder inside the `envs` folder
    to isolate the environment and packages installed from other environments, including
    the base environment. When executing the `jupyter notebook` or `jupyter lab` command
    from the base environment, it will need to read from a `kernelspec` file (JSON)
    to map to the available kernels in order to make them available. The `kernelspec`
    file can be created using `ipykernel`, like so:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建了新的 `timeseries` 环境并使用 `conda install` 安装所需的包时，它会在 `envs` 文件夹中创建一个新的子文件夹，以隔离该环境及其安装的包与其他环境（包括基础环境）。当从基础环境执行
    `jupyter notebook` 或 `jupyter lab` 命令时，它需要读取 `kernelspec` 文件（JSON），以映射到可用的内核，确保它们可以使用。`kernelspec`
    文件可以通过 `ipykernel` 创建，方法如下：
- en: '[PRE55]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Here, `--name` refers to the environment name and `--display-name` refers to
    the display name in the Jupyter GUI, which can be anything you want. Now, any
    libraries that you install inside the `timeseries` environment can be accessed
    from Jupyter through the kernel (again, think of it as a mapping between the Jupyter
    GUI and the backend Python environment).
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`--name` 是环境名称，`--display-name` 是 Jupyter GUI 中的显示名称，可以是你想要的任何名称。现在，任何你在
    `timeseries` 环境中安装的库都可以通过内核从 Jupyter 访问（再次说明，它是 Jupyter GUI 与后端 Python 环境之间的映射）。
- en: There's more…
  id: totrans-294
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 还有更多……
- en: JupyterLab allows you to install several useful extensions. Some of these extensions
    are created and managed by Jupyter, while others are created by the community.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: JupyterLab 允许你安装多个有用的扩展。这些扩展中有些由 Jupyter 创建和管理，而其他的则由社区创建。
- en: 'You can manage JupyterLab extensions in two ways: through the command line
    using `jupyter labextension install <someExtension>` or through the GUI using
    **Extension Manager**. The following screenshot shows what the Jupyter Extension
    Manager UI looks like:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过两种方式管理 JupyterLab 扩展：通过命令行使用 `jupyter labextension install <someExtension>`
    或通过图形界面使用 **扩展管理器**。以下截图显示了 Jupyter 扩展管理器 UI 的样子：
- en: '![Figure 1.12: Clicking the extension manager icon in JupyterLab](img/file13.jpg)'
  id: totrans-297
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.12：点击 JupyterLab 中的扩展管理器图标](img/file13.jpg)'
- en: 'Figure 1.12: Clicking the extension manager icon in JupyterLab'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.12：点击 JupyterLab 中的扩展管理器图标
- en: Once you click **Enable**, you will see a list of available Jupyter extensions.
    To install an extension, just click on the **Install** button.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你点击 **启用**，你将看到可用的 Jupyter 扩展列表。要安装扩展，只需点击 **安装** 按钮。
- en: 'Some packages will require Node.js and `npm` to be installed first and you
    will see a warning similar to the following:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 一些包需要先安装 Node.js 和 `npm`，你将看到类似以下的警告：
- en: '![Figure 1.13: Extension Installation Error when Node.js and npm are required](img/file14.jpg)'
  id: totrans-301
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.13：当需要 Node.js 和 npm 时，扩展安装错误](img/file14.jpg)'
- en: 'Figure 1.13: Extension Installation Error when Node.js and npm are required'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.13：当需要 Node.js 和 npm 时，扩展安装错误
- en: You can download and install Node.js directly from [https://nodejs.org/en/](https://nodejs.org/en/).
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以直接从 [https://nodejs.org/en/](https://nodejs.org/en/) 下载并安装 Node.js。
- en: 'Alternatively, you can use `conda` to install Node.js by using the following
    command:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，你也可以使用 `conda` 安装 Node.js，方法是使用以下命令：
- en: '[PRE56]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: See also
  id: totrans-306
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 另见
- en: 'To learn more about JupyterLab extensions, please refer to the official documentation
    here: [https://jupyterlab.readthedocs.io/en/stable/user/extensions.html](https://jupyterlab.readthedocs.io/en/stable/user/extensions.html).'
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要了解更多关于 JupyterLab 扩展的信息，请参阅官方文档：[https://jupyterlab.readthedocs.io/en/stable/user/extensions.html](https://jupyterlab.readthedocs.io/en/stable/user/extensions.html)。
- en: 'If you want to learn more about how JupyterLab extensions are created with
    example demos, please refer to the official GitHub repository here: [https://github.com/jupyterlab/extension-examples](https://github.com/jupyterlab/extension-examples).'
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于如何创建 JupyterLab 扩展的示例演示，请参考官方 GitHub 仓库：[https://github.com/jupyterlab/extension-examples](https://github.com/jupyterlab/extension-examples)。
- en: 'In *step 9*, we manually installed the `kernelspec` files, which created the
    mapping between Jupyter and our `conda` environment. This process can be automated
    using `nb_conda`. For more information on the `nb_conda` project, please refer
    to the official GitHub repository here: [https://github.com/Anaconda-Platform/nb_conda](https://github.com/Anaconda-Platform/nb_conda).'
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在*第 9 步*中，我们手动安装了 `kernelspec` 文件，这为 Jupyter 和我们的 `conda` 环境之间创建了映射。这个过程可以通过
    `nb_conda` 自动化。关于 `nb_conda` 项目的更多信息，请参考官方 GitHub 仓库：[https://github.com/Anaconda-Platform/nb_conda](https://github.com/Anaconda-Platform/nb_conda)。
