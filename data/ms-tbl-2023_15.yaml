- en: Integrating Programming Languages
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成编程语言
- en: 'After 14 chapters full of Tableau functionality and exercises, what are we
    still missing? Correct, the one feature that opens a whole new universe of opportunities:
    programming integration! If you need a function that isn’t covered natively by
    Tableau’s calculated fields and you know how to code it, you can fall back on
    programming integrations. To be precise, two languages are supported: R and Python.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在经历了14章关于 Tableau 功能和练习的学习之后，我们还缺少什么？没错，那个能开启全新机会的大功能：编程集成！如果你需要的功能是 Tableau
    计算字段本身没有覆盖的，而且你知道如何编写代码，你可以依赖编程集成。具体来说，支持两种语言：R 和 Python。
- en: 'Imagine the following scenario: you deal with a financial dataset and want
    to add an options pricing formula to your Tableau dashboard. You look up the formula
    and see that you have all the required variables, like strike price, stock price,
    and volatility, but you also need a probability density function, which you can’t
    find in Tableau. In this case, you can fall back to the programming integration
    and run the calculation in R or Python and send back the output—great, isn’t it?
    Now imagine a second scenario: you’re working on a sentiment analysis project.
    You could calculate the sentiment in Python outside of Tableau and then use the
    output as input for your model, but wouldn’t it be great if you could have it
    all in Tableau? Well, you can by using the programming tool integration.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 想象以下场景：你处理的是一个金融数据集，并且希望在 Tableau 仪表板上添加一个期权定价公式。你查找公式时，发现自己有所有必需的变量，比如行使价格、股票价格和波动率，但你还需要一个概率密度函数，而这个在
    Tableau 中找不到。在这种情况下，你可以利用编程集成，在 R 或 Python 中运行计算并返回输出——是不是很棒？现在再想象第二个场景：你正在做一个情感分析项目。你可以在
    Tableau 之外的 Python 中计算情感分析，然后将输出作为模型的输入，但如果你能在 Tableau 中完成这一切岂不更好？当然可以，使用编程工具集成就能实现这一点。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Integrating programming languages
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成编程语言
- en: R installation and integration
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: R 安装与集成
- en: Implementing R functionality
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现 R 功能
- en: Python installation and integration
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 安装与集成
- en: Implementing Python functionality
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现 Python 功能
- en: Integrating programming languages
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成编程语言
- en: How does integration empower Tableau? It happens through calculated fields.
    Tableau dynamically interfaces with Rserve or TabPy to pass values and receive
    results. And Tableau Prep Builder also has R and Python integration as we saw
    in *Chapter 3*, *Using Tableau Prep Builder*! So, let’s not waste any time and
    jump right in.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 集成如何增强 Tableau 功能？这是通过计算字段实现的。Tableau 动态地与 Rserve 或 TabPy 接口，传递值并接收结果。而 Tableau
    Prep Builder 也有 R 和 Python 集成功能，正如我们在*第 3 章*《使用 Tableau Prep Builder》中看到的那样！所以，让我们不浪费时间，直接开始吧。
- en: 'Basic Tableau-to-R and Tableau-to-Python integration is quite simple: the view
    shows data based on a calculated field, with the help of which Tableau pushes
    data to Rserve or TabPy respectively and then retrieves the results via a table
    calculation:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 基本的 Tableau 与 R 及 Tableau 与 Python 集成非常简单：视图通过计算字段显示数据，借助这些计算字段，Tableau 将数据分别推送到
    Rserve 或 TabPy，然后通过表格计算获取结果：
- en: '![](img/B18435_15_01.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18435_15_01.png)'
- en: 'Figure 15.1: Tableau external services'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.1：Tableau 外部服务
- en: Naturally, whether you are viewing a workbook on Tableau Desktop or via Tableau
    Server, if you wish to run R and Python calculations, then Rserve or TabPy must
    be accessible.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 无论是在 Tableau Desktop 上查看工作簿，还是通过 Tableau Server，若你希望运行 R 和 Python 计算，必须确保 Rserve
    或 TabPy 可访问。
- en: 'For a proper understanding of the integration, let’s also look at the Tableau/R
    workflow as an example. The terms used in the following diagram, which you may
    be unfamiliar with, will be explained throughout this chapter:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解集成过程，我们也来看一下 Tableau/R 工作流的示例。以下图中的术语，可能是你不熟悉的，会在本章中逐步解释：
- en: '![](img/B18435_15_02.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18435_15_02.png)'
- en: 'Figure 15.2: Tableau/R workflow'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.2：Tableau/R 工作流
- en: The preceding screenshot can be used likewise for Python. Let’s begin with R
    since it was the first available integration.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的截图同样适用于 Python。我们先从 R 开始，因为它是第一个可用的集成方式。
- en: R installation and integration
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: R 安装与集成
- en: To adequately understand how Tableau and R work together, it’s important to
    grasp the big picture. To facilitate that understanding, we’ll cover high-level
    concepts and information in this section before delving into calculated fields
    and R scripting details.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了充分理解 Tableau 与 R 如何协同工作，重要的是要掌握宏观的概念。为了便于理解，我们将在本节中概述一些高层次的概念和信息，然后再深入计算字段和
    R 脚本的细节。
- en: Installing R is typically not difficult, but it does involve more than simply
    double-clicking on an executable. To successfully connect Tableau with R, you
    will need to make sure that permissions are correctly set and that various components—some
    required and some that are just nice to have—are correctly implemented. We will
    cover the basics, review a couple of the typical challenges faced during installation,
    and provide troubleshooting guidance.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 R 通常不难，但它不仅仅是双击可执行文件那么简单。要成功将 Tableau 与 R 连接，您需要确保权限设置正确，并且各种组件——一些是必需的，一些只是附加的——都已正确实现。我们将涵盖基础内容，回顾一些安装过程中常见的挑战，并提供故障排除指南。
- en: 'Perform the following steps to install R:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤来安装 R：
- en: Download R by visiting [http://www.r-project.org/](http://www.r-project.org/),
    click on the **download R** hyperlink, and choose a CRAN mirror. Note that R works
    best in a Linux or Unix environment; however, to learn R and begin working with
    Tableau/R functionality to complete the exercises in this chapter, installing
    the Windows version is adequate.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 [http://www.r-project.org/](http://www.r-project.org/) 下载 R，点击 **download
    R** 超链接，并选择一个 CRAN 镜像。请注意，R 在 Linux 或 Unix 环境下表现最佳；然而，为了学习 R 并开始使用 Tableau/R 功能完成本章的练习，安装
    Windows 版本就足够了。
- en: Install R by double-clicking on the downloaded executable.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过双击下载的可执行文件安装 R。
- en: Open R.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 R。
- en: Various issues may arise when installing R. For example, you may experience
    problems due to insufficient permissions for the R working directory. This issue
    may first become evident when attempting to install R packages. To rectify the
    problem, determine the working directory in R with the `getwd()` function. Next,
    either change the working directory via `setwd()` or, at the operating system
    level—whichever you feel more comfortable with—set the appropriate read and execute
    permissions for the working directory.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 R 时可能会遇到各种问题。例如，您可能会因为 R 工作目录的权限不足而遇到问题。当尝试安装 R 包时，这个问题可能会首先显现。为了解决这个问题，您可以使用
    `getwd()` 函数确定 R 的工作目录。接下来，可以通过 `setwd()` 更改工作目录，或者在操作系统层面——无论您更倾向于哪个方法——为工作目录设置适当的读取和执行权限。
- en: Issues can also arise due to security system and port configuration problems.
    By default, Tableau will connect to Rserve via port `6311`. Alternatively, within
    Tableau, you can specify a different port when connecting to R.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 问题还可能由于安全系统和端口配置问题而出现。默认情况下，Tableau 将通过端口 `6311` 连接到 Rserve。或者，您可以在 Tableau
    中指定不同的端口来连接 R。
- en: The documentation at [http://www.r-project.org/](http://www.r-project.org/)
    provides detailed information regarding overcoming a variety of installation challenges.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.r-project.org/](http://www.r-project.org/) 上的文档提供了有关解决各种安装问题的详细信息。'
- en: 'Although not required, RStudio Desktop provides a better user interface than
    the default R GUI that installs with R. RStudio includes a console that features
    intelligent code completion (that is, IntelliSense), a workspace browser that
    provides easy access to files, packages, and help, a data viewer, and much more
    all within a single, unified environment:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然不是必须的，但 RStudio Desktop 提供的用户界面比默认安装的 R GUI 更好。RStudio 包含一个控制台，提供智能代码补全（即
    IntelliSense）、一个工作区浏览器，可以方便地访问文件、包和帮助文档，一个数据查看器等等，所有这些都在一个统一的环境中：
- en: '![](img/B18435_15_03.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18435_15_03.png)'
- en: 'Figure 15.3: RStudio'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.3：RStudio
- en: The open-source edition of RStudio is sufficient for many uses. You can download
    the application via [https://posit.co/download/rstudio-desktop/](https://posit.co/download/rstudio-desktop/).
    Just choose for yourself which one you like better out of the Desktop and R GUI
    versions.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: RStudio 的开源版本适用于许多使用场景。您可以通过 [https://posit.co/download/rstudio-desktop/](https://posit.co/download/rstudio-desktop/)
    下载该应用程序。只需根据个人喜好选择 Desktop 版或 R GUI 版。
- en: 'Open R:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 R：
- en: '![](img/B18435_15_04.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18435_15_04.png)'
- en: 'Figure 15.4: R GUI'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.4：R GUI
- en: 'To establish a connection with Tableau, you will need to start Rserve. Technically,
    Rserve is a separate package; however, by default, it is installed with R:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要与 Tableau 建立连接，您需要启动 Rserve。技术上，Rserve 是一个独立的包；然而，它默认与 R 一起安装：
- en: 'To make sure that the Rserve package is installed, within R, enter the following
    command:'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为确保安装了 Rserve 包，在 R 中输入以下命令：
- en: '[PRE0]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Several packages should be listed, including RServe. If for some reason the
    Rserve package did not install with your instance of R, you can do so via:'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应该列出几个包，包括 RServe。如果由于某种原因 Rserve 包没有随您的 R 实例一起安装，您可以通过以下命令进行安装：
- en: '[PRE1]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: To start `Rserve`, enter `library(Rserve); Rserve()`.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要启动`Rserve`，请输入`library(Rserve); Rserve()`。
- en: 'The semicolon (`;`) represents a new line of code in R:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 分号（`;`）表示R中一行新代码的开始：
- en: '![](img/B18435_15_05.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18435_15_05.png)'
- en: 'Figure 15.5: Rserve initialization'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.5：Rserve初始化
- en: 'Now that you have successfully installed R and started Rserve, you are ready
    to connect Tableau to R. Within Tableau, select **Help** | **Settings and Performance**
    | **Manage Analytics Extension Connection…**:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经成功安装了R并启动了Rserve，接下来可以将Tableau连接到R。在Tableau中，选择**帮助** | **设置与性能** | **管理分析扩展连接…**：
- en: '![](img/B18435_15_06.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18435_15_06.png)'
- en: 'Figure 15.6: Analytics Extension'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.6：分析扩展
- en: 'The **Manage Analytics Extensions Connection** screen will open; select **RServe**.
    The default settings in the following screenshot will work for most local installations:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**管理分析扩展连接**屏幕将会打开；选择**RServe**。以下截图中的默认设置适用于大多数本地安装：'
- en: '![](img/B18435_15_07.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18435_15_07.png)'
- en: 'Figure 15.7: Analytics Extensions connection'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.7：分析扩展连接
- en: While integrating Tableau with R doesn’t require any interaction with an R interface,
    you will probably want to try out your R code in a GUI, such as R GUI or RStudio,
    before embedding the code into Tableau. This will allow you to take advantage
    of useful accompanying features relevant to the R language, such as help, examples,
    and sample datasets tailored to R. Note that the calculated field editor in Tableau
    simply acts as a pass-through for R code and does not provide any support.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管将Tableau与R集成并不需要与R界面进行任何交互，但你可能希望在将代码嵌入Tableau之前，在GUI（如R GUI或RStudio）中试用你的R代码。这将使你能够利用R语言相关的有用附加功能，如帮助、示例和为R量身定制的示例数据集。请注意，Tableau中的计算字段编辑器仅作为R代码的传递工具，并不提供任何支持。
- en: Implementing R functionality
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现R功能
- en: 'Now that we have successfully connected Tableau with R, let’s write some code
    in Tableau to invoke R. Within Tableau, open the **Calculated Field Editor**.
    Notice the class of functions beginning with `SCRIPT_`, as shown in the following
    screenshot:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经成功将Tableau与R连接，接下来让我们在Tableau中编写一些代码来调用R。在Tableau中，打开**计算字段编辑器**。注意以`SCRIPT_`开头的函数类，如以下截图所示：
- en: '![](img/B18435_15_08.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18435_15_08.png)'
- en: 'Figure 15.8: SCRIPT_ functions'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.8：SCRIPT_函数
- en: The `SCRIPT_` functions are used by Tableau to invoke R. The function names
    communicate the data type of the returned results; `SCRIPT_REAL` returns float
    values, `SCRIPT_BOOL` returns true or false values, and so forth.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`SCRIPT_`函数由Tableau用于调用R。函数名表示返回结果的数据类型；`SCRIPT_REAL`返回浮动值，`SCRIPT_BOOL`返回真或假值，依此类推。'
- en: 'The syntax of a `SCRIPT_` function is represented in the following diagram:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`SCRIPT_`函数的语法在下图中表示：'
- en: '![](img/B18435_15_09.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18435_15_09.png)'
- en: 'Figure 15.9: R script syntax'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.9：R脚本语法
- en: The preceding example code calculates the average profit, but we will get to
    more examples in the next sections. Let’s start by reproducing Tableau functionality
    using the R integration and hence prove that R is working properly.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的示例代码计算了平均利润，但我们将在接下来的章节中探讨更多示例。首先，通过使用R集成功能再现Tableau功能，从而证明R工作正常。
- en: Reproducing native Tableau functionality in R
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在R中再现原生Tableau功能
- en: For our first exercise, we will use the `AVG`, `MEDIAN`, and `STDEV` functions
    in Tableau and compare the results with the `mean`, `median`, and `sd` R functions.
    This will allow you to practice the `SCRIPT_` functions, begin to understand R
    syntax, and compare the results generated by Tableau with those generated by R.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的第一个练习中，我们将使用Tableau中的`AVG`、`MEDIAN`和`STDEV`函数，并将结果与R中的`mean`、`median`和`sd`函数进行比较。这将帮助你练习`SCRIPT_`函数，开始理解R语法，并比较Tableau生成的结果与R生成的结果。
- en: 'Perform the following steps:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: Navigate to [https://public.tableau.com/profile/marleen.meier/](https://public.tableau.com/profile/marleen.meier/)
    to locate and download the workbook associated with this chapter.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问[https://public.tableau.com/profile/marleen.meier/](https://public.tableau.com/profile/marleen.meier/)来定位并下载与本章相关的工作簿。
- en: Navigate to the `median | mean | sd` worksheet.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`median | mean | sd`工作表。
- en: Select the `Superstore` data source.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`Superstore`数据源。
- en: 'Create the following Tableau-centric calculations:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建以下Tableau中心的计算：
- en: '`Tab Avg`: `WINDOW_AVG(SUM(Sales))`'
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Tab Avg`: `WINDOW_AVG(SUM(Sales))`'
- en: '`Tab Median`: `WINDOW_MEDIAN(SUM(Sales))`'
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Tab Median`: `WINDOW_MEDIAN(SUM(Sales))`'
- en: '`Tab Stdev`: `WINDOW_STDEV(SUM(Sales))`'
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Tab Stdev`: `WINDOW_STDEV(SUM(Sales))`'
- en: Place the **Region** dimension on the **Rows** shelf and **Sales** on the **Text**
    shelf.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 **Region** 维度放到 **行**架上，并将 **Sales** 放到 **文本**架上。
- en: 'Double-click on **Tab Avg**, **Tab Median**, and **Tab Stdev**. They will now
    appear on the **Measures Values** shelf:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击 **Tab Avg**、**Tab Median** 和 **Tab Stdev**。它们将出现在 **度量值**架上：
- en: '![](img/B18435_15_10.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18435_15_10.png)'
- en: 'Figure 15.10: Testing R'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.10：测试 R
- en: Make sure R is installed, connected, and running as per the instructions in
    the *R installation and integration* section.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保 R 已按照 *R 安装与集成* 部分的说明安装、连接并运行。
- en: If you haven’t installed the `Rserve` package yet, type `install.packages("Rserve")`
    into your R interface to install the `Rserve` package.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你还没有安装 `Rserve` 包，可以在 R 界面中输入 `install.packages("Rserve")` 来安装 `Rserve` 包。
- en: 'Next, type `library(Rserve); Rserve()` into the R interface. You may see the
    following error:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在 R 界面中输入 `library(Rserve); Rserve()`。你可能会看到以下错误：
- en: '[PRE2]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this case, type `Rserve(args = "--no-save")`. R requires you to make a choice
    of saving, not saving, or a combination (vanilla) after your session ends (not
    saving is my preferred option but the other two will work too).
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这种情况下，输入 `Rserve(args = "--no-save")`。R 要求你在会话结束时选择保存、不保存或其他组合（默认）。我个人偏好选择不保存，但其他两种选项也可以。
- en: 'Connect R to Tableau as demonstrated in the *R installation and integration*
    section. After you have done so, return to Tableau and click the **Test Connection**
    button to see if it works:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照 *R 安装与集成* 部分的说明，将 R 连接到 Tableau。完成此操作后，返回 Tableau 并点击 **测试连接** 按钮，检查是否连接成功：
- en: '![](img/B18435_15_11.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18435_15_11.png)'
- en: 'Figure 15.11: Testing R connection'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.11：测试 R 连接
- en: Click **OK** to close the windows.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **确定** 关闭窗口。
- en: 'Create the following R-centric calculations in Tableau. Note that R functions
    (such as `mean`) are case-sensitive:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Tableau 中创建以下以 R 为中心的计算。注意，R 函数（如 `mean`）区分大小写：
- en: '`R` `-` `mean`: `SCRIPT_INT("mean(.arg1)", SUM(Sales))`'
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`R` `-` `mean`：`SCRIPT_INT("mean(.arg1)", SUM(Sales))`'
- en: '`R` `-` `median`: `SCRIPT_REAL ("median(.arg1)", SUM(Sales))`'
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`R` `-` `median`：`SCRIPT_REAL ("median(.arg1)", SUM(Sales))`'
- en: '`R` `-` `sd`: `SCRIPT_INT("sd(.arg1)", SUM(Sales))`'
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`R` `-` `sd`：`SCRIPT_INT("sd(.arg1)", SUM(Sales))`'
- en: 'Place each of the R-calculated fields on the **Measure Values** shelf and arrange
    them so that the same types of calculations are next to each other but alternating
    Tableau and R-centric; for example, **Tab Avg** then **R – mean** then **Tab Median**
    then **R – median** and so on. Since `SCRIPT_` functions are categorized as table
    calculations (more on that later), be sure that each instance of the R-calculated
    fields as well as the Tableau-calculated fields use **Compute Using** set to **Table
    (Down)**:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将每个 R 计算字段放到 **度量值**架上，并将它们排列在一起，使得相同类型的计算并排，但 Tableau 和 R 计算交替出现；例如，**Tab Avg**
    然后是 **R – mean**，接着是 **Tab Median**，再是 **R – median**，依此类推。由于 `SCRIPT_` 函数被分类为表格计算（稍后会详细讲解），确保每个
    R 计算字段和 Tableau 计算字段都使用 **Compute Using** 设置为 **Table (Down)**：
- en: '![](img/B18435_15_12.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18435_15_12.png)'
- en: 'Figure 15.12: Tableau versus R output'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.12：Tableau 与 R 输出对比
- en: Observe that the Tableau and R functions show identical results.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意，Tableau 和 R 函数显示的结果是相同的。
- en: Note that `INT` has been replaced with `REAL` in the median calculations, demonstrating
    that, as the names suggest, `SCRIPT_REAL` uses float values and `SCRIPT_INT` uses
    integers. In the case of the median, the `SCRIPT_INT` function results in a rounding
    difference – try it out and see for yourself!
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`INT` 在中位数计算中已被替换为 `REAL`，这表明，正如名称所示，`SCRIPT_REAL` 使用浮动值，而 `SCRIPT_INT` 使用整数。以中位数为例，`SCRIPT_INT`
    函数会导致四舍五入的差异——试试看，自己验证一下！
- en: This was our very first exercise with R integration—easy, right? The purpose
    of this exercise was mainly to show you that the R calculation works and therefore
    we compared three of the same calculations, each one calculated by Tableau as
    well as R. Or in other words, replicating Tableau functionality to prove that
    the R integration works as expected. The next exercise will be something that
    we can’t do with Tableau’s built-in functionality (as of the time of writing).
    We are going to calculate a regression analysis with more than two variables.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们第一次进行 R 集成练习——很简单吧？这次练习的主要目的是向你展示 R 计算的工作原理，因此我们比较了三种相同的计算，每种计算都由 Tableau
    和 R 计算。换句话说，就是复制 Tableau 的功能以验证 R 集成是否按预期工作。下一次练习将是我们不能通过 Tableau 内建功能完成的（截至撰写本文时）。我们将进行一个涉及两个以上变量的回归分析。
- en: Using R for regression calculations
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 R 进行回归计算
- en: Succinctly stated, regression analysis is a technique for estimating variable
    relationships. There are several types of regression analyses, the most popular
    of which is linear regression. As demonstrated in the following screenshot, linear
    regression estimates a line that best fits the data and is a built-in function
    in Tableau.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，回归分析是一种估算变量关系的技术。回归分析有几种类型，其中最常用的是线性回归。如以下截图所示，线性回归估算出最适合数据的线，并且是Tableau中的内置功能。
- en: 'You only need two measures on **Rows** and **Columns** as well as a dimension
    to partition the points in your view. Then, you go to **Analysis** and drag the
    **Trend Line** onto your screen and select **Linear**:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 您只需要在**Rows**和**Columns**上放置两个度量，并且还需要一个维度来划分视图中的点。然后，转到**Analysis**并将**Trend
    Line**拖到屏幕上，选择**Linear**：
- en: '![](img/B18435_15_13.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18435_15_13.png)'
- en: 'Figure 15.13: Scatterplot'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.13：散点图
- en: Notice that this screenshot is from Tableau. You can access it by clicking on
    the **Scatterplot** worksheet in the workbook associated with this chapter. It’s
    a simple scatterplot with trend lines turned on. Trend lines, in Tableau, default
    to linear but also include logarithmic, exponential, and polynomial options, which
    are all examples of regression analysis. By accessing **Worksheet** | **Export**
    | **Data** in a visualization utilizing a trend line, you can generate an **Access**
    database with predictions and residuals for marks on the view. But this is a tedious
    process and does not give a robust, dynamic solution for implementing more vigorous
    uses of linear regression. Using R provides much more flexibility.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这张截图来自Tableau。您可以通过点击与本章相关的工作簿中的**Scatterplot**工作表来访问它。这是一个简单的散点图，已启用趋势线。在Tableau中，趋势线默认为线性，但也包括对数、指数和多项式选项，这些都是回归分析的示例。通过在使用趋势线的可视化中访问**Worksheet**
    | **Export** | **Data**，您可以生成一个带有预测值和残差的**Access**数据库。但是这是一个繁琐的过程，不能为更强大的线性回归应用提供一个稳健的动态解决方案。使用R语言可以提供更多的灵活性。
- en: 'Linear regression may use single or multiple variables. Single-variable equations
    are great for learning, but multiple-variable equations are typically necessary
    for real-world applications. The following exercise includes multiple-variable
    equations. Our goal for this exercise is to determine how closely a linear regression
    model of **Profit** fits `COUNT(Quantity)`, `SUM(Sales)`, and `AVG(Discount)`:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 线性回归可以使用单个或多个变量。单变量方程适合学习，但在实际应用中通常需要多变量方程。以下练习包含了多变量方程。我们本次练习的目标是确定线性回归模型如何拟合`COUNT(Quantity)`、`SUM(Sales)`和`AVG(Discount)`这几个变量：
- en: Navigate to the `Regression` worksheet.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到`Regression`工作表。
- en: Select the `Superstore` data source.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`Superstore`数据源。
- en: 'Build the basic layout by placing **Profit** on the **Columns** shelf and **State**
    on the **Rows** shelf and filtering to **Top 10** by **Sum** of **Profit** by
    placing **State** on the **Filters** shelf as well:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将**Profit**放置在**Columns**架上，将**State**放置在**Rows**架上，并通过将**State**放置在**Filters**架上来过滤**Profit**的**Top
    10**，构建基本布局：
- en: '![](img/B18435_15_14.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18435_15_14.png)'
- en: 'Figure 15.14: Filter top 10'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.14：筛选前10名
- en: 'Create a calculated field entitled `Profit_Expected` utilizing the following
    code:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Profit_Expected`的计算字段，使用以下代码：
- en: '[PRE3]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The details of this function will be explained shortly.
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该功能的详细信息将在稍后解释。
- en: 'Create a calculated field entitled `% Diff` that calculates the percent difference
    between `SUM`(`Profit`) and `Profit_Expected`:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`% Diff`的计算字段，用于计算`SUM`(`Profit`)和`Profit_Expected`之间的百分比差异：
- en: '[PRE4]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Create a calculated field entitled `Profit_Expected (residuals)` to return
    the difference between `SUM`**(**`Profit`**)** and `Profit_Expected` in terms
    of dollars:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Profit_Expected (residuals)`的计算字段，返回`SUM`(`Profit`)和`Profit_Expected`之间的美元差异：
- en: '[PRE5]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Place **Profit_Expected** on the **Columns** shelf, next to **Profit**. Then,
    click on either one and enable **Dual Axis**.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**Profit_Expected**放置在**Columns**架上，紧挨着**Profit**。然后，点击任意一个并启用**双轴**。
- en: Right-click on one axis and select **Synchronize Axis**.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击一个轴并选择**同步轴**。
- en: In the **SUM(Profit)** section on the **Marks** card, move **% Diff** onto the
    **Color** shelf. Select the **Red-Black Diverging** palette as well as `2` **Steps**
    in **Stepped Color**. This way, all positive values will be black and all negative
    ones red. Make sure that **Bar** is selected as the view type.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Marks**卡片的**SUM(Profit)**部分，将`% Diff`移到**Color**架上。选择**红黑渐变**色板，并将**Stepped
    Color**的**Steps**设置为`2`。这样，所有正值将显示为黑色，所有负值将显示为红色。确保选择**Bar**作为视图类型。
- en: '![](img/B18435_15_15.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18435_15_15.png)'
- en: 'Figure 15.15: Color coding'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.15：颜色编码
- en: From the menu, select **Analysis** | **Stack Marks** | **Off**.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从菜单中选择 **Analysis** | **Stack Marks** | **Off**。
- en: In the **Profit_Expected** section on the **Marks** card, move **Profit_Expected
    (residuals)**, **% Diff**, and **Profit_Expected** to the **Label** shelf. Make
    sure that **Gantt Bar** is selected as the view type.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Marks** 卡片上的 **Profit_Expected** 部分，将 **Profit_Expected (residuals)**、**%
    Diff** 和 **Profit_Expected** 移动到 **Label** 货架上。确保选择 **Gantt Bar** 作为视图类型。
- en: 'Double-check that all table calculations (indicated by the triangle sign: **Profit_Expected
    (residuals)**, **% Diff**, and **Profit_Expected**) are using **State** for the
    computation:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仔细检查所有的表格计算（由三角形符号表示：**Profit_Expected (residuals)**、**% Diff** 和 **Profit_Expected**）是否使用
    **State** 进行计算：
- en: '![](img/B18435_15_16.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18435_15_16.png)'
- en: 'Figure 15.16: Compute using'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.16：计算使用
- en: 'Click on **Label** and the three dots in the **Text** section and edit the
    label to your liking:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **Label**，然后在 **Text** 部分的三个点上点击并编辑标签，按照自己的喜好调整：
- en: '![](img/B18435_15_17.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18435_15_17.png)'
- en: 'Figure 15.17: Expected profits'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.17：预期利润
- en: 'Adjust the size of the **Bar** and **Gantt Bar** as desired and observe the
    results:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 根据需要调整 **Bar** 和 **Gantt Bar** 的大小，并观察结果：
- en: '![](img/B18435_15_18.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18435_15_18.png)'
- en: 'Figure 15.18: Regression'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.18：回归分析
- en: The visualization in *Figure 15.18* shows a comparison of the actual profit,
    the expected profit, and the difference between the two. This calculation is especially
    helpful in retail markets but also in financial planning for any company.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 15.18* 中的可视化显示了实际利润、预期利润和两者之间差异的比较。这个计算在零售市场尤其有用，但在任何公司的财务规划中也同样重要。'
- en: 'Now that we’ve completed the exercise, let’s take a moment to consider some
    of the code we used in this exercise:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了练习，让我们花一点时间考虑一下我们在这个练习中使用的一些代码：
- en: '| `SCRIPT_REAL` | This Tableau function calls the R engine and returns a float
    value. |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| `SCRIPT_REAL` | 这个 Tableau 函数调用 R 引擎并返回一个浮动值。 |'
- en: '| `"x <- lm(.arg1 ~ .arg2 +.arg3+.arg4); x$residuals"` | This is an R expression
    that houses a variable, a function, and an argument, and then returns predicted
    values. |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| `"x <- lm(.arg1 ~ .arg2 +.arg3+.arg4); x$residuals"` | 这是一个 R 表达式，包含一个变量、一个函数和一个参数，然后返回预测值。
    |'
- en: '| `x <-` | This is the variable to be populated by the subsequent R function.
    |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| `x <-` | 这是一个变量，用于后续 R 函数的填充。 |'
- en: '| `lm(.arg1 ~ .arg2 + .arg3 +.arg4)` | This R function is used to fit linear
    models. It can be used to return regression based on variables provided by the
    argument.The information in the parentheses is called an argument and is used
    to fit the model. Specifically, the response is to the left of the tilde (`~`),
    and the model is to the right. Thus, this is a multi-variable linear regression
    where `.arg1 =` `SUM(Profit)`, `.arg2 = COUNT(Quantity)`, `.arg3 = SUM(Sales)`,
    and `.arg4 = AVG(Discount)`. In English, the argument could be read as `SUM(Profit)`,
    and is modeled as the combined terms of `COUNT(Quantity)`, `SUM(Sales)`, and `AVG(Discount)`.
    |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| `lm(.arg1 ~ .arg2 + .arg3 +.arg4)` | 这个 R 函数用于拟合线性模型。它可以根据参数提供的变量返回回归分析。括号中的内容被称为参数，用于拟合模型。具体而言，响应值在波浪符号（`~`）的左侧，模型在右侧。因此，这是一个多变量线性回归，其中
    `.arg1 =` `SUM(Profit)`、`.arg2 = COUNT(Quantity)`、`.arg3 = SUM(Sales)` 和 `.arg4
    = AVG(Discount)`。用英文描述，参数可以读作 `SUM(Profit)`，它被建模为 `COUNT(Quantity)`、`SUM(Sales)`
    和 `AVG(Discount)` 的组合项。 |'
- en: '| `x$fitted` | The `lm` function returns many values as part of its model object,
    including coefficients, residuals, rank, and fitted values. `x$fitted` is referencing
    the fitted values generated as a result of passing data to the model. |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| `x$fitted` | `lm` 函数返回许多值作为其模型对象的一部分，包括系数、残差、秩和拟合值。`x$fitted` 引用的是作为传递数据到模型结果的拟合值。
    |'
- en: '| `", SUM(Profit), COUNT(Quantity), SUM(Sales) , AVG(Discount))` | These are
    the parameters used to populate the `.arg#` variables. Note that the double-quote
    (`"`) designates the end of the code passed to R, and the comma (`,`) designates
    the second half of the Tableau function, that is, the expression. |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| `", SUM(Profit), COUNT(Quantity), SUM(Sales) , AVG(Discount))` | 这些是用于填充
    `.arg#` 变量的参数。请注意，双引号（`"`) 表示传递给 R 的代码的结束，而逗号（`,`）表示 Tableau 函数的第二部分，也就是表达式。 |'
- en: After having successfully implemented the regression, we will now investigate
    a different statistical method that is often used to differentiate between subsets
    within a dataset, called clustering.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 成功实现回归之后，我们将探讨一种不同的统计方法，通常用于区分数据集中的子集，称为聚类。
- en: Clustering in Tableau using R
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 R 在 Tableau 中进行聚类
- en: Clustering is used to select smaller subsets of data with members sharing similar
    characteristics from a larger dataset. As an example, consider a marketing scenario.
    You have a large customer base to which you plan to send advertising material;
    however, cost prohibits you from sending material to every customer. Clustering
    the dataset will return groupings of customers with similar characteristics. You
    can then survey the results and choose a target group.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 聚类用于从较大的数据集中选择具有相似特征的成员组成的小子集。例如，考虑一个市场营销场景。你有一个庞大的客户群，计划向他们发送广告材料；然而，成本限制使你无法向每个客户发送材料。对数据集进行聚类将返回具有相似特征的客户组。然后，你可以调查这些结果并选择一个目标群体。
- en: Major methods for clustering include hierarchical and *k*-means. Hierarchical
    clustering is more thorough and thus more time-consuming. It generates a series
    of models that range from *1*, which includes all data points, to *n*, where each
    data point is an individual model. *k*-means clustering is a quicker method in
    which the user or another function defines the number of clusters. For example,
    a user may choose to create four clusters from a dataset of a thousand members.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 主要的聚类方法包括层次聚类和 *k*-均值聚类。层次聚类更为彻底，因此时间消耗也更多。它生成一系列模型，从 *1*（包含所有数据点）到 *n*（每个数据点是一个独立模型）。*k*-均值聚类是一种更快的方法，用户或其他函数定义聚类的数量。例如，用户可以选择从包含一千个成员的数据集中创建四个聚类。
- en: 'Clustering capabilities are included with Tableau. You can find this functionality
    under the **Analytics** tab. The clustering implementation in Tableau is based
    on four pillars:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: Tableau 包含聚类功能。你可以在 **分析** 标签下找到此功能。Tableau 中的聚类实现基于四个支柱：
- en: Solid methodology
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 严谨的方法论
- en: Repeatable results
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可重复的结果
- en: A quick processing time
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快速处理时间
- en: Ease of use
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 易于使用
- en: Be sure to check out more details here ([https://help.tableau.com/current/pro/desktop/en-us/clustering.htm](https://help.tableau.com/current/pro/desktop/en-us/clustering.htm))
    and the tab **Clustering (Tableau native)** in the accompanying solutions workbook.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 一定要查看更多细节（[https://help.tableau.com/current/pro/desktop/en-us/clustering.htm](https://help.tableau.com/current/pro/desktop/en-us/clustering.htm)）以及随附解决方案工作簿中的
    **聚类（Tableau 原生）** 标签。
- en: There are numerous ways the Tableau development team could have approached clustering.
    R, for instance, provides many different clustering packages that use different
    approaches. A Tableau author may have good reason to choose one of these different
    approaches. For example, clustering results are always identical when using the
    native Tableau clustering capabilities. But they do not have to be. By using R
    for clustering, the underlying data and the view may remain unchanged, yet clustering
    could differ with each refresh because the function will stop at the best result
    (local minimum) before it has seen the whole dataset. The trade-off between using
    a so-called local minimum versus a global minimum for performance has been proven
    to be worth it. But depending on the order of numbers, the local minimum can differ
    each time you run the function. This could be advantageous to you if looking for
    edge cases where marks may switch between clusters. The following example explores
    such a case.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: Tableau 开发团队有多种方式可以处理聚类。例如，R 提供了许多不同的聚类包，采用不同的方法。Tableau 作者可能有充分的理由选择这些不同的方法。例如，使用
    Tableau 原生聚类功能时，聚类结果始终相同。但并不一定非得如此。通过使用 R 进行聚类，底层数据和视图可能保持不变，但每次刷新时聚类结果可能不同，因为该函数会在看到整个数据集之前停留在最佳结果（局部最小值）处。使用所谓的局部最小值与全局最小值之间的性能权衡已经被证明是值得的。但根据数字的顺序，局部最小值每次运行函数时可能会有所不同。如果你正在寻找标记可能在不同聚类之间切换的边缘情况，这可能对你有利。以下示例探讨了这种情况。
- en: 'Our goal in this exercise is to create four clusters out of the countries of
    the world based on birth rate and infant mortality rate:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 本次练习的目标是基于出生率和婴儿死亡率将世界各国分为四个聚类：
- en: Navigate to the `Cluster (R)` worksheet.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 `Cluster (R)` 工作表。
- en: Select the `World Indicators` data source (this dataset ships with Tableau and
    can be found under **Saved Data Sources**).
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 `World Indicators` 数据源（此数据集随 Tableau 一起提供，可以在 **已保存的数据源** 下找到）。
- en: Build the initial view by placing **Infant Mortality Rate** on the **Columns**
    shelf, **Birth Rate** on the **Rows** shelf, and **Country/Region** on the **Details**
    shelf.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将 **婴儿死亡率** 放置在 **列** 区域，**出生率** 放置在 **行** 区域，**国家/地区** 放置在 **详细信息** 区域来构建初始视图。
- en: 'Right-click on each axis and select **Logarithmic** and deselect **Include
    Zero**. This will spread the data points more uniformly and will help make the
    visualization more aesthetically pleasing and easier to read:'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 右键点击每个轴并选择**Logarithmic**，取消选中**Include Zero**。这将使数据点更加均匀地分布，并有助于使可视化效果更加美观且易于阅读：
- en: '![](img/B18435_15_19.png)'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](img/B18435_15_19.png)'
- en: 'Figure 15.19: Clustering'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 15.19：聚类
- en: 'Create a calculated field named `Cluster` with the following code:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Cluster`的计算字段，代码如下：
- en: '[PRE6]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The details of this code will be explained at the end of this exercise.
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这段代码的详细解释将在本练习结束时进行。
- en: 'Drag the **Cluster** field you just created to the **Detail** and the **Color**
    shelves. Note that the Rserve engine throws an error:'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将你刚刚创建的**Cluster**字段拖动到**Detail**和**Color**架上。请注意，Rserve引擎会抛出一个错误：
- en: '![](img/B18435_15_20.png)'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](img/B18435_15_20.png)'
- en: 'Figure 15.20: Error handling'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 15.20：错误处理
- en: This is because nulls exist in the underlying dataset. For example, the data
    does not include the **Infant Mortality Rate** for *Puerto Rico*.
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是因为底层数据集中存在空值。例如，数据中没有*Puerto Rico*的**Infant Mortality Rate**。
- en: If you encounter this error with other measures, the same solution applies.
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你在其他度量中遇到此错误，解决方案是相同的。
- en: 'To rectify the error, drag an instance of **Infant** **Mortality Rate** onto
    the **Filters** shelf. Within the **Filter** dialog box, select the values as
    shown to remove all values below `0.01`:'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了纠正错误，将**Infant Mortality Rate**字段拖动到**Filters**架上。在**Filter**对话框中，选择如下值以去除所有小于`0.01`的值：
- en: '![Graphical user interface, application'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图形用户界面，应用程序'
- en: Description automatically generated](img/B18435_15_21.png)
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自动生成的描述](img/B18435_15_21.png)
- en: 'Figure 15.21: Filter'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 15.21：过滤器
- en: 'Make sure that you set **Cluster** to **Discrete** and **Compute Using** |
    **Country/Region** to avoid another error: *error in k-means (m, 4, nstart = 5):
    more cluster centers than distinct data points*.'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '确保将**Cluster**设置为**Discrete**并将**Compute Using** | **Country/Region**设置为避免另一个错误：*error
    in k-means (m, 4, nstart = 5): more cluster centers than distinct data points*。'
- en: 'The resulting view should look like the following screenshot:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 结果视图应如下图所示：
- en: '![Chart, scatter chart'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '![图表，散点图'
- en: Description automatically generated](img/B18435_15_22.png)
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 自动生成的描述](img/B18435_15_22.png)
- en: 'Figure 15.22: Clustering'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.22：聚类
- en: Press *F5* and observe that the clustering changes with each refresh.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下*F5*并观察每次刷新时聚类的变化。
- en: 'Now that we’ve completed the exercise, let’s take a moment to consider some
    of the code we saw:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了练习，花点时间回顾一下我们看到的一些代码：
- en: '| `SCRIPT_REAL` | This Tableau functions calls the R engine and returns a float
    value. |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| `SCRIPT_REAL` | 这个Tableau函数调用R引擎并返回一个浮动值。 |'
- en: '| `"m <- cbind(.arg1, .arg2); kmeans(m,4,nstart=1)$cluster"` | This is the
    R expression that houses a variable, a function, and an argument, and then returns
    clusters. |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| `"m <- cbind(.arg1, .arg2); kmeans(m,4,nstart=1)$cluster"` | 这是包含一个变量、一个函数和一个参数的R表达式，然后返回聚类结果。
    |'
- en: '| `m <-` | This is the variable to be populated by the subsequent R function.
    |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| `m <-` | 这是一个变量，后续的R函数将填充该变量。 |'
- en: '| `cbind` | This R function combines the following `.arg#` variables into columns.
    |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| `cbind` | 这个R函数将以下`.arg#`变量合并为列。 |'
- en: '| `(.arg1, .arg2)` | The variables within the parentheses are referred to as
    an argument. Each variable contains vector information. Specifically, `.arg1 =
    AVG( [Infant Mortality Rate] )` and `.arg2 = AVG([Birth Rate])`. |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| `(.arg1, .arg2)` | 括号中的变量被称为参数。每个变量包含向量信息。具体来说，`.arg1 = AVG( [Infant Mortality
    Rate] )`和`.arg2 = AVG([Birth Rate])`。 |'
- en: '| `kmeans(m,4,nstart=1)$cluster"` | `kmeans` declares the method of clustering.
    `m` contains the vector created by the `cbind` argument. The `4` integer declares
    the number of clusters. `nstart` declares the number of random sets. |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| `kmeans(m,4,nstart=1)$cluster"` | `kmeans`声明了聚类方法。`m`包含由`cbind`参数创建的向量。`4`是指定的聚类数量。`nstart`声明了随机集的数量。
    |'
- en: '| `", AVG( [Infant Mortality Rate] ), AVG([Birth Rate]))` | These are the parameters
    used to populate the `.arg#` variables. Note that the double-quote (`"`) designates
    the end of the code passed to R, and the comma (`,`) designates the second half
    of the Tableau function, that is, the expression. |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| `", AVG( [Infant Mortality Rate] ), AVG([Birth Rate]))` | 这些是用于填充`.arg#`变量的参数。请注意，双引号（`"`）标志着传递给R的代码的结束，而逗号（`,`）标志着Tableau函数的第二部分，即表达式。
    |'
- en: What did we achieve? Well, we were able to categorize the countries in our dataset
    into four subgroups, based on life expectancy. We show the results of the clustering
    on a scatterplot with the two measures, infant mortality, and birth rate. This
    way, we can indirectly analyze four measures at the same time, which in this case
    are **Infant Mortality Rate**, **Birth Rate**, **Country/Region**, and **Life
    Expectancy**. The R clustering is based on a *k*-means approach, which differs
    from the Tableau default clustering and can be adjusted to any approach that it
    is possible to execute in R.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 我们达成了什么目标？我们成功地根据寿命预期将数据集中的国家分为四个子组。我们在散点图中展示了基于两个度量：婴儿死亡率和出生率的聚类结果。通过这种方式，我们可以间接地同时分析四个度量，在本例中为**婴儿死亡率**、**出生率**、**国家/地区**和**寿命预期**。R的聚类基于*k*-均值方法，这与Tableau默认的聚类方法不同，可以调整为在R中执行的任何方法。
- en: Next, we are going to check out the world of quantiles.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将探索分位数的世界。
- en: Introducing quantiles
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 引入分位数
- en: Quantiles are often considered synonymous with quartiles. They are not. Quantiles
    are the sets that make up an evenly divided population of values. A quartile is
    a type of quantile—as is a quintile, a tercile, and a decile, for example. To
    understand how quantiles evenly divide a population of values, imagine multiplying
    a population by 1/4, 2/4, 3/4, and 4/4, and you get 4 quartiles. To get quintiles,
    you multiply the population by 1/5, 2/5, 3/5, 4/5, 5/5, and so forth.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 分位数通常被认为与四分位数同义，但它们并不相同。分位数是将一组值均匀分割的集合。四分位数是分位数的一种类型—比如五分位数、三分位数和十分位数也是如此。为了理解分位数如何均匀地划分值的分布，想象一下将一组数据乘以1/4、2/4、3/4、4/4，你就得到了4个四分位数。为了得到五分位数，你将数据乘以1/5、2/5、3/5、4/5、5/5，以此类推。
- en: 'Tableau allows you to view quantiles by right-clicking on an axis and choosing
    **Add Reference Line** | **Distribution** | **Computation** | **Quantiles**:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: Tableau允许你通过右键点击一个坐标轴并选择**添加参考线** | **分布** | **计算** | **分位数**来查看分位数：
- en: '![](img/B18435_15_23.png)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18435_15_23.png)'
- en: 'Figure 15.23: Terciles'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.23：三分位数
- en: But you can also change the number of tiles to 4, 5, or any other number to
    create quartiles, quintiles, and so on. The functionality of quantiles thus accessed,
    however, is quite limited. Primarily, this is because reference lines do not generate
    measures that can be placed on shelves. This limits the visualization options.
    Generating quantiles via R greatly expands those options.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 但是你也可以将分位数的数量改为4、5或其他任何数字，以创建四分位数、五分位数等。通过这种方式访问的分位数功能相当有限。主要是因为参考线不会生成可以放置到架上的度量。这限制了可视化选项。通过R生成分位数可以大大扩展这些选项。
- en: Our goal for this exercise is to create *n* quantiles through R to view the
    customer distribution by sales. We will further expand the exercise by creating
    parameters that restrict the number of members in the total dataset to a given
    percentile range. Finally, we will fine-tune the visualization by adding jittering.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 本次练习的目标是通过R创建*n*个分位数，按销售额查看客户分布。我们将通过创建限制数据集成员数的参数来进一步扩展练习，限制在给定的百分位数范围内。最后，我们将通过添加抖动来微调可视化效果。
- en: 'Let’s have a look at the following steps:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下接下来的步骤：
- en: Navigate to the `Quantiles` worksheet.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到`Quantiles`工作表。
- en: Select the `Superstore` data source.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`Superstore`数据源。
- en: Change the view type to **Shape** on the **Marks**card.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将视图类型更改为**形状**，在**标记**卡片上。
- en: 'Drag **Sales** to the **Rows** shelf, **Customer Name** to the **Details**
    shelf, and **Region** to the **Color** shelf:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**销售额**拖动到**行**架上，将**客户姓名**拖动到**详细信息**架上，将**地区**拖动到**颜色**架上：
- en: '![](img/B18435_15_24.png)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18435_15_24.png)'
- en: 'Figure 15.24: Quantiles'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.24：分位数
- en: 'Create and display a parameter entitled `Number of quantiles` with the following
    settings:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建并显示一个名为`Number of quantiles`的参数，设置如下：
- en: '![](img/B18435_15_25.png)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18435_15_25.png)'
- en: 'Figure 15.25: Quantile parameter'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.25：分位数参数
- en: Right-click on the created parameter and select **Show Parameter**.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击已创建的参数并选择**显示参数**。
- en: 'Create a calculated field entitled `Quantiles` with the following code:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Quantiles`的计算字段，并使用以下代码：
- en: '[PRE7]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The details of this code will be explained at the end of this exercise.
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这段代码的详细解释将在本练习结束时给出。
- en: Right-click on the newly created calculated field `Quantiles` and select **Convert**
    **to Discrete**.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击新创建的计算字段`Quantiles`并选择**转换为离散**。
- en: 'Create and display two parameters, **Select Percentile Bottom Range** and **Select
    Percentile Top Range**. Use the following settings for both:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建并显示两个参数，**选择百分位数下限范围**和**选择百分位数上限范围**。对这两个参数使用以下设置：
- en: '![](img/B18435_15_26.png)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18435_15_26.png)'
- en: 'Figure 15.26: Percentile parameter'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.26：百分位数参数
- en: Right-click on both newly created parameters and select **Show Parameter**.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击新创建的两个参数，并选择**显示参数**。
- en: 'Create a calculated field entitled `Percentile` with the following code:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Percentile`的计算字段，使用以下代码：
- en: '[PRE8]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Drag **Quantiles** to the **Columns** shelf and set **Compute Using** to **Customer
    Name**.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**分位数**拖到**列**架上，并将**计算方式**设置为**客户名称**。
- en: Drag **Percentile** to the **Filters** shelf, click **OK**, then set **Compute
    Using** to **Customer Name**. Open the filter again and select the value **True**.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**百分位数**拖到**过滤器**架上，点击**确定**，然后将**计算方式**设置为**客户名称**。再次打开过滤器并选择**True**值。
- en: So, let’s recapture what we have done so far. We plotted the sales values per
    region, then we added an R script that creates quantiles out of the sales dot
    cloud. We also created a parameter that lets us select how many quantiles we want
    to see in the view since we learned that quantiles don’t always have to be quartiles
    but could also be terciles or quintiles, or more.
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 那么，回顾一下我们到目前为止做的工作。我们绘制了每个地区的销售值，然后添加了一个R脚本，将销售点云分成分位数。我们还创建了一个参数，让我们可以选择在视图中显示多少个分位数，因为我们了解到，分位数不一定非得是四分位数，它们也可以是三分位数、五分位数，甚至更多。
- en: Next up we will see this view in action, and we will add jittering.
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 接下来我们将看到这个视图的实际效果，并且我们会加入抖动效果。
- en: You may wish to add these additional steps to further enhance the visualization.
    To utilize jittering, create an index calculated field, `Index()`, and place that
    field on the **Columns** shelf. Set **Compute Using** to **Customer Name**. Be
    sure to deselect **Show Header** so **Index** does not display in the view.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可能希望添加以下这些额外的步骤来进一步增强可视化效果。为了使用抖动效果，创建一个索引计算字段`Index()`，并将该字段放置到**列**架上。将**计算方式**设置为**客户名称**。确保取消选择**显示标题**，以免**索引**显示在视图中。
- en: 'Right-click on each axis and select **Logarithmic** and deselect **Include
    Zero**. You should see the following on your screen:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击每个坐标轴并选择**对数**，然后取消选择**包含零**。你应该会在屏幕上看到如下效果：
- en: '![](img/B18435_15_27.png)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18435_15_27.png)'
- en: 'Figure 15.27: Quantiles dashboard'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.27：分位数仪表板
- en: In the preceding figure, you can see that we decided to show four quantiles
    (utilizing the **Number of quantiles** parameter), which as such are called quartiles.
    By adding the `Index()` function to columns, we were able to divide the quantiles
    into each of the four components. One conclusion from this dashboard could be
    that, in each of the four quantiles, the West region has the highest sales figures,
    and the South region has the lowest. However, the Central and South regions come
    remarkably close to each other in the third quantile. Based on this information,
    we could do some further analysis on what is going on in those regions specifically
    and why the Central region’s sales decreased in that quantile compared to the
    other regions.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图中，我们可以看到我们决定显示四个分位数（利用**分位数数量**参数），因此这些被称为四分位数。通过将`Index()`函数添加到列上，我们能够将这些分位数划分为四个部分。从这个仪表板得出的一个结论是，在这四个分位数中，西部地区的销售额最高，而南部地区的销售额最低。然而，中央和南部地区在第三分位数中非常接近。基于这些信息，我们可以进一步分析这些地区发生了什么，以及为什么中央地区的销售额在这一分位数中相比其他地区有所下降。
- en: 'Now that we’ve completed the exercise, let’s take a moment to consider some
    of the code we looked at in this exercise:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了练习，先花一点时间回顾一下我们在这个练习中看到的一些代码：
- en: '| `SCRIPT_REAL` | This Tableau function calls the R engine and returns a float
    value. |'
  id: totrans-221
  prefs: []
  type: TYPE_TB
  zh: '| `SCRIPT_REAL` | 这个Tableau函数调用R引擎并返回一个浮动值。 |'
- en: '| `x <- .arg1;` | `x` is the variable on which we’ll create quantiles. The
    variable, in this case, is `[Sales]`. |'
  id: totrans-222
  prefs: []
  type: TYPE_TB
  zh: '| `x <- .arg1;` | `x` 是我们将要创建分位数的变量。这里的变量是`[销售]`。 |'
- en: '| `y <- .arg2[1];` | This variable sets the quantile count. `[1]` forces a
    single number to be set and not a vector. |'
  id: totrans-223
  prefs: []
  type: TYPE_TB
  zh: '| `y <- .arg2[1];` | 这个变量设置分位数的数量。`[1]` 强制设置为单一数字，而不是向量。 |'
- en: '| `m <- c(1:y)/y;` | `m` distributes probabilities evenly from `1:y`. |'
  id: totrans-224
  prefs: []
  type: TYPE_TB
  zh: '| `m <- c(1:y)/y;` | `m` 将概率均匀分布在`1:y`之间。 |'
- en: '| `n <- length(x);` | This sets the size of the loops. The loops are discussed
    below. |'
  id: totrans-225
  prefs: []
  type: TYPE_TB
  zh: '| `n <- length(x);` | 这设置了循环的大小。循环的相关内容将在下文讨论。 |'
- en: '| `z <- c(1:n); for (i in c(1:n)) z[i] = 0;` | `z` sets the initial response
    vector by setting everything to 0. |'
  id: totrans-226
  prefs: []
  type: TYPE_TB
  zh: '| `z <- c(1:n); for (i in c(1:n)) z[i] = 0;` | `z` 设置了初始响应向量，将所有元素初始化为 0。 |'
- en: '| `for (j in c(1:y)) for (i in c(1:n)) z[i] = if (x[i] <= quantile(x,m)[j]
    && z[i] == 0 ) j else z[i];` | For each quantile, we go through the `z` vector,
    and for each entry, we test whether the value of `x` is less than the upper limit
    of that quantile. If `x` has previously been set, we leave it. Otherwise, `z[i]`
    = that quantile (`j`). |'
  id: totrans-227
  prefs: []
  type: TYPE_TB
  zh: '| `for (j in c(1:y)) for (i in c(1:n)) z[i] = if (x[i] <= quantile(x,m)[j]
    && z[i] == 0 ) j else z[i];` | 对于每个分位数，我们遍历 `z` 向量，对于每个条目，我们测试 `x` 的值是否小于该分位数的上限。如果
    `x` 已经被设置，我们就保持不变。否则，`z[i]` 就是该分位数（`j`）。 |'
- en: In this exercise, you saw that by using R, a Tableau default functionality such
    as clustering can be extended and will give your dashboard users more freedom
    to answer new questions that come up while using the dashboard because it will
    be possible for them to change, for example, parameters and see the visualization
    changing. Now that we’ve learned about a few possible R use cases, it is time
    to discuss something worth your attention, the performance challenges that come
    along with using programming integrations with Tableau.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在本练习中，你看到通过使用 R，像聚类这样的 Tableau 默认功能可以得到扩展，这将为仪表板用户提供更多的自由，去回答在使用仪表板过程中出现的新问题，因为他们将能够例如修改参数并看到可视化的变化。现在我们已经了解了一些可能的
    R 用例，是时候讨论一些值得关注的内容，即使用编程集成与 Tableau 结合时的性能挑战。
- en: Performance challenges
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 性能挑战
- en: R scripts are table calculations. Like all table calculations, this means that
    you can only utilize fields that are on your view. Also, it’s important that you
    set partitioning and addressing correctly; otherwise, you may receive unexpected
    results.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: R 脚本是表计算。像所有表计算一样，这意味着你只能使用视图中存在的字段。另外，正确设置分区和定位也很重要，否则你可能会得到意外的结果。
- en: In the *Introducing quantiles* section, you may have noticed that the greater
    the number of quantiles set with the **Number of quantiles** parameter, the longer
    it takes the results to display. This is because R runs the loops in the **Quantile**
    calculated field one iteration for each quantile. For example, if the **Number
    of quantiles** parameter is set to **1**, the loop is instigated only once. If
    it is set to **2**, it runs twice, and so forth. The rule of thumb is that R code
    is executed once for every partition. The more partitions, the slower the performance.
    Therefore, when using R code, reduce the number of partitions whenever possible.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在*引入分位数*部分中，你可能注意到，当使用 **分位数数量** 参数设置的分位数数量增多时，结果显示的时间会更长。这是因为 R 在 **分位数** 计算字段中对每个分位数运行一次循环。例如，如果
    **分位数数量** 参数设置为 **1**，则循环仅运行一次。如果设置为 **2**，则运行两次，依此类推。经验法则是，R 代码每次只对每个分区执行一次。分区越多，性能就越慢。因此，在使用
    R 代码时，尽可能减少分区的数量。
- en: 'This was the R part of this chapter. I hope you enjoyed it and that it has
    given you the inspiration to produce your own ideas to extend the functionality
    we have shared so far. We will now continue with the other very well-known programming
    language: Python. Luckily for us, Tableau also has an integration layer with Python.'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 这部分是本章中的 R 代码。希望你喜欢这个部分，并且它能为你提供灵感，去构思出你自己的想法，扩展我们迄今为止分享的功能。接下来，我们将继续探讨另一种非常著名的编程语言：Python。幸运的是，Tableau
    也与 Python 有集成层。
- en: Python installation and integration
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 安装与集成
- en: 'Python is an interpreted programming language and is very well known for its
    readability. The first release was in 1991, so quite some time ago (longer than
    most people would guess), and it was developed by Guido van Rossum. TabPy is an
    external service that will allow you to connect Python and Tableau—similar to
    Rserve. By using TabPy, you will be able to parse fields from your Tableau dashboard
    to Python, execute a calculation, and send back the result as a newly calculated
    field to Tableau. Or you can also call functions that you implemented in Python,
    again in a calculated field. A more extensive article on TabPy can be found here:
    [https://tableaumagic.com/tableau-and-python-an-introduction](https://tableaumagic.com/tableau-and-python-an-introduction).'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: Python是一种解释型编程语言，以其可读性著称。首次发布是在1991年，距今已有相当一段时间（比大多数人猜测的要久），由Guido van Rossum开发。TabPy是一个外部服务，允许你将Python与Tableau连接——类似于Rserve。通过使用TabPy，你可以将Tableau仪表板中的字段解析到Python中，执行计算，并将结果作为新计算的字段发送回Tableau。或者，你还可以在计算字段中调用你在Python中实现的函数。关于TabPy的更详细文章可以在此处找到：[https://tableaumagic.com/tableau-and-python-an-introduction](https://tableaumagic.com/tableau-and-python-an-introduction)。
- en: Installing Python is typically not difficult, but it does involve more than
    simply double-clicking on an executable. To successfully connect Tableau with
    Python, you might have to install some libraries and execute comments on the command
    line. The following paragraphs will guide you through this process.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Python通常不难，但它涉及的内容不止是双击一个可执行文件。为了成功将Tableau与Python连接，你可能需要安装一些库，并在命令行中执行一些指令。接下来的段落将引导你完成这个过程。
- en: 'The easiest way to install Python is by performing the following steps:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Python的最简单方法是执行以下步骤：
- en: 'Download, for example, Anaconda with the Python 3.10 version: [https://www.anaconda.com](https://www.anaconda.com).
    Any other Python interpreter will work too.'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载Anaconda并选择Python 3.10版本：[https://www.anaconda.com](https://www.anaconda.com)。其他任何Python解释器也可以使用。
- en: 'To integrate Python and Tableau, some additional steps are needed:'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要将Python和Tableau集成，需要一些额外的步骤：
- en: 'Open, for example, Jupyter Notebook within Anaconda and write:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Anaconda中的Jupyter Notebook并输入：
- en: '[PRE9]'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Alternatively, execute the following command on the command line or Terminal
    (for Mac) in your Python directory:'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 或者，在你的Python目录中，执行以下命令：
- en: '[PRE10]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Navigate to the directory where `TabPy` has been installed via the command
    line or Terminal (for Mac) and type `tabpy` into the command line or Terminal
    interface:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过命令行或终端（Mac）导航到`TabPy`的安装目录，并在命令行或终端界面中输入`tabpy`：
- en: '![](img/B18435_15_28.png)'
  id: totrans-244
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18435_15_28.png)'
- en: 'Figure 15.28: Starting TabPy'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.28：启动TabPy
- en: You are now connected to the `tabpy` server, which must remain open while running
    Tableau and Python combined.
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你已连接到`tabpy`服务器，该服务器必须在运行Tableau和Python时保持打开状态。
- en: If you encounter any other issues with TabPy, for example, version incompatibilities,
    a quick Google search will go a long way.
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你遇到TabPy的其他问题，例如版本不兼容，快速的Google搜索能帮你解决大部分问题。
- en: 'Open Tableau, select **Help** | **Settings and Performance** | **Manage Analytics
    Extension Connection**, select `localhost` for **Server****,** and enter `9004`
    for **Port**:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Tableau，选择**帮助** | **设置和性能** | **管理分析扩展连接**，选择`localhost`作为**服务器**，并输入`9004`作为**端口**：
- en: '![Graphical user interface, text, application'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '![图形用户界面，文本，应用程序'
- en: Description automatically generated](img/B18435_15_29.png)
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 描述自动生成](img/B18435_15_29.png)
- en: 'Figure 15.29: Analytics Extension connection'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.29：分析扩展连接
- en: As you can see in the previous screenshot, it is possible to set up usernames,
    passwords, and SSL if you have any security concerns or for a bigger enterprise-wide
    rollout.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正如你在前面的截图中看到的，如果你有任何安全问题或需要进行更大规模的企业推广，可以设置用户名、密码和SSL。
- en: 'Click on **Test Connection** and you should see the following popup:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**测试连接**，你应该会看到以下弹出窗口：
- en: '![](img/B18435_15_30.png)'
  id: totrans-254
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18435_15_30.png)'
- en: 'Figure 15.30: Testing the analytics extension'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.30：测试分析扩展
- en: 'The full documentation on how to get TabPy up and running can be found at [https://github.com/tableau/TabPy](https://github.com/tableau/TabPy).
    If you don’t want to or cannot install TabPy on your machine, Tableau also offers
    a Docker container that will install the latest version of TabPy. You can find
    more information here: [https://hub.docker.com/r/emhemh/tabpy/](https://hub.docker.com/r/emhemh/tabpy/).'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 关于如何使 TabPy 正常运行的完整文档，请访问 [https://github.com/tableau/TabPy](https://github.com/tableau/TabPy)。如果你不想或不能在你的计算机上安装
    TabPy，Tableau 还提供了一个 Docker 容器，可以安装 TabPy 的最新版本。你可以在这里找到更多信息：[https://hub.docker.com/r/emhemh/tabpy/](https://hub.docker.com/r/emhemh/tabpy/)。
- en: Implementing Python functionality
  id: totrans-257
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现 Python 功能
- en: 'Just like R, TabPy makes use of the `SCRIPT_` functions in Tableau. In the
    next sections, we will practice working with TabPy and will look at multiple use
    cases. Tableau calculations using TabPy look very similar to R’s. For TabPy, it
    is important to add a `return` statement to the calculated field and notice that
    arguments are noted with an underscore instead of a dot:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 就像 R 一样，TabPy 在 Tableau 中使用`SCRIPT_`函数。在接下来的部分中，我们将实践使用 TabPy，并查看多个使用案例。使用 TabPy
    的 Tableau 计算与 R 非常相似。对于 TabPy，重要的是在计算字段中添加`return`语句，并注意参数是用下划线而非点表示的：
- en: '![](img/B18435_15_31.png)'
  id: totrans-259
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18435_15_31.png)'
- en: 'Figure 15.31: Python TabPy syntax'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.31：Python TabPy 语法
- en: This will be manifested in the next exercises; we will first investigate random
    number generators.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在接下来的练习中表现出来；我们将首先研究随机数生成器。
- en: Random and random normal
  id: totrans-262
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 随机数和正态随机数
- en: 'Many calculations are easily accessible via the calculated fields, others via
    the table calculations—and then there are some hidden functions. Hidden because
    those are not (yet) fully supported or tested; therefore, use them with care.
    If you tried to find the function `Random`, for example, you would not be able
    to. But you can still use the `Random()` function, as can be seen here:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 许多计算可以通过计算字段轻松访问，其他则通过表格计算访问——还有一些隐藏的函数。隐藏的原因是这些函数尚未（完全）得到支持或测试；因此，使用时需小心。例如，如果你尝试查找`Random`函数，你是无法找到的。但你仍然可以使用`Random()`函数，如下所示：
- en: '![Graphical user interface, text, application'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '![图形用户界面，文本，应用程序'
- en: Description automatically generated](img/B18435_15_32.png)
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 自动生成的描述](img/B18435_15_32.png)
- en: 'Figure 15.32: Random'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.32：随机数
- en: Another option is using TabPy to get the `Random` function. We will look at
    random as well as random normal with the variables `mu` and `sigma`. This will
    let us draw random numbers from a distribution, a method often used in statistics
    and quantitative modeling, among other areas, to simulate, reproduce, or calculate
    probabilities; `mu` and `sigma` are the mean and standard deviation defining the
    distribution.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种选择是使用 TabPy 获取`Random`函数。我们将查看随机数以及具有变量`mu`和`sigma`的正态随机数。这将使我们能够从分布中抽取随机数，这是一种在统计学、定量建模等领域中常用的方法，用于模拟、再现或计算概率；`mu`
    和 `sigma` 是定义分布的均值和标准差。
- en: Generating random numbers
  id: totrans-268
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 生成随机数
- en: 'Perform the following steps to create a dot cloud of random variables with
    a specific underlying distribution, defined by the mean and standard deviation:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤，创建一个具有特定底层分布的随机变量点云，分布由均值和标准差定义：
- en: Create an Excel sheet with one `Index` column and rows with the numbers 1-1,000\.
    This is needed to have an initial dataset with the number of rows we want to use
    for the random number generator.
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含一个`Index`列和从 1 到 1,000 的行的 Excel 表格。这是为了拥有一个初始数据集，包含我们想用于随机数生成器的行数。
- en: Save the file and connect Tableau to this Excel sheet. You should see one imported
    measure called **Index** (just like the header in your Excel file).
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件并将 Tableau 连接到此 Excel 表格。你应该能看到一个名为**Index**的导入度量（就像你 Excel 文件中的标题一样）。
- en: Connect Tableau to Python as described in *Python installation and integration*.
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照*Python 安装与集成*的说明将 Tableau 连接到 Python。
- en: 'Create a calculated field called `Random`, which should look as follows:'
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Random`的计算字段，内容应如下所示：
- en: '[PRE11]'
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Drag **Index** to **Rows** and **Random** to **Columns**.
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**Index**拖动到**行**，将**Random**拖动到**列**。
- en: Disable **Aggregate Measures** on the **Analysis** tab.
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **分析** 标签页中禁用**汇总度量**。
- en: '![](img/B18435_15_33.png)'
  id: totrans-277
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18435_15_33.png)'
- en: 'Figure 15.33: Random visualized'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.33：随机数可视化
- en: 'In the preceding screenshot, you can see the 1,000 random data points. Let’s
    consider some of the code used in this exercise that allowed us to generate this
    visualization:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的截图中，你可以看到 1,000 个随机数据点。让我们考虑在本练习中用于生成此可视化的一些代码：
- en: '| `SCRIPT_REAL` | This Tableau function calls the Python engine and returns
    a float value. |'
  id: totrans-280
  prefs: []
  type: TYPE_TB
  zh: '| `SCRIPT_REAL` | 这个 Tableau 函数调用 Python 引擎并返回一个浮动值。|'
- en: '| `"from numpy import random as rd` | In this part of the code, we need the
    Python library `numpy`, and from that library, we need the module `random`, which
    we will load with the shorter name `rd`. |'
  id: totrans-281
  prefs: []
  type: TYPE_TB
  zh: '| `"from numpy import random as rd` | 在这部分代码中，我们需要 Python 库`numpy`，并且从该库中需要`random`模块，我们将其以较短的名称`rd`加载。|'
- en: '| `return` | This command is simply needed to return a value. |'
  id: totrans-282
  prefs: []
  type: TYPE_TB
  zh: '| `return` | 此命令仅用于返回一个值。|'
- en: '| `rd.random(_arg1[0]).tolist()"` | In this step, we call the module `rd` that
    we imported before. From the `rd` module, we retrieve the `random` function. The
    `_arg1[0]` is needed to activate the function given a certain value. And lastly,
    we put all the retrieved values in a list of values by adding `.tolist()`. |'
  id: totrans-283
  prefs: []
  type: TYPE_TB
  zh: '| `rd.random(_arg1[0]).tolist()"` | 在这一步，我们调用之前导入的`rd`模块。从`rd`模块中，我们调用`random`函数。`_arg1[0]`是为了给定某个值来激活该函数。最后，我们通过添加`.tolist()`将所有检索到的值放入一个值的列表中。|'
- en: '| `SIZE()` | This is the value that will be replacing `_arg1` and `_arg1` is
    required by the `random` function. We use `SIZE()` to fulfill the requirement
    because it will return the number of rows in the partition and is sufficient to
    get a random number back from the function. |'
  id: totrans-284
  prefs: []
  type: TYPE_TB
  zh: '| `SIZE()` | 这是将替代`_arg1`的值，`_arg1`是`random`函数所需的。我们使用`SIZE()`来满足这个需求，因为它将返回分区中的行数，足以从该函数中获取一个随机数。|'
- en: We got exactly 1,000 numbers because our initial Excel sheet had 1,000 rows.
    By using calculated fields, you can add columns to a data frame but no rows. Therefore,
    we need a data source that will provide us with the data schema. In the next section,
    we will learn how to specify a random number drawn from a normal distribution.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到正好1,000个数字，因为我们的初始 Excel 表格有1,000行。通过使用计算字段，你可以向数据框中添加列，但不能添加行。因此，我们需要一个数据源来提供数据架构。在下一部分中，我们将学习如何指定从正态分布中抽取的随机数。
- en: Random normal
  id: totrans-286
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 随机正态
- en: 'Now, let’s reproduce a random variable with a normal distribution. This technique
    is often used in statistical modeling to calculate probabilities. The random normal
    values can be used instead of or in addition to observations you already collected.
    Once we know how to use a normal distribution, you can extend this knowledge and
    create other distributions in Tableau as well:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们重现一个正态分布的随机变量。这种技术通常用于统计建模中来计算概率。随机正态值可以用来替代或补充你已经收集的观测值。一旦我们学会如何使用正态分布，你也可以扩展这个知识并在
    Tableau 中创建其他分布：
- en: Reuse the workbook from the previous exercise.
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重用上一个练习中的工作簿。
- en: 'Create a `Random Normal` calculated field:'
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`Random Normal`计算字段：
- en: '[PRE12]'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Place **Random Normal** on **Columns** and **Index** on **Rows**.
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**Random Normal**放在**列**上，**Index**放在**行**上。
- en: Disable **Aggregate Measures** on the **Analysis** tab.
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**分析**标签中禁用**聚合度量**。
- en: 'Select a **Marks** type of **Circle**. You can now see a plot with the 1,000
    data points normally distributed:'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**标记**类型为**圆形**。你现在可以看到一个包含1,000个数据点的图表，这些数据点是正态分布的：
- en: '![](img/B18435_15_34.png)'
  id: totrans-294
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18435_15_34.png)'
- en: 'Figure 15.34: Normal distribution visualized'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.34：正态分布可视化
- en: 'To give your users more flexibility, you can also add parameters to your view
    that interact with the Python integration. For example, create the following two
    parameters:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 为了给用户更多的灵活性，你还可以向视图中添加与 Python 集成互动的参数。例如，创建以下两个参数：
- en: '![Graphical user interface, application'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '![图形用户界面，应用程序'
- en: Description automatically generated](img/B18435_15_35.png)
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 自动生成的描述](img/B18435_15_35.png)
- en: 'Figure 15.35: The sigma and mu parameters'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.35：sigma 和 mu 参数
- en: 'Then, create a calculated field called`Random Normal Param` like:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，创建一个名为`Random Normal Param`的计算字段，如下所示：
- en: '[PRE13]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Add the parameter control to your view so your users can decide which variables
    they want to pass to Python:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 向视图中添加参数控制，以便用户可以决定他们想要传递给 Python 的变量：
- en: '![](img/B18435_15_36.png)'
  id: totrans-303
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18435_15_36.png)'
- en: 'Figure 15.36: Final normal distribution worksheet'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.36：最终的正态分布工作表
- en: Compared to our prior visualization with the normal distribution, you can see
    in the preceding screenshot that by changing the `mu` parameter to 10, we change
    the mean to 10 and thus can move the whole dot cloud in any direction. With the
    random number being available in Tableau, you can, for example, visualize a Monte
    Carlo simulation, which is used in many real-life applications because it can
    model possible probability outcomes and thus helps interested parties understand
    the impact of risk and uncertainty.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们之前的正态分布可视化相比，你可以在前面的截图中看到，通过将 `mu` 参数改为 10，我们将均值改为 10，从而可以将整个点云向任何方向移动。通过在
    Tableau 中使用随机数，你可以例如可视化一个蒙特卡罗模拟，这在许多现实生活中的应用中都非常有用，因为它能够模拟可能的概率结果，从而帮助相关方理解风险和不确定性的影响。
- en: 'More information on how to calculate a Monte Carlo simulation in Tableau can
    be found here – [https://jacksontwo.com/exploring-python-tableau](https://jacksontwo.com/exploring-python-tableau)
    – and more general Monte Carlo content can be found here: [https://www.ibm.com/topics/monte-carlo-simulation](https://www.ibm.com/topics/monte-carlo-simulation).'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 关于如何在 Tableau 中计算蒙特卡罗模拟的更多信息，请点击这里：[https://jacksontwo.com/exploring-python-tableau](https://jacksontwo.com/exploring-python-tableau)，此外，关于蒙特卡罗的更多内容可以在这里找到：[https://www.ibm.com/topics/monte-carlo-simulation](https://www.ibm.com/topics/monte-carlo-simulation)。
- en: 'Before moving on, let’s again consider some of the key lines of code that were
    used in this exercise:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，我们再次考虑一下本次练习中使用的一些关键代码行：
- en: '| `SCRIPT_REAL` | This Tableau function calls the Python engine and returns
    a float value. |'
  id: totrans-308
  prefs: []
  type: TYPE_TB
  zh: '| `SCRIPT_REAL` | 这个 Tableau 函数调用 Python 引擎并返回一个浮动值。 |'
- en: '| `"from numpy import random as rd` | In this part of the code, we need the
    Python library `numpy`, and from that library, we need the module `random`, which
    we will load with the shorter name `rd`. |'
  id: totrans-309
  prefs: []
  type: TYPE_TB
  zh: '| `"from numpy import random as rd` | 这一部分代码中，我们需要 Python 库 `numpy`，并从该库中导入
    `random` 模块，我们将使用简短的名字 `rd` 来加载它。 |'
- en: '| `mu, sigma = _arg2,_arg3` | This part defines that we will refer to `mu`
    and `sigma` with `_arg2` and `_arg3`. |'
  id: totrans-310
  prefs: []
  type: TYPE_TB
  zh: '| `mu, sigma = _arg2,_arg3` | 这一部分定义了我们将使用 `_arg2` 和 `_arg3` 来引用 `mu` 和 `sigma`。
    |'
- en: '| `return` | This command is simply needed to return a value. |'
  id: totrans-311
  prefs: []
  type: TYPE_TB
  zh: '| `return` | 这个命令只是为了返回一个值。 |'
- en: '| `rd.normal(mu, sigma, _arg1[0])).tolist()` | In this step, we call the module
    `rd` that we imported before. From the `rd` module, we retrieve the `random` function.
    The `_arg1[0]` is needed to activate the function given a certain value. Optional
    values are `mu` and `sigma`. This time, we will use those two as well. And lastly,
    we put all the retrieved values in a list of values by adding `.tolist()`. |'
  id: totrans-312
  prefs: []
  type: TYPE_TB
  zh: '| `rd.normal(mu, sigma, _arg1[0])).tolist()` | 在这一步中，我们调用了之前导入的 `rd` 模块。从 `rd`
    模块中，我们获取了 `random` 函数。`_arg1[0]` 是需要提供给函数以激活它的某个值。可选值为 `mu` 和 `sigma`，这次我们将使用这两个值。最后，通过添加
    `.tolist()`，我们将获取到的所有值放入一个列表中。 |'
- en: '| `SIZE(), [mu], [sigma]` | This is the value that will be replacing `_arg1`,
    `_arg2`, and `_arg3`. Just like before, we use `SIZE()` to activate the function.
    The optional values `mu` and `sigma` will be pointing to the parameter we created
    before. |'
  id: totrans-313
  prefs: []
  type: TYPE_TB
  zh: '| `SIZE(), [mu], [sigma]` | 这是替换 `_arg1`、`_arg2` 和 `_arg3` 的值。与之前一样，我们使用 `SIZE()`
    来激活函数。可选值 `mu` 和 `sigma` 将指向我们之前创建的参数。 |'
- en: After finishing the first two exercises with TabPy, we learned how we can use
    a random number in Tableau. Next, we changed the random number to a random number
    drawn from a normal distribution and added parameters to the dashboard such that
    the user can change `mu` and `sigma` of the normal distribution. Of course, you
    can change the function in TabPy to other distributions as well.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 完成前两个与 TabPy 相关的练习后，我们学习了如何在 Tableau 中使用随机数。接下来，我们将随机数改为从正态分布中抽取的随机数，并向仪表板中添加参数，使得用户可以更改正态分布的`mu`和`sigma`。当然，你也可以将
    TabPy 中的函数更改为其他分布。
- en: The next topic is more advanced. We will use TabPy to execute a sentiment analysis
    on newspaper headlines from 2003 to 2021.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个主题较为高级。我们将使用 TabPy 执行对 2003 到 2021 年报纸头条的情感分析。
- en: Calculating sentiment analysis
  id: totrans-316
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 计算情感分析
- en: 'Alongside machine learning and artificial intelligence, another term is being
    used increasingly: **Natural Language Processing** (**NLP**). This is the process
    of machines understanding words and their meaning. Sentiment analysis falls into
    this category; the technique has different flavors but one of them is to measure
    polarity, that is, whether the speaker has a positive or negative opinion. Use
    cases are, for example, datasets of reviews, tweets, comments, plots, lyrics,
    and so on. Let’s have a look!'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 除了机器学习和人工智能，另一个日益被使用的术语是**自然语言处理**（**NLP**）。这是机器理解单词及其含义的过程。情感分析属于这一类别；该技术有不同的变种，其中之一是测量极性，即说话者是持有积极还是消极的意见。应用场景包括评论、推文、留言、情节、歌词等数据集。让我们来看看！
- en: 'This exercise is based on the idea of Brit Cava, who used the Makeover Monday
    data from the top 100 songs’ lyrics to try out the Tableau-Python integration.
    You can find the blog post here: [https://www.tableau.com/about/blog/2016/12/using-python-sentiment-analysis-tableau-63606](https://www.tableau.com/about/blog/2016/12/using-python-sentiment-analysis-tableau-63606).
    Let’s reproduce it with this Australian Broadcasting Corporation dataset containing
    one million news headlines: [https://www.kaggle.com/datasets/therohk/million-headlines](https://www.kaggle.com/datasets/therohk/million-headlines).'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 这个练习基于Brit Cava的想法，他使用了来自前100首歌曲歌词的Makeover Monday数据，尝试了Tableau与Python的集成。你可以在这里找到博客文章：[https://www.tableau.com/about/blog/2016/12/using-python-sentiment-analysis-tableau-63606](https://www.tableau.com/about/blog/2016/12/using-python-sentiment-analysis-tableau-63606)。让我们用这个包含一百万条新闻标题的澳大利亚广播公司数据集来再现它：[https://www.kaggle.com/datasets/therohk/million-headlines](https://www.kaggle.com/datasets/therohk/million-headlines)。
- en: Navigate to the `Sentiment` `Analysis` tab in the workbook associated with the
    chapter.
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在与该章节相关的工作簿中，导航到`Sentiment` `Analysis`标签页。
- en: Connect to the `Headlines` data source.
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 连接到`Headlines`数据源。
- en: Connect Tableau to Python.
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Tableau连接到Python。
- en: 'Create a `Sentiment Score` calculated field. The formatting, for example, indented
    text, is important:'
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`Sentiment Score`计算字段。格式化内容，比如缩进文本，非常重要：
- en: '[PRE14]'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Create a `Color Coding` calculated field:'
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`Color Coding`计算字段：
- en: '[PRE15]'
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Place **publish_date** on the **Rows** shelf, as well as **MONTH(publish_date).**
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**publish_date**放置在**行**架上，并且将**MONTH(publish_date)**放置在同一架上。
- en: Put **Sentiment Score** on **Columns**.
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**Sentiment Score**放置在**列**架上。
- en: 'Add **Color Coding** to the **Color** shelf. And **headline_text** to **Details**.
    Lastly, drag an average line from the **Analytics** pane on the view (**Per Cell**):'
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**Color Coding**添加到**颜色**架上，将**headline_text**添加到**详情**架上。最后，从**分析**窗格中拖动一条平均线到视图中（**每个单元格**）：
- en: '![](img/B18435_15_37.png)'
  id: totrans-329
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18435_15_37.png)'
- en: 'Figure 15.37: Sentiment Score'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.37：情感得分
- en: 'Limit the data as needed, considering the performance of your PC. I am showing
    2019-2021 and only Jan, Feb, Nov, and Dec to compare the differences between the
    beginning and end of the years:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 根据需要限制数据，考虑到你电脑的性能。我展示的是2019-2021年的数据，仅选取了1月、2月、11月和12月，用于比较年初和年末之间的差异：
- en: '![](img/B18435_15_38.png)'
  id: totrans-332
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18435_15_38.png)'
- en: 'Figure 15.38: Worksheet'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.38：工作表
- en: So far, we have loaded the dataset and created a Python calculation that uses
    a pre-trained sentiment analyzer that tells us if a headline is written negative
    or positive. In the preceding figure, we brought everything together, and you
    can see that in every month in 2021, the negative news is dominating, with February
    being the worst (an average score of -10.45) and December being the most positive
    (an average score of -0.14). We will continue now with a check on what the news
    is most often reporting about.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经加载了数据集，并创建了一个Python计算，使用了一个预训练的情感分析器来判断标题是负面还是正面。在前面的图中，我们将所有内容结合在一起，你可以看到在2021年的每个月中，负面新闻占据主导地位，2月最糟糕（平均得分为-10.45），而12月则是最正面的（平均得分为-0.14）。接下来，我们将继续检查新闻报道的最常见话题。
- en: 'To know the topics that were most often discussed in the ABC news, we must
    count the words used. Perhaps there is a way to do this in Tableau, by splitting
    the **headline_text** field into one word each, pivoting and counting but it will
    surely be a tedious process. And there are enough libraries out there to remove
    things like stop words and reduce words to their core, for example, horse = horses.
    Therefore, we will deploy another model. Please follow the steps:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解在ABC新闻中最常讨论的主题，我们必须计算使用的单词。也许在Tableau中有方法可以通过将**headline_text**字段分割成每个单词、透视并计数，但这无疑是一个繁琐的过程。而且，市面上有足够的库可以去除像停用词这样的内容，并将单词还原为其核心形式，例如，horse
    = horses。因此，我们将部署另一个模型。请按照以下步骤进行：
- en: 'Create a `Start` parameter. This one will help us later to define the period
    we want to search in:'
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `开始` 参数。这个参数稍后会帮助我们定义我们想要查询的时间段：
- en: '![](img/B18435_15_39.png)'
  id: totrans-337
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18435_15_39.png)'
- en: 'Figure 15.39: Start'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.39：开始
- en: 'Also, create an `End` parameter:'
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 还需要创建一个 `结束` 参数：
- en: '![](img/B18435_15_40.png)'
  id: totrans-340
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18435_15_40.png)'
- en: 'Figure 15.40: End'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.40：结束
- en: Show both parameters on a new tab in your Tableau workbook called `most common
    words`.
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Tableau 工作簿中新建一个名为 `most common words` 的标签页，显示两个参数。
- en: '![](img/B18435_15_41.png)'
  id: totrans-343
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18435_15_41.png)'
- en: 'Figure 15.41: Worksheet'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.41：工作表
- en: 'Next, you will have to write code in your Python IDE of choice (e.g., Jupyter
    Notebook). For now, copy the following code. The explanation will follow at the
    end of this section (don’t forget to change the location in this line `df = pd.read_csv(''abcnews-date-text.csv'')`
    to exactly where your copy of the file is located:'
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，你需要在你选择的 Python IDE 中编写代码（例如，Jupyter Notebook）。现在，复制以下代码。解释将在本节末尾给出（不要忘了将这一行
    `df = pd.read_csv('abcnews-date-text.csv')` 中的路径更改为你文件的准确位置）：
- en: '[PRE16]'
  id: totrans-346
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Since the indentation is especially important, here is a screenshot of how
    it should look; you can also see that I specified the location of the `abcnews`
    file to be ‘`/Users/marleenmeier/Downloads/abcnews-date-text.csv`'' since my file
    is located there:'
  id: totrans-347
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于缩进尤为重要，下面是它应该如何显示的截图；你还可以看到，我指定了 `abcnews` 文件的位置为 ‘`/Users/marleenmeier/Downloads/abcnews-date-text.csv`’，因为我的文件就在这个位置：
- en: '![Text'
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![文本'
- en: Description automatically generated with medium confidence](img/B18435_15_42.png)
  id: totrans-349
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 描述自动生成，信心中等](img/B18435_15_42.png)
- en: 'Figure 15.42: Code'
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 15.42：代码
- en: Now run the Python script.
  id: totrans-351
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在运行 Python 脚本。
- en: 'Go back to the most common words tab in your Tableau dashboard and create the
    following calculated field `common words`:'
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回 Tableau 仪表板中的 most common words 标签页，创建以下计算字段 `common words`：
- en: '[PRE17]'
  id: totrans-353
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: You can also use the `SCRIPT_STR` function like we did in the previous exercise,
    but for deployed TabPy models, Tableau provides this easier syntax of `MODEL_EXTENSION`
    functions too.
  id: totrans-354
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你也可以像我们在前一个练习中那样使用 `SCRIPT_STR` 函数，但对于已部署的 TabPy 模型，Tableau 提供了更简便的 `MODEL_EXTENSION`
    函数语法。
- en: Drag **common words** into the **Rows** and see your first results; between
    January 2014 and December 2015, the word *new* appeared 4,909 times in the headlines
    of ABC news, *police* 4,307 times, and *man* 4,171 times. You see the top 3 because
    it is specified as such in the code, which we will check out in a bit. You can,
    however, change it to any number!
  id: totrans-355
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 **常见词** 拖到 **行** 里，查看你的第一个结果；在 2014 年 1 月至 2015 年 12 月期间，*new* 一词在 ABC 新闻的标题中出现了
    4,909 次，*police* 出现了 4,307 次，*man* 出现了 4,171 次。你看到前 3 个词，因为代码中指定了这些，我们稍后会查看这个代码。不过，你可以将其更改为任何数字！
- en: 'Play with the **Start** and **End** dates and see what happens! Here are two
    more examples; also notice the word count itself, the top 1 word in 2020 (*coronavirus*,
    8,383 times) was used two times more often than the top 1 word between 2014 and
    2015 (*new*, 4,909 times):'
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调整 **开始** 和 **结束** 日期，看看会发生什么！这里有两个例子；还可以看到词频本身，2020 年排名第一的单词 (*coronavirus*，出现了
    8,383 次) 的使用频率是 2014 至 2015 年间排名第一的单词 (*new*，出现了 4,909 次) 的两倍：
- en: '![](img/B18435_15_43.png)'
  id: totrans-357
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18435_15_43.png)'
- en: 'Figure 15.43: Words II'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.43：单词 II
- en: '![](img/B18435_15_44.png)'
  id: totrans-359
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18435_15_44.png)'
- en: 'Figure 15.44: Words III'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.44：单词 III
- en: If you want to continue working on this, you could add the top N as a model
    input parameter, as well as the sentiment score if you wanted to see the top N
    for a specific sentiment only.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想继续工作，可以将前 N 个作为模型输入参数，并且如果你只想查看某一特定情感的前 N 个，还可以加入情感评分。
- en: 'In this exercise, we were able to show that Tableau can analyze text data for
    its sentiment, something we have not seen before. To do so, we needed to connect
    Tableau with Python, which is possible by using the external service TabPy. Python
    can make use of libraries such as `nltk.sentiment`—which we used in this case.
    A thorough description of this package can be found here: [https://www.nltk.org/api/nltk.sentiment.html](https://www.nltk.org/api/nltk.sentiment.html).
    There are many other libraries for sentiment analysis but `nltk` is used a lot
    for demonstration purposes and learning. Feel free to try other libraries as well!'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们展示了 Tableau 可以分析文本数据的情感，这是我们以前没有见过的。为了实现这一点，我们需要将 Tableau 与 Python
    连接，使用外部服务 TabPy 就可以做到。Python 可以使用如 `nltk.sentiment` 这样的库——我们在本例中使用的就是这个库。该包的详细描述可以在这里找到：[https://www.nltk.org/api/nltk.sentiment.html](https://www.nltk.org/api/nltk.sentiment.html)。还有许多其他情感分析的库，但
    `nltk` 是用于演示和学习的常用库，大家可以尝试其他库！
- en: 'Let’s demystify some of the new code instances we included in this exercise:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们解密一些在这个练习中加入的新代码实例： |
- en: '| `SCRIPT_REAL` | This Tableau function calls the Python engine and returns
    a float value. |'
  id: totrans-364
  prefs: []
  type: TYPE_TB
  zh: '| `SCRIPT_REAL` | 这个Tableau函数调用Python引擎并返回一个浮动值。 |'
- en: '| `from nltk.sentiment import SentimentIntensityAnalyzer` | In this part of
    the code, we need the Python library `nltk`, and from that library, we need the
    module `sentiment` from which we will load the function `SentimentIntensityAnalyzer`.
    |'
  id: totrans-365
  prefs: []
  type: TYPE_TB
  zh: '| `from nltk.sentiment import SentimentIntensityAnalyzer` | 在这一部分的代码中，我们需要使用Python库`nltk`，并从该库中导入`sentiment`模块，加载`SentimentIntensityAnalyzer`函数。
    |'
- en: '| `scores = []``text = _arg1``sid = SentimentIntensityAnalyzer()``ss = sid.polarity_scores(word)`
    | This part defines that our `_arg1` will be called `text`, `scores` will be an
    empty list (and filled later in the code), `sid` will refer to the `SentimentIntensityAnalyzer`
    function, and lastly, `ss` will be the reference to the scores per word. |'
  id: totrans-366
  prefs: []
  type: TYPE_TB
  zh: '| `scores = []``text = _arg1``sid = SentimentIntensityAnalyzer()``ss = sid.polarity_scores(word)`
    | 这部分定义了我们的`_arg1`将被称为`text`，`scores`是一个空列表（稍后在代码中填充），`sid`表示`SentimentIntensityAnalyzer`函数，最后，`ss`是每个单词的分数参考。
    |'
- en: '| `scores.append(ss[''compound''])` | In this step, we will fill the empty
    `scores` table with the polarity scores. |'
  id: totrans-367
  prefs: []
  type: TYPE_TB
  zh: '| `scores.append(ss[''compound''])` | 在这一步，我们将使用极性分数填充空的`scores`表格。 |'
- en: '| `return scores` | Here, we are returning the now-filled `scores` table as
    output to Tableau. |'
  id: totrans-368
  prefs: []
  type: TYPE_TB
  zh: '| `return scores` | 在这里，我们将返回现在已填充的`scores`表格作为输出传递给Tableau。 |'
- en: '| `ATTR([Dialog])` | Our `_arg1` is specified as the field `Dialog` from the
    Tableau workbook. |'
  id: totrans-369
  prefs: []
  type: TYPE_TB
  zh: '| `ATTR([Dialog])` | 我们的`_arg1`被指定为Tableau工作簿中的字段`Dialog`。 |'
- en: '| `from tabpy.tabpy_tools.client import Client``client = Client(''http://localhost:9004/'')`
    | In this part of the code, we connect Tableau to the Python instance. |'
  id: totrans-370
  prefs: []
  type: TYPE_TB
  zh: '| `from tabpy.tabpy_tools.client import Client``client = Client(''http://localhost:9004/'')`
    | 在这一部分的代码中，我们将Tableau连接到Python实例。 |'
- en: '| `import pandas as pd``import nltk``from nltk.corpus import stopwords``from
    nltk.tokenize import word_tokenize``from nltk.probability import FreqDist``from
    nltk.sentiment import SentimentIntensityAnalyzer` | Here we load all the required
    libraries. |'
  id: totrans-371
  prefs: []
  type: TYPE_TB
  zh: '| `import pandas as pd``import nltk``from nltk.corpus import stopwords``from
    nltk.tokenize import word_tokenize``from nltk.probability import FreqDist``from
    nltk.sentiment import SentimentIntensityAnalyzer` | 这里我们加载了所有需要的库。 |'
- en: '| `df = pd.read_csv(''abcnews-date-text.csv'')``df[''publish_date''] = pd.to_datetime(df[''publish_date''],
    format=''%Y%m%d'')` | Next, we read the `abcnews` file. |'
  id: totrans-372
  prefs: []
  type: TYPE_TB
  zh: '| `df = pd.read_csv(''abcnews-date-text.csv'')``df[''publish_date''] = pd.to_datetime(df[''publish_date''],
    format=''%Y%m%d'')` | 接下来，我们读取`abcnews`文件。 |'
- en: '| `_arg1 = pd.to_datetime(_arg1, format=''%Y-%m-%d'')[0]``_arg2 = pd.to_datetime(_arg2,
    format=''%Y-%m-%d'')[0]``df = df.set_index(''publish_date'')` | Then, we must
    convert the input into a readable format for our model. |'
  id: totrans-373
  prefs: []
  type: TYPE_TB
  zh: '| `_arg1 = pd.to_datetime(_arg1, format=''%Y-%m-%d'')[0]``_arg2 = pd.to_datetime(_arg2,
    format=''%Y-%m-%d'')[0]``df = df.set_index(''publish_date'')` | 接着，我们必须将输入转换为我们的模型可以读取的格式。
    |'
- en: '| `scores = []``filtered_sentence = []` | This part is to create two lists
    that we will fill in the `for` loop. |'
  id: totrans-374
  prefs: []
  type: TYPE_TB
  zh: '| `scores = []``filtered_sentence = []` | 这部分是为了创建两个列表，我们将在`for`循环中填充它们。 |'
- en: '| `in_range_df = df[df.index.isin(pd.date_range(_arg1, _arg2))]` | Now we will
    filter the data to be between our start and end date. |'
  id: totrans-375
  prefs: []
  type: TYPE_TB
  zh: '| `in_range_df = df[df.index.isin(pd.date_range(_arg1, _arg2))]` | 现在我们将过滤数据，确保它位于我们的起始日期和结束日期之间。
    |'
- en: '| `stop_words = set(stopwords.words(''english''))``text = in_range_df[''headline_text'']`
    | Luckily, English stop words are available at our disposal; we are loading them
    in this step. |'
  id: totrans-376
  prefs: []
  type: TYPE_TB
  zh: '| `stop_words = set(stopwords.words(''english''))``text = in_range_df[''headline_text'']`
    | 幸运的是，英语停用词是现成的；我们在这一步加载它们。 |'
- en: '| `for row in range(0, len(in_range_df)):``text = in_range_df[''headline_text''][row]``word_tokens
    = word_tokenize(text)``for w in word_tokens:``if w not in stop_words: filtered_sentence.append(w)`
    | In this part of the code, we are converting the remaining headers into a token,
    which is needed to calculate the frequency, and finally, the non-stop-word words
    will be stored in the `filtered_sentence` list. |'
  id: totrans-377
  prefs: []
  type: TYPE_TB
  zh: '| `for row in range(0, len(in_range_df)):``text = in_range_df[''headline_text''][row]``word_tokens
    = word_tokenize(text)``for w in word_tokens:``if w not in stop_words: filtered_sentence.append(w)`
    | 在这一部分的代码中，我们将剩余的标题转换为令牌，这是计算频率所需的，最后，非停用词的单词将被存储在`filtered_sentence`列表中。 |'
- en: '| `fdist = FreqDist(filtered_sentence)` | By using one of the libraries, we
    loaded in the beginning, we can now ask to retrieve the frequency for each word.
    |'
  id: totrans-378
  prefs: []
  type: TYPE_TB
  zh: '| `fdist = FreqDist(filtered_sentence)` | 利用我们在开始时加载的库，我们现在可以获取每个单词的频率。 |'
- en: '| `most_common_words = fdist.most_common(3)``return str(most_common_words)`
    | And since we have the frequency now, we can load the most often-used words.
    |'
  id: totrans-379
  prefs: []
  type: TYPE_TB
  zh: '| `most_common_words = fdist.most_common(3)``return str(most_common_words)`
    | 既然我们已经获得了频率，现在我们可以加载最常用的单词。|'
- en: '| `client.deploy(''common_words'', common_words,''Retrieves the most common
    words'', override = True)` | Lastly, we will deploy the model such that we can
    call it from Tableau Desktop. |'
  id: totrans-380
  prefs: []
  type: TYPE_TB
  zh: '| `client.deploy(''common_words'', common_words,''Retrieves the most common
    words'', override = True)` | 最后，我们将部署模型，这样就可以从 Tableau Desktop 中调用它。|'
- en: We have seen embedded Python code now; you create a calculated field and use
    fields from your dataset as input. But what if you wanted to use a large model
    with many lines of code and many different variables, or upfront training of your
    model? Would this exceed TabPy’s capabilities? No! Because next to embedded code,
    we are also able to write Python scripts outside of Tableau.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经看到了嵌入的 Python 代码；你可以创建一个计算字段，并使用数据集中的字段作为输入。但如果你想使用一个包含多行代码和多个变量的大型模型，或者是对模型进行预先训练呢？这会超出
    TabPy 的能力吗？不会！因为除了嵌入的代码外，我们还可以在 Tableau 之外编写 Python 脚本。
- en: Deploying models with TabPy
  id: totrans-382
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 TabPy 部署模型
- en: At times, your script will just be too long to be used in a calculated field,
    or you’ll need upfront training on a different dataset or an extended dataset
    rather than the one you have in Tableau. In this case, we can use TabPy in a slightly
    different way. You can write a model outside of Tableau—in Python and deploy it
    to Tableau such that you can call it from within the desktop.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，你的脚本可能会太长，无法在计算字段中使用，或者你需要对一个不同的数据集或扩展的数据集进行预先训练，而不是你在 Tableau 中拥有的数据集。在这种情况下，我们可以以稍微不同的方式使用
    TabPy。你可以在 Tableau 之外编写模型——使用 Python 并将其部署到 Tableau，从而可以在桌面端调用它。
- en: 'In the upcoming example, we will build a recommender system that predicts the
    likelihood of a Pima woman having diabetes when inputting 7 parameters (age, BMI,
    pregnancies, blood pressure, glucose, insulin, and skin thickness). The dataset
    is from a 1988 study by *J.W. Smith, J.E. Everhart, W.C. Dickson, W.C. Knowler,
    and R.S. Johannes*, accessible at the following link: [https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2245318/](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2245318/).'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的示例中，我们将构建一个推荐系统，该系统预测一个 Pima 女性在输入 7 个参数（年龄、BMI、怀孕次数、血压、血糖、胰岛素和皮肤厚度）时患糖尿病的可能性。该数据集来源于
    *J.W. Smith, J.E. Everhart, W.C. Dickson, W.C. Knowler, 和 R.S. Johannes* 1988
    年的研究，相关链接如下：[https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2245318/](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2245318/)。
- en: 'We will begin with the code in the Jupyter Notebook or your preferred **Integrated
    Development Environment** (**IDE**). Please follow along with the next steps:'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从 Jupyter Notebook 或你喜欢的**集成开发环境**（**IDE**）中的代码开始。请按照以下步骤操作：
- en: 'We start the code by importing the `tabpy` client, which is needed to establish
    a Python-Tableau connection:'
  id: totrans-386
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们通过导入 `tabpy` 客户端来开始代码，这是建立 Python-Tableau 连接所需的：
- en: '[PRE18]'
  id: totrans-387
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Next, we import all the libraries and data needed. Make sure to replace the
    dataset name with the full path of your file location (for example, `H:/Documents/Diabetes.csv`
    instead of `Diabetes.csv`):'
  id: totrans-388
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们导入所有需要的库和数据。确保将数据集名称替换为文件位置的完整路径（例如，`H:/Documents/Diabetes.csv` 而不是 `Diabetes.csv`）：
- en: '[PRE19]'
  id: totrans-389
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now we split the dataset into four; two test datasets that will help us check
    how accurate our model is, as well as two training datasets to train the model:'
  id: totrans-390
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将数据集分成四个部分；两个测试数据集将帮助我们检查模型的准确性，另外两个训练数据集用于训练模型：
- en: '[PRE20]'
  id: totrans-391
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: If you are interested in more detail and the math behind this code, please check
    [https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.GradientBoostingClassifier.html](https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.GradientBoostingClassifier.html).
  id: totrans-392
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你对这段代码背后的更多细节和数学原理感兴趣，请查看[https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.GradientBoostingClassifier.html](https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.GradientBoostingClassifier.html)。
- en: 'Next, we will load the `GradientBoosting` model from `sklearn` and fit our
    data; then; we can immediately visualize the score, which can be interpreted as
    the percentage of the total that our model predicted the correct value for:'
  id: totrans-393
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将从 `sklearn` 加载 `GradientBoosting` 模型并拟合我们的数据；然后，我们可以立即可视化分数，这可以解释为我们的模型正确预测的总百分比：
- en: '[PRE21]'
  id: totrans-394
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: And this is the full code in Jupyter:![Graphical user interface, text
  id: totrans-395
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是 Jupyter 中的完整代码：![图形用户界面，文本
- en: Description automatically generated](img/B18435_15_45.png)
  id: totrans-396
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 描述自动生成](img/B18435_15_45.png)
- en: 'Figure 15.45: Python script'
  id: totrans-397
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 15.45：Python 脚本
- en: 'To conclude this first phase, our model predicted the right outcome in 72.08%
    of cases, either having diabetes or not having diabetes. This is a fairly good
    result. To further improve it, we could add more data (in terms of rows), extend
    our input variables (in terms of columns), or create new features like ratios
    between variables (hidden information could be emphasized this way). But for now,
    we can continue working with the model, because eventually, we want to predict
    the likelihood as a percentage of someone having diabetes. Let’s switch over to
    Tableau:'
  id: totrans-398
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 总结第一阶段，我们的模型在72.08%的情况下正确预测了是否患有糖尿病。这是一个相当不错的结果。为了进一步改进它，我们可以增加更多数据（行数方面），扩展输入变量（列数方面），或者创建新的特征，比如变量之间的比率（通过这种方式可以突出隐藏的信息）。但目前，我们可以继续使用这个模型，因为最终我们希望预测一个人患糖尿病的概率。接下来让我们切换到
    Tableau：
- en: 'We won’t need a dataset for this exercise because all our data lives in the
    Jupyter Notebook. In Tableau, you can just select one randomly, as we won’t use
    it. In a new Tableau worksheet called `Diabetes`, create the following seven parameters:'
  id: totrans-399
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 本次练习我们不需要数据集，因为所有的数据都存储在 Jupyter Notebook 中。在 Tableau 中，您可以随机选择一个数据集，因为我们不会使用它。在一个新的
    Tableau 工作表中，命名为`Diabetes`，创建以下七个参数：
- en: '![](img/B18435_15_46.png)'
  id: totrans-400
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18435_15_46.png)'
- en: 'Figure 15.46: Age and BloodPressure parameters'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.46：年龄和血压参数
- en: '![](img/B18435_15_47.png)'
  id: totrans-402
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18435_15_47.png)'
- en: 'Figure 15.47: BMI and Insulin parameters'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.47：BMI 和胰岛素参数
- en: '![](img/B18435_15_48.png)'
  id: totrans-404
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18435_15_48.png)'
- en: 'Figure 15.48: SkinThickness and Glucose parameters'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.48：皮肤厚度和血糖参数
- en: '![](img/B18435_15_49.png)'
  id: totrans-406
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18435_15_49.png)'
- en: 'Figure 15.49: The Pregnancies parameter'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.49：怀孕次数参数
- en: 'After you have created all seven parameters, select all of them and click **Show
    Parameter**:'
  id: totrans-408
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建所有七个参数后，选择它们并点击**显示参数**：
- en: '![](img/B18435_15_50.png)'
  id: totrans-409
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18435_15_50.png)'
- en: 'Figure 15.50: Show Parameter'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.50：显示参数
- en: 'Please go back to Jupyter now and execute the two last missing pieces of code
    that will create a function to call our model:'
  id: totrans-411
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在请返回 Jupyter 并执行最后两段缺失的代码，这些代码将创建一个调用我们模型的函数：
- en: '[PRE22]'
  id: totrans-412
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'And lastly, the line that will deploy the function to TabPy:'
  id: totrans-413
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，部署函数到 TabPy 的代码如下：
- en: '[PRE23]'
  id: totrans-414
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'This looks as follows in Jupyter:'
  id: totrans-415
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Jupyter 中，这看起来如下：
- en: '![](img/B18435_15_51.png)'
  id: totrans-416
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18435_15_51.png)'
- en: 'Figure 15.51: Deploying the function'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.51：部署函数
- en: To check if your model has been deployed, type `https://localhost:9004/endpoints`
    in your browser. This will list all the models that have been deployed to TabPy
    on your machine:![](img/B18435_15_52.png)
  id: totrans-418
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要检查您的模型是否已经部署，请在浏览器中输入`https://localhost:9004/endpoints`。这将列出所有已部署到您机器上 TabPy
    的模型：![](img/B18435_15_52.png)
- en: 'Figure 15.52: Deploying the function'
  id: totrans-419
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 15.52：部署函数
- en: Go back to Tableau and double-check if the connection to TabPy is still active.
  id: totrans-420
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回 Tableau 并再次检查与 TabPy 的连接是否仍然处于活动状态。
- en: 'Create a calculated field called `Diabetes predictor` like so:'
  id: totrans-421
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`糖尿病预测器`的计算字段，如下所示：
- en: '[PRE24]'
  id: totrans-422
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: You can see here that since we did all the coding in Python, we only tell Tableau
    to return a TabPy query called `diabetes_predictor`, then add all the *n* references
    to variables that are required for the function, and lastly add `['response']`
    at the end.
  id: totrans-423
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里可以看到，由于我们所有的编码都是在 Python 中完成的，我们只需要告诉 Tableau 返回一个名为`diabetes_predictor`的
    TabPy 查询，然后将所有的 *n* 变量引用添加到函数所需的变量中，最后在末尾添加`['response']`。
- en: 'Or, since deployed models on TabPy also support the functions `MODEL_EXTENSION_BOOL`,
    `MODEL_EXTENSION_INT`, `MODEL_EXTENSION_REAL`, and `MODEL_EXTENSION_STR`, you
    can also use this:'
  id: totrans-424
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 或者，由于部署在 TabPy 上的模型还支持`MODEL_EXTENSION_BOOL`、`MODEL_EXTENSION_INT`、`MODEL_EXTENSION_REAL`和`MODEL_EXTENSION_STR`函数，您也可以使用以下代码：
- en: '[PRE25]'
  id: totrans-425
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The second code is a bit shorter and more intuitive; however, both work!
  id: totrans-426
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 第二段代码较短且更直观，不过两者都可以正常工作！
- en: 'Now place the field **Diabetes predictor**on the **Text** shelf and observe
    the outcome:'
  id: totrans-427
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将字段**糖尿病预测器**放到**文本**架构中，并观察结果：
- en: '![](img/B18435_15_53.png)'
  id: totrans-428
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18435_15_53.png)'
- en: 'Figure 15.53: Interactive TabPy Diabetes worksheet'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.53：交互式 TabPy 糖尿病工作表
- en: 'By sliding the parameters to the left and right, you will see that the likelihood
    of diabetes changes. The calculated field sends the data of the parameters via
    TabPy to Python, where your data will be fitted to the model. And the result will
    be sent back, and you can see it. Of course, you can build a whole dashboard around
    it. Examples can be found on the Tableau website: [https://www.tableau.com/about/blog/2017/1/building-advanced-analytics-applications-tabpy-64916](https://www.tableau.com/about/blog/2017/1/building-advanced-analytics-applications-tabpy-64916).'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 通过左右滑动参数，你会看到糖尿病的可能性发生变化。计算字段通过TabPy将参数的数据发送到Python，在那里你的数据会被拟合到模型中。结果会被发送回来，你可以看到它。当然，你可以围绕它构建一个完整的仪表板。可以在Tableau网站找到示例：[https://www.tableau.com/about/blog/2017/1/building-advanced-analytics-applications-tabpy-64916](https://www.tableau.com/about/blog/2017/1/building-advanced-analytics-applications-tabpy-64916)。
- en: If you want to learn more about the Python language itself, a good source of
    information is, for example, [https://www.w3schools.com/python/default.asp](https://www.w3schools.com/python/default.asp).
    The web page will, step by step, guide you through the Python syntax. But Tableau
    makes it even easier because a set of functions has already been written for you.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于Python语言本身的信息，一个好的资源是：[https://www.w3schools.com/python/default.asp](https://www.w3schools.com/python/default.asp)。这个网页会一步步地引导你了解Python语法。但Tableau让这一切更加简单，因为一套函数已经为你写好。
- en: Predeployed TabPy functions
  id: totrans-432
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 预部署的TabPy函数
- en: 'Not everyone likes to program outside of Tableau and that’s why Tableau has
    produced a set of widely used, pre-deployed functions you can use out of the box.
    You will still need to execute one line of code, once! But that is all you need
    to do in Python itself. The available functions are ANOVA, T-test, sentiment analysis,
    and PCA but Tableau has mentioned on multiple occasions that more functions might
    be coming soon. You can find the documentation here: [https://tableau.github.io/TabPy/docs/tabpy-tools.html](https://tableau.github.io/TabPy/docs/tabpy-tools.html).'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 并非每个人都喜欢在Tableau之外进行编程，这也是Tableau推出一套广泛使用、预部署的函数供你开箱即用的原因。你仍然需要执行一行代码，仅此而已！但是在Python中你只需要做这些。可用的函数包括ANOVA、T检验、情感分析和PCA，Tableau也曾多次提到，可能会有更多的函数即将推出。你可以在这里找到文档：[https://tableau.github.io/TabPy/docs/tabpy-tools.html](https://tableau.github.io/TabPy/docs/tabpy-tools.html)。
- en: 'But let’s walk through the steps:'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 但让我们一步步走过这些步骤：
- en: 'In your Jupyter Notebook, execute `tabpy-deploy-models` and see that the four
    functions are installed:'
  id: totrans-435
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的Jupyter Notebook中，执行`tabpy-deploy-models`并查看是否安装了四个函数：
- en: '![](img/B18435_15_54.png)'
  id: totrans-436
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18435_15_54.png)'
- en: 'Figure 15.54: Deploying TabPy default models'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.54：部署TabPy默认模型
- en: You can double-check this by typing `http://localhost:9004/endpoints` in your
    browser, where you should see all deployed models.
  id: totrans-438
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以通过在浏览器中输入`http://localhost:9004/endpoints`来进行二次确认，你应该能看到所有已部署的模型。
- en: 'And that’s it; calling the function in a calculated field in Tableau is now
    as easy as the following (using `ttest` as an example function being called):'
  id: totrans-439
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 就是这样；在Tableau中调用计算字段中的函数现在变得像下面这样简单（以调用`ttest`函数为例）：
- en: '[PRE26]'
  id: totrans-440
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'I challenge you to compare the Sentiment Score from the TabPy default deployed
    model with the one we created: do they differ? And if so, how?'
  id: totrans-441
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我挑战你将TabPy默认部署模型的情感得分与我们创建的模型进行比较：它们有区别吗？如果有，区别在哪里？
- en: 'From Python, you can connect directly to, for example:'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 从Python中，你可以直接连接到，例如：
- en: DataRobot ([https://www.tableau.com/solutions/datarobot](https://www.tableau.com/solutions/datarobot))
  id: totrans-443
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DataRobot ([https://www.tableau.com/solutions/datarobot](https://www.tableau.com/solutions/datarobot))
- en: Dataiku ([https://www.dataiku.com/partners/tableau/](https://www.dataiku.com/partners/tableau/))
  id: totrans-444
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Dataiku ([https://www.dataiku.com/partners/tableau/](https://www.dataiku.com/partners/tableau/))
- en: MATLAB ([https://www.mathworks.com/products/reference-architectures/tableau.html](https://www.mathworks.com/products/reference-architectures/tableau.html))
  id: totrans-445
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MATLAB ([https://www.mathworks.com/products/reference-architectures/tableau.html](https://www.mathworks.com/products/reference-architectures/tableau.html))
- en: These are all paid third-party tools that help make your data analysis easier.
    And if you can make a connection from R and Python to another external tool, you
    can also leverage that capability back to Tableau via Rserve and TabPy, respectively.
    If you are interested in this type of connection or if you want to refresh the
    topic of deploying functions, you can check out this video – [https://youtu.be/0BN_Y2CxdYY](https://youtu.be/0BN_Y2CxdYY)
    – in which Nathan Mannheimer, a former product manager for advanced analytics
    at Tableau, explains everything we have discussed as well.
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 这些都是付费的第三方工具，有助于简化您的数据分析工作。如果您能将 R 和 Python 连接到其他外部工具，还可以通过 Rserve 和 TabPy 分别将这些功能带回
    Tableau。如果您对这种连接感兴趣，或者想刷新部署函数的相关内容，可以查看这个视频——[https://youtu.be/0BN_Y2CxdYY](https://youtu.be/0BN_Y2CxdYY)——在视频中，Tableau
    前高级分析产品经理 Nathan Mannheimer 也解释了我们讨论的所有内容。
- en: What are your personal goals with programming integration? If you have a great
    idea, feel free to share it with the Tableau community.
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 您在编程集成方面的个人目标是什么？如果您有很棒的想法，欢迎与 Tableau 社区分享。
- en: Honing your R and Python skills
  id: totrans-448
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提升您的 R 和 Python 技能
- en: Some of you might feel overwhelmed by using code and are looking for a simpler
    way to learn before using R or Python in Tableau. The website [www.geeksforgeeks.org](http://www.geeksforgeeks.org)
    introduces you to both and lets you practice on-site programming without any installation.
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 有些人可能会觉得使用代码很有压力，正在寻找一种更简单的学习方式，在使用 R 或 Python 之前先入门。在网站 [www.geeksforgeeks.org](http://www.geeksforgeeks.org)
    上，您可以了解这两种语言，并在网站上进行编程练习，无需安装任何工具。
- en: Einstein Discovery
  id: totrans-450
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 爱因斯坦发现
- en: 'If you are a Salesforce user and bought the Einstein Discovery license, you
    can use another out-of-the-box set of models. AI-driven models ship with Einstein
    Discovery and can be integrated with Tableau workflows. This combination can be
    leveraged to generate powerful insights for your Salesforce data. You can, for
    example, forecast sales from data in Salesforce and load it directly into Tableau,
    then share those insights on your known Tableau Server instance and hence keep
    all dashboards in one place. Since Salesforce and Tableau are both part of the
    Salesforce suite, I wanted to mention this; however, it is also yet another kind
    of software that requires additional licenses, and therefore I decided not to
    go in-depth on its use (indeed, with what you’ve learned in this chapter you can
    replicate much of the functionality with none of the additional cost). If you
    are interested in learning more, I recommend you check out the following page
    and subpages on tableau.com: [https://www.tableau.com/products/einstein-discovery](https://www.tableau.com/products/einstein-discovery).'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是 Salesforce 用户并购买了 Einstein Discovery 许可证，您可以使用另一个现成的模型集。AI 驱动的模型随 Einstein
    Discovery 提供，并可以与 Tableau 工作流集成。您可以利用这个组合为您的 Salesforce 数据生成强大的洞察。例如，您可以根据 Salesforce
    中的数据预测销售额，并将其直接加载到 Tableau 中，然后在您熟悉的 Tableau Server 实例上共享这些洞察，从而将所有仪表板集中在一个地方。由于
    Salesforce 和 Tableau 都是 Salesforce 套件的一部分，我想提一下这一点；不过，它仍然是另一种需要额外许可证的软件，因此我决定不深入探讨其使用（事实上，凭借本章所学，您可以以零额外成本复制大部分功能）。如果您有兴趣深入了解，我建议您访问
    tableau.com 上以下页面及子页面：[https://www.tableau.com/products/einstein-discovery](https://www.tableau.com/products/einstein-discovery)。
- en: Summary
  id: totrans-452
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter just scratched the surface regarding the options of working with
    R and Python. After finishing this chapter, you should now be able to connect
    to Python and R from Tableau and recognize and write the basic syntax for both
    programming languages in Tableau. Most importantly, you are now skilled enough
    to leverage the power of R and Python functions in Tableau from a simple mean
    calculation to regressions, all the way to implementing your own machine learning
    model. Although we covered the installation, integration, and workflow, as well
    as some of the more popular functions and use cases, there is much more to explore.
    In fact, the possibilities of Tableau’s programming integration remain largely
    uncharted territory in the BI community.
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 本章仅仅触及了与 R 和 Python 相关选项的皮毛。完成本章后，您应该能够从 Tableau 连接到 Python 和 R，并识别和编写这两种编程语言在
    Tableau 中的基本语法。最重要的是，您现在已经足够熟练，能够利用 R 和 Python 函数的强大功能，从简单的均值计算到回归分析，再到实现自己的机器学习模型。尽管我们讨论了安装、集成和工作流程，以及一些更常见的函数和使用案例，但还有很多内容值得探索。事实上，Tableau
    的编程集成的可能性在商业智能领域依然是一个大多数人未曾涉足的领域。
- en: The intrepid in data visualization are pushing the envelope, but there is much
    to be done. For those readers looking to enhance their career options, expertise
    in both packages could offer great advantages. And there is more to come!
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 数据可视化领域的勇者们正在不断推动边界，但仍有许多工作需要完成。对于那些希望提升职业发展的读者，掌握这两个工具包的专业知识将带来巨大的优势。而且，更多的内容即将推出！
- en: 'During the Tableau Conference 2023, the company sent a clear message, Tableau
    will continue to develop its advanced analytics and AI capabilities. Newly announced
    products like Tableau GPT and, with it, Tableau Pulse make me feel impatient for
    the amazing features to come. Find a summary of what to expect here: [https://www.tableau.com/blog/data-innovations-tableau-conference-2023](https://www.tableau.com/blog/data-innovations-tableau-conference-2023).'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 在 2023 年的 Tableau 大会期间，公司传递了一个明确的信号，Tableau 将继续发展其高级分析和人工智能能力。新宣布的产品，如 Tableau
    GPT 和 Tableau Pulse，让我迫不及待地期待即将到来的惊艳功能。在这里查看你可以期待的内容摘要：[https://www.tableau.com/blog/data-innovations-tableau-conference-2023](https://www.tableau.com/blog/data-innovations-tableau-conference-2023)。
- en: While the next chapter is sadly the last chapter of this book, we’ve still got
    time to explore another hot topic. Alongside advanced analytics, data governance
    is an increasingly useful area to explore. Regulations and increasing data security
    risks force companies to put more emphasis on well-structured guidelines and quality
    checks. We will introduce you to the other side of Tableau in *Chapter 16*, *Developing
    Data Governance Practices*.
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然下一章不幸是本书的最后一章，但我们仍有时间探索另一个热门话题。除了高级分析，数据治理是一个日益重要的领域。法规和不断增加的数据安全风险迫使公司更加重视结构良好的指导方针和质量检查。在*第16章*，*开发数据治理实践*中，我们将向你介绍
    Tableau 的另一面。
- en: Learn more on Discord
  id: totrans-457
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Discord 上了解更多
- en: 'To join the Discord community for this book – where you can share feedback,
    ask questions to the author, and learn about new releases – follow the QR code
    below:'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 要加入本书的 Discord 社区——在这里你可以分享反馈、向作者提问，并了解新版本发布——请扫描下面的二维码：
- en: '[https://packt.link/tableau](https://packt.link/tableau)'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/tableau](https://packt.link/tableau)'
- en: '![](img/QR_Code2044012316175764640.png)'
  id: totrans-460
  prefs: []
  type: TYPE_IMG
  zh: '![](img/QR_Code2044012316175764640.png)'
