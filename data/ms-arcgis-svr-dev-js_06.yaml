- en: Chapter 6. Charting Your Progress
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章. 绘制进度图表
- en: Displaying data geographically provides users with locational awareness, but
    some want to see more than just dots on a map and some numbers. They want to see
    how the data in each location compares, both across the map, and within a location.
    Other methods of displaying data, such as charts and graphs, can provide additional
    information.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在地理上显示数据为用户提供位置意识，但有些人想看到的不仅仅是地图上的点和一些数字。他们想看到每个位置的数据如何进行比较，无论是在地图上还是在位置内部。其他显示数据的方法，如图表和图形，可以提供更多信息。
- en: Charts and graphs are big business. Companies spend millions of dollars creating
    executive dashboards, which are a mix of charts and graphs connected to company
    data and metrics. They work because humans aren't as good at processing large,
    abstract numbers as computers, but they do better at processing data visually.
    Good charts and graphs provide comparable data at a glance, in a way anyone can
    understand.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 图表和图形是商业的大事。公司花费数百万美元创建执行仪表板，这些仪表板是图表和图形的组合，与公司数据和指标相连。它们之所以有效，是因为人类在处理大量抽象数字方面不如计算机，但在处理视觉数据方面做得更好。好的图表和图形可以一目了然地提供可比数据，任何人都能理解。
- en: 'In this chapter, we shall learn:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习：
- en: How to create charts and graphs using tools provided by the ArcGIS JavaScript
    API and the Dojo framework
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用ArcGIS JavaScript API和Dojo框架提供的工具创建图表和图形
- en: How to implement the same charts and graphs using `D3.js`
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用`D3.js`实现相同的图表和图形
- en: How to add an external library such as `D3.js` as an AMD module
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何添加外部库如`D3.js`作为AMD模块
- en: Mixing graphs into our maps
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将图形混合到我们的地图中
- en: As we have learned before, the **ArcGIS JavaScript API** contains more than
    tools to create maps and text. Built on top of the Dojo framework, the ArcGIS
    API comes with many user controls and widgets to help you present data. We can
    create dynamic tables, charts, graphs, and other data visualizations.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前所学的，**ArcGIS JavaScript API** 不仅包含创建地图和文本的工具。建立在Dojo框架之上，ArcGIS API附带了许多用户控件和小部件，以帮助您展示数据。我们可以创建动态表格、图表、图形和其他数据可视化。
- en: But you are not limited to the charting and graph tools provided by API. Using
    Dojo's AMD style, you can incorporate other libraries outside the framework into
    your widget's build, and load them as they are needed. If you work with team members
    who are more familiar with a library like `D3.js`, you can load the library asynchronously
    into your widget and let the other person develop the graphics.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 但您不仅限于API提供的图表和图形工具。使用Dojo的AMD风格，您可以将框架之外的库集成到小部件的构建中，并在需要时加载它们。如果您与更熟悉像`D3.js`这样的库的团队成员合作，您可以将库异步加载到您的组件中，并让其他人开发图形。
- en: In this chapter, we'll explore both internal and external graphics libraries
    to add graphs to our data. We'll use the `dojox/charting` ([http://dojotoolkit.org/reference-guide/1.10/dojox/charting.html](http://dojotoolkit.org/reference-guide/1.10/dojox/charting.html))
    modules packaged with the ArcGIS JavaScript API, We'll also implement the graphs
    with `D3.js` ([http://d3js.org](http://d3js.org)), a popular data visualization
    library.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨内部和外部图形库，以将图形添加到我们的数据中。我们将使用ArcGIS JavaScript API中打包的`dojox/charting`
    ([http://dojotoolkit.org/reference-guide/1.10/dojox/charting.html](http://dojotoolkit.org/reference-guide/1.10/dojox/charting.html))模块，我们还将使用`D3.js`
    ([http://d3js.org](http://d3js.org))实现图形，这是一个流行的数据可视化库。
- en: Our story continues
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们的故事还在继续
- en: Our clients from the Y2K society called with another request. They don't like
    the tables we've added to our census popups. All the big numbers overwhelm some
    of the users. They would rather see the data represented in graphs, so that the
    user can see the relationships within the data.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Y2K协会的客户又提出了另一个请求。他们不喜欢我们添加到人口弹出窗口中的表格。所有的大数字让一些用户感到不知所措。他们更愿意看到数据以图形的形式表示，这样用户就可以看到数据之间的关系。
- en: The Y2K society specifically requested pie charts for ethnic and gender data.
    We can use any color for the ethnic data, but for gender, they made specific color
    requests. They want to use a horizontal bar chart for the age data because they've
    seen population data shown that way and they liked the look. They would like some
    of the other data graphed and charted as well, but they are willing to leave how
    that's done to our discretion.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Y2K协会特别要求为种族和性别数据提供饼图。我们可以为种族数据使用任何颜色，但对于性别，他们提出了具体的颜色要求。他们想使用水平条形图来表示年龄数据，因为他们看到人口数据以这种方式展示，并且喜欢这种外观。他们希望其他一些数据也能以图表和图形的形式展示，但他们愿意将如何展示的决定权交给我们。
- en: For this round, we're going to try two different approaches and see which one
    the client prefers. We'll create charts using the two libraries with the same
    data, add them to the census data popups, and see which one the client prefers.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一轮中，我们将尝试两种不同的方法，看看客户更喜欢哪一种。我们将使用这两个库以相同的数据创建图表，并将它们添加到人口普查数据弹出窗口中，看看客户更喜欢哪一个。
- en: Using dojox charting
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用dojox图表
- en: We should first look inside the ArcGIS API for JavaScript to see what it has
    to offer. We can access a host of charting resources with `dojox/charting`. The
    modules allow you to draw line graphs, pie charts, bar charts, and a whole host
    of other graphs and charts in a browser. It contains numerous canned themes to
    show your data, and it can be extended with your custom themes as well. The charting
    libraries can render in **Scalable Vector Graphics** (**SVG**), **Vector Markup
    Language** (**VML**), Silverlight, and Canvas, making them both progressive and
    backwards-compatible for older browsers like IE7.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先应该查看ArcGIS API for JavaScript，看看它有什么可以提供的。我们可以使用`dojox/charting`访问一系列图表资源。这些模块允许您在浏览器中绘制线形图、饼图、柱状图以及大量其他图表。它包含许多预定义的主题来展示您的数据，并且可以扩展以使用您自定义的主题。图表库可以在**可缩放矢量图形**（**SVG**）、**矢量标记语言**（**VML**）、Silverlight和Canvas上渲染，这使得它们既适用于较新的浏览器，也适用于像IE7这样的旧浏览器。
- en: Like most Dojo components, `dojox/charting` can render charts either declaratively
    within your HTML, or programmatically through JavaScript. Declarative charting
    takes advantage of the `data-dojo` attributes. In the exercises that follow, we'll
    explore the programmatic examples, since they are more dynamic and easier to troubleshoot
    when things go wrong.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 与大多数Dojo组件一样，`dojox/charting`可以在HTML中声明性地渲染图表，也可以通过JavaScript编程方式渲染。声明性图表利用了`data-dojo`属性。在接下来的练习中，我们将探索编程示例，因为它们更动态，当出现问题时更容易调试。
- en: Creating a chart in JavaScript
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在JavaScript中创建图表
- en: 'There is no one module for `dojox/charting` that will take care of all your
    graphing needs. These four major classes of modules within `dojox/charting` can
    be loaded to create a unique chart or graph, and add new looks and functionality:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`dojox/charting`没有单一的模块可以处理您所有的绘图需求。`dojox/charting`中的这四个主要模块类可以加载以创建独特的图表或图形，并添加新的外观和功能：'
- en: The chart object
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图表对象
- en: The chart style
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图表样式
- en: The chart theme
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图表主题
- en: The chart actions and effects
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图表动作和效果
- en: 'The following is a sample loading of each of the four module types, in order:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对四种模块类型按顺序加载的示例：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The chart object
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图表对象
- en: 'The chart object, loaded with the `dojox/charting/Chart` module, is the main
    object you''ll use to create and modify your chart. Almost all of your your customizations
    will be run through this object. The chart object is created with a reference
    to an HTML element on the page, either by a node or by a string matching the id
    of a node. In the following code, you can see an example that shows the creation
    of a simple chart:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图表对象，加载了`dojox/charting/Chart`模块，是您创建和修改图表的主要对象。几乎所有的自定义设置都将通过此对象执行。图表对象通过页面上的HTML元素创建，可以是节点或与节点id匹配的字符串。在下面的代码中，您可以看到一个创建简单图表的示例：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the preceding code, a line graph is produced with values in a series that
    increase from `1` to `21`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，生成了一条线形图，其中一系列的值从`1`增加到`21`。
- en: The construction of the chart object can also accept an options object. In these
    options, you can add the map title, and control elements, such as the title text,
    position, font, color, and the gap between the title and the graph.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图表对象的构建也可以接受一个选项对象。在这些选项中，您可以添加地图标题和控制元素，例如标题文本、位置、字体、颜色以及标题和图表之间的间隙。
- en: 'The `dojox/charting` library also includes a 3D charting library, called `dojox/charting/Chart3D`.
    The object can render three dimensional charts and graphs, which can be rotated
    and panned to get a good perspective on your data. In the following code, you
    can see an example of a 3D plotted bar chart:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`dojox/charting`库还包括一个名为`dojox/charting/Chart3D`的3D图表库。该对象可以渲染三维图表和图形，可以旋转和缩放以获得对数据的良好视角。在下面的代码中，您可以看到一个3D柱状图的示例：'
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the preceding code, a 3D bar graph has been produced with three sets of data
    colored red, green, and blue. These values are then viewed through a camera that
    is rotated somewhat to add perspective to the images.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，已经生成了一个3D柱状图，有三组数据分别用红色、绿色和蓝色着色。然后通过一个稍微旋转的相机来查看这些值，以增加图像的透视感。
- en: The chart style
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图表样式
- en: 'The chart style describes what kind of chart we''re creating. It defines whether
    we''re loading the data as a line chart or a bar chart, a pie chart or a scatter
    plot. For two dimensional charts, you''ll find these styles in the `dojox/charting/plot2d`
    folder. Chart styles can be grouped into five main categories, as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图表样式描述了我们正在创建的图表类型。它定义了我们是将数据加载为折线图还是柱状图、饼图还是散点图。对于二维图表，你可以在`dojox/charting/plot2d`文件夹中找到这些样式。图表样式可以分为五大主要类别，如下所示：
- en: '**Lines**: These are the typical line charts that may or may not show the individual
    data points.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**线条**：这些是典型的折线图，可能显示或不显示个别数据点。'
- en: '**Stacked Lines**: Similar to line charts, but the heights are stacked on top
    of each other. These allow the user to compare the combined effect of plotted
    data over time, as well as changes in ratios.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**堆叠线**：与折线图类似，但高度是堆叠在一起的。这些允许用户比较随时间变化的绘图数据的综合效果以及比例的变化。'
- en: '**Bars**: Compare values by the width of rows on a graph.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**柱状图**：通过图表上的行宽比较值。'
- en: '**Columns**: Compare quantities by their related column heights.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**柱状图**：通过相关柱的高度比较数量。'
- en: '**Miscellaneous**: When other charts cannot be grouped together in a category
    like the previous ones, they fall into this category. This group includes pie
    charts, scatter plots, and bubble plots.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**杂项**：当其他图表无法像之前那样按类别分组时，它们就会归入这个类别。这个组包括饼图、散点图和气泡图。'
- en: If you are using the 3D charts, the styles for these charts can be found in
    the `dojox/charting/plot3d` folder. To take full advantage of the 3D styles, it
    is best to load the `dojox/gfx3d/matrix` module for 3D graphic effects. The `matrix`
    module allows you to rotate the 3D graph in order to get a good perspective of
    the 3D charts.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用3D图表，这些图表的样式可以在`dojox/charting/plot3d`文件夹中找到。为了充分利用3D样式，最好加载`dojox/gfx3d/matrix`模块以实现3D图形效果。`matrix`模块允许你旋转3D图形，以便获得3D图表的良好视角。
- en: The chart theme
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图表主题
- en: Chart themes describe the colors, shading, and text formatting of text elements
    within your charts and graphs. The Dojo framework comes with a large number of
    predefined themes that you can choose from, in `dojox/charting/themes`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图表主题描述了图表和图形中文本元素的颜色、阴影和文本格式。Dojo框架附带了许多预定义的主题，你可以从中选择，在`dojox/charting/themes`中。
- en: Note
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can see what the different themes look like by going to [http://archive.dojotoolkit.org/nightly/checkout/dojox/charting/tests/test_themes.html](http://archive.dojotoolkit.org/nightly/checkout/dojox/charting/tests/test_themes.html).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过访问[http://archive.dojotoolkit.org/nightly/checkout/dojox/charting/tests/test_themes.html](http://archive.dojotoolkit.org/nightly/checkout/dojox/charting/tests/test_themes.html)来查看不同的主题外观。
- en: 'The following example is code which loads a chart with a `MiamiNice` theme.
    In this example, we have loaded a line chart with an `x` and `y` axis. We set
    the theme to `MiamiNice` using the `setTheme()` method. Then, we added the series
    of numbers to plot and render the chart:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例是加载具有`MiamiNice`主题的图表的代码。在这个例子中，我们加载了一个带有`x`轴和`y`轴的折线图。我们使用`setTheme()`方法将主题设置为`MiamiNice`。然后，我们添加了要绘制和渲染的数字系列：
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If you don''t find a theme that works for you, or if you have specific colors
    and styling that you need to adhere to in your application design, you can use
    the `SimpleTheme` object to help define your custom theme. `SimpleTheme` is based
    on the `GreySkies` theme, but can be extended with other colors and any formatting
    you choose. You do not need to define every attribute of your theme, since `SimpleTheme`
    applies whatever defaults you haven''t overridden with your custom style. You
    can see a sample of the code that implements `SimpleTheme` here:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你找不到适合你的主题，或者如果你需要在应用程序设计中遵循特定的颜色和样式，你可以使用`SimpleTheme`对象来帮助定义你的自定义主题。`SimpleTheme`基于`GreySkies`主题，但可以扩展为其他颜色和任何你选择的格式。你不需要定义主题的每个属性，因为`SimpleTheme`应用了所有未用自定义样式覆盖的默认值。你可以在以下位置查看实现`SimpleTheme`的代码示例：
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Tip
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Themes typically use no more than five colors in their palette. If you need
    to add more colors for a set of data, `push()` a color hex string into the theme's
    `.color` array, but do it prior to setting the theme of the chart.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 主题通常在其调色板中使用不超过五种颜色。如果你需要为数据集添加更多颜色，将颜色十六进制字符串`push()`到主题的`.color`数组中，但必须在设置图表主题之前这样做。
- en: Chart actions and effects
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图表动作和效果
- en: Creating appealing charts and graphs might be fun for you, but users in the
    modern web era expect to interact with the data. They expect chart elements to
    glow, grow, and change color when they hover over them. They expect things to
    happen when they click on a pie chart.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 创建吸引人的图表和图形可能对你来说很有趣，但现代网络时代的用户期望与数据进行交互。他们期望当鼠标悬停在图表元素上时，图表元素会发光、生长并改变颜色。他们期望在点击饼图时发生某些事情。
- en: 'The `dojox/charting/action2d` contains chart actions and effects that make
    charts more educational and interactive. You don''t have to overdo the actions
    and make your graph do everything. You can simply apply the events you need to
    get the effect across to the users. The following is a list of the basic actions
    and effects, along with descriptions:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`dojox/charting/action2d` 包含使图表更具教育性和交互性的图表动作和效果。你不必过度使用动作，让你的图表做所有的事情。你可以简单地应用你需要的事件来让用户感受到效果。以下是一个基本动作和效果的列表，以及相应的描述：'
- en: '`Highlight`: This adds a highlight to the chart or graph element you select.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Highlight`：这会在你选择的图表或图表元素上添加高亮。'
- en: '`Magnify`: This lets you magnify a portion of the chart or graph for easier
    viewing.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Magnify`：这允许你放大图表或图形的一部分以便更容易查看。'
- en: '`MouseIndicator`: You can drag your mouse over features on the graph to show
    more data.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MouseIndicator`：你可以将鼠标拖动到图上的特征上以显示更多数据。'
- en: '`MouseZoomAndPan`: This lets you zoom and pan over your graph using the mouse.
    The scroll wheel zooms in and out, while click and drag lets you pan around the
    graph.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MouseZoomAndPan`：这允许你使用鼠标缩放和平移图表。滚动轮缩放和缩小，而点击和拖动则允许你在图表周围平移。'
- en: '`MoveSlice`: When using a pie chart, clicking on a slice can move it out from
    the rest of the chart.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MoveSlice`：当使用饼图时，点击一个切片可以将其从图表的其余部分移出。'
- en: '`Shake`: This creates a shaking action on an element on the chart.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Shake`：这会在图表上的一个元素上创建震动动作。'
- en: '`Tooltip`: Hovering the mouse cursor over a chart element shows more information.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Tooltip`：将鼠标光标悬停在图表元素上会显示更多信息。'
- en: '`TouchIndicator`: This provides touch actions that display data on charts.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TouchIndicator`：这提供了在图表上显示数据的触摸动作。'
- en: '`TouchZoomAndPan`: This gives you zoom and pan ability using touch gestures.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TouchZoomAndPan`：这提供了使用触摸手势进行缩放和平移的能力。'
- en: 'Unlike chart styles and themes, where you attach the chart component to the
    chart object, chart actions are called separately. The chart action constructor
    loads the new chart as the first argument, and optional parameters for the second
    argument. Note that the actions are created before the chart is rendered. You
    can see an example in the following code:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 与图表样式和主题不同，你将图表组件附加到图表对象上，图表动作是单独调用的。图表动作构造函数将新图表作为第一个参数加载，并将可选参数作为第二个参数。请注意，动作是在图表渲染之前创建的。你可以在以下代码中看到一个示例：
- en: '[PRE5]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the preceding example, a chart was created, and a tooltip was added showing
    the population as you hovered over a graph feature.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，创建了一个图表，并添加了一个工具提示，显示当你悬停在图表特征上时的人口数据。
- en: Using Dojox Charts in popups
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在弹出窗口中使用 Dojox 图表
- en: Combining the dojox/charting modules with the ArcGIS API for JavaScript provides
    many ways to display data. One way to deliver feature data through charts is through
    the map's `infoWindow`. The infoWindow uses an HTML template for its content,
    and that can provide the hooks we need to attach our graphs.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 将 dojox/charting 模块与 ArcGIS API for JavaScript 结合使用提供了许多显示数据的方式。通过地图的 `infoWindow`
    传递特征数据的一种方式是通过图表。信息窗口使用 HTML 模板作为其内容，这可以提供我们需要的钩子来附加我们的图表。
- en: One issue when adding graphs to the infoWindow is determining when to draw the
    graph. Thankfully, there's an event for that. The map's `infoWindow` fires a `selection-changed`
    event whenever the selected feature graphic is changed, either by clicking on
    another graphic, or by clicking on the next and previous buttons. We can assign
    an event listener to that event, look at the selected graphic and, if it has the
    data we need, we can draw the graphs.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 当将图表添加到信息窗口时，一个问题是在何时绘制图表。幸运的是，有一个事件可以处理这个问题。地图的 `infoWindow` 在所选特征图形改变时触发 `selection-changed`
    事件，无论是通过点击另一个图形，还是通过点击下一个和上一个按钮。我们可以为该事件分配事件监听器，查看所选图形，如果它包含我们所需的数据，我们就可以绘制图表。
- en: Using Dojo Charts in our application
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在我们的应用程序中使用 Dojo 图表
- en: Our census application from previous chapters could use some visual appeal when
    it comes to presenting data. We'll make our first attempt at adding charts and
    graphs using the `dojox/charting` library. We'll apply the graphs to the map popup
    whenever the user clicks on a census block group, county, or state. The census
    blocks don't have enough information for us to graph.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们的普查应用程序在呈现数据时可能需要一些视觉吸引力。我们将使用 `dojox/charting` 库尝试添加图表和图形。每当用户点击普查区块组、县或州时，我们将应用图形到地图弹出窗口。普查区块没有足够的信息供我们进行图形化。
- en: Loading the modules
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加载模块
- en: 'Since our graphs are currently limited to our census application, we need to
    update the modules in our custom `y2k/Census` module definition:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的图表目前仅限于我们的普查应用程序，我们需要更新自定义 `y2k/Census` 模块定义中的模块：
- en: We'll start by adding `dojo/on` to handle the map popup events.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先添加 `dojo/on` 来处理地图弹出事件。
- en: We'll add the default chart object along with a pie chart and a bar chart module.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将添加默认图表对象以及饼图和柱状图模块。
- en: We'll add the `PrimaryColors` theme and `SimpleTheme` to create our own custom
    color template.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将添加 `PrimaryColors` 主题和 `SimpleTheme` 来创建我们自己的自定义颜色模板。
- en: Finally, we'll add a highlight and a tooltip action to let the user read the
    results when they hover over parts of the graphs.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将添加高亮和工具提示操作，以便用户在悬停在图表的部分时阅读结果。
- en: 'It should look a bit like the following:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它应该看起来有点像以下内容：
- en: '[PRE6]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Preparing the popup
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备弹出窗口
- en: 'As part of our plan, we want the charts and graphs to render in the map''s
    `infowindow` when the features are clicked. We''re only interested in showing
    the charts and graphs for the currently selected feature, so we''ll add an event
    handler to run every time the `infoWindow` object''s `selection-change` event
    fires. We''ll call it `_onInfoWindowSelect()`. After we write a stub function
    for that in our `Census.js` module, we''ll add the event handler in the `_onMapLoad()`
    method. We then know the map and its popup are available. It should look something
    like the following code:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 作为我们计划的一部分，我们希望当特征被点击时，图表和图形将在地图的 `infowindow` 中渲染。我们只对显示当前选中特征的图表和图形感兴趣，因此我们将添加一个事件处理程序，每次
    `infoWindow` 对象的 `selection-change` 事件触发时都会运行。我们将称之为 `_onInfoWindowSelect()`。在我们为
    `Census.js` 模块编写该函数的存根后，我们将在 `_onMapLoad()` 方法中添加事件处理程序。这样我们就知道地图及其弹出窗口是可用的。它应该类似于以下代码：
- en: '[PRE7]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The `infoWindow` object''s `selection-change` event fires when features are
    both added and removed from the selection. When we examine the `infoWindow` object''s
    selected feature, we must test to find out if it contains a feature. If one is
    present, we can process that feature''s attributes and add the related graphics
    to the popup. The `infoWindow` function should look like the following:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 当特征被添加到或从选择中删除时，`infoWindow` 对象的 `selection-change` 事件会触发。当我们检查 `infoWindow`
    对象的选中特征时，我们必须测试以确定它是否包含特征。如果存在一个，我们可以处理该特征的属性并将相关的图形添加到弹出窗口。`infoWindow` 函数应类似于以下内容：
- en: '[PRE8]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Updating the HTML template
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更新 HTML 模板
- en: 'In order to add graphs to our popups, we need to update the HTML templates
    to include element IDs. The JavaScript code then looks for a place to render the
    graph and we can tell it to render it in the element where the `id` is added.
    Open `CensusBlockGroup.html` to look at the popup template. Find the *Ethnic groups*
    section and delete the entire table underneath. You can comment it out for testing
    purposes, but we don''t want everybody to download all that wasted content when
    we put this application into production. Replace the table with a `div` that has
    an `id` equal to `ethnicgraph`. It should look like the following:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将图形添加到我们的弹出窗口中，我们需要更新 HTML 模板以包含元素 ID。JavaScript 代码将寻找渲染图形的位置，我们可以指示它在添加了
    `id` 的元素中渲染。打开 `CensusBlockGroup.html` 来查看弹出窗口模板。找到 *种族群体* 部分，并删除其下的整个表格。您可以在测试目的下将其注释掉，但当我们把此应用程序投入生产时，我们不希望每个人都下载所有这些浪费的内容。用具有
    `id` 等于 `ethnicgraph` 的 `div` 替换表格。它应该看起来像以下内容：
- en: '[PRE9]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Repeat the same under the `Males/Females` and the `Ages` sections, replacing
    those tables with `div` elements identified as `gendergraph` and `agegraph` respectively.
    If you choose to show other graphs, follow the same guidelines. Repeat with the
    `CountyCensus.html` and the `StateCensus.html` templates as well.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Males/Females` 和 `Ages` 部分下重复相同的操作，分别用 `div` 元素替换那些表格，这些元素分别标识为 `gendergraph`
    和 `agegraph`。如果您选择显示其他图形，请遵循相同的指南。同样，对 `CountyCensus.html` 和 `StateCensus.html`
    模板也进行重复操作。
- en: Processing the data
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理数据
- en: If you look back through the examples from other `dojox/charting` operations,
    you'll notice how data is added to the chart in an array. However, the data we
    get from the map service isn't in that format. We need to process the attribute
    data into a format that the `dojox/charting` modules can use.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你回顾一下其他 `dojox/charting` 操作的示例，你会注意到数据是以数组的形式添加到图表中的。然而，我们从地图服务中获得的数据并不是这种格式。我们需要将属性数据处理成
    `dojox/charting` 模块可以使用的格式。
- en: 'When passing data objects into `dojox/charting` charts and graphs, the graphs
    expect data to be plottable with `x` and `y` properties. Since we''re not comparing
    value changes over time or some other independent variable, we will add the numeric
    populations to our dependent variable `y`. The value of the tooltip text can be
    assigned to the JSON tooltip data property. You can see the resulting function
    in the following code:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 当将数据对象传递给 `dojox/charting` 图表和图形时，图表期望数据具有可绘制的 `x` 和 `y` 属性。由于我们不是比较价值随时间变化或某些其他独立变量的变化，我们将数值人口添加到我们的因变量
    `y` 中。工具提示文本的值可以分配给 JSON 工具提示数据属性。你可以在以下代码中看到生成的函数：
- en: '[PRE10]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `+` symbol in front of the attribute in the population objects is a shortcut
    to convert a value into a number, if it isn't one already. You get the same effect
    using the `parseInt()` or `parseFloat()` methods.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在人口对象中的属性前面的 `+` 符号是一个快捷方式，用于将值转换为数字，如果它还不是数字的话。你可以使用 `parseInt()` 或 `parseFloat()`
    方法得到相同的效果。
- en: Now that we're able to transform our data into a format useable for our graph
    widget, we can call our `ethnicData()`, `genderData()`, and `ageData()` methods.
    We'll extract the data we need from the feature attributes and put it in an array
    format to be used by the `chart` module.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们能够将我们的数据转换成可用于我们的图形小部件的格式，我们可以调用我们的 `ethnicData()`、`genderData()` 和 `ageData()`
    方法。我们将从特征属性中提取所需的数据，并将其放入数组格式，以便由 `chart` 模块使用。
- en: Parsing the ethnic data
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解析种族数据
- en: 'We''re interested in extracting the ethnic makeup of the population in the
    census area. We''re interested in the `WHITE`, `BLACK`, `AMER_ES`, `ASIAN`, `HAWN_PI`,
    `HISPANIC`, `OTHER`, and `MULT_RACE` fields that are present in the state, county,
    and block group feature classes. Since we have a lot of fields that may or may
    not be in the feature class, and we''ll be adding them the same way, we''ll create
    an array of field names and the corresponding labels we want to add. See the following
    code:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对提取人口普查区域人口的种族构成感兴趣。我们感兴趣的是州、县和街区组特征类中存在的 `WHITE`、`BLACK`、`AMER_ES`、`ASIAN`、`HAWN_PI`、`HISPANIC`、`OTHER`
    和 `MULT_RACE` 字段。由于我们有很多字段可能存在于特征类中，或者可能不存在，我们将以相同的方式添加它们，因此我们将创建一个字段名称和我们要添加的相应标签的数组。请参见以下代码：
- en: '[PRE11]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now that we have the fields and labels, let''s add the information we need
    to the data array. The `dojox/charting` library expects graphical data in either
    a numerical list or in a JSON object with a specific format. Since we want to
    add labels to our data in a pie chart, we''ll create the complex objects:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了字段和标签，让我们将所需的信息添加到数据数组中。`dojox/charting` 库期望图形数据为数值列表或具有特定格式的 JSON 对象。由于我们想在饼图中添加标签到我们的数据，我们将创建复杂对象：
- en: '[PRE12]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Parsing the gender data
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解析性别数据
- en: 'We''ll calculate the gender data in a similar way. We are only interested in
    the `MALES` and `FEMALES` fields in the feature attributes. We''re going to add
    them to the list of JSON objects with the same format as shown in the preceding
    code. It should look like the following:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将以类似的方式计算性别数据。我们只对特征属性中的 `MALES` 和 `FEMALES` 字段感兴趣。我们将它们添加到与前面代码中相同的格式的 JSON
    对象列表中。它应该看起来像以下这样：
- en: '[PRE13]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Parsing the age data
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解析年龄数据
- en: 'We''ll perform the same style of data manipulation for our `ageData()` method
    as we did with the `ethnicData()` method. We''ll collect the census data if it''s
    available for ages less than `5`, `5-17`, `18-21`, `22-29`, `30-39`, `40-49`,
    `50-64`, and `65` and up. We''ll then add the appropriate tooltip labels and return
    the resulting formatted data array. It should look as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将对 `ageData()` 方法执行与 `ethnicData()` 方法相同风格的数据处理。如果年龄小于 `5`、`5-17`、`18-21`、`22-29`、`30-39`、`40-49`、`50-64`
    和 `65` 岁及以上有可用的人口普查数据，我们将收集这些数据。然后，我们将添加适当的工具提示标签，并返回格式化的数据数组。它应该看起来如下：
- en: '[PRE14]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Showing the results
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 显示结果
- en: Now that we have the results in a format that we can use for the charts, we
    can load them into our charts. Our ethnic and gender graphs are both pie graphs,
    while the age graph is a horizontal bar graph. Let's look at what it takes to
    construct each. Any extra graphs you want to create with the rest of the data
    can be done in your own time.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经以我们可以用于图表的格式获得了结果，我们可以将它们加载到我们的图表中。我们的民族和性别图都是饼图，而年龄图是水平条形图。让我们看看构建每个图表需要什么。您可以在自己的时间里使用剩余的数据创建任何额外的图表。
- en: Ethnic graph
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 民族图
- en: 'We want a pie chart that fits within the popup for the ethnic graph. A radius
    of 90 pixels should fit nicely within the popup. We''re going to set the theme
    of the graph using `PrimaryColors`, one of the default themes in `dojox/charting`.
    We''ll also add the pie charting ability to the chart, and add the tooltip and
    highlight animations when the user hovers over the data. Finally, we''ll render
    the ethnic pie chart:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望一个饼图能够适应民族图的弹出窗口。90像素的半径应该可以很好地适应弹出窗口。我们将使用`PrimaryColors`，这是`dojox/charting`中的默认主题之一，来设置图表的主题。我们还将向图表添加饼图功能，并在用户悬停数据时添加工具提示和突出显示动画。最后，我们将渲染民族饼图：
- en: '[PRE15]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'When the application draws the ethnic graph, it should look like the following
    image:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序绘制民族图时，它应该看起来像以下图像：
- en: '![Ethnic graph](img/6459OT_06_01.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![民族图](img/6459OT_06_01.jpg)'
- en: Ethnic groups
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 民族群体
- en: Gender graph
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 性别图
- en: 'For the gender graph, we''re going to set up a similar pie graph to the ethnic
    graph. But, before we do, we''ll load a new theme to work with. We''ll create
    a `genderTheme` constructor from the `SimpleTheme` constructor, and add light
    pink for females, and light blue for males. We''ll then create the chart, add
    the new theme, and add everything else like we did in the ethnic graph. You can
    see this in the following code:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 对于性别图，我们将设置一个与民族图相似的饼图。但在我们这样做之前，我们将加载一个新的主题来使用。我们将从`SimpleTheme`构造函数创建一个`genderTheme`构造函数，并为女性添加浅粉色，为男性添加浅蓝色。然后我们将创建图表，添加新的主题，并添加与民族图相同的一切。您可以在以下代码中看到这一点：
- en: '[PRE16]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'When the application draws the gender graph, it should look something like
    the following image:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序绘制性别图时，它应该看起来像以下图像：
- en: '![Gender graph](img/6459OT_06_02.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![性别图](img/6459OT_06_02.jpg)'
- en: Age graph
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 年龄图
- en: 'We''ll create a bar chart graph for the age graph to show the age demographics.
    Unlike the pie chart, the bar chart doesn''t care about the radius, but prefers
    to know how long the bars can grow (`maxBarSize`), and how far to set them apart
    (gap). We''ll go ahead and use the `PrimaryColors` theme again for this object:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为年龄图创建一个条形图来显示年龄人口统计。与饼图不同，条形图不关心半径，而是更喜欢知道条形可以增长多长（`maxBarSize`），以及它们应该相隔多远（间隙）。我们将继续使用`PrimaryColors`主题来创建这个对象：
- en: '[PRE17]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'When you draw the `ageChart`, it should look something like the following image:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 当您绘制`ageChart`时，它应该看起来像以下图像：
- en: '![Age graph](img/6459OT_06_03.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![年龄图](img/6459OT_06_03.jpg)'
- en: Introducing D3.js
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍D3.js
- en: You can branch out beyond the ArcGIS JavaScript API and Dojo if you want to
    create jaw-dropping graphics. One popular JavaScript library you could use to
    create charts, graphs, and other data-driven visualizations is `D3.js`. `D3.js`
    was created by Mike Bostock of the New York Times to use HTML, SVG, CSS, and JavaScript
    to create interactive data-driven graphics. It reads data from HTML and renders
    it in the way you decide.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要创建令人惊叹的图形，可以超越ArcGIS JavaScript API和Dojo。一个流行的JavaScript库，您可以使用它来创建图表、图形和其他数据驱动的可视化，是`D3.js`。`D3.js`是由纽约时报的Mike
    Bostock创建的，用于使用HTML、SVG、CSS和JavaScript创建交互式数据驱动的图形。它从HTML读取数据，并以您决定的方式渲染。
- en: '`D3.js` development has taken off since it was first released to the public.
    The library is very versatile in that it doesn''t render just charts and graphs.
    It provides the building blocks to create charts, graphs, and other interactive
    graphics that can move and be styled like any HTML element. Even GIS maps in different
    projections can be shown on a webpage using `D3.js` and a file format called GeoJSON.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`D3.js`自首次公开发布以来，其发展势头迅猛。这个库非常灵活，因为它不仅渲染图表和图形。它提供了创建图表、图形和其他可以像任何HTML元素一样移动和样式的交互式图形的构建块。甚至可以使用`D3.js`和一种称为GeoJSON的文件格式在网页上显示不同投影的GIS地图。'
- en: 'For anyone with experience with jQuery, scripts written with `D3.js` behave
    in the same way. You can select HTML elements with the `d3.select()` or `d3.selectAll()`
    methods, which are similar to the jQuery base method. D3 commands can be chained
    one after another, which is also a favorite feature with many jQuery developers.
    In the following example, we''re using D3 to find elements with the class `addflair`
    using the `select()` method. We then add spans to the elements with related text
    content:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 对于有jQuery经验的任何人，使用`D3.js`编写的脚本的行为方式相同。您可以使用`d3.select()`或`d3.selectAll()`方法选择HTML元素，这些方法类似于jQuery基本方法。D3命令可以一个接一个地链接，这也是许多jQuery开发人员喜欢的功能之一。在以下示例中，我们使用D3通过`select()`方法查找具有`addflair`类的元素。然后我们向这些元素添加相关的文本内容：
- en: '[PRE18]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Adding the D3.js library with Dojo's AMD
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Dojo的AMD添加D3.js库
- en: 'Let''s say you want to add `D3.js` to your mapping application. You find the
    link to the `d3` library, and copy and paste it into your application like so:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您想将`D3.js`添加到您的地图应用中。您找到`d3`库的链接，并将其像这样复制并粘贴到您的应用中：
- en: '[PRE19]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: You cut and paste an example to test if it's going to work. You crank up your
    browser, and load your page. You wait patiently for everything to load, and it
    breaks. What happened?
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 您复制并粘贴一个示例来测试它是否可行。您打开浏览器，加载您的页面。您耐心地等待一切加载，然后它崩溃了。发生了什么？
- en: It turns out that the extra libraries loaded after the ArcGIS JavaScript API
    and interfered with the AMD library references. Let's look at a couple of solutions
    to load external libraries into an AMD-based application.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 结果表明，在ArcGIS JavaScript API之后加载的额外库干扰了AMD库引用。让我们看看一些将外部库加载到基于AMD的应用程序中的解决方案。
- en: Loading another library outside an AMD module
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在AMD模块外部加载另一个库
- en: If you are going to work with a JavaScript library outside an AMD module, it's
    best to load that library before you load the ArcGIS JavaScript API. You would
    use this if you're adding a map on top of an existing application previously written
    in another framework.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您打算在AMD模块之外与JavaScript库一起工作，最好在加载ArcGIS JavaScript API之前加载该库。如果您是在在另一个框架中先前编写的现有应用上添加地图，您将使用此方法。
- en: Loading another library within an AMD module
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在AMD模块内加载另一个库
- en: The other way to handle D3 and other external libraries in your AMD applications
    is to load them as AMD modules. You can treat them like any other Dojo-based module,
    and load them into memory only when necessary. This works well with libraries
    that you use sporadically and don't need at startup. It also works well with libraries
    that load all the functionality of the library into a single JavaScript object,
    such as `D3.js` or jQuery.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的AMD应用中处理D3和其他外部库的另一种方法是将其作为AMD模块加载。您可以像对待任何其他基于Dojo的模块一样对待它们，并且仅在必要时将它们加载到内存中。这对于您偶尔使用且不需要在启动时使用的库来说效果很好。它也适用于将库的所有功能加载到单个JavaScript对象中的库，例如`D3.js`或jQuery。
- en: 'To load an external library as an AMD module, you must first reference it in
    `dojoConfig` as a package, just like you did with your custom `Dojo` module in
    [Chapter 3](ch03.html "Chapter 3. The Dojo Widget System"), *The Dojo Widget System*.
    Adding your external library to the packages will tell Dojo''s `require()` and
    `define()` functions where to look for the libraries. Remember that, when listing
    the location of the library in the package, you reference the file folder of the
    JavaScript library, not the library directly. For D3, the `dojoConfig` script
    may look something like the following:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 要将外部库作为AMD模块加载，您必须首先在`dojoConfig`中将其作为包引用，就像您在[第3章](ch03.html "第3章。Dojo小部件系统")
    *《Dojo小部件系统》* 中对自定义`Dojo`模块所做的那样。将您的外部库添加到包中会告诉Dojo的`require()`和`define()`函数在哪里查找库。记住，当在包中列出库的位置时，您引用的是JavaScript库的文件夹，而不是库本身。对于D3，`dojoConfig`脚本可能看起来像以下这样：
- en: '[PRE20]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Once the library folder reference has been added to your `dojoConfig` variable,
    you can add it to any `require()` or `define()` statement. Loading the library
    into an AMD `require()` statement would look like the following:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦将库文件夹引用添加到您的`dojoConfig`变量中，您就可以将其添加到任何`require()`或`define()`语句中。将库加载到AMD
    `require()`语句中的样子如下：
- en: '[PRE21]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Using D3.js in our application
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在我们的应用中使用D3.js
- en: In our application, we will explore using D3 to add graphs to our application.
    We'll use it to replace parts of the `dojox/charting` code where we add the graphs
    to our map popup. Many of the steps will be similar, but some will be different.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用中，我们将探索使用D3向我们的应用添加图表。我们将用它来替换`dojox/charting`代码中添加到地图弹出窗口的部分。许多步骤将是相似的，但也有一些不同。
- en: Adding D3.js to the configuration
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将D3.js添加到配置中
- en: 'Since our application relies heavily on the Dojo framework, we will add our
    `D3.js` library with AMD. We''ll add the reference to D3 in our `dojoConfig.packages`
    list. The new `dojoConfig` script should look like the following:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的应用程序严重依赖于Dojo框架，我们将使用AMD添加我们的`D3.js`库。我们将在`dojoConfig.packages`列表中添加D3的引用。新的`dojoConfig`脚本应如下所示：
- en: '[PRE22]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now that our AMD code knows where to look for the `D3` library, we can add
    a reference to it in our census application. The `D3` library will then be available
    to our census widget, but it will not interfere with other applications that may
    have their own `d3` variable. Our `Census.js` code should look like the following:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在AMD代码知道在哪里查找`D3`库，我们可以在我们的普查应用程序中添加对它的引用。然后`D3`库将可用于我们的普查小部件，但它不会干扰可能有自己的`d3`变量的其他应用程序。我们的`Census.js`代码应如下所示：
- en: '[PRE23]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Preparing the popup
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备弹出窗口
- en: '`D3.js` should now be accessible in our widget, and we can prepare the popup
    to load the data. We''re going to set up our code in the same way we did when
    we loaded the `dojox/charting` modules. We''ll attach the same event to the map.`infoWindow`
    object''s `selection-change` event, and on that, we''ll run functions to manipulate
    and render our data.'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '`D3.js`现在应该在我们的小部件中可用，我们可以准备弹出窗口以加载数据。我们将以与加载`dojox/charting`模块相同的方式设置我们的代码。我们将把相同的事件附加到地图的`infoWindow`对象的`selection-change`事件上，然后在该事件上运行函数来操作和渲染我们的数据。'
- en: Note
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Refer to the *Preparing the popup* section in the dojox/charting portion of
    the chapter to get the code.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考章节中dojox/charting部分的**准备弹出窗口**部分以获取代码。
- en: As for the HTML popup templates for the block groups, counties, and states,
    we can make the same changes we made to the ones in the `dojox/charting` example.
    In keeping with best practices on the Internet, we will replace the `id` tags
    on the graphing `div` elements with class tags of the same name (ethnic groups
    get `class="ethnicgraph"`, for instance). This will cut down on the possibility
    of HTML `id` collision. Also, while Dojo widgets require either an HTML element
    or an `id` string, `D3.js` graphs can be added to elements found with any CSS
    selector.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 至于块组、县和州的HTML弹出模板，我们可以对`dojox/charting`示例中进行的相同更改。遵循互联网上的最佳实践，我们将用具有相同名称的类标签替换绘图`div`元素上的`id`标签（例如，种族群体获得`class="ethnicgraph"`）。这将减少HTML
    `id`冲突的可能性。此外，虽然Dojo小部件需要HTML元素或`id`字符串，但`D3.js`图表可以添加到任何CSS选择器找到的元素中。
- en: Processing our data
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理我们的数据
- en: When we collected the attribute data for the `dojox/Charting` modules, we had
    to arrange the attribute data into arrays so they could be consumed by the graphing
    modules. The same is true for `D3.js`. We will format the attributes into a list
    that can be read by the graphs.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们收集`dojox/Charting`模块的属性数据时，我们必须将属性数据排列成数组，以便它们可以被绘图模块消费。对于`D3.js`也是如此。我们将格式化属性为列表，以便图表可以读取。
- en: 'Unlike the `dojox/charting` library, `D3.js` doesn''t have name restrictions
    on the properties used by the graphing parts. You can give the properties more
    reasonable names. Functions in `D3.js` will be added to calculate graph values.
    Since much of our ethnic, gender, and age data is based on population and sorted
    by name, it makes sense to name those properties population and name, respectively:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 与`dojox/charting`库不同，`D3.js`对绘图部分使用的属性没有名称限制。你可以给属性起更合理的名字。`D3.js`中的函数将被添加来计算图表值。由于我们的大部分种族、性别和年龄数据基于人口并按名称排序，因此将那些属性分别命名为人口和名称是有意义的：
- en: '[PRE24]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: We add the property names and the population values to a list in the `formatAttributesForGraph()`
    method. That list will be graphed at a later time. We don't need to change any
    of the code because we're using the same function to process the attribute data
    in the `ethnicData()`, `genderData()`, and `ageData()` function.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`formatAttributesForGraph()`方法中将属性名称和人口值添加到列表中。该列表将在稍后时间进行绘图。我们不需要更改任何代码，因为我们使用相同的函数在`ethnicData()`、`genderData()`和`ageData()`函数中处理属性数据。
- en: Displaying the results
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 显示结果
- en: Now that we've created our lists of data, we can display them in the graphs
    on our popups.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了数据列表，我们可以在弹出窗口的图表中显示它们。
- en: Displaying the ethnic graph
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 显示种族图表
- en: 'For our ethnic graph, we''re going to create a pie chart:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的种族图表，我们将创建一个饼图：
- en: We'll scale it to fit within a `240` pixel by `210` pixel area in our popup
    window.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将调整其大小以适应弹出窗口中的`240`像素乘以`210`像素的区域。
- en: We'll add our own color scale with a list of CSS colors.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用CSS颜色列表添加自己的颜色比例。
- en: We'll look for the HTML DOM element where we want to put our graph (`class="ethnicgraph"`),
    and then attach the pie chart graphic.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将寻找我们想要放置图表的HTML DOM元素（`class="ethnicgraph"`），然后附加饼图图形。
- en: 'We''ll apply the color, size it with our population data, and then label it
    with the names of the ethnic groups:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将应用颜色，使用我们的人口数据调整大小，然后用种族群体的名称标记它：
- en: '[PRE25]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'When the application draws the graph, it should look something like the following
    graph:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序绘制图表时，它应该看起来像以下图表：
- en: '![Displaying the ethnic graph](img/6459OT_06_04.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![显示种族图表](img/6459OT_06_04.jpg)'
- en: Displaying the gender graph
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 显示性别图表
- en: 'For the gender graph, we''ll start by copying and pasting the code from the
    ethnic graph. The code is similar, except for two minor changes:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 对于性别图表，我们将从种族图表复制并粘贴代码。代码类似，除了两个小的变化：
- en: 'For our first change, we''ll add custom colors for the male and female populations.
    Look for where the color variable is assigned, and insert the two color hexadecimal
    numbers into the color range:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于我们的第一个更改，我们将为男性和女性人口添加自定义颜色。查找颜色变量分配的地方，并将两个十六进制颜色数字插入到颜色范围内：
- en: '[PRE26]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Next, we would like to make the labels show both the gender in question, and
    the actual population. To make a two-line label, we need to add another `tspan`
    to fill in with the population. We also need to move that label so that it is
    under the other label, and doesn''t cross over it:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们希望标签显示所讨论的性别和实际人口。为了制作两行标签，我们需要添加另一个 `tspan` 来填写人口数据。我们还需要移动该标签，使其位于其他标签下方，并且不与之交叉：
- en: '[PRE27]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Once we run the application and test it with some data, the graph should look
    like the following image, pending data:![Displaying the gender graph](img/6459OT_06_05.jpg)
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦运行应用程序并使用一些数据测试它，图表应该看起来像以下图像，待数据：![显示性别图表](img/6459OT_06_05.jpg)
- en: Displaying the age graph
  id: totrans-178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 显示年龄图表
- en: 'The age graph creates bar graphs from simple html `div` elements. It resizes
    them according to the data we''ve provided. We need to calculate a maximum value
    for the data, so that we can fit the data values within a maximum width. From
    there, we can draw and label our graphs with the data provided:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 年龄图表从简单的html `div` 元素创建条形图。它会根据我们提供的数据调整大小。我们需要计算数据的最大值，以便将数据值调整到最大宽度内。从那里，我们可以使用提供的数据绘制和标记我们的图表：
- en: '[PRE28]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Using CSS styling, we can transform the appearance of the data however we wish.
    In this example, we decided to go with an alternating color theme, using the CSS3
    `nth-child(even)` pseudo class selector. You can add your own CSS hover effects
    to match what we did with `dojox/charting`:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 使用CSS样式，我们可以根据需要转换数据的外观。在这个例子中，我们决定采用交替颜色主题，使用CSS3的 `nth-child(even)` 伪类选择器。您也可以添加自己的CSS悬停效果，以匹配我们与
    `dojox/charting` 所做的：
- en: '[PRE29]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Using CSS and our data, we were able to create the following graph:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 使用CSS和我们的数据，我们能够创建以下图表：
- en: '![Displaying the age graph](img/6459OT_06_06.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![显示年龄图表](img/6459OT_06_06.jpg)'
- en: Note
  id: totrans-185
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you would like more information on the `D3.js` library, there is a wealth
    of information available. The official `D3.js` website is at [http://d3js.org/](http://d3js.org/).
    You can go there to find examples, tutorials, and other eye-popping graphics.
    You can also check out *Data Visualization with d3.js* by Swizec Tellor, *Data
    Visualization with D3.js Cookbook* by Nick Qi Zhu, and *Mastering D3.js* by Pablo
    Navarro Castillo.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想了解更多关于 `D3.js` 库的信息，有大量的信息可供参考。官方 `D3.js` 网站是 [http://d3js.org/](http://d3js.org/)。您可以去那里找到示例、教程和其他令人惊叹的图形。您还可以查看
    Swizec Tellor 的 *Data Visualization with d3.js*、Nick Qi Zhu 的 *Data Visualization
    with D3.js Cookbook* 和 Pablo Navarro Castillo 的 *Mastering D3.js*。
- en: Summary
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Both `dojox/charting` and `D3.js` have their advantages and disadvantages in
    our web mapping applications. The `dojox/charting` library comes with the ArcGIS
    JavaScript API, and is easily integrated with existing applications. It provides
    many themes that can be added quickly. On the other hand, `D3.js` works with HTML
    elements and CSS styling to create eye-popping effects. It offers more data visualization
    techniques than `dojox/charting` and offers customizable appearances using CSS
    styling. Your final choice may come down to your comfort level with these tools
    and your imagination.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的网络地图应用中，`dojox/charting` 和 `D3.js` 都有其优点和缺点。`dojox/charting` 库与ArcGIS JavaScript
    API一起提供，并且易于与现有应用程序集成。它提供了许多可以快速添加的主题。另一方面，`D3.js` 与HTML元素和CSS样式一起工作，以创建令人惊叹的效果。它提供了比
    `dojox/charting` 更多的数据可视化技术，并使用CSS样式提供了可定制的外观。您的最终选择可能取决于您对这些工具的舒适程度和您的想象力。
- en: In this chapter, we have learned how to incorporate graphs and charts in to
    our ArcGIS JavaScript API applications. We used graphics libraries provided by
    the Dojo framework, which created graphics based on data from map features. We
    also used `D3.js` to render charts and graphs in our application. In the process,
    we learned how to load and access other libraries in Dojo's AMD-based applications.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何在我们的 ArcGIS JavaScript API 应用程序中集成图表和图形。我们使用了 Dojo 框架提供的图形库，这些库基于地图要素的数据创建图形。我们还使用了
    `D3.js` 在我们的应用程序中渲染图表和图形。在这个过程中，我们学习了如何在基于 Dojo 的 AMD 应用程序中加载和访问其他库。
- en: In the next chapter, we'll explore how to mix our ArcGIS JavaScript API applications
    with other popular JavaScript frameworks.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨如何将我们的 ArcGIS JavaScript API 应用程序与其他流行的 JavaScript 框架混合使用。
