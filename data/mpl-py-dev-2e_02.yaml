- en: Getting Started with Matplotlib
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用Matplotlib
- en: Now that we are familiar with the capabilities and functionalities of Matplotlib
    and all geared up with the Python environment, let's go straight ahead and create
    our first plots.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经熟悉了Matplotlib的功能，并且已经配置好Python环境，让我们直接开始创建我们的第一个图表。
- en: 'In this chapter, we will learn how to:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何：
- en: Draw basic line and scatter plots
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绘制基本的线图和散点图
- en: Overlay multiple data series on the same plots
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在同一图表上叠加多个数据系列
- en: Adjust grids, axes, and labels
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调整网格、坐标轴和标签
- en: Add a title and legend
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加标题和图例
- en: Save created plots as separate files
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将创建的图表保存为单独的文件
- en: Configure Matplotlib global settings
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置Matplotlib全局设置
- en: Loading data
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加载数据
- en: Before we start plotting, we need to import the data we intend to plot and get
    familiar with basic plotting commands in Matplotlib. Let's start going through
    these basic commands!
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始绘图之前，需要导入我们打算绘制的数据，并熟悉Matplotlib中的基本绘图命令。让我们开始了解这些基本命令！
- en: While working on data visualization projects, we need to ensure that we have
    basic familiarity and understanding of the tools used for data processing. Before
    we begin, let's briefly revise the most common data structures you will encounter
    when handling data with Python.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行数据可视化项目时，我们需要确保对用于数据处理的工具有基本的熟悉和理解。在开始之前，让我们简要回顾一下处理数据时您会遇到的最常见数据结构。
- en: List
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列表
- en: This is the most basic Python data structure; it stores a collection of values.
    While you can store any data type as an element in a Python list, for our purpose
    of data visualization, we mostly handle lists of numerical values as data input,
    or at, most, lists with elements of the same data type, such as strings to store
    text labels.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最基本的Python数据结构，它存储一组值。虽然您可以将任何数据类型作为元素存储在Python列表中，但在数据可视化的目的下，我们主要处理数值类型的列表作为数据输入，或者最多是具有相同数据类型元素的列表，如字符串，用于存储文本标签。
- en: 'A list is specified by square brackets, `[]`. To initiate an empty list, assign `[]` to
    a variable by `l = []`. To create a list, we can write the following:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 列表由方括号`[]`指定。要初始化一个空列表，可以通过`l = []`将`[]`赋值给变量。要创建一个列表，我们可以写如下内容：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Sometimes, we may want to get a list of arithmetic sequences. We may do so by
    using `list(range(start,stop,step))`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们可能希望得到一个算术序列的列表。我们可以通过使用`list(range(start, stop, step))`来实现。
- en: 'See the following example:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见以下示例：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Unlike Python 2.7, in Python 3.x, you cannot use the `range()` object interchangeably
    with a list.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 与Python 2.7不同，在Python 3.x中，您不能将`range()`对象与列表互换使用。
- en: NumPy array
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NumPy数组
- en: NumPy allows the creation of n-dimensional arrays, which is where the name of
    the data type, `numpy.ndarray`, comes from. It handles many sophisticated scientific
    and matrix operations. It provides many linear algebra and random number functionalities.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy允许创建n维数组，这也是数据类型`numpy.ndarray`名称的来源。它处理许多复杂的科学和矩阵运算，并提供许多线性代数和随机数功能。
- en: NumPy lies at the core of many calculations that computationally enable Matplotlib
    and many other Python packages. It is therefore a dependency for many common packages
    and often comes along with Python distributions. For instance, it provides the
    fundamental data structure for SciPy, a package that handles statistical calculations
    useful in science and many other areas.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy是许多计算的核心，这些计算在数学上支持Matplotlib和许多其他Python包。因此，它是许多常用包的依赖项，并且通常与Python发行版一起提供。例如，它为SciPy提供了基础数据结构，SciPy是一个处理统计计算的包，这些计算对科学和许多其他领域都有用。
- en: 'To import NumPy, input this:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要导入NumPy，输入以下内容：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To create a NumPy array from lists, use the following:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要从列表创建NumPy数组，请使用以下内容：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You can also create non-integral arithmetic series with NumPy by using `np.linspace(start,stop,number)`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过使用`np.linspace(start, stop, number)`来使用NumPy创建非整数的算术序列。
- en: 'See the following example:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见以下示例：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Matrix operations can be applied across NumPy arrays. Here is an example of
    multiplying two arrays:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 矩阵运算可以应用于NumPy数组。这里是一个乘以两个数组的例子：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: pandas DataFrame
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pandas DataFrame
- en: You may often see `df` appearing on Python-based data science resources and
    literature. It is a conventional way to denote the pandas DataFrame structure.
    pandas lets us perform the otherwise tedious operations on tables (data frames)
    with simple commands, such as `dropna()`, `merge()`, `pivot()`, and `set_index()`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能经常看到`df`出现在基于Python的数据科学资源和文献中。这是表示pandas DataFrame结构的常规方式。pandas使我们能够通过简单的命令执行本来繁琐的表格（数据框）操作，例如`dropna()`、`merge()`、`pivot()`和`set_index()`。
- en: pandas is designed to streamline handling processes of common data types, such
    as time series. While NumPy is more specialized in mathematical calculations,
    pandas has built-in string manipulation functions and also allows custom functions
    to be applied to each cell via `apply()`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 旨在简化常见数据类型（如时间序列）的处理过程。虽然 NumPy 更专注于数学计算，但 pandas 具有内建的字符串处理功能，并允许通过`apply()`函数将自定义函数应用于每个单元格。
- en: 'Before use, we import the module with the conventional shorthand as:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 使用前，我们通过以下传统缩写导入该模块：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To read data from existing files, just use the following:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 要从现有文件读取数据，只需使用以下命令：
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'For tab-delimited files, just add `''\t''` as the separator:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 对于制表符分隔的文件，只需将 `'\t'` 作为分隔符：
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: pandas supports data import from a wide range of common file structures for
    data handling and processing, from `pd.read_xlsx()` for Excel and `pd.read_sql_query()` for
    SQL databases to the more recently popular JSON, HDF5, and Google BigQuery.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 支持从多种常见文件结构导入数据，以便进行数据处理和处理，从`pd.read_xlsx()`导入 Excel 文件，`pd.read_sql_query()`导入
    SQL 数据库，直到最近流行的 JSON、HDF5 和 Google BigQuery。
- en: pandas provides a collection of handy operations for data manipulation and is
    considered a must-have in a Python data scientist's or developer's toolbox.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 提供了一系列便捷的数据操作方法，是 Python 数据科学家或开发者工具箱中不可或缺的工具。
- en: We encourage our readers to seek resources and books on our Mapt platform to
    get a better and intimate understanding of the pandas library usage.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们鼓励读者在我们的 Mapt 平台上寻求资源和书籍，以更好、更深入地了解 pandas 库的使用。
- en: 'To fully understand and utilize the functionalities, you may want to read more
    from the official documentation:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要完全理解和利用功能，您可能想要阅读更多来自官方文档的内容：
- en: '[http://pandas.pydata.org/pandas-docs/stable/ ](http://pandas.pydata.org/pandas-docs/stable/)'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://pandas.pydata.org/pandas-docs/stable/](http://pandas.pydata.org/pandas-docs/stable/)'
- en: Our first plots with Matplotlib
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们的第一个 Matplotlib 绘图
- en: We have just revised the basic ways of data handling with Python. Without further
    ado, let's create our first "Hello World!" plot example.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚回顾了使用 Python 进行数据处理的基本方法。接下来，让我们创建我们的第一个 "Hello World!" 绘图示例。
- en: Importing the pyplot
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导入 pyplot
- en: 'To create a pandas DataFrame from objects such as lists and ndarrays, you may
    call:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 要从对象（如列表和 ndarray）创建 pandas DataFrame，您可以调用：
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'To start creating Matplotlib plots, we first import the plotting API `pyplot` by
    entering this command:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始创建 Matplotlib 图形，我们首先通过输入此命令导入绘图 API `pyplot`：
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This will start your plotting routine.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动你的绘图例程。
- en: In Jupyter Notebook, you need to import modules once you begin a notebook session
    after starting the kernel.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Jupyter Notebook 中，启动内核后，一旦开始 notebook 会话，您需要导入模块。
- en: Line plot
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 线形图
- en: After importing `matplotlib.pyplot` as `plt`, we draw line plots with the `plt.plot()` command.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在导入 `matplotlib.pyplot` 作为 `plt` 后，我们使用 `plt.plot()` 命令绘制线形图。
- en: 'Here is a code snippet for a simple example of plotting the temperature of
    the week:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的代码片段，用于绘制一周温度的示例：
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'After you run the code, the following plot will be displayed as the output
    in the notebook cell:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 运行代码后，以下图表将作为输出显示在 notebook 单元格中：
- en: '![](img/6190a621-9bf5-4dc1-b51a-574f059e7759.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6190a621-9bf5-4dc1-b51a-574f059e7759.png)'
- en: When a single parameter is parsed, the data values are assumed to be on the
    *y* axis, with the indices on the *x* axis.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当解析一个参数时，数据值将假定在 *y* 轴上，索引在 *x* 轴上。
- en: 'Remember to conclude each plot with `plt.show()`. If you forget this, a plot
    object will be shown as the output instead of the plot. If you do not overwrite
    the plot with other plotting commands, you can call `plt.show()` in the next running
    cell to display the plot. The following is a screenshot made to illustrate the
    case:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 记得每次绘图后调用 `plt.show()`。如果忘记此操作，绘图对象将作为输出显示，而不是图形。如果你没有通过其他绘图命令覆盖图形，你可以在下一个运行的单元格中调用
    `plt.show()` 来显示图形。以下是为说明此情况而制作的截图：
- en: '![](img/4cfb8cab-1cc6-4afd-bf17-ee5e2c56e4d9.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4cfb8cab-1cc6-4afd-bf17-ee5e2c56e4d9.png)'
- en: 'Also, if you run the plotting commands multiple times before calling `plt.show()`,
    multiple plots or plots with unexpected elements (for example, changed color)
    will appear in the output area the next time you add the line back and run. We
    can demonstrate this by duplicating the same plotting commands in two cells running
    consecutively before showing the plot. In the following screenshot, you will see
    a change in color from the default blue as previously, to brown. This is due to
    the blue, line plotted with the first command being covered with a second brown
    line from the second command:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果你在调用`plt.show()`之前多次运行绘图命令，下次你再次添加这行代码并运行时，输出区域会出现多个图形或带有意外元素的图形（例如，颜色变化）。我们可以通过在两个连续运行的单元格中复制相同的绘图命令来演示这一点。以下截图中，你会看到颜色从默认的蓝色（如之前所示）变为棕色。这是因为第一个命令绘制的蓝色线被第二个命令绘制的棕色线覆盖：
- en: '![](img/db779b58-3596-46c0-946a-9db1a63320c8.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/db779b58-3596-46c0-946a-9db1a63320c8.png)'
- en: Do not be alarmed if this happens. You can rerun the cell and achieve the desired
    result.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果出现这种情况，请不要惊慌。你可以重新运行单元格，达到预期的结果。
- en: '**Suppressing function output**: Sometimes the plot may show up without calling
    `plt.show()`, but the line of the `matplotlib` object also shows up without giving
    much useful information. We can put a semicolon (`;`) at the end of a code line
    to suppress its input. For instance, in the following quick example, we will not
    see the Matplotlib object  `[<matplotlib.lines.Line2D at 0x7f6dc6afe2e8>]` appear
    in the output when we put `;` after the plotting command:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**抑制函数输出**：有时，图表可能会在没有调用`plt.show()`的情况下显示，但`matplotlib`对象的输出也会显示，并且没有提供有用的信息。我们可以在代码行的末尾加上分号（`;`）来抑制其输入。例如，在以下快速示例中，当我们在绘图命令后加上`;`时，我们不会在输出中看到Matplotlib对象`[<matplotlib.lines.Line2D
    at 0x7f6dc6afe2e8>]`：'
- en: '![](img/cc40004f-ea25-44f7-a52a-ddb64eb492b9.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cc40004f-ea25-44f7-a52a-ddb64eb492b9.png)'
- en: 'To specify a customized *x-*axis, simply supply it as the first argument to
    `plt.plot()`. Let''s say we plot the temperatures from the date 11^(th). We can
    plot temperatures `t` against a list of dates `d` by calling `plt.plot(d,t)`.
    Here is the result, where you can observe the specified dates on the *x* axis:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 要指定自定义的*x*轴，只需将其作为第一个参数传递给`plt.plot()`。假设我们绘制11^(th)日期的温度。我们可以通过调用`plt.plot(d,
    t)`来绘制温度`t`与日期列表`d`之间的关系。这里是结果，你可以在*x*轴上观察到指定的日期：
- en: '![](img/518c1bd4-b587-467d-a887-ce0f31c68355.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/518c1bd4-b587-467d-a887-ce0f31c68355.png)'
- en: Scatter plot
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 散点图
- en: 'Another basic plot type is scatter plot, a plot of dots. You can draw it by
    calling `plt.scatter(x,y)`. The following example shows a scatter plot of random
    dots:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种基本的图表类型是散点图，即点图。你可以通过调用`plt.scatter(x, y)`来绘制它。以下示例显示了一个随机点的散点图：
- en: '[PRE12]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The following plot is the result of the preceding code:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表是前述代码的结果：
- en: '![](img/d0de8183-eaeb-4c66-9518-62ad59f46117.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d0de8183-eaeb-4c66-9518-62ad59f46117.png)'
- en: Overlaying multiple data series in a plot
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在图表中叠加多个数据系列
- en: We can stack several plotting commands before concluding a plot with `plt.show()` to
    create a plot with multiple data series. Each data series can be plotted with
    the same or different plot types. The following are examples of line plots and
    scatter plots with multiple data series, as well as a combination of both plot
    types show trends.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在使用`plt.show()`结束绘图之前堆叠多个绘图命令，以创建一个包含多个数据系列的图表。每个数据系列可以使用相同或不同的绘图类型进行绘制。以下是包含多个数据系列的折线图和散点图的示例，以及结合这两种图类型显示趋势的例子。
- en: Multiline plots
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多行图表
- en: 'For example, to create a multiline plot, we can draw a line plot for each data
    series before concluding the figure. Let''s try plotting the temperatures of three
    different cities with the following code:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要创建一个多行图表，我们可以为每个数据系列绘制一条折线图，然后再结束图表。让我们尝试使用以下代码绘制三座不同城市的温度：
- en: '[PRE13]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Here is the plot generated by the preceding code:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这是前面代码生成的图表：
- en: '![](img/47436e31-9f6c-457a-b559-266c4b352dc5.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/47436e31-9f6c-457a-b559-266c4b352dc5.png)'
- en: This example is adapted from the maximum temperatures of three cities in a week
    in December 2017\. From the graph, can you recognize which two lines are more
    likely to be representative of cities from the same continent?
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子改编自2017年12月三座城市一周内的最高气温。从图表中，你能辨认出哪两条线更有可能代表来自同一大洲的城市吗？
- en: Scatter plot to show clusters
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用散点图显示聚类
- en: 'While we have seen a scatter plot of random dots before, scatter plots are
    most useful with representing discrete data points that show a trend or clusters.
    Each data series will be plotted in different color per plotting command by default,
    which helps us distinguish the distinct dots from each series. To demonstrate
    the idea, we will generate two artificial clusters of data points using a simple
    random number generator function in NumPy, shown as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们之前已经看到过随机点的散点图，但散点图在表示显示趋势或聚类的离散数据点时最为有用。默认情况下，每个数据系列将在每个绘图命令中以不同的颜色绘制，这有助于我们区分每个系列中的不同点。为了演示这一概念，我们将使用NumPy中的一个简单随机数生成函数生成两个人工数据点聚类，如下所示：
- en: '[PRE14]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We can see from the following plot that there are two artificially created
    clusters of dots colored blue (approximately in the left half) and orange (approximately
    in the right half) respectively:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 从以下图表中，我们可以看到两个人工创建的数据点聚类，分别用蓝色（大致位于左半部分）和橙色（大致位于右半部分）表示：
- en: '![](img/02c33f72-c65c-4581-9983-abdcda054fc3.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/02c33f72-c65c-4581-9983-abdcda054fc3.png)'
- en: 'There is another way to generate clusters and plot them on scatter plots. We
    can generate clusters of data points for testing and demonstration more directly
    using the `make_blobs()` function in a package called `sklearn`, which is developed
    for more advanced data analysis and data mining, as shown in the following snippet.
    We can specify the colors according to the assigned feature (cluster identity):'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 还有另一种生成聚类并在散点图中展示它们的方法。我们可以使用名为`sklearn`的包中的`make_blobs()`函数，更直接地生成测试和演示所需的数据点聚类，该包是为更高级的数据分析和数据挖掘而开发的，如下所示的代码片段所示。我们可以根据指定的特征（聚类标识）来指定颜色：
- en: '[PRE15]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'As the `make_blob` function generates dots based on isotropic Gaussian distribution,
    we can see from the resultant plot that they are better clustered as three distinct
    blobs of dots centralized at three points:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`make_blob`函数是基于各向同性高斯分布生成点，因此我们可以从结果图中看到，数据点更好地聚集成三个独立的点群，分别集中在三个点上：
- en: '![](img/3130bd82-e187-45e2-9206-ce9f4801210f.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3130bd82-e187-45e2-9206-ce9f4801210f.png)'
- en: scikit-learn is a powerful Python package that provides many different simple
    functions for data mining and data analysis. It has a versatile suite of algorithms
    for classification, regression, clustering, dimension reduction, and modeling.
    It also allows data preprocessing and pipelining multiple processing stages.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: scikit-learn是一个强大的Python包，提供了许多用于数据挖掘和数据分析的简单函数。它有一套多功能的算法，适用于分类、回归、聚类、降维和建模。它还允许数据预处理并支持多个处理阶段的流水线操作。
- en: 'For getting familiar with the scikit-learn library, we can use the datasets
    preloaded in package, such as the famous iris petals, or generate datasets according
    to the specified distribution as shown before. Here we''ll only use the data to
    illustrate a simple visualization using scatter plot, and we won''t go into the
    details just yet. More examples are available and can be found by clicking on
    this link:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 为了熟悉scikit-learn库，我们可以使用包中预加载的数据集，如著名的鸢尾花数据集，或者生成符合指定分布的数据集，如前所示。这里我们只使用这些数据来演示如何使用散点图进行简单的可视化，暂时不涉及更多细节。更多示例可通过点击以下链接找到：
- en: '[http://scikit-learn.org/stable/auto_examples/datasets/plot_random_dataset.html ](http://scikit-learn.org/stable/auto_examples/datasets/plot_random_dataset.html)'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://scikit-learn.org/stable/auto_examples/datasets/plot_random_dataset.html](http://scikit-learn.org/stable/auto_examples/datasets/plot_random_dataset.html)'
- en: The previous example is a demonstration of an easier way to map dot color with
    labeled features, if any. The details of `make_blobs()` and other scikit-learn
    functions are out of our scope of introducing basic plots in this chapter.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的示例演示了一种更简单的方法来映射点的颜色与标记特征（如果有的话）。`make_blobs()`和其他scikit-learn函数的细节超出了本章介绍基本图表的范围。
- en: We encourage our readers to seek resources and books on our Mapt platform to
    get a better understanding of the scikit-learn library usage.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们鼓励读者访问我们的Mapt平台，查阅有关scikit-learn库使用的资源和书籍，以便更好地理解该库的用法。
- en: Alternatively, readers can also read the scikit-learn documentation here:[ http://scikit-learn.org](https://scikit-learn.org).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，读者也可以在此处阅读scikit-learn的文档：[http://scikit-learn.org](https://scikit-learn.org)。
- en: Adding a trendline over a scatter plot
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在散点图上添加趋势线
- en: 'Multiple plot types can be overlaid on top of each other. For example, we can
    add a trendline over a scatter plot. The following is an example of adding a trendline
    to 10 *y* coordinates with slight deviations from a linear relationship with the
    *x* coordinates:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 多种图表类型可以叠加在一起。例如，我们可以在散点图上添加趋势线。以下是一个将趋势线添加到10个*y*坐标上的例子，这些坐标与*x*坐标之间存在微小的线性偏差：
- en: '[PRE16]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We can observe from the following plot that the trendline overlays the upward
    sloping dots:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从下图中观察到，趋势线覆盖了向上倾斜的点：
- en: '![](img/b7fb0e78-0d20-42d3-9de9-923a9089efe7.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b7fb0e78-0d20-42d3-9de9-923a9089efe7.png)'
- en: Adjusting axes, grids, labels, titles, and legends
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调整坐标轴、网格、标签、标题和图例
- en: We have just learned how to turn numerical values into dots and lines with Matplotlib.
    By default, Matplotlib optimizes the display by calculating various values in
    the background, such as the reasonable axis range and font sizes. However, good
    visualization often requires more design input to suit our custom data visualization
    needs and purpose. Moreover, text labels are needed to make figures informative
    in many cases. In the following sections, we will demonstrate the methods to adjust
    these elements.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚学会了如何通过Matplotlib将数值转化为点和线。默认情况下，Matplotlib会通过后台计算合理的坐标轴范围和字体大小来优化显示。然而，良好的可视化通常需要更多的设计输入，以适应我们的自定义数据可视化需求和目的。此外，很多情况下，需要文本标签来使图表更加信息化。在接下来的章节中，我们将展示如何调整这些元素。
- en: Adjusting axis limits
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调整坐标轴范围
- en: 'While Matplotlib automatically chooses the range of *x* and *y* axis limits
    to spread data onto the whole plotting area, sometimes we want some adjustment,
    such as to show 100% as maximum instead of somewhere lower. To set the limits
    of *x* and *y* axes, we use the commands `plt.xlim()` and `plt.ylim()`. In our
    daily temperature example, the auto-scaling makes the temperature changes of less
    than 2 degrees Celsius seem very dramatic. Here is how we can adjust it, say,
    to show 0 degrees as the lower limit on the *y* axis for temperatures of the first
    5 days only:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Matplotlib会自动选择 *x* 和 *y* 坐标轴的范围，将数据扩展到整个绘图区域，但有时我们可能需要进行一些调整，比如希望将100%显示为最大值，而不是较低的某个数值。要设置
    *x* 和 *y* 坐标轴的范围，我们可以使用`plt.xlim()`和`plt.ylim()`命令。在我们的日常温度示例中，自动缩放使得温度变化不到2度的情况看起来非常剧烈。以下是如何进行调整，比如仅显示前5天的温度数据，*y*
    轴的下限设为0度：
- en: '[PRE17]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The preceding code produces a plot with the *y* axis ranging from 0 to 30,
    as follows:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码生成的图表，*y* 轴范围为0到30，如下所示：
- en: '![](img/6eea3efd-23ac-4cbc-8430-f991b2c9875e.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6eea3efd-23ac-4cbc-8430-f991b2c9875e.png)'
- en: Adding axis labels
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加坐标轴标签
- en: To give meaning to the values on the *x* and *y* axes, we need information about
    the nature and type of data, and its corresponding units. We can provide this
    piece of information by placing axis labels with `plt.xlabel()` or `plt.ylabel()`.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使 *x* 轴和 *y* 轴上的数值有意义，我们需要关于数据性质和类型的信息，以及其对应的单位。我们可以通过在`plt.xlabel()`或`plt.ylabel()`中添加坐标轴标签来提供这些信息。
- en: 'Let us continue with our example plot of multi-city temperatures. We shall
    add `plt.xlabel(''Temperature (°C)'')` and `plt.ylabel(''Date'')` to label the
    axes to produce the following plot:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续以多个城市的温度图作为例子。我们将添加`plt.xlabel('温度 (°C)')`和`plt.ylabel('日期')`来标注坐标轴，从而生成如下图表：
- en: '![](img/33673c03-4e2c-4770-8631-ad1f9b75379a.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/33673c03-4e2c-4770-8631-ad1f9b75379a.png)'
- en: 'Similar to many other Matplotlib functions involving text, it is possible to
    set the text properties, such as font size and color within the `plt.xlabel()` and
    `plt.ylabel()` functions, by passing the properties as parameters. Here, we specified
    a bolder font weight for the labels for some hierarchy:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 与许多其他涉及文本的Matplotlib函数类似，我们可以在`plt.xlabel()`和`plt.ylabel()`函数中通过传递属性参数来设置文本属性，例如字体大小和颜色。在这里，我们为标签指定了较粗的字体权重，以实现一定的层次感：
- en: '[PRE18]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'As you can see, Matplotlib supports inline adjustment of fonts for many text
    elements. Here, we have specified a bolder font weight for the labels for some
    hierarchy:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，Matplotlib支持对许多文本元素进行内联字体调整。在这里，我们为标签指定了较粗的字体权重，以实现一定的层次感：
- en: '![](img/22f5ddcb-256b-4bd7-bcef-5788f2d4b6af.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/22f5ddcb-256b-4bd7-bcef-5788f2d4b6af.png)'
- en: Adding a grid
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加网格
- en: While a blank plot background is clean, sometimes we may like to get some reference
    gridlines for better reference, such as in the multiline case.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然空白图表背景显得简洁，但有时我们可能希望添加一些参考网格线，以便更好地参考，特别是在多行图表中。
- en: 'We can turn on the background gridlines by calling `plt.grid(True)` before
    `plt.show()`. For example, we can add this command to the preceding multi-city
    temperature plot to obtain the following plot:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在 `plt.show()` 之前调用 `plt.grid(True)` 来打开背景网格线。例如，我们可以将此命令添加到前述的多城市温度图中，得到以下图表：
- en: '![](img/68f37f3d-4252-4d87-98af-1850e442cb65.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/68f37f3d-4252-4d87-98af-1850e442cb65.png)'
- en: Similarly, when we do not want the grid any longer, such as when using styles
    with gridlines as the default, we can use  `plt.grid(False)` to remove the grid.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，当我们不再需要网格时，例如当使用具有网格线作为默认样式时，我们可以使用 `plt.grid(False)` 来移除网格。
- en: 'Detailed styling options will be discussed in the next chapter. The grid in
    the preceding example distinctly stands out too much and interferes with the interpretation
    of the line plots. Grid line properties, such as line width, color, and dash patterns,
    are adjustable within the `plt.grid()` command; here is a brief example of making
    the grid more subtle:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章节将详细讨论详细的样式选项。前述示例中的网格显得太过突出，干扰了线图的解释。网格线的属性，如线宽、颜色和虚线模式，在 `plt.grid()`
    命令中是可以调整的；这里是使网格线更加柔和的简要示例：
- en: '[PRE19]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'As seen in the following plot, the grid lines become lighter and less interfering
    with the data lines in comparison to the default grid color in the plot in the
    last example:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如下图所示，与上一个示例中默认网格颜色相比，网格线变得更加淡化，不再干扰数据线：
- en: '![](img/02063f29-18b4-4af7-b37f-418a58b01947.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/02063f29-18b4-4af7-b37f-418a58b01947.png)'
- en: Titles and legends
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标题和图例
- en: Depending on where and how our plots will be presented, they may or may not
    be accompanied by figure caption that describes the background and results that
    the data plot is illustrating. We may need to add a title to succinctly summarize
    and communicate the result.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们的图表将被呈现的位置和方式，它们可能会或者不会伴随一个描述背景和结果的图表标题。我们可能需要添加一个标题来简洁地总结和传达结果。
- en: Meanwhile, although axis labels suffice to identify data series for some figure
    types, such as bar plots and box plots, there may be cases where we need an extra
    legend key for this purpose. The following are ways to add and adjust these text
    elements to make our plot more informative.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，虽然轴标签足以识别柱状图和箱线图等某些图形类型的数据系列，但可能会有需要额外图例键的情况。以下是添加和调整这些文本元素的方法，以使我们的图表更具信息性。
- en: Adding a title
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加标题
- en: 'To describe the information of the plotted data, we can give a title to our
    figure. This can be done simply with the command `plt.title(yourtitle)`:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 要描述绘制数据的信息，我们可以为我们的图表添加一个标题。这可以通过简单的命令 `plt.title(yourtitle)` 来完成：
- en: '[PRE20]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Again, we can specify text style properties. Here we set the title font to
    be larger than other labels:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们可以指定文本样式属性。在这里，我们将标题字体设置为比其他标签更大：
- en: '[PRE21]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The following is the plot with title added:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 下图已添加标题：
- en: '![](img/63ca8322-17d0-402f-832a-a75f56d063c7.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](img/63ca8322-17d0-402f-832a-a75f56d063c7.png)'
- en: Adding a legend
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加图例
- en: 'To match data series on plots with their labels, such as by their line styles
    and marker styles, we add the following:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 为了匹配图表上的数据系列及其标签，例如通过它们的线条样式和标记样式，我们添加如下内容：
- en: '[PRE22]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The label of each data series can be specified within each `plt.plot()` command
    with the `label` parameter.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 每个数据系列的标签可以在每个 `plt.plot()` 命令中通过 `label` 参数指定。
- en: By default, Matplotlib chooses the best location to minimize overlap with data
    points and add transparency to the legend face color in case of overlapping. However,
    this does not always guarantee the location to be ideal in each case. To adjust
    the location, we can't pass `loc` settings , such as by using `plt.legend(loc='upper
    left')`.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Matplotlib 选择最佳位置以最小化与数据点的重叠，并在重叠时添加图例面板颜色的透明度。然而，这并不总能保证每种情况下的位置都是理想的。要调整位置，我们可以通过传递
    `loc` 设置来实现，例如使用 `plt.legend(loc='upper left')`。
- en: 'Possible `loc` settings are as follows:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 可能的 `loc` 设置如下：
- en: '`''best''`: 0 (only implemented for axes'' legends)'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''best''`: 0（仅适用于轴的图例）'
- en: '`''upper right''`: 1'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''upper right''`: 1'
- en: '`''upper left''`: 2'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''upper left''`: 2'
- en: '`''lower left''`: 3'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''lower left''`: 3'
- en: '`''lower right''`: 4'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''lower right''`: 4'
- en: '`''right''`: 5 (the same as ''center right''; for back-compatibility)'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''right''`: 5（与 ''center right'' 相同；为了向后兼容性）'
- en: '`''center left''`: 6'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''center left''`: 6'
- en: '`''center right''`: 7'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''center right''`: 7'
- en: '`''lower center''`: 8'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''lower center''`: 8'
- en: '`''upper center''`: 9'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''upper center''`: 9'
- en: '`''center''`: 10'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''center''`: 10'
- en: You can also set `loc` as normalized coordinates with respect to the parent,
    which is usually the axes' area; that is, edges of axes are at 0 and 1\. For instance,
    `plt.legend(loc=(0.5,0.5))` sets the legend right in the middle.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以将`loc`设置为相对于父元素的归一化坐标，通常是坐标轴区域；也就是说，坐标轴的边缘位于0和1的位置。例如，`plt.legend(loc=(0.5,0.5))`将图例设置在正中间。
- en: 'Let''s try to set the legend to our multiline plot in the lower-right corner
    with absolute coordinates, `plt.legend(loc=(0.64,0.1))`, as shown in the following
    created plot:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试将图例设置到多线图的右下角，使用绝对坐标`plt.legend(loc=(0.64,0.1))`，如下所示：
- en: '![](img/f73e8cf9-5d38-4903-8faf-82278b29ece1.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f73e8cf9-5d38-4903-8faf-82278b29ece1.png)'
- en: A complete example
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 完整示例
- en: To get further acquainted with Matplotlib functions, let us plot a multiline
    plot with axes, labels, title, and legend configured in one single snippet.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地熟悉Matplotlib函数，让我们绘制一个包含坐标轴、标签、标题和图例的多线图，并在一个简单的代码段中完成配置。
- en: 'In this example, we take real-world data from the World Bank on agriculture.
    As the world population continues to grow, food security continues to be an important
    global issue. Let us have a look at the production data of a few major crops in
    the recent decade by plotting a multiline plot with the following code:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用世界银行的农业真实数据。随着全球人口的不断增长，粮食安全继续成为一个重要的全球性问题。让我们通过绘制以下代码的多线图来看看最近十年几种主要作物的生产数据：
- en: '[PRE23]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'From the resultant plot, we can observe the production of maize > wheat > soybean
    > rice, a generally growing trend of crop production and a steady growth of soybean
    production:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 从结果图中，我们可以观察到玉米 > 小麦 > 大豆 > 水稻的生产趋势，一般呈现作物产量的增长趋势，以及大豆产量的稳定增长：
- en: '![](img/d71fbb5e-457e-4d05-8225-1e65ba9796e2.png)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d71fbb5e-457e-4d05-8225-1e65ba9796e2.png)'
- en: Saving plots to a file
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将图形保存为文件
- en: To save a figure, we put `plt.savefig(outputpath)` at the end of plotting commands.
    It can be used in place of `plt.show()`, to directly save the figure without displaying
    it.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 要保存图形，我们将在绘图命令的末尾使用`plt.savefig(outputpath)`。它可以替代`plt.show()`，直接保存图形而不显示。
- en: If you want to save the figure as a file as well as display it on the notebook
    output, you can call both `plt.savefig()` and `plt.show()`.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望将图形保存为文件并在notebook输出中显示，你可以同时调用`plt.savefig()`和`plt.show()`。
- en: Reversing the order can result in the plot elements being cleaned up, leaving
    a blank canvas for the saved figure file.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 颠倒顺序可能导致图形元素被清除，留下一个空白画布用于保存的图形文件。
- en: Setting the output format
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置输出格式
- en: '`plt.savefig()` automatically detects the file extension of the specified output
    path, and generates the corresponding file format if it is supported. If no file
    extension is specified in the input, a PNG format file would be obtained as output
    with the default backend. This supports a number of image formats, including PNG,
    JPG, PDF, and PostScript:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '`plt.savefig()`会自动检测指定输出路径的文件扩展名，并生成相应的文件格式（如果支持）。如果输入中未指定文件扩展名，则将使用默认后端输出PNG格式文件。它支持多种图像格式，包括PNG、JPG、PDF和PostScript：'
- en: '[PRE24]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Setting the figure resolution
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置图形分辨率
- en: 'Depending on the format, location, and purpose of display, each figure may
    require a different scale of resolution. Generally, large printed materials, such
    as posters, would require higher resolution. We can set the resolution by specifying
    the **dot per inch** (**DPI**) value, like this for example:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 根据显示的格式、位置和目的，每个图形可能需要不同的分辨率。通常，较大的印刷材料，如海报，需要更高的分辨率。我们可以通过指定**每英寸点数**（**DPI**）值来设置分辨率，例如如下所示：
- en: '[PRE25]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: For a *8x12* squared inches figure and output with 300 DPI, there will be *(8x300)x(12x300)
    = 2400x3600* pixels in the image.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 对于*8x12*英寸的方形图和300 DPI的输出，图像中的像素将是*(8x300)x(12x300) = 2400x3600*像素。
- en: Jupyter support
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jupyter 支持
- en: Matplotlib is well integrated into Jupyter Notebook natively; such integration
    allows the plots to be displayed directly as static images as the output of each
    notebook cell. At times, we might be interested in the interactive GUI of Matplotlib,
    such as for zooming or panning a plot to view from different angles. We can continue
    working in the Jupyter Notebook with some simple steps.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: Matplotlib已原生集成到Jupyter Notebook中；这种集成使得图形可以直接作为每个notebook单元的输出静态显示。有时，我们可能希望使用Matplotlib的交互式GUI，例如缩放或平移图形，以从不同角度查看。我们可以通过一些简单的步骤继续在Jupyter
    Notebook中工作。
- en: Interactive navigation toolbar
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交互式导航工具栏
- en: 'To access the interactive navigation toolbar in a Jupyter Notebook, first call
    the Jupyter cell magic:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问Jupyter Notebook中的交互式导航工具栏，首先调用Jupyter单元魔法命令：
- en: '[PRE26]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We will demonstrate with a plot with a more dynamic shape:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过一个具有更动态形状的图表来演示：
- en: '[PRE27]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'As shown in the illustration, here we have a Christmas-tree-shaped plot embedded
    within a GUI box:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 如图所示，这里我们有一个嵌入在 GUI 框中的圣诞树形状图表：
- en: '![](img/a361c7dc-9769-430a-856b-2d963e4e3bb4.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a361c7dc-9769-430a-856b-2d963e4e3bb4.png)'
- en: 'You can find a tool bar in the bottom-left corner. The button functions from
    left to right are as follows:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在左下角找到工具栏。按钮从左到右的功能如下：
- en: '**Home logo**: Reset original view'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主页图标**：重置原始视图'
- en: '**Left arrow**: Back to previous view'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**左箭头**：返回到上一个视图'
- en: '**Right arrow**: Forward to next view'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**右箭头**：前进到下一个视图'
- en: '**Four-direction arrow**: Pan by holding down the left mouse key; zoom with
    the right arrow key on the screen'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**四方向箭头**：按住左键拖动进行平移；使用右箭头键在屏幕上进行缩放'
- en: '**Rectangle**: Zoom by dragging rectangle on the plot'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**矩形**：通过拖动图表上的矩形进行缩放'
- en: '**Floppy disk icon**: Download the plot'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**软盘图标**：下载图表'
- en: 'Here is an example of panning by dragging on the plot:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 这是通过在图表上拖动来进行平移的示例：
- en: '![](img/2df9200c-449b-4835-9583-e0a162aae41d.png)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2df9200c-449b-4835-9583-e0a162aae41d.png)'
- en: 'The following illustration shows the result of zooming by dragging a rectangle
    over the plot:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 以下插图展示了通过拖动矩形框进行缩放的结果：
- en: '![](img/94e1f024-a31b-4226-a235-df76030cd382.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![](img/94e1f024-a31b-4226-a235-df76030cd382.png)'
- en: To revert to inline output mode, use the cell magic `%matplotlib inline`, or
    click on the power button in the top-right corner.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 要恢复为内联输出模式，可以使用单元格魔法命令 `%matplotlib inline`，或点击右上角的电源按钮。
- en: Configuring Matplotlib
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 Matplotlib
- en: We have learned to tweak a few major elements in a Matplotlib plot. When we
    recurrently generate figures of similar style, it would be nice to have a way
    to store and apply the persistent global settings. Matplotlib offers a few options
    for configuration.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学会了如何调整 Matplotlib 图表中的一些主要元素。当我们反复生成相似风格的图表时，能够存储并应用持久的全局设置会非常方便。Matplotlib
    提供了几种配置选项。
- en: Configuring within Python code
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Python 代码中进行配置
- en: To keep settings throughout the current session, we can execute `matplotlib.rcParams`
    to override configuration file settings.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在当前会话中保持设置，我们可以执行 `matplotlib.rcParams` 来覆盖配置文件中的设置。
- en: 'For instance, we can set the font size of all text in plots to 18 with the
    following:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以通过以下方式将所有图表中文本的字体大小设置为 18：
- en: '[PRE28]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Alternatively we can call the `matplotlib.rc()` function. As `matplotlib.rc()`
    just changes one property, to change multiple settings, we can use the function
    `matplotlib.rcParams.update()`, and pass parameters in the form of a dictionary
    of key-value pairs:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，我们可以调用 `matplotlib.rc()` 函数。由于 `matplotlib.rc()` 只改变一个属性，要更改多个设置，我们可以使用 `matplotlib.rcParams.update()`
    函数，并以键值对字典的形式传递参数：
- en: '[PRE29]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Reverting to default settings
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 恢复到默认设置
- en: To revert to default settings, you can call `matplotlib.rcdefaults()` or `matplotlib.style.use('default')`.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 要恢复为默认设置，可以调用 `matplotlib.rcdefaults()` 或 `matplotlib.style.use('default')`。
- en: Global setting via configuration rc file
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过配置 rc 文件进行全局设置
- en: If you have a set of configurations that you want to apply globally without
    setting every time, you can set the `matplotlibrc` default values. To make persistent
    and selective changes on a certain set of parameters, we store the options in
    an `rc` configuration file.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一组配置想要全局应用而不需要每次设置，你可以设置 `matplotlibrc` 默认值。为了在某一组参数上进行持久且有选择性的更改，我们将选项存储在
    `rc` 配置文件中。
- en: Finding the rc configuration file
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找 rc 配置文件
- en: On Linux/Unix systems, you can set a global configuration for all users on the
    machine by editing `/etc/matplotlibrc` for `$HOME/.matplotlib/matplotlib/rc` or
    `~/.config/matplotlib/matplotlibrc`.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux/Unix 系统上，你可以通过编辑 `/etc/matplotlibrc`、`$HOME/.matplotlib/matplotlib/rc`
    或 `~/.config/matplotlib/matplotlibrc` 来为机器上的所有用户设置全局配置。
- en: 'On Windows, the default `matplotlibrc` file may be placed in `C:\Python35\Lib\site-packages`. To
    find the path of the currently active `matplotlibrc` file, we can use the `matplotlib_fname()`
    function of Matplotlib in Python shell as follows:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 上，默认的 `matplotlibrc` 文件可能位于 `C:\Python35\Lib\site-packages`。要查找当前活动的
    `matplotlibrc` 文件路径，我们可以在 Python shell 中使用 Matplotlib 的 `matplotlib_fname()` 函数，如下所示：
- en: '[PRE30]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The `rc` configuration file is found under `$INSTALL_DIR/matplotlib/mpl-data/matplotlibrc`,
    where `$INSTALL_DIR` is where you installed Matplotlib, which usually looks like `python3.6/site-packages/`.
    The `rc` file in the installation directory will be overwritten at each update.
    To keep the changes persistent across version updates, please keep them in the
    local configuration directory, such as `'/home/mary/.config/matplotlib/matplotlibrc'`.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '`rc`配置文件位于`$INSTALL_DIR/matplotlib/mpl-data/matplotlibrc`，其中`$INSTALL_DIR`是Matplotlib的安装路径，通常看起来像是`python3.6/site-packages/`。安装目录中的`rc`文件会在每次更新时被覆盖。为了在版本更新时保持更改不丢失，请将其保存在本地配置目录中，如`''/home/mary/.config/matplotlib/matplotlibrc''`。'
- en: Editing the rc configuration file
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编辑rc配置文件
- en: 'The basic format of the file is in the form of `option: value`. For example,
    to keep the legend always on the right, we put:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '文件的基本格式是`option: value`的形式。例如，若要将图例始终显示在右侧，我们可以这样设置：'
- en: '[PRE31]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Matplotlib provides massive configurability of plots, and there are several
    places to control the customization:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: Matplotlib提供了大量的图形可配置选项，下面列出了几个可以控制定制的地方：
- en: '**Global machine configuration file**: Matplotlib is configured for each user
    using the global machine configuration file'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**全局机器配置文件**：Matplotlib为每个用户配置全局机器配置文件'
- en: '**User configuration file**: A unique file for each user, where they can overwrite
    the global configuration file choosing their own settings (note that the user
    can execute a Matplotlib-related code anytime)'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户配置文件**：每个用户的唯一文件，在此文件中可以覆盖全局配置文件，选择自己的设置（注意用户可以随时执行与Matplotlib相关的代码）'
- en: '**Configuration file in the current directory**: The current script or program
    can be customized specifically by using this directory'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**当前目录中的配置文件**：通过使用此目录，可以针对当前脚本或程序进行特定的定制'
- en: This is particularly useful in situations when different programs have different
    needs, and using an external configuration file is better than hardcoding those
    settings in the code.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 这在不同程序有不同需求的情况下尤其有用，使用外部配置文件要比在代码中硬编码设置要好。
- en: Summary
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Congratulations! We are now familiar with the basic plotting techniques using
    Matplotlib syntax! Remember, the success of a data visualization project relies
    heavily upon making appealing visuals.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！我们现在已经掌握了使用Matplotlib语法的基本绘图技巧！记住，数据可视化项目的成功在于制作吸引人的视觉效果。
- en: In the next chapters, we will learn how to beautify our plots and select the
    right kind of plot that communicates our data effectively!
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将学习如何美化图形，并选择合适的图表类型，以有效地传达我们的数据！
