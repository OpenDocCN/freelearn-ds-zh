- en: Statistics and Probability Refresher, and Python Practice
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 统计和概率复习，以及Python实践
- en: In this chapter, we are going to go through a few concepts of statistics and
    probability, which might be a refresher for some of you. These concepts are important
    to go through if you want to be a data scientist. We will see examples to understand
    these concepts better. We will also look at how to implement those examples using
    actual Python code.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍一些统计和概率的概念，这对于一些人来说可能是复习。如果您想成为一名数据科学家，这些概念很重要。我们将看到一些示例，以更好地理解这些概念。我们还将看看如何使用实际的Python代码来实现这些示例。
- en: 'We''ll be covering the following topics in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖以下主题：
- en: Types of data you may encounter and how to treat them accordingly
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可能会遇到的数据类型以及如何相应处理它们
- en: Statistical concepts of mean, median, mode, standard deviation, and variance
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 统计概念的均值、中位数、众数、标准差和方差
- en: Probability density functions and probability mass functions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 概率密度函数和概率质量函数
- en: Types of data distributions and how to plot them
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据分布类型及如何绘制它们
- en: Understanding percentiles and moments
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解百分位数和矩
- en: Types of data
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据类型
- en: 'Alright, if you want to be a data scientist, we need to talk about the types
    of data that you might encounter, how to categorize them, and how you might treat
    them differently. Let''s dive into the different flavors of data you might encounter:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，如果您想成为一名数据科学家，我们需要讨论您可能会遇到的数据类型，如何对其进行分类以及如何可能以不同方式对待它们。让我们深入了解您可能会遇到的不同类型的数据：
- en: '![](img/1797a775-a439-4828-aa86-614c5c957af3.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1797a775-a439-4828-aa86-614c5c957af3.png)'
- en: 'This will seem pretty basic, but we''ve got to start with the simple stuff
    and we''ll work our way up to the more complicated data mining and machine learning
    things. It is important to know what kind of data you''re dealing with because
    different techniques might have different nuances depending on what kind of data
    you''re handling. So, there are several flavors of data, if you will, and there
    are three specific types of data that we will primarily focus on. They are:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这似乎很基础，但我们必须从简单的东西开始，然后逐步深入研究更复杂的数据挖掘和机器学习内容。了解您正在处理的数据类型非常重要，因为不同的技术可能会根据您处理的数据类型有不同的细微差别。因此，可以说数据有几种不同的类型，我们将主要关注其中的三种。它们是：
- en: Numerical data
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数值数据
- en: Categorical data
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分类数据
- en: Ordinal data
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有序数据
- en: Again, there are different variations of techniques that you might use for different
    types of data, so you always need to keep in mind what kind of data you're dealing
    with when you're analyzing it.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，对于不同类型的数据，可能会使用不同的技术变体，因此在分析数据时，您始终需要牢记您正在处理的数据类型。
- en: Numerical data
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数值数据
- en: Let's start with numerical data. It's probably the most common data type. Basically,
    it represents some quantifiable thing that you can measure. Some examples are
    heights of people, page load times, stock prices, and so on. Things that vary,
    things that you can measure, things that have a wide range of possibilities. Now
    there are basically two kinds of numerical data, so a flavor of a flavor if you
    will.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从数值数据开始。这可能是最常见的数据类型。基本上，它代表一些可以测量的可量化的东西。一些例子是人的身高、页面加载时间、股票价格等。变化的东西，您可以测量的东西，具有广泛可能性的东西。现在基本上有两种数值数据，所以可以说是一种变体的变体。
- en: Discrete data
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 离散数据
- en: There's discrete data, which is integer-based and, for example, can be counts
    of some sort of event. Some examples are how many purchases did a customer make
    in a year. Well, that can only be discrete values. They bought one thing, or they
    bought two things, or they bought three things. They couldn't have bought, 2.25
    things or three and three-quarters things. It's a discrete value that has an integer
    restriction to it.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 有离散数据，基于整数，例如某种事件的计数。一些例子是客户一年内购买了多少次。这只能是离散值。他们买了一件东西，或者他们买了两件东西，或者他们买了三件东西。他们不可能买了2.25件或三个四分之三的东西。这是一个具有整数限制的离散值。
- en: Continuous data
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连续数据
- en: The other type of numerical data is continuous data, and this is stuff that
    has an infinite range of possibilities where you can go into fractions. So, for
    example, going back to the height of people, there is an infinite number of possible
    heights for people. You could be five feet and 10.37625 inches tall, or the time
    it takes to do something like check out on a website could be any huge range of
    possibilities, 10.7625 seconds for all you know, or how much rainfall in a given
    day. Again, there's an infinite amount of precision there. So that's an example
    of continuous data.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种数值数据是连续数据，这是一种具有无限可能性范围的数据，可以进入分数。例如，回到人的身高，有无限可能的身高。您可能身高五英尺十点三七六二五英寸，或者做某事的时间，例如在网站上结账可能有任意巨大范围的可能性，可能是10.7625秒，或者一天内的降雨量。同样，这里有无限的精度。这就是连续数据的一个例子。
- en: To recap, numerical data is something you can measure quantitatively with a
    number, and it can be either discrete, where it's integer-based like an event
    count, or continuous, where you can have an infinite range of precision available
    to that data.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，数值数据是您可以用数字量化地测量的东西，它可以是离散的，例如基于事件计数的整数，也可以是连续的，其中您可以对该数据有无限范围的精度。
- en: Categorical data
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分类数据
- en: The second type of data that we're going to talk about is categorical data,
    and this is data that has no inherent numeric meaning.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将讨论的第二种数据类型是分类数据，这是没有固有数值含义的数据。
- en: Most of the time, you can't really compare one category to another directly.
    Things like gender, yes/no questions, race, state of residence, product category,
    political party; you can assign numbers to these categories, and often you will,
    but those numbers have no inherent meaning.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数时候，您实际上无法直接比较一个类别和另一个类别。例如性别、是/否问题、种族、居住州、产品类别、政党；您可以为这些类别分配数字，通常您会这样做，但这些数字没有固有含义。
- en: '![](img/1c0d03fd-5e54-4a21-a114-327a65405380.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1c0d03fd-5e54-4a21-a114-327a65405380.png)'
- en: So, for example, I can say that the area of Texas is greater than the area of
    Florida, but I can't just say Texas is greater than Florida, they're just categories.
    There's no real numerical quantifiable meaning to them, it's just ways that we
    categorize different things.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，例如，我可以说德克萨斯的面积大于佛罗里达的面积，但我不能只是说德克萨斯大于佛罗里达，它们只是类别。它们没有真正的数值可量化的意义，只是我们根据类别对不同的事物进行分类的方式。
- en: Now again, I might have some sort of numerical assignation to each state. I
    mean, I could say that Florida is state number 3 and Texas state number 4, but
    there's no real relationship between 3 and 4 there, right, it's just a shorthand
    to more compactly represent these categories. So again, categorical data does
    not have any intrinsic numerical meaning; it's just a way that you're choosing
    to split up a set of data based on categories.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我可能对每个州有某种数值的指定。我的意思是，我可以说佛罗里达是第3州，德克萨斯是第4州，但3和4之间没有真正的关系，对吧，这只是更紧凑地表示这些类别的一种简便方法。所以，分类数据没有任何固有的数值意义；它只是一种你选择根据类别来分割数据集的方式。
- en: Ordinal data
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 有序数据
- en: The last category that you tend to hear about with types of data is ordinal
    data, and it's sort of a mixture of numerical and categorical data. A common example
    is star ratings for a movie or music, or what have you.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你通常听到的最后一种数据类型是有序数据，它是数值和分类数据的一种混合。一个常见的例子是电影或音乐的星级评价，或其他什么的。
- en: '![](img/5e6a7491-49ae-4dc7-aa89-ed143bc3c5e4.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5e6a7491-49ae-4dc7-aa89-ed143bc3c5e4.png)'
- en: In this case, we have categorical data in that could be 1 through 5 stars, where
    1 might represent poor and 5 might represent excellent, but they do have mathematical
    meaning. We do know that 5 means it's better than a 1, so this is a case where
    we have data where the different categories have a numerical relationship to each
    other. So, I can say that 1 star is less than 5 stars, I can say that 2 stars
    is less than 3 stars, I can say that 4 stars is greater than 2 stars in terms
    of a measure of quality. Now you could also think of the actual number of stars
    as discrete numerical data. So, it's definitely a fine line between these categories,
    and in a lot of cases you can actually treat them interchangeably.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们有分类数据，可以是1到5颗星，其中1可能代表差，5可能代表优秀，但它们确实有数学意义。我们知道5意味着比1好，所以这是一种数据，其中不同的类别之间有数值关系。所以，我可以说1颗星小于5颗星，我可以说2颗星小于3颗星，我可以说4颗星在质量上大于2颗星。现在你也可以把实际的星数看作是离散数值数据。所以，这些类别之间的界限确实很微妙，在很多情况下你实际上可以互换对待它们。
- en: So, there you have it, the three different types. There is numerical, categorical,
    and ordinal data. Let's see if it's sunk in. Don't worry, I'm not going to make
    you hand in your work or anything.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，这就是三种不同类型。有数值、分类和有序数据。让我们看看它是否已经深入人心。别担心，我不会让你交作业或者什么的。
- en: '**Quick quiz:** For each of these examples, is the data numerical, categorical,
    or ordinal?'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**快速测验：**对于这些例子中的每一个，数据是数值的、分类的还是有序的？'
- en: Let's start with how much gas is in your gas tank. What do you think? Well,
    the right answer is numerical. It's a continuous numerical value because you can
    have an infinite range of possibilities of gas in your tank. I mean, yeah, there's
    probably some upper bound of how much gas you can fit in it, but there is no end
    to the number of possible values of how much gas you have. It could be three quarters
    of a tank, it could be seven sixteenths of the tank, it could be *1/pi* of a tank,
    I mean who knows, right?
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从你的油箱里有多少汽油开始。你觉得呢？嗯，正确的答案是数字。这是一个连续的数值，因为你的油箱里可能有无限的汽油可能性。我的意思是，是的，你可能有多少汽油可以装进去，但是你有多少汽油的可能值是没有尽头的。它可能是油箱的四分之三，可能是油箱的十六分之七，可能是油箱的*1/π*，谁知道呢？
- en: How about if you're reading your overall health on a scale of 1 to 4, where
    those choices correspond to the categories poor, moderate, good, and excellent?
    What do you think? That's a good example of ordinal data. That's very much like
    our movie ratings data, and again, depending on how you model that, you could
    probably treat it as discrete numerical data as well, but technically we're going
    to call that ordinal data.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你在1到4的范围内评估你的整体健康状况，其中这些选择对应于差、中等、良好和优秀的类别，你觉得呢？这是有序数据的一个很好的例子。这非常类似于我们的电影评分数据，再次取决于你如何对待它，你可能也可以把它当作离散数值数据，但从技术上讲，我们将把它称为有序数据。
- en: What about the races of your classmates? This is a pretty clear example of categorical
    data. You can't really compare purple people to green people, right, they're just
    purple and green, but they are categories that you might want to study and understand
    the differences between on some other dimension.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的同学的种族呢？这是一个很明显的分类数据的例子。你不能真正比较紫色的人和绿色的人，对吧，他们只是紫色和绿色，但它们是你可能想要研究和了解在某些其他维度上的差异的类别。
- en: How about the ages of your classmates in years? A little bit of a trick question
    there; if I said it had to be in an integer value of years, like 40, 50, or 55
    years old, then that would be discrete numerical data, but if I had more precision,
    like 40 years three months and 2.67 days, that would be continuous numerical data,
    but either way, it's a numerical data type.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的同学的年龄呢？这有点是个陷阱问题；如果我说它必须是整数年龄，比如40、50或55岁，那就是离散数值数据，但如果我有更多的精度，比如40年3个月2.67天，那就是连续数值数据，但无论如何，它都是数值数据类型。
- en: And finally, money spent in a store. Again, that could be an example of continuous
    numerical data. So again, this is only important because you might apply different
    techniques to different types of data.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，商店里花费的钱。同样，这可能是连续数值数据的一个例子。所以，这只是重要的原因是你可能会对不同类型的数据应用不同的技术。
- en: There might be some concepts where we do one type of implementation for categorical
    data and a different type of implementation for numerical data, for example.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 也许有一些概念，我们对分类数据和数值数据采用不同类型的实现，例如。
- en: 'So that''s all you need to know about the different types of data that you''ll
    commonly find, and that we''ll focus on in this book. They''re all pretty simple
    concepts: you''ve got numeric, categorical, and ordinal data, and numerical data
    can be continuous or discrete. There might be different techniques you apply to
    the data depending on what kind of data you''re dealing with, and we''ll see that
    throughout the book. Let''s move on.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是你需要了解的关于你通常会发现的不同类型的数据，以及我们在本书中将重点关注的内容。它们都是非常简单的概念：你有数值、分类和顺序数据，数值数据可以是连续的或离散的。根据你处理的数据类型，可能会有不同的技术应用到数据中，我们将在本书中看到这一点。让我们继续。
- en: Mean, median, and mode
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 均值、中位数和众数
- en: 'Let''s do a little refresher of statistics 101\. This is like elementary school
    stuff, but good to go through it again and see how these different techniques
    are used: Mean, median, and mode. I''m sure you''ve heard those terms before,
    but it''s good to see how they''re used differently, so let''s dive in.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来进行一次统计学101的复习。这就像小学的东西，但是再次经历一遍并看看这些不同的技术是如何使用的是很好的：均值、中位数和众数。我相信你以前听过这些术语，但看看它们是如何不同地使用是很好的，所以让我们深入研究一下。
- en: This should be a review for most of you, a quick refresher, now that we're starting
    to actually dive into some real statistics. Let's look at some actual data and
    figure out how to measure these things.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这对大多数人来说应该是一个复习，一个快速的复习，现在我们开始真正地深入一些实际的统计数据。让我们看看一些实际的数据，然后找出如何测量这些数据。
- en: Mean
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 均值
- en: The mean, as you probably know, is just another name for the average. To calculate
    the mean of a dataset, all you have to do is sum up all the values and divide
    it by the number of values that you have.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 均值，你可能知道，只是平均值的另一个名称。要计算数据集的均值，你所要做的就是把所有值加起来，然后除以你拥有的值的数量。
- en: '*Sum of samples/Number of samples*'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '*样本总和/样本数量*'
- en: Let's take this example, which calculates the mean (average) number of children
    per house in my neighborhood.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以同样的数据集来计算我社区每个房子的平均孩子数量。
- en: Let's say I went door-to-door in my neighborhood and asked everyone, how many
    children live in their household. (That, by the way, is a good example of discrete
    numerical data; remember from the previous section?) Let's say I go around and
    I found out that the first house has no kids in it, and the second house has two
    children, and the third household has three children, and so on and so forth.
    I amassed this little dataset of discrete numerical data, and to figure out the
    mean, all I do is add them all together and divide it by the number of houses
    that I went to.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我在我的社区挨家挨户地问每个人，他们家有多少孩子。 （顺便说一句，这是离散数值数据的一个很好的例子；还记得前一节吗？）假设我四处走动，发现第一家没有孩子，第二家有两个孩子，第三家有三个孩子，依此类推。我积累了这些离散数值数据的小数据集，为了计算均值，我所要做的就是把它们全部加起来，然后除以我去过的房子的数量。
- en: 'Number of children in each house on my street:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我街上每个房子的孩子数量：
- en: '*0, 2, 3, 2, 1, 0, 0, 2, 0*'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '*0, 2, 3, 2, 1, 0, 0, 2, 0*'
- en: The mean is *(0+2+3+2+1+0+0+2+0)/9 = 1.11*
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 均值是*(0+2+3+2+1+0+0+2+0)/9 = 1.11*
- en: It comes out as 0 plus 2 plus 3 plus all the rest of these numbers divided by
    the total number of houses that I looked at, which is 9, and the mean number of
    children per house in my sample is 1.11\. So, there you have it, mean.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是0加2加3加所有其他数字除以我看过的房子的总数，即9，我样本中每个房子的平均孩子数量是1.11。所以，这就是均值。
- en: Median
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 中位数
- en: Median is a little bit different. The way you compute the median of the dataset
    is by sorting all the values (in either ascending or descending order), and taking
    the one that ends up in the middle.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 中位数有点不同。计算数据集的中位数的方法是通过对所有值进行排序（无论是升序还是降序），并取中间的那个值。
- en: So, for example, let's use the same dataset of children in my neighborhood
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，例如，让我们使用我社区孩子的相同数据集
- en: '*0, 2, 3, 2, 1, 0, 0, 2, 0*'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '*0, 2, 3, 2, 1, 0, 0, 2, 0*'
- en: I would sort it numerically, and I can take the number that's slap dab in the
    middle of the data, which turns out to be 1.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我会按数字顺序排列，然后取出数据中间的数字，结果是1。
- en: '*0, 0, 0, 0, 1, 2, 2, 2, 3*'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '*0, 0, 0, 0, 1, 2, 2, 2, 3*'
- en: Again, all I do is take the data, sort it numerically, and take the center point.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我所要做的就是取数据，按数字顺序排列，然后取中间的点。
- en: If you have an even number of data points, then the median might actually fall
    in between two data points. It wouldn't be clear which one is actually the middle.
    In that case, all you do is, take the average of the two that do fall in the middle
    and consider that number as the median.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数据点的数量是偶数，那么中位数可能会落在两个数据点之间。不清楚哪一个实际上是中间的。在这种情况下，你所要做的就是取两个中间的数的平均值，并将该数字视为中位数。
- en: The factor of outliers
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异常值的因素
- en: Now in the preceding example of the number of kids in each household, the median
    and the mean were pretty close to each other because there weren't a lot of outliers.
    We had 0, 1, 2, or 3 kids, but we didn't have some wacky family that had 100 kids.
    That would have really skewed the mean, but it might not have changed the median
    too much. That's why the median is often a very useful thing to look at and often
    overlooked.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在前面的例子中，每个家庭的孩子数量，中位数和均值非常接近，因为没有太多的异常值。我们有0、1、2或3个孩子，但我们没有一些有100个孩子的疯狂家庭。那会使均值受到很大的影响，但可能不会太大地改变中位数。这就是为什么中位数通常是一个非常有用的东西，经常被忽视。
- en: Median is less susceptible to outliers than the mean.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 中位数比均值更不容易受到异常值的影响。
- en: People have a tendency to mislead people with statistics sometimes. I'm going
    to keep pointing this out throughout the book wherever I can.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 有时人们倾向于用统计数据误导人。我会在整本书中尽可能地指出这一点。
- en: For example, you can talk about the mean or average household income in the
    United States, and that actual number from last year when I looked it up was $72,000
    or so, but that doesn't really provide an accurate picture of what the typical
    American makes. That is because, if you look at the median income, it's much lower
    at $51,939\. Why is that? Well, because of income inequality. There are a few
    very rich people in America, and the same is true in a lot of countries as well.
    America's not even the worst, but you know those billionaires, those super-rich
    people that live on Wall Street or Silicon Valley or some other super-rich place,
    they skew the mean. But there's so few of them that they don't really affect the
    median so much.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可以谈论美国的平均家庭收入，去年我查到的实际数字大约是72000美元，但这并不能真正准确地反映出典型的美国人的收入。这是因为，如果你看中位数收入，它要低得多，只有51939美元。为什么呢？因为收入不平等。美国有一些非常富有的人，其他很多国家也是如此。美国甚至不是最糟糕的，但你知道那些亿万富翁，那些住在华尔街或硅谷或其他一些非常富有的地方的超级富人，他们会使平均值偏离。但他们数量很少，所以他们并不会对中位数产生太大影响。
- en: This is a great example of where the median tells a much better story about
    the typical person or data point in this example than the mean does. Whenever
    someone talks about the mean, you have to think about what does the data distribution
    looks like. Are there outliers that might be skewing that mean? And if the answer
    is potentially yes, you should also ask for the median, because often, that provides
    more insight than the mean or the average.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个很好的例子，中位数比平均数更好地反映了这个例子中典型的人或数据点的情况。每当有人谈论平均数时，你必须考虑数据分布是什么样子。是否有可能会使平均数偏离的异常值？如果答案可能是肯定的，你也应该要求中位数，因为通常情况下，中位数提供的洞察力比平均数更多。
- en: Mode
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 众数
- en: Finally, we'll talk about mode. This doesn't really come up too often in practice,
    but you can't talk about mean and median without talking about mode. All mode
    means, is the most common value in a dataset.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将讨论众数。实际上在实践中这并不经常出现，但你不能谈论均值和中位数而不谈论众数。众数的意思就是数据集中最常见的值。
- en: Let's go back to my example of the number of kids in each house.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到我关于每个房子中孩子数量的例子。
- en: '*0, 2, 3, 2, 1, 0, 0, 2, 0*'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 0、2、3、2、1、0、0、2、0
- en: 'How many of each value are there:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 每个值有多少个：
- en: '*0: 4, 1: 1, 2: 3, 3: 1*'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '0: 4, 1: 1, 2: 3, 3: 1'
- en: The MODE is 0
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 众数是0
- en: If I just look at what number occurs most frequently, it turns out to be 0,
    and the mode therefore of this data is 0\. The most common number of children
    in a given house in this neighborhood is no kids, and that's all that means.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我只看最频繁出现的数字，结果是0，因此这组数据的众数是0。在这个社区中，一个房子里孩子的最常见数量是没有孩子，这就是它的含义。
- en: Now this is actually a pretty good example of continuous versus discrete data,
    because this only really works with discrete data. If I have a continuous range
    of data then I can't really talk about the most common value that occurs, unless
    I quantize that somehow into discrete values. So we've already run into one example
    here where the data type matters.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在这实际上是一个很好的连续与离散数据的例子，因为这只适用于离散数据。如果我有一系列连续的数据，那么我就无法谈论最常出现的值，除非我以某种方式将其量化为离散值。所以我们已经遇到了一个数据类型很重要的例子。
- en: Mode is usually only relevant to discrete numerical data, and not to continuous
    data.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 众数通常只与离散数值数据相关，而不与连续数据相关。
- en: A lot of real-world data tends to be continuous, so maybe that's why I don't
    hear too much about mode, but we see it here for completeness.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 很多现实世界的数据往往是连续的，所以也许这就是为什么我不太听到关于众数的事情，但我们在这里看到了它的完整性。
- en: 'There you have it: mean, median, and mode in a nutshell. Kind of the most basic
    statistics stuff you can possibly do, but I hope you gained a little refresher
    there in the importance of choosing between median and mean. They can tell very
    different stories, and yet people tend to equate them in their heads, so make
    sure you''re being a responsible data scientist and representing data in a way
    that conveys the meaning you''re trying to represent. If you''re trying to display
    a typical value, often the median is a better choice than the mean because of
    outliers, so remember that. Let''s move on.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样：均值、中位数和众数的概要。这可能是你能做的最基本的统计工作，但我希望你在选择中位数和均值的重要性上得到了一点复习。它们可以讲述非常不同的故事，但人们往往在头脑中将它们等同起来，所以确保你是一个负责任的数据科学家，并以传达你试图代表的含义的方式代表数据。如果你试图显示一个典型值，通常中位数比平均数更好，因为异常值，所以记住这一点。让我们继续。
- en: Using mean, median, and mode in Python
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Python中使用均值、中位数和众数
- en: Let's start doing some real coding in Python and see how you compute the mean,
    median, and mode using Python in an IPython Notebook file.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始在Python中进行一些真正的编码，看看如何使用Python在IPython Notebook文件中计算均值、中位数和众数。
- en: So go ahead and open up the `MeanMedianMode.ipynb` file from the data files
    for this section if you'd like to follow along, which I definitely encourage you
    to do. If you need to go back to that earlier section on where to download these
    materials from, please go do that, because you will need these files for the section.
    Let's dive in!
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，如果你想跟着做的话，可以打开本节数据文件中的`MeanMedianMode.ipynb`文件，我绝对鼓励你这样做。如果你需要回到之前关于从哪里下载这些材料的部分，请去做，因为你将需要这些文件来完成本节。让我们开始吧！
- en: Calculating mean using the NumPy package
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用NumPy包计算均值
- en: What we're going to do is create some fake income data, getting back to our
    example from the previous section. We're going to create some fake data where
    the typical American makes around $27,000 a year in this example, we're going
    to say that's distributed with a normal distribution and a standard deviation
    of 15,000\. All numbers are completely made up, and if you don't know what normal
    distribution and standard deviation means yet, don't worry. I'm going to cover
    that a little later in the chapter, but I just want you to know what these different
    parameters represent in this example. It will make sense later on.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要做的是创建一些虚假的收入数据，回到上一节的例子。在这个例子中，我们将创建一些虚假数据，其中典型的美国人在这个例子中每年赚大约$27,000，我们将说这是以正态分布和标准差为15,000分布的。所有的数字都是完全虚构的，如果你还不知道正态分布和标准差是什么意思，不用担心。我会在本章稍后介绍，但我只是想让你知道这个例子中这些不同参数代表什么。以后会有意义的。
- en: In our Python notebook, remember to import the NumPy package into Python, which
    makes computing mean, median, and mode really easy. We're going to use the `import
    numpy as np` directive, which means we can use `np` as a shorthand to call `numpy`
    from now on.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的Python笔记本中，记得将NumPy包导入Python，这样计算平均值、中位数和众数就变得非常容易。我们将使用`import numpy as
    np`指令，这意味着我们可以使用`np`作为调用`numpy`的简写。
- en: Then we're going to create a list of numbers called `incomes` using the `np.random.normal`
    function.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将使用`np.random.normal`函数创建一个名为`incomes`的数字列表。
- en: '[PRE0]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The three parameters of the `np.random.normal` function mean I want the data
    centered around `27000`, with a standard deviation of `15000`, and I want python
    to make `10000` data points in this list.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.random.normal`函数的三个参数表示我希望数据以`27000`为中心，标准差为`15000`，并且我希望Python在这个列表中生成`10000`个数据点。'
- en: Once I do that, I compute the average of those data points, or the mean by just
    calling `np.mean` on `incomes` which is my list of data. It's just that simple.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我这样做了，我就可以通过在`incomes`上调用`np.mean`来计算这些数据点的平均值，或者说是平均值。就是这么简单。
- en: Let's go ahead and run that. Make sure you selected that code block and then
    you can hit the play button to actually execute it, and since there is a random
    component to these income numbers, every time I run it, I'm going to get a slightly
    different result, but it should always be pretty close to `27000`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续运行。确保你选择了那个代码块，然后你可以点击播放按钮来执行它，由于这些收入数字有一个随机成分，每次我运行它，我都会得到一个略微不同的结果，但它应该总是接近`27000`。
- en: '[PRE1]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: OK, so that's all there is to computing the mean in Python, just using NumPy
    (`np.mean`) makes it super easy. You don't have to write a bunch of code or actually
    add up everything and count up how many items you had and do the division. NumPy
    mean, does all that for you.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，这就是在Python中计算平均值的全部内容，只需使用NumPy（`np.mean`）就可以轻松搞定。你不必写一堆代码，或者实际上把所有东西加起来，计算出你有多少项，然后做除法。NumPy
    mean，为你做了所有这些。
- en: Visualizing data using matplotlib
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用matplotlib可视化数据
- en: Let's visualize this data to make it make a little more sense. So there's another
    package called `matplotlib`, and again we're going to talk about that a lot more
    in the future as well, but it's a package that lets me make pretty graphs in IPython
    Notebooks, so it's an easy way to visualize your data and see what's going on.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们可视化这些数据，以使它更加有意义。还有另一个叫做`matplotlib`的包，我们以后也会更多地谈论它，但它是一个让我在IPython笔记本中制作漂亮图形的包，所以这是一种简单的方式来可视化你的数据并了解发生了什么。
- en: 'In this example, we are using `matplotlib` to create a histogram of our income
    data broken up into `50` different buckets. So basically, we''re taking our continuous
    data and discretizing it, and then we can call show on `matplotlib.pyplot` to
    actually display this histogram in line. Refer to the following code:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用`matplotlib`创建了一个包含`50`个不同桶的收入数据的直方图。所以基本上，我们将我们的连续数据离散化，然后我们可以在`matplotlib.pyplot`上调用show来实际显示这个直方图。参考以下代码：
- en: '[PRE2]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Go ahead and select the code block and hit play. It will actually create a
    new graph for us as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 继续选择代码块并点击播放。它将为我们创建一个新的图表。
- en: '![](img/33c9aad3-bf0f-4e80-bfad-616593e5b38d.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/33c9aad3-bf0f-4e80-bfad-616593e5b38d.jpg)'
- en: If you're not familiar with histograms or you need a refresher, the way to interpret
    this is that for each one of these buckets that we've discretized our data into
    is showing the frequency of that data.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不熟悉直方图或者需要复习一下，解释这个的方法是，我们将数据离散化为每个桶，显示了该数据的频率。
- en: So, for example, around 27,000-ish we see there's about **600** data points
    in that neighborhood for each given range of values. There's a lot of people around
    the 27,000 mark, but when you get over to outliers like **80,000**, there is not
    a whole lot, and apparently there's some poor souls that are even in debt at **-40,000**,
    but again, they're very rare and not probable because we defined a normal distribution,
    and this is what a normal probability curve looks like. Again, we're going to
    talk about that more in detail later, but I just want to get that idea in your
    head if you don't already know it.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，大约在27,000左右，我们看到每个给定值范围内大约有**600**个数据点。在27,000左右有很多人，但当你到达**80,000**这样的异常值时，就没有那么多了，显然有一些可怜的人甚至负债**-40,000**，但是他们很少，不太可能，因为我们定义了一个正态分布，这就是正态概率曲线的样子。我们以后会更详细地谈论这个，但我只是想让你知道这个想法，如果你还不知道的话。
- en: Calculating median using the NumPy package
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用NumPy包计算中位数
- en: Alright, so computing the median is just as simple as computing the mean. Just
    like we had NumPy `mean`, we have a NumPy `median` function as well.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，计算中位数就像计算平均值一样简单。就像我们有NumPy的`mean`一样，我们也有一个NumPy的`median`函数。
- en: We can just use the `median` function on `incomes`, which is our list of data,
    and that will give us the median. In this case, that came up to $26,911, which
    isn't very different from the mean of $26988\. Again, the initial data was random,
    so your values will be slightly different.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在我们的数据列表`incomes`上使用`median`函数，这将给我们中位数。在这种情况下，中位数是$26,911，与均值$26988\相差不大。同样，初始数据是随机的，所以你的值会略有不同。
- en: '[PRE3]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The following is the output of the preceding code:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前面代码的输出：
- en: '[PRE4]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We don't expect to see a lot of outliers because this is a nice normal distribution.
    Median and mean will be comparable when you don't have a lot of weird outliers.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不希望看到很多异常值，因为这是一个很好的正态分布。当你没有很多奇怪的异常值时，中位数和均值是可以比较的。
- en: Analyzing the effect of outliers
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分析异常值的影响
- en: Just to prove a point, let's add in an outlier. We'll take Donald Trump; I think
    he qualifies as an outlier. Let's go ahead and add his income in. So I'm going
    to manually add this to the data using `np.append`, and let's say add a billion
    dollars (which is obviously not the actual income of Donald Trump) into the incomes
    data.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 为了证明一点，让我们加入一个异常值。我们来加入唐纳德·特朗普；我认为他算是一个异常值。让我们继续添加他的收入。所以我将手动使用`np.append`将这个数据添加到数据中，假设添加10亿美元（这显然不是唐纳德·特朗普的实际收入）到收入数据中。
- en: '[PRE5]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'What we''re going to see is that this outlier doesn''t really change the median
    a whole lot, you know, that''s still going to be around the same value $26,911,
    because we didn''t actually change where the middle point is, with that one value,
    as shown in the following example:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到的是，这个异常值并没有真正改变中位数很多，你知道，它仍然会在大约相同的值$26,911左右，因为我们实际上并没有改变中间点在哪里，只是在下面的例子中显示了一个值：
- en: '[PRE6]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This will output the following:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这将输出以下内容：
- en: '[PRE7]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This gives a new output of:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这给出了一个新的输出：
- en: '[PRE8]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The following is the output of the preceding code:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前面代码的输出：
- en: '[PRE9]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Aha, so there you have it! It is a great example of how median and mean, although
    people tend to equate them in commonplace language, can be very different, and
    tell a very different story. So that one outlier caused the average income in
    this dataset to be over $127160 a year, but the more accurate picture is closer
    to 27,000 dollars a year for the typical person in this dataset. We just had the
    mean skewed by one big outlier.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 啊哈，就是这样！这是一个很好的例子，说明了中位数和均值，尽管人们在日常语言中倾向于将它们等同起来，但它们可能非常不同，并讲述了一个非常不同的故事。因此，这一个异常值导致了这个数据集中的平均收入超过了每年12.7万美元，但更准确的情况是这个数据集中典型人的年收入接近2.7万美元。我们只是因为一个大的异常值而使均值偏离了。
- en: 'The moral of the story is: take anyone who talks about means or averages with
    a grain of salt if you suspect there might be outliers involved, and income distribution
    is definitely a case of that.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 故事的寓意是：如果你怀疑可能存在异常值，那么对于谈论均值或平均数的人要持怀疑态度，而收入分布显然就是这种情况。
- en: Calculating mode using the SciPy package
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用SciPy包计算众数
- en: Finally, let's look at mode. We will just generate a bunch of random integers,
    500 of them to be precise, that range between `18` and `90`. We're going to create
    a bunch of fake ages for people.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们来看看众数。我们将生成一堆随机整数，精确地说是500个，范围在`18`到`90`之间。我们将为人们创建一堆虚假的年龄。
- en: '[PRE10]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Your output will be random, but should look something like the following screenshot:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 你的输出将是随机的，但应该看起来像以下的截图：
- en: '![](img/85aa43b4-d2c8-480e-a310-720ff89ec93e.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/85aa43b4-d2c8-480e-a310-720ff89ec93e.png)'
- en: Now, SciPy, kind of like NumPy, is a bunch of like handy-dandy statistics functions,
    so we can import `stats` from SciPy using the following syntax. It's a little
    bit different than what we saw before.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，SciPy，有点像NumPy，是一堆方便的统计函数，所以我们可以使用以下语法从SciPy导入`stats`。这与我们之前看到的有点不同。
- en: '[PRE11]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The code means, from the `scipy` package import `stats`, and I''m just going
    to refer to the package as `stats`, Tha means that I don''t need to have an alias
    like I did before with NumPy, just different way of doing it. Both ways work.
    Then, I used the `stats.mode` function on `ages`, which is our list of random
    ages. When we execute the above code, we get the following output:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码的意思是，从`scipy`包中导入`stats`，我只是用`stats`来引用这个包，这意味着我不需要像之前使用NumPy那样使用别名，只是另一种做法。两种方法都可以。然后，我在`ages`上使用了`stats.mode`函数，这是我们的随机年龄列表。当我们执行上面的代码时，我们得到了以下输出：
- en: '[PRE12]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: So in this case, the actual mode is `39` that turned out to be the most common
    value in that array. It actually occurred `12` times.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 所以在这种情况下，实际的众数是`39`，在数组中出现了`12`次。
- en: Now if I actually create a new distribution, I would expect a completely different
    answer because this data really is completely random what these numbers are. Let's
    execute the above code blocks again to create a new distribution.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我真的创建一个新的分布，我会期望得到一个完全不同的答案，因为这些数据确实是完全随机的。让我们再次执行上面的代码块来创建一个新的分布。
- en: '[PRE13]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The output for randomizing the equation is as distribution is as follows:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 随机化方程的输出如下分布：
- en: '![](img/4335f346-1b95-4644-a403-da39a552f22a.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4335f346-1b95-4644-a403-da39a552f22a.png)'
- en: Make sure you selected that code block and then you can hit the play button
    to actually execute it.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你选择了那个代码块，然后你可以点击播放按钮来执行它。
- en: In this case, the mode ended up being the number `29`, which occurred `14` times.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，众数最终是数字`29`，出现了`14`次。
- en: '[PRE14]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: So, it's a very simple concept. You can do it a few more times just for fun.
    It's kind of like rolling the roulette wheel. We'll create a new distribution
    again.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，这是一个非常简单的概念。你可以再做几次，只是为了好玩。这有点像转动轮盘。我们将再次创建一个新的分布。
- en: There you have it, mean, median, and mode in a nutshell. It's very simple to
    do using the SciPy and NumPy packages.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样，均值、中位数和众数就是这样。使用SciPy和NumPy包非常简单。
- en: Some exercises
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一些练习
- en: I'm going to give you a little assignment in this section. If you open up `MeanMedianExercise.ipynb`
    file, there's some stuff you can play with. I want you to roll up your sleeves
    and actually try to do this.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我将在本节中给你一个小作业。如果你打开`MeanMedianExercise.ipynb`文件，里面有一些你可以玩的东西。我希望你能动手尝试一下。
- en: In the file, we have some random e-commerce data. What this data represents
    is the total amount spent per transaction, and again, just like with our previous
    example, it's just a normal distribution of data. We can run that, and your homework
    is to go ahead and find the mean and median of this data using the NumPy package.
    Pretty much the easiest assignment you could possibly imagine. All the techniques
    you need are in the `MeanMedianMode.ipynb` file that we used earlier.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在文件中，我们有一些随机的电子商务数据。这些数据代表的是每笔交易的总金额，就像我们之前的例子一样，这只是一组数据的正态分布。我们可以运行它，你的作业是使用NumPy包找出这些数据的平均值和中位数。这几乎是你能想象到的最简单的作业。你需要的所有技巧都在我们之前使用的`MeanMedianMode.ipynb`文件中。
- en: 'The point here is not really to challenge you, it''s just to make you actually
    write some Python code and convince yourself that you can actually get a result
    and make something happen here. So, go ahead and play with that. If you want to
    play with it some more, feel free to play around with the data distribution here
    and see what effect you can have on the numbers. Try adding some outliers, kind
    of like we did with the income data. This is the way to learn this stuff: master
    the basics and the advance stuff will follow. Have at it, have fun.'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的重点并不是真的要挑战你，而是让你真正写一些Python代码，并让自己相信你实际上可以得到一个结果并让事情发生。所以，继续玩吧。如果你想再玩一会儿，可以随意玩一下这里的数据分布，看看你对数字有什么影响。尝试添加一些异常值，就像我们在收入数据中所做的那样。这是学习这些东西的方法：掌握基础知识，高级知识就会随之而来。尽情享受吧。
- en: Once your're ready, let's move forward to our next concept, standard deviation
    and variance.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你准备好了，让我们继续前进到我们的下一个概念，标准差和方差。
- en: Standard deviation and variance
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标准差和方差
- en: Let's talk about standard deviation and variance. The concepts and terms you've
    probably heard before, but let's go into a little bit more depth about what they
    really mean and how you compute them. It's a measure of the spread of a data distribution,
    and that will make a little bit more sense in a few minutes.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们谈谈标准差和方差。这些概念和术语你可能以前听过，但让我们更深入地了解一下它们的真正含义以及如何计算它们。这是数据分布的分散程度的一种度量，几分钟后你就会更清楚了。
- en: Standard deviation and variance are two fundamental quantities for a data distribution
    that you'll see over and over again in this book. So, let's see what they are,
    if you need a refresher.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 标准差和方差是数据分布的两个基本量，你将在本书中一遍又一遍地看到它们。所以，如果你需要温习一下，让我们看看它们是什么。
- en: Variance
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 方差
- en: 'Let''s look at a histogram, because variance and standard deviation are all
    about the spread of the data, the shape of the distribution of a dataset. Take
    a look at the following histogram:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个直方图，因为方差和标准差都与数据的分散程度、数据集的分布形状有关。看一下下面的直方图：
- en: '![](img/cacd8ae5-44dc-4b10-8a09-de01df532676.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cacd8ae5-44dc-4b10-8a09-de01df532676.png)'
- en: Let's say that we have some data on the arrival frequency of airplanes at an
    airport, for example, and this histogram indicates that we have around 4 arrivals
    per minute and that happened on around 12 days that we looked at for this data.
    However, we also have these outliers. We had one really slow day that only had
    one arrival per minute, we only had one really fast day where we had almost 12
    arrivals per minute. So, the way to read a histogram is look up the bucket of
    a given value, and that tells you how frequently that value occurred in your data,
    and the shape of the histogram could tell you a lot about the probability distribution
    of a given set of data.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一些关于飞机在机场到达频率的数据，例如，这个直方图表明我们大约每分钟有4次到达，我们观察到的数据中大约有12天出现了这种情况。然而，我们也有一些异常值。有一天到达速度非常慢，每分钟只有一次到达，还有一天到达速度非常快，几乎每分钟有12次到达。因此，读取直方图的方法是查找给定值的桶，并告诉您该值在数据中出现的频率，直方图的形状可以告诉您很多关于给定数据集的概率分布的信息。
- en: We know from this data that our airport is very likely to have around 4 arrivals
    per minute, but it's very unlikely to have 1 or 12, and we can also talk specifically
    about the probabilities of all the numbers in between. So not only is it unlikely
    to have 12 arrivals per minute, it's also very unlikely to have 9 arrivals per
    minute, but once we start getting around 8 or so, things start to pick up a little
    bit. A lot of information can be had from a histogram.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从这些数据中知道，我们的机场很可能每分钟有大约4次到达，但很不可能有1次或12次到达，我们还可以具体讨论中间所有数字的概率。因此，不仅每分钟有12次到达的可能性很小，每分钟有9次到达的可能性也很小，但一旦我们开始接近8左右，事情就开始有点起色了。从直方图中可以得到很多信息。
- en: Variance measures how *spread-out* the data is.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 方差衡量数据的*分散程度*。
- en: Measuring variance
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测量方差
- en: We usually refer to variance as sigma squared, and you'll find out why momentarily,
    but for now, just know that variance is the average of the squared differences
    from the mean.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通常将方差称为sigma平方，你马上就会知道为什么，但现在，只需知道方差是平均值与平方差的差值。
- en: To compute the variance of a dataset, you first figure out the mean of it. Let's
    say I have some data that could represent anything. Let's say maximum number of
    people that were standing in line for a given hour. In the first hour, I observed
    1 person standing in line, then 4, then 5, then 4, then 8.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要计算数据集的方差，首先要找出它的平均值。假设我有一些数据，可以代表任何东西。比如说某个小时排队的最大人数。在第一个小时，我观察到有1个人在排队，然后是4个，然后是5个，然后是4个，然后是8个。
- en: The first step in computing the variance is just to find the mean, or the average,
    of that data. I add them all, divide the sum by the number of data points, and
    that comes out to 4.4 which is the average number of people standing in line *(1+4+5+4+8)/5
    = 4.4*.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算方差的第一步就是找到这些数据的均值或平均值。我把它们全部加起来，将总和除以数据点的数量，结果是4.4，这是排队人数的平均数*(1+4+5+4+8)/5=4.4*。
- en: Now the next step is to find the differences from the mean for each data point.
    I know that the mean is 4.4\. So for my first data point, I have 1, so *1 - 4.4
    = -3.4*, The next data point is 4, so 4 - 4.4 = -0.4 *4 - 4.4 = -0.4*, and so
    on and so forth. OK, so I end up with these both positive and negative numbers
    that represent the variance from the mean for each data point *(-3.4, -0.4, 0.6,
    -0.4, 3.6)*.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在下一步是找到每个数据点与均值的差异。我知道均值是4.4。所以对于我的第一个数据点，我有1，所以*1-4.4=-3.4*，下一个数据点是4，所以4-4.4=-0.4*4-4.4=-0.4*，依此类推。所以我得到这些正负数，代表每个数据点与均值的方差*(-3.4，-0.4，0.6，-0.4，3.6)*。
- en: 'Now what I need is a single number that represents the variance of this entire
    dataset. So, the next thing I''m going to do is find the square of these differences.
    I''m just going to go through each one of those raw differences from the mean
    and square them. This is for a couple of different reasons:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我需要一个单一的数字来代表整个数据集的方差。因此，我接下来要做的是找到这些差异的平方。我将逐个计算这些与均值的原始差异的平方。这是出于几个不同的原因：
- en: First, I want to make sure that negative variances. Count just as much as positive
    variances. Otherwise, they will cancel each other out. That'd be bad.
  id: totrans-160
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，我要确保负方差和正方差一样重要。否则，它们将互相抵消。那就不好了。
- en: Second, I also want to give more weight to the outliers, so this amplifies the
    effect of things that are very different from the mean while still, making sure
    that the negatives and positives are comparable *(11.56, 0.16, 0.36, 0.16, 12.96)*.
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其次，我还想给异常值更多的权重，因此这会放大与均值非常不同的事物的影响，同时确保负数和正数是可比较的*(11.56，0.16，0.36，0.16，12.96)*。
- en: 'Let''s look at what happens there, so (-3.4)² is a positive 11.56 and (-0.4)²
    ends up being a much smaller number, that is 0.16, because that''s much closer
    to the mean of 4.4\. Also (0.6)² turned out to be close to the mean, only 0.36\.
    But as we get up to the positive outlier, (3.6)² ends up being 12.96\. That gives
    us: *(11.56, 0.16, 0.36, 0.16, 12.96).*'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看那里发生了什么，所以(-3.4)²是一个正数11.56，(-0.4)²最终是一个更小的数字，即0.16，因为它更接近均值4.4。同样(0.6)²结果接近均值，只有0.36。但是当我们到达正的异常值时，(3.6)²最终是12.96。这给了我们：*(11.56，0.16，0.36，0.16，12.96)*。
- en: To find the actual variance value, we just take the average of all those squared
    differences. So we add up all these squared variances, divide the sum by 5, that
    is number of values that we have, and we end up with a variance of 5.04.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 要找到实际的方差值，我们只需取所有这些平方差的平均值。因此，我们将所有这些平方差相加，将总和除以5，也就是我们拥有的值的数量，最终得到方差为5.04。
- en: '![](img/2c0450ae-7518-4fd5-913d-834fa7690b3b.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c0450ae-7518-4fd5-913d-834fa7690b3b.png)'
- en: OK, that's all variance is.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，这就是方差的全部内容。
- en: Standard deviation
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标准差
- en: Now typically, we talk about standard deviation more than variance, and it turns
    out standard deviation is just the square root of the variance. It's just that
    simple.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，我们谈论标准差比方差更多，结果标准差只是方差的平方根。就是这么简单。
- en: So, if I had this variance of *5.04*, the standard deviation is *2.24*. So you
    see now why we said that the variance = (σ)². It's because σ itself represents
    the standard deviation. So, if I take the square root of (σ)², I get sigma. That
    ends up in this example to be 2.24.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果我有这个方差*5.04*，标准差就是*2.24*。所以你现在明白为什么我们说方差=(σ)²。因为σ本身代表标准差。因此，如果我取(σ)²的平方根，我得到σ。在这个例子中，结果是2.24。
- en: '![](img/e5593f79-70de-45c1-95f6-a481fcd4932e.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e5593f79-70de-45c1-95f6-a481fcd4932e.png)'
- en: Identifying outliers with standard deviation
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用标准差识别异常值
- en: Here's a histogram of the actual data we were looking at in the preceding example
    for calculating variance.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们在前面的示例中查看的实际数据的直方图，用于计算方差。
- en: '![](img/f44b86df-acba-4f0d-8118-d77696204ddb.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f44b86df-acba-4f0d-8118-d77696204ddb.png)'
- en: Now we see that the number **4** occurred twice in our dataset, and then we
    had one **1**, one **5**, and one **8**.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们看到数字**4**在我们的数据集中出现了两次，然后我们有一个**1**，一个**5**，和一个**8**。
- en: The standard deviation is usually used as a way to think about how to identify
    outliers in your dataset. If I say if I'm within one standard deviation of the
    mean of 4.4, that's considered to be kind of a typical value in a normal distribution.
    However, you can see in the preceding diagram, that the numbers **1** and **8**
    actually lie outside of that range. So if I take 4.4 plus or minus 2.24, we end
    up around **7** and **2**, and **1** and **8** both fall outside of that range
    of a standard deviation. So we can say mathematically, that 1 and 8 are outliers.
    We don't have to guess and eyeball it. Now there is still a judgment call as to
    what you consider an outlier in terms of how many standard deviations a data point
    is from the mean.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 标准差通常用作一种思考如何识别数据集中的异常值的方法。如果我说如果我在均值4.4的标准差内，那在正态分布中被认为是一种典型值。然而，你可以看到在前面的图表中，数字**1**和**8**实际上位于该范围之外。因此，如果我取4.4加减2.24，我们得到大约**7**和**2**，而**1**和**8**都落在标准差范围之外。因此我们可以数学上说，1和8是异常值。我们不必猜测和凭眼测量。现在仍然需要判断一个数据点与均值相比是多少标准差的异常值。
- en: You can generally talk about how much of an outlier a data point is by how many
    standard deviations (or sometimes how many-sigmas) from the mean it is.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 通常可以通过一个数据点与均值相差多少标准差（有时也可以是多少西格玛）来谈论一个数据点有多少异常值。
- en: So that's something you'll see standard deviation used for in the real world.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是标准差在现实世界中使用的一些情况。
- en: Population variance versus sample variance
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总体方差与样本方差
- en: There is a little nuance to standard deviation and variance, and that's when
    you're talking about population versus sample variance. If you're working with
    a complete set of data, a complete set of observations, then you do exactly what
    I told you. You just take the average of all the squared variances from the mean
    and that's your variance.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 标准差和方差有一点微妙之处，就是当你谈论总体与样本方差时。如果你在处理完整的数据集，一组完整的观察数据，那么你就按照我告诉你的做。你只需取平均值，从均值开始所有平方差的平均值就是你的方差。
- en: However, if you're sampling your data, that is, if you're taking a subset of
    the data just to make computing easier, you have to do something a little bit
    different. Instead of dividing by the number of samples, you divide by the number
    of samples minus 1\. Let's look at an example.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果你在对数据进行抽样，也就是说，如果你只是取数据的一个子集来简化计算，你就要做一些不同的事情。你不是除以样本数，而是除以样本数减1。让我们看一个例子。
- en: We'll use the sample data we were just studying for people standing in a line.
    We took the sum of the squared variances and divided by 5, that is the number
    of data points that we had, to get 5.04.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用刚刚研究的排队人员的样本数据。我们将平方差的总和除以5，也就是我们有的数据点的数量，得到5.04。
- en: '*σ² = (11.56 + 0.16 + 0.36 + 0.16 + 12.96) / 5 = 5.04*'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '*σ² = (11.56 + 0.16 + 0.36 + 0.16 + 12.96) / 5 = 5.04*'
- en: If we were to look at the sample variance, which is designated by S², it is
    found by the sum of the squared variances divided by 4, that is *(n - 1)*. This
    gives us the sample variance, which comes out to 6.3.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们看样本方差，用S²表示，它是由平方差的总和除以4得到的，也就是*(n - 1)*。这给我们了样本方差，结果是6.3。
- en: '*S² = (11.56 + 0.16 + 0.36 + 0.16 + 12.96) / 4 = 6.3*'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '*S² = (11.56 + 0.16 + 0.36 + 0.16 + 12.96) / 4 = 6.3*'
- en: So again, if this was some sort of sample that we took from a larger dataset,
    that's what you would do. If it was a complete dataset, you divide by the actual
    number. Okay, that's how we calculate population and sample variance, but what's
    the actual logic behind it?
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，如果这是我们从一个更大的数据集中取出的样本，那就是你要做的。如果这是一个完整的数据集，你就除以实际的数量。好的，这就是我们计算总体和样本方差的方法，但背后的实际逻辑是什么呢？
- en: The Mathematical explanation
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数学解释
- en: As for why there is difference between population and sample variance, it gets
    into really weird things about probability that you probably don't want to think
    about too much, and it requires some fancy mathematical notation, I try to avoid
    notation in this book as much as possible because I think the concepts are more
    important, but this is basic enough stuff and that you will see it over and over
    again.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 至于为什么总体和样本方差之间有差异，这涉及到概率的一些非常奇怪的东西，你可能不想太多地去思考，而且需要一些复杂的数学符号，我尽量避免在这本书中使用符号，因为我认为概念更重要，但这是非常基础的东西，你会一遍又一遍地看到它。
- en: 'As we''ve seen, population variance is usually designated as sigma squared
    (σ²), with sigma (σ) as standard deviation, and we can say that is the summation
    of each data point X minus the mean, mu, squared, that''s the variance of each
    sample squared over N, the number of data points , and we can express it with
    the following equation:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，总体方差通常被表示为sigma squared (σ²)，其中sigma (σ)是标准差，我们可以说这是每个数据点X减去均值mu的平方的总和，这是每个样本平方的方差除以数据点的数量N，我们可以用以下方程表示：
- en: '![](img/8d3eb6fb-41e3-4d56-ab18-1d5ccd2a2bb4.png)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8d3eb6fb-41e3-4d56-ab18-1d5ccd2a2bb4.png)'
- en: X denotes each data point
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: X表示每个数据点
- en: µ denotes the mean
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: µ表示均值
- en: N denotes the number of data points
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: N表示数据点的数量
- en: 'Sample variance similarly is designated as S², with the following equation:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 样本方差同样被表示为S²，用以下方程表示：
- en: '![](img/76eac09f-5b97-4c46-92a6-620407eaba69.png)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![](img/76eac09f-5b97-4c46-92a6-620407eaba69.png)'
- en: X denotes each data point
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: X表示每个数据点
- en: M denotes the mean
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: M表示均值
- en: N-1 denotes the number of data points minus 1
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: N-1表示数据点的数量减1
- en: That's all there is to it.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。
- en: Analyzing standard deviation and variance on a histogram
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在直方图上分析标准差和方差
- en: 'Let''s write some code here and play with some standard deviation and variances.
    So If you pull up the `StdDevVariance.ipynb` file IPython Notebook, and follow
    along with me here. Please do, because there''s an activity at the end that I
    want you to try. What we''re going to do here is just like the previous example,
    so begin with the following code:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在这里写一些代码，玩一些标准差和方差。所以如果你打开`StdDevVariance.ipynb`文件的IPython笔记本，并跟着我一起做。请这样做，因为最后有一个我想让你尝试的活动。我们要做的就像前面的例子一样，从以下代码开始：
- en: '[PRE15]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We use `matplotlib` to plot a histogram of some normally distributed random
    data, and we call it `incomes`. We're saying it's going to be centered around
    `100` (hopefully that's an hourly rate or something and not annual, or some weird
    denomination), with a standard deviation of `20` and `10,000` data points.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`matplotlib`来绘制一些正态分布的随机数据的直方图，并将其命名为`incomes`。我们说它将以`100`为中心（希望这是小时工资之类的，而不是年薪，或者其他奇怪的单位），标准差为`20`，有`10,000`个数据点。
- en: 'Let''s go ahead and generate that by executing that above code block and plotting
    it as shown in the following graph:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续执行上面的代码块，并按照下图所示绘制出来：
- en: '![](img/ff6cfb24-e6a4-4884-b7b4-0008d321351f.png)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ff6cfb24-e6a4-4884-b7b4-0008d321351f.png)'
- en: We have 10,000 data points centered around 100\. With a normal distribution
    and a standard deviation of 20, a measure of the spread of this data, you can
    see that the most common occurrence is around 100, and as we get further and further
    from that, things become less and less likely. The standard deviation point of
    20 that we specified is around 80 and around 120\. You can see in the histogram
    that this is the point where things start to fall off sharply, so we can say that
    things beyond that standard deviation boundary are unusual.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有10,000个以100为中心的数据点。通过正态分布和标准差为20，这是数据的扩展度量，你可以看到最常见的情况是在100左右，随着我们离这个点越来越远，事情变得越来越不太可能。我们指定的标准差点20在80左右和120左右。你可以在直方图中看到，这是事情开始急剧下降的点，所以我们可以说在那个标准差边界之外的事情是不寻常的。
- en: Using Python to compute standard deviation and variance
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Python计算标准差和方差
- en: 'Now, NumPy also makes it incredibly easy to compute the standard deviation
    and variance. If you want to compute the actual standard deviation of this dataset
    that we generated, you just call the `std` function right on the dataset itself.
    So, when NumPy creates the list, it''s not just a normal Python list, it actually
    has some extra stuff tacked onto it so you can call functions on it, like `std`
    for standard deviation. Let''s do that now:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，NumPy也使计算标准差和方差变得非常容易。如果你想计算我们生成的数据集的实际标准差，你只需在数据集本身上调用“std”函数。因此，当NumPy创建列表时，它不仅仅是一个普通的Python列表，它实际上附加了一些额外的东西，所以你可以在上面调用函数，比如标准差的“std”。现在让我们来做一下：
- en: '[PRE16]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This gives us something like the following output (remember that we used random
    data, so your figures won''t be exactly the same as mine):'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 这给我们一些类似以下输出（记住我们使用了随机数据，所以你的图形可能与我的不完全相同）：
- en: '[PRE17]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: When we execute that, we get a number pretty close to 20, because that's what
    we specified when we created our random data. We wanted a standard deviation of
    20\. Sure enough, 20.02, pretty close.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们执行时，得到的数字非常接近20，因为这是我们在创建随机数据时指定的。我们想要一个标准差为20。果然，20.02，非常接近。
- en: The variance is just a matter of calling `var`.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 方差只是一个调用“var”的问题。
- en: '[PRE18]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This gives me the following:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 这给了我以下结果：
- en: '[PRE19]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: It comes out to pretty close to 400, which is 20². Right, so the world makes
    sense! Standard deviation is just the square root of the variance, or you could
    say that the variance is the standard deviation squared. Sure enough, that works
    out, so the world works the way it should.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 结果非常接近400，这是20²。对，世界是有道理的！标准差只是方差的平方根，或者你可以说方差是标准差的平方。果然，这是成立的，所以世界是按照应有的方式运行的。
- en: Try it yourself
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自己试试
- en: I want you to dive in here and actually play around with it, make it real, so
    try out different parameters on generating that normal data. Remember, this is
    a measure of the shape of the distribution of the data, so what happens if I change
    that center point? Does it matter? Does it actually affect the shape? Why don't
    you try it out and find out?
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望你能深入研究并实际尝试一下，让它变得真实，尝试使用不同的参数来生成正态数据。记住，这是对数据分布形状的度量，所以如果我改变中心点会发生什么？这重要吗？它实际上会影响形状吗？为什么不试一下，找出答案呢？
- en: Try messing with the actual standard deviation, that we've specified, to see
    what impact that has on the shape of the graph. Maybe try a standard deviation
    of 30, and you know, you can see how that actually affects things. Let's make
    it even more dramatic, like 50\. Just play around with 50\. You'll see the graph
    starting to get a little bit fatter. Play around with different values, just get
    a feel of how these values work. This is the only way to really get an intuitive
    sense of standard deviation and variance. Mess around with some different examples
    and see the effect that it has.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试改变我们指定的实际标准差，看看对图形形状有什么影响。也许尝试一个标准差为30，然后你知道，你可以看看它实际上如何影响事物。让我们更夸张一点，比如50。试试50。你会看到图形开始变得有点胖。尝试不同的值，感受一下这些值是如何起作用的。这是真正获得标准差和方差直观感觉的唯一方法。尝试一些不同的例子，看看它的影响。
- en: So that's standard deviation and variance in practice. You got hands on with
    some of it there, and I hope you played around a little bit to get some familiarity
    with it. These are very important concepts and we'll talk about standard deviations
    a lot throughout the book and no doubt throughout your career in data science,
    so make sure you've got that under your belt. Let's move on.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是实践中的标准差和方差。你已经亲自体验了一些，我希望你能稍微玩弄一下，以便更熟悉。这些是非常重要的概念，我们将在整本书中经常谈论标准差，毫无疑问，在你的数据科学职业生涯中也会经常谈论，所以确保你已经掌握了这些。让我们继续。
- en: Probability density function and probability mass function
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概率密度函数和概率质量函数
- en: So we've already seen some examples of a normal distribution function for some
    of the examples in this book. That's an example of a probability density function,
    and there are other types of probability density functions out there. So let's
    dive in and see what it really means and what some other examples of them are.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们已经在本书的一些例子中看到了正态分布函数。这是概率密度函数的一个例子，还有其他类型的概率密度函数。所以让我们深入了解一下，看看它实际上意味着什么，还有一些其他例子。
- en: The probability density function and probability mass functions
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概率密度函数和概率质量函数
- en: We've already seen some examples of a normal distribution function for some
    of the code we've looked at in this book. That's an example of a probability density
    function, and there are other types of probability density functions out there.
    Let's dive in and see what that really means and what some other examples of them
    there are.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在本书中看到了一些正态分布函数的例子。这是概率密度函数的一个例子，还有其他类型的概率密度函数。让我们深入了解一下，看看这实际上意味着什么，还有一些其他例子。
- en: Probability density functions
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概率密度函数
- en: Let's talk about probability density functions, and we've used one of these
    already in the book. We just didn't call it that. Let's formalize some of the
    stuff that we've talked about. For example, we've seen the normal distribution
    a few times, and that is an example of a probability density function. The following
    figure is an example of a normal distribution curve
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们谈谈概率密度函数，我们在书中已经使用过其中之一。我们只是没有这样称呼它。让我们正式化一些我们谈论过的东西。例如，我们已经多次看到正态分布，这是概率密度函数的一个例子。以下图是正态分布曲线的一个例子
- en: '![](img/dae2b0a5-75ab-4fe9-bc80-358cdbc8a670.png)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dae2b0a5-75ab-4fe9-bc80-358cdbc8a670.png)'
- en: It's conceptually easy to try to think of this graph as the probability of a
    given value occurring, but that's a little bit misleading when you're talking
    about continuous data. Because there's an infinite number of actual possible data
    points in a continuous data distribution. There could be 0 or 0.001 or 0.00001
    so the actual probability of a very specific value happening is very, very small,
    infinitely small. The probability density function really tells the probability
    of a given range of values occurring. So that's the way you've got to think about
    it.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 在概念上，试图将这个图形看作给定值发生的概率是很容易的，但是当你谈论连续数据时，这有点误导。因为在连续数据分布中，实际可能的数据点有无限多个。可能是0或0.001或0.00001，所以一个非常具体的值发生的实际概率是非常非常小的，无限小。概率密度函数实际上告诉了给定值范围发生的概率。所以这就是你必须考虑的方式。
- en: So, for example, in the normal distribution shown in the above graph, between
    the mean (**0**) and one standard deviation from the mean (**1σ**) there's a **34.1%**
    chance of a value falling in that range. You can tighten this up or spread it
    out as much as you want, figure out the actual values, but that's the way to think
    about a probability density function. For a given range of values it gives you
    a way of finding out the probability of that range occurring.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在上图中显示的正态分布中，均值（**0**）和均值的一个标准差（**1σ**）之间，有34.1%的机会出现在这个范围内。你可以收紧或扩展这个范围，找出实际值，但这就是概率密度函数的思考方式。对于给定值范围，它给出了发生该范围的概率的方法。
- en: You can see in the graph, as you get close to the mean (**0**), within one standard
    deviation (**-1σ** and **1σ**), you're pretty likely to land there. I mean, if
    you add up 34.1 and 34.1, which equals to 68.2%, you get the probability of landing
    within one standard deviation of the mean.
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以看到在图中，当你接近均值（**0**）时，在一个标准差（**-1σ**和**1σ**）内，你很可能会落在这个范围内。我的意思是，如果你把34.1和34.1相加，等于68.2%，你就得到了落在均值一个标准差范围内的概率。
- en: However, as you get between two and three standard deviations (**-3σ** to **-2σ**
    and **2σ** to **3σ**), we're down to just a little bit over 4% (4.2%, to be precise).
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然而，当你处于两个到三个标准差之间（**-3σ**到**-2σ**和**2σ**到**3σ**），我们只剩下略微超过4%（确切地说是4.2%）。
- en: As you get out beyond three standard deviations (**-3σ** and **3σ**) then we're
    much less than 1%.
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你超出三个标准差（**-3σ**和**3σ**）时，概率远远小于1%。
- en: So, the graph is just a way to visualize and talk about the probabilities of
    the given data point happening. Again, a probability distribution function gives
    you the probability of a data point falling within some given range of a given
    value, and a normal function is just one example of a probability density function.
    We'll look at some more in a moment.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，图表只是一种可视化和讨论给定数据点发生概率的方式。再次强调，概率分布函数给出了数据点落在给定值范围内的概率，正态函数只是概率密度函数的一个例子。我们稍后会看一些更多的例子。
- en: Probability mass functions
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概率质量函数
- en: 'Now when you''re dealing with discrete data, that little nuance about having
    infinite numbers of possible values goes away, and we call that something different.
    So that is a probability mass function. If you''re dealing with discrete data,
    you can talk about probability mass functions. Here''s a graph to help visualize
    this:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当你处理离散数据时，关于有无限多个可能值的微妙之处就消失了，我们称之为另一种东西。这就是概率质量函数。如果你处理离散数据，你可以谈论概率质量函数。这里有一个图表来帮助可视化这一点：
- en: '![](img/18a1b7a7-3456-4c58-8d7d-30cd73c7c1d0.png)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![](img/18a1b7a7-3456-4c58-8d7d-30cd73c7c1d0.png)'
- en: For example, you can plot a normal probability density function of continuous
    data on the black curve shown in the graph, but if we were to quantize that into
    a discrete dataset like we would do with a histogram, we can say the number 3
    occurs some set number of times, and you can actually say the number 3 has a little
    over 30% chance of occurring. So a probability mass function is the way that we
    visualize the probability of discrete data occurring, and it looks a lot like
    a histogram because it basically is a histogram.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可以在图中显示连续数据的正态概率密度函数，但如果我们将其量化为离散数据集，就像我们在直方图中所做的那样，我们可以说数字3出现了一定次数，你实际上可以说数字3有超过30%的机会出现。因此，概率质量函数是我们可视化离散数据发生概率的方式，它看起来很像直方图，因为它基本上就是一个直方图。
- en: 'Terminology difference: A probability density function is a solid curve that
    describes the probability of a range of values happening with continuous data.
    A probability mass function is the probabilities of given discrete values occurring
    in a dataset.'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 术语差异：概率密度函数是描述连续数据发生范围的实心曲线。概率质量函数是数据集中给定离散值发生的概率。
- en: Types of data distributions
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据分布类型
- en: Let's look at some real examples of probability distribution functions and data
    distributions in general and wrap your head a little bit more around data distributions
    and how to visualize them and use them in Python.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一些概率分布函数和数据分布的真实例子，更全面地理解数据分布以及如何在Python中可视化和使用它们。
- en: Go ahead and open up the `Distributions.ipynb` from the book materials, and
    you can follow along with me here if you'd like.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 继续打开书中的`Distributions.ipynb`，如果你愿意，你可以跟着我一起学习。
- en: Uniform distribution
  id: totrans-241
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 均匀分布
- en: 'Let''s start off with a really simple example: uniform distribution. A uniform
    distribution just means there''s a flat constant probability of a value occurring
    within a given range.'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一个非常简单的例子开始：均匀分布。均匀分布意味着在给定范围内，一个值发生的概率是平坦的常数。
- en: '[PRE20]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: So we can create a uniform distribution by using the NumPy `random.uniform`
    function. The preceding code says, I want a uniformly distributed random set of
    values that ranges between `-10` and `10`, and I want `100000` of them. If I then
    create a histogram of those values, you can see it looks like the following.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们可以使用NumPy的`random.uniform`函数创建一个均匀分布。前面的代码表示，我想要一个在`-10`和`10`之间范围的均匀分布的随机值，并且我想要`100000`个。如果我然后创建这些值的直方图，你会看到它看起来像下面这样。
- en: '![](img/b90c1711-c37a-4144-9ece-b930a56e0e71.png)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b90c1711-c37a-4144-9ece-b930a56e0e71.png)'
- en: There's pretty much an equal chance of any given value or range of values occurring
    within that data. So, unlike the normal distribution, where we saw a concentration
    of values near the mean, a uniform distribution has equal probability across any
    given value within the range that you define.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些数据中，任何给定值或值范围发生的概率几乎是相等的。因此，与正态分布不同，我们在均匀分布中看到的是在你定义的范围内任何给定值都有相等的概率。
- en: So what would the probability distribution function of this look like? Well,
    I'd expect to see basically nothing outside of the range of **-10** or beyond
    **10**. But when I'm between **-10** and **10**, I would see a flat line because
    there's a constant probability of any one of those ranges of values occurring.
    So in a uniform distribution you would see a flat line on the probability distribution
    function because there is basically a constant probability. Every value, every
    range of values has an equal chance of appearing as any other value.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 那么这个的概率分布函数会是什么样子呢？嗯，我期望在**-10**或**10**之外基本上看不到任何东西。但当我在**-10**和**10**之间时，我会看到一条平直的线，因为任何一个这些值范围发生的概率是恒定的。因此在均匀分布中，你会看到概率分布函数上的一条平直线，因为每个值，每个值范围出现的概率都是相等的。
- en: Normal or Gaussian distribution
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 正态或高斯分布
- en: Now we've seen normal, also known as Gaussian, distribution functions already
    in this book. You can actually visualize those in Python. There is a function
    called `pdf` (probability density function) in the `scipy.stats.norm` package
    function.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在本书中看到了正态分布，也称为高斯分布函数。你实际上可以在Python中可视化这些。`scipy.stats.norm`包函数中有一个名为`pdf`（概率密度函数）的函数。
- en: 'So, let''s look at the following example:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，让我们看下面的例子：
- en: '[PRE21]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In the preceding example, we''re creating a list of x values for plotting that
    range between -3 and 3 with an increment of 0.001 in between them by using the
    `arange` function. So those are the x values on the graph and we''re going to
    plot the *x*-axis with using those values. The *y*-axis is going to be the normal
    function, `norm.pdf`, that the probability density function for a normal distribution,
    on those x values. We end up with the following output:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们通过使用`arange`函数创建了一个在-3和3之间以0.001为间隔的x值列表用于绘图。所以这些是图表上的x值，我们将使用这些值绘制*x*轴。*y*轴将是正态函数`norm.pdf`，即正态分布的概率密度函数，对这些x值。我们得到了下面的输出：
- en: '![](img/a7cd81e2-a685-4e43-bc34-1d79beccfcea.png)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a7cd81e2-a685-4e43-bc34-1d79beccfcea.png)'
- en: The pdf function with a normal distribution looks just like it did in our previous
    section, that is, a normal distribution for the given numbers that we provided,
    where 0 represents the mean, and the numbers **-3**, **-2**, **-1**, **1**, **2**,
    and **3** are standard deviations.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 正态分布的概率密度函数看起来就像我们上一节中的样子，也就是说，对于我们提供的给定数字，0代表均值，而数字**-3**、**-2**、**-1**、**1**、**2**和**3**代表标准差。
- en: 'Now, we will generate random numbers with a normal distribution. We''ve done
    this a few times already; consider this a refresher. Refer to the following block
    of code:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用正态分布生成随机数。我们已经做过几次了；把它当作一个复习。参考下面的代码块：
- en: '[PRE22]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'In the above code, we use the `random.normal` function of the NumPy package,
    and the first parameter `mu`, represents the mean that you want to center the
    data around. `sigma` is the standard deviation of that data, which is basically
    the spread of it. Then, we specify the number of data points that we want using
    a normal probability distribution function, which is `10000` here. So that''s
    a way to use a probability distribution function, in this case the normal distribution
    function, to generate a set of random data. We can then plot that, using a histogram
    broken into `50` buckets and show it. The following output is what we end up with:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我们使用了NumPy包的`random.normal`函数，第一个参数`mu`代表你想要将数据围绕其均值中心化的均值。`sigma`是数据的标准差，基本上是数据的扩散。然后，我们使用正态概率分布函数指定我们想要的数据点的数量，这里是`10000`。这是使用概率分布函数的一种方式，在这种情况下是正态分布函数，用来生成一组随机数据。然后我们可以绘制一个直方图，分成`50`个桶并显示出来。下面的输出就是我们得到的结果：
- en: '![](img/00edc207-6532-4388-ae55-fad682c9caf0.png)'
  id: totrans-258
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00edc207-6532-4388-ae55-fad682c9caf0.png)'
- en: It does look more or less like a normal distribution, but since there is a random
    element, it's not going to be a perfect curve. We're talking about probabilities;
    there are some odds of things not quite being what they should be.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 它看起来更像是一个正态分布，但由于有一个随机元素，它不会是一个完美的曲线。我们在谈论概率；有一些事情不太可能是我们期望的样子。
- en: The exponential probability distribution or Power law
  id: totrans-260
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 指数概率分布或幂律
- en: Another distribution function you see pretty often is the exponential probability
    distribution function, where things fall off in an exponential manner.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 你经常看到的另一个分布函数是指数概率分布函数，其中事物以指数方式下降。
- en: When you talk about an exponential fall off, you expect to see a curve, where
    it's very likely for something to happen, near zero, but then, as you get farther
    away from it, it drops off very quickly. There's a lot of things in nature that
    behave in this manner.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 当你谈论指数下降时，你期望看到一个曲线，在接近零时很可能发生某些事情，但随着你离开它越远，它会迅速下降。自然界中有很多事物都是以这种方式行为的。
- en: 'To do that in Python, just like we had a function in `scipy.stats` for `norm.pdf`,
    we also have an `expon.pdf`, or an exponential probability distribution function
    to do that in Python, we can do the same syntax that we did for the normal distribution
    with an exponential distribution here as shown in the following code block:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，就像我们在`scipy.stats`中有一个`norm.pdf`函数一样，我们也有一个`expon.pdf`，或者指数概率分布函数来做这个。在Python中，我们可以使用与正态分布相同的语法来处理指数分布，如下面的代码块所示：
- en: '[PRE23]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'So again, in the above code, we just create our x values using the NumPy `arange`
    function to create a bunch of values between `0` and `10` with a step size of
    `0.001`. Then, we plot those x values against the y-axis, which is defined as
    the function `expon.pdf(x)`. The output looks like an exponential fall off. As
    shown in the following screenshot:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 所以在上面的代码中，我们只是使用NumPy的`arange`函数创建我们的x值，以便在`0`到`10`之间创建一堆值，步长为`0.001`。然后，我们将这些x值绘制在y轴上，y轴定义为函数`expon.pdf(x)`。输出看起来像是指数下降。如下截图所示：
- en: '![](img/b99bbd72-f38d-4d68-9ef0-d5cf60bd8ae1.png)'
  id: totrans-266
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b99bbd72-f38d-4d68-9ef0-d5cf60bd8ae1.png)'
- en: Binomial probability mass function
  id: totrans-267
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 二项概率质量函数
- en: 'We can also visualize probability mass functions. This is called the binomial
    probability mass function. Again, we are going to use the same syntax as before,
    as shown in the following code:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以可视化概率质量函数。这被称为二项概率质量函数。我们将使用与之前相同的语法，如下面的代码所示：
- en: '[PRE24]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'So instead of `expon` or `norm`, we just use `binom`. A reminder: The probability
    mass function deals with discrete data. We have been all along, really, it''s
    just how you think about it.'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们不再使用`expon`或`norm`，而是使用`binom`。提醒一下：概率质量函数处理离散数据。实际上，一直以来我们一直在处理离散数据，只是你要如何思考它。
- en: 'Coming back to our code, we''re creating some discrete `x` values between `0`
    and `10` at a spacing of `0.01`, and we''re saying I want to plot a binomial probability
    mass function using that data. With the `binom.pmf` function, I can actually specify
    the shape of that data using two shape parameters, `n` and `p`. In this case,
    they''re `10` and `0.5` respectively. output is shown on the following graph:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 回到我们的代码，我们正在创建一些在`0`到`10`之间的离散`x`值，间隔为`0.01`，并且我要绘制一个使用这些数据的二项概率质量函数。使用`binom.pmf`函数，我实际上可以使用两个形状参数`n`和`p`来指定数据的形状。在这种情况下，它们分别是`10`和`0.5`。输出如下图所示：
- en: '![](img/e9ba7a94-b664-4088-b2da-bbecf2418455.png)'
  id: totrans-272
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e9ba7a94-b664-4088-b2da-bbecf2418455.png)'
- en: If you want to go and play around with different values to see what effects
    it has, that's a good way to get an intuitive sense of how those shape parameters
    work on the probability mass function.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想尝试不同的值来看看它的影响，这是一个直观了解这些形状参数如何影响概率质量函数的好方法。
- en: Poisson probability mass function
  id: totrans-274
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 泊松概率质量函数
- en: Lastly, the other distribution function you might hear about is a Poisson probability
    mass function, and this has a very specific application. It looks a lot like a
    normal distribution, but it's a little bit different.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你可能听说的另一个分布函数是泊松概率质量函数，它有一个非常特定的应用。它看起来很像正态分布，但有点不同。
- en: The idea here is, if you have some information about the average number of things
    that happen in a given time period, this probability mass function can give you
    a way to predict the odds of getting another value instead, on a given future
    day.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的想法是，如果你有关于在给定时间段内发生的事情的平均数量的一些信息，这个概率质量函数可以让你预测在未来的某一天获得其他值的几率。
- en: 'As an example, let''s say I have a website, and on average I get 500 visitors
    per day. I can use the Poisson probability mass function to estimate the probability
    of seeing some other value on a specific day. For example, with my average of
    500 visitors per day, what''s the odds of seeing 550 visitors on a given day?
    That''s what a Poisson probability mass function can give you take a look at the
    following code:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，假设我有一个网站，平均每天有500位访客。我可以使用泊松概率质量函数来估计在特定一天看到其他数值的概率。例如，以我平均每天500位访客为例，看到在某一天有550位访客的几率是多少？这就是泊松概率质量函数可以给你的，看看下面的代码：
- en: '[PRE25]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'In this code example, I''m saying my average is 500 mu. I''m going to set up
    some x values to look at between `400` and `600` with a spacing of `0.5`. I''m
    going to plot that using the `poisson.pmf` function. I can use that graph to look
    up the odds of getting any specific value that''s not `500`, assuming a normal
    distribution:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个代码示例中，我说我的平均值是500 mu。我将设置一些x值，范围在`400`到`600`之间，间隔为`0.5`。我将使用`poisson.pmf`函数来绘制图表。我可以使用该图表来查找在正态分布情况下获得任何特定值的几率：
- en: '![](img/1e402208-e7bc-46f3-aa27-c4a2ef1c7f1a.png)'
  id: totrans-280
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1e402208-e7bc-46f3-aa27-c4a2ef1c7f1a.png)'
- en: The odds of seeing **550** visitors on a given day, it turns out, comes out
    to about **0.002** or 0.2% probability. Very interesting.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 在特定一天看到550位访客的几率，结果是大约0.002或0.2%的概率。非常有趣。
- en: Alright, so those are some common data distributions you might run into in the
    real world.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，这些是你在现实世界中可能遇到的一些常见数据分布。
- en: Remember we used a probability distribution function with continuous data, but
    when we're dealing with discrete data, we use a probability mass function.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，我们使用概率分布函数处理连续数据，但当我们处理离散数据时，我们使用概率质量函数。
- en: So that's probability density functions, and probability mass functions. Basically,
    a way to visualize and measure the actual chance of a given range of values occurring
    in a dataset. Very important information and a very important thing to understand.
    We're going to keep using that concept over and over again. Alright, let's move
    on.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这就是概率密度函数和概率质量函数。基本上，这是一种可视化和测量数据集中出现的一定范围数值的实际机会的方法。这是非常重要的信息，也是非常重要的理解的事情。我们将一遍又一遍地使用这个概念。好的，让我们继续。
- en: Percentiles and moments
  id: totrans-285
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 百分位数和矩
- en: 'Next, we''ll talk about percentiles and moments. You hear about percentiles
    in the news all the time. People that are in the top 1% of income: that''s an
    example of percentile. We''ll explain that and have some examples. Then, we''ll
    talk about moments, a very fancy mathematical concept, but it turns out it''s
    very simple to understand conceptually. Let''s dive in and talk about percentiles
    and moments, a couple of a pretty basic concepts in statistics, but again, we''re
    working our way up to the hard stuff, so bear with me as we go through some of
    this review.'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将讨论百分位数和矩。你经常在新闻中听到百分位数。收入排在前1%的人：这是百分位数的一个例子。我们将解释这一点，并举一些例子。然后，我们将讨论矩，这是一个非常复杂的数学概念，但事实证明，在概念上非常容易理解。让我们深入讨论百分位数和矩，这是统计学中的一些基本概念，但是，我们正在逐步解决困难的问题，所以请耐心等待我们复习一些内容。
- en: Percentiles
  id: totrans-287
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 百分位数
- en: Let's see what percentiles mean. Basically, if you were to sort all of the data
    in a dataset, a given percentile is the point at which that percent of the data
    is less than the point you're at.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看百分位数的意思。基本上，如果你要对数据集中的所有数据进行排序，给定的百分位数是数据小于你所在位置的百分比。
- en: A common example you see talked about a lot, is income distribution. When we
    talk about the 99th percentile, or the one-percenters, imagine that you were to
    take all the incomes of everybody in the country, in this case the United States,
    and sort them by income. The 99th percentile will be the income amount at which
    99% of the rest of the country was making less than that amount. It's a very easy
    way to comprehend it.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 一个常见的例子是收入分布。当我们谈论第99百分位数，或者百分之一的人，想象一下，你要把这个国家，这里是美国，所有人的收入按收入排序。第99百分位数将是收入的金额，99%的人收入低于这个金额。这是一个非常容易理解的方法。
- en: In a dataset, a percentile is the point at which *x%* of the values are less
    than the value at that point.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据集中，百分位数是数值小于该点的值的*x%*。
- en: 'The following graph is an example for income distribution:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 下图是收入分布的一个例子：
- en: '![](img/9aeb8fcc-4e0d-45fa-b2de-f6f7a831a257.png)'
  id: totrans-292
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9aeb8fcc-4e0d-45fa-b2de-f6f7a831a257.png)'
- en: The preceding image shows an example of income distribution data. For example,
    at the 99th percentile we can say that 99% of the data points, which represent
    people in America, make less than $506,553 a year, and one percent make more than
    that. Conversely, if you're a one-percenter, you're making more than $506,553
    a year. Congratulations! But if you're a more typical median person, the 50th
    percentile defines the point at which half of the people are making less and half
    are making more than you are, which is the definition of median. The 50th percentile
    is the same thing as median, and that would be at $42,327 given this dataset.
    So, if you're making $42,327 a year in the US, you are making exactly the median
    amount of income for the country.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 上图显示了一个收入分布数据的例子。例如，在第99百分位数，我们可以说99%的数据点，代表美国人，年收入低于50,6553美元，而1%的人年收入高于这个数。相反，如果你是百分之一的人，你的年收入超过50,6553美元。恭喜！但如果你是一个更典型的中位数人，第50百分位数定义了一半的人收入低于你，一半的人收入高于你，这就是中位数的定义。第50百分位数和中位数是一回事，在这个数据集中是42,327美元。所以，如果你在美国年收入42,327美元，你的收入正好是全国的中位数。
- en: You can see the problem of income distribution in the graph above. Things tend
    to be very concentrated toward the high end of the graph, which is a very big
    political problem right now in the country. We'll see what happens with that,
    but that's beyond the scope of this book. That's percentiles in a nutshell.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从上面的图表中看到收入分布的问题。事物往往非常集中在图表的高端，这是目前在国家中一个非常大的政治问题。我们将看看发生了什么，但这超出了本书的范围。这就是百分位数的要点。
- en: Quartiles
  id: totrans-295
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 四分位数
- en: Percentiles are also used in the context of talking about the quartiles in a
    distribution. Let's look at a normal distribution to understand this better.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 百分位数也用于讨论分布中的四分位数。让我们看一个正态分布，以更好地理解这一点。
- en: 'Here''s an example illustrating Percentile in normal distribution:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个例子，说明正态分布中的百分位数：
- en: '![](img/638aba41-52be-4e4b-a75a-003a40569792.png)'
  id: totrans-298
  prefs: []
  type: TYPE_IMG
  zh: '![](img/638aba41-52be-4e4b-a75a-003a40569792.png)'
- en: Looking at the normal distribution in the preceding image, we can talk about
    quartiles. Quartile 1 (Q1) and quartile 3 (Q3) in the middle are just the points
    that contain together 50% of the data, so 25% are on left side of the median and
    25% are on the right side of the median.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 看看上图中的正态分布，我们可以谈论四分位数。中间的四分位数1（Q1）和四分位数3（Q3）只是包含50%数据的点，所以25%在中位数的左侧，25%在中位数的右侧。
- en: The median in this example happens to be near the mean. For example, the **interquartile
    range** (**IQR**), when we talk about a distribution, is the area in the middle
    of the distribution that contains 50% of the values.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，中位数恰好接近平均值。例如，**四分位距**（**IQR**），当我们谈论一个分布时，是分布中包含50%数值的中间区域。
- en: The topmost part of the image is an example of what we call a box-and-whisker
    diagram. Don't concern yourself yet about the stuff out on the edges of the box.
    That gets a little bit confusing, and we'll cover that later. Even though they
    are called quartile 1 (Q1) and quartile 3 (Q1), they don't really represent 25%
    of the data, but don't get hung up on that yet. Focus on the point that the quartiles
    in the middle represent 25% of the data distribution.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 图像的最上部是我们所谓的箱线图的一个例子。暂时不要担心箱子边缘的东西。那有点混乱，我们稍后会讨论。即使它们被称为四分位数1（Q1）和四分位数3（Q1），它们并不真正代表25%的数据，但暂时不要纠结在这一点上。重点是中间的四分位数代表数据分布的25%。
- en: Computing percentiles in Python
  id: totrans-302
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Python中计算百分位数
- en: Let's look at some more examples of percentiles using Python and kind of get
    our hands on it and conceptualize this a little bit more. Go ahead and open the
    `Percentiles.ipynb` file if you'd like to follow along, and again I encourage
    you to do so because I want you to play around with this a little bit later.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一些使用Python的百分位数的更多例子，并更深入地理解它。如果你愿意跟着做，可以打开`Percentiles.ipynb`文件，我鼓励你这样做，因为我希望你稍后能够玩一下这个。
- en: 'Let''s start off by generating some randomly distributed normal data, or normally
    distributed random data, rather, refer to the following code block:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先生成一些随机分布的正态数据，或者说是正态分布的随机数据，请参考以下代码块：
- en: '[PRE26]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: In this example, what we're going to do is generate some data centered around
    zero, that is with a mean of zero, with a standard deviation of `0.5`, and I'm
    going to make `10000` data points with that distribution. Then, we're going to
    plot a histogram and see what we come up with.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们要做的是生成一些以零为中心的数据，也就是均值为零，标准差为`0.5`，我将用这个分布生成`10000`个数据点。然后，我们将绘制一个直方图，看看我们得到了什么。
- en: '![](img/33390974-0859-4cc0-8a6d-6d78be980298.png)'
  id: totrans-307
  prefs: []
  type: TYPE_IMG
  zh: '![](img/33390974-0859-4cc0-8a6d-6d78be980298.png)'
- en: The generated histogram looks very much like a normal distribution, but because
    there is a random component we have a little outlier near the deviation of -2
    in this example here. Things are tipped a little bit at the mean, a little bit
    of random variation there to make things interesting.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的直方图看起来非常像正态分布，但由于存在随机因素，我们在这个例子中有一个偏离值接近-2。在均值处有一点点的倾斜，一点点的随机变化使事情变得有趣。
- en: 'NumPy provides a very handy percentile function that will compute the percentile
    values of this distribution for you. So, we created our `vals` list of data using
    `np.random.normal`, and I can just call the `np.percentile` function to figure
    out the 50th percentile value in using the following code:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy提供了一个非常方便的百分位数函数，可以为您计算这个分布的百分位数值。因此，我们使用`np.random.normal`创建了我们的`vals`数据列表，我可以调用`np.percentile`函数来计算第50个百分位数值，使用以下代码：
- en: '[PRE27]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The following is the output of the preceding code:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前面代码的输出：
- en: '[PRE28]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The output turns out to be 0.005\. So remember, the 50th percentile is just
    another name for the median, and it turns out the median is very close to zero
    in this data. You can see in the graph that we're tipped a little bit to the right,
    so that's not too surprising.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果为0.005。所以记住，第50个百分位数其实就是中位数的另一个名称，而在这个数据中，中位数非常接近零。你可以在图表中看到我们稍微向右倾斜，所以这并不太令人惊讶。
- en: 'I want to compute the 90th percentile, which gives me the point at which 90%
    of the data is less than that value. We can easily do that with the following
    code:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 我想计算第90个百分位数，这将给我一个数，这个数小于它的值占总数的90%。我们可以很容易地用以下代码来实现：
- en: '[PRE29]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Here is the output of that code:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是该代码的输出：
- en: '[PRE30]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The 90th percentile of this data turns out to be 0.64, so it's around here,
    and basically, at that point less than 90% of the data is less than that value.
    I can believe that. 10% of the data is greater than 0.64, 90% of it, less than
    0.65.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 这些数据的第90个百分位数值是0.64，所以大约在这里，基本上，在这个值以下的数据不到90%。我可以相信这个结果。10%的数据大于0.64，90%的数据小于0.65。
- en: 'Let''s compute the 20th percentile value, that would give me the point at which
    20% of the values are less than that number that I come up with. Again, we just
    need a very simple alteration to the code:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们计算第20个百分位数值，这将给我一个数，这个数小于它的值占总数的20%。同样，我们只需要对代码进行一个非常简单的修改：
- en: '[PRE31]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'This gives the following output:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 这给出了以下输出：
- en: '[PRE32]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The 20th percentile point works out to be -0.4, roughly, and again I believe
    that. It's saying that 20% of the data lies to the left of -0.4, and conversely,
    80% is greater.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 第20个百分位数值大约是-0.4，我相信这个结果。它表示20%的数据位于-0.4的左侧，相反，80%的数据大于-0.4。
- en: If you want to get a feel as to where those breaking points are in a dataset,
    the percentile function is an easy way to compute them. If this were a dataset
    representing income distribution, we could just call `np.percentile(vals, 99)`
    and figure out what the 99th percentile is. You could figure out who those one-percenters
    people keep talking about really are, and if you're one of them.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解数据集中的分界点在哪里，百分位数函数是一个简单的方法来计算它们。如果这是一个代表收入分布的数据集，我们可以调用`np.percentile(vals,
    99)`来计算第99个百分位数。你可以找出人们一直在谈论的那些百分之一的人到底是谁，以及你是否是其中之一。
- en: Alright, now to get your hands dirty. I want you to play around with this data.
    This is an IPython Notebook for a reason, so you can mess with it and mess with
    the code, try different standard deviation values, see what effect it has on the
    shape of the data and where those percentiles end up lying, for example. Try using
    smaller dataset sizes and add a little bit more random variation in the thing.
    Just get comfortable with it, play around with it, and find you can actually do
    this stuff and write some real code that works.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，现在让我们动手。我希望你能玩弄这些数据。这是一个IPython Notebook，所以你可以随意修改它，尝试不同的标准差值，看看它对数据形状和百分位数的影响，例如。尝试使用更小的数据集大小，并在其中增加一点随机变化。只要熟悉一下，玩弄一下，你会发现你实际上可以做这些事情，并编写一些真正有效的代码。
- en: Moments
  id: totrans-326
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 矩
- en: Next, let's talk about moments. Moments are a fancy mathematical phrase, but
    you don't actually need a math degree to understand it, though. Intuitively, it's
    a lot simpler than it sounds.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们谈谈矩。矩是一个花哨的数学术语，但实际上你并不需要数学学位来理解它。直观地说，它比听起来要简单得多。
- en: It's one of those examples where people in statistics and data science like
    to use big fancy terms to make themselves sound really smart, but the concepts
    are actually very easy to grasp, and that's the theme you're going to hear again
    and again in this book.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 这是统计学和数据科学领域的一个例子，人们喜欢使用大而花哨的术语来使自己听起来很聪明，但实际上这些概念非常容易理解，这也是你将在本书中一再听到的主题。
- en: 'Basically, moments are ways to measure the shape of a data distribution, of
    a probability density function, or of anything, really. Mathematically, we''ve
    got some really fancy notation to define them:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，时刻是衡量数据分布形状的方式，概率密度函数的方式，或者任何东西的方式。从数学上讲，我们有一些非常花哨的符号来定义它们：
- en: '![](img/8f5319b6-97bd-41c2-b66e-aa3d787011af.png)'
  id: totrans-330
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8f5319b6-97bd-41c2-b66e-aa3d787011af.png)'
- en: If you do know calculus, it's actually not that complicated of a concept. We're
    taking the difference between each value from some value raised to the nth power,
    where n is the moment number and integrating across the entire function from negative
    infinity to infinity. But intuitively, it's a lot easier than calculus.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你懂微积分，实际上这并不是一个很复杂的概念。我们正在计算每个值与某个值的差的n次方，其中n是时刻数，并在整个函数从负无穷到正无穷的范围内进行积分。但直观上，它比微积分容易得多。
- en: Moments can be defined as quantitative measures of the shape of a probability
    density function.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 时刻可以被定义为概率密度函数形状的定量度量。
- en: Ready? Here we go!
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好了吗？我们开始吧！
- en: The first moment works out to just be the mean of the data that you're looking
    at. That's it. The first moment is the mean, the average. It's that simple.
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一时刻实际上就是你所看到的数据的平均值。就是这样。第一时刻就是平均值，就是平均数。就是这么简单。
- en: The second moment is the variance. That's it. The second moment of the dataset
    is the same thing as the variance value. It might seem a little bit creepy that
    these things kind of fall out of the math naturally, but think about it. The variance
    is really based on the square of the differences from the mean, so coming up with
    a mathematical way of saying that variance is related to mean isn't really that
    much of a stretch, right. It's just that simple.
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二时刻是方差。就是这样。数据集的第二时刻就是方差值。这些东西似乎自然而然地从数学中产生出来有点吓人，但是想一想。方差实际上是基于与平均值的差的平方，所以找到一个数学方式来说方差与平均值相关并不是那么难以理解，对吧。就是这么简单。
- en: Now when we get to the third and fourth moments, things get a little bit trickier,
    but they're still concepts that are easy to grasp. The third moment is called
    skew, and it is basically a measure of how lopsided a distribution is.![](img/94f6ca96-30ca-4930-b926-a7a488f8e6b3.png)
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在当我们到达第三和第四时刻时，事情变得有点棘手，但它们仍然是容易理解的概念。第三时刻被称为偏度，它基本上是一个度量分布有多倾斜的度量。![](img/94f6ca96-30ca-4930-b926-a7a488f8e6b3.png)
- en: You can see in these two examples above that, if I have a longer tail on the
    left, now then that is a negative skew, and if I have a longer tail on the right
    then, that's a positive skew. The dotted lines show what the shape of a normal
    distribution would look like without skew. The dotted line out on the left side
    then I end up with a negative skew, or on the other side, a positive skew in that
    example. OK, so that's all skew is. It's basically stretching out the tail on
    one side or the other, and it is a measure of how lopsided, or how skewed a distribution
    is.
  id: totrans-337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在上面的这两个例子中看到，如果我左边有一个更长的尾部，那么这是一个负偏态，如果我右边有一个更长的尾部，那么这是一个正偏态。虚线显示了没有偏态的正态分布的形状。在左边的虚线上，我最终得到了一个负偏态，或者在另一边，这个例子中的正偏态。好的，这就是偏态。基本上就是拉长一侧的尾部，它是一个度量数据分布有多倾斜的度量。
- en: 'The fourth moment is called kurtosis. Wow, that''s a fancy word! All that really
    is, is how thick is the tail and how sharp is the peak. So again, it''s a measure
    of the shape of the data distribution. Here''s an example:'
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第四时刻被称为峰度。哇，这是一个花哨的词！实际上，它就是尾部有多厚，峰有多尖。所以，它是数据分布形状的一种度量。这里有一个例子：
- en: '![](img/912d4b01-0a9f-4c55-9f5e-ae25596d2a18.png)'
  id: totrans-339
  prefs: []
  type: TYPE_IMG
  zh: '![](img/912d4b01-0a9f-4c55-9f5e-ae25596d2a18.png)'
- en: You can see that the higher peak values have a higher kurtosis value. The topmost
    curve has a higher kurtosis than the bottommost curve. It's a very subtle difference,
    but a difference nonetheless. It basically measures how peaked your data is.
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以看到更高的峰值具有更高的峰度值。最顶部的曲线比最底部的曲线具有更高的峰度。这是一个非常微妙的差异，但仍然是一个差异。它基本上衡量了你的数据有多尖。
- en: 'Let''s review all that: the first moment is mean, the second moment is variance,
    the third moment is skew, and the fourth moment is kurtosis. We already know what
    mean and variance are. Skew is how lopsided the data is, how stretched out one
    of the tails might be. Kurtosis is how peaked, how squished together the data
    distribution is.'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下：第一时刻是平均值，第二时刻是方差，第三时刻是偏度，第四时刻是峰度。我们已经知道平均值和方差是什么。偏度是数据有多倾斜，一个尾部有多伸展。峰度是数据分布有多尖，有多挤在一起。
- en: Computing moments in Python
  id: totrans-342
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Python中计算时刻
- en: Let's play around in Python and actually compute these moments and see how you
    do that. To play around with this, go ahead and open up the `Moments.ipynb`, and
    you can follow along with me here.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在Python中玩耍并实际计算这些时刻，看看你如何做到这一点。要玩弄这个，请打开`Moments.ipynb`，你可以跟着我在这里一起进行。
- en: 'Let''s again create that same normal distribution of random data. Again, we''re
    going to make it centered around zero, with a 0.5 standard deviation and 10,000
    data points, and plot that out:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次创建相同的随机数据的正态分布。再次，我们将使其以零为中心，标准差为0.5，有10,000个数据点，并绘制出来：
- en: '[PRE33]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: So again, we get a randomly generated set of data with a normal distribution
    around zero.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们再次得到一个围绕零的正态分布的随机生成的数据集。
- en: '![](img/ca45799c-e3d1-4fc7-b144-646ab4c6cde0.png)'
  id: totrans-347
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ca45799c-e3d1-4fc7-b144-646ab4c6cde0.png)'
- en: 'Now, we find the mean and variance. We''ve done this before; NumPy just gives
    you a `mean` and `var` function to compute that. So, we just call `np.mean` to
    find the first moment, which is just a fancy word for the mean, as shown in the
    following code:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们找到了平均值和方差。我们以前做过这个；NumPy只是给你一个`mean`和`var`函数来计算。所以，我们只需调用`np.mean`来找到第一时刻，这只是一个对平均值的花哨的说法，如下面的代码所示：
- en: '[PRE34]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'This gives the following output in our example:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们示例中的输出：
- en: '[PRE35]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The output turns out to be very close to zero, just like we would expect for
    normally distributed data centered around zero. So, the world makes sense so far.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 结果非常接近零，就像我们期望的那样，对于以零为中心的正态分布的数据。到目前为止，世界是有道理的。
- en: 'Now we find the second moment, which is just another name for variance. We
    can do that with the following code, as we''ve seen before:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们找到了第二个矩，这只是方差的另一个名称。我们可以用以下代码来做到这一点，就像我们之前看到的那样：
- en: '[PRE36]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Providing the following output:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 提供以下输出：
- en: '[PRE37]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: That output turns out to be about 0.25, and again, that works out with a nice
    sanity check. Remember that standard deviation is the square root of variance.
    If you take the square root of 0.25, it comes out to 0.5, which is the standard
    deviation we specified while creating this data, so again, that checks out too.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 结果约为0.25，这再次符合一个很好的检查。记住标准差是方差的平方根。如果你对0.25取平方根，结果是0.5，这是我们在创建这个数据时指定的标准差，所以这也是正确的。
- en: 'The third moment is skew, and to do that we''re going to need to use the SciPy
    package instead of NumPy. But that again is built into any scientific computing
    package like Enthought Canopy or Anaconda. Once we have SciPy, the function call
    is as simple as our earlier two:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个矩是偏度，为了做到这一点，我们需要使用SciPy包而不是NumPy。但这又是内置在任何科学计算包中的，比如Enthought Canopy或Anaconda。一旦我们有了SciPy，函数调用就像我们之前的两个一样简单：
- en: '[PRE38]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'This displays the following output:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 这显示了以下输出：
- en: '[PRE39]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: We can just call `sp.skew` on the `vals` list, and that will give us the skew
    value. Since this is centered around zero, it should be almost a zero skew. It
    turns out that with random variation it does skew a little bit left, and actually
    that does jive with the shape that we're seeing in the graph. It looks like we
    did kind of pull it a little bit negative.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在`vals`列表上调用`sp.skew`，这将给我们一个偏度值。由于这是以零为中心的，它应该几乎没有偏度。结果是，随机变化确实有一点向左偏，实际上这与我们在图表中看到的形状是一致的。看起来我们确实把它拉向了负数。
- en: The fourth moment is kurtosis, which describes the shape of the tail. Again,
    for a normal distribution that should be about `zero.SciPy` provides us with another
    simple function call
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 第四个矩是峰度，描述了尾部的形状。同样，对于正态分布，这个值应该约为零。SciPy为我们提供了另一个简单的函数调用
- en: '[PRE40]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'And here''s the output:'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '[PRE41]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Indeed, it does turn out to be zero. Kurtosis reveals our data distribution
    in two linked ways: the shape of the tail, or the how sharp the peak If I just
    squish the tail down it kind of pushes up that peak to be pointier, and likewise,
    if I were to push down that distribution, you can imagine that''s kind of spreading
    things out a little bit, making the tails a little bit fatter, and the peak of
    it a little bit lower. So that''s what kurtosis means, and in this example, kurtosis
    is near zero because it is just a plain old normal distribution.'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，结果确实是零。峰度以两种相关的方式显示我们的数据分布：尾部的形状，或者峰值有多尖。如果我把尾部压扁，峰值就会变得更尖，同样，如果我把分布压下去，你可以想象这样会把事情扩散开一点，使尾部变得更厚，峰值变得更低。这就是峰度的意思，在这个例子中，峰度接近零，因为它只是一个普通的正态分布。
- en: If you want to play around with it, go ahead and, again, try to modify the distribution.
    Make it centered around something besides 0, and see if that actually changes
    anything. Should it? Well, it really shouldn't because these are all measures
    of the shape of the distribution, and it doesn't really say a whole lot about
    where that distribution is exactly. It's a measure of the shape. That's what the
    moments are all about. Go ahead and play around with that, try different center
    values, try different standard deviation values, and see what effect it has on
    these values, and it doesn't change at all. Of course, you'd expect things like
    the mean to change because you're changing the mean value, but variance, skew,
    maybe not. Play around, find out.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想玩一下，继续，再试着修改分布。使它以0以外的某个值为中心，看看是否真的会改变什么。应该吗？嗯，实际上不应该，因为这些都是关于分布形状的度量，它并不真的说出这个分布究竟在哪里。这是对形状的度量。这就是矩的全部意义。继续玩，尝试不同的中心值，尝试不同的标准差值，看看它对这些值有什么影响，它并没有改变。当然，你会期望像均值这样的东西会改变，因为你改变了均值，但方差、偏度，也许不会。玩一下，找出来。
- en: There you have percentiles and moments. Percentiles are a pretty simple concept.
    Moments sound hard, but it's actually pretty easy to understand how to do it,
    and it's easy in Python too. Now you have that under your belt. It's time to move
    on.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有百分位数和矩。百分位数是一个相当简单的概念。矩听起来很难，但实际上很容易理解如何做，而且在Python中也很容易。现在你已经掌握了这个。是时候继续前进了。
- en: Summary
  id: totrans-370
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we saw the types of data (numeric, categorical, and ordinal
    data) that you might encounter and how to categorize them and how you treat them
    differently depending on what kind of data you're dealing with. We also walked
    through the statistical concepts of mean, median and mode, and we also saw the
    importance of choosing between median and mean, and that often the median is a
    better choice than the mean because of outliers.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了你可能会遇到的数据类型（数值、分类和有序数据），以及如何对它们进行分类，以及根据你处理的数据类型的不同对待它们。我们还介绍了统计概念的均值、中位数和众数，我们也看到了在中位数和均值之间进行选择的重要性，通常中位数比均值更好，因为存在离群值。
- en: Next, we analyzed how to compute mean, median, and mode using Python in an IPython
    Notebook file. We learned the concepts of standard deviation and variance in depth
    and how to compute them in Python. We saw that they’re a measure of the spread
    of a data distribution. We also saw a way to visualize and measure the actual
    chance of a given range of values occurring in a dataset using probability density
    functions and probability mass functions.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们分析了如何在IPython Notebook文件中使用Python计算均值、中位数和众数。我们深入了解了标准差和方差的概念以及如何在Python中计算它们。我们看到它们是数据分布的扩展度量。我们还看到了一种可视化和测量数据集中给定范围的值发生的实际机会的方法，使用概率密度函数和概率质量函数。
- en: We looked at the types of data distributions (Uniform distribution, Normal or
    Gaussian distribution, Exponential probability distribution, Binomial probability
    mass function, Poisson probability mass function) in general and how to visualize
    them using Python. We analyzed the concepts of percentiles and moments and saw
    how to compute them using Python.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 我们总体上看了数据分布的类型（均匀分布、正态或高斯分布、指数概率分布、二项概率质量函数、泊松概率质量函数）以及如何使用Python对其进行可视化。我们分析了百分位数和矩的概念，并看到如何使用Python计算它们。
- en: In the next chapter, we'll look at using the `matplotlib` library more extensively,
    and also dive into the more advanced topics of covariance and correlation.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将更深入地研究使用`matplotlib`库，并深入探讨协方差和相关性等更高级的主题。
