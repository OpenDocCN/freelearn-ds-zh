- en: Statistical Modeling
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 统计建模
- en: In this chapter we are taking raw data and attempting to interpret the information
    by building a statistical model. Once we have a model built then it is usually
    easier to see commonalities. We can determine trends as well.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用原始数据并通过构建统计模型来尝试解读信息。一旦我们构建了模型，通常会更容易看到共同点，我们也可以确定趋势。
- en: Converting JSON to CSV
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 JSON 转换为 CSV
- en: For this chapter, we will be using the Yelp data available from the challenge
    at [https://www.yelp.com/dataset/challenge](https://www.yelp.com/dataset/challenge).
    This section uses the dataset from *round 9* of the challenge. For background,
    Yelp is a site for rating different products and services where Yelp publishes
    the ratings to users.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，我们将使用来自 [https://www.yelp.com/dataset/challenge](https://www.yelp.com/dataset/challenge)
    的 Yelp 数据集。此部分使用的是挑战的 *第 9 轮* 数据集。背景是，Yelp 是一个用于评估不同产品和服务的站点，Yelp 会将评估结果发布给用户。
- en: The dataset file is a very large (a few gigabytes) amount of ratings. There
    are several sets of rating information in the download-for business ratings, reviews,
    tips (as in this would be a nice place to visit), and a user set. We are interested
    in the review data.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 数据集文件是一个非常大的（几 GB）评级数据。下载的内容包括多个评级信息集——包括商业评级、评论、建议（比如这会是一个不错的地方）和用户集。我们对评论数据感兴趣。
- en: When dealing with such large files it may be useful to find and use a large
    file editor so you can poke into the data file. On Windows, most of the standard
    editors are limited to a few megabytes. I used the Large Text File Viewer program
    to open these JSON files.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理如此大的文件时，可能需要找到并使用一个大型文件编辑器，以便能够深入查看数据文件。在 Windows 上，大多数标准编辑器限制为几个兆字节。我使用了
    Large Text File Viewer 程序来打开这些 JSON 文件。
- en: 'All of the files are in JSON format. JSON is a human readable format with structured
    elements—for example, a city object containing street objects. While it is convenient
    to read JSON the format is clumsy when dealing with large numbers of elements.
    In the `reviews` file there are a few million rows. So, we first convert the JSON
    to a flat CSV format to allow for easier processing using this script:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 所有文件都是 JSON 格式的。JSON 是一种人类可读的格式，包含结构化元素——例如，一个城市对象包含街道对象。虽然 JSON 格式易于阅读，但在处理大量元素时，这种格式显得笨拙。在
    `reviews` 文件中有几百万行。因此，我们首先使用此脚本将 JSON 转换为平坦的 CSV 格式，以便更容易进行处理：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: I am printing out the start and end times to get an idea of how long this takes.
    For my machine it took 1.5 minutes to convert the file. I had tried several versions
    of this code before I got the preceding code working at a satisfactory pace. While
    developing this script I took a small subset of the original data file (2000 rows)
    and worked with that file until things progressed sufficiently.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我正在打印出开始和结束时间，以便了解此过程的耗时。对于我的机器，转换文件花费了 1.5 分钟。我在使前述代码以令人满意的速度工作之前，尝试了几个版本的代码。在开发这个脚本时，我取了原始数据文件的一个小子集（2000
    行），并一直在这个文件上工作，直到进展足够为止。
- en: As you can see, I am reading the raw JSON file as provided from Yelp and writing
    out a corresponding CSV file.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我正在读取来自 Yelp 的原始 JSON 文件，并写出一个相应的 CSV 文件。
- en: The script reads each line of the JSON (one line contains an entire object)
    and writes out the corresponding CSV. I stripped out the review text as I was
    not evaluating the text of reviews and the review text took a lot of space. The
    review file size dropped from 3 gigabytes to 300 megabytes using this coding.
    Other than that we made sure to write the headers out to the CSV as the first
    record. I then used a separate script/notebook entry to read in the CSV and process
    it.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 该脚本读取每一行 JSON（每一行包含一个完整的对象），并输出相应的 CSV。我去除了评论文本，因为我并未对评论文本进行评估，而且评论文本占用了大量空间。使用此编码后，评论文件的大小从
    3GB 降低到了 300MB。除此之外，我们确保将头信息作为第一条记录写入 CSV。我然后使用一个单独的脚本/笔记本条目读取 CSV 并进行处理。
- en: Evaluating Yelp reviews
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估 Yelp 评论
- en: 'We read in the processed Yelp reviews using this script and print out some
    statistics of the data:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用这个脚本读取处理后的 Yelp 评论，并打印出一些数据统计信息：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'I usually take a look at some of the data once loaded to visually check that
    things are working as expected. We can do this with a `head()` function call:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我通常在加载数据后查看一些数据，以便直观检查是否一切按预期工作。我们可以通过调用 `head()` 函数来实现：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](img/09cb5819-0baa-4030-a0a9-0dd5f1c0b7b7.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/09cb5819-0baa-4030-a0a9-0dd5f1c0b7b7.png)'
- en: Summary data
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据总结
- en: 'All of the columns appear to be correctly loading. Now, we can look at summary
    statistics for the data:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 所有列似乎都正确加载了。现在，我们可以查看数据的总结统计信息：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](img/6c4b4dcb-c158-443d-9ecf-284c2a8e23b8.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6c4b4dcb-c158-443d-9ecf-284c2a8e23b8.png)'
- en: 'There are several points in the summary worth noting:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 总结中有几点值得注意：
- en: Some of the data points I had assumed would be just `TRUE`/`FALSE`, `0`/`1`
    have ranges instead; for example, `funny` has a max value over 600; `useful` has
    a max 1100, `cool` has 500.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我原本以为一些数据点会是`TRUE`/`FALSE`，`0`/`1`，但实际上它们是区间值；例如，`funny`的最大值超过600；`useful`的最大值为1100，`cool`的最大值为500。
- en: All of the IDs (users, businesses) have been mangled. We could use the user
    file and the business file to come up with exact references.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有的ID（用户、公司）都被篡改了。我们可以使用用户文件和公司文件来找到确切的引用。
- en: Star ratings are `1`-`5`, as expected. However, the mean and median are about
    a `4`, which I take as many people only take the time to write good reviews.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 星级评分是`1`到`5`，这符合预期。然而，平均值和中位数大约为`4`，我认为这表明很多人只愿意花时间写好评。
- en: Review spread
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评论分布
- en: 'We can get an idea of the spread of the reviews using a simple histogram using:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过简单的直方图来了解评论的分布，使用如下代码：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Which generates the histogram inline as:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成一个内联直方图，如下所示：
- en: '![](img/8debff02-3663-4852-bc33-364dfdb5d145.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8debff02-3663-4852-bc33-364dfdb5d145.png)'
- en: Again, we see the predilection for only making positive reviews (but the number
    of bad reviews is pretty large).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们看到人们倾向于只写好评（但差评的数量还是相当大的）。
- en: Finding the top rated firms
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 寻找评分最高的公司
- en: We can find the businesses with the most top ratings (5's) using the following
    script. This script uses SQL-like access to data frames. SQL has built-in mechanisms
    for searching and selecting and ordering of the data components as needed.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下脚本，找到评分最多的公司（5星）。这个脚本使用类似SQL的数据框访问方式，SQL有内置的机制来按需搜索、选择和排序数据组件。
- en: 'In this script we are building a computed data frame with two columns: `business_id`
    and review `count`. The data frame is ordered with the top rated firms appearing
    first. Once created, we display the head of the data frame to get at the top rated
    businesses in the dataset:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个脚本中，我们正在构建一个计算数据框，包含两列：`business_id`和评论`count`。该数据框按评分从高到低排列。创建完成后，我们展示数据框的头部，以便查看数据集中的评分最高的公司：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![](img/013b833a-9e6e-48e5-9c9f-e7476e9ed6a5.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/013b833a-9e6e-48e5-9c9f-e7476e9ed6a5.png)'
- en: It is remarkable that the top five businesses had such a skewed amount of ratings
    (number `1` had close to double the number `6` business). You wonder if there
    is some collusion in the ratings process for such a divergence. Again, the names
    are mangled so far.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，排名前五的公司在评分数量上存在如此明显的偏差（排名第`1`的公司几乎是排名第`6`公司评分数量的两倍）。你会怀疑，是否在评分过程中存在某种串通现象，导致这种差异。再次提醒，名字到目前为止都被篡改了。
- en: Finding the most rated firms
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 寻找评价最高的公司
- en: 'So, those companies had the most, best ratings. Which had the most ratings?
    We can use a similar script to determine the most rated firms:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，这些公司得到了最多的好评。那哪些公司得到了最多的评论呢？我们可以使用类似的脚本来确定最被评价的公司：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In this script we do not qualify the rating in order to determine its membership
    resulting in the set:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在此脚本中，我们不对评分进行限定，以确定它的归属，最终结果是：
- en: '![](img/b73e0bee-b06e-4043-984a-f77b32ba3d9d.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b73e0bee-b06e-4043-984a-f77b32ba3d9d.png)'
- en: So, similarly we see a small number of firms with many more ratings than average.
    Also, the names are mangled, but we do see four of the top-rated firms also being
    included in the most rated at all list.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，我们可以看到少数几家公司有远超平均值的评分数。而且，虽然名字被篡改，但我们确实看到四家公司既是评分最高的公司，同时也出现在最被评价的公司名单中。
- en: Finding all ratings for a top rated firm
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找评分最高的公司所有的评分
- en: 'What if we looked at one of the top-rated firms to see where the ratings spread
    is? We could use the following script:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看其中一家评分最高的公司，看看评分分布情况如何呢？我们可以使用以下脚本：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The script takes one of the top rated IDs, accesses all of their ratings, and
    displays a histogram of the same:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 该脚本获取一个评分最高的ID，访问其所有评分，并显示一个相关的直方图：
- en: '![](img/2d273b55-7ee7-4df8-8627-45d6786a1e9e.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2d273b55-7ee7-4df8-8627-45d6786a1e9e.png)'
- en: So, for one of the top rated firms there are very few low ratings.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，对于某些评分最高的公司，几乎没有低评分。
- en: Determining the correlation between ratings and number of reviews
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 确定评分与评论数量之间的相关性
- en: 'We could look at the correlation between star rating and just number of reviews
    using the following script:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下脚本查看星级评分与评论数量之间的相关性：
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![](img/ecff2c15-703b-4421-ac50-96da44de87d6.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ecff2c15-703b-4421-ac50-96da44de87d6.png)'
- en: So, we see three times as many `5` star reviews as `1` star reviews. We also
    see a very high correlation between number of reviews and number of stars (`0.8632361`).
    People are only bothering to rate good firms. That makes it interesting to use
    Yelp only to determine if the firm is reviewed at all. If the firm is not rated
    (or not rated much) the unwritten reviews are bad.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们看到 `5` 星评价是 `1` 星评价的三倍多。我们还看到了评论数量和星级数量之间非常高的相关性（`0.8632361`）。人们只愿意为好的公司评分。这使得仅使用
    Yelp 来确定公司是否被评论过变得非常有趣。如果公司没有评分（或者评分很少），那么那些未书面的评论就会很差。
- en: 'We could visualize the relationship between ratings and number of reviews for
    companies using the following script:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下脚本可视化公司评分和评论数量之间的关系：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Where the `business_rating` data frame is a list of businesses and average
    star ratings. The resultant histogram is as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 其中，`business_rating` 数据框是一个商业和平均星级评分的列表。生成的直方图如下：
- en: '![](img/c655a534-70c4-41dc-a754-c20eb5a58cc0.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c655a534-70c4-41dc-a754-c20eb5a58cc0.png)'
- en: This looks like a Poisson distribution. It is interesting that the distribution
    of firm ratings takes such a natural dispersion.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来像是一个泊松分布。有趣的是，公司的评级分布呈现出如此自然的离散性。
- en: Building a model of reviews
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建评论模型
- en: 'We can build a model from the dataset to estimate how many stars a rating may
    entail. However, the data points available within a review are only:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从数据集中构建一个模型，估算一个评分可能涉及多少颗星。然而，评论中的数据点只有：
- en: '`funny`'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`funny`'
- en: '`useful`'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`useful`'
- en: '`cool`'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cool`'
- en: 'These would not appear to be good indicators for a rating number. We can use
    a model, such as:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这些似乎不是良好的评分指示器。我们可以使用一个模型，例如：
- en: '[PRE10]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This produces the statistics of the model:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这生成了模型的统计数据：
- en: '![](img/f3f26dfe-c6d7-448c-ab60-667862cebcd3.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f3f26dfe-c6d7-448c-ab60-667862cebcd3.png)'
- en: 'As expected, we don''t have enough information to work with:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如预期的那样，我们没有足够的信息来进行处理：
- en: Over four million degrees of freedom, just about one per review
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 超过四百万的自由度，几乎每个评论一个自由度
- en: '*P* values are very small—the probability that we have estimated correctly
    is non-existent'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*P* 值非常小——我们估算正确的概率几乎为零'
- en: '`3.7` intercept (close to the halfway point of the range)'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`3.7` 截距（接近范围的中点）'
- en: Such low affect rates (under one times each factor) meaning we aren't moving
    far from the intercept
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这么低的影响率（每个因素不到一次），意味着我们距离截距没有太大的变化。
- en: Using Python to compare ratings
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Python 比较评分
- en: In the previous examples we used R to work through data frames that were built
    from converted JSON to CSV files. If we were to use the Yelp businesses rating
    file we could use Python directly, as it is much smaller and produces similar
    results.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的示例中，我们使用 R 来处理从转换后的 JSON 到 CSV 文件构建的数据框。如果我们使用 Yelp 的企业评分文件，可以直接使用 Python，因为它更小，且产生类似的结果。
- en: In this example, we gather cuisines from the Yelp file based on whether the
    business category includes restaurants. We accumulate the ratings for all cuisines
    and then produce averages for each.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们从 Yelp 文件中收集包含餐厅的商业类别的菜品。我们为所有菜品累计评分，然后为每个菜品生成平均分。
- en: 'We read in the JSON file into separate lines and convert each line into a Python
    object:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将 JSON 文件读取为单独的行，并将每行转换为 Python 对象：
- en: We convert each line to Unicode with the `errors=ignore` option. This is due
    to many erroneous characters present in the data file.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将每行转换为 Unicode，使用 `errors=ignore` 选项。这是因为数据文件中存在许多错误字符。
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We use a dictionary for the ratings for a cuisine. The key of the dictionary
    is the name of the cuisine. The value of the dictionary is a list of ratings for
    that cuisine:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为菜品的评分使用字典。字典的键是菜品的名称，字典的值是该菜品的评分列表：
- en: '[PRE12]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now that we have gathered all of the ratings, we can produce a new dictionary
    of cuisines with average ratings. We also accumulate a total to produce an overall
    average and track the highest rated cuisine:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们收集了所有评分后，可以生成一个新的菜品字典，包含平均评分。我们还会累计总数以生成整体平均值，并跟踪评分最高的菜品：
- en: '[PRE13]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![](img/e80bdc66-bc55-4baf-820c-2012d9c8af6c.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e80bdc66-bc55-4baf-820c-2012d9c8af6c.png)'
- en: It is interesting that `Personal Chefs` is the highest rated. I have only heard
    about celebrities having a personal chef, but the data shows it may be worthwhile.
    An average of 1.6 is abysmal for all cuisines. The data did not appear to have
    a balance of high and low ratings when we looked earlier. However, looking through
    the resulting output, there are many items that are not cuisines, even though
    the `Restaurants` key is present. I had tried to eliminate the bad data by only
    counting cuisines with 10 or more ratings, which eliminated some of the bad data,
    but there are still many erroneous records in play.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，`Personal Chefs`（私人厨师）得分最高。我只听说过名人会有私人厨师，但数据显示这可能是值得的。所有菜系的平均评分为1.6，极为低下。早些时候我们看到数据似乎没有高低评分的平衡。然而，仔细查看结果输出时，会发现很多条目并非菜系，尽管`Restaurants`（餐馆）键存在。我曾尝试通过仅计算评分数达到10条以上的菜系来剔除坏数据，虽然剔除了一部分坏数据，但仍然有许多错误记录存在。
- en: Visualizing average ratings by cuisine
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 按菜系可视化平均评分
- en: 'Now that we have the cuisine averages computed, we can display them in a histogram
    to get an idea of their spread. We first convert the dictionary to a data frame.
    Then plot the `Rating` column of the data frame into a histogram:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经计算出各菜系的平均值，可以通过直方图展示它们的分布情况。我们首先将字典转换为数据框。然后将数据框中的`Rating`列绘制为直方图：
- en: We are using five bins to correspond to the five possible ratings.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用五个箱子来对应五个可能的评分。
- en: '[PRE14]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![](img/a9061c63-4075-4999-ad47-ea9082abf982.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a9061c63-4075-4999-ad47-ea9082abf982.png)'
- en: Again, we see a clear mark towards high average values. I had tried to get a
    better gradient on the data display to no avail.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们看到明显偏向高平均值的趋势。我曾尝试改善数据展示的梯度，但未能成功。
- en: Arbitrary search of ratings
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 随机评分搜索
- en: Since we have the data in an easily loadable format we can search for arbitrary
    conditions, such as `Personal Chefs` that allow dogs-maybe they will custom cook
    for your dog.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 由于数据已经以易于加载的格式存在，我们可以根据任意条件进行搜索，比如`Personal Chefs`（私人厨师）是否允许狗——也许他们会为你的狗定制烹饪。
- en: 'We could use a script as follows: for line in lines:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '我们可以使用如下脚本：for line in lines:'
- en: '[PRE15]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Where we do something useful with the items that filter out. This script would
    display the attributes only for `Personal Chefs`. As can be seen in the following
    display:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我们对筛选出的项目做一些有用的处理。此脚本仅会显示`Personal Chefs`（私人厨师）的属性。可以在以下显示中看到：
- en: '![](img/860a2adf-7ef2-455f-a64c-2ef842363ec6.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/860a2adf-7ef2-455f-a64c-2ef842363ec6.png)'
- en: We could just as easily performed some calculation or other manipulation to
    narrow down and focus on a very specific portion of the data easily.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以轻松地进行某些计算或其他操作，快速缩小范围，专注于数据的特定部分。
- en: Determining relationships between number of ratings and ratings
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 确定评分数量与评分之间的关系
- en: Given the preceding results it appears that people mostly only vote in a positive
    manner. We can look to see if there is a relationship between how many votes a
    company has received and their rating.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前述结果，似乎人们大多数时间只是进行积极投票。我们可以查看公司收到的投票数量与其评分之间是否存在关系。
- en: 'First, we accumulate the dataset using the following script, extracting the
    number of votes and rating for each firm:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们使用以下脚本来累积数据集，提取每家公司的投票数和评分：
- en: '[PRE16]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This coding just builds the data frame with our two variables. We are using
    NumPy as it more easily adds a row to a data frame. Once we are done with all
    records we convert the NumPy data frame back to a pandas data frame.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码仅构建了我们两个变量的数据框。我们使用NumPy，因为它更容易将一行添加到数据框中。当我们处理完所有记录后，我们会将NumPy数据框转换回pandas数据框。
- en: 'The column names have been lost in the translation, so we put those back in
    and draw some summary statistics:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 列名在转换过程中丢失了，因此我们将它们重新添加并绘制一些总结统计数据：
- en: '[PRE17]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In the output shown as follows we see the layout of the reviews and rating
    data we have collected. Yelp has not constrained its data entry for this dataset.
    There should 5 unique values for rating:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下输出中，我们可以看到收集的评论和评分数据的布局。Yelp没有对该数据集的数据输入做出任何限制。评分应有5个独特的值：
- en: '![](img/3d98ddaa-d308-4916-b27c-c22be314918e.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3d98ddaa-d308-4916-b27c-c22be314918e.png)'
- en: 'Next, we plot the data for a visual clue to the relationship, using the following:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们绘制数据以获得关系的视觉线索，使用以下内容：
- en: '[PRE18]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '![](img/38df285c-e486-4332-8705-267f3d36a0f5.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/38df285c-e486-4332-8705-267f3d36a0f5.png)'
- en: So, the data after all, appears to have a clear Poisson distribution as compared
    to the earlier `business_rating` histogram.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，最终数据似乎呈现出一个清晰的泊松分布，与之前的`business_rating`直方图相比。
- en: 'Next, we compute the regression parameters:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们计算回归参数：
- en: '[PRE19]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '![](img/67c5be55-8ce5-472e-8d6a-fca1bfa58923.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/67c5be55-8ce5-472e-8d6a-fca1bfa58923.png)'
- en: We computed intercepts for all rating values. I had expected a single value.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们计算了所有评分值的截距。我原本预期会得到一个单一的值。
- en: 'Now, we determine the range of the observed data using the following:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们使用以下方法来确定观察数据的范围：
- en: '[PRE20]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '![](img/14084c18-6acd-4077-9214-72af8b7ff4f4.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/14084c18-6acd-4077-9214-72af8b7ff4f4.png)'
- en: So, as we guessed earlier, some businesses have a very large number of reviews.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，正如我们之前猜测的那样，一些企业有着大量的评论。
- en: '[PRE21]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '![](img/7bb710de-262f-4151-b1d0-e7f757d35cdf.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7bb710de-262f-4151-b1d0-e7f757d35cdf.png)'
- en: 'We are seeing a much bigger range of predicted values than expected. Plot out
    the observed and predicted data:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到的预测值范围远比预期的大。接下来，绘制出观察数据和预测数据：
- en: '[PRE22]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: In the plot displayed as follows, there does not appear to be a relationship
    between the number of reviews and the review score for a firm. It appears to be
    a numbers game—if you get people to review your firm, on average they will give
    you a high score.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下展示的图中，似乎没有发现评论数量和企业评分之间的关系。这看起来像是一场数字游戏——如果你让人们评论你的企业，平均而言，他们会给你一个高分。
- en: '![](img/a4200469-5647-47cb-9e45-a9a5a1c4c8c0.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a4200469-5647-47cb-9e45-a9a5a1c4c8c0.png)'
- en: There does not appear to be a relationship between the number of reviews and
    the review score for a firm.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 似乎没有发现评论数量和企业评分之间的关系。
- en: Summary
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we used data and converted a JSON file to a CSV file. We evaluated
    the Yelp cuisine review dataset determining the top rated and most rated firms.
    We saw the distribution of ratings. We used Python to perform a similar evaluation
    of Yelp business ratings, finding very similar distributions of the data.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们使用了数据并将JSON文件转换为CSV文件。我们评估了Yelp的餐饮评论数据集，确定了评分最高和评论最多的企业。我们查看了评分的分布。我们使用Python对Yelp企业评分进行了类似的评估，发现数据的分布非常相似。
- en: In the next chapter, we will look at machine learning under Jupyter.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何在Jupyter下使用机器学习。
