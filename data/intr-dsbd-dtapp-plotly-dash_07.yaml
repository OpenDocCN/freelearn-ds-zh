- en: '*Chapter 5*: Interactively Comparing Values with Bar Charts and Dropdown Menus'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第五章*：使用条形图和下拉菜单进行交互式值比较'
- en: You now have all the basics you need to easily construct interactive features
    linking page elements and to produce interactive dashboards. The main concepts
    have been covered with the help of several examples, and we will now be focusing
    on specific types of charts and the different options that they provide. More
    importantly, we will go into additional details for customizing our charts and
    making them suitable for several purposes, firstly, in order to be good enough
    to publish and share with a wider audience, as opposed to just for your interactive
    use, and secondly, to ensure that they properly fit on a page that potentially
    contains other components, and making sure we utilize the available space in an
    optimal way. Another important aspect to cover is the dynamic nature of the charts
    that our users can generate. Based on the user's choice of option in an interactive
    component, the resulting dataset might contain 7 or maybe 70 elements to plot.
    In some cases, it might not contain any data. This dramatically affects the resulting
    charts and their usability, and can even make them difficult to read in certain
    cases. We will explore a few solutions to cater for these situations.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经掌握了构建交互功能并链接页面元素的所有基本知识，能够轻松制作交互式仪表板。主要概念已经通过多个示例进行了介绍，接下来我们将专注于特定类型的图表及其提供的不同选项。更重要的是，我们将深入探讨如何定制图表，使其适应多种用途。首先，要确保它们足够好，能够发布并与更广泛的受众分享，而不仅仅是为了你的交互使用；其次，要确保它们能够适应可能包含其他组件的页面，并确保我们能够以最优化的方式利用可用空间。另一个需要讨论的重要方面是图表的动态特性，用户可以生成的图表会根据选择的交互组件选项，可能包含7个，甚至70个元素来绘制。在某些情况下，数据集可能不包含任何数据。这会极大地影响最终图表的效果和可用性，甚至在某些情况下可能会使它们难以阅读。我们将探讨几种解决方案，以应对这些情况。
- en: In other words, we are trying to move from working with a prototype that simply
    does what it's supposed to do to working with a product that can be shared or
    published to a wide audience.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，我们正在尝试从使用一个仅仅完成其预定功能的原型，转向使用一个可以共享或发布给广泛受众的产品。
- en: The chapters in *Part 2* of this book will each focus on a chart type and an
    interactive component to explore their options. In this chapter, we will explore
    **bar charts** and how they can be used with **drop-down** components, from **Dash
    Core Component**. There is nothing in the nature of these components that links
    a certain component to a certain chart type. They are just used together for organization
    purposes. A dropdown can be used with any type of chart, and any type of interactive
    component can be used to manipulate a bar chart.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本书*第二部分*的各章节将重点介绍一种图表类型和一个交互组件，以探索它们的选项。在本章中，我们将探索**条形图**及其如何与**下拉菜单**组件（来自**Dash
    Core Component**）结合使用。这些组件的性质并没有将某一特定组件与某种图表类型直接关联。它们只是为了组织目的一起使用。下拉菜单可以与任何类型的图表一起使用，任何类型的交互组件也可以用来操作条形图。
- en: 'We will be focusing on the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将专注于以下主题：
- en: Plotting bar charts vertically and horizontally
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 垂直和水平绘制条形图
- en: Linking bar charts and dropdowns
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将条形图与下拉菜单链接
- en: Exploring different ways of displaying multiple bar charts (stacked, grouped,
    overlaid, and relative)
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索显示多个条形图的不同方式（堆叠、分组、叠加和相对）
- en: Using facets to split charts into multiple sub-charts – horizontally, vertically,
    or wrapped
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用面板将图表拆分成多个子图——水平、垂直或包装式
- en: Exploring additional features of dropdowns (allowing multiple selections, adding
    placeholder text, and more)
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索下拉菜单的其他功能（允许多选、添加占位符文本等）
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: We will continue to use the packages that we are now familiar with – `JupyterDash`
    and `Dash`, for prototyping and then integrating into our app, respectively. For
    data manipulation, we will be using `pandas`, and `JupyterLab` will be our starting
    point for building and testing various options. Then, we will use Dash Core Component,
    Dash HTML Components, and Dash Bootstrap Components to update our app.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续使用我们现在熟悉的包——`JupyterDash`和`Dash`，分别用于原型设计和集成到我们的应用程序中。对于数据处理，我们将使用`pandas`，而`JupyterLab`将是我们构建和测试各种选项的起点。然后，我们将使用Dash核心组件、Dash
    HTML组件和Dash Bootstrap组件来更新我们的应用程序。
- en: The dataset that we will be using is the same dataset, specifically the `poverty`
    DataFrame, that we created in the previous chapter. The code files of this chapter
    can be found on GitHub at [https://github.com/PacktPublishing/Interactive-Dashboards-and-Data-Apps-with-Plotly-and-Dash/tree/master/chapter_05](https://github.com/PacktPublishing/Interactive-Dashboards-and-Data-Apps-with-Plotly-and-Dash/tree/master/chapter_05).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用的数据集与上一章中创建的`poverty` DataFrame相同。该章节的代码文件可以在GitHub上找到，网址是[https://github.com/PacktPublishing/Interactive-Dashboards-and-Data-Apps-with-Plotly-and-Dash/tree/master/chapter_05](https://github.com/PacktPublishing/Interactive-Dashboards-and-Data-Apps-with-Plotly-and-Dash/tree/master/chapter_05)。
- en: Check out the following video to see the Code in Action at [https://bit.ly/3ebv8sk](https://bit.ly/3ebv8sk).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看以下视频，了解代码如何运行：[https://bit.ly/3ebv8sk](https://bit.ly/3ebv8sk)。
- en: Let's start by exploring the two main ways in which we can display bar charts
    – vertically and horizontally.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从探索条形图的两种主要显示方式开始——垂直和水平。
- en: Plotting bar charts vertically and horizontally
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 垂直和水平绘制条形图
- en: 'The default display of bar charts is vertical. This is intuitive and easy to
    understand. Each category or item takes a separate position on the *x* axis, and
    the heights of the bars represent a certain quantity on the *y* axis. The same
    applies when the bars are displayed horizontally, only in this case, the width
    of the bars is what represents the quantity. Usually, with relatively fewer values,
    the vertical orientation is good. However, horizontal orientation can be more
    effective in two cases:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 条形图的默认显示方式是垂直的。这种方式直观且易于理解。每个类别或项在* x *轴上占据一个独立的位置，条形的高度代表了*y*轴上的某个数量。条形图水平显示时也是如此，只不过此时条形的宽度代表了数量。通常，在值较少的情况下，垂直显示效果较好。然而，在以下两种情况下，水平显示可能更加有效：
- en: '**When we have many categories**: In this case, the bars might not fit on the
    screen, and we might need to either make them much thinner than the default width,
    or we might need to force horizontal scrolling, which is not as natural as vertical
    scrolling.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**当我们有很多类别时**：在这种情况下，条形图可能无法完全显示在屏幕上，我们可能需要将条形的宽度缩小到比默认值更窄，或者可能需要强制启用横向滚动，这比垂直滚动显得不那么自然。'
- en: '**When the names of the categories are relatively long**: This is not really
    a big problem, and the solution is easy. Plotly already handles this for us, by
    automatically changing the angle at which the names (tick labels) are displayed.
    If needed, the names can be displayed vertically for maximum space utilization.
    Reading text displayed horizontally is the most natural though, and it is the
    most suitable way for these situations.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**当类别名称较长时**：这其实并不是一个大问题，解决方法也很简单。Plotly已经为我们处理了这个问题，通过自动调整名称（刻度标签）显示的角度。如果需要，名称也可以垂直显示以充分利用空间。然而，水平显示文本是最自然的方式，尤其适合这种情况。'
- en: 'Let''s see this in action using our `poverty` DataFrame, so we can see the
    effects of these options, and also to get to know our dataset a little better.
    We will take a look at one of the most widely used measures of income/wealth inequality,
    the Gini index. It is also referred to as the Gini ratio, or coefficient. To learn
    a bit about it, we can use the `series` DataFrame, which contains information
    about the indicators that we will be working with:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过`poverty` DataFrame来实际查看这些选项的效果，同时也更好地了解我们的数据集。我们将看一下最常用的收入/财富不平等度量之一——基尼指数。它也被称为基尼比率或系数。为了了解它的一些基本信息，我们可以使用包含我们将要处理的指标信息的`series`
    DataFrame：
- en: 'Import `pandas` and create the `series` variable. The name of the variable
    was chosen based on the filename, as we did in the previous chapter. Please don''t
    confuse this with the `pandas.Series` object:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`pandas`并创建`series`变量。我们根据文件名选择了该变量名，正如在上一章中所做的那样。请不要将其与`pandas.Series`对象混淆：
- en: '[PRE0]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Create a variable, `gini`, as a string, as an easier alternative to using the
    long name of the indicator:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`gini`的变量，作为使用指标长名称的简化替代方式：
- en: '[PRE1]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Extract the long definition of the indicator by using the column of the same
    name:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用同名列提取指标的详细定义：
- en: '[PRE2]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Knowing that the values vary between 0 and 100, let''s check what the most
    extreme values are for all years and countries:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 知道这些值的范围在0到100之间，让我们检查所有年份和国家的最极端值：
- en: '[PRE3]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We can also learn a little more about this column by using the `describe` method
    from `pandas`:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还可以通过`pandas`的`describe`方法来更好地了解这一列：
- en: '[PRE4]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We will learn much more about this indicator and interactively explore and
    compare different countries across different years, but this statement from the
    `Limitations and exceptions` column stood out to me: *"Because the underlying
    household surveys differ in methods and types of welfare measures collected, data
    is not strictly comparable across countries or even across years within a country."*'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将深入了解这个指标，并交互式地探索和比较不同国家在不同年份的数据，但来自`Limitations and exceptions`栏目的这句话让我印象深刻：“*因为基础的家庭调查在方法和收集的福利衡量标准上有所不同，所以不同国家之间，甚至同一国家不同年份之间的数据不能严格比较。*”
- en: So, we will have to be careful not to take those values precisely, as mentioned,
    and keep this limitation in mind.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们必须小心不要完全依赖这些值，并且记住这个限制。
- en: 'Now that we are a bit more familiar with the indicator, we are ready to explore
    various options for visualizing it with a bar chart:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对该指标稍微熟悉一些，准备探索使用条形图可视化它的各种选项：
- en: 'We start by creating a subset of the `poverty` DataFrame, named `df`. This
    will be a subset where the `year` values are equal to an arbitrarily selected
    year. We then remove the missing values, and sort the available ones using the
    `gini` column:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先创建一个名为 `df` 的 `poverty` 数据框的子集。这个子集将包含 `year` 值等于任意选择的年份的数据。然后，我们去除缺失值，并使用
    `gini` 列对可用数据进行排序：
- en: '[PRE5]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We can now easily create our Gini index bar chart with Plotly Express. The
    code also dynamically generates the title by joining the name of the indicator
    to the selected year:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在可以轻松地使用 Plotly Express 创建我们的基尼指数条形图。代码还通过将指标名称与所选年份连接，动态生成标题：
- en: '[PRE6]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Running the preceding code produces the chart in *Figure 5.1*:'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 运行之前的代码会生成*图 5.1*中的图表：
- en: '![Figure 5.1 – A bar chart of the Gini index for the year 1980](img/B16780_05_001.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.1 – 1980 年的基尼指数条形图](img/B16780_05_001.jpg)'
- en: Figure 5.1 – A bar chart of the Gini index for the year 1980
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.1 – 1980 年的基尼指数条形图
- en: 'For the year 1980, it seems we only have data for three countries, and having
    them displayed vertically seems fine, easily readable, and clear. Let''s now repeat
    the same process for the year 1990, and see the result in *Figure 5.2*:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 对于1980年，似乎我们只有三个国家的数据，将它们垂直显示似乎是可以接受的，既容易读取又清晰。现在让我们对1990年重复同样的过程，并在*图 5.2*中查看结果：
- en: '![Figure 5.2 – A bar chart of the Gini index for the year 1990](img/B16780_05_002.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.2 – 1990 年的基尼指数条形图](img/B16780_05_002.jpg)'
- en: Figure 5.2 – A bar chart of the Gini index for the year 1990
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.2 – 1990 年的基尼指数条形图
- en: 'We can read the country names, but not as naturally as we would if they were
    displayed horizontally as in *Figure 5.1*. Now, if users were reading the same
    chart on a narrower screen, the country names would be displayed vertically, and
    it becomes even more difficult to read them, as you can see in *Figure 5.3*:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以读取国家名称，但不像*图 5.1*那样自然，如果它们是水平显示的话。如果用户在更窄的屏幕上查看相同的图表，国家名称将会垂直显示，阅读起来就更加困难，如*图
    5.3*所示：
- en: '![Figure 5.3 – A bar chart of the Gini index for the year 1990 with country
    names displayed vertically](img/B16780_05_003.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.3 – 1990 年的基尼指数条形图，国家名称垂直显示](img/B16780_05_003.jpg)'
- en: Figure 5.3 – A bar chart of the Gini index for the year 1990 with country names
    displayed vertically
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.3 – 1990 年的基尼指数条形图，国家名称垂直显示
- en: 'In more recent years, we have data for many more countries, and in those cases,
    there is not enough horizontal space to fit them. Some names are not even displayed,
    unless you hover over the respective bar, or zoom in to that part of the chart.
    As an example, you can see the same chart for the year 2010 in *Figure 5.4*:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在近年来，我们有更多国家的数据，在这种情况下，水平空间不足以容纳所有国家。一些国家名称甚至没有显示，除非你悬停在相应的条形上，或者放大到图表的该部分。例如，你可以在*图
    5.4*中看到2010年的相同图表：
- en: '![Figure 5.4 – A bar chart of the Gini index for the year 2010 with some country
    names not displayed](img/B16780_05_004.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.4 – 2010 年的基尼指数条形图，其中部分国家名称未显示](img/B16780_05_004.jpg)'
- en: Figure 5.4 – A bar chart of the Gini index for the year 2010 with some country
    names not displayed
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.4 – 2010 年的基尼指数条形图，其中部分国家名称未显示
- en: Based on the charts we just saw, we now have a better understanding of the challenge
    of making an interactive bar chart dynamically generated for the Gini index. If
    we want to let users select the year they are interested in, then we have a few
    points to deal with.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们刚才看到的图表，我们现在对动态生成的交互式基尼指数水平条形图的挑战有了更好的理解。如果我们希望用户选择感兴趣的年份，那么我们需要处理一些问题。
- en: 'First, the number of available values for this metric varies from 3 to more
    than 150, which is a very large range. Second, it would be better, and safer,
    to use horizontal orientation, because in all cases country names would be displayed
    horizontally, and no matter how long the names are, they would be easy to read.
    These issues can be easily solved by setting `orientation=''h''` in our call to
    `px.bar`, but one challenge remains. We need to determine the optimal height of
    the chart, based on the number of available countries in the chosen year, knowing
    how big the range is, as we just saw. Let''s first see what the bar chart looks
    like when displayed horizontally, and then design the solution for an interactive
    one. We will run the same code, but with two principal differences. The `x` and
    `y` arguments need to be swapped, as they will each take the opposite axis, and
    we also need to set the appropriate value for the `orientation` parameter, `h`
    for "horizontal" in this case:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，这个指标的可用值的数量从3到150多个，范围非常大。其次，最好且更安全使用水平排列，因为在所有情况下，国家名称将水平显示，无论名称多长，都容易阅读。通过在调用`px.bar`时设置`orientation='h'`，这些问题可以轻松解决，但仍然有一个挑战。我们需要根据所选年份中可用国家的数量来确定图表的最佳高度，正如我们刚才看到的那样，范围有多大。我们首先看一下当图表显示为水平时的样子，然后设计一个交互式的解决方案。我们将运行相同的代码，但有两个主要区别。`x`和`y`参数需要交换，因为它们将分别取反方向的轴，并且我们还需要为`orientation`参数设置适当的值，在这种情况下为`h`表示“水平”：
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The preceding code produces the chart in *Figure 5.5* for the year 2000:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码生成了*图5.5*，这是2000年所有可用国家的基尼指数水平条形图：
- en: '![Figure 5.5 – A horizontal bar chart of the Gini index for the year 2000 for
    all available countries](img/B16780_05_005.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图5.5 – 2000年所有可用国家的基尼指数水平条形图](img/B16780_05_005.jpg)'
- en: Figure 5.5 – A horizontal bar chart of the Gini index for the year 2000 for
    all available countries
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.5 – 2000年所有可用国家的基尼指数水平条形图
- en: Now the countries are very easily readable (the ones that are displayed at least),
    but the bars are too narrow and crowded. The chart looks unnecessarily wide (especially
    knowing that the minimum and maximum values are in the interval [20.2, 65.8]).
    We can manually set the width of the chart in our function call if we require,
    but we need to figure out a way to dynamically set the height of the chart, which
    can be set using the `height` parameter.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，国家名称非常容易读取（至少是显示的那些），但条形图过于狭窄且拥挤。图表看起来不必要地宽（尤其是考虑到最小值和最大值位于[20.2, 65.8]区间内）。如果需要，我们可以在函数调用中手动设置图表的宽度，但我们需要想办法动态设置图表的高度，可以通过`height`参数来设置。
- en: 'One way to do this is to set a fixed height in pixels. Then, based on the number
    of countries in `df`, we can add 20 pixels per country. For example, if we have
    10 countries in `df`, then our height would be 200 + (10x20) = 400 pixels. Once
    `df` has been created, we can easily count the number of countries it contains,
    and assign it to a variable, `n_countries`. The modified code to produce this
    looks like this:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 一种方法是设置固定的像素高度。然后，根据`df`中的国家数量，我们可以为每个国家添加20像素。例如，如果`df`中有10个国家，那么我们的高度就是200
    + (10x20) = 400像素。创建`df`后，我们可以轻松计算出它包含的国家数量，并将其赋值给一个变量`n_countries`。修改后的代码如下所示：
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Running the preceding code over three years that have a different number of
    countries produces the charts in *Figure 5.6*:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述代码，在三个国家数量不同的年份中，生成了*图5.6*中的图表：
- en: '![Figure 5.6 – Various horizontal bar charts with a dynamic height based on
    the number of countries](img/B16780_05_006.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![图5.6 – 基于国家数量动态高度的各种水平条形图](img/B16780_05_006.jpg)'
- en: Figure 5.6 – Various horizontal bar charts with a dynamic height based on the
    number of countries
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.6 – 基于国家数量动态高度的各种水平条形图
- en: The long chart on the right was resized to fit on the page, but it is pretty
    much the same as the others in terms of the height of the bars and the readability
    of country names. All countries are visible, easy to read, and nothing is hidden.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 右侧的长图已调整大小以适应页面，但在条形的高度和国家名称的可读性方面与其他图表基本相同。所有国家都清晰可见，易于阅读，且没有任何内容被隐藏。
- en: With this solution, we took care of the dynamic number of countries that can
    be selected by dynamically setting the total height of the figure, based on the
    number of countries.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个解决方案，我们通过根据国家数量动态设置图形的总高度，处理了可以选择的国家数量的动态变化。
- en: This approach can be thought of as a discovery approach. Users don't know exactly
    what they are looking for; they select a year and see whatever data is available
    for that year. After they select a few options, they might be interested in digging
    deeper to learn more about specific countries. For example, they might be interested
    in how a certain country's Gini index has progressed over time. We will do this
    next.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法可以看作是一种探索方法。用户并不确切知道自己在寻找什么；他们选择一个年份，并查看该年份可用的所有数据。在选择了一些选项后，他们可能有兴趣深入了解某些国家的具体信息。例如，他们可能对某个国家的基尼指数随时间的变化感兴趣。接下来我们将实现这一点。
- en: Creating vertical bar charts with many values
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建具有多个值的竖条图
- en: When we want to let users visualize how a country's Gini index (or any other
    indicator) has progressed over the years, we can do so with vertical bars. Because
    years represent a sequence of events, displaying them side by side is natural,
    because it shows a trend over time. And since years are numbers in a sequence,
    we don't have the readability issue that we had with country names. Even if the
    bars end up much thinner, and even if some of them weren't displayed, users can
    easily mentally "fill in the blanks" where required.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们想让用户可视化一个国家的基尼指数（或任何其他指标）如何随时间变化时，我们可以通过竖条图来实现。因为年份代表了一系列事件，将它们并排显示是自然的，因为这显示了随时间变化的趋势。而且，由于年份是一个数字序列，我们没有像国家名称那样的可读性问题。即使条形图变得更窄，甚至某些条形图没有显示出来，用户也能轻松地在脑海中“填补空白”，在需要的地方理解数据。
- en: 'The code to produce such a chart is very similar to the last one, and actually
    simpler, because we don''t need to worry about dynamically setting the height.
    Instead of `year` as our dynamic variable, we will have `Country Name`. The definition
    of `df` will depend on the rows in our dataset that contain the chosen country:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 生成这样的图表的代码与上一个非常相似，实际上更简单，因为我们不需要担心动态设置高度。我们将使用`Country Name`作为动态变量，而不是`year`。`df`的定义将取决于数据集中包含所选国家的行：
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'And now we can generate the chart in a straightforward way with the following
    code:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以通过以下代码直观地生成图表：
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Running the preceding code produces the chart in *Figure 5.7* for Sweden:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 运行前面的代码生成的图表是针对瑞典的，如*图 5.7*所示：
- en: '![Figure 5.7 – A vertical bar chart with years on the x axis](img/B16780_05_007.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.7 – 带有年份作为x轴的竖条图](img/B16780_05_007.jpg)'
- en: Figure 5.7 – A vertical bar chart with years on the x axis
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.7 – 带有年份作为x轴的竖条图
- en: Note that the years with missing values are still available on the *x* axis,
    even though there are no bars representing their value for those years. This is
    important because it shows where the gaps are in our data. It would be misleading
    otherwise if we only displayed years that contained data, giving the false impression
    of continuous data for all years.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，即使某些年份没有对应的值，这些年份仍然会出现在*x*轴上，即便这些年份没有条形图显示其值。这一点很重要，因为它展示了我们数据中的空缺。如果我们只显示包含数据的年份，这会产生误导性，给人一种所有年份都有连续数据的错误印象。
- en: We have familiarized ourselves a bit with the Gini index data, and tested how
    to make two types of dynamic charts. We are now ready to create a "Gini Index"
    section and add it to our app, which we will be doing next.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经稍微熟悉了基尼指数数据，并测试了如何制作两种类型的动态图表。接下来，我们准备创建一个“基尼指数”部分并将其添加到我们的应用中。
- en: Linking bar charts and dropdowns
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接条形图和下拉框
- en: 'We now want to put together everything that we''ve done so far. The plan is
    to have two dropdowns, side by side, with a chart underneath each. The first will
    provide years as options that will generate a horizontal bar chart. The second
    will generate a vertical bar chart, based on the selected country. The end goal
    is to produce a new section in our app that looks like *Figure 5.8*:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们要将迄今为止所做的工作整合起来。计划是将两个下拉菜单并排放置，每个下方都有一个图表。第一个下拉菜单将提供年份选项，生成一个横向条形图。第二个下拉菜单将根据所选国家生成一个纵向条形图。最终目标是生成一个新的应用部分，类似于
    *图 5.8*：
- en: '![Figure 5.8 – The Gini Index section in the app with two drop-down components
    and two bar charts](img/B16780_05_008.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.8 – 应用中的 Gini 指数部分，包含两个下拉菜单组件和两个条形图](img/B16780_05_008.jpg)'
- en: Figure 5.8 – The Gini Index section in the app with two drop-down components
    and two bar charts
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.8 – 应用中的 Gini 指数部分，包含两个下拉菜单组件和两个条形图
- en: 'Let''s start by building this as a complete and independent app in JupyterLab,
    and make sure it works as expected:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们在 JupyterLab 中构建一个完整独立的应用，并确保其按预期工作：
- en: 'We first run the necessary imports and instantiate the app. We already covered
    all these imports, except for the `PreventUpdate` exception. This is a useful
    tool when there is no value selected in a component that is handled by a callback
    function; for example, when a user first loads the app, or when there are no default
    values. In this case, the input value coming from `Dropdown` would be `None` and
    would most likely raise exceptions. In those situations, we can use this exception
    to freeze things, so to speak, until a proper input is passed to the callback
    function:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先运行必要的导入并实例化应用。我们已经覆盖了所有这些导入，除了 `PreventUpdate` 异常。这个异常在回调函数处理的组件中没有选择值时非常有用；例如，当用户首次加载应用时，或者没有默认值的情况下。在这种情况下，来自
    `Dropdown` 的输入值将是 `None`，并且很可能会引发异常。在这种情况下，我们可以使用这个异常来冻结操作，直到传递一个有效的输入给回调函数：
- en: '[PRE11]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Create `gini_df`, which is a subset of `poverty` that doesn''t have missing
    values in the Gini index column:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `gini_df`，它是 `poverty` 的一个子集，其中的 Gini 指数列没有缺失值：
- en: '[PRE12]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Create the app''s layout using one top-level div, within which we will place
    all other components:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用一个顶层 div 创建应用的布局，在其中我们将放置所有其他组件：
- en: '[PRE13]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Inside the div we just created, we want to add a section title, as well as
    a `dbc.Row` component. This row will then contain two `dbc.Col` elements, which
    would, in turn, contain a dropdown and a chart each. Here is a list of elements
    that will be inserted in the div:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们刚刚创建的 div 中，我们要添加一个部分标题，并放置一个 `dbc.Row` 组件。该行将包含两个 `dbc.Col` 元素，每个元素中将包含一个下拉菜单和一个图表。以下是将插入
    div 中的元素列表：
- en: '[PRE14]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The preceding code should take care of the layout once we insert it in the
    top-level div. Now we can create the first callback, which takes a year as input
    and returns the appropriate chart. Note how the `PreventUpdate` exception is used
    at the beginning of the function:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上述代码应该能够处理布局，当我们将其插入顶层 div 后。现在我们可以创建第一个回调函数，它接受年份作为输入并返回相应的图表。注意 `PreventUpdate`
    异常在函数开始时的使用：
- en: '[PRE15]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We can also do the same thing and create the other callback function that handles
    the second part of the Gini Index section:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还可以做同样的事情，创建另一个回调函数来处理 Gini 指数部分的第二部分：
- en: '[PRE16]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Finally, we run the app:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们运行应用：
- en: '[PRE17]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This should create a running app as shown in *Figure 5.8*.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会创建一个运行中的应用，如 *图 5.8* 所示。
- en: 'We now want to incorporate this new functionality into our existing app. All
    we have to do is insert the visual components wherever we want them to appear.
    The callbacks can be added below the app''s `layout` attribute. You can go ahead
    and make a copy of the latest version of the app that we created in [*Chapter
    3*](B16780_03_Final_NM_ePub.xhtml#_idTextAnchor044), *Working with Plotly''s Figure
    Objects*. You can insert the new components as a list between `dcc.Graph(id=''population_chart'')`
    and `dbc.Tabs`, as you can see in the following code snippet:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们要将这个新功能整合到现有应用中。我们只需将可视化组件插入到希望它们出现的位置即可。回调函数可以添加在应用的 `layout` 属性下方。你可以复制我们在
    [*第 3 章*](B16780_03_Final_NM_ePub.xhtml#_idTextAnchor044) 中创建的最新版本的应用，*与 Plotly
    的图形对象一起工作*。你可以将新组件作为一个列表插入到 `dcc.Graph(id='population_chart')` 和 `dbc.Tabs` 之间，如以下代码片段所示：
- en: '[PRE18]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Using one indicator, we created two dynamic charts, the first allowing users
    to explore the data for a given year, showing all available countries, and the
    other allowing them to explore data for all years, for a certain country. We also
    explored the two ways of displaying bars, horizontally and vertically, and discussed
    when it can be better to use each of the orientations.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 使用一个指标，我们创建了两个动态图表，第一个让用户探索特定年份的数据，显示所有可用的国家，另一个让用户探索某个国家在所有年份的数据。我们还探索了显示条形图的两种方式，横向和纵向，并讨论了在何种情况下使用每种方向更为合适。
- en: We'll now move on to exploring how to plot multiple bar charts on the same figure,
    and see different ways of doing so. We will also explore a new set of indicators
    using those new techniques.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将探讨如何在同一个图形上绘制多个条形图，并查看不同的绘制方式。我们还将使用这些新技术探索一组新的指标。
- en: Exploring different ways of displaying multiple bar charts (stacked, grouped,
    overlaid, and relative)
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索显示多个条形图的不同方式（堆叠、分组、重叠和相对）
- en: 'When we want to display values for different countries but for the same years,
    we have several options for how to display multiple bars on each position of the
    *x* axis. *Figure 5.9* shows the different ways in which we can do that when visualizing
    two variables, **a** and **b**:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们想要显示不同国家在相同年份的数据时，我们有几种选择，可以在每个*X*轴位置显示多个条形图。*图 5.9*展示了我们在可视化两个变量**a**和**b**时可以采用的不同方式：
- en: '![Figure 5.9 – Multiple bar charts displayed using different "barmode" options](img/B16780_05_009.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.9 – 使用不同“barmode”选项显示多个条形图](img/B16780_05_009.jpg)'
- en: Figure 5.9 – Multiple bar charts displayed using different "barmode" options
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.9 – 使用不同“barmode”选项显示多个条形图
- en: The four bar charts in the preceding diagram show the same information, but
    in different ways. This can be set using the `barmode` parameter. With **relative**,
    bars are displayed on top of one another, with negative values below, and positive
    values above, the zero line. If you set it to **group**, then bars will be displayed
    next to one another. With **overlay**, bars are displayed in front of one another,
    and by default, we get some transparency in order to see both bars. Finally, if
    you set it to **stack**, you get them on top of one another, like relative, but
    in this case, the negative values cancel out the positives, as you can see for
    values 2 and 4 in the last chart. This is great if you want to compare proportions
    of each value to the total, especially if they all add up to the same total. This
    is what we will do with the income share indicators that are available in our
    dataset.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 前面图表中的四个条形图显示了相同的信息，但以不同的方式呈现。这可以通过设置`barmode`参数来实现。使用**relative**时，条形图会相互叠加，负值显示在下方，正值显示在零线以上。如果设置为**group**，条形图会并排显示。使用**overlay**时，条形图会彼此重叠，默认情况下，条形图具有一定透明度，以便我们能看到两者。最后，如果设置为**stack**，条形图会像relative一样叠加在一起，但在这种情况下，负值会抵消正值，就像你在最后一个图表中看到的2和4的数值一样。如果你想比较每个值相对于总数的比例，特别是当它们的总和相同的时候，这是一个很好的方法。这正是我们将用来处理我们数据集中收入分配指标的方式。
- en: Creating the income share DataFrame
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建收入分配数据框
- en: 'Let''s take a look at the five columns that show the share of income for each
    of the five quintiles of countries'' populations. We first create a subset of
    the `poverty` DataFrame, and call it `income_share_df`. This is done by filtering
    the columns using the regular expression shown here. We also drop missing values:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下这五列，显示了各国人口五个五分位的收入分配份额。我们首先从`poverty`数据框中创建一个子集，并命名为`income_share_df`。这是通过使用这里展示的正则表达式过滤列来实现的。我们还删除了缺失值：
- en: '[PRE19]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Running the preceding code shows us a sample of rows from the newly created
    `income_share_df`, as you can see in *Figure 5.10*:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 运行前面的代码，我们可以看到来自新创建的`income_share_df`的一些样本行，如*图 5.10*所示：
- en: '![Figure 5.10 – Sample rows showing income share quintiles per country](img/B16780_05_0010.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.10 – 显示各国收入分配五分位的样本行](img/B16780_05_0010.jpg)'
- en: Figure 5.10 – Sample rows showing income share quintiles per country
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.10 – 显示各国收入分配五分位的样本行
- en: 'For every country and year combination, we have five values. Each value shows
    the percentage of income of the respective group''s share of the total for that
    country and year. We want to let users select a country and, as a result, display
    a chart showing how the split of those five values changes across all available
    years. To get an idea of the end result, take a look at *Figure 5.11* showing
    those values for the United States:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个国家和年份的组合，我们有五个值。每个值显示的是该组收入在该国家和年份中占总收入的百分比。我们希望让用户选择一个国家，并显示一个图表，展示这些五个值在所有可用年份中的变化情况。为了了解最终效果，可以查看*图
    5.11*，其中展示了美国的这些值：
- en: '![Figure 5.11 – Income shares per quintile, shown for the selected country
    for all available years](img/B16780_05_0011.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.11 – 每个五分位的收入份额，按所选国家和所有可用年份显示](img/B16780_05_0011.jpg)'
- en: Figure 5.11 – Income shares per quintile, shown for the selected country for
    all available years
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.11 – 每个五分位的收入份额，按所选国家和所有可用年份显示
- en: Since these values all add up to 100 (with minor rounding errors), we can have
    clearly comparable bars across the years, because they all have the same total
    length. Since these are proportions, we are interested in seeing the split for
    a particular year, and also how that split changed across years.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些值的总和为 100（仅有微小的舍入误差），因此我们可以清晰地比较各年份之间的柱状图，因为它们的总长度相同。由于这些是比例，我们关心的是查看某一特定年份的分布情况，以及这些分布如何随年份变化。
- en: As you can see, it is very easy to see how things change for the rightmost and
    leftmost parts of the bars because they have the same baseline, whether at the
    beginning or the end. However, for the values in the middle, it's not easy to
    do so. The reason is that their size changes, as well as their baselines. So,
    the more divisions you add, the more difficult it gets to compare them across
    years. But since Plotly's charts are interactive, users can easily hover over
    the bars, get their exact values, and compare them.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，对于柱形图的最右边和最左边部分，我们可以很容易地看出它们的变化，因为它们有相同的基准线，不管是开始还是结束。但是对于中间的值，就不容易做到这一点。原因在于它们的大小和基准线都在变化。所以，增加更多的分段就会使得跨年份的比较变得更加困难。但由于
    Plotly 的图表是互动式的，用户可以轻松地将鼠标悬停在柱子上，获取其准确值并进行比较。
- en: 'Producing this chart should be straightforward. We already created our DataFrame,
    and have our values. We can just set the `x` and `y` values, and set `orientation=''h''`,
    but the problem is that the categories are ordered alphabetically in the DataFrame,
    and we want them to be ordered according to their numeric meaning, from the lowest
    to the highest, so that their relative position can be easily understood by users.
    As usual, this is mainly a data manipulation challenge. So, let''s do it:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 生成此图表应该是直接的。我们已经创建了 DataFrame 并获得了我们的值。我们只需要设置 `x` 和 `y` 值，并设置 `orientation='h'`，但是问题在于，DataFrame
    中的类别是按字母顺序排序的，而我们希望它们按照数值含义排序，从最小到最大，以便用户能够轻松理解它们的相对位置。像往常一样，这主要是一个数据处理挑战。那么，我们来解决它：
- en: 'We first need to rename the columns and order them by their value, from "lowest"
    to "highest." One way to do that is to prepend the column names with numbers and
    sort accordingly. This can easily be done using the `rename` method. After that,
    we sort the columns by using the `sort_index` method, and setting `axis=1`, which
    means the columns (as opposed to the index of the DataFrame):'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先需要重命名列，并按照其值从“最低”到“最高”排序。实现这一点的一种方法是为列名前加上数字，并按此排序。这可以通过`rename`方法轻松完成。然后，我们使用`sort_index`方法对列进行排序，并设置`axis=1`，表示对列（而非
    DataFrame 的索引）进行排序：
- en: '[PRE20]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Check to see that our work is correct:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查我们的工作是否正确：
- en: '[PRE21]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We now want to remove the redundant part of the columns and keep the position
    indicator together with "20%." We can use the standard library''s `re` module
    for that. We replace any digit followed by `Income share held by` with an empty
    string. After that, we change the casing of the resulting string to title case:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在要去除列中冗余的部分，并保留位置指示符和“20%”。我们可以使用标准库的`re`模块来实现。我们将任何数字后跟`Income share held
    by`的内容替换为空字符串。然后，我们将结果字符串的大小写更改为标题格式：
- en: '[PRE22]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We now create a variable, `income_share_cols`, to refer to the columns that
    we are interested in:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们创建一个变量`income_share_cols`，用于引用我们感兴趣的列：
- en: '[PRE23]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now, our DataFrame is ready for plotting with suitable and short names. We
    first create a `country` variable to use in filtering the DataFrame:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们的 DataFrame 已经准备好绘图，且名称简短且适当。我们首先创建一个`country`变量，用于过滤 DataFrame：
- en: '[PRE24]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Create the bar chart using `px.bar`. Note that when setting the value of the
    `x` parameter, we are using a list. Plotly Express can also work with wide format
    data, which is very convenient in such cases. We could have melted the DataFrame
    and used the approach we used in the previous chapter as well. We also set `orientation=''h''`
    and `barmode=''stack''`. The title will dynamically insert the country name, as
    you can see here:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`px.bar`创建条形图。注意，当设置`x`参数的值时，我们使用的是一个列表。Plotly Express也可以处理宽格式数据，这在这种情况下非常方便。我们本来也可以将数据框架进行“熔化”，并使用上一章中使用的方法。我们还设置了`orientation='h'`和`barmode='stack'`。标题将动态插入国家名称，正如你在这里看到的：
- en: '[PRE25]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: You probably noticed that I assigned the result to a variable figure, and that
    is because we have a few minor details to improve. Running the preceding code
    produces the chart in *Figure 5.12*:![Figure 5.12 – Income shares per quintile,
    shown using the default options](img/B16780_05_0012.jpg)
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可能注意到我将结果赋值给了一个变量`figure`，这是因为我们还有一些细节需要改进。运行前面的代码会生成*图 5.12*中的图表：![图 5.12
    – 按五分位显示的收入份额，使用默认选项](img/B16780_05_0012.jpg)
- en: Figure 5.12 – Income shares per quintile, shown using the default options
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.12 – 按五分位显示的收入份额，使用默认选项
- en: 'The titles of the *x* axis, `fig.layout`, and setting them is straightforward.
    Note that the legend has the `x` and `y` attributes to set its position in the
    figure. We set the legend''s `x` attribute to 0.25 to indicate that we want the
    legend to start at quarter the distance from the origin of the figure:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*x*轴的标题，`fig.layout`，以及设置它们非常简单。请注意，图例有`x`和`y`属性来设置其在图中的位置。我们将图例的`x`属性设置为0.25，表示我们希望图例从图形原点的四分之一处开始：'
- en: '[PRE26]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Running the preceding code for Indonesia produces the final chart in *Figure
    5.13*:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对印度尼西亚运行前面的代码会生成*图 5.13*中的最终图表：
- en: '![Figure 5.13 – Income shares per quintile, shown using customized options](img/B16780_05_0013.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.13 – 按五分位显示的收入份额，使用自定义选项](img/B16780_05_0013.jpg)'
- en: Figure 5.13 – Income shares per quintile, shown using customized options
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.13 – 按五分位显示的收入份额，使用自定义选项
- en: Let's now put everything together and add the new features to our app.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们把一切整合在一起，并将新功能添加到我们的应用程序中。
- en: Incorporating the functionality into our app
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将功能集成到我们的应用程序中
- en: 'We are now ready to again add the new functionality to our app using the function
    and chart we just created. At this stage, not much explanation is required since
    we have done this enough times, but I will go through the main steps, and you
    can always refer to the code repository to check your work:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在准备好再次将新功能添加到我们的应用程序中，使用我们刚刚创建的函数和图表。在这个阶段，不需要太多解释，因为我们已经做过很多次了，但我会回顾一下主要步骤，你可以随时参考代码库来检查你的工作：
- en: 'At the top of the module, we first make the DataFrame definitions, as well
    as column changes, as we did. Make sure that the following code is placed after
    creating the `poverty` DataFrame because it depends on it:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模块的顶部，我们首先进行数据框架的定义，以及列的更改，就像我们之前做的那样。确保以下代码放在创建`poverty`数据框架之后，因为它依赖于它：
- en: '[PRE27]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'For the layout part, we require an `h2` element as a title for the new section,
    a `Dropdown` component for countries, and a `Graph` component, right under the
    last charts we created for the Gini Index section:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在布局部分，我们需要一个`h2`元素作为新章节的标题，一个`Dropdown`组件用于选择国家，以及一个`Graph`组件，放在我们为基尼指数部分创建的最后一个图表下面：
- en: '[PRE28]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The `callback` function can be easily constructed using the code we just worked
    with, and it ends up as follows:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`callback`函数可以很容易地通过我们刚才处理的代码构建，最终如下所示：'
- en: '[PRE29]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Adding this code in the right places should add the new functionality to our
    app. We now have multiple indicators that our users can interact with, and several
    of them provide different ways of looking at the data.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 将这段代码放到正确的位置应该能将新功能添加到我们的应用程序中。现在我们有多个指标，用户可以与之互动，其中一些提供了不同的方式来看待数据。
- en: The four ways of displaying bar charts can be interesting, but in our case,
    if we want to allow users to compare more than one country, it would quickly become
    almost impossible to read. Going back to our Gini index country chart, for example,
    each selected country typically displays 20 to 30 bars, depending on how much
    data is available. For four countries, we are talking about around 100 bars, on
    half a page, which is really difficult to read.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 四种显示条形图的方式可能很有趣，但在我们的案例中，如果我们想允许用户比较多个国家，这会迅速变得几乎无法阅读。举个例子，回到我们的基尼指数国家图表，每个选定的国家通常会显示20到30个条形图，具体取决于可用数据的多少。对于四个国家，我们大约需要100个条形图，占据半页，真的很难阅读。
- en: How about allowing users to select as many countries as they want, and for each
    selected country, a separate chart is produced, so they can see the countries
    on multiple charts?
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 如果允许用户选择尽可能多的国家，并为每个所选国家生成单独的图表，这样他们就可以在多个图表上看到国家了，怎么样？
- en: This is what faceting is all about, which we will explore next.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是分面的全部内容，我们将在接下来进行探索。
- en: Using facets to split charts into multiple sub-charts – horizontally, vertically,
    or wrapped
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用分面将图表拆分为多个子图表 – 水平、垂直或包装
- en: This is a very powerful technique that allows us to add a new dimension to our
    analysis. We can select any feature (column) from our dataset to split the chart
    by. If you are expecting a long explanation of how it works, and what you need
    to learn to master it, don't. Just like most other things in Plotly Express, if
    you have a long-form (tidy) dataset, all you have to do is select a column and
    use its name for the `facet_col` or `facet_row` parameter. That's it.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种非常强大的技术，允许我们为分析添加一个新的维度。我们可以从数据集中选择任何特征（列）来分割图表。如果您期望详细解释它的工作原理以及需要学会的内容，请别担心。就像
    Plotly Express 中的大多数其他功能一样，如果您有一个长格式（整洁的）数据集，您只需选择一个列，并使用其名称作为`facet_col`或`facet_row`参数即可。就是这样。
- en: 'Let''s take a quick look at the available options for facets by looking at
    the relevant facet parameters:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速查看通过查看相关的分面参数可用的选项：
- en: '`facet_col`: This means you want to split the chart into columns, and the selected
    column name will be used to split them. This results in the charts being displayed
    side by side (as columns).'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`facet_col`：这意味着您希望将图表拆分为列，并且所选列名将用于将它们拆分。这将导致图表并排显示（作为列）。'
- en: '`facet_row`: Similarly, if you want to split the chart into rows, you can use
    this parameter, which will split the chart into sub-charts displayed on top of
    one another.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`facet_row`：类似地，如果您希望将图表拆分为行，您可以使用此参数，它将把图表拆分为在彼此上方显示的子图表。'
- en: '`facet_col_wrap`: This is really useful when you have a dynamic number of facets
    to produce. If you know your users will be generating multiple charts, after how
    many charts should the following chart be displayed on the next row in the resulting
    grid of charts? The answer should be an integer, and Plotly Express makes sure
    that after that number, the charts are displayed in the next row of charts. This
    ensures that for every row, we have a maximum number of columns of charts.'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`facet_col_wrap`：当您需要生成动态数量的分面时，这真的非常有用。如果您知道用户将生成多个图表，那么在多少个图表之后，应该在生成的图表网格的下一行中显示下一个图表？答案应该是一个整数，并且
    Plotly Express 确保在此数字之后，图表在下一行中显示。这确保对于每一行，我们有一个最大数量的图表列。'
- en: '`facet_row_spacing` and `facet_col_spacing`: As their names suggest, you can
    control the spacing between rows and columns by setting these values in the range
    [0, 1] as a fraction of the total figure size, horizontally or vertically.'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`facet_row_spacing` 和 `facet_col_spacing`：正如它们的名称所示，您可以通过设置这些值来控制行和列之间的间距，范围为
    [0, 1]，作为总图大小的分数，水平或垂直。'
- en: 'Let''s run a quick example to make sure this is clear:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行一个快速示例以确保这一点清楚：
- en: 'Create a list of countries to filter by:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个国家列表以进行过滤：
- en: '[PRE30]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Modify the definition of `df` to filter the rows where `''Country Name''` is
    in `countries`. The `pandas` method `isin` can be used for this:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`df`的定义以过滤掉`'Country Name'`在`countries`中的行。可以使用`pandas`方法`isin`来实现此目的。
- en: '[PRE31]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Run `px.bar` with the simple addition of `facet_row=''Country Name''`:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`px.bar`，只需简单添加`facet_row='Country Name'`：
- en: '[PRE32]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Running this code produces the chart in *Figure 5.14*:'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 运行此代码将生成*图 5.14*中的图表：
- en: '![Figure 5.14 – Two bar charts generated using the facet_row parameter](img/B16780_05_0014.jpg)'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图 5.14 – 使用 facet_row 参数生成的两个条形图](img/B16780_05_0014.jpg)'
- en: Figure 5.14 – Two bar charts generated using the facet_row parameter
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.14 – 使用 facet_row 参数生成的两个条形图
- en: 'It''s very easy to extend our charts, as you can see, and we also get the sub-charts
    labeled for us with the correct country names. It still doesn''t look as good
    as we would like it to be. The *y* axis titles are overlapping, and you have to
    look hard at the vertical titles to see which sub-chart belongs to which country.
    So let''s improve things. Let''s first start by modifying the *y* axis titles,
    which can be done using the `labels` parameter, by providing a dictionary and
    mapping the default name to the new name that we want:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如您所见，扩展我们的图表非常容易，我们还为子图标注了正确的国家名称。虽然它已经不错了，但仍然不如我们希望的那样完美。*y*轴标题重叠，而且您必须仔细查看垂直标题才能知道哪个子图属于哪个国家。所以让我们来改进一下。首先，我们可以通过修改`labels`参数，提供一个字典，并将默认名称映射为我们想要的新名称，来修改*y*轴标题：
- en: '[PRE33]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'We can also help the user to quickly identify the charts by coloring the bars
    by country. This will make them distinctive and will also produce a legend with
    colored guides, making it even easier to distinguish the charts. Again this is
    done by simply providing an argument to the `color` parameter, which is basically
    a selection of the column name that we want to use for that:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还可以通过为条形图按国家着色来帮助用户快速识别图表。这样会使它们更具辨识度，同时生成带有颜色引导的图例，使图表更容易区分。同样，这只需通过为`color`参数提供一个参数来完成，这基本上是选择我们想用来标识的列名：
- en: '[PRE34]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Another helpful thing would be to add a dynamic title to the figure as a whole.
    We can display the full indicator name, and underneath that, we can show a comma-separated
    list of the selected countries. Plotly annotations support some HTML tags, and
    we will use the `<br>` tag to separate the indicator name and the country list
    as follows:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 另一个有用的功能是为整个图形添加动态标题。我们可以显示完整的指标名称，下面列出已选择的国家名，以逗号分隔。Plotly 注释支持一些 HTML 标签，我们将使用`<br>`标签来分隔指标名称和国家列表，如下所示：
- en: '[PRE35]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Having two countries on the chart is easy to read, but what if the users decide
    to select seven? As we did with the dynamic height of the Gini index horizontal
    bar chart, we also need to set a dynamic height for the faceted bar charts based
    on the number of selected countries. We will use the same technique, but with
    different values, because we are managing sub-plots, and not horizontal bars:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在图表上显示两个国家很容易阅读，但如果用户决定选择七个国家呢？正如我们在吉尼指数水平条形图的动态高度中所做的那样，我们还需要根据所选国家的数量，为分面条形图设置动态高度。我们将使用相同的技术，但使用不同的值，因为我们在管理子图，而不是水平条形图：
- en: '[PRE36]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The full updated code can be seen here:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完整的更新代码可以在这里看到：
- en: '[PRE37]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The final chart can be seen in *Figure 5.15*, shown for three countries:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最终的图表可以在*图 5.15*中看到，显示了三个国家：
- en: '![Figure 5.15 – Three bar charts generated using the facet_row parameter with
    customized options](img/B16780_05_0015.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.15 – 使用`facet_row`参数和自定义选项生成的三个条形图](img/B16780_05_0015.jpg)'
- en: Figure 5.15 – Three bar charts generated using the facet_row parameter with
    customized options
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.15 – 使用`facet_row`参数和自定义选项生成的三个条形图
- en: The figure and function have now been updated to produce faceted charts, based
    on the selected countries. The only remaining change that we have to make is to
    set the dropdown providing the options for this, to allow multiple selections.
    We will do this next, as well as taking a general view of our current dashboard,
    and see how to improve its layout and usability.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 图形和功能现已更新，生成基于所选国家的分面图表。我们要做的唯一剩余的更改是设置提供此选项的下拉框，以允许多选。我们接下来会做这个，并且对当前的仪表盘做一个整体查看，看看如何改善其布局和可用性。
- en: Exploring additional features of dropdowns
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索下拉框的其他功能
- en: 'The `Dropdown` component has an optional parameter, `multi`, that takes a Boolean
    argument, which we can set to `True` to allow this:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '`Dropdown`组件有一个可选参数`multi`，它接受一个布尔值作为参数，我们可以将其设置为`True`来允许这种操作：'
- en: '[PRE38]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: You can now make the changes and use the Gini country bar chart for as many
    countries as you like. The height of that figure on the page dynamically expands/collapses
    based on the dynamic height that we set, so we also don't need to worry about
    this aspect of the layout. The users will manage it themselves while interacting
    with the components. Let's now see whether it's easy for a newcomer to use those
    options.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以进行更改，并根据需要使用吉尼国家条形图。页面上该图形的高度会根据我们设置的动态高度动态扩展/收缩，因此我们也不需要担心布局的这个方面。用户在与组件互动时会自行管理。现在，让我们看看对新手来说，使用这些选项是否容易。
- en: Adding placeholder text to dropdowns
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向下拉框添加占位符文本
- en: 'If you look at the Gini Index section of the app for the first time, you will
    see two dropdowns that allow you to make a selection, as shown in *Figure 5.16*:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你第一次查看应用程序中的基尼指数部分，你将看到两个下拉框，允许你做出选择，如*图5.16*所示：
- en: '![Figure 5.16 – Dropdowns without any placeholder text](img/B16780_05_0016.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![图5.16 – 没有占位符文本的下拉框](img/B16780_05_0016.jpg)'
- en: Figure 5.16 – Dropdowns without any placeholder text
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.16 – 没有占位符文本的下拉框
- en: But select what exactly?
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，选择的到底是什么？
- en: The `Dropdown` component has an optional `placeholder` parameter, which can
    be very useful for users to know what exactly they are selecting.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '`Dropdown`组件有一个可选的`placeholder`参数，对于用户了解他们到底在选择什么非常有用。'
- en: 'We can easily update our placeholder text for both `Dropdown` components to
    make it clearer to users:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以轻松更新两个`Dropdown`组件的占位符文本，使其对用户更加清晰：
- en: '[PRE39]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'We can make it even more explicit by using the `Label` component from Dash
    Bootstrap Components, which, as the name suggests, provides a label. These labels
    can be placed above the dropdowns:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用Dash Bootstrap Components中的`Label`组件来使其更加明确，正如其名称所示，它提供了一个标签。这些标签可以放置在下拉框的上方：
- en: '[PRE40]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Adding the new options results in the updated messages as shown in *Figure
    5.17*:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 添加这些新选项后，更新后的消息如*图5.17*所示：
- en: '![Figure 5.17 – Dropdowns with placeholder text and labels](img/B16780_05_0017.jpg)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![图5.17 – 带有占位符文本和标签的下拉框](img/B16780_05_0017.jpg)'
- en: Figure 5.17 – Dropdowns with placeholder text and labels
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.17 – 带有占位符文本和标签的下拉框
- en: I think it looks easier to use this way. We are also making it clear which one
    accepts a single option, and which accepts multiple ones. We can also do the same
    for the Income Share Distribution section by adding a similar label, Country,
    and a placeholder, Select a country.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为这样看起来更易于使用。我们还清楚地表明了哪个下拉框接受单个选项，哪个接受多个选项。我们还可以通过添加类似的标签（例如“国家”）和占位符文本“选择一个国家”来为收入份额分布部分做相同的事情。
- en: Our app is now getting bigger, and provides many more options. It's good to
    take a general look and see how to improve the overall look and feel of the app,
    make it easier to use, and use a consistent theme across all figures.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序现在变得更大，提供了更多的选项。现在是时候从整体上查看一下，看看如何改善应用程序的外观和体验，使其更易于使用，并在所有图表中使用一致的主题。
- en: Modifying the app's theme
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改应用程序的主题
- en: 'We already saw how easy it is to change the theme of our app, which can be
    done by providing a list as an argument to the `external_style_sheets` parameter
    while instantiating the app. You can play around with the available ones, and
    we can set it to `COSMO`:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到如何轻松地更改我们应用程序的主题，这可以通过在实例化应用程序时将一个列表作为参数传递给`external_style_sheets`参数来完成。你可以尝试可用的主题，我们可以将其设置为`COSMO`：
- en: '[PRE41]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: This should modify several visual elements of our app.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该修改我们应用程序的几个视觉元素。
- en: 'Another thing we can consider doing is making our theme consistent with the
    theme of the charts that we are using. We can set the background color of the
    app to the same default color used in Plotly''s figures. Using the `style` parameter
    in the top-level `html.Div`, we can set the background color to match that of
    the default Plotly color:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 另一件我们可以考虑做的事情是使我们的主题与我们使用的图表主题保持一致。我们可以将应用程序的背景颜色设置为与Plotly图形中使用的默认颜色相同。通过在顶层的`html.Div`中使用`style`参数，我们可以将背景颜色设置为与默认的Plotly颜色一致：
- en: '[PRE42]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: One more change is needed to make this complete.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 还需要做一个小的更改，以完成这个修改。
- en: Plotly's `Figure` object contains two main areas, the "plot" and the "paper"
    areas. The plot area is the inner rectangle within the *x* and *y* axes. In all
    the charts that we produced, this is the area colored light blue (or gray, if
    you are reading the printed book).
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: Plotly的`Figure`对象包含两个主要区域，"plot"区域和"paper"区域。plot区域是位于*x*和*y*轴之间的内部矩形。在我们所有生成的图表中，这个区域的颜色是浅蓝色的（或者如果你正在阅读印刷版的书籍，它是灰色的）。
- en: 'The bigger rectangle enclosing the smaller one is the "paper" area. In the
    charts we have produced so far, it has been colored white. We can also set its
    color to the same color, making all background colors the same for our app. We
    simply have to add the following line to the callback functions that generate
    charts:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 包围较小矩形的大矩形是“纸张”区域。在我们到目前为止生成的所有图表中，它的颜色是白色的。我们也可以将其颜色设置为相同的颜色，这样就可以使我们应用程序的所有背景颜色一致。我们只需要在生成图表的回调函数中添加以下代码行：
- en: '[PRE43]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'If we run the app now, we will get some empty figures with a white background
    for the ones where we did not set default values. For those, we also need to create
    empty figures, but set the background colors to be consistent with the whole app
    theme. Doing this is very simple, as we did in [*Chapter 3*](B16780_03_Final_NM_ePub.xhtml#_idTextAnchor044),
    *Working with Plotly''s Figure Objects*. The `dcc.Graph` component has a `figure`
    attribute, to which we can add the empty figures with the desired background colors.
    These will be modified when users make a selection. Because we have a few instances
    of those, it''s better to create a function that can be used to create such figures
    whenever we want them. The following code achieves that:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在运行应用程序，我们将看到一些空白的图形，并且那些我们没有设置默认值的图形背景为白色。对于这些图形，我们还需要创建空白图形，但要确保它们的背景颜色与整个应用程序的主题一致。这样做非常简单，就像我们在[*第
    3 章*](B16780_03_Final_NM_ePub.xhtml#_idTextAnchor044)，“与 Plotly 图形对象一起工作”中所做的那样。`dcc.Graph`
    组件有一个 `figure` 属性，我们可以将具有所需背景颜色的空白图形添加到这个属性中。用户做出选择时，这些图形会被修改。由于我们有几个这样的图形实例，最好创建一个函数，用来在需要时创建这些图形。以下代码实现了这一点：
- en: '[PRE44]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Now, we can add the call to `make_empty_fig` where required, as you can see
    in the following example:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以在需要的地方添加对 `make_empty_fig` 的调用，正如下面的例子所示：
- en: '[PRE45]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: With this, we have chosen a new overall theme and made sure that we have consistent
    background colors across all the elements of our app.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些调整，我们选择了一个新的整体主题，并确保我们的应用程序中所有元素的背景颜色一致。
- en: Resizing components
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调整组件大小
- en: 'Another thing we need to handle is how the resizing of the browser window affects
    the size and placement of our different components. The figures are responsive
    by default, but we need to make some decisions for the figures that are placed
    side by side. In the Gini Index section, we have two such charts, placed in two
    `dbc.Col` components next to each other. All we have to do is set the desired
    size for those charts for large-, `lg`, as well as medium-, `md`, sized screens:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个我们需要处理的问题是浏览器窗口的大小调整如何影响我们不同组件的大小和位置。默认情况下，图形是响应式的，但我们需要为并排放置的图形做出一些决策。在基尼指数部分，我们有两个这样的图表，放置在两个
    `dbc.Col` 组件中，彼此并排。我们所要做的就是为这些图表设置所需的大小，适用于大屏幕（`lg`）和中等屏幕（`md`）：
- en: '[PRE46]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: When on a large screen, `lg`, the most likely scenario, each figure will have
    a size of 5 (out of 12), which is how the screen is split by Bootstrap. You can
    refer to the discussion on Bootstrap layouts, columns, and rows, as well as its
    grid system, in [*Chapter 1*](B16780_01_Final_NM_ePub.xhtml#_idTextAnchor015),
    *Overview of the Dash Ecosystem*, if you want a refresher. On medium-sized screens,
    `md`, the figures will expand to occupy 12 out of 12 columns, which means that
    they will take the full width of the screen at that size.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在大屏幕（`lg`）上，这是最常见的情况，每个图形将占据 5 个（12个中的 5）大小，这是 Bootstrap 分割屏幕的方式。如果您想复习相关知识，可以参考[*第
    1 章*](B16780_01_Final_NM_ePub.xhtml#_idTextAnchor015)，“Dash 生态系统概述”中关于 Bootstrap
    布局、列和行以及其网格系统的讨论。在中等屏幕（`md`）上，图形将扩展到占据 12 个中的 12 个列，这意味着在该尺寸下它们将占满整个屏幕的宽度。
- en: When we started learning about interactivity, we created a simple report at
    the top of our app. It displays the population of the selected country/region
    for the year 2010\. We can remove this component, as it is very limited in functionality
    and was mainly used for illustration purposes. This can simply be done by deleting
    the component, together with the output area underneath it, as well as the callback
    that handles it.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们开始学习交互性时，我们在应用程序的顶部创建了一个简单的报告。它显示了所选国家/地区 2010 年的人口。我们可以删除这个组件，因为它的功能非常有限，主要用于示范。删除它很简单，只需要删除该组件以及下面的输出区域，并删除处理它的回调函数。
- en: 'As a result of the work we have done in this chapter, you can see in *Figure
    5.18* what our app now looks like:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们在本章中所做的工作，您可以在*图 5.18*中看到我们应用程序的当前界面：
- en: '![Figure 5.18 – The final layout of the app](img/B16780_05_0018.jpg)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.18 – 应用程序的最终布局](img/B16780_05_0018.jpg)'
- en: Figure 5.18 – The final layout of the app
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.18 – 应用程序的最终布局
- en: I strongly encourage you to make these changes manually yourself, without looking
    at the code provided in the repository. I also encourage you to test out other
    layouts, play with different options, and generate lots of errors!
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 我强烈建议您自己手动进行这些更改，而不是查看代码库中的代码。我还鼓励您测试其他布局，尝试不同的选项，并生成大量的错误！
- en: Making changes all the time and being in control of your code requires a consistent
    naming convention of the components, callbacks, and variables. It also helps if
    you follow a certain logical flow in the organization of your components. We will
    be doing these things many times, and hopefully you will master these techniques
    along the way.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 不断地进行更改并控制你的代码需要一致的组件、回调函数和变量命名规范。如果你能遵循一定的逻辑流程来组织你的组件，那将会非常有帮助。我们会多次进行这些操作，希望你能在这个过程中掌握这些技巧。
- en: Our app is now looking better, easier to use, and can even be shared with others
    if you want to. We covered many things in this chapter, taking our app to a new
    level, so let's recap the things that we covered.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用现在看起来更好，使用起来更方便，如果你愿意，还可以与他人分享。在这一章中，我们涵盖了许多内容，将我们的应用提升到一个新层次，所以让我们回顾一下我们所涉及的内容。
- en: Summary
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We focused mainly on bar charts in this chapter. We also used `Dropdown` components
    in several ways. We saw the pros and cons of using horizontal and vertical orientation,
    and we actually implemented both in our app. We then analyzed the different ways
    in which multiple bar charts can be displayed together, and we implemented one
    showing the proportions of a total value. We then explored facets and saw how
    they enrich our figures and make them flexible and scalable. We also linked that
    to dropdowns, which allow multiple selections. After making sure that everything
    is working fine, we gave our app a facelift by choosing a new theme and making
    sure that all background colors are consistent. We also managed the layout for
    different screen sizes by setting different sizes for our figures for different
    screen sizes. A few helpful messages were added to make the app easier to use.
    Finally, we took a screenshot of the resulting app!
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们主要关注了条形图。我们还以多种方式使用了`Dropdown`组件。我们了解了使用横向和纵向布局的优缺点，并且在应用中实现了这两种布局。接着，我们分析了将多个条形图一起展示的不同方式，并实现了一个展示总值比例的图表。然后，我们探讨了面板（facets），看到了它们如何丰富我们的图表，并使它们更加灵活和可扩展。我们还将其与下拉框（dropdowns）结合，使得用户可以进行多重选择。确认一切正常工作后，我们通过选择一个新主题并确保所有背景颜色一致来为我们的应用进行外观更新。我们还通过为不同的屏幕尺寸设置不同的图表大小来管理不同屏幕大小下的布局。最后，我们为应用添加了一些有用的提示信息，以提升用户体验。最后，我们截取了结果应用的屏幕截图！
- en: In the next chapter, we will explore one of the most ubiquitous chart types
    – the scatter plot. We will also explore how to use it together with sliders that
    allow users to select and modify values or ranges of values.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨一种最常见的图表类型——散点图。我们还将学习如何将其与滑动条（sliders）结合使用，允许用户选择和修改数值或数值范围。
