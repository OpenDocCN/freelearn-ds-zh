- en: Hello Plotting World!
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你好，绘图世界！
- en: To learn programming, we often start with printing the "Hello world!" message.
    For graphical plots that contain all the elements from data, axes, labels, lines
    and ticks, how should we begin?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 学习编程时，我们通常从打印“Hello world！”消息开始。那么，对于包含数据、坐标轴、标签、线条和刻度的图形，我们应该如何开始呢？
- en: This chapter gives an overview of Matplotlib's functionalities and latest features.
    We will guide you through the setup of the Matplotlib plotting environment. You
    will learn to create a simple line graph, view, and save your figures. By the
    end of this chapter, you will be confident enough to start building your own plots
    and be ready to learn about customization and more advanced techniques in the
    coming sections.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章概述了Matplotlib的功能和最新特性。我们将引导你完成Matplotlib绘图环境的设置。你将学习如何创建一个简单的折线图、查看并保存你的图形。在本章结束时，你将足够自信开始创建自己的图表，并准备好在接下来的章节中学习自定义和更高级的技巧。
- en: Come and say "Hello!" to the world of plots!
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 来，向图表世界说“你好！”
- en: 'Here is a list of topics covered in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的主题包括：
- en: What is Matplotlib?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是Matplotlib？
- en: Plotting the first simple line graph
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绘制第一个简单的折线图
- en: Loading data into Matplotlib
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将数据加载到Matplotlib中
- en: Exporting the figure
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导出图形
- en: Hello Matplotlib!
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你好，Matplotlib！
- en: Welcome to the world of Matplotlib 2.0! Follow our simple example in the chapter
    and draw your first "Hello world" plot.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到Matplotlib 2.0的世界！按照本章中的简单示例，绘制你第一个“Hello world”图表。
- en: What is Matplotlib?
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是Matplotlib？
- en: Matplotlib is a versatile Python library that generates plots for data visualization.
    With the numerous plot types and refined styling options available, it works well
    for creating professional figures for presentations and scientific publications.
    Matplotlib provides a simple way to produce figures to suit different purposes,
    from slideshows, high-quality poster printing, and animations to web-based interactive
    plots. Besides typical 2D plots, basic 3D plotting is also supported.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Matplotlib是一个多功能的Python库，用于生成数据可视化图形。凭借丰富的图表类型和精致的样式选项，它非常适合创建专业的图表，用于演示和科学出版物。Matplotlib提供了一种简单的方法来生成适合不同目的的图形，从幻灯片、高清海报打印、动画到基于Web的交互式图表。除了典型的二维图表，Matplotlib还支持基本的三维绘图。
- en: On the development side, the hierarchical class structure and object-oriented
    plotting interface of Matplotlib make the plotting process intuitive and systematic.
    While Matplotlib provides a native graphical user interface for real-time interaction,
    it can also be easily integrated into popular IPython-based interactive development
    environments, such as Jupyter notebook and PyCharm.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发方面，Matplotlib的层次化类结构和面向对象的绘图接口使绘图过程直观且系统化。虽然Matplotlib提供了一个用于实时交互的本地图形用户界面，但它也可以轻松集成到流行的基于IPython的交互式开发环境中，如Jupyter
    Notebook和PyCharm。
- en: What's new in Matplotlib 2.0?
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Matplotlib 2.0的新特性
- en: Matplotlib 2.0 features many improvements, including the appearance of default
    styles, image support, and text rendering speed. We have selected a number of
    important changes to highlight later. The details of all new changes can be found
    on the documentation site at [http://matplotlib.org/devdocs/users/whats_new.html](http://matplotlib.org/devdocs/users/whats_new.html).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Matplotlib 2.0引入了许多改进，包括默认样式的外观、图像支持和文本渲染速度。我们选取了一些重要的变化稍后会详细介绍。所有新变化的详细信息可以在文档网站上找到：[http://matplotlib.org/devdocs/users/whats_new.html](http://matplotlib.org/devdocs/users/whats_new.html)。
- en: If you are already using previous versions of Matplotlib, you may want to pay
    more attention to this section to update your coding habits. If you are totally
    new to Matplotlib or even Python, you may jump ahead to start using Matplotlib
    first and revisit here later.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经在使用Matplotlib的旧版本，可能需要更加关注这一部分来更新你的编码习惯。如果你完全是Matplotlib甚至Python的新手，可以直接跳过这部分，先开始使用Matplotlib，稍后再回来查看。
- en: Changes to the default style
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 默认样式的更改
- en: The most prominent change to Matplotlib in version 2.0 is to the default style.
    You can find the list of changes here: [http://matplotlib.org/devdocs/users/dflt_style_changes.html](http://matplotlib.org/devdocs/users/dflt_style_changes.html).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Matplotlib 2.0版本最显著的变化是默认样式的改变。你可以在这里查看更改的详细列表：[http://matplotlib.org/devdocs/users/dflt_style_changes.html](http://matplotlib.org/devdocs/users/dflt_style_changes.html)。
- en: Color cycle
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 颜色循环
- en: For quick plotting without having to set colors for each data series, Matplotlib
    uses a list of colors called the default property cycle, whereby each series is
    assigned one of the default colors in the cycle. In Matplotlib 2.0, the list has
    been changed from the original red, green, blue, cyan, magenta, yellow, and black,
    noted as `['b', 'g', 'r', 'c', 'm', 'y', 'k']`, to the current category10 color
    palette introduced by the Tableau software. As implied by the name, the new palette
    has 10 distinct colors suitable for categorical display. The list can be accessed
    by importing Matplotlib and calling `matplotlib.rcParams['axes.prop_cycle']` in
    Python.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了快速绘图而不必为每个数据系列单独设置颜色，Matplotlib使用一个称为默认属性循环的颜色列表，每个系列将被分配循环中的一个默认颜色。在Matplotlib
    2.0中，该列表已经从原来的红色、绿色、蓝色、青色、品红色、黄色和黑色（记作`['b', 'g', 'r', 'c', 'm', 'y', 'k']`）变更为Tableau软件引入的当前category10色板。顾名思义，新的色板有10种不同的颜色，适用于分类显示。通过导入Matplotlib并在Python中调用`matplotlib.rcParams['axes.prop_cycle']`，可以访问该列表。
- en: Colormap
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 色图
- en: 'Colormaps are useful in showing gradient. The yellow to blue "viridis" colormap
    is now the default one in Matplotlib 2.0\. This perceptually uniform colormap
    better represents the transition of numerical values visually than the classic
    “jet” scheme. This is a comparison between two colormaps:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 色图对于展示渐变非常有用。黄色到蓝色的“viridis”色图现在是Matplotlib 2.0中的默认色图。这个感知统一的色图比经典的“jet”色图更好地展示了数值的视觉过渡。下面是两种色图的对比：
- en: '![](img/7e118deb-0ae4-458f-a165-452ca08742f4.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7e118deb-0ae4-458f-a165-452ca08742f4.png)'
- en: 'Besides defaulting to a perceptually continuous colormap, qualitative colormaps
    are now available for grouping values into categories:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 除了默认的感知连续色图外，现在还可以使用定性色图将值分组为不同类别：
- en: '![](img/974c7db2-b99c-427b-9249-57b27fd74dbe.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/974c7db2-b99c-427b-9249-57b27fd74dbe.png)'
- en: Scatter plot
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 散点图
- en: 'Points in a scatter plot have a larger default size and no longer have a black
    edge, giving clearer visuals. Different colors in the default color cycle will
    be used for each data series if the color is not specified:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 散点图中的点默认尺寸更大，且不再有黑色边缘，从而提供更清晰的视觉效果。如果没有指定颜色，则每个数据系列将使用默认颜色循环中的不同颜色：
- en: '![](img/9e3ccf71-b4a0-411a-afce-2195a906740e.png)       ![](img/a62c93bb-b1bb-4b62-aa31-cdafa83ef83c.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9e3ccf71-b4a0-411a-afce-2195a906740e.png)       ![](img/a62c93bb-b1bb-4b62-aa31-cdafa83ef83c.png)'
- en: Legend
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图例
- en: 'While previous versions set the legend in the upper-right corner, Matplotlib
    2.0 sets the legend location as "best" by default. It automatically avoids overlapping
    of the legend with the data. The legend box also has rounded corners, lighter
    edges, and a partially transparent background to keep the focus of the readers
    on the data. The curve of square numbers in the classic and current default styles
    demonstrates the case:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然早期版本将图例设置在右上角，但Matplotlib 2.0默认将图例位置设置为“最佳”。它自动避免图例与数据重叠。图例框还具有圆角、较浅的边缘和部分透明的背景，以便将读者的焦点保持在数据上。经典和当前默认样式中的平方数曲线展示了这一情况：
- en: '![](img/3675c092-b979-4b32-b63e-cc6413b1c7db.png)     ![](img/85585019-81fe-44ca-9a90-0b49c96e076a.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3675c092-b979-4b32-b63e-cc6413b1c7db.png)       ![](img/85585019-81fe-44ca-9a90-0b49c96e076a.png)'
- en: Line style
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 线条样式
- en: 'Dash patterns in line styles can now scale with the line width to display bolder
    dashes for clarity:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 线条样式中的虚线模式现在可以根据线条宽度进行缩放，以显示更粗的虚线以增加清晰度：
- en: '![](img/b534f55a-6289-4c2b-81e5-a41bb8d802d6.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b534f55a-6289-4c2b-81e5-a41bb8d802d6.png)'
- en: From the documentation (https://matplotlib.org/users/dflt_style_changes.html#plot)
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 来自文档（https://matplotlib.org/users/dflt_style_changes.html#plot）
- en: Patch edges and color
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 填充边缘和颜色
- en: 'Just like the dots in the scatter plot shown before, most filled elements no
    longer have a black edge by default, making the graphics less cluttered:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 就像前面散点图中的点一样，大多数填充元素默认不再有黑色边缘，使图形看起来更简洁：
- en: '![](img/50a1086b-7f84-419f-9c9c-2dd1c8b14466.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/50a1086b-7f84-419f-9c9c-2dd1c8b14466.png)'
- en: Fonts
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字体
- en: The default font is now changed from "Bitstream Vera Sans" to "DejaVu Sans".
    The current font supports additional international, math, and symbol characters,
    including emojis.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 默认字体已经从“Bitstream Vera Sans”更改为“DejaVu Sans”。当前的字体支持更多的国际字符、数学符号和符号字符，包括表情符号。
- en: Improved functionality or performance
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 改进的功能或性能
- en: Matplotlib 2.0 presents new features that improve the user experience, including
    speed and output quality as well as resource usage.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Matplotlib 2.0展示了改善用户体验的新特性，包括速度、输出质量和资源使用的优化。
- en: Improved color conversion API and RGBA support
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 改进的颜色转换API和RGBA支持
- en: The alpha channel, which specifies the degree of transparency, is now fully
    supported in Matplotlib 2.0.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Alpha 通道，现在完全支持 Matplotlib 2.0，用于指定透明度。
- en: Improved image support
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 改进的图像支持
- en: Matplotlib 2.0 now resamples images with less memory and less data type conversion.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Matplotlib 2.0 现在使用更少的内存和更少的数据类型转换重新采样图像。
- en: Faster text rendering
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更快的文本渲染
- en: It is claimed that the speed of text rendering by the Agg backend is increased
    by 20%. We will discuss more on backends in [Chapter 9](20a0f6d7-04b4-4b00-b92c-89841cb2042f.xhtml),
    *Adding Interactivity and Animating Plots*.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 据称，Agg 后端的文本渲染速度提高了 20%。我们将在[第 9 章](20a0f6d7-04b4-4b00-b92c-89841cb2042f.xhtml)中进一步讨论后端内容，*添加交互性和动画图表*。
- en: Change in the default animation codec
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 默认动画编解码器的更改
- en: To generate a video output of animated plots, a more efficient codec, H.264,
    is now used by default in place of MPEG-4\. As H.264 has a higher compression
    rate, the smaller output file size permits longer video record time and reduces
    the time and network data needed to load them. Real-time playback of H.264 videos
    is generally more fluent and in better quality than those encoded in MPEG-4.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 为了生成动画图表的视频输出，现在默认使用更高效的编解码器 H.264 代替 MPEG-4。由于 H.264 具有更高的压缩率，较小的输出文件大小允许更长的视频记录时间，并减少加载它们所需的时间和网络数据。H.264
    视频的实时播放通常比 MPEG-4 编码的视频更加流畅且质量更高。
- en: Changes in settings
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置的更改
- en: Some of the settings are changed in Matplotlib v2.0 for convenience or consistency,
    or to avoid unexpected results.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便性、一致性或避免意外结果，Matplotlib v2.0 中更改了一些设置。
- en: New configuration parameters (rcParams)
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 新的配置参数（rcParams）
- en: New parameters are added, such as `date.autoformatter.year` for date time string
    formatting.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 新增了一些参数，如 `date.autoformatter.year` 用于日期时间字符串格式化。
- en: Style parameter blacklist
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 样式参数黑名单
- en: 'Style files are no longer allowed to configure settings unrelated to the style
    to prevent unexpected consequences. These parameters include the following:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 不再允许样式文件配置与样式无关的设置，以防止意外后果。这些参数包括以下内容：
- en: '[PRE0]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Change in Axes property keywords
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Axes 属性关键字的更改
- en: The Axes properties `axisbg` and `axis_bgcolor` are replaced by `facecolor`
    to keep the keywords consistent.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Axes 属性 `axisbg` 和 `axis_bgcolor` 被 `facecolor` 替代，以保持关键字一致性。
- en: Plotting our first graph
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绘制我们的第一个图表
- en: We will start with a simple line graph of a curve of squares, that is, *y =
    x²*.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从一个简单的平方曲线的线性图开始，即 *y = x²*。
- en: Loading data for plotting
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加载数据以进行绘图
- en: To visualize data, we should start with "having" some data. While we assume
    you have some nice data on hand to show, we will briefly show you how to load
    it in Python for plotting.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 为了可视化数据，我们应该从“拥有”一些数据开始。虽然我们假设你手头有一些不错的数据可以展示，但我们将简要展示如何在 Python 中加载数据以进行绘图。
- en: Data structures
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据结构
- en: There are several common data structures we will keep coming across.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个常见的数据结构我们将不断遇到。
- en: List
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列表
- en: 'List is a basic Python data type for storing a collection of values. A list
    is created by putting element values inside a square bracket. To reuse our list,
    we can give it a name and store it like this:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 列表是 Python 中用于存储一组值的基本数据类型。列表是通过将元素值放入方括号中创建的。为了重用我们的列表，我们可以给它起个名字并像这样存储它：
- en: '[PRE1]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'When we want to get a series in a greater range, for instance, to get more
    data points for our curve of squares to make it smoother, we may use the Python
    `range()` function:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们希望获取更大范围的系列时，例如，为了让平方曲线更平滑，获取更多的数据点，我们可以使用 Python 的 `range()` 函数：
- en: '[PRE2]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This command will give us all even numbers from 2 to 100 (both inclusive) and
    store it in a list named `evens`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将给出从 2 到 100（包含）的所有偶数，并将其存储在名为 `evens` 的列表中。
- en: Numpy array
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Numpy 数组
- en: 'Very often, we deal with more complex data. If you need a matrix with multiple
    columns or want to perform mathematical operations over all elements in a collection,
    then numpy is for you:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 很多时候，我们处理的是更复杂的数据。如果你需要一个包含多个列的矩阵，或者想对集合中的所有元素进行数学操作，那么 numpy 就是你的选择：
- en: '[PRE3]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We abbreviated `numpy` to `np` by convention, keeping our code succinct.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们根据约定将`numpy`缩写为`np`，以保持代码简洁。
- en: '`np.array()` converts a supported data type, a list in this case, into a Numpy
    array. To produce a numpy array from our `evens` list, we do the following:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.array()` 将支持的数据类型（在此例中是列表）转换为 Numpy 数组。为了从我们的 `evens` 列表中生成一个 numpy 数组，我们这样做：'
- en: '[PRE4]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: pandas dataframe
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pandas 数据框
- en: A pandas dataframe is useful when we have some non-numerical labels or values
    in our matrix. It does not require homogeneous data, unlike Numpy. Columns can
    be named. There are also functions such as `melt()` and `pivot_table()` that add
    convenience in reshaping the table to facilitate analysis and plotting.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在矩阵中有一些非数值标签或值时，pandas 数据框非常有用。它不像 Numpy 那样要求数据类型统一。列可以命名。还有一些函数，比如 `melt()`
    和 `pivot_table()`，它们在重塑表格以便分析和绘图时提供了便利。
- en: 'To convert a list into a pandas dataframe, we do the following:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 要将一个列表转换为 pandas 数据框，我们可以做如下操作：
- en: '[PRE5]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You can also convert a numpy array into a pandas dataframe.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以将一个 numpy 数组转换为 pandas 数据框。
- en: Loading data from files
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从文件加载数据
- en: While all this gives you a refresher of the data structures we will be working
    on, in real life, instead of inventing data, we read it from data sources. A tab-delimited
    plaintext file is the simplest and most common type of data input. Imagine we
    have a file called `evens.txt` containing the aforementioned even numbers. There
    are two columns. The first column only records unnecessary information. We want
    to load the data in the second column.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这一切能让你复习我们将要处理的数据结构，但在现实生活中，我们不是发明数据，而是从数据源读取它。制表符分隔的纯文本文件是最简单且最常见的数据输入类型。假设我们有一个名为
    `evens.txt` 的文件，里面包含了前面提到的偶数。该文件有两列。第一列只记录不必要的信息，我们想要加载第二列的数据。
- en: 'Here is what the dummy text file looks like:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是假文本文件的样子：
- en: '![](img/c323148c-fbf8-4d28-8115-082b7e1c482e.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c323148c-fbf8-4d28-8115-082b7e1c482e.png)'
- en: The basic Python way
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本的 Python 方式
- en: 'We can initialize an empty list, read the file line by line, split each line,
    and append the second element to our list:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以初始化一个空列表，逐行读取文件，拆分每一行，并将第二个元素附加到我们的列表中：
- en: '[PRE6]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Of course, you can also do this in a one-liner:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你也可以使用一行代码来实现：
- en: '`evens = [int(x.split()[1]) for x in open(''evens.txt'').readlines()]`'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`evens = [int(x.split()[1]) for x in open(''evens.txt'').readlines()]`'
- en: 'We are just trying to go step by step, following the Zen of Python: simple
    is better than complex.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只是尝试一步步走，遵循 Python 的 Zen（禅哲学）：简单优于复杂。
- en: The Numpy way
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Numpy 方式
- en: It is simple when we have a file with only two columns, and only one column
    to read, but it can get more tedious when we have an extended table containing
    thousands of columns and rows and we want to convert them into a Numpy matrix
    later.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们有一个只有两列的文件，并且只需要读取一列时，这非常简单，但当我们拥有一个包含成千上万列和行的扩展表格，并且想要将其转换为 Numpy 矩阵时，它可能会变得更加繁琐。
- en: 'Numpy provides a standard one-liner solution:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Numpy 提供了一个标准的一行代码解决方案：
- en: '[PRE7]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The first parameter is the path of the data file. The `delimiter` parameter
    specifies the string used to separate values, which is a tab here. Because `numpy.loadtxt()`
    by default separate values separated by any whitespace into columns by default,
    this argument can be omitted here. We have set it for demonstration.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数是数据文件的路径。`delimiter` 参数指定用于分隔值的字符串，这里是一个制表符。因为 `numpy.loadtxt()` 默认情况下将任何空白符分隔的值拆分成列，所以这个参数在这里可以省略。我们为演示设置了它。
- en: For `usecols` and `dtype` that specify which columns to read and what data type
    each column corresponds to, you may pass a single value to each, or a sequence
    (such as list) for reading multiple columns.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `usecols` 和 `dtype`，它们分别指定要读取哪些列以及每列对应的数据类型，你可以传递单个值，也可以传递一个序列（例如列表）来读取多列。
- en: Numpy also by default skips lines starting with `#`, which typically marks comment
    or header lines. You may change this behavior by setting the `comment` parameter.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Numpy 默认情况下还会跳过以 `#` 开头的行，这通常表示注释或标题行。你可以通过设置 `comment` 参数来更改这种行为。
- en: The pandas way
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pandas 方式
- en: 'Similar to Numpy, pandas offers an easy way to load text files into a pandas
    dataframe:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于 Numpy，pandas 提供了一种简单的方法将文本文件加载到 pandas 数据框中：
- en: '[PRE8]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Here the separation can be denoted by either `sep` or `delimiter`, which is
    set as comma `,` by default (**CSV** stands for **comma-separated values**).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的分隔符可以用 `sep` 或 `delimiter` 来表示，默认情况下它是逗号 `,`（**CSV** 代表 **逗号分隔值**）。
- en: There is a long list of less commonly used options available as to determine
    how different data formats, data types, and errors should be handled. You may
    refer to the documentation at [http://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_csv.html](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_csv.html).
    Besides flat CSV files, Pandas also has other built-in functions for reading other
    common data formats, such as Excel, JSON, HTML, HDF5, SQL, and Google BigQuery.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 关于如何处理不同的数据格式、数据类型和错误，有一长串不太常用的选项可供选择。你可以参考文档：[http://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_csv.html](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_csv.html)。除了平面
    CSV 文件外，Pandas 还提供了读取其他常见数据格式的内置函数，例如 Excel、JSON、HTML、HDF5、SQL 和 Google BigQuery。
- en: To stay focused on data visualization, we will not dig deep into the methods
    of data cleaning in this book, but this is a survival skill set very helpful in
    data science. If interested, you can check out resources on data handling with
    Python.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持对数据可视化的关注，本书将不深入探讨数据清洗的方法，但这对于数据科学来说是一个非常有用的生存技能。如果你感兴趣，可以查阅关于使用 Python
    进行数据处理的相关资源。
- en: Importing the Matplotlib pyplot module
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导入 Matplotlib 的 pyplot 模块
- en: The Matplotlib package includes many modules, including artist that controls
    the aesthetics, and rcParams for setting default values. The Pyplot module is
    the plotting interface we will mostly deal with, which creates plots of data in
    an object-oriented manner.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Matplotlib 包包含许多模块，其中包括控制美学的 artist 模块和用于设置默认值的 rcParams 模块。Pyplot 模块是我们主要处理的绘图接口，它以面向对象的方式创建数据图表。
- en: 'By convention, we use the `plt` abbreviation when importing:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 按惯例，我们在导入时使用`plt`这个缩写：
- en: '[PRE9]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Don't forget to run the Jupyter Notebook cell magic `%matplotlib inline` to
    embed your figure in the output.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 别忘了运行 Jupyter Notebook 的单元格魔法 `%matplotlib inline`，以便将图形嵌入输出中。
- en: '**Don''t use the pylab module!**'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '**不要使用 pylab 模块！**'
- en: The use of the pylab module is now discouraged, and generally replaced by the
    **object-oriented** (**OO**) interface. While pylab provides some convenience
    by importing `matplotlib.pyplot` and `numpy` under a single namespace. Many pylab
    examples are still found online today, but it is much better to call the `Matplotlib.pyplot`
    and `numpy` modules separately.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在不推荐使用 pylab 模块，通常被 **面向对象**（**OO**）接口所替代。虽然 pylab 通过在一个命名空间下导入`matplotlib.pyplot`和`numpy`提供了一些便利，但现在许多在线的
    pylab 示例仍然存在，但最好分别调用 `Matplotlib.pyplot` 和 `numpy` 模块。
- en: Plotting a curve
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绘制曲线
- en: 'Plotting a line graph of the list can be as simple as:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 绘制列表的折线图可以简单到：
- en: '[PRE10]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![](img/7ae2ad70-b0dc-4501-bd70-3a9b15e70c90.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7ae2ad70-b0dc-4501-bd70-3a9b15e70c90.png)'
- en: When only one parameter is specified, Pyplot assumes the data we input is on
    the y-axis and chooses a scale for the x-axis automatically.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 当只指定一个参数时，Pyplot 假定我们输入的数据位于 y 轴，并自动选择 x 轴的刻度。
- en: 'To plot a graph, call `plt.plot(x,y)` where `x` and `y` are the *x* coordinates
    and *y* coordinates of data points:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 要绘制图表，调用`plt.plot(x,y)`，其中`x`和`y`是数据点的 *x* 坐标和 *y* 坐标：
- en: '[PRE11]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To label the curve with a legend, we add the label information in the `plot`
    function:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 要为曲线添加图例标签，我们在 `plot` 函数中添加标签信息：
- en: '[PRE12]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Viewing the figure
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看图形
- en: Now, don’t forget to call `plt.show()` to display the figure!
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，别忘了调用`plt.show()`来显示图形！
- en: '![](img/8180536c-5413-43bd-b6b9-437c2f1ee287.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8180536c-5413-43bd-b6b9-437c2f1ee287.png)'
- en: Saving the figure
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保存图形
- en: Now we have drawn our first figure. Let's save our work! Surely we don't want
    to resort to screen capture. Here is a simple way to do it by calling `pyplot.savefig()`.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经绘制了第一个图形。让我们保存我们的工作！当然，我们不想依赖截图。这里有一个简单的方法，通过调用 `pyplot.savefig()` 来完成。
- en: If you want to both view the image on screen and save it in file, remember to
    call `pyplot.savefig()` before `pyplot.show()` to make sure you don't save a blank
    canvas.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你既想在屏幕上查看图像，又想将其保存在文件中，记得在调用 `pyplot.show()` 之前先调用 `pyplot.savefig()`，以确保你不会保存一个空白画布。
- en: Setting the output format
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置输出格式
- en: 'The `pyplot.savefig()` function takes the path of the output file and automatically
    outputs it in the specified extension. For example, `pyplot.savefig(''output.png'')`
    will generate a PNG image. If no extension is specified, an SVG image will be
    generated by default. If the specified format is unsupported, let''s say `.doc`,
    a `ValueError` Python exception will be thrown:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`pyplot.savefig()` 函数接受输出文件的路径，并自动以指定的扩展名输出。例如，`pyplot.savefig(''output.png'')`
    会生成一个 PNG 图像。如果没有指定扩展名，默认会生成 SVG 图像。如果指定的格式不受支持，比如`.doc`，会抛出一个 `ValueError` Python
    异常：'
- en: '![](img/584d4c63-4c77-4c65-bff0-739b2bac3321.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](img/584d4c63-4c77-4c65-bff0-739b2bac3321.png)'
- en: PNG (Portable Network Graphics)
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PNG（便携式网络图形）
- en: Compared to JPEG, another common image file format, PNG, has the advantage of
    allowing a transparent background. PNG is widely supported by most image viewers
    and handlers.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 与另一种常见的图像文件格式JPEG相比，PNG的优势在于允许透明背景。PNG被大多数图像查看器和处理程序广泛支持。
- en: PDF (Portable Document Format)
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PDF（便携式文档格式）
- en: A PDF is a standard document format, which you don't have to worry about the
    availability of readers. However, most Office software do not support the import
    of PDF as image.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: PDF是一种标准的文档格式，你不必担心阅读器的可用性。然而，大多数办公软件不支持将PDF作为图像导入。
- en: SVG (Scalable Vector Graphics)
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SVG（可伸缩矢量图形）
- en: SVG is a vector graphics format that can be scaled without losing details. Hence,
    better quality can be achieved with a smaller file size. It goes well on the web
    with HTML5\. It may not be supported by some primitive image viewers.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: SVG是一种矢量图形格式，可以在不失去细节的情况下进行缩放。因此，可以在较小的文件大小下获得更好的质量。它与HTML5兼容，适合用于网页。但某些基础图像查看器可能不支持它。
- en: Post (Postscript)
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Post（Postscript）
- en: Postscript is a page description language for electronic publishing. It is useful
    for batch processing images to publish.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: Postscript是一种用于电子出版的页面描述语言。它对于批量处理图像以进行出版非常有用。
- en: The **Gimp Drawing Kit** (**GDK**) raster graphics rendering is deprecated in
    2.0, which means image formats such as JPG and TIFF are no longer supported with
    the default backend. We will discuss the backends later in more detail.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '**Gimp绘图工具包**（**GDK**）的光栅图形渲染在2.0版本中已被弃用，这意味着像JPG和TIFF这样的图像格式不再由默认后端支持。我们将在后面更详细地讨论后端。'
- en: Adjusting the resolution
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调整分辨率
- en: Resolution measures the details recorded in an image. It determines how much
    you can enlarge your image without losing details. An image with higher resolution
    retains high quality at larger dimensions but also has a bigger file size.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 分辨率衡量图像记录的细节。它决定了你可以在不失去细节的情况下放大图像的程度。具有较高分辨率的图像在较大尺寸下保持较高质量，但文件大小也会更大。
- en: 'Depending on the purpose, you may want to output your figures at different
    resolutions. Resolution is measured as the number of color pixel **dot per inch** (**dpi**).
    You may adjust the resolution of a figure output by specifying the `dpi` parameter
    in the `pyplot.savefig()` function, for example, by:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 根据用途，你可能希望以不同的分辨率输出图形。分辨率是通过每英寸的颜色像素**点数（dpi）**来衡量的。你可以通过在`pyplot.savefig()`函数中指定`dpi`参数来调整输出图形的分辨率，例如：
- en: '[PRE13]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'While a higher resolution delivers better image quality, it also means a larger
    file size and demands more computer resources. Here are some references for how
    high should you set your image resolution:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然较高的分辨率能提供更好的图像质量，但它也意味着更大的文件大小，并且需要更多的计算机资源。以下是一些关于你应设置图像分辨率多高的参考：
- en: 'Slideshow presentations: 96 dpi+'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 幻灯片演示：96 dpi+
- en: 'Here are some suggestions by Microsoft for graphics resolution for Powerpoint
    presentations for different screen sizes: [https://support.microsoft.com/en-us/help/827745/how-to-change-the-export-resolution-of-a-powerpoint-slide](https://support.microsoft.com/en-us/help/827745/how-to-change-the-export-resolution-of-a-powerpoint-slide):'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是微软针对不同屏幕大小的PowerPoint演示文稿图形分辨率建议：[https://support.microsoft.com/en-us/help/827745/how-to-change-the-export-resolution-of-a-powerpoint-slide](https://support.microsoft.com/en-us/help/827745/how-to-change-the-export-resolution-of-a-powerpoint-slide)：
- en: '| **Screen height (pixel)** | **Resolution (dpi)** |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| **屏幕高度（像素）** | **分辨率（dpi）** |'
- en: '| 720 | 96 (default) |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| 720 | 96（默认） |'
- en: '| 750 | 100 |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| 750 | 100 |'
- en: '| 1125 | 150 |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| 1125 | 150 |'
- en: '| 1500 | 200 |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| 1500 | 200 |'
- en: '| 1875 | 250 |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| 1875 | 250 |'
- en: '| 2250 | 300 |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| 2250 | 300 |'
- en: 'Poster presentation: 300 dpi+'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 海报展示：300 dpi+
- en: 'Web: 72 dpi+ (SVG that can scale responsively is recommended)'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络：72 dpi+（推荐使用可以响应式缩放的SVG）
- en: Summary
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned to use Matplotlib to draw a simple line graph.
    We set up the environment, imported data, and output the figure as an image in
    different formats. In the next chapter, you will learn how to visualize online
    data.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何使用Matplotlib绘制一个简单的折线图。我们设置了环境，导入了数据，并将图形输出为不同格式的图像。在下一章，你将学习如何可视化在线数据。
