- en: Machine Learning Using Jupyter
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Jupyter进行机器学习
- en: In this chapter, we will use several algorithms for machine learning under Jupyter.
    We have coding in both R and Python to portray the breadth of options available
    to the Jupyter developer.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用几种机器学习算法在Jupyter下进行演示。我们在R和Python中编写代码，以展示Jupyter开发者可用的各种选择。
- en: Naive Bayes
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 朴素贝叶斯
- en: Naive Bayes is an algorithm that uses probability to classify the data according
    to Bayes theorem for strong independence of the features. Bayes theorem estimates
    the probability of an event based on prior conditions. So, overall, we use a set
    of feature values to estimate a value assuming the same conditions hold true when
    those features have similar values.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 朴素贝叶斯是一种使用概率通过贝叶斯定理对数据进行分类的算法，前提是特征之间有较强的独立性。贝叶斯定理基于先验条件估计事件的概率。因此，整体上，我们使用一组特征值来估算一个值，假设在这些特征具有相似值时，条件保持一致。
- en: Naive Bayes using R
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用R的朴素贝叶斯
- en: Our first implementation of naive Bayes uses the R programming language. The
    R implementation of the algorithm is encoded in the `e1071` library. `e1071` appears
    to have been the department identifier at the school where the package was developed.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一个朴素贝叶斯实现使用了R编程语言。该算法在R中的实现被编码在`e1071`库中。`e1071`似乎是该包开发时所在学校的部门标识符。
- en: 'We first install the package, and load the library:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先安装包，并加载库：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Some notes on these steps:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这些步骤的一些备注：
- en: The `install.packages` call is commented out as we don't want to run this every
    time we run the script.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`install.packages`调用被注释掉了，因为我们不想每次运行脚本时都运行它。'
- en: '`e1071` is the naive Bayes algorithm package.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`e1071`是朴素贝叶斯算法包。'
- en: The `caret` package contains a method to partition a dataset randomly.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`caret`包包含一个方法，用于随机分割数据集。'
- en: We set the `seed` so as to be able to reproduce the results.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们设置了`seed`，以便能够重现结果。
- en: We are using the `iris` dataset for this example. Specifically, using the other
    `iris` factors to predict the species.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们在这个示例中使用的是`iris`数据集。具体来说，使用其他`iris`特征来预测物种。
- en: 'Invocations of the package look as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 包的调用方式如下：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Where the parameters to `naiveBayes` are:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`naiveBayes`的参数如下：'
- en: Formula of the form *y ~ x1 + x2 ....*-attempt to predict *y* based on *x1,
    x2, ...*
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公式形式为 *y ~ x1 + x2 ....* ——尝试根据*x1, x2, ...*预测*y*。
- en: Data frame
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据框
- en: Optional Laplace smoothing
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可选的拉普拉斯平滑
- en: Optional subset of the data based on a Boolean filter
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于布尔过滤器的可选数据子集
- en: Optional function for handling `na` values (`na.action`)—default is to pass
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可选的处理`na`值的函数（`na.action`）——默认是通过
- en: 'Once we have our model established we can then attempt a prediction using the
    `predict()` function with parameters for:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们建立了模型，就可以使用`predict()`函数并传入参数来尝试预测：
- en: Model (from the preceding call)
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型（来自前面的调用）
- en: Data frame
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据框
- en: Type whether the data is class or raw (conditionals)
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入数据是类别数据还是原始数据（条件）
- en: 'So, we continue with the `iris` example with:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们继续使用`iris`示例：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Where we split the data into 75% training and 25% for testing, as you can see
    by the number of rows in each data frame.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将数据拆分为75%的训练集和25%的测试集，从每个数据框中的行数可以看到这一点。
- en: 'Next, we construct out model—we are trying to predict `Species` from the other
    features/columns of the data frame:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们构建模型——我们正在尝试根据数据框的其他特征/列预测`Species`：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](img/51a11daa-cfed-4f6c-8573-14f8c4a9d173.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/51a11daa-cfed-4f6c-8573-14f8c4a9d173.png)'
- en: It is interesting that the Apriori assumption is an even split between the possibilities.
    Sepal length, width, and petal length have strong influences on species.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，Apriori假设假设可能性之间是均等的。花萼长度、宽度和花瓣长度对物种有很强的影响。
- en: 'We make our prediction based on the model against the testing data:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们基于模型对测试数据进行预测：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, we need to measure the accuracy of the model. Normally we could use a
    scatter diagram using `x` from actual and `y` from predicted, but we have categorical
    data. We could build a vector of actual versus predicted and compare the two in
    a new results data frame:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要衡量模型的准确性。通常我们可以使用散点图，`x`来自实际值，`y`来自预测值，但由于我们有分类数据，我们可以建立一个实际值与预测值的向量，并在一个新的结果数据框中比较这两个向量：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We end up with a model providing 97% (`35`/`36`) accuracy. This is a very good
    performance level, almost within the statistical boundary of excellent (+/- 2%).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 最终我们得到了一个提供97%准确率的模型（`35`/`36`）。这是一个非常好的性能水平，几乎处于优秀的统计边界内（+/- 2%）。
- en: Naive Bayes using Python
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Python的朴素贝叶斯
- en: 'The Python implementation of the algorithm is in the `sklearn` library. The
    whole process is much simpler. First, load the `iris` dataset:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 算法的 Python 实现位于 `sklearn` 库中。整个过程要简单得多。首先，加载 `iris` 数据集：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Call upon the built-in Gaussian naive Bayes estimator for a model and prediction
    in one step:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 调用内建的高斯朴素贝叶斯估算器来一步完成模型和预测：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Determine the accuracy of the model:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 确定模型的准确度：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We end up with very similar results for estimation accuracy.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到了非常相似的估算准确性结果。
- en: Nearest neighbor estimator
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最近邻估算器
- en: Using nearest neighbor, we have an unclassified object and a set of objects
    that are classified. We then take the attributes of the unclassified object, compare
    against the known classifications in place, and select the class that is closest
    to our unknown. The comparison distances resolve to Euclidean geometry computing
    the distances between two points (where known attributes fall in comparison to
    the unknown's attributes).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 使用最近邻时，我们有一个未分类的对象和一组已分类的对象。我们然后取未分类对象的属性，和已知分类进行比较，并选择与我们的未知对象最接近的类别。比较的距离通过欧几里得几何来计算，即计算两点之间的距离（已知属性与未知对象属性的比较）。
- en: Nearest neighbor using R
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 R 实现最近邻
- en: 'For this example, we are using the housing data from `ics.edu`. First, we load
    the data and assign column names:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用来自 `ics.edu` 的房价数据。首先，我们加载数据并指定列名：
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We reorder the data so the key (the housing price `MDEV`) is in ascending order:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们重新排序数据，使得关键值（房价 `MDEV`）按升序排列：
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, we can split the data into a training set and a test set:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以将数据拆分为训练集和测试集：
- en: '[PRE11]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We build our nearest neighbor model using both sets:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用这两个数据集来构建最近邻模型：
- en: '[PRE12]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Let us look at the results:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看结果：
- en: '[PRE13]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![](img/b83dd910-3b61-49bc-9a9f-c64dc16daa2f.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b83dd910-3b61-49bc-9a9f-c64dc16daa2f.png)'
- en: There is a slight Poisson distribution with the higher points near the left
    side. I think this makes sense as *natural* data. The start and end tails are
    dramatically going off page.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据的较高点附近存在轻微的泊松分布。我认为这符合 *自然* 数据的特点。起始和结束的尾部在页面上显得异常偏离。
- en: 'What about the accuracy of this model? I did not find a clean way to translate
    the predicted factors in the `knnModel` to numeric values, so I extracted them
    to a flat file, and then loaded them in separately:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，这个模型的准确度如何呢？我没有找到将 `knnModel` 中预测的因素转化为数值的清晰方法，所以我将它们提取到一个平面文件中，然后单独加载：
- en: '[PRE14]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '| predicted |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| 预测值 |'
- en: '| 10.5 |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| 10.5 |'
- en: '| 9.7 |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| 9.7 |'
- en: '| 7.0 |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| 7.0 |'
- en: 'Then we can build up a `results` data frame:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以构建一个 `results` 数据框：
- en: '[PRE15]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'And compute our accuracy:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 计算我们的准确率：
- en: '[PRE16]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '| **testing.MDEV** | **predicted** | **accuracy** |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| **testing.MDEV** | **预测值** | **准确率** |'
- en: '| `5.6` | `10.5` | `0.5333333` |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| `5.6` | `10.5` | `0.5333333` |'
- en: '| `7.2` | `9.7` | `0.7422680` |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| `7.2` | `9.7` | `0.7422680` |'
- en: '| `8.1` | `7.0` | `1.1571429` |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| `8.1` | `7.0` | `1.1571429` |'
- en: '| `8.5` | `6.3` | `1.3492063` |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| `8.5` | `6.3` | `1.3492063` |'
- en: '| `10.5` | `13.1` | `0.8015267` |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| `10.5` | `13.1` | `0.8015267` |'
- en: '| `10.8` | `16.3` | `0.6625767` |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| `10.8` | `16.3` | `0.6625767` |'
- en: So, we are estimating within 2% (`1.01`) of our testing data.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们在测试数据的 2% 内（`1.01`）进行估算。
- en: Nearest neighbor using Python
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Python 实现最近邻
- en: In Python, we have very similar steps for producing nearest neighbor estimation.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，我们有非常相似的步骤来生成最近邻估算。
- en: 'First, we import the packages to be used:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们导入要使用的包：
- en: '[PRE17]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Numpy and pandas are standards. Nearest neighbors is one of the `sklearn` features.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Numpy 和 pandas 是标准库。最近邻是 `sklearn` 的一项特性。
- en: 'Now, we load in our housing data:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们加载我们的房价数据：
- en: '[PRE18]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '![](img/0e325f2b-f9ef-48b4-977e-43f90fb4f279.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0e325f2b-f9ef-48b4-977e-43f90fb4f279.png)'
- en: The same data that we saw previously in R.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们之前在 R 中看到的相同数据。
- en: 'Let us see how big it is:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看它的大小：
- en: '[PRE19]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'And break up the data into a `training` and `testing` set:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将数据划分为 `训练` 和 `测试` 集：
- en: '[PRE20]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Find the nearest neighbors:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 查找最近邻：
- en: '[PRE21]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Display their indices and distances. Indices are varying quite a lot. Distances
    seem to be in bands:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 显示它们的索引和距离。索引的变化较大。距离似乎呈现出带状分布：
- en: '[PRE22]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Build a nearest neighbors model from the `training` set:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `训练` 集构建一个最近邻模型：
- en: '[PRE23]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: It is interesting that with Python we do not have to store models off separately.
    Methods are stateful.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，使用 Python 时我们不需要将模型单独存储。方法是有状态的。
- en: 'Make our predictions:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 做出我们的预测：
- en: '[PRE24]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Determine how well we have predicted the housing price:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 确定我们预测房价的准确性：
- en: '[PRE25]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: We have a mean difference of ¾ versus an average value of `22`. This should
    mean an average percent difference of about 3%, but the average percentage difference
    calculated is close to 10%. So, we are not estimating well under Python.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的平均差异为¾，而平均值为`22`。这应该意味着大约3%的平均百分比差异，但计算出来的平均百分比差异接近10%。因此，我们在Python中并没有做出很好的估计。
- en: Decision trees
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 决策树
- en: In this section, we will use decision trees to predict values. A decision tree
    has a logical flow where the user makes decisions based on attributes following
    the tree down to a root level where a classification is then provided.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用决策树来预测值。决策树具有逻辑流程，用户根据属性做出决策，沿着树形结构向下直到根节点，在根节点提供分类结果。
- en: For this example, we are using automobile characteristics, such as vehicle weight,
    to determine whether the vehicle will produce good mileage. The information is
    extracted from the page at [https://alliance.seas.upenn.edu/~cis520/wiki/index.php?n=Lectures.DecisionTrees](https://alliance.seas.upenn.edu/~cis520/wiki/index.php?n=Lectures.DecisionTrees).
    I copied the data out to Excel and then wrote it as a CSV for use in this example.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们使用汽车特征，例如车辆重量，来判断该车是否能提供良好的油耗。这些信息来自页面 [https://alliance.seas.upenn.edu/~cis520/wiki/index.php?n=Lectures.DecisionTrees](https://alliance.seas.upenn.edu/~cis520/wiki/index.php?n=Lectures.DecisionTrees)。我将数据复制到Excel中，并将其作为CSV文件用于本示例。
- en: Decision trees in R
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: R中的决策树
- en: 'We load the libraries to use `rpart` and `caret`. `rpart` has the decision
    tree modeling package. `caret` has the data partition function:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们加载用于`rpart`和`caret`的库。`rpart`包含决策树建模包，`caret`包含数据划分功能：
- en: '[PRE26]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We load in our `mpg` dataset and split it into a training and testing set:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们加载`mpg`数据集，并将其分为训练集和测试集：
- en: '[PRE27]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'We develop a model to predict `mpg` acceptability based on the other factors:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们开发一个模型，根据其他因素预测`mpg`的可接受性：
- en: '[PRE28]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The display is a text display of the decision tree. You can see the decision
    tree graphically as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 显示的是决策树的文本表示形式。你可以通过以下方式图形化查看决策树：
- en: '[PRE29]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '![](img/821221be-1044-4c3d-ab67-3df2a9a1ef5a.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/821221be-1044-4c3d-ab67-3df2a9a1ef5a.png)'
- en: It appears to be a very simple model. There must have been a change to mileage
    for the 1980 year as that is the main driver for the decision tree.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这似乎是一个非常简单的模型。1980年可能发生了油耗的变化，因为这是决策树的主要驱动因素。
- en: 'Finally, we predict values and compare them against our `testing` set:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们预测值并将其与我们的`testing`集进行比较：
- en: '[PRE30]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '![](img/2cc05716-1435-4010-84ac-025c3cd37b73.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2cc05716-1435-4010-84ac-025c3cd37b73.png)'
- en: It looks like the package has converted `Bad`, `OK`, and `Good` into a numerical
    equivalent where `1` is `Bad` and others are `OK` or `Good`. Overall, we are not
    sure if we have a good model. There is clearly not much data to work with. A larger
    test set would clear up the model.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来这个包已经将`Bad`、`OK`和`Good`转换为数字等效值，其中`1`代表`Bad`，其他则为`OK`或`Good`。总体来说，我们不确定这个模型是否有效。显然可用的数据量很小，增加测试集的大小可能会澄清模型。
- en: Decision trees in Python
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python中的决策树
- en: 'We can perform the same analysis in Python. Load a number of imports that are
    to be used:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在Python中执行相同的分析。加载一些需要用到的库：
- en: '[PRE31]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Read in the `mpg` data file:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 读取`mpg`数据文件：
- en: '[PRE32]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '![](img/aba23356-a720-4d52-9562-bf7b5f910d2c.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aba23356-a720-4d52-9562-bf7b5f910d2c.png)'
- en: 'Break up the data into factors and results:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 将数据分解为因素和结果：
- en: '[PRE33]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Split up the data between training and testing sets:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 将数据分为训练集和测试集：
- en: '[PRE34]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Create a decision tree model:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个决策树模型：
- en: '[PRE35]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Calculate the model fit:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 计算模型的拟合度：
- en: '[PRE36]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Graph out the tree:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 绘制出决策树：
- en: '[PRE37]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Neural networks
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 神经网络
- en: We can model the housing data as a neural network where the different data elements
    are inputs into the system and the output of the network is the house price. With
    a neural net we end up with a graphical model that provides the factors to apply
    to each input in order to arrive at our housing price.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将房屋数据建模为神经网络，其中不同的数据元素作为系统的输入，而网络的输出是房价。通过神经网络，我们最终得到一个图形化的模型，展示了每个输入应应用的因素，以得出房价。
- en: Neural networks in R
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: R中的神经网络
- en: 'There is a neural network package available in R. We load that in:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: R中有一个神经网络包。我们加载它：
- en: '[PRE38]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Load in the housing data:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 加载房屋数据：
- en: '[PRE39]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Split up the housing data into training and test sets (we have seen this coding
    in prior examples):'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 将房屋数据分为训练集和测试集（我们在之前的示例中已经看到过这种编码）：
- en: '[PRE40]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Calculate our `neuralnet` model:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 计算我们的`neuralnet`模型：
- en: '[PRE41]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The display information for the `neuralnet` model is quite extensive. The first
    sets of display are listed as follows. It is unclear if any of these points are
    useful:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '`neuralnet`模型的显示信息相当广泛。以下是第一组显示内容。尚不清楚这些点是否有用：'
- en: '[PRE42]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Display the model:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 显示模型：
- en: '[PRE43]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '![](img/ec97c3f6-3876-4ca4-9f8e-f7ac12d67f25.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ec97c3f6-3876-4ca4-9f8e-f7ac12d67f25.png)'
- en: This is just the top half of the graph. As you can see, every factor is adjusted
    into the model to arrive at our housing price. This is not useful—every factor
    cannot be that important.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是图表的上半部分。如您所见，每个因素都被调整到模型中以得出我们的房价。这并不有用——每个因素不可能都这么重要。
- en: 'Determine how accurate we are with this model:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 确定我们在该模型中的准确性：
- en: '[PRE44]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Given the model appears to be very inaccurate I am not sure going through the
    same steps in Python would be beneficial.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于该模型似乎非常不准确，我不确定在Python中按照相同的步骤操作是否会有益。
- en: Random forests
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 随机森林
- en: The random forests algorithm attempts a number of random decision trees and
    provides the tree that works best within the parameters used to drive the model.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 随机森林算法尝试多棵随机决策树，并提供在所用参数下最有效的树。
- en: Random forests in R
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: R中的随机森林
- en: 'With R we include the packages we are going to use:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在R中，我们包括了将要使用的包：
- en: '[PRE45]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Load the data:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 加载数据：
- en: '[PRE46]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Split it up:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 将数据分割：
- en: '[PRE47]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Calculate our model:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 计算我们的模型：
- en: '[PRE48]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: This is one of the more informative displays about a model—we see the model
    explains 87% of the variable.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这是关于模型的更多信息性显示——我们看到模型解释了87%的变量。
- en: 'Make our prediction:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 做出我们的预测：
- en: '[PRE49]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: This is one of the lowest sum of squares among the models we produced in this
    chapter.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们在本章中产生的模型中，最小的平方和之一。
- en: Summary
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we used several machine learning algorithms, some of them in
    R and Python to compare and contrast. We used naive Bayes to determine how the
    data might be used. We applied nearest neighbor in a couple of different ways
    to see our results. We used decision trees to come up with an algorithm for predicting.
    We tried to use neural network to explain housing prices. Finally, we used the
    random forest algorithm to do the same—with the best results!
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使用了几种机器学习算法，其中一些在R和Python中进行对比。我们使用朴素贝叶斯算法来确定数据可能的使用方式。我们以不同的方式应用最近邻算法来查看我们的结果。我们使用决策树来构建预测算法。我们尝试用神经网络来解释房价。最后，我们使用随机森林算法做了相同的尝试——并取得了最佳结果！
- en: In the next chapter, we will look at optimizing Jupyter notebooks.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将研究如何优化Jupyter笔记本。
