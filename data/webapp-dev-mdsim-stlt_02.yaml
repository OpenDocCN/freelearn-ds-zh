- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: Setting Up the Python Coding Environment
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 Python 编程环境
- en: 'Before we start coding with Streamlit, we need to prepare our environment.
    Setting up a Python coding environment, especially in Linux (for example, Ubuntu),
    can be done in a few simple steps: update (or install) Python, install a code
    editor or IDE (maybe something free, such as **Sublime Text**), set up a virtual
    environment (in the book, we are using **pipenv**, but any other would be good),
    and install dependencies. After these steps, we should have a fully functional
    Python coding environment (in Ubuntu or any other **operating system** (**OS**))
    that’s ready to use for our web application’s development.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始使用 Streamlit 编程之前，我们需要准备好开发环境。设置 Python 编程环境，特别是在 Linux 系统中（例如 Ubuntu），可以通过几个简单的步骤完成：更新（或安装）Python，安装代码编辑器或
    IDE（可以选择免费的，例如**Sublime Text**），设置虚拟环境（本书中使用的是**pipenv**，但其他工具也可以），安装依赖项。完成这些步骤后，我们应该能拥有一个完全可用的
    Python 编程环境（无论是在 Ubuntu 还是其他任何**操作系统**（**OS**）上），可以用于开发我们的 Web 应用。
- en: This chapter is all about the environment setup. We need to prepare all the
    tools needed to make our developments with Streamlit smooth and productive. So,
    first of all, we are dealing with the choice of OS, which can be real or virtual,
    and either Windows, macOS, or Linux (our preferred solution). Next, we have to
    decide what kind of editor or **integrated development environment** (**IDE**)
    to use for coding. Some of them are very advanced and expensive, and some others
    are a little bit simpler but free. Finally, we’ll talk about virtual environments
    and the advantages of using them.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍环境配置。我们需要准备好所有工具，以便顺利、高效地使用 Streamlit 进行开发。因此，首先，我们需要选择操作系统（OS），可以是物理机或虚拟机，支持
    Windows、macOS 或 Linux（我们首选的解决方案）。接下来，我们需要决定使用哪种编辑器或**集成开发环境**（**IDE**）来进行编码。某些编辑器非常高级且昂贵，而其他一些则简单但免费的。最后，我们将讨论虚拟环境及其使用优势。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主要内容：
- en: Setting up the OS
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置操作系统
- en: IDE selection
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IDE 选择
- en: What is a virtual environment?
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是虚拟环境？
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'In this chapter, we will be using the following libraries, packages, and tools:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用以下库、包和工具：
- en: VirtualBox
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VirtualBox
- en: Ubuntu
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ubuntu
- en: Python 3
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 3
- en: Sublime Text
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sublime Text
- en: '`pipenv`'
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pipenv`'
- en: '`pipenv`-pipes'
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pipenv`-管道'
- en: Setting up the OS
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置操作系统
- en: It’s extremely important to have a very well-working environment. The OS is
    the place where everything is supposed to run. Even if the first choice we are
    asked to make is in regard to the OS to be used, we can say that from this point
    of view, we are lucky, because Streamlit is a framework in Python. This programming
    language works more or less on any OS, so we are really free to select what we
    want – for example, macOS, Windows, any Linux distribution, or, if you like, even
    any BSD flavor.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有一个高效的环境是至关重要的。操作系统是所有内容运行的地方。即使我们首先需要选择操作系统，从这个角度来看，我们其实是幸运的，因为 Streamlit
    是基于 Python 的框架。这个编程语言几乎可以在任何操作系统上运行，所以我们可以自由选择我们想要的操作系统——例如 macOS、Windows、任何 Linux
    发行版，或者如果你喜欢，甚至是任何 BSD 系统。
- en: For several reasons that we are going to explain shortly, we prefer Ubuntu,
    and if you are concerned about its usage or about installing it, take it easy
    because first of all, it’s really easy to use. And, if you don’t want to, you
    don’t need to install it on your machine as an exclusive and unique OS as you
    can use virtualization software, a very useful tool that makes it possible to
    run an OS inside another OS! Moreover, knowing how to manage a virtualization
    tool and install on it any kind of OS can be a very useful skill for the future!
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 出于几个我们稍后会解释的原因，我们首选 Ubuntu。如果你对其使用或安装有所顾虑，请放轻松，因为首先，Ubuntu 使用起来非常简单。而且，如果你不想将其作为唯一操作系统安装在机器上，你完全可以使用虚拟化软件，这是一种非常有用的工具，可以让你在一个操作系统内部运行另一个操作系统！此外，掌握如何管理虚拟化工具并在其上安装任何操作系统，将是未来非常有用的技能！
- en: 'Since we need not only the OS but, among other tools, an IDE, the best choice
    may be to adopt free tools in order to keep our costs very low. So, in order to
    minimize our expenses, I suggest you use Ubuntu, a very user-friendly and easy-to-use-and-install
    Linux distribution. You can download it from Ubuntu’s official website ([https://ubuntu.com/](https://ubuntu.com/))
    and install it on your machine:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们不仅需要操作系统，还需要其他工具（如 IDE），因此最佳选择可能是采用免费工具以保持成本尽可能低。因此，为了最小化开支，我建议你使用 Ubuntu，这是一款非常用户友好、易于使用和安装的
    Linux 发行版。你可以从 Ubuntu 的官方网站（[https://ubuntu.com/](https://ubuntu.com/)）下载并安装到你的计算机上：
- en: '![Figure 2.1: Ubuntu home page](img/B21147_02_1.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.1：Ubuntu 首页](img/B21147_02_1.jpg)'
- en: 'Figure 2.1: Ubuntu home page'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.1：Ubuntu 首页
- en: 'Consider using virtualization software if you prefer not to install Ubuntu
    alongside your primary OS in a “dual boot mode” and avoid the need to choose between
    Linux distributions when starting your computer. The choice of which valid solution
    to use ultimately depends on your preferences. The main objective is to enable
    you to run Ubuntu within your primary OS, treating it as a regular software program.
    A very valid solution, once again free, is Oracle VirtualBox, which works for
    any kind of OS:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想将 Ubuntu 与主操作系统并行安装（即不使用“双重启动”模式），并且想避免在启动计算机时需要选择 Linux 发行版，那么可以考虑使用虚拟化软件。最终的选择取决于你的个人喜好。主要目标是使你能够在主操作系统中运行
    Ubuntu，将其视为一个普通的软件程序。一种非常有效且免费的解决方案是 Oracle VirtualBox，它适用于任何类型的操作系统：
- en: '![Figure 2.2: VirtualBox home page](img/B21147_02_2.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.2：VirtualBox 首页](img/B21147_02_2.jpg)'
- en: 'Figure 2.2: VirtualBox home page'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.2：VirtualBox 首页
- en: 'It doesn’t matter whether you have a real Ubuntu OS or a virtualized version
    of it; it’s just important that you are able to start and use it. When you run
    your freshly installed Linux Ubuntu, please update it by typing the following
    command in the terminal:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你是使用真实的 Ubuntu 操作系统还是虚拟化版本，都没有关系；关键是你能够启动并使用它。当你运行新安装的 Linux Ubuntu 时，请在终端中输入以下命令进行更新：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, it’s time to check whether Python is installed on the system, so open
    the terminal and simply type the following:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候检查系统是否安装了 Python 了，因此打开终端并简单输入以下命令：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You should get some content such as that in the following picture:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到一些内容，类似于以下图片：
- en: '![Figure 2.3: Python 3 in Ubuntu’s terminal](img/B21147_02_3.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.3：Ubuntu 终端中的 Python 3](img/B21147_02_3.jpg)'
- en: 'Figure 2.3: Python 3 in Ubuntu’s terminal'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.3：Ubuntu 终端中的 Python 3
- en: As we can see, Python 3 is already installed in Ubuntu, and when we type `python3`,
    we can enter Python and start coding. In *Figure 2**.3*, we just printed a nice
    `Hello Streamlit!` message and then quit.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，Python 3 已经在 Ubuntu 中安装，当我们输入`python3`时，可以进入 Python 并开始编程。在*图 2.3*中，我们只打印了一个漂亮的`Hello
    Streamlit!`消息，然后退出。
- en: If you encounter an error while typing `python3`, it is possible that your system
    has Python available as `python` without the `3`. In such cases, you should use
    `python` instead of `python3`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在输入`python3`时遇到错误，可能是你的系统将 Python 作为`python`而不是`python3`。在这种情况下，你应该使用`python`而不是`python3`。
- en: 'Let’s check whether `pip` is installed in our Ubuntu box. Type in the following
    command:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查一下`pip`是否安装在我们的 Ubuntu 系统中。输入以下命令：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If `pip` is not installed, we can install it by typing in the following command:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`pip`没有安装，我们可以通过输入以下命令来安装它：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the following figure, we can see how easy the `pip` installation is:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在下图中，我们可以看到`pip`安装是多么简单：
- en: '![Figure 2.4: pip3 installation](img/B21147_02_4.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.4：pip3 安装](img/B21147_02_4.jpg)'
- en: 'Figure 2.4: pip3 installation'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.4：pip3 安装
- en: 'Now, just to get familiar with `pip`, we will install a couple of tools that
    will be quite useful in the future: `tree` and `terminator`.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了熟悉`pip`，我们将安装几个将来非常有用的工具：`tree`和`terminator`。
- en: '`tree` is a simple tool to visualize files and folders in the terminal as trees.
    We can install it by typing the following command:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`tree`是一个简单的工具，用于在终端中以树状图形式可视化文件和文件夹。我们可以通过输入以下命令来安装它：'
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'And once the installation is completed, just type `tree` and you will have
    a nice tree view of the working directory, as shown in the following figure:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，只需输入`tree`，你就能看到工作目录的漂亮树状图，如下图所示：
- en: '![Figure 2.5: The “tree” command](img/B21147_02_5.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.5：“tree”命令](img/B21147_02_5.jpg)'
- en: 'Figure 2.5: The “tree” command'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.5：“tree”命令
- en: '`terminator` is an alternative terminal that has some advanced features, such
    as horizontal and vertical splits, focus shifting, and zooming and preferences
    settings, but the most important one for sure is the possibility of splitting
    the screen into tiles as many times as we want. Let’s install it by typing the
    following command:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`terminator`是一个替代终端，具有一些高级功能，比如水平和垂直分屏、焦点切换、缩放和偏好设置，但最重要的功能肯定是可以根据需要将屏幕分割成多个分屏。让我们通过输入以下命令来安装它：'
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Then, once the installation is finished, just type `terminator`. As you can
    see in the following figure, by just right-clicking, you can create as many tiles
    with new terminals as you want, both vertically and horizontally:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，安装完成后，只需输入`terminator`。如下面的图所示，通过右键点击，你可以创建任意数量的新的终端分屏，无论是垂直的还是水平的：
- en: '![Figure 2.6: Terminator and its tiles](img/B21147_02_6.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图2.6：Terminator及其分屏](img/B21147_02_6.jpg)'
- en: 'Figure 2.6: Terminator and its tiles'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.6：Terminator及其分屏
- en: 'Finally, what is important is having Python running. We prefer running it on
    Ubuntu just to keep things cheap and simple, but if you want to use your own OS
    it’s no problem at all. Just double-check whether you have the Python 3 version
    installed and if not, please download it from Python’s official website ([https://www.python.org/](https://www.python.org/))
    and then install it (please get the version specific to your OS):'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，最重要的是要确保Python能够运行。我们更倾向于在Ubuntu上运行它，这样既便宜又简单，但如果你想使用自己的操作系统，也完全没有问题。只需要再次确认你是否已经安装了Python
    3版本，如果没有，请从Python的官方网站下载并安装它（[https://www.python.org/](https://www.python.org/)），并选择与你的操作系统相匹配的版本：
- en: '![Figure 2.7: Python website](img/B21147_02_7.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图2.7：Python官方网站](img/B21147_02_7.jpg)'
- en: 'Figure 2.7: Python website'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.7：Python官方网站
- en: At this point, we have done more or less 50% of the job, since we have a fresh
    OS with Python and the `pip` installation, together with a couple of nice tools
    such as terminator and tree. What we are still missing is a beautiful editor,
    so let’s get one!
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 到这个阶段，我们已经完成了大约50%的工作，因为我们已经有了一个新鲜的操作系统，并且安装了Python和`pip`，同时还准备了一些很不错的工具，比如terminator和tree。我们现在缺少的就是一个漂亮的编辑器，所以让我们来安装一个吧！
- en: IDE selection
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IDE选择
- en: Having a good IDE is very important for coding in Python. It provides many useful
    features that help you write code faster and with fewer errors, and keeps your
    code clean and well organized. For example, the autocomplete feature saves a lot
    of time by suggesting code completions as you type. This reduces typing errors.
    Syntax highlighting makes the code easier to read by coloring different elements.
    Powerful debugging tools in the IDE make debugging easier and faster. Refactoring
    features help keep the code organized and readable. Linting checks your code for
    stylistic issues, improving the quality.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有一个好的IDE对于Python编程非常重要。它提供了许多有用的功能，帮助你更快速、更少出错地编写代码，并保持代码整洁且结构良好。例如，自动完成功能可以通过在你输入时建议代码补全，从而节省大量时间。这减少了打字错误。语法高亮使代码更易读，通过为不同的元素上色来区分。IDE中的强大调试工具使得调试变得更加轻松和高效。重构功能有助于保持代码的结构清晰和可读。代码风格检查（Linting）可以检查你的代码是否符合风格规范，提高代码质量。
- en: 'On the market, there are several excellent tools such as PyCharm and VSCode,
    but these tools are usually heavy and a little bit expensive. For the sake of
    our coding sessions, we can use a quite light application that, at least at the
    beginning, can be installed and used at no cost: Sublime Text.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 市面上有一些优秀的工具，比如PyCharm和VSCode，但这些工具通常比较重且价格略贵。为了我们的编程会话，我们可以使用一款相对轻量的应用程序，至少在开始阶段，它可以免费安装和使用：Sublime
    Text。
- en: 'Sublime Text has many nice features that you can explore by yourself, including
    programming language recognition and syntax highlighting. You can install it directly
    from its home page ([https://www.sublimetext.com/](https://www.sublimetext.com/))
    by carefully following the instructions:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Sublime Text拥有许多不错的功能，你可以自行探索，包括编程语言识别和语法高亮。你可以直接从它的主页安装（[https://www.sublimetext.com/](https://www.sublimetext.com/)），并仔细按照说明进行操作：
- en: '![Figure 2.8: Sublime Text home page](img/B21147_02_8.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图2.8：Sublime Text主页](img/B21147_02_8.jpg)'
- en: 'Figure 2.8: Sublime Text home page'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.8：Sublime Text主页
- en: 'Now, from your working directory in Terminator, just type `subl .` and Sublime
    Text will open up. Please select **Python** in the extension list in the bottom-right
    corner:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在Terminator的工作目录中，只需输入`subl .`，Sublime Text就会打开。请在右下角的扩展列表中选择**Python**：
- en: '![Figure 2.9: Python syntax selection in Sublime Text](img/B21147_02_9.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图2.9：Sublime Text中的Python语法选择](img/B21147_02_9.jpg)'
- en: 'Figure 2.9: Python syntax selection in Sublime Text'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.9：在 Sublime Text 中选择 Python 语法
- en: Considering that Python is available and Sublime Text is installed, we could
    start coding with Streamlit immediately, but this is not the best option. In Python,
    every time we start a new project, we tend to install some specific new packages
    and libraries, and if we install this new stuff every time into the same basic
    environment, sooner or later, our environment will be a total mess. A very clean
    way to avoid this potential mess is the usage of virtual environments, so let’s
    see what they are.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到 Python 已安装且 Sublime Text 已配置，我们可以立即开始使用 Streamlit 进行编码，但这不是最佳选择。在 Python
    中，每次开始一个新项目时，我们倾向于安装一些特定的包和库，如果每次都把这些新的东西安装到相同的基本环境中，迟早我们环境会变得一团糟。避免这种潜在混乱的一个非常干净的方式就是使用虚拟环境，接下来我们来看看它们是什么。
- en: What is a virtual environment?
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是虚拟环境？
- en: Virtual environments are useful tools in Python development that allow you to
    isolate package installations related to a specific project from the main system’s
    Python installation. This means you can have separate environments with different
    package dependencies for different projects.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟环境是 Python 开发中的有用工具，它允许你将与特定项目相关的包安装与系统的 Python 安装隔离开来。这意味着你可以为不同的项目创建具有不同包依赖项的独立环境。
- en: 'Creating a virtual environment is easy using the `venv` module in the Python
    standard library. The basic steps are as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Python 标准库中的 `venv` 模块创建虚拟环境非常简单。基本步骤如下：
- en: 'Create the virtual environment by running the following command:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令创建虚拟环境：
- en: '[PRE6]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Activate the virtual environment.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 激活虚拟环境。
- en: 'On Unix/Linux systems, run the following command:'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Unix/Linux 系统中，运行以下命令：
- en: '[PRE7]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: pip install package-name
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: pip install package-name
- en: '[PRE8]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'When you are done, you can deactivate the environment and switch back to the
    global Python install with the following command:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，你可以通过以下命令停用环境并切换回全局 Python 安装：
- en: '[PRE9]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Virtual environments make it easy to try out different package combinations
    for your projects without interfering with the global Python install or other
    virtual environments.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟环境使你能够轻松尝试不同的包组合，而不会影响全局的 Python 安装或其他虚拟环境。
- en: 'In order to have a complete view of virtual environments in Python, please
    check the Real Python website ([https://realpython.com/python-virtual-environments-a-primer/#use-third-party-tools](https://realpython.com/python-virtual-environments-a-primer/#use-third-party-tools)):'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 若要全面了解 Python 中的虚拟环境，请查看 Real Python 网站 ([https://realpython.com/python-virtual-environments-a-primer/#use-third-party-tools](https://realpython.com/python-virtual-environments-a-primer/#use-third-party-tools))：
- en: '![Figure 2.10: Python virtual environments on the Real Python website](img/B21147_02_10.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.10：Real Python 网站上的 Python 虚拟环境](img/B21147_02_10.jpg)'
- en: 'Figure 2.10: Python virtual environments on the Real Python website'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.10：Real Python 网站上的 Python 虚拟环境
- en: 'Apart from the built-in `venv` module, there are several third-party tools
    such as `virtualenv` and `pipenv` for managing virtual environments in Python.
    The following bullets list the various benefits of using these third-party tools:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 除了内置的 `venv` 模块外，还有一些第三方工具，如 `virtualenv` 和 `pipenv`，用于管理 Python 中的虚拟环境。以下是使用这些第三方工具的各种好处：
- en: '`virtualenv` and `pipenv` tools come with some additional convenience features
    that make them easier to use than the `venv` module. For example, `pipenv` automatically
    creates a **Pipfile** to track package dependencies and versions.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`virtualenv` 和 `pipenv` 工具具有一些附加的便捷功能，使它们比 `venv` 模块更易于使用。例如，`pipenv` 会自动创建一个
    **Pipfile** 来跟踪包的依赖关系和版本。'
- en: '`pipenv` manages both the environment and package dependencies, making your
    setup fully reproducible.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pipenv` 同时管理环境和包依赖关系，使你的设置完全可重现。'
- en: '`venv` as `pipenv` has features to help manage development dependencies separately
    from production dependencies.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`venv` 和 `pipenv` 都有帮助将开发依赖项与生产依赖项分开管理的功能。'
- en: '`venv` module is a newer addition to the Python standard library.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`venv` 模块是 Python 标准库中的一个较新添加的功能。'
- en: '`virtualenv` and `pipenv` are third-party tools, they can work with different
    Python versions, unlike `venv`, which is tied to a specific Python installation.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`virtualenv` 和 `pipenv` 是第三方工具，它们可以与不同版本的 Python 一起使用，不像 `venv` 只能与特定的 Python
    安装版本兼容。'
- en: So, in summary, while the `venv` module is part of the Python standard library,
    third-party tools such as `poetry``pipenv` offer more features, flexibility, and
    compatibility for managing your virtual environments. But for simple needs, the
    `venv` module works well and has the benefit of being built into Python itself.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，总结一下，虽然`venv`模块是Python标准库的一部分，但像`poetry``pipenv`这样的第三方工具提供了更多功能、灵活性和兼容性，用于管理您的虚拟环境。但对于简单的需求，`venv`模块运作良好，并且具有内置于Python中的优点。
- en: All the reasons mentioned in the preceding list are enough to make `pipenv`
    our choice for the management and creation of virtual environments.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面列表中提到的所有原因足以使`pipenv`成为我们管理和创建虚拟环境的选择。
- en: Now, we’ll proceed with the `pipenv` installation and with the description of
    its main commands.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将继续进行`pipenv`的安装，并描述其主要命令。
- en: 'We can install `pipenv` together with `pipenv-pipes` by just typing the following
    command:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过输入以下命令一起安装`pipenv`和`pipenv-pipes`：
- en: '[PRE10]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Next, let’s create a testing directory named `pipenvtest1`:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们创建一个名为`pipenvtest1`的测试目录：
- en: '[PRE11]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'With list or tree, we can check whether this folder is empty:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 使用列表或树，我们可以检查此文件夹是否为空：
- en: '[PRE12]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We will get the output shown in *Figure 2**.11*. It tells us that, at the moment,
    there are no virtual environments:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将得到显示在*图2**.11*中的输出。它告诉我们，目前没有虚拟环境：
- en: '![Figure 2.11: pipenv --venv](img/B21147_02_11.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![图2.11：pipenv --venv](img/B21147_02_11.jpg)'
- en: 'Figure 2.11: pipenv --venv'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.11：pipenv --venv
- en: 'When executing the `pipenv shell` command at this point, `pipenv` will search
    for a file called `Pipfile` in the present directory. This file is needed for
    the creation of the virtual environment. If there is no Pipfile, it will be created
    together with the virtual environment and we will get a successfully created virtual
    environment message on the screen:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在此时执行`pipenv shell`命令时，`pipenv`将在当前目录中搜索名为`Pipfile`的文件。此文件是创建虚拟环境所必需的。如果没有Pipfile，则将与虚拟环境一起创建，并且我们将在屏幕上得到成功创建虚拟环境的消息：
- en: '![Figure 2.12: Virtual environment creation](img/B21147_02_12.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![图2.12：虚拟环境创建](img/B21147_02_12.jpg)'
- en: 'Figure 2.12: Virtual environment creation'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.12：虚拟环境创建
- en: 'Now, by launching Sublime Text from the working directory, we can see that
    a `Pipfile` has been created and we can explore its content. It contains all the
    information about the virtual environment such as the Python version, installed
    packages (empty at the moment), and dev packages (empty as well):'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，通过从工作目录启动Sublime Text，我们可以看到已创建了一个`Pipfile`，我们可以探索其内容。它包含有关虚拟环境的所有信息，例如Python版本、已安装的软件包（目前为空），以及开发软件包（同样为空）：
- en: '![Figure 2.13: The Pipfile content](img/B21147_02_13.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![图2.13：Pipfile内容](img/B21147_02_13.jpg)'
- en: 'Figure 2.13: The Pipfile content'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.13：Pipfile内容
- en: 'To install any package in our new virtual environment, we just have to type
    the following:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 要在我们的新虚拟环境中安装任何软件包，我们只需输入以下内容：
- en: '[PRE13]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'For example, we can try with `numpy`:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以尝试使用`numpy`：
- en: '![Figure 2.14: Packages installation](img/B21147_02_14.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![图2.14：软件包安装](img/B21147_02_14.jpg)'
- en: 'Figure 2.14: Packages installation'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.14：软件包安装
- en: 'As we can read on the screen, the package has been successfully installed,
    the `Pipfile` has been updated, it now contains `numpy`, and a new `Pipfile.lock`
    file, containing the list of all the hashes and dependencies, has been created
    and updated. Let’s see it in Sublime Text:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们可以在屏幕上读到的那样，软件包已成功安装，`Pipfile`已更新，现在包含`numpy`，并且已创建和更新了一个新的包含所有哈希和依赖项列表的`Pipfile.lock`文件。让我们在Sublime
    Text中看看它：
- en: '![Figure 2.15: Pipfile with packages and Pipfile.lock](img/B21147_02_15.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![图2.15：具有软件包和Pipfile.lock的Pipfile](img/B21147_02_15.jpg)'
- en: 'Figure 2.15: Pipfile with packages and Pipfile.lock'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.15：具有软件包和Pipfile.lock的Pipfile
- en: 'Another very interesting option is to create a requirements file in the `Pipfile.lock`
    file that will be very useful when we deploy our web applications. So, to create
    a `requirements.txt` file, we can simply type the following:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个非常有趣的选项是在`Pipfile.lock`文件中创建一个需求文件，在我们部署Web应用程序时非常有用。因此，要创建一个`requirements.txt`文件，我们只需输入以下内容：
- en: '[PRE14]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Please note that starting from `pipenv` version 2022.8.13, the previous command
    has been replaced with the following:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，从`pipenv`版本2022.8.13开始，上述命令已更改为以下内容：
- en: '[PRE15]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Inside `pipenv`, we can run any kind of command just by using the `run` instruction.
    So, if we want to run, let’s say Python, we can just type the following:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在`pipenv`内部，我们可以通过使用`run`指令运行任何类型的命令。因此，如果我们想要运行Python，我们只需输入以下内容：
- en: '[PRE16]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: By running the `pipenv check` command, you can examine package updates, and
    if any are found the updates will be executed accordingly.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行 `pipenv check` 命令，可以检查包的更新，如果发现有更新，将会相应地执行更新。
- en: 'Uninstalling a package (and removing it from the Pipfile) is very simple. In
    fact, we just have to type the following:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 卸载一个包（并从 Pipfile 中移除它）非常简单。实际上，我们只需要输入以下命令：
- en: '[PRE17]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In addition to `pipenv`, we have also installed `pipenv`-pipes, which is an
    intriguing tool. By typing `pipes` in the terminal, we can obtain a list of the
    installed virtual environments. We can then navigate through the list using the
    cursor to select the desired virtual environment for activation, as shown in the
    following figure:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 `pipenv`，我们还安装了 `pipenv`-pipes，这是一款很有趣的工具。通过在终端中输入 `pipes`，我们可以获取已安装虚拟环境的列表。然后，我们可以使用光标在列表中浏览，选择所需的虚拟环境进行激活，如下图所示：
- en: '![Figure 2.16: Pipes](img/B21147_02_16.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.16：管道](img/B21147_02_16.jpg)'
- en: 'Figure 2.16: Pipes'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.16：管道
- en: When we are in a virtual environment and want to close it to come back to the
    original status, we just have to type `exit` in the terminal.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们处于虚拟环境中并想要退出，恢复到原始状态时，只需在终端输入 `exit`。
- en: 'To remove a virtual environment, we can navigate to its directory and execute
    the following command:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除一个虚拟环境，我们可以进入它的目录并执行以下命令：
- en: '[PRE18]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This command removes the virtual environment without deleting the files in
    the directory:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令会移除虚拟环境，但不会删除目录中的文件：
- en: '![Figure 2.17: Virtual environment deletion](img/B21147_02_17.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.17：虚拟环境删除](img/B21147_02_17.jpg)'
- en: 'Figure 2.17: Virtual environment deletion'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.17：虚拟环境删除
- en: If we want to remove the directory with all its files, we have to do it manually.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要删除目录及其所有文件，则需要手动操作。
- en: Summary
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we prepared the ground for our next activities. We learned
    how to create a developing environment while keeping costs very low (almost free).
    So, we decided to use Ubuntu as our main OS. After that, we made sure to have
    Python already available and installed `pip`. The selection of the IDE was quite
    straightforward since we chose Sublime Text, a quite light, powerful, and advanced
    text editor.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们为接下来的活动做好了准备。我们学会了如何创建一个开发环境，同时保持低成本（几乎是免费的）。因此，我们决定使用 Ubuntu 作为我们的主要操作系统。随后，我们确保已经安装了
    Python，并安装了 `pip`。选择 IDE 也很简单，因为我们选择了 Sublime Text，一个轻量级、功能强大且先进的文本编辑器。
- en: After that, we focused on Python’s virtual environment. In this case, our choice
    was `pipenv` because it is quite powerful, easy to use, and full of advanced features.
    We spent some time on a quite complete overview of this tool and its main features
    and instructions.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们集中在 Python 的虚拟环境上。在这种情况下，我们选择了 `pipenv`，因为它功能强大、易于使用，并且拥有许多高级功能。我们花了一些时间对这个工具及其主要功能和使用说明进行了较为全面的概述。
- en: Now, everything is ready, so finally, in the next chapter, we are going to take
    a kind of crash course on the basic features of Streamlit. Are you ready?
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，一切准备就绪，所以在下一章，我们将进行一个关于 Streamlit 基本功能的速成课程。你准备好了吗？
