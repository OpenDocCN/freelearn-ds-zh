- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '5'
- en: Deploying Streamlit with Streamlit Community Cloud
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Streamlit 社区云部署 Streamlit
- en: So far in this book, we have focused on Streamlit app development, from creating
    complex visualizations to deploying and creating **Machine Learning** (**ML**)
    models. In this chapter, we will learn how to deploy these applications so that
    they can be shared with anyone with internet access. This is a crucial part of
    Streamlit apps as, without the ability to deploy a Streamlit app, friction still
    exists for users or consumers of your work. If we believe that Streamlit removes
    the friction between creating data science analysis/products/models and sharing
    them with others, then we must also believe that the ability to widely share apps
    is just as crucial as the ease of development.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 迄今为止，本书的重点是 Streamlit 应用程序开发，从创建复杂的可视化到部署和创建**机器学习**（**ML**）模型。在本章中，我们将学习如何部署这些应用程序，以便让任何有互联网访问的人都能共享。这是
    Streamlit 应用程序的关键部分，因为如果无法部署 Streamlit 应用，用户或消费者仍然会遇到障碍。如果我们相信 Streamlit 消除了创建数据科学分析/产品/模型与与他人共享之间的障碍，那么我们也必须相信，广泛共享应用程序的能力与开发的便捷性同样重要。
- en: 'There are three main ways to deploy Streamlit apps: through a product created
    by Streamlit called *Streamlit Community Cloud*, through a cloud provider such
    as *Amazon Web Services* or *Heroku*, or through *Hugging Face* via *Hugging Face
    Spaces*. Deploying on AWS and Heroku is paid, but *Streamlit Community Cloud*
    and *Hugging Face Spaces* are free! The easiest and preferred method for most
    Streamlit users is *Streamlit Community Cloud*, so we will cover that directly
    here, and will cover Heroku and Hugging Face Spaces later in this book, in *Chapter
    8*, *Deploying Streamlit Apps with Hugging Face and Heroku*, and *Chapter 11*,
    *The Data Project – Prototyping Projects in Streamlit*.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 部署 Streamlit 应用程序有三种主要方式：通过 Streamlit 创建的产品 *Streamlit Community Cloud*，通过云服务提供商如
    *Amazon Web Services* 或 *Heroku*，或者通过 *Hugging Face* 的 *Hugging Face Spaces*。在
    AWS 和 Heroku 上部署是付费的，但 *Streamlit Community Cloud* 和 *Hugging Face Spaces* 是免费的！对于大多数
    Streamlit 用户来说，最简单和首选的方法是 *Streamlit Community Cloud*，因此我们将在这里直接介绍这个方法，AWS 和 Hugging
    Face Spaces 会在本书后面的 *第 8 章*，《通过 Hugging Face 和 Heroku 部署 Streamlit 应用》以及 *第 11
    章*，《数据项目 - 在 Streamlit 中原型设计项目》进行介绍。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Getting started with Streamlit Community Cloud
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始使用 Streamlit 社区云
- en: A quick primer on GitHub
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub 快速入门
- en: Deploying with Streamlit Community Cloud
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Streamlit 社区云上部署
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This chapter requires access to Streamlit Community Cloud, which you can get
    access to by signing up for an account for free at [https://share.streamlit.io/signup](https://share.streamlit.io/signup).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章需要访问 Streamlit 社区云，您可以通过免费注册一个账户来获得访问权限，网址是 [https://share.streamlit.io/signup](https://share.streamlit.io/signup)。
- en: This chapter also requires a free GitHub account, which can be attained at [https://www.github.com](https://www.github.com).
    A full primer on GitHub, along with detailed setup instructions, can be found
    in the section *A quick primer on GitHub* later in this chapter.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章还需要一个免费的 GitHub 账户，您可以在 [https://www.github.com](https://www.github.com) 获得。有关
    GitHub 的完整入门和详细的设置说明，可以在本章后面 *GitHub 快速入门* 部分找到。
- en: 'The code for this chapter can be found in the following GitHub repository:
    [https://github.com/tylerjrichards/Streamlit-for-Data-Science](https://github.com/tylerjrichards/Streamlit-for-Data-Science).'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码可以在以下 GitHub 仓库中找到：[https://github.com/tylerjrichards/Streamlit-for-Data-Science](https://github.com/tylerjrichards/Streamlit-for-Data-Science)。
- en: Getting started with Streamlit Community Cloud
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用 Streamlit 社区云
- en: Streamlit Community Cloud is Streamlit’s answer to a fast deployment process
    and is certainly my first recommendation to deploy your Streamlit applications.
    When I discovered Streamlit in the summer of 2020, I remember deploying an app
    locally and loving the library, but then quickly being disappointed in having
    to use AWS to deploy my app. Then, the Streamlit team reached out to me and asked
    if I wanted to try out a product they were working on, which is now called Streamlit
    Community Cloud. I thought that there was no way that it was all that simple.
    We only need to push our code to a GitHub repository and point Streamlit to the
    said repository, and it takes care of the rest.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Streamlit Community Cloud 是 Streamlit 对快速部署流程的回应，绝对是我推荐的第一个部署 Streamlit 应用的方式。2020
    年夏天我第一次接触到 Streamlit时，记得是在本地部署一个应用并喜欢上了这个库，但很快我就对需要使用 AWS 来部署我的应用感到失望。随后，Streamlit
    团队联系了我，问我是否愿意尝试他们正在开发的一款产品，那就是现在的 Streamlit Community Cloud。我当时觉得它不可能这么简单。我们只需要将代码推送到
    GitHub 仓库，并指向该仓库，Streamlit 会处理剩下的部分。
- en: There are times when we care about “the rest,” such as when we want to configure
    the amount of storage space or memory available, but often, letting Streamlit
    Community Cloud handle deployment, resourcing, and sharing makes our development
    significantly easier.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候我们关心的是“其余的部分”，例如当我们想要配置可用的存储空间或内存时，但通常情况下，让 Streamlit Community Cloud 处理部署、资源配置和共享可以大大简化我们的开发工作。
- en: The goal here is to take the Palmer Penguins ML app that we have already created
    and deploy it using Streamlit Community Cloud. Before we get started, Streamlit
    Community Cloud runs using GitHub. If you are already familiar with Git and GitHub,
    feel free to skip this section, make a GitHub repository with our `penguins_ml`
    folder, and head over to the section titled *Deploying with Streamlit Community
    Cloud*.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的目标是将我们已经创建的 Palmer Penguins ML 应用部署到 Streamlit Community Cloud 上。在开始之前，Streamlit
    Community Cloud 是通过 GitHub 运行的。如果你已经熟悉 Git 和 GitHub，可以跳过此部分，直接创建一个包含我们 `penguins_ml`
    文件夹的 GitHub 仓库，并前往 *使用 Streamlit Community Cloud 部署* 部分。
- en: A quick primer on GitHub
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GitHub 简介
- en: 'GitHub and the language Git are collaboration tools for software engineers
    and data scientists that provide a framework for version control. We do not need
    to know everything about how they work to use Streamlit Community Cloud, but we
    need to be able to create our own repositories (which act like shared folders)
    and update them as we update our applications. There are two options for dealing
    with Git and GitHub: via the command line and via a product called GitHub Desktop.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 和 Git 语言是软件工程师和数据科学家用来协作的工具，提供了版本控制框架。我们不需要知道它们如何运作的所有细节来使用 Streamlit
    Community Cloud，但我们需要能够创建自己的仓库（它们像共享文件夹一样）并在更新应用程序时更新它们。处理 Git 和 GitHub 有两种方式：通过命令行和通过名为
    GitHub Desktop 的产品。
- en: Primarily in this book, so far, we have stayed on the command line, and this
    tutorial will stay there. However, if you would like to use GitHub Desktop instead,
    head over to [https://desktop.github.com](https://desktop.github.com) and follow
    along with the instructions provided there.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 目前为止，这本书大部分内容还是停留在命令行中，本教程也会继续保持这一点。然而，如果你更愿意使用 GitHub Desktop，可以访问 [https://desktop.github.com](https://desktop.github.com)，并按照那里的指示操作。
- en: 'Now, use the following steps to get started with Git and GitHub on the command
    line:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用以下步骤在命令行中开始使用 Git 和 GitHub：
- en: First, go to [https://www.github.com](https://www.github.com) and make a free
    account there.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，访问 [https://www.github.com](https://www.github.com) 并在那里创建一个免费账户。
- en: 'Then, we need to download the Git language onto our own computer and connect
    to our GitHub account with Git. We can do this on a Mac using `brew` in our terminal:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接着，我们需要将 Git 语言下载到自己的计算机上，并使用 Git 连接到我们的 GitHub 账户。我们可以在 Mac 上通过终端使用 `brew`
    来完成此操作：
- en: '[PRE0]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We are also going to want to set a global username and email in Git (if we
    haven’t already), which is recommended by GitHub. The following code sets these
    globally:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要在 Git 中设置全局用户名和电子邮件（如果尚未设置），这是 GitHub 推荐的做法。以下代码会全局设置这些信息：
- en: '[PRE1]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now that we have our GitHub account, and we also have Git installed locally,
    we need to create our first repository! We already have our folder with the files
    that we need inside it, called `penguin_ml`, so we should make sure that is the
    working directory that we are working in (if you aren’t sure, the `pwd` command
    will return our working directory). We are going to work with the final version
    of the `penguins_streamlit.py` app, which is shown with brief explanations for
    some context in the following code:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了GitHub帐户，并且本地安装了Git，我们需要创建我们的第一个仓库！我们已经有一个名为`penguin_ml`的文件夹，里面包含所需的文件，因此我们应该确保正在使用该文件夹作为工作目录（如果不确定，可以使用`pwd`命令查看当前工作目录）。我们将使用`penguins_streamlit.py`应用的最终版本，下面的代码中简要解释了其中的一些内容：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This first section imports our libraries, sets up the titles for our app, and
    loads the model that we created using the `penguins_ml.py` file. This section
    will fail if we do not have the `random_forest_penguin.pickle` and `output_penguin.pickle`
    files. You can either go to *Chapter 4*, *Machine Learning and AI with Streamlit*,
    to create these files or head over to [https://github.com/tylerjrichards/Streamlit-for-Data-Science/tree/main/penguin_ml](https://github.com/tylerjrichards/Streamlit-for-Data-Science/tree/main/penguin_ml)
    to find them directly:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 第一部分导入了我们的库，为应用设置了标题，并加载了我们使用`penguins_ml.py`文件创建的模型。如果没有`random_forest_penguin.pickle`和`output_penguin.pickle`文件，这一部分将无法执行。你可以前往*第四章*，*《Streamlit与机器学习和人工智能》*来创建这些文件，或者直接访问[https://github.com/tylerjrichards/Streamlit-for-Data-Science/tree/main/penguin_ml](https://github.com/tylerjrichards/Streamlit-for-Data-Science/tree/main/penguin_ml)来直接获取它们：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This next section grabs all the user input we need for our prediction, from
    the island the researcher is on to the sex of the penguin, as well as the penguin’s
    bill and flipper measurements, which prepares us for the prediction of penguin
    species in the following code:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的这一部分获取我们进行预测所需的所有用户输入，从研究人员所在的岛屿到企鹅的性别，以及企鹅的鸟嘴和鳍肢测量值，这些准备工作为以下代码中企鹅物种的预测做准备：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'And now, this final section creates multiple histograms to explain the predictions
    made by the model. In particular, these plots show the bill length/bill depth/flipper
    length separated by the species’ hue. We use these three variables because our
    feature importance graph told us that those were the best predictors of species
    in *Chapter 4*, *Machine Learning and AI with Streamlit*:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，最后这一部分创建了多个直方图，用来解释模型所做的预测。特别地，这些图表展示了按物种的色调分开的鸟嘴长度/鸟嘴深度/鳍肢长度。我们使用这三个变量，因为我们的特征重要性图表告诉我们，这些是*第四章*中物种的最佳预测因子，*《Streamlit与机器学习和人工智能》*：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now that we are in the correct folder with the right files, we will use the
    following code to initialize our first repository and to add and then commit all
    our files to the repository:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经进入了正确的文件夹，并且里面有所需的文件，我们将使用以下代码来初始化第一个仓库，并将所有文件添加到仓库中然后提交：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Our next step is to connect the Git repository from our local device to our
    GitHub account:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的下一步是将本地设备上的Git仓库与GitHub帐户连接起来：
- en: 'First, we need to set up a new repository by going back to the GitHub website
    and clicking the **New repository** button, as shown in the following screenshot:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要通过返回GitHub网站并点击**新建仓库**按钮来设置新仓库，如以下截图所示：
- en: '![Figure 5.1 – Setting up a new repository ](img/B18444_05_01.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.1 – 设置新仓库](img/B18444_05_01.png)'
- en: 'Figure 5.1: Setting up a new repository'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.1：设置新仓库
- en: We can then fill out our repository name (`penguin_ml`), and click **Create
    repository**. In my case, I already have a repository with this name, hence the
    GitHub error telling me so, but your example should work cleanly.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们可以填写仓库名称（`penguin_ml`），并点击**创建仓库**。在我的例子中，我已经有一个同名的仓库，因此GitHub会提示错误，但你的示例应该可以正常创建。
- en: '![Figure 5.2 – Repo creation  ](img/B18444_05_02.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.2 – 创建仓库](img/B18444_05_02.png)'
- en: 'Figure 5.2: Repo creation'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.2：创建仓库
- en: 'Now that we have a new repository on GitHub, and also have a repository locally,
    we need to connect the two. The following code connects the two repositories and
    pushes our code to the GitHub repo; GitHub also suggests how to connect two repositories
    after you click **Create repository**:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 既然我们在GitHub上有了新仓库，并且本地也有一个仓库，我们需要将这两个仓库连接起来。以下代码将这两个仓库连接，并将我们的代码推送到GitHub仓库；GitHub还会在点击**创建仓库**后建议如何连接这两个仓库：
- en: '[PRE7]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We should now see our `penguin_ml` files in our GitHub repo! If and when we
    have new code to push to our repository, we can follow the general format of using
    `git` `add`to add the file changes, `git``commit``–m``"commit message"`, and then
    finally, `git``push` to push the changes to our repository.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们应该能在 GitHub 仓库中看到我们的 `penguin_ml` 文件！如果我们有新的代码需要推送到仓库，我们可以按照常规格式使用 `git
    add` 添加文件更改，`git commit -m "commit message"` 提交更改，最后使用 `git push` 推送更改到仓库。
- en: We can now move on to the deployment process on the Streamlit side.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以继续 Streamlit 端的部署过程了。
- en: Deploying with Streamlit Community Cloud
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Streamlit Community Cloud 部署
- en: 'Now that all of our necessary files are in the GitHub repository, we have almost
    all that we need to deploy our application. You can use the following list of
    steps to deploy our application:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们所有的必要文件都已经在 GitHub 仓库中，我们几乎拥有了部署应用程序所需的一切。你可以按照以下步骤部署我们的应用程序：
- en: 'When we deploy to Streamlit Community Cloud, Streamlit uses its own servers
    to host the app. Because of this, we need to explicitly tell Streamlit which Python
    libraries are required for our app to run. The following code installs a very
    helpful library called `pipreqs` and creates a `requirements.txt` file in the
    format we need for Streamlit:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们部署到 Streamlit Community Cloud 时，Streamlit 会使用其自己的服务器来托管应用程序。因此，我们需要明确告诉 Streamlit
    我们的应用程序运行所需的 Python 库。以下代码安装了一个非常有用的库 `pipreqs`，并创建了一个符合 Streamlit 格式的 `requirements.txt`
    文件：
- en: '[PRE8]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'When we look at our `requirements.txt` file, we can see that `pipreqs` looked
    through all of our Python files, checked what we imported and used, and created
    a file that Streamlit can use to install the exact same versions of our libraries
    to prevent errors:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们查看 `requirements.txt` 文件时，可以看到 `pipreqs` 检查了我们所有的 Python 文件，检查了我们导入和使用的内容，并创建了一个文件，Streamlit
    可以使用它来安装相同版本的库，以避免错误：
- en: '![](img/B18444_05_03.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18444_05_03.png)'
- en: 'Figure 5.3: Requirements.txt'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.3：Requirements.txt
- en: 'We have a new file, so we need to also add it to our GitHub repository. The
    following code adds `requirements.txt` to our repository:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们有了一个新文件，因此也需要将其添加到我们的 GitHub 仓库中。以下代码将 `requirements.txt` 添加到我们的仓库：
- en: '[PRE9]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, our last step is to sign up for Streamlit Community Cloud ([share.streamlit.io](http://share.streamlit.io))
    and, once logged in, proceed to click on the **New App** button. After that, we
    can point Streamlit Community Cloud directly to the Python file that hosts our
    app’s code, which in our case is called `penguins_streamlit.py`. You should also
    change the username from my personal GitHub username (**tylerjrichards**) to your
    own:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们的最后一步是注册 Streamlit Community Cloud ([share.streamlit.io](http://share.streamlit.io))，登录后，点击
    **New App** 按钮。之后，我们可以直接将 Streamlit Community Cloud 指向承载我们应用程序代码的 Python 文件，在我们的例子中该文件名为
    `penguins_streamlit.py`。你还需要将用户名从我个人的 GitHub 用户名 (**tylerjrichards**) 更改为你自己的：
- en: '![](img/B18444_05_04.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18444_05_04.png)'
- en: 'Figure 5.4: Deploying from GitHub'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.4：从 GitHub 部署
- en: 'After the app is built, we have a fully deployed Streamlit app. Whenever we
    make changes to the GitHub repository, we will see such changes reflected in the
    app. For example, the following code makes a change to the title of our app (for
    brevity, we will only show enough code to illustrate the change):'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用构建完成后，我们就有了一个完全部署的 Streamlit 应用。每当我们对 GitHub 仓库进行更改时，应用中将反映这些更改。例如，以下代码对我们的应用标题进行更改（为了简便起见，我们将仅展示足够的代码来说明更改）：
- en: '[PRE10]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, to push the change, we need to update our GitHub repository. We will do
    that by using the following code:'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，为了推送更改，我们需要更新我们的 GitHub 仓库。我们将通过以下代码来实现：
- en: '[PRE11]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'When we go back to our app, it will have its own unique URL. If you ever cannot
    find your Streamlit apps, you can always find them at [share.streamlit.io](http://share.streamlit.io).
    Now the top of our app should look like the following screenshot:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们返回到应用程序时，它将有一个独特的 URL。如果你无法找到你的 Streamlit 应用，可以随时通过 [share.streamlit.io](http://share.streamlit.io)
    查找它们。现在，我们应用程序的顶部应该像下面的截图一样：
- en: '![Figure 5.5 – Our deployed Streamlit app ](img/B18444_05_05.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.5 – 我们部署的 Streamlit 应用](img/B18444_05_05.png)'
- en: 'Figure 5.5: Our deployed Streamlit app'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.5：我们部署的 Streamlit 应用
- en: It may take a couple of minutes for the app to reload!
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序重新加载可能需要几分钟时间！
- en: Now we have a fully deployed Streamlit app! We can share this link with friends
    and colleagues or on social media sites such as Twitter/X (if you make an interesting
    Streamlit app with the help of this book, please tweet it at me `@tylerjrichards`;
    I would love to see it!). Now, let’s learn how to debug our Streamlit apps. The
    app for this chapter can be found at [https://penguins.streamlit.app/](https://penguins.streamlit.app/)
    if you want to compare! Creating and deploying Streamlit apps, and creating and
    deploying software in general, always has some roadblocks or errors. Our next
    section is focused on learning how to debug our development and deployment of
    apps!
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经成功部署了一个完整的 Streamlit 应用程序！我们可以将这个链接分享给朋友、同事或在社交媒体网站上，比如 Twitter/X（如果你在本书的帮助下制作了一个有趣的
    Streamlit 应用，请在推特上 @我`@tylerjrichards`，我很想看看！）。现在，让我们学习如何调试我们的 Streamlit 应用程序。本章的应用程序可以在
    [https://penguins.streamlit.app/](https://penguins.streamlit.app/) 找到，如果你想进行对比！创建和部署
    Streamlit 应用程序，和一般的软件创建与部署一样，总是会遇到一些障碍或错误。我们接下来的部分将专注于学习如何调试我们在应用开发和部署过程中的问题！
- en: Debugging Streamlit Community Cloud
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调试 Streamlit Community Cloud
- en: Streamlit Community Cloud also gives us access to the logs of our apps themselves,
    which will show up on our terminal if we deploy our apps locally. At the bottom
    right, whenever we view our own applications, there is a **Manage Application**
    button, which allows us to access our logs. From this menu of options, we can
    reboot, delete, or download logs from our app, along with viewing our other available
    apps and logging out from Streamlit.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Streamlit Community Cloud 还允许我们访问应用程序的日志，这些日志如果我们在本地部署应用程序，将会显示在终端上。在右下角，每当我们查看自己的应用程序时，都会有一个**管理应用程序**按钮，允许我们访问日志。从这个选项菜单中，我们可以重新启动、删除或下载应用程序的日志，并查看其他可用的应用程序，或者从
    Streamlit 登出。
- en: Streamlit Secrets
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Streamlit 秘密
- en: When creating and deploying Streamlit apps, you may want to use some information
    that is not viewable by the user of your app, such as a password or API key. However,
    the default in Streamlit Community Cloud is to use public GitHub repositories
    with entirely public code, data, and models. But if, say, you want to use a private
    API key, as many APIs (for example, Twitter’s scraping API, or the Google Maps
    API) require, want to programmatically access data stored in a password-protected
    database, or even want to password-protect your Streamlit app, you need a way
    to expose a bit of data to Streamlit that is private. Streamlit’s answer to this
    is Streamlit Secrets, which lets us set hidden and private “secrets” in each app.
    Let’s start by creating a password to protect our Streamlit applications, specifically,
    our existing Penguin app.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建和部署 Streamlit 应用程序时，您可能希望使用一些用户无法查看的信息，比如密码或 API 密钥。然而，Streamlit Community
    Cloud 默认使用的是完全公开的 GitHub 仓库，其中包含完全公开的代码、数据和模型。但如果，比如说，你想使用一个私密的 API 密钥（许多 API，比如
    Twitter 的抓取 API 或 Google Maps API，都需要），或者想编程访问存储在受密码保护的数据库中的数据，甚至想给 Streamlit
    应用程序设置密码保护，你就需要一种方法来公开一些私密的数据给 Streamlit。Streamlit 的解决方案就是 Streamlit 秘密，它让我们在每个应用程序中设置隐藏和私密的“秘密”。让我们从为我们的
    Streamlit 应用程序创建一个密码开始，特别是我们现有的企鹅应用程序。
- en: 'To start out, we can edit the top of our app to require a user to enter a password
    before the rest of the application loads. We can use the `st.stop()` function
    to stop the app from running if the password is incorrect by using the following
    code:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 一开始，我们可以编辑应用程序顶部，要求用户在加载其余部分之前输入密码。我们可以使用 `st.stop()` 函数，通过以下代码，如果密码不正确，停止应用程序的运行：
- en: '[PRE12]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This code will result in the next screenshot, and the rest will only load if
    the user inputs the `streamlit_password` string in the text input box:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将生成下一个截图，只有用户在文本输入框中输入`streamlit_password`字符串时，其余部分才会加载：
- en: '![Figure 5.6 – Password checker ](img/B18444_05_06.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.6 – 密码检查器](img/B18444_05_06.png)'
- en: 'Figure 5.6: Password checker'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.6：密码检查器
- en: 'To create a Streamlit Secret, we just need to head over to the Streamlit Community
    Cloud main page at [https://share.streamlit.io/](https://share.streamlit.io/)
    and click the **Edit secrets** option, as shown in the next screenshot:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个 Streamlit 秘密，我们只需前往 Streamlit Community Cloud 的主页 [https://share.streamlit.io/](https://share.streamlit.io/)，然后点击**编辑秘密**选项，如下图所示：
- en: '![Figure 5.7 – Secrets ](img/B18444_05_07.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.7 – 秘密](img/B18444_05_07.png)'
- en: 'Figure 5.7: Secrets'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.7：秘密
- en: 'Once we click on the **Edit secrets** button, we can add new Streamlit Secrets
    to our app:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们点击**编辑秘密**按钮，就可以将新的 Streamlit 秘密添加到应用程序中：
- en: '![Figure 5.8 – Our first Streamlit Secret ](img/B18444_05_08.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.8 – 我们的第一个 Streamlit 秘密](img/B18444_05_08.png)'
- en: 'Figure 5.8: Our first Streamlit Secret'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.8：我们的第一个 Streamlit 秘密
- en: 'Our last step is to read Streamlit Secrets from our deployed app, which we
    can do by calling `st.secrets` and the variable we created in Secrets. The following
    code replaces our hardcoded password with the Streamlit Secret:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的最后一步是从已部署的应用中读取Streamlit Secrets，我们可以通过调用`st.secrets`和在Secrets中创建的变量来实现。以下代码将硬编码的密码替换为Streamlit
    Secret：
- en: '[PRE13]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This code will create the following Streamlit app, password-protected with
    the Streamlit Secret that we set:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将创建一个以下的Streamlit应用，并用我们设置的Streamlit Secret进行密码保护：
- en: '![Figure 5.9 – Deployed password ](img/B18444_05_09.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.9 – 部署的密码](img/B18444_05_09.png)'
- en: 'Figure 5.9: Deployed password'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.9：部署的密码
- en: When we push this code to our GitHub repository and reboot our Streamlit app,
    we will then have a password-protected Streamlit app deployed on Streamlit Community
    Cloud! We can use this same method for private API keys, or any other use case
    where we need to hide data from the user of the app.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将这段代码推送到GitHub仓库并重启Streamlit应用时，我们就会在Streamlit Community Cloud上部署一个受密码保护的Streamlit应用！我们可以使用相同的方法来保护私密API密钥，或任何其他需要隐藏数据的使用场景。
- en: Summary
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we’ve learned how to get started with Git and GitHub on the
    command line, how to debug apps on Streamlit Community Cloud, how to use Streamlit
    Secrets to use private data on public apps, and how to deploy our apps quickly
    using Streamlit Community Cloud. This completes part one of this book! Congratulations
    on making it to this point. The next section will use all of part one as a building
    block for more advanced topics, such as more complicated formatting and beautification
    of our Streamlit apps and using valuable open-source community-built add-ons called
    Streamlit Components.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何在命令行上开始使用Git和GitHub，如何在Streamlit Community Cloud上调试应用，如何使用Streamlit
    Secrets在公共应用中使用私密数据，以及如何快速部署我们的应用到Streamlit Community Cloud。这完成了本书的第一部分！恭喜你走到了这一阶段。接下来的部分将以第一部分为基础，深入探讨更复杂的主题，比如如何美化和格式化我们的Streamlit应用，以及如何使用名为Streamlit
    Components的开源社区插件。
- en: In the next chapter, we will cover beautifying Streamlit apps through themes,
    columns, and many more features.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讲解如何通过主题、列等多种功能美化Streamlit应用。
- en: Learn more on Discord
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Discord上了解更多
- en: 'To join the Discord community for this book – where you can share feedback,
    ask questions to the author, and learn about new releases – follow the QR code
    below:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 要加入本书的Discord社区——在这里你可以分享反馈、向作者提问并了解新版本——请扫描下面的二维码：
- en: '[https://packt.link/sl](https://packt.link/sl)'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/sl](https://packt.link/sl)'
- en: '![](img/QR_Code13440134443835796.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/QR_Code13440134443835796.png)'
