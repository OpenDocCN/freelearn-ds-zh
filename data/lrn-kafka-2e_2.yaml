- en: Chapter 2. Setting Up a Kafka Cluster
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。设置Kafka集群
- en: 'Now we are ready to play with the Apache Kafka publisher-subscriber messaging
    system. With Kafka, we can create multiple types of clusters, such as the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备使用Apache Kafka发布者-订阅者消息系统。使用Kafka，我们可以创建多种类型的集群，例如以下：
- en: A single node—single broker cluster
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单节点-单broker集群
- en: A single node—multiple broker clusters
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单节点-多broker集群
- en: Multiple nodes—multiple broker clusters
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多节点-多broker集群
- en: 'A Kafka cluster primarily has five main components:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Kafka集群主要有五个主要组件：
- en: '**Topic**: A topic is a category or feed name to which messages are published
    by the message producers. In Kafka, topics are partitioned and each partition
    is represented by the ordered immutable sequence of messages. A Kafka cluster
    maintains the partitioned log for each topic. Each message in the partition is
    assigned a unique sequential ID called the *offset*.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主题**：主题是消息生产者发布消息的类别或源名称。在Kafka中，主题被分区，每个分区由有序的不可变消息序列表示。Kafka集群为每个主题维护分区日志。分区中的每条消息都被分配一个称为*偏移量*的唯一顺序ID。'
- en: '**Broker**: A Kafka cluster consists of one or more servers where each one
    may have one or more server processes running and is called the broker. Topics
    are created within the context of broker processes.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Broker**：Kafka集群由一个或多个服务器组成，每个服务器可能运行一个或多个服务器进程，并称为broker。主题是在broker进程的上下文中创建的。'
- en: '**Zookeeper**: ZooKeeper serves as the coordination interface between the Kafka
    broker and consumers. The ZooKeeper overview given on the Hadoop Wiki site is
    as follows ([http://wiki.apache.org/hadoop/ZooKeeper/ProjectDescription](http://wiki.apache.org/hadoop/ZooKeeper/ProjectDescription)):'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Zookeeper**：ZooKeeper充当Kafka broker和消费者之间的协调接口。Hadoop Wiki网站上给出的ZooKeeper概述如下（[http://wiki.apache.org/hadoop/ZooKeeper/ProjectDescription](http://wiki.apache.org/hadoop/ZooKeeper/ProjectDescription)）：'
- en: '*"ZooKeeper allows distributed processes to coordinate with each other through
    a shared hierarchical name space of data registers (we call these registers znodes),
    much like a file system."*'
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*"ZooKeeper允许分布式进程通过共享的分层数据寄存器（我们称这些寄存器为znodes）协调彼此，就像文件系统一样。"*'
- en: 'The main differences between ZooKeeper and standard filesystems are that every
    znode can have data associated with it and znodes are limited to the amount of
    data that they can have. ZooKeeper was designed to store coordination data: status
    information, configuration, location information, and so on.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: ZooKeeper和标准文件系统之间的主要区别在于每个znode都可以与其关联数据，并且znode的数据量是有限的。ZooKeeper旨在存储协调数据：状态信息、配置、位置信息等。
- en: '**Producers**: Producers publish data to the topics by choosing the appropriate
    partition within the topic. For load balancing, the allocation of messages to
    the topic partition can be done in a round-robin fashion or using a custom defined
    function.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生产者**：生产者通过选择主题内的适当分区向主题发布数据。为了负载平衡，可以以循环方式或使用自定义定义的函数将消息分配给主题分区。'
- en: '**Consumer**: Consumers are the applications or processes that subscribe to
    topics and process the feed of published messages.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**消费者**：消费者是订阅主题并处理发布消息的应用程序或进程。'
- en: So let's start with a very basic cluster setup.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一个非常基本的集群设置开始。
- en: A single node – a single broker cluster
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单节点-单broker集群
- en: 'This is the starting point for learning Kafka. In the previous chapter, we
    installed Kafka on a single machine. Now it is time to set up a single node -
    single broker-based Kafka cluster, as shown in the following diagram:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这是学习Kafka的起点。在上一章中，我们在单台机器上安装了Kafka。现在是时候设置一个基于单节点-单broker的Kafka集群，如下图所示：
- en: '![A single node – a single broker cluster](img/3090OS_02_01.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![单节点-单broker集群](img/3090OS_02_01.jpg)'
- en: Starting the ZooKeeper server
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动ZooKeeper服务器
- en: 'Kafka provides the default and simple ZooKeeper configuration file used to
    launch a single local ZooKeeper instance although separate ZooKeeper installation
    can also be carried out while setting up the Kafka cluster. First start the local
    ZooKeeper instance using the following command:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Kafka提供了默认和简单的ZooKeeper配置文件，用于启动单个本地ZooKeeper实例，尽管在设置Kafka集群时也可以进行单独的ZooKeeper安装。首先使用以下命令启动本地ZooKeeper实例：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You should get output as shown in the following screenshot:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该得到如下屏幕截图中显示的输出：
- en: '![Starting the ZooKeeper server](img/3090OS_02_02.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![启动ZooKeeper服务器](img/3090OS_02_02.jpg)'
- en: Note
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Kafka comes with the required property files defining minimal properties required
    for a single broker—single node cluster.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Kafka带有定义单个broker-单节点集群所需的最小属性的必需属性文件。
- en: 'The important properties defined in `zookeeper.properties` are shown in the
    following code:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`zookeeper.properties`中定义的重要属性如下所示：'
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: By default, the ZooKeeper server will listen on `*:2181/tcp`. For detailed information
    on how to set up multiple ZooKeeper servers, visit [http://zookeeper.apache.org/](http://zookeeper.apache.org/).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，ZooKeeper服务器将侦听`*:2181/tcp`。有关如何设置多个ZooKeeper服务器的详细信息，请访问[http://zookeeper.apache.org/](http://zookeeper.apache.org/)。
- en: Starting the Kafka broker
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动Kafka broker
- en: 'Now start the Kafka broker in the new console window using the following command:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在使用以下命令在新的控制台窗口中启动Kafka broker：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You should now see output as shown in the following screenshot:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您应该看到如下屏幕截图中显示的输出：
- en: '![Starting the Kafka broker](img/3090OS_02_03.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![启动Kafka broker](img/3090OS_02_03.jpg)'
- en: 'The `server.properties` file defines the following important properties required
    for the Kafka broker:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`server.properties`文件定义了Kafka broker所需的以下重要属性：'
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The last section in this chapter defines a few additional and important properties
    available for the Kafka broker.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的最后一部分定义了Kafka broker可用的一些其他重要属性。
- en: Creating a Kafka topic
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建Kafka主题
- en: 'Kafka provides a command line utility to create topics on the Kafka server.
    Let''s create a topic named `kafkatopic` with a single partition and only one
    replica using this utility:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Kafka提供了一个命令行实用程序，在Kafka服务器上创建主题。让我们使用此实用程序创建一个名为`kafkatopic`的主题，该主题只有一个分区和一个副本：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You should get output on the Kafka server window as shown in the following
    screenshot:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该会在Kafka服务器窗口上得到如下截图所示的输出：
- en: '![Creating a Kafka topic](img/3090OS_02_04.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![创建Kafka主题](img/3090OS_02_04.jpg)'
- en: 'The `kafka-topics.sh` utility will create a topic, override the default number
    of partitions from two to one, and show a successful creation message. It also
    takes ZooKeeper server information, as in this case: `localhost:2181`. To get
    a list of topics on any Kafka server, use the following command in a new console
    window:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`kafka-topics.sh`实用程序将创建一个主题，将默认的分区数从两个覆盖为一个，并显示成功创建消息。它还需要ZooKeeper服务器信息，如在本例中：`localhost:2181`。要在任何Kafka服务器上获取主题列表，请在新的控制台窗口中使用以下命令：'
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Starting a producer to send messages
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动生产者以发送消息
- en: 'Kafka provides users with a command line producer client that accepts inputs
    from the command line and publishes them as a message to the Kafka cluster. By
    default, each new line entered is considered as a new message. The following command
    is used to start the console-based producer in a new console window to send the
    messages:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Kafka为用户提供了一个命令行生产者客户端，可以从命令行接受输入，并将其作为消息发布到Kafka集群。默认情况下，每输入一行被视为一个新消息。以下命令用于在新的控制台窗口中启动基于控制台的生产者以发送消息：
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下截图所示：
- en: '![Starting a producer to send messages](img/3090OS_02_05.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![启动生产者以发送消息](img/3090OS_02_05.jpg)'
- en: 'While starting the producer''s command line client, the following parameters
    are required:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动生产者的命令行客户端时，需要以下参数：
- en: '`broker-list`'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`broker-list`'
- en: '`topic`'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`topic`'
- en: The `broker-list` parameter specifies the brokers to be connected as `<node_address:port>`—that
    is, `localhost:9092`. The `kafkatopic` topic was created in the *Creating a Kafka
    topic* section. The topic name is required to send a message to a specific group
    of consumers who have subscribed to the same topic, `kafkatopic`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`broker-list`参数指定要连接的代理为`<node_address:port>`—即`localhost:9092`。`kafkatopic`主题是在*创建Kafka主题*部分创建的。要将消息发送到订阅了相同主题`kafkatopic`的一组特定消费者，需要主题名称。'
- en: 'Now type the following messages on the console window:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在控制台窗口上键入以下消息：
- en: Type `Welcome to Kafka` and press *Enter*
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 键入`欢迎来到Kafka`并按*Enter*
- en: Type `This is single broker cluster` and press *Enter*
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 键入`这是单个代理集群`并按*Enter*
- en: 'You should see output as shown in the following screenshot:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该会看到如下截图所示的输出：
- en: '![Starting a producer to send messages](img/3090OS_02_06.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![启动生产者以发送消息](img/3090OS_02_06.jpg)'
- en: 'Try some more messages. The default properties for the consumer are defined
    in `producer.properties`. The important properties are:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试一些更多的消息。消费者的默认属性在`producer.properties`中定义。重要的属性是：
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Detailed information about how to write producers for Kafka and producer properties
    will be discussed in [Chapter 4](ch04.html "Chapter 4. Writing Producers"), *Writing
    Producers*.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 有关如何为Kafka编写生产者和生产者属性的详细信息将在[第4章](ch04.html "第4章。编写生产者")中讨论，*编写生产者*。
- en: Starting a consumer to consume messages
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动消费者以消费消息
- en: 'Kafka also provides a command line consumer client for message consumption.
    The following command is used to start a console-based consumer that shows the
    output at the command line as soon as it subscribes to the topic created in the
    Kafka broker:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Kafka还为消息消费提供了一个命令行消费者客户端。以下命令用于启动基于控制台的消费者，一旦订阅了Kafka代理中创建的主题，就会在命令行上显示输出：
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'On execution of the previous command, you should get output as shown in the
    following screenshot:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行上一个命令时，您应该会得到如下截图所示的输出：
- en: '![Starting a consumer to consume messages](img/3090OS_02_07.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![启动消费者以消费消息](img/3090OS_02_07.jpg)'
- en: 'The default properties for the consumer are defined in `/config/consumer.properties`.
    The important properties are:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 消费者的默认属性在`/config/consumer.properties`中定义。重要的属性是：
- en: '[PRE9]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Detailed information about how to write consumers for Kafka and consumer properties
    is discussed in [Chapter 5](ch05.html "Chapter 5. Writing Consumers"), *Writing
    Consumers*.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 有关如何为Kafka编写消费者和消费者属性的详细信息将在[第5章](ch05.html "第5章。编写消费者")中讨论，*编写消费者*。
- en: By running all four components (`zookeeper`, `broker`, `producer`, and `consumer`)
    in different terminals, you will be able to enter messages from the producer's
    terminal and see them appearing in the subscribed consumer's terminal.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在不同的终端中运行所有四个组件（`zookeeper`，`broker`，`producer`和`consumer`），您将能够从生产者的终端输入消息，并在订阅的消费者的终端中看到它们出现。
- en: Usage information for both producer and consumer command line tools can be viewed
    by running the command with no arguments.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过不带参数运行命令来查看生产者和消费者命令行工具的使用信息。
- en: A single node – multiple broker clusters
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单节点 - 多代理集群
- en: 'Now we have come to the next level of the Kafka cluster. Let us now set up
    a single node - multiple broker-based Kafka cluster as shown in the following
    diagram:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经来到Kafka集群的下一个级别。让我们现在设置一个单节点 - 多代理的Kafka集群，如下图所示：
- en: '![A single node – multiple broker clusters](img/3090OS_02_08.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![单节点 - 多代理集群](img/3090OS_02_08.jpg)'
- en: Starting ZooKeeper
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动ZooKeeper
- en: The first step in starting ZooKeeper remains the same for this type of cluster.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动ZooKeeper的第一步对于这种类型的集群是相同的。
- en: Starting the Kafka broker
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动Kafka代理
- en: 'For setting up multiple brokers on a single node, different server property
    files are required for each broker. Each property file will define unique, different
    values for the following properties:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 要在单个节点上设置多个代理，需要为每个代理准备不同的服务器属性文件。每个属性文件将为以下属性定义唯一的不同值：
- en: '`broker.id`'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`broker.id`'
- en: '`port`'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`port`'
- en: '`log.dir`'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log.dir`'
- en: 'For example, in `server-1.properties` used for `broker1`, we define the following:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在用于`broker1`的`server-1.properties`中，我们定义如下：
- en: '`broker.id=1`'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`broker.id=1`'
- en: '`port=9093`'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`port=9093`'
- en: '`log.dir=/tmp/kafka-logs-1`'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log.dir=/tmp/kafka-logs-1`'
- en: 'Similarly, for `server-2.properties`, which is used for `broker2`, we define
    the following:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，对于`broker2`使用的`server-2.properties`，我们定义如下：
- en: '`broker.id=2`'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`broker.id=2`'
- en: '`port=9094`'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`port=9094`'
- en: '`log.dir=/tmp/kafka-logs-2`'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log.dir=/tmp/kafka-logs-2`'
- en: 'A similar procedure is followed for all new brokers. While defining the properties,
    we have changed the port numbers as all additional brokers will still be running
    on the same machine but, in the production environment, brokers will run on multiple
    machines. Now we start each new broker in a separate console window using the
    following commands:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 所有新代理都遵循类似的过程。在定义属性时，我们已更改端口号，因为所有附加代理仍将在同一台机器上运行，但在生产环境中，代理将在多台机器上运行。现在，我们使用以下命令在单独的控制台窗口中启动每个新代理：
- en: '[PRE10]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Creating a Kafka topic using the command line
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用命令行创建Kafka主题
- en: 'Using the command line utility for creating topics on the Kafka server, let''s
    create a topic named `replicated-kafkatopic` with two partitions and two replicas:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Kafka服务器上的命令行实用程序创建主题，让我们创建一个名为`replicated-kafkatopic`的主题，其中包含两个分区和两个副本：
- en: '[PRE11]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Starting a producer to send messages
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动生产者发送消息
- en: 'If we use a single producer to get connected to all the brokers, we need to
    pass the initial list of brokers, and the information of the remaining brokers
    is identified by querying the broker passed within `broker-list`, as shown in
    the following command. This metadata information is based on the topic name:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用单个生产者连接到所有代理，我们需要传递代理的初始列表，并且剩余代理的信息是通过查询传递给`broker-list`的代理来识别的，如下命令所示。此元数据信息基于主题名称：
- en: '[PRE12]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Use the following command to start the producer:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令启动生产者：
- en: '[PRE13]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: If we have a requirement to run multiple producers connecting to different combinations
    of brokers, we need to specify the broker list for each producer as we did in
    the case of multiple brokers.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们有多个生产者连接到不同组合的代理的要求，我们需要为每个生产者指定代理列表，就像在多个代理的情况下所做的那样。
- en: Starting a consumer to consume messages
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动消费者以消费消息
- en: 'The same consumer client, as in the previous example, will be used in this
    process. Just as before, it shows the output on the command line as soon as it
    subscribes to the topic created in the Kafka broker:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 与上一个示例中一样的消费者客户端将在此过程中使用。就像以前一样，它在订阅Kafka代理中创建的主题后立即在命令行上显示输出：
- en: '[PRE14]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Multiple nodes – multiple broker clusters
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多个节点-多个代理集群
- en: This cluster scenario is not discussed in detail in this book but, as in the
    case of the single node—multiple broker Kafka cluster, where we set up multiple
    brokers on each node, we should install Kafka on each node of the cluster, and
    all the brokers from the different nodes need to connect to the same ZooKeeper.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书没有详细讨论此集群方案，但是，就像在单节点-多代理Kafka集群的情况下，在每个节点上设置多个代理一样，我们应该在集群的每个节点上安装Kafka，并且来自不同节点的所有代理都需要连接到相同的ZooKeeper。
- en: For testing purposes, all the commands will remain identical to the ones we
    used in the single node—multiple brokers cluster.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 出于测试目的，所有命令将保持与我们在单节点-多代理集群中使用的命令相同。
- en: 'The following diagram shows the cluster scenario where multiple brokers are
    configured on multiple nodes (Node 1 and Node 2, in this case), and the producers
    and consumers are connected in different combinations:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了在多个节点（在本例中为节点1和节点2）上配置多个代理的集群方案，生产者和消费者以不同的组合连接：
- en: '![Multiple nodes – multiple broker clusters](img/3090OS_02_09.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![多节点-多代理集群](img/3090OS_02_09.jpg)'
- en: The Kafka broker property list
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kafka经纪人属性列表
- en: The following is the list of a few important properties that can be configured
    for the Kafka broker. For the complete list, visit [http://kafka.apache.org/documentation.html#brokerconfig](http://kafka.apache.org/documentation.html#brokerconfig).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是可以为Kafka代理配置的一些重要属性列表。有关完整列表，请访问[http://kafka.apache.org/documentation.html#brokerconfig](http://kafka.apache.org/documentation.html#brokerconfig)。
- en: '| Property name | Description | Default value |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| 属性名称 | 描述 | 默认值 |'
- en: '| --- | --- | --- |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `broker.id` | Each broker is uniquely identified by a non-negative integer
    ID. This ID serves as the broker''s name and allows the broker to be moved to
    a different host/port without confusing consumers. | `0` |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| `broker.id` | 每个代理都由非负整数ID唯一标识。此ID用作代理的名称，并允许将代理移动到不同的主机/端口而不会使消费者困惑。 | `0`
    |'
- en: '| `log.dirs` | These are the directories in which the log data is stored. Each
    new partition that is created will be placed in the directory that currently has
    the fewest partitions. | `/tmp/kafka-logs` |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| `log.dirs` | 这些是存储日志数据的目录。创建的每个新分区将放置在当前具有最少分区的目录中。 | `/tmp/kafka-logs` |'
- en: '| `zookeeper.connect` | This specifies the ZooKeeper''s connection string in
    the `hostname:port/chroot` form. Here, `chroot` is a base directory that is prepended
    to all path operations (this effectively namespaces all Kafka znodes to allow
    sharing with other applications on the same ZooKeeper cluster). | `localhost:2181`
    |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| `zookeeper.connect` | 这指定了ZooKeeper的连接字符串，格式为`hostname:port/chroot`。在这里，`chroot`是一个基本目录，它被预先添加到所有路径操作（这有效地为所有Kafka
    znode命名空间，以允许与ZooKeeper集群上的其他应用程序共享）。 | `localhost:2181` |'
- en: '| `host.name` | This is the hostname of the broker. If this is set, it will
    only bind to this address. If this is not set, it will bind to all interfaces,
    and publish one to ZooKeeper. | `Null` |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| `host.name` | 这是代理的主机名。如果设置了这个，它将只绑定到这个地址。如果没有设置，它将绑定到所有接口，并发布到ZooKeeper。
    | `Null` |'
- en: '| `num.partitions` | This is the default number of partitions per topic if
    a partition count isn''t given at the time of topic creation. | `1` |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| `num.partitions` | 如果在创建主题时没有给出分区计数，则这是每个主题的默认分区数。 | `1` |'
- en: '| `auto.create.topics.enable` | This enables auto-creation of the topic on
    the server. If this is set to true, then attempts to produce, consume, or fetch
    metadata for a non-existent topic will automatically create it with the default
    replication factor and number of partitions. | `True` |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| `auto.create.topics.enable` | 这启用了服务器上主题的自动创建。如果设置为true，则尝试生成、消费或获取不存在的主题的元数据将自动使用默认的复制因子和分区数创建它。
    | `True` |'
- en: '| `default.replication.factor` | This is the default replication factor for
    automatically created topics. | `1` |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| `default.replication.factor` | 这是自动创建主题的默认复制因子。 | `1` |'
- en: Summary
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to set up a Kafka cluster with single/multiple
    brokers on a single node, run command line producers and consumers, and exchange
    some messages. We also discussed important settings for the Kafka broker.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了如何在单个节点上设置具有单个/多个代理的Kafka集群，运行命令行生产者和消费者，并交换一些消息。我们还讨论了Kafka代理的重要设置。
- en: In the next chapter, we will look at the internal design of Kafka.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看一下Kafka的内部设计。
