- en: Chapter 13. Stochastic Dynamical Systems
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第13章 随机动力学系统
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: Simulating a discrete-time Markov chain
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模拟离散时间马尔科夫链
- en: Simulating a Poisson process
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模拟泊松过程
- en: Simulating a Brownian motion
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模拟布朗运动
- en: Simulating a stochastic differential equation
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模拟随机微分方程
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: '**Stochastic dynamical systems** are dynamical systems subjected to the effect
    of noise. The randomness brought by the noise takes into account the variability
    observed in real-world phenomena. For example, the evolution of a share price
    typically exhibits long-term behaviors along with faster, smaller-amplitude oscillations,
    reflecting day-to-day or hour-to-hour variations.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**随机动力学系统**是受噪声影响的动力学系统。噪声带来的随机性考虑了现实世界现象中观察到的变化性。例如，股价的演变通常表现为长期行为，并伴有较快、幅度较小的振荡，反映了日常或小时的波动。'
- en: Applications of stochastic systems to data science include methods for statistical
    inference (such as Markov chain Monte Carlo) and stochastic modeling for time
    series or geospatial data.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 随机系统在数据科学中的应用包括统计推断方法（如马尔科夫链蒙特卡洛）和用于时间序列或地理空间数据的随机建模。
- en: Stochastic discrete-time systems include discrete-time **Markov chains**. The
    **Markov property** means that the state of a system at time *n+1* only depends
    on its state at time *n*. **Stochastic cellular automata**, which are stochastic
    extensions of cellular automata, are particular Markov chains.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 随机离散时间系统包括离散时间**马尔科夫链**。**马尔科夫性质**意味着系统在时间*n+1*时刻的状态仅依赖于它在时间*n*时刻的状态。**随机元胞自动机**是元胞自动机的随机扩展，是特殊的马尔科夫链。
- en: As far as continuous-time systems are concerned, Ordinary Differential Equations
    with noise yield **Stochastic Differential Equations** (**SDEs**). Partial Differential
    Equations with noise yield **Stochastic Partial Differential Equations** (**SPDEs**).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 至于连续时间系统，带噪声的常微分方程会得到**随机微分方程**（**SDEs**）。带噪声的偏微分方程会得到**随机偏微分方程**（**SPDEs**）。
- en: '**Point processes** are another type of stochastic process. These processes
    model the random occurrence of instantaneous events over time (arrival of customers
    in a queue or action potentials in the nervous system) or space (locations of
    trees in a forest, cities in a territory, or stars in the sky).'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**点过程**是另一种随机过程。这些过程建模了随时间（例如排队中顾客的到达或神经系统中的动作电位）或空间（例如森林中树木的位置、区域中的城市或天空中的星星）随机发生的瞬时事件。'
- en: Mathematically, the theory of stochastic dynamical systems is based on probability
    theory and measure theory. The study of continuous-time stochastic systems builds
    upon stochastic calculus, an extension of infinitesimal calculus (including derivatives
    and integrals) to stochastic processes.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 从数学上讲，随机动力学系统的理论基于概率论和测度论。连续时间随机系统的研究建立在随机微积分的基础上，随机微积分是对微积分（包括导数和积分）的扩展，适用于随机过程。
- en: In this chapter, we will see how to simulate different kinds of stochastic systems
    with Python.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看到如何使用 Python 模拟不同种类的随机系统。
- en: References
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考资料
- en: 'Here are a few references on the subject:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些相关的参考资料：
- en: An overview of stochastic dynamical systems, available at [www.scholarpedia.org/article/Stochastic_dynamical_systems](http://www.scholarpedia.org/article/Stochastic_dynamical_systems)
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随机动力学系统概述，见于 [www.scholarpedia.org/article/Stochastic_dynamical_systems](http://www.scholarpedia.org/article/Stochastic_dynamical_systems)
- en: The Markov property on Wikipedia, available at [https://en.wikipedia.org/wiki/Markov_property](https://en.wikipedia.org/wiki/Markov_property)
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维基百科上的马尔科夫性质，见于 [https://en.wikipedia.org/wiki/Markov_property](https://en.wikipedia.org/wiki/Markov_property)
- en: Simulating a discrete-time Markov chain
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模拟离散时间马尔科夫链
- en: Discrete-time Markov chains are stochastic processes that undergo transitions
    from one state to another in a state space. Transitions occur at every time step.
    Markov chains are characterized by their lack of memory in that the probability
    to undergo a transition from the current state to the next depends only on the
    current state, not the previous ones. These models are widely used in scientific
    and engineering applications.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 离散时间马尔科夫链是随机过程，它在状态空间中从一个状态转换到另一个状态。每个时间步都会发生状态转换。马尔科夫链的特点是没有记忆，即从当前状态到下一个状态的转换概率仅依赖于当前状态，而不依赖于之前的状态。这些模型在科学和工程应用中得到了广泛的使用。
- en: Continuous-time Markov processes also exist and we will cover particular instances
    later in this chapter.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 连续时间马尔可夫过程也存在，我们将在本章稍后讨论特定的实例。
- en: Markov chains are relatively easy to study mathematically and to simulate numerically.
    In this recipe, we will simulate a simple Markov chain modeling the evolution
    of a population.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 马尔可夫链在数学上相对容易研究，并且可以通过数值方法进行模拟。在这个案例中，我们将模拟一个简单的马尔可夫链，模拟种群的演化。
- en: How to do it...
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何执行...
- en: 'Let''s import NumPy and matplotlib:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们导入NumPy和matplotlib：
- en: '[PRE0]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We consider a population that cannot comprise more than *N=100* individuals,
    and define the birth and death rates:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们考虑一个最大只能包含*N=100*个个体的种群，并定义出生和死亡率：
- en: '[PRE1]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We simulate a Markov chain on the finite space *{0, 1, ..., N}*. Each state
    represents a population size. The `x` vector will contain the population size
    at each time step. We set the initial state to *x[0]=25* (that is, there are 25
    individuals in the population at initialization time):'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在有限空间*{0, 1, ..., N}*上模拟一个马尔可夫链。每个状态代表一个种群大小。`x`向量将在每个时间步包含种群大小。我们将初始状态设置为*x[0]=25*（即初始化时种群中有25个个体）：
- en: '[PRE2]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now we simulate our chain. At each time step *t*, there is a new birth with
    probability *ax[t]*, and independently, there is a new death with probability
    *bx[t]*. These probabilities are proportional to the size of the population at
    that time. If the population size reaches *0* or *N*, the evolution stops:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们模拟我们的链。在每个时间步*t*，有一个以*ax[t]*的概率出生，并且独立地，有一个以*bx[t]*的概率死亡。这些概率与当时的种群大小成正比。如果种群大小达到*0*或*N*，演化停止：
- en: '[PRE3]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Let''s look at the evolution of the population size:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们看看种群大小的演变：
- en: '[PRE4]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![How to do it...](img/4818OS_13_01.jpg)'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何执行...](img/4818OS_13_01.jpg)'
- en: We see that, at every time step, the population size can stay stable, increase,
    or decrease by 1.
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们看到，在每个时间步，种群大小可以保持稳定，增加，或者减少1。
- en: 'Now, we will simulate many independent trials of this Markov chain. We could
    run the previous simulation with a loop, but it would be very slow (two nested
    `for` loops). Instead, we *vectorize* the simulation by considering all independent
    trials at once. There is a single loop over time. At every time step, we update
    all trials simultaneously with vectorized operations on vectors. The `x` vector
    now contains the population size of all trials, at a particular time. At initialization
    time, the population sizes are set to random numbers between *0* and *N*:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将模拟多个独立的马尔可夫链试验。我们可以用循环运行之前的仿真，但那样会非常慢（两个嵌套的`for`循环）。相反，我们通过一次性考虑所有独立的试验来*向量化*仿真。这里只有一个关于时间的循环。在每个时间步，我们用向量化操作同时更新所有试验的结果。`x`向量现在包含所有试验在特定时间的种群大小。在初始化时，种群大小被设置为介于*0*和*N*之间的随机数：
- en: '[PRE5]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We define a function that performs the simulation. At every time step, we find
    the trials that undergo births and deaths by generating random vectors, and we
    update the population sizes with vector operations:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们定义一个执行仿真的函数。在每个时间步，我们通过生成随机向量来找到经历出生和死亡的试验，并通过向量操作更新种群大小：
- en: '[PRE6]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now, let''s look at the histograms of the population size at different times.
    These histograms represent the probability distribution of the Markov chain, estimated
    with independent trials (the Monte Carlo method):'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们来看一下在不同时间点的种群大小的直方图。这些直方图代表了马尔可夫链的概率分布，通过独立试验（蒙特卡洛方法）进行估计：
- en: '[PRE7]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![How to do it...](img/4818OS_13_02.jpg)'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何执行...](img/4818OS_13_02.jpg)'
- en: Whereas, initially, the population sizes look uniformly distributed between
    *0* and *N*, they appear to converge to *0* or *N* after a sufficiently long time.
    This is because the states *0* and *N* are **absorbing**; once reached, the chain
    cannot leave these states. Furthermore, these states can be reached from any other
    state.
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 而且，最初，种群大小看起来在*0*和*N*之间均匀分布，但经过足够长的时间后，它们似乎会收敛到*0*或*N*。这是因为*0*和*N*是**吸收状态**；一旦到达这些状态，链就无法离开这些状态。而且，这些状态可以从任何其他状态到达。
- en: How it works...
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Mathematically, a discrete-time Markov chain on a space *E* is a sequence of
    random variables *X[1], X[2], ...* that satisfy the Markov property:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 从数学上讲，一个离散时间马尔可夫链在空间*E*上是一个随机变量序列*X[1], X[2], ...*，它满足马尔可夫性质：
- en: '![How it works...](img/4818_13_03.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/4818_13_03.jpg)'
- en: A (stationary) Markov chain is characterized by the probability of transitions
    *P(X[j] | X[i])*. These values form a matrix called the **transition matrix**.
    This matrix is the adjacency matrix of a directed graph called the **state diagram**.
    Every node is a state, and the node *i* is connected to the node *j* if the chain
    has a non-zero probability of transition between these nodes.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 一个（平稳的）马尔可夫链的特点是转移概率 *P(X[j] | X[i])*。这些值构成一个矩阵，称为**转移矩阵**。这个矩阵是一个有向图的邻接矩阵，称为**状态图**。每个节点是一个状态，如果链条在这些节点之间有非零转移概率，则节点
    *i* 会连接到节点 *j*。
- en: There's more...
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容...
- en: Simulating a single Markov chain in Python is not particularly efficient because
    we need a `for` loop. However, simulating many independent chains following the
    same process can be made efficient with vectorization and parallelization (all
    tasks are independent, thus the problem is **embarrassingly parallel**). This
    is useful when we are interested in statistical properties of the chain (example
    of the Monte Carlo method).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中模拟单个马尔可夫链效率并不高，因为我们需要使用 `for` 循环。然而，通过向量化和并行化，可以高效地模拟许多独立的链条，这些链条遵循相同的过程（所有任务都是独立的，因此该问题是**令人尴尬地并行**的）。当我们关注链条的统计性质时，这种方法非常有用（例如蒙特卡罗方法的例子）。
- en: There is a vast literature on Markov chains. Many theoretical results can be
    established with linear algebra and probability theory. You can find references
    and textbooks on Wikipedia.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 关于马尔可夫链的文献非常广泛。许多理论结果可以通过线性代数和概率论来建立。你可以在维基百科上找到相关参考文献和教科书。
- en: Many generalizations of discrete-time Markov chains exist. Markov chains can
    be defined on infinite state spaces, or with a continuous time. Also, the Markov
    property is important in a broad class of stochastic processes.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 离散时间马尔可夫链有很多推广。马尔可夫链可以定义在无限状态空间上，或者在连续时间上定义。此外，马尔可夫性质在广泛的随机过程类别中非常重要。
- en: 'Here are a few references:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些参考文献：
- en: Markov chains on Wikipedia, available at [https://en.wikipedia.org/wiki/Markov_chain](https://en.wikipedia.org/wiki/Markov_chain)
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维基百科上的马尔可夫链，网址为 [https://en.wikipedia.org/wiki/Markov_chain](https://en.wikipedia.org/wiki/Markov_chain)
- en: Absorbing Markov chains on Wikipedia, available at [https://en.wikipedia.org/wiki/Absorbing_Markov_chain](https://en.wikipedia.org/wiki/Absorbing_Markov_chain)
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 吸收马尔可夫链，维基百科上有相关介绍，网址为 [https://en.wikipedia.org/wiki/Absorbing_Markov_chain](https://en.wikipedia.org/wiki/Absorbing_Markov_chain)
- en: Monte-Carlo methods on Wikipedia, available at [https://en.wikipedia.org/wiki/Monte_Carlo_method](https://en.wikipedia.org/wiki/Monte_Carlo_method)
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 蒙特卡罗方法，维基百科上有相关介绍，网址为 [https://en.wikipedia.org/wiki/Monte_Carlo_method](https://en.wikipedia.org/wiki/Monte_Carlo_method)
- en: See also
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The *Simulating a Brownian motion* recipe
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*模拟布朗运动* 示例'
- en: Simulating a Poisson process
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模拟泊松过程
- en: A **Poisson process** is a particular type of **point process**, a stochastic
    model that represents random occurrences of instantaneous events. Roughly speaking,
    the Poisson process is the least structured, or the most random, point process.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**泊松过程**是一种特定类型的**点过程**，它是一种随机模型，表示瞬时事件的随机发生。大致来说，泊松过程是最不结构化或最随机的点过程。'
- en: The Poisson process is a particular continuous-time Markov process.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 泊松过程是一个特定的连续时间马尔可夫过程。
- en: Point processes, and notably Poisson processes, can model random instantaneous
    events such as the arrival of clients in a queue or on a server, telephone calls,
    radioactive disintegrations, action potentials of nerve cells, and many other
    phenomena.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 点过程，特别是泊松过程，可以用来模拟随机瞬时事件，比如客户在队列或服务器中的到达、电话呼叫、放射性衰变、神经细胞的动作电位等许多现象。
- en: In this recipe, we will show different methods to simulate a homogeneous stationary
    Poisson process.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将展示模拟齐次平稳泊松过程的不同方法。
- en: How to do it...
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'Let''s import NumPy and matplotlib:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们导入 NumPy 和 matplotlib：
- en: '[PRE8]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Let''s specify the `rate` value, that is, the average number of events per
    second:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们指定 `rate` 值，即每秒钟发生事件的平均次数：
- en: '[PRE9]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'First, we will simulate the process using small time bins of 1 millisecond:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将使用 1 毫秒的小时间单元模拟这个过程：
- en: '[PRE10]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'On every time bin, the probability that an event occurs is about *rate * dt*
    if *dt* is small enough. Besides, as the Poisson process has no memory, the occurrence
    of an event is independent from one bin to another. Therefore, we can sample Bernoulli
    random variables (either 1 or 0, respectively representing an experiment''s success
    or failure) in a vectorized way in order to simulate our process:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在每个时间区间，事件发生的概率大约是 *rate * dt*，如果 *dt* 足够小。此外，由于泊松过程没有记忆性，事件的发生在不同的区间之间是独立的。因此，我们可以在向量化的方式中采样伯努利随机变量（分别表示实验的成功或失败，即1或0），以此来模拟我们的过程：
- en: '[PRE11]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The `x` vector contains zeros and ones on all time bins, `1` corresponding
    to the occurrence of an event:'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`x` 向量包含了所有时间区间上的零和一，`1` 表示事件的发生：'
- en: '[PRE12]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Let''s display the simulated process. We draw a vertical line for each event:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们来展示模拟过程。我们为每个事件绘制一条垂直线：
- en: '[PRE13]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![How to do it...](img/4818OS_13_04.jpg)'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何实现...](img/4818OS_13_04.jpg)'
- en: 'Another way of representing that same object is by considering the associated
    **counting process** *N(t)*,which is the number of events that have occurred until
    time *t*. Here, we can display this process using the `cumsum()` function:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 表示同一对象的另一种方式是考虑相关的 **计数过程** *N(t)*，它表示在时间 *t* 之前发生的事件数。在这里，我们可以使用 `cumsum()`
    函数来展示这个过程：
- en: '[PRE14]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![How to do it...](img/4818OS_13_05.jpg)'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何实现...](img/4818OS_13_05.jpg)'
- en: 'The other (and more efficient) way of simulating the homogeneous Poisson process
    is to use the property that the time intervals between two successive events follow
    an exponential distribution. Furthermore, these intervals are independent. Thus,
    we can sample them in a vectorized way. Finally, we get our process by cumulatively
    summing all of these intervals:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 模拟均匀泊松过程的另一种（更高效的）方式是利用两个连续事件之间的时间间隔遵循指数分布这一性质。此外，这些间隔是独立的。因此，我们可以以向量化的方式对它们进行采样。最终，通过累加这些间隔，我们得到了我们的过程：
- en: '[PRE15]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The `y` vector contains another realization of our Poisson process, but the
    data structure is different. Every component of the vector is an event time:'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`y` 向量包含了我们的泊松过程的另一个实现，但数据结构不同。向量的每个分量都是一个事件发生的时间：'
- en: '[PRE16]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Finally, let''s display the simulated process:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们来展示模拟过程：
- en: '[PRE17]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '![How to do it...](img/4818OS_13_06.jpg)'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何实现...](img/4818OS_13_06.jpg)'
- en: How it works...
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'For a Poisson process with rate ![How it works...](img/4818OS_13_25.jpg), the
    number of events in a time window of length ![How it works...](img/4818_13_15.jpg)
    follows a Poisson distribution:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个速率为 ![它是如何工作的...](img/4818OS_13_25.jpg) 的泊松过程，长度为 ![它是如何工作的...](img/4818_13_15.jpg)
    的时间窗口内的事件数服从泊松分布：
- en: '![How it works...](img/4818_13_07.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/4818_13_07.jpg)'
- en: When ![How it works...](img/4818_13_16.jpg) is small, we can show that, at first
    order, this probability is about ![How it works...](img/4818_13_17.jpg).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 当 ![它是如何工作的...](img/4818_13_16.jpg) 很小时，我们可以证明，按照一阶近似，这个概率大约是 ![它是如何工作的...](img/4818_13_17.jpg)。
- en: Also, the **holding times** (delays between two consecutive events) are independent
    and follow an exponential distribution. The Poisson process satisfies other useful
    properties, such as the independent and stationary increments. This property justifies
    the first simulation method used in this recipe.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，**保持时间**（两个连续事件之间的延迟）是独立的，并且遵循指数分布。泊松过程满足其他有用的性质，如独立和稳定增量。这一性质证明了本方法中使用的第一次模拟方法。
- en: There's more...
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: In this recipe, we only considered homogeneous time-dependent Poisson processes.
    Other types of Poisson processes include inhomogeneous (or non-homogeneous) processes
    that are characterized by a time-varying rate, and multidimensional spatial Poisson
    processes.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们只考虑了均匀时间相关的泊松过程。其他类型的泊松过程包括不均匀（或非均匀）过程，其特点是速率随时间变化，以及多维空间泊松过程。
- en: 'Here are further references:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有更多的参考资料：
- en: The Poisson process on Wikipedia, available at [http://en.wikipedia.org/wiki/Poisson_process](http://en.wikipedia.org/wiki/Poisson_process)
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维基百科上的泊松过程，链接：[http://en.wikipedia.org/wiki/Poisson_process](http://en.wikipedia.org/wiki/Poisson_process)
- en: Point processes on Wikipedia, available at [http://en.wikipedia.org/wiki/Point_process](http://en.wikipedia.org/wiki/Point_process)
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维基百科上的点过程，链接：[http://en.wikipedia.org/wiki/Point_process](http://en.wikipedia.org/wiki/Point_process)
- en: Continuous-time processes on Wikipedia, available at [http://en.wikipedia.org/wiki/Continuous-time_process](http://en.wikipedia.org/wiki/Continuous-time_process)
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维基百科上的连续时间过程，链接：[http://en.wikipedia.org/wiki/Continuous-time_process](http://en.wikipedia.org/wiki/Continuous-time_process)
- en: Renewal theory on Wikipedia, available at [http://en.wikipedia.org/wiki/Renewal_theory](http://en.wikipedia.org/wiki/Renewal_theory)
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维基百科上的更新理论，可在[http://en.wikipedia.org/wiki/Renewal_theory](http://en.wikipedia.org/wiki/Renewal_theory)中查看
- en: Spatial Poisson processes on Wikipedia, available at [http://en.wikipedia.org/wiki/](http://en.wikipedia.org/wiki/)
    [Spatial_Poisson_process](http://Spatial_Poisson_process)
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维基百科上的空间泊松过程，可在[http://en.wikipedia.org/wiki/](http://en.wikipedia.org/wiki/)
    [Spatial_Poisson_process](http://Spatial_Poisson_process)中查看
- en: See also
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: The *Simulating a discrete-time Markov chain* recipe
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*模拟离散时间马尔可夫链*方法'
- en: Simulating a Brownian motion
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模拟布朗运动
- en: The **Brownian motion** (or **Wiener process**) is a fundamental object in mathematics,
    physics, and many other scientific and engineering disciplines. This model describes
    the movement of a particle suspended in a fluid resulting from random collisions
    with the quick molecules in the fluid (diffusion). More generally, the Brownian
    motion models a continuous-time **random walk**, where a particle evolves in space
    by making independent random steps in all directions.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '**布朗运动**（或**维纳过程**）是数学、物理学以及许多其他科学和工程学科中的基本对象。该模型描述了粒子在流体中由于与流体中快速分子发生随机碰撞而产生的运动（扩散）。更一般地，布朗运动模型描述了一种连续时间**随机游走**，其中粒子通过在所有方向上做独立的随机步骤在空间中演化。'
- en: Mathematically, the Brownian motion is a particular Markov continuous stochastic
    process. The Brownian motion is at the core of mathematical domains such as stochastic
    calculus and the theory of stochastic processes, but it is also central in applied
    fields such as quantitative finance, ecology, and neuroscience.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 从数学角度来看，布朗运动是一个特殊的马尔可夫连续随机过程。布朗运动是随机微积分和随机过程理论等数学领域的核心，但在量化金融、生态学和神经科学等应用领域也占有重要地位。
- en: In this recipe, we will show how to simulate and plot a Brownian motion in two
    dimensions.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个方法中，我们将展示如何在二维空间中模拟和绘制布朗运动。
- en: How to do it...
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'Let''s import NumPy and matplotlib:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们导入NumPy和matplotlib：
- en: '[PRE18]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We simulate Brownian motions with 5000 time steps:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们用5000个时间步骤来模拟布朗运动：
- en: '[PRE19]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We simulate two independent one-dimensional Brownian processes to form a single
    two-dimensional Brownian process. The (discrete) Brownian motion makes independent
    Gaussian jumps at each time step. Therefore, we merely have to compute the cumulative
    sum of independent normal random variables (one for each time step):'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们模拟两个独立的一维布朗过程来形成一个二维布朗过程。（离散）布朗运动在每个时间步骤上做独立的高斯跳跃。因此，我们只需要计算独立正态随机变量的累积和（每个时间步骤一个）：
- en: '[PRE20]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now, to display the Brownian motion, we could just use `plot(x, y)`. However,
    the result would be monochromatic and a bit boring. We would like to use a gradient
    of color to illustrate the progression of the motion in time (the hue is a function
    of time). matplotlib forces us to use a small hack based on `scatter()`. This
    function allows us to assign a different color to each point at the expense of
    dropping out line segments between points. To work around this issue, we linearly
    interpolate the process to give the illusion of a continuous line:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，为了展示布朗运动，我们可以直接使用`plot(x, y)`。然而，这样的结果会是单色的，稍显乏味。我们希望使用渐变色来展示运动随时间的进展（色调是时间的函数）。matplotlib迫使我们使用基于`scatter()`的小技巧。这个函数允许我们为每个点分配不同的颜色，代价是丢失了点与点之间的线段。为了解决这个问题，我们线性插值这个过程，以便呈现出连续线条的错觉：
- en: '[PRE21]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '![How to do it...](img/4818OS_13_08.jpg)'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![How to do it...](img/4818OS_13_08.jpg)'
- en: How it works...
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'The Brownian motion *W(t)* has several important properties. First, it gives
    rise (almost surely) to continuous trajectories. Second, its increments ![How
    it works...](img/4818_13_18.jpg) are independent on non-overlapping intervals.
    Third, these increments are Gaussian random variables. More precisely:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 布朗运动*W(t)*具有几个重要的性质。首先，它几乎肯定会产生连续的轨迹。其次，它的增量![How it works...](img/4818_13_18.jpg)在不重叠的区间上是独立的。第三，这些增量是高斯随机变量。更准确地说：
- en: '![How it works...](img/4818_13_09.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![How it works...](img/4818_13_09.jpg)'
- en: In particular, the density of *W(t)* is a normal distribution with variance
    *t*.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 特别地，*W(t)*的密度是一个方差为*t*的正态分布。
- en: Additionally, the Brownian motion, and stochastic processes in general, have
    deep connections with partial differential equations. Here, the density of *W(t)*
    is a solution of the **heat equation**, a particular diffusion equation. More
    generally, the **Fokker-Planck equation** is a partial differential equation satisfied
    by the density of solutions of a stochastic differential equation.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，布朗运动以及一般的随机过程与偏微分方程有着深刻的联系。在这里，*W(t)* 的密度是 **热方程** 的解，这是一种特殊的扩散方程。更一般地说，**Fokker-Planck
    方程** 是由随机微分方程的解的密度所满足的偏微分方程。
- en: There's more...
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The Brownian motion is a limit of a random walk with an infinitesimal step size.
    We used this property here to simulate the process.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 布朗运动是具有无限小步长的随机游走的极限。在这里，我们利用这一特性来模拟该过程。
- en: 'Here are a few references:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些参考文献：
- en: The Brownian motion (physical phenomenon) described at [http://en.wikipedia.org/wiki/Brownian_motion](http://en.wikipedia.org/wiki/Brownian_motion)
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 [http://en.wikipedia.org/wiki/Brownian_motion](http://en.wikipedia.org/wiki/Brownian_motion)
    上描述了布朗运动（物理现象）
- en: The Wiener process (mathematical object) explained at [http://en.wikipedia.org/wiki/Wiener_process](http://en.wikipedia.org/wiki/Wiener_process)
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 [http://en.wikipedia.org/wiki/Wiener_process](http://en.wikipedia.org/wiki/Wiener_process)
    上解释了维纳过程（数学对象）
- en: The Brownian motion is a particular type of the Lévy process; refer to [http://en.wikipedia.org/wiki/L%C3%A9vy_process](http://en.wikipedia.org/wiki/L%C3%A9vy_process)
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 布朗运动是 Lévy 过程的一种特例；参见 [http://en.wikipedia.org/wiki/L%C3%A9vy_process](http://en.wikipedia.org/wiki/L%C3%A9vy_process)
- en: The Fokker-Planck equation links stochastic processes to partial differential
    equations; refer to [http://en.wikipedia.org/wiki/Fokker%E2%80%93Planck_equation](http://en.wikipedia.org/wiki/Fokker%E2%80%93Planck_equation)
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Fokker-Planck 方程将随机过程与偏微分方程联系起来；参见 [http://en.wikipedia.org/wiki/Fokker%E2%80%93Planck_equation](http://en.wikipedia.org/wiki/Fokker%E2%80%93Planck_equation)
- en: See also
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The *Simulating a stochastic differential equation* recipe
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*模拟随机微分方程*的步骤'
- en: Simulating a stochastic differential equation
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模拟随机微分方程
- en: '**Stochastic differential equations** (**SDEs**) model dynamical systems that
    are subject to noise. They are widely used in physics, biology, finance, and other
    disciplines.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '**随机微分方程**（**SDEs**）模拟受噪声影响的动态系统。它们广泛应用于物理学、生物学、金融学以及其他学科。'
- en: In this recipe, we simulate an **Ornstein-Uhlenbeck process**, which is a solution
    of the **Langevin equation**. This model describes the stochastic evolution of
    a particle in a fluid under the influence of friction. The particle's movement
    is due to collisions with the molecules of the fluid (diffusion). The difference
    with the Brownian motion is the presence of friction.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在本步骤中，我们模拟一个 **Ornstein-Uhlenbeck 过程**，它是 **Langevin 方程**的解。该模型描述了在摩擦作用下粒子在流体中的随机演化。粒子的运动是由于与流体分子发生碰撞（扩散）。与布朗运动的区别在于存在摩擦。
- en: The Ornstein-Uhlenbeck process is stationary, Gaussian, and Markov, which makes
    it a good candidate to represent stationary random noise.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: Ornstein-Uhlenbeck 过程是平稳的、高斯的和马尔可夫的，这使得它成为表示平稳随机噪声的良好候选模型。
- en: We will simulate this process with a numerical method called the **Euler-Maruyama
    method**. It is a simple generalization to SDEs of the Euler method for ODEs.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过一种叫做 **Euler-Maruyama 方法** 的数值方法来模拟这个过程。它是对常微分方程（ODE）中欧拉方法的一个简单推广，适用于随机微分方程（SDE）。
- en: How to do it...
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s import NumPy and matplotlib:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们导入 NumPy 和 matplotlib：
- en: '[PRE22]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We define a few parameters for our model:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们为模型定义了一些参数：
- en: '[PRE23]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Let''s define a few simulation parameters:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们定义一些模拟参数：
- en: '[PRE24]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'We also define renormalized variables (to avoid recomputing these constants
    at every time step):'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还定义了重正规化变量（以避免在每个时间步长重新计算这些常数）：
- en: '[PRE25]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We create a vector that will contain all successive values of our process during
    the simulation:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们创建一个向量，在模拟过程中包含所有连续的过程值：
- en: '[PRE26]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now, let''s simulate the process with the Euler-Maruyama method. It is really
    like the standard Euler method for ODEs, but with an extra stochastic term (which
    is just a scaled normal random variable). We will give the equation of the process
    along with the details of this method in the *How it works...* section:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们使用 Euler-Maruyama 方法来模拟该过程。它实际上是常规欧拉法在常微分方程（ODE）中的一种推广，但增加了一个额外的随机项（它仅仅是一个缩放的标准正态随机变量）。我们将在
    *如何工作...* 部分给出该过程的方程和该方法的详细信息：
- en: '[PRE27]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Let''s display the evolution of the process:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们展示过程的演变：
- en: '[PRE28]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '![How to do it...](img/4818OS_13_10.jpg)'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做...](img/4818OS_13_10.jpg)'
- en: 'Now, we are going to take a look at the time evolution of the distribution
    of the process. To do this, we will simulate many independent realizations of
    the same process in a vectorized way. We define a vector `X` that will contain
    all realizations of the process at a given time (that is, we do not keep all realizations
    at all times in memory). This vector will be overwritten at every time step. We
    will show the estimated distribution (histograms) at several points in time:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将查看该过程分布随时间演化的情况。为此，我们将以向量化方式模拟该过程的多个独立实现。我们定义一个向量 `X`，它将包含在给定时间点所有实现的过程（也就是说，我们不会在所有时间点都将所有实现保留在内存中）。该向量将在每个时间步覆盖。我们将在多个时间点展示估计的分布（直方图）：
- en: '[PRE29]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '![How to do it...](img/4818OS_13_11.jpg)'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![怎么做...](img/4818OS_13_11.jpg)'
- en: The distribution of the process tends to a Gaussian distribution with mean ![How
    to do it...](img/4818_13_19.jpg) and standard deviation ![How to do it...](img/4818_13_20.jpg).
    The process would be stationary if the initial distribution was also a Gaussian
    with the adequate parameters.
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该过程的分布趋近于均值为 ![怎么做...](img/4818_13_19.jpg) 和标准差为 ![怎么做...](img/4818_13_20.jpg)
    的高斯分布。如果初始分布也是具有适当参数的高斯分布，那么该过程将是平稳的。
- en: How it works...
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The Langevin equation that we use in this recipe is the following stochastic
    differential equation:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这个实例中使用的Langevin方程是以下随机微分方程：
- en: '![How it works...](img/4818_13_12.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/4818_13_12.jpg)'
- en: Here, *x(t)* is our stochastic process, *dx* is the infinitesimal increment,
    ![How it works...](img/4818_13_21.jpg) is the mean, ![How it works...](img/4818_13_22.jpg)
    is the standard deviation, and ![How it works...](img/4818_13_15.jpg) is the time
    constant. Also, *W* is a Brownian motion (or the Wiener process) that underlies
    our SDE.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，*x(t)* 是我们的随机过程，*dx* 是无穷小增量，![它是如何工作的...](img/4818_13_21.jpg) 是均值，![它是如何工作的...](img/4818_13_22.jpg)
    是标准差，![它是如何工作的...](img/4818_13_15.jpg) 是时间常数。此外，*W* 是布朗运动（或维纳过程），它是我们随机微分方程的基础。
- en: The first term on the right-hand side is the deterministic term (in *dt*), while
    the second term is the stochastic term. Without that last term, the equation would
    be a regular deterministic ODE.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 右边的第一个项是确定性项（在 *dt* 中），而第二个项是随机项。如果没有最后一个项，该方程将是一个常规的确定性常微分方程。
- en: The infinitesimal step of a Brownian motion is a Gaussian random variable. Specifically,
    the derivative (in a certain sense) of a Brownian motion is a **white noise**,
    a sequence of independent Gaussian random variables.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 布朗运动的无穷小步长是一个高斯随机变量。具体来说，布朗运动的导数（以某种意义上）是 **白噪声**，即一系列独立的高斯随机变量。
- en: 'The Euler-Maruyama method involves discretizing time and adding infinitesimal
    steps to the process at every time step. This method involves a deterministic
    term (like in the standard Euler method for ODEs) and a stochastic term (random
    Gaussian variable). Specifically, for an equation:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 欧拉-马鲁亚马方法涉及时间离散化，并在每个时间步向过程添加无穷小步长。该方法包含一个确定性项（如常规欧拉方法在常微分方程中的应用）和一个随机项（随机高斯变量）。具体来说，对于一个方程：
- en: '![How it works...](img/4818_13_13.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/4818_13_13.jpg)'
- en: 'The numerical scheme is (with *t=n * dt*):'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 数值方案是（其中 *t=n * dt*）：
- en: '![How it works...](img/4818_13_14.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/4818_13_14.jpg)'
- en: Here, ![How it works...](img/4818_13_23.jpg) is a random Gaussian variable with
    variance *1* (independent at each time step). The normalization factor ![How it
    works...](img/4818_13_24.jpg) comes from the fact that the infinitesimal step
    for a Brownian motion has the standard deviation ![How it works...](img/4818_13_24.jpg).
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，![它是如何工作的...](img/4818_13_23.jpg) 是一个方差为 *1* 的随机高斯变量（在每个时间步独立）。归一化因子 ![它是如何工作的...](img/4818_13_24.jpg)
    来源于布朗运动的无穷小步长，其标准差为 ![它是如何工作的...](img/4818_13_24.jpg)。
- en: There's more...
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The mathematics of SDEs comprises the theory of stochastic calculus, Itō calculus,
    martingales, and other topics. Although these theories are quite involved, simulating
    stochastic processes numerically can be relatively straightforward, as we have
    seen in this recipe.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 随机微分方程的数学理论包括随机微积分、伊藤微积分、马尔可夫过程等主题。尽管这些理论相当复杂，但正如我们在这个实例中看到的那样，数值模拟随机过程相对简单。
- en: The error of the Euler-Maruyama method is of order ![There's more...](img/4818_13_24.jpg).
    The Milstein method is a more precise numerical scheme, of order *dt*.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 欧拉-马鲁亚马方法的误差是 *dt* 量级的。Milstein方法是一种更精确的数值方案，误差量级为 *dt*。
- en: 'Here are a few references on these topics:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些相关参考资料：
- en: Stochastic differential equations on Wikipedia, available at [http://en.wikipedia.org/wiki/Stochastic_differential_equation](http://en.wikipedia.org/wiki/Stochastic_differential_equation)
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维基百科上的[随机微分方程](http://en.wikipedia.org/wiki/Stochastic_differential_equation)
- en: White noise, described at [http://en.wikipedia.org/wiki/White_noise](http://en.wikipedia.org/wiki/White_noise)
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 白噪声，描述于[http://en.wikipedia.org/wiki/White_noise](http://en.wikipedia.org/wiki/White_noise)
- en: The Langevin equation on Wikipedia, available at [http://en.wikipedia.org/wiki/Langevin_equation](http://en.wikipedia.org/wiki/Langevin_equation)
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维基百科上的[朗之万方程](http://en.wikipedia.org/wiki/Langevin_equation)
- en: The Ornstein-Uhlenbeck process described at [http://en.wikipedia.org/wiki/Ornstein%E2%80%93Uhlenbeck_process](http://en.wikipedia.org/wiki/Ornstein%E2%80%93Uhlenbeck_process)
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[奥恩斯坦-乌伦贝克过程](http://en.wikipedia.org/wiki/Ornstein%E2%80%93Uhlenbeck_process)的描述'
- en: Diffusion processes described at [http://en.wikipedia.org/wiki/Diffusion_process](http://en.wikipedia.org/wiki/Diffusion_process)
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩散过程，描述于[http://en.wikipedia.org/wiki/Diffusion_process](http://en.wikipedia.org/wiki/Diffusion_process)
- en: Itō calculus, described at [http://en.wikipedia.org/wiki/It%C5%8D_calculus](http://en.wikipedia.org/wiki/It%C5%8D_calculus)
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 伊藤积分，描述于[http://en.wikipedia.org/wiki/It%C5%8D_calculus](http://en.wikipedia.org/wiki/It%C5%8D_calculus)
- en: The Euler-Maruyama method, explained at [http://en.wikipedia.org/wiki/Euler%E2%80%93Maruyama_method](http://en.wikipedia.org/wiki/Euler%E2%80%93Maruyama_method)
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 欧拉-马鲁亚马方法，解释于[http://en.wikipedia.org/wiki/Euler%E2%80%93Maruyama_method](http://en.wikipedia.org/wiki/Euler%E2%80%93Maruyama_method)
- en: The Milstein method on Wikipedia, available at [http://en.wikipedia.org/wiki/Milstein_method](http://en.wikipedia.org/wiki/Milstein_method)
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维基百科上的[米尔斯坦方法](http://en.wikipedia.org/wiki/Milstein_method)
- en: See also
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: The *Simulating a Brownian motion* recipe
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*模拟布朗运动*的方案'
