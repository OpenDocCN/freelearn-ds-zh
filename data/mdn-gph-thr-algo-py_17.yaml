- en: '12'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '12'
- en: Graph Databases
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图数据库
- en: In the previous chapters, we’ve considered networks as data structures that
    we can analyze to extract insight into data science problems. In this chapter,
    we’ll consider networks as data storage options, linking many pieces of information
    in a multi-relational way. Many storage options exist but we’ll focus on an open
    source option that integrates well with Python—**Neo4j**.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章中，我们将网络视为可以分析以从数据科学问题中提取见解的数据结构。在本章中，我们将考虑网络作为数据存储选项，以多关系方式链接许多信息。存在许多存储选项，但我们将关注一个与Python集成良好的开源选项——**Neo4j**。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章中将涵盖以下主题：
- en: Introduction to graph databases
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图数据库简介
- en: Querying and modifying data in Neo4j
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Neo4j中查询和修改数据
- en: By the end of this chapter, you’ll understand the advantages of graph databases
    to store network science datasets, be able to visualize graph databases and know
    how to query them for the quick retrieval of relevant information. You’ll feel
    comfortable modifying tables by insertion and deletion. You’ll understand how
    the tools in our previous chapters can help you query efficiently to find relevant
    data. Let’s get started by exploring the rationale behind graph databases.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将了解图数据库在存储网络科学数据集方面的优势，能够可视化图数据库，并知道如何查询它们以快速检索相关信息。你将能够通过插入和删除来轻松修改表格。你将了解我们前几章中的工具如何帮助你高效查询以找到相关数据。让我们通过探索图数据库背后的原理开始吧。
- en: Introduction to graph databases
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图数据库简介
- en: '**Graph databases** (databases that store data in network form) offer many
    advantages over traditional relational databases. First, graph databases can capture
    and traverse hierarchical relationships. While relational databases can capture
    taxonomies, they do so in different columns that are not explicitly linked.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**图数据库**（以网络形式存储数据的数据库）相对于传统的关系型数据库具有许多优势。首先，图数据库可以捕获和遍历层次关系。虽然关系型数据库可以捕获分类法，但它们是在不同的列中捕获的，这些列并没有明确地链接。'
- en: In addition, graph databases capture complex relationships between items or
    groups of items explicitly by connecting them with edges. This allows for multiway
    relationships to exist within the database; querying for nearest neighbors, for
    instance, is much easier when neighbors are connected by an edge and do not require
    estimation steps to find **Euclidean** or **Manhattan distances** between all
    items in the database.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，图数据库通过连接它们来明确捕获项目或项目组之间的复杂关系。这允许数据库内存在多向关系；例如，当邻居通过边连接时，查询最近邻要容易得多，并且不需要估计步骤来找到数据库中所有项目之间的**欧几里得**或**曼哈顿**距离。
- en: Furthermore, graph databases can capture the directionality of relationships
    between items in the database very easily. In a relational database, the directionality
    of a single relationship may involve several columns’ worth of information to
    capture that single relationship. Thus, for items with complicated relationships
    that may be unidirectional, a graph database provides a compact representation
    of data structure.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，图数据库可以非常容易地捕获数据库中项目之间关系的方向性。在关系型数据库中，一个单一关系的方向性可能需要几个列的信息来捕获该关系。因此，对于可能具有单向关系的项目，图数据库提供了数据结构的紧凑表示。
- en: Finally, within graph databases, it is possible to mine the dataset for implicit
    relationships that have not been programmed into the database by using network
    algorithms to probe for similar patterns in different parts of a network or to
    infer edges that don’t exist based on triadic closure. For many datasets—such
    as continuously-growing *-omics* datasets, evolving ontologies, or other non-static
    datasets where knowledge is incomplete—mining the data provides new research avenues.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在图数据库中，可以使用网络算法来挖掘数据集，以发现数据库中未编程的隐含关系。这些算法可以通过在网络的不同部分寻找相似模式来探测相似关系，或者根据三角闭包推断不存在的关系。对于许多数据集——例如持续增长的*组学*数据集、演化的本体或知识不完整的其他非静态数据集——挖掘数据提供了新的研究途径。
- en: Now that we know a bit about the advantages of graph databases, let’s dive into
    specific differences between graph databases and relational databases.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了一些关于图数据库的优势，让我们深入了解图数据库和关系型数据库之间的具体差异。
- en: What is a graph database?
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是图数据库？
- en: 'Graph databases are databases based on network science. Rather than storing
    data as columns in a spreadsheet (shown in the following figure), as is done in
    relational databases, graph databases store data as *networks*, with items that
    would occupy a row represented as a vertex connected to other vertices per relations
    that exist. Column data is used to either add metadata to the vertex or connect
    it to other vertices. Graph database queries rely on network science algorithms
    to traverse the graph, pattern-finding algorithms, and combinations of these two
    approaches. Thus, queries for graph databases can become quite sophisticated without
    necessarily leading to a long run-time as subqueries in SQL will require. Efficiency
    is a big advantage of graph databases. Let’s look at an example of supermarket
    customer feedback related to customer service or products, shown in *Figure 12**.1*:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 图数据库是基于网络科学的数据库。与关系型数据库中按列存储数据不同（如下一个图所示），图数据库将数据存储为 *网络*，其中原本占据一行的项目被表示为顶点，并通过存在的关系连接到其他顶点。列数据用于向顶点添加元数据或将它连接到其他顶点。图数据库查询依赖于网络科学算法来遍历图，模式发现算法，以及这两种方法的组合。因此，图数据库的查询可以变得相当复杂，而不会像
    SQL 中的子查询那样导致长时间运行。效率是图数据库的一个重大优势。让我们看看与超市客户服务或产品相关的客户反馈示例，如图 *图12.1* 所示：
- en: "![Figure 12.1 – An example of relational database design, where rows contain\
    \ items with information organized into columns\uFEFF (Used with permission from\
    \ Microsoft Excel)](img/B21087_12_01.jpg)"
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![图12.1 – 关系型数据库设计的示例，其中行包含按列组织的信息项](img/B21087_12_01.jpg)'
- en: Figure 12.1 – An example of relational database design, where rows contain items
    with information organized into columns (Used with permission from Microsoft Excel)
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.1 – 关系型数据库设计的示例，其中行包含按列组织的信息项（经微软 Excel 授权使用）
- en: '*Figure 12**.1* shows a relational database with many rows of data that exist
    as columns. However, this data may be better represented as a graph database,
    where items relate through the columns or use columns as metadata in a queryable
    way. Perhaps there are dates attached to the comments that could link items by
    time and use the department related to the complaint as metadata.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*图12.1* 展示了一个关系型数据库，其中包含许多作为列存在的数据行。然而，这些数据可能更好地用图数据库来表示，在图数据库中，项目通过列相关联，或者以可查询的方式将列用作元数据。或许，评论中附有日期，可以按时间将项目链接起来，并使用与投诉相关的部门作为元数据。'
- en: 'While it is difficult to visualize a relational database, visualizing a graph
    database is much more straightforward. Some graph databases come with built-in
    visualization tools to zoom into areas of interest or query results. Some allow
    developers to build on pre-existing visualizations to tailor this feature to their
    needs. When hovering over edges and vertices, most graph database visualization
    tools will show metadata associated with a vertex or edge, providing context for
    the relationships of interest pulled by the query. Cytoscape is one of the most
    commonly used programs for network visualization at scale; originally, it was
    constructed to visualize proteomics datasets, where protein interactions are documented
    across organisms. Here’s Cytoscape with demo images of the example graphs: [https://js.cytoscape.org/](https://js.cytoscape.org/).'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然可视化关系型数据库比较困难，但可视化图数据库则要直接得多。一些图数据库自带内置的可视化工具，可以放大感兴趣的区域或查询结果。一些允许开发者基于现有的可视化构建，以满足他们的需求。当鼠标悬停在边和顶点上时，大多数图数据库可视化工具将显示与顶点或边关联的元数据，为查询中提取的感兴趣关系提供上下文。Cytoscape
    是最常用的网络可视化程序之一；最初，它是为了可视化蛋白质组数据集而构建的，其中蛋白质相互作用在生物体之间被记录。以下是 Cytoscape 与示例图的演示图像：[https://js.cytoscape.org/](https://js.cytoscape.org/).
- en: One of the advantages of Cytoscape is its ability to handle saved igraph networks
    such that analysis of very large networks can be done in Python and then visualized
    with Cytoscape, where the network size will not complicate visualization as it
    will with the igraph plotting functions. In addition, Cytoscape offers a desktop
    version that should work with Java-based devices and a web interface version for
    those who do not have access to the desktop version. If you are interested, you
    are encouraged to download Cytoscape and test out its visualization either with
    the datasets we use in this book or with your own datasets of interest.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Cytoscape的一个优点是它能够处理保存的igraph网络，这样就可以在Python中分析非常大的网络，然后用Cytoscape进行可视化，其中网络大小不会像使用igraph绘图函数那样复杂化可视化。此外，Cytoscape还提供了一个桌面版本，应该适用于基于Java的设备，以及一个网络界面版本，供那些无法访问桌面版本的人使用。如果你感兴趣，我们鼓励你下载Cytoscape并使用我们在这本书中使用的数据集或你感兴趣的数据集来测试其可视化功能。
- en: Now that we understand the structure and advantages of graph databases, let’s
    dive into some datasets where a graph database may function better than a relational
    database with respect to organizing the information and retrieving information
    of interest.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了图数据库的结构和优势，让我们深入研究一些数据集，在这些数据集中，图数据库在组织信息和检索感兴趣的信息方面可能比关系数据库表现得更好。
- en: What can you represent in a graph database?
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你可以在图数据库中表示什么？
- en: There are many data science domains that can benefit from graph databases. We’ll
    explore a few of these use cases in depth before diving into coding in one open
    source graph database. Let’s start with an example from epidemiology.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 许多数据科学领域都可以从图数据库中受益。在我们深入一个开源图数据库的编码之前，我们将深入探讨这些用例中的几个。让我们从一个流行病学例子开始。
- en: Contact tracing
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 接触者追踪
- en: When a new epidemic starts in an area, epidemiologists often employ a tool called
    **contact tracing**, where data on each case is collected to connect cases to
    each other in the hopes of finding the outbreak source, or patient zero. Patient
    zero often provides insight into the source of the epidemic—whether an animal
    vector, a laboratory breach, or an environmental disaster. Epidemiologists, then,
    can pinpoint effective containment policies and monitor potential sources to prevent
    future outbreaks.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个新疫情在一个地区开始时，流行病学家通常会使用一种称为**接触者追踪**的工具，收集每个病例的数据，以便将病例相互联系起来，希望找到疫情源头或零号病人。零号病人通常能提供关于疫情来源的线索——是动物宿主、实验室泄露还是环境灾难。然后，流行病学家可以确定有效的遏制政策，并监控潜在的源头，以防止未来的疫情爆发。
- en: In longer outbreaks where a virus has enough time to mutate, contact tracing
    allows epidemiologists to study the viral evolution of an outbreak. During the
    COVID-19 pandemic, we saw many mutations of COVID-19 with different rates of mortality
    and different symptomologies, some of which did not respond well to current vaccines
    or treatments to which prior strains had responded. Early identification of new
    mutations and their geographic sources provides crucial information for quick
    response across countries and continents.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在持续时间较长的疫情中，病毒有足够的时间发生变异，接触者追踪使流行病学家能够研究疫情的病毒进化。在COVID-19大流行期间，我们看到了许多COVID-19的变异，这些变异有不同的死亡率率和不同的症状，其中一些对当前疫苗或先前菌株已响应的治疗方法反应不佳。早期识别新的变异及其地理来源为各国和大陆的快速响应提供了关键信息。
- en: Let’s consider an example of contact tracing in a new HIV outbreak. Let’s say
    we are in a mid-sized city with many neighborhoods and subpopulations. Cases have
    popped up at several testing centers and hospitals over the past two months, and
    epidemiologists are concerned that the dominant strain in the area has mutated
    into a much deadlier strain of HIV, threatening the city. Two of the main ways
    that HIV spreads within a population are sexual contact and sharing syringes when
    using drugs intravenously; this hypothetical epidemic seems to be largely contained
    to young populations with high rates of drug use and risky sexual behaviors.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个新出现的HIV疫情中的接触者追踪的例子。假设我们身处一个中等规模的城市，这里有许多社区和次级人口群体。在过去两个月里，几个检测中心和医院出现了病例，流行病学家担心该地区的优势菌株已经变异成了一种更致命的HIV菌株，威胁着整个城市。HIV在人群中传播的两种主要方式是性接触和静脉注射毒品时共用针头；这个假设的疫情似乎主要局限于药物使用率高和有高风险性行为的年轻人群中。
- en: When a case is identified, healthcare providers collect information about others
    potentially exposed to HIV through sexual contact or syringe sharing such that
    the person or the provider can inform those exposed that they are at risk of HIV.
    Positive cases are identified and traced to build a network of exposure. Typically,
    metadata, such as strain genomics, demographic factors, geographic histories,
    and exposure routes, is collected and attached to this network to quickly identify
    the main sources of spreading and populations most at risk given identified case
    characteristics.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当发现病例时，医疗保健提供者收集有关通过性接触或针头共享可能暴露于HIV的其他人的信息，以便个人或提供者可以告知那些暴露者他们面临HIV的风险。通过识别和追踪阳性病例，可以建立一个暴露网络。通常，收集并附加到这个网络上的元数据包括菌株基因组学、人口统计学因素、地理历史和暴露途径，以便快速识别传播的主要来源和根据已识别的病例特征最易受伤害的人群。
- en: 'Determining causality is not always straightforward. Oftentimes, cases are
    missed when individuals do not present with illness or do not get tested regularly.
    This means cases identified later in an epidemic might be sources of infection.
    *Figure 12**.2* shows a small piece of a contact tracing network, where cases
    identified later in the epidemic through contact tracing were infected earlier
    than the presenting individual (*Case #161*):'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 确定因果关系并不总是直接的。很多时候，当个人没有出现疾病症状或没有定期接受检测时，就会错过病例。这意味着在流行病后期发现的病例可能是感染源。*图12.2*显示了接触追踪网络的一小部分，其中通过接触追踪在流行病后期发现的病例比出现症状的个人（*病例#161*）感染时间更早：
- en: '![Figure 12.2 – A small subsection of a contact tracing network](img/B21087_12_02.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图12.2 – 接触追踪网络的一个小部分](img/B21087_12_02.jpg)'
- en: Figure 12.2 – A small subsection of a contact tracing network
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.2 – 接触追踪网络的一个小部分
- en: 'In *Figure 12**.2*, we see *Case #161* was identified (likely through a testing
    center or by seeking medical care). This individual’s contacts revealed infection
    from *Case #165*, who was infected by *Case #173*. Contact tracing also revealed
    another individual infected from *Case #165* (*Case #169*). Without contact tracing,
    at least three other cases would have been missed, leading to treatment delays
    and potentially more exposures and cases. Generally, causality is established
    through strain analysis and information about the timing of exposures through
    sexual partners or syringe sharing. These factors are included in the case metadata.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图12.2*中，我们看到*病例#161*被识别（可能是通过检测中心或寻求医疗护理）。这个人的接触者揭示了从*病例#165*（由*病例#173*感染）那里感染的情况。接触追踪还揭示了另一个从*病例#165*（*病例#169*）感染的个人。如果没有接触追踪，至少会错过另外三个病例，导致治疗延误，并可能导致更多的暴露和病例。通常，通过菌株分析和关于通过性伴侣或针头共享的暴露时间的信息来确定因果关系。这些因素包含在病例元数据中。
- en: Storing case metadata and causality information in a relational database would
    be very difficult, as the directionality of infection is critical for studying
    epidemic evolution over the population and for contacting potential exposures
    who have not yet been tested (as case contacts can overlap and often do in this
    type of epidemic). Graph databases allow for efficient storage and retrieval of
    this information for maximal efficiency of both contact tracing and public policy
    formation to protect those at risk of HIV exposure in this population. Early identification
    saves people from suffering and, potentially, death.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在关系数据库中存储病例元数据和因果关系信息将非常困难，因为感染的方向性对于研究人群中的流行病演变以及联系尚未检测的潜在暴露者（因为病例接触可能重叠，在这种类型的流行病中通常如此）至关重要。图数据库允许高效地存储和检索这些信息，以实现接触追踪和制定保护该人群中HIV暴露风险者的公共卫生政策的最大效率。早期识别可以拯救人们免受痛苦，甚至可能避免死亡。
- en: Island ecology study
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 岛屿生态学研究
- en: 'Now that we know how graph databases improve analytics and outcomes for social
    science data, let’s consider how graph databases can improve research in conservation.
    Suppose scientists have identified a new island in a remote area long isolated
    from mainland populations. *Figure 12**.3* shows the hypothetical island:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们知道了图数据库如何提高社会科学数据的分析和结果，让我们考虑图数据库如何改善保护学研究。假设科学家在远离大陆人群的偏远地区发现了一个新岛屿。*图12.3*显示了这个假设的岛屿：
- en: "![Figure 12.3 – An\uFEFF illustration of an island long isolated from the mainland](img/B21087_12_03.jpg)"
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图12.3 – 一个长期与大陆隔离的岛屿的插图](img/B21087_12_03.jpg)'
- en: Figure 12.3 – An illustration of an island long isolated from the mainland
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.3 – 一个长期与大陆隔离的岛屿的插图
- en: On the island shown in *Figure 12**.3*, we wish to document the flora and fauna
    that live on that island, as well as the island’s food chains. We’ll collect information
    on population sizes, predator-prey relationships, and potential threats to those
    populations and relationships (such as climate change). We may wish to link species
    into food webs to explore the sustainability of food sources given changes in
    temperature, weather, and sea levels on the island. We may also wish to divide
    the island into separate ecosystems, which may be isolated in valleys with high
    cliffs or connected to other ecosystems on the island through migration patterns
    or habitat overlap. Food webs and overlapping habitat/migration patterns create
    relationships between population data in our dataset, which naturally lives as
    a network. We can add metadata to the vertices in our network (species or habitats)
    or the edges connecting them (such as seasonal information about migration patterns
    that might connect species from two different habitats periodically).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图12**.3*所示的岛屿上，我们希望记录该岛屿上生活的动植物，以及岛屿的食物链。我们将收集有关种群大小、捕食者-猎物关系以及这些种群和关系的潜在威胁（如气候变化）的信息。我们可能希望将物种链接到食物网中，以探索岛屿上温度、天气和海平面变化对食物来源的可持续性影响。我们可能还希望将岛屿划分为不同的生态系统，这些生态系统可能被高悬崖的峡谷所隔离，或者通过迁徙模式或栖息地重叠与岛屿上的其他生态系统相连。食物网和重叠的栖息地/迁徙模式在我们的数据集中创建了种群数据之间的关系，这些数据自然以网络形式存在。我们可以在网络中的顶点（物种或栖息地）或连接它们的边（例如关于迁徙模式的季节性信息，这些信息可能定期连接来自两个不同栖息地的物种）上添加元数据。
- en: In this conservation example, we’ll likely have more than one dataset collected.
    We might have several different food webs from different geographies. We may also
    have habitat overlap datasets connecting geographies on the island that connect
    to our food webs, such as metadata on population size estimates, ecosystem health
    indicators, and seasonal patterns.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个保护示例中，我们可能会收集多个数据集。我们可能有来自不同地理区域的几个不同的食物网。我们还可能有关于栖息地重叠的数据集，这些数据集连接岛屿上的地理区域，这些区域与我们的食物网相连，例如关于种群大小估计、生态系统健康指标和季节性模式的元数据。
- en: Connecting many datasets, some of which include hierarchical relationships,
    is quite tricky in relational databases; however, it is easy when using graph
    databases. Different types of edges can connect different vertices in collected
    networks to link each network and the metadata contained in each network collected.
    This makes querying and exploring potential relationships that are not explicitly
    defined (perhaps not collected due to time constraints or difficulty of terrain
    navigation) much easier for conservationists.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在关系型数据库中连接许多数据集，其中一些包含层次关系，相当棘手；然而，在使用图数据库时则非常简单。不同类型的边可以连接收集到的网络中的不同顶点，以连接每个网络以及每个网络中包含的元数据。这使得查询和探索那些未明确定义的潜在关系（可能由于时间限制或地形导航的难度而没有收集）对保护主义者来说更容易。
- en: From this data and exploration of its graph database, it is possible to infer
    and define protected areas on the island in which many food webs connect or are
    isolated regions with large biodiversity. This protects species from human activities
    or climate change threats and allows researchers to focus limited funding on monitoring
    areas critical to the overall ecosystem. In addition, as further expeditions and
    conservation efforts collect new data, the graph database setup allows researchers
    to test hypothesized links between ecosystems or food webs that were not directly
    observed in the first pass expedition.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 从这些数据和对其图数据库的探索中，我们可以推断并定义岛屿上的保护区，其中许多食物网相连或是有大量生物多样性的孤立区域。这保护了物种免受人类活动或气候变化威胁，并允许研究人员将有限的资金集中在对整体生态系统至关重要的监测区域上。此外，随着进一步的探险和保护工作收集新的数据，图数据库的设置允许研究人员测试在第一次探险中未直接观察到的生态系统或食物网之间的假设性联系。
- en: Now that we understand a bit about datasets that will benefit from graph database
    storage solutions, let’s turn our attention to Neo4j, an open source graph database
    option.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对将受益于图数据库存储解决方案的数据集有了一定的了解，让我们将注意力转向Neo4j，这是一个开源的图数据库选项。
- en: Querying and modifying data in Neo4j
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Neo4j中查询和修改数据
- en: 'Before we start using Neo4j, we’ll need to download and install the software
    on our machines. You can follow this link to reach the Neo4j Desktop download
    page: [https://neo4j.com/download/](https://neo4j.com/download/).'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始使用Neo4j之前，我们需要在我们的机器上下载并安装软件。您可以点击此链接访问Neo4j桌面版下载页面：[https://neo4j.com/download/](https://neo4j.com/download/).
- en: 'You should see a page that looks like this, where you can download Neo4j by
    clicking on the **Download** button:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到一个页面，其中你可以通过点击**下载**按钮来下载Neo4j：
- en: '![Figure 12.4 – Neo4j download site](img/B21087_12_04.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![图12.4 – Neo4j下载网站](img/B21087_12_04.jpg)'
- en: Figure 12.4 – Neo4j download site
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.4 – Neo4j下载网站
- en: 'After hitting the **Download** button in *Figure 12**.4*, you’ll be prompted
    to follow the installer instructions to complete the installation. When the installer
    finishes, you’ll see an icon or will have launched Neo4j directly on your machine
    from the installation process. This should take you to a page that looks like
    this:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在点击*图12.4*中的**下载**按钮后，你将提示遵循安装程序说明完成安装。安装程序完成后，你将看到一个图标，或者将从安装过程中直接在你的机器上启动Neo4j。这应该会带你到一个看起来像这样的页面：
- en: '![Figure 12.5 – The start page of Neo4j](img/B21087_12_05.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![图12.5 – Neo4j的起始页面](img/B21087_12_05.jpg)'
- en: Figure 12.5 – The start page of Neo4j
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.5 – Neo4j的起始页面
- en: '*Figure 12**.5* shows the free Desktop version of Neo4j on a Windows machine.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '*图12.5*显示了Windows机器上的Neo4j免费桌面版本。'
- en: Note
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: There is already an example project ready to explore or query.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 已经有一个示例项目可供探索或查询。
- en: We’ll work on some basic queries with this data, but if you wish to explore
    this database prior to querying, click on **Movie DBMS** and hit the **Start**
    button to run the database on your machine; when you finish exploring, make sure
    to hit the **Stop** button to cache the database again.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用这些数据执行一些基本查询，但如果你希望在查询之前探索这个数据库，请点击**Movie DBMS**并点击**启动**按钮以在您的机器上运行数据库；探索完成后，请确保点击**停止**按钮再次缓存数据库。
- en: The query language used by Neo4j is called `Match` command functions much like
    SQL’s `SELECT` command, and operations such as `limit` and `as` also exist in
    Cypher. However, operations that retrieve directional relationships (edges) between
    objects in the database (vertices) also exist to query specific types of relationships
    that might exist. We’ll see more of this in action as we explore the Movie DBMS
    (database management system) database on Neo4j’s Desktop application.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Neo4j使用的查询语言称为`Match`命令，其功能类似于SQL的`SELECT`命令，`limit`和`as`等操作也存在于Cypher中。然而，用于检索数据库中对象（顶点）之间方向关系（边）的操作也存在，以便查询可能存在的特定类型的关系。随着我们在Neo4j桌面应用程序上探索Movie
    DBMS（数据库管理系统）数据库，我们将看到更多这方面的实际应用。
- en: Now, let’s explore Neo4j.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们探索Neo4j。
- en: Basic query example
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本查询示例
- en: 'When you open your Neo4j Desktop application, you’ll see an `Example Project`
    folder. When you hover over the **Movie DBMS** label on the right-hand side of
    the screen, you’ll see a **Start** button that launches the connection to this
    database (shown in *Figure 12**.6*). Click on **Start**:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当你打开你的Neo4j桌面应用程序时，你会看到一个`Example Project`文件夹。当你将鼠标悬停在屏幕右侧的**Movie DBMS**标签上时，你会看到一个**启动**按钮，该按钮启动与此数据库的连接（如*图12.6*所示）。点击**启动**：
- en: '![Figure 12.6 – The Start button to launch the Movie DBMS database](img/B21087_12_06.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图12.6 – 启动Movie DBMS数据库的启动按钮](img/B21087_12_06.jpg)'
- en: Figure 12.6 – The Start button to launch the Movie DBMS database
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.6 – 启动Movie DBMS数据库的启动按钮
- en: As shown in *Figure 12**.6*, once you have launched the Movie DBMS database
    by clicking `about-movies.neo4j-browser-guide` file option and run through a few
    examples of queries to become familiar with Cypher’s syntax and results.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如*图12.6*所示，一旦通过点击`about-movies.neo4j-browser-guide`文件选项启动了Movie DBMS数据库，并运行了一些查询示例以熟悉Cypher的语法和结果。
- en: 'You’ll see a page like *Figure 12**.7* when you click on the `about-movies.neo4j-browser-guide`
    file option. The first page shows a basic query pulling data on an actor. Here,
    we’ll change the actor to `Brad Pitt` and query the graph for instances of `Brad
    Pitt`. When you have the code changed to what is shown in *Figure 12**.7*, hit
    the arrow to run the code. Note that you’ll see the default tutorial below the
    code you write. We aren’t showing this in our Neo4j query images but it will appear
    on your screen:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当你点击`about-movies.neo4j-browser-guide`文件选项时，你会看到一个像*图12.7*一样的页面。第一个页面显示了一个基本的查询，用于检索演员的数据。在这里，我们将演员更改为`Brad
    Pitt`并查询图中`Brad Pitt`的实例。当你将代码更改为*图12.7*中所示的内容时，点击箭头以运行代码。请注意，你将在你编写的代码下方看到默认教程。我们不会在我们的Neo4j查询图像中显示此内容，但它将出现在你的屏幕上：
- en: '![Figure 12.7 – A basic Cypher query that searches for Brad Pitt](img/B21087_12_07.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图12.7 – 一个基本的Cypher查询，用于搜索布拉德·皮特](img/B21087_12_07.jpg)'
- en: Figure 12.7 – A basic Cypher query that searches for Brad Pitt
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.7 – 一个基本的Cypher查询，用于搜索布拉德·皮特
- en: 'This database does not contain any information about Brad Pitt. Running the
    suggested query on `Tom Hanks` does produce information in JSON form, as this
    data does not contain graph elements. You should see something like *Figure 12**.8*
    when you query the database for `Tom Hanks`:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这个数据库不包含关于布拉德·皮特的任何信息。在`Tom Hanks`上运行建议的查询会产生以JSON形式的信息，因为此数据不包含图元素。当你查询数据库中的`Tom
    Hanks`时，你应该看到类似*图12.8*的内容：
- en: '![Figure 12.8 – The result of our query for Tom Hanks in Movie DBMS](img/B21087_12_08.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图12.8 – 在电影数据库管理系统中查询Tom Hanks的结果](img/B21087_12_08.jpg)'
- en: Figure 12.8 – The result of our query for Tom Hanks in Movie DBMS
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.8 – 在电影数据库管理系统中查询Tom Hanks的结果
- en: Let’s go to the next page of the guide and add an actor to the database. We’ll
    add Brad Pitt, as our query came back empty initially. *Figure 12**.9* shows how
    to add an actor to the database along with their birth year.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们翻到指南的下一页，向数据库中添加一个演员。我们将添加布拉德·皮特，因为我们的查询最初返回了空结果。*图12.9*显示了如何将演员及其出生年份添加到数据库中。
- en: '![Figure 12.9 – Instructions to create an entry for Brad Pitt](img/B21087_12_09.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![图12.9 – 创建布拉德·皮特条目的说明](img/B21087_12_09.jpg)'
- en: Figure 12.9 – Instructions to create an entry for Brad Pitt
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.9 – 创建布拉德·皮特条目的说明
- en: 'When we run the code from *Figure 12**.9*, Neo4j shows us a vertex with Brad
    Pitt’s information, as seen in *Figure 12**.10*:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行*图12.9*中的代码时，Neo4j显示给我们一个包含布拉德·皮特信息的顶点，如图*图12.10*所示：
- en: '![Figure 12.10 – The result of creating Brad Pitt’s entry](img/B21087_12_10.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图12.10 – 创建布拉德·皮特条目的结果](img/B21087_12_10.jpg)'
- en: Figure 12.10 – The result of creating Brad Pitt’s entry
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.10 – 创建布拉德·皮特条目的结果
- en: 'We can add a movie associated with `Brad Pitt`, in this case, `Seven Years
    in Tibet`, as shown in *Figure 12**.11*’s code in the top line:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以添加与`Brad Pitt`相关的电影，例如，`七年内》，如图12.11*中的代码所示：
- en: '![Figure 12.11 – Cypher code to add a movie associated with Brad Pitt](img/B21087_12_11.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![图12.11 – 添加与布拉德·皮特相关的电影的Cypher代码](img/B21087_12_11.jpg)'
- en: Figure 12.11 – Cypher code to add a movie associated with Brad Pitt
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.11 – 添加与布拉德·皮特相关的电影的Cypher代码
- en: 'When we run this Cypher code, we see another graph database vertex appear,
    as shown in *Figure 12**.12*:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行这个Cypher代码时，我们会看到另一个图数据库顶点出现，如图*图12.12*所示：
- en: '![Figure 12.12 – The result of running the Cypher query from Figure 12.11](img/B21087_12_12.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![图12.12 – 运行图12.11中的Cypher查询的结果](img/B21087_12_12.jpg)'
- en: Figure 12.12 – The result of running the Cypher query from Figure 12.11
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.12 – 运行图12.11中的Cypher查询的结果
- en: 'Just as we can add to our graph database, we can also delete individual records
    from the database. Let’s delete the records we just created for `Brad Pitt`. *Figure
    12**.13* shows the deletion of the record for `Brad Pitt`. I urge you to try deleting
    `Seven Years in Tibet` before moving on to the next task in this chapter:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们可以向我们的图数据库添加内容一样，我们也可以从数据库中删除单个记录。让我们删除我们刚刚为`Brad Pitt`创建的记录。*图12.13*显示了删除`Brad
    Pitt`记录的过程。我敦促你在继续下一章的任务之前尝试删除`七年内》：
- en: '![Figure 12.13 – Cypher code to delete the record we created for Brad Pitt](img/B21087_12_13.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图12.13 – 删除我们为布拉德·皮特创建的记录的Cypher代码](img/B21087_12_13.jpg)'
- en: Figure 12.13 – Cypher code to delete the record we created for Brad Pitt
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.13 – 删除我们为布拉德·皮特创建的记录的Cypher代码
- en: 'We can also create or update a record in the database using the `MERGE` statement
    with a `CREATE` and a `MATCH` statement to either create a new record or update
    an existing record (depending on what exists in the database). We’ll add Brad
    Pitt’s information back into the database using the code shown in *Figure 12**.14*:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用带有`CREATE`和`MATCH`语句的`MERGE`语句在数据库中创建或更新记录，以创建新记录或更新现有记录（取决于数据库中存在的内容）。我们将使用*图12.14*中显示的代码将布拉德·皮特的信息重新添加到数据库中：
- en: '![Figure 12.14 – An updated example in Cypher code](img/B21087_12_14.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图12.14 – Cypher代码的更新示例](img/B21087_12_14.jpg)'
- en: Figure 12.14 – An updated example in Cypher code
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.14 – Cypher代码的更新示例
- en: When we run the code in *Figure 12**.14*, we see *Figure 12**.9* appear again,
    where Brad Pitt’s information has been added to the database. Now that we know
    some basic Cypher commands, we can move on to more complicated graph database
    operations in the next section.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行*图12.14*中的代码时，我们会再次看到*图12.9*，其中布拉德·皮特的信息已经添加到数据库中。现在我们了解了一些基本的Cypher命令，我们可以继续到下一节，学习更复杂的图数据库操作。
- en: More complicated query examples
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更复杂的查询示例
- en: Now that we know how to execute basic queries, we can move on to more complicated
    operations in Neo4j, such as adding relationships between items. Let’s connect
    actors and movies with a Cypher query connecting Brad Pitt to *Seven Years in
    Tibet* through his character, Heinrich Harrer.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了如何执行基本查询，我们可以继续学习 Neo4j 中更复杂的操作，例如在项目之间添加关系。让我们通过 Cypher 查询将布拉德·皮特与 *《七年的西藏》*
    通过他的角色海因里希·哈勒连接起来。
- en: Note
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You’ll need to add both the movie and actor back into our database using the
    code in the *Basic query example* section before running this query. This query
    is shown in *Figure 12**.15*.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行此查询之前，您需要使用 *基本查询示例* 部分的代码将电影和演员都添加到我们的数据库中。此查询如图 *12.15* 所示。
- en: '![Figure 12.15 – A Cypher query to connect Brad Pitt to his character, Heinrich
    Harrer, in Seven Years in Tibet ](img/B21087_12_15.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.15 – 将布拉德·皮特与《七年的西藏》中的角色海因里希·哈勒连接起来的 Cypher 查询](img/B21087_12_15.jpg)'
- en: Figure 12.15 – A Cypher query to connect Brad Pitt to his character, Heinrich
    Harrer, in Seven Years in Tibet
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.15 – 将布拉德·皮特与《七年的西藏》中的角色海因里希·哈勒连接起来的 Cypher 查询
- en: 'Running this query returns information about the actor, the movie, and the
    relationship we just created between the two datasets, as shown in *Figure 12**.16*:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此查询返回关于演员、电影以及我们刚刚在这两个数据集之间创建的关系的信息，如图 *12.16* 所示：
- en: '![Figure 12.16 – The result of Figure 12.15’s Cypher query to connect Brad
    Pitt to Seven Years in Tibet](img/B21087_12_16.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.16 – 图 12.15 的 Cypher 查询结果，将布拉德·皮特与《七年的西藏》连接起来](img/B21087_12_16.jpg)'
- en: Figure 12.16 – The result of Figure 12.15’s Cypher query to connect Brad Pitt
    to Seven Years in Tibet
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.16 – 图 12.15 的 Cypher 查询结果，将布拉德·皮特与《七年的西藏》连接起来
- en: The next page of the Neo4j Cypher guide shows an alternative way to create this
    relationship. You are encouraged to modify that code to add another actor and
    movie as an exercise. Let’s turn our attention to Cypher’s `WHERE` clauses, which
    function much as they do in SQL.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Neo4j Cypher 指南的下一页展示了创建此关系的另一种方法。鼓励您修改该代码以添加另一个演员和电影作为练习。让我们将注意力转向 Cypher 的
    `WHERE` 子句，它们在 SQL 中的功能非常相似。
- en: 'We’ll search for persons whose names start with the first name `Brad`, which
    should pull up Brad Pitt’s entry, as well as any other actors whose first name
    is Brad. *Figure 12**.17* shows this query:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将搜索以名字 `Brad` 开头的人名，这将检索布拉德·皮特的条目，以及任何其他名字也是 `Brad` 的演员。*图 12.17* 展示了此查询：
- en: '![Figure 12.17 – An example of a WHERE query in Cypher](img/B21087_12_17.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.17 – Cypher 中 WHERE 查询的示例](img/B21087_12_17.jpg)'
- en: Figure 12.17 – An example of a WHERE query in Cypher
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.17 – Cypher 中 WHERE 查询的示例
- en: 'When we run the Cypher code in *Figure 12**.17*, we should see two instances
    of `Brad Pitt` showing up in our database, as shown in *Figure 12**.18*:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在 *图 12.17* 中运行 Cypher 代码时，我们应该在我们的数据库中看到两个 `Brad Pitt` 的实例，如图 *12.18* 所示：
- en: '![Figure 12.18 – Results from Figure 12.17’s WHERE Cypher query](img/B21087_12_18.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.18 – 图 12.17 的 WHERE Cypher 查询结果](img/B21087_12_18.jpg)'
- en: Figure 12.18 – Results from Figure 12.17’s WHERE Cypher query
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.18 – 图 12.17 的 WHERE Cypher 查询结果
- en: 'We can also match based on relationships, such as finding movies associated
    with an actor. Let’s try a Cypher query on relationships to find all of the movies
    associated with Brad Pitt (here, just `Seven Years in Tibet`, as we added this
    relationship). *Figure 12**.19* shows the query we’ll use to query a relationship:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以根据关系进行匹配，例如找到与演员相关的电影。让我们尝试一个 Cypher 查询来找到与布拉德·皮特相关的所有电影（在这里，只是 `Seven
    Years in Tibet`，因为我们添加了此关系）。*图 12.19* 展示了我们将使用的查询：
- en: '![Figure 12.19 – A Cypher query on graph relationships between people and movies](img/B21087_12_19.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.19 – 人与电影之间图关系的 Cypher 查询](img/B21087_12_19.jpg)'
- en: Figure 12.19 – A Cypher query on graph relationships between people and movies
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.19 – 人与电影之间图关系的 Cypher 查询
- en: 'When we run the Cypher query shown in *Figure 12**.19*, we see the connections
    between our instances of `Brad Pitt` and `Seven Years in Tibet` shown in graph
    form (*Figure 12**.20*):'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '当我们运行 *图 12.19* 中所示的 Cypher 查询时，我们看到 `Brad Pitt` 的实例与《七年的西藏》之间的连接以图形形式显示 (*图
    12.20*):'
- en: '![Figure 12.20 – The results of Figure 12.19’s graph relationship query](img/B21087_12_20.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.20 – 图 12.19 的图关系查询结果](img/B21087_12_20.jpg)'
- en: Figure 12.20 – The results of Figure 12.19’s graph relationship query
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.20 – 图 12.19 的图关系查询结果
- en: '*Figure 12**.20* shows the essential strengths of a graph database. We can
    see relationships that connect different items across tables (here, the `Person`
    table and the `Movie` table), as well as the nature of that relationship. It’s
    easy to see an actor connected to a movie, and should more movies exist, we’d
    have an easy visualization of our query results from this graph-based query in
    Neo4j.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '*图12**.20* 展示了图数据库的基本优势。我们可以看到连接不同表（在此处，`Person` 表和 `Movie` 表）中不同项的关系，以及这种关系的性质。很容易看到与电影相连的演员，如果有更多电影存在，我们就可以轻松地通过基于图查询的查询结果来可视化我们的查询结果。'
- en: While this movie database contains basic tables and relationships, we can imagine
    our examples in the *What can you represent in a graph database?* section containing
    much more complicated relationships between many more tables. Visualizing query
    results in graph form across tables and items in tables provides easy-to-understand
    summaries of the data and relationships of interest in a query. Herein lies the
    power of graph databases. Queries tend to be quick, even for queries with many
    subqueries or when searching very large tables and their relations, and visualizations
    of results allow users to explore relationships in depth across tables (or provide
    succinct visuals for a report).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这个电影数据库包含基本的表和关系，但我们可以想象在 *图数据库中可以表示什么？* 这一部分的例子中包含了许多更多表之间更加复杂的关系。在表和表中的项目上以图形形式可视化查询结果，提供了对查询中感兴趣的数据和关系的易于理解的摘要。这正是图数据库的力量所在。查询通常很快，即使是对于包含许多子查询的查询或在大表及其关系中进行搜索时也是如此，结果的可视化使用户能够深入探索表之间的关系（或为报告提供简洁的视觉表示）。
- en: If you wish to explore Neo4j further, Neo4j’s AuraDB allows users to connect
    to the database through Python by establishing an account and connecting to Neo4j
    with an API in Python using the `neo4j` package and `GraphDatabase.driver()` function
    to create the connection.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想进一步探索 Neo4j，Neo4j 的 AuraDB 允许用户通过建立账户并使用 Python 中的 `neo4j` 包和 `GraphDatabase.driver()`
    函数通过 API 连接到 Neo4j 来连接到数据库。
- en: Note
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: For any large databases or databases you wish to permanently save, you’ll need
    a paid account.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何大型数据库或您希望永久保存的数据库，您需要一个付费账户。
- en: Once the database is created, you can query the Neo4j database through Python’s
    `neo4j driver.execute_query()` statement and import the data as a network in igraph
    to analyze the results. This provides a powerful combination of graph storage
    and graph analysis for your analytics projects. If you are interested, you are
    encouraged to explore Neo4j further and create your own connected projects between
    igraph and Neo4j’s AuraDB accounts.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库创建完成后，您可以通过 Python 的 `neo4j driver.execute_query()` 语句查询 Neo4j 数据库，并将数据作为网络导入
    igraph 以分析结果。这为您的分析项目提供了强大的图存储和图分析组合。如果您感兴趣，我们鼓励您进一步探索 Neo4j 并创建您自己的 igraph 和
    Neo4j 的 AuraDB 账户之间的连接项目。
- en: Summary
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we examined cases where graph databases are advantageous, familiarized
    ourselves with an open source graph database called Neo4j, and learned a bit about
    the query language of Neo4j, called Cypher. We created, deleted, and modified
    records in a Neo4j movie database. We explored the advantages of querying graph
    databases and the unique query result visualizations possible with graph databases.
    If you are interested, I encourage you to consult Cypher and Neo4j resources to
    dive deeper into what is possible with graph databases.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了图数据库的优势，熟悉了名为 Neo4j 的开源图数据库，并简要了解了 Neo4j 的查询语言，称为 Cypher。我们在 Neo4j
    电影数据库中创建了、删除了和修改了记录。我们探讨了查询图数据库的优势以及图数据库中可能的独特查询结果可视化。如果您感兴趣，我鼓励您查阅 Cypher 和 Neo4j
    资源，以深入了解图数据库的潜力。
- en: In the next chapter, we’ll be putting together all of the skills we’ve learned
    in the book so far to tackle a real-world problem of predicting Ebola outbreak
    severity over time and geography across regions of the Democratic Republic of
    Congo.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将把本书中迄今为止学到的所有技能结合起来，解决一个现实世界问题，即预测刚果民主共和国各地区随时间和地理变化的埃博拉疫情严重程度。
- en: References
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: Adler, M. W., and Johnson, A. M. (1988). *Contact tracing for HIV infection*.
    *British Medical Journal (Clinical research ed.)*, *296*(6634), 1420.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: Adler, M. W. 和 Johnson, A. M. (1988). *HIV感染的接触追踪*. *英国医学杂志（临床研究版）*，*296*(6634)，1420。
- en: Angles, R., Arenas, M., Barceló, P., Hogan, A., Reutter, J., and Vrgoč, D. (2017).
    *Foundations of modern query languages for graph databases*. *ACM Computing Surveys
    (CSUR)*, *50*(5), 1–40.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Angles, R., Arenas, M., Barceló, P., Hogan, A., Reutter, J., and Vrgoč, D. (2017).
    *图数据库现代查询语言的基础*. *ACM 计算机调查 (CSUR)*, *50*(5), 1–40.
- en: 'Beas-Luna, R., Novak, M., Carr, M. H., Tinker, M. T., Black, A., Caselle, J.
    E., ... and Iles, A. (2014). *An online database for informing ecological network
    models*: [http://kelpforest](http://kelpforest). ucsc. edu. *PloS one*, *9*(10),
    e109356.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: Beas-Luna, R., Novak, M., Carr, M. H., Tinker, M. T., Black, A., Caselle, J.
    E., ... and Iles, A. (2014). *一个在线数据库，用于指导生态网络模型*：[http://kelpforest](http://kelpforest).
    ucsc. edu. *PloS one*, *9*(10), e109356.
- en: Hyman, J. M., Li, J., and Stanley, E. A. (2003). *Modeling the impact of random
    screening and contact tracing in reducing the spread of HIV*. *Mathematical biosciences*,
    *181*(1), 17–54.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: Hyman, J. M., Li, J., and Stanley, E. A. (2003). *建模随机筛查和接触追踪在减少HIV传播中的影响*.
    *数学生物科学*, *181*(1), 17–54.
- en: 'Mueller, W., Rudowicz-Nawrocka, J., Otrzasek, J., Idziaszek, P., and Weres,
    J. (2016). *Spatial data and graph databases for identifying relations among members
    of cattle herd*. *International Multidisciplinary Scientific GeoConference: SGEM*,
    *1*, 835–841.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Mueller, W., Rudowicz-Nawrocka, J., Otrzasek, J., Idziaszek, P., and Weres,
    J. (2016). *空间数据和图数据库在识别牛群成员关系中的应用*. *国际多学科科学地理会议：SGEM*, *1*, 835–841.
- en: 'Pasquale, D. K., Doherty, I. A., Leone, P. A., Dennis, A. M., Samoff, E., Jones,
    C. S., ... and Miller, W. C. (2021). *Lost and found: applying network analysis
    to public health contact tracing for HIV*. *Applied network science*, *6*, 1–16.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: Pasquale, D. K., Doherty, I. A., Leone, P. A., Dennis, A. M., Samoff, E., Jones,
    C. S., ... and Miller, W. C. (2021). *失而复得：将网络分析应用于HIV公共卫生接触追踪*. *应用网络科学*, *6*,
    1–16.
- en: 'Pokorný, J. (2015). *Graph databases: their power and limitations*. In *Computer
    Information Systems and Industrial Management: 14th IFIP TC 8 International Conference,
    CISIM 2015, Warsaw, Poland, September 24-26, 2015, Proceedings 14* (pp. 58-69).
    Springer International Publishing.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: Pokorný, J. (2015). *图数据库：其力量与局限性*. 在 *计算机信息系统与工业管理：第14届IFIP TC 8国际会议，CISIM
    2015，波兰华沙，2015年9月24-26日，论文集14* (pp. 58-69). Springer 国际出版社.
- en: 'Robinson, I., Webber, J., and Eifrem, E. (2015). *Graph databases: new opportunities
    for connected data*. O’Reilly Media, Inc..'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: Robinson, I., Webber, J., and Eifrem, E. (2015). *图数据库：连接数据的全新机遇*. O’Reilly
    Media, Inc..
- en: 'Shannon, P., Markiel, A., Ozier, O., Baliga, N. S., Wang, J. T., Ramage, D.,
    ... and Ideker, T. (2003). *Cytoscape: a software environment for integrated models
    of biomolecular interaction networks*. *Genome research*, *13* (11), 2498–2504.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: Shannon, P., Markiel, A., Ozier, O., Baliga, N. S., Wang, J. T., Ramage, D.,
    ... and Ideker, T. (2003). *Cytoscape：一个用于生物分子相互作用网络综合模型的软件环境*. *基因组研究*, *13*
    (11), 2498–2504.
- en: 'Webber, J. (2012, October). *A programmatic introduction to neo4j*. In *Proceedings
    of the 3rd annual conference on Systems, programming, and applications: software
    for humanity* (pp. 217–218).'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: Webber, J. (2012, October). *Neo4j程序化入门*. 在 *第三届系统、编程和应用：为人类服务的软件年度会议论文集* (pp.
    217–218).
