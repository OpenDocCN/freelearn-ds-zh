- en: Chapter 6. Graph Fundamentals
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第六章 图基础
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖以下方法：
- en: Representing a graph from a list of edges
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从边的列表表示图
- en: Representing a graph from an adjacency list
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从邻接表表示图
- en: Conducting a topological sort on a graph
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对图进行拓扑排序
- en: Traversing a graph depth-first
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 深度优先遍历图
- en: Traversing a graph breadth-first
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图的广度优先遍历
- en: Visualizing a graph using Graphviz
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Graphviz可视化图
- en: Using Directed Acyclic Word Graphs
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用有向无环图
- en: Working with hexagonal and square grid networks
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理六边形和方形网格网络
- en: Finding maximal cliques in a graph
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找图中的最大团
- en: Determining whether any two graphs are isomorphic
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定两个图是否同构
- en: Introduction
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: '![Introduction](img/ch06.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![介绍](img/ch06.jpg)'
- en: This section on graphs is a natural extension to the previous one about trees.
    Graphs are an essential data structure for representing networks, and this chapter
    will cover some important algorithms.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本节关于图的内容是对前一节关于树的内容的自然扩展。图是表示网络的基本数据结构，本章将涵盖一些重要的算法。
- en: A graph relieves some of the restrictions from a tree, which allows one to represent
    network data such as biological gene relationship, social networks, and road topologies.
    Haskell supports multiple graph data structure libraries with various helpful
    tools and algorithms. This section will cover basic topics such as graph representation,
    topological sort, traversal, and graph-specific packages.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 图减轻了树的一些限制，使得可以表示网络数据，如生物基因关系、社交网络和道路拓扑。Haskell支持多种图数据结构库，提供了各种有用的工具和算法。本节将涵盖图的表示、拓扑排序、遍历以及与图相关的包等基础话题。
- en: Representing a graph from a list of edges
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从边的列表表示图
- en: A graph can be defined by a list of edges, where an edge is a tuple of vertices.
    In the `Data.Graph` package, a vertex is simply `Int`. In this recipe, we use
    the `buildG` function to construct a graph data structure out of a list of edges.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图可以通过一组边来定义，其中边是顶点的元组。在`Data.Graph`包中，顶点就是`Int`。在这个方法中，我们使用`buildG`函数根据一组边构建图数据结构。
- en: Getting ready
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'We will be constructing the graph represented in the following diagram:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将构建如下图所示的图：
- en: '![Getting ready](img/6331OS_06_01.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/6331OS_06_01.jpg)'
- en: How to do it...
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做……
- en: 'Create a new file, which we will name `Main.hs`, and insert the following code:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新文件，我们将其命名为`Main.hs`，并插入以下代码：
- en: 'Import the `Data.Graph` package:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`Data.Graph`包：
- en: '[PRE0]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Construct a graph using the `buildG` function from the imported library:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用导入库中的`buildG`函数构建图：
- en: '[PRE1]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Print out the graph, its edges, and its vertices:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印图、它的边和顶点：
- en: '[PRE2]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How it works...
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: 'A list of edges is fed to the `buildG :: Bounds -> [Edge] -> Graph` function
    to form a graph data structure. The first argument specifies the lower and upper
    bounds for the vertices, and the second argument specifies the list of edges that
    make up the graph.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '一组边被传递给`buildG :: Bounds -> [Edge] -> Graph`函数以构建图数据结构。第一个参数指定了顶点的上下边界，第二个参数指定了组成图的边的列表。'
- en: This graph data type is actually a Haskell array of vertices to a list of vertices.
    It uses the built-in `Data.Array` package, meaning we can use all the functions
    provided in `Data.Array` in our graphs.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这种图数据类型实际上是一个Haskell数组，表示从顶点到顶点列表的映射。它使用了内建的`Data.Array`包，意味着我们可以在图中使用`Data.Array`提供的所有函数。
- en: See also
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: For another way to construct a graph, see the next recipe, *Representing a graph
    from an adjacency list*.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解另一种构建图的方式，请参见下一个方法，*从邻接表表示图*。
- en: Representing a graph from an adjacency list
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从邻接表表示图
- en: It may be more convenient to construct a graph given an adjacency list. In this
    recipe, we will use the built-in package `Data.Graph` to read a mapping of a vertex
    to a list of connected vertices.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 给定邻接表构建图可能会更方便。在本方法中，我们将使用内建的`Data.Graph`包来读取顶点与其连接的顶点列表之间的映射。
- en: Getting ready
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'We will be constructing the graph represented in the following diagram:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将构建如下图所示的图：
- en: '![Getting ready](img/6331OS_06_01.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/6331OS_06_01.jpg)'
- en: How to do it...
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做……
- en: 'Create a new file, which we will name `Main.hs`, and insert the following code:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新文件，我们将其命名为`Main.hs`，并插入以下代码：
- en: 'Import the `Data.Graph` package:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`Data.Graph`包：
- en: '[PRE3]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Use the `graphFromEdges''` function to obtain a tuple that contains the graph.
    A graph data structure, `Graph`, is in the first element of the tuple returned.
    The second element of the tuple contains mappings from a vertex number to its
    corresponding value, `Vertex -> (node, key, [key])`:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `graphFromEdges'` 函数获取包含图形的元组。元组的第一个元素是图数据结构 `Graph`，第二个元素是从节点编号到其相应值的映射
    `Vertex -> (node, key, [key])`：
- en: '[PRE4]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Print out some graph computations:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输出一些图形计算结果：
- en: '[PRE5]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Running the code displays the edges and vertices of the graph:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码会显示图形的边和节点：
- en: '[PRE6]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works...
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We may notice that the keys of each vertex have been automatically assigned
    by the algorithm. The `graphFromEdges'` function actually returns a tuple of the
    type `(Graph, Vertex -> (node, key, [key]))`, where the first element is the graph
    data structure, and the second element is a mapping of the vertex number to its
    actual key.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能会注意到，每个节点的键已经由算法自动分配。`graphFromEdges'` 函数实际上返回一个类型为 `(Graph, Vertex -> (node,
    key, [key]))` 的元组，其中第一个元素是图数据结构，第二个元素是从节点编号到其实际键的映射。
- en: Just like the previous recipe, this graph data structure is actually an array
    from the `Data.Array` package, meaning we can use all the functions provided in
    `Data.Array` in our graphs.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前的配方一样，这个图数据结构实际上是来自 `Data.Array` 包的一个数组，这意味着我们可以在图形中使用 `Data.Array` 提供的所有函数。
- en: See also
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见：
- en: If we instead wish to create a graph from a list of edges, the previous recipe,
    *Representing a graph from an adjacency list* does the job.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们希望从边的列表创建图形，之前的配方 *从邻接表表示图形* 可以完成这个任务。
- en: Conducting a topological sort on a graph
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对图进行拓扑排序
- en: If a graph is directed, the topological sort is one of the natural orderings
    of the graph. In a network of dependencies, the topological sort will reveal a
    possible enumeration through all the vertices that satisfy such dependencies.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果图是有向图，那么拓扑排序是图的自然排序之一。在依赖关系网络中，拓扑排序将揭示满足这些依赖关系的所有顶点的可能排列。
- en: Haskell's built-in graph package comes with a very useful function, `topSort`,
    to conduct a topological sort over a graph. In this recipe, we will be creating
    a graph of dependencies and enumerating a topological sort through it.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Haskell 内置的图形包提供了一个非常有用的函数 `topSort`，可以对图形进行拓扑排序。在这个配方中，我们将创建一个依赖关系图，并对其进行拓扑排序。
- en: Getting ready
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will be reading the data from the user input. Each pair of lines will represent
    a dependency.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从用户输入中读取数据。每一对行将表示一个依赖关系。
- en: 'Create a file `input.txt` with the following pairs of lines:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为 `input.txt` 的文件，文件内容是以下依赖项对：
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This file describes a list of dependencies, which are as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件描述了一个依赖关系列表，内容如下：
- en: One must understand Haskell in order to do Haskell data analysis
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必须理解 Haskell 才能进行 Haskell 数据分析
- en: One must understand data analysis to do Haskell data analysis
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必须理解数据分析才能进行 Haskell 数据分析
- en: One must do Haskell data analysis to find patterns in big data
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必须进行 Haskell 数据分析才能在大数据中找到模式
- en: Tip
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: We will use the `topsort` algorithm provided by `Data.Graph`. Beware, this function
    does not detect cyclic dependencies.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 `Data.Graph` 提供的 `topsort` 算法。请注意，这个函数不能检测循环依赖。
- en: How to do it...
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'In a new file, which we will call `Main.hs`, insert the following code:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个新文件中，我们将其命名为 `Main.hs`，插入以下代码：
- en: 'Import the following from the graph, map, and list packages:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从图形、映射和列表包中导入以下内容：
- en: '[PRE8]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Read from the input and construct a graph from the dependencies. Run our topological
    sort on the graph and print out a valid order:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从输入中读取并根据依赖关系构建图形。对图执行拓扑排序并输出有效的顺序：
- en: '[PRE9]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Construct a graph from a list of strings, where each pair of lines represents
    a dependency:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从字符串列表构建图形，其中每一对行表示一个依赖关系：
- en: '[PRE10]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Sort the graph topologically and print out a valid ordering of the items:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对图进行拓扑排序，并输出有效的排序顺序：
- en: '[PRE11]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Compile the code and feed it with the text file of dependencies:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译代码并将依赖项的文本文件作为输入：
- en: '[PRE12]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Traversing a graph depth-first
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深度优先遍历图形
- en: Using depth-first search, one can traverse a graph to view the nodes in the
    desired order. Implementing a topological sort, solving mazes, and finding connected
    components are all examples of useful algorithms that rely on a depth-first traversal
    of a graph.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 使用深度优先搜索，能够遍历图形以查看节点的期望顺序。实现拓扑排序、解决迷宫问题以及寻找连通分量，都是依赖于图的深度优先遍历的有用算法示例。
- en: How to do it...
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'Start editing a new source file, which we will name `Main.hs`:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 开始编辑一个新的源文件，我们将其命名为`Main.hs`：
- en: 'Import the required packages:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入所需的包：
- en: '[PRE13]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Construct the graph from the adjacency list:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从邻接表构建图形：
- en: '[PRE14]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Scan the graph depth-first:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 扫描图形进行深度优先遍历：
- en: '[PRE15]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Print out the list of vertices visited:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印出访问的顶点列表：
- en: '[PRE16]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Run the algorithm to see the order of traversal.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行算法以查看遍历顺序。
- en: '[PRE17]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We start at node 1 (which is at index 0). We traverse the first edge to 3\.
    From number 3, we traverse to the first edge to 4\. Since 4 has no outbound edges,
    we traverse back to 3\. Since 3 has no remaining outbound edges, we traverse back
    to 1\. From 1, we traverse the second edge to 4.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从节点 1（索引为 0）开始。我们沿着第一条边遍历到节点 3。从节点 3，我们沿着第一条边遍历到节点 4。由于 4 没有出边，我们回到节点 3。由于
    3 没有剩余的出边，我们回到节点 1。从节点 1，我们沿着第二条边遍历到节点 4。
- en: Traversing a graph breadth-first
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进行广度优先遍历图形
- en: Using breadth-first search, one can traverse a graph to view the nodes in the
    desired order. In an infinite graph, a depth-first traversal may never return
    back to the starting node. One of the most notable examples of a breadth-first
    traversal algorithm is finding the shortest path between two nodes.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 使用广度优先搜索，可以遍历图形以查看节点的顺序。在一个无限图中，深度优先遍历可能永远无法返回到起始节点。广度优先遍历算法的一个显著例子是找到两个节点之间的最短路径。
- en: In this recipe, we will print out the breadth-first traversal of the nodes in
    a graph.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将打印出图中节点的广度优先遍历。
- en: How to do it...
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Insert the following code in a new file, which can be called `Main.hs`:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在新文件中插入以下代码，可以命名为`Main.hs`：
- en: 'Import the required packages:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入所需的包：
- en: '[PRE18]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Construct the graph from a list of edges:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从边的列表构建图形：
- en: '[PRE19]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Scan the graph breadth-first:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 扫描图形进行广度优先遍历：
- en: '[PRE20]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Print out the list of vertices visited depth-first:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印出深度优先遍历的访问顶点列表：
- en: '[PRE21]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Running the code shows the traversal:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码显示遍历结果：
- en: '[PRE22]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Visualizing a graph using Graphviz
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Graphviz 可视化图形
- en: One can easily draw an image that represents a graph using the `graphviz` library.
    In the world of data analysis, visually interpreting an image can reveal peculiarities
    about the data that the human eye can easily pick up. This recipe will let us
    construct a diagram out of the data we are dealing with. More visualization techniques
    are explained in [Chapter 11](ch11.html "Chapter 11. Visualizing Data"), *Visualizing
    Data*.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`graphviz`库，可以轻松绘制表示图形的图像。在数据分析的世界中，直观地解读图像可以揭示数据中的一些特征，这些特征是人眼容易捕捉到的。本教程将帮助我们根据所处理的数据构建一个图表。更多的可视化技术在[第11章](ch11.html
    "第11章. 数据可视化")，*数据可视化*中进行了详细说明。
- en: Getting ready
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Install the `graphviz` library from [http://www.graphviz.org/Download.php](http://www.graphviz.org/Download.php)
    as the Haskell package requires it.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 从[http://www.graphviz.org/Download.php](http://www.graphviz.org/Download.php)安装`graphviz`库，因为
    Haskell 包需要它。
- en: 'Next, install the package from cabal by running the following command:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过运行以下命令从 cabal 安装该软件包：
- en: '[PRE23]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: How to do it...
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In a new file, insert the following code. We will name our file `Main.hs`:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在新文件中插入以下代码。我们将文件命名为`Main.hs`：
- en: 'Import the package:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入包：
- en: '[PRE24]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Create the graph from nodes and edges:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从节点和边创建图形：
- en: '[PRE25]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Use the default parameters for creating the graph. This function can be modified
    to modify the graph''s visual parameters:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用默认参数创建图形。此函数可以修改以调整图形的可视化参数：
- en: '[PRE26]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Create the code from the corresponding edges:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据相应的边创建代码：
- en: '[PRE27]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Execute `main` to output the graph:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行`main`以输出图形：
- en: '[PRE28]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '![How to do it...](img/6331OS_06_02.jpg)'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/6331OS_06_02.jpg)'
- en: Using Directed Acyclic Word Graphs
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用有向无环词图
- en: 'We use **Directed Acyclic Word Graphs** (**DAWG**) to retrieve very quickly
    from a large corpus of strings at an extremely small cost in space complexity.
    Imagine compressing all words in a dictionary using a DAWG to perform efficient
    lookups for words. It is a powerful data structure that can come in handy when
    dealing with a large corpus of words. A very nice introduction to DAWGs can be
    found in Steve Hanov''s blog post here: [http://stevehanov.ca/blog/index.php?id=115](http://stevehanov.ca/blog/index.php?id=115).'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用**有向无环词图**（**DAWG**）从大量字符串语料库中快速检索，且在空间复杂度上几乎不占空间。想象一下，使用 DAWG 压缩词典中的所有单词，从而实现高效的单词查找。这是一种强大的数据结构，当处理大量单词时非常有用。关于
    DAWG 的一个非常好的介绍可以在 Steve Hanov 的博客文章中找到：[http://stevehanov.ca/blog/index.php?id=115](http://stevehanov.ca/blog/index.php?id=115)。
- en: We can use this recipe to incorporate a DAWG in our code.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用此方法将 DAWG 集成到我们的代码中。
- en: Getting ready
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Install the DAWG package using cabal:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 使用cabal安装DAWG包：
- en: '[PRE29]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: How to do it...
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We name a new file `Main.hs` and insert the following code:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们命名一个新文件`Main.hs`并插入以下代码：
- en: 'Import the following packages:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入以下包：
- en: '[PRE30]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'In `main`, download a large corpus of text to store:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main`函数中，下载大量文本以存储：
- en: '[PRE31]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Look up some strings from the DAWG constructed by the corpus:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从由语料库构建的DAWG中查找一些字符串：
- en: '[PRE32]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Construct a getter function:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建一个获取函数：
- en: '[PRE33]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Create a DAWG from the corpus dictionary:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从语料库字典创建一个DAWG：
- en: '[PRE34]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Running the code reveals that the two words indeed exist in the massive corpus.
    Notice that there will be a time-consuming prepossessing step to build the DAWG:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码显示，这两个词确实存在于大规模语料库中。请注意，需要一个耗时的预处理步骤来构建DAWG：
- en: '[PRE35]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Tip
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: A naive approach may be to use the `isInfixOf` function from `Data.List` to
    perform a substring search. On a typical ThinkPad T530 with 8 GB RAM on an Intel
    i5 processor, performing the `isInfixOf` operation takes around 0.16 seconds on
    average. However, if we preprocess a DAWG data structure, lookups take less than
    0.01 seconds!
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 一个天真的方法可能是使用`Data.List`中的`isInfixOf`函数执行子字符串搜索。在一台配备8 GB RAM的Intel i5处理器的Typical
    ThinkPad T530上，执行`isInfixOf`操作的平均时间约为0.16秒。然而，如果我们预处理DAWG数据结构，则查找时间小于0.01秒！
- en: Working with hexagonal and square grid networks
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理六边形和方形网格网络
- en: Sometimes, the graph we're dealing with has a strict structure, such as a hexagonal
    or square grid. Many video games use a hexagonal grid layout to facilitate diagonal
    movement because moving diagonally in a square grid complicates the values of
    the traveled distance. On the other hand, square grid structures are often used
    within graphs to traverse pixels for image manipulation algorithms such as flood
    fill.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们处理的图具有严格的结构，例如六边形或方形网格。许多视频游戏使用六边形网格布局来促进对角线移动，因为在方形网格中对角线移动会使得移动距离的值变得复杂。另一方面，方形网格结构经常用于图像处理算法（如洪泛填充）中的像素遍历。
- en: '![Working with hexagonal and square grid networks](img/6331OS_06_03.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![处理六边形和方形网格网络](img/6331OS_06_03.jpg)'
- en: There is a very useful library in the Haskell package listing to deal with such
    topologies. We can obtain the indices of a grid to traverse the world, which is
    essentially a path embedded in a graph. For each grid index, we can query the
    library to find the neighboring indices, effectively using grids as a graph.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: Haskell包列表中有一个非常有用的库用于处理这样的拓扑结构。我们可以获取网格的索引以遍历世界，这实质上是嵌入图中的路径。对于每个网格索引，我们可以查询库以找到相邻的索引，有效地使用网格作为图形。
- en: Getting started
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 入门指南
- en: Review the package documentation located at [https://github.com/mhwombat/grid/wiki](https://github.com/mhwombat/grid/wiki).
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 查阅位于[https://github.com/mhwombat/grid/wiki](https://github.com/mhwombat/grid/wiki)的包文档：
- en: 'Install the grid package using cabal:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 使用cabal安装grid包：
- en: '[PRE36]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: How to do it...
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In a new file, which we will name `Main.hs`, insert the following code:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个新文件中，我们将命名为`Main.hs`，插入以下代码：
- en: 'Import the following libraries:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入以下库：
- en: '[PRE37]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'In `main`, print out some examples of hexagonal and grid functions:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main`函数中，打印一些六边形和网格函数的示例：
- en: '[PRE38]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Use a helper function to construct a hexagonal grid:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用一个辅助函数来构建六边形网格：
- en: '[PRE39]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Use a helper function to construct a square grid:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用一个辅助函数来构建方形网格：
- en: '[PRE40]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Create a hexagonal grid with the associated numerical values:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个带有相关数值的六边形网格：
- en: '[PRE41]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Finding maximal cliques in a graph
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在图中查找最大的团
- en: 'Haskell comes with a luxury of vital graph libraries, conveniently one of which
    is the clique detection library from `Data.Algorithm.MaximualCliques`. A **clique**
    in a graph is a subgraph where all the nodes have connections between themselves,
    and is depicted as follows:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: Haskell带有许多重要的图形库，其中一个便利的图形库是来自`Data.Algorithm.MaximalCliques`的团检测库。图中的**团**是一个子图，其中所有节点之间都有连接，如下所示：
- en: '![Finding maximal cliques in a graph](img/6331OS_06_04.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![在图中查找最大的团](img/6331OS_06_04.jpg)'
- en: For example, the preceding graph contains two cliques shaded in different colors.
    Perhaps, the graph represents web pages that link to each other. We can visually
    infer that there might be two clusters of Internet communities due to the structure
    of the graph. As the network of connections increases, finding the greatest clique
    becomes an exponentially difficult problem.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，上述图中包含两个不同颜色阴影的团。也许，该图表示相互链接的网页。从图的结构可以直观推断，由于网络连接的结构，可能存在两个互联网社区的集群。随着连接的网络增加，查找最大团变得成倍困难。
- en: In this recipe, we will use an efficient implementation of the maximal clique
    problem.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将使用最大团问题的高效实现。
- en: Getting started
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 入门
- en: 'Install the clique library using cabal:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 使用cabal安装clique库：
- en: '[PRE42]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: How to do it...
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Write the following code in a new file, which we will name `Main.hs`:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个新文件中编写以下代码，我们将其命名为`Main.hs`：
- en: 'Import the required library:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入所需的库：
- en: '[PRE43]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'In `main`, print out the max cliques:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main`中，打印出最大团：
- en: '[PRE44]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Create the following graph:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建以下图形：
- en: '[PRE45]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Determine the node range:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确定节点范围：
- en: '[PRE46]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: How it works...
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The library applies the recursive Bron-Kerbosch pivoting algorithm for identifying
    a maximal clique in an undirected graph. The core idea in the algorithm is to
    intelligently backtrack until a maximum clique is found.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 该库应用递归的Bron-Kerbosch枢轴算法来识别无向图中的最大团。算法的核心思想是智能回溯，直到找到最大团为止。
- en: Determining whether any two graphs are isomorphic
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 确定两个图是否同构
- en: Graphs can have arbitrary labels, but their topology may be isomorphic. In the
    world of data analysis, we can examine different graphical networks and identify
    clusters of nodes that have identical connection patterns. This helps us discover
    when two seemingly different graphical networks end up with the same network mapping.
    Maybe then we can declare a one-to-one isomorphism between the nodes and learn
    something profound about the nature of the graphs.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 图形可以拥有任意标签，但它们的拓扑可能是同构的。在数据分析的世界里，我们可以检查不同的图形网络，并识别出连接模式相同的节点群体。这帮助我们发现当两个看似不同的图形网络最终拥有相同的网络映射时。也许这时我们可以声明节点之间的一一同构关系，并从中学习一些关于图形本质的深刻知识。
- en: We will use the `isIsomorphic` function from `Data.Graph.Automorphism` to detect
    whether two graphs are identical in their connection.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`Data.Graph.Automorphism`中的`isIsomorphic`函数来检测两个图是否在其连接上相同。
- en: 'In this recipe, we will let the library calculate whether the two graphs in
    the following diagram are isomorphic in their connections:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将让库计算下图中两个图是否在其连接上是同构的：
- en: '![Determining whether any two graphs are isomorphic](img/6331OS_06_05.jpg)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![确定两个图是否同构](img/6331OS_06_05.jpg)'
- en: Getting started
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 入门
- en: 'Install the Automorphism library:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Automorphism库：
- en: '[PRE47]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: How to do it...
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Write the following code in a new file, which we will name `Main.hs`:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个新文件中编写以下代码，我们将其命名为`Main.hs`：
- en: 'Import the following packages:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入以下包：
- en: '[PRE48]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Construct a graph:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建一个图：
- en: '[PRE49]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Construct another graph:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建另一个图：
- en: '[PRE50]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Check whether the graphs have the same topology:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查图形是否具有相同的拓扑：
- en: '[PRE51]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
