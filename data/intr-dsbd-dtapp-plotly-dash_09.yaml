- en: '*Chapter 7*: Exploring Map Plots and Enriching Your Dashboards with Markdown'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第7章*：探索地图图表并通过Markdown丰富仪表板'
- en: 'In this chapter, we are going to explore how to handle maps, one of the most
    engaging types of charts. There are many ways of creating and handling maps, as
    well as many types of map plots. There are also many specialized geographic and
    scientific applications for maps. We will mainly be focusing on two of the most
    common types of map plots: **choropleth map plots** and **scatter map plots**.
    Choropleth maps are the type of maps we are most familiar with. These are the
    types of maps where geographical areas are colored to indicate a country, state,
    district, or any arbitrary polygon on a map, and express variations in quantity
    among them. Most of the knowledge we established in the previous chapter can easily
    be adapted to scatter map plots, as they are essentially the same, with a few
    differences. Similar to the *x* and *y* axes, we have longitude and latitude instead,
    and we also have different map projections. We will also learn about a new component,
    **Markdown**, from Dash Core Component.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探索如何处理地图，这是最具吸引力的图表类型之一。创建和处理地图的方式有很多种，并且有许多类型的地图图表。地图也有许多专门的地理和科学应用。我们将主要关注两种最常见的地图图表类型：**分级地图**和**散点图地图**。分级地图是我们最熟悉的地图类型。这些地图通过为地理区域上色来表示一个国家、州、区或任意多边形，并显示它们之间的数量变化。我们在上一章建立的大部分知识可以轻松地应用到散点图地图上，因为它们本质上是相同的，只是有一些差异。类似于*x*和*y*轴，我们使用的是经度和纬度，并且还有不同的地图投影。我们还将学习Dash
    Core Component中的新组件**Markdown**。
- en: Then, we will explore how to use **Mapbox**, which provides a rich interface
    with different layers, themes, and zoom levels. It also allows us to create choropleth
    and scatter map plots.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将探索如何使用**Mapbox**，它提供了丰富的接口，包含不同的图层、主题和缩放级别。它还允许我们创建分级地图和散点图地图。
- en: 'We will mainly cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将主要覆盖以下主题：
- en: Exploring choropleth maps
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索分级地图
- en: Utilizing animation frames to add a new layer to your plots
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用动画帧为图表添加新图层
- en: Using callback functions with maps
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用回调函数与地图配合
- en: Creating a `Markdown` component
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建`Markdown`组件
- en: Understanding map projections
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解地图投影
- en: Using scatter map plots
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用散点图地图
- en: Exploring Mapbox maps
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索Mapbox地图
- en: Exploring other map options and tools
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索其他地图选项和工具
- en: Incorporating an interactive map into our app
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将交互式地图集成到我们的应用中
- en: Technical requirements
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: We will use similar tools to the ones we used in the previous chapter. We will
    mainly be using Plotly Express for creating our charts. The packages to use are
    Plotly, Dash, Dash Core Components, Dash HTML Components, Dash Bootstrap Components,
    pandas, and JupyterLab.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用与上一章类似的工具。我们主要使用Plotly Express来创建图表。所使用的包包括Plotly、Dash、Dash Core Components、Dash
    HTML Components、Dash Bootstrap Components、pandas和JupyterLab。
- en: The code files of this chapter can be found on GitHub at [https://github.com/PacktPublishing/Interactive-Dashboards-and-Data-Apps-with-Plotly-and-Dash/tree/master/chapter_07](https://github.com/PacktPublishing/Interactive-Dashboards-and-Data-Apps-with-Plotly-and-Dash/tree/master/chapter_07).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码文件可以在GitHub上找到，地址是[https://github.com/PacktPublishing/Interactive-Dashboards-and-Data-Apps-with-Plotly-and-Dash/tree/master/chapter_07](https://github.com/PacktPublishing/Interactive-Dashboards-and-Data-Apps-with-Plotly-and-Dash/tree/master/chapter_07)。
- en: Check out the following video to see the Code in Action at [https://bit.ly/3sAY8z8](https://bit.ly/3sAY8z8).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频，了解代码在[https://bit.ly/3sAY8z8](https://bit.ly/3sAY8z8)中的实际操作。
- en: We'll start by exploring how easy it is to create choropleth maps for countries.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从探索如何轻松地为国家创建分级地图开始。
- en: Exploring choropleth maps
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索分级地图
- en: 'Choropleth maps are basically colored polygons representing a certain area
    on a map. Plotly ships with country maps included (as well as US states), and
    so it is very easy to plot maps if we have information about countries. We already
    have such information in our dataset. We have country names, as well as country
    codes, in every row. We also have the year, some metadata about the countries
    (region, income group, and so on), and all the indicator data. In other words,
    every data point is connected to a geographical location. So, let''s start by
    choosing a year and an indicator, and see how the values of our chosen indicator
    vary across countries:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Choropleth地图基本上是表示地图上某个区域的着色多边形。Plotly自带了国家地图（以及美国州地图），因此，如果我们有关于国家的信息，绘制地图非常容易。我们的数据集中已经包含了这类信息。每一行都包含了国家名称和国家代码。此外，我们还拥有年份、一些关于国家的元数据（地区、收入组等），以及所有指标数据。换句话说，每个数据点都与一个地理位置相关联。那么，让我们从选择一个年份和一个指标开始，看看我们选择的指标在各个国家之间的变化：
- en: 'Open the `poverty` file into a DataFrame and create the `year` and `indicator`
    variables:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`poverty`文件加载到数据框中，并创建`year`和`indicator`变量：
- en: '[PRE0]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Create a subset of `poverty` with values from the selected year and containing
    countries only:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含所选年份值并仅包含国家的`poverty`子集：
- en: '[PRE1]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Create a choropleth map using the `choropleth` function from Plotly Express,
    by choosing the column that identifies the countries and the column that will
    be used for the colors:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Plotly Express中的`choropleth`函数创建choropleth地图，选择标识国家的列和用于颜色的列：
- en: '[PRE2]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You can see the result of the preceding code in *Figure 7.1*:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在*图7.1*中看到前面代码的结果：
- en: '![Figure 7.1 – A choropleth map of countries](img/B16780_07_1.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图7.1 – 国家choropleth地图](img/B16780_07_1.jpg)'
- en: Figure 7.1 – A choropleth map of countries
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.1 – 国家choropleth地图
- en: 'The country codes we provided were already included in Plotly, and are in the
    three-letter ISO format. As with scatter plots, you can see that since we provided
    a numeric column for the color, a continuous color scale was chosen. Otherwise,
    we would have gotten a discrete color sequence. For example, setting `color=''Income
    Group''` would produce the chart in *Figure 7.2*:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们提供的国家代码已包含在Plotly中，并且采用三字母ISO格式。与散点图一样，你可以看到，由于我们为颜色提供了数值列，因此选择了连续的颜色刻度。否则，我们将得到离散的颜色序列。例如，设置`color='Income
    Group'`会产生*图7.2*中的图表：
- en: '![Figure 7.2 – A choropleth map of countries with a discrete color sequence](img/B16780_07_2.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图7.2 – 具有离散颜色序列的国家choropleth地图](img/B16780_07_2.jpg)'
- en: Figure 7.2 – A choropleth map of countries with a discrete color sequence
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.2 – 具有离散颜色序列的国家choropleth地图
- en: As you can see, and similar to what we saw in [*Chapter 6*](B16780_06_Final_NM_ePub.xhtml#_idTextAnchor090),
    *Exploring Variables with Scatter Plots and Filtering Subsets with Sliders*, the
    color system works in a similar way.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，类似于我们在[*第6章*](B16780_06_Final_NM_ePub.xhtml#_idTextAnchor090)中看到的，*通过散点图探索变量并使用滑块过滤子集*，颜色系统的工作方式是类似的。
- en: 'We can also use normal country names to plot them. To do that, we only need
    to set `locationmode=''country names''` and the rest works the same. Here is an
    example with country names:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以使用常规的国家名称来绘制图表。为此，我们只需要设置`locationmode='country names'`，其他的工作方式与之前相同。这里有一个使用国家名称的示例：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This creates the chart in *Figure 7.3*:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这会生成*图7.3*中的图表：
- en: '![Figure 7.3 – A choropleth map of countries using country names](img/B16780_07_3.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图7.3 – 使用国家名称的国家choropleth地图](img/B16780_07_3.jpg)'
- en: Figure 7.3 – A choropleth map of countries using country names
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.3 – 使用国家名称的国家choropleth地图
- en: 'The title of the color bar is `color` because it is not clear what it is, and
    it is not a name of a column in a DataFrame. We can rename it by setting `labels={''color'':
    <metric_name>}` to indicate what the metric is in our case. Let''s now see how
    we can make the chart interactive (without using a callback).'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '颜色条的标题是`color`，因为它的含义不明确，而且它不是数据框中某一列的名称。我们可以通过设置`labels={''color'': <metric_name>}`来重新命名它，以指示在我们案例中的度量是什么。现在让我们看看如何使图表具有交互性（不使用回调）。'
- en: Utilizing animation frames to add a new layer to your plots
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用动画帧为图表添加新图层
- en: In the last examples, we set the year as a variable and got a snapshot of the
    desired indicator for that year. Since the years represent sequential values,
    and can also be used as a grouping variable, we can use the years in the `animation_frame`
    parameter and make the chart interactive. This would introduce a new handle underneath
    the chart, where users can either drag to the desired year or press the play button
    to watch how the respective indicator progresses throughout the years. It would
    be a sequence of frames, like watching a video. What this does is that for a selected
    year, we will get a subset of the DataFrame where the rows in the `year` column
    are equal to the selected year. The chart automatically updates with colors corresponding
    to the values of the year that was chosen.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个示例中，我们将年份设置为一个变量，并获取了该年份所需指标的快照。由于年份代表的是连续的值，并且可以作为分组变量使用，我们可以将年份用于 `animation_frame`
    参数，使图表具有交互性。这将在图表下方引入一个新的控制柄，用户可以拖动它到所需年份，或者按下播放按钮，观看相应指标在各年份中的变化。这将是一个帧序列，就像观看视频一样。这样做的效果是，对于选定的年份，我们将从数据框中获取一个子集，其中
    `year` 列中的行等于所选年份。图表会自动更新，颜色会对应于所选年份的值。
- en: 'Here is the updated code to produce an animated chart (by year):'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这是更新后的代码，用于生成按年份动画的图表：
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We can now see the updated chart in *Figure 7.4*:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以看到更新后的图表，见 *图 7.4*：
- en: '![Figure 7.4 – A choropleth map of countries with an animation frame](img/B16780_07_4.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.4 – 含动画帧的国家区域图](img/B16780_07_4.jpg)'
- en: Figure 7.4 – A choropleth map of countries with an animation frame
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.4 – 含动画帧的国家区域图
- en: As you can see, all we had to do is select a column name to use for `animation_frame`,
    and everything is handled for us. We used a DataFrame where we only have countries,
    which includes all years. The further sub-setting is done automatically by the
    argument given to `animation_frame`. We can drag the handle to a specific year
    or press the play button and watch how it changes over time. Note that we also
    changed the color scale to experiment with a different one. Both color scales
    used so far should also be readable on a grayscale version of the map.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们所需做的就是选择一个列名用作 `animation_frame`，其他一切都由系统自动处理。我们使用了一个仅包含国家的数据框，其中包括所有年份。进一步的子集操作是通过传递给
    `animation_frame` 的参数自动完成的。我们可以拖动控制柄到特定年份，或者按下播放按钮，观看它如何随着时间变化。请注意，我们还更改了颜色比例，尝试使用不同的比例。迄今为止使用的两种颜色比例也应能在灰度版本的地图上读取。
- en: Now that we have a basic map in place, let's explore what options we have to
    control several aspects of the map. The `layout` attribute of map charts has a
    sub-attribute called `geo`, under which there are several useful geographic attributes
    that allow us to control many aspects of our maps. These attributes work the same
    way as other attributes.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经有了基本的地图，接下来让我们探索如何控制地图的多个方面。地图图表的 `layout` 属性有一个子属性叫做 `geo`，在其中有几个有用的地理属性，允许我们控制地图的许多方面。这些属性的工作方式与其他属性相同。
- en: 'We basically set them by running `fig.layout.geo.<attribute> = value` to set
    the desired value. Let''s explore some of these attributes and their effects on
    the previous chart:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们基本上通过运行 `fig.layout.geo.<attribute> = value` 来设置所需的值。让我们来探索一些这些属性及其对之前图表的影响：
- en: 'Remove the rectangular frame around the map:'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除地图周围的矩形框架：
- en: '[PRE5]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Show the country borders, even if/when we don''t have data for some countries:'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示国家边界，即使我们没有某些国家的数据：
- en: '[PRE6]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Use a different projection of the Earth. Select the `natural earth` projection
    type (more on this later):'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用不同的地球投影。选择 `natural earth` 投影类型（稍后会详细讲解）：
- en: '[PRE7]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Limit the vertical range of the chart to focus more on countries, by setting
    the minimum and maximum latitude values that the map should show:'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过设置地图应显示的最小和最大纬度值来限制图表的垂直范围，从而更专注于各个国家：
- en: '[PRE8]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Limit the horizontal range of the chart using the same technique:'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用相同的技术限制图表的水平范围：
- en: '[PRE9]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Change the color of the land to `''white''` to make it clear which countries
    have missing data:'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将陆地的颜色改为 `'white'`，以清晰地标识出哪些国家缺少数据：
- en: '[PRE10]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Set the background color of the map (the color of the oceans), as well as the
    "paper" background color of the figure as a whole. Use the same color that we
    are using for the app to have a consistent theme:'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置地图的背景颜色（即海洋的颜色），以及整幅图表的“纸张”背景颜色。使用我们为应用程序设置的相同颜色，以确保主题的一致性：
- en: '[PRE11]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Set the colors of the country borders as well as the coastlines to `''gray''`:'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置国家边界和海岸线的颜色为 `'gray'`：
- en: '[PRE12]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Since the title of the color bar is taking up a lot of horizontal space, replace
    spaces with the `<br>` character, to split it to multiple lines:'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于颜色条的标题占用了很多水平空间，因此用`<br>`字符替换空格，将标题分成多行：
- en: '[PRE13]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'As a result, we get the updated chart in *Figure 7.5*:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 结果，我们得到了更新后的图表，见*图7.5*：
- en: '![Figure 7.5 – A choropleth map of countries with custom geo options](img/B16780_07_5.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![图7.5 – 具有自定义地理选项的国家分级图](img/B16780_07_5.jpg)'
- en: Figure 7.5 – A choropleth map of countries with custom geo options
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.5 – 具有自定义地理选项的国家分级图
- en: With a few commands, we have transformed how our chart looks. We restricted
    the ranges to focus mainly on countries and land, as much as possible. We also
    set consistent background colors and displayed country borders. There are several
    other options that can easily be explored under the `fig.layout.geo` attribute.
    We are now ready to make the indicator selection dynamic; let's see how.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 通过几条命令，我们改变了图表的外观。我们将范围限制为主要集中在国家和陆地上，尽可能减少其他元素。我们还设置了统一的背景颜色，并显示了国家边界。还有一些其他选项可以轻松在`fig.layout.geo`属性下进行探索。现在我们准备好使指标选择动态化了；让我们看看如何实现。
- en: Using callback functions with maps
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用回调函数与地图配合
- en: What we have done so far was done with one indicator, and we used this indicator
    to select the desired column from the dataset. We can easily create a dropdown
    to allow users to choose any of the available indicators and let them explore
    the whole dataset. The `year` variable is already interactive and part of the
    chart, as used by the `animation_frame` parameter. So, this can become the first
    exploratory interactive chart that users start with on our app, to help them get
    an overview of the available metrics and how they are changing in time.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们所做的一切都是基于一个指标，使用该指标从数据集中选择所需的列。我们可以轻松创建一个下拉框，允许用户选择任何可用的指标，并让他们探索整个数据集。`year`变量已经是交互式的，并且是图表的一部分，通过`animation_frame`参数使用。因此，这可以成为用户在我们的应用程序中开始的第一个交互式探索图表，帮助他们了解可用的指标及其随时间变化的趋势。
- en: Setting this up is straightforward, as we did several times. We will implement
    it, and after that, we will see how to use the `Markdown` component to add context
    around/about the map chart and the chosen indicator.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 设置这个过程非常简单，就像我们之前做过的那样。我们将实现它，之后我们将看到如何使用`Markdown`组件来为地图图表和所选指标添加上下文。
- en: 'Let''s do the necessary steps to implement this functionality independently
    in JupyterLab:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在JupyterLab中独立实现此功能的必要步骤：
- en: 'Create a `Dropdown` component, where the available options are the column names
    of `poverty`, using the columns between the third and 54th columns:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`Dropdown`组件，其中可选项是`poverty`的列名，使用第3列到第54列之间的列：
- en: '[PRE14]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Create an empty `Graph` component, right under the dropdown we just created:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们刚刚创建的下拉框下，创建一个空的`Graph`组件：
- en: '[PRE15]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The indicator names vary in length, and some of them are so long that they
    take up almost half the screen size. We can handle this in a similar way to what
    we did previously, by creating a simple function. The function takes a string,
    splits it into words, groups every three words together, and then joins them with
    the `<br>` character:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 指标名称的长度各异，有些指标长度很长，几乎占据了整个屏幕的一半。我们可以通过类似之前的方法来处理，创建一个简单的函数。该函数接受一个字符串，将其拆分为单词，每三个单词分为一组，然后用`<br>`字符连接它们：
- en: '[PRE16]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Create a callback that links the dropdown with the map chart:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个回调函数，将下拉框与地图图表连接起来：
- en: '[PRE17]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Define the function that takes the selected indicator and returns the desired
    map chart. Note that we set the title of the figure by using the indicator as
    its value. We also used the `Country Name` column to set the hover name, which
    is the title of the box that appears when users hover over a certain country.
    The height was also set to `650` pixels. The remaining geo properties were omitted
    here to avoid repetition, but they are the same as we set them previously. We
    also modify the color bar title, using the `multiline_indicator` function we just
    created:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个函数，接受所选指标并返回所需的地图图表。请注意，我们通过使用指标作为标题值来设置图形的标题。我们还使用了`Country Name`列来设置悬停名称，这是当用户悬停在某个国家时出现的框的标题。高度也被设置为`650`像素。其余的地理属性在此省略，以避免重复，但它们与我们之前设置的相同。我们还使用刚才创建的`multiline_indicator`函数来修改颜色条的标题：
- en: '[PRE18]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Running the app in JupyterLab, you can explore the different metrics. *Figure
    7.6* shows a few examples of charts produced by selecting different indicators
    and years:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在JupyterLab中运行该应用程序，你可以探索不同的指标。*图7.6*展示了通过选择不同的指标和年份生成的图表的几个示例：
- en: '![Figure 7.6 – Examples of map charts produced interactively](img/B16780_07_6.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.6 – 交互式生成的地图图表示例](img/B16780_07_6.jpg)'
- en: Figure 7.6 – Examples of map charts produced interactively
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.6 – 交互式生成的地图图表示例
- en: Once given the option, users can search the dropdown for various keywords and
    select what they find interesting. It is still not very clear what exactly many
    of these indicators refer to and what their limitations might be. This is a good
    opportunity for us to display those details to users, to make it clear what they
    are looking at. As mentioned previously, the limitations in measurement are crucial
    to highlight, so users are aware of them. Let's see how we can add formatted text
    using the `Markdown` component.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦提供选项，用户可以在下拉菜单中搜索各种关键词并选择他们感兴趣的内容。然而，许多指标的具体含义和它们的限制仍然不太清晰。现在是我们向用户展示这些细节的好机会，以便让他们明确看到自己正在查看的内容。如前所述，度量中的限制至关重要，必须加以强调，以确保用户意识到它们。让我们来看一下如何使用`Markdown`组件添加格式化文本。
- en: Creating a Markdown component
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个 Markdown 组件
- en: 'Markdown is a way to produce HTML in a manner that is easy to write and also
    easy to read. The output would be displayed as any HTML document would, but the
    process of writing it and reading it is much easier. Compare the following two
    snippets, which result in the same HTML output:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Markdown 是一种以易于编写和易于阅读的方式生成 HTML 的方法。输出将像任何 HTML 文档一样显示，但编写和阅读过程要容易得多。比较以下两个代码片段，它们生成相同的
    HTML 输出：
- en: 'Using pure HTML, we would write the following:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 使用纯 HTML，我们将编写如下代码：
- en: '[PRE19]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The same code can be written with Markdown as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 相同的代码可以用 Markdown 编写如下：
- en: '[PRE20]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: I think it's clear that Markdown is much easier to write, as well as to read,
    especially when you have nested items such as the `<ul>` unordered list we have
    here.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为很明显，Markdown 更容易编写，也更容易阅读，特别是当你有嵌套项（例如我们这里的`<ul>`无序列表）时。
- en: 'The `Markdown` component works the same way. The preceding code simply has
    to be passed to the `children` argument, which would render it as the HTML shown
    previously. Let''s create a minimal app in JupyterLab to see how the `Markdown`
    component works:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`Markdown`组件的工作方式相同。上面的代码只需传递给`children`参数，它将呈现为之前展示的 HTML。让我们在 JupyterLab
    中创建一个最小的应用程序，看看`Markdown`组件是如何工作的：'
- en: 'Make the necessary imports and instantiate an app:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进行必要的导入并实例化应用程序：
- en: '[PRE21]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Create the layout attribute of the app:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建应用程序的布局属性：
- en: '[PRE22]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Pass the `Markdown` component with the preceding text to the `div` just created.
    Note that it is easier to use triple quotes especially when using multiline text:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将带有前述文本的`Markdown`组件传递给刚刚创建的`div`。请注意，尤其在处理多行文本时，使用三引号更为方便：
- en: '[PRE23]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Run the app:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行该应用程序：
- en: '[PRE24]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The preceding code creates a mini-app with its output shown in *Figure 7.7*:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码创建了一个迷你应用程序，输出如*图 7.7*所示：
- en: '![Figure 7.7 – A sample output of the Markdown component](img/B16780_07_7.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.7 – Markdown 组件的示例输出](img/B16780_07_7.jpg)'
- en: Figure 7.7 – A sample output of the Markdown component
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.7 – Markdown 组件的示例输出
- en: Markdown has several other ways of displaying text, such as numbered lists,
    tables, links, bold and italic text, and more. We will be covering some of these
    features, but they are easy to pick up in case you are not familiar with them.
    Keep in mind that there are various "flavors" of Markdown used by different platforms.
    You might come across slightly different markup/syntax rules but in general, there
    is a lot of overlap.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: Markdown 有多种显示文本的方式，如编号列表、表格、链接、粗体和斜体文本等。我们将介绍其中的一些功能，但即使你不熟悉它们，也很容易掌握。请记住，不同平台使用的
    Markdown 有各种“变种”。你可能会遇到稍有不同的标记/语法规则，但一般来说，它们有很多重叠之处。
- en: 'We will now add some information to the map that the user generates after selecting
    the metric of their choice. Basically, we will add the important information right
    underneath the map and slider. *Figure 7.8* shows how this will look, in order
    to give you an idea of what we are working toward:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将在用户选择了他们想要的指标后，向地图中添加一些信息。基本上，我们会将重要信息添加到地图和滑块下方。*图 7.8*展示了这将如何显示，以便给你一个我们正在努力实现的目标的概念：
- en: '![Figure 7.8 – A sample of the Markdown component](img/B16780_07_8.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.8 – Markdown 组件的示例](img/B16780_07_8.jpg)'
- en: Figure 7.8 – A sample of the Markdown component
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.8 – Markdown 组件的示例
- en: All the text and formatting you see in the figure are produced by the `Markdown`
    component.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 你在图中看到的所有文本和格式都是由`Markdown`组件生成的。
- en: In order to create a special area for it on the app, we simply add a `Markdown`
    component under the map, giving it a unique ID.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在应用中为其创建一个特殊区域，我们只需在地图下方添加一个 `Markdown` 组件，并为其指定一个唯一的 ID。
- en: 'Producing this component will happen in the same callback we created to generate
    the map. The callback should now take two `Output` elements instead of one, and
    when returning, it should return two elements as well (the figure, as well as
    the Markdown generated). To get the required content for this component, we need
    to open the file that contains all the details about the indicators. This has
    been done previously, but as a reminder, we can get it by running `series = pd.read_csv(''data/PovStatsSeries.csv'')`.
    Let''s now implement these steps:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 生成这个组件的过程将发生在我们为生成地图所创建的相同回调函数中。该回调函数现在应该接收两个 `Output` 元素而非一个，并且返回时应该返回两个元素（图形和生成的
    Markdown）。为了获取该组件所需的内容，我们需要打开包含所有指标详细信息的文件。这之前已经做过，但作为提醒，我们可以通过运行 `series = pd.read_csv('data/PovStatsSeries.csv')`
    来获得。现在让我们实现这些步骤：
- en: 'Right under the `Graph` component, add the new `Markdown` component (note that
    we also set its background color to be consistent with the map, as well as the
    whole app). The `_md` suffix is for `Markdown`:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Graph` 组件正下方，添加新的 `Markdown` 组件（注意，我们还将其背景颜色设置为与地图一致，以保持整个应用的一致性）。`_md` 后缀表示
    `Markdown`：
- en: '[PRE25]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Update the callback function by including the new component:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新回调函数，加入新组件：
- en: '[PRE26]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'After finishing the definition of the `fig` variable in the callback function,
    we now run the necessary steps for creating the `Markdown` output. Create the
    appropriate subset of `series`, by getting the row where the `Indicator Name`
    column is equal to the selected indicator:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在回调函数中完成 `fig` 变量的定义后，我们现在执行创建 `Markdown` 输出所需的步骤。通过获取 `Indicator Name` 列等于所选指标的行，创建
    `series` 的适当子集：
- en: '[PRE27]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Extract the value of the `Limitations and exceptions` columns from `series_df`.
    Note that since some values are missing and since missing values are not strings,
    we fill them with the string `N/A`, and we also replace any instances of two newline
    characters, `\n\n`, with a single space, if any. We then extract the first element
    under its `values` attribute:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `series_df` 中提取 `Limitations and exceptions` 列的值。请注意，由于一些值缺失，并且缺失的值不是字符串，我们用字符串
    `N/A` 填充它们，并且如果存在，替换任何两个换行符 `\n\n` 为单个空格。然后，我们提取其 `values` 属性下的第一个元素：
- en: '[PRE28]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Now that we have defined two variables, `series_df` and `limitations`, we will
    use Python''s f-string formatting to insert variables where they belong using
    curly braces: f''`{<variable_name>}''`. We first insert the indicator name using
    an `<h2>` element. Headings in Markdown correspond to their HTML equivalents,
    where the number of hash signs corresponds to the heading level. Here we use two
    signs for `<h2>`:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经定义了两个变量，`series_df`和`limitations`，我们将使用 Python 的 f-string 格式化方法，通过花括号将变量插入到适当的位置：f'`{<variable_name>}'`。我们首先使用
    `<h2>` 元素插入指标名称。在 Markdown 中，标题对应其 HTML 等效元素，其中哈希符号的数量对应标题级别。在这里，我们使用两个符号来表示 `<h2>`：
- en: '[PRE29]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now we add the long description in regular text, without any hash signs before
    it:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们以常规文本添加详细描述，前面不加任何哈希符号：
- en: '[PRE30]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Next, we add the bullet points for `Unit of measure`, `Periodicity`, and `Source`.
    Bullet points can be created by adding a star at the beginning of the line for
    each bullet point. This is a simple process of getting the right element from
    the right column. Note that we fill missing values for `Unit of measure` by using
    the word `count`, which will replace the missing values where the indicator is
    a simple count and not a percentage. Population is one such example. In the case
    of `Periodicity`, we simply replace it with `N/A` wherever the respective value
    is missing. The stars before and after any text make it bold, similar to running
    `<b>text</b>`:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们为 `Unit of measure`、`Periodicity` 和 `Source` 添加项目符号。可以通过在每行前添加星号来创建项目符号。这是一个简单的过程，获取来自正确列的正确元素。请注意，对于
    `Unit of measure` 的缺失值，我们使用单词 `count` 来填充，这将替换掉那些指标是简单计数而非百分比的缺失值。例如，人口就是一个这样的例子。对于
    `Periodicity`，我们只需在缺失的值处替换为 `N/A`。在任何文本前后加上的星号会使其加粗，类似于运行 `<b>text</b>`：
- en: '[PRE31]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Add the `Limitations and exceptions` subtitle in `<h3>`:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `<h3>` 中添加 `Limitations and exceptions` 子标题：
- en: '[PRE32]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Next, we add the already created `limitations` variable in regular text:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们在常规文本中添加已经创建的 `limitations` 变量：
- en: '[PRE33]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Putting the preceding code together, here is the full code that creates our
    `Markdown` component, with its relative position in the callback function. Note
    that in some cases, there are a few indicators that don''t have details in the
    `series` DataFrame. In this case, we set the `Markdown` variable to a string,
    indicating the lack of such details. This condition can be seen in the following
    code as well, in the check to `series_df.empty`; otherwise, everything runs as
    previously:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 将前面的代码整合在一起，这是创建`Markdown`组件的完整代码，并展示了它在回调函数中的相对位置。请注意，在某些情况下，`series`数据框中没有某些指标的详细信息。在这种情况下，我们将`Markdown`变量设置为一个字符串，表示缺少此类详细信息。此条件也可以在以下代码中看到，在检查`series_df.empty`时；否则，其他部分将像之前一样运行。
- en: '[PRE34]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: We finally return a tuple of `fig, markdown` instead of only `fig` as we did
    in the previous version. Adding this code to the app would add the respective
    Markdown to the map and give it much better context, as well as pointing out the
    limitations that our users need to keep in mind.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最终返回一个元组`fig, markdown`，而不仅仅是之前版本中的`fig`。将这段代码添加到应用中会将相应的Markdown添加到地图，并为其提供更好的上下文，同时指出用户需要记住的限制。
- en: We will now turn to see the different projections that maps can be displayed
    in, and how we can change them.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们将讨论地图可以展示的不同投影，以及如何进行更改。
- en: Understanding map projections
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解地图投影
- en: We used an example of one projection type in our map, and now we'll explore
    this topic in more detail. When we try to draw the Earth (or part of it) on a
    flat rectangle, the shape is inevitably distorted somehow. So, there are different
    ways, or projections, available that can be used. No projection is perfect, and
    there are trade-offs between accuracy in shape, area, relative position, and so
    on. The details of which projection is more appropriate depends on the application
    and is beyond the scope of this book. We will, however, explore how to change
    the projection being used and see how to get the available projections.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在地图中使用了某种投影类型的示例，现在我们将更详细地探讨这个话题。当我们试图将地球（或其部分）绘制在一个平面矩形上时，形状不可避免地会发生某种程度的扭曲。因此，有不同的方式或投影可以使用。没有任何投影是完美的，它们在形状、面积、相对位置等方面存在权衡。哪个投影更合适的细节取决于应用场景，并超出了本书的讨论范围。不过，我们将探讨如何更改使用的投影，并查看如何获取可用的投影。
- en: With Plotly Express, we have a `projection` parameter in the map functions,
    which takes a string and can be used to set the desired projection type. Alternatively,
    we can also set it by assigning a value to `fig.layout.geo.projection.type` as
    we did previously.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Plotly Express，我们在地图函数中有一个`projection`参数，该参数接受一个字符串，可以用来设置所需的投影类型。或者，我们也可以像之前那样，通过将值赋给`fig.layout.geo.projection.type`来设置。
- en: '*Figure 7.9* shows a few of the available options together with their respective
    names in the titles:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '*图7.9*展示了几种可用的投影选项及其相应的名称。'
- en: '![Figure 7.9 – A sample of the available map projections](img/B16780_07_9.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![图7.9 – 可用地图投影的示例](img/B16780_07_9.jpg)'
- en: Figure 7.9 – A sample of the available map projections
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.9 – 可用地图投影的示例
- en: As you can see, there are different ways of displaying the Earth. While **orthographic**
    might seem more realistic in its shape, its problem is that we can only see part
    of the Earth, so we lose perspective. The **azimuthal equal area** projection
    is actually quite realistic when you use it interactively and zoom into certain
    areas. Feel free to experiment with different projections and select what works
    for you.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，有不同的方式来展示地球。虽然**正投影**可能在形状上看起来更逼真，但它的问题是我们只能看到地球的一部分，因此失去了透视感。而**方位等面积**投影实际上在交互使用并缩放到某些区域时相当逼真。可以随意尝试不同的投影方式，并选择最适合你的。
- en: 'We have experimented with polygon or choropleth maps so far, and now we will
    be exploring another type of map, with which we are already generally familiar:
    the scatter map.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经实验过多边形或区域地图，现在我们将探索另一种我们通常比较熟悉的地图类型：散点图地图。
- en: Using scatter map plots
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用散点地图图
- en: 'The main difference between the *x* and *y* axes and longitude and latitude
    is due to the shape of the Earth. As we approach the equator, the vertical meridians
    are as far away from each other as possible, and as we approach the North and
    South poles, they are as close as possible to each other. *Figure 7.10* shows
    this:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '*x*轴和*y*轴与经纬度之间的主要区别在于地球的形状。当我们接近赤道时，垂直经线之间的距离尽可能远，而当我们接近南北极时，它们之间的距离则尽可能近。*图7.10*展示了这一点：'
- en: '![Figure 7.10 – A map of the Earth, showing longitude and latitude lines](img/B16780_07_10.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.10 – 地球地图，显示经纬度线](img/B16780_07_10.jpg)'
- en: Figure 7.10 – A map of the Earth, showing longitude and latitude lines
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.10 – 地球地图，显示经纬度线
- en: In other words, as we approach the equator, we have a more rectangular shape,
    because a unit of longitude is close to a unit of latitude. Close to the poles,
    the proportions are completely different, and the rectangles start to approximate
    triangles. This is in contrast to a rectangular plane, where a vertical unit of
    distance corresponds to the same horizontal unit of distance, regardless of where
    you are on the plane. This assumes a linear scale on both axes, of course. An
    exception to this is the logarithmic axis, which we covered in [*Chapter 6*](B16780_06_Final_NM_ePub.xhtml#_idTextAnchor090),
    *Exploring Variables with Scatter Plots and Filtering Subsets with Sliders*. Map
    projections handle this for us, and we don't have to worry about this issue. So,
    we can simply think of them as we think about the *x* and *y* axes and select
    the projection that we want.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，当我们接近赤道时，地图的形状更加接近矩形，因为一单位经度与一单位纬度几乎相等。接近极地时，比例完全不同，矩形开始接近三角形。这与矩形平面不同，在矩形平面上，垂直方向的单位距离对应于水平方向的相同单位距离，无论你处于平面上的哪个位置。当然，这假设了两个轴上的比例是线性的。例外的是对数坐标轴，关于这一点我们已经在[*第
    6 章*](B16780_06_Final_NM_ePub.xhtml#_idTextAnchor090)，*使用散点图探索变量和通过滑块过滤子集*中进行了讨论。地图投影会帮我们处理这个问题，所以我们不需要担心这个问题。因此，我们可以像思考
    *x* 和 *y* 轴一样思考地图投影，并选择我们需要的投影。
- en: Let's see how we can make a scatter map plot with Plotly Express using the `scatter_geo`
    function.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用 `scatter_geo` 函数通过 Plotly Express 绘制散点图。
- en: 'We start with a very simple example:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从一个非常简单的例子开始：
- en: '[PRE35]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'First, we created `df`, where the year is equal to 2010, and we filtered out
    non-countries. Then, just like we did with choropleth maps, we selected the column
    to use for the `locations` parameter. This generates the simple chart in *Figure
    7.11*:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们创建了 `df`，其中年份为 2010，并过滤掉非国家数据。然后，就像我们在使用 choropleth 地图时所做的那样，我们选择了用于 `locations`
    参数的列。这生成了*图 7.11*中的简单图表：
- en: '![Figure 7.11 – A scatter map using the scatter_geo function](img/B16780_07_11.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.11 – 使用 `scatter_geo` 函数的散点图](img/B16780_07_11.jpg)'
- en: Figure 7.11 – A scatter map using the scatter_geo function
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.11 – 使用 `scatter_geo` 函数的散点图
- en: You can see how easy it is to do so. There is not much information in this chart,
    other than markers on countries, showing the **Country Code** value.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到做这件事是多么简单。除了标记国家并显示**国家代码**值外，这张图表没有太多信息。
- en: 'The country names are supported by default by Plotly. Another interesting application
    might be to use the `lat` and `lon` parameters to plot arbitrary locations on
    the map, as you can see in the following code and *Figure 7.12*:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 国家名称默认由 Plotly 提供支持。另一个有趣的应用可能是使用 `lat` 和 `lon` 参数在地图上绘制任意位置，正如你在下面的代码和*图 7.12*中所看到的那样：
- en: '[PRE36]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'This results in the following output:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '![Figure 7.12 – A scatter map using latitude and longitude data](img/B16780_07_12.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.12 – 使用经纬度数据的散点图](img/B16780_07_12.jpg)'
- en: Figure 7.12 – A scatter map using latitude and longitude data
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.12 – 使用经纬度数据的散点图
- en: You can easily apply the concepts we covered in [*Chapter 6*](B16780_06_Final_NM_ePub.xhtml#_idTextAnchor090),
    *Explore Exploring Variables with Scatter Plots and Filtering Subsets with Sliders*,
    to modify the size and map colors, set the opacity, and so on.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以轻松地应用我们在[*第 6 章*](B16780_06_Final_NM_ePub.xhtml#_idTextAnchor090)，*使用散点图探索变量和通过滑块过滤子集*中讨论的概念，来修改大小和地图颜色，设置不透明度等等。
- en: We will now explore these options by introducing another richer way of producing
    maps, using Mapbox.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将通过引入另一种更丰富的地图制作方式——使用 Mapbox，来探索这些选项。
- en: Exploring Mapbox maps
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索 Mapbox 地图
- en: Mapbox is an open source library for maps. It is backed by a company with the
    same name that also provides additional services, layers, and themes to produce
    rich mapping applications. The options we will be using here can be used immediately
    with Plotly, but there are some other styles and services that require you to
    register for an account and use a token every time you generate a map.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: Mapbox 是一个开源地图库，由同名公司支持，该公司还提供额外的服务、图层和主题，用于生成丰富的地图应用程序。我们在这里将使用的选项可以立即与 Plotly
    一起使用，但还有一些其他样式和服务需要你注册账户并在每次生成地图时使用令牌。
- en: 'An example should make it easy to start with, as we are already very familiar
    with scatter plots:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 一个例子应该能帮助我们快速入手，因为我们已经非常熟悉散点图：
- en: '[PRE37]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The preceding code should be straightforward. The `lon` and `lat` parameters
    are the equivalents of the `x` and `y` parameters for scatter plots. The `size`
    and `color_discrete_sequence` parameters have already been covered. An interesting
    new parameter is the `zoom` parameter, which we set to `2` here. This can take
    an integer value from `0` (the whole world) to `22` (building-level zoom), inclusive.
    We can also see how easy it is to set the center of a map, which we did using
    the first point''s coordinates (5, 10). Finally, the `mapbox_style` parameter
    provides a set of interesting options to display maps in different styles. The
    `stamen-watercolor` style gives it an artistic look and can be seen in *Figure
    7.13*:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码应该很简单。`lon` 和 `lat` 参数相当于散点图中的 `x` 和 `y` 参数。`size` 和 `color_discrete_sequence`
    参数已经讲解过。一个有趣的新参数是 `zoom` 参数，我们在这里将其设置为 `2`。这个参数可以取从 `0`（整个世界）到 `22`（建筑物级别缩放）之间的整数值，包括
    `0` 和 `22`。我们还可以看到，设置地图中心是多么简单，我们是使用第一个点的坐标（5, 10）来设置的。最后，`mapbox_style` 参数提供了一些有趣的选项，可以用来以不同样式显示地图。`stamen-watercolor`
    样式给它一种艺术感，如*图 7.13*所示：
- en: '![Figure 7.13 – A scatter map using Mapbox and a custom style](img/B16780_07_13.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.13 – 使用 Mapbox 和自定义样式的散点图](img/B16780_07_13.jpg)'
- en: Figure 7.13 – A scatter map using Mapbox and a custom style
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.13 – 使用 Mapbox 和自定义样式的散点图
- en: Hovering over the **i** on the map displays the sources of the tiles and data.
    As you can see, there are so many layers and work condensed into this simple function.
    Let's now use the same approach to plot some data from our dataset.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 将鼠标悬停在地图上的**i**上，会显示瓷砖和数据的来源。正如你所看到的，很多层和工作都凝聚在这个简单的函数中。现在，让我们使用相同的方法绘制一些来自数据集的数据。
- en: Because `scatter_mapbox` mainly works with latitude and longitude data, and
    our dataset does not include any such data about the countries, we will obtain
    the data, merge it, and then plot the markers where they belong.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 `scatter_mapbox` 主要处理纬度和经度数据，而我们的数据集没有关于国家的这种数据，所以我们将获取这些数据，进行合并，然后将标记放置到对应的位置。
- en: 'There are many sources for such data, and a quick online search will lead to
    some good sources. We can use the pandas `read_html` function for that. It takes
    a URL, downloads all the `<table>` elements at that URL, and returns a list of
    DataFrame objects. We simply have to take the one that we want. In this case,
    it is the first one. The following code achieves this, and creates the `lat_long`
    variable, which is a DataFrame:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多来源提供这种数据，快速的在线搜索可以找到一些好的来源。我们可以使用 pandas 的 `read_html` 函数来获取数据。它接受一个 URL，下载该
    URL 上的所有 `<table>` 元素，并返回一个 DataFrame 对象的列表。我们只需要选择我们想要的那个。在这个例子中，它是第一个。以下代码实现了这一点，并创建了
    `lat_long` 变量，这是一个 DataFrame：
- en: '[PRE38]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: If you remember our discussion in [*Chapter 4*](B16780_04_Final_NM_ePub.xhtml#_idTextAnchor060),
    *Data Manipulation and Preparation - Paving the Way to Plotly Express*, where
    we went through several data manipulation operations, we will utilize the `merge`
    function from `pandas` to merge `lat_long` into `poverty` using a left merge operation.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还记得我们在 [*第 4 章*](B16780_04_Final_NM_ePub.xhtml#_idTextAnchor060)中讨论的内容，*数据操作与准备
    - 为 Plotly Express 铺路*，我们讲解了几种数据操作，我们将使用 `pandas` 的 `merge` 函数，通过左连接操作将 `lat_long`
    合并到 `poverty` 中。
- en: 'We first take a look at the structure of the `lat_long` DataFrame by simply
    printing it in JupyterLab, and you can see the top and bottom five rows in *Figure
    7.14*:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先通过在 JupyterLab 中打印 `lat_long` 数据框来查看其结构，你可以在*图 7.14*中看到顶部和底部的五行数据：
- en: '![Figure 7.14 – The lat_long DataFrame containing latitude and longitude data
    for countries](img/B16780_07_14.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.14 – 包含国家纬度和经度数据的 lat_long 数据框](img/B16780_07_14.jpg)'
- en: Figure 7.14 – The lat_long DataFrame containing latitude and longitude data
    for countries
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.14 – 包含国家纬度和经度数据的 lat_long 数据框
- en: 'The `poverty` DataFrame also has a column called `2-alpha code`, which contains
    country codes using the same two-letter standard, so we merge using those columns
    as follows:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '`poverty` 数据框中还有一个名为 `2-alpha code` 的列，包含使用相同的两字母标准的国家代码，所以我们将使用这些列进行合并，如下所示：'
- en: '[PRE39]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'This will add the columns of `lat_long` to `poverty`, aligning the rows where
    they belong, as well as duplicating them where necessary. Remember, we are merging
    using the `left` method, which means the `left` argument is the basis for the
    merge. You can see a random sample of rows together with the important columns
    after merging in *Figure 7.15* to make it clear:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把`lat_long`列添加到`poverty`中，按照它们所属的行对齐，并在必要时进行重复。请记住，我们使用`left`方法进行合并，这意味着`left`参数是合并的依据。你可以在*图
    7.15*中查看合并后的一些随机行和重要列，以便更清楚地理解：
- en: '![Figure 7.15 – A subset of the poverty DataFrame merged with lat_long](img/B16780_07_15.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.15 – 与lat_long合并的贫困DataFrame子集](img/B16780_07_15.jpg)'
- en: Figure 7.15 – A subset of the poverty DataFrame merged with lat_long
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.15 – 与lat_long合并的贫困DataFrame子集
- en: Note that in the case where we didn't have values for the longitude and latitude,
    we have **NaN**. In the cases where the same country name exists, for example,
    **Tajikistan**, the longitude and latitude values are simply duplicated, to keep
    the mapping of those values to their respective country, regardless of which rows
    we choose.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在没有经度和纬度值的情况下，我们会得到**NaN**。例如，在有相同国家名称的情况下（如**塔吉克斯坦**），经度和纬度值会简单地被复制，以保持这些值与各自国家的映射，无论我们选择哪一行。
- en: 'We are now ready to create a bubble chart (a scatter plot with the marker sizes
    reflecting a certain quantity). We just have to create a subset of `poverty` that
    contains only countries and removes any missing values for the required indicator,
    `Population, total`, in this case. This can be done with the following code:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在准备创建一个气泡图（散点图，其中标记的大小反映某个数量）。我们只需要创建一个包含国家并去除所需指标`Population, total`缺失值的`poverty`子集。可以使用以下代码完成：
- en: '[PRE40]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Creating a bubble chart requires you call to the `scatter_mapbox` function,
    but we will go through the given arguments one by one:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 创建气泡图需要调用`scatter_mapbox`函数，但我们将逐个讨论给定的参数：
- en: 'Call the function with the subset just created:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用刚刚创建的子集的函数：
- en: '[PRE41]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Select the columns that will be used for the longitude and latitude values:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择用于经度和纬度值的列：
- en: '[PRE42]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Set the desired zoom level, to show the whole Earth:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置所需的缩放级别，以显示整个地球：
- en: '[PRE43]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Map the value of the indicator to the size of the markers and set a suitable
    maximum size:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将指标的值映射到标记的大小，并设置合适的最大值：
- en: '[PRE44]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Map the income group that the respective country belongs to, to the color of
    the marker (discrete variables in this case):'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将每个国家所属的收入组映射到标记的颜色上（在这种情况下是离散变量）：
- en: '[PRE45]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Choose the `year` column as the one used to animate the chart:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`year`列作为用于动画的列：
- en: '[PRE46]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Set a suitable opacity level, because we will definitely have overlapping markers:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置合适的不透明度，因为我们肯定会有重叠的标记：
- en: '[PRE47]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Set a suitable height for the figure as a whole, in pixels:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为整个图表设置适当的高度，以像素为单位：
- en: '[PRE48]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Add more information to the hover box, by including two more columns'' data
    to appear when users hover over markers:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向悬浮框添加更多信息，通过包括另外两列数据，使得用户将鼠标悬停在标记上时显示：
- en: '[PRE49]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Select a custom color sequence to differentiate the income groups that the
    countries belong to:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择自定义颜色序列，以区分各个国家所属的收入组：
- en: '[PRE50]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Set a custom style for the map:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为地图设置自定义样式：
- en: '[PRE51]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Set a title for the hover box, using the country name:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为悬浮框设置标题，使用国家名称：
- en: '[PRE52]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Set a title for the figure:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为图表设置标题：
- en: '[PRE53]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Running the preceding code produces the interactive chart in *Figure 7.16*:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 运行前面的代码会生成一个交互式图表，如*图 7.16*所示：
- en: '![Figure 7.16 – A scatter_mapbox bubble chart for population by country using
    years as animation frames](img/B16780_07_16.jpg)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.16 – 基于国家按年份动画显示人口的scatter_mapbox气泡图](img/B16780_07_16.jpg)'
- en: Figure 7.16 – A scatter_mapbox bubble chart for population by country using
    years as animation frames
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.16 – 基于国家按年份动画显示人口的scatter_mapbox气泡图
- en: 'Here is the full code that we just discussed to make it clear:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们刚才讨论的完整代码，以便更清晰地理解：
- en: '[PRE54]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: You can see how straightforward it is to set all the options, and how little
    code is involved. We only have to know the options and how they work.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到设置所有选项是多么简单，所涉及的代码是多么简洁。我们只需要了解选项及其工作原理。
- en: 'Because this is an interactive chart, and users can zoom in and out, it is
    easy to handle the overlaps that we have, simply by zooming in one level. *Figure
    7.17* shows the same chart after zooming (by the user):'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是一个交互式图表，用户可以进行缩放，因此通过简单地缩放一级，就能轻松处理我们所遇到的重叠问题。*图 7.17*展示了用户缩放后的同一图表：
- en: '![Figure 7.17 – A scatter_mapbox chart zoomed in for a better view](img/B16780_07_17.jpg)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.17 – 放大显示更清晰的散点图 Mapbox 图表](img/B16780_07_17.jpg)'
- en: Figure 7.17 – A scatter_mapbox chart zoomed in for a better view
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.17 – 放大显示更清晰的散点图 Mapbox 图表
- en: One advantage of bubble charts over choropleth charts is that they show how
    the value relates to the geographic area of the country (or any location) visualized.
    For example, *Figure 7.16* shows three interesting cases of Canada, Russia, and
    Australia, which seem to have a population that is relatively small compared to
    their area. In other words, their population density is low. This gives more perspective
    on this metric.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 泡泡图相比于地区图的一个优势是，它能够展示数值与国家（或任何地点）的地理区域之间的关系。例如，*图 7.16* 展示了加拿大、俄罗斯和澳大利亚三个有趣的案例，它们的人口相对于面积来说较少。换句话说，它们的人口密度较低。这为这个指标提供了更多的视角。
- en: As you can see, there are so many options and ways to display and interact with
    maps, and we have barely scratched the surface of what can be done. We will now
    take a look at a few other options that are available, in case you are interested
    in learning more.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，显示和与地图互动的方式有很多种，我们只是触及了可做的事情的表面。接下来，我们将看看一些其他可用的选项，万一你有兴趣进一步了解。
- en: Exploring other map options and tools
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索其他地图选项和工具
- en: The following are a few pointers on what you can explore further with mapping,
    without getting into too much detail.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些关于地图探索的提示，无需过多深入细节。
- en: You've probably thought about having custom polygons or areas to visualize as
    choropleth maps. What we have covered so far are standard countries only. Of course,
    you have the option of visualizing a custom area with arbitrary points.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经考虑过将自定义多边形或区域可视化为地区图。目前我们所讨论的仅是标准的国家。当然，你也可以选择可视化一个包含任意点的自定义区域。
- en: There is a standard GeoJSON format for representing such information. It mainly
    consists of points, lines, and polygons. Points are simply locations on the map,
    similar to what we used for scatter map plots. Lines are groups of connected points,
    in a certain sequence, where the first and last points are not the same. And as
    you can guess, a polygon is similar to a line, but with the condition that the
    first and last points are the same. Note that many countries consist of more than
    one polygon. Most Plotly map functions support GeoJSON, and you can use it for
    custom map plotting.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个标准的 GeoJSON 格式用于表示这些信息。它主要由点、线和多边形组成。点只是地图上的位置，类似于我们用于散点图的点。线是连接的一组点，按一定顺序排列，且第一个点和最后一个点不相同。正如你所猜测的，多边形类似于线，但条件是第一个点和最后一个点相同。请注意，许多国家由多个多边形组成。大多数
    Plotly 地图函数支持 GeoJSON，你可以用它来进行自定义地图绘制。
- en: This can be useful when you have custom data for custom locations and you need
    to obtain the relevant data.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 当你有自定义数据用于特定位置时，并且需要获取相关数据时，这非常有用。
- en: Another important and useful project to consider learning about is `geopandas`.
    As the name clearly suggests, it is a specialized library that works like `pandas`,
    and provides special data structures and techniques for geographic data, most
    notably `GeoDataFrame`. It is worth learning if you have more specialized mapping
    requirements, or if you frequently need to customize maps further.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要且有用的项目是 `geopandas`，值得考虑学习。顾名思义，它是一个像 `pandas` 一样工作的专用库，提供了用于地理数据的特殊数据结构和技术，最显著的是
    `GeoDataFrame`。如果你有更专业的地图需求，或者经常需要进一步自定义地图，它是值得学习的。
- en: Let's now add the functionality we created to the app.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来将我们创建的功能添加到应用中。
- en: Incorporating an interactive map into our app
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将互动地图集成到我们的应用中
- en: The map that we created, together with the `Dropdown` and `Markdown` components,
    can become the first exploratory tool in our app. We can remove the population
    bar chart now, and in its place, we can place the components we just created,
    for users to explore all the indicators, see them on the map, and scroll through
    the years, and for each indicator, get the full details, as well as seeing the
    limitations and potential issues. Once something catches the user's eye, they
    can then find another chart that gives more detail about the indicator they want
    if it exists.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建的地图，结合了 `Dropdown` 和 `Markdown` 组件，可以成为我们应用中的第一个探索工具。现在我们可以去掉人口条形图，代之以我们刚刚创建的组件，供用户探索所有指标，在地图上查看它们，滚动查看年份，并且对于每个指标，获取完整的详细信息，同时看到局限性和潜在问题。一旦某个内容引起用户注意，他们可以找到其他图表，获取更多关于他们感兴趣的指标的细节（如果有的话）。
- en: 'In order to fully incorporate the new functionality into our app, we need to
    go through the following steps:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将新功能完全整合到我们的应用中，我们需要按照以下步骤进行操作：
- en: 'Add the definition of `series` at the top of the `app.py` module:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `app.py` 模块的顶部添加 `series` 的定义：
- en: '[PRE55]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Add the definition of the `multiline_indicator` function, anywhere before `app.layout`:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `app.layout` 之前的任何位置添加 `multiline_indicator` 函数的定义：
- en: '[PRE56]'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Add the `Dropdown`, `Graph`, and `Markdown` components at the top of the app,
    right under the top headings, where we previously had the population bar chart.
    The following code shows how, including the component IDs to make it clear, but
    the full definitions have been omitted. Note also the addition of a `Col` component
    as well as setting the width of another `Col` component, both using the `lg` (large)
    parameter. The first one introduces an empty column before displaying the content,
    and the second controls the width of the content in this column:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用的顶部，在我们之前放置人口条形图的位置，添加 `Dropdown`、`Graph` 和 `Markdown` 组件。以下代码展示了如何添加这些组件，包括组件的
    ID 以使其更清晰，但完整的定义已被省略。注意，还添加了一个 `Col` 组件，并且设置了另一个 `Col` 组件的宽度，两个都使用了 `lg`（大）参数。第一个用来在显示内容之前插入一个空白列，第二个用来控制该列中内容的宽度：
- en: '[PRE57]'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: We have explored several new options in this chapter, so let's summarize what
    we did.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们探讨了几个新的选项，现在让我们总结一下我们所做的工作。
- en: Summary
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We started by exploring how to create choropleth maps, which are a type of map
    that we are all used to seeing. We also saw how to animate those maps if we have
    a sequential value, which in our case was viewing a certain indicator as it progressed
    throughout the available years. We then created a callback function and made the
    maps work with all the possible indicators that we have, so users could explore
    them all and then decide what they wanted to explore next.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从探索如何创建热力图开始，这是一种我们都习惯看到的地图类型。我们还展示了如何为这些地图添加动画效果，如果我们有一个按顺序变化的值，譬如按年进展的某个指标。然后，我们创建了一个回调函数，使地图能够与我们所有可能的指标一起工作，用户可以浏览所有指标，然后决定接下来想要探索的内容。
- en: After that, we learned how to use Markdown to generate HTML content, and how
    to add it to a Dash app. We then explored the different ways of displaying maps,
    or projections, and saw how to select the projection that we want.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们学习了如何使用 Markdown 来生成 HTML 内容，以及如何将其添加到 Dash 应用中。接着，我们探讨了不同的地图或投影显示方式，并了解了如何选择我们想要的投影。
- en: We went through another type of map, which is a scatter map plot. Building on
    the knowledge we established in the previous chapter, it was fairly straightforward
    to adapt that knowledge to scatter maps. We also learned about the rich options
    that Mapbox provides and explored a few other topics for further exploration with
    maps. Finally, we integrated the new functionality into our app, which now contains
    a lot of explanatory text about almost all of the indicators, so users have a
    much better view of what they are analyzing.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 我们了解了另一种类型的地图，即散点地图图表。基于前一章中建立的知识，调整这些知识来适应散点地图非常简单。我们还学习了 Mapbox 提供的丰富选项，并探讨了其他几个可以进一步探索的地图主题。最后，我们将这些新功能集成到我们的应用中，现在应用包含了大量关于几乎所有指标的解释性文本，用户可以更清晰地了解他们正在分析的内容。
- en: In the next chapter, we will tackle a different type of chart, one that helps
    in counting values and showing how they are distributed in our dataset, the **histogram**.
    We will also explore a new component, the Dash **DataTable**, which allows us
    to display tabular data in a rich way, with many options to filter, visualize,
    download, and more.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将处理另一种类型的图表，帮助统计数值并展示它们在数据集中的分布情况，即 **直方图**。我们还将探索一个新的组件，Dash **DataTable**，它允许我们以丰富的方式展示表格数据，并提供许多筛选、可视化、下载等选项。
