- en: Chapter 2. Developing Applications with Spark
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。使用Spark开发应用程序
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Exploring the Spark shell
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索Spark shell
- en: Developing a Spark application in Eclipse with Maven
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Eclipse中使用Maven开发Spark应用程序
- en: Developing Spark applications in Eclipse with SBT
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Eclipse中使用SBT开发Spark应用程序
- en: Developing a Spark application in Intellij IDEA with Maven
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Intellij IDEA中使用Maven开发Spark应用程序
- en: Developing a Spark application in Intellij IDEA with SBT
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Intellij IDEA中使用SBT开发Spark应用程序
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: To create production quality Spark jobs/application, it is useful to use various
    **integrated development environments** (**IDEs**) and build tools. This chapter
    will cover various IDEs and build tools.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建生产质量的Spark作业/应用程序，使用各种**集成开发环境**（**IDEs**）和构建工具非常有用。本章将涵盖各种IDE和构建工具。
- en: Exploring the Spark shell
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索Spark shell
- en: Spark comes bundled with a REPL shell, which is a wrapper around the Scala shell.
    Though the Spark shell looks like a command line for simple things, in reality
    a lot of complex queries can also be executed using it. This chapter explores
    different development environments in which Spark applications can be developed.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Spark自带一个REPL shell，它是Scala shell的包装器。尽管Spark shell看起来像是用于简单事务的命令行，但实际上也可以使用它执行许多复杂的查询。本章探讨了可以开发Spark应用程序的不同开发环境。
- en: How to do it...
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Hadoop MapReduce''s word count becomes very simple with the Spark shell. In
    this recipe, we are going to create a simple 1-line text file, upload it to the
    **Hadoop distributed file system** (**HDFS**), and use Spark to count occurrences
    of words. Let''s see how:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Spark shell，Hadoop MapReduce的单词计数变得非常简单。在这个示例中，我们将创建一个简单的一行文本文件，将其上传到**Hadoop分布式文件系统**（**HDFS**），并使用Spark来计算单词的出现次数。让我们看看如何做到：
- en: 'Create the `words` directory by using the following command:'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令创建`words`目录：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Get into the `words` directory:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入`words`目录：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Create a `sh.txt` text file and enter `"to be or not to be"` in it:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`sh.txt`文本文件，并在其中输入`"to be or not to be"`：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Start the Spark shell:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Spark shell：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Load the `words` directory as RDD:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`words`目录加载为RDD：
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Count the number of lines ( result: 1):'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 统计行数（结果：1）：
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Divide the line (or lines) into multiple words:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将行（或行）分成多个单词：
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Convert `word` to (word,1)—that is, output `1` as the value for each occurrence
    of `word` as a key:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`word`转换为（word,1）—即，将`1`作为每个`word`出现的值作为键输出：
- en: '[PRE7]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Use the `reduceByKey` method to add the number of occurrences for each word
    as a key (the function works on two consecutive values at a time represented by
    `a` and `b`):'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`reduceByKey`方法将每个单词的出现次数作为键相加（该函数在两个连续值上运行，由`a`和`b`表示）：
- en: '[PRE8]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Sort the results:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对结果进行排序：
- en: '[PRE9]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Print the RDD:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印RDD：
- en: '[PRE10]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Doing all of the preceding operations in one step is as follows:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有前述操作合并为一步如下：
- en: '[PRE11]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This gives us the following output:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这给我们以下输出：
- en: '[PRE12]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now you understand the basics, load HDFS with a large amount of text—for example,
    stories—and see the magic.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您了解了基础知识，可以加载大量文本（例如故事）到HDFS中，看看魔法。
- en: If you have the files in a compressed format, you can load them as is in HDFS.
    Both Hadoop and Spark have codecs for unzipping, which they use based on file
    extensions.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果文件以压缩格式存在，可以直接在HDFS中加载它们。Hadoop和Spark都有用于解压缩的编解码器，它们根据文件扩展名使用。
- en: 'When `wordsFlatMap` was converted to `wordsMap` RDD, there was an implicit
    conversion. This converts RDD into `PairRDD`. This is an implicit conversion,
    which does not require anything to be done. If you are doing it in Scala code,
    please add the following `import` statement:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 当`wordsFlatMap`转换为`wordsMap` RDD时，发生了隐式转换。这将RDD转换为`PairRDD`。这是一个隐式转换，不需要做任何事情。如果您在Scala代码中执行此操作，请添加以下`import`语句：
- en: '[PRE13]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Developing Spark applications in Eclipse with Maven
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Eclipse中使用Maven开发Spark应用程序
- en: 'Maven as a build tool has become the de-facto standard over the years. It''s
    not surprising if we look little deeper into the promise Maven brings. Maven has
    two primary features and they are:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，Maven作为构建工具已经成为事实上的标准。如果我们深入了解Maven所带来的承诺，这并不令人意外。Maven有两个主要特点，它们是：
- en: '**Convention over configuration**: Build tools prior to Maven gave developers
    freedom about where to put source files, where to put test files, where to put
    compiled files, and so on. Maven takes away that freedom. With this freedom, all
    the confusion about locations also goes. In Maven, there is a specific directory
    structure for everything. The following table shows a few of the most common locations:'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**约定优于配置**：在Maven之前的构建工具中，开发人员可以自由选择放置源文件、测试文件、编译文件等的位置。Maven取消了这种自由。有了这种自由，所有关于位置的混乱也消失了。在Maven中，每样东西都有一个特定的目录结构。以下表格显示了一些最常见的位置：'
- en: '| `/src/main/scala` | Source code in Scala |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| `/src/main/scala` | Scala中的源代码 |'
- en: '| `/src/main/java` | Source code in Java |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `/src/main/java` | Java中的源代码 |'
- en: '| `/src/main/resources` | Resources to be used by source code such as configuration
    files |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `/src/main/resources` | 源代码使用的资源，如配置文件 |'
- en: '| `/src/test/scala` | Test code in Scala |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `/src/test/scala` | Scala中的测试代码 |'
- en: '| `/src/test/java` | Test code in Java |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `/src/test/java` | Java中的测试代码 |'
- en: '| `/src/test/resources` | Resources to be used by test code such as configuration
    files |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `/src/test/resources` | 测试代码使用的资源，如配置文件 |'
- en: '**Declarative dependency management**: In Maven, every library is defined by
    following three coordinates:'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**声明式依赖管理**：在Maven中，每个库都是通过以下三个坐标来定义的：'
- en: '| `groupId` | A logical way of grouping libraries similar to a package in Java/Scala,
    which has to be at least the domain name you own—for example, `org.apache.spark`
    |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `groupId` | 逻辑上将类库分组的一种方式，类似于Java/Scala中的包，至少必须是您拥有的域名，例如`org.apache.spark`
    |'
- en: '| `artifactId` | The name of the project and JAR |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `artifactId` | 项目和JAR的名称 |'
- en: '| `version` | Standard version numbers |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '`version` | 标准版本号 |'
- en: 'In `pom.xml` (the configuration file that tells Maven all the information about
    a project), dependencies are declared in the form of these three coordinates.
    There is no need to search over the Internet and download, unpack, and copy libraries.
    All you need to do is to provide three coordinates of the dependency JAR you need
    and Maven will do the rest for you. The following is an example of using a JUnit
    dependency:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在`pom.xml`中（告诉Maven有关项目的所有信息的配置文件）中，依赖关系以这三个坐标的形式声明。无需在互联网上搜索、下载、解压缩和复制库。您只需要提供所需的依赖JAR的三个坐标，Maven将为您完成其余工作。以下是使用JUnit依赖项的示例：
- en: '[PRE14]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This makes dependency management including transitive dependencies very easy.
    Build tools that came after Maven such as SBT and Gradle also follow these two
    rules as-is and provide enhancements in other aspects.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得包括传递依赖关系在内的依赖管理变得非常容易。在Maven之后出现的构建工具，如SBT和Gradle，也遵循这两个规则，并在其他方面提供增强功能。
- en: Getting ready
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: From this recipe onwards, this chapter assumes you have installed Eclipse. Please
    visit [http://www.eclipse.org](http://www.eclipse.org) for details.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个食谱开始，本章假设您已经安装了Eclipse。请访问[http://www.eclipse.org](http://www.eclipse.org)获取详细信息。
- en: How to do it...
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s see how to install the Maven plugin for Eclipse:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何为Eclipse安装Maven插件：
- en: Open Eclipse and navigate to **Help** | **Install New Software**.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Eclipse，导航到**帮助** | **安装新软件**。
- en: Click on the **Work with** drop-down menu.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“工作区”下拉菜单。
- en: Select the <eclipse version> update site.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择<eclipse版本>更新站点。
- en: Click on **Collaboration tools**.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**协作工具**。
- en: Check Maven's integration with Eclipse, as in the following screenshot:![How
    to do it...](img/B03056_02_01.jpg)
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查Maven与Eclipse的集成，如下截图所示：![如何做...](img/B03056_02_01.jpg)
- en: Click on **Next** and then click on **Finish**.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**下一步**，然后单击**完成**。
- en: There will be a prompt to restart Eclipse and Maven will be installed after
    the restart.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 重新启动Eclipse后，将会出现提示安装Maven。
- en: 'Now let''s see how we can install the Scala plugin for Eclipse:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如何为Eclipse安装Scala插件：
- en: Open Eclipse and navigate to **Help** | **Install New Software**.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Eclipse，导航到**帮助** | **安装新软件**。
- en: Click on the **Work with** drop-down menu.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“工作区”下拉菜单。
- en: Select the <eclipse version> update site.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择<eclipse版本>更新站点。
- en: Type `http://download.scala-ide.org/sdk/helium/e38/scala210/stable/site`.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 键入`http://download.scala-ide.org/sdk/helium/e38/scala210/stable/site`。
- en: Press *Enter*.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下*Enter*。
- en: Select **Scala IDE for Eclipse**:![How to do it...](img/B03056_02_02.jpg)
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**Scala IDE for Eclipse**：![如何做...](img/B03056_02_02.jpg)
- en: Click on **Next** and then click on **Finish**. You will be prompted to restart
    Eclipse and Scala will be installed after the restart.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**下一步**，然后单击**完成**。重新启动Eclipse后，将会出现提示安装Scala。
- en: Navigate to **Window** | **Open Perspective** | **Scala**.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**窗口** | **打开透视图** | **Scala**。
- en: Eclipse is now ready for Scala development!
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Eclipse现在已准备好用于Scala开发！
- en: Developing Spark applications in Eclipse with SBT
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Eclipse中使用SBT开发Spark应用程序
- en: '**Simple Build Tool** (**SBT**) is a build tool made especially for Scala-based
    development. SBT follows Maven-based naming conventions and declarative dependency
    management.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**Simple Build Tool**（**SBT**）是专为基于Scala的开发而制作的构建工具。SBT遵循Maven的命名约定和声明性依赖管理。'
- en: 'SBT provides the following enhancements over Maven:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: SBT相对于Maven提供了以下增强功能：
- en: Dependencies are in the form of key-value pairs in the `build.sbt` file as opposed
    to `pom.xml` in Maven
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依赖关系以`build.sbt`文件中的键值对的形式提供，而不是Maven中的`pom.xml`
- en: It provides a shell that makes it very handy to perform build operations
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它提供了一个shell，非常方便执行构建操作
- en: For simple projects without dependencies, you do not even need the `build.sbt`
    file
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于没有依赖关系的简单项目，甚至不需要`build.sbt`文件
- en: 'In `build.sbt`, the first line is the project definition:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在`build.sbt`中，第一行是项目定义：
- en: '[PRE15]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Each project has an immutable map of key-value pairs. This map is changed by
    settings in SBT like so:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 每个项目都有一个不可变的键值对映射。这个映射通过SBT中的设置进行更改，如下所示：
- en: '[PRE16]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Every change in the settings leads to a new map, as it's an immutable map.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 设置的每次更改都会导致一个新的映射，因为它是一个不可变的映射。
- en: How to do it...
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Here''s how we go about adding the `sbteclipse` plugin:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是如何添加`sbteclipse`插件的方法：
- en: 'Add this to the global plugin file:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此添加到全局插件文件中：
- en: '[PRE17]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Alternatively, you can add the following to your project:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以将以下内容添加到您的项目中：
- en: '[PRE18]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Start the `sbt` shell without any arguments:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不带任何参数启动`sbt` shell：
- en: '[PRE19]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Type `eclipse` and it will make an Eclipse-ready project:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 键入`eclipse`，它将创建一个准备好的Eclipse项目：
- en: '[PRE20]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Now you can navigate to **File** | **Import** | **Import existing project into
    workspace** to load the project into Eclipse.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您可以导航到**文件** | **导入** | **将现有项目导入工作区**，将项目加载到Eclipse中。
- en: Now you can develop the Spark application in Scala using Eclipse and SBT.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以使用Eclipse和SBT在Scala中开发Spark应用程序。
- en: Developing a Spark application in IntelliJ IDEA with Maven
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在IntelliJ IDEA中使用Maven开发Spark应用程序
- en: IntelliJ IDEA comes bundled with support for Maven. We will see how to create
    a new Maven project in this recipe.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: IntelliJ IDEA自带了对Maven的支持。我们将看到如何在本食谱中创建一个新的Maven项目。
- en: How to do it...
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Perform the following steps to develop a Spark application on IntelliJ IDEA
    with Maven:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在IntelliJ IDEA上使用Maven开发Spark应用程序，请执行以下步骤：
- en: Select **Maven** in new project window and click on **Next**:![How to do it...](img/B03056_02_03.jpg)
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新项目窗口中选择**Maven**，然后单击**下一步**：![如何做...](img/B03056_02_03.jpg)
- en: Enter three dimensions of the project:![How to do it...](img/B03056_02_04.jpg)
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入项目的三个维度：![如何做...](img/B03056_02_04.jpg)
- en: Enter the project's name and location:![How to do it...](img/B03056_02_05.jpg)
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入项目的名称和位置：![如何做...](img/B03056_02_05.jpg)
- en: Click on **Finish** and the Maven project is ready.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**完成**，Maven项目已准备就绪。
- en: Developing a Spark application in IntelliJ IDEA with SBT
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在IntelliJ IDEA中使用SBT开发Spark应用程序
- en: Before Eclipse became famous, IntelliJ IDEA was considered best of the breed
    in IDEs. IDEA has not shed its former glory yet and a lot of developers love IDEA.
    IDEA also has a community edition, which is free. IDEA provides native support
    for SBT, which makes it ideal for SBT and Scala development.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在Eclipse成名之前，IntelliJ IDEA被认为是最优秀的IDE之一。IDEA至今仍然保持着它以前的荣耀，很多开发者喜爱IDEA。IDEA也有一个免费的社区版。IDEA对SBT提供了原生支持，这使得它非常适合SBT和Scala开发。
- en: How to do it...
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'Perform the following steps to develop a Spark application on IntelliJ IDEA
    with SBT:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤在IntelliJ IDEA上使用SBT开发Spark应用程序：
- en: Add the `sbt-idea` plugin.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`sbt-idea`插件。
- en: 'Add to the global plugin file:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加到全局插件文件中：
- en: '[PRE21]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Alternatively, you can add to your project as well:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你也可以将其添加到你的项目中：
- en: '[PRE22]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: IDEA is ready to use with SBT.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: IDEA已经准备好与SBT一起使用。
- en: Now you can develop Spark code using Scala and build using SBT.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以使用Scala开发Spark代码，并使用SBT构建。
