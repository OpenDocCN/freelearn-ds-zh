- en: Jupyter Java Coding
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jupyter Java编程
- en: Java is a high-level programming language that was originally developed by Sun
    Microsystems, and is currently owned by Oracle. Java is a cross-platform, compiled
    language that can be executed on a variety of platforms. Java is cross-platform
    since it generates **p-code**, which is interpreted by a resident-specific version
    of Java, the **Java Virtual Machine** (**JVM**).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Java是一种高级编程语言，最初由Sun Microsystems开发，目前归Oracle所有。Java是一种跨平台的编译语言，可以在多种平台上执行。Java之所以能够跨平台，是因为它生成**p-code**，该代码由特定版本的Java解释执行，这个版本就是**Java虚拟机**（**JVM**）。
- en: Java is distributed by using a **Java Runtime Executable** (**JRE**) for those
    that only need to execute programs that are written. Otherwise, there's a **Java
    Development Kit** (**JDK**) for those developing Java applications.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Java通过**Java运行时可执行文件**（**JRE**）进行分发，适用于只需要执行已编写程序的用户。否则，对于开发Java应用程序的用户，则需要**Java开发工具包**（**JDK**）。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: Adding the Java kernel to Jupyter
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Java内核添加到Jupyter
- en: Java Hello World Jupyter Notebook
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java Hello World Jupyter Notebook
- en: Basic Java in Jupyter
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jupyter中的基础Java
- en: Major caveat is this does not work on a Windows environment. A Java Notebook
    will not start on Windows.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 主要的警告是，这在Windows环境中不起作用。Java Notebook在Windows上无法启动。
- en: Adding the Java kernel to your installation
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将Java内核添加到您的安装中
- en: In this section, we will add the Java kernel to your installation. The steps
    are very similar, regardless of whether you're installing in a Windows or a macOS
    environment.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将向您的安装中添加Java内核。无论您是在Windows环境还是macOS环境中安装，步骤都非常相似。
- en: The Java kernel, IJava, was developed and maintained by Spence Park at [https://github.com/SpencerPark/IJava](https://github.com/SpencerPark/IJava).
    There are a couple of requirements for using the Java kernel, which will be covered
    in the following sections.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Java内核IJava由Spence Park开发并维护，地址为[https://github.com/SpencerPark/IJava](https://github.com/SpencerPark/IJava)。使用Java内核有一些要求，接下来将介绍。
- en: Installing Java 9 or later
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Java 9或更高版本
- en: 'You can check the version of Java you have installed by using the following
    command at a command-line prompt:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在命令行提示符中使用以下命令来检查已安装的Java版本：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We need version 9 or later.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要9或更高版本。
- en: 'Also, the installed version must be a JDK. The JRE will not suffice. You can
    download the latest Java version at [www.oracle.com/technetwork/java](http://www.oracle.com/technetwork/java).
    At the time of writing this book, version 10 was generally available so I installed
    that version, as you can see from the following screenshot:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，安装的版本必须是JDK。JRE是不够的。您可以在[www.oracle.com/technetwork/java](http://www.oracle.com/technetwork/java)下载最新的Java版本。在编写本书时，版本10已广泛发布，因此我安装了该版本，如下截图所示：
- en: '![](img/27ffc1d4-cef0-44eb-a8df-85c44bd01371.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/27ffc1d4-cef0-44eb-a8df-85c44bd01371.png)'
- en: A Jupyter environment is required
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 需要一个Jupyter环境
- en: This may sound redundant, but this is broad, allowing IJava to run in Jupyter,
    **JupyterLab**, or **nteract** all Jupyter environments, depending on your needs.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能听起来有些重复，但它的广泛性使得IJava可以在所有Jupyter环境中运行，包括**JupyterLab**或**nteract**，具体取决于您的需求。
- en: Configuring IJava
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置IJava
- en: Once you have installed Java, you need to configure IJava.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完Java后，您需要配置IJava。
- en: Downloading the IJava project from GitHub
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从GitHub下载IJava项目
- en: 'We can download the `IJava` extension from GitHub by using the following command:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下命令从GitHub下载`IJava`扩展：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![](img/d2707ae9-75c5-469e-9f5d-e2a2e46b0e66.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d2707ae9-75c5-469e-9f5d-e2a2e46b0e66.png)'
- en: 'The `git clone` command downloads the project files into the `IJava` directory
    where you are located (in my case, this is my default user directory):'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`git clone`命令将项目文件下载到您所在的`IJava`目录（在我的情况下，这是我的默认用户目录）：'
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This command just relocates into the `IJava` directory that was downloaded.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令只是将目录切换到已下载的`IJava`目录。
- en: Building and installing the kernel
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建和安装内核
- en: 'Following are the commands for the particular operating system:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是特定操作系统的命令：
- en: '***nix**: `chmod u+x gradlew && ./gradlew installKernel`'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***nix**: `chmod u+x gradlew && ./gradlew installKernel`'
- en: '**Windows**: `gradlew installKernel`'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Windows**: `gradlew installKernel`'
- en: '`gradlew` is a Windows version of Gradle, a popular scripting system. Gradle
    is adept at installing software. `gradlew` was installed as part of the `git clone`
    command that you ran earlier:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`gradlew`是Windows版本的Gradle，它是一个流行的脚本系统。Gradle擅长安装软件。`gradlew`是在您之前运行的`git clone`命令的一部分安装的：'
- en: '![](img/9997ff61-10d7-4eee-901d-86f57efe3c7b.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9997ff61-10d7-4eee-901d-86f57efe3c7b.png)'
- en: 'So, as you can see from the install output, IJava really expects Java 9 to
    be installed. Java 9 is no longer a supported version from Oracle. We need to
    configure the tool to use Java 10\. In my case, I had previously installed Java
    and had set the environment variable, `JAVA_HOME`, to the older version. Changing
    the environment variable to point to the Java 10 install worked:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如从安装输出中可以看出，IJava 确实需要安装 Java 9。但 Java 9 已不再是 Oracle 支持的版本。我们需要配置工具以使用 Java
    10。就我而言，我之前已安装了 Java，并将环境变量 `JAVA_HOME` 设置为较旧的版本。将环境变量更改为指向 Java 10 安装的路径后，问题解决：
- en: '![](img/d48eff6c-de19-4fd6-b49b-9e6282576503.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d48eff6c-de19-4fd6-b49b-9e6282576503.png)'
- en: 'Now, when we look at the list of kernels, we can see that Java is available
    by using the following command:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们查看内核列表时，我们可以看到可以通过以下命令使用 Java：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'After the execution of the preceding command we will see the following results:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 执行上述命令后，我们将看到以下结果：
- en: '![](img/1727c709-48b4-479c-8273-20da96bf0679.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1727c709-48b4-479c-8273-20da96bf0679.png)'
- en: Available options
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可用选项
- en: 'As with other Java installations, we can set a number of Java-specific environment
    variables as desired:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他 Java 安装一样，我们可以根据需要设置一些特定于 Java 的环境变量：
- en: '| **Setting** | **Default value** | **Description** |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| **设置** | **默认值** | **描述** |'
- en: '| `IJAVA_VM_OPTS` | `""` | A space delimited list of command-line options that
    would be passed to the `java` command if running code. For example, we would use `-Xmx128m`
    to set a limit on the heap size or `-ea` to enable `assert` statements. |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `IJAVA_VM_OPTS` | `""` | 一个以空格分隔的命令行选项列表，这些选项会在运行代码时传递给 `java` 命令。例如，我们可以使用
    `-Xmx128m` 来设置堆大小限制，或者使用 `-ea` 来启用 `assert` 语句。 |'
- en: '| `IJAVA_COMPILER_OPTS` | `""` | A space delimited list of command-line options
    that would be passed to the `javac` command when compiling a project. For example,
    `-parameters` to enable retaining parameter names for reflection. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `IJAVA_COMPILER_OPTS` | `""` | 一个以空格分隔的命令行选项列表，这些选项会在编译项目时传递给 `javac` 命令。例如，`-parameters`
    用于启用保留参数名称以便反射使用。 |'
- en: '| `IJAVA_TIMEOUT` | `1` | A duration in milliseconds, specifying a timeout
    on long-running code. If less than zero, the timeout is disabled. |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| `IJAVA_TIMEOUT` | `1` | 一个以毫秒为单位的持续时间，指定长时间运行的代码的超时时间。如果小于零，则禁用超时。 |'
- en: '| `IJAVA_CLASSPATH` | `""` | `-`, a file path separator delimited list of `classpath`
    entries that should be available to the user code. |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| `IJAVA_CLASSPATH` | `""` | `-`，一个以文件路径分隔符分隔的 `classpath` 条目列表，这些条目应该对用户代码可用。
    |'
- en: '| `IJAVA_STARTUP_SCRIPTS_PATH` | `""` | A file path seperator delimited list
    of `.jshell` scripts to run on startup. This includes `ijava-jshell-init.jshell`
    and `ijava-magics-init.jshell`. |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `IJAVA_STARTUP_SCRIPTS_PATH` | `""` | 一个以文件路径分隔符分隔的 `.jshell` 脚本文件路径列表，这些脚本将在启动时运行。包括
    `ijava-jshell-init.jshell` 和 `ijava-magics-init.jshell`。 |'
- en: '| `IJAVA_STARTUP_SCRIPT` | `""` | A block of Java code to run when the kernel
    starts up. This may be something like `import my.utils;` to set up some default
    imports or even `void sleep(long time) { try {Thread.sleep(time)} catch (InterruptedException
    e) {}}` to declare a default `utility` method to use in the Notebook. |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `IJAVA_STARTUP_SCRIPT` | `""` | 在内核启动时执行的 Java 代码块。这可能是类似 `import my.utils;`
    的代码，用于设置一些默认的导入，或者是 `void sleep(long time) { try {Thread.sleep(time)} catch (InterruptedException
    e) {}}` 来声明一个默认的 `utility` 方法，以便在笔记本中使用。 |'
- en: As you can tell from the preceding descriptions, none of these are required
    to get a working Java application running. They are normally for special-case
    handling.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的描述中可以看出，这些都不是运行一个有效的 Java 应用程序所必需的。它们通常用于处理特殊情况。
- en: Jupyter Java console
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jupyter Java 控制台
- en: 'You can run Jupyter in `console` mode, meaning that command lines can be entered
    directly rather than in a new Notebook in a browser. The command is as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 `console` 模式下运行 Jupyter，这意味着可以直接输入命令行，而不是在浏览器中的新笔记本里输入。命令如下：
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This means that you can start Jupyter in a console window using the Java kernel.
    We will see a window like the following one, where we can enter some Java code:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着您可以在控制台窗口中使用 Java 内核启动 Jupyter。我们将看到一个类似下面的窗口，在其中可以输入一些 Java 代码：
- en: '![](img/9d30f72a-f7c9-457e-be03-9b0214e87a3e.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9d30f72a-f7c9-457e-be03-9b0214e87a3e.png)'
- en: 'Odd interface lines of the command-line interface screen react as if they are
    part of a Notebook:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 命令行界面屏幕上的奇怪界面行反应得像是笔记本的一部分：
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: But this is not normal Java. There are no semicolons at the end of lines. Semicolons
    are optional for single-line Java statements.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 但这不是正常的 Java。行末没有分号。对于单行 Java 语句，分号是可选的。
- en: Also, the single line `hello` is just the reference to the `hello` variable.
    I am not sure what is causing this to echo into the output.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，单行的`hello`只是对`hello`变量的引用。我不确定是什么原因导致它在输出中回显。
- en: 'We can extract this snippet into a Java Notebook with similar results:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将这个代码片段提取到一个 Java 笔记本中，得到类似的结果：
- en: '![](img/3f4f25cf-e749-4888-a248-b253a5c09ad9.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3f4f25cf-e749-4888-a248-b253a5c09ad9.png)'
- en: Jupyter Java output
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jupyter Java 输出
- en: 'The Java implementation is able to differentiate between `stdout` and `stderr`,
    as can be seen with the following small code snippet:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Java 实现能够区分`stdout`和`stderr`，可以通过以下小代码片段看到这一点：
- en: '[PRE6]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'When run in a Notebook, the `stderr` output is colored red:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在笔记本中运行时，`stderr`输出会被标记为红色：
- en: '![](img/6bbc5544-2a45-4982-8502-92e14cfaa512.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6bbc5544-2a45-4982-8502-92e14cfaa512.png)'
- en: Java Optional
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java Optional
- en: Many a programmer has been bitten by `NullPointerException`. While occurring
    less in Java than C or C++, it may still occur. Now, Java has the idea of an `Optional`
    field. An `Optional` field may or may not contain a value. You can test whether
    there is a value present or not rather than the awkward `null` tests that exist.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 许多程序员都被`NullPointerException`咬过。尽管在 Java 中比 C 或 C++ 更少出现，但它仍然可能发生。现在，Java 引入了`Optional`字段的概念。一个`Optional`字段可能有值，也可能没有值。你可以测试是否有值存在，而不是尴尬的`null`测试。
- en: 'We can run through several aspects of `Optional` by using the following code
    snippet:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下代码片段运行 `Optional` 的几个方面：
- en: '[PRE7]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We have a standard preamble to the class to `import` libraries as needed. In
    this case, we will just use the `Optional` package.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个标准的类前言，用来根据需要`import`库。在这个例子中，我们只使用`Optional`包。
- en: We will create a Java class with a static `main` function.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个包含静态`main`函数的 Java 类。
- en: The `main()` function that we defined previously is also nonstandard Java. The
    signature should be `public static void main(String[] args)`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前定义的`main()`函数也是非标准的 Java。其签名应该是`public static void main(String[] args)`。
- en: First, the `main` function creates an instance of the class (as we will want
    to reference other parts of the class later on).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，`main`函数创建了一个类的实例（因为我们稍后会引用类的其他部分）。
- en: We then create two variables, one that is the evil `null` value.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们创建了两个变量，其中一个是邪恶的`null`值。
- en: '`Optional` has two methods which do the same thing, but behave differently:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`Optional`有两个方法，做的是相同的事情，但行为不同：'
- en: '`ofNullable`: Takes an argument, that may be `null`, and creates an `Optional`
    field'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ofNullable`: 接受一个参数，该参数可以为`null`，并创建一个`Optional`字段'
- en: '`of`: Takes an argument, which can not be `null`, and creates an `Optional`
    field'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`of`: 接受一个参数，该参数不能为`null`，并创建一个`Optional`字段'
- en: We now have two `Optional` fields that we pass to the `sum()` function.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有两个`Optional`字段，将它们传递给`sum()`函数。
- en: The `sum` function uses the `orElse()` function on each `Optional` field, expecting
    one or both to be `null` and providing a safe passage in those cases.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`sum`函数对每个`Optional`字段使用`orElse()`函数，期望其中一个或两个为`null`，并在这些情况下提供安全的处理。'
- en: 'Then, it is a simple case of mathematics:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，这就是一个简单的数学问题：
- en: '![](img/34a875f0-38ed-43b7-9752-4e01ed3f0794.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/34a875f0-38ed-43b7-9752-4e01ed3f0794.png)'
- en: As you can see in the preceding output, the first parameter is `null`, but due
    to the `orElse` function, the function continues to process the results.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在前面的输出中看到的，第一参数是`null`，但由于`orElse`函数，函数继续处理结果。
- en: Java compiler errors
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java 编译器错误
- en: As with any regular Java program, there may be compile-time errors in your coding.
    Jupyter Java provides similar feedback, with line numbers corresponding to the
    lines in your Notebook.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 与任何常规 Java 程序一样，你的代码中可能会有编译时错误。Jupyter Java 提供了类似的反馈，行号与笔记本中的行相对应。
- en: 'For example, when I first entered the snippet for an example that we will look
    at a little later on in this chapter, there were a couple of errors:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，当我第一次输入一个示例代码片段时，我们稍后会看到这个例子，出现了一些错误：
- en: '![](img/297808c2-705e-4846-ae7d-9e340e67ed8d.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/297808c2-705e-4846-ae7d-9e340e67ed8d.png)'
- en: The first error was attempting to call the `sort` function from a `static` method.
    The second error was attempting to use the wrong function name. Both of these
    errors are typical types of compile errors you may see when developing Java applications.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个错误是尝试从`static`方法调用`sort`函数。第二个错误是尝试使用错误的函数名称。这两个错误是开发 Java 应用程序时常见的编译错误类型。
- en: Java lambdas
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java Lambda 表达式
- en: 'Lambdas provide a clear and concise way to represent one method interface using
    an expression. Lambdas are usually developed singularly. Lambdas can look very
    close to earlier Java implementations or completely foreign, as can be seen in
    the following example. We develop lambdas using more and more terse syntax:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Lambda 提供了一种清晰简洁的方式来使用表达式表示一个方法接口。Lambda 通常是单独开发的。Lambda 的形式可以非常接近早期的 Java 实现，也可以完全不同，正如以下示例所示。我们使用越来越简洁的语法来开发
    Lambda：
- en: '![](img/6cf9d275-c185-4740-a627-41cb90250ecd.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6cf9d275-c185-4740-a627-41cb90250ecd.png)'
- en: All three lambdas perform the same step (as can be seen in the preceding output).
    However, the implementation is progressively more non-Java looking.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这三个 Lambda 表达式执行相同的步骤（如前面的输出所示）。然而，实现方式逐渐变得更加不符合传统 Java 风格。
- en: Java Collections
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java 集合
- en: Java Collections went through a major rework in the last few releases of Java.
    You can now use a lambda function to describe your comparison point. If that addressed
    object has the built-in `compareTo` function (all of the standard Java objects
    do), then you are done.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Java 集合在最近的几个版本中经历了重大重构。现在，你可以使用 Lambda 函数来描述你的比较点。如果该对象具有内置的`compareTo`函数（所有标准
    Java 对象都有），那么就完成了。
- en: 'In this case, we build a list of strings (country names) and pass that list
    to the `Collections.sort` routine. The `sort` routine becomes very minor, invoking
    the built-in `compareTo` functions for `String` in Java:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们构建了一个包含字符串（国家名称）的列表，并将该列表传递给`Collections.sort`例程。`sort`例程变得非常简单，只是调用
    Java 中`String`类型的内置`compareTo`函数：
- en: '![](img/594c971d-c63f-47b4-8b18-77dcb6021a0b.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/594c971d-c63f-47b4-8b18-77dcb6021a0b.png)'
- en: When we run, we can see the results in a sorted order.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行时，可以看到结果按排序顺序输出。
- en: There is likely a way to do this without modifying the passed-in array.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 很可能有一种方法可以在不修改传入数组的情况下做到这一点。
- en: Java streams
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java 流
- en: Java streams was a significant improvement with Java 8\. Now, Java is able to
    deal with streams of information flow in a functional manner. In this example,
    we will use stream in several small examples to show the power of the feature.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Java 流（streams）是 Java 8 中的一个重大改进。现在，Java 能够以函数式的方式处理信息流。在这个例子中，我们将通过几个小示例来展示该特性的强大功能。
- en: 'The code snippet we are using is as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用的代码片段如下：
- en: '[PRE8]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The code uses a collection (`stream`) of numbers for several stream operations.
    Streams have many more functions built-in to them:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 该代码使用一个包含数字的集合（`stream`）进行多个流操作。流内置了许多更多的函数：
- en: First, we use `filter` to pick out the elements of interest
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们使用`filter`挑选出感兴趣的元素。
- en: We use count to find out how many elements are in the stream
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用`count`来找出流中有多少个元素。
- en: We use a lambda function to find the smallest element in the stream
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用一个 Lambda 函数来查找流中的最小元素。
- en: Next, we use another lambda to sort the stream elements
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们使用另一个 Lambda 表达式对流元素进行排序。
- en: Then, we use collect and use `summingInt` to add up all of the elements
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们使用`collect`并使用`summingInt`来将所有元素相加。
- en: A summary is produced of the stream—this is a built-in function of streams
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该流的汇总已生成——这是流的内置功能。
- en: Finally, we use `map` and `flatMap` to perform projections (growth) on the stream
    elements
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们使用`map`和`flatMap`对流中的元素进行投影（增长）。
- en: 'The coding and output look like the following (I added horizontal lines to
    break up the output so that it''s more readable):'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 编码和输出如下所示（我添加了水平线来分隔输出，使其更易于阅读）：
- en: '![](img/232c84b1-c470-4381-bec7-7d4b2785f225.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/232c84b1-c470-4381-bec7-7d4b2785f225.png)'
- en: I have cut off the display as the rest is consistent with expectations.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我已截断显示，剩下的与预期一致。
- en: 'Similarly, in the following output, I have not displayed all of the output:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，在以下输出中，我并没有显示所有的输出：
- en: '![](img/25ddec77-f997-4e13-bec4-7df0242c8842.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/25ddec77-f997-4e13-bec4-7df0242c8842.png)'
- en: Java summary statistics
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java 汇总统计
- en: Java can produce summary statistics for a collection. We can retrieve the `Iris`
    dataset and put it into a collection before producing the statistics directly.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: Java 可以为集合生成汇总统计数据。我们可以获取`Iris`数据集并将其放入集合中，然后直接生成统计数据。
- en: I have copied the file from [http://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data](http://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data)
    to make the processing a little smoother.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经将文件从[http://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data](http://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data)复制过来，以便使处理过程更为顺畅。
- en: We read in the `Iris` data and then call upon collections to produce a summary.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们读取`Iris`数据，然后调用集合生成汇总。
- en: 'The code for this example is as follows:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子的代码如下：
- en: '[PRE9]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The code is parsing out each row of the `iris` data into an `Iris` object, and
    is adding that `Iris` object to an array.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 该代码正在将`iris`数据的每一行解析为一个`Iris`对象，并将该`Iris`对象添加到一个数组中。
- en: The main routine then calls upon the collections to produce a summary.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，主程序调用集合生成摘要。
- en: 'The coding looks like the following, where we have `Iris` as a separate object:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 代码看起来如下，其中我们将`Iris`作为一个单独的对象：
- en: '![](img/95dd4d7c-8f6b-49c7-962a-55f7a75b8ea2.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](img/95dd4d7c-8f6b-49c7-962a-55f7a75b8ea2.png)'
- en: 'Then, the main coding of the routine to read in the flower information and
    produce statistics is as follows:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，主程序的编码读取花卉信息并生成统计数据如下：
- en: '![](img/2a6bf48d-1c39-4fe8-a66c-29b2b9c508ac.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2a6bf48d-1c39-4fe8-a66c-29b2b9c508ac.png)'
- en: 'The tail of the output looks like the following:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 输出的尾部看起来如下：
- en: '![](img/9417a600-7b4d-4457-b7dd-af2e35c483ee.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9417a600-7b4d-4457-b7dd-af2e35c483ee.png)'
- en: This kind of processing is much easier to accomplish in the other engines that
    are available in Jupyter.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这种处理在Jupyter中其他可用的引擎中要容易得多。
- en: Summary
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we saw the steps to install the Java engine into Jupyter. We
    saw examples of the different output presentations available from Java in Jupyter.
    Then, we investigated using `Optional` fields. We saw what a compile error looks
    like in Java in Jupyter. Next, we saw several examples of lambdas. We used collections
    for several purposes. Lastly, we generated summary statistics for one of the `Iris`
    dataset points.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了将Java引擎安装到Jupyter中的步骤。我们看到了Java在Jupyter中提供的不同输出展示的示例。然后，我们调查了使用`Optional`字段。我们看到了Java在Jupyter中的编译错误是什么样子。接下来，我们看到了几个lambda表达式的示例。我们将集合用于几个目的。最后，我们为`Iris`数据集中的一个数据点生成了汇总统计。
- en: In the next chapter, we will look at how to create interactive widgets that
    can be used in your Notebook.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看看如何创建可用于笔记本中的交互式小部件。
