- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Graph Theory
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图论
- en: Graphs are mathematical structures that are used to model pairwise relationships.
    Graph theory provides a tool to quantify these relationships in a dynamic system.
    In other words, graphs are ways to represent a network or a collection of interconnected
    objects. Graph theory is mostly applied in operations research and social sciences.
    Its history dates back to the 18th century when the Swiss mathematician Leonhard
    Euler solved the Königsberg bridge problem (*Figure 6**.1*), which served as a
    precursor to graph theory. The city of Königsberg in Russia was set on both sides
    of the Pregel river and included two large islands, namely, Kneiphof and Lomse,
    which were connected by seven bridges. The problem was to devise a walk through
    the city that would cross each of these bridges only once. Euler drew out the
    first known visual representation of a modern graph for the city. It is represented
    (abstractly) by a set of points known as vertices or nodes, connected by a set
    of lines known as edges. Edges represent the relationships between nodes.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 图是用于建模成对关系的数学结构。图论提供了量化这些关系的工具，特别是在动态系统中。换句话说，图是表示网络或一组互联对象的方式。图论主要应用于运筹学和社会科学。其历史可以追溯到18世纪，当时瑞士数学家莱昂哈德·欧拉解决了“哥尼斯堡七桥问题”（*图
    6.1*），这个问题也被认为是图论的前身。俄罗斯哥尼斯堡市位于普雷格尔河的两岸，包含两个大岛——克奈普霍夫和洛姆泽，这两个岛通过七座桥连接。问题是如何设计一条路径，使得每座桥都只跨越一次。欧拉绘制了城市的第一个现代图形的可视化表示。它通过一组称为顶点或节点的点表示（抽象表示），并通过一组称为边的线连接。边表示节点之间的关系。
- en: '![Figure 6.1: Seven bridges of Königsberg](img/Figure_06_01_B18943.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.1：哥尼斯堡七桥问题](img/Figure_06_01_B18943.jpg)'
- en: 'Figure 6.1: Seven bridges of Königsberg'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.1：哥尼斯堡七桥问题
- en: A graph theory problem typically uses the framework of mathematical optimization,
    which has three components, namely, the objective function, decision variables,
    and constraints. The objective function is minimized to obtain the optimal path
    between nodes in a graph because there can be multiple paths connecting two nodes
    (multigraphs). The objective of using a graph to solve a problem is multifold.
    One could be to visualize the edges, figure out closely connected nodes, and identify
    the nodes that directly influence the objective function. A possible decision
    variable among others could be whether or not to add an edge between two nodes.
    A typical constraint could be the degree each node can attain, that is, the maximum
    number of connections each node can have to other nodes in the network. A well-known
    problem solved using graph theory is the **traveling salesman problem** (**TSP**),
    in which the shortest path starts and ends at the same vertex/node and visits
    each edge exactly once. Such examples (routing) are related to the field of linear
    programming.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 图论问题通常使用数学优化框架，该框架包括三个组成部分：目标函数、决策变量和约束条件。目标函数被最小化，以获取图中节点之间的最优路径，因为两个节点之间可能存在多条路径（多重图）。使用图解决问题的目标是多方面的。一个目标可能是可视化边，找出紧密连接的节点，并识别直接影响目标函数的节点。可能的决策变量之一是是否在两个节点之间添加一条边。一个典型的约束条件可能是每个节点能够达到的度数，即每个节点能与其他节点的最大连接数。一个使用图论解决的著名问题是**旅行商问题**（**TSP**），其中最短路径从同一个顶点/节点开始并结束，并且每条边都经过一次。这样的例子（路由）与线性规划领域有关。
- en: '![Figure 6.2a: Simple graph (L) and multigraph (R)](img/Figure_06_02_B18943.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.2a：简单图（左）与多重图（右）](img/Figure_06_02_B18943.jpg)'
- en: 'Figure 6.2a: Simple graph (L) and multigraph (R)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.2a：简单图（左）与多重图（右）
- en: Graphs come in a variety of sorts, the most common of which are simple graphs
    and multigraphs. These are shown in *Figure 6**.2a* and there is also a graph
    or directed graph (edges have directions) together with a function that assigns
    a positive real number to each edge, known as a network. A network is in fact
    an oriented edge-labeled graph, as shown in *Figure 6**.2b*.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图有多种类型，其中最常见的是简单图和多重图。它们在*图 6.2a*中展示，还有一种图形或有向图（边有方向），并且每条边都有一个正实数的函数赋值，这种图被称为网络。网络实际上是一个有向边标记图，如*图
    6.2b*所示。
- en: '![Figure 6.2b: Graph as network (model)](img/Figure_06_03_B18943.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.2b：图作为网络（模型）](img/Figure_06_03_B18943.jpg)'
- en: 'Figure 6.2b: Graph as network (model)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.2b：图作为网络（模型）
- en: There is a restricted type of graph known as trees. Tree data structures are
    different from graph data structures (*Figure 6**.3*). A tree, which is a hierarchical
    model, can never have cyclical links (edges) like some graphs have. Trees are
    **directed acyclic graphs** (**DAGs**) and are unidirectional. A graph has no
    root (source) node, whereas a tree does have this node, along with child nodes,
    and every child has one parent node.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 有一种限制类型的图叫做树。树数据结构不同于图数据结构（*图 6.3*）。树作为一种层次模型，永远不会像某些图那样具有循环链接（边）。树是**有向无环图**（**DAGs**），并且是单向的。图没有根节点（源节点），而树具有根节点，以及子节点，每个子节点都有一个父节点。
- en: '![Figure 6.3: Tree (L) with n-1 edges (n = number of nodes) and graph (R) with
    no rule about the number of edges it can have](img/Figure_06_04_B18943.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.3：树（左）具有 n-1 条边（n = 节点数量）和图（右）没有关于其边数的规则](img/Figure_06_04_B18943.jpg)'
- en: 'Figure 6.3: Tree (L) with n-1 edges (n = number of nodes) and graph (R) with
    no rule about the number of edges it can have'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.3：树（左）具有 n-1 条边（n = 节点数量）和图（右）没有关于其边数的规则
- en: Graphs can also have loops, circuits, and self-loops. There are databases that
    use graph structures for semantic queries with nodes and edges. Querying relationships
    (edges labeled, directed) is fast in general, as they are perpetually stored in
    the database. Graph databases are commonly called NoSQL. Graphs are utilized in
    analyzing social networks as well.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 图还可以包含循环、回路和自循环。有些数据库使用图结构进行语义查询，具有节点和边。查询关系（带标签的、有方向的边）通常是快速的，因为它们始终存储在数据库中。图数据库通常被称为
    NoSQL。图也被用于分析社交网络。
- en: 'This chapter covers the following topics:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖以下主题：
- en: Types of graphs
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图的类型
- en: Optimization use case
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优化使用案例
- en: Graph neural networks
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图神经网络
- en: The next section discusses the types of graphs depending on labels, directions,
    and the weights of edges in the graphs.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 下一节将讨论根据标签、方向和图中边的权重来区分图的类型。
- en: Types of graphs
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图的类型
- en: The primary graph types are undirected, directed, and weighted graphs, as illustrated
    in *Figure 6**.4*. Social networks can be undirected as well as directed graphs.
    In the former, edges end up being unordered pairs, for example, Facebook. In the
    latter, edges are ordered pairs, for example, Twitter, in which one node is an
    origin and the other a destination.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 主要的图类型有无向图、有向图和带权图，如*图 6.4*所示。社交网络可以是无向图或有向图。在前者中，边是无序的对，例如 Facebook。在后者中，边是有序的对，例如
    Twitter，其中一个节点是起点，另一个是终点。
- en: '![Figure 6.4: Three standard graph types](img/Figure_06_05_B18943.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.4：三种标准图类型](img/Figure_06_05_B18943.jpg)'
- en: 'Figure 6.4: Three standard graph types'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.4：三种标准图类型
- en: We will explore each of these graphs in the following subsections.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在接下来的小节中探索这些图的每一种。
- en: Undirected graphs
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 无向图
- en: While solving a problem using graph theory, the first step is to determine the
    type of graph we are dealing with. In undirected graphs, there is no particular
    direction of the edges between nodes, in other words, the edge is bidirectional.
    An edge connecting node 1 to node 2 (*Figure 6**.5*) would be identical to the
    edge connecting node 2 to node 1.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用图论解决问题时，第一步是确定我们所处理的图的类型。在无向图中，节点之间的边没有特定方向，换句话说，边是双向的。连接节点 1 和节点 2 的边（*图
    6.5*）与连接节点 2 和节点 1 的边是相同的。
- en: '![Figure 6.5: Directed and undirected graphs](img/Figure_06_06_B18943.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.5：有向图和无向图](img/Figure_06_06_B18943.jpg)'
- en: 'Figure 6.5: Directed and undirected graphs'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.5：有向图和无向图
- en: Directed graphs
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 有向图
- en: In directed graphs, or digraphs, there is a specified direction between the
    nodes. The edge between nodes 1 and 2 is directed from 1 toward 2 (*Figure 6**.5*)
    and a link directed toward 1 from 2 would not be permitted. In other words, the
    edges between nodes are unidirectional.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在有向图（或称为有向图）中，节点之间有一个指定的方向。从节点 1 到节点 2 的边是从 1 指向 2（*图 6.5*），而从 2 指向 1 的链接是不允许的。换句话说，节点之间的边是单向的。
- en: Weighted graphs
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 带权图
- en: If the edge between two nodes or vertices has an associated weight to represent
    implications such as distance or cost, the corresponding graph is said to be weighted.
    Weighted graphs can be either directed or undirected (*Figure 6**.6*). Weighted
    graphs are applicable to many real-world scenarios, for example, search engines
    comparing flight times and cost or route planning.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果两个节点或顶点之间的边有一个相关的权重，用来表示如距离或成本等含义，那么这个图就称为加权图。加权图可以是有向的也可以是无向的（*图 6.6*）。加权图适用于许多现实世界的场景，例如搜索引擎比较航班时间和成本或路径规划。
- en: '![Figure 6.6: Undirected weighted graph (L) and directed weighted graph (R)](img/Figure_06_07_B18943.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.6：无向加权图 (L) 和有向加权图 (R)](img/Figure_06_07_B18943.jpg)'
- en: 'Figure 6.6: Undirected weighted graph (L) and directed weighted graph (R)'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.6：无向加权图 (L) 和有向加权图 (R)
- en: Any graph can be represented mathematically through an adjacency matrix, which
    describes all permitted routes or paths between nodes in the graph. An adjacency
    matrix for a directed graph is shown in *Figure 6**.7a*, and that of an undirected
    graph is illustrated in *Figure 6**.7b*.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 任何图都可以通过邻接矩阵进行数学表示，邻接矩阵描述了图中节点之间所有允许的路径或路线。有向图的邻接矩阵见*图 6.7a*，而无向图的邻接矩阵见*图 6.7b*。
- en: '![Figure 6.7a: Adjacency matrix of a directed graph](img/Figure_06_08_B18943.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.7a：有向图的邻接矩阵](img/Figure_06_08_B18943.jpg)'
- en: 'Figure 6.7a: Adjacency matrix of a directed graph'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.7a：有向图的邻接矩阵
- en: We know by now that graphs make networks more interpretable and easier to visualize.
    More computer memory is consumed by an adjacency matrix for a bigger graph (more
    nodes) like the one of the weighted graph shown in *Figure 6**.7c*.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们知道图能够使网络更具可解释性并更易于可视化。对于一个更大的图（更多节点），邻接矩阵消耗更多计算机内存，像图中显示的加权图就是一个例子（*图
    6.7c*）。
- en: '![Figure 6.7b: Adjacency matrix of an undirected graph](img/Figure_06_09_B18943.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.7b：无向图的邻接矩阵](img/Figure_06_09_B18943.jpg)'
- en: 'Figure 6.7b: Adjacency matrix of an undirected graph'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.7b：无向图的邻接矩阵
- en: '![Figure 6.7c: Adjacency matrix of a weighted (directed) graph](img/Figure_06_10_B18943.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.7c：有向加权图的邻接矩阵](img/Figure_06_10_B18943.jpg)'
- en: 'Figure 6.7c: Adjacency matrix of a weighted (directed) graph'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.7c：有向加权图的邻接矩阵
- en: Most adjacency matrices are sparse; that is, the graphs are not densely connected,
    making computations harder.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数邻接矩阵是稀疏的；也就是说，图的连接不是非常密集，这使得计算变得更加困难。
- en: Now that we have explored the different graphs, we will investigate a use case
    of an optimization problem solved using graph theory.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经探索了不同的图，我们将研究一个使用图论解决的优化问题的应用场景。
- en: Optimization use case
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 优化应用场景
- en: Graphs can be used to model relations and processes in physical, biological,
    and information systems. They have a wide range of applications, such as ranking
    hyperlinks in search engines, the study of biomolecules, computer network security,
    GPS in maps to find the shortest route, and social network analysis. There are
    knowledge graphs for information mining as well. In the following subsection,
    we pick a dataset and formulate the problem in a way that is solved using graph
    theory.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图可以用于建模物理、生物和信息系统中的关系和过程。它们有广泛的应用，如搜索引擎中超链接的排名、生物分子研究、计算机网络安全、地图中的 GPS 寻找最短路线以及社交网络分析。还有用于信息挖掘的知识图谱。接下来的子节中，我们选择一个数据集并以一种利用图论解决的问题的方式来表达它。
- en: Optimization problem
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 优化问题
- en: 'There can be multiple paths between origin and destination airports. An airline
    seeks the shortest possible path between airports, wherein the shortest path can
    be defined in terms of either distance or airtime. If the city airports are represented
    as nodes and the flight routes between them as edges, we convert the problem into
    a graph (*Figure 6**.8a*). The dataset can be found in the GitHub repository:
    [https://github.com/ranja-sarkar/graphs](http://ebay.co.uk).'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 起点和终点机场之间可能有多条路径。航空公司寻求机场之间的最短路径，其中最短路径可以通过距离或飞行时间来定义。如果将城市机场表示为节点，航班路线表示为边，我们就将问题转化为一个图（*图
    6.8a*）。数据集可以在 GitHub 仓库中找到：[https://github.com/ranja-sarkar/graphs](http://ebay.co.uk)。
- en: '![Figure 6.8a: Network (flight routes) between origin (city) airport and destination
    (city) airport](img/Figure_06_11_B18943.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.8a：起点（城市）机场与终点（城市）机场之间的网络（航班路线）](img/Figure_06_11_B18943.jpg)'
- en: 'Figure 6.8a: Network (flight routes) between origin (city) airport and destination
    (city) airport'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.8a：起点（城市）机场与终点（城市）机场之间的网络（航班路线）
- en: We can identify the shortest (minimum airtime or minimum distance) possible
    path between any two city airports from the graph. Example code in Python to arrive
    at the solution is explained in the following subsection.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从图中识别出任何两个城市机场之间可能的最短路径（最小空中时间或最小距离）。实现此解决方案的Python示例代码将在下一个小节中进行讲解。
- en: Optimized solution
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 优化解决方案
- en: The dataset, a sample of which is displayed in *Figure 6**.8b*, has records
    of flights in January 2017 from the USA out of the origin (source) city, which
    is given by `Origin`, to the destination city, which is given by `Dest`. The distance
    between the origin and destination and the airtime of the flight are the most
    relevant variables required to find the optimized solution.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 数据集，其中一部分显示在*图 6**.8b*中，包含2017年1月从美国起飞的航班记录，从源城市（`Origin`）到目的城市（`Dest`）。源和目的地之间的距离以及航班的空中时间是寻找优化解决方案所需的最相关变量。
- en: '![Figure 6.8b: Dataset for the case study](img/Figure_06_12_B18943.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.8b：案例研究的数据集](img/Figure_06_12_B18943.jpg)'
- en: 'Figure 6.8b: Dataset for the case study'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.8b：案例研究的数据集
- en: 'You can have a look at the nodes and edges of the corresponding graph resulting
    from executing the code. The graph (network) of flights is shown in Figure 6.8a:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以查看执行代码后生成的相应图的节点和边。航班的图（网络）如图 6.8a所示：
- en: '[PRE0]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'A passenger wishing to take the shortest route from `LAS` (Las Vegas) to `PBI`
    (Palm Beach in Florida) with respect to the distance and airtime metrics can run
    the piece of code (consuming Dijkstra’s shortest-path algorithm contained in the
    NetworkX Python library) and self-serve or decide on the best route:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 希望根据距离和空中时间指标从`LAS`（拉斯维加斯）到`PBI`（佛罗里达州的棕榈滩）走最短路线的乘客，可以运行这段代码（使用NetworkX Python库中的Dijkstra最短路径算法）来自助服务或决定最佳路线：
- en: '[PRE1]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The shortest path between `LAS` and `PBI` based on distance is shown in the
    output in *Figure 6**.9a*.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`LAS`和`PBI`之间基于距离的最短路径如*图 6**.9a*所示。'
- en: '![Figure 6.9a: Output when the model parameter is distance](img/Figure_06_13_B18943.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.9a：当模型参数为距离时的输出](img/Figure_06_13_B18943.jpg)'
- en: 'Figure 6.9a: Output when the model parameter is distance'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.9a：当模型参数为距离时的输出
- en: The shortest path based on airtime is shown in *Figure 6**.9b*.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 基于空中时间的最短路径如*图 6**.9b*所示。
- en: '![Figure 6.9b: Output when the model parameter is airtime](img/Figure_06_14_B18943.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.9b：当模型参数为空中时间时的输出](img/Figure_06_14_B18943.jpg)'
- en: 'Figure 6.9b: Output when the model parameter is airtime'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.9b：当模型参数为空中时间时的输出
- en: The algorithm creates the shortest path set first by picking the vertex closest
    to the source vertex, then a vertex from the remaining ones closest to the source.
    This continues until the set includes all vertices/nodes. Graph theory can therefore
    be applied to travel planning and finding the best route to deliver post, among
    other usages. The mathematical formulation of graphs is intuitive and comprehensive.
    In the next section, we will introduce **graph neural networks** (**GNNs**), which
    will involve diving into **deep** **learning** (**DL**).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 该算法首先通过选择距离源顶点最近的顶点来创建最短路径集合，然后从剩余的顶点中选择一个离源顶点最近的顶点。直到集合中包含所有顶点/节点为止。因此，图论可以应用于旅行规划和寻找最佳邮递路线等方面。图的数学公式直观且全面。在接下来的部分中，我们将介绍**图神经网络**（**GNNs**），并深入探讨**深度学习**（**DL**）。
- en: Graph neural networks
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图神经网络
- en: DL algorithms make use of graphs to predict at the level of nodes, edges, or
    entire graphs. In node classification, the label of samples (nodes) is determined
    by looking at the labels of neighbors. In graph classification, the entire graph
    is classified into different categories, an example being categorizing documents
    using natural language processing. The relationships (edges) between nodes or
    entities are utilized in recommendation systems. Image and text are types of structured
    data that can be described as grids of pixels and sequences of words, respectively.
    These are shown in *Figure 6**.10a*. Graphs, in contrast, are unstructured data.
    Graphs can contain any kind of data, including images and text.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 深度学习算法利用图来进行节点、边或整个图的预测。在节点分类中，通过查看邻居的标签来确定样本（节点）的标签。在图分类中，整个图被分类到不同的类别中，一个例子是使用自然语言处理对文档进行分类。节点或实体之间的关系（边）被推荐系统利用。图像和文本是结构化数据的类型，分别可以描述为像素网格和单词序列。这些都显示在*图
    6**.10a*中。相比之下，图是非结构化数据。图可以包含任何类型的数据，包括图像和文本。
- en: '![](img/Figure_06_15_B18943.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_06_15_B18943.jpg)'
- en: 'Figure 6.10a: Structured data (L) as opposed to graphs/networks (R)'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.10a：结构化数据（左）与图/网络（右）
- en: GNNs organize graphs using a process called message passing so that DL algorithms
    can use the embedded information about the neighbors of each node to find patterns
    and make predictions. Typically, the input to a GNN pipeline (*Figure 6**.10b*)
    is a defined graph structure with its type and scale.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: GNN通过一种叫做消息传递的过程来组织图，这样深度学习算法可以利用每个节点邻居的信息来寻找模式并做出预测。通常，GNN管道的输入（*图6.10b*）是一个定义好的图结构，带有其类型和规模。
- en: '![Figure 6.10b: GNN has a graph as an input](img/Figure_06_16_B18943.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图6.10b：GNN以图作为输入](img/Figure_06_16_B18943.jpg)'
- en: 'Figure 6.10b: GNN has a graph as an input'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.10b：GNN以图作为输入
- en: In graph theory, the concept of node embedding is implemented, meaning mapping
    nodes to a lower dimensional (than the actual dimension) space so that similar
    nodes in the graph are close to each other. *Figure 6**.11* illustrates how information
    from the input graph will propagate to the outside of the neural networks (gray
    boxes). Therefore, the aggregation of information takes multiple (three here)
    layers. A model can be trained by supervised and unsupervised means. In the latter,
    only the graph structure is used and similar nodes have similar embeddings. The
    former is used for a supervised task such as node classification.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在图论中，节点嵌入的概念被实现，即将节点映射到比实际维度更低的空间，以使图中相似的节点靠得更近。*图6.11*说明了输入图中的信息如何传播到神经网络的外部（灰色框）。因此，信息的聚合需要多层（这里是三层）。一个模型可以通过有监督和无监督的方法进行训练。在后者中，仅使用图结构，相似的节点具有相似的嵌入。前者用于诸如节点分类等有监督任务。
- en: '![Figure 6.11: Propagation of information](img/Figure_06_17_B18943.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图6.11：信息传播](img/Figure_06_17_B18943.jpg)'
- en: 'Figure 6.11: Propagation of information'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.11：信息传播
- en: GNN architectures are used in image and text classification problems. They are
    also used in relation (semantic) extraction. They have become powerful tools in
    recent years for any problem that can be modeled by graphs.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: GNN架构用于图像和文本分类问题。它们还用于关系（语义）提取。在近年来，它们已成为可以通过图模型化的任何问题的强大工具。
- en: Summary
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about a theory that is helpful in simplifying and
    quantifying complex connected systems called networks. Graph theory is the study
    of relationships (represented as edges in graphs) between dynamic entities and
    helps better interpret network models. We further elaborated (with Python code)
    on how an optimization problem can be mathematically formulated and solved using
    this concept. A lot of problems can be approached using a graph framework that
    involves the components of mathematical optimization, as discussed in a section
    of this chapter.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了一种有助于简化和量化复杂连接系统的理论，这些系统被称为网络。图论研究的是动态实体之间的关系（在图中表示为边），并有助于更好地解释网络模型。我们进一步阐述了（通过Python代码）如何利用这个概念将优化问题进行数学建模并求解。许多问题可以通过使用图框架来处理，其中涉及数学优化的组成部分，这一点在本章的某一部分中进行了讨论。
- en: This chapter also introduced GNNs, which operate on the structure and property
    of a graph. A single property is predicted for an entire graph for a graph-level
    task, a property of each node is predicted for a node-level task, and the property
    of each existing edge in a graph is predicted abstractly an edge-level task. GNNs
    are applied when graphs are complex and deep.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 本章还介绍了GNN，它们在图的结构和属性上进行操作。对于图级任务，预测整个图的单一属性；对于节点级任务，预测每个节点的属性；对于边级任务，抽象地预测图中每个现有边的属性。GNN在图复杂且深时得到应用。
- en: In the next chapter, we will study the Kalman filter, which is one of the most
    efficient estimation algorithms. It provides a recursive computation method to
    estimate the (unknown) state of a discrete data-controlled process by using a
    series of measurements that are typically noisy, as well as calculating the uncertainty
    in measurement. Kalman filtering is a concept applied to topics such as signal
    processing, wherein the variables of interest which cannot be directly measured
    are indirectly measured.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习卡尔曼滤波器，这是最有效的估计算法之一。它提供了一种递归计算方法，通过使用一系列通常带有噪声的测量数据，估计离散数据控制过程的（未知）状态，并计算测量的不确定性。卡尔曼滤波是应用于信号处理等领域的一个概念，在这些领域中，无法直接测量的感兴趣变量通过间接方式被测量。
