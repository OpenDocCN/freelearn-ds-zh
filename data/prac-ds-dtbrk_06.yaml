- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Model Versioning and Webhooks
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模型版本控制和Webhooks
- en: In the previous chapter, we delved deep into the capabilities of **Databricks
    AutoML**, exploring its various components in detail. We gained a comprehensive
    understanding of how data science practitioners can harness the power of transparent
    “glass box” AutoML to kickstart their machine learning solutions seamlessly, especially
    when tackling complex business challenges.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章，我们深入探讨了**Databricks AutoML**的功能，详细分析了其各个组件。我们全面了解了数据科学从业者如何利用透明的“玻璃盒”AutoML的强大功能，顺利启动机器学习解决方案，特别是在应对复杂的商业挑战时。
- en: Furthermore, we put AutoML into action by automating the selection of a candidate
    model for our **Bank Customer Churn** prediction classification problem. To facilitate
    this process, we seamlessly integrated the robust MLflow features into our workflow.
    This integration allowed us to meticulously track every aspect of our model’s
    training, providing us with invaluable insights into its performance and enabling
    us to make data-driven decisions. Our journey also took us to the MLflow tracking
    server, where we logged and monitored the entire training process, ensuring that
    our Bank Customer Churn prediction project was executed with precision and efficiency.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们通过自动化选择候选模型来将AutoML投入实践，解决我们的**银行客户流失**预测分类问题。为了促进这一过程，我们将强大的MLflow功能无缝集成到我们的工作流程中。这一集成让我们能够细致地跟踪模型训练的各个方面，提供了关于模型性能的宝贵见解，并使我们能够做出数据驱动的决策。我们的旅程还将我们带到了MLflow跟踪服务器，在那里我们记录并监控了整个训练过程，确保我们的银行客户流失预测项目高效且精准地执行。
- en: In this chapter, we will look into the next steps on how we can take a model
    from the **MLflow tracking server** and utilize the integrated **MLflow Model
    Registry** to manage the model life cycle.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，我们将探讨如何从**MLflow跟踪服务器**获取模型，并利用集成的**MLflow模型注册表**来管理模型生命周期的下一步操作。
- en: 'We will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将覆盖以下主题：
- en: Understanding the need for the Model Registry
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解模型注册表的必要性
- en: Registering your candidate model to the Model Registry and managing access
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将候选模型注册到模型注册表并管理访问权限
- en: Managing the ML model life cycle using the Model Registry
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用模型注册表管理ML模型生命周期
- en: Diving into the **Webhooks** support in the Model Registry
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 深入了解**Webhooks**在模型注册表中的支持
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'Let’s go through the technical requirements for this chapter:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看本章的技术要求：
- en: All the previous notebooks, already executed as described
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有前面的笔记本，已经按描述执行过
- en: A Slack workspace where you have webhooks enabled for a channel ([https://api.slack.com/messaging/webhooks](https://api.slack.com/messaging/webhooks))
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个启用了Webhooks的Slack工作区，用于某个频道（[https://api.slack.com/messaging/webhooks](https://api.slack.com/messaging/webhooks)）
- en: Understanding the need for the Model Registry
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解模型注册表的必要性
- en: In traditional software engineering, the concept of a central code repository
    is well established and mature. However, in the realm of data science, the idea
    of a centralized model repository is still evolving. While it’s not accurate to
    say that no central repository for models exists – there are indeed other tools
    and platforms that offer similar functionalities – the challenges in model management
    are unique and often more complex.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在传统的软件工程中，中央代码仓库的概念已经相当成熟。然而，在数据科学领域，集中式模型仓库的概念仍在发展之中。虽然不能说不存在中央模型仓库——实际上确实有其他工具和平台提供类似的功能——但模型管理中的挑战是独特的，往往更加复杂。
- en: This is where Databricks’ integrated MLflow Model Registry shines, particularly
    in fostering collaboration among data science teams.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这正是Databricks集成的MLflow模型注册表的亮点，特别是在促进数据科学团队之间的协作方面。
- en: 'Key features of the Model Registry include the following:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 模型注册表的主要功能包括：
- en: '**Centralized discovery**: The Model Registry serves as a centralized hub where
    models from various data science teams are registered. Each registered model has
    a lineage that traces back to the original run and the notebook version in which
    the model was trained, making it easier for teams to collaborate.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集中式发现**：模型注册表作为一个集中的中心，注册了来自各个数据科学团队的模型。每个注册的模型都有一个可追溯到原始运行和模型训练时使用的笔记本版本的血统，使团队之间的协作变得更加容易。'
- en: '**Life cycle management**: Databricks provides both UI and API options for
    managing the life cycle of your models, streamlining the process of promoting
    a model from one stage to another.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生命周期管理**：Databricks 提供了 UI 和 API 选项来管理模型的生命周期，从而简化了将模型从一个阶段提升到另一个阶段的过程。'
- en: '**Automated testing and deployment**: The Model Registry allows you to deploy
    different versions of a model to various stages. You can also attach notes and
    perform tests on these models in an automated fashion, ensuring that only the
    most robust models make it to production.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化测试与部署**：模型注册表允许你将不同版本的模型部署到各个阶段。你还可以附加备注并以自动化的方式对这些模型进行测试，确保只有最强健的模型进入生产环境。'
- en: '**Access control**: Robust permissioning features govern who can access, modify,
    or deploy a registered model, thereby ensuring that only authorized individuals
    can interact with your models.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**访问控制**：强大的权限功能控制谁可以访问、修改或部署已注册的模型，从而确保只有授权人员能够与模型进行交互。'
- en: Now, let’s take a look at how you can register a model in the Model Registry.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何将模型注册到模型注册表。
- en: Registering your candidate model to the Model Registry and managing access
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将你的候选模型注册到模型注册表并管理访问权限
- en: You can either use the UI to register a candidate model to the integrated Model
    Registry or use the MLflow Model Registry API.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 UI 将候选模型注册到集成的模型注册表，或者使用 MLflow 模型注册表 API。
- en: 'Let’s take a look at the UI option first:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先看看 UI 选项：
- en: 'We will first navigate to the MLflow experiment created by our AutoML execution.
    We can navigate here by clicking on the **Experiments** tab in the left navigation
    bar:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先导航到由我们的 AutoML 执行创建的 MLflow 实验。我们可以通过点击左侧导航栏中的**实验**标签来导航到此页面：
- en: '![Figure 6.1 – How to access the Experiments page](img/B17875_06_001.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.1 – 如何访问实验页面](img/B17875_06_001.jpg)'
- en: Figure 6.1 – How to access the Experiments page
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.1 – 如何访问实验页面
- en: 'Next, we select our experiment from the list:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们从列表中选择我们的实验：
- en: '![Figure 6.2 – The experiment listed in the integrated MLflow tracking server
    created by AutoML](img/B17875_06_002.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.2 – AutoML 创建的集成 MLflow 跟踪服务器中列出的实验](img/B17875_06_002.jpg)'
- en: Figure 6.2 – The experiment listed in the integrated MLflow tracking server
    created by AutoML
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.2 – AutoML 创建的集成 MLflow 跟踪服务器中列出的实验
- en: 'Now we have access to all the runs that were executed as part of our AutoML
    execution. Here, we can sort the runs in the UI to get the best F1 score:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以访问作为 AutoML 执行的一部分所执行的所有运行。在这里，我们可以在 UI 中对运行进行排序，获取最佳的 F1 分数：
- en: '![Figure 6.3 – Various models and runs associated with the AutoML experiment
    sorted by F1 score](img/B17875_06_003.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.3 – 根据 F1 分数排序的与 AutoML 实验相关的各种模型和运行](img/B17875_06_003.jpg)'
- en: Figure 6.3 – Various models and runs associated with the AutoML experiment sorted
    by F1 score
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.3 – 根据 F1 分数排序的与 AutoML 实验相关的各种模型和运行
- en: 'Next, we select the model that is listed as the first option in the list. In
    my case, this is the `sklearn` model based on LightGBM:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们选择列表中的第一个选项。在我的情况下，这是基于 LightGBM 的 `sklearn` 模型：
- en: '![Figure 6.4 – How to look at and access the logged model for the best run](img/B17875_06_004.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.4 – 如何查看和访问最佳运行的记录模型](img/B17875_06_004.jpg)'
- en: Figure 6.4 – How to look at and access the logged model for the best run
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.4 – 如何查看和访问最佳运行的记录模型
- en: 'Now we will end up at the MLflow **Run** page for this specific model. This
    page must be looking familiar to you as, when you scroll down, you will see the
    artifacts, metrics, and hyperparameters all logged automatically as part of our
    run (we covered this in previous chapters):'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将进入该特定模型的 MLflow **运行**页面。这个页面对你来说一定很熟悉，因为当你向下滚动时，你会看到所有的工件、指标和超参数都作为我们的运行的一部分自动记录下来（我们在前面的章节中讲解过这部分内容）：
- en: '![Figure 6.5 – The different artifacts automatically logged by AutoML for each
    experiment run](img/B17875_06_005.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.5 – AutoML 为每个实验运行自动记录的不同工件](img/B17875_06_005.jpg)'
- en: Figure 6.5 – The different artifacts automatically logged by AutoML for each
    experiment run
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.5 – AutoML 为每个实验运行自动记录的不同工件
- en: 'On the right side, you will see a button with the caption **Register Model**:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在右侧，你会看到一个标有**注册模型**的按钮：
- en: '![Figure 6.6 – How to register a candidate model to the Model Registry 1](img/B17875_06_06.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.6 – 如何将候选模型注册到模型注册表 1](img/B17875_06_06.jpg)'
- en: Figure 6.6 – How to register a candidate model to the Model Registry 1
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.6 – 如何将候选模型注册到模型注册表 1
- en: 'If you are using the MLflow Model Registry for the first time, you can select
    `Churn Prediction Bank`. Then, hit **Register**:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您是第一次使用 MLflow 模型注册表，您可以选择 `Churn Prediction Bank`。然后，点击**注册**：
- en: '![Figure 6.7 – How to register a candidate model to the Model Registry 2](img/B17875_06_07.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.7 – 如何将候选模型注册到模型注册表 2](img/B17875_06_07.jpg)'
- en: Figure 6.7 – How to register a candidate model to the Model Registry 2
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.7 – 如何将候选模型注册到模型注册表 2
- en: At this point, your model is registered in the Model Registry and should be
    visible if you access the **Models** page.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，您的模型已在模型注册表中注册，并且如果访问**模型**页面，应该可以看到该模型。
- en: 'You can access the **Models** page by clicking on the **Models** icon in the
    left-hand navigation tab:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过点击左侧导航栏中的**模型**图标来访问**模型**页面：
- en: '![Figure 6.8 – How to access the Model Registry](img/B17875_06_08.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.8 – 如何访问模型注册表](img/B17875_06_08.jpg)'
- en: Figure 6.8 – How to access the Model Registry
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.8 – 如何访问模型注册表
- en: 'Simply select the **Churn Prediction Bank** model from the list:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只需从列表中选择**Churn Prediction Bank**模型：
- en: '![Figure 6.9 – The registered candidate model in the Model Registry](img/B17875_06_09.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.9 – 模型注册表中已注册的候选模型](img/B17875_06_09.jpg)'
- en: Figure 6.9 – The registered candidate model in the Model Registry
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.9 – 模型注册表中已注册的候选模型
- en: 'A couple of things to observe here are as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有几个需要注意的事项如下：
- en: The latest version says **Version 1**. This is because we created a new model
    entry in the registry. If we select an existing model from the dropdown in *Step
    9*, then the version will say **Version 2** and so on.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最新版本显示为**版本 1**。这是因为我们在注册表中创建了一个新的模型条目。如果我们在*步骤 9*的下拉菜单中选择一个现有模型，那么版本将显示为**版本
    2**，以此类推。
- en: Upon clicking on **Version 1**, you will be taken to the details page of this
    version of the model and see that **Source Run** is listed as **lightgbm**, which
    is the same run that generated our best model. Also, the input and output schemas
    are inherited from the model signature in the source run automatically.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击**版本 1**后，您将进入该版本模型的详细页面，并看到**源运行**列为**lightgbm**，这与生成我们最佳模型的运行相同。此外，输入和输出模式将自动从源运行中的模型签名继承。
- en: 'You can also set tags and add a description for your model in the UI:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在用户界面中为您的模型设置标签并添加描述：
- en: '![Figure 6.10 – The details of the registered version of the candidate model
    in the Model Registry](img/B17875_06_10.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.10 – 已注册的候选模型版本详细信息](img/B17875_06_10.jpg)'
- en: Figure 6.10 – The details of the registered version of the candidate model in
    the Model Registry
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.10 – 已注册的候选模型版本详细信息
- en: By default, the stage is set to **None**. You can manage permissioning around
    who has permission to request transitioning your model from one stage to another
    using the built-in access controls.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，阶段设置为**无**。您可以通过内置的访问控制来管理谁有权限请求将模型从一个阶段转移到另一个阶段。
- en: You can set permissions at the user or group level by clicking on the **Permissions**
    tab on the page we interacted with in *Step 8*
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过点击我们在*步骤 8*中交互的页面上的**权限**标签，按用户或组级别设置权限。
- en: '![Figure 6.11 – How to add governance around model access 1](img/B17875_06_11.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.11 – 如何为模型访问添加治理 1](img/B17875_06_11.jpg)'
- en: Figure 6.11 – How to add governance around model access 1
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.11 – 如何为模型访问添加治理 1
- en: 'By default, the workspace admins and the original creator of the model have
    the **Can** **Manage** permission:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，工作区管理员和模型的原始创建者拥有**可以** **管理**的权限：
- en: '![Figure 6.12 – How to add governance around model access 2](img/B17875_06_012.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.12 – 如何为模型访问添加治理 2](img/B17875_06_012.jpg)'
- en: Figure 6.12 – How to add governance around model access 2
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.12 – 如何为模型访问添加治理 2
- en: 'You can also specify giving access or control over the model’s life cycle by
    stage. In Databricks MLflow’s Model Registry, each model version can be classified
    into one of three distinct life cycle stages: **Staging**, **Production**, or
    **Archived**. Notably, it is possible to have multiple model versions coexist
    within the same life cycle stage. This is particularly beneficial for scenarios
    such as A/B testing where parallel evaluation of different model versions is essential.
    However, this feature could present a challenge for organizations in managing
    and differentiating between multiple models at the same life cycle stage.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以指定按阶段授予对模型生命周期的访问权限或控制。在 Databricks MLflow 的模型注册表中，每个模型版本可以被分类到三个不同的生命周期阶段之一：**暂存**、**生产**或**归档**。值得注意的是，多个模型版本可以共存于同一生命周期阶段。这对于像
    A/B 测试这样的场景非常有利，其中需要并行评估不同的模型版本。然而，这一特性可能给组织在管理和区分同一生命周期阶段内的多个模型时带来挑战。
- en: To resolve this issue, MLflow offers a tagging mechanism. Tags can be applied
    to model versions to offer additional metadata, making it easier to identify,
    filter, and manage models within the same stage. If there are multiple model versions
    in the same stage, then by default, the most recent version of the model is loaded.
    However, it’s crucial to specify which model version you intend to load, particularly
    when multiple versions exist within the same stage. In [*Chapter 7*](B17875_07.xhtml#_idTextAnchor108),
    *Model Deployment Approaches*, we will delve deeper into various methods for deploying
    these staged models effectively. The user interface allows you to modify the stage
    of a model version, as illustrated in the following image.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，MLflow 提供了标签机制。可以为模型版本应用标签，以提供额外的元数据，便于在同一阶段内识别、过滤和管理模型。如果在同一阶段内有多个模型版本，默认情况下将加载最新版本的模型。然而，当同一阶段内存在多个版本时，明确指定要加载哪个模型版本是非常重要的，特别是在存在多个版本的情况下。在[*第
    7 章*](B17875_07.xhtml#_idTextAnchor108)《模型部署方法》中，我们将深入探讨如何有效地部署这些已过渡的模型。用户界面允许您修改模型版本的阶段，如下图所示。
- en: '![Figure 6.13 – Various options for model stage transition](img/B17875_06_013.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.13 – 模型阶段过渡的多种选项](img/B17875_06_013.jpg)'
- en: Figure 6.13 – Various options for model stage transition
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.13 – 模型阶段过渡的多种选项
- en: 'Click on **Request transition to**, then **Staging**. This action will send
    a notification to the owner of the model that we have requested it to be reviewed
    and requested its transition to staging. In our case, we will get this notification
    as we own the model ourselves. We can also add comments to our model transition
    request:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**请求过渡到**，然后选择**暂存**。此操作将向模型所有者发送通知，告知我们已经请求对该模型进行审查并要求其过渡到暂存阶段。在我们的案例中，由于我们拥有该模型，所以我们会收到该通知。我们还可以在模型过渡请求中添加评论：
- en: '![Figure 6.14 – Transitioning a model to staging](img/B17875_06_014.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.14 – 将模型过渡到暂存阶段](img/B17875_06_014.jpg)'
- en: Figure 6.14 – Transitioning a model to staging
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.14 – 将模型过渡到暂存阶段
- en: 'As the owner of the model, we can then read all the comments on the model and
    have the option to approve, reject, or cancel the request. On clicking **Approve**,
    our model is now transitioned into the **Staging** stage:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为模型的所有者，我们可以查看所有关于该模型的评论，并有权选择批准、拒绝或取消请求。点击**批准**后，我们的模型将被过渡到**暂存**阶段：
- en: '![Figure 6.15 – The documentation history and the ability to approve a model
    transition request](img/B17875_06_015.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.15 – 文档历史记录及批准模型过渡请求的能力](img/B17875_06_015.jpg)'
- en: Figure 6.15 – The documentation history and the ability to approve a model transition
    request
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.15 – 文档历史记录及批准模型过渡请求的能力
- en: All the aforementioned actions through the UI can be performed using the MLflow
    Python API when you want to create automated workflows for model training and
    deployments.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 通过用户界面执行的所有上述操作，也可以通过 MLflow Python API 来完成，当您想为模型训练和部署创建自动化工作流时。
- en: Let’s now look at how you can programmatically register the model into the integrated
    Model Registry and then transition to staging. Go to the notebook associated with
    `Chapter 06` and open it in the Databricks workspace.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如何通过编程方式将模型注册到集成的模型注册表中，并将其过渡到暂存阶段。前往与`第 06 章`关联的笔记本，并在 Databricks 工作区中打开它。
- en: 'In the third code cell, we programmatically retrieve the most recently modified
    experiment. The goal is to extract the best-performing model from this experiment
    based on our chosen evaluation metrics:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在第三个代码单元格中，我们通过编程方式检索最近修改的实验。目标是根据我们选择的评估指标，从这个实验中提取出表现最好的模型：
- en: '[PRE0]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In the fifth cell, we first initialize some parameters such as our existing
    username, `experiment_name`, which is the experiment’s name that’s associated
    with our AutoML, and the `registry_model_name`, which will be the model’s name
    in the Model Registry. In the earlier section, we already registered our candidate
    models using the UI in the registry under the name `MlflowClient` library imported
    from the `mlflow.tracking` package to access the best model based on `run_id`
    associated with the best model run from our MLflow tracking server:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在第五个单元格中，我们首先初始化一些参数，例如我们现有的用户名、`experiment_name`（与我们的 AutoML 相关联的实验名称），以及 `registry_model_name`（将在模型注册表中的模型名称）。在前面的部分，我们已经使用
    UI 在注册表中注册了候选模型，注册名为 `MlflowClient` 库，该库来自 `mlflow.tracking` 包，用于访问基于与最佳模型运行关联的
    `run_id` 的最佳模型：
- en: '[PRE1]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To register the model associated with the best model training run, we need
    to provide the model URI (the path to the model in our tracking server) as input
    to the MLflow registry `register_model` API. The other parameter we need to pass
    is the model’s name under which we want the new version of the model retrieved
    from the model tracking server to register. Since, for the sake of simplicity,
    we are keeping the name the same as the model name we defined in the UI, the new
    model will be registered as **version 2** in the Model Registry:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 要注册与最佳模型训练运行相关联的模型，我们需要提供模型 URI（在跟踪服务器中的模型路径），作为输入传递给 MLflow 注册表的 `register_model`
    API。我们需要传递的另一个参数是我们希望从模型跟踪服务器中检索的新版本模型的名称。为了简化起见，我们将名称保持为与 UI 中定义的模型名称相同，因此新模型将作为
    **版本 2** 注册到模型注册表中：
- en: '[PRE2]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You can also use the `MLflowClient` object to update the description or set
    tags related to a model in the registry. In `Command 9` of the notebook, we demonstrate
    how you can use the `MLflowClient` object to call the `update_registered_model`
    and `update_model_version` methods:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用 `MLflowClient` 对象来更新注册表中模型的描述或设置与模型相关的标签。在笔记本的 `Command 9` 中，我们演示了如何使用
    `MLflowClient` 对象调用 `update_registered_model` 和 `update_model_version` 方法：
- en: '[PRE3]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In `Command 11` of the notebook, we demonstrate how you can use the `transition_model_stage`
    method using the `MLflowClient` object to transition the latest model version
    to the `Staging` stage. You can also archive the earlier model as we transition
    the new model to `Staging`:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在笔记本的 `Command 11` 中，我们演示了如何使用 `MLflowClient` 对象中的 `transition_model_stage`
    方法，将最新的模型版本转换到 `Staging` 阶段。你也可以在将新模型转移到 `Staging` 阶段时归档早期的模型：
- en: '[PRE4]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Let’s now explore how to leverage the webhook events provided by the MLflow
    Model Registry to automate notifications. This will alert us whenever specific
    events related to models registered in the MLflow registry occur.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们探索如何利用 MLflow 模型注册表提供的 webhook 事件来自动化通知。当与在 MLflow 注册表中注册的模型相关的特定事件发生时，这将提醒我们。
- en: Diving into the webhooks support in the Model Registry
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入了解模型注册表中的 webhook 支持
- en: A webhook allows users to create custom callbacks to enable communication between
    web applications. Webhooks allow a system to push data into another system automatically
    when some event occurs.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Webhook 允许用户创建自定义回调，以便在 Web 应用程序之间启用通信。Webhook 使得系统在某些事件发生时，能够自动将数据推送到另一个系统。
- en: As an example, this could apply if you want to automatically trigger a notification
    on Slack when you detect a new transition request for a model in MLflow, or if
    you want to trigger a new model build when there is a new code commit in your
    version control branch.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，如果你想在检测到 MLflow 中的模型请求新转移时，自动在 Slack 上触发通知，或者当你在版本控制分支中进行新的代码提交时，自动触发新的模型构建，这种情况就适用。
- en: MLflow webhooks provide capabilities for end users to automatically listen to
    any events related to the Model Registry and trigger actions. The webhooks can
    be integrated with messaging systems such as Slack to send notifications or trigger
    CI/CD pipelines for automatically testing and deploying ML models.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: MLflow Webhook 提供了功能，允许最终用户自动监听与模型注册表相关的任何事件，并触发相应的操作。这些 webhook 可以与消息系统（如 Slack）集成，用于发送通知或触发
    CI/CD 流水线，自动测试和部署 ML 模型。
- en: You can use webhooks using the Python client or Databricks REST API.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 Python 客户端或 Databricks REST API 来使用 webhook。
- en: 'There are two different types of webhooks that are supported by the MLflow
    Model Registry based on the target:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: MLflow 模型注册表支持两种不同类型的 webhook，具体取决于目标：
- en: '**Webhooks with HTTP endpoints**: These are used when we want to send trigger
    events to an HTTP endpoint such as Slack.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**具有 HTTP 端点的 Webhook**：当我们想要将触发事件发送到像 Slack 这样的 HTTP 端点时，使用此类型的 webhook。'
- en: '**Webhooks for Databricks Jobs**: These are specifically used for sending trigger
    events to Databricks Jobs. This type of webhook is particularly useful for initiating
    automated tests on models that have been newly promoted to staging or production
    environments as part of your CI/CD process.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Databricks 作业的 Webhooks**：这些主要用于将触发事件发送到 Databricks 作业。这种类型的 webhook 对于在
    CI/CD 过程中自动启动新推送到暂存或生产环境的模型的自动化测试特别有用。'
- en: 'The following figure summarizes the workflow involving registering a model
    to the MLflow Model Registry, and how you can utilize MLflow webhooks to kick
    off Slack notifications and Databricks jobs to apply tags/comments or automate
    tests on the newly deployed model:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图示总结了将模型注册到 MLflow 模型注册表的工作流，以及如何使用 MLflow webhooks 启动 Slack 通知和 Databricks
    作业，以对新部署的模型应用标签/评论或自动化测试：
- en: '![Figure 6.16 – A typical workflow for model management using webhooks](img/B17875_06_16.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.16 – 使用 webhooks 进行模型管理的典型工作流](img/B17875_06_16.jpg)'
- en: Figure 6.16 – A typical workflow for model management using webhooks
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.16 – 使用 webhooks 进行模型管理的典型工作流
- en: Note
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Courtesy of Databricks
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢 Databricks
- en: Once a model stage transition request is filed, the HTTP webhook can be used
    to notify the user/group of users who can review the request and *approve* it.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦模型阶段转换请求被提交，HTTP webhook 可用于通知可以审查请求并*批准*它的用户/用户组。
- en: You can also set webhooks for a specific model or for all the models that are
    registered in a particular registry.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以为特定模型或为某个注册表中注册的所有模型设置 webhooks。
- en: You can read about the various supported webhook events at [https://docs.databricks.com/en/mlflow/model-registry-webhooks.html#webhook-events](https://docs.databricks.com/en/mlflow/model-registry-webhooks.html#webhook-events).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 [https://docs.databricks.com/en/mlflow/model-registry-webhooks.html#webhook-events](https://docs.databricks.com/en/mlflow/model-registry-webhooks.html#webhook-events)
    阅读有关各种支持的 webhook 事件。
- en: 'In the code example provided with this chapter, we are specifically using the
    following two events:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章提供的代码示例中，我们特别使用了以下两个事件：
- en: '`MODEL_VERSION_CREATED`: A new model version was created for the associated
    model'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MODEL_VERSION_CREATED`：为相关模型创建了一个新的模型版本'
- en: '`TRANSITION_REQUEST_CREATED`: A user requested a model version’s stage to be
    transitioned'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TRANSITION_REQUEST_CREATED`：用户请求将某个模型版本的阶段转换'
- en: To demonstrate how you can establish automated alerting for model transitions
    via Slack, you must first secure a Slack webhook URL. The following steps guide
    you through the creation of a Slack app and subsequently allow you to set up an
    incoming webhook. For an exhaustive guide on this subject, please refer to the
    official Slack API documentation on webhooks at [https://api.slack.com/messaging/webhooks](https://api.slack.com/messaging/webhooks).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示如何通过 Slack 为模型转换建立自动警报，您必须首先获取一个 Slack webhook URL。以下步骤将指导您创建一个 Slack 应用程序，并随之设置一个入站
    webhook。关于这一主题的详尽指南，请参阅官方的 Slack API 文档 [https://api.slack.com/messaging/webhooks](https://api.slack.com/messaging/webhooks)。
- en: If you’re actively running the code from the `Chapter 06` notebook, ensure that
    you have your Slack webhook URL at hand before proceeding to execute `Command
    16`.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在积极运行 `Chapter 06` 笔记本中的代码，确保在继续执行 `Command 16` 之前，您已经准备好 Slack webhook
    URL。
- en: Note
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: One thing to remember here is that the REST endpoints we are going to hit for
    creating a new registry webhook, deleting webhooks, listing webhooks, and more
    are only available on Databricks and not on the open source MLflow. You can read
    more about the Databricks REST API specification for MLflow at [https://docs.databricks.com/dev-tools/api/latest/mlflow.html#operation/get-registered-model](https://docs.databricks.com/dev-tools/api/latest/mlflow.html#operation/get-registered-model).
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这里需要记住的一点是，我们将要访问的用于创建新的注册表 webhook、删除 webhooks、列出 webhooks 等 REST 端点仅在 Databricks
    上可用，而在开源的 MLflow 中不可用。您可以在 [https://docs.databricks.com/dev-tools/api/latest/mlflow.html#operation/get-registered-model](https://docs.databricks.com/dev-tools/api/latest/mlflow.html#operation/get-registered-model)
    阅读更多关于 Databricks REST API 规范的信息。
- en: Let's proceed with our review of the notebook located in the `Chapter 06` folder.
    We'll now delve into the details of utilizing webhooks to automatically send notifications
    to a Slack channel when specific events occur within the model registry concerning
    your registered model
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续查看位于 `Chapter 06` 文件夹中的笔记本。我们将深入探讨如何利用 webhooks 在模型注册表中当特定事件发生时，自动向 Slack
    渠道发送通知。
- en: 'In `Command 15`, we specified a code block that provides utility functions
    to interact with MLflow’s REST API. It initializes an MLflow client and fetches
    host and token credentials for authentication. The `mlflow_call_endpoint` function
    is designed to make HTTP calls to a specified MLflow API endpoint using either
    `GET` or other HTTP methods. It accepts an API endpoint, an HTTP method, and an
    optional JSON payload as arguments, and returns a JSON response as a dictionary.
    The script also handles exceptions, printing an error message if the API call
    fails:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Command 15`中，我们指定了一个代码块，提供了与MLflow的REST API进行交互的实用功能。它初始化了一个MLflow客户端并获取主机和令牌凭证用于身份验证。`mlflow_call_endpoint`函数旨在使用`GET`或其他HTTP方法向指定的MLflow
    API端点发出HTTP调用。它接受API端点、HTTP方法和一个可选的JSON有效负载作为参数，并将返回一个以字典形式表示的JSON响应。该脚本还处理异常，如果API调用失败，将打印错误信息：
- en: '[PRE5]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In `Command 16`, assign the value of the `slack_webhook` variable to the webhook
    link for your Slack channel:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Command 16`中，将`slack_webhook`变量的值分配给你Slack频道的Webhook链接：
- en: '[PRE6]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Execute `Command 17` and `Command 18`. This will register new webhooks for
    the model we registered for our **Customer Prediction Bank** problem. We will
    be notified when a new model version is created or a transition request has been
    made for a model version:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行`Command 17`和`Command 18`。这将为我们为**客户预测银行**问题注册的新模型注册新Webhook。当创建新的模型版本或对模型版本进行了转换请求时，我们将收到通知：
- en: '[PRE7]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `http_url_spec` parameter is where you provide the URL for the HTTP webhook.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`http_url_spec`参数是你提供HTTP Webhook URL的位置。'
- en: 'Now, after this point, if you go back to your model UI or request transitioning
    a model to a new stage, you will get notified in Slack:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在此之后，如果你返回到模型UI或请求将模型转换到新阶段，你将在Slack中收到通知：
- en: '![Figure 6.17 – Automated notification received on Slack channel using Slack
    webhook](img/B17875_06_17.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![图6.17 – 使用Slack Webhook在Slack频道接收自动化通知](img/B17875_06_17.jpg)'
- en: Figure 6.17 – Automated notification received on Slack channel using Slack webhook
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.17 – 使用Slack Webhook在Slack频道接收自动化通知
- en: The notebook also demonstrates other REST API calls that can help you manage
    the webhooks.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 该笔记本还展示了其他REST API调用，这些调用可以帮助你管理Webhooks。
- en: We’ve just seen an example of how you can use webhooks for HTTP endpoints. Similarly,
    we can set up a job registry webhook. This can be used to trigger certain Databricks
    jobs you may have for testing a model or retraining a model version.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚看到一个如何使用Webhook处理HTTP端点的例子。同样，我们可以设置一个作业注册Webhook。这可以用来触发你可能用于测试模型或重新训练模型版本的某些Databricks作业。
- en: 'There are two parameters that you need to provide in job registry webhooks
    that are different from the HTTP registry webhooks: `job_spec` and `workspace_url`.
    You can kick off jobs in a workspace that is different from the one in the Model
    Registry. If you don’t define `workspace_url`, then by default, the job specification
    will be used to trigger a Databricks job in the same workspace as the Model Registry.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在工作注册Webhook中，你需要提供两个与HTTP注册Webhook不同的参数：`job_spec`和`workspace_url`。你可以在与模型注册中心不同的工作区中启动作业。如果你没有定义`workspace_url`，则默认情况下，作业规范将用于触发与模型注册中心相同工作区中的Databricks作业。
- en: Summary
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we covered how you can utilize the Databricks Model Registry
    to manage ML model versioning and life cycles. We also learned how you can manage
    ML model versioning using the MLflow Model Registry and transition models from
    one stage to another while managing access control. We then learned how you can
    use MLflow-supported webhook callbacks to set up automated Slack notifications
    to track changes around models in your Model Registry.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了如何利用Databricks模型注册中心来管理ML模型的版本控制和生命周期。我们还学习了如何使用MLflow模型注册中心来管理ML模型的版本，并在管理访问控制的同时，将模型从一个阶段转换到另一个阶段。接着，我们了解了如何使用MLflow支持的Webhook回调设置自动化Slack通知，以便跟踪模型注册中心中的模型变更。
- en: In the next chapters, we will cover various model deployment approaches.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将介绍各种模型部署方法。
- en: Further reading
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'The following are some links to further your understanding:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些进一步帮助理解的链接：
- en: 'Databricks, *Databricks* *AutoML*: [https://docs.databricks.com/applications/machine-learning/automl.html#databricks-automl](https://docs.databricks.com/applications/machine-learning/automl.html#databricks-automl)'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Databricks，*Databricks* *AutoML*：[https://docs.databricks.com/applications/machine-learning/automl.html#databricks-automl](https://docs.databricks.com/applications/machine-learning/automl.html#databricks-automl)
- en: 'Databricks, *Job registry webhook example* *workflow*: [https://docs.databricks.com/applications/mlflow/model-registry-webhooks.html#job-registry-webhook-example-workflow](https://docs.databricks.com/applications/mlflow/model-registry-webhooks.html#job-registry-webhook-example-workflow)'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Databricks，*作业注册 Webhook 示例* *工作流*：[https://docs.databricks.com/applications/mlflow/model-registry-webhooks.html#job-registry-webhook-example-workflow](https://docs.databricks.com/applications/mlflow/model-registry-webhooks.html#job-registry-webhook-example-workflow)
- en: 'Slack, *Sending messages using incoming* *Webhooks*: [https://api.slack.com/messaging/webhooks#enable_webhook](https://api.slack.com/messaging/webhooks#enable_webhook)'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Slack，*使用传入的* *Webhooks 发送消息*：[https://api.slack.com/messaging/webhooks#enable_webhook](https://api.slack.com/messaging/webhooks#enable_webhook)
