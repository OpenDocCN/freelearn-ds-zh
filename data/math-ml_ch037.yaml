- en: Appendix C
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录 C
- en: Basics of Set Theory
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 集合论基础
- en: In other words, general set theory is pretty trivial stuff really, but, if you
    want to be a mathematician, you need some and here it is; read it, absorb it,
    and forget it. — Paul R. Halmos
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 换句话说，一般的集合理论其实非常基础，但如果你想成为一名数学家，你需要了解它，这里有它；读一读，吸收它，然后忘掉它。——保罗·哈尔莫斯
- en: 'Although Paul Halmos said the above a long time ago, it has remained quite
    accurate. Except for one part: set theory is not only necessary for mathematicians,
    but for computer scientists, data scientists, and software engineers as well.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然保罗·哈尔莫斯很久以前说过上述话，但它依然非常准确。只有一个部分已经过时：集合论不仅对数学家必要，对于计算机科学家、数据科学家和软件工程师同样重要。
- en: You might have heard about or studied set theory before. It is hard to see why
    it is so essential for machine learning, but trust me, set theory is the very
    foundation of mathematics. Deep down, everything is a set or a function between
    sets. (As we saw in Chapter [9](ch017.xhtml#functions), even functions are defined
    as sets.)
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能以前听说过或学习过集合论。可能很难理解它为何对机器学习如此重要，但相信我，集合论是数学的基础。深层次来看，一切都是集合，或者是集合之间的函数。（正如我们在第[9](ch017.xhtml#functions)章看到的，甚至函数也可以定义为集合。）
- en: Think about the relation of set theory and machine learning like grammar and
    poetry. To write beautiful poetry, one needs to be familiar with the rules of
    the language. For example, data points are represented as vectors in vector spaces,
    often constructed as the Cartesian product of sets. (Don’t worry if you are not
    familiar with Cartesian products, we’ll get there soon.) Or, to really understand
    probability theory, you need to be familiar with event spaces, which are systems
    of sets closed under certain operations.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 可以将集合论与机器学习的关系比作语法与诗歌的关系。要写出优美的诗歌，一个人需要熟悉语言的规则。例如，数据点在向量空间中表示为向量，通常是通过集合的笛卡尔积构造的。（如果你不熟悉笛卡尔积，不用担心，我们很快会讲到的。）或者，要真正理解概率论，你需要熟悉事件空间，它是一些在特定操作下封闭的集合系统。
- en: So, what are sets anyway?
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，集合到底是什么呢？
- en: C.1 What is a set?
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: C.1 什么是集合？
- en: On the surface level, a set is just a collection of things. We define sets by
    enumerating their elements like
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 从表面上看，集合只是一个事物的集合。我们通过列举其元素来定义集合，例如
- en: '![S = {red,green,♡}. ](img/file2160.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![S = {红色，绿色，♡}. ](img/file2160.png)'
- en: Two sets are equal if they have the same elements. Given any element, we can
    always tell if it is a member of a given set or not. When every element of A is
    also an element of B, we say that A is a subset of B, or, in notation,
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果两个集合具有相同的元素，则这两个集合相等。给定任何元素，我们总是能判断它是否是某个集合的成员。当A的每个元素也是B的元素时，我们说A是B的子集，或者用符号表示为，
- en: '![A ⊆ B. ](img/file2161.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![A ⊆ B. ](img/file2161.png)'
- en: If A ⊆B and A≠B, we say that A is a proper subset of B and write A ⊂B. If we
    have a set, we can define subsets by specifying a property that all of its elements
    satisfy, for example,
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果A ⊆B且A≠B，我们说A是B的真子集，并写作A ⊂B。如果我们有一个集合，我们可以通过指定所有元素满足的某个属性来定义子集，例如，
- en: '![even numbers = {n ∈ ℤ : n%2 = 0}. ](img/file2162.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![偶数 = {n ∈ ℤ : n%2 = 0}. ](img/file2162.png)'
- en: '(The % denotes the modulo operator.) This latter method is called the set-builder
    notation, and if you are familiar with the Python programming language, you can
    see this inspired list comprehensions. There, one would write something like this:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: （%表示取模运算符。）这种方法被称为集合构造符号，如果你熟悉Python编程语言，你可以看到它启发了列表推导式。在那里，人们会写出类似这样的代码：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We can even describe sets as a collection of other sets, say, the set of all
    subsets of A. This is called the power set, a concept so essential that it deserves
    its own formal definition.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至可以将集合描述为其他集合的集合，比如，A的所有子集的集合。这称为幂集，是一个如此重要的概念，值得为其单独定义。
- en: Definition 108\. (Power sets)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 定义 108. （幂集）
- en: Let A be an arbitrary set. The set defined by
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 设A为任意集合。由以下定义的集合
- en: '![2A := {B : B ⊆ A}, ](img/file2163.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![2A := {B : B ⊆ A}, ](img/file2163.png)'
- en: containing all subsets of A, is called the power set of A.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 包含A的所有子集的集合称为A的幂集。
- en: Both ∅ and A are elements of the power set 2^A.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: ∅和A都是幂集2^A的元素。
- en: Unfortunately, defining sets as a collection of elements does not work. Without
    further conditions, it can lead to paradoxes, as the famous Russell paradox shows.
    (We’ll talk about this later in this chapter.) To avoid going down the rabbit
    hole of set theory, we accept that sets have some proper definition buried within
    a thousand-page-sized tome of mathematics. Instead of worrying about this, we
    focus on what we can do with sets.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，定义集合为元素的集合并不可行。没有更多的条件，它可能导致悖论，正如著名的罗素悖论所示。（我们将在本章后面讨论这个问题。）为了避免深入集合论的困境，我们接受集合有某种正式的定义，这个定义埋藏在数学的千页大书中。与其担心这些，不如专注于我们可以用集合做些什么。
- en: C.2 Operations on sets
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: C.2 集合运算
- en: Describing more complex sets with only these two methods (listing their members
    or using the set-builder notation) is extremely difficult. To make the job easier,
    we define operations on sets.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 仅用这两种方法（列出成员或使用集合构造符号）描述更复杂的集合是非常困难的。为了简化工作，我们定义了集合上的运算。
- en: C.2.1 Union, intersection, difference
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: C.2.1 并集、交集、差集
- en: The most basic operations are the union, intersection, and difference. You are
    probably familiar with these, as they are encountered frequently as early as high
    school. Even if you are familiar with them, check out the formal definition next.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 最基本的运算是并集、交集和差集。你可能对这些比较熟悉，因为它们在高中时就经常遇到。即使你已经熟悉了它们，接下来还是看看正式的定义吧。
- en: Definition 109\. (Set operations)
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 定义 109.（集合运算）
- en: Let A and B be two sets. We define
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 设A和B为两个集合。我们定义
- en: '(a) their union by A ∪B := {x : x ∈A or x ∈B},'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '(a) 它们的并集由 A ∪B := {x : x ∈A 或 x ∈B} 定义，'
- en: '(b) their intersection by A ∩B := {x : x ∈A and x ∈B},'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '(b) 它们的交集由 A ∩B := {x : x ∈A 且 x ∈B} 定义，'
- en: '(c) and their difference by A ∖B := {x : x ∈A and x![∈∕](img/file2164.png)B}.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '(c) 它们的差集由 A ∖B := {x : x ∈A 且 x![∈∕](img/file2164.png)B} 定义。'
- en: We can easily visualize these with Venn diagrams, as you can see below.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过文氏图轻松地可视化这些运算，如下所示。
- en: '![PIC](img/file2165.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![PIC](img/file2165.png)'
- en: 'Figure C.1: Set operations visualized in Venn diagrams'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图C.1：通过文氏图可视化的集合运算
- en: We can express set operations in plain English as well. For example, A∪B means
    “A or B.” Similarly, A ∩B means “A and B,” while A ∖B is “A but not B.” When talking
    about probabilities, these will be useful for translating events to the language
    of set theory.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以用简单的英语表达集合运算。例如，A∪B表示“A或B”。类似地，A ∩B表示“A且B”，而A ∖B表示“A但不是B”。在谈到概率时，这些表达将有助于将事件转化为集合论的语言。
- en: These set operations also have a lot of pleasant properties.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这些集合运算也有许多愉快的性质。
- en: For example, they behave nicely with respect to parentheses.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，它们在括号方面表现良好。
- en: Theorem 152\.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 定理 152\。
- en: Let A, B, and C be three sets. The union operation is
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 设A、B和C为三个集合。并集操作是
- en: (a) associative, that is, A ∪ (B ∪C) = (A ∪B) ∪C,
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: (a) 结合性，即A ∪ (B ∪C) = (A ∪B) ∪C，
- en: (b) commutative, that is, A ∪B = B ∪A.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: (b) 交换性，即A ∪B = B ∪A。
- en: Moreover, the intersection operation is also associative and commutative. Finally,
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，交集运算也是结合性和交换性的。最后，
- en: (c) the union is distributive with respect to the intersection, that is, A∪(B∩
    C) = (A ∪B) ∩ (A ∪C),
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: (c) 并集对交集具有分配性，即A∪(B∩C) = (A ∪B) ∩ (A ∪C)，
- en: (d) and the intersection is distributive with respect to the union, that is,
    A ∩ (B ∪C) = (A ∩B) ∪ (A ∩C).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: (d) 交集对并集具有分配性，即A ∩ (B ∪C) = (A ∩B) ∪ (A ∩C)。
- en: Union and intersection can be defined for an arbitrary number of operands. That
    is, if A[1],A[2],…,A[n] are sets,
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 并集和交集可以为任意多个操作数定义。也就是说，如果A[1]、A[2]、…、A[n]是集合，
- en: '![A1 ∪⋅⋅⋅∪ An := (A1 ∪ ⋅⋅⋅∪ An−1) ∪An, ](img/file2166.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![A1 ∪⋅⋅⋅∪ An := (A1 ∪ ⋅⋅⋅∪ An−1) ∪An, ](img/file2166.png)'
- en: and similar for the intersection. Note that this is a recursive definition!
    Because of associativity, the order of parentheses doesn’t matter.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 交集的情况类似。请注意，这是一种递归定义！由于结合性，括号的顺序无关紧要。
- en: The associativity and commutativity might seem too abstract and trivial at the
    same time. However, this is not the case for all operations, so it is worth emphasizing
    to get used to the concepts. If you are curious, noncommutative operations are
    right under our noses. A simple example is string concatenation.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 结合性和交换性可能看起来既抽象又微不足道。然而，并非所有运算都是如此，因此强调这些概念是值得的。如果你感兴趣，非交换性运算就在我们眼前，一个简单的例子是字符串连接。
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: C.2.2 De Morgan’s laws
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: C.2.2 德·摩根定律
- en: One of the fundamental rules describes how set difference, union, and intersection
    behave together regarding set operations. These are called De Morgan’s laws.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一个基本规则描述了集合差、并集和交集在集合运算中的共同行为，这些被称为德·摩根定律。
- en: Theorem 153\. (De Morgan’s laws)
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 定理 153．（德摩根定律）
- en: Let A,B, and C be three sets. Then
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 设A、B和C为三个集合。那么
- en: (a) A ∖ (B ∪C) = (A ∖B) ∩ (A ∖C),
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: (a) A ∖ (B ∪C) = (A ∖B) ∩ (A ∖C)，
- en: (b) A ∖ (B ∩C) = (A ∖B) ∪ (A ∖C).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: (b) A ∖ (B ∩C) = (A ∖B) ∪ (A ∖C)。
- en: Proof. For simplicity, we are going to prove this using Venn diagrams. Although
    drawing a picture is not a ”proper” mathematical proof, this is not a problem.
    We are here to understand things, not to get hung up on philosophy.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 证明。为了简单起见，我们将通过维恩图来证明这一点。虽然画图并不是一种“正式”的数学证明，但这不是问题。我们在这里是为了理解事物，而不是陷入哲学讨论。
- en: Here is the illustration.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是该图示。
- en: '![PIC](img/file2167.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![PIC](img/file2167.png)'
- en: 'Figure C.2: De Morgan’s laws, illustrated on Venn diagrams'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图 C.2：德摩根定律，用维恩图表示
- en: Based on this, you can easily see both (a) and (b).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 基于此，你可以轻松看到(a)和(b)。
- en: Note that De Morgan’s laws can be generalized to cover any number of sets. So,
    for any Γ index set,
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，德摩根定律可以推广到任何数量的集合。因此，对于任何Γ索引集，
- en: '![A ∖ (∩γ∈Γ B γ) = ∪ γ∈Γ (A ∖B γ), A ∖ (∪γ∈Γ B γ) = ∩ γ∈Γ (A ∖B γ). ](img/file2168.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![A ∖ (∩γ∈Γ B γ) = ∪ γ∈Γ (A ∖B γ), A ∖ (∪γ∈Γ B γ) = ∩ γ∈Γ (A ∖B γ). ](img/file2168.png)'
- en: C.3 The Cartesian product
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: C.3 笛卡尔积
- en: One of the most fundamental ways to construct new sets is the Cartesian product.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 构造新集合的最基本方法之一就是笛卡尔积。
- en: Definition 110\. (The Cartesian product)
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 定义 110．（笛卡尔积）
- en: Let A and B be two sets. Their Cartesian product A ×B is defined by
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 设A和B为两个集合。它们的笛卡尔积A ×B定义为
- en: '![A × B := {(a,b) : a ∈ A and b ∈ B }. ](img/file2169.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![A × B := {(a,b) : a ∈ A and b ∈ B }. ](img/file2169.png)'
- en: The elements of the product are called tuples. Note that this operation is not
    associative nor commutative!
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 积的元素称为元组。注意，这个操作既不是结合的也不是交换的！
- en: To see this, consider that, for example,
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 为了证明这一点，考虑到，例如，
- en: '![{1} × {2} ⁄= {2}× {1} ](img/file2170.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![{1} × {2} ⁄= {2}× {1} ](img/file2170.png)'
- en: and
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 以及
- en: '![({1} × {2})× {3} ⁄= {1} × ({2}× {3}). ](img/file2171.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![({1} × {2})× {3} ⁄= {1} × ({2}× {3}). ](img/file2171.png)'
- en: The Cartesian product for an arbitrary number of sets is defined with a recursive
    definition, just like we did with the union and intersection. So, if A[1],A[2],…,A[n]
    are sets, then
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 任意数量集合的笛卡尔积通过递归定义进行定义，就像我们处理并集和交集时一样。因此，如果A[1]、A[2]、…、A[n]是集合，那么
- en: '![A1 × ⋅⋅⋅× An := (A1 × ⋅⋅⋅× An− 1)× An. ](img/file2172.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![A1 × ⋅⋅⋅× An := (A1 × ⋅⋅⋅× An− 1)× An. ](img/file2172.png)'
- en: Here, the elements are tuples of tuples of tuples of…, but to avoid writing
    an excessive number of parentheses, we can abbreviate it as (a[1],…,a[n]). When
    the operands are the same, we usually write A^n instead of A ×⋅⋅⋅×A.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，元素是由多个元组组成的元组，为了避免写太多括号，我们可以将其简化为(a[1],…,a[n])。当操作数相同的时候，我们通常写A^n来代替A ×⋅⋅⋅×A。
- en: One of the most common examples is the Cartesian plane, which you probably have
    seen before.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的例子之一是笛卡尔平面，你可能之前见过。
- en: '![PIC](img/file2174.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![PIC](img/file2174.png)'
- en: 'Figure C.3: The Cartesian plane'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图 C.3：笛卡尔平面
- en: To give a machine-learning-related example, let’s take a look at how data is
    usually presented. We’ll focus on the famous Iris dataset ( [https://scikit-learn.org/stable/auto_examples/datasets/plot_iris_dataset.html](https://scikit-learn.org/stable/auto_examples/datasets/plot_iris_dataset.html)),
    which is a subset of ![ℝ4 ](img/file2175.png). In this dataset, the four axes
    represent sepal length, sepal width, petal length, and petal width.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 为了给出一个与机器学习相关的例子，看看数据通常是如何呈现的。我们将重点关注著名的鸢尾花数据集（[https://scikit-learn.org/stable/auto_examples/datasets/plot_iris_dataset.html](https://scikit-learn.org/stable/auto_examples/datasets/plot_iris_dataset.html)），它是!
    [ℝ4 ](img/file2175.png)的一个子集。在这个数据集中，四个轴分别表示花萼长度、花萼宽度、花瓣长度和花瓣宽度。
- en: '![PIC](img/file2176.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![PIC](img/file2176.png)'
- en: 'Figure C.4: The sepal width, plotted against the sepal length in the Iris dataset.
    Source: scikit-learn documentation'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图 C.4：鸢尾花数据集中的花萼宽度与花萼长度的散点图。来源：scikit-learn 文档
- en: 'As the example demonstrates, Cartesian products are useful because they combine
    related information into a single mathematical structure. This is a recurring
    pattern in mathematics: building complex things from simpler building blocks and
    abstracting away the details by turning the result into yet another building block.
    (As one would do to create complex software as well.)'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 正如示例所示，笛卡尔积很有用，因为它将相关信息结合成一个数学结构。这是数学中的一个重复模式：通过更简单的构建块构建复杂的事物，并通过将结果转化为另一个构建块来抽象化细节。（就像创建复杂软件一样。）
- en: So far, we’ve seen the pleasant side of sets. However, they have caused quite
    a headache for mathematicians upon their first attempts to formalize set theory.
    We are ready to see why.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了集合的愉快一面。然而，在数学家们首次尝试形式化集合论时，它们却带来了相当大的头疼。现在我们准备好看看原因了。
- en: C.4 The cardinality of sets
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: C.4 集合的基数
- en: When it comes to sets, “How many elements does a set have?” is a natural question
    to ask. What you might not expect is how deep of a rabbit hole such an innocent
    question plunges us into!
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在集合论中，“一个集合有多少个元素？”是一个自然的问题。你可能没想到的是，这样一个看似简单的问题会把我们带入一个如此深邃的洞穴！
- en: Soon, you’ll see why. The “size of a set” is formalized by the concept of cardinality,
    denoted by jAj; that is, putting the set A between the absolute value signs. Intuitively,
    jAj seems clear, but let me assure you, it is not.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 很快，你就会明白为什么了。“集合的大小”通过基数的概念来形式化，记作 jAj；也就是说，把集合 A 放在绝对值符号中。直观上，jAj 看起来很清晰，但让我向你保证，它并不是那么简单。
- en: This is where the true mind-bending begins in mathematics. Sure, for finite
    sets like {4,6,42}, we can confidently claim that j{4,6,42}j = 3, but what about
    jℤj, jℚj, jℝj, or even jℝ²j ?
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是数学中真正让人大吃一惊的地方。当然，对于像 {4,6,42} 这样的有限集合，我们可以自信地声称 j{4,6,42}j = 3，但 jℤj、jℚj、jℝj，甚至
    jℝ²j 呢？
- en: 'Check this: jℤj = jℚj, but jℤj≠jℝj, and jℝj = jℝ²j. In other words:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 看这个：jℤj = jℚj，但 jℤj ≠ jℝj，且 jℝj = jℝ²j。换句话说：
- en: there are “as many” integers as rational numbers,
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 整数的数量与有理数的数量是“相同的”。
- en: but there are “more” real numbers than integers,
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 但实数比整数“更多”。
- en: and there are “as many” points on the real line as on the plane.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以及实数线上的“点的数量”与平面上的一样多。
- en: See, I told you that cardinality is where the crazy stuff starts. (The “as many”
    and “more” are in quotes because we haven’t defined them yet; at least, not in
    a mathematical sense.)
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 看吧，我告诉过你，基数是疯狂的开始。（“相同数量”和“更多”的引号是因为我们还没有定义这些术语，至少在数学意义上没有定义。）
- en: As with several concepts in mathematics, we won’t define cardinality directly.
    Instead, we’ll define how to compare the cardinalities of sets, and then anchor
    special sets that’ll serve as points of comparison.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 与数学中的多个概念一样，我们不会直接定义基数。相反，我们将定义如何比较集合的基数，然后固定一些特殊集合作为比较的基准。
- en: Definition 111\. (Comparison of cardinality)
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 定义 111. （基数比较）
- en: Let A and B be two arbitrary sets.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 设 A 和 B 是两个任意的集合。
- en: (a) We say that jAj = jBj if there exists a function from A to B that is bijective.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: (a) 如果存在从 A 到 B 的双射函数，我们就说 jAj = jBj。
- en: (b) We say that jAj ≤jBj if there exists a function from A to B that is injective.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: (b) 如果存在从 A 到 B 的单射函数，我们就说 jAj ≤ jBj。
- en: (c) We say that jAj/span>jBj if there exists a function from A to B that is
    injective but not surjective.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: (c) 如果存在从 A 到 B 的单射但不是满射的函数，我们就说 jAj/span> jBj。
- en: Let’s unpack this with a couple of examples.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过几个例子来解析这个问题。
- en: 'Example 1\. Let A = {1,2,3} and B = {−3.2,12.452,−5.82}. Then jAj = jBj, because
    f : A →B,'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '示例 1. 设 A = {1,2,3} 和 B = {−3.2,12.452,−5.82}。那么 jAj = jBj，因为 f : A → B，'
- en: '![f(1) = − 5.83, f(2) = − 3.2, f(3) = 12.452 ](img/file2177.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![f(1) = − 5.83, f(2) = − 3.2, f(3) = 12.452 ](img/file2177.png)'
- en: is a bijection.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 是一个双射。
- en: 'Example 2\. Let A = {0,1} and B = {2,3,4}. Then jAj/span>jBj, because f : A
    →B,'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '示例 2. 设 A = {0,1} 和 B = {2,3,4}。那么 jAj/span> jBj，因为 f : A → B，'
- en: '![f(0) = 2, f(1) = 3 ](img/file2178.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![f(0) = 2, f(1) = 3 ](img/file2178.png)'
- en: is injective, but not surjective.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 是单射，但不是满射。
- en: What about more interesting sets, like ℕ,ℤ,ℚ,ℝ? This is where things get weird.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 那些更有趣的集合呢，比如 ℕ、ℤ、ℚ、ℝ？这就是事情变得奇怪的地方。
- en: The following result is so important that we state it as a theorem.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 以下结果如此重要，以至于我们将其作为定理陈述。
- en: Theorem 154\. (The set of natural numbers is infinite)
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 定理 154. （自然数集合是无限的）
- en: Let n ∈ℕ be any natural number, and define the set A = {1,2,…,n}. Then jAj/span>ℕ.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 设 n ∈ ℕ 为任意自然数，并定义集合 A = {1,2,…,n}。那么 jAj/span> ℕ。
- en: 'Proof. The proof is simple, as it’s easy to see that the function f : A →ℕ,
    defined by f(a) = a is injective but not surjective.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '证明。证明很简单，因为很容易看出，函数 f : A → ℕ，由 f(a) = a 定义，是单射但不是满射。'
- en: In other words, ℕ is not a finite set! The set of natural numbers is our first
    example of an infinite set, defining the notion of countable sets.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，ℕ 不是一个有限集合！自然数集合是我们第一个无限集合的例子，定义了可数集合的概念。
- en: Definition 112\. (Countable sets)
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 定义 112. （可数集合）
- en: Let ![A ](img/file2179.png) be an arbitrary set. If ![|A | ≤ ℕ ](img/file2180.png),
    then ![A ](img/file2181.png) is called countable.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 设 ![A ](img/file2179.png) 是一个任意集合。如果 ![|A | ≤ ℕ ](img/file2180.png)，那么 ![A ](img/file2181.png)
    称为可数集合。
- en: 'We can show that a set is countable by enumerating its elements, as every enumeration
    defines an injective mapping. For instance, ℤ is countable, as the function f
    : ℕ →ℤ defined by'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '我们可以通过列举元素来证明一个集合是可数的，因为每个列举都定义了一个单射映射。例如，ℤ是可数的，因为函数f : ℕ → ℤ定义了'
- en: '![ ( ||| 0 if n = 0, |{ f (n ) = k if n = 2k for some k, |||| ( − k if n =
    2k + 1 for some k ](img/file2182.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![ ( ||| 0 if n = 0, |{ f (n ) = k if n = 2k for some k, |||| ( − k if n =
    2k + 1 for some k ](img/file2182.png)'
- en: is a bijection. In other words, the sequence
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 是一个双射。换句话说，序列
- en: '![0,1,− 1,2,− 2,3,− 3,... ](img/file2183.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![0, 1, -1, 2, -2, 3, -3, ... ](img/file2183.png)'
- en: is an enumeration of ℤ. For more examples, see Chapter [10](ch018.xhtml#numbers-sequences-and-series).
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 是ℤ的列举。更多示例，请参见第[10](ch018.xhtml#numbers-sequences-and-series)章。
- en: 'Regarding countability, there are two essential results: the union and the
    Cartesian product of countable sets are still countable.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 关于可数性，有两个重要的结果：可数集合的并集和笛卡尔积仍然是可数的。
- en: Theorem 155\. (Union and Cartesian product of countable sets)
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 定理 155. （可数集合的并集和笛卡尔积）
- en: Let A[1],A[2],… be countable sets.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 令A[1], A[2], …是可数集。
- en: (a) A[1] ×A[2] is countable.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: (a) A[1] × A[2]是可数的。
- en: (b) ∪[n=1]^∞A[n] is countable.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: (b) ∪[n=1]^∞A[n]是可数的。
- en: 'Among infinite cardinalities, there are two that we frequently encounter: the
    countably infinite and the continuum. The countably infinite is the cardinality
    of the set of natural numbers, denoted by'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在无限基数中，有两个我们常遇到的：可数无限和连续统。可数无限是自然数集合的基数，记作
- en: '![|ℤ| = ℵ0, ](img/file2184.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![|ℤ| = ℵ0, ](img/file2184.png)'
- en: where ℵ is the Hebrew letter aleph. On the other hand, the continuum is the
    cardinality of the set of real numbers, denoted by
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 其中，ℵ是希伯来字母“阿列夫”。另一方面，连续统是实数集合的基数，记作
- en: '![|ℝ | = c. ](img/file2185.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![|ℝ| = c. ](img/file2185.png)'
- en: C.5 The Russell paradox (optional)
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: C.5 拉塞尔悖论（可选）
- en: 'Let’s return to a remark I made earlier: naively defining sets as collections
    of things is not going to cut it. In the following, we are going to see why. Prepare
    for some mind-twisting mathematics.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到我之前提到的一个观点：天真地将集合定义为事物的集合是行不通的。接下来，我们将看到为什么。准备好迎接一些令人费解的数学吧。
- en: 'Here’s a riddle. A barber is “one who shaves all those, and those only, who
    do not shave themselves.” Does the barber shave themself? There’s no good answer:
    either yes or no, the definition implies otherwise. This is known as the barber’s
    paradox. It’s more than a cute little story; it’s a paradox that shook the foundations
    of mathematics.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个谜语。一位理发师是“为所有不剃自己胡子的人刮胡子，并且仅为他们刮胡子。”那么，这位理发师自己剃胡子吗？没有正确的答案：无论是“是”还是“否”，定义都暗示着不然。这就是著名的理发师悖论。它不仅仅是一个有趣的小故事；它是一个动摇数学基础的悖论。
- en: As we have seen, sets can be made of sets. For instance, {ℕ,ℤ,ℝ} is a collection
    of the most commonly used number sets. We might as well define the set of all
    sets, which we’ll denote with Ω.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，集合可以由集合组成。例如，{ℕ, ℤ, ℝ}是最常用的数集的集合。我们也可以定义所有集合的集合，我们用Ω来表示它。
- en: 'With that, we can use the set-builder notation to describe the following collection
    of sets:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，我们可以使用集合构造符号来描述以下集合的集合：
- en: '![S := {A ∈ Ω : A ∕∈ A }. ](img/file2186.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![S := {A ∈ Ω : A ∕∈ A }. ](img/file2186.png)'
- en: In plain English, S is a collection of sets that are not elements of themselves.
    Although this is weird, it looks valid. We used the property “![A ∕∈ A ](img/file2187.png)”
    to filter the set of all sets. What is the problem?
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 用简单的话来说，S是一个包含所有不属于自身的集合的集合。尽管这很奇怪，但看起来有效。我们使用了属性“![A ∕∈ A ](img/file2187.png)”来过滤所有集合的集合。问题出在哪里？
- en: For one, we can’t decide if S is an element of S or not. If S ∈S, then by the
    defining property, S![∕∈](img/file2188.png)S. On the other hand, if S![∕∈](img/file2189.png)S,
    then by the definition, S ∈S. This is definitely very weird.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们无法决定S是否是S的元素。如果S ∈ S，那么根据定义，S![∕∈](img/file2188.png)S。另一方面，如果S![∕∈](img/file2189.png)S，那么根据定义，S
    ∈ S。这确实非常奇怪。
- en: We can diagnose the issue by decomposing the set-builder notation. In general
    terms, it can be written as
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过分解集合构造符号来诊断问题。一般来说，它可以写作
- en: '![x ∈ A : T (x), ](img/file2190.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![x ∈ A : T(x), ](img/file2190.png)'
- en: where A is some set and T(x) is a property, that is, a true or false statement
    about x.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 其中A是某个集合，T(x)是一个属性，即关于x的真或假的陈述。
- en: 'In the definition {A ∈ Ω : A![∈∕](img/file2191.png)A}, our abstract property
    is defined by'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '在定义{A ∈ Ω : A![∈∕](img/file2191.png)A}中，我们的抽象属性通过以下方式定义'
- en: '![ ( |{ true if A ∕∈ A, T(A ) := |( false otherwise. ](img/file2192.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![ ( |{ true if A ∕∈ A, T(A ) := |( false otherwise. ](img/file2192.png)'
- en: 'This is perfectly valid, so the problem must be in the other part: the set
    Ω. It turns out that the set of all sets is not a set. So, defining sets as a
    collection of things is not enough. Since sets are at the very foundation of mathematics,
    this discovery threw a giant monkey wrench into the machine around the late 19th-early
    20th century, and it took lots of years and brilliant minds to fix it.'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这是完全有效的，所以问题必须出现在另一个部分：集合Ω。事实证明，所有集合的集合并不是一个集合。因此，将集合定义为事物的集合是不够的。由于集合是数学的基础，这一发现给19世纪末到20世纪初的数学发展带来了巨大的阻碍，解决这个问题花费了许多年和无数聪明的头脑。
- en: Fortunately, as machine learning practitioners, we don’t have to care about
    such low-level details as the axioms of set theory. For us, it is enough to know
    that a solid foundation exists somewhere. (Hopefully.)
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，作为机器学习从业者，我们不需要关心像集合论公理这样的低级细节。对我们来说，知道某个地方存在坚实的基础就足够了。（希望如此。）
- en: Join our community on Discord
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加入我们的Discord社区
- en: Read this book alongside other users, Machine Learning experts, and the author
    himself. Ask questions, provide solutions to other readers, chat with the author
    via Ask Me Anything sessions, and much more. Scan the QR code or visit the link
    to join the community. [https://packt.link/math](https://packt.link/math)
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他用户、机器学习专家以及作者本身一起阅读本书。提出问题，为其他读者提供解决方案，通过“问我任何问题”环节与作者互动，还有更多。扫描二维码或访问链接加入社区。[https://packt.link/math](https://packt.link/math)
- en: '![PIC](img/file1.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/file1.png)'
