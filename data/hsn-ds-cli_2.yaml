- en: Essential Commands
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 必备命令
- en: Now that we have the command line set up and installed, we will go over a list
    of everyday commands that are considered the basics. Having a fundamental understanding
    of the basic commands will be the building block on which we'll learn the advanced
    commands found later in this book.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置并安装了命令行，接下来我们将介绍一些被认为是基础的日常命令。对这些基本命令的理解将是我们学习后面本书中高级命令的基础。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖以下主题：
- en: Basic command-line navigation
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本命令行导航
- en: Redirecting input and output
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重定向输入和输出
- en: Where to get help if you're stuck
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果卡住了，哪里可以寻求帮助
- en: How to customize the shell to your liking
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何根据个人喜好自定义Shell
- en: Essential commands
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 必备命令
- en: Woah... hold your horses, we need to cover some basics about commands. A command
    is a process run by a **POSIX** (**Portable Operating System Interface**) compliant
    **OS** (**Operating System**). OpenGroup maintains the standard in addition to
    it being ratified as an IEEE standard ([http://pubs.opengroup.org/onlinepubs/9699919799/](http://pubs.opengroup.org/onlinepubs/9699919799/)).
    In a POSIX environment, the process being run will have an environment, a current
    working directory, the command line (the path name that invoked the command and
    any arguments), and a series of file descriptors with `stdin`, `stdout`, and `stderr`
    (referred to by integer numbers 0, 1, and 2, respectively) being connected prior
    to handoff to your command.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 哇...等一下，我们需要先讲解一些关于命令的基础知识。命令是由**POSIX**（**可移植操作系统接口**）兼容的**操作系统**（**OS**）运行的一个进程。OpenGroup维护这一标准，并且它已被作为IEEE标准正式批准（[http://pubs.opengroup.org/onlinepubs/9699919799/](http://pubs.opengroup.org/onlinepubs/9699919799/)）。在POSIX环境中，运行的进程将拥有一个环境、当前工作目录、命令行（调用该命令的路径名称以及任何参数），并且会在交给您的命令之前，连接一系列文件描述符，包括`stdin`、`stdout`和`stderr`（分别通过整数0、1和2来表示）。
- en: Now with a little background and an installed command line, you are ready to
    go and we can actually start running commands. We will be going over some basic
    everyday commands. For those that are ready to delve in, let's discuss how we
    locate the commands we can run.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，了解了一些背景知识并安装了命令行，你准备好了，我们实际上可以开始执行命令了。接下来我们将介绍一些基础的日常命令。对于那些准备深入了解的人，让我们讨论一下如何定位我们可以执行的命令。
- en: Locating commands is akin to searching through a filing cabinet, what we call
    a filesystem. Commands are just files stored in the filing cabinet, and folders
    or directories are used to organize the files into a hierarchy. Each directory
    may contain many files or other directories, and has a single parent directory.
    To open our filing cabinet, we need to start at the top of the hierarchy, the
    root directory, `/`. The first set of commands you need to know involve commands
    to traverse the filesystem and get your bearings.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 定位命令就像是在一个文件柜中查找文件，我们称之为文件系统。命令实际上是存储在文件柜中的文件，文件夹或目录则用于将文件组织成层次结构。每个目录可能包含多个文件或其他目录，并且有一个父目录。要打开我们的文件柜，我们需要从层次结构的顶部开始，即根目录`/`。你需要了解的第一批命令涉及遍历文件系统并确定位置的命令。
- en: 'When you log into the command line, it''s likely that you will be in your home
    directory. What this directory is varies by system. To see where you are, try
    the `pwd` (present working directory) command:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当你登录到命令行时，你很可能会进入你的主目录。这个目录因系统而异。要查看你所在的位置，可以尝试`pwd`（当前工作目录）命令：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following is what you should see on running the preceding command:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 执行前面命令后，您应该看到如下内容：
- en: '![](img/2f33dea1-e0c3-4ae7-9680-00b9b0ead183.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2f33dea1-e0c3-4ae7-9680-00b9b0ead183.png)'
- en: Here, `ubuntu` is your username. This means you are currently in the `ubuntu`
    directory, which is in the home directory, `/`. From here, if you try to open
    a file with a relative path name, that is, one that doesn't start with a `/`,
    the command line will look for that file in your current directory (you can do
    things with files in other directories without changing your current one, we will
    talk about that in a bit).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`ubuntu`是你的用户名。这意味着你当前在`ubuntu`目录中，该目录位于主目录`/`下。从这里，如果你尝试使用相对路径名打开文件，即不以`/`开头的路径，命令行将会在你当前的目录中查找该文件（你可以在不改变当前目录的情况下操作其他目录中的文件，我们稍后会讨论这个）。
- en: 'You might want to create your own directories. To do this, we can try the following
    command:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想创建自己的目录。为此，我们可以尝试以下命令：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The following is what you should see on running the preceding command:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 执行前面命令后，您应该看到如下内容：
- en: '![](img/5dd2763b-779b-4eff-a67f-bd08c9bb32cf.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5dd2763b-779b-4eff-a67f-bd08c9bb32cf.png)'
- en: 'Which makes the directory `foo` inside your current directory. If this command
    completes successfully, it won''t print anything. To see the directory we just
    made, we use the list command:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使目录`foo`在你当前的目录内创建。如果该命令成功完成，它将不会打印任何内容。要查看我们刚刚创建的目录，可以使用列出命令：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following is what you should see on running the preceding command:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上面命令后，你应该看到以下内容：
- en: '![](img/f55b0162-993c-4cec-9ee0-de129743abed.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f55b0162-993c-4cec-9ee0-de129743abed.png)'
- en: 'It should be on a line by itself. We might want to print a little bit more
    information about the directory. In this case, we can pass some flags to the `ls`
    command to alter what it''s doing. For example, type the following:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 它应该单独占一行。我们可能想打印更多关于目录的信息。在这种情况下，我们可以向`ls`命令传递一些标志，以改变它的操作。例如，输入以下内容：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This is what you should see on running the preceding command:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上面命令后，你应该看到以下内容：
- en: '![](img/acb0bf33-bd87-424d-b380-da9cbea5d0f7.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/acb0bf33-bd87-424d-b380-da9cbea5d0f7.png)'
- en: It’s not too important right now to understand everything printed here, but
    we can see that foo is a directory, not a data file (from the `d` code in the
    front), and the date and time it was created. This is a common pattern among UNIX
    commands. The default version of the command does one thing, and passing in flags
    like `-l`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在理解这里打印的所有内容并不太重要，但我们可以看到`foo`是一个目录，而不是数据文件（从前面的`d`代码可以看出），还显示了它的创建日期和时间。这是UNIX命令中的常见模式。命令的默认版本执行一个操作，而通过传递如`-l`这样的标志，可以修改它的行为。
- en: 'Sometimes, commands have arguments, and sometimes flags of commands will have
    arguments, too. A general form of a command might appear as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，命令会带有参数，命令的标志也可能带有参数。命令的一般形式可能如下所示：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here, `a`, `b`, `c`, and `d` are flags of the command. What exactly these commands
    are, and what they do, are dependent on the command.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`a`、`b`、`c`和`d`是命令的标志。这些命令具体是什么，以及它们的作用，取决于具体的命令。
- en: 'Let’s go into our newly-created directory and mess around with some data files:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进入我们刚刚创建的目录，尝试操作一些数据文件：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The following is what you should see on running the preceding command:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上面命令后，你应该看到以下内容：
- en: '![](img/4797dc7f-fc03-4279-be7c-81edbee31431.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4797dc7f-fc03-4279-be7c-81edbee31431.png)'
- en: 'The `cd` (or change directory) command changes your current working directory.
    Let''s now string together two commands to create a data file. We will talk about
    this a bit later, but for now we just need a file to mess around with:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`cd`（或更改目录）命令可以更改你当前的工作目录。现在，让我们将两个命令组合起来，创建一个数据文件。稍后我们会详细讨论这个，但现在我们只需要一个可以操作的文件：'
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The following is what you should see on running the preceding command:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上面命令后，你应该看到以下内容：
- en: '![](img/d5e34f5a-8c74-4d61-8496-e9cbe7649e86.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d5e34f5a-8c74-4d61-8496-e9cbe7649e86.png)'
- en: 'This won''t produce any output, but it will create a file called `hello.txt`
    (as we told the shell to redirect `stdout` with `>` to a file) that contains the
    single line of Hello world… text. To see this, we can use the concatenate command:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这不会产生任何输出，但它会创建一个名为`hello.txt`的文件（因为我们告诉Shell使用`>`将`stdout`重定向到文件），该文件包含单行文本：Hello
    world…。要查看该文件内容，我们可以使用连接命令：
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The following is what you should see on running the preceding command:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上面命令后，你应该看到以下内容：
- en: '![](img/cc03dbf8-b6c2-4020-95d7-72194f79e3d6.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cc03dbf8-b6c2-4020-95d7-72194f79e3d6.png)'
- en: This will print the contents of any file. If we only want to see the first,
    or last, few lines of a file, we could use `head` and `tail` instead of `cat`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打印出任何文件的内容。如果我们只想查看文件的前几行或后几行，可以使用`head`和`tail`命令，而不是`cat`。
- en: 'If this all sounds pretty simple, there’s a good reason: each command in UNIX
    is intended to do one thing and do it well. Often options can be used to tailor
    a command’s behavior. The really neat stuff you can do starts to happen when we
    start tying commands together using pipes and redirection.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这些内容听起来很简单，原因很简单：UNIX中的每个命令都旨在执行一项任务，并且做到最好。通常可以使用选项来调整命令的行为。当我们开始使用管道和重定向将多个命令组合在一起时，真正有趣的事情就开始发生了。
- en: You see, almost every command in UNIX has some way to input data into it. The
    command then takes the input, and, depending on its parameters and flags, transforms
    that input into something else and outputs it. We can use the pipe, `|`, to take
    the output from one command, and feed it into the input of another command. This
    simple but extremely powerful idea will let us do a lot with a few commands.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 你看，几乎每个 UNIX 命令都有某种方式来输入数据。然后，命令会接收输入，并根据其参数和标志，将输入转化为其他内容并输出。我们可以使用管道符号`|`，将一个命令的输出传递给另一个命令的输入。这种简单但极其强大的想法能让我们通过少量的命令做很多事情。
- en: 'Let''s try a simple example: let''s use `echo`, with the `-e` flag, to tell
    it to pay attention to control characters, to make a multi-line file (by using
    the `\n`) with some numbers on each line.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们试一个简单的例子：使用`echo`命令，并加上`-e`标志，告诉它注意控制字符，创建一个多行文件（通过使用`\n`），每行上有一些数字。
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The following is what you should see on running the preceding command:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 执行上述命令后，你应该看到以下内容：
- en: '![](img/ecd6cb48-de78-4bd1-807a-47c3c4d08881.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ecd6cb48-de78-4bd1-807a-47c3c4d08881.png)'
- en: 'Now, say we wanted to see those numbers sorted. The `sort` command does just
    this. Using a flag to sort to consider the lines to be numbers and not strings,
    we can pipe the output of `cat` into the `sort` function:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设我们想查看这些数字按顺序排序。`sort`命令正是完成这项工作的。通过使用一个标志来排序，将行视为数字而不是字符串，我们可以将`cat`命令的输出通过管道传递给`sort`函数：
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The following is what you should see on running the preceding command:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 执行上述命令后，你应该看到以下内容：
- en: '![](img/2632f067-bec9-408b-a97c-6674feb21a0b.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2632f067-bec9-408b-a97c-6674feb21a0b.png)'
- en: 'If we then want to see just the unique numbers in sorted order, we can re-pipe
    this output to the `uniq` command, which returns unique lines from the given input:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想查看按顺序排列的唯一数字，我们可以将输出重新通过管道传递给`uniq`命令，`uniq`会返回给定输入中的唯一行：
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The following is what you should see on running the preceding command:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 执行上述命令后，你应该看到以下内容：
- en: '![](img/a7bd98ed-de4f-4639-affb-27a8a36aeae3.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a7bd98ed-de4f-4639-affb-27a8a36aeae3.png)'
- en: And so on, and so on. We can build up the pipeline we want a bit at a time,
    debugging along the way. You will see this technique throughout this book.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 依此类推，我们可以一点点地构建我们想要的管道，并在过程中进行调试。你将在本书中看到这种技巧。
- en: 'One last thing: in some of these commands, we have seen the `>`, or redirect.
    Redirection can be used for a number of things, but most of the time it''s used
    to redirect the output of a command to a file:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 最后再提一点：在这些命令中，我们看到过`>`符号，也就是重定向。重定向可以用于很多事情，但大多数时候它是用来将命令的输出重定向到文件：
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This will replace the contents of the file named filename with the output of
    the pipeline.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这将用管道的输出替换名为 filename 的文件内容。
- en: With these simple tools, you have enough to get started hacking data with bash.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些简单的工具，你就可以开始用 bash 进行数据处理了。
- en: Navigating the command line
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导航命令行
- en: There's a couple of useful tricks for navigating the command line that, while
    optional, will improve your quality of life. This section has a selection of those
    tricks.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有几个有用的命令行导航技巧，虽然它们是可选的，但会提高你的生活质量。本节内容包含了一些这样的技巧。
- en: 'Bash, by default, saves the history of your commands. It will even save the
    history across sessions. This can be extremely useful because sometimes we make
    a small mistake and don''t want to retype an entire command, or we want to repeat
    the same commands over and over. To see your history, type this command:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Bash 默认会保存你的命令历史记录，甚至跨会话保存。这非常有用，因为有时我们会犯一些小错误，不想重新输入整个命令，或者我们希望重复执行相同的命令。要查看历史记录，可以输入以下命令：
- en: '[PRE12]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The following is what you should see on running the preceding command:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 执行上述命令后，你应该看到以下内容：
- en: '![](img/c16fcaa2-ab35-4343-ae76-a796592aa0f2.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c16fcaa2-ab35-4343-ae76-a796592aa0f2.png)'
- en: 'You can see that there is a numbered list of output commands. To repeat a numbered
    command, you can use the bang character, `!`. `!<number>` will repeat the number
    command verbatim:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到输出命令的编号列表。要重复一个编号命令，你可以使用叹号符号`!`。`!<number>`将逐字重复该编号命令：
- en: '[PRE13]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The following is what you should see on running the preceding command:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 执行上述命令后，你应该看到以下内容：
- en: '![](img/753eb9cb-7534-4e98-b784-d808e9d4fc63.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/753eb9cb-7534-4e98-b784-d808e9d4fc63.png)'
- en: A double bang, `!!`, will repeat the last command.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 双叹号`!!`将重复执行最后一条命令。
- en: You can also cycle through the list of commands with the up and down arrow keys
    on the keyboard.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过键盘上的上下箭头键循环浏览命令列表。
- en: You can perform a reverse command search by typing *Ctrl* + *R* at an empty
    command line. Then begin typing some substring of a command you’d like to search
    for. Bash will attempt to find a matching command somewhere in your history. If
    multiple commands match, the last one will be picked, but you can cycle through
    the others by pressing *Ctrl* + *R* repeatedly.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在空命令行中输入*Ctrl* + *R* 来执行反向命令搜索。然后开始输入您想要搜索的命令的某个子串。Bash 会尝试在您的历史记录中找到匹配的命令。如果有多个匹配的命令，最后一个将被选中，但您可以通过反复按
    *Ctrl* + *R* 来循环浏览其他命令。
- en: '`cd -` will take you back to the last directory you came from, even if it''s
    halfway across the system.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`cd -` 会带您回到上一个目录，即使它在系统的另一端。'
- en: A thing that confuses some people is hitting *Ctrl* + *S*. This will stop all
    output to a terminal session, and it will appear as if your session is frozen.
    To unfreeze the session, simply press  *Ctrl* + Q.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 一些人可能会困惑于按下*Ctrl* + *S*。这将停止所有输出到终端会话，看起来好像会话被冻结了。要解冻会话，只需按*Ctrl* + Q。
- en: Getting help
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取帮助
- en: 'There are a number of resources available, both built into the command line
    and also externally. One command that you will always find yourself using is the
    `man` command (short for manual page). For example, type in `man man` to read
    what the man command can do. You should see something similar to this:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多资源可供使用，既包括命令行内置的资源，也包括外部资源。您总会使用到的一个命令是 `man` 命令（即手册页的缩写）。例如，输入 `man man`
    来查看 man 命令能做什么。您应该会看到类似下面的内容：
- en: '![](img/ba0123f8-2792-4254-9395-d6e7ed0c431e.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ba0123f8-2792-4254-9395-d6e7ed0c431e.png)'
- en: Let's take a look at two options we use just about every day, `man -a` and `man
    -k`, as you will use them a lot for finding man pages at the command line. Go
    ahead and type `man -k .` in the command line to view all of the man pages that
    are installed on the system. If you are using the same Linux distribution as us,
    about 2,000 manuals just scrolled down your screen, that's a lot to read! We don't
    expect you to start from the top and read every one (feel free to do so if you're
    having trouble sleeping), so let’s figure out some smarter ways to navigate all
    of these manuals.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看两个我们几乎每天都会用到的选项，`man -a` 和 `man -k`，因为您将经常使用它们在命令行上查找手册页。请在命令行中输入`man -k
    .`，以查看系统中安装的所有手册页。如果您和我们使用的是相同的 Linux 发行版，大约有 2,000 个手册页面刚刚滚动过去，真的是很多内容要读！我们不指望您从头开始阅读每一篇（如果您睡不着，随时可以阅读），所以我们来找找更智能的方式来浏览这些手册。
- en: 'If you wanted to slowly scroll through the entire list of manuals, you could
    run `man -k . | more` and just keep tapping the space bar to view the entire list.
    However, this is inefficient. Notice in the previous examples we were searching
    using a dot (.) instead of a string. Let''s try this again, but this time remove
    the dot and enter a word:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想慢慢浏览整个手册列表，可以运行 `man -k . | more`，然后不断按空格键来查看整个列表。然而，这样效率不高。请注意，在前面的示例中，我们使用的是一个点（.）来搜索，而不是字符串。让我们再试一次，这次去掉点，输入一个单词：
- en: '[PRE14]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The following is what you should see on running the preceding command:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 运行前述命令后，您应该看到以下内容：
- en: '![](img/d81110fa-d489-4260-a3d5-3bea17f8d450.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d81110fa-d489-4260-a3d5-3bea17f8d450.png)'
- en: Much better! Now I can quickly see whether there's a man page for the column
    command instead of parsing through thousands of pages.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 好多了！现在我可以快速查看 `column` 命令是否有手册页，而不用翻阅成千上万的页面了。
- en: 'The manual is terrific, but sometimes it''s not quite enough. Enter the Internet.
    Sites such as Stack Overflow and Stack Exchange can be invaluable when trying
    to figure out esoteric issues with commands, or give nice examples. The Internet
    is a big place: someone will be trying to do what you are doing and it''s likely
    they had the same issues you''re having. Answered questions might already exist
    with your exact issue, or you could submit a new question.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 手册非常棒，但有时它并不完全够用。这时，互联网就派上用场了。像 Stack Overflow 和 Stack Exchange 这样的网站，在尝试解决命令的难题时非常有价值，或者它们能提供很好的示例。互联网是一个大地方：总会有人在做您正在做的事情，而且他们可能遇到过和您一样的问题。已经有的回答可能正好解决了您的问题，或者您可以提交一个新问题。
- en: Customizing the shell
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义 shell
- en: 'You might have noticed the prompt every time you enter a command to the left.
    Depending on your system, it might look a little different from mine. Let''s fix
    that! For example, wouldn''t it be great if you didn''t have to type `pwd` all
    the time just to see where you are? Go ahead and enter the following:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能注意到每次输入命令时，左侧都会出现一个提示符。根据你的系统，提示符可能看起来与我的略有不同。我们来解决这个问题！比如，难道不是很好，如果你不需要每次都输入`pwd`来查看当前所在的目录吗？现在，输入以下命令试试看：
- en: '[PRE15]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You should see something like this:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到类似这样的输出：
- en: '![](img/4d68f828-548c-4719-8482-7f0d4a80d7f8.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4d68f828-548c-4719-8482-7f0d4a80d7f8.png)'
- en: 'Pretty nifty, right? You can add that command inside your `~/.bash_profile`
    file to keep it permanent. You can use any editor that you like (`vim`, `nano`,
    `emacs`) to open the file. For example, we used `vim`:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 很酷，对吧？你可以将这个命令添加到你的`~/.bash_profile`文件中，以保持它的永久性。你可以使用任何你喜欢的编辑器（`vim`、`nano`、`emacs`）来打开这个文件。例如，我们使用了`vim`：
- en: '[PRE16]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: There's also an easy generator located at [http://ezprompt.net/](http://ezprompt.net/),
    which you can use to customize your bash prompt even further. Take a look!
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个非常简单的生成器，位于[http://ezprompt.net/](http://ezprompt.net/)，你可以使用它进一步自定义你的 Bash
    提示符。快去看看吧！
- en: Now that you understand the basics and totally tricked out your bash prompt,
    let’s go ahead and work on an actual dataset!
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经理解了基本概念，并且完全自定义了你的 Bash 提示符，我们接下来就可以开始处理实际数据集了！
- en: Summary
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: As you can see, the command line is very powerful for everyday tasks. We learned
    how to do basic things, such as create files and directories, and navigate a system
    via the command line. We learned about manual pages, where to find help, and how
    to customize the shell.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，命令行对于日常任务来说非常强大。我们学习了如何做一些基础的操作，比如创建文件和目录，如何通过命令行浏览系统。我们还学习了如何查阅手册页、获取帮助，以及如何自定义
    Shell。
- en: In the next chapter, we'll take what you learned here and apply it against a
    real dataset. Feel free to come back to this chapter as it will be helpful throughout
    the rest of this book.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将把你在这一章学到的知识应用到一个真实的数据集中。随时可以回到这一章，它会在本书的其余部分中非常有帮助。
