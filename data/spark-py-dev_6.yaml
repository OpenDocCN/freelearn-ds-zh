- en: Chapter 6. Visualizing Insights and Trends
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 6 章。可视化见解和趋势
- en: So far, we have focused on the collection, analysis, and processing of data
    from Twitter. We have set the stage to use our data for visual rendering and extracting
    insights and trends. We will give a quick lay of the land about visualization
    tools in the Python ecosystem. We will highlight Bokeh as a powerful tool for
    rendering and viewing large datasets. Bokeh is part of the Python Anaconda Distribution
    ecosystem.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经专注于从 Twitter 收集、分析和处理数据。我们已经为使用我们的数据进行可视化呈现和提取见解和趋势做好了准备。我们将简要介绍 Python
    生态系统中的可视化工具。我们将强调 Bokeh 作为渲染和查看大型数据集的强大工具。Bokeh 是 Python Anaconda Distribution
    生态系统的一部分。
- en: 'In this chapter, we will cover the following points:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下几点：
- en: Gauging the key words and memes within a social network community using charts
    and wordcloud
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过图表和词云来衡量社交网络社区中的关键词和模因
- en: Mapping the most active location where communities are growing around certain
    themes or topics
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 映射最活跃的地点，社区围绕特定主题或话题增长
- en: Revisiting the data-intensive apps architecture
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重新审视数据密集型应用架构
- en: 'We have reached the final layer of the data-intensive apps architecture: the
    engagement layer. This layer focuses on how to synthesize, emphasize, and visualize
    the key context relevant information for the data consumers. A bunch of numbers
    in a console will not suffice to engage with end-users. It is critical to present
    the mass of information in a rapid, digestible, and attractive fashion.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经达到了数据密集型应用架构的最终层：参与层。这一层关注如何综合、强调和可视化数据消费者的关键上下文相关信息。在控制台中的一堆数字不足以吸引最终用户。将大量信息以快速、易消化和有吸引力的方式呈现是至关重要的。
- en: The following diagram sets the context of the chapter's focus highlighting the
    engagement layer.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表设置了本章重点的背景，突出了参与层。
- en: '![Revisiting the data-intensive apps architecture](img/B03968_06_01.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![重新审视数据密集型应用架构](img/B03968_06_01.jpg)'
- en: 'For Python plotting and visualizations, we have quite a few tools and libraries.
    The most interesting and relevant ones for our purpose are the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Python 绘图和可视化，我们有很多工具和库。对于我们的目的，最有趣和相关的是以下几个：
- en: '**Matplotlib** is the grandfather of the Python plotting libraries. Matplotlib
    was originally the brainchild of *John Hunter* who was an open source software
    proponent and established Matplotlib as one of the most prevalent plotting libraries
    both in the academic and the data scientific communities. Matplotlib allows the
    generation of plots, histograms, power spectra, bar charts, error charts, scatterplots,
    and so on. Examples can be found on the Matplotlib dedicated website at [http://matplotlib.org/examples/index.html](http://matplotlib.org/examples/index.html).'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Matplotlib** 是 Python 绘图库的鼻祖。Matplotlib 最初是 *John Hunter* 的创意，他是开源软件的支持者，并将
    Matplotlib 建立为学术界和数据科学界最流行的绘图库之一。Matplotlib 允许生成图表、直方图、功率谱、条形图、误差图、散点图等。示例可以在
    Matplotlib 专用网站 [http://matplotlib.org/examples/index.html](http://matplotlib.org/examples/index.html)
    上找到。'
- en: '**Seaborn**, developed by *Michael Waskom*, is a great library to quickly visualize
    statistical information. It is built on top of Matplotlib and integrates seamlessly
    with Pandas and the Python data stack, including Numpy. A gallery of graphs from
    Seaborn at [http://stanford.edu/~mwaskom/software/seaborn/examples/index.html](http://stanford.edu/~mwaskom/software/seaborn/examples/index.html)
    shows the potential of the library.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Seaborn**，由 *Michael Waskom* 开发，是一个快速可视化统计信息的优秀库。它建立在 Matplotlib 之上，并与 Pandas
    和 Python 数据堆栈（包括 Numpy）无缝集成。Seaborn 的图库展示了该库的潜力，网址为 [http://stanford.edu/~mwaskom/software/seaborn/examples/index.html](http://stanford.edu/~mwaskom/software/seaborn/examples/index.html)。'
- en: '**ggplot** is relatively new and aims to offer the equivalent of the famous
    ggplot2 from the R ecosystem for the Python data wranglers. It has the same look
    and feel of ggplot2 and uses the same grammar of graphics as expounded by Hadley
    Wickham. The ggplot the Python port is developed by the team at `yhat`. More information
    can be found at [http://ggplot.yhathq.com](http://ggplot.yhathq.com).'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ggplot** 相对较新，旨在为 Python 数据处理者提供 R 生态系统中著名的 ggplot2 的等价物。它具有与 ggplot2 相同的外观和感觉，并使用
    Hadley Wickham 阐述的相同图形语法。ggplot 的 Python 版本由 `yhat` 团队开发。更多信息可以在 [http://ggplot.yhathq.com](http://ggplot.yhathq.com)
    找到。'
- en: '**D3.js** is a very popular, JavaScript library developed by *Mike Bostock*.
    **D3** stands for **Data Driven Documents** and brings data to life on any modern
    browser leveraging HTML, SVG, and CSS. It delivers dynamic, powerful, interactive
    visualizations by manipulating the DOM, the Document Object Model. The Python
    community could not wait to integrate D3 with Matplotlib. Under the impulse of
    Jake Vanderplas, mpld3 was created with the aim of bringing `matplotlib` to the
    browser. Examples graphics are hosted at the following address: [http://mpld3.github.io/index.html](http://mpld3.github.io/index.html).'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**D3.js** 是由 *Mike Bostock* 开发的非常流行的 JavaScript 库。**D3** 代表 **数据驱动文档**，利用 HTML、SVG
    和 CSS 在任何现代浏览器上为数据赋予生命。它通过操作 DOM（文档对象模型）提供动态、强大、交互式的可视化效果。Python 社区迫不及待地想要将 D3
    与 Matplotlib 集成。在 Jake Vanderplas 的推动下，mpld3 被创建，旨在将 `matplotlib` 带到浏览器中。示例图形托管在以下地址：[http://mpld3.github.io/index.html](http://mpld3.github.io/index.html)。'
- en: '**Bokeh** aims to deliver high-performance interactivity over very large or
    streaming datasets whilst leveraging lot of the concepts of `D3.js` without the
    burden of writing some intimidating `javascript` and `css` code. Bokeh delivers
    dynamic visualizations on the browser with or without a server. It integrates
    seamlessly with Matplotlib, Seaborn and ggplot and renders beautifully in IPython
    notebooks or Jupyter notebooks. Bokeh is actively developed by the team at Continuum.io
    and is an integral part of the Anaconda Python data stack.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Bokeh**旨在在非常大或流式数据集上提供高性能的交互性，同时利用`D3.js`的许多概念，而不需要编写一些令人生畏的`javascript`和`css`代码。Bokeh在浏览器上提供动态可视化，无论是否有服务器。它与Matplotlib、Seaborn和ggplot无缝集成，并在IPython笔记本或Jupyter笔记本中呈现出色。Bokeh由Continuum.io团队积极开发，并是Anaconda
    Python数据堆栈的一个重要组成部分。'
- en: Bokeh server provides a full-fledged, dynamic plotting engine that materializes
    a reactive scene graph from JSON. It uses web sockets to keep state and update
    the HTML5 canvas using Backbone.js and Coffee-script under the hoods. Bokeh, as
    it is fueled by data in JSON, creates easy bindings for other languages such as
    R, Scala, and Julia.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Bokeh服务器提供了一个完整的、动态的绘图引擎，可以从JSON中实现一个反应式场景图。它使用Web套接字来保持状态，并使用Backbone.js和Coffee-script更新HTML5画布。由于Bokeh是由JSON中的数据驱动的，因此它为其他语言（如R、Scala和Julia）创建了简单的绑定。
- en: This gives a high-level overview of the main plotting and visualization library.
    It is not exhaustive. Let's move to concrete examples of visualizations.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这提供了主要绘图和可视化库的高级概述。这并不是详尽无遗的。让我们转向可视化的具体示例。
- en: Preprocessing the data for visualization
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为可视化预处理数据
- en: 'Before jumping into the visualizations, we will do some preparatory work on
    the data harvested:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行可视化之前，我们将对收集到的数据进行一些准备工作：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'For the purpose of our visualization activity, we will use a dataset of 7,540
    tweets. The key information is stored in the `tweet_text` column. We preview the
    data stored in the dataframe calling the `head()` function on the dataframe:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进行我们的可视化活动，我们将使用一组包含7,540条推文的数据集。关键信息存储在`tweet_text`列中。我们通过在数据框上调用`head()`函数来预览存储在数据框中的数据：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We will now create some utility functions to clean up the tweet text and parse
    the twitter date. First, we import the Python regular expression regex library
    `re` and the time library to parse dates and time:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将创建一些实用程序函数来清理推文文本并解析推特日期。首先，我们导入Python正则表达式regex库`re`和时间库来解析日期和时间：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We create a dictionary of regex that will be compiled and then passed as function:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建一个正则表达式的字典，将对其进行编译，然后作为函数传递：
- en: '**RT**: The first regex with key `RT` looks for the keyword `RT` at the beginning
    of the tweet text:'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**RT**：带有关键字`RT`的第一个正则表达式在推文文本开头寻找关键字`RT`：'
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**ALNUM**: The second regex with key `ALNUM` looks for words including alphanumeric
    characters and underscore sign preceded by the `@` symbol in the tweet text:'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ALNUM**：第二个带有关键字`ALNUM`的正则表达式寻找包括字母数字字符和下划线符号在内的单词，这些单词前面有`@`符号在推文文本中：'
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**HASHTAG**: The third regex with key `HASHTAG` looks for words including alphanumeric
    characters preceded by the `#` symbol in the tweet text:'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**HASHTAG**：带有关键字`HASHTAG`的第三个正则表达式在推文文本中寻找包括`#`符号在内的单词：'
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**SPACES**: The fourth regex with key `SPACES` looks for blank or line space
    characters in the tweet text:'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SPACES**：带有关键字`SPACES`的第四个正则表达式在推文文本中寻找空格或换行符：'
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**URL**: The fifth regex with key `URL` looks for `url` addresses including
    alphanumeric characters preceded with `https://` or `http://` markers in the tweet
    text:'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**URL**：带有关键字`URL`的第五个正则表达式在推文文本中寻找包括以`https://`或`http://`标记开头的`url`地址：'
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We create a utility function to identify whether a tweet is a retweet or an
    original tweet:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建一个实用程序函数来识别推文是转发还是原始推文：
- en: '[PRE8]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Then, we extract all user handles in a tweet:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们提取推文中的所有用户句柄：
- en: '[PRE9]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We also extract all hashtags in a tweet:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还提取推文中的所有标签：
- en: '[PRE10]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Extract all URL links in a tweet as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 提取推文中的所有URL链接如下：
- en: '[PRE11]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We strip all URL links and user handles preceded by `@` sign in a tweet text.
    This function will be the basis of the wordcloud we will build soon:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们剥离推文文本中以`@`符号开头的所有URL链接和用户句柄。这个函数将成为我们即将构建的词云的基础：
- en: '[PRE12]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We label the data so we can create groups of datasets for the wordcloud:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对数据进行标记，以便我们可以创建词云的数据集组：
- en: '[PRE13]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We parse the twitter date in the `yyyy-mm-dd hh:mm:ss` format:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们以`yyyy-mm-dd hh:mm:ss`格式解析推特日期：
- en: '[PRE14]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We preview the data prior to processing:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在处理之前预览数据：
- en: '[PRE15]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We create new dataframe columns by applying the utility functions described.
    We create a new column for `htag`, user handles, URLs, the text terms stripped
    from URLs, and unwanted characters and the labels. We finally parse the date:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过应用所描述的实用程序函数来创建新的数据框列。我们为`htag`、用户句柄、URL、从URL中剥离的文本术语和不需要的字符以及标签创建一个新列。最后我们解析日期：
- en: '[PRE16]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The following code gives a quick snapshot of the newly generated dataframe:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码快速展示了新生成的数据框的情况：
- en: '[PRE17]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We save the processed information in a CSV format. We have 7,540 records and
    13 columns. In your case, the output will vary according to the dataset you chose:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们以CSV格式保存处理过的信息。我们有7,540条记录和13列。在您的情况下，输出将根据您选择的数据集而有所不同：
- en: '[PRE18]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Gauging words, moods, and memes at a glance
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一瞥词语、情绪和迷因
- en: 'We are now ready to proceed with building the wordclouds which will give us
    a sense of the important words carried in those tweets. We will create wordclouds
    for the datasets harvested. Wordclouds extract the top words in a list of words
    and create a scatterplot of the words where the size of the word is correlated
    to its frequency. The more frequent the word in the dataset, the bigger will be
    the font size in the wordcloud rendering. They include three very different themes
    and two competing or analogous entities. Our first theme is obviously data processing
    and analytics, with Apache Spark and Python as our entities. Our second theme
    is the 2016 presidential election campaign, with the two contenders: Hilary Clinton
    and Donald Trump. Our last theme is the world of pop music with Justin Bieber
    and Lady Gaga as the two exponents.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在准备构建词云，这将让我们了解这些推文中携带的重要词语。我们将为收集的数据集创建词云。词云提取单词列表中的前几个词，并创建单词的散点图，其中单词的大小与其频率相关。数据集中单词的频率越高，词云呈现的字体大小就越大。它们包括三个非常不同的主题和两个竞争或类似的实体。我们的第一个主题显然是数据处理和分析，其中Apache
    Spark和Python是我们的实体。我们的第二个主题是2016年总统竞选活动，有两位竞争者：希拉里·克林顿和唐纳德·特朗普。我们最后的主题是流行音乐界，贾斯汀·比伯和Lady
    Gaga是两位代表。
- en: Setting up wordcloud
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置词云
- en: 'We will illustrate the programming steps by analyzing the spark related tweets.
    We load the data and preview the dataframe:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过分析与Spark相关的推文来说明编程步骤。我们加载数据并预览数据框：
- en: '[PRE19]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Note
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The wordcloud library we will use is the one developed by Andreas Mueller and
    hosted on his GitHub account at [https://github.com/amueller/word_cloud](https://github.com/amueller/word_cloud).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用的词云库是由Andreas Mueller开发的，并托管在他的GitHub帐户上[https://github.com/amueller/word_cloud](https://github.com/amueller/word_cloud)。
- en: 'The library requires **PIL** (short for **Python Imaging Library**). PIL is
    easily installable by invoking `conda install pil`. PIL is a complex library to
    install and is not yet ported on Python 3.4, so we need to run a Python 2.7+ environment
    to be able to see our wordcloud:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 该库需要**PIL**（即**Python Imaging Library**的缩写）。PIL可以通过调用`conda install pil`轻松安装。PIL是一个复杂的库，尚未移植到Python
    3.4，因此我们需要运行Python 2.7+环境才能看到我们的词云：
- en: '[PRE20]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The following packages will be downloaded:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 将下载以下软件包：
- en: '[PRE21]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The following packages will be UPDATED:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 将更新以下软件包：
- en: '[PRE22]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Next, we install the wordcloud library:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们安装词云库：
- en: '[PRE23]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Creating wordclouds
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建词云
- en: At this stage, we are ready to invoke the wordcloud program with the generated
    list of terms from the tweet text.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，我们准备使用推文文本生成的术语列表调用词云程序。
- en: 'Let''s get started with the wordcloud program by first calling `%matplotlib`
    inline to display the wordcloud in our notebook:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过首先调用`％matplotlib` inline来开始词云程序，以在我们的笔记本中显示词云：
- en: '[PRE24]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'We convert the dataframe `txt_terms` column into a list of words. We make sure
    it is all converted into the `str` type to avoid any bad surprises and check the
    list''s first four records:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将数据框`txt_terms`列转换为单词列表。我们确保将其全部转换为`str`类型，以避免任何意外，并检查列表的前四条记录：
- en: '[PRE25]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We first call the Matplotlib and the wordcloud libraries:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先调用Matplotlib和词云库：
- en: '[PRE26]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'From the input list of terms, we create a unified string of terms separated
    by a whitespace as the input to the wordcloud program. The wordcloud program removes
    stopwords:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 从输入的术语列表中，我们创建一个由空格分隔的术语统一字符串作为词云程序的输入。词云程序会删除停用词：
- en: '[PRE27]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Here, we can visualize the wordclouds for Apache Spark and Python. Clearly,
    in the case of Spark, *Hadoop*, *big data*, and *analytics* are the memes, while
    Python recalls the root of its name Monty Python with a strong focus on *developer*,
    *apache spark*, and programming with some hints to java and ruby.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到Apache Spark和Python的词云。显然，在Spark的情况下，“Hadoop”、“大数据”和“分析”是主题词，而Python则回顾了其名称Monty
    Python的根源，专注于“开发人员”、“apache spark”和一些涉及到java和ruby的编程。
- en: '![Creating wordclouds](img/B03968_06_02.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![创建词云](img/B03968_06_02.jpg)'
- en: 'We can also get a glimpse in the following wordclouds of the words preoccupying
    the North American 2016 presidential election candidates: Hilary Clinton and Donald
    Trump. Seemingly Hilary Clinton is overshadowed by the presence of her opponents
    Donald Trump and Bernie Sanders, while Trump is heavily centered only on himself:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以从以下词云中看到北美2016年总统候选人希拉里·克林顿和唐纳德·特朗普所关注的词语。看起来希拉里·克林顿被她的对手唐纳德·特朗普和伯尼·桑德斯所掩盖，而特朗普则只关注自己：
- en: '![Creating wordclouds](img/B03968_06_03.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![创建词云](img/B03968_06_03.jpg)'
- en: Interestingly, in the case of Justin Bieber and Lady Gaga, the word *love* appears.
    In the case of Bieber, *follow* and *belieber* are key words, while *diet*, *weight
    loss*, and *fashion* are the preoccupations for the Lady Gaga crowd.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，在贾斯汀·比伯和Lady Gaga的情况下，出现了“爱”这个词。在比伯的情况下，“关注”和“belieber”是关键词，而在Lady Gaga的情况下，“节食”、“减肥”和“时尚”是她的关注点。
- en: '![Creating wordclouds](img/B03968_06_04.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![创建词云](img/B03968_06_04.jpg)'
- en: Geo-locating tweets and mapping meetups
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 地理定位推文和标记聚会
- en: Now, we will dive into the creation of interactive maps with Bokeh. First, we
    create a world map where we geo-locate sample tweets and, on moving our mouse
    over these locations, we can see the users and their respective tweets in a hover
    box.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将深入使用Bokeh创建交互地图。首先，我们创建一个世界地图，在地图上标出样本推文的地理位置，当我们的鼠标移动到这些位置时，我们可以在悬停框中看到用户及其相应的推文。
- en: The second map is focused on mapping upcoming meetups in London. It could be
    an interactive map that would act as a reminder of date, time, and location for
    upcoming meetups in a specific city.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 第二张地图专注于标记伦敦即将举行的聚会。它可以是一个交互式地图，作为特定城市即将举行的聚会的日期、时间和地点的提醒。
- en: Geo-locating tweets
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 地理定位推文
- en: 'The objective is to create a world map scatter plot of the locations of important
    tweets on the map, and the tweets and authors are revealed on hovering over these
    points. We will go through three steps to build this interactive visualization:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 目标是在地图上创建重要推文位置的世界地图散点图，悬停在这些点上可以显示推文和作者。我们将通过三个步骤来构建这个交互式可视化：
- en: Create the background world map by first loading a dictionary of all the world
    country boundaries defined by their respective longitude and latitudes.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先通过加载包含各个世界国家边界的字典，定义它们的经度和纬度，创建背景世界地图。
- en: Load the important tweets we wish to geo-locate with their respective coordinates
    and authors.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载我们希望通过其相应坐标和作者进行地理定位的重要推文。
- en: Finally, scatter plot on the world map the tweets coordinates and activate the
    hover tool to visualize interactively the tweets and author on the highlighted
    dots on the map.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在世界地图上绘制推文坐标的散点图，并激活悬停工具，以交互方式可视化地图上突出点的推文和作者。
- en: 'In step one, we create a Python list called data that will contain all the
    world countries boundaries with their respective latitude and longitude:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一步中，我们创建了一个名为data的Python列表，其中包含所有世界国家边界及其相应的纬度和经度：
- en: '[PRE28]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'In step two, we load a sample set of important tweets that we wish to visualize
    with their respective geo-location information:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二步中，我们加载了一组希望可视化的重要推文样本及其相应的地理位置信息：
- en: '[PRE29]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: In step three, we first imported all the necessary Bokeh libraries. We will
    instantiate the output in the Jupyter Notebook. We get the world countries boundary
    information loaded. We get the geo-located tweet data. We instantiate the Bokeh
    interactive tools such as wheel and box zoom as well as the hover tool.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在第三步中，我们首先导入了所有必要的Bokeh库。我们将在Jupyter Notebook中实例化输出。我们加载了世界各国的边界信息。我们获取了地理定位的推文数据。我们实例化了Bokeh交互工具，如滚动和框选放大，以及悬停工具。
- en: '[PRE30]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'We are now ready to layer the various elements gathered into an object figure
    called **p**. Define the title, width, and height of **p**. Attach the tools.
    Create the world map background by patches with a light background color and borders.
    Scatter plot the tweets according to their respective geo-coordinates. Then, activate
    the hover tool with the users and their respective tweet. Finally, render the
    picture on the browser. The code is as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经准备好将收集到的各种元素层叠到一个名为**p**的对象图中。定义**p**的标题、宽度和高度。附加工具。通过具有浅色背景和边界的补丁创建世界地图背景。根据其相应的地理坐标绘制推文的散点图。然后，激活悬停工具，显示用户及其相应的推文。最后，在浏览器上渲染图片。代码如下：
- en: '[PRE31]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The following code gives an overview of the world map with the red dots representing
    the locations of the tweets'' origins:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码概述了世界地图，红点代表推文来源的位置：
- en: '![Geo-locating tweets](img/B03968_06_05.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![地理定位推文](img/B03968_06_05.jpg)'
- en: 'We can hover on a specific dot to reveal the tweets in that location:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以悬停在特定的点上，以显示该位置的推文：
- en: '![Geo-locating tweets](img/B03968_06_06.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![地理定位推文](img/B03968_06_06.jpg)'
- en: 'We can zoom into a specific location:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以放大到特定位置：
- en: '![Geo-locating tweets](img/B03968_06_07.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![地理定位推文](img/B03968_06_07.jpg)'
- en: 'Finally, we can reveal the tweets in the given zoomed-in location:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以在给定的放大位置中显示推文：
- en: '![Geo-locating tweets](img/B03968_06_08.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![地理定位推文](img/B03968_06_08.jpg)'
- en: Displaying upcoming meetups on Google Maps
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Google地图上显示即将举行的聚会
- en: Now, our objective is to focus on upcoming meetups in London. We are mapping
    three meetups **Data Science London**, **Apache Spark**, and **Machine Learning**.
    We embed a Google Map within a Bokeh visualization and geo-locate the three meetups
    according to their coordinates and get information such as the name of the upcoming
    event for each meetup with a hover tool.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的目标是专注于伦敦即将举行的聚会。我们正在对**Data Science London**、**Apache Spark**和**Machine
    Learning**三次聚会进行地图绘制。我们在Bokeh可视化中嵌入了Google地图，并根据它们的坐标进行地理定位，并使用悬停工具获取每次聚会的名称等信息。
- en: 'First, import all the necessary Bokeh libraries:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，导入所有必要的Bokeh库：
- en: '[PRE32]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'We will instantiate the Google Map that will act as the substrate upon which
    our Bokeh visualization will be layered:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将实例化Google地图，它将作为我们的Bokeh可视化的基础：
- en: '[PRE33]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Instantiate the Bokeh object plot from the class `GMapPlot` with the dimensions
    and map options from the previous step:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 从上一步的类`GMapPlot`中实例化Bokeh对象绘图，使用先前步骤的尺寸和地图选项：
- en: '[PRE34]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Bring in the information from our three meetups we wish to plot and get the
    information by hovering above the respective coordinates:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 引入我们希望绘制的三次聚会的信息，并通过悬停在相应坐标上获取信息：
- en: '[PRE35]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Define the dots to be drawn on the Google Map:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 定义要在Google地图上绘制的点：
- en: '[PRE36]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Define the stings for the Bokeh tools to be used in this visualization:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 定义要在此可视化中使用的Bokeh工具的字符串：
- en: '[PRE37]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Activate the `hover` tool with the information that will be carried:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 激活`hover`工具，并携带信息：
- en: '[PRE38]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Render the plot that gives a pretty good view of London:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染给出伦敦相当不错的视图的绘图：
- en: '![Displaying upcoming meetups on Google Maps](img/B03968_06_09.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![在Google地图上显示即将举行的聚会](img/B03968_06_09.jpg)'
- en: 'Once we hover on a highlighted dot, we can get the information of the given
    meetup:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们悬停在突出显示的点上，我们就可以获取给定聚会的信息：
- en: '![Displaying upcoming meetups on Google Maps](img/B03968_06_10.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![在Google地图上显示即将举行的聚会](img/B03968_06_10.jpg)'
- en: 'Full smooth zooming capability is preserved, as the following screenshot shows:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的平滑缩放功能得到保留，如下面的截图所示：
- en: '![Displaying upcoming meetups on Google Maps](img/B03968_06_11.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![在Google地图上显示即将举行的聚会](img/B03968_06_11.jpg)'
- en: Summary
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we focused on few visualization techniques. We saw how to build
    wordclouds and their intuitive power to reveal, at a glance, lots of the key words,
    moods, and memes carried through thousands of tweets.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们专注于一些可视化技术。我们看到了如何构建词云及其直观的力量，一眼就可以揭示成千上万条推文中的关键词、情绪和流行词。
- en: We then discussed interactive mapping visualizations using Bokeh. We built a
    world map from the ground up and created a scatter plot of critical tweets. Once
    the map was rendered on the browser, we could interactively hover from dot to
    dot and reveal the tweets originating from different parts of the world.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们讨论了使用Bokeh进行交互式地图可视化。我们从零开始构建了一张世界地图，并创建了一个关键推文的散点图。一旦地图在浏览器上呈现出来，我们就可以交互式地从一个点悬停到另一个点，并显示来自世界各地不同地区的推文。
- en: Our final visualization was focused on mapping upcoming meetups in London on
    Spark, data science, and machine learning and their respective topics, making
    a beautiful interactive visualization with an actual Google Map.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最终的可视化重点是在Spark、数据科学和机器学习上映射伦敦即将举行的聚会，以及它们各自的主题，使用实际的谷歌地图制作了一个美丽的交互式可视化。
