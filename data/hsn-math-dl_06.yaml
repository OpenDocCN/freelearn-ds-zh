- en: Graph Theory
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图论
- en: Now that we have got a taste of linear algebra, calculus, statistics, and optimization,
    it is time to move on to a very fascinating topic, known as graph theory. This
    involves, as the name suggests, the study of graphs, which we use to model relationships
    between objects. We use these graphs to help visualize and analyze problems, which
    in turn helps us solve them.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经对线性代数、微积分、统计学和优化有了一定了解，接下来就是学习一个非常有趣的主题——图论。顾名思义，图论研究的是图，图被用来模拟物体之间的关系。我们通过图来帮助可视化和分析问题，从而帮助我们解决这些问题。
- en: Graph theory is a very important field and is used for a variety of problems,
    including page ranking in search engines, social network analysis, and in a GPS
    to find the best route home. It is also important for us to further our understanding
    of deep neural networks since the majority of them are based on a type of graph
    known as a **directed acyclic graph** (**DAG**).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 图论是一个非常重要的领域，应用于各种问题，包括搜索引擎中的网页排名、社交网络分析、以及在GPS中找到回家的最佳路线。它对于我们深入理解深度神经网络也至关重要，因为大多数神经网络都是基于一种叫做**有向无环图**（**DAG**）的图类型。
- en: Covering everything in graph theory goes beyond the scope of this chapter (and
    this book), but we will cover everything that is important for developing a deeper
    understanding of neural networks.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图论的内容远超本章（以及本书）的范围，但我们会涵盖一些对于深入理解神经网络至关重要的内容。
- en: 'The topics that are covered in this chapter are as follows:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Understanding the basic concepts and terminology
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解基本概念和术语
- en: Adjacency matrix
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 邻接矩阵
- en: Types of graphs
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图的类型
- en: Graph Laplacian
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图拉普拉斯算子
- en: Understanding the basic concepts and terminology
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解基本概念和术语
- en: 'Graph theory was first introduced in the 18th century by Leonhard Euler to
    solve a famous problem known as the **Königsberg bridge problem**, which asks
    whether it is possible to walk around the Königsberg bridge while crossing over
    each of the seven bridges exactly once. The bridge looks as follows:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 图论最早是由**莱昂哈德·欧拉**在18世纪提出的，目的是解决一个著名的问题——**哥尼斯堡桥问题**，该问题问的是是否可以在不重复的情况下，经过所有七座桥梁，走完哥尼斯堡的所有桥梁。桥的形态如下所示：
- en: '![](img/bd858c4c-fd3e-4815-9e1c-f6c3bbff3541.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bd858c4c-fd3e-4815-9e1c-f6c3bbff3541.png)'
- en: Before we move on, try it out for yourself by using your finger to trace along
    the path or draw it and trace it with a pencil. Did you manage to find a solution?
    It's alright if you didn't!
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，试着自己动手操作，用手指沿路径滑动，或者画下来用铅笔描摹。你能找到解决方案吗？如果没有也没关系！
- en: 'Let''s stop for a moment and ask ourselves what exactly a graph is. A graph
    (*G*) is a mathematical structure made up of two sets—vertices (*V(G)*) and edges (*E(G)*).
    Two vertices (*v[1]* and *v[2]*) are connected if there is an edge (*e* or *(v[1],
    v[2])*) between them. Now that that''s settled, there are some rules associated
    with graphs that are important to our understanding of them. They are as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们停下来思考一下，究竟什么是图。图（*G*）是由两个集合组成的数学结构——顶点（*V(G)*)和边（*E(G)*）。如果两个顶点（*v[1]*和*v[2]*）之间有一条边（*e*或*(v[1],
    v[2])*）连接，它们就是相连的。既然这已经解决了，我们需要了解图的一些规则，这些规则对于理解图非常重要。规则如下：
- en: If [![](img/73ef2410-22d1-4e17-b7c5-e785edf5b06b.png)], then *v[1]* and *v[2]* are
    adjacent (connected/neighbors); but if [![](img/9345c28f-6993-4c90-9d00-1ab2c3b6518a.png)],
    then *v[1]* and *v[2]* are non-adjacent (not connected/not neighbors).
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果[![](img/73ef2410-22d1-4e17-b7c5-e785edf5b06b.png)]，则*v[1]*与*v[2]*相邻（连接/邻居）；但如果[![](img/9345c28f-6993-4c90-9d00-1ab2c3b6518a.png)]，则*v[1]*与*v[2]*不相邻（不连接/不是邻居）。
- en: If *v[1]* is adjacent to *v[2]*, then we can say that the neighborhood of *v[1]* (denoted
    as [![](img/da83ba4f-80bf-4c35-b505-55d3fc1b13c4.png)]) is the set of vertices
    that are connected to *v[1]*. We write this as [![](img/0dd6ac04-174c-472d-8552-a82d6d88db89.png)].
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果*v[1]*与*v[2]*相邻，那么我们可以说*v[1]*的邻域（记作[![](img/da83ba4f-80bf-4c35-b505-55d3fc1b13c4.png)]）是与*v[1]*相连接的顶点集合。我们写作[![](img/0dd6ac04-174c-472d-8552-a82d6d88db89.png)]。
- en: If [![](img/3378ba88-e0e4-4bc0-b85d-22919dc75865.png)], then ![](img/0138795d-1306-41f3-bc97-7ab2162451a0.png) is
    incident to *v[1]* and *v[2]* (that is, *v[1]* and *v[2]* are ![](img/680b9810-2665-42aa-914b-9e3dd5345afc.png)'s
    endpoints).
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果[![](img/3378ba88-e0e4-4bc0-b85d-22919dc75865.png)]，则![](img/0138795d-1306-41f3-bc97-7ab2162451a0.png)与*v[1]*和*v[2]*相关（即*v[1]*和*v[2]*是![](img/680b9810-2665-42aa-914b-9e3dd5345afc.png)的端点）。
- en: If *G* has *n* vertices, then *v[1]* can have, at most, *n-1* neighbors.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果*G*有*n*个顶点，那么*v[1]*最多可以有*n-1*个邻居。
- en: If *v[1]* has neighbors, then the degree of *v[1]* is the number of neighbors
    (or incidences) it has. We can write this as [![](img/66cf6e82-e339-478c-89a1-9c5122456125.png)].
    The minimum degree of a vertex in the graph is denoted as [![](img/d4013c4b-a0a4-467e-93fd-0c2bb66369ad.png)] and
    the maximum degree of a vertex in the graph is denoted as [![](img/7820024d-0549-400d-a711-8e7b7c5b5f79.png)].
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 *v[1]* 有邻居，那么 *v[1]* 的度数就是它的邻居数量（或相交次数）。我们可以将其表示为 [![](img/66cf6e82-e339-478c-89a1-9c5122456125.png)]。图中顶点的最小度数用
    [![](img/d4013c4b-a0a4-467e-93fd-0c2bb66369ad.png)] 表示，最大度数用 [![](img/7820024d-0549-400d-a711-8e7b7c5b5f79.png)]
    表示。
- en: If [![](img/cd56360c-ca05-46be-b207-51fa5e0bdd8f.png)], then it is an isolated
    vertex.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 [![](img/cd56360c-ca05-46be-b207-51fa5e0bdd8f.png)]，那么它就是一个孤立的顶点。
- en: 'Now that we know what the fundamental rules of graphs are, let''s revisit the
    preceding problem we introduced and see if we can work out its solution. We can
    redraw the bridge problem as a graph, as in the following diagram (refer to the
    color version provided in the graphics bundle):'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了图形的基本规则，让我们回到之前提到的问题，看看我们能否找到它的解决方案。我们可以将桥问题重新绘制成图形，如下图所示（请参考图形包中提供的彩色版本）：
- en: '![](img/a56d7c27-f3e2-45dd-a04e-9de4073e6d25.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a56d7c27-f3e2-45dd-a04e-9de4073e6d25.png)'
- en: 'Here, we have the following:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们有以下内容：
- en: The green vertex is *A*
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绿色的顶点是 *A*
- en: The red vertex is *B*
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 红色的顶点是 *B*
- en: The blue vertex is *C*
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 蓝色的顶点是 *C*
- en: The orange vertex is *D*
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 橙色的顶点是 *D*
- en: The curved edge connecting *A* and *B* is bridge *a*
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接 *A* 和 *B* 的弯曲边是桥 *a*
- en: The straight edge connecting *A* and *B* is bridge *b*
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接 *A* 和 *B* 的直边是桥 *b*
- en: The curved edge connecting *A* and *C* is bridge *c*
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接 *A* 和 *C* 的弯曲边是桥 *c*
- en: The straight edge connecting *A* and *B* is bridge *d*
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接 *A* 和 *B* 的直边是桥 *d*
- en: The straight edge connecting *A* and *D* is bridge *e*
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接 *A* 和 *D* 的直边是桥 *e*
- en: The straight edge connecting *B* and *D* is bridge *f*
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接 *B* 和 *D* 的直边是桥 *f*
- en: The straight edge connecting *C* and *D* is bridge *g*
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接 *C* 和 *D* 的直边是桥 *g*
- en: If we look at the graph and traverse over the edges, we can easily observe that
    there is no solution to the Königsberg bridge problem, regardless of what path
    we take. However, if we were to add an extra path from *D* to *A*, *D* to *B*,
    or *D* to *C*, then we do in fact have a solution to this problem.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看图形并沿着边遍历，我们可以轻松观察到无论选择什么路径，都无法解决哥尼斯堡桥问题。然而，如果我们在 *D* 和 *A*、*D* 和 *B*，或者
    *D* 和 *C* 之间添加一条额外的路径，那么我们就能确实解决这个问题。
- en: 'Now, let''s suppose we have a bunch of polyhedrons. In geometry, polyhedra
    are three-dimensional objects, such as tetrahedrons (pyramids), cubes, dipiramids,
    deltoidals, dodecahedrons, pentagonal hexacontahedrons, and so on (don''t worry,
    you don''t need to know what all of them are). In the following diagram, we have
    two different polyhedrons, along with their corresponding graphs:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设我们有一堆多面体。在几何学中，多面体是三维物体，如四面体（金字塔）、立方体、双锥体、菱形多面体、十二面体、五角六十面体等（不用担心，你不需要了解它们的所有细节）。在下图中，我们有两个不同的多面体及其对应的图形：
- en: '![](img/2c8c0ab5-4e1d-47fc-b30d-8d42d48024e4.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c8c0ab5-4e1d-47fc-b30d-8d42d48024e4.png)'
- en: 'Let''s observe the shapes and their graphs for a moment. As you can see, the
    graph looks a bit different from the actual structure but still captures the properties
    of the shape. Each graph here has vertices (*V*) and edges (*E*), which we already
    know. But there is one additional property—faces (*F*). Using the preceding diagrams,
    we can deduce a general rule that captures the relationships between the vertices,
    edges, and faces. It is as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们观察这些形状及其图形片刻。正如你所看到的，图形看起来与实际结构有些不同，但仍然捕捉到了形状的特性。这里的每个图形都有顶点（*V*）和边（*E*），这些我们已经知道。但还有一个额外的属性——面（*F*）。通过之前的图形，我们可以推导出一个通用规则，捕捉顶点、边和面之间的关系。它是：
- en: '![](img/7e87d716-137e-4267-8f0f-bf8042fe9ae1.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7e87d716-137e-4267-8f0f-bf8042fe9ae1.png)'
- en: Here, |*V*| = *n*, |*E*| = *m*, and |*F*| = *r*. To verify this, let's take
    a look at the preceding graphs.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，|*V*| = *n*，|*E*| = *m*，|*F*| = *r*。为了验证这一点，让我们看一下之前的图形。
- en: 'In the case of the cube, there are 8 vertices, 12 edges, and 6 faces, so we
    have the following:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在立方体的情况下，有8个顶点，12条边和6个面，所以我们有以下内容：
- en: '![](img/c370e747-b1f3-49e7-aa96-f005809f37a4.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c370e747-b1f3-49e7-aa96-f005809f37a4.png)'
- en: 'In the case of the octahedron, there are 6 vertices, 12 edges, and 8 faces,
    so we have the following:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在八面体的情况下，有6个顶点，12条边和8个面，所以我们有以下内容：
- en: '![](img/0bf004ea-4692-49e5-a9c8-0361c1d8f161.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0bf004ea-4692-49e5-a9c8-0361c1d8f161.png)'
- en: 'Now that we understand the basics, it is time for us to learn about what is
    often referred to as the first theorem in graph theory. Suppose we have a graph
    that has *n* vertices and *m* edges. Then, we can observe the following:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们理解了基本概念，是时候学习图论中的第一定理了。假设我们有一个图，图中有 *n* 个顶点和 *m* 条边。那么，我们可以观察到以下几点：
- en: '![](img/d5cbcc94-dcf6-49de-b108-cc27dca1de6d.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d5cbcc94-dcf6-49de-b108-cc27dca1de6d.png)'
- en: 'This tells us that the sum of the degrees of each vertex of the graph is twice
    the number of edges in the graph. Alternatively, we can write this as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉我们，图中每个顶点的度数之和是图中边数的两倍。或者我们可以写成如下形式：
- en: '![](img/4ad3a689-993d-4aab-8b17-6a4d00c4f0af.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4ad3a689-993d-4aab-8b17-6a4d00c4f0af.png)'
- en: Adjacency matrix
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 邻接矩阵
- en: As you can imagine, writing down all the pairs of connected nodes (that is,
    those that have edges between them) to keep track of the relationships in a graph
    can get tedious, especially as graphs can get very large. For this reason, we
    use what is known as the adjacency matrix, which is the fundamental mathematical
    representation of a graph.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所想，记录下所有连接节点的对（即那些有边连接的节点对）来跟踪图中的关系可能会变得乏味，特别是当图非常庞大时。因此，我们使用被称为邻接矩阵的方式，它是图的基本数学表示。
- en: 'Let''s suppose we have a graph with *n* nodes, each of which has a unique integer
    label ([![](img/53ea9237-a078-40ef-9b41-885f16fa745a.png)]) so that we can refer
    to it easily and without any ambiguity whatsoever. For the sake of simplicity,
    in this example, *n *= 6\. Then, this graph''s corresponding adjacency matrix
    is as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个图，其中有 *n* 个节点，每个节点都有一个独特的整数标签（[![](img/53ea9237-a078-40ef-9b41-885f16fa745a.png)]），这样我们可以轻松地引用它，且毫无歧义。为了简化起见，在这个例子中，*n*
    = 6。那么，这个图的对应邻接矩阵如下：
- en: '![](img/a6943f34-cf84-43b5-a5d2-f057eddbbdb1.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a6943f34-cf84-43b5-a5d2-f057eddbbdb1.png)'
- en: Let's take a look at the matrix for a moment and see why it is the way it is.
    The first thing that immediately pops out is that the matrix has a size of 6 ×
    6 (or *n* × *n*) because size is important to us. Next, we notice that it is symmetric
    and there are only zeros along the diagonal. But why? What is the significance
    of it being written this way?
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下这个矩阵，看看它为什么是这样的。首先立刻显现出来的是，这个矩阵的大小是6 × 6（或 *n* × *n*），因为大小对我们来说很重要。接下来，我们注意到它是对称的，并且沿对角线只有零。那么为什么呢？它以这种方式写出来有什么意义？
- en: 'If we look at the diagram of the graph in the preceding section, we can see
    that the edges are as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看前一部分中的图形图表，可以看到边缘如下：
- en: '![](img/7861fc62-3732-4635-85f3-fd61e397b284.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7861fc62-3732-4635-85f3-fd61e397b284.png)'
- en: 'Looking back at the matrix at either the upper triangle or lower triangle,
    we can see that there are seven 1s at specific *(i, j)* locations. Each 1 represents
    an edge between two numbered nodes, and there is a 0 if there is no edge between
    the two nodes. We can generalize this and write the following:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 回头看矩阵的上三角或下三角部分，我们可以看到在特定的 *（i，j）* 位置上有七个1。每个1代表两个编号节点之间有一条边，如果两个节点之间没有边，则为0。我们可以将其概括并写成如下形式：
- en: '![](img/7e646d82-108f-42bb-a5c5-dc803e962cf9.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7e646d82-108f-42bb-a5c5-dc803e962cf9.png)'
- en: The reason for there only being zeros along the diagonal is that there are no
    self-edges; that is, no node has a connection back to itself. This is referred
    to as a simple graph. However, there are also more complex graphs, such as those
    with self-edges and multi-edges.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 之所以对角线上只有零，是因为没有自环；也就是说，没有节点与自身连接。这被称为简单图。然而，也有更复杂的图，如带有自环和多重边的图。
- en: 'The difference between graphs with multi-edges and simple graphs is that there
    can be one or more edges between a pair of nodes in a multi-edge graph. To get
    a clearer understanding of this, let''s consider the following adjacency matrix,
    where we can see that there are now self-edges and multiple edges between pairs
    of nodes:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 多重边图和简单图的区别在于，在多重边图中，一对节点之间可以有一条或多条边。为了更清楚地理解这一点，假设我们有如下的邻接矩阵，在这个矩阵中我们可以看到现在存在自环和节点对之间的多重边：
- en: '![](img/20d57bb8-b98d-4c6f-a44f-e416d609f4ef.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/20d57bb8-b98d-4c6f-a44f-e416d609f4ef.png)'
- en: There are some notable differences in this adjacency matrix compared with that
    of the simple graph. The first thing we notice is that the matrix no longer consists
    of just ones (1) and zeroes (0). What do you think the numbers represent? In this
    adjacency matrix, a double-edge between two nodes is written as *A[i,j]* = *A[j,i]* =
    2\. Self-edges, on the other hand, are those that go from *i* to *i*; that is,
    we can write this as *A*[*i,i*] and it is equal to 2\. The reason for it being
    equal to 2 and not 1 is that the edge is connected to *i* at both ends (and it
    also makes things easier when doing calculations).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 与简单图的邻接矩阵相比，这个邻接矩阵有一些显著的不同。我们首先注意到矩阵不再仅由1和0构成。你认为这些数字代表什么呢？在这个邻接矩阵中，两个节点之间的双向边写作
    *A[i,j]* = *A[j,i]* = 2。自环则是那些从 *i* 到 *i* 的边；也就是说，我们可以写成 *A*[*i,i*]，并且它等于2。之所以是2而不是1，是因为这条边在
    *i* 的两端都有连接（而且在做计算时，这样处理也更方便）。
- en: Types of graphs
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图的类型
- en: In the previous section, we learned about the basics of graph theory, and as
    you saw, this is a very powerful mathematical tool that can be used for a plethora
    of tasks in various fields. However, there is no one-size-fits-all solution and
    so we need additional tools to help us because each problem is unique. In this
    section, we will learn about the various types of graphs and their use cases and
    strengths. This includes weighted graphs, directed graphs, multilayer graphs,
    dynamic graphs, and tree graphs.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们学习了图论的基础知识，正如你所看到的，这是一个非常强大的数学工具，可以用于各个领域中的许多任务。然而，没有一种通用的解决方案，因此我们需要额外的工具来帮助我们，因为每个问题都是独一无二的。在这一节中，我们将学习各种类型的图及其应用场景和优缺点。这包括加权图、有向图、多层图、动态图和树图。
- en: Weighted graphs
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加权图
- en: So far, we have seen graphs that have a sort of binary representation, where
    1 represents the existence of an edge between two nodes and 0 signifies that there
    is no connection between two edges. We have also seen graphs that have self-edges
    and multiple edges. However, sometimes we may want to represent the strength between
    the two nodes instead, which we represent as a weight. The greater the weight,
    the greater the strength.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了具有某种二进制表示的图，其中1表示两个节点之间存在边，而0表示两个节点之间没有连接。我们还看到了包含自环和多重边的图。然而，有时我们可能希望表示节点之间的强度，这就是通过权重来表示的。权重越大，强度也越大。
- en: These sorts of graphs can be used in a variety of settings, such as in social
    networks where the weight represents how frequently two people communicate with
    each other, which we can use to determine their closeness. In the adjacency matrix
    for a weighted graph, each *A[i,j]* instance represents the weight between nodes
    *i* and *j*.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的图可以在多种场景中使用，比如在社交网络中，边的权重表示两个人之间的交流频率，我们可以用它来判断他们之间的亲密度。在加权图的邻接矩阵中，每个 *A[i,j]*
    实例表示节点 *i* 和 *j* 之间的权重。
- en: 'Let''s suppose we have the following adjacency matrix:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有以下的邻接矩阵：
- en: '![](img/023e1dd5-8f3f-4061-be40-cda7ef3054ba.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/023e1dd5-8f3f-4061-be40-cda7ef3054ba.png)'
- en: We can see that the weight (or strength) between nodes 1 and 2 is twice that
    of the weight between nodes 1 and 3, and the weight between nodes 2 and 3 is four
    times that between nodes 1 and 3.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，节点1和节点2之间的权重（或强度）是节点1和节点3之间的两倍，而节点2和节点3之间的权重是节点1和节点3之间的四倍。
- en: The weight on these edges doesn't necessarily have to represent how strong the
    connection between two nodes is; it could also represent the time it takes to
    travel from one node to another or the distance between two nodes.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这些边上的权重不一定非要代表两个节点之间连接的强度；它也可以表示从一个节点到另一个节点的旅行时间或两节点之间的距离。
- en: Directed graphs
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 有向图
- en: The difference between regular graphs and directed graphs is that the edges
    in regular graphs could go in either direction, which is why the adjacency matrix
    was symmetric. So, if there is an edge between node *i* and node *j*, then we
    can go from *i* to *j* or from *j* to *i*. However, in the case of directed graphs,
    the edges have a direction. These edges are directed edges and can only go in
    one direction.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 普通图和有向图之间的区别在于，普通图中的边可以任意方向连接，这就是为什么邻接矩阵是对称的。如果节点 *i* 和节点 *j* 之间有一条边，那么我们可以从
    *i* 到 *j*，也可以从 *j* 到 *i*。然而，在有向图的情况下，边是有方向的。这些边是有向边，只能朝一个方向延伸。
- en: 'The adjacency matrix for this type of graph is as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型图的邻接矩阵如下所示：
- en: '![](img/ee858687-837e-43d6-9630-0f9ac1d45772.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ee858687-837e-43d6-9630-0f9ac1d45772.png)'
- en: 'Now, suppose we have the following graph:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设我们有以下图：
- en: '![](img/70fcaab7-b1a3-4285-af12-dae3794cccdc.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/70fcaab7-b1a3-4285-af12-dae3794cccdc.png)'
- en: 'Then, its corresponding adjacency matrix is as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，它对应的邻接矩阵如下：
- en: '![](img/3866f9cf-12bd-4530-aac1-a8f379a4208e.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3866f9cf-12bd-4530-aac1-a8f379a4208e.png)'
- en: As you can see, this matrix is asymmetric (not symmetric). For example, node
    3 goes to node 2 and node 6 goes to node 4, but they don't ever go in the opposite
    direction.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这个矩阵是不对称的（不是对称的）。例如，节点3指向节点2，节点6指向节点4，但它们不会反向连接。
- en: As in the case of undirected networks, directed networks, too, can have multiple
    edges and self-edges. However, in this case, if there is a self-edge, then the
    element along the diagonal will hold a value of 1 instead of 2.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 和无向网络一样，有向网络也可以有多个边和自环。然而，在这种情况下，如果存在自环，那么对角线上的元素将为1，而不是2。
- en: Directed acyclic graphs
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 有向无环图
- en: 'A DAG is a type of directed graph that doesn''t have cycles in it. What this
    means is that there are no closed loops; that is, three or more nodes in a similar
    direction. So, suppose we have the following adjacency matrix:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: DAG是一种没有环的有向图。这意味着它没有封闭的循环；也就是说，没有三个或更多节点在相似的方向上连接。假设我们有以下邻接矩阵：
- en: '![](img/d7c3aa9f-7a7c-43dd-b24d-2ce81fc347be.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d7c3aa9f-7a7c-43dd-b24d-2ce81fc347be.png)'
- en: We can see, in the preceding adjacency matrix, that we have an edge from node
    1 to node 3, an edge from node 3 to node 4, and an edge from node 4 to node 1\.
    This creates a cycle within the graph.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，在前面的邻接矩阵中，我们有一条从节点1到节点3的边，一条从节点3到节点4的边，以及一条从节点4到节点1的边。这在图中形成了一个环。
- en: Visually, you can think of a DAG as having a hierarchy where nodes can flow
    downward or upward through subsequent levels. So, if our edges are all directed
    upwards, none of the nodes will ever point from a higher level back to a lower
    level. But if this is the case, our network could go on forever, so where does
    this graph end? Surely there must be at least one node that has incoming edges,
    but none outgoing.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 从视觉上看，你可以将DAG视为一个层级结构，其中节点可以向下或向上流动至后续的层级。因此，如果我们的边都是朝上的，节点将永远不会从较高的层级指向较低的层级。但如果是这种情况，我们的网络可能会永远运行下去，那么这个图在哪里结束呢？肯定至少有一个节点是有输入边，但没有输出边的。
- en: 'To determine whether our network is acyclic, we can use a simple procedure:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 要确定我们的网络是否是无环的，我们可以使用一个简单的程序：
- en: Find a node that does not have any outgoing edges.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到一个没有任何输出边的节点。
- en: If a node such as this does not exist, then the graph is acyclic. However, if
    there is a node like this, then remove it and its incoming edges from the graph.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果不存在这样的节点，那么图就是无环的。然而，如果存在这样的节点，那么请将它和它的输入边从图中删除。
- en: If all of these nodes have been removed, then the graph is acyclic. Else start
    from *Step 1* again.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果所有这些节点都已被移除，那么图就是无环的。否则，请重新从*步骤1*开始。
- en: 'Now, the adjacency matrix for this type of graph is rather interesting. Suppose
    we number all our nodes so that the edges point from higher-numbered nodes to
    lower-numbered nodes. Then, its adjacency matrix will be strictly triangular with
    zeros along the diagonal. If we have the following adjacency matrix, we can clearly
    observe that there are no self edges and this will always be true for acyclic
    graphs:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这种类型图的邻接矩阵非常有趣。假设我们对所有节点进行编号，使得边从较高编号的节点指向较低编号的节点。那么，它的邻接矩阵将是严格的三角形矩阵，且对角线上的值为零。如果我们有以下邻接矩阵，我们可以清楚地观察到没有自环，并且这对于无环图始终成立：
- en: '![](img/cf23ac45-4db9-40e4-b4a9-ca5a3df229a0.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cf23ac45-4db9-40e4-b4a9-ca5a3df229a0.png)'
- en: It is very important that we notice why this adjacency matrix is strictly triangular.
    It is because of the ordering (numbering) of the nodes. If this is not done properly,
    we will not have a triangular matrix. Curiously, there is always at least one
    ordering of nodes that results in an upper-triangular matrix, and it can be found
    using the preceding three-step procedure.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们非常重要的一点是要注意为什么这个邻接矩阵是严格的三角形矩阵。这是由于节点的排序（编号）。如果排序不正确，我们将无法得到一个三角形矩阵。有趣的是，总是至少有一种节点排序能够生成上三角矩阵，并且可以通过前述的三步法找到它。
- en: Multilayer and dynamic graphs
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多层次和动态图
- en: Often, we use graphs to map very complex relationships. So, suppose we wanted
    to create a graph for all the modes of transportation and the routes, similar
    to how Google Maps give us routes that involve buses, trains, cars, planes, or
    even combinations of them. We could create something like this using a multilayer
    graph, where nodes represent airports, bus stops, train stations, and other transportation
    modes, whereas edges represent flights, routes, and so on.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通常使用图来映射非常复杂的关系。例如，假设我们想创建一个包含所有交通方式及路线的图，类似于谷歌地图提供的涉及公交、火车、汽车、飞机甚至它们的组合的路线。我们可以使用多层图来创建这样一个图，其中节点代表机场、公交车站、火车站和其他交通方式，而边代表航班、路线等。
- en: 'We could just label the edges and nodes to describe what each one represents,
    but that could turn out quite messy. So, instead, we can use a multilayer graph,
    where each layer is its own network representing a particular type or class of
    nodes. These layers are then stacked on top of each other and there are interlinking
    edges connecting nodes in different layers. These multilayer edges could be used
    to represent nodes that are within a certain radius of each other:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以仅通过标记边和节点来描述每个元素代表的意义，但这样可能会变得相当杂乱。因此，我们可以使用多层图，每一层代表一种特定类型或类别的节点。然后这些层堆叠在一起，且有互相连接的边，将不同层的节点连接起来。这些多层边可以用来表示处于一定半径内的节点：
- en: '![](img/6bcf5c93-4d2f-471a-9aec-ae05bcf76115.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6bcf5c93-4d2f-471a-9aec-ae05bcf76115.png)'
- en: 'A particularly important subclass of multilayer networks is the multiplex graph
    where each layer has the same nodes, which could represent people, objects, places,
    and so on, but it has various types of edges representing different relationships.
    This is very useful in social networks where different people are related in different
    ways:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 多层网络的一个特别重要的子类是多重图，其中每一层都具有相同的节点，这些节点可以代表人、物体、地点等，但它们有各种类型的边，代表不同的关系。在社交网络中，这种图非常有用，因为不同的人可能以不同的方式相互关联：
- en: '![](img/c40da01f-d176-409f-b00c-85ab7a3e8db5.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c40da01f-d176-409f-b00c-85ab7a3e8db5.png)'
- en: Another subclass of multilayer graphs is the dynamic (or temporal) graph. The
    significance of these graphs is that their structure changes over time. These
    could either be a fixed number of nodes, where the edges keep changing or nodes
    can be added to or removed from the graph over time.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 多层图的另一个子类是动态（或时间）图。这些图的特点是它们的结构随着时间的变化而变化。这些图可能是固定数量的节点，其中边不断变化，或者节点随着时间的推移被添加或移除。
- en: We can represent a multiplex graph mathematically using a set of *n* × *n* adjacency
    matrices, *A^α*, where *α* represents the layer number or a time step (if it is
    a dynamic or temporal graph). We can write the elements of the matrices as [![](img/175e2cf3-60fa-4394-b30c-a02dde594502.png)].
    These elements form a three-dimensional tensor. In comparison, multilayer graphs
    are a lot more complicated because the number of nodes at each layer can differ
    and they have both intralayer and interlayer edges. We can represent the intralayer
    edges using adjacency matrices, *A^α*, where each layer, *α*, has an adjacency
    matrix with a size of *n[α ]*× *n[α]*. The adjacency matrix for the interlayer
    edges, on the other hand, can be represented as *B^(αβ)* (which is of size *n[α ]*× *n*[β]),
    where the matrices element is [![](img/60e6f2bc-8ed5-423d-9ca2-0b76df4f0cd5.png)] if
    there is an edge between node *i* in layer *α* and node *j* and layer *β*.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用一组*n* × *n*的邻接矩阵，*A^α*，来数学表示多重图，其中*α*表示层的编号或时间步长（如果是动态或时间图的话）。我们可以将矩阵的元素写作[![](img/175e2cf3-60fa-4394-b30c-a02dde594502.png)]。这些元素构成了一个三维张量。相比之下，多层图要复杂得多，因为每一层的节点数可以不同，并且它们有层内边和层间边。我们可以使用邻接矩阵*A^α*表示层内边，其中每一层*α*都有一个大小为*n[α]*
    × *n[α]*的邻接矩阵。而层间边的邻接矩阵可以表示为*B^(αβ)*（其大小为*n[α]* × *n[β]*），如果在层*α*中的节点*i*与层*β*中的节点*j*之间存在边，则矩阵元素为[![](img/60e6f2bc-8ed5-423d-9ca2-0b76df4f0cd5.png)]。
- en: Tree graphs
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 树图
- en: Tree graphs are types of graphs that, as the name suggests, have a tree-like
    structure. They are undirected and do not have any loops. They also have a rather
    interesting property, referred to as **connectedness**, where we can find a path
    to any node on the graph from any other node.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 树图是一种图形类型，顾名思义，它们具有树状结构。它们是无向图，且没有任何环路。它们还有一个相当有趣的性质，称为**连通性**，即我们可以从图中的任意一个节点找到通往其他任何节点的路径。
- en: 'In the following diagram, we can see what a tree graph looks like:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的图示中，我们可以看到树图的样子：
- en: '![](img/96228fd6-4f3c-4765-b72d-ac58ff04262b.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/96228fd6-4f3c-4765-b72d-ac58ff04262b.png)'
- en: As you can see, the graph starts at one node (the root node) and ends with leaf
    nodes. In between, they branch out to form smaller sub-trees. An interesting property
    is that a tree graph with *n* nodes has *n-1* edges.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，图形从一个节点（根节点）开始，并以叶节点结束。在这之间，它们分支出去形成更小的子树。一个有趣的性质是，一个有*n*个节点的树形图有*n-1*条边。
- en: Graph Laplacian
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图拉普拉斯
- en: Earlier in this chapter, in the *Adjacency matrix* section, we learned about
    the adjacency matrix and how we can use it to tell what the structure of a graph
    is. However, there are other ways of representing graphs in matrix form.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章早些时候的*邻接矩阵*部分，我们学习了邻接矩阵，以及如何使用它来判断图的结构。然而，还有其他方法可以用矩阵形式表示图。
- en: 'Now, let''s suppose we have an undirected, unweighted graph. Then, its Laplacian
    matrix will be a symmetric *n* × *n* matrix, *L*, whose elements are as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设我们有一个无向的、无权重的图。那么，它的拉普拉斯矩阵将是一个对称的*n* × *n*矩阵，*L*，其元素如下：
- en: '![](img/1bba5a9d-78d4-4bc0-b5d1-2c2f82f38562.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1bba5a9d-78d4-4bc0-b5d1-2c2f82f38562.png)'
- en: 'Here, [![](img/c5341f20-5d40-43bc-8f59-20d7d471a4bf.png)]. We can also write
    this as follows:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这里， [![](img/c5341f20-5d40-43bc-8f59-20d7d471a4bf.png)]。我们也可以将其写为如下形式：
- en: '![](img/26bb8b67-a30f-437b-b0a0-466e0683d8b3.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/26bb8b67-a30f-437b-b0a0-466e0683d8b3.png)'
- en: 'Here, *A[i,j]* is the adjacency matrix and *δ[i,j]* is the Kronecker delta.
    We can rewrite this in matrix form, as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，*A[i,j]*是邻接矩阵，*δ[i,j]*是克罗内克δ函数。我们可以将其以矩阵形式重写，如下所示：
- en: '![](img/31f0927b-ec76-4376-a0e2-55f912a9033e.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](img/31f0927b-ec76-4376-a0e2-55f912a9033e.png)'
- en: 'Here, we have the following:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们有以下内容：
- en: '![](img/12698959-6e57-4a51-8eb9-245fedbc3c7d.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/12698959-6e57-4a51-8eb9-245fedbc3c7d.png)'
- en: Similarly, we can also write the graph Laplacian matrix for a weighted graph
    by replacing the adjacency matrix here with the one we defined previously for
    weighted graphs.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，我们也可以通过将这里的邻接矩阵替换为之前定义的加权图的邻接矩阵，来写出加权图的图拉普拉斯矩阵。
- en: Summary
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about a very fascinating topic in mathematics that
    has applications in nearly every field, from social sciences, to social networking,
    to the World Wide Web, to artificial intelligence—but particularly, in our case
    of neural networks.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了一个非常有趣的数学主题，它几乎在每个领域都有应用，从社会科学到社交网络，再到万维网、人工智能——尤其是在我们讨论的神经网络领域。
- en: In the next chapter, we will learn about linear neural networks, which are the
    simplest type of neural networks and are used most frequently in statistical learning.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习线性神经网络，它是最简单类型的神经网络，并且在统计学习中使用最为频繁。
