- en: '7'
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: '7'
- en: 7\. The Generalization of Machine Learning Models
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7. 机器学习模型的泛化
- en: Overview
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 概述
- en: This chapter will teach you how to make use of the data you have to train better
    models by either splitting your data if it is sufficient or making use of cross-validation
    if it is not. By the end of this chapter, you will know how to split your data
    into training, validation, and test datasets. You will be able to identify the
    ratio in which data has to be split and also consider certain features while splitting.
    You will also be able to implement cross-validation to use limited data for testing
    and use regularization to reduce overfitting in models.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将教你如何利用已有数据来训练更好的模型，方法是当数据足够时进行数据拆分，或在数据不足时使用交叉验证。通过本章的学习，你将掌握如何将数据划分为训练集、验证集和测试集。你将能够确定数据拆分的比例，并在拆分时考虑某些特征。你还将能够实施交叉验证，利用有限的数据进行测试，并使用正则化减少模型的过拟合。
- en: Introduction
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: In the previous chapter, you learned about model assessment using various metrics
    such as R2 score, MAE, and accuracy. These metrics help you decide which models
    to keep and which ones to discard. In this chapter, you will learn some more techniques
    for training better models.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你学习了使用各种评估指标（如 R2 分数、MAE 和准确度）来评估模型的表现。这些指标帮助你决定哪些模型保留，哪些模型舍弃。在本章中，你将学习一些训练更好模型的技巧。
- en: 'Generalization deals with getting your models to perform well enough on data
    points that they have not encountered in the past (that is, during training).
    We will address two specific areas:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 泛化处理的是如何让模型在训练过程中未遇到的数据点上也能表现得足够好（即，未在训练中接触过的数据）。我们将讨论两个具体的方面：
- en: How to make use of as much of your data as possible to train a model
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何尽可能多地利用数据来训练模型
- en: How to reduce overfitting in a model
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何减少模型中的过拟合
- en: Overfitting
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过拟合
- en: A model is said to overfit the training data when it generates a hypothesis
    that accounts for every example. What this means is that it correctly predicts
    the outcome of every example. The problem with this scenario is that the model
    equation becomes extremely complex, and such models have been observed to be incapable
    of correctly predicting new observations.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个模型在训练数据上过拟合时，它生成的假设能够解释每一个例子。换句话说，它能正确预测每个例子的结果。这个场景的问题在于，模型方程变得极其复杂，这样的模型已被观察到无法正确预测新的观察数据。
- en: 'Overfitting occurs when a model has been over-engineered. Two of the ways in
    which this could occur are:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 过拟合发生在模型被过度设计时。出现过拟合的两种方式是：
- en: The model is trained on too many features.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型训练使用了过多的特征。
- en: The model is trained for too long.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型训练时间过长。
- en: We'll discuss each of these two points in the following sections.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在接下来的章节中讨论这两个要点。
- en: Training on Too Many Features
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在过多特征上训练
- en: 'When a model trains on too many features, the hypothesis becomes extremely
    complicated. Consider a case in which you have one column of features and you
    need to generate a hypothesis. This would be a simple linear equation, as shown
    here:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当模型在过多的特征上进行训练时，假设变得极其复杂。假设你有一列特征，需要生成一个假设。在这种情况下，假设将是一个简单的线性方程，如下所示：
- en: '![Figure 7.1: Equation for a hypothesis for a line'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.1：线性假设的方程'
- en: '](img/B15019_07_01.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15019_07_01.jpg)'
- en: 'Figure 7.1: Equation for a hypothesis for a line'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.1：线性假设的方程
- en: 'Now, consider a case in which you have two columns, and in which you cross
    the columns by multiplying them. The hypothesis becomes the following:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设你有两列特征，并且通过相乘来交叉这两列特征。假设变成了如下形式：
- en: '![Figure 7.2: Equation for a hypothesis for a curve'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.2：曲线假设的方程'
- en: '](img/B15019_07_02.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15019_07_02.jpg)'
- en: 'Figure 7.2: Equation for a hypothesis for a curve'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.2：曲线假设的方程
- en: 'While the first equation yields a line, the second equation yields a curve,
    because it is now a quadratic equation. But the same two features could become
    even more complicated depending on how you engineer your features. Consider the
    following equation:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然第一个方程生成的是一条直线，第二个方程生成的是一条曲线，因为它现在是一个二次方程。但同样的两列特征可能变得更加复杂，取决于你如何设计这些特征。考虑以下方程：
- en: '![Figure 7.3: Cubic equation for a hypothesis'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.3：假设的立方方程'
- en: '](img/B15019_07_03.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15019_07_03.jpg)'
- en: 'Figure 7.3: Cubic equation for a hypothesis'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.3：假设的立方方程
- en: 'The same set of features has now given rise to a cubic equation. This equation
    will have the property of having a large number of weights, for example:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 相同的一组特征现在已经引发了一个三次方程。这个方程具有大量的权重，例如：
- en: The simple linear equation has one weight and one bias.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单的线性方程有一个权重和一个偏置。
- en: The quadratic equation has three weights and one bias.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 二次方程有三个权重和一个偏置。
- en: The cubic equation has five weights and one bias.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 三次方程有五个权重和一个偏置。
- en: One solution to overfitting as a result of too many features is to eliminate
    certain features. The technique for this is called lasso regression.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 由于特征过多导致的过拟合问题的一个解决方案是消除某些特征。这种技术称为套索回归（lasso regression）。
- en: A second solution to overfitting as a result of too many features is to provide
    more data to the model. This might not always be a feasible option, but where
    possible, it is always a good idea to do so.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 由于特征过多导致的过拟合问题的第二个解决方案是为模型提供更多的数据。这可能并不总是可行的选项，但在可能的情况下，最好这么做。
- en: Training for Too Long
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 训练过长
- en: The model starts training by initializing the vector of weights such that all
    values are equal to zero. During training, the weights are updated according to
    the gradient update rule. This systematically adds or subtracts a small value
    to each weight. As training progresses, the magnitude of the weights increases.
    If the model trains for too long, these model weights become too large.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 该模型通过初始化权重向量，使得所有值都为零，开始训练。在训练过程中，权重根据梯度更新规则进行更新。这会系统地给每个权重加或减去一个小值。随着训练的进行，权重的大小不断增加。如果模型训练时间过长，这些模型权重会变得过大。
- en: The solution to overfitting as a result of large weights is to reduce the magnitude
    of the weights to as close to zero as possible. The technique for this is called
    ridge regression.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 由于权重大导致的过拟合问题的解决方法是将权重的大小减小到尽可能接近零。这种技术称为岭回归（ridge regression）。
- en: Underfitting
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 欠拟合
- en: 'Consider an alternative situation in which the data has 10 features, but you
    only make use of 1 feature. Your model hypothesis would still be the following:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑另一种情况，其中数据有 10 个特征，但你只使用了 1 个特征。你的模型假设仍然是以下形式：
- en: '![Figure 7.4: Equation for a hypothesis for a line'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.4：直线假设的方程'
- en: '](img/B15019_07_04.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15019_07_04.jpg)'
- en: 'Figure 7.4: Equation for a hypothesis for a line'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.4：直线假设的方程
- en: However, that is the equation of a straight line, but your model is probably
    ignoring a lot of information. The model is over-simplified and is said to underfit
    the data.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这只是直线方程，但你的模型可能忽略了很多信息。模型过于简化，称为欠拟合数据。
- en: The solution to underfitting is to provide the model with more features, or
    conversely, less data to train on; but more features is the better approach.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 欠拟合的解决方法是为模型提供更多特征，或者相反，提供更少的数据进行训练；但更多的特征是更好的方法。
- en: Data
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据
- en: 'In the world of machine learning, the data that you have is not used in its
    entirety to train your model. Instead, you need to separate your data into three
    sets, as mentioned here:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在机器学习的世界中，你所拥有的数据并不会全部用于训练你的模型。相反，你需要将数据分成三个集合，如下所述：
- en: A training dataset, which is used to train your model and measure the training loss.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个训练数据集，用于训练你的模型并衡量训练损失。
- en: An evaluation or validation dataset, which you use to measure the validation
    loss of the model to see whether the validation loss continues to reduce as well
    as the training loss.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个评估或验证数据集，用来衡量模型的验证损失，以查看验证损失是否随着训练损失的减少而继续减小。
- en: A test dataset for final testing to see how well the model performs before you
    put it into production.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个测试数据集，用于最终测试模型在投入生产之前的表现。
- en: The Ratio for Dataset Splits
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据集划分的比例
- en: The evaluation dataset is set aside from your entire training data and is never
    used for training. There are various schools of thought around the particular
    ratio that is set aside for evaluation, but it generally ranges from a high of
    30% to a low of 10%. This evaluation dataset is normally further split into a
    validation dataset that is used during training and a test dataset that is used
    at the end for a sanity check. If you are using 10% for evaluation, you might
    set 5% aside for validation and the remaining 5% for testing. If using 30%, you
    might set 20% aside for validation and 10% for testing.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 评估数据集是从你所有的训练数据中分出来的，并且永远不会用于训练。关于评估数据集的比例有不同的观点，但通常范围从最高30%到最低10%。这个评估数据集通常会进一步划分为在训练过程中使用的验证数据集和最后用于“健全性检查”的测试数据集。如果你使用10%作为评估数据集，可能会将5%用于验证，剩下的5%用于测试。如果使用30%，可能会将20%用于验证，10%用于测试。
- en: To summarize, you might split your data into 70% for training, 20% for validation,
    and 10% for testing, or you could split your data into 80% for training, 15% for
    validation, and 5% for test. Or, finally, you could split your data into 90% for
    training, 5% for validation, and 5% for testing.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，你可以将数据划分为70%用于训练，20%用于验证，10%用于测试，或者你也可以将数据划分为80%用于训练，15%用于验证，5%用于测试。最后，你还可以将数据划分为90%用于训练，5%用于验证，5%用于测试。
- en: The choice of what ratio to use is dependent on the amount of data that you
    have. If you are working with 100,000 records, for example, then 20% validation
    would give you 20,000 records. However, if you were working with 100,000,000 records,
    then 5% would give you 5 million records for validation, which would be more than
    sufficient.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 选择使用什么比例取决于你拥有的数据量。例如，如果你有100,000条记录，20%的验证集将给你20,000条记录。然而，如果你有100,000,000条记录，那么5%的比例将给你500万条验证记录，这样的数据量就足够了。
- en: Creating Dataset Splits
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建数据集划分
- en: At a very basic level, splitting your data involves random sampling. Let's say
    you have 10 items in a bowl. To get 30% of the items, you would reach in and take
    any 3 items at random.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在最基础的层面上，划分数据涉及到随机抽样。假设你有10个物品在一个碗里。为了得到30%的物品，你将随机拿出3个物品。
- en: 'In the same way, because you are writing code, you could do the following:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，因为你正在编写代码，你可以这样做：
- en: Create a Python list.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个Python列表。
- en: Place 10 numbers in the list.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将10个数字放入列表中。
- en: Generate 3 non-repeating random whole numbers from 0 to 9.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从0到9生成3个不重复的随机整数。
- en: 'Pick items whose indices correspond to the random numbers previously generated.![Figure
    7.5: Visualization of data splitting'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择索引与先前生成的随机数字相对应的项。[!图7.5：数据划分的可视化](img/B15019_07_05.jpg)
- en: '](img/B15019_07_05.jpg)'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_05.jpg)'
- en: 'Figure 7.5: Visualization of data splitting'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.5：数据划分的可视化
- en: This is something you will only do once for a particular dataset. You might
    write a function for it. If it is something that you need to do repeatedly and
    you also need to handle advanced functionality, you might want to write a class
    for it.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你只会对特定数据集做一次的操作。你可能会为此编写一个函数。如果这是你需要重复做的事，并且你还需要处理一些高级功能，你可能会想为它编写一个类。
- en: '`sklearn` has a class called `train_test_split`, which provides the functionality
    for splitting data. It is available as `sklearn.model_selection.train_test_split`.
    This function will let you split a DataFrame into two parts.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`sklearn`有一个叫做`train_test_split`的类，它提供了数据划分的功能。它可以通过`sklearn.model_selection.train_test_split`来使用。这个函数允许你将一个数据框（DataFrame）划分为两部分。'
- en: Have a look at the following exercise on importing and splitting data.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下下面关于导入和划分数据的练习。
- en: 'Exercise 7.01: Importing and Splitting Data'
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习7.01：导入并划分数据
- en: The goal of this exercise is to import data from a repository and to split it
    into a training and an evaluation set.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 本练习的目标是从一个数据仓库导入数据，并将其划分为训练集和评估集。
- en: We will be using the Cars dataset from the UCI Machine Learning Repository.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用来自UCI机器学习库的Cars数据集。
- en: Note
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can find the dataset here: [https://packt.live/2RE5rWi](https://packt.live/2RE5rWi)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里找到数据集：[https://packt.live/2RE5rWi](https://packt.live/2RE5rWi)
- en: 'The dataset can also be found on our GitHub, here: [https://packt.live/36cvyc4](https://packt.live/36cvyc4)'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 数据集也可以在我们的GitHub上找到，链接如下：[https://packt.live/36cvyc4](https://packt.live/36cvyc4)
- en: You will be using this dataset throughout the exercises in this chapter.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在本章的练习中使用这个数据集。
- en: 'This dataset is about the cost of owning cars with certain attributes. The
    abstract from the website states: "*Derived from simple hierarchical decision
    model, this database may be useful for testing constructive induction and structure
    discovery methods*." Here are some of the key attributes of this dataset:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这个数据集关于拥有特定属性的汽车的成本。网站摘要中提到：“*从简单的层次决策模型派生，数据库可能对测试构造性归纳和结构发现方法有用*。”以下是该数据集的一些关键属性：
- en: '[PRE0]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following steps will help you complete the exercise:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将帮助你完成练习：
- en: Open a new Colab notebook file.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的 Colab 笔记本文件。
- en: 'Import the necessary libraries:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入必要的库：
- en: '[PRE1]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this step, you have imported `pandas` and aliased it as `pd`. As you know,
    `pandas` is required to read in the file. You also import `train_test_split` from
    `sklearn.model_selection` to split the data into two parts.
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这一步，你已经导入了`pandas`并将其别名设置为`pd`。正如你所知道的，`pandas` 是读取文件所必需的。你还从`sklearn.model_selection`导入了`train_test_split`，用于将数据拆分为两部分。
- en: 'Before reading the file into your notebook, open and inspect the file (`car.data`)
    with an editor. You should see an output similar to the following:![Figure 7.6:
    Car data'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在将文件读入你的笔记本之前，使用编辑器打开并检查文件（`car.data`）。你应该看到类似以下的输出：![图 7.6：汽车数据
- en: '](img/B15019_07_06.jpg)'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_06.jpg)'
- en: 'Figure 7.6: Car data'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.6：汽车数据
- en: You will notice from the preceding screenshot that the file doesn't have a first
    row containing the headers.
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从之前的截图中，你会注意到该文件没有包含第一行作为列头。
- en: 'Create a Python list to hold the headers for the data:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 Python 列表来保存数据的列名：
- en: '[PRE2]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, import the data as shown in the following code snippet:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，按照下面的代码片段导入数据：
- en: '[PRE3]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You then proceed to import the data into a variable called `df` by using `pd.read_csv`.
    You specify the location of the data file, as well as the list of column headers.
    You also specify that the data does not have a column index.
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后，你通过 `pd.read_csv` 将数据导入到一个名为 `df` 的变量中。你指定了数据文件的位置以及列头的列表。你还指定了数据没有列索引。
- en: 'Show the top five records:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示前五条记录：
- en: '[PRE4]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In order to get information about the columns in the data as well as the number
    of records, you make use of the `info()` method. You should get an output similar
    to the following:'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了获取有关数据列和记录数的信息，你可以使用 `info()` 方法。你应该得到类似于以下的输出：
- en: '![Figure 7.7: The top five records of the DataFrame'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 7.7：DataFrame 的前五条记录'
- en: '](img/B15019_07_07.jpg)'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_07.jpg)'
- en: 'Figure 7.7: The top five records of the DataFrame'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.7：DataFrame 的前五条记录
- en: The `RangeIndex` value shows the number of records, which is `1728`.
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`RangeIndex` 的值显示记录数为 `1728`。'
- en: 'Now, you need to split the data contained in `df` into a training dataset and
    an evaluation dataset:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你需要将 `df` 中的数据拆分为训练数据集和评估数据集：
- en: '[PRE5]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In this step, you make use of `train_test_split` to create two new DataFrames
    called `training_df` and `eval_df`.
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这一步，你使用 `train_test_split` 创建两个新的 DataFrame，分别命名为 `training_df` 和 `eval_df`。
- en: You specify a value of `0.8` for `train_size` so that `80%` of the data is assigned
    to `training_df`.
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你为 `train_size` 指定了一个值 `0.8`，这样 `80%` 的数据就会被分配给 `training_df`。
- en: '`random_state` ensures that your experiments are reproducible. Without `random_state`,
    the data is split differently every time using a different random number. With
    `random_state`, the data is split the same way every time. We will be studying
    `random_state` in depth in the next chapter.'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`random_state` 确保实验的可重现性。如果没有 `random_state`，每次数据都会用不同的随机数进行拆分，结果会不同。使用 `random_state`
    后，数据每次都会以相同的方式拆分。我们将在下一章深入研究 `random_state`。'
- en: 'Check the information of `training_df`:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查 `training_df` 的信息：
- en: '[PRE6]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In this step, you make use of `.info()` to get the details of `training_df`.
    This will print out the column names as well as the number of records.
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这一步，你使用 `.info()` 来获取 `training_df` 的详细信息。这将打印出列名以及记录的数量。
- en: 'You should get an output similar to the following:'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该得到类似于以下的输出：
- en: '![Figure 7.8: Information on training_df'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 7.8：有关 `training_df` 的信息'
- en: '](img/B15019_07_08.jpg)'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_08.jpg)'
- en: 'Figure 7.8: Information on training_df'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.8：有关 `training_df` 的信息
- en: You should observe that the column names match those in `df`, but you should
    have `80%` of the records that you did in `df`, which is `1382` out of `1728`.
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该观察到列名与 `df` 中的列名一致，但你应该会有 `80%` 的记录数，相当于从 `1728` 条记录中抽取了 `1382` 条。
- en: 'Check the information on `eval_df`:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查 `eval_df` 的信息：
- en: '[PRE7]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In this step, you print out the information about `eval_df`. This will give
    you the column names and the number of records. The output should be similar to
    the following:'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这一步中，你将打印出关于`eval_df`的信息。这将给你列名和记录数量。输出应该类似于以下内容：
- en: '![Figure 7.9: Information on eval_df'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 7.9：关于 eval_df 的信息'
- en: '](img/B15019_07_09.jpg)'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_09.jpg)'
- en: 'Figure 7.9: Information on eval_df'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.9：关于 eval_df 的信息
- en: Note
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: To access the source code for this specific section, please refer to [https://packt.live/3294avL](https://packt.live/3294avL).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此特定部分的源代码，请参考 [https://packt.live/3294avL](https://packt.live/3294avL)。
- en: You can also run this example online at [https://packt.live/2E8FHhT](https://packt.live/2E8FHhT).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以在线运行此示例，网址：[https://packt.live/2E8FHhT](https://packt.live/2E8FHhT)。
- en: Now you know how to split your data. Whenever you split your data, the records
    are going to be exactly the same. You could repeat the exercise a number of times
    and notice the range of entries in the index for `eval_df`.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你知道如何拆分数据了。每当你拆分数据时，记录将完全相同。你可以多次重复这个操作，并注意`eval_df`索引中的条目范围。
- en: The implication of this is that you cannot repeat your experiments. If you run
    the same code, you will get different results every time. Also, if you share your
    code with your colleagues, they will get different results. This is because the
    compiler makes use of random numbers.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着你无法重复你的实验。如果你运行相同的代码，每次都会得到不同的结果。而且，如果你与同事共享代码，他们也会得到不同的结果。这是因为编译器使用了随机数。
- en: These random numbers are not actually random but make use of something called
    a pseudo-random number generator. The generator has a pre-determined set of random
    numbers that it uses, and as a result, you can specify a random state that will
    cause it to use a particular set of random numbers.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这些随机数实际上并不是真正的随机数，而是使用了一个叫做伪随机数生成器的东西。生成器有一组预定的随机数，它会使用这些数字，因此，你可以指定一个随机状态，使其使用特定的一组随机数。
- en: Random State
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 随机状态
- en: The key to reproducing the same results is called random state. You simply specify
    a number, and whenever that number is used, the same results will be produced.
    This works because computers don't have an actual random number generator. Instead,
    they have a pseudo-random number generator. This means that you can generate the
    same sequence of random numbers if you set a random state.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 重现相同结果的关键是随机状态。你只需指定一个数字，每当使用该数字时，就会产生相同的结果。这是因为计算机没有真正的随机数生成器，而是使用伪随机数生成器。这意味着，如果你设置一个随机状态，你就可以生成相同的随机数序列。
- en: 'Consider the following figure as an example. The columns are your random states.
    If you pick 0 as the random state, the following numbers will be generated: 41,
    52, 38, 56…'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 请看下面的图示作为示例。列是你的随机状态。如果你选择0作为随机状态，将会生成以下数字：41、52、38、56…
- en: However, if you pick 1 as the random state, a different set of numbers will
    be generated, and so on.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果你选择1作为随机状态，将会生成一组不同的数字，依此类推。
- en: '![Figure 7.10: Numbers generated using random state'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.10：使用随机状态生成的数字'
- en: '](img/B15019_07_10.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15019_07_10.jpg)'
- en: 'Figure 7.10: Numbers generated using random state'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.10：使用随机状态生成的数字
- en: In the previous exercise, you set the random state to 0 so that the experiment
    was repeatable.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一个练习中，你将随机状态设置为0，以便实验可重复。
- en: 'Exercise 7.02: Setting a Random State When Splitting Data'
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 7.02：拆分数据时设置随机状态
- en: The goal of this exercise is to have a reproducible way of splitting the data
    that you imported in *Exercise 7.01*, *Importing and Splitting Data*.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 该练习的目标是为你在 *练习 7.01* 中导入并拆分的数据提供一种可重复的拆分方式。
- en: Note
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: We going to refactor the code from the previous exercise. Hence, if you are
    using a new Colab notebook then make sure you copy the code from the previous
    exercise. Alternatively, you can make a copy of the notebook used in *Exercise
    7.01* and use the revised the code as suggested in the following steps.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将重构前一个练习的代码。因此，如果你正在使用一个新的 Colab 笔记本，请确保复制前一个练习中的代码。或者，你可以复制 *练习 7.01* 中使用的笔记本，并按照以下步骤使用修改后的代码。
- en: 'The following steps will help you complete the exercise:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将帮助你完成该练习：
- en: Continue from the previous *Exercise 7.01* notebook.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从前一个 *练习 7.01* 笔记本继续。
- en: 'Set the random state as `1` and split the data:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置随机状态为`1`并拆分数据：
- en: '[PRE8]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In this step, you specify a `random_state` value of 1 to the `train_test_split`
    function.
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这一步中，你将`train_test_split`函数的`random_state`值设置为1。
- en: 'Now, view the top five records in `training_df`:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，查看`training_df`中的前五条记录：
- en: '[PRE9]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In this step, you print out the first five records in `training_df`.
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此步骤中，您将打印出`training_df`中的前五条记录。
- en: 'The output should be similar to the following:'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出应类似于以下内容：
- en: '![Figure 7.11: The top five rows for the training evaluation set'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图7.11：训练评估集的前五行'
- en: '](img/B15019_07_11.jpg)'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_11.jpg)'
- en: 'Figure 7.11: The top five rows for the training evaluation set'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图7.11：训练评估集的前五行
- en: 'View the top five records in `eval_df`:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看`eval_df`中的前五条记录：
- en: '[PRE10]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In this step, you print out the first five records in `eval_df`.
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此步骤中，您将打印出`eval_df`中的前五条记录。
- en: 'The output should be similar to the following:'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出应类似于以下内容：
- en: '![Figure 7.12: The top five rows of eval_df'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图7.12：eval_df的前五行'
- en: '](img/B15019_07_12.jpg)'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_12.jpg)'
- en: 'Figure 7.12: The top five rows of eval_df'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.12：eval_df的前五行
- en: Note
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: To access the source code for this specific section, please refer to [https://packt.live/2Q6Jb7e](https://packt.live/2Q6Jb7e).
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此特定部分的源代码，请参考[https://packt.live/2Q6Jb7e](https://packt.live/2Q6Jb7e)。
- en: You can also run this example online at [https://packt.live/2EjFvMp](https://packt.live/2EjFvMp).
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在[https://packt.live/2EjFvMp](https://packt.live/2EjFvMp)在线运行此示例。
- en: The goal of this exercise is to get reproducible splits. If you run the code,
    you will get the same records in both `training_df` and `eval_df`. You may proceed
    to run that code a few times on every system and verify that you get the same
    records in both datasets.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 本练习的目标是获得可重复的拆分。如果您运行代码，您将在`training_df`和`eval_df`中获得相同的记录。您可以在每个系统上多次运行此代码，并验证两个数据集中的记录是否相同。
- en: Whenever you change `random_state`, you will get a different set of training
    and validation data.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 每次更改`random_state`时，您将得到一组不同的训练和验证数据。
- en: But how do you find the best dataset split to train your model? When you don't
    have a lot of data, the recommended approach is to make use of all of your data.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如何找到最佳的数据集拆分方式来训练您的模型呢？当您没有大量数据时，推荐的方法是使用所有数据。
- en: But how do you retain validation data if you make use of all of your data?
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果您使用了所有数据，如何保留验证数据呢？
- en: The answer is to split the data into a number of parts. This approach is called
    cross-validation, which we will be looking at in the next section.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案是将数据分成多个部分。这种方法称为交叉验证，我们将在下一节中详细讨论。
- en: Cross-Validation
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交叉验证
- en: Consider an example where you split your data into five parts of 20% each. You
    would then make use of four parts for training and one part for evaluation. Because
    you have five parts, you can make use of the data five times, each time using
    one part for validation and the remaining data for training.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个例子，将数据分成五个部分，每部分占20%。然后，您可以利用四个部分进行训练，剩下的一个部分用于评估。由于您有五个部分，您可以重复五次每次使用一个部分进行验证，剩余的数据用于训练。
- en: '![Figure 7.13: Cross-validation'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.13：交叉验证'
- en: '](img/B15019_07_13.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15019_07_13.jpg)'
- en: 'Figure 7.13: Cross-validation'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.13：交叉验证
- en: Cross-validation is an approach to splitting your data where you make multiple
    splits and then make use of some of them for training and the rest for validation.
    You then make use of all of the combinations of data to train multiple models.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 交叉验证是一种数据拆分方法，您将数据分成多个部分，然后使用其中一些部分进行训练，其余部分用于验证。接着，您可以使用所有数据的组合来训练多个模型。
- en: This approach is called n-fold cross-validation or k-fold cross-validation.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法称为n折交叉验证或k折交叉验证。
- en: Note
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: For more information on k-fold cross-validation, refer to [https://packt.live/36eXyfi](https://packt.live/36eXyfi).
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 有关k折交叉验证的更多信息，请参阅[https://packt.live/36eXyfi](https://packt.live/36eXyfi)。
- en: KFold
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: KFold
- en: The `KFold` class in `sklearn.model_selection` returns a generator that provides
    a tuple with two indices, one for training and another for testing or validation.
    A generator function lets you declare a function that behaves like an iterator,
    thus letting you use it in a loop.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '`sklearn.model_selection`中的`KFold`类返回一个生成器，该生成器提供一个包含两个索引的元组，一个用于训练，另一个用于测试或验证。生成器函数允许您声明一个像迭代器一样工作的函数，从而可以在循环中使用它。'
- en: 'Exercise 7.03: Creating a Five-Fold Cross-Validation Dataset'
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习7.03：创建一个五折交叉验证数据集
- en: The goal of this exercise is to create a five-fold cross-validation dataset
    from the data that you imported in *Exercise 7.01*, *Importing and Splitting Data*.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 本练习的目标是从*练习7.01*中导入并拆分的数据中创建一个五折交叉验证数据集。
- en: Note
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you are using a new Colab notebook then make sure you copy the code from
    *Exercise 7.01*, *Importing and Splitting Data*. Alternatively, you can make a
    copy of the notebook used in *Exercise 7.01* and then use the code as suggested
    in the following steps.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用一个新的Colab笔记本，确保从*练习 7.01*中复制代码，*导入并分割数据*。或者，你可以复制*练习 7.01*中使用的笔记本，并按照以下步骤建议的方式使用代码。
- en: 'The following steps will help you complete the exercise:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将帮助你完成练习：
- en: Continue from the notebook file of *Exercise 7.01.*
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从*练习 7.01*的笔记本文件继续。
- en: 'Import all the necessary libraries:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入所有必要的库：
- en: '[PRE11]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In this step, you import `KFold` from `sklearn.model_selection`.
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这一步，你从`sklearn.model_selection`导入`KFold`。
- en: 'Now create an instance of the class:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在创建类的一个实例：
- en: '[PRE12]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In this step, you create an instance of `KFold` and assign it to a variable
    called `_kf`. You specify a value of `5` for the `n_splits` parameter so that
    it splits the dataset into five parts.
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这一步，你创建一个`KFold`的实例，并将其赋值给一个名为`_kf`的变量。你为`n_splits`参数指定值`5`，这样它就会将数据集分割成五个部分。
- en: 'Now split the data as shown in the following code snippet:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在按以下代码片段分割数据：
- en: '[PRE13]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In this step, you call the `split` method, which is `.split()` on `_kf`. The
    result is stored in a variable called `indices`.
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这一步，你调用`split`方法，即在`_kf`上调用`.split()`。结果存储在一个名为`indices`的变量中。
- en: 'Find out what data type `indices` has:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查明`indices`的数据类型：
- en: '[PRE14]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In this step, you inspect the call to split the output returns.
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这一步，你检查调用以分割输出的返回结果。
- en: 'The output should be a `generator`, as seen in the following output:'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出应该是一个`generator`，如下所示：
- en: '![Figure 7.14: Data type for indices'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图7.14：索引的数据类型'
- en: '](img/B15019_07_14.jpg)'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_14.jpg)'
- en: 'Figure 7.14: Data type for indices'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图7.14：索引的数据类型
- en: 'Get the first set of indices:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取第一组索引：
- en: '[PRE15]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In this step, you make use of the `next()` Python function on the generator
    function. Using `next()` is the way that you get a generator to return results
    to you. You asked for five splits, so you can call `next()` five times on this
    particular generator. Calling `next()` a sixth time will cause the Python runtime
    to raise an exception.
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这一步，你使用Python的`next()`函数来操作生成器函数。使用`next()`是获取生成器返回结果的方式。你要求了五个分割，因此可以在这个生成器上调用`next()`五次。第六次调用`next()`将导致Python运行时引发异常。
- en: The call to `next()` yields a tuple. In this case, it is a pair of indices.
    The first one contains your training indices and the second one contains your
    validation indices. You assign these to `train_indices` and `val_indices`.
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`next()`的调用返回一个元组。在这种情况下，它是一个包含索引对的元组。第一个包含你的训练索引，第二个包含你的验证索引。你将它们分别赋值给`train_indices`和`val_indices`。'
- en: 'Create a training dataset as shown in the following code snippet:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下代码片段创建一个训练数据集：
- en: '[PRE16]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In this step, you create a new DataFrame called `train_df` by dropping the
    validation indices from `df`, the DataFrame that contains all of the data. This
    is a subtractive operation similar to what is done in set theory. The `df` set
    is a union of `train` and `val`. Once you know what `val` is, you can work backward
    to determine `train` by subtracting `val` from `df`. If you consider `df` to be
    a set called `A`, `val` to be a set called `B`, and train to be a set called `C`,
    then the following holds true:'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这一步，你通过从包含所有数据的`df` DataFrame中删除验证索引，创建一个新的DataFrame，称为`train_df`。这是一种类似于集合论中操作的减法操作。`df`集合是`train`和`val`的并集。一旦你知道了`val`是什么，你可以通过从`df`中减去`val`来反向推导出`train`。如果你把`df`看作一个叫做`A`的集合，把`val`看作一个叫做`B`的集合，把`train`看作一个叫做`C`的集合，那么以下公式成立：
- en: '![Figure 7.15: Dataframe A'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图7.15：Dataframe A'
- en: '](img/B15019_07_15.jpg)'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_15.jpg)'
- en: '[PRE17]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The result of that call should be similar to the following screenshot:'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该调用的结果应类似于以下截图：
- en: '![Figure 7.17: Information on the new dataframe'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图7.17：新DataFrame的信息'
- en: '](img/B15019_07_17.jpg)'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_17.jpg)'
- en: 'Figure 7.17: Information on the new dataframe'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图7.17：新DataFrame的信息
- en: 'Create a validation dataset:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建验证数据集：
- en: '[PRE18]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In this step, you create the `val_df` validation dataset by dropping the training
    indices from the `df` DataFrame. Again, you can see the details of this new DataFrame
    by calling the `info()` method.
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这一步，你通过从`df` DataFrame中删除训练索引来创建`val_df`验证数据集。同样，你可以通过调用`info()`方法查看这个新DataFrame的详细信息。
- en: 'The output should be similar to the following:'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出应类似于以下内容：
- en: '![Figure 7.18: Information for the validation dataset'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图7.18：验证数据集的信息'
- en: '](img/B15019_07_18.jpg)'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_18.jpg)'
- en: 'Figure 7.18: Information for the validation dataset'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.18：验证数据集的信息
- en: Note
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: To access the source code for this specific section, please refer to [https://packt.live/3kRRaDf](https://packt.live/3kRRaDf).
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此特定部分的源代码，请参考[https://packt.live/3kRRaDf](https://packt.live/3kRRaDf)。
- en: You can also run this example online at [https://packt.live/3kTNPnf](https://packt.live/3kTNPnf).
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在线运行这个示例，网址是[https://packt.live/3kTNPnf](https://packt.live/3kTNPnf)。
- en: You could program all of the preceding in a loop so that you do not need to
    manually make a call to `next()` five times. This is what we will be doing in
    the next exercise.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将前面的所有步骤编程为一个循环，这样你就不需要手动调用`next()`五次。这正是我们将在下一个练习中做的。
- en: 'Exercise 7.04: Creating a Five-Fold Cross-Validation Dataset Using a Loop for
    Calls'
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习7.04：使用循环进行调用来创建五折交叉验证数据集
- en: The goal of this exercise is to create a five-fold cross-validation dataset
    from the data that you imported in *Exercise 7.01*, *Importing and Splitting Data*.
    You will make use of a loop for calls to the generator function.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 本练习的目标是从你在*练习7.01*中导入的数据显示，使用循环调用生成器函数来创建一个五折交叉验证数据集。
- en: Note
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'If you are using a new Colab notebook then make sure you copy the code from
    *Exercise 7.01, Importing and Splitting Data*. Alternatively, you can make a copy
    of the notebook used in *Exercise 7.01* and then use the code as suggested in
    the following steps. The link to notebook for this exercise can be found here:
    [https://packt.live/3g83AmU](https://packt.live/3g83AmU)'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用新的Colab笔记本，请确保复制*练习7.01，导入和分割数据*中的代码。或者，你可以复制在*练习7.01*中使用的笔记本，并按照以下步骤使用建议的代码。该练习的笔记本链接如下：[https://packt.live/3g83AmU](https://packt.live/3g83AmU)。
- en: 'The following steps will help you complete this exercise:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将帮助你完成此练习：
- en: Open a new Colab notebook and repeat the steps you used to import data in *Exercise
    7.01*, *Importing and Splitting Data*.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的Colab笔记本，并重复在*练习7.01*中用于导入数据的步骤，*导入和分割数据*。
- en: 'Define the number of splits you would like:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义你希望的分割数量：
- en: '[PRE19]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In this step, you set the number of splits to `5`. You store this in a variable
    called `n_splits`.
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此步骤中，你将分割的数量设置为`5`，并将其存储在一个名为`n_splits`的变量中。
- en: 'Create an instance of `Kfold`:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`Kfold`的实例：
- en: '[PRE20]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In this step, you create an instance of `Kfold`. You assign this instance to
    a variable called `_kf`.
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此步骤中，你创建了一个`Kfold`的实例，并将该实例赋值给一个名为`_kf`的变量。
- en: 'Generate the split indices:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成分割索引：
- en: '[PRE21]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: In this step, you call the `split()` method on `_kf`, which is the instance
    of `KFold` that you defined earlier. You provide `df` as a parameter so that the
    splits are performed on the data contained in the DataFrame called `df`. The resulting
    generator is stored as `_indices`.
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此步骤中，你在之前定义的`KFold`实例`_kf`上调用`split()`方法，并将`df`作为参数传入，这样分割操作将在名为`df`的数据框上进行。生成的生成器将被存储为`_indices`。
- en: 'Create two Python lists:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建两个Python列表：
- en: '[PRE22]'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: In this step, you create two Python lists. The first is called `_t` and holds
    the training DataFrames, and the second is called `_v` and holds the validation DataFrames.
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此步骤中，你创建了两个Python列表。第一个名为`_t`，包含训练数据框；第二个名为`_v`，包含验证数据框。
- en: 'Iterate over the generator and create DataFrames called `train_idx`, `val_idx`,
    `_train_df` and `_val_df`:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 遍历生成器并创建名为`train_idx`、`val_idx`、`_train_df`和`_val_df`的数据框：
- en: '[PRE23]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In this step, you create a loop using `range` to determine the number of iterations.
    You specify the number of iterations by providing `n_splits` as a parameter to
    `range()`. On every iteration, you execute `next()` on the `_indices` generator
    and store the results in `train_idx` and `val_idx`. You then proceed to create
    `_train_df` by dropping the validation indices, `val_idx`, from `df`. You also
    create `_val_df` by dropping the training indices from `df`.
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此步骤中，你使用`range`创建一个循环来确定迭代次数。你通过将`n_splits`作为参数传递给`range()`来指定迭代次数。在每次迭代中，你在`_indices`生成器上执行`next()`并将结果存储在`train_idx`和`val_idx`中。然后，你通过从`df`中删除验证索引`val_idx`来创建`_train_df`。你还通过从`df`中删除训练索引来创建`_val_df`。
- en: 'Iterate over the training list:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 遍历训练列表：
- en: '[PRE24]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'In this step, you verify that the compiler created the DataFrames. You do this
    by iterating over the list and using the `.info()` method to print out the details
    of each element. The output is similar to the following screenshot, which is incomplete
    due to the size of the output. Each element in the list is a DataFrame with 1,382
    entries:'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此步骤中，你验证编译器是否已创建数据框。你可以通过遍历列表并使用`.info()`方法打印每个元素的详细信息来完成此操作。输出类似于以下屏幕截图，因输出过大而不完全显示。列表中的每个元素都是一个包含1,382条记录的数据框：
- en: '![Figure 7.19: Iterating over the training list'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 7.19：遍历训练列表'
- en: '](img/B15019_07_19.jpg)'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_19.jpg)'
- en: 'Figure 7.19: Iterating over the training list'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.19：遍历训练列表
- en: Note
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: The preceding output is a truncated version of the actual output.
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述输出是实际输出的简化版本。
- en: 'Iterate over the validation list:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 遍历验证列表：
- en: '[PRE25]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'In this step, you iterate over the validation list and make use of `.info()`
    to print out the details of each element. The output is similar to the following
    screenshot, which is incomplete due to the size. Each element is a DataFrame with
    346 entries:'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这一步，你遍历验证列表，并使用 `.info()` 打印出每个元素的详细信息。输出类似于以下截图，因大小问题未完全显示。每个元素是一个包含 346 条条目的
    DataFrame：
- en: '![Figure 7.20: Iterating over the validation list'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 7.20：遍历验证列表'
- en: '](img/B15019_07_20.jpg)'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_20.jpg)'
- en: 'Figure 7.20: Iterating over the validation list'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.20：遍历验证列表
- en: Note
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The preceding output is a truncated version of the actual output.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 上述输出是实际输出的简化版本。
- en: To access the source code for this specific section, please refer to [https://packt.live/3g83AmU](https://packt.live/3g83AmU).
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 若要访问此特定部分的源代码，请参考 [https://packt.live/3g83AmU](https://packt.live/3g83AmU)。
- en: You can also run this example online at [https://packt.live/3iXwEPR](https://packt.live/3iXwEPR).
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在在线运行这个例子：[https://packt.live/3iXwEPR](https://packt.live/3iXwEPR)。
- en: In this exercise, you have learned how to use a loop for k-fold cross-validation
    to extract training and validation datasets. You can make use of these datasets
    to train and evaluate multiple models.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 在本练习中，你已经学会如何使用循环进行 k 折交叉验证，以提取训练和验证数据集。你可以利用这些数据集来训练和评估多个模型。
- en: The essence of creating cross-validation datasets is that you can train and
    evaluate multiple models. What if you didn't have to train those models in a loop?
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 创建交叉验证数据集的核心思想是，你可以训练并评估多个模型。如果你不必在循环中训练这些模型会怎样？
- en: The good news is that you can avoid training multiple models in a loop because
    if you did that, you would need arrays to track lots of metrics.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 好消息是，你可以避免在循环中训练多个模型，因为如果你那样做，你将需要数组来跟踪许多指标。
- en: cross_val_score
  id: totrans-259
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: cross_val_score
- en: The `cross_val_score()` function is available in `sklearn.model_selection`.
    Up until this point, you have learned how to create cross-validation datasets
    in a loop. If you made use of that approach, you would need to keep track of all
    of the models that you are training and evaluating inside of that loop.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '`cross_val_score()` 函数在 `sklearn.model_selection` 中可用。到目前为止，你已经学会如何在循环中创建交叉验证数据集。如果你使用了这种方法，你需要在循环中跟踪所有训练和评估的模型。'
- en: '`cross_val_score` takes care of the following:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '`cross_val_score` 处理以下事项：'
- en: Creating cross-validation datasets
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建交叉验证数据集
- en: Training models by fitting them to the training data
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过将模型拟合到训练数据来训练模型
- en: Evaluating the models on the validation data
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在验证数据上评估模型
- en: Returning a list of the R2 score of each model that is trained
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回每个训练模型的 R2 分数列表
- en: 'For all of the preceding actions to happen, you will need to provide the following inputs:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 要使上述操作生效，你需要提供以下输入：
- en: An instance of an estimator (for example, `LinearRegression`)
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个估计器实例（例如，`LinearRegression`）
- en: The original dataset
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 原始数据集
- en: The number of splits to create (which is also the number of models that will
    be trained and evaluated)
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要创建的拆分数（这也是将训练和评估的模型数量）
- en: 'Exercise 7.05: Getting the Scores from Five-Fold Cross-Validation'
  id: totrans-270
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 7.05：获取五折交叉验证的得分
- en: The goal of this exercise is to create a five-fold cross-validation dataset
    from the data that you imported in *Exercise 7.01*, *Importing and Splitting Data*.
    You will then use `cross_val_score` to get the scores of models trained on those
    datasets.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 本练习的目标是从你在 *练习 7.01*，*导入并拆分数据* 中导入的数据创建一个五折交叉验证数据集。然后，你将使用 `cross_val_score`
    获取在这些数据集上训练的模型的得分。
- en: Note
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'If you are using a new Colab notebook then make sure you copy the code from
    *Exercise 7.01*, *Importing and Splitting Data*. Alternatively, you can make a
    copy of the notebook used in *Exercise 7.01* and then use the revised code as
    suggested in the following steps. The link to notebook for this exercise can be
    found here: [https://packt.live/2DWTkAY](https://packt.live/2DWTkAY).'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是新的 Colab 笔记本，确保从 *练习 7.01*，*导入并拆分数据* 中复制代码。或者，你可以复制 *练习 7.01* 中使用的笔记本，并按照以下步骤中的建议使用修改后的代码。该练习的笔记本链接可以在这里找到：[https://packt.live/2DWTkAY](https://packt.live/2DWTkAY)。
- en: 'The following steps will help you complete the exercise:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将帮助你完成练习：
- en: Open a new Colab notebook and repeat *steps 1-6* that you took to import data
    in *Exercise 7.01*, *Importing and Splitting Data*.
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的 Colab 笔记本，并重复 *步骤 1-6*，这些步骤用于导入 *练习 7.01* 中的数据，*导入并拆分数据*。
- en: 'Encode the categorical variables in the dataset:'
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对数据集中的分类变量进行编码：
- en: '[PRE26]'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: In this step, you make use of `pd.get_dummies()` to convert categorical variables
    into an encoding. You store the result in a new DataFrame variable called `_df`.
    You then proceed to take a look at the first five records.
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这一步中，你使用 `pd.get_dummies()` 将分类变量转换为编码。你将结果存储在一个新的 DataFrame 变量 `_df` 中。然后，你继续查看前五条记录。
- en: 'The result should look similar to the following:'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 结果应类似于以下内容：
- en: '![Figure 7.21: Encoding categorical variables'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图7.21：编码分类变量](img/B15019_07_21.jpg)'
- en: '](img/B15019_07_21.jpg)'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_21.jpg)'
- en: 'Figure 7.21: Encoding categorical variables'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图7.21：编码分类变量
- en: 'Split the data into features and labels:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将数据拆分为特征和标签：
- en: '[PRE27]'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: In this step, you create a `features` DataFrame by dropping `car` from `_df`.
    You also create `labels` by selecting only `car` in a new DataFrame. Here, a feature
    and a label are similar in the Cars dataset.
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这一步中，你通过从 `_df` 中删除 `car` 来创建一个 `features` DataFrame。你还通过选择新的 DataFrame 中仅包含
    `car` 的部分来创建 `labels`。在这里，特征和标签在“汽车”数据集中是相似的。
- en: 'Create an instance of the `LogisticRegression` class to be used later:'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `LogisticRegression` 类的一个实例，供后续使用：
- en: '[PRE28]'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: In this step, you import `LogisticRegression` from `sklearn.linear_model`. We
    use `LogisticRegression` because it lets us create a classification model, as
    you learned in *Chapter 3, Binary Classification*. You then proceed to create
    an instance and store it as `_lr`.
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这一步中，你从 `sklearn.linear_model` 中导入 `LogisticRegression`。我们使用 `LogisticRegression`
    是因为它可以让我们创建一个分类模型，正如你在 *第3章，二分类* 中学到的那样。然后你继续创建一个实例，并将其存储为 `_lr`。
- en: 'Import the `cross_val_score` function:'
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入 `cross_val_score` 函数：
- en: '[PRE29]'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: In this step now, you import `cross_val_score`, which you will make use of to
    compute the scores of the models.
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这一步，你导入 `cross_val_score`，你将利用它来计算模型的得分。
- en: 'Compute the cross-validation scores:'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算交叉验证得分：
- en: '[PRE30]'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'In this step, you the compute cross-validation scores and store the result
    in a Python list, which you call `_scores`. You do this using `cross_cal_score`.
    The function requires the following four parameters: the model to make use of
    (in our case, it''s called `_lr`); the features of the dataset; the labels of
    the dataset; and the number of cross-validation splits to create (five, in our
    case).'
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这一步，你计算交叉验证得分，并将结果存储在一个 Python 列表中，命名为 `_scores`。你可以使用 `cross_val_score` 完成这个操作。该函数需要以下四个参数：所使用的模型（在我们的例子中，它叫做
    `_lr`）；数据集的特征；数据集的标签；以及创建交叉验证拆分的数量（在我们的例子中是五）。
- en: 'Now, display the scores as shown in the following code snippet:'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，按照以下代码片段显示得分：
- en: '[PRE31]'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: In this step, you display the scores using `print()`.
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这一步，你使用 `print()` 来显示得分。
- en: 'The output should look similar to the following:'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出结果应类似于以下内容：
- en: '![Figure 7.22: Printing the cross-validation scores'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图7.22：打印交叉验证得分](img/B15019_07_22.jpg)'
- en: '](img/B15019_07_22.jpg)'
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_22.jpg)'
- en: 'Figure 7.22: Printing the cross-validation scores'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.22：打印交叉验证得分
- en: Note
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You may get slightly different outputs but the best score should belong to second
    split.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会得到略微不同的输出，但最佳得分应该属于第二个拆分。
- en: To access the source code for this specific section, please refer to [https://packt.live/2DWTkAY](https://packt.live/2DWTkAY).
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问该特定部分的源代码，请参考 [https://packt.live/2DWTkAY](https://packt.live/2DWTkAY)。
- en: You can also run this example online at [https://packt.live/34d5aS8](https://packt.live/34d5aS8).
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在线运行这个例子，地址是 [https://packt.live/34d5aS8](https://packt.live/34d5aS8)。
- en: In the preceding output, you see that the Python list stored in `variable _scores`
    contains five results. Each result is the R2 score of a `LogisticRegression` model.
    As mentioned before the exercise, the data will be split into five sets, and each
    combination of the five sets will be used to train and evaluate a model, after
    which the R2 score is computed.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的输出中，你可以看到存储在 `variable _scores` 中的 Python 列表包含五个结果。每个结果都是 `LogisticRegression`
    模型的 R2 得分。正如练习开始时所提到的，数据将被拆分为五个集合，每个五集合的组合都将用于训练和评估模型，之后计算 R2 得分。
- en: You should observe from the preceding example that the same model trained on
    five different datasets yields different scores. This implies the importance of
    your data as well as how it is split.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的例子中，你应该能观察到，相同的模型在五个不同的数据集上训练时产生了不同的得分。这表明数据的重要性以及数据如何分割的重要性。
- en: By completing this exercise, we see that the best score is **0.832**, which
    belongs to thesecond split. This is our conclusion here.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 通过完成本练习，我们发现最佳分数是**0.832**，它属于第二个分割。这是我们在此得出的结论。
- en: You have seen that cross-validation yields different models.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经看到，交叉验证会生成不同的模型。
- en: But how do you get the best model to work with? There are some models or estimators
    with in-built cross-validation. Let's explain those.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如何获取最佳模型来使用呢？有些模型或估计器具有内建的交叉验证功能。我们来解释一下这些模型。
- en: Understanding Estimators That Implement CV
  id: totrans-311
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解实现CV的估计器
- en: 'The goal of using cross-validation is to find the best performing model using
    the data that you have. The process for this is:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 使用交叉验证的目标是通过你拥有的数据找到表现最好的模型。其过程如下：
- en: Split the data using something like `Kfold()`.
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用类似`Kfold()`的方式分割数据。
- en: Iterate over the number of splits and create an estimator.
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在不同的分割数之间进行迭代并创建估计器。
- en: Train and evaluate each estimator.
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 训练并评估每个估计器。
- en: Pick the estimator with the best metrics to use. You have already seen various
    approaches to doing that.
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择具有最佳指标的估计器。你已经看过多种方法来实现这一点。
- en: Cross-validation is a popular technique, so estimators exist for cross-validation.
    For example, `LogisticRegressionCV` exists as a class that implements cross-validation
    inside `LogisticRegression`. When you make use of `LogisticRegressionCV`, it returns
    an instance of `LogisticRegression`. The instance it returns is the best performing
    instance.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 交叉验证是一种流行的技术，因此也有许多为交叉验证设计的估计器。例如，`LogisticRegressionCV`是一个实现了交叉验证的类，嵌套在`LogisticRegression`中。当你使用`LogisticRegressionCV`时，它会返回一个`LogisticRegression`的实例。返回的实例是表现最好的实例。
- en: When you create an instance of `LogisticRegressionCV`, you will need to specify
    the number of `cv` parts that you want. For example, if you set `cv` to `3`, `LogisticRegressionCV`
    will train three instances of `LogisticRegression` and then evaluate them and
    return the best performing instance.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建`LogisticRegressionCV`的实例时，你需要指定你希望使用的`cv`分割数。例如，如果你将`cv`设置为`3`，`LogisticRegressionCV`将训练三个`LogisticRegression`实例，然后评估它们并返回表现最好的实例。
- en: You do not have to make use of `LogisticRegressionCV`. You can continue to make
    use of `LogisticRegression` with `Kfold` and iterations. `LogisticRegressionCV`
    simply exists as a convenience.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要使用`LogisticRegressionCV`。你可以继续使用`LogisticRegression`与`Kfold`和迭代方法。`LogisticRegressionCV`只是作为一种便利存在。
- en: In a similar manner, `LinearRegressionCV` exists as a convenient way of implementing
    cross-validation using `LinearRegression`.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 以类似的方式，`LinearRegressionCV`作为一种便利的方式实现了使用`LinearRegression`进行交叉验证。
- en: So, just to be clear, you do not have to use convenience methods such as `LogisticRegressionCV`.
    Also, they are not a replacement for their primary implementations, such as `LogisticRegression`.
    Instead, you make use of the convenience methods when you need to implement cross-validation
    but would like to cut out the four preceding steps.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，为了明确一下，你不必使用像`LogisticRegressionCV`这样的便利方法。此外，它们并不是其主要实现的替代品，比如`LogisticRegression`。相反，当你需要实施交叉验证时，你可以使用这些便利方法，这样就可以省略前面的四个步骤。
- en: LogisticRegressionCV
  id: totrans-322
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: LogisticRegressionCV
- en: '`LogisticRegressionCV` is a class that implements cross-validation inside it.
    This class will train multiple `LogisticRegression` models and return the best
    one.'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '`LogisticRegressionCV`是一个实现交叉验证的类。这个类会训练多个`LogisticRegression`模型，并返回表现最好的一个。'
- en: 'Exercise 7.06: Training a Logistic Regression Model Using Cross-Validation'
  id: totrans-324
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习7.06：使用交叉验证训练逻辑回归模型
- en: The goal of this exercise is to train a logistic regression model using cross-validation
    and get the optimal R2 result. We will be making use of the Cars dataset that
    you worked with previously.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 本练习的目标是使用交叉验证训练一个逻辑回归模型，并获得最佳的R2结果。我们将使用你之前处理过的Cars数据集。
- en: 'The following steps will help you complete the exercise:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将帮助你完成本练习：
- en: Open a new Colab notebook.
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的Colab笔记本。
- en: 'Import the necessary libraries:'
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入必要的库：
- en: '[PRE32]'
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: In this step, you import `pandas` and alias it as `pd`. You will make use of
    pandas to read in the file you will be working with.
  id: totrans-330
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这一步，你导入`pandas`并将其别名设为`pd`。你将使用pandas来读取你将要处理的文件。
- en: 'Create headers for the data:'
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为数据创建标题：
- en: '[PRE33]'
  id: totrans-332
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: In this step, you start by creating a Python list to hold the `headers` column
    for the file you will be working with. You store this list as `_headers`.
  id: totrans-333
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这一步，你首先创建一个Python列表，用来保存你将要处理的文件的`headers`列。你将这个列表存储为`_headers`。
- en: 'Read the data:'
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 读取数据：
- en: '[PRE34]'
  id: totrans-335
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: You then proceed to read in the file and store it as `df`. This is a DataFrame.
  id: totrans-336
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后，你继续读取文件并将其存储为`df`。这就是一个数据框。
- en: 'Print out the top five records:'
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印前五条记录：
- en: '[PRE35]'
  id: totrans-338
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Finally, you look at the summary of the DataFrame using `.info()`.
  id: totrans-339
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最后，你使用`.info()`查看数据框的总结信息。
- en: 'The output looks similar to the following:'
  id: totrans-340
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出结果类似于以下内容：
- en: '![Figure 7.23: The top five records of the dataframe'
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图7.23：数据框的前五条记录'
- en: '](img/B15019_07_23.jpg)'
  id: totrans-342
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_23.jpg)'
- en: 'Figure 7.23: The top five records of the dataframe'
  id: totrans-343
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图7.23：数据框的前五条记录
- en: 'Encode the categorical variables as shown in the following code snippet:'
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如下代码片段所示，编码类别变量：
- en: '[PRE36]'
  id: totrans-345
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: In this step, you convert categorical variables into encodings using the `get_dummies()`
    method from pandas. You supply the original DataFrame as a parameter and also
    specify the columns you would like to encode.
  id: totrans-346
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此步骤中，你使用pandas的`get_dummies()`方法将类别变量转换为编码。你将原始数据框作为参数传入，并指定需要编码的列。
- en: 'Finally, you take a peek at the top five rows. The output looks similar to
    the following:'
  id: totrans-347
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最后，你查看前五行数据。输出结果类似于以下内容：
- en: '![Figure 7.24: Encoding categorical variables'
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图7.24：编码类别变量'
- en: '](img/B15019_07_24.jpg)'
  id: totrans-349
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_24.jpg)'
- en: 'Figure 7.24: Encoding categorical variables'
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图7.24：编码类别变量
- en: 'Split the DataFrame into features and labels:'
  id: totrans-351
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将数据框分割成特征和标签：
- en: '[PRE37]'
  id: totrans-352
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: In this step, you create two NumPy arrays. The first, called `features`, contains
    the independent variables. The second, called `labels`, contains the values that
    the model learns to predict. These are also called `targets`.
  id: totrans-353
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此步骤中，你创建了两个NumPy数组。第一个数组叫做`features`，包含自变量。第二个数组叫做`labels`，包含模型学习预测的值，也叫做`targets`。
- en: 'Import logistic regression with cross-validation:'
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入带有交叉验证的逻辑回归：
- en: '[PRE38]'
  id: totrans-355
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: In this step, you import the `LogisticRegressionCV` class.
  id: totrans-356
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此步骤中，你导入`LogisticRegressionCV`类。
- en: 'Instantiate `LogisticRegressionCV` as shown in the following code snippet:'
  id: totrans-357
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如下代码片段所示，实例化`LogisticRegressionCV`：
- en: '[PRE39]'
  id: totrans-358
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'In this step, you create an instance of `LogisticRegressionCV`. You specify
    the following parameters:'
  id: totrans-359
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此步骤中，你创建一个`LogisticRegressionCV`实例。你指定以下参数：
- en: '`max_iter` : You set this to `2000` so that the trainer continues training
    for `2000` iterations to find better weights.'
  id: totrans-360
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`max_iter`：你将其设置为`2000`，使得训练器继续训练`2000`次迭代，以找到更好的权重。'
- en: '`multi_class`: You set this to `auto` so that the model automatically detects
    that your data has more than two classes.'
  id: totrans-361
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`multi_class`：你将其设置为`auto`，以便模型自动检测数据中是否有多个类别。'
- en: '`cv`: You set this to `5`, which is the number of cross-validation sets you
    would like to train on.'
  id: totrans-362
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`cv`：你将其设置为`5`，即你希望用于训练的交叉验证集数量。'
- en: 'Now fit the model:'
  id: totrans-363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在拟合模型：
- en: '[PRE40]'
  id: totrans-364
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: In this step, you train the model. You pass in `features` and `labels`. Because
    `labels` is a 2D array, you make use of `ravel()` to convert it into a 1D array
    or vector.
  id: totrans-365
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此步骤中，你训练模型。你传入`features`和`labels`。由于`labels`是二维数组，你可以使用`ravel()`将其转换为一维数组或向量。
- en: 'The interpreter produces an output similar to the following:'
  id: totrans-366
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 解释器生成的输出结果类似于以下内容：
- en: '![Figure 7.25: Fitting the model'
  id: totrans-367
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图7.25：拟合模型'
- en: '](img/B15019_07_25.jpg)'
  id: totrans-368
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_25.jpg)'
- en: 'Figure 7.25: Fitting the model'
  id: totrans-369
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图7.25：拟合模型
- en: In the preceding output, you see that the model fits the training data. The
    output shows you the parameters that were used in training, so you are not taken
    by surprise. Notice, for example, that `max_iter` is `2000`, which is the value
    that you set. Other parameters you didn't set make use of default values, which
    you can find out more about from the documentation.
  id: totrans-370
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的输出中，你会看到模型拟合了训练数据。输出结果显示了用于训练的参数，避免了意外情况的发生。例如，注意到`max_iter`的值为`2000`，这就是你设置的值。其他未设置的参数则使用默认值，具体可以查阅文档了解更多信息。
- en: 'Evaluate the training R2:'
  id: totrans-371
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 评估训练的R2值：
- en: '[PRE41]'
  id: totrans-372
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: In this step, we make use of the training dataset to compute the R2 score. While
    we didn't set aside a specific validation dataset, it is important to note that
    the model only saw 80% of our training data, so it still has new data to work
    with for this evaluation.
  id: totrans-373
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此步骤中，我们利用训练数据集计算R2得分。虽然我们没有专门留出验证数据集，但需要注意的是，模型仅使用了80%的训练数据，因此在进行此评估时，仍然有新数据可以使用。
- en: 'The output looks similar to the following:'
  id: totrans-374
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出结果类似于以下内容：
- en: '![Figure 7.26: Computing the R2 score'
  id: totrans-375
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图7.26：计算R2得分'
- en: '](img/B15019_07_26.jpg)'
  id: totrans-376
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_26.jpg)'
- en: 'Figure 7.26: Computing the R2 score'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.26：计算R2得分
- en: Note
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: To access the source code for this specific section, please refer to [https://packt.live/34eD1du](https://packt.live/34eD1du).
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此特定章节的源代码，请参考 [https://packt.live/34eD1du](https://packt.live/34eD1du)。
- en: You can also run this example online at [https://packt.live/2Yey40k](https://packt.live/2Yey40k).
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在线运行此示例，网址为 [https://packt.live/2Yey40k](https://packt.live/2Yey40k)。
- en: In the preceding output, you see that the final model has an `R2` score of `0.95`,
    which is a good score.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的输出中，您会看到最终模型的`R2`得分为`0.95`，这是一个不错的得分。
- en: At this point, you should see a much better `R2` score than you have previously
    encountered.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，您应该看到一个比以前遇到的更好的`R2`得分。
- en: What if you were working with other types of models that don't have cross-validation
    built into them? Can you make use of cross-validation to train models and find
    the best one? Let's find out.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用没有内置交叉验证的其他类型的模型怎么办？您可以利用交叉验证来训练模型并找到最佳模型吗？让我们来看看。
- en: Hyperparameter Tuning with GridSearchCV
  id: totrans-384
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用GridSearchCV进行超参数调优
- en: '`GridSearchCV` will take a model and parameters and train one model for each
    permutation of the parameters. At the end of the training, it will provide access
    to the parameters and the model scores. This is called hyperparameter tuning and
    you will be looking at this in much more depth in *Chapter 8, Hyperparameter Tuning*.'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: '`GridSearchCV`将接受一个模型和参数，并为每个参数的排列训练一个模型。在训练结束时，它将提供对参数和模型评分的访问权限。这被称为超参数调优，您将在*第8章，超参数调优*中深入了解这个过程。'
- en: The usual practice is to make use of a small training set to find the optimal
    parameters using hyperparameter tuning and then to train a final model with all
    of the data.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 通常的做法是利用一个小的训练集来通过超参数调优找到最佳参数，然后使用所有数据训练最终模型。
- en: Before the next exercise, let's take a brief look at decision trees, which are
    a type of model or estimator.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一步练习之前，让我们简要回顾一下决策树，它是一种模型或估算器。
- en: Decision Trees
  id: totrans-388
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 决策树
- en: A decision tree works by generating a separating hyperplane or a threshold for
    the features in data. It does this by considering every feature and finding the
    correlation between the spread of the values in that feature and the label that
    you are trying to predict.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 决策树通过为数据中的特征生成一个分割超平面或阈值来工作。它通过考虑每个特征，并找到该特征的值分布与您试图预测的标签之间的相关性来实现这一点。
- en: 'Consider the following data about balloons. The label you need to predict is
    called `inflated`. This dataset is used for predicting whether the balloon is
    inflated or deflated given the features. The features are:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下关于气球的数据。您需要预测的标签是`inflated`。这个数据集用于预测根据特征气球是否充气。特征包括：
- en: '`color`'
  id: totrans-391
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`color`'
- en: '`size`'
  id: totrans-392
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`size`'
- en: '`act`'
  id: totrans-393
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`act`'
- en: '`age`'
  id: totrans-394
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`age`'
- en: 'The following table displays the distribution of features:'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格显示了特征的分布：
- en: '![Figure 7.27: Tabular data for balloon features'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.27：气球特征的表格数据'
- en: '](img/B15019_07_27.jpg)'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15019_07_27.jpg)'
- en: 'Figure 7.27: Tabular data for balloon features'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.27：气球特征的表格数据
- en: 'Now consider the following charts, which are visualized depending on the spread
    of the features against the label:'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，考虑以下图表，这些图表根据特征与标签的分布进行可视化：
- en: 'If you consider the `Color` feature, the values are `PURPLE` and `YELLOW`,
    but the number of observations is the same, so you can''t infer whether the balloon
    is inflated or not based on the color, as you can see in the following figure:![Figure
    7.28: Barplot for the color feature'
  id: totrans-400
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果考虑`Color`特征，值为`PURPLE`和`YELLOW`，但观察值的数量相同，因此无法根据颜色推断气球是否充气，正如下图所示：![图7.28：颜色特征的条形图
- en: '](img/B15019_07_28.jpg)'
  id: totrans-401
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_28.jpg)'
- en: 'Figure 7.28: Barplot for the color feature'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.28：颜色特征的条形图
- en: 'The `Size` feature has two values: `LARGE` and `SMALL`. These are equally spread,
    so we can''t infer whether the balloon is inflated or not based on the color,
    as you can see in the following figure:![Figure 7.29: Barplot for the size feature'
  id: totrans-403
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Size`特征有两个值：`LARGE`和`SMALL`。这些值分布均匀，因此无法根据颜色推断气球是否充气，正如下图所示：![图7.29：尺寸特征的条形图'
- en: '](img/B15019_07_29.jpg)'
  id: totrans-404
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_29.jpg)'
- en: 'Figure 7.29: Barplot for the size feature'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.29：尺寸特征的条形图
- en: 'The `Act` feature has two values: `DIP` and `STRETCH`. You can see from the
    chart that the majority of the `STRETCH` values are inflated. If you had to make
    a guess, you could easily say that if `Act` is `STRETCH`, then the balloon is
    inflated. Consider the following figure:![Figure 7.30: Barplot for the act feature'
  id: totrans-406
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Act`特征有两个值：`DIP`和`STRETCH`。从图表中可以看出，大部分`STRETCH`的值对应的是气球被充气。如果你需要做出猜测，可以很容易地说，如果`Act`是`STRETCH`，那么气球就是充气的。请看下图：![图
    7.30: `Act`特征的条形图'
- en: '](img/B15019_07_30.jpg)'
  id: totrans-407
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_30.jpg)'
- en: 'Figure 7.30: Barplot for the act feature'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: '图 7.30: `Act`特征的条形图'
- en: 'Finally, the `Age` feature also has two values: `ADULT` and `CHILD`. It''s
    also visible from the chart that the `ADULT` value constitutes the majority of
    inflated balloons:![Figure 7.31: Barplot for the age feature'
  id: totrans-409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '最后，`Age`特征也有两个值：`ADULT`和`CHILD`。从图表中也可以看出，`ADULT`值占据了大部分充气气球的比例：![图 7.31: 年龄特征的条形图'
- en: '](img/B15019_07_31.jpg)'
  id: totrans-410
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_31.jpg)'
- en: 'Figure 7.31: Barplot for the age feature'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: '图 7.31: 年龄特征的条形图'
- en: 'The two features that are useful to the decision tree are `Act` and `Age`.
    The tree could start by considering whether `Act` is `STRETCH`. If it is, the
    prediction will be true. This tree would look like the following figure:'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 对于决策树有用的两个特征是`Act`和`Age`。决策树可以从判断`Act`是否为`STRETCH`开始。如果是，则预测结果为真。这个树形结构大致如下图所示：
- en: '![Figure 7.32: Decision tree with depth=1'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.32: 深度为 1 的决策树'
- en: '](img/B15019_07_32.jpg)'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15019_07_32.jpg)'
- en: 'Figure 7.32: Decision tree with depth=1'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: '图 7.32: 深度为 1 的决策树'
- en: The left side evaluates to the condition being false, and the right side evaluates
    to the condition being true. This tree has a depth of 1\. F means that the prediction
    is false, and T means that the prediction is true.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 左侧表示条件为假时的情况，右侧表示条件为真时的情况。这个树的深度为 1。F 表示预测为假，T 表示预测为真。
- en: 'To get better results, the decision tree could introduce a second level. The
    second level would utilize the `Age` feature and evaluate whether the value is
    `ADULT`. It would look like the following figure:'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获得更好的结果，决策树可以引入第二层。第二层将使用`Age`特征，并判断其值是否为`ADULT`。其结构大致如下图所示：
- en: '![Figure 7.33: Decision tree with depth=2'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.33: 深度为 2 的决策树'
- en: '](img/B15019_07_33.jpg)'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15019_07_33.jpg)'
- en: 'Figure 7.33: Decision tree with depth=2'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: '图 7.33: 深度为 2 的决策树'
- en: This tree has a depth of 2\. At the first level, it predicts true if `Act` is
    `STRETCH`. If `Act` is not `STRETCH`, it checks whether `Age` is `ADULT`. If it
    is, it predicts true, otherwise, it predicts false.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 这个树的深度为 2。在第一层，它会判断`Act`是否为`STRETCH`，如果是，则预测为真。如果`Act`不是`STRETCH`，它会检查`Age`是否为`ADULT`。如果是，则预测为真，否则预测为假。
- en: The decision tree can have as many levels as you like but starts to overfit
    at a certain point. As with everything in data science, the optimal depth depends
    on the data and is a hyperparameter, meaning you need to try different values
    to find the optimal one.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 决策树可以有任意多个层级，但在某个点之后会开始过拟合。像数据科学中的所有问题一样，最佳深度取决于数据本身，是一个超参数，这意味着你需要尝试不同的值来找到最佳的深度。
- en: In the following exercise, we will be making use of grid search with cross-validation
    to find the best parameters for a decision tree estimator.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的练习中，我们将使用网格搜索和交叉验证来为决策树估算器找到最佳参数。
- en: 'Exercise 7.07: Using Grid Search with Cross-Validation to Find the Best Parameters
    for a Model'
  id: totrans-424
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '练习 7.07: 使用网格搜索和交叉验证找到模型的最佳参数'
- en: The goal of this exercise is to make use of grid search to find the best parameters
    for a `DecisionTree` classifier. We will be making use of the Cars dataset that
    you worked with previously.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 本次练习的目标是使用网格搜索找到`DecisionTree`分类器的最佳参数。我们将使用你之前使用过的汽车数据集。
- en: 'The following steps will help you complete the exercise:'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将帮助你完成练习：
- en: Open a Colab notebook file.
  id: totrans-427
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个 Colab 笔记本文件。
- en: 'Import `pandas`:'
  id: totrans-428
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`pandas`：
- en: '[PRE42]'
  id: totrans-429
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: In this step, you import `pandas`. You alias it as `pd`. `Pandas` is used to
    read in the data you will work with subsequently.
  id: totrans-430
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这一步中，你导入`pandas`并将其别名为`pd`。`Pandas`用于读取你之后将使用的数据。
- en: 'Create `headers`:'
  id: totrans-431
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`headers`：
- en: '[PRE43]'
  id: totrans-432
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Read in the `headers`:'
  id: totrans-433
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 读取`headers`：
- en: '[PRE44]'
  id: totrans-434
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Inspect the top five records:'
  id: totrans-435
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查前五条记录：
- en: '[PRE45]'
  id: totrans-436
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The output looks similar to the following:'
  id: totrans-437
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出结果类似于下图：
- en: '![Figure 7.34: The top five records of the dataframe'
  id: totrans-438
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 7.34: 数据框的前五条记录'
- en: '](img/B15019_07_34.jpg)'
  id: totrans-439
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_34.jpg)'
- en: 'Figure 7.34: The top five records of the dataframe'
  id: totrans-440
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '图 7.34: 数据框的前五条记录'
- en: 'Encode the categorical variables:'
  id: totrans-441
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对类别变量进行编码：
- en: '[PRE46]'
  id: totrans-442
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: In this step, you utilize `.get_dummies()` to convert the categorical variables
    into encodings. The `.head()` method instructs the Python interpreter to output
    the top five columns.
  id: totrans-443
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此步骤中，您使用`.get_dummies()`将分类变量转换为编码。`.head()`方法指示Python解释器输出前五列。
- en: 'The output is similar to the following:'
  id: totrans-444
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出类似于以下内容：
- en: '![Figure 7.35: Encoding categorical variables'
  id: totrans-445
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 7.35：编码分类变量](img/B15019_07_35.jpg)'
- en: '](img/B15019_07_35.jpg)'
  id: totrans-446
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_35.jpg)'
- en: 'Figure 7.35: Encoding categorical variables'
  id: totrans-447
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.35：编码分类变量
- en: 'Separate `features` and `labels`:'
  id: totrans-448
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 分离`features`和`labels`：
- en: '[PRE47]'
  id: totrans-449
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: In this step, you create two `numpy` arrays, `features` and `labels`, the first
    containing independent variables or predictors, and the second containing dependent
    variables or targets.
  id: totrans-450
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此步骤中，您创建了两个`numpy`数组，`features`和`labels`，第一个包含独立变量或预测变量，第二个包含依赖变量或目标变量。
- en: 'Import more libraries – `numpy`, `DecisionTreeClassifier`, and `GridSearchCV`:'
  id: totrans-451
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入更多库——`numpy`、`DecisionTreeClassifier`和`GridSearchCV`：
- en: '[PRE48]'
  id: totrans-452
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: In this step, you import `numpy`. NumPy is a numerical computation library.
    You alias it as `np`. You also import `DecisionTreeClassifier`, which you use
    to create decision trees. Finally, you import `GridSearchCV`, which will use cross-validation
    to train multiple models.
  id: totrans-453
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此步骤中，您导入`numpy`。NumPy是一个数值计算库，您将其别名为`np`。您还导入`DecisionTreeClassifier`，用于创建决策树。最后，您导入`GridSearchCV`，它将使用交叉验证训练多个模型。
- en: 'Instantiate the decision tree:'
  id: totrans-454
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实例化决策树：
- en: '[PRE49]'
  id: totrans-455
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: In this step, you create an instance of `DecisionTreeClassifier` as `clf`. This
    instance will be used repeatedly by the grid search.
  id: totrans-456
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此步骤中，您创建了一个`DecisionTreeClassifier`的实例，命名为`clf`。此实例将被网格搜索重复使用。
- en: 'Create parameters – `max_depth`:'
  id: totrans-457
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建参数——`max_depth`：
- en: '[PRE50]'
  id: totrans-458
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'In this step, you create a dictionary of parameters. There are two parts to
    this dictionary:'
  id: totrans-459
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此步骤中，您创建了一个参数字典。这个字典有两个部分：
- en: The key of the dictionary is a parameter that is passed into the model. In this
    case, `max_depth` is a parameter that `DecisionTreeClassifier` takes.
  id: totrans-460
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 字典的键是传递给模型的参数。在此案例中，`max_depth`是`DecisionTreeClassifier`所接受的一个参数。
- en: The value is a Python list that grid search iterates over and passes to the
    model. In this case, we create an array that starts at 1 and ends at 7, inclusive.
  id: totrans-461
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该值是一个Python列表，网格搜索将对其进行迭代并传递给模型。在此案例中，我们创建了一个从1到7（包含）的数组。
- en: 'Instantiate the grid search as shown in the following code snippet:'
  id: totrans-462
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下代码片段实例化网格搜索：
- en: '[PRE51]'
  id: totrans-463
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: In this step, you create an instance of `GridSearchCV`. The first parameter
    is the model to train. The second parameter is the parameters to search over.
    The third parameter is the number of cross-validation splits to create.
  id: totrans-464
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此步骤中，您创建了`GridSearchCV`的一个实例。第一个参数是要训练的模型。第二个参数是要搜索的参数。第三个参数是要创建的交叉验证拆分的数量。
- en: 'Now train the models:'
  id: totrans-465
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在训练模型：
- en: '[PRE52]'
  id: totrans-466
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: In this step, you train the models using the features and labels. Depending
    on the type of model, this could take a while. Because we are using a decision
    tree, it trains quickly.
  id: totrans-467
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此步骤中，您使用特征和标签训练模型。根据模型类型，这可能需要一些时间。因为我们使用的是决策树，它训练得很快。
- en: 'The output is similar to the following:'
  id: totrans-468
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出类似于以下内容：
- en: '![Figure 7.36: Training the model'
  id: totrans-469
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 7.36：训练模型](img/B15019_07_36.jpg)'
- en: '](img/B15019_07_36.jpg)'
  id: totrans-470
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_36.jpg)'
- en: 'Figure 7.36: Training the model'
  id: totrans-471
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.36：训练模型
- en: You can learn a lot by reading the output, such as the number of cross-validation
    datasets created (called `cv` and equal to `5`), the estimator used (`DecisionTreeClassifier`),
    and the parameter search space (called `param_grid`).
  id: totrans-472
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过阅读输出，您可以学到很多信息，比如创建的交叉验证数据集数量（称为`cv`，等于`5`），使用的估算器（`DecisionTreeClassifier`），以及参数搜索空间（称为`param_grid`）。
- en: 'Print the best parameter:'
  id: totrans-473
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印最佳参数：
- en: '[PRE53]'
  id: totrans-474
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'In this step, you print out what the best parameter is. In this case, what
    we were looking for was the best `max_depth`. The output looks like the following:'
  id: totrans-475
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此步骤中，您打印出最佳参数是什么。在此案例中，我们要寻找的是最佳的`max_depth`。输出看起来类似于以下内容：
- en: '![Figure 7.37: Printing the best parameter'
  id: totrans-476
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 7.37：打印最佳参数](img/B15019_07_37.jpg)'
- en: '](img/B15019_07_37.jpg)'
  id: totrans-477
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_37.jpg)'
- en: 'Figure 7.37: Printing the best parameter'
  id: totrans-478
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.37：打印最佳参数
- en: In the preceding output, you see that the best performing model is one with
    a `max_depth` of `2`.
  id: totrans-479
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的输出中，您会看到最佳表现的模型是`max_depth`为`2`的模型。
- en: Accessing `best_params_` lets you train another model with the best-known parameters
    using a larger training dataset.
  id: totrans-480
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 访问`best_params_`可以让您使用更大的训练数据集，通过最佳已知参数重新训练另一个模型。
- en: 'Print the best `R2`:'
  id: totrans-481
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印最佳`R2`值：
- en: '[PRE54]'
  id: totrans-482
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: In this step, you print out the `R2` score of the best performing model.
  id: totrans-483
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此步骤中，您打印出最佳表现模型的`R2`得分。
- en: 'The output is similar to the following:'
  id: totrans-484
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出结果类似于以下内容：
- en: '[PRE55]'
  id: totrans-485
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: In the preceding output, you see that the best performing model has an `R2`
    score of `0.778`.
  id: totrans-486
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的输出中，你可以看到表现最好的模型的`R2`得分为`0.778`。
- en: 'Access the best model:'
  id: totrans-487
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问最佳模型：
- en: '[PRE56]'
  id: totrans-488
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'In this step, you access the best model (or estimator) using `best_estimator_`.
    This will let you analyze the model, or optionally use it to make predictions
    and find other metrics. Instructing the Python interpreter to print the best estimator
    will yield an output similar to the following:'
  id: totrans-489
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这一步，你通过`best_estimator_`访问最佳模型（或估算器）。这将让你分析模型，或者可选地使用它进行预测并找到其他指标。指示 Python
    解释器打印最佳估算器将输出类似于以下内容：
- en: '![Figure 7.38: Accessing the model'
  id: totrans-490
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 7.38：访问模型](img/B15019_07_38.jpg)'
- en: '](img/B15019_07_38.jpg)'
  id: totrans-491
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_39.jpg)'
- en: 'Figure 7.38: Accessing the model'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.38：访问模型
- en: In the preceding output, you see that the best model is `DecisionTreeClassifier`
    with a `max_depth` of `2`.
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的输出中，你可以看到最好的模型是`DecisionTreeClassifier`，其`max_depth`为`2`。
- en: Note
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: To access the source code for this specific section, please refer to [https://packt.live/2E6TdCD](https://packt.live/2E6TdCD).
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问这一特定部分的源代码，请参考[https://packt.live/2E6TdCD](https://packt.live/2E6TdCD)。
- en: You can also run this example online at [https://packt.live/3aCg30V](https://packt.live/3aCg30V).
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在线运行此示例，网址为[https://packt.live/3aCg30V](https://packt.live/3aCg30V)。
- en: Grid search is one of the first techniques that is taught for hyperparameter
    tuning. However, as the search space increases in size, it quickly becomes expensive.
    The search space increases as you increase the parameter options because every
    possible combination of parameter options is considered.
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: 网格搜索是超参数调优中最早教授的技术之一。然而，随着搜索空间的增大，计算成本迅速增加。随着你增加参数选项，搜索空间也会增大，因为会考虑每一种可能的参数组合。
- en: Consider the case in which the model (or estimator) takes more than one parameter.
    The search space becomes a multiple of the number of parameters. For example,
    if we want to train a random forest classifier, we will need to specify the number
    of trees in the forest, as well as the max depth. If we specified a max depth
    of 1, 2, and 3, and a forest with 1,000, 2,000, and 3,000 trees, we would need
    to train 9 different estimators. If we added any more parameters (or hyperparameters),
    our search space would increase geometrically.
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一下模型（或估算器）需要多个参数的情况。搜索空间将是参数数量的倍数。例如，如果我们要训练一个随机森林分类器，我们需要指定森林中的树木数量以及最大深度。如果我们指定了最大深度为
    1、2 和 3，并且森林中有 1,000、2,000 和 3,000 棵树，那么我们就需要训练 9 个不同的估算器。如果我们再增加更多参数（或超参数），我们的搜索空间将呈几何增长。
- en: Hyperparameter Tuning with RandomizedSearchCV
  id: totrans-499
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 RandomizedSearchCV 进行超参数调优
- en: Grid search goes over the entire search space and trains a model or estimator
    for every combination of parameters. Randomized search goes over only some of
    the combinations. This is a more optimal use of resources and still provides the
    benefits of hyperparameter tuning and cross-validation. You will be looking at
    this in depth in *Chapter 8, Hyperparameter Tuning*.
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 网格搜索会遍历整个搜索空间，并为每一种参数组合训练一个模型或估算器。而随机搜索只会遍历部分组合。这是一种更优化的资源使用方式，仍然能提供超参数调优和交叉验证的好处。在*第
    8 章，超参数调优*中你将深入了解这一点。
- en: Have a look at the following exercise.
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看以下练习。
- en: 'Exercise 7.08: Using Randomized Search for Hyperparameter Tuning'
  id: totrans-502
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 7.08：使用随机搜索进行超参数调优
- en: The goal of this exercise is to perform hyperparameter tuning using randomized
    search and cross-validation.
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: 这个练习的目标是使用随机搜索和交叉验证进行超参数调优。
- en: 'The following steps will help you complete this exercise:'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将帮助你完成这个练习：
- en: Open a new Colab notebook file.
  id: totrans-505
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的 Colab 笔记本文件。
- en: 'Import `pandas`:'
  id: totrans-506
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`pandas`：
- en: '[PRE57]'
  id: totrans-507
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: In this step, you import `pandas`. You will make use of it in the next step.
  id: totrans-508
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这一步中，你导入`pandas`库。你将在下一步中使用它。
- en: 'Create `headers`:'
  id: totrans-509
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`headers`：
- en: '[PRE58]'
  id: totrans-510
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Read in the data:'
  id: totrans-511
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 读取数据：
- en: '[PRE59]'
  id: totrans-512
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Check the first five rows:'
  id: totrans-513
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看前五行：
- en: '[PRE60]'
  id: totrans-514
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: You need to provide a Python list of column headers because the data does not
    contain column headers. You also inspect the DataFrame that you created.
  id: totrans-515
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你需要提供一个包含列名的 Python 列表，因为数据本身不包含列头。你还需要查看你创建的 DataFrame。
- en: 'The output is similar to the following:'
  id: totrans-516
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出结果类似于以下内容：
- en: '![Figure 7.39: The top five rows of the DataFrame'
  id: totrans-517
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 7.39：DataFrame 的前五行](img/B15019_07_38.jpg)'
- en: '](img/B15019_07_39.jpg)'
  id: totrans-518
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_39.jpg)'
- en: 'Figure 7.39: The top five rows of the DataFrame'
  id: totrans-519
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.39：DataFrame 的前五行
- en: 'Encode categorical variables as shown in the following code snippet:'
  id: totrans-520
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下代码片段对类别变量进行编码：
- en: '[PRE61]'
  id: totrans-521
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'In this step, you find a numerical representation of text data using one-hot
    encoding. The operation results in a new DataFrame. You will see that the resulting
    data structure looks similar to the following:'
  id: totrans-522
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这一步中，您通过使用独热编码找到文本数据的数值表示。该操作结果会生成一个新的DataFrame。您将看到，生成的数据结构看起来类似于以下内容：
- en: '![Figure 7.40: Encoding categorical variables'
  id: totrans-523
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 7.40：编码分类变量'
- en: '](img/B15019_07_40.jpg)'
  id: totrans-524
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_40.jpg)'
- en: 'Figure 7.40: Encoding categorical variables'
  id: totrans-525
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.40：编码分类变量
- en: 'Separate the data into independent and dependent variables, which are the `features`
    and `labels`:'
  id: totrans-526
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将数据分为独立变量和依赖变量，即`features`和`labels`：
- en: '[PRE62]'
  id: totrans-527
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: In this step, you separate the DataFrame into two `numpy` arrays called `features`
    and `labels`. `Features` contains the independent variables, while `labels` contains
    the target or dependent variables.
  id: totrans-528
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这一步中，您将DataFrame分为两个`numpy`数组，分别称为`features`和`labels`。`Features`包含独立变量，而`labels`包含目标或依赖变量。
- en: 'Import additional libraries – `numpy`, `RandomForestClassifier`, and `RandomizedSearchCV`:'
  id: totrans-529
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入额外的库——`numpy`、`RandomForestClassifier`和`RandomizedSearchCV`：
- en: '[PRE63]'
  id: totrans-530
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: In this step, you import `numpy` for numerical computations, `RandomForestClassifier`
    to create an ensemble of estimators, and `RandomizedSearchCV` to perform a randomized
    search with cross-validation.
  id: totrans-531
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这一步中，您导入`numpy`进行数值计算，导入`RandomForestClassifier`以创建一个估计器集成，并导入`RandomizedSearchCV`以执行带有交叉验证的随机搜索。
- en: 'Create an instance of `RandomForestClassifier`:'
  id: totrans-532
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`RandomForestClassifier`的实例：
- en: '[PRE64]'
  id: totrans-533
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: In this step, you instantiate `RandomForestClassifier`. A random forest classifier
    is a voting classifier. It makes use of multiple decision trees, which are trained
    on different subsets of the data. The results from the trees contribute to the
    output of the random forest by using a voting mechanism.
  id: totrans-534
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这一步中，您实例化`RandomForestClassifier`。随机森林分类器是一种投票分类器。它利用多棵决策树，这些树在不同的数据子集上进行训练。各个树的结果通过投票机制贡献到随机森林的输出中。
- en: 'Specify the parameters:'
  id: totrans-535
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 指定参数：
- en: '[PRE65]'
  id: totrans-536
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '`RandomForestClassifier` accepts many parameters, but we specify two: the number
    of trees in the forest, called `n_estimators`, and the depth of the nodes in each
    tree, called `max_depth`.'
  id: totrans-537
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`RandomForestClassifier`接受许多参数，但我们指定了两个：森林中树的数量，称为`n_estimators`，以及每棵树的节点深度，称为`max_depth`。'
- en: 'Instantiate a randomized search:'
  id: totrans-538
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实例化一个随机搜索：
- en: '[PRE66]'
  id: totrans-539
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: In this step, you specify three parameters when you instantiate the `clf` class,
    the estimator, or model to use, which is a random forest classifier, `param_distributions`,
    the parameter search space, and `cv`, the number of cross-validation datasets
    to create.
  id: totrans-540
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这一步中，您在实例化`clf`类时指定三个参数：要使用的估计器或模型（即随机森林分类器）、`param_distributions`（参数搜索空间）和`cv`（创建交叉验证数据集的数量）。
- en: 'Perform the search:'
  id: totrans-541
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行搜索：
- en: '[PRE67]'
  id: totrans-542
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'In this step, you perform the search by calling `fit()`. This operation trains
    different models using the cross-validation datasets and various combinations
    of the hyperparameters. The output from this operation is similar to the following:'
  id: totrans-543
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这一步中，您通过调用`fit()`来执行搜索。此操作使用交叉验证数据集和不同超参数的组合训练不同的模型。该操作的输出类似于以下内容：
- en: '![Figure 7.41: Output of the search operation'
  id: totrans-544
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 7.41：搜索操作的输出'
- en: '](img/B15019_07_41.jpg)'
  id: totrans-545
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_41.jpg)'
- en: 'Figure 7.41: Output of the search operation'
  id: totrans-546
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.41：搜索操作的输出
- en: In the preceding output, you see that the randomized search will be carried
    out using cross-validation with five splits (`cv=5`). The estimator to be used
    is `RandomForestClassifier`.
  id: totrans-547
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的输出中，您可以看到随机搜索将使用五折交叉验证（`cv=5`）进行。要使用的估计器是`RandomForestClassifier`。
- en: 'Print the best parameter combination:'
  id: totrans-548
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印最佳参数组合：
- en: '[PRE68]'
  id: totrans-549
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: In this step, you print out the best hyperparameters.
  id: totrans-550
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这一步中，您打印出最佳的超参数。
- en: 'The output is similar to the following:'
  id: totrans-551
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出结果类似于以下内容：
- en: '![Figure 7.42: Printing the best parameter combination'
  id: totrans-552
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 7.42：打印最佳参数组合'
- en: '](img/B15019_07_42.jpg)'
  id: totrans-553
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_42.jpg)'
- en: 'Figure 7.42: Printing the best parameter combination'
  id: totrans-554
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.42：打印最佳参数组合
- en: In the preceding output, you see that the best estimator is a Random Forest
    classifier with 1,000 trees (`n_estimators=1000`) and `max_depth=5`. You can print
    the best score by executing `print("Best score is {}".format(clf_cv.best_score_))`.
    For this exercise, this value is ~ `0.76`.
  id: totrans-555
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的输出中，您可以看到最佳估计器是一个包含1,000棵树的随机森林分类器（`n_estimators=1000`）和`max_depth=5`。您可以通过执行`print("Best
    score is {}".format(clf_cv.best_score_))`来打印最佳分数。对于这个练习，这个值大约是`0.76`。
- en: 'Inspect the best model:'
  id: totrans-556
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查最佳模型：
- en: '[PRE69]'
  id: totrans-557
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'In this step, you find the best performing estimator (or model) and print out
    its details. The output is similar to the following:'
  id: totrans-558
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这一步中，你需要找到表现最佳的估计器（或模型）并打印出其详细信息。输出结果类似于以下内容：
- en: '![Figure 7.43:  Inspecting the model'
  id: totrans-559
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 7.43：检查模型'
- en: '](img/B15019_07_43.jpg)'
  id: totrans-560
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_43.jpg)'
- en: 'Figure 7.43: Inspecting the model'
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.43：检查模型
- en: In the preceding output, you see that the best estimator is `RandomForestClassifier`
    with `n_estimators=1000` and `max_depth=5`.
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的输出中，你可以看到最佳估计器是`RandomForestClassifier`，其`n_estimators=1000`和`max_depth=5`。
- en: Note
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: To access the source code for this specific section, please refer to [https://packt.live/3aDFijn](https://packt.live/3aDFijn).
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此特定部分的源代码，请参考[https://packt.live/3aDFijn](https://packt.live/3aDFijn)。
- en: You can also run this example online at [https://packt.live/3kWMQ5r](https://packt.live/3kWMQ5r).
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在[https://packt.live/3kWMQ5r](https://packt.live/3kWMQ5r)上在线运行此示例。
- en: In this exercise, you learned to make use of cross-validation and random search
    to find the best model using a combination of hyperparameters. This process is
    called hyperparameter tuning, in which you find the best combination of hyperparameters
    to use to train the model that you will put into production.
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: 在本练习中，你学会了如何利用交叉验证和随机搜索来找到最佳模型，这个过程结合了超参数。这一过程叫做超参数调优，在其中你可以找到最佳的超参数组合来训练模型，并将其投入生产使用。
- en: Model Regularization with Lasso Regression
  id: totrans-567
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用套索回归进行模型正则化
- en: As mentioned at the beginning of this chapter models can overfit training data.
    One reason for this is having too many features with large coefficients (also
    called weights). The key to solving this type of overfitting problem is reducing
    the magnitude of the coefficients.
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: 如本章开头所述，模型可能会对训练数据发生过拟合。造成过拟合的原因之一是特征数量过多且系数较大（也叫权重）。解决此类过拟合问题的关键是减小系数的大小。
- en: 'You may recall that weights are optimized during model training. One method
    for optimizing weights is called gradient descent. The gradient update rule makes
    use of a differentiable loss function. Examples of differentiable loss functions
    are:'
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能记得，权重是在模型训练过程中进行优化的。优化权重的一种方法叫做梯度下降。梯度更新规则利用可微分的损失函数。可微分损失函数的例子包括：
- en: Mean Absolute Error (MAE)
  id: totrans-570
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 平均绝对误差（MAE）
- en: Mean Squared Error (MSE)
  id: totrans-571
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 均方误差（MSE）
- en: For lasso regression, a penalty is introduced in the loss function. The technicalities
    of this implementation are hidden by the class. The penalty is also called a regularization parameter.
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: 对于套索回归，损失函数中引入了惩罚项。该实现的技术细节由类隐藏。这个惩罚项也叫做正则化参数。
- en: Consider the following exercise in which you over-engineer a model to introduce
    overfitting, and then use lasso regression to get better results.
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: 请考虑以下练习，在其中你过度工程化一个模型以引入过拟合，然后使用套索回归来获得更好的结果。
- en: 'Exercise 7.09: Fixing Model Overfitting Using Lasso Regression'
  id: totrans-574
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 7.09：使用套索回归修复模型过拟合
- en: The goal of this exercise is to teach you how to identify when your model starts
    overfitting, and to use lasso regression to fix overfitting in your model.
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: 本练习的目标是教你如何识别模型何时开始过拟合，并使用套索回归修复模型中的过拟合问题。
- en: Note
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The data you will be making use of is the Combined Cycle Power Plant Data Set
    from the UCI Machine Learning Repository. It contains 9568 data points collected
    from a Combined Cycle Power Plant. Features include temperature, pressure, humidity,
    and exhaust vacuum. These are used to predict the net hourly electrical energy
    output of the plant. See the following link: [https://packt.live/2v9ohwK](https://packt.live/2v9ohwK).'
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 你将使用的数据集来自UCI机器学习库中的联合循环电厂数据集。该数据集包含从联合循环电厂收集的9568个数据点。特征包括温度、气压、湿度和排气真空。这些数据用于预测电厂的每小时净电能输出。请参阅以下链接：[https://packt.live/2v9ohwK](https://packt.live/2v9ohwK)。
- en: 'The attribute information states "Features consist of hourly average ambient variables:'
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: 属性信息表明“特征由每小时平均的环境变量组成：
- en: Temperature (T) in the range 1.81°C and 37.11°C,
  id: totrans-579
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 温度（T）范围为1.81°C至37.11°C，
- en: Ambient Pressure (AP) in the range 992.89-1033.30 millibar,
  id: totrans-580
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 环境气压（AP）范围为992.89-1033.30 毫巴，
- en: Relative Humidity (RH) in the range 25.56% to 100.16%
  id: totrans-581
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 相对湿度（RH）范围为25.56%至100.16%
- en: Exhaust Vacuum (V) in the range 25.36-81.56 cm Hg
  id: totrans-582
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 排气真空（V）范围为25.36-81.56 cm Hg
- en: Net hourly electrical energy output (EP) 420.26-495.76 MW
  id: totrans-583
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每小时净电能输出（EP）为420.26-495.76 MW
- en: The averages are taken from various sensors located around the plant that record
    the ambient variables every second. The variables are given without normalization."
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: 平均值来自位于工厂各地的传感器，这些传感器每秒记录一次环境变量。这些变量未经过归一化处理。
- en: 'The following steps will help you complete the exercise:'
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将帮助你完成练习：
- en: Open a Colab notebook.
  id: totrans-586
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个 Colab 笔记本。
- en: 'Import the required libraries:'
  id: totrans-587
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入所需的库：
- en: '[PRE70]'
  id: totrans-588
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Read in the data:'
  id: totrans-589
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 读取数据：
- en: '[PRE71]'
  id: totrans-590
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Inspect the DataFrame:'
  id: totrans-591
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查数据框：
- en: '[PRE72]'
  id: totrans-592
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'The `.info()` method prints out a summary of the DataFrame, including the names
    of the columns and the number of records. The output might be similar to the following:'
  id: totrans-593
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`.info()` 方法打印数据框的概述，包括列的名称和记录的数量。输出可能类似于以下内容：'
- en: '![Figure 7.44: Inspecting the dataframe'
  id: totrans-594
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 7.44：检查数据框](img/B15019_07_44.jpg)'
- en: '](img/B15019_07_44.jpg)'
  id: totrans-595
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_44.jpg)'
- en: 'Figure 7.44: Inspecting the dataframe'
  id: totrans-596
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.44：检查数据框
- en: 'You can see from the preceding figure that the DataFrame has 5 columns and
    9,568 records. You can see that all columns contain numeric data and that the
    columns have the following names: `AT`, `V`, `AP`, `RH`, and `PE`.'
  id: totrans-597
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从前面的图中可以看出，数据框有 5 列和 9,568 条记录。你可以看到所有列都包含数字数据，并且列的名称如下：`AT`、`V`、`AP`、`RH` 和
    `PE`。
- en: 'Extract features into a column called `X`:'
  id: totrans-598
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将特征提取到名为 `X` 的列中：
- en: '[PRE73]'
  id: totrans-599
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Extract labels into a column called `y`:'
  id: totrans-600
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将标签提取到名为 `y` 的列中：
- en: '[PRE74]'
  id: totrans-601
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Split the data into training and evaluation sets:'
  id: totrans-602
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将数据分为训练集和评估集：
- en: '[PRE75]'
  id: totrans-603
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Create an instance of a `LinearRegression` model:'
  id: totrans-604
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `LinearRegression` 模型的实例：
- en: '[PRE76]'
  id: totrans-605
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Fit the model on the training data:'
  id: totrans-606
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在训练数据上拟合模型：
- en: '[PRE77]'
  id: totrans-607
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'The output from this step should look similar to the following:'
  id: totrans-608
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个步骤的输出应类似于以下内容：
- en: '![Figure 7.45: Fitting the model on training data'
  id: totrans-609
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 7.45：在训练数据上拟合模型](img/B15019_07_45.jpg)'
- en: '](img/B15019_07_45.jpg)'
  id: totrans-610
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_45.jpg)'
- en: 'Figure 7.45: Fitting the model on training data'
  id: totrans-611
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.45：在训练数据上拟合模型
- en: 'Use the model to make predictions on the evaluation dataset:'
  id: totrans-612
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用模型在评估数据集上进行预测：
- en: '[PRE78]'
  id: totrans-613
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Print out the `R2` score of the model:'
  id: totrans-614
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印模型的 `R2` 分数：
- en: '[PRE79]'
  id: totrans-615
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'The output of this step should look similar to the following:'
  id: totrans-616
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个步骤的输出应类似于以下内容：
- en: '![Figure 7.46: Printing the R2 score'
  id: totrans-617
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 7.46：打印 R2 分数](img/B15019_07_46.jpg)'
- en: '](img/B15019_07_46.jpg)'
  id: totrans-618
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_46.jpg)'
- en: 'Figure 7.46: Printing the R2 score'
  id: totrans-619
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.46：打印 R2 分数
- en: You will notice that the `R2` score for this model is `0.926`. You will make
    use of this figure to compare with the next model you train. Recall that this
    is an evaluation metric.
  id: totrans-620
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你会注意到，这个模型的 `R2` 分数为 `0.926`。你将用这个分数来与下一个训练的模型进行比较。记住，这也是一个评估指标。
- en: 'Print out the Mean Squared Error (MSE) of this model:'
  id: totrans-621
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印该模型的均方误差（MSE）：
- en: '[PRE80]'
  id: totrans-622
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'The output of this step should look similar to the following:'
  id: totrans-623
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个步骤的输出应类似于以下内容：
- en: '![Figure 7.47: Printing the MSE'
  id: totrans-624
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 7.47：打印 MSE](img/B15019_07_47.jpg)'
- en: '](img/B15019_07_47.jpg)'
  id: totrans-625
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_47.jpg)'
- en: 'Figure 7.47: Printing the MSE'
  id: totrans-626
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.47：打印 MSE
- en: You will notice that the MSE is `21.675`. This is an evaluation metric that
    you will use to compare this model to subsequent models.
  id: totrans-627
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你会注意到，MSE 为 `21.675`。这是一个评估指标，你将用它来比较这个模型与后续模型的表现。
- en: The first model was trained on four features. You will now train a new model
    on four cubed features.
  id: totrans-628
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 第一个模型是基于四个特征进行训练的。你现在将基于四个立方特征训练一个新模型。
- en: 'Create a list of tuples to serve as a pipeline:'
  id: totrans-629
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个元组列表，作为管道：
- en: '[PRE81]'
  id: totrans-630
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: In this step, you create a list with three tuples. The first tuple represents
    a scaling operation that makes use of `MinMaxScaler`. The second tuple represents
    a feature engineering step and makes use of `PolynomialFeatures`. The third tuple
    represents a `LinearRegression` model.
  id: totrans-631
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此步骤中，你将创建一个包含三个元组的列表。第一个元组表示使用 `MinMaxScaler` 进行的缩放操作。第二个元组表示特征工程步骤，使用 `PolynomialFeatures`。第三个元组表示
    `LinearRegression` 模型。
- en: The first element of the tuple represents the name of the step, while the second
    element represents the class that performs a transformation or an estimator.
  id: totrans-632
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 元组的第一个元素表示步骤的名称，第二个元素表示执行转换或估算的类。
- en: 'Create an instance of a pipeline:'
  id: totrans-633
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建管道的实例：
- en: '[PRE82]'
  id: totrans-634
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'Train the instance of the pipeline:'
  id: totrans-635
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 训练管道的实例：
- en: '[PRE83]'
  id: totrans-636
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'The pipeline implements a `.fit()` method, which is also implemented in all
    instances of transformers and estimators. The `.fit()` method causes `.fit_transform()`
    to be called on transformers, and causes `.fit()` to be called on estimators.
    The output of this step is similar to the following:'
  id: totrans-637
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该管道实现了 `.fit()` 方法，这个方法在所有的转换器和估算器实例中都有实现。`.fit()` 方法会触发对转换器调用 `.fit_transform()`，并会触发对估算器调用
    `.fit()`。这个步骤的输出应类似于以下内容：
- en: '![Figure 7.48: Training the instance of the pipeline'
  id: totrans-638
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 7.48：训练管道的实例](img/B15019_07_48.jpg)'
- en: '](img/B15019_07_48.jpg)'
  id: totrans-639
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_48.jpg)'
- en: 'Figure 7.48: Training the instance of the pipeline'
  id: totrans-640
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.48：训练管道实例
- en: You can see from the output that a pipeline was trained. You can see that the
    steps are made up of `MinMaxScaler` and `PolynomialFeatures`, and that the final
    step is made up of `LinearRegression`.
  id: totrans-641
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从输出中可以看到，管道已经被训练完成。你可以看到，步骤由`MinMaxScaler`和`PolynomialFeatures`组成，最终步骤由`LinearRegression`组成。
- en: 'Print out the `R2` score of the model:'
  id: totrans-642
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印出模型的`R2`评分：
- en: '[PRE84]'
  id: totrans-643
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'The output is similar to the following:'
  id: totrans-644
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出类似于以下内容：
- en: '![Figure 7.49: The R2 score of the model'
  id: totrans-645
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 7.49：模型的R2评分'
- en: '](img/B15019_07_49.jpg)'
  id: totrans-646
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_49.jpg)'
- en: 'Figure 7.49: The R2 score of the model'
  id: totrans-647
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.49：模型的R2评分
- en: You can see from the preceding that the `R2` score is `0.944`, which is better
    than the `R2` score of the first model, which was `0.932`. You can start to observe
    that the metrics suggest that this model is better than the first one.
  id: totrans-648
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从前面的输出中可以看到，`R2`评分为`0.944`，比第一个模型的`R2`评分`0.932`要好。你可以开始观察到，指标表明这个模型比第一个模型要好。
- en: 'Use the model to predict on the evaluation data:'
  id: totrans-649
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用模型对评估数据进行预测：
- en: '[PRE85]'
  id: totrans-650
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'Print the MSE of the second model:'
  id: totrans-651
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印第二个模型的MSE：
- en: '[PRE86]'
  id: totrans-652
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'The output is similar to the following:'
  id: totrans-653
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出类似于以下内容：
- en: '![Figure 7.50: The MSE of the second model'
  id: totrans-654
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 7.50：第二个模型的MSE'
- en: '](img/B15019_07_50.jpg)'
  id: totrans-655
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_50.jpg)'
- en: 'Figure 7.50: The MSE of the second model'
  id: totrans-656
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.50：第二个模型的MSE
- en: You can see from the output that the MSE of the second model is `16.27`. This
    is less than the MSE of the first model, which is `19.73`. You can safely conclude
    that the second model is better than the first.
  id: totrans-657
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从输出中可以看到，第二个模型的MSE是`16.27`。这低于第一个模型的MSE，后者为`19.73`。你可以得出结论，第二个模型比第一个模型要好。
- en: 'Inspect the model coefficients (also called weights):'
  id: totrans-658
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查模型系数（也叫权重）：
- en: '[PRE87]'
  id: totrans-659
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: In this step, you will note that `lr_model_2` is a pipeline. The final object
    in this pipeline is the model, so you make use of list addressing to access this
    by setting the index of the list element to `-1`.
  id: totrans-660
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这一步，你会注意到`lr_model_2`是一个管道。这个管道中的最后一个对象是模型，所以你通过设置列表元素的索引为`-1`来使用列表访问它。
- en: 'Once you have the model, which is the final element in the pipeline, you make
    use of `.coef_` to get the model coefficients. The output is similar to the following:'
  id: totrans-661
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一旦你得到了模型，即管道中的最后一个元素，你可以使用`.coef_`来获取模型系数。输出类似于以下内容：
- en: '![Figure 7.51: Print the model coefficients'
  id: totrans-662
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 7.51：打印模型系数'
- en: '](img/B15019_07_51.jpg)'
  id: totrans-663
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_51.jpg)'
- en: 'Figure 7.51: Print the model coefficients'
  id: totrans-664
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.51：打印模型系数
- en: You will note from the preceding output that the majority of the values are
    in the tens, some values are in the hundreds, and one value has a really small magnitude.
  id: totrans-665
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从前面的输出中你会注意到，大部分值在十位数，有些值在百位数，而有一个值的幅度非常小。
- en: 'Check for the number of coefficients in this model:'
  id: totrans-666
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查这个模型中的系数数量：
- en: '[PRE88]'
  id: totrans-667
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'The output for this step is similar to the following:'
  id: totrans-668
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这一步的输出类似于以下内容：
- en: '[PRE89]'
  id: totrans-669
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE89]'
- en: You can see from the preceding screenshot that the second model has `35` coefficients.
  id: totrans-670
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从前面的截图中可以看到，第二个模型有`35`个系数。
- en: 'Create a `steps` list with `PolynomialFeatures` of degree `10`:'
  id: totrans-671
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含`PolynomialFeatures`阶数为`10`的`steps`列表：
- en: '[PRE90]'
  id: totrans-672
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'Create a third model from the preceding steps:'
  id: totrans-673
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从前面的步骤创建第三个模型：
- en: '[PRE91]'
  id: totrans-674
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'Fit the third model on the training data:'
  id: totrans-675
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在训练数据上拟合第三个模型：
- en: '[PRE92]'
  id: totrans-676
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'The output from this step is similar to the following:'
  id: totrans-677
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这一步的输出类似于以下内容：
- en: '![Figure 7.52: Fitting the third model on the data'
  id: totrans-678
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 7.52：将第三个模型拟合到数据上'
- en: '](img/B15019_07_52.jpg)'
  id: totrans-679
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_52.jpg)'
- en: 'Figure 7.52: Fitting the third model on the data'
  id: totrans-680
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.52：将第三个模型拟合到数据上
- en: You can see from the output that the pipeline makes use of `PolynomialFeatures`
    of degree `10`. You are doing this in the hope of getting a better model.
  id: totrans-681
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从输出中可以看到，管道使用了`PolynomialFeatures`，其阶数为`10`。你这么做是希望获得一个更好的模型。
- en: 'Print out the `R2` score of this model:'
  id: totrans-682
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印出这个模型的`R2`评分：
- en: '[PRE93]'
  id: totrans-683
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'The output of this model is similar to the following:'
  id: totrans-684
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个模型的输出类似于以下内容：
- en: '![Figure 7.53: R2 score of the model'
  id: totrans-685
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 7.53：模型的R2评分'
- en: '](img/B15019_07_53.jpg)'
  id: totrans-686
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_53.jpg)'
- en: 'Figure 7.53: R2 score of the model'
  id: totrans-687
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.53：模型的R2评分
- en: You can see from the preceding figure that the R2 score is now `0.56`. The previous
    model had an `R2` score of `0.944`. This model has an R2 score that is considerably
    worse than the one of the previous model, `lr_model_2`. This happens when your
    model is overfitting.
  id: totrans-688
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从前面的图中可以看到，R2评分现在是`0.56`。之前的模型的`R2`评分是`0.944`。这个模型的R2评分明显低于前一个模型`lr_model_2`的评分。这发生在模型出现过拟合时。
- en: 'Use `lr_model_3` to predict on evaluation data:'
  id: totrans-689
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `lr_model_3` 对评估数据进行预测：
- en: '[PRE94]'
  id: totrans-690
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'Print out the MSE for `lr_model_3`:'
  id: totrans-691
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印 `lr_model_3` 的 MSE：
- en: '[PRE95]'
  id: totrans-692
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'The output for this step might be similar to the following:'
  id: totrans-693
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该步骤的输出可能类似于以下内容：
- en: '![Figure 7.54: The MSE of the model'
  id: totrans-694
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 7.54：模型的 MSE'
- en: '](img/B15019_07_54.jpg)'
  id: totrans-695
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_54.jpg)'
- en: 'Figure 7.54: The MSE of the model'
  id: totrans-696
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.54：模型的 MSE
- en: You can see from the preceding figure that the MSE is also considerably worse.
    The MSE is `126.25`, as compared to `16.27` for the previous model.
  id: totrans-697
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从前面的图中可以看出，MSE 也明显变差了。MSE 为 `126.25`，而前一个模型的 MSE 为 `16.27`。
- en: 'Print out the number of coefficients (also called weights) in this model:'
  id: totrans-698
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印此模型中的系数数量（也称为权重）：
- en: '[PRE96]'
  id: totrans-699
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'The output might resemble the following:'
  id: totrans-700
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出可能类似于以下内容：
- en: '![Figure 7.55: Printing the number of coefficients'
  id: totrans-701
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 7.55：打印系数数量'
- en: '](img/B15019_07_55.jpg)'
  id: totrans-702
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_55.jpg)'
- en: 'Figure 7.55: Printing the number of coefficients'
  id: totrans-703
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.55：打印系数数量
- en: You can see that the model has 1,001 coefficients.
  id: totrans-704
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以看到该模型有 1,001 个系数。
- en: 'Inspect the first 35 coefficients to get a sense of the individual magnitudes:'
  id: totrans-705
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查前 35 个系数，以了解单个系数的幅度：
- en: '[PRE97]'
  id: totrans-706
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'The output might be similar to the following:'
  id: totrans-707
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出可能类似于以下内容：
- en: '![Figure 7.56: Inspecting the first 35 coefficients'
  id: totrans-708
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 7.56：检查前 35 个系数'
- en: '](img/B15019_07_56.jpg)'
  id: totrans-709
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_56.jpg)'
- en: 'Figure 7.56: Inspecting the first 35 coefficients'
  id: totrans-710
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.56：检查前 35 个系数
- en: You can see from the output that the coefficients have significantly larger
    magnitudes than the coefficients from `lr_model_2`.
  id: totrans-711
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从输出中可以看到，系数的幅度明显大于 `lr_model_2` 的系数。
- en: In the next steps, you will train a lasso regression model on the same set of
    features to reduce overfitting.
  id: totrans-712
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在接下来的步骤中，你将使用相同的特征训练一个 lasso 回归模型，以减少过拟合。
- en: 'Create a list of steps for the pipeline you will create later on:'
  id: totrans-713
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建你将稍后创建的管道的步骤列表：
- en: '[PRE98]'
  id: totrans-714
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE98]'
- en: You create a list of steps for the pipeline you will create. Note that the third
    step in this list is an instance of lasso. The parameter called `alpha` in the
    call to `Lasso()` is the regularization parameter. You can play around with any
    values from 0 to 1 to see how it affects the performance of the model that you
    train.
  id: totrans-715
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你创建了将要创建的管道的步骤列表。请注意，此列表中的第三步是 lasso 实例。调用 `Lasso()` 中的 `alpha` 参数是正则化参数。你可以尝试不同的
    0 到 1 之间的值，看看它如何影响你训练的模型的性能。
- en: 'Create an instance of a pipeline:'
  id: totrans-716
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个管道实例：
- en: '[PRE99]'
  id: totrans-717
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'Fit the pipeline on the training data:'
  id: totrans-718
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在训练数据上拟合管道：
- en: '[PRE100]'
  id: totrans-719
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE100]'
- en: 'The output from this operation might be similar to the following:'
  id: totrans-720
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此操作的输出可能类似于以下内容：
- en: '![Figure 7.57: Fitting the pipeline on the training data'
  id: totrans-721
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 7.57：在训练数据上拟合管道'
- en: '](img/B15019_07_57.jpg)'
  id: totrans-722
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_57.jpg)'
- en: 'Figure 7.57: Fitting the pipeline on the training data'
  id: totrans-723
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.57：在训练数据上拟合管道
- en: You can see from the output that the pipeline trained a lasso model in the final
    step. The regularization parameter was `0.01` and the model trained for a maximum
    of 1,000 iterations.
  id: totrans-724
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从输出中可以看到，管道在最后一步训练了一个 lasso 模型。正则化参数为 `0.01`，模型最多训练了 1,000 次迭代。
- en: 'Print the `R2` score of `lasso_model`:'
  id: totrans-725
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印 `lasso_model` 的 `R2` 分数：
- en: '[PRE101]'
  id: totrans-726
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'The output of this step might be similar to the following:'
  id: totrans-727
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该步骤的输出可能类似于以下内容：
- en: '![Figure 7.58: R2 score'
  id: totrans-728
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 7.58：R2 分数'
- en: '](img/B15019_07_58.jpg)'
  id: totrans-729
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_58.jpg)'
- en: 'Figure 7.58: R2 score'
  id: totrans-730
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.58：R2 分数
- en: You can see that the `R2` score has climbed back up to `0.94`, which is considerably
    better than the score of `0.56` that `lr_model_3` had. This is already looking
    like a better model.
  id: totrans-731
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以看到，`R2` 分数已回升至 `0.94`，比 `lr_model_3` 的 `0.56` 分数要好得多。这已经看起来像是一个更好的模型。
- en: 'Use `lasso_model` to predict on the evaluation data:'
  id: totrans-732
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `lasso_model` 对评估数据进行预测：
- en: '[PRE102]'
  id: totrans-733
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE102]'
- en: 'Print the MSE of `lasso_model`:'
  id: totrans-734
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印 `lasso_model` 的 MSE：
- en: '[PRE103]'
  id: totrans-735
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE103]'
- en: 'The output might be similar to the following:'
  id: totrans-736
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出可能类似于以下内容：
- en: '![Figure 7.59: MSE of lasso model'
  id: totrans-737
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 7.59：lasso 模型的 MSE'
- en: '](img/B15019_07_59.jpg)'
  id: totrans-738
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_59.jpg)'
- en: 'Figure 7.59: MSE of lasso model'
  id: totrans-739
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.59：lasso 模型的 MSE
- en: You can see from the output that the MSE is `17.01`, which is way lower than
    the MSE value of `126.25` that `lr_model_3` had. You can safely conclude that
    this is a much better model.
  id: totrans-740
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从输出中可以看到，MSE 为 `17.01`，远低于 `lr_model_3` 的 MSE 值 `126.25`。你可以放心地得出结论，这是一个更好的模型。
- en: 'Print out the number of coefficients in `lasso_model`:'
  id: totrans-741
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印 `lasso_model` 中的系数数量：
- en: '[PRE104]'
  id: totrans-742
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'The output might be similar to the following:'
  id: totrans-743
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出可能类似于以下内容：
- en: '[PRE105]'
  id: totrans-744
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE105]'
- en: You can see that this model has 1,001 coefficients, which is the same number
    of coefficients that `lr_model_3` had.
  id: totrans-745
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以看到该模型有 1,001 个系数，这与 `lr_model_3` 的系数数量相同。
- en: 'Print out the values of the first 35 coefficients:'
  id: totrans-746
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印前 35 个系数的值：
- en: '[PRE106]'
  id: totrans-747
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'The output might be similar to the following:'
  id: totrans-748
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出可能类似于以下内容：
- en: '![Figure 7.60: Printing the values of 35 coefficients'
  id: totrans-749
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 7.60：打印 35 个系数的值'
- en: '](img/B15019_07_60.jpg)'
  id: totrans-750
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_60.jpg)'
- en: 'Figure 7.60: Printing the values of 35 coefficients'
  id: totrans-751
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.60：打印 35 个系数的值
- en: You can see from the preceding output that some of the coefficients are set
    to `0`. This has the effect of ignoring the corresponding column of data in the
    input. You can also see that the remaining coefficients have magnitudes of less
    than 100\. This goes to show that the model is no longer overfitting.
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的输出中可以看到，有些系数被设置为 `0`。这意味着在输入数据中相应的列被忽略。你还可以看到，剩余的系数幅度小于 100，这表明模型不再过拟合。
- en: Note
  id: totrans-753
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: To access the source code for this specific section, please refer to [https://packt.live/319S6en](https://packt.live/319S6en).
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
  zh: 若要访问此特定部分的源代码，请参阅 [https://packt.live/319S6en](https://packt.live/319S6en)。
- en: You can also run this example online at [https://packt.live/319AAXD](https://packt.live/319AAXD).
  id: totrans-755
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以在网上运行这个例子，网址是 [https://packt.live/319AAXD](https://packt.live/319AAXD)。
- en: This exercise taught you how to fix overfitting by using `LassoRegression` to
    train a new model.
  id: totrans-756
  prefs: []
  type: TYPE_NORMAL
  zh: 本练习教你如何通过使用 `LassoRegression` 训练新模型来解决过拟合问题。
- en: In the next section, you will learn about using ridge regression to solve overfitting
    in a model.
  id: totrans-757
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，你将学习如何使用岭回归解决模型中的过拟合问题。
- en: Ridge Regression
  id: totrans-758
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 岭回归
- en: You just learned about lasso regression, which introduces a penalty and tries
    to eliminate certain features from the data. Ridge regression takes an alternative
    approach by introducing a penalty that penalizes large weights. As a result, the
    optimization process tries to reduce the magnitude of the coefficients without
    completely eliminating them.
  id: totrans-759
  prefs: []
  type: TYPE_NORMAL
  zh: 你刚刚学习了套索回归（lasso regression），它引入了惩罚项并试图从数据中消除某些特征。岭回归（ridge regression）采用了另一种方法，它通过引入惩罚项来惩罚大权重。因此，优化过程尝试减少系数的幅度，而不是完全消除它们。
- en: 'Exercise 7.10: Fixing Model Overfitting Using Ridge Regression'
  id: totrans-760
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 7.10：使用岭回归修复模型过拟合
- en: The goal of this exercise is to teach you how to identify when your model starts
    overfitting, and to use ridge regression to fix overfitting in your model.
  id: totrans-761
  prefs: []
  type: TYPE_NORMAL
  zh: 本练习的目标是教你如何识别模型何时开始过拟合，并使用岭回归修正模型的过拟合问题。
- en: Note
  id: totrans-762
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You will be using the same dataset as in *Exercise 7.09*, *Fixing Model Overfitting
    Using Lasso Regression.*
  id: totrans-763
  prefs: []
  type: TYPE_NORMAL
  zh: 你将使用与 *练习 7.09* 相同的数据集，*使用 Lasso 回归修复模型过拟合*。
- en: 'The following steps will help you complete the exercise:'
  id: totrans-764
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将帮助你完成练习：
- en: Open a Colab notebook.
  id: totrans-765
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个 Colab 笔记本。
- en: 'Import the required libraries:'
  id: totrans-766
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入所需的库：
- en: '[PRE107]'
  id: totrans-767
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE107]'
- en: 'Read in the data:'
  id: totrans-768
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 读取数据：
- en: '[PRE108]'
  id: totrans-769
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE108]'
- en: 'Inspect the DataFrame:'
  id: totrans-770
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查 DataFrame：
- en: '[PRE109]'
  id: totrans-771
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE109]'
- en: 'The `.info()` method prints out a summary of the DataFrame, including the names
    of the columns and the number of records. The output might be similar to the following:'
  id: totrans-772
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`.info()` 方法打印出 DataFrame 的摘要，包括列名和记录数。输出可能类似于以下内容：'
- en: '![Figure 7.61: Inspecting the dataframe'
  id: totrans-773
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 7.61：检查 DataFrame'
- en: '](img/B15019_07_61.jpg)'
  id: totrans-774
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_61.jpg)'
- en: 'Figure 7.61: Inspecting the dataframe'
  id: totrans-775
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.61：检查 DataFrame
- en: 'You can see from the preceding figure that the DataFrame has 5 columns and
    9,568 records. You can see that all columns contain numeric data and that the
    columns have the names: `AT`, `V`, `AP`, `RH`, and `PE`.'
  id: totrans-776
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从前面的图中可以看到，DataFrame 有 5 列和 9,568 条记录。你可以看到所有列都包含数字数据，列名分别为：`AT`、`V`、`AP`、`RH`
    和 `PE`。
- en: 'Extract features into a column called `X`:'
  id: totrans-777
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将特征提取到名为 `X` 的列中：
- en: '[PRE110]'
  id: totrans-778
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE110]'
- en: 'Extract labels into a column called `y`:'
  id: totrans-779
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将标签提取到名为 `y` 的列中：
- en: '[PRE111]'
  id: totrans-780
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE111]'
- en: 'Split the data into training and evaluation sets:'
  id: totrans-781
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将数据分为训练集和评估集：
- en: '[PRE112]'
  id: totrans-782
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE112]'
- en: 'Create an instance of a `LinearRegression` model:'
  id: totrans-783
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `LinearRegression` 模型的实例：
- en: '[PRE113]'
  id: totrans-784
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE113]'
- en: 'Fit the model on the training data:'
  id: totrans-785
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在训练数据上拟合模型：
- en: '[PRE114]'
  id: totrans-786
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE114]'
- en: 'The output from this step should look similar to the following:'
  id: totrans-787
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这一步的输出应该类似于以下内容：
- en: '![Figure 7.62: Fitting the model on data'
  id: totrans-788
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 7.62：在数据上拟合模型'
- en: '](img/B15019_07_62.jpg)'
  id: totrans-789
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_62.jpg)'
- en: 'Figure 7.62: Fitting the model on data'
  id: totrans-790
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.62：在数据上拟合模型
- en: 'Use the model to make predictions on the evaluation dataset:'
  id: totrans-791
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用模型对评估数据集进行预测：
- en: '[PRE115]'
  id: totrans-792
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE115]'
- en: 'Print out the `R2` score of the model:'
  id: totrans-793
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印出模型的 `R2` 分数：
- en: '[PRE116]'
  id: totrans-794
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE116]'
- en: 'The output of this step should look similar to the following:'
  id: totrans-795
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这一步的输出应该类似于以下内容：
- en: '![Figure 7.63: R2 score'
  id: totrans-796
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 7.63：R2 分数'
- en: '](img/B15019_07_63.jpg)'
  id: totrans-797
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_63.jpg)'
- en: 'Figure 7.63: R2 score'
  id: totrans-798
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.63：R2 分数
- en: You will notice that the R2 score for this model is `0.933`. You will make use
    of this figure to compare it with the next model you train. Recall that this is
    an evaluation metric.
  id: totrans-799
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你会注意到，这个模型的 R2 分数是 `0.933`。你将利用这个数据与下一个训练的模型进行比较。请记住，这是一个评估指标。
- en: 'Print out the MSE of this model:'
  id: totrans-800
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输出该模型的 MSE：
- en: '[PRE117]'
  id: totrans-801
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE117]'
- en: 'The output of this step should look similar to the following:'
  id: totrans-802
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此步骤的输出应类似于以下内容：
- en: '![Figure 7.64: The MSE of the model'
  id: totrans-803
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 7.64：模型的均方误差（MSE）'
- en: '](img/B15019_07_64.jpg)'
  id: totrans-804
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_64.jpg)'
- en: 'Figure 7.64: The MSE of the model'
  id: totrans-805
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.64：模型的均方误差（MSE）
- en: You will notice that the MSE is `19.734`. This is an evaluation metric that
    you will use to compare this model to subsequent models.
  id: totrans-806
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你会注意到，模型的 MSE 为 `19.734`。这是一个评估指标，你将用它来比较该模型与后续模型的表现。
- en: The first model was trained on four features. You will now train a new model
    on four cubed features.
  id: totrans-807
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 第一个模型是通过四个特征进行训练的。现在，你将基于四个立方特征训练一个新模型。
- en: 'Create a list of tuples to serve as a pipeline:'
  id: totrans-808
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个元组列表作为管道：
- en: '[PRE118]'
  id: totrans-809
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE118]'
- en: In this step, you create a list with three tuples. The first tuple represents
    a scaling operation that makes use of `MinMaxScaler`. The second tuple represents
    a feature engineering step and makes use of `PolynomialFeatures`. The third tuple
    represents a `LinearRegression` model.
  id: totrans-810
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此步骤中，你将创建一个包含三个元组的列表。第一个元组表示使用 `MinMaxScaler` 的缩放操作。第二个元组表示特征工程步骤，使用 `PolynomialFeatures`。第三个元组表示
    `LinearRegression` 模型。
- en: The first element of the tuple represents the name of the step, while the second
    element represents the class that performs a transformation or an estimation.
  id: totrans-811
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 元组的第一个元素表示步骤的名称，第二个元素表示执行变换或估算的类。
- en: 'Create an instance of a pipeline:'
  id: totrans-812
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个管道实例：
- en: '[PRE119]'
  id: totrans-813
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE119]'
- en: 'Train the instance of the pipeline:'
  id: totrans-814
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 训练管道实例：
- en: '[PRE120]'
  id: totrans-815
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE120]'
- en: 'The pipeline implements a `.fit()` method, which is also implemented in all
    instances of transformers and estimators. The `.fit()` method causes `.fit_transform()`
    to be called on transformers, and causes `.fit()` to be called on estimators.
    The output of this step is similar to the following:'
  id: totrans-816
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该管道实现了一个 `.fit()` 方法，该方法在所有变换器和估算器实例中也有实现。`.fit()` 方法使得在变换器上调用 `.fit_transform()`，并使得在估算器上调用
    `.fit()`。此步骤的输出类似于以下内容：
- en: '![Figure 7.65: Training the instance of a pipeline'
  id: totrans-817
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 7.65：训练管道实例'
- en: '](img/B15019_07_65.jpg)'
  id: totrans-818
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_65.jpg)'
- en: 'Figure 7.65: Training the instance of a pipeline'
  id: totrans-819
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.65：训练管道实例
- en: You can see from the output that a pipeline was trained. You can see that the
    steps are made up of `MinMaxScaler` and `PolynomialFeatures`, and that the final
    step is made up of `LinearRegression`.
  id: totrans-820
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以从输出中看到，管道已被训练。你可以看到步骤由 `MinMaxScaler` 和 `PolynomialFeatures` 组成，最后一步是 `LinearRegression`。
- en: 'Print out the `R2` score of the model:'
  id: totrans-821
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输出模型的 `R2` 分数：
- en: '[PRE121]'
  id: totrans-822
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE121]'
- en: 'The output is similar to the following:'
  id: totrans-823
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出类似于以下内容：
- en: '![Figure 7.66: R2 score'
  id: totrans-824
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 7.66：R2 分数'
- en: '](img/B15019_07_66.jpg)'
  id: totrans-825
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_66.jpg)'
- en: 'Figure 7.66: R2 score'
  id: totrans-826
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.66：R2 分数
- en: You can see from the preceding that the R2 score is `0.944`, which is better
    than the R2 score of the first model, which was `0.933`. You can start to observe
    that the metrics suggest that this model is better than the first one.
  id: totrans-827
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从前面的输出中，你可以看到 R2 分数为 `0.944`，这比第一个模型的 R2 分数 `0.933` 更好。你可以开始观察到，指标显示该模型比第一个模型更好。
- en: 'Use the model to predict on the evaluation data:'
  id: totrans-828
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用该模型对评估数据进行预测：
- en: '[PRE122]'
  id: totrans-829
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE122]'
- en: 'Print the MSE of the second model:'
  id: totrans-830
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输出第二个模型的 MSE：
- en: '[PRE123]'
  id: totrans-831
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE123]'
- en: 'The output is similar to the following:'
  id: totrans-832
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出类似于以下内容：
- en: '![Figure 7.67: The MSE of the model'
  id: totrans-833
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 7.67：模型的均方误差（MSE）'
- en: '](img/B15019_07_67.jpg)'
  id: totrans-834
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_67.jpg)'
- en: 'Figure 7.67: The MSE of the model'
  id: totrans-835
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.67：模型的均方误差（MSE）
- en: You can see from the output that the MSE of the second model is `16.272`. This
    is less than the MSE of the first model, which is `19.734`. You can safely conclude
    that the second model is better than the first.
  id: totrans-836
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以从输出中看到，第二个模型的 MSE 为 `16.272`。这低于第一个模型的 MSE `19.734`。你可以得出结论，第二个模型比第一个模型更好。
- en: 'Inspect the model coefficients (also called weights):'
  id: totrans-837
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查模型的系数（也称为权重）：
- en: '[PRE124]'
  id: totrans-838
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE124]'
- en: In this step, you will note that `lr_model_2` is a pipeline. The final object
    in this pipeline is the model, so you make use of list addressing to access this
    by setting the index of the list element to `-1`.
  id: totrans-839
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此步骤中，你会注意到 `lr_model_2` 是一个管道。该管道中的最终对象是模型，因此你可以使用列表索引方式，通过将索引设置为 `-1` 来访问它。
- en: 'Once you have the model, which is the final element in the pipeline, you make
    use of `.coef_` to get the model coefficients. The output is similar to the following:'
  id: totrans-840
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一旦你拥有模型，它就是管道中的最后一个元素，你可以使用 `.coef_` 来获取模型的系数。输出类似于以下内容：
- en: '![Figure 7.68: Printing model coefficients'
  id: totrans-841
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 7.68：打印模型系数'
- en: '](img/B15019_07_68.jpg)'
  id: totrans-842
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_68.jpg)'
- en: 'Figure 7.68: Printing model coefficients'
  id: totrans-843
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.68：打印模型系数
- en: You will note from the preceding output that the majority of the values are
    in the tens, some values are in the hundreds, and one value has a really small magnitude.
  id: totrans-844
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你会注意到，前面的输出中大部分值在十几的数量级，有些值在几百左右，且有一个值的幅度非常小。
- en: 'Check the number of coefficients in this model:'
  id: totrans-845
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查该模型的系数数量：
- en: '[PRE125]'
  id: totrans-846
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE125]'
- en: 'The output of this step is similar to the following:'
  id: totrans-847
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该步骤的输出类似于以下内容：
- en: '![Figure 7.69: Checking the number of coefficients'
  id: totrans-848
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 7.69：检查系数的数量'
- en: '](img/B15019_07_69.jpg)'
  id: totrans-849
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_69.jpg)'
- en: 'Figure 7.69: Checking the number of coefficients'
  id: totrans-850
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.69：检查系数的数量
- en: You will see from the preceding that the second model has 35 coefficients.
  id: totrans-851
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从前面的结果可以看到，第二个模型有 35 个系数。
- en: 'Create a `steps` list with `PolynomialFeatures` of degree `10`:'
  id: totrans-852
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含 10 次方的 `PolynomialFeatures` 的 `steps` 列表：
- en: '[PRE126]'
  id: totrans-853
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE126]'
- en: 'Create a third model from the preceding steps:'
  id: totrans-854
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据前面的步骤创建一个第三个模型：
- en: '[PRE127]'
  id: totrans-855
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE127]'
- en: 'Fit the third model on the training data:'
  id: totrans-856
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在训练数据上拟合第三个模型：
- en: '[PRE128]'
  id: totrans-857
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE128]'
- en: 'The output from this step is similar to the following:'
  id: totrans-858
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该步骤的输出类似于以下内容：
- en: '![Figure 7.70: Fitting lr_model_3 on the training data'
  id: totrans-859
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 7.70：在训练数据上拟合 lr_model_3'
- en: '](img/B15019_07_70.jpg)'
  id: totrans-860
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_70.jpg)'
- en: 'Figure 7.70: Fitting lr_model_3 on the training data'
  id: totrans-861
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.70：在训练数据上拟合 lr_model_3
- en: You can see from the output that the pipeline makes use of `PolynomialFeatures`
    of degree `10`. You are doing this in the hope of getting a better model.
  id: totrans-862
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从输出中可以看到，管道使用了 10 次方的 `PolynomialFeatures`。你这样做是希望能够得到一个更好的模型。
- en: 'Print out the `R2` score of this model:'
  id: totrans-863
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印出该模型的 `R2` 分数：
- en: '[PRE129]'
  id: totrans-864
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE129]'
- en: 'The output of this model is similar to the following:'
  id: totrans-865
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该模型的输出类似于以下内容：
- en: '![Figure 7.71: R2 score'
  id: totrans-866
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 7.71：R2 分数'
- en: '](img/B15019_07_71.jpg)'
  id: totrans-867
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_71.jpg)'
- en: 'Figure 7.71: R2 score'
  id: totrans-868
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.71：R2 分数
- en: You can see from the preceding figure that the `R2` score is now `0.568` The
    previous model had an `R2` score of `0.944`. This model has an `R2` score that
    is worse than the one of the previous model, `lr_model_2`. This happens when your
    model is overfitting.
  id: totrans-869
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从前面的图可以看到，`R2` 分数现在是 `0.568`，而前一个模型的 `R2` 分数为 `0.944`。这个模型的 `R2` 分数比前一个模型 `lr_model_2`
    的分数差。这种情况发生在模型发生过拟合时。
- en: 'Use `lr_model_3` to predict on evaluation data:'
  id: totrans-870
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `lr_model_3` 对评估数据进行预测：
- en: '[PRE130]'
  id: totrans-871
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE130]'
- en: 'Print out the MSE for `lr_model_3`:'
  id: totrans-872
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印出 `lr_model_3` 的均方误差：
- en: '[PRE131]'
  id: totrans-873
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE131]'
- en: 'The output of this step might be similar to the following:'
  id: totrans-874
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该步骤的输出可能类似于以下内容：
- en: '![Figure 7.72: The MSE of lr_model_3'
  id: totrans-875
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 7.72：lr_model_3 的均方误差'
- en: '](img/B15019_07_72.jpg)'
  id: totrans-876
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_72.jpg)'
- en: 'Figure 7.72: The MSE of lr_model_3'
  id: totrans-877
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.72：lr_model_3 的均方误差
- en: You can see from the preceding figure that the MSE is also worse. The MSE is
    `126.254`, as compared to `16.271` for the previous model.
  id: totrans-878
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从前面的图中可以看到，均方误差（MSE）也变得更差。MSE 为 `126.254`，而前一个模型的 MSE 为 `16.271`。
- en: 'Print out the number of coefficients (also called weights) in this model:'
  id: totrans-879
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印出该模型的系数（也叫权重）数量：
- en: '[PRE132]'
  id: totrans-880
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE132]'
- en: 'The output might resemble the following:'
  id: totrans-881
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出可能类似于以下内容：
- en: '[PRE133]'
  id: totrans-882
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE133]'
- en: You can see that the model has `1,001` coefficients.
  id: totrans-883
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以看到，模型有 `1,001` 个系数。
- en: 'Inspect the first `35` coefficients to get a sense of the individual magnitudes:'
  id: totrans-884
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查前 35 个系数，以了解单个系数的幅度：
- en: '[PRE134]'
  id: totrans-885
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE134]'
- en: 'The output might be similar to the following:'
  id: totrans-886
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出可能类似于以下内容：
- en: '![Figure 7.73: Inspecting 35 coefficients'
  id: totrans-887
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 7.73：检查 35 个系数'
- en: '](img/B15019_07_73.jpg)'
  id: totrans-888
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_73.jpg)'
- en: 'Figure 7.73: Inspecting 35 coefficients'
  id: totrans-889
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.73：检查 35 个系数
- en: You can see from the output that the coefficients have significantly larger
    magnitudes than the coefficients from `lr_model_2`.
  id: totrans-890
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从输出中可以看到，该模型的系数的幅度显著大于 `lr_model_2` 的系数。
- en: In the next steps, you will train a ridge regression model on the same set of
    features to reduce overfitting.
  id: totrans-891
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在接下来的步骤中，你将使用相同特征集训练一个岭回归模型，以减少过拟合。
- en: 'Create a list of steps for the pipeline you will create later on:'
  id: totrans-892
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个步骤列表，用于你稍后创建的管道：
- en: '[PRE135]'
  id: totrans-893
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE135]'
- en: You create a list of steps for the pipeline you will create. Note that the third
    step in this list is an instance of `Ridge`. The parameter called `alpha` in the
    call to `Ridge()` is the regularization parameter. You can play around with any
    values from 0 to 1 to see how it affects the performance of the model that you
    train.
  id: totrans-894
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你为将要创建的管道列出了步骤清单。请注意，列表中的第三步是 `Ridge` 的实例。调用 `Ridge()` 时，名为 `alpha` 的参数是正则化参数。你可以尝试从
    0 到 1 的任意值，看看它如何影响你训练的模型的性能。
- en: 'Create an instance of a pipeline:'
  id: totrans-895
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建管道的实例：
- en: '[PRE136]'
  id: totrans-896
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE136]'
- en: 'Fit the pipeline on the training data:'
  id: totrans-897
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在训练数据上拟合管道：
- en: '[PRE137]'
  id: totrans-898
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE137]'
- en: 'The output of this operation might be similar to the following:'
  id: totrans-899
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此操作的输出可能类似于以下内容：
- en: '![Figure 7.74: Fitting the pipeline on training data'
  id: totrans-900
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 7.74：在训练数据上拟合管道'
- en: '](img/B15019_07_74.jpg)'
  id: totrans-901
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_74.jpg)'
- en: 'Figure 7.74: Fitting the pipeline on training data'
  id: totrans-902
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.74：在训练数据上拟合管道
- en: You can see from the output that the pipeline trained a ridge model in the final
    step. The regularization parameter was `0`.
  id: totrans-903
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从输出中可以看到，管道在最后一步训练了一个岭回归模型。正则化参数为 `0`。
- en: 'Print the R2 score of `ridge_model`:'
  id: totrans-904
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印 `ridge_model` 的 R2 分数：
- en: '[PRE138]'
  id: totrans-905
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE138]'
- en: 'The output of this step might be similar to the following:'
  id: totrans-906
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此步骤的输出可能类似于以下内容：
- en: '![Figure 7.75: R2 score'
  id: totrans-907
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 7.75：R2 分数'
- en: '](img/B15019_07_75.jpg)'
  id: totrans-908
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_75.jpg)'
- en: 'Figure 7.75: R2 score'
  id: totrans-909
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.75：R2 分数
- en: You can see that the R2 score has climbed back up to `0.945`, which is way better
    than the score of `0.568` that `lr_model_3` had. This is already looking like
    a better model.
  id: totrans-910
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以看到，R2 分数已回升至 `0.945`，远远高于 `lr_model_3` 的 `0.568`。这已经看起来是一个更好的模型。
- en: 'Use `ridge_model` to predict on the evaluation data:'
  id: totrans-911
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `ridge_model` 对评估数据进行预测：
- en: '[PRE139]'
  id: totrans-912
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE139]'
- en: 'Print the MSE of `ridge_model`:'
  id: totrans-913
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印 `ridge_model` 的均方误差（MSE）：
- en: '[PRE140]'
  id: totrans-914
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE140]'
- en: 'The output might be similar to the following:'
  id: totrans-915
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出可能类似于以下内容：
- en: '![Figure 7.76: The MSE of ridge_model'
  id: totrans-916
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 7.76：`ridge_model` 的均方误差（MSE）'
- en: '](img/B15019_07_76.jpg)'
  id: totrans-917
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_76.jpg)'
- en: 'Figure 7.76: The MSE of ridge_model'
  id: totrans-918
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.76：`ridge_model` 的均方误差（MSE）
- en: You can see from the output that the MSE is `16.030`, which is lower than the
    MSE value of `126.254` that `lr_model_3` had. You can safely conclude that this
    is a much better model.
  id: totrans-919
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从输出中可以看到，`ridge_model` 的均方误差（MSE）为 `16.030`，低于 `lr_model_3` 的 `126.254`。可以放心地得出结论，这是一个更好的模型。
- en: 'Print out the number of coefficients in `ridge_model`:'
  id: totrans-920
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印 `ridge_model` 中的系数数量：
- en: '[PRE141]'
  id: totrans-921
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE141]'
- en: 'The output might be similar to the following:'
  id: totrans-922
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出可能类似于以下内容：
- en: '![Figure 7.77: The number of coefficients in the ridge model'
  id: totrans-923
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 7.77：岭回归模型中的系数数量'
- en: '](img/B15019_07_77.jpg)'
  id: totrans-924
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_77.jpg)'
- en: 'Figure 7.77: The number of coefficients in the ridge model'
  id: totrans-925
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.77：岭回归模型中的系数数量
- en: You can see that this model has `1001` coefficients, which is the same number
    of coefficients that `lr_model_3` had.
  id: totrans-926
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以看到，这个模型有 `1001` 个系数，和 `lr_model_3` 的系数数量相同。
- en: 'Print out the values of the first 35 coefficients:'
  id: totrans-927
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印前 35 个系数的值：
- en: '[PRE142]'
  id: totrans-928
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE142]'
- en: 'The output might be similar to the following:'
  id: totrans-929
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出可能类似于以下内容：
- en: '![Figure 7.78: The values of the first 35 coefficients'
  id: totrans-930
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 7.78：前 35 个系数的值'
- en: '](img/B15019_07_78.jpg)'
  id: totrans-931
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_78.jpg)'
- en: 'Figure 7.78: The values of the first 35 coefficients'
  id: totrans-932
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.78：前 35 个系数的值
- en: You can see from the preceding output that the coefficient values no longer
    have large magnitudes. A lot of the coefficients have a magnitude that is less
    than 10, with none we can see exceeding 100\. This goes to show that the model
    is no longer overfitting.
  id: totrans-933
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的输出可以看到，系数值不再具有较大的幅度。很多系数的幅度小于 10，且没有看到有超过 100 的系数。这表明模型不再出现过拟合。
- en: Note
  id: totrans-934
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: To access the source code for this specific section, please refer to [https://packt.live/3248PPx](https://packt.live/3248PPx).
  id: totrans-935
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此特定章节的源代码，请参考 [https://packt.live/3248PPx](https://packt.live/3248PPx)。
- en: You can also run this example online at [https://packt.live/2E4LWDu](https://packt.live/2E4LWDu).
  id: totrans-936
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以在在线运行此示例，访问 [https://packt.live/2E4LWDu](https://packt.live/2E4LWDu)。
- en: This exercise taught you how to fix overfitting by using `RidgeRegression` to
    train a new model.
  id: totrans-937
  prefs: []
  type: TYPE_NORMAL
  zh: 本练习教你如何通过使用 `RidgeRegression` 来训练新模型，以解决过拟合问题。
- en: 'Activity 7.01: Find an Optimal Model for Predicting the Critical Temperatures
    of Superconductors'
  id: totrans-938
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动 7.01：寻找预测超导体临界温度的最佳模型
- en: You work as a data scientist for a cable manufacturer. Management has decided
    to start shipping low-resistance cables to clients around the world. To ensure
    that the right cables are shipped to the right countries, they would like to predict
    the critical temperatures of various cables based on certain observed readings.
  id: totrans-939
  prefs: []
  type: TYPE_NORMAL
  zh: 你作为一名数据科学家在一家电缆制造公司工作。管理层决定开始向全球客户发货低电阻电缆。为了确保将正确的电缆发送到正确的国家，他们希望根据某些观测数据预测不同电缆的临界温度。
- en: In this activity, you will train a linear regression model and compute the R2
    score and the MSE. You will proceed to engineer new features using polynomial
    features of degree 3\. You will compare the R2 score and MSE of this new model
    to those of the first model to determine overfitting. You will then use regularization
    to train a model that generalizes to previously unseen data.
  id: totrans-940
  prefs: []
  type: TYPE_NORMAL
  zh: 在本次活动中，你将训练一个线性回归模型，并计算R2分数和MSE。接着，你将使用三次方的多项式特征工程化新特征。你将比较这个新模型的R2分数和MSE与第一个模型的结果，以确定是否存在过拟合。然后，你将使用正则化技术训练一个可以泛化到未见过的数据的模型。
- en: Note
  id: totrans-941
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'You will find the dataset required for the activity here: [https://packt.live/2tJFVqu](https://packt.live/2tJFVqu).'
  id: totrans-942
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里找到本次活动所需的数据集：[https://packt.live/2tJFVqu](https://packt.live/2tJFVqu)。
- en: 'The original dataset can be found here: [https://packt.live/3ay3aoe](https://packt.live/3ay3aoe).'
  id: totrans-943
  prefs: []
  type: TYPE_NORMAL
  zh: 原始数据集可以在这里找到：[https://packt.live/3ay3aoe](https://packt.live/3ay3aoe)。
- en: 'Citation:'
  id: totrans-944
  prefs: []
  type: TYPE_NORMAL
  zh: 引用：
- en: Hamidieh, Kam, A data-driven statistical model for predicting the critical temperature
    of a superconductor, Computational Materials Science, Volume 154, November 2018,
    pages 346-354.
  id: totrans-945
  prefs: []
  type: TYPE_NORMAL
  zh: Hamidieh, Kam, 《一种数据驱动的统计模型用于预测超导体的临界温度》，《计算材料科学》，第154卷，2018年11月，第346-354页。
- en: 'The steps to accomplish this task are:'
  id: totrans-946
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此任务的步骤如下：
- en: Open a Colab notebook.
  id: totrans-947
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个Colab笔记本。
- en: Load the necessary libraries.
  id: totrans-948
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载必要的库。
- en: Read in the data from the `superconduct` folder.
  id: totrans-949
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`superconduct`文件夹中读取数据。
- en: Prepare the `X` and `y` variables.
  id: totrans-950
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 准备`X`和`y`变量。
- en: Split the data into training and evaluation sets.
  id: totrans-951
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将数据分割为训练集和评估集。
- en: Create a baseline linear regression model.
  id: totrans-952
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个基准线性回归模型。
- en: Print out the R2 score and MSE of the model.
  id: totrans-953
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输出模型的R2分数和均方误差（MSE）。
- en: Create a pipeline to engineer polynomial features and train a linear regression model.
  id: totrans-954
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个管道，用于工程化多项式特征并训练一个线性回归模型。
- en: Print out the R2 score and MSE.
  id: totrans-955
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输出R2分数和MSE。
- en: Determine that this new model is overfitting.
  id: totrans-956
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确定该新模型出现了过拟合。
- en: Create a pipeline to engineer polynomial features and train a ridge or lasso model.
  id: totrans-957
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个管道，用于工程化多项式特征并训练一个岭回归或套索回归模型。
- en: Print out the R2 score and MSE.
  id: totrans-958
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输出R2分数和MSE。
- en: 'The output will be as follows:'
  id: totrans-959
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![Figure 7.79: The R2 score and MSE of the ridge model'
  id: totrans-960
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图7.79：岭回归模型的R2分数和MSE'
- en: '](img/B15019_07_79.jpg)'
  id: totrans-961
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_79.jpg)'
- en: 'Figure 7.79: The R2 score and MSE of the ridge model'
  id: totrans-962
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图7.79：岭回归模型的R2分数和MSE
- en: Determine that this model is no longer overfitting. This is the model to put
    into production.
  id: totrans-963
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确定该模型不再出现过拟合。这就是要投入生产的模型。
- en: 'The coefficients for the ridge model are as shown in the following figure:'
  id: totrans-964
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 岭回归模型的系数如下图所示：
- en: '![Figure 7.80: The coefficients for the ridge model'
  id: totrans-965
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图7.80：岭回归模型的系数'
- en: '](img/B15019_07_80.jpg)'
  id: totrans-966
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_07_80.jpg)'
- en: 'Figure 7.80: The coefficients for the ridge model'
  id: totrans-967
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.80：岭回归模型的系数
- en: Note
  id: totrans-968
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The solution to this activity can be found at the following address: [https://packt.live/2GbJloz](https://packt.live/2GbJloz).'
  id: totrans-969
  prefs: []
  type: TYPE_NORMAL
  zh: 本次活动的解决方案可以在以下地址找到：[https://packt.live/2GbJloz](https://packt.live/2GbJloz)。
- en: Summary
  id: totrans-970
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we studied the importance of withholding some of the available
    data to evaluate models. We also learned how to make use of all of the available
    data with a technique called cross-validation to find the best performing model
    from a set of models you are training. We also made use of evaluation metrics
    to determine when a model starts to overfit and made use of ridge and lasso regression
    to fix a model that is overfitting.
  id: totrans-971
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们研究了在评估模型时保留一些可用数据的重要性。我们还学习了如何通过交叉验证技术利用所有可用数据，从一组正在训练的模型中找到表现最佳的模型。我们还使用了评估指标来判断模型何时开始过拟合，并使用岭回归和套索回归修正了过拟合的模型。
- en: In the next chapter, we will go into hyperparameter tuning in depth. You will
    learn about various techniques for finding the best hyperparameters to train your
    models.
  id: totrans-972
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入讨论超参数调优。你将学习寻找最佳超参数以训练模型的各种技术。
