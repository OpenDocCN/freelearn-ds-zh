- en: Chapter 1. Getting Started with IPython
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章：开始使用IPython
- en: 'In this chapter, we will first go through the IPython installation process
    and give an overview of the possibilities offered by IPython. IPython brings a
    highly improved Python console and the Notebook. In addition, it is an essential
    tool for interactive computing when it is combined with third-party specialized
    packages, such as NumPy and Matplotlib. These packages bring high-performance
    computing and interactive visualization facilities to the Python universe, with
    IPython being its cornerstone. At the end of this chapter, you will have IPython
    installed and the required packages on your computer, and you will have been through
    a short, hands-on overview of the most important features of IPython that we will
    detail in the subsequent chapters, such as:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将首先介绍IPython的安装过程，并概述IPython所提供的各种功能。IPython带来了经过高度改进的Python控制台和Notebook。此外，当与第三方专业包（如NumPy和Matplotlib）结合使用时，它是进行交互式计算的一个重要工具。这些包为Python生态系统带来了高性能计算和交互式可视化功能，而IPython则是其基石。在本章结束时，您将能够在计算机上安装IPython及其所需的包，并且您将通过一个简短的实践概述，了解我们将在后续章节中详细介绍的IPython最重要的功能，具体包括：
- en: Running the IPython console
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行IPython控制台
- en: Using IPython as a system shell
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将IPython作为系统Shell使用
- en: Using the history
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用历史记录
- en: Tab completion
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Tab补全
- en: Executing a script with the `%run` command
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`%run`命令执行脚本
- en: Quick benchmarking with the `%timeit` command
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`%timeit`命令进行快速基准测试
- en: Quick debugging with the `%pdb` command
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`%pdb`命令进行快速调试
- en: Interactive computing with Pylab
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Pylab进行交互式计算
- en: Using the IPython Notebook
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用IPython Notebook
- en: Customizing IPython
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义IPython
- en: Installing IPython and the recommended packages
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装IPython及推荐的包
- en: In this section, we will see how you can install IPython and the other packages
    that we will be using in this book. For the most up-to-date information about
    the IPython installation, you should check the official website of IPython ([http://ipython.org](http://ipython.org)).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍如何安装IPython以及我们将在本书中使用的其他包。有关IPython安装的最新信息，您应查看IPython的官方网站([http://ipython.org](http://ipython.org))。
- en: Prerequisites for IPython
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IPython的先决条件
- en: First things first, what do you need to have on your computer before installing
    IPython? The good news is that IPython, and more generally all Python packages,
    can run, in principle, on most platforms (that is, Linux, Apple OS X, and Microsoft
    Windows). You also need to have a valid Python distribution installed on your
    system before installing and running IPython. The latest stable version of IPython
    at the time of writing is 0.13.1, and it officially requires Python 2.6, 2.7,
    3.1, or 3.2.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在安装IPython之前，您的计算机需要具备哪些条件？好消息是，IPython，以及更一般的所有Python包，原则上可以在大多数平台上运行（即Linux、Apple
    OS X和Microsoft Windows）。在安装和运行IPython之前，您还需要在系统上安装一个有效的Python发行版。目前撰写本书时，IPython的最新稳定版本是0.13.1，并且官方要求安装Python
    2.6、2.7、3.1或3.2版本。
- en: Tip
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Python 2.x and 3.x**'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**Python 2.x 和 3.x**'
- en: 'The 3.x branch of Python is not backward compatible with the 2.x branch, which
    explains why the 2.7 version is still maintained. Even if most external Python
    packages used in this book are compatible with Python 3.x, some packages are still
    not compatible with this branch. At this time, the choice between Python 2.x and
    Python 3.x for a new project is typically dictated by the Python 3 support of
    the required external Python packages. The setups of the targeted users is also
    an important point to consider. In this book, we will use Python 2.7 and try to
    minimize the incompatibilities with Python 3.x. This issue is beyond the scope
    of this book, and we encourage you to search for information about how to write
    code for Python 2.x that is as compatible with Python 3.x as possible. This official
    web page is a good starting point:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Python 3.x分支与Python 2.x分支不兼容，这也是为什么2.7版本仍然在维护的原因。尽管本书中使用的大多数外部Python包与Python
    3.x兼容，但仍有一些包不兼容该分支。此时，对于一个新项目来说，选择Python 2.x还是Python 3.x通常取决于所需的外部Python包对Python
    3的支持情况。目标用户的系统配置也是一个重要的考虑因素。在本书中，我们将使用Python 2.7，并尽量减少与Python 3.x的兼容性问题。此问题超出了本书的范围，我们鼓励您查找有关如何编写尽可能兼容Python
    3.x的Python 2.x代码的信息。以下官方网站页面是一个很好的起点：
- en: '[http://wiki.python.org/moin/Python2orPython3](http://wiki.python.org/moin/Python2orPython3)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://wiki.python.org/moin/Python2orPython3](http://wiki.python.org/moin/Python2orPython3)'
- en: We will use Python 2.7 in this book. The 2.6 version is no longer maintained
    and, if you choose to stick with the 2.x branch, you should only use Python 2.7
    as far as possible.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 本书将使用Python 2.7版本。2.6版本不再维护，如果您决定继续使用2.x分支，尽可能选择使用Python 2.7。
- en: We will use other Python packages in this book that are typically used with
    IPython. These packages are mainly NumPy, SciPy, and Matplotlib, but there are
    additional packages we will use in some examples. Details about how to install
    them are provided in the next section *Installing an all-in-one distribution*.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中还将使用其他与IPython一起使用的Python包。这些包主要是NumPy、SciPy和Matplotlib，但在一些示例中我们还将使用其他包。有关如何安装这些包的详细信息，请参见下一节*安装一体化分发版*。
- en: 'There are several ways of installing IPython and the recommended packages.
    From the easiest to the hardest, you can do either of the following:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种安装IPython和推荐包的方法。从最简单到最复杂，您可以选择以下任一方法：
- en: Install a standalone, all-in-one Python distribution with a large variety of
    built-in Python packages
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装一个独立的一体化Python发行版，带有各种内置Python包
- en: Install separately only the packages you need
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只安装您需要的包
- en: In the latter case, you can use binary installers or install the packages directly
    from the source code.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在后一种情况下，您可以使用二进制安装程序，或者直接从源代码安装这些包。
- en: Installing an all-in-one distribution
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装一体化分发版
- en: 'This solution is by far the easiest. You can download a single binary installer
    that comes with a full Python distribution and a lot of widely used external packages,
    including IPython. Popular distributions include:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这是目前最简单的解决方案。您可以下载一个单一的二进制安装程序，它包含完整的Python发行版和许多广泛使用的外部包，包括IPython。流行的发行版包括：
- en: 'The Enthought Python Distribution (EPD) and the new Canopy by Enthought:'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Enthought Python Distribution (EPD)和Enthought的新Canopy：
- en: '[http://www.enthought.com/](http://www.enthought.com/)'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://www.enthought.com/](http://www.enthought.com/)'
- en: 'Anaconda by Continuum Analytics:'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Anaconda，由Continuum Analytics开发：
- en: '[http://www.continuum.io/](http://www.continuum.io/)'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://www.continuum.io/](http://www.continuum.io/)'
- en: 'Python(x,y), an open source project:'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python(x,y)，一个开源项目：
- en: '[http://code.google.com/p/pythonxy/](http://code.google.com/p/pythonxy/)'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://code.google.com/p/pythonxy/](http://code.google.com/p/pythonxy/)'
- en: 'ActivePython by ActiveState:'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ActivePython，由ActiveState提供：
- en: '[http://www.activestate.com/activepython](http://www.activestate.com/activepython)'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://www.activestate.com/activepython](http://www.activestate.com/activepython)'
- en: All these distributions support Linux, OS X, and Windows, except Python(x,y)
    which only supports Windows. They all offer a free edition (and possibly a commercial
    edition) and they all contain IPython. ActivePython and EPD also ship with their
    own packaging systems; this makes it easy to install additional packages. These
    distributions contain most of the external packages we will be using in this book.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些发行版都支持Linux、OS X和Windows，除了Python(x,y)仅支持Windows。它们都提供免费版本（并可能提供商业版本），并且都包含IPython。ActivePython和EPD也附带自己的打包系统；这使得安装额外包变得容易。这些发行版包含了我们在本书中将使用的大多数外部包。
- en: Installing the packages one by one
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个一个地安装这些包
- en: Sometimes you may prefer to install only the packages you need instead of installing
    a large all-in-one package. Fortunately, this should be straightforward on most
    recent systems. Binary installers are indeed available for Windows, OS X, and
    most common Linux distributions. Otherwise, there is always the possibility to
    install the packages from the source, which is generally easier than it sounds.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，您可能更愿意只安装所需的包，而不是安装一个庞大的所有功能包。幸运的是，这在大多数最新的系统上应该是直接的。Windows、OS X和大多数常见的Linux发行版都可以使用二进制安装程序。否则，您始终可以从源代码安装这些包，通常这比看起来要容易。
- en: Packages websites
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 包网站
- en: 'Here is a list of Python packages that we will mention in this book, along
    with their respective websites where you can find the most up-to-date information:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是我们在本书中提到的Python包的列表，以及它们各自的网站，您可以在这些网站上找到最新的相关信息：
- en: 'IPython:'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IPython：
- en: '[http://ipython.org](http://ipython.org)'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://ipython.org](http://ipython.org)'
- en: 'NumPy, for high-performance and vectorized computations on multidimensional
    arrays:'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NumPy，用于多维数组的高性能和向量化计算：
- en: '[http://www.numpy.org](http://www.numpy.org)'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://www.numpy.org](http://www.numpy.org)'
- en: 'SciPy, for advanced numerical algorithms:'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SciPy，用于高级数值算法：
- en: '[http://www.scipy.org](http://www.scipy.org)'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://www.scipy.org](http://www.scipy.org)'
- en: 'Matplotlib, for plotting and interactive visualization:'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Matplotlib，用于绘图和交互式可视化：
- en: '[http://matplotlib.org](http://matplotlib.org)'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://matplotlib.org](http://matplotlib.org)'
- en: 'Matplotlib-basemap, a mapping toolbox for Matplotlib:'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Matplotlib-basemap，一个用于 Matplotlib 的地图工具箱：
- en: '[http://matplotlib.org/basemap/](http://matplotlib.org/basemap/)'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://matplotlib.org/basemap/](http://matplotlib.org/basemap/)'
- en: 'NetworkX, for handling graphs:'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NetworkX，用于处理图形：
- en: '[http://networkx.lanl.gov](http://networkx.lanl.gov)'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://networkx.lanl.gov](http://networkx.lanl.gov)'
- en: 'Pandas, for dealing with any kind of tabular data:'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pandas，用于处理各种表格数据：
- en: '[http://pandas.pydata.org](http://pandas.pydata.org)'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://pandas.pydata.org](http://pandas.pydata.org)'
- en: 'Python Imaging Library (PIL), for image-processing algorithms:'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python Imaging Library（PIL），用于图像处理算法：
- en: '[http://www.pythonware.com/products/pil](http://www.pythonware.com/products/pil)'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://www.pythonware.com/products/pil](http://www.pythonware.com/products/pil)'
- en: 'PySide, a wrapper around Qt for graphical user interfaces (GUIs):'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PySide，Qt 的图形用户界面（GUI）封装：
- en: '[http://qt-project.org/wiki/PySide](http://qt-project.org/wiki/PySide)'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://qt-project.org/wiki/PySide](http://qt-project.org/wiki/PySide)'
- en: 'PyQt, similar to PySide but with a different license:'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PyQt，类似于 PySide，但许可证不同：
- en: '[http://www.riverbankcomputing.co.uk/software/pyqt/intro](http://www.riverbankcomputing.co.uk/software/pyqt/intro)'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://www.riverbankcomputing.co.uk/software/pyqt/intro](http://www.riverbankcomputing.co.uk/software/pyqt/intro)'
- en: 'Cython, for using C code in Python:'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cython，用于在 Python 中使用 C 代码：
- en: '[http://cython.org](http://cython.org)'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://cython.org](http://cython.org)'
- en: Tip
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**PyQt or PySide?**'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**PyQt 还是 PySide？**'
- en: Qt is a cross-platform application framework widely used for software with GUI.
    It has a complex history; originally developed by Trolltech, it was then acquired
    by Nokia and now owned by Digia. Both commercial and open source licenses exist.
    PyQt is a Qt wrapper in Python developed by Riverbank Computing. The open source
    version of PyQt is GPL licensed, which prevents using it in commercial products.
    Therefore, Nokia decided to create its own LGPL-licensed package called PySide.
    It is now maintained by the Qt Project. Today, both packages coexist and have
    an extremely similar API so that it is possible to write Qt graphical applications
    in Python that support both libraries.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Qt 是一个跨平台的应用框架，广泛用于带有 GUI 的软件。它有着复杂的历史；最初由 Trolltech 开发，后来被诺基亚收购，现在由 Digia 所拥有。既有商业许可证，也有开源许可证。PyQt
    是一个由 Riverbank Computing 开发的 Qt 的 Python 封装。PyQt 的开源版本是 GPL 许可证，这限制了它在商业产品中的使用。因此，诺基亚决定创建一个自己拥有
    LGPL 许可证的包，名为 PySide。现在，由 Qt 项目进行维护。今天，两个包共存，并且它们具有极其相似的 API，因此可以用 Python 编写支持这两个库的
    Qt 图形应用程序。
- en: These websites propose to download binary installers for various systems as
    well as the source code for manual compilation and installation.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这些网站提供了各种系统的二进制安装程序下载，并且还提供了源代码供手动编译和安装。
- en: There is also an online repository of Python packages called the Python Package
    Index (PyPI) available at [http://pypi.python.org](http://pypi.python.org). It
    contains tarballs, and sometimes Windows installers, for most existing Python
    packages.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个名为 Python Package Index（PyPI）的 Python 包在线仓库，网址是 [http://pypi.python.org](http://pypi.python.org)。它包含大多数现有
    Python 包的 tarballs 和有时的 Windows 安装程序。
- en: Getting binary installers
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取二进制安装程序
- en: You may find a binary installer for your system on the official website of the
    packages you are interested in. If official binary installers are not available,
    unofficial ones may have been created by the community. We will give some advice
    here about where binary installers can be found on the different operating systems.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在你感兴趣的包的官方网站上找到适合你系统的二进制安装程序。如果没有官方的二进制安装程序，社区可能已经创建了非官方的安装程序。我们将在这里提供一些关于在不同操作系统上找到二进制安装程序的建议。
- en: Windows
  id: totrans-70
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Windows
- en: Official Windows installers may be found on the package websites or on PyPI
    for some packages. Unofficial Windows installers for hundreds of Python packages
    (including IPython and all the packages used in this book) can be found on the
    personal webpage of Christoph Gohlke at [http://www.lfd.uci.edu/~gohlke/pythonlibs/](http://www.lfd.uci.edu/~gohlke/pythonlibs/).
    These files are provided without warranty of any kind. However, they are generally
    quite stable, and this makes it extremely easy to install almost any Python package
    on Windows. There are versions of all packages for Python 2.x and 3.x and for
    32-bit and 64-bit Python distributions.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 官方 Windows 安装程序可以在相关包的官方网站或 PyPI 上找到某些包的安装程序。数百个 Python 包（包括 IPython 和本书中使用的所有包）的非官方
    Windows 安装程序可以在 Christoph Gohlke 的个人网页上找到，网址为 [http://www.lfd.uci.edu/~gohlke/pythonlibs/](http://www.lfd.uci.edu/~gohlke/pythonlibs/)。这些文件不提供任何形式的保证，但通常都非常稳定，这使得在
    Windows 上安装几乎所有 Python 包变得极为简便。所有包都有适用于 Python 2.x 和 3.x 的版本，以及适用于 32 位和 64 位
    Python 发行版的版本。
- en: OS X
  id: totrans-72
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: OS X
- en: Official OS X installers can be found on the websites of some packages, and
    unofficial installers can be found on the MacPorts project ([http://www.macports.org](http://www.macports.org))
    and Homebrew ([http://mxcl.github.com/homebrew/](http://mxcl.github.com/homebrew/)).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 官方的 OS X 安装包可以在一些软件包的官方网站上找到，非官方安装包可以在 MacPorts 项目（[http://www.macports.org](http://www.macports.org)）和
    Homebrew（[http://mxcl.github.com/homebrew/](http://mxcl.github.com/homebrew/)）中找到。
- en: Linux
  id: totrans-74
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Linux
- en: 'Most Linux distributions (including Ubuntu) ship with a packaging system that
    may contain the Python version you need along with most Python packages we will
    be using here. For example, to install IPython on Ubuntu, type the following command
    in a shell:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 Linux 发行版（包括 Ubuntu）都配备了可能包含你所需的 Python 版本和我们将在此使用的大多数 Python 软件包的打包系统。例如，要在
    Ubuntu 上安装 IPython，请在终端中输入以下命令：
- en: '[PRE0]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'On Fedora 18 and newer related distributions, type the following command:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Fedora 18 及更高版本的相关发行版中，输入以下命令：
- en: '[PRE1]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The relevant binary package names are sometimes prefixed with `python-` (for
    example, `python-numpy` or `python-matplotlib`). Also, PyQt4's package name is
    `python-qt4`, PyOpenGL's package name is `python-opengl`, PIL's package name is
    `python-imaging`, and so on.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 相关的二进制软件包名称有时会以 `python-` 为前缀（例如，`python-numpy` 或 `python-matplotlib`）。此外，PyQt4
    的软件包名称是 `python-qt4`，PyOpenGL 的软件包名称是 `python-opengl`，PIL 的软件包名称是 `python-imaging`，等等。
- en: Table of binary packages
  id: totrans-80
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 二进制软件包表
- en: 'We have shown here a table with the availability (at the time of writing) of
    binary installers for the packages we will be using in this book in the different
    Python distributions and operating systems. All these installers are available
    for Python 2.7\. In the following table, "(W)" means Windows and "CG:" means Christoph
    Gohlke''s webpage:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这里展示了一张表格，列出了在不同的 Python 发行版和操作系统中，本书将使用的各个软件包的二进制安装包的可用性（截至写作时）。所有这些安装包都可以用于
    Python 2.7。下表中，"(W)" 表示 Windows，“CG:” 表示 Christoph Gohlke 的网页：
- en: '| Package | EPD 7.3 | Anaconda 1.2.1 | Python(x,y) 2.7.3 | ActivePython 2.7.2
    | Windows installer | Ubuntu installer | OSX installer (MacPorts) |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| Package | EPD 7.3 | Anaconda 1.2.1 | Python(x,y) 2.7.3 | ActivePython 2.7.2
    | Windows 安装包 | Ubuntu 安装包 | OSX 安装包（MacPorts） |'
- en: '| --- | --- | --- | --- | --- | --- | --- | --- |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- | --- |'
- en: '| NetworkX | 1.6 | 1.7 | 1.7 | 1.6 | CG: 1.7 | 1.7 | 1.7 |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| NetworkX | 1.6 | 1.7 | 1.7 | 1.6 | CG: 1.7 | 1.7 | 1.7 |'
- en: '| Pandas | 0.9.1 | 0.9.0 | 0.9.1 | 0.7.3 | CG: 0.10.0, PyPI: 0.10.0 | 0.8.0
    | 0.10.0 |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| Pandas | 0.9.1 | 0.9.0 | 0.9.1 | 0.7.3 | CG: 0.10.0, PyPI: 0.10.0 | 0.8.0
    | 0.10.0 |'
- en: '| NumPy | 1.6.1 | 1.6.2 (W) | 1.6.2 | 1.6.2 | CG: 1.6.2, PyPI: 1.6.2 (32 bits)
    | 1.6.2 | 1.6.2 |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| NumPy | 1.6.1 | 1.6.2 (W) | 1.6.2 | 1.6.2 | CG: 1.6.2, PyPI: 1.6.2（32位） |
    1.6.2 | 1.6.2 |'
- en: '| SciPy | 0.10.1 | 0.11.0 | 0.11.0 | 0.10.1 | CG: 0.11.0 | 0.10.1 | 0.11.0
    |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| SciPy | 0.10.1 | 0.11.0 | 0.11.0 | 0.10.1 | CG: 0.11.0 | 0.10.1 | 0.11.0
    |'
- en: '| PIL | 1.1.7 | 1.1.7 | 1.1.7 | 1.1.7 | CG: 1.1.7 | 1.1.7 | N/A |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| PIL | 1.1.7 | 1.1.7 | 1.1.7 | 1.1.7 | CG: 1.1.7 | 1.1.7 | N/A |'
- en: '| Matplotlib | 1.1.0 | 1.2.0 | 1.1.1 | 1.1.0 | CG: 1.2.0 | 1.1.1 | 1.2.0 |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| Matplotlib | 1.1.0 | 1.2.0 | 1.1.1 | 1.1.0 | CG: 1.2.0 | 1.1.1 | 1.2.0 |'
- en: '| Basemap | 1.0.2 | N/A | 1.0.2 (optional) | 1.0 beta | 1.0.5 | 1.0.5 | 1.0.5
    |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| Basemap | 1.0.2 | N/A | 1.0.2（可选） | 1.0 beta | 1.0.5 | 1.0.5 | 1.0.5 |'
- en: '| PyOpenGL | 3.0.1 | N/A | 3.0.2 | 3.0.2 | CG: 3.0.2, PyPI: 3.0.2 | 3.0.1 |
    3.0.2 |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| PyOpenGL | 3.0.1 | N/A | 3.0.2 | 3.0.2 | CG: 3.0.2, PyPI: 3.0.2 | 3.0.1 |
    3.0.2 |'
- en: '| PySide | 1.1.1 | 1.1.2 | N/A (PyQt 4.9.5) | N/A (PyQt 4.8.3) | CG: 1.1.2
    | 1.1.1 | 1.1.2 |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| PySide | 1.1.1 | 1.1.2 | N/A（PyQt 4.9.5） | N/A（PyQt 4.8.3） | CG: 1.1.2 |
    1.1.1 | 1.1.2 |'
- en: '| Cython | 0.16 | 0.17.1 | 0.17.2 | 0.16 | CG: 0.17.3 | 0.16 | 0.17.3 |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| Cython | 0.16 | 0.17.1 | 0.17.2 | 0.16 | CG: 0.17.3 | 0.16 | 0.17.3 |'
- en: '| Numba | N/A | 0.3.2 | N/A | N/A | CG: 0.3.2 | N/A | N/A |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| Numba | N/A | 0.3.2 | N/A | N/A | CG: 0.3.2 | N/A | N/A |'
- en: Using the Python packaging system
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Python 打包系统
- en: When binary packages are not available, the universal way of installing a Python
    package is to install it directly from its source code. The Python packaging system
    is meant to simplify this step so as to handle dependency management, uninstallation,
    and package discovery. However, the packaging system has been chaotic for years.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 当没有可用的二进制软件包时，安装 Python 软件包的通用方式是直接从源代码安装。Python 打包系统旨在简化此步骤，以处理依赖关系管理、卸载和软件包发现。然而，打包系统多年来一直处于混乱状态。
- en: 'Distutils, the native Python packaging system, has long been criticized for
    being inefficient and bringing too many problems. Its successor Distutils2 is
    not finished at the time of writing. Setuptools is an alternative system and offers
    the `easy_install` command-line tool that allows searching (on PyPI) and installing
    new Python packages with a single command line. Installing a new package is as
    simple as typing in a shell:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Distutils，Python 的原生打包系统，一直因效率低下和带来过多问题而受到批评。其继任者 Distutils2 在写作时尚未完成。Setuptools
    是一种替代系统，提供了 `easy_install` 命令行工具，允许通过命令行搜索（在 PyPI 上）并安装新的 Python 包。安装新包就像在命令行中输入以下命令一样简单：
- en: '[PRE2]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Setuptools has also been criticized and is now being replaced by Distribute.
    The `easy_install` tool is also being replaced by pip, a more powerful tool for
    searching, installing, and uninstalling Python packages.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Setuptools 也一直受到批评，现已被 Distribute 取代。`easy_install` 工具也正在被 pip 取代，pip 是一个更强大的工具，用于搜索、安装和卸载
    Python 包。
- en: 'For now, we recommend that you use Distribute and pip. Both can be installed
    either from the source tarballs or with easy_install (which requires that you
    install Setuptools beforehand). More details about how to install these tools
    can be found on The Hitchhiker''s Guide to Packaging ([http://guide.python-distribute.org/](http://guide.python-distribute.org/)).
    To install a new package with pip, type the following command in a shell:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们建议你使用 Distribute 和 pip。两者都可以通过源代码 tarball 或使用 easy_install 安装（这需要提前安装 Setuptools）。有关如何安装这些工具的更多细节，可以参考《打包指南》([http://guide.python-distribute.org/](http://guide.python-distribute.org/))。要使用
    pip 安装新包，请在命令行中输入以下命令：
- en: '[PRE3]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Optional dependencies for IPython
  id: totrans-102
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: IPython 的可选依赖项
- en: 'IPython has several dependencies:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: IPython 有几个依赖项：
- en: '**pyreadline**: This dependency provides line-editing features'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**pyreadline**：此依赖项提供行编辑功能'
- en: '**pyzmq**: This dependency is needed for IPython''s parallel computing features,
    such as Qt console and Notebook'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**pyzmq**：此依赖项是 IPython 并行计算功能所需的，例如 Qt 控制台和 Notebook'
- en: '**pygments**: This dependency highlights syntax in the Qt console'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**pygments**：此依赖项在 Qt 控制台中高亮显示语法'
- en: '**tornado**: This dependency is required by the web-based Notebook'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**tornado**：此依赖项是 Web-based Notebook 所必需的'
- en: They are all automatically installed when you install IPython from a binary
    package, but that is not the case when you install IPython from the source code.
    On Windows, pyreadline must be installed using either a binary installer available
    on PyPI or on Christoph Gohlke's webpage, or with easy_install or pip.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 当你从二进制包安装 IPython 时，这些依赖项会自动安装，但从源代码安装 IPython 时则不会。在 Windows 上，pyreadline 必须通过
    PyPI 上提供的二进制安装程序，或 Christoph Gohlke 的网页，或者使用 easy_install 或 pip 安装。
- en: On OS X, you should also install readline with easy_install or pip.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在 OS X 上，你也应该使用 easy_install 或 pip 安装 readline。
- en: 'The other dependencies can automatically be installed with the following command:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 其他依赖项可以通过以下命令自动安装：
- en: '[PRE4]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Installing the development versions
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装开发版本
- en: 'The most experienced users may want to use the very latest development versions
    of some libraries. Details can be found on the websites of the respective libraries.
    For example, to install the development version of IPython, we can type the following
    command (the version control system Git needs to be installed):'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 最有经验的用户可能希望使用一些库的最新开发版本。详细信息可以在各自库的网站上找到。例如，要安装 IPython 的开发版本，我们可以输入以下命令（需要安装版本控制系统
    Git）：
- en: '[PRE5]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To be able to update IPython easily as it changes on the development branch
    (by using `git pull`), we can just replace the last line with the following command
    (the Distribute library needs to be installed):'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够轻松更新 IPython（通过使用 `git pull`，以便它随开发分支的变化而变化），我们只需将最后一行替换为以下命令（需要安装 Distribute
    库）：
- en: '[PRE6]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Tip
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Getting help for IPython**'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '**获取 IPython 帮助**'
- en: The official IPython documentation webpage at [http://ipython.org/documentation.html](http://ipython.org/documentation.html)
    is the place to go to get some help. It contains links to the online manual and
    to unofficial tutorials and articles created by the community. The StackOverflow
    website at [http://stackoverflow.com/questions/tagged/ipython](http://stackoverflow.com/questions/tagged/ipython)
    is also a great place to request help for IPython. Finally, anyone can subscribe
    to the IPython users' mailing list [http://mail.scipy.org/mailman/listinfo/ipython-user](http://mail.scipy.org/mailman/listinfo/ipython-user).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 官方的IPython文档网页[http://ipython.org/documentation.html](http://ipython.org/documentation.html)是获取帮助的好地方。它包含了指向在线手册、社区创建的非官方教程和文章的链接。StackOverflow网站[http://stackoverflow.com/questions/tagged/ipython](http://stackoverflow.com/questions/tagged/ipython)也是请求IPython帮助的好地方。最后，任何人都可以订阅IPython用户邮件列表[http://mail.scipy.org/mailman/listinfo/ipython-user](http://mail.scipy.org/mailman/listinfo/ipython-user)。
- en: Ten IPython essentials
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 十个IPython必备命令
- en: In this section, we will take a quick tour of IPython by introducing 10 essential
    features of this powerful tool. Although brief, this hands-on visit will cover
    a wide range of IPython functionality that will be explored in more detail in
    the next chapters.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将快速浏览IPython，介绍这个强大工具的10个必备功能。尽管时间简短，但这次实践将涵盖广泛的IPython功能，之后的章节将对其进行更详细的探讨。
- en: Running the IPython console
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行IPython控制台
- en: 'If IPython has been installed correctly, you should be able to run it from
    a system shell with the `ipython` command. You can use this prompt like a regular
    Python interpreter as shown in the following screenshot:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如果IPython已经正确安装，你应该能够通过系统Shell使用`ipython`命令运行它。你可以像使用常规的Python解释器一样使用这个提示符，如下面的截图所示：
- en: '![Running the IPython console](img/9932_01_01.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![运行IPython控制台](img/9932_01_01.jpg)'
- en: The IPython console
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: IPython控制台
- en: Tip
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Command-line shell on Windows**'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '**Windows上的命令行Shell**'
- en: If you are on Windows and using the old `cmd.exe` shell , you should be aware
    that this tool is extremely limited. You could instead use a more powerful interpreter,
    such as Microsoft PowerShell, which is integrated by default in Windows 7 and
    8\. The simple fact that most common filesystem-related commands (namely, `pwd`,
    `cd`, `ls`, `cp`, `ps`, and so on) have the same name as in Unix should be a sufficient
    reason to switch.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在Windows上使用旧版的`cmd.exe` shell，你应该知道这个工具非常有限。你可以选择使用更强大的解释器，比如微软的PowerShell，它在Windows
    7和8中默认集成。大多数常见的与文件系统相关的命令（如`pwd`、`cd`、`ls`、`cp`、`ps`等）与Unix中的命令名称相同，这一点就足以成为切换的理由。
- en: Of course, IPython offers much more than that. For example, IPython ships with
    tens of little commands that considerably improve productivity. We will see a
    lot of them in this book, starting with this section.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，IPython远不止这些。例如，IPython附带了许多小命令，可以大大提高生产力。我们将在本书中看到其中的许多命令，从这一部分开始。
- en: 'Some of these commands help you get information about any Python function or
    object. For instance, have you ever had a doubt about how to use the `super` function
    to access parent methods in a derived class? Just type `super?` (a shortcut for
    the command `%pinfo super`) and you will find all the information regarding the
    `super` function. Appending `?` or `??` to any command or variable gives you all
    the information you need about it, as shown here:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一些命令帮助你获取有关任何Python函数或对象的信息。例如，你是否曾经对如何使用`super`函数来访问派生类中的父类方法感到困惑？只需输入`super?`（这是命令`%pinfo
    super`的快捷方式），你就可以找到关于`super`函数的所有信息。将`?`或`??`附加到任何命令或变量后，你将获得关于它的所有信息，如下所示：
- en: '[PRE7]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Using IPython as a system shell
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将IPython用作系统Shell
- en: 'You can use the IPython command-line interface as an extended system shell.
    You can navigate throughout your filesystem and execute any system command. For
    instance, the standard Unix commands `pwd`, `ls`, and `cd` are available in IPython
    and work on Windows too, as shown in the following example:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将IPython命令行界面作为一个扩展的系统Shell使用。你可以浏览整个文件系统并执行任何系统命令。例如，标准的Unix命令`pwd`、`ls`和`cd`在IPython中也可以使用，并且在Windows上同样有效，如下面的示例所示：
- en: '[PRE8]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: These commands are particular magic commands that are central in the IPython
    shell. There are dozens of magic commands and we will use a lot of them throughout
    this book. You can get a list of all magic commands with the `%lsmagic` command.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令是IPython Shell中的特殊魔法命令。魔法命令有很多，我们将在本书中使用其中的许多。你可以使用`%lsmagic`命令查看所有魔法命令的列表。
- en: Tip
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Using the IPython magic commands**'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用IPython魔法命令**'
- en: Magic commands actually come with a `%` prefix, but the automagic system, enabled
    by default, allows you to conveniently omit this prefix. Using the prefix is always
    possible, particularly when the unprefixed command is shadowed by a Python variable
    with the same name. The `%automagic` command toggles the automagic system. In
    this book, we will generally use the `%` prefix to refer to magic commands, but
    keep in mind that you can omit it most of the time, if you prefer.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 魔法命令实际上以`%`为前缀，但默认启用的自动魔法系统使你可以方便地省略该前缀。使用前缀始终是可能的，特别是在没有前缀的命令被与之同名的Python变量遮盖时。`%automagic`命令切换自动魔法系统。在本书中，我们通常会使用`%`前缀来表示魔法命令，但请记住，如果你愿意，大多数时候可以省略它。
- en: Using the history
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用历史记录
- en: Like the standard Python console, IPython offers a command history. However,
    unlike in Python's console, the IPython history spans your previous interactive
    sessions. In addition to this, several key strokes and commands allow you to reduce
    repetitive typing.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 像标准的Python控制台一样，IPython提供了命令历史记录。然而，与Python控制台不同，IPython的历史记录跨越了你之前的交互式会话。此外，一些键击和命令可以帮助你减少重复输入。
- en: In an IPython console prompt, use the up and down arrow keys to go through your
    whole input history. If you start typing before pressing the arrow keys, only
    the commands that match what you have typed so far will be shown.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在IPython控制台提示符下，使用上下箭头键可以浏览整个输入历史记录。如果在按下箭头键之前开始输入，只会显示与已输入内容匹配的命令。
- en: 'In any interactive session, your input and output history is kept in the `In`
    and `Out` variables and is indexed by a prompt number. The `_`, `__`, `___` and
    `_i`, `_ii`, `_iii` variables contain the last three output and input objects,
    respectively. The `_n` and `_in` variables return the *n*th output and input history.
    For instance, let''s type the following command:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何交互式会话中，你的输入和输出历史保存在`In`和`Out`变量中，并按提示号进行索引。`_`、`__`、`___`以及`_i`、`_ii`、`_iii`变量分别包含最后三个输出和输入对象。`_n`和`_in`变量返回第*n*个输出和输入历史记录。例如，我们输入以下命令：
- en: '[PRE9]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In this example, we display the output, that is, `144` of prompt `5` on line
    `6`.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们在第6行显示了提示符`5`的输出，即`144`。
- en: Tab completion
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Tab 自动补全
- en: Tab completion is incredibly useful and you will find yourself using it all
    the time. Whenever you start typing any command, variable name, or function, press
    the *Tab* key to let IPython either automatically complete what you are typing
    if there is no ambiguity, or show you the list of possible commands or names that
    match what you have typed so far. It also works for directories and file paths,
    just like in the system shell.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: Tab 自动补全非常有用，你会发现自己一直在使用它。每当你开始输入命令、变量名或函数时，按下*Tab*键，IPython会自动完成你输入的内容（如果没有歧义），或者显示与已输入内容匹配的命令或名称列表。它也适用于目录和文件路径，就像在系统shell中一样。
- en: 'It is also particularly useful for dynamic object introspection. Type any Python
    object name followed by a point and then press the *Tab* key; IPython will show
    you the list of existing attributes and methods, as shown in the following example:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 它对动态对象反射特别有用。输入任何Python对象名称后跟一个点，然后按下*Tab*键；IPython会显示现有的属性和方法列表，如以下示例所示：
- en: '[PRE10]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In the second line, as shown in the previous code, we press the *Tab* key after
    having typed `os.path.split`. IPython then displays all the possible commands.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二行，如前面的代码所示，我们在输入完`os.path.split`后按下*Tab*键。IPython会显示所有可能的命令。
- en: Tip
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Tab Completion and Private Variables**'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '**Tab自动补全与私有变量**'
- en: Tab completion shows you all the attributes and methods of an object, except
    those that begin with an underscore (`_`). The reason is that it is a standard
    convention in Python programming to prefix private variables with an underscore.
    To force IPython to show all private attributes and methods, type `myobject._`
    before pressing the *Tab* key. Nothing is really private or hidden in Python.
    It is part of a general Python philosophy, as expressed by the famous saying,
    "We are all consenting adults here."
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: Tab 自动补全会显示对象的所有属性和方法，除了那些以下划线（`_`）开头的属性和方法。原因是，在Python编程中，使用下划线前缀表示私有变量。这是一个标准的惯例。如果你希望IPython显示所有私有属性和方法，可以在按下*Tab*键之前输入`myobject._`。在Python中，没有什么是真正私有或隐藏的。这是Python的一种哲学，正如著名的说法所表达的那样：“我们都是成年人，在这里自愿参与。”
- en: Executing a script with the %run command
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`%run`命令执行脚本
- en: Although essential, the interactive console becomes limited when running sequences
    of multiple commands. Writing multiple commands in a Python script with the `.py`
    file extension (by convention) is quite common. A Python script can be executed
    from within the IPython console with the `%run` magic command followed by the
    script filename. The script is executed in a fresh, new Python namespace unless
    the `-i` option has been used, in which case the current interactive Python namespace
    is used for the execution. In all cases, all variables defined in the script become
    available in the console at the end of script execution.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管交互式控制台很重要，但在运行多个命令时，它会显得有些局限。在Python脚本中编写多个命令并使用`.py`扩展名（按惯例）是非常常见的。可以通过`%run`魔法命令在IPython控制台内执行Python脚本，后面跟上脚本的文件名。除非使用了`-i`选项，否则脚本将在一个新的Python命名空间中执行；如果使用了该选项，则会使用当前的交互式Python命名空间进行执行。在所有情况下，脚本中定义的所有变量会在脚本执行完毕后可在控制台中使用。
- en: 'Let''s write the following Python script in a file called `script.py`:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将以下Python脚本写入一个名为`script.py`的文件中：
- en: '[PRE11]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, assuming we are in the directory where this file is located, we can execute
    it in IPython by entering the following command:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设我们已经进入了包含该文件的目录，可以通过输入以下命令在IPython中执行它：
- en: '[PRE12]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: When running the script, the standard output of the console displays any print
    statement. At the end of execution, the `x` variable defined in the script is
    then included in the interactive namespace, which is quite convenient.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行脚本时，控制台的标准输出会显示任何print语句。执行结束后，脚本中定义的`x`变量将被包含在交互式命名空间中，这非常方便。
- en: Quick benchmarking with the %timeit command
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用%timeit命令进行快速基准测试
- en: 'You can do quick benchmarks in an interactive session with the `%timeit` magic
    command. It lets you estimate how much time the execution of a single command
    takes. The same command is executed multiple times within a loop, and this loop
    itself is repeated several times by default. The individual execution time of
    the command is then automatically estimated with an average. The `-n` option controls
    the number of executions in a loop, whereas the `-r` option controls the number
    of executed loops. For example, let''s type the following command:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在交互式会话中使用`%timeit`魔法命令进行快速基准测试。它可以估算单个命令执行所需的时间。该命令会在循环中多次执行，且该循环本身默认会重复多次。然后，命令的单次执行时间会通过平均值自动估算。`-n`选项控制循环中执行的次数，`-r`选项控制循环执行的次数。例如，输入以下命令：
- en: '[PRE13]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Here, it took about 26 milliseconds to compute the squares of all integers up
    to `100000`.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，计算从`1`到`100000`的所有整数的平方大约用了26毫秒。
- en: Quick debugging with the %debug command
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用%debug命令进行快速调试
- en: IPython ships with a powerful command-line debugger. Whenever an exception is
    raised in the console, use the `%debug` magic command to launch the debugger at
    the exception point. You then have access to all the local variables and to the
    full stack traceback in postmortem mode. Navigate up and down through the stack
    with the `u` and `d` commands and exit the debugger with the `q` command. See
    the list of all the available commands in the debugger by entering the `?` command.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: IPython自带了一个强大的命令行调试器。每当控制台中抛出异常时，可以使用`%debug`魔法命令在异常点启动调试器。然后，你可以访问所有局部变量并查看完整的栈追踪信息，在事后调试模式下进行分析。通过`u`和`d`命令可以在栈中向上和向下导航，使用`q`命令退出调试器。通过输入`?`命令查看调试器中所有可用命令的列表。
- en: You can use the `%pdb` magic command to activate the automatic execution of
    the IPython debugger as soon as an exception is raised.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`%pdb`魔法命令来激活IPython调试器的自动执行，一旦抛出异常，调试器就会启动。
- en: Interactive computing with Pylab
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Pylab进行交互式计算
- en: 'The `%pylab` magic command enables the scientific computing capabilities of
    the NumPy and matplotlib packages, namely efficient operations on vectors and
    matrices and plotting and interactive visualization features. It becomes possible
    to perform interactive computations in the console and plot graphs dynamically.
    For example, let''s enter the following command:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`%pylab`魔法命令启用了NumPy和matplotlib包的科学计算功能，即对向量和矩阵的高效操作、绘图和交互式可视化功能。通过它，可以在控制台中执行交互式计算并动态绘制图形。例如，输入以下命令：'
- en: '[PRE14]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In this example, we first define a vector of `1000` values linearly spaced between
    `-10` and `10`. Then we plot the graph `(x, sin(x))`. A window with a plot appears
    as shown in the following screenshot, and the console is not blocked while this
    window is opened. This allows us to interactively modify the plot while it is
    open.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们首先定义一个包含`1000`个值的向量，这些值在`-10`和`10`之间线性分布。然后我们绘制图形`(x, sin(x))`。一个带有图形的窗口会出现，如下截图所示，而控制台在该窗口打开时不会被阻塞。这使得我们能够在窗口打开时交互式地修改图形。
- en: '![Interactive computing with Pylab](img/9932_01_02.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![与Pylab的交互式计算](img/9932_01_02.jpg)'
- en: A Matplotlib figure
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 一个Matplotlib图形
- en: Using the IPython Notebook
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用IPython Notebook
- en: The Notebook brings the functionality of IPython into the browser for multiline
    text-editing features, interactive session reproducibility, and so on. It is a
    modern and powerful way of using Python in an interactive and reproducible way.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: Notebook将IPython的功能带入浏览器，提供多行文本编辑功能、交互式会话的可重复性等。这是一种使用Python进行交互式和可重复性操作的现代且强大的方式。
- en: To use the Notebook, call the `ipython notebook` command in a shell (make sure
    you have installed the required dependencies described in the Installation section).
    This will launch a local web server on the default port 8888\. Go to `http://127.0.0.1:8888/`
    in a browser and create a new Notebook.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Notebook，请在终端中调用`ipython notebook`命令（确保已安装安装部分中描述的所需依赖项）。这将启动一个本地Web服务器，默认端口为8888。然后在浏览器中访问`http://127.0.0.1:8888/`并创建一个新的Notebook。
- en: 'You can write one or several lines of code in the input cells. Here are some
    of the most useful keyboard shortcuts:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在输入单元格中编写一行或多行代码。以下是一些最有用的键盘快捷键：
- en: Press the *Enter* key to create a new line in the cell and not execute the cell
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按*Enter*键在单元格中创建新的一行，而不执行单元格
- en: Press *Shift* + *Enter* to execute the cell and go to the next cell
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按*Shift* + *Enter*执行单元格并跳转到下一个单元格
- en: Press *Alt* + *Enter* to execute the cell and append a new empty cell right
    after it
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按下*Alt* + *Enter*执行单元格，并在其后添加一个新的空单元格
- en: Press *Ctrl* + *Enter* for quick instant experiments when you do not want to
    save the output
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按*Ctrl* + *Enter*，快速进行实验而不保存输出
- en: Press *Ctrl* + *M* and then the *H* key to display the list of all the keyboard
    shortcuts
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按*Ctrl* + *M*，然后按*H*键显示所有键盘快捷键的列表
- en: We will explore the features of the Notebook more thoroughly in the next chapter.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一章中更详细地探讨Notebook的功能。
- en: Customizing IPython
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义IPython
- en: You can save your user preferences in a Python file; this file is called an
    IPython profile. To create a default profile, type `ipython profile create` in
    a shell. This will create a folder named `profile_default` in the `~/.ipython`
    or `~/.config/ipython` directory. The file `ipython_config.py` in this folder
    contains preferences about IPython. You can create different profiles with different
    names using `ipython profile create profilename`, and then launch IPython with
    `ipython --profile=profilename` to use that profile.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将用户偏好设置保存在一个Python文件中；该文件称为IPython配置文件。要创建默认配置文件，在终端中输入`ipython profile create`。这将创建一个名为`profile_default`的文件夹，位于`~/.ipython`或`~/.config/ipython`目录下。该文件夹中的`ipython_config.py`文件包含有关IPython的偏好设置。你可以使用`ipython
    profile create profilename`创建具有不同名称的配置文件，然后通过`ipython --profile=profilename`启动IPython并使用该配置文件。
- en: The `~` directory is your home directory, for example, something like `/home/yourname`
    on Unix, or `C:\Users\yourname` or `C:\Documents and Settings\yourname` on Windows.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '`~`目录是你的主目录，例如，在Unix系统中是类似`/home/yourname`的路径，在Windows系统中是`C:\Users\yourname`或`C:\Documents
    and Settings\yourname`。'
- en: Summary
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have detailed the various ways with which you can install
    IPython and the recommended external Python packages. The most straightforward
    way is to install a standalone Python distribution with all packages built in,
    such as Enthought Python Distribution or Canopy, Anaconda, Python(x,y), or ActivePython,
    among others. The other solution is to install the different packages manually,
    either with binary installers available for most recent platforms, or by using
    the Python packaging system, which should be straightforward in most cases.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们详细介绍了安装IPython的各种方式以及推荐的外部Python包。最直接的方式是安装一个独立的Python发行版，内置所有包，例如Enthought
    Python Distribution、Canopy、Anaconda、Python(x,y)或ActivePython等。另一种解决方案是手动安装不同的包，可以通过适用于大多数最新平台的二进制安装程序，或者使用Python的打包系统，在大多数情况下应当非常简单。
- en: We have also gone through 10 of the most interesting features offered by IPython.
    They essentially concern the Python and shell interactive features, including
    the integrated debugger and profiler, and the interactive computing and visualization
    features brought by the NumPy and Matplotlib packages. In the following chapter,
    we will detail the interactive shell and Python console as well as the Notebook.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还介绍了 IPython 提供的 10 个最有趣的功能。这些功能主要涉及 Python 和 shell 的交互特性，包括集成的调试器和分析器，以及
    NumPy 和 Matplotlib 包所带来的交互式计算和可视化功能。在接下来的章节中，我们将详细介绍交互式 shell 和 Python 控制台以及 Notebook。
