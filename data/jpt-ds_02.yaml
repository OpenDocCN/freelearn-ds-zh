- en: Working with Analytical Data on Jupyter
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Jupyter 上处理分析数据
- en: 'Jupyter does none of the heavy lifting for analyzing data: all the work is
    done by programs written in a selected language. Jupyter provides the framework
    to run a variety of programming language modules. So, we have a choice how we
    analyze data in Jupyter.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Jupyter 并不做分析数据的繁重工作：所有工作都是由用所选编程语言编写的程序完成的。Jupyter 提供了一个框架，可以运行多种编程语言模块。因此，我们可以选择如何在
    Jupyter 中分析数据。
- en: A popular choice for data analysis programming is Python. Jupyter does have
    complete support for Python programming. We will look at a variety of programming
    solutions that might tax such a support system and see how Jupyter fairs.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Python 是数据分析编程的流行选择。Jupyter 完全支持 Python 编程。我们将查看一些可能对这种支持系统造成压力的编程解决方案，并看看 Jupyter
    如何应对。
- en: Data scraping with a Python notebook
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Python 笔记本进行数据抓取
- en: A common tool for data analysis is gathering the data from a public source such
    as a website. Python is adept at scraping websites for data. Here, we look at
    an example that loads stock price information from Google Finance data.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 数据分析的常用工具是从公共源（如网站）收集数据。Python 擅长从网站抓取数据。在这里，我们看一个示例，加载来自 Google 财经的数据的股票价格信息。
- en: In particular, given a stock symbol, we want to retrieve the last year of price
    ranges for that symbol.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 特别地，给定一个股票符号，我们想要获取该符号的过去一年的价格范围。
- en: 'One of the pages on the Google Finance site will give the last years'' worth
    of price data for a security company. For example, if we were interested in the
    price points for **Advanced Micro Devices** (**AMD**), we would enter the following
    URL:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Google 财经网站上的一页将提供一只证券公司的过去一年的价格数据。例如，如果我们对 **超威半导体**（**AMD**）的价格点感兴趣，我们将输入以下
    URL：
- en: '[https://www.google.com/finance/historical?q=NASDAQ:AMD](https://www.google.com/finance/historical?q=NASDAQ:AMD)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.google.com/finance/historical?q=NASDAQ:AMD](https://www.google.com/finance/historical?q=NASDAQ:AMD)'
- en: Here, `NASDAQ` is the stock exchange that carries the AMD security. On the resultant
    Google page, there is a table of data points of interest, as seen in the following
    partial screenshot.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`NASDAQ` 是承载 AMD 股票的证券交易所。在生成的 Google 页面上，有一个包含感兴趣数据点的表格，如下图所示的部分截图所示。
- en: Like many sites that you will be attempting to access, there is a lot of other
    information on the page as well, like headers and footers and ads, as you can
    see in the following screenshot. The web pages are built for human readers. Fortunately,
    Google and these other companies realize you are scraping their data and keep
    the data in the same format, so you will not have to change scripts.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 就像你将尝试访问的许多网站一样，页面上还有很多其他信息，比如头部、尾部和广告，正如你在以下截图中看到的那样。网页是为人类读者构建的。幸运的是，Google
    和其他公司意识到你在抓取他们的数据，并且会保持数据的相同格式，这样你就不必修改脚本。
- en: '![](img/e182ed98-6941-4bd4-a5f8-a0e0e9b8d940.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e182ed98-6941-4bd4-a5f8-a0e0e9b8d940.png)'
- en: Be forewarned that you may be blocked from access to a page or an entire site
    if you were to access the site too frequently. Frequency is a matter for discussion
    with the particular site you are accessing. Again, the sites know that you are
    scraping and are okay with that occurring as long as it doesn't interfere with
    their normal human web traffic.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 提前警告你，如果你过于频繁地访问某个页面或整个网站，可能会被阻止访问。访问频率是你访问的特定网站需要讨论的问题。再次强调，这些网站知道你在抓取数据，并且只要不干扰正常的人工网络流量，他们是可以接受的。
- en: There is a clear table on that web page. If we look at the underlying HTML used
    to generate the web page, we find a lot of header, footer, and sidebar information
    but, more importantly, we find an HTML `div` tag with the id `price_data`. Within
    that `div` tag, we see an HTML table where each row has the value of `date`, `opening
    price`, `high`, `low`, `close`, and `volume` for that data as seen on screen.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在该网页上有一个清晰的表格。如果我们查看生成网页所用的底层 HTML，我们会发现有很多头部、尾部和侧边栏的信息，但更重要的是，我们会发现一个 id 为
    `price_data` 的 HTML `div` 标签。在这个 `div` 标签中，我们看到一个 HTML 表格，每一行包含该数据的 `date`、`opening
    price`、`high`、`low`、`close` 和 `volume` 的值，正如屏幕上所看到的那样。
- en: We can use a standard Python library package, `lxml`, to load and parse the
    web page text into constituent HTML Python components that we can work with.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用一个标准的 Python 库包，`lxml`，将网页文本加载并解析为 HTML Python 组件，以便我们进行操作。
- en: Then, for each day of data, we pull out the columns information and add it to
    our data list.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，对于每一天的数据，我们提取出列信息，并将其添加到我们的数据列表中。
- en: Typically, you might run this script once a day and store the newest day's information
    in your local database for further analysis. In our case, we are just printing
    out the last day's values on screen.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，你可能每天运行此脚本一次，并将最新一天的信息存储到本地数据库中以供进一步分析。在我们的案例中，我们只是将最后一天的值打印在屏幕上。
- en: 'The Python script used is as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 使用的Python脚本如下：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Running this script in a Jupyter console, we see results as in the following
    partial screenshot:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在Jupyter控制台运行此脚本，我们看到如下部分截图中的结果：
- en: '![](img/99fd09bc-4410-420c-9fbb-3fa54d6a5061.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/99fd09bc-4410-420c-9fbb-3fa54d6a5061.png)'
- en: Using heavy-duty data processing functions in Jupyter
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Jupyter中使用重型数据处理函数
- en: Python has several groups of processing functions that can tax computer system
    power. Let us use some of these in Jupyter and determine if the functionality
    performs as expected.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Python有多个处理函数组，可能会占用计算机系统的计算资源。让我们在Jupyter中使用其中的一些，来检查其功能是否按预期执行。
- en: Using NumPy functions in Jupyter
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Jupyter中使用NumPy函数
- en: NumPy is a package in Python providing multidimensional arrays and routines
    for array processing. We bring in the NumPy package using `import * from numpy`
    statement. In particular, the NumPy package defines the `array` keyword, referencing
    a NumPy object with extensive functionality.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy是Python中的一个包，提供多维数组和数组处理的常用函数。我们通过`import * from numpy`语句引入NumPy包。特别是，NumPy包定义了`array`关键字，表示一个具有广泛功能的NumPy对象。
- en: The NumPy array processing functions run from the mundane, such as `min()` and
    `max()` functions (which provide the minimum and maximum values over the array
    dimensions provided), to more interesting utility functions for producing histograms
    and calculating correlations using the elements of a data frame.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy数组处理函数从基础的`min()`和`max()`函数（它们提供给定数组维度上的最小值和最大值）到更有趣的实用函数，用于生成直方图和计算数据框元素之间的相关性。
- en: 'With NumPy, you can manipulate arrays in many ways. For example, we will go
    over some of these functions with the following scripts, where we will use NumPy
    to:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 使用NumPy，你可以以多种方式操作数组。例如，我们将通过以下脚本介绍其中一些函数，使用NumPy来：
- en: Create an array
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个数组
- en: Calculate the max value in the array
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算数组中的最大值
- en: Calculate the min value in the array
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算数组中的最小值
- en: Determine the sum across the second axis
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定第二个轴的总和
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If we transfer this script into a Python notebook, we see a display like the
    following when we execute the cell:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将此脚本转移到Python笔记本中，当执行单元格时，我们会看到如下显示：
- en: '![](img/ec44e745-7bc8-4ad1-857f-9a797fc90400.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ec44e745-7bc8-4ad1-857f-9a797fc90400.png)'
- en: 'We can use the use the following script to work over arrays with the more interesting
    `histogram` and `correlate` functions:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下脚本，通过更有趣的`histogram`和`correlate`函数来处理数组：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In this script, we are:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个脚本中，我们正在：
- en: Populating a two-column array with random numbers
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用随机数填充一个两列的数组
- en: Producing a histogram of the values from both columns within 100 point ranges
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在100个点的范围内生成两个列的直方图
- en: And, finally, determining the correlation between the two columns (which should
    be a very high correlation)
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，确定两个列之间的相关性（这应该是非常高的相关性）
- en: 'After entering this script into a Jupyter Notebook and executing the cell,
    we have an output as follows. It makes sense that the buckets are very close in
    size:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 将此脚本输入到Jupyter Notebook并执行单元格后，我们得到如下输出。可以理解的是，这些桶的大小非常接近：
- en: '![](img/0f075102-b8aa-4769-84f1-785978d00395.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0f075102-b8aa-4769-84f1-785978d00395.png)'
- en: Using pandas in Jupyter
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Jupyter中使用pandas
- en: 'pandas is an open source library of high-performance data analysis tools available
    in Python. Of particular interest are the functions to:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: pandas是一个开源的高性能数据分析工具库，在Python中可用。特别感兴趣的是以下功能：
- en: Read text files
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取文本文件
- en: Read Excel files
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取Excel文件
- en: Read from SQL database
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从SQL数据库读取
- en: Operate on data frames
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作数据框
- en: Use pandas to read text files in Jupyter
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用pandas在Jupyter中读取文本文件
- en: The most common type of text file that will have analysis data is a CSV file.
    There are a large variety of datasets available on the internet in this format.
    We will look at the Titanic survivor data found at [https://vincentarelbundock.github.io/Rdatasets/csv/datasets/Titanic.csv](https://vincentarelbundock.github.io/Rdatasets/csv/datasets/Titanic.csv).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的包含分析数据的文本文件类型是CSV文件。互联网上有许多以此格式提供的数据集。我们将查看在[https://vincentarelbundock.github.io/Rdatasets/csv/datasets/Titanic.csv](https://vincentarelbundock.github.io/Rdatasets/csv/datasets/Titanic.csv)中找到的泰坦尼克号生还者数据。
- en: 'Like most of the pandas, the function call is very easy to use:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 与大多数pandas函数一样，函数调用非常简单：
- en: '[PRE3]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'However, again like many pandas, there is an extensive set of optional parameters
    that could be passed into the `read_csv` function, that are defaulted to the most
    commonly used features so we can write small code like used previously to get
    our work done. Some of the additional parameters we could use allow us to:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，和许多pandas函数一样，`read_csv`函数有一组广泛的可选参数，可以传入，默认值是最常用的功能，这样我们就可以像之前一样写出简短的代码来完成工作。我们可以使用的一些附加参数允许我们：
- en: Skip rows
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跳过行
- en: Skip/define column headings
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跳过/定义列标题
- en: And change index field(s) (Python always wants to keep a main indexing field
    within a data frame to speed access)
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并且可以更改索引字段（Python总是希望在数据框中保持一个主要索引字段，以加快访问速度）
- en: 'The resultant script execution under Jupyter is shown in the following screenshot.
    (Note, I am only printing the first and last 30 rows of the table using the `head`
    function):'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在Jupyter中执行的脚本结果显示如下（注意，我只使用`head`函数打印表格的前后30行）：
- en: '![](img/1207b94f-8cab-48e3-b966-6f5aa8939dc6.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1207b94f-8cab-48e3-b966-6f5aa8939dc6.png)'
- en: Use pandas to read Excel files in Jupyter
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Jupyter中使用pandas读取Excel文件
- en: 'Similarly, we can load Microsoft Excel files just as easily. For example, the
    Excel file for the same Titanic dataset is available at `vandebilt.edu` (full
    link in following script). We have the following script:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们也可以轻松加载Microsoft Excel文件。例如，关于同一泰坦尼克号数据集的Excel文件可以在`vandebilt.edu`找到（完整链接在以下脚本中）。我们有以下脚本：
- en: '[PRE4]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'There is also an extensive set of optional parameters for reading Excel files
    as well, for example:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 读取Excel文件时也有一组广泛的可选参数，例如：
- en: Select the sheet within the excel file to read
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择Excel文件中的工作表进行读取
- en: Skip rows
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跳过行
- en: Specify the handling of NA values
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指定NA值的处理方式
- en: The resultant flow under Jupyter is as follows. The dataset looks very similar
    to the prior CSV file read in.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在Jupyter中显示的结果流程如下。数据集与之前读取的CSV文件非常相似。
- en: '![](img/784da942-bd77-4059-97a0-f2a5fb3ed3b1.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/784da942-bd77-4059-97a0-f2a5fb3ed3b1.png)'
- en: Using pandas to work with data frames
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用pandas操作数据框
- en: 'Once we have a data frame available, there are several pandas available to
    further process the data. We will look at pandas to:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了数据框，就有几个pandas方法可以进一步处理数据。我们将使用pandas来：
- en: '`groupby` function'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`groupby`函数'
- en: Manipulate the columns
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作列
- en: Calculate outliers
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算异常值
- en: Using the groupby function in a data frame
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在数据框中使用groupby函数
- en: The `groupby` function can be used to group (and count) the number of records
    in a data frame that meet your criteria.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`groupby`函数可以用来根据您的标准对数据框中的记录进行分组（并计数）。'
- en: Continuing with our Titanic dataset, we can use `groupby` to count the number
    of people by age.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 继续使用我们的泰坦尼克号数据集，我们可以使用`groupby`按年龄计数乘客数量。
- en: 'We can use the following script:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下脚本：
- en: '[PRE5]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The resultant display under Jupyter is as follows. I had not realized there
    were so many babies on board.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在Jupyter中显示的结果如下。我没意识到船上有这么多婴儿。
- en: '![](img/ee2eacb5-02ba-4c5a-b30e-3a63167043fa.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ee2eacb5-02ba-4c5a-b30e-3a63167043fa.png)'
- en: Manipulating columns in a data frame
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作数据框中的列
- en: An interesting column manipulation is to sort. We can sort the prior age count
    data to determine the most common ages for travelers on the boat using the `sort_values`
    function.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 一个有趣的列操作是排序。我们可以使用`sort_values`函数对先前的年龄计数数据进行排序，以确定船上旅客的最常见年龄。
- en: 'The script is as follows:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本如下：
- en: '[PRE6]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The resultant Jupyter display is as follows. From the data, there were many
    younger travelers on board. In light of this, it makes more sense why there were
    so many babies as well.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在Jupyter中的结果显示如下。从数据来看，船上有很多年轻的旅客。考虑到这一点，也就能理解为什么船上有这么多婴儿。
- en: '![](img/3d0961a3-ca9c-4f1e-99a9-a17d339f55e0.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3d0961a3-ca9c-4f1e-99a9-a17d339f55e0.png)'
- en: Calculating outliers in a data frame
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在数据框中计算异常值
- en: We can calculate outliers using standard calculations as to whether the absolute
    value of the difference from the mean value is greater than 1.96 times the standard
    deviation. (This assumes a normal Gaussian distribution of the data).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用标准计算来计算异常值，即判断与均值的差的绝对值是否大于1.96倍的标准差。（这假设数据服从正态高斯分布）。
- en: For example, using the same Titanic dataset loaded previously, we can determine
    which passengers were outliers based on age.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，使用之前加载的泰坦尼克号数据集，我们可以根据年龄确定哪些乘客是异常值。
- en: 'The Python script is as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Python脚本如下：
- en: '[PRE7]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'And under Jupyter the results show as:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在Jupyter下，结果显示如下：
- en: '[PRE8]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: So, given there were about 1,300 passengers, we have about 5% outliers, which
    means that there may be a normal distribution of the ages.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 因为大约有 1300 名乘客，所以我们有大约 5% 的异常值，这意味着年龄可能符合正态分布。
- en: Using SciPy in Jupyter
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Jupyter 中使用 SciPy
- en: 'SciPy is an open source library for mathematics, science and, engineering.
    With such a wide scope, there are many areas we can explore using SciPy:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: SciPy 是一个开源库，适用于数学、科学和工程领域。由于其广泛的应用范围，我们可以使用 SciPy 探索许多领域：
- en: Integration
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 积分
- en: Optimization
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优化
- en: Interpolation
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插值法
- en: Fourier transforms
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 傅里叶变换
- en: Linear algebra
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 线性代数
- en: There are several other intense sets of functionality as well, such as signal
    processing
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还有一些其他强大的功能集，比如信号处理
- en: Using SciPy integration in Jupyter
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Jupyter 中使用 SciPy 积分
- en: 'A standard mathematical process is integrating an equation. SciPy accomplishes
    this using a callback function to iteratively calculate out the integration of
    your function. For example, suppose that we wanted to determine the integral of
    the following equation:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 一个标准的数学过程是对方程进行积分。SciPy 通过回调函数来逐步计算出函数的积分。例如，假设我们想要计算以下方程的积分：
- en: '![](img/aadc0eca-28f9-4f32-978f-4a7ca3b28e47.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aadc0eca-28f9-4f32-978f-4a7ca3b28e47.jpg)'
- en: We would use a script like the following. We are using the definition of *pi*
    from the standard `math` package.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用如下脚本。我们使用标准 `math` 包中的 *pi* 定义。
- en: '[PRE9]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Again, this coding is very clean and simple, yet almost impossible to do in
    many languages. Running this script in Jupyter we see the results quickly:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，这段代码非常简洁，虽然几乎无法在许多语言中实现。在 Jupyter 中运行此脚本时，我们很快就能看到结果：
- en: '![](img/1c39a9d5-6658-40b1-b999-675acc1602c6.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1c39a9d5-6658-40b1-b999-675acc1602c6.png)'
- en: 'I was curious how the `integrand` function is used during the execution. I
    am using this to exercise a call back function. To see this work, I added some
    debugging information to the script where we count how many iterations occur and
    what display the values called each time:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我很好奇在执行过程中 `integrand` 函数是如何使用的。我正在利用它来演练回调函数。为了观察其效果，我在脚本中添加了一些调试信息，统计每次调用时发生了多少次迭代，并显示每次调用的值：
- en: '[PRE10]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We are using a counter at the global level, hence when referencing inside the
    `integrand` function we use the `global` keyword. Otherwise, Python assumes it
    is a local variable to the function.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在全局范围内使用了一个计数器，因此在 `integrand` 函数内引用时需要使用 `global` 关键字。否则，Python 会假设它是该函数的局部变量。
- en: 'The results are as follows:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![](img/8b47fd44-b89b-45d9-bd3c-7e8fc7bcce26.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8b47fd44-b89b-45d9-bd3c-7e8fc7bcce26.png)'
- en: The function was called 21 times to narrow down the solution.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数被调用了 21 次以缩小解决方案范围。
- en: Using SciPy optimization in Jupyter
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Jupyter 中使用 SciPy 优化
- en: 'With optimization, we are looking to determine a maximum or minimum value of
    a function over several variables. So, let''s use an equation with an interesting
    curve in it:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 通过优化法，我们试图确定在多个变量下函数的最大值或最小值。比如，让我们使用一个包含有趣曲线的方程：
- en: '![](img/4c9e403b-e373-4669-bc1a-210fe5388368.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4c9e403b-e373-4669-bc1a-210fe5388368.jpg)'
- en: If we take that curve and plot it to see if there is an apparent minimum value,
    we can use a script like the following that generates a plot as the result. (The
    `%mathplotlib inline` makes the plot appear inline of the Jupyter session, rather
    than creating the plot in a new window.)
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们绘制该曲线并查看是否存在明显的最小值，可以使用以下脚本生成结果图表。（`%mathplotlib inline` 使得图表在 Jupyter 会话内显示，而不是在新窗口中创建图表。）
- en: '[PRE11]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Running this script in Jupyter, we see there is a natural minimum at *x = 0*.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Jupyter 中运行这个脚本时，我们看到在 *x = 0* 处有一个自然最小值。
- en: '![](img/0577e502-0d66-4039-8009-30049bede251.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0577e502-0d66-4039-8009-30049bede251.png)'
- en: Using SciPy interpolation in Jupyter
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Jupyter 中使用 SciPy 插值法
- en: 'With interpolation, we are taking a guess at a value for a function given a
    set of discrete points. For example, suppose that your test results showed something
    like this:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 通过插值法，我们根据一组离散点对函数的值进行猜测。例如，假设你的测试结果显示了如下内容：
- en: '[PRE12]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![](img/4a9e616f-54a9-473d-bb9b-3c28b62ab5d9.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4a9e616f-54a9-473d-bb9b-3c28b62ab5d9.png)'
- en: 'In this case, we could interpolate the result of the function when *x* is `4`
    using a script like this:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们可以使用如下脚本，插值求解当 *x* 为 `4` 时的函数值：
- en: '[PRE13]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This gives us the result of `0.375`, which sounds correct.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这给出了结果 `0.375`，看起来是正确的。
- en: '![](img/de8525db-3992-48ed-a8dd-9dc2fa806e57.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/de8525db-3992-48ed-a8dd-9dc2fa806e57.png)'
- en: Using SciPy Fourier Transforms in Jupyter
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Jupyter 中使用 SciPy 傅里叶变换
- en: There is a set of functions for **FFT** (**Fourier Transforms**) in SciPy. They
    are easy to use, given the amount of processing that needs to take place.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: SciPy 中有一组 **FFT**（**傅里叶变换**）函数。考虑到需要进行的处理量，它们非常易于使用。
- en: 'We can perform a FFT using coding as follows:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下代码执行快速傅里叶变换（FFT）：
- en: '[PRE14]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Here, we have a small dataset to analyze. The data points represent a small
    signal set we have to evaluate. When taken under Jupyter, we get a display as
    the following:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们有一个小数据集进行分析。这些数据点代表我们需要评估的小信号集。当在 Jupyter 中处理时，我们得到以下显示：
- en: '![](img/7ab8711b-d747-421a-a21b-d25bdb9a252f.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7ab8711b-d747-421a-a21b-d25bdb9a252f.png)'
- en: Note that even for this small set of data, the transform operation was busy
    for several seconds.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，即使是这个小数据集，变换操作也持续了几秒钟。
- en: 'We could also use a generated dataset as in this coding:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用生成的数据集，如下面的代码所示：
- en: '[PRE15]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Running this script under Jupyter generates this graphic of the data points
    in a new screen:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Jupyter 中运行这个脚本会生成一个数据点的图形，并显示在新的屏幕上：
- en: '![](img/c13afe26-ec8e-41d7-a8d9-5a22c5865b81.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c13afe26-ec8e-41d7-a8d9-5a22c5865b81.png)'
- en: This looks along the lines of what we expected, with a big and small wave in
    the display.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这与我们预期的结果相符，显示中有一个大波动和一个小波动。
- en: Using SciPy linear algebra in Jupyter
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Jupyter 中使用 SciPy 线性代数
- en: 'There is a complete set of linear algebra functions available. For example,
    we can solve a linear system with steps such as the following:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 有一整套线性代数函数可用。例如，我们可以通过以下步骤求解线性系统：
- en: '[PRE16]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Here, the output under Jupyter looks like the following:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Jupyter 中，输出如下所示：
- en: '![](img/26926c8e-fedc-4bfa-96ba-22eca3a35238.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](img/26926c8e-fedc-4bfa-96ba-22eca3a35238.png)'
- en: We validate the results with the final 0 matrix.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过最终的零矩阵来验证结果。
- en: Expanding on panda data frames in Jupyter
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展 Jupyter 中的 pandas 数据框
- en: There are more functions built-in for working with data frames than we have
    used so far. If we were to take one of the data frames from a prior example in
    this chapter, the Titanic dataset from an Excel file, we could use additional
    functions to help portray and work with the dataset.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 用于处理数据框的内置函数比我们迄今为止使用的更多。如果我们从本章之前的一个示例中取出 Titanic 数据集（来自 Excel 文件），我们可以使用更多的函数来帮助呈现和处理数据集。
- en: 'As a repeat, we load the dataset using the script:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 重复一遍，我们使用脚本加载数据集：
- en: '[PRE17]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We can then inspect the data frame using the `info` function, which displays
    the characteristics of the data frame:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以使用 `info` 函数检查数据框，该函数显示数据框的特征：
- en: '[PRE18]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '![](img/f46e0060-01bc-493f-a215-d7739984ed03.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f46e0060-01bc-493f-a215-d7739984ed03.png)'
- en: 'Some of the interesting points are as follows:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 一些有趣的点如下：
- en: 1309 entries
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1309 条记录
- en: 14 columns
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 14 列
- en: Not many fields with valid data in the `body` column—most were lost
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`body` 列中有效数据的字段不多——大多数数据丢失了'
- en: Does give a good overview of the types of data involved
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够很好地概述涉及的数据类型
- en: We can also use the `describe` function, which gives us a statistical breakdown
    of the number columns in the data frame.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用 `describe` 函数，它为数据框中的每一列数字型数据提供了统计 breakdown。
- en: '[PRE19]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This produces the following tabular display:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 这会生成以下表格展示：
- en: '![](img/8aa2a54b-aac2-419b-b1fd-a2dc906e93e0.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8aa2a54b-aac2-419b-b1fd-a2dc906e93e0.png)'
- en: 'For each numerical column we have:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每一列数字数据，我们有：
- en: Count
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计数
- en: Mean
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 均值
- en: Standard deviation
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准差
- en: 25, 50, and 75 percentile points
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 25%、50% 和 75% 百分位点
- en: Min, max values for the item
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目的最小值和最大值
- en: We can slice rows of interest using the syntax `df[12:13]`, where the first
    number (defaults to first row in data frame) is the first row to slice off and
    the second number (defaults to the last row in the data frame) is the last row
    to slice off.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用语法 `df[12:13]` 切片感兴趣的行，其中第一个数字（默认是数据框中的第一行）是要切割的第一行，第二个数字（默认是数据框中的最后一行）是要切割的最后一行。
- en: 'Running this slice operation we get the expected results:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 运行这个切片操作，我们得到了预期的结果：
- en: '![](img/60ee61b4-aadf-4f9e-aadf-d77f71632457.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![](img/60ee61b4-aadf-4f9e-aadf-d77f71632457.png)'
- en: 'Since we are effectively creating a new data frame when we select columns from
    a data frame, we can then use the `head` function against that as well:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在选择数据框的列时实际上是在创建一个新的数据框，因此我们也可以在此基础上使用 `head` 函数：
- en: '![](img/12b482b9-82b2-4cd5-bfc9-cca0209d49ee.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![](img/12b482b9-82b2-4cd5-bfc9-cca0209d49ee.png)'
- en: Sorting and filtering data frames in Jupyter/IPython
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Jupyter/IPython 中排序和筛选数据框
- en: Data frames automatically allow you to easily sort and filter the dataset involved,
    using existing functionality within the data frames themselves.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 数据框自动允许你轻松地对数据集进行排序和筛选，使用数据框本身已有的功能。
- en: Filtering a data frame
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过滤数据框
- en: 'We can select/filter specific rows based on criteria (using the same Titanic
    data frame):'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以根据条件选择/过滤特定的行（使用相同的 Titanic 数据框）：
- en: '[PRE20]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This means that we look into the data frame and select the rows where the age
    of the person is below five years old. (Again, this is creating a new data frame
    that can be manipulated as needed.)
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们查看数据框，并选择年龄小于五岁的人所在的行。（再次强调，这会创建一个新的数据框，可以根据需要进行操作。）
- en: '![](img/8f6445e5-cde0-4077-8a65-b10fa6fb6979.png)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8f6445e5-cde0-4077-8a65-b10fa6fb6979.png)'
- en: If you think about this, you can apply almost any filter to a data frame. Then
    you can do things like select part of one data frame and combine/join with parts
    of another data frame. Very quickly, you end up with SQL-like manipulations that
    can be performed on database tables. With that point of view, you are open to
    a much wider spectrum of data manipulation than would appear in the base data
    frame.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你考虑一下这个问题，你几乎可以对数据框应用任何过滤器。然后，你可以做一些事情，比如选择一个数据框的一部分，并将其与另一个数据框的部分进行合并/连接。很快，你就会得出类似
    SQL 的操作，可以在数据库表上执行。换个角度看，你将能进行比基础数据框所能提供的更广泛的数据操作。
- en: Sorting a data frame
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 排序数据框
- en: Sorting in most languages means re-organizing the dataset that you are working
    with. In data frames, sorting can be accomplished by selecting another index to
    access the data frame. All data frames start out with a basic incremental row
    index built-in by NumPy. You can change the index used to access the data frame
    and effectively sort the data frame in the manner that you want.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数语言中，排序意味着重新组织你正在处理的数据集。在数据框中，可以通过选择另一个索引来访问数据框，从而实现排序。所有数据框在一开始都会有一个由 NumPy
    内置的基本增量行索引。你可以改变用于访问数据框的索引，并有效地按照你希望的方式对数据框进行排序。
- en: 'If we look at the display of the (Titanic) data frame, we notice the unnamed
    first column of ordinal values:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看（Titanic）数据框的显示内容，我们会注意到没有命名的第一列序号值：
- en: '![](img/cbed97cf-346a-445f-b8f5-54b02741ad09.png)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbed97cf-346a-445f-b8f5-54b02741ad09.png)'
- en: 'If we were to assign another index to use on the data frame, we would sort
    the data frame by that index. For example:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们为数据框分配另一个索引来使用，我们将按该索引对数据框进行排序。例如：
- en: '[PRE21]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '![](img/0535072b-540f-44fb-a0bf-0b4bf25a8981.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0535072b-540f-44fb-a0bf-0b4bf25a8981.png)'
- en: Remember, since we have not assigned this new data frame (with the name index)
    we still have our original data frame intact.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，由于我们尚未分配这个新的数据框（命名为 index），我们仍然保留着原始数据框。
- en: 'Along the lines of the prior section, there is actually a sorting operation
    that can be performed against a data frame as well, using the `sort_values` method.
    For example, if we were to use the following script:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 与前一节相关，实际上可以对数据框执行排序操作，使用 `sort_values` 方法。例如，如果我们使用以下脚本：
- en: '[PRE22]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This script takes the data frame, sorts it by the `home.dest` column in ascending
    order and prints the first five records (in that order)
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本将数据框按 `home.dest` 列升序排序，并打印前五条记录（按此顺序）
- en: 'We would see results as follows:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到如下结果：
- en: '![](img/645bc13d-ee0b-4aa5-a08f-3f51844b5cd3.png)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![](img/645bc13d-ee0b-4aa5-a08f-3f51844b5cd3.png)'
- en: Summary
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at some of the more compute intensive tasks that
    might be performed in Jupyter. We used Python to scrape a website to gather data
    for analysis. We used Python NumPy, pandas, and SciPy functions for in-depth computation
    of results. We went further into pandas and explored manipulating data frames.
    Lastly, we saw examples of sorting and filtering data frames.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们研究了在 Jupyter 中可能执行的一些计算密集型任务。我们使用 Python 抓取网站以收集数据进行分析。我们使用了 Python 的
    NumPy、pandas 和 SciPy 函数来进行深入计算。我们进一步探索了 pandas，并研究了如何操作数据框。最后，我们看到了一些排序和过滤数据框的例子。
- en: In the next chapter, we will make some predictions and use visualization to
    validate our predictions.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将做出一些预测，并使用可视化来验证我们的预测。
