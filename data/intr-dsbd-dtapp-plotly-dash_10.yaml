- en: '*Chapter 8*: Calculating Data Frequency and Building Interactive Tables'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第8章*：计算数据频率并构建交互式表格'
- en: All the chart types that we've explored so far displayed our data as is. In
    other words, every marker, whether it was a circle, a bar, a map, or any other
    shape, corresponded to a single data point in our dataset. **Histograms**, on
    the other hand, display bars that correspond to a summary statistic about *groups*
    of data points. A histogram is mainly used to count values in a dataset. It does
    so by grouping, or "binning," the data into bins and displaying the count of observations
    in each bin. Other functions are possible, of course, such as working out the
    mean or maximum, but counting is the typical use case. The counts are represented
    like a bar chart, where the heights of the bars correspond to the counts (or other
    function) of each bin. Another important result is that we also see how data is
    distributed, and what shape/kind of distribution we have. Are the observations
    concentrated around a certain point or more than one point? Are they skewed to
    the left or the right? This can give us an overview of this aspect of our data.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们探索的所有图表类型都直接展示了我们的数据。换句话说，每个标记，无论是圆形、条形、地图或其他形状，都对应数据集中的一个数据点。而**直方图**则显示与数据点*组*相关的统计汇总值。直方图主要用于统计数据集中的值。它通过将数据分组或“分箱”到多个箱中，并显示每个箱中的观测值数量来实现。除了计数，当然也可以进行其他计算，比如计算均值或最大值，但计数是最常见的应用场景。计数结果以条形图的形式呈现，条形的高度对应每个箱中的计数（或其他计算结果）。另一个重要的结果是，我们可以看到数据是如何分布的，以及数据呈现什么样的分布形状/类型。观察值是否集中在某个点或多个点附近？它们是向左还是向右偏斜的？这些都能帮助我们全面了解数据的一个方面。
- en: Probability distributions are fundamental in statistics and crucial in getting
    an overview of our data. It is important to know how data values are spread in
    our sample or dataset, and where they are concentrated. If a dataset looks normally
    distributed, we might make different assumptions and have different expectations
    than if it were exponentially distributed. Histograms help in revealing the shape
    of the distribution of our data.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 概率分布是统计学中的基础内容，对于了解我们的数据概况至关重要。了解数据值在我们的样本或数据集中是如何分布的，以及它们的集中位置非常重要。如果一个数据集看起来呈正态分布，我们可能会做出不同的假设，并有不同的预期，而不是假设它呈指数分布。直方图有助于揭示我们数据分布的形状。
- en: We will also explore Dash's **DataTable** component in this chapter. This is
    a flexible, powerful, and feature-rich component that helps us with, among other
    things, displaying, filtering, and exporting tables of data.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们还将探索Dash的**DataTable**组件。这个组件灵活、强大且功能丰富，可以帮助我们完成多项任务，包括显示、过滤和导出数据表。
- en: 'We will go through the following topics in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将讨论以下内容：
- en: Creating a histogram
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建直方图
- en: Customizing the histogram by modifying its bins and using multiple histograms
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过修改箱子并使用多个直方图来定制直方图
- en: Adding interactivity to histograms
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向直方图添加交互性
- en: Creating a 2D histogram
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建二维直方图
- en: Creating a DataTable
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建数据表
- en: Controlling the look and feel of the table (cell width, height, text display,
    and more)
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制表格的外观和感觉（单元格宽度、高度、文本显示等）
- en: Adding histograms and tables to the app
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向应用中添加直方图和表格
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: We will use similar tools to the ones we used in the previous chapter with one
    addition. We will be using Plotly Express as well as the `graph_objects` module
    for creating our charts. The packages to use are Plotly, Dash, Dash Core Component,
    Dash HTML Components, Dash Bootstrap Components, pandas, and the new `dash_table`
    package. You don't need to install this separately (although you can), as it is
    installed together with Dash when you install it.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用与上一章相似的工具，只是增加了一些内容。我们将使用Plotly Express和`graph_objects`模块来创建我们的图表。需要使用的软件包包括Plotly、Dash、Dash
    Core Component、Dash HTML Components、Dash Bootstrap Components、pandas以及新的`dash_table`包。您无需单独安装这个包（尽管可以），因为它在安装Dash时会一同安装。
- en: The code files of this chapter can be found on GitHub at [https://github.com/PacktPublishing/Interactive-Dashboards-and-Data-Apps-with-Plotly-and-Dash/tree/master/chapter_08](https://github.com/PacktPublishing/Interactive-Dashboards-and-Data-Apps-with-Plotly-and-Dash/tree/master/chapter_08).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码文件可以在GitHub上找到，链接地址为：[https://github.com/PacktPublishing/Interactive-Dashboards-and-Data-Apps-with-Plotly-and-Dash/tree/master/chapter_08](https://github.com/PacktPublishing/Interactive-Dashboards-and-Data-Apps-with-Plotly-and-Dash/tree/master/chapter_08)。
- en: Check out the following video to see the Code in Action at [https://bit.ly/3sGSCes](https://bit.ly/3sGSCes).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频，了解代码的实际应用：[https://bit.ly/3sGSCes](https://bit.ly/3sGSCes)。
- en: Creating a histogram
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建直方图
- en: We want to see how we can get the distribution of a sample of data and get an
    idea of where values are concentrated, as well as how much variability/spread
    it has. We will do this by creating a histogram.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望了解如何获得数据样本的分布，并了解值的集中位置以及其变异性/扩展性。我们将通过创建直方图来实现这一目标。
- en: 'As always, we''ll start with the simplest possible example:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 和往常一样，我们从最简单的示例开始：
- en: 'We open the `poverty` DataFrame and create a subset of it, containing only
    countries and data from the year 2015:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们打开`poverty`数据框，并创建一个子集，仅包含2015年各国的数据：
- en: '[PRE0]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Import Plotly Express and run the `histogram` function with `df` as the argument
    to the `data_frame` parameter and the indicator of our choice for the `x` parameter:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入Plotly Express，并使用`histogram`函数，将`df`作为`data_frame`参数的参数，并选择我们想要的指标作为`x`参数：
- en: '[PRE1]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'As a result, we get the histogram that you can see in *Figure 8.1*:'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 结果，我们得到了你在*图 8.1*中看到的基尼指标直方图：
- en: '![Figure 8.1 – A histogram of the Gini indicator](img/B16780_08_1.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.1 – 基尼指标直方图](img/B16780_08_1.jpg)'
- en: Figure 8.1 – A histogram of the Gini indicator
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.1 – 基尼指标直方图
- en: The *x* axis was named using the indicator we chose, and the *y* axis was given
    the title `count`. This is the default function that the `histogram` function
    uses, and it is clear also from the hover box that we see when hovering over any
    of the bars. Here we learn that there are 18 countries whose Gini index was in
    the interval (**35, 39.9**) in the year 2015\. We have previously visualized this
    indicator by country (visualizing each and every country), but this time, we are
    getting an idea of how many values are available in each bin and how those values
    are distributed. We can see that the majority of countries have a Gini index between
    25 and 40 and that the numbers get progressively lower the higher the Gini index
    becomes. This is valid for this particular year only, of course.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '*x*轴使用我们选择的指标命名，*y*轴的标题为`count`。这是`histogram`函数的默认功能，从鼠标悬停在任何条形图上的提示框也可以清楚地看到这一点。在这里，我们得知2015年有18个国家的基尼指数位于区间（**35,
    39.9**）之间。我们之前已经按国家可视化了该指标（逐个国家展示），但这次我们通过直方图了解每个箱子中的数值数量以及这些数值的分布情况。我们可以看到，大多数国家的基尼指数在25到40之间，而且基尼指数越高，国家数量越少。当然，这仅适用于这一特定年份。'
- en: We are using the default number of bins, but we can modify it if we want. This
    is something that you typically want to interactively modify until you get a good
    view. In an interactive setting, such as in a dashboard, it's probably a good
    idea to allow users to modify the number of bins, especially if you don't know
    which metric they will choose and how the values are distributed for that metric.
    This is exactly our case in the dataset we are working with.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用的是默认的箱子数量，但如果需要，可以修改它。这是你通常想要在交互式设置中修改的内容，直到你获得一个好的视图。在交互式环境中，比如在仪表板上，允许用户修改箱子的数量可能是个好主意，特别是当你不确定他们会选择哪个指标以及该指标的值如何分布时。这正是我们在这个数据集中的情况。
- en: Let's see the effect of changing the number of bins, as well as other available
    modifications.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看改变箱子数量以及其他可用修改的效果。
- en: Customizing the histogram by modifying its bins and using multiple histograms
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过修改箱子数量和使用多个直方图来定制直方图
- en: 'We can change the number of bins through the `nbins` parameter. We will first
    see the effect of using two extreme values for the number of bins. Setting `nbins=2`
    generates the chart in *Figure 8.2*:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过`nbins`参数更改箱子的数量。我们将首先看到使用两个极端值作为箱子数量的效果。设置`nbins=2`会生成*图 8.2*中的图表：
- en: '![Figure 8.2 – A histogram of the Gini indicator with two bins](img/B16780_08_2.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.2 – 具有两个箱子的基尼指标直方图](img/B16780_08_2.jpg)'
- en: Figure 8.2 – A histogram of the Gini indicator with two bins
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.2 – 具有两个箱子的基尼指标直方图
- en: 'As you can see, the values were split into two equal bins, (`nbins=500` produces
    the chart in *Figure 8.3*:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，值被分为两个相等的箱子，(`nbins=500`会生成*图 8.3*中的图表：
- en: '![Figure 8.3 – A histogram of the Gini indicator with 500 bins](img/B16780_08_3.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.3 – 具有500个箱子的基尼指标直方图](img/B16780_08_3.jpg)'
- en: Figure 8.3 – A histogram of the Gini indicator with 500 bins
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.3 – 具有500个箱子的基尼指标直方图
- en: It is now much more detailed, maybe more detailed than useful. When you set
    too many bins, it is almost like looking at the raw data.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在它更加详细了，可能比实际有用的还要详细。当你设置太多的箱子时，几乎就像是在查看原始数据。
- en: 'The default number of bins resulted in the bin size being intervals of five.
    Now that we know that our values range between 25 and 60 (45), we might want to
    see how the data is distributed across 45 bins. This makes the size of each bin
    1\. *Figure 8.4* shows the result of setting `nbins=45`:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的箱子数量导致箱子的大小是五个单位的区间。现在我们知道我们的值范围在 25 到 60 之间（45），我们可能希望看到数据如何在 45 个箱子中分布。这使得每个箱子的大小为
    1。*图 8.4* 显示了设置 `nbins=45` 的结果：
- en: '![Figure 8.4 – A histogram of the Gini indicator with 45 bins](img/B16780_08_4.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.4 – 具有 45 个箱子的基尼指数直方图](img/B16780_08_4.jpg)'
- en: Figure 8.4 – A histogram of the Gini indicator with 45 bins
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.4 – 具有 45 个箱子的基尼指数直方图
- en: All the figures we created in this chapter so far were for the same dataset.
    You can see how different the distribution looks based on the selected number
    of bins. You can also think of it as looking at the distribution of the data with
    varying resolutions. There is usually an optimal resolution for your use case
    that can be manually tweaked until you find the most useful/insightful one for
    you. This is a major advantage of making histograms interactive, where you allow
    your users to explore as they see fit.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们在本章中创建的所有图形都是基于相同的数据集。你可以看到，基于所选的箱子数量，分布看起来有多么不同。你也可以将其视为以不同的分辨率查看数据分布。通常，对于你的用例来说，有一个最优分辨率，你可以手动调整，直到找到最有用/最具洞察力的分辨率。这是使直方图具有交互性的主要优势，你可以让用户根据自己的需求进行探索。
- en: Recall that we have a few categorical columns in our dataset and that we might
    use those columns to color our bars to get a more detailed view of the data. Let's
    see how this can be done.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下，我们的数据集中有一些分类列，我们可以使用这些列来给条形图上色，从而更详细地查看数据。让我们看看如何实现这一点。
- en: Using color to further split the data
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用颜色进一步拆分数据
- en: 'As you might have guessed, adding color to a Plotly Express chart is simply
    done by selecting a column from the DataFrame we are using. Setting `color=''Income
    Group''` generates the chart you can see in *Figure 8.5*:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能猜到的那样，向 Plotly Express 图表添加颜色，实际上就是从我们使用的数据框中选择一列。设置 `color='Income Group'`
    生成了你可以在 *图 8.5* 中看到的图表：
- en: '![Figure 8.5 – A histogram of the Gini indicator colored by Income Group](img/B16780_08_5.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.5 – 按收入组着色的基尼指数直方图](img/B16780_08_5.jpg)'
- en: Figure 8.5 – A histogram of the Gini indicator colored by Income Group
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.5 – 按收入组着色的基尼指数直方图
- en: This is the exact same histogram but enriched by another dimension of the dataset.
    Each bar is split by **Income Group** and colored accordingly. We can now see
    for each bin how many countries there are from each income group.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是完全相同的直方图，但通过数据集的另一个维度进行了丰富。每个条形根据 **收入组** 进行拆分，并相应地上色。我们现在可以看到每个箱子中，来自每个收入组的国家数量。
- en: 'You can also see the effect of setting `color=''Region'', color_discrete_sequence=px.colors.qualitative.Set1`
    in *Figure 8.6*:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以看到设置 `color='Region', color_discrete_sequence=px.colors.qualitative.Set1`
    的效果，如 *图 8.6* 所示：
- en: '![Figure 8.6 – A histogram of the Gini indicator colored by Region](img/B16780_08_6.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.6 – 按地区着色的基尼指数直方图](img/B16780_08_6.jpg)'
- en: Figure 8.6 – A histogram of the Gini indicator colored by Region
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.6 – 按地区着色的基尼指数直方图
- en: Again, we have the same histogram, but colored using a different column, `barmode`
    parameter. Let's explore how this applies to histograms.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们得到了相同的直方图，但使用不同的列进行了着色，`barmode` 参数。让我们看看这种方法如何应用于直方图。
- en: Tip
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: You might have noticed that the bars in histograms are displayed in a connected
    manner, without any spaces between them as is the case in bar charts. This is
    a visual cue, to indicate the connected nature of histograms. The bins are arbitrary
    separation points that separate a group of observations from one another. As we
    saw, those can be selected differently, and result in quite different shapes.
    Bar charts are typically used for discrete or categorical variables and are typically
    displayed with some space between them to express this fact.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，直方图中的条形图是连在一起显示的，没有像条形图那样的间隔。这是一个视觉提示，用来表示直方图的连接特性。箱子是将一组观测值相互分开的任意分隔点。正如我们所看到的，这些分隔点可以不同选择，从而产生完全不同的形状。条形图通常用于离散或分类变量，并且通常会在条形之间留一些空隙来表达这一点。
- en: Exploring other ways of displaying multiple bars in histograms
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索在直方图中显示多个条形的其他方式
- en: The two previous histograms displayed the sub-bars in each bin stacked on top
    of one another. This makes sense, as those sub-bars represent a grouping of the
    data under the respective bin. In other words, they show the distribution of groups
    of countries for each bin.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的两个直方图将每个区间的子柱状图堆叠在一起。这是有道理的，因为这些子柱状图代表了各自区间下的数据分组。换句话说，它们展示了每个区间下国家分组的分布。
- en: 'In some other cases, we might want to do the same thing but for two different
    years. In this case, having the bars stacked might give the false impression that
    the sub-bars correspond to portions of the same bin, whereas they correspond to
    the same bin but for different years. An example can show this more easily:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些其他情况下，我们可能想做相同的事情，但针对两年数据。在这种情况下，将柱状图堆叠可能会产生一种错误的印象，即子柱状图对应于同一个区间的不同部分，而实际上它们对应的是同一个区间，但来自不同的年份。通过一个例子可以更容易地理解这一点：
- en: 'Create a subset of `poverty` that contains only countries and the range of
    years is `[2010, 2015]`:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含仅有国家且年份范围为 `[2010, 2015]` 的 `poverty` 子集：
- en: '[PRE2]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Run the `histogram` function for the Gini index, coloring by `year` and setting
    `barmode=''group''`:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对基尼指数运行 `histogram` 函数，按 `year` 着色并设置 `barmode='group'`：
- en: '[PRE3]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This results in the following output:'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这样就得到了以下输出：
- en: '![Figure 8.7 – A histogram of the Gini indicator colored by year, with barmode
    set to "group"](img/B16780_08_7.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.7 – 按年份着色的基尼指标直方图，`barmode` 设置为 "group"](img/B16780_08_7.jpg)'
- en: Figure 8.7 – A histogram of the Gini indicator colored by year, with barmode
    set to "group"
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.7 – 按年份着色的基尼指标直方图，`barmode` 设置为 "group"
- en: Because years represent a "before and after" view of the same metric and the
    same bin, I think it makes more sense to display them next to each other, so we
    can see how each bin value increased or decreased for the two, or more, selected
    years.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 由于年份代表了相同指标和相同区间的“前后”视角，我认为将它们并排显示更为合理，这样我们可以看到每个区间的值如何在两个或多个选择的年份间增加或减少。
- en: 'There is another approach to the same issue if we are more interested in highlighting
    the change in the distribution as a whole. We can run the same function we just
    ran, but use facets in addition to color to split the histogram in two. The code
    is also straightforward and contains one more argument, as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们更关心突出显示分布整体变化的话，还有另一种处理方式。我们可以运行刚才使用的相同函数，但除了颜色外，使用 facets 来将直方图拆分为两部分。代码也很简单，并且包含了一个额外的参数，如下所示：
- en: '[PRE4]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This results in the following output:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这样就得到了以下输出：
- en: '![Figure 8.8 – A histogram of the Gini indicator colored and split by year](img/B16780_08_8.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.8 – 按年份着色并拆分的基尼指标直方图](img/B16780_08_8.jpg)'
- en: Figure 8.8 – A histogram of the Gini indicator colored and split by year
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.8 – 按年份着色并拆分的基尼指标直方图
- en: Again, the last two charts display the same information in two different ways.
    In *Figure 8.7*, it's very easy to compare how the count of countries for each
    bin changed from year to year. But it's a bit more difficult to see how the *distributions*
    have changed between the first and second years. The opposite is true for *Figure
    8.8*. Note that we could also use `facet_row` as well, and this would have displayed
    the charts on top of one another. But we chose to display them next to each other
    because we are interested in comparing the heights of the bars, and it's much
    easier to do so when they are next to each other. Had we set `orientation='h'`
    (for horizontal), then it would have been easier to use `facet_row` in this case.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，最后两个图表以两种不同的方式显示相同的信息。在*图 8.7*中，非常容易比较每个区间内国家数量如何随着年份变化而变化。但要看清第一年和第二年之间*分布*的变化就稍微难一些。*图
    8.8*则相反。请注意，我们也可以使用 `facet_row`，这样可以将图表显示在彼此之上。但我们选择将它们并排显示，因为我们更关注比较柱状图的高度，而并排显示时，比较会更容易。如果我们设置
    `orientation='h'`（横向显示），那么在这种情况下，使用 `facet_row` 也会更方便。
- en: 'Sometimes we might be more interested in the percentage of the number of values
    in a certain bin, as opposed to the absolute count for each bin. Getting this
    is also very simple. We just need to set `histnorm=''percent''`. We start by creating
    a `fig` object and add the new option:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 有时我们可能更关心某个区间内值的百分比，而不是每个区间的绝对数量。得到这个结果也非常简单。我们只需设置 `histnorm='percent'`。我们首先创建一个
    `fig` 对象并添加新的选项：
- en: '[PRE5]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We can also make it more explicit that we are displaying percentages by adding
    a tick suffix to the *y*-axis ticks. This can be achieved with the following code:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过在 *y* 轴刻度上添加百分号后缀来更明确地显示百分比。这可以通过以下代码实现：
- en: '[PRE6]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We might also want to set a more descriptive title for the *y* axis, which
    can also be easily achieved using the following code:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可能希望为*y*轴设置一个更具描述性的标题，这也可以通过以下代码轻松实现：
- en: '[PRE7]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Running this modified code produces the chart in *Figure 8.9*:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 运行这段修改后的代码将生成*图8.9*中的图表：
- en: '![Figure 8.9 – A histogram of the Gini indicator colored and split by year,
    showing percentages](img/B16780_08_9.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![图8.9 – 一个按年份着色并分割的基尼系数直方图，显示百分比](img/B16780_08_9.jpg)'
- en: Figure 8.9 – A histogram of the Gini indicator colored and split by year, showing
    percentages
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.9 – 一个按年份着色并分割的基尼系数直方图，显示百分比
- en: This chart looks identical to the one in *Figure 8.8*. The main difference is
    that the height of the bars represents the percentage and not the absolute count.
    This was also made clearer with tick suffixes and a *y*-axis title.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这张图表看起来与*图8.8*中的图表相同。主要的区别是，条形的高度表示的是百分比，而不是绝对数值。通过刻度后缀和*y*轴标题，这一点也变得更加清晰。
- en: We have explored quite a few options with histograms. Let's now make our histograms
    interactive and add a few other options.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经探索了许多直方图的选项。现在让我们使我们的直方图具备交互性，并添加一些其他选项。
- en: Adding interactivity to histograms
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为直方图添加交互性
- en: 'Just like we did in [*Chapter 7*](B16780_07_Final_NM_ePub.xhtml#_idTextAnchor106),
    *Exploring Map Plots and Enriching Your Dashboards with Markdown*, we can do the
    same with histograms. We can allow users to get a better idea about the distribution
    of a certain indicator in a certain year or more. The difference is that we want
    to allow them to customize the number of bins. Since we are now comfortable with
    handling multiple inputs and outputs, let''s also add some more options for our
    users. We can also allow users to select multiple years and display multiple years
    on multiple sub-plots using faceting. *Figure 8.10* shows what we will be working
    toward to make it clear:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们在[*第7章*](B16780_07_Final_NM_ePub.xhtml#_idTextAnchor106)中做的那样，*探索地图图表并用Markdown丰富你的仪表板*，我们也可以对直方图做同样的事情。我们可以允许用户更好地了解某个指标在某一年或多个年份中的分布。不同之处在于，我们希望允许他们自定义区间的数量。既然我们现在已经能够处理多个输入和输出，让我们为用户添加更多选项。我们还可以允许用户选择多个年份，并使用分面显示多个年份的多个子图。*图8.10*展示了我们将朝着这个目标努力的方向：
- en: '![Figure 8.10 – A histogram app allowing the selection of indicator, year(s),
    and bins](img/B16780_08_10.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图8.10 – 一个允许选择指标、年份和区间的直方图应用](img/B16780_08_10.jpg)'
- en: Figure 8.10 – A histogram app allowing the selection of indicator, year(s),
    and bins
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.10 – 一个允许选择指标、年份和区间的直方图应用
- en: 'Let''s start building right away. We won''t be discussing the layout elements
    such as color and width, but you can always refer to the code repository for the
    exact solution. We will focus on building the interactivity for this. Later on,
    we will add it to our app:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在就开始构建吧。我们不会讨论布局元素，例如颜色和宽度，但你可以随时参考代码库来获取确切的解决方案。我们将专注于为此添加交互性。稍后我们会将其添加到我们的应用程序中：
- en: 'Make the necessary imports:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进行必要的导入：
- en: '[PRE8]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Create an `app` object and its `layout` attribute:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`app`对象及其`layout`属性：
- en: '[PRE9]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Add `Label` and `Dropdown` components as the first elements to the div just
    created. The `Dropdown` component displays the available indicators, and is the
    exact same one we created in [*Chapter 7*](B16780_07_Final_NM_ePub.xhtml#_idTextAnchor106),
    *Exploring Map Plots and Enriching Your Dashboards with Markdown*:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Label`和`Dropdown`组件作为第一个元素添加到刚刚创建的div中。`Dropdown`组件显示可用的指标，它与我们在[*第7章*](B16780_07_Final_NM_ePub.xhtml#_idTextAnchor106)中创建的完全相同，*探索地图图表并用Markdown丰富你的仪表板*：
- en: '[PRE10]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Add a `dbc.Label` and a `dcc.Dropdown` component to the list in the div for
    indicating that the user can select a year and the actual years to be selected,
    allowing multiple selections. Note that since this dropdown allows multiple selection,
    its default value, if provided, needs to be provided as a list:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`dbc.Label`和`dcc.Dropdown`组件中添加到div的列表中，以表示用户可以选择一个年份和实际要选择的年份，并允许多选。请注意，由于此下拉框允许多选，如果提供了默认值，则需要以列表的形式提供：
- en: '[PRE11]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Again, to the same list in the div, we add another `dbc.Label` component and
    a `dcc.Slider` component that will allow users to modify the number of bins in
    the resulting histogram(s). Note that by not setting a default value, Plotly will
    provide the default number of bins based on the data being analyzed. It would
    show as **0** in the slider. Users are then free to modify it if they wish to
    do so:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次，在 div 中相同的列表中，我们添加了另一个`dbc.Label`组件和一个`dcc.Slider`组件，这将允许用户修改生成的直方图中的 bin
    数量。注意，如果不设置默认值，Plotly将根据所分析的数据提供默认的bin数量。滑块中将显示为**0**。用户可以根据需要进行修改：
- en: '[PRE12]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Finally, we add a `Graph` component, and this will complete our layout:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们添加了一个`Graph`组件，这将完成我们的布局：
- en: '[PRE13]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Running these steps creates our app''s visible part (the layout) without any
    functionality. The default looks as in *Figure 8.11*, and I''ll leave it to you
    to modify the colors, alignment, and relative positioning, using the knowledge
    we built in [*Chapter 1*](B16780_01_Final_NM_ePub.xhtml#_idTextAnchor015), *Overview
    of the Dash Ecosystem*:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 运行这些步骤会创建我们应用程序的可视部分（布局），但没有任何功能。默认的外观如*图 8.11*所示，我将留给你修改颜色、对齐方式和相对位置，使用我们在
    [*第一章*](B16780_01_Final_NM_ePub.xhtml#_idTextAnchor015)中构建的知识，*Dash生态系统概述*：
- en: '![Figure 8.11 – The default view of the histogram app with no functionality](img/B16780_08_11.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.11 – 没有功能的直方图应用的默认视图](img/B16780_08_11.jpg)'
- en: Figure 8.11 – The default view of the histogram app with no functionality
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.11 – 没有功能的直方图应用的默认视图
- en: 'We''ll now go on to build the interactivity. In this case, we need to build
    a function that takes three inputs (the indicator dropdown, the years dropdown,
    and the bins slider). It will return a `Figure` object, which will modify the
    chart at the bottom of the figure:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将开始构建交互功能。在这个案例中，我们需要构建一个函数，该函数接受三个输入（指标下拉框、年份下拉框和 bins 滑块）。它将返回一个`Figure`对象，用于修改图形底部的图表：
- en: 'Create the callback. There is nothing special here; we just make sure to have
    the IDs show that they are related to the histogram:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建回调函数。这里没有什么特别的；我们只需确保设置ID，以表明它们与直方图相关：
- en: '[PRE14]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Create the function that generates our histogram using the inputs just created.
    We first check that neither `year` nor `indicator` is provided, in which case
    we `raise PreventUpdate`:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建生成直方图的函数，使用刚刚创建的输入。我们首先检查是否既没有提供`year`也没有提供`indicator`，如果是这种情况，我们会`raise PreventUpdate`：
- en: '[PRE15]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Create a sub-set, `df`, by selecting countries only, as well as getting rows
    where the year is in the provided `years` argument:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过选择仅包含国家的数据创建一个子集`df`，并获取年份在提供的`years`参数中的行：
- en: '[PRE16]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We are now ready to create the figure, which is done by calling the `histogram`
    function. As we saw in this chapter, we provide `df` to the `data_frame` parameter,
    `indicator` for the `x` parameter, and `year` to `color`. The title of the figure
    will be set by concatenating the indicator with the `Histogram` string. The `nbins`
    parameter will take the `nbins` value selected by the user from the slider. For
    facets, we use the `year` column. Since we don''t know how many years users will
    select, and we don''t want them to end up creating a difficult-to-read chart,
    we set `facet_col_wrap=4`. This will ensure that each row of charts will contain
    no more than four, and the following one will be added to the next row of charts:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在准备创建图形，通过调用`histogram`函数来完成。如我们在本章中所看到的，我们将`df`提供给`data_frame`参数，将`indicator`作为`x`参数，将`year`传递给`color`。图形的标题将通过将指标与`Histogram`字符串连接来设置。`nbins`参数将接受用户从滑块中选择的`nbins`值。对于子图，我们使用`year`列。由于我们不知道用户将选择多少年份，并且不希望他们最终创建一个难以阅读的图表，因此我们设置`facet_col_wrap=4`。这将确保每行图表最多包含四个，接下来的图表将添加到下一行中：
- en: '[PRE17]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'A new and interesting option that we haven''t covered so far is the `for_each_xaxis`
    attribute. Note that this is only one of several `for_each_` attributes, which
    you can explore separately. This is useful in situations where the number of *x*-axis
    attributes is not known, such as in this case, or simply when multiple attributes
    exist. By default, every facet (or sub-plot) will have its own *x*-axis title.
    As you know, there are many indicator names that are very long and will overlap
    in this case. To eliminate this, we set all `xaxis` titles to an empty string:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个新的且有趣的选项是我们到目前为止没有涉及的`for_each_xaxis`属性。注意，这是多个`for_each_`属性中的一个，你可以单独探索其他属性。这在*
    x *轴属性的数量未知的情况下非常有用，比如在这种情况，或者当存在多个属性时。默认情况下，每个子图（或子图）都会有自己独立的* x *轴标题。正如你所知，很多指标名称很长，在这种情况下会发生重叠。为了解决这个问题，我们将所有`xaxis`标题设置为空字符串：
- en: '[PRE18]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'To replace the deleted *x*-axis titles, we can create an annotation instead.
    The annotation is a simple string that can easily be added with the `add_annotation`
    method. Because we want the `X` position of the annotation to be at the center
    of the figure, we set its `x` value to `0.5`. Also, because we want the `Y` position
    to be slightly below the plot area, we set the `y` value to `-0.12`. Now, it''s
    important to indicate to Plotly the meaning of those numbers we provide, or their
    reference. We can use the `xref` and `yref` parameters to indicate that these
    values should take `paper` as their reference. This means to take these points
    as fractions of the plot and not as data points, like in scatter plots, for example.
    This is useful because those annotations will serve as axis titles, and so we
    want their position to be fixed. By default, annotations come with arrows pointing
    to the point selected. We can remove that by setting `showarrow=False`, as follows:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了替换已删除的*x*轴标题，我们可以创建一个注释。注释是一个简单的字符串，可以通过`add_annotation`方法轻松添加。因为我们希望注释的`X`位置位于图形的中央，所以我们将其`x`值设置为`0.5`。另外，由于我们希望`Y`位置略低于绘图区域，因此将`y`值设置为`-0.12`。现在，重要的是告诉Plotly我们提供的这些数字的含义或其参考。我们可以使用`xref`和`yref`参数来表示这些值应该以`paper`为参考。这意味着将这些点视为图表的分数，而不是数据点，例如散点图中的数据点。这很有用，因为这些注释将作为轴标题，因此我们希望它们的位置是固定的。默认情况下，注释会有指向所选点的箭头。我们可以通过设置`showarrow=False`来移除它，如下所示：
- en: '[PRE19]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The following is the full code of the function to make it clearer:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是该函数的完整代码，以便更清楚地了解：
- en: '[PRE20]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: With this, we have created an independent app that can run in JupyterLab. I
    encourage you to fully run it and see whether you come across issues, and to also
    customize and make some changes to it.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个，我们创建了一个独立的应用程序，可以在JupyterLab中运行。我鼓励你完全运行它，看看是否会遇到问题，并对它进行定制和修改。
- en: So far, we have explored how to visualize the counts and distributions of values
    for a single set of observations. There is also an interesting way to explore
    two sets of observations at the same time, which can be done using a 2D histogram.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经探索了如何可视化单个观察集的计数和分布。还有一种有趣的方式可以同时探索两个观察集，这可以通过二维直方图来实现。
- en: Creating a 2D histogram
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个二维直方图
- en: 'In the first case, we basically counted the observations in each bin of our
    dataset. In this case, we will do the same but for *combinations* of bins for
    both datasets. The bins for each variable will end up creating a matrix. A simple
    example can make this easy. Let''s create one and see:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个案例中，我们基本上是统计了数据集中每个区间的观察值。在这个例子中，我们将做同样的事情，但对于两个数据集的*区间组合*。每个变量的区间将最终形成一个矩阵。一个简单的例子可以让这一点变得清晰。让我们创建一个例子并看看：
- en: 'Create a subset of `poverty` containing only countries, where the year is equal
    to `2000`:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含仅有2000年数据的`poverty`子集：
- en: '[PRE21]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Create a `Figure` object and add a `histogram2d` trace (at the time of writing,
    this chart type is not available in Plotly Express). We simply select any two
    indicators that we would like to plot together and pass them to `x` and `y`:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`Figure`对象并添加一个`histogram2d`轨迹（在撰写时，这种图表类型在Plotly Express中不可用）。我们只需选择希望一起绘制的任意两个指标，并将它们传递给`x`和`y`：
- en: '[PRE22]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Add titles for the *x* and *y* axes:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加*x*轴和*y*轴的标题：
- en: '[PRE23]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Running the preceding code generates the chart in *Figure 8.12*:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述代码会生成*图 8.12*中的图表：
- en: '![Figure 8.12 – A 2D histogram](img/B16780_08_12.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.12 – 2D 直方图](img/B16780_08_12.jpg)'
- en: Figure 8.12 – A 2D histogram
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.12 – 2D 直方图
- en: The frequency of values is expressed in a different way here. With a 1D histogram,
    the height of the bars represents the frequency of values in the respective bin.
    In a 2D histogram, the "height" is expressed using a continuous color scale. We
    can see from the color bar that the counts range from 0 to 10, and that the bin
    combination with the most values is the **x** interval (**22, 22.9**) and the
    **y** interval (**30, 39.9**), with a **z** value (height) of **10**. Generally,
    *z* is used to refer to the third dimension, and so this can also be thought of
    as the height of this rectangle.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这里值的频率表达方式有所不同。在一维直方图中，条形的高度表示各个区间内的值的频率。在二维直方图中，“高度”则通过连续的颜色尺度来表示。我们可以从色标中看到，计数范围从0到10，具有最多值的区间组合是**x**区间（**22,
    22.9**）和**y**区间（**30, 39.9**），对应的**z**值（高度）为**10**。通常，*z*用于指代第三维度，因此这也可以视为这个矩形的高度。
- en: Note that this is different from using a scatter plot for two variables. In
    that case, we would be interested in seeing a correlation between the two variables,
    or at least how they both vary. In this case, we are trying to identify where
    the most frequent observations are, across two variables, and under which combination
    of bins.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这与使用散点图展示两个变量不同。在散点图中，我们关注的是两个变量之间的相关性，或者至少是它们各自的变化情况。而在这里，我们尝试识别两个变量之间最常见的观测值，及其所处的箱体组合。
- en: There are still many options that you can explore with histograms, or visualizing
    distributions and counts in general. We have explored many of those options, and
    now we'll turn to explore another interactive component that is available in Dash,
    the DataTable.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 仍然有很多选项可以用来探索直方图，或是可视化分布和计数。我们已经探讨了很多这样的选项，现在我们将转向探索 Dash 中的另一个交互式组件——数据表。
- en: Creating a DataTable
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建数据表
- en: Technically, `dash_table` is a separate package, as mentioned at the beginning
    of the chapter, and can be installed separately. It is installed automatically
    with Dash, the correct, up-to-date version, which is the recommended approach.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 从技术上讲，`dash_table`是一个独立的包，正如本章开头所提到的，它可以单独安装。它会随 Dash 自动安装，确保使用的是正确且最新的版本，这是推荐的做法。
- en: Many times, displaying tables, especially if they are interactive, can add a
    lot of value to users of our dashboards. Also, if our dashboards or data visualizations
    are not sufficient for users, or if they want to run their own analysis, it is
    probably a good idea to allow them to get the raw data for that. Finally, the
    `DataTable` component allows its own data visualization through custom coloring,
    fonts, sizes, and so on. So, we have another way to visualize and understand our
    data through tables. We will explore a few options in this chapter, but definitely
    not all of them.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 很多时候，展示表格，特别是如果表格是交互式的，可以为我们的仪表盘用户增加很多价值。此外，如果我们的仪表盘或数据可视化对用户而言不够充分，或者如果用户希望运行他们自己的分析，那么允许他们获取原始数据也许是一个好主意。最后，`DataTable`组件允许通过自定义颜色、字体、大小等进行数据可视化。因此，我们可以通过表格的方式进一步理解和展示数据。在本章中，我们将探索一些可用的选项，但肯定不会涵盖所有选项。
- en: 'Let''s see how we can create a simple DataTable in a simple app using a DataFrame:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何在一个简单的应用中使用 DataFrame 创建一个简单的数据表：
- en: 'Create a subset of `poverty` containing only countries, from the year 2000,
    and containing columns that have `Country Name` or have the income share of the
    top and bottom 10% of the population. We use the `filter` method with a regular
    expression to achieve that:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含自2000年以来的`贫困`子集的应用，且该子集只包含具有`国家名称`或包含收入分布中前10%和后10%人口的列。我们使用`filter`方法配合正则表达式来实现这一点：
- en: '[PRE24]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Create an app in JupyterLab with a `layout` attribute:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 JupyterLab 中创建一个带有`layout`属性的应用：
- en: '[PRE25]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Pass a `DataTable` object to the div just created. As a minimum, a table requires
    values for the `data` parameter, as well as the `columns` parameter. One of the
    easiest ways to do this is by providing a dictionary converted from a DataFrame,
    using the `to_dict(''records'')` method. `columns` needs to be a list of dictionaries,
    where each dictionary contains the `name` and `id` keys. The name is what appears
    to users, and the ID is the value that will actually be used:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将一个`DataTable`对象传递给刚创建的 div。最基本的要求是表格需要提供`data`参数和`columns`参数的值。实现这一点的一个简单方法是通过将
    DataFrame 转换为字典，使用`to_dict('records')`方法。`columns`需要是一个字典列表，每个字典包含`name`和`id`键。`name`是用户看到的内容，`id`则是实际使用的值：
- en: '[PRE26]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Running this simple app with `app.run_server()` produces a table as you can
    see in *Figure 8.13*, showing the first few rows:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`app.run_server()`运行这个简单的应用，会产生一个表格，正如*图 8.13*所示，显示了前几行数据：
- en: '![Figure 8.13 – A simple DataTable](img/B16780_08_13.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.13 – 一个简单的数据表](img/B16780_08_13.jpg)'
- en: Figure 8.13 – A simple DataTable
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.13 – 一个简单的数据表
- en: Many times, your tables or column headers might not fit neatly in the container
    they are placed in. For example, in our case, many indicator names are extremely
    long, and their columns contain numbers that don't take much horizontal space.
    Let's explore some of the available options to handle this.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 很多时候，表格或列标题可能无法完美地适应其所在的容器。例如，在我们的案例中，许多指标名称非常长，而它们的列包含的数据数字并不占用太多水平空间。让我们探索一些可以处理这个问题的选项。
- en: Controlling the look and feel of the table (cell width, height, text display,
    and more)
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制表格的外观和感觉（单元格宽度、高度、文本显示等）
- en: There are numerous options available to modify how your tables look, and it's
    always good to consult the documentation for ideas and solutions. The potentially
    tricky part is when you have combinations of options. In some cases, these might
    modify each other and not be displayed exactly the way you want. So, it is always
    good to isolate the options as much as possible when debugging.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多选项可用于修改表格的外观，始终建议查阅文档以获取想法和解决方案。潜在的棘手之处在于当您有组合选项时。在某些情况下，这些选项可能会相互修改，并且可能不会显示出您想要的样子。因此，在调试时，尽可能隔离选项总是一个好习惯。
- en: 'In *Figure 8.13*, we displayed only three columns and the first few rows. We
    will now see how to display more columns and enable users to explore more rows:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图8.13*中，我们仅显示了三列和前几行。现在我们将看到如何显示更多列并让用户探索更多行：
- en: 'Modify `df` to include all columns that contain `Income share`:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`df`以包含所有包含`Income share`的列：
- en: '[PRE27]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Place the DataTable in a `dbc.Col` component with the desired width, `7` in
    this case. The table automatically takes the width of the container it is in,
    so this would set its width implicitly:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 DataTable 放在所需宽度为`7`的`dbc.Col`组件中。表格会自动采用其所在容器的宽度，因此这将隐式设置其宽度：
- en: '[PRE28]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'We now want to determine how the column headers will behave, especially as
    they have quite long names. This can be achieved with the `style_header` parameter.
    Note that there are several `style_` parameters for headers, cells, and tables,
    and they also have `_conditional` variants, for example, `style_cell_conditional`,
    to conditionally set the style of cells. We now specify the header style with
    the following option, to allow text to overflow into multiple lines when/if needed:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们想确定列标题的行为方式，特别是它们的名称相当长。这可以通过`style_header`参数实现。请注意，对于标题、单元格和表格，都有几个`style_`参数，它们还有`_conditional`变体，例如，`style_cell_conditional`，用于有条件地设置单元格的样式。我们现在使用以下选项指定标题样式，以允许文本在需要时溢出到多行：
- en: '[PRE29]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'We now want to make sure that while scrolling, the headers remain fixed in
    place:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们希望在滚动时，标题保持固定不动：
- en: '[PRE30]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'In order to control the height of the table as a whole, we can simply do so
    with the following parameter:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了控制整个表格的高度，我们可以简单地使用以下参数：
- en: '[PRE31]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'In cases where we have thousands of rows, it might be heavy and affect the
    performance of the page, so we can use `virtualization`. In our case, it is a
    very small table, but we can set `virtualization` to demonstrate its usage:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们有数千行的情况下，可能会很重，影响页面的性能，因此我们可以使用`virtualization`。在我们的情况下，这是一个非常小的表格，但我们可以设置`virtualization`来演示其用法：
- en: '[PRE32]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Putting the code together, here is the full code to generate the table:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 将代码放在一起，这是生成表格的完整代码：
- en: '[PRE33]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Running this modified code produces the table in *Figure 8.14*:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此修改后的代码会生成*图8.14*中的表格：
- en: '![Figure 8.14 – A DataTable with custom options for width, height, scrolling,
    and virtualization](img/B16780_08_14.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![图8.14 – 具有宽度、高度、滚动和虚拟化自定义选项的 DataTable](img/B16780_08_14.jpg)'
- en: Figure 8.14 – A DataTable with custom options for width, height, scrolling,
    and virtualization
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.14 – 具有宽度、高度、滚动和虚拟化自定义选项的 DataTable
- en: The scroll bar is only visible if the cursor is pointing there. It was kept
    for demonstration, and to make it clear that scrolling is enabled. Now users can
    see all the available rows by scrolling as much as they want. We will now see
    how to incorporate some interactivity with tables and add this to our app. We'll
    also use this as an opportunity to demonstrate a few other options available to
    the DataTable component.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 只有在光标指向那里时，滚动条才可见。它被保留用于演示，并清楚地表明滚动已启用。现在用户可以通过尽可能多地滚动来查看所有可用的行。我们现在将看到如何在表格中加入一些交互性，并将其添加到我们的应用程序中。我们还将利用这个机会演示
    DataTable 组件提供的一些其他选项。
- en: Adding histograms and tables to the app
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将直方图和表格添加到应用程序中
- en: We are now ready to incorporate the table functionality into our app and add
    it to the callback function that we already created. What we will do is display
    the data that is used to generate the histograms right under the histogram figure.
    Since the histograms don't show data points as we discussed (only aggregates),
    it might be interesting for users to see for themselves if they wish.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备将表格功能整合到我们的应用程序中，并将其添加到我们已经创建的回调函数中。我们将显示用于生成直方图的数据，就在直方图图下方。由于直方图不显示数据点（仅聚合），如果用户愿意，他们可能会对自己看到的数据感兴趣。
- en: 'Let''s add this functionality right away:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们立即添加这个功能：
- en: 'Add a new div right underneath the histogram figure:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在直方图图下方添加一个新的 div：
- en: '[PRE34]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Add this as an `Output` to the callback function:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此作为`Output`添加到回调函数中：
- en: '[PRE35]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Right after we finish the definition of our `Figure` object, we add the definition
    of our DataTable. We will be using the same options as before and adding a few
    new ones. We first add the ability to sort columns:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在完成`Figure`对象的定义后，我们添加了DataTable的定义。我们将使用之前相同的选项，并添加一些新的选项。首先，我们添加了对列进行排序的功能：
- en: '[PRE36]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Now, we add the ability to filter columns. This will add an empty box right
    under each column header. Users can enter text and hit *Enter* to get a filtered
    table:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们添加了对列进行筛选的功能。这将在每个列标题下方添加一个空框，用户可以输入文本并按*Enter*键获取筛选后的表格：
- en: '[PRE37]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Add the ability to export the table to CSV format:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加导出表格为CSV格式的功能：
- en: '[PRE38]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'We set a minimum width for cells to keep it consistent and avoid any formatting
    issues due to different columns'' headers:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们为单元格设置了最小宽度，以保持一致性，并避免由于不同列标题导致的格式问题：
- en: '[PRE39]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Finally, add the table to the `return` statement at the end of the function,
    so it returns two items instead of one:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将表格添加到函数末尾的`return`语句中，这样它就会返回两个项而不是一个：
- en: '[PRE40]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'As a result of adding this functionality, our updated app will contain the
    table that is being used to generate the histograms, and users can export it or
    interact with it if they want. *Figure 8.15* shows our app with the additional
    customized DataTable:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 由于添加了此功能，我们更新后的应用将包含用于生成直方图的表格，用户可以导出或与之互动。*图 8.15* 展示了添加了自定义 DataTable 的应用：
- en: '![Figure 8.15 – A DataTable showing the data used to generate the histograms](img/B16780_08_15.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.15 – 一个显示用于生成直方图的数据的 DataTable](img/B16780_08_15.jpg)'
- en: Figure 8.15 – A DataTable showing the data used to generate the histograms
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.15 – 一个显示用于生成直方图的数据的 DataTable
- en: We now have an **Export** button, which is clear and immediately triggers the
    download functionality in the browser. Header names now have arrows that allow
    users to sort, in an ascending or descending manner. You can also see the filtering
    option, with the **filter data…** placeholder text, which users can filter by.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有了一个**导出**按钮，用户一点击就会立即触发浏览器中的下载功能。标题名称现在有了可以让用户进行排序的箭头，支持升序或降序排序。你还可以看到筛选选项，并且有一个**筛选数据...**的占位符文本，用户可以按照此进行筛选。
- en: Now, in order to incorporate this functionality into our app, we simply have
    to copy the components where we want them to appear. As this can be thought of
    as exploratory functionality (users are still not digging deep into an indicator),
    it's probably good to have it under the map chart.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了将这个功能集成到我们的应用中，我们只需复制组件并将其放置在想要显示的位置。由于这可以被视为探索性功能（用户仍然不会深入了解指标），所以最好将其放在地图图表下方。
- en: To add the interactivity, we only have to add the callback function that we
    created, as we always do, after the layout of the app.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 为了添加交互性，我们只需要像往常一样，在应用布局后添加我们创建的回调函数。
- en: We have already done this many times, and it should be straightforward for you
    to do so.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经做过很多次了，这对你来说应该很简单。
- en: Our app is now getting really rich. We have two main exploratory interactive
    charts at the top. The maps allow users to select a metric and see its variation
    across countries on the map. They can also select the year and/or allow it to
    play like a video. The selected indicator triggers the display of descriptive
    text about it, for more context to users. Under that, we have the option of selecting
    an indicator and one or more years, to see how this indicator is distributed with
    histograms. Users can modify the number of bins to get an optimal view. This also
    updates the table they can interact with and export.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用现在变得非常丰富。顶部有两个主要的互动式探索图表。地图允许用户选择一个指标并查看其在不同国家的变化。用户还可以选择年份和/或让它像视频一样播放。所选的指标会触发关于该指标的描述性文本，以便为用户提供更多背景信息。在其下方，我们提供了选择一个或多个年份来查看该指标如何通过直方图分布的选项。用户可以修改柱数以获得最佳视图。这也会更新他们可以与之互动并导出的表格。
- en: After having explored the indicators of interest, users can go on to explore
    specific indicators using the three specialized charts that we created.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览过感兴趣的指标后，用户可以继续使用我们创建的三种专业图表来探索特定指标。
- en: Congratulations! We have now completed *Part 2* of the book, so it's good to
    review what we have done in the chapter, as well as *Part 2*, and get ready for
    *Part 3*.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！我们现在已经完成了*第2部分*的内容，应该回顾一下本章的内容，以及*第2部分*，为*第3部分*做好准备。
- en: Summary
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we first learned about the main difference between histograms
    and the other types of charts we have covered so far. We saw how easy it is to
    create them, and more importantly, we saw how customizable they can be with bins,
    `barmode`, colors, and facets. We then explored how to add interactivity to histograms
    by connecting them to other components with a callback function.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们首先了解了直方图与我们至今所讨论的其他类型图表之间的主要区别。我们看到了创建直方图的简便性，更重要的是，我们看到了它们在使用`barmode`、颜色、分箱和小面板等方面的高度自定义性。接着，我们探索了如何通过回调函数将直方图与其他组件连接起来，进而为直方图添加交互性。
- en: We then explored the 2D histogram and saw how it can provide an even richer
    view of two columns visualized against each other.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接着探索了二维直方图，并看到了它如何提供两个列之间更加丰富的可视化对比。
- en: We introduced a new interactive component, the DataTable. We barely scratched
    the surface of what can be done with tables. We used them to make it easier for
    users to obtain, interact with, or simply view the raw data behind our histograms.
    We also explored the different ways to control the look and feel of our tables.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 我们介绍了一个新的互动组件，DataTable。我们仅仅触及了表格功能的表面。我们使用它们让用户更容易获取、与之交互或仅仅查看我们直方图背后的原始数据。我们还探索了控制表格外观和感觉的不同方式。
- en: Finally, we incorporated the table functionality with the callback function
    we created and added the interactivity to our app.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将表格功能与我们创建的回调函数结合起来，并将互动性添加到我们的应用中。
- en: Let's now take a quick look at what we have covered so far in the book and prepare
    for *Part 3*.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们快速回顾一下到目前为止在本书中所学习的内容，并为*第三部分*做好准备。
- en: What we have covered so far
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 到目前为止我们已经覆盖的内容
- en: In the first part of the book, we covered the basics of Dash apps. We first
    explored how they are structured and how to manage the visual elements. Then,
    we explored how interactivity is created, which is mainly by using callback functions.
    This allowed us to create fully interactive apps. We then explored the structure
    of the `Figure` object and learned how to modify and manipulate it to generate
    the charts we desire. After that, we saw how important data manipulation and preparation
    are for data visualization. We went through a reshaping of our dataset, to make
    things more intuitive to work with. This paved the way for easily learning and
    using Plotly Express.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的第一部分，我们涵盖了Dash应用的基础知识。我们首先探索了它们的结构以及如何管理视觉元素。接着，我们探讨了如何创建交互性，主要通过使用回调函数。这样我们就可以创建完全互动的应用。随后，我们学习了`Figure`对象的结构，并了解了如何修改和操作它以生成我们需要的图表。之后，我们明白了数据处理和准备对于数据可视化的重要性。我们对数据集进行了重塑，使其更加直观易用。这为学习和使用Plotly
    Express铺平了道路。
- en: '*Part 2* was about getting thoroughly familiar with several types of charts,
    as well as interactive components. We implemented all the knowledge we built in
    *Part 1*, but most importantly, we did this in a practical setting. We gradually
    added more and more charts, components, and functionality to one app. At every
    step, we had to consider how it will affect the whole app and had to make sure
    we did so with a holistic view. You are now very familiar with making changes
    to many types of functionality. Although we didn''t cover every type of chart
    and component, the general principles are similar, and you can easily adapt the
    knowledge you have to new situations.'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '*第二部分*主要讲解了熟悉几种类型的图表以及互动组件。我们在*第一部分*中建立的所有知识都得到了应用，但最重要的是，我们是在一个实际的环境中进行的。我们逐渐将更多的图表、组件和功能添加到一个应用中。在每一步，我们都需要考虑这些变化将如何影响整个应用，并确保从整体的角度去实现。现在你已经非常熟悉如何更改多种功能。尽管我们没有涵盖每种图表和组件，但其通用原理是相似的，你可以轻松地将所学的知识应用到新的情况中。'
- en: '*Part 3* will move on to more general topics about apps, URLs, advanced callbacks,
    and deployment. But the next chapter will explore a few **machine learning** options.
    Our dataset contains many countries, years, and indicators, and the number of
    possible combinations to explore is massive. So, we will explore a few techniques
    that can help uncover trends or correlations in our data.'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '*第三部分*将讨论关于应用程序、URL、高级回调和部署等更一般性的主题。但接下来的章节将探讨一些**机器学习**的选项。我们的数据集包含许多国家、年份和指标，可能的组合数量庞大。因此，我们将探索一些有助于发现数据中趋势或关联的技术。'
