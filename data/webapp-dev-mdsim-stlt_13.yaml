- en: '13'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '13'
- en: Creating a Secure Login and Signup Process for Web Applications
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为Web应用程序创建安全的登录和注册过程
- en: Let’s continue our exploration of advanced techniques to make our web applications
    look professional and work well.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续探索一些高级技巧，让我们的网页应用看起来更专业、运行得更顺畅。
- en: In this chapter, we are going to learn how to implement a login and signup page
    made with **Secure Hash Algorithm 256** (**SHA-256**) encryption and connected
    to a database in a secure and user-friendly way. By adopting this approach, we
    will be able to authenticate our web app users and store their credentials permanently.
    The login and signup page typically consists of a form where users can enter their
    username and password to access the web application. When a user logs in, their
    credentials are hashed using SHA-256 and compared to the stored hash in the database
    (in this context, we are using **SQLite3**). If the hashes match, the user is
    authenticated and granted access to the application. The signup page allows new
    users to create an account by entering their desired username and password.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何实现一个登录和注册页面，该页面使用**安全散列算法 256**（**SHA-256**）加密，并以安全且用户友好的方式连接到数据库。通过采用这种方法，我们将能够验证我们的网页应用用户并永久存储他们的凭据。登录和注册页面通常由一个表单组成，用户可以在其中输入用户名和密码以访问网页应用。当用户登录时，他们的凭据会使用SHA-256进行哈希处理，并与数据库中存储的哈希值进行比较（在本例中，我们使用的是**SQLite3**）。如果哈希值匹配，用户将通过身份验证并获得访问应用的权限。注册页面允许新用户通过输入所需的用户名和密码来创建帐户。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主要内容：
- en: Understanding the logic behind the login and signup page
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解登录和注册页面背后的逻辑
- en: What is SHA-256 and why should we use it?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是SHA-256，为什么我们应该使用它？
- en: Connecting to a relational database and interacting with it
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接到关系型数据库并与其交互
- en: Retrieving or saving credentials from and to the database
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从数据库中检索或保存凭据
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'In this chapter, we’ll use the following libraries, packages, and tools:'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用以下库、包和工具：
- en: Sublime Text
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sublime Text
- en: Python 3
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 3
- en: '`pipenv`'
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pipenv`'
- en: Streamlit
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Streamlit
- en: Pillow
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pillow
- en: '`Sqlite3`'
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Sqlite3`'
- en: '`hashlib`'
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hashlib`'
- en: 'The code for this chapter can be found in this book’s GitHub repository: [https://github.com/PacktPublishing/Web-App-Development-Made-Simple-with-Streamlit/tree/main/Chapter13](https://github.com/PacktPublishing/Web-App-Development-Made-Simple-with-Streamlit/tree/main/Chapter13).'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章的代码可以在本书的GitHub仓库中找到：[https://github.com/PacktPublishing/Web-App-Development-Made-Simple-with-Streamlit/tree/main/Chapter13](https://github.com/PacktPublishing/Web-App-Development-Made-Simple-with-Streamlit/tree/main/Chapter13)。
- en: Understanding the logic behind the login and signup page
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解登录和注册页面背后的逻辑
- en: When a user creates an account on a website or application, they are typically
    asked to provide a username and password. The username is a unique identifier
    for the user, while the password is a secret that only the user should know.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户在网站或应用程序上创建帐户时，通常会要求提供用户名和密码。用户名是用户的唯一标识符，而密码是只有用户自己应该知道的秘密。
- en: The website or application then stores the username and password in a database.
    However, the password is not stored in plain text. Instead, it’s converted into
    a **hash**. A hash is a one-way function, meaning that it is easy to calculate
    the hash of a password, but it is very difficult to reverse the process and calculate
    the password from the hash.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 网站或应用程序随后将用户名和密码存储在数据库中。然而，密码不会以明文形式存储。相反，它会被转换为**哈希**。哈希是一种单向函数，这意味着计算密码的哈希值很容易，但反向操作、从哈希值计算密码却非常困难。
- en: This is done for security reasons. If a hacker were to gain access to the database,
    they would not be able to read the passwords in plain text. They would only be
    able to read the hashes. Even if the hacker knew the hashing algorithm used, it
    would still be very difficult for them to crack the password.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做是出于安全考虑。如果黑客获取了数据库的访问权限，他们将无法读取明文密码。他们只能读取哈希值。即使黑客知道使用的哈希算法，破解密码仍然是非常困难的。
- en: When a user logs in, they are asked to enter their username and password. The
    website or application then calculates the hash of the password that the user
    entered and compares it to the hash that is stored in the database. If the two
    hashes match, then the user is successfully logged in.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户登录时，他们需要输入用户名和密码。然后，网站或应用程序会计算用户输入密码的哈希值，并与数据库中存储的哈希值进行比较。如果两个哈希值匹配，用户便成功登录。
- en: 'Here is a step-by-step explanation of the logic behind the login and signup
    page:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是关于登录和注册页面背后逻辑的逐步解释：
- en: The user enters their username and password on the signup page.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户在注册页面输入他们的用户名和密码。
- en: The website or application converts the password into a hash.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 网站或应用程序将密码转换为哈希值。
- en: The website or application saves the username and password hash in the database.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 网站或应用程序将用户名和密码的哈希值保存到数据库中。
- en: The user is redirected to the login page.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户将被重定向到登录页面。
- en: The user enters their username and password on the login page.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户在登录页面输入他们的用户名和密码。
- en: The website or application calculates the hash of the password that the user
    entered and compares it to the hash that is stored in the database.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 网站或应用程序会计算用户输入的密码的哈希值，并将其与存储在数据库中的哈希值进行比较。
- en: If the two hashes match, then the user is successfully logged in.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果这两个哈希值匹配，用户就成功登录。
- en: If the two hashes do not match, then the user is not successfully logged in.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果这两个哈希值不匹配，用户就没有成功登录。
- en: 'There are a few reasons it is important to store the username and password
    hashes permanently in a database:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 将用户名和密码的哈希值永久存储在数据库中很重要，原因有几点：
- en: To allow users to log into their accounts
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许用户登录他们的账户
- en: To allow users to recover their passwords if they forget them
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许用户在忘记密码时恢复密码
- en: To prevent unauthorized access to user accounts
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预防未经授权访问用户账户
- en: If the username and password hashes were not stored permanently in a database,
    then users would not be able to log into their accounts or recover their passwords
    if they forgot them. Additionally, unauthorized users would be able to gain access
    to user accounts simply by guessing the correct username and password.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户名和密码的哈希值没有永久存储在数据库中，用户将无法登录账户或在忘记密码时恢复密码。此外，未经授权的用户也能通过猜测正确的用户名和密码来访问用户账户。
- en: It is important to note that even though passwords are stored as hashes in the
    database, it is still possible for hackers to crack them. However, it is much
    more difficult to crack a hash than it is to crack a plain text password.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，尽管密码以哈希值的形式存储在数据库中，但黑客仍然有可能破解它们。然而，破解哈希值比破解明文密码要困难得多。
- en: 'Here are some tips for creating strong passwords:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是创建强密码的一些提示：
- en: Use a mix of uppercase and lowercase letters, numbers, and symbols
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用大小写字母、数字和符号的组合
- en: Make your password at least 12 characters long
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请确保您的密码至少包含 12 个字符
- en: Avoid using common words or phrases in your password such as `qwerty`, `12345678`,
    `user`, `admin`, and so on
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免在密码中使用常见的单词或短语，例如`qwerty`、`12345678`、`user`、`admin`等
- en: Do not use your name, birthday, or other personal information in your password
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要在密码中使用您的名字、生日或其他个人信息
- en: Use a different password for each website or application that you use
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为每个网站或应用程序使用不同的密码
- en: At this point, the importance of a signup/login page should be clear, as well
    as the importance of avoiding weak passwords. It’s time to understand what a secure
    hash algorithm is.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，注册/登录页面的重要性应该已经很明确，同时也意识到避免使用弱密码的重要性。接下来是时候了解什么是安全哈希算法了。
- en: What is SHA-256 and why should we use it?
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 SHA-256，为什么我们应该使用它？
- en: SHA-256 is a cryptographic hash function that produces a 256-bit hash value
    from a data input. It is part of the *SHA-2 family of hash functions* (for more
    details, please check out [https://justcryptography.com/sha-2/](https://justcryptography.com/sha-2/))
    that were designed by the **National Security Agency** (**NSA**) and published
    by the **National Institute of Standards and Technology** (**NIST**) in 2001.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: SHA-256 是一种加密哈希函数，它根据数据输入生成一个 256 位的哈希值。它是*SHA-2 哈希函数族*的一部分（更多详情请查看[https://justcryptography.com/sha-2/](https://justcryptography.com/sha-2/)），该哈希函数族由**美国国家安全局**（**NSA**）设计，并由**美国国家标准与技术研究院**（**NIST**）于
    2001 年发布。
- en: 'SHA-256 is a widely used hash function for a variety of applications, including
    the following:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: SHA-256 是一种广泛使用的哈希函数，适用于多种应用场景，包括以下内容：
- en: '**Password storage**: SHA-256 is used to store passwords securely. When a user
    creates an account on a website or application, their password is converted into
    an SHA-256 hash and stored in the database. When the user logs in, their password
    is converted into an SHA-256 hash and compared to the hash stored in the database.
    If the two hashes match, then the user is successfully logged in.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**密码存储**：SHA-256用于安全地存储密码。当用户在网站或应用程序上创建帐户时，密码会被转换为SHA-256哈希并存储在数据库中。当用户登录时，他们的密码会被转换为SHA-256哈希，并与存储在数据库中的哈希进行比较。如果两个哈希匹配，则用户成功登录。'
- en: '**Digital signatures**: SHA-256 can be used to create digital signatures. A
    **digital signature** is a cryptographic technique that allows the sender of a
    message to verify their identity and the integrity of the message. To create a
    digital signature, the sender calculates the SHA-256 hash of the message and then
    encrypts the hash with their private key. The sender then sends the message and
    the encrypted hash to the recipient. The recipient calculates the SHA-256 hash
    of the message and then decrypts the encrypted hash with the sender’s public key.
    If the two hashes match, then the recipient can be sure that the message is authentic
    and has not been tampered with.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数字签名**：SHA-256可以用来创建数字签名。**数字签名**是一种加密技术，允许消息的发送者验证自己的身份和消息的完整性。为了创建数字签名，发送者计算消息的SHA-256哈希，然后用他们的私钥加密该哈希。然后，发送者将消息和加密的哈希一起发送给接收者。接收者计算消息的SHA-256哈希，并用发送者的公钥解密加密的哈希。如果两个哈希匹配，则接收者可以确认消息是有效的且没有被篡改。'
- en: '**File integrity verification**: SHA-256 can be used to verify the integrity
    of files. To do this, the SHA-256 hash of the file is calculated and then stored.
    When the file is needed, the SHA-256 hash of the file is calculated again and
    compared to the stored hash. If the two hashes match, then the file is known to
    be intact.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文件完整性验证**：SHA-256可以用来验证文件的完整性。为此，首先计算文件的SHA-256哈希并存储起来。当需要文件时，再次计算该文件的SHA-256哈希，并与存储的哈希进行比较。如果两个哈希匹配，则文件被认为是完整的。'
- en: SHA-256 is considered to be a very secure hash function. It is resistant to
    collision attacks, meaning that it is very difficult to find two different inputs
    that produce the same hash value. It is also resistant to preimage attacks, meaning
    that it is very difficult to find the input that produces a given hash value.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: SHA-256被认为是一个非常安全的哈希函数。它能抵抗碰撞攻击，这意味着很难找到两个不同的输入产生相同的哈希值。它还能够抵抗预映像攻击，即很难找到一个输入，产生给定的哈希值。
- en: 'Here are some reasons why you should use SHA-256:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是使用SHA-256的一些理由：
- en: It is a very secure hash function
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它是一个非常安全的哈希函数
- en: It is widely used and supported
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它被广泛使用并得到支持
- en: It is relatively easy to implement
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它相对容易实现
- en: It is free to use
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它是免费的
- en: If you need a secure way to store passwords, create digital signatures, or verify
    the integrity of files, then SHA-256 is a good choice.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要一种安全的方式来存储密码、创建数字签名或验证文件的完整性，那么SHA-256是一个不错的选择。
- en: 'Now that we have all the information we need, let’s start coding. As usual,
    we have to follow some typical steps to set up a new virtual environment:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经拥有了所有需要的信息，让我们开始编码。像往常一样，我们必须遵循一些典型的步骤来设置一个新的虚拟环境：
- en: Create a new directory named `Login_Skeleton`.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Login_Skeleton`的新目录。
- en: Enter this directory and write `pipenv shell` to create a new virtual environment.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入这个目录并输入`pipenv shell`来创建一个新的虚拟环境。
- en: Install the `streamlit` and `pillow` packages.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装`streamlit`和`pillow`包。
- en: Create a new empty Python file named `app.py`.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`app.py`的空Python文件。
- en: Launch your IDE (Sublime Text).
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动你的IDE（Sublime Text）。
- en: '*Figure 13**.1* shows all these steps, from creating the new directory to installing
    the required libraries:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 13.1* 显示了从创建新目录到安装所需库的所有步骤：'
- en: '![Figure 13.1: Virtual environment and app.py file preparation](img/B21147_12_011.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.1: 虚拟环境与app.py文件准备](img/B21147_12_011.jpg)'
- en: 'Figure 13.1: Virtual environment and app.py file preparation'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '图 13.1: 虚拟环境与app.py文件准备'
- en: Now, we are ready to edit the Python code in the `app.py` file.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们准备编辑`app.py`文件中的Python代码。
- en: 'Inside Sublime Text, we can start writing the code for our new login/signup
    web app, as shown in *Figure 13**.2*:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在Sublime Text中，我们可以开始为我们新的登录/注册网页应用编写代码，如*图 13.2*所示：
- en: '![Figure 13.2: Starting code](img/B21147_12_021.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.2: 启动代码](img/B21147_12_021.jpg)'
- en: 'Figure 13.2: Starting code'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.2：启动代码
- en: 'The preceding code should be quite familiar. Here’s a breakdown of what we
    did:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码应该非常熟悉。以下是我们所做的事情的分解：
- en: At the very beginning, on *lines 1* and *2*, we import the necessary libraries
    – in this case, `streamlit` and `Pillow`.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一开始，在*第1行*和*第2行*，我们导入所需的库——在这种情况下是`streamlit`和`Pillow`。
- en: 'After that, on *line 5*, we create a `main()` function:'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 之后，在*第5行*，我们创建了一个`main()`函数：
- en: In the `main()` function, we write some HTML code in the `html_temp` variable
    (*line 8*) to set a big title in the web app that specifies the background color,
    the padding, and the text color
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`main()`函数中，我们在`html_temp`变量（*第8行*）中编写一些HTML代码，以设置Web应用中的大标题，指定背景颜色、内边距和文本颜色
- en: Then, we visualize the HTML code using the `st.markdown` instruction (*line
    14*)
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，我们使用`st.markdown`指令可视化HTML代码（*第14行*）
- en: Next, we create a list on *line 16* that contains the voices of the menu we
    want to visualize and add a selectbox in the sidebar on the left-hand side of
    the screen.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来，我们在*第16行*创建一个包含我们想要显示的菜单选项的列表，并在屏幕左侧的侧边栏中添加一个选择框。
- en: 'Then, we check the selection (*line 19*) and if it is `Home`, we do something:
    at the moment, we just write some text in the `subheader` format. Meanwhile, if
    the selection is `Login` *(line 25*), we pass (we will develop the code for this
    in the *Creating the Login menu* subsection); the same goes for `Signup` (*line
    28*).'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，我们检查选择项（*第19行*），如果它是`Home`，我们做某些事情：目前，我们只是将一些文本写入`subheader`格式。同时，如果选择项是`Login`（*第25行*），我们跳过（我们将在*创建登录菜单*小节中开发这部分代码）；`Signup`（*第28行*）也是如此。
- en: Finally, we add an `About` section (*line 32*), where we are free to write anything
    we want.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我们添加了一个`About`部分（*第32行*），在这里我们可以自由地写任何我们想写的内容。
- en: Please note that in the `st.image` instruction. This image, named `login.png`,
    must be present in the same directory as the `app.py` file, as shown in the `Folder`
    section of the editor in *Figure 13**.2*.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在`st.image`指令中，这张名为`login.png`的图片必须与`app.py`文件位于同一目录中，如*图13.2*中的编辑器的`Folder`部分所示。
- en: 'As usual, when we execute the following command, the web application will be
    executed:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 和往常一样，当我们执行以下命令时，Web应用程序将被执行：
- en: '[PRE0]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The result in the browser is quite simple and clean:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器中的结果非常简单和干净：
- en: '![Figure 13.3: The login/signup web app in the browser](img/B21147_13_03.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图13.3：浏览器中的登录/注册Web应用](img/B21147_13_03.jpg)'
- en: 'Figure 13.3: The login/signup web app in the browser'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.3：浏览器中的登录/注册Web应用
- en: On the left, we have the sidebar with the menu, while in the middle, there is
    the **Home** section with a beautiful picture.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在左侧，我们有带有菜单的侧边栏，而中间是**Home**部分，里面有一张漂亮的图片。
- en: The skeleton is ready. Now, it’s time to connect our web app to a database so
    that we can save all username/password data and use it at the proper time.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 框架已经准备好。现在是时候将我们的Web应用程序连接到数据库，以便我们可以保存所有的用户名/密码数据并在合适的时候使用它。
- en: Connecting to a relational database and interacting with it
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接到关系数据库并与之交互
- en: 'As explained in the *Understanding the logic behind the login and signup page*
    section, we want to save the accounts in a database. So, we have to import the
    database libraries. As mentioned previously, we are using a **SQLite3** database.
    So, first of all, let’s install its Python library by typing the following:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 正如在*理解登录和注册页面背后的逻辑*部分中解释的那样，我们希望将账户信息保存在数据库中。因此，我们必须导入数据库库。如前所述，我们使用的是**SQLite3**数据库。所以，首先，让我们通过输入以下命令来安装它的Python库：
- en: '[PRE1]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Then, simply import the library by writing `import sqlite3` in our `app.py`
    file.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，只需通过在`app.py`文件中写入`import sqlite3`来导入该库。
- en: Making a SQLite3 database work for us is a quite simple task. For this, we need
    to open a *connection* to the database by specifying its name (in our case, `userdata.db`)
    as an argument and creating a *cursor* to execute operations in it.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 让SQLite3数据库为我们工作是一个非常简单的任务。为此，我们需要通过指定数据库的名称（在我们的例子中是`userdata.db`）作为参数来打开一个*连接*，并创建一个*游标*来执行其中的操作。
- en: 'On *lines 6* and *7* in *Figure 13**.4*, the connection and cursor are created:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第6行*和*第7行*中（在*图13.4*中），连接和游标被创建：
- en: '![Figure 13.4: The connection to the database and its cursor](img/B21147_13_04.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图13.4：连接到数据库及其游标](img/B21147_13_04.jpg)'
- en: 'Figure 13.4: The connection to the database and its cursor'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.4：连接到数据库及其游标
- en: 'To recap, the *connection* (`conn`) opens a connection to the database while
    the *cursor* (`c`) makes it possible to operate inside the database. Essentially,
    we need three different operations:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，*连接*（`conn`）打开与数据库的连接，而*游标*（`c`）使我们能够在数据库中进行操作。本质上，我们需要三个不同的操作：
- en: Table creation
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表格创建
- en: Data insertion
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据插入
- en: Data retrieval
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据检索
- en: 'The best way to implement these operations is to create a specific function
    dedicated to each of these operations, as shown in the following figure:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 实现这些操作的最佳方式是为每个操作创建一个专门的函数，如下图所示：
- en: '![Figure 13.5: The database functions](img/B21147_13_05.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.5：数据库函数](img/B21147_13_05.jpg)'
- en: 'Figure 13.5: The database functions'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.5：数据库函数
- en: 'Let’s take a closer look at these three functions:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们仔细看看这三个函数：
- en: The first one is named `create_table`. Simply put, this function creates a table
    named `userstable`, but only if this table is not already present in the database.
    The `userstable` table has two columns named `username` and `password`, each of
    which contains text. It’s important to understand that the `CREATE TABLE` instruction
    is given to the database using the cursor we created in *Figure 13**.4*. So, the
    cursor, leveraging the opened connection, makes it possible to *deliver* operations
    (or functions) to the database.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个函数名为`create_table`。简单来说，这个函数创建一个名为`userstable`的表，但仅当该表在数据库中不存在时才会创建。`userstable`表有两列，分别是`username`和`password`，每列都包含文本类型的数据。需要理解的是，`CREATE
    TABLE`指令是通过我们在*图 13.4*中创建的光标传递给数据库的。因此，光标利用打开的连接，使得我们能够将操作（或函数）传递给数据库。
- en: 'The second function is named `add_data` because it oversees data insertion
    or values inside the `userstable` table we created with the `create_table` function.
    So, we pass two values to the `add_data` function – a username and a password
    – as an argument and it inserts these two values in the `userstable` table in
    the following order: the username value in the `username` column and the password
    value in the `password` column. Once again, the cursor oversees carrying out the
    instruction. `conn.commit()` is extremely important because, without this *commit*,
    the new username and values won’t be stored in the database.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个函数名为`add_data`，因为它负责在我们通过`create_table`函数创建的`userstable`表中插入数据或值。因此，我们将两个值——用户名和密码——作为参数传递给`add_data`函数，它按以下顺序将这两个值插入到`userstable`表中：将用户名值插入到`username`列，将密码值插入到`password`列。同样，光标负责执行该指令。`conn.commit()`非常重要，因为如果没有这个*commit*，新的用户名和数据将不会被存储到数据库中。
- en: 'The third function is named `login_user` and, similar to the `add_data` function,
    has two arguments: `username` and `password`. It takes these two values and looks
    for them inside the `userstable` table, then retrieves (`fetchall`) all the results
    and puts them in a variable named `data`. This `data` variable is returned as
    the final output of the function. In this way, it is possible to check when a
    username and a password are present in the database. Once again, the cursor oversees
    carrying out the commands.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三个函数名为`login_user`，与`add_data`函数类似，它有两个参数：`username`和`password`。它接收这两个值并在`userstable`表中查找，然后检索（`fetchall`）所有结果并将它们放入一个名为`data`的变量中。这个`data`变量作为函数的最终输出返回。通过这种方式，我们可以检查用户名和密码是否存在于数据库中。同样，光标负责执行这些命令。
- en: With these three functions ready, we can move on to the `app.py` file.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这三个函数，我们可以继续处理`app.py`文件。
- en: Creating the Login menu
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建登录菜单
- en: 'First, we need a couple of text inputs, one for the username and one for the
    password, after which we can put them in the sidebar. So, let’s add two new lines,
    as shown on *lines 46* and *47* in the following figure:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要两个文本输入框，一个用于用户名，一个用于密码，然后我们可以将它们放入侧边栏中。接下来，我们在以下图示的*第46行*和*第47行*中添加两行代码：
- en: '![Figure 13.6: Text input for username and password](img/B21147_13_06.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.6：用户名和密码的文本输入框](img/B21147_13_06.jpg)'
- en: 'Figure 13.6: Text input for username and password'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.6：用户名和密码的文本输入框
- en: 'Upon specifying `type=''password''` on *line 47*, the password we type will
    be hidden; by clicking on the *eye* icon, we can see the password clearly in the
    browser, as shown in the following figure:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第47行*指定`type='password'`后，我们输入的密码将被隐藏；点击*眼睛*图标，我们可以在浏览器中清楚地看到密码，如下图所示：
- en: '![Figure 13.7: The password is hidden](img/B21147_13_07.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.7：密码是隐藏的](img/B21147_13_07.jpg)'
- en: 'Figure 13.7: The password is hidden'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.7：密码是隐藏的
- en: 'At this point, the logic behind the login should be quite clear: we insert
    a username and a password and look for them in the database to understand whether
    a specific user is allowed to log into our app or not.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，登录的逻辑应该已经相当清晰：我们输入用户名和密码，并在数据库中查找它们，以了解特定用户是否被允许登录我们的应用程序。
- en: 'As usual, let’s have a look at the code that performs this function:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 和往常一样，让我们看一下执行此功能的代码：
- en: '![Figure 13.8: The “Login” section’s code](img/B21147_13_08.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![图13.8：登录部分的代码](img/B21147_13_08.jpg)'
- en: 'Figure 13.8: The “Login” section’s code'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.8：登录部分的代码
- en: 'Here’s a breakdown of what the code in *Figure* *13**.8* does:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这是图*13*.*8*中代码的详细说明：
- en: On *line 49*, we added a checkbox; when it is selected, a new subheading is
    printed in the `main` section of the web app.
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在*第49行*，我们添加了一个复选框；当它被选中时，在Web应用的`main`部分打印一个新的副标题。
- en: After that, on *line 51*, the `create_table` function, which we described previously,
    is executed. In this way, a new table named `userstable` will be created in the
    database, but only if it doesn’t exist already.
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在此之后，*第51行*，我们执行了前面描述的`create_table`函数。这样，一个名为`userstable`的新表将被创建在数据库中，但仅当它不存在时。
- en: On *line 53*, the `login_user` function is executed, with the username and password
    that were inputted using the two `text_inputs` widgets on *lines 46* and *47*
    as arguments.
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在*第53行*，执行`login_user`函数，并使用*第46*和*第47行*上的两个`text_inputs`小部件输入的用户名和密码作为参数。
- en: If the result of the data fetching is positive, we print the **Logged in...**
    message with *success* and show a selectbox with a couple of tasks (just some
    placeholders); otherwise, we print a *warning* stating the **Incorrect** **Username/Password**
    message.
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果数据获取的结果是积极的，我们将打印带有*成功*标志的**已登录...**消息，并显示一个带有一些占位符的选择框；否则，我们将打印一个*警告*，指出**用户名/密码不正确**消息。
- en: If you try to log in now, you’ll get the **Incorrect Username/Password** message
    since no data is present in the database.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如果现在尝试登录，您将收到**用户名/密码不正确**消息，因为数据库中没有数据。
- en: To populate the database, we must implement the `SignUp` function. Let’s see
    how.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 要填充数据库，我们必须实现`SignUp`函数。让我们看看如何实现。
- en: Creating the Sign Up menu
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建注册菜单
- en: 'The logic is the same as that for the `Login` function but we must make a couple
    of changes, as shown in the following code:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑与`Login`函数相同，但我们必须进行一些更改，如下面的代码所示：
- en: '![Figure 13.9: The “SignUp” section code](img/B21147_13_09.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![图13.9：注册部分的代码](img/B21147_13_09.jpg)'
- en: 'Figure 13.9: The “SignUp” section code'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.9：注册部分的代码
- en: 'Here’s a breakdown of what we did:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我们所做的事情的详细说明：
- en: On *lines 66* and *67*, we have two `text_input` widgets to collect the username
    and the password, but this time, we are putting them in the `main` section of
    the web app and not in the sidebar.
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在*第66*和*第67行*，我们有两个`text_input`小部件来收集用户名和密码，但这次，我们将它们放在Web应用程序的`main`部分而不是侧边栏中。
- en: After that, on *line 68*, we add a button with a label of `Sign Up`. When this
    button is pushed, we execute the `create_table` function (we must ensure that
    the `userstable` table exists; otherwise, we will get a runtime error).
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在此之后，*第68行*，我们添加一个带有`Sign Up`标签的按钮。当按下此按钮时，我们执行`create_table`函数（我们必须确保`userstable`表存在；否则，我们将获得运行时错误）。
- en: On *line 71*, we execute the `add_data` function. We’ve already explained this
    function (see *Figure 13**.5*), so we know that by passing the username and password
    that have been inputted by the `text_input` widgets to it, we create a new record
    in the database. This new record will contain the new username and password.
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在*第71行*，我们执行了`add_data`函数。我们已经解释过这个函数（参见*图13.5*），所以我们知道通过将`text_input`小部件输入的用户名和密码传递给它，我们在数据库中创建了一个新记录。这个新记录将包含新的用户名和密码。
- en: Finally, on *line 73*, we print a beautiful *success* message to confirm the
    creation of the account.
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，在*第73行*，我们打印一个美丽的*成功*消息来确认帐户的创建。
- en: Let’s see the web application in action.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看Web应用程序的实际操作。
- en: Running the app
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行应用程序
- en: 'In the menu, select `user1`, and a password, such as `12345` (please remember
    that during real usage, you should use a stronger password):'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在菜单中选择`user1`，以及密码，例如`12345`（请记住，在实际使用中，您应该使用更强的密码）：
- en: "![Figure 13.10: \uFEFFUsing Sign Up to create a new account](img/B21147_13_10.jpg)"
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![图13.10：使用注册创建新帐户](img/B21147_13_10.jpg)'
- en: 'Figure 13.10: Using Sign Up to create a new account'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.10：使用注册创建新帐户
- en: Then, click on the **Sign Up** button; you’ll get a **You have successfully
    created an** **Account** message.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，点击**Sign Up**按钮；您将收到一个**您已成功创建一个帐户**消息。
- en: With that, we have inserted our first account into our database. This means
    we can try to log in.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，我们已经将我们的第一个帐户插入到我们的数据库中。这意味着我们可以尝试登录。
- en: 'Select **Login** from the menu, type the username (**user1**) and password
    (**12345**), and enter the web application. We’ll get a **Logged in as: user1**
    message and the list of tasks (I repeat, these are just placeholders):'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 从菜单中选择**登录**，输入用户名（**user1**）和密码（**12345**），并进入网页应用。我们会看到**登录为：user1**的消息和任务列表（我重复一下，这些只是占位符）：
- en: '![Figure 13.11: Using “Login” to enter the web application](img/B21147_13_11.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.11：使用“登录”进入网页应用](img/B21147_13_11.jpg)'
- en: 'Figure 13.11: Using “Login” to enter the web application'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.11：使用“登录”进入网页应用
- en: 'When we try to log in with an incorrect username or password, we get the following
    output:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们尝试使用错误的用户名或密码登录时，系统会显示以下输出：
- en: '![Figure 13.12: Logging in with the wrong username/password](img/B21147_13_12.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.12：使用错误的用户名/密码登录](img/B21147_13_12.jpg)'
- en: 'Figure 13.12: Logging in with the wrong username/password'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.12：使用错误的用户名/密码登录
- en: We typed `user100`, but this username is not present in the database, so it
    is not possible to log in. We cannot enter the web application and for this reason,
    we cannot see the list of tasks.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们输入了 `user100`，但该用户名在数据库中不存在，因此无法登录。我们无法进入网页应用，因此无法查看任务列表。
- en: The web application is working very well. Next, we’ll add a nice graphical user
    interface to our app.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 网页应用运行得非常顺利。接下来，我们将为我们的应用添加一个漂亮的图形用户界面。
- en: Adding a graphical user interface
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加图形用户界面
- en: 'From the command line, please install **DB Browser for SQLite**, a very nice
    graphical interface for managing SQLite databases. Type the following instruction:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令行中，请安装**SQLite 的 DB 浏览器**，这是一个非常好用的 SQLite 数据库管理图形界面。输入以下命令：
- en: '[PRE2]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Once the installation has finished, please launch the application; a graphical
    user interface, as shown in the following figure, should appear:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，请启动应用程序；图形用户界面将如以下图所示：
- en: '![Figure 13.13: DB Browser for SQLite](img/B21147_13_13.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.13：SQLite 的 DB 浏览器](img/B21147_13_13.jpg)'
- en: 'Figure 13.13: DB Browser for SQLite'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.13：SQLite 的 DB 浏览器
- en: 'With that, we are ready to open the database we created in our web app:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们就可以准备好打开在我们网页应用中创建的数据库了：
- en: Click on **File** | **Open Database**.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**文件** | **打开数据库**。
- en: 'As shown in the `Login_Skeleton` directory, there is a file named `userdata.db`.
    Select it and open it:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如 `Login_Skeleton` 目录所示，其中有一个名为 `userdata.db` 的文件。选择它并打开：
- en: '![Figure 13.14: Opening the userdata.db database](img/B21147_13_14.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.14：打开 userdata.db 数据库](img/B21147_13_14.jpg)'
- en: 'Figure 13.14: Opening the userdata.db database'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.14：打开 userdata.db 数据库
- en: 'You should see your database’s structure, as shown in the following figure:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能看到你数据库的结构，如下图所示：
- en: '![Figure 13.15: The database’s structure](img/B21147_13_15.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.15：数据库结构](img/B21147_13_15.jpg)'
- en: 'Figure 13.15: The database’s structure'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.15：数据库结构
- en: 'As we know, the database has a table named `userstable`, and this table has
    two text columns: `username` and `password`.'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所知，数据库中有一个名为 `userstable` 的表，该表有两列文本：`username` 和 `password`。
- en: Select the `Browse` `Data` tag.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 `Browse` `Data` 标签。
- en: 'As shown in the following figure, the `userstable` table contains the account
    we created previously – the one where the username is equal to **user1** and the
    password is equal to **12345**:'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如下图所示，`userstable` 表包含我们之前创建的账户——用户名为 **user1**，密码为 **12345**：
- en: '![Figure 13.16: The account saved in our table](img/B21147_13_16.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.16：我们表格中保存的账户](img/B21147_13_16.jpg)'
- en: 'Figure 13.16: The account saved in our table'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.16：我们表格中保存的账户
- en: 'There is one big problem related to security here: the password is in *plain
    text*. Anybody that can access the `userdata.db` file in our database can read
    it. This is the reason why we must introduce hashing encryption in our code –
    to make it almost impossible for anybody to discover our passwords in such an
    easy way. We’ll see how in the next section.'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个与安全性相关的大问题：密码是*明文*存储的。任何能够访问我们数据库中 `userdata.db` 文件的人都可以读取它。这就是我们必须在代码中引入哈希加密的原因——为了让任何人几乎不可能以这么简单的方式发现我们的密码。我们将在下一节中看到如何做。
- en: Retrieving or saving credentials from and to the database
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从数据库中获取或保存凭据
- en: From a theoretical point of view, we have already discussed what a hash is and
    why we should use one. From a practical point of view, there are many Python packages
    available (for example, `sha256` and `pycrypto`), but one of the easiest to use
    that’s also very effective is `hashlib`. This library is installed in Python by
    default, so we don’t have to install it in our virtual environment; all we have
    to do is import it into our `app.py` file.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 从理论角度来看，我们已经讨论了哈希是什么，以及为什么我们需要使用哈希。从实践角度来看，有很多Python库可以使用（例如，`sha256`和`pycrypto`），但最容易使用且非常有效的是`hashlib`。这个库在Python中默认安装，因此我们不需要在虚拟环境中安装它；只需将其导入到`app.py`文件中即可。
- en: While leveraging `hashlib`, all we need to do is use its `sha256` method to
    create the hash encryption of the password. Once again, let me highlight that
    *SHA-256* is a very strong form of encryption from a security perspective.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在利用`hashlib`时，我们只需使用它的`sha256`方法来创建密码的哈希加密。再次强调，*SHA-256*从安全角度来看是一种非常强大的加密方式。
- en: 'These are the new lines of code we need for the hashing process:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是我们需要的哈希处理过程中的新代码行：
- en: '![Figure 13.17: The make_hashes function](img/B21147_13_17.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![图13.17：make_hashes函数](img/B21147_13_17.jpg)'
- en: 'Figure 13.17: The make_hashes function'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.17：make_hashes函数
- en: 'Here’s a breakdown of what we did:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是我们所做的操作的分解：
- en: On *line 5*, we imported `hashlib`.
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在*第5行*，我们导入了`hashlib`。
- en: 'On *lines 12* and *13*, we created a new function named `make_hashes`. This
    function has just one input argument: the password. This password is passed to
    the `sha256` method, which creates a hashing from it. This hashing is converted
    into hexadecimal and returned.'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在*第12行*和*第13行*，我们创建了一个新函数`make_hashes`。这个函数只有一个输入参数：密码。这个密码被传递给`sha256`方法，生成哈希值。该哈希值会被转换为十六进制并返回。
- en: As we know, there is no way to decode a hashing. This means that once we convert
    the password into a hash, we cannot convert it back again. So, to complete the
    authentication/login of a user, we must type the password into `text_input`, convert
    it into its hashing, and compare the result with the hashing stored in the database.
    If the two hash codes are the same, this means that the inputted password is correct;
    otherwise, it is different from the saved one.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所知，哈希值是无法解码的。这意味着，一旦我们将密码转换为哈希，就无法再将其转换回来。因此，为了完成用户的身份验证/登录，我们必须在`text_input`中输入密码，将其转换为哈希，然后将结果与数据库中存储的哈希进行比较。如果两个哈希码相同，则意味着输入的密码正确；否则，表示密码与保存的密码不同。
- en: 'Implementing this procedure requires us to make a few modifications to our
    code:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 实现此过程需要对我们的代码进行一些修改：
- en: First, we must convert the inputted password into a hashing. This can be done
    using the `make_hashes` function we just discussed.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们必须将输入的密码转换为哈希。这可以通过我们刚才讨论的`make_hashes`函数来完成。
- en: Then, we need to compare this hashing with the one saved in the database.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们需要将这个哈希值与数据库中保存的哈希进行比较。
- en: 'The first code change affects the **Login** section, as shown in the following
    figure:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个代码更改影响了**登录**部分，如下图所示：
- en: '![Figure 13.18: The hashing of the inputted password](img/B21147_13_18.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![图13.18：输入密码的哈希处理](img/B21147_13_18.jpg)'
- en: 'Figure 13.18: The hashing of the inputted password'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.18：输入密码的哈希处理
- en: 'Here’s what we are doing in the preceding code:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们在前面的代码中所做的事情：
- en: On *line 60*, we make a hash of the inputted password.
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在*第60行*，我们对输入的密码进行哈希处理。
- en: On *line 61*, leveraging the `check_hashes` `function`, we compare the hashed
    password with the one (with the hashing) saved in the database. If they are the
    same, then the login process is successful.
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在*第61行*，利用`check_hashes`函数，我们将哈希过的密码与数据库中保存的哈希密码进行比较。如果它们相同，则表示登录过程成功。
- en: 'Let’s write the `check_hashes` function; the code is very short, as shown in
    the following figure:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编写`check_hashes`函数；代码非常简短，如下图所示：
- en: '![Figure 13.19: The “check_hashes” function](img/B21147_13_19.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![图13.19：“check_hashes”函数](img/B21147_13_19.jpg)'
- en: 'Figure 13.19: The “check_hashes” function'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.19：“check_hashes”函数
- en: 'Here’s what we are doing in the preceding code:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们在前面的代码中所做的事情：
- en: 'On *line 15*, we define the new function, which has only two arguments: a password
    (clear text) and the hashed text (the hashing of the password saved in the database).'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在*第15行*，我们定义了一个新函数，只有两个参数：密码（明文）和哈希文本（保存在数据库中的密码哈希）。
- en: On *line 16*, we can see that if the hashing of the password (which we get using
    the `make_hashes` function) is the same as the one stored in the database, we
    return the hashed text (the hashed version of the password); otherwise, we return
    `False`.
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在*第16行*，我们可以看到，如果密码的哈希值（通过`make_hashes`函数得到）与数据库中存储的哈希值相同，我们将返回哈希文本（密码的哈希版本）；否则，我们将返回`False`。
- en: So, moving back to *line 61* of the code shown in *Figure 13**.18*, when `check_hashes`
    returns the hashed password, the `result` variable is `True` and the code enters
    the `success` part of the `if` cycle. Otherwise, when `check_hashes` returns `False`,
    the `result` variable is `False` as well, and the code enters in the `else` part
    of the `if` cycle, denying the login.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，回到*图13.18*中显示的*第61行*代码，当`check_hashes`返回哈希密码时，`result`变量为`True`，代码进入`if`循环的`success`部分。否则，当`check_hashes`返回`False`时，`result`变量也为`False`，代码进入`if`循环的`else`部分，拒绝登录。
- en: Now, if we try to log into the web application using the account we saved previously
    (**user1**, **12345**), we’ll fail and get a warning. The reason is that in our
    database, we saved the password without introducing the hashing, so the password
    is stored in clear text.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们尝试使用之前保存的账户（**user1**，**12345**）登录到Web应用程序，我们将失败并收到警告。原因是，在我们的数据库中，我们保存的密码没有进行哈希处理，因此密码是以明文存储的。
- en: 'To complete all the login/signup web application coding, we must change the
    **SignUp** section a little bit, making sure that the passwords of the accounts
    are saved in their own hashing version:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成所有的登录/注册Web应用程序代码，我们必须稍微修改**注册**部分，确保账户的密码以哈希版本保存：
- en: '![Figure 13.20: The final “SignUp” section](img/B21147_13_20.jpg)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.20：最终的“注册”部分](img/B21147_13_20.jpg)'
- en: 'Figure 13.20: The final “SignUp” section'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.20：最终的“注册”部分
- en: 'Here’s what we are doing in the preceding code:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们在前面的代码中所做的操作：
- en: On *line 84*, we create the hashing of the inputted password
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在*第84行*，我们创建了输入密码的哈希值
- en: On *line 85*, we save it in the database, together with its related username
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在*第85行*，我们将其与相关的用户名一起保存到数据库中
- en: 'At this point, we’ve finished coding. We can try out the entire set of features
    of the web application, starting with creating a new account with a username of
    `user2` and a password of `09876`:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，我们已经完成了编码。我们可以尝试使用Web应用程序的全部功能，从创建一个用户名为`user2`、密码为`09876`的新账户开始：
- en: '![Figure 13.21: Creating a new account](img/B21147_13_21.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.21：创建新账户](img/B21147_13_21.jpg)'
- en: 'Figure 13.21: Creating a new account'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.21：创建新账户
- en: 'As we can see, in the database browser, the new password has been saved as
    a hashing code:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，在数据库浏览器中，新密码已经作为哈希代码被保存：
- en: '![Figure 13.22: The new password in its hashing version](img/B21147_13_22.jpg)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.22：新密码的哈希版本](img/B21147_13_22.jpg)'
- en: 'Figure 13.22: The new password in its hashing version'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.22：新密码的哈希版本
- en: Anybody who gets the database file can read its content but cannot understand
    what the password is since getting the plain text from the hashing is quite impossible.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 任何获取数据库文件的人都可以读取其内容，但无法理解密码是什么，因为从哈希值中获取明文密码几乎是不可能的。
- en: 'Let’s try to log in:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试登录：
- en: '![Figure 13.23: Logging in with the new account](img/B21147_13_23.jpg)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.23：使用新账户登录](img/B21147_13_23.jpg)'
- en: 'Figure 13.23: Logging in with the new account'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.23：使用新账户登录
- en: 'The inputted password is converted into its hash and compared with the one
    stored in the database; since the two hashes match, we get the following result:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 输入的密码被转换为哈希值，并与存储在数据库中的哈希值进行比较；由于两个哈希值匹配，我们得到了以下结果：
- en: '![Figure 13.24: The login was successful](img/B21147_13_24.jpg)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.24：登录成功](img/B21147_13_24.jpg)'
- en: 'Figure 13.24: The login was successful'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.24：登录成功
- en: The login process has been completed with success, and the user can access the
    application’s tasks.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 登录过程已成功完成，用户可以访问应用程序的任务。
- en: It’s very interesting to understand that even if the given text differs in a
    very small element from another, its hashing will be completely different. Add
    another account to the database, this time with a password such as `09875`, and
    check how different its hashing is from the one coming from the `09876` password.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 很有趣的是，理解即使给定的文本与另一个文本只有微小差异，它的哈希值也会完全不同。向数据库中添加另一个账户，这次使用密码如`09875`，并检查它的哈希值与来自`09876`密码的哈希值有多么不同。
- en: 'This chapter was full of complex information, but the result we got is very
    valuable: a complete app skeleton that can be used in all our web applications
    that need to manage signing up, logging in, hashing, and saving data permanently
    in a database.'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 本章充满了复杂的信息，但我们得到的结果非常有价值：一个完整的应用骨架，可以用于所有需要管理注册、登录、哈希和永久保存数据的网页应用。
- en: 'As usual, here is all the code we developed:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 一如既往，以下是我们开发的所有代码：
- en: '![Figure 13.25: Signup/login skeleton – part 1](img/B21147_13_25.jpg)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.25: 注册/登录骨架 – 第1部分](img/B21147_13_25.jpg)'
- en: 'Figure 13.25: Signup/login skeleton – part 1'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '图 13.25: 注册/登录骨架 – 第1部分'
- en: In the first part of the code, we started importing the libraries (*lines 1-5*)
    and then created the connection and the cursor to the database (*lines 6-7*).
    After that, we imported the `hashlib` library (*line 10*) and created the `make_hashes`
    and `check_hashes` functions (*lines 12* and *15*). On *lines 22* and *26*, we
    defined two functions to create new tables and add data to the database, and on
    *line 31*, we defined the function that manages user login.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码的第一部分，我们开始导入库（*第1-5行*），然后创建了与数据库的连接和游标（*第6-7行*）。之后，我们导入了`hashlib`库（*第10行*）并创建了`make_hashes`和`check_hashes`函数（*第12行*和*第15行*）。在*第22行*和*第26行*，我们定义了两个函数，用于创建新表并向数据库添加数据，而在*第31行*，我们定义了管理用户登录的函数。
- en: 'On *line 37*, we defined the `main` function, introduced some HTML code just
    to make the app more beautiful, and implemented the application menu:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第37行*，我们定义了`main`函数，添加了一些HTML代码以使应用更美观，并实现了应用程序菜单：
- en: '![Figure 13.26: Signup/login skeleton – part 2](img/B21147_13_26.jpg)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.26: 注册/登录骨架 – 第2部分](img/B21147_13_26.jpg)'
- en: 'Figure 13.26: Signup/login skeleton – part 2'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '图 13.26: 注册/登录骨架 – 第2部分'
- en: In the second part of the code, we managed the menu. So, if the user selects
    **Login**, we implement the proper code (*lines 57-74*). When the user selects
    **Sign Up**, we implement the code dedicated to this function (*lines 77-87*).
    Finally, on *line 90*, we have the **About** section.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码的第二部分，我们管理了菜单。因此，如果用户选择**登录**，我们实现了相应的代码（*第57-74行*）。当用户选择**注册**时，我们实现了专门处理此功能的代码（*第77-87行*）。最后，在*第90行*，我们有**关于**部分。
- en: This chapter is very important because an application almost always needs to
    manage accounts and therefore usernames and passwords. To accomplish this task
    properly, encrypting the password very securely is the key.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 本章非常重要，因为一个应用几乎总是需要管理账户，因此需要用户名和密码。为了正确完成这项任务，加密密码非常安全是关键。
- en: Summary
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we understood the logic behind login and signup pages and learned
    a very solid way of implementing and managing accounts according to the best practices
    summarized here.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们理解了登录和注册页面背后的逻辑，并根据这里总结的最佳实践学到了一个非常可靠的账户实现和管理方式。
- en: When users sign up on our web apps, they provide a username and a password.
    The username serves as their unique identifier, while the password is a secret
    known only to them. For security, these credentials are stored in a database,
    but the passwords are not kept as plain text. Instead, they are converted into
    a hash, a one-way function that is easy to compute from a password but hard to
    reverse. This ensures that even if a hacker accesses the database, they can’t
    easily decipher the passwords.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户在我们的网页应用中注册时，他们提供用户名和密码。用户名作为唯一标识符，而密码是只有用户自己知道的秘密。为了安全起见，这些凭证存储在数据库中，但密码不会以明文形式保存。相反，它们会被转换为哈希值，这是一种从密码中容易计算但难以逆转的单向函数。这确保了即使黑客访问了数据库，他们也无法轻易破解密码。
- en: During login, the user’s entered password is hashed and compared with the stored
    hash; if they match, the user is granted access. Storing these hashes is crucial
    for allowing users to log in and recover passwords. Although hacking these hashes
    is possible, it is much more difficult than cracking plain text passwords.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在登录过程中，用户输入的密码会被哈希处理并与存储的哈希值进行比较；如果匹配，用户将获得访问权限。存储这些哈希值对于允许用户登录和恢复密码至关重要。尽管破解这些哈希值是可能的，但比破解明文密码要困难得多。
- en: Implementing robust business code is the main target of any web application
    since by doing this, it is possible to address any kind of problem that the code
    is supposed to solve. Giving customers more beautiful interfaces, well-designed
    applications, and very customized tools is another key skill that a real web application
    designer should have. This is exactly what we are going to discuss in the next
    chapter.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 实现强健的业务代码是任何Web应用程序的主要目标，因为通过这样做，可以解决代码应当解决的任何问题。为客户提供更美观的界面、设计精良的应用程序以及高度定制的工具，是一个真正的Web应用程序设计师应该具备的另一项关键技能。这正是我们将在下一章讨论的内容。
