- en: Visualizing Online Data
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可视化在线数据
- en: At this point, we have already covered the basics of creating and customizing
    plots using Matplotlib. In this chapter, we begin the journey of understanding
    more advanced Matplotlib usage through examples in specialized topics.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经介绍了使用 Matplotlib 创建和定制图表的基础知识。在本章中，我们将通过在专门主题中的示例，开始了解更高级的 Matplotlib
    使用方法。
- en: 'When considering the visualization of a concept, the following important factors
    have to be considered carefully:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在考虑可视化某个概念时，需要仔细考虑以下重要因素：
- en: Source of the data
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据来源
- en: Filtering and data processing
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据过滤和处理
- en: 'Choosing the right plot type for the data:'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择适合数据的图表类型：
- en: 'Visualizing the trend of data:'
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可视化数据趋势：
- en: Line chart, area chart, and stacked area chart
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 折线图、区域图和堆叠区域图
- en: 'Visualizing univariate distribution:'
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可视化单变量分布：
- en: Bar chart, histogram, and kernel density estimation
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 条形图、直方图和核密度估计图
- en: 'Visualizing bivariate distribution:'
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可视化双变量分布：
- en: Scatter plot, KDE density chart, and hexbin chart
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 散点图、KDE 密度图和六边形图
- en: 'Visualizing categorical data:'
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可视化类别数据：
- en: Categorical scatter plot, box plot, swarm plot, violin plot
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类别散点图、箱线图、蜂群图、小提琴图
- en: Adjusting figure aesthetics for effective storytelling
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调整图形美学以有效讲述故事
- en: We will cover these topics via the use of demographic and financial data. First,
    we will discuss typical data formats when we fetch data from the **Application
    Programming Interface** (**API**). Next, we will explore how we can integrate
    Matplotlib 2.0 with other Python packages such as Pandas, Scipy, and Seaborn for
    the visualization of different data types.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过使用人口统计和财务数据来讨论这些主题。首先，我们将讨论从 **应用程序编程接口**（**API**）获取数据时的典型数据格式。接下来，我们将探索如何将
    Matplotlib 2.0 与 Pandas、Scipy 和 Seaborn 等其他 Python 包结合使用，以实现不同数据类型的可视化。
- en: Typical API data formats
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常见的 API 数据格式
- en: Many websites offer their data via an API, which bridges applications via standardized
    architecture. While we are not going to cover the details of using APIs here as
    site-specific documentation is usually available online; we will show you the
    three most common data formats as used in many APIs.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 许多网站通过 API 提供数据，API 是通过标准化架构连接应用程序的桥梁。虽然我们这里不打算详细讨论如何使用 API，因为网站特定的文档通常可以在线找到；但我们将展示在许多
    API 中使用的三种最常见的数据格式。
- en: CSV
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSV
- en: '**CSV** (**Comma-Separated Values**) is one of the oldest file formats, which
    was introduced long before the internet even existed. However, it is now becoming
    deprecated as other advanced formats, such as JSON and XML, are gaining popularity.
    As the name suggests, data values are separated by commas. The preinstalled `csv` package
    and the `pandas` package contain classes to read and write data in CSV format.
    This CSV example defines a population table with two countries:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSV**（**逗号分隔值**）是最古老的文件格式之一，它在互联网存在之前就已经被引入。然而，随着其他高级格式如 JSON 和 XML 的流行，CSV
    格式现在逐渐被淘汰。顾名思义，数据值由逗号分隔。预安装的 `csv` 包和 `pandas` 包包含读取和写入 CSV 格式数据的类。这个 CSV 示例定义了一个包含两个国家的总人口表：'
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: JSON
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JSON
- en: '**JSON** (**JavaScript Object Notation**) is gaining popularity these days
    due to its efficiency and simplicity. JSON allows the specification of number,
    string, Boolean, array, and object. Python provides the default `json` package
    for parsing JSON. Alternatively, the `pandas.read_json` class can be used to import
    JSON as a Pandas dataframe. The preceding population table can be represented
    as JSON in the following example:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**JSON**（**JavaScript 对象表示法**）因其高效性和简洁性，近年来越来越受欢迎。JSON 允许指定数字、字符串、布尔值、数组和对象。Python
    提供了默认的 `json` 包来解析 JSON。另外，`pandas.read_json` 类可以用于将 JSON 导入为 Pandas 数据框。前面的总人口表可以通过以下
    JSON 示例表示：'
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: XML
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: XML
- en: '**XML** (**eXtensible Markup Language**) is the Swiss Army knife of data formats,
    and it has become the default container for Microsoft Office, Apple iWork, XHTML,
    SVG, and more. XML''s versatility comes with a price, as it makes XML verbose
    and slower. There are several ways to parse XML in Python, but `xml.etree.ElementTree`
    is recommended due to its Pythonic interface, backed by an efficient C backend.
    We are not going to cover XML parsing in this book, but good tutorials exist elsewhere
    (such as [http://eli.thegreenplace.net/2012/03/15/processing-xml-in-python-with-elementtree](http://eli.thegreenplace.net/2012/03/15/processing-xml-in-python-with-elementtree)).'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**XML**（**可扩展标记语言**）是数据格式中的瑞士军刀，已成为 Microsoft Office、Apple iWork、XHTML、SVG
    等的默认容器。XML 的多功能性有其代价，因为它使得 XML 变得冗长且较慢。Python 中有多种解析 XML 的方法，但建议使用 `xml.etree.ElementTree`，因为它提供了
    Python 风格的接口，并且有高效的 C 后端支持。本书不打算介绍 XML 解析，但其他地方有很好的教程（例如 [http://eli.thegreenplace.net/2012/03/15/processing-xml-in-python-with-elementtree](http://eli.thegreenplace.net/2012/03/15/processing-xml-in-python-with-elementtree)）。'
- en: 'As an example, the same population table can be transformed into XML:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，相同的人口表可以转换为 XML 格式：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Introducing pandas
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 pandas
- en: 'Beside NumPy and SciPy, pandas is one of the most common scientific computing
    libraries for Python. Its authors aim to make pandas the most powerful and flexible
    open source data analysis and manipulation tool available in any language, and
    in fact, they are almost achieving that goal. Its powerful and efficient library
    is a perfect match for data scientists. Like other Python packages, Pandas can easily be
    installed via PyPI:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 NumPy 和 SciPy，pandas 是 Python 中最常见的科学计算库之一。其作者旨在使 pandas 成为任何语言中最强大、最灵活的开源数据分析和处理工具，实际上，他们几乎实现了这一目标。其强大且高效的库与数据科学家的需求完美契合。像其他
    Python 包一样，Pandas 可以通过 PyPI 轻松安装：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: First introduced in version 1.5, Matplotlib supports the use of pandas DataFrame
    as the input in various plotting classes. Pandas DataFrame is a powerful two-dimensional
    labeled data structure that supports indexing, querying, grouping, merging, and
    some other common relational database operations. DataFrame is similar to spreadsheets
    in the sense that each row of the DataFrame contains different variables of an
    instance, while each column contains a vector of a specific variable across all
    instances.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Matplotlib 在 1.5 版本中首次引入，支持将 pandas DataFrame 作为输入应用于各种绘图类。Pandas DataFrame
    是一种强大的二维标签数据结构，支持索引、查询、分组、合并以及其他一些常见的关系数据库操作。DataFrame 类似于电子表格，因为 DataFrame 的每一行包含一个实例的不同变量，而每一列则包含一个特定变量在所有实例中的向量。
- en: pandas DataFrame supports heterogeneous data types, such as string, integer,
    and float. By default, rows are indexed sequentially and columns are composed
    of pandas Series. Optional row labels or column labels can be specified through
    the index and columns attributes.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: pandas DataFrame 支持异构数据类型，如字符串、整数和浮点数。默认情况下，行按顺序索引，列由 pandas Series 组成。可以通过
    index 和 columns 属性指定可选的行标签或列标签。
- en: Importing online population data in the CSV format
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导入在线人口数据（CSV 格式）
- en: 'Let''s begin by looking at the steps to import an online CSV file as a pandas
    DataFrame. In this example, we are going to use the annual population summary
    published by the Department of Economic and Social Affairs, United Nations, in
    2015\. Projected population figures towards 2100 were also included in the dataset:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先来看一下将在线 CSV 文件导入 pandas DataFrame 的步骤。在这个例子中，我们将使用联合国经济和社会事务部在 2015 年发布的年度人口总结数据集。该数据集还包含了面向
    2100 年的人口预测数据：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The expected output of the code is shown here:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的预期输出如下所示：
- en: '| **LocID** | **Location** | **VarID** | **Variant** | **Time** | **MidPeriod**
    | **SexID** | **Sex** | **AgeGrp** | **AgeGrpStart** | **AgeGrpSpan** | **Value**
    |  |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| **LocID** | **Location** | **VarID** | **Variant** | **Time** | **MidPeriod**
    | **SexID** | **Sex** | **AgeGrp** | **AgeGrpStart** | **AgeGrpSpan** | **Value**
    |  |'
- en: '| **0** | 4 | Afghanistan | 2 | Medium | 1950 | 1950.5 | 1 | Male | 0-4 | 0
    | 5 | 630.044 |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| **0** | 4 | 阿富汗 | 2 | 中等 | 1950 | 1950.5 | 1 | 男性 | 0-4 | 0 | 5 | 630.044
    |'
- en: '| **1** | 4 | Afghanistan | 2 | Medium | 1950 | 1950.5 | 1 | Male | 5-9 | 5
    | 5 | 516.205 |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| **1** | 4 | 阿富汗 | 2 | 中等 | 1950 | 1950.5 | 1 | 男性 | 5-9 | 5 | 5 | 516.205
    |'
- en: '| **2** | 4 | Afghanistan | 2 | Medium | 1950 | 1950.5 | 1 | Male | 10-14 |
    10 | 5 | 461.378 |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| **2** | 4 | 阿富汗 | 2 | 中等 | 1950 | 1950.5 | 1 | 男性 | 10-14 | 10 | 5 | 461.378
    |'
- en: '| **3** | 4 | Afghanistan | 2 | Medium | 1950 | 1950.5 | 1 | Male | 15-19 |
    15 | 5 | 414.368 |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| **3** | 4 | 阿富汗 | 2 | 中等 | 1950 | 1950.5 | 1 | 男性 | 15-19 | 15 | 5 | 414.368
    |'
- en: '| **4** | 4 | Afghanistan | 2 | Medium | 1950 | 1950.5 | 1 | Male | 20-24 |
    20 | 5 | 374.110 |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| **4** | 4 | 阿富汗 | 2 | 中等 | 1950 | 1950.5 | 1 | 男性 | 20-24 | 20 | 5 | 374.110
    |'
- en: The `pandas.read_csv` class is extremely versatile, supporting column headers,
    custom delimiters, various compressed formats (for example, `.gzip`, `.bz2`, `.zip`,
    and `.xz`), different text encodings, and much more. Readers can consult the documentation
    page ([http://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_csv.html](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_csv.html))
    for more information.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`pandas.read_csv` 类极为多功能，支持列标题、自定义分隔符、各种压缩格式（例如，`.gzip`、`.bz2`、`.zip` 和 `.xz`）、不同的文本编码等。读者可以参考文档页面（[http://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_csv.html](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_csv.html)）获取更多信息。'
- en: By calling the `.head()` function of the Pandas DataFrame object, we can quickly
    observe the first five rows of the data.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调用 Pandas DataFrame 对象的 `.head()` 函数，我们可以快速查看数据的前五行。
- en: As we progress through this chapter, we are going to integrate this population
    dataset with other datasets in Quandl. However, Quandl uses three-letter country
    codes (ISO 3166 alpha-3) to denote geographical locations; therefore we need to
    reformat the location names accordingly.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将把这个人口数据集与 Quandl 中的其他数据集合并。不过，Quandl 使用三字母国家代码（ISO 3166 alpha-3）来表示地理位置；因此我们需要相应地重新格式化地点名称。
- en: 'The `pycountry` package is an excellent choice for conversion of country names
    according to ISO 3166 standards. Similarly, `pycountry` can be installed through
    PyPI:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`pycountry` 包是根据 ISO 3166 标准转换国家名称的优秀选择。同样，`pycountry` 可以通过 PyPI 安装：'
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Continuing the previous code example, we are going to add a new `country` column
    to the dataframe:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 继续之前的代码示例，我们将为数据框添加一个新的 `country` 列：
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The expected output of the code is shown here:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的预期输出如下所示：
- en: '| **-** | **LocID** | **Location** | **VarID** | **Variant** | **Time** | **MidPeriod**
    | **SexID** | **Sex** | **AgeGrp** | **AgeGrpStart** | **AgeGrpSpan** | **Value**
    | **country** |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| **-** | **LocID** | **Location** | **VarID** | **Variant** | **Time** | **MidPeriod**
    | **SexID** | **Sex** | **AgeGrp** | **AgeGrpStart** | **AgeGrpSpan** | **Value**
    | **country** |'
- en: '| 0 | 4 | Afghanistan | 2 | Medium | 1950 | 1950.5 | 1 | Male | 0-4 | 0 | 5
    | 630.044 | AFG |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 4 | 阿富汗 | 2 | 中等 | 1950 | 1950.5 | 1 | 男性 | 0-4 | 0 | 5 | 630.044 | AFG
    |'
- en: '| 1 | 4 | Afghanistan | 2 | Medium | 1950 | 1950.5 | 1 | Male | 5-9 | 5 | 5
    | 516.205 | AFG |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 4 | 阿富汗 | 2 | 中等 | 1950 | 1950.5 | 1 | 男性 | 5-9 | 5 | 5 | 516.205 | AFG
    |'
- en: '| 2 | 4 | Afghanistan | 2 | Medium | 1950 | 1950.5 | 1 | Male | 10-14 | 10
    | 5 | 461.378 | AFG |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 4 | 阿富汗 | 2 | 中等 | 1950 | 1950.5 | 1 | 男性 | 10-14 | 10 | 5 | 461.378
    | AFG |'
- en: '| 3 | 4 | Afghanistan | 2 | Medium | 1950 | 1950.5 | 1 | Male | 15-19 | 15
    | 5 | 414.368 | AFG |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 4 | 阿富汗 | 2 | 中等 | 1950 | 1950.5 | 1 | 男性 | 15-19 | 15 | 5 | 414.368
    | AFG |'
- en: '| 4 | 4 | Afghanistan | 2 | Medium | 1950 | 1950.5 | 1 | Male | 20-24 | 20
    | 5 | 374.110 | AFG |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| 4 | 4 | 阿富汗 | 2 | 中等 | 1950 | 1950.5 | 1 | 男性 | 20-24 | 20 | 5 | 374.110
    | AFG |'
- en: Importing online financial data in the JSON format
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导入在线财务数据（JSON 格式）
- en: In this chapter, we will also draw upon financial data from Quandl's API to
    create insightful visualizations. If you are not familiar with Quandl, it is a
    financial and economic data warehouse that stores millions of datasets from hundreds
    of publishers. The best thing about Quandl is that these datasets are delivered
    via the unified API, without worrying about the procedures to parse the data correctly.
    Anonymous users can get up to 50 API calls per day, and you get up to 500 free
    API calls if you are a registered user. Readers can sign up for a free API key
    at [https://www.quandl.com/?modal=register](https://www.quandl.com/?modal=register).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们还将利用 Quandl 的 API 提取财务数据，并创建有洞察力的可视化图表。如果你不熟悉 Quandl，它是一个财务和经济数据仓库，存储了来自数百家出版商的数百万个数据集。Quandl
    最棒的地方在于，这些数据集通过统一的 API 进行交付，无需担心如何正确解析数据。匿名用户每天可以进行最多 50 次 API 调用，注册用户可获得最多 500
    次免费的 API 调用。读者可以在[https://www.quandl.com/?modal=register](https://www.quandl.com/?modal=register)注册免费
    API 密钥。
- en: At Quandl, every dataset is identified by a unique ID, as defined by the Quandl
    Code on each search result webpage. For example, the Quandl code GOOG/NASDAQ_SWTX
    defines the historical NASDAQ index data published by Google Finance. Every dataset
    is available in three formats--CSV, JSON, and XML.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Quandl 中，每个数据集都有一个唯一的 ID，这个 ID 在每个搜索结果网页上由 Quandl Code 定义。例如，Quandl 代码 GOOG/NASDAQ_SWTX
    定义了 Google 财务发布的历史 NASDAQ 指数数据。每个数据集有三种格式可用——CSV、JSON 和 XML。
- en: 'Although an official Python client library is available from Quandl, we are
    not going to use that for the sake of demonstrating the general procedures of
    importing JSON data. According to Quandl''s documentation, we can fetch JSON formatted
    data tables through the following API call:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Quandl提供了官方的Python客户端库，但为了演示导入JSON数据的一般过程，我们将不使用它。根据Quandl的文档，我们可以通过以下API调用获取JSON格式的数据表：
- en: '`GET https://www.quandl.com/api/v3/datasets/{Quandl code}/data.json`'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`GET https://www.quandl.com/api/v3/datasets/{Quandl code}/data.json`'
- en: Let's try to get the Big Mac index data from Quandl.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试从Quandl获取巨无霸指数数据。
- en: '[PRE7]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The expected output is as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 预期的输出如下：
- en: '| - | **Date** | **local_price** | **dollar_ex** | **dollar_price** | **dollar_ppp**
    | **dollar_valuation** | **dollar_adj_valuation** | **euro_adj_valuation** | **sterling_adj_valuation**
    | **yen_adj_valuation** | **yuan_adj_valuation** | **country** |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| - | **日期** | **本地价格** | **美元汇率** | **美元价格** | **美元PPP** | **美元估值** | **美元调整估值**
    | **欧元调整估值** | **英镑调整估值** | **日元调整估值** | **人民币调整估值** | **国家** |'
- en: '| **0** | 2017-01-31 | 55.0 | 15.85750 | 3.468390 | 10.869565 | -31.454736
    | 6.26715 | 8.26976 | 29.6269 | 32.7146 | 13.6258 | ARG |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| **0** | 2017-01-31 | 55.0 | 15.85750 | 3.468390 | 10.869565 | -31.454736
    | 6.26715 | 8.26976 | 29.6269 | 32.7146 | 13.6258 | 阿根廷 |'
- en: '| **1** | 2016-07-31 | 50.0 | 14.93500 | 3.347841 | 9.920635 | -33.574590 |
    2.07261 | 0.402248 | 17.5645 | 19.7638 | 11.6431 | ARG |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| **1** | 2016-07-31 | 50.0 | 14.93500 | 3.347841 | 9.920635 | -33.574590 |
    2.07261 | 0.402248 | 17.5645 | 19.7638 | 11.6431 | 阿根廷 |'
- en: '| **2** | 2016-01-31 | 33.0 | 13.80925 | 2.389703 | 6.693712 | -51.527332 |
    -24.8619 | -18.714 | -18.7209 | 0.40859 | -17.029 | ARG |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| **2** | 2016-01-31 | 33.0 | 13.80925 | 2.389703 | 6.693712 | -51.527332 |
    -24.8619 | -18.714 | -18.7209 | 0.40859 | -17.029 | 阿根廷 |'
- en: '| **3** | 2015-07-31 | 28.0 | 9.13500 | 3.065134 | 5.845511 | -36.009727 |
    -4.7585 | -0.357918 | -6.01091 | 30.8609 | 5.02868 | ARG |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| **3** | 2015-07-31 | 28.0 | 9.13500 | 3.065134 | 5.845511 | -36.009727 |
    -4.7585 | -0.357918 | -6.01091 | 30.8609 | 5.02868 | 阿根廷 |'
- en: '| **4** | 2015-01-31 | 28.0 | 8.61000 | 3.252033 | 5.845511 | -32.107881 |
    0.540242 | -0.804495 | -2.49468 | 34.3905 | 6.01183 | ARG |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| **4** | 2015-01-31 | 28.0 | 8.61000 | 3.252033 | 5.845511 | -32.107881 |
    0.540242 | -0.804495 | -2.49468 | 34.3905 | 6.01183 | 阿根廷 |'
- en: The Big Mac index was invented by The Economist in 1986 as a lighthearted guide
    to check whether currencies are at their correct level. It is based on the theory
    of **purchasing power parity** (**PPP**) and is considered an informal measure
    of currency exchange rates at PPP. It measures their value against a similar basket
    of goods and services, in this case, a Big Mac. Differing prices at market exchange
    rates would imply that one currency is undervalued or overvalued.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 巨无霸指数是《经济学人》于1986年发明的，用来轻松检查货币是否在正确的水平。它基于**购买力平价**（**PPP**）理论，并被认为是货币汇率在PPP下的非正式衡量标准。它通过与类似商品和服务的价格对比来衡量货币的价值，在这种情况下，是巨无霸的价格。市场汇率下不同的价格意味着某种货币被低估或高估。
- en: The code for parsing JSON from the Quandl API is a bit more complicated, and
    thus extra explanations might help you to understand it. The first function, `get_bigmac_codes()`,
    parses the list of all available dataset codes in the Quandl Economist database
    as a pandas DataFrame. Meanwhile, the second function, `get_quandl_dataset(api_key,
    code)`, converts the JSON response of a Quandl dataset API query to a pandas DataFrame.
    All datasets obtained are concatenated using `pandas.concat()`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 从Quandl API解析JSON的代码稍微复杂一些，因此额外的解释可能有助于你理解它。第一个函数`get_bigmac_codes()`解析Quandl
    Economist数据库中所有可用数据集代码的列表，并将其作为pandas DataFrame返回。与此同时，第二个函数`get_quandl_dataset(api_key,
    code)`将Quandl数据集API查询的JSON响应转换为pandas DataFrame。所有获取的数据集都通过`pandas.concat()`进行拼接。
- en: Visualizing the trend of data
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可视化数据趋势
- en: Once we have imported the two datasets, we can set out on a further visualization
    journey. Let's begin by plotting the world population trends from 1950 to 2017\.
    To select rows based on the value of a column, we can use the following syntax: `df[df.variable_name
    == "target"]` or `df[df['variable_name'] == "target"]`, where `df` is the dataframe
    object. Other conditional operators, such as larger than > or smaller than <,
    are also supported. Multiple conditional statements can be chained together using
    the "and" operator &, or the "or" operator |.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们导入了这两个数据集，就可以开始进一步的可视化之旅。让我们从绘制1950年到2017年的全球人口趋势开始。为了根据某一列的值选择行，我们可以使用以下语法：`df[df.variable_name
    == "target"]`或`df[df['variable_name'] == "target"]`，其中`df`是数据框对象。其他条件运算符，如大于 >
    或小于 <，也支持。可以使用“与”运算符&或“或”运算符|将多个条件语句链在一起。
- en: 'To aggregate the population across all age groups within a year, we are going
    to rely on `df.groupby().sum()`, as shown in the following example:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 为了聚合某一年内所有年龄组的人口数据，我们将依赖 `df.groupby().sum()`，如以下示例所示：
- en: '[PRE8]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![](img/f5dd839a-cb94-48c2-a532-bf2005cf3771.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f5dd839a-cb94-48c2-a532-bf2005cf3771.png)'
- en: Area chart and stacked area chart
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 区域图和堆叠区域图
- en: 'Sometimes, we may want to shade the area under the line plot with color for
    a greater visual impact. This can be achieved via the `fill_between` class:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们可能希望通过为线图下方的区域填充颜色来增加视觉冲击力。可以通过 `fill_between` 类来实现这一点：
- en: '[PRE9]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: By default, `fill_between` shades the region between `y=0` and the line when
    `y2` is not specified. More complex shading behavior can be specified using the
    where, interpolate, and step keyword arguments. Readers can refer to the following
    link for more information: [https://matplotlib.org/examples/pylab_examples/fill_between_demo.html.](https://matplotlib.org/examples/pylab_examples/fill_between_demo.html)
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，当未指定 `y2` 时，`fill_between` 会为 `y=0` 和曲线之间的区域着色。可以通过使用 `where`、`interpolate`
    和 `step` 等关键字参数来指定更复杂的着色行为。读者可以通过以下链接获取更多信息：[https://matplotlib.org/examples/pylab_examples/fill_between_demo.html](https://matplotlib.org/examples/pylab_examples/fill_between_demo.html)
- en: 'Let''s try to plot a more detailed chart by separating the two genders. We
    are going to explore the relative contribution of males and females towards the
    population growth. To do that, we can prepare a stacked area chart using the `stackplot`
    class:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试通过区分男女来绘制一个更详细的图表。我们将探讨男性和女性对人口增长的相对贡献。为此，我们可以使用 `stackplot` 类绘制堆叠区域图：
- en: '[PRE10]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![](img/a7eff28b-2fbb-4d2a-91f5-66abcfebd085.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a7eff28b-2fbb-4d2a-91f5-66abcfebd085.png)'
- en: Introducing Seaborn
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 Seaborn
- en: Seaborn by Michael Waskom is a statistical visualization library that is built
    on top of Matplotlib. It comes with handy functions for visualizing categorical
    variables, univariate distributions, and bivariate distributions. For more complex
    plots, various statistical methods such as linear regression models and clustering
    algorithms are available. Like Matplotlib, Seaborn also supports Pandas dataframes
    as input, plus automatically performing the necessary slicing, grouping, aggregation,
    and statistical model fitting to produce informative figures.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Seaborn 是由 Michael Waskom 开发的一个统计可视化库，建立在 Matplotlib 之上。它提供了用于可视化类别变量、单变量分布和双变量分布的便捷函数。对于更复杂的图表，提供了多种统计方法，如线性回归模型和聚类算法。像
    Matplotlib 一样，Seaborn 也支持 Pandas 数据框作为输入，并自动进行必要的切片、分组、聚合以及统计模型拟合，从而生成有用的图形。
- en: 'These Seaborn functions aim to bring publication-quality figures through an
    API with a minimal set of arguments, while maintaining the full customization
    capabilities of Matplotlib. In fact, many functions in Seaborn return a Matplotlib
    axis or grid object when invoked. Therefore, Seaborn is a great companion of Matplotlib.
    To install Seaborn through PyPI, you can issue the following command in the terminal:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这些 Seaborn 函数旨在通过最小化的参数集，通过 API 创建出版级质量的图形，同时保持 Matplotlib 完整的自定义功能。事实上，Seaborn
    中的许多函数在调用时会返回一个 Matplotlib 轴或网格对象。因此，Seaborn 是 Matplotlib 的得力伙伴。要通过 PyPI 安装 Seaborn，可以在终端中运行以下命令：
- en: '[PRE11]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Seaborn will be imported as `sns` throughout this book. This section will not
    be a documentation of Seaborn. Rather our goal is to give a high-level overview
    of Seaborn's capabilities from the perspective of Matplotlib users. Readers can
    refer to the official Seaborn site ([http://seaborn.pydata.org/index.html](http://seaborn.pydata.org/index.html))
    for more information.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Seaborn 将在本书中以 `sns` 导入。本节不会是 Seaborn 的文档，而是从 Matplotlib 用户的角度，概述 Seaborn 的功能。读者可以访问
    Seaborn 的官方网站 ([http://seaborn.pydata.org/index.html](http://seaborn.pydata.org/index.html))
    获取更多信息。
- en: Visualizing univariate distribution
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可视化单变量分布
- en: 'Seaborn makes the task of visualizing the distribution of a dataset much easier.
    Starting with the population data as discussed before, let''s see how it distributes
    among different countries in 2017 by plotting a bar plot:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Seaborn 使得可视化数据集分布的任务变得更加容易。以之前讨论的人口数据为例，让我们通过绘制条形图来查看2017年不同国家的人口分布情况：
- en: '[PRE12]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![](img/56262850-c1ee-41e9-a1f7-64ecdcd0773c.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/56262850-c1ee-41e9-a1f7-64ecdcd0773c.png)'
- en: Bar chart in Seaborn
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Seaborn 中的条形图
- en: The `seaborn.barplot()` function shows a series of data points as rectangular
    bars. If multiple points per group are available, confidence intervals will be
    shown on top of the bars to indicate the uncertainty of the point estimates. Like
    most other Seaborn functions, various input data formats are supported, such as
    Python lists, Numpy arrays, pandas Series, and pandas DataFrame.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`seaborn.barplot()` 函数显示一系列数据点作为矩形条。如果每组有多个点，则在条形顶部显示置信区间，以指示点估计的不确定性。与大多数其他
    Seaborn 函数一样，支持各种输入数据格式，如 Python 列表、Numpy 数组、pandas Series 和 pandas DataFrame。'
- en: A more traditional way to show the population structure is through the use of
    a population pyramid.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 展示人口结构的更传统方式是通过人口金字塔。
- en: So what is a population pyramid? As its name suggests, it is a pyramid-shaped
    plot that shows the age distribution of a population. It can be roughly classified
    into three classes, namely constrictive, stationary, and expansive for populations
    that are undergoing negative, stable, and rapid growth respectively. For instance,
    constrictive populations have a lower proportion of young people, so the pyramid
    base appears to be constricted. Stable populations have a more or less similar
    number of young and middle-aged groups. Expansive populations, on the other hand,
    have a large proportion of youngsters, thus resulting in pyramids with enlarged
    bases.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 那么什么是人口金字塔？顾名思义，它是显示人口年龄分布的金字塔形绘图。它可以粗略地分为三类，即压缩型、稳定型和扩张型，分别用于经历负增长、稳定增长和快速增长的人口。例如，压缩型人口的年轻人比例较低，因此金字塔底部看起来受限。稳定型人口的年轻人和中年组相对较多。而扩张型人口则有大量年轻人，从而导致金字塔底部扩大。
- en: 'We can build a population pyramid by plotting two bar charts on two subplots
    with a shared y-axis:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过在两个共享 y 轴的子图上绘制两个条形图来构建人口金字塔：
- en: '[PRE13]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![](img/91b3a3a5-fb14-4335-9b3c-2d09f36fdb79.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/91b3a3a5-fb14-4335-9b3c-2d09f36fdb79.png)'
- en: Since Seaborn is built on top of the solid foundations of Matplotlib, we can
    customize the plot easily using built-in functions of Matplotlib. In the preceding
    example, we used `matplotlib.axes.Axes.invert_xaxis()` to flip the male population
    plot horizontally, followed by changing the location of the tick labels to the
    right-hand side using `matplotlib.axis.YAxis.tick_right()`. We further customized
    the titles and axis labels for the plot using a combination of `matplotlib.axes.Axes.set_title()`,
    `matplotlib.axes.Axes.set()`, and `matplotlib.figure.Figure.suptitle()`.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Seaborn 建立在 Matplotlib 的坚实基础之上，我们可以使用 Matplotlib 的内置函数轻松定制绘图。在前面的例子中，我们使用
    `matplotlib.axes.Axes.invert_xaxis()` 将男性人口图水平翻转，然后使用 `matplotlib.axis.YAxis.tick_right()`
    将刻度标签位置改为右侧。我们进一步使用 `matplotlib.axes.Axes.set_title()`、`matplotlib.axes.Axes.set()`
    和 `matplotlib.figure.Figure.suptitle()` 组合定制了绘图的标题和轴标签。
- en: Let's try to plot the population pyramids for Cambodia and Japan as well by
    changing the line `population_df.Location == 'United States of America'` to `population_df.Location
    == 'Cambodia'` or `population_df.Location == 'Japan'`. Can you classify the pyramids
    into one of the three population pyramid classes?
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们尝试通过将行 `population_df.Location == 'United States of America'` 更改为 `population_df.Location
    == 'Cambodia'` 或 `population_df.Location == 'Japan'` 来绘制柬埔寨和日本的人口金字塔。你能把金字塔分类到三类人口金字塔中的一类吗？
- en: '![](img/b728e146-f453-4ef9-b6cb-3a3f26fab503.png)![](img/6e1566cb-b049-4965-8d57-00b608cdd74f.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b728e146-f453-4ef9-b6cb-3a3f26fab503.png)![](img/6e1566cb-b049-4965-8d57-00b608cdd74f.png)'
- en: To see how Seaborn simplifies the code for relatively complex plots, let's see
    how a similar plot can be achieved using vanilla Matplotlib.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 为了看到 Seaborn 如何简化相对复杂绘图的代码，让我们看看如何使用原始 Matplotlib 实现类似的绘图。
- en: 'First, like the previous Seaborn-based example, we create two subplots with
    shared y-axis:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，像之前基于 Seaborn 的示例一样，我们创建具有共享 y 轴的两个子图：
- en: '[PRE14]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Next, we plot horizontal bar charts using `matplotlib.pyplot.barh()` and set
    the location and labels of ticks, followed by adjusting the subplot spacing:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用 `matplotlib.pyplot.barh()` 绘制水平条形图，并设置刻度的位置和标签，然后调整子图间距：
- en: '[PRE15]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Finally, we use the same code to further customize the look and feel of the
    figure:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们使用相同的代码进一步定制图形的外观和感觉：
- en: '[PRE16]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![](img/15c72474-c183-42d7-b957-a88958c89c46.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/15c72474-c183-42d7-b957-a88958c89c46.png)'
- en: When compared to the Seaborn-based code, the pure Matplotlib implementation
    requires extra lines to define the tick positions, tick labels, and subplot spacing.
    For some other Seaborn plot types that include extra statistical calculations
    such as linear regression, and pearson correlation, the code reduction is even
    more dramatic. Therefore, Seaborn is a "batteries-included" statistical visualization
    package that allows users to write less verbose code.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 与基于Seaborn的代码相比，纯Matplotlib实现需要额外的代码行来定义刻度位置、刻度标签和子图间距。对于一些其他包含额外统计计算（如线性回归、皮尔逊相关）的Seaborn图表类型，代码的简化更加明显。因此，Seaborn是一个“开箱即用”的统计可视化包，使用户可以写出更简洁的代码。
- en: Histogram and distribution fitting in Seaborn
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Seaborn中的直方图和分布拟合
- en: 'In the population example, the raw data was already binned into different age
    groups. What if the data is not binned (for example, the BigMac Index data)? Turns
    out, `seaborn.distplot` can help us to process the data into bins and show us
    a histogram as a result. Let''s look at this example:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在人口示例中，原始数据已经分为不同的年龄组。如果数据没有被分组（例如大麦指数数据），该怎么办呢？事实证明，`seaborn.distplot`可以帮助我们将数据分组，并显示相应的直方图。让我们看一下这个例子：
- en: '[PRE17]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '![](img/c013bf79-99a6-4605-910d-05b2dfa1162d.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c013bf79-99a6-4605-910d-05b2dfa1162d.png)'
- en: The `seaborn.distplot` function expects either pandas Series, single-dimensional
    numpy.array, or a Python list as input. Then, it determines the size of the bins
    according to the Freedman-Diaconis rule, and finally it fits a **kernel density
    estimate** (**KDE**) over the histogram.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`seaborn.distplot`函数期望输入的是pandas Series、单维度的numpy.array或者Python列表。然后，它根据Freedman-Diaconis规则确定箱子的大小，最后在直方图上拟合**核密度估计**（**KDE**）。'
- en: KDE is a non-parametric method used to estimate the distribution of a variable.
    We can also supply a parametric distribution, such as beta, gamma, or normal distribution,
    to the `fit` argument.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: KDE是一种非参数方法，用于估计变量的分布。我们还可以提供一个参数分布，例如贝塔分布、伽马分布或正态分布，作为`fit`参数。
- en: 'In this example, we are going to fit the normal distribution from the `scipy.stats`
    package over the Big Mac Index dataset:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将拟合来自`scipy.stats`包的正态分布到大麦指数数据集：
- en: '[PRE18]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '![](img/834e6988-4fef-4f3c-bb46-d2c348144fff.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/834e6988-4fef-4f3c-bb46-d2c348144fff.png)'
- en: Visualizing a bivariate distribution
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可视化双变量分布
- en: We should bear in mind that the Big Mac index is not directly comparable between
    countries. Normally, we would expect commodities in poor countries to be cheaper
    than those in rich ones. To represent a fairer picture of the index, it would
    be better to show the relationship between Big Mac pricing and **Gross Domestic
    Product** (**GDP**) per capita.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应当记住，大麦指数在不同国家之间并不能直接比较。通常，我们会预期贫穷国家的商品比富裕国家的便宜。为了更公平地呈现该指数，最好显示大麦价格与**国内生产总值**（**GDP**）人均的关系。
- en: We are going to acquire GDP per capita from Quandl's **World Bank World Development
    Indicators** (**WWDI**) dataset. Based on the previous code example of acquiring
    JSON data from Quandl, can you try to adapt it to download the GDP per capita
    dataset?
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从Quandl的**世界银行世界发展指标**（**WWDI**）数据集中获取人均GDP数据。基于之前获取Quandl JSON数据的代码示例，你能尝试将其修改为下载人均GDP数据集吗？
- en: 'For those who are impatient, here is the full code:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 对于不耐烦的人，这里是完整的代码：
- en: '[PRE19]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The expected output:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 预期输出：
- en: '[PRE20]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '|  | Date | Value | country |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '|  | 日期 | 值 | 国家 |'
- en: '| 0 | 2015-12-31 | 10501.660269 | ARG |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 2015-12-31 | 10501.660269 | ARG |'
- en: '| 1 | 2014-12-31 | 10334.780146 | ARG |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 2014-12-31 | 10334.780146 | ARG |'
- en: '| 2 | 2013-12-31 | 10711.229530 | ARG |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 2013-12-31 | 10711.229530 | ARG |'
- en: '| 3 | 2012-12-31 | 10558.265365 | ARG |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 2012-12-31 | 10558.265365 | ARG |'
- en: '| 4 | 2011-12-31 | 10780.342508 | ARG |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| 4 | 2011-12-31 | 10780.342508 | ARG |'
- en: We can see that the GDP per capita dataset is not available for four geographical
    locations, but we can ignore that for now.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，人均GDP数据集在四个地理位置上不可用，但我们现在可以忽略这一点。
- en: Next, we will merge the two DataFrames that contain Big Mac Index and GDP per
    capita respectively using `pandas.merge()`. The most recent record in WWDI's GDP
    per capita dataset was collected at the end of 2015, so let's pair that up with
    the corresponding Big Mac index dataset in the same year.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将使用`pandas.merge()`合并包含大麦指数和人均GDP的两个DataFrame。WWDI人均GDP数据集的最新记录是在2015年底收集的，所以我们将其与同年对应的大麦指数数据集配对。
- en: 'For those who are familiar with the SQL language, `pandas.merge()` supports
    four modes, namely left, right, inner, and outer joins. Since we are interested
    in rows that have matching countries in both DataFrames only, we are going to
    choose inner join:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 对于熟悉 SQL 语言的用户，`pandas.merge()`支持四种模式，即左连接、右连接、内连接和外连接。由于我们只关心两个 DataFrame 中都有匹配国家的行，所以我们将选择内连接：
- en: '[PRE21]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '|  | Date_x | local_price | dollar_ex | dollar_price | dollar_ppp | dollar_valuation
    | dollar_adj_valuation | euro_adj_valuation | sterling_adj_valuation | yen_adj_valuation
    | yuan_adj_valuation | country | Date_y | Value |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '|  | Date_x | local_price | dollar_ex | dollar_price | dollar_ppp | dollar_valuation
    | dollar_adj_valuation | euro_adj_valuation | sterling_adj_valuation | yen_adj_valuation
    | yuan_adj_valuation | country | Date_y | Value |'
- en: '| 0 | 2015-01-31 | 28.00 | 8.610000 | 3.252033 | 5.845511 | -32.107881 | 0.540242
    | -0.804495 | -2.49468 | 34.3905 | 6.01183 | ARG | 2015-12-31 | 10501.660269 |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 2015-01-31 | 28.00 | 8.610000 | 3.252033 | 5.845511 | -32.107881 | 0.540242
    | -0.804495 | -2.49468 | 34.3905 | 6.01183 | ARG | 2015-12-31 | 10501.660269 |'
- en: '| 1 | 2015-01-31 | 5.30 | 1.227220 | 4.318705 | 1.106472 | -9.839144 | -17.8995
    | -18.9976 | -20.3778 | 9.74234 | -13.4315 | AUS | 2015-12-31 | 54688.445933 |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 2015-01-31 | 5.30 | 1.227220 | 4.318705 | 1.106472 | -9.839144 | -17.8995
    | -18.9976 | -20.3778 | 9.74234 | -13.4315 | AUS | 2015-12-31 | 54688.445933 |'
- en: '| 2 | 2015-01-31 | 13.50 | 2.592750 | 5.206827 | 2.818372 | 8.702019 | 68.4555
    | 66.2024 | 63.3705 | 125.172 | 77.6231 | BRA | 2015-12-31 | 11211.891104 |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 2015-01-31 | 13.50 | 2.592750 | 5.206827 | 2.818372 | 8.702019 | 68.4555
    | 66.2024 | 63.3705 | 125.172 | 77.6231 | BRA | 2015-12-31 | 11211.891104 |'
- en: '| 3 | 2015-01-31 | 2.89 | 0.661594 | 4.368235 | 0.603340 | -8.805115 | 3.11257
    | 1.73343 | 0 | 37.8289 | 8.72415 | GBR | 2015-12-31 | 41182.619517 |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 2015-01-31 | 2.89 | 0.661594 | 4.368235 | 0.603340 | -8.805115 | 3.11257
    | 1.73343 | 0 | 37.8289 | 8.72415 | GBR | 2015-12-31 | 41182.619517 |'
- en: '| 4 | 2015-01-31 | 5.70 | 1.228550 | 4.639616 | 1.189979 | -3.139545 | -2.34134
    | -3.64753 | -5.28928 | 30.5387 | 2.97343 | CAN | 2015-12-31 | 50108.065004 |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| 4 | 2015-01-31 | 5.70 | 1.228550 | 4.639616 | 1.189979 | -3.139545 | -2.34134
    | -3.64753 | -5.28928 | 30.5387 | 2.97343 | CAN | 2015-12-31 | 50108.065004 |'
- en: Scatter plot in Seaborn
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Seaborn 中的散点图
- en: A scatter plot is one of the most common plots in the scientific and business
    worlds. It is particularly useful for displaying the relationship between two
    variables. While we can simply use `matplotlib.pyplot.scatter` to draw a scatter
    plot, we can also use Seaborn to build similar plots with more advanced features.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 散点图是科学和商业世界中最常见的图表之一。它尤其适用于显示两个变量之间的关系。虽然我们可以简单地使用`matplotlib.pyplot.scatter`来绘制散点图，但我们也可以使用
    Seaborn 来构建具有更多高级功能的类似图表。
- en: The two functions `seaborn.regplot()` and `seaborn.lmplot()` display a linear
    relationship in the form of a scatter plot, a regression line, plus the 95% confidence
    interval around that regression line. The main difference between the two functions
    is that `lmplot()` combines `regplot()` with `FacetGrid` such that we can create
    color-coded or faceted scatter plots to show the interaction between three or
    more pairs of variables. We will demonstrate the use of `lmplot()` later in this
    chapter and the next chapter.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`seaborn.regplot()`和`seaborn.lmplot()`这两个函数以散点图的形式显示线性关系、回归线，以及回归线周围的 95% 置信区间。两者的主要区别在于，`lmplot()`结合了`regplot()`和`FacetGrid`，使我们能够创建带有颜色编码或分面散点图，显示三个或更多变量对之间的交互作用。我们将在本章和下一章展示`lmplot()`的使用。'
- en: The simplest form of `seaborn.regplot()` supports numpy arrays, pandas Series,
    or pandas DataFrames as input. The regression line and the confidence interval
    can be removed by specifying `fit_reg=False`.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '`seaborn.regplot()`的最简单形式支持 numpy 数组、pandas Series 或 pandas DataFrame 作为输入。可以通过指定`fit_reg=False`来移除回归线和置信区间。'
- en: 'We are going to investigate the hypothesis that Big Macs are cheaper in poorer
    countries, and vice versa, checking whether there is any correlation between the
    Big Mac index and GDP per capita:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将研究一个假设，即在较贫穷的国家巨无霸更便宜，反之亦然，并检查巨无霸指数与人均 GDP 之间是否存在相关性：
- en: '[PRE22]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The expected output:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 预期的输出：
- en: '![](img/d36ae630-7dc2-486c-9bd5-26840c2e65fb.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d36ae630-7dc2-486c-9bd5-26840c2e65fb.png)'
- en: 'So far so good! It looks like the Big Mac index is positively correlated with
    GDP per capita. Let''s turn the regression line back on and label a few countries
    that show extreme Big Mac index values:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止一切顺利！看起来巨无霸指数与人均 GDP 正相关。让我们重新启用回归线，并标注一些巨无霸指数值极端的国家：
- en: '[PRE23]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'This is the expected output:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这是预期的输出：
- en: '![](img/6aab88b3-8ea2-4e0f-a530-a0040339e8b3.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6aab88b3-8ea2-4e0f-a530-a0040339e8b3.png)'
- en: We can see that many countries fall within the confidence interval of the regression
    line. Given the GDP per capita level for each country, the linear regression model
    predicts the corresponding Big Mac index. The currency value shows signs of under-
    or over-valuation if the actual index deviates from the regression model.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，许多国家的数据都落在回归线的置信区间内。根据每个国家的人均GDP水平，线性回归模型预测了相应的巨无霸指数。如果实际指数偏离回归模型，则货币价值可能出现低估或高估的迹象。
- en: By labeling the countries that show extremely high or low values, we can clearly
    see that the average price of a Big Mac in Brazil and Switzerland is overvalued,
    while it is undervalued in India, Russia, and Ukraine even if the differences
    in GDP are considered.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 通过标注那些显示极高或极低值的国家，我们可以清晰地看到，即使考虑到GDP差异，巴西和瑞士的巨无霸平均价格被高估，而印度、俄罗斯和乌克兰的价格则被低估。
- en: 'Since Seaborn is not a package for statistical analysis, we would need to rely
    on other packages, such as `scipy.stats` or `statsmodels`, to obtain the parameters
    of a regression model. In the next example, we are going to get the `slope` and
    `intercept` parameters from the regression model, and apply different colors for
    points that are above or below the regression line:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Seaborn并不是一个用于统计分析的包，我们需要依赖其他包，如`scipy.stats`或`statsmodels`，来获得回归模型的参数。在下一个示例中，我们将从回归模型中获取`slope`和`intercept`参数，并为高于或低于回归线的点应用不同的颜色：
- en: '[PRE24]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '![](img/a7c33727-4494-44f6-b659-ab2f314cd1ba.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a7c33727-4494-44f6-b659-ab2f314cd1ba.png)'
- en: Contrary to popular belief, it looks like China's currency was not significantly
    under-valued in 2015 since its marker lies well within the 95% confidence interval
    of the regression line.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 与普遍观点相反，2015年中国的货币似乎并没有显著低估，因为其标记完全落在回归线的95%置信区间内。
- en: 'To better illustrate the distribution of values, we can combine histograms
    of `x` or `y` values with scatter plots using `seaborn.jointplot()`:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地展示数值的分布，我们可以通过`seaborn.jointplot()`将`x`或`y`值的直方图与散点图结合起来：
- en: '[PRE25]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '![](img/e59c5502-83f1-483a-81e8-790b6d4df877.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e59c5502-83f1-483a-81e8-790b6d4df877.png)'
- en: By additionally specifying the `kind` parameter in `jointplot` to `reg`, `resid`,
    `hex`, or `kde`, we can quickly change the plot type to regression, residual,
    hex bin, or KDE contour plot respectively.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在`jointplot`中额外指定`kind`参数为`reg`、`resid`、`hex`或`kde`，我们可以迅速将图表类型分别更改为回归图、残差图、六边形图或KDE轮廓图。
- en: '![](img/28dec103-04b7-40ff-a72e-eb2f1b82571f.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![](img/28dec103-04b7-40ff-a72e-eb2f1b82571f.png)'
- en: 'Here is a big disclaimer: with the data in our hands, it is still too early
    to make any conclusions about the valuation of currencies! Different business
    factors such as labor cost, rent, raw material costs, and taxation can all contribute
    to the pricing model of Big Mac, but this is beyond the scope of this book.'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在此给出一个重要声明：根据我们手头的数据，现在下结论关于货币估值仍然为时过早！劳动力成本、租金、原材料成本和税收等不同的商业因素都会对巨无霸的定价模型产生影响，但这些内容超出了本书的范围。
- en: Visualizing categorical data
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可视化分类数据
- en: Towards the end of this chapter, let's try to integrate all datasets that we
    have processed so far. Remember that we briefly introduced the three categories
    of population structures (that is, constrictive, stable, and expansive) earlier
    in this chapter?
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的最后，我们来整合一下到目前为止我们处理过的所有数据集。还记得在本章开头我们简要介绍过三种人口结构类别（即收缩型、稳定型和扩展型）吗？
- en: In this section, we are going to implement a naive algorithm for classifying
    populations into one of the three categories. After that, we will explore different
    techniques of visualizing categorical data.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将实现一个简单的算法，将人口分类为三种类别之一。之后，我们将探索不同的可视化分类数据的技术。
- en: 'Most references online discuss visual classification of population pyramids
    only (for example, [https://www.populationeducation.org/content/what-are-different-types-population-pyramids](https://www.populationeducation.org/content/what-are-different-types-population-pyramids)).
    Clustering-based methods do exist (for example, Korenjak-Cˇ erne, Kejžar, Batagelj
    (2008). *Clustering of Population Pyramids*. Informatica. 32.), but to date, mathematical
    definitions of population categories are scarcely discussed. We will build a naive
    classifier based on the ratio of populations between "0-4" and "50-54" age groups
    in the next example:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在线上，大多数参考文献只讨论了人口金字塔的可视化分类（例如，[https://www.populationeducation.org/content/what-are-different-types-population-pyramids](https://www.populationeducation.org/content/what-are-different-types-population-pyramids)）。确实存在基于聚类的方法（例如，Korenjak-Cˇ
    erne, Kejžar, Batagelj (2008)。*人口金字塔的聚类*。Informatica. 32.），但是迄今为止，人口类别的数学定义很少被讨论。我们将在下一个示例中构建一个基于“0-4”和“50-54”年龄组之间人口比例的简单分类器：
- en: '[PRE26]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The expected output is as follows:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 期望的输出如下：
- en: '|  | Date_x | local_price | dollar_ex | dollar_price | dollar_ppp | dollar_valuation
    | dollar_adj_valuation | euro_adj_valuation | sterling_adj_valuation | yen_adj_valuation
    | yuan_adj_valuation | country | Date_y | Value | ratio | population type |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '|  | Date_x | local_price | dollar_ex | dollar_price | dollar_ppp | dollar_valuation
    | dollar_adj_valuation | euro_adj_valuation | sterling_adj_valuation | yen_adj_valuation
    | yuan_adj_valuation | country | Date_y | Value | ratio | population type |'
- en: '| 0 | 2015-01-31 | 28.00 | 8.610000 | 3.252033 | 5.845511 | -32.107881 | 0.540242
    | -0.804495 | -2.49468 | 34.3905 | 6.01183 | ARG | 2015-12-31 | 10501.660269 |
    1.695835 | expansive |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 2015-01-31 | 28.00 | 8.610000 | 3.252033 | 5.845511 | -32.107881 | 0.540242
    | -0.804495 | -2.49468 | 34.3905 | 6.01183 | ARG | 2015-12-31 | 10501.660269 |
    1.695835 | 扩张 |'
- en: '| 1 | 2015-01-31 | 5.30 | 1.227220 | 4.318705 | 1.106472 | -9.839144 | -17.8995
    | -18.9976 | -20.3778 | 9.74234 | -13.4315 | AUS | 2015-12-31 | 54688.445933 |
    0.961301 | stable |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 2015-01-31 | 5.30 | 1.227220 | 4.318705 | 1.106472 | -9.839144 | -17.8995
    | -18.9976 | -20.3778 | 9.74234 | -13.4315 | AUS | 2015-12-31 | 54688.445933 |
    0.961301 | 稳定 |'
- en: '| 2 | 2015-01-31 | 13.50 | 2.592750 | 5.206827 | 2.818372 | 8.702019 | 68.4555
    | 66.2024 | 63.3705 | 125.172 | 77.6231 | BRA | 2015-12-31 | 11211.891104 | 1.217728
    | expansive |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 2015-01-31 | 13.50 | 2.592750 | 5.206827 | 2.818372 | 8.702019 | 68.4555
    | 66.2024 | 63.3705 | 125.172 | 77.6231 | BRA | 2015-12-31 | 11211.891104 | 1.217728
    | 扩张 |'
- en: '| 3 | 2015-01-31 | 2.89 | 0.661594 | 4.368235 | 0.603340 | -8.805115 | 3.11257
    | 1.73343 | 0 | 37.8289 | 8.72415 | GBR | 2015-12-31 | 41182.619517 | 0.872431
    | stable |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 2015-01-31 | 2.89 | 0.661594 | 4.368235 | 0.603340 | -8.805115 | 3.11257
    | 1.73343 | 0 | 37.8289 | 8.72415 | GBR | 2015-12-31 | 41182.619517 | 0.872431
    | 稳定 |'
- en: '| 4 | 2015-01-31 | 5.70 | 1.228550 | 4.639616 | 1.189979 | -3.139545 | -2.34134
    | -3.64753 | -5.28928 | 30.5387 | 2.97343 | CAN | 2015-12-31 | 50108.065004 |
    0.690253 | constrictive |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| 4 | 2015-01-31 | 5.70 | 1.228550 | 4.639616 | 1.189979 | -3.139545 | -2.34134
    | -3.64753 | -5.28928 | 30.5387 | 2.97343 | CAN | 2015-12-31 | 50108.065004 |
    0.690253 | 收缩 |'
- en: Categorical scatter plot
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分类散点图
- en: With the data classified into categories, we can check whether different population
    types exhibit different Big Mac index distributions.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将数据分类，我们可以检查不同人口类型是否展示出不同的*Big Mac指数*分布。
- en: 'We can use `seaborn.lmplot` to dissect the data and create a categorical scatter
    plot. As a recap, `lmplot()` combines `regplot()` with `FacetGrid` for visualization
    of three or more pairs of variables in faceted grids or color-coded scatter plots.
    In the upcoming examples, we are going to assign the population type variable
    to the `col`, `row`, or `hue` parameters of `lmplot()`. Let''s see how the results
    look:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`seaborn.lmplot`来解析数据并创建一个分类散点图。回顾一下，`lmplot()`将`regplot()`与`FacetGrid`结合，用于在分面网格或颜色编码的散点图中可视化三对或更多的变量。在接下来的示例中，我们将把人口类型变量分配给`lmplot()`的`col`、`row`或`hue`参数。让我们来看一下结果：
- en: '[PRE27]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The preceding code excerpt generates:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码片段生成了：
- en: '![](img/16f3a772-128b-4ce5-a459-4d800fe6be9d.png)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![](img/16f3a772-128b-4ce5-a459-4d800fe6be9d.png)'
- en: 'Alternatively, if we set `row="population type"` instead of `col="population
    type"` in the code excerpt, the following plot will be generated:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，如果我们在代码片段中将`row="population type"`替换为`col="population type"`，将会生成以下图表：
- en: '![](img/67e697a9-e0c3-417c-afce-88e886b33e97.png)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![](img/67e697a9-e0c3-417c-afce-88e886b33e97.png)'
- en: 'Finally, by changing `col="population type"` to `hue="population type"` , a
    color-coded categorical scatter plot will be generated:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，通过将`col="population type"`更改为`hue="population type"`，将生成一个颜色编码的分类散点图：
- en: '![](img/9a1cc962-df10-4723-9b8d-c44045acb922.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9a1cc962-df10-4723-9b8d-c44045acb922.png)'
- en: In fact, `col`, `row`, and `hue` can be mixed together to create a rich faceted
    grid. This is particularly useful when there are lots of dimensions in your data.
    Further discussion of facet grids will be available in the next chapter.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，`col`、`row` 和 `hue` 可以结合使用，创建丰富的分面网格。当数据中存在多个维度时，这特别有用。关于分面网格的更多讨论将在下一章中介绍。
- en: Strip plot and swarm plot
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 条形图和蜂群图
- en: 'A strip is basically a scatter plot where the *x-*axis represents a categorical
    variable. Typical uses of a strip plot involve applying a small random jitter
    value to each data point such that the separation between points becomes clearer:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 条形图本质上是一个散点图，其中 *x-* 轴表示一个分类变量。条形图的典型用法是在每个数据点上应用一个小的随机抖动值，使得数据点之间的间隔更加清晰：
- en: '[PRE28]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '![](img/e4e4391d-bc58-4a57-bb5f-326427efab08.png)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e4e4391d-bc58-4a57-bb5f-326427efab08.png)'
- en: A swarm plot is very similar to a strip plot, yet the locations of points are
    adjusted automatically to avoid overlap even if the jitter value is not applied.
    These plots resemble bees swarming a position, and are likewise named.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 蜂群图与条形图非常相似，然而点的位置会自动调整以避免重叠，即使没有应用抖动值。这些图像像蜜蜂围绕某个位置飞舞，因此也被称为蜂群图。
- en: 'If we change the Seaborn function call from `sns.stripplot` to `sns.swarmplot`
    in the preceding code excerpt, the result will be changed to this:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将前面代码片段中的 Seaborn 函数调用从`sns.stripplot`更改为`sns.swarmplot`，结果将会变成这样：
- en: '![](img/e4ba8226-f575-468f-aaa5-f2756bf1ff60.png)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e4ba8226-f575-468f-aaa5-f2756bf1ff60.png)'
- en: Box plot and violin plot
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 箱型图和小提琴图
- en: The way a strip plot and swarm plot represent data makes comparison difficult.
    Suppose you want to find out whether the stable or constrictive population type
    has a higher median BigMac index value. Can you do that based on the two previous
    example plots?
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 条形图和蜂群图的数据显示方式使得比较变得困难。假设你想找出稳定型或收缩型人口类型的中位数 BigMac 指数值哪个更高。你能基于前面两个示例图进行判断吗？
- en: You might be tempted to think that the constrictive group has a higher median
    value because of the higher maximum data point, but in fact, the stable group
    has a higher median value.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会认为收缩型组的中位数值较高，因为它有更高的最大数据点，但实际上，稳定型组的中位数值更高。
- en: 'Could there be a better plot type for comparing the distribution of categorical
    data? Here you go! Let''s try a box plot:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 是否有更好的图表类型来比较分类数据的分布？来看看这个！我们来尝试一下箱型图：
- en: '[PRE29]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The expected output:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 预期输出：
- en: '![](img/9bfdeb24-db50-4d68-afe2-db7f168ad864.png)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9bfdeb24-db50-4d68-afe2-db7f168ad864.png)'
- en: The box represents quartiles of the data, the center line denotes the median
    value, and the whiskers represent the full range of the data. Data points that
    deviate by more than 1.5 times the interquartile range from the upper or lower
    quartile are deemed to be outliers and show as fliers.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 箱型图的框表示数据的四分位数，中心线表示中位数值，胡须表示数据的完整范围。那些偏离上四分位数或下四分位数超过1.5倍四分位距的数据点被视为异常值，并以飞点形式显示。
- en: A violin plot combines the kernel density estimate of our data with the box
    plot. Both box plot and violin plot display the median and interquartile range,
    but a violin plot goes one step further by showing the full estimated probability
    distribution that is fit to the data. Therefore, we can tell whether there are
    peaks within the data and also compare their relative amplitude.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 小提琴图将我们数据的核密度估计与箱型图结合在一起。箱型图和小提琴图都显示了中位数和四分位数范围，但小提琴图更进一步，通过显示适合数据的完整估计概率分布来展示更多信息。因此，我们可以判断数据中是否存在峰值，并且还可以比较它们的相对幅度。
- en: 'If we change the Seaborn function call from `sns.boxplot` to `sns.violinplot`
    in the code excerpt, the result would be like this:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将代码片段中的 Seaborn 函数调用从`sns.boxplot`更改为`sns.violinplot`，结果将会像这样：
- en: '![](img/38295ea3-2e32-4184-b1a0-a36920164742.png)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![](img/38295ea3-2e32-4184-b1a0-a36920164742.png)'
- en: 'We can also overlay a strip plot or swarm plot on top of the box plot or swarm
    plot in order to get the best of both worlds. Here is an example code:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以将条形图或蜂群图叠加在箱型图或蜂群图之上，从而兼得两者的优点。这里是一个示例代码：
- en: '[PRE30]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The expected output:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 预期输出：
- en: '![](img/dafadade-eb00-4342-a389-eeb43e92bd97.png)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dafadade-eb00-4342-a389-eeb43e92bd97.png)'
- en: Controlling Seaborn figure aesthetics
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制 Seaborn 图形美学
- en: While we can use Matplotlib to customize the figure aesthetics, Seaborn comes
    with several handy functions to make customization easier. If you are using Seaborn
    version 0.8 or later, `seaborn.set()` must be called explicitly after import if
    you would like to enable the beautiful Seaborn default theme. In earlier versions,
    `seaborn.set()` was called implicitly on import.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们可以使用 Matplotlib 自定义图形的美学，但 Seaborn 提供了几个方便的函数来简化定制。如果您使用的是 Seaborn 0.8 或更高版本，必须在导入后显式调用
    `seaborn.set()`，以启用 Seaborn 默认的美观主题。在较早版本中，`seaborn.set()` 在导入时隐式调用。
- en: Preset themes
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 预设主题
- en: The five default themes in Seaborn, namely darkgrid, whitegrid, dark, white,
    and ticks, can be selected by calling the `seaborn.set_style()` function.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: Seaborn 中的五种默认主题，即 darkgrid、whitegrid、dark、white 和 ticks，可以通过调用 `seaborn.set_style()`
    函数来选择。
- en: '`seaborn.set_style()` must be called before issuing any plotting commands in
    order to display the theme properly.![](img/bce26e90-c0f9-46b7-9e0e-36e05a8045d1.png)'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 必须在发出任何绘图命令之前调用 `seaborn.set_style()`，以便正确显示主题。![](img/bce26e90-c0f9-46b7-9e0e-36e05a8045d1.png)
- en: Removing spines from the figure
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从图形中移除脊柱
- en: To remove or adjust the positions of spines, we can make use of the `seaborn.despine`
    function. By default, the spines on the top and right side of a figure are removed,
    and additional spines can be removed by setting `left=True` or `bottom=True`.
    Through the use of offset and trim parameters, the location of the spines can
    be adjusted as well.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除或调整脊柱的位置，可以使用 `seaborn.despine` 函数。默认情况下，图形的顶部和右侧脊柱被移除，可以通过设置 `left=True`
    或 `bottom=True` 来移除其他脊柱。通过使用偏移和修剪参数，还可以调整脊柱的位置。
- en: '`seaborn.despine` has to be called after calling the Seaborn plotting functions.'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '`seaborn.despine` 必须在调用 Seaborn 绘图函数之后调用。'
- en: 'Here are the results of different combinations of parameters in the `seaborn.despine`
    function:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是 `seaborn.despine` 函数中不同参数组合的结果：
- en: '![](img/0f326188-f03d-4b94-93a7-1a22173aac6e.png)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0f326188-f03d-4b94-93a7-1a22173aac6e.png)'
- en: Changing the size of the figure
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 改变图形的大小
- en: To control the height and width of the figure, we can rely on `matplotlib.pyplot.figure(figsize=(WIDTH,HEIGHT))` as
    well.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 要控制图形的高度和宽度，我们也可以依赖 `matplotlib.pyplot.figure(figsize=(WIDTH,HEIGHT))`。
- en: 'In this example, we are going to change the size of the previous histogram
    example to 8 inches wide and 4 inches tall:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们将把之前的直方图示例的大小更改为宽 8 英寸，高 4 英寸：
- en: '[PRE31]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Here is the expected output from the preceding code:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前述代码的预期输出：
- en: '![](img/23c2759b-5997-492d-a47d-994d9e936d04.png)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![](img/23c2759b-5997-492d-a47d-994d9e936d04.png)'
- en: 'Seaborn also comes with the `seaborn.set_context()` function to control the
    scale of plot elements. There are four preset contexts, paper, notebook, talk,
    and poster, which are in ascending order of size. By default, the Notebook style
    is chosen. This is an example of setting the context to `poster`:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: Seaborn 还提供了 `seaborn.set_context()` 函数来控制图表元素的比例。有四种预设的上下文，分别是 paper、notebook、talk
    和 poster，它们按大小递增排列。默认情况下，选择的是 Notebook 风格。以下是将上下文设置为 `poster` 的示例：
- en: '[PRE32]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Here is the expected output from the preceding code:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前述代码的预期输出：
- en: '![](img/fc0cc554-44ee-4cfe-bd19-1cba41ff9859.png)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fc0cc554-44ee-4cfe-bd19-1cba41ff9859.png)'
- en: Fine-tuning the style of the figure
  id: totrans-234
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微调图形的样式
- en: 'Almost every element in a Seaborn figure can be further customized via `seaborn.set`.
    Here is the list of parameters that are supported:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: Seaborn 图形中的几乎每个元素都可以通过 `seaborn.set` 进一步自定义。以下是支持的参数列表：
- en: '`context`: One of the preset contexts--{paper, notebook, talk, poster}.'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`context`：预设的上下文之一——{paper, notebook, talk, poster}。'
- en: '`style`: One of the axes'' styles--{darkgrid, whitegrid, dark, white, ticks}.'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`style`：轴样式之一——{darkgrid, whitegrid, dark, white, ticks}。'
- en: '`palette`: One of the color palettes as defined in [https://seaborn.pydata.org/generated/seaborn.color_palette.html#seaborn.color_palette](https://seaborn.pydata.org/generated/seaborn.color_palette.html#seaborn.color_palette).'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`palette`：在 [https://seaborn.pydata.org/generated/seaborn.color_palette.html#seaborn.color_palette](https://seaborn.pydata.org/generated/seaborn.color_palette.html#seaborn.color_palette)
    中定义的色板之一。'
- en: '`font`: A supported font or font family name, such as serif, sans-serif, cursive,
    fantasy, or monospace. For more information, visit [https://matplotlib.org/api/font_manager_api.html](https://matplotlib.org/api/font_manager_api.html).'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`font`：支持的字体或字体家族名称，如 serif、sans-serif、cursive、fantasy 或 monospace。欲了解更多信息，请访问
    [https://matplotlib.org/api/font_manager_api.html](https://matplotlib.org/api/font_manager_api.html)。'
- en: '`font_scale`: An independent scaling factor of font elements.'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`font_scale`：字体元素的独立缩放因子。'
- en: '`rc`: A dictionary of extra `rc` parameters mappings. To obtain the full list
    of all `rc` parameters, we can run `seaborn.axes_style()`.'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rc`：额外 `rc` 参数映射的字典。要获取所有 `rc` 参数的完整列表，可以运行 `seaborn.axes_style()`。'
- en: RC parameters that are not defined in the currently used preset context or axis
    style cannot be overridden. For more information on `seaborn.set()`, please visit
    [https://seaborn.pydata.org/generated/seaborn.set.html#seaborn.set](https://seaborn.pydata.org/generated/seaborn.set.html#seaborn.set).
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 当前使用的预设上下文或轴样式中未定义的 RC 参数无法被覆盖。有关 `seaborn.set()` 的更多信息，请访问 [https://seaborn.pydata.org/generated/seaborn.set.html#seaborn.set](https://seaborn.pydata.org/generated/seaborn.set.html#seaborn.set)。
- en: 'Let''s try to increase the font scale, increase the line width of the KDE plot,
    and change the color of several plot elements:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试增加字体比例、增加 KDE 图的线宽，并改变几个图表元素的颜色：
- en: '[PRE33]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The code generates the following histogram:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 该代码生成以下直方图：
- en: '![](img/6c428fb8-6c10-4ca1-85ad-44a045e0e4de.png)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6c428fb8-6c10-4ca1-85ad-44a045e0e4de.png)'
- en: So far, only functions that control global aesthetics were introduced. What
    if we want to change the style of a specific plot only?
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只介绍了控制全局美学的函数。如果我们只想改变某个特定图表的样式呢？
- en: 'Luckily, most Seaborn plotting functions come with specific parameters for
    the customization of styles. This also means that there isn''t a universal styling
    tutorial for all Seaborn plotting functions. However, we can take a closer look
    at this `seaborn.distplot()` code excerpt to get an idea:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，大多数 Seaborn 绘图函数都提供了专门的参数来定制样式。这也意味着并没有一个适用于所有 Seaborn 绘图函数的通用样式教程。然而，我们可以仔细查看这段
    `seaborn.distplot()` 的代码示例，以了解大概：
- en: '[PRE34]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The expected result:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 预期结果：
- en: '![](img/e36290b7-95b4-4879-b185-053078956c6b.png)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e36290b7-95b4-4879-b185-053078956c6b.png)'
- en: 'Some Seaborn functions support a more direct approach of customizing aesthetics.
    For example, `seaborn.barplot` can pass through keyword arguments such as `facecolor`,
    `edgecolor`, `ecolor`, and `linewidth` to the underlying `matplotlib.pyplot.bar`
    function:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 一些 Seaborn 函数支持更加直接的美学定制方法。例如，`seaborn.barplot` 可以通过关键字参数，如 `facecolor`、`edgecolor`、`ecolor`
    和 `linewidth`，传递给底层的 `matplotlib.pyplot.bar` 函数：
- en: '[PRE35]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '![](img/a19813ac-e20d-45de-8a2e-9c1cb51b255b.png)'
  id: totrans-254
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a19813ac-e20d-45de-8a2e-9c1cb51b255b.png)'
- en: More about colors
  id: totrans-255
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多关于颜色的内容
- en: Color is perhaps the most important aspect of figure style, and thus it deserves
    its own subsection. There are many great resources that discuss the principles
    of choosing colors in visualizations (for example, [https://betterfigures.org/2015/06/23/picking-a-colour-scale-for-scientific-graphics/](https://betterfigures.org/2015/06/23/picking-a-colour-scale-for-scientific-graphics/)
    and [https://earthobservatory.nasa.gov/blogs/elegantfigures/2013/08/05/subtleties-of-color-part-1-of-6/](https://earthobservatory.nasa.gov/blogs/elegantfigures/2013/08/05/subtleties-of-color-part-1-of-6/)).
    The official Matplotlib documentation also contains a good overview of color maps
    ([http://matplotlib.org/users/colormaps.html](http://matplotlib.org/users/colormaps.html)).
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 颜色可能是图表风格中最重要的方面，因此它值得单独设立一个小节。有许多优秀的资源讨论了选择颜色在可视化中的原则（例如，[https://betterfigures.org/2015/06/23/picking-a-colour-scale-for-scientific-graphics/](https://betterfigures.org/2015/06/23/picking-a-colour-scale-for-scientific-graphics/)
    和 [https://earthobservatory.nasa.gov/blogs/elegantfigures/2013/08/05/subtleties-of-color-part-1-of-6/](https://earthobservatory.nasa.gov/blogs/elegantfigures/2013/08/05/subtleties-of-color-part-1-of-6/)）。官方的
    Matplotlib 文档也包含了关于颜色映射的良好概述（[http://matplotlib.org/users/colormaps.html](http://matplotlib.org/users/colormaps.html)）。
- en: Effective use of color adds sufficient contrast to make something stand out
    and draw your audience's attention. Colors can also evoke emotions; for example,
    red is often associated with important or passionate, while green is often associated
    with natural or stable. If you are trying to deliver a story from your plots,
    do try to use an appropriate color scheme. It's estimated that 8% of men and 0.5%
    of women suffer from red-green color blindness, so we need to pick colors with
    these individuals in mind as well.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 有效使用颜色可以增加足够的对比度，使某些内容突出并吸引观众的注意力。颜色还可以唤起情感；例如，红色通常与重要或激情相关，而绿色通常与自然或稳定相关。如果你想通过图表传递一个故事，务必尝试使用合适的配色方案。据估计，8%的男性和0.5%的女性患有红绿色盲，因此我们在选择颜色时也需要考虑到这些人群。
- en: Color scheme and color palettes
  id: totrans-258
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配色方案和调色板
- en: 'There are three general kinds of color palettes available in seaborn--qualitative,
    diverging, and sequential:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: Seaborn 提供了三种常见的颜色调色板——定性、发散性和连续性：
- en: Qualitative palettes are best for data with discrete levels or nominal or categorical
    data. Custom qualitative palettes can be created by providing a list of Matplotlib
    colors to `seaborn.color_palette`.
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定性调色板最适用于具有离散级别或名义/分类数据的数据。可以通过向`seaborn.color_palette`提供Matplotlib颜色列表来创建自定义定性调色板。
- en: Diverging palettes are used for highlighting low and high values in a figure,
    with a neutrally colored midpoint. Custom diverging palettes can be created by
    passing two hue values plus the optional lightness and saturation values for the
    extremes to the `seaborn.diverging_palette` function.
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分歧调色板用于突出图形中的低值和高值，具有中性色的中点。可以通过将两个色调值以及可选的亮度和饱和度值传递给`seaborn.diverging_palette`函数来创建自定义分歧调色板。
- en: Sequential palettes are usually used for quantitative data that progresses continuously
    from low to high.
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 顺序调色板通常用于量化数据，这些数据在低到高之间连续变化。
- en: Custom sequential palettes can be created by providing a single Matplotlib color
    to `seaborn.light_palette` or `seaborn.dark_palette`, which produces a palette
    that changes gradually from light or dark desaturated values to the seed color.
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以通过向`seaborn.light_palette`或`seaborn.dark_palette`提供单一的Matplotlib颜色，创建自定义顺序调色板，这将生成一个从浅色或深色的去饱和值逐渐变化到种子颜色的调色板。
- en: 'In the next example, we are going to plot the most commonly used qualitative,
    diverging, and sequential palettes, as well as a few custom palettes:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个示例中，我们将绘制最常用的定性、分歧和顺序调色板，以及一些自定义调色板：
- en: '[PRE36]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The expected output is as follows:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 预期的输出如下：
- en: '![](img/350e9195-9024-4abe-968d-8132a67660b8.png)'
  id: totrans-267
  prefs: []
  type: TYPE_IMG
  zh: '![](img/350e9195-9024-4abe-968d-8132a67660b8.png)'
- en: To change the color scheme of a Seaborn plot, we can use either the `color` or
    `palette` parameter available in most Seaborn functions. The `color` parameter
    supports a single color that will be applied to all of the elements. On the other
    hand, `palette` supports a range of colors to differentiate levels of the `hue` variable.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改Seaborn图形的配色方案，我们可以使用大多数Seaborn函数中提供的`color`或`palette`参数。`color`参数支持应用于所有元素的单一颜色；而`palette`参数支持一系列颜色，用于区分`hue`变量的不同水平。
- en: Some Seaborn functions support the `color` parameter only (for example, dist
    plot), while others can support both `color` and `palette` (for example, bar plot
    and box plot). Readers can refer to the official documentation to see which parameter
    is supported.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 一些Seaborn函数仅支持`color`参数（例如，分布图），而其他函数可以同时支持`color`和`palette`（例如，条形图和箱型图）。读者可以参考官方文档查看哪些参数是受支持的。
- en: 'The following three code excerpts demonstrate the use of the `color` or `palette`
    parameter in a dist plot, bar plot, and box plot:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 以下三个代码片段演示了如何在分布图（dist plot）、条形图（bar plot）和箱型图（box plot）中使用`color`或`palette`参数：
- en: '[PRE37]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '![](img/5e4191a4-96db-4e82-8f8f-c743638be797.png)'
  id: totrans-272
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5e4191a4-96db-4e82-8f8f-c743638be797.png)'
- en: '[PRE38]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '![](img/a40ff9dd-aa78-4012-b2f2-85475fb98618.png)'
  id: totrans-274
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a40ff9dd-aa78-4012-b2f2-85475fb98618.png)'
- en: '[PRE39]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '![](img/f80e3932-a7f3-4cf6-866e-41f6d36ddd76.png)'
  id: totrans-276
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f80e3932-a7f3-4cf6-866e-41f6d36ddd76.png)'
- en: Summary
  id: totrans-277
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: You just learned how we can parse online data in CSV or JSON formats using the
    versatile Pandas package. You further learned how to filter, subset, merge, and
    process data into insights. You have now equipped yourself with the knowledge
    to visualize time series, univariate, bivariate, and categorical data. The chapter
    concluded with a number of useful techniques to customize figure aesthetics for
    effective storytelling.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 你刚刚学会了如何使用多功能的Pandas包解析CSV或JSON格式的在线数据。你进一步学习了如何筛选、子集化、合并和处理数据，以获取见解。现在，你已经掌握了可视化时间序列、单变量、双变量和分类数据的知识。本章最后介绍了若干有用的技巧，以自定义图形美学，从而有效地讲述故事。
- en: Phew! We have just completed a long chapter, so go grab a burger, have a break,
    and relax.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 呼！我们刚刚完成了一个长篇章节，赶紧去吃个汉堡，休息一下，放松一下吧。
