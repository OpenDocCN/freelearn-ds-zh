- en: Time Series and Plotting Using Matplotlib
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Matplotlib的时间序列和绘图
- en: Time series data is generated by a variety of processes, including the **Internet
    of Things** (**IoT**) sensors, machine/server logs, and monthly sales data from
    **Customer Relationship Management** (**CRM**) system. Some common characteristics
    of time series data is that the data points are generated at a fixed frequency
    and that there is an inherent trend and seasonality associated with the data.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 时间序列数据由多种过程生成，包括**物联网**（**IoT**）传感器、机器/服务器日志以及来自**客户关系管理**（**CRM**）系统的月度销售数据。时间序列数据的一些常见特点是数据点以固定频率生成，并且数据中固有的趋势和季节性。
- en: In this chapter, we will take a tour of some topics that are necessary to develop
    expertise in using pandas. Knowledge of these topics is very useful for the preparation
    of data as input to programs for data analysis, prediction, or visualization.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍一些在使用pandas时必须掌握的主题。掌握这些主题的知识对于准备作为数据分析、预测或可视化程序输入的数据非常有用。
- en: 'The topics that we''ll discuss in this chapter are as follows:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将讨论的主题如下：
- en: Handling time series data and dates
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理时间序列数据和日期
- en: Manipulation of time series data—rolling, resampling, shifting, lagging, and
    time element separation
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时间序列数据的操作——滚动、重采样、平移、滞后和时间元素分离
- en: Formatting—changing the date format and converting text to a date
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 格式化——更改日期格式并将文本转换为日期
- en: Plotting time series using `matplotlib`
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`matplotlib`绘制时间序列
- en: By the end of this chapter, you should be proficient in these critical areas.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章结束时，你应该在这些关键领域掌握得很熟练。
- en: Handling time series data
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理时间序列数据
- en: In this section, we show you how to handle time series data. Handling involves
    reading, creating, resampling, and reindexing timestamp data. These tasks need
    to be performed on timestamp data to make it usable. We will start by showing
    you how to create time series data using the data read in from a `csv` file.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将展示如何处理时间序列数据。处理涉及读取、创建、重采样和重新索引时间戳数据。要使其可用，需要对时间戳数据执行这些任务。我们将首先展示如何使用从`csv`文件读取的数据创建时间序列数据。
- en: Reading in time series data
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取时间序列数据
- en: 'In this section, we demonstrate the various ways to read in time series data,
    starting with the simple `read_csv` method:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将演示多种读取时间序列数据的方法，从简单的`read_csv`方法开始：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The source of this information can be found at [http://datamarket.com](http://datamarket.com).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 此信息的来源可以在[http://datamarket.com](http://datamarket.com)找到。
- en: 'We would like the `TradeDate` column to be a series of `datetime` values so
    that we can index it and create a time series:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望`TradeDate`列成为一系列`datetime`值，以便可以索引并创建时间序列：
- en: 'Let''s first check the type of values in the `TradeDate` series:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们首先检查`TradeDate`系列中的值类型：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next, we convert these values to a `Timestamp` type:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将这些值转换为`Timestamp`类型：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We can now use the `TradeDate` column as an index:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以将`TradeDate`列用作索引：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the next section, we will learn how to assign a date column as an index and
    then perform subsetting based on the index. For this section, we will use the `Object
    Occupancy` dataset where some room parameters were observed every few minutes
    for several weeks and the corresponding room occupancy was observed. This dataset
    is present as three separate files.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习如何将日期列作为索引，然后基于该索引进行子集提取。为了这一节，我们将使用`Object Occupancy`数据集，该数据集记录了某些房间参数在几周内每隔几分钟的观测值以及相应的房间占用情况。该数据集分为三个单独的文件。
- en: Assigning date indexes and subsetting in time series data
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在时间序列数据中分配日期索引并进行子集提取
- en: 'Let''s read them and concatenate them to make a single file:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们读取它们并将其连接成一个文件：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Before using the date column as an index, we will convert it to a `datetime`
    format and drop the actual date column:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在将日期列用作索引之前，我们将其转换为`datetime`格式并删除实际的日期列：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Once the new `datetime` column is set to an index, it can be used for subsetting.
    For example, for filtering all the records for a particular day, we can just enclose
    the data inside the subsetting (square, `[]`) brackets:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦新的`datetime`列设置为索引，它就可以用于子集提取。例如，要过滤某一天的所有记录，我们只需将数据放入子集提取（方括号`[]`）中：
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The output is similar to the following screenshot:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果类似于以下截图：
- en: '**![](img/8acdc469-d177-4f1c-8511-9e479596289b.png)**'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**![](img/8acdc469-d177-4f1c-8511-9e479596289b.png)**'
- en: Filtering all records for a particular day
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 过滤某一天的所有记录
- en: 'To filter all the records for a particular hour across all days, the following
    snippet will do the job:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要过滤所有天数中特定小时的所有记录，以下代码片段可以完成此任务：
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The following is the output:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '**![](img/a7dbe9a1-b3f1-41d0-93b7-67de1a672bc5.png)**'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**![](img/a7dbe9a1-b3f1-41d0-93b7-67de1a672bc5.png)**'
- en: Filtering all records for a particular hour
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 过滤某一特定小时的所有记录
- en: 'We can also filter out all the records between two timestamps by using the
    following snippet:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用以下代码片段过滤两个时间戳之间的所有记录：
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The following is the output:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '**![](img/e28e9cb3-69b6-4c1e-aa92-beb5afef08a3.png)**'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**![](img/e28e9cb3-69b6-4c1e-aa92-beb5afef08a3.png)**'
- en: Filtering all records between two timestamps
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 过滤两个时间戳之间的所有记录
- en: Plotting the time series data
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绘制时间序列数据
- en: 'To better understand the trends and any seasonality present in the data, it
    can be plotted using a basic plot function. Here, the humidity and CO[2] variables
    of the dataset have been plotted:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解数据中的趋势和任何季节性变化，可以使用基本的绘图函数进行绘制。在这里，数据集的湿度和CO[2]变量已被绘制出来：
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The following is the output:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '**![](img/25071ff0-694a-4ad7-9012-482ff022599b.png)**'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**![](img/25071ff0-694a-4ad7-9012-482ff022599b.png)**'
- en: Plotting humidity and CO2 levels across time in the same graph using matplotlib
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 使用matplotlib在同一图表中绘制湿度和CO2水平随时间变化
- en: Resampling and rolling of the time series data
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 时间序列数据的重新采样和滚动
- en: Resampling means changing the frequency of the observed time series. For example,
    in this dataset, a data point is observed every few seconds. This dataset can
    be resampled to an hourly frequency where all the data points for an hour will
    be aggregated using an aggregation function of choice to result in one data point
    for an hour. It can be done at a daily level as well, where all the data points
    in a day will be aggregated. Resampling can also be thought of as data smoothing
    as it smooths or averages out the bumps in data.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 重新采样意味着改变观察到的时间序列的频率。例如，在此数据集中，每隔几秒钟观察到一个数据点。该数据集可以重新采样为按小时的频率，其中每小时的所有数据点将使用选定的聚合函数进行聚合，最终形成一个小时的一个数据点。也可以在每日层面进行重新采样，将一天中的所有数据点聚合。重新采样也可以看作是数据平滑，因为它平滑或平均化数据中的波动。
- en: In pandas, it is easy to resample time series data as there is a built-in function
    for that. Let's see how we can use that.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在pandas中，重新采样时间序列数据非常简单，因为有一个内置函数可以实现这一点。让我们看看如何使用它。
- en: 'For example, to resample at an hourly level, we write the following code:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要按小时进行重新采样，我们编写以下代码：
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The following is the output:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/b3f93f85-a726-4c49-96d8-a0e87fb1a0c8.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b3f93f85-a726-4c49-96d8-a0e87fb1a0c8.png)'
- en: Resampling the data at an hourly level using the median as the aggregate measure
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 使用中位数作为聚合度量值，按小时重新采样数据
- en: 'Similarly, to resample at a daily level, we write the following code:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，要按天重新采样，我们编写以下代码：
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The following is the output:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/bbde9823-3ad5-41c6-85e3-42c7f2479aab.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bbde9823-3ad5-41c6-85e3-42c7f2479aab.png)'
- en: Resampling the data at a daily level using the median as the aggregate measure
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 使用中位数作为聚合度量值，按天重新采样数据
- en: Please note how data sampled at an hourly level has more variations than the
    daily one, which is smoother.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，按小时采样的数据比按天采样的数据变化更大，后者更加平滑。
- en: Rolling is also a similar concept for aggregating data points, although it is
    more flexible. A rolling window, that is, the number of data points that are aggregated
    can be provided to control the level of aggregation or smoothing.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 滚动也是一种类似的概念，用于聚合数据点，尽管它更加灵活。可以提供一个滚动窗口，即聚合的数据显示点数量，以控制聚合或平滑的程度。
- en: If you look at the `datetime` column carefully, you can see that a data point
    has been observed every minute. Hence, 60 such points constitute an hour. Let's
    see how we can use the rolling method to aggregate the data.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果仔细查看`datetime`列，你会发现每分钟观察到一个数据点。因此，60个这样的数据点构成一个小时。让我们看看如何使用滚动方法来聚合数据。
- en: 'For rolling 60 data points, starting from each data point as one record, we
    provide 60 as the rolling window, which is shown as follows. This should return
    a plot similar to the hourly resampling previously obtained:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 对于滚动60个数据点，从每个数据点开始作为一个记录，我们提供60作为滚动窗口，如下所示。这应该会返回一个类似于之前按小时重新采样的图表：
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The following is the output:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/37f46407-9043-45da-be80-c267de613b0d.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/37f46407-9043-45da-be80-c267de613b0d.png)'
- en: Rolling every consecutive 60 points and aggregating them to give the median
    as the final value
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 滚动每60个连续数据点并聚合它们，最终给出中位数作为最终值
- en: 'For rolling at a day level, the rolling window should be *60 x 24*:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 对于按天滚动，滚动窗口应该是*60 x 24*：
- en: '[PRE13]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The following is the output:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/06283f03-667e-4846-894d-f5c8fefb263f.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/06283f03-667e-4846-894d-f5c8fefb263f.png)'
- en: Rolling every consecutive 60*24 points and aggregating them to give their median
    as the final value; this amounts to finding daily aggregate values for minute-level
    data
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 每60*24个连续点进行滚动并聚合，给出其中位数作为最终值；这相当于为分钟级别数据找到日聚合值
- en: Note that the median has been used for aggregation. You can also use any other
    function such as mean or sum.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，已经使用中位数进行聚合。你也可以使用其他函数，如均值或总和。
- en: Separating timestamp components
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分离时间戳组件
- en: A timestamp object is made of several components, namely, year, month, day,
    hour, minute, and second. For many time series analyses, it is important to segregate
    these components and keep them as new columns for later usage.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 一个时间戳对象由多个组件组成，即年、月、日、小时、分钟和秒。对于许多时间序列分析来说，将这些组件分离并作为新列保存以备后用是非常重要的。
- en: 'Since we have made the date column our index, it becomes a lot easier. A separate
    column for each component can be created as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经将日期列设置为索引，因此变得更加简便。可以如下创建每个组件的单独列：
- en: '[PRE14]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The following is the output:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '**![](img/0c99ae6f-a5b8-4684-9a77-5efe6f1c9140.png)**'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**![](img/0c99ae6f-a5b8-4684-9a77-5efe6f1c9140.png)**'
- en: Time series components created as separate columns
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 作为单独列创建的时间序列组件
- en: DateOffset and TimeDelta objects
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DateOffset和TimeDelta对象
- en: 'A `DateOffset` object represents a change or offset in time. The key features
    of a `DateOffset` object are as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`DateOffset`对象表示时间上的变化或偏移。`DateOffset`对象的主要特点如下：'
- en: This can be added to/subtracted from a `datetime` object to obtain a shifted
    date.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这可以加到/从`datetime`对象中减去，以获得平移后的日期。
- en: This can be multiplied by an integer (positive or negative) so that the increment
    can be applied multiple times.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这可以与一个整数（正数或负数）相乘，以便多次应用增量。
- en: This has the `rollforward` and `rollback` methods to move a date forward to
    the next offset date or backward to the previous offset date.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它具有`rollforward`和`rollback`方法，可以将日期向前移动到下一个偏移日期，或者向后移动到上一个偏移日期。
- en: 'Let''s create some date objects using the `datetime` method in `pandas`:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`pandas`中的`datetime`方法创建一些日期对象：
- en: '[PRE15]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Note that `datetime.datetime` is different from `pd.Timestamp`. The former is
    a Python class and is inefficient, while the latter is based on the `numpy.datetime64`
    datatype.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`datetime.datetime`与`pd.Timestamp`不同。前者是Python类且效率较低，而后者是基于`numpy.datetime64`数据类型的。
- en: The `pd.DateOffset` object works with `pd.Timestamp`, and adding it to a `datetime.datetime`
    function casts that object into a `pd.Timestamp` object.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`pd.DateOffset`对象与`pd.Timestamp`一起使用，将其加到`datetime.datetime`函数上，会将该对象转换为`pd.Timestamp`对象。'
- en: 'The following illustrates the command for 1 week from today:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令演示了从今天起的1周：
- en: '[PRE16]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The following illustrates the command for 5 years from today:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令演示了从今天起的5年：
- en: '[PRE17]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Here is an example of using the `rollforward` functionality. `QuarterBegin`
    is a `DateOffset` object that is used to increment a given `datetime` object to
    the start of the next calendar quarter:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是使用`rollforward`功能的一个例子。`QuarterBegin`是一个`DateOffset`对象，用于将给定的`datetime`对象递增到下一个日历季度的开始：
- en: '[PRE18]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Thus, we can see that the next quarter after December 31, 2013 starts on March
    1, 2014\. `Timedelta` is similar to `DateOffset` but works with `datetime.datetime`
    objects. The use of these objects is explained with the following command:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以看到2013年12月31日后的下一个季度从2014年3月1日开始。`Timedelta`类似于`DateOffset`，但它与`datetime.datetime`对象一起使用。使用这些对象的方法通过以下命令进行了说明：
- en: '[PRE19]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We have learned about datatypes, conversions between datatypes, date offsets,
    separating time components from timestamps, and so on, up to now. Next, we will
    see how we can apply some mathematical operators such as lagging, shifting, and
    so on.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经学习了数据类型、数据类型之间的转换、日期偏移、从时间戳中分离时间组件等内容。接下来，我们将看到如何应用一些数学运算符，例如滞后、平移等。
- en: Time series-related instance methods
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 时间序列相关的实例方法
- en: In this section, we explore various methods for time series objects such as
    shifting, frequency conversion, and resampling.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中，我们将探索各种时间序列对象的操作方法，如平移、频率转换和重采样。
- en: Shifting/lagging
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 平移/滞后
- en: 'Sometimes, we may wish to shift the values in a time series backward or forward
    in time. One possible scenario is when a dataset contains the list of start dates
    of the new employees in a firm, and the company''s HR program wishes to shift
    these dates forward by one year so that the employees'' benefits can be activated.
    We can do this by using the `shift()` function as follows:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们可能希望将时间序列中的值向前或向后移动。一种可能的场景是，当数据集包含公司中新员工的入职日期列表时，公司的 HR 程序希望将这些日期向前移动一年，以便激活员工的福利。我们可以通过以下方式使用
    `shift()` 函数来实现：
- en: '[PRE20]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This shifts all the calendar days. However, if we wish to shift only business
    days, we must use the following command:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这会偏移所有日历天数。然而，如果我们只希望偏移工作日，我们必须使用以下命令：
- en: '[PRE21]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: In the preceding snippet, we have specified the `freq` argument to shift; this
    tells the function to shift only the business days. The `shift` function has a
    `freq` argument whose value can be a `DateOffset` class, `TimeDelta`-like object,
    or an offset alias. Thus, using `ibmTS.shift(3, freq='B')` would also produce
    the same result.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们指定了 `freq` 参数来进行偏移；这告诉函数仅偏移工作日。`shift` 函数有一个 `freq` 参数，其值可以是 `DateOffset`
    类、类似 `TimeDelta` 的对象或偏移别名。因此，使用 `ibmTS.shift(3, freq='B')` 也会产生相同的结果。
- en: Frequency conversion
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 频率转换
- en: Time series usually comes with a fixed frequency, for example, every microsecond,
    every second, every minute, and so on. These frequencies can be changed from one
    to another.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 时间序列通常具有固定的频率，例如每微秒、每秒、每分钟等。这些频率可以相互转换。
- en: 'We can use the `asfreq` function to change frequencies, as shown in the following
    snippet:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `asfreq` 函数来更改频率，如以下代码片段所示：
- en: '[PRE22]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: In this case, we just obtain the values corresponding to the last day of the
    month from the `ibmTS` time series. Here, `bm` stands for business month end frequency.
    For a list of all possible frequency aliases, go to [http://pandas.pydata.org/pandas-docs/stable/timeseries.html#offset-aliases](http://pandas.pydata.org/pandas-docs/stable/timeseries.html#offset-aliases).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们只获取 `ibmTS` 时间序列中与每月最后一天对应的值。这里，`bm` 代表工作月末频率。有关所有可能频率别名的列表，请访问 [http://pandas.pydata.org/pandas-docs/stable/timeseries.html#offset-aliases](http://pandas.pydata.org/pandas-docs/stable/timeseries.html#offset-aliases)。
- en: 'If we specify a frequency that is smaller than the granularity of the data,
    the gaps will be filled in with `NaN` values:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们指定的频率小于数据的粒度，空缺值将会填充为 `NaN`：
- en: '[PRE23]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: We can also apply the `asfreq` method to the `Period` and `PeriodIndex` objects,
    similar to how we do it for the `datetime` and `Timestamp` objects. `Period` and
    `PeriodIndex` are introduced later and are used to represent time intervals.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以将 `asfreq` 方法应用于 `Period` 和 `PeriodIndex` 对象，类似于在 `datetime` 和 `Timestamp`
    对象上的操作。`Period` 和 `PeriodIndex` 是稍后引入的，用于表示时间区间。
- en: 'The `asfreq` method accepts a method argument that allows you to forward fill
    (`ffill`) or back fill the gaps, similar to `fillna`:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`asfreq` 方法接受一个方法参数，允许你使用前向填充（`ffill`）或后向填充来填补空缺，类似于 `fillna`：'
- en: '[PRE24]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Resampling of data
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据重采样
- en: The `TimeSeries.resample` function enables us to summarize/aggregate more granular
    data, based on a sampling interval and a sampling function.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`TimeSeries.resample` 函数使我们能够基于采样间隔和采样函数对更精细的数据进行汇总/聚合。'
- en: Downsampling is a term that originates from digital signal processing and refers
    to the process of reducing the sampling rate of a signal. In the case of data,
    we use it to reduce the amount of data that we wish to process.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 下采样是一个源自数字信号处理的术语，指的是降低信号采样率的过程。在数据处理中，我们使用它来减少我们希望处理的数据量。
- en: The opposite process is upsampling, which is used to increase the amount of
    data to be processed and requires interpolation to obtain the intermediate data
    points.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 相反的过程是上采样，它用于增加需要处理的数据量，并且需要插值来获得中间数据点。
- en: For more information on downsampling and upsampling, refer to *Practical Applications
    of Upsampling and Downsampling* at [http://bit.ly/1JC95HD](http://bit.ly/1JC95HD)
    and *Downsampling Time Series for Visual Representation* at [http://bit.ly/1zrExVP](http://bit.ly/1zrExVP).
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 关于下采样和上采样的更多信息，请参考 *上采样和下采样的实际应用*，链接为 [http://bit.ly/1JC95HD](http://bit.ly/1JC95HD)
    以及 *为视觉表示进行时间序列下采样*，链接为 [http://bit.ly/1zrExVP](http://bit.ly/1zrExVP)。
- en: 'Here, we examine some tick data for use in resampling. Before we examine the
    data, we need to prepare it. In doing so, we will learn some useful techniques
    for time series data, which are as follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们查看一些逐笔数据，以用于重采样。在查看数据之前，我们需要先准备它。通过这一步，我们将学习一些关于时间序列数据的有用技巧，具体如下：
- en: Epoch timestamps
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 纪元时间戳
- en: Time zone handling
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时区处理
- en: 'Here is an example that uses tick data for the stock prices of Google for Tuesday,
    May 27, 2014:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个使用2014年5月27日星期二谷歌股票的逐笔数据的示例：
- en: '[PRE25]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The source for the preceding data can be found at [http://chartapi.finance.yahoo.com/instrument/1.0/GOOG/chartdata;type=quote;range=1d/csv](http://chartapi.finance.yahoo.com/instrument/1.0/GOOG/chartdata;type=quote;range=1d/csv).
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 前述数据的来源可以在 [http://chartapi.finance.yahoo.com/instrument/1.0/GOOG/chartdata;type=quote;range=1d/csv](http://chartapi.finance.yahoo.com/instrument/1.0/GOOG/chartdata;type=quote;range=1d/csv)
    找到。
- en: As you can see in the preceding code, we have a `Timestamp` column along with
    the columns for the closing, high, low, and opening prices, and the volume of
    trades of the Google stock.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在前面的代码中看到的，我们有一个 `Timestamp` 列，以及表示谷歌股票的收盘价、最高价、最低价、开盘价和交易量的列。
- en: 'So, why does the `Timestamp` column seem a bit strange? Well, tick data timestamps
    are generally expressed in epoch time (for more information, refer to [http://en.wikipedia.org/wiki/Unix_epoch](http://en.wikipedia.org/wiki/Unix_epoch))
    as a more compact means of storage. We''ll need to convert this into a more human-readable
    time format, and we can do this as follows:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，为什么 `Timestamp` 列看起来有点奇怪呢？其实，逐笔数据的时间戳通常以纪元时间表示（有关更多信息，请参见 [http://en.wikipedia.org/wiki/Unix_epoch](http://en.wikipedia.org/wiki/Unix_epoch)），这是一种更紧凑的存储方式。我们需要将其转换为更易于阅读的时间格式，可以按如下方式进行转换：
- en: '[PRE26]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We would now like to make the `tstamp` column the index and eliminate the epoch
    `Timestamp` column:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们想将 `tstamp` 列设置为索引，并删除纪元的 `Timestamp` 列：
- en: '[PRE27]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Note that the `tstamp` index column has the times in **Universal Time Coordinated**
    (**UTC**), and we can convert these times to US/Eastern Time using two operators: `tz_localize`
    and `tz_convert`:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`tstamp` 索引列的时间是 **世界协调时间** (**UTC**)，我们可以通过两个操作符 `tz_localize` 和 `tz_convert`
    将这些时间转换为美国东部时间：
- en: '[PRE28]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: From the preceding output (`**Out[213]**`), we can see ticks for every minute
    of the trading day—from 9:30 a.m., when the stock market opens, to 4:00 p.m.,
    when it closes. This results in 390 rows in the dataset since there are 390 minutes
    between 9:30 a.m. and 4:00 p.m.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 从之前的输出（`**Out[213]**`）中，我们可以看到交易日中每分钟的逐笔数据——从早上9:30，股市开盘，到下午4:00，股市闭盘。由于从9:30到16:00有390分钟，所以数据集中有390行。
- en: 'Suppose we want to obtain a snapshot every 5 minutes instead of every minute?
    We can achieve this using downsampling as follows:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们希望每5分钟获取一次快照，而不是每分钟一次？我们可以通过降采样来实现，如下所示：
- en: '[PRE29]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The default function used for resampling is the mean. However, we can also
    specify other functions, such as the minimum, and we can do this using the `how`
    parameter to resample:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 重采样时默认使用的函数是均值。然而，我们也可以指定其他函数，例如最小值，并且可以通过 `how` 参数进行重采样。
- en: '[PRE30]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Various function names can be passed to the `how` parameter, such as `sum`,
    `ohlc`, `max`, `min`, `std`, `mean`, `median`, `first`, and `last`.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 可以将各种函数名称传递给 `how` 参数，例如 `sum`、`ohlc`、`max`、`min`、`std`、`mean`、`median`、`first`
    和 `last`。
- en: 'The `ohlc` function returns open-high-low-close values on time series data,
    which are the first, maximum, minimum, and last values. To specify whether the
    left or right interval is closed, we can pass the `closed` parameter as follows:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`ohlc` 函数返回时间序列数据的开盘、最高、最低和收盘值，分别是第一值、最大值、最小值和最后值。要指定左侧或右侧区间是否闭合，我们可以传递 `closed`
    参数，如下所示：'
- en: '[PRE31]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Thus, in the preceding command, we can see that the last row shows the tick
    at 15:55 instead of 16:00.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在前面的命令中，我们可以看到最后一行显示的是15:55的逐笔数据，而不是16:00。
- en: 'For upsampling, we need to specify a fill method to determine how the gaps
    should be filled through the `fill_method` parameter:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 对于上采样，我们需要通过 `fill_method` 参数指定填充方法，以确定如何填充间隙：
- en: '[PRE32]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The `fill_method` parameter currently supports only two methods—`forwardfill`
    and `backfill.` An interpolation method can also be supported, though, which would
    be vary.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '`fill_method` 参数目前仅支持两种方法——`forwardfill` 和 `backfill`。不过，也可以支持插值方法，具体方法会有所不同。'
- en: Aliases for time series frequencies
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 时间序列频率的别名
- en: 'To specify offsets, a number of aliases are available; some of the most commonly
    used ones are as follows:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 要指定偏移量，可以使用许多别名；以下是一些最常用的别名：
- en: '**B, BM**: This stands for business day, business month. These are the working
    days of the month, that is, any day that is not a holiday or a weekend.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**B, BM**：表示工作日，工作月。这是指一个月的工作日，即任何不是假期或周末的日子。'
- en: '**D, W, M, Q, A**: This stands for calendar day, week, month, quarter, and
    year end.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**D, W, M, Q, A**：分别表示日历日、周、月、季度和年末。'
- en: '**H, T, S, L, U**: This stands for hour, minute, second, millisecond, and microsecond.'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**H, T, S, L, U**：分别表示小时、分钟、秒、毫秒和微秒。'
- en: 'These aliases can also be combined. In the following case, we resample every
    7 minutes and 30 seconds:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这些别名也可以组合使用。在以下的例子中，我们以每 7 分钟 30 秒进行重采样：
- en: '[PRE33]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Suffixes can be applied to the frequency aliases to specify when in frequency
    period to start. These are known as anchoring offsets:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 可以将后缀应用于频率别名，以指定在频率周期中何时开始。这些被称为锚定偏移量：
- en: '**W – SUN, MON, ... example**: W-TUE indicates a weekly frequency starting
    on a Tuesday.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**W – SUN, MON, ... 示例**：W-TUE 表示每周频率，从星期二开始。'
- en: '**Q – JAN, FEB, ... DEC example**: Q-MAY indicates a quarterly frequency with
    the year end in May.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Q – JAN, FEB, ... DEC 示例**：Q-MAY 表示一个季度频率，并且该季度的年末是 5 月。'
- en: '**A – JAN, FEB, ... DEC example**: A-MAY indicates an annual frequency with
    the year end in May.'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**A – JAN, FEB, ... DEC 示例**：A-MAY 表示一个年度频率，并且该年度的年末是 5 月。'
- en: These offsets can be used as arguments for the `date_range` and `bdate_range`
    functions, as well as constructors for index types such as `PeriodIndex` and `DatetimeIndex`.
    A comprehensive discussion on this can be found in the pandas documentation at
    [http://pandas.pydata.org/pandas-docs/stable/timeseries.html#](http://pandas.pydata.org/pandas-docs/stable/timeseries.html#).
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 这些偏移量可以作为参数用于 `date_range` 和 `bdate_range` 函数，以及用于 `PeriodIndex` 和 `DatetimeIndex`
    等索引类型的构造函数。关于这一点的详细讨论可以在 pandas 文档中找到，网址为 [http://pandas.pydata.org/pandas-docs/stable/timeseries.html#](http://pandas.pydata.org/pandas-docs/stable/timeseries.html#)。
- en: Time series concepts and datatypes
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 时间序列概念和数据类型
- en: 'When dealing with time series, there are two main concepts that you have to
    consider: points in time ranges, and time spans. In pandas, the former is represented
    by the `Timestamp` datatype, which is equivalent to the Python `datatime.datetime`
    (`datetime`) datatype and is interchangeable with it. The latter (time span) is
    represented by the `Period` datatype, which is specific to pandas.'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 处理时间序列时，必须考虑两个主要概念：时间范围中的点和时间跨度。在 pandas 中，前者由`Timestamp`数据类型表示，它等价于 Python
    的`datetime.datetime`（`datetime`）数据类型，并且可以互换使用。后者（时间跨度）由`Period`数据类型表示，这是 pandas
    特有的。
- en: 'Each of these datatypes has index datatypes associated with them: `DatetimeIndex`
    for `Timestamp`/`Datetime` and `PeriodIndex` for `Period`. These index datatypes
    are basically subtypes of `numpy.ndarray` that contain the corresponding `Timestamp`
    and `Period` datatypes and can be used as indexes for the `Series` and `DataFrame`
    objects.'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 每种数据类型都有与之关联的索引数据类型：`Timestamp`/`Datetime` 对应 `DatetimeIndex`，`Period` 对应 `PeriodIndex`。这些索引数据类型基本上是
    `numpy.ndarray` 的子类型，包含对应的 `Timestamp` 和 `Period` 数据类型，可以用作 `Series` 和 `DataFrame`
    对象的索引。
- en: Period and PeriodIndex
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Period 和 PeriodIndex
- en: 'The `Period` datatype is used to represent a range or span of time. Here are
    a few examples:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`Period` 数据类型用于表示时间范围或时间跨度。以下是一些示例：'
- en: '[PRE34]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'We can add integers to the `Period` datatypes to advance the period by the
    requisite number of frequency units:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以向 `Period` 数据类型添加整数，以按所需的频率单位数量推进时间周期：
- en: '[PRE35]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'We can also calculate the difference between two the `Period` datatypes and
    return the number of units of frequency between them:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以计算两个 `Period` 数据类型之间的差异，并返回它们之间的频率单位数量：
- en: '[PRE36]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: PeriodIndex
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PeriodIndex
- en: 'A `PeriodIndex` function, which is an `index` type for a `Period` object, can
    be created in two ways:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '`PeriodIndex` 是一个用于 `Period` 对象的索引类型，可以通过两种方式创建：'
- en: 'You can do it from a series of Period objects using the `period_range` function
    to create an analogue of `date_range`:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以通过使用 `period_range` 函数从一系列 `Period` 对象中创建一个类似于 `date_range` 的对象：
- en: '[PRE37]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: As we can confirm from the preceding command, when you pull the covers, a `PeriodIndex`
    function is really an `ndarray` of `Period` objects.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们从前面的命令中确认的，当你展开 `PeriodIndex` 时，它实际上是一个包含`Period`对象的`ndarray`。
- en: 'It can also be done through a direct call to the `Period` constructor:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 也可以通过直接调用 `Period` 构造函数来实现：
- en: '[PRE38]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The difference between the two approaches, as can be seen from the preceding
    output, is that `period_range` fills in the resulting `ndarray`, but the `Period`
    constructor does not, and you have to specify all the values that should be in
    the index.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的输出可以看出，这两种方法之间的区别在于，`period_range` 会填充结果中的 `ndarray`，而 `Period` 构造函数不会，你必须指定所有应包含在索引中的值。
- en: Conversion between time series datatypes
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 时间序列数据类型之间的转换
- en: 'We can convert the `Period` and `PeriodIndex` datatypes to the `Datetime`/`Timestamp`
    and `DatetimeIndex` datatypes through the `to_period` and `to_timestamp` functions,
    as follows:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过 `to_period` 和 `to_timestamp` 函数将 `Period` 和 `PeriodIndex` 数据类型转换为 `Datetime`/`Timestamp`
    和 `DatetimeIndex` 数据类型，如下所示：
- en: '[PRE39]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: In the preceding examples, note how periods are converted into timestamps and
    vice versa.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，注意如何将周期转换为时间戳，反之亦然。
- en: A summary of time series-related objects
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 时间序列相关对象的总结
- en: 'There are many time series-related objects in pandas that are used for manipulating,
    creating, and processing timestamp data. The following table gives a summary of
    time series-related objects:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 中有许多与时间序列相关的对象，用于操作、创建和处理时间戳数据。以下表格总结了这些时间序列相关的对象：
- en: '| **Object** | **Summary** |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| **对象** | **总结** |'
- en: '| `datetime.datetime` | This is a standard Python `datetime` class. |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| `datetime.datetime` | 这是一个标准的 Python `datetime` 类。 |'
- en: '| `Timestamp` | This is a `pandas` class derived from. `datetime.datetime`.
    |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| `Timestamp` | 这是一个派生自 `datetime.datetime` 的 `pandas` 类。 |'
- en: '| `DatetimeIndex` | This is a `pandas` class and is implemented as an immutable
    `numpy.ndarray` of the `Timestamp`/`datetime` object type. |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| `DatetimeIndex` | 这是一个 `pandas` 类，实现为不可变的 `numpy.ndarray` 类型，元素为 `Timestamp`/`datetime`
    对象。 |'
- en: '| `Period` | This is a `pandas` class representing a time period. |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
  zh: '| `Period` | 这是一个表示时间段的 `pandas` 类。 |'
- en: '| `PeriodIndex` | This is a `pandas` class and is implemented as an immutable
    `numpy.ndarray` of the `Period` object type. |'
  id: totrans-190
  prefs: []
  type: TYPE_TB
  zh: '| `PeriodIndex` | 这是一个 `pandas` 类，实现为不可变的 `numpy.ndarray` 类型，元素为 `Period` 对象。
    |'
- en: '| `DateOffset` | `DataOffset` is used to move forward a date by a given number
    of valid dates (days, weeks, months, and so on). |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
  zh: '| `DateOffset` | `DateOffset` 用于将日期向前移动一定数量的有效日期（天、周、月等）。 |'
- en: '| `timedelta` | `Timedelta` calculates the difference in time between two dates.
    |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '| `timedelta` | `Timedelta` 计算两个日期之间的时间差。 |'
- en: Interconversions between strings and timestamps
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字符串和时间戳之间的相互转换
- en: 'Consider the following `DataFrame` with a column containing strings representing
    dates and a column containing numeric values:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下包含表示日期的字符串列和包含数值的列的 `DataFrame`：
- en: '[PRE40]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The following is the output:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/7bdd565b-0582-4426-9c33-008102116533.png)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7bdd565b-0582-4426-9c33-008102116533.png)'
- en: Creating a DataFrame with a date column
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个包含日期列的 DataFrame
- en: 'The datatype of the time series column can be seen to be an object and not
    a timestamp. The following code and its output confirms that:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 可以看到，时间序列列的数据类型是对象而不是时间戳。以下代码及其输出确认了这一点：
- en: '[PRE41]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The following is the output:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/6604fc4c-1dfc-4498-9edb-545c717c878c.png)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6604fc4c-1dfc-4498-9edb-545c717c878c.png)'
- en: 'The `to_datetime` function helps in converting the string to `datetime`:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '`to_datetime` 函数有助于将字符串转换为 `datetime`：'
- en: '[PRE42]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The following is the output:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/766f3bd6-abc8-48b6-a585-e4bbb61eb554.png)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![](img/766f3bd6-abc8-48b6-a585-e4bbb61eb554.png)'
- en: Converting the string format date column to a datetime format
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 将字符串格式的日期列转换为 datetime 格式
- en: The pandas `to_datetime` function converts a column of strings into `datetime`,
    given the format of the string. The `infer_datetime_format` argument of this function
    automatically detects the format and parses the string into `datetime`. The `exact`
    argument, when set to `False`, looks for the closest matching format and helps
    to overcome cases where there is not an exact match to the specified format.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 的 `to_datetime` 函数根据字符串的格式将字符串列转换为 `datetime`。该函数的 `infer_datetime_format`
    参数可以自动检测格式并将字符串解析为 `datetime`。当将 `exact` 参数设置为 `False` 时，它会查找最接近的匹配格式，帮助解决格式无法完全匹配的情况。
- en: 'The conversion shown can also be done using the `strptime` function from the `datetime`
    library:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 如下所示的转换也可以使用来自 `datetime` 库的 `strptime` 函数来完成：
- en: '[PRE43]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The conversion from `datetime` to a string is aided by the `strftime` function,
    which accepts the format for the resulting string:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `datetime` 转换为字符串可以借助 `strftime` 函数，该函数接受输出字符串的格式：
- en: '[PRE44]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The following is the output:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/e3983b78-e499-4916-ace1-8fd56f743eec.png)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e3983b78-e499-4916-ace1-8fd56f743eec.png)'
- en: Converting the datetime format date column to a string format
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 将日期列的datetime格式转换为字符串格式
- en: Here, the original `datetime` value was in the `%Y-%m-%d` format. However, the
    `strftime` function allowed a change in format.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，原始的`datetime`值是`%Y-%m-%d`格式。然而，`strftime`函数允许格式更改。
- en: 'Interconversion between the string and `datetime` can also be achieved through
    the `astype()` method, as follows:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串和`datetime`之间的相互转换也可以通过`astype()`方法实现，具体如下：
- en: '[PRE45]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Data-processing techniques for time series data
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 时间序列数据的数据处理技术
- en: This section deals with common data manipulation or feature engineering techniques
    used with time series data before applying machine learning techniques.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 本节处理的是在应用机器学习技术之前，常用于时间序列数据的常见数据处理或特征工程技术。
- en: Data transformation
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据转换
- en: 'Consider the following pieces of a single dataset:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 请考虑以下单个数据集的各个部分：
- en: '[PRE46]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'The following screenshot shows the head of sensor data that contains the time
    series components of unequal length:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了包含不等长时间序列组件的传感器数据头部：
- en: '![](img/fee3fe00-8e18-4b45-9b88-c9063e610620.png)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fee3fe00-8e18-4b45-9b88-c9063e610620.png)'
- en: Head of sensor data containing time series components of unequal length
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 包含不等长时间序列组件的传感器数据头部
- en: 'The following screenshot shows the tail of sensor data that contains the time
    series components of unequal length:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了包含不等长时间序列组件的传感器数据尾部：
- en: '![](img/2fc2a5d7-ada6-4945-bb5e-93b52c307a6b.png)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2fc2a5d7-ada6-4945-bb5e-93b52c307a6b.png)'
- en: Tail of sensor data containing time series components of unequal length
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 包含不等长时间序列组件的传感器数据尾部
- en: 'The dataset here consists of time series data in 10-minute intervals for 314
    different devices. All these 314 devices have data captured for different durations.
    Let''s examine the duration for which data has been captured in each device:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的数据集由314个不同设备的10分钟间隔时间序列数据组成。所有这些314个设备的数据捕获持续时间各不相同。我们来看看每个设备的数据捕获持续时间：
- en: '[PRE47]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'The following is the output:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/505b227b-c76c-463d-b5de-2e9a7dd85ae7.png)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![](img/505b227b-c76c-463d-b5de-2e9a7dd85ae7.png)'
- en: Summary of sensor data
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 传感器数据摘要
- en: 'The lengths of data for each device vary drastically. Several time series problems
    such as Shapelet transformation and **Long-Short Term Memory** (**LSTM**) require
    the length of data for each device to be the same. The following code snippet
    truncates each device to the highest possible length:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 每个设备的数据长度差异很大。像Shapelet变换和**长短期记忆**（**LSTM**）等多个时间序列问题要求每个设备的数据长度相同。以下代码片段将每个设备的数据截断到可能的最大长度：
- en: '[PRE48]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'After truncating, the length can be seen to be uniform. It can be checked by
    running the following:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 截断后，长度已统一。可以通过运行以下代码进行验证：
- en: '[PRE49]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'The following is the output:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/4cf564c0-479f-4a63-a45b-070775bdf62a.png)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4cf564c0-479f-4a63-a45b-070775bdf62a.png)'
- en: Summary of sensor data after all the time series components have been made 
    equal in length
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 所有时间序列组件长度统一后的传感器数据摘要
- en: 'Let''s perform feature extraction for the following univariate time series
    data:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们对以下单变量时间序列数据进行特征提取：
- en: '[PRE50]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'The following is the output:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/5fc244c0-36bd-42a8-8245-d940e8f00af7.png)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5fc244c0-36bd-42a8-8245-d940e8f00af7.png)'
- en: Reading the occupancy data and setting the datetime column as an index
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 读取占用数据并将日期时间列设置为索引
- en: 'Feature extraction is vital for performing machine learning with time series
    data in order to obtain better performance metrics. Here, let''s extract the rolling
    mean, rolling standard deviation, and gradient for the temperature data:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 特征提取对于使用时间序列数据进行机器学习至关重要，以便获得更好的性能指标。在这里，我们提取温度数据的滚动均值、滚动标准差和梯度：
- en: '[PRE51]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'The following is the output:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/6016b1a5-e00f-4334-a740-2df6ad4bfe4f.png)'
  id: totrans-250
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6016b1a5-e00f-4334-a740-2df6ad4bfe4f.png)'
- en: Feature (5_day_mean, 5_day_std) generation using rolling functions
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 使用滚动函数生成特征（5_day_mean, 5_day_std）
- en: The first 5 rows with `NA` values have been dropped in the feature extraction
    process. Here, the features have been extracted for a rolling window of 5 days.
    Using a similar method, it is possible to extract hundreds of features from a
    time series variable.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 在特征提取过程中，前五行包含`NA`值的数据已被删除。在此，特征已被提取用于5天的滚动窗口。使用类似的方法，可以从时间序列变量中提取数百个特征。
- en: Plotting using matplotlib
  id: totrans-253
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用matplotlib绘图
- en: 'This section provides a brief introduction to plotting in `pandas` using `matplotlib`.
    The `matplotlib` API is imported using the standard convention, as shown in the
    following command:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 本节简要介绍了如何使用`matplotlib`在`pandas`中绘图。`matplotlib`的API是通过标准惯例导入的，如下所示的命令：
- en: '[PRE52]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '`Series` and `DataFrame` have a plot method, which is simply a wrapper around
    `plt.plot`. Here, we will examine how we can do a simple plot of a sine and cosine
    function. Suppose we wished to plot the following functions over the interval
    pi to pi:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '`Series`和`DataFrame`都有一个绘图方法，它实际上是`plt.plot`的一个封装。这里，我们将讨论如何绘制正弦和余弦函数的简单图形。假设我们希望在区间从π到π绘制以下函数：'
- en: f(x) = cos(x) + sin (x)
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: f(x) = cos(x) + sin (x)
- en: g(x) = cos (x) - sin (x)
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: g(x) = cos (x) - sin (x)
- en: 'This gives the following interval:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给出以下区间：
- en: '[PRE53]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'We can now plot the DataFrame using the `plot()` command and the `plt.show()`
    command to display it:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以使用`plot()`命令绘制DataFrame，并使用`plt.show()`命令显示它：
- en: '[PRE54]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The following is the output of the preceding command:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前述命令的输出：
- en: '![](img/d0e5ea2c-63ff-427d-b75d-6284324de2ed.png)'
  id: totrans-264
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d0e5ea2c-63ff-427d-b75d-6284324de2ed.png)'
- en: Plotting time series data using matplotlib
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 使用matplotlib绘制时间序列数据
- en: 'We can also plot the two series (functions) separately in different subplots,
    using the following command:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以分别在不同的子图中绘制这两个序列（函数），使用以下命令：
- en: '[PRE55]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'The following is the output of the preceding command:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前述命令的输出：
- en: '![](img/6c66a11d-0623-4c75-966d-87f52a41c6f4.png)'
  id: totrans-269
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6c66a11d-0623-4c75-966d-87f52a41c6f4.png)'
- en: Plotting some more time series data using matplotlib
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 使用matplotlib绘制更多时间序列数据
- en: There is a lot more to using the plotting functionality of `matplotlib` within
    pandas. For more information, take a look at the documentation at [http://pandas.pydata.org/pandas-docs/dev/visualization.html](http://pandas.pydata.org/pandas-docs/dev/visualization.html).
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 在pandas中使用`matplotlib`的绘图功能还有很多其他用法。欲了解更多信息，请查看文档：[http://pandas.pydata.org/pandas-docs/dev/visualization.html](http://pandas.pydata.org/pandas-docs/dev/visualization.html)。
- en: 'It is often quite useful to visualize all the variables of a multivariate time
    series data. Let''s plot all the variables of the following data in a single plot.
    Note that the `date` column is the index here:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 可视化多变量时间序列数据中的所有变量通常非常有用。让我们在单一图表中绘制以下数据的所有变量。请注意，`date`列在此处是索引：
- en: '![](img/835188e4-e7f5-4bdd-bc95-0a2bcc444ec5.png)'
  id: totrans-273
  prefs: []
  type: TYPE_IMG
  zh: '![](img/835188e4-e7f5-4bdd-bc95-0a2bcc444ec5.png)'
- en: Occupancy dataset
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 占用数据集
- en: 'The subplot feature in matplotlib lets us plot all of the variables at once:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: matplotlib中的子图功能允许我们一次绘制所有变量：
- en: '[PRE56]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'The following is the output:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/ea11a97f-7055-4c48-a0f6-3a2a02556819.png)'
  id: totrans-278
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ea11a97f-7055-4c48-a0f6-3a2a02556819.png)'
- en: Time series plot for all the variables in the occupancy dataset
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 占用数据集中所有变量的时间序列图
- en: Summary
  id: totrans-280
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we discussed time series data and the steps you can take to
    process and manipulate it. A `date` column can be assigned as an index for `Series`
    or `DataFrame` and can then be used for subsetting them based on the index column. Time
    series data can be resampled—to either increase or decrease the frequency of the
    time series. For example, data generated every millisecond can be resampled to
    capture the data only every second or can be averaged for 1,000 milliseconds for
    each second. Similarly, data generated every minute can be resampled to have data
    every second by backfilling or forward filling (filling in the same value as the
    last or next minute value for all the seconds in that minute).
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论了时间序列数据及其处理和操作步骤。可以将`date`列指定为`Series`或`DataFrame`的索引，然后可以根据索引列对子集进行操作。时间序列数据可以重新采样——既可以增加也可以减少时间序列的频率。例如，每毫秒生成的数据可以重新采样为每秒捕获一次数据，或者每秒的1,000毫秒可以取平均值。类似地，每分钟生成的数据可以通过向前或向后填充重新采样为每秒一次（使用该分钟的最后一个或下一个分钟的值填充所有秒数据）。
- en: String to datetime conversion can be done via the `datetime`, `strptime`, and `strftime` packages
    , and each type of date entry (for example, 22^(nd) July, 7/22/2019, and so on)
    needs to be decoded differently based on a convention. pandas has the following
    types of time series objects—`datetime.datetime`, `Timestamp`, `DateIndex`, `Period`,
    `PeriodIndex`, `timedelta`, and so on. Certain algorithms for time series classification
    such as shapelets and LSTM require time series components (one separable data
    entity containing multiple entries of time series data) to be of the same length.
    This can be done either by truncating all the components to the smallest length
    or expanding them to the longest length and imputing with zeros or some other
    value. Matplotlib can be used to plot basic time series data. Shifting, lagging,
    and rolling functions are used to calculate moving averages, detecting behavioral
    change at time series component change points.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串到日期时间的转换可以通过`datetime`、`strptime`和`strftime`包来完成，每种日期输入格式（例如，22^(nd) July、7/22/2019等）需要根据约定采用不同的解码方式。pandas
    有以下类型的时间序列对象——`datetime.datetime`、`Timestamp`、`DateIndex`、`Period`、`PeriodIndex`、`timedelta`等。某些时间序列分类算法，如形状特征（shapelets）和LSTM，需要时间序列组件（一个可分离的数据实体，包含多个时间序列数据条目）的长度相同。这可以通过将所有组件截断为最小长度，或者扩展到最大长度并用零或其他值进行填充来实现。Matplotlib
    可以用于绘制基本的时间序列数据。移位、滞后和滚动函数用于计算移动平均，检测时间序列组件变动点的行为变化。
- en: In the next chapter, we will learn how to use the power of pandas in Jupyter
    Notebooks to make powerful and interactive reports.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将学习如何在 Jupyter Notebooks 中利用 pandas 的强大功能来制作强大且互动的报告。
