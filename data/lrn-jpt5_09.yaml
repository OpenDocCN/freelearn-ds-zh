- en: Interactive Widgets
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交互式小部件
- en: There is a mechanism for Jupyter to gather input from the user while the script
    is running. To do this, we put coding in the use of a widget or user interface
    control in the script. The widgets we will use in this chapter are defined at [http://ipywidgets.readthedocs.io/en/latest/](http://ipywidgets.readthedocs.io/en/latest/)
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Jupyter有一个机制可以在脚本运行时收集用户的输入。为了实现这一点，我们在脚本中使用小部件或用户界面控制进行编码。本章中我们将使用的小部件定义在[http://ipywidgets.readthedocs.io/en/latest/](http://ipywidgets.readthedocs.io/en/latest/)
- en: 'For example, there are widgets for the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，有以下小部件：
- en: '**Text input**:The Notebook user enters a string that will be used later in
    the script.'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文本输入**：Notebook用户输入一个字符串，该字符串将在后续脚本中使用。'
- en: '**Button clicks**:Thesepresent the user with multiple options by way of buttons.
    Then, depending on which button is selected (clicked on); your script can change
    direction according to the user.'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**按钮点击**：这些通过按钮向用户展示多个选项。然后，依据选择的按钮（点击的按钮），你的脚本可以根据用户选择的按钮改变方向。'
- en: '**Slider**:You can provide the user with a slider where the user can select
    a value within the range you specify, and then your script can use that value
    accordingly.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**滑块**：你可以为用户提供一个滑块，让用户在你指定的范围内选择一个值，然后你的脚本可以根据这个值进行相应的操作。'
- en: '**Toggle box and checkboxes**:Theselet the user select the different options
    of your script that they are interested in working with.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**切换框和复选框**：这些让用户选择他们有兴趣操作的脚本选项。'
- en: '**Progress bar**:Aprogress bar can be used to show how far along they are in
    a multi-step process.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**进度条**：进度条可以用来显示他们在多步骤过程中已完成的进度。'
- en: In some cases, this can be wide open as the underlying *gather input from the
    user* is generally available. Therefore, you could make really interesting widgets
    that do not fit the standard user, input a control paradigm. For example, there
    is a widget allowing a user to click on a geographical map to discover data.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，这个机制可以完全开放，因为底层的*从用户收集输入*通常是可用的。因此，你可以制作出不符合标准用户输入控制范式的非常有趣的小部件。例如，有一个小部件允许用户点击地理地图以发现数据。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: Installing widgets
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装小部件
- en: Widget basics
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小部件基础
- en: Interact widget
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Interact小部件
- en: Interactive widget
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交互式小部件
- en: Widgets package
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小部件包
- en: Installing widgets
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装小部件
- en: 'The widgets package is an upgrade to the standard Jupyter installation. You
    can update the widgets package using this command:'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小部件包是对标准Jupyter安装的升级。你可以使用这个命令来更新小部件包：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Once complete, you must then upgrade your Jupyter installation using this command:'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完成后，你必须使用这个命令来升级你的Jupyter安装：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'And then you must use this command:'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后你必须使用这个命令：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We put together a basic example widget Notebook to make sure everything is
    working:'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们整理了一个基本示例小部件笔记本，以确保一切正常工作：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We end up with the following screenshot, where the container widget is displayed
    enclosing the slider and the message box:'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最终我们得到了以下截图，其中显示了包含滑块和消息框的容器小部件：
- en: '![](img/eb4e0f64-ff6d-4e04-a27f-8cbe06b8a4b4.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eb4e0f64-ff6d-4e04-a27f-8cbe06b8a4b4.png)'
- en: Widget basics
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 小部件基础
- en: 'All widgets work the same, generally:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 所有小部件通常以相同的方式工作：
- en: You can create or define an instance of a widget.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以创建或定义一个小部件实例。
- en: You can preset the attributes of a widget, such as its initial value, or a label
    to be displayed.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以预设小部件的属性，比如它的初始值或要显示的标签。
- en: Widgets can react to different inputs from a user. The inputs are gathered by
    a handler or Python function that is invoked when a user performs some action
    on a widget, for example, to call the handler if the user clicks on a button.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小部件可以对用户的不同输入做出反应。这些输入是通过一个处理器或Python函数收集的，当用户对小部件执行某些操作时，函数就会被调用。例如，当用户点击按钮时，调用处理器。
- en: The value of a widget can be used later in your script just as any other variable.
    For example, you can use a widget to determine how many circles to draw.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小部件的值可以像任何其他变量一样在脚本中使用。例如，你可以使用一个小部件来确定绘制多少个圆。
- en: Interact widget
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Interact小部件
- en: Interact is the basic widget which is appears to be used to derive all other
    widgets. It has variable arguments, and depending on the arguments, will portray
    a different kind of user input control.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Interact是一个基本的小部件，似乎用于衍生所有其他小部件。它具有可变参数，依赖于参数的不同，将呈现不同种类的用户输入控制。
- en: Interact widget slidebar
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Interact小部件滑动条
- en: 'We can use interact to produce a slidebar by passing in an extent. For example,
    we have the following script:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用interact通过传入一个范围来生成一个滑动条。例如，以下是我们的脚本：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note that the semicolon following the `interact` function call is required.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`interact`函数调用后的分号是必须的。
- en: 'We have a script which does the following:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个脚本，它会执行以下操作：
- en: References the package we want to use
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引用我们要使用的包
- en: Defines a function that is called for every user input of a value
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义一个函数，每次用户输入一个值时都会调用此函数。
- en: Calls to interact, passing our handler and a range of values
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用`interact`，传递我们的处理函数和一系列值
- en: 'When we run this script, we get a scrollbar that is modifiable by the user:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行此脚本时，我们会得到一个用户可修改的滚动条：
- en: '![](img/cd952981-9135-4f32-9feb-9b1a599b69d2.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cd952981-9135-4f32-9feb-9b1a599b69d2.png)'
- en: The user is able to slide the vertical bar over the range of values. The upper
    end is 27 and the lower end is -1 (assuming we could pass additional arguments
    to interact to set the range of values selectable). `myfunction` is called every
    time the value in the interact widget is changed and the result printed. Hence,
    we see 27 selected and the number 28 displayed (following the processing of `myfunction`
    - 27 + 1).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可以通过滑动垂直条在值的范围内滑动。上限为27，下限为-1（假设我们可以向`interact`传递额外的参数来设置可选择的值范围）。每次`interact`小部件中的值更改时，`myfunction`都会被调用，并打印结果。因此，我们看到选中的是27，显示的是数字28（经过`myfunction`处理后
    - 27 + 1）。
- en: Interact widget checkbox
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交互式复选框控件
- en: 'We can change the type of control generated, based on the arguments passed
    to interact. If we had the following script:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以根据传递给`interact`的参数来更改生成的控件类型。如果我们有以下脚本：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We are doing the same steps as before; however, the value passed is `False`
    (but it could also be `True`). The `interact` function examines the argument passed,
    determines it is a Boolean value, and presents the appropriate control for a Boolean:
    a checkbox.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在执行与之前相同的步骤；然而，传递的值是`False`（但它也可以是`True`）。`interact`函数检查传入的参数，判断它是布尔值，并为布尔值提供适当的控件：复选框。
- en: 'If we run the preceding script in a Notebook, we get a display like the following:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在Notebook中运行上面的脚本，我们将得到如下显示：
- en: '![](img/bc2e0301-501b-4ebd-8baf-693a23c29c0d.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bc2e0301-501b-4ebd-8baf-693a23c29c0d.png)'
- en: Interact widget textbox
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交互式文本框控件
- en: 'We can generate a text input control, again by passing in different arguments
    to interact. For example, see the following script:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过传递不同的参数给`interact`来生成文本输入控件。例如，参见以下脚本：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This produces a text input control with the initial value of `Hello World`:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这会生成一个初始值为`Hello World`的文本输入控件：
- en: '![](img/e76f1816-f446-4848-b31b-90448398e899.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e76f1816-f446-4848-b31b-90448398e899.png)'
- en: Interact dropdown
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交互式下拉菜单
- en: 'We can also use the interact function to produce a drop-down listbox for the
    user to select from. In the following script we produce a dropdown with two choices:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用`interact`函数为用户生成一个下拉列表框，让他们选择。例如，在下面的脚本中，我们生成一个包含两个选项的下拉菜单：
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This script will do the following:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本将执行以下操作：
- en: Pull in the interact reference,
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引入`interact`引用，
- en: Define a function that will be called whenever the user changes the value of
    the control
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义一个函数，每当用户更改控件值时都会调用该函数
- en: Calls the `interact` function with a set of values, which interact will interpret
    to mean create a dropdown for the user.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用`interact`函数并传入一组值，`interact`将解释这些值，意味着为用户创建一个下拉菜单。
- en: 'If we run this script in a Notebook, we get the following display:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在Notebook中运行此脚本，我们将得到以下显示：
- en: '![](img/540c3757-470d-424d-bb5f-766841b31846.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/540c3757-470d-424d-bb5f-766841b31846.png)'
- en: The preceding screenshot shows us that the value printed at the bottom will
    change according to what is selected in the dropdown by the user.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的截图显示，我们在底部打印的值将根据用户在下拉菜单中选择的内容而变化。
- en: Interactive widget
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交互式小部件
- en: There is also an interactive widget. The interactive widget works like the interact
    widget, but does not display the user input control until called upon directly
    by the script. This would be useful if you had some calculations that had to be
    performed for the parameters of the widget display, or even if you wanted to decide
    whether you needed a control at runtime.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个交互式小部件。交互式小部件类似于`interact`小部件，但不会在脚本直接调用时显示用户输入控件。如果你有一些需要计算的参数，或者想在运行时决定是否需要显示控件，这会非常有用。
- en: 'For example, we could have a script (similar to the previous script) as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以有一个类似于之前脚本的脚本，如下所示：
- en: '[PRE8]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We have made a couple of changes to the script:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对脚本做了几个更改：
- en: We are referencing the interactive widget
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们正在引用交互式小部件
- en: The interactive function returns a widget, rather than immediately displaying
    a value
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交互式函数返回的是一个控件，而不是立即显示一个值。
- en: We must script the display of the widget ourselves
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们必须自己编写显示控件的脚本
- en: 'If we run the following script, to the user it looks very similar:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行以下脚本，用户看到的效果非常相似：
- en: '![](img/e4173c7c-347a-4156-9f31-f53f900dbdd5.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e4173c7c-347a-4156-9f31-f53f900dbdd5.png)'
- en: Widgets
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控件
- en: There is another package of widgets, called `widgets`, that has all of the standard
    controls you might want to use, with many optional parameters available to customize
    your display.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 还有另一个控件包，叫做`widgets`，它包含了你可能想要使用的所有标准控件，提供了许多可选参数，允许你自定义显示效果。
- en: The progress bar widget
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进度条控件
- en: 'One of the widgets available in this package displays a progress bar to the
    user. We could have the following script:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这个包中有一个控件可以向用户显示进度条。我们可以使用以下脚本：
- en: '[PRE9]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The preceding script would display our progress bar as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的脚本将会如下所示显示我们的进度条：
- en: '![](img/a6615908-832a-474a-98d0-b7766bd0a2d0.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a6615908-832a-474a-98d0-b7766bd0a2d0.png)'
- en: We see a progress bar that looks to be 45%.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到一个进度条，看起来大约是45%。
- en: The listbox widget
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列表框控件
- en: 'We could also use the `listbox` widget, called a `Dropdown`, as in the following
    script:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以使用`listbox`控件，称为`Dropdown`，如下脚本所示：
- en: '[PRE10]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This script will display a listbox to the user with the values `Pen`, `Pencil`,
    and `Pad`. When the user selects one of the values, the associated value is returned
    in the `w` variable, which we display as in the following screenshot:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本会向用户显示一个包含`Pen`、`Pencil`和`Pad`值的列表框。当用户选择其中一个值时，相关的值会返回并存储在`w`变量中，我们会像以下截图那样显示它：
- en: '![](img/b28ed7dc-5743-4f0b-a3f8-7668f78ebc7a.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b28ed7dc-5743-4f0b-a3f8-7668f78ebc7a.png)'
- en: Therefore, we see the inventory value associated with Pen.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们看到了与笔相关的库存值。
- en: The text widget
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文本控件
- en: The `text` widget gathers a text string from the user for reuse elsewhere in
    your script. A text widget has a description (label) and a value (entered by the
    user or preset in your script).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`text`控件从用户那里收集一个文本字符串，供脚本中的其他地方重用。文本控件有一个描述（标签）和一个值（由用户输入或在脚本中预设）。'
- en: 'In this example, we will just gather a text string and display it on the screen
    as part of the output for the script. We will use the following script:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们只会收集一个文本字符串，并将其作为脚本输出的一部分显示在屏幕上。我们将使用以下脚本：
- en: '[PRE11]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The Python package that contains the basic widgets is `ipywidgets`, so we need
    to reference that. We define a handler for the text field that will be called
    when the user hits submit after entering their text value. When we do this, we
    are using the `text` widget.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 包含基本控件的 Python 包是`ipywidgets`，所以我们需要引用它。我们为文本字段定义了一个处理程序，当用户输入文本值并点击提交时，该处理程序会被调用。在这里，我们使用了`text`控件。
- en: 'If we run the preceding script in a Notebook, we get a display as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在 Notebook 中运行上面的脚本，显示效果如下：
- en: '![](img/cf36f06c-4c69-4726-809f-6c8ed62076d3.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cf36f06c-4c69-4726-809f-6c8ed62076d3.png)'
- en: 'We should point out some of the highlights of this page:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该指出本页的一些亮点：
- en: The ordering of the elements of the page is important. The text field referenced
    by the handler must be defined before the reference.
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 页面元素的排列顺序很重要。处理程序引用的文本字段必须在引用之前定义。
- en: When invoking a widget, the widget automatically looks for any handlers that
    might be associated with the script. In this case, we have a `submit` handler.
    There are many other handlers available. `text.on_submit` assigns the handler
    to the widget.
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当调用控件时，控件会自动寻找与脚本相关联的处理程序。在这种情况下，我们有一个`submit`处理程序。还有许多其他处理程序可以使用。`text.on_submit`将处理程序分配给控件。
- en: Otherwise, we have a standard Python Notebook.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 否则，我们将得到一个标准的 Python Notebook。
- en: 'If we run the script (Cell | Run All), we get the preceding screenshot (waiting
    for us to enter a value in the text box):'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们运行脚本（单元格 | 运行全部），我们将得到上面的截图（等待我们在文本框中输入值）：
- en: So, our script has set up a widget for gathering input from the user and later
    done something with that value. (We are just displaying it here, but we could
    use the input for further processing.)
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所以，我们的脚本已经设置了一个控件，用于收集用户的输入，之后对这个值进行处理。（我们这里只是显示它，但我们也可以使用这个输入进行进一步处理。）
- en: The button widget
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 按钮控件
- en: 'Similarly, we can use a `Button` widget in our script, as can be seen in the
    following example:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，我们也可以在脚本中使用一个`Button`控件，如下例所示：
- en: '[PRE12]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This script does the following:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本的功能如下：
- en: References the features we want to use from the `widgets` packages.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引用我们想要使用的`widgets`包中的功能。
- en: Creates our button.
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建我们的按钮。
- en: Defines a handler for the click event on a button. The handler receives the
    `Button` object that was clicked upon (the widget).
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义了一个按钮点击事件的处理程序。该处理程序接收被点击的`Button`对象（小部件）。
- en: The handler displays information about the button clicked on (you can imagine
    if we had several buttons in a display, we would want to determine which button
    was clicked).
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该处理程序显示了关于点击按钮的信息（你可以想象，如果我们有多个按钮在同一界面上，我们会希望确定是哪个按钮被点击了）。
- en: Lastly, we assign the defined handler to the `Button` object we created.
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我们将定义的处理程序分配给我们创建的`Button`对象。
- en: Note the indentation of the coding for the handler; this is the standard Python
    style that must be followed.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意处理程序代码的缩进；这是标准的Python风格，必须遵循。
- en: 'If we run the preceding script in a Notebook, we get a display like the following
    screenshot:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在Notebook中运行前面的脚本，我们会看到如下截图：
- en: '![](img/b1b16a32-4ec3-4fc2-87b7-1e51f2254c05.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b1b16a32-4ec3-4fc2-87b7-1e51f2254c05.png)'
- en: Note the `Submit` button at the bottom of the following image. You could change
    other attributes of the button, such as its position, size, color, and many more.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意以下图片底部的`Submit`按钮。你可以更改按钮的其他属性，例如位置、大小、颜色等。
- en: 'If we then click on the `Submit` button, we get the following display where
    our message about the button being clicked is displayed:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们点击`Submit`按钮，则会显示以下界面，显示我们关于按钮被点击的消息：
- en: '![](img/f44534d8-c48b-4002-8116-24ca9797d8bc.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f44534d8-c48b-4002-8116-24ca9797d8bc.png)'
- en: Widget properties
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 小部件属性
- en: 'All widgets controls have a set of properties for your display that can be
    adjusted as needed. You can see the list of properties by taking an instance of
    a control and running the `control.keys` command in a Notebook, as can be seen
    in the following example:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 所有小部件控件都有一组可调整的显示属性。你可以通过获取一个控件的实例，并在Notebook中运行`control.keys`命令来查看属性列表，如下例所示：
- en: '[PRE13]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This script pulls in a blanket reference to all of the controls available in
    widgets. We then create an `IntSlider` instance and display the list of properties
    that we can adjust. So, we end up with a display like the following screenshot:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本引入了所有小部件控件的一个通用引用。接着，我们创建一个`IntSlider`实例，并显示可以调整的属性列表。最终，我们得到如下所示的界面：
- en: '![](img/ea4e5151-a04d-45b9-b646-eea168991996.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ea4e5151-a04d-45b9-b646-eea168991996.png)'
- en: 'As you can see, the list is extensive:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这个列表非常全面：
- en: '| **Property** | **Description** |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| **属性** | **描述** |'
- en: '| `orientation` | Whether left align, right align or justified |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| `orientation` | 是否左对齐、右对齐或居中对齐 |'
- en: '| `color` | Color of font |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| `color` | 字体颜色 |'
- en: '| `height` | Height of control |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| `height` | 控件的高度 |'
- en: '| `disabled` | Whether control is disabled or not |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| `disabled` | 控件是否被禁用 |'
- en: '| `visible` | Is the control displayed? |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| `visible` | 控件是否显示？ |'
- en: '| `font_style` | Style of font, for example, italic |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| `font_style` | 字体样式，例如，斜体 |'
- en: '| `min` | Minimum value (used in range list) |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| `min` | 最小值（在范围列表中使用） |'
- en: '| `background_color` | Background color of control |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| `background_color` | 控件的背景颜色 |'
- en: '| `width` | Width of control |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| `width` | 控件的宽度 |'
- en: '| `font_family` | Font family to be used for text in control |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| `font_family` | 控件中文本使用的字体系列 |'
- en: '| `description` | The description field is used for documentation purposes
    |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| `description` | 描述字段用于文档说明 |'
- en: '| `max` | Maximum value (of range) |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| `max` | 最大值（范围内） |'
- en: '| `padding` | Padding applied (to edges of control) |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| `padding` | 应用的内边距（控件边缘） |'
- en: '| `font_weight` | Weight of font used in control, for example, bold |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| `font_weight` | 控件中使用的字体粗细，例如，粗体 |'
- en: '| `font_size` | Size of font used for text in control |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| `font_size` | 控件中文本的字体大小 |'
- en: '| `value` | Selected and entered value for control |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| `value` | 控件选定和输入的值 |'
- en: '| `margin` | Margin to use when displaying control |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| `margin` | 显示控件时使用的边距 |'
- en: Adjusting widget properties
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调整小部件属性
- en: 'We could adjust any of these in our scripts using something like this script,
    where we disable a text box (the text box will display, but the user cannot enter
    a value into it). We could have the following script:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在脚本中调整这些属性，例如使用以下脚本来禁用文本框（文本框仍然会显示，但用户不能输入任何值）。我们可以使用以下脚本：
- en: '[PRE14]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This is the screenshot of the preceding code:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这是前面代码的截图：
- en: '![](img/6e4f94a8-7cce-4c5a-bea5-095bd7cd8503.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6e4f94a8-7cce-4c5a-bea5-095bd7cd8503.png)'
- en: When a field is disabled, the textbox is grayed out. When the user hovers the
    cursor over the field, they get a red circle with a slash through it, which means
    it cannot be changed.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个字段被禁用时，文本框会变灰。当用户将光标悬停在该字段上时，会出现一个带有斜线的红色圆圈，表示该字段不能被更改。
- en: Adjusting properties
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调整属性
- en: 'All of the properties shown previously are accessible to read and write. We
    can show this transition with a small script, as follows:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 所有之前显示的属性都可以读写。我们可以通过一个小脚本来展示这个过渡，脚本如下：
- en: '[PRE15]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The script creates a slider, retrieves its current value, changes the value
    to `5`, and then displays the original and current value of the control.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 该脚本创建一个滑块，获取其当前值，将值更改为 `5`，然后显示控件的原始值和当前值。
- en: 'If we were to run the preceding script in a Notebook, we would see the following
    expected results:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在 Notebook 中运行前面的脚本，我们将看到以下预期的结果：
- en: '![](img/50bcbc29-eb89-4ddd-a672-676f52456d49.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](img/50bcbc29-eb89-4ddd-a672-676f52456d49.png)'
- en: Widget events
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控件事件
- en: All of the controls work by reacting to user actions, either with a mouse or
    keyboard. The default actions for controls are built into the software, but you
    can add your own handling of events (user actions).
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 所有控件都通过响应用户的操作来工作，无论是鼠标还是键盘。控件的默认操作是内置在软件中的，但你可以添加自己的事件处理（用户操作）。
- en: We have seen this kind of event handling previously (for example, in the section
    on the slidebar, a function is called whenever the slider value is changed by
    the user). But, let's explore it in a little more depth.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前见过这种事件处理（例如，在滑块的部分，每当用户改变滑块值时，都会调用一个函数）。但是，让我们更深入地探讨一下。
- en: 'We could have the following script:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以有以下脚本：
- en: '[PRE16]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This script does the following:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本执行了以下操作：
- en: Creates a button.
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个按钮。
- en: Displays the button to the user.
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向用户显示按钮。
- en: Defines a handler click event. It prints a message that you clicked on the screen.
    You can have any Python statements you want in the handler.
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义了一个事件处理程序的点击事件。它打印出你点击了屏幕上的消息。你可以在处理程序中写入任何你想要的 Python 语句。
- en: 'Lastly, we associated the click handler with the button we created. So, now
    when the user clicks on our button, the handler is called and the `Button clicked`
    message is displayed on screen (as shown in the following screenshot):'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我们将点击事件处理程序与我们创建的按钮关联。所以，现在当用户点击我们的按钮时，事件处理程序被调用，并且 `Button clicked` 消息显示在屏幕上（如下面的截图所示）：
- en: 'If we run the preceding script in a Notebook and click on the button a few
    times, we get the following display:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在 Notebook 中运行上面的脚本，并点击按钮几次，我们将得到以下显示：
- en: '![](img/fc1accae-6da3-42a8-8395-b418f96e43a6.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fc1accae-6da3-42a8-8395-b418f96e43a6.png)'
- en: Widget containers
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控件容器
- en: 'You can also assemble containers of widgets directly, using Python syntax,
    by passing the child elements in the constructor. For example, we could have the
    following script:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以直接使用 Python 语法通过将子元素传递给构造函数来组合控件容器。例如，我们可以有以下脚本：
- en: '[PRE17]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The preceding script shows that we are creating a container (which is a `Box`
    widget), in which we are specifying the child, contained controls. The call to
    display the container will iteratively display the child elements as well. So,
    we end up with a display like the following screenshot:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的脚本显示了我们正在创建一个容器（这是一个 `Box` 控件），在其中我们指定了子控件。调用显示容器的命令时，也会依次显示子元素。所以，我们最终会得到如下截图所示的显示：
- en: '![](img/2fcb2b87-1ddb-4f5c-b476-f72145e45f86.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2fcb2b87-1ddb-4f5c-b476-f72145e45f86.png)'
- en: You can see the border around the box and the two controls in the box.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到框周围的边框和框中的两个控件。
- en: 'Similarly, we could have added the children to the container after the container
    was displayed, by using syntax like this:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，我们也可以在容器显示后，使用如下语法将子元素添加到容器中：
- en: '[PRE18]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: When we add the child to the container, the container repaints, which will cause
    the repainting of any children.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将子元素添加到容器时，容器会重新绘制，这会导致所有子元素的重新绘制。
- en: 'If we run this script in another Notebook, we get a very similar result to
    the previous example, with a display like the following screenshot:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在另一个 Notebook 中运行这个脚本，我们将得到一个与之前示例非常相似的结果，显示如下截图所示：
- en: '![](img/ad5198ea-6314-441e-8586-c83a8d723dc4.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ad5198ea-6314-441e-8586-c83a8d723dc4.png)'
- en: Summary
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we added widgets to our Jupyter installation and we used the
    interact and interactive widgets to produce a variety of user input controls.
    We then looked at the widgets package in depth to investigate some of the user
    controls available, properties available in the containers, events that are available
    emitting from the controls, and how to build containers for the controls.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将控件添加到了我们的 Jupyter 安装中，并使用了 interact 和 interactive 控件来产生各种用户输入控件。然后，我们深入研究了控件包，调查了可用的用户控件、容器中的可用属性、从控件发出的事件以及如何为控件构建容器。
- en: In the next chapter, we will look into sharing Notebooks and converting them
    into different formats.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨共享笔记本并将其转换为不同格式。
