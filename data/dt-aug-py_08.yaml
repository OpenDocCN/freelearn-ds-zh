- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: Audio Data Augmentation with Spectrogram
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用频谱图进行音频数据增强
- en: In the previous chapter, we visualized the sound using the Waveform graph. An
    audio spectrogram is another visualizing method for seeing the audio components.
    The inputs to the Spectrogram are a one-dimensional array of **amplitude** values
    and the **sampling rate**. They are the same inputs as the Waveform graph.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们使用波形图可视化了声音。音频频谱图是另一种可视化音频成分的方法。频谱图的输入是一个一维的 **幅度** 值数组和 **采样率**。它们与波形图的输入相同。
- en: An audio **s****pectrogram** is sometimes called a **sonograph**, **sonogram**,
    **voiceprint**, or **voicegram**. The Spectrogram is a more detailed representation
    of sound than the Waveform graph. It shows a correlation between frequency and
    amplitude (loudness) over time, which helps visualize the frequency content in
    a signal. Spectrograms make it easier to identify musical elements, detect melodic
    patterns, recognize frequency-based effects, and compare the results of different
    volume settings. Additionally, the Spectrogram can be more helpful in identifying
    non-musical aspects of a signal, such as noise and interference from other frequencies.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 音频 **频谱图** 有时也称为 **声谱图**、**声纹图**、**声印图**或 **语音图**。频谱图是比波形图更详细的声音表现方式。它展示了频率和幅度（响度）随时间变化的关系，有助于可视化信号中的频率成分。频谱图使得识别音乐元素、检测旋律模式、识别基于频率的效果、以及比较不同音量设置的结果变得更加容易。此外，频谱图在识别信号的非音乐方面也更为有用，例如噪声和其他频率的干扰。
- en: The typical usage is for music, human speech, and sonar. A short standard definition
    is a spectrum of frequency maps with time duration. In other words, the *y* axis
    is the frequency in **Hz or kHz**, and the *x* axis is the time duration in **seconds
    or milliseconds**. Sometimes, the graph comes with a color index for the amplitude
    level.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 典型的应用场景包括音乐、人类语音和声呐。其简短的标准定义是：时间持续下的频率映射谱。换句话说，*y* 轴表示频率（单位为 **Hz 或 kHz**），*x*
    轴表示时间（单位为 **秒或毫秒**）。有时，图表会附带一个用于幅度等级的颜色索引。
- en: 'Pluto will explain the code in the Python Notebook later in the chapter, but
    here is a sneak peek of an audio Spectrogram. The command for drawing the *control
    piano scale in the D major* audio file is as follows:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Pluto 会在本章后面解释 Python Notebook 中的代码，但这里先简单展示一下音频频谱图。绘制 *D 大调控制钢琴音阶* 音频文件的命令如下：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The output is as follows:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 8.1 – An audio spectrogram of piano scale in D major](img/Image94335.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.1 – D 大调钢琴音阶的音频频谱图](img/Image94335.jpg)'
- en: Figure 8.1 – An audio spectrogram of piano scale in D major
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.1 – D 大调钢琴音阶的音频频谱图
- en: Before Pluto demystifies the audio Spectrogram, you should review [*Chapter
    7*](B17990_07.xhtml#_idTextAnchor135) if the audio concepts and keywords sound
    alien to you. This chapter relies heavily on the knowledge and practices from
    [*Chapter 7*](B17990_07.xhtml#_idTextAnchor135).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Pluto 阐明音频频谱图之前，如果音频概念和关键词对你来说很陌生，应该先复习一下 [*第七章*](B17990_07.xhtml#_idTextAnchor135)。本章内容很大程度上依赖于
    [*第七章*](B17990_07.xhtml#_idTextAnchor135) 中的知识和实践。
- en: 'In *Figure 8**.1*, Pluto uses the Matplotlib library to draw the audio spectrograph.
    The primary input is the amplitude array and the sampling rate. The library does
    all the heavy calculations, and other libraries, such as the Librosa or SciPy
    library, can perform the same task. In particular, Matplotlib can generate many
    types of audio spectrographs from the same input. Pluto will dig deeper into types
    of spectrographs a bit later, but first, let’s break down the steps of how the
    library constructs an audio spectrograph. The five high-level tasks are as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *图 8.1* 中，Pluto 使用 Matplotlib 库绘制音频频谱图。主要输入是幅度数组和采样率。该库执行所有复杂的计算，其他库，如 Librosa
    或 SciPy 也能完成相同的任务。特别地，Matplotlib 能够从相同的输入生成多种类型的音频频谱图。Pluto 会在稍后深入探讨频谱图的类型，但首先，让我们分解一下该库是如何构建音频频谱图的。主要的五个步骤如下：
- en: Splitting the audio stream into overlapping segments, also known as **windows**.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将音频流分割成重叠的片段，也称为 **窗口**。
- en: Calculating the **Short-Time Fourier Transform** (**STFT**) value on each window.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对每个窗口计算 **短时傅里叶变换**（**STFT**）值。
- en: Converting the windows’ value into **decibels** (**dB**).
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将窗口的值转换为 **分贝**（**dB**）。
- en: Linking the windows together as in the original audio sequence.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将窗口链接在一起，形成原始音频序列。
- en: Displaying the result in a graph with the *y* axis as Hz, the *x* axis as seconds,
    and dB as a color-coded value.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在图表中展示结果，*y* 轴表示 Hz，*x* 轴表示秒，dB 为颜色编码值。
- en: The math for the previous five steps is complex, and the chapter’s goal is to
    use a Spectrogram to visualize the sound and augment the audio file. Thus, we
    rely on audio libraries to perform the math calculation.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 前面五个步骤的数学计算比较复杂，本章的目标是通过频谱图可视化声音并增广音频文件。因此，我们依赖音频库来执行数学计算。
- en: As mentioned, the underlying data representing the Spectrogram is the same as
    the Waveform format. Therefore, the audio augmentation techniques are the same.
    Consequently, the resulting augmented audio file will sound the same. The visual
    representation is the only difference between the Spectrogram and the Waveform
    graph.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，表示频谱图的底层数据与波形格式相同。因此，音频增广技术也是相同的。因此，生成的增广音频文件听起来是一样的。唯一的区别是频谱图和波形图的视觉表示。
- en: 'The majority of this chapter will cover the audio Spectrogram standard format,
    a variation of a Spectrogram, **Mel-spectrogram**, and **Chroma** STFT. The augmentation
    techniques represent a shorter section because you have learned the method in
    the previous chapter. We will cover the following topics in this chapter:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的大部分内容将介绍音频频谱图标准格式、频谱图的变体**梅尔频谱图**和**色度**STFT。增广技术部分较短，因为你在上一章已经学习了该方法。本章将涵盖以下主题：
- en: Initializing and downloading
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初始化与下载
- en: Audio Spectrogram
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 音频频谱图
- en: Various Spectrogram formats
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各种频谱图格式
- en: Mel-spectrogram and Chroma STFT plots
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 梅尔频谱图和色度STFT图
- en: Spectrogram augmentation
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 频谱图增广
- en: Spectrogram image
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 频谱图图像
- en: Fun fact
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 趣味事实
- en: The **Kay Electric Company** introduced the first commercially available machine
    for audio spectrographic analysis in 1951\. The black-and-white image was named
    a sonograph or sonogram for visualizing bird songs. In 1966, **St. Martin’s Press**
    used sonography for the book *Golden Field Guide to Birds of North America*. Spectrograms
    were favored over sonogram terminology around 1995 during the digital age. Spectrograms
    or sonograms were not limited to the study of birds in the early days. The US
    military used Spectrogram for encryption in the early 1940s and continues forward,
    as evidenced by the publication *Cryptologic Quarterly*, volume 38, published
    by the **Center for Cryptologic History** in 2019.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**凯电气公司**于1951年推出了首个商业化的音频频谱分析机器。该黑白图像被称为声谱仪或声谱图，用于可视化鸟鸣声。1966年，**圣马丁出版社**使用声谱学为书籍
    *《北美鸟类黄金田野指南》* 制作插图。到1995年，频谱图术语逐渐取代了声谱图术语，尤其是在数字时代。早期，频谱图或声谱图的应用并不限于鸟类研究。美国军方在20世纪40年代初期就使用频谱图进行加密，直到今天仍然如此，这一点可以通过2019年**密码学历史中心**出版的《密码学季刊》第38期得到证明。'
- en: This chapter reuses the audio augmentation functions and the real-world audio
    datasets from [*Chapter 7*](B17990_07.xhtml#_idTextAnchor135). Thus, we will start
    by initializing Pluto and downloading the real-world datasets.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将重用上一章中介绍的音频增广函数和真实世界的音频数据集（参见 [*第7章*](B17990_07.xhtml#_idTextAnchor135)）。因此，我们将从初始化
    Pluto 并下载真实世界数据集开始。
- en: Initializing and downloading
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初始化与下载
- en: Start with loading the `data_augmentation_with_python_chapter_8.ipynb` file
    on Google Colab or your chosen Python Notebook or JupyterLab environment. From
    this point onward, the code snippets are from the Python Notebook, which contains
    the complete functions.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Google Colab 或你选择的 Python Notebook 或 JupyterLab 环境加载 `data_augmentation_with_python_chapter_8.ipynb`
    文件开始。从此时起，代码片段来自 Python Notebook，其中包含完整的函数。
- en: 'The following initializing and downloading steps should be familiar to you
    because we have done them six times. The following code snippet is the same as
    from [*Chapter 7*](B17990_07.xhtml#_idTextAnchor135):'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以下初始化和下载步骤应该对你来说比较熟悉，因为我们已经做了六次。以下代码片段与 [*第7章*](B17990_07.xhtml#_idTextAnchor135)中的代码相同：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Fun challenge
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 趣味挑战
- en: Pluto challenges you to search for and download an additional real-world audio
    dataset from the *Kaggle* website or your project. A hint is to use Pluto’s `fetch_kaggle_data()`
    and `fetch_df()` methods, and any of the audio augmentation wrapper functions.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Pluto 挑战你从 *Kaggle* 网站或你的项目中搜索并下载额外的真实世界音频数据集。提示是使用 Pluto 的 `fetch_kaggle_data()`
    和 `fetch_df()` 方法，以及任何音频增广包装函数。
- en: A few under-the-hood methods make the process so easy to use. Pluto highly recommends
    that you review [*Chapter 7*](B17990_07.xhtml#_idTextAnchor135) before continuing
    with the spectrogram.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 一些背后的方法使得这个过程变得非常简便。Pluto 强烈建议你在继续学习频谱图之前，先回顾一下 [*第7章*](B17990_07.xhtml#_idTextAnchor135)。
- en: Audio Spectrogram
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 音频频谱图
- en: Before dissecting the Spectrogram, let’s review the fundamental differences
    between a Spectrogram and a Waveform plot. The Spectrogram graphs show the frequency
    components of a sound signal over time, focusing on frequency and intensity. In
    contrast, the Waveforms concentrate on the timing and amplitude of sounds. The
    difference is in the visual representation of the sound wave. The underlying data
    representation and the transformation methods are the same.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在解析频谱图之前，让我们回顾一下频谱图与波形图的基本区别。频谱图显示了声音信号随时间变化的频率成分，重点是频率和强度。相比之下，波形图专注于声音的时序和振幅。它们的区别在于声音波形的可视化表示。底层的数据表示和转换方法是相同的。
- en: 'An audio Spectrogram is another visual representation of a sound wave, and
    you saw the Waveform graph in [*Chapter 7*](B17990_07.xhtml#_idTextAnchor135).
    The `_draw_spectrogram()` helper method uses the Librosa library to import the
    audio file and convert it into an amplitude data one-dimensional array and a sampling
    rate in Hz. The next step is to use the Matplotlib library to draw the Spectrogram
    plot. Likewise, Pluto takes the output from the Librosa library function and uses
    the Matplotlib function to draw the fancy blue and yellow Waveform graph in [*Chapter
    7*](B17990_07.xhtml#_idTextAnchor135). The relevant code snippet is as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 音频频谱图是声音波形的另一种可视化表示，您在[*第 7 章*](B17990_07.xhtml#_idTextAnchor135)中看到了波形图。`_draw_spectrogram()`
    辅助方法使用 Librosa 库导入音频文件，并将其转换为幅度数据一维数组以及采样率（以赫兹为单位）。下一步是使用 Matplotlib 库绘制频谱图。同样，Pluto
    从 Librosa 库函数获取输出，并使用 Matplotlib 函数绘制[*第 7 章*](B17990_07.xhtml#_idTextAnchor135)中的漂亮蓝色和黄色波形图。相关代码片段如下：
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here, the returned values are as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的值如下：
- en: '`spectrum` is a `numpy.array` type with `shape(n,m)`. For example, the result
    of plotting the Spectrogram of the c*ontrol piano scale in a D major* audio file
    `shape()` is equal to `(129, 1057)`. It represents the m-column of periodograms
    for each segment or window.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spectrum` 是 `numpy.array` 类型，具有 `shape(n,m)`。例如，绘制 D 大调音频文件的控制钢琴音阶频谱图的结果 `shape()`
    为 `(129, 1057)`。它表示每个片段或窗口的周期图的 m 列。'
- en: '`freq` is a `numpy.array` type with `shape(n,)`. Using the same example, `freq
    shape` is `(129,)`. It represents the frequencies corresponding to the elements
    (rows) in the `spectrum` array.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`freq` 是 `numpy.array` 类型，具有 `shape(n,)`。以相同的例子为例，`freq shape` 为 `(129,)`。它表示与
    `spectrum` 数组中的元素（行）对应的频率。'
- en: '`ts` is a `numpy.array` type with `shape(n,)`. Using the same example as previously,
    `ts shape` is `(1057,)`. It represents the times corresponding to midpoints of
    `spectrum''s` n-column.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ts` 是 `numpy.array` 类型，具有 `shape(n,)`。以之前的例子为例，`ts shape` 为 `(1057,)`。它表示与
    `spectrum` 的 n 列中点对应的时间。'
- en: '`ax` is a `matplotlib.image.AxesImage` type. It is the image from the Matplotlib
    library.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ax` 是 `matplotlib.image.AxesImage` 类型。它是来自 Matplotlib 库的图像。'
- en: 'Pluto draws the Spectrogram for the control piano scale in D major audio file
    using the following command:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Pluto 使用以下命令为 D 大调音频文件绘制控制钢琴音阶的频谱图：
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The output is as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: '![Figure 8.2 – An audio Spectrogram of piano scale in D-major](img/B17990_08_02.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.2 – 钢琴大调音阶的音频频谱图](img/B17990_08_02.jpg)'
- en: Figure 8.2 – An audio Spectrogram of piano scale in D-major
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.2 – 钢琴大调音阶的音频频谱图
- en: 'Pluto displays the audio-play button in the Python Notebook, where you can
    listen to the audio. The button image looks like the following:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Pluto 在 Python 笔记本中显示音频播放按钮，您可以点击按钮听音频。按钮的图像如下所示：
- en: '![Figure 8.3 – The audio play button](img/B17990_08_03.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.3 – 音频播放按钮](img/B17990_08_03.jpg)'
- en: Figure 8.3 – The audio play button
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.3 – 音频播放按钮
- en: 'For comparison, the following is the Waveform graph from [*Chapter 7*](B17990_07.xhtml#_idTextAnchor135)
    using the helper function:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进行比较，以下是来自[*第 7 章*](B17990_07.xhtml#_idTextAnchor135)的波形图，使用了辅助函数：
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The output is as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: '![Figure 8.4 – Audio waveform of piano scale in D major](img/B17990_08_04.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.4 – 钢琴大调音阶的音频波形](img/B17990_08_04.jpg)'
- en: Figure 8.4 – Audio waveform of piano scale in D major
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.4 – 钢琴大调音阶的音频波形
- en: The music sounds the same. Only the visual displays are different.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 音乐声音相同，只有视觉展示不同。
- en: 'Sound engineers are trained to read Spectrogram plots to identify and remove
    unwanted noises, such as the following:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 声音工程师训练阅读频谱图以识别和去除不需要的噪声，例如：
- en: '**Hum**: This is usually the result of electrical noise in the recording. Its
    range is typically between 50 Hz and 60 Hz.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**嗡嗡声**：通常是录音中的电噪声，其频率范围通常在 50 Hz 到 60 Hz 之间。'
- en: '**Buzz**: This is the opposite of hum. It is the electrical noise of higher
    frequencies. Familiar sources are fluorescent light fixtures, on-camera microphones,
    and high-pitched motors.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**嗡嗡声**：这与低频的嗡嗡声相反。它是高频的电气噪声。常见的来源有荧光灯、摄像机麦克风和高频电机。'
- en: '**Hiss**: This is a broadband noise, which is different from hum and buzz.
    It is typically concentrated at specific frequencies in both upper and lower spectrums.
    The usual suspects are **heating, ventilation, and air conditioning** (**HVAC**)
    systems or motor fans.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**嘶嘶声**：这是一种宽带噪声，区别于嗡嗡声和嗡声。它通常集中在上下频谱的特定频率。常见的来源是**供暖、通风和空调**（**HVAC**）系统或电动风扇。'
- en: '**Intermittent noises**: These are commonly introduced by urban sounds such
    as thunders, birds, wind gusts, sirens, car horns, footsteps, knocking, coughs,
    or ringing cell phones.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**间歇性噪声**：这些噪声通常是由城市环境中的声音引起的，例如雷声、鸟鸣、风声、警笛、汽车喇叭声、脚步声、敲击声、咳嗽声或手机铃声。'
- en: '**Digital clipping**: This is when the audio is too loud to be recorded. It
    is the loss of the audio signal’s peaks.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数字削波**：当音频太响，无法被录制时，就会发生数字削波。这是音频信号峰值的丧失。'
- en: '**Gaps**: Gaps or dropouts are silences due to missing cut-outs in the audio
    recording.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**间隙**：间隙或丢失是由于音频录制中的缺失切割部分导致的静音。'
- en: '**Clicks and pops**: These are noises in the recording caused by vinyl and
    other grooved media recording devices.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**点击声和爆裂声**：这些是由黑胶唱片和其他有槽介质录音设备产生的噪声。'
- en: Pluto uses the **Matplotlib** library function, which has many parameters governing
    the display of the Spectrogram plots. Let’s use the three real-world audio datasets
    to illustrate other visual representations of Spectrogram plots.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Pluto使用**Matplotlib**库函数，该函数有许多参数控制频谱图的显示。我们将使用三个真实世界的音频数据集来展示频谱图的其他可视化表示。
- en: Various Spectrogram formats
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 各种频谱图格式
- en: There are many parameters Pluto can pass to the underlying `specgram()` method
    from the Matplotlib library. He will highlight only a few parameters.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Pluto可以将许多参数传递给Matplotlib库的底层`specgram()`方法。他将重点介绍其中的一些参数。
- en: Fun fact
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的事实
- en: You can print any function documentation by adding a question mark (`?`) at
    the end of the function in the Python Notebook.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在Python Notebook中在函数后加上问号（`?`）来打印任何函数的文档。
- en: 'For example, printing the documentation for the `specgram()` function is the
    following command: `matplotlib.pyplot.specgram?` The partial output is as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，打印`specgram()`函数文档的命令如下：`matplotlib.pyplot.specgram?` 部分输出如下：
- en: '![Figure 8.5 – Partial print definition of specgram()](img/B17990_08_05.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图8.5 – specgram()的部分打印定义](img/B17990_08_05.jpg)'
- en: Figure 8.5 – Partial print definition of specgram()
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.5 – specgram()的部分打印定义
- en: 'You can view the complete output of *Figure 8**.5* in the Python Notebook.
    Another example is printing Pluto’s `draw_spectrogram()` function documentation
    as follows: `pluto.draw_spectrogram?`.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在Python Notebook中查看*图8.5*的完整输出。另一个示例是打印Pluto的`draw_spectrogram()`函数文档，命令如下：`pluto.draw_spectrogram?`。
- en: 'The output is as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 8.6 – The print definition of draw_spectrogram()](img/B17990_08_06.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![图8.6 – draw_spectrogram()的打印定义](img/B17990_08_06.jpg)'
- en: Figure 8.6 – The print definition of draw_spectrogram()
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.6 – draw_spectrogram()的打印定义
- en: From *Figure 8**.5*, the simple one is changing the color map (`cmap`) variable.
    There are more than 60 color maps in the Matplotlib library. Thus, Pluto will
    choose a different `cmap` color for each audio dataset. Sound engineers may use
    different color maps to highlight specific frequency properties for spotting patterns
    or noises. Changing the visual representation does not affect the sound quality
    or the data. Thus, selecting the color map based solely on your preferences is
    acceptable. If vivid pink and blue are your favorite, choose the `cool` `cmap`
    value.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 从*图8.5*可以看出，简单的方法是改变颜色映射（`cmap`）变量。Matplotlib库中有超过60种颜色映射。因此，Pluto将为每个音频数据集选择不同的`cmap`颜色。声音工程师可能使用不同的颜色映射来突出特定频率属性，以便识别模式或噪声。更改视觉表示不会影响声音质量或数据。因此，仅根据个人喜好选择颜色映射是可以接受的。如果你喜欢鲜艳的粉色和蓝色，可以选择`cool`
    `cmap`值。
- en: 'The Spectrogram code for the music dataset is as follows:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 音乐数据集的频谱图代码如下：
- en: '[PRE5]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The output is as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 8.7 – Spectrogram of a music file (Sad39910)](img/B17990_08_07.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图8.7 – 音乐文件的频谱图（Sad39910）](img/B17990_08_07.jpg)'
- en: Figure 8.7 – Spectrogram of a music file (Sad39910)
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.7 – 音乐文件的频谱图（Sad39910）
- en: Every time Pluto runs the `draw_spectrogram()` wrapper function, a random audio
    file is selected from the dataset. *Figure 8**.7* is the audio of cinematic music
    with strong cello leads, and the `plasma` color map is a bright yellow transit
    to orange and deep blue-purple.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 每次 Pluto 运行 `draw_spectrogram()` 包装函数时，都会从数据集中随机选择一个音频文件。*图 8**.7* 是具有强烈大提琴主奏的电影音乐音频，`plasma`
    色图是一种从亮黄色过渡到橙色和深蓝紫色的色彩。
- en: 'Likewise, for the human speech dataset, the command is as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，对于人声数据集，命令如下：
- en: '[PRE6]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The output is as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 8.8 – A spectrogram of human speech (1076_TAI_FEA_XX)](img/B17990_08_08.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.8 – 人声的频谱图 (1076_TAI_FEA_XX)](img/B17990_08_08.jpg)'
- en: Figure 8.8 – A spectrogram of human speech (1076_TAI_FEA_XX)
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.8 – 人声的频谱图 (1076_TAI_FEA_XX)
- en: '*Figure 8**.8* is the audio of a woman saying “*The airplane is almost full*”.
    The `cool` color map is a fuchsia pink transit to baby blue.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8**.8* 是一位女性说“*飞机几乎满了*”的音频。`cool` 色图是从紫红色过渡到淡蓝色。'
- en: 'Next, Pluto does the same for the urban sound dataset using the following command:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，Pluto 使用以下命令对城市声音数据集执行相同操作：
- en: '[PRE7]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The output is as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 8.9 – A spectrogram of urban sound (24347-8-0-88)](img/B17990_08_09.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.9 – 城市声音的频谱图 (24347-8-0-88)](img/B17990_08_09.jpg)'
- en: Figure 8.9 – A spectrogram of urban sound (24347-8-0-88)
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.9 – 城市声音的频谱图 (24347-8-0-88)
- en: '*Figure 8**.9* sounds like a passing siren from an ambulance. The `brg` color
    map is blue, red, and green, making a striking and dramatic graph.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8**.9* 听起来像是一辆救护车的警笛声。`brg` 色图是蓝色、红色和绿色，形成了一个引人注目且戏剧性的图形。'
- en: Fun challenge
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的挑战
- en: The challenge is a thought experiment. Is a particular color map with a multicolor
    such as a `rainbow cmap` or two colors such as `ocean cmap` more advantageous
    for different types of audio such as urban sound or music? In other words, is
    displaying the Spectrogram for a human singing an audio clip better in pink and
    magenta shades or multicolor earth tones?
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这个挑战是一个思维实验。对于不同类型的音频（如城市声音或音乐），使用具有多种颜色的色图（例如 `rainbow cmap`）还是使用两种颜色（如 `ocean
    cmap`）更有利？换句话说，用粉色和品红色阴影来显示人类演唱的音频片段，还是用多彩的地球色调更好？
- en: In audio engineering, a `window_hanning` parameter uses weighted cosine to diminish
    the audio spectrum. Window-hanning is a technique used to reduce artifacts in
    the frequency domain of an audio signal. It uses a `window` function to gently
    taper off the signal’s amplitude near its edges, minimizing the effect of spectral
    leakage and reducing unwanted noise in the signal. Window-hanning also improves
    the time-domain resolution of the signal, making it easier to identify onsets
    and offsets with greater precision.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在音频工程中，`window_hanning` 参数使用加权余弦函数来减少音频频谱的幅度。Hanning 窗口是一种用于减少音频信号频域伪影的技术。它使用
    `window` 函数在信号的边缘附近平滑地衰减信号的幅度，从而最小化频谱泄漏的影响，并减少信号中的不必要噪音。Hanning 窗口还提高了信号的时域分辨率，使得更容易精确地识别开始和结束的时刻。
- en: 'Pluto’s `draw_spectrogram()` method uses it as the default value. What if Pluto
    wants to see the raw signal without `window_hanning`? He can use `window_none`
    on the control and voice dataset, as per the following command:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Pluto 的 `draw_spectrogram()` 方法将其用作默认值。如果 Pluto 想查看没有 `window_hanning` 的原始信号怎么办？他可以在控制和语音数据集上使用
    `window_none`，如下命令所示：
- en: '[PRE8]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The output for the control piano scale in D major audio file is as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 控制钢琴音阶（D 大调）音频文件的输出如下：
- en: '![Figure 8.10 – Spectrogram with window_none, piano scale (control-d-major)](img/B17990_08_10.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.10 – 使用 window_none 的频谱图，钢琴音阶（控制-D-大调）](img/B17990_08_10.jpg)'
- en: Figure 8.10 – Spectrogram with window_none, piano scale (control-d-major)
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.10 – 使用 window_none 的频谱图，钢琴音阶（控制-D-大调）
- en: 'The output for the human speech dataset is as follows:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 人声数据集的输出如下：
- en: '![Figure 8.11 – A spectrogram with window_none, voice (1058_IEO_ANG_LO)](img/B17990_08_11.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.11 – 使用 window_none 的人声频谱图 (1058_IEO_ANG_LO)](img/B17990_08_11.jpg)'
- en: Figure 8.11 – A spectrogram with window_none, voice (1058_IEO_ANG_LO)
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.11 – 使用 window_none 的人声频谱图 (1058_IEO_ANG_LO)
- en: The other values for window parameters are `numpy.blackman`, `numpy.bartlett`,`scipy.signal`,
    and `scipy.signal.get_window`, and the audio from *Figure 8**.11* is a woman saying
    “*It is* *11 o’clock.*”
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: window 参数的其他值包括 `numpy.blackman`、`numpy.bartlett`、`scipy.signal` 和 `scipy.signal.get_window`，*图
    8**.11* 中的音频是一个女人说“*现在是* *11点钟*”。
- en: Fun challenge
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的挑战
- en: Here is a thought experiment. Given the Spectrogram graph as an image, can you
    reverse-engineer and play the audio from the picture? A hint is to research the
    inverse Apectrogram software and theories.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个思维实验。给定一个频谱图作为图像，你能否逆向工程并从图像中播放音频？提示是研究逆频谱图软件和理论。
- en: Pluto continues plotting various Spectrograms and color maps because audio engineers
    may need to exaggerate or highlight a particular frequency or audio property.
    In addition, the augmentation technique is similar to the previous chapter. Thus,
    spending more time expanding your insight into the Spectrogram is worthwhile.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Pluto 继续绘制各种频谱图和色彩图，因为音频工程师可能需要夸大或突出特定的频率或音频属性。此外，增强技术与上一章类似。因此，花更多时间扩展你对频谱图的理解是值得的。
- en: 'Pluto can use parameters individually or combine multiple parameters to produce
    a different desired outcome, such as using the `sides` parameter on the real-world
    music dataset and combining `sides` with the `mode` parameters on the control
    piano scale data. The commands are as follows:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: Pluto 可以单独使用参数，也可以组合多个参数来产生不同的结果，例如在真实音乐数据集上使用 `sides` 参数，或将 `sides` 和 `mode`
    参数组合在控制钢琴音阶数据上。命令如下：
- en: '[PRE9]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The output for the music with `sides` equal to `twosided` is as follows:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`sides`等于`twosided`时，音乐的输出如下：'
- en: "![Figure 8.12 – A spectrogram with twosided\uFEFF, music (Sad27307)](img/B17990_08_12.jpg)"
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.12 – 具有 twosided 的频谱图，音乐（Sad27307）](img/B17990_08_12.jpg)'
- en: Figure 8.12 – A spectrogram with twosided, music (Sad27307)
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.12 – 具有 twosided 的频谱图，音乐（Sad27307）
- en: 'The output for the control piano scale audio with `sides` equal to `twosided`
    and `mode` equal to `angle` is as follows:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`sides`等于`twosided`且`mode`等于`angle`时，控制钢琴音阶音频的输出如下：'
- en: '![Figure 8.13 – Spectrogram with twosided and angle, music (control-d-major)](img/B17990_08_13.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.13 – 具有 twosided 和 angle 的频谱图，音乐（control-d-major）](img/B17990_08_13.jpg)'
- en: Figure 8.13 – Spectrogram with twosided and angle, music (control-d-major)
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.13 – 具有 twosided 和 angle 的频谱图，音乐（control-d-major）
- en: Fun challenge
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的挑战
- en: Pluto has additional parameter combinations in the Python Notebook. Thus, it
    would be best if you modified or hacked the code. It will be fun to experience
    how different Spectrograms can look for different real-world datasets.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Pluto 在 Python 笔记本中有更多的参数组合。因此，最好修改或破解代码。体验不同的频谱图如何呈现不同的真实世界数据集将会很有趣。
- en: Next are the Mel-spectrogram and Chroma STFT plots. They are similar to a Spectrogram.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是 Mel 频谱图和 Chroma STFT 图。它们与频谱图类似。
- en: Mel-spectrogram and Chroma STFT plots
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Mel 频谱图和 Chroma STFT 图
- en: Pluto spends additional time plotting various Spectrograms because the augmentation
    technique is the same as in the Waveform graph in [*Chapter 7*](B17990_07.xhtml#_idTextAnchor135).
    Pluto will write fewer new wrapper functions. He will reuse the methods from the
    previous chapter, but before that, let’s draw more Spectrograms.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: Pluto 花更多时间绘制各种频谱图，因为增强技术与[*第7章*](B17990_07.xhtml#_idTextAnchor135)中的波形图相同。Pluto
    将编写更少的新包装函数。他将重用上一章的方法，但在此之前，让我们绘制更多频谱图。
- en: The subjective unit of pitch, also known as the **mel scale**, is a pitch unit
    with equal distance between pitches. *S. S. Stevens, John Volkmann, and E. B.
    Newmann* proposed the mel scale in the scholarly paper titled, *A scale for the
    measurement of the psychological magnitude of pitch*, in 1937.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 音高的主观单位，也称为 **Mel 音阶**，是一种音高单位，音高之间的距离是相等的。*S. S. Stevens、John Volkmann 和 E.
    B. Newmann* 在1937年发表于名为《音高心理量度的音阶》的学术论文中提出了 Mel 音阶。
- en: 'The math calculation for the mel scale is complex. Thus, Pluto relies on the
    `melspectrogram()` method from the Librosa library to perform the computation.
    The Pluto `draw_melspectrogram()` wrapper method uses the Librosa `melspectrogram()`
    function, and the code snippet is as follows:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: Mel 频率尺度的数学计算很复杂。因此，Pluto 依赖于 Librosa 库中的 `melspectrogram()` 方法来执行计算。Pluto 的
    `draw_melspectrogram()` 包装方法使用 Librosa 的 `melspectrogram()` 函数，代码片段如下：
- en: '[PRE10]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The entire function code is in the Python Notebook. Pluto draws the Mel-spectrogram
    for the control piano scale and the human speech datasets are as follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 整个函数代码在 Python 笔记本中。Pluto 为控制钢琴音阶和人类语音数据集绘制了 Mel 频谱图，结果如下：
- en: '[PRE11]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The output of the Mel-spectrogram for the control piano scale is as follows:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 控制钢琴音阶的 Mel 频谱图输出如下：
- en: '![Figure 8.14 – Mel-spectrogram control piano scale (control-d-major)](img/B17990_08_14.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.14 – Mel 频谱图，控制钢琴音阶（control-d-major）](img/B17990_08_14.jpg)'
- en: Figure 8.14 – Mel-spectrogram control piano scale (control-d-major)
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.14 – Mel-谱图控制钢琴音阶（control-d-major）
- en: 'The output of the Mel-spectrogram for the human speech dataset is as follows:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 人类语音数据集的 Mel-谱图输出如下：
- en: '![Figure 8.15 – Mel-spectrogram music (1016_MTI_FEA_XX)](img/B17990_08_15.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.15 – Mel-谱图音乐（1016_MTI_FEA_XX）](img/B17990_08_15.jpg)'
- en: Figure 8.15 – Mel-spectrogram music (1016_MTI_FEA_XX)
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.15 – Mel-谱图音乐（1016_MTI_FEA_XX）
- en: '*Figure 8**.15* audio is a man saying “*Maybe tomorrow, it will be cold.*”
    Every Mel-spectrogram has an audio-play button in the Python Notebook, where you
    can listen to the audio file.'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8**.15* 的音频是一个男人说：“*也许明天会很冷*。” 每个 Mel-谱图在 Python Notebook 中都有一个音频播放按钮，你可以听到音频文件。'
- en: The Chroma STFT is a signal’s sinusoidal frequency and local section phase content
    as it changes over time. *Dr. Dennis Gabor* introduced STFT, also known as the
    **Gabor transform**, in the scholarly paper, *Theory of Communication*, in 1944
    and revised it in 1945.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: Chroma STFT 是信号的正弦频率和局部阶段内容随着时间变化的表现。*Dennis Gabor 博士* 在 1944 年的学术论文《通信理论》中首次提出
    STFT，也被称为 **Gabor 变换**，并在 1945 年进行了修订。
- en: Chroma STFT is a method of analyzing musical audio signals by decomposing them
    into their constituent frequencies and amplitudes with respect to time. It is
    used to characterize the instrument used in a given piece of music and identify
    unique features in short pieces of music. Chroma STFT is most often used to identify
    spectral characteristics of a music signal, allowing the components to be quantified
    and compared to other versions of the same piece.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: Chroma STFT 是一种通过将音乐音频信号分解为其成分频率和振幅与时间的关系来分析音乐音频信号的方法。它用于表征所使用的乐器，并在短小的音乐片段中识别独特的特征。Chroma
    STFT 最常用于识别音乐信号的谱特征，从而能够对这些成分进行量化，并与同一乐曲的其他版本进行比较。
- en: 'Pluto adds slightly to the `draw_melspectrogram()` wrapper method to accommodate
    the Chroma STFT plot. The additional parameter is `is_chroma`, and the default
    value is `False`. The `_draw_melspectrometer()` helper function does not change.
    The code snippet is as follows:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: Pluto 在 `draw_melspectrogram()` 包装方法中稍作修改，以适应 Chroma STFT 图。新增的参数是 `is_chroma`，默认值为
    `False`。`_draw_melspectrometer()` 辅助函数没有变化。代码片段如下：
- en: '[PRE12]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The entire function code is on the Python Notebook. Pluto draws the Chroma
    STFT graphs for the control piano scale, the music, and the urban sound datasets
    as follows:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 整个函数代码位于 Python Notebook 中。Pluto 会为控制钢琴音阶、音乐和城市声音数据集绘制 Chroma STFT 图，如下所示：
- en: '[PRE13]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The output for the Chroma STFT plot for the control piano scale in D major
    is as follows:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: D 大调控制钢琴音阶的 Chroma STFT 图如下：
- en: '![Figure 8.16 – Chroma STFT, control piano scale (control-d-major)](img/B17990_08_16.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.16 – Chroma STFT，控制钢琴音阶（control-d-major）](img/B17990_08_16.jpg)'
- en: Figure 8.16 – Chroma STFT, control piano scale (control-d-major)
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.16 – Chroma STFT，控制钢琴音阶（control-d-major）
- en: 'The output for the music dataset is as follows:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 音乐数据集的输出如下：
- en: "![Figure 8.17 – Chrom\uFEFFa STFT, music (Sad19513)](img/B17990_08_17.jpg)"
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.17 – Chroma STFT，音乐（Sad19513）](img/B17990_08_17.jpg)'
- en: Figure 8.17 – Chroma STFT, music (Sad19513)
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.17 – Chroma STFT，音乐（Sad19513）
- en: 'The output for the urban sound dataset is as follows:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 城市声音数据集的输出如下：
- en: '![Figure 8.18 – Chroma STFT, urban sound (192123-2-0-11)](img/B17990_08_18.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.18 – Chroma STFT，城市声音（192123-2-0-11）](img/B17990_08_18.jpg)'
- en: Figure 8.18 – Chroma STFT, urban sound (192123-2-0-11)
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.18 – Chroma STFT，城市声音（192123-2-0-11）
- en: '*Figure 8**.17''s* audio is cinematic music with a strong violin lead, and
    *Figure 8**.18* sounds like noisy kids playing in an outdoor playground.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8**.17* 的音频是带有强烈小提琴主旋律的电影配乐，而 *图 8**.18* 听起来像是在户外操场上玩耍的嘈杂孩子们的声音。'
- en: Fun fact
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的事实
- en: When generating new images or plots, Pluto automatically writes or exports the
    image files to the `~/Data-Augmentation-with-Python/pluto_img` directory. Thus,
    Pluto automatically saved the augmented images in [*Chapter 3*](B17990_03.xhtml#_idTextAnchor058)
    and [*Chapter 4*](B17990_04.xhtml#_idTextAnchor082) and the Waveform graph, audio
    Spectrogram, Mel-spectrogram, and Chroma STFT charts in [*Chapter 7*](B17990_07.xhtml#_idTextAnchor135)
    and [*Chapter 8*](B17990_08.xhtml#_idTextAnchor167). The helper function name
    is `_drop_image()` with the `pluto[id].jpg` file format, where `id` is an auto-increment
    integer from the `self.fname_id` variable.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在生成新图像或图表时，Pluto会自动将图像文件写入或导出到`~/Data-Augmentation-with-Python/pluto_img`目录。因此，Pluto会自动保存增强的图像到[*第3章*](B17990_03.xhtml#_idTextAnchor058)和[*第4章*](B17990_04.xhtml#_idTextAnchor082)，以及波形图、音频声谱图、梅尔声谱图和色度STFT图表到[*第7章*](B17990_07.xhtml#_idTextAnchor135)和[*第8章*](B17990_08.xhtml#_idTextAnchor167)。辅助函数的名称为`_drop_image()`，文件格式为`pluto[id].jpg`，其中`id`是来自`self.fname_id`变量的自增整数。
- en: We have discussed in detail and written Python code for the audio Spectrogram,
    Mel-spectrogram, and Chroma STFT. Next, Pluto will describe how to perform audio
    augmentation with a Spectrogram.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经详细讨论并编写了音频声谱图、梅尔声谱图和色度STFT的Python代码。接下来，Pluto将描述如何使用声谱图进行音频增强。
- en: Spectrogram augmentation
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 声谱图增强
- en: Pluto will reuse most of the wrapper functions from [*Chapter 7*](B17990_07.xhtml#_idTextAnchor135).
    You can reread the previous chapter if the following code seems challenging. Pluto
    will shorten his explanation of the wrapper functions because he assumes you are
    an expert at writing audio augmentation wrapper functions.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: Pluto将重用大部分[*第7章*](B17990_07.xhtml#_idTextAnchor135)中的包装函数。如果以下代码看起来有些难度，您可以重新阅读前一章。Pluto将简化对包装函数的解释，因为他假设您已经是编写音频增强包装函数的专家。
- en: Audio Spectrogram, Mel-spectrogram, Chroma STFT, and Waveform charts take the
    returned amplitude data and sampling rate from the Librosa `load()` function reading
    an audio file. There is an additional transformation of the amplitude data, but
    they serve the same goal of visualizing the sound wave and frequencies.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 音频声谱图、梅尔声谱图、色度STFT和波形图表从Librosa的`load()`函数读取音频文件时返回的幅度数据和采样率。这些数据经过了额外的变换，但它们的共同目标是可视化声波和频率。
- en: After reviewing many scholarly published papers, Pluto concluded that the audio
    augmentation techniques in [*Chapter 7*](B17990_07.xhtml#_idTextAnchor135) apply
    equally well to the audio Spectrogram, Mel-spectrogram, and Chroma STFT. In particular,
    he referred to the scholarly paper, *Audio Augmentation for Speech Recognition*
    by Tom Ko, Vijayaditya Peddinti, Daniel Povey, and Sanjeev Khudanpur, published
    in 2015; *Data augmentation approaches for improving animal audio classification*
    by Loris Nannia, Gianluca Maguoloa, and Michelangelo Paci, published in 2020;
    and *Deep Convolutional Neural Networks and Data Augmentation for Environmental
    Sound Classification* by Justin Salamon and Juan Pablo Bello, published in 2017.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在审阅了许多学术论文后，Pluto得出结论，[*第7章*](B17990_07.xhtml#_idTextAnchor135)中的音频增强技术同样适用于音频声谱图、梅尔声谱图和色度STFT。特别是，他参考了2015年Tom
    Ko、Vijayaditya Peddinti、Daniel Povey和Sanjeev Khudanpur发表的学术论文《Speech Recognition的音频增强》；2020年Loris
    Nannia、Gianluca Maguoloa和Michelangelo Paci发表的《提高动物音频分类的数据增强方法》；以及2017年Justin Salamon和Juan
    Pablo Bello发表的《深度卷积神经网络与环境声音分类的数据增强》。
- en: 'Intuitively, there shouldn’t be any difference from the technique in [*Chapter
    7*](B17990_07.xhtml#_idTextAnchor135) because the underlying amplitude data and
    sampling rate are the same. In other words, you can use [*Chapter 7*](B17990_07.xhtml#_idTextAnchor135)
    audio augmentation functions for the audio Spectrogram, Mel-spectrogram, and Chroma
    STFT, such as the following techniques:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 直观地说，这与[*第7章*](B17990_07.xhtml#_idTextAnchor135)中的技术应该没有区别，因为底层的幅度数据和采样率是相同的。换句话说，您可以使用[*第7章*](B17990_07.xhtml#_idTextAnchor135)中的音频增强函数来处理音频声谱图、梅尔声谱图和色度STFT，像以下这些技术：
- en: Time-stretching
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时间拉伸
- en: Time-shifting
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时间偏移
- en: Pitch-scaling
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 音高缩放
- en: Noise injection
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 噪声注入
- en: Polarity inversion
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 极性反转
- en: Low-pass filter
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 低通滤波器
- en: High-pass filter
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高通滤波器
- en: Ban-pass filter
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带通滤波器
- en: Low-shelf filter
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 低棚滤波器
- en: High-shelf filter
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高棚滤波器
- en: Band-stop filter
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带阻滤波器
- en: Peak filter
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 峰值滤波器
- en: There are others, such as `Masking` and `Gaps`. They are available from the
    `audiomentation` library. The **safe** level mentioned in the previous chapter
    applies equally to the audio Spectrogram, Mel-spectrogram, and Chroma STFT.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他功能，如`Masking`和`Gaps`，它们可以通过`audiomentation`库获得。前一章中提到的**安全**级别同样适用于音频声谱图、Mel-声谱图和Chroma
    STFT。
- en: Fun fact
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的事实
- en: You can alter any Python functions by overriding them in the `correct` class.
    Pluto functions belong to the `PacktDataAug` class. Thus, you can hack and override
    any of Pluto’s methods by adding the `@add_method(PacktDataAug)` code line before
    the function definition.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在`correct`类中覆盖任何Python函数来进行更改。Pluto的函数属于`PacktDataAug`类。因此，你可以通过在函数定义之前添加`@add_method(PacktDataAug)`代码行来黑客入侵并覆盖Pluto的任何方法。
- en: 'Pluto needs to hack the `_audio_transform()` helper function and includes the
    new`is_waveform` parameter setting the default to `True` so it will not affect
    methods in [*Chapter 7*](B17990_07.xhtml#_idTextAnchor135). The definition of
    the new method is as follows:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: Pluto需要修改`_audio_transform()`辅助函数，并包括新的`is_waveform`参数，默认设置为`True`，以便它不会影响[*第7章*](B17990_07.xhtml#_idTextAnchor135)中的方法。新方法的定义如下：
- en: '[PRE14]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The updated code snippet is as follows:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 更新后的代码片段如下：
- en: '[PRE15]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Thus, the `is_waveform` parameter is to use the Waveform graphs in [*Chapter
    7*](B17990_07.xhtml#_idTextAnchor135) or the audio Spectrogram, Mel-spectrogram,
    and Chroma STFT charts. That’s it, and this is why we love coding with Pluto.
    He follows the best object-oriented coding practices, and his functions are in
    one class.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`is_waveform`参数用于在[*第7章*](B17990_07.xhtml#_idTextAnchor135)中使用波形图，或音频声谱图、Mel-声谱图和Chroma
    STFT图表。就是这样，这也是我们喜欢使用Pluto编程的原因。他遵循最佳的面向对象编程实践，所有函数都在一个类中。
- en: 'Pluto adds the new parameter to the `play_aug_time_shift()` wrapper function
    and tests it with the control data. The command is as follows:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: Pluto将新参数添加到`play_aug_time_shift()`包装函数中，并用控制数据进行测试。命令如下：
- en: '[PRE16]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The output for the audio Spectrogram is as follows:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 音频声谱图的输出如下：
- en: '![Figure 8.19 – Spectrogram, time shift, piano scale (control-d-major)](img/B17990_08_19.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.19 – 声谱图，时间偏移，钢琴音阶（control-d-major）](img/B17990_08_19.jpg)'
- en: Figure 8.19 – Spectrogram, time shift, piano scale (control-d-major)
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.19 – 声谱图，时间偏移，钢琴音阶（control-d-major）
- en: 'The output for the Mel-spectrogram is as follows:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: Mel-声谱图的输出如下：
- en: '![Figure 8.20 – Mel-spectrogram, time shift, piano scale (control-d-major)](img/B17990_08_20.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.20 – Mel-声谱图，时间偏移，钢琴音阶（control-d-major）](img/B17990_08_20.jpg)'
- en: Figure 8.20 – Mel-spectrogram, time shift, piano scale (control-d-major)
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.20 – Mel-声谱图，时间偏移，钢琴音阶（control-d-major）
- en: 'The output for the Chroma STFT is as follows:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: Chroma STFT的输出如下：
- en: '![Figure 8.21 – Chroma STFT, time shift, piano scale (control-d-major)](img/B17990_08_21.jpg)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.21 – Chroma STFT，时间偏移，钢琴音阶（control-d-major）](img/B17990_08_21.jpg)'
- en: Figure 8.21 – Chroma STFT, time shift, piano scale (control-d-major)
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.21 – Chroma STFT，时间偏移，钢琴音阶（control-d-major）
- en: '*Figure 8**.19*, *Figure 8**.20*, and *Figure 8**.21* play the piano scale
    in D major shift to the left by about 2 seconds. In other words, the audio started
    with the **G note**, looped around, and finished on the **F# note**. Pluto recommends
    listening to the before and after effects of the Python Notebook as the easiest
    method to understand it.'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8.19*、*图 8.20* 和 *图 8.21* 将钢琴音阶（D大调）向左偏移约2秒。换句话说，音频以**G音**开始，循环后以**F#音**结束。Pluto建议听听Python笔记本中的前后效果，这样是理解它的最简单方法。'
- en: 'Pluto does the same for the human speech dataset using the following command:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: Pluto对人声数据集做相同的操作，使用以下命令：
- en: '[PRE17]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The output for the audio Spectrogram is as follows:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 音频声谱图的输出如下：
- en: '![Figure 8.22 – Spectrogram, time shift, human voice (1085_ITS_ANG_XX)](img/B17990_08_22.jpg)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.22 – 声谱图，时间偏移，人声（1085_ITS_ANG_XX）](img/B17990_08_22.jpg)'
- en: Figure 8.22 – Spectrogram, time shift, human voice (1085_ITS_ANG_XX)
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.22 – 声谱图，时间偏移，人声（1085_ITS_ANG_XX）
- en: 'The output for the Mel-spectrogram is as follows:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: Mel-声谱图的输出如下：
- en: '![Figure 8.23 – Mel-spectrogram, time shift, human voice (1085_ITS_ANG_XX)](img/B17990_08_23.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.23 – Mel-声谱图，时间偏移，人声（1085_ITS_ANG_XX）](img/B17990_08_23.jpg)'
- en: Figure 8.23 – Mel-spectrogram, time shift, human voice (1085_ITS_ANG_XX)
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.23 – Mel-声谱图，时间偏移，人声（1085_ITS_ANG_XX）
- en: 'The output for Chroma STFT is as follows:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: Chroma STFT的输出如下：
- en: '![Figure 8.24 – Chroma STFT, time shift, human voice (1085_ITS_ANG_XX)](img/B17990_08_24.jpg)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.24 – Chroma STFT，时间偏移，人声（1085_ITS_ANG_XX）](img/B17990_08_24.jpg)'
- en: Figure 8.24 – Chroma STFT, time shift, human voice (1085_ITS_ANG_XX)
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.24 – Chroma STFT，时间偏移，人声（1085_ITS_ANG_XX）
- en: '*Figure 8**.22*, *Figure 8**.23*, and *Figure 8**.24''s* original audio is
    a man’s voice saying “*We will stop in a couple of minutes.*” The augmented version
    is shifted to “*stop in a couple of minutes [silence] we will*.” Pluto can hear
    the difference in the before-and-after augmentation effect in the Python Notebook.
    The goal of audio augmentation is the same for Spectrogram and Waveform graphs,
    which is to increase the AI accuracy prediction by increasing the input data.'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '*图8**.22*、*图8**.23*和*图8**.24*的原始音频是一位男性的声音，说：“*我们将在几分钟内停下*。”增强版本则变成了“*停下几分钟[静音]我们将停下*。”Pluto可以在Python
    Notebook中听到增强前后的差异。音频增强的目标对于谱图和波形图是相同的，即通过增加输入数据来提高AI的预测准确性。'
- en: The results for the music and urban sound dataset are shifted similarly. Pluto
    has the time-shift code in the Python Notebook, where you can run it and see and
    hear the result. Furthermore, Pluto will skip describing the results for other
    audio augmentation functions in this chapter. It is because the results are the
    same as in [*Chapter 7*](B17990_07.xhtml#_idTextAnchor135), and the wrapper functions
    code is in the Python Notebook. However, he will explain the `play_aug_noise_injection()`
    function because this function can extend to specific topics discussing how sound
    engineers use Spectrograms.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 音乐和城市声音数据集的结果变化类似。Pluto在Python Notebook中有时间偏移的代码，你可以运行它并看到、听到结果。此外，Pluto将跳过在本章中描述其他音频增强功能的结果。因为结果与[*第7章*](B17990_07.xhtml#_idTextAnchor135)中的相同，包装函数代码也在Python
    Notebook中。然而，他会解释`play_aug_noise_injection()`函数，因为这个函数可以扩展到特定话题，讨论声音工程师如何使用谱图。
- en: Sound engineers use standard audio Spectrograms and various other Spectrograms
    to spot and remove unwanted noises, such as hums, buzz, hiss, clips, gaps, clicks,
    and pops. Audio augmentation goals are the opposite. We add unwanted noises to
    the recording within a safe range. Thus, we increase the training datasets and
    improve the AI prediction accuracy.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 声音工程师使用标准的音频谱图和其他各种谱图来发现并去除不需要的噪声，如嗡嗡声、嗡嗡声、嘶嘶声、剪辑、间隙、点击声和爆裂声。音频增强的目标是相反的。我们在安全范围内向录音中加入不需要的噪声。因此，我们增加了训练数据集并提高了AI的预测准确性。
- en: 'Pluto adds white noise to the music dataset using the following command:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: Pluto使用以下命令将白噪声添加到音乐数据集中：
- en: '[PRE18]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The output for the audio Spectrogram is as follows:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 音频谱图的输出如下：
- en: '![Figure 8.25 – Spectrogram, noise injection, music (Happy41215)](img/B17990_08_25.jpg)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![图8.25 – 谱图，噪声注入，音乐（Happy41215）](img/B17990_08_25.jpg)'
- en: Figure 8.25 – Spectrogram, noise injection, music (Happy41215)
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.25 – 谱图，噪声注入，音乐（Happy41215）
- en: 'The output for the Mel-spectrogram is as follows:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: Mel-谱图的输出如下：
- en: '![Figure 8.26 – Mel-spectrogram, noise injection, music (Happy41215)](img/B17990_08_26.jpg)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![图8.26 – Mel-谱图，噪声注入，音乐（Happy41215）](img/B17990_08_26.jpg)'
- en: Figure 8.26 – Mel-spectrogram, noise injection, music (Happy41215)
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.26 – Mel-谱图，噪声注入，音乐（Happy41215）
- en: 'The output for the Chroma STFT is as follows:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: Chroma STFT的输出如下：
- en: '![Figure 8.27 – Chroma STFT, noise injection, music (Happy41215)](img/B17990_08_27.jpg)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![图8.27 – Chroma STFT，噪声注入，音乐（Happy41215）](img/B17990_08_27.jpg)'
- en: Figure 8.27 – Chroma STFT, noise injection, music (Happy41215)
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.27 – Chroma STFT，噪声注入，音乐（Happy41215）
- en: '*Figure 8**.25*, *Figure 8**.26*, and *Figure 8**.27* play heavy drums, light
    electronic bells, and heavy electronic guitars with a medium level of white noise.'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '*图8**.25*、*图8**.26*和*图8**.27*播放重鼓、轻电子铃声和重电子吉他，伴有中等强度的白噪声。'
- en: Fun challenge
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的挑战
- en: Here is a thought experiment. You are part of a team developing a self-driving
    car system, and your goal is to recognize or identify car honking while driving.
    How would you augment the audio data? A hint is thinking about real-world driving
    conditions with traffic or urban noises.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个思维实验。你是一个自动驾驶汽车系统开发团队的一员，你的目标是在驾驶时识别或识别汽车鸣笛声。你将如何增强音频数据？一个提示是考虑现实世界中的驾驶条件，例如交通或城市噪声。
- en: 'If you have hums, buzz, or pops audio files, you can inject them into the recording
    by alternating the `play_aug_noise_injection()` wrapper function as follows:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有嗡嗡声、嗡嗡声或爆裂声的音频文件，你可以通过交替使用`play_aug_noise_injection()`包装函数将它们注入到录音中，如下所示：
- en: '[PRE19]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The preceding code snippet and complete documentation can be found in the `audiomentations`
    library on GitHub.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码片段和完整文档可以在GitHub上的`audiomentations`库中找到。
- en: The next topic is a novel idea using a Spectrogram as an image input for deep
    learning image classification.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个话题是使用谱图作为深度学习图像分类的图像输入的新颖想法。
- en: Spectrogram images
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 谱图图像
- en: Fundamentally, audio data is time-series data. Thus AI uses a time-series algorithm,
    such as the **autoregressive integrated moving average** (**ARIMA**) or **exponential
    smoothing** (**ES**) algorithm for audio classification. However, there is a better
    method. You use the Spectrogram as an image representing the audio sound, not
    the time-series numerical array, for input. Using images as the input data, you
    can leverage the robust neural network algorithm to classify audio more accurately.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 从根本上讲，音频数据是时间序列数据。因此，AI使用时间序列算法，如**自回归积分滑动平均**（**ARIMA**）或**指数平滑**（**ES**）算法进行音频分类。然而，还有更好的方法。你可以使用声谱图作为代表音频声音的图像输入，而不是时间序列数值数组。使用图像作为输入数据，你可以利用强大的神经网络算法更准确地对音频进行分类。
- en: Strictly speaking, this topic does not directly pertain to new audio augmentation
    techniques. Still, it is an essential topic for data scientists to understand.
    However, Pluto will not write Python code for building a neural network model
    using Spectrograms as input.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 严格来说，这个话题并不直接涉及新的音频增强技术。然而，它是数据科学家必须理解的重要话题。尽管如此，Pluto不会编写用于构建神经网络模型的Python代码，使用声谱图作为输入。
- en: Deep learning image classification, also known as the machine learning model
    that uses the artificial neural networks algorithm, achieved an unprecedented
    accuracy level that exceeds 98% accuracy recently. Many AI scientists apply deep
    learning techniques to audio datasets, such as *Audio Spectrogram Representations
    for Processing with Convolutional Neural Networks* by Lonce Wyse, published in
    2017, and *Deep Learning Audio Spectrograms Processing to the Early COVID-19 Detection*
    by Ciro Rodriguez, Daniel Angeles, Renzo Chafloque, Freddy Kaseng, and Bishwajeet
    Pandey, published in 2020.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 深度学习图像分类，也就是使用人工神经网络算法的机器学习模型，最近达到了前所未有的准确度，超过了98%。许多AI科学家将深度学习技术应用于音频数据集，例如Lonce
    Wyse在2017年发布的《*Audio Spectrogram Representations for Processing with Convolutional
    Neural Networks*》和Ciro Rodriguez、Daniel Angeles、Renzo Chafloque、Freddy Kaseng、Bishwajeet
    Pandey于2020年发布的《*Deep Learning Audio Spectrograms Processing to the Early COVID-19
    Detection*》。
- en: The technique takes an audio Spectrogram as the image input, not the audio amplitude,
    sampling rate, or Mel scale. For example, the music dataset (MEC) goal is to classify
    a piece of music clip as having a `happy` or `sad` mood. Pluto can generate all
    the audio files to audio Spectrograms and save them on the local drive. He will
    use the Fast.ai robust AI framework and libraries to create an image classification
    model. He can achieve 95% accuracy or higher.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 该技术将音频声谱图作为图像输入，而不是音频振幅、采样率或Mel频率尺度。例如，音乐数据集（MEC）的目标是将一段音乐片段分类为`快乐`或`悲伤`的情感。Pluto可以将所有音频文件转换为音频声谱图并保存到本地驱动器。他将使用Fast.ai强大的AI框架和库来创建图像分类模型。他可以达到95%以上的准确度。
- en: The big question is can you use the image augmentation methods discussed in
    [*Chapter 3*](B17990_03.xhtml#_idTextAnchor058) and [*Chapter 4*](B17990_04.xhtml#_idTextAnchor082)
    to apply to Spectrogram?
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 关键问题是你能否使用在[*第3章*](B17990_03.xhtml#_idTextAnchor058)和[*第4章*](B17990_04.xhtml#_idTextAnchor082)中讨论的图像增强方法来应用于声谱图？
- en: It depends on the safe level and the objective of the AI model. For example,
    using the image augmentation technique, vertically flipping a spectogram involves
    flipping high to low frequencies and vice versa. Pluto wonders how that would
    affect the music’s mood. It could be an **unsafe** technique. However, image noise
    injection methods with low noise values could be a safe technique with a Spectrogram.
    Pluto thinks it is more suitable to stay with the audio augmentation techniques
    in [*Chapter 7*](B17990_07.xhtml#_idTextAnchor135).
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 这取决于AI模型的安全级别和目标。例如，使用图像增强技术，垂直翻转声谱图意味着将高频率翻转为低频率，反之亦然。Pluto想知道这会如何影响音乐的情感。它可能是一个**不安全**的技术。然而，带有低噪声值的图像噪声注入方法可能是声谱图的安全技术。Pluto认为，保持使用[*第7章*](B17990_07.xhtml#_idTextAnchor135)中的音频增强技术更为合适。
- en: Similar deep learning methods can be applied to the human speech (`CREMA-D`)
    dataset to classify the age, sex, or ethnicity of the speaker.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 类似的深度学习方法也可以应用于人类语音（`CREMA-D`）数据集，用于分类说话者的年龄、性别或种族。
- en: Fun challenge
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的挑战
- en: This is a thought experiment. Can you use speech-to-text software to convert
    the voice into text and use text augmentation functions in [*Chapter 5*](B17990_05.xhtml#_idTextAnchor101)
    and [*Chapter 6*](B17990_06.xhtml#_idTextAnchor116)? A hint is to think about
    the scope of the project. For example, it could work if the AI aims to infer sentiment
    analysis but not if the goal is to identify male or female voices.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个思维实验。你能否使用语音转文本软件将语音转换为文本，并使用[*第 5 章*](B17990_05.xhtml#_idTextAnchor101)和[*第
    6 章*](B17990_06.xhtml#_idTextAnchor116)中的文本增强功能？一个提示是思考项目的范围。例如，如果 AI 旨在推断情感分析，它可能有效，但如果目标是识别男性或女性声音，则可能无效。
- en: For the urban sound (US8K) dataset, Pluto could use the deep learning multilabel
    classification to identify different types of sound in an urban sound clip, such
    as a jackhammer, wind, kids playing, rain, dogs barking, or gunshots.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 对于城市声音（US8K）数据集，Pluto 可以使用深度学习多标签分类技术来识别城市声音片段中的不同类型声音，比如电锯声、风声、孩子们玩耍的声音、雨声、狗叫声或枪声。
- en: Fun challenge
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的挑战
- en: Pluto challenges you to refactor the `Pluto` class to make it faster and more
    compact. You should also include all the image and text wrapper and helper functions
    from previous chapters. Pluto encourages you to create and upload your library
    to *GitHub and PyPI.org*. Furthermore, you don’t have to name the class `PacktDataAug`,
    but it would give Pluto and his human companion a great big smile if you cited
    or mentioned the book. The code goals were ease of understanding, reusable patterns,
    and teaching you about the Python Notebook. Thus, refactoring the code as a Python
    library would be relatively painless and fun.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: Pluto 挑战你重构 `Pluto` 类，以使其更加快速和紧凑。你还应该包括之前章节中的所有图像和文本包装器以及辅助函数。Pluto 鼓励你将你的库创建并上传到
    *GitHub 和 PyPI.org*。此外，你不必将类命名为 `PacktDataAug`，但如果你引用或提到这本书，Pluto 和他的人类伙伴会露出灿烂的笑容。代码目标是易于理解、可重用的模式，并教你使用
    Python Notebook。因此，将代码重构为 Python 库将是相对轻松且有趣的。
- en: We have covered audio Spectrogram, Mel-spectrogram, and Chroma STFT representation
    and augmentation, including the technique of using Spectrograms as image input
    to the deep learning image classification model. It is time for a summary.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经涵盖了音频频谱图、梅尔频谱图和色度 STFT 表示与增强的内容，包括将频谱图用作深度学习图像分类模型的图像输入技术。现在是时候做一个总结了。
- en: Summary
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Audio augmentation is challenging to explain in a book format. Still, we gain
    a deeper understanding of audio amplitude, frequency, and sampling rate with additional
    visualization techniques, such as the audio Spectrogram, Mel-spectrogram, and
    Chroma STFT. Furthermore, in the Python Notebook, you can listen to the before-and-after
    effects of the audio augmentation.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 音频增强在书籍格式中很难解释，但通过附加的可视化技术，如音频频谱图、梅尔频谱图和色度 STFT，我们能更深入地理解音频的幅度、频率和采样率。此外，在 Python
    Notebook 中，你可以听到音频增强前后的效果。
- en: Compared to the previous chapter, Waveform graphs show the amplitude of a signal
    over time, giving an understanding of its shape and structure. Spectrogram graphs
    show a visual representation of the frequencies of a signal over time, providing
    a deeper insight into the harmonic content of the sound.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 与上一章相比，波形图显示信号随时间变化的幅度，帮助理解信号的形状和结构。频谱图显示信号随时间变化的频率的可视化表示，提供了对声音谐波内容的更深入了解。
- en: An Audio Spectrogram comes in many variations, whether `specgram()` function.
    Pluto uses Python code in wrapper functions on a few Spectrogram types. The majority
    of Spectrogram variations are up to you to explore by expanding the `Pluto` object
    with additional wrapper functions. Using Pluto’s object-oriented best practices,
    the function wrapper concept, and the audiomentations library, it is easy to expand
    Pluto with additional wrapper functions.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 音频频谱图有很多变种，无论是 `specgram()` 函数。Pluto 在一些频谱图类型上使用了 Python 代码包装器函数。大多数频谱图变种由你来探索，方法是通过额外的包装函数扩展
    `Pluto` 对象。利用 Pluto 的面向对象最佳实践、函数包装器概念和 audiomentations 库，扩展 Pluto 添加额外的包装函数非常容易。
- en: For Spectrogram augmentation techniques, they are the same techniques as those
    from [*Chapter 7*](B17990_07.xhtml#_idTextAnchor135), such as time -shifting,
    time-stretching, pitch-scaling, noise injections, bandpass filters, and many others.
    Intuitively, there should be no difference because in the previous chapter, you
    choose to visualize the sound wave in Waveform graphs, and in this chapter, you
    drew them in the audio Spectrogram, Mel-spectrogram, and Chrom STFT plots. Thus,
    the underlying data is the same.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 对于谱图增强技术，它们与[*第7章*](B17990_07.xhtml#_idTextAnchor135)中的技术相同，如时间平移、时间拉伸、音高缩放、噪声注入、带通滤波器等。直观地看，这些方法应该没有区别，因为在上一章中，你选择将声音波形可视化为波形图，而在这一章中，你将它们绘制为音频谱图、梅尔谱图和色度STFT图。因此，底层数据是相同的。
- en: Pluto has to only modify the `_audio_transform()` helper method with an additional
    `is_waveform` parameter. The Python code becomes deceptively simple and repetitive
    afterward, but it hides the robust power of the audiomentations library and Pluto
    object-oriented best practices.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: Pluto 只需修改 `_audio_transform()` 辅助方法，新增一个 `is_waveform` 参数。此后，Python 代码变得简单而重复，但它隐藏了
    audiomentations 库和 Pluto 面向对象最佳实践的强大功能。
- en: Throughout the chapter, there were **fun facts** and **fun challenges**. Pluto
    hopes you will take the advantages provided and expand the experience beyond the
    scope of this chapter.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，有许多 **有趣的事实** 和 **有趣的挑战**。Pluto 希望你能利用这些优势，并将体验扩展到本章之外的领域。
- en: The next chapter moves beyond the typical data types, such as image, text, and
    audio, to tubular data augmentation.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将超越典型的数据类型，如图像、文本和音频，探讨表格数据增强。
- en: 'Part 5: Tabular Data Augmentation'
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5部分：表格数据增强
- en: 'This part includes the following chapter:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分包括以下章节：
- en: '[*Chapter 9*](B17990_09.xhtml#_idTextAnchor182), *Tabular Data Augmentation*'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第9章*](B17990_09.xhtml#_idTextAnchor182)，*表格数据增强*'
