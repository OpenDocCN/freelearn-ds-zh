- en: '*Chapter 7*'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第七章*'
- en: Reproducibility in Big Data Analysis
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 大数据分析中的可重复性
- en: Learning Objectives
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 学习目标
- en: 'By the end of this chapter, you will be able to:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章结束时，您将能够：
- en: Implement the concept of reproducibility with Jupyter notebooks
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Jupyter笔记本实现可重复性的概念
- en: Perform data gathering in a reproducible way
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以可重复的方式进行数据收集
- en: Implement suitable code practices and standards to keep analysis reproducible
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施适当的编码实践和标准，以保持分析的可重复性
- en: Avoid the duplication of work with IPython scripts
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免IPython脚本的重复工作
- en: In this chapter, we will discover how reproducibility plays a vital role in
    big data analysis.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，我们将探讨可重复性在大数据分析中的重要作用。
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍
- en: In the previous chapter, we learned how to define a business problem from a
    data science perspective through a very structured approach, which included how
    to identify and understand business requirements, an approach to solutioning it,
    and how to build data pipelines and carry out analysis.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们通过非常结构化的方法学习了如何从数据科学的角度定义商业问题，其中包括如何识别和理解业务需求，解决方案的方法以及如何构建数据管道并进行分析。
- en: In this chapter, we will look at the reproducibility of computational work and
    research practices, which is a major challenge faced today across the industry,
    as well as by academics—especially in data science work, in which most of the
    data, complete datasets, and associated workflow cannot be accessed completely.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将讨论计算工作和研究实践的可重复性，这也是今天业界和学术界面临的主要挑战，尤其是在数据科学工作中，其中大部分数据、完整的数据集和相关的工作流程无法完全访问。
- en: Today, most research and technical papers conclude with the approach used on
    the sample data, a brief mention of the methodology used, and a theoretical approach
    to a solution. Most of these works lack detailed calculations and step-by-step
    approaches. This is a very limited amount of knowledge for anyone reading it to
    be able to reproduce the same work that was carried out. This is the basic objective
    of reproducible coding, where ease of reproducing the code is key.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，大多数研究和技术论文的结尾都会提到样本数据的使用方法、简要描述采用的研究方法以及解决方案的理论思路。这些作品大多缺乏详细的计算过程和逐步方法。这对读者来说，几乎没有提供足够的知识来重复进行相同的工作。这就是可重复编码的基本目标——代码的可复现性至关重要。
- en: There have been advancements in notebooks in general, which can include text
    elements for commenting in detail; this improves the reproduction process. This
    is where Jupyter as a notebook is gaining traction within the data science and
    research communities.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在笔记本的整体发展中，已出现包括文本元素来详细注释的功能，这有助于改进复制过程。正因如此，Jupyter作为一种笔记本在数据科学和研究界日益受到关注。
- en: Jupyter was developed with the intention of being open source software with
    open standards and services for interactive computing across dozens of programming
    languages, including Python, Spark, and R.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Jupyter的开发旨在成为开源软件，采用开放标准和服务，支持多种编程语言的交互式计算，包括Python、Spark和R。
- en: Reproducibility with Jupyter Notebooks
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Jupyter笔记本进行可重复性分析
- en: Let's start by learning what it is meant by **computational reproducibility**.
    Research, solutions, prototypes, and even a simple algorithm that is developed
    is said to be reproducible if access is provided to the original source code that
    was used to develop the solution, and the data that was used to build any related
    software should be able to produce the same results. However, today, the scientific
    community is experiencing some challenges in reproducing work developed previously
    by peers. This is mainly due to the lack of documentation and difficulty in understanding
    process workflows.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先学习什么是**计算可重复性**。如果提供了开发解决方案所用的原始源代码，并且构建相关软件所用的数据能够产生相同的结果，那么研究、解决方案、原型甚至一个简单的算法都可以被称为可重复的。然而，今天科学界在重现同行以前开发的工作方面遇到了一些挑战，主要是由于缺乏文档和理解过程工作流的困难。
- en: The impact of a lack of documentation can be seen at every level, right from
    understanding the approach to the code level. Jupyter is one of the best tools
    for improvising this process, for better reproducibility, and for the reuse of
    developed code. This includes not just understanding what each line or snippet
    of code does, but also understanding and visualizing data.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 缺乏文档的影响可以在各个层面上看到，从理解方法到代码层面。Jupyter 是一种非常适合改善这一过程的工具，有助于更好的可重现性，以及开发代码的重用。这不仅包括理解每一行或代码片段的作用，还包括理解和可视化数据。
- en: Note
  id: totrans-18
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: Jon Claerbout, who is considered the father of reproducible computational research,
    in the early 1990s required his students to develop research work and create results
    that could be regenerated in a single click. He believed that work that was completed
    took effort and tim, and should be left as it was so that further work on it could
    be done by reusing the earlier work without any difficulties. On a macro level,
    an economy's growth is strongly determined by the amount of innovation. The reproducibility
    of earlier work or research contributes to overall innovation growth.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Jon Claerbout，被认为是可重现计算研究的奠基人，早在1990年代初期，他要求学生们开发可以一键重新生成的研究工作和结果。他认为，完成的工作是需要时间和精力的，应当保持原样，以便后续的工作能够在不遇到困难的情况下重用之前的工作。从宏观角度看，一个经济体的增长在很大程度上由创新的数量决定。早期工作或研究的可重现性促进了整体创新的增长。
- en: Now let's see how we can maintain effective computational reproducibility using
    the Jupyter notebook.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如何使用 Jupyter 笔记本维护有效的计算可重现性。
- en: 'The following pointers are broad ways to achieve reproducibility using a Jupyter
    notebook in Python:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是通过 Jupyter 笔记本在 Python 中实现可重现性的一些广泛方法：
- en: Provide a detailed introduction to the business problem
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供商业问题的详细介绍
- en: Document the approach and workflow
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记录方法和工作流程
- en: Explain the data pipelines
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解释数据管道
- en: Explain the dependencies
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解释依赖关系
- en: Use source code version control
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用源代码版本控制
- en: Modularize the process
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块化过程
- en: In the following sections, let's explore and discuss the previously mentioned
    topics in a brief manner.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，让我们简要地探索并讨论前面提到的主题。
- en: Introduction to the Business Problem
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 商业问题介绍
- en: One of the key advantages of using the Jupyter notebook is that it includes
    textual content along with the code to create a workflow.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Jupyter 笔记本的一个关键优势是，它将文本内容与代码结合，形成一个工作流程。
- en: We must start with a good introduction to the business problem we have identified,
    and a summarization of it has to be documented in the Jupyter notebook to provide
    the gist of the problem. It has to include a problem statement, with the identified
    business problem from a data science perspective, concluding why we need to carry
    out this analysis, or what the objective of the process is.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须从一个对已识别的商业问题的良好介绍开始，并将其总结文档化在 Jupyter 笔记本中，以提供问题的要点。它必须包含一个问题陈述，从数据科学的角度描述已识别的商业问题，最后得出为什么我们需要进行此分析或过程目标是什么。
- en: Documenting the Approach and Workflows
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 记录方法和工作流程
- en: In data science, there can be a lot of back and forth in computational work,
    such as, for instance, the explorations that are carried out, the kind of algorithms
    used, and the parameter changes to tune.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据科学中，计算工作可能会有很多反复，如例如进行的探索、使用的算法类型以及调整的参数。
- en: 'Once changes to the approach have been finalized, those changes need to be
    documented to avoid work being repeated. Documenting the approach and workflows
    helps to set up a process. Adding comments to code while developing is a must
    and this has to be a continuous practice rather than waiting until the end or
    the results to add comments. By the end of the process, you may have forgotten
    the details, and this could result in miscalculating the effort that goes into
    it. The advantages of maintaining the Jupyter notebook with good documentation
    are the following:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦方法的变化已最终确定，就需要对这些变化进行文档记录，以避免工作重复。记录方法和工作流程有助于建立流程。在开发过程中，给代码添加注释是必须的，这应当是一个持续的实践，而不是等到结束或结果出来后再添加注释。到过程结束时，你可能已经忘记了细节，这可能导致对所需努力的错误估算。维护
    Jupyter 笔记本并进行良好的文档记录有以下几个优点：
- en: Tracking the development effort
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跟踪开发工作
- en: Self-explanatory code with comments for each process
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有自解释性的代码，并为每个过程添加注释
- en: A better understanding of the code workflow and the results of each step
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更好地理解代码工作流程以及每一步的结果
- en: Avoiding back-and-forth work by making previous code snippets for specific tasks
    easy to find
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过使特定任务的先前代码片段容易找到，避免反复工作
- en: Avoiding duplicating work by understanding the repeated use of code
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过理解代码的重复使用来避免重复工作
- en: Ease of knowledge transfer
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 知识转移的便利性
- en: Explaining the Data Pipeline
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解释数据管道
- en: The data for identifying and quantifying the problem can be generated from multiple
    data sources, databases, legacy systems, real-time data sources, and so on. The
    data scientist involved in this closely works with the data management teams of
    the client to extract and gather the required data and ingest it into the analytical
    tools for further analysis, and creates a strong data pipeline to acquire this
    data.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 用于识别和量化问题的数据可以来自多个数据源、数据库、遗留系统、实时数据源等。参与此过程的数据科学家将与客户的数据管理团队密切合作，提取和收集所需数据，并将其导入分析工具以进行进一步分析，并创建强大的数据管道来获取这些数据。
- en: It is important to document the data sources in detail (covered in the previous
    chapter) to maintain a data dictionary that explains the variables that are considered,
    why they are considered, what kind of data we have (structured or unstructured),
    and the type of data that we have; that is, whether we have a time-series, multivariate,
    or data that needs to be preprocessed and generated from raw sources such as image,
    text, speech, and so on.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 详细记录数据来源非常重要（在上一章中已讨论），以维护一个数据字典，解释所考虑的变量、为什么要考虑这些变量、我们拥有的数据类型（结构化或非结构化），以及我们所拥有的数据类型；即，我们是否拥有时间序列数据、多变量数据，或是需要从原始数据源（如图像、文本、语音等）进行预处理和生成的数据。
- en: Explain the Dependencies
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解释依赖关系
- en: 'Dependencies are the packages and libraries that are available in a tool. For
    instance, you may use OpenCV ([https://docs.opencv.org/3.0-beta/doc/py_tutorials/py_tutorials.html](https://docs.opencv.org/3.0-beta/doc/py_tutorials/py_tutorials.html)),
    a library in Python for image-related modeling, or you may use an API such as
    TensorFlow for deep-learning modeling. Here''s another example: if you use Matplotlib
    ( [https://matplotlib.org/](https://matplotlib.org/)) for visualization in Python,
    Matplotlib can be a part of dependencies. On other hand, dependencies can include
    the hardware and software specifications that are required for an analysis. You
    can manage your dependencies explicitly from the beginning by employing a tool
    such as a Conda environment to list all relevant dependencies (covered in previous
    chapters on dependencies for pandas, NumPy, and so on), including their package/library
    versions.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖关系是工具中可用的包和库。例如，你可以使用OpenCV（[https://docs.opencv.org/3.0-beta/doc/py_tutorials/py_tutorials.html](https://docs.opencv.org/3.0-beta/doc/py_tutorials/py_tutorials.html)），这是一个用于图像相关建模的Python库，或者你可以使用像TensorFlow这样的API进行深度学习建模。另一个例子是：如果你在Python中使用Matplotlib（[https://matplotlib.org/](https://matplotlib.org/)）进行可视化，Matplotlib可以成为依赖关系的一部分。另一方面，依赖关系还可以包括分析所需的硬件和软件规格。你可以通过使用像Conda环境这样的工具，从一开始就显式地管理你的依赖关系，列出所有相关的依赖项（包括它们的包/库版本），这些在之前关于pandas、NumPy等依赖关系的章节中已经覆盖。
- en: Using Source Code Version Control
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用源代码版本控制
- en: Version control is an important aspect when it comes to any kind of computational
    activity that involves code. When code is being developed, bugs or errors will
    arise. If previous versions of the code are available, we will then be able to
    pinpoint when the bug was identified, when it was resolved, and the amount of
    effort that went into it. This is possible through version control. At times,
    you may need to revert to older versions, because of scalability, performance,
    or for some other reasons. Using source code version control tools, you can always
    easily access previous versions of code.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 版本控制是任何涉及代码的计算活动中非常重要的方面。在开发代码时，错误或缺陷是难以避免的。如果有以前版本的代码可用，我们就可以明确定位到缺陷何时被发现、何时解决，以及解决的过程和付出的努力。版本控制使得这一切成为可能。有时，由于可扩展性、性能或其他原因，你可能需要回退到旧版本。通过使用源代码版本控制工具，你可以随时轻松访问以前版本的代码。
- en: Modularizing the Process
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 过程模块化
- en: Avoiding duplicate code is an effective practice for managing repetitive tasks,
    for maintaining code, and for debugging. To carry this out efficiently, you must
    modularize the process.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 避免重复代码是管理重复任务、维护代码和调试的有效做法。为了高效地实现这一目标，你必须对过程进行模块化。
- en: Let's understand this in detail. Say you carry out a set of data manipulation
    processes, where you develop the code to complete a task. Now, suppose you need
    to use the same code in a later section of the code; you need to do add, copy,
    or run the same steps again, which is a repetitive task. The input data and variable
    names can change. To handle this, you can write the earlier steps as a function
    for a dataset or on a variable and save all such functions as a separate module.
    You can call it a functions file (for example, `functions.py`, a Python file).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细理解这一点。假设你执行了一组数据处理过程，在这些过程中，你开发了代码来完成任务。现在，假设你需要在后续部分再次使用相同的代码；你需要再次添加、复制或运行相同的步骤，这就变成了重复的任务。输入数据和变量名称可能会发生变化。为了处理这个问题，你可以将之前的步骤编写成一个函数，应用于数据集或变量，并将所有这些函数保存为一个独立的模块。你可以称它为函数文件（例如，`functions.py`，一个Python文件）。
- en: In the next section, we will look at this in more detail, particularly with
    respect to gathering and building an efficient data pipeline in a reproducible
    way.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将更详细地讨论这一点，特别是在以可重现的方式收集和构建高效的数据管道方面。
- en: Gathering Data in a Reproducible Way
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 以可重现的方式收集数据
- en: 'Once the problem is defined, the first step in an analysis task is gathering
    data. Data can be extracted from multiple sources: databases, legacy systems,
    real-time data, external data, and so on. Data sources and the way data can be
    ingested into the model needs to be documented.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦问题被定义，分析任务的第一步是收集数据。数据可以从多个来源提取：数据库、遗留系统、实时数据、外部数据等。数据来源及其如何输入模型需要被记录下来。
- en: Let's understand how to use markdown and code block functionalities in the Jupyter
    notebook. Text can be added to Jupyter notebooks using markdown cells. These texts
    can be changed to bold or italic, like in any text editor. To change the cell
    type to markdown, you can use the **Cell** menu. We will look at the ways you
    can use various functionalities in markdown and code cells in Jupyter.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们理解如何在Jupyter笔记本中使用markdown和代码块功能。可以通过Markdown单元向Jupyter笔记本中添加文本。与任何文本编辑器一样，这些文本可以修改为粗体或斜体。要将单元类型更改为Markdown，可以使用**Cell**菜单。接下来，我们将探讨如何在Jupyter中使用Markdown和代码单元中的各种功能。
- en: Functionalities in Markdown and Code Cells
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Markdown和代码单元中的功能
- en: '**Markdown in Jupyter**: To select the markdown option in **Jupyter**, click
    on **Widgets** and **Markdown** from the drop-down menu:'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Jupyter中的Markdown**：要在**Jupyter**中选择Markdown选项，请点击下拉菜单中的**Widgets**和**Markdown**：'
- en: '![](img/C12913_07_01.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/C12913_07_01.jpg)'
- en: 'Figure 7.1: The markdown option in the Jupyter notebook'
  id: totrans-58
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.1：Jupyter笔记本中的Markdown选项
- en: '`<h1>` and `<h2>` tags:'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<h1>` 和 `<h2>` 标签：'
- en: '![Figure 7.2: Heading levels in the Jupyter notebook](img/C12913_07_02.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图7.2：Jupyter笔记本中的标题级别](img/C12913_07_02.jpg)'
- en: 'Figure 7.2: Heading levels in the Jupyter notebook'
  id: totrans-61
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.2：Jupyter笔记本中的标题级别
- en: '**Text in Jupyter**: To add text just the way it is, we do not add any tags
    to it:![Figure 7.3: Using normal text in the Jupyter notebook](img/Image36337.jpg)'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Jupyter中的文本**：要添加文本，保持其原样，我们不需要为其添加任何标签：![图7.3：在Jupyter笔记本中使用普通文本](img/Image36337.jpg)'
- en: 'Figure 7.3: Using normal text in the Jupyter notebook'
  id: totrans-63
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.3：在Jupyter笔记本中使用普通文本
- en: '`**`) to the start and end of the text, for example, **Bold**:'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**`) 在文本的开始和结束处，例如，**粗体**：'
- en: '![Figure 7.4: Using bold text in the Jupyter notebook](img/C12913_07_04.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图7.4：在Jupyter笔记本中使用粗体文本](img/C12913_07_04.jpg)'
- en: 'Figure 7.4: Using bold text in the Jupyter notebook'
  id: totrans-66
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.4：在Jupyter笔记本中使用粗体文本
- en: '`*`) to the start and end of the text:'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*`) 在文本的开始和结束处：'
- en: '![Figure 7.5: Using italicized text in the Jupyter notebook](img/C12913_07_05.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![图7.5：在Jupyter笔记本中使用斜体文本](img/C12913_07_05.jpg)'
- en: 'Figure 7.5: Using italicized text in the Jupyter notebook'
  id: totrans-69
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.5：在Jupyter笔记本中使用斜体文本
- en: '**Code in Jupyter**: To make text appear as code, select the **Code** option
    from the dropdown:'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Jupyter中的代码**：要让文本以代码形式出现，从下拉菜单中选择**Code**选项：'
- en: '![Figure 7.6: Code in the Jupyter notebook](img/C12913_07_06.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图7.6：Jupyter笔记本中的代码](img/C12913_07_06.jpg)'
- en: 'Figure 7.6: Code in the Jupyter notebook'
  id: totrans-72
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.6：Jupyter笔记本中的代码
- en: Explaining the Business Problem in the Markdown
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Markdown中解释业务问题
- en: 'Provide a brief introduction to the business problem to understand the objective
    of the project. The business problem definition is a summarization of the problem
    statement and includes the way in which the problem can be resolved using a data
    science algorithm:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 简要介绍业务问题，以便理解项目的目标。业务问题定义是对问题陈述的总结，并包括如何通过数据科学算法解决问题的方法：
- en: '![Figure 7.7: Snippet of the problem definition](img/C12913_07_07.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.7：问题定义的片段](img/C12913_07_07.jpg)'
- en: 'Figure 7.7: Snippet of the problem definition'
  id: totrans-76
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7.7：问题定义的片段
- en: Providing a Detailed Introduction to the Data Source
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提供数据源的详细介绍
- en: 'The data source needs to be documented properly to understand the data license
    for reproducibility and for further work. A sample of how the data source can
    be added is as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 需要正确记录数据源，以了解数据许可的可重复性及进一步工作的要求。数据源添加的示例如下：
- en: '![Figure 7.8: Data Source in Jupyter notebook](img/C12913_07_08.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.8：Jupyter notebook中的数据源](img/C12913_07_08.jpg)'
- en: 'Figure 7.8: Data Source in Jupyter notebook'
  id: totrans-80
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7.8：Jupyter notebook中的数据源
- en: Explain the Data Attributes in the Markdown
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 Markdown 中解释数据属性
- en: 'A data dictionary needs to be maintained to understand the data on an attribute
    level. This can include defining the attribute with what type of data it is:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 需要维护一个数据字典，以便理解属性层面上的数据。这可以包括定义属性及其数据类型：
- en: '![Figure 7.9: Detailed attributes in markdown](img/C12913_07_09.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.9：Markdown中的详细属性](img/C12913_07_09.jpg)'
- en: 'Figure 7.9: Detailed attributes in markdown'
  id: totrans-84
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7.9：Markdown中的详细属性
- en: 'To understand the data on an attribute level, we can use functions such as
    `info` and `describe`; however, `pandas_profiling` is a library that provides
    a lot of descriptive information in one function, from which we can extract the
    following information:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在属性层面理解数据，我们可以使用诸如`info`和`describe`之类的函数；然而，`pandas_profiling`是一个提供大量描述性信息的库，通过一个函数，我们可以提取以下信息：
- en: '![Figure 7.10: Profiling report](img/C12913_07_10.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.10：数据概况报告](img/C12913_07_10.jpg)'
- en: 'Figure 7.10: Profiling report'
  id: totrans-87
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7.10：数据概况报告
- en: 'On the DataFrame level, that is, for the overall data, which includes all the
    columns and rows that are considered:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在 DataFrame 层面，即针对整体数据，这包括所有被考虑的列和行：
- en: Number of variables
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量数量
- en: Number of observations
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 观察数量
- en: Total missing (%)
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 总缺失值 (%)
- en: Total size in memory
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存中的总大小
- en: Average record size in memory
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存中的平均记录大小
- en: Correlation matrix
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 相关矩阵
- en: Sample data
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例数据
- en: 'On the attribute level, which is for a specific column, the specifications
    are as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在属性层面，即针对特定列，规格如下：
- en: Distinct count
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 唯一计数
- en: Unique (%)
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 唯一值 (%)
- en: Missing (%)
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缺失值 (%)
- en: Missing (n)
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缺失值 (n)
- en: Infinite (%)
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无限值 (%)
- en: Infinite (n)
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无限值 (n)
- en: Histogram for distribution
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分布的直方图
- en: Extreme values
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 极值
- en: '![Figure 7.11: Data profiling report on the attribute level](img/C12913_07_11.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.11：属性层面的数据概况报告](img/C12913_07_11.jpg)'
- en: 'Figure 7.11: Data profiling report on the attribute level'
  id: totrans-106
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7.11：属性层面的数据概况报告
- en: 'Exercise 45: Performing Data Reproducibility'
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习 45：执行数据可重复性
- en: 'The aim of this exercise is to learn how to develop code for high reproducibility
    in terms of data understanding. We will be using the UCI Bank and Marketing dataset
    taken from this link: [https://raw.githubusercontent.com/TrainingByPackt/Big-Data-Analysis-with-Python/master/Lesson07/Dataset/bank/bank.csv](https://raw.githubusercontent.com/TrainingByPackt/Big-Data-Analysis-with-Python/master/Lesson07/Dataset/bank/bank.csv).'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 本练习的目的是学习如何开发具有高可重复性的数据理解代码。我们将使用来自此链接的UCI银行和营销数据集：[https://raw.githubusercontent.com/TrainingByPackt/Big-Data-Analysis-with-Python/master/Lesson07/Dataset/bank/bank.csv](https://raw.githubusercontent.com/TrainingByPackt/Big-Data-Analysis-with-Python/master/Lesson07/Dataset/bank/bank.csv)。
- en: 'Let''s perform the following steps to achieve data reproducibility:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行以下步骤以实现数据的可重复性：
- en: 'Add headings and mention the business problem in the notebook using markup:![Figure
    7.12: Introduction and business problem](img/C12913_07_12.jpg)'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 notebook 中添加标题并提到业务问题，使用标记法：![图 7.12：介绍和业务问题](img/C12913_07_12.jpg)
- en: 'Figure 7.12: Introduction and business problem'
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7.12：介绍和业务问题
- en: 'Import the required libraries into the Jupyter notebook:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所需的库导入到 Jupyter notebook 中：
- en: '[PRE0]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now set the working directory, as illustrated in the following command:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在设置工作目录，如以下命令所示：
- en: '[PRE1]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Import and read the input dataset as `df` using pandas'' `read_csv` function
    from the dataset:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 pandas 的`read_csv`函数导入并读取输入数据集为`df`：
- en: '[PRE2]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now view the first five rows of the dataset using the `head` function:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在使用`head`函数查看数据集的前五行：
- en: '[PRE3]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The output is as follows:'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 7.13: Data in the CSV file](img/C12913_07_13.jpg)'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图 7.13：CSV 文件中的数据](img/C12913_07_13.jpg)'
- en: 'Figure 7.13: Data in the CSV file'
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7.13：CSV 文件中的数据
- en: 'Add the **Data Dictionary** and **Data Understanding** sections in the Jupyter
    notebook:![Figure 7.14: Data Dictionary](img/C12913_07_14.jpg)'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Jupyter notebook 中添加**数据字典**和**数据理解**部分：![图 7.14：数据字典](img/C12913_07_14.jpg)
- en: 'Figure 7.14: Data Dictionary'
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7.14：数据字典
- en: 'The **Data Understanding** section is as follows:'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**数据理解**部分如下：'
- en: '![Figure 7.15: Data Understanding](img/C12913_07_15.jpg)'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图 7.15：数据理解](img/C12913_07_15.jpg)'
- en: 'Figure 7.15: Data Understanding'
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7.15：数据理解
- en: 'To understand the data specifications, use pandas profiling to generate the
    descriptive information:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要理解数据规范，可以使用 pandas profiling 生成描述性信息：
- en: '[PRE4]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The output is as follows:'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 7.16: Summary of the specifications with respect to data](img/C12913_07_16.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.16：与数据相关的规范摘要](img/C12913_07_16.jpg)'
- en: 'Figure 7.16: Summary of the specifications with respect to data'
  id: totrans-132
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7.16：与数据相关的规范摘要
- en: 'Instructor Note:'
  id: totrans-133
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 教学人员备注：
- en: This exercise identifies how a Jupyter notebook is created and includes how
    to develop a reproducible Jupyter notebook for a bank marketing problem. This
    must include a good introduction to the business problem, data, data types, data
    sources, and so on.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 本练习展示了如何创建 Jupyter notebook，并包括如何为银行营销问题开发一个可重复的 Jupyter notebook。必须包括对商业问题、数据、数据类型、数据来源等的良好介绍。
- en: Code Practices and Standards
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码实践和标准
- en: Writing code with a set of practices and standards is important for code reproducibility,
    as is explaining the workflow of the process descriptively in a step-wise manner.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 编写符合一套实践和标准的代码对代码的可重复性非常重要，就像在逐步描述中解释流程一样重要。
- en: This is universally applicable across any coding tool that you may use, not
    just with Jupyter. Some coding practices and standards should be followed strictly
    and a few of these will be discussed in the next section.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这适用于任何你可能使用的编码工具，不仅仅是 Jupyter。某些编码实践和标准应严格遵守，接下来将讨论其中的一些内容。
- en: Environment Documentation
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 环境文档
- en: 'For installation purposes, you should maintain a snippet of code to install
    the necessary packages and libraries. The following practices help with code reproducibility:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装过程中，你应该保留一段代码，用于安装必要的软件包和库。以下实践有助于代码的可重复性：
- en: Include the versions used for libraries/packages.
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包括所使用的库/软件包的版本。
- en: Download the original version of packages/libraries used and call the packages
    internally for installation in a new setup.
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载所使用的库/软件包的原始版本，并在新环境中调用软件包进行安装。
- en: Effective implementation by running it in a script that automatically installs
    dependencies.
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过在脚本中有效实施，自动安装依赖项。
- en: Writing Readable Code with Comments
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编写带注释的可读代码
- en: Code commenting is an important aspect. Apart from the markdown option available
    on Jupyter, we must include comments for each code snippet. At times, we make
    changes in the code in a way that may not be used immediately but will be required
    for later steps. For instance, we can create an object that may not be used immediately
    for the next step but for later steps. This can confuse a new user in terms of
    understanding the flow. Commenting such specifics is crucial.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 代码注释是一个重要的方面。除了 Jupyter 上的 markdown 选项外，我们还必须为每个代码片段添加注释。有时我们对代码进行的修改可能不会立即使用，但稍后的步骤可能需要。比如，我们可以创建一个对象，虽然下一步不需要，但稍后会用到。如果没有注释，可能会让新用户难以理解代码的流程。注释这些细节非常重要。
- en: 'When we use a specific method, we must provide a reason for using that particular
    method. For example, let''s say, for the transformation of data for normal distribution,
    you can use `box-cox` or `yeo-johnson`. If there are negative values, you may
    prefer `yeo-johnson`, as it can handle negative values. It needs to be commented
    as in the following example:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用特定的方法时，必须提供使用该方法的理由。例如，假设在进行数据正态分布转换时，你可以使用 `box-cox` 或 `yeo-johnson`。如果数据中有负值，你可能更倾向于使用
    `yeo-johnson`，因为它能够处理负值。此时需要进行如下注释：
- en: '![Figure 7.17: Comments with reasons](img/C12913_07_17.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.17：带理由的注释](img/C12913_07_17.jpg)'
- en: 'Figure 7.17: Comments with reasons'
  id: totrans-147
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7.17：带理由的注释
- en: We should also follow a good practice for naming the objects that we create.
    For example, you can name raw data `raw_data`, and can do the same for model data,
    preprocessed data, analysis data, and so on. The same goes when creating objects
    such as models and methods, for example, we can call power transformations `pt`.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还应遵循良好的命名实践来命名我们创建的对象。例如，您可以将原始数据命名为`raw_data`，模型数据、预处理数据、分析数据等也可以使用相同的命名方式。当创建像模型和方法这样的对象时，也可以采用类似的命名方式，例如，我们可以将幂变换命名为`pt`。
- en: Effective Segmentation of Workflows
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 有效的工作流分割
- en: When developing code, there are steps that you design to achieve end results.
    Each step can be part of a process. For instance, reading data, understanding
    data, carrying out various transformations, or building a model. Each of these
    steps, needs to be clearly separated for multiple reasons; firstly, code readability
    for how each stage is carried out and, secondly, how the result is generated at
    each stage.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发代码时，您需要设计一系列步骤以实现最终结果。每个步骤都可以是一个过程的一部分。例如，读取数据、理解数据、进行各种转换或构建模型。每个步骤都需要清晰地分开，原因有多个；首先是为了提高代码的可读性，便于理解每个阶段是如何进行的，其次是为了明确每个阶段是如何生成结果的。
- en: 'For example, here, we are looking at two sets of activities. One where the
    loop is generated to identify the columns that need to be normalized, and the
    second generating the columns that do not need to be normalized using the previous
    output:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在这里，我们正在查看两组活动。一组是生成循环以识别需要归一化的列，另一组是使用前一阶段的输出生成不需要归一化的列：
- en: '![Figure 7.18: Effective segmentation of workflows](img/C12913_07_18.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.18：有效的工作流分割](img/C12913_07_18.jpg)'
- en: 'Figure 7.18: Effective segmentation of workflows'
  id: totrans-153
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7.18：有效的工作流分割
- en: Workflow Documentation
  id: totrans-154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 工作流文档
- en: When products and solutions are developed, they are mostly developed, monitored,
    deployed, and tested in a sandbox environment. To ensure a smooth deployment process
    in a new environment, we must provide sufficient support documents for technical,
    as well as non-technical, users. Workflow documentation includes requirements
    and design documents, product documentation, methodology documentation, installation
    guides, software user manuals, hardware and software requirements, troubleshooting
    management, and test documents. These are mostly required for a product or a solution
    development. We cannot just hand over a bunch of code to a client/user and ask
    them to get it running. Workflow documentation helps during the deployment and
    integration stages in a client/user environment, which is highly important for
    code reproducibility.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 当产品和解决方案被开发时，它们通常是在沙箱环境中开发、监控、部署和测试的。为了确保在新环境中顺利部署，我们必须为技术和非技术用户提供足够的支持文档。工作流文档包括需求和设计文档、产品文档、方法论文档、安装指南、软件用户手册、硬件和软件要求、故障排除管理以及测试文档。这些通常是产品或解决方案开发中所必需的。我们不能仅仅把一堆代码交给客户或用户，让他们自行运行。工作流文档在客户或用户环境中的部署和集成阶段非常重要，尤其是在确保代码可重复性方面。
- en: 'At a high level, data science project documentation can be divided into two
    segments:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 从高层次来看，数据科学项目文档可以分为两个部分：
- en: Product documentation
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 产品文档
- en: Methodology documentation
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方法论文档
- en: 'Product documentation provides information on how each functionality is used
    in the UI/UX and the application of it. Product documentation can be further segmented
    into:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 产品文档提供了关于如何在UI/UX中使用每项功能及其应用的信息。产品文档可以进一步细分为：
- en: Installation guides
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装指南
- en: Software design and user manual
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软件设计与用户手册
- en: Test documents
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试文档
- en: Troubleshooting management
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 故障排除管理
- en: Methodology documentation provides information on the algorithms that are used,
    the methods, the solution approach, and so on.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 方法论文档提供了关于所使用的算法、方法、解决方案方式等信息。
- en: 'Exercise 46: Missing Value Preprocessing with High Reproducibility'
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习 46：高可重复性的缺失值预处理
- en: 'The aim of this exercise is to learn how to develop code for high reproducibility
    in terms of missing value treatment preprocessing. We will be using the UCI Bank
    and Marketing dataset taken from this link: [https://raw.githubusercontent.com/TrainingByPackt/Big-Data-Analysis-with-Python/master/Lesson07/Dataset/bank/bank.csv](https://raw.githubusercontent.com/TrainingByPackt/Big-Data-Analysis-with-Python/master/Lesson07/Dataset/bank/bank.csv).'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 本练习的目的是学习如何开发具有高可重复性的代码，处理缺失值预处理问题。我们将使用来自这个链接的UCI银行和营销数据集：[https://raw.githubusercontent.com/TrainingByPackt/Big-Data-Analysis-with-Python/master/Lesson07/Dataset/bank/bank.csv](https://raw.githubusercontent.com/TrainingByPackt/Big-Data-Analysis-with-Python/master/Lesson07/Dataset/bank/bank.csv)。
- en: 'Perform the following steps to find the missing value preprocessing reproducibility:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以查找缺失值预处理的可重复性：
- en: 'Import the required libraries and packages in the Jupyter notebook, as illustrated
    here:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Jupyter notebook中导入所需的库和包，如下所示：
- en: '[PRE5]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Set the working directory of your choice as illustrated here:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置您选择的工作目录，如下所示：
- en: '[PRE6]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Import the dataset from `back.csv` to the Spark object using the `read_csv`
    function, as illustrated here:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`back.csv`导入数据集到Spark对象中，使用`read_csv`函数，如下所示：
- en: '[PRE7]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, view the first five rows of the dataset using the head function:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用head函数查看数据集的前五行：
- en: '[PRE8]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The output is as follows:'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: '![Figure 7.19: Bank dataset](img/C12913_07_19.jpg)'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图 7.19：银行数据集](img/C12913_07_19.jpg)'
- en: 'Figure 7.19: Bank dataset'
  id: totrans-178
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7.19：银行数据集
- en: As the dataset has no missing values, we have to introduce some into the dataset.
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于数据集没有缺失值，我们需要人为地添加一些缺失值。
- en: 'First, set the loop parameters, as illustrated here:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，设置循环参数，如下所示：
- en: '[PRE9]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Create a `for` loop for generating missing values:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`for`循环来生成缺失值：
- en: '[PRE10]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Use the following command to identify the missing values in the data by looking
    into each column''s missing values:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令，通过查看每一列的缺失值，识别数据中的缺失值：
- en: '[PRE11]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The output is as follows:'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: '![](img/C12913_07_20.jpg)'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](img/C12913_07_20.jpg)'
- en: 'Figure 7.20: Find the missing values'
  id: totrans-188
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7.20：查找缺失值
- en: 'Define the range of **Interquartile Ranges** (**IQRs**) and apply them to the
    dataset to identify the outliers:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义**四分位数范围**（**IQRs**）并将其应用于数据集，以识别离群值：
- en: '[PRE12]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The output is as follows:'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: '![Figure 7.21: Identifying outliers](img/C12913_07_21.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.21：识别离群值](img/C12913_07_21.jpg)'
- en: 'Figure 7.21: Identifying outliers'
  id: totrans-193
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7.21：识别离群值
- en: Avoiding Repetition
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 避免重复
- en: We all know that the duplication or repetition of code is not a good practice.
    It becomes difficult to handle bugs, and the length of code increases. Different
    versions of the same code can lead to difficulty after a point, in terms of understanding
    which version is correct. For debugging, a change in one position needs to be
    reflected across the code. To avoid bad practices and write and maintain high-level
    code, let's learn about some best practices in the following sections.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 我们都知道，代码的重复或冗余并不是一个好的编程习惯。它会导致调试困难，并且代码长度增加。相同代码的不同版本会在某些时候带来理解上的困难，尤其是在确定哪个版本是正确时。对于调试来说，某个位置的改动需要在代码中各处体现。为了避免不良编程习惯，编写和维护高质量的代码，让我们在接下来的章节中学习一些最佳实践。
- en: Using Functions and Loops for Optimizing Code
  id: totrans-196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用函数和循环来优化代码
- en: A function confines a task which requires a set of steps that from a single
    of multiple inputs to single or multiple outputs and loops are used for repetitive
    tasks on the same block of code for a different set of sample or subsetted data.
    Functions can be written for a single variable, multiple variables, a DataFrame,
    or a multiple set of parameter inputs.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 一个函数封装了一个任务，该任务需要一组步骤，将一个或多个输入转换为一个或多个输出，而循环用于对相同代码块的不同样本或子集数据执行重复任务。函数可以为单个变量、多个变量、DataFrame，或者多个参数输入集编写。
- en: For example, let's say you need to carry out some kind of transformation for
    only numeric variables in a DataFrame or matrix. A function can be written for
    a single variable and it can be applied to all numeric columns, or it can be written
    for a DataFrame, where the function identifies the set of numeric variables and
    applies them to generate the output. Once a function is written, it can be applied
    any future similar application in the proceeding code. This reduces duplicate
    work.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设你只需要对DataFrame或矩阵中的数值变量进行某种转换。可以为单个变量编写函数，并将其应用于所有数值列，或者可以为整个DataFrame编写函数，该函数会识别数值变量集并将其应用于生成输出。一旦编写了一个函数，它可以应用于接下来代码中的任何类似应用。这将减少重复工作。
- en: 'The following are the challenges that need to be considered when writing a
    function:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 编写函数时需要考虑以下挑战：
- en: '**Internal parameter changes**: There can be changes in the input parameter
    from one task to another. This is a common challenge. To handle this, you can
    mention the dynamic variables or objects in the function inputs when defining
    the inputs for a function.'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内部参数变化**：任务之间的输入参数可能会发生变化，这是一个常见的挑战。为了处理这个问题，你可以在定义函数输入时，提到函数输入中的动态变量或对象。'
- en: '**Variations in the calculation process for a future task**: Write a function
    with internal functions that will not require many changes if any variations need
    to be captured. This way, rewriting the function for a new kind of task will be
    easy.'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**未来任务计算过程中的变化**：编写一个包含内部函数的函数，如果需要捕获任何变化，将不需要进行太多修改。这样，为新任务编写函数将变得容易。'
- en: '**Avoiding loops in functions**: If a process needs to be carried out across
    many subsets of the data by row, functions can be directly applied in each loop.
    This way, your function will be not be constrained by repetitive blocks of code
    on the same data.'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**避免在函数中使用循环**：如果需要在数据的多个子集上按行进行处理，可以直接在每个循环中应用函数。这样，函数就不会受到对相同数据的重复代码块的限制。'
- en: '**Handing changes in data type changes**: The return object in a function can
    be different for different tasks. Depending on the task, the return object can
    be converted to other data classes or data types as required. However, input data
    classes or data types can change from task to task. To handle this, you need to
    clearly provide comments to understand the inputs for a function.'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**处理数据类型变化**：函数中的返回对象对于不同的任务可能是不同的。根据任务的不同，返回对象可以根据需要转换为其他数据类或数据类型。然而，输入数据类或数据类型可能会因任务的不同而变化。为了解决这个问题，你需要清楚地提供注释，以帮助理解函数的输入。'
- en: '**Writing optimized functions**: Arrays are efficient when it comes to repetitive
    tasks such as loops or functions. In Python, using NumPy arrays generates very
    efficient data processing for most arithmetic operations.'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编写优化函数**：数组在执行诸如循环或函数等重复任务时非常高效。在 Python 中，使用 NumPy 数组可以对大多数算术操作生成非常高效的数据处理。'
- en: Developing Libraries/Packages for Code/Algorithm Reuse
  id: totrans-205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 开发用于代码/算法重用的库/包
- en: Packages or libraries encapsulate a collection of modules. They are highly dependable
    for code reproducibility and the modules that are generated. There are thousands
    of packages/libraries that are generated daily by developers and researchers around
    the globe. You can follow the package developing instructions from the Python
    project packaging guide for developing a new package ([https://packaging.python.org/tutorials/packaging-projects/](https://packaging.python.org/tutorials/packaging-projects/)).
    This tutorial will provide you with information on how to upload and distribute
    your package publicly as well as for internal use.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 包包或库封装了一组模块。它们在代码可复现性和生成的模块方面非常可靠。每天，全球的开发者和研究人员都会生成成千上万个包/库。你可以参考 Python 项目打包指南中的包开发说明来开发一个新的包（[https://packaging.python.org/tutorials/packaging-projects/](https://packaging.python.org/tutorials/packaging-projects/)）。本教程将为你提供如何上传并公开分发包以及内部使用的相关信息。
- en: 'Activity 14: Carry normalisation of data'
  id: totrans-207
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动 14：进行数据归一化
- en: The aim of this activity is to apply various preprocessing techniques that were
    learned in previous exercises and to develop a model using preprocessed data.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 本次活动的目的是应用在之前练习中学到的各种预处理技术，并使用预处理后的数据开发模型。
- en: 'Now let''s perform the following steps:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们执行以下步骤：
- en: Import the required libraries and read the data from the `bank.csv` file.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入所需的库并从`bank.csv`文件读取数据。
- en: Import the dataset and read the CSV file into the Spark object.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入数据集并将 CSV 文件读取到 Spark 对象中。
- en: Check the normality of the data—the following step is to identify the normality
    of data.
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 检查数据的正态性——下一步是确定数据的正态性。
- en: Segment the data numerically and categorically and perform distribution transformation
    on the numeric data.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将数据按数值和类别进行分段，并对数值数据进行分布转换。
- en: Create a `for` loop that loops through each column to carry out a normality
    test to detect the normal distribution of data.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `for` 循环，循环遍历每一列，以进行正态性测试，检测数据的正态分布。
- en: Create a power transformer. A power transformer will transform the data from
    a non-normal distribution to a normal distribution. The model developed will be
    used to transform the previously identified columns, which are non-normal.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个幂变换器。幂变换器将把非正态分布的数据转换为正态分布。所开发的模型将用于转换之前识别的非正态列。
- en: Apply the created power transformer model to the non-normal data.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将创建的幂变换器模型应用于非正态数据。
- en: To develop a model, first split the data into training and testing for cross-validation,
    train the model, then predict the model in test data for cross-validation. Finally,
    generate a confusion matrix for cross-validation.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要开发一个模型，首先将数据拆分为训练集和测试集以进行交叉验证，训练模型，然后在测试数据上进行预测以进行交叉验证。最后，生成一个交叉验证的混淆矩阵。
- en: Note
  id: totrans-218
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意事项
- en: The solution of this activity can be found on page 240.
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 本活动的解决方案可以在第240页找到。
- en: Summary
  id: totrans-220
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have learned how to maintain code reproducibility from a
    data science perspective through structured standards and practices to avoid duplicate
    work using the Jupyter notebook.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们从数据科学的角度学习了如何通过结构化的标准和实践来保持代码的可重复性，以避免在使用 Jupyter Notebook 时重复劳动。
- en: We started by gaining an understanding of what reproducibility is and how it
    impacts research and data science work. We looked into areas where we can improve
    code reproducibility, particularly looking at how we can maintain effective coding
    standards in terms of data reproducibility. Following that, we looked at important
    coding standards and practices to avoid duplicate work using the effective management
    of code through the segmentation of workflows, by developing functions for all
    key tasks, and how we can generalize coding to create libraries and packages from
    a reusability standpoint.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先了解了什么是可重复性，以及它如何影响研究和数据科学工作。我们探讨了可以提高代码可重复性的领域，特别是如何在数据可重复性方面保持有效的编码标准。随后，我们研究了重要的编码标准和实践，以通过有效的代码管理来避免重复劳动，方法是通过工作流分段、为所有关键任务开发函数，以及如何从可重用性角度推广编码，创建库和包。
- en: In the next chapter, we will learn how to use all the functionalities we have
    learned about so far to generate a full analysis report. We will also learn how
    to use various PySpark functionalities for SQL operations and how to develop various
    visualization plots.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将学习如何使用目前为止学到的所有功能来生成完整的分析报告。我们还将学习如何使用各种 PySpark 功能进行 SQL 操作，并且如何开发各种可视化图表。
