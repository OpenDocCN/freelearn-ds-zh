- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: Whole Network Analysis
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 整体网络分析
- en: In previous chapters, we spent a lot of time covering how networks can be constructed
    using text and how cleanup can be done on networks. In this chapter, we are moving
    on to **whole network analysis**. For the sake of simplicity, I will call it **WNA**.
    WNA is done to get the lay of the land, to understand the denseness of a network,
    which nodes are most important in various ways, which communities exist, and so
    forth. I’m going to cover material that I have found useful, which is a bit different
    from what is found in most **social network analysis** (**SNA**) or network science
    books. I do applied network science every day, and my goal is to showcase some
    of the options that are available to allow readers to very quickly get started
    in network analysis.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章中，我们花了很多时间讲解如何通过文本构建网络以及如何清理网络数据。在本章中，我们将开始进行**整体网络分析**。为了简便起见，我将其简称为**WNA**。WNA
    用来了解网络的整体情况，分析网络的密度、哪些节点在不同方面最为重要、存在哪些社区等。我将介绍一些我认为有用的内容，这些内容与大多数**社交网络分析**（**SNA**）或网络科学书籍中的内容有所不同。我每天都在进行应用网络科学，我的目标是展示一些可以让读者快速开始网络分析的选项。
- en: Network science and SNA are both very rich topics, and if you find any section
    of this chapter especially interesting, I encourage you to do your own research
    to learn more. Throughout this book, I will reference certain sections of NetworkX
    documentation. Be aware that there are many additional non-covered capabilities
    on those reference pages, and it can be insightful to learn about lesser-used
    functions, what they do, and how they can be used.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 网络科学和 SNA 都是非常丰富的主题，如果你觉得本章某一部分特别有趣，我鼓励你自己进行研究，进一步了解。在本书中，我会引用一些 NetworkX 文档中的特定部分。请注意，这些参考页面上还有许多没有覆盖的功能，了解那些鲜为人知的函数，它们的功能及使用方式，会非常有帮助。
- en: NetworkX’s online documentation shares links to journal articles, so there is
    plenty to read and learn.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: NetworkX 的在线文档分享了期刊文章的链接，供你阅读和学习。
- en: As you read this chapter, I want you to consider the problems that you work
    on and try to find ways that you can use what I am describing in your own work.
    Once you begin working with networks, you will see that they are everywhere, and
    once you learn how to analyze and manipulate them, then a world of opportunity
    opens up.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在阅读本章时，我希望你考虑自己工作中遇到的问题，并尝试找出你可以将我所描述的方法应用到自己工作的方式。一旦你开始处理网络问题，你会发现它们无处不在，一旦学会如何分析和操作它们，机会的世界便会向你展开。
- en: 'We will cover the following topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下主题：
- en: Creating baseline WNA questions
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建基准 WNA 问题
- en: WNA in action
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WNA 实践
- en: Comparing centralities
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比较中心性
- en: Visualizing subgraphs
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可视化子图
- en: Investigating connected components
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调查连通分量
- en: Understanding network layers
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解网络层次
- en: Technical requirements
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'In this chapter, we will be using the Python libraries NetworkX and pandas.
    Both of these libraries should be installed by now, so they should be ready for
    your use. If they are not installed, you can install Python libraries with the
    following:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，我们将使用 Python 库 NetworkX 和 pandas。这两个库现在应该已经安装完成，可以随时使用。如果没有安装，你可以通过以下命令安装这些
    Python 库：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'For instance, to install NetworkX, you would do the following:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 比如，要安装 NetworkX，你可以使用以下命令：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In [*Chapter 4*](B17105_04.xhtml#_idTextAnchor158), we also introduced a `draw_graph()`
    function that uses both NetworkX and `Scikit-Network`. You will need that code
    anytime that we do network visualization. Keep it handy!
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [*第 4 章*](B17105_04.xhtml#_idTextAnchor158)中，我们还介绍了一个`draw_graph()`函数，它同时使用了
    NetworkX 和 `Scikit-Network`。每次进行网络可视化时，你都需要用到这个代码，记得随时备好！
- en: 'You can find all of the code in this chapter in the GitHub repository: [https://github.com/PacktPublishing/Network-Science-with-Python](https://github.com/PacktPublishing/Network-Science-with-Python).'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 GitHub 仓库中找到本章所有代码：[https://github.com/PacktPublishing/Network-Science-with-Python](https://github.com/PacktPublishing/Network-Science-with-Python)。
- en: Creating baseline WNA questions
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建基准 WNA 问题
- en: I often jot down questions that I have before doing any kind of analysis. This
    sets the context of what I am looking for and sets up a framework for me to pursue
    those answers.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行任何分析之前，我通常会记录下自己的一些问题。这有助于我明确自己要寻找的目标，并为我设定一个框架，去追寻这些答案。
- en: 'In doing any kind of WNA, I am interested in finding answers to each of these
    questions:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行任何类型的 WNA 时，我关注的是寻找每一个问题的答案：
- en: How big is the network?
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络有多大？
- en: How complex is the network?
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络有多复杂？
- en: What does the network visually look like?
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络在视觉上是什么样子的？
- en: What are the most important nodes in the network?
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络中最重要的节点是什么？
- en: Are there islands, or just one big continent?
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是不是有孤岛，还是只有一个大大陆？
- en: What communities can be found in the network?
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络中可以找到哪些社区？
- en: What bridges exist in the network?
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络中存在哪些桥梁？
- en: What do the layers of the network reveal?
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络的层次揭示了什么？
- en: These questions give me a start that I can use as a task list for running through
    network analysis. This allows me to have a disciplined approach when doing network
    analysis, and not just chase my own curiosity. Networks are noisy and chaotic,
    and this scaffolding gives me something to use to stay focused.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这些问题为我提供了一个起点，可以作为我进行网络分析时的任务清单。这使我在进行网络分析时有了一个有条理的方法，而不仅仅是追随自己的好奇心。网络是嘈杂且混乱的，而这个框架为我提供了一个保持专注的工具。
- en: Revised SNA questions
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改后的SNA问题
- en: In this chapter, we will be using a K-pop social network. You can learn more
    about this network data in [*Chapter 2*](B17105_02.xhtml#_idTextAnchor048).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用一个K-pop社交网络。你可以在[*第2章*](B17105_02.xhtml#_idTextAnchor048)中了解更多关于此网络数据的信息。
- en: My goal is to understand the shape of the network and how information flows
    between individuals and communities. I also want to be able to explore different
    levels of the network, as if I am peeling an onion. The core is often especially
    interesting.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我的目标是了解网络的形态，以及信息如何在个体和社区之间流动。我还希望能够探索网络的不同层次，就像剥洋葱一样。核心通常特别有趣。
- en: 'As this is a social network, I have additional questions beyond the previous
    baseline questions:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是一个社交网络，我有一些额外的问题，超出了之前的基本问题：
- en: How big is the social network? What does this mean?
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 社交网络有多大？这意味着什么？
- en: How complex and interconnected is the network?
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络的复杂性和相互连接程度如何？
- en: What does the network visually look like?
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络在视觉上是什么样子的？
- en: Who are the most important people and organizations in the network?
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络中最重要的人和组织是谁？
- en: Is there just one giant cluster in the network, or are there isolated pockets
    of people?
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络中只有一个巨大的集群吗，还是有孤立的人群？
- en: What communities can be found in the network?
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络中可以找到哪些社区？
- en: What bridges exist in the network?
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络中存在哪些桥梁？
- en: What do the layers of the network reveal?
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络的层次揭示了什么？
- en: Social network analysis revisited
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 社交网络分析重访
- en: In [*Chapter 2*](B17105_02.xhtml#_idTextAnchor048), *Network Analysis*, I described
    the definition, origins, and uses of network science and SNA. Although these are
    two independent fields of study, there is so much overlap that I consider the
    social network to be a set of techniques that should be rolled up into network
    science. This is because SNA can make great use of network science tools and techniques,
    and network science can be made a lot more interesting by applying it to social
    networks. I personally do not distinguish between the two.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第2章*](B17105_02.xhtml#_idTextAnchor048)，《网络分析》中，我描述了网络科学和社会网络分析（SNA）的定义、起源和用途。尽管这两个领域是独立的研究领域，但它们有很多重叠，因此我认为社交网络是一组应该整合到网络科学中的技术。这是因为SNA可以很好地利用网络科学的工具和技术，而将网络科学应用于社交网络会使其更加有趣。我个人并不区分这两者。
- en: What *is* social network analysis? In my view, it is a different perspective
    on network analysis, from a social angle. Network science has to do with how networks
    are constructed, the properties of networks, and how networks evolve over time.
    In social network analysis, we are interested in getting a bit more personal.
    We want to know *who* the important people and organizations are that exist in
    a network, which individuals serve as bridges between communities, and which communities
    exist and why they exist.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是社交网络分析？在我看来，它是从社会角度看网络分析的一种不同视角。网络科学涉及的是网络如何构建、网络的属性以及网络如何随时间演变。而在社交网络分析中，我们更加关注个体。我们想知道网络中哪些人和组织是重要的，哪些个体作为社区之间的桥梁，哪些社区存在以及它们存在的原因。
- en: '**Content analysis** is where the marriage of NLP and network science is most
    important. NLP allows for the extraction of entities (people, places, and organizations)
    and predicts the sentiment of classifying text. Network science and SNA allow
    for understanding much more about the relationships that exist in these networks.
    So, with NLP and network analysis, you have both content context as well as relationship
    context. This is a powerful synergy, where *1 + 1 =* *3*.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**内容分析**是NLP与网络科学结合最为重要的领域。NLP允许提取实体（人、地点和组织）并预测文本的情感分类。网络科学和SNA则使我们能够更深入地理解这些网络中存在的关系。因此，通过NLP和网络分析，你不仅可以获得内容背景，还能获得关系背景。这是一个强大的协同效应，*1
    + 1 =* *3*。'
- en: In this chapter, we are not going to be doing any NLP. I will explain some capabilities
    of network science and SNA. So, let’s get started!
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们不会进行任何自然语言处理（NLP）。我将解释网络科学和社会网络分析（SNA）的一些功能。那么，让我们开始吧！
- en: WNA in action
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WNA（网络分析）实战
- en: 'As mentioned in the previous chapter, in NetworkX, you are able to construct
    networks as either undirected, directed, multi-, or multi-directed graphs. In
    this chapter, we’re going to use an undirected graph, as I want to show how certain
    functionality can be used to understand networks. Just know this: what I am about
    to show has different implications if you use one of the other types of networks.
    You also have more options to explore when you use directed networks, such as
    investigating `in_degrees` and `out_degrees`, not just degrees in general.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前一章所提到的，在NetworkX中，你可以构建无向图、有向图、多重图或多重有向图。在本章中，我们将使用无向图，因为我想展示某些功能如何帮助理解网络。需要知道的是：我接下来展示的内容如果使用其他类型的网络，会有不同的意义。当使用有向网络时，你还有更多的选择，比如研究`in_degrees`和`out_degrees`，不仅仅是总度数。
- en: Loading data and creating networks
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加载数据并创建网络
- en: 'The first thing we need to do is construct our graph. We cannot analyze what
    we do not have:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是构建图形。没有图形，我们就无法进行分析：
- en: 'You can read the K-pop edge list from my GitHub like so:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以像这样从我的GitHub读取K-pop边列表：
- en: '[PRE2]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Previewing the pandas DataFrame, we can see that there are columns for `'source'`
    and `'target'`. This is exactly what NetworkX is looking for to build a graph.
    If you had wanted to name the graph columns differently, NetworkX would have allowed
    you to specify your own source and target columns.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 预览pandas DataFrame，我们可以看到有`'source'`和`'target'`两列。这正是NetworkX用来构建图形所需要的。如果你想为图的列命名不同的名称，NetworkX也允许你指定自己的源和目标列。
- en: 'Looking at the shape of the edge list, we can see that there are 1,286 edges
    in the edge list:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看边列表的形状，我们可以看到边列表中有1,286条边：
- en: '[PRE8]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Remember, an edge is a relationship between one node and another, or between
    one node and itself, which is known as a **self-loop**.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，边是指一个节点与另一个节点之间，或者一个节点与其自身之间的关系，这被称为**自环**。
- en: 'Now that we have our pandas edge list ready, we can use it to construct our
    undirected graph:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经准备好了pandas边列表，我们可以用它来构建无向图：
- en: '[PRE10]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Finally, let’s inspect `G` to make sure that it is an undirected NetworkX graph:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们检查`G`，确保它是一个无向NetworkX图：
- en: '[PRE14]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This looks perfect, so we are ready to begin our analysis.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来完美无缺，所以我们可以开始分析了。
- en: Network size and complexity
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络的大小和复杂性
- en: 'The first thing we are going to investigate is the network’s size, shape, and
    overall complexity. Let me define what I mean by that:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要调查的第一件事是网络的大小、形状和整体复杂性。让我来定义一下我的意思：
- en: '**Network size**: The number of nodes and the number of edges that exist in
    a network'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络大小**：网络中节点和边的数量'
- en: '**Network complexity**: The amount of clustering and density present in the
    network. Clustering is the number of possible triangles that actually exist in
    a network, and density similarly refers to how interconnected the nodes in a network
    are.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络复杂性**：网络中的聚类程度和密度。聚类指的是在网络中实际存在的三角形数量，密度则类似于指网络中节点之间的互联程度。'
- en: 'NetworkX makes it very easy to find the number of nodes and edges that exist
    in a network. You can simply use `nx.info(G)`, like so:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: NetworkX使得查找网络中节点和边的数量变得非常容易。你只需使用`nx.info(G)`，如下所示：
- en: '[PRE16]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Our network has 1,163 nodes and 1,237 edges. To put that into plain English,
    our K-pop social network consists of 1,163 people and organizations, and among
    those 1,163 people and organizations, there are 1,237 identified interactions.
    As this is Twitter data, an interaction, in this case, means that the two accounts
    were mentioned in the same tweet, meaning that they are related in some way. Going
    back to the importance of NLP and content analysis, we can use these identified
    relationships to further dig into what types of relationships these actually are.
    Are they collaborative relationships? Were they arguing? Did they write a research
    paper together? SNA will not give us that answer. We need content analysis to
    get to those. But this chapter is on network analysis, so let’s continue.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的网络有1,163个节点和1,237条边。简单来说，我们的K-pop社交网络由1,163个人和组织组成，在这1,163个人和组织之间，有1,237个已识别的互动。由于这是Twitter数据，因此在此情况下，互动意味着两个账户在同一条推文中被提到，意味着它们以某种方式是相关的。回到自然语言处理和内容分析的重要性，我们可以利用这些已识别的关系进一步挖掘这些关系到底是什么类型的。它们是合作关系吗？他们在争论吗？他们一起写了论文吗？社会网络分析（SNA）无法给出这些答案。我们需要内容分析来解决这些问题。但这一章是关于网络分析的，所以让我们继续。
- en: Is this a dense network? Internet social networks tend to be sparse, not dense,
    unless you are analyzing a tight-knit group of people.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个密集的网络吗？除非你分析的是一个紧密的社群，否则互联网社交网络往往是稀疏的，而非密集的。
- en: 'Let’s see what the clustering and density of the network look like:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看网络的聚类和密度是什么样子的：
- en: 'First, let’s check average clustering:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们检查一下平均聚类：
- en: '[PRE17]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Clustering gives us a result of about `0.007`, which indicates that this is
    a sparse network. If clustering had returned a result of `1.000`, then that would
    indicate that every node is connected with every other node in the network. From
    an SNA context, that would mean that every person and organization in the network
    knows and interacts with each other. In K-pop, this is certainly not the case.
    Not all musicians know their fans. Not all fans are friends with their favorite
    idols.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 聚类的结果约为`0.007`，这表明这是一个稀疏的网络。如果聚类返回的结果是`1.000`，那就表示每个节点都与网络中的其他节点连接。在SNA的背景下，这意味着网络中的每个人和组织彼此相识并进行互动。但在K-pop中，情况显然不是这样的。并非所有的音乐人都认识他们的粉丝，粉丝们也不一定和他们最喜欢的偶像是朋友。
- en: What does `density` look like?
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`密度`是什么样子的呢？'
- en: '[PRE19]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Density gives us a result of about `0.002`, which further validates the sparsity
    of this network.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 密度给出的结果约为`0.002`，进一步验证了这个网络的稀疏性。
- en: 'Let’s not move on just yet. I want to make sure these concepts are understood.
    Let’s construct a fully connected graph – a “complete” graph – with 20 nodes and
    repeat the steps from the preceding paragraphs. NetworkX has some handy functions
    for generating graphs, and we will use `nx.complete_graph` for this demonstration:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们先不要继续。我想确保这些概念被理解。让我们构建一个完全连接的图——一个“完全”图——包含20个节点，并重复前面几段的步骤。NetworkX有一些方便的函数用于生成图形，我们将使用`nx.complete_graph`进行演示：
- en: Let’s build the graph!
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们构建图表吧！
- en: '[PRE22]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'First, let’s investigate the size of the network:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们调查一下网络的大小：
- en: '[PRE23]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Great. We have a network with 20 nodes, and those 20 nodes have 190 edges.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 很棒。我们有一个包含20个节点的网络，这20个节点之间有190条边。
- en: 'Is this actually a fully connected network, though? If it is, then we should
    get `1.0` for both clustering and density:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 但这真的是一个完全连接的网络吗？如果是的话，那么我们应该会得到`1.0`的聚类和密度值：
- en: '[PRE25]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Perfect. That’s exactly what we expected. But what does this network look like?
    Let’s use the same function we’ve been using throughout this book to draw the
    visualization:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完美。那正是我们预期的结果。但这个网络到底是什么样子的呢？让我们使用我们在本书中一直使用的相同函数来绘制可视化图：
- en: '[PRE29]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This will draw our network without any node labels.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这将绘制出没有节点标签的网络。
- en: '![Figure 7.1 – Complete graph](img/B17105_07_001.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![图7.1 – 完全图](img/B17105_07_001.jpg)'
- en: Figure 7.1 – Complete graph
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.1 – 完全图
- en: As you can see in the network visualization, every node links with every other
    node. This is a fully connected network. Our K-pop network is a sparsely connected
    network, so the visualization will look very different.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如你在网络可视化中看到的，每个节点都与其他节点相连。这是一个完全连接的网络。我们的K-pop网络是一个稀疏连接的网络，因此其可视化图将看起来非常不同。
- en: Network visualization and thoughts
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络可视化与思考
- en: 'We know what a fully connected network looks like, and we know that the K-pop
    social network is sparsely connected, but what does that actually look like? Let’s
    take a look:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道完全连接的网络是什么样子，我们也知道K-pop社交网络是稀疏连接的，但这到底是什么样子的呢？让我们看看：
- en: '[PRE30]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: This will create a network visualization with nodes and edges, but without labels.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个没有标签的节点和边的网络可视化。
- en: '![Figure 7.2 – K-pop network](img/B17105_07_002.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.2 – K-pop 网络](img/B17105_07_002.jpg)'
- en: Figure 7.2 – K-pop network
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.2 – K-pop 网络
- en: One thing to notice is that even with only a thousand nodes, this still takes
    a few seconds to render, and it’s impossible to pull any real insights out of
    the network. We can see a bunch of small dots, and we can see a bunch of lines
    from those small dots to other small dots. We can also notice that there is a
    core to the network and that the sparsity of the network increases the further
    we go toward the outskirts of the network. The idea of network layers will be
    explored later in this chapter. The point is that there’s very little we can do
    with this visualization other than consider that it looks cool. At least we can
    visualize it, and in the later section of this chapter, I will explain how we
    can “peel the onion” to understand the various layers in the network.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的一点是，即使只有一千个节点，这仍然需要几秒钟才能渲染完成，并且无法从网络中提取任何真正的洞察。我们看到一堆小点，看到这些小点与其他小点之间的许多线条。我们还可以注意到，网络有一个核心部分，并且随着我们向网络的边缘推进，网络的稀疏度增加。本章稍后会探讨网络层的概念。关键是，除了考虑它看起来很酷之外，我们对这种可视化几乎做不了什么。至少我们可以将其可视化，而在本章的后续部分，我将解释如何“剥洋葱”以理解网络中的各种层次。
- en: 'But just to show something now, here is a very quick way to remove every node
    that only has a single edge, which is most of the network. If you do this, you
    can very quickly denoise a network. This is a huge time saver, as my previous
    approach for doing the exact same thing was to do the following:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 但现在为了展示一些内容，这里有一种非常快速的方法来删除所有只有一个边的节点，而这些节点占据了大部分网络。如果你这样做，你可以非常迅速地去噪网络。这是一个巨大的时间节省，因为我之前做完全相同事情的方法是如下：
- en: Identify every node with a single edge, using a list comprehension.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用列表推导识别每个只有一个边的节点。
- en: Remove it from the network.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从网络中移除它。
- en: 'This one line of code removes the need for any of that. `K_core` converts the
    `G` graph into another graph that only contains nodes with two or more edges:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行代码消除了所有这些需求。`K_core`将`G`图转换为另一个只包含两个或更多边的节点的图：
- en: '[PRE31]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Easy. How does the network look now?
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 很简单。现在网络看起来怎么样？
- en: '![Figure 7.3 – K-pop network simplified](img/B17105_07_003.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.3 – 简化后的 K-pop 网络](img/B17105_07_003.jpg)'
- en: Figure 7.3 – K-pop network simplified
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.3 – 简化后的 K-pop 网络
- en: I hope that you can see that this one single step quickly brought out the structure
    of the network that exists underneath all of those nodes that only have a single
    edge. There are several ways to simplify a network, and I use this method frequently.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望你能看到，这一个单独的步骤迅速揭示了所有只有一个边的节点下存在的网络结构。有几种方法可以简化网络，我经常使用这种方法。
- en: Important nodes
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重要节点
- en: We now have an understanding of the general shape of the network, but we are
    interested in knowing who the most important people and organizations are. In
    network science, there is such a thing as **centrality scores** that give an indication
    of the importance of nodes in a network based on where they are placed and how
    information flows. NetworkX offers dozens of different centrality measures. You
    can learn about them at [https://networkx.org/documentation/stable/reference/algorithms/centrality.html](https://networkx.org/documentation/stable/reference/algorithms/centrality.html).
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经了解了网络的一般形态，但我们更关心的是了解谁是最重要的人物和组织。在网络科学中，存在着所谓的**中心性得分**，它根据节点的位置以及信息流动的方式来表示节点在网络中的重要性。NetworkX
    提供了数十种不同的中心性度量方法。你可以在[https://networkx.org/documentation/stable/reference/algorithms/centrality.html](https://networkx.org/documentation/stable/reference/algorithms/centrality.html)了解它们。
- en: I will introduce a few of the centralities that I frequently use, but these
    are not necessarily the most important ones. Each centrality is useful for uncovering
    different contexts. The founders of Google also created their own centrality,
    famously known as **PageRank**. PageRank is a go-to centrality for many data professionals,
    but it may not be enough. To be thorough, you should understand the importance
    of nodes based both on how they are connected as well as how information moves.
    Let’s explore a few different ways of gauging the importance of nodes in a network.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我将介绍一些我常用的中心性，但这些不一定是最重要的中心性。每种中心性在揭示不同的背景时都有其用途。谷歌的创始人们也创造了他们自己的中心性，著名的叫做 **PageRank**。PageRank
    是许多数据专业人士常用的中心性，但它可能还不够全面。为了全面了解，你应该理解节点的重要性，不仅要看它们是如何连接的，还要看信息是如何流动的。让我们探索几种衡量网络中节点重要性的方法。
- en: Degrees
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 度数
- en: The easiest way to judge the importance of somebody or something in a network
    is based on the number of connections between it and other nodes. Thinking about
    popular social networks such as Twitter or Facebook, influencers are often very
    well-connected, and we are suspicious of accounts that have very few connections.
    We are taking that concept and attempting to pull this insight from our network
    via code.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 判断网络中某个事物或人的重要性最简单的方法就是根据它与其他节点之间的连接数。以 Twitter 或 Facebook 等流行社交网络为例，网红通常连接非常广泛，而我们则会对连接非常少的账户产生怀疑。我们正在借助代码提取这个概念，从我们的网络中获取这一洞察。
- en: 'In a network, an entity (person, place, organization, and so on) in a network
    is called a node, and a relationship between one node and another is called an
    edge. We can count the number of edges each node has by investigating the degree
    counts of nodes in a network:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在网络中，实体（如人、地方、组织等）称为节点，节点与节点之间的关系称为边。我们可以通过调查网络中节点的度数来计算每个节点的边数：
- en: '[PRE32]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Now, we have a Python dictionary of nodes and their degree count. If we throw
    this dictionary into a pandas DataFrame, we can sort it and visualize the degree
    counts easily:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有一个包含节点及其度数的 Python 字典。如果我们将这个字典放入 pandas DataFrame 中，我们可以轻松地排序并可视化度数：
- en: 'First, let’s load it into a pandas DataFrame and sort by degrees in descending
    order (high to low):'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将其加载到 pandas DataFrame 中，并按度数降序排序（从高到低）：
- en: '[PRE33]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: This will show a DataFrame of Twitter accounts and their degrees.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这将展示一个 Twitter 账户及其度数的 DataFrame。
- en: '![Figure 7.4 – pandas DataFrame of node degrees](img/B17105_07_004.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.4 – 节点度数的 pandas DataFrame](img/B17105_07_004.jpg)'
- en: Figure 7.4 – pandas DataFrame of node degrees
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.4 – 节点度数的 pandas DataFrame
- en: 'Now, let’s create a horizontal bar chart for some quick insights:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们创建一个水平条形图，以便快速获取一些洞察：
- en: '[PRE37]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: This will visualize Twitter account connections by degrees.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这将通过度数可视化 Twitter 账户之间的连接。
- en: '![Figure 7.5 – Horizontal bar chart of Twitter accounts by degrees](img/B17105_07_005.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.5 – 按度数排列的 Twitter 账户水平条形图](img/B17105_07_005.jpg)'
- en: Figure 7.5 – Horizontal bar chart of Twitter accounts by degrees
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.5 – 按度数排列的 Twitter 账户水平条形图
- en: One thing that stands out is that the number of degrees very quickly drops off,
    even when comparing the 20 most connected nodes. There is a significant drop-off
    even after the most connected node. The most connected node in the network belongs
    to singer/songwriter/actor Byun Baek-hyun – better known as Baekhyun – from the
    group Exo. That’s interesting. Why is he so connected? Are people connecting to
    him, or does he connect to other people? Each insight tends to draw out more questions
    that can be explored. Write them down, prioritize by value, and then you can use
    those questions for deeper analysis.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 一个显著的现象是，即使是比较连接最多的前 20 个节点，度数也迅速下降。在最连接的节点之后，度数下降非常明显。网络中连接最多的节点属于歌手/词曲创作人/演员边伯贤（Byun
    Baek-hyun），他是组合 Exo 的成员，更为人知的名字是 Baekhyun。这很有意思。为什么他会有这么多连接？是人们在连接他，还是他在连接其他人？每一个洞察通常会引发更多可以探索的问题。把这些问题写下来，根据价值进行优先级排序，然后你可以利用这些问题进行更深入的分析。
- en: Degree centrality
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 度数中心性
- en: '**Degree centrality** is similar to judging importance based on the number
    of degrees a node has. Degree centrality is the fraction of nodes in a network
    that a node is connected to. The more degrees a node has, the higher the fraction
    of nodes they will be connected to, so degrees and degree centrality can really
    be used interchangeably:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '**度数中心性**类似于根据节点的度数判断其重要性。度数中心性是网络中一个节点与其他节点连接的比例。一个节点的度数越多，它与其他节点连接的比例就越高，因此度数和度数中心性可以互换使用：'
- en: 'We can calculate the degree centrality of every node in the network:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以计算网络中每个节点的度数中心性：
- en: '[PRE41]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'We can use this to create another pandas DataFrame, sorted by degree centrality
    in descending order:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以用它来创建另一个 pandas DataFrame，按度数中心性降序排序：
- en: '[PRE55]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: This will show a dataframe of Twitter accounts and their degree centralities.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示一个 Twitter 账户及其度数中心性的 DataFrame。
- en: '![Figure 7.6 – pandas DataFrame of nodes'' degree centrality](img/B17105_07_006.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![图7.6 – 节点度数中心性的 pandas DataFrame](img/B17105_07_006.jpg)'
- en: Figure 7.6 – pandas DataFrame of nodes' degree centrality
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.6 – 节点度数中心性的 pandas DataFrame
- en: 'Finally, we can visualize this as a horizontal bar chart:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们可以将其可视化为一个横向条形图：
- en: '[PRE59]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: This will draw a horizontal bar chart of Twitter accounts by degree centrality.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 这将绘制一个按度数中心性排序的 Twitter 账户横向条形图。
- en: '![Figure 7.7 – Horizontal bar chart of Twitter accounts by degree centrality](img/B17105_07_007.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![图7.7 – 按度数中心性排序的 Twitter 账户横向条形图](img/B17105_07_007.jpg)'
- en: Figure 7.7 – Horizontal bar chart of Twitter accounts by degree centrality
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.7 – 按度数中心性排序的 Twitter 账户横向条形图
- en: Did you notice that the bar charts for degrees and degree centrality look identical
    other than the value? This is why I say that they can be used interchangeably.
    The use of degrees will likely be easier to explain and defend.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 你注意到度数和度数中心性的条形图除了数值外，看起来几乎一模一样吗？这就是我说它们可以互换使用的原因。使用度数通常会更容易解释和辩护。
- en: Betweenness centrality
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介数中心性
- en: '**Betweenness centrality** has to do with how information flows through a network.
    If a node is positioned between two other nodes, then information from either
    of those two nodes must be passed through the node that sits between them. Information
    flows through the node that is sitting in the middle. That node can be seen as
    a bottleneck, or a place of advantage. It can give a strategic advantage to have
    the information that others need.'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '**介数中心性**与信息如何在网络中流动有关。如果一个节点位于其他两个节点之间，那么这两个节点中的任何一个的信息必须通过位于它们之间的节点传递。信息通过位于中间的节点流动。这个节点可以被视为一个瓶颈，或者是一个优势的地方。拥有他人所需信息的节点可以提供战略上的优势。'
- en: Usually, though, nodes with high betweenness centrality are situated between
    many nodes, not just two. This is often seen in a start network, where a core
    node is connected to dozens of other nodes or more. Consider an influencer on
    social media. That person may be connected to 22 million followers, but those
    followers likely do not know each other. They certainly know the influencer (or
    are an inauthentic bot). That influencer is a central node, and betweenness centrality
    will indicate that.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，通常情况下，介数中心性较高的节点位于多个节点之间，而不仅仅是两个节点之间。这通常出现在一个启动网络中，其中一个核心节点连接到几十个或更多的其他节点。想象一下一个社交媒体上的网红。这个人可能与2200万粉丝相连，但这些粉丝之间很可能互不相识。他们肯定认识这个网红（或者是一个虚假的机器人）。这个网红就是一个核心节点，介数中心性将会体现这一点。
- en: 'Before we see how to calculate betweenness centrality, please note that betweenness
    centrality is very time-consuming to calculate for large or dense networks. If
    your network is large or dense and is causing betweenness centrality to be so
    slow as to no longer be useful, consider using another centrality to calculate
    importance:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们了解如何计算介数中心性之前，请注意，计算介数中心性对于大型或密集的网络来说非常耗时。如果你的网络较大或密集，且导致介数中心性的计算速度慢到无法使用，考虑使用其他中心性指标来计算重要性：
- en: 'We can calculate the betweenness centrality of every node in the network:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以计算网络中每个节点的介数中心性：
- en: '[PRE62]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'We can use this to create another pandas DataFrame, sorted by betweenness centrality
    in descending order:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以用它来创建另一个 pandas DataFrame，按介数中心性降序排序：
- en: '[PRE79]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: This will show a dataframe of Twitter accounts and their betweenness centralities.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示一个 Twitter 账户及其介数中心性的 DataFrame。
- en: '![Figure 7.8 – pandas DataFrame of nodes'' betweenness centrality](img/B17105_07_008.jpg)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![图7.8 – 节点介数中心性的 pandas DataFrame](img/B17105_07_008.jpg)'
- en: Figure 7.8 – pandas DataFrame of nodes' betweenness centrality
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.8 – 节点介数中心性的 pandas DataFrame
- en: 'Finally, we can visualize this as a horizontal bar chart:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们可以将其可视化为一个横向条形图：
- en: '[PRE83]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: This will draw a horizontal bar chart of Twitter accounts by betweenness centrality.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 这将绘制一个按介数中心性排序的 Twitter 账户横向条形图。
- en: '![Figure 7.9 – Horizontal bar chart of Twitter accounts by betweenness centrality](img/B17105_07_009.jpg)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![图7.9 – 按介数中心性排序的 Twitter 账户横向条形图](img/B17105_07_009.jpg)'
- en: Figure 7.9 – Horizontal bar chart of Twitter accounts by betweenness centrality
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.9 – 按介数中心性排序的 Twitter 账户横向条形图
- en: Take note that the bar chart looks very different from the charts for degrees
    and degree centrality. Also note that `@youtube`, `@spotifykr`, and `@kchartsmaster`
    are the nodes with the highest betweenness centrality. This is likely because
    artists and others reference YouTube, Spotify, and KChartsMaster in their tweets.
    These nodes sit between nodes and other nodes.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，条形图与度数和度中心性的图表非常不同。还要注意，`@youtube`、`@spotifykr` 和 `@kchartsmaster` 是具有最高中介中心性的节点。这可能是因为艺术家和其他人在推特中提到
    YouTube、Spotify 和 KChartsMaster。这些节点位于节点和其他节点之间。
- en: Closeness centrality
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 接近中心性
- en: '**Closeness centrality** has to do with the closeness of nodes to other nodes,
    and that has to do with something known as the **shortest path**, which is computationally
    expensive (and slow) to compute for a large or dense network. As a result, closeness
    centrality may be even slower than betweenness centrality. If getting results
    from closeness centrality is too slow, due to the size and density of your own
    networks, you can choose another centrality for importance.'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '**接近中心性**与节点之间的接近程度有关，这与被称为**最短路径**的概念相关，计算大规模或密集网络的最短路径是计算上昂贵且缓慢的。因此，接近中心性可能比中介中心性还要慢。如果由于网络的大小和密度，获取接近中心性结果太慢，你可以选择其他中心性度量来评估重要性。'
- en: 'The shortest path will be explored in another chapter but has to do with the
    number of hops or handshakes it takes to get from one node to another node. This
    is a very slow operation, as there are many calculations at play:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 最短路径将在另一个章节中讨论，它与从一个节点到另一个节点所需的跳数或握手次数有关。这是一个非常缓慢的操作，因为涉及到许多计算：
- en: 'We can calculate the closeness centrality of every node in the network:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以计算网络中每个节点的接近中心性：
- en: '[PRE86]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[PRE88]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '[PRE92]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE100]'
- en: 'We can use this to create another pandas DataFrame, sorted by closeness centrality
    in descending order:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以用它来创建另一个 pandas 数据框，按接近中心性降序排序：
- en: '[PRE101]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE104]'
- en: This will show a dataframe of Twitter accounts and their closeness centralities.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 这将展示一个包含 Twitter 账户及其接近中心性的数据框。
- en: '![Figure 7.10 – pandas DataFrame of nodes'' closeness centrality](img/B17105_07_010.jpg)'
  id: totrans-247
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.10 – pandas 数据框，节点的接近中心性](img/B17105_07_010.jpg)'
- en: Figure 7.10 – pandas DataFrame of nodes' closeness centrality
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.10 – pandas 数据框，节点的接近中心性
- en: 'Finally, we can visualize this as a horizontal bar chart:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们可以将其可视化为水平条形图：
- en: '[PRE105]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[PRE107]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE107]'
- en: This will draw a horizontal bar chart of Twitter accounts by closeness centrality.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 这将绘制一个根据接近中心性排序的 Twitter 账户水平条形图。
- en: '![Figure 7.11 – Horizontal bar chart of Twitter accounts by closeness centrality](img/B17105_07_011.jpg)'
  id: totrans-254
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.11 – 根据接近中心性排序的 Twitter 账户水平条形图](img/B17105_07_011.jpg)'
- en: Figure 7.11 – Horizontal bar chart of Twitter accounts by closeness centrality
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.11 – 根据接近中心性排序的 Twitter 账户水平条形图
- en: Take note that the results look different than every other centrality we have
    looked at. `@blackpink` is in the top spot, followed by `@youtube`, `@kchartsmaster`,
    and `@spotifykr`. BLACKPINK is a well-known K-pop group, and they are well-connected
    in the K-pop network, allowing them reach and influence. Other K-pop artists may
    want to investigate what it is that BLACKPINK is doing that puts them in a strategically
    advantageous network position.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，结果与我们之前看到的其他任何中心性度量都不同。`@blackpink` 排名第一，其次是 `@youtube`、`@kchartsmaster`
    和 `@spotifykr`。BLACKPINK 是著名的 K-pop 女团，它们在 K-pop 网络中有很强的连接性，能够获得影响力。其他 K-pop 艺术家可能需要调查
    BLACKPINK 在做什么，才能使其处于一个战略上有利的网络位置。
- en: PageRank
  id: totrans-257
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PageRank
- en: 'Finally, PageRank is the algorithm behind Google Search. The creators of Google
    wrote about it in 1999 in this paper: [http://ilpubs.stanford.edu:8090/422/1/1999-66.pdf](http://ilpubs.stanford.edu:8090/422/1/1999-66.pdf).
    If you have ever googled anything, the results that are returned to you are partially
    due to PageRank, though the search has likely evolved significantly since 1999.'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，PageRank 是 Google 搜索背后的算法。Google 的创始人在 1999 年发表了这篇论文：[http://ilpubs.stanford.edu:8090/422/1/1999-66.pdf](http://ilpubs.stanford.edu:8090/422/1/1999-66.pdf)。如果你曾经在
    Google 上搜索过任何内容，那么返回的结果部分是因为 PageRank，尽管自 1999 年以来，搜索算法可能已经发生了显著的演变。
- en: The PageRank mathematical formula considers the number of inbound and outbound
    degrees of not only a node in question but of the linking nodes as well. It is
    because of this that **Search Engine Optimization** (**SEO**) has become a thing,
    as it became known that to get top Google positioning, a website should have as
    many inbound links as possible while also linking to other sources of information.
    For more information on the mathematics behind PageRank, check the PDF from Stanford
    University.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: PageRank的数学公式不仅考虑了目标节点的入度和出度，还考虑了连接节点的入度和出度。这也是为什么**搜索引擎优化**（**SEO**）成为一项重要工作，因为人们了解到，要获得Google的高排名，一个网站应该尽可能多地拥有外部链接，并且还要链接到其他信息来源。如需了解PageRank背后的数学原理，请查看斯坦福大学的PDF文档。
- en: 'PageRank is a very fast algorithm, suitable for large and small networks, and
    very useful as an *importance* metric. Many graph solutions provide PageRank capabilities
    in their tools, and many people treat PageRank as their preferred centrality.
    Personally, I believe that you should know several centralities, where they are
    useful, and what their limitations are. PageRank is useful even for large and
    dense networks, so I recommend that it be included anytime you are doing any centrality
    analysis:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: PageRank是一个非常快速的算法，适用于大规模和小规模的网络，并且作为*重要性*度量非常有用。许多图解决方案在其工具中提供PageRank功能，许多人将PageRank视为首选的中心性。就个人而言，我认为你应该了解几种中心性，了解它们的应用场景及其局限性。PageRank在大型和密集网络中也非常有用，因此我建议在进行任何中心性分析时都包含它：
- en: 'We can calculate the PageRank score of every node in the network:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以计算网络中每个节点的PageRank得分：
- en: '[PRE108]'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '[PRE120]'
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE120]'
- en: 'We can use this to create another pandas DataFrame, sorted by PageRank in descending
    order:'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用这个来创建另一个按PageRank降序排序的pandas DataFrame：
- en: '[PRE121]'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '[PRE124]'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE124]'
- en: This will show a dataframe of Twitter accounts and their PageRank scores.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示一个Twitter账户及其PageRank得分的数据框。
- en: '![Figure 7.12 – pandas DataFrame of nodes'' PageRank scores](img/B17105_07_012.jpg)'
  id: totrans-281
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.12 – 节点的PageRank得分的pandas DataFrame](img/B17105_07_012.jpg)'
- en: Figure 7.12 – pandas DataFrame of nodes' PageRank scores
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.12 – 节点的PageRank得分的pandas DataFrame
- en: 'Finally, we can visualize this as a horizontal bar chart:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们可以将其可视化为水平条形图：
- en: '[PRE125]'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '[PRE127]'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE127]'
- en: This will draw a horizontal bar chart of Twitter accounts by PageRank.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 这将绘制一个按PageRank排序的Twitter账户水平条形图。
- en: '![Figure 7.13 – Horizontal bar chart of Twitter accounts by page rank](img/B17105_07_013.jpg)'
  id: totrans-288
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.13 – 按PageRank排序的Twitter账户水平条形图](img/B17105_07_013.jpg)'
- en: Figure 7.13 – Horizontal bar chart of Twitter accounts by page rank
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.13 – 按PageRank排序的Twitter账户水平条形图
- en: These results actually look very similar to the bar chart from degrees and degree
    centrality. Once again, Baekhyun from Exo is in the top position.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 这些结果实际上与度和度中心性所得到的条形图非常相似。再次，Exo的Baekhyun位居榜首。
- en: Edge centralities
  id: totrans-291
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 边的中心性
- en: Before concluding this section on centralities, I want to point out that you
    are not limited to centralities for nodes. There are also centralities for edges.
    For instance, **edge betweenness centrality** can be used to identify the edge
    that sits between the most nodes. If you were to snip the edge that sits between
    most nodes, often the network would be split into two large pieces, called **connected
    components**. This can actually be useful for identifying communities or emerging
    trends. We will explore that more in a later chapter.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 在结束这一部分关于中心性的内容之前，我想指出，你并不仅限于节点的中心性。也有边的中心性。例如，**边介数中心性**可以用来识别连接最多节点的边。如果你剪断了这条连接最多节点的边，网络通常会被分割成两个大块，称为**连通分量**。这实际上对识别社区或新兴趋势非常有用，我们将在后续章节中深入探讨。
- en: Comparing centralities
  id: totrans-293
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 比较中心性
- en: 'To get a feel for how the different centralities differ, or to use multiple
    different centralities together (for instance, if building an ML classifier and
    wanting to use graph metrics), it can be useful to combine the different centralities
    together into a single pandas DataFrame. You can easily do so with the pandas
    `concat` function:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解不同中心性之间的差异，或者将多种中心性一起使用（例如，在构建机器学习分类器并希望使用图度量时），将不同的中心性合并成一个pandas DataFrame可能非常有用。你可以通过pandas的`concat`函数轻松实现：
- en: '[PRE128]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: This will combine all of our centrality and PageRank DataFrames into one unified
    DataFrame. This will make it easier for us to compare different types of centralities.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把我们的所有中心性和PageRank DataFrame合并成一个统一的DataFrame。这样可以更方便地比较不同类型的中心性。
- en: '![Figure 7.14 – pandas DataFrame of combined importance metrics](img/B17105_07_014.jpg)'
  id: totrans-297
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.14 – 合并重要性指标的pandas DataFrame](img/B17105_07_014.jpg)'
- en: Figure 7.14 – pandas DataFrame of combined importance metrics
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.14 – 综合重要性度量的 pandas DataFrame
- en: 'You may notice that if you rank by the different types of centralities, some
    have very similar results, and others are very different. I’ll leave you with
    this: there is no single centrality to rule them all. They are different, and
    they should be used in different situations. If you are mapping out information
    flow, then betweenness centrality is very useful, so long as the network is of
    a manageable size. If you just want to see which nodes in a network are most connected,
    this is easiest to do by just investigating degrees. If you want to understand
    which nodes are situated closest to every other node, try closeness centrality.
    And if you want one algorithm that does a pretty good job at identifying important
    nodes and is performant even on large networks, try PageRank:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会注意到，如果你按不同类型的中心性排序，一些中心性结果非常相似，而其他则差异很大。我留给你这个结论：没有一个中心性能够统治所有的网络。它们是不同的，应在不同的情境下使用。如果你正在绘制信息流的图谱，那么介数中心性非常有用，只要网络的规模是可管理的。如果你只想查看网络中哪些节点最为连接，可以通过查看节点的度数来最轻松地做到这一点。如果你想了解哪些节点与每个其他节点的距离最短，可以尝试使用接近中心性。如果你想要一个能很好地识别重要节点，并且即使在大型网络上也能高效运行的算法，可以尝试
    PageRank：
- en: '[PRE129]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: This will show a DataFrame of Twitter accounts and combined network centralities
    and PageRank scores.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 这将展示一个包含 Twitter 账户和综合网络中心性及 PageRank 得分的 DataFrame。
- en: '![Figure 7.15 – pandas DataFrame of combined importance metrics sorted by PageRank](img/B17105_07_015.jpg)'
  id: totrans-302
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.15 – 按 PageRank 排序的综合重要性度量的 pandas DataFrame](img/B17105_07_015.jpg)'
- en: Figure 7.15 – pandas DataFrame of combined importance metrics sorted by PageRank
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.15 – 按 PageRank 排序的综合重要性度量的 pandas DataFrame
- en: Just know that even PageRank and betweenness centrality can give very different
    results, so you should learn several different ways of determining importance
    and know what you are trying to do. These are very unfamiliar for beginners, but
    don’t be afraid. Jump in and learn. The documentation and linked journals on NetworkX’s
    documentation will be enough to help you get started.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 只需要知道，即使是 PageRank 和介数中心性也可能给出非常不同的结果，因此你应该学习几种不同的衡量重要性的方法，并了解你想要做什么。这些对初学者来说可能是非常陌生的，但不要害怕，跳进去学习吧。NetworkX
    文档中的文档和相关期刊将足以帮助你入门。
- en: Centralities are probably the most unusual section of this chapter if you are
    just getting started with social network analysis and network science. From this
    point on in the chapter, concepts should be less unusual.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你刚刚开始进行社交网络分析和网络科学，中心性可能是这一章中最不寻常的部分。从这一章节开始，接下来的概念应该就不那么陌生了。
- en: Visualizing subgraphs
  id: totrans-306
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可视化子图
- en: Often, in network analysis, we will want to see just a portion of the network,
    and how nodes in that portion link to each other. For instance, if I have a list
    of 100 web domains of interest or social media accounts, then it may be useful
    to create a subgraph of the whole graph for analysis and visualization.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 在网络分析中，我们常常希望查看网络的一部分，以及该部分中的节点如何彼此连接。例如，如果我有一个100个感兴趣的网页域名或社交媒体账号的列表，那么创建一个包含所有节点的子图来进行分析和可视化可能会非常有用。
- en: For the analysis of a subgraph, everything in this chapter is still applicable.
    You can use centralities on subgraphs to identify important nodes in a community,
    for instance. You can also use community detection algorithms to identify communities
    that exist in a subgraph when the communities are unknown.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 对于子图的分析，本章中的所有内容仍然适用。例如，你可以在子图中使用中心性来识别一个社区中的重要节点。你还可以使用社区检测算法来识别子图中存在的社区，尤其是当这些社区尚未被识别时。
- en: 'Visualizing subgraphs is also useful when you want to remove most of the noise
    in a network and investigate how certain nodes interact. Visualizing a subgraph
    is identical to how we visualize whole networks, ego graphs, and temporal graphs.
    But creating subgraphs takes a tiny bit of work. First, we need to identify the
    nodes of interest, then we need to construct a subgraph containing only those
    nodes, and finally, we will visualize the subgraph:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 当你想去除网络中的大部分噪音并研究某些节点之间的交互时，可视化子图也非常有用。可视化子图与我们可视化整个网络、个人图和时序图的方式是一样的。但创建子图需要稍微花费一点工作。首先，我们需要识别出感兴趣的节点，然后我们需要构建一个仅包含这些节点的子图，最后，我们将可视化这个子图：
- en: 'As an example, let’s choose the 100 nodes from the network that have the highest
    PageRank scores:'
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 举个例子，让我们选择网络中 PageRank 得分最高的100个节点：
- en: '[PRE130]'
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '[PRE131]'
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[PRE132]'
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '[PRE133]'
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '[PRE134]'
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '[PRE135]'
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE135]'
- en: '[PRE136]'
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '[PRE137]'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '[PRE138]'
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[PRE139]'
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '[PRE140]'
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '[PRE142]'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '[PRE143]'
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '[PRE144]'
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '[PRE145]'
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE145]'
- en: That was easy. I’m only showing a few of the nodes, as this scrolls down the
    screen quite a way.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 很简单。我这里只展示了几个节点，因为整个屏幕滚动下去时，节点会显示得很远。
- en: 'Next, I can construct a subgraph, like so:'
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我可以构建一个子图，如下所示：
- en: '[PRE146]'
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE146]'
- en: 'And finally, I can visualize it, the same way I would visualize any other network:'
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我可以像可视化任何其他网络一样进行可视化：
- en: '[PRE147]'
  id: totrans-331
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE147]'
- en: In this example, I have left off the node names, but I could have just as easily
    added them. I felt it would make a cleaner visualization for this example.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我省略了节点名称，但我也可以很容易地将它们添加进来。我觉得不加节点名称会使这个示例的可视化更简洁。
- en: '![Figure 7.16 – Subgraph visualization of the top 100 K-pop Twitter accounts
    by PageRank](img/B17105_07_016.jpg)'
  id: totrans-333
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.16 – 按 PageRank 排序的前 100 个 K-pop Twitter 账号的子图可视化](img/B17105_07_016.jpg)'
- en: Figure 7.16 – Subgraph visualization of the top 100 K-pop Twitter accounts by
    PageRank
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.16 – 按 PageRank 排序的前 100 个 K-pop Twitter 账号的子图可视化
- en: That’s it. There’s really not a lot to know about subgraph creation, other than
    that it is doable and how to do it. It is a simple process, once you know how.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样。实际上，关于子图创建的内容并不多，除了它是可行的以及如何做。只要知道方法，过程是简单的。
- en: Investigating islands and continents – connected components
  id: totrans-336
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调查岛屿和大陆——连接组件
- en: If you take a look at the subgraph visualization, you may notice that there
    is one large cluster of nodes, a few small islands of nodes (two or more edges),
    and several isolates (nodes with no edges). This is common in many networks. Very
    often, there is one giant supercluster, several medium-sized islands, and so many
    isolates.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看子图的可视化图，你可能会注意到有一个大的节点簇，几个小的节点岛屿（有两条或更多的边），以及几个孤立节点（没有边的节点）。这是许多网络中常见的现象。通常，网络中会有一个巨大的超级簇，几个中等大小的岛屿，以及许多孤立节点。
- en: This presents challenges. When some people are new to network analysis, they
    will often visualize the network and use PageRank to identify important nodes.
    That is not nearly enough, for anything. There are so many different ways to cut
    the noise from networks so that you can extract insights, and I will show you
    several throughout the course of this book.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 这带来了挑战。当一些人刚开始接触网络分析时，他们通常会对网络进行可视化，并使用 PageRank 来识别重要节点。但这远远不够。提取网络中的洞察有很多不同的方法，我将在本书的过程中向你展示几种方法。
- en: But one very simple way to cut through the noise is to identify the continents
    and islands that exist in a network, create subgraphs using them, and then analyze
    and visualize those subgraphs.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 但是有一种非常简单的方式可以去除噪声，那就是识别网络中存在的大陆和岛屿，利用它们创建子图，然后分析和可视化这些子图。
- en: These *continents* and *islands* are formally called **connected components**.
    A connected component is a network structure where each node is connected to at
    least one other node. NetworkX actually allows for isolates to exist in their
    own connected components, which is strange to me, as isolates are not connected
    to anything other than possibly themselves (self-loops exist).
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 这些*大陆*和*岛屿*在正式术语中称为**连接组件**。连接组件是一个网络结构，其中每个节点至少与另一个节点相连。实际上，NetworkX 允许孤立节点存在于自己的连接组件中，这让我感到奇怪，因为孤立节点除了可能自连接外，实际上没有与任何其他节点相连（自环存在）。
- en: 'Finding all of the connected components that exist in a network is very easy:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 在网络中找到所有存在的连接组件是非常容易的：
- en: '[PRE148]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: 'I’m doing two things here: first, I load all connected components of our `G`
    graph into a Python list, and then I count the number of components that exist.
    There are 15 in the K-pop network.'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 我这里做了两件事：首先，我将我们`G`图的所有连接组件加载到一个 Python 列表中，然后计算存在的组件数量。K-pop 网络中有 15 个连接组件。
- en: 'Great, but which of these 15 are continents, and which are islands? Using a
    simple loop, we can count the number of nodes that exist in each connected component:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 很好，但这 15 个中哪些是大陆，哪些是岛屿呢？通过一个简单的循环，我们可以计算每个连接组件中存在的节点数：
- en: '[PRE149]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: 'This will give us a list of connected components and the number of nodes that
    are part of the connected component:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给我们一个连接组件的列表，以及属于该连接组件的节点数：
- en: '[PRE150]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: Perfect. Notice that one of the components has 909 nodes. This is an example
    of one of those large continents that can exist in a network. Also, notice the
    components that have 80 and 129 nodes. This is significantly fewer than the number
    of nodes in the largest connected component, but it is still a significant number
    of nodes. I consider these as islands. Finally, notice that there are several
    other components that have between 2 and 10 nodes. These are like tiny islands.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 完美。注意到其中一个组件有909个节点。这是网络中可能存在的大型“大陆”之一。还要注意到，组件中有80和129个节点。这比最大连通组件中的节点数量少得多，但仍然是一个相当大的节点数。我把这些看作是岛屿。最后，注意到还有几个组件的节点数在2到10之间。这些就像是小岛屿。
- en: 'Each of these connected components can be analyzed and visualized as a subgraph.
    For this exercise, to simplify visualization, I’ll create a helper function to
    extend my main `draw_graph` function:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 每一个连通组件都可以作为子图进行分析和可视化。为了简化可视化，我将创建一个辅助函数，扩展我的主要`draw_graph`函数：
- en: '[PRE151]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: 'Let’s try this out. Let’s visualize a random component, component 13:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们试试看吧。让我们可视化一个随机组件，组件 13：
- en: '[PRE152]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: How does it render?
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 它是怎么呈现的？
- en: '![Figure 7.17 – Subgraph visualization of connected component #13](img/B17105_07_017.jpg)'
  id: totrans-354
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.17 – 连通组件 #13 的子图可视化](img/B17105_07_017.jpg)'
- en: 'Figure 7.17 – Subgraph visualization of connected component #13'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: '图 7.17 – 连通组件 #13 的子图可视化'
- en: 'That looks good. We have successfully visualized a single component from the
    overall network. Let’s visualize the largest component:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来不错。我们已经成功地可视化了整个网络中的一个单一组件。接下来，让我们可视化最大的组件：
- en: '[PRE153]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '![Figure 7.18 – Subgraph visualization of connected component #0](img/B17105_07_018.jpg)'
  id: totrans-358
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.18 – 连通组件 #0 的子图可视化](img/B17105_07_018.jpg)'
- en: 'Figure 7.18 – Subgraph visualization of connected component #0'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: '图 7.18 – 连通组件 #0 的子图可视化'
- en: Once again, we are back to a giant, messy ball of yarn. We did successfully
    visualize it, though, and we can massively simplify it by removing all nodes with
    a single edge, for instance.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 再次回到那个巨大的、混乱的线团。虽然我们成功地进行了可视化，但我们可以通过去除所有只有一个边的节点来大大简化它，比如这样做。
- en: Connected components are a bit unusual, like centralities, but if you think
    of them as islands and continents that exist in a network, that really takes away
    a lot of the mystique. In summary, in a network, there are usually several connected
    components, and I consider them to be continents, islands, or isolates. In most
    networks, there is usually at least one large continent, several islands, and
    zero to many isolates. The number of isolates depends on how the graph was constructed.
    Using our NER approach from previous chapters, there are no isolates.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 连通组件有点不寻常，就像中心性一样，但如果你把它们看作是存在于网络中的岛屿和大陆，那就能去除很多神秘感。总的来说，在一个网络中，通常会有几个连通组件，我把它们看作是大陆、岛屿或孤立点。在大多数网络中，通常至少有一个大型大陆，几个岛屿，以及零到多个孤立点。孤立点的数量取决于图的构建方式。使用我们在前几章中提到的NER方法，实际上是没有孤立点的。
- en: We will look at some more things we can do with connected components in [*Chapter
    9*](B17105_09.xhtml#_idTextAnchor364).
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[*第9章*](B17105_09.xhtml#_idTextAnchor364)中查看更多关于连通组件的内容。
- en: Communities
  id: totrans-363
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 社区
- en: Community detection algorithms are very useful in various forms of network analysis.
    In WNA, they can be used to identify communities that exist in the whole network.
    When applied to egocentric networks (ego graphs), they can reveal communities
    and cliques that exist around a single node, and in temporal networks, they can
    be used to watch communities evolve over time.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 社区检测算法在各种形式的网络分析中非常有用。在WNA中，它们可以用来识别整个网络中存在的社区。当应用于以自我为中心的网络（自我图）时，它们可以揭示围绕单个节点存在的社区和团体；在时间网络中，它们可以用来观察社区随时间的演变。
- en: Community detection is common in SNA because communities of people exist in
    large populations, and it can be useful to identify those communities. There are
    various approaches to community detection, and there is quite a lot of information
    available on the internet for how community detection algorithms work. This book
    is about applied network science, so I am just going to demonstrate one, called
    the **Louvain algorithm**. Like centralities, there is no “best” algorithm. I
    have been in conversations where somebody pointed out a fringe algorithm that
    they were convinced was better, and I have been in conversations where people
    preferred Louvain.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 社区检测在社会网络分析（SNA）中很常见，因为在人口庞大的群体中存在不同的社群，识别这些社群是非常有用的。社区检测有多种方法，网络上有很多关于社区检测算法如何工作的资料。本书主要讲解应用网络科学，因此我只会演示其中一种，叫做**Louvain算法**。与中心性一样，没有“最佳”的算法。我曾经参加过一些讨论，其中有人提到了一种边缘算法，并坚信它更好；也有讨论中人们更倾向于使用Louvain算法。
- en: 'You can learn more about the Louvain algorithm here: [https://python-louvain.readthedocs.io/en/latest/](https://python-louvain.readthedocs.io/en/latest/).'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在这里了解更多关于Louvain算法的信息：[https://python-louvain.readthedocs.io/en/latest/](https://python-louvain.readthedocs.io/en/latest/)。
- en: 'The Louvain algorithm does not come with NetworkX. You will need to install
    it, which is as simple as the following:'
  id: totrans-367
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Louvain算法并未随NetworkX一起提供。您需要安装它，安装方法非常简单，如下所示：
- en: '[PRE154]'
  id: totrans-368
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE154]'
- en: 'After that, you can import the library for use with the following:'
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，您可以通过以下方式导入该库进行使用：
- en: '[PRE155]'
  id: totrans-370
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE155]'
- en: 'To save a lot of time and skip right past the math, the Louvain algorithm identifies
    various partitions (communities) that nodes are a part of. Visualizing these partitions
    is a bit trickier than our usual network visualizations, as `scikit-network` does
    not offer a lot of flexibility for coloring nodes. To save time, I’m going to
    return to my older network visualization practices and use NetworkX for visualization.
    Here is the code for drawing our graph and coloring the communities:'
  id: totrans-371
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了节省大量时间并跳过数学部分，Louvain算法可以识别节点所属的各种分区（社区）。与我们通常的网络可视化相比，可视化这些分区有点棘手，因为`scikit-network`对节点着色的灵活性并不高。为了节省时间，我将回到我以前的网络可视化实践，并使用NetworkX进行可视化。下面是绘制图形和着色社区的代码：
- en: '[PRE156]'
  id: totrans-372
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE156]'
- en: '[PRE157]'
  id: totrans-373
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE157]'
- en: '[PRE158]'
  id: totrans-374
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE158]'
- en: '[PRE159]'
  id: totrans-375
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '[PRE160]'
  id: totrans-376
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE160]'
- en: '[PRE161]'
  id: totrans-377
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE161]'
- en: '[PRE162]'
  id: totrans-378
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE162]'
- en: '[PRE163]'
  id: totrans-379
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE163]'
- en: '[PRE164]'
  id: totrans-380
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE164]'
- en: '[PRE165]'
  id: totrans-381
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE165]'
- en: '[PRE166]'
  id: totrans-382
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE166]'
- en: 'Now that we have the visualization function, we need to first identify partitions,
    and then we need to visualize the network. Let’s do both of these together. I
    am using `resolution=2` after some tuning, as the community placement looks optimal:'
  id: totrans-383
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经有了可视化功能，我们需要先识别分区，然后我们需要可视化网络。让我们将这两步一起完成。我在经过一些调整后使用`resolution=2`，因为社区布局看起来最优：
- en: '[PRE167]'
  id: totrans-384
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE167]'
- en: '[PRE168]'
  id: totrans-385
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE168]'
- en: How does it look?
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来怎么样？
- en: '![Figure 7.19 – Visualization of community partitions](img/B17105_07_019.jpg)'
  id: totrans-387
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.19 – 社区分区的可视化](img/B17105_07_019.jpg)'
- en: Figure 7.19 – Visualization of community partitions
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.19 – 社区分区的可视化
- en: 'These images are messy but mesmerizing, to me. I can visually see easily distinguishable
    communities that I never noticed before. But what are they? What nodes are part
    of each community? It is simple to convert this partition list into a pandas DataFrame,
    and we can use that to identify communities, count the number of nodes that exist
    in each community, identify which community a node falls into, and visualize the
    individual communities:'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 这些图像对我来说虽然凌乱，但却令人着迷。我可以轻松地看到一些以前从未注意到的、易于区分的社区。但是它们是什么呢？哪些节点属于每个社区？将这个分区列表转换为pandas
    DataFrame非常简单，我们可以利用它来识别社区，统计每个社区中节点的数量，确定某个节点属于哪个社区，并可视化各个社区：
- en: 'First, let’s create a pandas DataFrame from the partition list:'
  id: totrans-390
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们从分区列表创建一个pandas DataFrame：
- en: '[PRE169]'
  id: totrans-391
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE169]'
- en: '[PRE170]'
  id: totrans-392
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE170]'
- en: '[PRE171]'
  id: totrans-393
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE171]'
- en: How does it look now?
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 现在看起来怎么样？
- en: '![Figure 7.20 – pandas DataFrame of community partitions](img/B17105_07_020.jpg)'
  id: totrans-395
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.20 – pandas DataFrame中的社区分区](img/B17105_07_020.jpg)'
- en: Figure 7.20 – pandas DataFrame of community partitions
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.20 – pandas DataFrame中的社区分区
- en: 'This looks good. We can see that it is already sorted by partition number,
    which I am calling `community`. Now that this is in a pandas DataFrame, it is
    simple to count the number of nodes that belong to each community:'
  id: totrans-397
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这看起来不错。我们可以看到，它已经按分区编号排序，我称之为`community`。现在它已经是一个pandas DataFrame，统计每个社区中属于的节点数量变得很简单：
- en: '[PRE172]'
  id: totrans-398
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE172]'
- en: 'This will give us a list of communities (the lefthand number) and a count of
    nodes that are part of the community (the righthand number):'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为我们提供一个社区列表（左侧数字）以及该社区中节点的数量（右侧数字）：
- en: '[PRE173]'
  id: totrans-400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: We can easily see which communities have the most nodes. We should analyze and
    visualize these using subgraphs, as explained previously.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以轻松看到哪些社区拥有最多的节点。我们应该使用子图来分析和可视化这些社区，正如前面所解释的那样。
- en: 'How do we identify the nodes that exist in each community, though? Let’s just
    do this in pandas. Here is a simple helper function:'
  id: totrans-402
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 那么我们如何识别每个社区中的节点呢？我们可以直接在 pandas 中进行。以下是一个简单的辅助函数：
- en: '[PRE174]'
  id: totrans-403
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE174]'
- en: '[PRE175]'
  id: totrans-404
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE175]'
- en: '[PRE176]'
  id: totrans-405
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE176]'
- en: 'We can use that function as it is, but I would prefer to take those `community`
    nodes, create a subgraph, and visualize it. Here is a helper function to do all
    of that:'
  id: totrans-406
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以直接使用这个功能，但我更倾向于将这些`community`节点提取出来，创建一个子图并进行可视化。以下是实现这一功能的辅助函数：
- en: '[PRE177]'
  id: totrans-407
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE177]'
- en: '[PRE178]'
  id: totrans-408
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE178]'
- en: '[PRE179]'
  id: totrans-409
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE179]'
- en: '[PRE180]'
  id: totrans-410
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE180]'
- en: 'Let’s try one out:'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 我们来试试一个：
- en: '[PRE181]'
  id: totrans-412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE181]'
- en: '![Figure 7.21 – Subgraph visualization of community #1](img/B17105_07_021.jpg)'
  id: totrans-413
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.21 – 社区 #1 的子图可视化](img/B17105_07_021.jpg)'
- en: 'Figure 7.21 – Subgraph visualization of community #1'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: '图 7.21 – 社区 #1 的子图可视化'
- en: After running that, I can see this visualization. If you see something different,
    don’t worry. When working with networks, things such as connected components and
    community numbers do not always end up in the same place on a subsequent run.
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 运行后，我可以看到这个可视化效果。如果你看到的是不同的结果，不用担心。在处理网络时，像连通分量和社区编号等东西，在下一次运行时位置不一定相同。
- en: Very cool. This feels very similar to visualizing connected components, but
    communities are not necessarily islands or continents. Several communities can
    be found in large connected components, for instance. The algorithm looks for
    boundaries that separate groups of nodes, and then it labels communities accordingly.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 非常酷。这感觉与可视化连通分量非常相似，但社区不一定是孤岛或大陆。例如，多个社区可以出现在一个大型的连通分量中。算法寻找分隔节点群体的边界，然后据此标记社区。
- en: If you work with networks, and especially if you are interested in identifying
    communities of people that exist in social networks, you will want to learn as
    much as you can about how to identify cliques and communities. Try different algorithms.
    I have chosen Louvain because it is fast and reliable, even on massive networks.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你从事网络工作，特别是如果你有兴趣识别社交网络中存在的社群，你会想要尽可能多地了解如何识别团体和社区。尝试不同的算法。我选择了 Louvain，因为它快速且可靠，即使在大型网络中也是如此。
- en: Bridges
  id: totrans-418
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 桥接节点
- en: In simple terms, bridges are nodes that sit between two different communities.
    These are typically easy to visually identify in small social networks, as there
    will be what looks like one or a few rubber bands or strengths that, if snipped,
    would allow the two groups to split apart. Just as a bridge allows people to traverse
    across the water from one piece of land to another, bridges in networks allow
    information to spread from one community to another. As a human, being a bridge
    is a powerful position to be in, as information and resources must flow through
    you to reach the other side.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，桥接节点是位于两个不同社区之间的节点。在小型社交网络中，这些节点通常很容易被目视识别，因为会有一个或几个看起来像橡皮筋的连接强度，如果被剪断，两个群体就会分开。就像桥梁让人们可以跨越水面从一块陆地走到另一块陆地一样，网络中的桥接节点也能让信息从一个社区传播到另一个社区。作为人类，身处桥接节点是一个强有力的位置，因为信息和资源必须通过你才能传递到另一方。
- en: In a complex network, bridges are more difficult to see visually, but they often
    exist, sitting between two communities. Our K-Pop network is pretty complex, so
    networks are less visible than they might be in a smaller social network, but
    they are there.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 在复杂的网络中，桥接节点更难以目视识别，但它们通常存在，位于两个社区之间。我们的 K-Pop 网络相当复杂，因此网络比在较小的社交网络中更不容易看出，但它们确实存在。
- en: 'You can find bridges in a network like so:'
  id: totrans-421
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以像这样在网络中找到桥接节点：
- en: '[PRE182]'
  id: totrans-422
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE182]'
- en: '[PRE183]'
  id: totrans-423
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE183]'
- en: '[PRE184]'
  id: totrans-424
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE184]'
- en: '[PRE185]'
  id: totrans-425
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE185]'
- en: '[PRE186]'
  id: totrans-426
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE186]'
- en: '[PRE187]'
  id: totrans-427
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE187]'
- en: '[PRE188]'
  id: totrans-428
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE188]'
- en: '[PRE189]'
  id: totrans-429
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE189]'
- en: '[PRE190]'
  id: totrans-430
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE190]'
- en: '[PRE191]'
  id: totrans-431
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE191]'
- en: '[PRE192]'
  id: totrans-432
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE192]'
- en: '[PRE193]'
  id: totrans-433
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE193]'
- en: '[PRE194]'
  id: totrans-434
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE194]'
- en: 'This is a very long list of bridges, and I’m only showing a few of the rows,
    but we can use this along with pandas to identify the most important bridges:'
  id: totrans-435
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是一个非常长的桥接节点列表，我这里只展示了一部分行，但我们可以结合 pandas 来识别最重要的桥接节点：
- en: '[PRE195]'
  id: totrans-436
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE195]'
- en: '[PRE196]'
  id: totrans-437
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE196]'
- en: '[PRE197]'
  id: totrans-438
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE197]'
- en: '[PRE198]'
  id: totrans-439
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE198]'
- en: '[PRE199]'
  id: totrans-440
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE199]'
- en: '[PRE200]'
  id: totrans-441
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE200]'
- en: '[PRE201]'
  id: totrans-442
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE201]'
- en: '[PRE202]'
  id: totrans-443
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE202]'
- en: '[PRE203]'
  id: totrans-444
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE203]'
- en: '[PRE204]'
  id: totrans-445
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE204]'
- en: '[PRE205]'
  id: totrans-446
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE205]'
- en: '[PRE206]'
  id: totrans-447
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE206]'
- en: 'One side effect of removing bridge nodes is that it can be similar to removing
    highly central notes – the network will shatter into a large group of isolates
    and a few smaller connected components. Let’s take the 10 bridge nodes with the
    most edges and remove them:'
  id: totrans-448
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除桥接节点的一个副作用是，它可能类似于删除高度中心的节点——网络会碎裂成一大群孤立节点和一些较小的连通分量。让我们把拥有最多边的 10 个桥接节点删除：
- en: '[PRE207]'
  id: totrans-449
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE207]'
- en: '[PRE208]'
  id: totrans-450
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE208]'
- en: '[PRE209]'
  id: totrans-451
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE209]'
- en: 'After doing this, our network will likely look like a star has gone supernova,
    with debris flying out into space. Let’s take a look:'
  id: totrans-452
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 做完这一步后，我们的网络可能看起来像一颗超级新星爆发，碎片飞向太空。让我们来看看：
- en: '[PRE210]'
  id: totrans-453
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE210]'
- en: This should draw a network without node labels.
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会绘制一个没有节点标签的网络。
- en: '![Figure 7.22 – Network visualization with top bridges cut](img/B17105_07_022.jpg)'
  id: totrans-455
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.22 – 切割主要桥梁后的网络可视化](img/B17105_07_022.jpg)'
- en: Figure 7.22 – Network visualization with top bridges cut
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.22 – 切割主要桥梁后的网络可视化
- en: As we can see, there is still one densely connected component in the center
    of the network, a few tiny connected components consisting of a few nodes, and
    many individual isolates. Cutting bridges is not always so devastating. In other
    networks I have worked on, there’s been a core nucleus consisting of two communities
    with a few nodes sitting between the two communities as bridges. When removing
    those bridges, the network core communities just split apart. There were few or
    no isolates.
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，网络中心仍然存在一个密集连接的组件，少数由几个节点组成的小型连接组件，以及许多独立的孤立节点。切割桥梁并不总是如此具有破坏性。在我处理的其他网络中，存在一个由两个社区组成的核心结构，几个节点位于这两个社区之间作为桥梁。当移除这些桥梁时，网络的核心社区就会分裂开来，几乎没有或没有孤立节点。
- en: There are reasons for identifying bridges. In a social network, these are nodes
    that information must flow through in order to reach communities on the other
    side. If you wanted to strategically place yourself in one of these networks,
    it would be wise to understand what the bridge is doing and then mimic what they
    have done, making connections with the people on each side. This can be a shortcut
    to power.
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 识别桥梁是有原因的。在社交网络中，这些节点是信息必须经过的节点，才能到达另一边的社区。如果你想在这些网络中战略性地定位自己，理解桥梁节点的作用，并模仿他们所做的，和两边的人建立联系，将会是通向权力的捷径。
- en: Similarly, if your goal was to disable a network, identifying and removing important
    bridges would cease the information flow from one community to another. It would
    be highly disruptive. This can be useful for disrupting dark networks (of crime,
    hate, and so on).
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，如果你的目标是禁用一个网络，识别并移除重要的桥梁将会停止信息从一个社区流向另一个社区。这将造成高度的干扰。这对于破坏暗网（如犯罪、仇恨等）可能非常有用。
- en: These are useful insights that can be extracted from networks, and they aren’t
    as identifiable without network analysis. Identifying bridges and having a plan
    for what to do with them can provide a strategic advantage. You can use them to
    gain power, you can use them to disrupt, or you can use them to pull network communities
    apart for cleaner analysis.
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是可以从网络中提取的有用见解，没有网络分析很难识别。识别桥梁并为处理它们制定计划，可以提供战略优势。你可以利用它们来获取权力，也可以用来破坏网络，或者将网络社区分离，进行更清晰的分析。
- en: Understanding layers with k_core and k_corona
  id: totrans-461
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 k_core 和 k_corona 理解网络的层次
- en: 'Networks can be thought of as like onions, and they are often visualized similarly,
    with isolates drawn on the outside, nodes with a single edge rendered after that,
    then nodes with two edges, and on and on and on until the core of the network
    is reached. NetworkX allows two functions for peeling the onion, so to say: **k_core**
    and **k_corona**.'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 网络可以被看作是洋葱，通常也以类似的方式进行可视化，孤立节点位于最外层，接下来是具有单一边缘的节点，然后是具有两条边的节点，依此类推，直到到达网络的核心。NetworkX
    提供了两种方法来“剥洋葱”，即 **k_core** 和 **k_corona**。
- en: k_core
  id: totrans-463
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: k_core
- en: NetworkX’s `k_core` function allows us to easily reduce a network to only nodes
    that have `k` or more edges, with “`k`” being a number between 0 and the maximum
    number of edges that any node has in a network. As a result, you get the “core”
    of a network that contains `k` or more edges. If you were to do `k_core(G, 2)`,
    then this would return a graph containing nodes that have two or more edges, removing
    isolates and nodes with a single degree in one easy step.
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: NetworkX 的 `k_core` 函数允许我们轻松将网络简化为仅包含具有 `k` 条或更多边缘的节点，其中 "`k`" 是一个介于 0 和网络中任意节点的最大边数之间的数字。因此，您得到的是一个包含
    `k` 条或更多边缘的网络“核心”。如果执行 `k_core(G, 2)`，则返回的图形将仅包含那些具有两条或更多边缘的节点，同时移除了孤立节点和仅有一个边缘的节点，一步完成。
- en: That single step of denoising a network may not seem like a big deal, but doing
    this with list comprehensions or loops requires more steps, more thought, and
    more troubleshooting. This single step easily does the cleanup. As such, `k_core(G,
    2)` is common in my code when I am most interested in the shape of the network
    that exists after removing isolates and single-edge nodes.
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 这一单一的网络去噪步骤可能看起来没什么大不了，但如果通过列表推导或循环来实现，需要更多的步骤、更多的思考以及更多的调试。这一步骤轻松地完成了清理工作。因此，当我最关注去除孤立节点和单边节点后的网络形态时，`k_core(G,
    2)` 是我代码中常见的操作。
- en: For instance, here is what our full K-pop network looks like when it is rendered.
    It is very difficult to see anything, as the single-edge nodes have turned the
    network visualization into a messy ball of yarn.
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 比如说，这就是我们完整的 K-pop 网络渲染出来的样子。很难看清任何东西，因为那些单边节点已经将网络可视化变成了一团乱麻。
- en: '![Figure 7.23 – Whole network visualization](img/B17105_07_023.jpg)'
  id: totrans-467
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.23 – 整个网络的可视化](img/B17105_07_023.jpg)'
- en: Figure 7.23 – Whole network visualization
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.23 – 整个网络的可视化
- en: 'However, we can easily remove all nodes that have fewer than two edges:'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们可以很容易地删除所有度数小于两个的节点：
- en: '[PRE211]'
  id: totrans-470
  prefs: []
  type: TYPE_PRE
  zh: '[PRE211]'
- en: How does the network look now?
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 那么网络现在看起来怎么样？
- en: '[PRE212]'
  id: totrans-472
  prefs: []
  type: TYPE_PRE
  zh: '[PRE212]'
- en: This should draw our `G_core` network with node labels.
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该绘制出我们的`G_core`网络，并显示节点标签。
- en: '![Figure 7.24 – Whole network visualization with k_core and k=2](img/B17105_07_024.jpg)'
  id: totrans-474
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.24 – 带有 k_core 和 k=2 的整个网络可视化](img/B17105_07_024.jpg)'
- en: Figure 7.24 – Whole network visualization with k_core and k=2
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.24 – 带有 k_core 和 k=2 的整个网络可视化
- en: It should be obvious that this is much easier to interpret.
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 很明显，这样要更容易解释。
- en: Learning about `k_core` was one of the most important moments for me as I learned
    how to analyze graphs and social networks. I used to denoise networks the less
    straightforward way, identifying nodes with fewer than two degrees, adding them
    to a list, and then removing them from a network. This single function has saved
    me so much time.
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 学习`k_core`是我学习如何分析图形和社交网络过程中最重要的时刻之一。我以前是通过不太直接的方法来去噪网络，识别度数少于两个的节点，将它们添加到列表中，然后从网络中删除它们。这个单一功能节省了我大量的时间。
- en: k_corona
  id: totrans-478
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: k_corona
- en: 'Just as `k_core` allows us to extract the core of a network, `k_corona` allows
    us to investigate each layer of a network. `k_corona` is not about finding the
    core. It is about investigating what is happening in each layer of the network.
    For instance, if we only wanted to see nodes that have zero or one edges, we could
    do this:'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 正如`k_core`允许我们提取网络的核心一样，`k_corona`让我们可以研究网络的每一层。`k_corona`不是为了找出核心，而是为了研究网络每一层发生的事情。例如，如果我们只想查看那些有零条或一条边的节点，我们可以这样做：
- en: '[PRE213]'
  id: totrans-480
  prefs: []
  type: TYPE_PRE
  zh: '[PRE213]'
- en: 'This would render as a bunch of isolates, and there will also likely be a few
    nodes that have one edge between them:'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示一堆孤立节点，并且可能还会有一些节点之间存在一条边：
- en: 'First, let’s visualize the results of `k_corona(G, 1)`:'
  id: totrans-482
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们可视化`k_corona(G, 1)`的结果：
- en: '[PRE214]'
  id: totrans-483
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE214]'
- en: This should render a network visualization of all nodes that have one or fewer
    edges. Nodes without any edges are called isolates and will appear as dots.
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该渲染出所有拥有一个或更少边的节点的网络可视化。没有任何边的节点称为孤立节点，将以点的形式显示。
- en: '![Figure 7.25 – Visualization of k_corona k=1 layer](img/B17105_07_025.jpg)'
  id: totrans-485
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.25 – k_corona k=1 层的可视化](img/B17105_07_025.jpg)'
- en: Figure 7.25 – Visualization of k_corona k=1 layer
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.25 – k_corona k=1 层的可视化
- en: As we can see, there are lots of isolates. Can you identify the few nodes that
    have a single edge between them? I can’t. It’s like reading that book, Where’s
    Waldo? So, how do we identify the nodes in this layer that have an edge between
    them? How do we remove all of the nodes that have less than one edge? Think for
    a second.
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，有很多孤立节点。你能识别出那些只有一条边连接的节点吗？我看不出来。这就像在读那本《在哪里是沃尔多？》一样。那么，我们如何识别出这个层次中有边相连的节点呢？如何移除所有度数小于一的节点呢？想一想。
- en: 'That’s right, we’ll use `k_core` for the cleanup:'
  id: totrans-488
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 没错，我们将使用`k_core`进行清理：
- en: '[PRE215]'
  id: totrans-489
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE215]'
- en: '[PRE216]'
  id: totrans-490
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE216]'
- en: If we visualize this, we can see that there are five connected components, each
    containing two nodes, and each node has a single edge between it and another node
    that exists in that connected component.
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将其可视化，可以看到有五个连接组件，每个组件包含两个节点，每个节点与该组件中另一个节点之间有一条边。
- en: '[PRE217]'
  id: totrans-492
  prefs: []
  type: TYPE_PRE
  zh: '[PRE217]'
- en: This will draw the `G_corona` network, with isolates removed, and with node
    labels showing.
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 这将绘制出`G_corona`网络，孤立节点已被移除，并且显示节点标签。
- en: '![Figure 7.26 – Visualization of k_corona k=1 layer, simplified](img/B17105_07_026.jpg)'
  id: totrans-494
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.26 – k_corona k=1 层的简化可视化](img/B17105_07_026.jpg)'
- en: Figure 7.26 – Visualization of k_corona k=1 layer, simplified
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.26 – k_corona k=1 层的简化可视化
- en: 'Is there an easy way to extract these nodes, so that we can use them for further
    analysis? Yes, easily:'
  id: totrans-496
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有没有简单的方法来提取这些节点，以便我们可以进一步分析它们？是的，很简单：
- en: '[PRE218]'
  id: totrans-497
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE218]'
- en: '[PRE219]'
  id: totrans-498
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE219]'
- en: 'This will show us a list of all of the nodes in `corona_nodes`:'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示我们`corona_nodes`中所有节点的列表：
- en: '[PRE220]'
  id: totrans-500
  prefs: []
  type: TYPE_PRE
  zh: '[PRE220]'
- en: 'What does the second layer of the network look like, the layer where each node
    has two degrees? Are the nodes on this layer connected to each other? Let’s create
    and render this visualization:'
  id: totrans-501
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二层网络看起来如何，即每个节点具有两个度数的层？这些层上的节点是否彼此连接？让我们创建并呈现这个可视化：
- en: '[PRE221]'
  id: totrans-502
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE221]'
- en: '[PRE222]'
  id: totrans-503
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE222]'
- en: This will render a network visualization of all nodes with two or fewer edges.
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: 这将呈现一个所有节点边数为两个或更少的网络可视化。
- en: '![Figure 7.27 – Visualization of k_corona k=2 layer](img/B17105_07_027.jpg)'
  id: totrans-505
  prefs: []
  type: TYPE_IMG
  zh: '![图7.27 – k=2层的k_corona可视化](img/B17105_07_027.jpg)'
- en: Figure 7.27 – Visualization of k_corona k=2 layer
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.27 – k=2层的k_corona可视化
- en: It looks very similar to `k_corona` of layer one, but we can more easily see
    that a few nodes are connected to other nodes. We can also see that there are
    drastically fewer isolates in this layer. We could redo the `k_core` step for
    cleanup, but I think you get the point.
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 它看起来非常类似于第一层的`k_corona`，但我们可以更容易地看到一些节点连接到其他节点。我们还可以看到这一层中孤立节点显著减少。我们可以重新进行`k_core`步骤来清理，但我认为你已经理解了重点。
- en: Personally, I don’t use `k_corona` all that often. I have little interest in
    peeling networks, layer by layer, but the option is there, and maybe it can be
    more useful to you than it is to me. However, I use `k_core` practically every
    time I do anything with networks, for denoising a network, and for investigating
    the nucleus or nuclei that exist at the core of social networks. I recommend that
    you learn about both, but you may possibly have much more use for `k_core` than
    for `k_corona`. Still, `k_corona` opens up some interesting doors for analysis.
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 就我个人而言，我并不经常使用`k_corona`。我对逐层剥离网络并没有太大兴趣，但这是一个选择，也许对你而言比对我更有用。然而，我几乎每次处理网络时都会使用`k_core`，用于去噪声网络，并研究存在于社交网络核心的核或核。我建议你了解这两者，但可能你对`k_core`的需求比对`k_corona`更大。不过，`k_corona`为分析开启了一些有趣的可能性。
- en: Challenge yourself!
  id: totrans-509
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 挑战自己！
- en: Before concluding this chapter, I want to bring a challenge forward to you.
    You have learned how to create networks using text, what an edge list looks like
    and how to build one in pandas, how to create a network, and how to clean a network,
    and now you have an introduction to whole network analysis. You now have every
    tool required to start your journey into network analysis. I will explain how
    to do much more in later chapters, but you have all the tools you need to get
    started and get hooked on network analysis.
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 在结束这一章之前，我想向你提出一个挑战。你已经学会了如何使用文本创建网络，边缘列表的样子以及如何在pandas中构建一个，如何创建网络，如何清理网络，现在你已经介绍了整体网络分析。你现在拥有开始你的网络分析之旅所需的每一样工具。我将在后续章节中详细解释如何做更多事情，但你已经拥有了开始并迷上网络分析所需的所有工具。
- en: I want to challenge you to think about your own data, about the data you work
    with, about the social networks you play on, about the work networks you collaborate
    in, and more. I want you to consider how you could take these living networks,
    describe them in an edge list (it’s just source and target columns), render a
    network visualization, and analyze the networks. You have the tools to do this,
    and networks are all around us. I recommend that when you are learning to investigate
    social networks and various networks, you use data that is actually interesting
    to you. You don’t need to find a dataset online. You can easily create one yourself,
    or you can scrape social media, as we explored in earlier chapters.
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: 我想挑战你，思考一下你自己的数据，关于你处理的数据，你玩耍的社交网络，你协作的工作网络，以及更多。我希望你考虑如何将这些活跃的网络描述成边缘列表（只是源和目标列），绘制网络可视化，并分析这些网络。你有能力做到这一点，而网络无处不在。我建议，当你学习调查社交网络和各种网络时，使用对你真正有趣的数据。你不需要在网上找数据集。你可以轻松地自己创建一个，或者像我们在之前章节中探索的那样，抓取社交媒体上的数据。
- en: I challenge you to stop at this chapter and play around for a while. Get lost
    in networks. Reread previous chapters in this book. Explore. Get weird. Have fun.
    This is my favorite way to learn. I take great enjoyment in building my own datasets
    and analyzing the things that I am most interested in.
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 我挑战你，在这一章节停下来，玩上一会儿。在网络中迷失。重新阅读本书中的前几章。探索。变得怪异。玩得开心。这是我最喜欢的学习方式。我非常享受构建我自己的数据集，并分析我最感兴趣的事物。
- en: Summary
  id: totrans-513
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We have gone a long way in this chapter. This chapter could be a book on its
    own, but my goal was to give a fast-paced tour of the things that you can do with
    networks. As I stated in the beginning, this will not be a math book. I want to
    unlock new capabilities and opportunities for you, and I feel that this chapter
    and this book can do this for you.
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章中走了很长一段路。本章内容可以独立成书，但我的目标是快速带你了解网络中可以做的事情。正如我在开始时所说，这本书不会是一本数学书。我想为你开启新的能力和机会，我相信本章和本书能够为你实现这一点。
- en: 'In this chapter, we covered a lot of ground: explaining whole network analysis,
    describing questions that can help with an analysis, and spending a lot of time
    actually doing network analysis. We looked at the network as a whole, but we also
    looked at node centralities, connected components, and layers.'
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们涉及了很多内容：解释了整体网络分析，描述了有助于分析的问题，并花了很多时间进行实际的网络分析。我们从整体上看待网络，同时也研究了节点中心性、连接组件和层级。
- en: In the next chapter, we are going to learn about egocentric network analysis.
    We call these **ego networks**, to be concise. In that chapter, we will zoom in
    on nodes of interest, to understand the communities and nodes that exist around
    them. You can think of egocentric network analysis as zooming in.
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习自我中心网络分析。我们将其称为**自我网络**，为了简洁。在那一章中，我们将聚焦于感兴趣的节点，了解它们周围的社区和节点。你可以把自我中心网络分析想象成一次放大。
