- en: Monitoring of Storm Cluster
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控Storm集群
- en: In the previous chapters, we learned how we can deploy topologies on remote
    Storm clusters, how we can configure the parallelism of a topology, the different
    types of stream grouping, and so on. In this chapter, we will focus on how we
    can monitor and collect the statistics of topologies running on Storm clusters.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们学习了如何在远程Storm集群上部署拓扑，如何配置拓扑的并行性，不同类型的流分组等。在本章中，我们将专注于如何监视和收集运行在Storm集群上的拓扑的统计信息。
- en: 'In this chapter, we will be covering the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Collecting Storm metrics through the Nimbus thrift port
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过Nimbus thrift端口收集Storm指标
- en: Integration of Storm with Ganglia
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Storm与Ganglia集成
- en: Installation of Graphite
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Graphite
- en: Cluster statistics using the Nimbus thrift client
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Nimbus thrift客户端收集集群统计信息
- en: This section covers how we can collect cluster details (similar to the details
    shown on the Storm UI page) using the Nimbus thrift client. Extracting/collecting
    information through the Nimbus thrift client allows us to visualize the data.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本节涵盖了如何使用Nimbus thrift客户端收集集群详细信息（类似于Storm UI页面上显示的详细信息）。通过Nimbus thrift客户端提取/收集信息可以让我们可视化数据。
- en: The Nimbus thrift API is very rich, and exposes all the necessary information
    required to monitor the Storm cluster.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Nimbus thrift API非常丰富，可以公开监视Storm集群所需的所有必要信息。
- en: Fetching information with Nimbus thrift
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Nimbus thrift获取信息
- en: 'In this section, we will be creating a Java project that will contain classes
    that will perform the following operations using the Nimbus thrift client:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用Nimbus thrift客户端创建一个Java项目，该项目将包含执行以下操作的类：
- en: Collect the Nimbus configuration
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 收集Nimbus配置
- en: Collect the supervisor statistics
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 收集监督者统计信息
- en: Collect the topology statistics
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 收集拓扑统计信息
- en: Collect the spout statistics for a given topology
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 收集给定拓扑的喷口统计信息
- en: Collect the bolt statistics for a given topology
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 收集给定拓扑的螺栓统计信息
- en: Kill the given topology
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 终止给定的拓扑
- en: 'The following are the steps to fetch the cluster details using the Nimbus thrift
    client:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用Nimbus thrift客户端获取集群详细信息的步骤：
- en: Create a Maven project by using `com.stormadvance` as `groupId` and `stormmonitoring`
    as `artifactId`.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`com.stormadvance`作为`groupId`和`stormmonitoring`作为`artifactId`创建一个Maven项目。
- en: 'Add the following dependencies to the `pom.xml` file:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下依赖项添加到`pom.xml`文件中：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Create a utility class, `ThriftClient`, in the `com.stormadvance` package.
    The `ThriftClient` class contains logic to make a connection with the Nimbus thrift
    server and return the Nimbus client:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`com.stormadvance`包中创建一个名为`ThriftClient`的实用类。`ThriftClient`类包含逻辑，用于与Nimbus
    thrift服务器建立连接并返回Nimbus客户端：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Let''s create a class, `NimbusConfiguration`, in the `com.stormadvance` package.
    This class contains logic to collect the Nimbus configuration using the Nimbus
    client:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在`com.stormadvance`包中创建一个名为`NimbusConfiguration`的类。该类包含使用Nimbus客户端收集Nimbus配置的逻辑：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The preceding code uses the `getNimbusConf()` method of the class `org.apache.storm.generated.Nimbus.Client`
    to fetch the Nimbus configuration.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码使用`org.apache.storm.generated.Nimbus.Client`类的`getNimbusConf()`方法来获取Nimbus配置。
- en: 'Create a class, `SupervisorStatistics`, in the `com.stormadvance` package to
    collect the information of all the supervisor nodes running in the Storm cluster:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`com.stormadvance`包中创建一个名为`SupervisorStatistics`的类，以收集Storm集群中所有监督者节点的信息：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `SupervisorStatistics` class uses the `getClusterInfo()` method of the `org.apache.storm.generated.Nimbus.Client`
    class to collect the cluster summary and then calls the `get_supervisors_iterator()`
    method of the `org.apache.storm.generated.ClusterSummary` class to get an iterator
    over the `org.apache.storm.generated.SupervisorSummary` class.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`SupervisorStatistics`类使用`org.apache.storm.generated.Nimbus.Client`类的`getClusterInfo()`方法来收集集群摘要，然后调用`org.apache.storm.generated.ClusterSummary`类的`get_supervisors_iterator()`方法来获取`org.apache.storm.generated.SupervisorSummary`类的迭代器。'
- en: 'See the following for the output of the `SupervisorStatistics` class:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅`SupervisorStatistics`类的输出。
- en: '**![](img/00044.jpeg)**'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**![](img/00044.jpeg)**'
- en: 'Create a class `TopologyStatistics` in the `com.stormadvance` package to collect
    the information of all the topologies running in the Storm cluster:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`com.stormadvance`包中创建一个名为`TopologyStatistics`的类，以收集Storm集群中所有运行拓扑的信息：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `TopologyStatistics` class uses the `get_topologies_iterator()` method of
    the `org.apache.storm.generated.ClusterSummary` class to get an iterator over
    class `org.apache.storm.generated.TopologySummary`. The class `TopologyStatistics`
    will print the value of the number of executors, the number of tasks, and the
    number of worker processes assigned to each topology.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`TopologyStatistics`类使用`org.apache.storm.generated.ClusterSummary`类的`get_topologies_iterator()`方法来获取`org.apache.storm.generated.TopologySummary`类的迭代器。`TopologyStatistics`类将打印每个拓扑分配的执行器数量、任务数量和工作进程数量的值。'
- en: 'Create a class `SpoutStatistics` in the `com.stormadvance` package to get the
    statistics of the spouts. The class `SpoutStatistics` contains a method `printSpoutStatistics(String
    topologyId)` to print the details of all the spouts served by a given topology:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`com.stormadvance`包中创建一个名为`SpoutStatistics`的类，以获取喷口的统计信息。`SpoutStatistics`类包含一个名为`printSpoutStatistics(String
    topologyId)`的方法，用于打印给定拓扑提供的所有喷口的详细信息：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The preceding class uses the `getTopologyInfo(topologyId)` method of the class
    `org.apache.storm.generated.Nimbus.Client` to fetch the information of a given
    topology. The `SpoutStatistics` class prints the following statistics of the spout:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 上述类使用`org.apache.storm.generated.Nimbus.Client`类的`getTopologyInfo(topologyId)`方法来获取给定拓扑的信息。`SpoutStatistics`类打印喷口的以下统计信息：
- en: Spout ID
  id: totrans-37
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 喷口ID
- en: Number of tuples emitted
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发射的元组数量
- en: Number of tuples failed
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 失败的元组数量
- en: Number of tuples acknowledged
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确认的元组数量
- en: 'Create a class `BoltStatistics` in the `com.stormadvance` package to get the
    statistics of the bolts. The class `BoltStatistics` contains a method `printBoltStatistics(String
    topologyId)` to print the information of all the bolts served by a given topology:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`com.stormadvance`包中创建一个`BoltStatistics`类，以获取螺栓的统计信息。`BoltStatistics`类包含一个`printBoltStatistics(String
    topologyId)`方法，用于打印给定拓扑提供的所有螺栓的信息：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The preceding class uses the `getTopologyInfo(topologyId)` method of the class
    `backtype.storm.generated.Nimbus.Client` to fetch the information of a given topology.
    The class `BoltStatistics` prints the following statistics of bolt:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的类使用`backtype.storm.generated.Nimbus.Client`类的`getTopologyInfo(topologyId)`方法来获取给定拓扑的信息。`BoltStatistics`类打印了以下螺栓的统计信息：
- en: Bolt ID
  id: totrans-45
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 螺栓ID
- en: Number of tuples emitted
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发射的元组数量
- en: Number of tuples failed
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 元组失败的数量
- en: Number of tuples acknowledged
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确认的元组数量
- en: 'Create a class `killTopology` in `com.stormadvance` package and define a method
    `kill` as mentioned as follows:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`com.stormadvance`包中创建一个`killTopology`类，并按照以下所述定义一个`kill`方法：
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The preceding class uses the `killTopology(topologyId)` method of the class
    `org.apache.storm.generated.Nimbus.Client` to kill the topology.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的类使用`org.apache.storm.generated.Nimbus.Client`类的`killTopology(topologyId)`方法来终止拓扑。
- en: In this section, we covered several methods of collecting the Storm cluster
    metrics/details using the Nimbus thrift client.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们介绍了使用Nimbus thrift客户端收集Storm集群指标/详情的几种方法。
- en: Monitoring the Storm cluster using JMX
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用JMX监控Storm集群
- en: 'This section will explain how we can monitor the Storm cluster using **Java
    Management Extensions** (**JMX**). The JMX is a set of specifications used to
    manage and monitor applications running in the JVM. We can collect or display
    Storm metrics, such as heap size, non-heap size, number of threads, number of
    loaded classes, heap and non-heap memory, virtual machine arguments, and managed
    objects on the JMX console. The following are the steps we need to perform to
    monitor the Storm cluster using JMX:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将解释如何使用**Java管理扩展**（**JMX**）监控Storm集群。 JMX是一组用于管理和监控在JVM中运行的应用程序的规范。我们可以在JMX控制台上收集或显示Storm指标，例如堆大小、非堆大小、线程数、加载的类数、堆和非堆内存、虚拟机参数和托管对象。以下是我们使用JMX监控Storm集群需要执行的步骤：
- en: 'We will need to add the following line in the `storm.yaml` file of each supervisor
    node to enable JMX on each of them:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要在每个监督者节点的`storm.yaml`文件中添加以下行以在每个监督者节点上启用JMX：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Here, `12346` is the port number used to collect the supervisor JVM metrics
    through JMX.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`12346`是通过JMX收集监督者JVM指标的端口号。
- en: 'Add the following line in the `storm.yaml` file of the Nimbus machine to enable
    JMX on the Nimbus node:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Nimbus机器的`storm.yaml`文件中添加以下行以在Nimbus节点上启用JMX：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Here, `12345` is the port number used to collect the Nimbus JVM metrics through
    JMX.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`12345`是通过JMX收集Nimbus JVM指标的端口号。
- en: 'Also, you can collect the JVM metrics of worker processes by adding the following
    line in the `storm.yaml` file of each supervisor node:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，您可以通过在每个监督者节点的`storm.yaml`文件中添加以下行来收集工作进程的JVM指标：
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Here, `%ID%` denotes the port number of the worker processes. If the port of
    the worker process is `6700`, then its JVM metrics are published on port number
    `26700` (`2%ID%`).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`％ID％`表示工作进程的端口号。如果工作进程的端口是`6700`，则其JVM指标将发布在端口号`26700`（`2％ID％`）上。
- en: 'Now, run the following commands on any machine where Java is installed to start
    the JConsole:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在安装了Java的任何机器上运行以下命令以启动JConsole：
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The following screenshot shows how we can connect to the supervisor JMX port
    using the JConsole:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了我们如何使用JConsole连接到监督者JMX端口：
- en: '![](img/00045.jpeg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00045.jpeg)'
- en: If you open the JMX console on a machine other than the supervisor machine,
    then you need to use the IP address of the supervisor machine in the preceding
    screenshot instead of `127.0.0.1`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在监督者机器之外的机器上打开JMX控制台，则需要在上述截图中使用监督者机器的IP地址，而不是`127.0.0.1`。
- en: 'Now, click on the Connect button to view the metrics of the supervisor node.
    The following screenshot shows what the metrics of the Storm supervisor node look
    like on the JMX console:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，单击“连接”按钮以查看监督者节点的指标。以下截图显示了JMX控制台上Storm监督者节点的指标：
- en: '![](img/00046.jpeg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00046.jpeg)'
- en: Similarly, you can collect the JVM metrics of the Nimbus node by specifying
    the IP address and the JMX port of the Nimbus machine on the JMX console.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，您可以通过在JMX控制台上指定Nimbus机器的IP地址和JMX端口来收集Nimbus节点的JVM指标。
- en: The following section will explain how you can display the Storm cluster metrics
    on Ganglia.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 以下部分将解释如何在Ganglia上显示Storm集群指标。
- en: Monitoring the Storm cluster using Ganglia
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Ganglia监控Storm集群
- en: Ganglia is a monitoring tool that is used to collect the metrics of different
    types of processes that run on a cluster. In most applications, Ganglia is used
    as the centralized monitoring tool to display the metrics of all the processes
    that run on a cluster. Hence, it is essential that you enable the monitoring of
    the Storm cluster through Ganglia.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Ganglia是一个监控工具，用于收集集群上运行的不同类型进程的指标。在大多数应用程序中，Ganglia被用作集中监控工具，用于显示集群上运行的所有进程的指标。因此，通过Ganglia启用Storm集群的监控至关重要。
- en: 'Ganglia has three important components:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Ganglia有三个重要组件：
- en: '**Gmond**: This is a monitoring daemon of Ganglia that collects the metrics
    of nodes and sends this information to the Gmetad server. To collect the metrics
    of each Storm node, you will need to install the Gmond daemon on each of them.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Gmond**：这是Ganglia的监控守护程序，用于收集节点的指标并将此信息发送到Gmetad服务器。要收集每个Storm节点的指标，您需要在每个节点上安装Gmond守护程序。'
- en: '**Gmetad**: This gathers the metrics from all the Gmond nodes and stores them
    in the round-robin database.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Gmetad**：这从所有Gmond节点收集指标并将它们存储在循环数据库中。'
- en: '**Ganglia web interface**: This displays the metrics information in a graphical
    form.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Ganglia Web界面**：以图形形式显示指标信息。'
- en: Storm doesn't have built-in support to monitor the Storm cluster using Ganglia.
    However, with JMXTrans, you can enable Storm monitoring using Ganglia. The JMXTrans tool
    allows you to connect to any JVM, and fetches its JVM metrics without writing
    a single line of code. The JVM metrics exposed via JMX can be displayed on Ganglia
    using JMXTrans. Hence, JMXTrans acts as a bridge between Storm and Ganglia.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Storm没有内置支持使用Ganglia监视Storm集群。但是，使用JMXTrans，您可以启用使用Ganglia监视Storm。JMXTrans工具允许您连接到任何JVM，并在不编写一行代码的情况下获取其JVM指标。通过JMX公开的JVM指标可以使用JMXTrans在Ganglia上显示。因此，JMXTrans充当了Storm和Ganglia之间的桥梁。
- en: 'The following diagram shows how JMXTrans is used between the Storm node and
    Ganglia:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表显示了JMXTrans在Storm节点和Ganglia之间的使用方式：
- en: '![](img/00047.jpeg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00047.jpeg)'
- en: 'Perform the following steps to set up JMXTrans and Ganglia:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤设置JMXTrans和Ganglia：
- en: 'Run the following commands to download and install the JMXTrans tool on each
    Storm node:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令在每个Storm节点上下载并安装JMXTrans工具：
- en: '[PRE13]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Run the following commands to install the Ganglia Gmond and Gmetad packages
    on any machine in a network. You can deploy the Gmetad and Gmond processes on
    a machine that will not be a part of the Storm cluster:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令在网络中的任何机器上安装Ganglia Gmond和Gmetad包。您可以在不属于Storm集群的机器上部署Gmetad和Gmond进程：
- en: '[PRE14]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Edit the following line in the `gmetad.conf` configuration file, which is located
    at `/etc/ganglia` in the Gmetad process. We are editing this file to specify the
    name of the data source and the IP address of the Ganglia Gmetad machine:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`gmetad.conf`配置文件中的以下行，该文件位于Gmetad进程的`/etc/ganglia`中。我们正在编辑此文件以指定数据源的名称和Ganglia
    Gmetad机器的IP地址：
- en: '[PRE15]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: You can replace `127.0.0.1` with the IP address of the Ganglia Gmetad machine.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将`127.0.0.1`替换为Ganglia Gmetad机器的IP地址。
- en: 'Edit the following line in the `gmond.conf` configuration file, which is located
    at `/etc/ganglia`, in the Gmond process:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`gmond.conf`配置文件中的以下行，该文件位于Gmond进程的`/etc/ganglia`中：
- en: '[PRE16]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Here, `127.0.0.1` is the IP address of the Storm node. You need to replace
    `127.0.0.1` with the actual IP address of the machine. We have mainly edited the
    following entries in the Gmond configuration file:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`127.0.0.1`是Storm节点的IP地址。您需要将`127.0.0.1`替换为实际机器的IP地址。我们主要编辑了Gmond配置文件中的以下条目：
- en: The cluster name
  id: totrans-93
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集群名称
- en: The host address of the head Gmond node in the `udp_send` channel
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`udp_send`通道中的主Gmond节点的主机地址'
- en: The port in the `udp_recv` channel
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`udp_recv`通道中的端口'
- en: 'Edit the following line in the `ganglia.conf` file, which is located at `/etc/
    httpd/conf.d`. We are editing the `ganglia.conf` file to enable access on the
    Ganglia UI from all machines:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`ganglia.conf`文件中的以下行，该文件位于`/etc/httpd/conf.d`。我们正在编辑`ganglia.conf`文件以启用从所有机器访问Ganglia
    UI：
- en: '[PRE17]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The `ganglia.conf` file can be found on the node where the Ganglia web frontend
    application is installed. In our case, the Ganglia web interface and the Gmetad
    server are installed on the same machine.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`ganglia.conf`文件可以在安装Ganglia web前端应用程序的节点上找到。在我们的情况下，Ganglia web界面和Gmetad服务器安装在同一台机器上。'
- en: 'Run the following commands to start the Ganglia Gmond, Gmetad, and web UI processes:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令启动Ganglia Gmond、Gmetad和web UI进程：
- en: '[PRE18]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Now, go to `http://127.0.0.1/ganglia` to verify the installation of Ganglia,
    and replace `127.0.0.1` with the IP address of the Ganglia web interface machine.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，转到`http://127.0.0.1/ganglia`验证Ganglia的安装，并将`127.0.0.1`替换为Ganglia web界面机器的IP地址。
- en: 'Now, you will need to write a `supervisor.json` file on each supervisor node
    to collect the JVM metrics of the Storm supervisor node using JMXTrans and then
    publish them on Ganglia using the `com.googlecode.jmxtrans.model. output.GangliaWriter
    OutputWriters` class. The `com.googlecode. jmxtrans.model.output.GangliaWriter
    OutputWriters` class is used to process the input JVM metrics and convert them
    into the format used by Ganglia. The following is the content for the `supervisor.json`
    JSON file:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您需要在每个监督者节点上编写一个`supervisor.json`文件，以使用JMXTrans收集Storm监督者节点的JVM指标，然后使用`com.googlecode.jmxtrans.model.output.GangliaWriter
    OutputWriters`类将其发布在Ganglia上。`com.googlecode.jmxtrans.model.output.GangliaWriter
    OutputWriters`类用于处理输入的JVM指标并将其转换为Ganglia使用的格式。以下是`supervisor.json` JSON文件的内容：
- en: '[PRE19]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Here, `12346` is the JMX port of the supervisor specified in the `storm.yaml`
    file.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`12346`是`storm.yaml`文件中指定的监督者的JMX端口。
- en: You need to replace the `IP_OF_SUPERVISOR_MACHINE` value with the IP address
    of the supervisor machine. If you have two supervisors in a cluster, then the
    `supervisor.json` file of node 1 contains the IP address of node 1, and the `supervisor.json`
    file of node 2 contains the IP address of node 2.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要将`IP_OF_SUPERVISOR_MACHINE`的值替换为监督机器的IP地址。如果集群中有两个监督者，那么节点1的`supervisor.json`文件包含节点1的IP地址，节点2的`supervisor.json`文件包含节点2的IP地址。
- en: You need to replace the `IP_OF_GANGLIA_GMOND_SERVER` value with the IP address
    of the Ganglia Gmond server.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要将`IP_OF_GANGLIA_GMOND_SERVER`的值替换为Ganglia Gmond服务器的IP地址。
- en: 'Create the `nimbus.json` file on the Nimbus node. Using JMXTrans, collect the
    Storm Nimbus''s process JVM metrics and publish them on Ganglia using the `com.googlecode.jmxtrans.model.output.GangliaWriter
    OutputWriters` class. The following are the contents of the `nimbus.json` file:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Nimbus节点上创建`nimbus.json`文件。使用JMXTrans，收集Storm Nimbus进程的JVM指标，并使用`com.googlecode.jmxtrans.model.output.GangliaWriter
    OutputWriters`类将其发布在Ganglia上。以下是`nimbus.json`文件的内容：
- en: '[PRE20]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Here, `12345` is the JMX port of the Nimbus machine specified in the `storm.yaml`
    file.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`12345`是`storm.yaml`文件中指定的Nimbus机器的JMX端口。
- en: You need to replace the `IP_OF_NIMBUS_MACHINE` value with the IP address of
    the Nimbus machine.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要将`IP_OF_NIMBUS_MACHINE`的值替换为Nimbus机器的IP地址。
- en: You need to replace the `IP_OF_GANGLIA_GMOND_SERVER` value with the IP address
    of the Ganglia Gmond server.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要将`IP_OF_GANGLIA_GMOND_SERVER`的值替换为Ganglia Gmond服务器的IP地址。
- en: 'Run the following commands on each Storm node to start the JMXTrans process:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在每个Storm节点上运行以下命令以启动JMXTrans进程：
- en: '[PRE21]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Here, `PATH_OF_JSON_FILE` is the location of the `supervisor.json` and `nimbus.json`
    files.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`PATH_OF_JSON_FILE`是`supervisor.json`和`nimbus.json`文件的位置。
- en: 'Now, go to the Ganglia page at `http://127.0.0.1/ganglia` to view the Storm
    metrics. The following screenshot shows what the Storm metrics look like:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，转到`http://127.0.0.1/ganglia`上的Ganglia页面，查看Storm指标。以下截图显示了Storm指标的样子：
- en: '![](img/00048.jpeg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00048.jpeg)'
- en: 'Perform the following steps to view the metrics of Storm Nimbus and the supervisor
    processed on the Ganglia UI:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤来查看Ganglia UI上的Storm Nimbus和supervisor进程的指标：
- en: Open the Ganglia page.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Ganglia页面。
- en: Now click on the `stormcluster` link to view the metrics of the Storm cluster.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在点击`stormcluster`链接，查看Storm集群的指标。
- en: 'The following screenshot shows the metrics of the Storm supervisor node:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了Storm supervisor节点的指标：
- en: '![](img/00049.jpeg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00049.jpeg)'
- en: 'The following screenshot shows the metrics of the Storm Nimbus node:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了Storm Nimbus节点的指标：
- en: '![](img/00050.jpeg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00050.jpeg)'
- en: Summary
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we covered the monitoring of the Storm cluster through the
    Nimbus thrift client--similar to what we covered through the Storm UI. We also
    covered how we can configure the Storm to publish the JMX metrics and the integration
    of Storm with Ganglia.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们通过Nimbus thrift客户端监控了Storm集群，类似于我们通过Storm UI所做的。我们还介绍了如何配置Storm来发布JMX指标以及Storm与Ganglia的集成。
- en: In the next chapter, we are going to cover the integration of Storm with Kafka
    and look at some sample examples to illustrate the process.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍Storm与Kafka的集成，并查看一些示例来说明这个过程。
