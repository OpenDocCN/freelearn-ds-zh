- en: Chapter 1. A Tour of the IPython Notebook
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 1 章：IPython Notebook 概览
- en: This chapter gives a brief introduction to the **IPython notebook** and highlights
    some of its special features that make it a great tool for scientific and data-oriented
    computing. IPython notebooks use a standard text format that makes it easy to
    share results.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章简要介绍了**IPython notebook**，并突出其一些特殊功能，这些功能使它成为科学计算和数据导向计算的优秀工具。IPython notebook
    使用标准的文本格式，便于共享结果。
- en: After the quick installation instructions, you will learn how to start the notebook
    and be able to immediately use IPython to perform computations. This simple, initial
    setup is all that is needed to take advantage of the many notebook features, such
    as interactively producing high quality graphs, performing advanced technical
    computations, and handling data with specialized libraries.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在快速安装说明之后，你将学习如何启动 notebook，并能够立即使用 IPython 进行计算。这一简单的初步设置已经足够利用 notebook 的诸多功能，比如交互式生成高质量图形、进行高级技术计算，以及使用专业库处理数据。
- en: All examples are explained in detail in this book and available online. We do
    not expect the readers to have deep knowledge of Python, but readers unfamiliar
    with the Python syntax can consult [Appendix B](apb.html "Appendix B. A Brief
    Review of Python"), *A Brief Review of Python*, for an introduction/refresher.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本书详细解释了所有示例，并且在线也可以获取。我们不要求读者具备深入的 Python 知识，但对 Python 语法不熟悉的读者可以参考[附录 B](apb.html
    "附录 B：Python 简介")，*Python 简介*，以便了解或复习相关内容。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Getting started with Anaconda or Wakari
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始使用 Anaconda 或 Wakari
- en: Creating notebooks and then learning about the basics of editing and executing
    statements
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 notebook，并了解基本的编辑和执行语句
- en: An applied example highlighting the notebook features
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个应用实例，重点展示 notebook 功能
- en: Getting started with Anaconda or Wakari
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用 Anaconda 或 Wakari
- en: There are several approaches to setting up an IPython notebook environment.
    We suggest you use Anaconda, a free distribution designed for large-scale data
    processing, predictive analytics, and scientific computing. Alternatively, you
    can use Wakari, which is a web-based installation of Anaconda. Wakari has several
    levels of service, but the basic level is free and suitable for experimenting
    and learning.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 IPython notebook 环境有多种方法。我们建议你使用 Anaconda，这是一个免费的分发版，专为大规模数据处理、预测分析和科学计算设计。或者，你也可以使用
    Wakari，它是 Anaconda 的 Web 版安装。Wakari 提供多个服务级别，但基本版是免费的，适合实验和学习。
- en: Tip
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: We recommend that you set up both a Wakari account and a local Anaconda installation.
    Wakari has the functionality of easy sharing and publication. This local installation
    does not require an Internet connection and may be more responsive. Thus, you
    get the best of both worlds!
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议你同时设置 Wakari 账户和本地 Anaconda 安装。Wakari 具有便捷的共享和发布功能，而本地安装不需要 Internet 连接，响应速度可能更快。因此，你可以充分利用两者的优点！
- en: Installing Anaconda
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Anaconda
- en: 'To install Anaconda on your computer, perform the following steps:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要在你的计算机上安装 Anaconda，请执行以下步骤：
- en: Download Anaconda for your platform from [https://store.continuum.io/cshop/anaconda/](https://store.continuum.io/cshop/anaconda/).
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[https://store.continuum.io/cshop/anaconda/](https://store.continuum.io/cshop/anaconda/)下载适合你平台的
    Anaconda。
- en: 'After the file is completely downloaded, install Anaconda:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 文件完全下载后，安装 Anaconda：
- en: Windows users can double-click on the installer and follow the on-screen instruction
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows 用户可以双击安装程序，并按照屏幕上的指示进行操作。
- en: Mac users can double-click the `.pkg` file and follow the instructions displayed
    on screen
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mac 用户可以双击 `.pkg` 文件，并按照屏幕上的指示进行操作。
- en: 'Linux users can run the following command:'
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux 用户可以运行以下命令：
- en: '[PRE0]'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Anaconda supports several different versions of Python. This book assumes you
    are using Version 2.7, which is the standard version that comes with Anaconda.
    The most recent version of Python, Version 3.0, is significantly different and
    is just starting to gain popularity. Many Python packages are still only fully
    supported in Version 2.7.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Anaconda 支持多个不同版本的 Python。本书假设你使用的是版本 2.7，这是 Anaconda 默认的标准版本。最新版本的 Python，即版本
    3.0，差异较大，且刚刚开始获得广泛使用。许多 Python 包仍然仅在版本 2.7 中得到完全支持。
- en: Running the notebook
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行 notebook
- en: You are now ready to run the notebook. First, we create a directory named `my_notebooks`
    to hold your notebooks and open a terminal window at this directory. Different
    operating systems perform different steps.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经准备好运行笔记本了。首先，我们创建一个名为`my_notebooks`的目录来存放您的笔记本，并在该目录中打开一个终端窗口。不同操作系统的操作步骤不同。
- en: 'Microsoft Windows users need to perform the following steps:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 微软 Windows 用户需要执行以下步骤：
- en: Open Window Explorer.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开资源管理器。
- en: Navigate to the location where your notebooks are stored.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到存储您笔记本的位置。
- en: Click on the **New Folder** button.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**新建文件夹**按钮。
- en: Rename the folder `my_notebooks`.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重命名文件夹为`my_notebooks`。
- en: Right-click on the `my_notebooks` folder and select **Open command window here**
    from the context menu.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击`my_notebooks`文件夹，从右键菜单中选择**在此处打开命令窗口**。
- en: 'Mac OS X and other Unix-like systems'' users need to perform the following
    steps:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Mac OS X 和其他类 Unix 系统的用户需要执行以下步骤：
- en: Open a terminal window.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端窗口。
- en: 'Run the following commands:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE1]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then, execute the following command on the terminal window:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在终端窗口中执行以下命令：
- en: '[PRE2]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: After a while, your browser will automatically load the notebook dashboard as
    shown in the following screenshot. The dashboard is a mini filesystem where you
    can manage your notebooks. The notebooks listed in the dashboard correspond exactly
    to the files you have in the directory where the notebook server was launched.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 一段时间后，您的浏览器将自动加载笔记本仪表板，如下方的截图所示。仪表板是一个迷你文件系统，您可以在其中管理笔记本。仪表板中列出的笔记本与您在启动笔记本服务器时所在目录中的文件完全对应。
- en: '![Running the notebook](img/8341OS_01_01.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![运行笔记本](img/8341OS_01_01.jpg)'
- en: Tip
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Internet Explorer does not fully support all features in the IPython notebook.
    It is suggested that you use Chrome, Firefox, Safari, Opera, or another standards-conforming
    browser. If your default browser is one of those, you are ready to go. Alternatively,
    close the Internet Explorer notebook, open a compatible browser, and enter the
    notebook address given in the command window from which you started IPython. This
    will be something like `http://127.0.0.1:8888` for the first notebook you open.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Internet Explorer 不完全支持 IPython 笔记本中的所有功能。建议使用 Chrome、Firefox、Safari、Opera 或其他符合标准的浏览器。如果您的默认浏览器是其中之一，您就可以开始使用了。或者，您也可以关闭
    Internet Explorer 笔记本，打开一个兼容的浏览器，并在命令窗口中输入您启动 IPython 时给出的笔记本地址。对于您打开的第一个笔记本，这个地址类似于`http://127.0.0.1:8888`。
- en: Creating a Wakari account
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 Wakari 账户
- en: 'To access Wakari, simply go to [https://www.wakari.io](https://www.wakari.io)
    and create an account. After logging in, you will be automatically directed to
    an introduction to using the notebook interface in Wakari. This interface is shown
    in the following screenshot:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问 Wakari，只需前往[https://www.wakari.io](https://www.wakari.io)并创建一个账户。登录后，您将自动进入
    Wakari 中使用笔记本界面的介绍页面。此界面在下方的截图中展示：
- en: '![Creating a Wakari account](img/8341OS_01_02.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![创建 Wakari 账户](img/8341OS_01_02.jpg)'
- en: 'The interface elements as seen in the preceding screenshot are described as
    follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所示的界面元素描述如下：
- en: The section marked **1** shows the directory listing of your notebooks and files.
    On the top of this area, there is a toolbar with buttons to create new files and
    directories as well as download and upload files.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标记为**1**的部分显示了您的笔记本和文件的目录列表。在该区域的顶部，有一个工具栏，包含创建新文件和目录的按钮，以及下载和上传文件的选项。
- en: The section marked **2** shows the **Welcome to Wakari** notebook. This is the
    initial notebook with information about IPython and Wakari. The notebook interface
    is discussed in detail in [Chapter 2](ch02.html "Chapter 2. The Notebook Interface"),
    *The Notebook Interface*.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标记为**2**的部分显示了**欢迎使用 Wakari**笔记本。这是包含有关 IPython 和 Wakari 信息的初始笔记本。笔记本界面在[第 2
    章](ch02.html "第 2 章：笔记本界面")，*笔记本界面*中有详细讨论。
- en: The section marked **3** shows the Wakari toolbar. This has the **New Notebook**
    button and drop-down menus with other tools.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标记为**3**的部分显示了 Wakari 工具栏。此处有**新建笔记本**按钮以及其他工具的下拉菜单。
- en: Note
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This book concentrates on using IPython through the notebook interface. However,
    it's worth mentioning the two other ways to run IPython.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 本书重点介绍通过笔记本界面使用 IPython。但值得一提的是，还有两种其他的运行 IPython 的方式。
- en: The simplest way to run IPython is to issue the `ipython` command in a terminal
    window. This starts a command-line session of IPython. As the reader may have
    guessed, this is the original interface for IPython.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 IPython 最简单的方法是在终端窗口中输入`ipython`命令。这将启动一个 IPython 的命令行会话。正如读者可能猜到的，这是 IPython
    的原始界面。
- en: Alternatively, IPython can be started using the `ipython qtconsole` command.
    This starts an IPython session attached to a QT window. QT is a popular multiplatform
    windowing system that is bundled with the Anaconda distribution. These alternatives
    may be useful in systems that, for some reason, do not support the notebook interface.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，IPython 可以通过 `ipython qtconsole` 命令启动。这将启动一个附加到 QT 窗口的 IPython 会话。QT 是一种流行的跨平台窗口系统，并随
    Anaconda 发行版一起打包。这些替代方法在某些不支持笔记本界面的系统中可能会有用。
- en: Creating your first notebook
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建你的第一个笔记本
- en: We are ready to create our first notebook! Simply click on the **New** **Notebook**
    button to create a new notebook.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们准备好创建第一个笔记本了！只需点击 **新建** **笔记本** 按钮，即可创建一个新的笔记本。
- en: In a local notebook installation, the **New Notebook** button appears in the
    upper-left corner of the dashboard.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在本地笔记本安装中，**新建笔记本**按钮出现在仪表盘的左上角。
- en: In Wakari, the **New Notebook** button is at the top of the dashboard, in a
    distinct color. *Do not* use the **Add File** button.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Wakari 中，**新建笔记本**按钮位于仪表盘的顶部，颜色独特。*不要*使用 **添加文件**按钮。
- en: Notice that the Wakari dashboard contains a directory list on the left. You
    can use this to organize your notebooks in any convenient way you choose. Wakari
    actually provides access to a fully working Linux shell.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，Wakari 仪表盘左侧包含了一个目录列表。你可以利用这个目录以任何方便的方式来组织你的笔记本。Wakari 实际上提供了一个完全可用的 Linux
    shell。
- en: 'We are now ready to start computing. The notebook interface is displayed in
    the following screenshot:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以开始计算了。以下截图展示了笔记本界面：
- en: '![Creating your first notebook](img/8341OS_01_03.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![创建你的第一个笔记本](img/8341OS_01_03.jpg)'
- en: By default, new notebooks are named `UntitledX`, where `X` is a number. To change
    it, just click on the current title and edit the dialog that pops up.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，新建的笔记本命名为 `UntitledX`，其中 `X` 是一个数字。要更改名称，只需点击当前标题并编辑弹出的对话框。
- en: 'At the top of the notebook, you will see an empty box with the `In [ ]:` text
    on the left-hand side. This box is called a **code cell** and it is where the
    IPython shell commands are entered. Usually, the first command we issue in a new
    notebook is `%pylab inline`. Go ahead and type this line in the code cell and
    then press *Shift* + *Enter* (this is the most usual way to execute commands.
    Simply pressing *Enter* will create a new line in the current cell.) Once executed,
    this command will issue a message as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在笔记本的顶部，你将看到一个空白框，左侧有 `In [ ]:` 的文字。这个框被称为**代码单元格**，是输入 IPython shell 命令的地方。通常，我们在新笔记本中发出的第一个命令是
    `%pylab inline`。请在代码单元格中输入这一行命令，然后按 *Shift* + *Enter*（这是执行命令最常用的方式。仅按 *Enter*
    会在当前单元格中创建一行新内容）。执行后，这个命令将显示如下消息：
- en: '[PRE3]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This command makes several computational tools easily available and is the recommended
    way to use the IPython notebook for interactive computations. The `inline` directive
    tells IPython that we want graphics embedded in the notebook and not rendered
    with an external program.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令使得几种计算工具可以轻松访问，并且是进行交互式计算时推荐的方式。`inline` 指令告诉 IPython 我们希望图形嵌入到笔记本中，而不是通过外部程序渲染。
- en: 'Commands that start with `%` and `%%` are called **magic** commands and are
    used to set up configuration options and special features. The `%pylab` magic
    command imports a large collection of names into the IPython namespace. This command
    is usually frowned upon for causing **namespace pollution**. The recommended way
    to use libraries in scripts is to use the following command:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 以 `%` 和 `%%` 开头的命令被称为**魔法**命令，用于设置配置选项和特殊功能。`%pylab` 魔法命令会将大量名称导入到 IPython 命名空间中。这个命令通常被认为会引起**命名空间污染**。推荐的使用库的方法是使用以下命令：
- en: '[PRE4]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Then, for example, to access the `arange()` function in the `NumPy` package,
    one uses `np.arange()`. The problem with this approach is that it becomes cumbersome
    to use common mathematical functions, such as `sin()`, `cos()`, and so on. These
    would have to be entered as `np.sin()`, `np.cos()`, and so on, which makes the
    notebook much less readable.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，例如，要访问 `NumPy` 包中的 `arange()` 函数，可以使用 `np.arange()`。这种方法的问题在于，使用常见的数学函数变得繁琐，例如
    `sin()`、`cos()` 等等。这些函数必须分别输入为 `np.sin()`、`np.cos()` 等，导致笔记本的可读性大大降低。
- en: 'In this book, we adopt the following middle-of-the road convention: when doing
    interactive computations, we will use the `%pylab` directive to make it easier
    to type formulae. However, when using other libraries or writing scripts, we will
    use the recommended best practices to import libraries.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们采用了以下中庸的惯例：在进行交互式计算时，我们将使用`%pylab`指令，以便更轻松地输入公式。然而，在使用其他库或编写脚本时，我们将采用推荐的最佳实践来导入库。
- en: Example – the coffee cooling problem
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例——咖啡冷却问题
- en: Suppose you get a cup of coffee at a coffee shop. Should you mix the cream into
    the coffee at the shop or wait until you reach your office? The goal, we assume,
    is to have the coffee as hot as possible. So, the main question is how the coffee
    is going to cool as you walk back to the office.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你在咖啡店买了一杯咖啡。你应该在店里混合奶油，还是等到回到办公室后再混合？我们假设目标是让咖啡尽可能热。因此，主要问题是咖啡在你走回办公室时如何冷却。
- en: 'The difference between the two strategies of mixing cream is:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 混合奶油的两种策略之间的区别是：
- en: If you pour the cream at the shop, there is a sudden drop of temperature *before*
    the coffee starts to cool down as you walk back to the office
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你在店里倒入奶油，在你走回办公室之前，咖啡的温度会突然下降*在*咖啡开始冷却之前。
- en: If you pour the cream after getting back to the office, the sudden drop occurs
    *after* the cooling period during the walk
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你在回到办公室后再倒奶油，温度骤降发生在*步行冷却期之后*。
- en: 'We need a model for the cooling process. The simplest such model is Newton''s
    cooling law, which states that the rate of cooling is proportional to the temperature
    difference between the coffee in the cup and the ambient temperature. This reflects
    the intuitive notion that, for example, if the outside temperature is 40°F, the
    coffee cools faster than if it is 50°F. This assumption leads to a well-known
    formula for the way the temperature changes:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个冷却过程的模型。最简单的模型是牛顿冷却定律，它指出冷却速率与咖啡杯中咖啡温度和环境温度之间的温差成正比。这反映了一个直观的概念：例如，如果外部温度是40°F，咖啡的冷却速度会比外部温度是50°F时更快。这个假设得出了一个著名的公式来描述温度变化的方式：
- en: '![Example – the coffee cooling problem](img/8341OS_01_08.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![示例——咖啡冷却问题](img/8341OS_01_08.jpg)'
- en: The constant *r* is a number between 0 and 1, representing the heat exchange
    between the coffee cup and the outside environment. This constant depends on several
    factors, and may be hard to estimate without experimentation. We just chose it
    somewhat arbitrarily in this first example.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 常数*r*是介于0和1之间的一个数字，表示咖啡杯与外部环境之间的热交换。这个常数取决于多个因素，可能在没有实验的情况下很难估算。我们在这个初步示例中只是随意选择了一个值。
- en: We will start by setting variables to represent the outside temperature and
    the rate of cooling and defining a function that computes the temperatures as
    the liquid cools. Then, type the lines of code representing the cooling law in
    a single code cell. Press *Enter* or click on **Return** to add new lines to the
    cell.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从设置变量来表示外部温度和冷却速率开始，并定义一个计算液体冷却过程中的温度变化的函数。然后，在一个代码单元中输入表示冷却定律的代码行。按*Enter*或点击**Return**来向单元格添加新行。
- en: 'As discussed, we will first define the variables to hold the outside temperature
    and the rate of cooling:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们首先定义表示外部温度和冷却速率的变量：
- en: '[PRE5]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: After entering the preceding code on the cell, press *Shift* + *Enter* to execute
    the cell. Notice that after the cell is executed, a new cell is created.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在单元格中输入上述代码后，按*Shift* + *Enter*执行单元格。请注意，在单元格执行后，会创建一个新的单元格。
- en: Note
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注释
- en: Notice that we entered the value of `temp_out` as `70.0` even though the value
    is an integer in this case. This is not strictly necessary in this case, but it
    is considered good practice. Some code may behave differently, depending on whether
    it operates on integer or floating-point variables. For example, evaluating `20/8`
    in Python Version 2.7 results in `2`, which is the integer quotient of 20 divided
    by 8\. On the other hand, `20.0/8.0` evaluates to the floating-point value `2.5`.
    By forcing the variable `temp_out` to be a floating-point value, we prevent this
    somewhat unexpected kind of behavior.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，尽管此时`temp_out`的值是一个整数，我们仍然将其输入为`70.0`。这在此案例中并非严格必要，但它被认为是良好的编程实践。某些代码可能会根据是操作整数变量还是浮动小数变量而表现不同。例如，在Python
    2.7中，`20/8`的结果是`2`，这是20除以8的整数商。另一方面，`20.0/8.0`会计算出浮动小数值`2.5`。通过强制将变量`temp_out`设为浮动小数值，我们避免了这种意外的行为。
- en: A second reason is to simply improve code clarity and readability. A reader
    of the notebook on seeing the value `70.0` will easily understand that the variable
    `temp_out` represents a real number. So, it becomes clear that a value of `70.8`,
    for example, would also be acceptable for the outside temperature.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个原因是为了提高代码的清晰度和可读性。当阅读者看到`70.0`这个值时，会很容易理解变量`temp_out`表示一个实数。因此，可以清楚地知道例如`70.8`这样的值也会被接受作为外部温度。
- en: 'Next, we define the function representing the cooling law:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们定义表示冷却定律的函数：
- en: '[PRE6]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Please be careful with the way the lines are indented, since indentation is
    used by Python to define code blocks. Again, press *Shift* + *Enter* to execute
    the cell.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意缩进的方式，因为Python通过缩进来定义代码块。再次按*Shift* + *Enter*来执行单元格。
- en: The `cooling_law()`function accepts the starting temperature and walking time
    as the input and returns the final temperature of the coffee. Notice that we are
    only defining the function, so no output is produced. In our examples, we will
    always choose meaningful names for variables. To be consistent, we use the conventions
    in the Google style of coding for Python as shown in [http://google-styleguide.googlecode.com/svn/trunk/pyguide.html#Python_Language_Rules](http://google-styleguide.googlecode.com/svn/trunk/pyguide.html#Python_Language_Rules).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`cooling_law()`函数接受起始温度和行走时间作为输入，返回咖啡的最终温度。注意，我们只是在定义函数，因此没有输出。在我们的示例中，我们将始终为变量选择有意义的名称。为了保持一致性，我们使用Google
    Python编码风格中的约定，详情见[http://google-styleguide.googlecode.com/svn/trunk/pyguide.html#Python_Language_Rules](http://google-styleguide.googlecode.com/svn/trunk/pyguide.html#Python_Language_Rules)。'
- en: Note
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Notice that the exponentiation (power) operator in Python is `**` and not `^`
    as in other mathematical software. If you get the following error when trying
    to compute a power, it is likely that you meant to use the `**` operator:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，Python中的指数运算符是`**`，而不是其他数学软件中的`^`。如果在尝试计算幂时遇到以下错误，很可能是你打算使用`**`运算符：
- en: '[PRE7]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We can now compute the effect of cooling given any starting temperature and
    walking time. For example, to compute the temperature of the coffee after 10 minutes,
    assuming the initial temperature to be 185°F, run the following code in a cell:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以计算在任何起始温度和行走时间下冷却的效果。例如，要计算咖啡在10分钟后的温度，假设初始温度为185°F，请在单元格中运行以下代码：
- en: '[PRE8]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The corresponding output is:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 相应的输出是：
- en: '[PRE9]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'What if we want to know what the final temperature for several walking times
    is? For example, suppose that we want to compute the final temperature every 5
    minutes up to 20 minutes. This is where `NumPy` makes things easy:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想知道多个行走时间下的最终温度该怎么办？例如，假设我们想每5分钟计算一次直到20分钟的最终温度。这正是`NumPy`让事情变得简单的地方：
- en: '[PRE10]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We start by defining `times` to be a `NumPy` array, using the `arange()` function.
    This function takes three arguments: the starting value of the range, the ending
    value of the range, and the increment.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先通过使用`arange()`函数将`times`定义为一个`NumPy`数组。这个函数有三个参数：范围的起始值、范围的结束值和增量。
- en: Note
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You may be wondering why the ending value of the range is `21` and not `20`.
    It's a common convention in Computer Science, followed by Python. *When a range
    is specified, the right endpoint never belongs to the range*. So, if we had specified
    `20` as the right endpoint, the range would only contain the values `0`, `5`,
    `10`, and `15`.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想，为什么范围的结束值是`21`而不是`20`。这是计算机科学中常见的约定，Python也遵循这一约定。*当指定一个范围时，右端点永远不属于该范围*。因此，如果我们将`20`指定为右端点，则该范围只包含`0`、`5`、`10`和`15`这几个值。
- en: After defining the `times` array, we can simply call the `cooling_law()` function
    with `times` as the second argument. This computes the temperatures at the given
    times.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 定义了`times`数组后，我们可以简单地用`times`作为第二个参数调用`cooling_law()`函数。这将计算在给定时间点的温度。
- en: Note
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You may have noticed that there is something strange going on here. The first
    time the `cooling_law()` function was called, the second argument was a floating-point
    number. The second time, it was a `NumPy` array. This is possible thanks to Python's
    dynamic typing and polymorphism. `NumPy` redefines the arithmetic operators to
    work with arrays in a smart way. So, we do not need to define a new function especially
    for this case.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能注意到这里有些奇怪的地方。第一次调用`cooling_law()`函数时，第二个参数是一个浮点数。第二次调用时，它是一个`NumPy`数组。这是得益于Python的动态类型和多态性。`NumPy`重新定义了算术运算符，以智能的方式处理数组。因此，我们不需要为这种情况特别定义新的函数。
- en: 'Once we have the temperatures, we can display them in a graph. To display the
    graph, execute the following command line in a cell:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们得到了温度，就可以将它们展示在图表中。要展示图表，请在单元格中执行以下命令：
- en: '[PRE11]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The preceding command line produces the following plot:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令行会生成以下图表：
- en: '![Example – the coffee cooling problem](img/8341OS_01_04.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![示例 - 咖啡冷却问题](img/8341OS_01_04.jpg)'
- en: The `plot()` function is a part of the `matplotlib` package, which will be studied
    in detail in [Chapter 3](ch03.html "Chapter 3. Graphics with matplotlib"), *Graphics
    with matplotlib*. In this example, the first two arguments to `plot()` are `NumPy`
    arrays that specify the data for the horizontal and vertical axes, respectively.
    The third argument specifies the plot symbol to be a filled circle.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`plot()`函数是`matplotlib`包的一部分，我们将在[第3章](ch03.html "第3章. 使用matplotlib绘图")中详细学习，*使用matplotlib绘图*。在这个例子中，`plot()`的前两个参数是`NumPy`数组，分别指定水平和垂直坐标轴的数据。第三个参数指定绘图符号为实心圆。'
- en: 'We are now ready to tackle the original problem: should we mix the cream in
    at the coffee shop or wait until we get back to the office? When we mix the cream,
    there is a sudden drop in temperature. The temperature of the mixture is the average
    of the temperature of the two liquids, weighted by volume. The following code
    defines a function to compute the resulting temperature in a mix:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在准备好解决最初的问题：我们是应该在咖啡店里混合奶油，还是等回到办公室再混合？当我们混合奶油时，温度会突然下降。混合液体的温度是两种液体温度的加权平均值，权重由体积决定。以下代码定义了一个函数，用于计算混合后的温度：
- en: '[PRE12]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The arguments in the function are the temperature and volume of each liquid.
    Using this function, we can now compute the temperature evolution when the cream
    is added at the coffee shop:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 函数中的参数是每种液体的温度和体积。使用这个函数，我们现在可以计算在咖啡店混合奶油时的温度变化：
- en: '[PRE13]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Tip
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Notice that we repeat the variable `temperatures_mix_at_shop` at the end of
    the cell. This is not a typo. The IPython notebook, by default, assumes that the
    output of a cell is the last expression computed in the cell. It is a common idiom
    to list the variables one wants to have displayed, at the end of the cell. We
    will later see how to display fancier, nicely formatted output.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们在单元格的末尾重复了变量`temperatures_mix_at_shop`。这并不是一个拼写错误。默认情况下，IPython笔记本假设单元格的输出是单元格中计算的最后一个表达式。通常的做法是在单元格末尾列出希望显示的变量。稍后我们将看到如何显示更精美、格式化的输出。
- en: 'As usual, type all the commands in a single code cell and then press *Shift*
    + *Enter* to run the whole cell. We first set the initial temperatures and volumes
    for the coffee and the cream. Then, we call the `temp_mixture()` function to calculate
    the initial temperature of the mixture. Finally, we use the `cooling_law()` function
    to compute the temperatures for different walking times, storing the result in
    the `temperatures_mix_at_shop` variable. The preceding command lines produce the
    following output:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 像往常一样，把所有命令输入一个代码单元格中，然后按*Shift* + *Enter*运行整个单元格。我们首先设置咖啡和奶油的初始温度和体积。然后，我们调用`temp_mixture()`函数来计算混合物的初始温度。最后，我们使用`cooling_law()`函数来计算不同步行时间下的温度，将结果存储在`temperatures_mix_at_shop`变量中。上述命令行会生成以下输出：
- en: '[PRE14]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Remember that the `times` array specifies times from `0` to `20` with intervals
    of 5 minutes. So, the preceding output gives the temperatures at these times,
    assuming that the cream was mixed in the shop.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，`times`数组指定了从`0`到`20`的时间，间隔为5分钟。因此，上述输出给出了这些时刻的温度，假设奶油是在咖啡店混合的。
- en: 'To compute the temperatures when considering that the cream is mixed after
    walking back to our office, execute the following commands in the cell:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 要计算考虑到奶油是在回到办公室后混合时的温度，请在单元格中执行以下命令：
- en: '[PRE15]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We again use the `cooling_law()` function, but using the initial coffee temperature
    `temp_coffee` (without mixing the cream) as the first input variable. We store
    the results in the `temperatures_unmixed_coffee` variable.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们再次使用`cooling_law()`函数，但将未混合奶油的初始咖啡温度`temp_coffee`作为第一个输入变量。我们将结果存储在`temperatures_unmixed_coffee`变量中。
- en: 'To compute the effect of mixing the cream in after walking, we call the `temp_mixture()`
    function. Notice that the main difference in the two computations is the order
    in which the functions `cooling_law()` and `temp_mixture()` are called. The preceding
    command lines produce the following output:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 为了计算走路后混合奶油的效果，我们调用了`temp_mixture()`函数。请注意，两次计算的主要区别在于`cooling_law()`和`temp_mixture()`函数调用的顺序。上述命令行会生成以下输出：
- en: '[PRE16]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Let''s now plot the two temperature arrays. Execute the following command lines
    in a single cell:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们绘制两个温度数组。请在一个单元中执行以下命令行：
- en: '[PRE17]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The first `plot()` function call is the same as before. The second is similar,
    but we want the plotting symbol to be a filled diamond, indicated by the argument
    `''D''`. The `color=''r''` option makes the markings red. This produces the following
    plot:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次调用 `plot()` 函数与之前相同。第二次调用类似，但我们希望绘制的符号是填充的菱形，用参数 `'D'` 来表示。`color='r'` 选项使标记为红色。这将生成以下图表：
- en: '![Example – the coffee cooling problem](img/8341OS_01_05.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![示例 – 咖啡降温问题](img/8341OS_01_05.jpg)'
- en: Notice that, by default, all graphs created in a single code cell will be drawn
    on the same set of axes. As a conclusion, we can see that, for the data parameters
    used in this example, mixing the cream at the coffee shop is always better no
    matter what the walking time is. The reader should feel free to change the parameters
    and observe what happens in different situations.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，默认情况下，在一个代码单元中创建的所有图表都会绘制在同一坐标轴上。总的来说，我们可以得出结论，对于本示例中使用的数据参数，不管步行时间如何，在咖啡店搅拌奶油总是更好。读者可以自由更改参数并观察不同情况下会发生什么。
- en: 'Scientific plots should make clear what is being represented, the variables
    being plotted, as well as the units being used. This can be nicely handled by
    adding annotations to the plot. It is fairly easy to add annotations in `matplotlib`,
    as shown in the following code:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 科学绘图应当清晰地表示所展示的内容、绘制的变量，以及所使用的单位。这可以通过向图表添加注释来很好地处理。如下代码所示，`matplotlib` 中添加注释是非常简单的：
- en: '[PRE18]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'After plotting the arrays again, we call the appropriate functions to add the
    title (`title()`), horizontal axis label (`xlabel()`), vertical axis label (`ylabel()`),
    and legend (`legend()`). The arguments to all this functions are strings or a
    list of strings as in the case of `legend()`. The following graph is what we get
    as an output for the preceding command lines:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在再次绘制数组之后，我们调用适当的函数来添加标题（`title()`）、横轴标签（`xlabel()`）、纵轴标签（`ylabel()`）和图例（`legend()`）。所有这些函数的参数都是字符串或字符串列表，例如
    `legend()` 函数的情况。以下图表是我们根据前面的命令行得到的输出：
- en: '![Example – the coffee cooling problem](img/8341OS_01_06.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![示例 – 咖啡降温问题](img/8341OS_01_06.jpg)'
- en: There is something unsatisfactory about the way we conducted this analysis;
    our office, supposedly, is at a fixed distance from the coffee shop. The main
    factor in the situation is the outside temperature. Should we use different strategies
    during summer and winter? In order to investigate this, we start by defining a
    function that accepts as input both the cream temperature and outside temperature.
    The return value of the function is the difference of final temperatures when
    we get back to the office.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在进行此分析时有些不满意的地方；我们的办公室据称与咖啡店有固定的距离。此情况中的主要因素是外部温度。在夏季和冬季是否应该使用不同的策略？为了探讨这个问题，我们首先定义一个函数，接受奶油温度和外部温度作为输入。该函数的返回值是我们回到办公室时的最终温度差。
- en: 'The function is defined as follows:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数定义如下：
- en: '[PRE19]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In the preceding function, we first set the values of the variables that will
    be considered constant in the analysis, that is, the temperature of the coffee,
    the volumes of coffee and cream, the walking time, and the rate of cooling. Then,
    we defined the `temperature_difference` function using the same formulas we discussed
    previously. We can now use this function to compute a matrix with the temperature
    differences for several different values of the cream temperature and outside
    temperature:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的函数中，我们首先设置了在分析中将被视为常数的变量值，即咖啡的温度、咖啡和奶油的体积、步行时间和降温速率。然后，我们使用之前讨论过的相同公式定义了
    `temperature_difference` 函数。现在，我们可以使用这个函数计算一个矩阵，表示不同奶油温度和外部温度下的温差：
- en: '[PRE20]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The first two lines in the cell use the `arange()` function to define arrays
    that contain equally spaced values for the cream temperatures and outside temperatures.
    We then call the convenience function, `meshgrid()`. This function returns two
    arrays that are convenient to calculate data for three-dimensional graphs and
    are stored in the variables `cream_values` and `outside_values`. Finally, we call
    the `temperature_difference()` function, and store the return value in the `temperature_differences`
    array. This will be a two-dimensional array (that is, a matrix).
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 单元格中的前两行使用`arange()`函数定义数组，这些数组包含等间距的奶油温度和外部温度值。然后，我们调用便捷函数`meshgrid()`。该函数返回两个数组，便于计算三维图表的数据，并将它们存储在变量`cream_values`和`outside_values`中。最后，我们调用`temperature_difference()`函数，并将返回值存储在`temperature_differences`数组中。这将是一个二维数组（即矩阵）。
- en: 'We are now ready to create a three dimensional plot of the temperature differences:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备绘制温差的三维图：
- en: '[PRE21]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In the preceding code segment, we started by importing the `Axes3D` class using
    the following line:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码段中，我们首先通过以下代码行导入`Axes3D`类：
- en: '[PRE22]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This class, located in the `mpl_toolkits.mplot3d` module, is not automatically
    loaded. So, it must be explicitly imported.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类位于`mpl_toolkits.mplot3d`模块中，并不会自动加载。因此，必须显式导入它。
- en: Then we create an object `fig` of the class `figure`, set its size, and generate
    an object `ax` that is an object of the class `Axes3D`. Finally, we call the `ax.plot_surface()`
    method to generate the plot. The last three command lines set the axis labels
    and the title.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们创建一个`fig`对象，它是`figure`类的一个实例，设置它的大小，并生成一个`ax`对象，它是`Axes3D`类的一个实例。最后，我们调用`ax.plot_surface()`方法生成图表。最后三行命令设置坐标轴标签和标题。
- en: Note
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In this explanation, we used some terms that are common in object-oriented programming.
    A Python **object** is simply a data structure that can be handled in some specialized
    way. Every object is an **instance** of a **class** that defines the object's
    data. The class also defines **methods**, which are functions specialized to work
    with objects belonging to the class.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个解释中，我们使用了一些面向对象编程中常见的术语。Python中的**对象**仅仅是可以以某种特定方式处理的数据结构。每个对象都是**类**的**实例**，该类定义了对象的数据。类还定义了**方法**，这些方法是专门用于操作属于该类的对象的函数。
- en: 'The output of the preceding command lines will produce the following graph:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 前述命令行的输出将生成以下图表：
- en: '![Example – the coffee cooling problem](img/8341OS_01_07.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![示例 – 咖啡降温问题](img/8341OS_01_07.jpg)'
- en: Notice the `cmap=cm.coolwarm` argument in the call to `ax.plot_surface()`. This
    sets the color map of the plot to `cm.coolwarm`. This color map conveniently uses
    a blue-red gradient for the function values. As a result, negative temperature
    differences are shown in blue and positive temperatures in red. Notice that there
    seems to be a straight line that defines where the temperature difference transitions
    from negative to positive. This actually corresponds to values where the outside
    temperature and the cream temperature are equal. It turns out that if the cream
    temperature is lower than the outside temperature, we should mix the cream into
    the coffee at the coffee shop. Otherwise, the cream should be poured in the office.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意在调用`ax.plot_surface()`时的`cmap=cm.coolwarm`参数。它将图表的颜色映射设置为`cm.coolwarm`。这个颜色映射便捷地使用了蓝色到红色的渐变来表示函数值。因此，负温差用蓝色显示，正温差用红色显示。请注意，似乎有一条直线定义了温差从负到正的过渡位置。实际上，这对应的是外部温度与奶油温度相等的值。结果表明，如果奶油温度低于外部温度，我们应该在咖啡店将奶油混入咖啡中；否则，奶油应当在办公室倒入咖啡中。
- en: Exercises
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: 'The following are some practice questions that will help you to understand
    and apply the concepts learned in this chapter:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些练习题，帮助你理解并应用本章所学的概念：
- en: In our example, we discussed how to determine the cooling rate *r*. Modify the
    example to plot the temperature evolution for several values of *r*, keeping all
    other variables fixed.
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我们的例子中，我们讨论了如何确定冷却速率*r*。请修改该示例，绘制不同*r*值下的温度变化图，保持其他变量不变。
- en: Search the **matplotlib** documentation at [http://matplotlib.org](http://matplotlib.org)
    to figure out how to generate a contour plot of the temperature differences.
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查阅**matplotlib**文档，网址为[http://matplotlib.org](http://matplotlib.org)，以了解如何生成温差的等高线图。
- en: Our analysis ignores the fact that the cream will also change temperature as
    we walk. Change the notebook so that this factor is taken into account
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们的分析忽略了一个事实，即在行走过程中，奶油的温度也会发生变化。请修改笔记本，以便考虑到这一因素。
- en: Summary
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we set up an IPython environment with Anaconda, accessed the
    IPython notebook online through Wakari, created a notebook, and learned the basics
    of editing and executing commands, and lastly, we went through an extensively
    applied example featuring the basic notebook capabilities.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们通过 Anaconda 设置了一个 IPython 环境，通过 Wakari 在线访问了 IPython notebook，创建了一个笔记本，并学习了编辑和执行命令的基础知识，最后，我们通过一个广泛应用的示例展示了笔记本的基本功能。
- en: In the next chapter, we will delve more deeply in the facilities provided by
    the notebook interface—including notebook navigation and editing facilities, interfacing
    with the operating system, loading and saving data, and running scripts.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将更深入地探讨笔记本界面提供的功能——包括笔记本导航和编辑功能、与操作系统的交互、加载和保存数据以及运行脚本。
