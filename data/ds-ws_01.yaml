- en: 1\. Introduction to Data Science in Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1. Python中的数据科学介绍
- en: Overview
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 概述
- en: This very first chapter will introduce you to the field of data science and
    walk you through an overview of Python's core concepts and their application in
    the world of data science.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将向您介绍数据科学领域，并带您了解 Python 的核心概念及其在数据科学中的应用。
- en: By the end of this chapter, you will be able to explain what data science is
    and distinguish between supervised and unsupervised learning. You will also be
    able to explain what machine learning is and distinguish between regression, classification,
    and clustering problems. You'll have learnt to create and manipulate different
    types of Python variable, including core variables, lists, and dictionaries. You'll
    be able to build a `for` loop, print results using f-strings, define functions,
    import Python packages and load data in different formats using `pandas`. You
    will also have had your first taste of training a model using scikit-learn.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将能够解释什么是数据科学，并区分监督学习和无监督学习。您还将能够解释什么是机器学习，并区分回归、分类和聚类问题。您将学会创建和操作不同类型的
    Python 变量，包括核心变量、列表和字典。您将能够构建一个`for`循环，使用 f-strings 打印结果，定义函数，导入 Python 包，并使用`pandas`加载不同格式的数据。您还将第一次体验使用
    scikit-learn 训练模型。
- en: Introduction
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Welcome to the fascinating world of data science! We are sure you must be pretty
    excited to start your journey and learn interesting and exciting techniques and
    algorithms. This is exactly what this book is intended for.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到数据科学的迷人世界！我们相信您一定很兴奋开始您的旅程，学习有趣和激动人心的技术和算法。这正是本书的目的所在。
- en: 'But before diving into it, let''s define what data science is: it is a combination
    of multiple disciplines, including business, statistics, and programming, that
    intends to extract meaningful insights from data by running controlled experiments
    similar to scientific research.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 但在深入之前，让我们定义一下什么是数据科学：它是多个学科的结合，包括商业、统计学和编程，旨在通过运行类似科学研究的控制实验，从数据中提取有意义的见解。
- en: The objective of any data science project is to derive valuable knowledge for
    the business from data in order to make better decisions. It is the responsibility
    of data scientists to define the goals to be achieved for a project. This requires
    business knowledge and expertise. In this book, you will be exposed to some examples
    of data science tasks from real-world datasets.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 任何数据科学项目的目标都是从数据中提取有价值的知识，以便做出更好的决策。数据科学家有责任定义项目要达成的目标。这需要业务知识和专业技能。在本书中，您将接触到一些来自真实数据集的数据科学任务示例。
- en: Statistics is a mathematical field used for analyzing and finding patterns from
    data. A lot of the newest and most advanced techniques still rely on core statistical
    approaches. This book will present to you the basic techniques required to understand
    the concepts we will be covering.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 统计学是一个用于分析数据并发现模式的数学领域。许多最新和最先进的技术仍然依赖于核心统计方法。本书将向您展示理解我们将要讲解的概念所需的基本技术。
- en: With an exponential increase in data generation, more computational power is
    required for processing it efficiently. This is the reason why programming is
    a required skill for data scientists. You may wonder why we chose Python for this
    Workshop. That's because Python is one of the most popular programming languages
    for data science. It is extremely easy to learn how to code in Python thanks to
    its simple and easily readable syntax. It also has an incredible number of packages
    available to anyone for free, such as pandas, scikit-learn, TensorFlow, and PyTorch.
    Its community is expanding at an incredible rate, adding more and more new functionalities
    and improving its performance and reliability. It's no wonder companies such as
    Facebook, Airbnb, and Google are using it as one of their main stacks. No prior
    knowledge of Python is required for this book. If you do have some experience
    with Python or other programming languages, then this will be an advantage, but
    all concepts will be fully explained, so don't worry if you are new to programming.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 随着数据生成量的指数级增长，处理数据所需的计算能力也在不断增加。这就是为什么编程是数据科学家必备技能的原因。你可能会问，为什么我们在本次工作坊中选择了
    Python。那是因为 Python 是数据科学中最流行的编程语言之一。由于其简单易读的语法，学习 Python 编程非常容易。它还拥有大量免费开放的包，例如
    pandas、scikit-learn、TensorFlow 和 PyTorch。Python 的社区正以惊人的速度扩展，添加了越来越多的新功能，并提高了性能和可靠性。难怪像
    Facebook、Airbnb 和 Google 这样的公司将其作为主要技术栈之一。对于本书而言，不需要事先了解 Python。如果你有一些 Python
    或其他编程语言的经验，那会是一个优势，但所有的概念都会完全解释清楚，所以即使你是编程新手也不用担心。
- en: Application of Data Science
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据科学的应用
- en: 'As mentioned in the introduction, data science is a multidisciplinary approach
    to analyzing and identifying complex patterns and extracting valuable insights
    from data. Running a data science project usually involves multiple steps, including
    the following:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如前言所述，数据科学是一种多学科的方法，用于分析和识别复杂的模式，并从数据中提取有价值的洞察。运行一个数据科学项目通常涉及多个步骤，包括以下内容：
- en: Defining the business problem to be solved
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义要解决的业务问题
- en: Collecting or extracting existing data
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 收集或提取现有数据
- en: Analyzing, visualizing, and preparing data
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 分析、可视化和准备数据
- en: Training a model to spot patterns in data and make predictions
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 训练模型以识别数据中的模式并做出预测
- en: Assessing a model's performance and making improvements
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 评估模型的表现并进行改进
- en: Communicating and presenting findings and gained insights
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 沟通和展示发现的结果及获得的洞察
- en: Deploying and maintaining a model
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署和维护模型
- en: As its name implies, data science projects require data, but it is actually
    more important to have defined a clear business problem to solve first. If it's
    not framed correctly, a project may lead to incorrect results as you may have
    used the wrong information, not prepared the data properly, or led a model to
    learn the wrong patterns. So, it is absolutely critical to properly define the
    scope and objective of a data science project with your stakeholders.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 正如其名字所暗示的，数据科学项目需要数据，但实际上，首先定义清晰的业务问题才是最重要的。如果问题没有正确定义，项目可能会导致错误的结果，因为你可能使用了错误的信息，数据没有正确准备，或者让模型学习了错误的模式。因此，正确地与相关方定义数据科学项目的范围和目标是至关重要的。
- en: There are a lot of data science applications in real-world situations or in
    business environments. For example, healthcare providers may train a model for
    predicting a medical outcome or its severity based on medical measurements, or
    a high school may want to predict which students are at risk of dropping out within
    a year's time based on their historical grades and past behaviors. Corporations
    may be interested to know the likelihood of a customer buying a certain product
    based on his or her past purchases. They may also need to better understand which
    customers are more likely to stop using existing services and churn. These are
    examples where data science can be used to achieve a clearly defined goal, such
    as increasing the number of patients detected with a heart condition at an early
    stage or reducing the number of customers canceling their subscriptions after
    six months. That sounds exciting, right? Soon enough, you will be working on such
    interesting projects.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 数据科学在现实世界或商业环境中有很多应用。例如，医疗提供者可能会训练一个模型，根据医学测量数据预测医疗结果或其严重程度，或者一所高中可能想根据学生的历史成绩和过往行为预测哪些学生在一年内有辍学的风险。公司可能希望了解基于客户的历史购买记录，某个客户购买某个产品的可能性。他们也可能需要更好地了解哪些客户更有可能停止使用现有服务并流失。这些都是数据科学可以用来实现明确目标的例子，例如早期发现患有心脏病的患者数量，或者减少六个月后取消订阅的客户数量。这听起来很令人兴奋吧？很快，你也将参与这样的有趣项目。
- en: What Is Machine Learning?
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是机器学习？
- en: When we mention data science, we usually think about machine learning, and some
    people may not understand the difference between them. Machine learning is the
    field of building algorithms that can learn patterns by themselves without being
    programmed explicitly. So machine learning is a family of techniques that can
    be used at the modeling stage of a data science project.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们提到数据科学时，通常会想到机器学习，有些人可能不了解它们之间的区别。机器学习是构建能够自我学习模式的算法的领域，而无需明确编程。所以，机器学习是一系列可以在数据科学项目建模阶段使用的技术。
- en: 'Machine learning is composed of three different types of learning:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 机器学习由三种不同类型的学习组成：
- en: Supervised learning
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有监督学习
- en: Unsupervised learning
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无监督学习
- en: Reinforcement learning
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强化学习
- en: Supervised Learning
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 有监督学习
- en: 'Supervised learning refers to a type of task where an algorithm is trained
    to learn patterns based on prior knowledge. That means this kind of learning requires
    the labeling of the outcome (also called the response variable, dependent variable,
    or target variable) to be predicted beforehand. For instance, if you want to train
    a model that will predict whether a customer will cancel their subscription, you
    will need a dataset with a column (or variable) that already contains the churn
    outcome (cancel or not cancel) for past or existing customers. This outcome has
    to be labeled by someone prior to the training of a model. If this dataset contains
    5,000 observations, then all of them need to have the outcome being populated.
    The objective of the model is to learn the relationship between this outcome column
    and the other features (also called independent variables or predictor variables).
    Following is an example of such a dataset:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 有监督学习指的是一种任务类型，其中算法根据先前的知识学习模式。这意味着这种学习方式需要提前标注预测的结果（也叫响应变量、因变量或目标变量）。例如，如果你想训练一个预测客户是否会取消订阅的模型，你需要一个数据集，其中包含一个列（或变量），该列已经包含了过去或现有客户的流失结果（取消或未取消）。这个结果必须在模型训练之前由某人进行标注。如果这个数据集包含5,000条观测数据，那么所有数据都需要标注好结果。模型的目标是学习这个结果列与其他特征（也叫独立变量或预测变量）之间的关系。以下是此类数据集的示例：
- en: '![Figure 1.1: Example of customer churn dataset'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.1：客户流失数据集示例'
- en: '](img/B15019_01_01.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15019_01_01.jpg)'
- en: 'Figure 1.1: Example of customer churn dataset'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1：客户流失数据集示例
- en: The `Cancel` column is the response variable. This is the column you are interested
    in, and you want the model to predict accurately the outcome for new input data
    (in this case, new customers). All the other columns are the predictor variables.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`Cancel` 列是响应变量。这是你关注的列，你希望模型能够准确预测新输入数据（在这个例子中是新客户）的结果。所有其他列是预测变量。'
- en: 'The model, after being trained, may find the following pattern: a customer
    is more likely to cancel their subscription after 12 months and if their average
    monthly spent is over `$50`. So, if a new customer has gone through 15 months
    of subscription and is spending $85 per month, the model will predict this customer
    will cancel their contract in the future.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在经过训练后，模型可能会发现以下模式：当客户订阅12个月后，并且其月均消费超过`$50`时，取消订阅的可能性较大。因此，如果一位新客户已经订阅了15个月，且每月消费为$85，模型会预测该客户未来会取消合同。
- en: 'When the response variable contains a limited number of possible values (or
    classes), it is a classification problem (you will learn more about this in *Chapter
    3, Binary Classification*, and *Chapter 4, Multiclass Classification with RandomForest*).
    The model will learn how to predict the right class given the values of the independent
    variables. The churn example we just mentioned is a classification problem as
    the response variable can only take two different values: `yes` or `no`.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当响应变量包含有限数量的可能值（或类别）时，这是一个分类问题（你将在*第3章，二分类*和*第4章，随机森林多类分类*中了解更多）。模型将学习如何根据独立变量的值预测正确的类别。我们刚才提到的客户流失例子就是一个分类问题，因为响应变量只能取两个不同的值：`yes`或`no`。
- en: On the other hand, if the response variable can have a value from an infinite
    number of possibilities, it is called a regression problem.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果响应变量可以有无限多的可能值，那么这就是回归问题。
- en: An example of a regression problem is where you are trying to predict the exact
    number of mobile phones produced every day for some manufacturing plants. This
    value can potentially range from 0 to an infinite number (or a number big enough
    to have a large range of potential values), as shown in *Figure 1.2*.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 回归问题的一个例子是预测某些制造工厂每天生产的手机数量。这个值可能在0到无限大的范围内（或一个足够大的范围，以包含大量可能的值），如*图1.2*所示。
- en: '![Figure 1.2: Example of a mobile phone production dataset'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.2：手机生产数据集示例'
- en: '](img/B15019_01_02.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15019_01_02.jpg)'
- en: 'Figure 1.2: Example of a mobile phone production dataset'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.2：手机生产数据集示例
- en: In the preceding figure, you can see that the values for `Daily output` can
    take any value from `15000` to more than `50000`. This is a regression problem,
    which we will look at in *Chapter 2, Regression*.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的图中，你可以看到`日产量`的值可以从`15000`到超过`50000`。这是一个回归问题，我们将在*第2章，回归*中详细讲解。
- en: Unsupervised Learning
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 无监督学习
- en: Unsupervised learning is a type of algorithm that doesn't require any response
    variables at all. In this case, the model will learn patterns from the data by
    itself. You may ask what kind of pattern it can find if there is no target specified
    beforehand.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 无监督学习是一种不需要任何响应变量的算法。在这种情况下，模型会自行从数据中学习模式。你可能会问，如果没有预先指定目标，它能找到什么样的模式呢？
- en: This type of algorithm usually can detect similarities between variables or
    records, so it will try to group those that are very close to each other. This
    kind of algorithm can be used for clustering (grouping records) or dimensionality
    reduction (reducing the number of variables). Clustering is very popular for performing
    customer segmentation, where the algorithm will look to group customers with similar
    behaviors together from the data. *Chapter 5*, *Performing Your First Cluster
    Analysis*, will walk you through an example of clustering analysis.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的算法通常可以检测变量或记录之间的相似性，因此它会尝试将彼此非常接近的对象进行分组。这类算法可以用于聚类（分组记录）或降维（减少变量数量）。聚类在客户细分中非常流行，算法会根据数据将具有相似行为的客户分组。*第5章*，*执行您的第一次聚类分析*，将带你走过一个聚类分析的例子。
- en: Reinforcement Learning
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 强化学习
- en: Reinforcement learning is another type of algorithm that learns how to act in
    a specific environment based on the feedback it receives. You may have seen some
    videos where algorithms are trained to play Atari games by themselves. Reinforcement
    learning techniques are being used to teach the agent how to act in the game based
    on the rewards or penalties it receives from the game.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 强化学习是另一种算法，它根据所收到的反馈学习如何在特定环境中采取行动。你可能看过一些视频，算法通过自身训练来玩Atari游戏。强化学习技术正被用于教导智能体根据游戏中的奖励或惩罚来决定如何在游戏中行动。
- en: For instance, in the game Pong, the agent will learn to not let the ball drop
    after multiple rounds of training in which it receives high penalties every time
    the ball drops.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 举例来说，在游戏Pong中，智能体会在多轮训练后学会不让球掉落，因为每次球掉落时它会受到很高的惩罚。
- en: Note
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Reinforcement learning algorithms are out of scope and will not be covered in
    this book.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 强化学习算法不在本书的讨论范围内，将不会在本书中涉及。
- en: Overview of Python
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python概述
- en: As mentioned earlier, Python is one of the most popular programming languages
    for data science. But before diving into Python's data science applications, let's
    have a quick introduction to some core Python concepts.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Python是数据科学中最流行的编程语言之一。但在深入探讨Python在数据科学中的应用之前，让我们快速了解一下Python的一些核心概念。
- en: Types of Variable
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变量类型
- en: In Python, you can handle and manipulate different types of variables. Each
    has its own specificities and benefits. We will not go through every single one
    of them but rather focus on the main ones that you will have to use in this book.
    For each of the following code examples, you can run the code in Google Colab
    to view the given output.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，你可以处理和操作不同类型的变量。每种变量类型都有其独特性和优势。我们不会逐一介绍所有的变量类型，而是重点讲解本书中你将需要使用的主要变量类型。对于以下每个代码示例，你可以在Google
    Colab中运行代码来查看给定的输出结果。
- en: Numeric Variables
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数字变量
- en: The most basic variable type is numeric. This can contain integer or decimal
    (or float) numbers, and some mathematical operations can be performed on top of
    them.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 最基本的变量类型是数字型。这种变量可以包含整数或小数（或浮动点）数字，并且可以对其执行一些数学运算。
- en: 'Let''s use an integer variable called `var1` that will take the value `8` and
    another one called `var2` with the value `160.88`, and add them together with
    the `+` operator, as shown here:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们使用一个名为`var1`的整数变量，它的值是`8`，另一个名为`var2`的变量，其值为`160.88`，我们可以用`+`运算符将它们相加，如下所示：
- en: '[PRE0]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You should get the following output:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![Figure 1.3: Output of the addition of two variables'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.3：两个变量相加的输出结果'
- en: '](img/B15019_01_03.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15019_01_03.jpg)'
- en: 'Figure 1.3: Output of the addition of two variables'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.3：两个变量相加的输出结果
- en: In Python, you can perform other mathematical operations on numerical variables,
    such as multiplication (with the `*` operator) and division (with `/`).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，你还可以对数字变量执行其他数学运算，例如乘法（使用`*`运算符）和除法（使用`/`运算符）。
- en: Text Variables
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文本变量
- en: 'Another interesting type of variable is `string`, which contains textual information.
    You can create a variable with some specific text using the single or double quote,
    as shown in the following example:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有趣的变量类型是`string`，它包含文本信息。你可以使用单引号或双引号创建一个包含特定文本的变量，如下例所示：
- en: '[PRE1]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In order to display the content of a variable, you can call the `print()` function:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 为了显示一个变量的内容，你可以调用`print()`函数：
- en: '[PRE2]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You should get the following output:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![Figure 1.4: Printing the two text variables'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.4：打印两个文本变量'
- en: '](img/B15019_01_04.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15019_01_04.jpg)'
- en: 'Figure 1.4: Printing the two text variables'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.4：打印两个文本变量
- en: Python also provides an interface called f-strings for printing text with the
    value of defined variables. It is very handy when you want to print results with
    additional text to make it more readable and interpret results. It is also quite
    common to use f-strings to print logs. You will need to add `f` before the quotes
    (or double quotes) to specify that the text will be an f-string. Then you can
    add an existing variable inside the quotes and display the text with the value
    of this variable. You need to wrap the variable with curly brackets, `{}`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Python还提供了一种名为f-strings的接口，用于打印带有已定义变量值的文本。当你想要打印结果并附加额外文本使其更易读，或是解释结果时，这非常方便。f-strings在打印日志时也非常常见。你需要在引号（或双引号）前添加`f`，以指定文本为f-strings。然后，你可以将现有的变量放在引号内，并显示该变量的值。变量需要用大括号`{}`括起来。
- en: 'For instance, if we want to print `Text:` before the values of `var3` and `var4`,
    we will write the following code:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 举例来说，如果我们想要在`var3`和`var4`的值前面打印`Text:`，我们将写出以下代码：
- en: '[PRE3]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You should get the following output:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![Figure 1.5: Printing with f-strings'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.5：使用f-strings打印'
- en: '](img/B15019_01_05.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15019_01_05.jpg)'
- en: 'Figure 1.5: Printing with f-strings'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.5：使用f-strings打印
- en: 'You can also perform some text-related transformations with string variables,
    such as capitalizing or replacing characters. For instance, you can concatenate
    the two variables together with the `+` operator:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以对字符串变量执行一些与文本相关的转换操作，例如将字符大写或替换字符。例如，你可以使用 `+` 运算符将两个变量连接起来：
- en: '[PRE4]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You should get the following output:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![Figure 1.6: Concatenation of the two text variables'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.6：两个文本变量的连接'
- en: '](img/B15019_01_06.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15019_01_06.jpg)'
- en: 'Figure 1.6: Concatenation of the two text variables'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.6：两个文本变量的连接
- en: Python List
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Python 列表
- en: 'Another very useful type of variable is the list. It is a collection of items
    that can be changed (you can add, update, or remove items). To declare a list,
    you will need to use square brackets, `[]`, like this:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个非常有用的变量类型是列表。它是一个可以更改的项集合（你可以添加、更新或删除项）。声明一个列表时，你需要使用方括号 `[]`，像这样：
- en: '[PRE5]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You should get the following output:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![Figure 1.7: List containing only string items'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.7：仅包含字符串项的列表'
- en: '](img/B15019_01_07.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15019_01_07.jpg)'
- en: 'Figure 1.7: List containing only string items'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.7：仅包含字符串项的列表
- en: 'A list can have different item types, so you can mix numerical and text variables
    in it:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 列表可以包含不同类型的项，因此你可以在其中混合数字和文本变量：
- en: '[PRE6]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You should get the following output:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![Figure 1.8: List containing numeric and string items'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.8：包含数字和字符串项的列表'
- en: '](img/B15019_01_08.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15019_01_08.jpg)'
- en: 'Figure 1.8: List containing numeric and string items'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.8：包含数字和字符串项的列表
- en: 'An item in a list can be accessed by its index (its position in the list).
    To access the first (index 0) and third elements (index 2) of a list, you do the
    following:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 列表中的项可以通过其索引（在列表中的位置）来访问。要访问列表中的第一个项（索引 0）和第三个项（索引 2），你可以这样做：
- en: '[PRE7]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: In Python, all indexes start at `0`.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，所有索引从 `0` 开始。
- en: 'You should get the following output:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![Figure 1.9: The first and third items in the var6 list'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.9：var6 列表中的第一个和第三个项'
- en: '](img/B15019_01_09.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15019_01_09.jpg)'
- en: 'Figure 1.9: The first and third items in the var6 list'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.9：var6 列表中的第一个和第三个项
- en: 'Python provides an API to access a range of items using the `:` operator. You
    just need to specify the starting index on the left side of the operator and the
    ending index on the right side. The ending index is always excluded from the range.
    So, if you want to get the first three items (index 0 to 2), you should do as
    follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: Python 提供了一个 API，可以使用 `:` 运算符访问一系列项。你只需要指定运算符左侧的起始索引和右侧的结束索引。结束索引总是被排除在范围之外。所以，如果你想获得前三个项（索引
    0 到 2），你应该这样做：
- en: '[PRE8]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You should get the following output:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![Figure 1.10: The first three items of var6'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.10：var6 中的前三个项'
- en: '](img/B15019_01_10.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15019_01_10.jpg)'
- en: 'Figure 1.10: The first three items of var6'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.10：var6 中的前三个项
- en: 'You can also iterate through every item of a list using a `for` loop. If you
    want to print every item of the `var6` list, you should do this:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用 `for` 循环遍历列表中的每个项。如果你想打印 `var6` 列表中的每个项，你应该这样做：
- en: '[PRE9]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You should get the following output:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![Figure 1.11: Output of the for loop'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.11：for 循环的输出'
- en: '](img/B15019_01_11.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15019_01_11.jpg)'
- en: 'Figure 1.11: Output of the for loop'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.11：for 循环的输出
- en: 'You can add an item at the end of the list using the `.append()` method:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `.append()` 方法将项添加到列表的末尾：
- en: '[PRE10]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You should get the following output:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![Figure 1.12: Output of var6 after inserting the ''Python'' item'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.12：插入 ''Python'' 项后的 var6 输出'
- en: '](img/B15019_01_12.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15019_01_12.jpg)'
- en: 'Figure 1.12: Output of var6 after inserting the ''Python'' item'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.12：插入 'Python' 项后的 var6 输出
- en: 'To delete an item from the list, you use the `.remove()` method:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 要从列表中删除一项，你可以使用 `.remove()` 方法：
- en: '[PRE11]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You should get the following output:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![Figure 1.13: Output of var6 after removing the ''15019'' item'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.13：删除 ''15019'' 项后的 var6 输出'
- en: '](img/B15019_01_13.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15019_01_13.jpg)'
- en: 'Figure 1.13: Output of var6 after removing the ''15019'' item'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.13：删除 '15019' 项后的 var6 输出
- en: Python Dictionary
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Python 字典
- en: 'Another very popular Python variable used by data scientists is the dictionary
    type. For example, it can be used to load JSON data into Python so that it can
    then be converted into a DataFrame (you will learn more about the JSON format
    and DataFrames in the following sections). A dictionary contains multiple elements,
    like a `{}`, and specify the keys and values separated by `:`, as shown here:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个数据科学家非常常用的Python变量是字典类型。例如，它可以用来将JSON数据加载到Python中，然后将其转换为DataFrame（你将在后续章节中学习更多关于JSON格式和DataFrame的内容）。字典包含多个元素，类似`{}`，并通过`:`分隔键和值，如下所示：
- en: '[PRE12]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You should get the following output:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![Figure 1.14: Output of var7'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.14：var7的输出'
- en: '](img/B15019_01_14.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15019_01_14.jpg)'
- en: 'Figure 1.14: Output of var7'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.14：var7的输出
- en: 'To access a specific value, you need to provide the corresponding key name.
    For instance, if you want to get the value `Python`, you do this:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问特定的值，你需要提供相应的键名。例如，如果你想获取值`Python`，你可以这样做：
- en: '[PRE13]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You should get the following output:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![Figure 1.15: Value for the ''Language'' key'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.15：''Language''键的值'
- en: '](img/B15019_01_15.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15019_01_15.jpg)'
- en: 'Figure 1.15: Value for the ''Language'' key'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.15：'Language'键的值
- en: Note
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Each key-value pair in a dictionary needs to be unique.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 字典中的每个键值对必须是唯一的。
- en: 'Python provides a method to access all the key names from a dictionary, `.keys()`,
    which is used as shown in the following code snippet:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: Python提供了一种方法来访问字典中的所有键名，`.keys()`，其用法如下面的代码片段所示：
- en: '[PRE14]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You should get the following output:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![Figure 1.16: List of key names'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.16：键名列表'
- en: '](img/B15019_01_16.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15019_01_16.jpg)'
- en: 'Figure 1.16: List of key names'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.16：键名列表
- en: 'There is also a method called `.values()`, which is used to access all the
    values of a dictionary:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一种叫做`.values()`的方法，可以用于访问字典的所有值：
- en: '[PRE15]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You should get the following output:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![Figure 1.17: List of values'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.17：值的列表'
- en: '](img/B15019_01_17.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15019_01_17.jpg)'
- en: 'Figure 1.17: List of values'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.17：值的列表
- en: 'You can iterate through all items from a dictionary using a `for` loop and
    the `.items()` method, as shown in the following code snippet:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`for`循环和`.items()`方法遍历字典中的所有项，如下所示的代码片段所示：
- en: '[PRE16]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You should get the following output:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![Figure 1.18: Output after iterating through the items of a dictionary'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.18：遍历字典项后的输出'
- en: '](img/B15019_01_18.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15019_01_18.jpg)'
- en: 'Figure 1.18: Output after iterating through the items of a dictionary'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.18：遍历字典项后的输出
- en: 'You can add a new element in a dictionary by providing the key name like this:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过提供键名来向字典中添加一个新元素，方法如下：
- en: '[PRE17]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'You should get the following output:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![Figure 1.19: Output of a dictionary after adding an item'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.19：在向字典中添加项目后的输出'
- en: '](img/B15019_01_19.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15019_01_19.jpg)'
- en: 'Figure 1.19: Output of a dictionary after adding an item'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.19：在向字典中添加项目后的输出
- en: 'You can delete an item from a dictionary with the `del` command:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`del`命令从字典中删除一个项目：
- en: '[PRE18]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You should get the following output:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![Figure 1.20: Output of a dictionary after removing an item'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.20：在移除一个项目后的字典输出'
- en: '](img/B15019_01_20.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15019_01_20.jpg)'
- en: 'Figure 1.20: Output of a dictionary after removing an item'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.20：在移除一个项目后的字典输出
- en: In *Exercise 1.01*, *Creating a Dictionary That Will Contain Machine Learning
    Algorithms*, we will be looking to use these concepts that we've just looked at.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在*练习 1.01*，*创建一个包含机器学习算法的字典*中，我们将使用刚才学习的这些概念。
- en: Note
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you are interested in exploring Python in more depth, head over to our website
    ([https://packt.live/2FcXpOp](https://packt.live/2FcXpOp)) to get yourself the
    Python Workshop.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有兴趣深入探索Python，可以访问我们的网站（[https://packt.live/2FcXpOp](https://packt.live/2FcXpOp)）购买Python工作坊课程。
- en: 'Exercise 1.01: Creating a Dictionary That Will Contain Machine Learning Algorithms'
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 1.01：创建一个包含机器学习算法的字典
- en: In this exercise, we will create a dictionary using Python that will contain
    a collection of different machine learning algorithms that will be covered in
    this book.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在本练习中，我们将使用Python创建一个字典，其中包含本书中将涵盖的不同机器学习算法的集合。
- en: 'The following steps will help you complete the exercise:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将帮助你完成练习：
- en: Note
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Every exercise and activity in this book is to be executed on Google Colab.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的每个练习和活动都将在Google Colab上执行。
- en: Open on a new Colab notebook.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新的Colab笔记本中打开。
- en: 'Create a list called `algorithm` that will contain the following elements:
    `Linear Regression`, `Logistic Regression`, `RandomForest`, and `a3c`:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`algorithm`的列表，包含以下元素：`Linear Regression`、`Logistic Regression`、`RandomForest`和`a3c`：
- en: '[PRE19]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now, create a list called `learning` that will contain the following elements:
    `Supervised`, `Supervised`, `Supervised`, and `Reinforcement`:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，创建一个名为`learning`的列表，包含以下元素：`Supervised`、`Supervised`、`Supervised`和`Reinforcement`：
- en: '[PRE20]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Create a list called `algorithm_type` that will contain the following elements:
    `Regression`, `Classification`, `Regression or Classification`, and `Game AI`:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`algorithm_type`的列表，包含以下元素：`Regression`、`Classification`、`Regression or
    Classification`和`Game AI`：
- en: '[PRE21]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Add an item called `k-means` into the `algorithm` list using the `.append()` method:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`.append()`方法将`k-means`项添加到`algorithm`列表中：
- en: '[PRE22]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Display the content of `algorithm` using the `print()` function:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`print()`函数显示`algorithm`的内容：
- en: '[PRE23]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'You should get the following output:'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![Figure 1.21: Output of ''algorithm'''
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 1.21：''algorithm'' 的输出'
- en: '](img/B15019_01_21.jpg)'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_01_21.jpg)'
- en: 'Figure 1.21: Output of ''algorithm'''
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 1.21：'algorithm' 的输出
- en: From the preceding output, we can see that we added the `k-means` item to the list.
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从前面的输出中，我们可以看到我们将`k-means`项添加到列表中。
- en: 'Now, add the `Unsupervised` item into the `learning` list using the `.append()`
    method:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用`.append()`方法将`Unsupervised`项添加到`learning`列表中：
- en: '[PRE24]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Display the content of `learning` using the `print()` function:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`print()`函数显示`learning`的内容：
- en: '[PRE25]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'You should get the following output:'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![Figure 1.22: Output of ''learning'''
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 1.22：''learning'' 的输出'
- en: '](img/B15019_01_22.jpg)'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_01_22.jpg)'
- en: 'Figure 1.22: Output of ''learning'''
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 1.22：'learning' 的输出
- en: From the preceding output, we can see that we added the `Unsupervised` item
    into the list.
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从前面的输出中，我们可以看到我们将`Unsupervised`项添加到了列表中。
- en: 'Add the `Clustering` item into the `algorithm_type` list using the `.append()`
    method:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`.append()`方法将`Clustering`项添加到`algorithm_type`列表中：
- en: '[PRE26]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Display the content of `algorithm_type` using the `print()` function:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`print()`函数显示`algorithm_type`的内容：
- en: '[PRE27]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'You should get the following output:'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![Figure 1.23: Output of ''algorithm_type'''
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 1.23：''algorithm_type'' 的输出'
- en: '](img/B15019_01_23.jpg)'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_01_23.jpg)'
- en: 'Figure 1.23: Output of ''algorithm_type'''
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 1.23：'algorithm_type' 的输出
- en: From the preceding output, we can see that we added the `Clustering` item into
    the list.
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从前面的输出中，我们可以看到我们将`Clustering`项添加到了列表中。
- en: 'Create an empty dictionary called `machine_learning` using curly brackets, `{}`:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用大括号`{}`创建一个空字典`machine_learning`：
- en: '[PRE28]'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Create a new item in `machine_learning` with the key as `algorithm` and the
    value as all the items from the `algorithm` list:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`machine_learning`中创建一个新项，键为`algorithm`，值为`algorithm`列表中的所有项：
- en: '[PRE29]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Display the content of `machine_learning` using the `print()` function.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`print()`函数显示`machine_learning`的内容。
- en: '[PRE30]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'You should get the following output:'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![Figure 1.24: Output of ''machine_learning'''
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 1.24：''machine_learning'' 的输出'
- en: '](img/B15019_01_24.jpg)'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_01_24.jpg)'
- en: 'Figure 1.24: Output of ''machine_learning'''
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 1.24：'machine_learning' 的输出
- en: From the preceding output, we notice that we have created a dictionary from
    the `algorithm` list.
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从前面的输出中，我们注意到已经从`algorithm`列表创建了一个字典。
- en: 'Create a new item in `machine_learning` with the key as `learning` and the
    value as all the items from the `learning` list:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`machine_learning`中创建一个新项，键为`learning`，值为`learning`列表中的所有项：
- en: '[PRE31]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Now, create a new item in `machine_learning` with the key as `algorithm_type`
    and the value as all the items from the algorithm_type list:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`machine_learning`中创建一个新项，键为`algorithm_type`，值为`algorithm_type`列表中的所有项：
- en: '[PRE32]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Display the content of `machine_learning` using the `print()` function.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`print()`函数显示`machine_learning`的内容。
- en: '[PRE33]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'You should get the following output:'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![Figure 1.25: Output of ''machine_learning'''
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 1.25：''machine_learning'' 的输出'
- en: '](img/B15019_01_25.jpg)'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_01_25.jpg)'
- en: 'Figure 1.25: Output of ''machine_learning'''
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 1.25：'machine_learning' 的输出
- en: 'Remove the `a3c` item from the `algorithm` key using the `.remove()` method:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`.remove()`方法从`algorithm`键中移除`a3c`项：
- en: '[PRE34]'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Display the content of the `algorithm` item from the `machine_learning` dictionary
    using the `print()` function:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`print()`函数显示来自`machine_learning`字典中的`algorithm`项：
- en: '[PRE35]'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'You should get the following output:'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![Figure 1.26: Output of ''algorithm'' from ''machine_learning'''
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 1.26：来自''machine_learning''的''algorithm''输出'
- en: '](img/B15019_01_26.jpg)'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_01_26.jpg)'
- en: 'Figure 1.26: Output of ''algorithm'' from ''machine_learning'''
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 1.26：来自'machine_learning'的'algorithm'输出
- en: 'Remove the `Reinforcement` item from the `learning` key using the `.remove()`
    method:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `.remove()` 方法从 `learning` 键中移除 `Reinforcement` 项：
- en: '[PRE36]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Remove the `Game AI` item from the `algorithm_type` key using the `.remove()`
    method:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `.remove()` 方法从 `algorithm_type` 键中移除 `Game AI` 项：
- en: '[PRE37]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Display the content of `machine_learning` using the `print()` function:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `print()` 函数显示 `machine_learning` 的内容：
- en: '[PRE38]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'You should get the following output:'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![Figure 1.27: Output of ''machine_learning'''
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 1.27：''machine_learning'' 的输出](img/B15019_01_27.jpg)'
- en: '](img/B15019_01_27.jpg)'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_01_27.jpg)'
- en: 'Figure 1.27: Output of ''machine_learning'''
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.27：'machine_learning' 的输出
- en: You have successfully created a dictionary containing the machine learning algorithms
    that you will come across in this book. You learned how to create and manipulate
    Python lists and dictionaries.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经成功创建了一个包含本书中将遇到的机器学习算法的字典。你学习了如何创建和操作 Python 列表和字典。
- en: Note
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: To access the source code for this specific section, please refer to [https://packt.live/315EmRP](https://packt.live/315EmRP).
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此特定部分的源代码，请参阅 [https://packt.live/315EmRP](https://packt.live/315EmRP)。
- en: You can also run this example online at [https://packt.live/3ay1tYg](https://packt.live/3ay1tYg).
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在线运行这个示例，网址是 [https://packt.live/3ay1tYg](https://packt.live/3ay1tYg)。
- en: 'In the next section, you will learn more about the two main Python packages
    used for data science:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，你将学习更多关于数据科学中常用的两个 Python 包：
- en: '`pandas`'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pandas`'
- en: '`scikit-learn`'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scikit-learn`'
- en: Python for Data Science
  id: totrans-262
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 数据科学
- en: Python offers an incredible number of packages for data science. A package is
    a collection of prebuilt functions and classes shared publicly by its author(s).
    These packages extend the core functionalities of Python. The Python Package Index
    ([https://packt.live/37iTRXc](https://packt.live/37iTRXc)) lists all the packages
    available in Python.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: Python 为数据科学提供了大量的包。包是由作者（们）公开共享的一组预构建的函数和类。这些包扩展了 Python 的核心功能。Python 包索引（[https://packt.live/37iTRXc](https://packt.live/37iTRXc)）列出了
    Python 中所有可用的包。
- en: 'In this section, we will present to you two of the most popular ones: `pandas`
    and `scikit-learn`.'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将向您展示两种最流行的 Python 包：`pandas` 和 `scikit-learn`。
- en: The pandas Package
  id: totrans-265
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: pandas 包
- en: The pandas package provides an incredible amount of APIs for manipulating data
    structures. The two main data structures defined in the `pandas` package are `DataFrame`
    and `Series`.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 包提供了大量用于操作数据结构的 API。`pandas` 包中定义的两种主要数据结构是 `DataFrame` 和 `Series`。
- en: DataFrame and Series
  id: totrans-267
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DataFrame 和 Series
- en: 'A `DataFrame` is a tabular data structure that is represented as a two-dimensional
    table. It is composed of rows, columns, indexes, and cells. It is very similar
    to a sheet in Excel or a table in a database:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '`DataFrame` 是一种表格数据结构，表现为二维表格。它由行、列、索引和单元格组成。它非常类似于 Excel 表格或数据库中的表格：'
- en: '![Figure 1.28: Components of a DataFrame'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.28：DataFrame 的组成部分](img/B15019_01_28.jpg)'
- en: '](img/B15019_01_28.jpg)'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15019_01_28.jpg)'
- en: 'Figure 1.28: Components of a DataFrame'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.28：DataFrame 的组成部分
- en: 'In *Figure 1.28*, there are three different columns: `algorithm`, `learning`,
    and `type`. Each of these columns (also called variables) contains a specific
    type of information. For instance, the `algorithm` variable lists the names of
    different machine learning algorithms.'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *图 1.28* 中，有三列：`algorithm`、`learning` 和 `type`。每列（也称为变量）包含特定类型的信息。例如，`algorithm`
    变量列出了不同机器学习算法的名称。
- en: A row stores the information related to a record (also called an observation).
    For instance, row number `2` (index number `2`) refers to the `RandomForest` record
    and all its attributes are stored in the different columns.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 一行存储与一条记录（也称为观察）相关的信息。例如，第 `2` 行（索引号 `2`）表示 `RandomForest` 记录，并且所有与该记录相关的属性都存储在不同的列中。
- en: Finally, a cell is the value of a given row and column. For example, `Clustering`
    is the value of the cell of the row index `2` and the `type` column. You can see
    it as the intersection of a specified row and column.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，一个单元格是给定行和列的值。例如，`Clustering` 是第 `2` 行和 `type` 列交叉处的单元格值。你可以将其看作指定行和列的交集。
- en: So, a DataFrame is a structured representation of some data organized by rows
    and columns. A row represents an observation and each column contains the value
    of its attributes. This is the most common data structure used in data science.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，DataFrame 是一种结构化的数据表示形式，按行和列组织数据。一行代表一个观察，每一列包含该观察的属性值。这是数据科学中最常用的数据结构。
- en: In pandas, a DataFrame is represented by the `DataFrame` class. A `pandas` DataFrame
    is composed of `pandas` Series, which are 1-dimensional arrays. A `pandas` Series
    is basically a single column in a DataFrame.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 在 pandas 中，DataFrame 由 `DataFrame` 类表示。一个 `pandas` DataFrame 是由 `pandas` Series
    组成的，而 `pandas` Series 是一维数组。一个 `pandas` Series 本质上是 DataFrame 中的一列。
- en: 'Data is usually classified into two groups: *structured* and *unstructured*.
    Think of structured data as database tables or Excel spreadsheets where each column
    and row has a predefined structure. For example, in a table or spreadsheet that
    lists all the employees of a company, every record will follow the same pattern,
    such as the first column containing the date of birth, the second and third ones
    being for first and last names, and so on.'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 数据通常分为两类：*结构化*数据和*非结构化*数据。把结构化数据看作数据库表格或 Excel 表格，其中每一列和每一行都有预定义的结构。例如，在列出公司所有员工的表格或电子表格中，每一条记录都会遵循相同的模式，比如第一列是出生日期，第二列和第三列是名字和姓氏，依此类推。
- en: 'On the other hand, unstructured data is not organized with predefined and static
    patterns. Text and images are good examples of unstructured data. If you read
    a book and look at each sentence, it will not be possible for you to say that
    the second word of a sentence is always a verb or a person''s name; it can be
    anything depending on how the author wanted to convey the information they wanted
    to share. Each sentence has its own structure and will be different from the last.
    Similarly, for a group of images, you can''t say that pixels 20 to 30 will always
    represent the eye of a person or the wheel of a car: it will be different for
    each image.'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，非结构化数据并没有预定义的静态模式进行组织。文本和图像是非结构化数据的好例子。如果你读一本书并查看每个句子，你无法确定句子的第二个词总是动词或人名，它可以是任何东西，这取决于作者如何传达他们想要分享的信息。每个句子都有自己的结构，并且与上一个句子不同。同样，对于一组图像，你无法说像素
    20 到 30 总是代表一个人的眼睛或一辆车的车轮：每张图像都不同。
- en: 'Data can come from different data sources: there could be flat files, data
    storage, or Application Programming Interface (API) feeds, for example. In this
    book, we will work with flat files such as CSVs, Excel spreadsheets, or JSON.
    All these types of files are storing information with their own format and structure.'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 数据可以来自不同的数据源：例如，可能是平面文件、数据存储或应用程序接口（API）馈送。在本书中，我们将处理如 CSV、Excel 电子表格或 JSON
    这样的平面文件。所有这些文件类型都有各自的格式和结构来存储信息。
- en: We'll have a look at the CSV file first.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 我们先来看一下 CSV 文件。
- en: CSV Files
  id: totrans-281
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CSV 文件
- en: 'CSV files use the comma character—`,`—to separate columns and newlines for
    a new row. The previous example of a DataFrame would look like this in a CSV file:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: CSV 文件使用逗号字符—`,`—来分隔列，并通过换行符来表示新的一行。前面提到的 DataFrame 示例在 CSV 文件中会像这样：
- en: '[PRE39]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'In Python, you need to first import the packages you require before being able
    to use them. To do so, you will have to use the `import` command. You can create
    an alias of each imported package using the `as` keyword. It is quite common to
    import the `pandas` package with the alias `pd`:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，使用某个包之前，你需要先导入该包。为此，你需要使用 `import` 命令。你还可以使用 `as` 关键字为每个导入的包创建别名。通常会将
    `pandas` 包导入并使用别名 `pd`：
- en: '[PRE40]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '`pandas` provides a `.read_csv()` method to easily load a CSV file directly
    into a DataFrame. You just need to provide the path or the URL to the CSV file,
    as shown below.'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '`pandas` 提供了一个 `.read_csv()` 方法，可以轻松地将 CSV 文件直接加载到 DataFrame 中。你只需要提供 CSV 文件的路径或
    URL，如下所示。'
- en: Note
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Watch out for the slashes in the string below. Remember that the backslashes
    ( `\` ) are used to split the code across multiple lines, while the forward slashes
    ( `/` ) are part of the URL.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意下面字符串中的斜杠。记住，反斜杠（`\`）用于将代码分割到多行，而正斜杠（`/`）是 URL 的一部分。
- en: '[PRE41]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'You should get the following output:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![Figure 1.29: DataFrame after loading a CSV file'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.29：加载 CSV 文件后的 DataFrame](img/B15019_01_29.jpg)'
- en: '](img/B15019_01_29.jpg)'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15019_01_29.jpg)'
- en: 'Figure 1.29: DataFrame after loading a CSV file'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.29：加载 CSV 文件后的 DataFrame
- en: Note
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'In this book, we will be loading datasets stored in the Packt GitHub repository:
    [https://packt.live/2ucwsId](https://packt.live/2ucwsId).'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将加载存储在 Packt GitHub 仓库中的数据集：[https://packt.live/2ucwsId](https://packt.live/2ucwsId)。
- en: GitHub wraps stored data into its own specific format. To load the original
    version of a dataset, you will need to load the raw version of it by clicking
    on the **Raw** button and copying the URL provided on your browser.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub将存储的数据包装成其特定格式。要加载数据集的原始版本，你需要通过点击**Raw**按钮并复制浏览器中提供的URL来加载其原始版本。
- en: 'Have a look at *Figure 1.30*:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 看看*图1.30*：
- en: '![Figure 1.30: Getting the URL of a raw dataset on GitHub'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.30：获取GitHub上原始数据集的URL'
- en: '](img/B15019_01_30.jpg)'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15019_01_30.jpg)'
- en: 'Figure 1.30: Getting the URL of a raw dataset on GitHub'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.30：获取GitHub上原始数据集的URL
- en: Excel Spreadsheets
  id: totrans-301
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Excel电子表格
- en: 'Excel is a Microsoft tool and is very popular in the industry. It has its own
    internal structure for recording additional information, such as the data type
    of each cell or even Excel formulas. There is a specific method in `pandas` to
    load Excel spreadsheets called `.read_excel()`:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: Excel是微软的一个工具，在业界非常流行。它有自己的内部结构，用于记录附加信息，比如每个单元格的数据类型，甚至是Excel公式。在`pandas`中，有一个特定的方法用于加载Excel电子表格，叫做`.read_excel()`：
- en: '[PRE42]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'You should get the following output:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![Figure 1.31: Dataframe after loading an Excel spreadsheet'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.31：加载Excel电子表格后的数据框'
- en: '](img/B15019_01_31.jpg)'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15019_01_31.jpg)'
- en: 'Figure 1.31: Dataframe after loading an Excel spreadsheet'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.31：加载Excel电子表格后的数据框
- en: JSON
  id: totrans-308
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: JSON
- en: 'JSON is a very popular file format, mainly used for transferring data from
    web APIs. Its structure is very similar to that of a Python dictionary with key-value
    pairs. The example DataFrame we used before would look like this in JSON format:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: JSON是一种非常流行的文件格式，主要用于从Web API传输数据。其结构与Python字典中的键值对非常相似。我们之前使用的示例数据框在JSON格式中将是这样的：
- en: '[PRE43]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'As you may have guessed, there is a `pandas` method for reading JSON data as
    well, and it is called `.read_json()`:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能猜到的，`pandas`也有一个方法用于读取JSON数据，叫做`.read_json()`：
- en: '[PRE44]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'You should get the following output:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![Figure 1.32: Dataframe after loading JSON data'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.32：加载JSON数据后的数据框'
- en: '](img/B15019_01_32.jpg)'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15019_01_32.jpg)'
- en: 'Figure 1.32: Dataframe after loading JSON data'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.32：加载JSON数据后的数据框
- en: '`pandas` provides more methods to load other types of files. The full list
    can be found in the following documentation: [https://packt.live/2FiYB2O](https://packt.live/2FiYB2O).'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '`pandas`还提供了更多方法来加载其他类型的文件。完整的列表可以在以下文档中找到：[https://packt.live/2FiYB2O](https://packt.live/2FiYB2O)。'
- en: pandas is not limited to only loading data into DataFrames; it also provides
    a lot of other APIs for creating, analyzing, or transforming DataFrames. You will
    be introduced to some of its most useful methods in the following chapters.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: pandas不仅限于将数据加载到数据框中；它还提供了许多其他API来创建、分析或转换数据框。接下来的章节将介绍一些最有用的方法。
- en: 'Exercise 1.02: Loading Data of Different Formats into a pandas DataFrame'
  id: totrans-319
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习1.02：将不同格式的数据加载到pandas数据框中
- en: In this exercise, we will practice loading different data formats, such as CSV,
    TSV, and XLSX, into pandas DataFrames. The dataset we will use is the Top 10 Postcodes
    for the First Home Owner Grants dataset (this is a grant provided by the Australian
    government to help first-time real estate buyers). It lists the 10 postcodes (also
    known as zip codes) with the highest number of First Home Owner grants.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将练习加载不同的数据格式，比如CSV、TSV和XLSX到pandas数据框中。我们将使用的数据集是“首次购房者补助金的前10个邮政编码”数据集（这是澳大利亚政府为帮助首次购房者提供的补助金）。该数据集列出了获得最多首次购房者补助金的10个邮政编码（也称为邮政区号）。
- en: In this dataset, you will find the number of First Home Owner grant applications
    for each postcode and the corresponding suburb.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个数据集中，你将找到每个邮政编码的首次购房者补助金申请数量和相应的郊区。
- en: Note
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This dataset can be found on our GitHub repository at [https://packt.live/2FgAT7d](https://packt.live/2FgAT7d).
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 该数据集可以在我们的GitHub仓库中找到，链接：[https://packt.live/2FgAT7d](https://packt.live/2FgAT7d)。
- en: 'Also, it is publicly available here: [https://packt.live/2ZJBYhi](https://packt.live/2ZJBYhi).'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，它可以在此公开访问：[https://packt.live/2ZJBYhi](https://packt.live/2ZJBYhi)。
- en: 'The following steps will help you complete the exercise:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将帮助你完成这个练习：
- en: Open a new Colab notebook.
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的Colab笔记本。
- en: 'Import the pandas package, as shown in the following code snippet:'
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入pandas包，如下所示的代码片段：
- en: '[PRE45]'
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Create a new variable called `csv_url` containing the URL to the raw CSV file:'
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的变量，命名为`csv_url`，其中包含原始CSV文件的URL：
- en: '[PRE46]'
  id: totrans-330
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Load the CSV file into a DataFrame using the pandas `.read_csv()` method. The
    first row of this CSV file contains the name of the file, which you can see if
    you open the file directly. You will need to exclude this row by using the `skiprows=1`
    parameter. Save the result in a variable called `csv_df` and print it:'
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 pandas 的 `.read_csv()` 方法将 CSV 文件加载到数据框中。该 CSV 文件的第一行包含文件名，如果你直接打开文件，可以看到这一点。你需要通过使用
    `skiprows=1` 参数来排除这一行。将结果保存到名为 `csv_df` 的变量中，并打印出来：
- en: '[PRE47]'
  id: totrans-332
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'You should get the following output:'
  id: totrans-333
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '![Figure 1.33: The DataFrame after loading the CSV file'
  id: totrans-334
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 1.33：加载 CSV 文件后的数据框](img/B15019_01_33.jpg)'
- en: '](img/B15019_01_33.jpg)'
  id: totrans-335
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_01_33.jpg)'
- en: 'Figure 1.33: The DataFrame after loading the CSV file'
  id: totrans-336
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 1.33：加载 CSV 文件后的数据框
- en: 'Create a new variable called `tsv_url` containing the URL to the raw TSV file:'
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `tsv_url` 的新变量，包含原始 TSV 文件的 URL：
- en: '[PRE48]'
  id: totrans-338
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Note
  id: totrans-339
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: A TSV file is similar to a CSV file but instead of using the comma character
    (`,`) as a separator, it uses the tab character (`\t`).
  id: totrans-340
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: TSV 文件类似于 CSV 文件，但它使用制表符（`\t`）作为分隔符，而不是使用逗号字符（`,`）。
- en: 'Load the TSV file into a DataFrame using the pandas .`read_csv()` method and
    specify the `skiprows=1` and `sep=''\t''` parameters. Save the result in a variable
    called `tsv_df` and print it:'
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 pandas 的 `.read_csv()` 方法将 TSV 文件加载到数据框中，并指定 `skiprows=1` 和 `sep='\t'` 参数。将结果保存到名为
    `tsv_df` 的变量中，并打印出来：
- en: '[PRE49]'
  id: totrans-342
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'You should get the following output:'
  id: totrans-343
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '![Figure 1.34: The DataFrame after loading the TSV file'
  id: totrans-344
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 1.34：加载 TSV 文件后的数据框](img/B15019_01_34.jpg)'
- en: '](img/B15019_01_34.jpg)'
  id: totrans-345
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_01_34.jpg)'
- en: 'Figure 1.34: The DataFrame after loading the TSV file'
  id: totrans-346
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 1.34：加载 TSV 文件后的数据框
- en: 'Create a new variable called `xlsx_url` containing the URL to the raw Excel spreadsheet:'
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `xlsx_url` 的新变量，包含原始 Excel 表格的 URL：
- en: '[PRE50]'
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Load the Excel spreadsheet into a DataFrame using the pandas `.read_excel()`
    method. Save the result in a variable called `xlsx_df` and print it:'
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 pandas 的 `.read_excel()` 方法将 Excel 表格加载到数据框中。将结果保存到名为 `xlsx_df` 的变量中，并打印出来：
- en: '[PRE51]'
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'You should get the following output:'
  id: totrans-351
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '![Figure 1.35: Display of the DataFrame after loading the Excel spreadsheet'
  id: totrans-352
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 1.35：加载 Excel 表格后的数据框显示](img/B15019_01_35.jpg)'
- en: '](img/B15019_01_35.jpg)'
  id: totrans-353
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_01_35.jpg)'
- en: 'Figure 1.35: Display of the DataFrame after loading the Excel spreadsheet'
  id: totrans-354
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 1.35：加载 Excel 表格后的数据框显示
- en: By default, `.read_excel()` loads the first sheet of an Excel spreadsheet. In
    this example, the data we're looking for is actually stored in the second sheet.
  id: totrans-355
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认情况下，`.read_excel()` 会加载 Excel 表格的第一个工作表。在这个示例中，我们需要的数据实际上存储在第二个工作表中。
- en: 'Load the Excel spreadsheet into a Dataframe using the pandas `.read_excel()`
    method and specify the `skiprows=1` and `sheet_name=1` parameters. (Note that
    the `sheet_name` parameter is zero-indexed, so `sheet_name=0` returns the first
    sheet, while `sheet_name=1` returns the second sheet.) Save the result in a variable
    called `xlsx_df1` and print it:'
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 pandas 的 `.read_excel()` 方法将 Excel 表格加载到数据框中，并指定 `skiprows=1` 和 `sheet_name=1`
    参数。（请注意，`sheet_name` 参数是零索引的，因此 `sheet_name=0` 返回第一个工作表，而 `sheet_name=1` 返回第二个工作表。）将结果保存到名为
    `xlsx_df1` 的变量中，并打印出来：
- en: '[PRE52]'
  id: totrans-357
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'You should get the following output:'
  id: totrans-358
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '![Figure 1.36: The DataFrame after loading the second sheet of the Excel spreadsheet'
  id: totrans-359
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 1.36：加载 Excel 表格第二个工作表后的数据框](img/B15019_01_36.jpg)'
- en: '](img/B15019_01_36.jpg)'
  id: totrans-360
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_01_36.jpg)'
- en: 'Figure 1.36: The DataFrame after loading the second sheet of the Excel spreadsheet'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.36：加载 Excel 表格第二个工作表后的数据框
- en: Note
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: To access the source code for this specific section, please refer to [https://packt.live/2Yajzuq](https://packt.live/2Yajzuq).
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此特定部分的源代码，请参考 [https://packt.live/2Yajzuq](https://packt.live/2Yajzuq)。
- en: You can also run this example online at [https://packt.live/2Q4dThe](https://packt.live/2Q4dThe).
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在线运行此示例，访问 [https://packt.live/2Q4dThe](https://packt.live/2Q4dThe)。
- en: In this exercise, we learned how to load the Top 10 Postcodes for First Home
    Buyer Grants dataset from different file formats.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 在本练习中，我们学习了如何从不同的文件格式加载首次购房者补贴数据集的前十个邮政编码。
- en: In the next section, we will be introduced to scikit-learn.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将介绍 scikit-learn。
- en: Scikit-Learn
  id: totrans-367
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Scikit-Learn
- en: Scikit-learn (also referred to as `sklearn`) is another extremely popular package
    used by data scientists. The main purpose of `sklearn` is to provide APIs for
    processing data and training machine learning algorithms. But before moving ahead,
    we need to know what a model is.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: Scikit-learn（也称为 `sklearn`）是数据科学家们使用的另一个非常流行的包。`sklearn` 的主要目的是提供用于处理数据和训练机器学习算法的
    API。但在继续之前，我们需要了解什么是模型。
- en: What Is a Model?
  id: totrans-369
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 什么是模型？
- en: A machine learning model learns patterns from data and creates a mathematical
    function to generate predictions. A supervised learning algorithm will try to
    find the relationship between a response variable and the given features.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 一个机器学习模型从数据中学习模式，并创建一个数学函数来生成预测。一个监督学习算法将试图找到响应变量和给定特征之间的关系。
- en: Have a look at the following example.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 请看下面的示例。
- en: 'A mathematical function can be represented as a function, ƒ(), that is applied
    to some input variables, X (which is composed of multiple features), and will
    calculate an output (or prediction), ŷ:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 数学函数可以表示为一个应用于一些输入变量X（由多个特征组成）的函数ƒ()，并计算出一个输出（或预测）ŷ：
- en: '![Figure 1.37: Function f(X)'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.37：函数 f(X)'
- en: '](img/B15019_01_37.jpg)'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15019_01_37.jpg)'
- en: 'Figure 1.37: Function f(X)'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.37：函数 f(X)
- en: 'The function, ƒ(), can be quite complex and have different numbers of parameters.
    If we take a linear regression (this will be presented in more detail in *Chapter
    2*, *Regression*) as an example, the model parameters can be represented as W=(
    w1, w2, ... , wn). So, the function we saw earlier will become as follows:'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 函数ƒ()可以非常复杂，具有不同数量的参数。如果我们以线性回归为例（将在*第2章* *回归*中详细介绍），模型参数可以表示为W=( w1, w2, ...
    , wn)。因此，我们之前看到的函数将变成如下：
- en: '![Figure 1.38: Function for linear regression'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.38：线性回归的函数'
- en: '](img/B15019_01_38.jpg)'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15019_01_38.jpg)'
- en: 'Figure 1.38: Function for linear regression'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.38：线性回归的函数
- en: A machine learning algorithm will receive some examples of input *X* with the
    relevant output, *y*, and its goal will be to find the values of ( w1, w2, ...
    , wn) that will minimize the difference between its prediction, *ŷ* and the true
    output, *y*.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 一个机器学习算法将接收一些输入*X*及相关输出*y*的示例，它的目标是找到（w1，w2，...，wn）的值，以最小化其预测*ŷ*与真实输出*y*之间的差异。
- en: 'The previous formulas can be a bit intimidating, but this is actually quite
    simple. Let''s say we have a dataset composed of only one target variable y and
    one feature X, such as the following one:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的公式可能有些令人畏惧，但其实这非常简单。假设我们有一个仅包含一个目标变量y和一个特征X的数据集，比如下面这个数据集：
- en: '![Figure 1.39: Example of a dataset with one target variable and one feature'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.39：具有一个目标变量和一个特征的数据集示例'
- en: '](img/B15019_01_39.jpg)'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15019_01_39.jpg)'
- en: 'Figure 1.39: Example of a dataset with one target variable and one feature'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.39：具有一个目标变量和一个特征的数据集示例
- en: 'If we fit a linear regression on this dataset, the algorithm will try to find
    a solution for the following equation:'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在这个数据集上拟合线性回归，算法将尝试为以下方程找到一个解：
- en: '![Figure 1.40: Function f(x) for linear regression fitting on a dataset'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.40：线性回归拟合数据集的函数 f(x)'
- en: '](img/B15019_01_40.jpg)'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15019_01_40.jpg)'
- en: 'Figure 1.40: Function f(x) for linear regression fitting on a dataset'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.40：线性回归拟合数据集的函数 f(x)
- en: 'o, it just needs to find the values of the `w0` and `w`1 parameters that will
    approximate the data as closely as possible. In this case, the algorithm may come
    up with `wo = 0` and `w1 = 10`. So, the function the model learns will be as follows:'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，它只需要找到`w0`和`w1`参数的值，使得模型尽可能地拟合数据。在这个例子中，算法可能得出`wo = 0`和`w1 = 10`。因此，模型学习到的函数将如下所示：
- en: '![Figure 1.41: Function f(x) using estimated values'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.41：使用估算值的函数 f(x)'
- en: '](img/B15019_01_41.jpg)'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15019_01_41.jpg)'
- en: 'Figure 1.41: Function f(x) using estimated values'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.41：使用估算值的函数 f(x)
- en: 'We can visualize this on the same graph as for the data:'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在与数据相同的图表上可视化这一点：
- en: '![Figure 1.42: Fitted linear model on the example dataset'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.42：在示例数据集上拟合的线性模型'
- en: '](img/B15019_01_42.jpg)'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15019_01_42.jpg)'
- en: 'Figure 1.42: Fitted linear model on the example dataset'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.42：在示例数据集上拟合的线性模型
- en: 'We can see that the fitted model (the orange line) is approximating the original
    data quite closely. So, if we predict the outcome for a new data point, it will
    be very close to the true value. For example, if we take a point that is close
    to 5 (let''s say its values are `x = 5.1` and `y = 48`), the model will predict
    the following:'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，拟合的模型（橙色线条）与原始数据非常接近。因此，如果我们预测一个新的数据点的结果，它将非常接近真实值。例如，如果我们取一个接近5的点（假设它的值是`x
    = 5.1`和`y = 48`），模型将预测如下：
- en: '![Figure 1.43: Model prediction'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.43：模型预测'
- en: '](img/B15019_01_43.jpg)'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15019_01_43.jpg)'
- en: 'Figure 1.43: Model prediction'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.43：模型预测
- en: This value is actually very close to the ground truth, 48 (red circle). So,
    our model prediction is quite accurate.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 这个值实际上非常接近真实值48（红色圆圈）。因此，我们的模型预测是非常准确的。
- en: 'This is it. It is quite simple, right? In general, a dataset will have more
    than one feature, but the logic will be the same: the trained model will try to
    find the best parameters for each variable to get predictions as close as possible
    to the true values.'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。很简单，对吧？一般来说，一个数据集会有多个特征，但逻辑是一样的：训练好的模型将尝试为每个变量找到最佳参数，以使预测结果尽可能接近真实值。
- en: We just saw an example of linear models, but there are actually other types
    of machine learning algorithms, such as tree-based or neural networks, that can
    find more complex patterns from data.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚看了一个线性模型的示例，但实际上还有其他类型的机器学习算法，比如基于树的算法或神经网络，它们可以从数据中发现更复杂的模式。
- en: Model Hyperparameters
  id: totrans-404
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模型超参数
- en: On top of the model parameters that are learned automatically by the algorithm
    (now you understand why we call it machine learning), there is also another type
    of parameter called the hyperparameter. Hyperparameters cannot be learned by the
    model. They are set by data scientists in order to define some specific conditions
    for the algorithm learning process. These hyperparameters are different for each
    family of algorithms and they can, for instance, help fast-track the learning
    process or limit the risk of overfitting. In this book, you will learn how to
    tune some of these machine learning hyperparameters.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 除了由算法自动学习的模型参数（现在你明白我们为什么称之为机器学习了），还有另一种参数叫做超参数。超参数不能被模型学习，它们是由数据科学家设置的，用于定义算法学习过程中的一些特定条件。这些超参数对于每种算法族都是不同的，它们可以例如帮助加速学习过程或限制过拟合的风险。在本书中，你将学习如何调整一些机器学习超参数。
- en: The sklearn API
  id: totrans-406
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sklearn API
- en: As mentioned before, the scikit-learn (or `sklearn`) package has implemented
    an incredible amount of machine learning algorithms, such as logistic regression,
    k-nearest neighbors, k-means, and random forest.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，scikit-learn（或`sklearn`）包实现了大量的机器学习算法，如逻辑回归、k最近邻、k均值和随机森林。
- en: Note
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Do not worry about these terms—you are not expected to know what these algorithms
    involve just yet. You will see a simple random forest example in this chapter,
    but all of these algorithms will be explained in detail in later chapters of the
    book.
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 不必担心这些术语——你不需要立即了解这些算法的具体内容。在本章中，你将看到一个简单的随机森林示例，但所有这些算法将在本书后续章节中详细讲解。
- en: '`sklearn` groups algorithms by family. For instance, `RandomForest` and `GradientBoosting`
    are part of the `ensemble` module. In order to make use of an algorithm, you will
    need to import it first like this:'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: '`sklearn`按算法家族进行分组。例如，`RandomForest`和`GradientBoosting`属于`ensemble`模块。为了使用某个算法，你需要先像这样导入它：'
- en: '[PRE53]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Another reason why `sklearn` is so popular is that all the algorithms follow
    the exact same API structure. So, once you have learned how to train one algorithm,
    it is extremely easy to train another one with very minimal code changes. With
    `sklearn`, there are four main steps to train a machine learning model:'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: '`sklearn`之所以如此流行的另一个原因是，所有算法都遵循相同的API结构。因此，一旦你学会了如何训练一个算法，训练另一个算法就变得极其容易，几乎不需要改动代码。使用`sklearn`，训练机器学习模型有四个主要步骤：'
- en: 'Instantiate a model with specified hyperparameters: this will configure the
    machine learning model you want to train.'
  id: totrans-413
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用指定的超参数实例化模型：这将配置你想要训练的机器学习模型。
- en: 'Train the model with training data: during this step, the model will learn
    the best parameters to get predictions as close as possible to the actual values
    of the target.'
  id: totrans-414
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用训练数据训练模型：在这一步骤中，模型将学习最佳参数，以便使预测结果尽可能接近目标的实际值。
- en: 'Predict the outcome from input data: using the learned parameter, the model
    will predict the outcome for new data.'
  id: totrans-415
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从输入数据预测结果：利用学习到的参数，模型将为新数据预测结果。
- en: 'Assess the performance of the model predictions: for checking whether the model
    learned the right patterns to get accurate predictions.'
  id: totrans-416
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 评估模型预测的表现：用于检查模型是否学习到正确的模式以获得准确的预测结果。
- en: Note
  id: totrans-417
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: In a real project, there might be more steps depending on the situation, but
    for simplicity, we will stick with these four for now. You will learn the remaining
    ones in the following chapters.
  id: totrans-418
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在实际项目中，根据具体情况可能会有更多的步骤，但为了简便起见，我们暂时只讨论这四个步骤。你将在接下来的章节中学习其余的步骤。
- en: As mentioned before, each algorithm will have its own specific hyperparameters
    that can be tuned. To instantiate a model, you just need to create a new variable
    from the class you imported previously and specify the values of the hyperparameters.
    If you leave the hyperparameters blank, the model will use the default values
    specified by `sklearn`.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，每个算法都会有自己特定的超参数，可以调整。要实例化模型，你只需要从之前导入的类创建一个新变量，并指定超参数的值。如果你不指定超参数的值，模型将使用`sklearn`指定的默认值。
- en: 'It is recommended to at least set the `random_state` hyperparameter in order
    to get reproducible results every time that you have to run the same code:'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 建议至少设置`random_state`超参数，以便每次运行相同代码时获得可重复的结果：
- en: '[PRE54]'
  id: totrans-421
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The second step is to train the model with some data. In this example, we will
    use a simple dataset that classifies 178 instances of Italian wines into 3 categories
    based on 13 features. This dataset is part of the few examples that `sklearn`
    provides within its API. We need to load the data first:'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 第二步是使用一些数据来训练模型。在这个例子中，我们将使用一个简单的数据集，该数据集基于13个特征将178个意大利葡萄酒实例分类为3个类别。这个数据集是`sklearn`在其API中提供的几个示例之一。我们需要先加载数据：
- en: '[PRE55]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Then using the `.fit()` method to train the model, you will provide the features
    and the target variable as input:'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用`.fit()`方法训练模型，你需要提供特征和目标变量作为输入：
- en: '[PRE56]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'You should get the following output:'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![Figure 1.44: Logs of the trained Random Forest model'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.44: 训练好的随机森林模型的日志](img/B15019_01_44.jpg)'
- en: '](img/B15019_01_44.jpg)'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15019_01_44.jpg)'
- en: 'Figure 1.44: Logs of the trained Random Forest model'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: '图 1.44: 训练好的随机森林模型的日志'
- en: In the preceding output, we can see a Random Forest model with the default hyperparameters.
    You will be introduced to some of them in *Chapter 4*, *Multiclass Classification
    with RandomForest*.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的输出中，我们可以看到一个具有默认超参数的随机森林模型。你将在*第4章*，*使用随机森林进行多类别分类*中了解到其中的一些内容。
- en: 'Once trained, we can use the `.predict()` method to predict the target for
    one or more observations. Here we will use the same data as for the training step:'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 训练完成后，我们可以使用`.predict()`方法来预测一个或多个观察结果的目标值。在这里，我们将使用与训练步骤相同的数据：
- en: '[PRE57]'
  id: totrans-432
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'You should get the following output:'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![Figure 1.45: Predictions of the trained Random Forest model'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.45: 训练好的随机森林模型的预测结果](img/B15019_01_45.jpg)'
- en: '](img/B15019_01_45.jpg)'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15019_01_45.jpg)'
- en: 'Figure 1.45: Predictions of the trained Random Forest model'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: '图 1.45: 训练好的随机森林模型的预测结果'
- en: From the preceding output, you can see that the 178 different wines in the dataset
    have been classified into one of the three different wine categories. The first
    lot of wines have been classified as being in category 0, the second lot are category
    1, and the last lot are category 2\. At this point, we do not know what classes
    0, 1, or 2 represent (in the context of the "type" of wine in each category),
    but finding this out would form part of the larger data science project.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的输出中可以看到，数据集中178种不同的葡萄酒已经被分类为三种不同的葡萄酒类别。第一批葡萄酒被分类为类别0，第二批是类别1，最后一批是类别2。此时，我们不知道类别0、1或2代表什么（在每个类别的“葡萄酒类型”上下文中），但找出这一点将构成更大数据科学项目的一部分。
- en: 'Finally, we want to assess the model''s performance by comparing its predictions
    to the actual values of the target variable. There are a lot of different metrics
    that can be used for assessing model performance, and you will learn more about
    them later in this book. For now, though, we will just use a metric called **accuracy**.
    This metric calculates the ratio of correct predictions to the total number of
    observations:'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们希望通过将模型的预测与目标变量的实际值进行比较，来评估模型的性能。评估模型性能可以使用很多不同的指标，你将在本书的后面了解更多内容。不过，目前我们将使用一个叫做**准确率**的指标。该指标计算正确预测的比例与观察总数的比值：
- en: '[PRE58]'
  id: totrans-439
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: You should get the following output
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下输出
- en: '![Figure 1.46: Accuracy of the trained Random Forest model'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.46: 训练好的随机森林模型的准确性](img/B15019_01_46.jpg)'
- en: '](img/B15019_01_46.jpg)'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15019_01_46.jpg)'
- en: 'Figure 1.46: Accuracy of the trained Random Forest model'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: '图 1.46: 训练好的随机森林模型的准确性'
- en: In this example, the Random Forest model learned to predict correctly all the
    observations from this dataset; it achieves an accuracy score of `1` (that is,
    100% of the predictions matched the actual true values).
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，随机森林模型学会了正确预测该数据集中的所有观察结果；它达到了`1`的准确率（即100%的预测与实际真实值匹配）。
- en: It's as simple as that! This may be too good to be true. In the following chapters,
    you will learn how to check whether the trained models are able to accurately
    predict unseen or future data points or if they have only learned the specific
    patterns of this input data (also called overfitting).
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 就这么简单！这可能看起来太完美了。接下来的章节中，你将学习如何检查训练的模型是否能准确预测未见过或未来的数据点，或者它们是否仅仅学习了特定输入数据的模式（这也叫过拟合）。
- en: 'Exercise 1.03: Predicting Breast Cancer from a Dataset Using sklearn'
  id: totrans-446
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 1.03：使用sklearn从数据集中预测乳腺癌
- en: In this exercise, we will build a machine learning classifier using `RandomForest`
    from `sklearn` to predict whether the breast cancer of a patient is malignant
    (harmful) or benign (not harmful).
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将使用`sklearn`中的`RandomForest`构建一个机器学习分类器，预测患者的乳腺癌是恶性（有害）还是良性（无害）。
- en: The dataset we will use is the Breast Cancer Wisconsin (Diagnostic) dataset,
    which is available directly from the `sklearn` package at [https://packt.live/2FcOTim](https://packt.live/2FcOTim).
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用的数据集是乳腺癌威斯康星（诊断）数据集，可以直接从`sklearn`包中获取，网址：[https://packt.live/2FcOTim](https://packt.live/2FcOTim)。
- en: 'The following steps will help you complete the exercise:'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将帮助你完成练习：
- en: Open a new Colab notebook.
  id: totrans-450
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的Colab笔记本。
- en: 'Import the `load_breast_cancer` function from `sklearn.datasets`:'
  id: totrans-451
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`sklearn.datasets`导入`load_breast_cancer`函数：
- en: '[PRE59]'
  id: totrans-452
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Load the dataset from the `load_breast_cancer` function with the `return_X_y=True`
    parameter to return the features and response variable only:'
  id: totrans-453
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`load_breast_cancer`函数并设置`return_X_y=True`参数来加载数据集，仅返回特征和响应变量：
- en: '[PRE60]'
  id: totrans-454
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Print the variable features:'
  id: totrans-455
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印`features`变量：
- en: '[PRE61]'
  id: totrans-456
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'You should get the following output:'
  id: totrans-457
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![Figure 1.47: Output of the variable features'
  id: totrans-458
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 1.47：特征变量的输出'
- en: '](img/B15019_01_47.jpg)'
  id: totrans-459
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_01_47.jpg)'
- en: 'Figure 1.47: Output of the variable features'
  id: totrans-460
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 1.47：特征变量的输出
- en: The preceding output shows the values of the features. (You can learn more about
    the features from the link given previously.)
  id: totrans-461
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上面的输出显示了特征的值。（你可以从之前提供的链接中了解更多关于特征的信息。）
- en: 'Print the `target` variable:'
  id: totrans-462
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印`target`变量：
- en: '[PRE62]'
  id: totrans-463
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'You should get the following output:'
  id: totrans-464
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![Figure 1.48: Output of the variable target'
  id: totrans-465
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 1.48：目标变量的输出'
- en: '](img/B15019_01_48.jpg)'
  id: totrans-466
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_01_48.jpg)'
- en: 'Figure 1.48: Output of the variable target'
  id: totrans-467
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 1.48：目标变量的输出
- en: The preceding output shows the values of the target variable. There are two
    classes shown for each instance in the dataset. These classes are `0` and `1`,
    representing whether the cancer is malignant or benign.
  id: totrans-468
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上面的输出显示了目标变量的值。数据集中每个实例有两个类别，这两个类别是`0`和`1`，表示癌症是恶性还是良性。
- en: 'Import the `RandomForestClassifier` class from `sklearn.ensemble`:'
  id: totrans-469
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`sklearn.ensemble`导入`RandomForestClassifier`类：
- en: '[PRE63]'
  id: totrans-470
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Create a new variable called `seed`, which will take the value `888` (chosen arbitrarily):'
  id: totrans-471
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`seed`的新变量，赋值为`888`（任意选择）：
- en: '[PRE64]'
  id: totrans-472
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Instantiate `RandomForestClassifier` with the `random_state=seed` parameter
    and save it into a variable called `rf_model`:'
  id: totrans-473
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`random_state=seed`参数实例化`RandomForestClassifier`，并将其保存到名为`rf_model`的变量中：
- en: '[PRE65]'
  id: totrans-474
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Train the model with the `.fit()` method with `features` and `target` as parameters:'
  id: totrans-475
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`.fit()`方法训练模型，并将`features`和`target`作为参数：
- en: '[PRE66]'
  id: totrans-476
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'You should get the following output:'
  id: totrans-477
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![Figure 1.49: Logs of RandomForestClassifier'
  id: totrans-478
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 1.49：随机森林分类器的日志'
- en: '](img/B15019_01_49.jpg)'
  id: totrans-479
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_01_49.jpg)'
- en: 'Figure 1.49: Logs of RandomForestClassifier'
  id: totrans-480
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 1.49：随机森林分类器的日志
- en: 'Make predictions with the trained model using the `.predict()` method and `features`
    as a parameter and save the results into a variable called `preds`:'
  id: totrans-481
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用经过训练的模型，通过`.predict()`方法并将`features`作为参数进行预测，并将结果保存到名为`preds`的变量中：
- en: '[PRE67]'
  id: totrans-482
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Print the `preds` variable:'
  id: totrans-483
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印`preds`变量：
- en: '[PRE68]'
  id: totrans-484
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'You should get the following output:'
  id: totrans-485
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![Figure 1.50: Predictions of the Random Forest model'
  id: totrans-486
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 1.50：随机森林模型的预测结果'
- en: '](img/B15019_01_50.jpg)'
  id: totrans-487
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_01_50.jpg)'
- en: 'Figure 1.50: Predictions of the Random Forest model'
  id: totrans-488
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 1.50：随机森林模型的预测结果
- en: The preceding output shows the predictions for the training set. You can compare
    this with the actual target variable values shown in *Figure 1.48*.
  id: totrans-489
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上面的输出显示了训练集的预测结果。你可以将其与实际的目标变量值（如*图 1.48*所示）进行比较。
- en: 'Import the `accuracy_score` method from `sklearn.metrics`:'
  id: totrans-490
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`sklearn.metrics`导入`accuracy_score`方法：
- en: '[PRE69]'
  id: totrans-491
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Calculate `accuracy_score()` with `target` and `preds` as parameters:'
  id: totrans-492
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`target`和`preds`作为参数计算`accuracy_score()`：
- en: '[PRE70]'
  id: totrans-493
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'You should get the following output:'
  id: totrans-494
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![Figure 1.51: Accuracy of the model'
  id: totrans-495
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 1.51：模型的准确度'
- en: '](img/B15019_01_51.jpg)'
  id: totrans-496
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_01_51.jpg)'
- en: 'Figure 1.51: Accuracy of the model'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.51：模型的准确率
- en: Note
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: To access the source code for this specific section, please refer to [https://packt.live/3aBso5i](https://packt.live/3aBso5i).
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: 若要访问此特定部分的源代码，请参考[https://packt.live/3aBso5i](https://packt.live/3aBso5i)。
- en: You can also run this example online at [https://packt.live/316OiKA](https://packt.live/316OiKA).
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在线运行此示例，网址为[https://packt.live/316OiKA](https://packt.live/316OiKA)。
- en: You just trained a Random Forest model using `sklearn` APIs and achieved an
    accuracy score of `1` in classifying breast cancer observations.
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 你刚刚使用`sklearn` API训练了一个随机森林模型，并成功地将乳腺癌观察数据分类，取得了准确率为`1`的成绩。
- en: 'Activity 1.01: Train a Spam Detector Algorithm'
  id: totrans-502
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动 1.01：训练垃圾邮件检测算法
- en: You are working for an email service provider and have been tasked with training
    an algorithm that recognizes whether an email is spam or not from a given dataset
    and checking its performance.
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: 你正在为一家电子邮件服务提供商工作，任务是训练一个算法，该算法可以从给定的数据集中识别一封邮件是否为垃圾邮件，并检查其性能。
- en: In this dataset, the authors have already created 57 different features based
    on some statistics for relevant keywords in order to classify whether an email
    is spam or not.
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个数据集中，作者们已经根据相关关键词的某些统计数据创建了57个不同的特征，以便分类判断一封邮件是否是垃圾邮件。
- en: Note
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The dataset was originally shared by Mark Hopkins, Erik Reeber, George Forman,
    and Jaap Suermondt: [https://packt.live/35fdUUA](https://packt.live/35fdUUA).'
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 数据集最初由Mark Hopkins、Erik Reeber、George Forman和Jaap Suermondt共享：[https://packt.live/35fdUUA](https://packt.live/35fdUUA)。
- en: You can download it from the Packt GitHub at [https://packt.live/2MPmnrl](https://packt.live/2MPmnrl).
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从Packt GitHub下载，网址为[https://packt.live/2MPmnrl](https://packt.live/2MPmnrl)。
- en: 'The following steps will help you to complete this activity:'
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将帮助你完成此活动：
- en: Import the required libraries.
  id: totrans-509
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入所需的库。
- en: Load the dataset using `.pd.read_csv()`.
  id: totrans-510
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`.pd.read_csv()`加载数据集。
- en: Extract the response variable using .`pop()` from `pandas`. This method will
    extract the column provided as a parameter from the DataFrame. You can then assign
    it a variable name, for example, `target = df.pop('class')`.
  id: totrans-511
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`.pop()`从`pandas`提取响应变量。此方法将从DataFrame中提取作为参数提供的列。然后你可以为其分配一个变量名，例如`target
    = df.pop('class')`。
- en: Instantiate `RandomForestClassifier`.
  id: totrans-512
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实例化`RandomForestClassifier`。
- en: Train a Random Forest model to predict the outcome with .`fit()`.
  id: totrans-513
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 训练一个随机森林模型来预测结果，使用`.fit()`。
- en: Predict the outcomes from the input data using `.predict()`.
  id: totrans-514
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`.predict()`从输入数据中预测结果。
- en: Calculate the accuracy score using `accuracy_score`.
  id: totrans-515
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`accuracy_score`计算准确率。
- en: 'The output will be similar to the following:'
  id: totrans-516
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出将类似于以下内容：
- en: '![Figure 1.52: Accuracy score for spam detector'
  id: totrans-517
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 1.52：垃圾邮件检测器的准确率'
- en: '](img/B15019_01_52.jpg)'
  id: totrans-518
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15019_01_52.jpg)'
- en: 'Figure 1.52: Accuracy score for spam detector'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.52：垃圾邮件检测器的准确率
- en: Note
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The solution to this activity can be found at the following address: [https://packt.live/2GbJloz](https://packt.live/2GbJloz).'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 此活动的解决方案可以在以下地址找到：[https://packt.live/2GbJloz](https://packt.live/2GbJloz)。
- en: Summary
  id: totrans-522
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: This chapter provided you with an overview of what data science is in general.
    We also learned the different types of machine learning algorithms, including
    supervised and unsupervised, as well as regression and classification. We had
    a quick introduction to Python and how to manipulate the main data structures
    (lists and dictionaries) that will be used in this book.
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 本章为你提供了数据科学的总体概述。我们还学习了不同类型的机器学习算法，包括有监督学习和无监督学习，以及回归和分类。我们简要介绍了Python，并讲解了如何操作本书中将使用的主要数据结构（列表和字典）。
- en: Then we walked you through what a DataFrame is and how to create one by loading
    data from different file formats using the famous pandas package. Finally, we
    learned how to use the sklearn package to train a machine learning model and make
    predictions with it.
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: 接着，我们带你了解了DataFrame是什么，以及如何通过使用著名的pandas包从不同文件格式加载数据来创建DataFrame。最后，我们学习了如何使用sklearn包来训练机器学习模型并进行预测。
- en: This was just a quick glimpse into the fascinating world of data science. In
    this book, you will learn much more and discover new techniques for handling data
    science projects from end to end.
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是快速了解数据科学迷人世界的一瞥。在本书中，你将学习更多内容，并发现处理数据科学项目从头到尾的新技术。
- en: The next chapter will show you how to perform a regression task on a real-world dataset.
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将向你展示如何在一个实际数据集上执行回归任务。
