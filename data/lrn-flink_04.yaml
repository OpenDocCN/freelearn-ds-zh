- en: Chapter 4.  Data Processing Using the Table API
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。使用表API进行数据处理
- en: In the earlier chapters, we talked about batch and stream data processing APIs
    provided by Apache Flink. In this chapter, we are going to talk about Table API
    which is a SQL interface for data processing in Flink. Table API operates on a
    table interface which can be created from a dataset and datastream. Once the dataset/datastream
    is registered as a table, we are free to apply relational operations such as aggregations,
    joins, and selections.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章中，我们谈到了Apache Flink提供的批处理和流处理数据处理API。在本章中，我们将讨论Table API，它是Flink中用于数据处理的SQL接口。Table
    API操作的是可以从数据集和数据流中创建的表接口。一旦数据集/数据流被注册为表，我们就可以自由地应用关系操作，如聚合、连接和选择。
- en: Tables can also be queried like regular SQL queries. Once the operations are
    performed, we need to convert the table back to either a dataset or datastream.
    Apache Flink internally uses another open source project called Apache Calcite
    [https://calcite.apache.org/](https://calcite.apache.org/) for optimizing these
    query transformations.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 表也可以像常规SQL查询一样进行查询。一旦操作完成，我们需要将表转换回数据集或数据流。Apache Flink在内部使用另一个名为Apache Calcite的开源项目来优化这些查询转换。
- en: 'In this chapter, we are going to cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Registering tables
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注册表
- en: Accessing the registered table
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问已注册的表
- en: Operators
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作员
- en: Data types
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据类型
- en: SQL
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQL
- en: Now let's get started.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们开始吧。
- en: 'In order to use Table API, the very first thing we need to do is to create
    a Java Maven project and add the following dependency in it:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用Table API，我们需要做的第一件事是创建一个Java Maven项目，并在其中添加以下依赖项：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This dependency will download all the required JARs in your class path. Once
    the download is complete, we are all good to use Table API.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这个依赖项将在你的类路径中下载所有必需的JAR包。下载完成后，我们就可以使用Table API了。
- en: Registering tables
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注册表
- en: In order to operate on datasets/datastreams, first we need to register a table
    in `TableEnvironment`. Once the table is registered with a unique name, it can
    be easily accessed from `TableEnvironment`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为了对数据集/数据流进行操作，首先我们需要在`TableEnvironment`中注册一个表。一旦表以唯一名称注册，就可以轻松地从`TableEnvironment`中访问。
- en: '`TableEnvironment` maintains an internal table catalogue for table registration.
    The following diagram shows the details:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`TableEnvironment`维护一个内部表目录用于表注册。以下图表显示了细节：'
- en: '![Registering tables](img/B05653_image1.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![注册表](img/B05653_image1.jpg)'
- en: It is very important to have unique table names, otherwise you will get an exception.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有唯一的表名非常重要，否则你会得到一个异常。
- en: Registering a dataset
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注册数据集
- en: In order to perform SQL operations on a dataset, we need to register it as a
    table in `BatchTableEnvironment`. We need to define a Java POJO class while registering
    the table.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在数据集上执行SQL操作，我们需要在`BatchTableEnvironment`中将其注册为表。在注册表时，我们需要定义一个Java POJO类。
- en: 'For instance, let''s say we need to register a dataset called Word Count. Each
    record in this table will have word and frequency attributes. The Java POJO for
    the same would look like the following:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们需要注册一个名为Word Count的数据集。这个表中的每条记录都有单词和频率属性。相同的Java POJO如下所示：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The same class in Scala can be defined as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在Scala中，相同的类可以定义如下：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now we can register this table.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以注册这个表了。
- en: 'In Java:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In Scala:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在Scala中：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Please make a note that the name of the dataset table must not match the `^_DataSetTable_[0-9]+`
    pattern as it is reserved for internal memory use.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，数据集表的名称不能匹配`^_DataSetTable_[0-9]+`模式，因为它保留用于内部内存使用。
- en: Registering a datastream
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注册数据流
- en: Similar to a dataset, we can also register a datastream in `StreamTableEnvironment`.
    We need to define a Java POJO class while registering the table.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 与数据集类似，我们也可以在`StreamTableEnvironment`中注册数据流。在注册表时，我们需要定义一个Java POJO类。
- en: 'For instance, let''s say we need to register a datastream called Word Count.
    Each record in this table will have a word and frequency attributes. The Java
    POJO for the same would look as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们需要注册一个名为Word Count的数据流。这个表中的每条记录都有一个单词和频率属性。相同的Java POJO如下所示：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The same class in Scala can be defined as shown here:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在Scala中，相同的类可以定义如下：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now we can register this table.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以注册这个表了。
- en: 'In Java:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中：
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In Scala:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在Scala中：
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Please make a note that the name of the datastream table must not match the
    `^_DataStreamTable_[0-9]+` pattern as it is reserved for internal memory use.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，数据流表的名称不能匹配`^_DataStreamTable_[0-9]+`模式，因为它保留用于内部内存使用。
- en: Registering a table
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注册表
- en: Similar to a dataset and a datastream, we can also register a table originating
    from Table API.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 与数据集和数据流类似，我们也可以注册来自Table API的表。
- en: 'In Java:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中：
- en: '[PRE9]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In Scala:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在Scala中：
- en: '[PRE10]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Registering external table sources
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注册外部表源
- en: Flink allows us to register an external table from sources using a `TableSource`.
    A table source can allow us to access data stored in databases such as MySQL and
    Hbase, in. filesystems such as CSVs, Parquet, and ORC, or you can also read messaging
    systems such as RabbitMQ and Kafka.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Flink允许我们使用`TableSource`从源中注册外部表。表源可以让我们访问存储在数据库中的数据，如MySQL和Hbase，在文件系统中的数据，如CSV、Parquet和ORC，或者还可以读取消息系统，如RabbitMQ和Kafka。
- en: Currently, Flink allows reading data from CSV files using CSV sources and JSON
    data from Kafka topics using Kafka sources.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，Flink允许使用CSV源从CSV文件中读取数据，并使用Kafka源从Kafka主题中读取JSON数据。
- en: CSV table source
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CSV表源
- en: Now let's look at how to directly read data using a CSV source and then register
    the source in a table environment.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如何直接使用CSV源读取数据，然后在表环境中注册源。
- en: 'A CSV source is by default available in the `flink-table` API JAR so there
    is no need to add any other extra Maven dependency. The following dependency is
    good enough:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: CSV源默认在`flink-table`API JAR中可用，因此不需要添加任何其他额外的Maven依赖项。以下依赖项就足够了：
- en: '[PRE11]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The following code snippet shows how to read CSV files and register the table
    source.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段显示了如何读取CSV文件并注册表源。
- en: 'In Java:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中：
- en: '[PRE12]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In Scala:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在Scala中：
- en: '[PRE13]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Kafka JSON table source
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Kafka JSON表源
- en: 'We can also register the Kafka JSON table source in the table environment.
    In order to use this API we need to add the following two dependencies:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在表环境中注册Kafka JSON表源。为了使用此API，我们需要添加以下两个依赖项：
- en: 'The first one is for Table API:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个是Table API：
- en: '[PRE14]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The second dependency would be for the Kafka Flink connector:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个依赖项将是Kafka Flink连接器：
- en: 'If you are using Kafka 0.8, apply:'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您使用Kafka 0.8，请应用：
- en: '[PRE15]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If you are using Kafka 0.9, apply:'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您使用Kafka 0.9，请应用：
- en: '[PRE16]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now we need to write the code as shown in the following code snippet:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要按照以下代码片段中所示编写代码：
- en: '[PRE17]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In the preceding code, we define the Kafka source for Kafka 0.8 and then register
    the source in the table environment.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们为Kafka 0.8定义了Kafka源，然后在表环境中注册了该源。
- en: Accessing the registered table
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问注册的表
- en: 'Once the table is registered, we can access it very easily from `TableEnvironment`
    as shown here:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦表被注册，我们可以从`TableEnvironment`中很容易地访问它，如下所示：
- en: '[PRE18]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The preceding statement scans the table registered with the name `"tableName"`
    in `BatchTableEnvironment`:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的语句扫描了以名称`"tableName"`注册的表在`BatchTableEnvironment`中：
- en: '[PRE19]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The preceding statement ingests the table registered with the name `"tableName"`
    in `StreamTableEnvironment`:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的语句摄取了以名称`"tableName"`注册的表在`StreamTableEnvironment`中：
- en: Operators
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作符
- en: Flink's Table API provides various operators as part of its domain-specific
    language. Most of the operators are available in Java and Scala APIs. Let's look
    at those operators one by one.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Flink的Table API提供了各种操作符作为其特定领域语言的一部分。大多数操作符都在Java和Scala API中可用。让我们逐个查看这些操作符。
- en: The select operator
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: select操作符
- en: The `select` operator is like a SQL select operator which allows you to select
    various attributes/columns in a table.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`select`操作符类似于SQL select操作符，允许您选择表中的各种属性/列。'
- en: 'In Java:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中：
- en: '[PRE20]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'In Scala:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在Scala中：
- en: '[PRE21]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The where operator
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: where操作符
- en: The `where` operator is used for filtering out results.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`where`操作符用于过滤结果。'
- en: 'In Java:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中：
- en: '[PRE22]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'In Scala:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在Scala中：
- en: '[PRE23]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The filter operator
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 过滤器操作符
- en: The `filter` operator can be used as a replacement for the `where` operator.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`filter`操作符可以用作`where`操作符的替代。'
- en: 'In Java:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中：
- en: '[PRE24]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'In Scala:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在Scala中：
- en: '[PRE25]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The as operator
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: as操作符
- en: 'The `as` operator is used for renaming fields:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`as`操作符用于重命名字段：'
- en: 'In Java:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中：
- en: '[PRE26]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'In Scala:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在Scala中：
- en: '[PRE27]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The groupBy operator
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: groupBy操作符
- en: This is similar to SQL `groupBy` operations which aggregate the results according
    to a given attribute.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这类似于SQL `groupBy`操作，根据给定的属性对结果进行聚合。
- en: 'In Java:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中：
- en: '[PRE28]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'In Scala:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在Scala中：
- en: '[PRE29]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The join operator
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: join操作符
- en: The `join` operator is used to join tables. It is compulsory that we specify
    at least one equality joining condition.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`join`操作符用于连接表。我们必须至少指定一个相等的连接条件。'
- en: 'In Java:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中：
- en: '[PRE30]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'In Scala:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在Scala中：
- en: '[PRE31]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The leftOuterJoin operator
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: leftOuterJoin操作符
- en: The `leftOuterJoin` operator joins two tables by getting all the values from
    the table specified on the left side and selects only the matching values from
    the right side table. It is compulsory that we specify at least one equality joining
    condition.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`leftOuterJoin`操作符通过从左侧指定的表中获取所有值并仅从右侧表中选择匹配的值来连接两个表。我们必须至少指定一个相等的连接条件。'
- en: 'In Java:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中：
- en: '[PRE32]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'In Scala:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在Scala中：
- en: '[PRE33]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The rightOuterJoin operator
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: rightOuterJoin操作符
- en: The `rightOuterJoin` operator joins two tables by getting all values from the
    table specified on the right side and selects only matching values from the left
    side table. It is compulsory that we specify at least one equality joining condition.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`rightOuterJoin`操作符通过从右侧指定的表中获取所有值并仅从左侧表中选择匹配的值来连接两个表。我们必须至少指定一个相等的连接条件。'
- en: 'In Java:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中：
- en: '[PRE34]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'In Scala:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在Scala中：
- en: '[PRE35]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The fullOuterJoin operator
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: fullOuterJoin操作符
- en: The `fullOuterJoin` operator joins two tables by getting all the values from
    both tables. It is compulsory that we specify at least one equality joining condition.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`fullOuterJoin`操作符通过从两个表中获取所有值来连接两个表。我们必须至少指定一个相等的连接条件。'
- en: 'In Java:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中：
- en: '[PRE36]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'In Scala:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在Scala中：
- en: '[PRE37]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The union operator
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: union操作符
- en: The `union` operator merges two similar tables. It removes duplicate values
    in the resulting table.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`union`操作符合并两个相似的表。它删除结果表中的重复值。'
- en: 'In Java:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中：
- en: '[PRE38]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'In Scala:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在Scala中：
- en: '[PRE39]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The unionAll operator
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: unionAll操作符
- en: The `unionAll` operator merges two similar tables.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`unionAll`操作符合并两个相似的表。'
- en: 'In Java:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中：
- en: '[PRE40]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'In Scala:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在Scala中：
- en: '[PRE41]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The intersect operator
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: intersect操作符
- en: The `intersect` operator returns matching values from both tables. It makes
    sure that the resultant table does have any duplicates.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '`intersect`操作符返回两个表中匹配的值。它确保结果表没有任何重复项。'
- en: 'In Java:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中：
- en: '[PRE42]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'In Scala:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在Scala中：
- en: '[PRE43]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The intersectAll operator
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: intersectAll操作符
- en: The `intersectAll` operator returns matching values from both tables. The resultant
    table might have duplicate records.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`intersectAll`操作符返回两个表中匹配的值。结果表可能有重复记录。'
- en: 'In Java:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中：
- en: '[PRE44]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'In Scala:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在Scala中：
- en: '[PRE45]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: The minus operator
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: minus操作符
- en: The `minus` operator returns records from the left table which do not exist
    in the right table. It makes sure that the resultant table does not have any duplicates.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '`minus`操作符返回左表中不存在于右表中的记录。它确保结果表没有任何重复项。'
- en: 'In Java:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中：
- en: '[PRE46]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'In Scala:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在Scala中：
- en: '[PRE47]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: The minusAll operator
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: minusAll操作符
- en: The `minusAll` operator returns records from the left table which do not exist
    in the right table. The resultant table might have duplicate records.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '`minusAll`操作符返回左表中不存在于右表中的记录。结果表可能有重复记录。'
- en: 'In Java:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中：
- en: '[PRE48]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'In Scala:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在Scala中：
- en: '[PRE49]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: The distinct operator
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: distinct操作符
- en: The `distinct` operator returns only unique value records from the table.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`distinct`操作符仅从表中返回唯一值记录。'
- en: 'In Java:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中：
- en: '[PRE50]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'In Scala:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在Scala中：
- en: '[PRE51]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: The orderBy operator
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: orderBy操作符
- en: The `orderBy` operator returns records sorted across globally parallel partitions.
    You can choose the order as ascending or descending.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '`orderBy`操作符返回在全局并行分区中排序的记录。您可以选择升序或降序的顺序。'
- en: 'In Java:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中：
- en: '[PRE52]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'In Scala:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在Scala中：
- en: '[PRE53]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: The limit operator
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: limit操作符
- en: The `limit` operator limits records sorted across globally parallel partitions
    from a given offset.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '`limit`操作符限制了从给定偏移量排序的记录在全局并行分区中。'
- en: 'In Java:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中：
- en: '[PRE54]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'In Scala:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在Scala中：
- en: '[PRE55]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Data types
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据类型
- en: 'Table API supports common SQL data types which can be used easily. Internally,
    it uses `TypeInformation` to identify various data types. It currently does not
    support all Flink data types:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 表API支持常见的SQL数据类型，可以轻松使用。在内部，它使用`TypeInformation`来识别各种数据类型。目前它不支持所有Flink数据类型：
- en: '| Table API | SQL | Java type |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '| 表API | SQL | Java类型 |'
- en: '| --- | --- | --- |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `Types.STRING` | `VARCHAR` | `java.lang.String` |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '| `Types.STRING` | `VARCHAR` | `java.lang.String` |'
- en: '| `Types.BOOLEAN` | `BOOLEAN` | `java.lang.Boolean` |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| `Types.BOOLEAN` | `BOOLEAN` | `java.lang.Boolean` |'
- en: '| `Types.BYTE` | `TINYINT` | `java.lang.Byte` |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| `Types.BYTE` | `TINYINT` | `java.lang.Byte` |'
- en: '| `Types.SHORT` | `SMALLINT` | `java.lang.Short` |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| `Types.SHORT` | `SMALLINT` | `java.lang.Short` |'
- en: '| `Types.INT` | `INTEGER`, `INT` | `java.lang.Integer` |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| `Types.INT` | `INTEGER`，`INT` | `java.lang.Integer` |'
- en: '| `Types.LONG` | `BIGINT` | `java.lang.Long` |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
  zh: '| `Types.LONG` | `BIGINT` | `java.lang.Long` |'
- en: '| `Types.FLOAT` | `REAL`, `FLOAT` | `java.lang.Float` |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
  zh: '| `Types.FLOAT` | `REAL`，`FLOAT` | `java.lang.Float` |'
- en: '| `Types.DOUBLE` | `DOUBLE` | `java.lang.Double` |'
  id: totrans-201
  prefs: []
  type: TYPE_TB
  zh: '| `Types.DOUBLE` | `DOUBLE` | `java.lang.Double` |'
- en: '| `Types.DECIMAL` | `DECIMAL` | `java.math.BigDecimal` |'
  id: totrans-202
  prefs: []
  type: TYPE_TB
  zh: '| `Types.DECIMAL` | `DECIMAL` | `java.math.BigDecimal` |'
- en: '| `Types.DATE` | `DATE` | `java.sql.Date` |'
  id: totrans-203
  prefs: []
  type: TYPE_TB
  zh: '| `Types.DATE` | `DATE` | `java.sql.Date` |'
- en: '| `Types.TIME` | `TIME` | `java.sql.Time` |'
  id: totrans-204
  prefs: []
  type: TYPE_TB
  zh: '| `Types.TIME` | `TIME` | `java.sql.Time` |'
- en: '| `Types.TIMESTAMP` | `TIMESTAMP(3)` | `java.sql.Timestamp` |'
  id: totrans-205
  prefs: []
  type: TYPE_TB
  zh: '| `Types.TIMESTAMP` | `TIMESTAMP(3)` | `java.sql.Timestamp` |'
- en: '| `Types.INTERVAL_MONTHS` | INTERVAL YEAR TO MONTH | `java.lang.Integer` |'
  id: totrans-206
  prefs: []
  type: TYPE_TB
  zh: '| `Types.INTERVAL_MONTHS` | INTERVAL YEAR TO MONTH | `java.lang.Integer` |'
- en: '| `Types.INTERVAL_MILLIS` | INTERVAL DAY TO SECOND(3) | `java.lang.Long` |'
  id: totrans-207
  prefs: []
  type: TYPE_TB
  zh: '| `Types.INTERVAL_MILLIS` | INTERVAL DAY TO SECOND(3) | `java.lang.Long` |'
- en: With continuous development and support from the community, more data types
    will be supported soon.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 随着社区的持续发展和支持，将很快支持更多的数据类型。
- en: SQL
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL
- en: Table API also allows us to write free form SQL queries using the `sql()` method.
    The method internally also uses Apache Calcite for SQL syntax verification and
    optimization. It executes the query and returns results in the table format. Later
    the table can be again transformed into either a dataset or datastream or `TableSink`
    for further processing.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 表API还允许我们使用`sql()`方法编写自由形式的SQL查询。该方法在内部还使用Apache Calcite进行SQL语法验证和优化。它执行查询并以表格格式返回结果。稍后，表格可以再次转换为数据集或数据流或`TableSink`以进行进一步处理。
- en: One thing to note here is that, for the SQL method to access the tables, they
    must be registered with `TableEnvironment`.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 这里需要注意的一点是，为了让SQL方法访问表，它们必须在`TableEnvironment`中注册。
- en: More support is being added to the SQL method continuously so if any syntax
    is not supported, it will error out with `TableException`.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: SQL方法不断添加更多支持，因此如果不支持任何语法，将出现`TableException`错误。
- en: Now let's look at how to use the SQL method on a dataset and datastream.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如何在数据集和数据流上使用SQL方法。
- en: SQL on datastream
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据流上的SQL
- en: 'SQL queries can be executed on datastreams registered with `TableEnvironment`
    using the `SELECT STREAM` keyword. Most of the SQL syntax is common between datasets
    and datastreams. To know more about stream syntax, the Apache Calcite''s Streams
    documentation would be helpful. It can be found at: [https://calcite.apache.org/docs/stream.html](https://calcite.apache.org/docs/stream.html).'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`SELECT STREAM`关键字在使用`TableEnvironment`注册的数据流上执行SQL查询。数据集和数据流之间的大部分SQL语法是通用的。要了解更多关于流语法的信息，Apache
    Calcite的Streams文档会很有帮助。可以在以下网址找到：[https://calcite.apache.org/docs/stream.html](https://calcite.apache.org/docs/stream.html)。
- en: Let's say we want to analyze the product schema defined as (`id`, `name`, `stock`).
    The following code needs to be written using the `sql()` method.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要分析定义为（`id`，`name`，`stock`）的产品模式。需要使用`sql()`方法编写以下代码。
- en: 'In Java:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中：
- en: '[PRE56]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'In Scala:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在Scala中：
- en: '[PRE57]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Table API uses a lexical policy similar to Java in order to define queries properly.
    This means the case of the identifiers is preserved and they are matched case
    sensitively. If any of your identifiers contain non-alpha numeric characters then
    you can quote those using back ticks.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 表API使用类似于Java的词法策略来正确定义查询。这意味着标识符的大小写保留，并且它们是区分大小写匹配的。如果您的任何标识符包含非字母数字字符，则可以使用反引号引用它们。
- en: 'For instance, if you want to define a column with the name `''my col''` then
    you need to use back ticks as shown here:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果要定义一个名为`'my col'`的列，则需要使用如下所示的反引号：
- en: '[PRE58]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Supported SQL syntax
  id: totrans-224
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 支持的SQL语法
- en: 'As stated earlier, Flink uses Apache Calcite for validating and optimizing
    SQL queries. With the current version, the following **Backus Naur Form** (**BNF**)
    is supported:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面所述，Flink使用Apache Calcite来验证和优化SQL查询。在当前版本中，支持以下**巴科斯-瑙尔范式**（**BNF**）：
- en: '[PRE59]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Scalar functions
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标量函数
- en: Table API and SQL support various built-in scalar functions. Let's try to understand
    those one by one.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 表API和SQL支持各种内置的标量函数。让我们逐一了解这些。
- en: Scalar functions in the table API
  id: totrans-229
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 表API中的标量函数
- en: 'The following is the list of supported scalar functions in the table API:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是表API中支持的标量函数列表：
- en: '| **Java function** | **Scala function** | **Description** |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
  zh: '| **Java函数** | **Scala函数** | **描述** |'
- en: '| `ANY.isNull` | `ANY.isNull` | Returns `true` if the given expression is null.
    |'
  id: totrans-232
  prefs: []
  type: TYPE_TB
  zh: '| `ANY.isNull` | `ANY.isNull` | 如果给定的表达式为空，则返回`true`。 |'
- en: '| `ANY.isNotNull` | `ANY.isNotNull` | Returns `true` if the given expression
    is not null. |'
  id: totrans-233
  prefs: []
  type: TYPE_TB
  zh: '| `ANY.isNotNull` | `ANY.isNotNull` | 如果给定的表达式不为空，则返回`true`。 |'
- en: '| `BOOLEAN.isTrue` | `BOOLEAN.isTrue` | Returns `true` if the given Boolean
    expression is `true`. `False` otherwise. |'
  id: totrans-234
  prefs: []
  type: TYPE_TB
  zh: '| `BOOLEAN.isTrue` | `BOOLEAN.isTrue` | 如果给定的布尔表达式为`true`，则返回`true`。否则返回`False`。
    |'
- en: '| `BOOLEAN.isFalse` | `BOOLEAN.isFalse` | Returns `true` if given Boolean expression
    is false. `False` otherwise. |'
  id: totrans-235
  prefs: []
  type: TYPE_TB
  zh: '| `BOOLEAN.isFalse` | `BOOLEAN.isFalse` | 如果给定的布尔表达式为false，则返回`true`。否则返回`False`。
    |'
- en: '| `NUMERIC.log10()` | `NUMERIC.log10()` | Calculates the base 10 logarithm
    of given value. |'
  id: totrans-236
  prefs: []
  type: TYPE_TB
  zh: '| `NUMERIC.log10()` | `NUMERIC.log10()` | 计算给定值的以10为底的对数。 |'
- en: '| `NUMERIC.ln()` | `NUMERIC.ln()` | Calculates the natural logarithm of given
    value. |'
  id: totrans-237
  prefs: []
  type: TYPE_TB
  zh: '| `NUMERIC.ln()` | `NUMERIC.ln()` | 计算给定值的自然对数。 |'
- en: '| `NUMERIC.power(NUMERIC)` | `NUMERIC.power(NUMERIC)` | Calculates the given
    number raised to the power of the other value. |'
  id: totrans-238
  prefs: []
  type: TYPE_TB
  zh: '| `NUMERIC.power(NUMERIC)` | `NUMERIC.power(NUMERIC)` | 计算给定数字的另一个值的幂。 |'
- en: '| `NUMERIC.abs()` | `NUMERIC.abs()` | Calculates the absolute value of given
    value. |'
  id: totrans-239
  prefs: []
  type: TYPE_TB
  zh: '| `NUMERIC.abs()` | `NUMERIC.abs()` | 计算给定值的绝对值。 |'
- en: '| `NUMERIC.floor()` | `NUMERIC.floor()` | Calculates the largest integer less
    than or equal to a given number. |'
  id: totrans-240
  prefs: []
  type: TYPE_TB
  zh: '| `NUMERIC.floor()` | `NUMERIC.floor()` | 计算小于或等于给定数字的最大整数。 |'
- en: '| `NUMERIC.ceil()` | `NUMERIC.ceil()` | Calculates the smallest integer greater
    than or equal to a given number. |'
  id: totrans-241
  prefs: []
  type: TYPE_TB
  zh: '| `NUMERIC.ceil()` | `NUMERIC.ceil()` | 计算大于或等于给定数字的最小整数。 |'
- en: '| `STRING.substring(INT, INT)` | `STRING.substring(INT, INT)` | Creates a substring
    of the given string at the given index for the given length |'
  id: totrans-242
  prefs: []
  type: TYPE_TB
  zh: '| `STRING.substring(INT, INT)` | `STRING.substring(INT, INT)` | 在给定索引处创建给定长度的字符串子串
    |'
- en: '| `STRING.substring(INT)` | `STRING.substring(INT)` | Creates a substring of
    the given string beginning at the given index to the end. The start index starts
    at 1 and is inclusive. |'
  id: totrans-243
  prefs: []
  type: TYPE_TB
  zh: '| `STRING.substring(INT)` | `STRING.substring(INT)` | 创建给定字符串的子串，从给定索引开始到末尾。起始索引从1开始，包括在内。
    |'
- en: '| `STRING.trim(LEADING, STRING)` `STRING.trim(TRAILING, STRING)` `STRING.trim(BOTH,
    STRING)` `STRING.trim(BOTH)` `STRING.trim()` | `STRING.trim(leading = true, trailing
    = true, character = " ")` | Removes leading and/or trailing characters from the
    given string. By default, whitespaces at both sides are removed. |'
  id: totrans-244
  prefs: []
  type: TYPE_TB
  zh: '| `STRING.trim(LEADING, STRING)` `STRING.trim(TRAILING, STRING)` `STRING.trim(BOTH,
    STRING)` `STRING.trim(BOTH)` `STRING.trim()` | `STRING.trim(leading = true, trailing
    = true, character = " ")` | 从给定字符串中移除前导和/或尾随字符。默认情况下，两侧的空格将被移除。 |'
- en: '| `STRING.charLength()` | `STRING.charLength()` | Returns the length of a string.
    |'
  id: totrans-245
  prefs: []
  type: TYPE_TB
  zh: '| `STRING.charLength()` | `STRING.charLength()` | 返回字符串的长度。 |'
- en: '| `STRING.upperCase()` | `STRING.upperCase()` | Returns all of the characters
    in a string in upper case using the rules of the default locale. |'
  id: totrans-246
  prefs: []
  type: TYPE_TB
  zh: '| `STRING.upperCase()` | `STRING.upperCase()` | 使用默认区域设置的规则将字符串中的所有字符转换为大写。
    |'
- en: '| `STRING.lowerCase()` | `STRING.lowerCase()` | Returns all of the characters
    in a string in lower case using the rules of the default locale. |'
  id: totrans-247
  prefs: []
  type: TYPE_TB
  zh: '| `STRING.lowerCase()` | `STRING.lowerCase()` | 使用默认区域设置的规则将字符串中的所有字符转换为小写。
    |'
- en: '| `STRING.initCap()` | `STRING.initCap()` | Converts the initial letter of
    each word in a string to uppercase. Assumes a string containing only `[A-Za-z0-9]`,
    everything else is treated as whitespace. |'
  id: totrans-248
  prefs: []
  type: TYPE_TB
  zh: '| `STRING.initCap()` | `STRING.initCap()` | 将字符串中每个单词的初始字母转换为大写。假设字符串只包含`[A-Za-z0-9]`，其他所有内容都视为空格。
    |'
- en: '| `STRING.like(STRING)` | `STRING.like(STRING)` | Returns true, if a string
    matches the specified LIKE pattern. For example, `"Jo_n%"` matches all strings
    that start with `"Jo(arbitrary letter)n"`. |'
  id: totrans-249
  prefs: []
  type: TYPE_TB
  zh: '| `STRING.like(STRING)` | `STRING.like(STRING)` | 如果字符串与指定的LIKE模式匹配，则返回true。例如，`"Jo_n%"`匹配以`"Jo(任意字母)n"`开头的所有字符串。
    |'
- en: '| `STRING.similar(STRING)` | `STRING.similar(STRING)` | Returns `true`, if
    a string matches the specified SQL regex pattern. For example, `"A+"` matches
    all strings that consist of at least one `"A"`. |'
  id: totrans-250
  prefs: []
  type: TYPE_TB
  zh: '| `STRING.similar(STRING)` | `STRING.similar(STRING)` | 如果字符串与指定的SQL正则表达式模式匹配，则返回`true`。例如，`"A+"`匹配至少包含一个`"A"`的所有字符串。
    |'
- en: '| `STRING.toDate()` | `STRING.toDate` | Parses a date string in the form `"yy-mm-dd"`
    to a SQL date. |'
  id: totrans-251
  prefs: []
  type: TYPE_TB
  zh: '| `STRING.toDate()` | `STRING.toDate` | 将形式为`"yy-mm-dd"`的日期字符串解析为SQL日期。 |'
- en: '| `STRING.toTime()` | `STRING.toTime` | Parses a time string in the form `"hh:mm:ss"`
    to a SQL time. |'
  id: totrans-252
  prefs: []
  type: TYPE_TB
  zh: '| `STRING.toTime()` | `STRING.toTime` | 将形式为`"hh:mm:ss"`的时间字符串解析为SQL时间。 |'
- en: '| `STRING.toTimestamp()` | `STRING.toTimestamp` | Parses a timestamp string
    in the form `"yy-mm-dd hh:mm:ss.fff"` to a SQL timestamp. |'
  id: totrans-253
  prefs: []
  type: TYPE_TB
  zh: '| `STRING.toTimestamp()` | `STRING.toTimestamp` | 将形式为`"yy-mm-dd hh:mm:ss.fff"`的时间戳字符串解析为SQL时间戳。
    |'
- en: '| `TEMPORAL.extract(TIMEINTERVALUNIT)` | NA | Extracts parts of a time point
    or time interval. Returns the part as a long value. For example, `2006-06-05 .toDate.extract(DAY)`
    leads to `5`. |'
  id: totrans-254
  prefs: []
  type: TYPE_TB
  zh: '| `TEMPORAL.extract(TIMEINTERVALUNIT)` | NA | 提取时间点或时间间隔的部分。将该部分作为长整型值返回。例如，`2006-06-05
    .toDate.extract(DAY)` 导致 `5`。 |'
- en: '| `TIMEPOINT.floor(TIMEINTERVALUNIT)` | `TIMEPOINT.floor(TimeIntervalUnit)`
    | Rounds a time point down to the given unit. For example, `"12:44:31".toDate.floor(MINUTE)`
    leads to `12:44:00`. |'
  id: totrans-255
  prefs: []
  type: TYPE_TB
  zh: '| `TIMEPOINT.floor(TIMEINTERVALUNIT)` | `TIMEPOINT.floor(TimeIntervalUnit)`
    | 将时间点向下舍入到给定的单位。例如，`"12:44:31".toDate.floor(MINUTE)` 导致 `12:44:00`。 |'
- en: '| `TIMEPOINT.ceil(TIMEINTERVALUNIT)` | `TIMEPOINT.ceil(TimeIntervalUnit)` |
    Rounds a time point up to the given unit. For example, `"12:44:31".toTime.floor(MINUTE)`
    leads to `12:45:00`. |'
  id: totrans-256
  prefs: []
  type: TYPE_TB
  zh: '| `TIMEPOINT.ceil(TIMEINTERVALUNIT)` | `TIMEPOINT.ceil(TimeIntervalUnit)` |
    将时间点四舍五入到给定的单位。例如，`"12:44:31".toTime.floor(MINUTE)` 导致 `12:45:00`。 |'
- en: '| `currentDate()` | `currentDate()` | Returns the current SQL date in UTC time
    zone. |'
  id: totrans-257
  prefs: []
  type: TYPE_TB
  zh: '| `currentDate()` | `currentDate()` | 返回UTC时区的当前SQL日期。 |'
- en: '| `currentTime()` | `currentTime()` | Returns the current SQL time in UTC time
    zone. |'
  id: totrans-258
  prefs: []
  type: TYPE_TB
  zh: '| `currentTime()` | `currentTime()` | 返回UTC时区的当前SQL时间。 |'
- en: '| `currentTimestamp()` | `currentTimestamp()` | Returns the current SQL timestamp
    in UTC time zone. |'
  id: totrans-259
  prefs: []
  type: TYPE_TB
  zh: '| `currentTimestamp()` | `currentTimestamp()` | 返回UTC时区的当前SQL时间戳。 |'
- en: '| `localTime()` | `localTime()` | Returns the current SQL time in local time
    zone. |'
  id: totrans-260
  prefs: []
  type: TYPE_TB
  zh: '| `localTime()` | `localTime()` | 返回本地时区的当前SQL时间。 |'
- en: '| `localTimestamp()` | `localTimestamp()` | Returns the current SQL timestamp
    in local time zone. |'
  id: totrans-261
  prefs: []
  type: TYPE_TB
  zh: '| `localTimestamp()` | `localTimestamp()` | 返回本地时区的当前SQL时间戳。 |'
- en: Scala functions in SQL
  id: totrans-262
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Scala functions in SQL
- en: 'The following is the list of supported scalar functions in the `sql()` method:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`sql()`方法中支持的标量函数列表：
- en: '| Function | Description |'
  id: totrans-264
  prefs: []
  type: TYPE_TB
  zh: '| 函数 | 描述 |'
- en: '| `EXP(NUMERIC)` | Calculates the Euler''s number raised to the given power.
    |'
  id: totrans-265
  prefs: []
  type: TYPE_TB
  zh: '| `EXP(NUMERIC)` | 计算给定幂的自然对数。 |'
- en: '| `LOG10(NUMERIC)` | Calculates the base 10 logarithm of the given value. |'
  id: totrans-266
  prefs: []
  type: TYPE_TB
  zh: '| `LOG10(NUMERIC)` | 计算给定值的以10为底的对数。 |'
- en: '| `LN(NUMERIC)` | Calculates the natural logarithm of the given value. |'
  id: totrans-267
  prefs: []
  type: TYPE_TB
  zh: '| `LN(NUMERIC)` | 计算给定值的自然对数。 |'
- en: '| `POWER(NUMERIC, NUMERIC)` | Calculates the given number raised to the power
    of the other value. |'
  id: totrans-268
  prefs: []
  type: TYPE_TB
  zh: '| `POWER(NUMERIC, NUMERIC)` | 计算给定数字的另一个值的幂。 |'
- en: '| `ABS(NUMERIC)` | Calculates the absolute value of the given value. |'
  id: totrans-269
  prefs: []
  type: TYPE_TB
  zh: '| `ABS(NUMERIC)` | 计算给定值的绝对值。 |'
- en: '| `FLOOR(NUMERIC)` | Calculates the largest integer less than or equal to a
    given number. |'
  id: totrans-270
  prefs: []
  type: TYPE_TB
  zh: '| `FLOOR(NUMERIC)` | 计算小于或等于给定数字的最大整数。 |'
- en: '| `CEIL(NUMERIC)` | Calculates the smallest integer greater than or equal to
    a given number. |'
  id: totrans-271
  prefs: []
  type: TYPE_TB
  zh: '| `CEIL(NUMERIC)` | 计算大于或等于给定数字的最小整数。 |'
- en: '| `SUBSTRING(VARCHAR, INT, INT) SUBSTRING(VARCHAR FROM INT FOR INT)` | Creates
    a substring of the given string at the given index for the given length. The index
    starts at 1 and is inclusive, that is, the character at the index is included
    in the substring. The substring has the specified length or less. |'
  id: totrans-272
  prefs: []
  type: TYPE_TB
  zh: '| `SUBSTRING(VARCHAR, INT, INT) SUBSTRING(VARCHAR FROM INT FOR INT)` | 从给定索引开始创建给定长度的字符串的子字符串。索引从1开始，是包含的，即包括索引处的字符。子字符串具有指定的长度或更少。
    |'
- en: '| `SUBSTRING(VARCHAR, INT)``SUBSTRING(VARCHAR FROM INT)` | Creates a substring
    of the given string beginning at the given index to the end. The start index starts
    at 1 and is inclusive. |'
  id: totrans-273
  prefs: []
  type: TYPE_TB
  zh: '| `SUBSTRING(VARCHAR, INT)``SUBSTRING(VARCHAR FROM INT)` | 从给定索引开始创建给定字符串的子字符串直到末尾。起始索引从1开始，是包含的。
    |'
- en: '| `TRIM(LEADING VARCHAR FROM VARCHAR) TRIM(TRAILING VARCHAR FROM VARCHAR) TRIM(BOTH
    VARCHAR FROM VARCHAR) TRIM(VARCHAR)` | Removes leading and/or trailing characters
    from the given string. By default, whitespaces at both sides are removed. |'
  id: totrans-274
  prefs: []
  type: TYPE_TB
  zh: '| `TRIM(LEADING VARCHAR FROM VARCHAR) TRIM(TRAILING VARCHAR FROM VARCHAR) TRIM(BOTH
    VARCHAR FROM VARCHAR) TRIM(VARCHAR)` | 从给定的字符串中移除前导和/或尾随字符。默认情况下，两侧的空格将被移除。 |'
- en: '| `CHAR_LENGTH(VARCHAR)` | Returns the length of a string. |'
  id: totrans-275
  prefs: []
  type: TYPE_TB
  zh: '| `CHAR_LENGTH(VARCHAR)` | 返回字符串的长度。 |'
- en: '| `UPPER(VARCHAR)` | Returns all of the characters in a string in upper case
    using the rules of the default locale. |'
  id: totrans-276
  prefs: []
  type: TYPE_TB
  zh: '| `UPPER(VARCHAR)` | 使用默认区域设置的规则将字符串中的所有字符转换为大写。 |'
- en: '| `LOWER(VARCHAR)` | Returns all of the characters in a string in lower case
    using the rules of the default locale. |'
  id: totrans-277
  prefs: []
  type: TYPE_TB
  zh: '| `LOWER(VARCHAR)` | 使用默认区域设置的规则将字符串中的所有字符转换为小写。 |'
- en: '| `INITCAP(VARCHAR)` | Converts the initial letter of each word in a string
    to uppercase. Assumes a string containing only `[A-Za-z0-9]`, everything else
    is treated as whitespace. |'
  id: totrans-278
  prefs: []
  type: TYPE_TB
  zh: '| `INITCAP(VARCHAR)` | 将字符串中每个单词的首字母转换为大写。假定字符串仅包含`[A-Za-z0-9]`，其他所有内容都视为空格。
    |'
- en: '| `VARCHAR LIKE VARCHAR` | Returns true if a string matches the specified LIKE
    pattern. For example, `"Jo_n%"` matches all strings that start with `"Jo(arbitrary
    letter)n"`. |'
  id: totrans-279
  prefs: []
  type: TYPE_TB
  zh: '| `VARCHAR LIKE VARCHAR` | 如果字符串与指定的LIKE模式匹配，则返回true。例如，`"Jo_n%"`匹配所有以`"Jo(任意字母)n"`开头的字符串。
    |'
- en: '| `VARCHAR SIMILAR TO VARCHAR` | Returns true if a string matches the specified
    SQL regex pattern. For example, `"A+"` matches all strings that consist of at
    least one `"A"`. |'
  id: totrans-280
  prefs: []
  type: TYPE_TB
  zh: '| `VARCHAR SIMILAR TO VARCHAR` | 如果字符串与指定的SQL正则表达式模式匹配，则返回true。例如，`"A+"`匹配至少包含一个`"A"`的所有字符串。
    |'
- en: '| `DATE VARCHAR` | Parses a date string in the form `"yy-mm-dd"` to a SQL date.
    |'
  id: totrans-281
  prefs: []
  type: TYPE_TB
  zh: '| `DATE VARCHAR` | 将形式为`"yy-mm-dd"`的日期字符串解析为SQL日期。 |'
- en: '| `TIME VARCHAR` | Parses a time string in the form `"hh:mm:ss"` to a SQL time.
    |'
  id: totrans-282
  prefs: []
  type: TYPE_TB
  zh: '| `TIME VARCHAR` | 将形式为`"hh:mm:ss"`的时间字符串解析为SQL时间。 |'
- en: '| `TIMESTAMP VARCHAR` | Parses a timestamp string in the form `"yy-mm-dd hh:mm:ss.fff"`
    to a SQL timestamp. |'
  id: totrans-283
  prefs: []
  type: TYPE_TB
  zh: '| `TIMESTAMP VARCHAR` | 将形式为`"yy-mm-dd hh:mm:ss.fff"`的时间戳字符串解析为SQL时间戳。 |'
- en: '| `EXTRACT(TIMEINTERVALUNIT FROM TEMPORAL)` | Extracts parts of a time point
    or time interval. Returns the part as a long value. For example, `EXTRACT(DAY
    FROM DATE ''2006-06-05'')` leads to `5`. |'
  id: totrans-284
  prefs: []
  type: TYPE_TB
  zh: '| `EXTRACT(TIMEINTERVALUNIT FROM TEMPORAL)` | 提取时间点或时间间隔的部分。将该部分作为长值返回。例如，`EXTRACT(DAY
    FROM DATE ''2006-06-05'')`得到`5`。 |'
- en: '| `FLOOR(TIMEPOINT TO TIMEINTERVALUNIT)` | Rounds a time point down to the
    given unit. For example, `FLOOR(TIME ''12:44:31'' TO MINUTE)` leads to `12:44:00`.
    |'
  id: totrans-285
  prefs: []
  type: TYPE_TB
  zh: '| `FLOOR(TIMEPOINT TO TIMEINTERVALUNIT)` | 将时间点向下舍入到给定的单位。例如，`FLOOR(TIME ''12:44:31''
    TO MINUTE)`得到`12:44:00`。 |'
- en: '| `CEIL(TIMEPOINT TO TIMEINTERVALUNIT)` | Rounds a time point up to the given
    unit. For example, `CEIL(TIME ''12:44:31'' TO MINUTE)` leads to `12:45:00`. |'
  id: totrans-286
  prefs: []
  type: TYPE_TB
  zh: '| `CEIL(TIMEPOINT TO TIMEINTERVALUNIT)` | 将时间点向上舍入到给定的单位。例如，`CEIL(TIME ''12:44:31''
    TO MINUTE)`得到`12:45:00`。 |'
- en: '| `CURRENT_DATE` | Returns the current SQL date in UTC timezone. |'
  id: totrans-287
  prefs: []
  type: TYPE_TB
  zh: '| `CURRENT_DATE` | 返回UTC时区中的当前SQL日期。 |'
- en: '| `CURRENT_TIME` | Returns the current SQL time in UTC timezone. |'
  id: totrans-288
  prefs: []
  type: TYPE_TB
  zh: '| `CURRENT_TIME` | 返回UTC时区中的当前SQL时间。 |'
- en: '| `CURRENT_TIMESTAMP` | Returns the current SQL timestamp in UTC timezone.
    |'
  id: totrans-289
  prefs: []
  type: TYPE_TB
  zh: '| `CURRENT_TIMESTAMP` | 返回UTC时区中的当前SQL时间戳。 |'
- en: '| `LOCALTIME` | Returns the current SQL time in local timezone. |'
  id: totrans-290
  prefs: []
  type: TYPE_TB
  zh: '| `LOCALTIME` | 返回本地时区中的当前SQL时间。 |'
- en: '| `LOCALTIMESTAMP` | Returns the current SQL timestamp in local timezone. |'
  id: totrans-291
  prefs: []
  type: TYPE_TB
  zh: '| `LOCALTIMESTAMP` | 返回本地时区中的当前SQL时间戳。 |'
- en: Use case - Athletes data insights using Flink Table API
  id: totrans-292
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用案例 - 使用Flink Table API进行运动员数据洞察
- en: Now that we have learnt details of Table API, let's try to apply this knowledge
    to a real life use case. Consider we have a dataset with us, which has information
    about the Olympic athletes and their performance in various games.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了Table API的细节，让我们尝试将这些知识应用到一个真实的用例中。假设我们手头有一个数据集，其中包含有关奥运运动员及其在各种比赛中的表现的信息。
- en: 'The sample data looks like that shown in the following table:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 样本数据如下表所示：
- en: '| **Player** | **Country** | **Year** | **Game** | **Gold** | **Silver** |
    **Bronze** | **Total** |'
  id: totrans-295
  prefs: []
  type: TYPE_TB
  zh: '| **运动员** | **国家** | **年份** | **比赛** | **金牌** | **银牌** | **铜牌** | **总计** |'
- en: '| Yang Yilin | China | 2008 | Gymnastics | 1 | 0 | 2 | 3 |'
  id: totrans-296
  prefs: []
  type: TYPE_TB
  zh: '| 杨伊琳 | 中国 | 2008 | 体操 | 1 | 0 | 2 | 3 |'
- en: '| Leisel Jones | Australia | 2000 | Swimming | 0 | 2 | 0 | 2 |'
  id: totrans-297
  prefs: []
  type: TYPE_TB
  zh: '| 利塞尔·琼斯 | 澳大利亚 | 2000 | 游泳 | 0 | 2 | 0 | 2 |'
- en: '| Go Gi-Hyeon | South Korea | 2002 | Short-Track Speed Skating | 1 | 1 | 0
    | 2 |'
  id: totrans-298
  prefs: []
  type: TYPE_TB
  zh: '| 高基贤 | 韩国 | 2002 | 短道速滑 | 1 | 1 | 0 | 2 |'
- en: '| Chen Ruolin | China | 2008 | Diving | 2 | 0 | 0 | 2 |'
  id: totrans-299
  prefs: []
  type: TYPE_TB
  zh: '| 陈若琳 | 中国 | 2008 | 跳水 | 2 | 0 | 0 | 2 |'
- en: '| Katie Ledecky | United States | 2012 | Swimming | 1 | 0 | 0 | 1 |'
  id: totrans-300
  prefs: []
  type: TYPE_TB
  zh: '| 凯蒂·莱德基 | 美国 | 2012 | 游泳 | 1 | 0 | 0 | 1 |'
- en: '| Ruta Meilutyte | Lithuania | 2012 | Swimming | 1 | 0 | 0 | 1 |'
  id: totrans-301
  prefs: []
  type: TYPE_TB
  zh: '| 鲁塔·梅卢蒂特 | 立陶宛 | 2012 | 游泳 | 1 | 0 | 0 | 1 |'
- en: "| DÃ\x83Â¡niel Gyurta | Hungary | 2004 | Swimming | 0 | 1 | 0 | 1 |"
  id: totrans-302
  prefs: []
  type: TYPE_TB
  zh: '| 丹尼尔·吉尔塔 | 匈牙利 | 2004 | 游泳 | 0 | 1 | 0 | 1 |'
- en: '| Arianna Fontana | Italy | 2006 | Short-Track Speed Skating | 0 | 0 | 1 |
    1 |'
  id: totrans-303
  prefs: []
  type: TYPE_TB
  zh: '| 阿里安娜·方塔纳 | 意大利 | 2006 | 短道速滑 | 0 | 0 | 1 | 1 |'
- en: '| Olga Glatskikh | Russia | 2004 | Rhythmic Gymnastics | 1 | 0 | 0 | 1 |'
  id: totrans-304
  prefs: []
  type: TYPE_TB
  zh: '| 奥尔加·格拉茨基赫 | 俄罗斯 | 2004 | 韵律体操 | 1 | 0 | 0 | 1 |'
- en: '| Kharikleia Pantazi | Greece | 2000 | Rhythmic Gymnastics | 0 | 0 | 1 | 1
    |'
  id: totrans-305
  prefs: []
  type: TYPE_TB
  zh: '| Kharikleia Pantazi | 希腊 | 2000 | 韵律体操 | 0 | 0 | 1 | 1 |'
- en: '| Kim Martin | Sweden | 2002 | Ice Hockey | 0 | 0 | 1 | 1 |'
  id: totrans-306
  prefs: []
  type: TYPE_TB
  zh: '| Kim Martin | 瑞典 | 2002 | 冰球 | 0 | 0 | 1 | 1 |'
- en: '| Kyla Ross | United States | 2012 | Gymnastics | 1 | 0 | 0 | 1 |'
  id: totrans-307
  prefs: []
  type: TYPE_TB
  zh: '| Kyla Ross | 美国 | 2012 | 体操 | 1 | 0 | 0 | 1 |'
- en: '| Gabriela Dragoi | Romania | 2008 | Gymnastics | 0 | 0 | 1 | 1 |'
  id: totrans-308
  prefs: []
  type: TYPE_TB
  zh: '| Gabriela Dragoi | 罗马尼亚 | 2008 | 体操 | 0 | 0 | 1 | 1 |'
- en: '| Tasha Schwikert-Warren | United States | 2000 | Gymnastics | 0 | 0 | 1 |
    1 |'
  id: totrans-309
  prefs: []
  type: TYPE_TB
  zh: '| Tasha Schwikert-Warren | 美国 | 2000 | 体操 | 0 | 0 | 1 | 1 |'
- en: Now we want to get answers to the questions like, how many medals were won by
    country or by game. As the data we have in structured data, we can use Table API
    to query data in a SQL way. So let's get started.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们想要得到答案，比如，每个国家或每个比赛赢得了多少枚奖牌。由于我们的数据是结构化数据，我们可以使用Table API以SQL方式查询数据。所以让我们开始吧。
- en: 'The data available is in the CSV format. So we will be using a CSV reader provided
    by Flink API as shown in the following code snippet:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的数据是以CSV格式提供的。因此，我们将使用Flink API提供的CSV阅读器，如下面的代码片段所示：
- en: '[PRE60]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Next we need to create a Table with this dataset and register it in Table Environment
    for further processing:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要使用这个数据集创建一个表，并在Table Environment中注册它以进行进一步处理：
- en: '[PRE61]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Next we can write a regular SQL query to get more insights from the data. Or
    else we can use Table API operators to manipulate the data, as shown in the following
    code snippet:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以编写常规的SQL查询，以从数据中获取更多见解。或者我们可以使用Table API操作符来操作数据，如下面的代码片段所示：
- en: '[PRE62]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: This way we can analyse such data in a much more simpler way using Table API.
    The complete code for this use case is available on GitHub at [https://github.com/deshpandetanmay/mastering-flink/tree/master/chapter04/flink-table](https://github.com/deshpandetanmay/mastering-flink/tree/master/chapter04/flink-table).
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 通过Table API，我们可以以更简单的方式分析这样的数据。这个用例的完整代码可以在GitHub上找到：[https://github.com/deshpandetanmay/mastering-flink/tree/master/chapter04/flink-table](https://github.com/deshpandetanmay/mastering-flink/tree/master/chapter04/flink-table)。
- en: Summary
  id: totrans-318
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about a SQL-based API supported by Flink called
    Table API. We also learned how to transform a dataset/stream into a table, registering
    a table, datasets, and datastreams with `TableEnvironment` and then using the
    registered tables to perform various operations. For people coming from a SQL
    databases background, this API is bliss.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了Flink支持的基于SQL的API，称为Table API。我们还学习了如何将数据集/流转换为表，使用`TableEnvironment`注册表、数据集和数据流，然后使用注册的表执行各种操作。对于来自SQL数据库背景的人来说，这个API是一种福音。
- en: In the next chapter, we are going to talk about a very interesting library called
    **Complex Event Processing** and how to use it for solving various business use
    cases.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论一个非常有趣的库，叫做**复杂事件处理**，以及如何将其用于解决各种业务用例。
