- en: '*Chapter 1*: Overview of the Dash Ecosystem'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第1章*：Dash生态系统概述'
- en: One of the few constants in our work with data is the amount of change in the
    volume, sources, and types of data that we deal with. Being able to quickly combine
    data from different sources and explore them is crucial. **Dash** is not only
    for exploring data; it can be used for almost all phases of the data analysis
    process, from exploration to operational production environments.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们处理数据的工作中，唯一不变的因素就是数据的数量、来源和类型的变化。能够快速地结合来自不同来源的数据并进行探索是至关重要的。**Dash**不仅仅用于探索数据，它几乎可以用于数据分析过程中的所有阶段，从探索到生产环境中的操作。
- en: In this chapter, we will get an overview of Dash's ecosystem and focus on building
    the layout, or the user-facing part, of the app. By the end of the chapter, you
    will be able to build a running app with almost any visual component you want,
    but without interactivity.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将概述Dash的生态系统，并重点关注构建应用程序的布局部分，即面向用户的部分。到本章结束时，您将能够构建一个运行中的应用程序，并能够使用几乎任何您想要的视觉组件，但没有交互性。
- en: 'The following topics will be covered:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Setting up your environment
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置您的开发环境
- en: Exploring Dash and other supporting packages
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索Dash和其他支持包
- en: Understanding the general structure of a Dash app
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解Dash应用程序的一般结构
- en: Creating and running the simplest app
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建并运行最简单的应用程序
- en: Adding HTML and other components to the app
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将HTML和其他组件添加到应用程序中
- en: Learning how to structure the layout and managing themes
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何结构化布局和管理主题
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Every chapter will have slightly different requirements, but there are some
    that you will need throughout the book.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 每一章的要求可能略有不同，但有些要求是全书通用的。
- en: You should have access to Python 3.6 or higher, which can be easily downloaded
    from [https://www.python.org](https://www.python.org), as well as a text editor
    or an **integrated development environment** (**IDE**) so you can edit code.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要访问Python 3.6或更高版本，可以从[https://www.python.org](https://www.python.org)轻松下载，并且需要一个文本编辑器或**集成开发环境**（**IDE**），以便编辑代码。
- en: For this chapter, we will be using **Dash**, **Dash HTML Components**, and **Dash
    Bootstrap Components**, which can be installed together with all other required
    packages by following the instructions in the following section. All code and
    data required for this book can be downloaded from the book's GitHub repository,
    which can be found at [https://github.com/PacktPublishing/Interactive-Dashboards-and-Data-Apps-with-Plotly-and-Dash](https://github.com/PacktPublishing/Interactive-Dashboards-and-Data-Apps-with-Plotly-and-Dash).
    As I just mentioned, the following section will show in detail how to get started
    with your setup.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用**Dash**、**Dash HTML Components**和**Dash Bootstrap Components**，这些可以通过以下部分的说明与其他所需的包一起安装。所有本书所需的代码和数据可以从本书的GitHub仓库下载，仓库地址为[https://github.com/PacktPublishing/Interactive-Dashboards-and-Data-Apps-with-Plotly-and-Dash](https://github.com/PacktPublishing/Interactive-Dashboards-and-Data-Apps-with-Plotly-and-Dash)。正如我刚才提到的，以下部分将详细展示如何开始设置环境。
- en: The code files of this chapter can be found on GitHub at [https://github.com/PacktPublishing/Interactive-Dashboards-and-Data-Apps-with-Plotly-and-Dash/tree/master/chapter_01](https://github.com/PacktPublishing/Interactive-Dashboards-and-Data-Apps-with-Plotly-and-Dash/tree/master/chapter_01).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码文件可以在GitHub上找到：[https://github.com/PacktPublishing/Interactive-Dashboards-and-Data-Apps-with-Plotly-and-Dash/tree/master/chapter_01](https://github.com/PacktPublishing/Interactive-Dashboards-and-Data-Apps-with-Plotly-and-Dash/tree/master/chapter_01)。
- en: Check out the following video to see the Code in Action at [https://bit.ly/3atXPjc](https://bit.ly/3atXPjc).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频，观看代码的实际运行：[https://bit.ly/3atXPjc](https://bit.ly/3atXPjc)。
- en: Setting up your environment
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置您的开发环境
- en: 'With the fast pace of change in all the packages used in the book, you will
    most likely come across some differences in functionality, so in order to reproduce
    the exact outcomes described in the book, you can clone the book''s repository,
    install the packages used (in the specified versions), and use the included dataset.
    From the command line, go to a folder in which you want to build the project and
    do the following:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 由于书中使用的所有包的更新速度很快，您很可能会遇到一些功能上的差异，因此，为了复现书中描述的确切结果，您可以克隆书籍的仓库，安装使用的包（指定版本），并使用包含的数据集。从命令行进入您想要构建项目的文件夹，并执行以下操作：
- en: 'Create a Python virtual environment in a folder called `dash_project` (or any
    other name you want). This will also create a new folder with the name you chose:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个名为`dash_project`的文件夹中创建一个Python虚拟环境（或者你想要的任何其他名称）。这也会创建一个与你选择的名称相同的新文件夹：
- en: '[PRE0]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Activate the virtual environment.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 激活虚拟环境。
- en: 'On Unix or macOS, run this:'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在Unix或macOS上，运行以下命令：
- en: '[PRE1]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'On Windows, run this:'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在Windows上，运行以下命令：
- en: '[PRE2]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Go to the created folder:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入创建的文件夹：
- en: '[PRE3]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Clone the book''s GitHub repository:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 克隆这本书的GitHub仓库：
- en: '[PRE4]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You should now have a file containing the required packages and their versions
    called `requirements.txt`. You can install those packages by going to the repository''s
    folder and running the `install` command as follows:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你现在应该有一个包含所需包及其版本的文件，名为`requirements.txt`。你可以通过进入仓库文件夹并运行以下`install`命令来安装这些包：
- en: '[PRE5]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You should find a copy of the dataset in the `data` folder, which was downloaded
    from this link: [https://datacatalog.worldbank.org/dataset/poverty-and-equity-database](https://datacatalog.worldbank.org/dataset/poverty-and-equity-database).
    You can get the latest version if you want, but as with packages, if you want
    to get the same results, it''s better to work with the provided dataset.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该在`data`文件夹中找到数据集的副本，数据集是从这个链接下载的：[https://datacatalog.worldbank.org/dataset/poverty-and-equity-database](https://datacatalog.worldbank.org/dataset/poverty-and-equity-database)。如果你想要，仍然可以获取最新版本，但和软件包一样，如果你想获得相同的结果，最好使用提供的数据集。
- en: In order for Plotly figures and apps to be displayed in JupyterLab, you will
    need to install Node.js, which can be install from [https://nodejs.org](https://nodejs.org).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使Plotly图形和应用能够在JupyterLab中显示，你需要安装Node.js，可以从[https://nodejs.org](https://nodejs.org)安装。
- en: 'You will also need to install the JupyterLab Plotly extension, which can be
    done by running the following from the command line in your virtual environment:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要安装JupyterLab Plotly扩展，可以通过在你的虚拟环境中从命令行运行以下命令来完成：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note that the version number at the end should correspond to the version of
    Plotly that you are running. You can replace the preceding version numbers if
    you want to upgrade (making sure to upgrade the Plotly Python package as well).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，最后的版本号应与您正在运行的Plotly版本相对应。如果你想升级，可以替换前面的版本号（确保也升级Plotly的Python包）。
- en: 'Once you have run the preceding code, you should have everything you need to
    follow along. You will see that each chapter of this book builds on the previous
    one: we will be building an app that adds more and more functionality and complexity
    as we go through the chapters.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你运行了之前的代码，你应该就有了跟随的所有必要条件。你会发现这本书的每一章都在前一章的基础上构建：我们将构建一个应用程序，随着章节的进行，逐步增加更多的功能和复杂性。
- en: The main objective is to put you in a practical setting as much as possible.
    In general, it is straightforward to create any standalone Dash component, but
    it gets more challenging when you already have a few components in a running app.
    This becomes clear when you have to decide how to change the layout to accommodate
    new changes and how to refactor code, focusing on the details without losing sight
    of the big picture.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 主要目标是尽可能将你置于一个实际的环境中。一般来说，创建任何独立的Dash组件是直接的，但当你已经在运行的应用中有一些组件时，它就变得更具挑战性。当你需要决定如何调整布局以适应新的变化，并且如何重构代码时，这一点变得尤为明显，需要专注于细节，但又不失大局。
- en: Now that the environment has been established, let's get an overview of Dash.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在环境已经建立，让我们来概览一下Dash。
- en: Exploring Dash and other supporting packages
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索Dash及其他支持包
- en: 'Although not strictly necessary, it''s good to know the main components that
    are used to make Dash and its dependencies, especially for more advanced usage,
    and in order to know how and where to get more information:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管不是严格必要的，但了解构建Dash及其依赖项的主要组件还是很有帮助的，尤其是对于更高级的用法，并且可以帮助你了解如何以及在哪里获取更多信息：
- en: '![Figure 1.1 – What Dash is made of](img/B16780_01_001.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![图1.1 – Dash的组成](img/B16780_01_001.jpg)'
- en: Figure 1.1 – What Dash is made of
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.1 – Dash的组成
- en: Note
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: One of the main advantages of using Dash is that it allows us to create fully
    interactive data, analytics, and web apps and interfaces, using pure Python, without
    having to worry about HTML, CSS, or JavaScript.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Dash的一个主要优点是，它允许我们使用纯Python创建完全交互的数据、分析和Web应用程序和界面，而无需担心HTML、CSS或JavaScript。
- en: As you can see in Figure 1.1, Dash uses **Flask** for the backend. For producing
    charts, it uses **Plotly**, although it is not strictly required, but it is the
    best-supported package for data visualization. **React** is used for handling
    all components, and actually a Dash app is rendered as a single-page React app.
    The most important things for us are the different packages that we will be using
    to create our app, which we will be covering next.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如图 1.1 所示，Dash 使用 **Flask** 作为后台。为了生成图表，它使用 **Plotly**，尽管这并非强制要求，但它是数据可视化中最受支持的包。**React**
    用于处理所有组件，实际上一个 Dash 应用程序就是作为一个单页 React 应用渲染的。对我们来说，最重要的是我们将在创建应用时使用的不同包，我们将在接下来的内容中讲解它们。
- en: Tip
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: 'For people who are familiar with or invested in learning Matplotlib, there
    is a special set of tools to convert Matplotlib figures to Plotly figures. Once
    you have created your figure in Matplotlib, you can convert it to Plotly with
    one command: `mpl_to_plotly`. As of the time of this writing, this is supported
    for Matplotlib<=3.0.3 only. Here is a full example:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 对于熟悉或有兴趣学习 Matplotlib 的人，有一套专门的工具可以将 Matplotlib 图形转换为 Plotly 图形。你在 Matplotlib
    中创建图形后，可以通过一个命令将其转换为 Plotly：`mpl_to_plotly`。截至本文撰写时，仅支持 Matplotlib<=3.0.3。以下是一个完整示例：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The different packages that Dash contains
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Dash 包含的不同包
- en: Dash is not one big package that contains everything. Instead, it consists of
    several packages, each handling a certain aspect. In addition, as we will see
    later, there are several third-party packages that are used, and the community
    is encouraged to develop their own functionality by creating special Dash packages.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Dash 不是一个包含所有功能的大型包。相反，它由几个包组成，每个包处理特定的方面。此外，正如我们稍后会看到的，还有一些第三方包被使用，社区也鼓励通过创建特殊的
    Dash 包来开发自己的功能。
- en: 'The following are the main packages that we will mostly be using in this chapter,
    and we will explore others in later chapters:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们在本章中主要使用的包，后续章节我们还将探索其他包：
- en: '`dash.Dash` object. It also provides a few other tools for managing interactivity
    and exceptions, which we will get into later as we build our app.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dash.Dash` 对象。它还提供了一些用于管理交互性和异常的工具，我们将在构建应用程序时深入了解这些工具。'
- en: '**Dash Core Components**: A package that provides a set of interactive components
    that can be manipulated by users. Dropdowns, date pickers, sliders, and many more
    components are included in this package. We will learn how to use them to manage
    reactivity in [*Chapter 2*](B16780_02_Final_NM_ePub.xhtml#_idTextAnchor031), *Exploring
    the Structure of a Dash App*, and will be focusing on how to use them in detail
    in *Part 2* of the book.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Dash 核心组件**：一个提供一组可供用户操作的交互式组件的包。下拉框、日期选择器、滑动条等多种组件都包含在此包中。我们将在 [*第 2 章*](B16780_02_Final_NM_ePub.xhtml#_idTextAnchor031)《探索
    Dash 应用结构》中学习如何使用这些组件来管理响应式操作，并将在本书的 *第二部分* 中详细讨论如何使用它们。'
- en: '`dash_html_components.H1(''Hello, World'')` in Python, and it will be converted
    to `<h1>Hello, World</h1>` and rendered as such in the browser.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Python 中，`dash_html_components.H1('Hello, World')` 会被转换为 `<h1>Hello, World</h1>`
    并在浏览器中呈现出来。
- en: '`pip install dash` from the command line. For upgrades, that would be `pip
    install dash --upgrade`.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从命令行运行 `pip install dash`。如果是升级，则使用 `pip install dash --upgrade`。
- en: We will now take a brief look at the general structure of a typical Dash app,
    after which we will start coding.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将简要了解典型 Dash 应用的一般结构，之后我们将开始编写代码。
- en: Understanding the general structure of a Dash app
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解 Dash 应用的一般结构
- en: 'The following diagram shows what generally goes into creating a Dash app. We
    typically have a file called `app.py`, although you can name it whatever you want.
    The file is shown as the column on the right, with the different parts split by
    lines, just to visually distinguish between them, while on the left is the name
    of each part:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图示展示了创建 Dash 应用程序的一般步骤。我们通常有一个名为 `app.py` 的文件，虽然你可以任意命名该文件。该文件显示为右侧的列，不同的部分通过线条分隔，目的是为了视觉上区分它们，而左侧则是每个部分的名称：
- en: '![Figure 1.2 – The structure of a Dash app](img/B16780_01_002.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.2 – Dash 应用结构](img/B16780_01_002.jpg)'
- en: Figure 1.2 – The structure of a Dash app
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2 – Dash 应用结构
- en: 'Let''s look at each app part in detail:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细看看每个应用部分：
- en: '**Imports (boilerplate):** Like any Python module, we begin by importing the
    required packages, using their usual aliases.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**导入（模板代码）：** 和任何 Python 模块一样，我们首先导入所需的包，并使用它们的常见别名。'
- en: '`app` variable in this case. The `__name__` value for the `name` parameter
    is used to make it easy for Dash to locate static assets to be used in the app.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这里的`app`变量。`name`参数的`__name__`值用于让Dash方便地定位将用于应用的静态资源。
- en: '`html.Div` in the figure, that takes a list of components for its `children`
    parameter. These components will be displayed in order when the app renders, each
    placed below the previous element. In the following section, we will create a
    simple app with a minimal layout.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图中的`html.Div`，它接受一个组件列表作为其`children`参数。这些组件将在应用渲染时按顺序显示，每个都位于前一个元素的下方。在接下来的部分中，我们将创建一个具有最小布局的简单应用程序。
- en: '**Callback functions**: This is the subject of [*Chapter 2*](B16780_02_Final_NM_ePub.xhtml#_idTextAnchor031),
    *Exploring the Structure of a Dash App*, where we will go through how interactivity
    works in detail; this won''t be covered in this chapter. For now, it''s enough
    to know that this is where we define as many functions as needed to link the visible
    elements of the app to each other, defining the functionality that we want. Typically,
    functions are independent, they don''t need to be defined within a container,
    and their order does not matter in the module.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**回调函数**：这是[*第2章*](B16780_02_Final_NM_ePub.xhtml#_idTextAnchor031)的主题，*探索Dash应用程序的结构*，我们将在其中详细讲解交互性如何工作；本章不涉及这一内容。目前，只需要知道在这里我们可以定义任意数量的函数，将应用程序的可视元素互相连接，定义我们想要的功能。通常，函数是独立的，它们不需要定义在容器内，且函数的顺序在模块中没有关系。'
- en: '**Running the app**: Using the Python idiom for running modules as scripts,
    we run the app.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运行应用程序**：使用Python运行模块作为脚本的习惯，我们来运行应用程序。'
- en: As I promised, we are now ready to start coding.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我承诺的那样，我们现在准备好开始编写代码了。
- en: Creating and running the simplest app
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建并运行最简单的应用程序
- en: Using the structure that we just discussed, and excluding callback functions,
    let's now build our first simple app!
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们刚才讨论的结构，并排除回调函数，接下来我们来构建第一个简单的应用程序！
- en: 'Create a file and name it `app.py`, and write the following code:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个文件并命名为`app.py`，然后编写以下代码：
- en: 'Import the required packages using their usual aliases:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用它们通常的别名导入所需的包：
- en: '[PRE8]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Create (instantiate) the app:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建（实例化）应用程序：
- en: '[PRE9]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Create the app''s layout:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建应用程序的布局：
- en: '[PRE10]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Run the app:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行应用程序：
- en: '[PRE11]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: A few points before running the app. First, I strongly suggest that you don't
    copy and paste code. It's important to make sure you remember what you coded.
    It's also useful to explore the possibilities provided by each component, class,
    or function. Most IDEs provide hints on what is possible.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行应用程序之前，有几点需要说明。首先，我强烈建议你不要复制粘贴代码。记住自己编写的代码非常重要。探索每个组件、类或函数提供的可能性也很有用。大多数集成开发环境（IDE）会提供提示，告诉你可能的操作。
- en: This app's layout contains one element, which is the list passed to `html.Div`,
    corresponding to its `children` parameter. This will produce an H1 element on
    the page. Finally, note that I set `debug=True` in the `app.run_server` method.
    This activates several developer tools that are really useful while developing
    and debugging.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这个应用程序的布局包含一个元素，就是传递给`html.Div`的列表，作为其`children`参数。这将在页面上生成一个H1元素。最后，请注意，我在`app.run_server`方法中设置了`debug=True`。这会激活一些开发者工具，在开发和调试时非常有用。
- en: 'You are now ready to run your first app. From the command line, in the same
    folder where you saved your app file, run this:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经准备好运行第一个应用程序了。在命令行中，在你保存应用文件的同一个文件夹里，运行以下命令：
- en: '[PRE12]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You might need to run the preceding command using `python3` if your system
    is not configured to use version three by default:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的系统没有默认配置为使用版本三，你可能需要使用`python3`来运行前面的命令：
- en: '[PRE13]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You should now see an output like that shown in Figure 1.3, indicating that
    the app is running:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该会看到类似于图1.3所示的输出，表示应用程序正在运行：
- en: '![Figure 1.3 – Command-line output while running the app](img/B16780_01_003.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![图1.3 – 运行应用程序时的命令行输出](img/B16780_01_003.jpg)'
- en: Figure 1.3 – Command-line output while running the app
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.3 – 运行应用程序时的命令行输出
- en: 'Congratulations on running your very first Dash app! Now, if you point your
    browser to the URL shown in the output, http://127.0.0.1:8050, you should see
    the "Hello, World!" message in H1 on the page. As you can see, it shows that it
    is serving a Flask app called "app," with a warning that this server is not designed
    for production use. We will cover deployment in a later chapter, but this server
    is good enough for developing and testing your apps. You can also see that we
    are in debug mode:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你成功运行了你的第一个 Dash 应用！现在，如果你将浏览器指向输出中显示的 URL：http://127.0.0.1:8050，你应该会看到页面上
    H1 中显示的“Hello, World!”消息。正如你所看到的，它显示了正在提供名为“app”的 Flask 应用，并且有一个警告，说明该服务器不适合用于生产环境。我们将在后续章节讨论部署问题，但这个服务器足够用于开发和测试你的应用。你还可以看到我们处于调试模式：
- en: '![Figure 1.4 – App rendered in the browser](img/B16780_01_004.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.4 – 在浏览器中渲染的应用](img/B16780_01_004.jpg)'
- en: Figure 1.4 – App rendered in the browser
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.4 – 在浏览器中渲染的应用
- en: As specified, we see the text in H1, and we can also see the blue button as
    well. Clicking on this button will open some options in the browser, and it will
    be more useful once there are callback functions and/or errors while running the
    app. We wouldn't have gotten the blue button if we had run the app with `debug=False`,
    which is the default.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所述，我们看到文本以 H1 的形式显示，我们还可以看到蓝色按钮。点击此按钮将打开浏览器中的一些选项，在有回调函数和/或运行应用时出错时，它将更加有用。如果我们将应用以
    `debug=False` 运行（默认设置），则不会看到蓝色按钮。
- en: 'Now that we have established a good-enough understanding of the main elements
    that go into creating a Dash app, and we have run a minimal one, we are ready
    to explore two packages that are used for adding and managing visible elements:
    first, Dash HTML Components, and after that, we will explore how to use Dash Bootstrap
    Components.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经对创建 Dash 应用的主要元素有了足够的了解，并且已经成功运行了一个最小化的应用，我们可以开始探索两个用于添加和管理可视化元素的包：首先是
    Dash HTML 组件，接下来我们将学习如何使用 Dash Bootstrap 组件。
- en: Adding HTML and other components to the app
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向应用添加 HTML 和其他组件
- en: 'From now until the end of this chapter, we will mainly be focusing on the `app.layout`
    attribute of our app and making changes to it. It''s straightforward to do so;
    we simply add elements to the top-level `html.Div` element''s list (the `children`
    parameter):'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 从现在到本章节结束，我们将主要关注应用的 `app.layout` 属性，并对其进行修改。这样做很简单；我们只需将元素添加到顶级 `html.Div`
    元素的列表（`children` 参数）中：
- en: '[PRE14]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Adding HTML components to a Dash app
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向 Dash 应用添加 HTML 组件
- en: Since the available components in the package correspond to actual HTML tags,
    it is the most stable package. Let's quickly explore the parameters that are common
    to all its components.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 由于该包中的可用组件对应于实际的 HTML 标签，因此它是最稳定的包。让我们快速浏览一下所有组件共有的参数。
- en: At the time of this writing, Dash HTML Components has 131 components, and there
    are 20 parameters that are common to all of them.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 截至本文撰写时，Dash HTML 组件共有 131 个组件，并且有 20 个参数是所有组件共有的。
- en: 'Let''s go over some of the most important ones that we will frequently be using:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来了解一些我们将频繁使用的重要参数：
- en: '`children`: This is typically the main (and first) container of the content
    of the component. It can take a list of items, or a single item.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`children`：通常这是组件内容的主要（也是第一个）容器。它可以是一个项目的列表，也可以是单个项目。'
- en: '`className`: This is the same as the `class` attribute, only renamed as such.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`className`：这与 `class` 属性相同，只是重命名为此。'
- en: '`id`: While we won''t be covering this parameter in this chapter, it is the
    crucial one in making interactivity work, and we will be using it extensively
    while building the app. For now, it''s enough to know that you can set arbitrary
    IDs to your components so you can identify them and later use them for managing
    interactivity.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`id`：虽然我们在本章节中不会详细讲解这个参数，但它是在实现交互功能时至关重要的参数，我们将在构建应用时广泛使用它。目前，知道你可以为组件设置任意
    ID，以便在之后识别它们并用于管理交互功能就足够了。'
- en: '`style`: This is similar to the HTML attribute of the same name, but with a
    few differences. First, its attributes are set using camelCase. So, say you wanted
    to set the following attributes in Dash HTML Components:'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`style`：这与同名的 HTML 属性类似，但有一些区别。首先，它的属性是使用驼峰命名法设置的。所以，假设你想在 Dash HTML 组件中设置以下属性：'
- en: '[PRE15]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You would specify them this way:'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以这样指定它们：
- en: '[PRE16]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The other parameters have different uses and rules, depending on the respective
    component that they belong to. Let''s now practice adding a few HTML elements
    to our app. Going back to the same `app.py` file, let''s experiment with adding
    a few more HTML elements and run the app one more time, as we just did. I kept
    the top and bottom parts the same, and I mainly edited `app.layout`:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 其他参数有不同的用途和规则，取决于它们所属于的各自组件。现在我们来练习将一些HTML元素添加到我们的应用中。回到相同的`app.py`文件，让我们尝试添加更多的HTML元素，并再次运行应用，就像我们刚才做的那样。我保持了顶部和底部部分不变，主要编辑了`app.layout`：
- en: '[PRE17]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'That should produce the following screen:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会生成如下屏幕：
- en: '![Figure 1.5 – Updated app rendered in the browser](img/B16780_01_005.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.5 – 浏览器中渲染的更新应用](img/B16780_01_005.jpg)'
- en: Figure 1.5 – Updated app rendered in the browser
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.5 – 浏览器中渲染的更新应用
- en: Tip
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: 'If you are familiar with HTML, this should look straightforward. If not, please
    check out a basic tutorial online. A great source to start would be W3Schools:
    [https://www.w3schools.com/html/](https://www.w3schools.com/html/).'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你熟悉HTML，这应该看起来很直观。如果不熟悉，请查看在线的基本教程。一个很好的起点是W3Schools：[https://www.w3schools.com/html/](https://www.w3schools.com/html/)。
- en: In the updated part, we just added a `<p>` element and an unordered list, `<ul>`,
    within which we added a few list items, `<li>` (using a Python list), the last
    of which contained a link using the `<a>` element.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在更新部分，我们只添加了一个`<p>`元素和一个无序列表`<ul>`，在其中我们添加了几个列表项`<li>`（使用Python列表），最后一个项包含了一个使用`<a>`元素的链接。
- en: 'Note that since these components are implemented as Python classes, they follow
    Python''s conventions of capitalizing class names: `html.P`, `html.Ul`, `html.Li`,
    `html.A`, and so on.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，由于这些组件是作为Python类实现的，它们遵循Python的类名首字母大写的命名约定：`html.P`、`html.Ul`、`html.Li`、`html.A`等。
- en: 'Feel free to experiment with other options: adding new HTML components, changing
    the order, trying to set other attributes, and so on.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 随意尝试其他选项：添加新的HTML组件、改变顺序、尝试设置其他属性等等。
- en: Learning how to structure the layout and managing themes
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学习如何构建布局和管理主题
- en: 'So far, we have discussed the basic structure of a Dash app and gone through
    a brief overview of its main elements: the imports, app instantiation, app layout,
    callbacks (which we will cover in the next chapter), and running the app. We created
    a bare-bones app, and then we learned how to add a few HTML elements to it. We
    are now ready to take our app to the next level—from a layout perspective. We
    will keep working with the `app.layout` attribute and control it in a more powerful
    and flexible way using the Dash Bootstrap Components package.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经讨论了Dash应用的基本结构，并简要概述了其主要元素：导入、应用实例化、应用布局、回调（将在下一章中讲解）以及运行应用。我们创建了一个基础的应用程序，然后学习了如何向其中添加一些HTML元素。现在，我们已经准备好从布局的角度将应用提升到下一个层次。我们将继续使用`app.layout`属性，并通过Dash
    Bootstrap 组件包以更强大和灵活的方式控制它。
- en: 'Bootstrap is basically a set of tools that abstract away many details for handling
    the layout of web pages. Here are some of the most important benefits of using
    it:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap基本上是一套工具，它将许多细节抽象化，用于处理网页的布局。以下是使用它的一些最重要的好处：
- en: '**Themes**: As we will see in a moment, changing the app''s theme is as simple
    as providing an additional argument while instantiating the app. Dash Bootstrap
    Components ships with a set of themes that you can select from and/or edit.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主题**：正如我们稍后所看到的，改变应用的主题就像在实例化应用时提供一个额外的参数一样简单。Dash Bootstrap 组件带有一组可以选择和/或编辑的主题。'
- en: '**Grid system**: Bootstrap provides a powerful grid system, so we can think
    about our pages more from a user perspective (rows and columns) and not have to
    focus on the screen attributes (pixels and percentages), although we still have
    access to those low-level details whenever we need to.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网格系统**：Bootstrap提供了一个强大的网格系统，因此我们可以从用户的角度（行和列）来考虑页面，而不必专注于屏幕属性（像素和百分比），尽管每当我们需要时，依然可以访问这些低级细节。'
- en: '**Responsiveness**: Having a large number of possible screen sizes makes it
    almost impossible to properly design page layouts. This is handled for us, and
    we can also fine-tune the behavior of page elements to control how their sizes
    change as the screen size changes.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**响应式设计**：由于可能的屏幕尺寸种类繁多，几乎不可能正确地设计页面布局。Bootstrap 为我们处理了这个问题，我们还可以微调页面元素的行为，以控制它们在屏幕尺寸变化时的大小变化。'
- en: '**Prebuilt components**: A set of prebuilt components is also provided, which
    we will be using. Alerts, buttons, drop-down menus, and tabs are some of the components
    that Bootstrap provides.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**预构建组件**：还提供了一组预构建的组件，我们将使用它们。警告框、按钮、下拉菜单和标签页是 Bootstrap 提供的一些组件。'
- en: '**Encoded colors**: We also get a set of colors for easy communication with
    users, in case we have a warning, an error, simple information, and so on.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编码颜色**：我们还获得了一组颜色，方便与用户沟通，以便在有警告、错误、简单信息等情况时使用。'
- en: Let's explore these features one by one.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐一探索这些功能。
- en: Themes
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 主题
- en: 'First, let''s see how easy it is to change the theme of an app. In the same
    `app.py` file, add the following import and the new argument to the app creation
    call:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看看如何轻松地更改应用的主题。在同一个 `app.py` 文件中，添加以下导入并为应用创建调用添加新的参数：
- en: '[PRE18]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Running the app again, you should see that the theme has changed. As shown
    in Figure 1.6, you can also see other sample themes, and I also added their names
    and how to set them at the bottom of each page:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 重新运行应用后，你应该会看到主题已更改。如图 1.6 所示，你还可以看到其他主题样本，我还在每页底部添加了它们的名称和设置方法。
- en: '![Figure 1.6 – Theme samples and how to set them](img/B16780_01_006.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.6 – 主题样本及其设置方法](img/B16780_01_006.jpg)'
- en: Figure 1.6 – Theme samples and how to set them
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.6 – 主题样本及其设置方法
- en: You can see how easy it is to completely change the look and feel of the app,
    simply by changing one argument. Note also that the color and font size of the
    `<h1>` element were overridden in the style argument. We specifically set the
    color to `"blue"` and the size to `"40px"`. Usually, this is not advisable; for
    example, in the two dark themes in the figure it is very difficult to read the
    blue text. So, be careful when you make such changes.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，通过仅更改一个参数，就能轻松改变应用的外观和感觉。另请注意，`<h1>` 元素的颜色和字体大小在样式参数中被覆盖了。我们特别将颜色设置为 `"blue"`，将大小设置为
    `"40px"`。通常不建议这样做；例如，在图中的两个深色主题下，蓝色文本非常难以阅读。因此，在进行这样的更改时要小心。
- en: Grid system and responsiveness
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网格系统与响应式布局
- en: Another powerful benefit that we get from Bootstrap is its grid system. When
    adding Dash HTML Components, we saw that we can do so by appending items to the
    `children` parameter of the main `html.Div` element. In this case, every added
    item occupies the full width of the screen and takes as much screen height as
    it needs to display its contents. The order of the elements in the list determines
    their order of display on the screen as well.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个我们从 Bootstrap 获得的强大好处是其网格系统。在添加 Dash HTML 组件时，我们看到可以通过将项目附加到主 `html.Div`
    元素的 `children` 参数来完成。在这种情况下，每个添加的项目都会占据屏幕的整个宽度，并根据需要显示内容而占据相应的屏幕高度。列表中元素的顺序决定了它们在屏幕上的显示顺序。
- en: Displaying elements side by side in columns
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在列中并排显示元素
- en: 'While it''s possible to do this by editing the `style` parameter of any HTML
    element, it is a bit tedious and can be brittle. You have to worry about too many
    details, and it might break in unexpected ways. With Bootstrap, you simply define
    a column, and that in turn behaves as an independent screen, displaying its elements
    on top of one another, with each element occupying the full width of this mini
    screen. Columns'' widths can also be specified in powerful and flexible ways.
    The grid system divides the screen into 12 columns, and the width of a column
    can be specified by using a number from 1 to 12 inclusive. Figure 1.7 shows how
    the columns can be defined, and how they would change for screens of different
    size:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然通过编辑任何 HTML 元素的 `style` 参数可以做到这一点，但这有点繁琐，且可能不稳定。你需要关注许多细节，且可能会出现意想不到的问题。使用
    Bootstrap，你只需定义一个列，然后它就会作为一个独立的屏幕，按顺序显示其中的元素，每个元素占据这个小屏幕的整个宽度。列的宽度也可以以强大且灵活的方式进行指定。网格系统将屏幕划分为
    12 列，列的宽度可以通过使用从 1 到 12 的数字来指定。图 1.7 展示了如何定义列，以及它们在不同屏幕尺寸下如何变化：
- en: '![Figure 1.7 – The same column layout on two screen sizes](img/B16780_01_007.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.7 – 两个屏幕尺寸下相同的列布局](img/B16780_01_007.jpg)'
- en: Figure 1.7 – The same column layout on two screen sizes
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.7 – 两个屏幕尺寸下相同的列布局
- en: As you can see, the two screens are identical, and the resizing happens automatically,
    while maintaining the proportions.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，两个屏幕是相同的，且调整大小会自动发生，同时保持比例。
- en: 'In many cases, this might not be exactly what you want. When the screen width
    becomes smaller, it might make more sense to expand the columns to be more easily
    readable by the users. For this, we have the option of specifying the width of
    columns for each of five possible screen widths: `xs` (extra-small), `sm` (small),
    `md` (medium), `lg` (large), and `xl` (extra-large). These are also the names
    of the parameters that you can set:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，这可能并不是你想要的效果。当屏幕宽度变小时，将列扩展以便用户更容易阅读可能更有意义。为此，我们可以选择为五种可能的屏幕宽度指定列的宽度：`xs`（超小型）、`sm`（小型）、`md`（中型）、`lg`（大型）和
    `xl`（超大型）。这些也是你可以设置的参数名称：
- en: '![Figure 1.8 – Granular control of column width based on screen size](img/B16780_01_008.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![Figure 1.8 – Granular control of column width based on screen size](img/B16780_01_008.jpg)'
- en: Figure 1.8 – Granular control of column width based on screen size
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.8 – 基于屏幕大小的列宽细粒度控制
- en: 'Figure 1.8 shows how this is achieved by setting two arguments for the column.
    The way to set these values is simple, as indicated in the figure. The full code
    would be something like this:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.8 显示了如何通过为列设置两个参数来实现这一点。设置这些值的方法很简单，如图中所示。完整的代码可能是这样的：
- en: '[PRE19]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The `lg=6, md=12` arguments simply mean that we want this column to have a width
    of six when the screen is large (`lg`), which means 6 ÷ 12, or half the screen's
    width. On screens of medium size (`md`), set the column width to 12, which means
    the full width of the screen (12 ÷ 12).
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`lg=6, md=12` 参数仅表示当屏幕较大（`lg`）时，我们希望该列宽度为六，即 6 ÷ 12，或者是屏幕宽度的一半。在中等大小的屏幕（`md`）上，设置列宽为
    12，意味着屏幕的完整宽度（12 ÷ 12）。'
- en: 'You might be wondering how we can have the columns in the middle of the page,
    and not starting from the left, as is the case in Figures 1.7 and 1.8\. The width
    and the different size parameters can also take a dictionary, one of the keys
    of which can be `offset`, and this is how you set its horizontal location on the
    screen:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想，如何才能将列放置在页面的中央，而不是像图 1.7 和 1.8 中那样从左侧开始。宽度和不同的尺寸参数也可以接受一个字典，其中一个键可以是 `offset`，它用来设置元素在屏幕上的水平位置：
- en: '[PRE20]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: As you can see, `lg` became a dictionary where we indicated that we want that
    column to skip the first four columns from the left, and be displayed after that,
    in the specified size.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，`lg` 变成了一个字典，其中我们指明要让该列跳过从左边的前四列，之后再按照指定的大小显示。
- en: 'Finally, if you want to place multiple columns next to each other, you simply
    have to place them in a row (with `Row`), and they will be placed next to each
    other:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果你想将多个列放在一起，只需将它们放入一个行元素（`Row`）中，它们就会并排显示：
- en: '![Figure 1.9 – Columns side by side in a row](img/B16780_01_009.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![Figure 1.9 – Columns side by side in a row](img/B16780_01_009.jpg)'
- en: Figure 1.9 – Columns side by side in a row
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.9 – 并排显示的列
- en: 'In order to produce the layout in Figure 1.9, we can simply place the three
    columns in a list and pass it as the `children` parameter to a row element:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 为了生成图 1.9 中的布局，我们只需要将三个列放在一个列表中，并将其作为 `children` 参数传递给一个行元素：
- en: '[PRE21]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Prebuilt components
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 预构建组件
- en: 'While we won''t cover them all, we will be using several of those components,
    and they are generally straightforward to create. Please check the documentation
    for ideas and details of each component: [https://dash-bootstrap-components.opensource.faculty.ai/](https://dash-bootstrap-components.opensource.faculty.ai/).
    We will shortly modify the app to include some prebuilt components.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们不会覆盖所有这些组件，但我们将使用其中的几个，这些组件通常很容易创建。有关每个组件的详细信息和建议，请查阅文档：[https://dash-bootstrap-components.opensource.faculty.ai/](https://dash-bootstrap-components.opensource.faculty.ai/)。我们很快就会修改应用程序，加入一些预构建的组件。
- en: Encoded colors
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编码颜色
- en: Although you can set any color you want for text, background colors, and many
    other elements using its hexadecimal representation, Bootstrap provides a set
    of named colors based on the type of information you are trying to convey. This
    can be set as the `color` parameter in several components, and it would have a
    visual meaning to users. For example, setting `color="danger"` would cause the
    component to appear in red, and `color="warning"` as yellow. The available color
    names are *primary*, *secondary*, *success*, *warning*, *danger*, *info*, *light*,
    and *dark*.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然你可以使用十六进制表示法为文本、背景颜色及许多其他元素设置任何你想要的颜色，Bootstrap 提供了一套根据你传达的信息类型而定的命名颜色。这些颜色可以作为
    `color` 参数设置在多个组件中，并且对用户具有视觉意义。例如，设置 `color="danger"` 会让组件显示为红色，而 `color="warning"`
    则为黄色。可用的颜色名称有 *primary*（主色）、*secondary*（副色）、*success*（成功）、*warning*（警告）、*danger*（危险）、*info*（信息）、*light*（浅色）和
    *dark*（深色）。
- en: Adding Dash Bootstrap components to our app
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向应用中添加 Dash Bootstrap 组件
- en: 'We will now add two new related components to the app: `Tabs` and `Tab`. As
    you might have guessed, `Tabs` is simply a container of `Tab` components. The
    result we are aiming for is adding a little more information to the page, and
    organizing it under new tabs, as you can see in Figure 1.10:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将向应用中添加两个新的相关组件：`Tabs` 和 `Tab`。正如你可能猜到的，`Tabs` 只是 `Tab` 组件的容器。我们希望得到的结果是将更多的信息添加到页面中，并将其按新的选项卡组织，如图
    1.10 所示：
- en: '![Figure 1.10 – Adding tabs to the app](img/B16780_01_010.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.10 – 向应用中添加选项卡](img/B16780_01_010.jpg)'
- en: Figure 1.10 – Adding tabs to the app
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.10 – 向应用中添加选项卡
- en: Tip
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: One of the most important skills to develop while learning Dash is code refactoring.
    While the latest version of the app is still very simple, it is a very good idea
    to make sure you know how to manually refactor the code from the previous version
    to the new one. The more components you have in your app, the more attention you
    will need to give to the refactoring details. I suggest you always do this manually
    and do not simply copy and paste the latest version of the app.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 学习 Dash 时，最重要的技能之一就是代码重构。虽然应用的最新版本仍然非常简单，但确保你知道如何将旧版本的代码手动重构为新版本是一个非常好的主意。你在应用中拥有的组件越多，你就需要更多地关注重构的细节。我建议你始终手动进行重构，而不是简单地复制并粘贴应用的最新版本。
- en: 'In order to create the tabs, and get the new content in the form you see in
    Figure 1.10, you will need to make the following changes:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建选项卡，并获得如图 1.10 所示的内容形式，你需要做以下更改：
- en: '[PRE22]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: As you can see, we have added one `Tabs` element, within which we added two
    `Tab` elements. In the first one, we simply used the same code that went into
    defining our ordered list. In the second, we added a similar unordered list with
    new content. OK, you can copy this part if you want! You can also see how to specify
    the labels of the tabs, by setting a value for the `label` parameter.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们添加了一个 `Tabs` 元素，在其中添加了两个 `Tab` 元素。在第一个选项卡中，我们简单地使用了定义有序列表的相同代码。在第二个选项卡中，我们添加了一个类似的无序列表，并加入了新的内容。好的，如果你愿意，可以复制这一部分！你还可以看到如何通过为
    `label` 参数设置值来指定选项卡的标签。
- en: Now you can run your updated app again, and make sure that the new content went
    to the right place, and that the tabs work as expected.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以再次运行更新后的应用，确保新内容已正确放置，并且选项卡按预期工作。
- en: We are now ready to add some interactivity to our app.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备为我们的应用添加一些交互性。
- en: Summary
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We have learned how to create a minimal app and saw indeed how simple the process
    is. We then explored the main Dash packages used to create visual elements on
    a web page. With what we covered in this chapter, you have enough information
    to create almost any layout, with any elements you want on a page. The discussion
    and examples were not comprehensive, however. We will be using and discussing
    those components and many others, so you can master their use.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学习了如何创建一个最小化的应用，并且确实看到这个过程是多么简单。然后我们探索了用于在网页上创建可视化元素的主要 Dash 包。通过本章的内容，你已经掌握了足够的信息来创建几乎任何布局，并且可以在页面上放置你想要的任何元素。然而，讨论和示例并不全面。我们将使用并讨论这些组件以及许多其他组件，以便你能够精通它们的使用。
- en: In the next chapter, we will turn our attention to the mechanism of adding interactivity
    to our app. We will set up the app such that the user will be able to explore
    different options by selecting what exactly they would like to analyze from our
    dataset.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将把注意力转向如何为我们的应用添加交互性。我们将设置应用，使用户能够通过选择他们想分析的数据集中的内容来探索不同的选项。
