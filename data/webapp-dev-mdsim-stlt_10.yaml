- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '10'
- en: Utilizing Pretrained Models to Create Specialized and Personalized Web Applications
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用预训练模型创建专门化和个性化的 Web 应用程序
- en: So far, we have used Streamlit’s components and libraries, made in Python, to
    create and build up our web application. However, with Streamlit, we can do even
    more.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经使用了 Streamlit 的组件和库（由 Python 编写）来创建和构建我们的 Web 应用程序。然而，使用 Streamlit，我们可以做得更多。
- en: This incredible framework is extremely powerful when used with **artificial
    intelligence** (**AI**) models to make predictions. Developing **machine learning**
    (**ML**) models or neural networks is something very complex and outside the scope
    of this book, but considering that there are a lot of pretrained models available
    that perform well to provide solutions for many different use cases, knowing how
    to use them in our web application to increase their effectiveness and usefulness
    is something very important.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这个令人难以置信的框架在与**人工智能**（**AI**）模型结合进行预测时极为强大。开发**机器学习**（**ML**）模型或神经网络是一个非常复杂的过程，超出了本书的范围，但考虑到有许多表现优秀的预训练模型可以为不同的使用场景提供解决方案，了解如何在我们的
    Web 应用程序中使用这些模型，以提高其效果和实用性，是非常重要的。
- en: Simply put, importing and using pretrained ML models in Streamlit is an advanced
    technique for creating very powerful web applications. Users can import any kind
    of pretrained model and use it to make predictions on new data within their Streamlit
    web apps. This opens a world of new, more customized, and specialized applications
    tailored to any kind of specific needs.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，在 Streamlit 中导入并使用预训练 ML 模型是一种高级技术，可以创建非常强大的 Web 应用程序。用户可以导入任何类型的预训练模型，并使用它在
    Streamlit Web 应用程序中对新数据进行预测。这为开发者开启了一个全新的、更具定制化和专门化的应用世界，可以根据特定需求量身定制。
- en: 'In this chapter, we’ll cover the following main topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Understanding the benefits of pretrained ML models
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解预训练 ML 模型的好处
- en: Creating customized web apps to improve user experience
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建定制的 Web 应用程序以改善用户体验
- en: Utilizing predictions from ML
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用机器学习（ML）的预测
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'In this chapter, we will be using the following libraries, packages, and tools:'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用以下库、包和工具：
- en: Sublime Text
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sublime Text
- en: Python 3
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 3
- en: '`pipenv`'
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pipenv`'
- en: Streamlit
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Streamlit
- en: '`OpenCV`'
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OpenCV`'
- en: Pillow
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pillow
- en: '`numpy`'
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy`'
- en: '`tensorflow`'
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tensorflow`'
- en: 'The code for this chapter can be found in this book’s GitHub repository: [https://github.com/PacktPublishing/Web-App-Development-Made-Simple-with-Streamlit/tree/7c29f4eca8b189b4f711cc8f724c6dee9dba60ab/Chapter10](https://github.com/PacktPublishing/Web-App-Development-Made-Simple-with-Streamlit/tree/7c29f4eca8b189b4f711cc8f724c6dee9dba60ab/Chapter10).'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章的代码可以在本书的 GitHub 仓库中找到：[https://github.com/PacktPublishing/Web-App-Development-Made-Simple-with-Streamlit/tree/7c29f4eca8b189b4f711cc8f724c6dee9dba60ab/Chapter10](https://github.com/PacktPublishing/Web-App-Development-Made-Simple-with-Streamlit/tree/7c29f4eca8b189b4f711cc8f724c6dee9dba60ab/Chapter10)。
- en: Understanding the benefits of pretrained ML models
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解预训练 ML 模型的好处
- en: In this short section, I will try to clarify why using pretrained ML models
    inside our web applications can be a very good and valuable idea.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一简短部分中，我将尝试阐明为什么在我们的 Web 应用程序中使用预训练的 ML 模型是一个非常好的、有价值的想法。
- en: ML has rapidly evolved in recent years, offering unprecedented opportunities
    to enhance web applications with intelligent and predictive features. Streamlit,
    a popular Python library for creating interactive web applications, has gained
    immense popularity due to its simplicity and flexibility. When combined with pretrained
    ML models, Streamlit can empower developers to build web applications that leverage
    the vast potential of AI.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 近年来，机器学习（ML）迅速发展，为增强 Web 应用程序提供了前所未有的机会，能够为其增加智能和预测功能。Streamlit 是一个流行的 Python
    库，用于创建交互式 Web 应用程序，因其简单性和灵活性而受到广泛欢迎。当与预训练的 ML 模型结合时，Streamlit 可以帮助开发人员构建能够利用 AI
    巨大潜力的 Web 应用程序。
- en: Pretrained ML models are models that have been trained on large datasets for
    various tasks, such as image recognition, natural language processing, and more.
    These models have learned rich data representations and can be fine-tuned for
    specific applications. Incorporating pretrained models into Streamlit web applications
    can significantly enhance their capabilities and provide a seamless user experience.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 预训练的 ML 模型是已经在大规模数据集上训练好的模型，用于处理各种任务，如图像识别、自然语言处理等。这些模型已经学习到丰富的数据表示，并且可以针对特定应用进行微调。将预训练模型集成到
    Streamlit Web 应用程序中，可以显著增强其功能并提供无缝的用户体验。
- en: 'Here are some of the key benefits associated with using pretrained AI models:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用预训练 AI 模型的一些关键好处：
- en: '**Efficient development**: One of the primary benefits of using pretrained
    models is the reduction in development time. Instead of starting from scratch
    and training a model from the ground up, developers can leverage existing pretrained
    models, saving both time and resources. Streamlit’s straightforward interface
    complements this efficiency by enabling developers to quickly integrate these
    models into their applications.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高效开发**：使用预训练模型的主要好处之一是减少了开发时间。开发者不需要从零开始训练模型，而是可以利用现有的预训练模型，节省时间和资源。Streamlit
    简单的界面增强了这一效率，使开发者能够快速将这些模型集成到他们的应用中。'
- en: '**Improved user experience**: Pretrained models bring state-of-the-art capabilities
    to web applications, enabling features such as image recognition, sentiment analysis,
    and language translation. Users can interact with the application more naturally,
    making it more engaging and user-friendly. For example, a product recommendation
    system powered by a pretrained model can enhance the shopping experience on an
    e-commerce website built with Streamlit.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**改善用户体验**：预训练模型将最先进的能力带入 Web 应用，启用图像识别、情感分析和语言翻译等功能。用户可以更自然地与应用互动，使其更加吸引人且易于使用。例如，由预训练模型驱动的产品推荐系统可以增强基于
    Streamlit 构建的电子商务网站的购物体验。'
- en: '**Scalability and performance**: Pretrained models are often designed to handle
    complex tasks, making them suitable for a wide range of applications. Streamlit’s
    ability to efficiently serve web applications makes it a perfect companion for
    pretrained models. Whether it’s processing large datasets or performing real-time
    predictions, the combination of Streamlit and pretrained models ensures high scalability
    and performance.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性和性能**：预训练模型通常被设计用于处理复杂任务，使其适用于广泛的应用场景。Streamlit 高效地提供 Web 应用的能力，使其成为预训练模型的完美搭档。无论是处理大型数据集，还是执行实时预测，Streamlit
    和预训练模型的结合确保了高可扩展性和性能。'
- en: '**Customization and fine-tuning**: While pretrained models provide a solid
    foundation, developers can fine-tune these models to adapt them to specific requirements.
    Streamlit’s flexibility allows for the easy integration of customized models and
    tailored user interfaces. This combination empowers developers to create unique
    and highly specialized applications.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**定制和微调**：虽然预训练模型提供了坚实的基础，开发者仍然可以对这些模型进行微调，以适应特定需求。Streamlit 的灵活性使得定制化模型和量身定制的用户界面的集成变得更加容易。这一结合使开发者能够创建独特且高度专业化的应用程序。'
- en: 'The potential applications of pretrained ML models within Streamlit-based web
    applications are vast and diverse. Here are some examples:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 预训练机器学习模型在基于 Streamlit 的 Web 应用中的潜在应用广泛且多样。以下是一些例子：
- en: '**Healthcare**: Streamlit applications can utilize pretrained models for medical
    image analysis, disease diagnosis, and patient risk prediction, providing valuable
    tools for healthcare professionals'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**医疗健康**：Streamlit 应用可以利用预训练模型进行医学图像分析、疾病诊断和患者风险预测，为医疗专业人员提供有价值的工具。'
- en: '**E-commerce**: Recommender systems powered by pretrained models can enhance
    product discovery, boosting sales and user satisfaction'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**电子商务**：由预训练模型驱动的推荐系统可以提升产品发现，推动销售并提高用户满意度。'
- en: '**Natural language processing**: Sentiment analysis, chatbots, and language
    translation can improve user interactions in various applications, from customer
    support to social media platforms'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自然语言处理**：情感分析、聊天机器人和语言翻译可以提升各类应用中的用户互动，从客户支持到社交媒体平台。'
- en: '**Finance**: Fraud detection, credit scoring, and stock market prediction can
    benefit from the predictive power of pretrained models, helping businesses make
    informed decisions'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**金融**：欺诈检测、信用评分和股市预测可以从预训练模型的预测能力中受益，帮助企业做出明智的决策。'
- en: To summarize, the fusion of pretrained ML models and Streamlit-based web applications
    represents a promising frontier in the world of AI-driven development. This synergy
    allows developers to create intelligent and interactive web applications quickly
    and efficiently. As technology advances, this combination’s potential applications
    are limited only by our imagination. By harnessing the power of pretrained models
    within Streamlit, we can deliver cutting-edge solutions that transform the way
    we interact with web applications, making them smarter, more engaging, and more
    useful to users across various domains.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，预训练的机器学习模型与基于Streamlit的网页应用程序的融合代表了AI驱动开发领域的一个有前景的前沿。这种协同作用使开发者能够快速高效地创建智能互动的网页应用程序。随着技术的进步，这种结合的潜在应用仅限于我们的想象力。通过在Streamlit中利用预训练模型的强大功能，我们可以提供前沿的解决方案，改变我们与网页应用程序的交互方式，使它们变得更智能、更具吸引力，也更有用，适用于各个领域的用户。
- en: Creating customized web apps to improve user experience
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建定制化的网页应用程序以改善用户体验
- en: 'Now, it’s time to complete our *Covid-19 Detection Tool* web application. So
    far, we have implemented several features, such as **Image Enhancement** and **Disclaimer
    and Info**, but we are still missing the **Diagnosis** section. *Figure 10**.1*
    shows what we have completed so far:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候完成我们的*Covid-19检测工具*网页应用程序了。到目前为止，我们已经实现了几个功能，比如**图像增强**和**免责声明及信息**，但我们仍然缺少**诊断**部分。*图10.1*展示了我们目前为止完成的部分：
- en: '![Figure 10.1: The Covid-19 Detection Tool web app we’ve developed so far](img/B21147_10_01.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图10.1：到目前为止我们开发的Covid-19检测工具网页应用程序](img/B21147_10_01.jpg)'
- en: 'Figure 10.1: The Covid-19 Detection Tool web app we’ve developed so far'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.1：到目前为止我们开发的Covid-19检测工具网页应用程序
- en: As I mentioned in [*Chapter 9*](B21147_09.xhtml#_idTextAnchor099), the task
    of **Diagnosis** is to understand from a picture, specifically from an X-ray of
    the chest, whether or not a patient has Covid-19.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我在[*第9章*](B21147_09.xhtml#_idTextAnchor099)中提到的，**诊断**的任务是从图片，特别是从胸部X光片中，判断一个病人是否患有Covid-19。
- en: This kind of prediction can be performed using a pretrained AI model, which
    in our case is a **convolutional neural network** (**CNN**). A CNN is a neural
    network with a peculiar structure or shape that performs very well regarding tasks
    related to computer vision. **Computer vision**, in a few words, means to make
    computers understand what’s going on with a picture, its content, the objects
    represented inside it, and so on.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这种预测可以通过使用预训练的AI模型来执行，在我们的案例中是**卷积神经网络**（**CNN**）。CNN是一种具有特殊结构或形状的神经网络，在计算机视觉相关任务上表现非常出色。**计算机视觉**简而言之就是让计算机理解图片中发生了什么，它的内容、其中表示的物体等等。
- en: So, let’s see how it is possible to use a pretrained AI model inside Streamlit
    to perform, in this case, a computer vision task, but more generally, a prediction.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们看看如何在Streamlit中使用预训练的AI模型来执行计算机视觉任务，在这种情况下是进行预测。
- en: 'We need to start from the point where we stopped in [*Chapter 9*](B21147_09.xhtml#_idTextAnchor099):
    the `if` clause related to the **Diagnosis** voice of the menu, as shown in the
    following figure:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要从我们在[*第9章*](B21147_09.xhtml#_idTextAnchor099)停止的地方继续：与菜单中**诊断**选项相关的`if`语句，如下图所示：
- en: '![Figure 10.2: The “Diagnosis” voice of the menu](img/B21147_10_02.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图10.2：菜单中的“诊断”选项](img/B21147_10_02.jpg)'
- en: 'Figure 10.2: The “Diagnosis” voice of the menu'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.2：菜单中的“诊断”选项
- en: The first step is to add a button in the sidebar. In this way, when the user
    clicks on this button (its label will be **Diagnosis**), the tool will perform
    a binary classification while leveraging the pretrained model to predict whether
    or not the X-ray image represents a case of Covid-19.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是在侧边栏中添加一个按钮。这样，当用户点击该按钮（其标签为**诊断**）时，工具将执行二元分类，利用预训练模型预测X光图像是否代表Covid-19病例。
- en: 'Adding the button, as we know, is very easy – it’s just a matter of typing
    the following immediately after `choice==''Diagnosis''`:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 添加按钮我们知道是非常简单的——只需要在`choice=='Diagnosis'`之后立即输入以下几行代码：
- en: '[PRE0]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The CNN we are going to use was trained with black and white images. So, first
    of all, when the user clicks on the `numpy`, a library that we’ve already imported.
    The three lines of code we need are as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用的CNN是通过黑白图像训练的。因此，首先，当用户点击`numpy`时，这是我们已经导入的一个库。我们需要的三行代码如下：
- en: '[PRE1]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The code in the first line changes the image into an array, the second line
    converts the image into a grayscale domain, and the final one converts it into
    a pure black and white image. Please note that we are leveraging `cv2`, the Python
    library for computer vision that was imported at the beginning of the file.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行代码将图像转换为数组，第二行将图像转换为灰度域，最后一行将其转换为纯黑白图像。请注意，我们正在使用 `cv2`，这是文件开头导入的 Python
    计算机视觉库。
- en: This black and white image is saved in a variable named `gray`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这张黑白图像保存在一个名为 `gray` 的变量中。
- en: Note
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Studying the several Python packages we are importing and using is outside the
    scope of this book; however, having a look at the `cv2` (OpenCV) official website
    [https://opencv.org/](https://opencv.org/)) can be a very interesting activity.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 学习我们正在导入并使用的几个 Python 包超出了本书的范围；然而，查看 `cv2`（OpenCV）官方网站 [https://opencv.org/](https://opencv.org/)
    可能是一个非常有趣的活动。
- en: 'After converting the uploaded image, we are ready to write some text on the
    screen (`"Chest X-Ray"`) to give our operation some context and print the black
    and white image:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在转换上传的图像后，我们已经准备好在屏幕上写一些文本（`"Chest X-Ray"`）来为我们的操作提供一些上下文，并打印出黑白图像：
- en: '[PRE2]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here’s the code we’ve added so far:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经添加的代码如下：
- en: '![Figure 10.3: The code we’ve added to the Diagnosis menu](img/B21147_10_03.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.3：我们已添加到诊断菜单的代码](img/B21147_10_03.jpg)'
- en: 'Figure 10.3: The code we’ve added to the Diagnosis menu'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.3：我们已添加到诊断菜单的代码
- en: 'From the browser’s point of view, you should get something like this:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 从浏览器的角度来看，您应该看到如下内容：
- en: '![Figure 10.4: The Diagnosis button and the black and white image](img/B21147_10_04.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.4：诊断按钮和黑白图像](img/B21147_10_04.jpg)'
- en: 'Figure 10.4: The Diagnosis button and the black and white image'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.4：诊断按钮和黑白图像
- en: Since the CNN was trained with black and white images in a specific format in
    terms of size and values, before performing the prediction, we must pre-process
    the image we are interested in to get the same format that the neural network
    is expecting.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 CNN 是用特定格式的黑白图像进行训练的，包括大小和数值，在进行预测之前，我们必须对感兴趣的图像进行预处理，以获得神经网络所期望的相同格式。
- en: The neural network was trained with images that had a size of 200 pixels by
    200 pixels and their values went from 0 up to 1, where 0 was black and 1 was white.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 神经网络是用大小为 200 像素乘 200 像素，数值范围从 0 到 1 的图像进行训练的，其中 0 表示黑色，1 表示白色。
- en: 'The code we need to write to make sure the image we uploaded will be in the
    format needed by the neural network is as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要编写的代码，以确保上传的图像符合神经网络所需的格式如下：
- en: '[PRE3]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The first line is just an image size definition that is saved in a constant.
    The second line performs image equalization, an operation that potentially increases
    the clarity of our image. The third line resizes the image according to the `IMG_SIZE`
    dimension saved in the constant, and the final instruction normalizes the image
    (usually, the values of gray tones go from 0 (black) to 255 (white); dividing
    everything by 255, we have values from 0 to 1, which are black and white, respectively).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行仅是一个图像大小定义，保存在常量中。第二行执行图像均衡化操作，这个操作可能会提高图像的清晰度。第三行根据保存在常量中的 `IMG_SIZE` 尺寸调整图像大小，最后一行对图像进行归一化处理（通常，灰度值从
    0（黑色）到 255（白色）；将所有值除以 255，得到的值范围是 0 到 1，分别表示黑色和白色）。
- en: '*Figure 10**.5* shows the lines of code we just explained:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10.5* 显示了我们刚才解释的代码行：'
- en: '![Figure 10.5: Pre-processing the X-ray image](img/B21147_10_05.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.5：X 光图像的预处理](img/B21147_10_05.jpg)'
- en: 'Figure 10.5: Pre-processing the X-ray image'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.5：X 光图像的预处理
- en: 'The library we are using to manage neural networks is named `tensorflow` and
    it requires the images in a precise format (`n,m,p,q`), where `n`, `m`, `p`, and
    `q` are integers. Unfortunately, the shape of our image is only `(200,200)`. So,
    before we use it for prediction, we must resize it; this is the instruction we
    should use:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们用来管理神经网络的库名为 `tensorflow`，它要求图像以精确的格式（`n,m,p,q`）提供，其中 `n`、`m`、`p` 和 `q` 都是整数。不幸的是，我们的图像的形状仅为
    `(200,200)`。因此，在我们使用它进行预测之前，必须先调整它的大小；这是我们应该使用的指令：
- en: '[PRE4]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: By processing the image in this way, we have a very good input for ML classifiers.
    We’ll learn how to deal with this task in the next section.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式处理图像，我们为机器学习分类器提供了非常好的输入。我们将在下一节学习如何处理这个任务。
- en: Utilizing predictions from ML
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用机器学习的预测结果
- en: At this point, everything is ready. Now, to be able to perform predictions about
    Covid-19 from an X-ray image, we need to load our pretrained model (available
    in this chapter’s GitHub repository; the link can be found in the *Technical requirements*
    section) and use it with the uploaded picture (pre-processed according to the
    code we wrote in the *Creating customized web apps to improve user experience*
    section). As explained in the *Understanding the benefits of pretrained ML models*
    section, using a pretrained model is an easy and fast way to solve a problem without
    spending time developing an AI model by ourselves. In our specific case, we can
    predict the presence of Covid-19 from an image just by loading and using a model
    developed and made available by others.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，一切准备就绪。现在，为了能够根据 X 光图像进行 Covid-19 的预测，我们需要加载我们预训练的模型（该模型可以在本章的 GitHub
    仓库中找到；链接可以在*技术要求*部分找到），并将其与上传的图片一起使用（图片经过我们在*创建定制化 Web 应用程序以改善用户体验*部分中编写的代码处理）。正如在*理解预训练机器学习模型的优势*部分中所解释的，使用预训练模型是一种轻松快速的解决问题的方法，无需自己花时间开发
    AI 模型。在我们具体的案例中，我们只需要加载并使用他人开发并提供的模型，就可以从图像中预测是否存在 Covid-19。
- en: 'Let’s start writing:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始编写代码：
- en: '[PRE5]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the preceding code, `tf` is the alias of `tensorflow`, and `keras` is a module
    inside it. So, we just pass to the `load_model` method the path to our pretrained
    model (please note that the file type of `tensorflow` models is `h5`) and save
    it into a variable named `model`. Please note that the pretrained CNN was put
    in a directory named `models`, so if you changed its position, please update the
    path in the code accordingly.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，`tf`是`tensorflow`的别名，`keras`是它的一个模块。所以，我们只需将预训练模型的路径传递给`load_model`方法（请注意，`tensorflow`模型的文件类型是`h5`），并将其保存到一个名为`model`的变量中。请注意，预训练的
    CNN 被放置在一个名为`models`的目录中，所以如果你改变了它的位置，请相应地更新代码中的路径。
- en: 'This is the code we’ve implemented so far:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们到目前为止实现的代码：
- en: '![Figure 10.6: Image reshaping and model loading](img/B21147_10_06.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.6：图像重塑和模型加载](img/B21147_10_06.jpg)'
- en: 'Figure 10.6: Image reshaping and model loading'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.6：图像重塑和模型加载
- en: 'Our model variable has a method named `predict` that returns the probability
    of the prediction in a list containing two elements: the probability of no Covid
    and the probability of Covid. Since we are performing a binary classification
    (true or false, so no Covid or Covid) we want to know whether or not the picture
    represents a case of Covid; we can do this using the `argmax` method of `np` (`numpy`).
    `argmax` checks the values of a list and provides the index of the maximum value,
    which in our case is `0` or `1` (`0` in the case of no Covid and `1` in the case
    of Covid). So, if the prediction result is a list such as [`0.70`, `0.30`], `argmax`
    will return `0`; the first index starts from `0` (because `0.70` is greater than
    `0.30`), which means that the diagnosis is no Covid since the probability of no
    Covid is `70%`, while the probability of Covid is `30%`.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的模型变量有一个名为`predict`的方法，该方法返回一个包含两个元素的列表：没有 Covid 的概率和 Covid 的概率。由于我们进行的是二分类（真或假，也就是没有
    Covid 或有 Covid），我们需要知道图片是否代表 Covid 病例；我们可以通过使用 `np`（`numpy`）的 `argmax` 方法来实现这一点。`argmax`
    检查列表中的值，并提供最大值的索引，在我们的情况下是`0`或`1`（`0`表示没有 Covid，`1`表示有 Covid）。所以，如果预测结果是一个列表，如[`0.70`,
    `0.30`]，`argmax`将返回`0`；索引从`0`开始（因为`0.70`大于`0.30`），这意味着诊断结果是没有 Covid，因为没有 Covid
    的概率是`70%`，而 Covid 的概率是`30%`。
- en: 'To complete the **Diagnosis** voice of the menu, we can add the following code:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成菜单中的**诊断**选项，我们可以添加以下代码：
- en: '[PRE6]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here is the code we implemented:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是我们实现的代码：
- en: '![Figure 10.7: How we get the prediction](img/B21147_10_07.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.7：我们是如何获取预测结果的](img/B21147_10_07.jpg)'
- en: 'Figure 10.7: How we get the prediction'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.7：我们是如何获取预测结果的
- en: At this point, we have everything we need to display the result on the screen.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，我们已经拥有了显示结果所需的一切。
- en: 'Now, as the first frontend element, we must create a progress bar in the sidebar
    that indicates the status of the diagnosis prediction. For this, we can write
    the following:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，作为第一个前端元素，我们必须在侧边栏创建一个进度条，用于显示诊断预测的状态。为此，我们可以编写以下代码：
- en: '[PRE7]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'A progress bar always works with a timer, so we should *import time* at the
    very beginning of our Python file. This is the reason we did this when we started
    this project (see *Figure 8**.4* in [*Chapter 8*](B21147_08.xhtml#_idTextAnchor091)).
    Let’s continue by adding the following code:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 进度条总是与定时器一起工作的，因此我们应该在Python文件的开头就*导入时间模块*。这就是我们在开始这个项目时所做的（见[第8章](B21147_08.xhtml#_idTextAnchor091)中的*图
    8.4*）。让我们继续添加以下代码：
- en: '[PRE8]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In this way, we create a `for` loop that sleeps for `0.05` seconds and then
    activates the progress bar, extending it by `1` unit (the progress bar was instantiated
    with a value of `0`), repeating this operation `100` times since our progress
    bar’s range goes from `0` up to `100` units.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，我们创建了一个`for`循环，每次暂停`0.05`秒后激活进度条，延伸`1`个单位（进度条初始值为`0`），由于进度条的范围从`0`到`100`单位，因此此操作会重复`100`次。
- en: This progress bar indicates that the prediction is ongoing until it reaches
    its maximum value and stops extending.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 该进度条表示预测正在进行中，直到它达到最大值并停止延伸。
- en: 'When the progress bar is completely extended, we can print the diagnosis on
    the screen, explaining what kind of prediction we are dealing with. For this,
    we can type the following:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 当进度条完全展开时，我们可以在屏幕上打印诊断结果，解释我们正在处理哪种预测。为此，我们可以输入以下内容：
- en: '[PRE9]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This is the code we added for the frontend part – that is, the part that is
    visualized in the browser:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们为前端部分添加的代码——也就是在浏览器中可视化的部分：
- en: '![Figure 10.8: How we get the prediction and visualize it on the screen](img/B21147_10_08.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.8：我们如何获得预测并将其可视化到屏幕上](img/B21147_10_08.jpg)'
- en: 'Figure 10.8: How we get the prediction and visualize it on the screen'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.8：我们如何获得预测并将其可视化到屏幕上
- en: 'This is the result in the browser in the case of a no Covid prediction:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这是浏览器中没有Covid预测时的结果：
- en: '![Figure 10.9: No Covid diagnosis](img/B21147_10_09.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.9：没有Covid的诊断结果](img/B21147_10_09.jpg)'
- en: 'Figure 10.9: No Covid diagnosis'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.9：没有Covid的诊断结果
- en: Since the model we are using to perform the prediction is just a *toy model*
    and there is no clinical value in the diagnosis that’s made using it, it’s better
    to add a final disclaimer to our application.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们用来执行预测的模型仅仅是一个*玩具模型*，并且通过它做出的诊断没有临床价值，因此最好在我们的应用中添加一个最终的免责声明。
- en: 'Let’s add something like this:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加类似这样的内容：
- en: '[PRE10]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Our final code for the **Diagnosis** voice of the menu is as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的菜单中**诊断**选项的最终代码如下：
- en: '![Figure 10.10: Complete code for the “Diagnosis” voice of the menu](img/B21147_10_10.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.10：菜单中“诊断”选项的完整代码](img/B21147_10_10.jpg)'
- en: 'Figure 10.10: Complete code for the “Diagnosis” voice of the menu'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.10：菜单中“诊断”选项的完整代码
- en: 'And this is the disclaimer on the browser:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这是浏览器中的免责声明：
- en: '![Figure 10.11: Prediction with the disclaimer](img/B21147_10_11.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.11：带免责声明的预测](img/B21147_10_11.jpg)'
- en: 'Figure 10.11: Prediction with the disclaimer'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.11：带免责声明的预测
- en: Please remember that the point here is not to get a very well-performing model
    to predict cases of Covid-19 but to understand how to integrate AI models inside
    Streamlit.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，这里重点不是要获得一个高性能的模型来预测Covid-19病例，而是理解如何将AI模型集成到Streamlit中。
- en: Let’s dive deeper into what we achieved in this chapter.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更深入地探讨我们在这一章中取得的成就。
- en: First of all, in addition to `tensorflow`, as in the case of our web application,
    AI models can be trained with other packages such as `scikit-learn`. Due to this,
    it’s very important that before loading the model into your Streamlit web application,
    you carefully read the documentation of the specific package that was used to
    train the model. Different packages usually adopt different syntaxes to load their
    models. This means that according to the model you decide to adopt, you must use
    a different syntax in your code.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，除了`tensorflow`，像我们在网页应用中使用的那样，AI模型还可以使用其他包进行训练，如`scikit-learn`。因此，在将模型加载到您的Streamlit网页应用之前，仔细阅读用于训练模型的特定包的文档是非常重要的。不同的包通常采用不同的语法来加载它们的模型。这意味着，根据您决定采用的模型，您必须在代码中使用不同的语法。
- en: The second and most important point is that the web application we just implemented
    is quite powerful since it performs several complex tasks, such as image enhancements,
    diagnosis, and more. Even though it’s complex, when we count the lines of code
    we wrote down, we will see that from the very beginning to the end, we wrote just
    about 130 lines of Python, comments included. This is the real power of Python
    and Streamlit together. In a few lines of code, we implemented a web application
    that performs several complex tasks, even leveraging AI. On top of that, we have
    all the typical widgets that are typically included in very professional applications,
    such as different kinds of text, buttons, progress bars, and more.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个也是最重要的点是，我们刚刚实现的这个网页应用非常强大，因为它执行了多个复杂的任务，如图像增强、诊断等。尽管它很复杂，但当我们统计写下的代码行数时，会发现从头到尾我们只写了大约130行Python代码（包括注释）。这正是Python和Streamlit结合的真正力量。在几行代码中，我们实现了一个执行多个复杂任务的网页应用，甚至利用了AI。更重要的是，我们还具备了所有典型的部件，这些部件通常包含在非常专业的应用中，如各种文本、按钮、进度条等。
- en: 'As usual, and considering that this time the code is even more complex, here
    are some screenshots of the complete transcript of the web application we just
    completed:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 像往常一样，考虑到这次代码更加复杂，下面是我们刚刚完成的网页应用的完整代码截图：
- en: '![Figure 10.12: Part 1 of the Covid-19 Detection Tool web app](img/B21147_10_12.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![图10.12：Covid-19检测工具网页应用第1部分](img/B21147_10_12.jpg)'
- en: 'Figure 10.12: Part 1 of the Covid-19 Detection Tool web app'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.12：Covid-19检测工具网页应用第1部分
- en: 'First, we imported the libraries and defined the main function. The main function
    starts by creating a beautiful title and then continues with the presence of a
    `file_uploader` widget. After that, there is a menu containing three voices –
    **Image Enhancement**, **Diagnosis**, and **Disclaimer** **and Info**:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们导入了库并定义了主函数。主函数从创建一个美观的标题开始，然后继续显示一个`file_uploader`小部件。之后，出现了一个包含三种声音的菜单——**图像增强**、**诊断**和**免责声明及信息**：
- en: '![Figure 10.13: Part 2 of the Covid-19 Detection Tool web app](img/B21147_10_13.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![图10.13：Covid-19检测工具网页应用第2部分](img/B21147_10_13.jpg)'
- en: 'Figure 10.13: Part 2 of the Covid-19 Detection Tool web app'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.13：Covid-19检测工具网页应用第2部分
- en: 'Then, we mainly dealt with the **Image Enhancement** feature and completed
    the **Diagnosis** part. In this part, we pre-processed the image, prepared it
    for the ML model, loaded the classification model and a pretrained CNN, executed
    the prediction, and introduced some nice widgets, such as the progress bar:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们主要处理了**图像增强**功能，并完成了**诊断**部分。在这部分中，我们对图像进行了预处理，为ML模型做准备，加载了分类模型和预训练的CNN，执行了预测，并引入了一些漂亮的小部件，如进度条：
- en: '![Figure 10.14: Part 3 of the Covid-19 Detection Tool web app](img/B21147_10_14.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![图10.14：Covid-19检测工具网页应用第3部分](img/B21147_10_14.jpg)'
- en: 'Figure 10.14: Part 3 of the Covid-19 Detection Tool web app'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.14：Covid-19检测工具网页应用第3部分
- en: Finally, we just suggested simple text for the **Disclaimer and Info** section
    and created the **About the Author** information page.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们为**免责声明及信息**部分提供了简单的文本，并创建了**关于作者**的信息页面。
- en: Summary
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter was very important since we learned how to integrate AI into our
    web applications.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 本章非常重要，因为我们学会了如何将AI集成到我们的网页应用中。
- en: AI is a highly disruptive technology that can completely change the game when
    managed and leveraged properly in our applications. In this chapter, we learned
    that it is possible to include AI models developed and trained separately in Streamlit.
    Several packages and tools can create AI models, and almost all these models can
    be included in Streamlit; it’s only a matter of checking the proper documentation
    and following the rules.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: AI是一项具有高度颠覆性的技术，当在我们的应用程序中得到妥善管理和利用时，能够彻底改变游戏规则。在这一章中，我们学到了如何将独立开发和训练的AI模型集成到Streamlit中。许多包和工具可以创建AI模型，几乎所有这些模型都可以被集成到Streamlit中；这只是一个检查适当文档并遵循规则的问题。
- en: Loading AI models into our web applications is only one part of the process
    since each model needs to be fed information in a specific format. For this reason,
    all the data we provide as input to the model that we decide to use must be pre-processed
    so that it’s compliant with that specific format. This is the reason why we spent
    a good amount of our time manipulating and transforming the image of the X-ray
    we uploaded in a format that’s compatible with the CNN model we used. The uploaded
    image was converted into black and white, then resized and reshaped.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 将 AI 模型加载到我们的网页应用程序中只是这个过程的一部分，因为每个模型都需要以特定格式输入信息。因此，我们提供给模型的所有数据必须进行预处理，以确保符合该特定格式。这就是为什么我们花费了大量时间处理并转换我们上传的
    X 光图像，使其兼容我们使用的 CNN 模型的原因。上传的图像被转换为黑白图像，接着进行了调整大小和形状转换。
- en: Having the input in the proper format is extremely important; otherwise, the
    model will not understand what to do and will generate a runtime error. After
    pre-processing the image, we focused on the prediction; we learned how to perform
    predictions and interpret them. Finally, we covered the frontend part and took
    care of visualizing the predictions in the web browser using beautiful effects
    such as the progress bar. We observed that when dealing with sensitive topics
    such as health, it’s good practice to include a disclaimer to avoid potential
    issues.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 输入以正确格式提供非常重要；否则，模型将无法理解该做什么，并会生成运行时错误。在预处理图像之后，我们专注于预测；我们学习了如何进行预测并进行解读。最后，我们涵盖了前端部分，并利用进度条等美丽的效果在网页浏览器中展示预测结果。我们观察到，在处理诸如健康等敏感话题时，包含免责声明是良好的实践，以避免潜在问题。
- en: Having a working application is a very good starting point but it is not the
    real conclusion of our job. As we already did with the natural language processing
    web application, we still have to deploy our new tool to the cloud because only
    with deployment is it possible to build a well-done and well-performing application
    available to a very wide customer base. This is exactly what we are going to do
    in the next chapter.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有一个可用的应用程序是一个很好的起点，但这并不是我们工作的真正结论。正如我们在自然语言处理网页应用程序中所做的那样，我们仍然需要将我们的新工具部署到云端，因为只有通过部署，才能构建出一个做得好、表现优异的应用程序，并且能够为广泛的客户群体提供服务。这正是我们将在下一章中完成的任务。
