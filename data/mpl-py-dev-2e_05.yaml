- en: Embedding Matplotlib in GTK+3
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在GTK+3中嵌入Matplotlib
- en: We have worked on quite a few examples so far, and now have a good foundation
    from which to use Matplotlib to generate data plots and figures. While using Matplotlib
    alone is very handy in generating interactive figures, experimenting with datasets,
    and understanding substructures of data, there may be instances where we want
    an application to acquire, parse, and display our data.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经做了不少示例，并且已经打下了良好的基础，能够使用Matplotlib生成数据图表和图形。虽然单独使用Matplotlib在生成交互式图形、实验数据集和理解数据的子结构方面非常方便，但也可能出现需要一个应用程序来获取、解析并显示数据的情况。
- en: In this chapter, we will study examples on how to embed Matplotlib in applications
    through GTK+3.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将研究如何通过GTK+3将Matplotlib嵌入应用程序的示例。
- en: Installing and setting up GTK+3
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和设置GTK+3
- en: Setting up GTK+3 is fairly simple and straightforward. There are quite a few
    ways to install GTK+3 depending on your OS version and environment.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 设置GTK+3相对简单直观。根据操作系统版本和环境的不同，安装GTK+3有多种方式。
- en: We encourage our readers refer to the link: [https://python-gtk-3-tutorial.readthedocs.io/en/latest/install.html](https://python-gtk-3-tutorial.readthedocs.io/en/latest/install.html)
    for the latest updates and information on installation.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议读者参考链接：[https://python-gtk-3-tutorial.readthedocs.io/en/latest/install.html](https://python-gtk-3-tutorial.readthedocs.io/en/latest/install.html)以获取最新的安装更新和信息。
- en: At the time of writing this book, the official website advises users to install
    GTK+3 through JHBuild. However, users have experienced a compatibility issue with
    JHBuild with the macOS El Capitan.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在写这本书时，官方网站建议用户通过JHBuild安装GTK+3。然而，用户发现JHBuild在macOS El Capitan上存在兼容性问题。
- en: We recommend macOS users to use the package manager `brew` to install GTK+3.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议macOS用户使用包管理器`brew`来安装GTK+3。
- en: 'GTK+3 can be installed simply if you have `brew` installed in your macOS:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的macOS已经安装了`brew`，则可以简单地安装GTK+3：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: For Linux systems such as Ubuntu, GTK+3 is installed by default. For sophisticated
    and advanced users who prefer a more customized approach to installing GTK+3,
    we encourage referring their website to obtain the most recently updated information.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 对于像Ubuntu这样的Linux系统，GTK+3默认已经安装。对于那些喜欢更自定义安装方式的高级用户，我们建议访问官网获取最新的安装信息。
- en: We have observed that GTK+3 visualization is not as compatible with IPython
    Notebook. We encourage you to run the code on the Terminal for best results.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们观察到GTK+3在IPython Notebook中的可视化兼容性不如预期。我们建议你在终端中运行代码以获得最佳效果。
- en: A brief introduction to GTK+3
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GTK+3简要介绍
- en: Before exploring the various examples and applications, let's first acquire
    a brief, high-level understanding of the GTK+3.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在探索各种示例和应用之前，让我们先对GTK+3进行一个简要的高层次了解。
- en: GTK+3 contains a set of graphical control elements (widgets) and is a highly
    usable, feature-rich toolkit used to develop graphical user interfaces. It has
    cross-platform compatibility and is relatively easy to use. GTK+3 is an object-oriented
    widget toolkit written in the C programming language. Therefore, when running GTK+3 in
    Python, we need a wrapper to call the functions in the GTK+3 library. In this
    case, PyGObject is a Python module that serves as the wrapper and saves us time
    by not having to learn two languages to plot our figures. PyGObject exclusively
    supports GTK+3 or later versions. If you prefer to use GTK+2 in your application,
    we recommend using PyGTK instead.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: GTK+3包含一组图形控件元素（小部件），是一个功能丰富、易于使用的工具包，用于开发图形用户界面。它具有跨平台兼容性，且相对容易使用。GTK+3是一个面向对象的小部件工具包，用C语言编写。因此，当在Python中运行GTK+3时，我们需要一个包装器来调用GTK+3库中的函数。在这种情况下，PyGObject是一个Python模块，它作为包装器为我们节省了不必学习两种语言来绘制图形的时间。PyGObject专门支持GTK+3或更高版本。如果你更喜欢在应用程序中使用GTK+2，我们建议使用PyGTK。
- en: Together with the Glade GUI builder, they provide a very powerful application
    development environment.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 与Glade GUI构建器一起，它们提供了一个非常强大的应用程序开发环境。
- en: Introduction to the GTK+3 signal system
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GTK+3信号系统简介
- en: GTK+3 is an event-driven toolkit, which means it is always dormant in a loop
    function and waiting (*listening*) for events to occur; then it passes control
    to the appropriate function. Examples of events are a click on a button, menu
    item activation, ticking a checkbox, and so forth. When widgets receive an event,
    they frequently emit one or more signals. That signal will then evoke functions
    that you have connected to, in this case known as **callbacks**. This passing
    of control is done using the concept of signals.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: GTK+3是一个事件驱动的工具包，这意味着它始终在一个循环函数中处于休眠状态，等待（*监听*）事件的发生；然后它将控制权交给相应的函数。事件的例子有点击按钮、激活菜单项、勾选复选框等。当小部件接收到事件时，它们通常会发出一个或多个信号。这个信号将调用你连接的函数，在这种情况下称为**回调函数**。控制的传递是通过信号的概念来完成的。
- en: Although the terminology is almost identical, GTK+3 signals are not the same
    as Unix system signals and are not implemented using them.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管术语几乎相同，但GTK+3的信号与Unix系统信号不同，并且并非使用它们实现。
- en: When an *event* such as the press of a mouse button occurs, the appropriate
    signal is emitted by the click that received the widget. This is one of the most
    important parts of how GTK+3 works. There are signals that all widgets inherit,
    such as *destroy* and *delete-event*, and there are signals that are widget-specific,
    such as toggling on a toggle button. To make the signal framework functional,
    we need to set up a signal handler to catch those signals and call the appropriate
    function.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当像鼠标按钮按下这样的*事件*发生时，点击接收到小部件的控件会发出相应的信号。这是GTK+3工作原理中最重要的部分之一。有些信号是所有小部件都继承的，例如*destroy*和*delete-event*，还有一些是特定于小部件的信号，例如切换按钮的切换。为了使信号框架生效，我们需要设置一个信号处理程序来捕获这些信号并调用相应的函数。
- en: 'From a more abstract point of view, a generic example is as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 从更抽象的角度来看，一个通用的例子如下：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`widget`, shown in this generic example, is an instance of a widget we created
    earlier. It can display widgets, buttons, toggles, or text data entry. Each widget
    has its own particular *event* that must occur for it to respond. If the widget
    is a button, and when there is an action such as a click, a signal is issued.
    The `callback` argument is the name of the callback function. The callback function
    will be executed when the *event* has occurred. Finally, the `data` argument includes
    any data that should be passed when the signal is generated; this is optional
    and can be left out if the *callback* function requires no argument.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个通用示例中，`widget`是我们之前创建的小部件的一个实例。它可以显示小部件、按钮、切换按钮或文本数据输入。每个小部件都有自己的特定*事件*，只有当该事件发生时，它才会响应。如果小部件是按钮，当发生点击等动作时，信号将被发出。`callback`参数是回调函数的名称。当*事件*发生时，回调函数将被执行。最后，`data`参数包括任何在生成信号时需要传递的数据；这是可选的，如果*回调*函数不需要参数，可以省略。
- en: 'Here is our first sample of GTK+3:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们第一个GTK+3示例：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To run this code, readers can either copy and paste or it save the code into
    a file named `first_gtk_example.py` and run it in the Terminal as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行此代码，读者可以选择复制并粘贴，或将代码保存到名为`first_gtk_example.py`的文件中，并在终端中运行，如下所示：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The readers should be able to create an empty 200x200 pixel window (by default
    when not specified otherwise), shown as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 读者应该能够创建一个空白的200x200像素窗口（默认情况下，如果没有指定其他内容），如下所示：
- en: '![](img/493616a6-4cd9-4193-810a-ea81267cca2b.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/493616a6-4cd9-4193-810a-ea81267cca2b.png)'
- en: Figure 1
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图1
- en: To fully appreciate the usefulness of GTK3+, it is advisable that the code be
    written as a PyGObject.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为了充分理解GTK3+的实用性，建议将代码编写为PyGObject。
- en: The following code demonstrates a modified, slightly more complicated example
    of having two click buttons in one window, each performing different tasks!
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码演示了一个修改版的稍微复杂的示例，其中一个窗口中有两个点击按钮，每个按钮执行不同的任务！
- en: 'Readers should install `cairocffi` through `pip3` before running the examples
    in this chapter:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 读者在运行本章示例之前，应通过`pip3`安装`cairocffi`：
- en: '`pip3 install cairocffi`'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`pip3 install cairocffi`'
- en: 'The `cairocffi` library is a CFFI-based drop-in replacement for Pycairo, and
    is necessary in this case. Now let''s delve into the code:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`cairocffi`库是一个基于CFFI的替代库，用于替代Pycairo，在此案例中是必需的。现在让我们深入了解代码：'
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here is what you will get from the preceding snippet:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是你从上面的代码片段中得到的结果：
- en: '![](img/ae3098a5-3f23-45af-b106-f9d3590881e9.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae3098a5-3f23-45af-b106-f9d3590881e9.png)'
- en: Figure 2
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图2
- en: Clicking on different buttons will result in obtaining different outcomes on
    the Terminal.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 点击不同的按钮将导致在终端上获得不同的结果。
- en: This example serves as an introduction to the **object-oriented programming**
    (**OOP**) style. OOP is fairly sophisticated for novice users, yet it is one of
    the best ways to arrange one's code, create modules, and make it more readable
    and usable for other programmers. Although novice users may not have noticed,
    we have already used a lot of OOP concepts in the first four chapters.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例作为**面向对象编程**（**OOP**）风格的介绍。对于新手用户来说，OOP可能有些复杂，但它是组织代码、创建模块以及增强代码可读性和可用性的最佳方式之一。虽然新手用户可能没有注意到，但在前四章中，我们已经使用了许多OOP概念。
- en: 'By understanding `init()` and `self`, we are now ready to delve into more advanced
    programming skills. So, let''s try some more advanced examples! What if we want
    to embed some of the plots we have made into GTK+3 windows? We do the following:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 通过理解`init()`和`self`，我们现在可以深入研究更高级的编程技巧了。那么，让我们尝试一些更高级的例子！如果我们想要将我们制作的一些图表嵌入到GTK+3窗口中，我们可以这样做：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In this example, we created a vertical box and put both the canvas (with the
    figure) and the toolbar in it:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们创建了一个垂直框，并将画布（带有图表）和工具栏放入其中：
- en: '![](img/7182defa-8f5b-48ed-a084-824a35763ff8.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7182defa-8f5b-48ed-a084-824a35763ff8.png)'
- en: Figure 3
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3
- en: It seems like it is fairly easy to incorporate Matplotlib figures right into
    GTK+3, doesn't it? If you have your own figure that you wish to plug it into the
    GTK+3 engine, simply expand on the *polar* plot example and then you can start
    playing with your own figure with this template!
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来很容易将Matplotlib图表直接整合到GTK+3中，不是吗？如果您有自己的图表想要将其插入GTK+3引擎中，只需扩展*极坐标*图表示例，然后您就可以使用此模板开始处理自己的图表了！
- en: One additional thing we did here is create a toolbar and put it at the bottom
    of the figure. Remember that we are using a VBox in organizing the widgets? V
    in this case stands for vertical, which organizes data from top to bottom. Therefore,
    when putting the toolbar after the canvas, we have such an ordering. The toolbar
    is a great place to modify and save your figures elegantly.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里额外做的一件事是创建了一个工具栏，并将其放置在图表的底部。请记住，我们在组织小部件时使用的是VBox？这里的V代表垂直，即从上到下组织数据。因此，将工具栏放置在画布之后时，我们有这样的顺序。工具栏是一个优雅地修改和保存图表的好地方。
- en: So let's try a few more examples and see how we can create some interactive
    plots by combining GTK+3 and Matplotlib. One very important concept is event connections
    with Matplotlib through canvas; this can be achieved by calling the `mpl_connect()`
    function.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们尝试几个例子，看看如何通过结合GTK+3和Matplotlib创建一些交互式图表。一个非常重要的概念是通过画布与Matplotlib建立事件连接；这可以通过调用`mpl_connect()`函数来实现。
- en: There are many good examples that can be found on the *Matplotlib Cookbook*
    online.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在*Matplotlib Cookbook*在线上可以找到许多好的例子。
- en: 'Let''s walk through one such example that provides an interactive zoom-in function.
    Here is a preview of the output of the code:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们走过一个提供交互式放大功能的例子。这里是代码输出的预览：
- en: '![](img/435f4e70-5bc8-43c8-b69b-037481518c5c.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/435f4e70-5bc8-43c8-b69b-037481518c5c.png)'
- en: Figure 4
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4
- en: The window comprises two subplots; the plot on the left side is the big picture,
    while the plot on the right side is the zoomed-in version. The area chosen for
    enlargement is designated by the gray box on the left, and the gray box is movable
    along the click of your mouse. This may sound complicated but it can easily be
    accomplished by just a few lines of code. We would suggest readers first read
    the following code featuring the class `DrawPoints` and try to trace the logic
    starting from `window = Gtk.Window()`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 窗口包括两个子图；左侧的图表是大图，而右侧的图表是放大版本。在左侧选择放大的区域由灰色框指定，灰色框可以随鼠标点击移动。这听起来可能有些复杂，但只需几行代码就可以轻松实现。我们建议读者首先阅读以下包含`DrawPoints`类的代码，并尝试从`window
    = Gtk.Window()`开始追溯逻辑。
- en: 'Here''s an in-depth explanation of the code:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是代码的详细解释：
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'As you can see from the preceding example, event handling and picking are the
    elements that makes the interaction part much easier than we imagine. Therefore,
    it is important to have a quick review of the available event connections that
    are part of the `FigureCanvasBase`:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您从前面的例子中看到的，事件处理和选取是使交互部分比我们想象中更容易的元素。因此，重要的是快速回顾一下`FigureCanvasBase`中可用的事件连接。
- en: '| **Event name** | **Class and description** |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| **事件名称** | **类和描述** |'
- en: '| `button_press_event` | **MouseEven****t:** Mouse button is pressed |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| `button_press_event` | **鼠标事件：** 鼠标按下按钮 |'
- en: '| `button_release_event` | **MouseEvent**: Mouse button is released |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| `button_release_event` | **MouseEvent**: 鼠标按钮被释放 |'
- en: '| `scroll_event` | **MouseEvent**: Mouse scroll wheel is rolled |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| `scroll_event` | **MouseEvent**: 鼠标滚轮被滚动 |'
- en: '| `motion_notify_event` | **MouseEvent:** Mouse motion |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| `motion_notify_event` | **MouseEvent:** 鼠标移动 |'
- en: '| `draw_event` | **DrawEvent**: Canvas draw |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| `draw_event` | **DrawEvent**: 画布绘制 |'
- en: '| `key_press_event` | **KeyEvent:** Key is pressed |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| `key_press_event` | **KeyEvent:** 键被按下 |'
- en: '| `key_release_event` | **KeyEvent:** Key is released |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| `key_release_event` | **KeyEvent:** 键被释放 |'
- en: '| `pick_event` | **PickEvent:** An object in the canvas is selected |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| `pick_event` | **PickEvent:** 画布中的一个对象被选中 |'
- en: '| `resize_event` | **ResizeEvent:** Figure canvas is resized |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| `resize_event` | **ResizeEvent:** 图形画布被调整大小 |'
- en: '| `figure_enter_event` | **LocationEvent:** Mouse enters a new figure |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| `figure_enter_event` | **LocationEvent:** 鼠标进入一个新图形 |'
- en: '| `figure_leave_event` | **LocationEvent:** Mouse leaves a figure |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| `figure_leave_event` | **LocationEvent:** 鼠标离开一个图形 |'
- en: '| `axes_enter_event` | **LocationEvent:** Mouse enters a new axis |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| `axes_enter_event` | **LocationEvent:** 鼠标进入一个新轴 |'
- en: '| `axes_leave_event` | **LocationEvent:** Mouse leaves an axis |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| `axes_leave_event` | **LocationEvent:** 鼠标离开一个轴 |'
- en: Installing Glade
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Glade
- en: 'Installing Glade is very straightforward; you can either obtain the source
    file from its web page, or simply use Git to obtain the latest version of source
    code. Here is the command for obtaining Glade through Git:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Glade 非常简单；你可以从其网页上获取源文件，或者直接使用 Git 获取最新版本的源代码。通过 Git 获取 Glade 的命令如下：
- en: '[PRE7]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Designing the GUI using Glade
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Glade 设计 GUI
- en: 'Designing the GUI using Glade is straightforward. Just start the Glade program
    and you will see this interface (from macOS, or something similar if using another
    OS):'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Glade 设计 GUI 非常简单。只需启动 Glade 程序，你将看到这个界面（从 macOS 上显示，或者如果使用其他操作系统，则会看到类似的界面）：
- en: '![](img/44defb87-3489-41e2-b548-8f4065c1da2e.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/44defb87-3489-41e2-b548-8f4065c1da2e.png)'
- en: Figure 5
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5
- en: 'Let''s now explore the Glade interface. There are four main buttons that we
    will be using primarily in Glade; **Toplevels**, **Containers**, **Control**, and **Display**.
    The preceding screenshot shows that `GtkWindow` is listed in `Toplevels`, which
    serves as the basic unit for construction. Let''s click on `GtkWindow` and see
    the resulting action:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看看 Glade 界面。我们将主要使用四个按钮：**顶级窗口**、**容器**、**控制**和**显示**。前面的截图显示，`GtkWindow`
    列在了 `顶级窗口` 中，它作为构建的基本单元。点击 `GtkWindow`，看看会发生什么：
- en: '![](img/69fd8b1c-76b5-4c31-aa33-f3ba79dcbcc3.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/69fd8b1c-76b5-4c31-aa33-f3ba79dcbcc3.png)'
- en: Figure 6
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6
- en: 'Now a GtkWindow is being constructed and nothing is inside. Let''s set the
    size of this GtkWindow to: 400x400\. This can be achieved by setting the default
    width and height as 400 in the lower section of the right panel. The right panel
    is currently illustrating the **General** properties of this GtkWindow.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在一个 GtkWindow 正在构建，但里面没有任何内容。让我们将这个 GtkWindow 的大小设置为：400x400。可以通过在右侧面板的下方设置默认宽度和高度为
    400 来实现。右侧面板当前展示的是该 GtkWindow 的**常规**属性。
- en: 'Remember that we used vertical boxes a lot in the previous examples? Let''s
    add a vertical box to the GtkWindow! This can be achieved by clicking on **Containers** and
    choosing GtkBox, as shown here:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 还记得我们在之前的示例中使用了很多垂直框吗？现在让我们在 GtkWindow 中添加一个垂直框！可以通过点击**容器**并选择 GtkBox 来实现，正如下图所示：
- en: '![](img/7d4d5098-80b6-4b3b-8625-a29bcf3520aa.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7d4d5098-80b6-4b3b-8625-a29bcf3520aa.png)'
- en: Figure 7
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7
- en: 'After choosing GtkBox, click on the GtkWindow in the middle panel and a GtkBox
    will be created as a sub-module or a sub-window of the GtkWindow. This can be
    confirmed by checking the left panel as shown here:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 选择 GtkBox 后，点击中间面板中的 GtkWindow，GtkBox 将作为 GtkWindow 的子模块或子窗口创建。可以通过检查左侧面板来确认这一点，正如下图所示：
- en: '![](img/f42ac166-7752-4787-bde8-08c29974d75f.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f42ac166-7752-4787-bde8-08c29974d75f.png)'
- en: Figure 8
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8
- en: 'GtkBox is below GtkWindow and indented on the left panel. Since we are picking
    vertical box, the *orientation* in **General** is *vertical*. One can even specify
    the spacing and number of items that will be included in the GtkBox. Let''s add
    a menu bar onto the top vertical box. This can be done as shown in *Figure 9*.
    In Containers, pick GtkMenubar and click on the top vertical box. It will fit
    in a menu bar with the following options: File, Edit, View, and Help.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: GtkBox 位于 GtkWindow 下方，并且在左侧面板中有缩进。由于我们选择了垂直框，所以在**常规**设置中，*方向*为*垂直*。你还可以指定
    GtkBox 中包含的间距和项数。现在让我们在顶部垂直框中添加一个菜单栏。可以参考*图 9*中的操作方法。在容器中，选择 GtkMenubar 并点击顶部垂直框。它将添加一个菜单栏，其中包含以下选项：文件、编辑、视图和帮助。
- en: '![](img/7b6a0395-6a49-42a7-bc87-e02fe7ac1645.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7b6a0395-6a49-42a7-bc87-e02fe7ac1645.png)'
- en: Figure 9
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9
- en: As one can imagine, we can easily design our favorite GUI with the use of Glade.
    We can import a label with a customized size as shown in *Figure 10*. And there
    are many more options that we can choose to customize our GUIs.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如同大家可以想象的，我们可以轻松地使用 Glade 设计我们喜欢的 GUI。我们可以导入一个具有自定义大小的标签，如*图 10*所示。还有许多其他选项，我们可以选择来自定义我们的
    GUI。
- en: '![](img/8bf02ba5-db87-4d58-b760-84402d510b43.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8bf02ba5-db87-4d58-b760-84402d510b43.png)'
- en: Figure 10
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10
- en: Designing the most effective GUI through Glade is beyond the scope and purview
    of this book, so we will not go any further into the more advanced options in
    Glade.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 Glade 设计最有效的 GUI 超出了本书的范围，因此我们不会进一步探讨 Glade 中的高级选项。
- en: However, we would like to expand on one of the examples that we have worked
    on previously, and show that it takes just a few lines of code to incorporate
    a Glade-based GUI into our workflow.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们想扩展我们之前处理的一个示例，并展示将基于 Glade 的 GUI 融入到我们的工作流程中只需要几行代码。
- en: To begin, we will use the class-based polar plot example. First of all, we design
    the most basic `GtkWindow` with a size of 400x400 (that's all!) from Glade and
    save it as a file.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将使用基于类的极坐标图示例。首先，我们通过 Glade 设计最基本的 `GtkWindow`，大小为 400x400（就这样！），并将其保存为文件。
- en: 'The file is very simple and self-explanatory:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件非常简单且易于理解：
- en: '[PRE8]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Readers may understand that we just created a `GtkWindow` with a size of 400x400
    plus a child as `GtkScrolledWindow`. This can be completed in a few clicks in
    Glade.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 读者可能理解我们只是创建了一个大小为 400x400 的 `GtkWindow`，并且添加了一个作为 `GtkScrolledWindow` 的子元素。这可以在
    Glade 中通过几次点击完成。
- en: And what we have to do now is use `Gtk.Builder()` to read the Glade file; everything
    will be constructed automatically. This actually saves us from defining all the
    elements of the vertical box!
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们要做的是使用 `Gtk.Builder()` 来读取 Glade 文件；一切都会自动构建。实际上，这为我们节省了定义垂直框架所有元素的工作！
- en: '[PRE9]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The preceding code demonstrates how we can use Glade to quickly generate a frame
    and execute it effortlessly.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码演示了我们如何使用 Glade 快速生成一个框架并轻松执行它。
- en: '![](img/57c12f40-5eea-489d-8b6f-a089be59efa8.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/57c12f40-5eea-489d-8b6f-a089be59efa8.png)'
- en: Figure 11
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11
- en: Hopefully, through this example readers would appreciate the power of Glade
    in enabling programmers to draw a GUI instead of abstracting it in code. This
    is particularly useful when the GUI gets complicated.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 希望通过这个示例，读者能更好地理解 Glade 的强大功能，它使程序员能够通过可视化的方式来设计 GUI，而不是通过代码抽象化。这在 GUI 变得复杂时特别有用。
- en: Summary
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have worked through examples on embedding Matplotlib figures
    inside a simple GTK+3 window, adding the Matplotlib navigation toolbar, plotting
    data in an interactive framework, and using Glade to design a GUI. We have kept
    the examples simple to highlight the important parts, but we encourage readers
    to explore further possibilities. GTK+3 is not the only GUI library that can be
    used. In the coming chapters, we'll see how to use two other important libraries!
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们通过实例讲解了如何将 Matplotlib 图形嵌入到简单的 GTK+3 窗口中，添加 Matplotlib 导航工具栏，在交互式框架中绘制数据，以及使用
    Glade 设计 GUI。我们保持了实例的简洁，以突出重点部分，但我们鼓励读者进一步探索更多可能性。GTK+3 不是唯一可以使用的 GUI 库，在接下来的章节中，我们将看到如何使用另外两个重要的库！
