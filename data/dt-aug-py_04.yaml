- en: '4'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '4'
- en: Image Augmentation for Segmentation
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图像增强用于分割
- en: Image segmentation, like image classification, is the cornerstone in the computer
    vision domain. Image segmentation involves grouping parts of an image that belong
    to the same object, also known as pixel-level classification. Unlike image classification,
    which identifies and predicts the subject or label of a photo, image segmentation
    determines whether a pixel belongs to a list of objects – for example, an urban
    photograph has streets, street signs, cars, trucks, bicycles, buildings, trees,
    and pedestrians. Image segmentation’s job is to decide whether this image pixel
    belongs to a car, tree, or other objects.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 图像分割，像图像分类一样，是计算机视觉领域的基石。图像分割涉及将属于同一对象的图像部分进行分组，也称为像素级分类。与图像分类不同，图像分类是识别和预测照片的主题或标签，而图像分割则决定一个像素是否属于某个对象列表——例如，一张城市照片包含街道、路标、汽车、卡车、自行车、建筑物、树木和行人。图像分割的任务是判断这个图像像素是否属于汽车、树木或其他物体。
- en: '**Deep learning** (**DL**), an **artificial neural network** (**ANN**) algorithm,
    has made a tremendous breakthrough in image segmentation. For example, image segmentation
    in DL makes it possible for autonomous vehicles and **Advanced Driver Assistance
    Systems** (**ADASes**) to detect navigable surfaces or pedestrians. Many medical
    applications use segmentation for tumor boundary drawing or measuring tissue volumes,
    for example.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**深度学习**（**DL**），一种**人工神经网络**（**ANN**）算法，在图像分割中取得了巨大的突破。例如，深度学习中的图像分割使得自动驾驶车辆和**高级驾驶辅助系统**（**ADAS**）能够检测可导航的表面或行人。许多医学应用利用分割技术绘制肿瘤边界或测量组织体积。'
- en: The image augmentation methods for segmentation or classification are the same,
    except segmentation comes with an additional mask image or ground-truth image.
    Therefore, most of what we learned about augmenting images for classification
    in [*Chapter 3*](B17990_03.xhtml#_idTextAnchor058) applies to augmenting segmentation.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 图像增强方法无论是用于分割还是分类都是相同的，不同的是分割还需要附加的掩膜图像或真实图像。因此，我们在[*第3章*](B17990_03.xhtml#_idTextAnchor058)中学到的关于增强图像用于分类的内容，也适用于增强图像分割。
- en: 'This chapter aims to provide continuing geometric and photometric transformations
    for image segmentation. In particular, you will learn about the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章旨在提供持续的几何和光度变换，用于图像分割。具体来说，你将学习以下主题：
- en: Geometric and photometric transformations
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 几何和光度变换
- en: Real-world segmentation datasets
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现实世界中的分割数据集
- en: Reinforcing your learning through Python code
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过Python代码强化你的学习
- en: Fun fact
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的事实
- en: Image segmentation or semantic segmentation is used in many self-driving car
    AI controllers. It is used to identify objects and people on a street. Worldwide
    competition wins or losses primarily due to image segmentation augmentation techniques,
    such as the *Udacity and Lyft Perception Challenge* winner of the *Kaggle* competition,
    use random resized crop, horizontal flip, and random color jitter in brightness,
    contrast, and saturation.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 图像分割或语义分割在许多自动驾驶汽车的AI控制系统中都有应用。它用于识别街道上的物体和行人。世界各地的比赛胜负，主要取决于图像分割增强技术，例如*Kaggle*竞赛中的*Udacity和Lyft感知挑战*的获胜者，采用了随机调整大小裁剪、水平翻转以及亮度、对比度和饱和度的随机颜色扰动。
- en: Let’s begin with the geometric and photometric transformations for segmentation.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从分割的几何和光度变换开始。
- en: Geometric and photometric transformations
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 几何和光度变换
- en: 'As discussed in [*Chapter 3*](B17990_03.xhtml#_idTextAnchor058), geometric
    transformations alter a picture’s geometry, such as by flipping, cropping, padding,
    rotating, or resizing it. For segmentation, when horizontally **flipping** an
    image, the same must be done for the mask. Pluto will show you how to flip an
    original and accompanying mask image; here is a sneak peek:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如在[*第3章*](B17990_03.xhtml#_idTextAnchor058)中讨论的那样，几何变换会改变图像的几何形状，例如通过翻转、裁剪、填充、旋转或调整大小。对于图像分割，当水平**翻转**图像时，必须对掩膜进行相同的处理。Pluto将向你展示如何翻转原始图像及其对应的掩膜图像；下面是一个预览：
- en: '![Figure 4.1 – Image segmentation horizontal flip](img/B17990_04_01.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.1 – 图像分割水平翻转](img/B17990_04_01.jpg)'
- en: Figure 4.1 – Image segmentation horizontal flip
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.1 – 图像分割水平翻转
- en: Many of the **safe** values discussed in [*Chapter 3*](B17990_03.xhtml#_idTextAnchor058)
    stay mostly the same. For example, if the picture’s subject is people or an urban
    cityscape, the classification augmentation can’t flip vertically because the prediction
    of people’s age or the city’s name relies on the picture not being upside down.
    However, segmentation aims to group or draw an outline of the people or cars.
    Thus, vertical flipping is acceptable.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在[ *第 3 章* ](B17990_03.xhtml#_idTextAnchor058)中讨论的许多**安全**值大多保持不变。例如，如果图像的主题是人或城市景观，分类增强不能垂直翻转，因为预测人的年龄或城市的名称依赖于图像不被颠倒。然而，分割的目的是将人或车进行分组或勾画轮廓。因此，垂直翻转是可以接受的。
- en: The safe range needs further investigation for many real-world applications.
    For example, for self-driving automobiles, what if you are in a car accident and
    your vehicle is upside down? Does the AI still need to classify its surroundings
    correctly?
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 对于许多真实世界的应用，安全范围需要进一步研究。例如，对于自动驾驶汽车，如果你遇到车祸并且你的车辆翻倒了呢？AI 是否仍然需要正确地分类周围环境？
- en: Photometric transformations, such as brightness, saturation, contrast, hue shifting,
    and FancyPCA, are more problematic to apply to segmentation because the original
    image is distorted but not the mask image. The big question is, would augmenting
    the original but not the mask image increase the prediction’s accuracy?
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 光度变换，如亮度、饱和度、对比度、色相偏移和 FancyPCA，在应用于分割时更具挑战性，因为原始图像会被扭曲，但掩码图像不会。一个大问题是，仅增强原始图像而不增强掩码图像，会否提高预测的准确性？
- en: '`Albumentations` library, 37 transformations are defined as safe for distorting
    both original and mask images.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`Albumentations` 库定义了 37 种变换，认为它们在扭曲原图和掩码图像时是安全的。'
- en: Technically, you can use photometric transformations for segmentation with Python
    code, but it is wise to research published scholarly papers for confirmation.
    The golden augmentation rule that we discussed in [*Chapter 3*](B17990_03.xhtml#_idTextAnchor058)
    is applied here as well – you select a filter that improves the prediction accuracy
    described in a published academic paper.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 从技术上讲，你可以使用光度变换来进行分割，并用 Python 代码实现，但最好查阅已发布的学术论文以确认。我们在[ *第 3 章* ](B17990_03.xhtml#_idTextAnchor058)中讨论的黄金增强规则也适用于此——你选择一种能提高预测准确性的过滤器，这种方法在已发布的学术论文中有描述。
- en: Learning by using Python code is another angle you can use to understand image
    segmentation. However, before we do that, let’s ask Pluto to download a few real-world
    segmentation datasets from Kaggle.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Python 代码进行学习是理解图像分割的另一种途径。然而，在我们进行之前，让我们请 Pluto 从 Kaggle 下载一些真实世界的分割数据集。
- en: Real-world segmentation datasets
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 真实世界的分割数据集
- en: The *Kaggle* website is an online community platform for data scientists and
    ML devotees. It contains thousands of real-world datasets, as mentioned in *Chapters
    1*, *2*, and *3*.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '*Kaggle* 网站是一个为数据科学家和机器学习爱好者提供的在线社区平台。它包含了成千上万的真实世界数据集，如在*第 1 章*、*第 2 章*和*第
    3 章*中所提到的。'
- en: When searching for image segmentation datasets, Pluto found about 500 useable
    real-world segmentation datasets. The topics range from self-driving automobiles
    and medicine to micro-fossils. Pluto picked two segmentation datasets from popular
    market segments.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在寻找图像分割数据集时，Pluto 找到了大约 500 个可用的真实世界分割数据集。这些数据集的主题从自动驾驶汽车和医学到微型化石不等。Pluto 从热门市场领域中挑选了两个分割数据集。
- en: The other consideration is that the image type must be easy to work with in
    the Albumentations library. Pluto uses the **PIL** and **NumPy** libraries to
    read and convert the photos into a three-dimensional array. The original image’s
    **shape** is (width, height, and depth), where depth is usually equal to three.
    The mask image’s **shape** is (width, height), where the value is 0, 1, 2, and
    so on up to the number of labels.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个考虑因素是图像类型必须易于在 Albumentations 库中处理。Pluto 使用**PIL**和**NumPy**库来读取并将照片转换成三维数组。原始图像的**shape**是（宽度、高度和深度），其中深度通常等于三。掩码图像的**shape**是（宽度、高度），值为
    0、1、2 等，直到标签的数量。
- en: Fun fact
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的事实
- en: The PIL library can read image formats such as `.jpg`, `.gif`, `.tiff`, `.png`,
    and about 50 other image formats. Still, sometimes, the real-world segmentation
    datasets come with an image format that PIL can’t read. In those cases, Pluto
    relies on the Python **ImageIO** library, which can read over 100 image types.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: PIL 库可以读取 `.jpg`、`.gif`、`.tiff`、`.png` 等格式的图像文件，还有大约 50 种其他图像格式。然而，有时真实世界的分割数据集会带有
    PIL 无法读取的图像格式。在这种情况下，Pluto 借助 Python 的**ImageIO**库，该库可以读取超过 100 种图像格式。
- en: 'The two selected segmentation datasets are as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 选中的两个分割数据集如下：
- en: 'The *Cambridge-Driving Labeled Video (CamVid)* database is the first real-world
    segmentation dataset. The context on the *Kaggle* website is as follows:'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Cambridge-Driving Labeled Video (CamVid)* 数据库是第一个真实世界的分割数据集。*Kaggle* 网站上的背景如下：'
- en: “*The Cambridge-Driving Labeled Video Database (CamVid) provides ground truth
    labels that associate each pixel with one of 32 semantic classes. This dataset
    is often used in (real-time) semantic segmentation research.*”
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: “*Cambridge-Driving Labeled Video Database (CamVid) 提供了将每个像素与32个语义类别之一关联的地面真值标签。该数据集常用于（实时）语义分割研究。*”
- en: 'It was published in 2020 by the **University of Cambridge**, and the license
    is **CC BY-NC-SA 4.0**: [https://creativecommons.org/licenses/by-nc-sa/4.0/](https://creativecommons.org/licenses/by-nc-sa/4.0/).'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 它于2020年由**剑桥大学**发布，许可证为**CC BY-NC-SA 4.0**：[https://creativecommons.org/licenses/by-nc-sa/4.0/](https://creativecommons.org/licenses/by-nc-sa/4.0/)。
- en: 'The second real-world dataset is called *Semantic segmentation of aerial imagery*.
    The description from the *Kaggle* website is as follows:'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个真实世界数据集叫做 *空中图像语义分割*。来自 *Kaggle* 网站的描述如下：
- en: “*The dataset consists of aerial imagery of Dubai obtained by MBRSC satellites
    and annotated with pixel-wise semantic segmentation in 6 classes. The total volume
    of the dataset is 72 images grouped into 6 larger tiles.*”
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: “*数据集由通过MBRSC卫星获取的迪拜空中图像组成，并通过像素级语义分割标注为6个类别。数据集的总容量为72张图像，分为6个较大的瓦片。*”
- en: 'It was published in 2020 by the **Roia Foundation in Syria**, and the license
    is **CC0: Public Domain**: [https://creativecommons.org/publicdomain/zero/1.0/](https://creativecommons.org/publicdomain/zero/1.0/).'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '它于2020年由**叙利亚Roia基金会**发布，许可证为**CC0: 公共领域**：[https://creativecommons.org/publicdomain/zero/1.0/](https://creativecommons.org/publicdomain/zero/1.0/)。'
- en: 'After selecting the two segmentation datasets, the following four steps should
    be familiar to you by now. Review *Chapters 2* and *3* if you need clarification.
    The steps are as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 选择两个分割数据集后，接下来的四个步骤你应该已经熟悉。如果需要澄清，请复习*第2章*和*第3章*。步骤如下：
- en: Retrieve the Python Notebook and Pluto.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取 Python Notebook 和 Pluto。
- en: Download real-world data.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载真实世界的数据。
- en: Load the data into pandas.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将数据加载到 pandas 中。
- en: View the data images.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看数据图像。
- en: Fun challenge
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的挑战
- en: 'Find and download two additional image segmentation datasets from the *Kaggle*
    website or other sources. *Kaggle* competitions and data consist of hundreds of
    image segmentation datasets. Thus, finding image segmentation datasets that are
    meaningful to you or your job shouldn’t be challenging. Hint: use Pluto’s `fetch_kaggle_dataset()`
    `or` `fetch_kaggle_comp_data()` function.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 从 *Kaggle* 网站或其他来源查找并下载两个额外的图像分割数据集。*Kaggle* 的竞赛和数据包含数百个图像分割数据集。因此，找到对你或你的工作有意义的图像分割数据集应该不成问题。提示：使用
    Pluto 的 `fetch_kaggle_dataset()` `or` `fetch_kaggle_comp_data()` 函数。
- en: Let’s start with Pluto.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从 Pluto 开始。
- en: Python Notebook and Pluto
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python Notebook 和 Pluto
- en: Start by loading the `data_augmentation_with_python_chapter_4.ipynb` file into
    Google Colab or your chosen Jupyter Notebook or JupyterLab environment. From this
    point onward, the code snippets will be from the Python Notebook, which contains
    the complete functions.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 从加载 `data_augmentation_with_python_chapter_4.ipynb` 文件到 Google Colab 或你选择的 Jupyter
    Notebook 或 JupyterLab 环境开始。从这一点起，代码片段将来自 Python Notebook，其中包含完整的函数。
- en: 'Next, you must clone the repository and use the `%run` command to start Pluto:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你必须克隆仓库并使用`%run`命令启动 Pluto：
- en: '[PRE0]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The output will be as follows or similar:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示，或类似：
- en: '[PRE1]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Double-check that Pluto has loaded correctly:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细检查 Pluto 是否已正确加载：
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The output will be as follows or something similar, depending on your system:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示，或根据你的系统类似：
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Pluto has verified that the Python Notebook is working correctly. The next step
    is downloading real-world image datasets from Kaggle.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Pluto 已验证 Python Notebook 正常工作。下一步是从 Kaggle 下载真实世界的图像数据集。
- en: Real-world data
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 真实世界数据
- en: 'The following download function is from [*Chapter 2*](B17990_02.xhtml#_idTextAnchor038).
    Pluto has reused this here:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 以下下载功能来自[*第2章*](B17990_02.xhtml#_idTextAnchor038)。Pluto 已在此处重用：
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Before viewing the downloaded photos, Pluto needs to load the information into
    a pandas DataFrame.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在查看下载的照片之前，Pluto 需要将数据加载到 pandas DataFrame 中。
- en: Pandas
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Pandas
- en: 'A few cleanup tasks need to be done here, such as replacing a space character
    with an underscore character in the directories or filenames and separating original
    and mask images. After the cleanup, Pluto reuses the `make_dir_dataframe()` function
    to read the original image data into a pandas DataFrame. The command for the CamVid
    data is as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这里需要进行一些清理任务，比如将目录或文件名中的空格字符替换为下划线，并将原始图像与掩码图像分开。清理后，Pluto重用`make_dir_dataframe()`函数将原始图像数据读取到pandas数据框中。CamVid数据的命令如下：
- en: '[PRE5]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The output of the first three records is as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 前三条记录的输出如下：
- en: '![Figure 4.2 – CamVid pandas DataFrame, first three rows](img/B17990_04_02.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.2 – CamVid pandas数据框，前3行](img/B17990_04_02.jpg)'
- en: Figure 4.2 – CamVid pandas DataFrame, first three rows
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.2 – CamVid pandas数据框，前3行
- en: The mask images are in a different folder, and the mask image’s name has `_L`
    appended to the filename.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 掩码图像位于不同的文件夹中，且掩码图像的文件名在原文件名后加上了`_L`。
- en: 'The primary reason for Pluto using pandas is that adding a new column for the
    matching mask and original filename is a trivial task. There are only two key
    code lines. The first is in the helper function to generate the correct mask image
    path, while the second is to create a new column for applying the helper function.
    The code for this is as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Pluto使用pandas的主要原因是，为匹配的掩码和原始文件名添加新列是个简单的任务。只有两行关键代码。第一行是在帮助函数中生成正确的掩码图像路径，第二行是创建新列以应用帮助函数。相关代码如下：
- en: '[PRE6]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The command to complete the CamVid DataFrame is as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 完成CamVid数据框的命令如下：
- en: '[PRE7]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The output is as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: '![Figure 4.3 – Complete CamVid DataFrame, first three rows](img/B17990_04_03.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.3 – 完整的CamVid数据框，前3行](img/B17990_04_03.jpg)'
- en: Figure 4.3 – Complete CamVid DataFrame, first three rows
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.3 – 完整的CamVid数据框，前3行
- en: Once Pluto has gathered all the information squared away in the DataFrame, the
    next step is to display the original and mask images.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦Pluto将所有信息整理到数据框中，下一步就是展示原始图像与掩码图像。
- en: Viewing data images
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看数据图像
- en: Pluto could reuse the `draw_batch()` function from [*Chapter 2*](B17990_02.xhtml#_idTextAnchor038)
    to display the original and mask images in separate batches, but the result does
    not reinforce the combination of original and mask images. Therefore, Pluto will
    hack the `draw_batch()` method and create a new `draw_batch_segmentation()` and
    a helper function called `_draw_batch_segmentation()`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Pluto可以重用[*第2章*](B17990_02.xhtml#_idTextAnchor038)中的`draw_batch()`函数，以分批显示原始图像和掩码图像，但结果无法加强原始图像与掩码图像的结合。因此，Pluto将修改`draw_batch()`方法，创建一个新的`draw_batch_segmentation()`方法，并设计一个名为`_draw_batch_segmentation()`的帮助函数。
- en: 'The result shows the original image, then the mask image, and repeats this
    process. The command for displaying the CamVid segmentation photos is as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 结果展示了原始图像，接着是掩码图像，并重复此过程。显示CamVid分割照片的命令如下：
- en: '[PRE8]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The output is as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: '![Figure 4.4 – CamVid’s original and mask image batch](img/B17990_04_04.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.4 – CamVid的原始图像与掩码图像批次](img/B17990_04_04.jpg)'
- en: Figure 4.4 – CamVid’s original and mask image batch
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.4 – CamVid的原始图像与掩码图像批次
- en: The segmentation batch looks correct, so Pluto repeats the same process for
    the aerial segmentation data.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 分割批次看起来是正确的，因此Pluto对航拍分割数据重复相同的过程。
- en: 'Download the data with the following command:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令下载数据：
- en: '[PRE9]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Clean the directory and filenames, then import them into pandas with the following
    command:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 清理目录和文件名，然后使用以下命令将它们导入到pandas中：
- en: '[PRE10]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The output for the first five records is as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 前五条记录的输出如下：
- en: '![Figure 4.5 – Aerial pandas DataFrame, first three rows](img/B17990_04_05.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.5 – 航拍pandas数据框，前3行](img/B17990_04_05.jpg)'
- en: Figure 4.5 – Aerial pandas DataFrame, first three rows
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.5 – 航拍pandas数据框，前3行
- en: 'Add the mask’s filename using the new help function, as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 使用新的帮助函数添加掩码的文件名，如下所示：
- en: '[PRE11]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The output for the first three records is as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 前三条记录的输出如下：
- en: '![Figure 4.6 – Complete aerial DataFrame, first three rows](img/B17990_04_06.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.6 – 完整的航拍数据框，前3行](img/B17990_04_06.jpg)'
- en: Figure 4.6 – Complete aerial DataFrame, first three rows
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.6 – 完整的航拍数据框，前3行
- en: 'Display the segmentation image batch with the following command:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令显示分割图像批次：
- en: '[PRE12]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The output is as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: '![Figure 4.7 – Aerial pandas DataFrame, first five rows](img/B17990_04_07.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.7 – 航拍pandas数据框，前五行](img/B17990_04_07.jpg)'
- en: Figure 4.7 – Aerial pandas DataFrame, first five rows
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.7 – 航拍pandas数据框，前五行
- en: Fun challenge
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的挑战
- en: 'Here is a thought experiment: given an image dataset, how do you create the
    mask for the photos? Hint: you could use fancy image software to auto-trace the
    objects or outlines, then label them. The other options are Mechanical Turk or
    crowd-sourced. You should think about cost versus time.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个思维实验：给定一个图像数据集，你如何为这些照片创建掩膜？提示：你可以使用高级图像软件自动描绘物体或轮廓，然后进行标注。其他选择是使用Mechanical
    Turk或众包。你应该考虑成本与时间的平衡。
- en: Pluto has successfully downloaded and displayed the CamVid and aerial segmentation
    photos. Now, let’s do some image augmentation with Python.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Pluto已经成功下载并展示了CamVid和航拍分割照片。现在，让我们用Python进行一些图像增强。
- en: Reinforcing your learning
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 强化你的学习
- en: 'The same concepts for classification image transformations apply to segmentation
    image transformations. Here, Pluto reuses or slightly hacks the wrapper functions
    in [*Chapter 3*](B17990_03.xhtml#_idTextAnchor058). In particular, Pluto hacks
    the following methods for segmentation:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 分类图像变换的相同概念适用于分割图像变换。在这里，Pluto重复使用或稍微修改了[*第3章*](B17990_03.xhtml#_idTextAnchor058)中的包装函数。特别地，Pluto为分割处理黑客化了以下方法：
- en: Horizontal flip
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 水平翻转
- en: Vertical flip
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 垂直翻转
- en: Rotating
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 旋转
- en: Random resizing and cropping
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随机调整大小和裁剪
- en: Transpose
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转置
- en: Lighting
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 光照
- en: FancyPCA
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: FancyPCA
- en: Fun fact
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的事实
- en: You can’t complete or understand this chapter unless you have read [*Chapter
    3*](B17990_03.xhtml#_idTextAnchor058). This is because Pluto reuses or slightly
    modifies the existing image augmentation wrapper functions.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 你无法完成或理解本章节，除非你已经阅读了[*第3章*](B17990_03.xhtml#_idTextAnchor058)。这是因为Pluto重复使用或稍微修改了现有的图像增强包装函数。
- en: Pluto chose these filters because the Albumentations library marked them as
    **safe** for segmentation. So, let’s start with horizontal flip.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Pluto选择这些滤镜是因为Albumentations库将它们标记为**安全**的分割方法。所以，让我们从水平翻转开始。
- en: Horizontal flip
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 水平翻转
- en: Pluto demonstrated horizontal flip using the PIL library in [*Chapter 3*](B17990_03.xhtml#_idTextAnchor058)
    because the code is easy to understand. Thus, he will hack `draw_image_flip_pil()`
    into the `draw_image_flip_pil_segmen()` function. The transformation code is the
    same – that is, `PIL.ImageOps.mirror(img)`. The change is to display the images
    next to each other.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Pluto在[*第3章*](B17990_03.xhtml#_idTextAnchor058)中使用PIL库演示了水平翻转，因为代码易于理解。因此，他将`draw_image_flip_pil()`函数黑客化为`draw_image_flip_pil_segmen()`函数。转换代码是相同的——即，`PIL.ImageOps.mirror(img)`。变化之处在于将图像并排显示。
- en: 'The command for flipping an image in the CamVid dataset in the Python Notebook
    is as follows:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python Notebook中，翻转CamVid数据集图像的命令如下：
- en: '[PRE13]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The output is as follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: '![Figure 4.8 – Flipping an image using the PIL library](img/B17990_04_08.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![图4.8 – 使用PIL库翻转图像](img/B17990_04_08.jpg)'
- en: Figure 4.8 – Flipping an image using the PIL library
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.8 – 使用PIL库翻转图像
- en: Pluto uses the same function for the mask image and passes the `mask_image`
    column into the pandas DataFrame. It is that easy. Pluto has to transform the
    original and mask images with the same filter.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: Pluto使用相同的函数处理掩膜图像，并将`mask_image`列传入pandas数据框。这就是这么简单。Pluto必须使用相同的滤镜来转换原始图像和掩膜图像。
- en: 'The command for flipping the mask image is as follows:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 翻转掩膜图像的命令如下：
- en: '[PRE14]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The output is as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: '![Figure 4.9 – Flipping the mask using the PIL library](img/B17990_04_09.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![图4.9 – 使用PIL库翻转掩膜](img/B17990_04_09.jpg)'
- en: Figure 4.9 – Flipping the mask using the PIL library
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.9 – 使用PIL库翻转掩膜
- en: Fun fact
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的事实
- en: Pluto only shows relevant code snippets in this book, but the fully functional
    object-oriented methods can be found in the Python Notebook. The code for this
    chapter looks remarkably similar to the code for [*Chapter 3*](B17990_03.xhtml#_idTextAnchor058).
    Pluto designed the software architecture using the principle layout provided in
    [*Chapter 1*](B17990_01.xhtml#_idTextAnchor016). Thus, the code looks clean but
    contains high complexity under the hood.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: Pluto在本书中仅展示相关的代码片段，但完整的面向对象方法可以在Python Notebook中找到。本章的代码与[*第3章*](B17990_03.xhtml#_idTextAnchor058)中的代码非常相似。Pluto使用[*第1章*](B17990_01.xhtml#_idTextAnchor016)提供的原则布局设计了软件架构。因此，代码看起来简洁，但在后台包含了较高的复杂性。
- en: Under the hood, a color image is a three-dimensional array or a **Rank 3 tensor**.
    The image’s shape is (width, height, and depth), where depth is usually equal
    to three, while the mask image’s shape is (width, height), where the value is
    0, 1, 2, and so on up to the number of labels. Therefore, mirroring a **Rank 3
    tensor** follows the same operation as mirroring a **Rank** **1 tensor**.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 从底层来看，彩色图像是一个三维数组或**Rank 3 张量**。图像的形状为（宽度、高度和深度），其中深度通常为 3，而掩码图像的形状为（宽度、高度），其中值为
    0、1、2 等，一直到标签数量。因此，镜像**Rank 3 张量**的操作与镜像**Rank 1 张量**的操作相同。
- en: 'For the Albumentations library, the wrapper function for segmentation is as
    simple as the one provided in [*Chapter 3*](B17990_03.xhtml#_idTextAnchor058).
    The code for the `draw_image_flip_segmen()` method is as follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Albumentations 库，分割的包装函数与在[*第 3 章*](B17990_03.xhtml#_idTextAnchor058)中提供的非常简单。`draw_image_flip_segmen()`
    方法的代码如下：
- en: '[PRE15]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: It is the same as the `draw_image_flip()` function that we provided in [*Chapter
    3*](B17990_03.xhtml#_idTextAnchor058). The difference is that a different helper
    function is used. Instead of using the `_draw_image_album()` helper function,
    it uses the `_draw_image_album_segmentation()` method.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 它与我们在[*第 3 章*](B17990_03.xhtml#_idTextAnchor058)中提供的 `draw_image_flip()` 函数相同。不同之处在于，使用了不同的辅助函数。它没有使用
    `_draw_image_album()` 辅助函数，而是使用了 `_draw_image_album_segmentation()` 方法。
- en: 'The command for performing a horizontal flip on the CamVid segmentation data
    in the Python Notebook is as follows:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 对 CamVid 分割数据在 Python Notebook 中执行水平翻转的命令如下：
- en: '[PRE16]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The output is as follows:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 4.10 – Horizontal flip on the CamVid dataset](img/B17990_04_10.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.10 – CamVid 数据集的水平翻转](img/B17990_04_10.jpg)'
- en: Figure 4.10 – Horizontal flip on the CamVid dataset
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.10 – CamVid 数据集的水平翻转
- en: 'The command for performing a horizontal flip on the aerial segmentation data
    is as follows:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 对航拍分割数据执行水平翻转的命令如下：
- en: '[PRE17]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The output is as follows:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 4.11 – Horizontal flip on the aerial dataset](img/B17990_04_11.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.11 – 航拍数据集的水平翻转](img/B17990_04_11.jpg)'
- en: Figure 4.11 – Horizontal flip on the aerial dataset
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.11 – 航拍数据集的水平翻转
- en: Like in [*Chapter 3*](B17990_03.xhtml#_idTextAnchor058), the wrapper functions
    in this chapter randomly select a new image batch every time.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如同在[*第 3 章*](B17990_03.xhtml#_idTextAnchor058)中所述，本章中的包装函数每次都会随机选择一批新的图像。
- en: Fun challenge
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的挑战
- en: 'Here is a thought experiment: how can you use image segmentation to support
    environmental organizations such as a wildlife conservation group? Hint: consider
    how customs agents can spot people selling parts of an endangered species, such
    as elephant ivory or saga horn, in an open market using their iPhones or **Close-Circuit
    Television** (**CCTV**) monitoring system.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个思维实验：你如何利用图像分割来支持环保组织，例如野生动物保护组织？提示：考虑海关人员如何使用 iPhone 或**闭路电视（CCTV）**监控系统，在开放市场中发现有人出售濒危物种的部分，如象牙或萨嘎角。
- en: Pluto completes the flipping transformation with the vertical flip filter.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: Pluto 使用垂直翻转滤镜完成了翻转操作。
- en: Vertical flip
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 垂直翻转
- en: 'The vertical flip wrapper function is almost the same as the horizontal flip
    method. Pluto could write one uber function instead of each wrapper method individually.
    Still, the goal is to explain each transformation, not refactor it into more compact
    or efficient code. The key code line for the wrapper function is as follows:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 垂直翻转的包装函数几乎与水平翻转方法相同。Pluto 本可以写一个通用函数来替代每个包装方法的独立实现。但目标是解释每个转换，而不是将其重构为更紧凑或更高效的代码。包装函数的关键代码行如下：
- en: '[PRE18]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The command for performing a vertical flip on the CamVid segmentation data
    in the Python Notebook is as follows:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python Notebook 中对 CamVid 分割数据执行垂直翻转的命令如下：
- en: '[PRE19]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The output is as follows:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 4.12 – Vertical flip on the CamVid dataset](img/B17990_04_12.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.12 – CamVid 数据集的垂直翻转](img/B17990_04_12.jpg)'
- en: Figure 4.12 – Vertical flip on the CamVid dataset
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.12 – CamVid 数据集的垂直翻转
- en: 'The command for performing a vertical flip on the aerial segmentation data
    is as follows:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 对航拍分割数据执行垂直翻转的命令如下：
- en: '[PRE20]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The output is as follows:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 4.13 – Vertical flip on the aerial dataset](img/B17990_04_13.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.13 – 航拍数据集的垂直翻转](img/B17990_04_13.jpg)'
- en: Figure 4.13 – Vertical flip on the aerial dataset
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.13 – 航拍数据集的垂直翻转
- en: That concludes flipping. Now, let’s look at rotating.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 翻转操作到此为止。现在，让我们来看一下旋转。
- en: Rotating
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 旋转
- en: 'The rotating safe parameter can go 45 degrees clockwise or counter-clockwise
    in direction. The Albumentations method is as follows:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 旋转的安全参数可以顺时针或逆时针旋转 45 度。Albumentations 方法如下：
- en: '[PRE21]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The command for rotating the CamVid segmentation data in the Python Notebook
    is as follows:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 用于在 Python Notebook 中旋转 CamVid 分割数据的命令如下：
- en: '[PRE22]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The output is as follows:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 4.14 – Rotating the CamVid dataset](img/B17990_04_14.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.14 – 旋转 CamVid 数据集](img/B17990_04_14.jpg)'
- en: Figure 4.14 – Rotating the CamVid dataset
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.14 – 旋转 CamVid 数据集
- en: 'The command for rotating the aerial segmentation data is as follows:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 用于旋转航拍分割数据的命令如下：
- en: '[PRE23]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The output is as follows:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 4.15 – Rotating the aerial dataset](img/B17990_04_15.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.15 – 旋转航拍数据集](img/B17990_04_15.jpg)'
- en: Figure 4.15 – Rotating the aerial dataset
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.15 – 旋转航拍数据集
- en: The next filter is resizing and cropping.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个滤镜是调整大小和裁剪。
- en: Resizing and cropping
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调整大小和裁剪
- en: 'The classification model aims to identify the subject, while the segmentation
    model groups object per pixel. Hence, cropping and resizing are acceptable transformations
    at relatively higher safe parameters. The key code line for the wrapper function
    is as follows:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 分类模型旨在识别对象，而分割模型则按像素对对象进行分组。因此，裁剪和调整大小是在相对较高的安全参数下可以接受的变换。包装函数的关键代码行如下：
- en: '[PRE24]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The command for randomly resizing and cropping the CamVid segmentation data
    in the Python Notebook is as follows:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 用于随机调整大小和裁剪 CamVid 分割数据的 Python Notebook 命令如下：
- en: '[PRE25]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The output is as follows:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 4.16 – Resizing and cropping the CamVid dataset](img/B17990_04_16.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.16 – 调整大小和裁剪 CamVid 数据集](img/B17990_04_16.jpg)'
- en: Figure 4.16 – Resizing and cropping the CamVid dataset
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.16 – 调整大小和裁剪 CamVid 数据集
- en: 'The command for randomly resizing and cropping the aerial segmentation data
    is as follows:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 用于随机调整大小和裁剪航拍分割数据的命令如下：
- en: '[PRE26]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The output is as follows:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 4.17 – Resizing and cropping the aerial dataset](img/B17990_04_17.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.17 – 调整大小和裁剪航拍数据集](img/B17990_04_17.jpg)'
- en: Figure 4.17 – Resizing and cropping the aerial dataset
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.17 – 调整大小和裁剪航拍数据集
- en: Next, we’ll cover the transpose filter.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将介绍转置滤镜。
- en: Transpose
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 转置
- en: 'Pluto didn’t use a transpose filter in [*Chapter 3*](B17990_03.xhtml#_idTextAnchor058)
    for classification, but it is permissible for segmentation. Transposing involves
    switching the *x axis* with the *y axis*. The key code line for the wrapper function
    is as follows:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: Pluto 没有在[*第 3 章*](B17990_03.xhtml#_idTextAnchor058)中使用转置滤镜进行分类，但对于分割是可以接受的。转置是指交换
    *x 轴* 和 *y 轴*。包装函数的关键代码行如下：
- en: '[PRE27]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The command for transposing the CamVid segmentation data is as follows:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 用于转置 CamVid 分割数据的命令如下：
- en: '[PRE28]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The output is as follows:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 4.18 – Transposing the CamVid dataset](img/B17990_04_18.jpg)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.18 – 转置 CamVid 数据集](img/B17990_04_18.jpg)'
- en: Figure 4.18 – Transposing the CamVid dataset
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.18 – 转置 CamVid 数据集
- en: 'The command for transposing the aerial segmentation data is as follows:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 用于转置航拍分割数据的命令如下：
- en: '[PRE29]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The output is as follows:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 4.19 – Transposing the aerial dataset](img/B17990_04_19.jpg)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.19 – 转置航拍数据集](img/B17990_04_19.jpg)'
- en: Figure 4.19 – Transposing the aerial dataset
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.19 – 转置航拍数据集
- en: Fun challenge
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的挑战
- en: 'Implement optical distortion in the Python Notebook. Hint: use a similar Pluto
    wrapper function to the Albumentations library function’s `albumentations.OpticalDistortion()`
    method.'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python Notebook 中实现光学畸变。提示：使用与 Albumentations 库函数 `albumentations.OpticalDistortion()`
    方法类似的 Pluto 包装函数。
- en: Transpose is the last example Pluto uses for geometric transformations. Lighting,
    also known as brightness, belongs to the photometric transformations class.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 转置是 Pluto 用于几何变换的最后一个示例。光照，也称为亮度，属于光度变换类。
- en: Lighting
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 光照
- en: 'Lighting or brightness is acceptable for segmentation in the Albumentations
    library, but it belongs to the photometric transformations class. The original
    image changes to a random brightness level up to a safe level, but the mask image
    will not change. For both datasets, the safe parameter is a brightness of 0.5\.
    The key code line in the wrapper function is as follows:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 光照或亮度在 Albumentations 库中是可以接受的分割变换，但它属于光度变换类。原始图像会变更为随机亮度级别，直到安全水平，但掩码图像不会改变。对于两个数据集，安全参数的亮度为
    0.5。包装函数中的关键代码行如下：
- en: '[PRE30]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The command for using lighting on the CamVid segmentation data is as follows:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 用于对 CamVid 分割数据应用光照的命令如下：
- en: '[PRE31]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The output is as follows:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 4.20 – Using lighting on the CamVid dataset](img/B17990_04_20.jpg)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.20 – 在 CamVid 数据集上使用闪电](img/B17990_04_20.jpg)'
- en: Figure 4.20 – Using lighting on the CamVid dataset
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.20 – 在 CamVid 数据集上使用闪电
- en: 'The command for using lighting on the aerial segmentation data is as follows:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 使用闪电处理空中分割数据的命令如下：
- en: '[PRE32]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The output is as follows:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 4.21 – Using lightning on the aerial dataset](img/B17990_04_21.jpg)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.21 – 在空中数据集上使用闪电](img/B17990_04_21.jpg)'
- en: Figure 4.21 – Using lightning on the aerial dataset
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.21 – 在空中数据集上使用闪电
- en: Similar to the lighting filter, FancyPCA belongs to the photometric transformations
    class.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于光照滤镜，FancyPCA 属于光度变换类。
- en: FancyPCA
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: FancyPCA
- en: 'FancyPCA is the last example Pluto demonstrates for photometric transformations.
    For both datasets, the safe parameter is an alpha value of 0.3\. Once again, FancyPCA
    will not alter the mask image. The key code line in the wrapper function is as
    follows:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: FancyPCA 是 Pluto 演示的最后一个光度变换示例。对于这两个数据集，安全的参数是 alpha 值为 0.3。再次强调，FancyPCA 不会改变掩码图像。包装函数中的关键代码行如下：
- en: '[PRE33]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The command for using FancyPCA on the CamVid segmentation data is as follows:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 FancyPCA 处理 CamVid 分割数据的命令如下：
- en: '[PRE34]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The output is as follows:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 4.22 – Using FancyPCA on the CamVid dataset](img/B17990_04_22.jpg)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.22 – 在 CamVid 数据集上使用 FancyPCA](img/B17990_04_22.jpg)'
- en: Figure 4.22 – Using FancyPCA on the CamVid dataset
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.22 – 在 CamVid 数据集上使用 FancyPCA
- en: 'The command for using FancyPCA on the aerial segmentation data is as follows:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 FancyPCA 处理空中分割数据的命令如下：
- en: '[PRE35]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The output is as follows:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 4.23 – Using FancyPCA on the aerial dataset](img/B17990_04_23.jpg)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.23 – 在空中数据集上使用 FancyPCA](img/B17990_04_23.jpg)'
- en: Figure 4.23 – Using FancyPCA on the aerial dataset
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.23 – 在空中数据集上使用 FancyPCA
- en: Fun challenge
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的挑战
- en: 'Here is a thought experiment or maybe a practice one too: what can you do that
    appears acceptable in image augmentation but has a high probability of a **false-positive**
    or **false-negative** prediction in real-world deployment? Sorry, no hint.'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个思维实验，或者也许是一个实践题：你能做什么看起来在图像增强中是可接受的，但在实际部署中有很高概率产生 **假阳性** 或 **假阴性** 预测？抱歉，没有提示。
- en: Pluto finds that segmentation augmentation is not that different from classification
    augmentation. The wrapper functions are virtually the same, and only the helper
    methods display the images differently. Pluto has demonstrated segmentation for
    the flipping, resizing, cropping, rotating, transposing, lighting, and FancyPCA
    transformations. Similarly to [*Chapter 3*](B17990_03.xhtml#_idTextAnchor058),
    next, Pluto will combine individual filters into an uber function.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: Pluto 发现，分割增强与分类增强并没有太大区别。包装函数几乎相同，只有辅助方法以不同的方式显示图像。Pluto 已经展示了翻转、调整大小、裁剪、旋转、转置、光照和
    FancyPCA 变换的分割处理。与 [*第 3 章*](B17990_03.xhtml#_idTextAnchor058) 类似，接下来，Pluto 将把各个滤镜组合成一个超级函数。
- en: Combining
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组合
- en: Before coding the uber combination methods in Python, Pluto needs to use pandas
    to summarize the filters in this chapter. Many more transformations are applicable
    for segmentation, so if you experiment with other filters in the Python Notebook,
    expand the pandas table with your new filters.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中编码超级组合方法之前，Pluto 需要使用 pandas 汇总本章中的滤镜。分割操作适用更多的变换，因此如果你在 Python 笔记本中试验其他滤镜，可以通过你的新滤镜扩展
    pandas 表格。
- en: 'Pluto displays the summary table using the following command:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: Pluto 使用以下命令显示汇总表格：
- en: '[PRE36]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The output is as follows:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 4.24 – Summary segmentation filters](img/B17990_04_24.jpg)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.24 – 汇总分割滤镜](img/B17990_04_24.jpg)'
- en: Figure 4.24 – Summary segmentation filters
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.24 – 汇总分割滤镜
- en: 'Using the summary table, Pluto writes the wrapper function. The key code line
    is as follows:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 使用汇总表格，Pluto 编写了包装函数。关键的代码行如下：
- en: '[PRE37]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Pluto displays the combination segmentation transformations for the CamVid
    dataset as follows:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: Pluto 显示了 CamVid 数据集的组合分割变换，如下所示：
- en: '[PRE38]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The output is as follows:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 4.25 – Combining the filters for the CamVid dataset](img/B17990_04_25.jpg)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.25 – 组合 CamVid 数据集的滤镜](img/B17990_04_25.jpg)'
- en: Figure 4.25 – Combining the filters for the CamVid dataset
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.25 – 组合 CamVid 数据集的滤镜
- en: 'The command for the aerial dataset in the Python Notebook is as follows:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 空中数据集在 Python 笔记本中的命令如下：
- en: '[PRE39]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The output is as follows:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 4.26 – Combining filters for the aerial dataset](img/B17990_04_26.jpg)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.26 – 组合空中数据集的滤镜](img/B17990_04_26.jpg)'
- en: Figure 4.26 – Combining filters for the aerial dataset
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.26 – 为航拍数据集组合过滤器
- en: Fun challenge
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的挑战
- en: Pluto challenges you to refactor the **Pluto class** to make it faster and more
    compact. You are encouraged to create and upload your library to *GitHub and PyPI.org*.
    Furthermore, you don’t have to name the class **PacktDataAug**, but it would give
    Pluto and his human companion a great big smile if you cited or mentioned this
    book. The code goals were for ease of understanding, reusable patterns, and teaching
    on the **–Python Notebook**. Thus, refactoring the code as a Python library would
    be relatively painless and fun.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: Pluto 挑战你重构 **Pluto 类**，使其更快、更紧凑。你被鼓励创建并上传你的库到 *GitHub 和 PyPI.org*。此外，你不必将类命名为
    **PacktDataAug**，但如果你引用或提到本书，Pluto 和他的人类伙伴将非常高兴。代码的目标是易于理解、可重用的模式以及在 **–Python
    Notebook** 中教学。因此，将代码重构为 Python 库将相对轻松且有趣。
- en: With that, you’ve learned how to combine segmentation transformations. Next,
    we’ll summarize what was covered in this chapter.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 到这里，你已经学会了如何组合分割转换。接下来，我们将总结本章所涵盖的内容。
- en: Summary
  id: totrans-256
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Image segmentation consists of the original image and an accompanying mask image.
    The goal is to determine whether a pixel belongs to a list of objects. For example,
    an urban photograph consists of streets, street signs, cars, trucks, bicycles,
    buildings, trees, and pedestrians. Image segmentation’s job is to decide whether
    this pixel belongs to a car, tree, or other objects.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 图像分割由原始图像和附带的掩膜图像组成。目标是确定某个像素是否属于某个对象列表。例如，一张城市照片包含街道、街道标志、汽车、卡车、自行车、建筑物、树木和行人。图像分割的任务是判断这个像素是属于汽车、树木还是其他物体。
- en: Image segmentation and image classification share the same transformations.
    In other words, most geometric transformations, such as flipping, rotating, resizing,
    cropping, and transposing, work with the original image and mask image in image
    segmentation. Photometric transformations, such as brightness, contrast, and FancyPCA,
    can technically be done with Python, but the filter does not alter the mask image.
    On the other hand, filters such as noise injection and random erasing are unsuitable
    for segmentation because they add or replace pixels in the original image.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 图像分割和图像分类共享相同的转换。换句话说，大多数几何转换，如翻转、旋转、调整大小、裁剪和转置，适用于图像分割中的原始图像和掩膜图像。光度转换，如亮度、对比度和
    FancyPCA，技术上可以通过 Python 实现，但这些过滤器不会改变掩膜图像。另一方面，像噪声注入和随机擦除这样的过滤器不适用于分割，因为它们会在原始图像中添加或替换像素。
- en: Throughout this chapter, there have been *fun facts* and *fun challenges*. Pluto
    hopes you will take advantage of these and expand your experience beyond the scope
    of this chapter.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，有许多 *有趣的事实* 和 *有趣的挑战*。Pluto 希望你能利用这些内容，拓展你的经验，超越本章的范围。
- en: Switching gear, the next chapter will cover text augmentation. Pluto can’t use
    any image augmentation functions, but he can reuse the wrapper functions for downloading
    datasets from the *Kaggle* website.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 切换话题，下一章将讨论文本增强。Pluto 不能使用任何图像增强功能，但他可以重用用于从 *Kaggle* 网站下载数据集的包装函数。
- en: 'Part 3: Text Augmentation'
  id: totrans-261
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三部分：文本增强
- en: 'This part includes the following chapters:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分包含以下章节：
- en: '[*Chapter 5*](B17990_05.xhtml#_idTextAnchor101), *Text Augmentation*'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第 5 章*](B17990_05.xhtml#_idTextAnchor101)，*文本增强*'
- en: '[*Chapter 6*](B17990_06.xhtml#_idTextAnchor116), *Text Augmentation with Machine
    Learning*'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第 6 章*](B17990_06.xhtml#_idTextAnchor116)，*机器学习中的文本增强*'
