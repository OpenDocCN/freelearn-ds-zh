- en: '9'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '9'
- en: Normalization and Standardization
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 归一化与标准化
- en: Feature scaling, normalization, and standardization are essential preprocessing
    steps that help ensure that machine learning models can effectively learn from
    data. These techniques address issues related to numerical stability, algorithm
    convergence, model performance, and more, ultimately contributing to better, more
    reliable results in data analysis and machine learning tasks.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 特征缩放、归一化和标准化是机器学习中的重要预处理步骤，能够帮助确保机器学习模型能够有效地从数据中学习。这些技术解决了与数值稳定性、算法收敛性、模型性能等相关的问题，最终有助于在数据分析和机器学习任务中获得更好、更可靠的结果。
- en: 'In this chapter, we will dive deep into the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将深入探讨以下主题：
- en: Scaling features to a range
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将特征缩放到一个范围
- en: Z-score scaling
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Z-score 缩放
- en: Robust scaling
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 鲁棒缩放
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You can find all the code for this chapter at [https://github.com/PacktPublishing/Python-Data-Cleaning-and-Preparation-Best-Practices/tree/main/chapter09](https://github.com/PacktPublishing/Python-Data-Cleaning-and-Preparation-Best-Practices/tree/main/chapter09).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[https://github.com/PacktPublishing/Python-Data-Cleaning-and-Preparation-Best-Practices/tree/main/chapter09](https://github.com/PacktPublishing/Python-Data-Cleaning-and-Preparation-Best-Practices/tree/main/chapter09)找到本章的所有代码。
- en: The different code files follow the names of the different sections of the chapters.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的代码文件遵循章节中不同部分的名称。
- en: Scaling features to a range
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将特征缩放到一个范围
- en: Feature scaling is a preprocessing technique in machine learning that rescales
    the *range* of independent variables or features of a dataset. It’s used to ensure
    that all features contribute equally to the model training process by bringing
    them to a common scale. Feature scaling is particularly important for algorithms
    that are sensitive to the scale of input features, such as k-nearest neighbors
    and gradient descent-based optimization algorithms.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 特征缩放是机器学习中的一种预处理技术，它对数据集的独立变量或特征进行*范围*重缩放。它的目的是通过将所有特征调整到一个共同的尺度上，确保所有特征在模型训练过程中对模型的贡献相同。特征缩放对于那些对输入特征尺度敏感的算法尤为重要，如k近邻算法和基于梯度下降的优化算法。
- en: Note
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: When scaling features, we’re changing the range of the distribution of the data.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行特征缩放时，我们实际上是在改变数据分布的范围。
- en: 'Let’s present an example to make the concept of feature scaling easier to grasp.
    Let’s suppose you’re working on a machine learning project to predict housing
    prices based on various features of the houses, such as the following:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个例子来帮助理解特征缩放的概念。假设你正在进行一个机器学习项目，目的是根据房屋的各种特征来预测房价，例如以下几个特征：
- en: Square footage (in square feet)
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建筑面积（平方英尺）
- en: Distance to the nearest school (in miles)
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 到最近学校的距离（英里）
- en: Distance to the nearest public transportation stop (miles)
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 到最近公共交通站点的距离（英里）
- en: Now, let’s discuss why feature scaling is important in this context. The **Square
    footage** feature could range from hundreds to thousands of square feet. The **Distance
    to the nearest school** and **Distance to the nearest public transportation stop**
    features might range from a fraction of a mile to several miles. If you don’t
    scale these features, the algorithm may give excessive importance to the larger
    values, making square footage the dominant factor in predicting house prices.
    Features such as Distance to the nearest school might be unfairly downplayed.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来讨论一下在这个背景下特征缩放为什么如此重要。**建筑面积**这一特征的范围可能从几百平方英尺到几千平方英尺不等。而**到最近学校的距离**和**到最近公共交通站点的距离**可能从几分之一英里到几英里不等。如果不对这些特征进行缩放，算法可能会给较大值过高的权重，从而使得建筑面积在预测房价中占主导地位。像到最近学校的距离这样的特征可能会被不公平地忽略。
- en: 'For all the sections in this chapter, we will use the above example to showcase
    the different scaling methods. Let’s go through the data creation for this example;
    the code can be found at [https://github.com/PacktPublishing/Python-Data-Cleaning-and-Preparation-Best-Practices/blob/main/chapter09/min_max_scaling.py](https://github.com/PacktPublishing/Python-Data-Cleaning-and-Preparation-Best-Practices/blob/main/chapter09/min_max_scaling.py):'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章的所有部分，我们将使用上述示例来展示不同的缩放方法。让我们先来看一下这个示例的数据创建过程；代码可以在[https://github.com/PacktPublishing/Python-Data-Cleaning-and-Preparation-Best-Practices/blob/main/chapter09/min_max_scaling.py](https://github.com/PacktPublishing/Python-Data-Cleaning-and-Preparation-Best-Practices/blob/main/chapter09/min_max_scaling.py)找到：
- en: 'Let’s start by importing the required libraries:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从导入所需的库开始：
- en: '[PRE0]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, we will create a dataset with features related to housing prices:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个与房价相关的特征数据集：
- en: '[PRE1]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We’ll create the following features that affect the price of a house:'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将创建以下影响房价的特征：
- en: 'Square footage in square feet:'
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 平方英尺面积：
- en: '[PRE2]'
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Distance to the nearest school in miles:'
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 到最近学校的距离（以英里为单位）：
- en: '[PRE3]'
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Commute distance to work in miles:'
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通勤到工作的距离（以英里为单位）：
- en: '[PRE4]'
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Traffic density (skewed feature):'
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交通密度（偏态特征）：
- en: '[PRE5]'
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Then, we create a DataFrame that holds all the features:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们创建一个包含所有特征的DataFrame：
- en: '[PRE6]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Finally, we plot the original distributions:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们绘制原始分布：
- en: '[PRE7]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You can see the original distributions of the data here:'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以在这里看到数据的原始分布：
- en: '![Figure 9.1 – Distribution of house pricing prediction use case](img/B19801_09_1.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图9.1 – 房价预测用例的分布](img/B19801_09_1.jpg)'
- en: Figure 9.1 – Distribution of house pricing prediction use case
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.1 – 房价预测用例的分布
- en: 'Let’s display the statistics of our dataset:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们显示数据集的统计信息：
- en: '[PRE8]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This will print the following output:'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将打印以下输出：
- en: '![Figure 9.2 – Original dataset statistics](img/B19801_09_2.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图9.2 – 原始数据集统计信息](img/B19801_09_2.jpg)'
- en: Figure 9.2 – Original dataset statistics
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.2 – 原始数据集统计信息
- en: Now let’s discuss one of the most common methods for scaling – **min-max scaling**.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们讨论最常见的缩放方法之一——**min-max缩放**。
- en: Min-max scaling
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Min-max缩放
- en: Min-max scaling, also known as **normalization**, scales the values of a variable
    to a specific range, typically between 0 and 1\. Min-max scaling is useful when
    you want to ensure that all values in a variable fall within a standardized range,
    making them directly comparable. It is commonly employed when the distribution
    of the variable is not assumed to be normal.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Min-max缩放，也称为**归一化**，将变量的值缩放到一个特定的范围，通常在0和1之间。Min-max缩放在你想确保变量中的所有值都落在标准化范围内，使它们可以直接比较时非常有用。当变量的分布不假设为正态分布时，它通常被应用。
- en: 'Let’s have a look at the formula for calculating min-max scaling:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下计算min-max缩放的公式：
- en: X _ scaled =(X − X _ min) / (X _ max − X _ min)
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: X _ 缩放 = (X − X _ min) / (X _ max − X _ min)
- en: As you can see from the formula, min-max scaling preserves the relative ordering
    of values but *compresses them into a specific range*. One thing to note here
    is that it is *not a way to deal with outliers* and if outliers exist in the data,
    these extreme values can disproportionately influence the scaling. So, it is a
    good practice to deal with outliers first and then proceed to the scaling of features.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 从公式中可以看出，min-max缩放保持了值的相对顺序，但*将它们压缩到一个特定的范围*。需要注意的是，这*不是处理异常值*的方法，如果数据中存在异常值，这些极端值可能会不成比例地影响缩放。因此，最好先处理异常值，然后再进行特征的缩放。
- en: 'Scaling to a specific range is a suitable approach when the following conditions
    are satisfied:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当满足以下条件时，缩放到特定范围是合适的：
- en: You have prior knowledge of the approximate upper and lower bounds of your data
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你已经知道数据的大致上下限
- en: Your data follows a relatively uniform or bell-shaped distribution across that
    range
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的数据在这个范围内遵循相对均匀或钟形分布
- en: Your chosen machine learning algorithm or model benefits from having features
    within a specific range, typically `[0, 1]` or any other desired range
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你选择的机器学习算法或模型通过将特征限制在特定范围内，通常是`[0, 1]`或任何其他期望的范围，会受益。
- en: A classic example of this scenario is age. Age values typically span from 0
    to 90 and the entire range includes a significant number of individuals. However,
    scaling something such as income is not really recommended as there are a limited
    number of individuals with exceptionally high incomes. If you were to apply linear
    scaling to income, the upper limit of the scale would become exceedingly high,
    and most data points would be concentrated in a small segment of the scale, leading
    to loss of information and skewed representations.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这个场景的经典例子是年龄。年龄值通常从0到90，整个范围内有大量个体。然而，不太建议对收入进行缩放，因为高收入个体的数量有限。如果你对收入进行线性缩放，缩放的上限将变得异常高，大多数数据点将集中在一个狭窄的范围内，导致信息丢失和失真。
- en: 'Let’s have a look at the code for *the house pricing prediction use case* we
    discussed previously to understand how a min-max scaler can transform the data:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下我们之前讨论的*房价预测用例*的代码，了解min-max缩放器如何转换数据：
- en: 'First, we’ll scale the data using `MinMaxScaler()`:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们使用`MinMaxScaler()`来缩放数据：
- en: '[PRE9]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We can display the dataset statistics after scaling using the following code:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用以下代码显示缩放后的数据集统计信息：
- en: '[PRE10]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Let’s plot and observe the distributions after scaling:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们绘制并观察缩放后的分布：
- en: '[PRE11]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Let’s have a look at the modified data distributions after the scaling:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看标准化后修改的数据分布：
- en: '![Figure 9.3 – Distribution of house pricing prediction use case after min-max
    scaling](img/B19801_09_3.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.3 – 经过最小最大标准化后的房价预测用例分布](img/B19801_09_3.jpg)'
- en: Figure 9.3 – Distribution of house pricing prediction use case after min-max
    scaling
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.3 – 经过最小最大标准化后的房价预测用例分布
- en: We applied min-max scaling to transform each column into a standardized range
    between 0 and 1\. The shape of the original feature distributions remained the
    same after scaling because min-max scaling maintains the relative distances between
    data points. The scaling had a normalization effect on the data, bringing all
    features to a common scale. This is important when features have different units
    or ranges, preventing one feature from dominating others.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用了最小最大标准化，将每一列转化为标准化的 0 到 1 之间的范围。由于最小最大标准化保持了数据点之间的相对距离，因此原始特征分布的形状在标准化后保持不变。标准化对数据起到了归一化的作用，将所有特征带到了一个共同的尺度。这在特征具有不同单位或范围时尤为重要，可以防止某个特征支配其他特征。
- en: Note
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If your dataset is sparse (contains many zero values), min-max scaling may not
    be appropriate, as it can result in loss of information. Alternative methods such
    as **MaxAbsScaler** or robust scalers may be considered.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的数据集是稀疏的（包含许多零值），则最小最大标准化可能不适用，因为它可能导致信息丢失。可以考虑使用替代方法，如**MaxAbsScaler**或鲁棒缩放器。
- en: In the following section, we will discuss z-score scaling.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将讨论 Z 分数标准化。
- en: Z-score scaling
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Z 分数标准化
- en: Z-score scaling, also known as standardization, is applied when you want to
    transform your data to have a mean of 0 and a standard deviation of 1\. Z-score
    scaling is widely used in statistical analysis and machine learning, especially
    when algorithms such as k-means clustering or **Principal Component Analysis**
    (**PCA**) are employed.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Z 分数标准化，也称为标准化，适用于当你想将数据转化为均值为 0，标准差为 1 的形式时。Z 分数标准化在统计分析和机器学习中被广泛应用，尤其是在使用
    k-means 聚类或**主成分分析**（**PCA**）等算法时。
- en: 'Here is the formula for z-score:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 Z 分数的公式：
- en: X _ scaled =(X − mean(X)) / std(X)
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: X _ scaled =(X − mean(X)) / std(X)
- en: 'Let’s continue with the house pricing prediction use case to showcase the z-score
    scaling. The code can be found at [https://github.com/PacktPublishing/Python-Data-Cleaning-and-Preparation-Best-Practices/blob/main/chapter09/zscaler.py](https://github.com/PacktPublishing/Python-Data-Cleaning-and-Preparation-Best-Practices/blob/main/chapter09/zscaler.py):'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续使用房价预测用例来展示 Z 分数标准化。代码可以在 [https://github.com/PacktPublishing/Python-Data-Cleaning-and-Preparation-Best-Practices/blob/main/chapter09/zscaler.py](https://github.com/PacktPublishing/Python-Data-Cleaning-and-Preparation-Best-Practices/blob/main/chapter09/zscaler.py)
    找到：
- en: 'We first perform z-score scaling:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先执行 Z 分数标准化：
- en: '[PRE12]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Then, we print the dataset statistics:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们打印数据集统计信息：
- en: '[PRE13]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Finally, we visualize the distributions:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们可视化分布：
- en: '[PRE14]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Let’s have a look at the modified data distributions after the scaling:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看标准化后修改的数据分布：
- en: '![Figure 9.4 – Distribution of house pricing prediction use case after Z-scaling](img/B19801_09_4.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.4 – 经过 Z 标准化后的房价预测用例分布](img/B19801_09_4.jpg)'
- en: Figure 9.4 – Distribution of house pricing prediction use case after Z-scaling
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.4 – 经过 Z 标准化后的房价预测用例分布
- en: The mean of each feature after scaling is very close to 0, which is expected
    in z-score scaling. The data is now centered around 0\. The standard deviation
    for each feature is now approximately 1, making the scales comparable. The minimum
    and maximum values have been transformed, maintaining the relative distribution
    of data.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 标准化后的每个特征的均值非常接近 0，这是 Z 分数标准化的预期结果。数据现在已围绕 0 进行集中。每个特征的标准差大约为 1，使得不同特征之间的尺度具有可比性。最小值和最大值已被转换，但保持了数据的相对分布。
- en: When to use Z-score scaling
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 何时使用 Z 分数标准化
- en: 'Let’s also discuss some considerations regarding when to use z-score scaling:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们还讨论一些关于何时使用 Z 分数标准化的注意事项：
- en: Z-score scaling assumes that the data is approximately normally distributed,
    or at least symmetrically distributed, around a central mean value. If your data
    is highly skewed or has a non-standard distribution, standardization may not be
    as effective in making the data more Gaussian. As you can see, the `Commute_Distance`
    and `Traffic_Density` features are skewed and the z-score scaling was not that
    successful as the data is not centered around the mean compared to the rest of
    the features.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Z-score 缩放假设数据大致呈正态分布，或者至少围绕中心均值呈对称分布。如果数据高度偏斜或具有非标准分布，标准化可能在使数据更符合高斯分布方面效果不佳。如你所见，`Commute_Distance`
    和 `Traffic_Density` 特征呈偏斜分布，且由于数据未围绕均值集中，z-score 缩放效果并不理想。
- en: This is most applicable to numerical features rather than categorical or ordinal
    ones. Ensure that the data you are standardizing is quantitative in nature.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这种方法最适用于数值特征，而非分类或有序特征。确保你要标准化的数据是定量性质的。
- en: Extreme outliers can have a significant impact on the mean and standard deviation,
    which are used in z-score scaling. It’s important to address outliers before standardization,
    as they can distort the scaling effect.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 极端异常值可能对均值和标准差产生重大影响，而这些是z-score缩放中使用的统计量。因此，在标准化之前处理异常值非常重要，因为它们可能扭曲缩放效果。
- en: Z-score scaling assumes a linear relationship between variables. If the underlying
    relationship is non-linear, other scaling methods or transformations may be more
    appropriate.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Z-score 缩放假设变量之间存在线性关系。如果底层关系是非线性的，其他缩放方法或变换可能更为合适。
- en: Z-score scaling assumes that the variables are independent or at least not highly
    correlated. If variables are highly correlated, standardization may not provide
    additional benefits, and correlation structure should be considered separately.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Z-score 缩放假设变量是独立的，或至少不高度相关。如果变量之间高度相关，标准化可能不会提供额外的好处，且应单独考虑相关性结构。
- en: Z-score scaling alters the original units of the data, which can affect the
    interpretability of results. Consider whether maintaining the original units is
    essential for your analysis.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Z-score 缩放会改变数据的原始单位，这可能会影响结果的可解释性。考虑在分析中是否需要保持原始单位。
- en: For small datasets, the impact of z-score scaling can be more pronounced. Be
    cautious when applying standardization to very small datasets, as it can potentially
    overemphasize the effects of outliers.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 对于小型数据集，z-score 缩放的影响可能更为显著。对非常小的数据集应用标准化时要小心，因为它可能会过度强调异常值的影响。
- en: Robust scaling
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 稳健缩放
- en: Robust scaling, also known as **robust standardization**, is a method of feature
    scaling that is particularly useful when dealing with datasets containing outliers.
    Unlike min-max scaling and z-score scaling, which can be sensitive to outliers,
    robust scaling is designed to be robust in the presence of extreme values. It
    is especially beneficial when you want to normalize or standardize features while
    minimizing the impact of extreme values. Robust scaling is also suitable for datasets
    where the features do not follow a normal distribution and may have skewness or
    heavy tails.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 稳健缩放，也叫**稳健标准化**，是一种特征缩放方法，特别适用于处理包含异常值的数据集。与可能对异常值敏感的最小-最大缩放和z-score缩放不同，稳健缩放旨在在存在极端值时保持稳健性。当你希望在最小化极端值影响的同时对特征进行规范化或标准化时，它尤为有用。稳健缩放也适用于那些特征不遵循正态分布、可能具有偏斜或重尾的数据集。
- en: 'Here is the formula for robust scaling:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是稳健缩放的公式：
- en: X _ scaled = (X − median) / IQR
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: X _ scaled = (X − median) / IQR
- en: Subtracting the median and dividing by the **Interquartile Range** (**IQR**)in
    the scaling process normalizes the data by centering it around the median and
    scaling it based on the spread represented by the IQR. This normalization helps
    to mitigate the impact of extreme values, making the scaled values more representative
    of the overall distribution.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在缩放过程中，通过减去中位数并除以**四分位距**（**IQR**）来规范化数据，使其围绕中位数进行中心化，并根据IQR所表示的分布范围进行缩放。这种规范化有助于减轻极端值的影响，使得缩放后的值更加代表整体分布。
- en: As we have already discussed in the previous chapter, the median being the middle
    value when the data is ordered makes robust scaling less sensitive to extreme
    values or outliers than other scaling methods that rely on the mean. In addition,
    the IQR, representing the range between the first quartile (Q1) and the third
    quartile (Q3), is also robust against outliers. Unlike the full range or standard
    deviation, the IQR focuses on the middle 50% of the data, making it less affected
    by extreme values.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在上一章中讨论的那样，中位数是当数据按顺序排列时位于中间的值，使得鲁棒缩放比其他依赖均值的缩放方法对极端值或异常值的敏感度较低。此外，四分位距（IQR）表示第一四分位数（Q1）和第三四分位数（Q3）之间的范围，亦对异常值具有鲁棒性。与完整范围或标准差不同，IQR侧重于数据的中间50%，因此不容易受到极端值的影响。
- en: 'Here’s an example of how to apply robust scaling using Python code:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是如何使用 Python 代码应用鲁棒缩放的示例：
- en: '[PRE15]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Let’s have a look at the modified data distributions after the scaling:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下缩放后修改的数据分布：
- en: '![Figure 9.5 – Distribution of house pricing prediction use case after robust
    scaling](img/B19801_09_5.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.5 – 鲁棒缩放后房价预测案例分布](img/B19801_09_5.jpg)'
- en: Figure 9.5 – Distribution of house pricing prediction use case after robust
    scaling
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.5 – 鲁棒缩放后房价预测案例分布
- en: After the robust scaling exercise, we can observe that the central tendency
    of the data has shifted, and that the mean of each feature is now closer to zero.
    This is because the robust scaling process subtracts the median. As for the spread
    of the data, it changed as a result of dividing by the IQR. The variability in
    each feature is now represented in a more consistent manner, robust to outliers.
    The range of values for each feature is now compressed, particularly for features
    with larger initial ranges, preventing dominance by features with extreme values.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 经过鲁棒缩放处理后，我们可以观察到数据的中心趋势发生了变化，每个特征的均值现在更接近零。这是因为鲁棒缩放过程减去了中位数。至于数据的分布，它在除以四分位距（IQR）后发生了变化。每个特征的变异性现在以更一致的方式呈现，且对异常值更为稳健。每个特征的值范围现在被压缩，特别是对于那些初始范围较大的特征，防止了极端值特征的主导作用。
- en: To close the chapter, we have created a summary table presenting all the techniques
    discussed so far, including information on when to use them, as well as the advantages
    and disadvantages of each.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 为了总结本章内容，我们制作了一个总结表格，展示了迄今为止讨论的所有技术，包括它们的使用时机、优缺点等信息。
- en: Comparison between methods
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 方法比较
- en: This chart provides guidance on which scaling technique is suitable for various
    data scenarios.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 本图表提供了在不同数据情境下，适合使用哪种缩放技术的指导。
- en: '| **Scaling method** | **When** **to use** | **Pros** | **Cons** |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| **缩放方法** | **何时使用** | **优点** | **缺点** |'
- en: '| **Min-max scaling** | Features have a clear, known rangeNormal distribution
    is assumedData does not contain outliers | Simple and easy to understandPreserves
    relative relationshipsMemory efficient | Sensitive to outliers |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| **最小-最大缩放** | 特征具有明确且已知的范围假设数据服从正态分布数据不包含异常值 | 简单易懂保留相对关系节省内存 | 对异常值敏感 |'
- en: '| **Z-score scaling** | Data follows a normal distributionNo strong assumptions
    about the rangeHandling outliers is not a priority | Standardizes data to zero
    mean and deviation of 1 | Sensitive to outliersMay not be suitable for skewed
    data |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| **Z-score缩放** | 数据服从正态分布对范围没有强假设处理异常值不是重点 | 将数据标准化为零均值，标准差为1 | 对异常值敏感可能不适合偏态数据
    |'
- en: '| **Robust scaling** | Data contains outliersSkewed distributions or non-normal
    dataEqualizing feature contributionsResilience to varying feature variances |
    Less sensitive to outliersPreserves central tendency and spread | Computationally
    more expensive |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| **鲁棒缩放** | 数据包含异常值偏态分布或非正态数据平衡特征贡献对不同特征方差的弹性 | 对异常值较不敏感保留中心趋势和分布 | 计算开销更大
    |'
- en: Table 9.1 – Comparing different scaling techniques
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 表 9.1 – 比较不同的缩放技术
- en: Computational complexity
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 计算复杂度
- en: Min-max scaling tends to be more memory-efficient, especially when dealing with
    large datasets. This is because min-max scaling only involves scaling the values
    based on the minimum and maximum values of each feature, and the computation is
    relatively straightforward.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 最小-最大缩放方法通常更节省内存，尤其是在处理大型数据集时。这是因为最小-最大缩放仅仅基于每个特征的最小值和最大值进行缩放，计算相对简单。
- en: On the other hand, z-score scaling and robust scaling both require additional
    calculations such as mean, standard deviation (for z-score scaling), median, and
    interquartile range (for robust scaling), which may involve more memory usage.
    The computational complexity and memory requirements of z-score scaling and robust
    scaling can become more pronounced, particularly when dealing with large datasets.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，z-score 标准化和稳健标准化都需要额外的计算，如均值、标准差（用于 z-score 标准化）、中位数和四分位间距（用于稳健标准化），这可能会导致更多的内存使用。尤其在处理大数据集时，z-score
    标准化和稳健标准化的计算复杂性和内存需求可能会变得更加明显。
- en: Finally, let’s summarize our learning for this chapter and get inspired for
    the next one.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们总结一下本章的学习内容，并为下一章获得启发。
- en: Summary
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, we explored three common methods for scaling numerical features:
    min-max scaling, z-score scaling, and robust scaling. Min-max scaling transforms
    data to a specific range, making it suitable for algorithms sensitive to feature
    magnitudes. Z-score scaling standardizes data to zero mean and unit variance,
    providing a standardized distribution. Robust scaling, robust to outliers, employs
    the median and interquartile range, making it suitable for datasets with skewed
    distributions or outliers. We also went through different considerations to keep
    in mind while deciding on the best approach for your use case.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，我们探讨了三种常见的数值特征标准化方法：最小-最大标准化、z-score 标准化和稳健标准化。最小-最大标准化将数据转换到一个特定的范围，使其适用于对特征大小敏感的算法。z-score
    标准化将数据标准化为零均值和单位方差，提供一个标准化的分布。稳健标准化则通过使用中位数和四分位间距，能够抵抗离群值，适用于具有偏态分布或离群值的数据集。我们还讨论了在选择最适合你使用场景的方法时需要考虑的不同因素。
- en: Moving forward, we’ll shift our focus to handling categorical features in the
    next chapter.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将在下一章将重点转向处理分类特征。
