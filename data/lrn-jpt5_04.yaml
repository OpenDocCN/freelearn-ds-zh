- en: Jupyter Julia Scripting
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jupyter Julia 脚本
- en: Julia is a language that was specifically designed to be used for high-performance,
    numerical computing. Most importantly, it differs from the previous scripting
    languages that have been covered in this book (R and to a certain extent, Python)
    in that Julia is a full language  and not limited to data handling.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Julia 是一门专为高性能数值计算设计的编程语言。最重要的是，它与本书中介绍的其他脚本语言（R 和在某种程度上是 Python）不同，因为 Julia
    是一门完整的语言，而不仅仅局限于数据处理。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Adding Julia scripting to your installation
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 Julia 脚本添加到你的安装环境中
- en: Basic Julia in Jupyter
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jupyter 中的基础 Julia
- en: Julia limitations in Jupyter
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Julia 在 Jupyter 中的限制
- en: Standard Julia capabilities
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准 Julia 功能
- en: Julia visualizations in Jupyter
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jupyter 中的 Julia 可视化
- en: Julia Vega plotting
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Julia Vega 绘图
- en: Julia parallel processing
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Julia 并行处理
- en: Julia control flow
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Julia 控制流程
- en: Julia regular expressions
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Julia 正则表达式
- en: Julia unit testing
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Julia 单元测试
- en: Adding Julia scripting to your installation
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 Julia 脚本添加到你的安装环境中
- en: We will install Julia on macOS and Windows. There are very similar steps in
    both environments due to using Anaconda as the basis for the installation.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在 macOS 和 Windows 上安装 Julia。这两个环境中的步骤非常相似，因为安装是基于 Anaconda 的。
- en: Adding Julia scripts to Jupyter
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 Julia 脚本添加到 Jupyter
- en: Once Julia is available on your machine, enabling Julia within Jupyter is readily
    accomplished.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 Julia 在你的机器上可用，启用 Jupyter 中的 Julia 就变得非常简单。
- en: First, we need to install Julia on our Windows machine. Navigate to the Julia
    download page ([http://julialang.org/downloads/](http://julialang.org/downloads/)),
    download the correct version, which is Julia 0.6.1 for most environments, and
    run the installation with the standard default settings.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要在 Windows 机器上安装 Julia。访问 Julia 下载页面（[http://julialang.org/downloads/](http://julialang.org/downloads/)），下载正确的版本，大多数环境下是
    Julia 0.6.1，并使用标准默认设置进行安装。
- en: You must run the Julia installation as an Administrator on your machine. After
    downloading the file, open the `Downloads` folder, right-click on the Julia executable,
    and select Run as administrator.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须以管理员身份运行 Julia 安装程序。在下载文件后，打开 `Downloads` 文件夹，右键点击 Julia 可执行文件，并选择“以管理员身份运行”。
- en: 'Once the install is complete, you should verify that everything worked. Select
    Julia from the programs list and run the Julia program. You should see the command
    line with Julia displayed, as shown in the following screenshot:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，你应该验证一切是否正常工作。从程序列表中选择 Julia 并运行该程序，你应该会看到显示 Julia 的命令行，如下图所示：
- en: '![](img/6a363cf1-9dbf-4a8e-bcae-c9ccb5070b36.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6a363cf1-9dbf-4a8e-bcae-c9ccb5070b36.png)'
- en: 'The current version of Julia will not automatically include updates to any
    packages that may be used. For that, we run the following command to add Julia
    to Jupyter:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当前版本的 Julia 不会自动包含可能使用的包的更新。为此，我们运行以下命令将 Julia 添加到 Jupyter：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This will result in a number of packages being updated or installed on to your
    machine. Your display will look something like the following screenshot:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致一系列包被更新或安装到你的机器上。你的显示屏应该会类似于以下截图：
- en: '![](img/8dee0148-eef3-4aad-909c-a0a21180c33a.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8dee0148-eef3-4aad-909c-a0a21180c33a.png)'
- en: Julia uses font color as feedback. I entered the text `Pkg.update()` in white
    at the top of the screen; successful execution steps are in blue, and possible
    problems are shown in red. You must wait for the installation to complete.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Julia 使用字体颜色作为反馈。我在屏幕顶部输入了白色的文本 `Pkg.update()`；成功执行的步骤显示为蓝色，可能存在的问题显示为红色。你必须等待安装完成。
- en: This is quite an involved process, where the system looks to see what packages
    need to be updated and installed, installs each one, verifies that each was successful,
    and then does it all again until there is nothing left to update.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个相当复杂的过程，系统会检查哪些包需要更新和安装，逐一安装每个包，验证每个包是否成功，然后再继续执行更新，直到没有剩余的包需要更新。
- en: 'The last line should have read the following:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一行应该是如下所示：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: At this point, you can close the Julia window (by using the `quit()` command).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 到这个时候，你可以关闭 Julia 窗口（使用 `quit()` 命令）。
- en: 'One last step is to open your Notebook (by using the `jupyter notebook` command),
    and if you open the New menu (in the upper-right corner of the screen), you should
    see a Julia type available, as shown in the following screenshot:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是打开你的笔记本（使用 `jupyter notebook` 命令），如果你打开右上角的 New 菜单，你应该会看到一个可用的 Julia 类型，如下图所示：
- en: '![](img/245ee21a-58a5-4b84-b320-de633788231c.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/245ee21a-58a5-4b84-b320-de633788231c.png)'
- en: Adding Julia packages to Jupyter
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Jupyter 中添加 Julia 包
- en: 'The standard installation for Julia under Jupyter has many packages that are
    commonly used in Julia programming. However, if you do need to add another package,
    a small number of steps are required to be followed:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Jupyter 中的标准 Julia 安装包含了许多常用的 Julia 编程包。然而，如果你确实需要添加其他包，还是需要按照一些简单的步骤操作：
- en: Close down your Notebook (including the server).
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭你的 Notebook（包括服务器）。
- en: 'Run the Julia command-line program:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 Julia 命令行程序：
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Restart your Notebook. The package should be available in your Julia script,
    for example,  `library("name of the package you want to add")`.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新启动你的笔记本。这个包应该可以在你的 Julia 脚本中使用，例如，`library("你想添加的包的名称")`。
- en: I would recommend adding the preceding two packages right away, as they are
    needed for many scripts.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议你立即添加前面提到的两个包，因为它们是许多脚本所必需的。
- en: 'The first time you use a package in Julia, you will see a line highlighted
    in light red that shows Julia is precompiling, such as this: `INFO: Precompiling
    module Dataframes...`'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '第一次使用 Julia 中的包时，你会看到一行被浅红色高亮显示，表示 Julia 正在预编译，例如：`INFO: Precompiling module
    Dataframes...`'
- en: You can use the `Pkg.add(...)` function directly in your script, but that doesn't
    seem correct. Every time you run your script, the system will attempt to validate
    whether you have the specified package, install it into your environment if needed,
    and even tell you whether it is out of date. None of these steps belong to part
    of your script.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以直接在脚本中使用 `Pkg.add(...)` 函数，但这似乎不太合适。每次你运行脚本时，系统都会尝试验证你是否已安装指定的包，若没有，则会安装到你的环境中，甚至告诉你它是否过时。这些步骤并不应该属于你的脚本的一部分。
- en: Basic Julia in Jupyter
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jupyter 中的基础 Julia
- en: In this example, we will use the Iris dataset for some standard analysis. So,
    start a new Julia Notebook and call it `Julia Iris`. We can enter a small script
    to see how the steps progress for a Julia script.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将使用 Iris 数据集进行一些标准分析。所以，启动一个新的 Julia Notebook，并将其命名为 `Julia Iris`。我们可以输入一个小脚本，查看
    Julia 脚本的执行过程。
- en: This script uses another package for plotting, which is called `Gadfly`. You
    will have to go through similar steps as to the ones we went through in the previous
    section to install the package before operating the script.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本使用了另一个用于绘图的包，叫做 `Gadfly`。你需要像我们在上一节中所做的那样，按照类似的步骤安装该包，然后再运行脚本。
- en: 'Enter the following script into separate cells of your Notebook:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下脚本输入到笔记本的不同单元格中：
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`RDatasets` is a library that contains several of the commonly used R datasets,
    such as `iris`. This is a simple script—we define the libraries that we are going
    to use, set the size of the `plot` area, and plot out the `iris` data points (`color`
    coded to `Species`).'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`RDatasets` 是一个包含了几个常用 R 数据集的库，比如 `iris`。这是一个简单的脚本——我们定义了要使用的库，设置 `plot` 区域的大小，并绘制出
    `iris` 数据点（根据 `Species` 用不同颜色编码）。'
- en: 'So, you will end up with a starting screen that looks like the following screenshot:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，你最终会得到一个启动屏幕，类似下面的截图：
- en: '![](img/fec1f011-ce80-4f10-8bd2-2221f8b84c4c.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fec1f011-ce80-4f10-8bd2-2221f8b84c4c.png)'
- en: I have used Markdown cells for the text cells. These serve as documentation
    of the processing and are not interpreted by the engine.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用了 Markdown 单元格来展示文本单元格。这些单元格作为处理的文档记录，并不会被引擎解析。
- en: 'We should take note of a few aspects of the Julia Notebook view:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该注意一下 Julia Notebook 视图的几个方面：
- en: We have the Julia logo (the three colored circles) in the upper-right corner.
    You will have seen this logo running in other Julia installations (as we saw earlier
    when we ran the Julia command line previously).
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们在右上角看到了 Julia 的徽标（那三个彩色圆圈）。你可能已经在其他 Julia 安装中看到过这个徽标（就像我们之前运行 Julia 命令行时看到的那样）。
- en: The circle to the right of the Julia logo is a busy indicator. When your script
    starts, the title of the table says busy as Julia is starting. When your script
    is running, the circle is filled in black. When it is not running, it is empty.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Julia 徽标右侧的圆圈是一个忙碌指示器。当你的脚本启动时，表格标题会显示为忙碌，因为 Julia 正在启动。当脚本运行时，圆圈会变成黑色。当它没有运行时，圆圈是空的。
- en: The rest of the menu items are the same as before.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 剩下的菜单项和以前一样。
- en: On my Windows machine, it took quite a while for the Julia Notebook to start
    for the first time. The Kernel starting, please wait... message was displayed
    for several minutes.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的 Windows 机器上，第一次启动 Julia Notebook 花了相当长的时间。显示了“Kernel 正在启动，请稍等...”的消息，持续了好几分钟。
- en: 'If you run the script (using the **Cell** | Run All menu command), your output
    should look like what''s shown in the following screenshot:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你运行脚本（使用 **Cell** | Run All 菜单命令），你的输出应该像下图所示：
- en: '![](img/00f085b2-5274-48dc-be8c-311b70c0480a.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00f085b2-5274-48dc-be8c-311b70c0480a.png)'
- en: The display continues with other statistics about each of the sets, such as `PetalWidth` and
    so on.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 显示还会继续列出每个数据集的其他统计信息，如 `PetalWidth` 等。
- en: Note the `WARNING` message about an incompatibility between sublibraries. Even
    with the time it took to install and update packages, there were still unresolved
    issues.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意 `WARNING` 消息，提示子库之间存在不兼容问题。即使花了时间安装和更新包，仍然存在未解决的问题。
- en: 'The more interesting part of this is `plot` of the data points:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 更有趣的部分是数据点的 `plot`：
- en: '![](img/cb29c2d4-c038-446b-9b2b-af4de89f89be.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cb29c2d4-c038-446b-9b2b-af4de89f89be.png)'
- en: I noticed that if you hover the mouse over a graphic, you get grid lines displayed
    and a slide bar to adjust the zoom level (as shown in the upper-right part of
    the preceding screenshot).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我注意到，如果你将鼠标悬停在图形上，会显示网格线和一个滑动条来调整缩放级别（如前面截图右上部分所示）。
- en: So, just as if you ran the script in the Julia interpreter, you get your output
    (with the numerical prefix). Jupyter has counted the statements so that we have
    incremental numbering of the cells. Jupyter has not done anything special to print
    out variables.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，就像在 Julia 解释器中运行脚本一样，你会得到输出（带有数字前缀）。Jupyter 已经统计了语句，以便我们可以逐步编号单元格。Jupyter
    并没有做任何特殊的处理来打印变量。
- en: 'We started the server, created a new Notebook, and saved it as Julia `iris`.
    If we open the IPYNB file on disk (using a text editor), we can see the following:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们启动了服务器，创建了一个新的 Notebook，并将其保存为 Julia `iris`。如果我们在磁盘上打开 IPYNB 文件（使用文本编辑器），可以看到以下内容：
- en: '[PRE4]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This is a little different than what we saw in the previous chapters with other
    Notebook language coding. Particularly, `metadata` clearly targets the script
    cells to be Julia script.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这与我们在前几章中看到的其他 Notebook 语言代码略有不同。特别是，`metadata` 明确指向了要作为 Julia 脚本的脚本单元。
- en: Julia limitations in Jupyter
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Julia 在 Jupyter 中的限制
- en: I have written Julia scripts and accessed different Julia libraries without
    issue in Jupyter. I have not noticed any limitations on its use or any performance
    degradation. I imagine some aspects of Julia that are very screen dependent (such
    as using the **Julia webstack** to build a website) may be hampered by conflicting
    uses of the same concept.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经在 Jupyter 中编写了 Julia 脚本并访问了不同的 Julia 库，没有遇到任何问题。我没有注意到使用过程中有任何限制或性能下降。我猜测一些非常依赖屏幕的
    Julia 功能（例如使用**Julia webstack**构建网站）可能会受到相同概念冲突的影响。
- en: 'I have repeatedly seen updates being run when I am attempting to run a Julia
    script, as shown in the following screenshot. I am not sure why they decided to
    always update the underlying tool rather than use what is in play and have the
    user specify whether to update libraries:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当我尝试运行 Julia 脚本时，我已经多次看到更新被运行，如下图所示。我不确定为什么他们决定总是更新底层工具，而不是使用当前的工具并让用户决定是否更新库：
- en: '![](img/3a15611e-d6ad-47fa-9315-8d08a9bef36c.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3a15611e-d6ad-47fa-9315-8d08a9bef36c.png)'
- en: I have also noticed that once a Julia Notebook is opened, even though I have
    closed the page, it will still display Running on the home page. I don't recall
    seeing this behavior with the other script languages that are available.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我也注意到，一旦打开了 Julia Notebook，即使我已经关闭页面，它仍然会在主页显示“运行中”。我不记得其他脚本语言出现过这种行为。
- en: Another issue has been trying to use a secured package in my script, for example,
    `plotly`. It appears to be a clean process to get credentials, but using the prescribed
    methods for passing your credentials to `plotly` does not work under Windows.
    I am hesitant to provide examples that do not work in both environments.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个问题是在我的脚本中尝试使用一个安全的包，例如 `plotly`。获取凭证的过程似乎很简单，但按照规定的方法将凭证传递给 `plotly` 在 Windows
    下不起作用。我不愿提供在两种环境下都无法工作的示例。
- en: Further interactions with Windows are also limited, for example, attempting
    to access environment variables by calls to standard C libraries that are not
    normally present on a Windows installation.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Windows 的进一步交互也有限，例如，尝试通过调用标准 C 库访问环境变量，而这些库在 Windows 安装中通常并不存在。
- en: I have another issue with Julia itself, regardless of running under Jupyter
    or not. When using a package, it will complain about features that are used in
    the package that have been deprecated or improved. As a user of the package, I
    have no control over this behavior, so it does not help me in my work.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我在使用Julia时遇到的另一个问题，无论是在Jupyter下运行与否，都存在。当使用一个包时，它会抱怨包中使用的某些特性已经被弃用或改进。作为包的用户，我无法控制这种行为，所以它对我的工作没有帮助。
- en: Lastly, running some of these scripts takes several minutes. The scripts used
    are small. It seems to take a long time for the Julia kernel to start.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，运行这些脚本需要几分钟时间。所使用的脚本较小，但似乎Julia内核启动的时间比较长。
- en: Standard Julia capabilities
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标准Julia功能
- en: 'Similar to functions that are used in other languages, Julia can perform most
    of the rudimentary statistics on your data by using the `describe` function, as
    shown in the example script that follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于其他语言中使用的函数，Julia可以通过使用`describe`函数对数据执行大部分基本统计，如以下示例脚本所示：
- en: '[PRE5]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This script accesses the `iris` dataset and displays summary statistics on the
    dataset.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本访问了`iris`数据集，并显示了数据集的汇总统计信息。
- en: 'If we were to build a Notebook to show `describe` in use against the `iris`
    dataset (which we loaded in the previous example), we would end up with a display
    such as this:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们构建一个笔记本，展示如何在`iris`数据集（在前面的示例中已加载）上使用`describe`，我们将得到如下显示：
- en: '![](img/861cf12e-30a9-4cb4-bb91-a92d2ec27d20.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/861cf12e-30a9-4cb4-bb91-a92d2ec27d20.png)'
- en: You can see the standard statistics that have been generated for each of the
    variables in the dataset. I thought it was interesting that the count and percentage
    of `NA` values in the dataset are provided. I have found that I usually have to
    double-check to exclude this data by using other languages. This is a quick, built-in
    reminder.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到数据集中每个变量所生成的标准统计信息。我觉得很有趣的是，数据集中`NA`值的计数和百分比也被提供了。我发现通常需要在其他语言中进行双重检查，以排除这些数据。这个快速的内置提醒很有用。
- en: The warning message is complaining about a compatibility issue with one of the
    datetime libraries used, even though it is not used in this Notebook.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 警告消息是在抱怨其中一个日期时间库的兼容性问题，尽管它在此笔记本中未被使用。
- en: Julia visualizations in Jupyter
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jupyter中的Julia可视化
- en: 'The most popular tool for visualizations in Julia is the `Gadfly` package.
    We can add the `Gadfly` package (as described at the beginning of this chapter)
    by using the `add` function:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Julia中最流行的可视化工具是`Gadfly`包。我们可以通过使用`add`函数来添加`Gadfly`包（如本章开头所述）：
- en: '[PRE6]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'From then on, we can make reference to the `Gadfly` package in any script by
    using the following:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 从那时起，我们可以通过使用以下代码在任何脚本中引用`Gadfly`包：
- en: '[PRE7]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Julia Gadfly scatterplot
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Julia Gadfly 散点图
- en: 'We can use the `plot()` function with standard defaults (no type arguments)
    to generate a scatterplot. For example, with the following simple script:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`plot()`函数并采用标准默认设置（没有类型参数）来生成散点图。例如，使用以下简单脚本：
- en: '[PRE8]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We use the `srand()` function in all examples that use random results. The `srand()`
    function sets the random number seed value so that all of the results in this
    chapter are reproducible.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有使用随机结果的示例中，我们使用了` srand()`函数。`srand()`函数设置随机数种子值，使得本章中的所有结果都可以重现。
- en: 'We generate a nice, clean scatterplot, as shown in the following screenshot:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们生成了一个干净整洁的散点图，如下图所示：
- en: '![](img/8d797e18-a514-4b39-a4ce-8ec5995e18a0.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8d797e18-a514-4b39-a4ce-8ec5995e18a0.png)'
- en: 'I did notice that if you click on the ? symbol that appears in the top-right
    of the graphic if you click on the graphic, a message box is displayed that enables
    finer control over the graphic to do the following:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我注意到，如果你点击图形右上方出现的?符号，点击图形时，会显示一个消息框，允许对图形进行更精细的控制，如下所示：
- en: Pan across the image (especially if it expands beyond the window)
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在图像上进行平移（特别是当它超出窗口时）。
- en: Zoom in, out
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 放大，缩小
- en: 'Reset:'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重置：
- en: '![](img/f328b8f6-425a-4721-87e2-463aa453634b.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f328b8f6-425a-4721-87e2-463aa453634b.png)'
- en: Julia Gadfly histogram
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Julia Gadfly 直方图
- en: 'We can produce other graph types as well, for example, `histogram`, by using
    the following script:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以生成其他图表类型，例如，使用以下脚本生成`直方图`：
- en: '[PRE9]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This script generates `113` random numbers and generates `histogram` of the
    results.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本生成了`113`个随机数，并生成了这些结果的`直方图`。
- en: 'We will see something like the following screenshot:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到如下截图：
- en: '![](img/c4d59d60-d484-40d7-910b-a463ff5b7bd1.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4d59d60-d484-40d7-910b-a463ff5b7bd1.png)'
- en: Julia Winston plotting
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Julia Winston 绘图
- en: 'Another graphics package in Julia is `Winston`. It has similar plotting capabilities
    to `Gadfly` (I think `Gadfly` is more up-to-date). We can produce a similar plot
    of random numbers by using the following script:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Julia 中另一个图形包是 `Winston`。它具有类似于 `Gadfly` 的绘图功能（我认为 `Gadfly` 更为更新）。我们可以使用以下脚本生成一个随机数的类似图形：
- en: '[PRE10]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note that you have to specifically display the plot. The `Winston` package assumes
    that you want to store the graphic as a file, so the `plot` function generates
    an object for handling.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，你需要特别显示该图形。`Winston` 包假设你希望将图形存储为文件，因此 `plot` 函数生成一个对象来处理该图形。
- en: 'Moving this into a Notebook, we get the following screenshot:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 将其移动到 Notebook 中，我们得到以下截图：
- en: '![](img/196c6351-f62d-44de-a52b-068a09c9413a.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/196c6351-f62d-44de-a52b-068a09c9413a.png)'
- en: Julia Vega plotting
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Julia Vega 绘图
- en: 'Another popular graphics package is `Vega`. The main feature of `Vega` is the
    ability to describe your graphic by using language primitives such as JSON. `Vega`
    produces most of the standard plots. Here is an example script using `Vega` for
    a pie chart:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个流行的图形包是 `Vega`。`Vega` 的主要特点是能够使用语言原语（如 JSON）来描述图形。`Vega` 能够生成大多数标准图形。以下是使用
    `Vega` 绘制饼图的示例脚本：
- en: '[PRE11]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The resultant output in Jupyter may look like the following screenshot:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Jupyter 中生成的输出可能如下所示：
- en: '**![](img/0ad89c95-c57d-41ff-aae1-e87d7de149ea.png)**'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '**![](img/0ad89c95-c57d-41ff-aae1-e87d7de149ea.png)**'
- en: 'Note the `INFO: Precompiling module Vega.` package. Even though the package
    had been loaded as part of the install or update process, it still needed to adjust
    the library on first use.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '请注意 `INFO: Precompiling module Vega.` 包。即使该包已经在安装或更新过程中加载，它仍然需要在首次使用时调整库。'
- en: The generated graphic produced under Jupyter is shown in the following screenshot
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Jupyter 中生成的图形如下所示：
- en: '`Vega` gives you the option on the resultant display to Save as PNG. I think
    this is a useful feature, allowing you to embed the generated graphic(s) in another
    document:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`Vega` 在结果显示中为你提供将图形保存为 PNG 的选项。我认为这是一个有用的功能，允许你将生成的图形嵌入到另一个文档中：'
- en: '![](img/a64fba07-d41b-4fad-b25f-178c3545a47e.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a64fba07-d41b-4fad-b25f-178c3545a47e.png)'
- en: Julia PyPlot plotting
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Julia PyPlot 绘图
- en: 'Another plotting package available is `PyPlot`. `PyPlot` is one of the standard
    Python visualization libraries and is directly accessible from Julia. We can take
    this small script to produce an interesting visualization:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个可用的绘图包是 `PyPlot`。`PyPlot` 是 Python 的标准可视化库之一，并可以直接从 Julia 中访问。我们可以使用以下小脚本来生成一个有趣的可视化：
- en: '[PRE12]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The resultant output in Jupyter may look like what''s shown in the following
    screenshot:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Jupyter 中生成的输出可能如下所示：
- en: '![](img/85d1bee4-7214-4883-8889-a7cc1ddb3cda.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](img/85d1bee4-7214-4883-8889-a7cc1ddb3cda.png)'
- en: 'Again, we have Julia updating a package before executing our Notebook until,
    finally, we get the graphic on `Precipitation`:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们看到 Julia 在执行 Notebook 之前更新了一个包，直到最终我们得到了 `Precipitation` 图形：
- en: '![](img/5acf802c-ba07-438a-a499-7f18dc9696b9.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5acf802c-ba07-438a-a499-7f18dc9696b9.png)'
- en: It's interesting that Boston has such diverse precipitation—most of the month
    has none, and then there are a couple of days that have a deluge.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，波士顿的降水量非常多样——大部分时间没有降水，然后有几天会有大暴雨。
- en: 'A reminder: Jupyter will attempt to put most of the output into a small scrolling
    window. Just clicking in the left-hand side of the display will expand the entire
    contents of the scroll panel.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 提醒一下：Jupyter 会尝试将大部分输出放入一个小的滚动窗口中。只需点击显示的左侧即可展开滚动面板的全部内容。
- en: Julia parallel processing
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Julia 并行处理
- en: 'An advanced built-in feature of Julia is to use parallel processing in your
    script. Normally, you can specify the number of processes that you want to use
    directly in Julia. However, under Jupyter, you would use the `addprocs()` function
    to add an additional process available for use in your script, for example, look
    at this small script:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: Julia 的一个高级内置功能是能够在脚本中使用并行处理。通常，你可以直接在 Julia 中指定要使用的进程数量。然而，在 Jupyter 中，你需要使用
    `addprocs()` 函数来添加额外的进程供脚本使用，例如，看看这个小脚本：
- en: '[PRE13]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: It makes a call to `rand`, the random number generator, with that code executing
    on the second parameter to the function call (process `2`), and then passes the
    remaining arguments to the `rand` function there (making rand generate a 3×4 matrix
    of random numbers). `spawnat` is a macro that evaluates the processes mentioned
    previously. Then, `fetch` accesses the result of the spawned processes.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 它调用了`rand`，即随机数生成器，执行该代码时，第二个参数被传递给函数调用（进程`2`），然后将剩余的参数传递给`rand`函数（使得`rand`生成一个
    3×4 的随机数矩阵）。`spawnat`是一个宏，用于评估之前提到的进程。接着，`fetch`用于访问已生成进程的结果。
- en: 'We can see the results in the example under Jupyter, as shown in the following
    screenshot:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在 Jupyter 中查看示例结果，如下截图所示：
- en: '![](img/c6289b67-d8e3-419b-97fe-6ada0b688915.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c6289b67-d8e3-419b-97fe-6ada0b688915.png)'
- en: So, this is not a dramatic spawned process type of calculation, but you can
    easily imagine much more involved processes that are readily available in Jupyter.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，这并不是一种剧烈的生成进程类型的计算，但你可以轻松想象在 Jupyter 中可以实现更复杂的进程。
- en: Julia control flow
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Julia 控制流
- en: 'Julia has a complete set of control flows. As an example, we could have a small
    function `larger` that determines the larger of two numbers:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: Julia 具有完整的控制流。举个例子，我们可以编写一个小函数`larger`，用于确定两个数字中的较大者：
- en: '[PRE14]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'There are several features that you must note:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个特点需要注意：
- en: The `end` statement for the `if` statement
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`if`语句的`end`语句'
- en: '`end`, as the closing of the function'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`end`，作为函数的结束'
- en: The indentation of the statements within the function
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数内部语句的缩进
- en: The indentation of the handling of a true condition within an `if` statement
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`if`语句中处理条件为真时的缩进
- en: 'If we run this under Jupyter, we would see the expected output, as shown in
    the following screenshot:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在 Jupyter 中运行这个，我们会看到预期的输出，如下截图所示：
- en: '![](img/8e24a6fa-8294-4387-be06-278908e5c562.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8e24a6fa-8294-4387-be06-278908e5c562.png)'
- en: Julia regular expressions
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Julia 正则表达式
- en: Julia has built-in regular expression handling—as would most modern programming
    languages. There is no need for using statements, since regular expressions are
    basic features of strings in Julia.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: Julia 内建了正则表达式处理功能——就像大多数现代编程语言一样。由于正则表达式是 Julia 字符串的基本功能，所以无需使用声明。
- en: 'We could have a small script that validates whether a string is a valid phone
    number, for example:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以编写一个小脚本，验证一个字符串是否为有效的电话号码，例如：
- en: '[PRE15]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'When run under Jupyter, we would see the expected results. The first number
    is conformant to the format and the second is not:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Jupyter 中运行时，我们会看到预期的结果。第一个数字符合格式，而第二个则不符合：
- en: '![](img/faf1873c-efcc-4392-b37a-011139512d54.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![](img/faf1873c-efcc-4392-b37a-011139512d54.png)'
- en: Julia unit testing
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Julia 单元测试
- en: As a full language, Julia has unit-testing abilities to make sure that your
    code is performing as expected. The unit tests usually reside in the tests folder.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一门完整的语言，Julia 具有单元测试功能，确保代码按照预期执行。单元测试通常位于测试文件夹中。
- en: Two of the standard functions available for unit testing in Julia are `FactCheck`
    and `Base.Test`. They both do the same thing, but react differently to failed
    tests. `FactCheck` will generate an error message that will not stop processing
    on a failure. If you provide an error handler, that error handler will take control
    of the test.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: Julia 提供的两个标准单元测试函数是`FactCheck`和`Base.Test`。它们执行相同的操作，但对失败的测试反应不同。`FactCheck`会生成一条错误信息，但在失败时不会停止处理。如果你提供了错误处理器，错误处理器将接管测试。
- en: '`Base.Test` will throw an exception and stop processing on the first test failure.
    In that regard, it is probably not useful as a unit-testing function so much as
    a runtime test that you may put in place to make sure parameters are within reason
    or otherwise. Just stop processing before something bad happens.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`Base.Test`会抛出异常，并在第一次测试失败时停止处理。从这个角度来看，它可能更适合作为一种运行时测试，而非单元测试，你可以用它来确保参数在合理范围内，或者避免在出现问题之前停止处理。'
- en: Both packages are built in to the standard Julia distributions.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个包是内置在标准的 Julia 发行版中的。
- en: As an example, we can create a unit tests Notebook that does the same tests
    and see the resulting, different responses for errors (meaning, test failures).
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，我们可以创建一个单元测试的Notebook，进行相同的测试，并查看不同的错误响应（意味着测试失败）。
- en: 'For `FactCheck`, we will use the following script:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`FactCheck`，我们将使用以下脚本：
- en: '[PRE16]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We are using the `FactCheck` package. The simple function we are testing is
    cubing a number, but it could be anything. We wrap our tests in a `facts() do...End`
    block. Each of the tests is run within the block which is separate from any other
    block—so as to group our unit tests together—and is prefixed with `@fact`. Also,
    note that we are testing whether the function result following `-->` is the right-hand
    argument.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用`FactCheck`包。我们正在测试的简单函数是对一个数字进行立方运算，但它可以是任何函数。我们将测试封装在`facts() do...End`块中。每个测试都在该块内运行，该块与任何其他块分开——以便将我们的单元测试分组——并且每个测试以`@fact`为前缀。此外，注意我们正在测试函数结果后跟`-->`是否是正确的右侧参数。
- en: 'When we run this in Jupyter, we see the expected results, as shown in the following
    screenshot:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在Jupyter中运行时，我们会看到预期的结果，如下图所示：
- en: '![](img/d06a9fb0-98d5-462e-9f35-c1f1221e77ec.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d06a9fb0-98d5-462e-9f35-c1f1221e77ec.png)'
- en: You can see the failed test, why it failed, what line it was on, and so on,
    as well as the summary for the `facts` block that was executed, that is, the number
    of tests that passed (`Verified`) and the number of tests that `Failed`. Note
    that the script continued to run on to the next line.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到失败的测试、它为何失败、它出错的行数等信息，还可以查看执行的`facts`块的总结，即通过的测试数量（`Verified`）和失败的测试数量（`Failed`）。请注意，脚本继续运行到下一行。
- en: 'For `Base.Test`, we have a similar script:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`Base.Test`，我们有一个类似的脚本：
- en: '[PRE17]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We are using the `Base.Test` package. The function definition we are using
    is, again, cubing. Then, each test is individually—not as part of a `test` block—prefixed
    with `@test`. Running this script in Jupyter, we see similar results as the ones
    that are shown in the following screenshot:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用`Base.Test`包。我们使用的函数定义是再次进行立方运算。然后，每个测试都是单独进行的——不是作为`test`块的一部分——并且以`@test`为前缀。在Jupyter中运行此脚本时，我们会看到与以下截图中显示的类似结果：
- en: '![](img/87a2f1d1-285f-4b6e-a9d9-8e2cacf20a7d.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![](img/87a2f1d1-285f-4b6e-a9d9-8e2cacf20a7d.png)'
- en: The failed test information is displayed. However, in this case, the script
    stopped executing at this point. Hence, I would only consider this for runtime
    checks to validate input formats.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 显示了失败的测试信息。然而，在这种情况下，脚本在这一点停止执行。因此，我只会将其作为运行时检查来验证输入格式。
- en: Summary
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we added the ability to use Julia scripts in our Jupyter Notebook.
    We added a Julia library that's not included in the standard Julia installation.
    We saw basic features of Julia in use, and also outlined some of the limitations
    that are encountered using Julia in Jupyter. We displayed graphics using some
    of the graphics packages available, including `Gadfly`, `Winston`, `Vega`, and
    `PyPlot`. Finally, we saw parallel processing in action, a small control flow
    example, and how to add unit testing to your Julia script.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们增加了在Jupyter Notebook中使用Julia脚本的能力。我们添加了一个不包含在标准Julia安装中的Julia库。我们展示了Julia的基本功能，并概述了在Jupyter中使用Julia时遇到的一些限制。我们使用了可用的图形包（包括`Gadfly`、`Winston`、`Vega`和`PyPlot`）来显示图形。最后，我们看到了并行处理的应用、一个小的控制流示例，以及如何将单元测试添加到Julia脚本中。
- en: In the next chapter, we will learn all about using JavaScript in a Jupyter Notebook.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何在Jupyter Notebook中使用JavaScript。
