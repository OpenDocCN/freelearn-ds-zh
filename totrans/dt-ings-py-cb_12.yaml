- en: '12'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '12'
- en: Using Data Observability for Debugging, Error Handling, and Preventing Downtime
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用数据可观察性进行调试、错误处理和预防停机
- en: We are reaching the end of our journey through the data ingestion world and
    have covered many important topics and seen how they could be applied to real-life
    projects. Now, to finish this book with a flourish, the final topic is the concept
    of **data observability**.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们即将结束数据摄取之旅，已经涵盖了众多重要主题，并看到了它们如何应用于实际项目。现在，为了以精彩的方式结束这本书，最后一个主题是 **数据可观察性**
    的概念。
- en: Data observability refers to the ability to monitor, understand, and troubleshoot
    the health, quality, and other vital aspects of data in a big organization or
    a small project. In summary, it ensures that data is accurate, reliable, and available
    when needed.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 数据可观察性指的是在大组织或小项目中监控、理解和调试数据健康、质量和其他关键方面的能力。简而言之，它确保数据在需要时准确、可靠且可用。
- en: Although each recipe in this chapter can be executed separately, the goal is
    to configure tools that, when set together, create a monitoring and observability
    architecture ready to bring value to a project or team.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然本章中的每个食谱都可以单独执行，但目标是配置工具，当它们一起设置时，可以创建一个监控和可观察性架构，为项目或团队带来价值。
- en: 'You will learn about the following recipes:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 你将学习以下食谱：
- en: Setting up StatsD for monitoring
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 StatsD 以进行监控
- en: Setting up Prometheus for storing metrics
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 Prometheus 以存储指标
- en: Setting up Grafana for monitoring
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 Grafana 以进行监控
- en: Creating an observability dashboard
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建可观察性仪表板
- en: Setting custom alerts or notiﬁcations
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置自定义警报或通知
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This chapter requires that Airflow is installed on your local machine. You can
    install it directly on your **Operating System** (**OS**) or using a Docker image.
    For more information, refer to [*Chapter 1*](B19453_01.xhtml#_idTextAnchor022),
    and the *Configuring Docker for* *Airflow* recipe.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章要求 Airflow 安装在你的本地机器上。你可以直接在你的 **操作系统**（**OS**）上安装它，或者使用 Docker 镜像。有关更多信息，请参阅
    [*第 1 章*](B19453_01.xhtml#_idTextAnchor022) 和 *配置 Docker 以支持* *Airflow* 的食谱。
- en: 'After following the steps described in [*Chapter 1*](B19453_01.xhtml#_idTextAnchor022),
    ensure Airflow runs correctly. You can do that by checking the Airflow UI at this
    link: `http://localhost:8080`'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在遵循了 [*第 1 章*](B19453_01.xhtml#_idTextAnchor022) 中描述的步骤之后，请确保 Airflow 运行正确。你可以通过检查此链接的
    Airflow UI 来做到这一点：`http://localhost:8080`
- en: 'If you are using a Docker container (as I am) to host your Airflow application,
    you can check its status in the terminal by using the following command:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你像我一样使用 Docker 容器来托管你的 Airflow 应用程序，你可以通过以下命令在终端中检查其状态：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here is the status of the container:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是容器的状态：
- en: '![Figure 12.1 –  Airflow containers running](img/Figure_12.01_B19453.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.1 – 运行的 Airflow 容器](img/Figure_12.01_B19453.jpg)'
- en: Figure 12.1 – Airflow containers running
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.1 – 运行的 Airflow 容器
- en: '![Figure 12.2 – Docker Desktop view of Airflow containers running](img/Figure_12.02_B19453.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.2 – 运行的 Airflow 容器在 Docker Desktop 中的视图](img/Figure_12.02_B19453.jpg)'
- en: Figure 12.2 – Docker Desktop view of Airflow containers running
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.2 – 运行的 Airflow 容器在 Docker Desktop 中的视图
- en: Docker images
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker 镜像
- en: This chapter requires the creation of other Docker containers to build the monitoring
    and observability architecture. If you are using `docker-compose.yaml` file to
    run your Airflow application, you can add the other images addressed here to the
    same `docker-compose.yaml` file and run it all together.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 本章要求创建其他 Docker 容器来构建监控和可观察性架构。如果你使用 `docker-compose.yaml` 文件来运行你的 Airflow 应用程序，你可以将此处提到的其他镜像添加到同一个
    `docker-compose.yaml` 文件中，并一起运行。
- en: If you are running Airflow locally, you can create and configure each Docker
    image separately or create a `docker-compose.yaml` file just for the monitoring
    tools approach in this chapter.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在本地上运行 Airflow，你可以单独创建和配置每个 Docker 镜像，或者只为本章中监控工具的方法创建一个 `docker-compose.yaml`
    文件。
- en: Setting up StatsD for monitoring
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 StatsD 以进行监控
- en: As introduced in [*Chapter 10*](B19453_10.xhtml#_idTextAnchor364), **StatsD**
    is an open source daemon that gathers and aggregates metrics about application
    behaviors. Due to its flexibility and lightweight, StatsD is used on several monitoring
    and observability tools, such as **Grafana**, **Prometheus**, and **ElasticSearch**,
    to visualize and analyze the collected metrics.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如在 [*第 10 章*](B19453_10.xhtml#_idTextAnchor364) 中所述，**StatsD** 是一个开源守护进程，它收集和汇总关于应用程序行为的指标。由于其灵活性和轻量级，StatsD
    被用于多个监控和可观察性工具，如 **Grafana**、**Prometheus** 和 **ElasticSearch**，以可视化和分析收集到的指标。
- en: In this recipe, we will configure StatsD using a Docker image as the first step
    in building a monitoring pipeline. Here, StatsD will collect and aggregate Airflow
    information and make it available to Prometheus, our monitoring database, in the
    *Setting up Prometheus for storing* *metrics* recipe.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在此菜谱中，我们将使用 Docker 镜像作为构建监控管道的第一步来配置 StatsD。在这里，StatsD 将收集和汇总 Airflow 信息，并在
    *为存储指标设置 Prometheus* 菜谱中使其对我们的监控数据库 Prometheus 可用。
- en: Getting ready
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Refer to the *Technical requirements* section for this recipe since we will
    handle it with the same technology.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅此菜谱的 *技术要求* 部分，因为我们将以相同的技术来处理它。
- en: How to do it…
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Here are the steps to perform this recipe:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是执行此菜谱的步骤：
- en: 'Let’s start by defining our Docker configurations for StatsD. These lines will
    be added under the `services` section inside the `docker-compose` file:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从定义我们的 StatsD Docker 配置开始。这些行将被添加到 `docker-compose` 文件中的 `services` 部分下：
- en: '[PRE1]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next, let’s set the Airflow environment variables to install StatsD and export
    the metrics to it, as you can see here:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们设置 Airflow 环境变量以安装 StatsD 并将其指标导出到它，如下所示：
- en: '[PRE2]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If you need help to set these variables in Airflow, please refer to [*Chapter
    10*](B19453_10.xhtml#_idTextAnchor364), and the *Configuring logs in* *airflow.cfg*
    recipe.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要帮助在 Airflow 中设置这些变量，请参阅 [*第 10 章*](B19453_10.xhtml#_idTextAnchor364) 和
    *在 airflow.cfg 中配置日志* 菜谱。
- en: 'Your Airflow variables in the `docker-compose` file should look like this:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 您在 `docker-compose` 文件中的 Airflow 变量应如下所示：
- en: '![Figure 12.3 – Airflow environment variables with StatsD configurations](img/Figure_12.03_B19453.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.3 – 带有 StatsD 配置的 Airflow 环境变量](img/Figure_12.03_B19453.jpg)'
- en: Figure 12.3 – Airflow environment variables with StatsD configurations
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.3 – 带有 StatsD 配置的 Airflow 环境变量
- en: Now, restart your Docker containers to apply the configurations.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，重新启动您的 Docker 容器以应用配置。
- en: 'Once you do so, and all containers are up and running, let’s check the `http://localhost:9102/`
    address in a browser. You should see the following page:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦这样做，并且所有容器都启动并运行，让我们在浏览器中检查 `http://localhost:9102/` 地址。您应该看到以下页面：
- en: '![Figure 12.4 – StatsD page in the browser](img/Figure_12.04_B19453.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.4 – 浏览器中的 StatsD 页面](img/Figure_12.04_B19453.jpg)'
- en: Figure 12.4 – StatsD page in the browser
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.4 – 浏览器中的 StatsD 页面
- en: 'Then, click on **Metrics**, and a new page will appear showing something similar
    to the following:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击 **指标**，将出现一个新页面，显示以下内容类似：
- en: '![Figure 12.5 – StatsD metrics being shown in the browser](img/Figure_12.05_B19453.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.5 – 浏览器中显示的 StatsD 指标](img/Figure_12.05_B19453.jpg)'
- en: Figure 12.5 – StatsD metrics being shown in the browser
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.5 – 浏览器中显示的 StatsD 指标
- en: The lines shown in the browser confirm StatsD is successfully installed and
    collecting data from Airflow.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器中显示的行确认 StatsD 已成功安装并从 Airflow 收集数据。
- en: How it works…
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: As you can observe, configuring StatsD with Airflow is very straightforward.
    In fact, StatsD is not new for us since we already covered it in [*Chapter 10*](B19453_10.xhtml#_idTextAnchor364),
    in the *Designing advanced monitoring* recipe. However, let’s recap some of the
    concepts.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所观察到的，使用 Airflow 配置 StatsD 非常简单。实际上，StatsD 对我们来说并不陌生，因为我们已经在 *第 10 章* 中介绍了它，在
    *设计高级监控* 菜谱中。然而，让我们回顾一些概念。
- en: StatsD is an open source daemon tool built by Etsy employees that receives information
    via the **User Datagram Protocol** (**UDP**), making it fast and lightweight since
    it discards the necessity of sending a confirmation message back to the sender.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: StatsD 是由 Etsy 员工构建的开源守护程序工具，它通过 **用户数据报协议**（**UDP**）接收信息，由于它不需要向发送者发送确认消息，因此使其快速且轻量级。
- en: 'Now, looking at the code, the first thing we did was to set the Docker container
    to run StatsD. Alongside all the usual parameters to run a container, the key
    point is the `command` parameter, as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，查看代码，我们首先做的事情是将 Docker 容器设置为运行 StatsD。除了运行容器的所有常规参数外，关键点是 `command` 参数，如下所示：
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: See also
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: 'You can check the Docker image of StatsD on the **Docker Hub** page here: [https://hub.docker.com/r/prom/statsd-exporter](https://hub.docker.com/r/prom/statsd-exporter)'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 **Docker Hub** 页面上检查 StatsD 的 Docker 镜像：[https://hub.docker.com/r/prom/statsd-exporter](https://hub.docker.com/r/prom/statsd-exporter)
- en: Setting up Prometheus for storing metrics
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为存储指标设置 Prometheus
- en: Although it is generally called a database, Prometheus is not a traditional
    database like MySQL. Instead, its structure is more similar to a time-series database
    designed for monitoring and observability purposes.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然它通常被称为数据库，但Prometheus并不是像MySQL这样的传统数据库。相反，它的结构更类似于为监控和可观察性目的设计的时序数据库。
- en: Due to its flexibility and power, this tool is widely used by DevOps and **Site
    Reliability Engineers** (**SREs**) to store metrics and other relevant information
    about systems and applications. Together with Grafana (which we will explore in
    later recipes), it is one of the most used monitoring tools in projects and by
    teams.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 由于其灵活性和强大功能，此工具被DevOps和**站点可靠性工程师**（**SREs**）广泛用于存储系统与应用程序的相关指标和其他信息。与Grafana（我们将在后续菜谱中探讨）一起，它是项目中团队最常用的监控工具之一。
- en: This recipe will configure a Docker image to run a Prometheus application. We
    will also connect it to StatsD to store all the metrics generated.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 此菜谱将配置一个Docker镜像以运行Prometheus应用程序。我们还将将其连接到StatsD以存储所有生成的指标。
- en: Getting ready
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Refer to the *Technical requirements* section for this recipe since we will
    handle it with the same technology.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅此菜谱的*技术要求*部分，因为我们将以相同的技术处理它。
- en: How to do it…
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Here are the steps to perform this recipe:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此菜谱的步骤如下：
- en: 'Let’s begin by adding the following lines to our `docker-compose` file under
    the `services` section:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从在`docker-compose`文件的`services`部分添加以下行开始：
- en: '[PRE4]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, create a folder named `prometheus` at the same level as your `docker-compose`
    file. Inside the folder, create a new file named `prometheus.yml` with the following
    code and save it:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`docker-compose`文件同一级别创建一个名为`prometheus`的文件夹。在该文件夹内，创建一个名为`prometheus.yml`的新文件，并按照以下代码进行保存：
- en: '[PRE5]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: On `static_configs`, make sure the target has the same name and the exposed
    port of the StatsD container. Otherwise, you will face problems in establishing
    a connection with the container.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在`static_configs`中，确保目标具有与StatsD容器相同的名称和暴露的端口。否则，你将面临与容器建立连接的问题。
- en: Now, restart your Docker containers.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，重新启动你的Docker容器。
- en: 'When the containers are back up and running, access the following link in your
    browser: `http://localhost:9090/`.'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当容器恢复并运行时，在浏览器中访问以下链接：`http://localhost:9090/`。
- en: 'You should see a page like the following:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到一个如下页面：
- en: '![Figure 12.6 – Prometheus UI](img/Figure_12.06_B19453.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![图12.6 – Prometheus UI](img/Figure_12.06_B19453.jpg)'
- en: Figure 12.6 – Prometheus UI
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.6 – Prometheus UI
- en: 'Now, click on the list icon next to the **Execute** button on the right of
    the page. It will open a list with all metrics available to be used. If everything
    is well configured, you should see something like the following:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击页面右侧**执行**按钮旁边的列表图标。这将打开一个包含所有可用指标的列表。如果一切配置正确，你应该会看到以下类似的内容：
- en: '![Figure 12.7 – Prometheus available metric list](img/Figure_12.07_B19453.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图12.7 – Prometheus可用指标列表](img/Figure_12.07_B19453.jpg)'
- en: Figure 12.7 – Prometheus available metric list
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.7 – Prometheus可用指标列表
- en: We have successfully set up Prometheus, which is already storing the metrics
    sent by StatsD!
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已成功设置Prometheus，它已经存储了StatsD发送的指标！
- en: How it works…
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Let’s explore in more depth what we did in this exercise by examining the container
    definitions in *Step 1*. Since we already have basic knowledge of Docker, we will
    cover the most critical parts of the container settings.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过检查*步骤1*中的容器定义来更深入地探讨我们在这次练习中所做的工作。由于我们已经对Docker有基本了解，我们将涵盖容器设置中最关键的部分。
- en: 'The first thing that draws attention is the `links` section in the `docker-compose`
    file. In this section, we declared that the Prometheus container must be connected
    and linked to the StatsD container configured in the *Setting up StatsD for* *monitoring*
    recipe:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 引人注目的是`docker-compose`文件中的`links`部分。在这个部分中，我们声明Prometheus容器必须连接并链接到在*设置StatsD以*
    *监控* 菜单中配置的StatsD容器：
- en: '[PRE6]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Next, we set `volumes` to reflect a local folder to a folder inside the container.
    This step is essential because then we can also mirror the configuration file
    of Prometheus:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将`volumes`设置为将本地文件夹映射到容器内的文件夹。这一步至关重要，因为这样我们还可以镜像Prometheus的配置文件：
- en: '[PRE7]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Finally, in the `command` section, we declared where the configuration file
    will be placed inside the container and other minor settings:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在`command`部分，我们声明了配置文件将在容器内放置的位置以及其他一些小设置：
- en: '[PRE8]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Then, the following steps were dedicated to setting the Prometheus configuration
    file, as you can see here:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，以下步骤是专门用于设置Prometheus配置文件的，正如你在这里可以看到的：
- en: '[PRE9]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: By definition, Prometheus collects metrics from itself and other applications
    through an HTTP request. In other words, it parses the response and ingests the
    collected samples for storage. That’s why we used `scrape_configs`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 根据定义，Prometheus 通过 HTTP 请求从自身和其他应用程序收集指标。换句话说，它解析响应并摄取收集的样本以进行存储。这就是为什么我们使用了
    `scrape_configs`。
- en: 'If you look closely, you will observe that we declared two scrape jobs: one
    for Prometheus and another for StatsD. Due to that configuration, we could see
    Airflow metrics in the Prometheus metrics list. If we needed to include any other
    scrape configuration, we would just need to edit the local `prometheus.yml` file
    and restart the server.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仔细观察，你会注意到我们声明了两个抓取作业：一个用于 Prometheus，另一个用于 StatsD。由于这个配置，我们可以在 Prometheus
    指标列表中看到 Airflow 指标。如果我们需要包含任何其他抓取配置，我们只需编辑本地的 `prometheus.yml` 文件并重新启动服务器即可。
- en: Many other configurations are available in Prometheus, such as setting the scrape
    interval. You can read more about its configurations on the official documentation
    page at [https://prometheus.io/docs/prometheus/latest/getting_started/](https://prometheus.io/docs/prometheus/latest/getting_started/).
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Prometheus 中还有许多其他配置可用，例如设置抓取间隔。你可以在官方文档页面上了解更多关于其配置的信息：[https://prometheus.io/docs/prometheus/latest/getting_started/](https://prometheus.io/docs/prometheus/latest/getting_started/)。
- en: There’s more…
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: In this recipe, we saw how to set Prometheus to store metrics coming from StatsD.
    This time-series database also has other capabilities, such as creating small
    visualizations in the web UI and connecting with other client libraries, and has
    an alerting system called Alertmanager.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们看到了如何设置 Prometheus 以存储来自 StatsD 的指标。这个时序数据库还有其他功能，例如在 Web UI 中创建小型可视化，以及与其他客户端库连接，并有一个名为
    Alertmanager 的警报系统。
- en: 'If you want to go deeper into how Prometheus works and other functionalities,
    Sudip Sengupta has a fantastic blog post about it, which you can read here:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要深入了解 Prometheus 的工作原理和其他功能，Sudip Sengupta 有一个关于它的精彩博客文章，你可以在这里阅读：[https://sudipsengupta.com/prometheus/](https://sudipsengupta.com/prometheus/)
- en: '[https://www.airplane.dev/blog/prometheus-metrics](https://www.airplane.dev/blog/prometheus-metrics)'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.airplane.dev/blog/prometheus-metrics](https://www.airplane.dev/blog/prometheus-metrics)'
- en: Setting up Grafana for monitoring
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 Grafana 以进行监控
- en: '**Grafana** is an open source tool built to create visualizations and monitor
    data from other systems and applications. Together with Prometheus, it is one
    of the most popular DevOps tools due to its flexibility and rich features.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**Grafana** 是一个开源工具，用于创建可视化并监控来自其他系统和应用程序的数据。与 Prometheus 一起，由于其灵活性和丰富的功能，它成为最受欢迎的
    DevOps 工具之一。'
- en: In this exercise, we will configure a Docker image to run Grafana and connect
    it to Prometheus. This configuration will not only give us the ability to explore
    the Airflow metrics even further but also the opportunity to learn in practice
    how to work with a set of the most popular tools for monitoring and observability.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将配置一个 Docker 镜像以运行 Grafana 并将其连接到 Prometheus。这个配置不仅将使我们能够进一步探索 Airflow
    指标，而且还有机会在实践中学习如何使用一组最流行的监控和可观察性工具。
- en: Getting ready
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Refer to the *Technical requirements* section for this recipe since we will
    handle it with the same technology.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 参考此菜谱的 *技术要求* 部分，因为我们将以相同的技术来处理它。
- en: In this recipe, I will use the same `docker-compose.yaml` file of Airflow and
    will keep the configurations from the *Setting up StatsD for monitoring* and *Setting
    up Prometheus for storing metrics* recipes, to connect them and proceed with the
    monitoring and observability architecture.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我将使用 Airflow 的相同 `docker-compose.yaml` 文件，并保留从 *设置 StatsD 以进行监控* 和 *设置
    Prometheus 以存储指标* 菜谱中的配置，以将它们连接起来并继续进行监控和可观察性架构。
- en: How to do it…
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Perform the following steps to try this recipe:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤尝试这个菜谱：
- en: 'As shown in the following, let’s add the Grafana container information to our
    `docker-compose` file as usual. Make sure it is under the `services` section:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如下所示，让我们像往常一样将 Grafana 容器信息添加到我们的 `docker-compose` 文件中。确保它在 `services` 部分下：
- en: '[PRE10]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Feel free to use a different administrator username as a password.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 随意使用不同的管理员用户名作为密码。
- en: Now, create a folder called `grafana` on the same level as your Docker file,
    and restart your containers.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在你的 Docker 文件同一级别创建一个名为 `grafana` 的文件夹，并重新启动你的容器。
- en: 'After it is back up and running, insert the `http://localhost:3000/login` link
    in your browser. A login page similar to this will appear:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在它恢复并运行后，将 `http://localhost:3000/login` 链接插入到你的浏览器中。将出现一个类似于这样的登录页面：
- en: '![Figure 12.8 – Grafana login page](img/Figure_12.08_B19453.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.8 – Grafana 登录页面](img/Figure_12.08_B19453.jpg)'
- en: Figure 12.8 – Grafana login page
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.8 – Grafana 登录页面
- en: It confirms Grafana is set up correctly!
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这确认了 Grafana 已正确设置！
- en: 'Then, let’s use the administrator credentials to log in to the Grafana dashboard.
    After authenticating, you should see the main page as follows:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，让我们使用管理员凭据登录到 Grafana 仪表板。认证后，你应该看到以下主页面：
- en: '![Figure 12.9 – Grafana main page](img/Figure_12.09_B19453.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.9 – Grafana 主页面](img/Figure_12.09_B19453.jpg)'
- en: Figure 12.9 – Grafana main page
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.9 – Grafana 主页面
- en: Since it is our first login, this page has nothing to show. We will take care
    of visualizations in the *Creating an observability* *dashboard* recipe.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是我们第一次登录，此页面没有任何显示。我们将在 *创建可观察性* *仪表板* 菜单中处理可视化。
- en: 'Now, let’s add Prometheus as a data source to Grafana. On the bottom-left side
    of the page, hover your cursor over the engine icon. On the **Configuration**
    menu, select **Data sources**. See the following screenshot for reference:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们将 Prometheus 添加为 Grafana 的数据源。在页面左下角，将鼠标悬停在引擎图标上。在 **配置** 菜单中，选择 **数据源**。以下截图供参考：
- en: '![Figure 12.10 – Grafana Configuration menu](img/Figure_12.10_B19453.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.10 – Grafana 配置菜单](img/Figure_12.10_B19453.jpg)'
- en: Figure 12.10 – Grafana Configuration menu
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.10 – Grafana 配置菜单
- en: 'On the **Data Sources** page, select the Prometheus icon. You will be redirected
    to a new page showing fields to insert Prometheus settings, as you can see here:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **数据源** 页面上，选择 Prometheus 图标。你将被重定向到一个新页面，显示插入 Prometheus 设置的字段，如你所见：
- en: '![Figure 12.11 – Data Sources page in Grafana](img/Figure_12.11_B19453.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.11 – Grafana 中的数据源页面](img/Figure_12.11_B19453.jpg)'
- en: Figure 12.11 – Data Sources page in Grafana
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.11 – Grafana 中的数据源页面
- en: Insert a name for this data source. In the `http://prometheus:9090`. Make sure
    it has the same name as your Docker container for Prometheus.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 为此数据源插入一个名称。在 `http://prometheus:9090`。确保它与你的 Prometheus Docker 容器名称相同。
- en: Save this configuration, and we have successfully configured Grafana with Prometheus!
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 保存此配置，我们已经成功配置了带有 Prometheus 的 Grafana！
- en: How it works…
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: In this exercise, we saw how simple it is to configure Grafana and integrate
    it with Prometheus as a data source. In fact, almost all Grafana integrations
    are very straightforward, requiring just a few pieces of information.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们看到了如何简单配置 Grafana 并将其与 Prometheus 作为数据源集成。实际上，几乎所有的 Grafana 集成都非常简单，只需要几条信息。
- en: 'Let’s now explore some of our Grafana container settings. Despite the standard
    Docker container settings, a few items require attention, as you can see here:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们探索一些我们的 Grafana 容器设置。尽管有标准的 Docker 容器设置，但有一些项目需要关注，如你所见：
- en: '[PRE11]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The first things are the `environment` variables, where we define the administrator
    credentials that allow the first login. Then, we declared the path of Grafana
    provisioning, and, as you will have noticed, we also inserted this path in the
    `volumes` section.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 第一件事是 `环境变量`，我们在这里定义了允许第一次登录的管理员凭据。然后，我们声明了 Grafana 配置的路径，并且，正如你所注意到的，我们还在 `volumes`
    部分插入了这个路径。
- en: 'It is inside the `provisioning` folder where we will have configuration files
    for data sources connections, plugins, dashboards, and much more. A configuration
    like this allows more reliability and version control of dashboards and panels.
    We could also create the Prometheus data source connection using a .`yaml` configuration
    file and place it under the `provisioning` and `datasources` folder. It would
    look similar to this:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `provisioning` 文件夹中，我们将有数据源连接、插件、仪表板等的配置文件。这样的配置允许仪表板和面板有更高的可靠性和版本控制。我们也可以使用
    `.yaml` 配置文件创建 Prometheus 数据源连接，并将其放置在 `provisioning` 和 `datasources` 文件夹下。它看起来可能如下所示：
- en: '[PRE12]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Any additional data sources can be placed inside this YAML file. You can explore
    more about the provisioning configurations in Grafana on the official documentation
    page at [https://grafana.com/docs/grafana/latest/administration/provisioning/](https://grafana.com/docs/grafana/latest/administration/provisioning/).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 任何额外的数据源都可以放置在这个 YAML 文件中。你可以在 Grafana 的官方文档页面了解更多关于配置配置的信息：[https://grafana.com/docs/grafana/latest/administration/provisioning/](https://grafana.com/docs/grafana/latest/administration/provisioning/)。
- en: 'With this, we created a simple and efficient monitoring and observability architecture
    capable of collecting metrics from Airflow (or any other application if needed),
    storing, and showing them. The architecture can be defined as follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，我们创建了一个简单高效的监控和可观察性架构，能够从 Airflow（或任何其他应用程序，如果需要）收集指标，存储并显示它们。该架构可以定义为以下：
- en: '![Figure 12.12 – Monitoring and observability high-level architecture](img/Figure_12.12_B19453.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.12 – 监控和可观察性高级架构](img/Figure_12.12_B19453.jpg)'
- en: Figure 12.12 – Monitoring and observability high-level architecture
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.12 – 监控和可观察性高级架构
- en: We can now start creating our first dashboard and alerts in the two final recipes
    of this chapter!
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以开始创建我们本章最后两个菜谱中的第一个仪表板和警报了！
- en: There’s more…
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容…
- en: 'Besides Prometheus, Grafana has built-in core data source integrations for
    many applications. It allows easy configuration and a quick setup, which brings
    a lot of value and maturity to a project. You can find more here: [https://grafana.com/docs/grafana/latest/datasources/#built-in-core-data-sources](https://grafana.com/docs/grafana/latest/datasources/#built-in-core-data-sources).'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 Prometheus 之外，Grafana 还为许多应用程序内置了核心数据源集成。它允许轻松配置和快速设置，这为项目带来了很多价值和成熟度。您可以在以下位置找到更多信息：[https://grafana.com/docs/grafana/latest/datasources/#built-in-core-data-sources](https://grafana.com/docs/grafana/latest/datasources/#built-in-core-data-sources)。
- en: Grafana Cloud
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Grafana Cloud
- en: 'Grafana Labs has also made the platform available as fully managed and deployed
    on the cloud. It is a great solution for teams that don’t have a dedicated operations
    team to support and maintain Grafana. Find more information here: [https://grafana.com/products/cloud/](https://grafana.com/products/cloud/).'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: Grafana Labs 还将平台作为完全托管和云部署的服务提供。这对于没有专门运营团队来支持和维护 Grafana 的团队来说是一个很好的解决方案。更多信息请参阅：[https://grafana.com/products/cloud/](https://grafana.com/products/cloud/)。
- en: Creating an observability dashboard
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建可观察性仪表板
- en: Now, with our tools up and running, we can finally jump into the visualization
    dashboards. Monitoring and observability dashboards are designed to help gain
    deep insights into the health and behavior of our systems. You will observe in
    this exercise how Grafana can help us create an observability dashboard and a
    number of features inside it.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，随着我们的工具启动并运行，我们终于可以进入可视化仪表板了。监控和可观察性仪表板旨在帮助我们深入了解系统的健康和行为。您将在本练习中观察到 Grafana
    如何帮助我们创建一个可观察性仪表板以及其中的许多功能。
- en: In this recipe, we will create our first dashboard with a few panels to better
    monitor our Airflow application. You will notice that, with a few steps, it is
    possible to have an overview of how Airflow behaves over time and be prepared
    to build your future panels.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将创建一个包含几个面板的第一个仪表板，以更好地监控我们的 Airflow 应用程序。您将注意到，只需几个步骤，就可以对 Airflow
    随时间的行为有一个概览，并准备好构建未来的面板。
- en: Getting ready
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Refer to the *Technical requirements* section for this recipe since we will
    handle it with the same technology.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考此菜谱的 *技术要求* 部分，因为我们将以相同的技术来处理它。
- en: To accomplish this exercise, ensure that StatsD, Prometheus, and Grafana are
    adequately configured and running.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成此练习，请确保 StatsD、Prometheus 和 Grafana 已正确配置并正在运行。
- en: How to do it…
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Let’s create our dashboard to keep track of Airflow:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建我们的仪表板以跟踪 Airflow：
- en: 'On the Grafana main page, hover the cursor over the four-squares icon on the
    left side panel. Then, select **New dashboard**, as you can see in the following
    screenshot:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Grafana 主页上，将光标悬停在左侧面板的四个方块图标上。然后，选择 **新建仪表板**，如以下截图所示：
- en: '![Figure 12.13 – Grafana Dashboards menu](img/Figure_12.13_B19453.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.13 – Grafana 仪表板菜单](img/Figure_12.13_B19453.jpg)'
- en: Figure 12.13 – Grafana Dashboards menu
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.13 – Grafana 仪表板菜单
- en: If you need help accessing Grafana, refer to the *Setting up Grafana for* *monitoring*
    recipe.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要帮助访问 Grafana，请参考 *设置 Grafana 进行* *监控* 菜谱。
- en: 'You will be redirected to an empty page with the title **New dashboard**. At
    the top right of the page, select **Save**, insert the name of your dashboard,
    and click the **Save** button again. Refer to the following screenshot:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将被重定向到一个标题为 **新仪表板** 的空白页面。在页面右上角，选择 **保存**，输入您仪表板的名称，然后再次点击 **保存** 按钮。请参考以下截图：
- en: '![Figure 12.14 – New dashboard page](img/Figure_12.14_B19453.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.14 – 新仪表板页面](img/Figure_12.14_B19453.jpg)'
- en: Figure 12.14 – New dashboard page
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.14 – 新仪表板页面
- en: 'Now, let’s create our first panel by clicking on the **Add panel** icon at
    the top right of the dashboard page, as you can see in the following screenshot:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们通过点击仪表板页面右上角的 **添加面板** 图标来创建我们的第一个面板，如图所示：
- en: '![Figure 12.15 – Add panel icon](img/Figure_12.15_B19453.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.15 – 添加面板图标](img/Figure_12.15_B19453.jpg)'
- en: Figure 12.15 – Add panel icon
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.15 – 添加面板图标
- en: 'Now, let’s create a panel to show the number of DAGs inside Airflow. On the
    **Edit Panel** page, set the following information:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们创建一个面板来显示 Airflow 内部的 DAG 数量。在 **编辑面板** 页面上，设置以下信息：
- en: '**Metric**: **airflow_dagbag_size**'
  id: totrans-156
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**指标**：**airflow_dagbag_size**'
- en: '**Label filters**: **job**, **statsd-exporter**'
  id: totrans-157
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标签过滤器**：**job**，**statsd-exporter**'
- en: 'Visualization type: **Stat**'
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可视化类型：**统计**
- en: 'You can see the filled information in the following screenshot:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下屏幕截图中看到填写的信息：
- en: '![Figure 12.16 – Airflow number of DAGs panel count](img/Figure_12.16_B19453.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.16 – Airflow DAG 数量面板计数](img/Figure_12.16_B19453.jpg)'
- en: Figure 12.16 – Airflow number of DAGs panel count
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.16 – Airflow DAG 数量面板计数
- en: Click on **Apply** to save and return to the dashboard page.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 **应用** 保存并返回仪表板页面。
- en: 'Let’s do the same as *Step 3* to create another panel. This time we will create
    a panel to show the number of Airflow import errors. Fill the fields with the
    following values:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们按照 *步骤 3* 的相同方法创建另一个面板。这次我们将创建一个面板来显示 Airflow 导入错误的数量。填写以下值：
- en: '**Metric**: **airflow_dag_processing_import_errors**'
  id: totrans-164
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**指标**：**airflow_dag_processing_import_errors**'
- en: '**Label filters**: **job**, **statsd-exporter**'
  id: totrans-165
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标签过滤器**：**job**，**statsd-exporter**'
- en: 'Visualization type: **Stat**'
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可视化类型：**统计**
- en: 'You can see the added information in the following screenshot:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下屏幕截图中看到添加的信息：
- en: '![Figure 12.17 – DAG import errors panel count](img/Figure_12.17_B19453.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.17 – DAG 导入错误面板计数](img/Figure_12.17_B19453.jpg)'
- en: Figure 12.17 – DAG import errors panel count
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.17 – DAG 导入错误面板计数
- en: 'Now, let’s create two more panels with the following information:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们创建两个带有以下信息的面板：
- en: '`airflow_executor_queued_tasks`'
  id: totrans-171
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`airflow_executor_queued_tasks`'
- en: '`job`, `statsd-exporter`'
  id: totrans-172
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`job`，`statsd-exporter`'
- en: 'Visualization type: **Stat**'
  id: totrans-173
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可视化类型：**统计**
- en: '**Metric**: **airflow_scheduler_tasks_running**'
  id: totrans-174
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**指标**：**airflow_scheduler_tasks_running**'
- en: '**Label filters**: **job**, **statsd-exporter**'
  id: totrans-175
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标签过滤器**：**job**，**statsd-exporter**'
- en: 'Visualization type: **Stat**'
  id: totrans-176
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可视化类型：**统计**
- en: 'Let’s create two more panels to show the execution time for two different DAGs.
    Create two panels with the following values:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们再创建两个面板来展示两个不同 DAG 的执行时间。创建两个面板，并填写以下值：
- en: '**Metric**: **airflow_dag_processing_last_duration_basic_logging_dag**'
  id: totrans-178
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**指标**：**airflow_dag_processing_last_duration_basic_logging_dag**'
- en: '**Label filters**: **quantile**, **0.99**'
  id: totrans-179
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标签过滤器**：**分位数**，**0.99**'
- en: 'Visualization type: **Time-series**'
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可视化类型：**时间序列**
- en: 'Refer to the following screenshot:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考以下屏幕截图：
- en: '![Figure 12.18 – basic_logging_dag execution run panel](img/Figure_12.18_B19453.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.18 – basic_logging_dag 执行运行面板](img/Figure_12.18_B19453.jpg)'
- en: Figure 12.18 – basic_logging_dag execution run panel
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.18 – basic_logging_dag 执行运行面板
- en: '**Metric**: **airflow_dag_processing_last_duration_holiday_ingest_dag**'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**指标**：**airflow_dag_processing_last_duration_holiday_ingest_dag**'
- en: '**Label filters**: **quantile**, **0.99**'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标签过滤器**：**分位数**，**0.99**'
- en: 'Visualization type: **Time-series**'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可视化类型：**时间序列**
- en: 'You can see the completed fields in the following screenshot:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下屏幕截图中看到完成的字段：
- en: '![Figure 12.19 – holiday_ingest_dag execution run panel](img/Figure_12.19_B19453.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.19 – holiday_ingest_dag 执行运行面板](img/Figure_12.19_B19453.jpg)'
- en: Figure 12.19 – holiday_ingest_dag execution run panel
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.19 – holiday_ingest_dag 执行运行面板
- en: 'In the end, you will end up with a dashboard similar to the following:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您将得到一个类似于以下仪表板的界面：
- en: '![Figure 12.20 – Complete Airflow Monitoring dashboard view](img/Figure_12.20_B19453.jpg)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.20 – 完整的 Airflow 监控仪表板视图](img/Figure_12.20_B19453.jpg)'
- en: Figure 12.20 – Complete Airflow Monitoring dashboard view
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.20 – 完整的 Airflow 监控仪表板视图
- en: Don’t worry if your dashboard layout does not look exactly like *Figure 12**.20*.
    You can rearrange the panel as much as you want to add your own touch!
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的仪表板布局与 *图 12*.*20* 完全不同，请不要担心。您可以随意调整面板布局，以添加您自己的风格！
- en: How it works…
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: There are many DevOps visualization tools available on the market. However,
    most require a paid subscription or trained people to build the panels. As you
    can observe in this exercise, creating the first dashboard and panels using Grafana
    can be pretty simple. Of course, as you practice and study advanced concepts in
    Grafana, you will observe many opportunities to improve and enhance your dashboard.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 市场上有很多DevOps可视化工具。然而，大多数都需要付费订阅或培训有素的人员来构建面板。正如你在这次练习中观察到的，使用Grafana创建第一个仪表板和面板可以相当简单。当然，随着你练习并学习Grafana的高级概念，你会观察到许多改进和增强仪表板的机会。
- en: Now, let’s explore the six panels we have created. The idea behind these panels
    was to create a small dashboard with a minimum of information that could already
    bring value.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们探索我们创建的六个面板。这些面板背后的想法是创建一个包含最少信息但已能带来价值的简易仪表板。
- en: 'The first four panels give quick and relevant information about Airflow, as
    follows:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 前四个面板提供了关于Airflow的快速和相关信息，如下所示：
- en: '![Figure 12.21 –Airflow Monitoring counter panels](img/Figure_12.21_B19453.jpg)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![图12.21 –Airflow监控计数面板](img/Figure_12.21_B19453.jpg)'
- en: Figure 12.21 –Airflow Monitoring counter panels
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.21 –Airflow监控计数面板
- en: They show information about the number of DAGs, how many import errors we have,
    the number of tasks waiting to be executed, and how many are being executed, respectively.
    Even though it seems simple, these pieces of information give an overview (therefore,
    observability) of Airflow’s current behavior.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 它们显示了关于DAG数量、我们有多少个导入错误、等待执行的任务数量以及正在执行的任务数量的信息。尽管看起来很简单，但这些信息提供了Airflow当前行为的概述（因此，可观察性）。
- en: 'The last two panels show information about the duration of two DAG executions,
    as follows:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 最后两个面板显示了两个DAG执行持续时间的相关信息：
- en: '![Figure 12.22 – Airflow Monitoring time-series panels](img/Figure_12.22_B19453.jpg)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![图12.22 – Airflow监控时间序列面板](img/Figure_12.22_B19453.jpg)'
- en: Figure 12.22 – Airflow Monitoring time-series panels
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.22 – Airflow监控时间序列面板
- en: Knowing how much time a DAG takes to run is vital information, and it can offer
    insight to improve the code or check whether the data used in the pipeline is
    reliable. For example, if the DAG executes all tasks in less than half the expected
    time, it can be a sign no data was processed correctly.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 了解DAG运行所需的时间是至关重要的信息，它可以提供改进代码或检查管道中使用的数据的可靠性的洞察。例如，如果DAG在预期时间的一半以下完成所有任务，这可能是一个没有正确处理数据的信号。
- en: 'Lastly, you can create more dashboards and organize them into folders according
    to the subject. You can check the recommended best practices for dashboard organization
    in Grafana’s official documentation here: [https://grafana.com/docs/grafana/latest/dashboards/build-dashboards/best-practices/](https://grafana.com/docs/grafana/latest/dashboards/build-dashboards/best-practices/).'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你可以创建更多仪表板并将它们根据主题组织到文件夹中。你可以在Grafana的官方文档中查看仪表板组织的推荐最佳实践：[https://grafana.com/docs/grafana/latest/dashboards/build-dashboards/best-practices/](https://grafana.com/docs/grafana/latest/dashboards/build-dashboards/best-practices/)。
- en: There’s more…
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Unfortunately, since we have limited data to show on a dashboard, this exercise
    might not be as fancy as you expected. However, you can explore Grafana panel
    configurations and master them for further projects using the Grafana playground
    here: [https://play.grafana.org/d/000000012/grafana-play-home?orgId=1](https://play.grafana.org/d/000000012/grafana-play-home?orgId=1).'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，由于我们在仪表板上展示的数据有限，这次练习可能不像你预期的那么花哨。然而，你可以探索Grafana面板配置并掌握它们，以便在Grafana playground的进一步项目中使用：[https://play.grafana.org/d/000000012/grafana-play-home?orgId=1](https://play.grafana.org/d/000000012/grafana-play-home?orgId=1)。
- en: On the **Grafana Play Home** page, you will be able to see different types of
    panel applications and explore how they were built.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在**Grafana Play Home**页面上，你将能够看到不同类型的面板应用，并探索它们是如何构建的。
- en: Setting custom alerts or notiﬁcations
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置自定义警报或通知
- en: After configuring our first dashboard to be aware of the Airflow application,
    we must ensure our monitoring is never left without observation. With teams busy
    with other tasks, creating alerts is the best way to guarantee we still have oversight
    over the application.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置我们的第一个仪表板以了解Airflow应用程序后，我们必须确保我们的监控始终处于观察之下。随着团队忙于其他任务，创建警报是确保我们仍然对应用程序保持监督的最佳方式。
- en: There are many ways to create alerts and notifications, and previously we implemented
    something similar to monitor our DAG by sending an email notification when an
    error occurs. Now, we will try a different approach, using an integration with
    **Telegram**.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 创建警报和通知有许多方法，之前我们实现了一种类似的方法，当发生错误时通过发送电子邮件通知来监控我们的 DAG。现在，我们将尝试不同的方法，使用与 **Telegram**
    的集成。
- en: In this recipe, we will integrate Grafana alerts with Telegram. Using a different
    tool to provide system alerts can help us understand the best approach to advise
    our teams and break the cycle of always using email.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将集成 Grafana 警报与 Telegram。使用不同的工具提供系统警报可以帮助我们理解最佳方法来建议我们的团队并打破总是使用电子邮件的循环。
- en: Getting ready
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中
- en: Refer to the *Technical requirements* section for this recipe since we will
    handle it with the same technology.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考此菜谱的 **技术要求** 部分，因为我们将以相同的技术来处理它。
- en: 'To accomplish this exercise, ensure that StatsD, Prometheus, and Grafana are
    adequately configured and running. It is also required to have a Telegram account
    for this exercise. You can find the steps to create an account here: [https://www.businessinsider.com/guides/tech/how-to-make-a-telegram-account](https://www.businessinsider.com/guides/tech/how-to-make-a-telegram-account).'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个练习，请确保 StatsD、Prometheus 和 Grafana 已正确配置并正在运行。此练习还需要一个 Telegram 账户。你可以在以下链接中找到创建账户的步骤：[https://www.businessinsider.com/guides/tech/how-to-make-a-telegram-account](https://www.businessinsider.com/guides/tech/how-to-make-a-telegram-account)。
- en: How to do it…
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Here are the steps to perform this recipe:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此菜谱的步骤如下：
- en: 'Let’s start by creating a bot on Telegram to be used by Grafana to send the
    alerts. On the Telegram main page, search for `@BotFather` and start a conversation
    as follows:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从在 Telegram 上创建一个用于 Grafana 发送警报的机器人开始。在 Telegram 主页上，搜索 `@BotFather` 并按照以下方式开始对话：
- en: '![Figure 12.23 – Telegram BotFather](img/Figure_12.23_B19453.jpg)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.23 – Telegram BotFather](img/Figure_12.23_B19453.jpg)'
- en: Figure 12.23 – Telegram BotFather
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.23 – Telegram BotFather
- en: 'Then, type `/newbot` and follow the prompt instructions. BotFather will send
    you a bot token. Please keep it in a safe place; we will use it later. The message
    looks like the following:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，输入 `/newbot` 并遵循提示指令。BotFather 将会发送给你一个机器人令牌。请将其保存在安全的地方；我们稍后会用到它。消息看起来如下所示：
- en: '![Figure 12.24 – New bot creation message](img/Figure_12.24_B19453.jpg)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.24 – 新建机器人消息](img/Figure_12.24_B19453.jpg)'
- en: Figure 12.24 – New bot creation message
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.24 – 新建机器人消息
- en: Next, create a group on Telegram and invite your bot to it with administrator
    privileges.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在 Telegram 上创建一个群组，并以管理员权限邀请你的机器人加入。
- en: 'Now, let’s use the Telegram API to check the channel ID where the bot is. You
    can do it by using the following address in your browser:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们使用 Telegram API 来检查机器人所在的频道 ID。你可以在浏览器中使用以下地址来完成此操作：
- en: '[PRE13]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You should see a similar output in the browser:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该在浏览器中看到类似的输出：
- en: '![Figure 12.25 – Telegram API message with Chat ID](img/Figure_12.25_B19453.jpg)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.25 – Telegram API 消息与 Chat ID](img/Figure_12.25_B19453.jpg)'
- en: Figure 12.25 – Telegram API message with Chat ID
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.25 – Telegram API 消息与 Chat ID
- en: We will use the `id` value later, so keep this in a safe place too.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 我们稍后会使用 `id` 值，所以也请将其保存在安全的地方。
- en: 'Then, let’s proceed to create a Grafana notification group. On the left menu
    bar, hover your cursor over the bell icon, and select **Contact points**, shown
    as follows:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，让我们继续创建一个 Grafana 通知组。在左侧菜单栏中，将鼠标悬停在铃铛图标上，并选择如下所示的 **联系人点**：
- en: '![Figure 12.26 – Grafana Alerting menu](img/Figure_12.26_B19453.jpg)'
  id: totrans-232
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.26 – Grafana 警报菜单](img/Figure_12.26_B19453.jpg)'
- en: Figure 12.26 – Grafana Alerting menu
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.26 – Grafana 警报菜单
- en: 'On the **Contact points** tab, select **Add contact point** as follows:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **联系人点** 选项卡上，按照以下方式选择 **添加联系人点**：
- en: '![Figure 12.27 – Contact points tab in Grafana](img/Figure_12.27_B19453.jpg)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.27 – Grafana 中的联系人点选项卡](img/Figure_12.27_B19453.jpg)'
- en: Figure 12.27 – Contact points tab in Grafana
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.27 – Grafana 中的联系人点选项卡
- en: 'Add a name on the **New contact point** page and choose **Telegram** in the
    **Integration** drop-down menu. Then, complete the **Bot API Token** and **Chat
    ID** fields. You can see what it looks like here:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **新建联系人点** 页面上添加一个名称，并在 **集成** 下拉菜单中选择 **Telegram**。然后，完成 **Bot API 令牌** 和
    **Chat ID** 字段。你可以在这里看到它的样子：
- en: '![Figure 12.28 – New contact point page](img/Figure_12.28_B19453.jpg)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.28 – 新联系人点页面](img/Figure_12.28_B19453.jpg)'
- en: Figure 12.28 – New contact point page
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.28 – 新联系人点页面
- en: 'Now, let’s ensure we inserted the values correctly while selecting the **Test**
    button. If everything is well configured, you will receive a message on the channel
    you have your bot in, as follows:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们确保在点击**测试**按钮时正确地插入了值。如果一切配置得当，你将在你的机器人所在的频道收到以下消息：
- en: '![Figure 12.29 – Grafana test message working successfully](img/Figure_12.29_B19453.jpg)'
  id: totrans-241
  prefs: []
  type: TYPE_IMG
  zh: '![图12.29 – Grafana测试消息成功工作](img/Figure_12.29_B19453.jpg)'
- en: Figure 12.29 – Grafana test message working successfully
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.29 – Grafana测试消息成功工作
- en: It means our bot is ready! Save the contact point and go back to the alerts
    page.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们的机器人已经准备好了！保存接触点并返回警报页面。
- en: 'In **Notification policies**, edit the **Root policy** contact point to your
    Telegram bot as follows:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**通知策略**中，编辑**根策略**的接触点为以下内容：
- en: '![Figure 12.30 – Grafana Notification policies tab](img/Figure_12.30_B19453.jpg)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
  zh: '![图12.30 – Grafana通知策略选项卡](img/Figure_12.30_B19453.jpg)'
- en: Figure 12.30 – Grafana Notification policies tab
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.30 – Grafana通知策略选项卡
- en: 'Finally, let’s create an alert rule to trigger an alert notification. On the
    **Alert rules** page, select **Create alert rule** to be redirected to a new page.
    Insert the following values in the fields on this page:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们创建一个警报规则来触发警报通知。在**警报规则**页面，选择**创建警报规则**以跳转到新页面。在此页面的字段中插入以下值：
- en: '**Rule name**: **Import errors**'
  id: totrans-248
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**规则名称**: **导入错误**'
- en: '**Metric**: **airflow_dag_processing_import_errors**'
  id: totrans-249
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**指标**: **airflow_dag_processing_import_errors**'
- en: '**Label filters**: **instance**, **statsd-exporter:9102**'
  id: totrans-250
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标签过滤器**: **实例**, **statsd-exporter:9102**'
- en: '**Threshold**: **Input A**, **IS** **ABOVE 1**'
  id: totrans-251
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**阈值**: **输入A**，**IS** **ABOVE 1**'
- en: '**Folder**: Create a new folder called **Errors** and **test_group** in **Evaluation
    group**'
  id: totrans-252
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文件夹**: 在**评估组**中创建一个名为**Errors**和**test_group**的新文件夹'
- en: '**Rule group evaluation interval**: **3 minutes**'
  id: totrans-253
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**规则组评估间隔**: **3分钟**'
- en: 'You should have something similar to the following screenshot. You can also
    use it as a reference to fill in the fields:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会有以下类似的截图。你也可以将其用作参考来填写字段：
- en: '![Figure 12.31 – New alert rule for Airflow import errors on Grafana](img/Figure_12.31_B19453.jpg)'
  id: totrans-255
  prefs: []
  type: TYPE_IMG
  zh: '![图12.31 – Grafana上Airflow导入错误的新的警报规则](img/Figure_12.31_B19453.jpg)'
- en: Figure 12.31 – New alert rule for Airflow import errors on Grafana
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.31 – Grafana上Airflow导入错误的新的警报规则
- en: Save it, and let’s simulate an import error in Airflow.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 保存它，然后在Airflow中模拟一个导入错误。
- en: 'After creating any import error in a DAG on Airflow, you will receive a notification
    on the Telegram channel similar to the following:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Airflow的DAG中创建任何导入错误后，你将在Telegram频道中收到类似以下的通知：
- en: '![Figure 12.32 – Telegram bot showing a notification after being triggered
    by a Grafana alert](img/Figure_12.32_B19453.jpg)'
  id: totrans-259
  prefs: []
  type: TYPE_IMG
  zh: '![图12.32 – 被Grafana警报触发的Telegram机器人显示通知](img/Figure_12.32_B19453.jpg)'
- en: Figure 12.32 – Telegram bot showing a notification after being triggered by
    a Grafana alert
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.32 – 被Grafana警报触发的Telegram机器人显示通知
- en: Since this is a local test, you don’t need to worry about the `Annotations`
    part for now.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是一个本地测试，目前你不需要担心**注释**部分。
- en: Our Grafana notification works, and it is fully integrated with Telegram!
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的Grafana通知工作正常，并且已经完全集成到Telegram中！
- en: How it works…
  id: totrans-263
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Although this recipe has many steps, the content is not complex. This exercise
    aims to give you a practical end-to-end example of configuring a simple bot to
    create alerts whenever needed.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这个食谱有很多步骤，但内容并不复杂。这个练习的目的是给你一个配置简单机器人以在需要时创建警报的实用端到端示例。
- en: Bots are frequently used in DevOps as a tool for notifications of an action,
    and it was no different here. From *Step 1* to *Step 4*, we focused on configuring
    a bot in Telegram and a channel where Grafana notifications could be sent. There
    is no particular reason for choosing Telegram as our messenger, other than the
    ease of creating an account. Usually, messengers such as **Slack** or **Microsoft
    Teams** are the favorites of operation teams, and plenty of online tutorials show
    how to use them.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 在DevOps中，机器人经常被用作通知动作的工具，这里也不例外。从**步骤1**到**步骤4**，我们专注于在Telegram中配置一个机器人以及一个可以发送Grafana通知的频道。选择Telegram作为我们的通讯工具没有特别的原因，只是因为创建账户的便利性。通常，像**Slack**或**Microsoft
    Teams**这样的通讯工具是运维团队的首选，而且有很多在线教程展示了如何使用它们。
- en: 'After configuring the bot, we proceeded to connect it with Grafana. The configuration
    only required a few pieces of information, such as an authentication token (to
    control the bot) and the channel’s ID. As you observed, many types of integrations
    are available, and more can be added when installing a plugin. You can see the
    complete list of plugins here: [https://grafana.com/grafana/plugins/](https://grafana.com/grafana/plugins/).'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 配置好机器人后，我们继续将其与Grafana连接。配置只需要提供少量信息，例如认证令牌（用于控制机器人）和渠道ID。正如你所观察到的，有许多类型的集成可用，并且在安装插件时可以添加更多。你可以在这里查看完整的插件列表：[Grafana插件列表](https://grafana.com/grafana/plugins/)。
- en: If we needed more than one contact point, we could create it on the **Contact
    points** tab and create a notification policy to include the new contact as a
    point to be notified.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要多个联系点，我们可以在**联系点**选项卡上创建它，并创建一个通知策略，将新联系点包括在内作为通知对象。
- en: Finally, we created an alert rule based on the number of Airflow import errors.
    Import errors can impair the execution of one or more DAGs; therefore, they are
    relevant items to monitor.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们根据Airflow导入错误的数量创建了一条警报规则。导入错误可能会影响一个或多个DAG的执行；因此，它们是值得监控的相关项目。
- en: 'There are two ways to create an alert and notification: on the **Alert rules**
    page and directly on a dashboard panel. The latter depends on the panel type,
    and not all of the panels support integrated alerts. The safest option, and the
    best practice, is to create an alert rule on the **Alert** **rules** page.'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 创建警报和通知有两种方式：在**警报规则**页面和直接在仪表板面板上。后者取决于面板类型，并非所有面板都支持集成警报。最安全的选择，也是最佳实践，是在**警报规则**页面上创建警报规则。
- en: Creating an alert is similar to a panel, where we need to identify metrics and
    labels, and the critical points are the **Threshold** and **Alert Evaluation**
    conditions. These two configurations will determine the limit of metric value
    acceptance and how long it can take. We set a shallow threshold with a short evaluation
    time for testing purposes and intentionally provoked an error. Still, a standard
    alert rule can have more time tolerance and a threshold based on the needs of
    the team.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 创建警报类似于面板，我们需要识别指标和标签，关键点是**阈值**和**警报评估**条件。这两个配置将决定指标值接受的极限以及它可能需要的时间。为了测试目的，我们设置了一个浅阈值和短评估时间，并故意引发了一个错误。然而，标准的警报规则可以有更多的时间容忍度和基于团队需求的阈值。
- en: In the end, with everything well set, we saw the bot in action, providing the
    alert as soon as the trigger conditions were met.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在一切设置妥当后，我们看到了机器人的实际操作，一旦触发条件满足，它就会立即提供警报。
- en: Further reading
  id: totrans-272
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '[https://dev.to/kirklewis/metrics-with-prometheus-statsd-exporter-and-grafana-5145](https://dev.to/kirklewis/metrics-with-prometheus-statsd-exporter-and-grafana-5145)'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用Prometheus Statsd Exporter和Grafana的指标](https://dev.to/kirklewis/metrics-with-prometheus-statsd-exporter-and-grafana-5145)'
- en: '[https://github.com/uber/cadence/pull/4793/files#diff-32d8136ee76608ed05392cfd5e8dce9a56ebdad629f7b87961c69a13edef88ec](https://github.com/uber/cadence/pull/4793/files#diff-32d8136ee76608ed05392cfd5e8dce9a56ebdad629f7b87961c69a13edef88ec)'
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Uber Cadence的Pull Request 4793的文件差异](https://github.com/uber/cadence/pull/4793/files#diff-32d8136ee76608ed05392cfd5e8dce9a56ebdad629f7b87961c69a13edef88ec)'
- en: '[https://databand.ai/blog/everyday-data-engineering-monitoring-airflow-with-prometheus-statsd-and-grafana/](https://databand.ai/blog/everyday-data-engineering-monitoring-airflow-with-prometheus-statsd-and-grafana/)'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用Prometheus Statsd和Grafana监控Airflow的日常数据工程](https://databand.ai/blog/everyday-data-engineering-monitoring-airflow-with-prometheus-statsd-and-grafana/)'
- en: '[https://www.xenonstack.com/insights/observability-vs-monitoring](https://www.xenonstack.com/insights/observability-vs-monitoring)'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[可观察性与监控的区别](https://www.xenonstack.com/insights/observability-vs-monitoring)'
- en: '[https://www.instana.com/blog/observability-vs-monitoring/](https://www.instana.com/blog/observability-vs-monitoring/)'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[可观察性与监控的区别](https://www.instana.com/blog/observability-vs-monitoring/)'
- en: '[https://acceldataio.medium.com/a-guide-to-evaluating-data-observability-tools-5589ad9d35ed](https://acceldataio.medium.com/a-guide-to-evaluating-data-observability-tools-5589ad9d35ed)'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[评估数据可观察性工具的指南](https://acceldataio.medium.com/a-guide-to-evaluating-data-observability-tools-5589ad9d35ed)'
