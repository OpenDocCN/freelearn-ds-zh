["```py\n  def ClassFactory(iface):\n  from myPlugin import MyPlugin\n  return MyPlugin(iface)\n```", "```py\n[general]\nname=Test Plugin\nemail=test@example.com\nauthor=My Name Here\nqgisMinimumVersion=2.0\ndescription=Simple test plugin.\nabout=A very simple test plugin.\nversion=version 0.1\n```", "```py\ndef classFactory(iface):\n  from testPlugin import TestPlugin\n  return TestPlugin(iface)\n```", "```py\nfrom PyQt4.QtCore import *\nfrom PyQt4.QtGui import *\n\nclass TestPlugin:\n  def __init__(self, iface):\n    self.iface = iface\n\n  def initGui(self):\n    self.action = QAction(\"Run\", self.iface.mainWindow())\n    QObject.connect(self.action, SIGNAL(\"triggered()\"),\n            self.onRun)\n    self.iface.addPluginToMenu(\"Test Plugin\", self.action)\n\n  def unload(self):\n    self.iface.removePluginMenu(\"Test Plugin\", self.action)\n\n  def onRun(self):\n    QMessageBox.information(self.iface.mainWindow(), \"debug\",\n                \"Running\")\n```", "```py\n  def initGui(self):\n icon = QIcon(\":/plugins/testPlugin/icon.png\")\n self.action = QAction(icon, \"Run\",\n self.iface.mainWindow())\n    QObject.connect(self.action, SIGNAL(\"triggered()\"),\n            self.onRun)\n    self.iface.addPluginToMenu(\"Test Plugin\", self.action)\n self.iface.addToolBarIcon(self.action)\n\n```", "```py\n  def unload(self):\n    self.iface.removePluginMenu(\"Test Plugin\", self.action)\n self.iface.removeToolBarIcon(self.action)\n\n```", "```py\n<RCC>\n  <qresource prefix=\"/plugins/testPlugin\">\n    <file>icon.png</file>\n  </qresource>\n</RCC>\n```", "```py\npyrcc4 resources.qrc -o resources.py\n```", "```py\nimport resources\n```", "```py\nPLUGINNAME = testPlugin\nPY_FILES = testPlugin.py __init__.py\nEXTRAS = icon.png metadata.txt\nUI_FILES = testPluginDialog.py\nRESOURCE_FILES = resources.py\n\ndefault: compile\n\ncompile: $(UI_FILES) $(RESOURCE_FILES)\n\n%.py : %.qrc\n  pyrcc4 -o $@ $<\n\n%.py : %.ui\n  pyuic4 -o $@ $<\n\ndeploy: compile\n  mkdir -p $(HOME)/.qgis2/python/plugins/$(PLUGINNAME)\n  cp -vf $(PY_FILES) $(HOME)/.qgis2/python/plugins/$(PLUGINNAME)\n  cp -vf $(UI_FILES) $(HOME)/.qgis2/python/plugins/$(PLUGINNAME)\n  cp -vf $(RESOURCE_FILES) $(HOME)/.qgis2/python/plugins/$(PLUGINNAME)\n  cp -vf $(EXTRAS) $(HOME)/.qgis2/python/plugins/$(PLUGINNAME)\n\nclean:\n  rm $(UI_FILES) $(RESOURCE_FILES)\n```", "```py\nshowPluginHelp(packageName=None, filename='index', section='')\n```", "```py\nimport unittest\n\ndef double(n):\n  return n * 2\n\nclass TestDouble(unittest.TestCase):\n  def test(self):\n    self.assertEqual(double(2), 4)\n```", "```py\nimport os\n\nfrom qgis.core import *\n\nQgsApplication.setPrefixPath(os.environ['QGIS_PREFIX'], True)\nQgsApplication.initQgis()\n\n# ...\n\nQgsApplication.exitQgis()\n```", "```py\nimport unittest\n\nimport os\n\nfrom qgis.core import *\n\nclass MyTest(unittest.TestCase):\n  def setup(self):\n    QgsApplication.setPrefixPath(os.environ['QGIS_PREFIX'], True)\n    QgsApplication.initQgis()\n\n  def tearDown(self):\n    QgsApplication.exitQgis()\n\n  def test_plugin(self):\n    ...\n```", "```py\nsys.path.append(\"/path/to/my/plugin\")\nimport MyPlugin\nplugin = MyPlugin.classFactory(fake_iface)\n```", "```py\nmake test\n```", "```py\n<?xml version=\"1.0\"?>\n<plugins>\n <pyqgis_plugin name=\"MyPlugin\" version=\"0.1\">\n  <description>This is a test plugin</description>\n  <homepage>http://my-site.com/qgis/myplugin</homepage>\n  <qgis_minimum_version>2.2</qgis_minimum_version>\n  <file_name>myplugin.zip</file_name>\n  <author_name>My Name</author_name>\n  <download_url>http://my-site.com/myplugin.zip</download_url>\n </pyqgis_plugin>\n</plugins>\n```", "```py\ndef classFactory(iface):\n  from geometryInfo import GeometryInfoPlugin\n  return GeometryInfoPlugin(iface)\n```", "```py\n[general]\nname=Geometry Info\nemail=*your email address*\nauthor=*your name*\nqgisMinimumVersion=2.0\ndescription=Displays information about the clicked-on geometry.\nabout=Plugin used as an example in Chapter 4 of Building Mapping\n   Applications with QGIS.\nversion=version 0.1\n```", "```py\n<RCC>\n  <qresource prefix=\"/plugins/geometryInfo\">\n    <file>icon.png</file>\n  </qresource>\n</RCC>\n```", "```py\nPLUGINNAME = geometryInfo\nPY_FILES = geometryInfo.py __init__.py\nEXTRAS = icon.png metadata.txt\nRESOURCE_FILES = resources.py\n\ndefault: compile\n\ncompile: $(RESOURCE_FILES)\n\n%.py : %.qrc\n  pyrcc4 -o $@ $<\n\ndeploy: compile\n  mkdir -p $(HOME)/.qgis2/python/plugins/$(PLUGINNAME)\n  cp -vf $(PY_FILES) $(HOME)/.qgis2/python/plugins/$(PLUGINNAME)\n  cp -vf $(RESOURCE_FILES) $(HOME)/.qgis2/python/plugins/$(PLUGINNAME)\n  cp -vf $(EXTRAS) $(HOME)/.qgis2/python/plugins/$(PLUGINNAME)\n\nclean:\n  rm $(RESOURCE_FILES)\n```", "```py\nfrom PyQt4.QtCore import *\nfrom PyQt4.QtGui import *\nimport resources\nfrom qgis.core import *\nfrom qgis.gui import *\n\nclass GeometryInfoPlugin:\n  def __init__(self, iface):\n    self.iface = iface\n\n  def initGui(self):\n    icon = QIcon(\":/plugins/geometryInfo/icon.png\")\n    self.action = QAction(icon, \"Get Geometry Info\",\n               self.iface.mainWindow())\n    QObject.connect(self.action, SIGNAL(\"triggered()\"),\n            self.onClick)\n    self.iface.addPluginToMenu(\"Geometry Info\", self.action)\n    self.iface.addToolBarIcon(self.action)\n\n  def unload(self):\n    self.iface.removePluginMenu(\"Geometry Info\", self.action)\n    self.iface.removeToolBarIcon(self.action)\n\n  def onClick(self):\n    QMessageBox.information(self.iface.mainWindow(), \"debug\",\n                \"Click\")\n```", "```py\n    self.action.setCheckable(True)\n```", "```py\n  def onClick(self):\n    if not self.action.isChecked():\n      # ...deactivate map tool...\n      return\n    self.action.setChecked(True)\n    # ...activate map tool...\n```", "```py\nclass GeometryInfoMapTool(QgsMapToolIdentify):\n  def __init__(self, iface):\n    QgsMapToolIdentify.__init__(self, iface.mapCanvas())\n    self.iface = iface\n\n  def canvasReleaseEvent(self, event):\n    QMessageBox.information(self.iface.mainWindow(), \"debug\",\n                \"Canvas Click\")\n```", "```py\n  def onClick(self):\n    if not self.action.isChecked():\n      self.iface.mapCanvas().unsetMapTool(self.mapTool)\n      self.mapTool = None\n      return\n    self.action.setChecked(True)\n    self.mapTool = GeometryInfoMapTool(self.iface)\n    self.mapTool.setAction(self.action)\n    self.iface.mapCanvas().setMapTool(self.mapTool)\n```", "```py\n    def canvasReleaseEvent(self, event):\n    found_features = self.identify(event.x(), event.y(),\n                    self.TopDownStopAtFirst,\n                    self.VectorLayer)\n    if len(found_features) > 0:\n      layer = found_features[0].mLayer\n      feature = found_features[0].mFeature\n      geometry = feature.geometry()\n```", "```py\n  def analyzeGeometry(self, geometry, layer, info):\n    crs = layer.dataProvider().crs()\n    calculator = QgsDistanceArea()\n    calculator.setSourceCrs(crs)\n    calculator.setEllipsoid(crs.ellipsoidAcronym())\n    calculator.setEllipsoidalMode(crs.geographicFlag())\n\n    if geometry.isMultipart():\n      self.add(info, 'num_multi', 1)\n      parts = geometry.asGeometryCollection()\n      for sub_geometry in parts:\n        self.analyzeGeometry(sub_geometry, layer, info)\n    elif geometry.type() == QGis.Point:\n      self.add(info, 'num_points', 1)\n    elif geometry.type() == QGis.Line:\n      self.add(info, 'num_lines', 1)\n      self.add(info, 'tot_line_length',\n           calculator.measure(geometry))\n    elif geometry.type() == QGis.Polygon:\n      self.add(info, 'num_polygons', 1)\n      self.add(info, 'tot_poly_area',\n           calculator.measure(geometry))\n      self.add(info, 'tot_poly_perimeter',\n           calculator.measurePerimeter(geometry))\n\n  def add(self, info, key, n):\n    if key in info:\n      info[key] = info[key] + n\n    else:\n      info[key] = n\n```", "```py\n  info = {}\n  self.analyzeGeometry(geometry, layer, info)\n  QMessageBox.information(self.iface.mainWindow(), \"debug\",\n              repr(info))\n```", "```py\n    ...\n    elif geometry.type() == QGis.Line:\n      self.add(info, 'num_lines', 1)\n      self.add(info, 'tot_line_length',\n int(calculator.measure(geometry)/1000))\n    elif geometry.type() == QGis.Polygon:\n      self.add(info, 'num_polygons', 1)\n      self.add(info, 'tot_poly_area',\n int(calculator.measure(geometry)/1000000))\n      self.add(info, 'tot_poly_perimeter',\n int(calculator.measurePerimeter(geometry)/1000))\n\n```", "```py\n      fields = [(\"num_multi\",\n             \"Number of multipart geometries\", \"\"),\n           (\"num_points\",\n             \"Number of point geometries\", \"\"),\n           (\"num_lines\",\n             \"Number of line geometries\", \"\"),\n           (\"tot_line_length\",\n             \"Total length of line geometries\",\n             \"km\"),\n           (\"num_polygons\",\n             \"Number of polygon geometries\", \"\"),\n           (\"tot_poly_area\",\n             \"Total area of polygon geometries\",\n             \"square km\"),\n           (\"tot_poly_perimeter\",\n             \"Total perimeter of polygon geometries\",\n             \"km\")]\n\n      results = []\n      for field,label,suffix in fields:\n        if field in info:\n          results.append(\"%s = %s %s\" %\n                  (label, str(info[field]),\n                  suffix))\n\n      QMessageBox.information(self.iface.mainWindow(),\n                  \"Geometry Info\",\n                  \"\\n\".join(results))\n```"]