- en: Moving Data In and Out of PostGIS
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Importing nonspatial tabular data (CSV) using PostGIS functions
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing nonspatial tabular data (CSV) using GDAL
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing shapefiles with shp2pgsql
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing and exporting data with the ogr2ogr GDAL command
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling batch importing and exporting of datasets
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exporting data to a shapefile with the pgsql2shp PostGIS command
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing OpenStreetMap data with the osm2pgsql command
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing raster data with the raster2pgsql PostGIS command
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing multiple rasters at a time
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exporting rasters with the gdal_translate and gdalwarp GDAL commands
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PostGIS is an open source extension for the PostgreSQL database that allows
    support for geographic objects; throughout this book you will find recipes that
    will guide you step by step to explore the different functionalities it offers.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: The purpose of the book is to become a useful tool for understanding the capabilities
    of PostGIS and how to apply them in no time. Each recipe presents a preparation
    stage, in order to organize your workspace with everything you may need, then
    the set of steps that you need to perform in order to achieve the main goal of
    the task, that includes all the external commands and SQL sentences you will need
    (which have been tested in Linux, Mac and Windows environments), and finally a
    small summary of the recipe. This book will go over a large set of common tasks
    in geographical information systems and location-based services, which makes it
    a must-have book in your technical library.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: In this first chapter, we will show you a set of recipes covering different
    tools and methodologies to import and export geographic data from the PostGIS
    spatial database, given that pretty much every common action to perform in a GIS
    starts with inserting or exporting geospatial data.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: Importing nonspatial tabular data (CSV) using PostGIS functions
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a couple of alternative approaches to importing a **Comma Separated
    Values** (**CSV**) file, which stores attributes and geometries in PostGIS. In
    this recipe, we will use the approach of importing such a file using the PostgreSQL
    `COPY` command and a couple of PostGIS functions.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will import the `firenews.csv` file that stores a series of web news collected
    from various RSS feeds related to forest fires in Europe in the context of the
    **European ****Forest ****Fire ****Information ****System** (**EFFIS**), available
    at [http://effis.jrc.ec.europa.eu/](http://effis.jrc.ec.europa.eu/).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: For each news feed, there are attributes such as `place name`, `size` of the
    fire in hectares, `URL`, and so on. Most importantly, there are the `x` and `y`
    fields that give the position of the geolocalized news in decimal degrees (in
    the WGS 84 spatial reference system, SRID = 4326).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: 'For Windows machines, it is necessary to install OSGeo4W, a set of open source
    geographical libraries that will allow the manipulation of the datasets. The link
    is: [https://trac.osgeo.org/osgeo4w/](https://trac.osgeo.org/osgeo4w/)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: In addition, include the OSGeo4W and the Postgres binary folders in the Path
    environment variable to be able to execute the commands from any location in your
    PC.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The steps you need to follow to complete this recipe are as shown:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: Inspect the structure of the CSV file, `firenews.csv`, which you can find within
    the book dataset (if you are on Windows, open the CSV file with an editor such
    as Notepad).
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The output of the preceding command is as shown:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2b34e608-2d3b-4c8a-8974-cfd3e04e7c7f.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
- en: 'Connect to PostgreSQL, create the `chp01 SCHEMA`, and create the following
    table:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We are using the `psql` client for connecting to PostgreSQL, but you can use
    your favorite one, for example, `pgAdmin`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: Using the `psql` client, we will not show the host and port options as we will
    assume that you are using a local PostgreSQL installation on the standard port.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: If that is not the case, please provide those options!
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the records from the CSV file to the PostgreSQL table using the `COPY`
    command (if you are on Windows, use an input directory such as `c:\temp` instead
    of `/tmp`) as follows:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Make sure that the `firenews.csv` file is in a location accessible from the
    PostgreSQL process user. For example, in Linux, copy the file to the `/tmp` directory.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: If you are on Windows, you most likely will need to set the encoding to UTF-8
    before copying: `postgis_cookbook=# set client_encoding to 'UTF-8'`; and remember
    to set the full path, `'c:\\tmp\firenews.csv'`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: 'Check all of the records have been imported from the CSV file to the PostgreSQL
    table:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The output of the preceding command is as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/aef84fb3-8a9b-4fde-a923-59e038340642.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
- en: 'Check a record related to this new table is in the PostGIS `geometry_columns`
    metadata view:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The output of the preceding command is as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/87588446-a973-4ce2-bd0b-c5ed1940467b.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
- en: 'Before PostGIS 2.0, you had to create a table containing spatial data in two
    distinct steps; in fact, the `geometry_columns` view was a table that needed to
    be manually updated. For that purpose, you had to use the `AddGeometryColumn` function
    to create the column. For example, this is for this recipe:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '`postgis_cookbook=> CREATE TABLE chp01.firenews(`'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '`x float8,`'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '`y float8,`'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '`place varchar(100),`'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '`size float8,`'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '`update date,`'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '`startdate date,`'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '`enddate date,`'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '`title varchar(255),`'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '`url varchar(255))`'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '`WITHOUT OIDS;postgis_cookbook=> SELECT AddGeometryColumn(''chp01'', ''firenews'',
    ''the_geom'', 4326, ''POINT'', 2);`'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '`chp01.firenews.the_geom SRID:4326 TYPE:POINT DIMS:2`'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: In PostGIS 2.0, you can still use the `AddGeometryColumn` function if you wish;
    however, you need to set its `use_typmod` parameter to `false`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, import the points in the geometric column using the `ST_MakePoint` or
    `ST_PointFromText` functions (use one of the following two update commands):'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Check how the geometry field has been updated in some records from the table:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The output of the preceding comment is as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1aecf1e2-71eb-4345-bb45-b367758842ce.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
- en: 'Finally, create a spatial index for the geometric column of the table:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How it works...
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe showed you how to load nonspatial tabular data (in CSV format) in
    PostGIS using the `COPY` PostgreSQL command.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: After creating the table and copying the CSV file rows to the PostgreSQL table,
    you updated the geometric column using one of the geometry constructor functions
    that PostGIS provides (`ST_MakePoint` and `ST_PointFromText` for bi-dimensional
    points).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: These geometry constructors (in this case, `ST_MakePoint` and `ST_PointFromText`)
    must always provide the **spatial reference system identifier** (**SRID**) together
    with the point coordinates to define the point geometry.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: Each geometric field added in any table in the database is tracked with a record
    in the `geometry_columns` PostGIS metadata view. In the previous PostGIS version
    (< 2.0), the `geometry_fields` view was a table and needed to be manually updated,
    possibly with the convenient `AddGeometryColumn` function.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: For the same reason, to maintain the updated `geometry_columns` view when dropping
    a geometry column or removing a spatial table in the previous PostGIS versions,
    there were the `DropGeometryColumn` and `DropGeometryTable` functions. With PostGIS
    2.0 and newer, you don't need to use these functions any more, but you can safely
    remove the column or the table with the standard `ALTER TABLE`, `DROP COLUMN`,
    and `DROP TABLE` SQL commands.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: In the last step of the recipe, you have created a spatial index on the table
    to improve performance. Please be aware that as in the case of alphanumerical
    database fields, indexes improve performances only when reading data using the
    `SELECT` command. In this case, you are making a number of updates on the table
    (`INSERT`, `UPDATE`, and `DELETE`); depending on the scenario, it could be less
    time consuming to drop and recreate the index after the updates.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: Importing nonspatial tabular data (CSV) using GDAL
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As an alternative approach to the previous recipe, you will import a CSV file
    to PostGIS using the `ogr2ogr` GDAL command and the **GDAL OGR virtual format**.
    The **Geospatial Data Abstraction Library** (**GDAL**) is a translator library
    for raster geospatial data formats. OGR is the related library that provides similar
    capabilities for vector data formats.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: This time, as an extra step, you will import only a part of the features in
    the file and you will reproject them to a different spatial reference system.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will import the `Global_24h.csv` file to the PostGIS database from NASA's
    **Earth Observing System Data and Information System** (**EOSDIS**).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: You can copy the file from the dataset directory of the book for this chapter.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: This file represents the active hotspots in the world detected by the **Moderate
    Resolution Imaging Spectroradiometer** (**MODIS**) satellites in the last 24 hours.
    For each row, there are the coordinates of the hotspot (latitude, longitude) in
    decimal degrees (in the WGS 84 spatial reference system, SRID = 4326), and a series
    of useful fields such as the `acquisition date`, `acquisition time`, and `satellite
    type`, just to name a few.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: You will import only the active fire data scanned by the satellite type marked
    as *T* (Terra MODIS), and you will project it using the **Spherical Mercator**
    projection coordinate system (`EPSG:3857`; it is sometimes marked as `EPSG:900913`,
    where the number 900913 represents Google in 1337 speak, as it was first widely
    used by Google Maps).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The steps you need to follow to complete this recipe are as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: 'Analyze the structure of the `Global_24h.csv` file (in Windows, open the CSV
    file with an editor such as Notepad):'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The output of the preceding command is as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5b9c0310-2d2d-4cdd-b7f8-09cb14296bec.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
- en: 'Create a GDAL virtual data source composed of just one layer derived from the
    `Global_24h.csv` file. To do so, create a text file named `global_24h.vrt` in
    the same directory where the CSV file is and edit it as follows:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'With the `ogrinfo` command, check if the virtual layer is correctly recognized
    by GDAL. For example, analyze the schema of the layer and the first of its features
    (`fid`=`1`):'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The output of the preceding command is as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00e0d0c1-ae17-4672-9633-0123d5c329a0.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
- en: 'You can also try to open the virtual layer with a desktop GIS supporting a
    GDAL/OGR virtual driver such as **Quantum GIS** (**QGIS**). In the following screenshot,
    the `Global_24h` layer is displayed together with the shapefile of the countries
    that you can find in the dataset directory of the book:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/98686468-75de-4e25-a5dc-493c63cf78e1.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
- en: The global_24h dataset over the countries layers and information of the selected
    features
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, export the virtual layer as a new table in PostGIS using the `ogr2ogr`
    GDAL/OGR command (in order for this command to become available, you need to add
    the GDAL installation folder to the `PATH` variable of your OS). You need to use
    the `-f` option to specify the output format, the `-t_srs` option to project the
    points to the `EPSG:3857` spatial reference, the `-where` option to load only
    the records from the MODIS Terra satellite type, and the `-lco` layer creation
    option to provide the schema where you want to store the table:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Check how the `ogr2ogr` command created the table, as shown in the following
    command:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now, check the record that should appear in the `geometry_columns` metadata
    view:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The output of the preceding command is as follows:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f81757a1-c90d-491b-84f6-9ac569c336f8.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
- en: 'Check how many records have been imported in the table:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The output of the preceding command is as follows:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/62e12896-962c-4db3-b94a-3b6518d2ceea.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
- en: 'Note how the coordinates have been projected from `EPSG:4326` to `EPSG:3857`:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The output of the preceding command is as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fede3455-5d4b-4c90-ac95-51fe7839c6aa.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
- en: How it works...
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As mentioned in the GDAL documentation:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '"OGR Virtual Format is a driver that transforms features read from other drivers
    based on criteria specified in an XML control file."'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: GDAL supports the reading and writing of nonspatial tabular data stored as a
    CSV file, but we need to use a virtual format to derive the geometry of the layers
    from attribute columns in the CSV file (the longitude and latitude coordinates
    for each point). For this purpose, you need to at least specify in the driver
    the path to the CSV file (the `SrcDataSource` element), the geometry type (the
    `GeometryType` element), the spatial reference definition for the layer (the `LayerSRS`
    element), and the way the driver can derive the geometric information (the `GeometryField`
    element).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: There are many other options and reasons for using OGR virtual formats; if you
    are interested in developing a better understanding, please refer to the GDAL
    documentation available at [http://www.gdal.org/drv_vrt.html](http://www.gdal.org/drv_vrt.html).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: After a virtual format is correctly created, the original flat nonspatial dataset
    is spatially supported by GDAL and software-based on GDAL. This is the reason
    why we can manipulate these files with GDAL commands such as `ogrinfo` and `ogr2ogr`,
    and with desktop GIS software such as QGIS.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: Once we have verified that GDAL can correctly read the features from the virtual
    driver, we can easily import them in PostGIS using the popular `ogr2ogr` command-line
    utility. The `ogr2ogr` command has a plethora of options, so refer to its documentation
    at [http://www.gdal.org/ogr2ogr.html](http://www.gdal.org/ogr2ogr.html) for a
    more in-depth discussion.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: 'In this recipe, you have just seen some of these options, such as:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: '`-where`: It is used to export just a selection of the original feature class'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-t_srs`: It is used to reproject the data to a different spatial reference
    system'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-lco layer creation`: It is used to provide the schema where we would want
    to store the table (without it, the new spatial table would be created in the
    `public` schema) and the name of the geometry field in the output layer'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing shapefiles with shp2pgsql
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you need to import a shapefile in PostGIS, you have at least a couple of
    options such as the `ogr2ogr` GDAL command, as you have seen previously, or the
    `shp2pgsql` PostGIS command.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, you will load a shapefile in the database using the `shp2pgsql`
    command, analyze it with the `ogrinfo` command, and display it in QGIS desktop
    software.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The steps you need to follow to complete this recipe are as follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a shapefile from the virtual driver created in the previous recipe using
    the `ogr2ogr` command (note that in this case, you do not need to specify the
    `-f` option as the shapefile is the default output format for the `ogr2ogr` command):'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Generate the SQL dump file for the shapefile using the `shp2pgsql` command.
    You are going to use the `-G` option to generate a PostGIS spatial table using
    the geography type, and the `-I` option to generate the spatial index on the geometric
    column:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Analyze the `global_24h.sql` file (in Windows, use a text editor such as Notepad):'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The output of the preceding command is as follows:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6b8087cd-9b20-4f99-94af-8a2f94a515db.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
- en: 'Run the `global_24h.sql` file in PostgreSQL:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'If you are on Linux, you may concatenate the commands from the last two steps
    in a single line in the following manner:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: '`$ shp2pgsql -G -I global_24h.shp chp01.global_24h_geographic | psql -U me
    -d postgis_cookbook`'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: 'Check if the metadata record is visible in the `geography_columns` view (and
    not in the `geometry_columns` view, as with the `-G` option of the `shp2pgsql`
    command, we have opted for a `geography` type):'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The output of the preceding command is as follows:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b1408e1d-7782-4d94-8d59-0eb20e7509c9.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
- en: 'Analyze the new PostGIS table with `ogrinfo` (use the `-fid` option just to
    display one record from the table):'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The output of the preceding command is as follows:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0f94ead1-6d7c-466e-a58c-6382b11019d1.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
- en: 'Now, open QGIS and try to add the new layer to the map. Navigate to Layer |
    Add Layer | Add PostGIS layers and provide the connection information, and then
    add the layer to the map as shown in the following screenshot:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/12b21dbe-4c65-4092-abba-7536961a2447.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
- en: How it works...
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The PostGIS command, `shp2pgsql`, allows the user to import a shapefile in the
    PostGIS database. Basically, it generates a PostgreSQL dump file that can be used
    to load data by running it from within PostgreSQL.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: 'The SQL file will be generally composed of the following sections:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: The `CREATE TABLE` section (if the `-a` option is not selected, in which case,
    the table should already exist in the database)
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `INSERT INTO` section (one `INSERT` statement for each feature to be imported
    from the shapefile)
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `CREATE INDEX` section (if the `-I` option is selected)
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unlike `ogr2ogr`, there is no way to make spatial or attribute selections (`-spat`,
    `-where ogr2ogr` options) for features in the shapefile to import.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, with the `shp2pgsql` command, it is possible to import the
    *m* coordinate of the features too (`ogr2ogr` only supports *x*, *y*, and *z*
    at the time of writing).
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: To get a complete list of the `shp2pgsql` command options and their meanings,
    just type the command name in the shell (or in the command prompt, if you are
    on Windows) and check the output.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are GUI tools to manage data in and out of PostGIS, generally integrated
    into GIS desktop software such as QGIS. In the last chapter of this book, we will
    take a look at the most popular one.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: Importing and exporting data with the ogr2ogr GDAL command
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will use the popular `ogr2ogr` GDAL command for importing
    and exporting vector data from PostGIS.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: Firstly, you will import a shapefile in PostGIS using the most significant options
    of the `ogr2ogr` command. Then, still using `ogr2ogr`, you will export the results
    of a spatial query performed in PostGIS to a couple of GDAL-supported vector formats.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The steps you need to follow to complete this recipe are as follows:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: Unzip the `wborders.zip` archive to your working directory. You can find this
    archive in the book's dataset.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the world countries shapefile (`wborders.shp`) in PostGIS using the
    `ogr2ogr` command. Using some of the options from `ogr2ogr`, you will import only
    the features from `SUBREGION=2` (Africa), and the `ISO2` and `NAME` attributes,
    and rename the feature class to `africa_countries`:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Check if the shapefile was correctly imported in PostGIS, querying the spatial
    table in the database or displaying it in a desktop GIS.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Query PostGIS to get a list of the 100 active hotspots with the highest brightness
    temperature (the `bright_t31` field) from the `global_24h` table created in the
    previous recipe:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The output of the preceding command is as follows:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/16ba1008-1b28-4071-bd00-af4bcd4d3893.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
- en: 'You want to figure out in which African countries these hotspots are located.
    For this purpose, you can do a spatial join with the `africa_countries` table
    produced in the previous step:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The output of the preceding command is as follows:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f23bd99b-8a4a-483b-ae57-9766b62728b3.png)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
- en: 'You will now export the result of this query to a vector format supported by
    GDAL, such as GeoJSON, in the WGS 84 spatial reference using `ogr2ogr`:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Open the GeoJSON file and inspect it with your favorite desktop GIS. The following
    screenshot shows you how it looks with QGIS:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9efd9122-f509-4a0d-841e-a4227e8ecc38.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
- en: 'Export the previous query to a CSV file. In this case, you have to indicate
    how the geometric information must be stored in the file; this is done using the
    `-lco GEOMETRY` option:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: How it works...
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GDAL is an open source library that comes together with several command-line
    utilities, which let the user translate and process raster and vector geodatasets
    into a plethora of formats. In the case of vector datasets, there is a GDAL sublibrary
    for managing vector datasets named OGR (therefore, when talking about vector datasets
    in the context of GDAL, we can also use the expression **OGR dataset**).
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: When you are working with an OGR dataset, two of the most popular OGR commands
    are `ogrinfo`, which lists many kinds of information from an OGR dataset, and
    `ogr2ogr`, which converts the OGR dataset from one format to another.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: 'It is possible to retrieve a list of the supported OGR vector formats using
    the `-formats` option on any OGR commands, for example, with `ogr2ogr`:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The output of the preceding command is as follows:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/83ffb756-1e96-4428-ae89-e4abd06c9a13.png)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
- en: Note that some formats are read-only, while others are read/write.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: PostGIS is one of the supported read/write OGR formats, so it is possible to
    use the OGR API or any OGR commands (such as `ogrinfo` and `ogr2ogr`) to manipulate
    its datasets.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: The `ogr2ogr` command has many options and parameters; in this recipe, you have
    seen some of the most notable ones such as `-f` to define the output format, `-t_srs` to
    reproject/transform the dataset, and `-sql` to define an (eventually spatial)
    query in the input OGR dataset.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: 'When using `ogrinfo` and `ogr2ogr` together with the desired option and parameters,
    you have to define the datasets. When specifying a PostGIS dataset, you need a
    connection string that is defined as follows:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: See also
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can find more information about the `ogrinfo` and `ogr2ogr` commands on
    the GDAL website available at [http://www.gdal.org](http://www.gdal.org).
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: If you need more information about the PostGIS driver, you should check its
    related documentation page available at [http://www.gdal.org/drv_pg.html](http://www.gdal.org/drv_pg.html).
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: Handling batch importing and exporting of datasets
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In many GIS workflows, there is a typical scenario where subsets of a PostGIS
    table must be deployed to external users in a filesystem format (most typically,
    shapefiles or a spatialite database). Often, there is also the reverse process,
    where datasets received from different users have to be uploaded to the PostGIS
    database.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will simulate both of these data flows. You will first create
    the data flow for processing the shapefiles out of PostGIS, and then the reverse
    data flow for uploading the shapefiles.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: You will do it using the power of bash scripting and the `ogr2ogr` command.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you didn''t follow all the other recipes, be sure to import the hotspots
    (`Global_24h.csv`) and the countries dataset (`countries.shp`) in PostGIS. The
    following is how to do it with `ogr2ogr` (you should import both the datasets
    in their original SRID, 4326, to make spatial operations faster):'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: 'Import in PostGIS the `Global_24h.csv` file, using the `global_24.vrt` virtual
    driver you created in a previous recipe:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Import the countries shapefile using `ogr2ogr`:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'If you already imported the hotspots dataset using the 3857 SRID, you can use
    the PostGIS 2.0 method that allows the user to modify the geometry type column
    of an existing spatial table. You can update the SRID definition for the hotspots
    table in this way thanks to the support of `typmod` on geometry objects:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: '`postgis_cookbook=# ALTER TABLE chp01.hotspots`'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: '`ALTER COLUMN the_geom`'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: '`SET DATA TYPE geometry(Point, 4326)`'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: '`USING ST_Transform(the_geom, 4326);`'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The steps you need to follow to complete this recipe are as follows:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: 'Check how many hotspots there are for each distinct country by using the following
    query:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The output of the preceding command is as follows:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/731ac673-6fc3-445c-a961-5bde1a65326d.png)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
- en: 'Using the same query, generate a CSV file using the PostgreSQL `COPY` command
    or the `ogr2ogr` command (in the first case, make sure that the Postgre service
    user has full write permission to the output directory). If you are following
    the `COPY` approach and using Windows, be sure to replace `/tmp/hs_countries.csv`
    with a different path:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'If you are using Windows, go to step 5\. With Linux, create a bash script named
    `export_shapefiles.sh` that iterates each record (country) in the `hs_countries.csv`
    file and generates a shapefile with the corresponding hotspots exported from PostGIS
    for that country:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Give execution permissions to the `bash` file, and then run it after creating
    an output directory (`out_shapefiles`) for the shapefiles that will be generated
    by the script. Then, go to *step 7*:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'If you get the output `ERROR: function getsrid(geometry) does not exist LINE
    1: SELECT getsrid("the_geom") FROM (SELECT,...`, you will need to load legacy
    support in PostGIS, for example, in a Debian Linux box:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: '`psql -d postgis_cookbook -f /usr/share/postgresql/9.1/contrib/postgis-2.1/legacy.sql`'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are using Windows, create a batch file named `export_shapefiles.bat` that
    iterates each record (country) in the `hs_countries.csv` file and generates a
    shapefile with the corresponding hotspots exported from PostGIS for that country:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Run the batch file after creating an output directory (`out_shapefiles`) for
    the shapefiles that will be generated by the script:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Try to open a couple of these output shapefiles in your favorite desktop GIS.
    The following screenshot shows you how they look in QGIS:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/db5464c0-eea0-4c62-aa2e-b73c1e0cb442.png)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
- en: 'Now, you will do the return trip, uploading all of the generated shapefiles
    to PostGIS. You will upload all of the features for each shapefile and include
    the upload datetime and the original shapefile name. First, create the following
    PostgreSQL table, where you will upload the shapefiles:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'If you are using Windows, go to step 12\. With OS X, you will need to install
    `findutils` with `homebrew` and run the script for Linux:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'With Linux, create another bash script named `import_shapefiles.sh`:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Assign the execution permission to the bash script and execute it:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Now, go to *step 14*.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are using Windows, create a batch script named `import_shapefiles.bat`:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Run the batch script:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Check some of the records that have been uploaded to the PostGIS table by using
    SQL:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The output of the preceding command is as follows:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9e2ff933-31c5-4df2-9504-b0cf1a1bd116.png)'
  id: totrans-252
  prefs: []
  type: TYPE_IMG
- en: 'Check the same query with `ogrinfo` as well:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The output of the preceding command is as follows:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b40ad790-bac2-4b8a-b6b7-fa5c1b72fde0.png)'
  id: totrans-256
  prefs: []
  type: TYPE_IMG
- en: How it works...
  id: totrans-257
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You could implement both the data flows (processing shapefiles out from PostGIS,
    and then into it again) thanks to the power of the `ogr2ogr` GDAL command.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: You have been using this command in different forms and with the most important
    input parameters in other recipes, so you should now have a good understanding
    of it.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, it is worth mentioning the way OGR lets you export the information related
    to the current datetime and the original shapefile name to the PostGIS table.
    Inside the `import_shapefiles.sh` (Linux, OS X) or the `import_shapefiles.bat`
    (Windows) scripts, the core is the line with the `ogr2ogr` command (here is the
    Linux version):'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Thanks to the `-sql` option, you can specify the two additional fields, getting
    their values from the system date command and the filename that is being iterated
    from the script.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: Exporting data to a shapefile with the pgsql2shp PostGIS command
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will export a PostGIS table to a shapefile using the `pgsql2shp`
    command that is shipped with any PostGIS distribution.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-265
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The steps you need to follow to complete this recipe are as follows:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: 'In case you still haven''t done it, export the countries shapefile to PostGIS
    using the `ogr2ogr` or the `shp2pgsql` commands. The `shp2pgsql` approach is as
    shown:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'The `ogr2ogr` approach is as follows:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Now, query PostGIS in order to get a list of countries grouped by the `subregion`
    field. For this purpose, you will merge the geometries for features having the
    same `subregion` code, using the `ST_Union` PostGIS geometric processing function:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Execute the `pgsql2shp` PostGIS command to export into a shapefile the result
    of the given query:'
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Open the shapefile and inspect it with your favorite desktop GIS. This is how
    it looks in QGIS after applying a graduated classification symbology style based
    on the aggregated population for each subregion:'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5411f57b-7013-4d2b-b24a-a46cc7c2ca74.png)'
  id: totrans-276
  prefs: []
  type: TYPE_IMG
- en: Visualization in QGIS of the classification of subregions based on population
    and information of the selected feature
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-278
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have exported the results of a spatial query to a shapefile using the `pgsql2shp`
    PostGIS command. The spatial query you have used aggregates fields using the `SUM`
    PostgreSQL function for summing country populations in the same subregion, and
    the `ST_Union` PostGIS function to aggregate the corresponding geometries as a
    geometric union.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: The `pgsql2shp` command allows you to export PostGIS tables and queries to shapefiles.
    The options you need to specify are quite similar to the ones you use to connect
    to PostgreSQL with `psql`. To get a full list of these options, just type `pgsql2shp`
    in your command prompt and read the output.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: Importing OpenStreetMap data with the osm2pgsql command
  id: totrans-281
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will import **OpenStreetMap** (**OSM**) data to PostGIS
    using the `osm2pgsql` command.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: You will first download a sample dataset from the OSM website, and then you
    will import it using the `osm2pgsql` command.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: You will add the imported layers in GIS desktop software and generate a view
    to get subdatasets, using the `hstore` PostgreSQL additional module to extract
    features based on their tags.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-285
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We need the following in place before we can proceed with the steps required
    for the recipe:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: 'Install `osm2pgsql`. If you are using Windows, follow the instructions available
    at [http://wiki.openstreetmap.org/wiki/Osm2pgsql](http://wiki.openstreetmap.org/wiki/Osm2pgsql).
    If you are on Linux, you can install it from the preceding website or from packages.
    For example, for Debian distributions, use the following:'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: For more information about the installation of the `osm2pgsql` command for other
    Linux distributions, macOS X, and MS Windows, please refer to the `osm2pgsql`
    web page available at [http://wiki.openstreetmap.org/wiki/Osm2pgsql](http://wiki.openstreetmap.org/wiki/Osm2pgsql).
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'It''s most likely that you will need to compile `osm2pgsql` yourself as the
    one that is installed with your package manager could already be obsolete. In
    my Linux Mint 12 box, this was the case (it was `osm2pgsql` v0.75), so I have
    installed Version 0.80 by following the instructions on the `osm2pgsql` web page.
    You can check the installed version just by typing the following command:'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'We will create a different database only for this recipe, as we will use this
    OSM database in other chapters. For this purpose, create a new database named
    `rome` and assign privileges to your user:'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: You will not create a different schema in this new database, though, as the
    `osm2pgsql` command can only import OSM data in the public schema at the time
    of writing.
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Be sure that your PostgreSQL installation supports `hstore` (besides `PostGIS`).
    If not, download and install it; for example, in Debian-based Linux distributions,
    you will need to install the `postgresql-contrib-9.6` package. Then, add `hstore`
    support to the `rome` database using the `CREATE EXTENSION` syntax:'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: How to do it...
  id: totrans-297
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The steps you need to follow to complete this recipe are as follows:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: Download an `.osm` file from the OpenStreetMap website ([https://www.openstreetmap.org/#map=5/21.843/82.795](https://www.openstreetmap.org/#map=5/21.843/82.795)).
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the OpenStreetMap website.
  id: totrans-300
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the area of interest for which you want to export data. You should not
    select a large area, as the live export from the website is limited to 50,000
    nodes.
  id: totrans-301
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: If you want to export larger areas, you should consider downloading the whole
    database, built daily at `planet.osm` (250 GB uncompressed and 16 GB compressed).
    At `planet.osm`, you may also download extracts that contain OpenstreetMap data
    for individual continents, countries, and metropolitan areas.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to get the same dataset used for this recipe, just copy and paste
    the following URL in your browser: [http://www.openstreetmap.org/export?lat=41.88745&lon=12.4899&zoom=15&layers=M](http://www.openstreetmap.org/export?lat=41.88745&lon=12.4899&zoom=15&layers=M);
    or, get it from the book datasets (`chp01/map.osm` file).'
  id: totrans-303
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Export link.
  id: totrans-304
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Select OpenStreetMap XML Data as the output format.
  id: totrans-305
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the `map.osm` file to your working directory.
  id: totrans-306
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run `osm2pgsql` to import the OSM data in the PostGIS database. Use the `-hstore`
    option, as you wish to add tags with an additional `hstore` (key/value) column
    in the PostgreSQL tables:'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'At this point, you should have the following geometry tables in your database:'
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'The output of the preceding command is shown here:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/88b339fc-20b5-4e8c-91c3-28d0ef61b2d6.png)'
  id: totrans-312
  prefs: []
  type: TYPE_IMG
- en: Note that the `osm2pgsql` command imports everything in the public schema. If
    you did not deal differently with the command's input parameter, your data will
    be imported in the Mercator Projection (`3857`).
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the PostGIS tables and inspect them with your favorite desktop GIS. The
    following screenshot shows how it looks in QGIS. All the different thematic features
    are mixed at this time, so it looks a bit confusing:'
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8364e6ee-ac8a-42f1-aa14-e2b05ab73faa.png)'
  id: totrans-315
  prefs: []
  type: TYPE_IMG
- en: 'Generate a PostGIS view that extracts all the polygons tagged with `trees`
    as `land cover`. For this purpose, create the following view:'
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Open the view with a desktop GIS that supports PostGIS views, such as QGIS,
    and add your `rome_trees` view. The previous screenshot shows you how it looks.
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-319
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OpenStreetMap is a popular collaborative project for creating a free map of
    the world. Every user participating in the project can edit data; at the same
    time, it is possible for everyone to download those datasets in `.osm` datafiles
    (an XML format) under the terms of the **Open Data Commons Open Database License**
    (**ODbL**) at the time of writing.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: The `osm2pgsql` command is a command-line tool that can import `.osm` datafiles
    (eventually zipped) to the PostGIS database. To use the command, it is enough
    to give the PostgreSQL connection parameters and the `.osm` file to import.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
- en: It is possible to import only features that have certain tags in the spatial
    database, as defined in the `default.style` configuration file. You can decide
    to comment in or out the OSM tagged features that you would like to import, or
    not, from this file. The command by default exports all the nodes and ways to
    linestring, point, and geometry PostGIS geometries.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
- en: 'It is highly recommended to enable `hstore` support in the PostgreSQL database
    and use the `-hstore` option of `osm2pgsql` when importing the data. Having enabled
    this support, the OSM tags for each feature will be stored in a `hstore` PostgreSQL
    data type, which is optimized for storing (and retrieving) sets of key/values
    pairs in a single field. This way, it will be possible to query the database as
    follows:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Importing raster data with the raster2pgsql PostGIS command
  id: totrans-325
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PostGIS 2.0 now has full support for raster datasets, and it is possible to
    import raster datasets using the `raster2pgsql` command.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, you will import a raster file to PostGIS using the `raster2pgsql`
    command. This command, included in any PostGIS distribution from version 2.0 onward,
    is able to generate an SQL dump to be loaded in PostGIS for any GDAL raster-supported
    format (in the same fashion that the `shp2pgsql`  command does for shapefiles).
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
- en: After loading the raster to PostGIS, you will inspect it both with SQL commands
    (analyzing the raster metadata information contained in the database), and with
    the `gdalinfo` command-line utility (to understand the way the input `raster2pgsql`
    parameters have been reflected in the PostGIS import process).
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
- en: You will finally open the raster in a desktop GIS and try a basic spatial query,
    mixing vector and raster tables.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-330
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We need the following in place before we can proceed with the steps required
    for the recipe:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
- en: From the worldclim website, download the current raster data ([http://www.worldclim.org/current](http://www.worldclim.org/current))
    for min and max temperatures (only the raster for max temperatures will be used
    for this recipe). Alternatively, use the ones provided in the book datasets (`data/chp01`).
    Each of the two archives (`data/tmax_10m_bil.zip` and `data/tmin_10m_bil.zip`)
    contain 12 rasters in the BIL format, one for each month. You can look for more
    information at [http://www.worldclim.org/formats](http://www.worldclim.org/formats).
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Extract the two archives to a directory named `worldclim` in your working directory.
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename each raster dataset to a name format with two digits for the month, for
    example, `tmax1.bil` and `tmax1.hdr` will become `tmax01.bil` and `tmax01.hdr`.
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you still haven''t loaded the countries shapefile to PostGIS from a previous
    recipe, do it using the `ogr2ogr` or `shp2pgsql` commands. The following is the
    `shp2pgsql` syntax:'
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: How to do it...
  id: totrans-337
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The steps you need to follow to complete this recipe are as follows:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: 'Get information about one of the rasters using the `gdalinfo` command-line
    tool as follows:'
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: The `gdalinfo` command provides a lot of useful information about the raster,
    for example, the GDAL driver being used to read it, the files composing it (in
    this case, two files with `.bil` and `.hdr` extensions), the size in pixels (2160
    x 900), the spatial reference (WGS 84), the geographic extents, the origin, and
    the pixel size (needed to correctly georeference the raster), and for each raster
    band (just one in the case of this file), some statistical information like the
    min and max values (-153.000 and 441.000, corresponding to a temperature of -15.3
    °C and 44.1 °C. Values are expressed as temperature * 10 in °C, according to the
    documentation available at [http://worldclim.org/](http://worldclim.org/)).
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use the `raster2pgsql` file to generate the `.sql` dump file and then import
    the raster in PostGIS:'
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'If you are in Linux, you may pipe the two commands in a unique line:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Check how the new table has been created in PostGIS:'
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Check if a record for this PostGIS raster appears in the `raster_columns` metadata
    view, and note the main metadata information that has been stored there, such
    as schema, name, raster column name (default is raster), SRID, scale (for *x*
    and *y*), block size (for *x* and *y*), band numbers (1), band types (`16BUI`),
    zero data values (0), and `db` storage type (`out_db` is `false`, as we have stored
    the raster bytes in the database; you could have used the `-R` option to register
    the raster as an out-of-db filesystem):'
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'If you have followed this recipe from the beginning, you should now have 198
    rows in the raster table, with each row representing one raster block size (100
    x 100 pixels blocks, as indicated with the `-traster2pgsql` option):'
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'The output of the preceding command is as follows:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Try to open the raster table with `gdalinfo`. You should see the same information
    you got from `gdalinfo` when you were analyzing the original BIL file. The only
    difference is the block size, as you moved to a smaller one (100 x 100) from the
    original (2160 x 900). That''s why the original file has been split into several
    datasets (198):'
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'The `gdalinfo` command reads the PostGIS raster as being composed of multiple
    raster subdatasets (198, one for each row in the table). You still have the possibility
    of reading the whole table as a single raster, using the `mode=2` option in the
    PostGIS raster connection string (`mode=1` is the default). Check the difference:'
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'You can easily obtain a visual representation of those blocks by converting
    the extent of all the 198 rows in the `tmax01` table (each representing a raster
    block) to a shapefile using `ogr2ogr`:'
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Now, try to open the raster table with QGIS (at the time of writing, one of
    the few desktop GIS tools that has support for it) together with the blocks shapefile
    generated in the previous steps (`temp_grid.shp`). You should see something like
    the following screenshot:'
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d3eda5b4-4270-4915-b0e3-5d8b345eefd3.png)'
  id: totrans-361
  prefs: []
  type: TYPE_IMG
- en: If you are using QGIS 2.6 or higher, you can see the layer in the DB Manager
    under the Database menu and drag it to the Layers panel.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
- en: 'As the last bonus step, you will select the 10 countries with the lowest average
    max temperature in January (using the centroid of the polygon representing the
    country):'
  id: totrans-363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'The output is as follows:'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
- en: '**![](img/aff94286-3fbe-4feb-b22a-d5461f4da345.png)**'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-367
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `raster2pgsql` command is able to load any raster formats supported by
    GDAL in PostGIS. You can have a format list supported by your GDAL installation
    by typing the following command:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'In this recipe, you have been importing one raster file using some of the most
    common `raster2pgsql` options:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: The `-I` option creates a GIST spatial index for the raster column. The `-C`
    option will create the standard set of constraints after the rasters have been
    loaded. The `-F` option will add a column with the filename of the raster that
    has been loaded. This is useful when you are appending many raster files to the
    same PostGIS raster table. The `-s` option sets the raster's SRID.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
- en: If you decide to include the `-t` option, then you will cut the original raster
    into tiles, each inserted as a single row in the raster table. In this case, you
    decided to cut the raster into 100 x 100 tiles, resulting in 198 table rows in
    the raster table.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
- en: Another important option is `-R`, which will register the raster as `out-of-db`;
    in such a case, only the metadata will be inserted in the database, while the
    raster will be out of the database.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
- en: The raster table contains an identifier for each row, the raster itself (eventually
    one of its tiles, if using the `-t` option), and eventually the original filename,
    if you used the `-F` option, as in this case.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
- en: You can analyze the PostGIS raster using SQL commands or the `gdalinfo` command.
    Using SQL, you can query the `raster_columns` view to get the most significant
    raster metadata (spatial reference, band number, scale, block size, and so on).
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
- en: 'With `gdalinfo`, you can access the same information, using a connection string
    with the following syntax:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: The `mode` parameter is not influential if you loaded the whole raster as a
    single block (for example, if you did not specify the `-t` option). But, as in
    the use case of this recipe, if you split it into tiles, `gdalinfo` will see each
    tile as a single subdataset with the default behavior (`mode=1`). If you want
    GDAL to consider the raster table as a unique raster dataset, you have to specify
    the mode option and explicitly set it to `2`.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
- en: Importing multiple rasters at a time
  id: totrans-380
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will guide you through the importing of multiple rasters at a time.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
- en: You will first import some different single band rasters to a unique single
    band raster table using the `raster2pgsql` command.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
- en: Then, you will try an alternative approach, merging the original single band
    rasters in a virtual raster, with one band for each of the original rasters, and
    then load the multiband raster to a raster table. To accomplish this, you will
    use the GDAL `gdalbuildvrt` command and then load the data to PostGIS with `raster2pgsql`.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-384
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Be sure to have all the original raster datasets you have been using for the
    previous recipe.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-386
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The steps you need to follow to complete this recipe are as follows:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
- en: 'Import all the maximum average temperature rasters in a single PostGIS raster
    table using `raster2pgsql` and then `psql` (eventually, pipe the two commands
    if you are in Linux):'
  id: totrans-388
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Check how the table was created in PostGIS, querying the `raster_columns` table.
    Here we are querying only some significant fields:'
  id: totrans-390
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '![](img/50ae6b7b-52c4-4822-ac30-927ab2cfed6e.png)'
  id: totrans-392
  prefs: []
  type: TYPE_IMG
- en: 'Check some raster statistics using the `ST_MetaData` function:'
  id: totrans-393
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: Note that there is different metadata for each raster record loaded in the table.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
- en: 'The output of the preceding command is as shown here:'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/48f33502-5b6b-452d-9d58-51f4b36e8b06.png)'
  id: totrans-397
  prefs: []
  type: TYPE_IMG
- en: 'If you now query the table, you would be able to derive the month for each
    raster row only from the `original_file` column. In the table, you have imported
    198 distinct records (rasters) for each of the 12 original files (we divided them
    into 100 x 100 blocks, if you remember). Test this with the following query:'
  id: totrans-398
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '![](img/5acb956c-6e6b-4a79-a9cc-653fb5169c5e.png)'
  id: totrans-400
  prefs: []
  type: TYPE_IMG
- en: 'With this approach, using the `filename` field, you could use the `ST_Value`
    PostGIS raster function to get the average monthly maximum temperature of a certain
    geographic zone for the whole year:'
  id: totrans-401
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'The output of the preceding command is as shown here:'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/94b4e36e-a003-4565-adc4-d4cb2ece5f0c.png)'
  id: totrans-404
  prefs: []
  type: TYPE_IMG
- en: 'A different approach is to store each month value in a different raster band.
    The `raster2pgsql` command doesn''t let you load to different bands in an existing
    table. But, you can use GDAL by combining the `gdalbuildvrt` and the `gdal_translate`
    commands. First, use `gdalbuildvrt` to create a new virtual raster composed of
    12 bands, one for each month:'
  id: totrans-405
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  id: totrans-406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Analyze the `tmax_2012.vrt` XML file with a text editor. It should have a virtual
    band (`VRTRasterBand`) for each physical raster pointing to it:'
  id: totrans-407
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  id: totrans-408
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Now, with `gdalinfo`, analyze this output virtual raster to check if it is
    effectively composed of 12 bands:'
  id: totrans-409
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'The output of the preceding command is as follows:'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
- en: '**![](img/7833dc04-0623-4c07-8733-72cc62391b6b.png) ...**'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the virtual raster composed of 12 bands, each referring to one of the
    12 original rasters, to a PostGIS raster table composed of 12 bands. For this
    purpose, you can use the `raster2pgsql` command:'
  id: totrans-413
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  id: totrans-414
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'Query the `raster_columns` view to get some indicators for the imported raster.
    Note that the `num_bands` is now 12:'
  id: totrans-415
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  id: totrans-416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '![](img/9a742dc8-375c-49a0-a674-8f8b65b20cfc.png)'
  id: totrans-417
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s try to produce the same output as the query using the previous
    approach. This time, given the table structure, we keep the results in a single
    row:'
  id: totrans-418
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  id: totrans-419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'The output of the preceding command is as follows:'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9f8982fc-aea5-4a99-a525-4f31322ddd8e.png)'
  id: totrans-421
  prefs: []
  type: TYPE_IMG
- en: How it works...
  id: totrans-422
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can import raster datasets in PostGIS using the `raster2pgsql` command.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
- en: The GDAL PostGIS raster so far does not support writing operations; therefore,
    for now, you cannot use GDAL commands such as `gdal_translate` and `gdalwarp`.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
- en: This is going to change in the near future, so you may have such an extra option
    when you are reading this chapter.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
- en: 'In a scenario where you have multiple rasters representing the same variable
    at different times, as in this recipe, it makes sense to store all of the original
    rasters as a single table in PostGIS. In this recipe, we have the same variable
    (average maximum temperature) represented by a single raster for each month. You
    have seen that you could proceed in two different ways:'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
- en: Append each single raster (representing a different month) to the same PostGIS
    single band raster table and derive the information related to the month from
    the value in the filename column (added to the table using the `-F raster2pgsql`
    option).
  id: totrans-427
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Generate a multiband raster using `gdalbuildvrt` (one raster with 12 bands,
    one for each month), and import it in a single multiband PostGIS table using the
    `raster2pgsql` command.
  id: totrans-428
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Exporting rasters with the gdal_translate and gdalwarp GDAL commands
  id: totrans-429
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will see a couple of main options for exporting PostGIS
    rasters to different raster formats. They are both provided as command-line tools,
    `gdal_translate` and `gdalwarp`, by GDAL.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-431
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You need the following in place before you can proceed with the steps required
    for the recipe:'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
- en: You need to have gone through the previous recipe and imported `tmax` 2012 datasets
    (12 `.bil` files) as a single multiband (12 bands) raster in PostGIS.
  id: totrans-433
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You must have the PostGIS raster format enabled in GDAL. For this purpose,
    check the output of the following command:'
  id: totrans-434
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  id: totrans-435
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'The output of the preceding command is as follows:'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  id: totrans-437
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'You should have already learned how to use the GDAL PostGIS raster driver in
    the previous two recipes. You need to use a connection string composed of the
    following parameters:'
  id: totrans-438
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  id: totrans-439
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: Refer to the previous two recipes for more information about the preceding parameters.
  id: totrans-440
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-441
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The steps you need to follow to complete this recipe are as follows:'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
- en: 'As an initial test, you will export the first six months of the `tmax` for
    2012 (the first six bands in the `tmax_2012_multi` PostGIS raster table) using
    the `gdal_translate` command:'
  id: totrans-443
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  id: totrans-444
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'As the second test, you will export all of the bands, but only for the geographic
    area containing Italy. Use the `ST_Extent` command to get the geographic extent
    of that zone:'
  id: totrans-445
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  id: totrans-446
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'The output of the preceding command is as follows:'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
- en: '**![](img/c08790d8-bad4-41ee-affd-131e49a46b5e.png)**'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
- en: 'Now use the `gdal_translate` command with the `-projwin` option to obtain the
    desired purpose:'
  id: totrans-449
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  id: totrans-450
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'There is another GDAL command, `gdalwarp`, that is still a convert utility
    with reprojection and advanced warping functionalities. You can use it, for example,
    to export a PostGIS raster table, reprojecting it to a different spatial reference
    system. This will convert the PostGIS raster table to GeoTiff and reproject it
    from `EPSG:4326` to `EPSG:3857`:'
  id: totrans-451
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  id: totrans-452
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: How it works...
  id: totrans-453
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Both `gdal_translate` and `gdalwarp` can transform rasters from a PostGIS raster
    to all GDAL-supported formats. To get a complete list of the supported formats,
    you can use the `--formats` option of GDAL''s command line as follows:'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: '`gdal_translate`和`gdalwarp`都可以将PostGIS栅格转换为所有GDAL支持的格式。要获取支持格式的完整列表，您可以使用GDAL命令行的`--formats`选项，如下所示：'
- en: '[PRE91]'
  id: totrans-455
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: For both these GDAL commands, the default output format is GeoTiff; if you need
    a different format, you must use the `-of` option and assign to it one of the
    outputs produced by the previous command line.
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这两个GDAL命令，默认输出格式是GeoTiff；如果您需要不同的格式，您必须使用`-of`选项并将其分配给之前命令行产生的输出之一。
- en: In this recipe, you have tried some of the most common options for these two
    commands. As they are complex tools, you may try some more command options as
    a bonus step.
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，您已经尝试了这两个命令的一些最常见选项。由于它们是复杂的工具，您可能还可以尝试一些额外的命令选项作为额外步骤。
- en: See also
  id: totrans-458
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: 'To get a better understanding, you should check out the excellent documentation
    on the GDAL website:'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解，您应该查看GDAL网站上的优秀文档：
- en: Information about the `gdal_translate` command is available at [http://www.gdal.org/gdal_translate.html](http://www.gdal.org/gdal_translate.html)
  id: totrans-460
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于`gdal_translate`命令的信息可在[http://www.gdal.org/gdal_translate.html](http://www.gdal.org/gdal_translate.html)找到
- en: Information about the `gdalwarp` command is available at [http://www.gdal.org/gdalwarp.html](http://www.gdal.org/gdalwarp.html)
  id: totrans-461
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于`gdalwarp`命令的信息可在[http://www.gdal.org/gdalwarp.html](http://www.gdal.org/gdalwarp.html)找到
