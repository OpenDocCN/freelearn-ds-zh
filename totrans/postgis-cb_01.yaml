- en: Moving Data In and Out of PostGIS
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 PostGIS 中移动数据
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Importing nonspatial tabular data (CSV) using PostGIS functions
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 PostGIS 函数导入非空间表格数据（CSV）
- en: Importing nonspatial tabular data (CSV) using GDAL
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 GDAL 导入非空间表格数据（CSV）
- en: Importing shapefiles with shp2pgsql
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 shp2pgsql 导入 shapefile
- en: Importing and exporting data with the ogr2ogr GDAL command
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 ogr2ogr GDAL 命令导入和导出数据
- en: Handling batch importing and exporting of datasets
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理数据集的批量导入和导出
- en: Exporting data to a shapefile with the pgsql2shp PostGIS command
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 pgsql2shp PostGIS 命令将数据导出为 shapefile
- en: Importing OpenStreetMap data with the osm2pgsql command
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 osm2pgsql 命令导入 OpenStreetMap 数据
- en: Importing raster data with the raster2pgsql PostGIS command
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 raster2pgsql PostGIS 命令导入栅格数据
- en: Importing multiple rasters at a time
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一次性导入多个栅格
- en: Exporting rasters with the gdal_translate and gdalwarp GDAL commands
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 gdal_translate 和 gdalwarp GDAL 命令导出栅格
- en: Introduction
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: PostGIS is an open source extension for the PostgreSQL database that allows
    support for geographic objects; throughout this book you will find recipes that
    will guide you step by step to explore the different functionalities it offers.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: PostGIS 是 PostgreSQL 数据库的一个开源扩展，它允许支持地理对象；在这本书中，您将找到一系列配方，它们将逐步引导您探索它提供的不同功能。
- en: The purpose of the book is to become a useful tool for understanding the capabilities
    of PostGIS and how to apply them in no time. Each recipe presents a preparation
    stage, in order to organize your workspace with everything you may need, then
    the set of steps that you need to perform in order to achieve the main goal of
    the task, that includes all the external commands and SQL sentences you will need
    (which have been tested in Linux, Mac and Windows environments), and finally a
    small summary of the recipe. This book will go over a large set of common tasks
    in geographical information systems and location-based services, which makes it
    a must-have book in your technical library.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的目的在于成为理解 PostGIS 功能及其应用的一个有用工具，让您能够迅速掌握其应用。每个配方都包含一个准备阶段，以便组织好您的工作空间，包括您可能需要的所有东西，然后是一系列步骤，您需要执行这些步骤以达到任务的主要目标，这包括所有必要的外部命令和
    SQL 语句（这些语句已在 Linux、Mac 和 Windows 环境中测试过），最后是对配方的简要总结。本书将涵盖地理信息系统和基于位置服务中的大量常见任务，这使得它成为您技术图书馆中必备的书籍。
- en: In this first chapter, we will show you a set of recipes covering different
    tools and methodologies to import and export geographic data from the PostGIS
    spatial database, given that pretty much every common action to perform in a GIS
    starts with inserting or exporting geospatial data.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一章中，我们将向您展示一系列配方，涵盖不同的工具和方法，用于从 PostGIS 空间数据库导入和导出地理数据，因为几乎在 GIS 中执行的所有常见操作都是从插入或导出地理数据开始的。
- en: Importing nonspatial tabular data (CSV) using PostGIS functions
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 PostGIS 函数导入非空间表格数据（CSV）
- en: There are a couple of alternative approaches to importing a **Comma Separated
    Values** (**CSV**) file, which stores attributes and geometries in PostGIS. In
    this recipe, we will use the approach of importing such a file using the PostgreSQL
    `COPY` command and a couple of PostGIS functions.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 导入存储属性和几何形状的 **逗号分隔值**（**CSV**）文件有几种替代方法。在本配方中，我们将使用通过 PostgreSQL `COPY` 命令和几个
    PostGIS 函数导入此类文件的方法。
- en: Getting ready
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will import the `firenews.csv` file that stores a series of web news collected
    from various RSS feeds related to forest fires in Europe in the context of the
    **European ****Forest ****Fire ****Information ****System** (**EFFIS**), available
    at [http://effis.jrc.ec.europa.eu/](http://effis.jrc.ec.europa.eu/).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在欧洲森林火灾信息系统（**EFFIS**）的背景下，我们将导入存储一系列从各种与欧洲森林火灾相关的 RSS 源收集的网页新闻的 `firenews.csv`
    文件，**EFFIS** 可在 [http://effis.jrc.ec.europa.eu/](http://effis.jrc.ec.europa.eu/)
    找到。
- en: For each news feed, there are attributes such as `place name`, `size` of the
    fire in hectares, `URL`, and so on. Most importantly, there are the `x` and `y`
    fields that give the position of the geolocalized news in decimal degrees (in
    the WGS 84 spatial reference system, SRID = 4326).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个新闻源，都有一些属性，例如 `地名`、火灾的 `面积`（以公顷为单位）、`URL` 等。最重要的是，有 `x` 和 `y` 字段，它们给出了地理定位新闻的位置，以十进制度数表示（在
    WGS 84 空间参考系统，SRID = 4326）。
- en: 'For Windows machines, it is necessary to install OSGeo4W, a set of open source
    geographical libraries that will allow the manipulation of the datasets. The link
    is: [https://trac.osgeo.org/osgeo4w/](https://trac.osgeo.org/osgeo4w/)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Windows机器，安装OSGeo4W是必要的，这是一个开源地理库集合，它将允许操作数据集。链接是：[https://trac.osgeo.org/osgeo4w/](https://trac.osgeo.org/osgeo4w/)
- en: In addition, include the OSGeo4W and the Postgres binary folders in the Path
    environment variable to be able to execute the commands from any location in your
    PC.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，将OSGeo4W和Postgres二进制文件夹包含在Path环境变量中，以便能够从PC的任何位置执行命令。
- en: How to do it...
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The steps you need to follow to complete this recipe are as shown:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这个菜谱所需的步骤如下所示：
- en: Inspect the structure of the CSV file, `firenews.csv`, which you can find within
    the book dataset (if you are on Windows, open the CSV file with an editor such
    as Notepad).
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查CSV文件`firenews.csv`的结构，你可以在书籍数据集中找到它（如果你在Windows上，可以使用记事本等编辑器打开CSV文件）。
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The output of the preceding command is as shown:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个命令的输出如下所示：
- en: '![](img/2b34e608-2d3b-4c8a-8974-cfd3e04e7c7f.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2b34e608-2d3b-4c8a-8974-cfd3e04e7c7f.png)'
- en: 'Connect to PostgreSQL, create the `chp01 SCHEMA`, and create the following
    table:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 连接到PostgreSQL，创建`chp01 SCHEMA`，并创建以下表：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We are using the `psql` client for connecting to PostgreSQL, but you can use
    your favorite one, for example, `pgAdmin`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`psql`客户端连接到PostgreSQL，但你也可以使用你喜欢的任何客户端，例如`pgAdmin`.
- en: Using the `psql` client, we will not show the host and port options as we will
    assume that you are using a local PostgreSQL installation on the standard port.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`psql`客户端，我们不会显示主机和端口选项，因为我们假设你正在使用标准端口上的本地PostgreSQL安装。
- en: If that is not the case, please provide those options!
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不是这种情况，请提供那些选项！
- en: 'Copy the records from the CSV file to the PostgreSQL table using the `COPY`
    command (if you are on Windows, use an input directory such as `c:\temp` instead
    of `/tmp`) as follows:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`COPY`命令将CSV文件中的记录复制到PostgreSQL表（如果你在Windows上，使用输入目录如`c:\temp`而不是`/tmp`）如下所示：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Make sure that the `firenews.csv` file is in a location accessible from the
    PostgreSQL process user. For example, in Linux, copy the file to the `/tmp` directory.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 确保文件`firenews.csv`位于PostgreSQL进程用户可访问的位置。例如，在Linux中，将文件复制到`/tmp`目录。
- en: If you are on Windows, you most likely will need to set the encoding to UTF-8
    before copying: `postgis_cookbook=# set client_encoding to 'UTF-8'`; and remember
    to set the full path, `'c:\\tmp\firenews.csv'`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在Windows系统上，在复制之前你很可能需要将编码设置为UTF-8：`postgis_cookbook=# set client_encoding
    to 'UTF-8'`; 并且记得设置完整路径，`'c:\\tmp\firenews.csv'`.
- en: 'Check all of the records have been imported from the CSV file to the PostgreSQL
    table:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查所有记录是否已从CSV文件导入到PostgreSQL表中：
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The output of the preceding command is as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个命令的输出如下：
- en: '![](img/aef84fb3-8a9b-4fde-a923-59e038340642.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/aef84fb3-8a9b-4fde-a923-59e038340642.png)'
- en: 'Check a record related to this new table is in the PostGIS `geometry_columns`
    metadata view:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查与这个新表相关的记录是否在PostGIS的`geometry_columns`元数据视图中：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The output of the preceding command is as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个命令的输出如下：
- en: '![](img/87588446-a973-4ce2-bd0b-c5ed1940467b.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/87588446-a973-4ce2-bd0b-c5ed1940467b.png)'
- en: 'Before PostGIS 2.0, you had to create a table containing spatial data in two
    distinct steps; in fact, the `geometry_columns` view was a table that needed to
    be manually updated. For that purpose, you had to use the `AddGeometryColumn` function
    to create the column. For example, this is for this recipe:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在PostGIS 2.0之前，你必须分两步创建包含空间数据的表；实际上，`geometry_columns`视图是一个需要手动更新的表。为此，你必须使用`AddGeometryColumn`函数来创建列。例如，这是针对这个菜谱的：
- en: '`postgis_cookbook=> CREATE TABLE chp01.firenews(`'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`postgis_cookbook=> CREATE TABLE chp01.firenews(`'
- en: '`x float8,`'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`x float8,`'
- en: '`y float8,`'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`y float8,`'
- en: '`place varchar(100),`'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`place varchar(100),`'
- en: '`size float8,`'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`size float8,`'
- en: '`update date,`'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`update date,`'
- en: '`startdate date,`'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`startdate date,`'
- en: '`enddate date,`'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`enddate date,`'
- en: '`title varchar(255),`'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`title varchar(255),`'
- en: '`url varchar(255))`'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`url varchar(255))`'
- en: '`WITHOUT OIDS;postgis_cookbook=> SELECT AddGeometryColumn(''chp01'', ''firenews'',
    ''the_geom'', 4326, ''POINT'', 2);`'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`WITHOUT OIDS;postgis_cookbook=> SELECT AddGeometryColumn(''chp01'', ''firenews'',
    ''the_geom'', 4326, ''POINT'', 2);`'
- en: '`chp01.firenews.the_geom SRID:4326 TYPE:POINT DIMS:2`'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`chp01.firenews.the_geom SRID:4326 TYPE:POINT DIMS:2`'
- en: In PostGIS 2.0, you can still use the `AddGeometryColumn` function if you wish;
    however, you need to set its `use_typmod` parameter to `false`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在PostGIS 2.0中，如果你愿意，仍然可以使用`AddGeometryColumn`函数；然而，你需要将其`use_typmod`参数设置为`false`.
- en: 'Now, import the points in the geometric column using the `ST_MakePoint` or
    `ST_PointFromText` functions (use one of the following two update commands):'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用`ST_MakePoint`或`ST_PointFromText`函数将点导入几何列（使用以下两个更新命令之一）：
- en: '[PRE5]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Check how the geometry field has been updated in some records from the table:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查表中某些记录的几何字段是如何更新的：
- en: '[PRE6]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The output of the preceding comment is as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 上述注释的输出如下：
- en: '![](img/1aecf1e2-71eb-4345-bb45-b367758842ce.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1aecf1e2-71eb-4345-bb45-b367758842ce.png)'
- en: 'Finally, create a spatial index for the geometric column of the table:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，为表的几何列创建空间索引：
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How it works...
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This recipe showed you how to load nonspatial tabular data (in CSV format) in
    PostGIS using the `COPY` PostgreSQL command.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这个食谱向你展示了如何使用`COPY` PostgreSQL命令在PostGIS中加载非空间表格数据（CSV格式）。
- en: After creating the table and copying the CSV file rows to the PostgreSQL table,
    you updated the geometric column using one of the geometry constructor functions
    that PostGIS provides (`ST_MakePoint` and `ST_PointFromText` for bi-dimensional
    points).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建表并将CSV文件行复制到PostgreSQL表之后，你使用PostGIS提供的几何构造函数之一（`ST_MakePoint`和`ST_PointFromText`用于二维点）更新了几何列。
- en: These geometry constructors (in this case, `ST_MakePoint` and `ST_PointFromText`)
    must always provide the **spatial reference system identifier** (**SRID**) together
    with the point coordinates to define the point geometry.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这些几何构造函数（在这种情况下，`ST_MakePoint`和`ST_PointFromText`）必须始终提供**空间参考系标识符**（**SRID**）以及点坐标来定义点几何形状。
- en: Each geometric field added in any table in the database is tracked with a record
    in the `geometry_columns` PostGIS metadata view. In the previous PostGIS version
    (< 2.0), the `geometry_fields` view was a table and needed to be manually updated,
    possibly with the convenient `AddGeometryColumn` function.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库中任何表中添加的几何字段都会在`geometry_columns` PostGIS元数据视图中跟踪一个记录。在先前的PostGIS版本（< 2.0）中，`geometry_fields`视图是一个表，需要手动更新，可能使用方便的`AddGeometryColumn`函数。
- en: For the same reason, to maintain the updated `geometry_columns` view when dropping
    a geometry column or removing a spatial table in the previous PostGIS versions,
    there were the `DropGeometryColumn` and `DropGeometryTable` functions. With PostGIS
    2.0 and newer, you don't need to use these functions any more, but you can safely
    remove the column or the table with the standard `ALTER TABLE`, `DROP COLUMN`,
    and `DROP TABLE` SQL commands.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 由于同样的原因，在先前版本的PostGIS中删除空间列或移除空间表时，为了保持更新的`geometry_columns`视图，存在`DropGeometryColumn`和`DropGeometryTable`函数。从PostGIS
    2.0及更高版本开始，你不再需要使用这些函数，但你可以安全地使用标准的`ALTER TABLE`、`DROP COLUMN`和`DROP TABLE` SQL命令来删除列或表。
- en: In the last step of the recipe, you have created a spatial index on the table
    to improve performance. Please be aware that as in the case of alphanumerical
    database fields, indexes improve performances only when reading data using the
    `SELECT` command. In this case, you are making a number of updates on the table
    (`INSERT`, `UPDATE`, and `DELETE`); depending on the scenario, it could be less
    time consuming to drop and recreate the index after the updates.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在食谱的最后一步，你在表上创建了一个空间索引以改善性能。请注意，与字母数字数据库字段的情况一样，索引只有在使用`SELECT`命令读取数据时才会提高性能。在这种情况下，你正在对表进行多次更新（`INSERT`、`UPDATE`和`DELETE`）；根据场景，在更新后删除并重新创建索引可能更节省时间。
- en: Importing nonspatial tabular data (CSV) using GDAL
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用GDAL导入非空间表格数据（CSV）
- en: As an alternative approach to the previous recipe, you will import a CSV file
    to PostGIS using the `ogr2ogr` GDAL command and the **GDAL OGR virtual format**.
    The **Geospatial Data Abstraction Library** (**GDAL**) is a translator library
    for raster geospatial data formats. OGR is the related library that provides similar
    capabilities for vector data formats.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 作为先前食谱的替代方法，你将使用`ogr2ogr` GDAL命令和**GDAL OGR虚拟格式**将CSV文件导入PostGIS。**地理空间数据抽象库**（**GDAL**）是一个用于栅格地理空间数据格式的翻译库。OGR是与GDAL相关的库，它为矢量数据格式提供类似的功能。
- en: This time, as an extra step, you will import only a part of the features in
    the file and you will reproject them to a different spatial reference system.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，作为额外步骤，你将只导入文件中的一部分特征，并将它们重新投影到不同的空间参考系中。
- en: Getting ready
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will import the `Global_24h.csv` file to the PostGIS database from NASA's
    **Earth Observing System Data and Information System** (**EOSDIS**).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 你将从NASA的**地球观测系统数据和信息系统**（**EOSDIS**）导入`Global_24h.csv`文件到PostGIS数据库。
- en: You can copy the file from the dataset directory of the book for this chapter.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以复制本书此章节的数据集目录中的文件。
- en: This file represents the active hotspots in the world detected by the **Moderate
    Resolution Imaging Spectroradiometer** (**MODIS**) satellites in the last 24 hours.
    For each row, there are the coordinates of the hotspot (latitude, longitude) in
    decimal degrees (in the WGS 84 spatial reference system, SRID = 4326), and a series
    of useful fields such as the `acquisition date`, `acquisition time`, and `satellite
    type`, just to name a few.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件表示在过去24小时内由**中分辨率成像光谱仪**（**MODIS**）卫星检测到的全球活跃热点。对于每一行，都有热点的坐标（纬度，经度）以十进制度数表示（在WGS
    84空间参考系统中，SRID = 4326），以及一系列有用的字段，例如`acquisition date`（获取日期）、`acquisition time`（获取时间）和`satellite
    type`（卫星类型），仅举几例。
- en: You will import only the active fire data scanned by the satellite type marked
    as *T* (Terra MODIS), and you will project it using the **Spherical Mercator**
    projection coordinate system (`EPSG:3857`; it is sometimes marked as `EPSG:900913`,
    where the number 900913 represents Google in 1337 speak, as it was first widely
    used by Google Maps).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 你将只导入由标记为*T*（Terra MODIS）类型的卫星扫描的活跃火灾数据，并将其使用**球面墨卡托**投影坐标系（`EPSG:3857`；有时标记为`EPSG:900913`，其中数字900913代表1337语言中的Google，因为它最初被Google
    Maps广泛使用）进行投影。
- en: How to do it...
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'The steps you need to follow to complete this recipe are as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此食谱需要遵循的步骤如下：
- en: 'Analyze the structure of the `Global_24h.csv` file (in Windows, open the CSV
    file with an editor such as Notepad):'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 分析`Global_24h.csv`文件的结构（在Windows中，使用记事本等编辑器打开CSV文件）：
- en: '[PRE8]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The output of the preceding command is as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个命令的输出如下：
- en: '![](img/5b9c0310-2d2d-4cdd-b7f8-09cb14296bec.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5b9c0310-2d2d-4cdd-b7f8-09cb14296bec.png)'
- en: 'Create a GDAL virtual data source composed of just one layer derived from the
    `Global_24h.csv` file. To do so, create a text file named `global_24h.vrt` in
    the same directory where the CSV file is and edit it as follows:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个由`Global_24h.csv`文件派生的一个层组成的GDAL虚拟数据源。为此，在CSV文件所在的目录中创建一个名为`global_24h.vrt`的文本文件，并按以下方式编辑它：
- en: '[PRE9]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'With the `ogrinfo` command, check if the virtual layer is correctly recognized
    by GDAL. For example, analyze the schema of the layer and the first of its features
    (`fid`=`1`):'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`ogrinfo`命令检查虚拟层是否被GDAL正确识别。例如，分析层的模式及其第一个特征（`fid`=`1`）：
- en: '[PRE10]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The output of the preceding command is as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个命令的输出如下：
- en: '![](img/00e0d0c1-ae17-4672-9633-0123d5c329a0.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00e0d0c1-ae17-4672-9633-0123d5c329a0.png)'
- en: 'You can also try to open the virtual layer with a desktop GIS supporting a
    GDAL/OGR virtual driver such as **Quantum GIS** (**QGIS**). In the following screenshot,
    the `Global_24h` layer is displayed together with the shapefile of the countries
    that you can find in the dataset directory of the book:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以尝试使用支持GDAL/OGR虚拟驱动程序的桌面GIS软件打开虚拟层，例如**Quantum GIS**（**QGIS**）。在下面的屏幕截图中，`Global_24h`层与书中数据集目录中可以找到的国家shapefile一起显示：
- en: '![](img/98686468-75de-4e25-a5dc-493c63cf78e1.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/98686468-75de-4e25-a5dc-493c63cf78e1.png)'
- en: The global_24h dataset over the countries layers and information of the selected
    features
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 全球24小时数据集覆盖国家层和所选特征的信息
- en: 'Now, export the virtual layer as a new table in PostGIS using the `ogr2ogr`
    GDAL/OGR command (in order for this command to become available, you need to add
    the GDAL installation folder to the `PATH` variable of your OS). You need to use
    the `-f` option to specify the output format, the `-t_srs` option to project the
    points to the `EPSG:3857` spatial reference, the `-where` option to load only
    the records from the MODIS Terra satellite type, and the `-lco` layer creation
    option to provide the schema where you want to store the table:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用`ogr2ogr` GDAL/OGR命令将虚拟层作为新的表导出到PostGIS（为了使此命令可用，您需要将GDAL安装文件夹添加到您的操作系统的`PATH`变量中）。您需要使用`-f`选项指定输出格式，使用`-t_srs`选项将点投影到`EPSG:3857`空间参考，使用`-where`选项仅加载MODIS
    Terra卫星类型的记录，并使用`-lco`层创建选项提供您想要存储表的模式：
- en: '[PRE11]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Check how the `ogr2ogr` command created the table, as shown in the following
    command:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查`ogr2ogr`命令如何创建表，如下面的命令所示：
- en: '[PRE12]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now, check the record that should appear in the `geometry_columns` metadata
    view:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，检查`geometry_columns`元数据视图中应该出现的记录：
- en: '[PRE13]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The output of the preceding command is as follows:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个命令的输出如下：
- en: '![](img/f81757a1-c90d-491b-84f6-9ac569c336f8.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f81757a1-c90d-491b-84f6-9ac569c336f8.png)'
- en: 'Check how many records have been imported in the table:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查表中已导入的记录数量：
- en: '[PRE14]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The output of the preceding command is as follows:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 前述命令的输出如下：
- en: '![](img/62e12896-962c-4db3-b94a-3b6518d2ceea.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/62e12896-962c-4db3-b94a-3b6518d2ceea.png)'
- en: 'Note how the coordinates have been projected from `EPSG:4326` to `EPSG:3857`:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意坐标是如何从 `EPSG:4326` 投影到 `EPSG:3857` 的：
- en: '[PRE15]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The output of the preceding command is as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 前述命令的输出如下：
- en: '![](img/fede3455-5d4b-4c90-ac95-51fe7839c6aa.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/fede3455-5d4b-4c90-ac95-51fe7839c6aa.png)'
- en: How it works...
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'As mentioned in the GDAL documentation:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如 GDAL 文档中所述：
- en: '"OGR Virtual Format is a driver that transforms features read from other drivers
    based on criteria specified in an XML control file."'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '"OGR 虚拟格式是一个驱动程序，它根据 XML 控制文件中指定的标准将其他驱动程序读取的特征进行转换。"'
- en: GDAL supports the reading and writing of nonspatial tabular data stored as a
    CSV file, but we need to use a virtual format to derive the geometry of the layers
    from attribute columns in the CSV file (the longitude and latitude coordinates
    for each point). For this purpose, you need to at least specify in the driver
    the path to the CSV file (the `SrcDataSource` element), the geometry type (the
    `GeometryType` element), the spatial reference definition for the layer (the `LayerSRS`
    element), and the way the driver can derive the geometric information (the `GeometryField`
    element).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: GDAL 支持以 CSV 文件形式存储的非空间表格数据的读取和写入，但我们需要使用虚拟格式从 CSV 文件中的属性列（每个点的经纬度坐标）推导出层的几何形状。为此，您至少需要在驱动程序中指定
    CSV 文件的路径（`SrcDataSource` 元素）、几何类型（`GeometryType` 元素）、层的空间参考定义（`LayerSRS` 元素）以及驱动程序推导几何信息的方式（`GeometryField`
    元素）。
- en: There are many other options and reasons for using OGR virtual formats; if you
    are interested in developing a better understanding, please refer to the GDAL
    documentation available at [http://www.gdal.org/drv_vrt.html](http://www.gdal.org/drv_vrt.html).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 OGR 虚拟格式有许多其他选项和原因；如果您想更好地理解，请参阅位于 [http://www.gdal.org/drv_vrt.html](http://www.gdal.org/drv_vrt.html)
    的 GDAL 文档。
- en: After a virtual format is correctly created, the original flat nonspatial dataset
    is spatially supported by GDAL and software-based on GDAL. This is the reason
    why we can manipulate these files with GDAL commands such as `ogrinfo` and `ogr2ogr`,
    and with desktop GIS software such as QGIS.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在虚拟格式正确创建之后，原始的平面非空间数据集由 GDAL 和基于 GDAL 的软件在空间上支持。这就是为什么我们可以使用 GDAL 命令（如 `ogrinfo`
    和 `ogr2ogr`）以及桌面 GIS 软件（如 QGIS）来操作这些文件的原因。
- en: Once we have verified that GDAL can correctly read the features from the virtual
    driver, we can easily import them in PostGIS using the popular `ogr2ogr` command-line
    utility. The `ogr2ogr` command has a plethora of options, so refer to its documentation
    at [http://www.gdal.org/ogr2ogr.html](http://www.gdal.org/ogr2ogr.html) for a
    more in-depth discussion.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们验证了 GDAL 可以正确地从虚拟驱动程序读取要素，我们就可以使用流行的 `ogr2ogr` 命令行工具轻松地将它们导入 PostGIS。`ogr2ogr`
    命令有众多选项，因此请参阅其位于 [http://www.gdal.org/ogr2ogr.html](http://www.gdal.org/ogr2ogr.html)
    的文档以获取更深入的讨论。
- en: 'In this recipe, you have just seen some of these options, such as:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，您已经看到了一些这些选项，例如：
- en: '`-where`: It is used to export just a selection of the original feature class'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-where`：它用于仅导出原始要素类的一部分'
- en: '`-t_srs`: It is used to reproject the data to a different spatial reference
    system'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-t_srs`：它用于将数据重新投影到不同的空间参考系统'
- en: '`-lco layer creation`: It is used to provide the schema where we would want
    to store the table (without it, the new spatial table would be created in the
    `public` schema) and the name of the geometry field in the output layer'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-lco layer creation`：它用于提供我们想要存储表的架构（如果没有它，新的空间表将在 `public` 架构中创建）以及输出层中几何字段的名称'
- en: Importing shapefiles with shp2pgsql
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 shp2pgsql 导入 shapefile
- en: If you need to import a shapefile in PostGIS, you have at least a couple of
    options such as the `ogr2ogr` GDAL command, as you have seen previously, or the
    `shp2pgsql` PostGIS command.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要将 shapefile 导入 PostGIS，您至少有两个选项，例如之前看到的 `ogr2ogr` GDAL 命令，或者 `shp2pgsql`
    PostGIS 命令。
- en: In this recipe, you will load a shapefile in the database using the `shp2pgsql`
    command, analyze it with the `ogrinfo` command, and display it in QGIS desktop
    software.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，您将使用 `shp2pgsql` 命令在数据库中加载 shapefile，使用 `ogrinfo` 命令分析它，并在 QGIS 桌面软件中显示它。
- en: How to do it...
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The steps you need to follow to complete this recipe are as follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此食谱所需遵循的步骤如下：
- en: 'Create a shapefile from the virtual driver created in the previous recipe using
    the `ogr2ogr` command (note that in this case, you do not need to specify the
    `-f` option as the shapefile is the default output format for the `ogr2ogr` command):'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `ogr2ogr` 命令（注意，在这种情况下，您不需要指定 `-f` 选项，因为 shapefile 是 `ogr2ogr` 命令的默认输出格式）从之前菜谱中创建的虚拟驱动程序创建
    shapefile：
- en: '[PRE16]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Generate the SQL dump file for the shapefile using the `shp2pgsql` command.
    You are going to use the `-G` option to generate a PostGIS spatial table using
    the geography type, and the `-I` option to generate the spatial index on the geometric
    column:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `shp2pgsql` 命令生成 shapefile 的 SQL 导出文件。您将使用 `-G` 选项使用 geography 类型生成 PostGIS
    空间表，并使用 `-I` 选项在几何列上生成空间索引：
- en: '[PRE17]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Analyze the `global_24h.sql` file (in Windows, use a text editor such as Notepad):'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 分析 `global_24h.sql` 文件（在 Windows 中，使用记事本等文本编辑器）：
- en: '[PRE18]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The output of the preceding command is as follows:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令的输出如下：
- en: '![](img/6b8087cd-9b20-4f99-94af-8a2f94a515db.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6b8087cd-9b20-4f99-94af-8a2f94a515db.png)'
- en: 'Run the `global_24h.sql` file in PostgreSQL:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 PostgreSQL 中运行 `global_24h.sql` 文件：
- en: '[PRE19]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'If you are on Linux, you may concatenate the commands from the last two steps
    in a single line in the following manner:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用 Linux，可以将最后两个步骤中的命令合并为单行，如下所示：
- en: '`$ shp2pgsql -G -I global_24h.shp chp01.global_24h_geographic | psql -U me
    -d postgis_cookbook`'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '`$ shp2pgsql -G -I global_24h.shp chp01.global_24h_geographic | psql -U me
    -d postgis_cookbook`'
- en: 'Check if the metadata record is visible in the `geography_columns` view (and
    not in the `geometry_columns` view, as with the `-G` option of the `shp2pgsql`
    command, we have opted for a `geography` type):'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查元数据记录是否在 `geography_columns` 视图中可见（而不是在 `geometry_columns` 视图中，因为使用 `shp2pgsql`
    命令的 `-G` 选项时，我们已选择 `geography` 类型）：
- en: '[PRE20]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The output of the preceding command is as follows:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令的输出如下：
- en: '![](img/b1408e1d-7782-4d94-8d59-0eb20e7509c9.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b1408e1d-7782-4d94-8d59-0eb20e7509c9.png)'
- en: 'Analyze the new PostGIS table with `ogrinfo` (use the `-fid` option just to
    display one record from the table):'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `ogrinfo` 分析新的 PostGIS 表（使用 `-fid` 选项仅显示表中的一条记录）：
- en: '[PRE21]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The output of the preceding command is as follows:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令的输出如下：
- en: '![](img/0f94ead1-6d7c-466e-a58c-6382b11019d1.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0f94ead1-6d7c-466e-a58c-6382b11019d1.png)'
- en: 'Now, open QGIS and try to add the new layer to the map. Navigate to Layer |
    Add Layer | Add PostGIS layers and provide the connection information, and then
    add the layer to the map as shown in the following screenshot:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，打开 QGIS 并尝试将新图层添加到地图中。导航到图层 | 添加图层 | 添加 PostGIS 图层，并输入连接信息，然后将图层添加到地图中，如下面的截图所示：
- en: '![](img/12b21dbe-4c65-4092-abba-7536961a2447.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/12b21dbe-4c65-4092-abba-7536961a2447.png)'
- en: How it works...
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The PostGIS command, `shp2pgsql`, allows the user to import a shapefile in the
    PostGIS database. Basically, it generates a PostgreSQL dump file that can be used
    to load data by running it from within PostgreSQL.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: PostGIS 命令 `shp2pgsql` 允许用户将 shapefile 导入到 PostGIS 数据库中。基本上，它生成一个 PostgreSQL
    导出文件，可以通过在 PostgreSQL 中运行它来加载数据。
- en: 'The SQL file will be generally composed of the following sections:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 文件通常由以下部分组成：
- en: The `CREATE TABLE` section (if the `-a` option is not selected, in which case,
    the table should already exist in the database)
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CREATE TABLE` 部分（如果未选择 `-a` 选项，在这种情况下，表应已存在于数据库中）'
- en: The `INSERT INTO` section (one `INSERT` statement for each feature to be imported
    from the shapefile)
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`INSERT INTO` 部分（每个要从中导入的要素一个 `INSERT` 语句）'
- en: The `CREATE INDEX` section (if the `-I` option is selected)
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CREATE INDEX` 部分（如果选择 `-I` 选项）'
- en: Unlike `ogr2ogr`, there is no way to make spatial or attribute selections (`-spat`,
    `-where ogr2ogr` options) for features in the shapefile to import.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `ogr2ogr` 不同，没有方法可以对要导入的 shapefile 中的要素进行空间或属性选择（`-spat`，`-where ogr2ogr`
    选项）。
- en: On the other hand, with the `shp2pgsql` command, it is possible to import the
    *m* coordinate of the features too (`ogr2ogr` only supports *x*, *y*, and *z*
    at the time of writing).
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，使用 `shp2pgsql` 命令，还可以导入要素的 *m* 坐标（截至编写时，`ogr2ogr` 只支持 *x*，*y* 和 *z*）。
- en: To get a complete list of the `shp2pgsql` command options and their meanings,
    just type the command name in the shell (or in the command prompt, if you are
    on Windows) and check the output.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取 `shp2pgsql` 命令的所有选项及其含义的完整列表，只需在 shell（或在 Windows 的命令提示符中）中输入命令名称并检查输出。
- en: There's more...
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多内容...
- en: There are GUI tools to manage data in and out of PostGIS, generally integrated
    into GIS desktop software such as QGIS. In the last chapter of this book, we will
    take a look at the most popular one.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在PostGIS中管理数据进出的GUI工具通常集成到GIS桌面软件中，例如QGIS。本书的最后一章，我们将探讨其中最受欢迎的一个。
- en: Importing and exporting data with the ogr2ogr GDAL command
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ogr2ogr GDAL命令导入和导出数据
- en: In this recipe, you will use the popular `ogr2ogr` GDAL command for importing
    and exporting vector data from PostGIS.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，您将使用流行的`ogr2ogr` GDAL命令从PostGIS导入和导出矢量数据。
- en: Firstly, you will import a shapefile in PostGIS using the most significant options
    of the `ogr2ogr` command. Then, still using `ogr2ogr`, you will export the results
    of a spatial query performed in PostGIS to a couple of GDAL-supported vector formats.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您将使用`ogr2ogr`命令的最显著选项将shapefile导入到PostGIS中。然后，仍然使用`ogr2ogr`，您将把在PostGIS中执行的空间查询的结果导出到几个GDAL支持的矢量格式中。
- en: How to do it...
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The steps you need to follow to complete this recipe are as follows:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此菜谱所需的步骤如下：
- en: Unzip the `wborders.zip` archive to your working directory. You can find this
    archive in the book's dataset.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`wborders.zip`存档解压到您的工作目录。您可以在本书的数据集中找到此存档。
- en: 'Import the world countries shapefile (`wborders.shp`) in PostGIS using the
    `ogr2ogr` command. Using some of the options from `ogr2ogr`, you will import only
    the features from `SUBREGION=2` (Africa), and the `ISO2` and `NAME` attributes,
    and rename the feature class to `africa_countries`:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`ogr2ogr`命令将世界国家shapefile（`wborders.shp`）导入到PostGIS中。使用`ogr2ogr`的一些选项，您将只导入`SUBREGION=2`（非洲）的特征，以及`ISO2`和`NAME`属性，并将特征类重命名为`africa_countries`：
- en: '[PRE22]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Check if the shapefile was correctly imported in PostGIS, querying the spatial
    table in the database or displaying it in a desktop GIS.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查shapefile是否已正确导入到PostGIS中，可以通过查询数据库中的空间表或在桌面GIS中显示它来验证。
- en: 'Query PostGIS to get a list of the 100 active hotspots with the highest brightness
    temperature (the `bright_t31` field) from the `global_24h` table created in the
    previous recipe:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用上一道菜谱中创建的`global_24h`表，查询PostGIS以获取亮度温度（`bright_t31`字段）最高的100个活跃热点列表：
- en: '[PRE23]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The output of the preceding command is as follows:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令的输出如下：
- en: '![](img/16ba1008-1b28-4071-bd00-af4bcd4d3893.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![](img/16ba1008-1b28-4071-bd00-af4bcd4d3893.png)'
- en: 'You want to figure out in which African countries these hotspots are located.
    For this purpose, you can do a spatial join with the `africa_countries` table
    produced in the previous step:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您想找出这些热点位于哪些非洲国家。为此，您可以对上一步骤中产生的`africa_countries`表进行空间连接：
- en: '[PRE24]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The output of the preceding command is as follows:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令的输出如下：
- en: '![](img/f23bd99b-8a4a-483b-ae57-9766b62728b3.png)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f23bd99b-8a4a-483b-ae57-9766b62728b3.png)'
- en: 'You will now export the result of this query to a vector format supported by
    GDAL, such as GeoJSON, in the WGS 84 spatial reference using `ogr2ogr`:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您将使用`ogr2ogr`将此查询的结果导出为GDAL支持的矢量格式，如GeoJSON，在WGS 84空间参考下：
- en: '[PRE25]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Open the GeoJSON file and inspect it with your favorite desktop GIS. The following
    screenshot shows you how it looks with QGIS:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您最喜欢的桌面GIS打开GeoJSON文件并检查它。以下截图显示了它在QGIS中的样子：
- en: '![](img/9efd9122-f509-4a0d-841e-a4227e8ecc38.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9efd9122-f509-4a0d-841e-a4227e8ecc38.png)'
- en: 'Export the previous query to a CSV file. In this case, you have to indicate
    how the geometric information must be stored in the file; this is done using the
    `-lco GEOMETRY` option:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将之前的查询导出到CSV文件。在这种情况下，您必须指明几何信息必须在文件中如何存储；这是通过使用`-lco GEOMETRY`选项来完成的：
- en: '[PRE26]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: How it works...
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: GDAL is an open source library that comes together with several command-line
    utilities, which let the user translate and process raster and vector geodatasets
    into a plethora of formats. In the case of vector datasets, there is a GDAL sublibrary
    for managing vector datasets named OGR (therefore, when talking about vector datasets
    in the context of GDAL, we can also use the expression **OGR dataset**).
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: GDAL是一个开源库，它包含几个命令行实用程序，允许用户将栅格和矢量地理数据集转换为多种格式。在矢量数据集的情况下，有一个名为OGR的GDAL子库用于管理矢量数据集（因此，在GDAL的上下文中讨论矢量数据集时，我们也可以使用表达式**OGR数据集**）。
- en: When you are working with an OGR dataset, two of the most popular OGR commands
    are `ogrinfo`, which lists many kinds of information from an OGR dataset, and
    `ogr2ogr`, which converts the OGR dataset from one format to another.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用OGR数据集工作时，最流行的两个OGR命令是`ogrinfo`，它可以列出来自OGR数据集的许多信息，以及`ogr2ogr`，它可以将OGR数据集从一种格式转换为另一种格式。
- en: 'It is possible to retrieve a list of the supported OGR vector formats using
    the `-formats` option on any OGR commands, for example, with `ogr2ogr`:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 使用任何 OGR 命令的 `-formats` 选项可以检索支持的 OGR 向量格式列表，例如使用 `ogr2ogr`：
- en: '[PRE27]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The output of the preceding command is as follows:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个命令的输出如下：
- en: '![](img/83ffb756-1e96-4428-ae89-e4abd06c9a13.png)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![](img/83ffb756-1e96-4428-ae89-e4abd06c9a13.png)'
- en: Note that some formats are read-only, while others are read/write.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，某些格式是只读的，而其他格式是读写。
- en: PostGIS is one of the supported read/write OGR formats, so it is possible to
    use the OGR API or any OGR commands (such as `ogrinfo` and `ogr2ogr`) to manipulate
    its datasets.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: PostGIS 是支持的读写 OGR 格式之一，因此可以使用 OGR API 或任何 OGR 命令（如 `ogrinfo` 和 `ogr2ogr`）来操作其数据集。
- en: The `ogr2ogr` command has many options and parameters; in this recipe, you have
    seen some of the most notable ones such as `-f` to define the output format, `-t_srs` to
    reproject/transform the dataset, and `-sql` to define an (eventually spatial)
    query in the input OGR dataset.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '`ogr2ogr` 命令有许多选项和参数；在这个菜谱中，你已经看到了一些最显著的选项，例如 `-f` 用于定义输出格式，`-t_srs` 用于重新投影/转换数据集，以及
    `-sql` 用于在输入 OGR 数据集中定义一个（最终是空间）查询。'
- en: 'When using `ogrinfo` and `ogr2ogr` together with the desired option and parameters,
    you have to define the datasets. When specifying a PostGIS dataset, you need a
    connection string that is defined as follows:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 `ogrinfo` 和 `ogr2ogr` 以及所需的选项和参数时，你必须定义数据集。当指定 PostGIS 数据集时，你需要一个如下定义的连接字符串：
- en: '[PRE28]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: See also
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: You can find more information about the `ogrinfo` and `ogr2ogr` commands on
    the GDAL website available at [http://www.gdal.org](http://www.gdal.org).
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 GDAL 网站上找到有关 `ogrinfo` 和 `ogr2ogr` 命令的更多信息，网站地址为 [http://www.gdal.org](http://www.gdal.org)。
- en: If you need more information about the PostGIS driver, you should check its
    related documentation page available at [http://www.gdal.org/drv_pg.html](http://www.gdal.org/drv_pg.html).
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要更多关于 PostGIS 驱动的信息，你应该查看其相关文档页面，网站地址为 [http://www.gdal.org/drv_pg.html](http://www.gdal.org/drv_pg.html)。
- en: Handling batch importing and exporting of datasets
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理数据集的批量导入和导出
- en: In many GIS workflows, there is a typical scenario where subsets of a PostGIS
    table must be deployed to external users in a filesystem format (most typically,
    shapefiles or a spatialite database). Often, there is also the reverse process,
    where datasets received from different users have to be uploaded to the PostGIS
    database.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多 GIS 工作流程中，有一个典型的场景，即必须将 PostGIS 表的子集部署到外部用户在文件系统格式中（最常见的是形状文件或空间数据库）。通常，也存在反向过程，即必须将来自不同用户的接收到的数据集上传到
    PostGIS 数据库。
- en: In this recipe, we will simulate both of these data flows. You will first create
    the data flow for processing the shapefiles out of PostGIS, and then the reverse
    data flow for uploading the shapefiles.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将模拟这两种数据流。你将首先创建处理 PostGIS 中形状文件的数据流，然后是上传形状文件的反向数据流。
- en: You will do it using the power of bash scripting and the `ogr2ogr` command.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 你将使用 bash 脚本和 `ogr2ogr` 命令的强大功能来完成这项操作。
- en: Getting ready
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'If you didn''t follow all the other recipes, be sure to import the hotspots
    (`Global_24h.csv`) and the countries dataset (`countries.shp`) in PostGIS. The
    following is how to do it with `ogr2ogr` (you should import both the datasets
    in their original SRID, 4326, to make spatial operations faster):'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有遵循所有其他菜谱，请确保使用 `ogr2ogr` 导入热点 (`Global_24h.csv`) 和国家数据集 (`countries.shp`)
    到 PostGIS。以下是如何操作的示例（你应该导入这两个数据集在其原始 SRID，4326，以使空间操作更快）：
- en: 'Import in PostGIS the `Global_24h.csv` file, using the `global_24.vrt` virtual
    driver you created in a previous recipe:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用你之前菜谱中创建的 `global_24.vrt` 虚拟驱动程序将 `Global_24h.csv` 文件导入 PostGIS：
- en: '[PRE29]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Import the countries shapefile using `ogr2ogr`:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `ogr2ogr` 导入国家形状文件：
- en: '[PRE30]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'If you already imported the hotspots dataset using the 3857 SRID, you can use
    the PostGIS 2.0 method that allows the user to modify the geometry type column
    of an existing spatial table. You can update the SRID definition for the hotspots
    table in this way thanks to the support of `typmod` on geometry objects:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经使用 3857 SRID 导入了热点数据集，你可以使用 PostGIS 2.0 方法，该方法允许用户修改现有空间表的几何类型列。你可以通过在几何对象上支持
    `typmod` 的方式更新热点表的 SRID 定义：
- en: '`postgis_cookbook=# ALTER TABLE chp01.hotspots`'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '`postgis_cookbook=# ALTER TABLE chp01.hotspots`'
- en: '`ALTER COLUMN the_geom`'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '`ALTER COLUMN the_geom`'
- en: '`SET DATA TYPE geometry(Point, 4326)`'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '`SET DATA TYPE geometry(Point, 4326)`'
- en: '`USING ST_Transform(the_geom, 4326);`'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '`USING ST_Transform(the_geom, 4326);`'
- en: How to do it...
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The steps you need to follow to complete this recipe are as follows:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此菜谱所需的步骤如下：
- en: 'Check how many hotspots there are for each distinct country by using the following
    query:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下查询检查每个不同国家有多少热点：
- en: '[PRE31]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The output of the preceding command is as follows:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个命令的输出如下：
- en: '![](img/731ac673-6fc3-445c-a961-5bde1a65326d.png)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/731ac673-6fc3-445c-a961-5bde1a65326d.png)'
- en: 'Using the same query, generate a CSV file using the PostgreSQL `COPY` command
    or the `ogr2ogr` command (in the first case, make sure that the Postgre service
    user has full write permission to the output directory). If you are following
    the `COPY` approach and using Windows, be sure to replace `/tmp/hs_countries.csv`
    with a different path:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用相同的查询，使用PostgreSQL的`COPY`命令或`ogr2ogr`命令（在第一种情况下，请确保Postgre服务用户对输出目录有完全写入权限）。如果您遵循`COPY`方法并且使用Windows，请务必将`/tmp/hs_countries.csv`替换为不同的路径：
- en: '[PRE32]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'If you are using Windows, go to step 5\. With Linux, create a bash script named
    `export_shapefiles.sh` that iterates each record (country) in the `hs_countries.csv`
    file and generates a shapefile with the corresponding hotspots exported from PostGIS
    for that country:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您使用的是Windows，请转到步骤5。如果您使用Linux，请创建一个名为`export_shapefiles.sh`的bash脚本，该脚本遍历`hs_countries.csv`文件中的每个记录（国家），并为该国从PostGIS导出的热点生成相应的shapefile：
- en: '[PRE33]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Give execution permissions to the `bash` file, and then run it after creating
    an output directory (`out_shapefiles`) for the shapefiles that will be generated
    by the script. Then, go to *step 7*:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给`bash`文件执行权限，然后在创建输出目录（`out_shapefiles`）后运行它，该目录将用于存储脚本生成的shapefile。然后，转到*步骤7*：
- en: '[PRE34]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'If you get the output `ERROR: function getsrid(geometry) does not exist LINE
    1: SELECT getsrid("the_geom") FROM (SELECT,...`, you will need to load legacy
    support in PostGIS, for example, in a Debian Linux box:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '如果您得到输出`ERROR: function getsrid(geometry) does not exist LINE 1: SELECT getsrid("the_geom")
    FROM (SELECT,...`，您需要在PostGIS中加载旧版支持，例如在Debian Linux盒子上：'
- en: '`psql -d postgis_cookbook -f /usr/share/postgresql/9.1/contrib/postgis-2.1/legacy.sql`'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '`psql -d postgis_cookbook -f /usr/share/postgresql/9.1/contrib/postgis-2.1/legacy.sql`'
- en: 'If you are using Windows, create a batch file named `export_shapefiles.bat` that
    iterates each record (country) in the `hs_countries.csv` file and generates a
    shapefile with the corresponding hotspots exported from PostGIS for that country:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您使用的是Windows，请创建一个名为`export_shapefiles.bat`的批处理文件，该文件遍历`hs_countries.csv`文件中的每个记录（国家），并为该国从PostGIS导出的热点生成相应的shapefile：
- en: '[PRE35]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Run the batch file after creating an output directory (`out_shapefiles`) for
    the shapefiles that will be generated by the script:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在为脚本生成的shapefile创建输出目录（`out_shapefiles`）后运行批处理文件：
- en: '[PRE36]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Try to open a couple of these output shapefiles in your favorite desktop GIS.
    The following screenshot shows you how they look in QGIS:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试在您最喜欢的桌面GIS中打开这些输出shapefile中的一两个。以下截图显示了它们在QGIS中的样子：
- en: '![](img/db5464c0-eea0-4c62-aa2e-b73c1e0cb442.png)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/db5464c0-eea0-4c62-aa2e-b73c1e0cb442.png)'
- en: 'Now, you will do the return trip, uploading all of the generated shapefiles
    to PostGIS. You will upload all of the features for each shapefile and include
    the upload datetime and the original shapefile name. First, create the following
    PostgreSQL table, where you will upload the shapefiles:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您将进行返回之旅，将所有生成的shapefile上传到PostGIS。您将上传每个shapefile的所有要素，包括上传日期时间和原始shapefile名称。首先，创建以下PostgreSQL表，您将上传shapefile：
- en: '[PRE37]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'If you are using Windows, go to step 12\. With OS X, you will need to install
    `findutils` with `homebrew` and run the script for Linux:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您使用的是Windows，请转到步骤12。如果您使用OS X，您需要使用`homebrew`安装`findutils`并运行Linux脚本：
- en: '[PRE38]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'With Linux, create another bash script named `import_shapefiles.sh`:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Linux创建另一个名为`import_shapefiles.sh`的bash脚本：
- en: '[PRE39]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Assign the execution permission to the bash script and execute it:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为bash脚本分配执行权限并执行它：
- en: '[PRE40]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Now, go to *step 14*.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，转到*步骤14*。
- en: 'If you are using Windows, create a batch script named `import_shapefiles.bat`:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您使用的是Windows，请创建一个名为`import_shapefiles.bat`的批处理脚本：
- en: '[PRE41]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Run the batch script:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行批处理脚本：
- en: '[PRE42]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Check some of the records that have been uploaded to the PostGIS table by using
    SQL:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用SQL检查已上传到PostGIS表的一些记录：
- en: '[PRE43]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The output of the preceding command is as follows:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个命令的输出如下：
- en: '![](img/9e2ff933-31c5-4df2-9504-b0cf1a1bd116.png)'
  id: totrans-252
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/9e2ff933-31c5-4df2-9504-b0cf1a1bd116.png)'
- en: 'Check the same query with `ogrinfo` as well:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`ogrinfo`检查相同的查询：
- en: '[PRE44]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The output of the preceding command is as follows:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个命令的输出如下：
- en: '![](img/b40ad790-bac2-4b8a-b6b7-fa5c1b72fde0.png)'
  id: totrans-256
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b40ad790-bac2-4b8a-b6b7-fa5c1b72fde0.png)'
- en: How it works...
  id: totrans-257
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: You could implement both the data flows (processing shapefiles out from PostGIS,
    and then into it again) thanks to the power of the `ogr2ogr` GDAL command.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以利用`ogr2ogr` GDAL命令的强大功能实现数据流（从PostGIS处理shapefile，然后再次进入它）。
- en: You have been using this command in different forms and with the most important
    input parameters in other recipes, so you should now have a good understanding
    of it.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经在其他菜谱中以不同形式和最重要的输入参数使用过此命令，因此您现在应该很好地理解它。
- en: 'Here, it is worth mentioning the way OGR lets you export the information related
    to the current datetime and the original shapefile name to the PostGIS table.
    Inside the `import_shapefiles.sh` (Linux, OS X) or the `import_shapefiles.bat`
    (Windows) scripts, the core is the line with the `ogr2ogr` command (here is the
    Linux version):'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，值得提及的是OGR允许您将有关当前日期时间和原始shapefile名称的信息导出到PostGIS表中的方式。在`import_shapefiles.sh`（Linux，OS
    X）或`import_shapefiles.bat`（Windows）脚本中，核心是带有`ogr2ogr`命令的行（以下是Linux版本）：
- en: '[PRE45]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Thanks to the `-sql` option, you can specify the two additional fields, getting
    their values from the system date command and the filename that is being iterated
    from the script.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`-sql`选项，您可以从系统日期命令和脚本中迭代的文件名中获取两个附加字段的值。
- en: Exporting data to a shapefile with the pgsql2shp PostGIS command
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用PostGIS的pgsql2shp命令将数据导出为shapefile
- en: In this recipe, you will export a PostGIS table to a shapefile using the `pgsql2shp`
    command that is shipped with any PostGIS distribution.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，您将使用随任何PostGIS发行版一起提供的`pgsql2shp`命令将PostGIS表导出为shapefile。
- en: How to do it...
  id: totrans-265
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The steps you need to follow to complete this recipe are as follows:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要遵循以下步骤来完成此菜谱：
- en: 'In case you still haven''t done it, export the countries shapefile to PostGIS
    using the `ogr2ogr` or the `shp2pgsql` commands. The `shp2pgsql` approach is as
    shown:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您还没有这样做，请使用`ogr2ogr`或`shp2pgsql`命令将国家shapefile导出到PostGIS。`shp2pgsql`的方法如下：
- en: '[PRE46]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'The `ogr2ogr` approach is as follows:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ogr2ogr`的方法如下：'
- en: '[PRE47]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Now, query PostGIS in order to get a list of countries grouped by the `subregion`
    field. For this purpose, you will merge the geometries for features having the
    same `subregion` code, using the `ST_Union` PostGIS geometric processing function:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，查询PostGIS以获取按`subregion`字段分组的国家列表。为此，您将使用`ST_Union` PostGIS几何处理函数合并具有相同`subregion`代码的要素的几何形状：
- en: '[PRE48]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Execute the `pgsql2shp` PostGIS command to export into a shapefile the result
    of the given query:'
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行`pgsql2shp` PostGIS命令以将给定查询的结果导出到shapefile。
- en: '[PRE49]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Open the shapefile and inspect it with your favorite desktop GIS. This is how
    it looks in QGIS after applying a graduated classification symbology style based
    on the aggregated population for each subregion:'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开shapefile，使用您最喜欢的桌面GIS进行检验。这是在QGIS中应用基于每个子区域聚合人口的分级分类符号样式后的样子：
- en: '![](img/5411f57b-7013-4d2b-b24a-a46cc7c2ca74.png)'
  id: totrans-276
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5411f57b-7013-4d2b-b24a-a46cc7c2ca74.png)'
- en: Visualization in QGIS of the classification of subregions based on population
    and information of the selected feature
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 在QGIS中根据人口和所选特征的信息对子区域进行分类的可视化
- en: How it works...
  id: totrans-278
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: You have exported the results of a spatial query to a shapefile using the `pgsql2shp`
    PostGIS command. The spatial query you have used aggregates fields using the `SUM`
    PostgreSQL function for summing country populations in the same subregion, and
    the `ST_Union` PostGIS function to aggregate the corresponding geometries as a
    geometric union.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 您已使用`pgsql2shp` PostGIS命令将空间查询的结果导出为shapefile。您所使用的空间查询使用`SUM` PostgreSQL函数对同一子区域的国家人口进行聚合，并使用`ST_Union`
    PostGIS函数将相应的几何形状聚合为几何并集。
- en: The `pgsql2shp` command allows you to export PostGIS tables and queries to shapefiles.
    The options you need to specify are quite similar to the ones you use to connect
    to PostgreSQL with `psql`. To get a full list of these options, just type `pgsql2shp`
    in your command prompt and read the output.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '`pgsql2shp`命令允许您将PostGIS表和查询导出为shapefile。您需要指定的选项与您使用`psql`连接到PostgreSQL时使用的选项相当。要获取这些选项的完整列表，只需在命令提示符中键入`pgsql2shp`并阅读输出。'
- en: Importing OpenStreetMap data with the osm2pgsql command
  id: totrans-281
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用osm2pgsql命令导入OpenStreetMap数据
- en: In this recipe, you will import **OpenStreetMap** (**OSM**) data to PostGIS
    using the `osm2pgsql` command.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，您将使用`osm2pgsql`命令将**OpenStreetMap**（**OSM**）数据导入到PostGIS。
- en: You will first download a sample dataset from the OSM website, and then you
    will import it using the `osm2pgsql` command.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 您首先需要从OSM网站下载一个样本数据集，然后使用`osm2pgsql`命令将其导入。
- en: You will add the imported layers in GIS desktop software and generate a view
    to get subdatasets, using the `hstore` PostgreSQL additional module to extract
    features based on their tags.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在GIS桌面软件中添加导入的层，并生成一个视图以获取子数据集，使用`hstore` PostgreSQL附加模块根据它们的标签提取特征。
- en: Getting ready
  id: totrans-285
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We need the following in place before we can proceed with the steps required
    for the recipe:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们进行下一步骤之前，我们需要以下内容：
- en: 'Install `osm2pgsql`. If you are using Windows, follow the instructions available
    at [http://wiki.openstreetmap.org/wiki/Osm2pgsql](http://wiki.openstreetmap.org/wiki/Osm2pgsql).
    If you are on Linux, you can install it from the preceding website or from packages.
    For example, for Debian distributions, use the following:'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装`osm2pgsql`。如果您使用Windows，请遵循[http://wiki.openstreetmap.org/wiki/Osm2pgsql](http://wiki.openstreetmap.org/wiki/Osm2pgsql)中提供的说明。如果您在Linux上，可以从先前的网站或从软件包中安装它。例如，对于Debian发行版，使用以下命令：
- en: '[PRE50]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: For more information about the installation of the `osm2pgsql` command for other
    Linux distributions, macOS X, and MS Windows, please refer to the `osm2pgsql`
    web page available at [http://wiki.openstreetmap.org/wiki/Osm2pgsql](http://wiki.openstreetmap.org/wiki/Osm2pgsql).
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关于在其他Linux发行版、macOS X和MS Windows上安装`osm2pgsql`命令的更多信息，请参阅[http://wiki.openstreetmap.org/wiki/Osm2pgsql](http://wiki.openstreetmap.org/wiki/Osm2pgsql)上的`osm2pgsql`网页。
- en: 'It''s most likely that you will need to compile `osm2pgsql` yourself as the
    one that is installed with your package manager could already be obsolete. In
    my Linux Mint 12 box, this was the case (it was `osm2pgsql` v0.75), so I have
    installed Version 0.80 by following the instructions on the `osm2pgsql` web page.
    You can check the installed version just by typing the following command:'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 很可能您需要自己编译`osm2pgsql`，因为与您的包管理器一起安装的版本可能已经过时。在我的Linux Mint 12系统中，情况就是这样（它是`osm2pgsql`
    v0.75），所以我按照`osm2pgsql`网页上的说明安装了版本0.80。您可以通过输入以下命令来检查已安装的版本：
- en: '[PRE51]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'We will create a different database only for this recipe, as we will use this
    OSM database in other chapters. For this purpose, create a new database named
    `rome` and assign privileges to your user:'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将只为这个食谱创建一个不同的数据库，因为我们将在其他章节中使用这个OSM数据库。为此，创建一个名为`rome`的新数据库并分配给您的用户权限：
- en: '[PRE52]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: You will not create a different schema in this new database, though, as the
    `osm2pgsql` command can only import OSM data in the public schema at the time
    of writing.
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尽管如此，您不会在这个新数据库中创建不同的模式，因为截至写作时，`osm2pgsql`命令只能导入公共模式中的OSM数据。
- en: 'Be sure that your PostgreSQL installation supports `hstore` (besides `PostGIS`).
    If not, download and install it; for example, in Debian-based Linux distributions,
    you will need to install the `postgresql-contrib-9.6` package. Then, add `hstore`
    support to the `rome` database using the `CREATE EXTENSION` syntax:'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您的PostgreSQL安装支持`hstore`（除了`PostGIS`）。如果不支持，请下载并安装它；例如，在基于Debian的Linux发行版中，您需要安装`postgresql-contrib-9.6`包。然后，使用`CREATE
    EXTENSION`语法将`hstore`支持添加到`rome`数据库中：
- en: '[PRE53]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: How to do it...
  id: totrans-297
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The steps you need to follow to complete this recipe are as follows:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此食谱所需的步骤如下：
- en: Download an `.osm` file from the OpenStreetMap website ([https://www.openstreetmap.org/#map=5/21.843/82.795](https://www.openstreetmap.org/#map=5/21.843/82.795)).
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从OpenStreetMap网站下载一个`.osm`文件（[https://www.openstreetmap.org/#map=5/21.843/82.795](https://www.openstreetmap.org/#map=5/21.843/82.795)）。
- en: Go to the OpenStreetMap website.
  id: totrans-300
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往OpenStreetMap网站。
- en: Select the area of interest for which you want to export data. You should not
    select a large area, as the live export from the website is limited to 50,000
    nodes.
  id: totrans-301
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您想要导出数据的感兴趣区域。您不应该选择一个很大的区域，因为网站上的实时导出限制为50,000个节点。
- en: If you want to export larger areas, you should consider downloading the whole
    database, built daily at `planet.osm` (250 GB uncompressed and 16 GB compressed).
    At `planet.osm`, you may also download extracts that contain OpenstreetMap data
    for individual continents, countries, and metropolitan areas.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要导出更大的区域，您应该考虑下载整个数据库，该数据库每天在`planet.osm`上构建（未压缩250 GB，压缩16 GB）。在`planet.osm`上，您还可以下载包含OpenstreetMap数据单个大陆、国家和大都市区的提取文件。
- en: 'If you want to get the same dataset used for this recipe, just copy and paste
    the following URL in your browser: [http://www.openstreetmap.org/export?lat=41.88745&lon=12.4899&zoom=15&layers=M](http://www.openstreetmap.org/export?lat=41.88745&lon=12.4899&zoom=15&layers=M);
    or, get it from the book datasets (`chp01/map.osm` file).'
  id: totrans-303
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你想获取用于此菜谱的相同数据集，只需将以下 URL 复制并粘贴到你的浏览器中：[http://www.openstreetmap.org/export?lat=41.88745&lon=12.4899&zoom=15&layers=M](http://www.openstreetmap.org/export?lat=41.88745&lon=12.4899&zoom=15&layers=M)；或者，从书籍数据集中获取它（`chp01/map.osm`
    文件）。
- en: Click on the Export link.
  id: totrans-304
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击导出链接。
- en: Select OpenStreetMap XML Data as the output format.
  id: totrans-305
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 OpenStreetMap XML 数据作为输出格式。
- en: Download the `map.osm` file to your working directory.
  id: totrans-306
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `map.osm` 文件下载到你的工作目录。
- en: 'Run `osm2pgsql` to import the OSM data in the PostGIS database. Use the `-hstore`
    option, as you wish to add tags with an additional `hstore` (key/value) column
    in the PostgreSQL tables:'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `osm2pgsql` 将 OSM 数据导入到 PostGIS 数据库。使用 `-hstore` 选项，因为你希望在 PostgreSQL 表中添加带有额外
    `hstore`（键/值）列的标签：
- en: '[PRE54]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'At this point, you should have the following geometry tables in your database:'
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 到目前为止，你应该在你的数据库中有以下几何表：
- en: '[PRE55]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'The output of the preceding command is shown here:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令的输出如下所示：
- en: '![](img/88b339fc-20b5-4e8c-91c3-28d0ef61b2d6.png)'
  id: totrans-312
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/88b339fc-20b5-4e8c-91c3-28d0ef61b2d6.png)'
- en: Note that the `osm2pgsql` command imports everything in the public schema. If
    you did not deal differently with the command's input parameter, your data will
    be imported in the Mercator Projection (`3857`).
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意，`osm2pgsql` 命令导入公共模式下的所有内容。如果你没有对命令的输入参数进行不同的处理，你的数据将导入到墨卡托投影（`3857`）。
- en: 'Open the PostGIS tables and inspect them with your favorite desktop GIS. The
    following screenshot shows how it looks in QGIS. All the different thematic features
    are mixed at this time, so it looks a bit confusing:'
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用你喜欢的桌面 GIS 打开 PostGIS 表并检查它们。以下截图显示了在 QGIS 中的样子。此时，所有不同的主题特征都混合在一起，所以看起来有点混乱：
- en: '![](img/8364e6ee-ac8a-42f1-aa14-e2b05ab73faa.png)'
  id: totrans-315
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8364e6ee-ac8a-42f1-aa14-e2b05ab73faa.png)'
- en: 'Generate a PostGIS view that extracts all the polygons tagged with `trees`
    as `land cover`. For this purpose, create the following view:'
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成一个 PostGIS 视图，提取所有标记为 `trees` 作为 `land cover` 的多边形。为此，创建以下视图：
- en: '[PRE56]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Open the view with a desktop GIS that supports PostGIS views, such as QGIS,
    and add your `rome_trees` view. The previous screenshot shows you how it looks.
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用支持 PostGIS 视图的桌面 GIS（如 QGIS），打开视图并添加你的 `rome_trees` 视图。上一张截图显示了它的样子。
- en: How it works...
  id: totrans-319
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: OpenStreetMap is a popular collaborative project for creating a free map of
    the world. Every user participating in the project can edit data; at the same
    time, it is possible for everyone to download those datasets in `.osm` datafiles
    (an XML format) under the terms of the **Open Data Commons Open Database License**
    (**ODbL**) at the time of writing.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: OpenStreetMap 是一个流行的协作项目，用于创建世界免费地图。每个参与项目的用户都可以编辑数据；同时，在撰写本文时，每个人都可以根据 **Open
    Data Commons Open Database License**（**ODbL**）条款下载那些数据集（`.osm` 数据文件，XML 格式）。
- en: The `osm2pgsql` command is a command-line tool that can import `.osm` datafiles
    (eventually zipped) to the PostGIS database. To use the command, it is enough
    to give the PostgreSQL connection parameters and the `.osm` file to import.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '`osm2pgsql` 命令是一个命令行工具，可以将 `.osm` 数据文件（最终可能已压缩）导入到 PostGIS 数据库。要使用此命令，只需提供
    PostgreSQL 连接参数和要导入的 `.osm` 文件即可。'
- en: It is possible to import only features that have certain tags in the spatial
    database, as defined in the `default.style` configuration file. You can decide
    to comment in or out the OSM tagged features that you would like to import, or
    not, from this file. The command by default exports all the nodes and ways to
    linestring, point, and geometry PostGIS geometries.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 可以只导入空间数据库中具有特定标签的特征，如 `default.style` 配置文件中定义的。你可以决定是否从该文件中导入或注释掉你想要导入的 OSM
    标签特征。默认情况下，命令导出所有节点和路径到线字符串、点和几何 PostGIS 几何体。
- en: 'It is highly recommended to enable `hstore` support in the PostgreSQL database
    and use the `-hstore` option of `osm2pgsql` when importing the data. Having enabled
    this support, the OSM tags for each feature will be stored in a `hstore` PostgreSQL
    data type, which is optimized for storing (and retrieving) sets of key/values
    pairs in a single field. This way, it will be possible to query the database as
    follows:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 强烈建议在 PostgreSQL 数据库中启用 `hstore` 支持，并在导入数据时使用 `osm2pgsql` 的 `-hstore` 选项。启用此支持后，每个特征的
    OSM 标签将存储在 `hstore` PostgreSQL 数据类型中，该类型优化了单个字段中存储（和检索）键/值对集合。这样，就可以按照以下方式查询数据库：
- en: '[PRE57]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Importing raster data with the raster2pgsql PostGIS command
  id: totrans-325
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 raster2pgsql PostGIS 命令导入栅格数据
- en: PostGIS 2.0 now has full support for raster datasets, and it is possible to
    import raster datasets using the `raster2pgsql` command.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: PostGIS 2.0 现在完全支持栅格数据集，可以使用 `raster2pgsql` 命令导入栅格数据集。
- en: In this recipe, you will import a raster file to PostGIS using the `raster2pgsql`
    command. This command, included in any PostGIS distribution from version 2.0 onward,
    is able to generate an SQL dump to be loaded in PostGIS for any GDAL raster-supported
    format (in the same fashion that the `shp2pgsql`  command does for shapefiles).
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 在本菜谱中，您将使用 `raster2pgsql` 命令将栅格文件导入到 PostGIS。从 2.0 版本开始，该命令包含在任何 PostGIS 发行版中，能够生成
    SQL 转储文件，以便在 PostGIS 中加载任何 GDAL 支持的栅格格式（与 `shp2pgsql` 命令为 shapefile 执行的操作类似）。
- en: After loading the raster to PostGIS, you will inspect it both with SQL commands
    (analyzing the raster metadata information contained in the database), and with
    the `gdalinfo` command-line utility (to understand the way the input `raster2pgsql`
    parameters have been reflected in the PostGIS import process).
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 将栅格加载到 PostGIS 后，您将使用 SQL 命令（分析数据库中包含的栅格元数据信息）和 `gdalinfo` 命令行工具（了解输入 `raster2pgsql`
    参数如何在 PostGIS 导入过程中反映）来检查它。
- en: You will finally open the raster in a desktop GIS and try a basic spatial query,
    mixing vector and raster tables.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您将在桌面 GIS 中打开栅格，并尝试进行基本的空间查询，混合矢量表和栅格表。
- en: Getting ready
  id: totrans-330
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We need the following in place before we can proceed with the steps required
    for the recipe:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续进行菜谱所需的步骤之前，我们需要以下内容：
- en: From the worldclim website, download the current raster data ([http://www.worldclim.org/current](http://www.worldclim.org/current))
    for min and max temperatures (only the raster for max temperatures will be used
    for this recipe). Alternatively, use the ones provided in the book datasets (`data/chp01`).
    Each of the two archives (`data/tmax_10m_bil.zip` and `data/tmin_10m_bil.zip`)
    contain 12 rasters in the BIL format, one for each month. You can look for more
    information at [http://www.worldclim.org/formats](http://www.worldclim.org/formats).
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 worldclim 网站下载当前的温度栅格数据（[http://www.worldclim.org/current](http://www.worldclim.org/current)），包括最小和最大温度（本菜谱中仅使用最大温度的栅格）。或者，使用书中提供的数据集（`data/chp01`）。每个两个存档（`data/tmax_10m_bil.zip`
    和 `data/tmin_10m_bil.zip`）包含 12 个栅格，每个栅格对应一个月。更多详细信息请参阅 [http://www.worldclim.org/formats](http://www.worldclim.org/formats)。
- en: Extract the two archives to a directory named `worldclim` in your working directory.
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将两个存档解压到您工作目录中名为 `worldclim` 的目录中。
- en: Rename each raster dataset to a name format with two digits for the month, for
    example, `tmax1.bil` and `tmax1.hdr` will become `tmax01.bil` and `tmax01.hdr`.
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将每个栅格数据集重命名为带有两位数字的月份格式，例如，`tmax1.bil` 和 `tmax1.hdr` 将变为 `tmax01.bil` 和 `tmax01.hdr`。
- en: 'If you still haven''t loaded the countries shapefile to PostGIS from a previous
    recipe, do it using the `ogr2ogr` or `shp2pgsql` commands. The following is the
    `shp2pgsql` syntax:'
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您还没有从之前的菜谱中加载国家形状文件到 PostGIS，请使用 `ogr2ogr` 或 `shp2pgsql` 命令进行加载。以下为 `shp2pgsql`
    的语法：
- en: '[PRE58]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: How to do it...
  id: totrans-337
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The steps you need to follow to complete this recipe are as follows:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本菜谱所需的步骤如下：
- en: 'Get information about one of the rasters using the `gdalinfo` command-line
    tool as follows:'
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令使用 `gdalinfo` 命令行工具获取一个栅格的信息：
- en: '[PRE59]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: The `gdalinfo` command provides a lot of useful information about the raster,
    for example, the GDAL driver being used to read it, the files composing it (in
    this case, two files with `.bil` and `.hdr` extensions), the size in pixels (2160
    x 900), the spatial reference (WGS 84), the geographic extents, the origin, and
    the pixel size (needed to correctly georeference the raster), and for each raster
    band (just one in the case of this file), some statistical information like the
    min and max values (-153.000 and 441.000, corresponding to a temperature of -15.3
    °C and 44.1 °C. Values are expressed as temperature * 10 in °C, according to the
    documentation available at [http://worldclim.org/](http://worldclim.org/)).
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`gdalinfo` 命令提供了关于栅格的大量有用信息，例如，用于读取它的 GDAL 驱动程序，组成它的文件（在这种情况下，两个具有 `.bil` 和
    `.hdr` 扩展名的文件），像素大小（2160 x 900），空间参考（WGS 84），地理范围，起点，像素大小（用于正确地理参照栅格），以及对于每个栅格波段（在本文件中只有一个），一些统计信息，如最小值和最大值（-153.000
    和 441.000，对应于 -15.3 °C 和 44.1 °C 的温度。值以温度 * 10 在 °C 表示，根据 [http://worldclim.org/](http://worldclim.org/)
    上的文档）。'
- en: 'Use the `raster2pgsql` file to generate the `.sql` dump file and then import
    the raster in PostGIS:'
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `raster2pgsql` 文件生成 `.sql` 导出文件，然后导入 PostGIS 中的栅格数据：
- en: '[PRE60]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'If you are in Linux, you may pipe the two commands in a unique line:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 Linux 系统，你可以将这两个命令放在一行中执行：
- en: '[PRE61]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Check how the new table has been created in PostGIS:'
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查新表在 PostGIS 中的创建情况：
- en: '[PRE62]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Check if a record for this PostGIS raster appears in the `raster_columns` metadata
    view, and note the main metadata information that has been stored there, such
    as schema, name, raster column name (default is raster), SRID, scale (for *x*
    and *y*), block size (for *x* and *y*), band numbers (1), band types (`16BUI`),
    zero data values (0), and `db` storage type (`out_db` is `false`, as we have stored
    the raster bytes in the database; you could have used the `-R` option to register
    the raster as an out-of-db filesystem):'
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查是否在 `raster_columns` 元数据视图中出现此 PostGIS 栅格的记录，并注意存储在此处的主要元数据信息，例如模式、名称、栅格列名称（默认为
    raster）、SRID、比例（对于 *x* 和 *y*）、块大小（对于 *x* 和 *y*）、波段数（1）、波段类型（`16BUI`）、零数据值（0）和
    `db` 存储类型（`out_db` 为 `false`，因为我们已将栅格字节存储在数据库中；你可以使用 `-R` 选项将栅格注册为数据库外部的文件系统）：
- en: '[PRE63]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'If you have followed this recipe from the beginning, you should now have 198
    rows in the raster table, with each row representing one raster block size (100
    x 100 pixels blocks, as indicated with the `-traster2pgsql` option):'
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你从开始就遵循了这个菜谱，你现在应该在栅格表中看到 198 行，每行代表一个栅格块大小（100 x 100 像素块，如 `-traster2pgsql`
    选项所示）：
- en: '[PRE64]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'The output of the preceding command is as follows:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个命令的输出如下：
- en: '[PRE65]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Try to open the raster table with `gdalinfo`. You should see the same information
    you got from `gdalinfo` when you were analyzing the original BIL file. The only
    difference is the block size, as you moved to a smaller one (100 x 100) from the
    original (2160 x 900). That''s why the original file has been split into several
    datasets (198):'
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试使用 `gdalinfo` 打开栅格表。你应该看到与之前分析原始 BIL 文件时相同的 `gdalinfo` 信息。唯一的区别是块大小，因为你从原始的（2160
    x 900）移动到了更小的（100 x 100）。这就是为什么原始文件被分割成多个数据集（198 个）的原因：
- en: '[PRE66]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'The `gdalinfo` command reads the PostGIS raster as being composed of multiple
    raster subdatasets (198, one for each row in the table). You still have the possibility
    of reading the whole table as a single raster, using the `mode=2` option in the
    PostGIS raster connection string (`mode=1` is the default). Check the difference:'
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`gdalinfo` 命令读取 PostGIS 栅格数据，显示由多个栅格子数据集组成（198 个，每个对应表中的一行）。你仍然可以使用 `mode=2`
    选项在 PostGIS 栅格连接字符串中读取整个表作为一个单独的栅格（默认的 `mode=1`）。检查差异：'
- en: '[PRE67]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'You can easily obtain a visual representation of those blocks by converting
    the extent of all the 198 rows in the `tmax01` table (each representing a raster
    block) to a shapefile using `ogr2ogr`:'
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以通过将 `tmax01` 表中所有 198 行的范围（每行代表一个栅格块）转换为形状文件来轻松地获得这些块的视觉表示，使用 `ogr2ogr`：
- en: '[PRE68]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Now, try to open the raster table with QGIS (at the time of writing, one of
    the few desktop GIS tools that has support for it) together with the blocks shapefile
    generated in the previous steps (`temp_grid.shp`). You should see something like
    the following screenshot:'
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，尝试使用 QGIS（在撰写本文时，是少数几个支持此功能的桌面 GIS 工具之一）打开栅格表，同时使用之前步骤中生成的块形状文件（`temp_grid.shp`）。你应该会看到以下截图类似的内容：
- en: '![](img/d3eda5b4-4270-4915-b0e3-5d8b345eefd3.png)'
  id: totrans-361
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d3eda5b4-4270-4915-b0e3-5d8b345eefd3.png)'
- en: If you are using QGIS 2.6 or higher, you can see the layer in the DB Manager
    under the Database menu and drag it to the Layers panel.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 QGIS 2.6 或更高版本，你可以在数据库菜单下的 DB 管理器中看到图层，并将其拖到图层面板中。
- en: 'As the last bonus step, you will select the 10 countries with the lowest average
    max temperature in January (using the centroid of the polygon representing the
    country):'
  id: totrans-363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为最后一个奖励步骤，你将选择 1 月平均最高气温最低的 10 个国家（使用代表国家的多边形质心）：
- en: '[PRE69]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'The output is as follows:'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '**![](img/aff94286-3fbe-4feb-b22a-d5461f4da345.png)**'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: '**![图片](img/aff94286-3fbe-4feb-b22a-d5461f4da345.png)**'
- en: How it works...
  id: totrans-367
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The `raster2pgsql` command is able to load any raster formats supported by
    GDAL in PostGIS. You can have a format list supported by your GDAL installation
    by typing the following command:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: '`raster2pgsql` 命令能够加载 GDAL 在 PostGIS 中支持的任何栅格格式。你可以通过输入以下命令来获取你 GDAL 安装支持的格式列表：'
- en: '[PRE70]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'In this recipe, you have been importing one raster file using some of the most
    common `raster2pgsql` options:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，你已经使用了一些最常用的 `raster2pgsql` 选项导入了一个栅格文件：
- en: '[PRE71]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: The `-I` option creates a GIST spatial index for the raster column. The `-C`
    option will create the standard set of constraints after the rasters have been
    loaded. The `-F` option will add a column with the filename of the raster that
    has been loaded. This is useful when you are appending many raster files to the
    same PostGIS raster table. The `-s` option sets the raster's SRID.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: '`-I` 选项为栅格列创建一个 GIST 空间索引。`-C` 选项将在栅格加载后创建标准约束集。`-F` 选项将为已加载的栅格添加一个包含文件名的列。当您将许多栅格文件附加到同一个
    PostGIS 栅格表时，这很有用。`-s` 选项设置栅格的 SRID。'
- en: If you decide to include the `-t` option, then you will cut the original raster
    into tiles, each inserted as a single row in the raster table. In this case, you
    decided to cut the raster into 100 x 100 tiles, resulting in 198 table rows in
    the raster table.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您决定包含 `-t` 选项，那么您将把原始栅格切割成瓦片，每个瓦片作为一个单独的行插入到栅格表中。在这种情况下，您决定将栅格切割成 100 x 100
    的瓦片，结果在栅格表中产生 198 行。
- en: Another important option is `-R`, which will register the raster as `out-of-db`;
    in such a case, only the metadata will be inserted in the database, while the
    raster will be out of the database.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要的选项是 `-R`，它将栅格注册为 `out-of-db`；在这种情况下，只有元数据将被插入到数据库中，而栅格将不在数据库中。
- en: The raster table contains an identifier for each row, the raster itself (eventually
    one of its tiles, if using the `-t` option), and eventually the original filename,
    if you used the `-F` option, as in this case.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 栅格表包含每行的标识符，栅格本身（如果使用了 `-t` 选项，则可能是其瓦片之一），以及如果使用了 `-F` 选项（如本例所示），则最终包含原始文件名。
- en: You can analyze the PostGIS raster using SQL commands or the `gdalinfo` command.
    Using SQL, you can query the `raster_columns` view to get the most significant
    raster metadata (spatial reference, band number, scale, block size, and so on).
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 SQL 命令或 `gdalinfo` 命令分析 PostGIS 栅格。使用 SQL，您可以通过查询 `raster_columns` 视图来获取最重要的栅格元数据（空间参考、波段号、比例、块大小等）。
- en: 'With `gdalinfo`, you can access the same information, using a connection string
    with the following syntax:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `gdalinfo`，您可以使用以下语法格式的连接字符串访问相同的信息：
- en: '[PRE72]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: The `mode` parameter is not influential if you loaded the whole raster as a
    single block (for example, if you did not specify the `-t` option). But, as in
    the use case of this recipe, if you split it into tiles, `gdalinfo` will see each
    tile as a single subdataset with the default behavior (`mode=1`). If you want
    GDAL to consider the raster table as a unique raster dataset, you have to specify
    the mode option and explicitly set it to `2`.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您将整个栅格作为一个单独的块加载，则 `mode` 参数不会产生影响（例如，如果您没有指定 `-t` 选项）。但是，正如本菜谱的使用案例，如果您将其分割成瓦片，`gdalinfo`
    将每个瓦片视为一个单独的子数据集，具有默认行为（`mode=1`）。如果您希望 GDAL 将栅格表视为一个唯一的栅格数据集，您必须指定模式选项，并明确将其设置为
    `2`。
- en: Importing multiple rasters at a time
  id: totrans-380
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一次性导入多个栅格
- en: This recipe will guide you through the importing of multiple rasters at a time.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 此菜谱将指导您如何一次性导入多个栅格。
- en: You will first import some different single band rasters to a unique single
    band raster table using the `raster2pgsql` command.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 您将首先使用 `raster2pgsql` 命令将一些不同的单波段栅格导入一个独特的单波段栅格表。
- en: Then, you will try an alternative approach, merging the original single band
    rasters in a virtual raster, with one band for each of the original rasters, and
    then load the multiband raster to a raster table. To accomplish this, you will
    use the GDAL `gdalbuildvrt` command and then load the data to PostGIS with `raster2pgsql`.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您将尝试一种替代方法，将原始单波段栅格合并到一个虚拟栅格中，每个原始栅格一个波段，然后将多波段栅格加载到栅格表中。为此，您将使用 GDAL 的 `gdalbuildvrt`
    命令，然后使用 `raster2pgsql` 将数据加载到 PostGIS 中。
- en: Getting ready
  id: totrans-384
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Be sure to have all the original raster datasets you have been using for the
    previous recipe.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 请确保您已经拥有了之前菜谱中使用的所有原始栅格数据集。
- en: How to do it...
  id: totrans-386
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The steps you need to follow to complete this recipe are as follows:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此菜谱所需的步骤如下：
- en: 'Import all the maximum average temperature rasters in a single PostGIS raster
    table using `raster2pgsql` and then `psql` (eventually, pipe the two commands
    if you are in Linux):'
  id: totrans-388
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `raster2pgsql` 和然后 `psql`（如果是在 Linux 系统中，最终可以将这两个命令通过管道连接）将单个 PostGIS 栅格表中的所有最大平均温度栅格导入：
- en: '[PRE73]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Check how the table was created in PostGIS, querying the `raster_columns` table.
    Here we are querying only some significant fields:'
  id: totrans-390
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查在 PostGIS 中表是如何创建的，查询 `raster_columns` 表。在这里，我们只查询一些重要的字段：
- en: '[PRE74]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '![](img/50ae6b7b-52c4-4822-ac30-927ab2cfed6e.png)'
  id: totrans-392
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/50ae6b7b-52c4-4822-ac30-927ab2cfed6e.png)'
- en: 'Check some raster statistics using the `ST_MetaData` function:'
  id: totrans-393
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`ST_MetaData`函数检查一些栅格统计信息：
- en: '[PRE75]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: Note that there is different metadata for each raster record loaded in the table.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，表中每个加载的栅格记录都有不同的元数据。
- en: 'The output of the preceding command is as shown here:'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个命令的输出如下所示：
- en: '![](img/48f33502-5b6b-452d-9d58-51f4b36e8b06.png)'
  id: totrans-397
  prefs: []
  type: TYPE_IMG
  zh: '![](img/48f33502-5b6b-452d-9d58-51f4b36e8b06.png)'
- en: 'If you now query the table, you would be able to derive the month for each
    raster row only from the `original_file` column. In the table, you have imported
    198 distinct records (rasters) for each of the 12 original files (we divided them
    into 100 x 100 blocks, if you remember). Test this with the following query:'
  id: totrans-398
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你现在查询表，你将能够仅从`original_file`列中推导出每个栅格行的月份。在表中，你为12个原始文件（如果你记得的话，我们将其分成了100
    x 100个块）导入了198个不同的记录（栅格）。使用以下查询进行测试：
- en: '[PRE76]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '![](img/5acb956c-6e6b-4a79-a9cc-653fb5169c5e.png)'
  id: totrans-400
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5acb956c-6e6b-4a79-a9cc-653fb5169c5e.png)'
- en: 'With this approach, using the `filename` field, you could use the `ST_Value`
    PostGIS raster function to get the average monthly maximum temperature of a certain
    geographic zone for the whole year:'
  id: totrans-401
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用这种方法，通过`filename`字段，你可以使用`ST_Value` PostGIS栅格函数来获取整个一年中某个地理区域的平均月最高温度：
- en: '[PRE77]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'The output of the preceding command is as shown here:'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个命令的输出如下所示：
- en: '![](img/94b4e36e-a003-4565-adc4-d4cb2ece5f0c.png)'
  id: totrans-404
  prefs: []
  type: TYPE_IMG
  zh: '![](img/94b4e36e-a003-4565-adc4-d4cb2ece5f0c.png)'
- en: 'A different approach is to store each month value in a different raster band.
    The `raster2pgsql` command doesn''t let you load to different bands in an existing
    table. But, you can use GDAL by combining the `gdalbuildvrt` and the `gdal_translate`
    commands. First, use `gdalbuildvrt` to create a new virtual raster composed of
    12 bands, one for each month:'
  id: totrans-405
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 另一种方法是，将每个月的值存储在不同的栅格波段中。`raster2pgsql`命令不允许你在现有的表中加载到不同的波段。但是，你可以通过结合使用`gdalbuildvrt`和`gdal_translate`命令来使用GDAL。首先，使用`gdalbuildvrt`创建一个新的由12个波段组成的虚拟栅格，每个波段对应于一个月：
- en: '[PRE78]'
  id: totrans-406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Analyze the `tmax_2012.vrt` XML file with a text editor. It should have a virtual
    band (`VRTRasterBand`) for each physical raster pointing to it:'
  id: totrans-407
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用文本编辑器分析`tmax_2012.vrt` XML文件。它应该为指向它的每个物理栅格有一个虚拟波段（`VRTRasterBand`）：
- en: '[PRE79]'
  id: totrans-408
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Now, with `gdalinfo`, analyze this output virtual raster to check if it is
    effectively composed of 12 bands:'
  id: totrans-409
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用`gdalinfo`分析这个输出虚拟栅格，以检查它是否确实由12个波段组成：
- en: '[PRE80]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'The output of the preceding command is as follows:'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个命令的输出如下：
- en: '**![](img/7833dc04-0623-4c07-8733-72cc62391b6b.png) ...**'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: '**![](img/7833dc04-0623-4c07-8733-72cc62391b6b.png) ...**'
- en: 'Import the virtual raster composed of 12 bands, each referring to one of the
    12 original rasters, to a PostGIS raster table composed of 12 bands. For this
    purpose, you can use the `raster2pgsql` command:'
  id: totrans-413
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入由12个波段组成的虚拟栅格，每个波段对应于12个原始栅格中的一个，到一个由12个波段组成的PostGIS栅格表中。为此，你可以使用`raster2pgsql`命令：
- en: '[PRE81]'
  id: totrans-414
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'Query the `raster_columns` view to get some indicators for the imported raster.
    Note that the `num_bands` is now 12:'
  id: totrans-415
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查询`raster_columns`视图以获取导入栅格的一些指标。注意，`num_bands`现在为12：
- en: '[PRE82]'
  id: totrans-416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '![](img/9a742dc8-375c-49a0-a674-8f8b65b20cfc.png)'
  id: totrans-417
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9a742dc8-375c-49a0-a674-8f8b65b20cfc.png)'
- en: 'Now, let''s try to produce the same output as the query using the previous
    approach. This time, given the table structure, we keep the results in a single
    row:'
  id: totrans-418
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们尝试使用之前的方法产生相同的输出。这次，考虑到表结构，我们将结果保存在一行中：
- en: '[PRE83]'
  id: totrans-419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'The output of the preceding command is as follows:'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个命令的输出如下：
- en: '![](img/9f8982fc-aea5-4a99-a525-4f31322ddd8e.png)'
  id: totrans-421
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9f8982fc-aea5-4a99-a525-4f31322ddd8e.png)'
- en: How it works...
  id: totrans-422
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: You can import raster datasets in PostGIS using the `raster2pgsql` command.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`raster2pgsql`命令将栅格数据集导入PostGIS。
- en: The GDAL PostGIS raster so far does not support writing operations; therefore,
    for now, you cannot use GDAL commands such as `gdal_translate` and `gdalwarp`.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，GDAL PostGIS栅格不支持写入操作；因此，目前你不能使用`gdal_translate`和`gdalwarp`等GDAL命令。
- en: This is going to change in the near future, so you may have such an extra option
    when you are reading this chapter.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 在不久的将来，这将会发生变化，所以当你阅读这一章时，你可能会有这样一个额外的选项。
- en: 'In a scenario where you have multiple rasters representing the same variable
    at different times, as in this recipe, it makes sense to store all of the original
    rasters as a single table in PostGIS. In this recipe, we have the same variable
    (average maximum temperature) represented by a single raster for each month. You
    have seen that you could proceed in two different ways:'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 在您有多个代表同一变量在不同时间点的栅格的场景中，如本食谱所示，将所有原始栅格存储在单个 PostGIS 表中是有意义的。在这个食谱中，我们有一个相同的变量（平均最高温度），由每个月的单个栅格表示。您已经看到您可以通过两种不同的方式进行处理：
- en: Append each single raster (representing a different month) to the same PostGIS
    single band raster table and derive the information related to the month from
    the value in the filename column (added to the table using the `-F raster2pgsql`
    option).
  id: totrans-427
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将每个单独的栅格（代表不同的月份）附加到相同的 PostGIS 单波段栅格表，并从文件名列中的值（使用 `-F raster2pgsql` 选项添加到表中）中提取与月份相关的信息。
- en: Generate a multiband raster using `gdalbuildvrt` (one raster with 12 bands,
    one for each month), and import it in a single multiband PostGIS table using the
    `raster2pgsql` command.
  id: totrans-428
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `gdalbuildvrt` 生成多波段栅格（一个包含 12 个波段的单个栅格，每个波段代表一个月），然后使用 `raster2pgsql` 命令将其导入单个多波段
    PostGIS 表中。
- en: Exporting rasters with the gdal_translate and gdalwarp GDAL commands
  id: totrans-429
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 gdal_translate 和 gdalwarp GDAL 命令导出栅格
- en: In this recipe, you will see a couple of main options for exporting PostGIS
    rasters to different raster formats. They are both provided as command-line tools,
    `gdal_translate` and `gdalwarp`, by GDAL.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，您将看到将 PostGIS 栅格导出到不同栅格格式的几个主要选项。它们都由 GDAL 提供作为命令行工具，分别是 `gdal_translate`
    和 `gdalwarp`。
- en: Getting ready
  id: totrans-431
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'You need the following in place before you can proceed with the steps required
    for the recipe:'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 在您开始执行食谱所需的步骤之前，您需要以下内容：
- en: You need to have gone through the previous recipe and imported `tmax` 2012 datasets
    (12 `.bil` files) as a single multiband (12 bands) raster in PostGIS.
  id: totrans-433
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要完成前面的食谱并导入 `tmax` 2012 数据集（12 个 `.bil` 文件）作为单个多波段（12 个波段）的栅格到 PostGIS 中。
- en: 'You must have the PostGIS raster format enabled in GDAL. For this purpose,
    check the output of the following command:'
  id: totrans-434
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您必须在 GDAL 中启用 PostGIS 矢量格式。为此，检查以下命令的输出：
- en: '[PRE84]'
  id: totrans-435
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'The output of the preceding command is as follows:'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个命令的输出如下：
- en: '[PRE85]'
  id: totrans-437
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'You should have already learned how to use the GDAL PostGIS raster driver in
    the previous two recipes. You need to use a connection string composed of the
    following parameters:'
  id: totrans-438
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该已经在前两个食谱中学习了如何使用 GDAL PostGIS 矢量驱动程序。您需要使用由以下参数组成的连接字符串：
- en: '[PRE86]'
  id: totrans-439
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: Refer to the previous two recipes for more information about the preceding parameters.
  id: totrans-440
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请参考前面的两个食谱，获取有关前面参数的更多信息。
- en: How to do it...
  id: totrans-441
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The steps you need to follow to complete this recipe are as follows:'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此食谱所需的步骤如下：
- en: 'As an initial test, you will export the first six months of the `tmax` for
    2012 (the first six bands in the `tmax_2012_multi` PostGIS raster table) using
    the `gdal_translate` command:'
  id: totrans-443
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为初始测试，您将使用 `gdal_translate` 命令导出 2012 年的前六个月 `tmax`（`tmax_2012_multi` PostGIS
    矢量栅格表中的前六个波段）：
- en: '[PRE87]'
  id: totrans-444
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'As the second test, you will export all of the bands, but only for the geographic
    area containing Italy. Use the `ST_Extent` command to get the geographic extent
    of that zone:'
  id: totrans-445
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为第二次测试，您将导出所有波段，但仅限于包含意大利的地理区域。使用 `ST_Extent` 命令获取该区域的地理范围：
- en: '[PRE88]'
  id: totrans-446
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'The output of the preceding command is as follows:'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个命令的输出如下：
- en: '**![](img/c08790d8-bad4-41ee-affd-131e49a46b5e.png)**'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: '**![](img/c08790d8-bad4-41ee-affd-131e49a46b5e.png)**'
- en: 'Now use the `gdal_translate` command with the `-projwin` option to obtain the
    desired purpose:'
  id: totrans-449
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在请使用带有 `-projwin` 选项的 `gdal_translate` 命令来获得所需的目的：
- en: '[PRE89]'
  id: totrans-450
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'There is another GDAL command, `gdalwarp`, that is still a convert utility
    with reprojection and advanced warping functionalities. You can use it, for example,
    to export a PostGIS raster table, reprojecting it to a different spatial reference
    system. This will convert the PostGIS raster table to GeoTiff and reproject it
    from `EPSG:4326` to `EPSG:3857`:'
  id: totrans-451
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 另一个 GDAL 命令 `gdalwarp` 仍然是一个具有重投影和高级扭曲功能的转换工具。例如，您可以使用它导出 PostGIS 矢量表，将其重投影到不同的空间参考系统。这将把
    PostGIS 矢量表转换为 GeoTiff，并将其从 `EPSG:4326` 重投影到 `EPSG:3857`：
- en: '[PRE90]'
  id: totrans-452
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: How it works...
  id: totrans-453
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Both `gdal_translate` and `gdalwarp` can transform rasters from a PostGIS raster
    to all GDAL-supported formats. To get a complete list of the supported formats,
    you can use the `--formats` option of GDAL''s command line as follows:'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: '`gdal_translate`和`gdalwarp`都可以将PostGIS栅格转换为所有GDAL支持的格式。要获取支持格式的完整列表，您可以使用GDAL命令行的`--formats`选项，如下所示：'
- en: '[PRE91]'
  id: totrans-455
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: For both these GDAL commands, the default output format is GeoTiff; if you need
    a different format, you must use the `-of` option and assign to it one of the
    outputs produced by the previous command line.
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这两个GDAL命令，默认输出格式是GeoTiff；如果您需要不同的格式，您必须使用`-of`选项并将其分配给之前命令行产生的输出之一。
- en: In this recipe, you have tried some of the most common options for these two
    commands. As they are complex tools, you may try some more command options as
    a bonus step.
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，您已经尝试了这两个命令的一些最常见选项。由于它们是复杂的工具，您可能还可以尝试一些额外的命令选项作为额外步骤。
- en: See also
  id: totrans-458
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: 'To get a better understanding, you should check out the excellent documentation
    on the GDAL website:'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解，您应该查看GDAL网站上的优秀文档：
- en: Information about the `gdal_translate` command is available at [http://www.gdal.org/gdal_translate.html](http://www.gdal.org/gdal_translate.html)
  id: totrans-460
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于`gdal_translate`命令的信息可在[http://www.gdal.org/gdal_translate.html](http://www.gdal.org/gdal_translate.html)找到
- en: Information about the `gdalwarp` command is available at [http://www.gdal.org/gdalwarp.html](http://www.gdal.org/gdalwarp.html)
  id: totrans-461
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于`gdalwarp`命令的信息可在[http://www.gdal.org/gdalwarp.html](http://www.gdal.org/gdalwarp.html)找到
