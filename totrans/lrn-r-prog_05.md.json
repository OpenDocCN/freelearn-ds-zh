["```py\ntake_it <- function(x) {\n  if (is.atomic(x)) {\n    x[[1]]\n  } else if (is.list(x)) {\n    x$data[[x$index]]\n  } else {\n    stop(\"Not supported input type\")\n  }\n} \n\n```", "```py\ntake_it(c(1, 2, 3))\n## [1] 1\ntake_it(list(data = c(\"a\", \"b\", \"c\"), index = 3))\n## [1] \"c\" \n\n```", "```py\ntake_it(mean)\n## Error in take_it(mean): Not supported input type \n\n```", "```py\ntake_it(list(input = c(\"a\", \"b\", \"c\")))\n## NULL \n\n```", "```py\nNULL[[1]]\n## NULL\nNULL[[NULL]]\n## NULL \n\n```", "```py\ntake_it(list(data = c(\"a\", \"b\", \"c\")))\n## Error in x$data[[x$index]]: attempt to select less than one element \n\n```", "```py\nc(\"a\", \"b\", \"c\")[[NULL]]\n## Error in c(\"a\", \"b\", \"c\")[[NULL]]: attempt to select less than one element \n\n```", "```py\ntake_it(list(index = 2))\n## NULL \n\n```", "```py\ntake_it2 <- function(x) {\n  if (is.atomic(x)) {\n    x[[1]]\n  } else if (is.list(x)) {\n    if (!is.null(x$data) && is.atomic(x$data)) {\n      if (is.numeric(x$index) && length(x) == 1) {\n        x$data[[x$index]]\n      } else {\n        stop(\"Invalid index\")\n      }\n    } else {\n      stop(\"Invalid data\")\n    }\n  } else {\n    stop(\"Not supported input type\")\n  }\n} \n\n```", "```py\ntake_it2(list(data = c(\"a\", \"b\", \"c\")))\n## Error in take_it2(list(data = c(\"a\", \"b\", \"c\"))): Invalid index\ntake_it2(list(index = 2))\n## Error in take_it2(list(index = 2)): Invalid data \n\n```", "```py\nx <- c(1, 2, 3)\nclass(x)\n## [1] \"numeric\"\ntypeof(x)\n## [1] \"double\"\nstr(x)\n##  num [1:3] 1 2 3 \n\n```", "```py\nx <- 1:3\nclass(x)\n## [1] \"integer\"\ntypeof(x)\n## [1] \"integer\"\nstr(x)\n##  int [1:3] 1 2 3 \n\n```", "```py\nx <- c(\"a\", \"b\", \"c\")\nclass(x)\n## [1] \"character\"\ntypeof(x)\n## [1] \"character\"\nstr(x)\n##  chr [1:3] \"a\" \"b\" \"c\" \n\n```", "```py\nx <- list(a = c(1, 2), b = c(TRUE, FALSE))\nclass(x)\n## [1] \"list\"\ntypeof(x)\n## [1] \"list\"\nstr(x)\n## List of 2\n## $ a: num [1:2] 1 2\n##  $ b: logi [1:2] TRUE FALSE \n\n```", "```py\nx <- data.frame(a = c(1, 2), b = c(TRUE, FALSE))\nclass(x)\n## [1] \"data.frame\"\ntypeof(x)\n## [1] \"list\"\nstr(x)\n## 'data.frame': 2 obs. of 2 variables:\n## $ a: num 1 2\n##  $ b: logi  TRUE FALSE \n\n```", "```py\nvec <- c(1, 2, 3, 2, 3, 4, 3, 4, 5, 4, 5, 6)\nclass(vec)\n## [1] \"numeric\"\ntypeof(vec)\n## [1] \"double\" \n\n```", "```py\nsample_matrix <- matrix(vec, ncol = 4)\nsample_matrix\n## [,1] [,2] [,3] [,4]\n## [1,] 1 2 3 4\n## [2,] 2 3 4 5\n## [3,] 3 4 5 6\nclass(sample_matrix)\n## [1] \"matrix\"\ntypeof(sample_matrix)\n## [1] \"double\"\ndim(sample_matrix)\n## [1] 3 4\nnrow(sample_matrix)\n## [1] 3\nncol(sample_matrix)\n## [1] 4 \n\n```", "```py\nsample_array <- array(vec, dim = c(2, 3, 2))\nsample_array\n## , , 1\n##\n## [,1] [,2] [,3]\n## [1,] 1 3 3\n## [2,] 2 2 4\n##\n## , , 2\n##\n## [,1] [,2] [,3]\n## [1,] 3 5 5\n## [2,] 4 4 6\nclass(sample_array)\n## [1] \"array\"\ntypeof(sample_array)\n## [1] \"double\"\ndim(sample_array)\n## [1] 2 3 2\nnrow(sample_array)\n## [1] 2\nncol(sample_array)\n## [1] 3 \n\n```", "```py\nsample_data_frame <- data.frame(a = c(1, 2, 3), b = c(2, 3, 4))\nclass(sample_data_frame)\n## [1] \"data.frame\"\ntypeof(sample_data_frame)\n## [1] \"list\"\ndim(sample_data_frame)\n## [1] 3 2\nnrow(sample_data_frame)\n## [1] 3\nncol(sample_data_frame)\n## [1] 2 \n\n```", "```py\nsample_data <- vec\ndim(sample_data) <- c(3, 4)\nsample_data\n## [,1] [,2] [,3] [,4]\n## [1,] 1 2 3 4\n## [2,] 2 3 4 5\n## [3,] 3 4 5 6\nclass(sample_data)\n## [1] \"matrix\"\ntypeof(sample_data)\n## [1] \"double\" \n\n```", "```py\ndim(sample_data) <- c(4, 3)\nsample_data\n## [,1] [,2] [,3]\n## [1,] 1 3 5\n## [2,] 2 4 4\n## [3,] 3 3 5\n## [4,]    2    4    6 \n\n```", "```py\ndim(sample_data) <- c(3, 2, 2)\nsample_data\n## , , 1\n##\n## [,1] [,2]\n## [1,] 1 2\n## [2,] 2 3\n## [3,] 3 4\n##\n## , , 2\n##\n## [,1] [,2]\n## [1,] 3 4\n## [2,] 4 5\n## [3,] 5 6\nclass(sample_data)\n## [1] \"array\" \n\n```", "```py\ndim(sample_data) <- c(2, 3, 4)\n## Error in dim(sample_data) <- c(2, 3, 4): dims [product 24] do not match the length of object [12] \n\n```", "```py\nsample_data_frame\n## a b\n## 1 1 2\n## 2 2 3\n## 3 3 4 \n\n```", "```py\nfor (i in 1:nrow(sample_data_frame)) {\n  # sample text:\n  # row #1, a: 1, b: 2\n  cat(\"row #\", i, \", \",\n    \"a: \", sample_data_frame[i, \"a\"],\n    \", b: \", sample_data_frame[i, \"b\"],\n    \"\\n\", sep = \"\")\n}\n## row #1, a: 1, b: 2\n## row #2, a: 2, b: 3\n## row #3, a: 3, b: 4 \n\n```", "```py\ntest_direction <- function(x, y, z) {\n  if (x < y & y < z) 1\n  else if (x > y & y > z) -1\n  else 0\n} \n\n```", "```py\ntest_direction(1, 2, 3)\n## [1] 1 \n\n```", "```py\ntest_direction(c(1, 2), c(2, 3), c(3, 4))\n## Warning in if (x < y & y < z) 1 else if (x > y & y > z)\n## -1 else 0: the condition has length > 1 and only the first\n## element will be used\n## [1] 1 \n\n```", "```py\ntest_direction2 <- function(x, y, z) {\n  if (x < y && y < z) 1\n  else if (x > y && y > z) -1\n  else 0\n} \n\n```", "```py\ntest_direction2(1, 2, 3)\n## [1] 1 \n\n```", "```py\ntest_direction2(c(1, 2), c(2, 3), c(3, 4))\n## [1] 1 \n\n```", "```py\nx <- c(-2, -3, 2, 3, 1, 0, 0, 1, 2)\nany(x > 1)\n## [1] TRUE\nall(x <= 1)\n## [1] FALSE \n\n```", "```py\ntest_all_direction <- function(x, y, z) {\n  if (all(x < y & y < z)) 1\n  else if (all(x > y & y > z)) -1\n  else 0\n} \n\n```", "```py\ntest_all_direction(1, 2, 3)\n## [1] 1 \n\n```", "```py\ntest_all_direction(c(1, 2), c(2, 3), c(3, 4))\n## [1] 1 \n\n```", "```py\ntest_all_direction(c(1, 2), c(2, 4), c(3, 4))\n## [1] 0 \n\n```", "```py\ntest_any_direction <- function(x, y, z) {\n  if (any(x < y & y < z)) 1\n  else if (any(x > y & y > z)) -1\n  else 0\n}\ntest_all_direction2 <- function(x, y, z) {\n  if (all(x < y) && all(y < z)) 1\n  else if (all(x > y) && all(y > z)) -1\n  else 0\n}\ntest_any_direction2 <- function(x, y, z) {\n  if (any(x < y) && any(y < z)) 1\n  else if (any(x > y) && any(y > z)) -1\n  else 0\n} \n\n```", "```py\nx\n## [1] -2 -3 2 3 1 0 0 1 2\nabs(x) >= 1.5\n## [1] TRUE TRUE TRUE TRUE FALSE FALSE FALSE FALSE TRUE\nwhich(abs(x) >= 1.5)\n## [1] 1 2 3 4 9 \n\n```", "```py\nx[x >= 1.5]\n## [1] 2 3 2 \n\n```", "```py\nx[x >= 100]\n## numeric(0) \n\n```", "```py\nx <- c(-2, -3, NA, 2, 3, 1, NA, 0, 1, NA, 2) \n\n```", "```py\nx + 2\n##  [1]  0 -1 NA  4  5  3 NA  2  3 NA  4 \n\n```", "```py\nx > 2\n## [1] FALSE FALSE NA FALSE TRUE FALSE NA FALSE FALSE\n## [10]    NA FALSE \n\n```", "```py\nx\n## [1] -2 -3 NA 2 3 1 NA 0 1 NA 2\nany(x > 2)\n## [1] TRUE\nany(x < -2)\n## [1] TRUE\nany(x < -3)\n## [1] NA \n\n```", "```py\nany(c(TRUE, FALSE, NA))\n## [1] TRUE\nany(c(FALSE, FALSE, NA))\n## [1] NA\nany(c(FALSE, FALSE))\n## [1] FALSE \n\n```", "```py\nany(x < -3, na.rm = TRUE)\n## [1] FALSE \n\n```", "```py\nx\n## [1] -2 -3 NA 2 3 1 NA 0 1 NA 2\nall(x > -3)\n## [1] FALSE\nall(x >= -3)\n## [1] NA\nall(x < 4)\n## [1] NA \n\n```", "```py\nall(c(TRUE, FALSE, NA))\n## [1] FALSE\nall(c(TRUE, TRUE, NA))\n## [1] NA\nall(c(TRUE, TRUE))\n## [1] TRUE \n\n```", "```py\nall(x >= -3, na.rm = TRUE)\n## [1] TRUE \n\n```", "```py\nx\n## [1] -2 -3 NA 2 3 1 NA 0 1 NA 2\nx[x >= 0]\n## [1] NA  2  3  1 NA  0  1 NA  2 \n\n```", "```py\nwhich(x >= 0)\n## [1]  4  5  6  8  9 11 \n\n```", "```py\nx[which(x >= 0)]\n## [1] 2 3 1 0 1 2 \n\n```", "```py\nif (2) 3\n## [1] 3\nif (0) 0 else 1\n## [1] 1 \n\n```", "```py\nif (\"a\") 1 else 2\n## Error in if (\"a\") 1 else 2: argument is not interpretable as logical \n\n```", "```py\nsqrt(-1)\n## Warning in sqrt(-1): NaNs produced\n## [1] NaN \n\n```", "```py\n1 / 0\n## [1] Inf \n\n```", "```py\nlog(0)\n## [1] -Inf \n\n```", "```py\nis.finite(1 / 0)\n## [1] FALSE\nis.infinite(log(0))\n## [1] TRUE \n\n```", "```py\n1 / 0 < 0\n## [1] FALSE\n1 / 0 > 0\n## [1] TRUE\nlog(0) < 0\n## [1] TRUE\nlog(0) > 0\n## [1] FALSE \n\n```", "```py\nis.pos.infinite <- function(x) {\n  is.infinite(x) & x > 0\n}\nis.neg.infinite <- function(x) {\n  is.infinite(x) & x < 0\n}\nis.pos.infinite(1/0)\n## [1] TRUE\nis.neg.infinite(log(0))\n## [1] TRUE \n\n```", "```py\nlog(-1)\n## Warning in log(-1): NaNs produced\n## [1] NaN \n\n```", "```py\npi\n## [1] 3.141593 \n\n```", "```py\nsin(pi)\n## [1] 1.224606e-16 \n\n```", "```py\nmax(c(1, 2, 3))\n## [1] 3 \n\n```", "```py\nmax(c(1, 2, 3),\n    c(2, 1, 2),\n    c(1, 3, 4))\n## [1] 4\nmin(c(1, 2, 3),\n    c(2, 1, 2),\n    c(1, 3, 4))\n## [1] 1 \n\n```", "```py\npmax(c(1, 2, 3),\n    c(2, 1, 2),\n    c(1, 3, 4))\n## [1] 2 3 4 \n\n```", "```py\nx <- list(c(1, 2, 3),\n          c(2, 1, 2),\n          c(1, 3, 4))\nc(max(x[[1]][[1]], x[[2]][[1]], x[[3]][[1]]),\n  max(x[[1]][[2]], x[[2]][[2]], x[[3]][[2]]),\n  max(x[[1]][[3]], x[[2]][[3]], x[[3]][[3]]))\n## [1] 2 3 4 \n\n```", "```py\npmin(c(1, 2, 3),\n     c(2, 1, 2),\n     c(1, 3, 4))\n## [1] 1 1 2 \n\n```", "```py\nspread <- function(x) {\n  if (x < -5) -5\n  else if (x > 5) 5\n  else x\n} \n\n```", "```py\nspread(1)\n## [1] 1\nspread(seq(-8, 8))\n## Warning in if (x < -5) -5 else if (x > 5) 5 else x: the\n## condition has length > 1 and only the first element will be\n## used\n## [1] -5 \n\n```", "```py\nspread2 <- function(x) {\n  pmin(5, pmax(-5, x))\n}\nspread2(seq(-8, 8))\n##  [1] -5 -5 -5 -5 -4 -3 -2 -1  0  1  2  3  4  5  5  5  5 \n\n```", "```py\nspread3 <- function(x) {\n  ifelse(x < -5, -5, ifelse(x > 5, 5, x))\n}\nspread3(seq(-8, 8))\n##  [1] -5 -5 -5 -5 -4 -3 -2 -1  0  1  2  3  4  5  5  5  5 \n\n```", "```py\npolyroot(c(-2, 1, 1))\n## [1]  1-0i -2+0i \n\n```", "```py\nRe(polyroot(c(-2, 1, 1)))\n## [1]  1 -2 \n\n```", "```py\npolyroot(c(1, 0, 1))\n## [1] 0+1i 0-1i \n\n```", "```py\nr <- polyroot(c(-1, -2, -1, 1))\nr\n## [1] -0.5739495+0.3689894i -0.5739495-0.3689894i\n## [3]  2.1478990-0.0000000i \n\n```", "```py\nr ^ 3 - r ^ 2 - 2 * r - 1\n## [1] 8.881784e-16+1.110223e-16i 8.881784e-16+2.220446e-16i\n## [3] 8.881784e-16-4.188101e-16i \n\n```", "```py\nround(r ^ 3 - r ^ 2 - 2 * r - 1, 8)\n## [1] 0+0i 0+0i 0+0i \n\n```", "```py\nuniroot(function(x) x ^ 2 - exp(x), c(-2, 1))\n## $root\n## [1] -0.7034583\n##\n## $f.root\n## [1] -1.738305e-05\n##\n## $iter\n## [1] 6\n##\n## $init.it\n## [1] NA\n##\n## $estim.prec\n## [1] 6.103516e-05 \n\n```", "```py\nf <- function(x) exp(x) - 3 * exp(-x ^ 2 + x) + 1\nuniroot(f, c(-2, 2))\n## Error in uniroot(f, c(-2, 2)): f() values at end points not of opposite sign \n\n```", "```py\nuniroot(f, c(-2, 0))$root\n## [1] -0.4180424\nuniroot(f, c(0, 2))$root\n## [1] 0.8643009 \n\n```", "```py\nuniroot(function(x) x ^ 2 - 2 * x + 4 * cos(x ^ 2) - 3, c(0, 1))$root\n## [1] 0.5593558 \n\n```", "```py\nD(quote (x ^ 2), \"x\")\n## 2 * x \n\n```", "```py\nD(quote(sin(x) * cos(x * y)), \"x\")\n## cos(x) * cos(x * y) - sin(x) * (sin(x * y) * y) \n\n```", "```py\nz <- D(quote(sin(x) * cos(x * y)), \"x\")\nz\n## cos(x) * cos(x * y) - sin(x) * (sin(x * y) * y)\neval(z, list(x = 1, y = 2))\n## [1] -1.75514 \n\n```", "```py\nresult <- integrate(function(x) sin(x), 0, pi / 2)\nresult\n## 1 with absolute error < 1.1e-14 \n\n```", "```py\nstr(result)\n## List of 5\n## $ value : num 1\n## $ abs.error : num 1.11e-14\n## $ subdivisions: int 1\n## $ message : chr \"OK\"\n## $ call : language integrate(f = function(x) sin(x), lower = 0, upper = pi/2)\n##  - attr(*, \"class\")= chr \"integrate\" \n\n```", "```py\nsample(1:6, size = 5)\n## [1] 2 6 3 1 4 \n\n```", "```py\nsample(1:6, size = 5, replace = TRUE)\n## [1] 3 5 3 4 2 \n\n```", "```py\nsample(letters, size = 3)\n## [1] \"q\" \"w\" \"g\" \n\n```", "```py\nsample(list(a = 1, b = c(2, 3), c = c(3, 4, 5)), size = 2)\n## $b\n## [1] 2 3\n##\n## $c\n## [1] 3 4 5 \n\n```", "```py\ngrades <- sample(c(\"A\", \"B\", \"C\"), size = 20, replace = TRUE,\nprob = c(0.25, 0.5, 0.25))\ngrades\n## [1] \"C\" \"B\" \"B\" \"B\" \"C\" \"C\" \"C\" \"C\" \"C\" \"B\" \"B\" \"A\" \"A\" \"C\"\n## [15] \"B\" \"B\" \"A\" \"B\" \"A\" \"C\" \n\n```", "```py\ntable(grades)\n## grades\n## A B C\n## 4 8 8 \n\n```", "```py\nrunif(5)\n## [1] 0.8894535 0.1804072 0.6293909 0.9895641 0.1302889 \n\n```", "```py\nrunif(5, min = -1, max = 1)\n## [1] -0.3386789  0.7302411  0.5551689  0.6546069  0.2066487 \n\n```", "```py\nrnorm(5)\n## [1]  0.7857579  1.1820321 -0.9558760 -1.0316165  0.4336838 \n\n```", "```py\nrnorm(5, mean = 2, sd = 0.5)\n## [1] 1.597106 1.971534 2.374846 3.023233 2.033357 \n\n```", "```py\nx <- rnorm(50) \n\n```", "```py\nmean(x)\n## [1] -0.1051295 \n\n```", "```py\nsum(x) / length(x)\n## [1] -0.1051295 \n\n```", "```py\nmean(x, trim = 0.05)\n## [1] -0.141455 \n\n```", "```py\nmedian(x)\n## [1] -0.2312157 \n\n```", "```py\nsd(x)\n## [1] 0.8477752 \n\n```", "```py\nvar(x)\n## [1] 0.7187228 \n\n```", "```py\nc(min = min(x), max = max(x))\n## min max\n## -1.753655  2.587579 \n\n```", "```py\nrange(x)\n## [1] -1.753655  2.587579 \n\n```", "```py\nquantile(x)\n## 0% 25% 50% 75% 100%\n## -1.7536547 -0.6774037 -0.2312157  0.2974412  2.5875789 \n\n```", "```py\nquantile(x, probs = seq(0, 1, 0.1))\n## 0% 10% 20% 30%\n## -1.753654706 -1.116231750 -0.891186551 -0.504630513\n## 40% 50% 60% 70%\n## -0.412239924 -0.231215699 0.009806393 0.177344522\n## 80% 90% 100%\n##  0.550510144  0.968607716  2.587578887 \n\n```", "```py\nsummary(x)\n## Min. 1st Qu. Median Mean 3rd Qu. Max.\n## -1.7540 -0.6774 -0.2312 -0.1051  0.2974  2.5880 \n\n```", "```py\ndf <- data.frame(score = round(rnorm(100, 80, 10)),\ngrade = sample(letters[1:3], 100, replace = TRUE))\nsummary(df)\n## score grade\n## Min. : 60.00 a:34\n## 1st Qu.: 73.00 b:38\n## Median : 79.00 c:28\n## Mean : 79.65\n## 3rd Qu.: 86.00\n##  Max.   :107.00 \n\n```", "```py\ny <- 2 * x + 0.5 * rnorm(length(x)) \n\n```", "```py\ncov(x, y)\n## [1] 1.419859 \n\n```", "```py\ncor(x, y)\n## [1] 0.9625964 \n\n```", "```py\nz <- runif(length(x))\nm1 <- cbind(x, y, z)\ncov(m1)\n##           x          y          z\n## x 0.7187228 1.41985899 0.04229950\n## y 1.4198590 3.02719645 0.07299981\n## z 0.0422995 0.07299981 0.08005535 \n\n```", "```py\ncor(m1)\n##           x         y         z\n## x 1.0000000 0.9625964 0.1763434\n## y 0.9625964 1.0000000 0.1482881\n## z 0.1763434 0.1482881 1.0000000 \n\n```", "```py\nlen <- c(3, 4, 5)\n# first, create a list in the environment.\nx <- list()\n# then use `for` to generate the random vector for each length\nfor (i in 1:3) {\n  x[[i]] <- rnorm(len[i])\n}\nx\n## [[1]]\n## [1] 1.4572245 0.1434679 -0.4228897\n##\n## [[2]]\n## [1] -1.4202269 -0.7162066 -1.6006179 -1.2985130\n##\n## [[3]]\n## [1] -0.6318412  1.6784430  0.1155478  0.2905479 -0.7363817 \n\n```", "```py\nlapply(len, rnorm)\n## [[1]]\n## [1] -0.3258354 -1.4658116 -0.1461097\n##\n## [[2]]\n## [1] -0.1715198 0.5215857 -0.3178271 -0.3967798\n##\n## [[3]]\n## [1] -0.2047106 -1.2009772  1.4859955  0.1940920  0.3758798 \n\n```", "```py\nstudents <- list(\n  a1 = list(name = \"James\", age = 25,\n    gender = \"M\", interest = c(\"reading\", \"writing\")),\n  a2 = list(name = \"Jenny\", age = 23,\n    gender = \"F\", interest = c(\"cooking\")),\n  a3 = list(name = \"David\", age = 24,\n    gender = \"M\", interest = c(\"running\", \"basketball\"))) \n\n```", "```py\nJames, 25 year-old man, loves reading, writing. \n\n```", "```py\nsprintf(\"Hello, %s! Your number is %d.\", \"Tom\", 3)\n## [1] \"Hello, Tom! Your number is 3.\" \n\n```", "```py\nlapply(students, function(s) {\n  type <- switch(s$gender, \"M\" = \"man\", \"F\" = \"woman\")\n  interest <- paste(s$interest, collapse = \", \")\n  sprintf(\"%s, %d year-old %s, loves %s.\", s$name, s$age, type, interest)\n})\n## $a1\n## [1] \"James, 25 year-old man, loves reading, writing.\"\n##\n## $a2\n## [1] \"Jenny, 23 year-old woman, loves cooking.\"\n##\n## $a3\n## [1] \"David, 24 year-old man, loves running, basketball.\" \n\n```", "```py\nsapply(1:10, function(i) i ^ 2)\n##  [1]   1   4   9  16  25  36  49  64  81 100 \n\n```", "```py\nsapply(1:10, function(i) c(i, i ^ 2))\n## [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]\n## [1,] 1 2 3 4 5 6 7 8 9 10\n## [2,]    1    4    9   16   25   36   49   64   81   100 \n\n```", "```py\nx <- list(c(1, 2), c(2, 3), c(1, 3)) \n\n```", "```py\nsapply(x, function(x) x ^ 2)\n## [,1] [,2] [,3]\n## [1,] 1 4 1\n## [2,] 4 9 9 \n\n```", "```py\nx1 <- list(c(1, 2), c(2, 3), c(1, 3, 3)) \n\n```", "```py\nsapply(x1, function(x) x ^ 2)\n## [[1]]\n## [1] 1 4\n##\n## [[2]]\n## [1] 4 9\n##\n## [[3]]\n## [1] 1 9 9 \n\n```", "```py\nvapply(x1, function(x) x ^ 2, numeric(2))\n## Error in vapply(x1, function(x) x^2, numeric(2)): values must be length 2,\n##  but FUN(X[[3]]) result is length 3 \n\n```", "```py\nvapply(x, function(x) x ^ 2, numeric(2))\n## [,1] [,2] [,3]\n## [1,] 1 4 1\n## [2,] 4 9 9 \n\n```", "```py\nmapply(function(a, b, c) a * b + b * c + a * c,\na = c(1, 2, 3), b = c(5, 6, 7), c = c(-1, -2, -3))\n## [1] -1 -4 -9 \n\n```", "```py\ndf <- data.frame(x = c(1, 2, 3), y = c(3, 4, 5))\ndf\n## x y\n## 1 1 3\n## 2 2 4\n## 3 3 5\nmapply(function(xi, yi) c(xi, yi, xi + yi), df$x, df$y)\n## [,1] [,2] [,3]\n## [1,] 1 2 3\n## [2,] 3 4 5\n## [3,]    4    6    8 \n\n```", "```py\nMap(function(xi, yi) c(xi, yi, xi + yi), df$x, df$y)\n## [[1]]\n## [1] 1 3 4\n##\n## [[2]]\n## [1] 2 4 6\n##\n## [[3]]\n## [1] 3 5 8 \n\n```", "```py\nmat <- matrix(c(1, 2, 3, 4), nrow = 2)\nmat\n## [,1] [,2]\n## [1,] 1 3\n## [2,] 2 4\napply(mat, 1, sum)\n## [1] 4 6 \n\n```", "```py\napply(mat, 2, sum)\n## [1] 3 7 \n\n```", "```py\nmat2 <- matrix(1:16, nrow = 4)\nmat2\n## [,1] [,2] [,3] [,4]\n## [1,] 1 5 9 13\n## [2,] 2 6 10 14\n## [3,] 3 7 11 15\n## [4,] 4 8 12 16 \n\n```", "```py\napply(mat2, 2, function(col) c(min = min(col), max = max(col)))\n## [,1] [,2] [,3] [,4]\n## min 1 5 9 13\n## max 4 8 12 16 \n\n```", "```py\napply(mat2, 1, function(col) c(min = min(col), max = max(col)))\n## [,1] [,2] [,3] [,4]\n## min 1 2 3 4\n## max 13 14 15 16\n```"]