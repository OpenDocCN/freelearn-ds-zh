- en: Chapter 10. Visualizing Your Analysis
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章. 可视化您的分析
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Generating a leaflet web map with Folium
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Folium生成leaflet网络地图
- en: Setting up TileStache to serve tiles
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置TileStache以服务瓦片
- en: Visualizing DEM data with Three.js
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Three.js可视化DEM数据
- en: Draping an orthophoto over a DEM
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在DEM上覆盖正射影像
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: The great part about geospatial analysis is visualization. This chapter is all
    about showing some ways to visualize your analysis results. Up to this point,
    we have used QGIS, leaflet, and Openlayers 3 to see our results. Here, we will
    concentrate on web mapping with some of the newest libraries to publish our data.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 地理空间分析最棒的部分是可视化。本章将介绍一些可视化分析结果的方法。到目前为止，我们已经使用了QGIS、leaflet和Openlayers 3来查看我们的结果。在这里，我们将专注于使用一些最新的库进行网络地图发布。
- en: Most of this code will mix Python with JavaScript, HTML, and CSS.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码的大部分将混合Python、JavaScript、HTML和CSS。
- en: Tip
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: An awesome list of visualization techniques and libraries can be found at [http://selection.datavisualization.ch/](http://selection.datavisualization.ch/).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在[http://selection.datavisualization.ch/](http://selection.datavisualization.ch/)找到一系列令人惊叹的可视化技术和库。
- en: Generating a leaflet web map with Folium
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Folium生成leaflet网络地图
- en: Creating a web map with your own data is becoming easier with every new web
    mapping library. Folium ([http://folium.readthedocs.org/](http://folium.readthedocs.org/))
    is a small new Python project that can create a simple web map directly from your
    Python code, leveraging the leaflet JavaScript mapping library. This is still
    more than one line, but with under 20 lines of Python code, you can have Folium
    generate a nice web map for you.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 使用自己的数据创建网络地图正变得越来越容易，随着每个新的网络地图库的出现。Folium ([http://folium.readthedocs.org/](http://folium.readthedocs.org/))
    是一个小的Python新项目，可以直接从Python代码创建简单的网络地图，利用leaflet JavaScript地图库。这仍然超过了一行，但只需20行以下的Python代码，你就可以让Folium为你生成一个漂亮的网络地图。
- en: Getting ready
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Folium requires the Jinja2 template engine alongside Pandas for data binding.
    The nice part about this is that both are simple to install using `pip`:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Folium需要Jinja2模板引擎和Pandas进行数据绑定。好的是，这两个都可以通过`pip`简单安装：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Instructions on using Pandas are also found in [Chapter 1](ch01.html "Chapter 1. Setting
    Up Your Geospatial Python Environment"), *Setting Up Your Geospatial Python Environment*.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 关于使用Pandas的说明也可以在[第1章](ch01.html "第1章. 设置您的地理空间Python环境")中找到，*设置您的地理空间Python环境*。
- en: How to do it...
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'Now make sure that you are in your `/ch10/code/` folder to see the live example
    of Folium as follows:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在请确保你处于`/ch10/code/`文件夹中，以查看以下Folium的实时示例：
- en: '[PRE1]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How it works...
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Folium uses the Jinja2 Python template engine to render the final results and
    Pandas to bind the CSV statistic data. The code begins with importing and then
    defining the data sources. The GeoJSON file of the U.S. State polygons will be
    displayed as a **chloropleth map**. A choropleth map is one that displays data
    values that are classified into a defined set of data ranges, usually based on
    some statistical method. Within the GeoJSON data is a key-filed named `id` with
    a value the U.S. State abbreviation code. This `id` binds the spatial data to
    the statistic CSV column that also includes a corresponding `id` field, hence
    allowing us to connect our two datasets.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Folium使用Jinja2 Python模板引擎来渲染最终结果，并使用Pandas来绑定CSV统计数据。代码从导入和定义数据源开始。将显示美国州多边形的GeoJSON文件作为**渐变图**。渐变图是一种显示数据值，这些数据值被分类到一组定义的数据范围中，通常基于某种统计方法。在GeoJSON数据中有一个名为`id`的键字段，其值为美国州的缩写代码。这个`id`将空间数据绑定到包含相应`id`字段的统计CSV列，因此我们可以连接我们的两个数据集。
- en: Folium then needs to create a `map` object, setting the `map` center coordinates
    alongside a zoom level and a base tile map for our background. In our case, the
    `Stamen Toner` tile set is defined.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Folium随后需要创建一个`map`对象，设置`map`中心坐标、缩放级别以及用于背景的基础瓦片地图。在我们的例子中，定义了`Stamen Toner`瓦片集。
- en: Next up, we define the vector GeoJSON that is going to appear on top of our
    background map. We need to pass in the path of our source GeoJSON and the Pandas
    data frame object that references our CSV file columns, `State` and `Unemployment`.
    Next, we set the linking key value that connects our CSV with the GeoJSON data.
    The `key_on` parameter reads the `id` GeoJSON properties key in the feature array.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们定义将在我们的背景地图上出现的矢量GeoJSON。我们需要传递我们源GeoJSON的路径以及引用我们的CSV文件列`State`和`Unemployment`的Pandas数据帧对象。然后，我们设置连接CSV与GeoJSON数据的链接键值。`key_on`参数读取特征数组中的`id`
    GeoJSON属性键。
- en: Lastly, we set the color brewer to a color we want along with the style. The
    legend is a D3 legend that's automatically created for us and is scaled via quantiles.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们设置颜色调色板为我们想要的颜色以及样式。图例是D3图例，它为我们自动创建并按分位数缩放。
- en: '![How it works...](img/50790OS_10_01.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/50790OS_10_01.jpg)'
- en: Setting up TileStache to serve tiles
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置TileStache以服务瓦片
- en: Once you have data and want to get it onto the Web, a server of some sort is
    required. TileStache, originally developed by Michal Migurski, is a Python tile
    map server that can pump out vector tiles. Vector tiles are the future of web
    mapping and make web map applications super fast. In the end, you will have a
    `TileStache` instance running and serving up a simple web map.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你有数据并想要将其放到网上，就需要某种服务器。TileStache最初由Michal Migurski开发，是一个Python瓦片地图服务器，可以输出矢量瓦片。矢量瓦片是网络地图的未来，使网络地图应用超级快。最终，你将有一个运行并服务简单网络地图的`TileStache`实例。
- en: Getting ready
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'A few requirements are needed to get TileStache running on your machine, including
    Werkzeug, PIL, SimpleJson, and Modestmaps, so we must first install these. Let''s
    start with running our `pip install` commands like this:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要在您的机器上运行TileStache，需要一些要求，包括Werkzeug、PIL、SimpleJson和Modestmaps，因此我们必须首先安装这些。让我们从运行我们的`pip
    install`命令开始，如下所示：
- en: Note
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Getting `TileStache` to run on a full-blown server, such as Nginx or Apache,
    with `mod-python` is beyond the scope of this book but is highly recommended for
    production deployment (for more information on this refer to [http://modpython.org/](http://modpython.org/)).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 要在完整的服务器上运行`TileStache`，例如Nginx或Apache，并使用`mod-python`超出了本书的范围，但强烈推荐用于生产部署（有关更多信息，请参阅[http://modpython.org/](http://modpython.org/))。
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The Python library called `Werkzeug` ([http://werkzeug.pocoo.org/](http://werkzeug.pocoo.org/))
    is the WSGI server for our test application. Mapnik is not required, but go ahead
    and install it to view the demo application.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 被称为`Werkzeug`的Python库（[http://werkzeug.pocoo.org/](http://werkzeug.pocoo.org/)）是我们测试应用的WSGI服务器。Mapnik不是必需的，但你可以安装它来查看演示应用。
- en: How to do it...
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Now let's download the most recent code from GitHub as a ZIP from [https://github.com/TileStache/TileStache/archive/master.zip](https://github.com/TileStache/TileStache/archive/master.zip).
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们从[https://github.com/TileStache/TileStache/archive/master.zip](https://github.com/TileStache/TileStache/archive/master.zip)下载最新的代码作为ZIP文件。
- en: Tip
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'Use the command-line `git` if you have it installed as follows:'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你已安装，请使用命令行`git`如下：
- en: '[PRE3]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Unpack this into your `/ch10/TileStache-master` folder.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其解压到你的`/ch10/TileStache-master`文件夹中。
- en: 'Test and check whether your installation went smoothly by going into your `/ch10/TileStache-master/`
    directory and entering the following command line:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过进入你的`/ch10/TileStache-master/`目录并输入以下命令行来测试和检查你的安装是否顺利：
- en: '[PRE4]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'After running the preceding command, you should see this:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行上述命令后，你应该会看到以下内容：
- en: '[PRE5]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now open up your web browser and type in `http://localhost:8080/`; you should
    see some simple text stating `TileStache belows hello`.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开你的网络浏览器并输入`http://localhost:8080/`；你应该会看到一些简单的文本，表明`TileStache belows hello`。
- en: Next, try to enter `http://localhost:8080/osm/0/0/0.png`; you will get the following
    output:![How to do it...](img/50790OS_10_02.jpg)
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，尝试输入`http://localhost:8080/osm/0/0/0.png`；你会得到以下输出：![如何做...](img/50790OS_10_02.jpg)
- en: This is the map of the world that you should be able to see.
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是你应该能够看到的全球地图。
- en: To get a live scrollable map around Vancouver, British Colombia, visit `http://localhost:8080/osm/preview.html#10/49.1725/-123.0719`.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要获取温哥华，不列颠哥伦比亚省的实时可滚动地图，请访问`http://localhost:8080/osm/preview.html#10/49.1725/-123.0719`。
- en: Visualizing DEM data with Three.js
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Three.js可视化DEM数据
- en: You have a great 3D **Digital Elevation Model** (**DEM**) that you may want
    to view on a web page, so your choices are limited only to your imagination and
    programming skills. In this little example based on the great work of Bjorn Sandvik,
    we will explore the methods needed to manipulate a DEM to load a Three.js HTML-based
    web page.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你有一个很棒的3D **数字高程模型**（DEM），你可能想在网页上查看，所以你的选择仅限于你的想象和编程技能。在这个基于Bjorn Sandvik出色工作的例子中，我们将探讨操纵DEM以加载基于Three.js的HTML网页所需的方法。
- en: Tip
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: A great plugin that I would highly recommend for QGIS is the **qgis2threejs**
    plugin, written by Minoru Akagi. The Python plugin code is available on GitHub
    at [https://github.com/minorua/Qgis2threejs](https://github.com/minorua/Qgis2threejs)
    where you can find a nice `gdal2threejs.py` converter.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我强烈推荐的一个QGIS插件是**qgis2threejs**插件，由Minoru Akagi编写。Python插件代码可在GitHub上找到，网址为[https://github.com/minorua/Qgis2threejs](https://github.com/minorua/Qgis2threejs)，在那里你可以找到一个不错的`gdal2threejs.py`转换器。
- en: 'The resulting 3D DEM mesh can be viewed in your browser:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的3D DEM网格可以在你的浏览器中查看：
- en: '![Visualizing DEM data with Three.js](img/50790OS_10_03.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![使用Three.js可视化DEM数据](img/50790OS_10_03.jpg)'
- en: Getting ready
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We need Jinja2 as our template engine (installed in the first section of this
    chapter) to create our HTML. The remaining requirements include JavaScript and
    our 3D DEM data. Our DEM data is from [Chapter 7](ch07.html "Chapter 7. Raster
    Analysis"), *Raster Analysis*, and is located in the `/ch07/geodata/dem_3857.dem`
    folder, so if you have not already downloaded all the data and code, do so now.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要Jinja2作为我们的模板引擎（在本章的第一节中安装），来创建我们的HTML。其余的要求包括JavaScript和我们的3D DEM数据。我们的DEM数据来自[第7章](ch07.html
    "第7章. 栅格分析")，*栅格分析*，位于`/ch07/geodata/dem_3857.dem`文件夹，所以如果你还没有下载所有数据和代码，请现在就下载。
- en: The `gdal_translate` GDAL executable is used to convert our DEM into an ENVI
    `.bin` 16-bit raster. This raster will contain the elevation values that the `threejs`
    library can read to create the 3D mesh.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`gdal_translate` GDAL可执行文件用于将我们的DEM转换为ENVI `.bin` 16位栅格。这个栅格将包含`threejs`库可以读取以创建3D网格的高程值。'
- en: Tip
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Using an IDE is not always necessary, but in this case, the PyCharm Pro IDE
    is helpful since we are using HTML, JavaScript, and Python to create our results.
    There is also a free PyCharm community edition that I would also recommend but
    it lacks the HTML, JavaScript, and Jinja2 template support.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 使用IDE并不总是必要的，但在这个案例中，PyCharm Pro IDE很有帮助，因为我们正在使用HTML、JavaScript和Python来创建我们的结果。还有一个免费的PyCharm社区版，我也推荐，但它缺少HTML、JavaScript和Jinja2模板支持。
- en: Three.js is available if you have downloaded the `/ch10/www/js` folder on your
    machine. If not, do so now and download the entire `/ch10/www/` folder. Inside
    it, you will find the folders needed for the output of HTML and the web templates
    used by Jinja2.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在你的机器上下载了`/ch10/www/js`文件夹，那么Three.js就可用。如果没有，请现在就下载整个`/ch10/www/`文件夹。在里面，你会找到用于输出HTML和Jinja2使用的Web模板所需的文件夹。
- en: How to do it...
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'We''ll start by running a subprocess call to generate the needed raster with
    elevation data for Three.js. Then, we''ll step into the HTML template code containing
    a single `Jinja2` variable as follows:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先运行一个子进程调用，生成Three.js所需的带有高程数据的栅格。然后，我们将进入包含单个`Jinja2`变量的HTML模板代码，如下所示：
- en: '[PRE6]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Our Jinja2 HTML template code only contains one simple variable called `{{
    dem_3d }}` so that you can see what''s happening clearly:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的Jinja2 HTML模板代码只包含一个简单的变量，称为`{{ dem_3d }}`，这样你可以清楚地看到正在发生的事情：
- en: '[PRE7]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How it works...
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Our `gdal_translate` does the hard work for us by converting the DEM data into
    a raster format that Three.js can understand. The Jinja2 template HTML code shows
    us the required moving parts, starting with three JavaScript files. `TerrainLoader.js`
    reads this binary `.bin` format raster into the Three.js terrain.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`gdal_translate`通过将DEM数据转换为Three.js可以理解的栅格格式为我们做了艰苦的工作。Jinja2模板HTML代码显示了所需的组件，从三个JavaScript文件开始。`TerrainLoader.js`读取这个二进制`.bin`格式栅格到Three.js地形中。
- en: Inside our HTML file, the JavaScript code shows how we can go about creating
    the Three.js scene where the most important part is creating `THREE.PlaneGeometry`.
    We assign each `geometry.vertices` the elevation height in this JavaScript `for`
    loop, assigning each vertex the flat plane of the elevation value.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的HTML文件中，JavaScript代码展示了我们如何创建Three.js场景，其中最重要的部分是创建`THREE.PlaneGeometry`。在这个JavaScript
    `for`循环中，我们为每个`geometry.vertices`分配高程高度，为每个顶点分配高程值对应的平坦平面。
- en: 'We follow this with `MeshPhongMaterial` so that we can see the mesh on our
    screen as a wireframe. To view the resulting HTML file generated, you need to
    run a local web server and for this, Python comes with `SimpleHTTPServer` out
    of the box. This can be run from the command line as the following Python command:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 接着使用 `MeshPhongMaterial`，这样我们就可以在屏幕上以线框的形式看到网格。要查看生成的 HTML 文件，您需要运行一个本地网络服务器，而对于这个，Python
    内置了 `SimpleHTTPServer`。这可以通过以下 Python 命令在命令行中运行：
- en: '[PRE8]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Then, go visit your browser and enter `http://localhost:8080/`; select the `html`
    folder, and then click on the `ch10-03_dem3d_map.html` file.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，访问您的浏览器并输入 `http://localhost:8080/`；选择 `html` 文件夹，然后点击 `ch10-03_dem3d_map.html`
    文件。
- en: Tip
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Using the PyCharm IDE, you can simply open the HTML file inside PyCharm, move
    your mouse to the upper right-hand corner of the open file, and select a browser,
    such as Chrome, to open a new HTML page. PyCharm will automatically start a web
    server for you and display the 3D terrain in your selected browser.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 PyCharm IDE，您可以直接在 PyCharm 中打开 HTML 文件，将鼠标移至打开文件的右上角，并选择一个浏览器，例如 Chrome，以打开一个新的
    HTML 页面。PyCharm 将自动为您启动一个网络服务器，并在您选择的浏览器中显示 3D 地形。
- en: Draping an orthophoto over a DEM
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 DEM 上覆盖正射影像
- en: This time around, we are going to take our previous recipe to the next level
    by draping satellite imagery over our DEM to create a truly impressive 3D interactive
    web map.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，我们将通过将卫星影像覆盖到我们的 DEM 上，将我们之前的配方提升到新的水平，从而创建一个真正令人印象深刻的 3D 交互式网络地图。
- en: '![Draping an orthophoto over a DEM](img/50790OS_10_04.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![在 DEM 上覆盖正射影像](img/50790OS_10_04.jpg)'
- en: You can take a look at other orthophotos from `geogratis.ca` at [http://geogratis.gc.ca/api/en/nrcan-rncan/ess-sst/77618678-421b-4a28-a0a5-b074e5f072ff.html](http://geogratis.gc.ca/api/en/nrcan-rncan/ess-sst/77618678-421b-4a28-a0a5-b074e5f072ff.html).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以查看来自 `geogratis.ca` 的其他正射影像，[http://geogratis.gc.ca/api/en/nrcan-rncan/ess-sst/77618678-421b-4a28-a0a5-b074e5f072ff.html](http://geogratis.gc.ca/api/en/nrcan-rncan/ess-sst/77618678-421b-4a28-a0a5-b074e5f072ff.html)。
- en: Getting ready
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To drape an orthophoto directly over our DEM, we need to make sure that the
    input DEM and the orthophoto have the same extent and pixel size. For this exercise,
    you need to complete the previous section and have data available in the `/ch10/geodata/092j02_1_1.tif`
    folder. This is the orthophoto that we are going to drape over the DEM.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 要直接在 DEM 上覆盖正射影像，我们需要确保输入的 DEM 和正射影像具有相同的范围和像素大小。对于这个练习，您需要完成前面的部分，并在 `/ch10/geodata/092j02_1_1.tif`
    文件夹中准备好数据。这是我们将在 DEM 上覆盖的正射影像。
- en: How to do it...
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Let''s dive into some code that''s full of comments for your enlightenment:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们深入一些代码，这些代码充满了注释，以供您参考：
- en: '[PRE9]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Our Jinja2 HTML template file looks like this:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的 Jinja2 HTML 模板文件看起来是这样的：
- en: '[PRE10]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: How it works...
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The main methodology for draping an orthophoto is the same as seen in the previous
    section, with a slight difference in the way we use the Three.js material rendering.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 覆盖正射影像的主要方法与前面章节中看到的方法相同，只是在 Three.js 材质渲染的使用方式上略有不同。
- en: Data preparation plays the biggest and most important role once again to make
    things jive together. Inside our Python code, `Ch10-04_drapeOrtho.py` uses the
    subprocess call to execute the `gdalwarp` and `gdal_translate` command-line tools.
    Gdalwarp is first used by taking the original orthophoto in EPSG:3157 and converting
    it to the EPSG:3857 Web Mercator format. At the same time, it also cuts the original
    raster to the same extent as our DEM input. This extent is achieved by reading
    the `gdalinfo whistler.bin` raster command-line call.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 数据准备再次扮演了最重要的角色，以确保一切顺利。在我们的 Python 代码 `Ch10-04_drapeOrtho.py` 中，我们使用 subprocess
    调用来执行 `gdalwarp` 和 `gdal_translate` 命令行工具。首先使用 Gdalwarp 将原始正射影像从 EPSG:3157 转换为
    EPSG:3857 Web Mercator 格式。同时，它也将原始栅格裁剪到与我们的 DEM 输入相同的范围。这个范围是通过读取 `gdalinfo whistler.bin`
    栅格命令行调用来实现的。
- en: After this, we need to cut the raster down to size and make a 200 x 200 pixel
    image to match our DEM size. This is followed by using PIL to transform the output
    `.tif` file into a much smaller `.jpg` file that's better suited for web presentations
    and speed.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要将栅格裁剪到适当的大小，并制作一个 200 x 200 像素的图像，以匹配我们的 DEM 大小。接着使用 PIL 将输出的 `.tif`
    文件转换为更小的 `.jpg` 文件，这更适合网络演示和速度。
- en: With the major leg work out of the way, we can use Jinja2 to create our output
    HTML template and pass in two `dem_file`, variables pointing to the original DEM.
    The second variable called `texture_map` points to the newly created whistler
    `.jpg` that's used to drape over the DEM.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 主要的腿部工作完成之后，我们可以使用Jinja2来创建我们的输出HTML模板，并传入两个`dem_file`变量，这些变量指向原始的DEM。第二个变量名为`texture_map`，指向新创建的用于覆盖DEM的whistler
    `.jpg`文件。
- en: 'The final results are written to the `/ch10/www/html/ch10-04_dem3d_map_drape.html`
    folder for you to then open and view in the browser. To view this HTML file, you
    will need to start a local web server from the `/ch10/www/` directory:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 最终结果将写入`/ch10/www/html/ch10-04_dem3d_map_drape.html`文件夹，供你打开并在浏览器中查看。要查看此HTML文件，你需要从`/ch10/www/`目录启动本地Web服务器：
- en: '[PRE11]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Then, visit the browser at `http://localhost.8080/` and you should see a draped
    image on the DEM.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，访问浏览器中的 `http://localhost.8080/`，你应该在DEM上看到一个覆盖的图像。
