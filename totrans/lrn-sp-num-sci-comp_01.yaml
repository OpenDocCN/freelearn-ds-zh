- en: Chapter 1. Introduction to SciPy
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。SciPy简介
- en: There is no doubt that the labor of scientists in the twenty-first century is
    more comprehensive and interdisciplinary than in previous generations. Members
    of scientific communities connect in larger teams and work together on mission-oriented
    goals and across their fields. This paradigm on research is also reflected in
    the computational resources employed by researchers. No longer are researchers
    restricted to one type of commercial software, operating system, or vendor, but
    inspired by open source contributions made available and tested by research institutions
    and open source communities; research work often spans over various platforms
    and technologies.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 毫无疑问，21世纪的科学家劳动比前几代人更为全面和跨学科。科学界的成员以更大的团队形式连接，共同致力于以任务为导向的目标，并在各自的领域内合作。这种研究范式也反映在研究人员使用的计算资源上。研究人员不再局限于一种商业软件、操作系统或供应商，而是受到研究机构和开源社区提供的开源贡献的启发和测试；研究工作经常跨越各种平台和技术。
- en: 'This book presents the highly-recognized open source programming environment
    till date — a system based on two libraries of the computer language Python: **NumPy**
    and **SciPy**. In the following sections, we will guide you through examples from
    science and engineering on the usage of this system.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本书介绍了迄今为止高度认可的开放源代码编程环境——一个基于计算机语言Python的两个库的系统：**NumPy**和**SciPy**。在接下来的章节中，我们将通过科学和工程领域的示例来指导您使用这个系统。
- en: What is SciPy?
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SciPy是什么？
- en: 'The ideal programming environment for computational mathematics enjoys the
    following characteristics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 理想的可计算数学编程环境具有以下特点：
- en: 'It must be based on a computer language that allows the user to work quickly
    and integrate systems effectively. Ideally, the computer language should be portable
    to all platforms: Windows, Mac OS X, Linux, Unix, Android, and so on. This is
    key to fostering cooperation among scientists with different resources and accessibilities.
    It must contain a powerful set of libraries that allow the acquisition, storing,
    and handling of large datasets in a simple and effective manner. This is central—allowing
    simulation and the employment of numerical computations at a large scale.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它必须基于一种允许用户快速工作并有效集成系统的计算机语言。理想情况下，计算机语言应可移植到所有平台：Windows、Mac OS X、Linux、Unix、Android等。这对于促进不同资源和使用能力的科学家之间的合作至关重要。它必须包含一套强大的库，允许以简单有效的方式获取、存储和处理大量数据集。这是核心——允许进行模拟和大规模使用数值计算。
- en: Smooth integration with other computer languages, as well as third-party software.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与其他计算机语言以及第三方软件的平滑集成。
- en: Besides running the compiled code, the programming environment should allow
    the possibility of interactive sessions as well as scripting capabilities for
    quick experimentation.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 除了运行编译后的代码，编程环境还应允许进行交互式会话以及脚本能力，以便快速实验。
- en: Different coding paradigms should be supported—imperative, object-oriented,
    and/or functional coding styles.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应支持不同的编码范式——命令式、面向对象和/或函数式编码风格。
- en: It should be an open source software, that allows user access to the raw data
    code, and allows the user to modify basic algorithms if so desired. With commercial
    software, the inclusion of the improved algorithms is applied at the discretion
    of the seller, and it usually comes at a cost of the end user. In the open source
    universe, the community usually performs these improvements and releases new versions
    as they are published—at no cost.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它应该是一个开源软件，允许用户访问原始数据代码，并允许用户在需要时修改基本算法。在商业软件中，改进算法的包含由卖家决定，并且通常会给最终用户带来成本。在开源领域，社区通常进行这些改进，并在发布时发布新版本——无需付费。
- en: The set of applications should not be restricted to mere numerical computations;
    it should be powerful enough to allow symbolic computations as well.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序集不应仅限于简单的数值计算；它应该足够强大，允许进行符号计算。
- en: 'Among the best-known environments for numerical computations used by the scientific
    community is **MATLAB**, which is commercial, expensive, and which does not allow
    any tampering with the code. **Maple** and **Mathematica** are more geared towards
    symbolic computation, although they can match many of the numerical computations
    from MATLAB. These are, however, also commercial, expensive, and closed to modifications.
    A decent alternative to MATLAB and based on a similar mathematical engine is the
    **GNU Octave system**. Most of the MATLAB code is easily portable to Octave, which
    is open source. Unfortunately, the accompanying programming environment is not
    very user friendly, it is also very much restricted to numerical computations.
    One environment that combines the best of all worlds is Python with the open source
    libraries NumPy and SciPy for numerical operations. The first property that attracts
    users to Python is, without a doubt, its code readability. The syntax is extremely
    clear and expressive. It has the advantage of supporting code written in different
    paradigms: object oriented, functional, or old school imperative. It allows packing
    of Python codes and to run them as standalone executable programs through the
    `py2exe`, `pyinstaller`, and `cx_Freeze` libraries, but it can also be used interactively
    or as a scripting language. This is a great advantage when developing tools for
    symbolic computation. Python has therefore been a firm competitor to Maple and
    Mathematica: the open source mathematics software **Sage** (**System for Algebra
    and Geometry Experimentation**).'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在科学界使用的最知名数值计算环境之一是**MATLAB**，这是一个商业软件，价格昂贵，并且不允许对代码进行任何篡改。**Maple**和**Mathematica**则更侧重于符号计算，尽管它们可以匹配MATLAB中的许多数值计算。然而，这些也是商业软件，价格昂贵，且不开放修改。基于类似数学引擎的MATLAB的合理替代品是**GNU
    Octave系统**。大多数MATLAB代码可以轻松移植到Octave，它是开源的。不幸的是，其配套的编程环境并不十分用户友好，而且也非常限制于数值计算。一个结合了所有优点的是Python，它带有开源库NumPy和SciPy进行数值操作。无疑，吸引用户使用Python的第一个特性是其代码的可读性。其语法极其清晰和表达性强。它支持用不同范式编写的代码：面向对象、函数式或传统的命令式。它允许打包Python代码，并通过`py2exe`、`pyinstaller`和`cx_Freeze`库将它们作为独立的可执行程序运行，但也可以用作交互式编程语言或脚本语言。这在开发符号计算工具时是一个巨大的优势。因此，Python已经成为Maple和Mathematica的强劲竞争对手：开源数学软件**Sage**（**代数和几何实验系统**）。
- en: NumPy is an open source extension to Python that adds support for multidimensional
    arrays of large sizes. This support allows the desired acquisition, storage, and
    complex manipulation of data mentioned previously. NumPy alone is a great tool
    to solve many numerical computations.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy是Python的一个开源扩展，它增加了对大型多维数组的支持。这种支持允许获取、存储和复杂操作之前提到的数据。仅凭NumPy本身就是一个解决许多数值计算问题的强大工具。
- en: On top of NumPy, we have yet another open source library, SciPy. This library
    contains algorithms and mathematical tools to manipulate NumPy objects with very
    definite scientific and engineering objectives.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在NumPy之上，我们还有另一个开源库SciPy。这个库包含用于操纵NumPy对象（具有明确的科学和工程目标）的算法和数学工具。
- en: The combination of Python, NumPy, and SciPy (which henceforth are coined as
    "SciPy" for brevity) has been the environment of choice of many applied mathematicians
    for years; we work on a daily basis with both pure mathematicians and with hardcore
    engineers. One of the challenges of this trade is to bring about the scientific
    production of professionals with different visions, techniques, tools, and software
    to a single workstation. SciPy is the perfect solution to coordinate computations
    in a smooth, reliable, and coherent manner.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Python、NumPy和SciPy（以下简称为“SciPy”）的组合已经多年成为许多应用数学家的首选环境；我们每天与纯数学家和硬核工程师一起工作。这个行业的挑战之一是将不同视野、技术、工具和软件的专业人士的科学产出集中在一个工作站上。SciPy是协调计算顺畅、可靠和一致性的完美解决方案。
- en: Constantly, we are required to produce scripts with, for example, combinations
    of experiments written and performed in SciPy itself, C/C++, Fortran, and/or MATLAB.
    Often, we receive large amounts of data from some signal acquisition devices.
    From all this heterogeneous material, we employ Python to retrieve and manipulate
    the data, and once finished with the analysis, to produce high-quality documentation
    with professional-looking diagrams and visualization aids. SciPy allows performing
    all these tasks with ease.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: This is partly because many dedicated software tools easily extend the core
    features of SciPy. For example, although graphing and plotting are usually taken
    care of with the Python libraries of **matplotlib**, there are also other packages
    available, such as **Biggles** ([http://biggles.sourceforge.net/](http://biggles.sourceforge.net/)),
    **Chaco** ([https://pypi.python.org/pypi/chaco](https://pypi.python.org/pypi/chaco)),
    **HippoDraw** ([https://github.com/plasmodic/hippodraw](https://github.com/plasmodic/hippodraw)),
    **MayaVi** for **3D** rendering ([http://mayavi.sourceforge.net/](http://mayavi.sourceforge.net/)),
    the **Python Imaging Library** or **PIL** ([http://pythonware.com/products/pil/](http://pythonware.com/products/pil/)),
    and the online analytics and data visualization tool **Plotly** ([https://plot.ly/](https://plot.ly/)).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Interfacing with non-Python packages is also possible. For example, the interaction
    of SciPy with the R statistical package can be done with **RPy** ([http://rpy.sourceforge.net/rpy2.html](http://rpy.sourceforge.net/rpy2.html)).
    This allows for much more robust data analysis.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: Installing SciPy
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the time of this book, the stable production releases of Python were 2.7.9
    and 3.4.2\. Still, Python 2.7 is more convenient if the user needs to communicate
    with third-party applications. No new releases are planned for Python 2; Python
    3 is considered the present and the future of Python. For the purposes of SciPy
    applications, we do recommend you hold on to the 2.7 version, as there are still
    some packages using SciPy that have not been ported to Python 3 yet. Nevertheless,
    the companion software of this book was tested to work on both Python 2.7 and
    Python 3.4\.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: The Python software package can be downloaded from the official site ([https://www.python.org/downloads/](https://www.python.org/downloads/))
    and can be installed on all major systems such as Windows, Mac OS X, Linux, and
    Unix. It has also been ported to other platforms, including Palm OS, iOS, PlayStation,
    PSP, Psion, and so on.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: The following screenshot shows two popular options for coding in Python on an
    iPad—**PythonMath** and **Sage Math**. While the first application allows only
    the use of simple math libraries, the second permits the user to load and use
    both NumPy and SciPy remotely.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing SciPy](img/7702OS_01_01.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
- en: '**PythonMath** and **Sage** **Math** bring Python coding to iOS devices. **Sage
    Math** allows importing NumPy and SciPy.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: We shall not go into detail about the installation of Python on your system,
    since we already assume familiarity with this language. In case of doubt, we advise
    browsing the excellent book *Expert Python Programming*, *Tarek Ziadé*, *Packt
    Publishing*, where detailed explanations are given for installing many of the
    different implementations on different systems. It is usually a good idea to follow
    the directions given on the official Python website. We will also assume familiarity
    with carrying out interactive sessions in Python, as well as writing standalone
    scripts.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会详细介绍如何在您的系统上安装 Python，因为我们已经假设您熟悉这门语言。如果有疑问，我们建议浏览优秀的书籍 *Expert Python Programming*，作者
    *Tarek Ziadé*，由 *Packt Publishing* 出版，其中详细解释了在不同系统上安装许多不同实现的方法。通常，遵循官方 Python
    网站上的说明是个好主意。我们还将假设您熟悉在 Python 中进行交互式会话以及编写独立脚本。
- en: The latest libraries for both NumPy and SciPy can be downloaded from the official
    SciPy site ([http://scipy.org/](http://scipy.org/)). They both require a Python
    Version 2.4 or newer, so we should be in good shape at this point. We may choose
    to download the package from SourceForge ([http://sourceforge.net/projects/scipy/](http://sourceforge.net/projects/scipy/)),
    **Gohlke** ([http://www.lfd.uci.edu/~gohlke/pythonlibs/](http://www.lfd.uci.edu/~gohlke/pythonlibs/))
    or **Git** repositories (for instance, the **superpack** from [http://stronginference.com/ScipySuperpack/](http://stronginference.com/ScipySuperpack/)).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 和 SciPy 的最新库可以从官方 SciPy 网站下载 ([http://scipy.org/](http://scipy.org/))。它们都需要
    Python 版本 2.4 或更高，所以我们现在应该处于良好的状态。我们可以选择从 SourceForge ([http://sourceforge.net/projects/scipy/](http://sourceforge.net/projects/scipy/))、**Gohlke**
    ([http://www.lfd.uci.edu/~gohlke/pythonlibs/](http://www.lfd.uci.edu/~gohlke/pythonlibs/))
    或 **Git** 仓库（例如，来自 [http://stronginference.com/ScipySuperpack/](http://stronginference.com/ScipySuperpack/)
    的 **superpack**）下载软件包。
- en: It is also possible in some systems to use prepackaged executable bundles that
    simplify the process, such as the **Anaconda** ([https://store.continuum.io/cshop/anaconda/](https://store.continuum.io/cshop/anaconda/))
    or the **Enthought** ([https://www.enthought.com/products/epd/](https://www.enthought.com/products/epd/))
    Python distributions. Here, we will show you how to download and install Scipy
    on various platforms in the most common cases.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些系统中，也可以使用预包装的可执行捆绑包来简化过程，例如 **Anaconda** ([https://store.continuum.io/cshop/anaconda/](https://store.continuum.io/cshop/anaconda/))
    或 **Enthought** ([https://www.enthought.com/products/epd/](https://www.enthought.com/products/epd/))
    Python 发行版。在这里，我们将向您展示如何在最常见的情况下在各种平台上下载和安装 Scipy。
- en: Installing SciPy on Mac OS X
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Mac OS X 上安装 SciPy
- en: 'While installing SciPy on Mac OS X, you must consider some criteria before
    you install it on your system. This helps in smooth installation of SciPy. The
    following are the things to be taken care of:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Mac OS X 上安装 SciPy 时，您在系统上安装它之前必须考虑一些标准。这有助于 SciPy 的顺利安装。以下是需要注意的事项：
- en: 'For instance, in Mac OS X, if `MacPorts` is installed, the process could not
    be easier. Open a terminal as superuser, and at the prompt (`%`), issue the following
    command:'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如，在 Mac OS X 上，如果已安装 `MacPorts`，则过程将非常简单。以超级用户身份打开终端，并在提示符（`%`）下输入以下命令：
- en: '[PRE0]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This presents a list of all ports that either install SciPy or use SciPy as
    a requirement. For Python 2.7 we need to install `py27-scipy` issuing the following
    command:'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这列出了所有安装 SciPy 或将 SciPy 作为依赖项的端口。对于 Python 2.7，我们需要安装 `py27-scipy`，输入以下命令：
- en: '[PRE1]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: A few minutes later, the libraries are properly installed and ready to use.
    Note how `macports` also installs all needed requirements for us (including the
    NumPy libraries) without any extra effort on our part.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 几分钟后，库就正确安装并准备好使用了。注意 `macports` 还会为我们安装所有需要的依赖项（包括 NumPy 库），而无需我们做任何额外的工作。
- en: Installing SciPy on Unix/Linux
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Unix/Linux 上安装 SciPy
- en: 'Under any other Unix/Linux system, if either no ports are available or if the
    user prefers to install from the packages downloaded from either SourceForge or
    Git, it is enough to perform the following steps:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何其他 Unix/Linux 系统中，如果没有任何端口可用或用户更喜欢从 SourceForge 或 Git 下载的软件包中安装，则只需执行以下步骤：
- en: Unzip the NumPy and SciPy packages following the recommendation of the official
    pages. This creates two folders, one for each library.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照官方页面上的推荐，解压 NumPy 和 SciPy 软件包。这将创建两个文件夹，每个库一个。
- en: 'Within a terminal session, change directories to the folder where the NumPy
    libraries are stored, which contains the `setup.py` file. Find out which Fortran
    compiler you are using (one of `gnu`, `gnu95`, or `fcompiler`), and at prompt,
    issue the following command:'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在终端会话中，切换到存储NumPy库的文件夹，其中包含`setup.py`文件。找出你正在使用的Fortran编译器（`gnu`、`gnu95`或`fcompiler`之一），然后在提示符下输入以下命令：
- en: '[PRE2]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Once built, and on the same folder, issue the installation command. This should
    be all:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦构建完成，在同一文件夹下，输入安装命令。这应该就足够了：
- en: '[PRE3]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Installing SciPy on Windows
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Windows上安装SciPy
- en: 'You can install Scipy on Windows in many ways. The following are some recommended
    ways that you might want to have a look on:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过多种方式在Windows上安装Scipy。以下是一些推荐的方法，你可能想看看：
- en: Under Microsoft Windows, we recommend you install from the binary installers
    provided by the Anaconda or Enthought Python Distributions. Please, however, be
    aware of the memory requirements. Alternatively, you can download and install
    the SciPy stack or the libraries, individually.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Microsoft Windows下，我们建议你从Anaconda或Enthought Python发行版提供的二进制安装程序中进行安装。然而，请注意内存要求。或者，你可以下载并安装SciPy堆栈或库。
- en: The procedure for the installation of the SciPy libraries is exactly the same,
    that is, downloading and building before installing under Unix/Linux or downloading
    and running under Microsoft Windows. Note that different implementations of Python
    might have different requirements before installing NumPy and SciPy.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SciPy库的安装过程与上述过程完全相同，即在Unix/Linux下下载和构建后再安装，或在Microsoft Windows下下载和运行。请注意，不同的Python实现可能对安装NumPy和SciPy有不同的要求。
- en: Testing the SciPy installation
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试SciPy安装
- en: As you might know, computer systems are not infallible. Accordingly, before
    starting computing via SciPy, one needs to be sure it is working correctly. To
    that end, SciPy developers have included a test suit any user of SciPy can execute
    to be sure the SciPy being used is working fine. That way, much debugging time
    can be saved whenever an error occurs while using any function provided by SciPy.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所知，计算机系统并非完美无缺。因此，在开始使用SciPy进行计算之前，需要确保其运行正常。为此，SciPy的开发者提供了一套测试程序，任何SciPy用户都可以执行这些测试来确保所使用的SciPy运行良好。这样，在使用SciPy提供的任何函数时发生错误时，可以节省大量的调试时间。
- en: 'To run the test suite, at the Python prompt, one can run the following commands:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行测试程序，在Python提示符下，可以运行以下命令：
- en: '[PRE4]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Tip
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Downloading the example code**'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从[http://www.packtpub.com](http://www.packtpub.com)购买的所有Packt书籍的账户中下载示例代码文件。如果你在其他地方购买了这本书，你可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，以便将文件直接通过电子邮件发送给你。
- en: 'The reader should be aware that the execution of this test will take some time
    to finish. It should end with something like this:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 读者应该知道，执行此测试需要一些时间才能完成。它应该以类似以下内容结束：
- en: '![Testing the SciPy installation](img/7702OS_01_02.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![测试SciPy安装](img/7702OS_01_02.jpg)'
- en: 'This means that at the basic level, your SciPy installation is fine. Eventually,
    the test could end in the form:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着在基本层面上，你的SciPy安装是正常的。最终，测试可能以以下形式结束：
- en: '![Testing the SciPy installation](img/7702OS_01_03.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![测试SciPy安装](img/7702OS_01_03.jpg)'
- en: In this case, one needs to revise carefully the errors and the failed tests.
    A place to get help is the SciPy mailing list ([http://mail.scipy.org/pipermail/scipy-user/](http://mail.scipy.org/pipermail/scipy-user/))
    to which one could subscribe. We have included a Python script that the reader
    could use to run these tests that can be found at the companion software for this
    chapter that comes with the book.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，需要仔细检查错误和失败的测试。获取帮助的一个地方是SciPy邮件列表（[http://mail.scipy.org/pipermail/scipy-user/](http://mail.scipy.org/pipermail/scipy-user/)），你可以订阅该列表。我们包括了一个Python脚本，读者可以使用它来运行这些测试，这些测试可以在本书的配套软件中找到。
- en: SciPy organization
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SciPy组织
- en: SciPy is organized as a family of modules. We like to think of each module as
    a different field of mathematics. And as such, each has its own particular techniques
    and tools. You can find a list of some of the different modules included in SciPy
    at [http://docs.scipy.org/doc/scipy-0.14.0/reference/py-modindex.html](http://docs.scipy.org/doc/scipy-0.14.0/reference/py-modindex.html).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: Let's use some of its functions to solve a simple problem.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table shows the IQ test scores of 31 individuals:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '| 114 | 100 | 104 | 89 | 102 | 91 | 114 | 114 |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
- en: '| 103 | 105 | 108 | 130 | 120 | 132 | 111 | 128 |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
- en: '| 118 | 119 | 86 | 72 | 111 | 103 | 74 | 112 |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
- en: '| 107 | 103 | 98 | 96 | 112 | 112 | 93 |   |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
- en: A stem plot of the distribution of these 31 scores (refers to the IPython Notebook
    for this chapter) shows that there are no major departures from normality, and
    thus we assume the distribution of the scores to be close to normal. Now, estimate
    the mean IQ score for this population, using a 99 percent confidence interval.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: 'We start by loading the data into memory, as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'At this point, if we type `dir(scores)`, hit the *return* key followed by a
    dot (`.`), and press the *tab* key ;the system lists all possible methods inherited
    by the data from the NumPy library, as it is customary in Python. Technically,
    we could go ahead and compute the required `mean`, `xmean`, and corresponding
    confidence interval according to the formula, *xmean ± zcrit * sigma / sqrt(n)*,
    where `sigma` and `n` are respectively the standard deviation and size of the
    data, and *zcrit* is the critical value corresponding to the confidence ([http://en.wikipedia.org/wiki/Confidence_interval](http://en.wikipedia.org/wiki/Confidence_interval)).
    In this case, we could look up a table on any statistics book to obtain a crude
    approximation to its value, *zcrit = 2.576*. The remaining values may be computed
    in our session and properly combined, as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The output is shown as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We have thus computed the estimated mean IQ score (with value `105.83870967741936`)
    and the interval of confidence (from about `99.34` to approximately `112.33` ).
    We have done so using purely SciPy-based operations while following a known formula.
    But instead of making all these computations by hand and looking for critical
    values on tables, we could just ask SciPy.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: 'Note how the `scipy.stats` module needs to be loaded before we use any of its
    functions:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The variable `result` contains the solution to our problem with some additional
    information. Note that result is a tuple with three elements as the `help` documentation
    suggests:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The output of this command will depend on the installed version of SciPy. It
    might look like this (run the companion IPython Notebook for this chapter to see
    how the actual output from your system is, or run the command in a Python console):'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '![SciPy organization](img/7702OS_01_04.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
- en: 'Our solution is the first element of the tuple `result`; to see its contents,
    type:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The output is shown as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note how this output gives us the same average as before, but a slightly different
    confidence interval, due to more accurate computations through SciPy (the output
    might be different depending on the SciPy version available on your computer).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: How to find documentation
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is a wealth of information online, either from the official pages of SciPy
    (although its reference guides are somehow incomplete, as a work in progress),
    or from many other contributors that present tutorials on forums, YouTube, or
    personal sites. Several developers also publish examples of their work with great
    detail online.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: 'As we previously saw, it is also possible to obtain help from our interactive
    Python sessions. The libraries NumPy and SciPy make use of **docstrings** heavily,
    which makes it simple to request for help for usage and recommendations with the
    usual Python help system. For example, if in doubt of the usage of the `bayes_mvs`
    routine, the user can issue the following command:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'After executing this command, the system provides the necessary information.
    Equivalently, both NumPy and SciPy come bundled with their own help system, `info`.
    For instance, look at the following command:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This will offer a summary of all information parsed from the contents of all
    docstrings from the NumPy library associated with the given keyword (note it must
    be quoted). The user may navigate the output scrolling up and down, without the
    possibility of further interaction.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: This is convenient provided we already do know the function we want to use if
    we are unsure of its usage. But, what should we do if we don't know about the
    existence of this procedure, and suspect that it may exist? The usual Python way
    is to invoke the `dir()` command on a module, which lists all possible attributes.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: 'Interactive Python sessions make it easier to search for such information with
    the possibility of navigating and performing further searches inside the output
    of help sessions. For instance, type in the following command at prompt:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The output of this command will depend on the installed version of SciPy. It
    might look like this (run the companion IPython Notebook for this chapter to see
    the actual output from your system, or run the command in a Python console):'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '![How to find documentation](img/7702OS_01_05.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
- en: Note the colon (**:**) at the end of the screen—this is an old-school prompt.
    The system is in stand-by mode, expecting the user to issue a command (in the
    form of a single key). This also indicates that there are a few more pages of
    help following the given text. If we intend to read the rest of the help file,
    we may press spacebar to scroll to the next page.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: In this way, we can visit the following manual pages on this topic. It is also
    possible to navigate the manual pages scrolling one line of text at a time using
    the up and down arrow keys. When we are ready to quit the help session, we simply
    press (the keyboard letter) *Q*.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: It is also possible to search the help contents for a given string. In that
    case, at the prompt, we press the (*/*) slash key. The prompt changes from a colon
    into a slash, and we proceed to input the keyword we would like to search for.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以在帮助内容中搜索给定的字符串。在这种情况下，在提示符下，我们按 (*/*) 斜杠键。提示符从冒号变为斜杠，然后我们输入我们想要搜索的关键字。
- en: 'For example, is there a SciPy function that computes the **Pearson kurtosis**
    of a given dataset? At the slash prompt, we type in `kurtosis` and press *enter*.
    The help system takes us to the first occurrence of that string. To access successive
    occurrences of the string kurtosis, we press the *N* key (for next) until we find
    what we require. At that stage, we proceed to quit this help session (by pressing
    *Q*) and request more information on the function itself:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，是否存在一个SciPy函数可以计算给定数据集的**皮尔逊峰度**？在斜杠提示符下，我们输入 `kurtosis` 并按 *enter*。帮助系统带我们到该字符串的第一个出现位置。要访问字符串
    kurtosis 的后续出现，我们按 *N* 键（表示下一个）直到找到所需的内容。在那个阶段，我们继续退出这个帮助会话（通过按 *Q*），并请求有关该函数的更多信息：
- en: '[PRE15]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The output of this command will depend on the installed version of SciPy. It
    might look like this (run the companion IPython Notebook for this chapter to see
    how the actual output from your system is, or run the command in a Python console):'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令的输出将取决于SciPy的安装版本。它可能看起来像这样（运行本章的配套IPython Notebook以查看您系统的实际输出，或在Python控制台中运行该命令）：
- en: '![How to find documentation](img/7702OS_01_06.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![如何查找文档](img/7702OS_01_06.jpg)'
- en: Scientific visualization
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 科学可视化
- en: At this point, we would like to introduce you to another resource that we will
    be using to generate graphs, namely the matplotlib libraries. It may be downloaded
    from its official web page, [http://matplotlib.org/](http://matplotlib.org/),
    and installed following the standard Python commands. There is a good online documentation
    in the official web page, and we encourage the reader to dig deeper than the few
    commands that we will use in this book. For instance, the excellent monograph
    *Matplotlib for Python Developers*, *Sandro Tosi*, *Packt Publishing*, provides
    all that we would need and more. Other plotting libraries are available (commercial
    or otherwise that aim to very different and specific applications. The degree
    of sophistication and ease of use of matplotlib makes it one of the best options
    to generate graphics in scientific computing.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们想向您介绍另一个我们将使用来生成图表的资源，即matplotlib库。它可以从其官方网站 [http://matplotlib.org/](http://matplotlib.org/)
    下载，并按照标准的Python命令进行安装。官方网站上有很好的在线文档，我们鼓励读者比本书中我们将使用的几个命令更深入地挖掘。例如，由Sandro Tosi编写的优秀专著《Matplotlib
    for Python Developers》，由Packt Publishing出版，提供了我们所需要的一切以及更多。其他绘图库也可用（商业或其他，旨在针对非常不同和特定的应用。matplotlib的复杂程度和使用简便性使其成为科学计算中生成图形的最佳选择之一）。
- en: 'Once installed, it may be imported using `import matplotlib`. Among all its
    modules, we will focus on `pyplot` that provides a comfortable interface with
    the plotting libraries. For example, if we desire to plot a cycle of the sine
    function, we could execute the following code snippet:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，可以使用 `import matplotlib` 来导入。在其所有模块中，我们将重点关注 `pyplot`，它提供了一个与绘图库的舒适接口。例如，如果我们想要绘制正弦函数的周期，我们可以执行以下代码片段：
- en: '[PRE16]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We obtain the following plot:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到了以下图表：
- en: '![Scientific visualization](img/7702OS_01_07.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![科学可视化](img/7702OS_01_07.jpg)'
- en: Let us explain each command from the previous session. The first two commands
    are used to import `numpy` and `matplotlib.pyplot` as usual. We define an array
    *x* of 32 uniformly spaced floating point values from 0 to 2*π*, and define *y*
    to be the array containing the sine of the values from *x*. The command figure
    creates space in the memory to store the subsequent plots and puts in place an
    object of the `matplotlib.figure.Figure` form. The `plt.plot(x, numpy.sin(x))`
    command creates an object of the `matplotlib.lines.Line2D` form containing data
    with the plot of *x* against `numpy.sin(x)` together with a set of axes attached
    to it and labeled according to the ranges of the variables. This object is stored
    in the previous `Figure` object and is displayed on the screen via the `plt.show()`command.
    The last command in the session, `fig.savefig()`, saves the Figure object to whatever
    valid image format we desire (in this case, a **Portable** **Network** **Graphics**
    (**PNG**) image). From now on, in any code that deals with matplotlib commands,
    we will leave the option of showing/saving open.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: There are, of course, commands that control the style of axes, aspect ratio
    between axes, labeling, colors, legends, the possibility of managing several figures
    at the same time (subplots), and many more features to display all sorts of data.
    We will be discovering these as we progress with examples throughout the book.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: How to open IPython Notebooks
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book comes with a set of IPython Notebooks that will help you interactively
    test and modify or adapt to your needs to the code snippets shown in each chapter
    of the book. We should warn, however, that these IPython Notebooks will make sense
    only if read along side the book.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: In this regard, this book assumes familiarity with Python and some of its development
    environment as the IPython Notebook. Consequently, we will only refer to the documentation
    on the official website for IPython Notebook ([http://ipython.org/notebook.html](http://ipython.org/notebook.html)).
    You can find additional help at ([http://ipython.org/ipython-doc/stable/notebook/index.html](http://ipython.org/ipython-doc/stable/notebook/index.html)).
    Note that IPython Notebook is also available through **Wakari** ([https://wakari.io/](https://wakari.io/)),
    as a standalone or part of the Anaconda package, or by Enthought. If you're new
    to IPython Notebook, get started by looking at the example collection and reading
    the documentation.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: 'To use the files for this book, open a terminal and go to the directory where
    the file you want to open is stored (it should have the form `filename.ipynb`).
    At the command line, in that terminal, type:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: After hitting the *enter* key, the file should be displayed in the default web
    browser. In case that does not happen, please note that the IPython Notebook is
    officially supported on the browsers Chrome, Safari, and Firefox. For additional
    details refers to the *Browser Compatibility* section on the documentation currently
    at [http://ipython.org/ipython-doc/stable/install/install.html](http://ipython.org/ipython-doc/stable/install/install.html).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在按下*回车*键后，文件应该会在默认的网页浏览器中显示。如果未发生这种情况，请注意，IPython Notebook官方支持Chrome、Safari和Firefox浏览器。有关更多详细信息，请参阅当前位于[http://ipython.org/ipython-doc/stable/install/install.html](http://ipython.org/ipython-doc/stable/install/install.html)的文档中的*浏览器兼容性*部分。
- en: Once the `.ipynb` file has been opened, press and hold the *shift* key and hit
    *enter* to start executing the notebook cell by cell. Another way to execute the
    notebook cell by cell is via the player icon on the menu near the left of the
    cell labeled as **markdown**. Alternatively, from the **Cell** menu (on the top
    of the browser) you could choose among several options to execute the contents
    of the notebook.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦打开`.ipynb`文件，请按住*shift*键并按下*回车*键，以逐个执行笔记本单元格。另一种逐个执行笔记本单元格的方法是通过位于单元格标签**markdown**左侧菜单附近的播放器图标。或者，您可以从**单元格**菜单（位于浏览器顶部）中选择几个选项来执行笔记本的内容。
- en: To leave the notebook you could choose **Close** **and** **halt**, from the
    **File** menu on top of the browser below the label **Notebook**. Options to save
    the notebook can also be found under the **File** menu. To completely close the
    notebook browser you need to hit the keys *ctrl* and *C* simultaneously on the
    terminal where the notebook was started and follow the instructions after that.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 要离开笔记本，您可以从浏览器顶部的**文件**菜单中选择**关闭**和**停止**，位于**笔记本**标签下面的**笔记本**。保存笔记本的选项也可以在**文件**菜单下找到。要完全关闭笔记本浏览器，您需要在笔记本启动的终端上同时按下*ctrl*和*C*键，然后按照之后的指示操作。
- en: Summary
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you have learned the benefits of using the combination of Python,
    NumPy, SciPy, and matplotlib as a programming environment for any scientific endeavor
    that requires mathematics; in particular, anything related to numerical computations.
    You have explored the environment, learned how to download, install, and test
    the required libraries, used them for some quick computations, and figured out
    a few good ways to search for help.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您已经了解了使用Python、NumPy、SciPy和matplotlib组合作为任何需要数学的科学研究编程环境的益处；特别是与数值计算相关的一切。您已经探索了该环境，学习了如何下载、安装和测试所需的库，使用它们进行了一些快速计算，并找到了一些寻找帮助的好方法。
- en: In [Chapter 2](ch02.html "Chapter 2. Working with the NumPy Array As a First
    Step to SciPy"), *Working with the NumPy Array As a First Step to SciPy*, we will
    guide you through basic object creation in SciPy, including the best methods to
    manipulate data, or obtain information from it.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](ch02.html "第2章。作为SciPy第一步的NumPy数组操作")中，我们将引导您了解SciPy中的基本对象创建，包括操作数据或从中获取信息的最佳方法。
