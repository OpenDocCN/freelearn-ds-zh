- en: Chapter 8. Styling Your Map
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It''s the one word that strikes fear into the heart of developers: style. They
    think it''s a field for right-brain dominant artists. They treat color theory,
    typography, and whitespace as a foreign language. They long to push these tasks
    onto a web designer and focus on algorithms and API calls.'
  prefs: []
  type: TYPE_NORMAL
- en: Many small firms, government agencies, and departments don't have the luxury
    of having a web designer on their staff, or even on call. These small organizations
    tend to consist of one or more people hired for their technical and analytical
    skills, while design skills are left as an afterthought. Maybe you're working
    for one of those right now.
  prefs: []
  type: TYPE_NORMAL
- en: While this chapter may not turn you into an instant web designer, it will help
    you use CSS to effectively lay out your web map applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: How CSS is applied to an HTML document
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The different ways to position the map on a page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use Dojo's `dijit/layout` modules to style your page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to add Bootstrap to the layout of your page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The inner workings of CSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we mentioned in [Chapter 1](ch01.html "Chapter 1. Your First Mapping Application"),
    *Your First Mapping Application*, the **Cascading Style Sheet** (**CSS**) tells
    the browser how to render an HTML page. As the browser scans through the HTML,
    it scans through all the applicable CSS styles from CSS files, as well as any
    overriding styling within the HTML, to see how it should render the element. CSS
    descriptions, such as color and font size, often cascade down from one element
    to its children unless specifically overridden. For example, the style applied
    to the `div` tag will also apply to the `p` tags inside it, as shown in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: CSS works a little differently from most programming languages. In JavaScript,
    when you have a bug in part of your program, you can step through the code in
    your browser until you find the part that breaks. In CSS, however, the rules that
    define the look of an element can be stretched across multiple style sheets, and
    can even be written inside the element. The appearance of the element can also
    be impacted by elements both inside and out.
  prefs: []
  type: TYPE_NORMAL
- en: Selector specificity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The browser decides how elements should be styled by comparing the selector
    types used to define the style. It applies weights based on the type and quantity
    of selectors used to define a style. Browsers have five basic ranks for CSS selectors,
    based on how specific they are. Technically, there is a zeroth selector when you
    use the `*` to select every element on the page but, compared to the other selectors,
    it has no value. Selector ranks are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: By element (for example `h1`, `div`, or `p`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'By element classes, attributes, and pseudo selectors. Some examples include:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.email` or `.form` (classes)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`input[type=''text'']` (attributes)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`a:hover` or `p:first-child` (pseudo selectors)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: By IDs (for example `#main` or `#map-div`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By inline styles (`<p style=""></p>`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By styles marked `!important`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A common way to note specificity is to count the number of selectors in each
    category and separate them with a comma. A `p` selector gets a specificity of
    `1`, and a `p > a` gets a specificity of `2`. However, a `p.special > a` gets
    a specificity of `1,2`, because the class falls in a separate, higher category.
    A `#main` selector has a specificity of `1,0,0` while the inline style of a `p`
    tag earns a specificity of `1,0,0,0`. The powerful `!important` clause is the
    only thing that can override an inline selector, and it earns a specificity of
    `1,0,0,0,0`.
  prefs: []
  type: TYPE_NORMAL
- en: 'When comparing selector specificity, a single higher rank selector beats any
    number of lower rank selectors. In the case of a tie, the next lowest is compared.
    For example, let''s take a look at the following HTML snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'What do you think the background color will be from this? The correct answer
    is green. The `#citytxt` rule is a third ranked selector, since it points to an
    individual element on the page. If we look at the selectors along with their specificity
    ranks, they look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: So what happens when everything else is equal?
  prefs: []
  type: TYPE_NORMAL
- en: Equal selector specificity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When two or more rules have equal selector specificity, the last one listed
    wins. This is another feature of the cascading effect of CSS. We always put the
    custom CSS after the Dojo and ArcGIS JavaScript API style sheets in our applications.
    Any style changes we make will then not be overridden by the other style sheets.
  prefs: []
  type: TYPE_NORMAL
- en: With the last in wins rule, we can undo any unintended side effects of CSS rules
    applied to our widgets. We don't always have to resort to using `!important` tags
    or writing inline styles that get lost in our code reviews. We can use the same
    strength of selector specificity, and get the result we want, as long as we put
    it after the old rule.
  prefs: []
  type: TYPE_NORMAL
- en: Styling tips and tricks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have an idea how CSS works, we can build on this logic to create
    some working styles for our application:'
  prefs: []
  type: TYPE_NORMAL
- en: We'll begin by studying some of the bad patterns we need to avoid. We'll look
    at how they impact styles and further development negatively.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, we'll look into some good practices, such as using responsive design and
    normalizing style sheets.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We'll look at how to organize your style sheets to make them easier to extend
    and troubleshoot.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We'll cover how to position your map wherever your application needs it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Styling don'ts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before I go too far with telling you what to do, let''s go through a few things
    you should avoid. These bad design habits are typically picked up while working
    through beginner tutorials and copying and pasting single-page applications off
    the Internet:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Styling your elements inline: Trying to change the appearance of 20 or more
    paragraphs one by one is a pain.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Making everything important: The important clause allows you to override styles
    imposed by other widgets and imported style sheets, but don''t get carried away.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Having lots of references to individual IDs: A few element ID references are
    fine but, if you want to reuse your CSS files on other pages, or in other projects,
    you want them as general as possible. Not everyone will be using your `#pink_and_purple_striped_address2_input`
    element.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Writing new changes to your CSS file at the bottom of your page: We all know
    that last in wins, but if you slap every new update at the bottom of the page,
    the file becomes a junk-drawer of unorganized CSS rules.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Like any hard and fast rules, there are appropriate times to break them. But,
    by working within the bounds of these rules, you make it easier for yourself and
    others to maintain your applications.
  prefs: []
  type: TYPE_NORMAL
- en: Responsive design
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **responsive design** movement has taken a firm hold on website development.
    Responsive design revolves around the idea that a website should be useable on
    a wide variety of screen sizes, from large monitors to mobile phone screens. This
    reduces the costs of maintaining multiple websites for desktop and mobile users.
  prefs: []
  type: TYPE_NORMAL
- en: On the surface, responsive design involves assigning percentage widths and heights
    instead of fixed sizes, but there is more. Fluid grid layouts support multiple
    columns on wider screens while collapsing down to a single column on narrow screens.
    Images at different resolutions can be served for tablets and screens with retina
    displays for crisper looking images. CSS media queries can change how elements
    are displayed at different sizes or across different media.
  prefs: []
  type: TYPE_NORMAL
- en: Maps created with the ArcGIS JavaScript API work well with responsive design
    layouts. The maps keep track of the size of their HTML container elements, and
    size changes, while updating their contents. While the map scale stays the same,
    the extent is recalculated, and new map tiles are requested for locations not
    previously stored in memory. These changes can be triggered by resizing the browser
    window in a desktop, or turning a tablet sideways in a mobile browser.
  prefs: []
  type: TYPE_NORMAL
- en: Normalize.css
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It can be frustrating trying to make your application look good in your browser.
    Bringing in more browsers compounds the problem. Many browsers have unique rendering
    engines on different devices which make the same HTML elements look different
    on each device. Can't they all come to the same conclusion about how HTML elements
    should look?
  prefs: []
  type: TYPE_NORMAL
- en: Developers and designers often use a CSS file called `normalize.css` ([http://necolas.github.io/normalize.css/](http://necolas.github.io/normalize.css/)).
    This style sheet styles HTML elements so that they all look similar on different
    browsers and devices. It cuts down on the guesswork when you are concerned about
    how a page will look.
  prefs: []
  type: TYPE_NORMAL
- en: The `normalize.css` file style is typically inserted as the first style sheet
    in the HTML document head. Any changes you make to your website's style will then
    be made after the normalize rules are applied, and are less likely to be overridden.
    Some CSS frameworks like Twitter Bootstrap, already incorporate `normalize.css`
    in their style sheets.
  prefs: []
  type: TYPE_NORMAL
- en: Organizing your CSS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As previously discussed in the list of things not to do with your styles, the
    greatest offenders involve using higher selector specificity than needed, and
    treating the style sheet like a junk drawer. By organizing your style sheet properly,
    you can cut down on both of these offenders, and make your application easier
    to style and maintain. Let's go through a few best practices.
  prefs: []
  type: TYPE_NORMAL
- en: Organizing by selector specificity
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Current trends in web design call for CSS selectors to be organized from the
    lowest selector specificity to the highest. All your `div`, `h1`, and `p` tags
    might be put at the top of the page in your style sheet. After the appearances
    of the HTML elements are defined, you add various classes, selectors, and pseudo-selectors
    to describe how those would change the appearance of your elements. Finally, you
    could assign the appearances of an individual element by referencing its `id`.
  prefs: []
  type: TYPE_NORMAL
- en: Group by module
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Applications written with the ArcGIS JavaScript API can easily be organized
    by dijits, so why not arrange the style sheets by dijits as well? You can define
    the styling of individual dijits in the application after you define the style
    of your page. You can separate your CSS into logical sections using `/* comments
    */` between the module and dijit styles.
  prefs: []
  type: TYPE_NORMAL
- en: A class for everything
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A common practice when organizing code for selector specificity is to assign
    CSS classes as much as possible. Your map dijits may have an `.open` class that
    sets the `width` and `height`. The same dijit may have a `.closed` class that
    hides the dijit. Using the `dojo/dom-class` module, you can add, remove, and toggle
    the classes you define, however you want:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Using descriptive classes makes it easier to see what your application is doing,
    especially when you look at the page source. Descriptive classes are easier to
    reference in your style sheet.
  prefs: []
  type: TYPE_NORMAL
- en: Media queries
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Media queries provide effective ways to create custom looks and responsive grids
    on different screens. You can change the look of your site depending on the media
    type (screen, print, projector, and so on), the screen width, and even the pixel
    depth (retina displays versus standard desktop screens).
  prefs: []
  type: TYPE_NORMAL
- en: One thing to consider when organizing your code is that media queries should
    be placed after normal selectors. You can then take advantage of the last in wins
    principal, and use the same selectors to show different results when the screen
    size changes. I've been guilty of not paying attention to where I placed my media
    queries, and wasted time troubleshooting why my transitions weren't occurring.
    Only later did I find, in the mess of CSS, where I had applied a rule after my
    media query that cancelled the effect.
  prefs: []
  type: TYPE_NORMAL
- en: Positioning your map
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can't always rely on other frameworks and style sheets to properly position
    our maps. Sometimes, we have to get our hands dirty with CSS and do it ourselves.
    We'll go through some styling scenarios for our maps, and look at what CSS rules
    we need to apply to the map element to position it properly. All examples assume
    that you're creating a map on a `div` element with the ID of "map".
  prefs: []
  type: TYPE_NORMAL
- en: The fixed-width map
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By default, a map is created with a specific width and height. The width and
    height can be any non-negative number, from a whole screen, to a narrow column.
    If a height is not assigned, a default `height` of `400px` is assigned to the
    map element. You can see a simple, non-responsive CSS style for the map here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Stretching the map to fullscreen
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sometimes, your map is more than just an important piece of the page. Sometimes,
    the map needs to take up the whole page. That is what this full screen size represents.
    This style works, assuming that the HTML and body tags have a width and height
    of `100%` as well. This full screen style can also be assigned to a map that is
    supposed to fill `100%` of the area in another element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Floating the map to the side
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sometimes you don''t want a full map. Sometimes you just want a small map on
    the side of the screen, showing the location of whatever content it''s sharing
    the page with. You can then float the content off to the side. Floating an element
    to the right or the left lets other content fill in around it. This technique
    is typically used with photos and text, where the text flows around the photo.
    It works for a map as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Positioning the map top and center
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sometimes you need to center your map in your layout. You have some text, and
    you just want the map to line up nicely in the middle. With this centering trick,
    you can horizontally center any block type element on a page. Here, you set the
    position to relative, and you assign a right and left margin of auto. The browser
    will automatically assign an equal number to the right and left margin, essentially
    centering it. But remember, this must be performed on a block element (like the
    map) with relative positioning. Remove any of these criteria, and the trick doesn''t
    work, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Covering most of the page with the map
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you need an almost full page effect, where you need to leave room for a title
    bar or a column to the right or left, you can use absolute positioning to stretch
    the map. Absolute positioning takes the element outside of the normal layout,
    and lets you position it wherever you want.
  prefs: []
  type: TYPE_NORMAL
- en: Once you assign absolute positioning to the map, you can use the top, bottom,
    left, and right values to stretch the map out. By assigning a value of `0` to
    the `bottom`, you're telling the browser to set the bottom edge of the element
    at the bottom of the page. By assigning a value of `40px` to the `top`, you are
    telling the browser to assign the top of the map element 40 pixels from the top
    of the page. By assigning both left and right values, you are stretching the map
    element out in both directions.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a caveat, remember that absolutely positioned elements escape the bounds
    of their location, and will be positioned either on the whole page, or inside
    the first parent element that has relative positioning:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Centering a map of known width and height
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sometimes, you need to put your map in the center of the page. You want to
    create a modal effect, where the map is centered both vertically and horizontally,
    kind of like a modal dialog. If you know the width and height of the map, you
    can pull this off easily. You assign absolute positioning to the map, and set
    the `top` and `left` edges of the map at `50%` of the page. This won''t look right
    at first, until you assign the margins. The trick is to assign negative top and
    left margins, with values that are half the height and width of the map elements,
    respectively. What you get is a vertically and horizontally centered map that
    also works in older browsers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Centering a map of unknown width and height
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you implement percentages or other units into the styling of your map, you
    may not know at any one time how wide the map is. We can use absolute positioning
    to put the upper left corner of the element in the middle of the page, but how
    can the element be shifted so that it sits in the middle of the page? There is
    an easy way to center the map both vertically and horizontally when the width
    and height is variable. It requires a CSS3 transformation.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can translate or move the element in any direction by using the CSS3 transformation.
    The first value moves it to the right or left, while the second value moves it
    up and down. Negative values signify translation to the left and up. We can apply
    width and height in pixels, or we can apply a percentage of the element''s width
    to center it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: CSS3 transformations are available in most modern browsers, with some slightly
    older ones requiring vendor prefixes. Internet Explorer 8 and earlier do not support
    these transformations. See [http://caniuse.com/#feat=transforms2d](http://caniuse.com/#feat=transforms2d)
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the rising popularity of web development tools for browsers, your browser
    is the best tool for troubleshooting styling issues on a page. Mozilla Firefox
    initially had the most advanced inspection tools using a free third-party add-on
    called **Firebug**. Later, Chrome released its own development tools, while Firefox
    and Internet Explorer eventually built and improved their own. All modern desktop
    browsers now provide advanced JavaScript and CSS information for desktop and mobile
    devices.
  prefs: []
  type: TYPE_NORMAL
- en: Most browser developer tools can be opened using the same keyboard shortcuts.
    Internet Explorer responds to the *F12* key as far back as version 8\. Chrome
    and Firefox also respond to *F12*, with the keyboard combination of *Ctrl* + *Shift*
    + *I* (*Cmd* + *Opt* + *I* for a Mac).
  prefs: []
  type: TYPE_NORMAL
- en: Responsive resizers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All desktop browsers shrink and grow as you maximize and shrink them. Many modern
    browsers, however, have extra features and add-ons that can help you test your
    applications as if they were mobile browsers. The latest editions of the Firefox
    Developer Edition have a **Responsive Design View** that resizes your browser
    depending on the mobile device. It can rotate the screen when the user rotates
    their phone, and even triggers touch events. Google Chrome has a **Device Mode**
    that lets you select from popular smartphones and tablets, and can simulate slower
    network speeds, as well as pretending to be a mobile browser by changing the user
    agent it sends on requests. The latest versions of Internet Explorer also have
    these in their developer tools.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've reviewed the tools we can use to test our layouts, let's look
    at the tools the ArcGIS JavaScript API provides to lay out our applications.
  prefs: []
  type: TYPE_NORMAL
- en: Dojo layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dojo uses its own framework to control the layout of the application. Dojo's
    layouts can be found in the `dijit/layout` modules. These modules can be used
    to implement full page applications with all their features implemented, by using
    the Dojo framework.
  prefs: []
  type: TYPE_NORMAL
- en: Dijits created with `dijit/layout` modules can be encoded directly in the HTML.
    These are encoded using the `data-dojo-type` attribute. Properties for these,
    including styling and behavior, are encoded in the `data-dojo-props` attribute
    of the element. These dijits can be loaded from HTML by using the `dojo/parser`
    module to parse the HTML.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Applications where the `dijit/layout` elements are loaded through HTML often
    break when `dojo/parser` doesn't have access to a `layout` module. Make sure that
    all the modules for the layout elements used in the HTML have been loaded in the
    `require()` or `define()` statement that calls the `parse()` method of the `dojo/parser`
    module. Check for misspellings, either in the module loaders, or in the HTML `data-dojo-type`
    attributes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Layouts created with the `dijit/layout` modules can be divided into two classifications:
    **Containers** and **Panes**. Pane elements are generally located inside containers.'
  prefs: []
  type: TYPE_NORMAL
- en: Containers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Containers are parent elements that control the position and visibility of child
    panes assigned within them. Containers come in a variety of shapes and functions.
    Some can show multiple panes at once, while others show one or a few at a time.
    In JavaScript, if you have access to the Container `dijit`, you can access the
    pane elements inside it by calling the container's `getChildren()` method.
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at a few of the common containers.
  prefs: []
  type: TYPE_NORMAL
- en: LayoutContainer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `LayoutContainer` allow other panes to be positioned around a central pane.
    The center pane in a `LayoutContainer` is assigned a region attribute of center.
    Panes surrounding it are assigned region values of `top`, `bottom`, `right`, `left`,
    `leading`, or `trailing` to define their position in relation to the center pane.
    Multiple panes can have the same region attribute, such as two or three left panes.
    These will stack side by side to the left of the center pane.
  prefs: []
  type: TYPE_NORMAL
- en: BorderContainer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `BorderContainer` is derived from the `LayoutContainer`. As the name implies,
    it adds borders to section off the different panes in the application. `BorderContainers`
    can also provide `livesplitters`, which are draggable elements that let the user
    resize panes as they see fit.
  prefs: []
  type: TYPE_NORMAL
- en: AccordionContainer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `AccordionContainer` arrange and transition between panes using an accordion
    effectIn this arrangement, pane titles appear stacked on top of one another, and
    only one pane is visible at any time. The contents of the other panes are hidden
    by the accordion effect. When the user selects another pane within the `AccordionContainer`,
    the panes animate in a sliding motion, hiding the current pane and showing the
    selected pane.
  prefs: []
  type: TYPE_NORMAL
- en: TabContainer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `TabContainer` wi provides a tab-based organization of content. Tabs with
    the titles of the `ContentPane` enclosed describe the content, and clicking on
    those tabs removes the content visibility. The effect is similar to a Rolodex
    or a file folder, where you flip through tabs to view the content you need.
  prefs: []
  type: TYPE_NORMAL
- en: Panes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Panes in the `dijit/layout` modules provide a container in your application
    in which to put user controls and widgets. You can write HTML content or add other
    dijits. Panes can be encoded in HTML, or created with JavaScript and attached
    to their parent container. Let's look at a couple of the panes available in Dojo
    using the ArcGIS JavaScript API.
  prefs: []
  type: TYPE_NORMAL
- en: ContentPane
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `ContentPane` tile is the most common pane inserted in a container. It can
    be inserted as a pane inside all the other containers, with the exception of the
    `AccordionContainer`. On the surface, they appear to be glorified `div` elements
    that also track size and relationship to other dijits around them. But a `ContentPane`
    tile can also downloads and displays content from other web pages. Setting the
    `ContentPane` tile's `href` property will download and display another web page's
    HTML content in a single pane in your application.
  prefs: []
  type: TYPE_NORMAL
- en: AccordionPane
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One or more `AccordionPane` panes are added within an `AccordionContainer` to
    display their content in a collapsible format. `AccordionPane` titles are stacked
    on top of each other and, as you click the titles, the content slides into view,
    covering the previously open `AccordionPane`. An `AccordionPane` otherwise exhibits
    the same functional behavior as a `ContentPane`.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've reviewed how the Dojo framework handles the application layout,
    let's look at using an alternative style framework.
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you're looking for an alternative to Dojo's way of laying things out, you
    might consider Bootstrap. Bootstrap is a popular styling framework originally
    created by developers at Twitter. The story goes that the developers needed a
    way to release websites quickly, so they drafted a set of style sheets as a starting
    point for their projects. The styling templates proved very popular because they
    were easy to use and met the needs of most web developers. The template, originally
    named Twitter Blueprint, was later released in August 2011 as Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap provides developers with responsive design styles that work well on
    both desktop and mobile browsers. Responsive grids can be fine-tuned to give you
    multi-column layouts that collapse to smaller sizes in smaller browser windows.
    Bootstrap provides stylish looking form elements, and buttons big enough for fat
    fingers on phone browsers. The framework provides easy to understand CSS classes,
    and the documentation and style sheets provide guidance on how to use the framework.
    From picture icons that can be understood across language barriers, to JavaScript
    plugins that create modal dialogs, tabs, carousels, and other elements we're used
    to on websites. Entire applications can be created using Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: While Bootstrap styling doesn't require JavaScript libraries, all of the JavaScript
    plugins require jQuery to run. That is not very helpful for those of us using
    Dojo, but we do have an alternative.
  prefs: []
  type: TYPE_NORMAL
- en: ESRI-Bootstrap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Combining Bootstrap's ease of use and the compatibility with the ArcGIS JavaScript
    API, ESRI created ESRI-Bootstrap library ([https://github.com/Esri/bootstrap-map-js](https://github.com/Esri/bootstrap-map-js)).
    The style framework resizes maps and other elements just like Bootstrap, while
    many of the elements retain the same look and feel of a Bootstrap site. Dialogs
    don't run off the screen and elements respond to both mouse clicks and touches.
    Finally, ESRI Bootstrap can be used with either a combination of Dojo and jQuery,
    or Dojo alone.
  prefs: []
  type: TYPE_NORMAL
- en: We are going to add ESRI-Bootstrap on top of our Y2K application. You can use
    the `Dojo/jQuery` application we wrote in [Chapter 7](ch07.html "Chapter 7. Plays
    Well with Others"), *Plays Well with Others*. We're going to use a pure Dojo application
    written in parallel with jQuery to show how you can add ESRI-Bootstrap to an application
    without jQuery.
  prefs: []
  type: TYPE_NORMAL
- en: Restyling our app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We recently let our intern create multiple copies of our application using other
    frameworks. While they were busy doing that, we decided to write the update using
    just the ArcGIS JavaScript API. The Y2K society checked out our app and approved
    our changes, but that wasn't all they had to say.
  prefs: []
  type: TYPE_NORMAL
- en: When we met with the Y2K society board, we found a critic in a new member of
    the board. They thought it looked okay, but it needed a more modern look. When
    asked for details, they showed us websites on their tablet that they thought looked
    good. All the sites we were shown had one thing in common, they were all built
    using Bootstrap. He managed to convince others on the board that our app needed
    to embrace this new style.
  prefs: []
  type: TYPE_NORMAL
- en: Going back to the drawing board, we looked at what ESRI had to offer. We decided
    to incorporate ESRI-Bootstrap into our application. It provides a modern feel.
  prefs: []
  type: TYPE_NORMAL
- en: Adding ESRI-Bootstrap to our app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's start by adding references to ESRI-Bootstrap to our application. The ESRI-Bootstrap
    **Getting Started** page tells us to download a ZIP file of the latest version
    published on GitHub. Click on the **Download ZIP** button on the right hand side
    of the GitHub page. Once downloaded, unzip the file.
  prefs: []
  type: TYPE_NORMAL
- en: We're primarily interested in the `bootstrapmap.js` and `bootstrapmap.css` files
    in the `src/js/` and `src/css/` folders, respectively. The rest of the files contain
    templates and samples that you can look at to see how they use Bootstrap with
    their maps. Copy these files into the `js` and `css` folders.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we''ll add the necessary references to the head tag of our `index.html`
    file. We can remove the `nihilo.css` external style sheet as we''re no longer
    using the Dojo widgets to lay out our application, and add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have added the stylesheets, we need to add a reference to the Dojo
    version of bootstrap within our `dojoConfig` variable. The Dojo Bootstrap library,
    which covers features normally handled by jQuery, can be found at [https://github.com/xsokev/Dojo-Bootstrap](https://github.com/xsokev/Dojo-Bootstrap),
    but we''ll pull it from [https://rawgit.com](https://rawgit.com), which serves
    GitHub code directly. It should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Now that the head has been taken care of, it's time to overhaul the body.
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrapping our HTML
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since ESRI-Bootstrap provides plenty of CSS styling and JavaScript, most of
    the work involves overhauling our HTML. We can start by removing the references
    to the Dojo layout widgets in the body of our main HTML page. You can remove the
    `class="nihilo"` from the `body` element, the `dijit/layout/BorderContainer` from
    the `#mainwindow div`, and all the `dijit/layout/ContentPane` references.
  prefs: []
  type: TYPE_NORMAL
- en: Replacing the header with a navbar
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Our first job is to replace the header in the application. There are many ways
    you could start off a page like this but we'll use the Bootstrap `NavBar` in place
    of the header since the initial layout of the page was a full page app with no
    scrolling, You can see several examples of how to implement a `navbar` in HTML
    at [http://getbootstrap.com](http://getbootstrap.com).
  prefs: []
  type: TYPE_NORMAL
- en: We'll replace the header `div` with a `nav` element with the classes of `navbar`
    and `navbar-default` in the header. We'll add a `div` with the class of `container-fluid`
    inside that, since the size and appearance of its contents varies with different
    browsers. We'll add two `div` elements to the `container-fluid` div element. The
    first will have a class of `navbar-header`, and the second will have the classes
    of collapse and `navbar-collapse`.
  prefs: []
  type: TYPE_NORMAL
- en: We'll add a button to the `navbar-header` that will only appear when the browser
    is narrow enough. The button will have the classes of `navbar-toggle` and `collapsed`,
    plus a `data-toggle` attribute of collapse. This button will be floated to the
    far right when visible. The title of the map will go in a span next to the toggle
    button. This span will be given a class of `navbar-brand`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll add the button that shows our `Census` dijit to the `navbar-collapse`
    div element. We''ll add the `btn` classes (to make it a button), `btn-default`
    (to make it a default color), and `navbar-btn` (to make the button style fit in
    the `navbar`). When we are done, the HTML should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Rearranging the map
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now that the header has been redesigned, it''s time to look at the rest of
    the page. We will want to pull the census widget location out of the map in order
    to incorporate a Bootstrap modal dialog. We can move the footer inside the map
    to make up the space lost in previous versions. We can define the map and related
    items below the header, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Restyling our app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We'll need to manually restyle the page since we're removing all traces of Dojo's
    layout system. We can remove most of the styling references since they'll clash
    with the Bootstrap style. We'll keep the basic styling for the HTML and body tags,
    since they make the application a fullpage app. We'll also keep the styling for
    the `D3.js` graphs, but we can delete the rest of the styles.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to stretch the map from top to bottom and from end to end. If we don''t,
    the map will be limited in its width and height. We can use absolute positioning
    to stretch the map across the page. We''ll use the almost full page style we talked
    about earlier. Since the toolbar on the page is 50 pixels high (which you''ll
    see when you experiment with the app), we''ll set the top of the map to be `50px`
    from the top. The bottom, right, and left sides can positioned on the edges of
    the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The other item we''ll need to restyle is our footer element. We can position
    it at the bottom of the page, using the same technique we used on the map. We
    can also make the background semi-transparent, for a nice effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Once these styles have been applied, we can see a working example of our map.
    You can see an example of the map in the following picture:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Restyling our app](img/6459OT_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Making our Census dijit modal
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that our page has been transformed into a Bootstrap application, we need
    to add the same to our `Census` dijit. We need to tap into Bootstrap's modal widgets
    to imitate the effect of our floating dialog.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `Census.html` file in the `js/templates/` folder. In the base `div`
    element, add the classes `modal` and `fade`. The `modal` class tells Bootstrap
    that this will be a modal dialog, while `fade` describes how the element will
    hide and show. We''ll also add a data-backdrop attribute to the element and set
    it to `static`. This will create the generic modal dialog that keeps the rest
    of the page from being clicked while it''s open. In this case, we''ll abandon
    the idea that closing the widget will turn off the map''s click events:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: We'll add several more `div` elements to the base `div` to define the modal
    and the heading. One level inside our modal class, we'll add a `div` element with
    the classes of `modal-dialog` and `modal-sm`. The `modal-dialog` class defines
    the style for the modal, while `modal-sm` makes the modal smaller. Removing `modal-sm`
    creates a dialog that stretches across larger screens.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll create a `div` with the class `modal-content` in the `div` with the
    `modal-dialog` class, and two `div` elements inside that, with the classes of
    `modal-header` and `modal-body`, respectively. We''ll add our closing button and
    our title to the `modal-header` div. We''ll add the text and select dropdowns
    for the rest of our dijit to the `modal-body` div:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll replace the `dijit` closing event with Bootstrap''s modal closing event
    in the `modal-header` div. We''ll add a class of `close` to the button, and a
    `data-dismiss` attribute of modal. Most Bootstrap examples also include ARIA attributes
    to handle screen readers and other accessibility tools, so we''ll add an `aria-hidden`
    value of `true` so that screen-readers do not read aloud the *X* that we place
    in that. For the title, we''ll surround the `Census` data in a span with the class
    of `modal-title`. It should look like the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll add our description paragraph to the `modal-body` div and format the
    select elements so that they appear as form elements. We''ll add the class `form-group`
    to the `div` elements that surround our select dropdowns. This lines up the content
    and adds proper spacing and formatting. We''ll replace the `b` tags with `label`
    tags, and add the `control-label` class. We''ll add the `form-control` class to
    the select element. This stretches the `select` dropdown across the width of the
    dialog. Our HTML should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll add a `div` with the class of `modal-footer` to our `modal-body` div.
    Here, we can add another button to dismiss the dialog, just in case the user doesn''t
    notice the *x* in the upper corner. We''ll format the dismiss button by adding
    the classes `btn` and `btn-default`, affecting the shape and color, in that order.
    We''ll also add our `data-dismiss` attribute and set it equal to `modal`. It should
    look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the widget HTML is properly formatted, the application should look like
    the following image. Notice the dropdowns and buttons with wide spacing, which
    makes it easier to click on them on a smaller mobile device:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Making our Census dijit modal](img/6459OT_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now that the application is functionally complete, we can modify parts of it
    to create our own look and feel. Remember, Bootstrap was meant to be a starting
    point for creating a website. It doesn't have to be the end result. We can still
    change colors and other features to make the application our own.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we've discussed the different ways in which you can style your
    ArcGIS JavaScript API application. We looked at how CSS works, how rules affect
    each other, and how your browser decides which CSS rules to follow. We looked
    at the Dojo layout modules, and how those can be used to handle the appearance
    and functionality of your application. We also looked at ESRI-Bootstrap, a version
    of Bootstrap that can run with the ArcGIS JavaScript API. Finally, we added the
    ESRI-Bootstrap look to our application.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll be going mobile. We'll create a mobile application
    that works on most tablets and phone browsers.
  prefs: []
  type: TYPE_NORMAL
