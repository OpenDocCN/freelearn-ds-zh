["```py\nimport processing\n\n```", "```py\nprocessing.alglist()\n```", "```py\nCalculator------------------------------------------->modelertools:calculator\nRaster layer bounds---------------------------------->modelertools:rasterlayerbounds\nVector layer bounds---------------------------------->modelertools:vectorlayerbounds\nAdd autoincremental field---------------------------->qgis:addautoincrementalfield\nAdd field to attributes table------------------------>qgis:addfieldtoattributestable\nAdvanced Python field calculator--------------------->qgis:advancedpythonfieldcalculator\nBar plot--------------------------------------------->qgis:barplot\nBasic statistics for numeric fields------------------>qgis:basicstatisticsfornumericfields\nBasic statistics for text fields--------------------->qgis:basicstatisticsfortextfields\nClip------------------------------------------------->qgis:clip\n\n```", "```py\nprocessing.alglist('count')\n\n```", "```py\nCount points in polygon------------------------------>qgis:countpointsinpolygon\nCount points in polygon(weighted)-------------------->qgis:countpointsinpolygonweighted\nCount unique points in polygon----------------------->qgis:countuniquepointsinpolygon\nv.qcount - Indices for quadrant counts of sites lists.--->grass:v.qcount\n\n```", "```py\nprocessing.alghelp('qgis:creategrid')\n\n```", "```py\nALGORITHM: Create grid\n TYPE <ParameterSelection>\n EXTENT <ParameterExtent>\n HSPACING <ParameterNumber>\n VSPACING <ParameterNumber>\n OUTPUT <OutputVector>\n\nTYPE(Grid type)\n 0 - Rectangle (line)\n 1 - Rectangle (polygon)\n 2 - Diamond (polygon)\n 3 - Hexagon (polygon)\n\n```", "```py\nresults = processing.runalg(algorithm_name, param1, param2, …, paramN, output1, output2, …, outputM)\n\n```", "```py\nprocessing.load(res['OUTPUT'])\n```", "```py\n(1) import processing\n(2) resGrid = processing.runalg('qgis:creategrid', 3, '972921.0000478327274323,1023822.9999672472476959,147696.9999549686908722,208209.0000113248825073', 1000, 1000, None)\n(3) resCount = processing.runalg('qgis:countpointsinpolygon', resGrid['OUTPUT'], 'trees', 'NUMPOINTS', None)\n(4) finalMap = processing.runalg('qgis:extractbyattribute', resCount['OUTPUT'], 'NUMPOINTS', 1, '0', None)\n(5) processing.load(finalMap['OUTPUT'])\n\n```", "```py\nelement_name = element_type [optional_parameters]\n\n```", "```py\n1 ##Network analysis=group\n2 ##Shortest paths=name\n3 ##Road_layer=vector line\n4 ##Start_points=vector point\n5 ##End_points=vector point\n6 ##Shortest_paths=output vector\n\n```", "```py\n(1) from PyQt4.QtCore import QVariant\n(2)\n(3) from qgis.core import QGis, QgsFeature, QgsGeometry, QgsField, QgsFields\n(4) from qgis.networkanalysis import (QgsLineVectorLayerDirector,\n(5)    QgsDistanceArcProperter, QgsGraphBuilder, QgsGraphAnalyzer)\n(6)\n(7) from processing.core import GeoAlgorithmExecutionException\n(8) from processing.tools.vector import VectorWriter\n```", "```py\n(1) layerRoads = processing.getObjectFromUri(Road_layer)\n(2) layerStartPoints = processing.getObjectFromUri(Start_points)\n(3) layerStopPoints = processing.getObjectFromUri(End_points)\n```", "```py\n(1) if layerStartPoints.featureCount() != layerStopPoints.featureCount():\n(2)    GeoAlgorithmExecutionException(\n(3)       'Number of features in start and end point layers should be equal!')\n```", "```py\n(1) progress.setInfo('Gathering start and stop points')\n(2)\n(3) feats = layerStartPoints.getFeatures()\n(4) points = [f.geometry().asPoint() for f in feats]\n(5)\n(6) feats = layerStopPoints.getFeatures()\n(7) tmp = [f.geometry().asPoint() for f in feats]\n(8) points.extend(tmp)\n```", "```py\n(1) fields = QgsFields()\n(2) fields.append(QgsField('id', QVariant.Int, '', 10))\n(3) fields.append(QgsField('startPoint', QVariant.String, '', 254))\n(4) fields.append(QgsField('endPoint', QVariant.String, '', 254))\n(5) fields.append(QgsField('length', QVariant.Double, '', 20, 7))\n(6)\n(7) writer = VectorWriter(Shortest_paths, None, fields.toList(),\n(8)                   QGis.WKBLineString, layerRoads.crs())\n```", "```py\n(1) director = QgsLineVectorLayerDirector(layerRoads, -1, '', '', '', 3)\n(2) properter = QgsDistanceArcProperter()\n(3) director.addProperter(properter)\n(4) builder = QgsGraphBuilder(layerRoads.crs())\n```", "```py\n(1) progress.setInfo('Generating road graph...')\n(2) tiedPoints = director.makeGraph(builder, points)\n(3) graph = builder.graph()\n(4) del points\n```", "```py\n(1) count = layerStartPoints.featureCount()\n(2) total = 100.0 / float(count)\n(3)\n(4) ft = QgsFeature()\n(5) ft.setFields(fields)\n```", "```py\n( 1) progress.setInfo('Finding shortest paths...')\n( 2) for i in xrange(count):\n( 3)    nStart = tiedPoints[i]\n( 4)    nStop = tiedPoints[count + i]\n( 5)    idxStart = graph.findVertex(nStart)\n( 6)    idxStop = graph.findVertex(nStop)\n( 7)\n( 8)    tree, cost = QgsGraphAnalyzer.dijkstra(graph, idxStart, 0)\n( 9)\n(10)    if tree[idxStop] == -1:\n(11)        progress.setInfo('No path found from point ({:.6f}, {:.6f}) '\n(12)           'to point ({:.6f}, {:.6f})'.format(\n(13)              nStart.x(), nStart.y(), nStop.x(), nStop.y()))\n(14)    else:\n(15)        nodes = []\n(16)        curPos = idxStop\n(17)        while curPos != idxStart:\n(18)           nodes.append(graph.vertex(\n(19)              graph.arc(tree[curPos]).inVertex()).point())\n(20)           curPos = graph.arc(tree[curPos]).outVertex()\n(21)\n(22)        nodes.append(nStart)\n(23)        nodes.reverse()\n(24)\n(25)        ft.setGeometry(QgsGeometry.fromPolyline(nodes))\n(26)        ft['id'] = i\n(27)        ft['startPoint'] = '({:.6f}, {:.6f})'.format(nStart.x(), nStart.y())\n(28)        ft['endPoint'] = '({:.6f}, {:.6f})'.format(nStop.x(), nStop.y())\n(29)        ft['length'] = ft.geometry().length()\n(30)        writer.addFeature(ft)\n(31)\n(32)        progress.setPercentage(int(i * total))\n```", "```py\n(1) del graph\n(2) del writer\n```", "```py\nCalculates shortest path(s) between pairs of the start and end points on the given road network using QGIS network analysis library. Note: script does not takes into account road directions, all roads treated as two-ways roads.\n```"]