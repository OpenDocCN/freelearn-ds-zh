- en: Chapter 10. Listing and Describing GIS Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Getting a list of feature classes in a workspace
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restricting the list of objects returned with a wildcard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restricting the list of objects returned with a feature type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting a list of fields in a feature class or table
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Describe() function to return descriptive information about a feature
    class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Describe() function to return descriptive information about an image
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returning workspace information with the Describe() function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python provides you the ability to batch process data through scripting. This
    helps you to automate workflows and increases the efficiency of your data processing.
    For example, you may need to iterate through all the datasets on a disk and perform
    a specific action on each dataset. Your first step is often to perform an initial
    gathering of data before proceeding to the main body of the geoprocessing task.
    This initial data gathering is often accomplished through the use of one or more
    **List** methods found in ArcPy. These lists are returned as true Python list
    objects. These list objects can then be iterated over for further processing.
    ArcPy provides a number of functions that can be used to generate lists of data.
    These methods work on many different types of GIS data. In this chapter, we will
    examine the many functions provided by ArcPy for creating lists of data. In [Chapter
    3](ch03.html "Chapter 3. Managing Map Documents and Layers"), *Managing Map Documents
    and Layers*, we also covered a number of list functions. However, these functions
    were related to working with the `arcpy.mapping` module, and specifically for
    working with map documents and layers. The list functions we cover in this chapter
    reside directly in `arcpy` and are more generic in nature.
  prefs: []
  type: TYPE_NORMAL
- en: We will also cover the `Describe()` function for returning a dynamic object
    that will contain property groups. These dynamically generated `Describe` objects
    will contain property groups that are dependent upon the type of data that has
    been described. For instance, when the `Describe()` function is run against a
    feature class, the properties specific to a feature class will be returned. In
    addition, all data, regardless of the datatype, acquires a set of generic properties
    that we'll discuss.
  prefs: []
  type: TYPE_NORMAL
- en: Getting a list of feature classes in a workspace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As with all the list functions that we'll examine in this chapter, getting a
    list of feature classes in a workspace is often the first step in a multi-step
    process that your script will execute. For example, you might want to add a new
    field to all the feature classes in a file geodatabase. To do this, you'd first
    need to get a list of all the feature classes in the workspace.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ArcPy provides functions for getting lists of fields, indexes, datasets, feature
    classes, files, rasters, tables, and more. The `ListFeatureClasses()` function
    can be used to generate a list of all feature classes in a workspace. `ListFeatureClasses()`
    has three optional arguments that can be passed into the function and which will
    serve to limit the returned list. The first optional argument is a **wildcard**
    that can be used to limit the feature classes returned based on name. The second
    optional argument can be used to limit the feature classes returned based on the
    datatype (point, line, polygon, and so on). The third optional parameter limits
    the returned feature classes by a feature dataset. In this recipe, we will return
    all feature classes from a workspace.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to use the `ListFeatureClasses()` function
    to retrieve a list of the feature classes in a workspace:'
  prefs: []
  type: TYPE_NORMAL
- en: Open IDLE and create a new script window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the script as `c:\ArcpyBook\Ch10\ListFeatureClasses.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `arcpy` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the workspace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You must always remember to set the workspace using the environment settings
    before calling any list function. Otherwise, the list function will not know which
    dataset the list should be pulled from.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Call the `ListFeatureClasses()` function and assign the results to a variable
    called `fcList`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Loop through each of the feature classes in `fcList` and print them to the
    screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save and run the script. You should see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before calling any list function, you need to set the workspace environment
    setting, which sets the current workspace from which you will generate the list.
    The `ListFeatureClasses()` function can accept three optional parameters that
    will limit the feature classes that are returned. Most of the other list functions
    work in the same way. However, in this case, we've called the `ListFeatureClasses()`
    function without passing in any parameters. What this will do is return all the
    feature classes in the current workspace within a Python list object, which will
    then be iterated with a `for` loop. Each feature class returned in the list is
    represented as a string containing the name of the feature class.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Instead of returning a list of feature classes in a workspace, you may need
    to get a list of tables. The `ListTables()` function returns a list of standalone
    tables in a workspace. This list can be filtered by name or table type. Table
    types can include `dBase`, `INFO`, and `ALL`. All the values in the list are of
    the `string` datatype and contain the table names.
  prefs: []
  type: TYPE_NORMAL
- en: Restricting the list of feature classes returned with a wildcard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, the `ListFeatureClasses()` function will return all of the feature
    classes in a workspace. You will often want to restrict this list in some way.
    Three optional parameters can be passed into `ListFeatureClasses()` to restrict
    the feature classes returned. All are optional. The first parameter is a wildcard
    used to restrict the returned list based on some combination of characters. Other
    parameters that can be used to restrict the list to include a datatype and a feature
    dataset.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The list of feature classes returned by the `ListFeatureClasses()` function
    can be restricted through the use of a wildcard passed in as the first parameter.
    The wildcard is used to restrict the contents of your list based on a name. For
    example, you may want to return only a list of feature classes that start with
    the letter `B`. To accomplish this, you use a combination of an asterisk with
    any number of characters. The following code example shows the use of a wildcard
    to restrict the contents of a list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In this recipe, you will learn how to restrict the list of feature classes returned
    through the use of a wildcard.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to restrict the list of feature classes returned
    by the `ListFeatureClasses()` function through the use of a wildcard that is passed
    in as the first parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: Open IDLE and the `c:\ArcpyBook\Ch10\ListFeatureClasses.py` script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a wildcard that restricts the list of feature classes returned to only
    those feature classes that start with the letter `C`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save and run the script to see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `ListFeatureClasses()` function can accept three optional parameters including
    a wildcard that will restrict the list of feature classes by a name. In this case,
    we used the wildcard character (`*`) to restrict the list of feature classes returned
    to only those that begin with the letter `C`.
  prefs: []
  type: TYPE_NORMAL
- en: Restricting the list of feature classes returned with a feature type.
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In addition to using a wildcard to restrict the feature classes returned by
    `ListFeatureClasses()`, you can also filter by feature type.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In addition to using a wildcard to restrict the list returned by the `ListFeatureClasses()`
    function, a type restriction can also be applied in conjunction with the wildcard
    or by itself. For example, the following code sample shows the two being used
    together to restrict the list returned to only `polygon` feature classes beginning
    with the letter `B`. In this recipe, you will restrict the feature classes returned
    through the use of a feature type parameter along with a wildcard:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to restrict the list of feature classes returned
    by the `ListFeatureClasses()` function by feature type:'
  prefs: []
  type: TYPE_NORMAL
- en: Open IDLE and the `c:\ArcpyBook\Ch10\ListFeatureClasses.py` script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a second parameter to the `ListFeatureClasses()` function that restricts
    the feature classes returned to only those that start with the letter `C` and
    are of type `polygon`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save and run the script to see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The second, optional parameter that can be passed into the `ListFeatureClasses()`
    function can be used to limit the results by feature type. In this recipe, we
    have limited the feature classes to only polygon features. Other valid feature
    types include point and polyline, region.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The third, optional parameter that can be passed into the `ListFeatureClasses()`
    function is a feature dataset name. This will filter the list to return only the
    featured classes within a particular feature dataset. When this optional parameter
    is not included in the call to `ListFeatureClasses()`, only standalone feature
    classes from the current workspace will be returned.
  prefs: []
  type: TYPE_NORMAL
- en: Getting a list of fields in a feature class or table
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feature classes and tables contain one or more columns of attribute information.
    You can get a list of the fields in a feature class through the `ListFields()`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `ListFields()` function returns a list containing individual `Field` objects
    for each field in a feature class or table. Some functions, such as `ListFields()`
    and `ListIndexes()`, require an input dataset to operate on. You can use a wildcard
    or field type to constrain the list that is returned. Each `Field` object contains
    various read-only properties, including `Name`, `AliasName`, `Type`, `Length`,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to return a list of fields in a feature class:'
  prefs: []
  type: TYPE_NORMAL
- en: Open IDLE and create a new script window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the script as `c:\ArcpyBook\Ch10\ListOfFields.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import the `arcpy` module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the workspace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Call the `ListFields()` method on the `Burglary` feature class inside a `try`
    block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Loop through each of the fields in the list of fields and print the name, type,
    and length. Make sure you indent as needed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `except` block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The entire script should appear as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save and run the script. You should see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `ListFields()` function returns a list of fields from a feature class or
    a table. This function accepts one required parameter, which is a reference to
    the feature class or table the function should be executed against. You can limit
    the fields returned by using a wild card or a field type. In this recipe, we only
    specified a feature class, which indicates that all fields will be returned. For
    each field returned, we printed the name, field type, and field length. As I mentioned
    earlier when discussing the `ListFeatureClasses()` function, `ListFields()` and
    all the other list functions are often called as the first step in a multi-step
    process within a script. For example, you might want to update the population
    statistics contained within a population field for a census tracts feature class.
    To do this, you could get a list of all the fields within a feature class, loop
    through this list looking for a specific field name that contains the population
    information, and then update the population information for each row. Alternatively,
    the `ListFields()` function accepts a wildcard as one of its parameters. So, if
    you know the name of the population field ahead of time, pass this in as the wildcard
    and only a single field will be returned.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Describe() function to return descriptive information about a feature
    class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All datasets contain information that is descriptive in nature. For example,
    a feature class has a name, shape type, spatial reference, and so on. This information
    can be valuable to your scripts when you seek specific information before continuing
    with further processing in the script. For example, you might want to perform
    a buffer only on polyline feature classes instead of points or polygons. Using
    the `Describe()` function you can obtain basic descriptive information about any
    dataset. You can think of this information as metadata.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Describe()` function provides you with the ability to get basic information
    about datasets. These datasets could include feature classes, tables, ArcInfo
    coverage, layer files, workspaces, rasters, and others. A `Describe` object is
    returned, which contains specific properties based on the datatype being described.
    Properties on the `Describe` object are organized into property groups, and all
    datasets fall into at least one property group. For example, performing a `Describe()`
    against a geodatabase would return the **GDB** `FeatureClass`, `Table`, and `Dataset`
    property groups. Each of these property groups contains specific properties that
    can be examined.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Describe()` function accepts a string parameter, which is a pointer to
    a data source. In the following code example, we pass in a feature class contained
    within a file geodatabase. The function returns a `Describe` object that contains
    a set of dynamic properties called property groups. We can then access these various
    properties, as we have done in this case, by simply printing the properties using
    the `print` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: All datasets, irrespective of their type, contain a default set of properties
    located on the `Describe` object. These are read-only properties. Some of the
    more commonly used properties include `dataType`, `catalogPath`, `name`, `path`,
    and `file`.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, you will write a script that obtains descriptive information
    about a feature class using the `Describe()` function.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to obtain descriptive information about a feature
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: Open IDLE and create a new script window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the script as `c:\ArcpyBook\Ch10\DescribeFeatureClass.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import the `arcpy` module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'import arcpy     Set the workspace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start a `try` block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Call the `Describe()` function on the `Burglary` feature class and print the
    shape type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get a list of fields in the feature class and print the name, type, and length
    of each:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get the geographic extent of the feature class and print the coordinates that
    define the extent:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `except` block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The entire script should appear as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save and run the script. You should see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Executing a `Describe()` function against a feature class, which we have done
    in this script, returns a `FeatureClass` property group along with access to the
    `Table` and `Dataset` property groups. In addition to returning a `FeatureClass`
    property group, you also have access to a `Table` properties group.
  prefs: []
  type: TYPE_NORMAL
- en: The `Table` property group is important primarily because it gives you access
    to the fields in a standalone table or feature class. You can also access any
    indexes on the table or feature class through this property group. The `Fields`
    property on table properties returns a Python list containing one `Field` object
    for each field in the feature class. Each field has a number of read-only properties
    including the `name`, `alias`, `length`, `type`, `scale`, `precision`, and so
    on. The most obviously useful properties are `name` and `type`. In this script,
    we printed the field name, type, and length. Note the use of a Python `for` loop
    to process each field in the Python list.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we printed out the geographic extent of the layer through the use of
    the `Extent` object, returned by the `extent` property on the `Dataset` property
    group. The `Dataset` property group contains a number of useful properties. Perhaps,
    the most used properties include `extent` and `spatialReference`, as many geoprocessing
    tools and scripts require this information at some point during execution. You
    can also obtain the `datasetType` and versioning information along with several
    other properties.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Describe() function to return descriptive information about an image
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Raster files also contain descriptive information, which can be returned by
    the `Describe()` function.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A raster dataset can also be described through the use of the `Describe()` function.
    In this recipe, you will describe a raster dataset by returning its extent and
    spatial reference. The `Describe()` function contains a reference to the general
    purpose `Dataset` properties group as well, which contains a reference to the
    `SpatialReference` object for the dataset. The `SpatialReference` object can then
    be used to get detailed spatial reference information for the dataset.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to obtain descriptive information about a raster
    image file:'
  prefs: []
  type: TYPE_NORMAL
- en: Open IDLE and create a new script window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the script as `c:\ArcpyBook\Ch10\DescribeRaster.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `arcpy` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the workspace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start a `try` block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Call the `Describe()` function on a raster dataset making sure you indent the
    next few lines of code inside the `try` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get the extent of the raster dataset and print it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get a reference to the `SpatialReference` object and print it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `except` block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The entire script should appear as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Savr and run the script. You should see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe is very similar to the previous one. The difference is that we're
    using the `Describe()` function against a raster dataset instead of against a
    vector feature class. In both cases, we've returned the geographic extent of the
    datasets using the `extent` object. However, in the script we've also obtained
    the `SpatialReference` object for the raster dataset and printed the information
    about this object including the name and type.
  prefs: []
  type: TYPE_NORMAL
- en: Returning workspace information with the Describe() function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are several different types of geodatabases that can be used with ArcGIS,
    including personal, file, and enterprise. As we saw in [Chapter 8](ch08.html "Chapter 8. Querying
    and Selecting Data"), *Querying and Selecting Data*, the construction of queries
    will vary depending upon the type of geodatabase a dataset resides within. Your
    scripts may or may not know the geodatabase type ahead of time. To make your scripts
    more robust in the case of queries, you could use the `Describe()` function against
    a workspace to capture this information and construct your query accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Workspace` property group provides information about a workspace (such
    as a folder, personal or file geodatabase, or enterprise geodatabase). These properties
    are particularly helpful when obtaining information about an ArcSDE connection.
    Information that can be obtained through this property group includes the connection
    information when the workspace is an ArcSDE workspace, domains associated with
    the geodatabase, and the workspace type, which can be `FileSystem`, `LocalDatabase`,
    or `RemoteDatabase`. `LocalDatabase` refers to personal or file geodatabases,
    while `RemoteDatabase` refers to an `ArcSDE` geodatabase. In this recipe, you'll
    use the `Workspace` property group to obtain information about a file geodatabase.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to obtain descriptive information about a workspace:'
  prefs: []
  type: TYPE_NORMAL
- en: Open IDLE and create a new script window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the script as `c:\ArcpyBook\Ch10\DescribeWorkspace.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `arcpy` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start a `try` block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Call the `Describe()` function on the `CityOfSanAntonio` geodatabase and make
    sure to indent this statement inside the try statement. The two print statements
    below should also be indented.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print the workspace type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print the detailed workspace information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `except` block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save and run the script. You should see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `workspaceType` property returns one of three values: `FileSystem`, `LocalDatabase`,
    or `RemoteDatabase`. The `localDatabase` value indicates that you''re working
    with either a personal or file geodatabase. However, it isn''t any more specific.
    To get the specific geodatabase, you can retrieve the `workspaceFactoryProgID`
    property, which will indicate the type of geodatabase. In this case, it''s a file
    geodatabase.'
  prefs: []
  type: TYPE_NORMAL
