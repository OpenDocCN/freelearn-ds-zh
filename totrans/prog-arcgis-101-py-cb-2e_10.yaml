- en: Chapter 10. Listing and Describing GIS Data
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章。列出和描述GIS数据
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下内容：
- en: Getting a list of feature classes in a workspace
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取工作空间中要素类的列表
- en: Restricting the list of objects returned with a wildcard
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用通配符限制返回的对象列表
- en: Restricting the list of objects returned with a feature type
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 限制返回的对象列表中的要素类型
- en: Getting a list of fields in a feature class or table
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取要素类或表中的字段列表
- en: Using the Describe() function to return descriptive information about a feature
    class
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Describe()函数返回关于要素类的描述性信息
- en: Using the Describe() function to return descriptive information about an image
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Describe()函数返回关于图像的描述性信息
- en: Returning workspace information with the Describe() function
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Describe()函数返回工作空间信息
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Python provides you the ability to batch process data through scripting. This
    helps you to automate workflows and increases the efficiency of your data processing.
    For example, you may need to iterate through all the datasets on a disk and perform
    a specific action on each dataset. Your first step is often to perform an initial
    gathering of data before proceeding to the main body of the geoprocessing task.
    This initial data gathering is often accomplished through the use of one or more
    **List** methods found in ArcPy. These lists are returned as true Python list
    objects. These list objects can then be iterated over for further processing.
    ArcPy provides a number of functions that can be used to generate lists of data.
    These methods work on many different types of GIS data. In this chapter, we will
    examine the many functions provided by ArcPy for creating lists of data. In [Chapter
    3](ch03.html "Chapter 3. Managing Map Documents and Layers"), *Managing Map Documents
    and Layers*, we also covered a number of list functions. However, these functions
    were related to working with the `arcpy.mapping` module, and specifically for
    working with map documents and layers. The list functions we cover in this chapter
    reside directly in `arcpy` and are more generic in nature.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Python通过脚本提供批量处理数据的能力。这有助于您自动化工作流程并提高数据处理效率。例如，您可能需要遍历磁盘上的所有数据集并对每个数据集执行特定操作。您的第一步通常是先进行初步的数据收集，然后再进行地理处理任务的主要内容。这种初步的数据收集通常是通过使用ArcPy中找到的一个或多个**List**方法来完成的。这些列表作为真正的Python列表对象返回。然后，这些列表对象可以被迭代以进行进一步处理。ArcPy提供了一些函数，可以用来生成数据列表。这些方法适用于许多不同类型的GIS数据。在本章中，我们将检查ArcPy提供的用于创建数据列表的许多函数。在[第3章](ch03.html
    "第3章。管理地图文档和图层")中，我们也介绍了一些列表函数。然而，这些函数与使用`arcpy.mapping`模块有关，特别是用于处理地图文档和图层。本章中我们介绍的列表函数直接位于`arcpy`中，并且更具有通用性。
- en: We will also cover the `Describe()` function for returning a dynamic object
    that will contain property groups. These dynamically generated `Describe` objects
    will contain property groups that are dependent upon the type of data that has
    been described. For instance, when the `Describe()` function is run against a
    feature class, the properties specific to a feature class will be returned. In
    addition, all data, regardless of the datatype, acquires a set of generic properties
    that we'll discuss.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将介绍用于返回包含属性组的动态对象的`Describe()`函数。这些动态生成的`Describe`对象将包含依赖于所描述数据类型的属性组。例如，当`Describe()`函数针对要素类运行时，将返回特定于要素类的属性。此外，所有数据，无论数据类型如何，都会获得一组通用属性，我们将在后面讨论。
- en: Getting a list of feature classes in a workspace
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取工作空间中要素类的列表
- en: As with all the list functions that we'll examine in this chapter, getting a
    list of feature classes in a workspace is often the first step in a multi-step
    process that your script will execute. For example, you might want to add a new
    field to all the feature classes in a file geodatabase. To do this, you'd first
    need to get a list of all the feature classes in the workspace.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 就像本章我们将检查的所有列表函数一样，获取工作空间中要素类的列表通常是您的脚本执行的多步过程中的第一步。例如，您可能想要向文件地理数据库中的所有要素类添加一个新字段。为此，您首先需要获取工作空间中所有要素类的列表。
- en: Getting ready
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: ArcPy provides functions for getting lists of fields, indexes, datasets, feature
    classes, files, rasters, tables, and more. The `ListFeatureClasses()` function
    can be used to generate a list of all feature classes in a workspace. `ListFeatureClasses()`
    has three optional arguments that can be passed into the function and which will
    serve to limit the returned list. The first optional argument is a **wildcard**
    that can be used to limit the feature classes returned based on name. The second
    optional argument can be used to limit the feature classes returned based on the
    datatype (point, line, polygon, and so on). The third optional parameter limits
    the returned feature classes by a feature dataset. In this recipe, we will return
    all feature classes from a workspace.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: ArcPy提供了获取字段、索引、数据集、要素类、文件、栅格、表等列表的函数。`ListFeatureClasses()`函数可以用来生成工作空间中所有要素类的列表。`ListFeatureClasses()`有三个可选参数可以传递给函数，这些参数将用于限制返回的列表。第一个可选参数是一个**通配符**，可以用来根据名称限制返回的要素类。第二个可选参数可以用来根据数据类型（点、线、多边形等）限制返回的要素类。第三个可选参数通过要素数据集限制返回的要素类。在本例中，我们将返回工作空间中的所有要素类。
- en: How to do it…
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Follow these steps to learn how to use the `ListFeatureClasses()` function
    to retrieve a list of the feature classes in a workspace:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤学习如何使用`ListFeatureClasses()`函数检索工作空间中要素类的列表：
- en: Open IDLE and create a new script window.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开IDLE并创建一个新的脚本窗口。
- en: Save the script as `c:\ArcpyBook\Ch10\ListFeatureClasses.py`.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将脚本保存为`c:\ArcpyBook\Ch10\ListFeatureClasses.py`。
- en: 'Import the `arcpy` module:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`arcpy`模块：
- en: '[PRE0]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Set the workspace:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置工作空间：
- en: '[PRE1]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You must always remember to set the workspace using the environment settings
    before calling any list function. Otherwise, the list function will not know which
    dataset the list should be pulled from.
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你必须始终记住在调用任何列表函数之前使用环境设置设置工作空间。否则，列表函数将不知道应该从哪个数据集提取列表。
- en: 'Call the `ListFeatureClasses()` function and assign the results to a variable
    called `fcList`:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用`ListFeatureClasses()`函数并将结果赋值给名为`fcList`的变量：
- en: '[PRE2]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Loop through each of the feature classes in `fcList` and print them to the
    screen:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 遍历`fcList`中的每个要素类并在屏幕上打印它们：
- en: '[PRE3]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Save and run the script. You should see the following output:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并运行脚本。你应该看到以下输出：
- en: '[PRE4]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: How it works…
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Before calling any list function, you need to set the workspace environment
    setting, which sets the current workspace from which you will generate the list.
    The `ListFeatureClasses()` function can accept three optional parameters that
    will limit the feature classes that are returned. Most of the other list functions
    work in the same way. However, in this case, we've called the `ListFeatureClasses()`
    function without passing in any parameters. What this will do is return all the
    feature classes in the current workspace within a Python list object, which will
    then be iterated with a `for` loop. Each feature class returned in the list is
    represented as a string containing the name of the feature class.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用任何列表函数之前，你需要设置工作空间环境设置，这将设置当前工作空间，你将从中生成列表。`ListFeatureClasses()`函数可以接受三个可选参数，这些参数将限制返回的要素类。大多数其他列表函数以相同的方式工作。然而，在这种情况下，我们没有传递任何参数就调用了`ListFeatureClasses()`函数。这将返回当前工作空间中所有要素类的Python列表对象，然后使用`for`循环进行迭代。列表中返回的每个要素类都表示为一个包含要素类名称的字符串。
- en: There's more…
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: Instead of returning a list of feature classes in a workspace, you may need
    to get a list of tables. The `ListTables()` function returns a list of standalone
    tables in a workspace. This list can be filtered by name or table type. Table
    types can include `dBase`, `INFO`, and `ALL`. All the values in the list are of
    the `string` datatype and contain the table names.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 除了返回工作空间中要素类的列表之外，你可能还需要获取一个表列表。`ListTables()`函数返回工作空间中独立表的列表。此列表可以根据名称或表类型进行筛选。表类型可以包括`dBase`、`INFO`和`ALL`。列表中的所有值都是`string`数据类型，并包含表名。
- en: Restricting the list of feature classes returned with a wildcard
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用通配符限制返回的要素类列表
- en: By default, the `ListFeatureClasses()` function will return all of the feature
    classes in a workspace. You will often want to restrict this list in some way.
    Three optional parameters can be passed into `ListFeatureClasses()` to restrict
    the feature classes returned. All are optional. The first parameter is a wildcard
    used to restrict the returned list based on some combination of characters. Other
    parameters that can be used to restrict the list to include a datatype and a feature
    dataset.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`ListFeatureClasses()` 函数将返回工作空间中的所有特征类。你通常会想以某种方式限制此列表。可以将三个可选参数传递给 `ListFeatureClasses()`
    以限制返回的特征类。所有参数都是可选的。第一个参数是一个通配符，用于根据字符组合限制返回的列表。其他可以用来限制列表的参数包括数据类型和特征数据集。
- en: Getting ready
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The list of feature classes returned by the `ListFeatureClasses()` function
    can be restricted through the use of a wildcard passed in as the first parameter.
    The wildcard is used to restrict the contents of your list based on a name. For
    example, you may want to return only a list of feature classes that start with
    the letter `B`. To accomplish this, you use a combination of an asterisk with
    any number of characters. The following code example shows the use of a wildcard
    to restrict the contents of a list:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将通配符作为第一个参数传入，可以限制 `ListFeatureClasses()` 函数返回的特征类列表。通配符用于根据名称限制列表内容。例如，你可能只想返回以字母
    `B` 开头的特征类列表。为此，你使用星号与任意数量的字符的组合。以下代码示例显示了如何使用通配符来限制列表内容：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In this recipe, you will learn how to restrict the list of feature classes returned
    through the use of a wildcard.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，你将学习如何通过使用通配符来限制返回的特征类列表。
- en: How to do it…
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps to learn how to restrict the list of feature classes returned
    by the `ListFeatureClasses()` function through the use of a wildcard that is passed
    in as the first parameter:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤学习如何通过传递给第一个参数的通配符来限制 `ListFeatureClasses()` 函数返回的特征类列表：
- en: Open IDLE and the `c:\ArcpyBook\Ch10\ListFeatureClasses.py` script.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 IDLE 和 `c:\ArcpyBook\Ch10\ListFeatureClasses.py` 脚本。
- en: 'Add a wildcard that restricts the list of feature classes returned to only
    those feature classes that start with the letter `C`:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个通配符，以限制返回的特征类列表仅包含以字母 `C` 开头的特征类：
- en: '[PRE6]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Save and run the script to see the following output:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并运行脚本以查看以下输出：
- en: '[PRE7]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How it works…
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `ListFeatureClasses()` function can accept three optional parameters including
    a wildcard that will restrict the list of feature classes by a name. In this case,
    we used the wildcard character (`*`) to restrict the list of feature classes returned
    to only those that begin with the letter `C`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`ListFeatureClasses()` 函数可以接受三个可选参数，包括一个通配符，该通配符将根据名称限制特征类列表。在这种情况下，我们使用了通配符字符（`*`）来限制返回的特征类列表，使其仅包含以字母
    `C` 开头的特征类。'
- en: Restricting the list of feature classes returned with a feature type.
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过特征类型限制返回的特征类列表。
- en: In addition to using a wildcard to restrict the feature classes returned by
    `ListFeatureClasses()`, you can also filter by feature type.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用通配符来限制 `ListFeatureClasses()` 返回的特征类外，还可以通过特征类型进行过滤。
- en: Getting ready
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In addition to using a wildcard to restrict the list returned by the `ListFeatureClasses()`
    function, a type restriction can also be applied in conjunction with the wildcard
    or by itself. For example, the following code sample shows the two being used
    together to restrict the list returned to only `polygon` feature classes beginning
    with the letter `B`. In this recipe, you will restrict the feature classes returned
    through the use of a feature type parameter along with a wildcard:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用通配符来限制 `ListFeatureClasses()` 函数返回的列表外，还可以结合通配符或单独应用类型限制。例如，以下代码示例显示了两者结合使用，以将返回的列表限制为仅包含以字母
    `B` 开头的 `polygon` 特征类。在本食谱中，你将通过使用特征类型参数和通配符来限制返回的特征类。
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: How to do it…
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps to learn how to restrict the list of feature classes returned
    by the `ListFeatureClasses()` function by feature type:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤学习如何通过特征类型限制 `ListFeatureClasses()` 函数返回的特征类列表：
- en: Open IDLE and the `c:\ArcpyBook\Ch10\ListFeatureClasses.py` script.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 IDLE 和 `c:\ArcpyBook\Ch10\ListFeatureClasses.py` 脚本。
- en: 'Add a second parameter to the `ListFeatureClasses()` function that restricts
    the feature classes returned to only those that start with the letter `C` and
    are of type `polygon`:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向 `ListFeatureClasses()` 函数添加第二个参数，以限制返回的要素类仅限于以字母 `C` 开头且类型为 `polygon` 的那些：
- en: '[PRE9]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Save and run the script to see the following output:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并运行脚本以查看以下输出：
- en: '[PRE10]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: How it works…
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The second, optional parameter that can be passed into the `ListFeatureClasses()`
    function can be used to limit the results by feature type. In this recipe, we
    have limited the feature classes to only polygon features. Other valid feature
    types include point and polyline, region.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们已将要素类限制为仅包含多边形要素。其他有效的要素类型包括点、折线和区域。
- en: There's more...
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: The third, optional parameter that can be passed into the `ListFeatureClasses()`
    function is a feature dataset name. This will filter the list to return only the
    featured classes within a particular feature dataset. When this optional parameter
    is not included in the call to `ListFeatureClasses()`, only standalone feature
    classes from the current workspace will be returned.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 可以传递给 `ListFeatureClasses()` 函数的第三个可选参数是要素数据集名称。这将过滤列表，只返回特定要素数据集中的要素类。当此可选参数不包括在
    `ListFeatureClasses()` 调用中时，只返回当前工作空间中的独立要素类。
- en: Getting a list of fields in a feature class or table
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取要素类或表中的字段列表
- en: Feature classes and tables contain one or more columns of attribute information.
    You can get a list of the fields in a feature class through the `ListFields()`
    function.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 要素类和表包含一个或多个属性信息列。您可以通过 `ListFields()` 函数获取要素类中的字段列表。
- en: Getting ready
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The `ListFields()` function returns a list containing individual `Field` objects
    for each field in a feature class or table. Some functions, such as `ListFields()`
    and `ListIndexes()`, require an input dataset to operate on. You can use a wildcard
    or field type to constrain the list that is returned. Each `Field` object contains
    various read-only properties, including `Name`, `AliasName`, `Type`, `Length`,
    and so on.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`ListFields()` 函数返回一个包含每个字段单独 `Field` 对象的列表，这些对象对应于要素类或表中的每个字段。一些函数，例如 `ListFields()`
    和 `ListIndexes()`，需要输入数据集来操作。您可以使用通配符或字段类型来限制返回的列表。每个 `Field` 对象包含各种只读属性，包括 `Name`、`AliasName`、`Type`、`Length`
    等。'
- en: How to do it…
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps to learn how to return a list of fields in a feature class:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤学习如何返回要素类中的字段列表：
- en: Open IDLE and create a new script window.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 IDLE 并创建一个新的脚本窗口。
- en: Save the script as `c:\ArcpyBook\Ch10\ListOfFields.py`.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将脚本保存为 `c:\ArcpyBook\Ch10\ListOfFields.py`。
- en: Import the `arcpy` module.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入 `arcpy` 模块。
- en: '[PRE11]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Set the workspace:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置工作空间：
- en: '[PRE12]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Call the `ListFields()` method on the `Burglary` feature class inside a `try`
    block:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `try` 块中对 `Burglary` 要素类调用 `ListFields()` 方法：
- en: '[PRE13]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Loop through each of the fields in the list of fields and print the name, type,
    and length. Make sure you indent as needed:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 遍历字段列表中的每个字段，并打印名称、类型和长度。确保根据需要缩进：
- en: '[PRE14]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Add the `except` block:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 `except` 块：
- en: '[PRE15]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The entire script should appear as follows:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 整个脚本应如下所示：
- en: '[PRE16]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Save and run the script. You should see the following output:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并运行脚本。您应该看到以下输出：
- en: '[PRE17]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: How it works…
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `ListFields()` function returns a list of fields from a feature class or
    a table. This function accepts one required parameter, which is a reference to
    the feature class or table the function should be executed against. You can limit
    the fields returned by using a wild card or a field type. In this recipe, we only
    specified a feature class, which indicates that all fields will be returned. For
    each field returned, we printed the name, field type, and field length. As I mentioned
    earlier when discussing the `ListFeatureClasses()` function, `ListFields()` and
    all the other list functions are often called as the first step in a multi-step
    process within a script. For example, you might want to update the population
    statistics contained within a population field for a census tracts feature class.
    To do this, you could get a list of all the fields within a feature class, loop
    through this list looking for a specific field name that contains the population
    information, and then update the population information for each row. Alternatively,
    the `ListFields()` function accepts a wildcard as one of its parameters. So, if
    you know the name of the population field ahead of time, pass this in as the wildcard
    and only a single field will be returned.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`ListFields()` 函数返回要素类或表格的字段列表。此函数接受一个必需参数，即函数应针对其执行的功能类的引用或表格。您可以使用通配符或字段类型来限制返回的字段。在本例中，我们仅指定了一个要素类，这表示将返回所有字段。对于返回的每个字段，我们打印了名称、字段类型和字段长度。正如我之前在讨论
    `ListFeatureClasses()` 函数时提到的，`ListFields()` 和所有其他列表函数通常在脚本中的多步过程中作为第一步被调用。例如，您可能只想更新人口普查区要素类中包含的人口统计信息。为此，您可以获取要素类中所有字段的列表，遍历此列表以查找包含人口信息的特定字段名称，然后更新每行的人口信息。或者，`ListFields()`
    函数接受通配符作为其参数之一。因此，如果您事先知道人口字段的名称，可以将该名称作为通配符传递，从而只返回单个字段。'
- en: Using the Describe() function to return descriptive information about a feature
    class
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 `Describe()` 函数返回要素类的描述信息
- en: All datasets contain information that is descriptive in nature. For example,
    a feature class has a name, shape type, spatial reference, and so on. This information
    can be valuable to your scripts when you seek specific information before continuing
    with further processing in the script. For example, you might want to perform
    a buffer only on polyline feature classes instead of points or polygons. Using
    the `Describe()` function you can obtain basic descriptive information about any
    dataset. You can think of this information as metadata.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 所有数据集都包含描述性信息。例如，要素类有一个名称、形状类型、空间参考等。当您在脚本中继续进一步处理之前寻求特定信息时，这些信息对您的脚本可能很有价值。例如，您可能只想对折线要素类执行缓冲区操作，而不是对点或多边形执行。使用
    `Describe()` 函数，您可以获取任何数据集的基本描述信息。您可以将此信息视为元数据。
- en: Getting ready
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The `Describe()` function provides you with the ability to get basic information
    about datasets. These datasets could include feature classes, tables, ArcInfo
    coverage, layer files, workspaces, rasters, and others. A `Describe` object is
    returned, which contains specific properties based on the datatype being described.
    Properties on the `Describe` object are organized into property groups, and all
    datasets fall into at least one property group. For example, performing a `Describe()`
    against a geodatabase would return the **GDB** `FeatureClass`, `Table`, and `Dataset`
    property groups. Each of these property groups contains specific properties that
    can be examined.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`Describe()` 函数为您提供了获取数据集基本信息的功能。这些数据集可能包括要素类、表格、ArcInfo 覆盖、图层文件、工作空间、栅格以及其他类型。返回一个
    `Describe` 对象，其中包含基于描述的数据类型的特定属性。`Describe` 对象上的属性被组织成属性组，所有数据集至少属于一个属性组。例如，对地理数据库执行
    `Describe()` 操作将返回 **GDB** 的 `FeatureClass`、`Table` 和 `Dataset` 属性组。每个属性组都包含可以检查的特定属性。'
- en: 'The `Describe()` function accepts a string parameter, which is a pointer to
    a data source. In the following code example, we pass in a feature class contained
    within a file geodatabase. The function returns a `Describe` object that contains
    a set of dynamic properties called property groups. We can then access these various
    properties, as we have done in this case, by simply printing the properties using
    the `print` function:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 所有数据集，无论其类型如何，都包含在`Describe`对象上的默认属性集。这些属性是只读的。一些更常用的属性包括`dataType`、`catalogPath`、`name`、`path`和`file`。
- en: '[PRE18]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: All datasets, irrespective of their type, contain a default set of properties
    located on the `Describe` object. These are read-only properties. Some of the
    more commonly used properties include `dataType`, `catalogPath`, `name`, `path`,
    and `file`.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 添加`except`块：
- en: In this recipe, you will write a script that obtains descriptive information
    about a feature class using the `Describe()` function.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 打开IDLE并创建一个新的脚本窗口。
- en: How to do it…
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`Describe()`函数接受一个字符串参数，该参数是指向数据源的指针。在下面的代码示例中，我们传递一个包含在文件地理数据库中的要素类。该函数返回一个包含一组称为属性组的动态属性的`Describe`对象。然后我们可以通过简单地使用`print`函数打印属性来访问这些各种属性，就像在这个例子中我们所做的那样：'
- en: 'Follow these steps to learn how to obtain descriptive information about a feature
    class:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`Table`属性组之所以重要，主要是因为它允许你访问独立表或要素类中的字段。你还可以通过此属性组访问表或要素类上的任何索引。表属性返回一个包含每个要素类中`Field`对象的Python列表。每个字段都有许多只读属性，包括`name`、`alias`、`length`、`type`、`scale`、`precision`等。最显然有用的属性是`name`和`type`。在这个脚本中，我们打印了字段名称、类型和长度。注意使用Python
    `for`循环来处理Python列表中的每个字段。'
- en: Open IDLE and create a new script window.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Save the script as `c:\ArcpyBook\Ch10\DescribeFeatureClass.py`.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 整个脚本应如下所示：
- en: Import the `arcpy` module.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对要素类执行`Describe()`函数，我们在脚本中已经这样做，返回一个`FeatureClass`属性组以及访问`Table`和`Dataset`属性组的权限。除了返回`FeatureClass`属性组外，你还可以访问`Table`属性组。
- en: 'import arcpy     Set the workspace:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入arcpy模块
- en: '[PRE19]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Start a `try` block:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Burglary`要素类上调用`Describe()`函数并打印形状类型：
- en: '[PRE20]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Call the `Describe()` function on the `Burglary` feature class and print the
    shape type:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置工作空间：
- en: '[PRE21]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Get a list of fields in the feature class and print the name, type, and length
    of each:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个菜谱中，你将编写一个脚本，使用`Describe()`函数获取关于要素类的描述性信息。
- en: '[PRE22]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Get the geographic extent of the feature class and print the coordinates that
    define the extent:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: '[PRE23]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Add the `except` block:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始一个`try`块：
- en: '[PRE24]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The entire script should appear as follows:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取要素类中的字段列表并打印每个字段的名称、类型和长度：
- en: '[PRE25]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Save and run the script. You should see the following output:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并运行脚本。你应该看到以下输出：
- en: '[PRE26]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: How it works…
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取要素类的地理范围并打印定义范围的坐标：
- en: Executing a `Describe()` function against a feature class, which we have done
    in this script, returns a `FeatureClass` property group along with access to the
    `Table` and `Dataset` property groups. In addition to returning a `FeatureClass`
    property group, you also have access to a `Table` properties group.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤学习如何获取关于要素类的描述性信息：
- en: The `Table` property group is important primarily because it gives you access
    to the fields in a standalone table or feature class. You can also access any
    indexes on the table or feature class through this property group. The `Fields`
    property on table properties returns a Python list containing one `Field` object
    for each field in the feature class. Each field has a number of read-only properties
    including the `name`, `alias`, `length`, `type`, `scale`, `precision`, and so
    on. The most obviously useful properties are `name` and `type`. In this script,
    we printed the field name, type, and length. Note the use of a Python `for` loop
    to process each field in the Python list.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 将脚本保存为`c:\ArcpyBook\Ch10\DescribeFeatureClass.py`。
- en: Finally, we printed out the geographic extent of the layer through the use of
    the `Extent` object, returned by the `extent` property on the `Dataset` property
    group. The `Dataset` property group contains a number of useful properties. Perhaps,
    the most used properties include `extent` and `spatialReference`, as many geoprocessing
    tools and scripts require this information at some point during execution. You
    can also obtain the `datasetType` and versioning information along with several
    other properties.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们通过使用`Extent`对象，该对象由`Dataset`属性组上的`extent`属性返回，打印出层的地理范围。`Dataset`属性组包含许多有用的属性。也许，最常用的属性包括`extent`和`spatialReference`，因为许多地理处理工具和脚本在执行过程中某个时刻都需要这些信息。你还可以获取`datasetType`和版本信息以及其他几个属性。
- en: Using the Describe() function to return descriptive information about an image
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`Describe()`函数返回关于图像的描述性信息
- en: Raster files also contain descriptive information, which can be returned by
    the `Describe()` function.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 栅格文件也包含描述性信息，这些信息可以通过`Describe()`函数返回。
- en: Getting ready
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: A raster dataset can also be described through the use of the `Describe()` function.
    In this recipe, you will describe a raster dataset by returning its extent and
    spatial reference. The `Describe()` function contains a reference to the general
    purpose `Dataset` properties group as well, which contains a reference to the
    `SpatialReference` object for the dataset. The `SpatialReference` object can then
    be used to get detailed spatial reference information for the dataset.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 栅格数据集也可以通过使用`Describe()`函数来描述。在这个菜谱中，你将通过返回其范围和空间参考来描述一个栅格数据集。`Describe()`函数还包含对通用`Dataset`属性组的引用，该属性组包含对数据集的`SpatialReference`对象的引用。然后可以使用`SpatialReference`对象来获取数据集的详细空间参考信息。
- en: How to do it…
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Follow these steps to learn how to obtain descriptive information about a raster
    image file:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤学习如何获取关于栅格图像文件描述性信息的方法：
- en: Open IDLE and create a new script window.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开IDLE并创建一个新的脚本窗口。
- en: Save the script as `c:\ArcpyBook\Ch10\DescribeRaster.py`.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将脚本保存为`c:\ArcpyBook\Ch10\DescribeRaster.py`。
- en: 'Import the `arcpy` module:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`arcpy`模块：
- en: '[PRE27]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Set the workspace:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置工作区：
- en: '[PRE28]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Start a `try` block:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始一个`try`块：
- en: '[PRE29]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Call the `Describe()` function on a raster dataset making sure you indent the
    next few lines of code inside the `try` statement:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`try`语句中调用`Describe()`函数针对栅格数据集，确保将下一行代码缩进：
- en: '[PRE30]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Get the extent of the raster dataset and print it:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取栅格数据集的范围并打印：
- en: '[PRE31]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Get a reference to the `SpatialReference` object and print it:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取对`SpatialReference`对象的引用并打印：
- en: '[PRE32]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Add the `except` block:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`except`块：
- en: '[PRE33]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The entire script should appear as follows:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 整个脚本应该如下所示：
- en: '[PRE34]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Savr and run the script. You should see the following output:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并运行脚本。你应该看到以下输出：
- en: '[PRE35]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: How it works…
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: This recipe is very similar to the previous one. The difference is that we're
    using the `Describe()` function against a raster dataset instead of against a
    vector feature class. In both cases, we've returned the geographic extent of the
    datasets using the `extent` object. However, in the script we've also obtained
    the `SpatialReference` object for the raster dataset and printed the information
    about this object including the name and type.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱与上一个非常相似。不同之处在于我们正在使用`Describe()`函数针对栅格数据集而不是针对矢量要素类。在两种情况下，我们都使用了`extent`对象来返回数据集的地理范围。然而，在脚本中我们还获取了栅格数据集的`SpatialReference`对象并打印了关于该对象的信息，包括名称和类型。
- en: Returning workspace information with the Describe() function
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`Describe()`函数返回工作区信息
- en: There are several different types of geodatabases that can be used with ArcGIS,
    including personal, file, and enterprise. As we saw in [Chapter 8](ch08.html "Chapter 8. Querying
    and Selecting Data"), *Querying and Selecting Data*, the construction of queries
    will vary depending upon the type of geodatabase a dataset resides within. Your
    scripts may or may not know the geodatabase type ahead of time. To make your scripts
    more robust in the case of queries, you could use the `Describe()` function against
    a workspace to capture this information and construct your query accordingly.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用多种类型的地理数据库与ArcGIS一起使用，包括个人、文件和企业。正如我们在[第8章](ch08.html "第8章。查询和选择数据")中看到的，*查询和选择数据*，查询的构建将取决于数据集所在的地理数据库类型。你的脚本可能或可能不知道地理数据库类型。为了使你的脚本在查询时更加健壮，你可以使用`Describe()`函数针对工作区来捕获这些信息并相应地构建你的查询。
- en: Getting ready
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The `Workspace` property group provides information about a workspace (such
    as a folder, personal or file geodatabase, or enterprise geodatabase). These properties
    are particularly helpful when obtaining information about an ArcSDE connection.
    Information that can be obtained through this property group includes the connection
    information when the workspace is an ArcSDE workspace, domains associated with
    the geodatabase, and the workspace type, which can be `FileSystem`, `LocalDatabase`,
    or `RemoteDatabase`. `LocalDatabase` refers to personal or file geodatabases,
    while `RemoteDatabase` refers to an `ArcSDE` geodatabase. In this recipe, you'll
    use the `Workspace` property group to obtain information about a file geodatabase.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`Workspace` 属性组提供了关于工作空间（如文件夹、个人或文件地理数据库，或企业地理数据库）的信息。这些属性在获取 ArcSDE 连接信息时尤其有用。通过此属性组可以获取的信息包括当工作空间是
    ArcSDE 工作空间时的连接信息、与地理数据库关联的域以及工作空间类型，这些类型可以是 `FileSystem`、`LocalDatabase` 或 `RemoteDatabase`。`LocalDatabase`
    指的是个人或文件地理数据库，而 `RemoteDatabase` 指的是 `ArcSDE` 地理数据库。在本例中，你将使用 `Workspace` 属性组来获取文件地理数据库的信息。'
- en: How to do it…
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps to learn how to obtain descriptive information about a workspace:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤学习如何获取工作空间的描述信息：
- en: Open IDLE and create a new script window.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 IDLE 并创建一个新的脚本窗口。
- en: Save the script as `c:\ArcpyBook\Ch10\DescribeWorkspace.py`.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将脚本保存为 `c:\ArcpyBook\Ch10\DescribeWorkspace.py`。
- en: 'Import the `arcpy` module:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入 `arcpy` 模块：
- en: '[PRE36]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Start a `try` block:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始一个 `try` 块：
- en: '[PRE37]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Call the `Describe()` function on the `CityOfSanAntonio` geodatabase and make
    sure to indent this statement inside the try statement. The two print statements
    below should also be indented.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `CityOfSanAntonio` 地理数据库上调用 `Describe()` 函数，并确保将此语句缩进放在 try 语句内。下面的两个打印语句也应该缩进。
- en: '[PRE38]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Print the workspace type:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印工作空间类型：
- en: '[PRE39]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Print the detailed workspace information:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印详细的工作空间信息：
- en: '[PRE40]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Add the `except` block:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 `except` 块：
- en: '[PRE41]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Save and run the script. You should see the following output:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并运行脚本。你应该看到以下输出：
- en: '[PRE42]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: How it works…
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'The `workspaceType` property returns one of three values: `FileSystem`, `LocalDatabase`,
    or `RemoteDatabase`. The `localDatabase` value indicates that you''re working
    with either a personal or file geodatabase. However, it isn''t any more specific.
    To get the specific geodatabase, you can retrieve the `workspaceFactoryProgID`
    property, which will indicate the type of geodatabase. In this case, it''s a file
    geodatabase.'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '`workspaceType` 属性返回三个值之一：`FileSystem`、`LocalDatabase` 或 `RemoteDatabase`。`localDatabase`
    值表示你正在使用个人或文件地理数据库。然而，它并不更具体。要获取具体的地理数据库，你可以检索 `workspaceFactoryProgID` 属性，这将指示地理数据库的类型。在这种情况下，它是一个文件地理数据库。'
