- en: Setting Up Your GPU Programming Environment
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置您的GPU编程环境
- en: We will now see how to set up an appropriate environment for GPU programming
    under both Windows and Linux. In both cases, there are several steps we will have
    to take. We will proceed through these steps one-by-one, noting any differences
    between Linux and Windows as we proceed. You should, of course, feel free to skip
    or ignore any sections or comments that don't apply to your choice of operating
    system.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将看到如何在Windows和Linux下设置适合GPU编程的环境。在两种情况下，我们都需要采取几个步骤。我们将逐一进行这些步骤，并在进行过程中注意Linux和Windows之间的任何差异。当然，您可以根据自己的操作系统选择跳过或忽略任何不适用部分或注释。
- en: The reader should note that we will only cover two platforms for 64-bit Intel/AMD-based
    PCs in this chapter—Ubuntu LTS (long-term support) releases and Windows 10\. Note
    that any Ubuntu LTS-based Linux operating systems (such as Xubuntu, Kubuntu, or
    Linux Mint) are also equally appropriate to the generic Unity/GNOME-based Ubuntu
    releases.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 读者应注意，在本章中，我们只涵盖两种基于64位Intel/AMD的PC平台——Ubuntu LTS（长期支持）版本和Windows 10。请注意，任何基于Ubuntu
    LTS的Linux操作系统（如Xubuntu、Kubuntu或Linux Mint）也同等适用于通用的Unity/GNOME基于的Ubuntu版本。
- en: We suggest the use of Python 2.7 over Python 3.x. Python 2.7 has stable support
    across all libraries that we use in this text, and we have tested every example
    given in this book with Python 2.7 on both Windows and Linux platforms. Python
    3.x users can make use of this book, but should be aware of the differences between
    Python 2.7 and Python 3.x. Some of the examples in this have been tested on using
    Python 3.7, but require standard changes, such as adding parentheses with the
    Python `print` function.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议使用Python 2.7而不是Python 3.x。Python 2.7在我们文本中使用的所有库中都有稳定的支持，并且我们已经在这本书的所有示例中用Python
    2.7在Windows和Linux平台上进行了测试。Python 3.x用户可以使用这本书，但应了解Python 2.7和Python 3.x之间的差异。其中一些示例已经使用Python
    3.7进行了测试，但需要一些标准更改，例如在Python `print`函数中添加括号。
- en: Packt author Dr. Sebastian Raschka provides a list of key differences between
    Python 2.7 and 3.x at [https://sebastianraschka.com/Articles/2014_python_2_3_key_diff.html](https://sebastianraschka.com/Articles/2014_python_2_3_key_diff.html).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Packt作者Sebastian Raschka博士提供了一个Python 2.7和3.x之间关键差异的列表，请参阅[https://sebastianraschka.com/Articles/2014_python_2_3_key_diff.html](https://sebastianraschka.com/Articles/2014_python_2_3_key_diff.html)。
- en: We suggest the Anaconda Python 2.7 distribution in particular for both Windows
    and Linux users, since this can be installed on a user-by-user basis without `sudo`
    or `administrator` access, contains all necessary data science and visualization
    modules needed for this text, and uses fast pre-optimized NumPy/SciPy packages
    that make use of Intel's **Math Kernel Library** (**MKL**). (The default Linux
    `/usr/bin/python` installation should also be sufficient for this text, but you
    may have to install some packages manually, such as NumPy and Matplotlib.)
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们特别建议Windows和Linux用户使用Anaconda Python 2.7发行版，因为它可以基于用户安装，无需`sudo`或`管理员`访问权限，包含本文本中所需的所有数据科学和可视化模块，并使用利用Intel的**数学内核库**（**MKL**）的快速预优化NumPy/SciPy包。（默认的Linux
    `/usr/bin/python`安装也应足够用于本文本，但您可能需要手动安装一些包，例如NumPy和Matplotlib。）
- en: Anaconda Python (both 2.7 and 3.x versions) can be downloaded for all platforms
    at [https://www.anaconda.com/download/.](https://www.anaconda.com/download/)
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Anaconda Python (包括2.7和3.x版本) 可以在[https://www.anaconda.com/download/](https://www.anaconda.com/download/)下载，适用于所有平台。
- en: 'Users who are on other supported platforms (for example, macOS, Windows 7/8,
    Windows Server 2016, Red Hat/Fedora, OpenSUSE, and CENTOS) should consult the
    official NVIDIA CUDA documentation ([https://docs.nvidia.com/cuda/](https://docs.nvidia.com/cuda/))
    for further details. Furthermore, there are other possibilities for hardware:
    the reader interested in embedded systems or robotics with some experience in
    boards, such as the Raspberry Pi may wish to start with an ARM-based NVIDIA Jetson
    development board, while the reader interested in cloud computing or web programming
    may consider remotely using an appropriate Azure or AWS instance. In these cases,
    the reader is encouraged to read the official documentation to set up their drivers,
    compiler, and CUDA Toolkit. Some of the steps in this chapter may or may not apply.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 对于使用其他受支持平台（例如，macOS、Windows 7/8、Windows Server 2016、Red Hat/Fedora、OpenSUSE
    和 CENTOS）的用户，应查阅官方 NVIDIA CUDA 文档（[https://docs.nvidia.com/cuda/](https://docs.nvidia.com/cuda/)）以获取更多详细信息。此外，还有其他硬件的可能性：对嵌入式系统或具有某些板卡经验（如
    Raspberry Pi）的机器人感兴趣的读者可能希望从基于 ARM 的 NVIDIA Jetson 开发板开始，而对云计算或网页编程感兴趣的读者可能考虑远程使用适当的
    Azure 或 AWS 实例。在这些情况下，鼓励读者阅读官方文档来设置他们的驱动程序、编译器和 CUDA 工具包。本章中的一些步骤可能适用也可能不适用。
- en: 'The learning outcomes for this chapter are:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的学习成果包括：
- en: Ensuring that we have the appropriate hardware
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保我们拥有适当的硬件
- en: Installing the NVIDIA GPU drivers
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 NVIDIA GPU 驱动程序
- en: Setting up an appropriate C/C++ programming environment
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置适当的 C/C++ 编程环境
- en: Installing the NVIDIA CUDA Toolkit
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 NVIDIA CUDA 工具包
- en: Setting up our Python environment for GPU programming
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为 GPU 编程设置我们的 Python 环境
- en: Technical requirements
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: An installation of Anaconda Python 2.7 is suggested for this chapter at [https://www.anaconda.com/download/.](https://www.anaconda.com/download/)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，建议在 [https://www.anaconda.com/download/](https://www.anaconda.com/download/)
    安装 Anaconda Python 2.7。
- en: This chapter's code is also available on GitHub at [https://github.com/PacktPublishing/Hands-On-GPU-Programming-with-Python-and-CUDA.](https://github.com/PacktPublishing/Hands-On-GPU-Programming-with-Python-and-CUDA)
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码也可在 GitHub 上找到，网址为 [https://github.com/PacktPublishing/Hands-On-GPU-Programming-with-Python-and-CUDA.](https://github.com/PacktPublishing/Hands-On-GPU-Programming-with-Python-and-CUDA)
- en: For more information about the pre-requisites, check the Preface of this book;
    and for the software and hardware requirements, check the README section in [https://github.com/PacktPublishing/Hands-On-GPU-Programming-with-Python-and-CUDA.](https://github.com/PacktPublishing/Hands-On-GPU-Programming-with-Python-and-CUDA)
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 关于先决条件的更多信息，请参阅本书的序言；有关软件和硬件要求，请参阅 [https://github.com/PacktPublishing/Hands-On-GPU-Programming-with-Python-and-CUDA.](https://github.com/PacktPublishing/Hands-On-GPU-Programming-with-Python-and-CUDA)
    的 README 部分
- en: Ensuring that we have the right hardware
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 确保我们拥有正确的硬件
- en: 'For this book, we recommend that you have the following hardware as a minimum:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本书，我们建议您至少拥有以下硬件：
- en: 64-bit Intel/AMD-based PC
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于 64 位 Intel/AMD 的 PC
- en: 4 gigabytes (GB) of RAM
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 4 GB（GB）的 RAM
- en: NVIDIA GeForce GTX 1050 GPU (or higher)
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NVIDIA GeForce GTX 1050 GPU（或更高版本）
- en: This configuration will ensure that you can comfortably learn GPU programming,
    run all of the examples in this book, and also run some of the other newer and
    interesting GPU-based software, such as Google's TensorFlow (a machine learning
    framework) or the Vulkan SDK (a cutting-edge graphics API).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 此配置将确保您可以舒适地学习 GPU 编程，运行本书中的所有示例，并且还可以运行一些其他较新且有趣的基于 GPU 的软件，例如 Google 的 TensorFlow（一个机器学习框架）或
    Vulkan SDK（一个前沿的图形 API）。
- en: '**Note that you must have an NVIDIA brand GPU to make use of this book!** The
    CUDA Toolkit is proprietary for NVIDIA cards, so it won''t work for programming
    Intel HD or Radeon GPUs.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**请注意，您必须拥有 NVIDIA 品牌的 GPU 才能使用本书！** CUDA 工具包是 NVIDIA 卡的专有软件，因此它不适用于编程 Intel
    HD 或 Radeon GPU。'
- en: As stated, we will be assuming that you are using either the Windows 10 or Ubuntu
    LTS (long-term support) release.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们将假设您正在使用 Windows 10 或 Ubuntu LTS（长期支持）版本。
- en: Ubuntu LTS releases generally have version numbers of the form 14.04, 16.04,
    18.04, and so on.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Ubuntu LTS 版本通常具有 14.04、16.04、18.04 等形式的版本号。
- en: Ubuntu LTS, is by and large, the most mainstream version of Linux, which ensures
    maximum compatibility with new software and toolkits. Keep in mind there are many
    variations of Linux that are based on Ubuntu, such as Linux Mint or Xubuntu, and
    these generally work equally well. (I have personally found that Linux Mint works
    fairly well out of the box for GPU-equipped laptops.)
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Ubuntu LTS 是 Linux 中最主流的版本，这确保了与新的软件和工具包的最大兼容性。请记住，基于 Ubuntu 的 Linux 变种有很多，例如
    Linux Mint 或 Xubuntu，它们通常工作得同样好。（我个人发现，Linux Mint 对于配备 GPU 的笔记本电脑来说，开箱即用效果相当不错。）
- en: We should note that we are assuming that you have at least an entry-level GTX
    1050 (Pascal) GPU, or the equivalent in any newer architecture. Note that many
    of the examples in this book will most likely work on most older GPUs, but they
    have only been tested on a GTX 1050 (under Windows 10) and GTX 1070 (under Linux)
    by the author. While the examples haven't been tested on older GPUs, a 2014-era
    entry level Maxwell architecture GPU, such as a GTX 750, should also be sufficient
    for the purposes of this text.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该注意，我们假设您至少有一个入门级的 GTX 1050（帕斯卡）GPU，或者任何新架构中的等效产品。请注意，本书中的许多示例可能在大多数较旧的 GPU
    上都能工作，但作者只在 GTX 1050（在 Windows 10 上）和 GTX 1070（在 Linux 上）上进行了测试。虽然这些示例没有在较旧的 GPU
    上进行测试，但 2014 年代的入门级 Maxwell 架构 GPU，例如 GTX 750，也应该适用于本文的目的。
- en: If you are using a desktop PC, please ensure that you have physically installed
    your GPU by following all the included instructions before proceeding.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是台式机 PC，请在继续之前，按照所有包含的说明物理安装您的 GPU。
- en: Checking your hardware (Linux)
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查您的硬件（Linux）
- en: We will now do a few basic checks in Linux to ensure that we have the right
    hardware. Let's first open up a Terminal and drop to the bash command line—you
    can do this quickly in Ubuntu by pressing the combination *Ctrl* + *Alt* + *T*.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将在 Linux 上进行一些基本检查，以确保我们有正确的硬件。让我们首先打开终端并进入 bash 命令行——您可以在 Ubuntu 中通过按组合键
    *Ctrl* + *Alt* + *T* 来快速完成此操作。
- en: 'Let''s now check our processor by typing `lscpu` and pressing *Enter*. A lot
    of information will appear, but just look at the first line and make sure that
    the architecture is indeed x86_64:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们通过输入 `lscpu` 并按 *Enter* 键来检查我们的处理器。会出现很多信息，但只需查看第一行，确保架构确实是 x86_64：
- en: '![](img/e6983512-f18c-418c-9307-e1169baf3591.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e6983512-f18c-418c-9307-e1169baf3591.png)'
- en: 'Next, we check our memory capacity by typing `free -g` at the bash prompt and
    then again press *Enter*. This will tell us the total number of proper memory
    that we have in gigabytes in the first entry of the first row, as well as the
    amount of memory in swap space in the following row:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们在 bash 提示符中输入 `free -g` 来检查我们的内存容量，然后再次按 *Enter* 键。这将告诉我们第一行第一项中我们拥有的总内存量（以千兆字节为单位），以及下一行中交换空间中的内存量：
- en: '![](img/c3146279-5d0d-47b3-a8d9-cc7db17d807b.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c3146279-5d0d-47b3-a8d9-cc7db17d807b.png)'
- en: This is certainly sufficient memory.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这当然足够了。
- en: 'Finally, let''s see whether we have an appropriate GPU. NVIDIA GPUs communicate
    with our PC via the PCI bus, so we can use the `lspci` command to list all PCI
    hardware. There is usually a lot of other hardware listed, so let''s use the `grep`
    command to filter for just NVIDIA GPUs by entering `lspci | grep -e "NVIDIA"`
    at the bash prompt:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们看看我们是否有合适的 GPU。NVIDIA GPU 通过 PCI 总线与我们的 PC 通信，因此我们可以使用 `lspci` 命令列出所有
    PCI 硬件。通常会有很多其他硬件列出来，所以让我们使用 `grep` 命令通过在 bash 提示符中输入 `lspci | grep -e "NVIDIA"`
    来仅过滤 NVIDIA GPU：
- en: '![](img/4365ea85-449d-4d80-b0c6-4514fdebe0e5.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4365ea85-449d-4d80-b0c6-4514fdebe0e5.png)'
- en: This is a GTX 1070, which fortunately exceeds our need for at least a GTX 1050.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个 GTX 1070，幸运的是，它超过了我们至少需要 GTX 1050 的需求。
- en: Checking your hardware (windows)
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查您的硬件（Windows）
- en: 'First, we must open the Windows panel. We do this by pressing *Windows* + *R*
    and then entering `Control Panel` at the prompt, as demonstrated in the following
    screenshot:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们必须打开 Windows 控制面板。我们通过按 *Windows* + *R* 并在提示符中输入 `Control Panel` 来完成此操作，如下面的截图所示：
- en: '![](img/80e71c36-7fdf-4962-bb3a-107afc76022b.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/80e71c36-7fdf-4962-bb3a-107afc76022b.png)'
- en: 'The Windows Control Panel will pop up. Now click on System and Security, and
    then choose System on the following screen. This will immediately tell us the
    amount of RAM that we have and whether we have a 64-bit processor:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 控制面板会弹出。现在点击系统和安全，然后在下一个屏幕上选择系统。这将立即告诉我们我们有多少 RAM，以及我们是否有 64 位处理器：
- en: '![](img/73eb0d90-a13d-42e1-a0ac-7941a3f8ff5e.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/73eb0d90-a13d-42e1-a0ac-7941a3f8ff5e.png)'
- en: 'To check our GPU, click on Device Manager in the upper left-hand corner of
    this window. The Windows Device Manager will then pop up; you can then select
    the Display adapters drop-down box to check which GPUs are on your system:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查我们的GPU，请点击窗口左上角的设备管理器。随后，Windows设备管理器将弹出；然后你可以选择显示适配器下拉框来检查系统上安装了哪些GPU：
- en: '![](img/e084b0d1-48a8-4280-86a5-dd505ff38c0c.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e084b0d1-48a8-4280-86a5-dd505ff38c0c.png)'
- en: Installing the GPU drivers
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装GPU驱动程序
- en: If you already have drivers for your GPU installed, you may possibly skip this
    step; moreover, some versions of CUDA are pre-packaged with the latest drivers.
    Quite often, CUDA is very particular about which driver you have installed and
    may not even work with the CUDA Toolkit driver, so you may have to experiment
    with several different drivers before you find one that works.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经安装了GPU的驱动程序，你可能可以跳过这一步；此外，一些CUDA版本已经预包装了最新驱动程序。通常，CUDA对安装的驱动程序非常挑剔，甚至可能不与CUDA工具包驱动程序兼容，因此你可能需要尝试几个不同的驱动程序才能找到可以工作的一个。
- en: Generally speaking, Windows has better CUDA driver compatibility and a more
    user-friendly installation than Linux. Windows users may consider skipping this
    step and just use the driver that is packaged with the CUDA Toolkit, which we
    will install a little later in this chapter. We would strongly suggest that Linux
    users (particularly Linux laptop users), however, closely follow all the steps
    in this section before proceeding.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 通常来说，Windows的CUDA驱动程序兼容性更好，安装过程也更用户友好。Windows用户可以考虑跳过这一步，直接使用与CUDA工具包捆绑的驱动程序，我们将在本章稍后安装。然而，我们强烈建议Linux用户（尤其是Linux笔记本电脑用户）在继续之前，仔细遵循本节中的所有步骤。
- en: Installing the GPU drivers (Linux)
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装GPU驱动程序（Linux）
- en: 'In Ubuntu, the default driver for NVIDIA GPUs is an open-source driver called
    Nouveau; unfortunately, this does not work with CUDA at all, so we will have to
    install a proprietary driver. We will have to add the special `graphics-drivers`
    repository to our package manager to be able to download proprietary NVIDIA drivers
    to our Ubuntu system. We add the repository by typing the following line into
    the bash prompt:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在Ubuntu中，NVIDIA GPU的默认驱动程序是一个名为Nouveau的开源驱动程序；不幸的是，这个驱动程序与CUDA完全不兼容，因此我们必须安装一个专有驱动程序。我们必须将特殊的`graphics-drivers`仓库添加到我们的包管理器中，以便能够将专有的NVIDIA驱动程序下载到我们的Ubuntu系统中。我们通过在bash提示符中输入以下行来添加仓库：
- en: '[PRE0]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Since this is a `sudo` superuser command, you will have to enter your password.
    We now synchronize our system with the new repository by typing the following
    line:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是一个`sudo`超级用户命令，你必须输入你的密码。我们现在通过输入以下行来将我们的系统与新仓库同步：
- en: '[PRE1]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We should now be ready to install our driver. From the Ubuntu desktop, press
    *Windows* + *R*, and then enter `software and drivers`:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在应该准备好安装我们的驱动程序了。从Ubuntu桌面，按*Windows* + *R*，然后输入`software and drivers`：
- en: '![](img/33637818-a7d1-4fb9-8b47-9c09741b001c.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/33637818-a7d1-4fb9-8b47-9c09741b001c.png)'
- en: 'The Software & Drivers setup menu should appear. From here, click on the tab
    marked Additional Drivers. You should see a selection of available stable proprietary
    drivers for your GPU; choose the newest one you see I(n my case, it is `nvidia-driver-396`,
    demonstrated as follows):'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 软件与驱动程序设置菜单应该会出现。从这里，点击标记为“附加驱动程序”的选项卡。你应该能看到为你GPU提供的可用稳定专有驱动程序的选择；选择你看到的最新一个（在我的情况下，是`nvidia-driver-396`，如下所示）：
- en: '![](img/d75d9ff2-f44a-459c-ba72-7ded556d763b.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d75d9ff2-f44a-459c-ba72-7ded556d763b.png)'
- en: With the latest driver selected, click on Apply Changes. You will be prompted
    again for your `sudo` password, and then the driver will install; a progress bar
    should appear. Note that this process can take a long time and it may appear that
    your computer is *hanging*; this process can take well over an hour, so please
    be patient.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 选择最新驱动程序后，点击应用更改。你将再次被提示输入`sudo`密码，然后驱动程序将开始安装；应该会出现一个进度条。请注意，这个过程可能需要很长时间，并且你的电脑可能会看起来像是在挂起；这个过程可能需要超过一个小时，所以请耐心等待。
- en: 'Finally, when the process is complete, reset your computer, and return to your
    Ubuntu desktop. Now type *Windows* + *A*, and then enter `nvidia-settings` (or
    alternatively, run this program from a bash prompt). The NVIDIA X Server Settings
    manager should appear, and indicate that you are using the appropriate driver
    version:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，当过程完成后，重置你的电脑，并返回到你的Ubuntu桌面。现在按*Windows* + *A*，然后输入`nvidia-settings`（或者你也可以从bash提示符运行这个程序）。NVIDIA
    X服务器设置管理器应该会出现，并指示你正在使用适当的驱动程序版本：
- en: '![](img/bdab7346-2e9f-4615-b61b-a91f6b6b8588.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/bdab7346-2e9f-4615-b61b-a91f6b6b8588.png)'
- en: Installing the GPU drivers (Windows)
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装GPU驱动程序（Windows）
- en: To reiterate—it is generally suggested that the reader initially skip this step,
    and then install the drivers that are included with the CUDA Toolkit.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调——通常建议读者最初跳过此步骤，然后安装 CUDA 工具包中包含的驱动程序。
- en: The latest drivers for Windows are available directly from NVIDIA at [http://www.nvidia.com/Download/](http://www.nvidia.com/Download/).
    Simply choose the appropriate Windows 10 drivers for your GPU from the drop-down
    menu, which are executable (`.exe`) files. Simply install the driver by double-clicking
    on the file from the file manager.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 的最新驱动程序可以直接从 NVIDIA 的网站 [http://www.nvidia.com/Download/](http://www.nvidia.com/Download/)
    获取。只需从下拉菜单中选择适合您 GPU 的适当 Windows 10 驱动程序，这些是可执行文件（`.exe`）。只需双击文件管理器中的文件即可安装驱动程序。
- en: Setting up a C++ programming environment
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 C++ 编程环境
- en: Now that we have our drivers installed, we have to set up our C/C++ programming
    environment; both Python and CUDA are particular about what compilers and IDEs
    they may integrate with, so you may have to be careful. In the case of Ubuntu
    Linux users, the standard repository compilers and IDEs generally work and integrate
    perfectly with the CUDA Toolkit, while Windows users might have to exercise a
    little more caution.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了驱动程序，我们必须设置我们的 C/C++ 编程环境；Python 和 CUDA 对它们可能集成的编译器和 IDE 都有特定的要求，因此您可能需要小心。对于
    Ubuntu Linux 用户，标准仓库编译器和 IDE 通常可以正常工作并与 CUDA 工具包完美集成，而 Windows 用户可能需要更加小心。
- en: Setting up GCC, Eclipse IDE, and graphical dependencies (Linux)
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 GCC、Eclipse IDE 和图形依赖项 (Linux)
- en: 'Open up a Terminal from the Ubuntu desktop (*Ctrl* + *Alt* + *T*). We first
    update the `apt` repository as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Ubuntu 桌面打开终端 (*Ctrl* + *Alt* + *T*)。我们首先按照以下方式更新 `apt` 仓库：
- en: '[PRE2]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now we can install everything we need for CUDA with one additional line:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以使用一行额外的命令安装我们需要的所有 CUDA 软件：
- en: '[PRE3]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here, `build-essential` is the package with the `gcc` and `g++` compilers, and
    other utilities such as make; `binutils` has some generally useful utilities,
    such as the LD linker, `gdb` is the debugger, and Eclipse is the IDE that we will
    be using.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`build-essential` 是包含 `gcc` 和 `g++` 编译器和其他实用程序（如 make）的软件包；`binutils` 包含一些通用的实用程序，如
    LD 链接器；`gdb` 是调试器；Eclipse 是我们将使用的 IDE。
- en: 'Let''s also install a few additional dependencies that will allow us to run
    some of the graphical (OpenGL) demos included with the CUDA Toolkit with this
    line:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再安装一些额外的依赖项，这将允许我们使用以下命令运行 CUDA 工具包中包含的一些图形（OpenGL）演示：
- en: '[PRE4]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now you should be good to go to install the CUDA Toolkit.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您应该可以安装 CUDA 工具包了。
- en: Setting up Visual Studio (Windows)
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 Visual Studio (Windows)
- en: At the time of writing, only one version of Visual Studio appears to ingrate
    perfectly with both Python and the latest CUDA Toolkits—Visual Studio 2015; that
    is, Visual Studio version 14.0.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，只有 Visual Studio 2015 似乎与 Python 和最新的 CUDA 工具包完美集成；即 Visual Studio 版本
    14.0。
- en: While it may be possible to make a sub-installation of this under a later version
    of Visual Studio (for example, 2017), we would suggest to the reader that you
    directly install Visual Studio 2015 with C/C++ support onto your system.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然在 Visual Studio 的较新版本（例如 2017）下可能可以创建一个子安装，但我们建议读者直接在系统上安装带有 C/C++ 支持的 Visual
    Studio 2015。
- en: Visual Studio Community 2015, the free version of this software, can be downloaded
    at [https://visualstudio.microsoft.com/vs/older-downloads/](https://visualstudio.microsoft.com/vs/older-downloads/).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio Community 2015，该软件的免费版本，可以从 [https://visualstudio.microsoft.com/vs/older-downloads/](https://visualstudio.microsoft.com/vs/older-downloads/)
    下载。
- en: 'Here, we will do a minimalist installation, with only the necessary components
    for CUDA. We run the installation software, and select the Custom installation:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将进行最小化安装，只包含 CUDA 所需的组件。我们运行安装软件，并选择自定义安装：
- en: '![](img/64390e7f-5b9c-4768-9d4e-b7b4116d57c7.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/64390e7f-5b9c-4768-9d4e-b7b4116d57c7.png)'
- en: 'Click Next, then click the drop-down box for Programming Languages, and then
    choose Visual C++ (feel free to select other packages or programming languages
    if you want or need them for other purposes, but Visual C++ is all we will need
    for GPU programming):'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“下一步”，然后点击编程语言下拉框，然后选择 Visual C++（如果您需要或需要其他目的的其他软件包或编程语言，请随意选择，但我们只需要 Visual
    C++ 用于 GPU 编程）：
- en: '![](img/63cef2a7-be52-499c-af90-810042581d5d.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/63cef2a7-be52-499c-af90-810042581d5d.png)'
- en: This should take some time to install. After this is complete, we will be ready
    to install the CUDA Toolkit.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能需要一些时间来安装。完成此步骤后，我们将准备好安装 CUDA 工具包。
- en: Installing the CUDA Toolkit
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 CUDA 工具包
- en: Finally, we are beginning to get close to our goal! We now download our CUDA
    Toolkit by heading over to [https://developer.nvidia.com/cuda-downloads](https://developer.nvidia.com/cuda-downloads).
    [](https://developer.nvidia.com/cuda-downloads) Select the appropriate operating
    system and you will see several options. In the case of both Windows and Linux,
    there are both network and local installations. I tend to use the local installation
    option under both Windows and Linux, because I prefer to download the entire package
    up-front; if there are any network problems, then you can be assured they won't
    occur while you are installing the CUDA Toolkit.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们正在逐渐接近我们的目标！现在，我们通过访问 [https://developer.nvidia.com/cuda-downloads](https://developer.nvidia.com/cuda-downloads)
    下载我们的 CUDA 工具包。 [](https://developer.nvidia.com/cuda-downloads) 选择适当的操作系统，您将看到几个选项。在
    Windows 和 Linux 的案例中，都有网络和本地安装选项。我倾向于在 Windows 和 Linux 下都使用本地安装选项，因为我更喜欢一次性下载整个包；如果出现任何网络问题，那么您可以确信这些问题不会在您安装
    CUDA 工具包时发生。
- en: Installing the CUDA Toolkit (Linux)
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 CUDA 工具包（Linux）
- en: In the case of Linux users, you will see that there are choices for using a
    `.deb` package and a `.run` file; for most users, I would suggest going with the
    `.deb` file, since this will install any missing packages that CUDA requires automatically.
    The `.run` file installs outside of your system's **Advanced Package Tool** (**APT**)
    system, which effectively just copies the appropriate files to the system's `/usr`
    binary and library directories. If you don't want to interfere with your system's
    APT system or repositories, and have a good understanding of Linux, the `.run`
    file may be more appropriate. In either case, carefully follow the instructions
    given on the site about installing the package, which can vary slightly from one
    version to the next.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Linux 用户，您将看到有使用 `.deb` 包和 `.run` 文件的选择；对于大多数用户，我建议选择 `.deb` 文件，因为这会自动安装
    CUDA 所需的任何缺失包。`.run` 文件在您的系统 **高级包工具** (**APT**) 系统之外安装，这实际上只是将适当的文件复制到系统 `/usr`
    的二进制和库目录。如果您不想干扰您系统的 APT 系统或仓库，并且对 Linux 有很好的理解，`.run` 文件可能更合适。在任何情况下，都要仔细遵循网站上关于安装包的说明，这些说明可能因版本而异。
- en: 'After the package is finished installing, you may have to configure your `PATH`
    and `LD_SYSTEM_CONFIG` environment variables so that your system can find the
    appropriate binary executable and library files needed for CUDA. I would suggest
    doing this by appending the followiang lines to the end of your `.bashrc` file
    in your user directory. Open the `~/.bashrc` file with your favorite text editor,
    such as `gedit`, `nano`, `emacs`, or `vim`, and, at the very bottom of the file,
    add the following lines:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在包安装完成后，您可能需要配置您的 `PATH` 和 `LD_SYSTEM_CONFIG` 环境变量，以便您的系统可以找到 CUDA 所需的适当二进制可执行文件和库文件。我建议通过将以下行追加到您用户目录下的
    `.bashrc` 文件末尾来完成此操作。使用您喜欢的文本编辑器，例如 `gedit`、`nano`、`emacs` 或 `vim` 打开 `~/.bashrc`
    文件，并在文件的底部添加以下行：
- en: '[PRE5]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Save the file and then exit the Terminal. You can now ensure that you've correctly
    installed the toolkit by opening a new Terminal and typing `nvcc --version` and
    then pressing *Enter*, which will give you the version information of the compiler
    for your toolkit. (`nvcc` is the command-line CUDA C compiler, which is analogous
    to the `gcc` compiler.)
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 保存文件并退出终端。现在，您可以通过打开一个新的终端并输入 `nvcc --version` 然后按 *Enter* 键来确保您已正确安装了工具包，这将为您提供工具包编译器的版本信息。（`nvcc`
    是命令行 CUDA C 编译器，类似于 `gcc` 编译器。）
- en: Installing the CUDA Toolkit (Windows)
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 CUDA 工具包（Windows）
- en: In the case of Windows users, you can install the package by double-clicking
    on the `.exe` file and following all the on-screen prompts.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Windows 用户，您可以通过双击 `.exe` 文件并遵循所有屏幕提示来安装包。
- en: Once the installation is complete, reset your system. We will now ensure that
    CUDA was installed correctly by checking the `nvcc` compiler. Under the Start
    menu, click on the `Visual Studio 2015` folder, and then click VS2015 x64 Native
    Tools Command Prompt. A Terminal window will pop up; now type `nvcc --version`
    and press *Enter*, which should give you the version information of the NVIDIA
    compiler.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，重置您的系统。现在，我们将通过检查 `nvcc` 编译器来确保 CUDA 已正确安装。在开始菜单下，点击 `Visual Studio 2015`
    文件夹，然后点击 VS2015 x64 本地工具命令提示符。一个终端窗口将弹出；现在输入 `nvcc --version` 并按 *Enter* 键，应该会给出
    NVIDIA 编译器的版本信息。
- en: Setting up our Python environment for GPU programming
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置我们的 Python 环境以进行 GPU 编程
- en: With our compilers, IDEs, and the CUDA Toolkit properly installed on our system,
    we now can set up an appropriate Python environment for GPU programming. There
    are many options here, but we explicitly recommend that you work with the Anaconda
    Python Distribution. Anaconda Python is a self-contained and user-friendly distribution
    that can be installed directly in your user directory, and which does not require
    any administrator or `sudo` level system access to install, use, or update.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的系统上正确安装了编译器、IDE和CUDA工具包之后，我们现在可以为GPU编程设置一个合适的Python环境。这里有多种选择，但我们明确建议您使用Anaconda
    Python发行版。Anaconda Python是一个自包含且用户友好的发行版，可以直接安装到您的用户目录中，并且安装、使用或更新时不需要任何管理员或`sudo`级别的系统访问权限。
- en: Keep in mind that Anaconda Python comes in two flavors—Python 2.7, and Python
    3\. Since Python 3 is currently not as well-supported for some of the libraries
    we will be using, we will be using Python 2.7 in this book, which still has a
    broad mainstream usage.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，Anaconda Python有两种版本——Python 2.7和Python 3。由于Python 3目前对我们将使用的某些库支持不佳，因此本书中将使用Python
    2.7，它仍然有广泛的主流使用。
- en: You can install Anaconda Python by going to [https://www.anaconda.com/download](https://www.anaconda.com/download),
    choosing your operating system, and then by choosing to download the Python 2.7
    version of the distribution. Follow the instructions given on the Anaconda site
    to install the distribution, which is relatively straightforward. We can now set
    up our local Python installation for GPU programming.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过访问[https://www.anaconda.com/download](https://www.anaconda.com/download)，选择您的操作系统，然后选择下载发行版的Python
    2.7版本来安装Anaconda Python。按照Anaconda网站上的说明安装发行版，这相对简单。我们现在可以为GPU编程设置我们的本地Python安装。
- en: 'We will now set up what is arguably the most important Python package for this
    book: Andreas Kloeckner''s PyCUDA package.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将设置本书可能最重要的Python包：Andreas Kloeckner的PyCUDA包。
- en: Installing PyCUDA (Linux)
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装PyCUDA（Linux）
- en: Open up a command line in Linux. Ensure that your `PATH` variable is set up
    correctly to use the local Anaconda installation of Python (rather than the system-wide
    installation) by typing `which python` at the bash prompt and pressing *Enter*
    (Anaconda should have automatically configured your `.bashrc` during installation);
    this should tell you that the Python binary is in your local `~/anaconda2/bin`
    directory, rather than in the `/usr/bin` directory. If this isn't the case, open
    a text editor and put the line `export PATH="/home/${USER}/anaconda2/bin:${PATH}"`
    at the end of your `~/.bashrc` file, save this, open a new Terminal, and then
    check again.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux中打开命令行。通过在bash提示符下输入`which python`并按*Enter*键来确保您的`PATH`变量已正确设置，以便使用本地Anaconda
    Python安装（而不是系统范围内的安装）；这应该会告诉您Python二进制文件位于您的本地`~/anaconda2/bin`目录中，而不是`/usr/bin`目录中。如果不是这种情况，打开文本编辑器，在`~/.bashrc`文件的末尾添加一行`export
    PATH="/home/${USER}/anaconda2/bin:${PATH}"`，保存此文件，然后打开一个新的终端，再次检查。
- en: There are several options for installation of PyCUDA. The easiest option is
    to install the latest stable version from the PyPI repository by typing `pip install
    pycuda`. You can also install the latest version of PyCUDA by following the instructions
    at the PyCUDA official website at [https://mathema.tician.de/software/pycuda/](https://mathema.tician.de/software/pycuda/).
    Please note that if you wish to re-install PyCUDA from a different source, be
    sure to uninstall it first with `pip uninstall pycuda`.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: PyCUDA的安装有几种选择。最简单的方法是通过在命令行中输入`pip install pycuda`从PyPI仓库安装最新稳定版本。您也可以通过遵循PyCUDA官方网站[https://mathema.tician.de/software/pycuda/](https://mathema.tician.de/software/pycuda/)上的说明来安装PyCUDA的最新版本。请注意，如果您希望从不同的来源重新安装PyCUDA，请务必先使用`pip
    uninstall pycuda`卸载它。
- en: Creating an environment launch script (Windows)
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建环境启动脚本（Windows）
- en: Windows users will need to be particularly careful that both their Visual Studio
    and Anaconda Python environment variables are set up correctly in order to use
    PyCUDA; otherwise, Python will not be able to find NVIDIA's `nvcc` CUDA compiler
    or Microsoft's `cl.exe` C++ compiler. Fortunately, batch scripts are included
    that will set up these environments for us automatically, but we will have to
    be careful that these are executed each and every time we want to do GPU programming.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Windows用户需要特别注意，为了使用PyCUDA，他们必须确保Visual Studio和Anaconda Python环境变量设置正确；否则，Python将无法找到NVIDIA的
    `nvcc` CUDA编译器或Microsoft的 `cl.exe` C++编译器。幸运的是，包含设置这些环境的批处理脚本，但我们必须小心确保每次我们想要进行GPU编程时都执行这些脚本。
- en: We will, therefore, create a batch script that will launch an appropriate IDE
    or command-line environment by calling these other two scripts in succession.
    (This script is also available at [https://github.com/PacktPublishing/Hands-On-GPU-Programming-with-Python-and-CUDA/blob/master/2/launch-python-cuda-environment.bat](https://github.com/btuomanen/handsongpuprogramming/blob/master/2/launch-python-cuda-environment.bat).)
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将创建一个批处理脚本，通过依次调用其他两个脚本来启动适当的IDE或命令行环境。（此脚本也可在 [https://github.com/PacktPublishing/Hands-On-GPU-Programming-with-Python-and-CUDA/blob/master/2/launch-python-cuda-environment.bat](https://github.com/btuomanen/handsongpuprogramming/blob/master/2/launch-python-cuda-environment.bat)
    找到。）
- en: 'Be sure to first open up Windows Notepad, and follow along:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 一定要首先打开Windows记事本，并按照以下步骤操作：
- en: First, find where your `vcvars.bat` file for Visual Studio is; in the case of
    Visual Studio 2015, it is at `C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat`.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，找到您的Visual Studio `vcvars.bat` 文件的位置；在Visual Studio 2015的情况下，它位于 `C:\Program
    Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat`。
- en: 'Type the following line into your text editor, and then press *Enter*:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下行输入到您的文本编辑器中，然后按 *Enter* 键：
- en: '[PRE6]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We now need to call the Anaconda's `activate.bat` script to set up the Anaconda
    Python environment variables; the standard path is `Anaconda2\Scripts\activate.bat`.
    We have to further indicate where the Anaconda libraries are with an argument
    to this script. In my case, the second line in my launch script would be `call
    "C:\Users\%username%\Anaconda2\Scripts\activate.bat" C:\Users\%username%\Anaconda2`.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在需要调用Anaconda的 `activate.bat` 脚本来设置Anaconda Python环境变量；标准路径是 `Anaconda2\Scripts\activate.bat`。我们必须进一步通过此脚本的参数来指示Anaconda库的位置。在我的情况下，我的启动脚本中的第二行将是
    `call "C:\Users\%username%\Anaconda2\Scripts\activate.bat" C:\Users\%username%\Anaconda2`。
- en: Finally, the last line of our batch script will launch whatever environment—IDE
    or command-line prompt—you prefer to program in, which will inherit all of the
    necessary environment and system variables the prior two scripts will set up.
    If you prefer the old standard DOS-style Command Prompt, this line should just
    be `cmd`. If you like to work from PowerShell, change this to `powershell`. It
    will be necessary to use the command line in some cases, particularly for accessing
    the command line `pip` and `conda` for updating your Python library.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们批处理脚本的最后一行将启动您偏好的编程环境——IDE 或命令行提示符——这将继承前两个脚本设置的所有必要环境和系统变量。如果您喜欢使用传统的DOS样式命令提示符，则此行应该是
    `cmd`。如果您喜欢使用PowerShell，则将其更改为 `powershell`。在某些情况下，您将需要使用命令行，特别是对于访问命令行的 `pip`
    和 `conda` 来更新您的Python库。
- en: Finally, save this file to your desktop with the filename `launch-python-cuda-environment.bat`.
    You can now launch our Python GPU programming environment by double-clicking this
    file.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将此文件保存到您的桌面上，文件名为 `launch-python-cuda-environment.bat`。您现在可以通过双击此文件来启动我们的Python
    GPU编程环境。
- en: (Keep in mind that if you wish to use the Jupyter Notebook or Spyder Python
    IDEs, you can simply launch these from the command line with `jupyter-notebook`
    or `spyder`, or alternatively, you can make a batch script that just replaces
    `cmd` with the appropriate IDE launch command.)
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: （请注意，如果您想使用Jupyter Notebook或Spyder Python IDE，您可以直接通过命令行使用 `jupyter-notebook`
    或 `spyder` 启动这些IDE，或者您也可以创建一个批处理脚本，只需将 `cmd` 替换为适当的IDE启动命令。）
- en: Installing PyCUDA (Windows)
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装PyCUDA（Windows）
- en: 'Due to the fact that most Python libraries are primarily written by and for
    Linux users, it is suggested that you install a pre-built PyCUDA wheel binary
    from Christoph Gohlke''s site at the following address: [https://www.lfd.uci.edu/~gohlke/pythonlibs/#pycuda](https://www.lfd.uci.edu/~gohlke/pythonlibs/#pycuda).
    Download a file of the from `pycuda‑2017.1.1+cuda(VERSION)‑cp27‑cp27m‑win_amd64.whl`  where
    version is your CUDA version number. You can now install PyCUDA by typing the
    following on the command line, and replacing `pycuda.whl` with the full path and
    filename of your PyCUDA wheel:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 由于大多数 Python 库主要是为 Linux 用户编写和设计的，建议您从以下地址 Christoph Gohlke 的网站上安装预构建的 PyCUDA
    轮子二进制文件：[https://www.lfd.uci.edu/~gohlke/pythonlibs/#pycuda](https://www.lfd.uci.edu/~gohlke/pythonlibs/#pycuda)。下载一个文件，格式为
    `pycuda‑2017.1.1+cuda(VERSION)‑cp27‑cp27m‑win_amd64.whl`，其中版本是您的 CUDA 版本号。现在，您可以通过在命令行中输入以下命令来安装
    PyCUDA，并将 `pycuda.whl` 替换为您 PyCUDA 轮子的完整路径和文件名：
- en: '[PRE7]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: (Alternatively, you can try installing PyCUDA from the PyPI repository with
    `pip install pycuda` , or by following the instructions on the PyCUDA website.)
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: （或者，您也可以尝试从 PyPI 存储库使用 `pip install pycuda` 安装 PyCUDA，或者按照 PyCUDA 网站的说明进行操作。）
- en: Testing PyCUDA
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试 PyCUDA
- en: Finally, we're at the point where we can see whether our GPU programming environment
    actually works. We will run a small program from the next chapter that will query
    our GPU and yield some relevant information about the model number, memory, number
    of cores, architecture, and so forth. Get the Python file (`deviceQuery.py`) from
    directory `3` in the repository, which is also available at [https://github.com/PacktPublishing/Hands-On-GPU-Programming-with-Python-and-CUDA/blob/master/3/deviceQuery.py](https://github.com/PacktPublishing/Hands-On-GPU-Programming-with-Python-and-CUDA/blob/master/3/deviceQuery.py).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们到了一个可以查看我们的 GPU 编程环境是否真正工作的阶段。我们将运行下一章中的一个小程序，该程序将查询我们的 GPU 并提供有关型号、内存、核心数量、架构等方面的相关信息。从存储库中的目录
    `3` 获取 Python 文件 (`deviceQuery.py`)，该文件也可在 [https://github.com/PacktPublishing/Hands-On-GPU-Programming-with-Python-and-CUDA/blob/master/3/deviceQuery.py](https://github.com/PacktPublishing/Hands-On-GPU-Programming-with-Python-and-CUDA/blob/master/3/deviceQuery.py)
    找到。
- en: If you are using Windows, be sure to launch the GPU programming environment
    by launching the `.bat` file on our desktop we made in the last section. Otherwise,
    if you are using Linux, open a bash Terminal. Now type the following line and
    press *Enter—*`python deviceQuery.py`.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是 Windows，请确保通过启动我们在上一节中创建的桌面上的 `.bat` 文件来启动 GPU 编程环境。否则，如果您使用的是 Linux，请打开
    bash 终端。现在输入以下行并按 *Enter—*`python deviceQuery.py`。
- en: 'This will output many lines of data, but the first few lines should indicate
    that your GPU has been detected by PyCUDA, and you should see the model number
    in the following line:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这将输出许多行数据，但前几行应表明您的 GPU 已被 PyCUDA 检测到，并且您应该在下一行看到型号号：
- en: '![](img/51a20697-a1c6-435b-95a0-9845a9506ab6.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/51a20697-a1c6-435b-95a0-9845a9506ab6.png)'
- en: Congratulations, you are now ready to embark upon the world of GPU programming!
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜，您现在可以开始进入 GPU 编程的世界了！
- en: Summary
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Setting up your Python environment for GPU programming can be a very delicate
    process. The Anaconda Python 2.7 distribution is suggested for both Windows and
    Linux users for the purposes of this text. First, we should ensure that we have
    the correct hardware for GPU programming; generally speaking, a 64-bit Windows
    or Linux PC with 4 gigabytes of RAM and any entry-level NVIDIA GPU from 2016 or
    later will be sufficient for our ends. Windows users should be careful in using
    a version of Visual Studio that works well with both the CUDA Toolkit and Anaconda
    (such as VS 2015), while Linux users should be particularly careful in the installation
    of their GPU drivers, and set up the appropriate environment variables in their
    `.bashrc` file. Furthermore, Windows users should create an appropriate launch
    script that will set up their environment for GPU programming and should use a
    pre-compiled wheel file for the installation of the PyCUDA library.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 Python 环境以进行 GPU 编程可能是一个非常细致的过程。对于本文本的目的，建议 Windows 和 Linux 用户都使用 Anaconda
    Python 2.7 发行版。首先，我们应该确保我们有正确的硬件进行 GPU 编程；一般来说，64 位 Windows 或 Linux PC，具有 4GB
    的 RAM，以及 2016 年或更晚的任何入门级 NVIDIA GPU 都将满足我们的需求。Windows 用户应小心使用与 CUDA 工具包和 Anaconda
    都兼容的 Visual Studio 版本（例如 VS 2015），而 Linux 用户应特别注意其 GPU 驱动程序的安装，并在其 `.bashrc` 文件中设置适当的环境变量。此外，Windows
    用户应创建一个适当的启动脚本，以设置其 GPU 编程环境，并应使用预编译的轮子文件安装 PyCUDA 库。
- en: Now, with our programming environment set up and in place, we will spend the
    next chapter learning the very basics of GPU programming. We will see how to write
    and read data to and from the GPU's memory, and how to write some very simple
    *elementwise* GPU functions in CUDA C. (If you have seen the classic 1980's film
    *The Karate Kid*, then you might think of the following chapter as the "wax on,
    wax off" of GPU programming.)
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，随着我们的编程环境已经设置并就绪，我们将花费下一章学习 GPU 编程的非常基础的知识。我们将了解如何将数据写入和从 GPU 的内存中读取，以及如何在
    CUDA C 中编写一些非常简单的 *逐元素* GPU 函数。（如果你看过经典的 1980 年代电影《空手道小子》，那么你可能会把下一章看作是 GPU 编程的“涂蜡，抹蜡”阶段。）
- en: Questions
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Can we run CUDA on our main processor's built-in Intel HD GPU? What about on
    a discrete AMD Radeon GPU?
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们能在我们的主处理器的内置英特尔 HD GPU 上运行 CUDA 吗？在独立的 AMD Radeon GPU 上呢？
- en: Does this book use Python 2.7 or Python 3.7 for examples?
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这本书使用 Python 2.7 还是 Python 3.7 作为示例？
- en: What program do we use in Windows to see what GPU hardware we have installed?
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在 Windows 中使用什么程序来查看我们安装了哪些 GPU 硬件？
- en: What command-line program do we use in Linux to see what GPU hardware we have
    installed?
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在 Linux 中使用什么命令行程序来查看我们安装了哪些 GPU 硬件？
- en: What is the command we use in Linux to determine how much memory our system
    has?
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在 Linux 中使用什么命令来确定我们的系统有多少内存？
- en: If we don't want to alter our Linux system's APT repository, should we use the
    `run` or `deb` installer for CUDA?
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们不希望修改我们的 Linux 系统的 APT 仓库，我们应该使用 `run` 还是 `deb` 安装程序来安装 CUDA？
