["```py\n> $SPARK_HOME/bin/spark-shell --packages graphframes:graphframes:0.3.0-spark2.0-s_2.11\n\n```", "```py\ngraphframes:graphframes:0.3.0-spark2.0-s_2.11\n```", "```py\n# Set File Paths\ntripdelaysFilePath = \"/databricks-datasets/flights/departuredelays.csv\"\nairportsnaFilePath = \"/databricks-datasets/flights/airport-codes-na.txt\"\n\n# Obtain airports dataset\n# Note, this dataset is tab-delimited with a header\nairportsna = spark.read.csv(airportsnaFilePath, header='true', inferSchema='true', sep='\\t')\nairportsna.createOrReplaceTempView(\"airports_na\")\n\n# Obtain departure Delays data\n# Note, this dataset is comma-delimited with a header\ndepartureDelays = spark.read.csv(tripdelaysFilePath, header='true')\ndepartureDelays.createOrReplaceTempView(\"departureDelays\")\ndepartureDelays.cache()\n```", "```py\n# Available IATA codes from the departuredelays sample dataset\ntripIATA = spark.sql(\"select distinct iata from (select distinct origin as iata from departureDelays union all select distinct destination as iata from departureDelays) a\")\ntripIATA.createOrReplaceTempView(\"tripIATA\")\n```", "```py\n# Only include airports with atleast one trip from the \n# `departureDelays` dataset\nairports = spark.sql(\"select f.IATA, f.City, f.State, f.Country from airports_na f join tripIATA t on t.IATA = f.IATA\")\nairports.createOrReplaceTempView(\"airports\")\nairports.cache()\n```", "```py\n# Build `departureDelays_geo` DataFrame\n# Obtain key attributes such as Date of flight, delays, distance, \n# and airport information (Origin, Destination)  \ndepartureDelays_geo = spark.sql(\"select cast(f.date as int) as tripid, cast(concat(concat(concat(concat(concat(concat('2014-', concat(concat(substr(cast(f.date as string), 1, 2), '-')), substr(cast(f.date as string), 3, 2)), ''), substr(cast(f.date as string), 5, 2)), ':'), substr(cast(f.date as string), 7, 2)), ':00') as timestamp) as `localdate`, cast(f.delay as int), cast(f.distance as int), f.origin as src, f.destination as dst, o.city as city_src, d.city as city_dst, o.state as state_src, d.state as state_dst from departuredelays f join airports o on o.iata = f.origin join airports d on d.iata = f.destination\") \n\n# Create Temporary View and cache\ndepartureDelays_geo.createOrReplaceTempView(\"departureDelays_geo\")\ndepartureDelays_geo.cache()\n```", "```py\n# Review the top 10 rows of the `departureDelays_geo` DataFrame\ndepartureDelays_geo.show(10)\n```", "```py\n# Note, ensure you have already installed \n# the GraphFrames spark-package\nfrom pyspark.sql.functions import *\nfrom graphframes import *\n\n# Create Vertices (airports) and Edges (flights)\ntripVertices = airports.withColumnRenamed(\"IATA\", \"id\").distinct()\ntripEdges = departureDelays_geo.select(\"tripid\", \"delay\", \"src\", \"dst\", \"city_dst\", \"state_dst\")\n\n# Cache Vertices and Edges\ntripEdges.cache()\ntripVertices.cache()\n```", "```py\ndisplay(tripEdges)\n```", "```py\ntripGraph = GraphFrame(tripVertices, tripEdges)\n```", "```py\nprint \"Airports: %d\" % tripGraph.vertices.count()\nprint \"Trips: %d\" % tripGraph.edges.count()\n```", "```py\ntripGraph.edges.groupBy().max(\"delay\")\n\n# Output\n+----------+\n|max(delay)| \n+----------+ \n|      1642| \n+----------+\n```", "```py\nprint \"On-time / Early Flights: %d\" % tripGraph.edges.filter(\"delay <= 0\").count()\nprint \"Delayed Flights: %d\" % tripGraph.edges.filter(\"delay > 0\").count()\n```", "```py\ntripGraph.edges\\\n  .filter(\"src = 'SEA' and delay > 0\")\\\n  .groupBy(\"src\", \"dst\")\\\n  .avg(\"delay\")\\\n  .sort(desc(\"avg(delay)\"))\\\n  .show(5)\n```", "```py\n# States with the longest cumulative delays (with individual\n# delays > 100 minutes) (origin: Seattle)\ndisplay(tripGraph.edges.filter(\"src = 'SEA' and delay > 100\"))\n```", "```py\ndisplay(tripGraph.degrees.sort(desc(\"degree\")).limit(20))\n```", "```py\ndisplay(tripGraph.inDegrees.sort(desc(\"inDegree\")).limit(20))\n```", "```py\ndisplay(tripGraph.outDegrees.sort(desc(\"outDegree\")).limit(20))\n```", "```py\n# Calculate the inDeg (flights into the airport) and \n# outDeg (flights leaving the airport)\ninDeg = tripGraph.inDegrees\noutDeg = tripGraph.outDegrees\n\n# Calculate the degreeRatio (inDeg/outDeg)\ndegreeRatio = inDeg.join(outDeg, inDeg.id == outDeg.id) \\\n  .drop(outDeg.id) \\\n  .selectExpr(\"id\", \"double(inDegree)/double(outDegree) as degreeRatio\") \\\n  .cache()\n\n# Join back to the 'airports' DataFrame \n# (instead of registering temp table as above)\ntransferAirports = degreeRatio.join(airports, degreeRatio.id == airports.IATA) \\\n  .selectExpr(\"id\", \"city\", \"degreeRatio\") \\\n  .filter(\"degreeRatio between 0.9 and 1.1\")\n\n# List out the top 10 transfer city airports\ndisplay(transferAirports.orderBy(\"degreeRatio\").limit(10))\n```", "```py\n# Generate motifs\nmotifs = tripGraphPrime.find(\"(a)-[ab]->(b); (b)-[bc]->(c)\")\\\n  .filter(\"(b.id = 'SFO') and (ab.delay > 500 or bc.delay > 500) and bc.tripid > ab.tripid and bc.tripid < ab.tripid + 10000\")\n\n# Display motifs\ndisplay(motifs)\n```", "```py\n# Determining Airport ranking of importance using 'pageRank'\nranks = tripGraph.pageRank(resetProbability=0.15, maxIter=5)\n\n# Display the pageRank output\ndisplay(ranks.vertices.orderBy(ranks.vertices.pagerank.desc()).limit(20))\n```", "```py\n# Determine the most popular non-stop flights\nimport pyspark.sql.functions as func\ntopTrips = tripGraph \\\n  .edges \\\n  .groupBy(\"src\", \"dst\") \\\n  .agg(func.count(\"delay\").alias(\"trips\"))\n\n# Show the top 20 most popular flights (single city hops)\ndisplay(topTrips.orderBy(topTrips.trips.desc()).limit(20))\n```", "```py\n# Obtain list of direct flights between SEA and SFO\nfilteredPaths = tripGraph.bfs(\n  fromExpr = \"id = 'SEA'\",\n  toExpr = \"id = 'SFO'\",\n  maxPathLength = 1)\n\n# display list of direct flights\ndisplay(filteredPaths)\n```", "```py\n# Obtain list of direct flights between SFO and BUF\nfilteredPaths = tripGraph.bfs(\n  fromExpr = \"id = 'SFO'\",\n  toExpr = \"id = 'BUF'\",\n  maxPathLength = 1)\n\n# display list of direct flights\ndisplay(filteredPaths)\n```", "```py\n# display list of one-stop flights between SFO and BUF\nfilteredPaths = tripGraph.bfs(\n  fromExpr = \"id = 'SFO'\",\n  toExpr = \"id = 'BUF'\",\n  maxPathLength = 2)\n\n# display list of flights\ndisplay(filteredPaths)\n```", "```py\n# Display most popular layover cities by descending count\ndisplay(filteredPaths.groupBy(\"v1.id\", \"v1.City\").count().orderBy(desc(\"count\")).limit(10))\n```", "```py\n%scala\n// On-time and Early Arrivals\nimport d3a._\ngraphs.force(\n  height = 800,\n  width = 1200,\n  clicks = sql(\"\"\"select src, dst as dest, count(1) as count from departureDelays_geo where delay <= 0 group by src, dst\"\"\").as[Edge])\n```"]