- en: Spatial Processing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we'll be performing spatial analysis using QGIS. We'll use
    the data from the GeoPackage that we used in the previous data chapters. Firstly,
    we'll look at the Processing Toolbox and then move on to some individual tools
    and spatially query our data.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: The Processing Toolbox
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spatial queries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyzing data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Raster-based analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Processing Toolbox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'From the Processing menu, select Toolbox. The Processing Toolbox is shown as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/da1188e1-58a0-4907-87ac-a15821410a0f.png)'
  prefs: []
  type: TYPE_IMG
- en: Processing Toolbox
  prefs: []
  type: TYPE_NORMAL
- en: At the top of the Processing Toolbox, there is a toolbar. In this toolbar, the
    first button is used to call the model builder and the second button opens the
    Python scripting tools, both of which we'll come to later. The next four buttons,
    in order, show History, Results Viewer, Edit Features In-Place (this button shows
    tools that *filters to display only algorithms that allow in-place modification
    of the geometries*), and processing settings. Under this toolbar is the search
    feature; using this feature, you can quickly find processing tools and run them.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we'll use these tools to analyze and work with our data. We'll
    use some of the tools in the Processing Toolbox to answer some spatial or GIS-type
    questions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new empty QGIS project. Load in the following layers from the GeoPackage:'
  prefs: []
  type: TYPE_NORMAL
- en: '`regions`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pipelines`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What regions intersect pipelines?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can answer this with a spatial query. In QGIS, this tool is called Select
    by Location; search for this term in the Processing Toolbox, then double-click
    on the tool to open the dialog box. We want to use this tool to select all of
    the features from the `regions` layer that intersect with `pipelines`. The input
    will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6b884b19-e69b-48f4-88a9-e1b73739c464.png)'
  prefs: []
  type: TYPE_IMG
- en: Select by Location tool
  prefs: []
  type: TYPE_NORMAL
- en: 'The output in QGIS will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ceba0746-6e33-4d56-a034-b26d641175ae.png)'
  prefs: []
  type: TYPE_IMG
- en: Selected regions highlighted
  prefs: []
  type: TYPE_NORMAL
- en: Open the attribute table by right-clicking on the layer and choosing Open Attribute
    Table. You will see the selected regions in the table. It is possible to expand
    on this query and create a field in the `regions` layer that notes whether the
    pipeline intersected the region or not. To do this, we can use the field calculator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add a field called `Pipeline` and assign the value one if the pipeline
    runs through the region and zero if it doesn''t. In the attribute table, click
    on the open field calculator button (the icon is an abacus). Fill in the Field
    Calculator as follows. Make sure the checkbox next to Only update 5 selected features
    is selected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/eff21d99-6254-44a0-a9a4-38910634a119.png)'
  prefs: []
  type: TYPE_IMG
- en: The field calculator
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on OK and then open the attribute table; you will see a new field called
    `Pipeline`. This is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/023b7c9f-ce9a-465f-a39c-fcf79fbd82cd.png)'
  prefs: []
  type: TYPE_IMG
- en: Attribute table with selected feature(s)
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to add the value zero now to all of the other fields. Invert the selection
    (the button looks like a yellow triangle underneath a grey triangle). Choose the
    `Pipeline` field from the drop-down menu and set the value equal to 0\. Click
    on Update Selected. The value to change is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/650ebb75-ea3f-429e-9fba-56d070825d4c.png)'
  prefs: []
  type: TYPE_IMG
- en: Update existing field in the field calculator
  prefs: []
  type: TYPE_NORMAL
- en: Click on OK. Now, the `Pipeline` field has either zero (not impacted) or one
    (impacted). Clear the selection and untoggle the editing. We could use the styling
    skills from [Chapter 4](e8289aa4-8eb7-4d2d-9662-4c17889a53e3.xhtml), *Styling
    Data*, to symbolize the region layer based on the newly created `Pipeline` field.
  prefs: []
  type: TYPE_NORMAL
- en: What buildings and settlements are within 15,000 feet of the pipeline?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To answer this question, we need to perform a buffer on the pipeline and then
    select the points in the popp layer that fall inside this buffer. This is a common
    GIS query, and the method shown here should be applicable to any similar query
    you might have about your data. Load the popp layer into the map.
  prefs: []
  type: TYPE_NORMAL
- en: 'Search in the Processing Toolbox for Buffer. Double-click to open the tool.
    Select the `pipelines` layer and set the buffer Distance to `15000` feet. Check
    the box next to Dissolve result; this will merge any adjacent or overlapping features
    into one feature. For the output, choose the GeoPackage that we supplied with
    this book containing this `alaska` layers. The Buffer dialog should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0627bafa-9b8b-4dbe-9d89-758c12971f4d.png)'
  prefs: []
  type: TYPE_IMG
- en: The Buffer tool
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on Run. Click on Close when the tool has finished. On the map, we should
    now have a buffer of the pipelines. Use the Select by Location tool as before,
    but this time select the points in the popp layer that are within this newly created
    buffer. The dialog should look similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6b295ff1-4627-45c0-854f-a237f34953de.png)'
  prefs: []
  type: TYPE_IMG
- en: Select by Location tool
  prefs: []
  type: TYPE_NORMAL
- en: 'After clicking Run, close the tool and inspect the map. This query results
    in 49 features being selected. To write these out to a new layer, right-click
    on the popp layer in the layer panel and select Export | Save Selected Features
    As. Save the selected features to a new layer in the GeoPackage called `Popp_in_pipeline_corridor`.
    This is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6cd740d6-25f5-43cb-8fa0-c72efef001c0.png)'
  prefs: []
  type: TYPE_IMG
- en: Saving the layer
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on OK and, in the layer panel, turn off all of the layers apart from
    this one and the regions. Your map should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a96b810c-5a9a-4e00-85f8-8456e5dce949.png)'
  prefs: []
  type: TYPE_IMG
- en: All of the popp points 15,000 feet from the pipeline
  prefs: []
  type: TYPE_NORMAL
- en: Similar to the first question, this query is common in GIS. Instead of settlements
    and buildings in a pipeline corridor, you might be dealing with address points
    for customers within *x* distance of a new shop that you might wish to contact
    to let them know about a new offer.
  prefs: []
  type: TYPE_NORMAL
- en: What is the distribution landcover types inside the buffered pipeline?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This question is one where we combine both raster and vector data to provide
    an answer. We might want to know whether the pipeline is going through a protected
    area and how much of that area is impacted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Load the `landcover.img` dataset into the Layers panel. To answer this question,
    we''ll use a tool call Zonal Histogram. Search for it in the toolbox. Set Raster
    layer as the `landcover` layer, set Vector layer containing zones as the Buffered
    pipelines, and choose to prefix the zones with the word `Terrain_`. Save your
    changes to the GeoPackage. This is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b95555ea-f499-459c-a9f8-3e9bd2c45db6.png)'
  prefs: []
  type: TYPE_IMG
- en: Zonal histogram tool
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on Run in Background and close when finished. A new layer with one feature
    will have been added to the Layers panel. Right-click on this layer and open the
    attribute table. The table only has one feature because we dissolved the buffer
    when we created it. The resulting table looks like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c32f9623-f121-4df5-b183-eed87d1d12f2.png)'
  prefs: []
  type: TYPE_IMG
- en: The attribute table generated by the zonal stats tool
  prefs: []
  type: TYPE_NORMAL
- en: We can see the field with `Terrain_x`, where `x` corresponds to the value in
    the `landcover` raster. The most impacted terrain of the pipeline was `Terrain_9`.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 7](bab7139e-9f38-4dff-b1eb-c5056be9c960.xhtml), *Expanding QGIS
    3*, we'll look at how we can combine the tools in questions 2 and 3 into a model
    to automate these processes. This would allow us to just run one tool.
  prefs: []
  type: TYPE_NORMAL
- en: Let's now move on to terrain modeling with raster data.
  prefs: []
  type: TYPE_NORMAL
- en: Raster analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a new QGIS project and load into the map the `landcover.img` file. We'll
    use this layer to demonstrate a couple of the many raster processing tools in
    QGIS. On load, we have landcover classes with values ranging from 0 to 13\. The
    value zero appears to correspond to water. In this example, we're going to set
    all of the values that are equal to zero to nodata. In GIS we would set raster
    data to no data when we have data that we don't want to use or display.
  prefs: []
  type: TYPE_NORMAL
- en: 'To change the 0 values in the `Landcover` dataset to nodata, select Raster
    | Conversion | Translate (Convert Format) as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b0ea5f6f-bfa4-4f39-b606-63d562fa6ba3.png)'
  prefs: []
  type: TYPE_IMG
- en: Calling the Translate tool
  prefs: []
  type: TYPE_NORMAL
- en: 'The Translate tool is very helpful to convert rasters into different data types
    and formats. It''s built on the GDAL translate tool; you can read about the options
    with `gdal_translate` here: [https://www.gdal.org/gdal_translate.html](https://www.gdal.org/gdal_translate.html).
    With the Translate tool open in QGIS, select the `landcover` layer as Input layer
    and set Assign a specific nodata value to the output bands to `0`. Save the output
    box labeled Converted as `Landcover_Null.tif`. This is shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/093b7ca0-ae96-4678-889e-b391d452daac.png)'
  prefs: []
  type: TYPE_IMG
- en: Using the Translate tool to set a no data value
  prefs: []
  type: TYPE_NORMAL
- en: 'The resulting raster will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f4e1a064-adf7-48d8-aeda-d4c2c8899413.png)'
  prefs: []
  type: TYPE_IMG
- en: Landcover with the values 0 set to no data
  prefs: []
  type: TYPE_NORMAL
- en: 'Using this newly created layer, we''ll reclassify this raster dataset based
    on a conditional statement in Raster Calculator. We''ll set every terrain will
    a value greater than or equal to five to zero and everything else to one. Open
    Raster Calculator and enter the following in the Raster Calculator Expression
    window: `"Converted@1" >= 5`, and save as `Landcover_Null_reclassified.tif` as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/42e9a1b8-4644-4a06-9ddb-95c739e8d21d.png)'
  prefs: []
  type: TYPE_IMG
- en: Conditional statements in the Raster Calculator
  prefs: []
  type: TYPE_NORMAL
- en: 'The resulting binary raster will look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/413e49ac-4d61-4c13-b403-2eef522214a7.png)'
  prefs: []
  type: TYPE_IMG
- en: Conditional raster generated from the Raster Calculator
  prefs: []
  type: TYPE_NORMAL
- en: 'You might not have expected this result as the values `0` are in black and
    `1` are displayed in white. We could alter this; to do so, we need to change the
    rendering for the values of `1` to be shaded and everything else to be transparent
    (or white). Right-click on the `Landcover_Null_reclassed` layer and select Properties.
    Set Render type to Paletted/Unique values, click on Classify and adjust the values
    of `1` to red and `0` to transparent, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b021c4b1-c258-4243-bf34-b7ac1add9ba1.png)'
  prefs: []
  type: TYPE_IMG
- en: Changing the raster rendering
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll look at converting this raster into a vector dataset.
  prefs: []
  type: TYPE_NORMAL
- en: Converting into vectors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Reclassifying rasters is useful for many visualization and processing workflows
    but also useful for converting data into vectors. From the Raster menu, select
    Conversion | Polygonize (Raster to Vector), which will open the Raster to Vector
    tool. Save the Vectorized layer as a new GeoPackage layer called `vectorised_terrains.gpkg`
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3dfd5b02-b534-413f-9404-4c4b6ca5fe00.png)'
  prefs: []
  type: TYPE_IMG
- en: Polygonize tool
  prefs: []
  type: TYPE_NORMAL
- en: 'This will take a little while to run as the raster is quite complex. Once finished,
    you''ll have a vector layer that will look similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a4dc26dd-126d-49d8-8f3d-849e1b93596a.png)'
  prefs: []
  type: TYPE_IMG
- en: The resulting vector layer created from the conditional raster
  prefs: []
  type: TYPE_NORMAL
- en: 'The newly created vector dataset will have features with a `DN` field equal
    to either `1` or `0`. In this case, we aren''t interested in any of the `DN` values
    equal to `0`. Open the attribute table of the layer and select the values in the
    `DN` field that are equal to `0` using the select features. Using an expression
    (click on the tenth button from the left in the attribute table). Click on Select
    features and then Close, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c717f440-229a-40e3-bfbf-88fc6c014d85.png)'
  prefs: []
  type: TYPE_IMG
- en: Editing the vectorized layer
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the Toggle editing mode button in the attribute table (first button
    on the left) and then click on the red trashcan to delete the selected values.
    Click on the Toggle editing mode to turn off editing and save the edits. The final
    data should now look similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6fde5516-75c9-40da-8be0-69765e5839df.png)'
  prefs: []
  type: TYPE_IMG
- en: Final vectorized terrain layer
  prefs: []
  type: TYPE_NORMAL
- en: There are many raster analysis tools in the QGIS processing toolbox that we
    could use. For example, if you have access to a DEM, you could create slope maps
    and other types of terrain analysis; search for Raster Terrain Analysis in the
    Processing Toolbox.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we've dipped our toes into the Processing Toolbox in QGIS.
    We asked questions about our data. We used simple GIS processes and tools in QGIS
    to derive answers from our data. The power of GIS lies in its data. We also looked
    at both vector- and raster-based queries.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll look at extending this by using the model builder
    to chain common processing tools together, before looking at Plugins and the Python
    Console.
  prefs: []
  type: TYPE_NORMAL
