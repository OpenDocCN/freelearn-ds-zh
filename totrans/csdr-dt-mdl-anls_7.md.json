["```py\n-seeds: ubtc01\nlisten_address:\nrpc_address: 0.0.0.0\nendpoint_snitch: GossipingPropertyFileSnitch\nauto_bootstrap: false\n```", "```py\ndc=NY1\nrack=RACK1\n```", "```py\n    ubtc01:~$ sudo service cassandra stop\n    ubtc02:~$ sudo service cassandra stop\n\n    ```", "```py\n    ubtc01:~$ sudo rm -rf /var/lib/cassandra/data/system/*\n    ubtc02:~$ sudo rm -rf /var/lib/cassandra/data/system/*\n\n    ```", "```py\n    ubtc01:~$ sudo service cassandra start\n\n    ```", "```py\n    ubtc02:~$ sudo service cassandra start\n\n    ```", "```py\n    ubtc01:~$ nodetool status\n\n    ```", "```py\n    ubuntu:~$ nodetool snapshot packtcdma\n\n    ```", "```py\n    ubuntu:~$ mkdir ~/temp/\n    ubuntu:~$ mkdir ~/temp/packtcdma/\n    ubuntu:~$ mkdir ~/temp/packtcdma/alert_by_date/\n    ubuntu:~$ mkdir ~/temp/packtcdma/alertlist/\n    ubuntu:~$ mkdir ~/temp/packtcdma/quote/\n    ubuntu:~$ mkdir ~/temp/packtcdma/watchlist/\n    ubuntu:~$ sudo cp -p /var/lib/cassandra/data/packtcdma/alert_by_date/snapshots/1412082842986/* ~/temp/packtcdma/alert_by_date/\n    ubuntu:~$ sudo cp -p /var/lib/cassandra/data/packtcdma/alertlist/snapshots/1412082842986/* ~/temp/packtcdma/alertlist/\n    ubuntu:~$ sudo cp -p /var/lib/cassandra/data/packtcdma/quote/snapshots/1412082842986/* ~/temp/packtcdma/quote/\n    ubuntu:~$ sudo cp -p /var/lib/cassandra/data/packtcdma/watchlist/snapshots/1412082842986/* ~/temp/packtcdma/watchlist/\n\n    ```", "```py\n    ubuntu:~$ cqlsh ubtc01\n    cqlsh> CREATE KEYSPACE packtcdma WITH replication = {'class': 'NetworkTopologyStrategy',  'NY1': '2'};\n\n    ```", "```py\n    cqlsh> CREATE TABLE packtcdma.alert_by_date (\n     price_time timestamp,\n     symbol varchar,\n     signal_price float,\n     stock_name varchar,\n     PRIMARY KEY (price_time, symbol));\n    cqlsh> CREATE TABLE packtcdma.alertlist (\n     symbol varchar,\n     price_time timestamp,\n     signal_price float,\n     stock_name varchar,\n     PRIMARY KEY (symbol, price_time));\n    cqlsh> CREATE TABLE packtcdma.quote (\n     symbol varchar,\n     price_time timestamp,\n     close_price float,\n     high_price float,\n     low_price float,\n     open_price float,\n     stock_name varchar,\n     volume double,\n     PRIMARY KEY (symbol, price_time));\n    cqlsh> CREATE TABLE packtcdma.watchlist (\n     watch_list_code varchar,\n     symbol varchar,\n     PRIMARY KEY (watch_list_code, symbol));\n\n    ```", "```py\n    ubuntu:~$ cd ~/temp\n    ubuntu:~/temp$ sstableloader -d ubtc01 packtcdma/alert_by_date\n    ubuntu:~/temp$ sstableloader -d ubtc01 packtcdma/alertlist\n    ubuntu:~/temp$ sstableloader -d ubtc01 packtcdma/quote\n    ubuntu:~/temp$ sstableloader -d ubtc01 packtcdma/watchlist\n\n    ```", "```py\n    cqlsh> select * from packtcdma.alert_by_date;\n    cqlsh> select * from packtcdma.alertlist;\n    cqlsh> select * from packtcdma.quote;\n    cqlsh> select * from packtcdma.watchlist;\n\n    ```", "```py\n# -*- coding: utf-8 -*-\n# program: chapter07_001.py\n\n# other functions are not shown for brevity\n\ndef testcase003():\n    ## create Cassandra instance with multiple nodes\n    cluster = Cluster(['ubtc01', 'ubtc02'])\n\n    ## establish Cassandra connection, using local default\n    session = cluster.connect('packtcdma')\n\n    start_date = datetime.datetime(2012, 6, 28)\n    end_date = datetime.datetime(2013, 9, 28)\n\n    ## load the watch list\n    stocks_watched = load_watchlist(session, \"WS01\")\n\n    for symbol in stocks_watched:\n        ## retrieve data\n        data = retrieve_data(session, symbol, start_date, end_date)\n\n        ## compute 10-Day SMA\n        data = sma(data, 10)\n\n        ## generate the buy-and-hold signals\n        alerts = signal_close_higher_than_sma10(data)\n\n        ## save the alert list\n        for index, r in alerts.iterrows():\n            insert_alert(session, symbol, index, \\\n                         Decimal(r['close_price']), \\\n                         r['stock_name'])\n\n    ## close Cassandra connection\n    cluster.shutdown()\n\ntestcase003()\n```", "```py\nALTER TABLE watchlist WITH caching=''ROWS_ONLY'';\n\n```"]