["```py\nName,Gender,Age,Major\nKen,Male,24,Finance\nAshley,Female,25,Statistics\nJennifer,Female,23,Computer Science\n```", "```py\nreadLines(\"data/persons.csv\")\n## [1] \"Name,Gender,Age,Major\" \n## [2] \"Ken,Male,24,Finance\" \n## [3] \"Ashley,Female,25,Statistics\" \n## [4] \"Jennifer,Female,23,Computer Science\"\n```", "```py\nreadLines(\"data/persons.csv\", n = 2)\n## [1] \"Name,Gender,Age,Major\" \"Ken,Male,24,Finance\"\n```", "```py\npersons1 <- read.csv(\"data/persons.csv\", stringsAsFactors = FALSE)str(persons1)\n## 'data.frame': 3 obs. of 4 variables:\n## $ Name : chr \"Ken\" \"Ashley\" \"Jennifer\"\n## $ Gender: chr \"Male\" \"Female\" \"Female\"\n## $ Age : int 24 25 23\n## $ Major : chr \"Finance\" \"Statistics\" \"Computer Science\"\n```", "```py\npersons2 <- read.csv(\"data/persons.csv\", colClasses = c(\"character\", \"factor\", \"integer\", \"character\"),  col.names = c(\"name\", \"sex\", \"age\", \"major\"))  str(persons2)\n## 'data.frame': 3 obs. of 4 variables:\n## $ name : chr \"Ken\" \"Ashley\" \"Jennifer\"\n## $ sex : Factor w/ 2 levels \"Female\",\"Male\": 2 1 1\n## $ age : int 24 25 23\n## $ major: chr \"Finance\" \"Statistics\" \"Computer Science\"\n```", "```py\npersons3 <- readr::read_csv(\"data/persons.csv\")str(persons3)\n## Classes 'tbl_df', 'tbl' and 'data.frame': 3 obs. of 4 variables:\n## $ Name : chr \"Ken\" \"Ashley\" \"Jennifer\"\n## $ Gender: chr \"Male\" \"Female\" \"Female\"\n## $ Age : int 24 25 23\n## $ Major : chr \"Finance\" \"Statistics\" \"Computer Science\"\n```", "```py\nName     Gender Age Major\nKen      Male   24  Finance\nAshley   Female 25  Statistics\nJennifer Female 23  Computer Science\n```", "```py\nread.table(\"data/persons.txt\", sep = \" \")\n## Error in scan(file, what, nmax, sep, dec, quote, skip, nlines, na.strings, : line 1 did not have 20 elements\n```", "```py\nreadr::read_table(\"data/persons.txt\")\n##   Name     Gender Age Major\n## 1 Ken      Male   24  Finance\n## 2 Ashley   Female 25  Statistics\n## 3 Jennifer Female 23  Computer Science\n```", "```py\nsome_data <- data.frame(\nid = 1:4,\ngrade = c(\"A\", \"A\", \"B\", NA), width = c(1.51, 1.52, 1.46, NA),check_date = as.Date(c(\"2016-03-05\", \"2016-03-06\", \"2016-03-10\", \"2016-03-11\")))some_data\n##   id grade width check_date\n## 1 1   A    1.51  2016-03-05\n## 2 2   A    1.52  2016-03-06\n## 3 3   B    1.46  2016-03-10\n## 4 4  <NA>   NA   2016-03-11\nwrite.csv(some_data, \"data/some_data.csv\")\n```", "```py\ncat(readLines(\"data/some_data.csv\"), sep = \"\\n\")\n## \"\",\"id\",\"grade\",\"width\",\"check_date\"\n## \"1\",1,\"A\",1.51,2016-03-05\n## \"2\",2,\"A\",1.52,2016-03-06\n## \"3\",3,\"B\",1.46,2016-03-10\n## \"4\",4,NA,NA,2016-03-11\n```", "```py\nwrite.csv(some_data, \"data/some_data.csv\", quote =FALSE, na = \"-\", row.names = FALSE)\n```", "```py\ncat(readLines(\"data/some_data.csv\"), sep = \"\\n\")\n## id,grade,width,check_date\n## 1,A,1.51,2016-03-05\n## 2,A,1.52,2016-03-06\n## 3,B,1.46,2016-03-10\n## 4,-,-,2016-03-11\n```", "```py\nreadr::read_csv(\"data/some_data.csv\", na = \"-\")\n##   id grade width check_date\n## 1 1   A    1.51  2016-03-05\n## 2 2   A    1.52  2016-03-06\n## 3 3   B    1.46  2016-03-10\n## 4 4  <NA>   NA   2016-03-11\n```", "```py\n## [1] TRUE\n```", "```py\nreadxl::read_excel(\"data/prices.xlsx\")\n##   Date        Price Growth\n## 1 2016-03-01  85    NA\n## 2 2016-03-02  88    0.03529412\n## 3 2016-03-03  84   -0.04545455\n## 4 2016-03-04  81   -0.03571429\n## 5 2016-03-05  83    0.02469136\n## 6 2016-03-06  87    0.04819277\n```", "```py\nopenxlsx::read.xlsx(\"data/prices.xlsx\", detectDates = TRUE)\n##   Date       Price Growth\n## 1 2016-03-01  85    NA\n## 2 2016-03-02  88    0.03529412\n## 3 2016-03-03  84   -0.04545455\n## 4 2016-03-04  81   -0.03571429\n## 5 2016-03-05  83    0.02469136\n## 6 2016-03-06  87    0.04819277\n```", "```py\nopenxlsx::write.xlsx(mtcars, \"data/mtcars.xlsx\")\n```", "```py\nsaveRDS(some_data, \"data/some_data.rds\")\n```", "```py\nsome_data2 <- readRDS(\"data/some_data.rds\")\n```", "```py\nidentical(some_data, some_data2)\n## [1] TRUE\n```", "```py\nrows <- 200000\nlarge_data <- data.frame(id = 1:rows, x = rnorm(rows), y = rnorm(rows))system.time(write.csv(large_data, \"data/large_data.csv\"))\n## user system elapsed \n## 1.33 0.06 1.41\nsystem.time(saveRDS(large_data, \"data/large_data.rds\"))\n## user system elapsed \n## 0.23 0.03 0.26\n```", "```py\nfileinfo <- file.info(\"data/large_data.csv\", \"data/large_data.rds\")fileinfo[, \"size\", drop = FALSE]\n## size\n## data/large_data.csv 10442030\n## data/large_data.rds 3498284\n```", "```py\nsystem.time(read.csv(\"data/large_data.csv\"))\n## user system elapsed \n## 1.46 0.07 1.53\nsystem.time(readr::read_csv(\"data/large_data.csv\"))\n## user system elapsed \n## 0.17 0.01 0.19\n```", "```py\nsystem.time(readRDS(\"data/large_data.rds\"))\n## user system elapsed \n## 0.03 0.00 0.03\n```", "```py\nnums <- c(1.5, 2.5, NA, 3)\nlist1 <- list(x = c(1, 2, 3),  \n    y = list(a =c(\"a\", \"b\"), \n    b = c(NA, 1, 2.5)))\nsaveRDS(nums, \"data/nums.rds\")\nsaveRDS(list1, \"data/list1.rds\")\n```", "```py\nreadRDS(\"data/nums.rds\")\n## [1] 1.5 2.5 NA 3.0\nreadRDS(\"data/list1.rds\")\n## $x\n## [1] 1 2 3\n## \n## $y\n## $y$a\n## [1] \"a\" \"b\"\n## \n## $y$b\n## [1] NA 1.0 2.5\n```", "```py\nsave(some_data, nums, list1, file = \"data/bundle1.RData\")\n```", "```py\nrm(some_data, nums, list1)\nload(\"data/bundle1.RData\")\n```", "```py\nsome_data\n##   id grade width check_date\n## 1 1   A    1.51  2016-03-05\n## 2 2   A    1.52  2016-03-06\n## 3 3   B    1.46  2016-03-10\n## 4 4 <NA>    NA   2016-03-11\nnums\n## [1] 1.5 2.5 NA 3.0\nlist1\n## $x\n## [1] 1 2 3\n## \n## $y\n## $y$a\n## [1] \"a\" \"b\"\n## \n## $y$b\n## [1] NA 1.0 2.5\n## [1] TRUE TRUE TRUE TRUE TRUE TRUE\n```", "```py\nhead(iris)\n##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n## 1     5.1          3.5         1.4          0.2      setosa\n## 2     4.9          3.0         1.4          0.2      setosa\n## 3     4.7          3.2         1.3          0.2      setosa\n## 4     4.6          3.1         1.5          0.2      setosa\n## 5     5.0          3.6         1.4          0.2      setosa\n## 6     5.4          3.9         1.7          0.4      setosa\n```", "```py\nstr(iris)\n## 'data.frame': 150 obs. of 5 variables:\n## $ Sepal.Length: num 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...\n## $ Sepal.Width : num 3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...\n## $ Petal.Length: num 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...\n## $ Petal.Width : num 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...\n## $ Species : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ...\n```", "```py\nhead(mtcars)\n##                    mpg cyl disp  hp drat    wt  qsec vs am\n## Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1\n## Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1\n## Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1\n## Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0\n## Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0\n## Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0\n##                   gear carb\n## Mazda RX4            4    4\n## Mazda RX4 Wag        4    4\n## Datsun 710           4    1\n## Hornet 4 Drive       3    1\n## Hornet Sportabout    3    2\n## Valiant              3    1\nstr(mtcars)\n## 'data.frame':    32 obs. of  11 variables:\n##  $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...\n##  $ cyl : num  6 6 4 6 8 6 8 4 4 6 ...\n##  $ disp: num  160 160 108 258 360 ...\n##  $ hp  : num  110 110 93 110 175 105 245 62 95 123 ...\n##  $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...\n##  $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...\n##  $ qsec: num  16.5 17 18.6 19.4 17 ...\n##  $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...\n##  $ am  : num  1 1 1 0 0 0 0 0 0 0 ...\n##  $ gear: num  4 4 4 3 3 3 3 4 4 4 ...\n##  $ carb: num  4 4 1 1 2 1 4 2 2 4 ...\n```", "```py\ndata(\"diamonds\", package = \"ggplot2\")dim(diamonds)\n## [1] 53940 10\n```", "```py\nhead(diamonds)\n##   carat       cut color clarity depth table price    x    y\n## 1  0.23     Ideal     E     SI2  61.5    55   326 3.95 3.98\n## 2  0.21   Premium     E     SI1  59.8    61   326 3.89 3.84\n## 3  0.23      Good     E     VS1  56.9    65   327 4.05 4.07\n## 4  0.29   Premium     I     VS2  62.4    58   334 4.20 4.23\n## 5  0.31      Good     J     SI2  63.3    58   335 4.34 4.35\n## 6  0.24 Very Good     J    VVS2  62.8    57   336 3.94 3.96\n##      z\n## 1 2.43\n## 2 2.31\n## 3 2.31\n## 4 2.63\n## 5 2.75\n## 6 2.48\n```", "```py\ninstall.package(c(\"nycflights13\", \"babynames\"))\n```", "```py\nplot(1:10)\n```", "```py\nx <- rnorm(100)\ny <- 2 * x + rnorm(100)\nplot(x, y)\n```", "```py\nplot(x, y,\n  main = \"Linearly correlated random numbers\",\n  xlab = \"x\", ylab = \"2x + noise\",\n  xlim = c(-4, 4), ylim = c(-4, 4))\n```", "```py\nplot(x, y,\n   xlim = c(-4, 4), ylim = c(-4, 4),\n   xlab = \"x\", ylab = \"2x + noise\")\n title(\"Linearly correlated random numbers\")\n```", "```py\nplot(0:25, 0:25, pch = 0:25,\n   xlim = c(-1, 26), ylim = c(-1, 26),\n   main = \"Point styles (pch)\")\ntext(0:25+1, 0:25, 0:25)\n```", "```py\nx <- rnorm(100)\ny <- 2 * x + rnorm(100)\nplot(x, y, pch = 16,\n  main = \"Scatter plot with customized point style\")\n```", "```py\nplot(x, y,\n   pch = ifelse(x * y > 1, 16, 1),\n   main = \"Scatter plot with conditional point styles\")\n```", "```py\nz <- sqrt(1 + x ^ 2) + rnorm(100)\nplot(x, y, pch = 1,\n   xlim = range(x), ylim = range(y, z),\n   xlab = \"x\", ylab = \"value\")\npoints(x, z, pch = 17)\ntitle(\"Scatter plot with two series\")\n```", "```py\nplot(x, y, pch = 16, col = \"blue\",\n   main = \"Scatter plot with blue points\")\n```", "```py\nplot(x, y, pch = 16, \n  col = ifelse(y >= mean(y), \"red\", \"green\"),\n  main = \"Scatter plot with conditional colors\")\n```", "```py\nplot(x, y, col = \"blue\", pch = 0,\n  xlim = range(x), ylim = range(y, z),\n  xlab = \"x\", ylab = \"value\")\npoints(x, z, col = \"red\", pch = 1)\ntitle(\"Scatter plot with two series\")\n```", "```py\nt <- 1:50\ny <- 3 * sin(t * pi / 60) + rnorm(t)\nplot(t, y, type = \"l\",\n   main = \"Simple line plot\")\n```", "```py\nlty_values <- 1:6\nplot(lty_values, type = \"n\", axes = FALSE, ann = FALSE)\nabline(h =lty_values, lty = lty_values, lwd = 2\nmtext(lty_values, side = 2, at = lty_values)\ntitle(\"Line types (lty)\")\n```", "```py\nplot(t, y, type = \"l\", lwd = 2)\nabline(h = mean(y), lty = 2, col = \"blue\")\nabline(h = range(y), lty = 3, col = \"red\")\nabline(v = t[c(which.min(y), which.max(y))], lty = 3, col = \"darkgray\")\ntitle(\"Line plot with auxiliary lines\")\n```", "```py\np <- 40\nplot(t[t <= p], y[t <= p], type = \"l\",\n   xlim = range(t), xlab = \"t\")\nlines(t[t >= p], y[t >= p], lty = 2)\ntitle(\"Simple line plot with two periods\")\n```", "```py\nplot(y, type = \"l\")\npoints(y, pch = 16)\ntitle(\"Lines with points\")\n```", "```py\nplot(y, pch = 16)\nlines(y)\ntitle(\"Lines with points\")\n```", "```py\nx <- 1:30\ny <- 2 * x + 6 * rnorm(30)\nz <- 3 * sqrt(x) + 8 * rnorm(30)\nplot(x, y, type = \"l\",\n   ylim = range(y, z), col = \"black\")\npoints(y, pch = 15)\nlines(z, lty = 2, col = \"blue\")\npoints(z, pch = 16, col = \"blue\")\ntitle (\"Plot of two series\")\nlegend(\"topleft\",\n  legend = c(\"y\", \"z\"),\n  col = c(\"black\", \"blue\"),\n  lty = c(1, 2), pch = c(15, 16),\n  cex = 0.8, x.intersp = 0.5, y.intersp = 0.8)\n```", "```py\nplot(x, y, type = \"s\",\n  main = \"A simple step plot\")\n```", "```py\nbarplot(1:10, names.arg = LETTERS[1:10])\n```", "```py\nints <- 1:10\nnames(ints) <- LETTERS[1:10]\nbarplot(ints)\n```", "```py\ndata(\"flights\", package = \"nycflights13\")\ncarriers <- table(flights$carrier)\ncarriers\n## \n##    9E    AA    AS    B6    DL    EV    F9    FL    HA    MQ \n## 18460 32729   714 54635 48110 54173   685  3260   342 26397 \n##    OO    UA    US    VX    WN    YV \n##    32 58665 20536  5162 12275   601\n```", "```py\nsorted_carriers <- sort(carriers, decreasing = TRUE)\nsorted_carriers\n## \n##    UA    B6    EV    DL    AA    MQ    US    9E    WN    VX \n## 58665 54635 54173 48110 32729 26397 20536 18460 12275  5162 \n##    FL    AS    F9    YV    HA    OO \n##  3260   714   685   601   342    32\n```", "```py\nbarplot(head(sorted_carriers, 8),\n   ylim = c(0, max(sorted_carriers) * 1.1),\n   xlab = \"Carrier\", ylab = \"Flights\",\n   main =\"Top 8 carriers with the most flights in record\")\n```", "```py\ngrades <- c(A = 2, B = 10, C = 12, D = 8)\npie(grades, main = \"Grades\", radius = 1)\n```", "```py\nrandom_normal <- norm(10000)\nhist(random_normal)\n```", "```py\nhist(random_normal, probability = TRUE, col = \"lightgray\")\ncurve(dnorm, add = TRUE, lwd = 2, col =\"blue\")\n```", "```py\nflight_speed <- flights$distance / flights$air_time\nhist(flight_speed, main = \"Histogram of flight speed\")\n```", "```py\nplot(density(flight_speed, from = 2, na.rm = TRUE),\n   main =\"Empirical distribution of flight speed\")\nabline(v = mean(flight_speed, na.rm = TRUE),\n   col = \"blue\", lty = 2)\n```", "```py\nhist(flight_speed, \n  probability = TRUE, ylim = c(0, 0.5), \n  main =\"Histogram and empirical distribution of flight speed\",\n  border =\"gray\", col = \"lightgray\")\nlines(density(flight_speed, from = 2, na.rm = TRUE),\n  col =\"darkgray\", lwd = 2)\nabline(v = mean(flight_speed, na.rm = TRUE),\n   col =\"blue\", lty =2)\n```", "```py\nx <- rnorm(1000)\nboxplot(x)\n```", "```py\nboxplot(distance / air_time ~ carrier, data =flights,\n  main = \"Box plot of flight speed by carrier\")\n```", "```py\nf <- function(x) 3 + 2 * x\nx <- rnorm(100)\ny <- f(x) + 0.5 * rnorm(100)\n```", "```py\nmodel1 <- lm(y ~ x)model1\n## \n## Call:\n## lm(formula = y ~ x)\n## \n## Coefficients:\n## (Intercept) x \n##   2.969    1.972\n```", "```py\ncoef(model1)\n## (Intercept)   x \n##  2.969215   1.971659\n```", "```py\nsummary(model1)\n## \n## Call:\n## lm(formula = y ~ x)\n## \n## Residuals:\n##      Min       1Q   Median       3Q      Max \n## -0.96258 -0.31646 -0.04893  0.34962  1.08491 \n## \n## Coefficients:\n##             Estimate Std. Error t value Pr(>|t|)    \n## (Intercept)  2.96921    0.04782    62.1   <2e-16 ***\n## x            1.97166    0.05216    37.8   <2e-16 ***\n## ---\n## Signif. codes:  \n## 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 0.476 on 98 degrees of freedom\n## Multiple R-squared:  0.9358, Adjusted R-squared:  0.9352 \n## F-statistic:  1429 on 1 and 98 DF,  p-value: < 2.2e-16\n```", "```py\nplot(x, y, main = \"A simple linear regression\")\nabline(coef(model1), col = \"blue\")\n```", "```py\npredict(model1, list(x = c(-1, 0.5)), se.fit = TRUE)\n## $fit\n## 1         2 \n## 0.9975559 3.9550440 \n## \n## $se.fit\n## 1          2 \n## 0.06730363 0.05661319 \n## \n## $df\n## [1] 98\n## \n## $residual.scale\n## [1] 0.4759621\n```", "```py\ndata(\"flights\", package = \"nycflights13\")\nplot(air_time ~ distance, data = flights,\n  pch = \".\", \n  main = \"flight speed plot\")\n```", "```py\nrows <- nrow(flights)\nrows_id <- 1:rows\nsample_id <- sample(rows_id, rows * 0.75, replace = FALSE)\nflights_train <- flights[sample_id,]\nflights_test <- flights[setdiff (rows_id, sample_id), ]\n```", "```py\nmodel2 <- lm(air_time ~ distance, data = flights_train)\npredict2_train <- predict(model2, flights_train)\nerror2_train <- flights_train$air_time - predict2_train\n```", "```py\nevaluate_error <- function(x) {\n  c(abs_err = mean(abs(x), na.rm = TRUE),\n  std_dev = sd(x, na.rm = TRUE))\n  }\n```", "```py\nevaluate_error(error2_train)\n## abs_err  std_dev \n## 9.413836 12.763126\n```", "```py\npredict2_test <- predict (model2, flights_test)\nerror2_test <- flights_test$air_time - predict2_test\nevaluate_error(error2_test)\n## abs_err std_dev \n## 9.482135 12.838225\n```", "```py\nmodel3 <- lm(air_time ~ carrier + distance + month + dep_time,\n  data = flights_train)predict3_train\n<- predict(model3, flights_train)\nerror3_train <- flights_train$air_time - predict3_train\nevaluate_error(error3_train)\n## abs_err  std_dev \n## 9.312961 12.626790\n```", "```py\npredict3_test <- predict(model3, flights_test)\nerror3_test <- flights_test$air_time - predict3_test\nevaluate_error(error3_test)\n## abs_err std_dev \n## 9.38309 12.70168\n```", "```py\nplot(density(error2_test, na.rm = TRUE),\n  main = \"Empirical distributions of out-of-sample errors\")\nlines(density(error3_test, na.rm = TRUE), lty = 2)\nlegend(\"topright\", legend = c(\"model2\", \"model3\"), \n  lty = c(1, 2), cex = 0.8,\n  x.intersp = 0.6, y.intersp = 0.6)\n```", "```py\nmodel4 <- party::ctree(air_time ~ distance + month + dep_time,\n  data = subset(flights_train, !is.na(air_time)))\npredict4_train <- predict(model4, flights_train)\nerror4_train <- flights_train$air_time - predict4_train[, 1]\nevaluate_error(error4_train)\n## abs_err  std_dev \n## 7.418982 10.296528\n```", "```py\npredict4_test <- predict(model4, flights_test)\nerror4_test <- flights_test$air_time - predict4_test[, 1]\nevaluate_error(error4_test)\n## abs_err  std_dev \n## 7.499769 10.391071\n```", "```py\nplot(density(error3_test, na.rm = TRUE),\n   ylim = range(0, 0.06),\n   main = \"Empirical distributions of out-of-sample errors\")\nlines(density(error4_test, na.rm = TRUE), lty = 2)\nlegend(\"topright\", legend = c(\"model3\", \"model4\"),\n  lty = c(1, 2), cex = 0.8,\n  x.intersp = 0.6, y.intersp = 0.6)\n```"]