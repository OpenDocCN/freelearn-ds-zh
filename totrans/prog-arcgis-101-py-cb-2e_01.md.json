["```py\nimport arcpy, os\n```", "```py\nfcParcels = \"Parcels\"\nfcStreets = \"Streets\"\n```", "```py\nprint mapsize\n>>> 22x34\n\nprint MapSize\n>>> 8x11\n\nprint Mapsize\n>>>36x48\n```", "```py\nfieldOwnerName\n```", "```py\nint aTouchdown;\naTouchdown = 6;\n```", "```py\naTouchdown = 6\n```", "```py\nfcParcels = \"c:\\Data\\Parcels.shp\"\n```", "```py\nfcParcels = \"c:/Data/Parcels.shp\"\nfcParcels = \"c:\\\\Data\\\\Parcels.shp\"\nfcParcels = r\"c:\\Data\\Parcels.shp\"\n```", "```py\nshpStreets = \"c:\\\\GISData\\\\Streets\" + \".shp\"\nprint shpStreets\n```", "```py\n>>>c:\\GISData\\Streets.shp\n```", "```py\nfirstName = \"Eric\"\nlastName = \"Pimpler\"\nfirstName == lastname\n```", "```py\n>>>False\n```", "```py\nfcName = \"Floodplain.shp\"\nprint \".shp\" in fcName\n>>>True\n```", "```py\nfc = \"Floodplain.shp\"\nprint fc[0]\n>>>'F'\nprint fc[10]\n>>>'.'\nprint fc[13]\n>>>'p'\n```", "```py\ntheString = \"Floodplain.shp\"\nprint theString[0:5]\n>>>Flood\n```", "```py\nimport math\n```", "```py\nfcList = [\"Hydrants\", \"Water Mains\", \"Valves\", \"Wells\"]\nfc = fcList[0]\nprint fc\n>>>Hydrants\nfc = fcList[3]\nprint fc\n>>>Wells\n```", "```py\nfcTuples = (\"Hydrants\", \"Water Mains\", \"Valves\", \"Wells\")\n```", "```py\nfcTuples = (\"Hydrants\", \"Water Mains\", \"Valves\", \"Wells\")\nprint fcTuples[1]\n>>>Water Mains\n```", "```py\n##create the dictionary\ndictLayers = {'Roads': 0, 'Airports': 1, 'Rail': 2}\n\n##access the dictionary by key\ndictLayers['Airports']\n>>>1\ndictLayers['Rail']\n>>>2\n```", "```py\nimport arcpy\nfc = \"c:/ArcpyBook/data/TravisCounty/TravisCounty.shp\"\n\n# Fetch each feature from the cursor and examine the extent properties and spatial reference\nfor row in arcpy.da.SearchCursor(fc, [\"SHAPE@\"]):\n  # get the extent of the county boundary\n  ext = row[0].extent\n  # print out the bounding coordinates and spatial reference\n  print \"XMin: \" + ext.XMin\n  print \"XMax: \" + ext.XMax\n  print \"YMin: \" + ext.YMin\n  print \"YMax: \" + ext.YMax\n  print \"Spatial Reference: \" + ext.spatialReference.name\n```", "```py\nXMin: 2977896.74002\nXMax: 3230651.20622\nYMin: 9981999.27708\nYMax:10200100.7854\nSpatial Reference: NAD_1983_StatePlane_Texas_Central_FIPS_4203_Feet\n```", "```py\nProperty: extent.XMin\nMethod: extent.touches()\n```", "```py\nif fcName == 'Roads':\n  gp.Buffer_analysis(fc, \"c:\\\\temp\\\\roads.shp\", 100)\nelif fcName == 'Rail':\n  gp.Buffer_analysis(fc, \"c:\\\\temp\\\\rail.shp\", 50)\nelse:\n  print \"Can't buffer this layer\"\n)\n```", "```py\nx = 10\nwhile x < 100:\n print x\n x = x + 10\n```", "```py\ndictLayers = {\"Roads\":\"Line\",\"Rail\":\"Line\",\"Parks\":\"Polygon\"}\nlstLayers = dictLayers.keys()\nfor x in lstLayers:\n  print dictLayers[x]\n```", "```py\nimport arcpy\nimport sys\n\ninFeatureClass = arcpy.GetParameterAsText(0)\noutFeatureClass = arcpy.GetParameterAsText(1)\n\ntry:\n  # If the output feature class exists, raise an error\n\n  if arcpy.Exists(inFeatureClass):\n    raise overwriteError(outFeatureClass)\n  else:\n    # Additional processing steps\n\nexcept overwriteError as e:\n  # Use message ID 12, and provide the output feature class\n  #  to complete the message.\n\n  arcpy.AddIDMessage(\"Error\", 12, str(e))\n```", "```py\nimport arcpy\nfrom arcpy import env\n\ntry:\n  if arcpy.CheckExtension(\"3D\") == \"Available\":\n    arcpy.CheckOutExtension(\"3D\")\n  else:\n    # Raise a custom exception\n    raise LicenseError\n\n  env.workspace = \"D:/GrosMorne\"\n  arcpy.HillShade_3d(\"WesternBrook\", \"westbrook_hill\", 300)\n  arcpy.Aspect_3d(\"WesternBrook\", \"westbrook_aspect\")\n\nexcept LicenseError:\n  print \"3D Analyst license is unavailable\" \nexcept:\n  print arcpy.GetMessages(2)\nfinally:\n  # Check in the 3D Analyst extension\n  arcpy.CheckInExtension(\"3D\")\n```", "```py\nimport arcpy\n\nfc = \"c:/data/city.gdb/streets\"\n\n# For each row print the Object ID field, and use the SHAPE@AREA\n# token to access geometry properties\n\nwith arcpy.da.SearchCursor(fc, (\"OID@\", \"SHAPE@AREA\")) as cursor:\n  for row in cursor:\n    print(\"Feature {0} has an area of {1}\".format(row[0], row[1]))\n```", "```py\nf = open('Wildfires.txt','r')\n```", "```py\nimport arcpy, os\ntry:\n\n  arcpy.env.workspace = \"C:/data/WildlandFires.mdb\"\n  # open the file to read\n  f = open('Wildfires.txt','r')\n\n lstFires = f.readlines()\n  cur = arcpy.InsertCursor(\"FireIncidents\")\n\n  for fire in lstFires:\n    if 'Latitude' in fire:\n      continue\n    vals = fire.split(\",\")\n    latitude = float(vals[0])\n    longitude = float(vals[1])\n    confid = int(vals[2])\n    pnt = arcpy.Point(longitude,latitude)\n    feat = cur.newRow()\n    feat.shape = pnt\n    feat.setValue(\"CONFIDENCEVALUE\", confid)\n    cur.insertRow(feat)\n    except:\n  print arcpy.GetMessages()\nfinally:\n\tdel cur\n\tf.close()\n```", "```py\noutfile = open('c:\\\\temp\\\\data.txt','w')\nfcList = [\"Streams\", \"Roads\", \"Counties\"]\noutfile.writelines(fcList)\n```"]