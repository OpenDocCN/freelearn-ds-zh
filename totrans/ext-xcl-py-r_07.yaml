- en: '7'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pivot Tables and Summary Tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the realm of data analysis and spreadsheet manipulation, a pivot table is
    a powerful tool that enables users to transform and summarize large datasets into
    more manageable and insightful formats. By providing an organized and dynamic
    way to analyze data, pivot tables have become an indispensable asset for professionals
    across various domains.
  prefs: []
  type: TYPE_NORMAL
- en: So, what is a pivot table? A pivot table is a data processing technique employed
    in spreadsheet software, such as Microsoft Excel or Google Sheets, to analyze
    and extract meaningful insights from complex datasets. It allows users to restructure
    and condense large amounts of information into a concise, comprehensible format,
    facilitating better decision-making and data exploration.
  prefs: []
  type: TYPE_NORMAL
- en: In the world of data analysis, pivot tables stand as versatile tools that empower
    users to transform raw data into actionable insights. By organizing, summarizing,
    and presenting data in a user-friendly format, pivot tables streamline decision-making
    processes and promote a deeper understanding of complex datasets. Their adaptability,
    interactivity, and simplicity make them an invaluable asset across diverse industries
    and analytical tasks.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Making a table with the Base R `xtabs` function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making a table with the `gt` package
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating pivot tables with `tidyquant`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and managing pivot tables in Python with `win32com` and `pypiwin32`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating pivot tables with Python basics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this chapter, you will be able to find the code used at the following link:
    [https://github.com/PacktPublishing/Extending-Excel-with-Python-and-R/tree/main/Chapter7](https://github.com/PacktPublishing/Extending-Excel-with-Python-and-R/tree/main/Chapter7).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the packages that will be covered for the R language are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`tidyquant >=` `1.0.6`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gt >-` `0.10.0`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making a table with the Base R xtabs function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we move onto the core of the topic, let us understand a few of the important
    components.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a list of some key components of a pivot table:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Rows and columns**: Pivot tables typically involve two primary components
    – rows and columns. The data rows contain individual records or observations,
    while the columns contain the attributes or variables that define those records.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Values**: Pivot tables allow users to aggregate and summarize data by calculating
    values based on specific metrics, such as sum, average, count, or percentage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Filters and slicers**: Filters and slicers enable users to focus on specific
    subsets of data within the pivot table, enhancing the granularity of analysis.
    These tools are especially useful when dealing with large datasets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Row and column labels**: Pivot tables allow users to drag and drop attributes
    into row and column labels, defining the layout and structure of the table dynamically.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The core functionality of a pivot table revolves around rearranging and summarizing
    data based on user-defined criteria. By “pivoting” the data, the table generates
    a multidimensional summary, providing insights that might not be readily apparent
    in the original dataset. The following details how a pivot table works:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Selection**: Users select the dataset they want to analyze and identify the
    columns containing the relevant attributes and metrics.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Arrangement**: Users place these attributes and metrics into specific areas
    of the pivot table layout, such as rows, columns, values, and filters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Calculation**: Pivot tables automatically calculate the specified metrics
    for various combinations of the chosen attributes. For instance, it can show the
    total sales amount for each product category in different regions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Interactivity**: Pivot tables are interactive; users can easily modify the
    layout by dragging and dropping attributes, allowing real-time exploration of
    the data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Pivot tables offer several advantages that make them indispensable tools for
    data analysis:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Data summarization**: Pivot tables allow quick and effective summarization
    of data, helping users understand patterns, trends, and anomalies within large
    datasets'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Quick insights**: Users can swiftly generate insights without the need for
    complex coding or intricate formulas'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Flexible analysis**: Pivot tables enable users to experiment with different
    perspectives by rearranging attributes, thereby aiding in the identification of
    correlations and trends'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Report generation**: Pivot tables are pivotal (pun intended) in creating
    comprehensive and informative reports, dashboards, and visualizations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data cleaning**: Before analyzing data, pivot tables can be employed to identify
    missing values, outliers, or inconsistencies'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `xtabs()` function in R is used to create a contingency table from factor
    columns in a data frame. You would use this function with the familiar formula
    input: `x ~ y`. A contingency table is a table that displays the frequency distribution
    of two or more categorical variables. In this case, we will use the `UCBAdmissions`
    dataset to demonstrate how to use the `xtabs()` function.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax for the `xtabs()` function is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The meaning of each is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`formula`: A formula object with the cross-classifying variables (separated
    by ~)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data`: A data frame containing the variables in the formula'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`subset`: An optional expression specifying a subset of observations to be
    used'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sparse`: A logical value indicating whether to return a sparse matrix'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`na.action`: A function to handle missing values'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`addNA`: A logical value indicating whether to add a row and column for missing
    values'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`exclude`: A vector of values to exclude from the table'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`drop.unused.levels`: A logical value indicating whether to drop unused factor
    levels'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To use the `xtabs()` function with the `UCBAdmissions` dataset, we first need
    to convert it to a data frame using the `as.data.frame()` function. The `UCBAdmissions`
    dataset contains the number of male and female applicants and the number of male
    and female applicants who were admitted or rejected. We can use the `xtabs()`
    function to create a contingency table that displays the frequency distribution
    of gender and admission status. Here is the code for it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The output of the `xtabs()` function will be a table that displays the frequency
    distribution of gender and admission status. The rows represent the gender, and
    the columns represent the admission status. The values in the table represent
    the frequency of each combination of gender and admission status.
  prefs: []
  type: TYPE_NORMAL
- en: In summary, the syntax for the `xtabs()` function includes several arguments
    that allow for customization of the output. To use the `xtabs()` function with
    the `UCBAdmissions` dataset, we first need to convert it to a data frame using
    the `as.data.frame()` function. We can then use the `xtabs()` function to create
    a contingency table that displays the frequency distribution of gender and admission
    status.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have produced a contingency table in base R, we can move on to
    the `gt` package, which will allow us to make something we are more familiar with:
    a pivot table, as we have come to know it.'
  prefs: []
  type: TYPE_NORMAL
- en: Making a table with the gt package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `gt` package in R allows users to create beautiful and customizable tables
    in R. One of the main pros of the `gt` package is its ease of use. The package
    is designed to be user-friendly, with a simple syntax that makes it easy to create
    tables quickly. Additionally, the package offers a wide range of customization
    options, allowing users to create tables that are tailored to their specific needs.
  prefs: []
  type: TYPE_NORMAL
- en: Another pro of the `gt` package is its ability to handle large datasets. The
    package is optimized for performance, which means that it can handle large datasets
    without slowing down. This is particularly useful for users who need to create
    tables from large datasets, as it allows them to do so quickly and efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: The `gt` package also offers a wide range of styling options, allowing users
    to create tables that are visually appealing and easy to read. Users can customize
    the fonts, colors, and formatting of their tables, making it easy to create tables
    that match their branding or design preferences.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the `gt` package is open source, which means that it is constantly
    being updated and improved by the R community. This ensures that the package remains
    up to date and relevant, with new features and improvements being added regularly.
  prefs: []
  type: TYPE_NORMAL
- en: In summary, the `gt` package is a powerful tool for creating tables in R. Its
    ease of use, performance, customization options, and open source nature make it
    a popular choice among R users who need to create tables quickly and efficiently.
    Let’s check out an example using the `gt` package with the `mtcars` dataset.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we are checking whether the `gt` package is installed. If
    it’s not installed, we use the `install.packages` function to install it. The
    `gt` package is a package for creating nicely formatted tables in R:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we are loading two additional packages: `dplyr` and `tibble`. These packages
    provide useful functions and data structures for data manipulation and analysis
    in R:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In this section, we are performing several operations on the `mtcars` dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The operations are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`rownames_to_column()`: We are converting the row names of the dataset into
    a regular column so that we can work with it. This is a function from the `tibble`
    package.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`arrange(factor(cyl), mpg)`: We are sorting the dataset first by the `cyl`
    column in ascending order and then by the `mpg` column in ascending order. This,
    along with `group_by` and `slice`, is a function from `dplyr`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`group_by(cyl)`: We are grouping the dataset by the `cyl` column.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`slice(1:3)`: We are selecting the first three rows within each group.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gt()`: We are creating a table using the `gt` package to display the resulting
    data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this next section, we are adding a `Performance` spanner (a label for a
    group of columns) to the table. We specify the columns we want to include under
    this spanner: `mpg`, `disp`, `hp`, `drat`, `wt`, and `qsec`. These columns are
    related to the performance of the cars:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, in this section, we are adding a `Specs` spanner to the table, and
    we specify the columns to be included under this spanner: `vs`, `am`, `gear`,
    and `carb`. These columns contain specification information about the cars:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In the final section, we are setting the table header with a title and subtitle.
    The title is `The Cars of mtcars` with some Markdown formatting, and the subtitle
    is `These are some` `fine automobiles`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'So, in summary, this R code loads the necessary packages, manipulates the `mtcars`
    dataset to create a customized table with performance and specification information,
    and sets a header for the table. Now that we have gone through all of the code,
    let’s see the output of it all. If you want to do this on your own, just call
    up the tab in the console. The table appears as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.1 – mtcars and the gt package](img/B19142_7_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.1 – mtcars and the gt package
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have seen how to create a pivot table with the `gt` package by creating
    different spanners and headers, we can move on to the `tidyquant` package, which
    will give users an even more familiar feeling when creating pivot tables in R.
  prefs: []
  type: TYPE_NORMAL
- en: Creating pivot tables with tidyquant
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `pivot_table()` function from the `tidyquant` library is a useful tool for
    creating summary tables from data frames in R. It allows you to specify the rows,
    columns, values, and aggregation functions for your table and to employ other
    options such as sorting, formatting, and filtering.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use the `pivot_table()` function, you need to load the `tidyquant` library
    first by using the `library(tidyquant)` command. Then, you can pass your data
    frame as the first argument to the function, followed by the other arguments that
    define your table. For example, if you want to create a table that shows the average
    sepal length and sepal width of different iris species, you can use the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of this code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s a breakdown of the code in simple terms:'
  prefs: []
  type: TYPE_NORMAL
- en: '`tidyquant` and `purrr`. These libraries provide functions and tools for data
    manipulation and analysis.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pivot_table` function is used to reshape the data in the iris dataset. It
    takes three main arguments:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.data`: This is the dataset you want to work with, which in this case is the
    iris dataset.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.rows`: This specifies how you want to group or categorize your data. In this
    code, it groups the data by the `Species` column, which represents different species
    of iris flowers.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.values`: This argument specifies which columns you want to calculate and
    display values for. Here, it calculates the mean (average) of two columns – `Sepal.Length`
    and `Sepal.Width` – for each species.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`set_names` function is used to rename the columns of the resulting table.
    The names are set to `Species`, `Mean_Sepal_Length`, and `Mean_Sepal_Width`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, in summary, this code takes the iris dataset, groups it by species, calculates
    the mean sepal length and mean sepal width for each species, and then renames
    the resulting table’s columns to make it more understandable. The result is a
    new table that shows the mean sepal length and mean sepal width for each species
    of iris flower.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have gone over the material in R, let’s move on to Python!
  prefs: []
  type: TYPE_NORMAL
- en: Creating and managing pivot tables in Python with win32com and pypiwin32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pivot tables are powerful tools in data analysis, allowing you to summarize
    and explore large datasets quickly and efficiently. While they are a staple feature
    in spreadsheet software such as Microsoft Excel, you can also create and manipulate
    pivot tables programmatically using Python. In this section of the chapter, we
    will delve into the world of pivot tables and learn how to harness their potential
    with the `win32com` and `pywin32` libraries.
  prefs: []
  type: TYPE_NORMAL
- en: 'Creating pivot tables with Python: the basics'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pivot tables are an indispensable tool in the world of data analysis. They provide
    a dynamic way to summarize, explore, and gain insights from complex datasets.
    However, when dealing with extensive data, setting up and customizing pivot tables
    can be a time-consuming and error-prone process, often requiring manual intervention.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we’ll explore how Python, in combination with the `win32com`
    and `pywin32` libraries, can streamline and automate the creation and management
    of pivot tables. This powerful combination empowers data analysts and professionals
    to efficiently process large volumes of data without the need for repetitive,
    manual tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine being able to create pivot tables, apply advanced calculations, and
    refresh data with just a few lines of Python code. This is precisely what we aim
    to achieve in this section. We’ll equip you with the knowledge and tools to harness
    the full potential of pivot tables while eliminating the tedious aspects of manual
    setup.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Python environment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we dive into creating pivot tables, you need to set up your Python environment
    with the required libraries. `win32com` and `pywin32` are essential for interacting
    with Microsoft Excel, so ensure they are installed on your system. We have covered
    the installation process in [*Chapter 3*](B19142_03.xhtml#_idTextAnchor055) and
    have provided a basic example of how to connect Python with Excel. See the *Integrating
    VBA with Python using pywin32* section for details, in particular, the *Setting
    up the environment subsection*. Please refer to that chapter if you have not set
    `pywin32` up yet.
  prefs: []
  type: TYPE_NORMAL
- en: Creating pivot tables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The foundation of working with pivot tables is, of course, creating them. We’ll
    start with the basics, teaching you how to build pivot tables from scratch. The
    following is a step-by-step guide to help you get started:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Connecting to Excel**: Create an instance of Excel and open a workbook. If
    the workbook doesn’t exist, you can create a new one as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Adding data to the worksheet**: You’ll need data to create a pivot table.
    Usually, that data is already there, but for the purposes of this example, you
    can add sample data to the worksheet as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Selecting the data range**: Define the data range that you want to use for
    your pivot table. You can do this by specifying the start and end cells of your
    data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Creating the pivot table**: Now, you can create the pivot table based on
    the selected data range. Specify where you want the pivot table to be located
    and which columns should be used for rows, columns, and values in your pivot table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In this example, the `SourceType` parameter specifies the type of data source
    for `PivotTable`. In this case, `SourceType = 1` indicates that the data source
    is an Excel spreadsheet. The `SourceType` parameter can take on one of the following
    values (or a number between one and three representing them):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`xlDatabase`: This indicates that the data source is an Excel spreadsheet or
    an external database. It is the most common type of data source for pivot tables.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xlExternal`: This indicates that the data source is an OLAP cube or an external
    data source that is not directly accessible from Excel.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xlConsolidation`: This indicates that the data source is a consolidation.
    A consolidation is a pivot table that aggregates data from multiple worksheets
    or workbooks.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Save the workbook and close Excel**: Don’t forget to save your Excel workbook
    with the newly created pivot table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When saving the Excel sheet, you can provide a full path if you don’t want to
    save the spreadsheet to the Python working directory.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: That’s it! You’ve created a pivot table using `pywin32` in Python. You can adjust
    the data, pivot table location, and formatting options to suit your specific needs.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have a basic pivot table ready, let’s have a look at how to change
    one to fit your needs the best.
  prefs: []
  type: TYPE_NORMAL
- en: Manipulating pivot tables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you have your pivot tables, you may want to perform various operations
    on them, such as filtering, sorting, and refreshing data. Here are the steps for
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, open the Excel file from the previous section and select the pivot table
    created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can filter the data within the pivot table based on values. In this example,
    we’ll filter the `Category` field to show only `Electronics`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You may have to sort rows or columns within the pivot table. In this example,
    we’ll sort the `Name` field in ascending order:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If your source data has changed, you can refresh the pivot table to update
    it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After manipulating the pivot table, save your changes and close the workbook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Do not have the spreadsheet open (in Excel) while accessing or manipulating
    it from Python as it leads to `com_errors` instances that are difficult to debug.
  prefs: []
  type: TYPE_NORMAL
- en: These steps should help you get started with manipulating pivot tables using
    `pywin32`. You can adjust the filters, sorting criteria, and refresh frequency
    to meet your specific requirements and automate various tasks involving pivot
    tables.
  prefs: []
  type: TYPE_NORMAL
- en: Once your pivot table is set up as you want it, you may need to enhance it further
    by grouping some (or all) of your categories to better reflect the information
    you are trying to convey. In the next subsection, we go into the details of how
    to do just that.
  prefs: []
  type: TYPE_NORMAL
- en: Groupings in pivot tables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Grouping data in a pivot table can help you create a more organized and insightful
    view of your dataset. You can group data by specific criteria, such as date ranges,
    numeric intervals, or custom categories. In this section, we’ll explore how to
    apply groupings to your pivot tables using Python with the `pywin32` library.
  prefs: []
  type: TYPE_NORMAL
- en: Creating date groupings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One common use case for grouping is aggregating data by date ranges. For example,
    you might want to group sales data into monthly or quarterly intervals. To do
    this, you can create date groupings within your pivot table.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will start by generating some sample data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'With the data saved in an Excel sheet (in the Python working directory by default
    but can be specified otherwise), we can follow the usual steps of opening the
    Excel sheet, adding a dedicated tab for the pivot table, and creating the pivot
    table. The steps that have been covered before are omitted here (but are available
    in GitHub). The steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we created a pivot table and added the `Date` field to the
    rows and a calculated field for `Total Sales`. We then specified that we wanted
    to format the dates in the month-year format. Finally, the formatted dates were
    sorted.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add a grouped field to the pivot table, we will need to know which values
    belong together (note, the values have been formatted to not display the exact
    days, but they still differ):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This has created a grouped pivot field, called `Date2`. In the `Date2` field,
    the days belonging to January are grouped to the `Group1value`, while the other
    dates are grouped into groups consisting of a single date. Using the preceding
    example, you can now loop over the other unique values of month-year dates and
    group the other dates as well. Notice that the calculated field of `Total Sales`
    is now calculated over the groups.
  prefs: []
  type: TYPE_NORMAL
- en: 'To finish, we change the format of the new grouped field to the month-year
    format, change back the raw data in the `Date` field to display the full date,
    and hide the details of the groups for clarity. Finally, the pivot table is refreshed,
    and the Excel file is saved and closed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: This is just an example of how you can use groupings in pivot tables to analyze
    your data more effectively. Depending on your dataset and analysis goals, you
    can customize the groupings to fit your specific needs.
  prefs: []
  type: TYPE_NORMAL
- en: This section has covered the steps you need to create and manipulate pivot tables
    directly from Python. We have covered inserting a pivot table into an Excel sheet
    and adding the various types of fields a pivot table needs as the basics. Then,
    we went into the more complex areas of calculated fields, formatting, and finally,
    grouping values. With the skills you learned from this section, you can now create
    the perfect pivot table for your analysis without opening Excel!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we embarked on a journey to harness the power of pivot tables
    through the capabilities of R and Python. Pivot tables – indispensable tools in
    data analysis – offer a dynamic means of summarizing and exploring vast datasets.
    By mastering the techniques outlined in this chapter, you’ve unlocked the full
    potential of pivot tables, enabling you to automate their creation, manipulation,
    and enhancement.
  prefs: []
  type: TYPE_NORMAL
- en: We began by introducing the significance of pivot tables in data analysis and
    established a foundation for our exploration. With a focus on practicality, we
    guided you through the installation of essential libraries, ensuring that your
    R or Python environment is well prepared to tackle the intricacies of Excel.
  prefs: []
  type: TYPE_NORMAL
- en: Building pivot tables from scratch was our first venture, providing you with
    the fundamental knowledge to select data sources, arrange rows and columns, and
    customize the table’s appearance. We left no stone unturned in demystifying the
    creation process.
  prefs: []
  type: TYPE_NORMAL
- en: Manipulating pivot tables opened a world of possibilities. You learned how to
    filter, sort, and refresh your data dynamically, which equipped you with the skills
    to tailor pivot tables to your evolving needs.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, we explored advanced pivot table features such as calculated fields
    and grouping, showcasing the versatility and depth of your newfound expertise.
    These advanced techniques serve as valuable tools for gaining deeper insights
    into your data and enhancing your analytical capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: In conclusion, your journey through pivot tables in R and Python has equipped
    you with a comprehensive skill set to tackle data analysis challenges efficiently
    and effectively. Armed with this knowledge, you can transform data into actionable
    insights, streamline your workflow, and make data-driven decisions with confidence.
    The ability to automate and manipulate pivot tables through R and Python is a
    valuable asset in today’s data-driven world, and you are now well prepared to
    harness this power to its fullest extent.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will understand how **exploratory data analysis** (**EDA**)
    works for data analysis.
  prefs: []
  type: TYPE_NORMAL
- en: 'Part 3: EDA, Statistical Analysis, and Time Series Analysis'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dive into the world of **exploratory data analysis** (**EDA**) with R and Python,
    uncovering insights and patterns in your Excel data. Explore the fundamentals
    of statistical analysis, including linear and logistic regression techniques.
    Delve into the realm of time series analysis, mastering statistics, plots, and
    forecasting methods to gain valuable insights into temporal data trends and patterns.
  prefs: []
  type: TYPE_NORMAL
- en: 'This part has the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B19142_08.xhtml#_idTextAnchor159), *Exploratory Data Analysis
    with R and Python*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B19142_09.xhtml#_idTextAnchor178), *Statistical Analysis: Linear
    and Logistic Regression*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 10*](B19142_10.xhtml#_idTextAnchor194), *Time Series Analysis: Statistics,
    Plots, and Forecasting*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
