["```py\nrequire([, \"esri/arcgis/utils\", ],function (, arcgisUtils, ) {\n\n});\n```", "```py\nrequire([, \"esri/arcgis/utils\", ],function (, arcgisUtils, ) {\n     arcgisUtils.createMap(\"450d4fb709294359ac8d03a3069e34d3\", \n       \"mapdiv\", {});\n});\n```", "```py\n    // response object was returned by arcgisUtils.createMap()\n    response.clickEventHandler.remove();\n    ```", "```py\n    response.clickEventHandler = dojoOn(map, \"click\",  response.clickEventListener);\n    ```", "```py\n  /* not used because we're using the boostrapMap version\n  var deferred = arcgisUtils.createMap(\"450d4fb709294359ac8d03a3069e34d3\", \"map\", {});  */\n\n  var deferred = BootstrapMap.createWebMap(\"450d4fb709294359ac8d03a3069e34d3\", \"map\", {});\n\n  deferred.then(function (response) {\n    // map and census widget definition moved inside deferred callback\n    var map = response.map;\n\n    var census = new Census({\n      map: map,\n      mapService: \"http://sampleserver6.arcgisonline.com/arcgis/rest/services/Census/MapServer/\"\n    }, \"census-widget\");\n\n    dojoOn(dom.byId(\"census-btn\"), \"click\", lang.hitch(census, census.show));\n  });\n```", "```py\nrequire([…, \"esri/arcgis/utils\", \"esri/request\", …], \n  function (…, arcgisUtils, esriRequest, …) {\n    …\n    // replace fake webmapid value with real webmap id\n    var webmapid = \"d2klfnml2kjfklj2nfkjeh2ekrj\";\n    var url = arcgisUtils.arcgisUrl + \"/\" + webmapid + \"/data\";\n    esriRequest({\n      url: url,\n      handleAs: \"json\", \n      content: {f: \"json\"}\n    }).then(function (response) {\n      console.log(response);\n      // do something with the JSON data.\n    });\n    …\n});\n```", "```py\n_updateInfoWindowFromQuery: function (results) {\n  var resultExtent = graphicsUtils.graphicsExtent(results.features);\n  this.map.setExtent(resultExtent).then(lang.hitch(this, function () {\n // do something\n this.map.onClick();\n }));\n},\n```", "```py\n_updateInfoWindowFromQuery: function (results) {\n  var resultExtent = graphicsUtils.graphicsExtent(results.features);\n  this.map.setExtent(resultExtent).then(lang.hitch(this, function () {\n  var center = resultExtent.getCenter();\n var centerScreen = this.map.toScreen(center);\n  this.map.onClick({\n graphic: results.features[0],\n mapPoint: center,\n screenPoint: centerScreen\n });\n  }));\n},\n```"]