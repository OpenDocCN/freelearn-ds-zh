- en: 2 Configuring R with Power BI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Power BI Desktop is not equipped with the analytical language engines presented
    in the previous chapter by default. Therefore, it is necessary to install these
    engines and properly configure Power BI Desktop to correctly interface with them.
    It is also recommended to install an **Integrated Development Environment** (**IDE**),
    enabling you to work in the way you are most comfortable.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll look at how to get those engines up and running and give you some general
    guidelines on how to pick the most appropriate one for your needs. After that,
    we'll look at how to make these engines interface with both Power BI Desktop and
    the Power BI service.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we will give some important tips on how to overcome some stringent
    limitations of R visuals on the Power BI service.
  prefs: []
  type: TYPE_NORMAL
- en: 'In particular, this chapter will deal in detail with the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The available R engines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choosing an R engine to install
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing an IDE for R development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring Power BI Desktop to work with R
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring the Power BI service to work with R
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Limitations of R visuals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This chapter requires you to have a working internet connection and **Power
    BI Desktop** already installed on your machine. It also requires you to have signed
    up for the Power BI service in the last part of the chapter (here’s a how-to:
    [http://bit.ly/signup-powerbiservice](http://bit.ly/signup-powerbiservice)). A
    **Power BI free** license is enough to test all the code in this book, as you
    will share reports only in your personal **workspace**.'
  prefs: []
  type: TYPE_NORMAL
- en: The available R engines
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is more than one R distribution available on the market that you can use
    for free for your advanced analytics projects. In this section, we'll explore
    the main details of each of them.
  prefs: []
  type: TYPE_NORMAL
- en: The CRAN R distribution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When it comes to installing the R engine, we almost always think of the open
    source software environment *par excellence*, developed by a collective of contributors
    over the years, known as **CRAN R**, also called **base R** ([https://cran.r-project.org](https://cran.r-project.org)).
    To be exact, the **Comprehensive R Archive Network** (**CRAN**) is a network of
    web servers and FTP servers around the world, whose goal is to preserve multiple
    identical and up-to-date versions of the R source code and the entire ecosystem
    of R packages developed by the community, along with all the R documentation.
  prefs: []
  type: TYPE_NORMAL
- en: One of the biggest advantages of CRAN R is its very active community of developers.
    Their contribution to the creation of new packages on CRAN is invaluable. That's
    why if you think you need a particular feature to process your data, it's almost
    certain that it has already been developed by the R community and released as
    a free usable R package.
  prefs: []
  type: TYPE_NORMAL
- en: However, not everyone knows that CRAN R is not the only R distribution available
    on the market.
  prefs: []
  type: TYPE_NORMAL
- en: The Microsoft R Open distribution and MRAN
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Even Microsoft has contributed to the community by releasing its own open source
    R "distro" for both Windows and Linux, under the terms of the *General Public
    License version 2*. Starting from 2016, Microsoft has released its own distributions
    of R, called **Microsoft R Open** (**MRO**) and sometimes referred to simply as
    **Microsoft R**, which reflects the same versions released by CRAN R and is 100%
    compatible with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**Important note**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If you take any code written in CRAN R, using any CRAN package, and run it with
    the same version of the MRO engine, everything will work fine.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In addition, there are only a few Microsoft-owned functions (including **RevoUtils**
    and **RevoUtilsMath**) that return information about the engine installation (such
    as path and memory usage) and the maximum number of threads that the **Math Kernel
    Library** (**MKL**) can run.
  prefs: []
  type: TYPE_NORMAL
- en: 'The benefit of the MRO release was that it brought important improvements for
    the R community:'
  prefs: []
  type: TYPE_NORMAL
- en: The multi-threaded **Intel MKL** included out of the box
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A high-performance mirror of the CRAN repository, called **Microsoft R Application
    Network** (**MRAN**, [https://mran.microsoft.com](https://mran.microsoft.com)),
    that gives you a “time machine” tool to get a snapshot of CRAN packages at the
    selected time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's see in detail what they are.
  prefs: []
  type: TYPE_NORMAL
- en: Multi-threading in MRO
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Although CRAN R was created as single-threaded, it has the ability to link to
    the multi-threaded **Basic Linear Algebra Subprograms** (**BLAS**) and **Linear
    Algebra Package** (**LAPACK**) libraries too, but these are not straightforward
    activities to do manually.
  prefs: []
  type: TYPE_NORMAL
- en: 'Installing MRO offers the advantage of having the engine already preconfigured
    and optimized for Intel processors thanks to MKL, with the purpose of performing
    mathematical calculations in parallel. To get an idea of the gain in computational
    time, take a look at the benchmark results obtained comparing R-3.4.1 and MRO
    3.4.1 in *Figure 2.1* (source:[http://bit.ly/msropen-bnchmrk](http://bit.ly/msropen-bnchmrk)):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.1 – Total elapsed time for each of the benchmark tests on the same
    machine](img/file16.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.1 – Total elapsed time for each of the benchmark tests on the same
    machine
  prefs: []
  type: TYPE_NORMAL
- en: As you can easily see, the time taken by CRAN R (installed as-is without linking
    the BLAS libraries) in the matrix calculation is significantly higher than that
    taken by MRO. It is therefore strongly recommended to use MRO if you make heavy
    use of math routines for data science, engineering, financial analysis, and so
    on.
  prefs: []
  type: TYPE_NORMAL
- en: Reproducing results with checkpoints
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When performing complex analyses using R, it is very likely that the resulting
    script is based on one or more CRAN packages. One of the most common problems
    in R is the reproducibility of results, because packages on CRAN change every
    day. So, it can happen that suddenly a script that was working fine a few weeks
    ago strarts to generate errors never seen before after you update the packages,
    or when you run it on another machine. Even more insidious is the possibility
    of getting incorrect results without realizing it, again due to a package update.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this reason, starting in September 2014, Microsoft put up its own distribution
    of CRAN''s R packages organized into daily snapshots of the entire repository,
    taken by the **checkpoint server** at midnight UTC and persisted on MRAN:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.2 – The process of persisting a daily snapshot of CRAN in MRAN](img/file17.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.2 – The process of persisting a daily snapshot of CRAN in MRAN
  prefs: []
  type: TYPE_NORMAL
- en: From that point on, the R community had the ability to access a specific snapshot
    of CRAN packages with their versions frozen to a specific date.
  prefs: []
  type: TYPE_NORMAL
- en: '**Important note**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: It is not necessary to use MRO to benefit from the free service offered by the
    checkpoint server. CRAN R users can also use it.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Usually, when you invoke `install.packages` to install one or more packages
    in R, the latest CRAN version of each specified package is installed. Using the
    `checkpoint` package, you have the ability to reference a specific snapshot of
    the CRAN repository on a specific day in the past, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: With the preceding code example, both you and any other user are sure to always
    use the same version of the `dplyr` package downloaded from the CRAN repository
    snapshot you want to use.
  prefs: []
  type: TYPE_NORMAL
- en: 'The MRO installation includes the `checkpoint` package and by default sets
    the snapshot date as equal to the release date of the MRO version you are installing.
    You can easily verify the snapshot date that is set by the specific version of
    MRO in the **CRAN Time Machine** tool available on the MRAN portal ([https://mran.microsoft.com/timemachine](https://mran.microsoft.com/timemachine)):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.3 – The process of persisting a daily snapshot of CRAN in MRAN](img/file18.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.3 – The process of persisting a daily snapshot of CRAN in MRAN
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also check the default package repository programmatically in the following
    way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'And you’ll get something like this as output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: With this example code, if you install any R package, the versions installed
    will be those that were present in CRAN at midnight on July 16, 2020.
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft R Client
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Microsoft has also released another distribution of R, available for free for
    Windows and Linux, called **Microsoft R Client**. This distribution is entirely
    based on MRO, allowing you to run any code that works on CRAN R. In addition,
    there are some of Microsoft''s R function libraries ([http://bit.ly/ml-r-funcions](http://bit.ly/ml-r-funcions))
    that are not open sourced. These functions are multi-threaded and allow you to
    work even with datasets that normally could not be contained in the memory of
    the machine with Microsoft’s on-premises products (**SQL Server** and **Machine
    Learning Server**). Yes, that’s right: in case you didn''t know, Microsoft''s
    **Relational Database Management System** (**RDBMS**), SQL Server, lets you use
    R, Python, and Java code in its stored procedures. So, if your data source is
    SQL Server itself and you need to extract insights from the data that are persisted
    there, consider also the possibility of applying Advanced Analytics algorithms
    directly using stored procedures in SQL Server, embedding R and Python code within
    them.'
  prefs: []
  type: TYPE_NORMAL
- en: Using Microsoft R Client, it is possible to delegate algorithms that require
    non-trivial computational complexity to SQL Server or Machine Learning Server
    thanks to the performant **MicrosoftML** and **RevoScale** packages mentioned
    previously.
  prefs: []
  type: TYPE_NORMAL
- en: Unlike MRO, Microsoft R Client is not updated in parallel with each individual
    CRAN R release, but follows the MRO releases included at the time of Machine Learning
    Server releases. For example, as of today, CRAN R is at version 4.0.2, and MRO
    is at version 4.0.2 too, whereas Microsoft R Client is at version 3.5.2, which
    is the one supported by Machine Learning Server 9.4.
  prefs: []
  type: TYPE_NORMAL
- en: Having described the main features of the most popular R distributions, let's
    move on to the selection of the engine to be installed on your machine.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing an R engine to install
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first question when installing an R engine is, *"Which distribution should
    I install? Do I choose the standard CRAN R, or do I opt for any Microsoft R distribution?"*
    The usual answer to these kinds of questions is, *"It depends!"* In our case,
    the goal is to use the R engine within Power BI, so we need to understand which
    engines are used by the different products that permit the use of R within them.
  prefs: []
  type: TYPE_NORMAL
- en: The R engines used by Power BI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We saw in *Chapter 1,* *Where and How to Use R and Python Scripts in Power
    BI,* that only two Power BI products are allowed to use scripts in R and Python:
    Power BI Desktop and the Power BI service (remember that Power BI Embedded is
    implicitly included when talking about the Power BI service). So, the answer *"It
    depends!"* takes on a clearer connotation now: if you need to share your reports
    with people inside your organization, then you have to install the engines that
    work well with the Power BI service; if, instead, you need to create reports for
    your own use, without even publishing it on **My Workspace**, you can install
    the engines suitable for Power BI Desktop.'
  prefs: []
  type: TYPE_NORMAL
- en: There is a substantial difference in the use of analytic engines by these two
    products. **Power BI Desktop** relies on the R engine installed by the user on
    the same machine on which Power BI Desktop is running. It is the user who chooses
    which version of the engines and which packages to install. Power BI Desktop simply
    ensures that any R code entered through its interface runs directly on that engine.
  prefs: []
  type: TYPE_NORMAL
- en: The **Power BI service** is the **Software-as-a-Service** (**SaaS**) product
    among those covered by Power BI. The user doesn’t have to take on the maintenance
    of its underlying IT infrastructure, and nor can the user decide to install components
    on it at will.
  prefs: []
  type: TYPE_NORMAL
- en: '**Important note**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The R engine and the packages used by the Power BI service for **R visuals**
    are preinstalled on the cloud and therefore the user must adapt to the versions
    adopted by the service.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: It is also important to know exactly which R distribution is used by the R visuals
    in the Power BI service.
  prefs: []
  type: TYPE_NORMAL
- en: '**Important note**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'To date, the Power BI service relies on the **MRO 3.4.4** runtime when implementing
    an R visual. It is important to always keep an eye on the version of the R engine
    and the packages provided by the Power BI service with each release to ensure
    that the reports to be published work properly. See the following link for more
    information: [http://bit.ly/powerbi-r-limits](http://bit.ly/powerbi-r-limits).'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If, instead, you have to do data ingestion or data transformation using R scripts
    and you need to refresh your data, the Power BI service does not use the same
    engine for R visuals in this case.
  prefs: []
  type: TYPE_NORMAL
- en: '**Important note**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The R engine used by the Power BI service during the data refresh phase for
    *R scripts in Power Query* has to be installed on any machine of your choice outside
    the service, and on that same machine you have to install the **on-premises data
    gateway** in **personal mode**. Note that you must use external engines even if
    the data to be refreshed does not flow through the gateway, but comes from data
    sources not referenced by the gateway itself.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: As long as the R engine to be referenced via the data gateway is only one, it
    is sufficient that both are installed on the same machine. Otherwise, the following
    note applies.
  prefs: []
  type: TYPE_NORMAL
- en: '**Important note**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If you need to *use multiple R engines* installed on the machine for your Power
    Query transformations, you must *also install Power BI Desktop*. It allows you
    to switch the routing of the data gateway to the selected engine through its options,
    updating the configuration file `C:\Users\<your-username>\AppData\Local\PowerBIScripting\RSettings.xml`.
    This file allows the override of the R engine referenced by the data gateway by
    default.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'If you need to learn more about the on-premises data gateway (*Enterprise*
    and *personal* modes), we suggest reading the Microsoft Docs page at this link:
    [http://bit.ly/onprem-data-gateway](http://bit.ly/onprem-data-gateway).'
  prefs: []
  type: TYPE_NORMAL
- en: In summary, with the preceding scenarios in mind, if you need to do reports
    for personal use on your desktop, you have no limitations on which R engine to
    use, so you can install the R versions and packages that suit you best. If, however,
    you know in advance that the reports you are going to create contain R visuals
    and are intended to be shared with colleagues on the Power BI service, there are
    stringent limitations on both the version and the packages to be pre-installed
    in the service.
  prefs: []
  type: TYPE_NORMAL
- en: Let's now move on to the installation of the engines.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the suggested R engines
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Managing dependencies of R scripts injected within reports developed for the
    Power BI service can be complex in the long run. Keeping in mind that it is possible
    to install more than one R engine on the same machine, we suggest the following
    tip.
  prefs: []
  type: TYPE_NORMAL
- en: '**Tip**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: We recommend that you *dedicate a machine* to run only the R engines used by
    Power BI reports. Our suggestion is to install an R engine for each possible need
    that may arise when developing R scripts in Power Query or in R visuals.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The R engine for data transformation
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You have seen that R scripts used in Power Query to make changes to the data
    model must necessarily use an external R engine through the on-premises data gateway
    in personal mode, even if you use the Power BI service.
  prefs: []
  type: TYPE_NORMAL
- en: '**Tip**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: We recommend installing the latest available version of either CRAN R or MRO.
    Since both distributions are interchangeable in terms of code operation given
    the same version, in our opinion it is better to install *MRO* to benefit from
    the performance advantages of the MKL library.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Installing MRO is very simple:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://mran.microsoft.com/download](https://mran.microsoft.com/download).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **Download** button corresponding to your OS. In my case, this
    is Windows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.4 – Downloading MRO for Windows](img/file19.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 2.4 – Downloading MRO for Windows
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once the `microsoft-r-open-x.x.x.exe` file (where `x.x.x` corresponds to the
    actual version chosen) is downloaded, double-click on it and then click on **Continue**
    on the **Let’s get started** window that pops up.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The next screen, **Configure the installation**, asks you to confirm or change
    the installation path, as well as select some installation options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.5 – MRO installation options](img/file20.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 2.5 – MRO installation options
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The only optional choice is to install **MKL**. For reasons you know well by
    now, we suggest installing it. Then click on **Continue**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the next window, you can read the Microsoft license agreement to install
    MRO. After checking **I acknowledge the above licensing information**, click on
    **Continue**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Similarly, in the next window you can read the license agreement for MKL. After
    ticking **I accept these terms**, click on **Continue**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A summary window now appears asking you to click on **Install** to begin installing
    MRO.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the end of the installation, an **All done** window will inform you that
    the installation was completed successfully.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: And that’s it! You are now ready to be able to write and run your R code on
    MRO.
  prefs: []
  type: TYPE_NORMAL
- en: '**Important note**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Usually, the Power BI Desktop installation on which you develop reports is located
    on a separate machine from the one selected as the Power BI service’s R engine
    machine, where the data gateway is also often installed. In that case, you must
    also install the R engine on the machine on which your Power BI Desktop instance
    is installed.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'If you want, you can already write code on the very rudimentary GUI installed
    by default with MRO:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.6 – The rGUI installed by MRO](img/file21.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.6 – The rGUI installed by MRO
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll see later in this chapter how to install the IDE preferred by all R developers:
    **RStudio**.'
  prefs: []
  type: TYPE_NORMAL
- en: The R engine for R visuals on the Power BI service
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: As previously mentioned, R visual scripts published on the Power BI service
    run on a pre-installed R engine on the cloud, the version of which may change
    based on new releases of the Power BI service itself. Should you need to share
    a report containing an R visual with colleagues, you need to be sure that your
    R code works correctly on the pre-installed engine.
  prefs: []
  type: TYPE_NORMAL
- en: '**Tip**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: We strongly recommend that you also install on your machine the *same version*
    of MRO as that used for R visuals by the Power BI service.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In order to install the same version of MRO provided by the Power BI service,
    the process is very simple:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to [http://bit.ly/powerbi-r-limits](http://bit.ly/powerbi-r-limits) and
    check the actual version of MRO used by the Power BI service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.7 – The actual MRO version used by the Power BI service](img/file22.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 2.7 – The actual MRO version used by the Power BI service
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Then go to [https://mran.microsoft.com/release-history](https://mran.microsoft.com/release-history)
    and check for the same MRO version you saw in *step 1* (in our case, **3.4.4**):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.8 – Downloading the selected MRO version](img/file23.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 2.8 – Downloading the selected MRO version
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After downloading the executable, simply follow the steps outlined in the previous
    section to install this specific version of the MRO engine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What to do when the Power BI service upgrades the R engine
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It may happen that you have already installed a version of MRO specifically
    to be aligned with the R visual engine on the Power BI service at a certain date,
    and after a while Microsoft updates the Power BI service, also upgrading the pre-installed
    R engine. This scenario causes two separate events:'
  prefs: []
  type: TYPE_NORMAL
- en: The R engine is more up to date than its predecessor and may contain breaking
    changes that could make previously developed reports unusable. This is a very
    rare eventuality, since very often such changes are mitigated by the introduction
    of “deprecated” functions or parameters, thus ensuring backward compatibility.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Many of the packages installed on the release date of the previous R engine
    will be updated to a later version, corresponding to the release date of the new
    version of the R engine. Updating a package to a newer version is one of the most
    frequent causes of errors due to the incompatibility of a script written for the
    previous version of the package.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this case, you should verify that all of your reports that have R visuals
    and are published to the Power BI service also work with the updates made to the
    service.
  prefs: []
  type: TYPE_NORMAL
- en: '**Tip**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In light of the preceding observations, and considering the fact that the pre-installed
    R engine of the Power BI service is very rarely updated, it is better to directly
    install the new version of MRO on your machine and test your reports making sure
    that Power BI Desktop references the new version of the engine. You need to fix
    any code issue in those R visuals that have some problems, after which you can
    publish those reports back to the Power BI service.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Once you’ve made sure that all of the preceding reports are working properly,
    it’s up to you to decide whether you want to uninstall the previous version of
    MRO to free up disk space and to avoid confusion in handling these particular
    reports.
  prefs: []
  type: TYPE_NORMAL
- en: At this point we can move on to install an IDE that has more features than the
    rGUI installed by default by MRO.
  prefs: []
  type: TYPE_NORMAL
- en: Installing an IDE for R development
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The need to install a state-of-the-art IDE for the development of code in Power
    BI comes from the need to have all the tools necessary to identify any bugs and
    to quickly test the results of code chunks on the fly.
  prefs: []
  type: TYPE_NORMAL
- en: '**Tip**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: It is strongly suggested to test your R code in the IDE and verify the results
    before using it in Power BI.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: There are many IDEs for R development on the market. Some examples are **R-Brain
    IDE** (**RIDE**), **IntelliJ IDEA**, and **Jupyter Lab**, but it is estimated
    that over 90% of R programmers use **RStudio** as their primary IDE. That’s why
    we suggest you also use this IDE to test the code you’ll encounter throughout
    this book.
  prefs: []
  type: TYPE_NORMAL
- en: Installing RStudio
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Installing RStudio on your machine is very simple:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to [https://rstudio.com/products/rstudio/download/](https://rstudio.com/products/rstudio/download/)
    and click on **Download** under the **RStudio Desktop** column:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.9 – Go to the Download page of RStudio](img/file24.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 2.9 – Go to the Download page of RStudio
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Then click on the **Download RStudio for Windows** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.10 – Download RStudio for Windows](img/file25.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 2.10 – Download RStudio for Windows
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After the download completes successfully, double-click on the executable and
    click on the **Next** button on the RStudio setup welcome window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next window, you are asked for the folder in which to install RStudio.
    Leave the default one and click on **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The following window asks you to select the Start menu folder in which to create
    the shortcuts. Leave the default one and click on **Install**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the installation is complete, click on **Finish**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Just to make sure you installed everything smoothly, check that you have the
    option to select one of the two newly installed R engines from the RStudio options:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the newly installed RStudio from the **Start** menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.11 – Run RStudio from the Start menu](img/file26.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 2.11 – Run RStudio from the Start menu
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once opened, you may be asked if you want to anonymously send any crash reports
    to RStudio to improve the product. Select **Yes** or **No** as your choice.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As you can see, RStudio has already selected an R engine by default. In our
    case, it is the latest version installed on our machine. Also, note that MKL is
    up and running:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.12 – The default R engine selected in RStudio and Global Options](img/file27.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 2.12 – The default R engine selected in RStudio and Global Options
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, click on the **Tools** menu and then **Global Options…** to see the available
    engines.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the **General** menu of the **Options** window, you have the possibility
    to select the engine you want to use in RStudio by clicking on **Change...** and
    then selecting one of the available engines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.13 – Choose your preferred R engine to use with RStudio](img/file28.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 2.13 – Choose your preferred R engine to use with RStudio
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Usually, we would not advise considering the engine containing `“C:\PROGRA~1\...”`
    as the root of the path. It is simply the engine that is currently selected in
    RStudio. Just select one of the other engines from the list.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For now, select the most recent version of R (in our case, 4.0.2) and click
    **OK** on the **Choose R Installation** window. You will be notified that you
    will need to restart RStudio for the selected changes to take effect.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **OK** on the **Change R Version** window, and then **OK** on the **Options**
    window. Sometimes you’ll have the option to restart by selecting **Yes** in a
    dialog box that is shown immediately afterward. If not, just exit from RStudio
    and open it again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Well done! Now you're ready to properly configure an R engine in Power BI Desktop
    and set up what you need to publish to the Power BI service.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Power BI Desktop to work with R
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you have installed the R engines necessary for the development of your
    reports and the RStudio IDE, you must configure Power BI Desktop so that it properly
    references these tools. This is really a very simple task:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In Power BI Desktop, go to the **File** menu, click on the **Options and settings**
    tab, and then click on **Options**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.14 – Opening the Power BI Desktop Options and settings window](img/file29.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 2.14 – Opening the Power BI Desktop Options and settings window
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the **Options** window, click on the **R scripting** tab on the left. The
    contents of the panel on the right will update, giving you the option to select
    the R engine to reference and the R IDE to use for R visuals:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.15 – Choosing the engine and the IDE to work with in Power BI Desktop](img/file30.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 2.15 – Choosing the engine and the IDE to work with in Power BI Desktop
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As you can see, Power BI Desktop automatically identifies the installed R engines
    and IDEs. For the moment, select the latest version of the engine (in our case,
    it is 4.0.2), in order to be aligned with the one already selected in RStudio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will see how to interact with the IDE from Power BI Desktop when we introduce
    the R and Python script visuals in *Chapter 12, Exploratory Data Analysis*.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the Power BI service to work with R
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you learned in the *The R engines used by Power BI* section of this chapter,
    the Power BI service uses different R engines depending on whether the scripts
    are used in R visuals or in Power Query for data transformation. In the first
    case, the engine is pre-installed on the cloud; in the second case, you need to
    install the **on-premises data gateway** in **personal mode** on any machine of
    your choice in order to make the Power BI service communicate with the R engine
    you installed on that machine.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the on-premises data gateway in personal mode
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We have emphasized the fact that you will need to install the data gateway
    in personal mode for an important reason: R scripts are *not supported* for the
    on-premises data gateway in *Enterprise mode*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In your case, you will install the data gateway on the same laptop on which
    you have installed the R engines and Power BI Desktop. The steps to do this are
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure you can log in to the Power BI service ([https://app.powerbi.com](https://app.powerbi.com)).
    You will see a home page like the following, customized with your company logo:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.16 – The Power BI service home page](img/file31.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 2.16 – The Power BI service home page
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'On the top right-hand side of the home page, you''ll notice a downward-pointing
    arrow that allows you to access the download menu. Click on this, and then select
    **Data Gateway**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.17 – The Download menu on your the Power BI service home page](img/file32.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 2.17 – The Download menu on your the Power BI service home page
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You will be redirected to a web page from which you can download the data gateway.
    Be sure to download the **personal mode** version:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.18: Download the personal mode version of the data gateway](img/file33.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 2.18: Download the personal mode version of the data gateway'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Running the newly downloaded executable immediately opens an initial window
    that asks you to check the minimum installation requirements given in a link,
    set the installation folder of the software, and accept the terms of use for the
    software:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.19 – The data gateway installation window](img/file34.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 2.19 – The data gateway installation window
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can leave the default folder selected, click on the terms of use acceptance
    check box, and click **Install** to move on.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Once the data gateway installation is complete, a sign-in window will open
    where you will need to enter the email address with which you registered with
    the Power BI service, and then your password:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.20 – The data gateway sign-in window](img/file35.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 2.20 – The data gateway sign-in window
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'When the sign-in operation is successful, a green tick will appear with the
    words **The gateway is online and ready to be used**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.21 – The data gateway up and running](img/file36.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 2.21 – The data gateway up and running
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can close the on-premises data gateway window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this moment, the Power BI service is directly connected to your machine and
    can access it whenever there is a need to refresh a published dataset with which
    your newly installed data gateway is associated.
  prefs: []
  type: TYPE_NORMAL
- en: '**Important note**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Keep in mind that a Power BI user can *only have one* data gateway associated.
    If you try to install multiple on-premises data gateways in personal mode on several
    different machines, logging in on one of them will force a disconnect on all other
    data gateways.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Sharing reports that use R scripts in the Power BI service
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the previous sections you learned that, thanks to the data gateway newly
    installed in personal mode, you can publish a report that uses R scripts in the
    Power BI service to your personal workspace for sure. But, assuming you have a
    Pro license, can you also publish this report to shared workspaces? There is often
    a lot of confusion about this.
  prefs: []
  type: TYPE_NORMAL
- en: '**Important note**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: No one forbids you from publishing your report on shared workspaces as well!
    Although you have used a data gateway in personal mode, other users can view your
    report. But not only that! Other users can also refresh the dataset behind the
    report. They will do this "on your behalf," pointing to the machine referenced
    by your data gateway. The important thing is that your machine is turned on!
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: But then, if you can still share your reports with others using a data gateway
    in personal mode, what is the advantage of using a data gateway in Enterprise
    mode?
  prefs: []
  type: TYPE_NORMAL
- en: Using *just one* data gateway in Enterprise mode, *multiple users* in your organization
    can access on-premises data to which they already have access permission. It goes
    without saying that other users can view and refresh your report, but they cannot
    develop their own reports using R code by referencing your machine with R engines
    through your personal data gateway. This one is the true limitation.
  prefs: []
  type: TYPE_NORMAL
- en: In light of the preceding, there is an **unofficial architecture**, frequently
    used in companies, that allows *all reports* that make use of R code in Power
    Query to reference a *single machine* on which the R engine has been installed
    using a personal data gateway.
  prefs: []
  type: TYPE_NORMAL
- en: '**Tip**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This unofficial architecture makes use of a personal data gateway associated
    not with a physical person, but with a *fictitious "service" user*. The credentials
    of this user are shared between all those analysts who use R code to transform
    data into their reports. Also, since the machine with the R engine referenced
    by the data gateway is shared, it must remain on during periods of scheduled activity.
    For this reason, an Azure Windows Virtual Machine on which both the R engine and
    the data gateway run is often used in this architecture.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Since a picture is worth a thousand words, *Figure 2.22* summarizes this architecture:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.22 – Enterprise architecture to use R for data transformations](img/file37.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.22 – Enterprise architecture to use R for data transformations
  prefs: []
  type: TYPE_NORMAL
- en: Thanks to this architecture it is possible to allow a group of analysts to use
    R scripts in their reports, despite the limitations imposed by the on-premises
    data gateway in personal mode.
  prefs: []
  type: TYPE_NORMAL
- en: That said, in addition to the limitations seen for R scripts in Power Query,
    there are some important ones to be aware of for R visuals as well.
  prefs: []
  type: TYPE_NORMAL
- en: R visuals limitations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'R visuals have some important limitations regarding the data they can handle,
    both as input and output:'
  prefs: []
  type: TYPE_NORMAL
- en: An R visual can handle a *dataframe with only 150,000 rows*. If there are more
    than 150,000 rows, only the first 150,000 rows are used and a relevant message
    is displayed on the image.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: R visuals have an *output size limit of 2MB*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You must also be careful not to exceed the *5 minutes of runtime calculation*
    for an R visual in order to avoid a time-out error. Moreover, in order not to
    run into performance problems, note that *the resolution of the R visual plots
    is fixed at 72 DPI*.
  prefs: []
  type: TYPE_NORMAL
- en: As you can imagine, some limitations of R visuals are different depending on
    whether you run the visual on Power BI Desktop or the Power BI service.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create reports in *Power BI Desktop*, you can do any of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Install any kind of package (CRAN, GitHub, or custom) in your engine for R visuals.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install only CRAN packages in your engine for custom R visuals (you will see
    an example in *Chapter 14, Interactive Custom Visuals in R*).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access the internet from both an R visual and a custom R visual.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When creating reports in *the Power BI service*, note the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For both R visuals and custom R visuals, you can use *only the CRAN packages
    listed at this link*: [https://bit.ly/powerbi-r-limits](https://bit.ly/powerbi-r-limits).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You cannot access the internet from either R visuals or custom R visuals.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you may have noticed, although the CRAN packages that can be used in an R
    visual on the Power BI service are limited, you can still count more than 900
    packages in that list! In addition to the fact that R was the first analytical
    language introduced into Power BI, this shows that R is de facto considered one
    of the most versatile and professional languages for creating engaging visualizations.
  prefs: []
  type: TYPE_NORMAL
- en: As you probably already know, once one of your reports is published on the Power
    BI service, you can decide to share it on your blog, on one of your websites,
    or on social media via the **Publish to web** option. R visuals are not allowed
    to be published to the web.
  prefs: []
  type: TYPE_NORMAL
- en: '**Important note**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Custom R visual overcomes the limitation on punlishing to the web.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: So, if you have to publish a report to the web, and that report contains a visualization
    created using R code, you must necessarily develop a custom R visual.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, you learned about the most popular free R engines in the community.
    In particular, you learned what advantages have been introduced by Microsoft releasing
    its distribution of R to the market.
  prefs: []
  type: TYPE_NORMAL
- en: Taking note of the unique features of Power BI Desktop and the Power BI service,
    you have learned how to properly choose the engines and how to install them.
  prefs: []
  type: TYPE_NORMAL
- en: You have also learned about the most popular IDE in the R community and how
    to install it.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, you were introduced to all of the best practices for properly configuring
    both Power BI Desktop and the Power BI service with R, whether in a development
    or enterprise environment.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you've learned some of the limitations on using R with Power BI, knowledge
    of which is critical to avoid making mistakes in developing and deploying reports.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll see which Python engines and IDEs to install and
    configure in Power BI in order to develop and test Python scripts in comfort.
  prefs: []
  type: TYPE_NORMAL
