["```py\nshp2pgsql -s 3734 -d -i -I -W LATIN1 -g the_geom CUY_ADDRESS_POINTS chp04.knn_addresses | psql -U me -d postgis_cookbook  \n```", "```py\nshp2pgsql -s 3734 -d -i -I -W LATIN1 -g the_geom CUY_ADDRESS_POINTS_subset chp04.knn_addresses | psql -U me -d postgis_cookbook  \n```", "```py\nSELECT COUNT(*) FROM chp04.knn_addresses; \n--484958\n```", "```py\nSELECT ST_Distance(searchpoint.the_geom, addr.the_geom) AS dist, * FROM \n  chp04.knn_addresses addr, \n  (SELECT ST_Transform(ST_SetSRID(ST_MakePoint(-81.738624, 41.396679),\n    4326), 3734) AS the_geom) searchpoint \n  ORDER BY ST_Distance(searchpoint.the_geom, addr.the_geom) \n  LIMIT 10; \n```", "```py\nSELECT ST_Distance(searchpoint.the_geom, addr.the_geom) AS dist, * FROM \n  chp04.knn_addresses addr, \n  (SELECT ST_Transform(ST_SetSRID(ST_MakePoint(-81.738624, 41.396679), \n    4326), 3734) AS the_geom) searchpoint \n  WHERE ST_DWithin(searchpoint.the_geom, addr.the_geom, 200) \n  ORDER BY ST_Distance(searchpoint.the_geom, addr.the_geom) \n  LIMIT 10; \n```", "```py\nSELECT ST_Distance(searchpoint.the_geom, addr.the_geom) AS dist, * FROM \n  chp04.knn_addresses addr, \n  (SELECT ST_Transform(ST_SetSRID(ST_MakePoint(-81.738624, 41.396679),\n    4326), 3734) AS the_geom) searchpoint \n  ORDER BY addr.the_geom <-> searchpoint.the_geom \n  LIMIT 10; \n```", "```py\nshp2pgsql -s 3734 -d -i -I -W LATIN1 -g the_geom CUY_ADDRESS_POINTS chp04.knn_addresses | psql -U me -d postgis_cookbook\n```", "```py\nshp2pgsql -s 3734 -d -i -I -W LATIN1 -g the_geom CUY_ADDRESS_POINTS_subset chp04.knn_addresses | psql -U me -d postgis_cookbook\n```", "```py\nshp2pgsql -s 3734 -d -i -I -W LATIN1 -g the_geom CUY_STREETS chp04.knn_streets | psql -U me -d postgis_cookbook\n```", "```py\nCREATE OR REPLACE FUNCTION chp04.angle_to_street (geometry) RETURNS double precision AS $$ \n\nWITH index_query as (SELECT ST_Distance($1,road.the_geom) as dist, degrees(ST_Azimuth($1, ST_ClosestPoint(road.the_geom, $1))) as azimuth FROM  chp04.knn_streets As road ORDER BY $1 <#> road.the_geom limit 5) \n\nSELECT azimuth FROM index_query ORDER BY dist \nLIMIT 1; \n\n$$ LANGUAGE SQL;\n```", "```py\nCREATE TABLE chp04.knn_address_points_rot AS SELECT addr.*, chp04.angle_to_street(addr.the_geom) FROM chp04.knn_addresses  addr; \n```", "```py\nDROP FUNCTION chp04.angle_to_street (geometry); \n```", "```py\nCREATE OR REPLACE FUNCTION chp04.angle_to_street (geometry) RETURNS double precision AS $$ \n```", "```py\nWITH index_query as (SELECT ST_Distance($1,road.geom) as dist, degrees(ST_Azimuth($1, ST_ClosestPoint(road.geom, $1))) as azimuth \nFROM street_centerlines As road \nORDER BY $1 <#> road.geom LIMIT 5) \n```", "```py\nSELECT azimuth FROM index_query ORDER BY dist \nLIMIT 1; \n```", "```py\nCREATE OR REPLACE FUNCTION chp04.angle_to_street (geometry) RETURNS double precision AS $$ \n\nWITH index_query as (SELECT ST_Distance($1,road.the_geom) as dist, degrees(ST_Azimuth($1, ST_ClosestPoint(road.the_geom, $1))) as azimuth \nFROM  chp04.knn_streets As road \nORDER BY $1 <#> road.the_geom limit 5) \n\nSELECT azimuth FROM index_query ORDER BY dist \nLIMIT 1; \n\n$$ LANGUAGE SQL; \n```", "```py\nCREATE TABLE chp04.tsr_building AS \n\nSELECT ST_Rotate(ST_Envelope(ST_Buffer(the_geom, 20)), radians(90 - chp04.angle_to_street(addr.the_geom)), addr.the_geom) \n  AS the_geom FROM chp04.knn_addresses addr \nLIMIT 500; \n```", "```py\nST_Buffer(the_geom, 20) \n```", "```py\nST_Envelope(ST_Buffer(the_geom, 20)) \n```", "```py\nST_Rotate(geometry to rotate, angle, origin around which to rotate) \n```", "```py\nST_Rotate(ST_Envelope(ST_Buffer(the_geom, 20)), radians(90 -chp04.angle_to_street(addr.the_geom)), addr.the_geom); \n```", "```py\nCREATE OR REPLACE FUNCTION chp04.polygonize_to_multi (geometry) RETURNS geometry AS $$ \n```", "```py\nWITH polygonized AS ( \n  SELECT ST_Polygonize($1) AS the_geom \n), \n```", "```py\ndumped AS ( \n  SELECT (ST_Dump(the_geom)).geom AS the_geom FROM polygonized \n) \n```", "```py\nSELECT ST_Multi(ST_Collect(the_geom)) FROM dumped; \n```", "```py\nCREATE OR REPLACE FUNCTION chp04.polygonize_to_multi (geometry) RETURNS geometry AS $$ \n\nWITH polygonized AS ( \n  SELECT ST_Polygonize($1) AS the_geom \n), \ndumped AS ( \n  SELECT (ST_Dump(the_geom)).geom AS the_geom FROM polygonized \n) \nSELECT ST_Multi(ST_Collect(the_geom)) FROM dumped; \n$$ LANGUAGE SQL; \n```", "```py\nCREATE OR REPLACE FUNCTION chp04.create_grid (geometry, float) RETURNS geometry AS $$ \n```", "```py\nWITH middleline AS ( \n  SELECT ST_MakeLine(ST_Translate($1, -10, 0), \n    ST_Translate($1, 40.0, 0)) AS the_geom \n), \ntopline AS ( \n  SELECT ST_MakeLine(ST_Translate($1, -10, 10.0),\n    ST_Translate($1, 40.0, 10)) AS the_geom \n), \nbottomline AS ( \n  SELECT ST_MakeLine(ST_Translate($1, -10, -10.0), \n    ST_Translate($1, 40.0, -10)) AS the_geom \n),\n```", "```py\noneline AS ( \n  SELECT ST_MakeLine(ST_Translate($1, -10, 10.0), \n    ST_Translate($1, -10, -10)) AS the_geom \n), \ntwoline AS ( \n  SELECT ST_MakeLine(ST_Translate($1, 0, 10.0),\n    ST_Translate($1, 0, -10)) AS the_geom \n), \nthreeline AS ( \n  SELECT ST_MakeLine(ST_Translate($1, 10, 10.0),\n    ST_Translate($1, 10, -10)) AS the_geom \n), \nfourline AS ( \n  SELECT ST_MakeLine(ST_Translate($1, 20, 10.0),\n    ST_Translate($1, 20, -10)) AS the_geom \n), \nfiveline AS ( \n  SELECT ST_MakeLine(ST_Translate($1, 30, 10.0),\n    ST_Translate($1, 30, -10)) AS the_geom \n), \nsixline AS ( \n  SELECT ST_MakeLine(ST_Translate($1, 40, 10.0), \n    ST_Translate($1, 40, -10)) AS the_geom \n), \n```", "```py\ncombined AS ( \n  SELECT ST_Union(the_geom) AS the_geom FROM \n  ( \n    SELECT the_geom FROM middleline \n      UNION ALL \n    SELECT the_geom FROM topline \n      UNION ALL \n    SELECT the_geom FROM bottomline \n      UNION ALL \n    SELECT the_geom FROM oneline \n      UNION ALL \n    SELECT the_geom FROM twoline \n      UNION ALL \n    SELECT the_geom FROM threeline \n      UNION ALL \n    SELECT the_geom FROM fourline \n      UNION ALL \n    SELECT the_geom FROM fiveline \n      UNION ALL \n    SELECT the_geom FROM sixline \n  ) AS alllines \n) \n```", "```py\nSELECT chp04.polygonize_to_multi(ST_Rotate(the_geom, $2, $1)) AS the_geom FROM combined; \n```", "```py\nCREATE OR REPLACE FUNCTION chp04.create_grid (geometry, float) RETURNS geometry AS $$ \n\nWITH middleline AS ( \n  SELECT ST_MakeLine(ST_Translate($1, -10, 0),\n    ST_Translate($1, 40.0, 0)) AS the_geom \n), \ntopline AS ( \n  SELECT ST_MakeLine(ST_Translate($1, -10, 10.0),\n    ST_Translate($1, 40.0, 10)) AS the_geom \n), \nbottomline AS ( \n  SELECT ST_MakeLine(ST_Translate($1, -10, -10.0), \n    ST_Translate($1, 40.0, -10)) AS the_geom \n), \noneline AS ( \n  SELECT ST_MakeLine(ST_Translate($1, -10, 10.0),\n    ST_Translate($1, -10, -10)) AS the_geom \n), \ntwoline AS ( \n  SELECT ST_MakeLine(ST_Translate($1, 0, 10.0),\n    ST_Translate($1, 0, -10)) AS the_geom \n), \nthreeline AS ( \n  SELECT ST_MakeLine(ST_Translate($1, 10, 10.0), \n    ST_Translate($1, 10, -10)) AS the_geom \n), \nfourline AS ( \n  SELECT ST_MakeLine(ST_Translate($1, 20, 10.0),\n    ST_Translate($1, 20, -10)) AS the_geom \n), \nfiveline AS ( \n  SELECT ST_MakeLine(ST_Translate($1, 30, 10.0),\n    ST_Translate($1, 30, -10)) AS the_geom \n), \nsixline AS ( \n  SELECT ST_MakeLine(ST_Translate($1, 40, 10.0),\n    ST_Translate($1, 40, -10)) AS the_geom \n), \ncombined AS ( \n  SELECT ST_Union(the_geom) AS the_geom FROM \n  ( \n    SELECT the_geom FROM middleline \n      UNION ALL \n    SELECT the_geom FROM topline \n      UNION ALL \n    SELECT the_geom FROM bottomline \n      UNION ALL \n    SELECT the_geom FROM oneline \n      UNION ALL \n    SELECT the_geom FROM twoline \n      UNION ALL \n    SELECT the_geom FROM threeline \n      UNION ALL \n    SELECT the_geom FROM fourline \n      UNION ALL \n    SELECT the_geom FROM fiveline \n      UNION ALL \n    SELECT the_geom FROM sixline \n  ) AS alllines \n) \nSELECT chp04.polygonize_to_multi(ST_Rotate(the_geom, $2, $1)) AS the_geom FROM combined; \n$$ LANGUAGE SQL; \n```", "```py\nCREATE TABLE chp04.tsr_grid AS \n\n-- embed inside the function \n  SELECT chp04.create_grid(ST_SetSRID(ST_MakePoint(0,0),\n  3734), 0) AS the_geom \n    UNION ALL \n  SELECT chp04.create_grid(ST_SetSRID(ST_MakePoint(0,100),\n  3734), 0.274352 * pi()) AS the_geom \n    UNION ALL \n  SELECT chp04.create_grid(ST_SetSRID(ST_MakePoint(100,0),\n  3734), 0.824378 * pi()) AS the_geom \n    UNION ALL \n  SELECT chp04.create_grid(ST_SetSRID(ST_MakePoint(0,-100), 3734),\n  0.43587 * pi()) AS the_geom \n    UNION ALL \n  SELECT chp04.create_grid(ST_SetSRID(ST_MakePoint(-100,0), 3734),\n  1 * pi()) AS the_geom; \n```", "```py\nshp2pgsql -s 3734 -d -i -I -W LATIN1 -g the_geom lidar_buildings chp04.lidar_buildings | psql -U me -d postgis_cookbook  \n```", "```py\nST_Buffer(the_geom, 5) \n```", "```py\nST_Union(ST_Buffer(the_geom, 5)) \n```", "```py\nCREATE TABLE chp04.lidar_buildings_buffer AS \n\nWITH lidar_query AS \n(SELECT ST_ExteriorRing(ST_SimplifyPreserveTopology(\n  (ST_Dump(ST_Union(ST_Buffer(the_geom, 5)))).geom, 10\n)) AS the_geom FROM chp04.lidar_buildings) \n\nSELECT chp04.polygonize_to_multi(the_geom) AS the_geom from lidar_query; \n```", "```py\nST_ClusterKMeans(geometry winset geom, integer number_of_clusters); \n```", "```py\nCREATE TABLE chp04.earthq_cent ( \n  cid integer PRIMARY KEY, the_geom geometry('POINT',4326) \n); \n\nCREATE TABLE chp04.earthq_circ ( \n  cid integer PRIMARY KEY, the_geom geometry('POLYGON',4326) \n); \n```", "```py\nINSERT INTO chp04.earthq_cent (the_geom, cid) ( \n  SELECT DISTINCT ST_SetSRID(ST_Centroid(tab2.ge2), 4326) as centroid,\n  tab2.cid FROM( \n    SELECT ST_UNION(tab.ge) OVER (partition by tab.cid ORDER BY tab.cid) \n    as ge2, tab.cid as cid FROM( \n      SELECT ST_ClusterKMeans(e.the_geom, 10) OVER() AS cid, e.the_geom \n      as ge FROM chp03.earthquakes as e) as tab \n  )as tab2 \n); \n```", "```py\nSELECT * FROM chp04.earthq_cent; \n```", "```py\n# INSERT INTO chp04.earthq_circ (the_geom, cid) ( \n  SELECT DISTINCT ST_SetSRID( \n    ST_MinimumBoundingCircle(tab2.ge2), 4326) as circle, tab2.cid \n    FROM( \n      SELECT ST_UNION(tab.ge) OVER (partition by tab.cid ORDER BY tab.cid) \n      as ge2, tab.cid as cid \n      FROM( \n        SELECT ST_ClusterKMeans(e.the_geom, 10) OVER() as cid, e.the_geom \n        as ge FROM chp03.earthquakes AS e \n      ) as tab \n    )as tab2 \n  ); \n```", "```py\nDROP TABLE IF EXISTS chp04.voronoi_test_points; \nCREATE TABLE chp04.voronoi_test_points \n( \n  x numeric, \n  y numeric \n) \nWITH (OIDS=FALSE); \n\nALTER TABLE chp04.voronoi_test_points ADD COLUMN gid serial; \nALTER TABLE chp04.voronoi_test_points ADD PRIMARY KEY (gid); \n\nINSERT INTO chp04.voronoi_test_points (x, y) \n  VALUES (random() * 5, random() * 7); \nINSERT INTO chp04.voronoi_test_points (x, y) \n  VALUES (random() * 2, random() * 8); \nINSERT INTO chp04.voronoi_test_points (x, y) \n  VALUES (random() * 10, random() * 4); \nINSERT INTO chp04.voronoi_test_points (x, y) \n  VALUES (random() * 1, random() * 15); \nINSERT INTO chp04.voronoi_test_points (x, y) \n  VALUES (random() * 4, random() * 9); \nINSERT INTO chp04.voronoi_test_points (x, y) \n  VALUES (random() * 8, random() * 3); \nINSERT INTO chp04.voronoi_test_points (x, y) \n  VALUES (random() * 5, random() * 3); \nINSERT INTO chp04.voronoi_test_points (x, y) \n  VALUES (random() * 20, random() * 0.1); \nINSERT INTO chp04.voronoi_test_points (x, y) \n  VALUES (random() * 5, random() * 7); \n\nSELECT AddGeometryColumn ('chp04','voronoi_test_points','the_geom',3734,'POINT',2); \n\nUPDATE chp04.voronoi_test_points \n  SET the_geom = ST_SetSRID(ST_MakePoint(x,y), 3734) \n  WHERE the_geom IS NULL\n; \n```", "```py\nDROP TABLE IF EXISTS chp04.voronoi_diagram; \nCREATE TABLE chp04.voronoi_diagram( \n  gid serial PRIMARY KEY, \n  the_geom geometry(MultiPolygon, 3734) \n);\n```", "```py\nINSERT INTO chp04.voronoi_diagram(the_geom)( \n  SELECT ST_CollectionExtract( \n    ST_SetSRID( \n      ST_VoronoiPolygons(points.the_geom),   \n    3734), \n  3) \n  FROM ( \n    SELECT \n    ST_Collect(the_geom) as the_geom \n    FROM chp04.voronoi_test_points \n  )\nas points); \n```"]