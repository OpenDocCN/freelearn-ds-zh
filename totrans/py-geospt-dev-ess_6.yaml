- en: Chapter 6. Analyzing Geographic Data
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章 分析地理数据
- en: 'At some point, after acquiring, preparing, and organizing data to fit your
    needs, you eventually get to the point where you can actually use this data for
    some greater good: to form queries, explore, answer questions, test hypotheses,
    and so on. In this chapter, you will develop some of these capabilities along
    with their application components, specifically:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在获取、准备和组织数据以适应你的需求之后，你最终会到达一个点，可以真正利用这些数据进行一些更大的好事：形成查询、探索、回答问题、测试假设等等。在本章中，你将开发一些这些能力及其应用组件，特别是：
- en: 'Create the analysis functionality:'
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建分析功能：
- en: Overlay summary and distance buffer for vector data
  id: totrans-3
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 矢量数据中的叠加汇总和距离缓冲区
- en: Zonal summary statistics for raster data
  id: totrans-4
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 栅格数据的区域汇总统计
- en: Add ways to access them through the user interface
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加通过用户界面访问它们的方式
- en: Creating the analysis module
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建分析模块
- en: 'We start by creating what we will call the `app/analyzer.py` module with the
    necessary imports. One in the `vector` folder:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先创建一个名为`app/analyzer.py`的模块，并添加必要的导入。在`vector`文件夹中也有一个：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'And one in the `raster` folder:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在`raster`文件夹中也有一个：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'As usual, we must make these new modules importable from their parent packages,
    to add the following import statement in both `vector/__init__.py` and `raster/__init__.py`:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如同往常，我们必须使这些新模块可以从它们的父包导入，因此需要在`vector/__init__.py`和`raster/__init__.py`中添加以下导入语句：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Analyzing data
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分析数据
- en: The first half of this chapter creates the analysis functionality, while the
    other half weaves the functionality into the application design. Let's begin by
    making the functionality. This includes overlap summary and buffer for vector
    data and zonal statistics for raster data.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的前半部分创建了分析功能，而后半部分将功能融入应用程序设计。让我们先创建功能。这包括矢量数据中的重叠汇总和缓冲区，以及栅格数据的区域统计。
- en: Vector data
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 矢量数据
- en: 'For vector data, we will focus on two commonly used analysis tools: overlap
    summary and buffer.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 对于矢量数据，我们将关注两个常用的分析工具：重叠汇总和缓冲区。
- en: Overlap summary
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 重叠汇总
- en: 'One of the most basic spatial analysis operations in a GIS is to summarize
    statistics for a layer of features that touches or overlaps another layer of features.
    Typical questions to warrant such analysis include: how many points fall within
    each country polygon, or what is the sum or average of their values for each country?
    This type of analysis is typically done using a *spatial join* tool, with the
    many-to-one option representing multiple matching features with a summary statistic.
    These summary statistics are then attached to the original country polygons. A
    spatial join is not an analysis in itself, it just does the number crunching that
    the user can later use to analyze, for instance, visually on a map or in a table
    graph. In my experience, this is one of the most common reasons for using spatial
    joins, as a preprocessing step, but it is still a crucial part of overlay analysis.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在GIS中，最基本的空间分析操作之一是对接触或重叠其他图层特征的要素层进行统计汇总。这类分析通常涉及的问题包括：每个国家多边形内有多少个点，或者每个国家的值总和或平均值是多少？这类分析通常使用*空间连接*工具来完成，其中多对一选项表示多个匹配特征与一个汇总统计。然后，这些汇总统计被附加到原始国家多边形上。空间连接本身不是一种分析，它只是进行用户可以用于后续分析（例如在地图或表格图中）的数值计算。根据我的经验，这是使用空间连接最常见的原因之一，作为预处理步骤，但它仍然是叠加分析的一个关键部分。
- en: 'The following screenshot shows a typical way that overlay analysis can be used
    to aggregate values and visualize patterns:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了叠加分析可以用来汇总值和可视化模式的一种典型方式：
- en: '![Overlap summary](img/5407OS_06_01.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![重叠汇总](img/5407OS_06_01.jpg)'
- en: 'Since our application is geared more toward less technical users, and we want
    to make everything as obvious as possible, we make this particular usage of spatial
    join into a tool of its own and give it a name that more appropriately describes
    the analysis end product: overlap summary. The tool has been assigned the data,
    to group the statistics into the data, containing the values that will be summarized,
    and a list of fieldname statistic tuples to be calculated in the output, also
    known as a **fieldmapping**. Valid statistic values are count, sum, max, min,
    and average. As an example of a fieldmapping, this tool expects that if we want
    the output file to calculate the count of major cities and the sum of their populations,
    we will write it as `[("city_id", "count"), ("city_pop", "sum")]`. Note that the
    fieldmapping follows the usual Python syntax with strings having quote marks around
    them, which is also how we input them through the user interface later in text.
    For detecting overlap, we use the Shapely module''s `intersects` operation. Also
    note that the use of Shapely''s less known `prep` function (imported as `supershapely`)
    gives incredible speedups for multiple repeated intersect comparisons on the same
    geometry.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的应用程序更多地面向非技术用户，并且我们希望尽可能使一切清晰明了，我们将这种特定的空间连接用法做成一个独立的工具，并给它一个更恰当地描述分析最终结果的名称：重叠摘要。该工具已被分配用于将统计分组到包含将被汇总的值的数据库中，以及一个要计算输出中的字段名统计元组列表，也称为
    **字段映射**。有效的统计值有计数、总和、最大值、最小值和平均值。作为一个字段映射的例子，该工具期望如果我们想让输出文件计算主要城市的数量和它们人口的总和，我们将写成
    `[("city_id", "count"), ("city_pop", "sum")]`。请注意，字段映射遵循通常的 Python 语法，字符串周围有引号，这也是我们稍后通过用户界面输入它们的方式。对于检测重叠，我们使用
    Shapely 模块的 `intersects` 操作。还请注意，使用 Shapely 不太为人所知的 `prep` 函数（导入为 `supershapely`）在相同几何形状上的多次重复相交比较中提供了惊人的加速。
- en: 'So, head into `vector/analyzer.py` and add the following function:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，进入 `vector/analyzer.py` 并添加以下函数：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Buffer
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 缓冲区
- en: 'If, in your analysis, you also want to include features that don''t necessarily
    overlap the grouping features but are within a certain distance, then buffering
    is a good tool to use. A buffer operation is one where a geometric feature is
    grown or shrunk by a specified distance. After expanding the geometries to the
    desired distance, one can then follow up with the previously implemented overlap
    summary tool and, this way, also include near-overlap features in the statistics.
    Refer to the following screenshot to see an example of a polygon buffer operation:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在你的分析中，你还想包括那些不一定与分组特征重叠但位于一定距离内的特征，那么缓冲区是一个很好的工具。缓冲操作是指通过指定距离扩展或缩小几何特征。在将几何形状扩展到所需距离后，可以随后使用之前实现的重叠摘要工具，这样也可以将接近重叠的特征包含在统计中。参考以下截图以查看多边形缓冲操作的示例：
- en: '![Buffer](img/5407OS_06_02.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![缓冲区](img/5407OS_06_02.jpg)'
- en: 'We implement this quite simply with Shapely''s `buffer` method, with positive
    numbers for growing and negative numbers for shrinking. To make it a bit more
    interesting, we let the user dynamically set the buffer distance based on an expression.
    The expression should take the form of a string representing Python code, referencing
    the feature as **feat**, which allows buffering based on one or more of its attributes
    or even math expressions. For instance, to buffer a layer of countries based on
    GDP per capita and scaled down for visibility, we may write something like: *(feat[''GDP'']
    / float(feat[''population''])) / 500.0*.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过 Shapely 的 `buffer` 方法非常简单地实现这一点，使用正数进行扩展，使用负数进行缩小。为了使其更有趣，我们允许用户根据表达式动态设置缓冲距离。该表达式应采用表示
    Python 代码的字符串形式，引用特征为 **feat**，这允许根据一个或多个属性或甚至数学表达式进行缓冲。例如，为了根据人均 GDP 和缩放以增强可见性来缓冲国家图层，我们可能写成：*(feat['GDP']
    / float(feat['population'])) / 500.0*。
- en: 'Inside `vector/analyzer.py`, add the following code:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `vector/analyzer.py` 中添加以下代码：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Raster data
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 栅格数据
- en: To analyze raster data in our lightweight application, we are somewhat constrained
    by the speed and capabilities that our main dependency PIL has to offer. Luckily,
    there are many hidden gems inside the PIL package, one of them being the `ImageStat`
    module that we use to implement zonal statistics analysis.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的轻量级应用程序中分析栅格数据时，我们多少受到主要依赖项 PIL 提供的速度和功能的限制。幸运的是，PIL 包内有许多隐藏的宝石，其中之一就是 `ImageStat`
    模块，我们用它来实现区域统计分析。
- en: Note
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Other useful functionalities from the PIL library can be found in its `ImageMath`
    module. This will allow us to produce an output raster based on a math expression
    combining one or more input raster layers. However, if your application is first
    and foremost meant for advanced analysis of raster data or satellite imagery,
    you may want to consider going the GDAL/NumPy/SciPy route. We return to some of
    these possibilities in the final chapter.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: PIL库中的其他有用功能可以在其`ImageMath`模块中找到。这将使我们能够根据一个或多个输入栅格层的数学表达式生成输出栅格。然而，如果你的应用程序主要是用于高级栅格数据或卫星图像分析，你可能想要考虑GDAL/NumPy/SciPy路线。我们将在最后一章中回到这些可能性。
- en: Zonal statistics
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 区域统计
- en: 'Zonal statistics is a common GIS tool that takes each category or zone from
    one raster and summarizes the values of overlapping cells from another raster.
    In a sense, zonal statistics is the raster equivalent of overlap summary. In our
    implementation, we return both a dictionary containing various statistics for
    each zone and a copy of the zonal raster, where the value for each zone is based
    on one of its global summary statistics. The user must specify which band from
    the zonal and value data to use, and set the outstat statistics option to one
    of: `mean`, `median`, `max`, `min`, `stdev`, `var`, `count`, or `sum`.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 区域统计是常见的GIS工具，它从每个栅格中提取每个类别或区域，并总结另一个栅格中重叠单元格的值。在某种程度上，区域统计是重叠摘要的栅格等效物。在我们的实现中，我们返回一个包含每个区域各种统计信息的字典和一个区域栅格的副本，其中每个区域的值基于其全局汇总统计信息之一。用户必须指定要使用区域数据和值数据中的哪个波段，并将outstat统计选项设置为以下之一：`mean`，`median`，`max`，`min`，`stdev`，`var`，`count`或`sum`。
- en: 'Inside `raster/analyser.py` write:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在`raster/analyser.py`中编写：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Weaving functionality into the user interface
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将功能集成到用户界面中
- en: Next, let's make the analysis functionality created so far accessible in the
    user interface of our application.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们使到目前为止创建的分析功能在我们的应用程序用户界面中可用。
- en: Layer-specific right-click functions
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图层特定的右键单击功能
- en: 'In [Chapter 5](ch05.html "Chapter 5. Managing and Organizing Geographic Data"),
    *Managing and Organizing Geographic Data*, we instructed our application that
    right-clicking a layer in the LayersPane give us a menu of actions to choose from
    that is specific to that particular layer. In the current chapter, the only layer-specific
    functionality we made is the `buffer` operation. Therefore, we add the buffer
    menu option to the `RightClickMenu_VectorLayer` class in `app/dialogues.py`. Remember
    to find and save an `app/icons/buffer.png` icon so that it can be displayed next
    to the menu''s buffer item:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第5章](ch05.html "第5章。管理和组织地理数据")中，我们指导我们的应用程序，在图层窗格中右键单击图层将给我们一个菜单，可以选择特定于该图层的操作。在本章中，我们唯一创建的图层特定功能是`buffer`操作。因此，我们将缓冲菜单选项添加到`app/dialogues.py`中的`RightClickMenu_VectorLayer`类中。请记住找到并保存一个`app/icons/buffer.png`图标，以便它可以在菜单的缓冲项旁边显示：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Defining the tool options windows
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义工具选项窗口
- en: Still in `app/dialogues.py`, we define the layer-specific tool options windows
    that should pop up. Since they are layer-specific, we add the LayerItem's data
    as a hidden option that the user shouldn't worry about setting. The only user
    input here is the buffer distance expression we introduced earlier based on the
    units of the data's coordinate reference system, which can be either positive
    for growing or negative for shrinking. An expression calculator may be a nice
    touch for the user to add here on their own.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 仍然在`app/dialogues.py`中，我们定义了应该弹出的图层特定工具选项窗口。由于它们是图层特定的，我们添加了LayerItem的数据作为隐藏选项，用户不需要担心设置。这里唯一的用户输入是我们之前基于数据坐标参考系统单位引入的缓冲距离表达式，可以是正数用于增长或负数用于缩小。表达式计算器可能是一个很好的用户自定义选项。
- en: '![Defining the tool options windows](img/5407OS_06_03.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![定义工具选项窗口](img/5407OS_06_03.jpg)'
- en: 'Here is the code for the mentioned functionality:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是所述功能的代码：
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Setting up the analysis tab
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置分析标签页
- en: 'Next, we focus on those tools that should be available in the top ribbon area.
    First, we go to `app/builder.py` in the initialization phase of the GUI class,
    add a new tab for analysis, and add toolbars and buttons for our remaining functionality,
    as shown in the following screenshot:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们关注那些应该可在顶部功能区中使用的工具。首先，我们在GUI类的初始化阶段进入`app/builder.py`，为分析添加一个新标签页，并添加工具栏和按钮以实现我们的剩余功能，如下面的截图所示：
- en: '![Setting up the analysis tab](img/5407OS_06_04.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![设置分析标签页](img/5407OS_06_04.jpg)'
- en: 'Here is the code to create the **Analyze** tab:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是创建**分析**标签页的代码：
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Defining the tool options window
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义工具选项窗口
- en: 'In the tool options window, for overlap summary, we define the standard way
    in `app/dialogues.py`. Note that the process of adding fieldname statistic tuples
    for the output should ideally be chosen from two drop-down lists (one for available
    fieldnames and one for available statistic types). Since we have no such double
    drop-down widget readily available, we instead settle for having the user spell
    it out as a tuple with two quote-enclosed strings, which, unfortunately, is not
    very user friendly. Using double drop-down lists can be an exercise for the reader
    to implement. Furthermore, since we have no way of visualizing the output data
    based on their attributes, this method is currently useless within the confines
    of our application:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在工具选项窗口中，对于重叠摘要，我们在`app/dialogues.py`中定义了标准方式。请注意，为输出添加字段名统计元组的理想过程应从两个下拉列表中选择（一个用于可用的字段名，一个用于可用的统计类型）。由于我们没有现成的这种双下拉小部件，我们改为让用户以两个引号括起来的字符串的形式将其拼写出来作为元组，这不幸地并不是非常用户友好。使用双下拉列表可以作为一个练习供读者实现。此外，由于我们没有根据它们的属性可视化输出数据的方法，这种方法目前在我们的应用程序中是无效的：
- en: '![Defining the tool options window](img/5407OS_06_05.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![定义工具选项窗口](img/5407OS_06_05.jpg)'
- en: 'Here is the code to implement the mentioned functionality:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是实现所述功能的代码：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'For the zonal statistics tool, we do the same:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 对于区域统计工具，我们做的是相同的：
- en: '![Defining the tool options window](img/5407OS_06_06.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![定义工具选项窗口](img/5407OS_06_06.jpg)'
- en: 'Here is the code to implement the mentioned functionality:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是实现所述功能的代码：
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'However, when it is time to process the zonal statistics results, we not only
    add the output raster as a layer, but also pop up a scrollable window displaying
    the summary statistics for all the zones. To create the scrollable text widget,
    Tkinter already has a prebuilt scrollable text widget (which for some odd reason
    is placed in a module of its own, imported here as `tkst`), so we use this:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当处理区域统计结果时，我们不仅添加了输出栅格作为图层，还弹出一个显示所有区域汇总统计的滚动窗口。为了创建可滚动的文本小部件，Tkinter已经有一个预构建的可滚动文本小部件（出于某种奇怪的原因，它放在一个自己的模块中，这里导入为`tkst`），所以我们使用这个：
- en: '[PRE11]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Summary
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we added the bare minimum of basic and commonly used GIS analysis
    tools. Specifically, we added a flexible buffer tool available when right-clicking
    on a vector layer, and an analysis tab with one button for overlap summary between
    vector data, and another button for zonal statistics between raster data.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们添加了最基本的常用GIS分析工具。具体来说，我们添加了一个在右键点击矢量图层时可以使用的灵活缓冲工具，以及一个包含一个用于矢量数据之间重叠摘要的按钮和一个用于栅格数据之间区域统计的按钮的分析标签页。
- en: However, this is only barely scratching the surface of the types of analyses
    one can do in a GIS application, and the fun part comes when you choose to take
    the application further and build additional functionalities. For instance, how
    you can link tools together to simplify the steps needed and create custom analysis
    tools that help you, or your intended target audience, become more efficient.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这仅仅只是触及了在GIS应用程序中可以进行的分析类型的一角，而有趣的部分在于当你选择将应用程序进一步发展并构建附加功能时。例如，你可以如何将工具链接起来以简化所需步骤，并创建帮助您或您的目标受众更高效的自定义分析工具。
- en: With the completion of the analysis component of our application, we are left
    with a very simple but functional GIS application that works, at least for demonstration
    purposes. In order for the application to be usable outside of our own development
    environment, especially to non-programmers, you must turn our attention to making
    it a self-contained application, which is what we will do in the next chapter.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们应用程序分析组件的完成，我们得到了一个非常简单但功能齐全的GIS应用程序，至少在演示目的上是可以工作的。为了让应用程序在我们的开发环境之外也能使用，尤其是对非程序员来说，我们必须将注意力转向将其打造成一个自包含的应用程序，这正是我们将在下一章中要做的。
