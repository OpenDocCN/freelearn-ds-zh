- en: Chapter 12. Analyzing Time-series
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第12章 分析时间序列
- en: A time-series is a sequence of data points ordered in time, often used in economics
    or, for example, in social sciences. The great advantage of collecting data over
    a long period of time compared to cross-sectional observations is that we can
    analyze the collected values of the exact same object over time instead of comparing
    different observations.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 时间序列是一系列按时间顺序排列的数据点，常用于经济学或例如社会科学。与横截面观测值相比，收集长时间数据的一个巨大优势是我们可以分析同一对象随时间收集的值，而不是比较不同的观测值。
- en: 'This special characteristic of the data requires new methods and data structures
    for time-series analysis. We will cover these in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 数据的这一特殊特性需要新的方法和数据结构来进行时间序列分析。我们将在本章中介绍这些内容：
- en: First, we learn how to load or transform observations into time-series objects
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，我们学习如何将观测值加载或转换成时间序列对象
- en: Then we visualize them and try to improve the plots by smoothing and filtering
    the observations
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后我们可视化它们，并尝试通过平滑和过滤观测值来改进图表
- en: Besides seasonal decomposition, we introduce forecasting methods based on time-series
    models, and we also cover methods to identify outliers, extreme values, and anomalies
    in time-series
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 除了季节分解，我们还介绍了基于时间序列模型的预测方法，同时也涵盖了识别时间序列中的异常值、极端值和异常的方法
- en: Creating time-series objects
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建时间序列对象
- en: Most tutorials on time-series analysis start with the `ts` function of the `stats`
    package, which can create time-series objects in a very straightforward way. Simply
    pass a vector or matrix of numeric values (time-series analysis mostly deals with
    continuous variables), specify the frequency of your data, and it's all set!
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数关于时间序列分析的教程都是从`stats`包的`ts`函数开始的，它可以非常直接地创建时间序列对象。只需传递一个数值向量或矩阵（时间序列分析主要处理连续变量），指定数据频率，然后一切就绪！
- en: The frequency refers to the natural time-span of the data. Thus, for monthly
    data, you should set it to 12, 4 for quarterly and 365 or 7 for daily data, depending
    on the most characteristic seasonality of the events. For example, if your data
    has a significant weekly seasonality, which is pretty usual in social sciences,
    it should be 7, but if the calendar date is the main differentiator, such as with
    weather data, it should be 365.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 频率指的是数据的自然时间跨度。因此，对于月度数据，你应该将其设置为12，季度数据为4，对于每日数据为365或7，具体取决于事件的最显著季节性。例如，如果你的数据具有显著的周季节性，这在社会科学中很常见，那么它应该是7，但如果日历日期是主要区分因素，例如与天气数据一样，那么它应该是365。
- en: 'In the forthcoming pages, let''s use daily summary statistics from the `hflights`
    dataset. First let''s load the related dataset and transform it to `data.table`
    for easy aggregation. We also have to create a date variable from the provided
    `Year`, `Month`, and `DayofMonth` columns:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几页中，我们将使用`hflights`数据集的每日汇总统计数据。首先，让我们加载相关数据集并将其转换为`data.table`以方便聚合。我们还需要从提供的`Year`、`Month`和`DayofMonth`列中创建一个日期变量：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now let''s compute the number of flights and the overall sum of arrival delays,
    number of cancelled flights and the average distance of the related flights for
    each day in 2011:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们计算2011年每一天的航班数量、总到达延误时间、取消航班数量以及相关航班的平均距离：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Visualizing time-series
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可视化时间序列
- en: 'This is in a very familiar data structure: 365 rows for each day in 2011 and
    five columns to store the four metrics for the dates stored in the first variable.
    Let''s transform that to a time-series object and plot it right away:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在一个非常熟悉的数据结构中：2011年每一天有365行，五列用于存储存储在第一个变量中的四个指标。让我们将其转换为时间序列对象并立即绘制：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![Visualizing time-series](img/2028OS_12_01.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![可视化时间序列](img/2028OS_12_01.jpg)'
- en: It was easy, right? We have just plotted several independent time-series on
    a line chart. But what's shown on the first plot? The *x* axis is indexed from
    1 to 365 because `ts` did not automatically identify that the first column stores
    our dates. On the other hand, we find the date transformed to timestamps on the
    *y* axis. Shouldn't the points form a linear line?
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 很简单，对吧？我们已经在折线图上绘制了几个独立的时间序列。但第一个图表上显示的是什么？由于`ts`没有自动识别第一列存储的是我们的日期，因此*x*轴从1到365进行索引。另一方面，我们在*y*轴上找到了转换为时间戳的日期。点不应该形成一条直线吗？
- en: 'This is one of the beauties of data visualization: a simple plot revealed a
    major issue with our data. It seems we have to sort the data by date:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是数据可视化的美妙之处：一个简单的图表揭示了我们的数据中的一个主要问题。看起来我们不得不按日期对数据进行排序：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![Visualizing time-series](img/2028OS_12_02.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![可视化时间序列](img/2028OS_12_02.jpg)'
- en: 'Much better! Now that the values are in the right order, we can focus on the
    actual time-series data one by one at a time. First let''s see how the number
    of flights looked from the first day of 2011 with a daily frequency:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在值已经按正确顺序排列，我们可以一次一个地关注实际的时间序列数据。首先让我们看看2011年第一天以每日频率的航班数量：
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![Visualizing time-series](img/2028OS_12_03.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![可视化时间序列](img/2028OS_12_03.jpg)'
- en: Seasonal decomposition
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 季节分解
- en: Well, it looks like the number of flights fluctuates a lot on weekdays, which
    is indeed a dominant characteristic of human-related activities. Let's verify
    that by identifying and removing the weekly seasonality by decomposing this time-series
    into the seasonal, trend, and random components with moving averages.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，看起来工作日的航班数量波动很大，这确实是与人类活动相关的主要特征。让我们通过分解这个时间序列为季节性、趋势和随机成分，并使用移动平均来识别和去除周季节性来验证这一点。
- en: 'Although this can be done manually by utilizing the `diff` and `lag` functions,
    there''s a much more straightforward way to do so with the `decompose` function
    from the `stats` package:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这可以通过利用`diff`和`lag`函数手动完成，但使用`stats`包中的`decompose`函数来做会更直接：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![Seasonal decomposition](img/2028OS_12_04.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![季节分解](img/2028OS_12_04.jpg)'
- en: Removing the spikes in the means of weekly seasonality reveals the overall trend
    of the number of flights in 2011\. As the *x* axis shows the number of weeks since
    January 1 (based on the frequency being 7), the peak interval between 25 and 35
    refers to the summertime, and the lowest number of flights happened on the 46th
    week – probably due to Thanksgiving Day.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 去除每周季节性均值中的峰值揭示了2011年航班数量的整体趋势。正如*x*轴所示，自1月1日以来的周数（基于频率为7）的峰值间隔在25到35之间指的是夏季，而第46周的航班数量最少——可能是因为感恩节。
- en: 'But the weekly seasonality is probably more interesting. Well, it''s pretty
    hard to spot anything on the preceding plot as the very same 7-day repetition
    can be seen 52 times on the seasonal plot. So, instead, let''s extract that data
    and show it in a table with the appropriate headers:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 但每周季节性可能更有趣。嗯，在先前的图表上很难找到任何东西，因为同样的7天重复可以在季节性图表上看到52次。所以，让我们提取这些数据，并用适当的标题在表格中显示：
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: So the seasonal effects (the preceding numbers representing the relative distance
    from the average) suggest that the greatest number of flights happened on Monday
    and the last two weekdays, while there is only a relatively small number of flights
    on Saturdays.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，季节性影响（前面的数字表示相对于平均值的相对距离）表明，航班数量最多的是星期一和最后两个工作日，而星期六的航班数量相对较少。
- en: 'Unfortunately, we cannot decompose the yearly seasonal component of this time-series,
    as we have data only for one year, and we need data for at least two time periods
    for the given frequency:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，我们无法分解这个时间序列的年度季节性成分，因为我们只有一年的数据，而我们至少需要两个时间周期的数据来给出给定的频率：
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: For more advanced seasonal decomposition, see the `stl` function of the `stats`
    package, which uses polynomial regression models on the time-series data. The
    next section will cover some of this background.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更高级的季节分解，请参阅`stats`包中的`stl`函数，它使用多项式回归模型对时间序列数据进行处理。下一节将涵盖一些这方面的背景知识。
- en: Holt-Winters filtering
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Holt-Winters 过滤
- en: 'We can similarly remove the seasonal effects of a time-series by Holt-Winters
    filtering. Setting the `beta` parameter of the `HoltWinters` function to `FALSE`
    will result in a model with exponential smoothing practically suppressing all
    the outliers; setting the `gamma` argument to `FALSE` will result in a non-seasonal
    model. A quick example:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过Holt-Winters过滤类似地去除时间序列的季节性影响。将`HoltWinters`函数的`beta`参数设置为`FALSE`将导致一个模型，其中指数平滑几乎抑制了所有异常值；将`gamma`参数设置为`FALSE`将导致一个非季节性模型。以下是一个快速示例：
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![Holt-Winters filtering](img/2028OS_12_05.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![Holt-Winters 过滤](img/2028OS_12_05.jpg)'
- en: 'The red line represents the filtered time-series. We can also fit a double
    or triple exponential model on the time-series by enabling the `beta` and `gamma`
    parameters, resulting in a far better fit:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 红线代表过滤后的时间序列。我们还可以通过启用`beta`和`gamma`参数，在时间序列上拟合双指数或三指数模型，从而得到更好的拟合：
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![Holt-Winters filtering](img/2028OS_12_06.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![Holt-Winters 过滤](img/2028OS_12_06.jpg)'
- en: 'As this model provides extremely similar values compared to our original data,
    it can be used to predict future values as well. For this end, we will use the
    `forecast` package. By default, the `forecast` function returns a prediction for
    the forthcoming 2*frequency values:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个模型与我们的原始数据相比提供了极其相似的价值，它可以用来预测未来的值。为此，我们将使用`forecast`包。默认情况下，`forecast`函数返回未来2*频率值的预测：
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'These are estimates for the first two weeks of 2012, where (besides the exact
    point predictions) we get the confidence intervals as well. Probably it''s more
    meaningful at this time to visualize these predictions and confidence intervals:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是2012年第一周和第二周的估计值，其中（除了精确的点预测外）我们还得到了置信区间。在这个时候，可视化这些预测和置信区间可能更有意义：
- en: '[PRE11]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![Holt-Winters filtering](img/2028OS_12_07.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![Holt-Winters滤波](img/2028OS_12_07.jpg)'
- en: The blue points shows the estimates for the 31 future time periods and the gray
    area around that covers the confidence intervals returned by the `forecast` function.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 蓝色点表示对31个未来时间段的估计，灰色区域覆盖了由`forecast`函数返回的置信区间。
- en: Autoregressive Integrated Moving Average models
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自回归积分移动平均模型
- en: We can achieve similar results with **Autoregressive Integrated Moving Average**
    (**ARIMA**) models. To predict future values of a time-series, we usually have
    to *stationarize* it first, which means that the data has a constant mean, variance,
    and autocorrelation over time. In the past two sections, we used seasonal decomposition
    and the Holt-Winters filter to achieve this. Now let's see how the generalized
    version of the **Autoregressive Moving Average** (**ARMA**) model can help with
    this data transformation.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用**自回归积分移动平均**（**ARIMA**）模型达到类似的结果。为了预测时间序列的未来值，我们通常必须首先对其进行**平稳化**，这意味着数据在时间上有恒定的均值、方差和自相关。在前两个部分中，我们使用了季节分解和Holt-Winters滤波器来实现这一点。现在让我们看看**自回归移动平均**（**ARMA**）模型的推广版本如何帮助进行这种数据转换。
- en: '*ARIMA(p, d, q)* actually includes three models with three non-negative integer
    parameters:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '*ARIMA(p, d, q)*实际上包括三个模型，有三个非负整数参数：'
- en: '*p* refers to the autoregressive part of the model'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*p*代表模型的自回归部分'
- en: '*d* refers to the integrated part'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*d*代表积分部分'
- en: '*q* refers to the moving average parts'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*q*代表移动平均部分'
- en: As ARIMA also includes an integrated (differencing) part over ARMA, it can deal
    with non-stationary time-series as well, as they naturally become stationary after
    differencing—in other words, when the *d* parameter is larger than zero.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 由于ARIMA模型也包括了ARMA模型上的一个积分（差分）部分，因此它也可以处理非平稳时间序列，因为它们在差分后自然变得平稳——换句话说，当*d*参数大于零时。
- en: 'Traditionally, choosing the best ARIMA model for a time-series is required
    to build multiple models with a variety of parameters and compare model fits.
    On the other hand, the `forecast` package comes with a very useful function that
    can select the best fitting ARIMA model for a time-series by running unit root
    tests and minimizing the **maximum-likelihood** (**ML**) and the **Akaike Information
    Criterion** (**AIC**) of the models:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，为时间序列选择最佳ARIMA模型需要构建具有各种参数的多个模型并比较模型拟合度。另一方面，`forecast`包提供了一个非常有用的函数，可以通过运行单位根测试并最小化模型的**最大似然**（**ML**）和**赤池信息量准则**（**AIC**）来选择最佳拟合的ARIMA模型：
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'It seems that the *AR(3)* model has the highest AIC with *AR(2)* seasonal effects.
    But checking the manual of `auto.arima` reveals that the information criteria
    used for the model selection were approximated due to the large number (more than
    100) of observations. Re-running the algorithm and disabling approximation returns
    a different model:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来*AR(3)*模型具有最高的AIC值，并且具有*AR(2)*季节性效应。但检查`auto.arima`的说明书发现，由于观测值数量（超过100）较多，用于模型选择的信度标准被近似了。重新运行算法并禁用近似会得到不同的模型：
- en: '[PRE13]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Although it seems that the preceding seasonal ARIMA model fits the data with
    a high AIC, we might want to build a real ARIMA model by specifying the *D* argument
    resulting in an integrated model via the following estimates:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然看起来先前的季节性ARIMA模型具有很高的AIC值，但我们可能希望通过指定*D*参数来构建一个真正的ARIMA模型，从而通过以下估计得到一个积分模型：
- en: '[PRE14]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![Autoregressive Integrated Moving Average models](img/2028OS_12_08.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![自回归积分移动平均模型](img/2028OS_12_08.jpg)'
- en: Although time-series analysis can sometimes be tricky (and finding the optimal
    model with the appropriate parameters requires a reasonable experience with these
    statistical methods), the preceding short examples proved that even a basic understanding
    of the time-series objects and related methods will usually provide some impressive
    results on the patterns of data and adequate predictions.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管时间序列分析有时可能很棘手（并且找到具有适当参数的最佳模型需要对这些统计方法有合理的经验），但前面的简短示例证明了即使对时间序列对象和相关方法有基本理解，通常也会在数据模式和适当预测方面提供一些令人印象深刻的结果。
- en: Outlier detection
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异常值检测
- en: 'Besides forecasting, another time-series related major task is identifying
    suspicious or abnormal data in a series of observations that might distort the
    results of our analysis. One way to do so is to build an ARIMA model and analyze
    the distance between the predicted and actual values. The `tsoutliers` package
    provides a very convenient way to do so. Let''s build a model on the number of
    cancelled flights in 2011:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 除了预测之外，另一个与时间序列相关的主要任务是识别一系列观测值中的可疑或异常数据，这些数据可能会扭曲我们的分析结果。这样做的一种方法是通过构建ARIMA模型并分析预测值和实际值之间的距离。`tsoutliers`包提供了一个非常方便的方式来做到这一点。让我们在2011年取消航班的数量上构建一个模型：
- en: '[PRE15]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'So now we can use an *ARIMA(1,1,2)* model and the `tso` function to highlight
    (and optionally remove) the outliers from our dataset:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，现在我们可以使用一个*ARIMA(1,1,2)*模型和`tso`函数来突出（并可选地移除）数据集中的异常值：
- en: Tip
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Please note that the following `tso` call can run for several minutes with a
    full load on a CPU core as it may be performing heavy computations in the background.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，以下`tso`调用可能需要几分钟才能在CPU核心上完全加载运行，因为它可能在后台执行大量计算。
- en: '[PRE16]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![Outlier detection](img/2028OS_12_09.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![异常值检测](img/2028OS_12_09.jpg)'
- en: 'Alternatively, we can run all the preceding steps in one go by automatically
    calling `auto.arima` inside `tso` without specifying any extra arguments besides
    the time-series object:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以通过在`tso`中自动调用`auto.arima`而无需指定除时间序列对象之外的任何额外参数，一次性运行所有前面的步骤：
- en: '[PRE17]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Anyway, the results show that all observations with a high number of cancelled
    flights are outliers and so should be removed from the dataset. Well, considering
    any day with many cancelled flights as outlier sounds really optimistic! But this
    is very useful information; it suggests that, for example, forecasting an outlier
    event is not manageable with the previously discussed methods.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，结果显示，所有具有大量取消航班观测值的观测值都是异常值，因此应该从数据集中移除。好吧，将具有许多取消航班的任何一天视为异常值听起来非常乐观！但这是非常有用的信息；它表明，例如，使用先前讨论的方法来预测异常事件是不可管理的。
- en: Traditionally, time-series analysis deals with trends and seasonality of data,
    and how to *stationarize* the time-series. If we are interested in deviations
    from normal events, some other methods need to be used.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，时间序列分析处理数据的趋势和季节性，以及如何*平稳化*时间序列。如果我们对正常事件的偏差感兴趣，则需要使用其他一些方法。
- en: Twitter recently published one of its R packages to detect anomalies in time-series.
    Now we will use its `AnomalyDetection` package to identify the preceding outliers
    in a much faster way. As you may have noticed, the `tso` function was really slow
    to run, and it cannot really handle large amount of data – while the `AnomalyDetection`
    package performs pretty well.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Twitter最近发布了一个R包，用于检测时间序列中的异常。现在我们将使用其`AnomalyDetection`包以更快的速度识别先前的异常值。正如你可能已经注意到的，`tso`函数运行速度非常慢，并且实际上无法处理大量数据——而`AnomalyDetection`包的表现相当不错。
- en: 'We can provide the input data as a vector of a `data.frame` with the first
    column storing the timestamps. Unfortunately, the `AnomalyDetectionTs` function
    does not really work well with `data.table` objects, so let''s revert to the traditional
    `data.frame` class:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将输入数据作为`data.frame`向量的输入，其中第一列存储时间戳。不幸的是，`AnomalyDetectionTs`函数与`data.table`对象配合得并不好，所以我们还是回到传统的`data.frame`类：
- en: '[PRE18]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now let''s load the package and plot the anomalies identified among the observations:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们加载这个包并绘制观测值中识别出的异常：
- en: '[PRE19]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '![Outlier detection](img/2028OS_12_10.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![异常值检测](img/2028OS_12_10.jpg)'
- en: The results are very similar to the previous plots, but there are two things
    to note that you might have already noticed. The computation was extremely quick
    and, on the other hand, this plot includes human-friendly dates instead of some
    lame indexes on the *x* axis.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 结果与前面的图非常相似，但有两点需要注意，你可能已经注意到了。计算速度极快，另一方面，这个图包含了人类友好的日期，而不是*x*轴上的一些无趣的索引。
- en: More complex time-series objects
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更复杂的时序对象
- en: The main limitation of the `ts` time-series R object class (besides the aforementioned
    *x* axis issue) is that it cannot deal with irregular time-series. To overcome
    this problem, we have several alternatives in R.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`ts`时序R对象类的主要局限性（除了前面提到的*x*轴问题之外）是它无法处理不规则时序。为了克服这个问题，我们在R中有几个替代方案。'
- en: 'The `zoo` package and its reverse dependent `xts` packages are `ts`-compatible
    classes with tons of extremely useful methods. For a quick example, let''s build
    a `zoo` object from our data, and see how it''s represented by the default plot:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`zoo`包及其反向依赖的`xts`包是`ts`兼容的类，拥有大量极其有用的方法。为了快速举例，让我们从我们的数据中构建一个`zoo`对象，并看看它如何通过默认的图表来表示：'
- en: '[PRE20]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '![More complex time-series objects](img/2028OS_12_11.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![更复杂的时序对象](img/2028OS_12_11.jpg)'
- en: As we have defined the `date` column to act as the timestamp of the observations,
    it's not shown here. The *x* axis has a nice human-friendly date annotation, which
    is really pleasant after having checked a bunch of integer-annotated plots in
    the previous pages.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经将`date`列定义为观测的时戳，因此这里没有显示。*x*轴有一个非常人性化的日期标注，这在检查了前面几页大量整数标注的图表之后，感觉非常愉快。
- en: 'Of course, `zoo` supports most of the `ts` methods, such as `diff`, `lag` or
    cumulative sums; these can be very useful for visualizing data velocity:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，`zoo`支持大多数`ts`方法，如`diff`、`lag`或累计总和；这些对于可视化数据速度非常有用：
- en: '[PRE21]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '![More complex time-series objects](img/2028OS_12_12.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![更复杂的时序对象](img/2028OS_12_12.jpg)'
- en: Here, the linear line for the **N** variable suggests that we do not have any
    missing values and our dataset includes exactly one data point per day. On the
    other hand, the steep elevation of the **Cancelled** line in February highlights
    that a single day contributed a lot to the overall number of cancelled flights
    in 2011.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，**N**变量的线性线表明我们没有缺失值，并且我们的数据集每天恰好包含一个数据点。另一方面，**取消**线在二月份的陡峭上升表明，某一天对2011年整体取消航班数量的贡献非常大。
- en: Advanced time-series analysis
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高级时序分析
- en: Unfortunately, this short chapter cannot provide a more detailed introduction
    to time-series analysis. To be honest, even two or three times the length of this
    chapter would not be enough for a decent tutorial, as time-series analysis, forecasting,
    and anomaly detection are one of the most complex topics of statistical analysis.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 很遗憾，这一简短的章节无法提供对时序分析的更详细介绍。说实话，即使将本章的长度增加到两三倍，也还不够进行一个不错的教程，因为时序分析、预测和异常检测是统计分析中最复杂的话题之一。
- en: But the good news is that there are plenty of great books on the topics! One
    of the best resources—and the ultimate free online tutorial on this subject—can
    be found at [https://www.otexts.org/fpp](https://www.otexts.org/fpp). This is
    a really practical and detailed online tutorial on forecasting and general time-series
    analysis, and I heartily recommend it to anyone who would like to build more complex
    and realizable time-series models in the future.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 但好消息是，关于这些主题有很多优秀的书籍！其中最好的资源——以及这个主题上最全面的免费在线教程——可以在[https://www.otexts.org/fpp](https://www.otexts.org/fpp)找到。这是一份非常实用且详细的在线教程，关于预测和一般时序分析，我强烈推荐给任何希望在未来构建更复杂和可实现的时序模型的人。
- en: Summary
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter focused on how to load, visualize, and model time-related data.
    Although we could not cover all aspects of this challenging topic, we discussed
    the most widely used smoothing and filtering algorithms, seasonal decompositions,
    and ARIMA models; we also computed some forecasts and estimates based on these.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 本章重点介绍了如何加载、可视化和建模与时间相关的数据。尽管我们无法涵盖这个具有挑战性的主题的所有方面，但我们讨论了最广泛使用的平滑和滤波算法、季节分解和ARIMA模型；我们还基于这些计算了一些预测和估计。
- en: 'The next chapter is somewhat similar to this one, as we will cover another
    domain-independent area on another important dimension of datasets: instead of
    when, we will focus on *where* the observations were captured.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章与这一章有些相似，因为我们将在数据集的另一个重要维度上覆盖另一个领域独立的区域：而不是关注“何时”，我们将关注观测是在哪里捕获的。
