- en: 'Appendix B: Assessments'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Chapter 1 – Exploring the IBM Quantum Tools
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Question 1
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Which Application contains your API token?
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Answer
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are two places to obtain your API token. The first is the **Account settings**
    view, where the API token is available and where you can regenerate a different
    token if needed. The other is on the main dashboard.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: Question 2
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Which device in your resources list has the fewest qubits?
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Answer
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The availability of the device with the fewest qubits will vary based on the
    quantum devices available. However, at the time of writing, there are systems
    with no less than 127 qubits. The next systems will be of sizes 133 qubits and
    higher. This is due to the recent shift to the IBM Quantum Platform to provide
    quantum utility systems (over 100 qubits).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Question 3
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Which Application would provide you a qubit map of a quantum system?
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: Answer
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **IBM Quantum Platform** provides the **Compute Resources** application
    view, which displays all available quantum systems.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 2 – Creating Quantum Circuits with IBM Quantum Composer
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Question 1
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: From the Composer, where would you find the time it took to run your circuit
    on a quantum computer?
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Answer
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You would find it in the **Status Timeline** view of the **Composer Jobs** view.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: Question 2
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: How would you remove or add a qubit to your circuit on the composer?
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: Answer
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You would click on a qubit and select either the **+** or the trashcan icon
    to add or remove a qubit from the circuit, respectively.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: Question 3
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: On which view would you specify which quantum system to run your circuit?
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: Answer
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You would use the **Setup and run** view, which is accessible from the **Composer**
    view, to select the system.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: Question 4
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Which sphere would be ideal to view the quantum state of three qubits in a single
    sphere?
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: Answer
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You would use the qsphere to represent multiple quantum states in a single sphere.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 3 – Introducing and Installing Qiskit
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Question 1
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In your own words, describe the difference between a kernel developer and an
    application developer.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: Answer
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In general, the kernel developer can be seen as a developer that creates the
    specific circuit for a quantum system. It is analogous to a classical assembly
    developer. An application developer would integrate a quantum algorithm into a
    classical application or workflow.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Question 2
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you wanted to obtain the unitary matrix of a circuit, which simulator would
    provide the unitary matrix result?
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Answer
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The unitary simulator from the Qiskit Aer library.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: Question 3
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Can you name and describe in your own words each of the five simulator categories
    that are provided by Aer?
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: Answer
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The details of each are described in the chapter; this question is to check
    that you have an intuitive understanding of each simulator. For example, a state
    vector simulator does not need a measurement as it only computes the final state
    of the circuit.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: Question 4
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Which module would you need to import to plot a histogram?
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: Answer
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Qiskit Visualization module.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 4 – Understanding Basic Quantum Computing Principles
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Question 1
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: How would you create a circuit that entangles two qubits where each qubit is
    different (that is, **01**, **10**)?
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: Answer
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can use the following code to create a circuit that entangles two qubits:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Question 2
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a circuit with a multi-qubit gate, such as a controlled-Hadamard gate.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: Answer
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The circuit will just need to be ensured to have two qubits and include a controlled
    Hadamard gate (**ch**). In the following example, the first qubit is the control
    and the second qubit is the target. We add a Hadamard gate to the control qubit
    to ensure we will get either a `0` or `1`; otherwise, the control will never be
    set:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Question 3
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create all 4 Bell states in a circuit.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: Answer
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The circuit will just need to have two qubits and include a controlled-X gate
    (`cx`), where the first argument is the control and the second is the target.
    In the following example, the first qubit is the control and the second qubit
    is the target. We add a Hadamard gate to the control qubit to ensure we will get
    either a `0` or `1`; otherwise, the control will never be set:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Subsequent circuits will just alter the direction of the **cx** gate’s control
    and target, and ensure that the Hadamard gate is on the same qubit as the control.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: Question 4
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What are the three quantum computation principles?
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: Answer
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The three quantum computation principles are superposition, interference, and
    entanglement. Superposition and interference are described in classical physics,
    and entanglement is described in quantum physics.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 5 – Understanding the Qubit
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Question 1
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Which would provide visual information about the phase of a qubit—the Bloch
    sphere or the qsphere?
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: Answer
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Both do. The Qiskit sphere (q-sphere) includes a checkbox to visualize the phase
    information. The Bloch sphere illustrates the phase by the position of the vector
    when it is out of phase, which is to say it is rotated about the *z* axis.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: Question 2
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Can you visualize multiple qubits on the Bloch sphere? If not, then describe
    why you wouldn’t.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: Answer
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: No, we can’t visualize multi-qubits on the Bloch sphere as we can on the qsphere.
    The Bloch sphere is generally leveraged to illustrate a single qubit vector position
    for a given state, whereas the qsphere includes the phase. To represent multiple
    qubits using the Bloch sphere, you will need to have one Bloch sphere for each
    qubit.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: Question 3
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Write out the tensor product of three-qubit states in all forms.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: Answer
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The resulting basis states for a three-qubit system are ![](img/B18420_15_001.png)
    .
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: Question 4
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What is the probability amplitude of a three-qubit system?
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: Answer
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The amplitude of a three-qubit system is ![](img/B18420_15_002.png), where *n*
    is the number of qubits, which results in ![](img/B18420_15_003.png).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 6 – Understanding Quantum Logic Gates
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Question 1
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For the multi-qubit gates, try flipping the Source and Target. Do you see a
    difference when you decompose the circuit?
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: Answer
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: No, there is no difference that can be seen, only that the source is now assigned
    to the opposite qubits.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: Question 2
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Decompose all the gates for both single- and multi-qubit circuits. What do you
    notice about how the universal gates are constructed?
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: Answer
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The single gates are now displayed by their respective basis gate, including
    rotation values, if any. Multi-qubit gates, such as the Toffoli gate, are also
    broken down into specific gates that are used to construct the operation of the
    Toffoli gate between the assigned qubits.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: Question 3
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Implement the Toffoli gate where the target is the center qubit of a three-qubit
    circuit.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: Answer
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the following code to implement the Toffoli gate where the target is the
    center qubit of a three-qubit circuit:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Question 4
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Decompose the Toffoli gate. How many gates in total are used to construct it?
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: Answer
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When decomposing the Toffoli gate down to Hadamard, T, T dagger, and CX gates,
    there are a total of 15 gates, and it runs 11 operations deep. It’s good to note
    that the depth might change if a more efficient way of composing the Toffoli gate
    is developed.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: Question 5
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Apply the Toffoli gate along with a Hadamard gate to a state vector simulator
    and compare the results to that from the Sampler primitive. What differences do
    you see and why?
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: Answer
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Sampler primitive, since it runs 1024 shots by default, will produce a result
    of approximately 50% `000` and 50% `001`, assuming placement of the Hadamard gate
    is in the first qubit. On the other hand, the state vector simulator, which only
    runs a single shot, will either result in the state `000` or `001`; the results
    of which will vary depending on the qubit in which you placed the Hadamard gate.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: Question 6
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you wanted to sort three qubits in the opposite direction, which gates would
    you use and in which order?
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: Answer
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can use the `swap` gate to switch the value of each qubit from one qubit
    to another (for an example of two qubits):'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Chapter 7 – Programming with Qiskit
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Question 1
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Construct a random quantum circuit with a width of `4` and a depth of `9`.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: Answer
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Question 2
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create another random quantum circuit with the same width as the circuit you
    created in *Question 1* and concatenate it so that it is added before the random
    quantum circuit you created.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: Answer
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Question 3
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Print the circuit properties of the concatenated quantum circuit from *Question
    3* and specify the total number of operators, not including any measurement operators.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: Answer
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Question 4
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a circuit with a parameterized R[Y] gate that would rotate by an angle
    of ![](img/B18420_07_009.png).
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: Answer
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Chapter 8 – Optimizing and Visualizing Quantum Circuits
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Question 1
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Can you name two components of the transpiler?
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: Answer
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Pass** and **PassManager**.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: Question 2
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Which component allows you to specify the passes to use?
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: Answer
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**PassManager** is used to specify which passes are used and which passes can
    communicate with other passes.'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: Question 3
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What is the default `optimization_level` value when running the transpile()
    function?
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: Answer
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Optimization level 1.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: Question 4
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Name the three Layout Selection Passes.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: Answer
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Trivial, Dense, and Sabre.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 9 – Simulating Quantum Systems and Noise Models
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Question 1
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Can you list all the simulators found in the Qiskit Aer module?
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: Answer
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The list of simulators can be generated using the `Aer.backends()` function.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: Question 2
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a qsphere representation of a qubit on the negative *Y* axis, creating
    the state ![](img/B18420_15_005.png), using only a single Hadamard gate along
    with the phase gates.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: Answer
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to accomplish this, you will need to set the qubit in a superposition
    state. This can be done using the Hadamard gate (H), which will place the qubit
    in the state ![](img/B18420_15_006.png). After that, we will have to run a phase
    shift from the ![](img/B18420_09_050.png) state to the ![](img/B18420_15_008.png)
    state, which would mean we need a phase gate to shift the state by a phase of
    ![](img/B18420_15_009.png), as follows:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Question 3
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When initializing a set of qubits in a circuit, what must the total probability
    across all states be?
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: Answer
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The sum of the squares of the total `param` values in the `initialize` function
    argument must add up to 1, as in the following example, where ![](img/B18420_09_022.png)
    is set twice. So, if you take the sum of the squares, it will be equal to 1:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Question 4
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Can you use the qsphere to visualize both the phase and probability information
    of a qubit?
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: Answer
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Yes, the phase is given by the color of the state vectors and the probability
    is visualized by the size of the tips of the state vectors. The larger the diameter,
    the higher the probability.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: Question 5
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What would happen if you set the depolarization error values close to 1?
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: Answer
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This will set the ![](img/B18420_15_011.png) value to `1`, therefore completely
    depolarizing the channel.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: Question 6
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you applied a readout error equally to all qubits, what results would you
    expect and why?
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: Answer
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When running on a simulator, rather than resulting in an ideal condition (no
    errors), you will instead see errors, where the significance of the errors is
    based on the set `ReadoutError()` parameters.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 10 – Suppressing and Mitigating Quantum Noise
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Question 1
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: List the three main error mitigation techniques used by the Qiskit Runtime service.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: Answer
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Minimal mitigation, medium mitigation, and heavy mitigation.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: Question 2
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Which resilience levels are used for error mitigation?
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: Answer
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Levels 0 through 2, where level 1 is the default.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: Question 3
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What other reversible gates could you use to fill in the idle time of a qubit
    using Dynamical Decoupling?
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: Answer
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Any reversible gate, `XGate` or `YGate`, for example.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: Question 4
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Which type of noise contributes to amplitude dampening of a qubit?
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: Answer
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Decoherence.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: Question 5
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Which type of noises contribute to dephasing of a qubit?
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: Answer
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: White noise, pink noise, and flux noise.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 11 – Understanding Quantum Algorithms
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Question 1
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Which algorithm would you use to determine whether an *n*-bit string is balanced?
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: Answer
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Deutsch-Jozsa algorithm can be used to determine whether a function is constant
    or balanced.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: Question 2
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Implement the **Bernstein-Vazirani** algorithm to find the state `170`.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: Answer
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To create the circuit, you need the binary representation of 170\. Then, after
    applying a Hadamard gate to all the qubits, except the ancilla qubit, to which
    you will first apply a NOT gate followed by a Hadamard gate, apply a CX gate to
    each qubit that is represented by the binary value for 170, which is represented
    by the value `10101010`. So, you would apply a CX gate to each of the odd qubits,
    where the control of each CX gate should be set to qubit `1`, `3`, `5`, and `7`
    and the target of each CX gate is the ancilla qubit. Then, apply a Hadamard gate
    followed by a measurement operator to all qubits except the ancilla qubit.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: Question 3
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: How many oracle functions are there?
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: Answer
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In general, most algorithms have one oracle function; however, there are some
    algorithms that require more than one, or multiple runs of a function, such as
    the Grover algorithm, which repeats the oracle and diffusion operator function
    based on the number of qubits of the circuit.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 12 – Applying Quantum Algorithms
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Question 1
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What other problems can you solve using periodic functions?
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: Answer
  id: totrans-211
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Quantum Fourier transform** (**QFT**) is one of the more popular algorithms
    to solve periodic functions.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: Question 2
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Implement QFT on a 5-qubit state—for example: ‘10110’.'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: Answer
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the same example in the book, simply extend another **swap** gate repetition
    by adding another qubit.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: Question 3
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using Grover’s algorithm, find the following states, ‘101’, ‘001’, and ‘010’.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: Answer
  id: totrans-219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Simply change the numerical value on the argument to the values above, then
    observe the change in the circuit’s oracle representing each of the three values.
    Since all are 3 qubits in length, the repetition will be the same for each value
    (just once).
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: Question 4
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: How many iterations of Grover’s diffusion operator would you need to run to
    find the state ![](img/B18420_15_012.png)?
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: Answer
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the following to determine the number of times to repeat the function, ![](img/B18420_15_013.png),
    where N is the number of qubits. Here, N=4.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: Question 5
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Rerun the Grover’s search example. Only repeat Grover’s diffusion operator twice
    and note the difference in the result. What do you see that is different? What
    would you expect to change if you ran it more than three times?
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: Answer
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The amplitude difference between the value we are searching for and the other
    values will vary differently, either increasingly or decreasingly.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 13 – Understanding Quantum Utility and Qiskit Patterns
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Question 1
  id: totrans-230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What are the four steps of Qiskit Patterns?
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: Answer
  id: totrans-232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Map, optimize, execute, and post-process.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: Question 2
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Which Qiskit Pattern handles mapping a quantum circuit to the hardware?
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: Answer
  id: totrans-236
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The optimization step handles mapping the circuit to the hardware.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 优化步骤处理将电路映射到硬件的过程。
- en: Question 3
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题3
- en: When encoding your problem to a quantum state, which Qiskit Pattern step are
    you on?
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 当您将问题编码成量子态时，您处于哪个Qiskit模式步骤？
- en: Answer
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 答案
- en: You are mapping the input values of your classical data into a quantum state.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 您正在将经典数据的输入值映射到量子态。
- en: Question 4
  id: totrans-242
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题4
- en: Why did we use a Sampler and not an Estimator primitive for the Grover example?
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么我们在Grover示例中使用了采样器而不是估计器原语？
- en: Answer
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 答案
- en: We did not have to use any observables to solve Grover’s algorithm. Simply returning
    the quasi-distribution of the results provided the answer.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不需要使用任何可观察量来解决Grover算法。只需返回结果的准分布就能提供答案。
- en: Join us on Discord
  id: totrans-246
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入我们的Discord
- en: 'Join our community’s Discord space for discussions with the author and other
    readers:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 加入我们社区的Discord空间，与作者和其他读者进行讨论：
- en: '[https://packt.link/3FyN1](Appendix_B.xhtml)'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/3FyN1](Appendix_B.xhtml)'
- en: '![](img/QR_Code2617625996838265934.png)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
  zh: '![](img/QR_Code2617625996838265934.png)'
