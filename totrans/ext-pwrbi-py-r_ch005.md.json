["```py\n    local({r <- getOption(\"repos\")\n      r[\"CRAN\"] <- \"https://cloud.r-project.org/\"\n      options(repos = r)\n    })\n    message(\"Default repo replaced with 'https://cloud.r-project.org/'\")\n    ```", "```py\n    library(tidyverse)\n    data(\"population\")\n    # Let’s have a look at the tibble\n    population\n    ```", "```py\n    population %>% \n      distinct(country) %>% \n      pull()\n    ```", "```py\n    nested_population_tbl <- population %>% \n      tidyr::nest( demographic_data = -country )\n    nested_population_tbl\n    ```", "```py\n    saveRDS(nested_population_tbl, \"nested_population_tbl.rds\")\n    ```", "```py\n    selected_country <- \"Sweden\"\n    nested_population_tbl %>% \n      # Get the row related to the selected country\n      filter( country == selected_country ) %>% \n      # Get the content of 'demografic_data' for\n      # that row. Note that it is a list\n      pull( demographic_data ) %>%\n      # Extract the 'demografic_data' tibble from\n      # the list (it has only 1 element)\n      pluck(1) %>% \n      # Now plot the time series declaring the date variable\n      # and the value one. \n      timetk::plot_time_series(\n        .date_var = year,\n        .value = population,\n        .title = paste0(\"Global population of \", selected_country),\n        .smooth = FALSE,     # --> remove the smooth line\n        .interactive = FALSE # --> generate a static plot\n      )\n    ```", "```py\n    nested_population_plots_tbl <- nested_population_tbl %>%\n      # Select a subset of countries\n      filter( country %in% c(\"Italy\", \"Sweden\", \"France\", \"Germany\") ) %>%\n      # Add a new column called 'plot' applying the plot_time_series\n      # function to the values of the demographic_data tibble (.x)\n      # for each country (.y) in the 'country' field.\n      # Do this thanks to the map2 function.\n      mutate( plot = map2( demographic_data, country, ~ timetk::plot_time_series(.data = .x, \n         .date_var = year,\n          .value = population,\n          .title = paste0(\"Global population of \", .y),\n          .smooth = FALSE,\n          .interactive = FALSE) )\n      ) %>%\n      # Return just the 'country' and 'plot' columns.\n      select( country, plot )\n    ```", "```py\n    # The index of list items corresponds to the country_id values                   # into the selected countries tibble.\n    plots_lst <- nested_population_plots_tbl$plot\n    # Serialize the list of plots\n    saveRDS(plots_lst, \"plots_lst.rds\")\n    ```", "```py\n    library(tidyverse)\n    project_folder <- \"C:/<your>/<absolute>/<project_folder>/<path>\"\n    deserialized_tbl <- readRDS( file.path(project_folder, \"nested_population_tbl.RDS\") )\n    ```", "```py\n    sweden_population_tbl <- deserialized_tbl %>% \n      filter( country == \"Sweden\" ) %>% \n      pull( demographic_data ) %>%\n      pluck(1)\n    sweden_population_tbl\n    ```", "```py\n    conda activate pbi_powerquery_env\n    ```", "```py\n    # Let's try to plot the time series for Sweden\n    selected_country = \"Sweden\"\n    x = nested_population_dict[selected_country].year\n    y = nested_population_dict[selected_country].population\n    # Create a figure object\n    fig_handle = plt.figure()\n    # Plot a simple line for each (x,y) point\n    plt.plot(x, y)\n    # Add a title to the figure\n    plt.title(\"Global population of \" + selected_country)\n    # Show the figure\n    fig_handle.show()\n    ```"]