["```py\n$ docker ps\n```", "```py\n    from airflow import DAG\n    from airflow.operators.bash import BashOperator\n    from datetime import datetime, timedelta\n    ```", "```py\n    default_args = {\n        'owner': 'airflow',\n        'depends_on_past': False,\n        'email': ['airflow@example.com'],\n        'email_on_failure': True,\n        'email_on_retry': True,\n        'retries': 1,\n        'retry_delay': timedelta(minutes=5),\n        'start_date': datetime(2023, 4, 12),\n        'end_date': datetime(2023, 4, 30),\n        'schedule_interval': '@daily\n    }\n    ```", "```py\n    with DAG(\n        'daily_ingestion_dag',\n        default_args=default_args,\n        description='A simple ETL job using Bash commands',\n    ) as dag:\n        t1 = BashOperator(\n                    task_id=\"t1\",\n                    bash_command=\"echo 'This is task no1 '\",\n                )\n        t2 = BashOperator(\n                    task_id=\"t2\",\n                    bash_command=\"echo 'This is task no2 '\",\n                )\n    t1 >> t2\n    ```", "```py\n[2023-04-12, 19:54:38 UTC] [ 1686 - airflow.hooks.subprocess.SubprocessHook ] {subprocess.py:74} INFO - Running command: ['bash', '-c', \"echo 'This is task no2 '\"]\n[2023-04-12, 19:54:38 UTC] [ 1686 - airflow.hooks.subprocess.SubprocessHook ] {subprocess.py:85} INFO - Output:\n[2023-04-12, 19:54:38 UTC] [ 1686 - airflow.hooks.subprocess.SubprocessHook ] {subprocess.py:92} INFO - This is task no2\n```", "```py\ndefault_args = {\n    'owner': 'airflow',\n    ...\n    'start_date': datetime(2023, 4, 12),\n    'end_date': datetime(2023, 4, 30),\n    'schedule_interval': '@daily\n}\n```", "```py\ndefault_args = {\n    'owner': 'airflow',\n    'depends_on_past': False,\n    'email': ['airflow@example.com'],\n    'email_on_failure': True,\n    'email_on_retry': True,\n    'retries': 1,\n    'retry_delay': timedelta(minutes=5),\n    'start_date': datetime(2023, 4, 12),\n    'end_date': datetime(2023, 4, 30),\n    'schedule_interval': '@daily,\n    'queue': 'bash_queue',\n    'pool': 'backfill',\n    'priority_weight': 10\n}\n```", "```py\n    from airflow import DAG\n    from airflow.operators.python_operator import PythonOperator\n    from datetime import datetime, timedelta\n    ```", "```py\n    default_args = {\n        'owner': 'airflow',\n        'depends_on_past': False,\n        'email': ['airflow@example.com'],\n        'email_on_failure': True,\n        'email_on_retry': True,\n        'retries': 1,\n        'retry_delay': timedelta(minutes=5),\n        'start_date': datetime(2023, 4, 2),\n        'end_date': datetime(2023, 4, 10),\n        'schedule_interval': '@daily'\n    }\n    ```", "```py\n    def my_task(execution_date=None):\n        print(f\"execution_date:{execution_date}\")\n    ```", "```py\n    with DAG(\n        'historical_data_dag',\n        default_args=default_args,\n        description='A simple ETL job using Python commands to retrieve historical data',\n    ) as dag:\n        p1 = PythonOperator(\n                    task_id=\"p1\",\n                    python_callable=my_task,\n            )\n    p1\n    ```", "```py\n[2023-04-12 20:10:25,205] [ ... ] {logging_mixin.py:115} INFO - execution_date:2023-04-02T00:00:00+00:00\n[2023-04-12 20:10:25,205] [ ... ] {python.py:173} INFO - Done. Returned value was: None\n```", "```py\n2023-04-12 20:10:25,276] [ ... ] {logging_mixin.py:115} INFO - execution_date:2023-04-03T00:00:00+00:00\n[2023-04-12 20:10:25,276] [...] {python.py:173} INFO - Done. Returned value was: None\n```", "```py\ndef my_task(execution_date=None):\n    print(f\"execution_date:{execution_date}\")\n```", "```py\n    default_args = {\n        'owner': 'airflow',\n        'depends_on_past': False,\n        'retries': 1,\n        'retry_delay': timedelta(minutes=5),\n        'start_date': datetime(2023, 4, 2),\n        'schedule_interval': '@daily'\n    }\n    ```", "```py\n    default_args = {\n        'owner': 'airflow',\n        'depends_on_past': False,\n        'retries': 1,\n        'retry_delay': timedelta(minutes=5),\n        'start_date': datetime(2023, 4, 2),\n        'schedule_interval': '0 22 * * 1-5'\n    }\n    ```", "```py\n    default_args = {\n        'owner': 'airflow',\n        'depends_on_past': False,\n        'retries': 1,\n        'retry_delay': timedelta(minutes=5),\n        'start_date': datetime(2023, 4, 2),\n        'schedule_interval': timedelta(days=1)\n    }\n    ```", "```py\ndefault_args = {\n    'owner': 'airflow',\n    'depends_on_past': False,\n    'retries': 1,\n    'retry_delay': timedelta(minutes=5),\n    'start_date': datetime(2023, 4, 2),\n    'schedule_interval': '@daily'\n}\n```", "```py\nschedule_interval='0 2 * * *'\n```", "```py\npendulum.now(\"Europe/Paris\")\n```", "```py\nschedule_interval = pendulum.now(\"Europe/Paris\")\n```"]