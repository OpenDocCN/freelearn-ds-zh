- en: Chapter 11. Using Force
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Using gravity and charge
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating momentum
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting the link constraint
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using force to assist visualization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manipulating force
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a force-directed graph
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Use the force, Luke!
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A master's words of wisdom to his apprentice
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In this chapter we are going to cover one of the most fascinating aspects of
    D3: force. Force simulation is one of the most awe-inspiring techniques that you
    can add to your visualization. Through a number of highly interactive and fully-functional
    examples, we will help you explore not only the typical application of D3 force
    (for example, the force-directed graph), but also other essential aspects of force
    manipulation.'
  prefs: []
  type: TYPE_NORMAL
- en: D3 force simulation support was created not as a separate capability, but rather
    as an additional D3 layout. As we have mentioned in [Chapter 9](ch09.html "Chapter 9. Lay
    Them Out"), *Lay Them Out*, D3 layouts are non-visual data oriented layout management
    programs designed to be used with different visualization. Force layout was originally
    created for the purpose of implementing a specific visualization type called **force-directed
    graph**. Its implementation uses standard **verlet integration** based particle
    motion simulation with support for simple constraints.
  prefs: []
  type: TYPE_NORMAL
- en: 'In other words, D3 implements a numeric method that is capable of loosely simulating
    Newton''s equation of motion on particle level and with simple constraints simulated
    as links between particles. This kind of layout, of course, was ideal in implementing
    a force-directed graph; however, we will also discover through recipes in this
    chapter that force layout is capable of generating many other interesting visualization
    effects due to its flexibility in custom force manipulation. The application of
    the techniques introduced in this chapter go even beyond the data visualization
    realm and has practical applications in many other domains, for example, user
    interface design. Of course, we will also cover the classical application of force
    layout: the force-directed graph in this chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: Using gravity and charge
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe we will introduce you to the first two fundamental forces: gravity
    and charge. As we have mentioned before, one objective of force layout''s design
    is to loosely simulate Newton''s equation of motion with particles, and one major
    feature of this simulation is the force of charge. Additionally, force layout
    also implements pseudo gravity or more accurately a weak geometric constraint
    typically centered on the SVG that can be leveraged to keep your visualization
    from escaping the SVG canvas. In the following example we will learn how these
    two fundamental, and sometimes opposing forces, can be leveraged to generate various
    effects with a particle system.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your local copy of the following file in your web browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter11/gravity-and-charge.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter11/gravity-and-charge.html).'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the following example we will experiment with the force layout gravity and
    charge settings so you can better understand different opposing forces involved
    and their interaction:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This recipe generates a force-enabled particle system that is capable of operating
    in the modes shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/2162OS_11_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Force Simulation Modes
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we get our hands dirty with the preceding code example, let's first dig
    a little bit deeper into the concept of gravity, charge, and friction so we can
    have an easier time understanding all the magic number settings we will use in
    this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Charge
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Charge is specified to simulate mutual n-body forces among the particles. A
    negative value results in a mutual node repulsion while a positive value results
    in a mutual node attraction. The default value for charge is `-30`. Charge value
    can also be a function that will be evaluated for each node whenever the force
    simulation starts.
  prefs: []
  type: TYPE_NORMAL
- en: Gravity
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Gravity simulation in force layout is not designed to simulate physical gravity,
    which can be simulated using positive charge. Instead, it is implemented as a
    weak geometric constraint similar to a virtual spring connecting to each node
    from the center of the layout. The default gravitational strength is set to `0.1`.
    As the nodes get further away from the center the gravitational strength gets
    stronger in linear proportion to the distance while near the center of the layout
    the gravitational strength is almost zero. Hence, gravity will always overcome
    repulsive charge at some point, therefore, preventing nodes from escaping the
    layout.
  prefs: []
  type: TYPE_NORMAL
- en: Friction
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Friction in D3 force layout does not represent a standard physical coefficient
    of friction, but it is rather implemented as a velocity decay. At each tick of
    the simulation particle, velocity is scaled down by a specified friction. Thus
    a value of `1` corresponds to a frictionless environment while a value of `0`
    freezes all particles in place since they lose their velocity immediately. Values
    outside the range of `[0, 1]` are not recommended since they might destabilize
    the layout.
  prefs: []
  type: TYPE_NORMAL
- en: Alright, now with the dry definition behind us, let's take a look at how these
    forces can be leveraged to generate interesting visual effects.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up zero force layout
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First, we simply set up force layout with neither gravity nor charge. The force
    layout can be created using the `d3.layout.force` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we set the size of the layout to the size of our SVG graphic, which is
    a common approach though not mandatory. In some use cases you might find it useful
    to have a layout larger or smaller than your SVG. At the same time, we disable
    both gravity and charge while setting the `friction` to `0.7`. With this setting
    in place, we then create additional nodes represented as `svg:circle` on SVG whenever
    the user moves the mouse:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Node object was created initially on line A with its coordinates set to the
    current mouse location. Like all other D3 layouts, force layout is not aware and
    has no visual elements. Therefore, every node we create needs to be added to the
    layout''s nodes array on line C and removed when visual representation of these
    nodes was removed on line B. On line D we call the `start` function to start force
    simulation. With zero gravity and charge the layout essentially lets us place
    a string of nodes with our mouse movement as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up zero force layout](img/2162OS_11_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: No Gravity or Charge
  prefs: []
  type: TYPE_NORMAL
- en: Setting up mutual repulsion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the next mode, we will set the charge to a negative value while still keeping
    gravity to zero in order to generate a mutual repulsive force field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'These lines tell force layout to apply `-60` charge on each node and update
    the node''s `{x, y}` coordinate accordingly, based on the simulation result on
    each tick. However, only doing this is still not enough to move the particles
    on SVG since the layout has no knowledge of the visual elements. Next, we need
    to write some code to connect the data that are being manipulated by force layout
    to our graphical elements. Following is the code to do that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Here, we register a `tick` event listener function that updates all circle elements
    to its new position based on the force layout's calculation. Tick listener is
    triggered on each tick of the simulation. At each tick we set the `cx` and `cy`
    attribute to be the `x` and `y` values on `d`. This is because we have already
    bound the node object as datum to these circle elements, therefore, they already
    contain the new coordinates calculated by force layout. This effectively establishes
    force layout's control over all the particles.
  prefs: []
  type: TYPE_NORMAL
- en: 'Other than `tick`, force layout also supports some other events:'
  prefs: []
  type: TYPE_NORMAL
- en: '`start`: Triggered when simulation starts'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tick`: Triggered on each tick of the simulation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`end`: Triggered when simulation ends'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This force setting generates the following visual effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up mutual repulsion](img/2162OS_11_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Mutual Repulsion
  prefs: []
  type: TYPE_NORMAL
- en: Setting up mutual attraction
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When we change the charge to a positive value, it generates mutual attraction
    among the particles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This generates the following visual effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up mutual attraction](img/2162OS_11_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Mutual Attraction
  prefs: []
  type: TYPE_NORMAL
- en: Setting up gravity
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When we turn on gravity and turn off charge then it generates a similar effect
    as the mutual attraction; however, you can notice the linear scaling of gravitational
    pull as the mouse moves away from the center:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'With gravity alone this recipe generates the following effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up gravity](img/2162OS_11_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Gravity
  prefs: []
  type: TYPE_NORMAL
- en: Using gravity with repulsion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Finally, we can turn on both gravity and mutual repulsion. The result is an
    equilibrium of forces that keeps all particles somewhat stable neither escaping
    the layout nor colliding with each other:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is what this force equilibrium looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using gravity with repulsion](img/2162OS_11_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Gravity with Repulsion
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Verlet integration: [http://en.wikipedia.org/wiki/Verlet_integration](http://en.wikipedia.org/wiki/Verlet_integration)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Scalable, Versatile and Simple Constrained Graph Layout: [http://www.csse.monash.edu.au/~tdwyer/Dwyer2009FastConstraints.pdf](http://www.csse.monash.edu.au/~tdwyer/Dwyer2009FastConstraints.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Physical simulation: [http://www.gamasutra.com/resource_guide/20030121/jacobson_pfv.htm](http://www.gamasutra.com/resource_guide/20030121/jacobson_pfv.htm)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The content of this chapter is inspired by Mike Bostock''s brilliant talk on
    D3 Force: [http://mbostock.github.io/d3/talk/20110921/](http://mbostock.github.io/d3/talk/20110921/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 10](ch10.html "Chapter 10. Interacting with your Visualization"),
    *Interacting with your Visualization*, for more details on how to interact with
    the mouse in D3'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'D3 Force Layout API document for more details on force layout: [https://github.com/mbostock/d3/wiki/Force-Layout](https://github.com/mbostock/d3/wiki/Force-Layout)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating momentum
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In our previous recipe we have touched upon force layout node object and its
    `{x, y}` attributes, which determine where a node locates on the layout. In this
    recipe we will discuss another interesting aspect of physical motion simulation:
    momentum. D3 force layout has built-in support for momentum simulation which relies
    on the `{px, py}` attributes on the node object. Let''s see how this can be done
    in the example described in this recipe.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your local copy of the following file in your web browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter11/momentum-and-friction.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter11/momentum-and-friction.html).'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe we will modify the previous recipe by first disabling both gravity
    and charge then giving newly added node some initial velocity. As a result now
    the faster you move the mouse higher the initial velocity and momentum will be
    for each node. Here is the code to do that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This recipe generates a particle system with initial directional velocity proportional
    to the user''s mouse movement as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/2162OS_11_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Momentum
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The overall structure of this recipe is very similar to the previous one. It
    also generates particles as the user moves the mouse around. Moreover, once the
    force simulation starts, the particle position is fully controlled by force layout
    in its `tick` event listener function. However, in this recipe we have turned
    off both gravity and charge so that we can focus more clearly on momentum alone.
    We left some friction so the velocity decay making simulation look more realistic.
    Here is our force layout configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The major difference in this recipe is that we keep track of not only the current
    mouse position, but also the previous mouse position. Additionally, whenever the
    user moves the mouse we generate a node object containing the current location
    `{x, y}` as well as the previous location `{px, py}`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Since user mouse location is sampled on fixed interval, the faster the user
    moves the mouse the further apart these two positions will be. This property plus
    the directional information gained from these two positions are nicely translated
    automatically by force layout into initial momentum for each particle we create
    as we have demonstrated in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Besides the `{x, y, px, py}` attributes we have discussed so far, force layout
    node object also supports some other useful attributes that we will list here
    for your reference:'
  prefs: []
  type: TYPE_NORMAL
- en: '`index`: Zero-based index of the node within the nodes array.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`x`: The x-coordinate of the current node position.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`y`: The y-coordinate of the current node position.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`px`: The x-coordinate of the previous node position.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`py`: The y-coordinate of the previous node position.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fixed`: A Boolean indicating if the node position is locked.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`weight`: The node weight; the number of associated links. Links are used to
    connect nodes in a force layout, which we will cover in depth in the next recipe.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Interacting with mouse events* recipe in [Chapter 10](ch10.html "Chapter 10. Interacting
    with your Visualization"), *Interacting with your Visualization*, for more details
    on how to interact with the mouse in D3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: D3 Force Layout Nodes API for more details on force layout node attributes [https://github.com/mbostock/d3/wiki/Force-Layout#wiki-nodes](https://github.com/mbostock/d3/wiki/Force-Layout#wiki-nodes)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting the link constraint
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So far we have covered some important aspects of the force layout such as gravity,
    charge, friction, and momentum. In this recipe we will discuss another critical
    functionality: links. As we have mentioned in the introduction section, D3 force
    layout implements a scalable simple graph constraint, and in this recipe we will
    demonstrate how link constraint can be leveraged in conjunction with other forces.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your local copy of the following file in your web browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter11/link-constraint.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter11/link-constraint.html).'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, whenever the user clicks their mouse we will generate a force-directed
    ring of particles constrained by links between nodes. Here is how it is implemented:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This recipe generates force-directed particle rings on a mouse click as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/2162OS_11_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Force-Directed Particle Rings
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Link constraint adds another useful dimension to force assisted visualization.
    In this recipe we set up our force layout with the following parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Besides gravity, charge, and friction, this time we have two additional parameters:
    link distance and link strength. Both parameters are exclusively link related:'
  prefs: []
  type: TYPE_NORMAL
- en: '`linkDistance`: Could be a constant or a function; defaults to 20 pixels. Link
    distances are evaluated when the layout starts, and it is implemented as weak
    geometric constraints. For each tick of the layout, the distance between each
    pair of linked nodes is computed and compared to the target distance; the links
    are then moved towards each other or away from each other.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`linkStength`: Could be a constant or a function; defaults to 1\. Link strength
    sets the strength (rigidity) of links with value in the range of `[0, 1]`. Link
    strength is also evaluated on layout start.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When the user clicks their mouse, a random number of nodes are being created
    and put under force layout''s control similar to what we have done in the previous
    recipes. The major addition in this recipe is the link creation and its control
    logic is shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `createLinks` function, `n-1` link objects were created connecting a
    set of nodes into a ring (for loop on line A). Each link object must have two
    attributes specified as `source` and `target`, telling force layout which pair
    of nodes are connected by this link object. Once created, we decided to visualize
    the links in this recipe using `svg:line` element (line B). We will see in the
    next recipe that this does not have to always be the case. As a matter of fact,
    you can use pretty much anything; you can imagine to visualize (including hiding
    them, but retain the links for layout computation) the links as long as it makes
    sense for the audience of your visualization. After that we also need to add link
    objects to force layout''s links array (on line C) so they can be put under force
    layout''s control. Finally, we need to translate the positioning data generated
    by force layout to SVG implementation in the `tick` function for each link similar
    to what we did for the nodes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'As we can see here, D3 force layout has again done most of the heavy lifting,
    therefore, all we need to do is simply set `{x1, y1}` and `{x2, y2}` on the `svg:line`
    elements in the `tick` function. For reference, the following screenshot is what
    a link object looks like after it has been manipulated by force layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/2162OS_11_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Link Object
  prefs: []
  type: TYPE_NORMAL
- en: 'One last additional technique worth mentioning in this recipe is force-enabled
    dragging. All nodes generated by this recipe are "draggable" and force layout
    automatically re-computes all forces and constraints as user drags the rings around
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/2162OS_11_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Dragging with Force Layout
  prefs: []
  type: TYPE_NORMAL
- en: 'D3 force layout has dragging built-in, hence, this fancy effect is quite easily
    achieved by simply calling `force.drag` on the `svg:circle` selection (line D):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Scalable, Versatile and Simple Constrained Graph Layout: [http://www.csse.monash.edu.au/~tdwyer/Dwyer2009FastConstraints.pdf](http://www.csse.monash.edu.au/~tdwyer/Dwyer2009FastConstraints.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`force.links()`: [https://github.com/mbostock/d3/wiki/Force-Layout#wiki-links](https://github.com/mbostock/d3/wiki/Force-Layout#wiki-links)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`force.linkDistance()`: [https://github.com/mbostock/d3/wiki/Force-Layout#wiki-linkDistance](https://github.com/mbostock/d3/wiki/Force-Layout#wiki-linkDistance)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`force.linkStrength()`: [https://github.com/mbostock/d3/wiki/Force-Layout#wiki-linkStrength](https://github.com/mbostock/d3/wiki/Force-Layout#wiki-linkStrength)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`force.drag`: [https://github.com/mbostock/d3/wiki/Force-Layout#wiki-drag](https://github.com/mbostock/d3/wiki/Force-Layout#wiki-drag)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using force to assist visualization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far we have learned to use force layout visualizing particles and links similar
    to how you would use force layout in its classic application, the forced-directed
    graph. This kind of visualization is what force layout was designed for in the
    first place. However, this is by no means the only way to utilize force in your
    visualization. In this recipe we will explore techniques that I call force-assisted
    visualization. With this technique you can add some randomness and arbitrariness
    into your visualization by leveraging force.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your local copy of the following file in your web browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter11/arbitrary-visualization.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter11/arbitrary-visualization.html).'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe we will generate bubbles on user mouse click. The bubbles are
    made of `svg:path` elements filled with gradient color. The `svg:path` elements
    are not strictly controlled by force layout though they are influenced by force,
    therefore, giving them the randomness required to simulate a bubble in real-life:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This recipe generates force assisted bubbles on user mouse click as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/2162OS_11_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Force Assisted Bubbles
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe is built on top of what we have done in the previous recipe, therefore,
    its overall approach is quite similar to the last recipe in which we created force
    controlled particle rings on user mouse click. The major difference between this
    recipe and the last one is in this one we decided to use `d3.svg.line` generator
    to create the `svg:path` element that outlines our bubbles instead of using `svg:circle`
    and `svg:line`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'On line A we created a line generator with `basis-closed` interpolation mode
    since this gives us the smoothest outline for our bubble. Whenever user clicks
    the mouse a `svg:path` element was created connecting all nodes (line C). Additionally,
    we also fill the bubble with our pre-defined gradient to give it a nice glow (line
    B). Finally, we also need to implement the force based positioning in the `tick`
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: In the `tick` function we simply re-invoke the line generator function to update
    the `d` attribute for each path thus animating the bubbles using force layout
    computation.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'SVG Gradients and Patterns: [http://www.w3.org/TR/SVG/pservers.html](http://www.w3.org/TR/SVG/pservers.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using line generator* recipe in [Chapter 7](ch07.html "Chapter 7. Getting
    into Shape"), *Getting into Shape*, for more information on D3 line generator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manipulating force
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far we have explored many interesting aspects and applications of D3 force
    layout; however, in all of these prior recipes we simply apply force layout's
    computation (gravity, charge, friction, and momentum) directly to our visualization.
    In this recipe we will go one step further to implement custom force manipulation,
    hence creating our own type of force.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this recipe we will first generate five sets of colored particles then we
    assign corresponding colors and categorical force pull to user''s touch, hence
    pulling only the particles that match the color. Since this recipe is a bit complex,
    I will give an example here: if I touch the visualization with my first finger
    it will generate a blue circle and pull all blue particles to that circle, while
    my second touch will generate an orange circle and only pull the orange particles.
    This type of force manipulation is commonly referred to as categorical multi-foci.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your local copy of the following file in your web browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter11/multi-foci.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter11/multi-foci.html).'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here is how you can achieve this in code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'This recipe generates multi-categorical foci on touch as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/2162OS_11_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Multi-Categorical Foci on Touch
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first step of this recipe is to create colored particles and standard force
    equilibrium between gravity and repulsion. All node objects contain separate color
    and type ID attributes (line A and B) so they can be easily identified later.
    Next, we need to create a `svg:circle` element on user touch to represent the
    touch point:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the touch point is identified, all custom force magic is implemented in
    the `tick` function. Now, let''s take a look at the `tick` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The first new concept we encounter here is the alpha parameter. Alpha is an
    internal cooling parameter used by force layout. Alpha starts with `0.1` and moves
    towards `0` as layout ticks. In simpler terms the higher the alpha value the more
    chaotic the forces are and as alpha approaches `0` the layout becomes more stable.
    In this implementation we leverage the alpha value to make our custom force implementation
    cool down in synchronous with other built-in forces, since the movements of the
    particles are calculated with `k` coefficient (a derivative of alpha) on line
    C and D moving them closer to the matching touch point.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Interacting with a multi-touch device* recipe in [Chapter 10](ch10.html
    "Chapter 10. Interacting with your Visualization"), *Interacting with your Visualization*,
    for more information on D3 multi-touch support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a force-directed graph
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At last, we will show how to implement a force-directed graph, the classic application
    of D3 force layout. However, we believe with all the techniques and knowledge
    you have gained so far from this chapter implementing force-directed graph should
    feel quite straightforward.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your local copy of the following file in your web browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter11/force-directed-graph.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter11/force-directed-graph.html).'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe we will visualize the flare data set as a force-directed tree
    (tree is a special type of graph):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'This recipe visualizes hierarchical flare data set as a force-directed tree:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/2162OS_11_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Force-Directed Graph (Tree)
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we can already see, this recipe is pretty short and a quarter of the code
    was actually devoted to data processing. This is due to the fact that force-directed
    graph is what force layout was designed for in the first place. Thus there is
    really not much to do other than simply apply the layout with correct data structure.
    First, we flatten the hierarchical data set in flatten function (line A) since
    this is what force layout expects. Second, we leverage the `d3.layout.tree.links`
    function to generate proper linkage between tree nodes. The `d3.layout.tree.links`
    function returns an array of link objects representing links from parent to child
    for each given node object, in other words, builds the tree structure. Once the
    data is properly formatted the rest of this recipe applies standard force layout
    usage with hardly any customization at all.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Building a tree* recipe in [Chapter 9](ch09.html "Chapter 9. Lay Them Out"),
    *Lay Them Out*, for more information on D3 tree layout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For more information on force-directed graphs, visit the site: [http://en.wikipedia.org/wiki/Force-directed_graph_drawing](http://en.wikipedia.org/wiki/Force-directed_graph_drawing)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
