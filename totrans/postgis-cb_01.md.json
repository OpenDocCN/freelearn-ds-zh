["```py\n $ cd ~/postgis_cookbook/data/chp01/ $ head -n 5 firenews.csv\n```", "```py\n $ psql -U me -d postgis_cookbook \n      postgis_cookbook=> CREATE EXTENSION postgis; \n      postgis_cookbook=> CREATE SCHEMA chp01; \n      postgis_cookbook=> CREATE TABLE chp01.firenews \n      ( \n        x float8, \n        y float8, \n        place varchar(100), \n        size float8, \n        update date, \n        startdate date, \n        enddate date, \n        title varchar(255), \n        url varchar(255), \n        the_geom geometry(POINT, 4326) \n      ); \n```", "```py\n postgis_cookbook=> COPY chp01.firenews (\n x, y, place, size, update, startdate, \n enddate, title, url\n ) FROM '/tmp/firenews.csv' WITH CSV HEADER;\n```", "```py\n postgis_cookbook=> SELECT COUNT(*) FROM chp01.firenews; \n```", "```py\n postgis_cookbook=# SELECT f_table_name, \n f_geometry_column, coord_dimension, srid, type \n FROM geometry_columns where f_table_name = 'firenews';\n```", "```py\n postgis_cookbook=> UPDATE chp01.firenews \n SET the_geom = ST_SetSRID(ST_MakePoint(x,y), 4326); \n      postgis_cookbook=> UPDATE chp01.firenews \n SET the_geom = ST_PointFromText('POINT(' || x || ' ' || y || ')',\n                                      4326); \n```", "```py\n postgis_cookbook=# SELECT place, ST_AsText(the_geom) AS wkt_geom \n FROM chp01.firenews ORDER BY place LIMIT 5; \n```", "```py\n postgis_cookbook=> CREATE INDEX idx_firenews_geom\n ON chp01.firenews USING GIST (the_geom); \n```", "```py\n $ cd ~/postgis_cookbook/data/chp01/ $ head -n 5 Global_24h.csv\n```", "```py\n       <OGRVRTDataSource> \n         <OGRVRTLayer name=\"Global_24h\"> \n         <SrcDataSource>Global_24h.csv</SrcDataSource> \n         <GeometryType>wkbPoint</GeometryType> \n         <LayerSRS>EPSG:4326</LayerSRS> \n           <GeometryField encoding=\"PointFromColumns\"\n            x=\"longitude\" y=\"latitude\"/> \n         </OGRVRTLayer> \n       </OGRVRTDataSource>\n```", "```py\n $ ogrinfo global_24h.vrt Global_24h -fid 1 \n```", "```py\n $ ogr2ogr -f PostgreSQL -t_srs EPSG:3857\n PG:\"dbname='postgis_cookbook' user='me' password='mypassword'\"\n -lco SCHEMA=chp01 global_24h.vrt -where \"satellite='T'\" \n -lco GEOMETRY_NAME=the_geom\n```", "```py\n $ pg_dump -t chp01.global_24h --schema-only -U me postgis_cookbook \n\n      CREATE TABLE global_24h ( \n        ogc_fid integer NOT NULL, \n        latitude character varying, \n        longitude character varying, \n        brightness character varying, \n        scan character varying, \n        track character varying, \n        acq_date character varying, \n        acq_time character varying, \n        satellite character varying, \n        confidence character varying, \n        version character varying, \n        bright_t31 character varying, \n        frp character varying, \n        the_geom public.geometry(Point,3857) \n      );\n```", "```py\n postgis_cookbook=# SELECT f_geometry_column, coord_dimension,\n srid, type FROM geometry_columns \n WHERE f_table_name = 'global_24h';\n```", "```py\n postgis_cookbook=# SELECT count(*) FROM chp01.global_24h; \n```", "```py\n postgis_cookbook=# SELECT ST_AsEWKT(the_geom)\n      FROM chp01.global_24h LIMIT 1;\n```", "```py\n $ ogr2ogr global_24h.shp global_24h.vrt\n```", "```py\n $ shp2pgsql -G -I global_24h.shp\n        chp01.global_24h_geographic > global_24h.sql\n```", "```py\n $ head -n 20 global_24h.sql\n```", "```py\n $ psql -U me -d postgis_cookbook -f global_24h.sql\n```", "```py\n postgis_cookbook=# SELECT f_geography_column,   coord_dimension,\n      srid, type FROM geography_columns   \n      WHERE f_table_name = 'global_24h_geographic';\n```", "```py\n $ ogrinfo PG:\"dbname='postgis_cookbook' user='me'\n        password='mypassword'\" chp01.global_24h_geographic -fid 1\n```", "```py\n $ ogr2ogr -f PostgreSQL -sql \"SELECT ISO2, \n      NAME AS country_name FROM wborders WHERE REGION=2\" -nlt \n      MULTIPOLYGON PG:\"dbname='postgis_cookbook' user='me'\n      password='mypassword'\" -nln africa_countries \n      -lco SCHEMA=chp01 -lco GEOMETRY_NAME=the_geom wborders.shp\n```", "```py\n postgis_cookbook=# SELECTST_AsText(the_geom) AS the_geom, bright_t31 FROM chp01.global_24h ORDER BY bright_t31 DESC LIMIT 100;\n```", "```py\n postgis_cookbook=# SELECT ST_AsText(f.the_geom) \n      AS the_geom, f.bright_t31, ac.iso2, ac.country_name\n FROM chp01.global_24h as f JOIN chp01.africa_countries as ac ON ST_Contains(ac.the_geom, ST_Transform(f.the_geom, 4326)) ORDER BY f.bright_t31 DESCLIMIT 100;\n```", "```py\n $ ogr2ogr -f GeoJSON -t_srs EPSG:4326 warmest_hs.geojson\n      PG:\"dbname='postgis_cookbook' user='me' password='mypassword'\" -sql \"\n      SELECT f.the_geom as the_geom, f.bright_t31, \n             ac.iso2, ac.country_name\n      FROM chp01.global_24h as f JOIN chp01.africa_countries as ac\n      ON ST_Contains(ac.the_geom, ST_Transform(f.the_geom, 4326))\n      ORDER BY f.bright_t31 DESC LIMIT 100\"\n```", "```py\n $ ogr2ogr -t_srs EPSG:4326 -f CSV -lco GEOMETRY=AS_XY \n      -lco SEPARATOR=TAB warmest_hs.csv PG:\"dbname='postgis_cookbook' \n       user='me' password='mypassword'\" -sql \"\n       SELECT f.the_geom, f.bright_t31,\n         ac.iso2, ac.country_name \n       FROM chp01.global_24h as f JOIN chp01.africa_countries as ac \n       ON ST_Contains(ac.the_geom, ST_Transform(f.the_geom, 4326)) \n       ORDER BY f.bright_t31 DESC  LIMIT 100\"\n```", "```py\n$ ogr2ogr --formats\n```", "```py\nPG:\"dbname='postgis_cookbook' user='me' password='mypassword'\"\n```", "```py\n $ ogr2ogr -f PostgreSQL PG:\"dbname='postgis_cookbook' \n      user='me' password='mypassword'\" -lco SCHEMA=chp01 global_24h.vrt \n      -lco OVERWRITE=YES -lco GEOMETRY_NAME=the_geom -nln hotspots\n```", "```py\n $ ogr2ogr -f PostgreSQL -sql \"SELECT ISO2, NAME AS country_name \n      FROM wborders\" -nlt MULTIPOLYGON PG:\"dbname='postgis_cookbook' \n      user='me' password='mypassword'\" -nln countries \n      -lco SCHEMA=chp01 -lco OVERWRITE=YES \n      -lco GEOMETRY_NAME=the_geom wborders.shp\n```", "```py\n postgis_cookbook=> SELECT c.country_name, MIN(c.iso2) \n      as iso2, count(*) as hs_count FROM chp01.hotspots as hs \n      JOIN chp01.countries as c ON ST_Contains(c.the_geom, hs.the_geom) \n      GROUP BY c.country_name ORDER BY c.country_name;\n```", "```py\n $ ogr2ogr -f CSV hs_countries.csv \n      PG:\"dbname='postgis_cookbook' user='me' password='mypassword'\"\n      -lco SCHEMA=chp01 -sql \"SELECT c.country_name, MIN(c.iso2) as iso2, \n      count(*) as hs_count FROM chp01.hotspots as hs \n      JOIN chp01.countries as c ON ST_Contains(c.the_geom, hs.the_geom) \n      GROUP BY c.country_name ORDER BY c.country_name\" postgis_cookbook=> COPY (SELECT c.country_name, MIN(c.iso2) as iso2, \n      count(*) as hs_count FROM chp01.hotspots as hs JOIN chp01.countries as c ON ST_Contains(c.the_geom, hs.the_geom) GROUP BY c.country_name ORDER BY c.country_name) \n      TO '/tmp/hs_countries.csv' WITH CSV HEADER;\n```", "```py\n        #!/bin/bash \n        while IFS=\",\" read country iso2 hs_count \n        do \n          echo \"Generating shapefile $iso2.shp for country \n          $country ($iso2) containing $hs_count features.\" \n          ogr2ogr out_shapefiles/$iso2.shp\n          PG:\"dbname='postgis_cookbook' user='me' password='mypassword'\"\n          -lco SCHEMA=chp01 -sql \"SELECT ST_Transform(hs.the_geom, 4326), \n          hs.acq_date, hs.acq_time, hs.bright_t31 \n          FROM chp01.hotspots as hs JOIN chp01.countries as c \n          ON ST_Contains(c.the_geom, ST_Transform(hs.the_geom, 4326))  \n          WHERE c.iso2 = '$iso2'\" done < hs_countries.csv \n```", "```py\n chmod 775 export_shapefiles.sh mkdir out_shapefiles $ ./export_shapefiles.sh Generating shapefile AL.shp for country \n        Albania (AL) containing 66 features. Generating shapefile DZ.shp for country \n        Algeria (DZ) containing 361 features. ...\n Generating shapefile ZM.shp for country \n        Zambia (ZM) containing 1575 features. Generating shapefile ZW.shp for country \n        Zimbabwe (ZW) containing 179 features.\n```", "```py\n        @echo off \n        for /f \"tokens=1-3 delims=, skip=1\" %%a in (hs_countries.csv) do ( \n          echo \"Generating shapefile %%b.shp for country %%a \n                (%%b) containing %%c features\" \n          ogr2ogr .\\out_shapefiles\\%%b.shp \n          PG:\"dbname='postgis_cookbook' user='me' password='mypassword'\" \n          -lco SCHEMA=chp01 -sql \"SELECT ST_Transform(hs.the_geom, 4326), \n          hs.acq_date, hs.acq_time, hs.bright_t31 \n          FROM chp01.hotspots as hs JOIN chp01.countries as c \n          ON ST_Contains(c.the_geom, ST_Transform(hs.the_geom, 4326)) \n          WHERE c.iso2 = '%%b'\" \n        ) \n```", "```py\n >mkdir out_shapefiles >export_shapefiles.bat \"Generating shapefile AL.shp for country \n       Albania (AL) containing 66 features\" \"Generating shapefile DZ.shp for country \n       Algeria (DZ) containing 361 features\" ... \"Generating shapefile ZW.shp for country \n       Zimbabwe (ZW) containing 179 features\"\n```", "```py\n postgis_cookbook=# CREATE TABLE chp01.hs_uploaded ( ogc_fid serial NOT NULL, acq_date character varying(80), acq_time character varying(80), bright_t31 character varying(80), iso2 character varying, upload_datetime character varying, shapefile character varying, the_geom geometry(POINT, 4326), CONSTRAINT hs_uploaded_pk PRIMARY KEY (ogc_fid) );\n```", "```py\n $ brew install findutils \n```", "```py\n        #!/bin/bash \n        for f in `find out_shapefiles -name \\*.shp -printf \"%f\\n\"` \n        do \n          echo \"Importing shapefile $f to chp01.hs_uploaded PostGIS\n            table...\" #, ${f%.*}\" \n          ogr2ogr -append -update  -f PostgreSQL\n          PG:\"dbname='postgis_cookbook' user='me'\n          password='mypassword'\" out_shapefiles/$f \n          -nln chp01.hs_uploaded -sql \"SELECT acq_date, acq_time,\n          bright_t31, '${f%.*}' AS iso2, '`date`' AS upload_datetime,  \n         'out_shapefiles/$f' as shapefile FROM ${f%.*}\" \n        done \n```", "```py\n $ chmod 775 import_shapefiles.sh $ ./import_shapefiles.sh Importing shapefile DO.shp to chp01.hs_uploaded PostGIS table\n      ... Importing shapefile ID.shp to chp01.hs_uploaded PostGIS table\n      ... Importing shapefile AR.shp to chp01.hs_uploaded PostGIS table\n      ......\n```", "```py\n        @echo off \n        for %%I in (out_shapefiles\\*.shp*) do ( \n          echo Importing shapefile %%~nxI to chp01.hs_uploaded\n          PostGIS table... \n\n          ogr2ogr -append -update  -f PostgreSQL\n          PG:\"dbname='postgis_cookbook' user='me'\n          password='password'\" out_shapefiles/%%~nxI \n          -nln chp01.hs_uploaded -sql \"SELECT acq_date, acq_time, \n          bright_t31, '%%~nI' AS iso2, '%date%' AS upload_datetime, \n          'out_shapefiles/%%~nxI' as shapefile FROM %%~nI\" \n        ) \n```", "```py\n >import_shapefiles.bat Importing shapefile AL.shp to chp01.hs_uploaded PostGIS table... Importing shapefile AO.shp to chp01.hs_uploaded PostGIS table... Importing shapefile AR.shp to chp01.hs_uploaded PostGIS table......\n```", "```py\n postgis_cookbook=# SELECT upload_datetime,\n      shapefile, ST_AsText(wkb_geometry)\n      FROM chp01.hs_uploaded WHERE ISO2='AT'; \n```", "```py\n $ ogrinfo PG:\"dbname='postgis_cookbook' user='me'\n      password='mypassword'\"\n      chp01.hs_uploaded -where \"iso2='AT'\"\n```", "```py\nogr2ogr -append -update  -f PostgreSQL PG:\"dbname='postgis_cookbook' user='me' password='mypassword'\" out_shapefiles/$f -nln chp01.hs_uploaded -sql \"SELECT acq_date, acq_time, bright_t31, '${f%.*}' AS iso2, '`date`' AS upload_datetime, 'out_shapefiles/$f' as shapefile FROM ${f%.*}\" \n```", "```py\n $ shp2pgsql -I -d -s 4326 -W LATIN1 -g the_geom countries.shp\n      chp01.countries > countries.sql $ psql -U me -d postgis_cookbook -f countries.sql\n```", "```py\n $ ogr2ogr -f PostgreSQL PG:\"dbname='postgis_cookbook' user='me'\n      password='mypassword'\"\n      -lco SCHEMA=chp01 countries.shp -nlt MULTIPOLYGON -lco OVERWRITE=YES\n      -lco GEOMETRY_NAME=the_geom\n```", "```py\n postgis_cookbook=> SELECT subregion,\n        ST_Union(the_geom) AS the_geom, SUM(pop2005) AS pop2005\n        FROM chp01.countries GROUP BY subregion;\n```", "```py\n $ pgsql2shp -f subregions.shp -h localhost -u me -P mypassword\n      postgis_cookbook \"SELECT MIN(subregion) AS subregion, \n      ST_Union(the_geom) AS the_geom, SUM(pop2005) AS pop2005 \n      FROM chp01.countries GROUP BY subregion;\" \n\n      Initializing... \n      Done (postgis major version: 2). \n      Output shape: Polygon \n      Dumping: X [23 rows]. \n```", "```py\n $ sudo apt-get install osm2pgsql\n```", "```py\n $ osm2pgsqlosm2pgsql SVN version 0.80.0 (32bit id space)\n```", "```py\n postgres=# CREATE DATABASE rome OWNER me; postgres=# \\connect rome; rome=# create extension postgis;\n```", "```py\n $ sudo apt-get update $ sudo apt-get install postgresql-contrib-9.6 $ psql -U me -d romerome=# CREATE EXTENSION hstore;\n```", "```py\n $ osm2pgsql -d rome -U me --hstore map.osm osm2pgsql SVN version 0.80.0 (32bit id space)Using projection\n      SRS 900913 (Spherical Mercator)Setting up table: \n      planet_osm_point...All indexes on planet_osm_polygon created \n      in 1sCompleted planet_osm_polygonOsm2pgsql took 3s overall\n```", "```py\n rome=# SELECT f_table_name, f_geometry_column,\n      coord_dimension, srid, type FROM geometry_columns;\n```", "```py\n rome=# CREATE VIEW rome_trees AS SELECT way, tags \n FROM planet_osm_polygon WHERE (tags -> 'landcover') = 'trees';\n```", "```py\nSELECT way, tags FROM planet_osm_polygon WHERE (tags -> 'landcover') = 'trees';\n```", "```py\n $ shp2pgsql -I -d -s 4326 -W LATIN1 -g the_geom countries.shp\n      chp01.countries > countries.sql $ psql -U me -d postgis_cookbook -f countries.sql\n```", "```py\n $ gdalinfo worldclim/tmax09.bil Driver: EHdr/ESRI .hdr Labelled Files: worldclim/tmax9.bil             worldclim/tmax9.hdr\n Size is 2160, 900 Coordinate System is: GEOGCS[\"\"WGS 84\"\",\n        DATUM[\"\"WGS_1984\"\",\n          SPHEROID[\"\"WGS 84\"\",6378137,298.257223563,\n            AUTHORITY[\"\"EPSG\"\",\"\"7030\"\"]],\n          TOWGS84[0,0,0,0,0,0,0],\n          AUTHORITY[\"\"EPSG\"\",\"\"6326\"\"]],\n        PRIMEM[\"\"Greenwich\"\",0,\n          AUTHORITY[\"\"EPSG\"\",\"\"8901\"\"]],\n        UNIT[\"\"degree\"\",0.0174532925199433,\n        AUTHORITY[\"\"EPSG\"\",\"\"9108\"\"]],\n      AUTHORITY[\"\"EPSG\"\",\"\"4326\"\"]]\n      Origin = (-180.000000000000057,90.000000000000000) Pixel Size = (0.166666666666667,-0.166666666666667) Corner Coordinates:        Upper Left (-180.0000000, 90.0000000) (180d 0'' 0.00\"\"W, 90d\n                                               0'' 0.00\"\"N)\n        Lower Left (-180.0000000, -60.0000000) (180d 0'' 0.00\"\"W, 60d\n                                                0'' 0.00\"\"S)\n        Upper Right ( 180.0000000, 90.0000000) (180d 0'' 0.00\"\"E, 90d\n                                                0'' 0.00\"\"N)\n        Lower Right ( 180.0000000, -60.0000000) (180d 0'' 0.00\"\"E, 60d \n                                                 0'' 0.00\"\"S)\n        Center ( 0.0000000, 15.0000000) ( 0d 0'' 0.00\"\"E, 15d\n                                          0'' 0.00\"\"N)\n Band 1 Block=2160x1 Type=Int16, ColorInterp=Undefined Min=-153.000 Max=441.000 NoData Value=-9999\n```", "```py\n $ raster2pgsql -I -C -F -t 100x100 -s 4326\n      worldclim/tmax01.bil chp01.tmax01 > tmax01.sql $ psql -d postgis_cookbook -U me -f tmax01.sql\n```", "```py\n $ raster2pgsql -I -C -M -F -t 100x100 worldclim/tmax01.bil \n      chp01.tmax01 | psql -d postgis_cookbook -U me -f tmax01.sql\n```", "```py\n $ pg_dump -t chp01.tmax01 --schema-only -U me postgis_cookbook\n      ...\n      CREATE TABLE tmax01 (\n        rid integer NOT NULL,\n        rast public.raster,\n        filename text,\n        CONSTRAINT enforce_height_rast CHECK (\n          (public.st_height(rast) = 100)\n        ),\n        CONSTRAINT enforce_max_extent_rast CHECK (public.st_coveredby\n          (public.st_convexhull(rast), ''0103...''::public.geometry)\n        ),\n        CONSTRAINT enforce_nodata_values_rast CHECK (\n          ((public._raster_constraint_nodata_values(rast)\n            )::numeric(16,10)[] = ''{0}''::numeric(16,10)[])\n          ),\n        CONSTRAINT enforce_num_bands_rast CHECK (\n          (public.st_numbands(rast) = 1)\n        ),\n        CONSTRAINT enforce_out_db_rast CHECK (\n          (public._raster_constraint_out_db(rast) = ''{f}''::boolean[])\n          ),\n        CONSTRAINT enforce_pixel_types_rast CHECK (\n          (public._raster_constraint_pixel_types(rast) = \n           ''{16BUI}''::text[])\n          ),\n        CONSTRAINT enforce_same_alignment_rast CHECK (\n          (public.st_samealignment(rast, ''01000...''::public.raster)\n        ),\n        CONSTRAINT enforce_scalex_rast CHECK (\n          ((public.st_scalex(rast))::numeric(16,10) = \n            0.166666666666667::numeric(16,10))\n           ),\n        CONSTRAINT enforce_scaley_rast CHECK (\n          ((public.st_scaley(rast))::numeric(16,10) = \n            (-0.166666666666667)::numeric(16,10))\n          ),\n        CONSTRAINT enforce_srid_rast CHECK ((public.st_srid(rast) = 0)),\n        CONSTRAINT enforce_width_rast CHECK ((public.st_width(rast) = 100))\n      );\n```", "```py\n postgis_cookbook=# SELECT * FROM raster_columns;\n```", "```py\n postgis_cookbook=# SELECT count(*) FROM chp01.tmax01;\n```", "```py\n count ------- 198 (1 row)\n```", "```py\n gdalinfo PG\":host=localhost port=5432 dbname=postgis_cookbook\n      user=me password=mypassword schema='chp01' table='tmax01'\"\n```", "```py\n gdalinfo PG\":host=localhost port=5432 dbname=postgis_cookbook\n      user=me password=mypassword schema='chp01' table='tmax01' mode=2\"\n```", "```py\n $ ogr2ogr temp_grid.shp PG:\"host=localhost port=5432 \n      dbname='postgis_cookbook' user='me' password='mypassword'\" \n      -sql \"SELECT rid, filename, ST_Envelope(rast) as the_geom \n      FROM chp01.tmax01\"\n```", "```py\n SELECT * FROM (\n        SELECT c.name, ST_Value(t.rast,\n          ST_Centroid(c.the_geom))/10 as tmax_jan FROM chp01.tmax01 AS t \n        JOIN chp01.countries AS c \n        ON ST_Intersects(t.rast, ST_Centroid(c.the_geom))\n      ) AS foo \n      ORDER BY tmax_jan LIMIT 10;\n```", "```py\n$ gdalinfo --formats\n```", "```py\n$ raster2pgsql -I -C -F -t 100x100 -s 4326 worldclim/tmax01.bil chp01.tmax01 > tmax01.sql\n```", "```py\ngdalinfo PG\":host=localhost port=5432 dbname=postgis_cookbook user=me password=mypassword schema='chp01' table='tmax01' mode=2\"\n```", "```py\n $ raster2pgsql -d -I -C -M -F -t 100x100 -s 4326 \n      worldclim/tmax*.bil chp01.tmax_2012 > tmax_2012.sql $ psql -d postgis_cookbook -U me -f tmax_2012.sql\n```", "```py\n postgis_cookbook=# SELECT r_raster_column, srid,\n      ROUND(scale_x::numeric, 2) AS scale_x, \n      ROUND(scale_y::numeric, 2) AS scale_y, blocksize_x, \n      blocksize_y, num_bands, pixel_types, nodata_values, out_db \n      FROM raster_columns where r_table_schema='chp01' \n      AND r_table_name ='tmax_2012'; \n```", "```py\n SELECT rid, (foo.md).* \n      FROM (SELECT rid, ST_MetaData(rast) As md \n      FROM chp01.tmax_2012) As foo;\n```", "```py\n postgis_cookbook=# SELECT COUNT(*) AS num_raster, \n      MIN(filename) as original_file FROM chp01.tmax_2012      GROUP BY filename ORDER BY filename;\n```", "```py\n SELECT REPLACE(REPLACE(filename, 'tmax', ''), '.bil', '') AS month, \n      (ST_VALUE(rast, ST_SetSRID(ST_Point(12.49, 41.88), 4326))/10) AS tmax \n      FROM chp01.tmax_2012 \n      WHERE rid IN (\n        SELECT rid FROM chp01.tmax_2012 \n        WHERE ST_Intersects(ST_Envelope(rast),\n              ST_SetSRID(ST_Point(12.49, 41.88), 4326))\n      )\n      ORDER BY month;\n```", "```py\n $ gdalbuildvrt -separate tmax_2012.vrt worldclim/tmax*.bil\n```", "```py\n      <VRTDataset rasterXSize=\"2160\" rasterYSize=\"900\">\n        <SRS>GEOGCS...</SRS>\n        <GeoTransform> \n          -1.8000000000000006e+02, 1.6666666666666699e-01, ...\n        </GeoTransform>\n        <VRTRasterBand dataType=\"Int16\" band=\"1\">\n          <NoDataValue>-9.99900000000000E+03</NoDataValue>\n          <ComplexSource>\n            <SourceFilename relativeToVRT=\"1\">\n              worldclim/tmax01.bil\n            </SourceFilename>\n            <SourceBand>1</SourceBand>\n            <SourceProperties RasterXSize=\"2160\" RasterYSize=\"900\"\n             DataType=\"Int16\" BlockXSize=\"2160\" BlockYSize=\"1\" />\n            <SrcRect xOff=\"0\" yOff=\"0\" xSize=\"2160\" ySize=\"900\" />\n            <DstRect xOff=\"0\" yOff=\"0\" xSize=\"2160\" ySize=\"900\" />\n            <NODATA>-9999</NODATA>\n          </ComplexSource>\n        </VRTRasterBand>\n      <VRTRasterBand dataType=\"Int16\" band=\"2\">\n      ...\n```", "```py\n $ gdalinfo tmax_2012.vrt\n```", "```py\n $ raster2pgsql -d -I -C -M -F -t 100x100 -s 4326 tmax_2012.vrt \n      chp01.tmax_2012_multi > tmax_2012_multi.sql $ psql -d postgis_cookbook -U me -f tmax_2012_multi.sql\n```", "```py\n postgis_cookbook=# SELECT r_raster_column, srid, blocksize_x,\n     blocksize_y, num_bands, pixel_types \n     from raster_columns where r_table_schema='chp01' \n     AND r_table_name ='tmax_2012_multi'; \n```", "```py\n postgis_cookbook=# SELECT\n      (ST_VALUE(rast, 1, ST_SetSRID(ST_Point(12.49, 41.88), 4326))/10) \n      AS jan,\n      (ST_VALUE(rast, 2, ST_SetSRID(ST_Point(12.49, 41.88), 4326))/10) \n      AS feb,\n      (ST_VALUE(rast, 3, ST_SetSRID(ST_Point(12.49, 41.88), 4326))/10)\n      AS mar,\n      (ST_VALUE(rast, 4, ST_SetSRID(ST_Point(12.49, 41.88), 4326))/10) \n      AS apr,\n      (ST_VALUE(rast, 5, ST_SetSRID(ST_Point(12.49, 41.88), 4326))/10) \n      AS may,\n      (ST_VALUE(rast, 6, ST_SetSRID(ST_Point(12.49, 41.88), 4326))/10) \n      AS jun,\n      (ST_VALUE(rast, 7, ST_SetSRID(ST_Point(12.49, 41.88), 4326))/10) \n      AS jul,\n      (ST_VALUE(rast, 8, ST_SetSRID(ST_Point(12.49, 41.88), 4326))/10) \n      AS aug,\n      (ST_VALUE(rast, 9, ST_SetSRID(ST_Point(12.49, 41.88), 4326))/10) \n      AS sep,\n      (ST_VALUE(rast, 10, ST_SetSRID(ST_Point(12.49, 41.88), 4326))/10) \n      AS oct,\n      (ST_VALUE(rast, 11, ST_SetSRID(ST_Point(12.49, 41.88), 4326))/10) \n      AS nov,\n      (ST_VALUE(rast, 12, ST_SetSRID(ST_Point(12.49, 41.88), 4326))/10) \n      AS dec \n      FROM chp01.tmax_2012_multi WHERE rid IN (\n        SELECT rid FROM chp01.tmax_2012_multi\n        WHERE ST_Intersects(rast, ST_SetSRID(ST_Point(12.49, 41.88), 4326))\n      );\n```", "```py\n $ gdalinfo --formats | grep -i postgis\n```", "```py\n PostGISRaster (rw): PostGIS Raster driver\n```", "```py\n $ gdalinfo PG:\"host=localhost port=5432\n      dbname='postgis_cookbook' user='me' password='mypassword'\n      schema='chp01' table='tmax_2012_multi' mode='2'\"\n```", "```py\n $ gdal_translate -b 1 -b 2 -b 3 -b 4 -b 5 -b 6\n      PG:\"host=localhost port=5432 dbname='postgis_cookbook'\n      user='me' password='mypassword' schema='chp01'\n      table='tmax_2012_multi' mode='2'\" tmax_2012_multi_123456.tif\n```", "```py\n postgis_cookbook=# SELECT ST_Extent(the_geom) \n      FROM chp01.countries WHERE name = 'Italy';\n```", "```py\n $ gdal_translate -projwin 6.619 47.095 18.515 36.649\n      PG:\"host=localhost port=5432 dbname='postgis_cookbook'\n      user='me' password='mypassword' schema='chp01'\n      table='tmax_2012_multi' mode='2'\" tmax_2012_multi.tif\n```", "```py\n gdalwarp -t_srs EPSG:3857 PG:\"host=localhost port=5432 \n      dbname='postgis_cookbook' user='me' password='mypassword' \n      schema='chp01' table='tmax_2012_multi' mode='2'\" \n      tmax_2012_multi_3857.tif\n```", "```py\n$ gdalinfo --formats\n```"]