- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '5'
- en: Understanding the Qubit
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解量子比特
- en: We are all very familiar with the classical bit, or just the bit, with respect
    to current computer hardware systems. It is the fundamental unit used to compute
    everything from simple mathematical problems, such as addition and multiplication,
    to more complex algorithms that involve a large collection of information.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们都非常熟悉经典比特，或者简单地说是比特，在当前的计算机硬件系统中。它是用于计算从简单的数学问题，如加法和乘法，到涉及大量信息的更复杂算法的基本单元。
- en: Quantum computers have a similar fundamental unit called a **quantum bit,**
    or **qubit**, as it is commonly referred to. In this chapter, we will describe
    what a qubit is, both from a mathematical (computational) and a hardware perspective,
    to help you understand how they are used to calculate information. We will cover
    the differences between qubits and bits, particularly regarding how calculations
    are defined. This chapter will then transition from single to multi-qubit states
    and talk about the advantages of multi-qubit states.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 量子计算机有一个类似的基本单元，称为**量子比特**，或**qubit**，这是它的常用称呼。在本章中，我们将从数学（计算）和硬件的角度描述什么是qubit，以帮助您了解它们是如何用于计算信息的。我们将涵盖qubit和比特之间的差异，特别是关于计算是如何定义的。然后，本章将从单量子比特状态过渡到多量子比特状态，并讨论多量子比特状态的优势。
- en: We will also provide an overview of the hardware implementation of a qubit and
    how qubits are used to compute information. Since we will be using the Qiskit
    Runtime service to run our experiments, you will be using the superconducting
    qubit systems that are available to you. The descriptions and calculations are
    hardware independent; much of the information we will cover will apply to most
    of the other available quantum hardware systems.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将概述量子比特的硬件实现以及量子比特是如何用于计算信息的。由于我们将使用Qiskit Runtime服务来运行我们的实验，您将使用可用的超导量子比特系统。描述和计算是硬件无关的；我们将涵盖的大部分信息将适用于大多数其他可用的量子硬件系统。
- en: Finally, we will discuss how quantum systems read, manipulate, and control the
    flow of information to and from a qubit from a classical system.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将讨论量子系统如何从经典系统中读取、操作和控制量子比特的信息流动。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Comparing classical and quantum bits
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比较经典比特和量子比特
- en: Visualizing the state vector of a qubit
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可视化量子比特的状态向量
- en: Visualizing the state vectors of multiple qubits
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可视化多个量子比特的状态向量
- en: Implementing qubits on a superconducting system
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在超导系统中实现量子比特
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'In this chapter, some basic knowledge of computer architecture, basic linear
    algebra, and binary logic might come in handy. Knowledge of how bits are used
    to calculate will be useful but is not a hard requirement as the focus will be
    primarily on the qubit. Here is the source code used throughout this book: [https://github.com/PacktPublishing/Learning-Quantum-Computing-with-Python-and-IBM-Quantum-Second-Edition](https://github.com/PacktPublishing/Learning-Quantum-Computing-with-Python-and-IBM-Quantum-Second-Edition).'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，一些基本的计算机架构知识、基本的线性代数和二进制逻辑可能会很有用。了解比特是如何用于计算的将是有用的，但不是硬性要求，因为重点将主要放在量子比特上。以下是本书中使用的源代码：[https://github.com/PacktPublishing/Learning-Quantum-Computing-with-Python-and-IBM-Quantum-Second-Edition](https://github.com/PacktPublishing/Learning-Quantum-Computing-with-Python-and-IBM-Quantum-Second-Edition)。
- en: Comparing classical and quantum bits
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 比较经典比特和量子比特
- en: In this section, we will compare and review the building blocks of a classical
    bit and a few of the operations that are performed on them via classical gates.
    We will then learn about the fundamental unit of a quantum computer, the qubit,
    and how it is similar to the bit, yet due to its quantum computational principles,
    which we learned about in the previous chapter, has a larger computational space
    than the bit.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将比较和回顾经典比特的构建块以及通过经典门对这些构建块执行的一些操作。然后，我们将了解量子计算机的基本单元——量子比特，以及它如何与比特相似，但由于我们在上一章中学到的量子计算原理，它比比特具有更大的计算空间。
- en: Reviewing the classical bit
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 回顾经典比特
- en: Before we delve into what a quantum bit is and how it is used, let’s take a
    brief moment to refresh our memories about the classical bit. Just as the quantum
    bit is the fundamental building block of quantum algorithms, the bit has the same
    role in classical computational systems.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: In computational systems, the bit is used to define a logical state, often referenced
    as either on or off, true or false, or the most commonly used option, 1 or 0\.
    The transition between states can be applied physically either after it’s triggered
    by an operation, such as the result of an **AND gate**, or as a result of some
    input from an external entity, such as reading from an external data source. It
    is usually represented using transistors, which detect voltage differences and
    usually contain a threshold that determines whether the transistor is in a low
    (0) or high (1) state. The voltage thresholds, usually referred to as **Transistor-Transistor
    Logic** (**TTL**) voltage, are generally between 0 and 0.5 volts to indicate low
    and between 2 and 5 volts to indicate high.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram illustrates the simple process of a NOT operation being
    conducted on a bit. The bit is first initialized or set to a state, either 0 or
    1\. Then, an operation is performed on the bit and, depending on the result of
    the operation, the bit’s state will either change or remain the same. The information
    is then available to be read and/or stored. In this example, the NOT operation
    would change the state from 0 to 1 or vice versa:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.1 – NOT operation of a bit ](img/B18420_05_01.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.1: NOT operation of a bit'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: 'The implementation of a bit can be in various forms: flip flops, TTL, and so
    on. The information can be stored by writing the value to a persistent data repository
    to be read later. Calculations using bits are usually done using a **bitstring**,
    which is a set of individual bits combined to represent a string of 1s and 0s,
    usually noted as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18420_05_001.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
- en: This indicates that *x* is a bitstring of 4 bits, where each bit can be either
    `1` or `0`; for example, `0010` or `1101`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: 'Calculations using bits are generally done using binary logic. For example,
    let’s say we wanted to add two numbers; say, 2 and 3\. We would simply assign
    the values 2 and 3 to a variable, which is stored in binary. Then, we would add
    the two numbers using binary addition and carry the values, which will result
    in 5, illustrated as follows. Please create a new notebook and enter the following:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*So, why did we go through such a simple example?* The point was not to bore
    you with a simple binary calculation; the idea was to provide a refresher about
    the mechanics of what happens at the gate level when computing on a classical
    system. This way, when describing the quantum system, it will help you compare
    and contrast the differences regarding how information is created, calculated,
    and stored. With that, we’ll move on to the next section and describe what a qubit
    is.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the qubit
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Similar to the bit, which we described previously, the qubit is the fundamental
    unit in quantum information science. The qubit is similar to the bit in that it
    can represent the same two states, namely 0 and 1, although a qubit represents
    a quantum state. The value of the qubit can be read. By read, we mean we can measure
    the results, which we covered in *Chapter 4*, *Understanding Basic Quantum Computing
    Principles*.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: They can also be manipulated to derive calculations based on operations performed
    on each qubit. Recall that the state of a bit can be represented by either a 0
    or a 1\. A qubit can also be represented as a complex linear combination of 0
    and 1\. In order to prevent confusion and to differentiate between a bit and a
    qubit, we will use **Dirac notation**, ![](img/B18420_05_004.png) and ![](img/B18420_05_005.png),
    to represent the quantum version of the aforementioned 0 and 1 states, respectively.
    Let’s start by visualizing a few things to help us see the difference between
    the two states.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: To begin, the state of a qubit is generally represented as an array or a vector
    that describes the computational basis states of the qubit, which, in a **Hilbert
    space**, is often denoted as ![](img/B18420_05_006.png).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: A Hilbert space is, in essence, a vector space of all possible real and complex
    numbers. Hilbert spaces are often applied in the context of infinite-dimensional
    vector spaces, whereas Euclidean space, for example, refers to a finite-dimensional
    linear space with an inner product.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: 'The quantum state can be presented as two basis vectors that are orthogonal
    to each other, as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18420_05_007.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
- en: 'The second vector is given as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18420_05_008.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
- en: 'As we can see, bits and qubits are similar in that they can represent two basis
    states, in this case, 0 and 1\. Where the qubits differ from classical bits is
    that a qubit is always in a linear combination of basis states, which is to say
    that they are always in a superposition of ![](img/B18420_04_006.png) and ![](img/B18420_02_003.png).
    More formally, this is represented in the following format:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18420_05_011.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
- en: 'From the previous equation, we can say that ![](img/B18420_05_017.png) and
    ![](img/B18420_05_018.png) are complex in that the sum of their magnitudes is
    equal to 1 and each squared coefficient represents the probability amplitude,
    which represents the probability of measuring a ![](img/B18420_05_004.png) or
    a ![](img/B18420_05_005.png), of the corresponding basis state:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18420_05_014.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
- en: Another thing to know about quantum mechanics is that we cannot obtain the values
    of ![](img/B18420_05_017.png) and ![](img/B18420_05_018.png), even when measuring
    the qubit. Measuring a qubit requires a qubit to collapse into one of the basis
    states of 0 or 1.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18420_05_017.png) and ![](img/B18420_05_018.png) merely provide some
    probabilistic information as to whether the results would be one or the other,
    but this is not a certainty. This is one of the mysteries of quantum mechanics.
    For now, you can conceptualize measuring a qubit as similar to observing or collapsing
    a spinning coin to reveal whether it is heads or tails. Once it’s been measured,
    or collapsed, you are not able to have the coin *continue* spinning without restarting
    the experiment, so all information is lost. You would have to repeat the full
    operation of spinning the coin again.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing the qubit states can be done using a simple two-dimensional plane,
    where the *x* axis is used to denote the ![](img/B18420_05_004.png) state and
    the *y* axis is used to denote the ![](img/B18420_02_003.png) state. Therefore,
    the vector can be used to represent the probability of each state, which should
    total 1.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we covered the differences between bits and qubits. In the
    next section, we will learn how to visualize qubits and their states using state
    vectors.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing the state vector of a qubit
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another visual representation of a qubit and its states is the **Bloch sphere**,
    named after the physicist Felix Bloch. The Bloch sphere is an ordinary three-dimensional
    sphere that’s generally used as a geometrical representation of the qubit. By
    this, we mean the sphere can represent a qubit’s state as a point anywhere on
    the surface of the Bloch sphere. As described in the previous chapter, the basis
    states are represented by the north and south poles.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: Conventionally, the north pole of the Bloch sphere represents the ![](img/B18420_04_006.png)
    state, while the south pole represents the ![](img/B18420_02_003.png) state. Any
    point on the surface of the Bloch sphere can represent the linear combination
    of states as a unit vector from the center (origin) to the surface of the Bloch
    sphere.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we have the quantum mechanical constraint that the total probability
    of the vector must equal 1, we get the following formula:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18420_05_023.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
- en: 'The vector can then only rotate around the ![](img/B18420_05_024.png) and ![](img/B18420_05_025.png)
    axes of the Bloch sphere by using the following representation:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18420_05_026.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
- en: 'Here, ![](img/B18420_05_027.png) (representing the amplitude of the qubit)
    and ![](img/B18420_05_028.png) (representing the phase of the qubit) have the
    values (limits) ![](img/B18420_05_029.png) and ![](img/B18420_05_030.png). What
    this illustrates is that any point on the sphere is unique as long as the values
    of ![](img/B18420_05_027.png) and ![](img/B18420_05_028.png) are themselves unique,
    where ![](img/B18420_05_027.png) represents the colatitude to the *z* axis and
    ![](img/B18420_05_028.png) represents the longitude from the *x* axis. The quantum
    state ![](img/B18420_05_035.png) is set from the initial state ![](img/B18420_05_004.png)
    after the rotations of ![](img/B18420_05_027.png) and ![](img/B18420_05_028.png)
    have been applied, as illustrated in the following diagram:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '![Diagram  Description automatically generated](img/B18420_05_02.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.2: Qubit Bloch sphere'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '(image source: https://commons.wikimedia.org/wiki/File: Sphere_bloch.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: To continue describing a qubit, we will use visuals to help illustrate some
    key concepts that can be seen on the Bloch sphere. This will also help provide
    further hands-on exercises for you.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing the representation of a qubit
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we will visualize the representation of a qubit state using
    two visualization plotters, the **Bloch sphere** and the **qsphere**. We will
    begin by creating the Bloch sphere of a qubit in the initial state of ![](img/B18420_04_006.png)
    so that we can visualize the state vector and phase of a qubit:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new notebook and we’ll start as we would with all our notebooks by
    loading our helper file first. Note, of course, if you wish to reuse the notebook
    from earlier, you can do so and skip this step:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Next, we will create a simple circuit with just a single qubit and use the visualization
    tools we imported to visualize the qubit state. We’ll import the first one in
    its initial state of ![](img/B18420_04_006.png).
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next, we will run our circuit on the state vector simulator and view the results
    on the Bloch sphere by passing the `statevectorResult` object into the argument
    of the `plot_bloch_multivector` function:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: After the preceding cell has finished executing, you should have the state vector
    results printed out on your console as follows.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Next, we will display first on a Bloch sphere using the `Statevector` objects
    `draw` function. This function is very similar to that of the visualization method
    we used before, except, in this case, we can include an argument describing which
    sphere to use to display the state vector information. In this example, we are
    using `bloch` to indicate a Bloch sphere; we’ll be using this going forward to
    simplify when bouncing between Bloch sphere and qsphere. Note that we should expect
    to see our state vector in the initial state of ![](img/B18420_04_006.png) since
    we have not performed any operations on the qubit.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The output that you will see from the preceding function is the Bloch sphere
    with the qubit state pointed to the north pole or to the ![](img/B18420_04_006.png)
    state, illustrated as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.3 – Qubit Bloch sphere state vector initialized to  ](img/B18420_05_03.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.3: Qubit Bloch sphere state vector initialized to ![](img/B18420_04_006.png)'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will display the state vector results on the qsphere. In this visualization,
    you will see the state vector in the same state as the Bloch sphere shown in the
    preceding diagram:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You will also see that it includes the phase of the state vector represented
    by the color-shaded sphere at the bottom right, as shown in the following output:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '![A picture containing diagram  Description automatically generated](img/B18420_05_04.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.4: Qubit state vector initialized to ![](img/B18420_04_006.png) with
    phase = 0'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: From the preceding diagram, note that the state vector at the surface of the
    qsphere is pointed toward the north pole, indicating it is in the state ![](img/B18420_04_006.png).
    It is also shaded in blue to indicate the phase of the qubit; in this case, since
    we did not shift the phase, it is set to the default phase of *0* (blue, as described
    in the legend wheel at the bottom right of the qsphere).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that all images are available in color at the following address: [ADD
    COLOR IMAGE PACK URL]'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: This is to indicate the phase of the state vector. The color chart at the bottom
    right of the preceding diagram is a reference to the phase of the state vector,
    which is currently *0*.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we are familiar with the state vector of a qubit, let’s take it out
    for a spin. We’ll start by flipping the vector from the initial state of ![](img/B18420_04_006.png)
    to the state of ![](img/B18420_02_003.png) using the NOT gate and then rerun our
    state vector and plot the results:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'As you can see, we are now at the ![](img/B18420_02_003.png) state with the
    phase still at **0**, as illustrated in the following diagram:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '![Diagram  Description automatically generated with low confidence](img/B18420_05_05.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.5: Qubit state vector set to ![](img/B18420_02_003.png) with phase
    = 0'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will place the qubit into superposition by adding a Hadamard gate
    and executing the circuit again. We’ll create a new circuit and include a Hadamard
    gate, as shown in the following code snippet, followed by executing the circuit
    and plotting the Bloch sphere of the state vector results, which indicates the
    position of the state vector. In this case, it is on the equator:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Note that the state vector is a precise linear combination of ![](img/B18420_04_006.png)
    and ![](img/B18420_02_003.png):'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.6 – Bloch sphere superposition representation, a linear combination
    of  and  ](img/B18420_05_06.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.6: Bloch sphere superposition representation, a linear combination
    of ![](img/B18420_04_006.png) and ![](img/B18420_02_003.png)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: Let’s see what this looks like on the qsphere by plotting the state vector results.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: 'Plot the state vector results on the qsphere:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You can see the output of the previous code snippet in the following diagram:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '![Chart  Description automatically generated](img/B18420_05_07.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.7: Qubit state vector set to a linear combination of ![](img/B18420_04_006.png)
    and ![](img/B18420_02_003.png), superposition'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: The results might seem a little confusing. You may be asking yourself why there
    are two vectors when we only have one qubit and why they are based on the Bloch
    sphere result. *Shouldn’t we only see one?* Well, the difference is that the qsphere
    visualizes something that the Bloch sphere does not; that is, the visual representation
    of the amplitude of each possible state. If you look at the size of the ball on
    the surface of the previous outcome of the qsphere when we executed either the
    ![](img/B18420_04_006.png) or ![](img/B18420_02_003.png) state, the diameter of
    the ball was much larger than the two on the surface of the preceding diagram.
    This is because the amplitude is equal for both ![](img/B18420_04_006.png) and
    ![](img/B18420_02_003.png), so the size is split between the two, whereas in the
    previous examples, the amplitude was purely in one of the two states.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we learned that the qubit could represent itself as a bit by
    using the two basis states of 0 and 1\. We also saw that it can be represented
    as a linear combination of the two basis states, that is, the amplitude (longitudinal)
    and phase (latitudinal).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: It is by leveraging these features that quantum algorithms can provide the potential
    for optimizing computational solutions much more than using classical bits. We
    also saw how to visualize the state of a qubit using two Qiskit visualization
    functions, the Bloch sphere and the qsphere, which provide information such as
    amplitude and phase.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will look at how multiple qubits are presented and how
    to visualize and plot both their real and imaginary components.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing the state vectors of multiple qubits
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So far, we’ve learned the various ways to represent a qubit, both as a vector
    ![](img/B18420_05_065.png) and visually on a Bloch sphere. We did something similar
    with the qsphere. In this section, we will learn how to represent multiple qubits
    and how to represent them in their general state. We will start by making a slight
    update to the notation. A single qubit is presented as the following vector:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18420_05_060.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
- en: 'We can therefore represent two qubits similarly, in the following form:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18420_05_061.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
- en: 'From the preceding equation, you can see that the state ![](img/B18420_05_065.png)
    is used to represent multiple qubits, versus ![](img/B18420_05_065.png) for single
    qubits. The difference is case sensitive: lowercase for single qubits and uppercase
    for multiple qubits. The probability amplitudes, along with the constraint by
    the normalization of 1, can therefore be represented as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18420_05_064.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
- en: 'Let’s look at an example that comprises two qubits, the first one in the state
    ![](img/B18420_05_065.png), as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18420_05_066.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
- en: 'The other qubit, in the state ![](img/B18420_05_067.png), is as follows:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18420_05_068.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
- en: 'Combining the two entails taking the **tensor product**, which is used to describe
    systems of multiple subsystems, of the two qubit states illustrated with the symbol
    ![](img/B18420_05_069.png), as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18420_05_070.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
- en: 'Multiplying across, we will get the following:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18420_05_071.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
- en: 'This results in the amplitude vectors, as follows:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18420_05_072.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
- en: 'Finally, another way to state multi-qubits by their tensor product is by representing
    them by their product state. Here, the product state of *n* qubits is a vector
    of size 2^n. We’ll use the same two-vector example described previously. The first
    is the *00* state:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18420_05_073.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
- en: 'The *01* state is as follows:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18420_05_074.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
- en: 'The *10* state is as follows:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18420_05_075.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
- en: 'Lastly, the *11* state is as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18420_05_076.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
- en: The main takeaway from the previous equations is that we can describe two qubits
    individually as two *2 x 1* column vectors. However, when we want to represent
    the joint state of the full system, we represent them as a tensor product, which
    produces the *4 x 1* column vector illustrated previously. This is the mathematical
    representation of the quantum state, also referred to as the computational basis
    state of a two-qubit system.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we’ll briefly discuss the implementation of qubits on the
    IQP systems and also discuss other technologies that are used to implement qubits.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: Implementing qubits on a superconducting system
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the beginning of this chapter, we learned that classical bits can be implemented
    by various platforms that detect differences between voltages or the phase of
    a current, or by the state of a flip flop. Just as a bit has different platforms
    that are used for their implementation, so do qubits.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: Some of the more common qubit platforms are **neutral atoms**, **Quantum dots**,
    **Nitrogen-vacancy** (**NV**) centers within diamond, **trapped ions**, and **superconducting
    qubits**. Out of these platforms, it is the superconducting qubits that are used
    on the quantum devices hosted on the IQP. So, in this section, we will cover this
    platform.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: If you want to learn more about the other platforms, you can review the book
    *Quantum Computation and Quantum Information* by Michael Nielsen and Isaac Chuang,
    which covers a lot of these in some detail.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: A superconductor is a material made up of a combination of niobium and aluminum
    that has no electrical resistance, but this can only typically be achieved at
    very low temperatures, usually around 20 milli-Kelvin. The electrons along the
    superconductors are therefore used as the basic charge carriers that comprise
    a pair of electrons, more commonly referred to as **Cooper pairs**. This is different
    from other conductors, which generally use single electrons. Talking about the
    specifics of the quantum mechanics or superconducting behavior of the Cooper pairs
    is beyond the scope of this book. However, you can find various references in
    *Appendix A* if you are interested. For now, we can think of superconductors as
    one of the components of the superconducting circuit that makes up the qubit.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have covered how to visualize the state of a qubit using the state
    vector simulator and display it on both a Bloch sphere and a qsphere, we can move
    on to the next chapter, which describes all the qubit gate operators and what
    effects they have on each other.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned the difference between bits and qubits and how
    they are represented, both mathematically and visually. You also saw the difference
    between how single and multi-qubit systems are represented, including their mathematical
    representations, as well as how they are constructed and operated on. We also
    covered how to visualize the qubit as a Bloch sphere and a qsphere.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: You now have the skills to represent the vector states of single and multiple
    qubits. You also understand the difference between representing multiple qubits
    as separate entities and as part of a complete system by using the tensor products
    of the qubits. This will help you to implement and operate the qubits on IBM Quantum
    systems.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will cover how to perform operations on single and multiple
    qubits and how those operations are triggered on the qubits of the real devices.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which would provide visual information about the phase of a qubit—the Bloch
    sphere or the qsphere?
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can you visualize multiple qubits on the Bloch sphere? If not, then describe
    why you wouldn’t.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write out the tensor product of three qubit states in all their forms.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the probability amplitude of a three-qubit system?
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Join us on Discord
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Join our community’s Discord space for discussions with the author and other
    readers:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/3FyN1](https://packt.link/3FyN1)'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QR_Code2617625996838265933.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
