["```py\npip install jinja2\npip install pandas\n\n```", "```py\n    #!/usr/bin/env python\n    # -*- coding: utf-8 -*-\n    import folium\n    import pandas as pd\n\n    # define the polygons\n    states_geojson = r'us-states.json'\n\n    # statistic data to connect to our polygons\n    state_unemployment = r'../www/html/US_Unemployment_Oct2012.csv'\n\n    # read the csv statistic data\n    state_data = pd.read_csv(state_unemployment)\n\n    # Let Folium determine the scale\n    map = folium.Map(location=[48, -102], zoom_start=3, tiles=\"Stamen Toner\")\n\n    # create the leaflet map settings\n    map.geo_json(geo_path=states_geojson, data=state_data,\n                 columns=['State', 'Unemployment'],\n                 threshold_scale=[5, 6, 7, 8, 9, 10],\n                 key_on='feature.id',\n                 fill_color='YlGn', fill_opacity=0.7, line_opacity=0.2,\n                 legend_name='Unemployment Rate (%)')\n\n    # output the final map file\n    map.create_map(path='../www/html/ch10-01_folium_map.html')\n    ```", "```py\npip install Werkzeug\npip install modestmaps\npip install simplejson\n\n```", "```py\n    $ git clone https://github.com/TileStache/TileStache.git\n\n    ```", "```py\n    > python tilestache-server.py -c ../tilestache.cfg\n\n    ```", "```py\n    * Running on http://127.0.0.1:8080/ (Press CTRL+C to quit)\n\n    ```", "```py\n    #!/usr/bin/env python\n    # -*- coding: utf-8 -*-\n    import subprocess\n\n    from jinja2 import Environment, FileSystemLoader\n\n    # Create our DEM\n\n    # use gdal_translate command to create an image to store elevation values\n    # -scale from 0 meters to 2625 meters\n    #     stretch all values to full 16bit  0 to 65535\n    # -ot is output type = UInt16 unsigned 16bit\n    # -outsize is 200 x 200 px\n    # -of is output format ENVI raster image .bin file type\n    # then our input .tif with elevation\n    # followed by output file name .bin\n    subprocess.call(\"gdal_translate -scale 0 2625 0 65535 \"\n                    \"-ot UInt16 -outsize 200 200 -of ENVI \"\n                    \"../../ch07/geodata/dem_3857.tif \"\n                    \"../geodata/whistler2.bin\")\n\n    # create our Jinja2 HTML\n    # create a standard Jinja2 Environment and load all files\n    # located in the folder templates\n    env = Environment(loader=FileSystemLoader([\"../www/templates\"]))\n\n    # define which template we want to render\n    template = env.get_template(\"base-3d-map.html\")\n\n    # path and name of input 16bit raster image with our elevation values\n    dem_3d = \"../../geodata/whistler2.bin\"\n\n    # name and location of the output HTML file we will generate\n    out_html = \"../www/html/ch10-03_dem3d_map.html\"\n\n    # dem_file is the variable name we use in our Jinja2 HTML template file\n    result = template.render(title=\"Threejs DEM Viewer\", dem_file=dem_3d)\n\n    # write out our template to the HTML file on disk\n    with open(out_html,mode=\"w\") as f:\n        f.write(result)\n    ```", "```py\n    #!/usr/bin/env python\n    <html lang=\"en\">\n    <head>\n        <title>DEM threejs Browser</title>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0\">\n        <style> body { margin: 0; overflow: hidden; }</style>\n    </head>\n    <body>\n        <div id=\"dem-map\"></div>\n        <script src=\"img/three.min.js\"></script>\n        <script src=\"img/TrackballControls.js\"></script>\n        <script src=\"img/TerrainLoader.js\"></script>\n        <script>\n\n            var width  = window.innerWidth,\n                height = window.innerHeight;\n\n            var scene = new THREE.Scene();\n\n            var axes = new THREE.AxisHelper(200);\n            scene.add(axes);\n\n            var camera = new THREE.PerspectiveCamera(45, width / height, 0.1, 1000);\n            camera.position.set(0, -50, 50);\n\n            var renderer = new THREE.WebGLRenderer();\n            renderer.setSize(width, height);\n\n            var terrainLoader = new THREE.TerrainLoader();\n            terrainLoader.load('{{ dem_3d }}', function(data) {\n\n                var geometry = new THREE.PlaneGeometry(60, 60, 199, 199);\n\n                for (var i = 0, l = geometry.vertices.length; i < l; i++) {\n                    geometry.vertices[i].z = data[i] / 65535 * 10;\n                }\n\n                var material = new THREE.MeshPhongMaterial({\n                    color: 0xdddddd,\n                    wireframe: true\n                });\n\n                var plane = new THREE.Mesh(geometry, material);\n                scene.add(plane);\n\n            });\n\n            var controls = new THREE.TrackballControls(camera);\n\n            document.getElementById('dem-map').appendChild(renderer.domElement);\n\n            render();\n\n            function render() {\n                controls.update();\n                requestAnimationFrame(render);\n                renderer.render(scene, camera);\n            }\n\n        </script>\n    </body>\n    </html>\n    ```", "```py\n> python -m SimpleHTTPServer 8080\n\n```", "```py\n    #!/usr/bin/env python\n    # -*- coding: utf-8 -*-\n\n    import subprocess\n    from PIL import Image\n    from jinja2 import Environment, FileSystemLoader\n\n    # convert from Canada UTM http://epsg.io/3157/map   to 3857\n    # transform the orthophto from epsg:3157 to epsg:3857\n    # cut the orthophoto to same extent of DEM\n    subprocess.call(\"gdalwarp -s_srs EPSG:3157 -t_srs EPSG:3857 -overwrite \"\n                    \"-te -13664479.091 6446253.250 -13636616.770 6489702.670\"\n                    \"/geodata/canimage_092j02_tif/092j02_1_1.tif ../geodata/whistler_ortho.tif\")\n\n    # convert the new orthophoto into a 200 x 200 pixel image\n    subprocess.call(\"gdal_translate -outsize 200 200 \"\n                    \"../geodata/whistler_ortho.tif \"\n                    \"../geodata/whistler_ortho_f.tif\")\n\n    # prepare to create new jpg output from .tif\n    processed_ortho = '../geodata/whistler_ortho_f.tif'\n    drape_texture = '../../geodata/whistler_ortho_f.jpg'\n\n    # export the .tif to a jpg to make is smaller for web using pil\n    Image.open(processed_ortho).save(drape_texture)\n\n    # set Jinja2 env and load folder where templates are located\n    env = Environment(loader=FileSystemLoader([\"../www/templates\"]))\n\n    # assign template to our HTML file with our variable inside\n    template = env.get_template( \"base-3d-map-drape.html\")\n\n    # define the original DEM file\n    dem_3d = \"../../geodata/whistler2.bin\"\n\n    # location of new HTML file to be output\n    out_html = \"../www/html/ch10-04_dem3d_map_drape.html\"\n\n    # create the new output HTML object and set variable names\n    result = template.render(title=\"Threejs DEM Drape Viewer\", dem_file=dem_3d,\n                             texture_map=drape_texture)\n\n    # write the new HTML file to disk\n    with open(out_html,mode=\"w\") as file:\n        file.write(result)\n    ```", "```py\n    <html lang=\"en\">\n    <head>\n        <title>DEM threejs Browser</title>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0\">\n        <style> body { margin: 0; overflow: hidden; }</style>\n    </head>\n    <body>\n        <div id=\"dem-map\"></div>\n        <script src=\"img/three.min.js\"></script>\n        <script src=\"img/TrackballControls.js\"></script>\n        <script src=\"img/TerrainLoader.js\"></script>\n        <script>\n\n            var width  = window.innerWidth,\n                height = window.innerHeight;\n\n            var scene = new THREE.Scene();\n            scene.add(new THREE.AmbientLight(0xeeeeee));\n\n            var axes = new THREE.AxisHelper(200);\n            scene.add(axes);\n\n            var camera = new THREE.PerspectiveCamera(45, width / height, 0.1, 1000);\n            camera.position.set(0, -50, 50);\n\n            var renderer = new THREE.WebGLRenderer();\n            renderer.setSize(width, height);\n\n            var terrainLoader = new THREE.TerrainLoader();\n            terrainLoader.load('{{ dem_file }}', function(data) {\n\n                var geometry = new THREE.PlaneGeometry(60, 60, 199, 199);\n\n                for (var i = 0, l = geometry.vertices.length; i < l; i++) {\n                    geometry.vertices[i].z = data[i] / 65535 * 10;\n                }\n\n                var material = new THREE.MeshPhongMaterial({\n                  map: THREE.ImageUtils.loadTexture('{{ texture_map }}')\n                });\n\n                var plane = new THREE.Mesh(geometry, material);\n                scene.add(plane);\n\n            });\n\n            var controls = new THREE.TrackballControls(camera);\n            document.getElementById('dem-map').appendChild(renderer.domElement);\n            render();\n            function render() {\n                controls.update();\n                requestAnimationFrame(render);\n                renderer.render(scene, camera);\n            }\n\n        </script>\n    </body>\n    </html>\n    ```", "```py\n> python -m simpleHTTPServer 8080\n\n```"]