- en: Chapter 1. Geospatial Analysis and Techniques
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一章 地理空间分析和技术
- en: In this introductory chapter, we will start our exploration of geospatial analysis
    by learning about the types of tasks you will typically be performing, and then
    look at spatial data and the Python libraries you can use to work with it. We
    will finish by writing an example program in Python to analyze some geospatial
    data.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的介绍中，我们将通过了解您通常将执行的任务类型来开始我们对地理空间分析的探索，然后查看空间数据以及您可以用来处理它的 Python 库。我们将通过编写一个用于分析一些地理空间数据的
    Python 示例程序来结束。
- en: 'As you work through this chapter, you will:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 随着您在本章的学习，您将：
- en: Become familiar with the types of problems that geospatial analysis will help
    to solve
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 熟悉地理空间分析将帮助解决的问题类型
- en: Understand the various types of geospatial data and some of the important concepts
    related to location-based data
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解各种类型的地理空间数据以及与位置数据相关的一些重要概念
- en: Set up your computer to use the third-party libraries you need to start analyzing
    geospatial data using Python
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置您的计算机以使用您开始使用 Python 分析地理空间数据所需的第三方库
- en: Obtain some basic geospatial data to get started
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取一些基本的地理空间数据以开始
- en: Learn how to use the GDAL/OGR library to read through a shapefile and extract
    each feature's attributes and geometry
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何使用 GDAL/OGR 库读取 shapefile 并提取每个要素的属性和几何形状
- en: Learn how to use Shapely to manipulate and analyze geospatial data
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何使用 Shapely 操作和分析地理空间数据
- en: Write a simple but complete program to identify neighboring countries
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写一个简单但完整的程序来识别邻近国家
- en: Let's start by looking at the types of problems and tasks typically solved using
    geospatial analysis.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先看看通常使用地理空间分析解决的问题和任务类型。
- en: About geospatial analysis
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于地理空间分析
- en: 'Geospatial analysis is the process of reading, manipulating, and summarizing
    geospatial data to yield useful and interesting results. A lot of the time, you
    will be answering questions like the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 地理空间分析是读取、操作和总结地理空间数据以产生有用和有趣结果的过程。很多时候，您将回答如下问题：
- en: What is the shortest drivable distance between Sausalito and Palm Springs?
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 苏萨利托和棕榈泉之间的最短驾驶距离是多少？
- en: What is the total length of the border between France and Belgium?
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 法国和比利时之间的边界总长度是多少？
- en: What is the area of each National Park in New Zealand that borders the ocean?
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新西兰沿海的每个国家公园的面积是多少？
- en: 'The answer to these sorts of questions will typically be a number or a list
    of numbers. Other types of geospatial analysis will involve calculating new sets
    of geospatial data based on existing data. For example:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这些问题的答案通常是一个或一系列数字。其他类型的地理空间分析将涉及根据现有数据计算新的地理空间数据集。例如：
- en: Calculate an elevation profile for USA Route 66 from Los Angeles, CA, to Albuquerque,
    NM.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算从加利福尼亚州洛杉矶到新墨西哥州阿尔伯克基的 USA 66 的高程剖面。
- en: Show me the portion of Brazil north of the equator.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 展示我巴西赤道以北的部分。
- en: Highlight the area of Rarotonga likely to be flooded if the ocean rose by 2
    meters.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 突出显示如果海洋上升 2 米，拉罗汤加可能被淹没的区域。
- en: In these cases, you will be generating a new set of geospatial data, which you
    would typically then display in a chart or on a map.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些情况下，您将生成一组新的地理空间数据，您通常会将其显示在图表或地图上。
- en: 'To perform this sort of analysis, you will need two things: appropriate geospatial
    analysis tools and suitable geospatial data.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行此类分析，您需要两样东西：适当的地理空间分析工具和合适的地理空间数据。
- en: We are going to perform some simple geospatial analysis shortly. Before we do,
    though, let's take a closer look at the concept of geospatial data.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们很快将进行一些简单的地理空间分析。在我们这样做之前，让我们更仔细地看看地理空间数据的概念。
- en: Understanding geospatial data
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解地理空间数据
- en: Geospatial data is data that positions things on the Earth's surface. This is
    a deliberately vague definition that encompasses both the idea of location and
    shape. For example, a database of car accidents may include the latitude and longitude
    coordinates identifying where each accident occurred, and a file of county outlines
    would include both the position and shape of each county. Similarly, a GPS recording
    of a journey would include the position of the traveler over time, tracing out
    the path they took on their travels.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 地理空间数据是在地球表面上定位事物的数据。这是一个故意模糊的定义，它涵盖了位置和形状的概念。例如，一个车祸数据库可能包括标识每次事故发生位置的纬度和经度坐标，而一个县轮廓文件将包括每个县的定位和形状。同样，一次旅行的
    GPS 记录将包括旅行者在时间上的位置，描绘出他们在旅行中走过的路径。
- en: 'It is important to realize that geospatial data includes more than just the
    geospatial information itself. For example, the following outlines are not particularly
    useful by themselves:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要认识到，地理空间数据不仅包括地理空间信息本身。例如，以下轮廓本身并不特别有用：
- en: '![Understanding geospatial data](img/4516OS_1_01.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![理解地理空间数据](img/4516OS_1_01.jpg)'
- en: 'Once you add appropriate **metadata**, however, these outlines make a lot more
    sense:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，一旦你添加了适当的**元数据**，这些轮廓就更有意义了：
- en: '![Understanding geospatial data](img/4516OS_1_02.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![理解地理空间数据](img/4516OS_1_02.jpg)'
- en: Geospatial data, therefore, includes both spatial information (locations and
    shapes) and non-spatial information (metadata) about each item being described.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，地理空间数据包括每个描述项的时空信息（位置和形状）和非时空信息（元数据）。
- en: 'Spatial information is usually represented as a series of **coordinates**,
    for example:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 空间信息通常表示为一系列**坐标**，例如：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'These numbers won''t mean much to you directly, but once you plot these series
    of coordinates onto a map, the data suddenly becomes comprehensible:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这些数字对你来说可能没有太多意义，但一旦你将这些坐标系列绘制到地图上，数据突然变得容易理解：
- en: '![Understanding geospatial data](img/4516OS_01_03.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![理解地理空间数据](img/4516OS_01_03.jpg)'
- en: 'There are two fundamental types of geospatial data:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 地理空间数据有两种基本类型：
- en: '**Raster data**: This is geospatial data that divides the world up into **cells**
    and associates values with each cell. This is very similar to the way that bitmapped
    images divide an image up into pixels and associate a color with each pixel; for
    example:![Understanding geospatial data](img/4516OS_01_04.jpg)'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**栅格数据**：这是一种将世界划分为**单元格**并将值与每个单元格关联的地理空间数据。这与位图图像将图像划分为像素并将颜色与每个像素关联的方式非常相似；例如：![理解地理空间数据](img/4516OS_01_04.jpg)'
- en: The value of each cell might represent the color to use when drawing the raster
    data on a map—this is often done to provide a raster basemap on which other data
    is drawn—or it might represent other information such as elevation, moisture levels,
    or soil type.
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每个单元格的值可能代表在地图上绘制栅格数据时使用的颜色——这通常是为了提供一个栅格底图，其他数据可以在其上绘制——或者它可能代表其他信息，例如海拔、湿度水平或土壤类型。
- en: '**Vector data**: This is geospatial data that consists of a list of **features**.
    For example, a shapefile containing countries would have one feature for each
    country. For each feature, the geospatial dataset will have a **geometry**, which
    is the shape associated with that feature, and any number of attributes containing
    the metadata for that feature.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**矢量数据**：这是一种由一系列**特征**组成的地理空间数据。例如，包含国家的shapefile将有一个特征对应于每个国家。对于每个特征，地理空间数据集将有一个**几何形状**，这是与该特征关联的形状，以及任何数量的属性，包含该特征的元数据。'
- en: 'A feature''s geometry is just a geometric shape that is positioned on the surface
    of the earth. This geometric shape is made up of **points**, **lines** (sometimes
    referred to as **LineStrings**), and **polygons**, or some combination of these
    three fundamental types:'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个特征的几何形状只是位于地球表面上的几何形状。这个几何形状由**点**、**线**（有时称为**线字符串**）和**多边形**或这些三种基本类型的组合构成：
- en: '![Understanding geospatial data](img/4516OS_01_05.jpg)'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![理解地理空间数据](img/4516OS_01_05.jpg)'
- en: 'The typical raster data formats you might encounter include:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会遇到的典型栅格数据格式包括：
- en: GeoTIFF files, which are basically just TIFF format image files with georeferencing
    information added to position the image accurately on the earth's surface.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GeoTIFF文件，基本上是带有地理参考信息的TIFF格式图像文件，用于在地球表面上准确定位图像。
- en: USGS `.dem` files, which hold a **Digital Elevation Model** (**DEM**) in a simple
    ASCII data format.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 美国地质调查局（USGS）的`.dem`文件，它以简单的ASCII数据格式存储**数字高程模型**（DEM）。
- en: '`.png`, `.bmp`, and `.jpeg` format image files, with associated georeferencing
    files to position the images on the surface of the earth.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.png`、`.bmp`和`.jpeg`格式的图像文件，以及相关的地理参考文件，用于在地球表面上定位图像。'
- en: 'For vector-format data, you may typically encounter the following formats:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 对于矢量格式数据，你可能会遇到以下格式：
- en: '**Shapefile**: This is an extremely common file format used to store and share
    geospatial data.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Shapefile**：这是一种极其常见的文件格式，用于存储和共享地理空间数据。'
- en: '**WKT (Well-Known Text)**: This is a text-based format often used to convert
    geometries from one library or data source to another. This is also the format
    commonly used when retrieving features from a database.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**WKT（已知文本）**：这是一种基于文本的格式，常用于将几何形状从一个库或数据源转换为另一个。这也是从数据库检索特征时常用的格式。'
- en: '**WKB (Well-Known Binary)**: This is the binary equivalent of the WKT format,
    storing geometries as raw binary data rather than text.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**WKB（Well-Known Binary）**：这是WKT格式的二进制等效格式，将几何形状存储为原始二进制数据而不是文本。'
- en: '**GML (Geometry Markup Language)**: This is an industry-standard format based
    on XML, and is often used when communicating with web services.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GML（Geometry Markup Language）**：这是一个基于XML的行业标准格式，通常在与其他Web服务通信时使用。'
- en: '**KML (Keyhole Markup Language)**: This is another XML-based format popularized
    by Google.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**KML（Keyhole Markup Language）**：这是由Google推广的另一种基于XML的格式。'
- en: '**GeoJSON**: This is a version of JSON designed to store and transmit geometry
    data.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GeoJSON**：这是为存储和传输几何数据而设计的JSON版本。'
- en: Because your analysis can only be as good as the data you are analyzing, obtaining
    and using good-quality geospatial data is critical. Indeed, one of the big challenges
    in performing geospatial analysis is to get the right data for the job. Fortunately,
    there are several websites which provide free good-quality geospatial data. But
    if you're looking for a more obscure set of data, you may have trouble finding
    it. Of course, you do always have the choice of creating your own data from scratch,
    though this is an extremely time-consuming process.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 因为你的分析只能与你要分析的数据一样好，所以获取和使用高质量的地理空间数据是至关重要的。确实，在执行地理空间分析时，一个主要挑战是获取适合工作的正确数据。幸运的是，有几个网站提供免费的高质量地理空间数据。但如果你在寻找更不为人知的数据集，你可能很难找到它。当然，你始终可以选择从头开始创建自己的数据，尽管这是一个极其耗时的工作过程。
- en: We will return to the topic of geospatial data in [Chapter 2](ch02.html "Chapter 2. Geospatial
    Data"), *Geospatial Data*, where we will examine what makes good geospatial data
    and how to obtain it.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第2章](ch02.html "第2章。地理空间数据")“地理空间数据”中回到地理空间数据的话题，我们将探讨什么使好的地理空间数据，以及如何获取它。
- en: Setting up your Python installation
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置你的Python安装
- en: 'To start analyzing geospatial data using Python, we are going to make use of
    two freely available third-party libraries:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用Python分析地理空间数据，我们将利用两个免费可用的第三方库：
- en: '**GDAL**: The Geospatial Data Abstraction Library makes it easy for you to
    read and write geospatial data in both vector and raster format.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GDAL**：地理空间数据抽象库使你能够轻松以矢量和栅格格式读取和写入地理空间数据。'
- en: '**Shapely**: As the name suggests, this is a wonderful library that enables
    you to perform various calculations on geometric shapes. It also allows you to
    manipulate shapes, for example, by joining shapes together or by splitting them
    up into their component pieces.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Shapely**：正如其名所示，这是一个非常棒的库，它使你能够对几何形状执行各种计算。它还允许你操作形状，例如，通过将形状连接在一起或将它们拆分成各自的组成部分。'
- en: Let's go ahead and get these two libraries installed into your Python setup
    so we can start using them right away.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续安装这两个库到你的Python设置中，这样我们就可以立即开始使用它们了。
- en: Installing GDAL
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装GDAL
- en: GDAL, or more accurately the GDAL/OGR library, is a project by the **Open Source
    Geospatial Foundation** to provide libraries to read and write geospatial data
    in a variety of formats. Historically, the name GDAL referred to the library to
    read and write raster-format data, while OGR referred to the library to access
    vector-format data. The two libraries have now merged, though the names are still
    used in the class and function names, so it is important to understand the difference
    between the two.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: GDAL，或者更准确地说，GDAL/OGR库，是由**开源地理空间基金会**发起的一个项目，旨在提供用于以各种格式读取和写入地理空间数据的库。从历史上看，GDAL这个名字指的是用于读取和写入栅格格式数据的库，而OGR指的是用于访问矢量格式数据的库。这两个库现在已经合并，尽管名字仍然在类和函数名中使用，因此理解两者之间的区别是很重要的。
- en: A default installation of GDAL/OGR allows you to read raster geospatial data
    in 100 different formats, and write raster data in 71 different formats. For vector
    data, GDAL/OGR allows you read data in 42 different formats, and write in 39 different
    formats. This makes GDAL/OGR an extremely useful tool to access and work with
    geospatial data.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 默认安装的GDAL/OGR允许你以100种不同的格式读取栅格地理空间数据，并以71种不同的格式写入栅格数据。对于矢量数据，GDAL/OGR允许你以42种不同的格式读取数据，并以39种不同的格式写入。这使得GDAL/OGR成为访问和操作地理空间数据的一个极其有用的工具。
- en: 'GDAL/OGR is a C++ library with various bindings to allow you to access it from
    other languages. After installing it on your computer, you typically use the Python
    bindings to access the library using your Python interpreter. The following diagram
    illustrates how these various pieces all fit together:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: GDAL/OGR是一个C++库，具有各种绑定，允许您从其他语言访问它。在您的计算机上安装它后，您通常使用Python绑定通过Python解释器访问库。以下图解说明了这些各个部分是如何结合在一起的：
- en: '![Installing GDAL](img/4516OS_01_06.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![安装GDAL](img/4516OS_01_06.jpg)'
- en: Let's go ahead and install the GDAL/OGR library now. The main website of GDAL
    (and OGR) can be found at [http://gdal.org](http://gdal.org).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续安装GDAL/OGR库。GDAL（和OGR）的主网站可以在[http://gdal.org](http://gdal.org)找到。
- en: 'How you install it depends on which operating system your computer is using:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 您如何安装它取决于您的计算机正在使用的操作系统：
- en: For MS Windows machines, you can install GDAL/OGR using the FWTools installer,
    which can be downloaded from [http://fwtools.maptools.org](http://fwtools.maptools.org).
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于Windows机器，您可以使用FWTools安装程序安装GDAL/OGR，该安装程序可以从[http://fwtools.maptools.org](http://fwtools.maptools.org)下载。
- en: Alternatively, you can install GDAL/OGR and Shapely using the OSGeo installer,
    which can be found at [http://trac.osgeo.org/osgeo4w](http://trac.osgeo.org/osgeo4w).
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 或者，您可以使用OSGeo安装程序安装GDAL/OGR和Shapely，该安装程序可以在[http://trac.osgeo.org/osgeo4w](http://trac.osgeo.org/osgeo4w)找到。
- en: For Mac OS X, you can download the complete installer for GDAL and OGR from
    [http://www.kyngchaos.com/software/frameworks](http://www.kyngchaos.com/software/frameworks).
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于Mac OS X，您可以从[http://www.kyngchaos.com/software/frameworks](http://www.kyngchaos.com/software/frameworks)下载GDAL和OGR的完整安装程序。
- en: For Linux, you can download the source code to GDAL/OGR from the main GDAL site,
    and follow the instructions on the site to build it from source. You may also
    need to install the Python bindings for GDAL and OGR.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于Linux，您可以从GDAL的主网站下载GDAL/OGR的源代码，并按照网站上的说明从源代码构建它。您可能还需要安装GDAL和OGR的Python绑定。
- en: 'Once you have installed it, you can check that it''s working by firing up your
    Python interpreter and typing `import osgeo.gdal` and then `import osgeo.ogr`.
    If the Python command prompt reappears each time without an error message, then
    GDAL and OGR were successfully installed and you''re all ready to go:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，您可以通过启动Python解释器并输入`import osgeo.gdal`然后`import osgeo.ogr`来检查它是否正常工作。如果每次Python命令提示符都重新出现而没有错误消息，那么GDAL和OGR已成功安装，您就可以开始使用了：
- en: '[PRE1]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Installing Shapely
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Shapely
- en: 'Shapely is a geometry manipulation and analysis library. It is based on the
    **Geometry Engine, Open Source** (**GEOS**) library, which implements a wide range
    of geospatial data manipulations in C++. Shapely provides a Pythonic interface
    to GEOS, making it easy to use these manipulations directly within your Python
    programs. The following illustration shows the relationship between your Python
    code, the Python interpreter, Shapely, and the GEOS library:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Shapely是一个几何操作和分析库。它基于**几何引擎，开源**（**GEOS**）库，该库在C++中实现了广泛的地理空间数据处理。Shapely提供了一个Python接口来访问GEOS，使得您可以直接在Python程序中使用这些操作。以下插图显示了您的Python代码、Python解释器、Shapely和GEOS库之间的关系：
- en: '![Installing Shapely](img/4516OS_01_07.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![安装Shapely](img/4516OS_01_07.jpg)'
- en: The main website for Shapely can be found at [http://pypi.python.org/pypi/Shapely](http://pypi.python.org/pypi/Shapely).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Shapely的主网站可以在[http://pypi.python.org/pypi/Shapely](http://pypi.python.org/pypi/Shapely)找到。
- en: The website has everything you need, including complete documentation on how
    to use the library. Note that to install Shapely, you need to download both the
    Shapely Python package and the underlying GEOS library. The website for the GEOS
    library can be found at [http://trac.osgeo.org/geos](http://trac.osgeo.org/geos).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 网站上有您所需的一切，包括如何使用库的完整文档。请注意，要安装Shapely，您需要下载Shapely Python包和底层GEOS库。GEOS库的网站可以在[http://trac.osgeo.org/geos](http://trac.osgeo.org/geos)找到。
- en: 'How you go about installing Shapely depends on which operating system your
    computer is using:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 您如何安装Shapely取决于您的计算机正在使用的操作系统：
- en: For MS Windows, you should use one of the prebuilt installers available on the
    Shapely website. These installers include their own copy of GEOS, so there is
    nothing else to install.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于Windows，您应该使用Shapely网站上可用的预构建安装程序之一。这些安装程序包括它们自己的GEOS副本，因此不需要安装其他内容。
- en: For Mac OS X, you should use the prebuilt GEOS framework available at [http://www.kyngchaos.com/software/frameworks](http://www.kyngchaos.com/software/frameworks).
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于Mac OS X，您应该使用在[http://www.kyngchaos.com/software/frameworks](http://www.kyngchaos.com/software/frameworks)可用的预构建GEOS框架。
- en: Tip
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Note that if you install the **GDAL Complete** package from the preceding website,
    you will already have GEOS installed on your computer.
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，如果你从前面的网站安装了 **GDAL Complete** 软件包，那么你电脑上已经安装了 GEOS。
- en: 'Once GEOS has been installed, you can install Shapely using `pip`, the Python
    package manager:'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一旦安装了 GEOS，你可以使用 `pip`，Python 包管理器来安装 Shapely：
- en: '[PRE2]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If you don't have `pip` installed on your computer, you can install it by following
    the instructions at [https://pip.pypa.io/en/latest/installing.html](https://pip.pypa.io/en/latest/installing.html).
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你电脑上没有安装 `pip`，你可以按照 [https://pip.pypa.io/en/latest/installing.html](https://pip.pypa.io/en/latest/installing.html)
    中的说明进行安装。
- en: For Linux machines, you can either download the source code from the GEOS website
    and compile it yourself, or install a suitable RPM or APT package which includes
    GEOS. Once this has been done, you can use `pip` `install shapely` to install
    the Shapely library itself.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 Linux 机器，你可以从 GEOS 网站下载源代码并自行编译，或者安装一个包含 GEOS 的合适 RPM 或 APT 软件包。一旦完成，你可以使用
    `pip install shapely` 来安装 Shapely 库本身。
- en: 'Once you have installed it, you can check that the Shapely library is working
    by running the Python command prompt and typing the following command:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，你可以通过运行 Python 命令提示符并输入以下命令来检查 Shapely 库是否正常工作：
- en: '[PRE3]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If you get the Python command prompt again without any errors, as in the preceding
    example, then Shapely has been installed successfully and you're all set to go.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你再次得到 Python 命令提示符而没有错误，就像前面的例子一样，那么 Shapely 已经成功安装，你可以开始使用了。
- en: Obtaining some geospatial data
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取一些地理空间数据
- en: For this chapter, we will use a simple but still very useful geospatial data
    file called **World Borders Dataset**. This dataset consists of a single shapefile
    where each feature within the shapefile represents a country. For each country,
    the associated geometry object represents the country's outline. Additional attributes
    contain metadata such as the name of the country, its ISO 3166-1 code, the total
    land area, its population, and its UN regional classification.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，我们将使用一个简单但仍然非常有用的地理空间数据文件，称为 **世界边界数据集**。该数据集由单个 shapefile 组成，其中 shapefile
    中的每个特征代表一个国家。对于每个国家，相关的几何对象代表该国的轮廓。附加属性包含诸如国家名称、ISO 3166-1 代码、总面积、人口和联合国区域分类等元数据。
- en: To obtain the World Border Dataset, go to [http://thematicmapping.org/downloads/world_borders.php](http://thematicmapping.org/downloads/world_borders.php).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取世界边界数据集，请访问 [http://thematicmapping.org/downloads/world_borders.php](http://thematicmapping.org/downloads/world_borders.php)。
- en: Scroll down to the **Downloads** section and click on the file to download.
    Make sure you download the full version and not the simplified one—the file you
    want will be called `TM_WORLD_BORDERS-0.3.zip`.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 滚动到 **下载** 部分，并点击文件以下载。确保你下载的是完整版本而不是简化版本——你想要的文件将被称为 `TM_WORLD_BORDERS-0.3.zip`。
- en: 'Note that the shapefile comes in the form of a ZIP archive. This is because
    a shapefile consists of multiple files, and it is easier to distribute them if
    they are stored in a ZIP archive. After downloading the file, double-click on
    the ZIP archive to decompress it. You will end up with a directory named `TM_WORLD_BORDERS-0.3`.
    Inside this directory should be the following files:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，shapefile 以 ZIP 归档的形式提供。这是因为 shapefile 由多个文件组成，如果它们存储在 ZIP 归档中，则更容易分发。下载文件后，双击
    ZIP 归档以解压缩它。你将得到一个名为 `TM_WORLD_BORDERS-0.3` 的目录。在这个目录中应该包含以下文件：
- en: '![Obtaining some geospatial data](img/4516OS_01_08.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![获取一些地理空间数据](img/4516OS_01_08.jpg)'
- en: 'The following table explains these various files and what information they
    contain:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格解释了这些不同的文件以及它们包含的信息：
- en: '| Filename | Description |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| 文件名 | 描述 |'
- en: '| --- | --- |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `Readme.txt` | This is your typical README file, containing useful information
    about the shapefile. |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| `Readme.txt` | 这是你的典型 README 文件，包含有关 shapefile 的有用信息。|'
- en: '| `TM_WORLD_BORDERS-0.3.shp` | This file contains the geometry data for each
    feature. |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| `TM_WORLD_BORDERS-0.3.shp` | 该文件包含每个特征的几何数据。|'
- en: '| `TM_WORLD_BORDERS-0.3.shx` | This is an index into the `.shp` file, making
    it possible to quickly access the geometry for a given feature. |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| `TM_WORLD_BORDERS-0.3.shx` | 这是一个 `.shp` 文件的索引，使得可以快速访问给定特征的几何形状。|'
- en: '| `TM_WORLD_BORDERS-0.3.dbf` | This is a database file holding the various
    attributes for each feature. |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| `TM_WORLD_BORDERS-0.3.dbf` | 这是一个数据库文件，包含每个特征的各个属性。|'
- en: '| `TM_WORLD_BORDERS-0.3.prj` | This file describes the coordinate system and
    projection used by the data, as a plain text file. |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| `TM_WORLD_BORDERS-0.3.prj` | 此文件以纯文本文件的形式描述了数据使用的坐标系统和投影。|'
- en: Place this directory somewhere convenient. We will be using this dataset extensively
    throughout this book, so you may want to keep a backup copy somewhere.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 将此目录放置在方便的位置。我们将在整本书中广泛使用这个数据集，因此您可能希望在某个地方保留一个备份副本。
- en: Unlocking the shapefile
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解锁 shapefile
- en: At last, we are ready to start working with some geospatial data. Open up a
    command line or terminal window and `cd` into the `TM_WORLD_BORDERS-0.3` directory
    you unzipped earlier. Then type `python` to fire up your Python interpreter.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们准备好开始处理一些地理空间数据。打开一个命令行或终端窗口，并将 `cd` 命令切换到您之前解压缩的 `TM_WORLD_BORDERS-0.3`
    目录。然后输入 `python` 来启动您的 Python 解释器。
- en: 'We''re going to start by loading the OGR library we installed earlier:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先加载我们之前安装的 OGR 库：
- en: '[PRE4]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We next want to open the `shapefile` using OGR:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们想使用 OGR 打开 `shapefile`：
- en: '[PRE5]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'After executing this statement, the `shapefile` variable will hold an `osgeo.ogr.Datasource`
    object representing the geospatial data source we have opened. OGR data sources
    can support multiple layers of information, even though a `shapefile` has only
    a single layer. For this reason, we next need to extract the (one and only) layer
    from the shapefile:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此语句后，`shapefile` 变量将包含一个 `osgeo.ogr.Datasource` 对象，它代表我们打开的地理空间数据源。OGR 数据源可以支持多个信息层，尽管
    `shapefile` 只有一个层。因此，我们接下来需要从 shapefile 中提取（唯一的一个）层：
- en: '[PRE6]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let''s iterate through the various features within the shapefile, processing
    each feature in turn. We can do this using the following:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们遍历 shapefile 中的各种特征，依次处理每个特征。我们可以使用以下方法：
- en: '[PRE7]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The `feature` object, an instance of `osgeo.ogr.Feature`, allows us to access
    the geometry associated with the feature, along with the feature''s attributes.
    According to the `README.txt` file, the country''s name is stored in an attribute
    called `NAME`. Let''s extract that name now:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`feature` 对象，`osgeo.ogr.Feature` 的一个实例，允许我们访问与特征相关的几何形状以及特征的属性。根据 `README.txt`
    文件，国家的名称存储在一个名为 `NAME` 的属性中。现在让我们提取这个名称：'
- en: '[PRE8]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Notice that the attribute is in uppercase. Shapefile attributes are case sensitive,
    so you have to use the exact capitalization to get the right attribute. Using
    `feature.getField("name")` would generate an error.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，属性是大写的。Shapefile 属性是区分大小写的，因此你必须使用确切的字母大小写才能获取正确的属性。使用 `feature.getField("name")`
    会生成错误。
- en: 'To get a reference to the feature''s geometry object, we use the `GetGeometryRef()`
    method:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取特征几何对象的引用，我们使用 `GetGeometryRef()` 方法：
- en: '[PRE9]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We can do all sorts of things with geometries, but for now, let''s just see
    what type of geometry we''ve got. We can do this using the `GetGeometryName()`
    method:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用几何形状做很多事情，但就目前而言，让我们看看我们有什么类型的几何形状。我们可以使用 `GetGeometryName()` 方法来做到这一点：
- en: '[PRE10]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Finally, let''s print out the information we have extracted for this feature:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们打印出我们为此特征提取的信息：
- en: '[PRE11]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Here is the complete mini-program we''ve written to unlock the contents of
    the shapefile:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我们编写的完整小程序，用于解锁 shapefile 的内容：
- en: '[PRE12]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If you press **Return** a second time to close off the `for` loop, your program
    will run, displaying useful information about each country extracted from the
    shapefile:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您第二次按 **Return** 键来关闭 `for` 循环，程序将运行，显示从 shapefile 中提取的每个国家的有用信息：
- en: '[PRE13]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Notice that the geometry associated with some countries is a polygon, while
    for other countries the geometry is a multipolygon. As the name suggests, a multipolygon
    is simply a collection of polygons. Because the geometry represents the outline
    of each country, a polygon is used where the country''s outline can be represented
    by a single shape, while a multipolygon is used when the outline has multiple
    parts. This most commonly happens when a country is made up of multiple islands.
    For example:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，一些国家的几何形状是多边形，而其他国家的几何形状是多边形集合。正如其名称所暗示的，多边形集合只是一系列多边形。因为几何形状代表每个国家的轮廓，所以当国家的轮廓可以用单个形状表示时，使用多边形；而当轮廓有多个部分时，使用多边形集合。这种情况最常见于由多个岛屿组成的国家。例如：
- en: '![Unlocking the shapefile](img/4516OS_01_09.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![解锁 shapefile](img/4516OS_01_09.jpg)'
- en: As you can see, Algeria is represented by a polygon, while Australia with its
    outlying islands would be a multipolygon.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，阿尔及利亚由一个多边形表示，而澳大利亚及其外围岛屿则是一个多边形。
- en: Analyzing the data
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分析数据
- en: 'In the previous section, we obtained an `osgeo.ogr.Geometry` object representing
    each country''s outline. While there are a number of things we can do with this
    geometry object directly, in this case we''ll take the outline and copy it into
    Shapely so that we can take advantage of Shapely''s geospatial analysis capabilities.
    To do this, we have to export the geometry object out of OGR and import it as
    a Shapely object. For this, we''ll use the WKT format. Still in the Python interpreter,
    let''s grab a single feature''s geometry and convert it into a Shapely object:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们得到了一个表示每个国家轮廓的`osgeo.ogr.Geometry`对象。虽然我们可以直接对这个几何对象做很多事情，但在这个例子中，我们将轮廓复制到Shapely中，以便我们可以利用Shapely的地理空间分析功能。为此，我们必须将几何对象从OGR导出，并将其作为Shapely对象导入。为此，我们将使用WKT格式。仍然在Python解释器中，让我们获取单个特征的几何形状并将其转换为Shapely对象：
- en: '[PRE14]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Because we loaded feature number `0`, we retrieved the outline for Antigua
    and Barbuda, which would look like the following if we displayed it on a map:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 因为加载了特征编号`0`，我们检索到了安提瓜和巴布达的轮廓，如果我们在地图上显示它，看起来会像以下这样：
- en: '![Analyzing the data](img/4516OS_01_10.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![分析数据](img/4516OS_01_10.jpg)'
- en: 'The `outline` variable holds the outline of this country in the form of a Shapely
    `MultiPolygon` object. We can now use this object to analyze the geometry. Here
    are a few useful things we can do with a Shapely geometry:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`outline`变量以Shapely `MultiPolygon`对象的形式保存了这个国家的轮廓。现在我们可以使用这个对象来分析几何形状。以下是一些我们可以用Shapely几何形状做的有用事情：'
- en: We can calculate the **centroid**, which is the center-most point in the geometry.
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以计算**质心**，这是几何形状中中心位置的点。
- en: We can calculate the **bounding box** for the geometry. This is a rectangle
    defining the northern, southern, eastern, and western edges of the polygon.
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以计算几何形状的**边界框**。这是一个定义多边形北部、南部、东部和西部边缘的矩形。
- en: We can calculate the **intersection** between two geometries.
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以计算两个几何形状之间的**交集**。
- en: We can calculate the **difference** between two geometries.
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以计算两个几何形状之间的**差值**。
- en: Note
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We could also calculate values such as the length and area of each polygon.
    However, because the World Borders Dataset uses what are called *unprojected coordinates*,
    the resulting length and area values would be measured in degrees rather than
    meters or miles. This means that the calculated lengths and areas wouldn't be
    very useful. We will look at the nature of map projections in the following chapter
    and find a way to get around this problem so we can calculate meaningful length
    and area values for polygons. But that's too complex for us to tackle right now.
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们还可以计算诸如每个多边形的长度和面积等值。然而，因为World Borders Dataset使用所谓的*未投影坐标*，所以得到的长度和面积值将以度为单位来衡量，而不是米或英里。这意味着计算出的长度和面积可能不太有用。我们将在下一章探讨地图投影的性质，并找到一种方法来解决这个问题，这样我们就可以为多边形计算有意义的长度和面积值。但这对于我们来说现在太复杂了。
- en: 'Let''s display the latitude and longitude for our feature''s centroid:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们显示我们特征质心的纬度和经度：
- en: '[PRE15]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Because Shapely doesn't know which coordinate system the polygon is in, it uses
    the more generic `x` and `y` attributes for a point, rather than talking about
    latitude and longitude values. Remember that latitude corresponds to a position
    in the north-south direction, which is the `y` value, while longitude is a position
    in the east-west direction, which is the `x` value.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 因为Shapely不知道多边形位于哪个坐标系中，它使用更通用的`x`和`y`属性来表示一个点，而不是讨论经纬度值。记住，纬度对应南北方向的位置，即`y`值，而经度是东西方向的位置，即`x`值。
- en: 'We can also display the outline''s bounding box:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以显示大纲的边界框：
- en: '[PRE16]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In this case, the returned values are the minimum longitude and latitude and
    the maximum longitude and latitude (that is, `min_x`, `min_y`, `max_x`, `max_y`).
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，返回的值是最小经纬度和最大经纬度（即`min_x`、`min_y`、`max_x`、`max_y`）。
- en: There's a lot more we can do with Shapely, of course, but this is enough to
    prove that the Shapely library is working, and that we can read geospatial data
    from a shapefile and convert it into a Shapely geometry object for analysis.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们可以用Shapely做更多的事情，但这足以证明Shapely库正在工作，并且我们可以从shapefile中读取地理空间数据并将其转换为Shapely几何对象进行分析。
- en: 'This is as far as we want to go with using the Python shell directly—the shell
    is great for quick experiments like this, but it quickly gets tedious having to
    retype lines (or use the command history) when you make a typo. For anything more
    serious, you will want to write a Python program. In the final section of this
    chapter, we''ll do exactly that: create a Python program that builds on what we
    have learned to solve a useful geospatial analysis problem.'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们使用Python shell直接进行的极限——shell对于这种快速实验来说很棒，但当你打字错误时，不得不重新输入行（或使用命令历史）会很快变得令人厌烦。对于任何更严肃的事情，您将想要编写一个Python程序。在本章的最后部分，我们将做
    exactly that：创建一个基于我们所学知识来解决有用地理空间分析问题的Python程序。
- en: A program to identify neighboring countries
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个识别邻国程序
- en: For our first real geospatial analysis program, we are going to write a Python
    script that identifies neighboring countries. The basic concept is to extract
    the polygon or multipolygon for each country and see which other countries each
    polygon or multipolygon touches. For each country, we will display a list of other
    countries that border that country.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的第一个真正的地理空间分析程序，我们将编写一个Python脚本，用于识别邻国。基本概念是提取每个国家的多边形或复合多边形，并查看哪些其他国家与每个多边形或复合多边形接触。对于每个国家，我们将显示一个与该国接壤的其他国家的列表。
- en: 'Let''s start by creating the Python script. Create a new file named `borderingCountries.py`
    and place it in the same directory as the `TM_WORLD_BORDERS-0.3.shp` shapefile
    you downloaded earlier. Then enter the following into this file:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建Python脚本开始。创建一个名为`borderingCountries.py`的新文件，并将其放置在您之前下载的`TM_WORLD_BORDERS-0.3.shp`形状文件所在的同一目录中。然后输入以下内容到这个文件中：
- en: '[PRE17]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: So far, this is pretty straightforward. We are using the techniques we learned
    earlier to read the contents of the shapefile into memory and converting each
    country's geometry into a Shapely object. The results are stored in the `countries`
    dictionary. Finally, notice that we've placed the program logic into a function
    called `main()`—this is good practice as it lets us use a `return` statement to
    handle errors.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，这相当直接。我们正在使用我们之前学到的技术将形状文件的内容读入内存，并将每个国家的几何形状转换为Shapely对象。结果存储在`countries`字典中。最后，请注意，我们将程序逻辑放入了一个名为`main()`的函数中——这是一个好的实践，因为它允许我们使用`return`语句来处理错误。
- en: 'Now run your program just to make sure it works:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行您的程序以确保它正常工作：
- en: '[PRE18]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Our next task is to identify the bordering countries. Our basic logic will
    be to iterate through each country and then find the other countries that border
    this one. Here is the relevant code, which you should add to the end of your `main()`
    function:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来的任务是识别接壤国家。我们的基本逻辑是遍历每个国家，然后找到与这个国家接壤的其他国家。以下是相关代码，您应该将其添加到`main()`函数的末尾：
- en: '[PRE19]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: As you can see, we use the `touches()` method to check if the two countries'
    geometries are touching.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们使用`touches()`方法来检查两个国家的几何形状是否接触。
- en: 'Running this program will now show you the countries that border each other:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此程序现在将显示相邻的国家：
- en: '[PRE20]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Congratulations! You have written a simple Python program to analyze country
    outlines. Of course, there is a lot that could be done to improve and extend this
    program. For example:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您已经编写了一个简单的Python程序来分析国家轮廓。当然，还有很多可以改进和扩展这个程序的地方。例如：
- en: You could add command-line arguments to let the user specify the name of the
    shapefile and which attribute to use to display the country name.
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以添加命令行参数，让用户指定形状文件的名称以及用于显示国家名称的属性。
- en: You could add error checking to handle invalid and non-existent shapefiles.
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以添加错误检查来处理无效和非存在的形状文件。
- en: You could add error checking to handle invalid geometries.
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以添加错误检查来处理无效的几何形状。
- en: You could use a spatial database to speed up the process. The program currently
    takes about a minute to complete, but using a spatial database would speed that
    up dramatically. If you are dealing with a large amount of spatial data, properly
    indexed databases are absolutely critical or your program might take weeks to
    run.
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以使用空间数据库来加快处理过程。程序目前需要大约一分钟来完成，但使用空间数据库将大大加快这个过程。如果您处理的是大量空间数据，正确索引的数据库绝对是必不可少的，否则您的程序可能需要几周时间才能运行。
- en: We will look at all these things later in the book.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本书的后面部分讨论所有这些内容。
- en: Summary
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, we started our exploration of geospatial analysis by looking
    at the types of problems you would typically have to solve and the types of data
    that you will be working with. We discovered and installed two major Python libraries
    to work with geospatial data: GDAL/OGR to read (and write) data, and Shapely to
    perform geospatial analysis and manipulation. We then downloaded a simple but
    useful shapefile containing country data, and learned how to use the OGR library
    to read the contents of that shapefile.'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们通过探讨你通常需要解决的问题类型以及你将要处理的数据类型，开始了对地理空间分析的探索。我们发现并安装了两个主要的Python库来处理地理空间数据：GDAL/OGR用于读取（和写入）数据，以及Shapely用于执行地理空间分析和操作。然后我们下载了一个包含国家数据的简单但有用的shapefile，并学习了如何使用OGR库读取该shapefile的内容。
- en: Next, we saw how to convert an OGR geometry object into a Shapely geometry,
    and then used the Shapely library to analyze and manipulate that geometry. Finally,
    we created a simple Python program that combines everything we have learned, loading
    country data into memory and then using Shapely to find countries which border
    each other.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 接着，我们看到了如何将OGR几何对象转换为Shapely几何对象，然后使用Shapely库来分析和操作该几何对象。最后，我们创建了一个简单的Python程序，结合了我们所学的一切，将国家数据加载到内存中，然后使用Shapely找到相互接壤的国家。
- en: In the next chapter, we will delve deeper into the topic of geospatial data,
    learning more about geospatial data types and concepts, as well as exploring some
    of the major sources of freely available geospatial data. We will also learn why
    it is important to have good data to work with—and what happens if you don't.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将更深入地探讨地理空间数据的话题，了解更多的地理空间数据类型和概念，以及探索一些主要的免费地理空间数据来源。我们还将学习为什么拥有良好的数据来工作很重要——以及如果你没有良好的数据会发生什么。
