["```py\nfrom IPython.core.display import display\n```", "```py\ndisplay(qc.draw('mpl'))\n```", "```py\n{'1': 1} \n```", "```py\n{'0': 495, '1': 505}\n```", "```py\n{'100': 113, '111': 139, '001': 112, '101': 114, '010': 121, '011': 133, '000': 134, '110': 134}\n```", "```py\n[0.70710678+0.j 0.70710678+0.j]\n```", "```py\n    from qiskit import QuantumRegister, ClassicalRegister\n    from qiskit import QuantumCircuit, Aer, execute\n    from qiskit.tools.visualization import plot_histogram\n    from IPython.core.display import display\n    ```", "```py\n    q = QuantumRegister(1)\n    c = ClassicalRegister(1)\n    qc = QuantumCircuit(q, c)\n    ```", "```py\n    qc.h(q[0])\n    qc.measure(q, c)\n    display(qc.draw('mpl'))\n    ```", "```py\n    backend = Aer.get_backend('qasm_simulator')\n    ```", "```py\n    job = execute(qc, backend, shots=1)\n    result = job.result()\n    counts = result.get_counts(qc)\n    ```", "```py\n    print(counts)\n    display(plot_histogram(counts))\n    ```", "```py\n    {'0': 1}\n    ```", "```py\n    from qiskit import QuantumRegister, ClassicalRegister\n    from qiskit import QuantumCircuit, Aer, execute\n    from qiskit.tools.visualization import plot_histogram\n    from IPython.core.display import display\n    ```", "```py\n    q = QuantumRegister(1)\n    c = ClassicalRegister(1)\n    qc = QuantumCircuit(q, c)\n    ```", "```py\n    qc.h(q[0])\n    qc.measure(q, c)\n    display(qc.draw('mpl'))\n    ```", "```py\n    backend = Aer.get_backend('qasm_simulator')\n    ```", "```py\n    job = execute(qc, backend, shots=1000)\n    result = job.result()\n    counts = result.get_counts(qc)\n    ```", "```py\n    print(counts)\n    display(plot_histogram(counts))\n    ```", "```py\n    {'0': 480, '1': 520}\n    ```", "```py\njob = execute(circuit, backend, shots=10, memory=True)\n```", "```py\n['1', '1', '0', '0', '1', '1', '0', '1', '0', '0']\n```", "```py\n['10', '10', '10', '11', '11', '00', '10', '10', '01', '00']\n```", "```py\n    from qiskit import QuantumCircuit, Aer, execute\n    from qiskit.visualization import plot_histogram\n    from IPython.core.display import display\n    ```", "```py\n    qc = QuantumCircuit(1, 1)\n    ```", "```py\n    qc.x(0)\n    qc.h(0)\n    qc.measure(0, 0)\n    ```", "```py\n    backend = Aer.get_backend('qasm_simulator')\n    ```", "```py\n    counts = execute(qc, backend, shots=1).result().    get_counts(qc)\n    ```", "```py\n    display(plot_histogram(counts))\n    ```", "```py\n    initial_vector = [0.+0.j, 1.+0.j]qc.initialize(initial_vector, 0)\n    ```", "```py\n    qc.x(0)\n    ```", "```py\n    initial_vector = [0.+0.j, 1.+0.j]\n    ```", "```py\n    from qiskit import QuantumCircuit, Aer, execute\n    from qiskit.tools.visualization import plot_histogram\n    from IPython.core.display import display\n    ```", "```py\n    qc = QuantumCircuit(2, 2)\n    ```", "```py\n    qc.h([0,1])\n    qc.measure([0,1],[0,1])\n    display(qc.draw('mpl'))\n    ```", "```py\n    backend = Aer.get_backend('qasm_simulator')\n    ```", "```py\n    counts = execute(qc, backend, shots=1).result().    get_counts(qc)\n    ```", "```py\n    display(plot_histogram(counts))\n    ```", "```py\n{'00101011101110011011': 1}\n```", "```py\n179099\n```", "```py\n    from qiskit import QuantumCircuit, Aer, execute\n    from qiskit.tools.visualization import plot_histogram\n    from IPython.core.display import display\n    ```", "```py\n    qc = QuantumCircuit(2, 2)\n    ```", "```py\n    qc.h(0)\n    qc.cx(0,1)\n    qc.measure([0,1],[0,1])\n    display(qc.draw('mpl'))\n    ```", "```py\n    backend = Aer.get_backend('qasm_simulator')\n    ```", "```py\n    counts = execute(qc, backend, shots=1).result().    get_counts(qc)\n    ```", "```py\n    display(plot_histogram(counts))\n    ```", "```py\n    counts = execute(qc, backend, shots=1000).result().get_counts(qc)\n    ```", "```py\n{'10': 542, '01': 458}\n```", "```py\n    from qiskit import QuantumCircuit, Aer, execute\n    from qiskit.tools.visualization import plot_histogram\n    from IPython.core.display import display\n    from math import pi\n    ```", "```py\n    qc = QuantumCircuit(1, 1)\n    ```", "```py\n    qc.h(0)\n    qc.ry(pi/8,0)\n    qc.measure(0, 0)\n    display(qc.draw('mpl'))\n    ```", "```py\n    backend = Aer.get_backend('qasm_simulator')\n    ```", "```py\n    counts = execute(qc, backend, shots=1000).result().    get_counts(qc)\n    ```", "```py\n    display(plot_histogram(counts))\n    ```", "```py\n# Function that returns the statevector (Psi) for the circuit\ndef get_psi(circuit):\n    show_bloch=False\n    if show_bloch:\n        from qiskit.visualization import plot_bloch_multivector\n        backend = Aer.get_backend('statevector_simulator') \n        result = execute(circuit, backend).result()\n        psi = result.get_statevector(circuit)\n        print(title)\n        display(qc.draw('mpl'))\n        display(plot_bloch_multivector(psi))  \n```", "```py\n    from qiskit import QuantumCircuit, Aer, execute\n    from qiskit.tools.visualization import plot_histogram\n    from IPython.core.display import display\n    ```", "```py\n    qc = QuantumCircuit(3, 6)\n    ```", "```py\n    qc.h([0,1,2])\n    qc.measure([0,1,2],[0,1,2])\n    display(qc.draw('mpl'))\n    ```", "```py\n    backend = Aer.get_backend('qasm_simulator')\n    ```", "```py\n    counts = execute(qc, backend, shots=1000).result().    get_counts(qc)\n    ```", "```py\n    display(plot_histogram(counts))\n    ```", "```py\n    qc.barrier([0,1,2])\n    qc.reset([0,1,2])\n    qc.h(0)\n    qc.cx(0,1)\n    qc.cx(0,2)\n    qc.measure([0,1,2],[3,4,5])\n    display(qc.draw('mpl'))\n    ```", "```py\n    counts = execute(qc, backend, shots=1000).result().    get_counts(qc)\n    ```", "```py\n    display(plot_histogram(counts))\n    ```", "```py\n    from qiskit import QuantumCircuit, execute\n    from qiskit import IBMQ\n    from qiskit.tools.monitor import job_monitor\n    from IPython.core.display import display\n    ```", "```py\n    IBMQ.load_account()\n    provider = IBMQ.get_provider()\n    ```", "```py\n    qc = QuantumCircuit(2, 2)\n    ```", "```py\n    qc.h(0)\n    qc.cx(0,1)\n    qc.measure([0,1],[0,1])\n    display(qc.draw('mpl'))\n    ```", "```py\n    from qiskit.providers.ibmq import least_busy\n    backend = least_busy(provider.backends(n_qubits=5,    operational=True, simulator=False))\n    print(backend.name())\n    ibmq_essex\n    ```", "```py\n    job = execute(qc, backend, shots=1000)\n    job_monitor(job)\n    Job Status: job has successfully run\n    ```", "```py\n    result = job.result()\n    counts = result.get_counts(qc)\n    from qiskit.tools.visualization import plot_histogram\n    display(plot_histogram(counts))\n    ```", "```py\nfrom qiskit import IBMQ\nIBMQ.load_account()\nprovider = IBMQ.get_provider()\nprovider.backends()\n```", "```py\n[<IBMQSimulator('ibmq_qasm_simulator') from IBMQ(hub='ibm-q', group='open', project='main')>,\n <IBMQBackend('ibmqx2') from IBMQ(hub='ibm-q', group='open', project='main')>,\n <IBMQBackend('ibmq_16_melbourne') from IBMQ(hub='ibm-q', group='open', project='main')>,\n <IBMQBackend('ibmq_vigo') from IBMQ(hub='ibm-q', group='open', project='main')>,\n <IBMQBackend('ibmq_ourense') from IBMQ(hub='ibm-q', group='open', project='main')>,\n <IBMQBackend('ibmq_london') from IBMQ(hub='ibm-q', group='open', project='main')>,\n <IBMQBackend('ibmq_burlington') from IBMQ(hub='ibm-q', group='open', project='main')>,\n <IBMQBackend('ibmq_essex') from IBMQ(hub='ibm-q', group='open', project='main')>,\n <IBMQBackend('ibmq_armonk') from IBMQ(hub='ibm-q', group='open', project='main')>]\n```", "```py\nnamespace(backend_name='ibmq_burlington',\n          backend_version='1.1.4',\n          qobj_id='630c02ca-7d06-4430-91e8-8ef08b9f5a63',\n          job_id='5f15dec89def8b001b437dfe',\n          success=True,\n          results=[namespace(shots=1000,\n                        success=True,\n                        data=namespace(counts=namespace(                                                       0x0=471,\n                                                     0x1=529)),\n                        meas_level=2,\n                        header=namespace(memory_slots=2,\n                                         qreg_sizes=[['q', 5]],\n                                         qubit_labels=[['q',0],\n                                                       ['q',1],\n                                                       ['q',2],\n                                                       ['q',3],\n                                                      ['q',4]],\n                                         name='circuit58',\n                                         n_qubits=5,\n                                         creg_sizes=[['c', 2]],\n                                         clbit_labels=[['c',0],\n                                                     ['c',1]]),\n                        memory=False)],\n          status='Successful completion',\n          header=namespace(backend_version='1.1.4',\n                        backend_name='ibmq_burlington'),\n          date=datetime.datetime(2020, 7, 20, 18, 13, 44, tzinfo=datetime.timezone.utc),\n          time_taken=7.400392055511475,\n          execution_id='bc4d19d0-cab4-11ea-b9ba-ac1f6b46a78e')\n```", "```py\njob.job_id()\nOut[]: '5f15dec89def9b001b437dfe'\n```", "```py\nget_result=backend.retrieve_job(<jobid>)\n```", "```py\ncounts = get_result.result().get_counts()\nprint(counts)\n```", "```py\nOut[]: {'11': 339, '10': 174, '00': 339, '01': 172}\n```", "```py\nprint(backend.retrieve_job(<jobid>).status())\n```", "```py\nOut[]: JobStatus.QUEUED\nOut[]: JobStatus.RUNNING\nOut[]: JobStatus.DONE\n```"]