- en: '4'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '4'
- en: Transportation Data
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运输数据
- en: This chapter tackles transportation logistics, which involves the movement of
    supplies or goods from one location to another. We’ll introduce a goods delivery
    problem to find the optimal routing of supplies to minimize the delivery time
    and cost to deliver the goods. We’ll explore shortest paths, optimal routes to
    visit all necessary locations, and scaling algorithms to large networks. Further,
    we’ll examine caveats to simple distance weightings to calculate route optimality,
    considering delivery hazards on routes that can influence optimality.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章探讨了运输物流，涉及将供应或商品从一处地点移动到另一处地点。我们将介绍一个货物配送问题，以找到最佳路线，以最小化配送时间和成本来交付商品。我们将探讨最短路径、访问所有必要地点的最佳路线，以及将算法扩展到大型网络的缩放算法。此外，我们还将检查简单距离加权的潜在问题，以计算路线最优性，考虑路线上的配送风险，这些风险可能会影响最优性。
- en: When you have finished this chapter, you’ll understand how to frame transportation
    problems as network problems and scale them to very large routing networks using
    Python.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本章后，你将了解如何将运输问题表述为网络问题，并使用Python将其扩展到非常大的路由网络。
- en: 'Specifically, we will cover the following topics in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，本章将涵盖以下内容：
- en: Introduction to transportation problems
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运输问题简介
- en: Shortest path applications
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最短路径应用
- en: Traveling salesman problem
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 旅行商问题
- en: '**Maximum flow/minimum cut** (**max-flow** **min-cut**) algorithm'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最大流/最小割**（**max-flow** **min-cut**）算法'
- en: Let’s get started with some basic problems in transportation logistics.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从运输物流的一些基本问题开始吧。
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You will require Jupyter Notebook to run the practical examples in this chapter.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要Jupyter Notebook来运行本章中的实践示例。
- en: 'The code for this chapter is available here: [https://github.com/PacktPublishing/Modern-Graph-Theory-Algorithms-with-Python](https://github.com/PacktPublishing/Modern-Graph-Theory-Algorithms-with-Python)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码可在以下链接找到：[https://github.com/PacktPublishing/Modern-Graph-Theory-Algorithms-with-Python](https://github.com/PacktPublishing/Modern-Graph-Theory-Algorithms-with-Python)
- en: Introduction to transportation problems
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运输问题简介
- en: Physical goods and supplies are important in many industries, and the movement
    of goods between locations represents an important problem in industries such
    as consumer-packaged goods, retail, military, and manufacturing. **Supply chain
    logistics**—the science of acquiring, transporting, and storing resources—influences
    many aspects of business in these industry sectors. Without goods to sell, a company
    cannot turn a profit. Without materials to manufacture goods, products cannot
    be made or transported to vendors.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 物理商品和供应在许多行业中都很重要，商品在地点之间的移动代表了消费包装商品、零售、军事和制造业等行业的一个重要问题。**供应链物流**——获取、运输和储存资源的科学——影响着这些行业部门的许多商业方面。没有商品出售，公司就无法盈利。没有材料来制造商品，产品就无法制造或运送到供应商那里。
- en: During the COVID-19 pandemic, many critical supply chain routes shut down, leaving
    long waits for goods in many parts of the world or facing higher prices for necessities
    such as food. Crises such as the Ukraine war can leave entire countries short
    of food, creating humanitarian crises in other areas. Many supply chain logistics
    problems can be formulated through the lens of network science, and graph theory
    offers several useful tools to plan out the best routes to stock goods or materials
    across locations. In this chapter, we’ll learn more about supply chain logistics
    and leverage tools from graph theory to plan supply routes between grocery stores.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在COVID-19大流行期间，许多关键的供应链路线关闭，导致世界许多地区的商品供应出现长时间等待，或者必需品如食品的价格上涨。像乌克兰战争这样的危机可能导致整个国家粮食短缺，在其他地区造成人道主义危机。许多供应链物流问题可以通过网络科学的视角来表述，图论提供了几个有用的工具来规划在不同地点之间存储货物或材料的最佳路线。在本章中，我们将更多地了解供应链物流，并利用图论工具来规划超市之间的供应路线。
- en: Paths between stores
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 商店之间的路径
- en: 'A common supply chain logistics problem retailers face is the transportation
    of goods across several stores in an area. For instance, consider a suburban area
    with five grocery stores belonging to the same chain spread out across the area,
    as depicted in *Figure 4**.1*:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 零售商面临的一个常见供应链物流问题是跨区域运输商品。例如，考虑一个郊区，该地区有五个属于同一连锁品牌的超市分散在该地区，如图*4.1*所示：
- en: '![Figure 4.1 – A metro area with five grocery stores from the same chain](img/B21087_04_01.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![图4.1 – 一个包含五个同链超市的都市区](img/B21087_04_01.jpg)'
- en: Figure 4.1 – A metro area with five grocery stores from the same chain
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**图4.1** – 一个拥有五个连锁超市的都市区域'
- en: 'The metro area of *Figure 4**.1* shows stores that are nearby (right corner)
    and some that are further away from each other (such as the ones on the left).
    Perhaps we are transporting fresh fruit and vegetables from a nearby farm to each
    of the five stores. Without considering streets, fuel stops, or other considerations
    (we’ll discuss these later in the chapter), it seems like a route between stores
    would be easy to define. One such path is shown in *Figure 4**.2*:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**图4**.1的都市区域显示了附近（右角）的一些商店以及彼此之间较远的商店（如左侧的商店）。也许我们正在将新鲜水果和蔬菜从附近的农场运送到每个商店。不考虑街道、加油站点或其他考虑因素（我们将在本章后面讨论这些），似乎定义商店之间的路线很容易。其中一条路径在**图4**.2中显示：'
- en: '![Figure 4.2 – A routing plan to deliver fruit and vegetables to each of the
    grocery stores in the hypothetical suburban area](img/B21087_04_02.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![**图4.2** – 一个为假设的郊区区域中的每个超市配送水果和蔬菜的路线计划](img/B21087_04_02.jpg)'
- en: Figure 4.2 – A routing plan to deliver fruit and vegetables to each of the grocery
    stores in the hypothetical suburban area
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**图4.2** – 一个为假设的郊区区域中的每个超市配送水果和蔬菜的路线计划'
- en: Contrary to *Figure 4**.2*, in a real situation, there are likely to be many
    routes between stores a truck could take. Alternative streets and combinations
    of routes might exist. The truck may need fuel between stores, and the locations
    of gas stations might influence which route is ideal. Roads may be closed for
    construction. Afternoon thunderstorms might flood some of the streets on good
    routes, creating hazards that the truck needs to avoid. Some stores might be out
    of oranges and grapefruit, giving them priority for early deliveries so that customers
    can purchase these fruits.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 与**图4**.2相反，在实际情况中，卡车可能需要经过许多路线才能到达商店。可能存在替代街道和路线组合。卡车在商店之间可能需要加油，加油站的位置可能会影响哪条路线是最理想的。道路可能因施工而关闭。下午的雷暴雨可能会淹没一些良好路线上的街道，给卡车带来需要避免的危险。一些商店可能没有橙子和葡萄柚，因此需要优先安排早些时候的配送，以便顾客可以购买这些水果。
- en: 'Over larger distances, the question of transportation mode also arises. Shipping
    by sea or routing goods by plane might be preferable if obstacles such as oceans
    or mountain ranges exist between stores that need stocking. Since the world globalized,
    it is common for goods to travel across continents and oceans (shipping is shown
    in *Figure 4**.3*):'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在更长的距离上，运输方式的问题也会出现。如果需要补充库存的商店之间存在海洋或山脉等障碍，通过海上运输或通过飞机运输货物可能更可取。自从世界全球化以来，商品跨越大陆和海洋运输（海运在**图4**.3中显示）是常见的：
- en: "![Figure 4.3 – \uFEFFAn illustration of a cargo ship leaving port](img/B21087_04_03.jpg)"
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![**图4.3** – 一艘离开港口的货船的插图](img/B21087_04_03.jpg)'
- en: Figure 4.3 – An illustration of a cargo ship leaving port
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**图4.3** – 一艘离开港口的货船的插图'
- en: Many products or parts of products used in the United States and Europe come
    from China, Japan, or India. Travel by sea can provide cheaper and quicker alternatives
    to land or air delivery. One of the key problems in supply chain logistics is
    balancing the needs for cost-effectiveness, **time-to-delivery** (**TTD**), and
    the need for bulk goods movements. Let’s dive into some of these considerations
    in more detail.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在美国和欧洲使用的许多产品或产品部件来自中国、日本或印度。海上运输可以提供比陆路或空运更便宜、更快捷的替代方案。供应链物流中的一个关键问题是平衡成本效益、**交货时间**（**TTD**）和大量货物移动的需求。让我们更详细地探讨一些这些考虑因素。
- en: Fuel costs
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 燃料成本
- en: One of the pressing problems in logistics today is the optimization of a route
    with respect to the cost of delivery. Customers don’t want to pay high prices
    for delivery or wait long periods of time for goods to arrive. Since the COVID-19
    shutdowns and the Ukraine war, fuel prices have increased, and some routes for
    goods are no longer available. This drives up costs for manufacturers, businesses
    that need to move goods to physical locations, and consumers buying goods from
    businesses.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当今物流中一个紧迫的问题是关于配送成本优化路线。顾客不希望为配送支付高价或等待很长时间等待货物到达。自COVID-19关闭和乌克兰战争以来，燃料价格上升，一些货物路线不再可用。这推高了制造商、需要将货物运送到物理位置的商家以及从商家购买商品的消费者的成本。
- en: 'Ground routes, particularly when coupled with electric delivery vehicles (shown
    in *Figure 4**.4(a)*), can provide a good option for companies operating locally.
    However, many supply chains depend on parts or goods located overseas, and options
    such as shipping (shown in *Figure 4**.4(b)*) or air travel are necessary:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 地面路线，尤其是当与电动配送车辆（如图4.4(a)所示）结合使用时，可以为本地运营的公司提供良好的选择。然而，许多供应链依赖于海外定位的部件或商品，因此需要如运输（如图4.4(b)所示）或航空旅行等选项：
- en: "![Figure 4.4 – \uFEFFAn illustration of: (a) A semi-truck used to haul goods\
    \ domestically and (b) a shipping option to move goods overseas](img/B21087_04_04.jpg)"
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图4.4 – 以下插图：（a）用于国内运输的半挂车和（b）用于海外运输的运输选项](img/B21087_04_04.jpg)'
- en: 'Figure 4.4 – An illustration of: (a) A semi-truck used to haul goods domestically
    and (b) a shipping option to move goods overseas'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.4 – 以下插图：（a）用于国内运输的半挂车和（b）用于海外运输的运输选项
- en: However, the cost of fuel is rarely the only consideration, as time is critical
    for any goods that might spoil and as safety concerns related to cargo loss often
    take precedence over fuel costs in real-world problems. Let’s consider some scenarios
    where TTD is an important consideration in the optimization algorithms used to
    schedule delivery times, routes, and best modes of transportation.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，燃料成本很少是唯一考虑因素，因为对于可能变质的任何商品来说，时间是关键，而在现实世界中，与货物损失相关的安全问题往往比燃料成本更重要。让我们考虑一些场景，在这些场景中，总运输时间（TTD）是优化算法中用于安排交货时间、路线和最佳运输方式的重要考虑因素。
- en: Time to deliver goods
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 交货商品的时间
- en: The first consideration for delivery time involves the urgency factor. Goods
    may spoil within a certain time frame (such as produce or vaccines), and this
    often outweighs the cost, as the goods will not be useable outside of the necessary
    time-to-use period. Sales windows also merit consideration, as Christmas or Ramadan
    items will not be in as great a demand after the holiday passes. This results
    in a loss of profits for the business.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 对于交货时间的首要考虑因素是紧急程度。某些商品（如农产品或疫苗）可能在一定时间内变质，这通常超过了成本，因为商品在必要的使用时间之外将无法使用。销售窗口也值得考虑，因为圣诞节或斋月期间的物品在假日过后需求不会那么大。这会导致企业利润损失。
- en: 'Let’s consider two tourist cafés, one located in the city of Paramaribo, Suriname,
    and one located in rural Suriname near a nature adventure camp. The city location
    (shown in *Figure 4**.5 (a)*) has access to a refrigerator to store fruit used
    in its smoothies; the rural location (shown in *Figure 4**.5 (b)*) does not have
    a refrigerator. Delivery priority on a shipment of fresh fruit from a local farm
    might prioritize the rural location, as the fruit will spoil faster there:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑两个旅游咖啡馆，一个位于苏里南的帕拉马里博市，另一个位于苏里南乡村地区，靠近一个自然探险营地。城市位置（如图4.5(a)所示）可以访问冰箱来储存用于其冰沙的水果；乡村位置（如图4.5(b)所示）没有冰箱。从当地农场运送新鲜水果的运输优先级可能会优先考虑乡村位置，因为那里的水果会更快变质：
- en: "![Figure 4.5 – \uFEFFAn illustration of: (a) A café in Paramaribo, Suriname\
    \ and (b) a café in rural Suriname near a tourist camp](img/B21087_04_05.jpg)"
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图4.5 – 以下插图：（a）苏里南帕拉马里博的一家咖啡馆和（b）苏里南乡村地区靠近旅游营地的一家咖啡馆](img/B21087_04_05.jpg)'
- en: 'Figure 4.5 – An illustration of: (a) A café in Paramaribo, Suriname and (b)
    a café in rural Suriname near a tourist camp'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.5 – 以下插图：（a）苏里南帕拉马里博的一家咖啡馆和（b）苏里南乡村地区靠近旅游营地的一家咖啡馆
- en: Besides the problem of spoiled goods and missed promotional periods, timing
    factors can include barriers to delivery, such as construction or tollways on
    a route. In addition, time spent in customs can vary dramatically from country
    to country, and it may be advantageous to take a longer driving route to avoid
    traveling through a particular country.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 除了变质商品和错过促销期的问题外，时间因素还可以包括路线上的运输障碍，如施工或收费公路。此外，各国海关所需时间可能会有很大差异，因此选择更长的驾驶路线以避免穿越特定国家可能是有利的。
- en: Often, it is necessary to mathematically weight routes not only by physical
    distance but by travel time, including factors such as customs or likelihood of
    construction.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在计算路线时，不仅需要考虑物理距离，还需要考虑旅行时间，包括诸如海关或施工可能性等因素。
- en: Navigational hazards
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导航危险
- en: Navigational concerns not only include man-made impediments to delivery; they
    also include natural ones. Hurricanes can delay shipments through busy ports,
    such as the Port of Miami. Avalanches in the Alps are a navigational consideration
    for companies opting for train transport. The shipping industry averages a loss
    of 10 ships per year to high seas and rogue waves. Some shipping routes, such
    as those off the southeast coast of South Africa, are known to produce high waves
    (typically as currents mix with a variety of ocean swells coming from different
    directions).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 导航问题不仅包括对交付的人为障碍，还包括自然障碍。飓风可能会延误通过繁忙港口（如迈阿密港）的运输。阿尔卑斯山的雪崩是选择火车运输的公司需要考虑的导航因素。航运业每年平均有10艘船在公海和巨浪中损失。一些航线，如南非东南海岸的航线，已知会产生高浪（通常是因为洋流与来自不同方向的多种海洋波浪混合）。
- en: Hazard-weighting of paths can be wise when working with optimal travel routes
    and determining which mode of transportation is most cost-effective and convenient.
    Most areas of the world contain open source hazard data and material to determine
    which hazards are present and how likely one is to encounter them. For instance,
    the World Bank provides the **Climate Change Knowledge Portal** (**CCKP**) with
    natural disaster risks during different periods, including downloadable data.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理最优旅行路线和确定哪种交通方式最经济便捷时，路径的风险加权可能是明智的。世界上大多数地区都包含开源的风险数据和资料，以确定哪些风险存在以及一个人遇到它们的可能性有多大。例如，世界银行提供了**气候变化知识门户**（**CCKP**）在不同时期内的自然灾害风险，包括可下载的数据。
- en: Now that we know some routing considerations, let’s dive into a simple example,
    including five stores in a localized area of Miami needing produce delivered that
    are all accessible via truck and defined to exclude current construction zones
    in a time of year when the area does not experience flooding or hurricanes. First,
    we’ll need to understand how we can calculate the shortest paths between vertices
    in a network, which has deep roots in graph theory.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了一些路由考虑因素，让我们深入一个简单的例子，包括迈阿密一个局部区域内需要运送农产品到五个商店，这些商店都可以通过卡车到达，并且定义在一年中该地区不会发生洪水或飓风的时期内排除当前施工区域。首先，我们需要了解我们如何计算网络中顶点之间的最短路径，这在图论中有着深厚的根源。
- en: Shortest path applications
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最短路径应用
- en: The shortest paths between places and sets of places have a long history in
    graph theory. Originally, this problem arose from a question about traversing
    the seven bridges of Königsberg, Germany. In 1736, Leonhard Euler posited that
    a route that crossed each bridge to a region next to one side of a bridge exactly
    once did not exist. Indeed, this is the case. If there is one more region than
    the number of bridges for an odd number of bridges, a trip is possible without
    traversing bridges more than once. Note that the proof of this is beyond the scope
    of this book; if you are interested, you can find many proofs online if you search
    for proofs of the Königsberg bridge problem.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在图论中，地点和地点集合之间的最短路径有着悠久的历史。最初，这个问题源于关于穿越德国柯尼斯堡七座桥的问题。1736年，莱昂哈德·欧拉提出，一条穿过每座桥到桥一侧相邻地区的路线恰好只穿过一次是不存在的。确实如此。如果桥的数量比地区的数量多一个，且桥的数量为奇数，那么旅行是可能的，不需要穿越桥超过一次。请注意，这个证明超出了本书的范围；如果你对此感兴趣，你可以在网上找到许多关于柯尼斯堡桥问题的证明，如果你搜索柯尼斯堡桥问题的证明的话。
- en: However, problems such as this come up often in the transportation industry
    and **global positioning system** (**GPS**) routing solutions and algorithms that
    calculate shortest paths with or without specific constraints such as the Königsberg
    bridge problem are common in routing problems today. We often want to visit multiple
    locations while traversing the fewest roads, bridges, or obstacles possible, and
    we can formulate this problem much in the way Euler formulated his bridge problem.
    However, we typically have many different possible routes and locations, making
    proof much more difficult given alternative routes that exist.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这种问题在运输行业中经常出现，**全球定位系统**（**GPS**）路由解决方案和算法在今天的路由问题中很常见，这些算法计算带有或没有特定约束（如柯尼斯堡桥问题）的最短路径。我们经常希望在穿越尽可能少的道路、桥梁或障碍物的同时访问多个地点，我们可以用类似欧拉提出他的桥梁问题的方式提出这个问题。然而，我们通常有许多不同的可能路线和地点，这使得在有替代路线的情况下证明变得更加困难。
- en: '`0` or `1` representing the existence of an edge between vertices in the adjacency
    matrix) or weighted (where edges that exist have numbers not limited to `1` designating
    their existence and some property between them). In the context of shortest path
    calculation in geographical data, these weights usually represent distances between
    locations.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在邻接矩阵中用`0`或`1`表示顶点之间是否存在边（或加权，其中存在的边有数字，不仅限于`1`来表示它们的存存以及它们之间的某些属性）。在地理数据中最短路径计算的情况下，这些权重通常表示位置之间的距离。
- en: 'Many paths can exist between vertices. For instance, consider a network with
    seven vertices. Between vertices one and six, many possible paths exist, including
    the one shown in *Figure 4**.6*. However, the shortest path will always exist,
    minimizing the distance (physical or other, depending on how edge weights are
    assigned from a dataset) between any two vertices in the network. When a network
    is not connected, this may be undefined or set to an infinite distance:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在顶点之间可能存在多条路径。例如，考虑一个包含七个顶点的网络。在顶点一和顶点六之间，存在许多可能的路径，包括图中*图4.6*所示的那条。然而，最短路径总是存在的，它会最小化网络中任意两个顶点之间的距离（物理距离或其他，这取决于如何从数据集中分配边权重）。当一个网络不连通时，这可能是不确定的或设置为无限距离：
- en: '![Figure 4.6 – A network with seven vertices and a path from the first vertex
    to the sixth vertex](img/B21087_04_06.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图4.6 – 一个包含七个顶点，从第一个顶点到第六个顶点的路径的网络](img/B21087_04_06.jpg)'
- en: Figure 4.6 – A network with seven vertices and a path from the first vertex
    to the sixth vertex
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.6 – 一个包含七个顶点，从第一个顶点到第六个顶点的路径的网络
- en: 'Sometimes, the shortest path between vertices (say, between one and seven in
    our *Figure 4**.6* network) may not be unique. Multiple paths of the same length
    may exist, such as the two shortest paths between vertex one and vertex seven
    (shown in *Figure 4**.7*):'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，顶点之间的最短路径（比如，在我们*图4.6*网络中的一和七之间）可能不是唯一的。可能存在多条相同长度的路径，例如顶点一和顶点七之间的两条最短路径（如*图4.7*所示）：
- en: '![Figure 4.7 – A network with multiple shortest paths between a pair of vertices
    (vertex one and vertex seven)](img/B21087_04_07.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图4.7 – 一对顶点（顶点一和顶点七）之间有多条最短路径的网络](img/B21087_04_07.jpg)'
- en: Figure 4.7 – A network with multiple shortest paths between a pair of vertices
    (vertex one and vertex seven)
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.7 – 一对顶点（顶点一和顶点七）之间有多条最短路径的网络
- en: 'In an undirected network, all edges between vertices can be considered when
    finding the shortest paths between vertices. As mentioned earlier, if the network
    is not connected, infinite path lengths may exist. For undirected and unweighted
    networks, the shortest paths will traverse the fewest edges (again, with infinite
    values possible if there are no edge paths to connect two vertices). *Figure 4**.8*
    shows a network that is not connected:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在无向网络中，在寻找顶点之间的最短路径时，可以考虑到顶点之间的所有边。如前所述，如果网络不连通，可能存在无限路径长度。对于无向和无权网络，最短路径将穿越最少的边（如果没有边路径连接两个顶点，则可能存在无限值）。*图4.8*显示了一个不连通的网络：
- en: '![Figure 4.8 – A disconnected network](img/B21087_04_08.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![图4.8 – 一个不连通的网络](img/B21087_04_08.jpg)'
- en: Figure 4.8 – A disconnected network
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.8 – 一个不连通的网络
- en: The shortest path between vertices eight and nine is simply the edge connecting
    vertex eight to vertex nine. Assuming that this network is not weighted, the shortest
    distance from this path is one. The shortest path between vertices one and six
    is given by the edges connecting vertex six to vertex three and vertex three to
    vertex one. The shortest distance between vertex six and three is, thus, two.
    However, the shortest path between vertex eight and vertex six does not exist
    and would be designated as an infinite distance.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 顶点八和顶点九之间的最短路径仅仅是连接顶点八和顶点九的边。假设这个网络没有加权，从这个路径的最短距离是一。顶点一和顶点六之间的最短路径是由连接顶点六到顶点三和顶点三到顶点一的边给出的。因此，顶点六和三之间的最短距离是二。然而，顶点八和顶点六之间的最短路径不存在，将被指定为无限距离。
- en: Dijkstra’s algorithm begins at one of the paired vertices and explores the vertices
    to which that vertex is connected. The shortest path between that initial vertex
    and its neighboring vertices is then recorded, minus the initial vertex (as it
    is already in our path set). The next set of vertices connected to the shortest-distance
    neighboring vertex is then explored to find the next shortest path that exists.
    This iterative exploration continues until the other paired vertex is found.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 迪杰斯特拉算法从一个配对顶点开始，探索与该顶点相连的顶点。然后记录从该初始顶点到其相邻顶点的最短路径，减去初始顶点（因为它已经在我们的路径集中）。然后探索连接到最短距离相邻顶点的下一个顶点集，以找到存在的下一个最短路径。这种迭代探索一直持续到找到另一个配对顶点。
- en: 'Let’s consider how Dijkstra’s algorithm can help us find the shortest route
    between stores. Consider a set of five stores from the same grocery chain in one
    suburb that may need restocking by the parent chain’s supplier. *Table 4.1* gives
    a summary of the distances between these five stores in miles:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一下迪杰斯特拉算法如何帮助我们找到商店之间的最短路线。考虑一个来自同一郊区同一杂货连锁店的五家商店的集合，这些商店可能需要母公司的供应商进行补货。*表
    4.1* 给出了这五家商店之间的距离摘要（以英里为单位）：
- en: '|  | **Store 1** | **Store 2** | **Store 3** | **Store 4** | **Store 5** |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '|  | **商店 1** | **商店 2** | **商店 3** | **商店 4** | **商店 5** |'
- en: '| **Store 1** | `0` | `2` | `2.4` | `3` | `3` |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| **商店 1** | `0` | `2` | `2.4` | `3` | `3` |'
- en: '| **Store 2** | `2` | `0` | `3.7` | `1.4` | `4.3` |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| **商店 2** | `2` | `0` | `3.7` | `1.4` | `4.3` |'
- en: '| **Store 3** | `2.4` | `3.7` | `0` | `4.9` | `0.9` |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| **商店 3** | `2.4` | `3.7` | `0` | `4.9` | `0.9` |'
- en: '| **Store 4** | `3` | `1.4` | `4.9` | `0` | `5.4` |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| **商店 4** | `3` | `1.4` | `4.9` | `0` | `5.4` |'
- en: '| **Store 5** | `3` | `4.3` | `0.9` | `5.4` | `0` |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| **商店 5** | `3` | `4.3` | `0.9` | `5.4` | `0` |'
- en: Table 4.1 – A table of mile distances between a chain of stores in a suburb
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 表 4.1 – 郊区连锁商店之间的英里距离表
- en: 'We can create this network of stores in `Script 4.1`:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在`Script 4.1`中创建这个商店网络：
- en: '[PRE0]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`Script 4.1` gives us a network of our five stores with a nice plot summary
    showing distances between stores, as shown in *Figure 4**.9*:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`Script 4.1` 给出了我们五家商店的网络，并有一个很好的图表摘要显示了商店之间的距离，如图 *图 4.9* 所示：'
- en: '![Figure 4.9 – A plot of our five stores and the distances between each of
    them](img/B21087_04_09.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.9 – 我们五家商店及其之间的距离图](img/B21087_04_09.jpg)'
- en: Figure 4.9 – A plot of our five stores and the distances between each of them
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.9 – 我们五家商店及其之间的距离图
- en: 'We can now create an adjacency matrix based on our network and find the shortest
    paths between locations by adding to `Script 4.1`. Let’s calculate the shortest
    distances between **store 1** and each other store in our chain’s locations:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以根据我们的网络创建一个邻接矩阵，并通过添加到`Script 4.1`来找到地点之间的最短路径。让我们计算我们的连锁店位置中**商店 1**与其他每个商店之间的最短距离：
- en: '[PRE1]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: From this calculation, we derive both the shortest distance between `length1`)
    and the shortest routes in general (`path1`). We can see the shortest distances
    between `length1`. The shortest route to **store 2** takes two miles, while the
    shortest route to **store 4** or **store 5** takes three miles. **store 3** is
    2.4 miles from **store 1**.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个计算中，我们得到了`length1`)之间的最短距离以及一般情况下的最短路径(`path1`)。我们可以看到`length1`之间的最短距离。到**商店
    2**的最短路线是两英里，而到**商店 4**或**商店 5**的最短路线是三英里。**商店 3**距离**商店 1**为 2.4 英里。
- en: One of the major drawbacks of using Dijkstra’s algorithm is that it is a blind
    search algorithm that needs to wander through all possible options to find the
    shortest paths between each possible vertex pair along the path. That takes a
    long time for large networks, and in practice, a modification of Dijkstra’s algorithm
    is needed to reduce search time.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 使用迪杰斯特拉算法的一个主要缺点是它是一种盲目搜索算法，需要遍历所有可能的选择，以找到路径上每个可能顶点对之间的最短路径。对于大型网络来说，这需要很长时间，在实践中，需要对迪杰斯特拉算法进行修改以减少搜索时间。
- en: The **A* algorithm** (pronounced A-star) modifies Dijkstra’s algorithm by using
    a heuristic function to guide the search (as opposed to visiting each vertex as
    in Dijkstra’s algorithm). Heuristic functions are common in search tasks, as they
    expedite the process and can modify the search of an algorithm that has failed.
    The heuristic used in the A* algorithm combines the cost of the path from the
    starting vertex with an estimate of remaining costs to prioritize vertices closest
    to the final vertex. One of the main uses for the A* algorithm is to give directions
    to a user of GPS to find optimal routes to a destination.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**A* 算法**（发音为 A-star）通过使用启发式函数来引导搜索（与迪杰斯特拉算法中访问每个顶点相反）修改了迪杰斯特拉算法。启发式函数在搜索任务中很常见，因为它们可以加速过程，并可以修改失败算法的搜索。A*
    算法中使用的启发式函数结合了从起始顶点到路径的成本以及到达给定目的地剩余成本的估计，以优先考虑最接近最终顶点的顶点。A* 算法的主要用途之一是为 GPS 用户提供路线，以找到到达目的地的最佳路线。'
- en: In general, the A* algorithm efficiently finds shortest path candidates, particularly
    in large or dense networks. However, its performance depends on the heuristic
    used to estimate the cost of reaching a given destination by traversing the network.
    While Dijkstra’s algorithm is guaranteed to find the shortest path, the A* algorithm
    is not guaranteed to find the shortest path. On large, dense networks, however,
    it is not feasible to run Dijkstra’s algorithm, so A* must be used.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，A* 算法有效地找到最短路径候选者，尤其是在大型或密集网络中。然而，其性能取决于用于估计通过网络到达给定目的地成本的启发式函数。虽然迪杰斯特拉算法保证找到最短路径，但
    A* 算法不保证找到最短路径。然而，在大型、密集网络中，运行迪杰斯特拉算法是不切实际的，因此必须使用 A*。
- en: '*Table 4.2* summarizes the differences between Dijkstra’s algorithm and the
    A* algorithm to guide you on how and when to use each algorithm for shortest path
    computation:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '*表 4.2* 总结了迪杰斯特拉算法和 A* 算法之间的差异，以指导您如何以及何时使用每种算法进行最短路径计算：'
- en: '| **Shortest** **path algorithm** | **Type** **of search** | **Result guarantees**
    | **Computational speed** |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| **最短路径算法** | **搜索类型** | **结果保证** | **计算速度** |'
- en: '| Dijkstra’s algorithm | Blind search of all vertices | Always finds the shortest
    path | Slow enough to limit use on dense or large networks |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| 迪杰斯特拉算法 | 全局搜索所有顶点 | 总是找到最短路径 | 足够慢以限制在密集或大型网络上的使用 |'
- en: '| A* algorithm | Heuristic function guiding search | No guarantees to finding
    the shortest path | Fast enough for most problems |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| A* 算法 | 引导搜索的启发式函数 | 没有找到最短路径的保证 | 足够快以解决大多数问题 |'
- en: Table 4.2 – Difference between Dijkstra’s algorithm and the A* algorithm
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 表 4.2 – 迪杰斯特拉算法和 A* 算法之间的差异
- en: 'Let’s consider a different store network, one in which routes do not exist
    from each store to every other store by creating a secondary store network in
    NetworkX through `Script 4.2`:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个不同的商店网络，其中一个网络中并非每个商店都通过创建一个二级商店网络在 NetworkX 中通过 `Script 4.2` 存在路线：
- en: '[PRE2]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*Figure 4**.10* shows this new store network, with some stores directly connected
    to each other and others requiring a route past other stores. Note that **store
    5** is the furthest store from the other stores, connected to **store 4** but
    no other stores:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 4**.10* 展示了这种新的商店网络，其中一些商店直接相互连接，而其他商店则需要经过其他商店的路线。请注意，**商店 5** 是离其他商店最远的商店，连接到
    **商店 4** 但没有连接到其他商店：'
- en: '![Figure 4.10 – A store network where not every store is connected to another
    store with a passable route](img/B21087_04_10.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.10 – 一个商店网络，其中并非每个商店都通过可通行的路线连接到另一个商店](img/B21087_04_10.jpg)'
- en: Figure 4.10 – A store network where not every store is connected to another
    store with a passable route
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.10 – 一个商店网络，其中并非每个商店都通过可通行的路线连接到另一个商店
- en: Let’s consider a route from **store 2** to **store 5**. Several possible routes
    exist (**store 2** to **store 3** to **store 4** to **store 5**, **store 2** to
    **store 1** to **store 4** to **store 5**, and **store 2** to **store 4** to **store
    5**). The shortest possible route may not have the fewest stops along the way
    if all distances are relatively short. In this case, we can simply look at our
    network and see that **store 2** to **store 4** to **store 5** is the shortest
    route. However, in very large networks, this would take a lot of time and likely
    involve much longer paths.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑从 **商店 2** 到 **商店 5** 的路线。存在几种可能的路线（**商店 2** 到 **商店 3** 到 **商店 4** 到 **商店
    5**，**商店 2** 到 **商店 1** 到 **商店 4** 到 **商店 5**，以及 **商店 2** 到 **商店 4** 到 **商店 5**）。如果所有距离都相对较短，最短的可能路线可能不是沿途停站最少的路线。在这种情况下，我们只需查看我们的网络，就可以看到
    **商店 2** 到 **商店 4** 到 **商店 5** 是最短路线。然而，在非常大的网络中，这会花费很多时间，并且可能涉及更长的路径。
- en: 'We can use the A* algorithm in NetworkX to find our shortest route by adding
    to `Script 4.2`:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过向`Script 4.2`中添加内容来在NetworkX中使用A*算法找到我们的最短路线：
- en: '[PRE3]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As expected, the A* algorithm finds the shortest path from **store 2** to **store
    4** to **store 5**. Again, with a much larger network, we’d need an algorithm
    such as the A* algorithm to find the shortest route quickly. Even a network of
    20 stores with several connections among stores would be problematic to compute
    by hand from a visualization of the network. We’ve seen how algorithms can help
    us find the shortest paths between two specific destinations. Let’s now take a
    look at the shortest paths that include stops at several different vertices. This
    type of solution is critical to many optimal routing problems and builds on our
    problem of finding the shortest paths between two different destinations.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如预期的那样，A*算法找到了从**商店2**到**商店4**再到**商店5**的最短路径。再次，对于更大的网络，我们需要像A*算法这样的算法来快速找到最短路线。即使是一个有20家商店并且商店之间有多个连接的网络，手动从网络的可视化中计算也会很成问题。我们已经看到算法如何帮助我们找到两个特定目的地之间的最短路径。现在让我们看看包括在几个不同顶点停止的最短路径。这类解决方案对于许多最优路径问题至关重要，并建立在我们在两个不同目的地之间找到最短路径的问题之上。
- en: Traveling salesman problem
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 旅行商问题
- en: A natural extension of shortest paths is the shortest possible route that stops
    at each location. For instance, consider a produce truck that needs to stock all
    five of our stores. The shortest route that will stop at each of our five stores
    saves time and fuel for the driver and allows produce to arrive at each store
    in the shortest time frame.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 最短路径的自然扩展是在每个位置停止的最短可能路线。例如，考虑一辆需要为我们的五个商店补充所有货物的生产卡车。在每个我们的五个商店停止的最短路线可以节省司机的驾驶时间和燃料，并允许产品在最短的时间内到达每个商店。
- en: The **traveling salesman problem** seeks to find the shortest route that stops
    at each location or the shortest route that stops at an arbitrary number of possible
    locations. In graph theory, this problem (and Euler’s problem) is related to cycles
    of a graph, which define a non-empty path that starts and ends at the same vertex.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**旅行商问题**旨在找到在每个位置或任意数量可能位置停止的最短路线。在图论中，这个问题（以及欧拉问题）与图中的回路相关，回路定义了一个非空路径，该路径从同一顶点开始并结束。'
- en: In practice, algorithms are needed to find the shortest path, and for large
    problems, computational time and convergence to a solution can restrict the usage
    of most algorithms. NetworkX provides the **Christofides algorithm** as a solver,
    which finds the shortest spanning tree (network structured like a tree with no
    cycles) and then matches the vertices of the tree to find minimum distances.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在实践中，需要算法来找到最短路径，对于大型问题，计算时间和收敛到解决方案可能会限制大多数算法的使用。NetworkX提供了**Christofides算法**作为求解器，该算法找到最短生成树（没有回路的树状网络结构）然后匹配树顶点以找到最小距离。
- en: 'Let’s find a solution to the traveling salesman problem for our original five-store
    network with `Script 4.3`:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`Script 4.3`为我们的原始五个商店网络找到旅行商问题的解决方案：
- en: '[PRE4]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This path starts at **store 1**, proceeds to **store 3** (2.4 miles), then **store
    5** (0.9 miles), then **store 4** (5.4 miles), then **store 2** (1.4 miles), and
    finally back to **store 1** (2 miles).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 此路径从**商店1**开始，接着到**商店3**（2.4英里），然后是**商店5**（0.9英里），接着是**商店4**（5.4英里），然后是**商店2**（1.4英里），最后回到**商店1**（2英里）。
- en: 'Let’s see how this works on our secondary store network by adding to `Script
    4.3`:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过向`Script 4.3`中添加内容来查看这是如何在我们的二级存储网络中工作的：
- en: '[PRE5]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In this case, we need to visit some stores more than once to visit each store.
    The solution our algorithm gives us starts at **store 1**, then **store 4** (3
    miles), then **store 5** (5.4 miles), then **store 4** again (5.4 miles), then
    **store 2** (1.4 miles), then **store 3** (3.7 miles), then back to **store 2**
    (3.7 miles), and finally back to **store 1** (2 miles). This is a much longer
    route than we need in our original store network (12.1 miles versus 22.6 miles),
    owing to non-direct paths between many of the stores.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们需要访问一些商店多次以访问每个商店。我们的算法给出的解决方案从**商店1**开始，然后是**商店4**（3英里），然后是**商店5**（5.4英里），然后再次是**商店4**（5.4英里），然后是**商店2**（1.4英里），然后是**商店3**（3.7英里），然后回到**商店2**（3.7英里），最后回到**商店1**（2英里）。这比我们原始的商店网络中需要的路线要长得多（12.1英里比22.6英里），这是由于许多商店之间的非直接路径造成的。
- en: In this section, we reviewed a solution to the traveling salesman problem, where
    we have a set of vertices that we need to visit and want to find the most efficient
    way to visit all of them. In the next section, we’ll switch from examining shortest
    path problems and looking at partitioning vertices to maximize travel between
    vertices in each set (such as maximizing rush-hour traffic flow while shutting
    down a few routes for maintenance).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们回顾了解决旅行商问题的解决方案，其中我们需要访问一组顶点，并希望找到访问所有这些顶点的最有效方式。在下一节中，我们将从检查最短路径问题转向查看分割顶点以最大化每个集合中顶点之间的旅行（例如，在关闭几条路线进行维护的同时最大化高峰时段的交通流量）。
- en: Max-flow min-cut algorithm
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最大流最小割算法
- en: Aside from shortest paths and routes, transportation logistics sometimes involve
    city planning to plan, say, roadwork with the least interruption to traffic patterns
    or supply chains. The goal is to maximize traffic flow through points of interest
    (say, major intersections or buildings with high volumes of visitors/workers each
    day) while minimizing which routes are cut off.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 除了最短路径和路线之外，运输物流有时还涉及城市规划，例如，以最少的交通模式或供应链中断来规划道路工程。目标是最大化通过兴趣点（例如，主要交叉口或每天有大量游客/工作人员的建筑）的交通流量，同时最小化切断哪些路线。
- en: In graph theory, the max-flow min-cut algorithm seeks to partition a network
    to maximize the flow of information through a social network, the flow of traffic
    in a transportation network, or the flow of material through an electrical or
    water pipeline network, among others. Typically, there’s a starting vertex and
    an ending vertex with respect to flow, though it is possible to run the algorithm
    through all possible combinations and aggregate results to maximize flow for the
    entire network.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在图论中，最大流最小割算法旨在将网络分割以最大化通过社交网络、交通网络、通过电气或水管道网络等的信息流。通常，有一个起点和一个终点与流量相关，尽管可以通过所有可能的组合运行算法，并将结果汇总以最大化整个网络的最大流量。
- en: Let’s consider the example of traffic flow from a dense residential area outside
    of a city to the downtown area, where most people work. We’d like to plan out
    work on replacing stoplights at key intersections throughout the city, which are
    divided by canals. Some roads in the city have more lanes than others, allowing
    for a higher volume of traffic to utilize those routes. We’d like to minimize
    disruption to commuters during the workday.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个例子，即从城市外的密集住宅区到大多数人都工作的市中心地区的交通流量。我们希望规划在整个城市中更换关键交叉路口的交通信号灯的工作，这些交叉路口被运河分隔。城市中的一些道路比其他道路有更多的车道，允许更多的交通流量使用这些路线。我们希望在白天的工作时间内最小化对通勤者的干扰。
- en: 'We can create a network of this situation, with the residential area designated
    as vertex `"a"` and the downtown area as vertex `"g"`. We’ll designate the level
    of traffic the route can handle with the capacity parameter. Let’s build an example
    network in NetworkX with `Script 4.4`:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以创建一个这种情况的网络，将住宅区指定为顶点`"a"`，市中心地区指定为顶点`"g"`。我们将使用容量参数指定路线可以处理的交通量。让我们使用`Script
    4.4`在NetworkX中构建一个示例网络：
- en: '[PRE6]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This script should produce a network that looks like the one in *Figure 4**.11*:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本应生成一个看起来像*图4.11*的网络：
- en: '![Figure 4.11 – A plot of the traffic network](img/B21087_04_11.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![图4.11 – 交通网络的图示](img/B21087_04_11.jpg)'
- en: Figure 4.11 – A plot of the traffic network
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.11 – 交通网络的图示
- en: 'Now that we have our network, let’s apply our max-flow min-cut algorithm and
    find where we can replace our first traffic light by adding to `Script 4.4`:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了我们的网络，让我们应用我们的最大流最小割算法，并找出我们可以在`Script 4.4`中添加以替换我们的第一个交通信号灯的地方：
- en: '[PRE7]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Our partition suggests that our best option cuts the connection between intersections
    `"c"` and `"d"`. Some commuters may be disadvantaged, but this preserves movement
    for the largest number of commuters overall.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的分割建议，我们最好的选择是切断交叉路口`"c"`和`"d"`之间的连接。一些通勤者可能会受到影响，但这对最大数量的通勤者来说保留了移动性。
- en: Summary
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we explored transportation problems and routing problems, which
    come up often in real-world industries. We found the shortest paths between stores
    with the Dijkstra and A* algorithms on two example store networks. We then considered
    the traveling salesman problem for optimal route planning on our two store networks
    to see how connectivity impacts route length. Finally, we considered optimal cuts
    to maximize flow on a small city network. In the next chapter, we’ll tackle clustering
    on networks by examining ecological data.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了运输问题和路由问题，这些问题在现实世界的工业中经常出现。我们在两个示例商店网络上使用Dijkstra和A*算法找到了商店之间的最短路径。然后，我们考虑了在我们的两个商店网络上进行最优路线规划时的旅行商问题，以了解连通性如何影响路线长度。最后，我们考虑了在小型城市网络上最大化流量的最优切割。在下一章中，我们将通过检查生态数据来处理网络上的聚类问题。
- en: References
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: Chen, L., Kyng, R., Liu, Y. P., Peng, R., Gutenberg, M. P., & Sachdeva, S. (2022,
    October). Maximum flow and minimum-cost flow in almost linear time. *In 2022 IEEE
    63rd Annual Symposium on Foundations of Computer Science (FOCS) (pp.* *612-623).
    IEEE.*
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 陈，L.，金，R.，刘，Y. P.，彭，R.，古腾堡，M. P.，萨切瓦，S. (2022年10月)。几乎线性时间内的最大流和最小成本流。*在2022年IEEE第63届计算机科学基础年会(FOCS)
    (第612-623页)。IEEE.*
- en: Johnson, D. B. (1973). A note on Dijkstra’s shortest path algorithm. *Journal
    of the ACM (JACM),* *20(3), 385-388.*
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 约翰逊，D. B. (1973)。关于Dijkstra最短路径算法的注释。*《美国计算机学会会刊(JACM)，* 第20卷，第3期，第385-388页。
- en: Kang, N. K., Son, H. J., & Lee, S. H. (2018). Modified A-star algorithm for
    modular plant land transportation. *Journal of Mechanical Science and Technology,*
    *32, 5563-5571.*
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 康，N. K.，孙，H. J.，李，S. H. (2018)。模块化植物土地运输的改进A*算法。*《机械科学与技术杂志，* 第32卷，第5563-5571页。
- en: Little, J. D., Murty, K. G., Sweeney, D. W., & Karel, C. (1963). An algorithm
    for the traveling salesman problem. *Operations research,* *11(6), 972-989.*
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 利特尔，J. D.，穆尔蒂，K. G.，斯威尼，D. W.，卡雷尔，C. (1963)。旅行商问题的算法。*《运筹学，* 第11卷，第6期，第972-989页。
- en: Liu, S., Münch, F., & Peyerimhoff, N. (2018). Bakry–Émery curvature and diameter
    bounds on graphs. *Calculus of Variations and Partial Differential Equations,*
    *57, 1-9.*
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 刘，S.，闵奇，F.，佩耶里霍夫，N. (2018). 图上的Bakry–Émery曲率和直径界限。*变分法和偏微分方程计算，* 第57卷，第1-9页。
- en: 'Rondinelli, D., & Berry, M. (2000). Multimodal transportation, logistics, and
    the environment: managing interactions in a global economy. *European Management
    Journal,* *18(4), 398-410.*'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 朗迪内利，D.，贝里，M. (2000)。多模式运输、物流和环境：在全球经济中管理相互作用。*《欧洲管理杂志，* 第18卷，第4期，第398-410页。
- en: 'Rosenthal, W., & Lehner, S. (2008). *Rogue waves: Results of the* *MaxWave
    project.*'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '罗森塔尔，W.，莱纳，S. (2008)。*《MaxWave项目：异常波浪的结果。* '
