["```py\niface.zoomToActiveLayer()\n```", "```py\ncrs = QgsCoordinateReferenceSystem(4326,\n           QgsCoordinateReferenceSystem.EpsgCrsId)\nlayer.setCrs(crs)\n```", "```py\nsymbol = QgsMarkerSymbolV2.createSimple({'width' : 1.0,\n                                         'color' : \"255,0,0\"})\n```", "```py\nsymbol = ...\nrenderer = QgsSingleSymbolRendererV2(symbol)\nlayer.setRendererV2(renderer)\n```", "```py\nsymbol_male = ...\nsymbol_female = ...\n\ncategories = []\ncategories.append(QgsRendererCategoryV2(\"M\", symbol_male, \"Male\"))\ncategories.append(QgsRendererCategoryV2(\"F\", symbol_female,\n                    \"Female\"))\n\nrenderer = QgsCategorizedSymbolRendererV2(\"\", categories)\nrenderer.setClassAttribute(\"GENDER\")\nlayer.setRendererV2(renderer)\n```", "```py\nsymbol1 = ...\nsymbol2 = ...\n\nranges = []\nranges.append(QgsRendererRangeV2(0, 10, symbol1, \"Range 1\"))\nranges.append(QgsRendererRange(11, 20, symbol2, \"Range 2\"))\n\nrenderer = QgsGraduatedSymbolRendererV2(\"\", ranges)\nrenderer.setClassAttribute(\"FIELD\")\nlayer.setRendererV2(renderer)\n```", "```py\nprovider = layer.dataProvider()\nfor feature in provider.getFeatures(QgsFeatureRequest()):\n  ...\n```", "```py\nprovider = layer.dataProvider()\nrequest = QgsFeatureRequest()\nrequest.setFilterExpression('\"GENDER\" = \"M\"')\nfor feature in provider.getFeatures(QgsFeatureRequest()):\n  ...\n```", "```py\n  geometry = feature.geometry()\n  id = feature.id()\n  name = feature.attribute(\"NAME\")\n```", "```py\nprovider = layer.dataProvider()\nindex = QgsSpatialIndex()\nfor feature in provider.getFeatures(QgsFeatureRequest()):\n  index.insertFeature(feature)\n```", "```py\n    features = index.nearestNeighbor(QgsPoint(long, lat), 5)\n    ```", "```py\n    features = index.intersects(QgsRectangle(left, bottom,\n                         right, top))\n    ```", "```py\nprovider = layer.dataProvider()\nvalues = provider.identify(QgsPoint(x, y),\n              QgsRaster.IdentifyFormatValue)\nif values.isValid():\n  for band,value in values.results().items():\n    ...\n```", "```py\nregistry = QgsProviderRegistry.instance()\nprovider = registry.provider(\"gdal\", \"/path/to/e10g\")\n```", "```py\nfrom PyQt4.QtCore import QSettings\nQSettings().setValue(\"/Projections/defaultBehaviour\", \"useGlobal\")\n```", "```py\nraster_extent = provider.extent()\nraster_width = provider.xSize()\nraster_height = provider.ySize()\nblock = provider.block(1, raster_extent, raster_width,\n            raster_height)\n```", "```py\nfor x in range(raster_width):\n  for y in range(raster_height):\n    elevation = block.value(x, y)\n    ....\n```", "```py\nfrom PyQt4.QtCore import QSettings\nQSettings().setValue(\"/Projections/defaultBehaviour\", \"useGlobal\")\n\nregistry = QgsProviderRegistry.instance()\nprovider = registry.provider(\"gdal\", \"/path/to/e10g\")\n\nraster_extent = provider.extent()\nraster_width = provider.xSize()\nraster_height = provider.ySize()\nno_data_value = provider.srcNoDataValue(1)\n\nhistogram = {} # Maps elevation to number of occurrences.\n\nblock = provider.block(1, raster_extent, raster_width,\n            raster_height)\nif block.isValid():\n  for x in range(raster_width):\n    for y in range(raster_height):\n      elevation = block.value(x, y)\n      if elevation != no_data_value:\n        try:\n          histogram[elevation] += 1\n        except KeyError:\n          histogram[elevation] = 1\n\nfor height in sorted(histogram.keys()):\n  print height, histogram[height]\n```", "```py\nfilename_1 = QFileDialog.getOpenFileName(iface.mainWindow(),\n                     \"First Shapefile\",\n                     \"~\", \"*.shp\")\nif not filename_1:\n  return\n\nregistry = QgsProviderRegistry.instance()\nprovider_1 = registry.provider(\"ogr\", filename_1)\n```", "```py\ngeometries_1 = []\nfor feature in provider_1.getFeatures(QgsFeatureRequest()):\n  geometries_1.append(QgsGeometry(feature.geometry()))\n```", "```py\nQgsGeometry(feature.geometry())\n```", "```py\nfeature.geometry()\n```", "```py\nfilename_2 = QFileDialog.getOpenFileName(iface.mainWindow(),\n                     \"Second Shapefile\",\n                     \"~\", \"*.shp\")\nif not filename_2:\n  return\n\nprovider_2 = registry.provider(\"ogr\", filename_2)\n\ngeometries_2 = []\nfor feature in provider_2.getFeatures(QgsFeatureRequest()):\n  geometries_2.append(QgsGeometry(feature.geometry()))\n```", "```py\ncombined_geometry = None\nfor geometry in geometries_2:\n  if combined_geometry == None:\n    combined_geometry = geometry\n  else:\n    combined_geometry = combined_geometry.combine(geometry)\n```", "```py\ndst_geometries = []\nfor geometry in geometries_1:\n  dst_geometry = geometry.difference(combined_geometry)\n  if not dst_geometry.isGeosValid(): continue\n  if dst_geometry.isGeosEmpty(): continue\n  dst_geometries.append(dst_geometry)\n```", "```py\ndst_filename = QFileDialog.getSaveFileName(iface.mainWindow(),\n                      \"Save results to:\",\n                      \"~\", \"*.shp\")\nif not dst_filename:\n  return\n```", "```py\nfields = QgsFields()\nwriter = QgsVectorFileWriter(dst_filename, \"ASCII\", fields,\n               dst_geometries[0].wkbType(),\n               None, \"ESRI Shapefile\")\nif writer.hasError() != QgsVectorFileWriter.NoError:\n  print \"Error!\"\n  return\n```", "```py\nfor geometry in dst_geometries:\n  feature = QgsFeature()\n  feature.setGeometry(geometry)\n  writer.addFeature(feature)\n```", "```py\nQMessageBox.information(iface.mainWindow(), \"\",\n            \"Subtracted features saved to disk.\")\n```", "```py\nlayer = iface.addVectorLayer(\"/path/to/TM_WORLD_BORDERS-0.3.shp\", \n               \"continents\", \"ogr\")\n```", "```py\nfrom PyQt4.QtGui import QColor\ncategories = []\nfor value,color,label in [(0,   \"#660000\", \"Antarctica\"),\n                          (2,   \"#006600\", \"Africa\"),\n                          (9,   \"#000066\", \"Oceania\"),\n                          (19,  \"#660066\", \"The Americas\"),\n                          (142, \"#666600\", \"Asia\"),\n                          (150, \"#006666\", \"Europe\")]:\n  symbol = QgsSymbolV2.defaultSymbol(layer.geometryType())\n  symbol.setColor(QColor(color))\n  categories.append(QgsRendererCategoryV2(value, symbol, label))\n```", "```py\nlayer.setRendererV2(QgsCategorizedSymbolRendererV2(\"region\",\n                          categories))\nlayer.triggerRepaint()\n```", "```py\nlayer_registry = QgsMapLayerRegistry.instance()\nfor layer in layer_registry.mapLayersByName(\"continents\"):\n  layer_registry.removeMapLayer(layer.id())\n```", "```py\nlayer_registry = QgsMapLayerRegistry.instance()\nfor layer in layer_registry.mapLayersByName(\"population\"):\n  layer_registry.removeMapLayer(layer.id())\n```", "```py\nlayer = iface.addVectorLayer(\"/path/to/TM_WORLD_BORDERS-0.3.shp\", \n               \"population\", \"ogr\")\n```", "```py\nfrom PyQt4.QtGui import QColor\nranges = []\nfor min_pop,max_pop,color in [(0,        99999,     \"#332828\"),\n                              (100000,   999999,    \"#4c3535\"),\n                              (1000000,  4999999,   \"#663d3d\"),\n                              (5000000,  9999999,   \"#804040\"),\n                              (10000000, 19999999,  \"#993d3d\"),\n                              (20000000, 49999999,  \"#b33535\"),\n                              (50000000, 999999999, \"#cc2828\")]:\n  symbol = QgsSymbolV2.defaultSymbol(layer.geometryType())\n  symbol.setColor(QColor(color))\n  ranges.append(QgsRendererRangeV2(min_pop, max_pop,\n                   symbol, \"\"))\n```", "```py\nlayer.setRendererV2(QgsGraduatedSymbolRendererV2(\"pop2005\",\n                         ranges))\nlayer.triggerRepaint()\n```", "```py\nclass DistanceCalculator(QgsMapTool):\n  def __init__(self, iface):\n    QgsMapTool.__init__(self, iface.mapCanvas())\n    self.iface = iface\n\n  def canvasPressEvent(self, event):\n    ...\n\n  def canvasReleaseEvent(self, event):\n    ...\n```", "```py\ndef canvasPressEvent(self, event):\n  transform = self.iface.mapCanvas().getCoordinateTransform()\n  self._startPt = transform.toMapCoordinates(event.pos().x(),\n                        event.pos().y())\n```", "```py\ndef canvasReleaseEvent(self, event):\n  transform = self.iface.mapCanvas().getCoordinateTransform()\n  endPt = transform.toMapCoordinates(event.pos().x(),\n                    event.pos().y())\n```", "```py\n  crs = self.iface.mapCanvas().mapRenderer().destinationCrs()\n  distance_calc = QgsDistanceArea()\n  distance_calc.setSourceCrs(crs)\n  distance_calc.setEllipsoid(crs.ellipsoidAcronym())\n  distance_calc.setEllipsoidalMode(crs.geographicFlag())\n  distance = distance_calc.measureLine([self._startPt,\n                     endPt]) / 1000\n```", "```py\n  messageBar = self.iface.messageBar()\n  messageBar.pushMessage(\"Distance = %d km\" % distance,\n              level=QgsMessageBar.INFO,\n              duration=2)\n```", "```py\ncalculator = DistanceCalculator(iface)\niface.mapCanvas().setMapTool(calculator)\n```"]