- en: Chapter 7. Querying and Selecting Data
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章. 查询和选择数据
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下菜谱：
- en: Constructing a proper attribute query syntax
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建正确的属性查询语法
- en: Creating feature layers and table views
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建要素图层和表视图
- en: Selecting features and rows with the Select Layer by Attribute tool
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用“按属性选择图层”工具选择要素和行
- en: Selecting features with the Select by Location tool
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用“按位置选择”工具选择要素
- en: Combining a spatial and attribute query with the Select by Location tool
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用“按位置选择”工具结合空间和属性查询
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Selecting features from a geographic layer or rows from a standalone attribute
    table is one of the most common GIS operations. Queries are created to enable
    these selections, and can be either attribute or spatial queries. **Attribute
    queries** use SQL statements to select features or rows through the use of one
    or more fields or columns in a dataset. An example attribute query would be "Select
    all land parcels with a property value greater than $500,000". **Spatial queries**
    are used to select features based on some type of spatial relationship. An example
    might be "Select all land parcels that intersect a school district" or perhaps
    "Select all streets that are completely within Travis County, Texas." It is also
    possible to combine attribute and spatial queries. An example might be "Select
    all land parcels that intersect the 100 year floodplain and have a property value
    greater than $500,000".
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 从地理图层选择要素或从独立属性表中选择行是GIS操作中最常见的操作之一。查询被创建以启用这些选择，可以是属性查询或空间查询。**属性查询**使用SQL语句通过使用数据集中的一个或多个字段或列来选择要素或行。一个属性查询的例子是“选择所有价值超过50万美元的土地地块”。**空间查询**用于根据某种空间关系选择要素。一个例子可能是“选择所有与学区相交的土地地块”或“选择所有完全位于德克萨斯州特拉维斯县的道路”。也可以将属性查询和空间查询结合起来。一个例子可能是“选择所有与100年洪水平原相交且价值超过50万美元的土地地块”。
- en: Constructing a proper attribute query syntax
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建正确的属性查询语法
- en: The construction of property attribute queries is critical to your success in
    creating geoprocessing scripts that query data from feature classes and tables.
    All attribute queries that you execute against feature classes and tables will
    need to have the correct SQL syntax and also follow various rules depending upon
    the data type that you execute the queries against.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 构建属性查询对于您成功创建查询要素类和表的地理处理脚本至关重要。您对要素类和表执行的任何属性查询都需要正确的SQL语法，并且根据您执行的查询的数据类型，还需要遵循各种规则。
- en: Getting ready
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Creating the syntax for attribute queries is one of the most difficult and time-consuming
    tasks that you'll need to master when creating Python scripts that incorporate
    the use of the **Select by Attributes** tool. These queries are basically SQL
    statements along with a few idiosyncrasies that you'll need to master. If you
    already have a good understanding of creating queries in ArcMap or perhaps experience
    in creating SQL statements in other programming languages, then this will be a
    little easier for you. In addition to creating valid SQL statements, you also
    need to be aware of some specific Python syntax requirements and some data type
    differences that will result in a slightly altered formatting of your statements
    for some data types. In this recipe, you'll learn how to construct valid query
    syntax and understand the nuances of how different data types alter the syntax
    as well as some Python-specific constructs.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 创建属性查询的语法是您在创建包含**按属性选择**工具使用的Python脚本时需要掌握的最困难且耗时最长的任务之一。这些查询基本上是SQL语句，以及一些您需要掌握的特殊性。如果您已经很好地理解了在ArcMap中创建查询或可能在其他编程语言中创建SQL语句方面有经验，那么这将对您来说容易一些。除了创建有效的SQL语句外，您还需要了解一些特定的Python语法要求以及一些数据类型差异，这会导致某些数据类型的语句格式略有改变。在本菜谱中，您将学习如何构建有效的查询语法，并了解不同数据类型如何改变语法以及一些Python特定的结构。
- en: How to do it…
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: Initially, we're going to take a look at how queries are constructed in ArcMap,
    so that you can get a feel of how they are structured.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将看看如何在ArcMap中构建查询，这样您可以了解它们的结构。
- en: In ArcMap, open `C:\ArcpyBook\Ch7\Crime_Ch7.mxd`.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在ArcMap中，打开`C:\ArcpyBook\Ch7\Crime_Ch7.mxd`。
- en: Right-click on the **Burglaries in 2009** layer and select **Open Attribute
    Table**. You should see an attribute table similar to the following screenshot.
    We're going to be querying the **SVCAREA** field:![How to do it…](img/B04314_07_1.jpg)
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击 **2009 年的 Burglaries** 层，并选择 **Open Attribute Table**。你应该会看到一个类似于以下截图的属性表。我们将查询
    **SVCAREA** 字段：![如何做…](img/B04314_07_1.jpg)
- en: With the attribute table open, select the **Table Options** button and then
    **Select by Attributes** to display a dialog box that will allow you to construct
    an attribute query.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在打开属性表后，选择 **Table Options** 按钮，然后选择 **Select by Attributes** 以显示一个对话框，该对话框允许你构建属性查询。
- en: 'Notice the **Select * FROM Burglary WHERE**: statement on the query dialog
    box (shown in the following screenshot). This is a basic SQL statement that will
    return all the columns from the attribute table for **Burglary** that meet the
    condition that we define through the query builder. The asterisk (*****) simply
    indicates that all fields will be returned:'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '注意查询对话框（如下截图所示）中的 **Select * FROM Burglary WHERE**: 语句。这是一个基本的 SQL 语句，它将返回所有满足通过查询构建器定义的条件的
    **Burglary** 属性表中的列。星号（****）简单地表示将返回所有字段：'
- en: '![How to do it…](img/B04314_07_3.jpg)'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做…](img/B04314_07_3.jpg)'
- en: Make sure that **Create a new selection** is the selected item in the **Method**
    dropdown list. This will create a new selection set.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保在 **Method** 下拉列表中选中的是 **Create a new selection**。这将创建一个新的选择集。
- en: Double-click on **SVCAREA** from the list of fields to add the field to the
    SQL statement builder, as follows:![How to do it…](img/B04314_07_4.jpg)
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从字段列表中双击 **SVCAREA** 以将其添加到 SQL 语句构建器中，如下所示：![如何做…](img/B04314_07_4.jpg)
- en: Click on the **=** button.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **=** 按钮。
- en: Click on the **Get Unique Values** button.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **Get Unique Values** 按钮。
- en: From the list of values generated, double-click on **'North'** to complete the
    SQL statement, as shown in the following screenshot:![How to do it…](img/B04314_07_5.jpg)
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从生成的值列表中双击 **'North'** 以完成 SQL 语句，如下面的截图所示：![如何做…](img/B04314_07_5.jpg)
- en: Click on the **Apply** button to execute the query. This should select 7520
    records.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **Apply** 按钮以执行查询。这应该选择 7520 条记录。
- en: Many people mistakenly assume that you can simply take a query that has been
    generated in this fashion and paste it into a Python script. That is not the case.
    There are some important differences that we'll cover next.
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 许多人错误地认为可以将以这种方式生成的查询直接粘贴到 Python 脚本中。事实并非如此。这里有一些重要的区别，我们将在下一部分进行介绍。
- en: Close the **Select by Attributes** window and the **Burglaries** in 2009 table.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭 **Select by Attributes** 窗口和 2009 年的 **Burglaries** 表。
- en: Clear the selected feature set by navigating to **Selection** | **Clear Selected
    Features**.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到 **Selection** | **Clear Selected Features** 来清除选定的要素集。
- en: 'Open the Python window and add the code to import `arcpy`:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Python 窗口并添加导入 `arcpy` 的代码：
- en: '[PRE0]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Create a new variable to hold the query and add the same statement that you
    created earlier:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的变量来保存查询，并添加你之前创建的相同语句：
- en: '[PRE1]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Press *Enter* on your keyboard and you should see an error message similar
    to the following:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在键盘上按 *Enter* 键，你应该会看到一个类似于以下错误消息：
- en: '[PRE2]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Python interprets **SVCAREA** and **North** as strings, but the equal to sign
    between the two is not part of the string used to set the `qry` variable. There
    are several things we need to do to generate a syntactically correct statement
    for the Python interpreter.
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Python 将 **SVCAREA** 和 **North** 解释为字符串，但两个字符串之间的等号不是用于设置 `qry` 变量的字符串的一部分。我们需要做一些事情来生成一个对
    Python 解释器语法正确的语句。
- en: 'One important thing has already been taken care of though. Each field name
    used in a query needs to be surrounded by double quotes. In this case, **SVCAREA**
    is the only field used in the query and it has already been enclosed by double
    quotes. This will always be the case when you''re working with shapefiles, file
    geodatabases, or ArcSDE geodatabases. Here is where it gets a little confusing
    though. If you''re working with data from a personal geodatabase, the field names
    will need to be enclosed by square brackets instead of double quotes, as shown
    in the following code example. This can certainly leads to confusion for script
    developers:'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 虽然已经处理了一个重要的事情。在查询中使用的每个字段名都需要用双引号括起来。在这种情况下，**SVCAREA** 是查询中使用的唯一字段，并且已经用双引号括起来。当你与
    shapefile、文件地理数据库或 ArcSDE 地理数据库一起工作时，这总是成立的。然而，这里有一点会让人有些困惑。如果你正在处理来自个人地理数据库的数据，字段名需要用方括号而不是双引号括起来，如下面的代码示例所示。这当然会给脚本开发者带来困惑：
- en: '[PRE3]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, we need to deal with the single quotes surrounding **''North''**. When
    querying data from fields that have a `text` data type, the string being evaluated
    must be enclosed by quotes. If you examine the original query, you''ll notice
    that we have in fact already enclosed `North` with quotes, so everything should
    be fine, right? Unfortunately, it''s not that simple with Python. Quotes along
    with a number of other characters must be escaped with a forward slash followed
    by the character being escaped. In this case, the escape sequence would be `\''`
    as shown in the following steps:'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，我们需要处理围绕**'North'**的单引号。当从具有`text`数据类型的字段查询数据时，被评估的字符串必须用引号括起来。如果你检查原始查询，你会注意到我们实际上已经用引号括起了`North`，所以一切应该都正常，对吧？不幸的是，在Python中并不那么简单。引号以及许多其他字符必须用反斜杠后跟被转义的字符来转义。在这种情况下，转义序列将是`\'`，如下面的步骤所示：
- en: 'Alter your query syntax to incorporate the escape sequence:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改你的查询语法以包含转义序列：
- en: '[PRE4]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Finally, the entire query statement should be enclosed with quotes:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，整个查询语句应该用引号括起来：
- en: '[PRE5]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In addition to the `=` sign, which tests for equality, there are a number of
    additional operators that you can use with strings and numeric data, including
    not equal (`< >`), greater than (`>`), greater than or equal to (`>=`), less than
    (`<`), and less than or equal to (`<=`).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 除了等于号（`=`）用于测试相等之外，还有许多其他运算符可以与字符串和数值数据一起使用，包括不等于（`< >`）、大于（`>`）、大于等于（`>=`）、小于（`<`）和小于等于（`<=`）。
- en: 'Wildcard characters, including `%` and `_`, can also be used for shapefiles,
    file geodatabases, and ArcSDE geodatabases. These include `%` that represents
    any number of characters. The `LIKE` operator is often used with wildcard characters
    to perform partial string matching. For example, the following query would find
    all records with a service area that begins with `N` and has any number of characters
    after it:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 通配符字符，包括`%`和`_`，也可以用于shapefiles、文件地理数据库和ArcSDE地理数据库。这包括表示任意数量字符的`%`。`LIKE`运算符通常与通配符字符一起使用，以执行部分字符串匹配。例如，以下查询将找到所有服务区域以`N`开头并且后面跟有任意数量字符的记录：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The (`_`) underscore character can be used to represent a single character.
    For personal geodatabases, the (`*`) asterisk is used to represent a wildcard
    character for any number of characters, while (`?`) represents a single character.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 下划线字符（`_`）可以用来表示单个字符。对于个人地理数据库，星号（`*`）用于表示任意数量字符的通配符，而问号（`?`）表示单个字符。
- en: 'You can also query for the absence of data, also known as `NULL` values. A
    `NULL` value is often mistaken for a value of zero, but this does not always hold
    true. The `NULL` values indicate the absence of data, which is different from
    a value of zero. Null operators include **IS NULL** and **IS NOT NULL**. The following
    code example will find all the records where the `SVCAREA` field contains no data:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以查询数据不存在的情况，也称为`NULL`值。`NULL`值通常被误认为是零的值，但这并不总是正确的。`NULL`值表示数据不存在，这与零的值不同。空值运算符包括**IS
    NULL**和**IS NOT NULL**。以下代码示例将找到所有`SVCAREA`字段不包含数据的记录：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The final topic that we'll cover in this section are operators used to combine
    expressions where multiple query conditions need to be met. The `AND` operator
    requires that both query conditions be met for the query result to be true, resulting
    in selected records. The `OR` operator requires that at least one of the conditions
    be met.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 本节我们将讨论的最后一个主题是用于组合表达式的运算符，当需要满足多个查询条件时。`AND`运算符要求两个查询条件都满足，查询结果才为真，从而选择记录。`OR`运算符要求至少满足一个条件。
- en: How it works…
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The creation of syntactically correct queries is one of the most challenging
    aspects of programming ArcGIS with Python. However, once you understand some basic
    rules, it gets a little easier. In this section, we'll summarize these rules.
    One of the more important things to keep in mind is that field names must be enclosed
    with double quotes for all datasets, with the exception of personal geodatabases,
    which require braces surrounding field names.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 创建语法正确的查询是使用Python进行ArcGIS编程最具挑战性的方面之一。然而，一旦你理解了一些基本规则，它就会变得容易一些。在本节中，我们将总结这些规则。需要记住的一个重要事项是，对于所有数据集，字段名必须用双引号括起来，个人地理数据库除外，它要求字段名周围用大括号括起来。
- en: 'There is also an `AddFieldDelimiters()` function that you can use to add the
    correct delimiter to a field based on the datasource supplied as a parameter to
    the function. The syntax for this function is as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还有一个 `AddFieldDelimiters()` 函数，您可以使用它根据函数参数提供的数据源向字段添加正确的分隔符。此函数的语法如下：
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Additionally, most people, especially those new to programming with Python,
    struggle with the issue of adding single quotes to string values being evaluated
    by the query. In Python, quotes have to be escaped with a single forward slash
    followed by the quote. Using this escape sequence will ensure that Python does
    in fact see this as a quote rather than the end of the string.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，大多数人，尤其是那些刚开始用 Python 编程的人，都会遇到在查询中添加字符串值单引号的问题。在 Python 中，引号必须用单个反斜杠 `\`
    后跟引号来转义。使用此转义序列将确保 Python 确实将其视为引号，而不是字符串的结尾。
- en: Finally, take some time to familiarize yourself with the wildcard characters.
    For datasets other than personal geodatabases, you'll use the `%` character for
    multiple characters and an underscore character for a single character. If you're
    using a personal geodatabase, the `*` character is used to match multiple characters
    and the `?` character is used to match a single character. Obviously, the syntax
    differences between personal geodatabases and all other types of datasets can
    lead to some confusion.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，花一些时间熟悉通配符字符。对于除个人地理数据库之外的数据集，您将使用 `%` 字符来匹配多个字符，并使用下划线字符 `_` 来匹配单个字符。如果您使用的是个人地理数据库，则使用
    `*` 字符来匹配多个字符，并使用 `?` 字符来匹配单个字符。显然，个人地理数据库与其他所有类型数据集之间的语法差异可能会导致一些混淆。
- en: Creating feature layers and table views
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建要素层和表格视图
- en: Feature layers and table views serve as intermediate datasets held in memory
    specifically for use with tools, such as **Select by Location** and **Select Attributes**.
    Although these temporary datasets can be saved, they are not needed in most cases.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 要素层和表格视图作为特定用于工具（如**按位置选择**和**按属性选择**）的中间数据集，存储在内存中。尽管这些临时数据集可以保存，但在大多数情况下并不需要。
- en: Getting ready
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Feature classes are physical representations of geographic data and are stored
    as files (shapefiles, personal geodatabases, and file geodatabases) or within
    a geodatabase. **Environmental Systems Research Institute** (**Esri**) defines
    a feature class as "a collection of features that shares a common geometry (point,
    line, or polygon), attribute table, and spatial reference."
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 要素类是地理数据的物理表示，以文件（形状文件、个人地理数据库和文件地理数据库）或地理数据库中的形式存储。**环境系统研究协会**（**Esri**）将要素类定义为“共享相同几何形状（点、线或多边形）、属性表和空间参考的一组要素”。
- en: Feature classes can contain default and user-defined fields. Default fields
    include the `SHAPE` and `OBJECTID` fields. These fields are maintained and updated
    automatically by ArcGIS. The `SHAPE` field holds the geometric representation
    of a geographic feature, while the `OBJECTID` field holds a unique identifier
    for each feature. Additional default fields will also exist depending on the type
    of feature class. A line feature class will have a `SHAPE_LENGTH` field. A polygon
    feature class will have both, a `SHAPE_LENGTH` and a `SHAPE_AREA` field.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 要素类可以包含默认字段和用户定义字段。默认字段包括 `SHAPE` 和 `OBJECTID` 字段。这些字段由 ArcGIS 自动维护和更新。`SHAPE`
    字段包含地理要素的几何表示，而 `OBJECTID` 字段包含每个要素的唯一标识符。根据要素类的类型，还将存在其他默认字段。线要素类将有一个 `SHAPE_LENGTH`
    字段。多边形要素类将同时具有 `SHAPE_LENGTH` 和 `SHAPE_AREA` 字段。
- en: Optional fields are created by end users of ArcGIS and are not automatically
    updated by GIS. These contain attribute information about the features. These
    fields can also be updated by your scripts.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 可选字段是由 ArcGIS 的最终用户创建的，并且不会被 GIS 自动更新。这些字段包含有关要素的属性信息。这些字段也可以通过您的脚本进行更新。
- en: Tables are physically represented as standalone **DBF** (also known as **dBase
    File Format**) tables or within a geodatabase. Both, tables and feature classes,
    contain attribute information. However, a table contains only attribute information.
    There isn't a `SHAPE` field associated with a table, and they may or may not contain
    an `OBJECTID` field.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 表以独立的 **DBF**（也称为 **dBase 文件格式**）表或地理数据库中的形式进行物理表示。表和要素类都包含属性信息。然而，表只包含属性信息。与表关联的没有
    `SHAPE` 字段，并且它们可能包含或不包含 `OBJECTID` 字段。
- en: Standalone Python scripts that use the **Select by Attributes** or **Select
    by Location** tool require that you create an intermediate dataset rather than
    using feature classes or tables. These intermediate datasets are temporary in
    nature and are called **feature layers** or **table views**. Unlike feature classes
    and tables, these temporary datasets do not represent actual files on disk or
    within a geodatabase. Instead, they are an in-memory representation of feature
    classes and tables. These datasets are active only while a Python script is running.
    They are removed from memory after the tool has been executed. However, if the
    script is run from within ArcGIS as a script tool, then the temporary layer can
    be saved either by right-clicking on the layer in the table of contents and selecting
    **Save As Layer File** or simply by saving the map document file.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 **按属性选择** 或 **按位置选择** 工具的独立 Python 脚本需要您创建一个中间数据集，而不是使用要素类或表。这些中间数据集是临时的，被称为
    **要素层** 或 **表视图**。与要素类和表不同，这些临时数据集不表示磁盘或地理数据库中的实际文件。相反，它们是要素类和表的内存表示。这些数据集仅在 Python
    脚本运行时是活动的。在工具执行后，它们将从内存中删除。然而，如果脚本在 ArcGIS 中作为脚本工具运行，则可以通过在内容表中右键单击图层并选择 **另存为图层文件**
    或简单地保存地图文档文件来保存临时图层。
- en: Feature layers and table views must be created as a separate step in your Python
    scripts before you can call the **Select by Attributes** or **Select by Location**
    tools. The **Make Feature Layer** tool generates the in-memory representation
    of a feature class, which can then be used to create queries and selection sets
    as well as join tables. After this step has been completed, you can use the **Select
    by Attributes** or **Select by Location** tool. Similarly, the **Make Table View**
    tool is used to create an in-memory representation of a table. The function of
    this tool is the same as **Make Feature Layer**. Both the **Make Feature Layer**
    and **Make Table View** tools require an input dataset, an output layer name,
    and an optional query expression, which can be used to limit the features or rows
    that are a part of the output layer. In addition to this, both tools can be found
    in the **Data Management Tools** toolbox.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在您可以使用 **按属性选择** 或 **按位置选择** 工具之前，必须在您的 Python 脚本中单独创建要素层和表视图。**创建要素层** 工具生成要素类的内存表示，然后可以用来创建查询和选择集以及连接表。完成此步骤后，您可以使用
    **按属性选择** 或 **按位置选择** 工具。同样，**创建表视图** 工具用于创建表的内存表示。此工具的功能与 **创建要素层** 相同。**创建要素层**
    和 **创建表视图** 工具都需要一个输入数据集、一个输出层名称以及可选的查询表达式，该表达式可以用来限制输出层中的要素或行。此外，这两个工具都可以在 **数据管理工具**
    工具箱中找到。
- en: 'The syntax to use the Make Feature Layer tool is as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 **创建要素层** 工具的语法如下：
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The syntax to use the **Make Table View** tool is as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 **创建表视图** 工具的语法如下：
- en: '[PRE10]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In this recipe, you will learn how to use the **Make Feature Layer** and **Make
    Table View** tools. These tasks will be done inside ArcGIS, so that you can see
    the in-memory copy of the layer that is created.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在本菜谱中，您将学习如何使用 **创建要素层** 和 **创建表视图** 工具。这些任务将在 ArcGIS 内完成，这样您可以看到创建的层的内存副本。
- en: How to do it…
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Follow these steps to learn how to use the Make Feature Layer and Make Table
    View tools:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤学习如何使用 **创建要素层** 和 **创建表视图** 工具：
- en: Open `c:\ArcpyBook\Ch7\Crime_Ch7.mxd` in ArcMap.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 ArcMap 中打开 `c:\ArcpyBook\Ch7\Crime_Ch7.mxd`。
- en: Open the Python window.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Python 窗口。
- en: 'Import the `arcpy` module:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入 `arcpy` 模块：
- en: '[PRE11]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Set the workspace:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置工作空间：
- en: '[PRE12]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Start a `try` block:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始一个 `try` 块：
- en: '[PRE13]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Make an in-memory copy of the **Burglary** feature class using the **Make Feature
    Layer** tool. Make sure you indent this line of code:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 **创建要素层** 工具创建 **Burglary** 要素类的内存副本。确保缩进此行代码：
- en: '[PRE14]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Add an `except` block and a line of code to print an error message in the event
    of a problem:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个 `except` 块和一行代码，以便在出现问题时打印错误消息：
- en: '[PRE15]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The entire script should appear as follows:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 整个脚本应如下所示：
- en: '[PRE16]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Save the script to `C:\ArcpyBook\Ch7\CreateFeatureLayer.py`.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将脚本保存到 `C:\ArcpyBook\Ch7\CreateFeatureLayer.py`。
- en: You can check your work by examining the `c:\ArcpyBook\code\Ch7\CreateFeatureLayer.py`
    solution file.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过检查 `c:\ArcpyBook\code\Ch7\CreateFeatureLayer.py` 解决方案文件来检查您的作品。
- en: Run the script. The new `Burglary_Layer` file will be added to the ArcMap table
    of contents:![How to do it…](img/B04314_07_6.jpg)
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行脚本。新的 `Burglary_Layer` 文件将被添加到 ArcMap 的内容表中：![如何操作…](img/B04314_07_6.jpg)
- en: The functionality of the **Make Table View** tool is equivalent to the **Make
    Feature Layer** tool. The difference is that it works against standalone tables
    instead of feature classes.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Make Table View**工具的功能与**Make Feature Layer**工具等效。区别在于它针对独立表而不是特征类。'
- en: 'Remove the following line of code:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除以下代码行：
- en: '[PRE17]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Add the following line of code in its place:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在其位置添加以下代码行：
- en: '[PRE18]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: You can check your work by examining the `c:\ArcpyBook\code\Ch7\CreateTableView.py`
    solution file.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过检查`c:\ArcpyBook\code\Ch7\CreateTableView.py`解决方案文件来检查您的作品。
- en: Run the script to see the table view added to the ArcMap table of contents.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行脚本以查看添加到ArcMap内容表的表视图。
- en: How it works...
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The Make Feature Layer and Make Table View tools create in-memory representations
    of feature classes and tables, respectively. Both, the Select by Attributes and
    Select by Location tools, require that these temporary, in-memory structures be
    passed as parameters when called from a Python script. Both tools also require
    that you pass a name for the temporary structures.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Make Feature Layer和Make Table View工具分别创建特征类和表的内存表示。Select by Attributes和Select
    by Location工具在从Python脚本调用时，都需要将这些临时内存结构作为参数传递。这两个工具还要求您传递临时结构的名称。
- en: There's more...
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: You can also apply a query to either the Make Feature Layer or the Make Table
    View tools to restrict the records returned in the feature layer or table view.
    This is done through the addition of a `where` clause when calling either of the
    tools from your script. This query is similar to a situation where you set a definition
    query on the layer by navigating to **Layer Properties** | **Definition Query**.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以将查询应用于Make Feature Layer或Make Table View工具，以限制特征层或表视图中返回的记录。这是通过在脚本中调用这些工具时添加`where`子句来完成的。此查询类似于您通过导航到**图层属性**
    | **定义查询**在图层上设置定义查询的情况。
- en: 'The syntax to add a query is as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 添加查询的语法如下：
- en: '[PRE19]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Selecting features and rows with the Select Layer by Attribute tool
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Select Layer by Attribute工具选择特征和行
- en: Attribute queries can be executed against a feature class or table through the
    use of the Select Layer by Attribute tool. A `where` clause can be included to
    filter the selected records and various selection types can be included.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 属性查询可以通过使用Select Layer by Attribute工具对特征类或表执行。可以包含`where`子句以过滤选定的记录，并包含各种选择类型。
- en: Getting ready
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The **Select Layer by Attribute** tool, shown in the following screenshot, is
    used to select records from a feature class or table based on a query that you
    define. We covered the somewhat complex topic of queries in an earlier recipe
    in this chapter, so hopefully, you now understand the basic concepts of creating
    a query. You have also learned how to create a temporary, in-memory representation
    of a feature class or table, which is a pre-requisite to using either the **Select
    by Attributes** or **Select by Location** tool.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如下截图所示的**Select Layer by Attribute**工具用于根据您定义的查询从特征类或表中选择记录。我们在本章前面的配方中介绍了查询的相对复杂主题，因此希望您现在理解了创建查询的基本概念。您还学习了如何创建特征类或表的临时内存表示，这是使用**Select
    by Attributes**或**Select by Location**工具的先决条件。
- en: '![Getting ready](img/B04314_07_7.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![准备工作](img/B04314_07_7.jpg)'
- en: 'The **Select by Attributes** tool uses a query along with either a feature
    layer or table view and a selection method to select records. By default, the
    selection method will be a new selection set. Other selection methods include
    "add to selection", "remove from selection", "subset selection", "switch selection",
    and "clear selection". Each of the selection methods is summarized as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**Select by Attributes**工具使用查询以及特征层或表视图和选择方法来选择记录。默认情况下，选择方法将是一个新的选择集。其他选择方法包括“添加到选择”、“从选择中删除”、“子集选择”、“切换选择”和“清除选择”。每种选择方法如下总结：'
- en: '`NEW_SELECTION`: This is the default selection method and it creates a new
    selection set'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NEW_SELECTION`：这是默认的选择方法，它创建一个新的选择集'
- en: '`ADD_TO_SELECTION`: This adds a selection set to the currently selected records
    based on a query'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ADD_TO_SELECTION`：此操作基于查询将选择集添加到当前选定的记录中'
- en: '`REMOVE_FROM_SELECTION`: This removes records from a selection set based on
    a query'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`REMOVE_FROM_SELECTION`：此操作基于查询从选择集中删除记录'
- en: '`SUBSET_SELECTION`: This combines selected records that are common to the existing
    selection set'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SUBSET_SELECTION`：此操作将选定的记录与现有选择集合并'
- en: '`SWITCH_SELECTION`: This selects records that are not selected currently and
    unselects the existing selection set'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SWITCH_SELECTION`：这将选择当前未选中的记录，并取消选中现有的选择集'
- en: '`CLEAR_SELECTION`: This clears all records that are currently a part of the
    selected set'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CLEAR_SELECTION`：这将清除当前选中集中的所有记录'
- en: 'The syntax to call the **Select by Attributes** tool is as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 调用**按属性选择**工具的语法如下：
- en: '[PRE20]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In this recipe, you'll learn how to use the **Select by Attributes** tool to
    select features from a feature class. You'll use the skills you learned in previous
    recipes to build a query, create a feature layer, and finally call the **Select
    by Attributes** tool.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，你将学习如何使用**按属性选择**工具从要素类中选择要素。你将使用在先前的菜谱中学到的技能来构建查询、创建要素层，并最终调用**按属性选择**工具。
- en: How to do it…
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'Follow these steps to learn how to select records from a table or feature class
    using the **Select Layer by Attributes** tool:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤学习如何使用**按要素层属性选择**工具从表或要素类中选择记录：
- en: Open IDLE and create a new script window.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开IDLE并创建一个新的脚本窗口。
- en: Save the script to `c:\ArcpyBook\Ch7\SelectLayerAttribute.py`.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将脚本保存到`c:\ArcpyBook\Ch7\SelectLayerAttribute.py`。
- en: 'Import the `arcpy` module:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`arcpy`模块：
- en: '[PRE21]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Set the workspace to the City of San Antonio geodatabase.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将工作空间设置为圣安东尼奥市地理数据库。
- en: '[PRE22]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Start a `try` block:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始一个`try`块：
- en: '[PRE23]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Create the query that we used in the first recipe in this chapter. This will
    serve as a `where` clause that will select all the records with a service area
    of `North`. This line of code and the next four should be indented:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建本章第一个菜谱中使用的查询。这将成为一个`where`子句，将选择所有服务区域为`North`的记录。这一行代码和接下来的四行应该有缩进：
- en: '[PRE24]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Make an in-memory copy of the `Burglary` feature class:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`Burglary`要素类的内存副本：
- en: '[PRE25]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Call the **Select Layer by Attribute** tool by passing in a reference to the
    feature layer we just created. Define this as a new selection set and pass in
    a reference to the query:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过传递我们刚刚创建的要素层的引用来调用**按要素层属性选择**工具。将其定义为新的选择集，并传递查询的引用：
- en: '[PRE26]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Print the number of selected records in the layer using the **Get Count** tool:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**获取计数**工具在图层中打印所选记录的数量：
- en: '[PRE27]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Add an `except` block and a line of code to print an error message in the event
    of a problem:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个`except`块和一行代码，以便在出现问题时打印错误消息：
- en: '[PRE28]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The entire script should appear as shown in the following code snippet. Please
    remember to include indentation with the `try` and `except` blocks:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 整个脚本应如以下代码片段所示。请记住，包括`try`和`except`块的缩进：
- en: '[PRE29]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Save the script.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存脚本。
- en: You can check your work by examining the `c:\ArcpyBook\code\Ch7\SelectLayerAttribute.py`
    solution file.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以通过检查`c:\ArcpyBook\code\Ch7\SelectLayerAttribute.py`解决方案文件来检查你的工作。
- en: 'Run the script. If everything has been done correctly, you should see a message
    indicating that `7520` records have been selected:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行脚本。如果一切正确，你应该会看到一个消息，表明已选择`7520`条记录：
- en: '[PRE30]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: How it works…
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The **Select by Attributes** tool requires that either a feature layer or table
    view be passed as the first parameter. In this recipe, we passed a feature layer
    that was created by the **Make Feature Layer** tool in the preceding line. We
    used **Make Feature Layer** to create a feature layer from the `Burglary` feature
    class. This feature layer was assigned to the `flayer` variable, which is then
    passed into the **Select by Attribute** tool as the first parameter. In this script,
    we also passed in a parameter indicating that we'd like to create a new selection
    set along with the `final` parameter, which is a `where` clause. The `where` clause
    is specified in the `qry` variable. This variable holds a query that will select
    all the features with a service area of `North`.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '**按属性选择**工具要求第一个参数传递一个要素层或表视图。在本例中，我们传递了一个由上一行中的**创建要素层**工具创建的要素层。我们使用**创建要素层**工具从`Burglary`要素类创建要素层。这个要素层被分配给`flayer`变量，然后作为第一个参数传递给**按属性选择**工具。在此脚本中，我们还传递了一个参数，表示我们希望创建一个新的选择集，以及`final`参数，它是一个`where`子句。`where`子句在`qry`变量中指定。此变量包含一个查询，将选择所有服务区域为`North`的要素。'
- en: Selecting features with the Select by Location tool
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用按位置选择工具选择要素
- en: The Select Layer by Location tool, as shown in the next screenshot, can be used
    to select features based on some type of spatial relationship. Since it deals
    with spatial relationships, this tool only applies to feature classes and their
    corresponding in-memory feature layers.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 如下截图所示的 **Select Layer by Location** 工具可以用于根据某种空间关系选择要素。由于它处理空间关系，此工具仅适用于要素类及其对应的内存要素层。
- en: Getting ready
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中
- en: There are many different types of spatial relationships that you can apply while
    selecting features using the **Select by Location** tool, including intersect,
    contains, within, boundary touches, is identical, and many others. If it's not
    specified, the default intersect spatial relationship will be applied. The input
    feature layer is the only required parameter, but there are a number of optional
    parameters, including the spatial relationship, search distance, a feature layer,
    or feature class to test against the input layer, and a selection type. In this
    recipe, you will learn how to use the **Select by Location** tool in a Python
    script to select features based on a spatial relationship. You'll use the tool
    to select burglaries that are within the boundaries of the Edgewood school district.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 **Select by Location** 工具选择要素时，你可以应用许多不同类型的空间关系，包括相交、包含、在范围内、边界接触、完全相同以及许多其他关系。如果没有指定，将应用默认的相交空间关系。输入要素层是唯一必需的参数，但还有许多可选参数，包括空间关系、搜索距离、要测试输入层的要素层或要素类，以及选择类型。在本教程中，你将学习如何在
    Python 脚本中使用 **Select by Location** 工具根据空间关系选择要素。你将使用此工具选择位于 Edgewood 学区边界内的盗窃事件。
- en: '![Getting ready](img/B04314_07_8.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![准备中](img/B04314_07_8.jpg)'
- en: How to do it…
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Follow these steps to learn how to perform a spatial query using the **Select
    by Location** tool:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤学习如何使用 **Select by Location** 工具执行空间查询：
- en: Open IDLE and create a new script window.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 IDLE 并创建一个新的脚本窗口。
- en: Save the script to `c:\ArcpyBook\Ch7\SelectByLocation.py`.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将脚本保存到 `c:\ArcpyBook\Ch7\SelectByLocation.py`。
- en: 'Import the `arcpy` module:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入 `arcpy` 模块：
- en: '[PRE31]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Set the workspace to the City of San Antonio geodatabase:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将工作空间设置为圣安东尼奥市地理数据库：
- en: '[PRE32]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Start a `try` block:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始一个 `try` 块：
- en: '[PRE33]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Make an in-memory copy of the `Burglary` feature class:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `Burglary` 要素类的内存副本：
- en: '[PRE34]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Call the **Select Layer by Location** tool passing in a reference to the feature
    layer we just created. The spatial relationship test will be `COMPLETELY_WITHIN`,
    meaning that we want to find all burglaries that are completely within the boundaries
    of the comparison layer. Define `EdgewoodSD.shp` as the comparison layer:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用 **Select Layer by Location** 工具，传入我们刚刚创建的要素层的引用。空间关系测试将是 `COMPLETELY_WITHIN`，这意味着我们想要找到完全位于比较层边界内的所有盗窃事件。将
    `EdgewoodSD.shp` 定义为比较层：
- en: '[PRE35]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Print the number of selected records in the layer using the **Get Count** tool:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 **Get Count** 工具在图层中打印所选记录的数量：
- en: '[PRE36]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Add an `except` block and a line of code to print an error message in the event
    of a problem:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个 `except` 块和一行代码，以便在出现问题时打印错误消息：
- en: '[PRE37]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The entire script should appear as shown in the following code snippet. Remember
    to include indentation with the `try` and `except` blocks:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 整个脚本应如以下代码片段所示。请记住，包括 `try` 和 `except` 块的缩进：
- en: '[PRE38]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Save the script.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存脚本。
- en: You can check your work by examining the `c:\ArcpyBook\code\Ch7\SelectByLocation_Step1.py`
    solution file.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以通过检查 `c:\ArcpyBook\code\Ch7\SelectByLocation_Step1.py` 解决方案文件来验证你的工作。
- en: 'Run the script. If everything was done correctly, you should see a message
    indicating that `1470` records have been selected:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行脚本。如果一切操作正确，你应该会看到一个消息指示已选择 `1470` 条记录：
- en: '[PRE39]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: In this case, we did not define the optional search distance and selection type
    parameters. By default, a new selection will be applied as the selection type.
    We didn't apply a distance parameter in this case, but we'll do this now to illustrate
    how it works.
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这种情况下，我们没有定义可选的搜索距离和选择类型参数。默认情况下，将应用新的选择作为选择类型。我们没有应用距离参数，但现在我们将这样做以说明其工作原理。
- en: 'Update the line of code that calls the **Select Layer by Location** tool:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新调用 **Select Layer by Location** 工具的代码行：
- en: '[PRE40]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Save the script.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存脚本。
- en: You can check your work by examining the `c:\ArcpyBook\code\Ch7\SelectByLocation_Step2.py`
    solution file.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以通过检查 `c:\ArcpyBook\code\Ch7\SelectByLocation_Step2.py` 解决方案文件来验证你的工作。
- en: 'Run the script. If everything was done correctly, you should see a message
    indicating that `2976` records have been selected. This will select all burglaries
    within the boundaries of the Edgewood school district along with any burglaries
    within one mile of the boundary:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行脚本。如果一切操作正确，你应该会看到一个消息指示已选择`2976`条记录。这将选择Edgewood学区边界内的所有盗窃案以及边界内一英里范围内的任何盗窃案：
- en: '[PRE41]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The final thing you'll do in this section is use the **Copy Features** tool
    to write the temporary layer to a new feature class.
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在本节中，你将使用**复制要素**工具将临时图层写入新的要素类。
- en: 'Comment out the two lines of code that get a count of the number of features
    and print them to the screen:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注释掉获取要素数量并打印到屏幕上的两行代码：
- en: '[PRE42]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Add a line of code that calls the **Copy Features** tool. This line should
    be placed just below the line of code that calls the **Select Layer by Location**
    tool. The **Copy Features** tool accepts a feature layer as the first input parameter
    and an output feature class, which in this case will be a shapefile called `EdgewoodBurglaries.shp`:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一行代码来调用**复制要素**工具。这一行代码应放置在调用**按位置选择图层**工具的代码行下方。**复制要素**工具接受一个要素图层作为第一个输入参数和一个输出要素类，在这种情况下将是一个名为`EdgewoodBurglaries.shp`的shapefile：
- en: '[PRE43]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The entire script should now appear as shown in the following code snippet.
    Remember to include indentation with the `try` and `except` blocks:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在脚本应该看起来像以下代码片段所示。请记住，包括`try`和`except`块之间的缩进：
- en: '[PRE44]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Save the script.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存脚本。
- en: You can check your work by examining the `c:\ArcpyBook\code\Ch7\SelectByLocation_Step3.py`
    solution file.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以通过检查`c:\ArcpyBook\code\Ch7\SelectByLocation_Step3.py`解决方案文件来检查你的工作。
- en: Run the script.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行脚本。
- en: Examine your `c:\ArcpyBook\Ch7` folder to see the output shapefile.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查你的`c:\ArcpyBook\Ch7`文件夹以查看输出shapefile。
- en: How it works…
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The **Select by Location** tool requires that a feature layer be passed as the
    first parameter. In this recipe, we pass a feature layer that was created by the
    **Make Feature Layer** tool in the preceding line. We used **Make Feature Layer**
    to create a feature layer from the `Burglary` feature class. This feature layer
    was assigned to the `flayer` variable, which is then passed into the **Select
    by Location** tool as the first parameter. In this script, we've also passed a
    parameter that indicates the spatial relationship that we'd like to apply. Finally,
    we've also defined a source layer to use for the comparison of the spatial relationship.
    Other optional parameters that can be applied include a search distance and a
    selection type.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '**按位置选择**工具要求将要素图层作为第一个参数传递。在这个菜谱中，我们传递了一个由上一行中的**创建要素图层**工具创建的要素图层。我们使用**创建要素图层**从`Burglary`要素类创建了一个要素图层。这个要素图层被分配给`flayer`变量，然后作为第一个参数传递给**按位置选择**工具。在这个脚本中，我们还传递了一个参数，表示我们想要应用的空间关系。最后，我们还定义了一个用于比较空间关系的源图层。其他可以应用的可选参数包括搜索距离和选择类型。'
- en: Combining a spatial and attribute query with the Select by Location tool
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用**按位置选择**工具结合空间和属性查询
- en: There may be times when you may want to select features using a combined attribute
    and spatial query. For example, you might want to select all burglaries within
    the Edgewood school district that occurred on a Monday. This can be accomplished
    by running the **Select by Location** and **Select by Attributes** tools sequentially
    and applying a `SUBSET SELECTION` selection type.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候你可能想使用组合属性和空间查询来选择要素。例如，你可能想选择在Edgewood学区发生的所有星期一的盗窃案。这可以通过依次运行**按位置选择**和**按属性选择**工具并应用`子集选择`选择类型来实现。
- en: Getting ready
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe will require that you create a feature layer that will serve as
    a temporary layer, which will be used with the **Select by Location** and **Select
    Layer by Attributes** tools. The **Select by Location** tool will find all burglaries
    that are within the Edgewood School District and apply a selection set to these
    features. The **Select Layer by Attributes** tool uses the same temporary feature
    layer and applies a `where` clause that finds all burglaries that occurred on
    a particular Monday. In addition to this, the tool also specifies that the selection
    should be a subset of the currently selected features found by the **Select by
    Location** tool. Finally, you'll print the total number of records that were selected
    by the combined spatial and attribute query.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 此菜谱将需要你创建一个作为临时图层使用的要素图层，该图层将与 **按位置选择** 和 **按属性选择图层** 工具一起使用。**按位置选择** 工具将找到所有位于
    Edgewood 学校区内的盗窃案件，并将选择集应用于这些要素。**按属性选择图层** 工具使用相同的临时要素图层，并应用一个 `where` 子句，以找到特定星期一发生的所有盗窃案件。此外，该工具还指定选择应该是通过
    **按位置选择** 工具找到的当前所选要素的子集。最后，你将打印出通过组合空间和属性查询所选的总记录数。
- en: How to do it...
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open IDLE and create a new script window.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 IDLE 并创建一个新的脚本窗口。
- en: Save the script as `c:\ArcpyBook\Ch7\SpatialAttributeQuery.py`.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将脚本保存为 `c:\ArcpyBook\Ch7\SpatialAttributeQuery.py`。
- en: 'Import the `arcpy` module:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入 `arcpy` 模块：
- en: '[PRE45]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Set the workspace to the geodatabase of the City of San Antonio:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将工作空间设置为圣安东尼奥市的地理数据库：
- en: '[PRE46]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Start a `try` block. You''ll have to indent the following line up to the `except`
    block:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始一个 `try` 块。你需要将以下行缩进到 `except` 块：
- en: '[PRE47]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Create a variable for the query and define the `where` clause:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为查询创建一个变量并定义 `where` 子句：
- en: '[PRE48]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Create the feature layer:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建要素图层：
- en: '[PRE49]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Execute the **Select by Location** tool to find all burglaries within the Edgewood
    School District:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行 **按位置选择** 工具以找到 Edgewood 学校区内的所有盗窃案件：
- en: '[PRE50]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Execute the **Select Layer by Attributes** tool to find all the burglaries
    that match the query we previously defined in the `qry` variable. This should
    be defined as a subset query:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行 **按属性选择图层** 工具以找到所有与我们在 `qry` 变量中先前定义的查询匹配的盗窃案件。这应该定义为子集查询：
- en: '[PRE51]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Print the number of records that were selected:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印所选记录的数量：
- en: '[PRE52]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Add the `except` block:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 `except` 块：
- en: '[PRE53]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'The entire script should appear as follows:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 整个脚本应如下所示：
- en: '[PRE54]'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Save and run the script. If everything was done correctly, you should see a
    message indicating that `197` records have been selected. This will select all
    the burglaries within the boundaries of the Edgewood School District that occurred
    on a Monday:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并运行脚本。如果一切操作正确，你应该会看到一个消息表明已选择 `197` 条记录。这将选择在 Edgewood 学校区边界内发生的所有星期一发生的盗窃案件：
- en: '[PRE55]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: You can check your work by examining the `c:\ArcpyBook\code\Ch7\SpatialAttributeQuery.py`
    solution file.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以通过检查 `c:\ArcpyBook\code\Ch7\SpatialAttributeQuery.py` 解决方案文件来验证你的工作。
- en: How it works...
  id: totrans-224
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: A new feature layer is created with the **Make Feature Layer** tool and assigned
    to the variable `flayer`. This temporary layer is then used as an input to the
    **Select by Location** tool along with a `COMPLETELY_WITHIN` spatial operator,
    to find all the burglaries within the Edgewood School District. This same feature
    layer, with a selection set already defined, is then used as an input parameter
    to the **Select Layer by Attributes** tool. In addition to passing a reference
    to the feature layer, the **Select Layer by Attributes** tool is also passed a
    parameter that defines the selection type and a `where` clause. The selection
    type is set to `SUBSET_SELECTION`. This selection type creates a new selection
    that is combined with the existing selection. Only the records that are common
    to both remain selected. The `where` clause passed in as the third parameter is
    an attribute query to find all the burglaries that occurred on a Monday. The query
    uses the `DOW` field and looks for a value of `Mon`. Finally, the **Get Count**
    tool is used against the `flayer` variable to get a count of the number of selected
    records, and this is printed on the screen.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 使用**创建要素图层**工具创建了一个新的要素图层，并将其分配给变量`flayer`。这个临时图层随后被用作**按位置选择**工具的输入，同时使用`COMPLETELY_WITHIN`空间运算符，以找到位于Edgewood学区内的所有盗窃事件。这个相同的要素图层，在已经定义了选择集之后，被用作**按属性选择图层**工具的输入参数。除了传递对要素图层的引用外，**按属性选择图层**工具还传递了一个参数，该参数定义了选择类型和`where`子句。选择类型设置为`SUBSET_SELECTION`。这种选择类型创建了一个新的选择，并将其与现有选择合并。只有两个选择都共有的记录才会被选中。作为第三个参数传入的`where`子句是一个属性查询，用于查找所有发生在周一的盗窃事件。查询使用`DOW`字段，寻找值为`Mon`的值。最后，使用**获取计数**工具对`flayer`变量进行操作，以获取选中记录的数量，并将此信息打印到屏幕上。
