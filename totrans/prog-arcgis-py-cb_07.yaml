- en: Chapter 7. Querying and Selecting Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Constructing a proper attribute query syntax
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating feature layers and table views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selecting features and rows with the Select Layer by Attribute tool
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selecting features with the Select by Location tool
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Combining a spatial and attribute query with the Select by Location tool
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Selecting features from a geographic layer or rows from a standalone attribute
    table is one of the most common GIS operations. Queries are created to enable
    these selections, and can be either attribute or spatial queries. **Attribute
    queries** use SQL statements to select features or rows through the use of one
    or more fields or columns in a dataset. An example attribute query would be "Select
    all land parcels with a property value greater than $500,000". **Spatial queries**
    are used to select features based on some type of spatial relationship. An example
    might be "Select all land parcels that intersect a school district" or perhaps
    "Select all streets that are completely within Travis County, Texas." It is also
    possible to combine attribute and spatial queries. An example might be "Select
    all land parcels that intersect the 100 year floodplain and have a property value
    greater than $500,000".
  prefs: []
  type: TYPE_NORMAL
- en: Constructing a proper attribute query syntax
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The construction of property attribute queries is critical to your success in
    creating geoprocessing scripts that query data from feature classes and tables.
    All attribute queries that you execute against feature classes and tables will
    need to have the correct SQL syntax and also follow various rules depending upon
    the data type that you execute the queries against.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Creating the syntax for attribute queries is one of the most difficult and time-consuming
    tasks that you'll need to master when creating Python scripts that incorporate
    the use of the **Select by Attributes** tool. These queries are basically SQL
    statements along with a few idiosyncrasies that you'll need to master. If you
    already have a good understanding of creating queries in ArcMap or perhaps experience
    in creating SQL statements in other programming languages, then this will be a
    little easier for you. In addition to creating valid SQL statements, you also
    need to be aware of some specific Python syntax requirements and some data type
    differences that will result in a slightly altered formatting of your statements
    for some data types. In this recipe, you'll learn how to construct valid query
    syntax and understand the nuances of how different data types alter the syntax
    as well as some Python-specific constructs.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Initially, we're going to take a look at how queries are constructed in ArcMap,
    so that you can get a feel of how they are structured.
  prefs: []
  type: TYPE_NORMAL
- en: In ArcMap, open `C:\ArcpyBook\Ch7\Crime_Ch7.mxd`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the **Burglaries in 2009** layer and select **Open Attribute
    Table**. You should see an attribute table similar to the following screenshot.
    We're going to be querying the **SVCAREA** field:![How to do it…](img/B04314_07_1.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the attribute table open, select the **Table Options** button and then
    **Select by Attributes** to display a dialog box that will allow you to construct
    an attribute query.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Notice the **Select * FROM Burglary WHERE**: statement on the query dialog
    box (shown in the following screenshot). This is a basic SQL statement that will
    return all the columns from the attribute table for **Burglary** that meet the
    condition that we define through the query builder. The asterisk (*****) simply
    indicates that all fields will be returned:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/B04314_07_3.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Make sure that **Create a new selection** is the selected item in the **Method**
    dropdown list. This will create a new selection set.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click on **SVCAREA** from the list of fields to add the field to the
    SQL statement builder, as follows:![How to do it…](img/B04314_07_4.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **=** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Get Unique Values** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the list of values generated, double-click on **'North'** to complete the
    SQL statement, as shown in the following screenshot:![How to do it…](img/B04314_07_5.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Apply** button to execute the query. This should select 7520
    records.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Many people mistakenly assume that you can simply take a query that has been
    generated in this fashion and paste it into a Python script. That is not the case.
    There are some important differences that we'll cover next.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Close the **Select by Attributes** window and the **Burglaries** in 2009 table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clear the selected feature set by navigating to **Selection** | **Clear Selected
    Features**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the Python window and add the code to import `arcpy`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new variable to hold the query and add the same statement that you
    created earlier:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Press *Enter* on your keyboard and you should see an error message similar
    to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Python interprets **SVCAREA** and **North** as strings, but the equal to sign
    between the two is not part of the string used to set the `qry` variable. There
    are several things we need to do to generate a syntactically correct statement
    for the Python interpreter.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'One important thing has already been taken care of though. Each field name
    used in a query needs to be surrounded by double quotes. In this case, **SVCAREA**
    is the only field used in the query and it has already been enclosed by double
    quotes. This will always be the case when you''re working with shapefiles, file
    geodatabases, or ArcSDE geodatabases. Here is where it gets a little confusing
    though. If you''re working with data from a personal geodatabase, the field names
    will need to be enclosed by square brackets instead of double quotes, as shown
    in the following code example. This can certainly leads to confusion for script
    developers:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we need to deal with the single quotes surrounding **''North''**. When
    querying data from fields that have a `text` data type, the string being evaluated
    must be enclosed by quotes. If you examine the original query, you''ll notice
    that we have in fact already enclosed `North` with quotes, so everything should
    be fine, right? Unfortunately, it''s not that simple with Python. Quotes along
    with a number of other characters must be escaped with a forward slash followed
    by the character being escaped. In this case, the escape sequence would be `\''`
    as shown in the following steps:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Alter your query syntax to incorporate the escape sequence:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, the entire query statement should be enclosed with quotes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In addition to the `=` sign, which tests for equality, there are a number of
    additional operators that you can use with strings and numeric data, including
    not equal (`< >`), greater than (`>`), greater than or equal to (`>=`), less than
    (`<`), and less than or equal to (`<=`).
  prefs: []
  type: TYPE_NORMAL
- en: 'Wildcard characters, including `%` and `_`, can also be used for shapefiles,
    file geodatabases, and ArcSDE geodatabases. These include `%` that represents
    any number of characters. The `LIKE` operator is often used with wildcard characters
    to perform partial string matching. For example, the following query would find
    all records with a service area that begins with `N` and has any number of characters
    after it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The (`_`) underscore character can be used to represent a single character.
    For personal geodatabases, the (`*`) asterisk is used to represent a wildcard
    character for any number of characters, while (`?`) represents a single character.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also query for the absence of data, also known as `NULL` values. A
    `NULL` value is often mistaken for a value of zero, but this does not always hold
    true. The `NULL` values indicate the absence of data, which is different from
    a value of zero. Null operators include **IS NULL** and **IS NOT NULL**. The following
    code example will find all the records where the `SVCAREA` field contains no data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The final topic that we'll cover in this section are operators used to combine
    expressions where multiple query conditions need to be met. The `AND` operator
    requires that both query conditions be met for the query result to be true, resulting
    in selected records. The `OR` operator requires that at least one of the conditions
    be met.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The creation of syntactically correct queries is one of the most challenging
    aspects of programming ArcGIS with Python. However, once you understand some basic
    rules, it gets a little easier. In this section, we'll summarize these rules.
    One of the more important things to keep in mind is that field names must be enclosed
    with double quotes for all datasets, with the exception of personal geodatabases,
    which require braces surrounding field names.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is also an `AddFieldDelimiters()` function that you can use to add the
    correct delimiter to a field based on the datasource supplied as a parameter to
    the function. The syntax for this function is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Additionally, most people, especially those new to programming with Python,
    struggle with the issue of adding single quotes to string values being evaluated
    by the query. In Python, quotes have to be escaped with a single forward slash
    followed by the quote. Using this escape sequence will ensure that Python does
    in fact see this as a quote rather than the end of the string.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, take some time to familiarize yourself with the wildcard characters.
    For datasets other than personal geodatabases, you'll use the `%` character for
    multiple characters and an underscore character for a single character. If you're
    using a personal geodatabase, the `*` character is used to match multiple characters
    and the `?` character is used to match a single character. Obviously, the syntax
    differences between personal geodatabases and all other types of datasets can
    lead to some confusion.
  prefs: []
  type: TYPE_NORMAL
- en: Creating feature layers and table views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feature layers and table views serve as intermediate datasets held in memory
    specifically for use with tools, such as **Select by Location** and **Select Attributes**.
    Although these temporary datasets can be saved, they are not needed in most cases.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Feature classes are physical representations of geographic data and are stored
    as files (shapefiles, personal geodatabases, and file geodatabases) or within
    a geodatabase. **Environmental Systems Research Institute** (**Esri**) defines
    a feature class as "a collection of features that shares a common geometry (point,
    line, or polygon), attribute table, and spatial reference."
  prefs: []
  type: TYPE_NORMAL
- en: Feature classes can contain default and user-defined fields. Default fields
    include the `SHAPE` and `OBJECTID` fields. These fields are maintained and updated
    automatically by ArcGIS. The `SHAPE` field holds the geometric representation
    of a geographic feature, while the `OBJECTID` field holds a unique identifier
    for each feature. Additional default fields will also exist depending on the type
    of feature class. A line feature class will have a `SHAPE_LENGTH` field. A polygon
    feature class will have both, a `SHAPE_LENGTH` and a `SHAPE_AREA` field.
  prefs: []
  type: TYPE_NORMAL
- en: Optional fields are created by end users of ArcGIS and are not automatically
    updated by GIS. These contain attribute information about the features. These
    fields can also be updated by your scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Tables are physically represented as standalone **DBF** (also known as **dBase
    File Format**) tables or within a geodatabase. Both, tables and feature classes,
    contain attribute information. However, a table contains only attribute information.
    There isn't a `SHAPE` field associated with a table, and they may or may not contain
    an `OBJECTID` field.
  prefs: []
  type: TYPE_NORMAL
- en: Standalone Python scripts that use the **Select by Attributes** or **Select
    by Location** tool require that you create an intermediate dataset rather than
    using feature classes or tables. These intermediate datasets are temporary in
    nature and are called **feature layers** or **table views**. Unlike feature classes
    and tables, these temporary datasets do not represent actual files on disk or
    within a geodatabase. Instead, they are an in-memory representation of feature
    classes and tables. These datasets are active only while a Python script is running.
    They are removed from memory after the tool has been executed. However, if the
    script is run from within ArcGIS as a script tool, then the temporary layer can
    be saved either by right-clicking on the layer in the table of contents and selecting
    **Save As Layer File** or simply by saving the map document file.
  prefs: []
  type: TYPE_NORMAL
- en: Feature layers and table views must be created as a separate step in your Python
    scripts before you can call the **Select by Attributes** or **Select by Location**
    tools. The **Make Feature Layer** tool generates the in-memory representation
    of a feature class, which can then be used to create queries and selection sets
    as well as join tables. After this step has been completed, you can use the **Select
    by Attributes** or **Select by Location** tool. Similarly, the **Make Table View**
    tool is used to create an in-memory representation of a table. The function of
    this tool is the same as **Make Feature Layer**. Both the **Make Feature Layer**
    and **Make Table View** tools require an input dataset, an output layer name,
    and an optional query expression, which can be used to limit the features or rows
    that are a part of the output layer. In addition to this, both tools can be found
    in the **Data Management Tools** toolbox.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax to use the Make Feature Layer tool is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The syntax to use the **Make Table View** tool is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: In this recipe, you will learn how to use the **Make Feature Layer** and **Make
    Table View** tools. These tasks will be done inside ArcGIS, so that you can see
    the in-memory copy of the layer that is created.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to use the Make Feature Layer and Make Table
    View tools:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `c:\ArcpyBook\Ch7\Crime_Ch7.mxd` in ArcMap.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Python window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `arcpy` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the workspace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start a `try` block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make an in-memory copy of the **Burglary** feature class using the **Make Feature
    Layer** tool. Make sure you indent this line of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add an `except` block and a line of code to print an error message in the event
    of a problem:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The entire script should appear as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the script to `C:\ArcpyBook\Ch7\CreateFeatureLayer.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can check your work by examining the `c:\ArcpyBook\code\Ch7\CreateFeatureLayer.py`
    solution file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the script. The new `Burglary_Layer` file will be added to the ArcMap table
    of contents:![How to do it…](img/B04314_07_6.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The functionality of the **Make Table View** tool is equivalent to the **Make
    Feature Layer** tool. The difference is that it works against standalone tables
    instead of feature classes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Remove the following line of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following line of code in its place:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can check your work by examining the `c:\ArcpyBook\code\Ch7\CreateTableView.py`
    solution file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the script to see the table view added to the ArcMap table of contents.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Make Feature Layer and Make Table View tools create in-memory representations
    of feature classes and tables, respectively. Both, the Select by Attributes and
    Select by Location tools, require that these temporary, in-memory structures be
    passed as parameters when called from a Python script. Both tools also require
    that you pass a name for the temporary structures.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can also apply a query to either the Make Feature Layer or the Make Table
    View tools to restrict the records returned in the feature layer or table view.
    This is done through the addition of a `where` clause when calling either of the
    tools from your script. This query is similar to a situation where you set a definition
    query on the layer by navigating to **Layer Properties** | **Definition Query**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax to add a query is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Selecting features and rows with the Select Layer by Attribute tool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Attribute queries can be executed against a feature class or table through the
    use of the Select Layer by Attribute tool. A `where` clause can be included to
    filter the selected records and various selection types can be included.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Select Layer by Attribute** tool, shown in the following screenshot, is
    used to select records from a feature class or table based on a query that you
    define. We covered the somewhat complex topic of queries in an earlier recipe
    in this chapter, so hopefully, you now understand the basic concepts of creating
    a query. You have also learned how to create a temporary, in-memory representation
    of a feature class or table, which is a pre-requisite to using either the **Select
    by Attributes** or **Select by Location** tool.
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/B04314_07_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The **Select by Attributes** tool uses a query along with either a feature
    layer or table view and a selection method to select records. By default, the
    selection method will be a new selection set. Other selection methods include
    "add to selection", "remove from selection", "subset selection", "switch selection",
    and "clear selection". Each of the selection methods is summarized as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`NEW_SELECTION`: This is the default selection method and it creates a new
    selection set'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ADD_TO_SELECTION`: This adds a selection set to the currently selected records
    based on a query'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`REMOVE_FROM_SELECTION`: This removes records from a selection set based on
    a query'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SUBSET_SELECTION`: This combines selected records that are common to the existing
    selection set'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SWITCH_SELECTION`: This selects records that are not selected currently and
    unselects the existing selection set'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CLEAR_SELECTION`: This clears all records that are currently a part of the
    selected set'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The syntax to call the **Select by Attributes** tool is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: In this recipe, you'll learn how to use the **Select by Attributes** tool to
    select features from a feature class. You'll use the skills you learned in previous
    recipes to build a query, create a feature layer, and finally call the **Select
    by Attributes** tool.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to select records from a table or feature class
    using the **Select Layer by Attributes** tool:'
  prefs: []
  type: TYPE_NORMAL
- en: Open IDLE and create a new script window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the script to `c:\ArcpyBook\Ch7\SelectLayerAttribute.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `arcpy` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Set the workspace to the City of San Antonio geodatabase.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start a `try` block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the query that we used in the first recipe in this chapter. This will
    serve as a `where` clause that will select all the records with a service area
    of `North`. This line of code and the next four should be indented:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make an in-memory copy of the `Burglary` feature class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Call the **Select Layer by Attribute** tool by passing in a reference to the
    feature layer we just created. Define this as a new selection set and pass in
    a reference to the query:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print the number of selected records in the layer using the **Get Count** tool:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add an `except` block and a line of code to print an error message in the event
    of a problem:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The entire script should appear as shown in the following code snippet. Please
    remember to include indentation with the `try` and `except` blocks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can check your work by examining the `c:\ArcpyBook\code\Ch7\SelectLayerAttribute.py`
    solution file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the script. If everything has been done correctly, you should see a message
    indicating that `7520` records have been selected:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Select by Attributes** tool requires that either a feature layer or table
    view be passed as the first parameter. In this recipe, we passed a feature layer
    that was created by the **Make Feature Layer** tool in the preceding line. We
    used **Make Feature Layer** to create a feature layer from the `Burglary` feature
    class. This feature layer was assigned to the `flayer` variable, which is then
    passed into the **Select by Attribute** tool as the first parameter. In this script,
    we also passed in a parameter indicating that we'd like to create a new selection
    set along with the `final` parameter, which is a `where` clause. The `where` clause
    is specified in the `qry` variable. This variable holds a query that will select
    all the features with a service area of `North`.
  prefs: []
  type: TYPE_NORMAL
- en: Selecting features with the Select by Location tool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Select Layer by Location tool, as shown in the next screenshot, can be used
    to select features based on some type of spatial relationship. Since it deals
    with spatial relationships, this tool only applies to feature classes and their
    corresponding in-memory feature layers.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are many different types of spatial relationships that you can apply while
    selecting features using the **Select by Location** tool, including intersect,
    contains, within, boundary touches, is identical, and many others. If it's not
    specified, the default intersect spatial relationship will be applied. The input
    feature layer is the only required parameter, but there are a number of optional
    parameters, including the spatial relationship, search distance, a feature layer,
    or feature class to test against the input layer, and a selection type. In this
    recipe, you will learn how to use the **Select by Location** tool in a Python
    script to select features based on a spatial relationship. You'll use the tool
    to select burglaries that are within the boundaries of the Edgewood school district.
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/B04314_07_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to perform a spatial query using the **Select
    by Location** tool:'
  prefs: []
  type: TYPE_NORMAL
- en: Open IDLE and create a new script window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the script to `c:\ArcpyBook\Ch7\SelectByLocation.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `arcpy` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the workspace to the City of San Antonio geodatabase:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start a `try` block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make an in-memory copy of the `Burglary` feature class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Call the **Select Layer by Location** tool passing in a reference to the feature
    layer we just created. The spatial relationship test will be `COMPLETELY_WITHIN`,
    meaning that we want to find all burglaries that are completely within the boundaries
    of the comparison layer. Define `EdgewoodSD.shp` as the comparison layer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print the number of selected records in the layer using the **Get Count** tool:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add an `except` block and a line of code to print an error message in the event
    of a problem:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The entire script should appear as shown in the following code snippet. Remember
    to include indentation with the `try` and `except` blocks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can check your work by examining the `c:\ArcpyBook\code\Ch7\SelectByLocation_Step1.py`
    solution file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the script. If everything was done correctly, you should see a message
    indicating that `1470` records have been selected:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this case, we did not define the optional search distance and selection type
    parameters. By default, a new selection will be applied as the selection type.
    We didn't apply a distance parameter in this case, but we'll do this now to illustrate
    how it works.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the line of code that calls the **Select Layer by Location** tool:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can check your work by examining the `c:\ArcpyBook\code\Ch7\SelectByLocation_Step2.py`
    solution file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the script. If everything was done correctly, you should see a message
    indicating that `2976` records have been selected. This will select all burglaries
    within the boundaries of the Edgewood school district along with any burglaries
    within one mile of the boundary:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The final thing you'll do in this section is use the **Copy Features** tool
    to write the temporary layer to a new feature class.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Comment out the two lines of code that get a count of the number of features
    and print them to the screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a line of code that calls the **Copy Features** tool. This line should
    be placed just below the line of code that calls the **Select Layer by Location**
    tool. The **Copy Features** tool accepts a feature layer as the first input parameter
    and an output feature class, which in this case will be a shapefile called `EdgewoodBurglaries.shp`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The entire script should now appear as shown in the following code snippet.
    Remember to include indentation with the `try` and `except` blocks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can check your work by examining the `c:\ArcpyBook\code\Ch7\SelectByLocation_Step3.py`
    solution file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Examine your `c:\ArcpyBook\Ch7` folder to see the output shapefile.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Select by Location** tool requires that a feature layer be passed as the
    first parameter. In this recipe, we pass a feature layer that was created by the
    **Make Feature Layer** tool in the preceding line. We used **Make Feature Layer**
    to create a feature layer from the `Burglary` feature class. This feature layer
    was assigned to the `flayer` variable, which is then passed into the **Select
    by Location** tool as the first parameter. In this script, we've also passed a
    parameter that indicates the spatial relationship that we'd like to apply. Finally,
    we've also defined a source layer to use for the comparison of the spatial relationship.
    Other optional parameters that can be applied include a search distance and a
    selection type.
  prefs: []
  type: TYPE_NORMAL
- en: Combining a spatial and attribute query with the Select by Location tool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There may be times when you may want to select features using a combined attribute
    and spatial query. For example, you might want to select all burglaries within
    the Edgewood school district that occurred on a Monday. This can be accomplished
    by running the **Select by Location** and **Select by Attributes** tools sequentially
    and applying a `SUBSET SELECTION` selection type.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe will require that you create a feature layer that will serve as
    a temporary layer, which will be used with the **Select by Location** and **Select
    Layer by Attributes** tools. The **Select by Location** tool will find all burglaries
    that are within the Edgewood School District and apply a selection set to these
    features. The **Select Layer by Attributes** tool uses the same temporary feature
    layer and applies a `where` clause that finds all burglaries that occurred on
    a particular Monday. In addition to this, the tool also specifies that the selection
    should be a subset of the currently selected features found by the **Select by
    Location** tool. Finally, you'll print the total number of records that were selected
    by the combined spatial and attribute query.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open IDLE and create a new script window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the script as `c:\ArcpyBook\Ch7\SpatialAttributeQuery.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `arcpy` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the workspace to the geodatabase of the City of San Antonio:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start a `try` block. You''ll have to indent the following line up to the `except`
    block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a variable for the query and define the `where` clause:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the feature layer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Execute the **Select by Location** tool to find all burglaries within the Edgewood
    School District:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Execute the **Select Layer by Attributes** tool to find all the burglaries
    that match the query we previously defined in the `qry` variable. This should
    be defined as a subset query:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print the number of records that were selected:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `except` block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The entire script should appear as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save and run the script. If everything was done correctly, you should see a
    message indicating that `197` records have been selected. This will select all
    the burglaries within the boundaries of the Edgewood School District that occurred
    on a Monday:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can check your work by examining the `c:\ArcpyBook\code\Ch7\SpatialAttributeQuery.py`
    solution file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A new feature layer is created with the **Make Feature Layer** tool and assigned
    to the variable `flayer`. This temporary layer is then used as an input to the
    **Select by Location** tool along with a `COMPLETELY_WITHIN` spatial operator,
    to find all the burglaries within the Edgewood School District. This same feature
    layer, with a selection set already defined, is then used as an input parameter
    to the **Select Layer by Attributes** tool. In addition to passing a reference
    to the feature layer, the **Select Layer by Attributes** tool is also passed a
    parameter that defines the selection type and a `where` clause. The selection
    type is set to `SUBSET_SELECTION`. This selection type creates a new selection
    that is combined with the existing selection. Only the records that are common
    to both remain selected. The `where` clause passed in as the third parameter is
    an attribute query to find all the burglaries that occurred on a Monday. The query
    uses the `DOW` field and looks for a value of `Mon`. Finally, the **Get Count**
    tool is used against the `flayer` variable to get a count of the number of selected
    records, and this is printed on the screen.
  prefs: []
  type: TYPE_NORMAL
