- en: Expanding QGIS 3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this final chapter, we will look at expanding QGIS. We will look at combining
    tools into a model using the model builder. This effectively allows us to build
    our own reusable model, using parameters we either hardcode in or leave to the
    user to adjust. We will look at the ever-increasing range of plugins, before finally
    taking a brief look at the Python command line, where we can create scripts in
    the future as confidence grows with QGIS.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the topics covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Model builder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python command line
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Model builder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You may recall that in the [Chapter 6](6cd8f808-67bd-4788-8e7a-ccd3ce12a11d.xhtml),
    *Spatial Processing* we ran several tools to utilize the zonal histogram answer
    to the distribution of terrains (`Landcover`) in a buffered pipeline corridor.
    Open a new QGIS project and load in the `Pipeline` layer and the `Landcover`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a model, go to Processing | Graphical Modeler to open the modeler,
    where we can select from different Inputs and Algorithms for our model. Graphical
    Modeler is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5cc0a689-e513-4988-9565-9f11659ea914.png)'
  prefs: []
  type: TYPE_IMG
- en: The Graphical Modeler
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the Inputs tab and choose Vector Layer. Add a new parameter called `Pipeline`
    and set Geometry type to Line; this is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6bd57ef8-e2be-480f-abeb-ed1858b71cf8.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a Pipeline attribute as a Geometry typeâ€”Line
  prefs: []
  type: TYPE_NORMAL
- en: Click on OK. Now, add Raster Layer and call it `Landcover`. In the Algorithms
    tab, we can use the filter at the top to narrow down our search for the correct
    algorithm. Search for `buffer` and double-click to open the algorithm. Fill in
    Distance as `15000` and check the box to make sure the layer is dissolved.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, search for and open the Zonal histogram tool and change the prefix to
    `Terrain_`. This is our final output so tell the model it is the final result.
    The final output is what is returned to the user once the model has been successfully
    run. The inputs should look like the following dialog box:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6d2a6fa6-7ea6-4bca-b182-d24ffc0b69ff.png)'
  prefs: []
  type: TYPE_IMG
- en: Zonal histogram tool
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on OK. To finish the model, we need to enter a model Name (`Pipeline_impact_terrain`)
    and a Group name (`QuickStart_QGIS`). Processing will use the Group name to organize
    all the models that we create into different toolbox groups. The model is now
    complete. The finished model will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/80bf9e3a-9161-49d0-ad73-c56161178457.png)'
  prefs: []
  type: TYPE_IMG
- en: The Graphical Modeler with the model displayed
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the save icon and save as `terrain_stats.model3`. Click on the green
    triangle or press *F5* to run the model. A dialog box should appear as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/45aceba5-6655-4259-b05f-d6d4643e95cf.png)'
  prefs: []
  type: TYPE_IMG
- en: The model represented as a tool
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on Run to execute the model. The pipeline output will appear in the QGIS
    map window. After closing the modeler, we can run the saved models from the toolbox
    like any other tool. Look in Processing Toolbox under Models. This newly created
    model will appear there, as shown in the following screenshot. It is even possible
    to use one model as a building block for another model:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c14ff5a8-243f-49e0-b087-51465a8b43c4.png)'
  prefs: []
  type: TYPE_IMG
- en: Model appears in the Processing Toolbox under Models
  prefs: []
  type: TYPE_NORMAL
- en: Another useful feature is that we can specify a layer style that needs to be
    automatically applied to the processing results. This default style can be set
    by right-clicking and selecting Edit, rendering styles for outputs in the context
    menu of the created model in the toolbox. This means that you can automate building
    maps if you wish.
  prefs: []
  type: TYPE_NORMAL
- en: You can share your models by giving the `.model3` file to others. This is the
    first step in expanding the use of QGIS. Save your project.
  prefs: []
  type: TYPE_NORMAL
- en: Plugins in QGIS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We briefly touched on plugins in [Chapter 5](2481b8d1-b60c-4839-bb1c-c8654cd792b2.xhtml),
    *Creating Maps*. We used qgis2web to convert our Alaska map into a web map. The
    top plugins by download are listed here: [https://plugins.qgis.org/plugins/popular/](https://plugins.qgis.org/plugins/popular/).
    You can use this page to search for plugins or look at tags to view the different
    plugins and their capabilities.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Plugins are accessed via the Plugins menu. Some plugins are experimental. By
    experimental, we mean they could be unstable or in the early stages of development,
    but it is worth turning these on in case a plugin is available that might help
    your workflows; just use them with caution. From the Plugins dialog, choose Settings
    and check the box next to Show also experimental plugins:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c1d4dcd8-92cb-4d88-89b1-15ad4e24a450.png)'
  prefs: []
  type: TYPE_IMG
- en: Plugin settings
  prefs: []
  type: TYPE_NORMAL
- en: Semi-Automatic Classification Plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Semi-Automatic Classification Plugin** (**SCP**) for QGIS allows for the
    supervised classification of remote sensing images, providing tools for the downloading,
    preprocessing, and postprocessing of satellite images ([https://plugins.qgis.org/plugins/SemiAutomaticClassificationPlugin/)](https://plugins.qgis.org/plugins/SemiAutomaticClassificationPlugin/).
    It is an amazingly powerful tool that significantly extends Remote Sensing functionality
    into QGIS.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, we will use the SCP to download a `Sentinel-2` image that
    covers the part of Alaska that we digitized: Fire Island. At this point, please
    make sure you have an account with the **Copernicus Open Data Hub**. You can do
    this at: [https://scihub.copernicus.eu/dhus/#/self-registration](https://scihub.copernicus.eu/dhus/#/self-registration).'
  prefs: []
  type: TYPE_NORMAL
- en: Open a new QGIS project and add the `OpenStreeMap` data from `XYZ Tiles` in
    the Browser panel, and then add the `Island_Outline` layer from the `Fire_Island`
    GeoPackage that we created in [Chapter 3](0e2ba9ae-3346-4444-b28a-389d22737646.xhtml),
    *Creating Data*. Make sure that the map project in the status bar is set to EPSG
    3857.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the SCP, select Plugins | Manage and Install Plugins. Click on the
    All tab, search for SCP, and click on Install plugin. Two new toolbars and one
    new panel will appear. In this example, we will look only at the SCP working toolbar,
    as shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e824f2a9-8f5c-439e-ac9c-d3160e0b2ddf.png)'
  prefs: []
  type: TYPE_IMG
- en: SCP Working Toolbar
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the button on the far left of this toolbar; this will open a dialog
    box, shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1312f6e9-1cae-42a0-ba8b-1819896cd3e8.png)'
  prefs: []
  type: TYPE_IMG
- en: Semi-Automatic Classification Plugin dialog box
  prefs: []
  type: TYPE_NORMAL
- en: 'Assuming that you have an account set up with the Copernicus Open Data Hub,
    then click on the Download products menu and select the Login data tab. Here,
    enter your username and password. Next, select the Search tab and select `Sentinel-2`
    from Products list, set the date range to November 01, 2018, to December 01, 2018,
    and the cloud cover to 25%, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/890cd41c-c821-4c9e-9ecc-2e8f6f68bc53.png)'
  prefs: []
  type: TYPE_IMG
- en: Setting the Search parameters
  prefs: []
  type: TYPE_NORMAL
- en: 'To define the area we are searching, click on the button with plus sign with
    an orange background, minimize the window, and return to the main QGIS screen.
    Left-click to get the **Upper Left** (**UL**) and right-click to get the **Lower
    Right** (**LR**). You should get a box drawn on your map as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a5a67d9c-ea0c-4cee-acb3-eb8ffda41f93.png)'
  prefs: []
  type: TYPE_IMG
- en: An overview of defining the search area
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the plugin (you can click the plugin button as before, or just maximize
    the SCP plugin window). If you are happy with Search parameters, click on the
    button next to Find. The results will be returned in Product list. You can click
    each one to find the best image. This is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1711546a-fb37-4952-ae38-94d5adadeec1.png)'
  prefs: []
  type: TYPE_IMG
- en: Selecting an image
  prefs: []
  type: TYPE_NORMAL
- en: 'If you uncheck the Only if preview in Layers option, at this point you could
    click on Run (bottom-right-hand corner). That will go ahead and download a large
    amount of data and preprocess it (correct for atmospheric effects). In this example,
    to save on download size, select Download options and choose only band 2, 3, and
    4 and the ancillary data. This will allow us to create a true color satellite
    image. I have also turned off the Preprocess images options to simplify this walk-through.
    These options are shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e0d48a71-2883-4161-9490-12887d4cb166.png)'
  prefs: []
  type: TYPE_IMG
- en: Specify the download options
  prefs: []
  type: TYPE_NORMAL
- en: 'Back in the Search tab, I have turned on the Only if preview in Layers option
    and clicked on the Display preview of highlighted images in map button. This has
    added my selected product to my map. This is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/aa2d92ca-eaad-48b9-8f33-ecd6fb7b4e9e.png)'
  prefs: []
  type: TYPE_IMG
- en: Displaying a preview in the layers via the dialog box
  prefs: []
  type: TYPE_NORMAL
- en: Finally, click on the RUN button, select the folder you wish to save the data
    in, and let the data download. When finished, you should have your `Sentinel-2`
    images loaded as layers in QGIS. There is significantly more functionality in
    this plugin than covered here. If you are interested in exploring the available
    functionality further, including classification of satellite data with QGIS, then
    please visit [https://fromgistors.blogspot.com/p/semi-automatic-classification-plugin.html](https://fromgistors.blogspot.com/p/semi-automatic-classification-plugin.html)
    for extensive documentation, videos, and guides.
  prefs: []
  type: TYPE_NORMAL
- en: 'The satellite data should be loaded into QGIS. Using Raster Toolbar, stretch
    one of the bands until you can see it (sometimes images are loaded dark, especially
    if there is a large amount of sea in them). Your screen should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d6f51586-4bd3-4e7b-9727-51c23a2b05b7.png)'
  prefs: []
  type: TYPE_IMG
- en: Downloaded satellite image appears in QGIS
  prefs: []
  type: TYPE_NORMAL
- en: There are many more plugins available; use Plugin Manager to search for and
    explore new tools to work with.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Python command line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: From the Plugins toolbar, select the Python Console button, or press *Ctrl*
    + *Alt* + *P*, or select Python Console from the Plugins menu.
  prefs: []
  type: TYPE_NORMAL
- en: Python has become the programming language of choice for GIS. In this book,
    we will just look at the basics of the QGIS API. As you become more advanced,
    you can use Python to develop your own plugins and custom scripts. Eventually,
    you could use the QGIS Python library (PyQGIS), external to QGIS, to build applications.
  prefs: []
  type: TYPE_NORMAL
- en: Open a new empty QGIS project.
  prefs: []
  type: TYPE_NORMAL
- en: Loading a layer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To load a vector layer, we use the `addVectorLayer()` function of `iface`.
    The `iface` class is used to access the graphical part of the QGIS interface.
    In the following example, I am adding `airport.shp` to the map. This is shown
    in one line of code, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Press the *Enter* key and the `airports` layer is now loaded (change the path
    to your Shapefile):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/416c361d-04a1-4981-8718-709c6bd74a55.png)'
  prefs: []
  type: TYPE_IMG
- en: The airports Shapefile loaded into the QGIS map
  prefs: []
  type: TYPE_NORMAL
- en: 'Add another layer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We now have the `alaska` boundary and the `airports` layer added to the map.
  prefs: []
  type: TYPE_NORMAL
- en: Inspecting the layer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can look at each layer by accessing some of the properties. To get the name
    of the layer, use the `.name()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'To count the number of records in the layer, use the `featureCount()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'To print the attributes for all these `76` layers, use a `for` loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Remember to use the indentation. The result will look similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b52990bf-9ff0-40da-bb5e-400304fc916c.png)'
  prefs: []
  type: TYPE_IMG
- en: The QGIS Python Console printing out the attribute table
  prefs: []
  type: TYPE_NORMAL
- en: Scripts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The command line can get confusing. It is better to build scripts and test on
    the command line. Let's convert these command-line calls into a Python script.
    Close this project and open a new QGIS project. Open the Python Console.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the Show Editor button to open a scripting window. This is shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/589671a7-84fe-4b2b-87db-01b5637c6820.png)'
  prefs: []
  type: TYPE_IMG
- en: The Python Console
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the following code into the script editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Or, alternatively, you can download data from [https://github.com/PacktPublishing/QGIS-Quick-Start-Guide/blob/master/Chapter07/01_Loading_Data.py](https://github.com/PacktPublishing/QGIS-Quick-Start-Guide/blob/master/Chapter_07/01_Loading_Data.py).
    Be sure to re point to your data location. Click on the Save As button in the
    editor to save the file to your project as `01_Loading_data.py`. Then, click Run
    (the green triangle). The result should look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b8402042-f526-459c-a64a-da0e82e9bef0.png)'
  prefs: []
  type: TYPE_IMG
- en: The script in the Python Console
  prefs: []
  type: TYPE_NORMAL
- en: 'To learn more about the vector class, have a look at the documentation here:
    [https://qgis.org/api/classQgsVectorLayer.html](https://qgis.org/api/classQgsVectorLayer.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Loading raster data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s build another script to load raster data. Copy the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The code in this script is loading in two layers, `Hillshade` and `Landcover`,
    printing the names to the console, and printing the image dimensions.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download data from here: [https://github.com/PacktPublishing/QGIS-Quick-Start-Guide/blob/master/Chapter07/02_Loading_data_raster.py](https://github.com/PacktPublishing/QGIS-Quick-Start-Guide/blob/master/Chapter_07/02_Loading_data_raster.py).
    Be sure to repoint to your data location if different to the script. Click on
    the Save As button in the editor to save the file to your project as `02_Loading_data_raster.py`.
    Then, click Run (the green triangle). The result should look like the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/611d78a4-b338-4d5e-907d-c65daf4e1633.png)'
  prefs: []
  type: TYPE_IMG
- en: The script in the Python Console
  prefs: []
  type: TYPE_NORMAL
- en: 'To explore more about the `Raster` class, have a look at the documentation
    here: [https://qgis.org/api/classQgsRasterLayer.html](https://qgis.org/api/classQgsRasterLayer.html).'
  prefs: []
  type: TYPE_NORMAL
- en: We can write scripts to automate many processes in QGIS from rendering, map
    creation, and processing. In fact, all parts of this book could be automated.
    Let's finish this section on Python and scripting with one last spatial processing
    script. This time, we will buffer the `airports` layers.
  prefs: []
  type: TYPE_NORMAL
- en: Buffer script
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open a new project in QGIS. Copy the following code to the editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The code in this script loads the `airports` layer, sets the buffering parameters
    (`param`), calls the `qgis` buffer with the `processing.run` command, and then
    adds a layer called `OUTPUT` to the map.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download data from here: [https://github.com/PacktPublishing/QGIS-Quick-Start-Guide/blob/master/Chapter07/03_Buffer_Airport.py](https://github.com/PacktPublishing/QGIS-Quick-Start-Guide/blob/master/Chapter_07/03_Buffer_Airport.py).
    Be sure to repoint to your data location. Save the file to your project as `03_Buffer_airport.py`.
    Then, click Run (the green triangle). The result should look like the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/11ff0a02-32cc-44f4-b318-dac8a92db02b.png)'
  prefs: []
  type: TYPE_IMG
- en: The script in the Python Console
  prefs: []
  type: TYPE_NORMAL
- en: 'If you wish to learn more about programming with Python in QGIS, this is a
    good resource with plenty of script examples: [https://docs.qgis.org/testing/pdf/en/QGIS-testing-PyQGISDeveloperCookbook-en.pdf](https://docs.qgis.org/testing/pdf/en/QGIS-testing-PyQGISDeveloperCookbook-en.pdf).'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this final chapter, we have looked at extending QGIS. We looked at three
    options: building models using the model builder, accessing plugins, and the Python
    Console. The ability to extend QGIS is perhaps the most convincing reason to use
    the software. You can customize it to your needs, you can download plugins that
    others have written, and you can automate the boring repetitive stuff. Models,
    scripts, and Plugins are all shareable.'
  prefs: []
  type: TYPE_NORMAL
