- en: Automating Cloud Cartography
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mapbox has become synonymous with mobile mapping and data visualizations. In
    addition to their basemap styling toolset, which has been adopted by app developers
    and cartographers, they are also producing interesting mapping tools written in
    Python and JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Combining those two useful languages into one package, Mapbox recently released
    the new MapboxGL—Jupyter Python module. This new module allows for instant data
    visualization creation within a Jupyter Notebook environment. Along with the Mapbox
    Python SDK, a module that allows API access to account services, Python make it
    easy to add Mapbox tools and services to enterprise geospatial applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll learn:'
  prefs: []
  type: TYPE_NORMAL
- en: How to create a Mapbox account to  generate access tokens
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to style a custom basemap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Read/write access to cloud data and basemaps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to create a choropleth map
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to create a graduated circle visualization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All things cartographic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Founded in 2010 by Eric Gunderson, Mapbox has expanded rapidly and grown beyond
    its startup roots to become a leader in the cartographic renaissance. Their MapboxGL
    JavaScript API is a useful library for creating interactive web maps and data
    visualizations. They have contributed multiple open mapping specifications, including
    vector tiles, to the geospatial community.
  prefs: []
  type: TYPE_NORMAL
- en: With a core focus on providing custom basemap tiles to map and app developers,
    Mapbox has positioned themselves as the leading software company for web mapping
    and mobile applications. The two Python modules used in this chapter allow GIS
    managers and developers to integrate their services and tools into an enterprise
    geographic information ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: How to integrate Mapbox into your GIS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With their JavaScript libraries and the new MapboxGL—Jupyter Python module,
    Mapbox tools are easier than ever to use. Geospatial developers and programmers
    can integrate their tools into existing GIS workflows or can create new maps and
    apps that take advantage of the suite of offerings by Mapbox.
  prefs: []
  type: TYPE_NORMAL
- en: Mapbox, like CARTO, allows for account-based cloud data storage. However, their
    focus is less on analytical tools and more on cartographic tools. For mapping
    teams, large and small, using Mapbox tools eases the cost of creating and supporting
    a custom basemap for interactive web maps, and offers greater savings over other
    map tile options such as the Google Maps API.
  prefs: []
  type: TYPE_NORMAL
- en: Mapbox Studio makes it easy to create a map with a cartographic look and feel
    that can match the branding of the company or department. The basemaps can be
    built using existing styles and overlaid with your organization's layers, or a
    completely new basemap can be designed. It even allows for styling to be based
    on an image that is dropped into the studio, assigning colors to features based
    on a histogram generated from the pixels in the image.
  prefs: []
  type: TYPE_NORMAL
- en: Mapbox tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Employing leaders in the geospatial field (such as Mapbox open source lead Sean
    Gillies, a major developer of Shapely, Fiona, and Rasterio), Mapbox has contributed
    to analysis and mapping Python libraries that are available under open source
    license. Their new MapboxGL—Jupyter library represents a new way to take advantage
    of their suite of tools in combination with other Python modules (such as Pandas/GeoPandas)
    and multiple data types, such as GeoJSON, CSVs, and even shapefiles.
  prefs: []
  type: TYPE_NORMAL
- en: Besides the new Python module, Mapbox's open source tools include the MapboxGL
    JavaScript library, built on the **Web Graphics Library** (**WebGL**), and the
    Mapbox Python SDK.
  prefs: []
  type: TYPE_NORMAL
- en: MapboxGL.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MapboxGL is built on top of `Leaflet.js`, a well-known JavaScript mapping library.
    Released in 2011, Leaflet supports a wide variety of well-known web mapping applications,
    including Foursquare, Craigslist, and Pinterest. The developer of Leaflet, Vladimir
    Agafonkin, has been working for Mapbox since 2013.
  prefs: []
  type: TYPE_NORMAL
- en: Building on the original Leaflet development effort, `MapboxGL.js` incorporates
    the WebGL library, which takes advantage of the HTML 5 `canvas` tag to support
    web graphics without a plug-in. `MapboxGL.js` supports vector tiles, as well as
    3D environments that zoom and pan smoothly. It supports GeoJSON overlays as well
    as markers and shapes. Events, including clicks, zooms, and pans, can be used
    to trigger data processing functions, making it perfect for interactive web mapping
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: Mapbox Python SDK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Mapbox Python SDK is used to access most Mapbox services, including directions,
    geocoding, analytics, and datasets. Low-level access to the cloud-based services
    supporting data editing and upload, administrative management, and location-based
    queries, allows for enterprise integration with, and extension of, local GIS.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Python SDK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Use `pip` to install the Python SDK, allowing API access to the Mapbox services.
    This module is not required to use the MapboxGL—Jupyter tools, but it is useful
    for uploads and queries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Download the Mapbox Python SDK here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/mapbox/mapbox-sdk-py](https://github.com/mapbox/mapbox-sdk-py).'
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with Mapbox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To get started using Mapbox tools and Mapbox Studio, you'll need to sign up
    for an account. This will allow you to generate API keys that are required for
    adding Mapbox basemap tiles to web maps, as well as to create the custom basemaps
    that will differentiate your maps. With this account, you can also load data into
    the cloud to use within your maps.
  prefs: []
  type: TYPE_NORMAL
- en: Signing up for a Mapbox account
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To use Mapbox tools and basemaps, you must sign up for an account. This is
    a straightforward process and involves supplying a username, an email, and a password:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7e90dd7d-5cb0-4c8f-82a5-4e283e818c38.png)'
  prefs: []
  type: TYPE_IMG
- en: Once you are signed up, you'll be taken to the Account Dashboard, where API
    access token can be generated and Mapbox Studio can be accessed. The Dashboard
    also has your account statistics on the number of API calls to the variety of
    services available, including directions, geocoding, and datasets.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an API token
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With the new account comes the Account Dashboard, which supplies an API access
    token by default. This public access token or key begins with pk and is a long
    string of characters. This API access token is used to authenticate all of the
    maps and apps that will be built using this account. Copy the string of characters
    and add it to your maps:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7c65efb6-75f3-4db5-bf14-e0688f5c508b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To create a new API access token, push the Create a token button and select
    the access levels that it will allow:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0b3f8431-1c31-4e78-9584-5e72c58de0d7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Within the JavaScript code, the API access token is passed to the MapboxGL
    object to enable access to tiles and tools. Here is a simple web map using HTML/JavaScript
    as an example of how the access token is used to create a map. Replace the access
    token mentioned in the following code with your own public access token:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Save this code as "index.html", and open it using a browser to see the simple
    map. Make sure that you replace the API access token in the earlier example with
    your own key, or the map will not appear.
  prefs: []
  type: TYPE_NORMAL
- en: 'Explore the documentation to understand the various configurations available
    for the API access token:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.mapbox.com/help/how-access-tokens-work/](https://www.mapbox.com/help/how-access-tokens-work/).'
  prefs: []
  type: TYPE_NORMAL
- en: Adding data to a Mapbox account
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mapbox supports the use of your own data. Not only can you style basemap tiles,
    but you can even add your own data to the tiles to make them more relevant to
    your customers or users. This can be managed programmatically using the Mapbox
    Python SDK and the uploads and datasets APIs.
  prefs: []
  type: TYPE_NORMAL
- en: 'To upload data, you must create a secret API access token. These are created
    using the same Create a token process detailed earlier, but include secret scopes.
    Choose the following scopes to allow for dataset and tileset read and write capabilities:'
  prefs: []
  type: TYPE_NORMAL
- en: DATASETS:WRITE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UPLOADS:READ
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UPLOADS:WRITE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TILESETS:READ
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TILESETS:WRITE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Read more about loading data into your Mapbox account here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.mapbox.com/help/how-uploads-work/](https://www.mapbox.com/help/how-uploads-work/).'
  prefs: []
  type: TYPE_NORMAL
- en: Tilesets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tilesets are rasters which are tiled to create **slippy maps**, allowing them
    to overlay on a basemap. They can be generated from vector data to create custom
    basemaps with your own data featured. Using the `Uploader` class from the Mapbox
    Python SDK, GeoJSON files and shapefiles can be programmatically loaded as tilesets
    into your cloud account.
  prefs: []
  type: TYPE_NORMAL
- en: 'Read more about tilesets here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.mapbox.com/api-documentation/#tilesets](https://www.mapbox.com/api-documentation/#tilesets).'
  prefs: []
  type: TYPE_NORMAL
- en: Datasets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Datasets are GeoJSON layers, which can be more frequently edited than tilesets.
    While you can upload datasets using the Account Dashboard, to load a dataset larger
    than 5 MB you must use the datasets API.
  prefs: []
  type: TYPE_NORMAL
- en: 'Read more about datasets here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.mapbox.com/api-documentation/#datasets](https://www.mapbox.com/api-documentation/#datasets).'
  prefs: []
  type: TYPE_NORMAL
- en: Example – uploading a GeoJSON dataset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `mapbox` module has a `Datasets` class that is used to create and populated
    datasets in the account. This demonstration code will read from a zip code GeoJSON
    file and load one zip code GeoJSON object into a new dataset. Pass the secret
    access token to the `Datasets` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This will add one zip code to the layer, which can be viewed from the Account
    Dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9deb66ea-c49d-465f-a445-6cb157c5e3db.png)'
  prefs: []
  type: TYPE_IMG
- en: Example – uploading data as a tileset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Tilesets can be added to custom basemap styles, making it possible to quickly
    load your data layers. This demonstration code uses the secret token with read
    and write capabilities to upload a GeoJSON file as a tileset using the Mapbox
    Python SDK:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: If the response returned is a `201` response, the upload has succeeded.
  prefs: []
  type: TYPE_NORMAL
- en: 'Read more about the Uploads API here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.mapbox.com/api-documentation/?language=Python](https://www.mapbox.com/api-documentation/?language=Python).'
  prefs: []
  type: TYPE_NORMAL
- en: Mapbox Studio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Creating a custom basemap can be a time-consuming process for even experienced
    cartographers. To help ease this process, Mapbox engineers have used **Open Street
    Map** (**OSM**) data to generate pre-built custom basemaps that can be used in
    commercial and non-commercial applications. Using Mapbox Studio, these styles
    can also be adjusted to add more custom touches. Also, basemaps can be built from
    the ground up to create a specific look for your application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c15cb8cd-5290-41d8-9a58-6e51f5ccc3a1.png)'
  prefs: []
  type: TYPE_IMG
- en: To access Mapbox Studio, log into the Account Dashboard and click the Mapbox
    Studio link. In this Studio environment, you can manage basemaps, tilesets, and
    datasets.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing a basemap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Click the New Style button and select the Satellite Streets theme:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/379c4100-c11a-4300-9c9d-533480bfc71a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A quick tutorial explains the customization options. A variety of available
    layers have been added, and both their labeling and styling can be adjusted by
    clicking on the layers in the table of contents. New layers can be added as well,
    including account tilesets:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cadcf094-22bc-47d5-9fd6-015e22207530.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Map zoom levels, bearing, pitch, and initial coordinates can be adjusted. Using
    the Map position menu, these map parameters can be changed and locked as the default
    position using the Lock button at the bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c13f6524-9725-4c66-8731-776797dc370f.png)'
  prefs: []
  type: TYPE_IMG
- en: Explore other styling options, such as label colors and layer scale levels.
    Once you have completed the customizations, publish the style by clicking the
    Publish style button. The style URL is added to MapboxGL visualizations for these
    Jupyter Notebook exercises or in web maps.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a tileset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To add your data to the basemap style, push the Layer button and select a tileset
    from the available selection. The zip codes tileset loaded earlier using the Mapbox
    Python SDK should be available, and can be added to the basemap and styled:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cfc3fdb9-9c6c-46aa-9bd9-5de97af7eea2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Virtual environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Start a virtual environment using `virtualenv` (see the previous chapter for
    installation) and use `pip` to install the modules listed as follows. If you had
    a folder path of `C:\Python3Geospatial`, `virtualenv` will create a virtual environment
    folder, here called `mapboxenv`, which can be activated as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Installing MapboxGL – Jupyter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The MapboxGL—Jupyter library is available using `pip` from the [PyPI.org](http://pypi.org)
    repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: All of the supporting modules will be located and installed along with the core
    libraries created by Mapbox.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Jupyter Notebooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Install the Jupyter Notebooks library in the virtual environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Installing Pandas and GeoPandas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Pandas should already be installed, as it is installed with GeoPandas, but
    if it has not yet been installed, use `pip` to find it in the [PyPI.org](http://pypi.org)
    repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'If you have any issues installing these modules on a Windows computer, explore
    the pre-built wheel binaries here (use `pip` to install them after download):'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.lfd.uci.edu/~gohlke/pythonlibs/](https://www.lfd.uci.edu/~gohlke/pythonlibs/).'
  prefs: []
  type: TYPE_NORMAL
- en: Using the Jupyter Notebook server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Starting a Jupyter Notebook server is easy. When using a virtual environment,
    you'll need to activate the environment first, and then start the server. If not,
    make sure that Python and the location of the Notebook server are in the path
    environment variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the command prompt and enter `jupyter notebook` to start the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The server will start and indicate the specifics of its port number and a token
    that can be used to relog into the web browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/42a1dabb-19f7-4b47-ba68-cacfeb5191ac.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Starting the server will open a browser window in the system browser. The server
    address is `localhost`, and the default port is `8888`. The browser will open
    at `http://localhost:8888/tree`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4b060dfb-333b-4206-af65-68be15997378.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click the New button to create a new Notebook. Select the Python version from
    the Notebook section, and the new Notebook will open in a second tab. This Notebook
    should be renamed, as it quickly becomes difficult to organize Notebooks that
    are untitled:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ac90a315-68f3-4341-9e0e-e0532f262576.png)'
  prefs: []
  type: TYPE_IMG
- en: Once the window has opened, the coding environment is live. In this example,
    we will import census tract data using GeoPandas, convert it to point data, select
    specific columns, and visualize it using MapboxGL—Jupyter.
  prefs: []
  type: TYPE_NORMAL
- en: Importing data using GeoPandas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Import the required modules and assign the API key to a variable. These commands
    should be added into Jupyter Notebook cells:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The API key can also be assigned to a Windows path environment variable (for
    example, `"MAPBOX_ACCESS_TOKEN"`) and called using the `os` module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Creating point data from polygons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Bay Area census tracts GeoJSON file has population data with polygon `geometry`.
    To create the first visualization we need to convert the geometry type to point:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the previous code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b962da69-204f-43c7-8b1b-7fa6822742c8.png)'
  prefs: []
  type: TYPE_IMG
- en: Data cleanup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This data visualization will compare the male and female population in the
    Bay Area. To generate the circle visualization, we can rename and eliminate unnecessary
    columns using Geopandas'' dataframe manipulation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This code created three new columns from three existing columns, by passing
    the name of the new columns and assigning the data values to be equal to the existing
    column. Then, the entire GeoDataFrame is rewritten (in memory) to only contain
    the three new columns and the centroids column, eliminating unwanted columns.
    Exploring the first five rows of the new GeoDataFrame allows us to see the new
    data structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/acb4b206-d9c9-4841-817d-ca598cf087f5.png)'
  prefs: []
  type: TYPE_IMG
- en: Saving the points as GeoJSON
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Saving the newly cleaned GeoDataFrame is required for loading into the Mapbox
    `CircleViz` class. The GeoJSON driver must be specified, as the default output
    file format is shapefile:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Adding the points to a map
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To simply see the points on the map, we can supply a few parameters and call
    the `show` property of the `CircleViz` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous code will produce the output as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c1ed2c88-cd1c-46d8-a99e-7ccf7bfdc893.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To classify the data, we can set color stops for specific fields, passing class
    breaks as a list with associated color information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ed8a327a-6925-47b3-b346-59c846a3442f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Add some new fields to the `tract_points` GeoDataFrame and resave it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Creating a graduated color visualization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This code will manually assign colors to specific sections of the data, breaking
    the data into categories. This also assigns specific radius sizes to data so that
    the visualization will convey information with both color and circle size:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'With these radius sizes and color ranges set, they can be applied to two fields
    within the new GeoJSON: `Total Population` and `Percent Male`. For this visualization,
    the size of the circle will indicate the male percentage of the population, and
    the color will indicate the total population:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'This will produce an interactive map like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/546f3b6a-2201-409c-8b2b-85b79b3442e2.png)'
  prefs: []
  type: TYPE_IMG
- en: Automatically setting colors, sizes, and breaks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Instead of manually setting the colors, radius sizes, and breaks, MapboxGL—Jupyter
    includes utilites (such as `create_color_stops`) that create a match between colors
    (or sizes) and break values. The color schema is set by passing the `YlOrRd` keyword
    ( which means **Yellow Orange Red**). Also, we can adjust the basemap using another
    pre-set style or our own custom styles by setting the visualization style to the
    style URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The dark basemap allows for the graduated circle visualizations to be more
    clearly seen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/18546256-83fb-42d9-8220-298df0f4268f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Explore the visualization options available in the documentation here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/mapbox/mapboxgl-jupyter/blob/master/docs-markdown/viz.md.](https://github.com/mapbox/mapboxgl-jupyter/blob/master/docs-markdown/viz.md)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Explore the data utilities available here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/mapbox/mapboxgl-jupyter/blob/master/docs-markdown/utils.md](https://github.com/mapbox/mapboxgl-jupyter/blob/master/docs-markdown/utils.md).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Explore the color ramps available here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/mapbox/mapboxgl-jupyter/blob/master/mapboxgl/colors.py](https://github.com/mapbox/mapboxgl-jupyter/blob/master/mapboxgl/colors.py).'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a choropleth map
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With a choropleth map, we can display a polygon GeoJSON file. Using the `tracts`
    GeoDataFrame, we''ll create another GeoDataFrame with polygon `geometry` and one
    tabular field, and save it to a file as `GeoJSON`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The visualization is created using the `ChoroplethViz` class. The basemap style
    is the URL of the satellite imagery style created earlier in the *MapBox Studio*,
    section of the chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The output generated is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b769edfc-3131-4be3-a7d9-1b79b9541fda.png)'
  prefs: []
  type: TYPE_IMG
- en: Saving the map
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To save the choropleth map, use the `create_html` method of the visualization:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'To view the saved HTML file locally, open command prompt and start a local
    HTTP server using Python in the same folder as the saved HTML file. Then, open
    a browser at `http://localhost:8000/mpop.html` to see the map:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Creating a heat map
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Use the `HeatmapViz` class to generate a heat map from the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Uploading data using the Mapbox Python SDK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Storing datasets in the account and joining them to other tabular data is possible
    using MapboxGL—Jupyter and the Mapbox Python SDK. Loading a GeoJSON file requires
    specific permissions assigned only to secret API access tokens. To ensure that
    the API token used has the correct scope, you may have to generate a new API token.
    Go to your Account Dashboard and generate a new token, and ensure that you check
    the read and write capabilities for uploads and datasets as shown in the *Getting
    started with Mapbox* section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the dataset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first step is to create a dataset, if you haven''t created it already.
    This code generates an empty dataset in the account, which will have a name and
    description as provided to the `datasets.create` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Loading the data into the dataset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To load the data into the new dataset, we will iterate through the features
    contained in the zip codes GeoJSON, writing them all to the dataset (instead of
    just one as demonstrated earlier). As this file is larger than 5MB, it must be
    loaded using the API, which is accessed using the `mapbox` module. The ID of the
    dataset (retrieved using the `datasets.list` method), the row ID, and the `feature`,
    are all required parameters for the `update_feature` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The completed dataset now looks like this in Mapbox Studio:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4b9c0414-eea1-400e-a41d-a19037ae1776.png)'
  prefs: []
  type: TYPE_IMG
- en: Reading data from a dataset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To read the JSON data stored in the dataset, use the `read_dataset` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Deleting a row
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To delete a specific row from the dataset, pass the dataset ID and the row
    ID to the `datasets.delete_feature` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to use the MapboxGL—Jupyter and Mapbox Python
    SDK to create data visualizations and to upload data into the Mapbox account.
    We created point data visualizations, choropleth maps, heat maps, and graduated
    circle visualizations. We learned how to style a custom basemap, how to add it
    to an HTML map, and how to add custom tilesets to the basemap. We learned how
    to use GeoPandas to convert Polygon data into point data, and how to visualize
    the result.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explore the use of Python modules and Hadoop to
    perform geospatial analysis.
  prefs: []
  type: TYPE_NORMAL
