["```py\n> mkdir C:\\postgis_cookbook\\data\\chap05\n> cp -r /path/to/book_dataset/chap05 C:\\postgis_cookbook\\data\\chap05\n```", "```py\n> mkdir -p data/chap05\n> cd data/chap05\n> cp -r /path/to/book_dataset/chap05\n```", "```py\n> psql -d postgis_cookbook -c \"CREATE SCHEMA chp05\" \n```", "```py\n> cd C:\\postgis_cookbook\\data\\chap05\\PRISM \n```", "```py\n> gdalinfo PRISM_tmin_provisional_4kmM2_201703_asc.asc\n```", "```py\nSELECT srid, auth_name, auth_srid, srtext, proj4text \nFROM spatial_ref_sys WHERE proj4text LIKE '%NAD83%' \n```", "```py\n> raster2pgsql -s 4269 -t 100x100 -F -I -C -Y .\\PRISM_tmin_provisional_4kmM2_*_asc.asc \nchp05.prism | psql -d postgis_cookbook -U me\n```", "```py\nALTER TABLE chp05.prism ADD COLUMN month_year DATE; \nUPDATE chp05.prism SET  month_year = ( SUBSTRING(split_part(filename, '_', 5), 0, 5) || '-' ||  SUBSTRING(split_part(filename, '_', 5), 5, 4) || '-01' ) :: DATE; \n```", "```py\n> cd C:\\postgis_cookbook\\data\\chap05\\SRTM\n```", "```py\n> raster2pgsql -s 4326 -t 100x100 -F -I -C -Y N37W123.hgt chp05.srtm | psql -d postgis_cookbook\n```", "```py\n> cd C:\\postgis_cookbook\\data\\chap05\\SFPoly\n> shp2pgsql -s 4326 -I sfpoly.shp chp05.sfpoly | psql -d postgis_cookbook -U me\n```", "```py\nSELECT \n  r_table_name, \n  r_raster_column, \n  srid, \n  scale_x, \n  scale_y, \n  blocksize_x, \n  blocksize_y, \n  same_alignment, \n  regular_blocking, \n  num_bands, \n  pixel_types, \n  nodata_values, \n  out_db, \n  ST_AsText(extent) AS extent FROM raster_columns WHERE r_table_name = 'prism'; \n```", "```py\n(1 row)\n```", "```py\nSELECT  rid,  (ST_Metadata(rast)).* \nFROM chp05.prism \nWHERE month_year = '2017-03-01'::date \nLIMIT 1; \n```", "```py\nSELECT  rid,  (ST_BandMetadata(rast, 1)).* \nFROM chp05.prism \nWHERE rid = 54; \n```", "```py\nWITH stats AS (SELECT (ST_SummaryStats(rast, 1)).*  FROM prism  WHERE rid = 54) \nSELECT  count,  sum,  round(mean::numeric, 2) AS mean,  round(stddev::numeric, 2) AS stddev,  min,  max \nFROM stats; \n```", "```py\nWITH hist AS ( \n  SELECT (ST_Histogram(rast, 1)).* FROM chp05.prism WHERE rid = 54 \n) \nSELECT round(min::numeric, 2) AS min, round(max::numeric, 2) AS max, count, round(percent::numeric, 2) AS percent FROM hist \nORDER BY min; \n```", "```py\nSELECT (ST_Quantile(rast, 1)).* \nFROM chp05.prism \nWHERE rid = 54; \n```", "```py\nSELECT (ST_ValueCount(rast, 1)).* \nFROM chp05.prism WHERE rid = 54 \nORDER BY count DESC, value \nLIMIT 10; \n```", "```py\nSELECT (ST_ValueCount(rast, 1, true, ARRAY[2,3,2.5,5.612999,4.176]::double precision[] ,0.0001)).* \nFROM chp05.prism \nWHERE rid = 54 \nORDER BY count DESC, value \nLIMIT 10; \n```", "```py\nWITH stats AS ( \n  SELECT \n    'before' AS state, \n    (ST_SummaryStats(rast, 1)).*\n FROM chp05.prism \n  WHERE rid = 54 \n  UNION ALL \n  SELECT \n    'after' AS state, (ST_SummaryStats(ST_MapAlgebra(rast, 1, '32BF', '([rast]*9/5)+32', -9999), 1 )).* \n  FROM chp05.prism \n  WHERE rid = 54 \n) \nSELECT \n  state, \n  count, \n  round(sum::numeric, 2) AS sum, \n  round(mean::numeric, 2) AS mean, \n  round(stddev::numeric, 2) AS stddev, \n  round(min::numeric, 2) AS min, \n  round(max::numeric, 2) AS max \nFROM stats ORDER BY state DESC; \n```", "```py\nUPDATE chp05.prism SET  rast = ST_AddBand(rast, ST_MapAlgebra(rast, 1, '32BF', '([rast]*9/5)+32', -999), 1    ); \nERROR:  new row for relation \"prism\" violates check constraint \" enforce_nodata_values_rast\" \n```", "```py\nSELECT DropRasterConstraints('chp05', 'prism', 'rast'::name); \n```", "```py\nUPDATE chp05.prism SET rast = ST_AddBand(rast, ST_MapAlgebra(rast, 1, '32BF', ' ([rast]*9/5)+32', -9999), 1); \nSELECT AddRasterConstraints('chp05', 'prism', 'rast'::name); \n```", "```py\nSELECT (ST_Metadata(rast)).numbands \nFROM chp05.prism \nWHERE rid = 54; \n```", "```py\nSELECT 1 AS bandnum, (ST_BandMetadata(rast, 1)).* \nFROM chp05.prism \nWHERE rid = 54 \nUNION ALL \nSELECT 2 AS bandnum, (ST_BandMetadata(rast, 2)).* \nFROM chp05.prism \nWHERE rid = 54 \nORDER BY bandnum; \n```", "```py\nWITH stats AS ( \n  SELECT \n    1 AS bandnum, \n    (ST_SummaryStats(rast, 1)).* \n  FROM chp05.prism \n  WHERE rid = 54 \n  UNION ALL \n  SELECT \n    2 AS bandnum, \n    (ST_SummaryStats(rast, 2)).* \n  FROM chp05.prism \n  WHERE rid = 54 \n) \nSELECT \n  bandnum, \n  count, \n  round(sum::numeric, 2) AS sum, \n  round(mean::numeric, 2) AS mean, \n  round(stddev::numeric, 2) AS stddev, \n  round(min::numeric, 2) AS min, \n  round(max::numeric, 2) AS max \nFROM stats ORDER BY bandnum; \n```", "```py\nSELECT (ST_SummaryStats(ST_Union(ST_Clip(prism.rast, 1, ST_Transform(sf.geom, 4269), TRUE)), 1)).mean \nFROM chp05.prism \nJOIN chp05.sfpoly sf ON ST_Intersects(prism.rast, ST_Transform(sf.geom, 4269)) \nWHERE prism.month_year = '2017-03-01'::date; \n```", "```py\nSELECT prism.month_year, (ST_SummaryStats(ST_Union(ST_Clip(prism.rast, 1, ST_Transform(sf.geom, 4269), TRUE)), 1)).mean \nFROM chp05.prism \nJOIN chp05.sfpoly sf ON ST_Intersects(prism.rast, ST_Transform(sf.geom, 4269)) \nGROUP BY prism.month_year \nORDER BY prism.month_year; \n```", "```py\nWITH geoms AS (SELECT ST_DumpAsPolygons(ST_Union(ST_Clip(prism.rast, 1, ST_Transform(sf.geom, 4269), TRUE)), 1 ) AS gv \nFROM chp05.prism \nJOIN chp05.sfpoly sf ON ST_Intersects(prism.rast, ST_Transform(sf.geom, 4269)) \nWHERE prism.month_year = '2017-03-01'::date ) \nSELECT (gv).val, ST_AsText((gv).geom) AS geom \nFROM geoms; \n```", "```py\nWITH geoms AS (SELECT (ST_PixelAsPolygons(ST_Union(ST_Clip(prism.rast, 1, ST_Transform(sf.geom, 4269), TRUE)), 1 )) AS gv \nFROM chp05.prism \nJOIN chp05.sfpoly sf ON ST_Intersects(prism.rast, ST_Transform(sf.geom, 4269)) \nWHERE prism.month_year = '2017-03-01'::date) \nSELECT (gv).val, ST_AsText((gv).geom) AS geom \nFROM geoms; \n```", "```py\nSELECT ST_AsRaster( \n  sf.geom, \n  100., -100., \n  ARRAY['8BUI', '8BUI', '8BUI', '8BUI']::text[], \n  ARRAY[29, 194, 178, 255]::double precision[], \n  ARRAY[0, 0, 0, 0]::double precision[] \n) \nFROM sfpoly sf; \n```", "```py\nSELECT ST_AsRaster( \n  sf.geom, prism.rast, \n  ARRAY['8BUI', '8BUI', '8BUI', '8BUI']::text[], \n  ARRAY[29, 194, 178, 255]::double precision[], \n  ARRAY[0, 0, 0, 0]::double precision[] \n) \nFROM chp05.sfpoly sf \nCROSS JOIN chp05.prism \nWHERE prism.rid = 1; \n```", "```py\n > cd C:\\postgis_cookbook\\data\\chap05\\MODIS\n```", "```py\n> psql -d postgis_cookbook -f srs.sql\n```", "```py\n> gdalinfo MYD09A1.A2012161.h08v05.005.2012170065756.hdf\n```", "```py\nSubdatasets: \n```", "```py\n> gdalbuildvrt -separate  modis.vrt \n HDF4_EOS:EOS_GRID:\"MYD09A1.A2012161.h08v05.005.2012170065756.hdf\":MOD_Grid_500m_Surface_Reflectance:sur_refl_b01 \n HDF4_EOS:EOS_GRID:\"MYD09A1.A2012161.h08v05.005.2012170065756.hdf\":MOD_Grid_500m_Surface_Reflectance:sur_refl_b04 \n HDF4_EOS:EOS_GRID:\"MYD09A1.A2012161.h08v05.005.2012170065756.hdf\":MOD_Grid_500m_Surface_Reflectance:sur_refl_b03 \n HDF4_EOS:EOS_GRID:\"MYD09A1.A2012161.h08v05.005.2012170065756.hdf\":MOD_Grid_500m_Surface_Reflectance:sur_refl_b02\n```", "```py\nHDF4_EOS:EOS_GRID:\"MYD09A1.A2012161.h08v05.005.2012170065756.hdf\":MOD_Grid_500m_Surface_Reflectance:sur_refl_b01 \nHDF4_EOS:EOS_GRID:\"MYD09A1.A2012161.h08v05.005.2012170065756.hdf\":MOD_Grid_500m_Surface_Reflectance:sur_refl_b04 \nHDF4_EOS:EOS_GRID:\"MYD09A1.A2012161.h08v05.005.2012170065756.hdf\":MOD_Grid_500m_Surface_Reflectance:sur_refl_b03 \nHDF4_EOS:EOS_GRID:\"MYD09A1.A2012161.h08v05.005.2012170065756.hdf\":MOD_Grid_500m_Surface_Reflectance:sur_refl_b02 \n```", "```py\n> gdalbuildvrt -separate -input_file_list modis.txt modis.vrt \n```", "```py\n> gdal_translate -of GTiff modis.vrt modis.tif\n```", "```py\n> raster2pgsql -s 96974 -F -I -C -Y modis.tif chp05.modis | psql -d postgis_cookbook\n```", "```py\nSELECT  ST_Transform(ST_Clip(m.rast, ST_Transform(sf.geom, 96974)), 2163) \nFROM chp05.modis m \nCROSS JOIN chp05.sfpoly sf; \n```", "```py\nSELECT  ST_Transform(ST_Clip(m.rast, ST_Transform(sf.geom, 96974)), \n prism.rast, 'cubic', 0.05) \nFROM chp05.modis m \nCROSS JOIN chp05.prism \nCROSS JOIN chp05.sfpoly sf \nWHERE prism.rid = 1; \n```", "```py\nWITH meta AS (SELECT (ST_Metadata(rast)).* FROM chp05.modis) \nSELECT ST_Rescale(modis.rast, meta.scalex * 4., meta.scaley * 4., 'cubic') AS rast \nFROM chp05.modis \nCROSS JOIN meta; \n```", "```py\nCREATE OR REPLACE FUNCTION chp05.modis_evi(value double precision[][][], \"position\" int[][], VARIADIC userargs text[]) \nRETURNS double precision \nAS $$ \nDECLARE \n  L double precision; \n  C1 double precision; \n  C2 double precision; \n  G double precision; \n  _value double precision[3]; \n  _n double precision; \n  _d double precision; \nBEGIN \n  -- userargs provides coefficients \n  L := userargs[1]::double precision; \n  C1 := userargs[2]::double precision; \n  C2 := userargs[3]::double precision; \n  G := userargs[4]::double precision; \n  -- rescale values, optional \n  _value[1] := value[1][1][1] * 0.0001; \n  _value[2] := value[2][1][1] * 0.0001; \n  _value[3] := value[3][1][1] * 0.0001; \n  -- value can't be NULL \n  IF \n    _value[1] IS NULL OR \n    _value[2] IS NULL OR \n    _value[3] IS NULL \n    THEN \n      RETURN NULL; \n  END IF; \n  -- compute numerator and denominator \n  _n := (_value[3] - _value[1]); \n  _d := (_value[3] + (C1 * _value[1]) - (C2 * _value[2]) + L); \n  -- prevent division by zero \n  IF _d::numeric(16, 10) = 0.::numeric(16, 10) THEN \n    RETURN NULL; \n  END IF; \n  RETURN G * (_n / _d); \nEND; \n$$ LANGUAGE plpgsql IMMUTABLE; \n```", "```py\n        value = ARRAY[ 1 => \n          [ -- raster 1 \n            [pixval, pixval, pixval], -- row of raster 1 \n            [pixval, pixval, pixval], \n            [pixval, pixval, pixval] \n          ], \n          2 => [ -- raster 2 \n            [pixval, pixval, pixval], -- row of raster 2 \n            [pixval, pixval, pixval], \n            [pixval, pixval, pixval] \n          ], \n          ... \n          N => [ -- raster N \n            [pixval, pixval, pixval], -- row of raster \n            [pixval, pixval, pixval], \n            [pixval, pixval, pixval] \n          ] \n        ]; \n        pos := ARRAY[ \n          0 => [x-coordinate, y-coordinate], -- center pixel o f output raster \n          1 => [x-coordinate, y-coordinate], -- center pixel o f raster 1 \n          2 => [x-coordinate, y-coordinate], -- center pixel o f raster 2 \n          ... \n          N => [x-coordinate, y-coordinate], -- center pixel o f raster N \n        ]; \n        userargs := ARRAY[ \n          'arg1', \n          'arg2', \n          ... \n          'argN' \n        ]; \n```", "```py\nSELECT ST_MapAlgebra(rast, ARRAY[1, 3, 4]::int[], -- only use the red, blue a \nnd near infrared bands 'chp05.modis_evi(\n double precision[], int[], text[])'::regprocedure, \n -- signature for callback function '32BF', \n -- output pixel type 'FIRST', \n  NULL, 0, 0, '1.', -- L '6.', -- C1 '7.5', -- C2 '2.5' -- G \n) AS rast \nFROM modis m; \n```", "```py\nCREATE OR REPLACE FUNCTION chp05.modis_evi2(value1 double precision, value2 double precision, pos int[], VARIADIC userargs text[]) \nRETURNS double precision \nAS $$ \nDECLARE \n  L double precision; \n  C double precision; \n  G double precision; \n  _value1 double precision; \n  _value2 double precision; \n  _n double precision; \n  _d double precision; \nBEGIN \n  -- userargs provides coefficients \n  L := userargs[1]::double precision; \n  C := userargs[2]::double precision; \n  G := userargs[3]::double precision; \n  -- value can't be NULL \n  IF \n    value1 IS NULL OR \n    value2 IS NULL \n    THEN \n      RETURN NULL; \n  END IF; \n  _value1 := value1 * 0.0001; \n  _value2 := value2 * 0.0001; \n  -- compute numerator and denominator \n  _n := (_value2 - _value1); \n  _d := (L + _value2 + (C * _value1)); \n  -- prevent division by zero \n  IF _d::numeric(16, 10) = 0.::numeric(16, 10) THEN \n    RETURN NULL; \n  END IF; \n  RETURN G * (_n / _d); \nEND; \n$$ LANGUAGE plpgsql IMMUTABLE; \n```", "```py\nSELECT ST_MapAlgebraFct( \n   rast, 1, -- red band \n   rast, 4, -- NIR band \n   'modis_evi2(double precision, double precision, int[], text[])'::regprocedure,\n -- signature for callback function '32BF', -- output pixel type 'FIRST', \n   '1.', -- L '2.4', -- C '2.5' -- G) AS rast \nFROM chp05.modis m; \n```", "```py\nWITH r AS ( -- union of filtered tiles \n  SELECT ST_Transform(ST_Union(srtm.rast), 3310) AS rast \n  FROM chp05.srtm \n  JOIN chp05.sfpoly sf ON ST_DWithin(ST_Transform(srtm.rast::geometry,  \n     3310), ST_Transform(sf.geom, 3310), 1000)),  \n  cx AS ( -- custom extent \n    SELECT ST_AsRaster(ST_Transform(sf.geom, 3310), r.rast) AS rast \n    FROM chp05.sfpoly sf CROSS JOIN r \n  ) \n  SELECT ST_Clip(ST_Slope(r.rast, 1, cx.rast), ST_Transform(sf.geom, 3310)) AS rast FROM r \nCROSS JOIN cx \nCROSS JOIN chp05.sfpoly sf; \n```", "```py\nWITH r AS ( -- union of filtered tiles \n  SELECT ST_Transform(ST_Union(srtm.rast), 3310) AS rast \n  FROM chp05.srtm \n  JOIN chp05.sfpoly sf ON ST_DWithin(ST_Transform(srtm.rast::geometry,  \n    3310), ST_Transform(sf.geom, 3310), 1000)), \n cx AS ( -- custom extent \n    SELECT ST_AsRaster(ST_Transform(sf.geom, 3310), r.rast) AS rast FROM chp05.sfpoly sf CROSS JOIN r) \nSELECT ST_Clip(ST_HillShade(r.rast, 1, cx.rast),ST_Transform(sf.geom, 3310)) AS rast FROM r \nCROSS JOIN cx \nCROSS JOIN chp05.sfpoly sf; \n```", "```py\nWITH r AS ( -- union of filtered tiles \n  SELECT ST_Transform(ST_Union(srtm.rast), 3310) AS rast FROM srtm \n  JOIN sfpoly sf ON ST_DWithin(ST_Transform(srtm.rast::geometry, 3310),\n ST_Transform(sf.geom, 3310), 1000) \n) \nSELECT ST_Clip(ST_Slope(r.rast, 1), ST_Transform(sf.geom, 3310)) AS rast \nFROM r CROSS JOIN sfpoly sf; \n```", "```py\nSET postgis.gdal_enabled_drivers = 'ENABLE_ALL'; \nSELECT short_name\nFROM ST_GDALDrivers();\n```", "```py\nWITH months AS ( -- extract monthly rasters clipped to San Francisco \n   SELECT prism.month_year, ST_Union(ST_Clip(prism.rast, 2, ST_Transform(sf.geom, 4269), TRUE)) AS rast \n  FROM chp05.prism \n  JOIN chp05.sfpoly sf ON ST_Intersects(prism.rast, ST_Transform(sf.geom, 4269)) \n  WHERE prism.month_year BETWEEN '2017-06-01'::date AND '2017-08-01'::date \n  GROUP BY prism.month_year \n  ORDER BY prism.month_year \n), summer AS ( -- new raster with each monthly raster as a band \n  SELECT ST_AddBand(NULL::raster, array_agg(rast)) AS rast FROM months) \nSELECT -- export as GeoTIFF ST_AsTIFF(rast) AS content FROM summer; \n```", "```py\nDriver: GTiff/GeoTIFF\nFiles: surface.tif\nSize is 20, 7\nCoordinate System is:\nGEOGCS[\"WGS 72\",\n  DATUM[\"WGS_1972\",\n  SPHEROID[\"WGS 72\",6378135,298.2600000000045, AUTHORITY[\"EPSG\",\"7043\"]],\n           TOWGS84[0,0,4.5,0,0,0.554,0.2263], AUTHORITY[\"EPSG\",\"6322\"]],\n           PRIMEM[\"Greenwich\",0], UNIT[\"degree\",0.0174532925199433],\n           AUTHORITY[\"EPSG\",\"4322\"]]\n  Origin = (-123.145833333333314,37.937500000000114)\n  Pixel Size = (0.041666666666667,-0.041666666666667)\n  Metadata:\n    AREA_OR_POINT=Area\n  Image Structure Metadata:\n    INTERLEAVE=PIXEL\nCorner Coordinates:\n  Upper Left  (-123.1458333,  37.9375000) (123d 8'45.00\"W, 37d56'15.00\"N)\n  Lower Left  (-123.1458333,  37.6458333) (123d 8'45.00\"W, 37d38'45.00\"N)\n  Upper Right (-122.3125000,  37.9375000) (122d18'45.00\"W, 37d56'15.00\"N)\n  Lower Right (-122.3125000,  37.6458333) (122d18'45.00\"W, 37d38'45.00\"N)\n  Center      (-122.7291667,  37.7916667) (122d43'45.00\"W, 37d47'30.00\"N)\nBand 1 Block=20x7 Type=Float32, ColorInterp=Gray\n  NoData Value=-9999\nBand 2 Block=20x7 Type=Float32, ColorInterp=Undefined\n  NoData Value=-9999\nBand 3 Block=20x7 Type=Float32, ColorInterp=Undefined\n  NoData Value=-9999\n```", "```py\nWITH r AS (SELECT ST_Transform(ST_Union(srtm.rast), 3310) AS rast \n  FROM chp05.srtm \n  JOIN chp05.sfpoly sf ON ST_DWithin(ST_Transform(srtm.rast::geometry, 3310),\n ST_Transform(sf.geom, 3310), 1000) \n), cx AS ( \n  SELECT ST_AsRaster(ST_Transform(sf.geom, 3310), r.rast) AS rast \n  FROM sfpoly sf CROSS JOIN r \n) \nSELECT ST_AsPNG(ST_ColorMap(ST_Clip(ST_Slope(r.rast, 1, cx.rast), ST_Transform(sf.geom, 3310) ), 'bluered')) AS rast \nFROM r \nCROSS JOIN cx \nCROSS JOIN chp05.sfpoly sf; \n```"]