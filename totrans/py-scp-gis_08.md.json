["```py\nimport requests \nimport json \nfrom qgis.core import * \nfrom qgis.PyQt.QtGui import * \nfrom qgis.PyQt.QtWidgets \nimport * \nfrom qgis.PyQt.QtCore import * \n\nstreets = QgsVectorLayer(r'C:\\Users\\Paul\\Desktop\\PythonBook\\CHP8\\Streets.shp', \"Streets\",\"ogr\") \nscf = QgsVectorLayer(r'C:\\Users\\Paul\\Desktop\\PythonBook\\CHP8\\SCF.shp', \"SeeClickFix\",\"ogr\")\n\n```", "```py\nQgsMapLayerRegistry.instance().addMapLayers([scf,streets]) \n```", "```py\nstreets = iface.addVectorLayer(r'C:\\Users\\Paul\\Desktop\\PythonBook\\CHP8\\Streets.shp', \"Streets\",\"ogr\") \nscf = iface.addVectorLayer(r'C:\\Users\\Paul\\Desktop\\PythonBook\\CHP8\\SCF.shp', \"SeeClickFix\",\"ogr\")\n```", "```py\nQgsMapLayerRegistry.instance().mapLayers() \n```", "```py\n{u'SeeClickFix20171129100436571': <qgis._core.QgsVectorLayer object at 0x000000002257F8C8>, u'Streets20171129100433367': <qgis._core.QgsVectorLayer object at 0x000000002257F268>}\n```", "```py\nQgsMapLayerRegistry.instance().removeMapLayer('Streets20171129100433367')\n```", "```py\nQgsMapLayerRegistry.instance().removeMapLayer(streets.id()) \n```", "```py\ncrs = scf.crs()\n```", "```py\ncrs.description()\n```", "```py\n'WGS 84'\n```", "```py\ncrs.toWkt()\n```", "```py\n'GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]]'\n```", "```py\nextent = scf.extent()\n```", "```py\nextent.toString()\nu'-106.6649165999999980,35.0744279999999975 : -106.6457526013259951,35.0916344666666973'\n\nextent.asWktPolygon()\n'POLYGON((-106.66491659999999797 35.0744279999999975, -106.6457526013259951 35.0744279999999975, -106.6457526013259951 35.09163446666669728, -106.66491659999999797 35.09163446666669728, -106.66491659999999797 35.0744279999999975))'\n\nextent.xMinimum()\n-106.6649166\n\nextent.xMaximum()\n-106.645752601326\n\nextent.yMinimum()\n35.074428 \n\nextent.yMaximum()\n35.0916344666667\n```", "```py\nscf.pendingFeatureCount()\n```", "```py\nitem=scf.getFeatures().next()\n```", "```py\ng = item.geometry()\n```", "```py\ng.type() \n0\n```", "```py\nitem.geometry().asPoint()\n(-106.652,35.0912)\n\nitem.geometry().asPoint()[0]\n-106.65153503418\n\nitem.geometry().asPoint()[1]\n35.0912475585134\n```", "```py\nstreet = streets.getFeatures().next().geometry().type()\n1\n\nstreet.geometry().asPolyline() \n[(-106.729,35.1659), (-106.729,35.1659), (-106.729,35.1658), (-106.729,35.1658), (-106.73,35.1658), (-106.73,35.1658), (-106.73,35.1658), (-106.73,35.1658)]\n```", "```py\nitem.fields().count()\n4\n```", "```py\nitem.fields()[2].name()\nu'Type'\nitem.fields()[2].typeName()\nu'String'\n```", "```py\nitem[\"Type\"]\nu'Other'\n\nitem[0]\n1572.0\n\nitem[1]\n3368133L\n\nitem[2]\nu'Other'\n\nitem[3]\nu'Acknowledged'\n```", "```py\nfor f in scf.getFeatures():\n    if f[\"Status\"]=='Closed':\n        print(f[\"ID\"])\n```", "```py\n 3888698\n 3906283\n 3906252\n 3882952\n 3904754\n 3904463\n 3904344\n 3904289\n 3903243\n 3903236\n 3902993\n```", "```py\ntheLayer=QgsVectorLayer('Point?crs=epsg:4326','SomePoints','memory') \n```", "```py\nfrom qgis.PyQt.QtCore import *\ntheFeatures=theLayer.dataProvider()\ntheFeatures.addAttributes([QgsField(\"ID\", QVariant.Int),QgsField(\"Name\", Qvariant.String)])\n```", "```py\n p=QgsFeature()\n point=QgsPoint(-106.3463,34.9685)\n p.setGeometry(QgsGeometry.fromPoint(point))\n p.setAttributes([123,\"Paul\"])\n theFeatures.addFeatures([p])\n theLayer.updateExtents()\n theLayer.updateFields()\n```", "```py\nQgsMapLayerRegistry.instance().addMapLayers([theLayer])\n```", "```py\n import psycopg2\n connection =  \n psycopg2.connect(database=\"pythonspatial\",user=\"postgres\", \n password=\"postgres\")\n cursor = connection.cursor()\n cursor.execute(\"SELECT name, ST_AsTexT(geom) from areacommand\")\n c=cursor.fetchall()\n```", "```py\nAPD=QgsVectorLayer('Polygon?crs=epsg:4326','AreaCommands','memory') \nAPDfeatures=APD.dataProvider() \nAPDfeatures.addAttributes([QgsField(\"ID\",QVariant.Int),QgsField(\"Name\", QVariant.String)]) \nx=0\n```", "```py\nfor acmd in c:\n    g=QgsGeometry()\n    g=QgsGeometry.fromWkt(acmd[1])\n    p=QgsFeature()\n    print(acmd[0])\n    p.setGeometry(g)\n    x+=1\n    p.setAttributes([x,str(acmd[0])])\n    APDfeatures.addFeatures([p])\n    APD.updateExtents()\n    APD.updateFields()\n```", "```py\nQgsMapLayerRegistry.instance().addMapLayers([APD])\n```", "```py\nscf = iface.addVectorLayer(r'C:\\Users\\Paul\\Desktop\\PythonBook\\CHP8\\SCF.shp', \"SeeClickFix\",\"ogr\") \n```", "```py\nscf.dataProvider().capabilitiesString()\n\nu'Add Features, Delete Features, Change Attribute Values, Add Attributes, Delete Attributes, Rename Attributes, Create Spatial Index, Create Attribute Indexes, Fast Access to Features at ID, Change Geometries'\n```", "```py\nfeat = QgsFeature(scf.pendingFields())\nfeat.setAttribute('fid',911)\nfeat.setAttribute('ID',311)\nfeat.setAttribute('Type','Pothole')\nfeat.setAttribute('Status','Pending')\nfeat.setGeometry(QgsGeometry.fromPoint(QgsPoint(-106.65897,35.07743)))\nscf.dataProvider().addFeatures([feat])\n```", "```py\nfeat.setAttributes([912,312,\"Other\",\"Closed\"])\n```", "```py\nLayerName.dataProvider().deleteFeatures([list of id])\n```", "```py\nfor x in scf.getFeatures():\n    if x[\"ID\"]==311:\n        scf.dataProvider().deleteFeatures([x.id()])\n```", "```py\nfor x in scf.getFeatures():\n    if x[\"Status\"]=='Closed':\n        key.append(x.id())\n    scf.dataProvider().deleteFeatures(key)\n```", "```py\nscf.dataProvider().changeAttributeValues({114:{0:123,1:345,2:\"ADA\",3:\"NEW\"} })\n```", "```py\nattributes={3:\"Closed\"}\nfor x in scf.getFeatures():\n     if x[\"Type\"]=='Other':\n         scf.dataProvider().changeAttributeValues({x.id():attributes})\n```", "```py\nfrom qgis.PyQt.QtGui import *\nfrom qgis.PyQt.QtWidgets import *\niface.mapCanvas().setSelectionColor( QColor(\"red\") )\nscf.setSelectedFeatures([100])\n```", "```py\nclosed=[] \nexp=QgsExpression(\"Type='Traffic Signs' and Status='Acknowledged'\") \nexp.prepare(scf.pendingFields()) \nfor f in scf.getFeatures(): \n    if exp.evaluate(f)==1: \n        closed.append(f.id()) \nscf.setSelectedFeatures(closed)\n```", "```py\nimport processing\nprocessing.alglist()\n```", "```py\nAdvanced Python field calculator--------------------->qgis:advancedpythonfieldcalculator\n Bar plot--------------------------------------------->qgis:barplot\n Basic statistics for numeric fields------------------>qgis:basicstatisticsfornumericfields\n Basic statistics for text fields--------------------->qgis:basicstatisticsfortextfields\n Boundary--------------------------------------------->qgis:boundary\n Bounding boxes--------------------------------------->qgis:boundingboxes\n Build virtual vector--------------------------------->qgis:buildvirtualvector\n Check validity--------------------------------------->qgis:checkvalidity\n Clip------------------------------------------------->qgis:clip\n```", "```py\nProcessing.alglist(\"buffer\")\n```", "```py\nFixed distance buffer-------------------------------->qgis:fixeddistancebuffer\n Variable distance buffer----------------------------->saga:shapesbufferattributedistance\n Buffer vectors--------------------------------------->gdalogr:buffervectors\n v.buffer.column - Creates a buffer around features of given type.--->grass:v.buffer.column\n```", "```py\nprocessing.alghelp(\"gdalogr:buffervectors\")\n```", "```py\nALGORITHM: Buffer vectors\n INPUT_LAYER <ParameterVector>\n GEOMETRY <ParameterString>\n DISTANCE <ParameterNumber>\n DISSOLVEALL <ParameterBoolean>\n FIELD <parameters from INPUT_LAYER>\n MULTI <ParameterBoolean>\n OPTIONS <ParameterString>\n OUTPUT_LAYER <OutputVector>\n```", "```py\nprocessing.runalg(\"gdalogr:buffervectors\",r'C:/Users/Paul/Desktop/Projected.shp',\"geometry\",100,False,None,False,\"\",r'C:/Users/Paul/Desktop\n/ProjectedBuffer.shp') \nlayer = iface.addVectorLayer(r'C:\\Users\\Paul\\Desktop\\\nProjectedBuffer.shp', \"Buffer\", \"ogr\")\n```", "```py\nINPUT_LAYER = Projected.shp\n GEOMETRY = geometry\n DISTANCE = 100\n DISSOLVEALL = False\n FIELD = None\n MULTI = False\n OPTIONS = “”\n OUTPUT_LAYER = ProjectedBuffer.shp\n```", "```py\n##City_or_Neighborhood= string City\n##Filter=string Nothing\n##Output=output vector\n```", "```py\nimport requests\nimport json\nfrom qgis.core import *\nfrom qgis.PyQt.QtGui import *\nfrom qgis.PyQt.QtWidgets import *\nfrom qgis.PyQt.QtCore import *\n```", "```py\nscfcity=City_or_Neighborhood \nsearchterm=Filter \nprogress.setInfo(\"Wait while I get data from the API\") \nprogress.setText(\"Calling API\") \nif searchterm==\"None\": \n    pagesURL=\"http://seeclickfix.com/api/v2/issues?per_page=100&amp;amp;place_url=\"+scf city+\"&amp;amp;page=\" \n    url=\"http://seeclickfix.com/api/v2/issues?per_page=100&amp;amp;place_url=\"+scfcity \nelse: \n    pagesURL=\"http://seeclickfix.com/api/v2/issuesper_page=100&amp;amp;place_url=\"+scfc ity+\"&amp;amp;search=\"+searchterm+\"&amp;amp;page=\"\n    url=\"http://seeclickfix.com/api/v2/issues?per_page=100&amp;amp;search=\"+searchterm+\"&amp;amp;place_url=\"+scfcity \n```", "```py\ncrs=QgsCoordinateReferenceSystem(\"epsg:4326\")\nscf=QgsVectorLayer('Point?crs=epsg:4326','SeeClickFix','memory')\n\nfields = QgsFields()\nfields.append(QgsField(\"ID\", QVariant.Int))\nfields.append(QgsField(\"Type\", QVariant.String))\nfields.append(QgsField(\"Status\", QVariant.String))\n\nwriter = processing.VectorWriter(Output, None, fields.toList(),\nQGis.WKBPoint, crs)\n```", "```py\nr = requests.get(url).text\nrJSON=json.loads(r)\npages=rJSON['metadata']['pagination']['pages']\nrecords=rJSON['metadata']['pagination']['entries']\nprogress.setInfo(\"Grabbing \"+str(records) +\" Records\")\ncount=1\n\nfor x in range(1,pages+1):\n    progress.setText(\"Reading page \"+str(x))\n    pageData=requests.get(pagesURL+str(x)).text\n    pageDataJSON=json.loads(pageData)\n```", "```py\nfor issue in pageDataJSON['issues']:\ntry:\n    p=QgsFeature()\n    point=QgsPoint(issue['lng'],issue['lat'])\n    p.setGeometry(QgsGeometry.fromPoint(point))\n    p.setAttributes([issue[\"id\"],issue[\"request_type\"]\n    [\"title\"],issue[\"status\"]])\n    writer.addFeature(p)\n    progress.setPercentage((count/float(records))*100)\n    count+=1\nexcept:\n    pass\ndel writer\n```", "```py\nprocessing.alghelp(\"script:seeclickfix\")\n\n ALGORITHM: SeeClickFix\n City_or_Neighborhood <ParameterString>\n Filter <ParameterString>\n Output <OutputVector>\n\nout=processing.runalg(\"script:seeclickfix\",\"Albuquerque\",\"Juan Tabo\",None)\n```", "```py\nout\n\n{'Output': u'C:\\\\Users\\\\Paul\\\\AppData\\\\Local\\\\Temp\\\\processingca7241c6176e42458ea32e8c7264de1e\\\\014bc4d4516240028ce9270b49c5fcaf\\\\Output.shp'}\n```", "```py\nout = iface.addVectorLayer(str(a[\"Output\"]), \"SeeClickFix\",\"ogr\")\nfor feature in out.getFeatures():\n    Do something...\n```"]