- en: Chapter 6. Overlay Analysis
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章. 叠加分析
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Punching holes in polygons with a symmetric difference operation
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用对称差操作在多边形中打孔
- en: Union polygons without merging
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不合并的多边形联合
- en: Union polygons with merging (dissolving)
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用合并（溶解）的多边形联合
- en: Performing an identity function (difference + intersection)
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行恒等函数（差集 + 交集）
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Discovering how two datasets spatially relate to each other when they are placed
    over one another is called overlay analysis. An overlay can be compared to a sheet
    of tracing paper. For example, you could overlay the tracing paper on top of your
    base map and see what areas overlap each other. This process is and was a game
    changer in spatial analysis and modeling. Computer-aided GIS computations can
    therefor automatically identify where two geometry sets spatially touch for example.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 发现当两个数据集叠加在一起时它们在空间上的相互关系被称为叠加分析。叠加可以比作一张描图纸。例如，你可以在你的底图上叠加描图纸，看看哪些区域重叠。这个过程在过去和现在都是空间分析和建模的一个变革。因此，计算机辅助GIS计算可以自动识别两个几何集在空间上接触的位置。
- en: The goal of this chapter is to give you a feel for the most common overlay analysis
    functions, such as unions, intersects, and symmetrical differences. These are
    based on the **Dimensionally Extended nine intersection model** (**DE-9IM**),
    which can be found at [http://en.wikipedia.org/wiki/DE-9IM](http://en.wikipedia.org/wiki/DE-9IM),
    and describes our list of possible overlays. All processes that we use or name
    here are derived using a combination of these nine predicates.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目标是让你对最常见的叠加分析函数有一个感觉，例如联合、交集和对称差。这些基于**维度扩展的九交模型**（**DE-9IM**），可以在[http://en.wikipedia.org/wiki/DE-9IM](http://en.wikipedia.org/wiki/DE-9IM)找到，并描述了我们的可能叠加列表。我们在这里使用或命名的所有过程都是使用这九个谓词的组合推导出来的。
- en: '![Introduction](img/50790OS_06_01.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![简介](img/50790OS_06_01.jpg)'
- en: We will explore these topology rules in depth in [Chapter 9](ch09.html "Chapter 9. Topology
    Checking and Data Validation"), *Topology Checking and Data Validation*.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第9章](ch09.html "第9章. 拓扑检查和数据验证")中深入探讨这些拓扑规则，*拓扑检查和数据验证*。
- en: Punching holes in polygons with a symmetric difference operation
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用对称差操作在多边形中打孔
- en: Why, oh why would we want to punch holes in polygons and create a donut? Well,
    this is done for several reasons, for example, you may want to remove a lake polygon
    from a forest polygon that it overlaps since it sits in the middle of the forest
    and is, therefore, included in your area calculations.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么，哦，为什么我们要在多边形中打孔并创建一个甜甜圈？嗯，这是出于几个原因，例如，你可能想从与森林多边形重叠的湖泊多边形中移除，因为它位于森林中间，因此包含在你的面积计算中。
- en: Another example is where we have a set of polygons representing a golf course's
    fairways and a second set of polygons representing the greens that overlap these
    fairways. Our task is to calculate the correct number of square meters of fairways.
    The greens will create our donuts in a fairway's polygons.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个例子是我们有一组代表高尔夫球道发球区的多边形，以及另一组代表与这些球道重叠的绿色区域的绿色多边形。我们的任务是计算正确的球道平方米数。绿色区域将在球道多边形中形成我们的甜甜圈。
- en: This is translated into spatial operation terminology and means that we need
    to perform a `symmetric difference` operation or, in ESRI terminology, an "erase"
    operation.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这被翻译成空间操作术语，意味着我们需要执行一个`对称差`操作，或者在ESRI术语中，一个“擦除”操作。
- en: '![Punching holes in polygons with a symmetric difference operation](img/50790OS_06_02.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![使用对称差操作在多边形中打孔](img/50790OS_06_02.jpg)'
- en: Getting ready
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this example, we will create two sets of visualizations to see our results.
    Our output will generate **Well Known Text** (**WKT**) that is displayed in your
    browser using the **Openlayers 3** web mapping client.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将创建两组可视化来查看我们的结果。我们的输出将生成**已知文本**（**WKT**），它使用**Openlayers 3**网络地图客户端在你的浏览器中显示。
- en: 'For this example, make sure you have all your code downloaded in your `/ch06`
    folder provided at GitHub and have this folder structure containing these files:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个例子，请确保你已经下载了所有代码到GitHub提供的`/ch06`文件夹，并且这个文件夹结构包含以下文件：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: With the folder structure in place, when you run the code, all inputs and outputs
    will find their correct home.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在文件夹结构就绪的情况下，当你运行代码时，所有输入和输出都将找到它们正确的家。
- en: How to do it...
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'We want to run this code from the command line as usual, which runs in your
    virtual environment:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想像往常一样从命令行运行此代码，它将在您的虚拟环境中运行：
- en: 'Execute the following statement from your `/ch06/code` folder:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的 `/ch06/code` 文件夹执行以下语句：
- en: '[PRE1]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The following code is where interesting operations take place with Shapely:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码是 Shapely 中有趣操作发生的地方：
- en: '[PRE2]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Your output will be available in the `/ch06/code/ol3/html/` folder with the
    `ch06-01_sym_diff.html` filename. Simply open this file in your local web browser,
    such as Chrome, Firefox, or Safari. Our output web map was created by modifying
    the Openlayers 3 example code pages according to our needs. The resulting web
    map should display the following map in your local web browser:'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您的输出将保存在 `/ch06/code/ol3/html/` 文件夹中，文件名为 `ch06-01_sym_diff.html`。只需在您的本地网页浏览器中打开此文件，例如
    Chrome、Firefox 或 Safari。我们的输出网络地图是通过根据我们的需求修改 Openlayers 3 示例代码页面创建的。生成的网络地图应在您的本地网页浏览器中显示以下地图：
- en: '![How to do it...](img/50790OS_06_03.jpg)'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做到这一点...](img/50790OS_06_03.jpg)'
- en: You can now clearly see a hole inside our fairway.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以清楚地看到航道内部有一个洞。
- en: How it works...
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'To begin with, we use two **GeoJSON** datasets as our input, both with EPSG:
    3857 and stemming from the OSM EPSG: 4326\. The transformation process is not
    covered here; take a look at [Chapter 2](ch02.html "Chapter 2. Working with Projections"),
    *Working with Projections*, for further information on how to transform data between
    two coordinate systems.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '首先，我们使用两个 **GeoJSON** 数据集作为我们的输入，它们都具有 EPSG: 3857，并源自 OSM EPSG: 4326。转换过程在此未涉及；有关如何在两个坐标系之间转换数据的更多信息，请参阅
    [第 2 章](ch02.html "第 2 章。处理投影")，*处理投影*。'
- en: Our first task is to read in both the GeoJSON files into Python dictionaries
    objects using the standard Python `json` module. Next, we set up some empty lists
    that will store the Shapely geometry objects as a list used for our input to generate
    the needed `MultiPolygons` for our analysis. We use the Shapely built-in `asShape()`
    function to create the Shapely geometry objects so that we can perform the spatial
    operations. This is accomplished by accessing the dictionaries' `['geometry']`
    element. We then append each geometry to our empty list. This list is then inputted
    into the Shapely `MultiPolygon()` function that will create a MultiPolygon for
    us and is used as our inputs.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一项任务是使用标准的 Python `json` 模块将两个 GeoJSON 文件读入 Python 字典对象。接下来，我们设置一些空列表，这些列表将存储
    Shapely 几何对象列表，用作我们的输入以生成分析所需的 `MultiPolygons`。我们使用 Shapely 内置的 `asShape()` 函数创建
    Shapely 几何对象，以便我们可以执行空间操作。这是通过访问字典的 `['geometry']` 元素来实现的。然后我们将每个几何形状追加到我们的空列表中。然后，这个列表被输入到
    Shapely 的 `MultiPolygon()` 函数中，该函数将为我们创建一个 MultiPolygon，并用作我们的输入。
- en: The actual process of running our `symmetric_difference` happens when we input
    the `fairways_plys` MultiPolygon as input and the parameter passed is the `greens_ply`
    MultiPolygon. The output is stored in the `result` variable, which itself is also
    a MultiPolygon. Not to forget, a MultiPolygon is just a list of polygons that
    we can iterate over.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上运行我们的 `symmetric_difference` 过程发生在我们输入 `fairways_plys` MultiPolygon 作为输入，并传递参数
    `greens_ply` MultiPolygon 时。输出存储在 `result` 变量中，它本身也是一个 MultiPolygon。别忘了，MultiPolygon
    只是一个我们可以迭代的多边形列表。
- en: Next up, we'll take a look at a function called `write_wkt(filepath, features)`.
    This outputs our resulting MultiPolygon Shapely geometry to the `Well Known Text
    (WKT)` format. We do not simply output this `WKT` but instead, create a new JavaScript
    file, `ol3/data/ch06-01_results_sym_diff.js`, containing our `WKT` output. The
    code outputs a string that creates a JavaScript variable called `ply_data`. This
    `ply_data` variable is then used in our HTML file located at `/ch06/code/ol3/html/sym_diff.html`
    to draw our `WKT` vector layer using Openlayers 3\. We then call our function
    and it executes the write to the `WKT` JavaScript file.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将查看一个名为 `write_wkt(filepath, features)` 的函数。这个函数将我们的结果 MultiPolygon Shapely
    几何形状输出到 `Well Known Text (WKT)` 格式。我们不仅输出这个 `WKT`，而是创建一个新的 JavaScript 文件，`ol3/data/ch06-01_results_sym_diff.js`，包含我们的
    `WKT` 输出。代码输出一个字符串，创建一个名为 `ply_data` 的 JavaScript 变量。这个 `ply_data` 变量随后被用于位于 `/ch06/code/ol3/html/sym_diff.html`
    的我们的 HTML 文件中，以使用 Openlayers 3 绘制我们的 `WKT` 向量层。然后我们调用我们的函数，它执行写入到 `WKT` JavaScript
    文件的操作。
- en: This example is the first that visualizes our results as a web map. In [Chapter
    11](ch11.html "Chapter 11. Web Analysis with GeoDjango"), *Web Analysis with GeoDjango*,
    we will explore a fully functional web mapping application; for those of you who
    cannot wait, you may want to jump ahead. Further examples will continue to use
    Openlayers 3 as our data viewer, moving away from using Matplotlib.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例是第一个将我们的结果可视化为网络地图的示例。在 [第 11 章](ch11.html "第 11 章。使用 GeoDjango 进行网络分析")，*使用
    GeoDjango 进行网络分析*中，我们将探索一个功能齐全的网络映射应用程序；对于那些迫不及待的人，您可能想要提前跳读。接下来的示例将继续使用 Openlayers
    3 作为我们的数据查看器，而不再使用 Matplotlib。
- en: In the end, our simple one-line symmetric difference execution needed a lot
    of helper code to deal with importing GeoJSON data and exporting the results in
    a format that could display a web map with Openlayers 3.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们的简单一行对称差执行需要大量的辅助代码来处理导入 GeoJSON 数据和以可以显示 Openlayers 3 网络地图的格式导出结果。
- en: Union polygons without merging
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不合并的合并多边形
- en: To demonstrate what merging is all about, we will take an example from the **National
    Oceanic and Atmospheric Administration** (**NOAA**) weather data. It provides
    an awesome minute-by-minute update of Shapefiles for your desire to download data.
    We will look at a one-week collection of weather warnings, and combine these with
    state boundaries to see where exactly warnings occurred within a state boundary.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示合并的概念，我们将从一个 **国家海洋和大气管理局** (**NOAA**) 的气象数据示例中获取例子。它提供了您下载数据的 Shapefiles
    的令人惊叹的每分钟更新。我们将查看一周的天气预警集合，并将这些与州边界结合起来，以查看预警在州边界内确切发生的位置。
- en: '![Union polygons without merging](img/50790OS_06_04.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![不合并的合并多边形](img/50790OS_06_04.jpg)'
- en: The preceding screenshot shows us the polygons before the union operation in
    QGIS.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的截图显示了在 QGIS 中进行合并操作之前的多边形。
- en: Getting ready
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Make sure your virtual environment is, as always, fired up and run the following
    command:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您的虚拟环境始终处于运行状态，并运行以下命令：
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Next, switch to your `/ch06/code/` folder to find finished code examples or
    create your empty file in the `/ch06/`working folder and follow along with the
    code.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，切换到您的 `/ch06/code/` 文件夹以查找完成的代码示例，或者在 `/ch06/` 工作文件夹中创建一个空文件，并按照代码进行操作。
- en: How to do it...
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The `pyshp` and `shapely` libraries are our two workhorses for this exercise:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`pyshp` 和 `shapely` 库是我们这个练习的两个主要工具：'
- en: 'You can simply run this file in the command prompt to see the results as follows:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以直接在命令提示符中运行此文件以查看结果，如下所示：
- en: '[PRE4]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Results can then be opened in the `/ch06/code/ol3/html/ch06-02_union.html`
    folder with a double-click to start them in your local web browser. You should
    see the following web map if everything''s gone smoothly:'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后，您可以通过双击打开 `/ch06/code/ol3/html/ch06-02_union.html` 文件夹中的结果，以在您的本地网络浏览器中启动它们。如果一切顺利，您应该看到以下网络地图：
- en: '![How to do it...](img/50790OS_06_05.jpg)'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/50790OS_06_05.jpg)'
- en: 'Now let''s take a look at the code that makes it all happen:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们看看使这一切发生的代码：
- en: '[PRE5]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How it works...
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: A quick high-level run-through of what is going on here at the beginning should
    help clear the air. We have four functions and nine variables within our Python
    code to split the load of input and output data. The running of our code takes
    place in the `if __name__ == "main":` call that is found at the end of the code.
    We start defining two variables to deal with our inputs that we are going to **union**
    together. These two are our input Shapefiles and the other three outputs are GeoJSON
    and JavaScript files.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码开始部分快速浏览一下正在发生的事情应该有助于澄清。在我们的 Python 代码中，我们有四个函数和九个变量来分割输入和输出数据的负载。我们的代码运行发生在代码末尾的
    `if __name__ == "main":` 调用中。我们开始定义两个变量来处理我们将要 **合并** 的输入。这两个是我们的输入 Shapefiles，其他三个输出是
    GeoJSON 和 JavaScript 文件。
- en: The `create_shapes()`function converts our Shapefile into Shapely `MultiPolygon`
    geometry objects. Inside the Python class, the list comprehension is used to generate
    a new list of polygon objects, which are the input list of polygons used to create
    our output `MultiPolygon`. Next, we'll simply run this function passing in our
    input Shapefiles.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`create_shapes()` 函数将我们的 Shapefile 转换为 Shapely `MultiPolygon` 几何对象。在 Python
    类内部，列表推导用于生成一个新列表，其中包含多边形对象，这些对象是我们用于创建输出 `MultiPolygon` 的输入多边形列表。接下来，我们将简单地运行这个函数，传入我们的输入
    Shapefiles。'
- en: Our `create_union()` function is up next where we do the real union work. We
    begin by unioning the two geometry boundaries together that produces a union set
    of LineStrings and represents the outer bounds of our input polygons. The reason
    for this is that we do not want to lose the geometries of both polygons, which
    will, by default, dissolve into one big polygon when simply passed into the Shapely
    union function. Therefore, we need to rebuild the polygons with the `polygonize()`
    Shapely function.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是我们的`create_union()`函数，我们在这里进行真正的合并工作。我们首先将两个几何边界合并在一起，生成一个包含LineStrings的并集集合，代表输入多边形的边界。这样做的原因是我们不希望丢失两个多边形的几何形状，当直接传递给Shapely的合并函数时，它们将默认溶解成一个大的多边形。因此，我们需要使用`polygonize()`
    Shapely函数重建多边形。
- en: The `polygonize` function creates a Python **generator** object, not a simple
    geometry. This is an *iterator* that's similar to a *list* that we need to loop
    over to get at the individual polygons it's created for us.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`polygonize`函数创建了一个Python **生成器**对象，而不是一个简单的几何对象。这是一个类似于**列表**的**迭代器**，我们需要遍历它以获取它为我们创建的各个多边形。'
- en: We do exactly this in the next code segment using the `enumerate()` Python function
    that automatically creates an ID for us for each feature that we use as the id
    field in the attribute results. After our loop, we use the standard Python `json.dump()`
    method to export our newly created GeoJSON file and write it to disk using the
    Python `open()` method in the write mode.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在下一个代码段中正是这样做的，使用Python的`enumerate()`函数为每个我们用作id字段的属性结果自动创建一个ID。在我们的循环之后，我们使用标准的Python
    `json.dump()`方法导出我们新创建的GeoJSON文件，并使用Python的`open()`方法以写入模式将其写入磁盘。
- en: Lastly, in our `create_union()` function, we prepare to output our resulting
    **union** polygon as a Shapely MultiPolygon object. This is accomplished simply
    by looping through the `polygonize()` iterator and outputting a list that feeds
    into the Shapely `MultiPolygon()`function. Finally, we execute the union function,
    passing in our two input geometries and specifying the output GeoJSON file.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在我们的`create_union()`函数中，我们准备输出我们的结果**并集**多边形作为一个Shapely MultiPolygon对象。这通过简单地遍历`polygonize()`迭代器，输出一个列表，该列表输入到Shapely的`MultiPolygon()`函数中。最后，我们执行合并函数，传入我们的两个输入几何形状，并指定输出GeoJSON文件。
- en: So, we can view our results in our web map as we did in the previous exercise
    using a small function called `write_wkt()`. This little function takes the file
    path to the output JavaScript file that we want to create and the MultiPolygon
    result's geometry. Shapely then dumps the geometry into the Well Known Text format
    as we write it out to the JavaScript file.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以像在之前的练习中一样，使用一个名为`write_wkt()`的小函数在我们的网络地图中查看我们的结果。这个小小的函数接受我们想要创建的输出JavaScript文件的文件路径以及MultiPolygon结果的几何形状。Shapely然后将几何形状以写入JavaScript文件的方式转换为Well
    Known Text格式。
- en: In the end, a small function called `output_geojson_fc()` is used to output
    another GeoJSON file, this time using the Python `geojson` library. This simply
    shows you another way to recreate a GeoJSON file. Since GeoJSON is a plain text
    file, it is possible to create it in many unique ways depending on your personal
    programming preference.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，一个名为`output_geojson_fc()`的小函数被用来输出另一个GeoJSON文件，这次使用Python的`geojson`库。这仅仅展示了另一种创建GeoJSON文件的方法。由于GeoJSON是一个纯文本文件，因此根据您的个人编程偏好，可以以许多独特的方式创建它。
- en: Union polygons with merging (dissolving)
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过合并（溶解）合并多边形
- en: To demonstrate what merging is all about, we will take an example out of the
    NOAA weather data. It provides an awesome minute-by-minute update of Shapefiles
    to satisfy your desire to download data. We will look at a week's collection of
    weather warnings and union these warnings together, giving us the total warning
    area issued in this week.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示合并的概念，我们将从NOAA气象数据中举一个例子。它提供了令人惊叹的逐分钟更新Shapefiles，以满足您下载数据的愿望。我们将查看一周的天气预警收集，并将这些预警合并在一起，得到本周发布的总预警区域。
- en: 'A conceptual visualization of our desired results is shown here:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这里展示了我们期望的结果的概念可视化：
- en: '![Union polygons with merging (dissolving)](img/50790OS_06_06.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![通过合并（溶解）合并多边形](img/50790OS_06_06.jpg)'
- en: 'Most of the data is located around Florida, but has some polygons near Hawaii
    and California. To see the original data or find new data, check out these links:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 大部分数据位于佛罗里达州附近，但在夏威夷和加利福尼亚州也有一些多边形。要查看原始数据或寻找新数据，请查看以下链接：
- en: '[http://www.nws.noaa.gov/geodata/catalog/wsom/html/pubzone.htm](http://www.nws.noaa.gov/geodata/catalog/wsom/html/pubzone.htm)'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.nws.noaa.gov/geodata/catalog/wsom/html/pubzone.htm](http://www.nws.noaa.gov/geodata/catalog/wsom/html/pubzone.htm)'
- en: '[http://nws.noaa.gov/regsci/gis/week.html](http://nws.noaa.gov/regsci/gis/week.html)'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://nws.noaa.gov/regsci/gis/week.html](http://nws.noaa.gov/regsci/gis/week.html)'
- en: '[http://www.nws.noaa.gov/geodata/index.html](http://www.nws.noaa.gov/geodata/index.html)'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.nws.noaa.gov/geodata/index.html](http://www.nws.noaa.gov/geodata/index.html)'
- en: If you want to see the state boundaries, you can find them at [https://www.census.gov/geo/maps-data/data/cbf/cbf_state.html](https://www.census.gov/geo/maps-data/data/cbf/cbf_state.html).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想查看州界，你可以在[https://www.census.gov/geo/maps-data/data/cbf/cbf_state.html](https://www.census.gov/geo/maps-data/data/cbf/cbf_state.html)找到它们。
- en: 'Here is what a sample of the data looks like around Florida before the union,
    which is visualized with QGIS:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是佛罗里达州在联盟之前的数据样本的样子，它使用QGIS进行了可视化：
- en: '![Union polygons with merging (dissolving)](img/50790OS_06_07.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![使用合并（溶解）合并多边形](img/50790OS_06_07.jpg)'
- en: Getting ready
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The usual order of business is needed to get going with this code. Fire up your
    virtual environment and check whether your data is all downloaded and located
    in your `/ch06/geodata/` folder. If all is ready, jump right in and start typing
    some code.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 需要遵循常规的业务顺序才能开始这段代码。启动你的虚拟环境，并检查你的数据是否全部下载并位于你的`/ch06/geodata/`文件夹中。如果一切准备就绪，就直接开始编写代码。
- en: How to do it...
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Our data is a little messy to say the least, so please follow our steps outlining
    a solution to allow us to process and run the analysis function, `union`:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的数据至少有点杂乱，所以请按照我们的步骤概述的解决方案进行操作，以便我们能够处理并运行分析函数`union`：
- en: '[PRE6]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Your resulting web map will look like this:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 你的结果网络地图将看起来像这样：
- en: '![How to do it...](img/50790OS_06_08.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/50790OS_06_08.jpg)'
- en: How it works...
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We are starting to increasingly reuse more code that is now tucked away in our
    `/ch06/code/utils.py` module. As you see in the imports, we use three functions
    for the standard input and output of data. The main application starts with defining
    our NOAA input Shapefile and defining the output GeoJSON file. Then, if we run
    the code, it will crash due to data validity issues. So, we create a new function
    to check our input data for invalid geometries. This new function will catch these
    invalid geometries and convert them to valid polygons.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们开始越来越多地重用现在藏在我们`/ch06/code/utils.py`模块中的代码。正如你在导入中看到的那样，我们使用三个函数进行数据的标准输入和输出。主应用程序从定义我们的NOAA输入Shapefile和定义输出GeoJSON文件开始。然后，如果我们运行代码，它将由于数据有效性问题而崩溃。因此，我们创建了一个新函数来检查我们的输入数据中的无效几何形状。这个新函数将捕获这些无效几何形状并将它们转换为有效的多边形。
- en: Shapely has a geometry property called `is_valid`, which accesses the GEOS engine
    to check for geometry validity based on the simple features in the OGC specification.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Shapely有一个名为`is_valid`的几何属性，它访问GEOS引擎，根据OGC规范中的简单特征来检查几何的有效性。
- en: Tip
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: If you are looking for all the possible invalid data possibilities, you can
    find more information on the Open Geospatial Consortium website. Check out the
    Simple Features Standard on page *28*; you will find the examples of invalid polygons
    at [http://portal.opengeospatial.org/files/?artifact_id=25355](http://portal.opengeospatial.org/files/?artifact_id=25355).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在寻找所有可能的无效数据可能性，你可以在开放地理空间联盟网站上找到更多信息。查看第*28*页的简单特征标准；你将在[http://portal.opengeospatial.org/files/?artifact_id=25355](http://portal.opengeospatial.org/files/?artifact_id=25355)找到无效多边形的示例。
- en: The reason for these anomalies is that when data is overlaid and processed,
    geometries become combined or cut at angles that are not always optimal.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这些异常的原因是，当数据重叠和处理时，几何形状会以不是总是最优的角度组合或切割。
- en: At last, we have clean data to work with, making the rest of our journey very
    simple by running the Shapely `cascaded_union()` function, which will dissolve
    all our overlapping polygons. Our resulting MultiPolygons are pushed further into
    our `out_geoj()` function, which finally writes the new geometries to disk in
    our `/ch06/geodata` folder.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有了干净的数据可以工作，通过运行Shapely的`cascaded_union()`函数，这将溶解我们所有的重叠多边形。我们的结果多边形进一步推入我们的`out_geoj()`函数，该函数最终将新的几何形状写入我们`/ch06/geodata`文件夹中的磁盘。
- en: Performing an identity function (difference + intersection)
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行身份函数（差集+交集）
- en: In ESRI geoprocessing terminology, there is an overlay function called `identity`.
    This is a very useful function to call when you want to keep all the original
    geometry boundaries of ONLY the input features combined with an intersection of
    input features.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在ESRI地理处理术语中，有一个名为`identity`的重叠功能。当你想要保留所有原始几何边界，并且仅与输入特征的重叠相结合时，这是一个非常有用的功能。
- en: '![Performing an identity function (difference + intersection)](img/50790OS_06_09.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![执行身份函数（差集 + 交集）](img/50790OS_06_09.jpg)'
- en: 'This boils down to a formula that calls for both `difference` and `intersect`.
    We first find the difference (`input feature - intersection`), then add the intersection
    to create our results as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这归结为一个公式，需要同时调用`difference`和`intersect`。我们首先找到差集（`输入特征 - 交集`），然后添加交集以创建我们的结果如下：
- en: '[PRE7]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How to do it...
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'For all you curious folks who want to learn how to do this, type out the following
    code; it will help your muscle memory:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于所有好奇的人，如果你想知道如何做到这一点，请输入以下代码；它将帮助你记忆肌肉：
- en: '[PRE8]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The resulting polygons can now be visualized in your browser. Now simply open
    the `/ch06/code/ol3/html/ch06-04_identity.html` file and you will see this map:'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在生成的多边形可以在你的浏览器中可视化。现在只需打开`/ch06/code/ol3/html/ch06-04_identity.html`文件，你将看到这张地图：
- en: '![How to do it...](img/50790OS_06_10.jpg)'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做到这一点...](img/50790OS_06_10.jpg)'
- en: How it works...
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We have hidden away a couple of gems in our `util.py` utilities file called
    `shp2_geojson_obj` and `out_geoj`. The first one takes in our Shapefile and returns
    a Python dictionary object. Our function actually creates a valid GeoJSON in the
    form of a Python dictionary that could very easily be converted to a JSON string
    using the standard `json.dumps()`Python module.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在我们的`util.py`工具文件中隐藏了两颗宝石，名为`shp2_geojson_obj`和`out_geoj`。第一个函数接收我们的Shapefile并返回一个Python字典对象。我们的函数实际上创建了一个有效的GeoJSON，以Python字典的形式，可以很容易地使用标准的`json.dumps()`Python模块转换为JSON字符串。
- en: 'With this overhead out of the way, we can jump into creating Shapely geometries
    that can be used for our analysis. The `create_polys()`function does exactly this:
    it takes in our geometries, returning a `MultiPolygon`. This `MultiPolygon` is
    used to calculate our difference and intersection.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理完这些前置工作之后，我们可以跳到创建Shapely几何体，这些几何体可以用于我们的分析。`create_polys()`函数正是这样做的：它接收我们的几何体，返回一个`MultiPolygon`。这个`MultiPolygon`用于计算我们的差集和交集。
- en: So, at last, we can do the analysis calculation starting with the Shapely difference
    function using our `temp1-ply.shp` as our input feature and `temp2-poly.shp` as
    our identity feature. The difference function only returns the geometries of the
    input features that do not intersect the other feature. Next up, we execute the
    intersection function that only returns geometries that overlap between our two
    inputs.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，最后，我们可以从Shapely的差集函数开始进行分析计算，使用我们的`temp1-ply.shp`作为输入特征，`temp2-poly.shp`作为身份特征。差集函数只返回不与另一个特征相交的输入特征的几何体。接下来，我们执行交集函数，它只返回两个输入之间的重叠几何体。
- en: Our recipe is almost completed; we only need to combine these two new results
    to produce our new identity result's MultiPolygon. The `create_out()`function
    takes two arguments, the first being our input features and the second is our
    resulting intersection features. The order is very important; otherwise your results
    will be reversed. So make sure that you enter the correct order of input.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的配方几乎完成了；我们只需要将这两个新结果结合起来，以产生我们新的身份结果的多边形。`create_out()`函数接受两个参数，第一个是我们的输入特征，第二个是我们的结果交集特征。顺序非常重要；否则你的结果将被反转。所以请确保你输入正确的顺序。
- en: We run through each of the geometries and combine them into a fancy new `MultiPolygon`
    called `result_identity`. This is then pumped into our `out_geoj()` function,
    which writes out a new GeoJSON file to your `/ch06/geodata`/ folder.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们遍历每个几何体，将它们组合成一个名为`result_identity`的复杂新`MultiPolygon`。然后将其泵入我们的`out_geoj()`函数，该函数将写入一个新的GeoJSON文件到你的`/ch06/geodata`文件夹。
- en: Our `out_geoj()` function is located in the `utils.py` file and might need a
    quick explanation. The input is a list of geometries and the file path of the
    output GeoJSON file location on disk. We simply create a new dictionary, and then
    loop through each geometry, exporting the Shapely geometry to a GeoJSON file using
    the built-in Shapely `__geo_interface__`.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`out_geoj()`函数位于`utils.py`文件中，可能需要简要说明。输入是一个几何列表和输出GeoJSON文件在磁盘上的文件路径。我们简单地创建一个新的字典，然后遍历每个几何体，使用内置的Shapely
    `__geo_interface__`将Shapely几何体导出到GeoJSON文件。
- en: Note
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you want to read up on the `__geo_interface__,` do so for yourself and find
    out what it is and why it's so cool at [https://gist.github.com/sgillies/2217756](https://gist.github.com/sgillies/2217756).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解`__geo_interface__`，请自行查阅并了解它是什么以及为什么它如此酷，请访问[https://gist.github.com/sgillies/2217756](https://gist.github.com/sgillies/2217756)。
- en: 'For those of you looking for the two utility functions, here they are for your
    reading pleasure:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些正在寻找两个效用函数的各位，这里就是供您阅读的版本：
- en: '[PRE9]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
