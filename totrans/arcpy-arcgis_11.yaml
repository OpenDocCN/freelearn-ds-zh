- en: Chapter 11. Network Analyst and Spatial Analyst with ArcPy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Use of the ArcGIS for Desktop extensions also benefits from the power of Python
    and ArcPy. The ability to model routes using a streets dataset or a bus routes
    dataset using ArcPy will help us convert entire workflows into script tools. Both
    Network Analysts and Spatial Analysts have access modules built into ArcPy for
    improved control of their available tools, methods, and properties.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a simple network dataset
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking out the extensions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ArcPy Network Analyst module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ArcPy Spatial Analyst module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Network Analyst extension
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The ESRI's Network Analyst extension is a powerful tool to enable routing and
    network connectivity functionality within ArcGIS. The extension, when used for
    street routing, allows users to find the quickest path between two points along
    a road network. The route can be constrained by a number of factors, such as traffic
    or left turns, to better model road travel. Similar analysis can be run using
    other types of networks, such as water pipe networks or electrical networks.
  prefs: []
  type: TYPE_NORMAL
- en: Using Network Analyst
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To use the Network Analyst extension, the ArcGIS for Desktop Advanced license
    is required. In ArcCatalog or ArcMap, click on the **Customize** menu and select
    **Extensions**. Once the Extensions menu is open, click on the checkbox next to
    turn on the **Network Analyst Extension.**
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Feature Dataset
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first step to using a network dataset is to create one within a feature
    dataset. To do so, we will generate a feature dataset to hold the data of interest.
    Right-click on the **File** geodatabase that houses the **Bus Stop** data and
    select **New**, and then select **Feature Dataset** from the **New** menu. Name
    it `Chapter11Results` and click on **Next**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Feature Dataset](img/8662OS_11_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Next, select the **Spatial Reference System** (**SRS**). In this case, we will
    be using the SRS of the local State Plane zone for San Francisco. It is a projected
    coordinate system, so select that folder, and then click on the `State Plane`
    folder. Once it is opened, select the folder called **NAD 1983(US Feet)**. From
    the available reference systems, select the one called **NAD 1983 StatePlane California
    III FIPS 0403 (US Feet)**. Click on **Next** to go to the next menu.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This system is also known as 2227 in **Well Known ID** (**WKID**) or **European
    Petroleum Survey Group** (**EPSG**) systems. More information about these codes
    is available at [http://spatialreference.org](http://spatialreference.org), a
    website used to find the thousands of spatial reference systems used throughout
    the world.
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Vertical Coordinate Systems** folder and then select the **North
    America** folder. Select the **North American Vertical Datum of 1988 in feet**
    (**NAVD 1988 US survey feet**). This will make it possible to have the vertical
    and horizontal linear units in the same measurement system. Click on **Next**
    to go to the next menu.
  prefs: []
  type: TYPE_NORMAL
- en: The tolerances on the next page are also very important, but we will not cover
    them in detail here. Accept the defaults and click on **Finish** to finalize the
    **Feature Dataset**.
  prefs: []
  type: TYPE_NORMAL
- en: Importing the datasets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Import the bus stops, streets, and bus routes feature classes into the `Chapter
    11 Results Feature Dataset`. Right-click on the dataset and select **Import**,
    and then **Feature Class (Single)**. Add the feature classes one by one to give
    them a new name that will keep them separated from the versions contained within
    the **SanFrancisco Feature Dataset**. Importing them will make sure that they
    are in the correct SRS and that a network dataset can be created.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Network Dataset
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have a data container, we can create a network dataset from the
    streets feature class. Right-click on the **Chapter11Results** feature dataset
    and select **New**, and then choose **Network Dataset**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the Network Dataset](img/8662OS_11_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Call the **Network Dataset** `Street_Network` and click on **Next**. Select
    the **Streets feature class** as the class that will participate in the network
    dataset and click on **Next** to move to the next menu. Select **Global Turns**
    to model turns within the network. In the next menu, use the default connectivity
    settings. Then, accept the **Using Z Coordinate Values from Geometry** setting.
    Accept the default cost restriction and driving directions settings, and finally
    click on **Finish** to generate the network dataset. Then, build the network dataset
    using the final menu. The network dataset is ready to be used.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing the Network Dataset using ArcPy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that the necessary setup has been completed, the street_network network
    dataset can be added to a script for use in generating routes. Because this is
    a simple analysis, the only impedance value to be used will be the length of the
    street segments. Through the use of a `SearchCursor`, `PointGeometry` objects
    from the bus stops can be accessed and added as locations to be searched:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Breaking down the script
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let's dissect the script, which once finished, will generate a layer file containing
    the added Stops, and the Routes along streets to best get from the origin stop
    to the destination stop.
  prefs: []
  type: TYPE_NORMAL
- en: 'The script begins by importing the arcPy module. The next line allows us to
    use the Network Analyst extension:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Using the `arcpy.CheckOutExtension()` method to invoke the Network Analyst extension
    involves passing the correct keyword to the method as a parameter. Once it has
    been invoked, the tools of the extension can be called and executed in the script.
  prefs: []
  type: TYPE_NORMAL
- en: 'Assigning the bus stops feature class and the street_network network dataset
    to variables, they can then be passed to ArcPy''s `MakeRouteLayer_na()` method,
    along with a variable representing the impedance value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The `MakeRouteLayer_na` tool produces a `RouteLayer` in memory. This blank
    layer needs to be populated with stops to produce the route(s) between them. For
    this purpose, we need a `SearchCursor` to access the `PointGeometry` objects and
    a SQL statement that will limit the returned results to the line of interest:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The Search Cursor will allow the **Stops** sublayer of the layer produced by
    the MakeRouteLayer tool to be populated when used in conjunction with the `AddLocations`
    tool. Once populated, the `RouteLayer` can be passed to the **Solve** tool to
    find the routes between the points of interest. Again, the routes are solved based
    on finding the lowest **impedance** between the two points. In this example, the
    only impedance is the segment length, but it could be traffic or elevation or
    other restriction types, if that data is available:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The final result is a layer file that is written to disk using the `SaveToLayerFile`
    tool.
  prefs: []
  type: TYPE_NORMAL
- en: '![Breaking down the script](img/8662OS_11_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Network Analyst module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In an effort to make the use of the Network Analyst extension more **Pythonic**,
    the newer Network Analyst (`na`) module adjusts how the methods that correspond
    to the ArcToolbox Network Analyst tools are accessed. Instead of calling the tools
    directly from ArcPy, the tools are now methods of the `na` module. Removing the
    initials of the Network Analyst toolset also reduces confusion and makes it easier
    to remember the name of the method. See the difference as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The tool will produce the same layer output as the original script, but the
    reorganization of the Network Analyst tools into the `na` module has made the
    code more logical. For instance, it makes more sense to call `Solve` using `arcpy.na.Solve()`,
    instead of `arcpy.Solve_na()`, as it reinforces that `Solve` is a method of the
    Network Analyst (`na`) module. As ArcPy continues to be developed, I expect more
    **Pythonic** code reorganization to occur.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing the Spatial Analyst Extension
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Spatial Analyst Extension is very important to perform analysis on both
    raster and vector datasets, but it is generally used to perform surface analysis
    and raster math. These operations are made even easier by the use of ArcPy, as
    all of the tools available in the Spatial Analyst Toolbox are exposed with the
    Spatial Analyst access module. This includes the Raster Calculator tools, making
    map algebra easy by using the tools and operators in simple expressions.
  prefs: []
  type: TYPE_NORMAL
- en: Adding elevation to the bus stops
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The elevation raster "sf_elevation" has been downloaded from NOAA and added
    to the File Geodatabase. However, it covers the entire Bay Area, and we should
    write a script to only extract an area of the city of San Francisco as it will
    reduce the time needed to run our scripts. We''ll use a SQL statement as the `where`
    clause to limit the results to the South of Market (SoMa) neighborhood. To do
    so, let''s take advantage of a Search Cursor and the Spatial Analyst access module''s
    Extract by Polygon property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The `ExtractByPolygon()` method is a bit misleading, as it does not accept a
    `Polygon` object as a parameter. Instead, it requires a list of `Point` objects
    that represent the vertices of the area that we want to extract. As the `SearchCursor`
    is iterating through the neighborhoods dataset, a `Polygon` object is returned
    by the cursor. Fortunately, the `SearchCursor` has a final parameter, which we
    have not yet explored, that allows us to extract the individual points or vertices
    that make up the `Soma` neighborhood polygon. By setting the Search Cursor's optional
    Explode to Points parameter (which converts Polygon objects into coordinate pairs
    for each vertex) to `True`, Point objects can be generated by passing the `XY`
    values of each returned vertex to the `arcpy.Point` method. These `Point()` objects
    are appended to the `somaGeometry` list and then passed to the Spatial Analyst
    access module's `ExtractByPolygon` method.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Passing a Polygon Object instead of Point Objects will return an error.
  prefs: []
  type: TYPE_NORMAL
- en: Using Map Algebra to generate elevation in feet
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We now have a raster to use to extract elevation values. However, both the
    original raster and the generated SoMa neighborhood raster contain elevation values
    in meters, and it would be better to convert them to feet to keep them consistent
    with the projection of the bus stops. Let''s use raster math and the `Times()`
    method to convert the values from meters to feet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The `Times()` method generates a new raster to glean the elevation values we
    need for the bus stops of interest.
  prefs: []
  type: TYPE_NORMAL
- en: Adding in the bus stops and getting elevation values
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have generated a raster that we can use to find elevation values
    in feet, we need to add a new `arcpy.sa()` method to generate the points. The
    `ExtractValuesToPoints()` method will generate a new bus stops feature class with
    a new field that holds the elevation values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The final result
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We produced a subset feature class of the bus stops that has the elevation
    values added as a field. This process could be repeated for the entire city, one
    neighborhood at a time, or it could be performed with the original elevation raster
    on the entire bus stops feature class to generate a value for each stop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This script demonstrates well the value of accessing the advanced extensions
    in ArcPy and combining them with `SearchCursors` and `Geometry` objects. The script
    could be taken even further by adding a `SearchCursor` to look through the `outstops`
    dataset and exporting the results to a spreadsheet, or even adding a new field
    to the original bus stops dataset to populate with the elevation values. It could
    even be used as impedance values to be entered into a Network Analyst extension
    analysis—a fun coding task that I hope you will attempt.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered the basics of using common ArcGIS for Desktop Advanced
    extensions within ArcPy, with a focus on the Network Analyst access module and
    the Spatial Analyst access module. We explored how to generate a network and how
    to create network paths using ArcPy. We also explored how to access Spatial Analyst
    tools and use them in conjunction with `SearchCursors` to work with rasters and
    vectors for spatial analysis.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explore some final pieces to the ArcPy puzzle that
    will allow the creation of advanced scripts and script tools.
  prefs: []
  type: TYPE_NORMAL
