["```py\ndef combine_campaign_table(purchase_history,campaign_info):\n    purchase_campaign = purchase_history.join(\n        campaign_info, \\\n        purchase_history.ID == campaign_info.ID, \\\n        lsuffix=\"_left\", rsuffix=\"_right\"\n    )\n    purchase_campaign = purchase_campaign.drop(\"ID_RIGHT\")\n    return purchase_campaign\n```", "```py\ndef combine_complain_table(purchase_campaign,complain_info):\n    purchase_campaign_complain = purchase_campaign.join(\n        complain_info, \\\n        purchase_campaign[\"ID_LEFT\"] == complain_info.ID\n    )\n    purchase_campaign_complain = \\\n        purchase_campaign_complain.drop(\"ID_LEFT\")\n    return purchase_campaign_complain\n```", "```py\ndef union_marketing_additional_table(\n    purchase_campaign_complain,marketing_additional):\n    final_marketing_table = \\\n        purchase_campaign_complain.union_by_name(\n            marketing_additional\n        )\n    return final_marketing_table\n```", "```py\nfrom snowflake.snowpark.functions import sproc\nimport snowflake\ndef data_prep(session: Session):\n    #### Loading Required Tables\n    purchase_history = session.table(\"PURCHASE_HISTORY\")\n    campaign_info = session.table(\"CAMPAIGN_INFO\")\n    complain_info = session.table(\"COMPLAINT_INFO\")\n    marketing_additional = session.table(\"MARKETING_ADDITIONAL\")\n```", "```py\n    #### Calling Step 1\n    purchase_campaign = combine_campaign_table(\n        purchase_history, campaign_info)\n    #### Calling Step 2\n    purchase_campaign_complain = combine_campaign_table(\n        purchase_campaign, complain_info)\n    #### Calling Step 3\n    final_marketing_data = union_marketing_additional_table(\n        purchase_campaign_complain, marketing_additional)\n```", "```py\n    #### Writing Combined Data To New Table\n    final_marketing_data.write.save_as_table( \\\n        \"FINAL_MARKETING_DATA\")\n    return \"LOADED FINAL MARKETING DATA TABLE\"\n```", "```py\n# Create an instance of StoredProcedure using the sproc() function\nfrom snowflake.snowpark.types import IntegerType,StringType\ndata_prep_sproc = sproc(\n                        func= data_prep,\\\n                        replace=True,\\\n                        return_type = StringType(),\\\n                        stage_location=\"@my_stage\",\\\n                        packages=[\"snowflake-snowpark-python\"]\n                        )\n```", "```py\ndef data_transform(session: Session):\n    #### Loading Required Tables\n    marketing_final = session.table(\"FINAL_MARKETING_DATA\")\n    market_subset = marketing_final.select(\"EDUCATION\", \\\n        \"MARITAL_STATUS\",\"INCOME\")\n    market_pivot = market_subset.pivot(\"EDUCATION\", \\\n        [\"Graduation\",\"PhD\",\"Master\",\"Basic\",\"2n Cycle\"]\n    ).sum(\"INCOME\")\n    #### Writing Transformed Data To New Table\n    market_pivot.write.save_as_table(\"MARKETING_PIVOT\")\n    return \"CREATED MARKETING PIVOT TABLE\"\ndata_transform_sproc = sproc(\n                        func= data_transform,\\\n                        replace=True,\\\n                        return_type = StringType(),\\\n                        stage_location=\"@my_stage\",\\\n                        packages=[\"snowflake-snowpark-python\"]\n                        )\n```", "```py\ndef data_cleanup(session: Session):\n    #### Loading Required Tables\n    market_pivot = session.table(\"MARKETING_PIVOT\")\n    market_drop_null = market_pivot.dropna(thresh=5)\n    #### Writing Cleaned Data To New Table\n    market_drop_null.write.save_as_table(\"MARKET_PIVOT_CLEANED\")\n    return \"CREATED CLEANED TABLE\"\ndata_cleanup_sproc = sproc(\n                        func= data_cleanup,\\\n                        replace=True,\\\n                        return_type = StringType(),\\\n                        stage_location=\"@my_stage\",\\\n                        packages=[\"snowflake-snowpark-python\"]\n                        )\n```", "```py\n#### Calling Data Preparation Stored Procedure\ndata_prep_sproc()\n#### Calling Data Transformation Stored Procedure\ndata_transform_sproc()\n#### Calling Data Cleanup Stored Procedure\ndata_cleanup_sproc()\n```", "```py\nfrom snowflake.core import Root\nfrom snowflake.core.task import StoredProcedureCall\nfrom snowflake.core.task.dagv1 import DAG, DAGTask, DAGOperation\nfrom snowflake.snowpark import Session\nfrom datetime import timedelta\nroot = Root(session)\n```", "```py\ndag = DAG(\"Task_Demo\",\n          warehouse=\"COMPUTE_WH\",\n          schedule=timedelta(days=1),\n          stage_location= \\\n              \"SNOWPARK_DEFINITIVE_GUIDE.MY_SCHEMA.MY_STAGE\",\n          packages=[\"snowflake-snowpark-python\"]\n          )\n```", "```py\nwith dag:\n    data_prep_task = DAGTask(\"Data_Prep\", definition=data_prep)\n    data_transform_task = DAGTask(\"Data_Transform\", \\\n        definition=data_transform)\n    data_cleanup_task = DAGTask(\"Data_Cleanup\", \\\n        definition=data_cleanup)\n    data_prep_task >> data_transform_task >> data_cleanup_task\nDAGTask objects for each task in our pipeline: data_prep, data_transform, and data_cleanup. These tasks are then linked together using the >> operator to specify their execution order.\n```", "```py\nschema = root.databases[\"SNOWPARK_DEFINITIVE_GUIDE\"].schemas[ \\\n    \"MY_SCHEMA\"]\ndag_op = DAGOperation(schema)\ndag_op.deploy(dag,mode=\"orReplace\")\ndag_op.run(dag)\n```", "```py\ncurrent_runs = dag_op.get_current_dag_runs(dag)\nfor r in current_runs:\n    print(f\"RunId={r.run_id} State={r.state}\")\n```", "```py\nsession.sql('''CREATE EVENT TABLE MY_EVENTS;''').show()\n```", "```py\nsession.sql('''ALTER ACCOUNT SET EVENT_TABLE = \\\n    SNOWPARK_DEFINITIVE_GUIDE.MY_SCHEMA.MY_EVENTS;\n''').show()\n```", "```py\nsession.sql('''SELECT *\n    FROM SNOWPARK_DEFINITIVE_GUIDE.MY_SCHEMA.MY_EVENTS;\n''').show()\n```", "```py\nsession.sql('''CREATE STREAM EVENT_APPEND ON EVENT TABLE MY_EVENTS APPEND_ONLY=TRUE;''').show()\n```", "```py\nsession.sql('''alter session set log_level = INFO;''').show()\n```", "```py\nfrom snowflake.snowpark.functions import sproc\nimport logging\ndef data_prep(session: Session):\n    ## Initializing Logger\n    logger = logging.getLogger(\"My_Logger\")\n    logger.info(\"Data Preparation Pipeline Starts\")\n    #### Loading Required Tables\n    logger.info(\"Loading Required Tables\")\n    purchase_history = session.table(\"PURCHASE_HISTORY\")\n    campaign_info = session.table(\"CAMPAIGN_INFO\")\n    complain_info = session.table(\"COMPLAINT_INFO\")\n    marketing_additional = session.table(\"MARKETING_ADDITIONAL\")\n```", "```py\n    #### Calling Step 1\n    purchase_campaign = combine_campaign_table(\n        purchase_history,campaign_info)\n    logger.info(\"Joined Purchase and Campaign Tables\")\n    #### Calling Step 2\n    purchase_campaign_complain = combine_complain_table(\n        purchase_campaign,complain_info)\n    logger.info(\"Joined Complain Table\")\n    #### Calling Step 3\n    final_marketing_data = union_marketing_additional_table(\n        purchase_campaign_complain,marketing_additional)\n    logger.info(\"Final Marketing Data Created\")\n```", "```py\n    #### Writing Combined Data To New Table\n    final_marketing_data.write.save_as_table( \\\n        \"FINAL_MARKETING_DATA\")\n    logger.info(\"Final Marketing Data Table Created\")\n    return \"LOADED FINAL MARKETING DATA TABLE\"\n```", "```py\n## Register Stored Procedure in Snowflake\n### Add packages and data types\nfrom snowflake.snowpark.types import StringType\nsession.add_packages('snowflake-snowpark-python')\n### Upload Stored Procedure to Snowflake\nsession.sproc.register(\n    func = data_prep\n  , return_type = StringType()\n  , input_types = []\n  , is_permanent = True\n  , name = 'DATA_PREP_SPROC_LOG'\n  , replace = True\n  , stage_location = '@MY_STAGE'\n)\n```", "```py\nsession.sql(''' Call DATA_PREP_SPROC_LOG()''').show()\n```", "```py\nsession.sql(\"\"\"\n    SELECT RECORD['severity_text'] AS SEVERITY,\n        VALUE AS MESSAGE\n    FROM MY_EVENTS\n    WHERE SCOPE['name'] = 'My_Logger'\n    AND RECORD_TYPE = 'LOG'\n\"\"\").show()\n```", "```py\ndef data_transform(session: Session):\n    try:\n        ## Initializing Logger\n        logger = logging.getLogger(\"Data_Transform_Logger\")\n        logger.info(\"Data Transformation Pipeline Starts\")\n        ## Pivoting Process\n        marketing_final = session.table(\"FINAL_MARKETING_DATA\")\n        market_subset = marketing_final.select(\"EDUCATION\", \\\n            \"MARITAL_STATUS\",\"INCOME\")\n        market_pivot = market_subset.pivot(\"EDUCATION\", \\\n            [\"Graduation\",\"PhD\",\"Master\",\"Basic\",\"2n Cycle\"]\n        ).sum(\"INCOME\")\n        #### Writing Transformed Data To New Table\n        market_pivot.write.save_as_table(\"MAREKTING_PIVOT\")\n        logger.log(\"MARKETING PIVOT TABLE CREATED\")\n        return \"CREATED MARKETING PIVOT TABLE\"\n    except Exception as err:\n        logger.error(\"Logging an error from Python handler: \")\n        logger.error(err)\n        return \"ERROR\"\n```", "```py\n## Register Stored Procedure in Snowflake\n### Add packages and data types\nfrom snowflake.snowpark.types import StringType\nsession.add_packages('snowflake-snowpark-python')\n### Upload Stored Procedure to Snowflake\nsession.sproc.register(\n    func = data_transform\n  , return_type = StringType()\n  , input_types = []\n  , is_permanent = True\n  , name = 'DATA_TRANSFORM_SPROC_LOG_ERROR'\n  , replace = True   , stage_locations = \"@MY_STAGE\" )\n```", "```py\nsession.sql(''' Call DATA_TRANSFORM_SPROC_LOG_ERROR()''').show()\n```", "```py\nsession.sql(\"\"\"\n    SELECT RECORD['severity_text'] AS SEVERITY,VALUE AS MESSAGE\n    FROM MY_EVENTS\n    WHERE SCOPE['name'] = 'Data_Transform_Logger'\n    AND RECORD_TYPE = 'LOG'\n\"\"\").collect()\n```", "```py\nsession.sql(\"ALTER SESSION SET TRACE_LEVEL = ALWAYS;\").show()\n```", "```py\nfrom snowflake import telemetry\n```", "```py\ndef data_cleanup(session: Session):\n    #### Loading Telemetry Package\n    from snowflake import telemetry\n    #### Loading Required Tables\n    market_pivot = session.table(\"MARKETING_PIVOT\")\n    #### Adding Trace Event\n    telemetry.add_event(\"data_cleanup\", \\\n        {\"table_name\": \"MARKETING_PIVOT\", \\\n         \"count\": market_pivot.count()})\n    #### Dropping Null\n    market_drop_null = market_pivot.dropna(thresh=5)\n    #### Writing Cleaned Data To New Table\n    market_drop_null.write.save_as_table(\"MARKET_PIVOT_CLEANED\")\n    #### Adding Trace Event\n    telemetry.add_event(\"data_cleanup\", \\\n        {\"table_name\": \"MARKET_PIVOT_CLEANED\", \\\n         \"count\": market_drop_null.count()})\n    return \"CREATED CLEANED TABLE\"\n###########################################################\n## Register Stored Procedure in Snowflake\n### Add packages and data types\nfrom snowflake.snowpark.types import StringType\nsession.add_packages('snowflake-snowpark-python', \\\n    'snowflake-telemetry-python')\n### Upload Stored Procedure to Snowflake\nsession.sproc.register(\n    func = data_cleanup\n  , return_type = StringType()\n  , input_types = []\n  , is_permanent = True\n  , name = 'DATA_CLEANUP_SPROC_TRACE'\n  , replace = True\n  , stage_location = '@MY_STAGE'\n)\n```", "```py\nsession.sql(''' Call DATA_CLEANUP_SPROC_TRACE()''').show()\n```", "```py\nsession.sql(\"\"\"\n    SELECT\n        TIMESTAMP as time,\n        RESOURCE_ATTRIBUTES['snow.executable.name']\n            as handler_name,\n        RESOURCE_ATTRIBUTES['snow.executable.type']\n            as handler_type,\n        RECORD['name'] as event_name,\n        RECORD_ATTRIBUTES as attributes\n    FROM\n        MY_EVENTS\n    WHERE\n        EVENT_NAME ='data_cleanup'\n\"\"\").show(2)\n```"]