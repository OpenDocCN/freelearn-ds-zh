["```py\n    USE ROLE ACCOUNTADMIN;\n    CREATE ROLE test_role;\n    ```", "```py\n    CREATE DATABASE IF NOT EXISTS SNOWPARK_DEFINITIVE_GUIDE;\n    GRANT OWNERSHIP ON DATABASE SNOWPARK_DEFINITIVE_GUIDE\n      TO ROLE test_role COPY CURRENT GRANTS;\n    ```", "```py\n    GRANT USAGE ON WAREHOUSE COMPUTE_WH TO ROLE test_role;\n    ```", "```py\n    CREATE SECURITY INTEGRATION IF NOT EXISTS snowservices_ingress_oauth\n      TYPE=oauth\n      OAUTH_CLIENT=snowservices_ingress\n      ENABLED=true;\n    ```", "```py\n    GRANT BIND SERVICE ENDPOINT ON ACCOUNT TO ROLE test_role;\n    ```", "```py\n    CREATE COMPUTE POOL snowpark_cs_compute_pool\n    MIN_NODES = 1\n    MAX_NODES = 1\n    INSTANCE_FAMILY = CPU_X64_XS;\n    GRANT USAGE, MONITOR ON\n      COMPUTE POOL snowpark_cs_compute_pool TO ROLE test_role;\n    ```", "```py\n    GRANT ROLE test_role TO USER <user_name>;\n    ```", "```py\n        USE DATABASE SNOWPARK_DEFINITIVE_GUIDE;\n        ```", "```py\n        CREATE SCHEMA IF NOT EXISTS MY_SCHEMA;\n        ```", "```py\n    CREATE IMAGE REPOSITORY IF NOT EXISTS snowpark_cs_repository;\n    ```", "```py\n    CREATE STAGE IF NOT EXISTS snowpark_cs_stage\n      DIRECTORY = ( ENABLE = true );\n    ```", "```py\n@app.post(\"/filter\")\ndef udf_calling_function():\n    message = request.json\n    logger.debug(f'Received request: {message}')\n    if message is None or not message['data']:\n        logger.info('Received empty message')\n        return {}\n    unique_id = message['data']\n```", "```py\ndef ui():\n    '''\n    Main handler for providing a web UI.\n    '''\n    if request.method == \"POST\":\n        # Getting input in HTML form\n        input_text = request.form.get(\"input\")\n```", "```py\n@app.get(\"/healthcheck\")\ndef readiness_probe():\n    return \"I'm ready!\"\n```", "```py\nARG BASE_IMAGE=python:3.10-slim-buster\nFROM $BASE_IMAGE\nCOPY filter_service.py ./\nCOPY templates/ ./templates/\nRUN pip install --upgrade pip && \\\n    pip install flask && \\\n    pip install snowflake-snowpark-python[pandas]\nCMD [\"python3\", \"filter_service.py\"]\n```", "```py\nCREATE FUNCTION filter_doc_udf (InputText varchar)\n  RETURNS varchar\n  SERVICE=filter_service\n  ENDPOINT=filterendpoint\n  AS '/filter';\n```", "```py\n    SHOW IMAGE REPOSITORIES;\n    ```", "```py\n    .) as the path for building the latest image from the Docker file. The output will be as follows:\n    ```", "```py\n    docker login <registry_hostname> -u <username>\n    ```", "```py\n    docker push <orgname>-<acctname>.registry.snowflakecomputing.com/snowpark_definitive_guide/my_schema/snowpark_cs_repository/my_filter_service_image:latest\n    ```", "```py\nDESCRIBE COMPUTE POOL snowpark_cs_compute_pool;\n```", "```py\nUSE ROLE test_role;\nCREATE SERVICE filter_service\n  IN COMPUTE POOL snowpark_cs_compute_pool\n  FROM SPECIFICATION $$\n    spec:\n      containers:\n      - name: filter\n        image: /snowpark_definitive_guide/my_schema/snowpark_cs_repository/my_filter_service_image:latest\n        env:\n          SERVER_PORT: 8000\n        readinessProbe:\n          port: 8000\n          path: /healthcheck\n      endpoints:\n      - name: filterendpoint\n        port: 8000\n        public: true\n      $$\n  MIN_INSTANCES=1\n  MAX_INSTANCES=1;\n```", "```py\nSELECT SYSTEM$GET_SERVICE_STATUS('filter_service');\n```", "```py\nDESCRIBE SERVICE filter_service;\n```", "```py\nCREATE FUNCTION filter_doc_udf (InputText varchar)\nRETURNS varchar\nSERVICE=filter_service\nENDPOINT=filterendpoint\nAS '/filter';\n```", "```py\nUSE ROLE test_role;\nUSE DATABASE SNOWPARK_DEFINITIVE_GUIDE;\nUSE SCHEMA MY_SCHEMA;\nUSE WAREHOUSE compute_wh;\n```", "```py\nSELECT filter_doc_udf('122880');\n```", "```py\nSHOW ENDPOINTS IN SERVICE filter_service;\n```", "```py\ndef run_job():\n    \"\"\"\n    Main body of this job.\n    \"\"\"\n    logger = get_logger()\n    logger.info(\"Job started\")\n    # Parse input arguments\n    args = get_arg_parser().parse_args()\n    table = args.table\n    column = args.date_column\n```", "```py\nspec:\n  container:\n  - name: main\n    image: /snowpark_definitive_guide/my_schema/snowpark_cs_repository/my_job_image:latest\n    env:\n      SNOWFLAKE_WAREHOUSE: compute_wh\n    args:\n    - \"--table=NEWS_CATEGORY\"\n    - \"--date_column=DATE\"\n```", "```py\n    PUT command, detailed information regarding the uploaded file will be displayed in Snowsight:\n    ```", "```py\nEXECUTE SERVICE IN COMPUTE POOL snowpark_cs_compute_pool\n  FROM @snowpark_cs_stage SPEC='my_job_spec.yaml';\n```", "```py\nEXECUTE JOB SERVICE\n  IN COMPUTE POOL snowpark_cs_compute_pool\n  NAME = test_job\n  FROM @SNOWPARK_CS_STAGE\n  SPECIFICATION_FILE='my_job_spec.yaml';\n```", "```py\nHF_AUTH_TOKEN = \" ************************* \"\nregistry = model_registry.ModelRegistry(session=session, database_name=\"SNOWPARK_DEFINITIVE_GUIDE\", schema_name=\"MY_SCHEMA\", create_if_not_exists=True)\nllama_model = huggingface_pipeline.HuggingFacePipelineModel(task=\"text-generation\", model=\"meta-llama/Llama-2-7b-chat-hf\", token=HF_AUTH_TOKEN, return_full_text=False, max_new_tokens=100)\n```", "```py\nMODEL_NAME = \"LLAMA2_MODEL_7b_CHAT\"\nMODEL_VERSION = \"1\"\nllama_model=registry.log_model(\n    model_name=MODEL_NAME,\n    model_version=MODEL_VERSION,\n    model=llama_model\n)\n```", "```py\nllama_model.deploy(\n  deployment_name=\"llama_predict\",\n  platform=deploy_platforms.TargetPlatform.SNOWPARK_CONTAINER_SERVICES,\n  options={\n            \"compute_pool\": \"snowpark_cs_compute_pool\",\n            \"num_gpus\": 1\n  },\n)\n\"external_access_integrations\": [\"ALLOW_ALL_ACCESS_INTEGRATION\"]\n```", "```py\nres = llama_model_ref.predict( deployment_name=DEPLOYMENT_NAME, data=input_df )\n```", "```py\n{\n  \"category\": \"Art\",\n  \"keywords\": [\n    \"Gertrude\",\n    \"contemporary art\",\n    \"democratization\",\n    \"demystification\"\n  ],\n  \"importance\": 9\n}\n```"]