- en: Chapter 6. Composing Static Maps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the simplest map renderer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the map composer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding labels to a map for printing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a scale bar to the map
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a north arrow to the map
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a logo to the map
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a legend to the map
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a custom shape to the map
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a grid to the map
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a table to the map
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving a map to a PNG image
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a world file to a map image
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving a map to a project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading a map from a project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we'll create maps using PyQGIS, Qt image objects, and QGIS
    Map Composer to create map layouts that can be exported as documents or images.
    The QGIS Map Composer is designed to create static map layouts with decorative
    and reference elements, for printing or inclusion in another document.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the simplest map renderer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to turn a dynamic GIS map into a static map image or document, you
    must create a renderer to **freeze** the map view and create a graphic version
    of it. In this recipe, we'll render a map to a JPEG image and save it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You will need to download the following zipped shapefile and extract it to
    your `qgis_data` directory, to a subdirectory named `hancock`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://geospatialpython.googlecode.com/svn/hancock.zip](https://geospatialpython.googlecode.com/svn/hancock.zip)'
  prefs: []
  type: TYPE_NORMAL
- en: You will also need to open the **Python Console** under the **Plugins** menu
    in QGIS. You can run these lines of code inside the console.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we will load our shapefile, add it to the map, create a blank
    image, set up the map view, render the map image, and save it. To do this, we
    need to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to import the underlying `Qt` libraries required for image handling:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we load the layer and add it to the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we create a blank image to accept the map image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we access the map renderer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we get the IDs of the map layers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we use the newly initialized renderer layers in the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we get the full extent of the map as a rectangle:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we set a scale for the renderer. Smaller numbers produce a larger map
    scale, and larger numbers produce a smaller map scale. We can change the map scale
    to create a buffer around the map image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we set the extent of the renderer to the rectangle:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we set the output size and resolution of the image. The resolution is automatically
    calculated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we can render the map and finalize the image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we save the map image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Verify that you have a map image in your `qgis_data` directory, similar to the
    map displayed in QGIS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: QGIS uses the underlying Qt GUI library to create common image types. We haven't
    used any of the QGIS composer objects to render the image; however, this rendering
    technique is used to save maps created with the QGIS composer.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `QImage` object supports other image formats as well. To save a map image
    to a PNG, replace the last step in the *How to do it…* section with the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Using the map composer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The QGIS Map Composer allows you to combine a map with nonspatial elements that
    help enhance our understanding of the map. In this recipe, we'll create a basic
    map composition. A composition requires you to define the physical paper size
    and output format. Even a simple composition example such as this has over 20
    lines of configuration options.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You will need to download the following zipped shapefile and extract it to
    your `qgis_data` directory, to a subdirectory named `hancock`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://geospatialpython.googlecode.com/svn/hancock.zip](https://geospatialpython.googlecode.com/svn/hancock.zip)'
  prefs: []
  type: TYPE_NORMAL
- en: You will also need to open the **Python Console** under the **Plugins** menu
    in QGIS. You can run this recipe in the console or wrap it in a script for the
    **Script Runner** plugin, using the template provided with the plugin.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, the major steps are to load the shapefile into a map, build
    the map composition, and render it to an image, described as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to import the `Qt` libraries for image handling:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we load the layer and add it to the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we create a blank image to accept the map image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we get the IDs of the map layers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we access the map renderer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We then use the newly initialized renderer layers in the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we get the full extent of the map as a rectangle:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we set the scale for the renderer. Smaller numbers produce a larger map
    scale, and larger numbers produce a smaller map scale to add an image buffer around
    the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we set the map renderer''s extent to the full map''s extent:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we begin using the QGIS composer by creating a new composition and assigning
    it the map renderer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we set the composition style. We will define it as `Print`, which will
    allow us to create both PDF documents and images. The alternative is to define
    it as a postscript, which is often used for direct output to printer devices:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we define our paper size, which is specified in millimeters. In this case,
    we will use the equivalent of an 8.5 x 11 inch sheet of paper, which is the US
    letter size:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we''ll calculate dimensions for the map so that it takes up approximately
    half the page and is centered:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we create the map composer object and set its extent:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we give the map a frame around its border and add it to the page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we ensure that the resolution of the composition is set. The resolution
    defines how much detail the output contains. Lower resolutions contain less detail
    and create smaller files. Higher resolutions provide more image detail but create
    larger files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We now convert the dots-per-inch resolution to dots-per-millimeter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we initialize the image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we render the composition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we save the composition as a JPEG image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify that the output image resembles the following sample image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/00047.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Map compositions are very powerful, but they can also be quite complex. You
    are managing the composition that represents a virtual sheet of paper. On that
    composition, you place objects, such as the map. Then, you must also manage the
    rendering of the composition as an image. All these items are independently configurable,
    which can sometimes lead to unexpected results with the sizing or visibility of
    items.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the upcoming versions of QGIS, the map composer class may be renamed as the
    `print layout` class. You can find out more information about this proposed change
    at [https://github.com/qgis/QGIS-Enhancement-Proposals/pull/9](https://github.com/qgis/QGIS-Enhancement-Proposals/pull/9)
  prefs: []
  type: TYPE_NORMAL
- en: Adding labels to a map for printing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `QgsComposition` object allows you to place arbitrary text anywhere in the
    composition. In this recipe, we'll demonstrate how to add a label to a map composition.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You will need to download the following zipped shapefile and extract it to
    your `qgis_data` directory, to a subdirectory named `hancock`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://geospatialpython.googlecode.com/svn/hancock.zip](https://geospatialpython.googlecode.com/svn/hancock.zip)'
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the shapefile, you will also need the `MapComposer` class. This
    class encapsulates the boilerplate composer code in a reusable way to make adding
    other elements easier. You can download it from [https://geospatialpython.googlecode.com/svn/MapComposer.py](https://geospatialpython.googlecode.com/svn/MapComposer.py).
  prefs: []
  type: TYPE_NORMAL
- en: This file must be accessible from the QGIS Python console by ensuring that it
    is in the Python path directory. Place the file in the `.qgis2/python` directory
    within your home directory.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To add a label to a composition, we''ll first build the map composition, create
    a label, and then save the composition as an image. To do this, we need to perform
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to import the Qt GUI libraries and the `MapComposer` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we create a layer with the shapefile, setting the path to the shapefile
    in order to match your system:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we add this layer to the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we access the map renderer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we create a `MapComposer` object, passing in the map layer registry and
    the map renderer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we create a new label object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can set the label text to any string:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can automatically set the size of the label container to fit the string
    we used:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we add a frame around the label box:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we set the position of the label on the page, which is at the top-left
    corner of the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we add the label the map composition now that it is configured:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we save the composition image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Verify that your output image has a text label in a frame at the top-left corner
    of the map.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this case, we created a very simple label based on defaults. However, labels
    can be customized to change the font, size, color, and style for print-quality
    compositions. Also, note that the *x*,*y* values used to place items in a composition
    start in the upper-left corner of the page. As you move an item down the page,
    the *y* value increases.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a scale bar to the map
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A scale bar is one of the most important elements of a map composition, as it
    defines the scale of the map to determine the ground distance on the map. QGIS
    composer allows you to create several different types of scale bars from a simple
    text scale ratio to a graphical, double scale bar with two measurement systems.
    In this recipe, we'll create a scale bar that measures in kilometres.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You will need to download the following zipped shapefile and extract it to
    your `qgis_data` directory, to a subdirectory named `ms`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://geospatialpython.googlecode.com/svn/mississippi.zip](https://geospatialpython.googlecode.com/svn/mississippi.zip)'
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the shapefile, you will also need the `MapComposer` class. This
    class encapsulates the boilerplate composer code in a reusable way to make adding
    other elements easier. You can download it from [https://geospatialpython.googlecode.com/svn/MapComposer.py](https://geospatialpython.googlecode.com/svn/MapComposer.py).
  prefs: []
  type: TYPE_NORMAL
- en: This file must be accessible from the QGIS Python console; ensure that it is
    in the Python path directory. Place the file in the `.qgis2/python` directory
    within your home directory.
  prefs: []
  type: TYPE_NORMAL
- en: For the scale bar to display correctly, you must ensure that QGIS is set to
    automatically reproject data on the fly. In QGIS, go to the **Settings** menu
    and select **Options**. In the **Options** dialog, select the **CRS** panel. In
    the **Default CRS for new projects** section, check the **Enable 'on the fly'
    reprojection by default** radio button. Click on the **OK** button to confirm
    the setting.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we will generate the map, then we''ll generate the composition, and
    finally we''ll create the scale bar and place it in the lower-right corner of
    the map. To do this, we need to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to import the libraries we''ll need:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we''ll build the map renderer using the shapefile:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we''ll create the `MapComposer` object using the layer registry and map
    renderer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we''ll initialize the scale bar object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we define the scale bar type. The default is a text scale, but we''ll
    create a more traditional box scale bar:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we apply the scale bar to the map and set the scale bar graphic to the
    default size:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We use the scale bar size, map size, and map position to calculate the desired
    position of the scale bar, in the lower-right corner of the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we set the calculated position of the scale bar and add it to the composition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we save the composition to an image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The scale bar will display in kilometres if the map projection is set correctly,
    which is why it is important to have automatic reprojection enabled in the QGIS
    settings. The location of the scale bar within the composition is not important,
    as long as the `composerMap` object is applied to it.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a north arrow to the map
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: North arrows are another common cartographic element found even in ancient maps,
    which show the orientation of the map relative to either true, gird, or magnetic
    north. Sometimes, these symbols can be quite elaborate. However, QGIS provides
    a basic line arrow element that we will use in combination with a map label to
    make a basic north arrow.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You will need to download the following zipped shapefile and extract it to
    your `qgis_data` directory, to a subdirectory named `ms`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://geospatialpython.googlecode.com/svn/Mississippi.zip](https://geospatialpython.googlecode.com/svn/Mississippi.zip)'
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the shapefile, you will also need the `MapComposer` class to
    simplify the code needed to add this one element. If you haven't already used
    it in a previous recipe, you can download it from [https://geospatialpython.googlecode.com/svn/MapComposer.py](https://geospatialpython.googlecode.com/svn/MapComposer.py).
  prefs: []
  type: TYPE_NORMAL
- en: This file must be accessible from the QGIS Python Console; for this, you need
    to ensure that it is in the Python path directory. Place the file in the `.qgis2/python`
    directory within your home directory.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we will create a map composition, draw an arrow to the right
    of the map, and then place a label with a capital letter `N` below the arrow.
    To do this, we need to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we import the `Qt` and `MapComposer` Python libraries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we create the map composition object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we calculate the position of the arrow along the right-hand side of the
    map, set its position, and then add it to the composition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we create a capital letter `N` label and add it to the composition just
    below the arrow:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we save the composition to an image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify that your output image looks similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/00048.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The QGIS composer doesn't have a dedicated north arrow or compass rose object.
    However, it is quite simple to construct one, as demonstrated in the preceding
    section. The arrow is just a graphic. The direction of the arrow is controlled
    by the location of the start point and the end point listed, respectively, when
    you create the `QgsComposerArrow` object.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can extend this example to have an arrow point in multiple compass directions.
    You can also use an image of a more elaborate compass rose added to the composition.
    We'll demonstrate how to add images in the next recipe. Note that the arrow element
    can also be used to point to items on the map with an associated label.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a logo to the map
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An important part of customizing a map is to add your logo or other graphics
    to the composition. In this recipe, we'll add a simple logo to the map.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You will need to download the following zipped shapefile and extract it to
    your `qgis_data` directory, to a subdirectory named `ms`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://geospatialpython.googlecode.com/svn/Mississippi.zip](https://geospatialpython.googlecode.com/svn/Mississippi.zip)'
  prefs: []
  type: TYPE_NORMAL
- en: You will also need a logo image, which you can download from [https://geospatialpython.googlecode.com/svn/trunk/logo.png](https://geospatialpython.googlecode.com/svn/trunk/logo.png).
  prefs: []
  type: TYPE_NORMAL
- en: Place the image in your `qgis_data/rasters` directory.
  prefs: []
  type: TYPE_NORMAL
- en: If you haven't already done so in the previous recipe, download the `MapComposer`
    library from [https://geospatialpython.googlecode.com/svn/MapComposer.py](https://geospatialpython.googlecode.com/svn/MapComposer.py),
    to simplify the creation of the map composition.
  prefs: []
  type: TYPE_NORMAL
- en: Place the file in the `.qgis2/python` directory within your home directory.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we will create the map composition, add the logo image, and
    save the map as an image. To do this, we need to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to import the Qt GUI, core QGIS, QGIS GUI, and MapComposer libraries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we will build a basic map composition using the shapefile:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we initialize the picture object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we set the path of the picture to our image file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We must set the size of the box or scene rectangle such that it is large enough
    to contain the logo. Otherwise, the picture will appear cropped:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we calculate the position of the logo relative to the map image. We''ll
    place the logo near the top-left corner of the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we set the logo''s position and add it to the map composition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we save the composition as an image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe is very straight forward, as the `QgsComposerPicture` is an extremely
    simple object. You can use JPG, PNG, or SVG images. This technique can be used
    to add custom north arrows or other cartographic elements as well.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a legend to the map
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A map legend decodes the symbology used in a thematic GIS map for the reader.
    Legends are tightly integrated into QGIS, and in this recipe, we'll add the default
    legend from the map to the print composition.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Download the shapefile for this map from [https://geospatialpython.googlecode.com/svn/Mississippi.zip](https://geospatialpython.googlecode.com/svn/Mississippi.zip)
    and extract it to your `qgis_data` directory in a subdirectory named `ms`.
  prefs: []
  type: TYPE_NORMAL
- en: As with the previous recipes in this chapter, we will use the `MapComposer`
    library from [https://geospatialpython.googlecode.com/svn/MapComposer.py](https://geospatialpython.googlecode.com/svn/MapComposer.py)
    to simplify the creation of the map composition.
  prefs: []
  type: TYPE_NORMAL
- en: Place the file in the `.qgis2/python` directory within your home directory.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe is as simple as creating the map, adding the automatically generated
    legend, and saving the output to an image. To do this, we need to perform the
    following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will need to load the Qt and QGIS GUI libraries followed by the MapComposer
    library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we will load the shapefile as a layer and create the map composition
    with the `MapComposer` library, passing it the map layer registry and map renderer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we initialize the legend object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We now tell the legend which layer set we want to use:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we set the legend''s position to the left-hand side of the map and add
    it to the composition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we output the composition to the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Adding a legend is quite simple. QGIS will carry over the styling that is autogenerated
    when the layer is loaded or manually set by the user. Of course, you can also
    save layer styling, which is loaded with the layer and used by the legend. However,
    if you're generating a composition in the background such as in a standalone application,
    for example, every aspect of the legend is customizable through the PyQGIS API.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a custom shape to the map
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The QGIS composer has an object for drawing and styling nonspatial shapes, including
    rectangles, ellipses, and triangles. In this recipe, we'll add some rectangles
    filled with different colors, which will resemble a simple bar chart, as an example
    of using shapes.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Download the zipped shapefile for this map from [https://geospatialpython.googlecode.com/svn/Mississippi.zip](https://geospatialpython.googlecode.com/svn/Mississippi.zip)
    and extract it to your `qgis_data` directory, to in a subdirectory named `ms`.
  prefs: []
  type: TYPE_NORMAL
- en: We will also use the `MapComposer` library from [https://geospatialpython.googlecode.com/svn/MapComposer.py](https://geospatialpython.googlecode.com/svn/MapComposer.py)
    to simplify the creation of the map composition.
  prefs: []
  type: TYPE_NORMAL
- en: Place the file in the `.qgis2/python` directory within your home directory.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we will create a simple map composition with the shapefile. Then, we
    will define the style properties for our rectangles. Next, we will draw the rectangles,
    apply the symbols, and render the composition. To do this, we need to perform
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we must import the PyQGIS and Qt GUI libraries as well as the MapComposer
    library, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we create the map composition by using the shapefile:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we create three basic fill symbols by building Python dictionaries with
    color properties and initialize the symbols with these dictionaries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we calculate the y position of the first shape, relative to the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We create the first shape and set it to the type 1, which is a rectangle:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we tell the shape to use a symbol, set the symbol for one of our three
    fill symbols, and add the shape to the composition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We repeat the process with two other shapes, changing their position, size,
    and symbols to make them look different:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we output the composition as an image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify that your output image looks similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/00049.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This simple graphical output is nearly 40 lines of code. While there may be
    some limited uses for dealing with these shapes, in most cases, the simpler route
    will be to just import images. However, it provides a good foundation for a richer
    graphics API, as QGIS continues to evolve.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you are using fill symbols within a Python plugin in a QGIS version less
    than 2.6, you must ensure that the symbols are defined in the global scope, or
    QGIS will crash due to a bug. The easiest way to include the variables in the
    global scope is to define them immediately after the import statements. It also
    affects scripts that are run in the Script Runner plugin. This bug was fixed in
    version 2.6 and subsequent versions.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a grid to the map
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An annotated reference grid is useful for map products used to locate features.
    This recipe teaches you how to add both reference lines on a map and annotations
    for the lines around the edges of the map.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will need a shapefile for this map from [https://geospatialpython.googlecode.com/svn/Mississippi.zip](https://geospatialpython.googlecode.com/svn/Mississippi.zip),
    and you need to extract it to your `qgis_data` directory, to a subdirectory named
    `ms`.
  prefs: []
  type: TYPE_NORMAL
- en: As with the previous recipes in this chapter, we will use the `MapComposer`
    library from [https://geospatialpython.googlecode.com/svn/MapComposer.py](https://geospatialpython.googlecode.com/svn/MapComposer.py)
    to simplify the creation of the map composition.
  prefs: []
  type: TYPE_NORMAL
- en: Place the file in the `.qgis2/python` directory within your home directory.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, the general steps are to create the map composition, establish
    the overall grid parameters, define the grid line placement, and then style the
    grid and annotations. To do this, we need to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to import all the GUI libraries and the MapComposer library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we create the map composition using the shapefile:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we are going to create some variables to shorten some unusually long method
    and object names:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we enable the grid, set the line spacing, and use solid lines for the
    grid:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we enable the annotation numbers for coordinates and set the decimal
    precision to 0 for whole numbers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we go around the map composition frame and define locations and directions
    for each set of grid lines, using our shorter variable names from the previous
    steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we set some additional styling for the grid lines and annotations
    before adding the whole map to the overall composition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We output the composition to an image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify that your output image looks similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/00050.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe has a lot of steps because the grids are customizable. The order
    of operations is important as well. Notice that we do not add the map to the composition
    until the very end. Often, you will make what seem to be minor changes and the
    grid may not render. Hence, modify this recipe carefully.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a table to the map
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: QGIS composer provides an object to add a table to a composition, representing
    either the attributes of a vector layer or an arbitrary text table you create.
    In this recipe, we'll add a table to the composition with the attributes of our
    map layer shapefile.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Download the shapefile for this map from [https://geospatialpython.googlecode.com/svn/Mississippi.zip](https://geospatialpython.googlecode.com/svn/Mississippi.zip)
    and extract it to your `qgis_data` directory, to a subdirectory named `ms`.
  prefs: []
  type: TYPE_NORMAL
- en: As with the previous recipes in this chapter, we will use the `MapComposer`
    library from [https://geospatialpython.googlecode.com/svn/MapComposer.py](https://geospatialpython.googlecode.com/svn/MapComposer.py)
    to simplify the creation of the map composition.
  prefs: []
  type: TYPE_NORMAL
- en: Place the file in the `.qgis2/python` directory within your home directory.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps will create a map composition, add the table, and output
    the composition to an image:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we import our GUI libraries and the MapComposer library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we create the map composition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we can initialize the table object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we reference the related map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we can specify the layer whose attributes we want to display in the table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we can position the table below the map and add it to the composition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we output the composition to an image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The table object is very straight forward. Using the attributes of a vector
    layer is automatic. You can also build the table cell by cell if you want to display
    customized information.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a world file to a map image
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Exporting a map as an image removes all of its spatial information. However,
    you can create an external text file called a **world file**, which provides the
    georeferencing information for the raster image, so that it can be used by GIS
    software, including QGIS, as a raster layer. In this recipe, we'll export a map
    composition as an image and create a world file with it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will need to download the zipped shapefile from [https://geospatialpython.googlecode.com/svn/Mississippi.zip](https://geospatialpython.googlecode.com/svn/Mississippi.zip)
    and extract it to your `qgis_data` directory, to a subdirectory named `ms`.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the shapefile, you will also need the `MapComposer` class to
    simplify the code needed to add this one element. If you have not already used
    it in a previous recipe, you can download it from [https://geospatialpython.googlecode.com/svn/MapComposer.py](https://geospatialpython.googlecode.com/svn/MapComposer.py).
  prefs: []
  type: TYPE_NORMAL
- en: This file must be accessible from the QGIS Python console; for this, you need
    to ensure that it is in the python path directory. Place the file in the `.qgis2/python`
    directory within your home directory.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we''ll create the map composition, then we''ll save it as an image,
    and finally we''ll generate the world file. To do this, we need to perform the
    following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to import the GUI and MapComposer libraries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we''ll create the map''s composition using the MapComposer libraries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we''ll define the name of our output file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we can export the composition as an image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we''ll create an object that contains the world file''s information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we''ll open a text file and write each line of the text file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The world file contains the ground distance per pixel and the upper-left coordinate
    of the map image. The QGIS composer automatically generates this information based
    on the referenced map. The world file's name must be the same as the image with
    an extension that uses the first and last letter of the image file extension plus
    the letter `w`. For example, a `.TIFF` image file will have a world file with
    the extension `.TFW`. You can learn more about what the world file variables in
    each line mean at [http://en.wikipedia.org/wiki/World_file](http://en.wikipedia.org/wiki/World_file).
  prefs: []
  type: TYPE_NORMAL
- en: Saving a map to a project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Saving a project automatically can be useful for autosave features or as part
    of a process to autogenerate projects from dynamically updated data. In this recipe,
    we'll save a QGIS project to a `.qgs` project file.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You will need to download the following zipped shapefile and extract it to
    your `qgis_data` directory, to a subdirectory named `ms`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://geospatialpython.googlecode.com/svn/Mississippi.zip](https://geospatialpython.googlecode.com/svn/Mississippi.zip)'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will create a simple QGIS project by loading a shapefile layer, then we''ll
    access the project object, and save the map project to a file, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need the Qt core library in the QGIS Python console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we load the shapefile and add it to the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we create a `file` object to save our project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we can access the QGIS project object instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we can save the project by writing it to the file object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: QGIS simply creates and XML document with all the project settings and GIS map
    settings. You can read and even modify the XML output by hand.
  prefs: []
  type: TYPE_NORMAL
- en: Loading a map from a project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe demonstrates how to load a project from a `.qgs` XML file. Loading
    a project will set up the map and project settings for a previously saved project
    within QGIS.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will need to complete the previous recipe, *Saving a map to a project*,
    so that you have a project named `myProject.qgs` in your `qgis_data` folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this recipe, you need to set up a file object, set a resource path, and
    then read the file object that references the project file. To do this, you need
    to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we import the core `Qt` library for the file object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we initiate the file object with the path to the project file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we access the project object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we set the resource path for QGIS to find data and other files, in case
    the project was saved with relative paths instead of absolute paths:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we tell the project object to read the project file in order to load
    the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: QGIS has a setting to save references to data and other files either as relative
    paths, which are relative to the project file, or absolute paths, which contain
    the full path. If the saved paths are absolute, PyQGIS will be unable to locate
    data sources. Setting the read path to the full system path of the project file
    ensures that QGIS can find all the referenced files in the project file, if they
    are saved as relative paths.
  prefs: []
  type: TYPE_NORMAL
