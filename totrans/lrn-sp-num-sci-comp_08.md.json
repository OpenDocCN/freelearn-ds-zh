["```py\nSUBROUTINE PRIMEFACTORS(num, factors, f)\n  IMPLICIT NONE\n  INTEGER, INTENT(IN) :: num  !input number\n  INTEGER,INTENT(OUT), DIMENSION((num/2))::factors \n  INTEGER, INTENT(INOUT) :: f\n  INTEGER :: i, n\n  i = 2  \n  f = 1  \n  n = num\n  DO\n    IF (MOD(n,i) == 0) THEN \n      factors(f) = i\n      f = f+1\n      n = n/i\n    ELSE\n      i = i+1\n    END IF\n    IF (n == 1) THEN    \n      f = f-1    \n      EXIT\n    END IF\n  END DO\n```", "```py\n% f2py –c primefactors.f90 –m primefactors\n\n```", "```py\n>>> import primefactors\n>>> primefactors.primefactors(6,1)\n\n```", "```py\narray([2, 3, 0], dtype=int32)\n\n```", "```py\ninline(code, arg_names, local_dict=None, global_dict=None,\n           force = 0,\n           compiler='',\n           verbose = 0,\nsupport_code = None,\n           customize=None,\ntype_factories = None,\nauto_downcast=1,\n           **kw)\n```", "```py\n>>> import scipy.weave\n>>> name = 'Francisco'\n>>> pin = 1234\n>>> code = 'std::cout << name << \"---PIN: \" '\n>>> code+= '<<std::hex << pin <<std::endl;'\n>>> arg_names = ['name','pin']\n>>> scipy.weave.inline(code, arg_names)\n\n```", "```py\nFrancisco---PIN: 4d2\n\n```", "```py\n    % ./configure --enable-R-static-lib --enable-static --with-readline=no\n\n    ```", "```py\n    % cd src/nmath/standalone\n    % make\n\n    ```", "```py\n    >>> import scipy.weave \n    >>> support_code= 'extern \"C\" double pbinom(double x,\\ \n     double n, double p, int lower_tail, int log_p);' \n    >>> libpath='/opt/Rlib' #IS THE LOCATION OF LIBRARY libRmath.so\n    >>> library_dirs=[libpath] \n    >>> libraries=['Rmath'] \n    >>> runtime_library_dirs=[libpath] \n    >>> code='return_val=pbinom(100,20000,100./20000.,0,1);' \n    >>> res=scipy.weave.inline(code, support_code=support_code, \\ \n     library_dirs=library_dirs, libraries=libraries, \\ \n     runtime_library_dirs=runtime_library_dirs) \n    >>> print(res) \n\n    ```", "```py\n    -0.747734910363 \n\n    ```", "```py\n    >>> headers = ['<math.h>']\n\n    ```", "```py\noctave:1> x=rand(1,10);\noctave:2> y=rand(size(x));\noctave:3> T=delaunay(x,y);\noctave:4> save -v7 data x y T\n\n```", "```py\n>>> from scipy.io import loadmat\n>>> datadict = loadmat(\"data\")\n\n```", "```py\n>>> datadict.keys()\n\n```", "```py\n['__header__', '__globals__', 'T', 'y', 'x', '__version__']\n\n```", "```py\n>>> datadict['x']\n\n```", "```py\narray([[0.81222999,0.51836246,0.60425982,0.23660352,0.01305779,\n 0.0875166,0.77873049,0.70505801,0.51406693,0.65760987]])\n\n```", "```py\n>>> datadict['__header__']\n\n```", "```py\n'MATLAB 5.0 MAT-file, written by Octave 3.2.4, 2012-11-27\n 15:45:20 UTC'\n\n```", "```py\nsavemat(file_name, mdict, appendmat=True, format='5', \nlong_field_names=False, do_compression=False,\noned_as=None)\n```"]