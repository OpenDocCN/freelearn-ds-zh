["```py\ncolor_constructor <- function(color) {\n    class(color) <- \"S3Color\"\n    return(color)\n}\n\nrectangle_constructor <- function(a, b, color) {\n    rectangle <- list(a = a, b = b, color = color_constructor(color))\n    class(rectangle) <- \"S3Rectangle\"\n    return(rectangle)\n}\n```", "```py\nS3_rectangle <- rectangle_constructor(2, 3, \"blue\")\nclass(S3_rectangle)\n#> [1] \"S3Rectangle\"\n\nstr(S3_rectangle)\n#> List of 3\n#> $ a : num 2\n#> $ b : num 3\n#> $ color:Class 'S3Color' chr \"blue\"\n#> - attr(*, \"class\")= chr \"S3Rectangle\"\n```", "```py\nS3area.S3Rectangle <- function(rectangle) {\n    return(rectangle$a * rectangle$b)\n}\n```", "```py\nS3area(S3_rectangle)\n#> Error in S3area(S3_rectangle): could not find function \"S3area\"\n```", "```py\nS3area <- function(object) {\n    UseMethod(\"S3area\")\n}\n```", "```py\nS3area(S3_rectangle)\n#> [1] 6\n```", "```py\nS3color.S3Rectangle <- function(rectangle) {\n    return(rectangle$color)\n}\nS3color <- function(object) {\n    UseMethod(\"S3color\")\n}\n```", "```py\nprint(S3_rectangle)\n#> $a\n#> [1] 2\n#>\n#> $b\n#> [1] 3\n#>\n#> $color\n#> [1] \"blue\"\n#> attr(,\"class\")\n#> [1] \"S3Color\"\n#>\n#> attr(,\"class\")\n#> [1] \"S3Rectangle\"\n```", "```py\nprint.S3Rectangle <- function(rectangle) {\n    print(paste(\n        S3color(rectangle), \"rectangle:\",\n        rectangle$a, \"x\", rectangle$b, \"==\", S3area(rectangle)\n    ))\n}\n```", "```py\nprint(S3_rectangle)\n#> [1] \"blue rectangle: 2 x 3 == 6\"\n```", "```py\nprint(S3_rectangle$a)\n#> [1] 2\n\nS3_rectangle$a <- 1\n\nprint(S3_rectangle$a) #> [1] 1\n```", "```py\nset_color.S3Rectangle <- function(rectangle, new_color) {\n    rectangle$color <- new_color\n    return(rectangle)\n}\n\nset_color <- function(object, new_color) {\n    UseMethod(\"set_color\")\n}\n```", "```py\nprint(S3color(S3_rectangle))\n#> [1] \"blue\"\n#> attr(,\"class\")\n#> [1] \"S3Color\"\n\nset_color(S3_rectangle, \"black\")\n#> [1] \"black rectangle: 1 x 3 == 3\"\n\nprint(S3color(S3_rectangle))\n#> [1] \"blue\"\n#> attr(,\"class\")\n#> [1] \"S3Color\"\n```", "```py\nsquare_constructor <- function(a, color) {\n    square <- rectangle_constructor(a, a, color)\n    class(square) <- c(\"S3Square\", class(square))\n    return(square)\n}\n```", "```py\nS3_square <- square_constructor(4, \"red\")\n\nclass(S3_square)\n#> [1] \"S3Square\" \"S3Rectangle\"\n\nprint(S3_square)\n#> [1] \"red rectangle: 4 x 4 == 16\"\n```", "```py\nprint.S3Square <- function(square) {\n    print(paste(\n        S3color(square), \"square:\",\n        square$a, \"x\", square$b, \"==\", S3area(square)\n    ))\n}\n```", "```py\nprint(S3_square)\n#> [1] \"red square: 4 x 4 == 16\"\n```", "```py\nlibrary(methods)\n\nsetClass(\n    Class = \"S4Color\",\n    representation = representation(\n        color = \"character\"\n    )\n)\n\nsetClass(\n    Class = \"S4Rectangle\",\n    representation = representation(\n        a = \"numeric\",\n        b = \"numeric\",\n        color = \"S4Color\"\n     )\n)\n```", "```py\nS4_rectangle <- new(\n    \"S4Rectangle\",\n    a = 2,\n    b = 3,\n    color = new(\"S4Color\", color = \"blue\")\n)\n\nclass(S4_rectangle)\n#> [1] \"S4Rectangle\"\n#> attr(,\"package\")\n#> [1] \".GlobalEnv\"\n\nstr(S4_rectangle)\n#> Formal class 'S4Rectangle' [package \".GlobalEnv\"] with 3 slots\n#> ..@ a : num 2\n#> ..@ b : num 3\n#> ..@ color:Formal class 'S4Color' [package \".GlobalEnv\"] with 1 slot\n#> .. .. ..@ color: chr \"blue\"\n```", "```py\nsetGeneric(\"S4area\", function(self) {\n    standardGeneric(\"S4area\")\n})\n#> [1] \"S4area\"\n\nsetMethod(\"S4area\", \"S4Rectangle\", function(self) {\n    return(self@a * self@b)\n})\n#> [1] \"S4area\"\n\nS4area(S4_rectangle)\n#> [1] 6\n\nsetGeneric(\"S4color\", function(self) {\n    standardGeneric(\"S4color\")\n})\n#> [1] \"S4color\"\n\nsetMethod(\"S4color\", \"S4Rectangle\", function(self) {\n    return(self@color@color)\n})\n#> [1] \"S4color\"\n```", "```py\nprint(S4_rectangle)\n#> An object of class \"S4Rectangle\"\n#> Slot \"a\":\n#> [1] 2\n#>\n#> Slot \"b\":\n#> [1] 3\n#>\n#> Slot \"color\":\n#> An object of class \"S4Color\"\n#> Slot \"color\":\n#> [1] \"blue\"\n```", "```py\nsetGeneric(\"S4print\", function(self) {\n    standardGeneric(\"S4print\")\n})\n#> [1] \"S4print\"\n\nsetMethod(\"S4print\", \"S4Rectangle\", function(self) {\n    print(paste(\n        S4color(self), \"rectangle:\",\n        self@a, \"x\", self@b, \"==\", S4area(self)\n    ))\n})\n#> [1] \"S4print\"\n```", "```py\nS4print(S4_rectangle)\n#> [1] \"blue rectangle: 2 x 3 == 6\"\n```", "```py\nprint(S4_rectangle@a)\n#> [1] 2\n\nS4_rectangle@a <- 1\n\nprint(S4_rectangle@a)\n#> [1] 1 \nprint(S4color(S4_rectangle))\n#> [1] \"blue\"\n\nS4color(S4_rectangle) <- \"black\"\n#> Error in S4color(S4_rectangle) <- \"black\": \n       could not find function \"S4color<-\"\n\nprint(S4color(S4_rectangle))\n#> [1] \"blue\"\n```", "```py\nsetGeneric(\"S4color<-\", function(self, value) {\n    standardGeneric(\"S4color<-\")\n})\n#> [1] \"S4color<-\"\n\nsetReplaceMethod(\"S4color\", \"S4Rectangle\", function(self, value) {\n    self@color <- new(\"S4Color\", color = value)\n    return(self)\n})\n#> [1] \"S4color<-\"\n```", "```py\nprint(S4color(S4_rectangle))\n#> [1] \"blue\"\n\nS4color(S4_rectangle) <- \"black\"\n\nprint(S4color(S4_rectangle))\n#> [1] \"black\"\n```", "```py\nsetClass(\"S4Square\", contains = \"S4Rectangle\")\n```", "```py\nS4_square <- new (\"S4Square\", \n                  a = 4, b = 4, \n                  color = new(\"S4Color\", color = \"red\"))\n\nclass(S4_square)\n#> [1] \"S4Square\"\n#> attr(,\"package\")\n#> [1] \".GlobalEnv\"\n\nS4print(S4_square)\n#> [1] \"red rectangle: 4 x 4 == 16\"\n```", "```py\nsetMethod(\"S4print\", \"S4Square\", function(self) {\n    print(paste(\n        S4color(self), \"square:\",\n        self@a, \"x\", self@b, \"==\", S4area(self)\n    ))\n})\n#> [1] \"S4print\" \nS4print(S4_square)\n#> [1] \"red square: 4 x 4 == 16\"\n```", "```py\nlibrary(R6)\nR6Rectangle <- R6Class(\n    \"R6Rectangle\",\n    public = list(\n        initialize = function(a, b, color) {\n            private$a <- a\n            private$b <- b\n            private$own_color <- color\n        },\n        area = function() {\n            private$a * private$b\n        },\n        color = function() {\n            private$own_color\n        },\n        set_color = function(new_color) {\n            private$own_color <- new_color\n        },\n        own_print = function() {\n            print(paste(\n                self$color(), \"rectangle:\",\n                private$a, \"x\", private$b, \" == \", self$area()\n            ))\n        }\n    ),\n    private = list(\n        a = NULL,\n        b = NULL,\n        own_color = NULL\n    )\n)\n```", "```py\nR6_rectangle <- R6Rectangle$new(2, 3, \"blue\")\n\nclass(R6_rectangle)\n#> [1] \"R6Rectangle\" \"R6\"\n\nprint(R6_rectangle)\n#> <R6Rectangle>\n#> Public:\n#>     area: function ()\n#>     clone: function (deep = FALSE)\n#>     color: function ()\n#>     initialize: function (a, b, color)\n#>     own_print: function ()\n#>     set_color: function (new_color)\n#> Private:\n#>     a: 2\n#>     b: 3\n#>     own_color: blue \n```", "```py\nR6_rectangle$own_print()\n#> [1] \"blue rectangle: 2 x 3 == 6\"\n\nR6_rectangle$area()\n#> [1] 6\n\nR6_rectangle$color()\n#> [1] \"blue\"\n```", "```py\nR6_rectangle$a\n#> NULL\n\nR6_rectangle$own_print()\n#> [1] \"blue rectangle: 2 x 3 == 6\"\n\nR6_rectangle$a <- 1\n#> Error in R6_rectangle$a <- 1: \n       cannot add bindings to a locked environment\n\nR6_rectangle$own_print()\n#> [1] \"blue rectangle: 2 x 3 == 6\"\n\nR6_rectangle$set_color(\"black\")\n\nR6_rectangle$own_print()\n#> [1] \"black rectangle: 2 x 3 == 6\"\n```", "```py\nR6Square <- R6Class(\n    \"R6Square\",\n    inherit = R6Rectangle,\n    public = list(\n        initialize = function(a, color) {\n            super$initialize(a, a, color)\n        },\n        print = function() {\n            print(paste(\n                self$color(), \"square:\",\n                private$a, \"x\", private$b, \" == \", self$area()\n            ))\n        }\n    )\n)\n```", "```py\nR6_square <- R6Square$new(4, \"red\")\n\nclass(R6_square)\n#> [1] \"R6Square\" \"R6Rectangle\" \"R6\"\n\nprint(R6_square)\n#> [1] \"red square: 4 x 4 == 16\"\n```", "```py\nR6Rectangle <- R6Class(\n    \"R6Rectangle\",\n    public = list(\n        ...\n    ),\n    private = list(\n        ...\n    ),\n    active = list(\n        color = function(new_color) {\n            if (missing(new_color)) {\n                return(private$own_color)\n            } else {\n                private$own_color <- new_color\n            }\n        }\n    )\n)\n\nR6_rectangle <- R6Rectangle$new(2, 3, \"blue\")\n\nR6_rectangle$color\n#> [1] \"blue\"\n\nR6_rectangle$color <- \"black\"\n\nR6_rectangle$color\n#> [1] \"black\"\n```", "```py\nA <- R6Class(\"A\", public = list(\n    finalize = function() {\n        print(\"Finalizer called.\")\n    }\n))\n```", "```py\ncryptocurrencies/\n    assets/\n        analysis-asset.R\n        asset.R\n        exchanges/\n            exchange.R\n            market.R\n            requesters/\n                coinmarketcap-requester.R\n                exchange-requester-factory.R\n                exchange-requester.R\n        wallets/\n            requesters/\n                btc-requester.R\n                ltc-requester.R\n                wallet-requester-factory.R\n                wallet-requester.R\n            wallet.R\n    batch/\n        create-user-data.R\n        update-assets.R\n        update-markets.R\n    settings.R\n    storage/\n        csv-files.R\n        database-factory.R\n        database.R\n        storage.R\n    users/\n        admin.R\n        user.R\n    utilities/\n        requester.R\n        time-stamp.R\n```", "```py\nlibrary(lubridate)\ntimestamp_constructor <- function(timestamp = now.TimeStamp()) {\n    class(timestamp) <- \"TimeStamp\"\n    if (valid(timestamp)) { return(timestamp) }\n    stop(\"Invalid timestamp (format should be: 'YYYY-MM-DD-HH-mm')\")\n}\n```", "```py\nvalid.TimeStamp <- function(timestamp) {\n    if (gsub(\"-\", \"\", gsub(\"[[:digit:]]\", \"\", timestamp)) != \"\") {\n        return(FALSE)\n    }\n    if (length(strsplit(timestamp, \"-\")[[1]]) != 5) {\n        return(FALSE)\n    }\n    if (is.na(strptime(timestamp, \"%Y-%m-%d-%H-%M\"))) {\n        return(FALSE)\n    }\n    return(TRUE)\n}\n\nvalid <- function (object) {\n    UseMethod(\"valid\", object)\n}\n```", "```py\nnow.TimeStamp <- function() {\n    timestamp <- format(Sys.time(), \"%Y-%m-%d-%H-%M\")\n    class(timestamp) <- \"TimeStamp\"\n    return(timestamp)\n}\n```", "```py\ntime_to_timestamp.TimeStamp <- function(time) {\n    timestamp <- format(time, \"%Y-%m-%d-%H-%M\")\n    class(timestamp) <- \"TimeStamp\"\n    return(timestamp)\n}\n\ntimestamp_to_time.TimeStamp <- function(timestamp) {\n    return(strptime(timestamp, \"%Y-%m-%d-%H-%M\"))\n}\n```", "```py\nsubtract.TimeStamp <- function(timestamp, interval) {\n    time <- timestamp_to_time.TimeStamp(timestamp)\n    if (interval == \"1h\") {\n        time <- time - hours(1)\n    } else if (interval == \"1d\") {\n        time <- time - days(1)\n    } else if (interval == \"1w\") {\n        time <- time - weeks(1)\n    } else if (interval == \"1m\") {\n        time <- time - months(1)\n    } else if (interval == \"1y\") {\n        time <- time - years(1)\n    } else {\n        stop(\"Unknown interval\")\n   }\n   timestamp <- time_to_timestamp.TimeStamp(time)\n   return(timestamp)\n}\n\nsubtract <- function (object, interval) {\n    UseMethod(\"subtract\", object)\n}\n```", "```py\none_year_ago.TimeStamp <- function() {\n    return(subtract(now.TimeStamp(), \"1y\"))\n}\n```", "```py\nsetClass(\n    Class = \"Asset\",\n    representation = representation(\n        email = \"character\",\n        timestamp = \"character\",\n        name = \"character\",\n        symbol = \"character\",\n        total = \"numeric\",\n        address = \"character\"\n     )\n)\n```", "```py\nsetGeneric(\"email<-\", function(self, value) standardGeneric(\"email<-\"))\nsetReplaceMethod(\"email\", \"Asset\", function(self, value) {\n    self@email <- value\n    return(self)\n})\n\nsetGeneric(\"timestamp<-\", function(self, value) standardGeneric(\"timestamp<-\"))\nsetReplaceMethod(\"timestamp\", \"Asset\", function(self, value) {\n    self@timestamp <- value\n    return(self)\n})\n```", "```py\nsetGeneric(\"dataS4\", function(self) standardGeneric(\"dataS4\"))\nsetMethod(\"dataS4\", \"Asset\", function(self) {\n    return(list(\n        email = self@email,\n        timestamp = self@timestamp,\n        name = self@name,\n        symbol = self@symbol,\n        total = self@total,\n        address = self@address\n     ))\n})\n```", "```py\nDatabase <- R6Class(\n    \"Database\",\n    public = list(\n        set_table_names = function(table_names) {\n            private$table_names <- table_names\n        },\n        get_table_names = function() {\n            return(private$table_names)\n        },\n        read_exchanges = function() list(),\n        read_users = function(storage) list(),\n        read_wallets = function(email) list(),\n        read_all_wallets = function() list(),\n        read_analysis_assets = function(email) list(),\n        write_user = function(user) {},\n        write_wallet = function(wallet) {},\n        write_assets = function(assets) {},\n        write_markets = function(markets) {}\n    ),\n    private = list(table_names = list())\n)\n```", "```py\nsource(\"../assets/exchanges/exchange.R\", chdir = TRUE)\nsource(\"../users/user.R\", chdir = TRUE)\nsource(\"./database.R\")\nDIR <- \"./csv-files/\"\n\nCSVFiles <- R6Class(\n    \"CSVFiles\",\n    inherit = Database,\n    public = list(\n        initialize = function(table_names) {\n            super$set_table_names(table_names)\n            initialize_csv_files(table_names)\n        },\n        read_exchanges = function() {\n            return(list(Exchange$new(\"CoinMarketCap\")))\n        },\n        read_users = function(storage) {\n            data <- private$read_csv(\"users\")\n            return(lapply(data$email, user_constructor, storage))\n        },\n        read_wallets = function(email) {\n            data <- private$read_csv(\"wallets\")\n            wallets <- NULL\n            if (nrow(data) >= 1) {\n                for (i in 1:nrow(data)) {\n                    if (data[i, \"email\"] == email) {\n                        wallets <- c(wallets, list(Wallet$new(\n                            data[i, \"email\"],                 \n                            data[i, \"symbol\"],\n                            data[i, \"address\"], \n                            data[i, \"note\"])\n                        ))\n                    }\n                }\n            } else { wallets <- list() }\n            return(wallets)\n        },\n        read_all_wallets = function() {\n            data <- private$read_csv(\"wallets\")\n            wallets <- NULL\n            if (nrow(data) >= 1) {\n                for (i in 1:nrow(data)) {\n                    wallets <- c(wallets, list(Wallet$new(\n                        data[i, \"email\"], \n                        data[i, \"symbol\"],\n                        data[i, \"address\"], \n                        data[i, \"note\"])\n                    ))\n                }\n            } else { wallets <- list() }\n            return(wallets)\n        },\n        write_user = function(user) {\n            data <- private$read_csv(\"users\")\n            new_row <- as.data.frame(dataS3(user))\n            print(new_row)\n            if (private$user_does_not_exist(user, data)) {\n                data <- rbind(data, new_row)\n            }\n            private$write_csv(\"users\", data)\n        },\n        write_wallets = function(wallets) {\n            data <- private$read_csv(\"wallets\")\n            for (wallet in wallets) {\n                new_row <- as.data.frame(wallet$data())\n                print(new_row)\n                if (private$wallet_does_not_exist(wallet, data)) {\n                    data <- rbind(data, new_row)\n                }\n            }\n            private$write_csv(\"wallets\", data)\n        },\n        write_assets = function(assets) {\n            data <- private$read_csv(\"assets\")\n            for (asset in assets) {\n                new_row <- as.data.frame(dataS4(asset))\n                print(new_row)\n                data <- rbind(data, new_row)\n            }\n            private$write_csv(\"assets\", data)\n        },\n        write_markets = function(markets) {\n            data <- private$read_csv(\"markets\")\n            for (market in markets) {\n                new_row <- as.data.frame(market$data())\n                print(new_row)\n                data <- rbind(data, new_row)\n            }\n            private$write_csv(\"markets\", data)\n        }\n    ),\n    private = list(\n        read_csv = function(table_name) {\n            return(read.csv (\n                       private$file(table_name), \n                       stringsAsFactors = FALSE))\n        },\n        write_csv = function(table_name, data) {\n            write.csv(data, \n                      file = private$file(table_name), \n                      row.names = FALSE)\n        },\n        file = function(table_name) {\n            return(paste(\n                DIR, super$get_table_names()[[table_name]], \n                \".csv\", sep = \"\"))\n        },\n        user_does_not_exist = function(user, data) {\n            if (dataS3(user)[[\"email\"]] %in% data$email) {\n                return(FALSE)\n            }\n            return(TRUE)\n        },\n        wallet_does_not_exist = function(wallet, data) {\n            current_addresses <- data[\n                data$email == wallet$get_email() &\n                data$symbol == wallet$get_symbol(),\n                \"address\"\n            ]\n            if (wallet$get_address() %in% current_addresses) {\n                return(FALSE)\n            }\n            return(TRUE)\n        }\n    )\n)\n```", "```py\ninitialize_csv_files <- function(table_names) {\n    dir.create(DIR, showWarnings = FALSE)\n    for (table in table_names) {\n        filename <- paste(DIR, table, \".csv\", sep = \"\")\n        if (!file.exists(filename)) {\n            data <- empty_dataframe(table)\n            write.csv(data, file = filename, row.names = FALSE)\n         }\n    }\n}\n```", "```py\nempty_dataframe <- function(table) {\n    if (grepl(\"assets\", table)) {\n        return(empty_assets())\n    } else if (grepl(\"markets\", table)) {\n        return(empty_markets())\n    } else if (grepl(\"users\", table)) {\n        return(empty_users())\n    } else if (grepl(\"wallets\", table)) {\n        return(empty_wallets())\n    } else {\n        stop(\"Unknown table name\")\n    }\n}\n```", "```py\nempty_assets <- function() {\n    return(data.frame(\n        email = character(),\n        timestamp = character(),\n        name = character(),\n        symbol = character(),\n        total = numeric(),\n        address = character()\n    ))\n}\n\nempty_markets <- function() {\n    return(data.frame(\n        timestamp = character(),\n        name = character(),\n        symbol = character(),\n        rank = numeric(),\n        price_btc = numeric(),\n        price_usd = numeric()\n    ))\n}\n\nempty_users <- function() {\n    return(data.frame(\n        email = character()\n    ))\n}\n\nempty_wallets <- function() {\n    return(data.frame(\n        email = character(),\n        symbol = character(),\n        address = character(),\n        note = character()\n    ))\n}\n```", "```py\nsource(\"./csv-files.R\")\n\ndatabase_factory <- function(db_setup, table_names) {\n    table_names <- table_names[[db_setup[[\"environment\"]]]]\n    if (db_setup[[\"name\"]] == \"CSVFiles\") {\n        return(CSVFiles$new(table_names))\n    } else {\n        stop(\"Unknown database name\")\n    }\n}\n```", "```py\nsource(\"./database-factory.R\")\nStorage <- R6Class(\n    \"Storage\",\n    public = list(\n        initialize = function(settings) {\n            private$read_db <- database_factory(\n                settings[[\"storage\"]][[\"read\"]],\n                settings[[\"storage\"]][[\"table_names\"]]\n            )\n            private$write_dbs <- lapply(\n                settings[[\"storage\"]][[\"write\"]],\n                database_factory,\n                settings[[\"storage\"]][[\"table_names\"]]\n            )\n        },\n        read_exchanges = function() {\n            return(private$read_db$read_exchanges())\n        },\n        read_users = function() {\n            return(private$read_db$read_users(self))\n        },\n        read_wallets = function(email) {\n            return(private$read_db$read_wallets(email))\n        },\n        read_all_wallets = function() {\n            return(private$read_db$read_all_wallets())\n        },\n        read_analysis_assets = function(email) {\n            return(private$read_db$read_analysis_assets(email))\n        },\n        write_user = function(user) {\n            for (db in private$write_dbs) { db$write_user(user) }\n        },\n        write_wallets = function(wallets) {\n            for (db in private$write_dbs) { db$write_wallets(wallets) }\n        },\n        write_assets = function(assets) {\n            for (db in private$write_dbs) { db$write_assets(assets) }\n        },\n        write_markets = function(markets) {\n            for (db in private$write_dbs) { db$write_markets(markets) }\n        }\n    ),\n    private = list(read_db = NULL, write_dbs = list())\n)\n```", "```py\nlibrary(jsonlite)\n\nRequester <- R6Class(\n    \"Requester\",\n    public = list(\n        request = function(URL) {\n            return(fromJSON(URL))\n        }\n    )\n)\n```", "```py\nMarket <- R6Class(\n    \"Market\",\n    public = list(\n        initialize = function(timestamp, name, symbol, rank,\n                              price_btc, price_usd) {\n            private$timestamp <- timestamp\n            private$name <- name\n            private$symbol <- symbol\n            private$rank <- rank\n            private$price_btc <- price_btc\n            private$price_usd <- price_usd\n        },\n        data = function() {\n            return(list(\n                timestamp = private$timestamp,\n                name = private$name,\n                symbol = private$symbol,\n                rank = private$rank,\n                price_btc = private$price_btc,\n                price_usd = private$price_usd\n            ))\n        },\n        set_timestamp = function(timestamp) {\n            private$timestamp <- timestamp\n        },\n        get_symbol = function() {\n            return(private$symbol)\n        },\n        get_rank = function() {\n            return(private$rank)\n        },\n        get_price = function(base) {\n            if (base == 'btc') {\n                return(private$price_btc)\n            } else if (base == 'usd') {\n                return(private$price_usd)\n            }\n        }\n    ),\n    private = list(\n        timestamp = NULL,\n        name = \"\",\n        symbol = \"\",\n        rank = NA,\n        price_btc = NA,\n        price_usd = NA\n    )\n)\n```", "```py\nsource(\"./requesters/exchange-requester-factory.R\", chdir = TRUE)\n\nExchange <- R6Class(\n    \"Exchange\",\n    public = list(\n        initialize = function(name) {\n            private$requester <- exchange_requester_factory(name)\n        },\n        update_markets = function(timestamp, storage) {\n            private$timestamp <- unclass(timestamp)\n            storage$write_markets(private$markets())\n        }\n    ),\n    private = list(\n        requester = NULL,\n        timestamp = NULL,\n        markets = function() {\n            return(lapply(private$requester$markets(), private$insert_metadata))\n        },\n        insert_metadata = function(market) {\n            market$set_timestamp(private$timestamp)\n            return(market)\n        }\n    )\n)\n```", "```py\nsource(\"../../../utilities/requester.R\")\n\nKNOWN_ASSETS = list(\n    \"BTC\" = \"Bitcoin\",\n    \"LTC\" = \"Litecoin\"\n)\nExchangeRequester <- R6Class(\n    \"ExchangeRequester\",\n    public = list(\n        markets = function() list()\n    ),\n    private = list(\n        requester = Requester$new(),\n        create_market = function(resp) NULL,\n        request = function(URL) {\n            return(private$requester$request(URL))\n        }\n    )\n)\n```", "```py\nsource(\"./exchange-requester.R\")\nsource(\"../market.R\")\n\nCoinMarketCapRequester <- R6Class(\n    \"CoinMarketCapRequester\",\n    inherit = ExchangeRequester,\n    public = list(\n        markets = function() {\n            data <- private$clean(private$request(private$URL))\n            return(apply(data, 1, private$create_market))\n        }\n    ),\n    private = list(\n        URL = \"https://api.coinmarketcap.com/v1/ticker\",\n        create_market = function(row) {\n            timestamp <- NULL\n            return(Market$new(\n                timestamp,\n                row[[\"name\"]],\n                row[[\"symbol\"]],\n                row[[\"rank\"]],\n                row[[\"price_btc\"]],\n                row[[\"price_usd\"]]\n            ))\n        },\n        clean = function(data) {\n            data$price_usd <- as.numeric(data$price_usd)\n            data$price_btc <- as.numeric(data$price_btc)\n            data$rank <- as.numeric(data$rank)\n            return(data)\n        }\n    )\n)\n```", "```py\nsource(\"./coinmarketcap-requester.R\")\n\nexchange_requester_factory <- function(name) {\n    if (name == \"CoinMarketCap\") {\n        return(CoinMarketCapRequester$new())\n    } else {\n        stop(\"Unknown exchange name\")\n    }   \n}\n```", "```py\nsource(\"./requesters/wallet-requester-factory.R\", chdir = TRUE)\n\nWallet <- R6Class(\n    \"Wallet\",\n    public = list(\n        initialize = function(email, symbol, address, note) {\n            private$requester <- wallet_requester_factory(symbol, address)\n            private$email <- email\n            private$symbol <- symbol\n            private$address <- address\n            private$note <- note\n        },\n        data = function() {\n            return(list(\n                email = private$email,\n                symbol = private$symbol,\n                address = private$address,\n                note = private$note\n            ))\n        },\n        get_email = function() {\n            return(as.character(private$email))\n        },\n        get_symbol = function() {\n            return(as.character(private$symbol))\n        },\n        get_address = function() {\n            return(as.character(private$address))\n        },\n        update_assets = function(timestamp, storage) {\n            private$timestamp <- timestamp\n            storage$write_assets(private$assets())\n        }\n    ),\n    private = list(\n        timestamp = NULL,\n        requester = NULL,\n        email = NULL,\n        symbol = NULL,\n        address = NULL,\n        note = NULL,\n        assets = function() {\n            return (lapply (\n                    private$requester$assets(), \n                    private$insert_metadata))\n        },\n        insert_metadata = function(asset) {\n            timestamp(asset) <- unclass(private$timestamp)\n            email(asset) <- private$email\n            return(asset)\n        }\n    )\n)\n```", "```py\nsource(\"../../../utilities/requester.R\")\n\nWalletRequester <- R6Class(\n    \"WalletRequester\",\n    public = list(\n        assets = function() list()\n    ),\n    private = list(\n        requester = Requester$new(),\n        create_asset = function() NULL,\n        url = function(address) \"\",\n        request = function(URL) {\n            return(private$requester$request(URL))\n        }\n    )\n)\n```", "```py\nsource(\"./wallet-requester.R\")\nsource(\"../../asset.R\")\n\nBTCRequester <- R6Class(\n    \"BTCRequester\",\n    inherit = WalletRequester,\n    public = list(\n        initialize = function(address) {\n            private$address <- address\n        },\n        assets = function() {\n            total <- as.numeric(private$request(private$url()))\n            if (total > 0) { return(list(private$create_asset(total))) }\n            return(list())\n        }\n    ),\n    private = list(\n        address = \"\",\n        url = function(address) {\n            return(paste(\n                \"https://chainz.cryptoid.info/btc/api.dws\",\n                \"?q=getbalance\",\n                \"&a=\",\n                private$address,\n                sep = \"\"\n            ))\n        },\n        create_asset = function(total) {\n            return(new(\n                \"Asset\",\n                email = \"\",\n                timestamp = \"\",\n                name = \"Bitcoin\",\n                symbol = \"BTC\",\n                total = total,\n                address = private$address\n            ))\n        }\n    )\n)\n\nsource(\"./wallet-requester.R\")\nsource(\"../../asset.R\")\n\nLTCRequester <- R6Class(\n    \"LTCRequester\",\n    inherit = WalletRequester,\n    public = list(\n        initialize = function(address) {\n            private$address <- address\n        },\n        assets = function() {\n            total <- as.numeric(private$request(private$url()))\n            if (total > 0) { return(list(private$create_asset(total))) }\n            return(list())\n        }\n    ),\n    private = list(\n        address = \"\",\n        url = function(address) {\n            return(paste(\n                \"https://chainz.cryptoid.info/ltc/api.dws\",\n                \"?q=getbalance\",\n                \"&a=\",\n                private$address,\n                sep = \"\"\n            ))\n        },\n        create_asset = function(total) {\n            return(new(\n                \"Asset\",\n                email = \"\",\n                timestamp = \"\",\n                name = \"Litecoin\",\n                symbol = \"LTC\",\n                total = total,\n                address = private$address\n            ))\n        }\n    )\n)\n\n```", "```py\nsource(\"./btc-requester.R\")\nsource(\"./ltc-requester.R\")\n\nwallet_requester_factory <- function(symbol, address) {\n    if (symbol == \"BTC\") {\n        return(BTCRequester$new(address))\n    } else if (symbol == \"LTC\") {\n        return(LTCRequester$new(address))\n    } else {\n        stop(\"Unknown symbol\")\n    }\n}\n```", "```py\nsource(\"../assets/wallets/wallet.R\", chdir = TRUE)\n\nuser_constructor <- function(email, storage) {\n    if (!valid_email(email)) { stop(\"Invalid email\") }\n    user <- list(storage = storage, email = email, wallets = list())\n    class(user) <- \"User\"\n    user <- get_wallets(user)\n    return(user)\n}\n\nvalid_email <- function(string) {\n    if (grepl(\"@\", string) && grepl(\".\", string)) { return(TRUE) }\n    return(FALSE)\n}\n```", "```py\nget_wallets.User <- function(user) {\n    user$wallets <- user$storage$read_wallets(user$email)\n    return(user)\n}\n\nget_wallets <- function(object) {\n    UseMethod(\"get_wallets\")\n}\n```", "```py\nnew_wallet.User <- function(user, symbol, address, note) {\n    if (length(user$wallets) >= 1) {\n        for (wallet in user$wallets) {\n            if (wallet$get_symbol() == symbol &\n                wallet$get_address() == address) {\n                return(user)\n            }\n       }\n   }\n   wallet <- Wallet$new(user$email, symbol, address, note)\n   user$wallets <- c(user$wallets, list(wallet))\n   return(user)\n}\nnew_wallet <- function(object, symbol, address, note) {\n    UseMethod(\"new_wallet\")\n}\n```", "```py\nupdate_assets.User <- function(user, timestamp) {\n    for (wallet in user$wallets) {\n        wallet$update_assets(timestamp, user$storage)\n    }\n}\nupdate_assets <- function(object, timestamp) {\n    UseMethod(\"update_assets\")\n}\n```", "```py\nsave.User <- function(user) {\n    user$storage$write_user(user)\n    user$storage$write_wallets(user$wallets)\n}\n\nsave <- function(object) {\n    UseMethod(\"save\")\n}\n```", "```py\ndataS3.User <- function(user) {\n    return(list(email = user$email))\n}\ndataS3 <- function(object) {\n    UseMethod(\"dataS3\")\n}\n```", "```py\nSETTINGS <- list(\n    \"debug\" = TRUE,\n    \"storage\" = list(\n        \"read\" = list(\n            \"name\" = \"CSVFiles\",\n            \"environment\" = \"production\"\n        ),\n        \"write\" = list(\n            list(\n                \"name\" = \"CSVFiles\",\n                \"environment\" = \"production\"\n            )\n        ),\n        \"table_names\" = list(\n            \"production\" = list(\n                \"assets\" = \"production_assets\",\n                \"markets\" = \"production_markets\",\n                \"users\" = \"production_users\",\n                \"wallets\" = \"production_wallets\"\n            ),\n            \"development\" = list(\n                \"assets\" = \"development_assets\",\n                \"markets\" = \"development_markets\",\n                \"users\" = \"development_users\",\n                \"wallets\" = \"development_wallets\"\n            )\n        )\n    ),\n    \"batch_data_collection\" = list(\n        \"assets\" = list(\n            \"minutes\" = 60\n       ),\n       \"markets\" = list(\n            \"minutes\" = 60\n       )\n    )\n)\n```", "```py\nlibrary(R6)\nlibrary(methods)\n\nsource(\"../storage/storage.R\", chdir = TRUE)\nsource(\"../users/user.R\")\nsource(\"../settings.R\")\n\nstorage = Storage$new(SETTINGS)\nuser_1 <- user_constructor(\"1@somewhere.com\", storage)\n\nuser_1 <- new_wallet(user_1, \n                     \"BTC\", \n                     \"3D2oetdNuZUqQHPJmcMDDHYoqkyNVsFk9r\", \"\")\n\nuser_1 <- new_wallet(user_1, \n                     \"LTC\", \n                     \"LdP8Qox1VAhCzLJNqrr74YovaWYyNBUWvL\", \"\")\nsave(user_1)\n\nuser_2 <- user_constructor(\"2@somewhere.com\", storage)\n\nuser_2 <- new_wallet(user_2, \n                     \"BTC\", \n                     \"16rCmCmbuWDhPjWTrpQGaU3EPdZF7MTdUk\", \"\")\n\nuser_2 <- new_wallet(user_2, \n                     \"LTC\", \n                     \"LbGi4Ujj2dhcMdiS9vaCpWxtayBujBQYZw\", \"\")\nsave(user_2)\n```", "```py\nlibrary(R6)\nlibrary(methods)\n\nsource(\"../storage/storage.R\", chdir = TRUE)\nsource(\"../utilities/time-stamp.R\")\nsource(\"../settings.R\")\n\nupdate_markets_loop <- function(minutes_interval) {\n    storage = Storage$new(SETTINGS)\n    exchanges <- storage$read_exchanges()\n    repeat {\n        timestamp = now.TimeStamp()\n        for (exchange in exchanges) {\n            exchange$update_markets(timestamp, storage)\n        }\n        Sys.sleep(minutes_interval * 60)\n    }\n}\nupdate_markets_loop(60)\n```", "```py\n$ Rscript update-markets.R \n...\n         timestamp    name symbol rank  price_btc   price_usd\n1 2017-11-21-20-03 Bitcoin    BTC    1 1.00000000 8.12675e+03\n         timestamp     name symbol rank  price_btc   price_usd\n1 2017-11-21-20-03 Ethereum    ETH    2 0.04440240 3.61538e+02\n         timestamp         name symbol rank  price_btc   price_usd\n1 2017-11-21-20-03 Bitcoin Cash    BCH    3 0.14527100 1.18284e+03\n         timestamp   name symbol rank  price_btc   price_usd\n1 2017-11-21-20-03 Ripple    XRP    4 0.00002866 2.33352e-01\n         timestamp name symbol rank  price_btc   price_usd\n1 2017-11-21-20-03 Dash   DASH    5 0.06127300 4.98903e+02\n         timestamp     name symbol rank  price_btc   price_usd\n1 2017-11-21-20-03 Litecoin    LTC    6 0.00863902 7.03415e+01\n         timestamp name symbol rank  price_btc   price_usd\n1 2017-11-21-20-03 IOTA  MIOTA    7 0.00011163 9.08941e-01\n         timestamp name symbol rank  price_btc   price_usd\n1 2017-11-21-20-03  NEO    NEO    8 0.00427168 3.47813e+01\n         timestamp   name symbol rank  price_btc   price_usd\n1 2017-11-21-20-03 Monero    XMR    9 0.01752360 1.42683e+02\n         timestamp name symbol rank  price_btc   price_usd\n1 2017-11-21-20-03  NEM    XEM   10 0.00002513 2.04613e-01\n...\n```", "```py\nlibrary(R6)\nlibrary(methods)\n\nsource(\"../storage/storage.R\", chdir = TRUE)\nsource(\"../utilities/time-stamp.R\")\nsource(\"../settings.R\")\n\nupdate_assets_loop <- function(minutes_interval) {\n    storage = Storage$new(SETTINGS)\n    repeat {\n        users <- storage$read_users()\n        timestamp = now.TimeStamp()\n        lapply(users, update_assets, timestamp)\n        Sys.sleep(minutes_interval * 60)\n    }\n}\nupdate_assets_loop(60)\n```", "```py\n$ Rscript update-markets.R\n\n...\n            email        timestamp    name symbol    total\n1 1@somewhere.com 2017-11-21-20-02 Bitcoin    BTC 76031.29\n                             address\n1 3D2oetdNuZUqQHPJmcMDDHYoqkyNVsFk9r\n            email        timestamp     name symbol   total\n1 1@somewhere.com 2017-11-21-20-02 Litecoin    LTC 1420001\n                             address\n1 LdP8Qox1VAhCzLJNqrr74YovaWYyNBUWvL\n            email        timestamp    name symbol total\n1 2@somewhere.com 2017-11-21-20-02 Bitcoin    BTC 14001\n                             address\n1 16rCmCmbuWDhPjWTrpQGaU3EPdZF7MTdUk\n            email        timestamp     name symbol   total\n1 2@somewhere.com 2017-11-21-20-02 Litecoin    LTC 1397089\n                             address\n1 LbGi4Ujj2dhcMdiS9vaCpWxtayBujBQYZw\n...\n```"]