- en: Chapter 5. Editing Map Data
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章. 编辑地图数据
- en: Data has to come from somewhere. In the multi-billion dollar geospatial industry,
    collecting data is expensive. Features visible from aerial photography need to
    be plotted, and features not so visible on a workstation need their GPS coordinates
    collected in the field. Your time is valuable, and data collection won't happen
    on its own.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 数据必须来自某个地方。在价值数十亿美元的地理空间行业中，收集数据是昂贵的。从航空摄影中可见的特征需要绘制，而在工作站上不太明显的特征需要在现场收集它们的GPS坐标。你的时间是宝贵的，数据收集不会自行发生。
- en: But what if you could get others to do the work for you? What if you could create
    a website that let other people collect the information? Trained workers could
    document utility lines, or concerned citizens could report problem locations in
    town. By using volunteer data collection, you can quickly collect the data you
    need.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果你能让别人为你工作会怎样？如果你能创建一个让其他人收集信息的网站会怎样？经过培训的工人可以记录公用事业线路，或者关心市民可以报告城镇中的问题地点。通过使用志愿者数据收集，你可以快速收集所需的数据。
- en: ArcGIS Server provides not only data visualization on a map, but editing capabilities
    as well. Services can be created, and applications can be built around them, which
    allow users to add items to a map, change their shape, edit their attributes,
    and even delete them. ArcGIS Server also gives the creator of the services control
    over which of those data changes are allowed.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: ArcGIS Server不仅提供地图上的数据可视化，还提供编辑功能。可以创建服务，并围绕它们构建应用程序，使用户能够向地图添加项目、更改它们的形状、编辑它们的属性，甚至删除它们。ArcGIS
    Server还允许服务的创建者控制哪些数据更改是被允许的。
- en: 'In this chapter, we''re going to do the following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将做以下事情：
- en: Look at the data editing capabilities ArcGIS Server provides with the ArcGIS
    JavaScript API
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看ArcGIS Server通过ArcGIS JavaScript API提供的地图数据编辑功能
- en: Learn about the editing controls in the API, and how they create a helpful editing
    experience
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解API中的编辑控制以及它们如何创建一个有用的编辑体验
- en: Create an editing application that uses the tools in the ArcGIS JavaScript API
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个使用ArcGIS JavaScript API工具的编辑应用程序
- en: The use cases for webmap editing
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络地图编辑的使用案例
- en: 'A GIS professional doesn''t have to edit all the map data on his own. Trained
    staff and eager volunteers can assist with data collection and map editing projects
    that interest them. As the developer, it''s up to you to give them the tools they
    need to collect and update the data. The following are examples of applications
    which use web map editing that you can create :'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: GIS专业人士不必独自编辑所有地图数据。经过培训的员工和热心的志愿者可以协助他们感兴趣的数据收集和地图编辑项目。作为开发者，你需要提供他们收集和更新数据的工具。以下是一些使用网络地图编辑的应用程序示例，你可以创建：
- en: Field crews updating utility data
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现场工作人员更新公用事业数据
- en: Public service requests and incident reports
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公共服务请求和事件报告
- en: Parcel classification reassignments after analysis
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析后的地块分类重新分配
- en: Volunteer geographic information data collection
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 志愿者地理信息数据收集
- en: Map editing requirements
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 地图编辑需求
- en: Editing geographic data using the ArcGIS JavaScript API requires some setup
    on ArcGIS Server. An editable **feature service** must be published on ArcGIS
    Server, which requires an ArcSDE geodatabase. File geodatabases, personal geodatabases,
    and shapefiles cannot be used to store editable data. ArcGIS Online allows you
    to upload editable data to ESRI's cloud service, but the data upload and editing
    process has requirements which are covered in [Chapter 11](ch11.html "Chapter 11. The
    Future of ArcGIS Development"), *The Future of ArcGIS Development*.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 使用ArcGIS JavaScript API编辑地理数据需要在ArcGIS Server上进行一些设置。必须在ArcGIS Server上发布可编辑的**要素服务**，这需要ArcSDE地理数据库。文件地理数据库、个人地理数据库和shapefile不能用于存储可编辑数据。ArcGIS
    Online允许你将可编辑数据上传到ESRI的云服务，但数据上传和编辑过程有一些要求，这些要求在[第11章](ch11.html "第11章. ArcGIS开发的未来")
    *ArcGIS开发的未来* 中有所介绍。
- en: There are a few requirements for setting up an editable map application using
    ArcGIS Server and its JavaScript API. The geodatabase storing the data should
    be versioned, if you want to review the data before committing it to your default
    database. Versioned data also supports undo and redo operations. You may want
    to publish a read-only map service along with your editable feature service. Finally,
    some editing operations require a geometry service to handle geometry changes,
    as you cut, merge, and trim features.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 ArcGIS Server 和其 JavaScript API 设置可编辑地图应用程序有一些要求。存储数据的地理数据库应该是版本化的，如果您想在提交到默认数据库之前审查数据。版本化数据还支持撤销和重做操作。您可能希望与可编辑特征服务一起发布只读地图服务。最后，一些编辑操作需要几何服务来处理几何变化，例如切割、合并和修剪特征。
- en: Feature services
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 特征服务
- en: A feature service provides a web interface between data stored on the server
    and an application on the browser created to use it. They can be accessed through
    URL endpoints similar to map services. However, they produce very different results.
    They can be loaded on a map and queried much like dynamic or tiled services, but
    there is more. Feature services return graphics instead of tiles. These graphics
    can be queried, and even edited, if the service allows.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 特征服务提供了一个在服务器上存储的数据与用于使用它的浏览器应用程序之间的网络接口。它们可以通过类似于地图服务的 URL 端点访问。然而，它们产生非常不同的结果。它们可以像动态或瓦片服务一样在地图上加载和查询，但不仅如此。特征服务返回图形而不是瓦片。这些图形可以被查询，如果服务允许，甚至可以编辑。
- en: Feature templates
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 特征模板
- en: With ArcGIS Server 10.1, feature services can be published with the added functionality
    of **feature templates**. Feature templates give the user preconfigured features
    to add to the map. Feature templates are created in ArcMap, and define the symbology
    and predefined attributes. These templates make it easier to edit service data.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ArcGIS Server 10.1 中，可以发布带有**特征模板**功能的服务。特征模板为用户提供预先配置的特征，以便添加到地图中。特征模板在 ArcMap
    中创建，并定义了符号和预定义属性。这些模板使得编辑服务数据变得更加容易。
- en: One example of Feature templates can be found on an animal sighting map. The
    points on the map designate where animal sightings take place. Feature templates
    could be created to show pictures of each major type of animal (cat, dog, bird,
    rabbit, deer, and so on). Values in some of the fields could be defined ahead
    of time. For instance, you could say that all cats are warm-blooded.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 特征模板的一个例子可以在动物观测地图上找到。地图上的点表示动物观测发生的位置。可以创建特征模板来显示每种主要动物（猫、狗、鸟、兔子、鹿等）的图片。某些字段中的值可以在事先定义。例如，可以说所有猫都是温血的。
- en: How do you, as the developer, take advantage of feature templates? Apart from
    demonstrating what each symbol means, there are template pickers in the ArcGIS
    JavaScript API's tools that not only show the feature templates, but also let
    you click on them and add them to your map.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发者，您如何利用特征模板？除了演示每个符号的含义之外，ArcGIS JavaScript API 的工具中还有模板选择器，不仅显示特征模板，还允许您点击它们并将它们添加到您的地图中。
- en: Feature layer
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 特征层
- en: The feature layer provides access to graphics within a feature class. The user
    can thus both query and edit the shapes and attributes of the graphics. We reviewed
    their REST service profile in [Chapter 4](ch04.html "Chapter 4. Finding Peace
    in REST"), *Finding Peace in REST*. We load feature layers in much the same way
    we load dynamic and tiled services. However, their options often require more
    parameters, due to the editable nature of the content.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 特征层提供了访问特征类中图形的途径。因此，用户可以查询和编辑图形的形状和属性。我们在[第 4 章](ch04.html "第 4 章。在 REST 中寻找平静")*在
    REST 中寻找平静*中回顾了它们的 REST 服务配置文件。我们以加载动态和瓦片服务相同的方式加载特征层。然而，由于内容可编辑的特性，它们的选项通常需要更多的参数。
- en: Feature service modes
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 特征服务模式
- en: When initializing a feature layer from a feature service, you have a choice
    as to how the data is loaded. Do you want to load it all at once? Do you want
    to load all the features that you can see? Do you only want to load the one you've
    selected, and not show the rest? In the next sections, we'll review the three
    feature service modes used to download data to the client browser.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当从特征服务初始化特征层时，您可以选择如何加载数据。您是想一次性加载所有数据？您是想加载所有可见的特征？您只想加载您已选择的特征，而不显示其余的？在接下来的章节中，我们将回顾用于将数据下载到客户端浏览器的三种特征服务模式。
- en: Snapshot mode
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 快照模式
- en: Sometimes, if there is not a lot of data, it's better to download it all at
    once. That's what snapshot mode does. Snapshot mode downloads feature data based
    on time definitions and definition expressions, but it is limited by the maximum
    download limit. The visibility of the data is then determined by time extent.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，如果没有太多数据，一次性下载所有数据会更好。这就是快照模式的作用。快照模式根据时间定义和定义表达式下载要素数据，但受最大下载限制的限制。数据的可见性随后由时间范围确定。
- en: Snapshot mode is helpful if there is not a lot of data to download, or if connectivity
    may be an issue during use. The user can download all the feature data at once,
    work with it, and then save their changes when connections become favorable again.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有太多数据要下载，或者在使用过程中可能存在连接问题，快照模式很有帮助。用户可以一次性下载所有要素数据，处理它，然后在连接变得有利时再次保存更改。
- en: On demand mode
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 按需模式
- en: Sometimes, you're only interested in downloading the data in front of you. In
    that case, on demand mode is the best option. On demand mode only downloads features
    within the map extent. They too are affected by time definitions and definition
    expressions. Unlike snapshot mode, data requests are made every time the map extent
    changes. On demand mode is the default mode for any `FeatureLayer`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，您可能只对下载眼前的数据感兴趣。在这种情况下，按需模式是最佳选择。按需模式仅下载地图范围内的要素。它们也受时间定义和定义表达式的影响。与快照模式不同，每次地图范围改变时都会进行数据请求。对于任何`FeatureLayer`，按需模式是默认模式。
- en: On demand mode is typically used when there is a lot of data in the feature
    layer, but the user is only expected to view a small portion of it. It's very
    good for focussed editing tasks. It's not as good for mobile applications with
    lots of map navigation and connectivity issues, since some graphics will fail
    to load.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在特征层中数据量很大，但用户只需查看其中一小部分时，通常会使用按需模式。这对于专注的编辑任务非常适用。对于包含大量地图导航和连接问题的移动应用来说，它并不那么好，因为一些图形可能无法加载。
- en: Selection mode
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选择模式
- en: Loading features by selection is more constraining because it only shows those
    features that have been selected. Feature selection is handled using the feature
    layer's `selectFeatures()` method, in a manner similar to querying from a map
    service layer. In this case, the graphics returned are considered "selected".
    Selection methods include clicking on the map and sending a query with specific
    parameters. This method is very helpful if there are lots of features, and you
    only want to download specific ones, whether it's by area or attributes.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 通过选择加载要素更为限制性，因为它只显示已选择的功能。要素选择是通过使用特征层的`selectFeatures()`方法来处理的，其方式类似于从地图服务层进行查询。在这种情况下，返回的图形被认为是“已选择”。选择方法包括在地图上点击并发送带有特定参数的查询。如果有很多要素，而您只想下载特定的要素，无论是通过区域还是属性，这种方法非常有帮助。
- en: Editing tools
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编辑工具
- en: The ArcGIS JavaScript API comes with a set of widgets and modules designed specifically
    for editing. With the editing widgets, the user can add features to the map, change
    their shape, edit their attributes, and even delete them, if the services allow.
    Let's look at some of the tools available in the API.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: ArcGIS JavaScript API附带了一套专为编辑设计的控件和模块。使用编辑控件，用户可以向地图添加要素，更改它们的形状，编辑它们的属性，如果服务允许，甚至可以删除它们。让我们看看API中可用的工具。
- en: Tip
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Why are the editing tools in your application not working? It may be the CSS.
    Editing widgets are created with Dojo user controls, or dijits. These controls
    require the Dojo stylesheets, such as `claro.css` or `nihilo.css`. Without them,
    buttons stop working, and other unexpected behaviors may arise.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么您应用程序中的编辑工具不起作用？可能是CSS的问题。编辑小部件是用Dojo用户控件或dijits创建的。这些控件需要Dojo样式表，例如`claro.css`或`nihilo.css`。如果没有它们，按钮将停止工作，并可能出现其他意外的行为。
- en: Edit toolbar
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编辑工具栏
- en: 'The edit toolbar, loaded with the `esri/toolbars/edit` module, lets the user
    change the shape, orientation, scale, and position of graphics on a map. We discussed
    it in [Chapter 2](ch02.html "Chapter 2. Digging into the API"), *Digging into
    the API*, in relation to the other toolbars. Separate controls are required to
    save the changes made with the edit toolbar. You can see an image of a triangle
    selected for the edit toolbar here:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 加载了`esri/toolbars/edit`模块的编辑工具栏允许用户更改地图上图形的形状、方向、比例和位置。我们曾在[第2章](ch02.html "第2章。深入API")
    *深入API* 中讨论过它，与其他工具栏相关。需要单独的控件来保存使用编辑工具栏所做的更改。您可以在以下位置看到用于编辑工具栏的三角形图像：
- en: '![Edit toolbar](img/6459_05_01.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![编辑工具栏](img/6459_05_01.jpg)'
- en: 'The edit toolbar requires a map in its constructor. The constructor also needs
    a number of optional parameters to modify its appearance and behavior. Many of
    the options depend on the geometry type of the data being manipulated. As of API
    version 3.13, here are some of the available options for the edit toolbar:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑工具栏在其构造函数中需要一个地图。构造函数还需要一些可选参数来修改其外观和行为。许多选项取决于正在操作的数据的几何类型。截至API版本3.13，以下是编辑工具栏的一些可用选项：
- en: '`allowAddVertices` (`boolean`): If true, you can add vertices to a polyline
    or polygon.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`allowAddVertices`（`布尔值`）：如果为真，你可以向折线或多边形添加顶点。'
- en: '`allowDeleteVertices` (`boolean`): If true, you can remove vertices from a
    polyline or polygon.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`allowDeleteVertices`（`布尔值`）：如果为真，你可以从折线或多边形中删除顶点。'
- en: '`ghostLineSymbol` (`line symbol`): When moving a line or polygon edge, this
    is the symbol for the line that shows where the new line/edge will go.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ghostLineSymbol`（`线符号`）：当移动线或多边形边缘时，这是显示新线/边缘将去往何处的符号。'
- en: '`ghostVertexSymbol` (`marker symbol`): If you are allowed to add vertices,
    this is the symbol that shows where to click to insert a vertex.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ghostVertexSymbol`（`标记符号`）：如果你被允许添加顶点，这是显示点击以插入顶点的符号。'
- en: '`textSymbolEditorHolder` (`string` or `HTML DOMnode`): Web page location when
    you want to add a text symbol editor widget'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`textSymbolEditorHolder`（`字符串`或`HTML DOM节点`）：当你想要添加文本符号编辑小部件时网页的位置。'
- en: '`uniformScaling` (`boolean`): When true, resizing a polyline or polygon keeps
    the original ratio of width to height.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`uniformScaling`（`布尔值`）：当为真时，调整折线或多边形的大小时保持原始的宽高比。'
- en: '`vertexSymbol` (`marker symbol`): When editing polylines and polygons, this
    is the symbol of the points at each vertex.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vertexSymbol`（`标记符号`）：在编辑折线和多边形时，这是每个顶点的符号。'
- en: 'You can see an example of loading the edit toolbar in the following snippet:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在以下代码片段中看到加载编辑工具栏的示例：
- en: '[PRE0]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When you want to use the edit toolbar to edit a feature, you call the `activate()`
    method. The `activate()` method requires two arguments, and has the option for
    a third. Firstly, the method requires a tool, which is made by joining a combination
    of the edit toolbar constants with the pipe `|` symbol. The constants include
    `EDIT_TEXT`, `EDIT_VERTICES`, `MOVE`, `ROTATE`, and `SCALE`. Secondly, the `activate()`
    method requires a graphic to edit. The final optional argument is an object similar
    to the one used to create the edit toolbar. In the following code snippet, we
    have a graphic that is added to the map, and a click event is assigned to it that
    activates the edit toolbar to edit the graphic when it is double-clicked:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 当你想使用编辑工具栏来编辑一个特性时，你调用`activate()`方法。`activate()`方法需要两个参数，并有一个可选的第三个参数。首先，该方法需要一个工具，这个工具是通过将编辑工具栏常量与管道`|`符号组合而成的。常量包括`EDIT_TEXT`、`EDIT_VERTICES`、`MOVE`、`ROTATE`和`SCALE`。其次，`activate()`方法需要一个要编辑的图形。最后一个可选参数是一个类似于创建编辑工具栏的对象。在下面的代码片段中，我们有一个添加到地图中的图形，并且给它分配了一个点击事件，当双击该图形时激活编辑工具栏来编辑该图形：
- en: '[PRE1]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Attribute inspector
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 属性检查器
- en: Sometimes, you don't care where things are, you just care about the content.
    That's where the attribute inspector comes in. The attachment inspector provides
    a form with a list of editable fields and the appropriate blanks to edit them.
    The attachment inspector is bound to a feature layer, and displays the editable
    values for the selected layer. The fields in the attribute inspector respond to
    the field types of the attributes. Date fields show a calendar when editing. Fields
    with coded value domains show a drop-down list instead of a text blank. Below,
    you can see an example of an attribute inspector loaded in the popup, though it
    could be added to a separate HTML element.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，你不在乎事物在哪里，你只关心内容。这就是属性检查器发挥作用的地方。属性检查器提供了一个带有可编辑字段列表和适当空白来编辑它们的表单。属性检查器绑定到一个要素层，并显示所选层的可编辑值。属性检查器中的字段响应于属性的字段类型。日期字段在编辑时显示日历。具有编码值域的字段显示一个下拉列表而不是文本空白。下面，你可以看到一个属性检查器加载到弹出窗口中的示例，尽管它也可以添加到单独的HTML元素中。
- en: '![Attribute inspector](img/6459_05_02.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![属性检查器](img/6459_05_02.jpg)'
- en: 'When initializing an attribute inspector, you need to define how the inspector
    will handle the different fields within the graphic attributes. The attribute
    inspector constructor accepts an `options` object, and either an HTML element
    or an id string reference to the element. The `options` object has one parameter
    called `layerInfos`, which accepts an array of `layerInfo` objects. Each `layerInfo`
    object contains one or more of the following parameters:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当初始化属性检查器时，您需要定义检查器将如何处理图形属性中的不同字段。属性检查器构造函数接受一个 `options` 对象，以及一个 HTML 元素或元素的
    id 字符串引用。`options` 对象有一个名为 `layerInfos` 的参数，它接受一个 `layerInfo` 对象数组。每个 `layerInfo`
    对象包含以下参数之一或多个：
- en: '`featureLayer` (`required`): The feature layer to be edited.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`featureLayer` (`必需`): 要编辑的要素层。'
- en: '`userId` (`string`, `optional`): The ArcGIS Server user id connected to the
    service, should the editing require token authentication. This is not needed if
    you have used the Identity Manager to handle logins.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`userId` (`字符串`, `可选`): 如果编辑需要令牌身份验证，则连接到服务的 ArcGIS Server 用户 ID。如果您已使用身份管理器来处理登录，则不需要此信息。'
- en: '`showObjectID` (`Boolean, optional`): Whether you want to see the object id
    of the feature when it is selected. By default, this value is `false`.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`showObjectID` (`布尔值，可选`): 当要素被选中时，您是否想看到要素的对象 ID。默认情况下，此值是 `false`。'
- en: '`showGlobalID` (`Boolean`, `optional`): Whether you want to see the global
    id of the feature when it is selected. By default, this value is `false`.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`showGlobalID` (`布尔值`, `可选`): 当要素被选中时，您是否想看到要素的全局 ID。默认情况下，此值是 `false`。'
- en: '`showDeleteButton` (`Boolean`, `optional`): By default, the attribute inspector
    shows a delete button that lets you delete the selected feature. Setting this
    to false removes it.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`showDeleteButton` (`布尔值`, `可选`): 默认情况下，属性检查器显示一个删除按钮，允许您删除选定的要素。将此设置为 false
    将移除它。'
- en: '`showAttachments` (`Boolean`, `optional`): When set to true, and if the feature
    layer has attachments, this displays an attachment editor form in the attribute
    inspector, which lets you view and upload files attached to the feature.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`showAttachments` (`布尔值`, `可选`): 当设置为 true，并且要素层有附件时，这将在属性检查器中显示一个附件编辑表单，允许您查看和上传附加到要素的文件。'
- en: '`isEditable` (`Boolean`, `optional`): Lets you control whether the feature
    is editable. This doesn''t override whether the features are editable server-side.
    It''s just an extra way to block someone without proper credentials from editing
    data they shouldn''t.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isEditable` (`布尔值`, `可选`): 允许您控制要素是否可编辑。这不会覆盖要素在服务器端是否可编辑。它只是阻止没有适当凭证的人编辑数据的额外方式。'
- en: '`fieldInfos` (`Objects []`, `optional`): Gives the developer granular control
    over what fields are editable, and how. This does not allow the user to edit fields
    that aren''t allowed to be edited, according to the publishing method of the feature
    layer. If this value is not set, the attribute inspector lists all editable fields.
    `FieldInfo` objects contain the following:'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fieldInfos` (`对象数组 []`, `可选`): 允许开发者对可编辑的字段及其方式进行细粒度控制。这不允许用户编辑根据要素层的发布方法不允许编辑的字段。如果未设置此值，属性检查器将列出所有可编辑字段。`FieldInfo`
    对象包含以下内容：'
- en: '`fieldname` (`string`): The name of the field to be edited'
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fieldname` (`字符串`): 要编辑的字段名称。'
- en: '`format` (`object`, `optional`): An object that lets you edit time when editing
    dates. When set, add the following object: `{time: true}`'
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`format` (`对象`, `可选`): 一个对象，允许您在编辑日期时编辑时间。当设置时，添加以下对象：`{time: true}`。'
- en: '`isEditable` (`Boolean`, `optional`): When set to false, this disables the
    user''s ability to change the value of that field'
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isEditable` (`布尔值`, `可选`): 当设置为 false 时，这将禁用用户更改该字段值的权限'
- en: '`stringFieldOption` (`string`, `optional`): When set, the user can edit a `string`
    value either in a single-line textbox, a text area with multiple lines, or a rich-text
    field that includes additional formatting'
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stringFieldOption` (`字符串`, `可选`): 当设置时，用户可以在单行文本框、多行文本区域或包含额外格式的富文本字段中编辑 `字符串`
    值。'
- en: '`label` (`string`, `optional`): When set, this lets you override the name of
    the field alias from the feature service'
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`label` (`字符串`, `可选`): 当设置时，这允许您覆盖要素服务中的字段别名名称。'
- en: '`tooltip` (`string`, `optional`): When set, this shows a text tool tip when
    the user begins editing the attribute'
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tooltip` (`字符串`, `可选`): 当设置时，在用户开始编辑属性时显示文本工具提示。'
- en: 'You can see an example of an attribute inspector being loaded with a single
    feature layer here:'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在以下位置看到属性检查器加载单个要素层的示例：
- en: '[PRE2]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: While the attribute inspector allows you to edit the attributes of graphics
    on a map, it doesn't provide an immediate way to save the edits. It is up to the
    developer to determine when changes to attributes are saved to the server. The
    developer could add a save button, or save whenever the feature is no longer selected.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然属性检查器允许您编辑地图上图形的属性，但它不提供立即保存编辑的方法。何时将属性更改保存到服务器由开发者决定。开发者可以添加一个保存按钮，或者每当功能不再被选中时自动保存。
- en: Template picker
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模板选择器
- en: 'The **template picker** lets the user select from a list of feature templates
    to add features to the map. It displays a grid of feature templates from connected
    feature layers. These templates include feature names, geometry types, and preset
    styles. The user can click on any of the template buttons, and then draw them
    on the map. You can load more than one feature layer, and switch between them
    with ease. You can see an example in the following screenshot:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**模板选择器**允许用户从一系列功能模板中选择，以向地图添加功能。它显示来自连接的功能层的功能模板网格。这些模板包括功能名称、几何类型和预设样式。用户可以点击任何模板按钮，然后在地图上绘制它们。您可以加载多个功能层，并且可以轻松地在它们之间切换。您可以在下面的屏幕截图中看到一个示例：'
- en: '![Template picker](img/6459_05_03.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![模板选择器](img/6459_05_03.jpg)'
- en: 'The template picker, like most dijits, requires a parameter object and, either
    an HTML element or a string reference to the element''s id, in order to load.
    In the options, the template picker accepts an array of `featureLayers`. It also
    accepts the number of `rows` or `columns` it will create. If you don''t use `featureLayers`
    with their own feature templates, you can define your own using configured items
    in the `items` array. You can also set the CSS style directly. Finally, you can
    control whether tooltips show when you hover over the symbols. In the following
    snippet, you can see an example of a template picker initialized:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 模板选择器，像大多数dijit一样，需要参数对象以及一个HTML元素或元素的id的字符串引用，以便加载。在选项中，模板选择器接受一个`featureLayers`数组。它还接受它将创建的`rows`或`columns`的数量。如果您不使用具有自己的功能模板的`featureLayers`，您可以使用`items`数组中的配置项来定义自己的模板。您还可以直接设置CSS样式。最后，您可以控制当您悬停在符号上时是否显示工具提示。在下面的代码片段中，您可以看到一个初始化的模板选择器示例：
- en: '[PRE3]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The preceding code shows a template picker with nine columns with tooltips to
    show data about the `layers` loaded in its `featureLayers` attribute. The size
    is 900 pixels wide, and as tall as it needs to be.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码显示了一个具有九列和显示其`featureLayers`属性中加载的`layers`数据的工具提示的模板选择器。宽度为900像素，高度根据需要调整。
- en: Attachment editor
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 附件编辑器
- en: 'There''s an old saying that a picture is worth a thousand words. Sometimes,
    you need that picture to explain what data you''re submitting. The **attachment
    editor** can help. The attachment editor allows the application to upload a file,
    usually an image, and connect it to the feature on the map. You can view other
    attachments, and possibly edit them or delete them, if permissions allow. Attachment
    editors can be loaded as part of the attribute inspector by setting the `showAttachments`
    property in the attribute editor options to `true`, when constructing the editor:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 有句老话说，一张图胜千言。有时，你需要那张图来解释你提交的数据。**附件编辑器**可以帮到您。附件编辑器允许应用程序上传文件，通常是图像，并将其连接到地图上的功能。您可以查看其他附件，如果权限允许，还可以编辑或删除它们。附件编辑器可以作为属性检查器的一部分加载，通过在构建编辑器时将属性编辑器选项中的`showAttachments`属性设置为`true`：
- en: '![Attachment editor](img/6459_05_04.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![附件编辑器](img/6459_05_04.jpg)'
- en: Editor dijit
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编辑器dijit
- en: The **editor dijit** provides an all-in-one editing tool to create, update,
    and delete map features. The editor dijit includes the template picker, attribute
    inspector, and an editing toolbar with numerous tools. It lets you draw new features
    on a map, edit existing features, and also delete features.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**编辑器dijit**提供了一个一站式编辑工具，用于创建、更新和删除地图功能。编辑器dijit包括模板选择器、属性检查器和带有众多工具的编辑工具栏。它允许您在地图上绘制新功能、编辑现有功能，还可以删除功能。'
- en: 'The tools that the editor dijit provides are as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑器dijit提供的工具如下：
- en: Feature selection tools, either to add new selections, add to them further,
    or to remove from existing selections
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 功能选择工具，用于添加新选择、进一步添加到现有选择或从现有选择中删除
- en: Feature drawing tools, including a tool to delete features from the map
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 功能绘制工具，包括从地图中删除功能的功能
- en: Tools that let you cut, merge, and clip parts of polylines and polygons
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许您剪切、合并和裁剪折线和多边形部分的工具
- en: Undo and redo operations (requires versioned map services)
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 撤销和重做操作（需要版本化地图服务）
- en: Snapping manager
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 捕捉管理器
- en: 'Here''s a common request you might receive when creating an editing tool: "I''d
    like a tool that lets me edit this feature based on the lines of this other feature".
    You could try to code your own tool to select a feature and go through each phase
    of the feature. Or, with a few additional settings, you could implement the map''s
    **snapping manager**.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 当创建编辑工具时，你可能会收到一个常见的请求：“我想有一个工具，让我可以根据另一个特征的线条来编辑这个特征”。你可以尝试编写自己的工具来选择一个特征并遍历特征的每个阶段。或者，通过一些额外的设置，你可以实现地图的**捕捉管理器**。
- en: The snapping manager imitates ArcMap snapping controls in the browser . As your
    mouse pointer approaches the corner or edge of a graphic feature, perhaps in a
    `GraphicsLayer` or a `FeatureLayer`, a new pointer moves over the point on the
    feature. This shows where you would add a point if you clicked on the map. You
    can click along a set of points, line vertices, or polygon corners to draw something
    that lines up perfectly with existing features with this tool.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 捕捉管理器在浏览器中模仿ArcMap的捕捉控制。当你的鼠标指针接近图形特征的角落或边缘时，例如在一个`GraphicsLayer`或一个`FeatureLayer`中，一个新的指针会移动到特征的点上。这显示了如果你在地图上点击，你会在哪里添加一个点。你可以沿着一系列的点、线顶点或多边形角落点击，使用这个工具绘制与现有特征完美对齐的东西。
- en: When loading the snapping manager, there are a few important options that need
    to be set. Every snapping manager requires a map to snap to. It also requires
    a graphics layer or a feature layer to load, along with information about its
    snapping behavior. It should know whether to snap to the edge or vertex of a line
    or polygon, as well as whether to snap to points of a point feature class. All
    this information is added in a `layerInfo` array in its constructor options, or
    can be added later by using the `setLayerInfos()` method.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在加载捕捉管理器时，有一些重要的选项需要设置。每个捕捉管理器都需要一个地图来捕捉。它还需要加载一个图形层或特征层，以及有关其捕捉行为的信息。它应该知道是否要捕捉到线或多边形的边缘或顶点，以及是否要捕捉到点特征类的点。所有这些信息都添加在其构造函数选项中的`layerInfo`数组中，或者可以通过使用`setLayerInfos()`方法稍后添加。
- en: There are other optional configurable items in the snapping manager. You can
    tell the snapping manager to always snap to a graphic, or whether you want to
    control snapping by holding down a key on the keyboard while clicking. You can
    also configure which keyboard key is the `snapKey`, by loading that property with
    the appropriate `dojo/keys` constant. Finally, the `tolerance` of a snapping manager
    refers to the maximum number of pixels the pointer should be from the feature
    before it snaps to it.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在捕捉管理器中还有其他可选的可配置项。你可以告诉捕捉管理器始终捕捉到图形，或者你希望在点击时按住键盘上的某个键来控制捕捉。你还可以配置哪个键盘键是`snapKey`，通过加载适当的`dojo/keys`常量来设置该属性。最后，捕捉管理器的`tolerance`指的是指针在捕捉到特征之前应该与特征的最大像素数。
- en: 'You can see an example of a snapping manager loaded in a JavaScript API in
    the following code:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中，你可以看到一个在JavaScript API中加载的捕捉管理器的示例：
- en: '[PRE4]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The preceding example shows a snapping manager that turns on when the user holds
    down the *Ctrl* key on a PC (the *Command* key on a Mac). It only snaps to the
    corners of a line or polygon in the `propertyLayer` feature layer. The `tolerance`
    for snapping was set to 10 pixels.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例显示了一个在用户在PC上按下*Ctrl*键（在Mac上为*Command*键）时开启的捕捉管理器。它只捕捉到`propertyLayer`特征层中线条或多边形的角落。捕捉的`tolerance`设置为10像素。
- en: Securing editing services
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护编辑服务
- en: If you're going to open up your data to be edited by the public, you need to
    be prepared for trouble. From bad data input to malicious attacks, you, as a developer,
    need to account for things going wrong. Luckily, ArcGIS Server and the ArcGIS
    API for JavaScript can help.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打算公开你的数据供公众编辑，你需要准备好应对麻烦。从不良数据输入到恶意攻击，作为开发者，你需要考虑到可能出现的问题。幸运的是，ArcGIS Server和ArcGIS
    API for JavaScript可以帮助你。
- en: Restricting user input
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 限制用户输入
- en: I remember a project where we had to let users search for addresses based on
    a list provided by another system. The other system had no restrictions on what
    the user could enter. As a result, the address list was anything but normal. On
    a given street, there could be fifteen different ways the street name could be
    listed. Some were all caps, while others had "Rd" instead of "Road" Others were
    misspelled, one m instead of two, and some had too many spaces between the street
    name and the suffix. Needless to say, the data was poorly constructed and unstandardized.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我记得有一个项目，我们需要让用户根据另一个系统提供的列表来搜索地址。那个系统对用户可以输入的内容没有任何限制。结果，地址列表非常不正常。在一条街道上，可能会有十五种不同的方式来列出街道名称。有的全部大写，而有的用
    "Rd" 代替 "Road"。有的拼写错误，一个 m 而不是两个，还有一些在街道名称和后缀之间有太多的空格。不用说，数据构建得很差，没有标准化。
- en: ArcGIS Server provides some tools to help you restrict user input. Implementing
    coded value domains and ranges in the geodatabase can help reduce bad input. The
    attribute inspector honors field properties such as length and data type. You
    can set default values to limit extra user input in the feature service feature
    templates.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: ArcGIS Server提供了一些工具来帮助您限制用户输入。在地理数据库中实现编码值域和范围可以帮助减少不良输入。属性检查器尊重字段属性，如长度和数据类型。您可以在要素服务要素模板中设置默认值，以限制额外的用户输入。
- en: You can also tie in validation and other controls to make sure the user does
    not accidently do something like add a phone number to a date column. Dojo comes
    with user controls such as validation textboxes that limit bad input.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以将验证和其他控件结合起来，以确保用户不会意外地做一些像将电话号码添加到日期列之类的事情。Dojo自带用户控件，如验证文本框，可以限制不良输入。
- en: Password protected services
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 密码保护服务
- en: ArcGIS Server also offers a better option when it comes to securing your editing
    services. If you want to restrict access to editing data, you can demand token-based
    authentication for map services. A **token** is an encrypted string that contains
    a user name, an expiration date, and extra information for verification purposes.
    You need to request a token from `http://myserver/arcgis/tokens`, where myServer
    refers to your ArcGIS Server web endpoint or web adaptor. You submit the necessary
    user name and password before having the token added as a cookie on your browser.
    Tokens are only good for a limited time, which can be adjusted through configurable
    settings in ArcGIS Server.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到保护您的编辑服务时，ArcGIS Server也提供了一个更好的选项。如果您想限制对编辑数据的访问，您可以为地图服务要求基于令牌的认证。**令牌**是一个包含用户名、过期日期和用于验证目的的额外信息的加密字符串。您需要从
    `http://myserver/arcgis/tokens` 请求令牌，其中 myServer 指的是您的 ArcGIS Server 网络端点或网络适配器。在令牌作为cookie添加到您的浏览器之前，您需要提交必要的用户名和密码。令牌只在有限的时间内有效，这可以通过在ArcGIS
    Server中的可配置设置进行调整。
- en: These token-based security measures work with both map services and editable
    feature services. Without the token, you are not able to see the protected map
    services in the browser. With it, you can explore secured services, query them,
    and even edit data in them.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这些基于令牌的安全措施与地图服务和可编辑要素服务都兼容。没有令牌，您无法在浏览器中看到受保护地图服务。有了它，您可以探索受保护的服务，查询它们，甚至编辑其中的数据。
- en: Identity manager
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 身份管理器
- en: The **identity manager** (`esri/IdentityManager`) is used to handle logins and
    the security of ArcGIS Server and ArcGIS Online services. The identity manager
    displays a username and password prompt when you attempt to load token-protected
    services in the browser. Its user interface uses Dojo UI controls, so loading
    the appropriate Dojo style sheet is necessary to make the identity manager work
    properly.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**身份管理器**（`esri/IdentityManager`）用于处理登录以及ArcGIS Server和ArcGIS Online服务的安全性。当您尝试在浏览器中加载受令牌保护的服务时，身份管理器会显示用户名和密码提示。其用户界面使用Dojo
    UI控件，因此需要加载适当的Dojo样式表，以便身份管理器正常工作。'
- en: Now that we've reviewed some of the editing capabilities ArcGIS Server offers,
    let's apply what we've learned to an application.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经回顾了ArcGIS Server提供的部分编辑功能，让我们将这些知识应用到应用程序中。
- en: A new mapping application
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 新的地图应用程序
- en: So, back to our story and our mapping application. We're still waiting for word
    from the Y2K society about the Census map, but we have a new application we've
    been asked to work on. It seems that the city of Hollister, California has asked
    us to put an app together for them. Let's find out what they want.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，回到我们的故事和我们的地图应用程序。我们仍在等待Y2K协会关于人口普查地图的消息，但我们有一个新的应用程序，我们被要求去工作。看起来加利福尼亚州的霍利斯特市要求我们为他们制作一个应用程序。让我们看看他们想要什么。
- en: The city of Hollister wants to create an application that lets citizens report
    issues in the city. They want citizens to report things like graffiti, sidewalk,
    curb, and street issues, damaged property, sewer issues, and tree problems, on
    a map, and also supply additional information. If possible, they want photos of
    the problems so crews know what to look for.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 霍利斯特市希望创建一个应用程序，让市民能够报告城市中的问题。他们希望市民能够在地图上报告涂鸦、人行道、路缘石和街道问题、损坏的财产、下水道问题和树木问题，并提供额外的信息。如果可能的话，他们希望有问题的照片，以便工作人员知道要寻找什么。
- en: The file setup
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文件设置
- en: 'We don''t need to create any custom packages because we''re going to use the
    out-of-the-box ArcGIS JavaScript API editing tools,. Instead, we''ll create a
    simple file setup with a `css` and a `js` folder, We''ll add our custom `style.css`
    style sheet in the `css` folder, We''ll add our `app.js` file in the `js` folder.
    We''ll also add a folder named `proxy` to handle our proxy service. The file structure
    should look something like the following:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将使用现成的ArcGIS JavaScript API编辑工具，我们不需要创建任何自定义包。相反，我们将创建一个简单的文件设置，包含一个`css`和一个`js`文件夹。我们将在`css`文件夹中添加我们的自定义`style.css`样式表，在`js`文件夹中添加我们的`app.js`文件。我们还将添加一个名为`proxy`的文件夹来处理我们的代理服务。文件结构应类似于以下内容：
- en: '![The file setup](img/6459_05_05.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![文件设置](img/6459_05_05.jpg)'
- en: The front page
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 首页
- en: Let's start with the HTML document. We'll use our basic cookie-cutter site.
    This time, we'll add Dojo's `claro.css` style sheet. We don't need any custom
    packages, so we can leave those out of the `dojoConfig` file. We'd like a long
    column going down the side of the page, and a header part where we'll put the
    title for the page layout. We'll load the `BorderContainer` with a sidebar design
    with the taller side columns. We'll add three `ContentPanes` for the header, a
    leading column for the buttons, and a center region for the map.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从HTML文档开始。我们将使用我们的基本cookie-cutter网站。这次，我们将添加Dojo的`claro.css`样式表。我们不需要任何自定义包，因此我们可以将这些包从`dojoConfig`文件中排除。我们希望有一个沿着页面侧边的长列，以及一个放置页面布局标题的页眉部分。我们将加载具有侧边栏设计的`BorderContainer`，其中较长的侧边栏。我们将为页眉添加三个`ContentPanes`，一个用于按钮的引导列，以及一个用于地图的中心区域。
- en: '[PRE5]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We''ll add some basic styling for the HTML and the body on the `style.css`
    page. Let''s add the following style:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`style.css`页面为HTML和body添加一些基本的样式。让我们添加以下样式：
- en: '[PRE6]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We've set the `width` and `height` of the HTML and `body` to `100%`, with no
    border, margin, or padding. We've also changed the font to a common `sans-serif`
    font, such as `Helvetica`, `Arial`, or just plain `sans-serif`. Finally, we set
    the elements on the page to be sized using border-box `box-sizing` which makes
    it easier to work with sizing boxes on the page.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已将HTML和`body`的`width`和`height`设置为`100%`，没有边框、边距或填充。我们还更改了字体为常见的`sans-serif`字体，如`Helvetica`、`Arial`或简单的`sans-serif`。最后，我们设置页面上的元素使用`border-box`的`box-sizing`，这使得在页面上处理尺寸框更容易。
- en: Loading the map
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加载地图
- en: 'We''ll begin writing the code for our application with the page setup. We have
    a focus area, which is the city of Hollister. For the sake of an easy life, we''ll
    add the city boundaries as an extent:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从页面设置开始编写我们应用程序的代码。我们有一个焦点区域，即霍利斯特市。为了方便起见，我们将添加城市边界作为范围：
- en: '[PRE7]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the preceding code, we've loaded the necessary modules and used the `dojo/parser`
    to parse them. We've added a map with the OpenStreetMap based basemap, and we've
    created a `maxExtent` to simulate the city boundaries.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们已加载必要的模块并使用`dojo/parser`解析它们。我们已添加基于OpenStreetMap的基本地图，并创建了一个`maxExtent`来模拟城市边界。
- en: Adding the map layers
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加地图图层
- en: 'Now that we have our map, we need to add layers to the map. For the sake of
    this exercise, we''re going to use the San Francisco 311 Feature Service provided
    by ESRI. We''re going to load the feature layer in selection mode, so we only
    affect the features we click on. We''re also going to add the complementary dynamic
    map service, because we can''t see the features without it. We will also set the
    feature layer selection symbol using a simple marker symbol to color the features
    we click on:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了地图，我们需要向地图添加图层。为了这个练习，我们将使用ESRI提供的旧金山311特征服务。我们将以选择模式加载特征层，这样我们只影响我们点击的特征。我们还将添加互补的动态地图服务，因为没有它我们无法看到特征。我们还将使用简单的标记符号设置特征层选择符号，以着色我们点击的特征：
- en: '[PRE8]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: When the map layers are added, we can finally interact with them, both as a
    user and as a developer. We'll add an event listener called `startEditing()` to
    the map's `layers-add-result` event. We'll set up the editing events for the feature
    layer there. We'll add a map click event that draws a feature if something has
    been selected from the menu on the side of the page. Be sure to add this after
    the layers are defined, but before they are added to the map.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 当地图图层被添加后，我们最终可以与之交互，无论是作为用户还是作为开发者。我们将向地图的 `layers-add-result` 事件添加一个名为 `startEditing()`
    的事件监听器。我们将在那里设置要素层的编辑事件。我们将添加一个地图点击事件，如果已从页面侧边的菜单中选择了一些内容，则会绘制一个要素。务必在定义图层之后、将它们添加到地图之前添加此事件。
- en: '[PRE9]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In the preceding code, we've created a `callback` function called `startEditing()`.
    This causes the application to add a new graphic to the editable feature layer
    whenever the map is clicked. Default attributes and a symbol are applied to the
    editable feature. The editable feature layer clears its selection whenever the
    popup is hidden. Also, when the edits are complete, the visible layer is refreshed
    with the new data. The `startEditing()` method is assigned to run when a group
    of layers are added, which causes the layers to be added to the map.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们创建了一个名为 `startEditing()` 的 `callback` 函数。这会导致每当地图被点击时，应用程序都会向可编辑要素层添加一个新的图形。可编辑要素应用了默认属性和符号。每当弹出窗口被隐藏时，可编辑要素层会清除其选择。此外，当编辑完成后，可见层会使用新数据刷新。当一组图层被添加时，`startEditing()`
    方法会被分配执行，这会导致图层被添加到地图中。
- en: Using the proxy
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用代理
- en: If you try to load the map right now, you may get an error. If you don't get
    it now, you might get it when you try to save changes on the map. The reason is
    that these editing operations often require a proxy application to handle data
    which is too large to fit in the approximately 2,048 character limit of most browser
    get requests.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您现在尝试加载地图，可能会出现错误。如果您现在没有出现错误，您可能在尝试在地图上保存更改时出现错误。原因是这些编辑操作通常需要一个代理应用程序来处理数据，这些数据太大，无法适应大多数浏览器
    GET 请求的大约 2,048 个字符的限制。
- en: Note
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can follow the instructions ESRI provides to set up a proxy service at [https://developers.arcgis.com/javascript/jshelp/ags_proxy.html](https://developers.arcgis.com/javascript/jshelp/ags_proxy.html).
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以遵循 ESRI 提供的说明来设置代理服务，请参阅 [https://developers.arcgis.com/javascript/jshelp/ags_proxy.html](https://developers.arcgis.com/javascript/jshelp/ags_proxy.html)。
- en: 'Proxies come in three varieties, based on your application environment. ESRI
    provides proxy services in PHP, Java, and .Net. We''ll add a reference to the
    proxy in our application. This example shows how it''s done with a .Net based
    proxy:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 代理根据您的应用程序环境有三种类型。ESRI 提供了基于 PHP、Java 和 .Net 的代理服务。我们将在应用程序中添加对代理的引用。以下示例展示了如何使用基于
    .Net 的代理来完成此操作：
- en: '[PRE10]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Finding the user's location
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查找用户的位置
- en: 'Our client requested that the app provide the user with the ability to find
    them on the map, should they be using a mobile device or a laptop on Wi-Fi. We
    can provide that functionality by adding an ArcGIS dijit called `LocateButton`.
    We load the module in our application, initialize it when the map is ready, and
    it''s good to go. The code to load it should look something like this:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的客户要求应用程序能够使用户在地图上找到他们，无论他们是在使用移动设备还是 Wi-Fi 上的笔记本电脑。我们可以通过添加一个名为 `LocateButton`
    的 ArcGIS dijit 来提供该功能。我们在应用程序中加载该模块，在地图准备好时初始化它，然后就可以使用了。加载它的代码可能看起来像这样：
- en: '[PRE11]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If we insert a `<div>` with an `id` of `locatebutton` inside the map `ContentPane`,
    and view the page in our browser, we''ll see the locate button above the map,
    pushing the map down. We''d much rather locate it near the other zoom in and out
    buttons. We''ll add the following styling to the `style.css` sheet to achieve
    that:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在地图 `ContentPane` 内插入一个具有 `id` 为 `locatebutton` 的 `<div>`，并在我们的浏览器中查看页面，我们会看到定位按钮位于地图上方，将地图向下推。我们更愿意将它定位在其他的缩放按钮附近。我们将添加以下样式到
    `style.css` 表格中以达到这个目的：
- en: '[PRE12]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The template picker
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模板选择器
- en: 'For our application, we''re going to use the ArcGIS JavaScript API''s template
    picker to select incident point types to add to the map. We''ll load them in the
    side pane on the page, and make them one column wide to add features. We''ll pass
    that feature template to the `selected` variable when the feature template is
    selected. Finally, we''ll load all this when both the map and the feature layers
    have loaded:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的应用程序，我们将使用 ArcGIS JavaScript API 的模板选择器来选择要添加到地图中的事件点类型。我们将在页面侧边栏中加载它们，并将它们设置为单列宽以添加要素。当选择要素模板时，我们将该要素模板传递给
    `selected` 变量。最后，当地图和要素层都加载完成后，我们将加载所有这些内容：
- en: '[PRE13]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The attribute inspector
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 属性检查器
- en: Now that we are able to add new features to the map, we need a way to edit the
    content of those features. To do that, we'll add the attribute inspector. We're
    going to initialize the attribute inspector and tie it to the map's `infoWindow`.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们能够向地图添加新功能，我们需要一种方法来编辑这些功能的内容。为此，我们将添加属性检查器。我们将初始化属性检查器并将其绑定到地图的`infoWindow`。
- en: '[PRE14]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We'll need to add a little positioning style to the save button on the attribute
    inspector. We'll add this entry to position the save button in the `style.css`
    sheet so that it doesn't overlap the delete button.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在属性检查器的保存按钮上添加一点定位样式。我们将把这个条目添加到`style.css`样式表中，以便它不会覆盖删除按钮。
- en: '[PRE15]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now that the attribute inspector is loaded, we can incorporate it into the
    click events for both the map layer and the incident layer. We''ll create a `showInspector()`
    function that accepts a map click event. It will query the `incidentLayer` for
    any features in that location, and pull up a map `infoWindow` with the attribute
    inspector inside. It will also assign the selected graphic (if any) to:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 现在属性检查器已加载，我们可以将其集成到地图层和事件层的点击事件中。我们将创建一个`showInspector()`函数，该函数接受一个地图点击事件。它将查询`incidentLayer`以获取该位置上的任何功能，并弹出一个包含属性检查器的地图`infoWindow`。它还将选定的图形（如果有）分配给：
- en: '[PRE16]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The result of the preceding code is shown in the following screenshot:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 前面代码的结果显示在下述屏幕截图：
- en: '![The attribute inspector](img/6459_05_06.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![属性检查器](img/6459_05_06.jpg)'
- en: Securing the application
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保护应用程序
- en: Now that we have a working incident reporting application, it's time to think
    about how we can secure the application. It's a public application, so the public
    should be allowed to submit problems. However, we don't want data that doesn't
    fit our data schema, or our representative boundaries.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有一个工作状态的事件报告应用程序，是时候考虑如何保护应用程序了。这是一个公开的应用程序，因此公众应该被允许提交问题。然而，我们不希望数据不符合我们的数据模式，或者我们的代表边界。
- en: 'One way we can secure our application from bad input is to restrict the locations
    where we accept changes. We don''t want employee time wasted investigating complaints
    logged outside the city, state, or even country. We can do this by using the city
    extent supplied at the beginning of the application. We can test if the clicked
    point is inside the city extent in the click event, and notify the client if it''s
    not. That should look something like the following:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以确保应用程序免受不良输入影响的一种方法是对我们接受更改的位置进行限制。我们不希望员工浪费时间调查记录在市、州甚至国家之外的系统投诉。我们可以通过使用应用程序开始时提供的城市范围来实现这一点。我们可以在点击事件中测试点击的点是否位于城市范围内，如果不在，就通知客户端。这应该看起来像下面这样：
- en: '[PRE17]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Speaking of working with extents, we could also lock the selection buttons when
    navigating outside the city area. This would alert the user that we aren't accepting
    complaints outside the city proper. Of course, we should notify the user why they
    are locked out.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 谈到与范围一起工作，我们还可以在导航出城市区域时锁定选择按钮。这将提醒用户我们不接受城市区域外的投诉。当然，我们应该通知用户他们为何被锁定。
- en: 'We''ll start by adding blocking content and notifications in the HTML. We''ll
    add two `divs` to the page, a `<div>` with the id `outsidemessage` in the map,
    and a div with the id `blockerdiv` next to the editor `div`. We''ll leave the
    two of them hidden by default, by adding the inline style `display: none`. It
    should look like the following:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '我们将从在HTML中添加阻塞内容和通知开始。我们将在页面上添加两个`div`，一个具有`outsidemessage` ID的`div`位于地图中，另一个`div`与编辑`div`相邻，具有`blockerdiv`
    ID。我们将通过添加内联样式`display: none`将它们默认设置为隐藏。它应该看起来像下面这样：'
- en: '[PRE18]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: We'll add the following styling to the `style.css` file to style these items.
    The outside message will be gray block floating in the lower middle portion of
    the map, with text big enough to read, and with rounded corners (because lots
    of people like rounded corners). The blocking `div` will be positioned directly
    on top of the template picker buttons. The blocking `div` will be light gray,
    semi-transparent, and cover the entire template picker when visible.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`style.css`文件中添加以下样式来美化这些项目。外部消息将以灰色块状浮动在地图的中间部分，文字足够大以便阅读，并且具有圆角（因为很多人喜欢圆角）。阻塞的`div`将直接位于模板选择按钮的上方。当可见时，阻塞的`div`将是浅灰色，半透明，并覆盖整个模板选择器。
- en: '[PRE19]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We''ll add some code to our `app.js` file to handle the visibility of these
    two nodes. We can listen for changes in the map''s extent. When the map''s extent
    is outside the city extent, and they no longer intersect, both the message div
    and the blocker div will be made visible (`display: block;`). If the user can
    see some of the extent of the viewing area, the `div` objects will be hidden again
    (`display: none;`). It should look like this:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '我们将在`app.js`文件中添加一些代码来处理这两个节点的可见性。我们可以监听地图范围的更改。当地图的范围超出城市范围，并且它们不再相交时，消息div和阻塞性div都将变为可见（`display:
    block;`）。如果用户可以看到查看区域的一部分，`div`对象将再次隐藏（`display: none;`）。它应该看起来像这样：'
- en: '[PRE20]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We''ll also add an event handler to the outside message `div` that lets the
    user click to go back to the starting location for the map. We''ll load the `dojo/on`
    event to handle the `click` event:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将向外部消息`div`添加一个事件处理程序，允许用户点击返回地图的起始位置。我们将加载`dojo/on`事件来处理`click`事件：
- en: '[PRE21]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now, when we load our application and pan our way outside the city limits,
    the following message should appear:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们加载我们的应用程序并平移到城市界限之外时，应该出现以下消息：
- en: '![Securing the application](img/6459_05_07.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![保护应用程序](img/6459_05_07.jpg)'
- en: Limiting data entry
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 限制数据输入
- en: As well as stopping bad user input from clicks, we should also consider stopping
    bad user input from text editing. We can pull that off by modifying the `layerInfos`
    array assigned to the attribute inspector. We'll start by getting rid of the delete
    button, since we don't want citizens deleting everybody else's complaints. We'll
    also modify the `fieldInfos` list and set some of the fields to display only when
    they are edited in the attribute inspector. In this case, we'll leave the `req_type`,
    address, and district tabs open for editing.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 除了阻止来自点击的不良用户输入外，我们还应该考虑阻止来自文本编辑的不良用户输入。我们可以通过修改分配给属性检查器的`layerInfos`数组来实现这一点。我们将首先移除删除按钮，因为我们不希望市民删除其他人的投诉。我们还将修改`fieldInfos`列表，并将一些字段设置为仅在属性检查器中编辑时显示。在这种情况下，我们将保留`req_type`、地址和区域标签页以供编辑。
- en: '[PRE22]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: These are a few of the simple things we can do to help secure our application
    against unwanted results, and yet still make the application user-friendly to
    the general public.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是我们可以做的简单事情之一，以帮助保护我们的应用程序免受不受欢迎的结果的影响，同时仍然使应用程序对公众用户友好。
- en: Summary
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we've examined the tools and processes that ArcGIS Server and
    the ArcGIS API for JavaScript provide to make web editing possible. We looked
    at what goes into an editable feature service. We also looked into the various
    widgets that come with the ArcGIS JavaScript API for adding new features, editing
    geometries, and editing property attributes. We finished by creating an application
    that uses the editing tools to create an incident reporting application, with
    which users can report problems in the city on the map.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了ArcGIS Server和ArcGIS API for JavaScript提供的工具和流程，以使网络编辑成为可能。我们研究了可编辑要素服务中包含的内容。我们还探讨了ArcGIS
    JavaScript API附带的各种小部件，用于添加新要素、编辑几何形状和编辑属性属性。我们通过创建一个使用编辑工具创建事件报告应用程序的应用程序来结束，用户可以使用该应用程序在地图上报告城市中的问题。
- en: In the next chapter, we'll take the existing data and add a graphical twist.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将对现有数据进行图形上的调整。
