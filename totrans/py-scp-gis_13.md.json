["```py\n@app.route('/nba/api/v0.1/arena/<int:arena_id>', methods=['GET'])\ndef get_arena(arena_id):\n  arena = session.query(Arena).get(arena_id)\n```", "```py\n@app.route('/nba/api/v0.1/county/query/size/<float:size>', methods=['GET'])\ndef get_county_size(size):\n  counties = session.query(County).filter(County.geom.ST_Area() > size).all()\n  data = [{\"type\": \"Feature\", \n  \"properties\":{\"name\":county.name,\"id\":county.id ,\"state\":county.state.name}, \n  \"geometry\":{\"type\":\"MultiPolygon\", \n  \"coordinates\":[shapely.geometry.geo.mapping(to_shape(county.geom))[\"coordinates\"]]},\n  } for county in counties]\n  return jsonify({\"type\": \"FeatureCollection\",\"features\":data})\n```", "```py\nfrom flask import requests, jsonify\n@app.route('/nba/api/v0.1/arenas', methods=['GET'])\ndef get_arenas():\n  if 'name' in request.args:\n       arenas = session.query(Arena).filter(name=request.args['name'])\n  else:\n       arenas = session.query(Arena).all()\n  data = [{\"type\": \"Feature\",  \"properties\":{\"name\":arena.name, \"id\":arena.id}, \n  \"geometry\":{\"type\":\"Point\",\"coordinates\":[round(arena.longitude,6), round(arena.latitude,6)]},\n  } for arena in arenas]\n  return jsonify({\"type\": \"FeatureCollection\",\"features\":data})\n```", "```py\nfrom flask import request\nfrom .forms import AddForm\n@app.route('/nba/api/v0.1/arena/add', methods=['GET', 'POST'])\ndef add_arenas():\n  form = AddForm(request.form)\n  form.name.data = \"New Arena\"\n  form.longitude.data = -121.5\n  form.latitude.data = 37.8\n  if request.method == \"POST\":\n    arena = Arena()\n    arena.name = request.form['name']\n    arena.longitude =float(request.form['longitude'])\n    arena.latitude = float(request.form['latitude'])\n    arena.geom = 'SRID=4326;POINT({0} {1})'.format(arena.longitude, arena.latitude)\n    session.add(arena)\n    data = [{\"type\": \"Feature\", \"properties\":{\"name\":arena.name}, \n    \"geometry\":{\"type\":\"Point\", \n    \"coordinates\":[round(arena.longitude,6), round(arena.latitude,6)]},}]\n    return jsonify({'added':'success',\"type\": \"FeatureCollection\",\"features\":data})\n  return render_template('addarena.html', form=form)\n```", "```py\n@app.route('/nba/api/v0.1/arena/delete/<int:arena_id>', methods=['DELETE'])\ndef delete_arena(arena_id):\n  arena = session.query(Arena).delete(arena_id)\n```", "```py\nfrom application import app\napp.run()\n```", "```py\nimport flask\napp = flask.Flask(__name__)\nconn_string = 'postgresql://{user}:{password}@localhost:5432/chapter11'\napp.config['SQLALCHEMY_DATABASE_URI'] = conn_string \napp.config['SECRET_KEY'] = \"SECRET_KEY\"\nimport application.views\n```", "```py\n# The database connections and session management are managed with SQLAlchemy functions\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy import Column, Integer, String, ForeignKey, Float\nfrom sqlalchemy.orm import sessionmaker, relationship\n# The Geometry columns of the data tables are added to the ORM using the Geometry data type\nfrom geoalchemy2 import Geometry\n```", "```py\nfrom application import app\n# Connect to the database called chapter11 using SQLAlchemy functions\nengine = create_engine(app.config['SQLALCHEMY_DATABASE_URI'])\nSession = sessionmaker(bind=engine)\nsession = Session()\nBase = declarative_base()\n```", "```py\n# Define the Arena class, which will model the Arena database table\nclass Arena(Base):\n    __tablename__ = 'arena'\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n    longitude = Column(Float)\n    latitude = Column(Float)\n    geom = Column(Geometry(geometry_type='POINT', srid=4326))\n```", "```py\n# Define the County class, which will model the County database table\nclass County(Base):\n    __tablename__ = 'county'\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n    state_id = Column(Integer, ForeignKey('state.id'))\n    state_ref = relationship(\"State\",backref='county')\n    geom = Column(Geometry(geometry_type='MULTIPOLYGON', srid=4326))\n```", "```py\n# Define the District class, which will model the District database table\nclass District(Base):\n    __tablename__ = 'district'\n    id = Column(Integer, primary_key=True)\n    district = Column(String)\n    name = Column(String)\n    state_id = Column(Integer, ForeignKey('state.id'))\n    state_ref = relationship(\"State\",backref='district')\n    geom = Column(Geometry(geometry_type='MULTIPOLYGON', srid=4326))\n```", "```py\n# Define the State class, which will model the State database table\nclass State(Base):\n    __tablename__ = 'state'\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n    statefips = Column(String)\n    stpostal = Column(String)\n    counties = relationship('County', backref='state')\n    districts = relationship('District', backref='state')\n    geom = Column(Geometry(geometry_type='MULTIPOLYGON', srid=4326))\n```", "```py\nfrom flask_wtf import FlaskForm\nfrom wtforms import TextField, FloatField\nclass AddForm(FlaskForm):\n  name = TextField('Arena Name')\n  longitude = FloatField('Longitude')\n  latitude = FloatField('Latitude')\n```", "```py\nfrom application import app\nfrom flask import render_template,jsonify, redirect, url_for, request, Markup\nfrom .forms import * \nfrom .models import *\nimport geoalchemy2,shapely\nfrom geoalchemy2.shape import to_shape\n```", "```py\n@app.route('/', methods=['GET'])\ndef get_api():\n  return redirect('/nba/api/v0.1')\n\n@app.route('/nba/api/v0.1', methods=['GET'])\ndef get_endpoints():\n  data= [{'name':\"Arena\", \"endpoint\":\"/arena\"},\n  {'name':\"State\", \"endpoint\":\"/state\"},\n  {'name':\"County\", \"endpoint\":\"/county\"},\n  {'name':\"District\", \"endpoint\":\"/district\"},]\n  return jsonify({\"endpoints\":data})\n```", "```py\n@app.route('/nba/api/v0.1/arena', methods=['GET'])\ndef get_arenas():\n  arenas = session.query(Arena).all()\n  data = [{\"type\": \"Feature\", \"properties\":{\"name\":arena.name, \"id\":arena.id}, \n  \"geometry\":{\"type\":\"Point\", \"coordinates\":[round(arena.longitude,6),               round(arena.latitude,6)]},\n  } for arena in arenas]\n  return jsonify({\"type\": \"FeatureCollection\",\"features\":data})\n```", "```py\n@app.route('/nba/api/v0.1/arena/<int:arena_id>', methods=['GET'])\ndef get_arena(arena_id):\n  arena = session.query(Arena).get(arena_id)\n  data = [{\"type\": \"Feature\",  \"properties\":{\"name\":arena.name, \"id\":arena.id},  \"geometry\":{\"type\":\"Point\", \"coordinates\":[round(arena.longitude,6), round(arena.latitude,6)]}, \n  return jsonify({\"type\": \"FeatureCollection\",\"features\":data})\n```", "```py\n@app.route('/nba/api/v0.1/arena/<arena_name>', methods=['GET'])\ndef get_arena_name(arena_name):\n  arenas = session.query(Arena).filter(Arena.name.like(arena_name+\"%\")).all()\n  data = [{\"type\": \"Feature\",  \"properties\":{\"name\":arena.name,\"id\":arena.id}, \n  \"geometry\":{\"type\":\"Point\",  \"coordinates\":[round(arena.longitude,6), round(arena.latitude,6)]}, \n  } for arena in arenas]\n  return jsonify({\"type\": \"FeatureCollection\",\"features\":data})\n```", "```py\n@app.route('/nba/api/v0.1/arena/<int:arena_id>/intersect', methods=['GET'])\ndef arena_intersect(arena_id):\n  arena = session.query(Arena).get(arena_id)\n  county = session.query(County).filter(County.geom.ST_Intersects(arena.geom)).first()\n  district=session.query(District).filter(District.geom.ST_Intersects(arena.geom))\n  district = district.first()\n  if county != None:\n    data = [{\"type\": \"Feature\", \"properties\": {\"name\":arena.name, \"id\":arena.id,} ,\n    \"geometry\":{\"type\":\"Point\", \"coordinates\":[round(arena.longitude,6), round(arena.latitude,6)]}, \n    },{\"type\": \"Feature\", \"properties\": {\"name\":county.name, \"id\":county.id,} ,\n    \"geometry\":{\"type\":\"MultiPolygon\", \n    \"coordinates\":[shapely.geometry.geo.mapping(to_shape(county.geom))]}, \n    },{\"type\": \"Feature\", \"properties\": {\"name\":district.district, \"id\":district.id,},\n    \"geometry\":{\"type\":\"MultiPolygon\", \n    \"coordinates\":[shapely.geometry.geo.mapping(to_shape(district.geom))]}, \n    },{\"type\": \"Feature\", \"properties\": {\"name\":county.state_ref.name, \"id\":county.state_ref.id,}, \"geometry\":{\"type\":\"MultiPolygon\", \n    \"coordinates\":[shapely.geometry.geo.mapping(to_shape(county.state_ref.geom))]}, \n    }]\n    return jsonify({\"type\": \"FeatureCollection\",\"features\":data})\n  else:\n    return redirect('/nba/api/v0.1/arena/' + str(arena_id))\n```", "```py\n@app.route('/nba/api/v0.1/state', methods=['GET'])\ndef get_states():\n  smapping = shapely.geometry.geo.mapping\n  states = session.query(State).all()\n  data = [{\"type\": \"Feature\", \n  \"properties\":{\"state\":state.name,\"id\":state.id}, \n  \"geometry\":{\"type\":\"MultiPolygon\", \n  \"coordinates\":\"[Truncated]\"},\n  } for state in states]\n  if \"geometry\" in request.args.keys():\n    if request.args[\"geometry\"]=='1' or request.args[\"geometry\"]=='True':\n      data = [{\"type\": \"Feature\", \n      \"properties\":{\"state\":state.name,\"id\":state.id}, \n      \"geometry\":{\"type\":\"MultiPolygon\", \n      \"coordinates\":[smapping(to_shape(state.geom))[\"coordinates\"]]},\n      } for state in states]\n  return jsonify({\"type\": \"FeatureCollection\",\"features\":data})\n```", "```py\n@app.route('/nba/api/v0.1/state/<int:state_id>', methods=['GET'])\ndef get_state(state_id):\n  state = session.query(State).get(state_id)\n  geojson = shapely.geometry.geo.mapping(to_shape(state.geom))\n  data = [{\"type\": \"Feature\",  \"properties\":{\"name\":state.name}, \n  \"geometry\":{\"type\":\"MultiPolygon\",  \"coordinates\":[geojson[\"coordinates\"]]},\n  }]\n  return jsonify({\"type\": \"FeatureCollection\",\"features\":data})\n```", "```py\n@app.route('/nba/api/v0.1/state/<state_name>', methods=['GET'])\ndef get_state_name(state_name):\n  states = session.query(State).filter(State.name.like(state_name+\"%\")).all()\n  geoms = {state.id:smapping(to_shape(state.geom)) for state in states}\n  data = [{\"type\": \"Feature\", \"properties\":{\"state\":state.name}, \n  \"geometry\":{\"type\":\"MultiPolygon\", \n  \"coordinates\":[shapely.geometry.geo.mapping(to_shape(state.geom)[\"coordinates\"]]},\n  } for state in states]\n  return jsonify({\"type\": \"FeatureCollection\",\"features\":data})\n```", "```py\n@app.route('/nba/api/v0.1/state/<int:state_id>/contains', methods=['GET'])\ndef get_state_arenas(state_id):\n  state = session.query(State).get(state_id)\n  shp = to_shape(state.geom)\n  geojson = shapely.geometry.geo.mapping(shp)\n  data = [{\"type\": \"Feature\", \"properties\":{\"name\":state.name}, \n  \"geometry\":{\"type\":\"MultiPolygon\", \"coordinates\":[geojson]},\n  }]\n  arenas = session.query(Arena).filter(state.geom.ST_Contains(arena.geom))\n  data_arenas =[{\"type\": \"Feature\",\n  \"properties\":{\"name\":arena.name}, \"geometry\":{\"type\":\"Point\", \n  \"coordinates\":[round(arena.longitude,6), round(arena.latitude,6)]}, \n  } for arena in arenas]\n  data.extend(data_arenas)\n  return jsonify({\"type\": \"FeatureCollection\",\"features\":data})\n```", "```py\n@app.route('/nba/api/v0.1/county', methods=['GET'])\ndef get_counties():\n  counties = session.query(County).all()\n  geoms = {county.id:smapping(to_shape(county.geom)) for county in counties}\n if 'geometry' in request.args.keys():\n      data = [{\"type\": \"Feature\", \n      \"properties\":{\"name\":county.name, \"state\":county.state.name}, \n      \"geometry\":{\"type\":\"MultiPolygon\", \n  \"coordinates\":[shapely.geometry.geo.mapping(to_shape(state.geom)[\"coordinates\"]]},\n       } for county in counties]\n else:\n      data = [{\"type\": \"Feature\", \n      \"properties\":{\"name\":county.name, \"state\":county.state.name}, \n      \"geometry\":{\"type\":\"MultiPolygon\", \n  \"coordinates\":[\"Truncated\"]},\n       } for county in counties]\n  return jsonify({\"type\": \"FeatureCollection\",\"features\":data})\n```", "```py\n@app.route('/nba/api/v0.1/county/<int:county_id>', methods=['GET'])\ndef get_county(county_id):\n  county = session.query(County).get(county_id)\n  shp = to_shape(county.geom)\n  geojson = shapely.geometry.geo.mapping(shp)\n  data = [{\"type\": \"Feature\",\n  \"properties\":{\"name\":county.name, \"state\":county.state.name}, \n  \"geometry\":{\"type\":\"MultiPolygon\", \n  \"coordinates\":[geojson]},\n  }]\n  return jsonify({\"type\": \"FeatureCollection\",\"features\":data})\n```", "```py\n@app.route('/nba/api/v0.1/county/<county_name>', methods=['GET'])\ndef get_county_name(county_name):\n  counties = session.query(County).filter(County.name.like(county_name+\"%\")).all()\n  data = [{\"type\": \"Feature\", \n  \"properties\":{\"name\":county.name, \"state\":county.state.name}, \n  \"geometry\":{\"type\":\"MultiPolygon\", \n  \"coordinates\":[shapely.geometry.geo.mapping(to_shape(county.geom))[\"coordinates\"]]},\n  } for county in counties]\n  return jsonify({\"type\": \"FeatureCollection\",\"features\":data})\n```", "```py\n@app.route('/nba/api/v0.1/district', methods=['GET'])\ndef get_districts():\n  districts = session.query(District).all()\n  if 'geometry' in request.args.keys() and request.args['geometry'] in ('1','True'):\n    data = [{\"type\": \"Feature\", \n    \"properties\":{\"representative\":district.name, \"district\":district.district,\n \"state\": district.state_ref.name, \"id\":district.id}, \n    \"geometry\":{\"type\":\"MultiPolygon\", \n    \"coordinates\":shapely.geometry.geo.mapping(to_shape(district.geom))[\"coordinates\"]},\n    } for district in districts]\n  else:\n    data = [{\"type\": \"Feature\", \n    \"properties\":{\"representative\":district.name, \"district\":district.district,\n    \"state\": district.state_ref.name, \"id\":district.id}, \n    \"geometry\":{\"type\":\"MultiPolygon\", \n    \"coordinates\":[\"Truncated\"]},\n    } for district in districts]\n  return jsonify({\"type\": \"FeatureCollection\",\"features\":data})\n```", "```py\n@app.route('/nba/api/v0.1/district/<int:district_id>', methods=['GET'])\ndef get_district(district_id):\n  district = session.query(District).get(district_id)\n shp = to_shape(district.geom)\n geojson = shapely.geometry.geo.mapping(shp)\n  data = [{\"type\": \"Feature\",\n  \"properties\":{\"district\":district.district,\"id\":district.id}, \n  \"geometry\":{\"type\":\"MultiPolygon\", \n  \"coordinates\":[geojson['coordinates']]},\n  }]\n  return jsonify({\"type\": \"FeatureCollection\",\"features\":data})\n```", "```py\n@app.route('/nba/api/v0.1/district/<dist>', methods=['GET'])\ndef get_district_name(dist):\n  districts = session.query(District).filter(District.district.like(dist+\"%\")).all()\n  data = [{\"type\": \"Feature\", \n  \"properties\":{\"district\":district.district,\"id\":district.id, \n  \"representative\":district.name},   \"geometry\":{\"type\":\"MultiPolygon\", \n  \"coordinates\":shapely.geometry.geo.mapping(to_shape(district.geom))[\"coordinates\"]},\n  } for district in districts]\n  return jsonify({\"type\": \"FeatureCollection\",\"features\":data})\n```", "```py\n@app.route('/nba/api/v0.1/arena/add', methods=['GET', 'POST'])\ndef add_arenas():\n  form = AddForm(request.form)\n  form.name.data = \"New Arena\"\n  form.longitude.data = -121.5\n  form.latitude.data = 37.8\n  if request.method == \"POST\":\n    arena = Arena()\n    arena.name = request.form['name']\n    arena.latitude = float(request.form['latitude'])    \n    arena.longitude = float(request.form['longitude'])\n    arena.geom = 'SRID=4326;POINT({0} {1})'.format(arena.longitude, arena.latitude)\n    session.add(arena)\n    data = [{\"type\": \"Feature\", \"properties\":{\"name\":arena.name}, \n    \"geometry\":{\"type\":\"Point\", \n    \"coordinates\":[round(arena.longitude,6), round(arena.latitude,6)]},}]\n    return jsonify({'added':'success',\"type\": \"FeatureCollection\",\"features\":data})\n  return render_template('addarena.html', form=form)\n```", "```py\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Arena Map</title>\n  <meta charset=\"utf-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.2.0/dist/leaflet.css\" />\n <script src=\"img/leaflet.js\"></script>\n    <script src=\"img/jquery.min.js\"></script>\n</head>\n```", "```py\n<body>\n<div id=\"map\" style=\"width: 600px; height: 400px;\"></div>\n<script>\n  var themap = L.map('map').setView([ {{form.latitude.data}},{{form.longitude.data}}], 13);\n  L.tileLayer('https://stamen-tiles-{s}.a.ssl.fastly.net/toner/{z}/{x}/{y}.{ext}', {\n  subdomains: 'abcd',\n  minZoom: 1,\n  maxZoom: 18,\n  ext: 'png'\n  }).addTo(themap);\n  marker = L.marker([ {{form.latitude.data}},{{form.longitude.data}}]).addTo(themap)\n    .bindPopup(\"Click to locate the new arena\").openPopup();\n  var popup = L.popup();\n  function showMapClick(e) {\n $('#longitude').val(e.latlng.lng);\n $('#latitude').val(e.latlng.lat);\n    marker\n      .setLatLng(e.latlng)\n      .bindPopup(\"You added a new arena at \" + e.latlng.toString())\n      .openPopup();\n  }\n  themap.on('click', showMapClick);\n</script>\n```", "```py\n  <form method=\"post\" class=\"form\">\n    Name: {{form.name}}<br>\n    Longitude: {{ form.longitude(class_ = 'form-control first-input last-input', placeholder = form.longitude.data, ) }} <br>\n    Latitude: {{ form.latitude(class_ = 'form-control first-input last-input', placeholder = form.latitude.data, ) }} <br>\n    <input type=\"submit\" value=\"Add Arena\">\n  </form>\n</body>\n</html>\n```", "```py\n>>> form = {'longitude':'-109.5', 'latitude':'40.7', 'name':'Test Arena'}\n>>> requests.post('http://127.0.0.1:5000/nba/api/v0.1/arena/add', form)\n<Response [200]>\n```", "```py\n@app.route('/nba/api/v0.1/arena/delete/<int:arena_id>', methods=['DELETE'])\ndef delete_arena(arena_id):\n  arena = session.query(Arena).delete(arena_id)\n  return jsonify({\"deleted\":\"success\"})\n```", "```py\n>>> import requests\n>>>requests.delete('http://127.0.0.1:5000/nba/api/v0.1/arena/delete/30')\n```", "```py\nC:\\Projects\\Chapter13\\arenaapp>python app.py\n * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n```"]