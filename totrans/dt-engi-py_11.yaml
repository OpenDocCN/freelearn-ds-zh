- en: '*Chapter 9*: Monitoring Data Pipelines'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第9章*：监控数据管道'
- en: You now know how to build data pipelines that are production ready—they are
    idempotent, use atomic transactions, and are version controlled. They are ready
    to start running in production, but before you can deploy them, you need to be
    able to monitor them. There will be errors in the code, in the data, in the network,
    or in other areas outside your control. You will need to know when errors happen,
    and when things are running as they should.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在知道如何构建生产就绪的数据管道——它们是幂等的、使用原子事务，并且是版本控制的。它们准备好在生产环境中运行，但在您部署它们之前，您需要能够监控它们。代码、数据、网络或其他您无法控制区域可能会出现错误。您需要知道错误何时发生，以及何时一切按预期运行。
- en: 'In this chapter, we''re going to cover the following main topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Monitoring NiFi in the GUI
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在GUI中监控NiFi
- en: Monitoring NiFi using processors
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用处理器监控NiFi
- en: Monitoring NiFi with Python and the REST API
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Python和REST API监控NiFi
- en: Monitoring NiFi using the GUI
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用GUI监控NiFi
- en: The NiFi GUI provides several ways to monitor your data pipelines. Using the
    GUI is the simplest way to start monitoring your NiFi instance.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: NiFi GUI提供了几种监控数据管道的方法。使用GUI是开始监控NiFi实例的最简单方法。
- en: Monitoring NiFi with the status bar
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用状态栏监控NiFi
- en: 'Much of the information you need is on the status bar. The status bar is below
    the component toolbar and looks like the following screenshot:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要的大部分信息都在状态栏上。状态栏位于组件工具栏下方，如下面的屏幕截图所示：
- en: '![Figure 9.1 – Component and status toolbars'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.1 – 组件和状态工具栏'
- en: '](img/Figure_9.1_B15739.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.1_B15739.jpg)'
- en: Figure 9.1 – Component and status toolbars
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.1 – 组件和状态工具栏
- en: 'Starting at the left of the status bar, let''s look at what is being monitored:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 从状态栏的左侧开始，让我们看看正在监控的内容：
- en: '**Active thread**: This lets you know how many threads are running. You can
    get a sense of tasks and load.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**活动线程**：这可以让您知道有多少线程正在运行。您可以了解任务和负载。'
- en: '**Total queued data**: The number of flowfiles and the combined size on disk.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**总排队数据**：flowfiles的数量和磁盘上的总大小。'
- en: '**Transmitting remote process groups and not transmitting remote process groups**:
    You can run NiFi on multiple machines or instances on the same machine and allow
    process groups to communicate. These icons tell you whether they are or are not
    communicating.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**是否传输远程进程组和不传输远程进程组**：您可以在多台机器或同一台机器上的多个实例上运行NiFi，并允许进程组进行通信。这些图标告诉您它们是否正在通信。'
- en: '**Running components, stopped components, invalid components, and disabled
    components**: These show you the state of your components. Running does not necessarily
    mean that a component is currently processing data, but that it is on and scheduled
    to do so.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运行中的组件、停止的组件、无效的组件和禁用的组件**：这些显示您组件的状态。运行不一定意味着组件当前正在处理数据，但表示它已开启并计划这样做。'
- en: '**Up-to-date versioned process groups, locally modified versioned process groups,
    stale versioned process groups, locally modified and stale versioned process groups,
    and sync failure versioned process groups**: This group of icons show the versioning
    information of your processor groups. From here you can tell if you have uncommitted
    changes or are using older versions.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最新版本的进程组、本地修改的版本化进程组、过时的版本化进程组、本地修改和过时的版本化进程组以及同步失败版本化进程组**：这组图标显示了您的处理器组的版本信息。从这里您可以判断是否有未提交的更改或是否使用较旧版本。'
- en: '**Last refresh**: This lets you know when the data in the toolbar is valid
    for. The refresh is usually every five minutes.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最后刷新**：这可以让您知道工具栏中的数据何时有效。刷新通常每五分钟进行一次。'
- en: 'The status bar gives you the monitoring information for all of your processors,
    but there is also a status toolbar on every processor group and for each processor.
    You can see the status of the same metrics in the **SCF** processor group, as
    shown in the following screenshot:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 状态栏为您提供所有处理器的监控信息，但每个处理器组以及每个处理器都有一个状态工具栏。您可以在以下屏幕截图中看到相同指标的监控状态：
- en: '![Figure 9.2 – Processor group monitoring'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.2 – 处理器组监控'
- en: '](img/Figure_9.2_B15739.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.2_B15739.jpg)'
- en: Figure 9.2 – Processor group monitoring
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.2 – 处理器组监控
- en: 'The **In** and **Out** metrics show if there is data flowing into the process
    group from another processor or group. You will learn how to connect processor
    groups in the next chapter. The versioning information is not on the toolbar but
    to the left of the title of the processor group. The red square on the right of
    the processor group is a **bulletin**. This provides information on errors within
    the processor group. Hovering over it shows the error, as shown in the following
    screenshot:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**输入**和**输出**指标显示是否有数据从另一个处理器或组流入处理组。您将在下一章中学习如何连接处理器组。版本信息不在工具栏上，而在处理器组标题的左侧。处理器组右侧的红色方块是一个**公告**。这提供了处理器组内错误的信息。悬停在它上面会显示错误，如下面的屏幕截图所示：'
- en: '![Figure 9.3 – Looking at the bulletin on a processor group'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.3 – 查看处理器组的公告'
- en: '](img/Figure_9.3_B15739.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_9.3_B15739.jpg)'
- en: Figure 9.3 – Looking at the bulletin on a processor group
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.3 – 查看处理器组的公告
- en: 'I currently do not have Elasticsearch running and as a result, the processor
    that sends data to Elasticsearch is failing with a connection timeout. If you
    enter the processor group, you can see the bulletin on the specific processor,
    as shown in the following screenshot:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我目前没有运行 Elasticsearch，因此将数据发送到 Elasticsearch 的处理器由于连接超时而失败。如果您进入处理器组，您可以看到特定处理器的公告，如下面的屏幕截图所示：
- en: '![Figure 9.4 – The bulletin on a specific processor'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.4 – 特定处理器的公告'
- en: '](img/Figure_9.4_B15739.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_9.4_B15739.jpg)'
- en: Figure 9.4 – The bulletin on a specific processor
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.4 – 特定处理器的公告
- en: 'To change the bulletin messages, you can adjust the level in the processor
    configuration under **Settings**. The **Bulletin Level** dropdown allows you to
    show more or less based on severity, as shown in the following screenshot:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改公告消息，您可以在**设置**下的处理器配置中调整级别。**公告级别**下拉菜单允许您根据严重性显示更多或更少的内容，如下面的屏幕截图所示：
- en: '![Figure 9.5 – Setting the Bulletin Level'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.5 – 设置公告级别'
- en: '](img/Figure_9.5_B15739.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_9.5_B15739.jpg)'
- en: Figure 9.5 – Setting the Bulletin Level
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.5 – 设置公告级别
- en: 'You can see the bulletin information for all your NiFi processors using the
    **Bulletin Board**, which is accessed from the waffle menu in the upper-right
    corner of NiFi. Selecting the **Bulletin Board** will show all the messages, as
    shown in the following screenshot:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用**公告板**查看所有 NiFi 处理器的公告信息，公告板可通过 NiFi 上方右角的格子菜单访问。选择**公告板**将显示所有消息，如下面的屏幕截图所示：
- en: '![Figure 9.6 – Bulletin Board showing all the notices'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.6 – 显示所有通知的公告板'
- en: '](img/Figure_9.6_B15739.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_9.6_B15739.jpg)'
- en: Figure 9.6 – Bulletin Board showing all the notices
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.6 – 显示所有通知的公告板
- en: 'Within each processor group, every processor also has status information, as
    shown in the following screenshot:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个处理器组中，每个处理器也有状态信息，如下面的屏幕截图所示：
- en: '![Figure 9.7 – Status of a single processor'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.7 – 单个处理器的状态'
- en: '](img/Figure_9.7_B15739.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_9.7_B15739.jpg)'
- en: Figure 9.7 – Status of a single processor
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.7 – 单个处理器的状态
- en: The **In** and **Out** metrics in a processor show how much data (the flowfiles
    size) has passed through the processor in the last five minutes.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 处理器中的**输入**和**输出**指标显示在过去五分钟内有多少数据（流文件大小）通过了处理器。
- en: Using counters
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用计数器
- en: Similar to bulletins, you can create increment- or decrement-counters. Counters
    don't tell you that something succeeded or failed, but they can give you an idea
    of how many flowfiles are being processed at any point in a data pipeline.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 与公告类似，您可以创建递增或递减计数器。计数器不会告诉您某事是否成功或失败，但它们可以给您一个关于在任何数据管道中的任何一点正在处理多少流文件的线索。
- en: 'In the `UpdateCounter` processor between the `EvaluateJsonPath` and `ElasticSCF`
    processors. This means that before a flowfile is inserted into Elasticsearch,
    the counter will be updated. The flow is shown in the following screenshot:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `EvaluateJsonPath` 和 `ElasticSCF` 处理器之间的 `UpdateCounter` 处理器中。这意味着在流文件被插入
    Elasticsearch 之前，计数器将被更新。流程如下面的屏幕截图所示：
- en: '![Figure 9.8 – The UpdateCounter processor added to the data pipeline'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.8 – 添加到数据管道的 UpdateCounter 处理器'
- en: '](img/Figure_9.8_B15739.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_9.8_B15739.jpg)'
- en: Figure 9.8 – The UpdateCounter processor added to the data pipeline
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.8 – 添加到数据管道的 UpdateCounter 处理器
- en: 'As you can see in the preceding screenshot, 162 flowfiles were sent through
    the processor. You will see the results of this later in this section. But first,
    to configure the processor, you will need to specify **Counter Name** and **Delta**.
    **Delta** is the number to increment or decrement by. I have configured the processor
    as shown in the following screenshot:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如前述截图所示，162个flowfiles通过处理器发送。你将在本节后面的内容中看到这些结果。但首先，为了配置处理器，你需要指定**计数器名称**和**增量**。**增量**是增加或减少的数值。我已经按照以下截图所示配置了处理器：
- en: '![Figure 9.9 – Configuration of the UpdateCounter processor'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 9.9 – UpdateCounter处理器的配置'
- en: '](img/Figure_9.9_B15739.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_9.9_B15739.jpg](img/Figure_9.9_B15739.jpg)'
- en: Figure 9.9 – Configuration of the UpdateCounter processor
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 9.9 – UpdateCounter处理器的配置
- en: 'When you have configured the processor and ran the data pipeline, you will
    have a count. Earlier, 162 records passed through the data pipeline when I ran
    it. To see your counters, click the waffle menu in the top-right corner of the
    NiFi window and select **Counters**, as shown in the following screenshot:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当你配置了处理器并运行了数据管道后，你将有一个计数。在我运行它之前，162条记录通过了数据管道。要查看你的计数器，点击NiFi窗口右上角的蜂巢菜单，并选择**计数器**，如图所示：
- en: '![Figure 9.10 – NiFi Counters'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 9.10 – NiFi计数器'
- en: '](img/Figure_9.10_B15739.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_9.10_B15739.jpg](img/Figure_9.10_B15739.jpg)'
- en: Figure 9.10 – NiFi Counters
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 9.10 – NiFi计数器
- en: The preceding screenshot shows the counts of the counter and an aggregate. If
    we had other `UpdateCounter` processors that updated the same counter, it would
    aggregate those values.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 上述截图显示了计数器的计数和聚合值。如果我们有其他更新相同计数器的`UpdateCounter`处理器，它将聚合这些值。
- en: Using the GUI is an excellent way to quickly see how your processor groups and
    processors are running. But you can also use processors to monitor the data pipeline.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 使用GUI是快速查看你的处理器组和处理器运行情况的好方法。但你也可以使用处理器来监控数据管道。
- en: In the previous section, you learned about the NiFi bulletin. You can use background
    tasks to monitor NiFi and post that data to the NiFi bulletin using reporting
    tasks. Reporting tasks are like processors that run in the background and perform
    a task. The results will appear in the bulletin or you can send it to other locations.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，你学习了关于NiFi公告板的内容。你可以使用后台任务来监控NiFi，并通过报告任务将数据发布到NiFi公告板。报告任务就像在后台运行的处理器，执行任务。结果将显示在公告板中，或者你可以将其发送到其他位置。
- en: 'To create a reporting task, in the waffle menu, select **Controller Settings**,
    then navigate to the **Reporting Task** tab. The list should be blank, but you
    can add a new task using the plus sign on the right-hand corner of the window.
    You will see a list of tasks that are available. Single-click on one to see the
    description. You should see a list similar to the following screenshot:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建报告任务，在蜂巢菜单中选择**控制器设置**，然后导航到**报告任务**选项卡。列表应该是空的，但你可以在窗口右上角的加号处添加一个新任务。你将看到可用任务的列表。单击其中一个以查看描述。你应该会看到一个类似于以下截图的列表：
- en: '![Figure 9.11 – Reporting tasks available in NiFi'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 9.11 – NiFi中可用的报告任务'
- en: '](img/Figure_9.11_B15739.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_9.11_B15739.jpg](img/Figure_9.11_B15739.jpg)'
- en: Figure 9.11 – Reporting tasks available in NiFi
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 9.11 – NiFi中可用的报告任务
- en: 'For this example, double click the **MonitorDiskUsage** task. It will appear
    on the list with the ability to edit. Click the pencil to edit, set the **Threshold**
    to **1%**, and set the directory to your NiFi directory. The configuration will
    look like the following screenshot:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，双击**MonitorDiskUsage**任务。它将出现在可编辑的列表中。点击铅笔图标进行编辑，将**阈值**设置为**1%**，并将目录设置为您的NiFi目录。配置将类似于以下截图：
- en: '![Figure 9.12 – Configuring the MonitorDiskUsage task'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 9.12 – 配置MonitorDiskUsage任务'
- en: '](img/Figure_9.12_B15739.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_9.12_B15739.jpg](img/Figure_9.12_B15739.jpg)'
- en: Figure 9.12 – Configuring the MonitorDiskUsage task
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 9.12 – 配置MonitorDiskUsage任务
- en: You can use a percentage or a value such as 20 gigabytes. I have set it to 1%
    so that it will post to the bulletin. I chose the NiFi directory because it contains
    all the logs and repositories.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用百分比或20千兆字节这样的值。我将其设置为1%，以便将其发布到公告板。我选择NiFi目录，因为它包含所有日志和存储库。
- en: 'Running the **Reporting Task** processor, you should see a bulletin in the
    main NiFi window. The message will be that the **MonitorDiskUsage** task exceeded
    the 1% threshold. The following screenshot shows the bulletin:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 运行**报告任务**处理器，你应该在主NiFi窗口中看到一个公告板。消息将是**MonitorDiskUsage**任务超过了1%的阈值。以下截图显示了公告板：
- en: '![Figure 9.13 – The Reporting Task bulletin'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 9.13 – 报告任务公告板'
- en: '](img/Figure_9.13_B15739.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.13 – The Reporting Task bulletin
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: You can create reporting tasks for many other metrics. Using the GUI is useful
    and convenient, but you will most likely not be able to sit in front of NiFi watching
    it all day. This would be horribly inefficient. A better method would be to have
    NiFi send you a message. You can do this using processors. The next section will
    show you how.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring NiFi with processors
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Instead of relying on watching the NiFi GUI, you can insert a processor into
    your data pipeline to report what is happening with the pipeline. For example,
    you can use the `PutSlack` processor to send messages on failures or success.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: 'To send Slack messages, you will need to create an app in your Slack workspace.
    You can do this by browsing to [https://api.slack.com/apps](https://api.slack.com/apps).
    Click **Create New App**, as shown in the following screenshot:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.14 – Creating a new app'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.14_B15739.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.14 – Creating a new app
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: 'Slack will ask you to name your app and then select a workspace, as shown in
    the following screenshot:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.15 – Specifying a name and workspace for your app'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.15_B15739.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.15 – Specifying a name and workspace for your app
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: 'When finished, you will be redirected to the app page. Under the **Features**
    heading, click **Incoming Webhooks** and turn it on, as shown in the following
    screenshot:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.16 – Activating Incoming Webhooks'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.16_B15739.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.16 – Activating Incoming Webhooks
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: You will be asked to select a channel for the webhook. I selected myself so
    that the channel becomes a direct message to me. You can create a channel for
    the data pipeline so that multiple people can join and see the messages. Once
    you have completed this step, scroll to the bottom of the page to see the new
    webhook. Click the copy button and open NiFi. It is time to add `PutSlack` to
    your data pipeline.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: 'In NiFi, I have opened the **SCF** processor group. I found the **ElasticSCF**
    processor—the processor that sends the issues in to Elasticsearch. Drag and drop
    the processor icon in the control toolbar to the canvas and select **PutSlack**.
    Create a connection between **ElasticSCF** and **PutSlack** for the relationship
    failure, as shown in the following screenshot:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.17 – PutSlack added to the end of the data pipeline'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.17_B15739.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.17 – PutSlack added to the end of the data pipeline
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: 'To configure the `PutSlack` processor, paste the copied URL to the **Webhook
    URL** property. NiFi will hide the URL because it is a sensitive property. The
    **Username** property is whatever you want Slack to display when the message is
    sent. You can also set an icon or an emoji. The **Webhook Text** property is the
    message that will be sent. You can set the message to plain text saying that the
    processor failed, or because the **Webhook Text** property accepts the NiFi expression
    language, you can use a combination of a flowfile attribute with text. I have
    configured the processor as shown in the following screenshot:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.18 – PutSlack configuration'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.18_B15739.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.18 – PutSlack configuration
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: 'I used the append method of the NiFi expression language. The statement is
    as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The preceding statement gets the `id` property, `${id},` and calls append,
    `:append()`. Inside the `append()` method is the text. The result will be a message
    like the one shown in the following screenshot:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.19 – Slack direct message from NiFi'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.19_B15739.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.19 – Slack direct message from NiFi
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: The preceding screenshot is my direct messages. You can see that I added the
    NiFi integration to the workspace, then received a message from NiFi. The message
    is the ID of the **SeeClickFix** issue and some text saying that it failed. I
    can now take action.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: You can use processors to send emails, write files, or perform many other actions
    that you could use to monitor your data pipeline. You can also write your own
    monitoring applications outside of NiFi using Python. The next section will cover
    the NiFi REST API.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: Using Python with the NiFi REST API
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using Python and the NiFi REST API, you could write your own monitoring tools,
    or wire up a dashboard. The NiFi REST API documentation is located at [https://nifi.apache.org/docs/nifi-docs/rest-api/index.html](https://nifi.apache.org/docs/nifi-docs/rest-api/index.html).
    You can see all of the different endpoints by type and some information about
    each of them. This section will highlight some of the endpoints that you have
    covered in this chapter but by using the GUI.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we can look at are the system diagnostics. System diagnostics
    will show you your resource usage. You can see heap size, threads, repository
    usage, and several other metrics. To call the endpoint with requests, you can
    use the following code:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Other endpoints of interest are the processor groups. Using this endpoint,
    you can find basic information about any processor group. You will need to get
    the ID of the group in NiFi. You can find this in the URL as the `processGroupId`
    parameter. With it, you can use the process-groups endpoint, as shown in the following
    code:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The `status` object holds most of the pertinent information that you would
    find in the status toolbar. The output is as follows:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Using the processors endpoint, you can look specifically at a single processor.
    You can use the `status` object to look at the status toolbar information, as
    shown in the following code:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 使用处理器端点，您可以具体查看单个处理器。您可以使用`status`对象查看状态栏信息，如下面的代码所示：
- en: '[PRE4]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Using the NiFi API, you can even look into the queues and download flowfiles.
    To get the contents of a flowfile you need to follow these steps:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 使用NiFi API，您甚至可以查看队列并下载flowfiles。要获取flowfile的内容，您需要遵循以下步骤：
- en: 'Make a listing request to the queue:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向队列发起列表请求：
- en: '[PRE5]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Then you will get the status of the listing request by passing the request
    (`listid`):'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，您将通过传递请求（`listid`）来获取列表请求的状态：
- en: '[PRE6]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Lastly, you will call the flowfiles endpoint, pass the flowfile ID (`ffid`),
    and then request the content. The flowfile is JSON, so the result will be JSON:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，您将调用flowfiles端点，传递flowfile ID（`ffid`），然后请求内容。flowfile是JSON格式，因此结果将是JSON：
- en: '[PRE7]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You now have the contents of an entire flowfile:'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，您已经拥有了整个flowfile的内容：
- en: '[PRE8]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You can clear queues by making a `drop` request:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过发起`drop`请求来清除队列：
- en: '[PRE9]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You can pass the listing request ID to the end of the preceding URL to see that
    it worked. Or you can open NiFi and browse to the queue and you will see that
    it is empty.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以将列表请求ID传递到前面的URL末尾以查看它是否成功。或者，您可以打开NiFi并浏览到队列，您将看到它是空的。
- en: 'You can read the NiFi bulletin by calling the bulletin board endpoint:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过调用公告板端点来读取NiFi公告：
- en: '[PRE10]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The result is a single message saying I do not have Elasticsearch running.
    The output is as follows:'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 结果是一条单一的消息，表示我没有运行Elasticsearch。输出如下：
- en: '[PRE11]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You can also read the counters you created earlier. The following code will
    send a `get` request to the counter endpoint:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还可以读取您之前创建的计数器。以下代码将向计数器端点发送`get`请求：
- en: '[PRE12]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In the following code block, you will see that I have added an additional counter:'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在下面的代码块中，您将看到我添加了一个额外的计数器：
- en: '[PRE13]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Lastly, you can also get information on your reporting tasks. You can see the
    results in the bulletin, but this endpoint allows you to see their state; in this
    case, I have them stopped. The following code shows you how:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，您还可以获取有关您报告任务的信息。您可以在公告板上查看结果，但此端点允许您查看其状态；在这种情况下，我已经将它们停止。以下代码显示了如何操作：
- en: '[PRE14]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The information about the reporting task is as follows:'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 报告任务的信息如下：
- en: '[PRE15]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: With these NiFi endpoints, you can collect information on your system, on process
    groups, on processors, and on queues. You can use this information to build your
    own monitoring systems or create dashboards. The API has a lot of potential—you
    could even call the API using NiFi itself.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些NiFi端点，您可以收集有关系统、流程组、处理器和队列的信息。您可以使用这些信息构建自己的监控系统或创建仪表板。API具有很大的潜力——您甚至可以使用NiFi本身调用API。
- en: Summary
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you have learned how to use the NiFi GUI to monitor your data
    pipelines using the status bar, the bulletin, and counters. You also learned how
    to add processors that can send information to you inside your data pipeline.
    With the `PutSlack` processor, you were able to send yourself direct messages
    when there was a failure, and you passed data from the flowfile in the message
    with the NiFi expression language. Lastly, you learned how to use the API to write
    your own monitoring tools and grab the same data as is in the NiFi GUI—even reading
    the contents of a single flowfile.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了如何使用NiFi GUI通过状态栏、公告板和计数器来监控您的数据管道。您还学习了如何添加可以向您数据管道内部发送信息的处理器。使用`PutSlack`处理器，您能够在出现故障时发送给自己直接消息，并且您使用NiFi表达式语言将flowfile中的数据传递到消息中。最后，您学习了如何使用API编写自己的监控工具并抓取与NiFi
    GUI中相同的数据——甚至可以读取单个flowfile的内容。
- en: In the next chapter, you will learn how to deploy your production pipelines.
    You will learn how to use processor groups, templates, versions, and variables
    to allow you to import data pipelines to a production NiFi instance with minimal
    configuration.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习如何部署您的生产管道。您将学习如何使用处理器组、模板、版本和变量来允许您以最小配置将数据管道导入生产NiFi实例。
