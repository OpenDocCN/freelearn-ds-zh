- en: '*Chapter 9*: Monitoring Data Pipelines'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You now know how to build data pipelines that are production ready—they are
    idempotent, use atomic transactions, and are version controlled. They are ready
    to start running in production, but before you can deploy them, you need to be
    able to monitor them. There will be errors in the code, in the data, in the network,
    or in other areas outside your control. You will need to know when errors happen,
    and when things are running as they should.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring NiFi in the GUI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring NiFi using processors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring NiFi with Python and the REST API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring NiFi using the GUI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The NiFi GUI provides several ways to monitor your data pipelines. Using the
    GUI is the simplest way to start monitoring your NiFi instance.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring NiFi with the status bar
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Much of the information you need is on the status bar. The status bar is below
    the component toolbar and looks like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.1 – Component and status toolbars'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.1_B15739.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.1 – Component and status toolbars
  prefs: []
  type: TYPE_NORMAL
- en: 'Starting at the left of the status bar, let''s look at what is being monitored:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Active thread**: This lets you know how many threads are running. You can
    get a sense of tasks and load.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Total queued data**: The number of flowfiles and the combined size on disk.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Transmitting remote process groups and not transmitting remote process groups**:
    You can run NiFi on multiple machines or instances on the same machine and allow
    process groups to communicate. These icons tell you whether they are or are not
    communicating.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Running components, stopped components, invalid components, and disabled
    components**: These show you the state of your components. Running does not necessarily
    mean that a component is currently processing data, but that it is on and scheduled
    to do so.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Up-to-date versioned process groups, locally modified versioned process groups,
    stale versioned process groups, locally modified and stale versioned process groups,
    and sync failure versioned process groups**: This group of icons show the versioning
    information of your processor groups. From here you can tell if you have uncommitted
    changes or are using older versions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Last refresh**: This lets you know when the data in the toolbar is valid
    for. The refresh is usually every five minutes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The status bar gives you the monitoring information for all of your processors,
    but there is also a status toolbar on every processor group and for each processor.
    You can see the status of the same metrics in the **SCF** processor group, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.2 – Processor group monitoring'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.2_B15739.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.2 – Processor group monitoring
  prefs: []
  type: TYPE_NORMAL
- en: 'The **In** and **Out** metrics show if there is data flowing into the process
    group from another processor or group. You will learn how to connect processor
    groups in the next chapter. The versioning information is not on the toolbar but
    to the left of the title of the processor group. The red square on the right of
    the processor group is a **bulletin**. This provides information on errors within
    the processor group. Hovering over it shows the error, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.3 – Looking at the bulletin on a processor group'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.3_B15739.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.3 – Looking at the bulletin on a processor group
  prefs: []
  type: TYPE_NORMAL
- en: 'I currently do not have Elasticsearch running and as a result, the processor
    that sends data to Elasticsearch is failing with a connection timeout. If you
    enter the processor group, you can see the bulletin on the specific processor,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.4 – The bulletin on a specific processor'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.4_B15739.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.4 – The bulletin on a specific processor
  prefs: []
  type: TYPE_NORMAL
- en: 'To change the bulletin messages, you can adjust the level in the processor
    configuration under **Settings**. The **Bulletin Level** dropdown allows you to
    show more or less based on severity, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.5 – Setting the Bulletin Level'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.5_B15739.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.5 – Setting the Bulletin Level
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see the bulletin information for all your NiFi processors using the
    **Bulletin Board**, which is accessed from the waffle menu in the upper-right
    corner of NiFi. Selecting the **Bulletin Board** will show all the messages, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.6 – Bulletin Board showing all the notices'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.6_B15739.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.6 – Bulletin Board showing all the notices
  prefs: []
  type: TYPE_NORMAL
- en: 'Within each processor group, every processor also has status information, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.7 – Status of a single processor'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.7_B15739.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.7 – Status of a single processor
  prefs: []
  type: TYPE_NORMAL
- en: The **In** and **Out** metrics in a processor show how much data (the flowfiles
    size) has passed through the processor in the last five minutes.
  prefs: []
  type: TYPE_NORMAL
- en: Using counters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Similar to bulletins, you can create increment- or decrement-counters. Counters
    don't tell you that something succeeded or failed, but they can give you an idea
    of how many flowfiles are being processed at any point in a data pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `UpdateCounter` processor between the `EvaluateJsonPath` and `ElasticSCF`
    processors. This means that before a flowfile is inserted into Elasticsearch,
    the counter will be updated. The flow is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.8 – The UpdateCounter processor added to the data pipeline'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.8_B15739.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.8 – The UpdateCounter processor added to the data pipeline
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see in the preceding screenshot, 162 flowfiles were sent through
    the processor. You will see the results of this later in this section. But first,
    to configure the processor, you will need to specify **Counter Name** and **Delta**.
    **Delta** is the number to increment or decrement by. I have configured the processor
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.9 – Configuration of the UpdateCounter processor'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.9_B15739.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.9 – Configuration of the UpdateCounter processor
  prefs: []
  type: TYPE_NORMAL
- en: 'When you have configured the processor and ran the data pipeline, you will
    have a count. Earlier, 162 records passed through the data pipeline when I ran
    it. To see your counters, click the waffle menu in the top-right corner of the
    NiFi window and select **Counters**, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.10 – NiFi Counters'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.10_B15739.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.10 – NiFi Counters
  prefs: []
  type: TYPE_NORMAL
- en: The preceding screenshot shows the counts of the counter and an aggregate. If
    we had other `UpdateCounter` processors that updated the same counter, it would
    aggregate those values.
  prefs: []
  type: TYPE_NORMAL
- en: Using the GUI is an excellent way to quickly see how your processor groups and
    processors are running. But you can also use processors to monitor the data pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: In the previous section, you learned about the NiFi bulletin. You can use background
    tasks to monitor NiFi and post that data to the NiFi bulletin using reporting
    tasks. Reporting tasks are like processors that run in the background and perform
    a task. The results will appear in the bulletin or you can send it to other locations.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a reporting task, in the waffle menu, select **Controller Settings**,
    then navigate to the **Reporting Task** tab. The list should be blank, but you
    can add a new task using the plus sign on the right-hand corner of the window.
    You will see a list of tasks that are available. Single-click on one to see the
    description. You should see a list similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.11 – Reporting tasks available in NiFi'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.11_B15739.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.11 – Reporting tasks available in NiFi
  prefs: []
  type: TYPE_NORMAL
- en: 'For this example, double click the **MonitorDiskUsage** task. It will appear
    on the list with the ability to edit. Click the pencil to edit, set the **Threshold**
    to **1%**, and set the directory to your NiFi directory. The configuration will
    look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.12 – Configuring the MonitorDiskUsage task'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.12_B15739.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.12 – Configuring the MonitorDiskUsage task
  prefs: []
  type: TYPE_NORMAL
- en: You can use a percentage or a value such as 20 gigabytes. I have set it to 1%
    so that it will post to the bulletin. I chose the NiFi directory because it contains
    all the logs and repositories.
  prefs: []
  type: TYPE_NORMAL
- en: 'Running the **Reporting Task** processor, you should see a bulletin in the
    main NiFi window. The message will be that the **MonitorDiskUsage** task exceeded
    the 1% threshold. The following screenshot shows the bulletin:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.13 – The Reporting Task bulletin'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.13_B15739.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.13 – The Reporting Task bulletin
  prefs: []
  type: TYPE_NORMAL
- en: You can create reporting tasks for many other metrics. Using the GUI is useful
    and convenient, but you will most likely not be able to sit in front of NiFi watching
    it all day. This would be horribly inefficient. A better method would be to have
    NiFi send you a message. You can do this using processors. The next section will
    show you how.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring NiFi with processors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Instead of relying on watching the NiFi GUI, you can insert a processor into
    your data pipeline to report what is happening with the pipeline. For example,
    you can use the `PutSlack` processor to send messages on failures or success.
  prefs: []
  type: TYPE_NORMAL
- en: 'To send Slack messages, you will need to create an app in your Slack workspace.
    You can do this by browsing to [https://api.slack.com/apps](https://api.slack.com/apps).
    Click **Create New App**, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.14 – Creating a new app'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.14_B15739.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.14 – Creating a new app
  prefs: []
  type: TYPE_NORMAL
- en: 'Slack will ask you to name your app and then select a workspace, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.15 – Specifying a name and workspace for your app'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.15_B15739.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.15 – Specifying a name and workspace for your app
  prefs: []
  type: TYPE_NORMAL
- en: 'When finished, you will be redirected to the app page. Under the **Features**
    heading, click **Incoming Webhooks** and turn it on, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.16 – Activating Incoming Webhooks'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.16_B15739.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.16 – Activating Incoming Webhooks
  prefs: []
  type: TYPE_NORMAL
- en: You will be asked to select a channel for the webhook. I selected myself so
    that the channel becomes a direct message to me. You can create a channel for
    the data pipeline so that multiple people can join and see the messages. Once
    you have completed this step, scroll to the bottom of the page to see the new
    webhook. Click the copy button and open NiFi. It is time to add `PutSlack` to
    your data pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: 'In NiFi, I have opened the **SCF** processor group. I found the **ElasticSCF**
    processor—the processor that sends the issues in to Elasticsearch. Drag and drop
    the processor icon in the control toolbar to the canvas and select **PutSlack**.
    Create a connection between **ElasticSCF** and **PutSlack** for the relationship
    failure, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.17 – PutSlack added to the end of the data pipeline'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.17_B15739.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.17 – PutSlack added to the end of the data pipeline
  prefs: []
  type: TYPE_NORMAL
- en: 'To configure the `PutSlack` processor, paste the copied URL to the **Webhook
    URL** property. NiFi will hide the URL because it is a sensitive property. The
    **Username** property is whatever you want Slack to display when the message is
    sent. You can also set an icon or an emoji. The **Webhook Text** property is the
    message that will be sent. You can set the message to plain text saying that the
    processor failed, or because the **Webhook Text** property accepts the NiFi expression
    language, you can use a combination of a flowfile attribute with text. I have
    configured the processor as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.18 – PutSlack configuration'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.18_B15739.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.18 – PutSlack configuration
  prefs: []
  type: TYPE_NORMAL
- en: 'I used the append method of the NiFi expression language. The statement is
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding statement gets the `id` property, `${id},` and calls append,
    `:append()`. Inside the `append()` method is the text. The result will be a message
    like the one shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.19 – Slack direct message from NiFi'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.19_B15739.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.19 – Slack direct message from NiFi
  prefs: []
  type: TYPE_NORMAL
- en: The preceding screenshot is my direct messages. You can see that I added the
    NiFi integration to the workspace, then received a message from NiFi. The message
    is the ID of the **SeeClickFix** issue and some text saying that it failed. I
    can now take action.
  prefs: []
  type: TYPE_NORMAL
- en: You can use processors to send emails, write files, or perform many other actions
    that you could use to monitor your data pipeline. You can also write your own
    monitoring applications outside of NiFi using Python. The next section will cover
    the NiFi REST API.
  prefs: []
  type: TYPE_NORMAL
- en: Using Python with the NiFi REST API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using Python and the NiFi REST API, you could write your own monitoring tools,
    or wire up a dashboard. The NiFi REST API documentation is located at [https://nifi.apache.org/docs/nifi-docs/rest-api/index.html](https://nifi.apache.org/docs/nifi-docs/rest-api/index.html).
    You can see all of the different endpoints by type and some information about
    each of them. This section will highlight some of the endpoints that you have
    covered in this chapter but by using the GUI.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we can look at are the system diagnostics. System diagnostics
    will show you your resource usage. You can see heap size, threads, repository
    usage, and several other metrics. To call the endpoint with requests, you can
    use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Other endpoints of interest are the processor groups. Using this endpoint,
    you can find basic information about any processor group. You will need to get
    the ID of the group in NiFi. You can find this in the URL as the `processGroupId`
    parameter. With it, you can use the process-groups endpoint, as shown in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The `status` object holds most of the pertinent information that you would
    find in the status toolbar. The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the processors endpoint, you can look specifically at a single processor.
    You can use the `status` object to look at the status toolbar information, as
    shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the NiFi API, you can even look into the queues and download flowfiles.
    To get the contents of a flowfile you need to follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Make a listing request to the queue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then you will get the status of the listing request by passing the request
    (`listid`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Lastly, you will call the flowfiles endpoint, pass the flowfile ID (`ffid`),
    and then request the content. The flowfile is JSON, so the result will be JSON:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You now have the contents of an entire flowfile:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can clear queues by making a `drop` request:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can pass the listing request ID to the end of the preceding URL to see that
    it worked. Or you can open NiFi and browse to the queue and you will see that
    it is empty.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can read the NiFi bulletin by calling the bulletin board endpoint:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The result is a single message saying I do not have Elasticsearch running.
    The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can also read the counters you created earlier. The following code will
    send a `get` request to the counter endpoint:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the following code block, you will see that I have added an additional counter:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Lastly, you can also get information on your reporting tasks. You can see the
    results in the bulletin, but this endpoint allows you to see their state; in this
    case, I have them stopped. The following code shows you how:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The information about the reporting task is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With these NiFi endpoints, you can collect information on your system, on process
    groups, on processors, and on queues. You can use this information to build your
    own monitoring systems or create dashboards. The API has a lot of potential—you
    could even call the API using NiFi itself.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you have learned how to use the NiFi GUI to monitor your data
    pipelines using the status bar, the bulletin, and counters. You also learned how
    to add processors that can send information to you inside your data pipeline.
    With the `PutSlack` processor, you were able to send yourself direct messages
    when there was a failure, and you passed data from the flowfile in the message
    with the NiFi expression language. Lastly, you learned how to use the API to write
    your own monitoring tools and grab the same data as is in the NiFi GUI—even reading
    the contents of a single flowfile.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to deploy your production pipelines.
    You will learn how to use processor groups, templates, versions, and variables
    to allow you to import data pipelines to a production NiFi instance with minimal
    configuration.
  prefs: []
  type: TYPE_NORMAL
