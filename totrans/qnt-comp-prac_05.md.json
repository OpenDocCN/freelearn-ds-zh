["```py\n    from qiskit import IBMQ, QuantumCircuit, execute\n    from qiskit.tools.monitor import job_monitor\n    ```", "```py\n    if not IBMQ.active_account():\n        IBMQ.load_account()\n    provider = IBMQ.get_provider()\n    ```", "```py\n    print(provider.backends(operational=True, \n        simulator=False))\n    ```", "```py\n    Available backends:\n    [<IBMQBackend('ibmqx2') from IBMQ(hub='ibm-q', group='open', project='main')>, <IBMQBackend('ibmq_16_melbourne') from IBMQ(hub='ibm-q', group='open', project='main')>, <IBMQBackend('ibmq_vigo') from IBMQ(hub='ibm-q', group='open', project='main')>, <IBMQBackend('ibmq_ourense') from IBMQ(hub='ibm-q', group='open', project='main')>, <IBMQBackend('ibmq_valencia') from IBMQ(hub='ibm-q', group='open', project='main')>, <IBMQBackend('ibmq_london') from IBMQ(hub='ibm-q', group='open', project='main')>, <IBMQBackend('ibmq_burlington') from IBMQ(hub='ibm-q', group='open', project='main')>, <IBMQBackend('ibmq_essex') from IBMQ(hub='ibm-q', group='open', project='main')>, <IBMQBackend('ibmq_armonk') from IBMQ(hub='ibm-q', group='open', project='main')>, <IBMQBackend('ibmq_santiago') from IBMQ(hub='ibm-q', group='open', project='main')>] \n    >>> provider.backends(simulator=False)\n    ```", "```py\n    >>> provider.backends(filters=lambda x: not x.configuration().simulator)\n    ```", "```py\n    >>> provider.backends(operational=True, simulator=False)\n    ```", "```py\n    >>> provider.backends(filters=lambda x: not x.configuration().simulator and x.status().operational)\n    ```", "```py\n    backend = provider.get_backend('ibmqx2')\n    print(\"\\nSelected backend:\", backend.name())\n    ```", "```py\n    Out[]: Selected backend: ibmqx2\n    ```", "```py\n    job = execute(qc, backend, shots=1000)\n    ```", "```py\n    qc = QuantumCircuit(2,2)\n    qc.h(0)\n    qc.cx(0,1)\n    qc.measure([0,1],[0,1])\n    print(\"\\nQuantum circuit:\")\n    print(qc)\n    job = execute(qc, backend, shots=1000)\n    job_monitor(job)\n    result = job.result()\n    counts = result.get_counts(qc)\n    print(\"\\nResults:\", counts)\n    ```", "```py\n    print(provider.backends(operational=True,\n        simulator=True))\n    backend = provider.get_backend('ibmq_qasm_simulator')\n    job = execute(qc, backend, shots=1000)\n    job_monitor(job)\n    result = job.result()\n    counts = result.get_counts(qc)\n    print(\"\\nSimulator results:\", counts)\n    ```", "```py\nfrom qiskit import Aer\nAer.backends()\n```", "```py\nOut[]: [<QasmSimulator('qasm_simulator') from AerProvider()>,\n <StatevectorSimulator('statevector_simulator') from \n AerProvider()>,\n <UnitarySimulator('unitary_simulator') from AerProvider()>,\n <PulseSimulator('pulse_simulator') from AerProvider()>]\n```", "```py\n    from qiskit import IBMQ, QuantumCircuit, execute\n    from qiskit.tools.monitor import job_monitor\n    from qiskit.visualization import plot_histogram\n    if not IBMQ.active_account():\n        IBMQ.load_account()\n    provider = IBMQ.get_provider()\n    ```", "```py\n    qc = QuantumCircuit(2,2)\n    qc.h(0)\n    qc.cx(0,1)\n    qc.measure([0,1],[0,1])\n    ```", "```py\n    backends = provider.backends(filters=lambda b:\n        b.configuration().n_qubits > 1 and\n            b.status().operational)\n    print(\"\\nAvailable backends:\", backends)\n    ```", "```py\n    Available backends: [<IBMQSimulator('ibmq_qasm_simulator') from IBMQ(hub='ibm-q', group='open', project='main')>, <IBMQBackend('ibmqx2') from IBMQ(hub='ibm-q', group='open', project='main')>, <IBMQBackend('ibmq_16_melbourne') from IBMQ(hub='ibm-q', group='open', project='main')>, <IBMQBackend('ibmq_vigo') from IBMQ(hub='ibm-q', group='open', project='main')>, <IBMQBackend('ibmq_ourense') from IBMQ(hub='ibm-q', group='open', project='main')>, <IBMQBackend('ibmq_valencia') from IBMQ(hub='ibm-q', group='open', project='main')>, <IBMQBackend('ibmq_london') from IBMQ(hub='ibm-q', group='open', project='main')>, <IBMQBackend('ibmq_burlington') from IBMQ(hub='ibm-q', group='open', project='main')>, <IBMQBackend('ibmq_essex') from IBMQ(hub='ibm-q', group='open', project='main')>, <IBMQBackend('ibmq_santiago') from IBMQ(hub='ibm-q', group='open', project='main')>]\n    ```", "```py\n    counts = {}\n    for n in range(0, len(backends)):\n        print('Run on:', backends[n])\n        job = execute(qc, backends[n], shots=1000)\n        job_monitor(job)\n        result = job.result()\n        counts[backends[n].name()] = result.get_counts(qc)\n    ```", "```py\n    Run on: ibmq_qasm_simulator\n    Job Status: job has successfully run\n    Run on: ibmqx2\n    Job Status: job has successfully run\n    Run on: ibmq_16_melbourne\n    Job Status: job has successfully run\n    ...\n    Run on: ibmq_essex\n    Job Status: job has successfully run\n    Run on: ibmq_santiago\n    Job Status: job has successfully run\n    ```", "```py\n    print(\"\\nRaw results:\", counts)\n    #Optionally define the histogram colors.\n    colors = ['green','darkgreen','red','darkred','orange',\n        'yellow','blue','darkblue','purple']\n    #Plot the counts dictionary values in a histogram, using\n    #the counts dictionary keys as legend.\n    display(plot_histogram(list(counts.values()),\n        title = \"Bell results on all available backends\n        legend=list(counts), color = colors[0:len(backends)],\n        bar_labels = True)\n    ```", "```py\n    Raw results: {'ibmq_qasm_simulator': {'00': 510, '11': 490}, 'ibmqx2': {'00': 434, '01': 77, '10': 39, '11': 450}, 'ibmq_16_melbourne': {'00': 474, '01': 42, '10': 48, '11': 436}, 'ibmq_vigo': {'00': 512, '01': 18, '10': 42, '11': 428}, 'ibmq_ourense': {'00': 494, '01': 26, '10': 19, '11': 461}, 'ibmq_valencia': {'00': 482, '01': 31, '10': 30, '11': 457}, 'ibmq_london': {'00': 463, '01': 48, '10': 39, '11': 450}, 'ibmq_burlington': {'00': 385, '01': 182, '10': 84, '11': 349}, 'ibmq_essex': {'00': 482, '01': 46, '10': 24, '11': 448}, 'ibmq_santiago': {'00': 514, '01': 17, '10': 17, '11': 452}}\n    ```", "```py\nbackends = provider.backends(filters=lambda b: b.configuration().n_qubits > 1 and b.status().operational)\n```", "```py\n# Get all available and operational backends.\nbackends = provider.backends(n_qubits=5)\n```", "```py\n    from qiskit import IBMQ\n    from qiskit.providers.ibmq import least_busy\n    if not IBMQ.active_account():\n        IBMQ.load_account()\n    provider = IBMQ.get_provider()\n    ```", "```py\n    backend = least_busy(provider.backends(simulator=False))\n    print(\"Least busy backend:\", backend.name())\n    ```", "```py\n    Out[]: \n    Least busy backend: ibmq_armonk\n    ```", "```py\n    filtered_backend = least_busy(provider.backends(\n        n_qubits=5, operational=True, simulator=False))\n    print(\"\\nLeast busy 5-qubit backend:\",\n        filtered_backend.name())\n    ```", "```py\n    Out[]: \n    Least busy 5-qubit backend: ibmq_santiago\n    ```", "```py\n    from qiskit.tools.monitor import backend_overview\n    print(\"\\nAll backends overview:\\n\")\n    backend_overview()\n    ```", "```py\n    from qiskit import IBMQ, QuantumCircuit, transpile\n    from qiskit.providers.ibmq import least_busy\n    # Import the backend visualization methods\n    from qiskit.visualization import plot_gate_map,\n    plot_error_map, plot_circuit_layout\n    if not IBMQ.active_account():\n        IBMQ.load_account()\n    provider = IBMQ.get_provider()\n    ```", "```py\n    available_backends = provider.backends(filters=lambda b:\n        b.configuration().n_qubits > 1 and b.status().\n            operational)\n    print(\"{0:20} {1:<10}\".format(\"Name\",\"#Qubits\"))\n    print(\"{0:20} {1:<10}\".format(\"----\",\"-------\"))\n    for n in range(0, len(available_backends)):\n        backend = provider.get_backend(str(available_\n            backends[n]))\n        print(\"{0:20} {1:<10}\".format(backend.name(),\n            backend.configuration().n_qubits))\n    ```", "```py\n    backend_input = input(\"Enter the name of a backend, or X\n        for the least busy:\")\n    if backend_input not in [\"X\",\"x\"]:\n        backend = provider.get_backend(backend_input)\n    else:\n        backend = least_busy(provider.backends(\n            filters=lambda b: b.configuration().n_qubits > 1\n                and b.status().operational))\n    ```", "```py\n    print(\"\\nQubit data for backend:\",backend.status().\n        backend_name)\n    display(plot_gate_map(backend, plot_directed=True))\n    display(plot_error_map(backend))\n    ```", "```py\n    # Create and transpile a 2 qubit Bell circuit\n    qc = QuantumCircuit(2)\n    qc.h(0)\n    qc.cx(0,1)\n    display(qc.draw('mpl'))\n    qc_transpiled = transpile(qc, backend=backend, \n        optimization_level=3)\n    display(qc_transpiled.draw('mpl'))\n    # Display the circuit layout for the backend.\n    display(plot_circuit_layout(qc_transpiled, backend, \n        view='physical'))\n    ```", "```py\n    from qiskit import IBMQ\n    from qiskit.providers.ibmq import least_busy\n    if not IBMQ.active_account():\n        IBMQ.load_account()\n    provider = IBMQ.get_provider()\n    ```", "```py\n    available_backends = provider.backends(operational=True)\n    ```", "```py\n    print(\"{0:20} {1:<10} {2:<10} {3:<10}\".format(\"Name\",\n        \"#Qubits\",\"Max exp.\",\"Pending jobs\"))\n    print(\"{0:20} {1:<10} {2:<10} {3:<10}\".format(\"----\",\"---\n        ----\",\"--------\",\"------------\"))\n    for n in range(0, len(available_backends)):\n        backend = provider.get_backend(str(\n            available_backends[n]))\n        print(\"{0:20} {1:<10} {2:<10} {3:<10}\".\n            format(backend.name(),\n            backend.configuration().n_qubits,\n                backend.configuration().\n            max_experiments,backend.status().pending_jobs))\n    ```", "```py\n    least_busy_backend = least_busy(provider.backends(\n        n_qubits=5,operational=True, simulator=False))\n    print(\"\\nQubit data for backend:\",\n        least_busy_backend.status().backend_name)\n    for q in range (0,\n        least_busy_backend.configuration().n_qubits):\n        print(\"\\nQubit\",q,\":\")\n        for n in range (0, len(least_busy_backend.\n            properties().qubits[0])):\n            print(least_busy_backend.properties().qubits[q]\n                [n].name,\"=\",least_busy_backend.properties().\n                qubits[q][n].value,\n                least_busy_backend.properties()\n                .qubits[q][n].unit)\n    ```"]