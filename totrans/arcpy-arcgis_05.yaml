- en: Chapter 5. ArcPy Cursors – Search, Insert, and Update
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 5 章。ArcPy 游标 – 搜索、插入和更新
- en: Now that we understand how to interact with ArcToolbox tools using ArcPy, and
    we have also covered using Python to create functions and import modules, we have
    a basic understanding of how to improve GIS workflows using Python. In this chapter
    we will cover data cursors and the Data Access module, introduced in 10.1\. These
    data access cursors are a vast improvement on the cursors used in the arcgisscripting
    module (the precursor to ArcPy) and in earlier versions of ArcPy. Not only can
    the cursors search data, as we have seen, but they can update data using the Update
    Cursors and can add new rows of data using the Insert Cursor.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了如何使用 ArcPy 与 ArcToolbox 工具交互，并且我们也已经介绍了如何使用 Python 创建函数和导入模块，我们对如何使用
    Python 提高GIS 工作流程有了基本的了解。在本章中，我们将介绍数据游标和数据访问模块，这些模块是在 10.1 版本中引入的。这些数据访问游标在 arcgisscripting
    模块（ArcPy 的前身）和 ArcPy 的早期版本中使用的游标上有了很大的改进。游标不仅可以像我们所看到的那样搜索数据，还可以使用更新游标更新数据，并可以使用插入游标添加新的数据行。
- en: Data cursors are used to access data records contained within data tables, using
    a row by row iterative approach. The concept was borrowed from relational databases,
    where data cursors are used to extract data from tables returned from a SQL expression.
    Cursors are used to search for data, but also to update data or to add new data.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 数据游标用于通过逐行迭代方法访问数据表中的数据记录。这个概念是从关系数据库中借用的，在关系数据库中，数据游标用于从 SQL 表达式返回的表中提取数据。游标用于搜索数据，但也用于更新数据或添加新数据。
- en: When we discuss creating data searches using ArcPy cursors, we are not just
    talking about attribute information. The new data access model cursors can interact
    directly with the shape field, and when combined with ArcPy Geometry objects,
    can perform geospatial functions and replace the need to pass data to ArcToolbox
    tools. Data access cursors represent the most useful innovation yet in the realm
    of Python automation for GIS.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们讨论使用 ArcPy 游标创建数据搜索时，我们不仅仅是在谈论属性信息。新的数据访问模型游标可以直接与形状字段交互，并且当与 ArcPy 几何对象结合使用时，可以执行地理空间函数，从而取代将数据传递给
    ArcToolbox 工具的需要。数据访问游标代表了在 Python 自动化 GIS 领域中最有用的创新。
- en: 'In this chapter we will cover:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍：
- en: Using Search Cursors to access attribute and spatial data
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用搜索游标访问属性和空间数据
- en: Using Update Cursors to adjust values within rows
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用更新游标调整行内的值
- en: Using insert cursors to add new data to a dataset
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用插入游标向数据集中添加新数据
- en: Using cursors and the ArcPy Geometry object types to perform geospatial analyses
    in memory
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用游标和 ArcPy 几何对象类型在内存中执行地理空间分析
- en: The data access module
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据访问模块
- en: Introduced with the release of ArcGIS 10.1, the new data access module known
    as `arcpy.da` has made data interaction easier, and faster, than allowed by previous
    data cursors. By allowing for direct access to the shape field in a variety of
    forms (shape object, X values, Y values, centroid, area, length, and more), and
    a variety of formats (JavaScript Object Notation (JSON), Keyhole Markup Language
    (KML), Well Known Binary (WKB), Well-Known Text (WKT)), the data access module
    greatly increases the ability of a GIS analyst to extract and control shape field
    data.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 随着 ArcGIS 10.1 的发布，新的数据访问模块 `arcpy.da` 使得数据交互比之前的数据游标更加容易和快速。通过允许以各种形式（形状对象、X
    值、Y 值、质心、面积、长度等）直接访问形状字段，以及多种格式（JavaScript 对象表示法 (JSON)、Keyhole 标记语言 (KML)、已知二进制
    (WKB)、已知文本 (WKT)），数据访问模块大大提高了 GIS 分析师提取和控制形状字段数据的能力。
- en: The data access cursors accept a number of required and optional parameters.
    The required parameters are the path to the feature class as a string (or a variable
    representing the path) and the fields to be returned. If all fields are desired,
    using the asterisk notation and provide a list with an asterisk as a string as
    the field's parameter ( [ * ] ). If only a few fields are required, provide those
    fields as string fieldnames ( for example [ "NAME", "DATE"] ).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 数据访问游标接受一系列必需和可选参数。必需参数包括作为字符串（或表示路径的变量）的特征类路径以及要返回的字段。如果需要所有字段，可以使用星号表示法，并提供一个包含星号作为字符串的字段参数列表（[
    * ]）。如果只需要少数几个字段，请提供这些字段的字符串字段名（例如 [ "NAME", "DATE"]）。
- en: The other parameters are optional but are very important, for both search and
    Update Cursors. A `where` clause in the form of a SQL expression can be provided
    next; this clause will limit the number of rows returned from the data set (as
    demonstrated by the SQL expression in the scripts in the last chapter). The SQL
    expressions used by the search and update cursors are not complete SQL expressions,
    as the `SELECT` or `UPDATE` commands are provided automatically by the choice
    of cursor. Only the `where` clause of the SQL expression is required for this
    parameter.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 其他参数是可选的，但对于搜索和更新游标都非常重要。可以提供下一个以SQL表达式形式的`where`子句；此子句将限制从数据集中返回的行数（如最后一章中的脚本中演示的SQL表达式所示）。搜索和更新游标使用的SQL表达式不是完整的SQL表达式，因为游标的选择或更新命令是由游标的选择自动提供的。此参数只需要SQL表达式的`where`子句。
- en: A spatial reference can be provided next in the ArcPy Spatial Reference format;
    this is not necessary if the data is in the correct format but can be used to
    transform data into another projection on the fly. There is no way to specify
    the spatial transformation used, however. The third optional parameter is a Boolean
    (or True/False) value that declares whether data should be returned in exploded
    points (that is, a list of the individual vertices) or in the original geometry
    format. The final optional parameter is another list that can be used to organize
    the data returned by the cursor; this list would include SQL keywords such as
    DISTINCT, ORBER BY, or GROUP BY. However, this final parameter is only available
    when working with a geodatabase.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在ArcPy空间参考格式中提供下一个空间参考；如果数据格式正确，则这不是必需的，但可以用于在运行时将数据转换到另一个投影。然而，无法指定使用的空间变换。第三个可选参数是一个布尔值（或True/False），声明数据是否应以展开的点（即单个顶点的列表）或原始几何格式返回。最后一个可选参数是另一个列表，可以用来组织游标返回的数据；此列表将包括SQL关键字，如DISTINCT、ORDER
    BY或GROUP BY。然而，此最终参数仅在处理地理数据库时可用。
- en: 'Let''s take a look at using `arcpy.da.SearchCursor` for shape field interactions.
    If we needed to produce a spreadsheet listing all bus stops along a particular
    route, and include the location of the data in an X/Y format, we could use the
    Add XY tool from the ArcToolbox. However, this has the effect of adding two new
    fields to our data, which is not always allowed, especially when the data is stored
    in enterprise geodatabases with fixed schemas. Instead, we''ll use the SHAPE@XY
    token built into the data access module to easily extract the data and pass it
    to the `createCSV()` function from [Chapter 4](ch04.html "Chapter 4. Complex ArcPy
    Scripts and Generalizing Functions"), *Complex ArcPy Scripts and Generalizing
    Functions,* along with the SQL expression limiting results to the stops of interest:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用`arcpy.da.SearchCursor`进行形状字段交互。如果我们需要生成一个包含特定路线沿线所有公交车站的电子表格，并包含以X/Y格式显示的数据位置，我们可以使用ArcToolbox中的添加XY工具。然而，这会在我们的数据中添加两个新字段，这并不总是允许的，尤其是在数据存储在具有固定模式的企业地理数据库中时。相反，我们将使用数据访问模块中内置的SHAPE@XY令牌来轻松提取数据并将其传递给[第4章](ch04.html
    "第4章。复杂的ArcPy脚本和泛化函数")中的`createCSV()`函数，*复杂的ArcPy脚本和泛化函数*，以及限制结果只到感兴趣站点的SQL表达式：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note that each row of data is returned as a tuple; this makes sense as the Search
    Cursor does not allow any data manipulation and tuples are immutable as soon as
    they are created. In contrast, data returned from Update Cursors is in list format,
    as lists can be updated. Both can be accessed using the indexing as shown previously.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，每行数据都作为元组返回；这是有意义的，因为搜索游标不允许任何数据操作，一旦创建，元组就是不可变的。相比之下，来自更新游标的数据以列表格式返回，因为列表可以更新。两者都可以使用之前显示的索引进行访问。
- en: 'Each row returned by the cursor is a tuple with three objects: the name of
    the bus stop, the bus stop ID, and finally another tuple containing the X/Y location
    of the stop. The objects in the tuple, contained in the variable `row`, are accessible
    using indexing: the bus stop name is at index 0, the ID is at index 1, and the
    location tuple is at index 2.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 光标返回的每一行都是一个包含三个对象的元组：公交车站的名称、公交车站ID，以及最后包含该站点X/Y位置的另一个元组。变量`row`中元组内的对象可以通过索引访问：公交车站名称位于索引0，ID位于索引1，位置元组位于索引2。
- en: 'Within the location tuple, the X value is at index 0 and the Y value is at
    index 1; this makes it easy to access the data in the location tuple by passing
    a value as shown in the following:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在位置元组中，X 值位于索引 0，Y 值位于索引 1；这使得通过传递一个值来访问位置元组中的数据变得很容易，如下所示：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The ability to add lists and tuples and even dictionaries to another list or
    tuple or dictionary is a strong component of Python, making data access logical
    and data organization easy.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 能够将列表、元组甚至字典添加到另一个列表、元组或字典中是 Python 的一个强大组件，这使得数据访问逻辑性和数据组织变得容易。
- en: 'However, the spreadsheet returned from the previous code has a few issues:
    the location is returned in the native projection of the feature class (in this
    case, a State Plane projection), and there are rows of data that are repeated.
    It would be much more helpful if we could provide latitude and longitude values
    in the spreadsheet and the duplicate values were removed. Let''s use the optional
    spatial reference parameter and a list to sort the data before we pass it to the
    `createCSV()` function:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，前一段代码返回的电子表格有几个问题：位置以要素类的本地投影（在本例中为州平面投影）返回，并且有一些数据行是重复的。如果能提供电子表格中的纬度和经度值并删除重复值，那就更有帮助了。在我们将数据传递给
    `createCSV()` 函数之前，使用可选的空间参考参数和列表对数据进行排序：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The spatial reference is created by passing a code representing the desired
    projection system. In this case the code for the WGS 1984 Latitude and Longitude
    geographic system is 4326 and is passed to the `arcpy.SpatialReference()` method
    to create a spatial reference object that can be passed to the Search Cursor.
    Also, the `if` conditional is used to filter the data, accepting only one list
    per stop into the list called dataList. This new version of the code will produce
    a `CSV` file with the desired data. This CSV could then be converted into a KML
    with the service provided by [www.convertcsv.com/csv-to-kml.htm](http://www.convertcsv.com/csv-to-kml.htm),
    or even better, using Python. Use string formatting and loops to insert the data
    into pre-built KML strings.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 空间参考是通过传递代表所需投影系统的代码来创建的。在这种情况下，WGS 1984 纬度和经度地理系统的代码是 4326，并将其传递给 `arcpy.SpatialReference()`
    方法来创建一个空间参考对象，该对象可以传递给搜索光标。此外，`if` 条件用于过滤数据，只接受一个列表作为每个停止点进入名为 dataList 的列表。这个新版本的代码将生成一个包含所需数据的
    `CSV` 文件。这个 CSV 文件可以随后通过 [www.convertcsv.com/csv-to-kml.htm](http://www.convertcsv.com/csv-to-kml.htm)
    提供的服务转换为 KML，或者甚至更好地使用 Python。使用字符串格式化和循环将数据插入到预构建的 KML 字符串中。
- en: Attribute field interactions
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 属性字段交互
- en: Apart from the shape field interactions, another improvement offered by the
    data access module cursors is the ability to call the fields in a feature class
    by using a list, as discussed previously. Earlier data cursors required the use
    of a less efficient `get` `value` function call, or required the fields to be
    called as if they were methods available to the function. The new method allows
    for all fields to be called by passing an asterisk, a valuable method to access
    fields in feature classes that have not been inspected previously.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 除了形状字段交互之外，数据访问模块光标提供的另一项改进是，可以使用列表调用要素类中的字段，如前所述。早期数据光标需要使用效率较低的 `get` `value`
    函数调用，或者需要将字段调用得像函数可用的方法一样。新方法允许通过传递一个星号来调用所有字段，这对于访问之前未检查过的要素类中的字段来说是一个有价值的方法。
- en: One of the more valuable improvements is the ability to access the Unique ID
    field without needing to know whether the data set is a feature class or a shapefile.
    Because shapefiles had a feature ID or FID, and feature classes had an object
    ID, it was harder to program a Script tool to access the unique ID field. Data
    access module cursors allow for the use of the `OID@` string to request the unique
    ID from either type of input. This makes the need to know the type of unique ID
    irrelevant.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 更有价值的一项改进是，无需知道数据集是要素类还是形状文件，就能访问唯一标识字段。因为形状文件有一个要素 ID 或 FID，而要素类有一个对象 ID，所以编写脚本工具来访问唯一标识字段更困难。数据访问模块光标允许使用
    `OID@` 字符串从任何类型的输入中请求唯一标识。这使得了解唯一标识的类型变得无关紧要。
- en: As demonstrated previously, other attribute fields are requested by a string
    in a list. The field names must match the true name of the field; alias names
    cannot be passed to the cursor. The fields can be in the list in any order desired,
    and will be returned in the order requested. Only the required fields have to
    be included in the list.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，其他属性字段是通过列表中的字符串请求的。字段名称必须与字段的真正名称匹配；别名名称不能传递给游标。字段可以在列表中以任何所需的顺序排列，并将按请求的顺序返回。列表中只需要包含所需的字段。
- en: 'Here is a demonstration of requesting field information:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个请求字段信息的演示：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If the fields in the fields list were adjusted, the data in the resulting row
    would reflect the adjustment. Also, all of the members of the tuple returned by
    the cursor are accessible by zero-based indexing.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果字段列表中的字段被调整，结果行中的数据将反映这些调整。此外，游标返回的元组的所有成员都可以通过零索引访问。
- en: Update cursors
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新游标
- en: Update cursors are used to adjust data within existing rows of data. Updates
    become very important when calculating data or converting null values to a non-null
    value. Combined with specific SQL expressions, data can be targeted for updating
    with newly collected or calculated values.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 更新游标用于调整现有数据行中的数据。在计算数据或将空值转换为非空值时，更新变得非常重要。结合特定的SQL表达式，可以使用新收集或计算的数据值来针对数据进行更新。
- en: Note that running code containing an Update Cursor will change, or update, the
    data on which it operates. It is a good idea to make a copy of the data to test
    out the code before running it on the original data.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，运行包含更新游标的代码将更改或更新其操作的数据。在将代码运行在原始数据上之前，制作数据的副本以测试代码是一个好主意。
- en: All data access module Search Cursor parameters discussed previously are valid
    for Update Cursors. The main difference is that data rows returned by Update Cursors
    are returned as lists. Because lists are mutable, they can be adjusted using a
    list value assignment.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 所有之前讨论过的数据访问模块搜索游标参数对更新游标同样有效。主要区别在于更新游标返回的数据行是以列表形式返回的。因为列表是可变的，所以可以使用列表值赋值来调整它们。
- en: 'As an example, let''s imagine that the bus line 71 will be renamed to the 75\.
    Both inbound and outbound lines will be affected, so a SQL expression must be
    included to get all rows of data associated with the line. Once the data cursor
    is created, the rows returned must have the name adjusted, added back into the
    list, and the Update cursor''s `updateRow` method must be invoked. Here is how
    this scenario would look in code:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，让我们假设71路公交车线路将被重命名为75路。这将影响所有往返线路，因此必须包含一个SQL表达式来获取与该线路相关的所有数据行。一旦创建数据游标，返回的行必须调整名称，重新添加到列表中，并调用更新游标的`updateRow`方法。以下是这种情况在代码中的样子：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The SQL expression will return all rows of data with a name starting with `71`;
    this will include `71 IB` and `71 OB`. Note that the SQL expression must be enclosed
    in double quotes, as the attribute value needs to be in single quotes.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: SQL表达式将返回所有以`71`开头的数据行；这包括`71 IB`和`71 OB`。请注意，SQL表达式必须用双引号括起来，因为属性值需要用单引号。
- en: For each row of data, the name at position zero in the row returned is assigned
    to the variable lineName. This variable, a string, uses the `replace()` method
    to replace the characters `71` with the characters `75`. This could also just
    be replacing `1` with `5` but I wanted to be explicit as to what is being replaced.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每一行数据，返回的行中位置零的名称被分配给变量`lineName`。这个变量，一个字符串，使用`replace()`方法将字符`71`替换为字符`75`。这也可以只是将`1`替换为`5`，但我想要明确指出正在替换的内容。
- en: Once the new string has been generated, it is assigned to the variable `newName`.
    This variable is then added to the list returned by the cursor using list assignment;
    this will replace the data value that initially occupied the zero position in
    the list. Once the row value has been assigned, it is then passed to the cursor's
    `updateRow()` method. This method accepts the row and updates the value in the
    feature class for that particular row.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 生成新的字符串后，它被分配给变量`newName`。然后使用列表赋值将此变量添加到游标返回的列表中；这将替换列表中最初占据零位置的原始数据值。一旦行值被分配，它随后被传递到游标的`updateRow()`方法。此方法接受行并更新特定行的要素类中的值。
- en: Updating the shape field
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新形状字段
- en: For each row, all values included in the list returned by the cursor are available
    for update, except the unique ID (while no exception will be thrown, the UID values
    will not be updated). Even the shape field can be adjusted, with a few caveats.
    The main caveat is that the updated shape field must be the same geometry type
    as the original row, a point can be replaced with a point, a line with a line,
    and a polygon with another polygon.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每一行，光标返回的列表中包含的所有值都可以进行更新，除了唯一标识符（尽管不会抛出异常，UID值将不会被更新）。即使是形状字段也可以进行调整，但有一些注意事项。主要注意事项是更新的形状字段必须与原始行的几何类型相同，一个点可以被一个点替换，一条线可以被一条线替换，一个多边形可以被另一个多边形替换。
- en: Adjusting a point location
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调整点位置
- en: If a bus stop was moved down the street from its current position, it would
    need to be updated using an Update Cursor. This operation will require a new location
    in an X/Y format, preferably in the same projection as the feature class to avoid
    any loss of location fidelity in a spatial transformation. There are two methods
    available to us for creating a new point location, depending on the method used
    to access the data. The first method is used when the location data is requested
    using the `SHAPE@` tokens, and requires the use of an ArcPy Geometry type, in
    this case the Point type. The ArcPy Geometry types are discussed in detail in
    the next chapter.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个公交车站从当前位置沿街道向下移动，则需要使用更新光标来更新它。此操作需要一个X/Y格式的新的位置，最好与要素类相同的投影，以避免在空间变换中丢失位置精度。根据访问数据的方法，我们有两种创建新点位置的方法。第一种方法是在使用`SHAPE@`令牌请求位置数据时使用，需要使用ArcPy几何类型，在这种情况下是点类型。ArcPy几何类型将在下一章中详细讨论。
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: By passing an X and Y value to the ArcPy Point Geometry, a Point shape object
    is created and passed to the cursor in the updated list returned by the cursor.
    Assigning a new location to the shape field in a tuple, then using the cursor's
    `updateRow()` method allows the shape field value to be adjusted to the new location.
    Because the first four bus stops are at the same location, they are all moved
    to the new location.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 通过向ArcPy点几何传递X和Y值，创建一个点形状对象并将其传递给光标，在光标返回的更新列表中。将新位置分配给形状字段，然后使用光标的`updateRow()`方法允许调整形状字段值到新位置。因为前四个公交车站位于同一位置，它们都被移动到新位置。
- en: 'The second method applies to all other forms of shape field interactions, including
    the `SHAPE@XY`, `SHAPE@JSON`, `SHAPE@KML`, `SHAPE@WKT`, and `SHAPE@WKB` tokens.
    These are updated by passing the new location in the format requested back to
    the cursor and updating the list:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法适用于所有其他形状字段交互形式，包括`SHAPE@XY`、`SHAPE@JSON`、`SHAPE@KML`、`SHAPE@WKT`和`SHAPE@WKB`令牌。这些通过将新位置以请求的格式返回给光标并更新列表来更新：
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here is the same code using the `SHAPE@JSON` keyword and a JSON representation
    of the data:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是使用`SHAPE@JSON`关键字和数据JSON表示的相同代码：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As long as the keyword, the data format, and the geometry type match, the location
    is updated to the new coordinates. The keyword method is very useful when updating
    points, however, the `SHAPE@XY` keyword does not work with lines or polygons as
    the location returned represents the centroid of the requested geometry.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 只要关键字、数据格式和几何类型匹配，位置就会更新到新坐标。关键字方法在更新点时非常有用，然而，`SHAPE@XY`关键字不能与线或多边形一起使用，因为返回的位置代表请求的几何体的质心。
- en: Deleting a row using an Update Cursor
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用更新光标删除行
- en: 'If we need to remove a row of data, the `UpdateCursor` has a `deleteRow` method
    that works to remove the row. Note that this will completely remove the data row,
    making it unrecoverable. This method does not require a parameter to be passed
    to it; instead, it will remove the current row:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要删除一行数据，`UpdateCursor`有一个`deleteRow`方法可以用来删除行。请注意，这将完全删除数据行，使其无法恢复。此方法不需要传递任何参数；相反，它将删除当前行：
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Using an Insert Cursor
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用插入光标
- en: Now that we have a grasp on how to update existing data, let's investigate using
    Insert Cursors to create new data and add it to a feature class. The methods involved
    are very similar to using other data access cursors, except that we do not need
    to create an iterable cursor to extract rows of data; instead, we will create
    a cursor that will have the special `insertRow` method that is capable of adding
    data to the feature class row by row.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经掌握了如何更新现有数据的方法，让我们来研究如何使用插入游标创建新数据并将其添加到要素类中。涉及的方法与其他数据访问游标的使用非常相似，只是我们不需要创建一个可迭代的游标来提取数据行；相反，我们将创建一个具有特殊
    `insertRow` 方法的游标，该方法能够逐行将数据添加到要素类行中。
- en: The Insert Cursor can be called using the same `with..as` syntax but generally
    it is created as a variable in the flow of the script.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用相同的 `with..as` 语法来调用插入游标，但通常它是在脚本流程中作为一个变量创建的。
- en: Note
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that only one cursor can be invoked at a time; an exception (a Python error)
    will be generated when creating two insert (or update) cursors without first removing
    the initial cursor using the Python del keyword to remove the cursor variable
    from memory. This is why the `with..as` syntax is preferred by many.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，一次只能调用一个游标；如果没有首先使用Python的 `del` 关键字删除初始游标来从内存中移除游标变量，创建两个插入（或更新）游标将生成异常（Python错误）。这就是为什么许多人都更喜欢使用
    `with..as` 语法。
- en: The data access module's Insert Cursor requires some of the same parameters
    as the other cursors. The feature class to be written to and the list of fields
    that will have data inserted (this includes the shape field) are required. The
    spatial reference will not be used as the new shape data must be in the same spatial
    reference as the feature class. No SQL expression is allowed for an Insert Cursor.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 数据访问模块的插入游标需要与其他游标相同的某些参数。需要写入的要素类和将要插入数据的字段列表（包括形状字段）是必需的。空间参考将不会被使用，因为新的形状数据必须与要素类具有相同的空间参考。不允许在插入游标中使用SQL表达式。
- en: The data to be added to the feature class will be in the form of a tuple or
    a list, in the same order as the fields that are listed in the fields list parameter.
    Only fields of interest need to be included in the list of fields, meaning not
    every field needs a value in the list to be added. When adding a new row of data
    to a feature class, the unique ID will automatically be generated, making it unnecessary
    to explicitly include the unique ID (in the form of the `OID@` keyword) in the
    list of fields to be added.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加到要素类中的数据将以元组或列表的形式存在，其顺序与字段列表参数中列出的字段顺序相同。只需要包含感兴趣的字段在字段列表中，这意味着不是每个字段都需要在添加到列表中的值。当向要素类添加新行数据时，唯一ID将自动生成，因此不需要在添加字段的列表中显式包含唯一ID（以
    `OID@` 关键字的形式）。
- en: 'Let''s explore code that could be used to generate a new bus stop. We''ll write
    to a test dataset called `TestBusStops`. We are only interested in the Name and
    Stop ID fields, so those fields along with the shape field (which is in a State
    Plane projection system) will be included in the data list to be added:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索可以用来生成新的公交车站的代码。我们将写入一个名为 `TestBusStops` 的测试数据集。我们只对名称和车站ID字段感兴趣，因此这些字段以及形状字段（位于州平面投影系统中）将被包含在要添加的数据列表中：
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If there is an iterable list of data to be inserted into the feature class,
    create the Insert Cursor variable before entering the iteration, and delete the
    Insert Cursor variable once the data has been iterated through, or use the with..as
    method to automatically delete the Insert Cursor variable when the iteration is
    complete:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有一个可迭代的列表数据需要插入到要素类中，在进入迭代之前创建插入游标变量，一旦数据迭代完成，就删除插入游标变量，或者使用 `with..as` 方法在迭代完成后自动删除插入游标变量：
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: As a list, the `listOfLists` variable is iterable. Each list within it is considered
    as dataList in the iteration, and the first value in `dataList` (the coordinate
    pair) is passed to the `arcpy.Point()` function to create a `Point` object. The
    `arcpy.Point()` function requires two parameters, `X` and `Y`; these are extracted
    from the coordinate pair tuple using the asterisk, which 'explodes' the tuple
    and passes the values it contains to the function. The `Point` object is then
    added back into `dataList` using an index-based list assignment, which would not
    be available to us if the `dataList` variable was a tuple (we would instead have
    to create a new list and add in the `Point` object and the other data values).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 作为列表，`listOfLists` 变量是可迭代的。其中的每个列表在迭代时被视为 `dataList`，`dataList` 中的第一个值（坐标对）被传递给
    `arcpy.Point()` 函数以创建一个 `Point` 对象。`arcpy.Point()` 函数需要两个参数，`X` 和 `Y`；这些参数通过星号从坐标对元组中提取，星号会将元组“展开”，并将包含的值传递给函数。然后，使用基于索引的列表赋值将
    `Point` 对象添加回 `dataList`，如果 `dataList` 变量是一个元组（我们则必须创建一个新的列表，并将 `Point` 对象和其他数据值添加进去），则我们无法使用这种方法。
- en: Inserting a polyline geometry
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 插入折线几何
- en: To create and insert a polyline-type shape field from a series of points, it's
    best to use the `SHAPE@` keyword. We will also further explore the ArcPy Geometry
    types, which will be discussed in the next chapter. When working with the `SHAPE@`
    keyword, we have to work with data in ESRI's spatial binary formats, and the data
    must be written back to the field in the same format using the ArcPy Geometry
    types.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 要从一系列点创建并插入多边形类型的形状字段，最好使用 `SHAPE@` 关键字。我们还将进一步探讨 ArcPy 几何类型，这些内容将在下一章中讨论。当使用
    `SHAPE@` 关键字时，我们必须使用 ESRI 的空间二进制格式中的数据，并且必须使用 ArcPy 几何类型以相同的格式将数据写回字段。
- en: 'To create a polyline, there is one requirement, at least two valid points made
    of two coordinate pairs. When working with the `SHAPE@` keyword, there is a methodology
    to converting the coordinate pairs into an ArcPy Point and then adding it to an
    ArcPy Array, which is then converted into an ArcPy Polyline to be written back
    to the shape field:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建折线，有一个要求，至少由两个坐标对组成的两个有效点。当使用 `SHAPE@` 关键字时，有一种将坐标对转换为 ArcPy 点并将其添加到 ArcPy
    数组中的方法，然后该数组被转换为 ArcPy 折线，并写回到形状字段：
- en: '[PRE11]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The three coordinate pairs in tuples are iterated and converted into Point objects,
    which are in turn added to the Array object called `lineArray`. The Array object
    is then added to the Polyline object called `newLine`, which is then added to
    a tuple with the other data attributes and inserted into the feature class by
    the `InsertCursor`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 元组中的三个坐标对被迭代并转换为 `Point` 对象，这些对象随后被添加到名为 `lineArray` 的数组对象中。然后，该数组对象被添加到名为 `newLine`
    的折线对象中，该对象随后与其它数据属性一起添加到一个元组中，并通过 `InsertCursor` 插入到要素类中。
- en: Inserting a polygon geometry
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 插入多边形几何
- en: 'Polygons are also inserted, or updated, using cursors. The ArcPy Polygon Geometry
    type does not require the coordinate pairs to include the first point twice (that
    is, as the first point and as the last point). The polygon is closed automatically
    by the `arcpy.Polygon()` function:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 多边形也是通过游标插入或更新的。ArcPy 多边形几何类型不需要坐标对包含第一个点两次（即作为第一个点和最后一个点）。多边形会自动通过 `arcpy.Polygon()`
    函数关闭：
- en: '[PRE12]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Here is a visualization of the result of the insert operation:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是插入操作结果的可视化：
- en: '![Inserting a polygon geometry](img/8662OS_05_01.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![插入多边形几何](img/8662OS_05_01.jpg)'
- en: Summary
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter we covered the basic uses of data access module cursors. Search,
    update and Insert Cursors were explored and demonstrated, and a special focus
    was placed on the use of these cursors for extracting shape data from the shape
    field. Cursor parameters were also introduced, including the spatial reference
    parameter and the SQL expression `where` clause parameter. In the next chapter,
    we will further explore the use of cursors, especially with the use of ArcPy Geometry
    types.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了数据访问模块游标的基本用法。探讨了搜索、更新和插入游标，并特别关注了这些游标用于从形状字段提取形状数据的使用。还介绍了游标参数，包括空间参考参数和
    SQL 表达式 `where` 子句参数。在下一章中，我们将进一步探讨游标的使用，特别是与 ArcPy 几何类型的使用。
