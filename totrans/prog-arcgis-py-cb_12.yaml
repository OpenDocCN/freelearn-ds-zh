- en: Chapter 12. Using Python for Advanced ArcGIS
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第12章. 使用Python进行高级ArcGIS
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下菜谱：
- en: Getting started with the ArcGIS REST API
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始使用ArcGIS REST API
- en: Making HTTP requests and parsing the response with Python
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Python发送HTTP请求并解析响应
- en: Getting layer information with the ArcGIS REST API and Python
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用ArcGIS REST API和Python获取图层信息
- en: Exporting a map with the ArcGIS REST API and Python
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用ArcGIS REST API和Python导出地图
- en: Querying a map service with the ArcGIS REST API and Python
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用ArcGIS REST API和Python查询地图服务
- en: Geocoding with the Esri World Geocoding Service
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Esri世界地理编码服务进行地理编码
- en: Using FieldMap and FieldMappings
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用FieldMap和FieldMappings
- en: Using a ValueTable to provide multivalue input to a tool
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用ValueTable向工具提供多值输入
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In this chapter, we will cover some topics that are of a more advanced nature.
    Specifically, you will learn how to access the ArcGIS REST API using the Python
    `requests` module. In doing so, you will learn how to access data and services
    published by ArcGIS Server and ArcGIS Online. The Python `requests` module includes
    capabilities that allow your script to submit requests to a URL endpoint and receive
    responses in various formats, including the popular JSON format. Toward the end
    of the chapter, we will also over a couple of miscellaneous ArcPy topics, including
    the use of the `FieldMap` and `FieldMappings` objects to merge datasets and also
    working with `ValueTables` for situations where a tool has the capability of accepting
    multiple inputs.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍一些更高级的主题。具体来说，你将学习如何使用Python的`requests`模块访问ArcGIS REST API。通过这样做，你将学习如何访问由ArcGIS
    Server和ArcGIS Online发布的数据和服务。Python的`requests`模块包括允许你的脚本向URL端点提交请求并接收各种格式的响应的能力，包括流行的JSON格式。在本章的末尾，我们还将介绍几个ArcPy的相关主题，包括使用`FieldMap`和`FieldMappings`对象合并数据集，以及处理具有接受多个输入能力的工具的`ValueTables`。
- en: Getting started with the ArcGIS REST API
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用ArcGIS REST API
- en: Before we dive too far into the coding, you need to understand some basic concepts
    of the ArcGIS REST API. You need to specifically know how to construct a URL and
    interpret the response that is returned.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入编码之前，你需要了解一些ArcGIS REST API的基本概念。你需要特别了解如何构造URL和解释返回的响应。
- en: Getting ready
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: All the resources and operations of the ArcGIS REST API are exposed through
    a hierarchy of endpoints, which we'll examine as we move through the course of
    this book. For now, let's examine the specific steps that you need to understand
    to submit a request to the API through Python. In this recipe, you will learn
    how to use the ArcGIS Server Services directory to construct URL requests.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: ArcGIS REST API的所有资源和操作都通过端点层次结构公开，随着我们阅读本书的进程，我们将检查这些端点。现在，让我们检查你需要了解的具体步骤，以便通过Python向API提交请求。在这个菜谱中，你将学习如何使用ArcGIS
    Server的`Services`目录来构造URL请求。
- en: How to do it…
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'We''re going to use a publicly available ArcGIS Server instance to learn how
    to use the tools provided by the `Services` directory to construct a URL request:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用一个公开可用的ArcGIS Server实例来学习如何使用`Services`目录中提供的工具来构造URL请求：
- en: Open a web browser (preferably Google Chrome or Firefox).
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个网络浏览器（最好是Google Chrome或Firefox）。
- en: Go to [http://sampleserver1.arcgisonline.com/arcgis/rest/services](http://sampleserver1.arcgisonline.com/arcgis/rest/services):![How
    to do it…](img/B04314_12_01.jpg)
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往[http://sampleserver1.arcgisonline.com/arcgis/rest/services](http://sampleserver1.arcgisonline.com/arcgis/rest/services)：![如何操作…](img/B04314_12_01.jpg)
- en: 'Next, we need to determine the well-known endpoint. This represents a server
    catalog that is a set of operations that ArcGIS Server can perform along with
    specific services. Navigate to **Demographics** | **ESRI_Census_USA**. This is
    a well-known endpoint. If you look at the address bar in your browser you should
    see this:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要确定已知的端点。这代表了一个服务器目录，它是一组ArcGIS Server可以执行的操作以及特定的服务。导航到**人口统计** | **ESRI_Census_USA**。这是一个已知的端点。如果你查看浏览器中的地址栏，你应该能看到这个：
- en: '[http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Demographics/ESRI_Census_USA/MapServer](http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Demographics/ESRI_Census_USA/MapServer).'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Demographics/ESRI_Census_USA/MapServer](http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Demographics/ESRI_Census_USA/MapServer)。'
- en: 'Notice that this follows the pattern seen here:'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，这遵循了这里看到的模式：
- en: '`http://<host>/<site>/rest/services/<folder>/<serviceName>/<serviceType>`'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`http://<host>/<site>/rest/services/<folder>/<serviceName>/<serviceType>`'
- en: Spend some time clicking on the various links. As you do this, notice how the
    URL changes in the address bar. This URL is very important because it provides
    you with the content that will be submitted through a Python request:![How to
    do it…](img/B04314_12_02.jpg)
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 花些时间点击各种链接。在这样做的时候，注意地址栏中的 URL 如何变化。这个 URL 非常重要，因为它提供了您将通过 Python 请求提交的内容：![如何操作…](img/B04314_12_02.jpg)
- en: Next, you'll learn how to further construct URLs that can be submitted as requests
    to the ArcGIS REST API. This is a very important step. The syntax for the request
    includes the path to the resource along with an operation name followed by a list
    of parameters. The operation name indicates the kind of operation that will be
    performed against the resource. For example, you might want to export a map to
    an image file.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，您将学习如何进一步构建可以提交给 ArcGIS REST API 的 URL。这是一个非常重要的步骤。请求的语法包括资源的路径以及一个操作名称，后面跟着参数列表。操作名称指示将对资源执行的操作类型。例如，您可能希望将地图导出为图像文件。
- en: 'The question mark begins the list of parameters. Each parameter is then provided
    as a set of key/value pairs separated by an ampersand. All of this information
    is combined into a single URL string. This is illustrated in the following URL:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 问号开始参数列表。然后，每个参数都作为由 ampersand 分隔的键/值对提供。所有这些信息都组合成一个单一的 URL 字符串。以下 URL 说明了这一点：
- en: '`http://<resource-url>/<operation>?<parameter1=value1>&<parameter2=value2>`'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`http://<资源URL>/<操作>?<参数1=值1>&<参数2=值2>`'
- en: 'For now, we''re going to just enter the URL into the address bar of the browser.
    Copy and paste `http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Demographics/ESRI_Census_USA/MapServer/3/query?text=&geometry=&geometryType=esriGeometryPoint&inSR=&spatialRel=esriSpatialRelIntersects&relationParam=&objectIds=&where=name+%3D+%27Bexar%27&time=&returnCountOnly=false&returnIdsOnly=false&returnGeometry=true&maxAllowableOffset=&outSR=&outFields=&f=json`
    into the address bar in your browser. You may want to use the digital version
    of this book to copy and paste this URL, rather than trying to type this into
    the address bar. Hit return to see this output:'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 目前，我们只需将 URL 输入到浏览器的地址栏中。将 `http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Demographics/ESRI_Census_USA/MapServer/3/query?text=&geometry=&geometryType=esriGeometryPoint&inSR=&spatialRel=esriSpatialRelIntersects&relationParam=&objectIds=&where=name+%3D+%27Bexar%27&time=&returnCountOnly=false&returnIdsOnly=false&returnGeometry=true&maxAllowableOffset=&outSR=&outFields=&f=json`
    复制并粘贴到您的浏览器地址栏中。您可能想使用这本书的数字版本来复制和粘贴此 URL，而不是尝试将其键入到地址栏中。按回车键查看此输出：
- en: '![How to do it…](img/B04314_12_03.jpg)'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/B04314_12_03.jpg)'
- en: You can use the Python `requests` module to simplify this process and access
    the response information directly from within your geoprocessing script. The `requests`
    module allows you to define the list of parameters as a Python dictionary and
    then it handles the creation of the URL query string, including URL encoding.
    You'll learn how to do that at the end of this exercise.
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以使用 Python 的 `requests` 模块来简化此过程，并在您的地理处理脚本中直接访问响应信息。`requests` 模块允许您将参数列表定义为
    Python 字典，然后它将处理 URL 查询字符串的创建，包括 URL 编码。您将在本练习的末尾学习如何做到这一点。
- en: The Services Directory contains dialog boxes that you can use to generate parameter
    values. You can find links to these dialog boxes at the bottom of the services
    page. In your browser, navigate to [http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Demographics/ESRI_Census_USA/MapServer/1](http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Demographics/ESRI_Census_USA/MapServer/1).
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务目录包含您可以使用来生成参数值的对话框。您可以在服务页面底部找到这些对话框的链接。在您的浏览器中，导航到 [http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Demographics/ESRI_Census_USA/MapServer/1](http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Demographics/ESRI_Census_USA/MapServer/1)。
- en: Go to the bottom of the page and click on the **Query** link to display the
    dialog box, as seen in this screenshot:![How to do it…](img/B04314_12_04.jpg)
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 滚动到页面底部并点击 **查询** 链接以显示对话框，如图所示：![如何操作…](img/B04314_12_04.jpg)
- en: Add a `where` clause, as seen in the following screenshot. Set the **Return
    Fields (Comma Seperated)** to `POP2000, POP2007`, and `BLKGRP`. Change **Format:**
    to `JSON` and **Return Geometry:** to `False`. Then, click on **Query (GET)**:![How
    to do it…](img/B04314_12_05.jpg)
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个 `where` 子句，如图所示。将 **返回字段（逗号分隔）** 设置为 `POP2000, POP2007` 和 `BLKGRP`。将 **格式**
    更改为 `JSON` 并将 **返回几何形状** 更改为 `False`。然后，点击 **查询（GET）**：![如何操作…](img/B04314_12_05.jpg)
- en: The query will run and these results will be returned:![How to do it…](img/B04314_12_06.jpg)
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查询将会运行，并将返回以下结果：![如何操作…](img/B04314_12_06.jpg)
- en: 'Examine the address bar in your browser to see the URL that was generated:
    `http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Demographics/ESRI_Census_USA/MapServer/1/query?text=&geometry=&geometryType=esriGeometryPolygon&inSR=&spatialRel=esriSpatialRelIntersects&relationParam=&objectIds=&where=STATE_FIPS+%3D+%2748%27+and+CNTY_FIPS+%3D+%27021%27&time=&returnCountOnly=false&returnIdsOnly=false&returnGeometry=false&maxAllowableOffset=&outSR=&outFields=POP2000%2CPOP2007%2CBLKGRP&f=pjson`.'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看浏览器地址栏以查看生成的URL：`http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Demographics/ESRI_Census_USA/MapServer/1/query?text=&geometry=&geometryType=esriGeometryPolygon&inSR=&spatialRel=esriSpatialRelIntersects&relationParam=&objectIds=&where=STATE_FIPS+%3D+%2748%27+and+CNTY_FIPS+%3D+%27021%27&time=&returnCountOnly=false&returnIdsOnly=false&returnGeometry=false&maxAllowableOffset=&outSR=&outFields=POP2000%2CPOP2007%2CBLKGRP&f=pjson`。
- en: In an upcoming recipe, you'll take this same URL, submit the request, and process
    the results using Python.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在即将到来的菜谱中，你将使用相同的URL，提交请求，并使用Python处理结果。
- en: How it works…
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The Services Directory of an ArcGIS Server instance provides a variety of tools
    that you can use to generate URL requests and examine the responses those requests
    produce. In this recipe, you learned how to use the query task to construct an
    attribute query. In doing so, you learned how a URL request is constructed.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: ArcGIS服务器实例的服务目录提供了各种工具，你可以使用这些工具来生成URL请求并检查这些请求产生的响应。在这个菜谱中，你学习了如何使用查询任务来构建属性查询。在这个过程中，你学习了如何构建URL请求。
- en: Making HTTP requests and parsing the response with Python
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Python发送HTTP请求并解析响应
- en: There are a number of Python modules that you can use to make REST requests.
    There are really too many! Modules include `urllib2`, `httplib2`, `pycurl`, and
    `requests`. `requests` is definitely the best of the bunch in my opinion. It is
    cleaner and easier to use for repeated interaction with RESTful APIs. Once you've
    made the request, you can then parse the JSON response with the Python `json`
    module. In this recipe, you will learn how to do this.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用许多Python模块来制作REST请求。实际上，太多了！模块包括`urllib2`、`httplib2`、`pycurl`和`requests`。在我看来，`requests`无疑是其中最好的。它更简洁，更容易用于与RESTful
    API的重复交互。一旦你发出了请求，你就可以使用Python的`json`模块来解析JSON响应。在这个菜谱中，你将学习如何做到这一点。
- en: Getting ready
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The Python `requests` module can be used to submit `requests` to an ArcGIS
    Server resource and process the returned response. Follow these steps to learn
    the basic steps involved in submitting `requests` and processing the response
    using the `requests` module:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Python的`requests`模块可以用来向ArcGIS服务器资源提交请求并处理返回的响应。按照以下步骤学习使用`requests`模块提交请求和处理响应的基本步骤：
- en: How to do it…
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Before we get started, make sure that you have downloaded and installed the
    `requests` module, using `pip`. If you haven''t already done so, I have provided
    the following instructions to install both `pip` and the `requests` module:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，请确保你已经下载并安装了`requests`模块，使用`pip`。如果你还没有这样做，我提供了以下安装`pip`和`requests`模块的说明：
- en: Note
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'This recipe and all subsequent recipes in this chapter use the Python `requests`
    module. If you don''t already have this module installed on your computer, you
    will need to do so at this time. The `requests` module is installed using `pip`,
    which needs to be installed on your computer before the `requests` module is installed.
    Later versions of Python including 2.7.9 (on the Python2 series) and Python 3.4
    include `pip` by default, so you may have it already. To test to see if you already
    have `pip` installed, you can enter the following from a DOS prompt:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱以及本章中随后的所有菜谱都使用Python的`requests`模块。如果你还没有在你的计算机上安装这个模块，你将需要现在安装它。`requests`模块是通过`pip`安装的，在安装`requests`模块之前需要在你的计算机上安装`pip`。Python
    2.7.9（Python 2系列）和Python 3.4的后续版本默认包含`pip`，所以你可能已经有了它。为了测试你是否已经安装了`pip`，你可以在DOS提示符下输入以下内容：
- en: '[PRE0]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If you don't have `pip` installed, you'll get an error message and you'll need
    to `install pip` ([https://pip.pypa.io/en/latest/installing.html](https://pip.pypa.io/en/latest/installing.html)).
    Once installed, you can download and install the `requests` module by using the
    preceding install command.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有安装`pip`，你会收到一个错误消息，你需要`安装pip`([https://pip.pypa.io/en/latest/installing.html](https://pip.pypa.io/en/latest/installing.html))。一旦安装，你可以使用前面的安装命令下载并安装`requests`模块。
- en: Open **IDLE** (or another Python development environment) and select **File**
    | **New Window**. Save the file under the name `C:\ArcpyBook\Ch12\ReqJSON.py`.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**IDLE**（或另一个Python开发环境）并选择**文件** | **新建窗口**。将文件保存为`C:\ArcpyBook\Ch12\ReqJSON.py`。
- en: 'Import the `requests` and `json` modules:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`requests`和`json`模块：
- en: '[PRE1]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Create a new variable that contains a URL to a list of services provided by
    ArcGIS Online. This URL contains an output format of `pjson`, a JSON format contained
    in a pretty format to provide easy readability:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含ArcGIS Online提供的服务列表的URL的新变量。此URL包含输出格式为`pjson`的输出，这是一个包含在美观格式中的JSON格式，以提供易于阅读性：
- en: '[PRE2]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Use the `get()` method in the `requests` module to submit an HTTP request to
    the ArcGIS REST API. You''ll store the response in a variable called `r`:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`requests`模块中的`get()`方法向ArcGIS REST API提交HTTP请求。您将响应存储在一个名为`r`的变量中：
- en: '[PRE3]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, let''s print out the response that is returned:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们打印出返回的响应：
- en: '[PRE4]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Save your script.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存您的脚本。
- en: Run your script and you will see the following output. This is the JSON response
    that has been returned by the ArcGIS REST API:![How to do it…](img/B04314_12_07.jpg)
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行您的脚本，您将看到以下输出。这是由ArcGIS REST API返回的JSON响应：![如何操作…](img/B04314_12_07.jpg)
- en: 'Use the `json.loads()` method to parse the returned `json` into a Python dictionary
    object. Go ahead and remove the previous print statement as well:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`json.loads()`方法将返回的`json`解析为Python字典对象。现在，请删除之前的打印语句：
- en: '[PRE5]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You can check your work by examining the `C:\ArcpyBook\code\Ch12\ReqJSON.py`
    solution file.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过检查`C:\ArcpyBook\code\Ch12\ReqJSON.py`解决方案文件来验证您的作品。
- en: 'Save and run your script to see the output. The `loads()` method has converted
    the `json` output into a Python dictionary:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并运行您的脚本以查看输出。`loads()`方法已将`json`输出转换为Python字典：
- en: '[PRE6]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works…
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: In this simple recipe, you learned how to use the Python `requests` module to
    submit a request to an ArcGIS Server instance by using the `requests.get()` method,
    and then process the response from the server. The `json.loads()` method was used
    to convert the response to a Python dictionary object for easier processing. The
    response contains basic data about the ArcGIS Server instance, including folders,
    services, and versions. We'll look at more complex examples in the coming recipes.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个简单的菜谱中，您学习了如何使用Python `requests`模块通过`requests.get()`方法向ArcGIS服务器实例提交请求，然后处理来自服务器的响应。`json.loads()`方法用于将响应转换为Python字典对象，以便更容易处理。响应包含有关ArcGIS服务器实例的基本数据，包括文件夹、服务和版本。在接下来的菜谱中，我们将查看更复杂的示例。
- en: Getting layer information with the ArcGIS REST API and Python
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ArcGIS REST API和Python获取图层信息
- en: A map service resource contains datasets that can include tables or layers.
    It contains basic information about a service, including feature layers, tables,
    and service descriptions. In this recipe, you will learn how to return layer information
    from a map service, using Python and the ArcGIS REST API.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 地图服务资源包含数据集，这些数据集可以包括表格或图层。它包含有关服务的基本信息，包括要素图层、表格和服务描述。在本菜谱中，您将学习如何使用Python和ArcGIS
    REST API从地图服务中返回图层信息。
- en: Getting ready
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To get information about a specific layer in a map service, you will need to
    reference the index number that is associated with the layer. When you examine
    the Services Directory page for a service, you will find a list of layers that
    are part of the map service along with index numbers for each layer. The index
    numbers are used instead of the layer name when requesting information about a
    layer. As we've done in the past few recipes, we'll use the Python `requests`
    module to make the request and process the response.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取地图服务中特定图层的信息，您需要引用与该图层关联的索引号。当您检查服务的服务目录页面时，您将找到一个列表，其中包含地图服务中的图层及其每个图层的索引号。索引号在请求图层信息时用于代替图层名称。正如我们在过去几个菜谱中所做的那样，我们将使用Python
    `requests`模块来发出请求并处理响应。
- en: How to do it…
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Follow these steps to learn how to get information about a layer from a map
    service:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤学习如何从地图服务中获取图层信息：
- en: In IDLE or another Python development environment, create a new Python script
    called `GetLayerInformation.py` and save it to the `C:\ArcpyBook\Ch12` folder.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在IDLE或另一个Python开发环境中，创建一个名为`GetLayerInformation.py`的新Python脚本，并将其保存到`C:\ArcpyBook\Ch12`文件夹。
- en: 'Import the `requests` and `json` modules:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`requests`和`json`模块：
- en: '[PRE7]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Create the following `agisurl` variable. This will serve as the base URL that
    references a specific layer in the `ESRI_CENSUS_USA` map service. Here, we are
    referring to a layer with an index number of `1`. Also, include an output format
    of `pjson`:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建以下 `agisurl` 变量。这将成为引用 `ESRI_CENSUS_USA` 地图服务中特定层的基准 URL。在这里，我们引用了一个索引号为 `1`
    的层。还包括一个输出格式 `pjson`：
- en: '[PRE8]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Create a `payload` variable. This variable will hold a Python dictionary object
    containing the parameters that will be passed as part of the request. We''ll include
    a `where` clause and set a few other properties:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `payload` 变量。该变量将包含一个 Python 字典对象，其中包含作为请求一部分传递的参数。我们将包括一个 `where` 子句并设置一些其他属性：
- en: '[PRE9]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Call the `requests.get()` method and pass the `agisurl` variable. The response
    will be stored in a variable called `r`:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用 `requests.get()` 方法并传递 `agisurl` 变量。响应将存储在名为 `r` 的变量中：
- en: '[PRE10]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Convert the JSON to a Python dictionary:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 JSON 转换为 Python 字典：
- en: '[PRE11]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Print out the name, geographic extent, and fields of the layer:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印出层的名称、地理范围和字段：
- en: '[PRE12]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: You can check your work by examining the `C:\ArcpyBook\code\Ch12\GetLayerInformation.py`
    solution file.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过检查 `C:\ArcpyBook\code\Ch12\GetLayerInformation.py` 解决方案文件来验证您的作品。
- en: Save the script and run it to see this output:![How to do it…](img/B04314_12_12.jpg)
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存脚本并运行它以查看以下输出：![如何操作…](img/B04314_12_12.jpg)
- en: How it works…
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: In this recipe, we passed a reference to a URL that contains the path to a specific
    layer within a map service. The layer was specified through the use of an index
    number (`1`, in this case). This URL was passed to the Python `requests.get()`
    method. The response was returned in `json` format and we then converted this
    to a Python dictionary. The dictionary included key/value pairs for the name,
    extent, and fields of the layer. That information was printed to the console.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们传递了一个包含指向地图服务中特定层路径的 URL 的引用。该层通过使用索引号（在这种情况下为 `1`）指定。此 URL 被传递给 Python
    `requests.get()` 方法。响应以 `json` 格式返回，然后我们将其转换为 Python 字典。该字典包含层的名称、范围和字段的键/值对。这些信息被打印到控制台。
- en: Exporting a map with the ArcGIS REST API and Python
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 ArcGIS REST API 和 Python 导出地图
- en: The ArcGIS REST API has a large set of operations that you can use when requesting
    information from an ArcGIS Server instance. For example, you can export maps,
    query layers, geocode addresses, and much more. In this recipe, you will learn
    how to export a map image from a map service.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: ArcGIS REST API 有一个庞大的操作集，您可以在请求 ArcGIS 服务器实例的信息时使用。例如，您可以导出地图、查询图层、地理编码地址等等。在这个配方中，您将学习如何从地图服务中导出地图图像。
- en: Getting ready
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The `export` operation can be used to create a map image from a map service.
    The response to this request includes the URL of the image, width, height, extent,
    and scale. In this recipe, you'll use the export operation to export a map as
    an image file.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`export` 操作可用于从地图服务创建地图图像。此请求的响应包括图像的 URL、宽度、高度、范围和比例。在这个配方中，您将使用导出操作将地图导出为图像文件。'
- en: How to do it…
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: In your Python development environment, create a new script, save it as `C:\ArcpyBook\Ch12\ExportMapToImage.py`.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的 Python 开发环境中创建一个新的脚本，将其保存为 `C:\ArcpyBook\Ch12\ExportMapToImage.py`。
- en: 'Import the `requests` and `json` modules:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入 `requests` 和 `json` 模块：
- en: '[PRE13]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Create a new variable called `agisurl`, assign the URL, and export the operation,
    as seen here:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的变量 `agisurl`，分配 URL，并执行导出操作，如下所示：
- en: '[PRE14]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Create a new dictionary object that will hold the key/value pairs that help
    define the query string. These are the parameters that will be passed to the export
    operation:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的字典对象，该对象将包含帮助定义查询字符串的键/值对。这些是传递给导出操作的参数：
- en: '[PRE15]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Call the `requests.get()` method, passing the URL and the Python dictionary
    of parameters. The response will be stored in a variable called `r`:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用 `requests.get()` 方法，传递 URL 和 Python 字典参数。响应将存储在名为 `r` 的变量中：
- en: '[PRE16]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Print out the contents of the `response` object:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印出 `response` 对象的内容：
- en: '[PRE17]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: You can check your work by examining the `C:\ArcpyBook\code\Ch12\ExportMapToImage.py`
    solution file.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过检查 `C:\ArcpyBook\code\Ch12\ExportMapToImage.py` 解决方案文件来验证您的作品。
- en: Save and run the script to see an output similar to this:![How to do it…](img/B04314_12_08.jpg)
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并运行脚本，查看类似以下输出：![如何操作…](img/B04314_12_08.jpg)
- en: Copy and paste the URL for the `.gif` file that was generated into your browser
    address bar, and click on return on your keyboard to see the file:![How to do
    it…](img/B04314_12_09.jpg)
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将生成的 `.gif` 文件的 URL 复制并粘贴到浏览器地址栏中，然后在键盘上点击回车键查看文件：![如何操作…](img/B04314_12_09.jpg)
- en: How it works…
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The export operation in the ArcGIS REST API can be used to export an image file
    from a map service. If you examine [http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StateCityHighway_USA/MapServer/export](http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StateCityHighway_USA/MapServer/export),
    which we used to generate the map image in this recipe, you'll see the term `export`
    at the end of the URL. This is what triggers the execution of the `export` operation.
    In addition to this, we also appended a bounding box (map extent), size, spatial
    reference for the image, and format through the payload variable. The request
    is sent to the server through the `requests.get()` method which accepts both the
    URL and payload variable.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: ArcGIS REST API 中的导出操作可以用来从地图服务中导出图像文件。如果您检查[http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StateCityHighway_USA/MapServer/export](http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StateCityHighway_USA/MapServer/export)，这是我们用来生成本食谱中地图图像的，您会看到
    URL 末尾的术语 `export`。这就是触发 `export` 操作执行的原因。除此之外，我们还在有效载荷变量中附加了一个边界框（地图范围）、大小、图像的空间参考和格式。
- en: Querying a map service with the ArcGIS REST API and Python
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 ArcGIS REST API 和 Python 查询地图服务
- en: The `query` operation in the ArcGIS REST API performs a query against a map
    service and returns a feature set. The feature set includes values for fields
    requested by the user and can also return geometry, if requested.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: ArcGIS REST API 中的 `query` 操作对地图服务执行查询并返回一个要素集。要素集包括用户请求的字段值，如果请求，还可以返回几何形状。
- en: Getting ready
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this recipe, you will build on the first recipe, in which you generated a
    URL using the ArcGIS Services page dialog box to generate results. In this recipe,
    you will use the ArcGIS Server Services page dialog box to generate a URL request
    that queried a map service layer and returned results. You may recall that the
    URL was `http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Demographics/ESRI_Census_USA/MapServer/1/query?text=&geometry=&geometryType=esriGeometryPolygon&inSR=&spatialRel=esriSpatialRelIntersects&relationParam=&objectIds=&where=STATE_FIPS+%3D+%2748%27+and+CNTY_FIPS+%3D+%27021%27&time=&returnCountOnly=false&returnIdsOnly=false&returnGeometry=false&maxAllowableOffset=&outSR=&outFields=POP2000%2CPOP2007%2CBLKGRP&f=pjson`.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，您将基于第一个食谱，在该食谱中，您使用 ArcGIS 服务页面对话框生成 URL 来生成结果。在本食谱中，您将使用 ArcGIS 服务器服务页面对话框生成一个查询地图服务层并返回结果的
    URL 请求。您可能还记得 URL 是 `http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Demographics/ESRI_Census_USA/MapServer/1/query?text=&geometry=&geometryType=esriGeometryPolygon&inSR=&spatialRel=esriSpatialRelIntersects&relationParam=&objectIds=&where=STATE_FIPS+%3D+%2748%27+and+CNTY_FIPS+%3D+%27021%27&time=&returnCountOnly=false&returnIdsOnly=false&returnGeometry=false&maxAllowableOffset=&outSR=&outFields=POP2000%2CPOP2007%2CBLKGRP&f=pjson`。
- en: Now, let's learn how to submit this request using Python.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们学习如何使用 Python 提交此请求。
- en: How to do it…
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: In IDLE or another Python development environment, create a new Python script
    called `QueryMapService.py` and save it to the `C:\ArcpyBook\Ch12` folder.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 IDLE 或另一个 Python 开发环境中，创建一个新的 Python 脚本，命名为 `QueryMapService.py`，并将其保存到 `C:\ArcpyBook\Ch12`
    文件夹。
- en: 'In your browser, navigate to: [http://resources.arcgis.com/en/help/arcgis-rest-api/index.html#//02r3000000p1000000](http://resources.arcgis.com/en/help/arcgis-rest-api/index.html#//02r3000000p1000000).
    This is the REST API page for the `query` operation against a layer in a map service.
    As you scroll down the `help` page, you should see the same parameters as were
    generated using the dialog box, such as `geometry`, `geometryType`, `inSR`, `spatialRel`,
    `where`, and others.'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的浏览器中，导航到：[http://resources.arcgis.com/en/help/arcgis-rest-api/index.html#//02r3000000p1000000](http://resources.arcgis.com/en/help/arcgis-rest-api/index.html#//02r3000000p1000000)。这是对地图服务中图层执行
    `query` 操作的 REST API 页面。当您滚动到 `help` 页面时，您应该看到与对话框生成的相同参数，例如 `geometry`、`geometryType`、`inSR`、`spatialRel`、`where`
    等。
- en: 'In your script, import the `requests` and `json` modules:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的脚本中，导入 `requests` 和 `json` 模块：
- en: '[PRE18]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Create the following `agisurl` variable. This will serve as the base URL that
    references the `query` operation on the `census block group` layer (identified
    by an identifier of `1` in the URL) in the `ESRI_Census_USA` map service:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建以下 `agisurl` 变量。这将作为基 URL，引用 `ESRI_Census_USA` 地图服务中 `census block group`
    层（在 URL 中通过标识符 `1` 识别）上的 `query` 操作：
- en: '[PRE19]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now, create a Python dictionary object, as shown in the following code. We''re
    going to leave out some of the parameters that were not defined or used in the
    dialog box. We''re just creating an attribute query in this instance so that all
    the geometry parameters can be removed:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，创建一个 Python 字典对象，如下面的代码所示。我们将省略在对话框中没有定义或使用的某些参数。在这个例子中，我们只是创建一个属性查询，以便可以删除所有几何参数：
- en: '[PRE20]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The `requests.get()` method can accept a Python dictionary object as the second
    parameter. This dictionary defines the set of key/value pairs that help define
    the query string. Add the `requests.get()` method:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`requests.get()` 方法可以接受一个 Python 字典对象作为第二个参数。此字典定义了一组键/值对，有助于定义查询字符串。添加 `requests.get()`
    方法：'
- en: '[PRE21]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Include a `print` statement in order to print the response that is returned.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包含一个 `print` 语句以打印返回的响应。
- en: '[PRE22]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Save the script and run it to see this output:![How to do it…](img/B04314_12_10.jpg)
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存脚本并运行它以查看此输出：![如何操作…](img/B04314_12_10.jpg)
- en: 'Now, convert this JSON object to a Python dictionary. Also, comment out the
    `print` statement that you added in the last step:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将此 JSON 对象转换为 Python 字典。同时，注释掉您在上一步中添加的 `print` 语句：
- en: '[PRE23]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The Python dictionary object returned by the `json.loads()` method will contain
    the contents of the JSON object. You can then pull the individual data elements
    out of the dictionary. In this case, we want to pull out the attributes of each
    of the feature returned `(BLKGRP`, `POP2007`, and `POP2000`). We can do so by
    using the following code, which you''ll need to add to your script:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由 `json.loads()` 方法返回的 Python 字典对象将包含 JSON 对象的内容。然后，您可以从中提取单独的数据元素。在这种情况下，我们想要提取返回的每个要素的属性（`BLKGRP`、`POP2007`
    和 `POP2000`）。我们可以通过以下代码来实现，您需要将其添加到脚本中：
- en: '[PRE24]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: You can check your work by examining the `C:\ArcpyBook\code\Ch12\QueryMapService.py`
    solution file.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过检查 `C:\ArcpyBook\code\Ch12\QueryMapService.py` 解决方案文件来检查您的工作。
- en: Save and execute your script to see these results:![How to do it…](img/B04314_12_11.jpg)
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并执行您的脚本以查看这些结果：![如何操作…](img/B04314_12_11.jpg)
- en: How it works…
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The `query` operation in the ArcGIS REST API can be used to perform spatial
    and attribute queries against a layer in an ArcGIS Server map service. We used
    the `requests.get()` method to perform an attribute query against the `census
    block groups` layer. We included various parameters, including a where clause
    that will only return records where the `ST_FIPS` code is `48` and the `CNTY_FIPS`
    code is `021` (Bexar County, Texas). The `response` object was then converted
    to a Python dictionary and we included a `for` loop to iterate through each of
    the returned records and print out the block group name, and the population for
    the years 2000 and 2007.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ArcGIS REST API 中的 `query` 操作可以用来对 ArcGIS 服务器地图服务中的图层进行空间和属性查询。我们使用了 `requests.get()`
    方法对 `census block groups` 图层进行属性查询。我们包含了各种参数，包括一个 `where` 子句，它将只返回 `ST_FIPS` 代码为
    `48` 且 `CNTY_FIPS` 代码为 `021`（德克萨斯州的贝克斯县）的记录。然后，将 `response` 对象转换为 Python 字典，并包含一个
    `for` 循环来遍历返回的每条记录，并打印出区块组名称以及 2000 年和 2007 年的人口。
- en: Geocoding with the Esri World Geocoding Service
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Esri 世界地理编码服务进行地理编码
- en: The Esri World Geocoding Service can be used to find addresses and places in
    supported countries. This service contains both free and paid operations. The
    `find` operation, which finds one address per request, is always a free service.
    The `geocodeAddresses` operation accepts a list of addresses for geocoding and
    is a paid service only. The other operations can be free or paid. If you are using
    the operations in a temporary capacity, they are free. Temporary simply means
    that you aren't storing the results for later use. If this is the case, then it
    is a paid service. In this recipe, you will use the Esri World Geocoding service
    to geocode an address.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: Esri 世界地理编码服务可以用于在支持的国家中查找地址和地点。此服务包含免费和付费操作。每次请求查找一个地址的 `find` 操作始终是免费服务。`geocodeAddresses`
    操作接受一个地址列表进行地理编码，并且仅是付费服务。其他操作可以是免费或付费。如果您是临时使用这些操作，它们是免费的。临时意味着您不会存储结果以供以后使用。如果是这种情况，那么它是一个付费服务。在这个菜谱中，您将使用
    Esri 世界地理编码服务来地理编码一个地址。
- en: Getting ready
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The ArcGIS REST API `find` operation can be used to find the geographic coordinates
    of a single address. As we've done in the past few recipes, we'll use the Python
    `requests` module to make the request and process the response.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: ArcGIS REST API 的 `find` 操作可以用来查找单个地址的地理坐标。正如我们在过去几个菜谱中所做的那样，我们将使用 Python `requests`
    模块来发出请求并处理响应。
- en: How to do it…
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: In IDLE or another Python development environment, create a new Python script
    called `GeocodeAddress.py` and save it to the `C:\ArcpyBook\Ch12` folder.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 IDLE 或其他 Python 开发环境中，创建一个名为 `GeocodeAddress.py` 的新 Python 脚本，并将其保存到 `C:\ArcpyBook\Ch12`
    文件夹中。
- en: 'Import the `requests` and `json` modules:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入 `requests` 和 `json` 模块：
- en: '[PRE25]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Create the following `agisurl` variable. This will point to the Esri World
    Geocoding Service and the `find` operation for a particular service. Also, define
    a Python dictionary that will hold the address to be submitted and the output
    format. You can change the address, if you wish:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建以下 `agisurl` 变量。这将指向 Esri World Geocoding 服务和特定服务的 `find` 操作。同时，定义一个 Python
    字典，它将包含要提交的地址和输出格式。如果您愿意，可以更改地址：
- en: '[PRE26]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Call the `requests.get()` method and pass the URL and parameters. The response
    will be stored in a variable called `r`. Then, convert the returned JSON object
    to a Python dictionary:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用 `requests.get()` 方法并传递 URL 和参数。响应将存储在一个名为 `r` 的变量中。然后，将返回的 JSON 对象转换为 Python
    字典：
- en: '[PRE27]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Print out some of the results:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印一些结果：
- en: '[PRE28]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: You can check your work by examining the `C:\ArcpyBook\code\Ch12\GeocodeAddress.py`
    solution file.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过检查 `C:\ArcpyBook\code\Ch12\GeocodeAddress.py` 解决方案文件来检查您的作业。
- en: 'Save the script and run it to see the following output:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存脚本并运行，查看以下输出：
- en: '[PRE29]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: How it works…
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The `find` operation in the ArcGIS REST API can be used to perform geocoding
    operations for a single address. As we've done in the past few recipes, we used
    the Python `requests.get()` method to submit an operation request (find, in this
    case) along parameters that include the address to be geocoded. The response that
    was returned included the latitude and longitude of the address, geocoded score,
    and the address type.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: ArcGIS REST API 中的 `find` 操作可用于对单个地址执行地理编码操作。正如我们在过去几个配方中所做的那样，我们使用了 Python
    的 `requests.get()` 方法来提交操作请求（在这种情况下为 `find`），并包括要地理编码的地址等参数。返回的响应包括地址的纬度和经度、地理编码分数和地址类型。
- en: Using FieldMap and FieldMappings
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 FieldMap 和 FieldMappings
- en: Up until this point in the chapter, we've covered how to use Python with the
    ArcGIS REST API to access ArcGIS Server services. Now, we're going to switch gears
    and go back into the ArcPy module and discuss the `FieldMap` and `FieldMappings`
    classes.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，本章已介绍了如何使用 Python 与 ArcGIS REST API 访问 ArcGIS Server 服务。现在，我们将转换方向，回到
    ArcPy 模块，并讨论 `FieldMap` 和 `FieldMappings` 类。
- en: Getting ready
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: A common GIS operation is to merge several disparate datasets into a single
    dataset of a larger area. Often, the fields in the datasets to be merged will
    be the same and there won't be any problems. However, there will be times when
    the fields of the various datasets do not match. In this case, you will need to
    map the relationship between fields in one dataset to fields in another dataset.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 一个常见的 GIS 操作是将几个不同的数据集合并成一个更大区域的单个数据集。通常，要合并的数据集中的字段将是相同的，并且不会出现任何问题。然而，有时各种数据集的字段可能不匹配。在这种情况下，您需要将一个数据集中的字段与另一个数据集中的字段之间的关系进行映射。
- en: '![Getting ready](img/B04314_12_13.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![准备工作](img/B04314_12_13.jpg)'
- en: The preceding diagram displays the relationship between the various ArcPy classes
    that are used to define field mapping. A `FieldMap` object contains a field definition
    and a list of input fields from one or more tables, or feature classes that provide
    the values for the field. Each `FieldMap` object that you create is then added
    to a `FieldMappings` object, which serves as a container for these objects. Finally,
    the `FieldMappings` object can then be sent as input to various geoprocessing
    tools, such as the `Merge` tool.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 上述图示显示了用于定义字段映射的各种 ArcPy 类之间的关系。一个 `FieldMap` 对象包含字段定义和来自一个或多个表或要素类的输入字段列表，或提供字段值的要素类。您创建的每个
    `FieldMap` 对象随后被添加到一个 `FieldMappings` 对象中，该对象作为这些对象的容器。最后，`FieldMappings` 对象可以被发送到各种地理处理工具，如
    `Merge` 工具作为输入。
- en: How to do it…
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'In this exercise, you''ll learn how to use the FieldMap and FieldMappings objects:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在本练习中，您将学习如何使用 FieldMap 和 FieldMappings 对象：
- en: In IDLE or another Python development environment, create a new Python script
    called `UsingFieldMap.py` and save it to your `C:\ArcpyBook\Ch12` folder.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 IDLE 或其他 Python 开发环境中，创建一个名为 `UsingFieldMap.py` 的新 Python 脚本，并将其保存到您的 `C:\ArcpyBook\Ch12`
    文件夹中。
- en: 'Import `arcpy`:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '导入 `arcpy`:'
- en: '[PRE30]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Set the workspace environment variable and a variable that will point to the
    output feature class:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置工作空间环境变量和一个指向输出要素类的变量：
- en: '[PRE31]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Create a `FieldMappings` object and three `FieldMap` objects. The `FieldMap`
    objects will hold references to fields for a state **Federal Information Processing
    Standard** (**FIPS**) code, county FIPS code, and a tract:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`FieldMappings`对象和三个`FieldMap`对象。`FieldMap`对象将持有州**联邦信息处理标准**（**FIPS**）代码、县FIPS代码和地块字段的引用：
- en: '[PRE32]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Get a list of all the County polygon feature classes in the current workspace.
    Each County feature class has a field called `STFID`, which contains the state
    FIPS code, county FIPS code, and a tract for each feature. This information is
    stored as one long string (`48491020301`, for example), where the first two characters
    are the state code, the third through fifth characters are the county code, and
    the remaining characters are the tract. As part of the merge operation, we''re
    going to pull each of the individual elements out and store them in separate fields:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取当前工作空间中所有县多边形特征类的列表。每个县特征类都有一个名为`STFID`的字段，其中包含每个特征的州FIPS代码、县FIPS代码和一个地块。这些信息存储为一个长的字符串（例如`48491020301`），其中前两位是州代码，第三到第五位是县代码，其余字符是地块。作为合并操作的一部分，我们将提取每个单独的元素并将它们存储在单独的字段中：
- en: '[PRE33]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Create a `ValueTable` object to hold the feature classes that are to be merged.
    `ValueTable` functions as a container object. It will hold the mapping information
    for each of the feature classes in the workspace. All the information is pulled
    from a single field (`STFID`), but we need to create separate `FieldMap` input
    fields for `STFIPS`, `COFIPS`, and `TRACT`:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`ValueTable`对象来保存要合并的特征类。`ValueTable`作为一个容器对象。它将保存工作空间中每个特征类的映射信息。所有信息都从一个字段（`STFID`）中提取，但我们需要为`STFIPS`、`COFIPS`和`TRACT`创建单独的`FieldMap`输入字段：
- en: '[PRE34]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Add the content for the `STFIPS` field. We use the `startTextPosition()` function
    to pull out the first two characters from the `STFID` column. The first position
    is `0`, so we need to use `setStartTextPosition(x,0)`. In this step, we also define
    the output field for the `STFIPS FieldMap` object, name the field, and define
    the output field name:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`STFIPS`字段添加内容。我们使用`startTextPosition()`函数从`STFID`列中提取前两个字符。第一个位置是`0`，因此我们需要使用`setStartTextPosition(x,0)`。在此步骤中，我们还定义了`STFIPS
    FieldMap`对象的输出字段，命名字段并定义输出字段名称：
- en: '[PRE35]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Add content for the `COFIPS` field. The position of these three characters
    is `2`-`4` from the string pulled out of the `STFID` column:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`COFIPS`字段添加内容。这三个字符的位置是从`STFID`列中提取的字符串的`2`-`4`位：
- en: '[PRE36]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Add content for the **TRACT** field:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为**TRACT**字段添加内容：
- en: '[PRE37]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Add the `FieldMap` objects to the `FieldMappings` object:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`FieldMap`对象添加到`FieldMappings`对象中：
- en: '[PRE38]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Run the `Merge` tool, passing in the `vTab`, output feature class, and `fieldmappings`
    object:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`Merge`工具，传入`vTab`、输出特征类和`fieldmappings`对象：
- en: '[PRE39]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The entire script should appear as follows:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 整个脚本应该如下所示：
- en: '[PRE40]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: You can check your work by examining the `C:\ArcpyBook\code\Ch12\UsingFieldMap.py`
    solution file.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过检查`C:\ArcpyBook\code\Ch12\UsingFieldMap.py`解决方案文件来检查您的工作。
- en: Save the script and run it.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存脚本并运行它。
- en: In ArcMap, add the `All_Tracts.shp` file that was created as a result of the
    script. You should see a merged set of counties and if you open the attribute
    table, you'll see the new fields that were created as well as the original fields:![How
    to do it…](img/B04314_12_14.jpg)
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在ArcMap中添加由脚本创建的`All_Tracts.shp`文件。您应该看到一个合并后的县集合，如果您打开属性表，您将看到创建的新字段以及原始字段：![如何操作…](img/B04314_12_14.jpg)
- en: In the data view for the `All_Tracts.shp` file, you should now see a single
    merged polygon layer, as seen in the screenshot below.![How to do it…](img/B04314_12_15.jpg)
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`All_Tracts.shp`文件的数据视图中，您现在应该看到一个单一的合并多边形层，如下面的截图所示。![如何操作…](img/B04314_12_15.jpg)
- en: How it works…
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The `FieldMap` and `FieldMappings` objects in the ArcPy module along with the
    `Merge` tool, can be used for GIS operations that need to merge datasets that
    have fields that do not match. The `FieldMap` object can also be used when you
    need to pull out a contiguous sequence of string values from a longer set of string
    values. In this recipe, you learned how to use the `FieldMap` object to pull state,
    county, and census information from a single field. We created individual `FieldMap`
    objects to hold this information and then added them to a `FieldMappings` object
    that was then passed into the `Merge` tool to create a new layer, which contains
    three distinct fields that hold this information.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: ArcPy模块中的`FieldMap`和`FieldMappings`对象以及`Merge`工具，可用于需要合并具有不匹配字段的数据集的GIS操作。当您需要从较长的字符串值集中提取连续的字符串值序列时，也可以使用`FieldMap`对象。在本食谱中，您学习了如何使用`FieldMap`对象从单个字段中提取州、县和人口普查信息。我们创建了单独的`FieldMap`对象来保存这些信息，然后将它们添加到一个`FieldMappings`对象中，该对象随后被传递到`Merge`工具中，以创建一个新的图层，该图层包含三个不同的字段，用于保存这些信息。
- en: Using a ValueTable to provide multivalue input to a tool
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ValueTable向工具提供多值输入
- en: Many geoprocessing tools have input parameters that accept more than one value.
    For example, the multiring buffer tool accepts multiple buffer distances, the
    delete field tool accepts multiple fields that can be deleted, and there are many
    other examples. In this recipe, you will learn how to create a `ValueTable` object
    that serves as multivalue input to a tool.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 许多地理处理工具接受多个值的输入参数。例如，多环缓冲区工具接受多个缓冲距离，删除字段工具接受可以删除的多个字段，还有许多其他例子。在本食谱中，您将学习如何创建一个`ValueTable`对象，该对象作为工具的多值输入。
- en: Getting ready
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'There are three ways to specify a multivalue parameter: as a Python list, a
    string with each value separated by semicolons, or an ArcPy `ValueTable` object.
    In this recipe, we''re going to take a look at how to specify mutlivalue input
    parameters by using `ValueTable`.'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种方式可以指定多值参数：作为Python列表、每个值由分号分隔的字符串，或ArcPy `ValueTable`对象。在本食谱中，我们将查看如何使用`ValueTable`指定多值输入参数。
- en: How to do it…
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps to learn how to use a `ValueTable` to submit multiple values
    to a tool:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 按以下步骤学习如何使用`ValueTable`向工具提交多个值：
- en: Open **IDLE** (or your favorite Python development environment) and create a
    new script called `ValueTable.py`.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**IDLE**（或您喜欢的Python开发环境）并创建一个名为`ValueTable.py`的新脚本。
- en: 'Import `arcpy` and set the workspace:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`arcpy`并设置工作空间：
- en: '[PRE41]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Create a new `ValueTable` object:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的`ValueTable`对象：
- en: '[PRE42]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Create three rows for the table and assign them distances of `5`, `10`, and
    `20`:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为表格创建三行并分配距离`5`、`10`和`20`：
- en: '[PRE43]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Define variables for the input feature class, output feature class, distance,
    and buffer units. The distance variable (`dist`) is created as a reference to
    the `ValueTable`, which you have already created:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义输入要素类、输出要素类、距离和缓冲单元的变量。距离变量（`dist`）被创建为对已创建的`ValueTable`的引用：
- en: '[PRE44]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Call the `MultipleRingBuffer` tool and pass the variables as parameters:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用`MultipleRingBuffer`工具并传递变量作为参数：
- en: '[PRE45]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: You can check your work by examining the `C:\ArcpyBook\code\Ch12\ValueTable.py`
    solution file.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过检查`C:\ArcpyBook\code\Ch12\ValueTable.py`解决方案文件来检查您的工作。
- en: Save and run the script. Examine the output to see the multiple buffer rings.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并运行脚本。检查输出以查看多个缓冲环。
- en: How it works…
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: '`ValueTable` is a simple virtual table that you can use as input to tools that
    accept multiple values. In this recipe, we created a `ValueTable` object, added
    three values, and then passed this object into the `MultipleRingBuffer` tool.
    The `MultipleRingBuffer` tool used this information to create new polygon layers
    based on the buffer distances provided in the `ValueTable` object.'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '`ValueTable`是一个简单的虚拟表，您可以用作接受多个值的工具的输入。在本食谱中，我们创建了一个`ValueTable`对象，添加了三个值，然后将此对象传递到`MultipleRingBuffer`工具中。`MultipleRingBuffer`工具使用这些信息根据`ValueTable`对象中提供的缓冲距离创建新的多边形图层。'
