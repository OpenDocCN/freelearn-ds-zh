- en: Chapter 12. Using Python for Advanced ArcGIS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with the ArcGIS REST API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making HTTP requests and parsing the response with Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting layer information with the ArcGIS REST API and Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exporting a map with the ArcGIS REST API and Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Querying a map service with the ArcGIS REST API and Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Geocoding with the Esri World Geocoding Service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using FieldMap and FieldMappings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a ValueTable to provide multivalue input to a tool
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will cover some topics that are of a more advanced nature.
    Specifically, you will learn how to access the ArcGIS REST API using the Python
    `requests` module. In doing so, you will learn how to access data and services
    published by ArcGIS Server and ArcGIS Online. The Python `requests` module includes
    capabilities that allow your script to submit requests to a URL endpoint and receive
    responses in various formats, including the popular JSON format. Toward the end
    of the chapter, we will also over a couple of miscellaneous ArcPy topics, including
    the use of the `FieldMap` and `FieldMappings` objects to merge datasets and also
    working with `ValueTables` for situations where a tool has the capability of accepting
    multiple inputs.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with the ArcGIS REST API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we dive too far into the coding, you need to understand some basic concepts
    of the ArcGIS REST API. You need to specifically know how to construct a URL and
    interpret the response that is returned.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All the resources and operations of the ArcGIS REST API are exposed through
    a hierarchy of endpoints, which we'll examine as we move through the course of
    this book. For now, let's examine the specific steps that you need to understand
    to submit a request to the API through Python. In this recipe, you will learn
    how to use the ArcGIS Server Services directory to construct URL requests.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''re going to use a publicly available ArcGIS Server instance to learn how
    to use the tools provided by the `Services` directory to construct a URL request:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a web browser (preferably Google Chrome or Firefox).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to [http://sampleserver1.arcgisonline.com/arcgis/rest/services](http://sampleserver1.arcgisonline.com/arcgis/rest/services):![How
    to do it…](img/B04314_12_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we need to determine the well-known endpoint. This represents a server
    catalog that is a set of operations that ArcGIS Server can perform along with
    specific services. Navigate to **Demographics** | **ESRI_Census_USA**. This is
    a well-known endpoint. If you look at the address bar in your browser you should
    see this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Demographics/ESRI_Census_USA/MapServer](http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Demographics/ESRI_Census_USA/MapServer).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Notice that this follows the pattern seen here:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`http://<host>/<site>/rest/services/<folder>/<serviceName>/<serviceType>`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Spend some time clicking on the various links. As you do this, notice how the
    URL changes in the address bar. This URL is very important because it provides
    you with the content that will be submitted through a Python request:![How to
    do it…](img/B04314_12_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, you'll learn how to further construct URLs that can be submitted as requests
    to the ArcGIS REST API. This is a very important step. The syntax for the request
    includes the path to the resource along with an operation name followed by a list
    of parameters. The operation name indicates the kind of operation that will be
    performed against the resource. For example, you might want to export a map to
    an image file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The question mark begins the list of parameters. Each parameter is then provided
    as a set of key/value pairs separated by an ampersand. All of this information
    is combined into a single URL string. This is illustrated in the following URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://<resource-url>/<operation>?<parameter1=value1>&<parameter2=value2>`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For now, we''re going to just enter the URL into the address bar of the browser.
    Copy and paste `http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Demographics/ESRI_Census_USA/MapServer/3/query?text=&geometry=&geometryType=esriGeometryPoint&inSR=&spatialRel=esriSpatialRelIntersects&relationParam=&objectIds=&where=name+%3D+%27Bexar%27&time=&returnCountOnly=false&returnIdsOnly=false&returnGeometry=true&maxAllowableOffset=&outSR=&outFields=&f=json`
    into the address bar in your browser. You may want to use the digital version
    of this book to copy and paste this URL, rather than trying to type this into
    the address bar. Hit return to see this output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/B04314_12_03.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: You can use the Python `requests` module to simplify this process and access
    the response information directly from within your geoprocessing script. The `requests`
    module allows you to define the list of parameters as a Python dictionary and
    then it handles the creation of the URL query string, including URL encoding.
    You'll learn how to do that at the end of this exercise.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The Services Directory contains dialog boxes that you can use to generate parameter
    values. You can find links to these dialog boxes at the bottom of the services
    page. In your browser, navigate to [http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Demographics/ESRI_Census_USA/MapServer/1](http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Demographics/ESRI_Census_USA/MapServer/1).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the bottom of the page and click on the **Query** link to display the
    dialog box, as seen in this screenshot:![How to do it…](img/B04314_12_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a `where` clause, as seen in the following screenshot. Set the **Return
    Fields (Comma Seperated)** to `POP2000, POP2007`, and `BLKGRP`. Change **Format:**
    to `JSON` and **Return Geometry:** to `False`. Then, click on **Query (GET)**:![How
    to do it…](img/B04314_12_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The query will run and these results will be returned:![How to do it…](img/B04314_12_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Examine the address bar in your browser to see the URL that was generated:
    `http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Demographics/ESRI_Census_USA/MapServer/1/query?text=&geometry=&geometryType=esriGeometryPolygon&inSR=&spatialRel=esriSpatialRelIntersects&relationParam=&objectIds=&where=STATE_FIPS+%3D+%2748%27+and+CNTY_FIPS+%3D+%27021%27&time=&returnCountOnly=false&returnIdsOnly=false&returnGeometry=false&maxAllowableOffset=&outSR=&outFields=POP2000%2CPOP2007%2CBLKGRP&f=pjson`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In an upcoming recipe, you'll take this same URL, submit the request, and process
    the results using Python.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Services Directory of an ArcGIS Server instance provides a variety of tools
    that you can use to generate URL requests and examine the responses those requests
    produce. In this recipe, you learned how to use the query task to construct an
    attribute query. In doing so, you learned how a URL request is constructed.
  prefs: []
  type: TYPE_NORMAL
- en: Making HTTP requests and parsing the response with Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of Python modules that you can use to make REST requests.
    There are really too many! Modules include `urllib2`, `httplib2`, `pycurl`, and
    `requests`. `requests` is definitely the best of the bunch in my opinion. It is
    cleaner and easier to use for repeated interaction with RESTful APIs. Once you've
    made the request, you can then parse the JSON response with the Python `json`
    module. In this recipe, you will learn how to do this.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Python `requests` module can be used to submit `requests` to an ArcGIS
    Server resource and process the returned response. Follow these steps to learn
    the basic steps involved in submitting `requests` and processing the response
    using the `requests` module:'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we get started, make sure that you have downloaded and installed the
    `requests` module, using `pip`. If you haven''t already done so, I have provided
    the following instructions to install both `pip` and the `requests` module:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This recipe and all subsequent recipes in this chapter use the Python `requests`
    module. If you don''t already have this module installed on your computer, you
    will need to do so at this time. The `requests` module is installed using `pip`,
    which needs to be installed on your computer before the `requests` module is installed.
    Later versions of Python including 2.7.9 (on the Python2 series) and Python 3.4
    include `pip` by default, so you may have it already. To test to see if you already
    have `pip` installed, you can enter the following from a DOS prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: If you don't have `pip` installed, you'll get an error message and you'll need
    to `install pip` ([https://pip.pypa.io/en/latest/installing.html](https://pip.pypa.io/en/latest/installing.html)).
    Once installed, you can download and install the `requests` module by using the
    preceding install command.
  prefs: []
  type: TYPE_NORMAL
- en: Open **IDLE** (or another Python development environment) and select **File**
    | **New Window**. Save the file under the name `C:\ArcpyBook\Ch12\ReqJSON.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `requests` and `json` modules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new variable that contains a URL to a list of services provided by
    ArcGIS Online. This URL contains an output format of `pjson`, a JSON format contained
    in a pretty format to provide easy readability:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the `get()` method in the `requests` module to submit an HTTP request to
    the ArcGIS REST API. You''ll store the response in a variable called `r`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let''s print out the response that is returned:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save your script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run your script and you will see the following output. This is the JSON response
    that has been returned by the ArcGIS REST API:![How to do it…](img/B04314_12_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use the `json.loads()` method to parse the returned `json` into a Python dictionary
    object. Go ahead and remove the previous print statement as well:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can check your work by examining the `C:\ArcpyBook\code\Ch12\ReqJSON.py`
    solution file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Save and run your script to see the output. The `loads()` method has converted
    the `json` output into a Python dictionary:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this simple recipe, you learned how to use the Python `requests` module to
    submit a request to an ArcGIS Server instance by using the `requests.get()` method,
    and then process the response from the server. The `json.loads()` method was used
    to convert the response to a Python dictionary object for easier processing. The
    response contains basic data about the ArcGIS Server instance, including folders,
    services, and versions. We'll look at more complex examples in the coming recipes.
  prefs: []
  type: TYPE_NORMAL
- en: Getting layer information with the ArcGIS REST API and Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A map service resource contains datasets that can include tables or layers.
    It contains basic information about a service, including feature layers, tables,
    and service descriptions. In this recipe, you will learn how to return layer information
    from a map service, using Python and the ArcGIS REST API.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get information about a specific layer in a map service, you will need to
    reference the index number that is associated with the layer. When you examine
    the Services Directory page for a service, you will find a list of layers that
    are part of the map service along with index numbers for each layer. The index
    numbers are used instead of the layer name when requesting information about a
    layer. As we've done in the past few recipes, we'll use the Python `requests`
    module to make the request and process the response.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to get information about a layer from a map
    service:'
  prefs: []
  type: TYPE_NORMAL
- en: In IDLE or another Python development environment, create a new Python script
    called `GetLayerInformation.py` and save it to the `C:\ArcpyBook\Ch12` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `requests` and `json` modules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the following `agisurl` variable. This will serve as the base URL that
    references a specific layer in the `ESRI_CENSUS_USA` map service. Here, we are
    referring to a layer with an index number of `1`. Also, include an output format
    of `pjson`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `payload` variable. This variable will hold a Python dictionary object
    containing the parameters that will be passed as part of the request. We''ll include
    a `where` clause and set a few other properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Call the `requests.get()` method and pass the `agisurl` variable. The response
    will be stored in a variable called `r`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Convert the JSON to a Python dictionary:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print out the name, geographic extent, and fields of the layer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can check your work by examining the `C:\ArcpyBook\code\Ch12\GetLayerInformation.py`
    solution file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the script and run it to see this output:![How to do it…](img/B04314_12_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we passed a reference to a URL that contains the path to a specific
    layer within a map service. The layer was specified through the use of an index
    number (`1`, in this case). This URL was passed to the Python `requests.get()`
    method. The response was returned in `json` format and we then converted this
    to a Python dictionary. The dictionary included key/value pairs for the name,
    extent, and fields of the layer. That information was printed to the console.
  prefs: []
  type: TYPE_NORMAL
- en: Exporting a map with the ArcGIS REST API and Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The ArcGIS REST API has a large set of operations that you can use when requesting
    information from an ArcGIS Server instance. For example, you can export maps,
    query layers, geocode addresses, and much more. In this recipe, you will learn
    how to export a map image from a map service.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `export` operation can be used to create a map image from a map service.
    The response to this request includes the URL of the image, width, height, extent,
    and scale. In this recipe, you'll use the export operation to export a map as
    an image file.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In your Python development environment, create a new script, save it as `C:\ArcpyBook\Ch12\ExportMapToImage.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `requests` and `json` modules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new variable called `agisurl`, assign the URL, and export the operation,
    as seen here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new dictionary object that will hold the key/value pairs that help
    define the query string. These are the parameters that will be passed to the export
    operation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Call the `requests.get()` method, passing the URL and the Python dictionary
    of parameters. The response will be stored in a variable called `r`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print out the contents of the `response` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can check your work by examining the `C:\ArcpyBook\code\Ch12\ExportMapToImage.py`
    solution file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save and run the script to see an output similar to this:![How to do it…](img/B04314_12_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy and paste the URL for the `.gif` file that was generated into your browser
    address bar, and click on return on your keyboard to see the file:![How to do
    it…](img/B04314_12_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The export operation in the ArcGIS REST API can be used to export an image file
    from a map service. If you examine [http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StateCityHighway_USA/MapServer/export](http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StateCityHighway_USA/MapServer/export),
    which we used to generate the map image in this recipe, you'll see the term `export`
    at the end of the URL. This is what triggers the execution of the `export` operation.
    In addition to this, we also appended a bounding box (map extent), size, spatial
    reference for the image, and format through the payload variable. The request
    is sent to the server through the `requests.get()` method which accepts both the
    URL and payload variable.
  prefs: []
  type: TYPE_NORMAL
- en: Querying a map service with the ArcGIS REST API and Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `query` operation in the ArcGIS REST API performs a query against a map
    service and returns a feature set. The feature set includes values for fields
    requested by the user and can also return geometry, if requested.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, you will build on the first recipe, in which you generated a
    URL using the ArcGIS Services page dialog box to generate results. In this recipe,
    you will use the ArcGIS Server Services page dialog box to generate a URL request
    that queried a map service layer and returned results. You may recall that the
    URL was `http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Demographics/ESRI_Census_USA/MapServer/1/query?text=&geometry=&geometryType=esriGeometryPolygon&inSR=&spatialRel=esriSpatialRelIntersects&relationParam=&objectIds=&where=STATE_FIPS+%3D+%2748%27+and+CNTY_FIPS+%3D+%27021%27&time=&returnCountOnly=false&returnIdsOnly=false&returnGeometry=false&maxAllowableOffset=&outSR=&outFields=POP2000%2CPOP2007%2CBLKGRP&f=pjson`.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's learn how to submit this request using Python.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In IDLE or another Python development environment, create a new Python script
    called `QueryMapService.py` and save it to the `C:\ArcpyBook\Ch12` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In your browser, navigate to: [http://resources.arcgis.com/en/help/arcgis-rest-api/index.html#//02r3000000p1000000](http://resources.arcgis.com/en/help/arcgis-rest-api/index.html#//02r3000000p1000000).
    This is the REST API page for the `query` operation against a layer in a map service.
    As you scroll down the `help` page, you should see the same parameters as were
    generated using the dialog box, such as `geometry`, `geometryType`, `inSR`, `spatialRel`,
    `where`, and others.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In your script, import the `requests` and `json` modules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the following `agisurl` variable. This will serve as the base URL that
    references the `query` operation on the `census block group` layer (identified
    by an identifier of `1` in the URL) in the `ESRI_Census_USA` map service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, create a Python dictionary object, as shown in the following code. We''re
    going to leave out some of the parameters that were not defined or used in the
    dialog box. We''re just creating an attribute query in this instance so that all
    the geometry parameters can be removed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `requests.get()` method can accept a Python dictionary object as the second
    parameter. This dictionary defines the set of key/value pairs that help define
    the query string. Add the `requests.get()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Include a `print` statement in order to print the response that is returned.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the script and run it to see this output:![How to do it…](img/B04314_12_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, convert this JSON object to a Python dictionary. Also, comment out the
    `print` statement that you added in the last step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The Python dictionary object returned by the `json.loads()` method will contain
    the contents of the JSON object. You can then pull the individual data elements
    out of the dictionary. In this case, we want to pull out the attributes of each
    of the feature returned `(BLKGRP`, `POP2007`, and `POP2000`). We can do so by
    using the following code, which you''ll need to add to your script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can check your work by examining the `C:\ArcpyBook\code\Ch12\QueryMapService.py`
    solution file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save and execute your script to see these results:![How to do it…](img/B04314_12_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `query` operation in the ArcGIS REST API can be used to perform spatial
    and attribute queries against a layer in an ArcGIS Server map service. We used
    the `requests.get()` method to perform an attribute query against the `census
    block groups` layer. We included various parameters, including a where clause
    that will only return records where the `ST_FIPS` code is `48` and the `CNTY_FIPS`
    code is `021` (Bexar County, Texas). The `response` object was then converted
    to a Python dictionary and we included a `for` loop to iterate through each of
    the returned records and print out the block group name, and the population for
    the years 2000 and 2007.
  prefs: []
  type: TYPE_NORMAL
- en: Geocoding with the Esri World Geocoding Service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Esri World Geocoding Service can be used to find addresses and places in
    supported countries. This service contains both free and paid operations. The
    `find` operation, which finds one address per request, is always a free service.
    The `geocodeAddresses` operation accepts a list of addresses for geocoding and
    is a paid service only. The other operations can be free or paid. If you are using
    the operations in a temporary capacity, they are free. Temporary simply means
    that you aren't storing the results for later use. If this is the case, then it
    is a paid service. In this recipe, you will use the Esri World Geocoding service
    to geocode an address.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The ArcGIS REST API `find` operation can be used to find the geographic coordinates
    of a single address. As we've done in the past few recipes, we'll use the Python
    `requests` module to make the request and process the response.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In IDLE or another Python development environment, create a new Python script
    called `GeocodeAddress.py` and save it to the `C:\ArcpyBook\Ch12` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `requests` and `json` modules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the following `agisurl` variable. This will point to the Esri World
    Geocoding Service and the `find` operation for a particular service. Also, define
    a Python dictionary that will hold the address to be submitted and the output
    format. You can change the address, if you wish:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Call the `requests.get()` method and pass the URL and parameters. The response
    will be stored in a variable called `r`. Then, convert the returned JSON object
    to a Python dictionary:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print out some of the results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can check your work by examining the `C:\ArcpyBook\code\Ch12\GeocodeAddress.py`
    solution file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Save the script and run it to see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `find` operation in the ArcGIS REST API can be used to perform geocoding
    operations for a single address. As we've done in the past few recipes, we used
    the Python `requests.get()` method to submit an operation request (find, in this
    case) along parameters that include the address to be geocoded. The response that
    was returned included the latitude and longitude of the address, geocoded score,
    and the address type.
  prefs: []
  type: TYPE_NORMAL
- en: Using FieldMap and FieldMappings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Up until this point in the chapter, we've covered how to use Python with the
    ArcGIS REST API to access ArcGIS Server services. Now, we're going to switch gears
    and go back into the ArcPy module and discuss the `FieldMap` and `FieldMappings`
    classes.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A common GIS operation is to merge several disparate datasets into a single
    dataset of a larger area. Often, the fields in the datasets to be merged will
    be the same and there won't be any problems. However, there will be times when
    the fields of the various datasets do not match. In this case, you will need to
    map the relationship between fields in one dataset to fields in another dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/B04314_12_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding diagram displays the relationship between the various ArcPy classes
    that are used to define field mapping. A `FieldMap` object contains a field definition
    and a list of input fields from one or more tables, or feature classes that provide
    the values for the field. Each `FieldMap` object that you create is then added
    to a `FieldMappings` object, which serves as a container for these objects. Finally,
    the `FieldMappings` object can then be sent as input to various geoprocessing
    tools, such as the `Merge` tool.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, you''ll learn how to use the FieldMap and FieldMappings objects:'
  prefs: []
  type: TYPE_NORMAL
- en: In IDLE or another Python development environment, create a new Python script
    called `UsingFieldMap.py` and save it to your `C:\ArcpyBook\Ch12` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import `arcpy`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the workspace environment variable and a variable that will point to the
    output feature class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `FieldMappings` object and three `FieldMap` objects. The `FieldMap`
    objects will hold references to fields for a state **Federal Information Processing
    Standard** (**FIPS**) code, county FIPS code, and a tract:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get a list of all the County polygon feature classes in the current workspace.
    Each County feature class has a field called `STFID`, which contains the state
    FIPS code, county FIPS code, and a tract for each feature. This information is
    stored as one long string (`48491020301`, for example), where the first two characters
    are the state code, the third through fifth characters are the county code, and
    the remaining characters are the tract. As part of the merge operation, we''re
    going to pull each of the individual elements out and store them in separate fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `ValueTable` object to hold the feature classes that are to be merged.
    `ValueTable` functions as a container object. It will hold the mapping information
    for each of the feature classes in the workspace. All the information is pulled
    from a single field (`STFID`), but we need to create separate `FieldMap` input
    fields for `STFIPS`, `COFIPS`, and `TRACT`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the content for the `STFIPS` field. We use the `startTextPosition()` function
    to pull out the first two characters from the `STFID` column. The first position
    is `0`, so we need to use `setStartTextPosition(x,0)`. In this step, we also define
    the output field for the `STFIPS FieldMap` object, name the field, and define
    the output field name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add content for the `COFIPS` field. The position of these three characters
    is `2`-`4` from the string pulled out of the `STFID` column:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add content for the **TRACT** field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `FieldMap` objects to the `FieldMappings` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the `Merge` tool, passing in the `vTab`, output feature class, and `fieldmappings`
    object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The entire script should appear as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can check your work by examining the `C:\ArcpyBook\code\Ch12\UsingFieldMap.py`
    solution file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the script and run it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In ArcMap, add the `All_Tracts.shp` file that was created as a result of the
    script. You should see a merged set of counties and if you open the attribute
    table, you'll see the new fields that were created as well as the original fields:![How
    to do it…](img/B04314_12_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the data view for the `All_Tracts.shp` file, you should now see a single
    merged polygon layer, as seen in the screenshot below.![How to do it…](img/B04314_12_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `FieldMap` and `FieldMappings` objects in the ArcPy module along with the
    `Merge` tool, can be used for GIS operations that need to merge datasets that
    have fields that do not match. The `FieldMap` object can also be used when you
    need to pull out a contiguous sequence of string values from a longer set of string
    values. In this recipe, you learned how to use the `FieldMap` object to pull state,
    county, and census information from a single field. We created individual `FieldMap`
    objects to hold this information and then added them to a `FieldMappings` object
    that was then passed into the `Merge` tool to create a new layer, which contains
    three distinct fields that hold this information.
  prefs: []
  type: TYPE_NORMAL
- en: Using a ValueTable to provide multivalue input to a tool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many geoprocessing tools have input parameters that accept more than one value.
    For example, the multiring buffer tool accepts multiple buffer distances, the
    delete field tool accepts multiple fields that can be deleted, and there are many
    other examples. In this recipe, you will learn how to create a `ValueTable` object
    that serves as multivalue input to a tool.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are three ways to specify a multivalue parameter: as a Python list, a
    string with each value separated by semicolons, or an ArcPy `ValueTable` object.
    In this recipe, we''re going to take a look at how to specify mutlivalue input
    parameters by using `ValueTable`.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to use a `ValueTable` to submit multiple values
    to a tool:'
  prefs: []
  type: TYPE_NORMAL
- en: Open **IDLE** (or your favorite Python development environment) and create a
    new script called `ValueTable.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import `arcpy` and set the workspace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new `ValueTable` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create three rows for the table and assign them distances of `5`, `10`, and
    `20`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define variables for the input feature class, output feature class, distance,
    and buffer units. The distance variable (`dist`) is created as a reference to
    the `ValueTable`, which you have already created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Call the `MultipleRingBuffer` tool and pass the variables as parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can check your work by examining the `C:\ArcpyBook\code\Ch12\ValueTable.py`
    solution file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save and run the script. Examine the output to see the multiple buffer rings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`ValueTable` is a simple virtual table that you can use as input to tools that
    accept multiple values. In this recipe, we created a `ValueTable` object, added
    three values, and then passed this object into the `MultipleRingBuffer` tool.
    The `MultipleRingBuffer` tool used this information to create new polygon layers
    based on the buffer distances provided in the `ValueTable` object.'
  prefs: []
  type: TYPE_NORMAL
