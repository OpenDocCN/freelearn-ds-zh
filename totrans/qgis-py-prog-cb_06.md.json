["```py\n    from PyQt4.QtGui import *\n    from PyQt4.QtCore import *\n\n    ```", "```py\n    lyr = QgsVectorLayer(\"/qgis_data/hancock/hancock.shp\", \"Hancock\", \"ogr\")\n    reg = QgsMapLayerRegistry.instance()\n    reg.addMapLayer(lyr)\n\n    ```", "```py\n    i = QImage(QSize(600,600), QImage.Format_ARGB32_Premultiplied)\n    c = QColor(\"white\")\n    i.fill(c.rgb())\n    p = QPainter()\n    p.begin(i)\n\n    ```", "```py\n    r = QgsMapRenderer()\n\n    ```", "```py\n    lyrs = reg.mapLayers().keys()\n\n    ```", "```py\n    r.setLayerSet(lyrs)\n\n    ```", "```py\n    rect = QgsRectangle(r.fullExtent())\n\n    ```", "```py\n    rect.scale(1.1)\n\n    ```", "```py\n    r.setExtent(rect)\n\n    ```", "```py\n    r.setOutputSize(i.size(), i.logicalDpiX())\n\n    ```", "```py\n    r.render(p)\n    p.end()\n\n    ```", "```py\n    i.save(\"/qgis_data/map.jpg\",\"jpg\")\n\n    ```", "```py\ni.save(\"/qgis_data/map.png\",\"png\")\n\n```", "```py\n    from PyQt4.QtGui import *\n    from PyQt4.QtCore import *\n\n    ```", "```py\n    lyr = QgsVectorLayer(\"/qgis_data/hancock/hancock.shp\", \"Hancock\", \"ogr\")\n    reg = QgsMapLayerRegistry.instance()\n    reg.addMapLayer(lyr)\n\n    ```", "```py\n    i = QImage(QSize(600,600), QImage.Format_ARGB32_Premultiplied)\n    c = QColor(\"white\")\n    i.fill(c.rgb())\n    p = QPainter()\n    p.begin(i)\n\n    ```", "```py\n    lyrs = reg.mapLayers().keys()\n\n    ```", "```py\n    mr = iface.mapCanvas().mapRenderer()\n\n    ```", "```py\n    mr.setLayerSet(lyrs)\n\n    ```", "```py\n    rect = QgsRectangle(lyr.extent())\n\n    ```", "```py\n    rect.scale(1.2)\n\n    ```", "```py\n    mr.setExtent(rect)\n\n    ```", "```py\n    c = QgsComposition(mr)\n\n    ```", "```py\n    c.setPlotStyle(QgsComposition.Print)\n\n    ```", "```py\n    c.setPaperSize(215.9, 279.4)\n\n    ```", "```py\n    w, h = c.paperWidth() * .50, c.paperHeight() * .50\n    x = (c.paperWidth() - w) / 2\n    y = ((c.paperHeight() - h)) / 2 \n\n    ```", "```py\n    composerMap = QgsComposerMap(c,x,y,w,h)\n    composerMap.setNewExtent(rect)\n\n    ```", "```py\n    composerMap.setFrameEnabled(True)\n    c.addItem(composerMap)\n\n    ```", "```py\n    dpi = c.printResolution()\n    c.setPrintResolution(dpi)\n\n    ```", "```py\n     mm_in_inch = 25.4\n    dpmm = dpi / mm_in_inch\n    width = int(dpmm * c.paperWidth())\n    height = int(dpmm * c.paperHeight())\n\n    ```", "```py\n    image = QImage(QSize(width, height), QImage.Format_ARGB32)\n    image.setDotsPerMeterX(dpmm * 1000)\n    image.setDotsPerMeterY(dpmm * 1000)\n    image.fill(0)\n\n    ```", "```py\n    imagePainter = QPainter(image)\n    sourceArea = QRectF(0, 0, c.paperWidth(), c.paperHeight())\n    targetArea = QRectF(0, 0, width, height)\n    c.render(imagePainter, targetArea, sourceArea)\n    imagePainter.end()\n\n    ```", "```py\n    image.save(\"/Users/joellawhead/qgis_data/map.jpg\", \"jpg\")\n\n    ```", "```py\n    from PyQt4.QtGui import *\n    from PyQt4.QtCore import *\n    import MapComposer\n\n    ```", "```py\n    lyr = QgsVectorLayer(\"/Users/joellawhead/qgis_data/hancock/hancock.shp\", \"Hancock\", \"ogr\")\n\n    ```", "```py\n    reg = QgsMapLayerRegistry.instance()\n    reg.addMapLayer(lyr)\n\n    ```", "```py\n    mr = iface.mapCanvas().mapRenderer()\n\n    ```", "```py\n    qc = MapComposer.MapComposer(qmlr=reg, qmr=mr)\n\n    ```", "```py\n    qc.label = QgsComposerLabel(qc.c)\n\n    ```", "```py\n    qc.label.setText(\"Hancock County\")\n\n    ```", "```py\n    qc.label.adjustSizeToText()\n\n    ```", "```py\n    qc.label.setFrameEnabled(True)\n\n    ```", "```py\n    qc.label.setItemPosition(qc.x,qc.y-10)\n\n    ```", "```py\n    qc.c.addItem(qc.label)\n\n    ```", "```py\n    qc.output(\"/Users/joellawhead/qgis_data/map.jpg\", \"jpg\")\n\n    ```", "```py\n    from PyQt4.QtCore import *\n    from PyQt4.QtGui import *\n    from qgis.core import *\n    from qgis.gui import *\n    import MapComposer\n\n    ```", "```py\n    lyr = QgsVectorLayer(\"/Users/joellawhead/qgis_data/ms/mmississippi.shp\", \"Mississippi\", \"ogr\")\n    reg = QgsMapLayerRegistry.instance()\n    reg.addMapLayer(lyr)\n    mr = iface.mapCanvas().mapRenderer()\n\n    ```", "```py\n    qc = MapComposer.MapComposer(qmlr=reg, qmr=mr)\n\n    ```", "```py\n    qc.scalebar = QgsComposerScaleBar(qc.c)\n\n    ```", "```py\n    qc.scalebar.setStyle('Single Box')\n\n    ```", "```py\n    qc.scalebar.setComposerMap(qc.composerMap)\n    qc.scalebar.applyDefaultSize()\n\n    ```", "```py\n    sbw = qc.scalebar.rect().width()\n    sbh = qc.scalebar.rect().height()\n    mcw = qc.composerMap.rect().width()\n    mch = qc.composerMap.rect().height()\n    sbx = qc.x + (mcw - sbw)\n    sby = qc.y + mch\n\n    ```", "```py\n    qc.scalebar.setItemPosition(sbx, sby)\n    qc.c.addItem(qc.scalebar)\n\n    ```", "```py\n    qc.output(\"/Users/joellawhead/qgis_data/map.jpg\", \"jpg\")\n\n    ```", "```py\n    from PyQt4.QtCore import *\n    from PyQt4.QtGui import *\n    from qgis.core import *\n    from qgis.gui import *\n    import MapComposer\n\n    ```", "```py\n    lyr = QgsVectorLayer(\"/qgis_data/ms/mississippi.shp\", \"Mississippi\", \"ogr\")\n    reg = QgsMapLayerRegistry.instance()\n    reg.addMapLayer(lyr)\n    mr = iface.mapCanvas().mapRenderer() \n    qc = MapComposer.MapComposer(qmlr=reg, qmr=mr)\n\n    ```", "```py\n    mcw = qc.composerMap.rect().width()\n    mch = qc.composerMap.rect().height()\n    ax =  qc.x + mcw + 10\n    ay =  (qc.y + mch) - 10\n    afy = ay - 20\n    qc.arrow = QgsComposerArrow(QPointF(ax, ay), QPointF(ax,afy), qc.c)\n    qc.c.addItem(qc.arrow)\n\n    ```", "```py\n    f = QFont()\n    f.setBold(True)\n    f.setFamily(\"Times New Roman\")\n    f.setPointSize(30)\n    qc.labelNorth = QgsComposerLabel(qc.c)\n    qc.labelNorth.setText(\"N\")\n    qc.labelNorth.setFont(f)\n    qc.labelNorth.adjustSizeToText()\n    qc.labelNorth.setFrameEnabled(False)\n    qc.labelNorth.setItemPosition(ax - 5, ay) \n    qc.c.addItem(qc.labelNorth)\n\n    ```", "```py\n    qc.output(\"/qgis_data/map.jpg\", \"jpg\") \n\n    ```", "```py\n    from PyQt4.QtCore import *\n    from PyQt4.QtGui import *\n    from qgis.core import *\n    from qgis.gui import *\n    import MapComposer\n\n    ```", "```py\n    lyr = QgsVectorLayer(\"/qgis_data/ms/mississippi.shp\", \"Mississippi\", \"ogr\")\n    reg = QgsMapLayerRegistry.instance()\n    reg.addMapLayer(lyr)\n    mr = iface.mapCanvas().mapRenderer()\n    qc = MapComposer.MapComposer(qmlr=reg, qmr=mr)\n\n    ```", "```py\n    qc.logo = QgsComposerPicture(qc.c)\n\n    ```", "```py\n    qc.logo.setPictureFile(\"/qgis_data/rasters/logo.png\")\n\n    ```", "```py\n    qc.logo.setSceneRect(QRectF(0,0,50,70))\n\n    ```", "```py\n    lx = qc.x + 50\n    ly = qc.y â€“ 120\n\n    ```", "```py\n     mcw = qc.composerMap.rect().width()\n     mch = qc.composerMap.rect().height()\n     lx =  qc.x\n    ly =  qc.y - 20\n\n    ```", "```py\n    qc.output(\"/qgis_data/map.jpg\", \"jpg\")\n\n    ```", "```py\n    from PyQt4.QtCore import *\n    from PyQt4.QtGui import *\n    from qgis.core import *\n    from qgis.gui import *\n    import MapComposer\n\n    ```", "```py\n    lyr = QgsVectorLayer(\"/qgis_data/ms/mississippi.shp\", \"Mississippi\", \"ogr\")\n    reg = QgsMapLayerRegistry.instance()\n    reg.addMapLayer(lyr)\n    mr = iface.mapCanvas().mapRenderer()\n    qc = MapComposer.MapComposer(qmlr=reg, qmr=mr)\n\n    ```", "```py\n    qc.legend = QgsComposerLegend(qc.c)\n\n    ```", "```py\n    qc.legend.model().setLayerSet(qc.qmr.layerSet())\n\n    ```", "```py\n    qc.legend.setItemPosition(5, qc.y)\n    qc.c.addItem(qc.legend)\n\n    ```", "```py\n    qc.output(\"/qgis_data/map.jpg\", \"jpg\")\n\n    ```", "```py\n    from PyQt4.QtCore import *\n    from PyQt4.QtGui import *\n    from qgis.core import *\n    from qgis.gui import *\n    import MapComposer\n\n    ```", "```py\n    lyr = QgsVectorLayer(\"/qgis_data/ms/mississippi.shp\", \"Mississippi\", \"ogr\")\n    reg = QgsMapLayerRegistry.instance()\n    reg.addMapLayer(lyr)\n    mr = iface.mapCanvas().mapRenderer()\n    qc = MapComposer.MapComposer(qmlr=reg, qmr=mr)\n\n    ```", "```py\n    red = {'color':'255,0,0,255','color_border':'0,0,0,255'}\n    redsym = QgsFillSymbolV2.createSimple(red)\n    blue = {'color':'0,0,255,255','color_border':'0,0,0,255'}\n    bluesym = QgsFillSymbolV2.createSimple(blue)\n    yellow = {'color':'255,255,0,255','color_border':'0,0,0,255'}\n    yellowsym = QgsFillSymbolV2.createSimple(yellow)\n\n    ```", "```py\n    mch = qc.composerMap.rect().height()\n    sy = qc.y + mch\n\n    ```", "```py\n    qc.shape1 = QgsComposerShape(10,sy-25,10,25,qc.c)\n    qc.shape1.setShapeType(1)\n\n    ```", "```py\n    qc.shape1.setUseSymbolV2(True)\n    qc.shape1.setShapeStyleSymbol(redsym)\n    qc.c.addItem(qc.shape1)\n\n    ```", "```py\n    qc.shape2 = QgsComposerShape(22,sy-18,10,18,qc.c)\n    qc.shape2.setShapeType(1)\n    qc.shape2.setUseSymbolV2(True)\n    qc.shape2.setShapeStyleSymbol(bluesym)\n    qc.c.addItem(qc.shape2)\n    qc.shape3 = QgsComposerShape(34,sy-12,10,12,qc.c)\n    qc.shape3.setShapeType(1)\n    qc.shape3.setUseSymbolV2(True)\n    qc.shape3.setShapeStyleSymbol(yellowsym)\n    qc.c.addItem(qc.shape3)\n\n    ```", "```py\n    qc.output(\"/qgis_data/map.jpg\", \"jpg\")\n\n    ```", "```py\n    from PyQt4.QtCore import *\n    from PyQt4.QtGui import *\n    from qgis.core import *\n    from qgis.gui import *\n    import MapComposer\n\n    ```", "```py\n    lyr = QgsVectorLayer(\"/qgis_data/ms/mmississippi.shp\", \"Mississippi\", \"ogr\")\n    reg = QgsMapLayerRegistry.instance()\n    reg.addMapLayer(lyr)\n    mr = iface.mapCanvas().mapRenderer()\n    qc = MapComposer.MapComposer(qmlr=reg, qmr=mr)\n\n    ```", "```py\n    setGridAnnoPos = qc.composerMap.setGridAnnotationPosition\n    setGridAnnoDir = qc.composerMap.setGridAnnotationDirection\n    qcm = QgsComposerMap\n\n    ```", "```py\n    qc.composerMap.setGridEnabled(True)\n    qc.composerMap.setGridIntervalX(.75)\n    qc.composerMap.setGridIntervalY(.75)\n    qc.composerMap.setGridStyle(qcm.Solid)\n\n    ```", "```py\n    qc.composerMap.setShowGridAnnotation(True)\n    qc.composerMap.setGridAnnotationPrecision(0)\n\n    ```", "```py\n    setGridAnnoPos(qcm.OutsideMapFrame, qcm.Top)\n    setGridAnnoDir(qcm.Horizontal, qcm.Top)\n    setGridAnnoPos(qcm.OutsideMapFrame, qcm.Bottom)\n    setGridAnnoDir(qcm.Horizontal, qcm.Bottom)\n    setGridAnnoPos(qcm.OutsideMapFrame, qcm.Left)\n    setGridAnnoDir(qcm.Vertical, qcm.Left)\n    setGridAnnoPos(qcm.OutsideMapFrame, qcm.Right)\n    setGridAnnoDir(qcm.Vertical, qcm.Right)\n\n    ```", "```py\n    qc.composerMap.setAnnotationFrameDistance(1)\n    qc.composerMap.setGridPenWidth(.2)\n    qc.composerMap.setGridPenColor(QColor(0, 0, 0))\n    qc.composerMap.setAnnotationFontColor(QColor(0, 0, 0))\n    qc.c.addComposerMap(qc.composerMap)\n\n    ```", "```py\n    qc.output(\"/qgis_data/map.jpg\", \"jpg\")\n\n    ```", "```py\n    from PyQt4.QtCore import *\n    from PyQt4.QtGui import *\n    from qgisfromqgis.core import *\n    from qgisfromqgis.gui import *\n    import MapComposer\n\n    ```", "```py\n    lyr = QgsVectorLayer(\"/qgis_data/ms/mississippi.shp\", \"Mississippi\", \"ogr\")\n    reg = QgsMapLayerRegistry.instance()\n    reg.addMapLayer(lyr)\n    mr = iface.mapCanvas().mapRenderer()\n    qc = MapComposer.MapComposer(qmlr=reg, qmr=mr)\n\n    ```", "```py\n    qc.table = QgsComposerAttributeTable(qc.c)\n\n    ```", "```py\n    qc.table.setComposerMap(qc.composerMap)\n\n    ```", "```py\n    qc.table.setVectorLayer(lyr)\n\n    ```", "```py\n    mch = qc.composerMap.rect().height() \n    qc.table.setItemPosition(qc.x, qc.y + mch + 20)\n    qc.c.addItem(qc.table)\n\n    ```", "```py\n    qc.output(\"/qgis_data/map.jpg\", \"jpg\")\n\n    ```", "```py\n    from PyQt4.QtCore import *\n    from PyQt4.QtGui import *\n    from qgisfromqgis.core import *\n    from qgisfromqgis.gui import *\n    import MapComposer\n\n    ```", "```py\n    lyr = QgsVectorLayer(\"/qgis_data/ms/mississippi.shp\", \"Mississippi\", \"ogr\")\n    reg = QgsMapLayerRegistry.instance()\n    reg.addMapLayer(lyr)\n    mr = iface.mapCanvas().mapRenderer()\n    qc = MapComposer.MapComposer(qmlr=reg, qmr=mr)\n\n    ```", "```py\n    output =  \"/qgis_data/map\"\n\n    ```", "```py\n    qc.output(output + \".jpg\", \"jpg\")\n\n    ```", "```py\n    qc.c.setWorldFileMap(qc.composerMap)\n    qc.c.setGenerateWorldFile(True)\n    wf = qc.c.computeWorldFileParameters()\n\n    ```", "```py\n    with open(output + \".jgw\", \"w\") as f:\n     f.write(\"%s\\n\" % wf[0])\n     f.write(\"%s\\n\" % wf[1])\n     f.write(\"%s\\n\" % wf[3])\n     f.write(\"%s\\n\" % wf[4])\n     f.write(\"%s\\n\" % wf[2])\n     f.write(\"%s\\n\" % wf[5])\n\n    ```", "```py\n    from PyQt4.QtCore import *\n\n    ```", "```py\n    lyr = QgsVectorLayer(\"/Users/joellawhead/qgis_data/ms/mississippi.shp\", \"Mississippi\", \"ogr\")\n    reg = QgsMapLayerRegistry.instance()\n    reg.addMapLayer(lyr)\n\n    ```", "```py\n    f = QFileInfo(\"/Users/joellawhead/qgis_data/myProject.qgs\")\n\n    ```", "```py\n    p = QgsProject.instance()\n\n    ```", "```py\n    p.write(f)\n\n    ```", "```py\n    from PyQt4.QtCore import *\n\n    ```", "```py\n    f = QFileInfo(\"/Users/joellawhead/qgis_data/myProject.qgs\")\n\n    ```", "```py\n    p = QgsProject.instance()\n\n    ```", "```py\n    p.readPath(\"/Users/joellawhead/qgis_data/\")\n\n    ```", "```py\n    p.read(f)\n\n    ```"]