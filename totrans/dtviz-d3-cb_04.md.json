["```py\n<div id=\"linear\" class=\"clear\"><span>n</span></div>\n<div id=\"linear-capped\" class=\"clear\">\n    <span>1 &lt;= a*n + b &lt;= 20</span>\n</div>\n<div id=\"pow\" class=\"clear\"><span>n^2</span></div>\n<div id=\"pow-capped\" class=\"clear\">\n    <span>1 &lt;= a*n^2 + b &lt;= 10</span>\n</div>\n<div id=\"log\" class=\"clear\"><span>log(n)</span></div>\n<div id=\"log-capped\" class=\"clear\">\n    <span>1 &lt;= a*log(n) + b &lt;= 10</span>\n</div>\n\n<script type=\"text/javascript\">\n    var max = 11, data = [];\n    for (var i = 1; i < max; ++i) data.push(i);\n\n var linear = d3.scale.linear() // <-A\n .domain([1, 10]) // <-B\n .range([1, 10]); // <-C \n var linearCapped = d3.scale.linear()\n .domain([1, 10]) \n .range([1, 20]); // <-D\n\n var pow = d3.scale.pow().exponent(2); // <-E\n var powCapped = d3.scale.pow() // <-F\n .exponent(2)\n .domain([1, 10])\n .rangeRound([1, 10]); // <-G\n\n var log = d3.scale.log(); // <-H\n var logCapped = d3.scale.log() // <-I\n .domain([1, 10])\n .rangeRound([1, 10]);\n\n    function render(data, scale, selector) {\n        d3.select(selector).selectAll(\"div.cell\")\n                .data(data)\n                .enter().append(\"div\").classed(\"cell\", true);\n\n        d3.select(selector).selectAll(\"div.cell\")\n                .data(data)\n                .exit().remove();\n\n        d3.select(selector).selectAll(\"div.cell\")\n                .data(data)\n                .style(\"display\", \"inline-block\")\n .text(function (d) {\n return d3.round(scale(d), 2);\n });\n    }\n\n    render(data, linear, \"#linear\");\n    render(data, linearCapped, \"#linear-capped\");\n    render(data, pow, \"#pow\");\n    render(data, powCapped, \"#pow-capped\");\n    render(data, log, \"#log\");\n    render(data, logCapped, \"#log-capped\");\n</script>\n```", "```py\n    var linear = d3.scale.linear() // <-A\n        .domain([1, 10]) // <-B\n        .range([1, 10]); // <-C        \n```", "```py\n    var linearCapped = d3.scale.linear()\n        .domain([1, 10])        \n        .range([1, 20]); // <-D\n```", "```py\n    var pow = d3.scale.pow().exponent(2); // <-E\n```", "```py\n    var powCapped = d3.scale.pow() // <-F\n        .exponent(2)\n        .domain([1, 10])\n        .rangeRound([1, 10]); // <-G\n```", "```py\n    var log = d3.scale.log(); // <-H\n```", "```py\n    var logCapped = d3.scale.log() // <-I\n        .domain([1, 10])\n        .rangeRound([1, 10]);\n```", "```py\n<div id=\"time\" class=\"clear\">\n    <span>Linear Time Progression<br></span>\n    <span>Mapping [01/01/2013, 12/31/2013] to [0, 900]<br></span>\n</div>\n\n<script type=\"text/javascript\">\n var start = new Date(2013, 0, 1), // <-A \n end = new Date(2013, 11, 31),\n range = [0, 1200],\n time = d3.time.scale().domain([start, end]) // <-B\n .rangeRound(range), // <-C\n        max = 12,\n        data = [];\n\n for (var i = 0; i < max; ++i){ // <-D\n var date = new Date(start.getTime());\n date.setMonth(start.getMonth() + i);\n data.push(date);\n }\n\n    function render(data, scale, selector) { // <-E\n        d3.select(selector).selectAll(\"div.fixed-cell\")\n                    .data(data)\n                .enter()\n                    .append(\"div\").classed(\"fixed-cell\", true);\n\n        d3.select(selector).selectAll(\"div.fixed-cell\")\n                    .data(data)\n                .exit().remove();\n\n        d3.select(selector).selectAll(\"div.fixed-cell\")\n                    .data(data)\n .style(\"margin-left\", function(d){ // <-F\n return scale(d) + \"px\";\n })\n .html(function (d) { // <-G\n var format = d3.time.format(\"%x\"); // <-H\n return format(d) + \"<br>\" + scale(d) + \"px\";\n });\n    }\n\n    render(data, time, \"#time\");\n</script>\n```", "```py\nvar start = new Date(2013, 0, 1), // <-A \n        end = new Date(2013, 11, 31),\n        range = [0, 900],\n        time = d3.time.scale().domain([start, end]) // <-B\n            .rangeRound(range), // <-C\n```", "```py\n    for (var i = 0; i < max; ++i){ // <-D\n        var date = new Date(start.getTime());\n        date.setMonth(start.getMonth() + i);\n        data.push(date);\n    }\n```", "```py\n.style(\"margin-left\", function(d){ // <-F\n    return scale(d) + \"px\";\n})\n```", "```py\n.html(function (d) { // <-G\n    var format = d3.time.format(\"%x\"); // <-H\n    return format(d) + \"<br>\" + scale(d) + \"px\";\n});\n```", "```py\n<div id=\"alphabet\" class=\"clear\">\n    <span>Ordinal Scale with Alphabet</span>\n    <span>Mapping [1..10] to [\"a\"..\"j\"]</span>\n</div>\n<div id=\"category10\" class=\"clear\">\n    <span>Ordinal Color Scale Category 10</span>\n    <span>Mapping [1..10] to category 10 colors</span>\n</div>\n<div id=\"category20\" class=\"clear\">\n    <span>Ordinal Color Scale Category 20</span>\n    <span>Mapping [1..10] to category 20 colors</span>\n</div>\n<div id=\"category20b\" class=\"clear\">\n    <span>Ordinal Color Scale Category 20b</span>â€©    <span>Mapping [1..10] to category 20b colors</span>\n</div>\n<div id=\"category20c\" class=\"clear\">\n    <span>Ordinal Color Scale Category 20c</span>\n    <span>Mapping [1..10] to category 20c colors</span>\n</div>\n\n<script type=\"text/javascript\">\n    var max = 10, data = [];\n\n    for (var i = 0; i < max; ++i) data.push(i); // <-A\n\n var alphabet = d3.scale.ordinal() // <-B\n .domain(data)\n .range([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"]);\n\n    function render(data, scale, selector) { // <-C\n        d3.select(selector).selectAll(\"div.cell\")\n                  .data(data)\n              .enter().append(\"div\").classed(\"cell\", true);\n\n        d3.select(selector).selectAll(\"div.cell\")\n                  .data(data)\n              .exit().remove();\n\n        d3.select(selector).selectAll(\"div.cell\")\n                  .data(data)\n              .style(\"display\", \"inline-block\")\n .style(\"background-color\", function(d){  // <-D\n return scale(d).indexOf(\"#\")>=0?scale(d):\"white\";\n })\n .text(function (d) { // <-E\n return scale(d);\n });\n    }\n\n    render(data, alphabet, \"#alphabet\"); // <-F\n    render(data, d3.scale.category10(), \"#category10\");\n    render(data, d3.scale.category20(), \"#category20\");\n    render(data, d3.scale.category20b(), \"#category20b\");\n    render(data, d3.scale.category20c(), \"#category20c\"); // <-G\n</script>\n```", "```py\nfor (var i = 0; i < max; ++i) data.push(i); // <-A    \nvar alphabet = d3.scale.ordinal() // <-B\n    .domain(data)\n.range([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"]);\n```", "```py\n.style(\"background-color\", function(d){  // <-D\n    return scale(d).indexOf(\"#\")>=0 ? scale(d) : \"white\";\n})\n```", "```py\n.text(function (d) { // <-E\n    return scale(d);\n});\n```", "```py\nd3.scale.ordinal()\n.range([\"#1f77b4\", \"#ff7f0e\", \"#2ca02c\"]);\n```", "```py\nvar interpolate = d3.interpolateNumber(0, 100);\ninterpolate(0.1); // => 10\ninterpolate(0.99); //=> 99\n```", "```py\nfunction interpolate(t) {\n    return a * (1 - t) + b * t;\n}\n```", "```py\n<div id=\"font\" class=\"clear\">\n    <span>Font Interpolation<br></span>\n</div>\n\n<script type=\"text/javascript\">\n    var max = 11, data = [];\n\n var sizeScale = d3.scale.linear() // <-A\n .domain([0, max])\n .range([  // <-B\n \"italic bold 12px/30px Georgia, serif\", \n \"italic bold 120px/180px Georgia, serif\"\n ]);\n\n    for (var i = 0; i < max; ++i){ data.push(i); }\n\n    function render(data, scale, selector) { // <-C\n        d3.select(selector).selectAll(\"div.cell\")\n                .data(data)\n            .enter().append(\"div\").classed(\"cell\", true)\n                .append(\"span\");\n\n        d3.select(selector).selectAll(\"div.cell\")\n                .data(data)\n            .exit().remove();\n\n        d3.select(selector).selectAll(\"div.cell\")\n                .data(data)\n            .style(\"display\", \"inline-block\")\n            .select(\"span\")\n .style(\"font\", function(d,i){ \n return scale(d); // <-D\n })\n .text(function(d,i){return i;}); // <-E\n    }\n\n    render(data, sizeScale, \"#font\");\n</script>\n```", "```py\nvar sizeScale = d3.scale.linear() // <-A\n        .domain([0, max])\n        .range([  // <-B\n            \"italic bold 12px/30px Georgia, serif\", \n            \"italic bold 120px/180px Georgia, serif\"\n        ]);\n```", "```py\n.style(\"font\", function(d,i){ \n    return scale(d); // <-D\n})\n.text(function(d,i){return i;}); // <-E\n```", "```py\n/[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g\n```", "```py\n<div id=\"color\" class=\"clear\">\n    <span>Linear Color Interpolation<br></span>\n</div>\n<div id=\"color-diverge\" class=\"clear\">\n    <span>Poly-Linear Color Interpolation<br></span>\n</div>\n\n<script type=\"text/javascript\">\n    var max = 21, data = [];\n\n var colorScale = d3.scale.linear() // <-A\n .domain([0, max])\n .range([\"white\", \"#4169e1\"]);\n\n function divergingScale(pivot) { // <-B\n var divergingColorScale = d3.scale.linear()\n .domain([0, pivot, max]) // <-C\n .range([\"white\", \"#4169e1\", \"white\"]);\n return divergingColorScale;\n }\n\n    for (var i = 0; i < max; ++i) data.push(i);\n\n    function render(data, scale, selector) { // <-D\n        d3.select(selector).selectAll(\"div.cell\")\n                .data(data)\n            .enter()\n                .append(\"div\")\n                    .classed(\"cell\", true)\n                .append(\"span\");\n\n        d3.select(selector).selectAll(\"div.cell\")\n                .data(data)\n            .exit().remove();\n\n        d3.select(selector).selectAll(\"div.cell\")\n                .data(data)\n            .style(\"display\", \"inline-block\")\n .style(\"background-color\", function(d){\n return scale(d); // <-E\n })\n            .select(\"span\")\n                .text(function(d,i){return i;});\n    }\n\n    render(data, colorScale, \"#color\");\n    render(data, divergingScale(5), \"#color-diverge\");\n</script>\n```", "```py\nvar colorScale = d3.scale.linear() // <-A\n    .domain([0, max])\n    .range([\"white\", \"#4169e1\"]);\n```", "```py\nfunction divergingScale(pivot) { // <-B\n    var divergingColorScale = d3.scale.linear()\n        .domain([0, pivot, max]) // <-C\n        .range([\"white\", \"#4169e1\", \"white\"]);\n    return divergingColorScale;\n}\n```", "```py\nd3.scale.linear()\n    .domain([0, pivot]).range([\"white\", \"#4169e1\"]);\nd3.scale.linear()\n.domain([pivot, max]).range([\"#4169e1\", \"white \"]);\n```", "```py\n<div id=\"compound\" class=\"clear\">\n    <span>Compound Interpolation<br></span>\n</div>\n\n<script type=\"text/javascript\">\n    var max = 21, data = [];\n\n var compoundScale = d3.scale.pow()\n .exponent(2)\n .domain([0, max])\n .range([\n {color:\"#add8e6\", height:\"15px\"}, // <-A\n {color:\"#4169e1\", height:\"150px\"} // <-B\n ]);\n\n    for (var i = 0; i < max; ++i) data.push(i);\n\n    function render(data, scale, selector) { // <-C\n        d3.select(selector).selectAll(\"div.v-bar\")\n                .data(data)\n                .enter().append(\"div\").classed(\"v-bar\", true)\n                .append(\"span\");\n\n        d3.select(selector).selectAll(\"div.v-bar\")\n                .data(data)\n                .exit().remove();\n\n        d3.select(selector).selectAll(\"div.v-bar\")\n                .data(data)\n                .classed(\"v-bar\", true)\n .style(\"height\", function(d){ // <-D\n return scale(d).height;\n }) \n .style(\"background-color\", function(d){ // <-E\n return scale(d).color;\n })\n                .select(\"span\")\n                .text(function(d,i){return i;});\n    }\n\n    render(data, compoundScale, \"#compound\");\n</script>\n```", "```py\nvar compoundScale = d3.scale.pow()\n            .exponent(2)\n            .domain([0, max])\n            .range([\n                {color:\"#add8e6\", height:\"15px\"}, // <-A\n                {color:\"#4169e1\", height:\"150px\"} // <-B\n            ]);\n```", "```py\n{\n  color:\"#add8e6\", \n  size{ \nheight:\"15px\", \nwidth: \"25px\"\n  }\n}\n```", "```py\n.style(\"height\", function(d){\n  return scale(d).height; // <-D\n}) \n.style(\"background-color\", function(d){\n  return scale(d).color; // <-E\n})\n```", "```py\nvar compoundScale = d3.scale.pow()\n            .exponent(2)\n            .domain([0, max])\n            .range([\n                {color:\"#add8e6\", height:\"15px\"}, // <-A\n                {color:\"#4169e1\"} // <-B\n            ]);\n```", "```py\n<div id=\"dollar\" class=\"clear\">\n    <span>Custom Dollar Interpolation<br></span>\n</div>\n<div id=\"alphabet\" class=\"clear\">\n    <span>Custom Alphabet Interpolation<br></span>\n</div>\n\n<script type=\"text/javascript\">\n d3.interpolators.push(function(a, b) { // <-A\n var re = /^\\$([0-9,.]+)$/, // <-B\n ma, mb, f = d3.format(\",.02f\"); \n if ((ma = re.exec(a)) && (mb = re.exec(b))) { // <-C\n a = parseFloat(ma[1]);\n b = parseFloat(mb[1]) - a;  // <-D\n return function(t) {  // <-E\n return \"$\" + f(a + b * t); // <-F\n };\n }\n });\n\n d3.interpolators.push(function(a, b) { // <-G\n var re = /^([a-z])$/, ma, mb; // <-H\n if ((ma = re.exec(a)) && (mb = re.exec(b))) { // <-I\n a = a.charCodeAt(0);\n var delta = a - b.charCodeAt(0); // <-J\n return function(t) { // <-K\n return String.fromCharCode(Math.ceil(a - delta * t));\n };\n }\n });\n\n var dollarScale = d3.scale.linear()\n .domain([0, 11])\n .range([\"$0\", \"$300\"]); // <-L\n\n var alphabetScale = d3.scale.linear()\n .domain([0, 27])\n .range([\"a\", \"z\"]); // <-M\n\n    function render(scale, selector) {        \n        var data = [];\n        var max = scale.domain()[1];\n\n        for (var i = 0; i < max; ++i) data.push(i);      \n\n        d3.select(selector).selectAll(\"div.cell\")\n                    .data(data)\n                .enter()\n                    .append(\"div\")\n                        .classed(\"cell\", true)\n                    .append(\"span\");\n\n        d3.select(selector).selectAll(\"div.cell\")\n                    .data(data)\n                .exit().remove();\n\n        d3.select(selector).selectAll(\"div.cell\")\n                .data(data)\n                .style(\"display\", \"inline-block\")\n                .select(\"span\")\n .text(function(d,i){return scale(d);}); // <-N\n    }\n\n    render(dollarScale, \"#dollar\");\n    render(alphabetScale, \"#alphabet\");\n</script>\n```", "```py\nd3.interpolators.push(function(a, b) { // <-A\n      var re = /^\\$([0-9,.]+)$/, // <-B\n        ma, mb, f = d3.format(\",.02f\"); \n      if ((ma = re.exec(a)) && (mb = re.exec(b))) { // <-C\n        a = parseFloat(ma[1]);\n        b = parseFloat(mb[1]) - a;  // <-D\n        return function(t) {  // <-E\n          return \"$\" + f(a + b * t); // <-F\n        };\n      }\n    });\n```", "```py\nreturn function(t) {  // <-E\n          return \"$\" + f(a + b * t); // <-F\n        };\n```", "```py\nb = parseFloat(mb[1]) - a;  // <-D\n```", "```py\nd3.interpolators.push(function(a, b) { // <-G\n      var re = /^([a-z])$/, ma, mb; // <-H\n      if ((ma = re.exec(a)) && (mb = re.exec(b))) { // <-I\n        a = a.charCodeAt(0);\n        var delta = a - b.charCodeAt(0); // <-J\n        return function(t) { // <-K\n          return String.fromCharCode(Math.ceil(a - delta * t));\n        };\n      }\n});\n```", "```py\nvar dollarScale = d3.scale.linear()\n        .domain([0, 11])\n        .range([\"$0\", \"$300\"]); // <-L\n\nvar alphabetScale = d3.scale.linear()\n        .domain([0, 27])\n        .range([\"a\", \"z\"]); // <-M\n```", "```py\n.text(function(d,i){\n  return scale(d);} // <-N\n); \n```"]