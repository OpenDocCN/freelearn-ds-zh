["```py\nx <- runif(1e6)\nprint(object.size(x), units = \"auto\")\n## 7.6 Mb\ny <- list(x, x)\nprint(object.size(y), units = \"auto\")\n## 15.3 Mb\n```", "```py\nlibrary(pryr)\nobject_size(x)\n## 8 MB\nobject_size(y)\n## 8 MB\n```", "```py\naddress(x)\n## [1] \"0x10f992000\"\naddress(y)\n## [1] \"0x7ff18b30e478\"\naddress(y[[1]])\n## [1] \"0x10f992000\"\naddress(y[[2]])\n## [1] \"0x10f992000\"\n```", "```py\nobject_size(x, y)\n## 8 MB\n```", "```py\ny[[1]][1] <- 0\naddress(x)\n## [1] \"0x10f992000\"\naddress(y[[1]])\n## [1] \"0x110134000\"\naddress(y[[2]])\n## [1] \"0x10f992000\"\nobject_size(y)\n## 16 MB\nobject_size(x, y)\n## 16 MB\n```", "```py\ntracemem(y[[2]])\n## [1] \"<0x10f992000>\"\ny[[2]][1] <- 0\n## tracemem[0x10f992000 -> 0x1108d6000]: \nuntracemem(y[[2]])\n```", "```py\naddress(x)\n## [1] \"0x10f992000\"\naddress(y[[1]])\n## [1] \"0x110134000\"\naddress(y[[2]])\n## [1] \"0x1108d6000\"\nobject_size(y)\n## 16 MB\nobject_size(x, y)\n## 24 MB\n```", "```py\ntracemem(x)\n## [1] \"<0x10f992000>\"\nx[1]<- 1\n## tracemem[0x10f992000 -> 0x111078000]: \nx[1]<- 1\nx[1]<- 0.5\nx[2] <- 0.3\nuntracemem(x)\n```", "```py\ntracemem(x)\n## [1] \"<0x10e73c000>\"\nx[1] <- 0\n## tracemem[0x10e73c000 -> 0x110d66000]: \nx[2] <- 1\n## tracemem[0x110d66000 -> 0x115478000]: \nx[3] <- 0.5\n## tracemem[0x115478000 -> 0x115c79000]: \nuntracemem(x)\n```", "```py\ncustomer.age <- sample(18:100, 1e6, replace=TRUE)\ncustomer.gender <- sample(c(\"Male\", \"Female\"), 1e6, TRUE)\n```", "```py\nnames(customer.age) <- paste(\"cust\", 1:1e6)\nnames(customer.gender) <- paste(\"cust\", 1:1e6)\nobject_size(customer.age, customer.gender)\n## 84 MB\n```", "```py\ncustomer.names <- paste(\"cust\", 1:1e6)\nnames(customer.age) <- customer.names\nnames(customer.gender) <- customer.names\nobject_size(customer.age, customer.gender, customer.names)\n## 76 MB\n```", "```py\ntrans.lengths <- rpois(5e5, 3) + 1L\ntrans <- rep.int(1:5e5, trans.lengths)\nitems <- unlist(lapply(trans.lengths, sample.int, n = 1000))\nsales.data <- data.frame(trans = trans, item = items)\n```", "```py\nhead(sales.data, 15)\n##    trans item\n## 1      1  680\n## 2      1  846\n## 3      1  196\n## 4      1  191\n## 5      1   20\n## 6      1  852\n## 7      1  623\n## 8      1  206\n## 9      1  775\n## 10     2  624\n## 11     2   31\n## 12     2  718\n## 13     2  190\n## 14     3  482\n## 15     3  946\n```", "```py\nlibrary(arules)\ntrans.list <- split(sales.data$item, sales.data$trans)\ntrans.arules <- as(trans.list, \"transactions\")\n```", "```py\nfreq.itemsets <- apriori(trans.arules, list(support = 0.3))\n```", "```py\nobject_size(sales.data)\n## 16 MB\nobject_size(trans.list)\n## 62.1 MB\nobject_size(trans.arules)\n## 44 MB\n```", "```py\ntrans.list <- split(sales.data$item, sales.data$trans)\nrm(sales.data)\ntrans.arules <- as(trans.list, \"transactions\")\nrm(trans.list)\nfreq.itemsets <- apriori(trans.arules, list(support = 0.3))\n```", "```py\n# Automatically remove temporary variables by encapsulating code\n# in a function\nprepare_data <- function(sales.data) {\n    trans.list <- split(sales.data$item, sales.data$trans)\n    trans.arules <- as(trans.list, \"transactions\")\n    return(trans.arules)\n}\ntrans.arules <- prepare_data(sales.data)\nfreq.itemsets <- apriori(trans.arules, list(support = 0.3))\n```", "```py\nA <- matrix(rnorm(1E5), 1E4, 10)\ndist_mat <- as.matrix(dist(A))\ndiag(dist_mat) <- NA\nres1 <- which(dist_mat == min(dist_mat, na.rm=T), arr.ind = T)[1,]\nres1\n##  row  col \n## 6778 6737 \nobject_size(A)\n## 800 kB\nobject_size(dist_mat)\n## 801 MB\n```", "```py\nlibrary(pdist)\ntemp_res <- lapply(1:nrow(A), function(x) {\n  temp <- as.matrix(pdist(X = A, Y = A[x,]));\n  temp[x] <- NA;\n  output_val <- min(temp, na.rm=T);\n  output_ind <- c(x, which(temp == output_val));\n  output <- list(val = output_val, ind = output_ind);\n})\nval_vec <- sapply(temp_res, FUN=function(x) x$val)\nind_vec <- sapply(temp_res, FUN=function(x) x$ind)\nres2 <- ind_vec[, which.min(val_vec)]\nres2\n## [1] 6778 6737\nobject_size(temp_res)\n## 2.72 MB\nobject_size(val_vec)\n## 80 kB\nobject_size(ind_vec)\n## 80.2 kB\n```", "```py\ntrans.list <- split(sales.data$item, sales.data$trans)\nsaveRDS(sales.data, \"sales.data.rds\")\nrm(sales.data)\ntrans.arules <- as(trans.list, \"transactions\")\nrm(trans.list)\nfreq.itemsets <- apriori(trans.arules, list(support = 0.3))\nsales.data <- readRDS(\"sales.data.rds\")\n# Perform further processing with sales.data\n```"]