["```py\n    !pip install xlrd\n    ```", "```py\n    import numpy as np\n    import pandas as pd\n    import matplotlib.pyplot as plt\n    df = pd.read_excel(\"Sample - Superstore.xls\")\n    df.head()\n    ```", "```py\n    df.drop('Row ID',axis=1,inplace=True)\n    ```", "```py\n    df.shape\n    ```", "```py\n    (9994, 20)\n    ```", "```py\ndf_subset = df.loc[\n    [i for i in range(5,10)],\n    ['Customer ID','Customer Name','City','Postal Code',\n     'Sales']]\ndf_subset\n```", "```py\ndf_subset = df.loc[[i for i in range(100,200)],['Sales','Profit']]\ndf_subset.describe()\n```", "```py\n    df['State'].unique()\n    ```", "```py\n    df['State'].nunique()\n    ```", "```py\n    49\n    ```", "```py\ndf_subset = df.loc[[i for i in range (10)],['Ship Mode','State','Sales']]\ndf_subset\n```", "```py\ndf_subset>100\n```", "```py\ndf_subset[df_subset>100]\n```", "```py\ndf_subset[df_subset['Sales']>100]\n```", "```py\ndf_subset[(df_subset['State']!='Colorado') & (df_subset['Sales']>100)]\n```", "```py\n    matrix_data = np.matrix(\n        '22,66,140;42,70,148;30,62,125;35,68,160;25,62,152')\n    row_labels = ['A','B','C','D','E']\n    column_headings = ['Age', 'Height', 'Weight']\n    ```", "```py\n    df1 = pd.DataFrame(data=matrix_data, \n                       index=row_labels,\n                       columns=column_headings)\n    print(\"\\nThe DataFrame\\n\",'-'*25, sep='')\n    print(df1)\n    ```", "```py\n    print(\"\\nAfter resetting index\\n\",'-'*35, sep='')\n    print(df1.reset_index())\n    ```", "```py\n    print(\"\\nAfter resetting index with 'drop' option TRUE\\n\",'-'*45, sep='')\n    print(df1.reset_index(drop=True))\n    ```", "```py\n    print(\"\\nAdding a new column 'Profession'\\n\",'-'*45, sep='')\n    df1['Profession'] = \"Student Teacher Engineer Doctor Nurse\".split()\n    print(df1)\n    ```", "```py\n    print(\"\\nSetting 'Profession' column as index\\n\",'-'*45, sep='')\n    print (df1.set_index('Profession'))\n    ```", "```py\n    df_subset = df.loc[[i for i in range (10)],['Ship Mode','State','Sales']]\n    ```", "```py\n    byState = df_subset.groupby('State')\n    ```", "```py\n    print(\"\\nGrouping by 'State' column and listing mean sales\\n\",'-'*50, sep='')\n    print(byState.mean())\n    ```", "```py\n    print(\"\\nGrouping by 'State' column and listing total sum of sales\\n\",'-'*50, sep='')\n    print(byState.sum())\n    ```", "```py\n    pd.DataFrame(byState.describe().loc['California'])\n    ```", "```py\n    df_subset.groupby('Ship Mode').describe().loc[['Second Class','Standard Class']]\n    ```", "```py\n    byStateCity=df.groupby(['State','City'])\n    byStateCity.describe()['Sales']\n    ```", "```py\ndf_missing=pd.read_excel(\"Sample - Superstore.xls\",sheet_name=\"Missing\")\ndf_missing\n```", "```py\ndf_missing.isnull()\n```", "```py\nfor c in df_missing.columns:\n    miss = df_missing[c].isnull().sum()\n    if miss>0:\n        print(\"{} has {} missing value(s)\".format(c,miss))\n    else:\n        print(\"{} has NO missing value!\".format(c))\n```", "```py\n    df_missing.fillna('FILL')\n    ```", "```py\n    df_missing[['Customer','Product']].fillna('FILL')\n    ```", "```py\n    df_missing['Sales'].fillna(method='ffill')\n    ```", "```py\n    df_missing['Sales'].fillna(method='bfill')\n    ```", "```py\n    df_missing['Sales'].fillna(df_missing.mean()['Sales'])\n    ```", "```py\n    df_missing.dropna(axis=0)\n    ```", "```py\n    df_missing.dropna(axis=1)\n    ```", "```py\n    df_missing.dropna(axis=1,thresh=10)\n    ```", "```py\ndf_sample = df[['Customer Name','State','Sales','Profit']].sample(n=50).copy()\ndf_sample['Sales'].iloc[5]=-1000.0\ndf_sample['Sales'].iloc[15]=-500.0\n```", "```py\ndf_sample.plot.box()\nplt.title(\"Boxplot of sales and profit\", fontsize=15)\nplt.xticks(fontsize=15)\nplt.yticks(fontsize=15)\nplt.grid(True)\n```", "```py\n    df_1 = df[['Customer Name','State','Sales','Profit']].sample(n=4)\n    df_2 = df[['Customer Name','State','Sales','Profit']].sample(n=4)\n    df_3 = df[['Customer Name','State','Sales','Profit']].sample(n=4)\n    ```", "```py\n    df_cat1 = pd.concat([df_1,df_2,df_3], axis=0)\n    df_cat1\n    ```", "```py\n    df_cat2 = pd.concat([df_1,df_2,df_3], axis=1)\n    df_cat2\n    ```", "```py\n    df_1=df[['Ship Date','Ship Mode','Customer Name']][0:4]\n    df_1\n    ```", "```py\n    df_2=df[['Customer Name','Product Name','Quantity']][0:4]\n    df_2\n    ```", "```py\n    pd.merge(df_1,df_2,on='Customer Name',how='inner')\n    ```", "```py\n    pd.merge(df_1,df_2,on='Customer Name',how='inner').drop_duplicates()\n    ```", "```py\n    df_3=df[['Customer Name','Product Name','Quantity']][2:6]\n    df_3\n    ```", "```py\n    pd.merge(df_1,df_3,on='Customer Name',how='inner').drop_duplicates()\n    ```", "```py\n    pd.merge(df_1,df_3,on='Customer Name',how='outer').drop_duplicates()\n    ```", "```py\n    df_1=df[['Customer Name','Ship Date','Ship Mode']][0:4]\n    df_1.set_index(['Customer Name'],inplace=True)\n    df_1\n    df_2=df[['Customer Name','Product Name','Quantity']][2:6]\n    df_2.set_index(['Customer Name'],inplace=True)\n    df_2\n    ```", "```py\n    df_1.join(df_2,how='left').drop_duplicates()\n    ```", "```py\n    df_1.join(df_2,how='right').drop_duplicates()\n    ```", "```py\n    df_1.join(df_2,how='inner').drop_duplicates()\n    ```", "```py\n    df_1.join(df_2,how='outer').drop_duplicates()\n    ```", "```py\n    df.sample(n=5)\n    ```", "```py\n    df.sample(frac=0.1)\n    ```", "```py\n    df.sample(frac=0.1, replace=True)\n    ```", "```py\ndf['Customer Name'].value_counts()[:10]\n```", "```py\ndf_sample = df.sample(n=100)\ndf_sample.pivot_table(values=['Sales','Quantity','Profit'],index=['Region','State'],aggfunc='mean')\n```", "```py\n    df_sample=df[['Customer Name','State','Sales','Quantity']].sample(n=15)\n    df_sample\n    ```", "```py\n    df_sample.sort_values(by='Sales')\n    ```", "```py\n    df_sample.sort_values(by=['State','Sales'])\n    ```", "```py\n    def categorize_sales(price):\n        if price < 50:\n            return \"Low\"\n        elif price < 200:\n            return \"Medium\"\n        else:\n            return \"High\"\n    ```", "```py\n    df_sample=df[['Customer Name','State','Sales']].sample(n=100)\n    df_sample.head(10)\n    ```", "```py\n    df_sample['Sales Price Category']=df_sample['Sales'].apply(categorize_sales)\n    df_sample.head(10)\n    ```", "```py\n    df_sample['Customer Name Length']=df_sample['Customer Name'].apply(len)\n    df_sample.head(10)\n    ```", "```py\n    df_sample['Discounted Price']=df_sample['Sales'].apply(lambda x:0.85*x if x>200 else x)\n    df_sample.head(10)\n    ```"]