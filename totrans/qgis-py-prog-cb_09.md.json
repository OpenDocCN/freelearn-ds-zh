["```py\n    from PyQt4.QtCore import *\n    from PyQt4.QtGui import *\n    import qtiles\n    import random\n\n    ```", "```py\n    def randomColor(mix=(255,255,255)):\n     red = random.randrange(0,256)\n     green = random.randrange(0,256)\n     blue = random.randrange(0,256)\n     r,g,b = mix\n     red = (red + r) / 2\n     green = (green + g) / 2\n     blue = (blue + b) / 2\n     return (red, green, blue)\n\n    ```", "```py\n    def done():\n     print \"FINISHED!!\"\n\n    ```", "```py\n    shp = \"/qgis_data/shapes/countries.shp\"\n    dir = \"/qgis_data/tilecache\"\n\n    ```", "```py\n    layer = QgsVectorLayer(shp, \"Countries\", \"ogr\")\n\n    ```", "```py\n    field = 'CNTRY_NAME'\n\n    ```", "```py\n    features = layer.getFeatures()\n\n    ```", "```py\n    categories = []\n    for feature in features:\n     country = feature[field]\n     sym = QgsSymbolV2.defaultSymbol(layer.geometryType())\n     r,g,b = randomColor()\n     sym.setColor(QColor(r,g,b,255))\n     category = QgsRendererCategoryV2(country, sym, country)\n     categories.append(category) \n\n    ```", "```py\n    renderer = QgsCategorizedSymbolRendererV2(field, categories)\n    layer.setRendererV2(renderer)\n    QgsMapLayerRegistry.instance().addMapLayer(layer)\n\n    ```", "```py\n    canvas = iface.mapCanvas()\n    layers = canvas.mapSettings().layers()\n    extent = canvas.extent()\n    minZoom = 0\n    maxZoom = 5\n    width = 256\n    height = 256\n    transp = 255\n    quality = 70\n    format = \"PNG\"\n    outputPath = QFileInfo(dir)\n    rootDir = \"countries\"\n    antialiasing = False\n    tmsConvention = True\n    mapUrl = False\n    viewer = True\n\n    ```", "```py\n    tt = qtiles.tilingthread.TilingThread(layers, extent, minZoom, maxZoom, width, height, transp,\n    quality, format, outputPath, rootDir, antialiasing, tmsConvention,\n    mapUrl, viewer)\n\n    ```", "```py\n    tt.processFinished.connect(done)\n\n    ```", "```py\n    tt.start()\n\n    ```", "```py\n    from PyQt4.QtCore import *\n    from PyQt4.QtGui import *\n    from qgis.core import *\n    from tempfile import mkstemp\n    import os\n    from qgisio import geojsonio\n\n    ```", "```py\n    layer = QgsVectorLayer(\"/qgis_data/shapes/building.shp\", \"Building\", \"ogr\")\n    name = layer.name()\n\n    ```", "```py\n    handle, tmpfile = mkstemp(suffix='.geojson')\n    os.close(handle)\n\n    ```", "```py\n    crs = QgsCoordinateReferenceSystem(4326,\n    QgsCoordinateReferenceSystem.PostgisCrsId)\n\n    ```", "```py\n    error = QgsVectorFileWriter.writeAsVectorFormat(layer, tmpfile,\n     \"utf-8\", crs, \"GeoJSON\", onlySelected=False)\n\n    ```", "```py\n    if error != QgsVectorFileWriter.NoError:\n     print \"Unable to write geoJSON!\"\n\n    ```", "```py\n    with open(str(tmpfile), 'r') as f:\n     contents = f.read()\n\n    ```", "```py\n    os.remove(tmpfile)\n\n    ```", "```py\n    url = geojsonio._create_gist(contents, \"Layer exported from QGIS\", name + \".geojson\")\n\n    ```", "```py\n    QDesktopServices.openUrl(QUrl(url))\n\n    ```", "```py\n    from PyQt4.QtGui import *\n\n    ```", "```py\n    prefix = \"/Users/joellawhead/qgis_data/ms/\"\n\n    ```", "```py\n    rails = QgsVectorLayer(prefix + \"ms_rails_mstm.shp\", \"Railways\", \"ogr\")\n\n    ```", "```py\n    rules = (\n     ('Heavily Used', '\"DEN09CODE\" > 3', 'red', (0, 6000000)),\n     ('Moderately Used', '\"DEN09CODE\" < 4 AND \"DEN09CODE\" > 1', 'orange', (0, 1500000)),\n     ('Lightly Used', '\"DEN09CODE\" < 2', 'grey', (0, 250000)),\n    )\n\n    ```", "```py\n    sym_rails = QgsSymbolV2.defaultSymbol(rails.geometryType())\n    rend_rails = QgsRuleBasedRendererV2(sym_rails)\n\n    ```", "```py\n    root_rule = rend_rails.rootRule()\n    ```", "```py\n    for label, exp, color, scale in rules:\n     # create a clone (i.e. a copy) of the default rule\n     rule = root_rule.children()[0].clone()\n     # set the label, exp and color\n     rule.setLabel(label)\n     rule.setFilterExpression(exp)\n     rule.symbol().setColor(QColor(color))\n     # set the scale limits if they have been specified\n     if scale is not None:\n     rule.setScaleMinDenom(scale[0])\n     rule.setScaleMaxDenom(scale[1])\n    # append the rule to the list of rules\n     root_rule.appendChild(rule)\n\n    ```", "```py\n    root_rule.removeChildAt(0)\n\n    ```", "```py\n    rails.setRendererV2(rend_rails)\n\n    ```", "```py\n    jax = QgsVectorLayer(prefix + \"jackson.shp\", \"Jackson\", \"ogr\")\n    jax_style = {}\n    jax_style['color'] = \"#ffff00\"\n    jax_style['name'] = 'regular_star'\n    jax_style['outline'] = '#000000'\n    jax_style['outline-width'] = '1'\n    jax_style['size'] = '8'\n    sym_jax = QgsSimpleMarkerSymbolLayerV2.create(jax_style)\n    jax.rendererV2().symbols()[0].changeSymbolLayer(0, sym_jax)\n\n    ```", "```py\n    ms = QgsVectorLayer(prefix + \"mississippi.shp\", \"Mississippi\", \"ogr\")\n    ms_style = {}yea\n    ms_style['color'] = \"#F7F5EB\"\n    sym_ms = QgsSimpleFillSymbolLayerV2.create(ms_style)\n    ms.rendererV2().symbols()[0].changeSymbolLayer(0, sym_ms)\n\n    ```", "```py\n    QgsMapLayerRegistry.instance().addMapLayers([jax, rails, ms])\n\n    ```", "```py\n    from PyQt4.QtCore import *\n    from PyQt4.QtGui import *\n\n    ```", "```py\n    hs = QgsRasterLayer(\"/qgis_data/saveqml/hillshade.tif\", \"Hillshade\")\n    dem = QgsRasterLayer(\"/qgis_data/saveqml/dem.asc\", \"DEM\")\n\n    ```", "```py\n    algorithm = QgsContrastEnhancement.StretchToMinimumMaximum\n    limits = QgsRaster.ContrastEnhancementMinMax\n    dem.setContrastEnhancement(algorithm, limits)\n\n    ```", "```py\n    s = QgsRasterShader() \n    c = QgsColorRampShader() \n    c.setColorRampType(QgsColorRampShader.INTERPOLATED) \n    i = [] \n    qri = QgsColorRampShader.ColorRampItem\n    i.append(qri(356.334, QColor(63,159,152,255), '356.334')) \n    i.append(qri(649.292, QColor(96,235,155,255), '649.292')) \n    i.append(qri(942.25, QColor(100,246,174,255), '942.25')) \n    i.append(qri(1235.21, QColor(248,251,155,255), '1235.21'))\n    i.append(qri(1528.17, QColor(246,190,39,255), '1528.17')) \n    i.append(qri(1821.13, QColor(242,155,39,255), '1821.13'))\n    i.append(qri(2114.08, QColor(165,84,26,255), '2114.08'))\n    i.append(qri(2300, QColor(236,119,83,255), '2300'))\n    i.append(qri(2700, QColor(203,203,203,255), '2700'))\n    c.setColorRampItemList(i) \n    s.setRasterShaderFunction(c) \n    ps = QgsSingleBandPseudoColorRenderer(dem.dataProvider(), 1, s)\n    ps.setOpacity(0.5) \n    dem.setRenderer(ps)\n\n    ```", "```py\n    QgsMapLayerRegistry.instance().addMapLayers([dem, hs])\n\n    ```", "```py\n    dem.saveNamedStyle(\"/qgis_data/saveqml/dem.qml\")\n\n    ```", "```py\ndem.loadNamedStyle(\"/qgis_data/saveqml/dem.qml\")\n\n```", "```py\n    lyrPth = \"/qgis_data/shapes/NullExample.shp\"\n    lyr = QgsVectorLayer(lyrPth, \"Null Field Example\", \"ogr\")\n    features = lyr.getFeatures()\n    f = features.next()\n\n    ```", "```py\n    value = f[\"SAMPLE\"]\n\n    ```", "```py\n    print \"Check python value type:\"\n    print type(value)\n\n    ```", "```py\n    print \"Check if value is None:\"\n    print value is None\n\n    ```", "```py\n    print \"Check if value == None:\"\n    print value == None\n\n    ```", "```py\n    print \"Check if value == NULL:\"\n    print value == NULL\n\n    ```", "```py\n    print \"Check if value is NULL:\"\n    print value is NULL\n\n    ```", "```py\n    print \"Check type(value) is type(NULL):\"\n    print type(value) is type(NULL)\n\n    ```", "```py\neasy_install \n\n```", "```py\n    from query import query\n\n    ```", "```py\n    pth = \"/Users/joellawhead/qgis_data/ms/MS_UrbanAnC10.shp\"\n    layer = QgsVectorLayer(pth, \"Urban Areas\", \"ogr\")\n\n    ```", "```py\n    q = (query(layer).where(\"POP > 50000\").select('NAME10', \"POP\", \"AREALAND\", \"POPDEN\"))\n\n    ```", "```py\n    q().next()\n\n    ```", "```py\n    import processing\n    from PyQt4.QtGui import *\n    from mmqgis import mmqgis_library as mmqgis\n\n    ```", "```py\n    dir = \"/qgis_data/ms/\"\n    source = dir + \"bear-data.shp\"\n    grid = dir + \"grid.shp\"\n    clipped_grid = dir + \"clipped_grid.shp\"\n    output = dir + \"ms-bear-sightings.shp\"\n\n    ```", "```py\n    layer = QgsVectorLayer(source, \"bear data\", \"ogr\")\n\n    ```", "```py\n    e = layer.extent()\n    llx = e.xMinimum()\n    lly = e.yMinimum()\n    w = e.width()\n    h = e.height()\n\n    ```", "```py\n    mmqgis.mmqgis_grid(iface, grid, .1, .1, w, h, llx, lly, \"Hexagon (polygon)\", False)\n\n    ```", "```py\n    processing.runalg(\"qgis:clip\",grid,source,clipped_grid)\n\n    ```", "```py\n    processing.runalg(\"qgis:joinbylocation\",source,clipped_grid,0,\"sum,mean,min,max,median\",0,0,output)\n\n    ```", "```py\n    bears = QgsVectorLayer(output, \"Bear Sightings\", \"ogr\")\n\n    ```", "```py\n    rules = (\n     ('RARE', '\"BEARS\" < 5', (227,26,28,255), .2),\n     ('UNCOMMON', '\"BEARS\" > 5 AND \"BEARS\" < 15', (227,26,28,255), .4),\n     ('OCCASIONAL', '\"BEARS\" > 14 AND \"BEARS\" < 50', (227,26,28,255), .6),\n     ('FREQUENT', '\"BEARS\" > 50', (227,26,28,255), 1),\n    )\n\n    ```", "```py\n    sym_bears = QgsFillSymbolV2.createSimple({\"outline_color\":\"white\",\"outline_width\":\".26\"}) \n    rend_bears = QgsRuleBasedRendererV2(sym_bears)\n    root_rule = rend_bears.rootRule()\n    for label, exp, color, alpha in rules:\n     # create a clone (i.e. a copy) of the default rule\n    rule = root_rule.children()[0].clone()\n     # set the label, exp and color\n    rule.setLabel(label)\n    rule.setFilterExpression(exp)\n    r,g,b,a = color\n    rule.symbol().setColor(QColor(r,g,b,a))\n     # set the transparency level\n    rule.symbol().setAlpha(alpha)\n     # append the rule to the list of rules\n    root_rule.appendChild(rule)\n\n    ```", "```py\n    root_rule.removeChildAt(0)\n\n    ```", "```py\n    bears.setRendererV2(rend_bears)\n\n    ```", "```py\n    QgsMapLayerRegistry.instance().addMapLayer(bears)\n\n    ```", "```py\n__geo_interface__ method.\n```", "```py\n    import json\n\n    ```", "```py\n    def mapping_feature(feature):\n    geom = feature.geometry()\n     properties = {}\n     fields = [field.name() for field in feature.fields()]\n     properties = dict(zip(fields, feature.attributes()))\n     return { 'type' : 'Feature',\n     'properties' : properties,\n     'geometry' : geom.__geo_interface__}\n\n    ```", "```py\n    def mapping_geometry(geometry):\n    geo = geometry.exportToGeoJSON()\n    return json.loads(geo)\n\n    ```", "```py\n    QgsFeature.__geo_interface__ = property(lambda self: mapping_feature(self))\n    QgsGeometry.__geo_interface__ = property(lambda self: mapping_geometry(self))\n\n    ```", "```py\n    import processing\n\n    ```", "```py\n    line = QgsVectorLayer(\"/qgis_data/shapes/path.shp\", \"Line\", \"ogr\")\n    QgsMapLayerRegistry.instance().addMapLayer(line)\n\n    ```", "```py\n    processing.runandload(\"grass:v.to.points\",line,\"1000\",False, False,True,\"435727.015026,458285.819185,5566442.32879,5591754.78979\",-1,0.0001,0,None)\n\n    ```", "```py\n    processing.runandload(\"qgis:randompointsinextent\",\"435727.015026,458285.819185,5566442.32879,5591754.78979\",100,100,None)\n\n    ```", "```py\n    pth = \"/Users/joellawhead/qgis_data/ms/MS_UrbanAnC10.shp\"\n\n    ```", "```py\n    lyr = QgsVectorLayer(pth, \"Urban Areas\", \"ogr\")\n\n    ```", "```py\n    palyr = QgsPalLayerSettings()\n    palyr.readFromLayer(lyr)\n\n    ```", "```py\n    palyr.fieldName = 'CASE WHEN \"POP\" > 50000 THEN NAME10 END'\n\n    ```", "```py\n    palyr.enabled = True\n\n    ```", "```py\n    palyr.writeToLayer(lyr)\n    QgsMapLayerRegistry.instance().addMapLayer(lyr)\n\n    ```", "```py\n    from PyQt4.QtCore import *\n    from PyQt4.QtGui import *\n\n    ```", "```py\n    popFld = None\n    dynamicDialog = None\n\n    ```", "```py\n    def dynamicForm(dialog,lyrId,featId):\n     globaldynamicDialog\n     dynamicDialog = dialog\n     globalpopFld = dialog.findChild(QLineEdit,\"POP\")\n     buttonBox=\\\n     dialog.findChild(QDialogButtonBox,\"buttonBox\")\n\n    ```", "```py\n    buttonBox.accepted.disconnect(dynamicDialog.accept)\n\n    ```", "```py\n    buttonBox.accepted.connect(validate)\n    buttonBox.rejected.connect(dynamicDialog.reject)\n\n    ```", "```py\n    def validate():\n    if not float(popFld.text()) > 0:\n     msg = QMessageBox(f)\n     msg.setText(\"Population must be \\ \n     greater than zero.\")\n     msg.exec_()\n     else:\n     dynamicDialog.accept()\n\n    ```", "```py\n    validate.dynamicForm\n\n    ```", "```py\n    pth = \"/Users/joellawhead/qgis_data/ms/ms_rails_mstm.shp\"\n\n    ```", "```py\n    lyr = QgsVectorLayer(pth, \"Railroads\", \"ogr\")\n\n    ```", "```py\n    total = 0\n\n    ```", "```py\n    for f in lyr.getFeatures():\n     geom = f.geometry()\n     total += geom.length()\n\n    ```", "```py\n    print \"%0.2f total kilometers of rails.\" % (total / 1000)\n\n    ```", "```py\n    from PyQt4.QtCore import *\n\n    ```", "```py\n    pth = \"/qgis_data/ms/MSCities_Geo_Pts.shp\"\n    lyr = QgsVectorLayer(pth, \"Cities\", \"ogr\")\n\n    ```", "```py\n    QgsMapLayerRegistry.instance().addMapLayer(lyr)\n\n    ```", "```py\n    msg = \"Alternate CRS ( x: %s, y: %s )\"\n\n    ```", "```py\n    iface.mainWindow().statusBar().showMessage(msg % (\"--\", \"--\"))\n\n    ```", "```py\n    def listen_xyCoordinates(point):\n     crsSrc = iface.mapCanvas().mapRenderer().destinationCrs()\n     crsDest = QgsCoordinateReferenceSystem(3815) \n     xform = QgsCoordinateTransform(crsSrc, crsDest)\n     xpoint = xform.transform(point)\n     iface.mainWindow().statusBar().showMessage(msg % (xpoint.x(), xpoint.y()))\n\n    ```", "```py\n    QObject.connect(iface.mapCanvas(), SIGNAL(\"xyCoordinates(const QgsPoint &)\"), listen_xyCoordinates)\n\n    ```", "```py\n    from qgis.utils import qgsfunction\n    from qgis.core import QGis\n    import urllib \n\n    ```", "```py\n    @qgsfunction(0, \"Python\")\n\n    ```", "```py\n    def googleStreetView(values, feature, parent):\n    x,y = feature.geometry().asPoint()\n    baseurl = \"https://maps.googleapis.com/maps/api/streetview?\"\n    w = 400\n    h = 400\n    fov = 90\n    heading = 235\n    pitch = 10\n    params = \"size=%sx%s&\" % (w,h)\n    params += \"location=%s,%s&\" % (y,x)\n    params += \"fov=%s&heading=%s&pitch=%s\" % (fov, heading, pitch) \n    url = baseurl + params\n    tmpdir = \"/qgis_data/tmp/\"\n    img = tmpdir + str(feature.id()) + \".jpg\"\n    urllib.urlretrieve(url, img)\n    return img\n\n    ```", "```py\n    pth = \"/qgis_data/nyc/nyc_museums_geo.shp\"\n    lyr = QgsVectorLayer(pth, \"New York City Museums\", \"ogr\")\n\n    ```", "```py\n    lyr.setDisplayField('<img src=\"img/[% $googleStreetView %]\"/>')\n\n    ```", "```py\n    QgsMapLayerRegistry.instance().addMapLayer(lyr)\n\n    ```", "```py\nQgsExpression.unregisterFunction(\"$googleStreetView\")\n\n```", "```py\n    import processing\n\n    ```", "```py\n    lyr = QgsVectorLayer(\"/qgis_data/ms/MSCoast_geo.shp\", \"MS Coast\", \"ogr\")\n\n    ```", "```py\n    ext = lyr.extent()\n    w =  ext.xMinimum()\n    s =  ext.yMinimum()\n    e =  ext.xMaximum()\n    n =  ext.yMaximum()\n\n    ```", "```py\n    factory = processing.runalg(\"quickosm:queryfactory\",\\\n    \"tourism\",\"\",\"%s,%s,%s,%s\" % (w,e,s,n),\"\",25)\n    q = factory[\"OUTPUT_QUERY\"]\n\n    ```", "```py\n    bbox_query = \"\"\"<bbox-query e=\"%s\" n=\"%s\" s=\"%s\" \\ w=\"%s\"/>\"\"\" % (e,n,s,w)\n    bad_xml = \"\"\"<bbox-query %s,%s,%s,%s/>\"\"\" % (w,e,s,n)\n    good_query = q.replace(bad_xml, bbox_query)\n\n    ```", "```py\n    results = processing.runalg(\"quickosm:queryoverpassapiwithastring\",\\\"http://overpass-api.de/api/\",good_query,\"0,0,0,0\",\"\",None)\n    osm = results[\"OUTPUT_FILE\"]\n\n    ```", "```py\n    poly = \"/qgis_data/ms/tourism_poly.shp\"\n    multiline = \"/qgis_data/ms/tourism_multil.shp\"\n    line = \"/qgis_data/ms/tourism_lines.shp\"\n    points = \"/qgis_data/ms/tourism_points.shp\"\n\n    ```", "```py\n    processing.runalg(\"quickosm:ogrdefault\",osm,\"\",\"\",\"\",\"\",poly,multiline,line,points)\n\n    ```", "```py\n    tourism_points = QgsVectorLayer(points, \"Points of Interest\", \"ogr\")\n\n    ```", "```py\n    QgsMapLayerRegistry.instance().addMapLayers([tourism_points, lyr]\n\n    ```", "```py\n    from PyQt4.QtCore import *\n    from PyQt4.QtGui import *\n    import Qgis2threejs as q23js\n\n    ```", "```py\n    iface.mapCanvas().setCrsTransformEnabled(False)\n    iface.mapCanvas().setMapUnits(0)\n\n    ```", "```py\n    demPth = \"/Users/joellawhead/qgis_data/saveqml/dem.asc\"\n    hillshadePth = \"/Users/joellawhead/qgis_data/saveqml/hillshade.tif\"\n    dem = QgsRasterLayer(demPth, \"DEM\")\n    hillshade = QgsRasterLayer(hillshadePth, \"Hillshade\")\n\n    ```", "```py\n    algorithm = QgsContrastEnhancement.StretchToMinimumMaximum\n    limits = QgsRaster.ContrastEnhancementMinMax\n    dem.setContrastEnhancement(algorithm, limits)\n    s = QgsRasterShader() \n    c = QgsColorRampShader() \n    c.setColorRampType(QgsColorRampShader.INTERPOLATED) \n    i = [] \n    qri = QgsColorRampShader.ColorRampItem\n    i.append(qri(356.334, QColor(63,159,152,255), '356.334')) \n    i.append(qri(649.292, QColor(96,235,155,255), '649.292')) \n    i.append(qri(942.25, QColor(100,246,174,255), '942.25')) \n    i.append(qri(1235.21, QColor(248,251,155,255), '1235.21'))\n    i.append(qri(1528.17, QColor(246,190,39,255), '1528.17')) \n    i.append(qri(1821.13, QColor(242,155,39,255), '1821.13'))\n    i.append(qri(2114.08, QColor(165,84,26,255), '2114.08'))\n    i.append(qri(2300, QColor(236,119,83,255), '2300'))\n    i.append(qri(2700, QColor(203,203,203,255), '2700'))\n    c.setColorRampItemList(i) \n    s.setRasterShaderFunction(c) \n    ps = QgsSingleBandPseudoColorRenderer(dem.dataProvider(), 1,  s)\n    ps.setOpacity(0.5) \n    dem.setRenderer(ps) \n\n    ```", "```py\n    QgsMapLayerRegistry.instance().addMapLayers([dem, hillshade])\n\n    ```", "```py\n    d = q23js.qgis2threejsdialog.Qgis2threejsDialog(iface)\n\n    ```", "```py\n    props = [None,\n     None,\n     {u'spinBox_Roughening': 4,\n    u'checkBox_Surroundings': False,\n    u'horizontalSlider_Resolution': 2,\n    u'lineEdit_Color': u'',\n     'visible': False,\n     'dem_Height': 163,\n    u'checkBox_Frame': False,\n    u'lineEdit_ImageFile': u'',\n    u'spinBox_Size': 5,\n    u'spinBox_sidetransp': 0,\n    u'lineEdit_xmax': u'',\n    u'radioButton_MapCanvas': True,\n     'dem_Width': 173,\n    u'radioButton_Simple': True,\n    u'lineEdit_xmin': u'',\n    u'checkBox_Sides': True,\n    u'comboBox_DEMLayer': dem.id(),\n    u'spinBox_demtransp': 0,\n    u'checkBox_Shading': False,\n    u'lineEdit_ymax': u'',\n    u'lineEdit_ymin': u'',\n    u'spinBox_Height': {5},{},{},{},{}]}\n\n    ```", "```py\n    d.properties = props\n\n    ```", "```py\n    d.ui.lineEdit_OutputFilename.setText('/qgis_data/3D/3d.html')\n\n    ```", "```py\n    def sp(a,b):\n    return\n    d.saveProperties = sp\n\n    ```", "```py\n    d.run()\n\n    ```", "```py\n    from mmqgis import mmqgis_library as mmqgis\n    import webbrowser\n    import os\n\n    ```", "```py\n    pth = \"/Users/joellawhead/qgis_data/continental-us\"\n    lyrName = \"continental-us\"\n    lyr = QgsVectorLayer(pth, lyrName, \"ogr\")\n\n    ```", "```py\n    output = \"/Users/joellawhead/qgis_data/us.kml\"\n\n    ```", "```py\n    nameAttr = \"FIPS_CNTRY\"\n    desc = [\"CNTRY_NAME\",]\n    sep = \"Paragraph\"\n\n    ```", "```py\n    mmqgis.mmqgis_kml_export(iface, lyrName, nameAttr, desc, \\\n    sep, output, False)\n\n    ```", "```py\n    webbrowser.open(\"file://\" + output)\n\n    ```"]