- en: Chapter 6. Creating Custom Geoprocessing Tools
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 6 章：创建自定义地理处理工具
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下食谱：
- en: Creating a custom geoprocessing tool
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义地理处理工具
- en: Creating a Python toolbox
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 Python 工具箱
- en: Introduction
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In addition to accessing the system tools provided by ArcGIS, you can also create
    your own custom tools. These tools work in the same way as system tools and can
    be used in ModelBuilder, a Python window, or standalone Python scripts. Many organizations
    build their own library of tools that perform geoprocessing operations specific
    to their data.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 除了可以访问 ArcGIS 提供的系统工具外，您还可以创建自己的自定义工具。这些工具与系统工具的工作方式相同，可以在 ModelBuilder、Python
    窗口或独立的 Python 脚本中使用。许多组织构建自己的工具库，这些工具库执行特定于其数据的地理处理操作。
- en: Creating a custom geoprocessing tool
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义地理处理工具
- en: Along with being able to execute any of the available tools in your scripts,
    you can also create your own custom tools, which can also be called from a script.
    Custom tools are frequently created to handle geoprocessing tasks that are specific
    to an organization. These tools can be easily shared as well.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 除了能够在脚本中执行任何可用的工具外，您还可以创建自己的自定义工具，这些工具也可以从脚本中调用。自定义工具通常用于处理特定于组织的地理处理任务。这些工具也可以轻松共享。
- en: Getting ready
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this recipe, you will learn how to create custom geoprocessing script tools
    by attaching a Python script to a custom toolbox in ArcToolbox. There are a number
    of advantages of creating a custom script tool. When you take this approach, the
    script becomes a part of the geoprocessing framework, which means that it can
    be run from a model, command line, or another script. Also, the script has access
    to the environment settings and help documentation of ArcMap. Other advantages
    include a nice, easy-to-use user interface and error prevention capabilities.
    Error prevention capabilities that are provided include a dialog box that informs
    the user of certain errors.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，您将学习如何通过在 ArcToolbox 中的自定义工具箱中附加 Python 脚本来创建自定义地理处理脚本工具。创建自定义脚本工具有许多优点。当您采取这种方法时，脚本成为地理处理框架的一部分，这意味着它可以从模型、命令行或另一个脚本中运行。此外，脚本可以访问
    ArcMap 的环境设置和帮助文档。其他优点包括美观、易于使用的用户界面和错误预防功能。提供的错误预防功能包括一个对话框，它会通知用户某些错误。
- en: These custom developed script tools must be added to a custom toolbox that you
    create, because the system toolboxes provided with ArcToolbox are read-only toolboxes,
    and thus can't accept new tools.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这些自定义开发的脚本工具必须添加到您创建的自定义工具箱中，因为 ArcToolbox 提供的系统工具箱是只读工具箱，因此不能接受新工具。
- en: In this recipe, you are going to be provided with a prewritten Python script
    that reads wildfire data from a comma-delimited text file, and writes this information
    to a point feature class called `FireIncidents`. References to these datasets
    have been hardcoded, so you are going to have to alter the script to accept dynamic
    variable inputs. You'll then attach the script to a custom tool in ArcToolbox
    to give your end users a visual interface to use the script.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，您将获得一个预先编写的 Python 脚本，该脚本从逗号分隔的文本文件中读取野火数据，并将这些信息写入名为 `FireIncidents`
    的点要素类。对这些数据集的引用是硬编码的，因此您必须修改脚本以接受动态变量输入。然后，您将脚本附加到 ArcToolbox 中的自定义工具，以便您的最终用户可以通过可视界面使用该脚本。
- en: How to do it…
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'The custom Python geoprocessing scripts that you write can be added to ArcToolbox
    inside custom toolboxes. You are not allowed to add your scripts to any of the
    system toolboxes, such as **Analysis** or **Data Management**. However, by creating
    a new custom toolbox, you can add scripts in this way:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 您编写的自定义 Python 地理处理脚本可以添加到自定义工具箱中的 ArcToolbox 中。您不允许将您的脚本添加到任何系统工具箱中，例如 **分析**
    或 **数据管理** 工具箱。然而，通过创建一个新的自定义工具箱，您可以这样添加脚本：
- en: Open ArcMap with an empty map document file and open the ArcToolbox window.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用空地图文档文件打开 ArcMap 并打开 ArcToolbox 窗口。
- en: Right-click anywhere in the white space area of ArcToolbox and select **Add
    Toolbox**.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 ArcToolbox 的空白区域中右键单击，然后选择 **添加工具箱**。
- en: Navigate to the `C:\ArcpyBook\Ch6` folder.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 `C:\ArcpyBook\Ch6` 文件夹。
- en: In the **Add Toolbox** dialog box, click on the new toolbox button. This will
    create a new toolbox with a default name of `Toolbox.tbx`; you will rename the
    toolbox in the next step:![How to do it…](img/B04314_06_1.jpg)
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **添加工具箱** 对话框中，单击新建工具箱按钮。这将创建一个名为 `Toolbox.tbx` 的默认名称的新工具箱；您将在下一步中重命名工具箱：![如何操作…](img/B04314_06_1.jpg)
- en: Name the toolbox `WildfireTools.tbx`:![How to do it…](img/B04314_06_2.jpg)
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将工具箱命名为`WildfireTools.tbx`：![如何操作…](img/B04314_06_2.jpg)
- en: Open the toolbox by selecting `WildfireTools.tbx` and clicking on the **Open**
    button. The toolbox should now be displayed in **ArcToolbox**, as shown in the
    following screenshot:![How to do it…](img/B04314_06_14.jpg)
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过选择`WildfireTools.tbx`并点击**打开**按钮来打开工具箱。现在工具箱应该如以下截图所示显示在**ArcToolbox**中：![如何操作…](img/B04314_06_14.jpg)
- en: Each toolbox should be given a name and an alias. The alias will be used to
    uniquely define your custom tool. Alias names should be kept short and should
    not include any special characters. Right-click on the new toolbox and select
    **Properties**. Add an alias of `wildfire`, as shown in the following screenshot:![How
    to do it…](img/B04314_06_15.jpg)
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个工具箱都应该有一个名称和一个别名。别名将用于唯一地定义您的自定义工具。别名名称应保持简短，不应包含任何特殊字符。右键单击新工具箱并选择**属性**。添加一个别名为`wildfire`，如以下截图所示：![如何操作…](img/B04314_06_15.jpg)
- en: Note
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can optionally create a new toolset inside this toolbox by right-clicking
    on the toolbox and navigating to **New** | **Toolset**. Toolsets allow you to
    functionally group your scripts. In this example, it won't be necessary to do
    this, but if you need to group your scripts in the future, then this is how you
    can accomplish it.
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以选择在这个工具箱内部创建一个新的工具集，通过右键单击工具箱并导航到**新建** | **工具集**。工具集允许您按功能分组您的脚本。在这个例子中，这样做可能不是必要的，但如果您将来需要分组您的脚本，那么这就是您如何实现它的方法。
- en: In this next step, we will alter an existing Python script called `InsertWildfires.py`
    to accept dynamic inputs that will be provided by the user of the tool through
    the ArcToolbox interface. Open `c:\ArcpyBook\Ch6\InsertWildfires.py` in IDLE.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一步中，我们将修改一个名为`InsertWildfires.py`的现有Python脚本，使其能够接受用户通过ArcToolbox界面提供的动态输入。在IDLE中打开`c:\ArcpyBook\Ch6\InsertWildfires.py`。
- en: 'Notice that we have hardcoded the path to our workspace as well as the comma-delimited
    text file containing the wildland fire incidents:'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，我们已经将工作空间的路径以及包含野火事件的逗号分隔文本文件的路径硬编码：
- en: '[PRE0]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Delete the preceding two lines of code.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除前面的两行代码。
- en: 'In addition to this, we have also hardcoded the name of the output feature
    class:'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此外，我们还硬编码了输出要素类的名称：
- en: '[PRE1]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This hardcoding limits the usefulness of our script. If the datasets move or
    are deleted, the script will no longer run. Additionally, the script lacks the
    flexibility to specify different input and output datasets. In the next step,
    we will remove this hardcoding and replace it with the ability to accept dynamic
    input.
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这种硬编码限制了脚本的有用性。如果数据集移动或被删除，脚本将无法运行。此外，脚本缺乏指定不同输入和输出数据集的灵活性。在下一步中，我们将移除这种硬编码，并替换为接受动态输入的能力。
- en: 'We will use the `GetParameterAsText()` function found in `arcpy` to accept
    dynamic input from the user. Add the following lines of code to the try block,
    so that your code appears as follows:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用`arcpy`中的`GetParameterAsText()`函数来接受用户的动态输入。将以下代码行添加到try块中，使您的代码如下所示：
- en: '[PRE2]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Notice that we call the `CreateFeatureClass` tool, found in the **Data Management
    Tools** toolbox, passing the `outputFC` variable along with the template feature
    class (`fClassTemplate`). This tool will create the empty feature class containing
    the output feature class defined by the user.
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意我们调用了位于**数据管理工具**工具箱中的`CreateFeatureClass`工具，并将`outputFC`变量以及模板要素类（`fClassTemplate`）传递给它。此工具将创建一个包含用户定义的输出要素类的空要素类。
- en: 'You will also need to alter the line of code that creates an `InsertCursor`
    object. Change the line as follows:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还需要修改创建`InsertCursor`对象的代码行。按照以下方式更改该行：
- en: '[PRE3]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The entire script should appear as follows:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 整个脚本应如下所示：
- en: '[PRE4]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You can check your work by examining the `c:\ArcpyBook\code\Ch6\InsertWildfires.py`
    solution file.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过检查`c:\ArcpyBook\code\Ch6\InsertWildfires.py`解决方案文件来检查您的工作。
- en: In the next step, we will add the script that we just created to the **Wildfire
    Tools** toolbox as a script tool.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一步中，我们将把刚刚创建的脚本添加到**Wildfire Tools**工具箱中作为一个脚本工具。
- en: In ArcToolbox, right-click on the **Wildfire Tools** custom toolbox that you
    created earlier and navigate to **Add** | **Script**. This will display the **Add
    Script** dialog, as shown in the following screenshot. Give your script a name,
    label, and description. The **Name:** field can not contain any spaces or special
    characters. The **Label:** field is the name that shows up next to the script.
    For this example, give it a label of `Load Wildfires From Text`. Finally, add
    some descriptive information that details the operations that the script will
    perform.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在ArcToolbox中，右键单击您之前创建的**Wildfire Tools**自定义工具箱，然后导航到**添加** | **脚本**。这将显示**添加脚本**对话框，如下截图所示。为您的脚本提供一个名称、标签和描述。**名称**字段不能包含任何空格或特殊字符。**标签**字段是显示在脚本旁边的名称。对于本例，给它一个标签为`从文本加载野火`。最后，添加一些描述性信息，详细说明脚本将执行的操作。
- en: The details relating to **Name:**, **Label:**, and **Description:** are shown
    in the following screenshot:![How to do it…](img/B04314_06_29.jpg)
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与**名称**、**标签**和**描述**相关的详细信息如下截图所示：![如何操作…](img/B04314_06_29.jpg)
- en: Click on **Next** to display the next input dialog box for **Add Script**.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步**以显示**添加脚本**的下一个输入对话框。
- en: In this dialog box, you will specify the script that will be attached to the
    tool. Navigate to `c:\ArcpyBook\Ch6\InsertWildfires.py` and add `InsertWildfires.py`
    as the script.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此对话框中，您将指定要附加到工具的脚本。导航到`c:\ArcpyBook\Ch6\InsertWildfires.py`并将`InsertWildfires.py`作为脚本添加。
- en: You will also want to make sure that the **Run Python script in process** checkbox
    is selected, as shown in the following screenshot. Running a Python script *in
    process*. increases the performance of your script.![How to do it…](img/B04314_06_10.jpg)
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还希望确保选中了**在进程中运行Python脚本**复选框，如下截图所示。在进程中运行Python脚本可以增加脚本的性能。![如何操作…](img/B04314_06_10.jpg)
- en: Note
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Running a script out of process requires ArcGIS to create a separate process
    to execute the script. The time it takes to start this process and execute the
    script leads to performance problems. Always run your scripts in process. Running
    a script in process means that ArcGIS does not have to spawn a second process
    to run the script. It runs in the same process space as ArcGIS.
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在进程外运行脚本需要ArcGIS创建一个单独的进程来执行脚本。启动此过程并执行脚本所需的时间会导致性能问题。始终在进程中运行您的脚本。在进程中运行脚本意味着ArcGIS不需要生成第二个进程来运行脚本。它将在与ArcGIS相同的进程空间中运行。
- en: Click on **Next** to display the parameter window, as shown in the following
    screenshot:![How to do it…](img/B04314_06_3.jpg)
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步**以显示参数窗口，如下截图所示：![如何操作…](img/B04314_06_3.jpg)
- en: 'Each parameter that you enter in this dialog box corresponds to a single call
    to `GetParameterAsText()`. Earlier, you altered your script to accept dynamic
    parameters through the `GetParameterAsText()` method. The parameters should be
    entered in this dialog box in the same order that your script expects to receive
    them. For instance, you inserted the following line of code in your code:'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您在此对话框中输入的每个参数都对应于对`GetParameterAsText()`的单次调用。之前，您通过`GetParameterAsText()`方法修改了您的脚本以接受动态参数。参数应按脚本期望接收它们的顺序输入此对话框。例如，您在代码中插入以下行：
- en: '[PRE5]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The first parameter that you add to the dialog box will need to correspond to
    this line. In our code, this parameter represents the feature class that will
    be created as a result of this script. You add parameters by clicking on the first
    available row under **Display Name**. You can enter any text in this row. This
    text will be displayed to the user. You will also need to select a corresponding
    data type for the parameter. In this case, Data Type should be set to **Feature
    Class**, since this is the expected data that will be gathered from the user.
    Each parameter also has a number of properties that can be set. Some of the more
    important properties include **Type**, **Direction**, and **Default**.
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加到对话框中的第一个参数需要与此行相对应。在我们的代码中，此参数代表此脚本创建的特征类。您可以通过点击**显示名称**下第一行的第一个可用行来添加参数。您可以在该行中输入任何文本。此文本将显示给用户。您还需要为参数选择一个对应的数据类型。在这种情况下，数据类型应设置为**特征类**，因为这是从用户那里收集的预期数据。每个参数还可以设置一些属性。一些更重要的属性包括**类型**、**方向**和**默认值**。
- en: Enter the information, as shown in the following screenshot, into your dialog
    box, for the output feature class. Make sure that you set **Direction** to `Output`:![How
    to do it…](img/B04314_06_4.jpg)
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下信息，如以下屏幕截图所示，输入到你的对话框中，用于输出要素类。确保将**方向**设置为`Output`：![如何操作…](img/B04314_06_4.jpg)
- en: Next, we need to add a parameter that defines the feature class that will be
    used as the attribute template for our new feature class. Enter the following
    information in your dialog box:![How to do it…](img/B04314_06_11.jpg)
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要添加一个参数，用于定义将用作我们新要素类属性模板的要素类。在对话框中输入以下信息：![如何操作…](img/B04314_06_11.jpg)
- en: Finally, we need to add a parameter that will be used to specify the comma-delimited
    text file that will be used as an input in the creation of our new feature class.
    Enter the following information into your dialog box:![How to do it…](img/B04314_06_12.jpg)
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要添加一个参数，用于指定在创建我们的新要素类时用作输入的逗号分隔的文本文件。将以下信息输入到你的对话框中：![如何操作…](img/B04314_06_12.jpg)
- en: Click on **Finish**. The new script tool will be added to your **Wildfire Tools**
    toolbox, as shown in the following screenshot:![How to do it…](img/B04314_06_5.jpg)
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**完成**。新的脚本工具将被添加到你的**Wildfire Tools**工具箱中，如下一个屏幕截图所示：![如何操作…](img/B04314_06_5.jpg)
- en: Now, we'll test the tool to make sure it works. Double-click on the script tool
    to display the dialog box, as shown in the following screenshot:![How to do it…](img/B04314_06_6.jpg)
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将测试这个工具以确保它正常工作。双击脚本工具以显示如下所示的对话框：![如何操作…](img/B04314_06_6.jpg)
- en: Define a new output feature class, which should be loaded inside the existing
    `WildlandFires.mdb` personal geodatabase, as shown in the next screenshot. Click
    on the open folder icon and navigate to the `WildlandFires.mdb` personal geodatabase,
    which should be located in `c:\ArcpyBook\data\Wildfires`.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个新的输出要素类，它应该加载到现有的`WildlandFires.mdb`个人地理数据库中，如下一个屏幕截图所示。点击打开文件夹图标，导航到`WildlandFires.mdb`个人地理数据库，它应该位于`c:\ArcpyBook\data\Wildfires`。
- en: You will also need to give your new feature class a name. In this case, we'll
    name the feature class `TodaysWildfires`, but the name can be whatever you'd like.
    In the following screenshot, you can see an example of how this should be done.
    Click on the **Save** button:![How to do it…](img/B04314_06_16.jpg)
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你还需要给你的新要素类起一个名字。在这个例子中，我们将要素类命名为`TodaysWildfires`，但名字可以是任何你想要的。在下面的屏幕截图中，你可以看到一个如何操作的例子。点击**保存**按钮：![如何操作…](img/B04314_06_16.jpg)
- en: For the attribute template, you will want to point to the `FireIncidents` feature
    class that has already been created for you. This feature class contains a field
    called `CONFIDENCEVAL`. This field will be created in our new feature class. Click
    on the **Browse** button, navigate to `c:\ArcpyBook\data\Wildfires\WildlandFires.mdb`,
    and you should see the `FireIncidents` feature class. Select it and click on **Add**.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于属性模板，你需要指向已经为你创建的`FireIncidents`要素类。这个要素类包含一个名为`CONFIDENCEVAL`的字段。这个字段将在我们的新要素类中创建。点击**浏览**按钮，导航到`c:\ArcpyBook\data\Wildfires\WildlandFires.mdb`，你应该能看到`FireIncidents`要素类。选择它并点击**添加**。
- en: Finally, the last parameter needs to point to our comma-delimited text file
    containing wildland fires. This file can be found at `c:\ArcpyBook\data\Wildfires\NorthAmericaWildfires_2007275.txt`.
    Click on the **Browse** button and navigate to `c:\ArcpyBook\data\Wildfires`.
    Click on `NorthAmericaWildfires_2007275.txt` and click on the **Add** button.
    Your tool should appear as follows:![How to do it…](img/B04314_06_7.jpg)
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，最后一个参数需要指向包含野火信息的逗号分隔的文本文件。此文件位于`c:\ArcpyBook\data\Wildfires\NorthAmericaWildfires_2007275.txt`。点击**浏览**按钮，导航到`c:\ArcpyBook\data\Wildfires`。点击`NorthAmericaWildfires_2007275.txt`，然后点击**添加**按钮。你的工具应该如下所示：![如何操作…](img/B04314_06_7.jpg)
- en: Click on **OK** to execute the tool. Any messages will be written to the dialog
    box shown in the following screenshot. This is a standard dialog box for any geoprocessing
    tool.![How to do it…](img/B04314_06_8.jpg)
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**确定**以执行工具。任何消息都将写入如下所示的对话框。这是任何地理处理工具的标准对话框。![如何操作…](img/B04314_06_8.jpg)
- en: If everything is set up correctly, you should see the following screenshot,
    which shows that a new feature class will be added to the ArcMap display:![How
    to do it…](img/B04314_06_9.jpg)
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一切设置正确，你应该会看到下面的屏幕截图，显示一个新的要素类将被添加到ArcMap显示中：![如何操作…](img/B04314_06_9.jpg)
- en: In ArcMap, select **add basemap** and then choose the Topographic `basemap`.
    Click on the **Add** button to add the `basemap` layer.![How to do it…](img/B04314_06_25.jpg)
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 ArcMap 中，选择**添加底图**，然后选择地形**底图**。点击**添加**按钮以添加**底图**图层。![如何操作…](img/B04314_06_25.jpg)
- en: This will provide a reference for the data that you have just imported, as seen
    in the preceding screenshot.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为您刚刚导入的数据提供参考，如前一个截图所示。
- en: How it works…
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Almost all script tools have parameters, and the values are set for the tool
    dialog box. When the tool is executed, the parameter values are sent to your script.
    Your script reads these values and then proceeds with its work. Python scripts
    can accept parameters as input. Parameters, also known as arguments, allow your
    scripts to become dynamic. Up to this point, all of our scripts have used hardcoded
    values. By specifying input parameters for a script, you are able to supply the
    name of the feature class at runtime. This capability makes your scripts more
    versatile.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎所有的脚本工具都有参数，这些值是为工具对话框设置的。当工具执行时，参数值会发送到您的脚本。您的脚本读取这些值，然后继续其工作。Python 脚本可以接受参数作为输入。参数，也称为参数，使您的脚本变得动态。到目前为止，我们所有的脚本都使用了硬编码的值。通过为脚本指定输入参数，您可以在运行时提供要素类的名称。这种能力使您的脚本更加灵活。
- en: The `GetParameterAsText()` method, which is used to capture parameter input,
    is zero-based with the first parameter entered occupying a `0` index and each
    successive parameter is incremented by `1`. The output feature class that will
    be created by reading the comma-delimited text file is specified in the `outputFC`
    variable, which is retrieved by `GetParameterAsText(0)`. With `GetParameterAsText(1)`,
    we capture a feature class that will act as a template for the output feature
    class attribute schema. The attribute fields in the template feature class are
    used to define the fields that will populate our output feature class. Finally,
    `GetParameterAsText(2)` is used to create a variable called `f`, which will hold
    the comma-delimited text file that will be read.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`GetParameterAsText()` 方法用于捕获参数输入，它是基于零的，第一个输入的参数占据 `0` 索引，每个后续参数增加 `1`。通过读取逗号分隔的文本文件创建的输出要素类由
    `outputFC` 变量指定，该变量通过 `GetParameterAsText(0)` 获取。使用 `GetParameterAsText(1)`，我们捕获一个将作为输出要素类属性模式的模板的要素类。模板要素类中的属性字段用于定义将填充我们的输出要素类的字段。最后，`GetParameterAsText(2)`
    用于创建一个名为 `f` 的变量，该变量将保存要读取的逗号分隔的文本文件。'
- en: There's more...
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The `arcpy.GetParameterAsText()` method is not the only way to capture information
    passed into your script. When you call a Python script from the command line,
    you can pass in a set of arguments. When passing arguments to a script, each word
    must be separated by a space. These words are stored in a zero-based list object
    called `sys.argv`. With `sys.argv`, the first item in the list, referenced by
    the `0` index, stores the name of the script. Each successive word is referenced
    by the next integer. Therefore, the first parameter will be stored in `sys.argv[1]`,
    the second in `sys.argv[2]`, and so on. These arguments can then be accessed from
    within your script.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`arcpy.GetParameterAsText()` 方法并不是捕获传递到您的脚本中的信息的唯一方式。当您从命令行调用 Python 脚本时，您可以传递一组参数。当向脚本传递参数时，每个单词必须由一个空格分隔。这些单词存储在一个名为
    `sys.argv` 的零基于列表对象中。使用 `sys.argv`，列表中的第一个项目，通过 `0` 索引引用，存储脚本的名称。每个后续的单词通过下一个整数引用。因此，第一个参数将存储在
    `sys.argv[1]` 中，第二个在 `sys.argv[2]` 中，依此类推。然后可以从脚本内部访问这些参数。'
- en: It is recommended that you use the `GetParameterAsText()` function rather than
    `sys.argv`, because `GetParameterAsText()` does not have a character limit, whereas
    `sys.argv` has a limit of 1,024 characters per parameter. In either case, once
    the parameters have been read into the script, your script can continue execution
    using the input values.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 建议您使用 `GetParameterAsText()` 函数而不是 `sys.argv`，因为 `GetParameterAsText()` 没有字符限制，而
    `sys.argv` 每个参数有 1,024 个字符的限制。在任何情况下，一旦参数被读入脚本，您的脚本就可以使用输入值继续执行。
- en: Creating a Python toolbox
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 Python 工具箱
- en: 'There are two ways to create toolboxes in ArcGIS: script tools in custom toolboxes
    that we covered in the last recipe, and script tools in Python toolboxes. Python
    toolboxes were introduced in version 10.1 of ArcGIS and they encapsulate everything
    in one place: parameters, validation code, and source code. This is not the case
    with custom toolboxes, which are created using a wizard and a separate script
    that processes business logic.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ArcGIS 中创建工具箱有两种方式：在自定义工具箱中的脚本工具，这是我们上一道菜谱中提到的，以及在 Python 工具箱中的脚本工具。Python
    工具箱是在 ArcGIS 10.1 版本中引入的，它将所有内容封装在一个地方：参数、验证代码和源代码。这与使用向导和单独处理业务逻辑的脚本创建的自定义工具箱不同。
- en: Getting ready
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: A **Python Toolbox** is similar to any other toolbox in **ArcToolbox**, but
    it is created entirely in Python and has a file extension of `.pyt`. It is created
    programmatically as a class named `Toolbox`. In this recipe, you will learn how
    to create a **Python Toolbox** and add a custom tool. After creating the basic
    structure of `Toolbox` and `Tool`, you'll complete the functionality of the tool
    by adding code that connects to an **ArcGIS Server** map service, downloads real-time
    data, and inserts it into a feature class.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**Python 工具箱**类似于 **ArcToolbox** 中的任何其他工具箱，但它完全由 Python 创建，并具有 `.pyt` 文件扩展名。它通过名为
    `Toolbox` 的类以编程方式创建。在本菜谱中，您将学习如何创建 **Python 工具箱** 并添加自定义工具。在完成 `Toolbox` 和 `Tool`
    的基本结构后，您将通过添加连接到 **ArcGIS Server** 地图服务、下载实时数据并将其插入要素类的代码来完成工具的功能。'
- en: How to do it…
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Complete these steps to create a **Python Toolbox** and create a custom tool
    that connects to an **ArcGIS Server** map service, downloads real-time data, and
    inserts it into a feature class:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 完成以下步骤以创建 **Python 工具箱** 并创建一个连接到 **ArcGIS Server** 地图服务、下载实时数据并将其插入要素类的自定义工具：
- en: Open **ArcCatalog**. You can create a python toolbox in a folder by right-clicking
    on the folder and selecting **New** | **Python Toolbox**. In ArcCatalog, there
    is a folder called **Toolboxes** and inside it is a **My Toolboxes** folder, as
    seen in this screenshot:![How to do it…](img/B04314_06_17.jpg)
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**ArcCatalog**。您可以通过在文件夹上右键单击并选择**新建** | **Python 工具箱**来在文件夹中创建一个 Python 工具箱。在
    ArcCatalog 中，有一个名为 **Toolboxes** 的文件夹，其中包含一个 **My Toolboxes** 文件夹，如图所示：![如何操作…](img/B04314_06_17.jpg)
- en: Right-click on this folder and select **New** | **Python Toolbox**.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击此文件夹并选择 **新建** | **Python 工具箱**。
- en: The name of the toolbox is controlled by the file name. Name the toolbox `InsertWildfires.pyt`:![How
    to do it…](img/B04314_06_18.jpg)
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 工具箱的名称由文件名控制。将工具箱命名为 `InsertWildfires.pyt`：![如何操作…](img/B04314_06_18.jpg)
- en: The **Python Toolbox** file (`.pyt`) can be edited in any text or code editor.
    By default, the code will open in **Notepad**. You can change this by setting
    the default editor for your script by going to **Geoprocessing** | **Geoprocessing
    Options** and going to the **Editor** section. You'll notice in the following
    screenshot that I have set my editor to **PyScripter**, which is my preferred
    environment. You may want to change this to **IDLE** or whatever development environment
    you are currently using. Please note that this step is not required though. As
    mentioned, by default, it will open your code in Notepad.![How to do it…](img/B04314_06_19.jpg)
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Python 工具箱**文件（`.pyt`）可以在任何文本或代码编辑器中编辑。默认情况下，代码将在 **记事本** 中打开。您可以通过转到 **地理处理**
    | **地理处理选项** 并进入 **编辑器** 部分来设置脚本的默认编辑器。您会注意到在下图中，我已经将我的编辑器设置为 **PyScripter**，这是我首选的环境。您可能希望将其更改为
    **IDLE** 或您目前正在使用的任何开发环境。请注意，此步骤不是必需的。如前所述，默认情况下，它将在记事本中打开您的代码。![如何操作…](img/B04314_06_19.jpg)'
- en: Right-click on `InsertWildfires.pyt` and select **Edit**. This will open your
    development environment. Your development environment will vary depending on the
    editor that you have defined.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击 `InsertWildfires.pyt` 并选择 **编辑**。这将打开您的开发环境。您的开发环境将取决于您定义的编辑器。
- en: 'Remember that you will not be changing the name of the class, which is `Toolbox`.
    However, you will rename the `Tool` class to reflect the name of the tool you
    want to create. Each tool will have various methods, including `__init__()`, which
    is the constructor for the tool along with `getParameterInfo()`, `isLicensed()`,
    `updateParameters()`, `updateMessages()`, and `execute()`. You can use the `__init__()`
    method to set initialization properties, such as the tool''s label and description.
    Look for the `Tool` class and change the name to `USGSDownload`. Also, set the
    label, and description, as seen in this code:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 记住，你不会更改类的名称，该名称是`Toolbox`。然而，你将重命名`Tool`类以反映你想要创建的工具的名称。每个工具都将有各种方法，包括`__init__()`，这是工具的构造函数，以及`getParameterInfo()`、`isLicensed()`、`updateParameters()`、`updateMessages()`和`execute()`。你可以使用`__init__()`方法设置初始化属性，例如工具的标签和描述。查找`Tool`类并将其名称更改为`USGSDownload`。还要设置标签和描述，如下面的代码所示：
- en: '[PRE6]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You can use the `Tool` class as a template for other tools you''d like to add
    to the toolbox by copying and pasting the class and its methods. We''re not going
    to do this in this particular exercise, but I wanted you to be aware of this fact.
    You will need to add each tool to the `tools` property of `Toolbox`. Add the `USGS
    Download` tool, as seen in this code:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以通过复制和粘贴类及其方法，将`Tool`类用作其他你想要添加到工具箱中的工具的模板。我们在这个特定的练习中不会这样做，但我希望你知道这个事实。你需要将每个工具添加到`Toolbox`的`tools`属性中。添加`USGS
    Download`工具，如下面的代码所示：
- en: '[PRE7]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: When you close the code editor, your **Toolboxes** should automatically be refreshed.
    You can also manually refresh a toolbox by right-clicking on the toolbox and selecting
    **Refresh**. If a syntax error occurs in your code, the toolbox icon will change,
    as seen in the following screenshot. Note the red **X** next to the toolbox.![How
    to do it…](img/B04314_06_20.jpg)
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你关闭代码编辑器时，你的**工具箱**应该会自动刷新。你也可以通过右键单击工具箱并选择**刷新**来手动刷新工具箱。如果你的代码中发生语法错误，工具箱图标将改变，如下面的截图所示。注意工具箱旁边的红色**X**![如何操作…](img/B04314_06_20.jpg)
- en: You shouldn't have any errors at this time, but if you do, right-click on the
    toolbox and select Check Syntax to display the errors, as seen in the following
    screenshot. Note that if you have an error, it may be different from the following
    example:![How to do it…](img/B04314_06_21.jpg)
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个时候，你不应该有任何错误，但如果有的话，右键单击工具箱并选择检查语法以显示错误，如下面的截图所示。注意，如果你有错误，它可能与以下示例不同：![如何操作…](img/B04314_06_21.jpg)
- en: Assuming that you don't have any syntax errors, you should see the following
    Toolbox/Tool structure:![How to do it…](img/B04314_06_22.jpg)
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设你没有语法错误，你应该看到以下工具箱/工具结构：![如何操作…](img/B04314_06_22.jpg)
- en: Almost all tools have parameters, and you set their values in the tool dialog
    box or within a script. When the tool is executed, the parameter values are sent
    to your tool's source code. Your tool reads these values and proceeds with its
    work. You use the `getParameterInfo()` method to define the parameters for your
    tool. Individual `Parameter` objects are created as part of this process. Add
    the following parameters in the `getParameterInfo()` method and then we'll discuss
    them:![How to do it…](img/B04314_06_26.jpg)
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 几乎所有工具都有参数，你可以在工具对话框或脚本中设置它们的值。当工具执行时，参数值将发送到你的工具源代码。你的工具读取这些值并继续其工作。你使用`getParameterInfo()`方法来定义你的工具的参数。作为这个过程的一部分，创建单个`Parameter`对象。在`getParameterInfo()`方法中添加以下参数，然后我们将讨论它们：![如何操作…](img/B04314_06_26.jpg)
- en: Each `Parameter` object is created using `arcpy.Parameter` and is passed a number
    of arguments that define the object.
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每个`Parameter`对象都是使用`arcpy.Parameter`创建的，并传递了定义对象的一组参数。
- en: For the first `Parameter` object (`param0`), we are going to capture a URL for
    an ArcGIS Server map service containing current wildfire data. We give it a display
    name (ArcGIS Server Wildfire URL), which will be displayed in the dialog box for
    the tool, a name for the parameter, data type, parameter type (this is mandatory),
    and direction.
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于第一个`Parameter`对象（`param0`），我们将捕获一个包含当前野火数据的ArcGIS Server地图服务的URL。我们给它一个显示名称（ArcGIS
    Server Wildfire URL），它将在工具的对话框中显示，一个参数名称，数据类型，参数类型（这是必需的），以及方向。
- en: In the case of the first parameter (`param0`), we also assign an initial value,
    which is the URL for an existing map service containing wildfire data.
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在第一个参数（`param0`）的情况下，我们还分配了一个初始值，即包含野火数据的现有地图服务的URL。
- en: For the second parameter, we define an output feature class where the wildfire
    data that is read from the map service will be written. An empty feature class
    to store the data has already been created for you. Finally, we added both parameters
    to a Python list called `params` and return the list to the calling function
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于第二个参数，我们定义了一个输出要素类，用于将从中读取的野火数据写入。一个空的要素类已为您创建以存储数据。最后，我们将这两个参数添加到一个名为`params`的Python列表中，并将列表返回给调用函数
- en: 'The main work of a tool is done inside the `execute()` method. This is where
    the geoprocessing of your tool takes place. The `execute()` method, seen in the
    following code, can accept a number of arguments, including the tool (self), parameters,
    and messages:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 工具的主要工作是在`execute()`方法中完成的。这是您的工具地理处理发生的地方。在以下代码中看到的`execute()`方法可以接受多个参数，包括工具（self）、参数和消息：
- en: '[PRE8]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'To access the parameter values that are passed into the tool, you can use the
    `valueAsText()` method. Add the following code to access the parameter values
    that will be passed into your tool. Remember, as seen in a previously mentioned
    step, that the first parameter will contain a URL for a map service containing
    wildfire data, and the second parameter is the output feature class where the
    data will be written:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要访问传递给工具的参数值，您可以使用`valueAsText()`方法。将以下代码添加到您的工具中，以访问将要传递给您的工具的参数值。记住，正如之前提到的步骤中所示，第一个参数将包含一个包含野火数据的地图服务的URL，第二个参数是数据将被写入的输出要素类：
- en: '[PRE9]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: At this point, you have created a Python toolbox, added a tool, defined the
    parameters for the tool, and created variables that will hold the parameter values
    that the end user has defined. Ultimately, this tool will use the URL that is
    passed into the tool to connect to an ArcGIS Server map service, download the
    current wildfire data, and write the wildfire data to a feature class. We'll do
    this next.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 到目前为止，您已经创建了一个Python工具箱，添加了一个工具，定义了工具的参数，并创建了将保存最终用户定义的参数值的变量。最终，此工具将使用传递给工具的URL连接到ArcGIS服务器地图服务，下载当前的野火数据，并将野火数据写入要素类。我们将在下一步这样做。
- en: Note that to complete the remainder of this exercise, you will need to install
    the Python `requests` (refer to [http://docs.python-requests.org/en/latest/](http://docs.python-requests.org/en/latest/))
    module using `pip` (refer to [https://pip.pypa.io/en/latest/installing.html](https://pip.pypa.io/en/latest/installing.html)).
    Do this now before proceeding to the next step. Installation instructions for
    both `pip` and `requests` can be found at the links provided.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意，为了完成本练习的剩余部分，您需要使用`pip`安装Python的`requests`模块（请参阅[http://docs.python-requests.org/en/latest/](http://docs.python-requests.org/en/latest/)）。在继续下一步之前，现在就做这件事。`pip`和`requests`的安装说明可以在提供的链接中找到。
- en: 'Next, add the code that connects to the wildfire map service to perform a query.
    In this step, you will also define the `QueryString` parameters that will be passed
    into the query of the map service. First, we''ll import the `requests` and `json`
    modules by adding this code:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，添加连接到野火地图服务以执行查询的代码。在此步骤中，您还将定义传递给地图服务查询的`QueryString`参数。首先，我们将通过添加以下代码来导入`requests`和`json`模块：
- en: '[PRE10]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then, create the payload variable that will hold the `QueryString` parameters.
    Notice that in this case we have defined a `where` clause so that only the fires
    greater than `5` acres in size will be returned. The `inFeatures` variable holds
    the URL:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，创建一个将保存`QueryString`参数的payload变量。请注意，在这种情况下，我们定义了一个`where`子句，以便只返回大于`5`英亩的火灾。`inFeatures`变量包含URL：
- en: '[PRE11]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Submit the request to the ArcGIS Server instance and the response should be
    stored in a variable called `r`. Print a message to the dialog indicating the
    response:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将请求提交给ArcGIS服务器实例，并将响应存储在名为`r`的变量中。向对话框打印一条消息，指示响应：
- en: '[PRE12]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Let's test the code to make sure we're on the right track. Save the file and
    refresh your toolbox in ArcCatalog. Execute the tool and leave the default URL.
    If everything works as expected, you should see a JSON object output of the progress
    dialog. Your output will probably vary somewhat.![How to do it…](img/B04314_06_23.jpg)
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们测试一下代码，以确保我们走在正确的道路上。保存文件并在ArcCatalog中刷新您的工具箱。执行工具并保留默认URL。如果一切按预期工作，您应该会看到一个进度对话框的JSON对象输出。您的输出可能会有所不同。![如何操作…](img/B04314_06_23.jpg)
- en: 'Return to the `execute()` method and convert the JSON object to a Python dictionary:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到`execute()`方法，并将JSON对象转换为Python字典：
- en: '[PRE13]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Create an `InsertCursor` by passing the output feature class defined in the
    tool dialog along with the fields that will be populated. We then start a `for`
    loop that loops through each of the features (wildfires) that have been returned
    from the request to the ArcGIS Server map service. The `decoded` variable is a
    Python dictionary. Inside the `for` loop, we retrieve the fire name, latitude,
    longitude, and acres from the `attributes` dictionary. Finally, we call the `insertRow()`
    method to insert a new row into the feature class along with the fire name and
    acres as attributes. The progress information is written to **Progress Dialog**
    and the counter is updated. The `execute()` method should now appear as follows:![How
    to do it…](img/B04314_06_27.jpg)
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过传递工具对话框中定义的输出要素类以及将要填充的字段来创建一个 `InsertCursor`。然后我们开始一个 `for` 循环，循环遍历从 ArcGIS
    服务器地图服务请求返回的每个要素（野火）。`decoded` 变量是一个 Python 字典。在 `for` 循环内部，我们从 `attributes` 字典中检索火灾名称、纬度、经度和面积。最后，我们调用
    `insertRow()` 方法将新的行插入到要素类中，并将火灾名称和面积作为属性。进度信息被写入到 **进度对话框**，并更新计数器。`execute()`
    方法现在应如下所示：![如何操作…](img/B04314_06_27.jpg)
- en: Save the file and refresh your **Python Toolbox** if needed.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件并在需要时刷新您的 **Python 工具箱**。
- en: You can check your work by examining the `c:\ArcpyBook\code\Ch6\InsertWildfires_PythonToolbox.py`
    solution file.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过检查 `c:\ArcpyBook\code\Ch6\InsertWildfires_PythonToolbox.py` 解决方案文件来验证您的操作。
- en: Double-click on the **USGS Download** tool.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击**USGS 下载**工具。
- en: Leave the default URL and select the **RealTimeFires** feature class in the
    **WildlandFires** geodatabase found in `c:\ArcpyBook\data`. The **RealTimeFires**
    feature class is empty and has fields for `NAME` and `ACRES`.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持默认的 URL 并选择位于 `c:\ArcpyBook\data` 中的 **WildlandFires** 地理数据库中的 **RealTimeFires**
    要素类。**RealTimeFires** 要素类为空，并包含 `NAME` 和 `ACRES` 字段。
- en: Click on **OK** to execute the tool. The number of features written to the feature
    class will vary depending on the current wildfire activity. Most of the time,
    there is at least a little bit of activity, but it is possible (though not likely)
    that there wouldn't be any wildfires in the U.S:![How to do it…](img/B04314_06_24.jpg)
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**确定**以执行工具。写入要素类的要素数量将根据当前的野火活动情况而变化。大多数时候，至少会有一点活动，但不太可能（尽管有可能）在美国没有任何野火：![如何操作…](img/B04314_06_24.jpg)
- en: View the feature class in **ArcMap** to see its features. You may want to add
    a `basemap` layer to provide a reference, as seen in this screenshot:![How to
    do it…](img/B04314_06_28.jpg)
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **ArcMap** 中查看要素类以查看其要素。您可能想添加一个 `basemap` 图层以提供参考，如图中所示：![如何操作…](img/B04314_06_28.jpg)
- en: How it works…
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The newer style ArcGIS Python Toolbox provides a Python-centric way of creating
    your custom script tools. The older style of creating custom script tools in ArcGIS
    for Desktop uses a combination of Python along with a wizard-based approach to
    define various aspects of the tool. The newer approach provides a more straightforward
    method for creating your tools. All the tools that you create are contained within
    a `Toolbox` class that should not be renamed. By default, a single `Tool` class
    will be created inside `Toolbox`. This `Tool` class should be renamed. In this
    recipe, we renamed it `USGSDownload`. Inside the `USGSDownload` class, the `getParameterInfo()`
    and `execute()` methods are present, among others. Using the `getParameterInfo()`
    method, `Parameter` objects can be defined to hold input data. In this tool, we
    defined a `Parameter` to capture a URL for an ArcGIS Server map service containing
    live wildfire data and a second `Parameter` object to reference a local feature
    class to hold the data. Finally, the `execute()` method is triggered when the
    user clicks on the **OK** button in the tool. Parameter information is sent as
    an argument to the `execute()` method in the form of the `parameters` variable.
    Inside this method, a request to obtain the wildfire data from the remove ArcGIS
    Server instance is submitted using the Python `requests` module. The response
    is returned as a `json` object that is converted into a Python dictionary stored
    in a variable called **decoded**. The fire name, latitude, longitude, and acres
    are pulled out of the decoded variable and written to the local feature class
    using an `InsertCursor` object from the `arcpy.da` module. We'll cover the `arcpy.da`
    module in great detail in a later chapter of the book.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 新风格的 ArcGIS Python 工具箱提供了一种以 Python 为中心的创建自定义脚本工具的方法。在 ArcGIS for Desktop 中创建自定义脚本工具的旧方法结合了
    Python 和基于向导的方法来定义工具的各个方面。新方法为创建工具提供了一种更直接的方法。您创建的所有工具都包含在一个名为 `Toolbox` 的类中，该类不应重命名。默认情况下，`Toolbox`
    内将创建一个单独的 `Tool` 类。这个 `Tool` 类应该重命名。在本食谱中，我们将其重命名为 `USGSDownload`。在 `USGSDownload`
    类内部，存在 `getParameterInfo()` 和 `execute()` 方法等。使用 `getParameterInfo()` 方法，可以定义
    `Parameter` 对象来保存输入数据。在这个工具中，我们定义了一个 `Parameter` 来捕获包含实时野火数据的 ArcGIS 服务器地图服务的
    URL，以及一个用于引用本地要素类的第二个 `Parameter` 对象来保存数据。最后，当用户在工具中点击 **OK** 按钮时，将触发 `execute()`
    方法。参数信息以 `parameters` 变量的形式作为参数发送给 `execute()` 方法。在这个方法内部，使用 Python 的 `requests`
    模块提交一个请求以从远程 ArcGIS 服务器实例获取野火数据。响应以 `json` 对象的形式返回，并将其转换为存储在名为 **decoded** 的变量中的
    Python 字典。从解码变量中提取火灾名称、纬度、经度和英亩数，并使用来自 `arcpy.da` 模块的 `InsertCursor` 对象将其写入本地要素类。我们将在本书的后续章节中详细介绍
    `arcpy.da` 模块。
