["```py\ndef normalize(x):\n     eps = 1e-6\n     mu = np.mean(x)\n     std = np.std(x)\n     if std < eps:\n           return np.zeros(shape=x.shape)\n     else:\n           return (x-mu)/std\n```", "```py\n#!/usr/bin/env python3\nimport sys\nimport pandas as pd\nimport numpy as np\ndef main():\n     if len(sys.argv) != 2:\n           print(\"TS\")\n           sys.exit()\n     F = sys.argv[1]\n     ts = pd.read_csv(F, compression='gzip', header = None)\n     ta = ts.to_numpy()\n     ta = ta.reshape(len(ta))\n     taNorm = normalize(ta)\n     print(\"[\", end = ' ')\n     for i in taNorm.tolist():\n           print(\"%.4f\" % i, end = ' ')\n     print(\"]\")\nif __name__ == '__main__':\n     main()\n```", "```py\n$ ./normalize.py ts1.gz\n[ -1.2272 0.9487 -0.1615 -1.0444 -1.3362 1.4861 -1.0620 0.7451 -0.4858 -0.9965 0.0418 1.7273 -1.1343 0.6263 0.3455 0.9238 1.2197 0.3875 -0.0483 -1.7054 1.3272 1.5999 1.4479 -0.4033 0.1525 1.0673 0.7019 -1.0114 0.4473 -0.2815 1.1239 0.7516 -1.3102 -0.6428 -0.3186 -0.3670 -1.6163 -1.2383 0.5692 1.2341 -0.0372 1.3250 -0.9227 0.2945 -0.5290 -0.3187 1.4103 -1.3385 -1.1540 -1.2135 ]\n```", "```py\n#!/usr/bin/env python3\nimport sys\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef main():\n     if len(sys.argv) != 2:\n           print(\"TS\")\n           sys.exit()\n     F = sys.argv[1]\n     ts = pd.read_csv(F, compression='gzip', header = None)\n     ta = ts.to_numpy()\n     ta = ta.reshape(len(ta))\n     # Find its normalized version\n     taNorm = normalize(ta)\n     plt.plot(ta, label=\"Regular\", linestyle='-', markevery=10, marker='o')\n     plt.plot(taNorm, label=\"Normalized\", linestyle='-.', markevery=10, marker='o')\n     plt.xlabel('Time Series', fontsize=14)\n     plt.ylabel('Values', fontsize=14)\n     plt.legend()\n     plt.grid()\n     plt.savefig(\"CH02_01.png\", dpi=300, format='png', bbox_inches='tight')\nif __name__ == '__main__':\n     main()\n```", "```py\n$ head -7 SAXalphabet\n0\n-0.43073,0.43073\n-0.67449,0,0.67449\n-0.84162,-0.25335,0.25335,0.84162\n-0.96742,-0.43073,0,0.43073,0.96742\n-1.0676,-0.56595,-0.18001,0.18001,0.56595,1.0676\n-1.1503,-0.67449,-0.31864,0,0.31864,0.67449,1.1503\n```", "```py\n#!/usr/bin/env python3\nimport sys\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport os\nbreakpointsFile = \"./sax/SAXalphabet\"\ndef main():\n     if len(sys.argv) != 3:\n           print(\"cardinality output\")\n           sys.exit()\n     n = int(sys.argv[1]) - 1\n     output = sys.argv[2]\n     path = os.path.dirname(__file__)\n     file_variable = open(path + \"/\" + breakpointsFile)\n     alphabet = file_variable.readlines()\n     myLine = alphabet[n - 1].rstrip()\n     elements = myLine.split(',')\n     lines = [eval(i) for i in elements]\n     minValue = min(lines) - 1\n     maxValue = max(lines) + 1\n     fig, ax = plt.subplots()\n     for i in lines:\n           plt.axhline(y=i, color='r', linestyle='-.', linewidth=2)\n     xLabel = \"Cardinality \" + str(n)\n     ax.set_ylim(minValue, maxValue)\n     ax.set_xlabel(xLabel, fontsize=14)\n     ax.set_ylabel('Breakpoints', fontsize=14)\n     ax.grid()\n     fig.savefig(output, dpi=300, format='png', bbox_inches='tight')\nif __name__ == '__main__':\n     main()\n```", "```py\n{-1, 2, 3, 4, 5, -1, -3, 4, 10, 11, . . .}\n```", "```py\n$ ./normalize.py s1.txt.gz\n[ -1.6036 0.0000 0.5345 1.0690 ]\n$ ./normalize.py s2.txt.gz\n[ -1.3416 -0.4472 0.4472 1.3416 ]\n```", "```py\n$ ./normalize.py T1.txt.gz\n[ -0.9595 0.1371 0.5026 0.8681 1.2337 -0.9595 -1.6906 0.8681 ]\n$ ./normalize.py T2.txt.gz\n[ -0.2722 0.0000 0.2722 0.5443 -1.0887 -1.6330 0.2722 1.9052 ]\n```", "```py\n$ tree sax\nsax\n├── SAXalphabet\n├── __init__.py\n├── __pycache__\n│   __init__.cpython-310.pyc\n│   sax.cpython-310.pyc\n│   tools.cpython-310.pyc\n│   variables.cpython-310.pyc\n├── sax.py\n├── tools.py\n└── variables.py\n2 directories, 9 files\n```", "```py\nimport numpy as np\nfrom scipy.stats import norm\nfrom sax import tools\nimport sys\nsys.path.insert(0,'..')\ndef normalize(x):\n     eps = 1e-6\n     mu = np.mean(x)\n     std = np.std(x)\n     if std < eps:\n           return np.zeros(shape=x.shape)\n     else:\n           return (x-mu)/std\n```", "```py\ndef createPAA(ts, cardinality, segments):\n     SAXword = \"\"\n     ts_norm = normalize(ts)\n     segment_size = len(ts_norm) // segments\n     mValue = 0\n     for I in range(segments):\n           ts_segment = ts_norm[segment_size * i :(i+1) * segment_size]\n           mValue = meanValue(ts_segment)\n           index = getIndex(mValue, cardinality)\n           SAXword += str(index) +\"\"\"\"\n```", "```py\ndef meanValue(ts_segment):\n     sum = 0\n     for i in range(len(ts_segment)):\n           sum += ts_segment[i]\n     mean_value = sum / len(ts_segment)\n     return mean_value\n```", "```py\ndef getIndex(mValue, cardinality):\n     index = 0\n     # With cardinality we get cardinality + 1\n     bPoints = tools.breakpoints(cardinality-1)\n     while mValue < float(bPoints[index]):\n           if index == len(bPoints)–- 1:\n                 # This means that index should be advanced\n                 # before breaking out of the while loop\n                 index += 1\n                 break\n           else:\n                 index += 1\n     digits = tools.power_of_two(cardinality)\n     # Inverse the result\n     inverse_s = \"\"\n     for i in binary_index:\n           if i == '0':\n                 inverse_s += '1'\n           else:\n                 inverse_s += '0'\n     return inverse_s\n```", "```py\n# This file includes all variables for the sax package\nmaximumCardinality = 32\n# Where to find the breakpoints file\n# In this case, in the current directory\nbreakpointsFile =\"\"SAXalphabe\"\"\n# Sliding window size\nslidingWindowSize = 16\n# Segments\nsegments = 0\n# Breakpoints in breakpointsFile\nelements =\"\"\"\n# Floating point precision\nprecision = 5\n```", "```py\nimport os\nimport numpy as np\nimport sys\nfrom sax import variables\nbreakpointsFile = variables.breakpointsFile\nmaxCard = variables.maximumCardinality\n```", "```py\ndef power_of_two(n):\n     power = 1\n     while n/2 != 1:\n           # Not a power of 2\n           if n % 2 == 1:\n                 return -1\n           n = n / 2\n           power += 1\n     return power\n```", "```py\ndef load_sax_alphabet():\n     path = os.path.dirname(__file__)\n     file_variable = open(path +\"\"\"\" + breakpointsFile)\n     variables.elements = file_variable.readlines()\ndef breakpoints(cardinality):\n     if variables.elements ==\"\"\":\n           load_sax_alphabet()\n     myLine = variables.elements[cardinality–- 1].rstrip()\n     elements = myLine.split'''')\n     elements.reverse()\n     return elements\n```", "```py\n#!/usr/bin/env python3\nimport sys\nimport numpy as np\nimport pandas as pd\nfrom sax import sax\ndef main():\n     if len(sys.argv) != 5:\n           print(\"TS1 sliding_window cardinality segments\")\n           sys.exit()\n     file = sys.argv[1]\n     sliding = int(sys.argv[2])\n     cardinality = int(sys.argv[3])\n     segments = int(sys.argv[4])\n     if sliding % segments != 0:\n           print(\"sliding MODULO segments != 0...\")\n           sys.exit()\n     if sliding <= 0:\n           print(\"Sliding value is not allowed:\", sliding)\n           sys.exit()\n     if cardinality <= 0:\n           print(\"Cardinality Value is not allowed:\", cardinality)\n           sys.exit()\n     # Read Sequence as Pandas\n     ts = pd.read_csv(file, names=['values'], compression='gzip')\n     # Convert to NParray\n     ts_numpy = ts.to_numpy()\n     length = len(ts_numpy)\n     PAA_representations = []\n     # Split sequence into subsequences\n     for i in range(length - sliding + 1):\n           t1_temp = ts_numpy[i:i+sliding]\n           # Generate SAX for each subsequence\n           tempSAXword = sax.createPAA(t1_temp, cardinality, segments)\n           SAXword = tempSAXword.split(\"_\")[:-1]\n           print(SAXword, end = ' ')\n           PAA_representations.append(SAXword)\n           print(\"[\", end = ' ')\n           for i in t1_temp.tolist():\n                 for k in i:\n                       print(\"%.2f\" % k, end = ' ')\n           print(\"]\", end = ' ')\n           print(\"[\", end = ' ')\n           for i in sax.normalize(t1_temp).tolist():\n                 for k in i:\n                       print(\"%.2f\" % k, end = ' ')\n           print(\"]\")\nif __name__ == '__main__':\n     main()\n```", "```py\n$ ./ts2PAA.py ts1.gz 8 4 2\n['01', '10'] [ 5.22 23.44 14.14 6.75 4.31 27.94 6.61 21.73 ] [ -0.97 1.10 0.04 -0.80 -1.07 1.61 -0.81 0.90 ]\n['01', '10'] [ 23.44 14.14 6.75 4.31 27.94 6.61 21.73 11.43 ] [ 1.07 -0.05 -0.94 -1.24 1.62 -0.96 0.87 -0.38 ]\n['10', '01'] [ 14.14 6.75 4.31 27.94 6.61 21.73 11.43 7.15 ] [ 0.21 -0.73 -1.05 1.97 -0.75 1.18 -0.14 -0.68 ]\n['01', '10'] [ 6.75 4.31 27.94 6.61 21.73 11.43 7.15 15.85 ] [ -0.76 -1.07 1.93 -0.77 1.14 -0.16 -0.70 0.40 ]\n['01', '10'] [ 4.31 27.94 6.61 21.73 11.43 7.15 15.85 29.96 ] [ -1.22 1.32 -0.97 0.66 -0.45 -0.91 0.02 1.54 ]\n['10', '01'] [ 27.94 6.61 21.73 11.43 7.15 15.85 29.96 6.00 ] [ 1.34 -1.02 0.65 -0.49 -0.96 0.00 1.56 -1.08 ]\n. . .\n```", "```py\n#!/usr/bin/env python3\nimport sys\nimport pandas as pd\nfrom sax import sax\ndef main():\n     if len(sys.argv) != 5:\n           print(\"TS1 sliding_window cardinality segments\")\n           print(\"Suggestion: The window be a power of 2.\")\n           print(\"The cardinality SHOULD be a power of 2.\")\n           sys.exit()\n     file = sys.argv[1]\n     sliding = int(sys.argv[2])\n     cardinality = int(sys.argv[3])\n     segments = int(sys.argv[4])\n     if sliding % segments != 0:\n           print(\"sliding MODULO segments != 0...\")\n           sys.exit()\n     if sliding <= 0:\n           print(\"Sliding value is not allowed:\", sliding)\n           sys.exit()\n     if cardinality <= 0:\n           print(\"Cardinality Value is not allowed:\", cardinality)\n           sys.exit()\n     ts = pd.read_csv(file, names=['values'], compression='gzip')\n     ts_numpy = ts.to_numpy()\n     length = len(ts_numpy)\n     KEYS = {}\n     for i in range(length - sliding + 1):\n           t1_temp = ts_numpy[i:i+sliding]\n           # Generate SAX for each subsequence\n           tempSAXword = sax.createPAA(t1_temp, cardinality, segments)\n           tempSAXword = tempSAXword[:-1]\n           if KEYS.get(tempSAXword) == None:\n                 KEYS[tempSAXword] = 1\n           else:\n                 KEYS[tempSAXword] = KEYS[tempSAXword] + 1\n     for k in KEYS.keys():\n           print(k, \":\", KEYS[k])\nif __name__ == '__main__':\n     main()\n```", "```py\n$ ./counting.py ts1.gz 4 4 2\n10_01 : 18\n11_00 : 8\n01_10 : 14\n00_11 : 7\n```", "```py\n#!/usr/bin/env python3\nimport sys\nimport pandas as pd\nimport tsfresh\ndef main():\n     if len(sys.argv) != 2:\n           print(\"TS\")\n           sys.exit()\n     TS1 = sys.argv[1]\n     ts1Temp = pd.read_csv(TS1, compression='gzip')\n     ta = ts1Temp.to_numpy()\n     ta = ta.reshape(len(ta))\n     # Mean value\n     meanValue = tsfresh.feature_extraction.feature_calculators.mean(ta)\n     print(\"Mean value:\\t\\t\", meanValue)\n     # Standard deviation\n     stdDev = tsfresh.feature_extraction.feature_calculators.standard_deviation(ta)\n     print(\"Standard deviation:\\t\", stdDev)\n     # Skewness\n     skewness = tsfresh.feature_extraction.feature_calculators.skewness(ta)\n     print(\"Skewness:\\t\\t\", skewness)\n     # Kurtosis\n     kurtosis = tsfresh.feature_extraction.feature_calculators.kurtosis(ta)\n     print(\"Kurtosis:\\t\\t\", kurtosis)\nif __name__ == '__main__':\n     main()\n```", "```py\n$ ./using_tsfresh.py ts1.gz\nMean value:  15.706410001204729\nStandard deviation:  8.325017802111901\nSkewness:     0.008971113265160474\nKurtosis:    -1.2750042973761417\n```", "```py\n#!/usr/bin/env python3\nimport sys\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport math\nimport os\nif len(sys.argv) != 2:\n     print(\"TS1\")\n     sys.exit()\nTS1 = sys.argv[1]\nts1Temp = pd.read_csv(TS1, compression='gzip')\nta = ts1Temp.to_numpy()\nta = ta.reshape(len(ta))\nmin = np.min(ta)\nmax = np.max(ta)\nplt.style.use('Solarize_Light2')\nbins = np.linspace(min, max, 2 * abs(math.floor(max) + 1))\nplt.hist([ta], bins, label=[os.path.basename(TS1)])\nplt.legend(loc='upper right')\nplt.show()\n```", "```py\n#!/usr/bin/env python3\nimport sys\nimport pandas as pd\nimport numpy as np\ndef main():\n     if len(sys.argv) != 2:\n           print(\"TS\")\n           sys.exit()\n     F = sys.argv[1]\n     ts = pd.read_csv(F, compression='gzip')\n     ta = ts.to_numpy()\n     ta = ta.reshape(len(ta))\n     per01 = round(np.quantile(ta, .01), 5)\n     per25 = round(np.quantile(ta, .25), 5)\n     per75 = round(np.quantile(ta, .75), 5)\n     print(\"Percentile 1%:\", per01, \"Percentile 25%:\", per25, \"Percentile 75%:\", per75)\nif __name__ == '__main__':\n     main()\n```", "```py\n$ ./percentiles.py ts1.gz\nPercentile 1%: 1.57925 Percentile 25%: 7.15484 Percentile 75%: 23.2298\n```"]