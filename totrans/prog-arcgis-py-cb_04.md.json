["```py\n    import arcpy.mapping as mapping\n    ```", "```py\n    mxd = mapping.MapDocument(\"CURRENT\")\n    ```", "```py\n    for el in mapping.ListLayoutElements(mxd):\n      if el.name != '':\n        print(el.name)\n    ```", "```py\n    import arcpy.mapping as mapping\n    mxd = mapping.MapDocument(\"CURRENT\")\n    for el in mapping.ListLayoutElements(mxd):\n      if el.name != '':\n        print(el.name)\n    ```", "```py\n    Crime_Inset\n    Alternating Scale Bar\n    Legend Test Performance\n    Crime Legend\n    North Arrow\n    Inset_Map\n    Test_Performance\n    Crime\n\n    ```", "```py\n    import arcpy.mapping as mapping\n    ```", "```py\n    mxd = mapping.MapDocument(\"CURRENT\")\n    ```", "```py\n    for el in mapping.ListLayoutElements(mxd,\"LEGEND_ELEMENT\",\"*Crime*\"):\n      print(el.name)\n    ```", "```py\n    Crime Legend\n\n    ```", "```py\n    import arcpy.mapping as mapping\n    ```", "```py\n    mxd = mapping.MapDocument(\"CURRENT\")\n    ```", "```py\n    elLeg = mapping.ListLayoutElements(mxd, \"LEGEND_ELEMENT\",\"*Crime*\")[0]\n    ```", "```py\n    elLeg.title = \"Crimes by School District\"\n    ```", "```py\n    for item in elLeg.listLegendItemLayers():\n      print(item.name)\n    ```", "```py\n    import arcpy.mapping as mapping\n    mxd = mapping.MapDocument(\"CURRENT\")\n    elLeg = mapping.ListLayoutElements(mxd, \"LEGEND_ELEMENT\",\"*Crime*\")[0]\n    elLeg.title = \"Crimes by School District\"\n    for item in elLeg.listLegendItemLayers():\n      print(item.name)\n    ```", "```py\n    Burglaries in 2009\n    Crime Density by School District\n\n    ```", "```py\n    import arcpy.mapping as mapping\n    ```", "```py\n    mxd = mapping.MapDocument(\"CURRENT\")\n    ```", "```py\n    for printerName in mapping.ListPrinterNames():\n      print(printerName)\n    ```", "```py\n    HP Photosmart D110 series\n    HP Deskjet 3050 J610 series (Network)\n    HP Deskjet 3050 J610 series (Copy 1)\n    HP Deskjet 3050 J610 series\n    Dell 968 AIO Printer\n\n    ```", "```py\n    import arcpy.mapping as mapping\n    ```", "```py\n    mxd = mapping.MapDocument(\"CURRENT\")\n    ```", "```py\n    for df in mapping.ListDataFrames(mxd):\n      if df.name == \"Test_Performance\":\n        mapping.PrintMap(mxd,\"\",df)\n    ```", "```py\n    import arcpy.mapping as mapping\n    ```", "```py\n    mxd = mapping.MapDocument('CURRENT')\n    ```", "```py\n    mapping.ExportToPDF(mxd,r\"c:\\ArcpyBook\\Ch4\\Map_PageLayout.pdf\")\n    ```", "```py\n    import arcpy.mapping as mapping\n    ```", "```py\n    mxd = mapping.MapDocument(\"CURRENT\")\n    ```", "```py\n    for df in mapping.ListDataFrames(mxd):\n         if df.name == \"Crime\":\n    ```", "```py\n    import arcpy\n    import os\n    path = os.getcwd()\n    ```", "```py\n    #Create PDF and remove if it already exists\n    pdfPath = path + r\"\\CrimeReport.pdf\"\n    if os.path.exists(pdfPath):\n      os.remove(pdfPath)\n    pdfDoc = arcpy.mapping.PDFDocumentCreate(pdfPath)\n    ```", "```py\n    districtList = [\"Harlandale\", \"East Central\", \"Edgewood\", \"Alamo Heights\", \"South San Antonio\", \"Southside\", \"Ft Sam Houston\", \"North East\", \"Northside\", \"Lackland\", \"Southwest\", \"Judson\", \"San Antonio\"]\n    ```", "```py\n    mxd = arcpy.mapping.MapDocument(path + r\"\\Crime_Ch4.mxd\")\n    df = arcpy.mapping.ListDataFrames(mxd)[0]\n    lyr = arcpy.mapping.ListLayers(mxd, \"Crime Density by School District\")[0]\n    ```", "```py\n    pageCount = 1\n    for district in districtList:\n      #Generate image for each district\n      whereClause = \"\\\"NAME\\\" = '\" + district + \" ISD'\"\n      lyr.definitionQuery = whereClause\n    ```", "```py\n    arcpy.SelectLayerByAttribute_management(lyr, \"NEW_SELECTION\", whereClause)\n    df.extent = lyr.getSelectedExtent()\n    arcpy.SelectLayerByAttribute_management(lyr, \"CLEAR_SELECTION\")\n    ```", "```py\n    arcpy.mapping.ExportToBMP(mxd, path + \"\\DistrictPicture.bmp\", df) #single file\n    ```", "```py\n    #Generate report\n    print(\"Generating report for: \" + district + \" ISD\")\n    arcpy.mapping.ExportReport(report_source=lyr, report_layout_file=path + r\"\\CrimeLayout.rlf\",output_file=path + r\"\\temp\" + str(pageCount) + \".pdf\", starting_page_number=pageCount)\n    ```", "```py\n    #Append pages into final output\n    print(\"Appending page: \" + str(pageCount))\n    pdfDoc.appendPages(path + r\"\\temp\" + str(pageCount) + \".pdf\")\n    ```", "```py\n    os.remove(path + r\"\\temp\" + str(pageCount) + \".pdf\")\n    pageCount = pageCount + 1\n    ```", "```py\n    pdfDoc.saveAndClose()\n    ```", "```py\n    import arcpy\n    import os\n    ```", "```py\n    # Create an output directory variable\n    outDir = r\"C:\\ArcpyBook\\Ch4\"\n    ```", "```py\n    # Create a new, empty pdf document in the specified output directory\n    finalpdf_filename = outDir + r\"\\MapBook.pdf\"\n    if os.path.exists(finalpdf_filename):\n      os.remove(finalpdf_filename)\n    finalPdf = arcpy.mapping.PDFDocumentCreate(finalpdf_filename)\n    ```", "```py\n    # Add the title page to the pdf\n    print(\"Adding the title page  \\n\")\n    finalPdf.appendPages(outDir + r\"\\TitlePage.pdf\")\n    ```", "```py\n    # Add the index map to the pdf\n    print(\"Adding the index page  \\n\")\n    finalPdf.appendPages(outDir + r\"\\MapIndex.pdf\")\n    ```", "```py\n    # Export the Data Driven Pages to a temporary pdf and then add it to the\n    # final pdf. Alternately, if your Data Driven Pages have already been\n    # exported, simply append that document to the final pdf.\n    mxdPath = outDir + r\"\\Topographic.mxd\"\n    mxd = arcpy.mapping.MapDocument(mxdPath)\n    print(\"Creating the data driven pages \\n\")\n    ddp = mxd.dataDrivenPages\n    temp_filename = outDir + r\"\\tempDDP.pdf\"\n\n    if os.path.exists(temp_filename):\n      os.remove(temp_filename)\n    ddp.exportToPDF(temp_filename, \"ALL\")\n    print(\"Appending the map series  \\n\")\n    finalPdf.appendPages(temp_filename)\n    ```", "```py\n    # Update the properties of the final pdf.\n    finalPdf.updateDocProperties(pdf_open_view=\"USE_THUMBS\", pdf_layout=\"SINGLE_PAGE\")\n    ```", "```py\n    # Save your result\n    finalPdf.saveAndClose()\n    ```", "```py\n    # remove the temporary data driven pages file\n    if os.path.exists(temp_filename):\n        os.remove(temp_filename)\n    ```", "```py\n    import arcpy.mapping as mapping\n    ```", "```py\n    wrkspc = r'c:\\ArcpyBook\\Ch4'\n    ```", "```py\n    mxd = mapping.MapDocument(wrkspc + r\"\\Crime.mxd\")\n    ```", "```py\n    service = 'Crime'\n    sddraft = wrkspc + service + '.sddraft'\n    ```", "```py\n    mapping.CreateMapSDDraft(mxd, sddraft, service)\n    ```", "```py\n    analysis = mapping.AnalyzeForSD(wrkspc + \"Crime.sddraft\")\n    ```", "```py\n    for key in ('messages', 'warnings', 'errors'):\n        print(\"----\" + key.upper() + \"----\")\n        vars = analysis[key]\n        for ((message, code), layerlist) in vars.iteritems():\n            print \"    \", message, \" (CODE %i)\" % code\n            print(\"     applies to:\",)\n            for layer in layerlist:\n                print(layer.name)\n    ```", "```py\n    ----MESSAGES----\n         Layer draws at all scale ranges  (CODE 30003)\n         applies to: District_Crime_Join\n    Bexar_County_Boundary\n    District_Crime_Join\n    Bexar_County_Boundary\n    Bexar_County_Boundary\n    Texas_Counties_LowRes\n    School_Districts\n    Crime_surf\n    Bexar_County_Boundary\n    ----WARNINGS----\n         Layer's data source has a different projection [GCS_WGS_1984] than the data frame's projection  (CODE 10001)\n         applies to: District_Crime_Join\n    Bexar_County_Boundary\n    District_Crime_Join\n    Bexar_County_Boundary\n    Bexar_County_Boundary\n    Texas_Counties_LowRes\n    School_Districts\n    Crime_surf\n    Bexar_County_Boundary\n         Missing Tags in Item Description  (CODE 24059)\n         applies to:      Missing Summary in Item Description (CODE 24058)\n         applies to: ----ERRORS----\n         Data frame uses a background symbol that is not a solid fill  (CODE 18)\n\n    ```", "```py\n    if analysis['errors'] == {}:\n        #execute StageService\n        arcpy.StageService_server(sddraft,sd)\n        #execute UploadServiceDefinition\n        #arcpy.UploadServiceDefinition_server(sd, con)\n    else:\n        #if the sddraft analysis contained errors, display them\n        print(analysis['errors'])\n    ```"]