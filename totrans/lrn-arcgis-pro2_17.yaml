- en: Using Arcade Expressions for Labeling and Symbology
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Arcade表达式进行标注和符号
- en: Previously, in [Chapter 12](7747c679-b20b-47b2-946d-a1f8c5a9ded0.xhtml), *Automating
    Processes with ModelBuilder and Python*, you learned about two programming languages
    that can be used to automate processes within **ArcGIS Pro**—**ModelBuilder**
    and **Python**. As you learned, ModelBuilder is considered a graphic or visual
    programming language, while Python is a syntax-driven scripting language. With
    the release of **ArcGIS Pro 2.0** and **ArcGIS Enterprise 10.7**, Esri has introduced
    a new language called **Arcade**. Arcade is a new lightweight expression language
    that has many uses within the ArcGIS Platform as you will learn throughout this
    chapter.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第12章](7747c679-b20b-47b2-946d-a1f8c5a9ded0.xhtml)“使用ModelBuilder和Python自动化流程”中，你学习了两种可以用于在**ArcGIS
    Pro**中自动化流程的编程语言——**ModelBuilder**和**Python**。正如你所了解的，ModelBuilder被认为是一种图形或可视化编程语言，而Python是一种以语法驱动的脚本语言。随着**ArcGIS
    Pro 2.0**和**ArcGIS Enterprise 10.7**的发布，Esri引入了一种名为**Arcade**的新语言。Arcade是一种新的轻量级表达式语言，在ArcGIS平台中有许多用途，正如你将在本章中学习到的。
- en: This chapter will introduce you to the basic uses and syntax for Arcade. After
    completing this chapter, you will be able to create expressions that can generate
    text labels or control symbology.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将向你介绍Arcade的基本用法和语法。完成本章后，你将能够创建可以生成文本标签或控制符号的表达式。
- en: 'In this chapter, you will learn about the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习以下主题：
- en: Learning about Arcade
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习Arcade
- en: Understanding labeling expressions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解标注表达式
- en: Understanding symbology expressions
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解符号表达式
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: As with previous chapters of this book, you will need **ArcGIS Pro 2.6** or
    later to complete the exercises included in this chapter.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 与本书的先前章节一样，你需要**ArcGIS Pro 2.6**或更高版本来完成本章包含的练习。
- en: Learning about Arcade
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学习Arcade
- en: As mentioned previously, Arcade is a lightweight expression language for ArcGIS.
    It is compatible with ArcGIS Pro, ArcGIS Enterprise, and ArcGIS Online. This means
    the expressions that you create in one application will successfully render the
    same way in the others. Because it is lightweight, meaning it does not require
    as much processing power to execute, it performs faster than other languages,
    making it perfect for web maps, as well as for working with large datasets.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Arcade是ArcGIS的轻量级表达式语言。它与ArcGIS Pro、ArcGIS Enterprise和ArcGIS Online兼容。这意味着你在一个应用程序中创建的表达式将在其他应用程序中以相同的方式渲染。由于它轻量级，意味着执行时不需要太多的处理能力，因此它的性能比其他语言更快，这使得它非常适合用于网络地图，以及处理大型数据集。
- en: Each new release of ArcGIS includes increased use and capability of Arcade throughout
    the platform, including ArcGIS Pro. Initially, Arcade was used to create labeling
    expressions and control symbology, as you will learn in this chapter. It has since
    been expanded so that it can also be used to create fields on the fly that appear
    in information pop-up windows, establish attribute rules within your GIS database,
    create expressions in various geoprocessing tools, and more.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 每次ArcGIS的新版本发布，包括ArcGIS Pro在内，Arcade在平台中的使用和功能都会得到增强。最初，Arcade用于创建标注表达式和控制符号，正如你将在本章中学习到的。它已经扩展，现在还可以用于创建在信息弹出窗口中显示的动态字段，在GIS数据库中建立属性规则，在各个地理处理工具中创建表达式等。
- en: It should be noted, for those who have used the older applications that ArcGIS
    Pro is now replacing, that Arcade is not compatible with**ArcMap**or**ArcCatalog**,
    nor does it appear that Esri has any intention of making Arcade compatible with
    these older applications.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 应该注意的是，对于那些使用ArcGIS Pro正在取代的旧应用程序的用户来说，Arcade与**ArcMap**或**ArcCatalog**不兼容，也没有迹象表明Esri有意使Arcade与这些旧应用程序兼容。
- en: You may ask yourself *what is the difference between Arcade and other languages
    such as Python?* That is a very good question. The primary difference is that
    as an expression language, Arcade cannot be run externally from one of its parent
    applications, such as ArcGIS Pro. Languages such as Python don't have this same
    limitation. You can run a Python script from outside of ArcGIS using **Windows
    Scheduler**, the **command line**, and more. One thing that Arcade has in common
    with other languages is that it has its own syntax. So, let's explore some of
    Arcade's general syntax, which is used to create expressions, in this section.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会问自己*Arcade与其他语言（如Python）之间的区别是什么？*这是一个非常好的问题。主要区别在于，作为表达式语言，Arcade不能从其父应用程序（如ArcGIS
    Pro）外部运行。像Python这样的语言没有这种限制。您可以从ArcGIS外部使用**Windows Scheduler**、**命令行**等方式运行Python脚本。Arcade与其他语言共同的一点是，它有自己的语法。因此，让我们在本节中探索一些Arcade的一般语法，这些语法用于创建表达式。
- en: Understanding Arcade syntax
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解Arcade语法
- en: The syntax for Arcade has many things in common with other languages, such as
    Python or **Structured Query Language** (**SQL**). The first thing that we should
    define is its syntax. The syntax is the way that the code must be formatted in
    order for the expression, script, or application to run successfully. Now, you
    will examine specific examples of the syntax used in Arcade.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Arcade的语法与其他语言（如Python或**结构化查询语言**（**SQL**））有许多共同之处。我们首先应该定义的是它的语法。语法是代码必须格式化的方式，以便表达式、脚本或应用程序能够成功运行。现在，您将检查Arcade中使用的特定语法示例。
- en: Understanding the text string syntax
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解文本字符串语法
- en: 'When creating an expression using Arcade, if you want something to be treated
    as text, you must enclose it in single quotes, as in the following Arcade expression:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用Arcade创建表达式时，如果您想将某些内容视为文本，则必须将其用单引号括起来，如下面的Arcade表达式所示：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Please note that the preceding code can't include an *apostrophe* for the term
    `Owners`, as it may be misinterpreted by the compiler as a single quote.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，前面的代码不能包含`Owners`术语的*撇号*，因为它可能会被编译器误解释为单引号。
- en: 'This will create text labels on a map that looks as in the following diagram:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在地图上创建文本标签，其外观如下所示：
- en: '![](img/d67a2fb1-b5ad-4b46-a51f-44c191e4db8a.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d67a2fb1-b5ad-4b46-a51f-44c191e4db8a.png)'
- en: As you can see in the preceding screenshot, the expression creates text labels
    that appear on the map for each parcel. The phrase⁠ Owners Nameis appears from
    the part of the expression that is enclosed in single quotes to indicate a text
    string. The actual owner's name, which is displayed in the map, is pulled from
    the attribute table associated with the `Parcels` layer.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在前面的屏幕截图中所见，该表达式创建文本标签，这些标签出现在地图上的每个地块上。短语“⁠Owners Name”出现在用单引号括起来的表达式部分，以指示文本字符串。实际的所有者姓名，在地图上显示，是从与`Parcels`图层关联的属性表中提取的。
- en: Next, we will explore how to add comments to your expressions.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将探讨如何向您的表达式添加注释。
- en: Inserting comments into expressions
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在表达式中插入注释
- en: When writing any code, be it with Arcade, Python, or another programming language,
    it is considered best practice to add comments within your code that explain the
    function of a section within the code or provide descriptive information about
    the code, such as who created it, when it waswritten, the date it was created,
    and more.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当编写任何代码时，无论是使用Arcade、Python还是其他编程语言，添加注释到代码中以解释代码中某部分的函数或提供有关代码的描述性信息（如谁创建了它、何时编写、创建日期等）都被认为是最佳实践。
- en: 'Arcade supports both single-line and multiple-line comments in your Arcade
    expressions. To add a single-line comment to your code, use `//`, as in the following
    code snippet:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Arcade支持在Arcade表达式中添加单行和多行注释。要向代码中添加单行注释，请使用`//`，如下面的代码片段所示：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: When ArcGIS Pro, ArcGIS Enterprise, or ArcGIS Online processes the Arcade code,
    it will ignore any line that starts with `//` as if it does not exist and will
    automatically proceed to the next line in the Arcade expression.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当ArcGIS Pro、ArcGIS Enterprise或ArcGIS Online处理Arcade代码时，它将忽略以`//`开头的任何行，就像它不存在一样，并将自动继续到Arcade表达式的下一行。
- en: 'Often, you will need to add more comments within your code that require multiple
    lines. To add multiple-line comments in Arcade, you must start the first comment
    line with `/*` and end the last line with `*/`, as in the following code:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，您需要在代码中添加更多需要多行注释的注释。要在Arcade中添加多行注释，您必须从第一行注释开始使用`/*`，并在最后一行结束使用`*/`，如下面的代码所示：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Applications will ignore everything between `/*` and `*/` and go to the next
    line of code in the expression.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序将忽略`/*`和`*/`之间的所有内容，并跳到表达式中的下一行代码。
- en: Comments provide valuable information within your expression so that you and
    others can understand the purpose of the code used. This can be very helpful if,
    in the future, you or someone else needs to make updates to the expressions.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 注释在表达式中提供了有价值的信息，以便你和他人可以理解所使用代码的目的。如果将来你需要或其他人需要更新表达式，这会非常有帮助。
- en: Adding text string values and comments are very useful, but what if you need
    to use data found in a table in your expression to label a feature or apply specific
    symbology? We will explore the syntax required for that in the next section.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 添加文本字符串值和注释非常有用，但如果你需要在表达式中使用表格中的数据来标记特征或应用特定的符号符号呢？我们将在下一节中探讨实现这一目的所需的语法。
- en: Adding data from a table
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加来自表格的数据
- en: 'As you are creating expressions to generate labels or symbology, you will need
    to pull data from the layer''s attribute table. This is done by using a syntax
    that starts with `$feature`, as in the following code:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建生成标签或符号的表达式时，你需要从层的属性表中提取数据。这通过使用以`$feature`开头的语法来完成，如下面的代码所示：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As you can see from the preceding code, `$feature` is an example of a global
    variable. This is followed by a period and then the field name that you wish to
    retrieve the value from.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如前述代码所示，`$feature`是一个全局变量的示例。它后面跟着一个点，然后是你希望从中检索值的字段名。
- en: This would return a label displaying the land value for a feature or generate
    a symbol for each land value.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回一个显示特征土地价值的标签，或为每个土地价值生成一个符号。
- en: In the next section, we will introduce variables in Arcade expressions.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将介绍Arcade表达式中的变量。
- en: Defining a variable
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义变量
- en: When writing code for expressions, scripts, or applications, a variable is something
    that you can assign a value to and then use the variable in place of the value.
    This makes it easier to type as you write your code because the variable that
    you create is often shorter than the real value.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 当编写表达式、脚本或应用程序的代码时，变量是你可以赋予一个值并随后在代码中使用该变量代替值的对象。这使得在编写代码时输入更方便，因为你创建的变量通常比实际值要短。
- en: For example, you could create a variable called `X` and then say that it equals
    `Peachtree Industrial Boulevard`. So, any time in your code that you need to reference
    the `Peachtree Industrial Boulevard`value, you could just type `X` in the code
    and the application would know that that meant `Peachtree Industrial Boulevard`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可以创建一个名为`X`的变量，然后说它等于`Peachtree Industrial Boulevard`。因此，在你的代码中需要引用`Peachtree
    Industrial Boulevard`值的时候，你只需在代码中键入`X`，应用程序就会知道这意味着`Peachtree Industrial Boulevard`。
- en: 'In Arcade, to create a variable, you must declare it using a `Var` statement.
    The following code is an example of a variable in an Arcade expression:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在Arcade中，要创建变量，你必须使用`Var`语句声明它。以下代码是Arcade表达式中变量的一个示例：
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The preceding code will return a value of `Tripp` to the application running
    the expressions. One other thing that you need to know about Arcade when creating
    a variable is that it is not case sensitive like other languages, such as Python.
    So, to Arcade, a variable called `owner` is the same as `Owner` or `OWNER`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将返回一个值为`Tripp`的结果给运行表达式的应用程序。关于在创建变量时需要了解的Arcade的另一件事是，它与Python等其他语言不同，它不区分大小写。因此，对Arcade来说，名为`owner`的变量与`Owner`或`OWNER`相同。
- en: So, you now know about some of the common Arcade syntaxes that are used when
    creating various types of expressions. It is important to understand the syntax
    if you are going to successfully create expressions on your own. The syntax forms
    the foundation for any expression that you wish to create.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你现在已经了解了一些在创建各种类型表达式时使用的常见Arcade语法。如果你打算自己成功创建表达式，理解语法是非常重要的。语法构成了你希望创建的任何表达式的基石。
- en: Now, it is time to look at specific types of expressions, starting with labeling
    in the next section.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候查看特定类型的表达式了，下一节将介绍标签。
- en: Understanding labeling expressions
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解标签表达式
- en: As you learned in [Chapter 3](a0b88a3d-26f8-4b35-a295-2257d70802da.xhtml), *Creating
    2D Maps*, labeling is a method to display text in a map based on attribute values
    connected to the features being labeled. However, in that chapter, you were only
    shown how to label each feature using a single attribute field. *What if you wanted
    to label features with values found in multiple fields?* For example, say you
    wanted to label each parcel with its parcel identification number and the owner's
    name. *How would you do that?*
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: Arcade allows you to create expressions that can do just that and more. You
    can label based on multiple fields and even split values on to multiple lines.
    You can even add descriptive text to the label as well. This section will teach
    you how to create expressions that will allow you to create labels that do all
    of these.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: Now, we will examine how to label features using multiple field values.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: Configuring expressions to label with multiple field values
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Creating an Arcade expression that labels features with values pulled from
    more than one field in its attribute table is pretty straightforward, meaning
    the syntax is not complicated. It could be as simple as using the following code,
    for example:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The preceding code would label each feature in the layer with its parcel number
    (`Parcel_No`) and its area in acres (`Acre`), as in the following screenshot:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1919a9a9-01aa-4262-8144-fa4925dc7f95.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
- en: 'As you can see from the preceding screenshot, while each feature is labeled
    with both the parcel number and its acreage, it is hard to tell where one stops
    and the other begins. Adding a space between the two values would certainly help.
    To add a space between the two values, see the sample code that follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here, we added `+`, followed by a single quotation mark with a space, and then
    another single quotation mark. This is then followed by another `+`, before the
    syntax for the `Acre` field. This results in labels that look like the following:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7625034b-83b8-48d5-8d6f-f31bce15b924.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
- en: As you can see from the preceding screenshot, the labels are a bit clearer now
    that a space has been added between the value for the parcel number and the acres.
    However, it could still be made better. So, next, we will look at a method to
    split the values on to their own line and add more descriptive text.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: Making labels more readable
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While it can be extremely useful to label features with values from multiple
    fields, as you have seen, the label can be confusing or hard to read. Splitting
    those values on to separate lines and adding some descriptive text that explains
    what the values represent can make the label much easier to understand.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: 'To split a label into multiple lines, you will need to use the `Textformatting.Newline`
    command in your expression. If we use the expression that we created in the previous
    section to split the parcel number and acre values on to separate lines, the new
    expression would look like this:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This results in labels that look as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生如下所示的标签：
- en: '![](img/5904bf63-e9b3-489c-8404-dde292f56db1.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5904bf63-e9b3-489c-8404-dde292f56db1.png)'
- en: As you can see from the preceding screenshot, the parcel number is displayed
    on the top line and the acreage is on the bottom line. You know this because you
    created the expression. However, someone else viewing the map may not understand
    what the two values are because there is no context or description. *So, how do
    you add descriptive text to the labels?*
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您从前面的屏幕截图中所见，地块编号显示在顶部行，面积显示在底部行。您知道这一点是因为您创建了表达式。然而，其他查看地图的人可能无法理解这两个值是什么，因为没有上下文或描述。*那么，您如何向标签添加描述性文本呢？*
- en: 'You have already seen an example of that in the *Understanding the text string
    syntax* section of this chapter. You simply add your desired descriptive text
    enclosed in single quotes, as in the following code:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经在本章的*理解文本字符串语法*部分看到了一个例子。您只需在单引号内添加所需的描述性文本，如下面的代码所示：
- en: '[PRE8]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This will result in labels that look as in the following screenshot:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生如下所示的标签：
- en: '![](img/5ed461c2-f86b-455d-9553-7aaf01bb7c9e.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5ed461c2-f86b-455d-9553-7aaf01bb7c9e.png)'
- en: As you can see in the preceding screenshot, these labels are now much easier
    to read and understand. Now, it is your turn to put the knowledge that you have
    just learned into practice via a hands-on exercise.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在前面的屏幕截图中所见，这些标签现在更容易阅读和理解。现在，轮到您通过实际操作练习将您刚刚学到的知识付诸实践了。
- en: Exercise 14A – Creating an Arcade label expression
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习14A – 创建Arcade标签表达式
- en: The public works director has asked you to create a map that labels each sewer
    line with its size and the material that the pipe is made of. The attribute data
    for the city's sewer lines includes this information, but it is split between
    two fields. So, you will need to create an Arcade expression to accomplish this
    request.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 公共工程总监要求您创建一个地图，为每条污水线标注其尺寸和管道材料。城市的污水线属性数据包括这些信息，但它分布在两个字段中。因此，您需要创建一个Arcade表达式来完成这个请求。
- en: In this exercise, you will create an Arcade labeling expression that will label
    each sewer line with both its size and material. You will then work to make the
    label easier to understand by adding descriptive text.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，您将创建一个Arcade标签表达式，为每条污水线标注其尺寸和材料。然后，您将通过添加描述性文本来使标签更容易理解。
- en: Step 1 – Opening your project and reviewing the available data
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第1步 – 打开您的项目并审查可用数据
- en: 'In this step, you will open an existing project that already has a map that
    contains the sewer line data as a layer. You will then review the data available
    for the sewer lines to verify which fields you will need to use for the labels
    that you need to display:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一步，您将打开一个已经包含包含污水线数据的地图层作为现有项目。然后，您将审查污水线的可用数据，以验证您需要使用哪些字段来显示所需的标签：
- en: Start ArcGIS Pro and open the `Ex14A.aprx` project file, located in `C:\Student\IntroArcPro\Chapter14`.
    When the project opens, you should see the sewer system map, which contains the
    `Sewer Lines` layer that the public works director wants to be labeled with the
    size and pipe material.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动ArcGIS Pro并打开位于`C:\Student\IntroArcPro\Chapter14`的`Ex14A.aprx`项目文件。当项目打开时，您应该看到包含`Sewer
    Lines`层（公共工程总监希望用管道尺寸和材料进行标注）的污水系统地图。
- en: 'Next, you will examine the attribute table for the sewer lines to verify that
    the required data exists. Right-click on the Sewer Lines layer in the Contents
    pane, then select Attribute Table from the menu that appears, as in the following
    screenshot:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，您将检查污水线的属性表，以验证所需数据是否存在。在内容窗格中右键单击`Sewer Lines`层，然后从出现的菜单中选择属性表，如以下屏幕截图所示：
- en: '![](img/782a2ed5-088c-4214-b3b6-5e9f6e31da24.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/782a2ed5-088c-4214-b3b6-5e9f6e31da24.png)'
- en: The attribute table for the `Sewer Lines` layer should open below the map view
    area. It's now time to review the table.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`Sewer Lines`层的属性表应该位于地图视图区域下方。现在，是时候回顾这个表格了。'
- en: Take a few moments to review the attribute table for the `Sewer Lines` layer.
    Notice what fields are included in the table. Locate the two fields that might
    contain the data requested by the director.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 花几分钟时间回顾`Sewer Lines`层的属性表。注意表中包含哪些字段。找到可能包含导演请求的数据的两个字段。
- en: 'Question: *What are the names of the fields that contain the data that the
    director wants you to create labels for?*'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 问题：*包含导演希望您创建标签的数据的字段名称是什么？*
- en: Once you have identified the two fields that contain the data needed to create
    the labels requested by the director, close the attribute table.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你确定了包含导演请求的标签所需数据的两个字段，请关闭属性表。
- en: You have now verified that you have the data required to create the requested
    labels for the sewer lines by reviewing the attribute table for that layer. Now,
    it is time to start building the labeling expression that will label the sewer
    line features.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经通过查看该层的属性表来验证你有创建下水道线所需标签的数据。现在，是时候开始构建将标注下水道线特征的标签表达式了。
- en: Step 2 – Creating a simple label expression
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第2步 – 创建简单的标签表达式
- en: 'In this step, you will use the two fields that you identified in the last step
    to create an Arcade labeling expression. This will result in the sewer line features
    being labeled with text indicating their size and pipe material:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在此步骤中，你将使用在上一个步骤中确定的两个字段来创建一个 Arcade 标签表达式。这将导致下水道线特征以表示其尺寸和管道材料的文本进行标注：
- en: 'Click on the Map tab in the ribbon. Then, click on the Bookmark button in the
    Navigate group. Select the Sewer Labeling Area bookmark, as in the following screenshot,
    to zoom the map to a better scale for viewing labels:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在功能区中点击地图标签页。然后，在导航组中点击书签按钮。选择如以下截图所示的“下水道标签区域”书签，以便将地图缩放到更好的比例以查看标签：
- en: '![](img/21ad44ca-1466-4245-a2b7-8e9980d1f8ed.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/21ad44ca-1466-4245-a2b7-8e9980d1f8ed.png)'
- en: Select the Sewer Lines layer in the Contents pane. The Feature Layer group contextual
    tab should appear in the ribbon.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在内容面板中选择下水道线层。特征图层组上下文标签应出现在功能区上。
- en: Click on the Labeling tab in the Feature Layer group contextual tab.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击特征图层组上下文标签中的标签选项卡。
- en: Click on the Label button in the Layer group on the far left-hand side of the
    Labeling tab to turn on labels for the `Sewer Line` layer.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在标签选项卡最左侧的图层组中点击标签按钮以打开“下水道线”层的标签。
- en: When you turn on the labels, you should see some text appear just above each
    feature in the `Sewer Line` layer. The text that appears is not the value that
    the director had asked for. You will start building the expression next, which
    will display the requested values.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 当你打开标签时，你应该在“下水道线”层中的每个特征上方看到一些文本。显示的文本不是导演所要求的价值。你将开始构建表达式，这将显示所需的价值。
- en: 'Click on the Expression button to the right of the Field cell, as shown in
    the following screenshot. This will open the Label Class pane:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如以下截图所示，点击字段单元格右侧的表达式按钮。这将打开标签类面板：
- en: '![](img/626180cf-2c0a-4bab-998f-63b99a8b178c.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/626180cf-2c0a-4bab-998f-63b99a8b178c.png)'
- en: In the Label Class pane, verify that the Language field is set to Arcade using
    the drop-down arrow.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在标签类面板中，通过下拉箭头验证语言字段是否设置为 Arcade。
- en: In the Expression panel of the Label Class pane, delete the existing expression
    by selecting the entire expression with your mouse and pressing the *Delete* key
    on your keyboard.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在标签类面板的表达式面板中，通过用鼠标选择整个表达式并按下键盘上的 *Delete* 键来删除现有的表达式。
- en: 'In the Fields panel, locate and double-click on PIPE SIZE. That value should
    appear in the Expression panel, as in the following screenshot:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在字段面板中，找到并双击 PIPE SIZE。该值应出现在表达式面板中，如以下截图所示：
- en: '![](img/aaf1879a-2c08-41a1-b045-ad6368c53dc1.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/aaf1879a-2c08-41a1-b045-ad6368c53dc1.png)'
- en: Notice how the `$feature` syntax is automatically added and the `SIZE_` field
    appears instead of `PIPE SIZE`. The `$feature` syntax was automatically added
    because you double-clicked in the Fields panel to add that selection to the expression.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 `$feature` 语法是如何自动添加的，并且 `SIZE_` 字段出现在 `PIPE SIZE` 的位置。`$feature` 语法是自动添加的，因为你双击了字段面板来将此选择添加到表达式中。
- en: So, ArcGIS Pro knew to add the proper syntax. The reason you see PIPE SIZE in
    the Fields panel and SIZE_ in the Expression field is that one is a field alias
    and the other is the true field name. `PIPE SIZE` is the field alias. Field names
    cannot contain spaces. So, we often create alias or alternate names that are more
    descriptive so that we can better understand what we see in a field. The actual
    name of the field in the table is `SIZE_`.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，ArcGIS Pro 知道要添加正确的语法。你看到字段面板中的 PIPE SIZE 和表达式字段中的 SIZE_ 的原因是一个是字段别名，另一个是真正的字段名。`PIPE
    SIZE` 是字段别名。字段名不能包含空格。因此，我们经常创建别名或替代名称，使其更具描述性，以便我们更好地理解我们在字段中看到的内容。字段在表中的实际名称是
    `SIZE_`。
- en: Next, type `+` after `$feature.SIZE_` in the expression panel and type `‘ ‘`.
    *There is a space between the two single quotation marks*. This will add a space
    after the pipe size in the displayed label.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在表达式面板中`$feature.SIZE_`之后输入`+`，然后输入`‘ ‘`。*两个单引号之间有一个空格*。这将向显示的标签中的管道尺寸之后添加一个空格。
- en: 'Type another `+` character after the last quotation mark and then double-click
    on MATERIAL in the Fields panel so that it is added to the expression. Your expression
    should now look as in the following code:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在最后一个引号之后输入另一个`+`字符，然后在字段面板中双击“MATERIAL”，以便将其添加到表达式中。您的表达式现在应如下所示：
- en: '[PRE9]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Notice that the syntax for the `MATERIAL` field is a bit different than what
    was used for the `PIPE SIZE` field. That is because the `MATERIAL` field has been
    assigned a domain, which is a list of acceptable values that limits the user's
    ability to place any values otherthan those on the list into that field. This
    helps improve data accuracy.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到`MATERIAL`字段的语法与用于`PIPE SIZE`字段的语法略有不同。这是因为`MATERIAL`字段已被分配了一个域，这是一个包含可接受值的列表，限制了用户将除列表中以外的任何值放入该字段的能力。这有助于提高数据准确性。
- en: 'Click on the Apply button. The text in the map should change so that you can
    now see that the sewer lines are labeled with their size and material, as shown
    in the following screenshot:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“应用”按钮。地图中的文本应更改，以便您现在可以看到下水道管线已用其尺寸和材料进行标注，如下面的截图所示：
- en: '![](img/fb37636c-4087-40df-8676-63d8af8f317b.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/fb37636c-4087-40df-8676-63d8af8f317b.png)'
- en: Save your project by clicking on the Save Project button on the Quick Access
    Toolbar.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击快速访问工具栏上的“保存项目”按钮来保存您的项目。
- en: You have created a label expression that meets the minimum requirements requested
    by the public works director. However, you could improve on it a bit more. For
    example, the pipe size is just a number; there is nothing to indicate the units
    associated with that number. It could be inches, centimeters, or something else.
    So, let's add to your expression to clarify the units for the pipe size.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经创建了一个符合公共工程总监要求的标签表达式。然而，您还可以对其进行一些改进。例如，管道尺寸只是一个数字；没有任何指示与该数字相关的单位。它可能是英寸、厘米或其他。因此，让我们在您的表达式中添加内容，以明确管道尺寸的单位。
- en: 'In the Expression panel in the Label Class pane, click with your mouse just
    after $feature.SIZE_ in the expression that you have created. Then, type `+’in’`
    so that your expression should now look as follows:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在标签类面板的表达式面板中，用鼠标点击您创建的表达式中的`$feature.SIZE_`之后。然后，输入`+’in’`，以便您的表达式现在应如下所示：
- en: '[PRE10]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Once you have verified that your expression is correct, click the Apply button
    to apply the change to your expression. The labels should update to now include
    the text after the pipe size number. This indicates the sizes are in inches.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您已验证您的表达式是正确的，点击“应用”按钮以将更改应用到您的表达式中。标签应更新，现在包括管道尺寸数字之后的文本。这表明尺寸是以英寸为单位的。
- en: Save your project and close ArcGIS Pro.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存您的项目并关闭ArcGIS Pro。
- en: In this exercise, you learned how to create an Arcade labeling expression that
    labels features based on values found in two different fields. You also learned
    how to format that expression to include a text string to indicate the units and
    add a space between values. Next, you will look at how Arcade expressions can
    be created so that they can control the symbology for a layer.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，您学习了如何创建一个Arcade标签表达式，该表达式根据两个不同字段中找到的值来标注要素。您还学习了如何格式化该表达式，以包含一个文本字符串来指示单位，并在值之间添加空格。接下来，您将了解如何创建Arcade表达式，以便它们可以控制图层符号。
- en: Understanding symbology expressions
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解符号表达式
- en: Now that you understand how Arcade expressions can be used to label features,
    it is time to look at another use for Arcade. You can also use Arcade expressions
    to control the symbology for features within a layer.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经了解了如何使用Arcade表达式来标注要素，是时候看看Arcade的另一个用途了。您还可以使用Arcade表达式来控制图层中要素的符号。
- en: You can use Arcade expressions to generate symbology categories or ranges based
    on equations, functions, or data logic. This can provide much greater flexibility
    with your data and how you can display it. For example, you might have a road
    that is attributed with the traffic count values. However, you want to symbolize
    them with a simple low, medium, or high volume for those who may not know about
    low, medium, or high traffic count numbers. An Arcade expression will allow you
    to do that.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: This section will show you how to create a symbology expression, along with
    some common operators.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have a general idea of what a symbology expression can be used
    for, it is time to create one.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: Creating a symbology expression
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As mentioned, symbology expressions allow you to create symbology categories
    or ranges based on a function, equation, or data logic. *So, how do you do that?*
    Well, one of the common ways is to use `if` statements.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '`if` statements are used to create conditional logic. That means the statements
    make use of operators, such as equal to, not equal to, greater than, or less than,
    to group data. For example, if you wanted to symbolize parcels based on land value
    by identifying them as having a high, medium, or low value per acre, you might
    create an expression that looks like this:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The first line in this expression defines a variable named `value`. This is
    the value of the parcel divided by the area of the parcel in acres. This represents
    the value per acre for each parcel.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: The next lines then evaluate whether the result is `Low Value`, `Medium Value`,
    or `High Value`, which becomes the display category for the parcels. A low value
    is any number less than or equal to `10,000`. A medium value is any number that
    is greater than `10,000` and less than or equal to `50,000`. A high value is any
    number that does not meet the other two criteria—so, any number greater than `50,000`.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see the results in the following map screenshot:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c5a29b64-f647-4821-a8c5-092c34b31008.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
- en: Next, we will look at some of the common operators that you might use in your
    expressions.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the common operators
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Arcade supports many operators. Operators are logical functions that are included
    in an expression, such as equal to or not equal to. These operators are typically
    represented by a symbolic character or multiple symbolic characters. Some of the
    common operators you will use are as follows:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: '**Basic operators**'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Logical operators**'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The basic operators are as follows:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: 'The `+` operator: This adds two numbers or concatenates two strings.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `-` operator: This subtracts two numbers.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `*`operator: This multiplies two numbers.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `/`operator: This divides two numbers.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `++`operator: This increments a number variable by 1.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The logical operators are as follows:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: 'The `||`operator: This means or.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `&&`operator: This means and.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `==`operator: This means equal to.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `!=`operator: This means not equal to.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `<`operator: This means less than.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<`运算符：这意味着小于。'
- en: 'The `<=`operator: This means less than or equal to.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<=`运算符：这意味着小于或等于。'
- en: 'The `>`operator: This means greater than.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`>`运算符：这意味着大于。'
- en: 'The `>=`operator: This means greater than or equal to.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`>=`运算符：这意味着大于或等于。'
- en: Now, it is your turn to create a symbology expression with a hands-on exercise.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，轮到您通过动手练习创建一个符号表达式。
- en: Exercise 14B – Creating a symbology expression
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习14B – 创建符号表达式
- en: The road superintendent recently completed an inspection of all the roads in
    the city, giving them a score between `1` and `100`. The higher the score, the
    better condition the road is in. They would now like you to create a map showing
    the results of their inspections that they can present to the city council. However,
    instead of displaying the actual score for each road, they would like the roads
    symbolized as good, fair, or poor based on the score. A score of `1` to `40` would
    be considered poor. A score of `41` to `70` would be considered fair. A score
    of `71` or above would be considered good.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 道路主管最近完成了对该市所有道路的检查，给它们评了1到100分的分数。分数越高，道路状况越好。他们现在希望您创建一个地图，展示他们的检查结果，他们可以向市政委员会展示。然而，他们不希望显示每条道路的实际分数，而是希望根据分数将道路符号化为好、一般或差。分数为`1`到`40`被认为是差的。分数为`41`到`70`被认为是一般的。分数为`71`或以上被认为是好的。
- en: In this exercise, you will create a symbology expression that will evaluate
    the score for each road segment and return whether it is poor, fair, or good.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，您将创建一个符号表达式，该表达式将评估每段道路的分数，并返回它是差、一般还是好。
- en: Step 1 – Evaluating the Street_Centerlines layer
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第1步 – 评估Street_Centerlines图层
- en: 'In this step, you will open the project that contains the map showing the street
    centerline data. You will then open the attribute table for that data and review
    the information to determine where the inspection scores are located and what
    values are present:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一步，您将打开包含街道中心线数据的地图的项目。然后，您将打开该数据的属性表并审查信息，以确定检查分数的位置和存在的值：
- en: Start ArcGIS Pro and open the `Ex14B.aprx` project file located in `C:\Student\IntroArcPro\Chapter14`.
    When the project opens, you should see a map containing two layers—`Street_Centerlines`
    and `City_limit`—and a basemap.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动ArcGIS Pro并打开位于`C:\Student\IntroArcPro\Chapter14`的`Ex14B.aprx`项目文件。当项目打开时，您应该看到一个包含两个图层——`Street_Centerlines`和`City_limit`——和一个底图的地图。
- en: 'Right-click on the Street_Centerlines layer in the Contents pane and select
    Attribute Table from the menu that appears, as in the following screenshot:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在内容窗格中右键单击Street_Centerlines图层，然后从出现的菜单中选择属性表，如图下截图所示：
- en: '![](img/961211d1-e552-4dc4-9018-e30bed9110b4.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/961211d1-e552-4dc4-9018-e30bed9110b4.png)'
- en: Review the available fields in the attribute table for the Street_Centerlines
    layer.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 审查Street_Centerlines图层的属性表中的可用字段。
- en: 'Question: *What field contains the inspection score for each road segment?*'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 问题：*哪个字段包含每段道路的检查分数？*
- en: Take a moment to scroll down and review the values in the Inspection Score field
    that you just identified.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 抽空向下滚动并审查您刚才确定的检查分数字段中的值。
- en: 'Now, you need to determine what type of field Inspection Score is and what
    its true name is. Right-click on the Inspection Score field and select Fields
    from the menu that appears, as in the following screenshot:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您需要确定检查分数字段的数据类型及其真实名称。在检查分数字段上右键单击并从出现的菜单中选择字段，如图下截图所示：
- en: '![](img/d89d372e-2612-4f43-b885-7056df42cd20.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d89d372e-2612-4f43-b885-7056df42cd20.png)'
- en: You may ask yourself how we knew that Inspection Score was not the true name
    of the field. Field names in databases have specific limitations. First, they
    must start with a character and not a number. Second, they cannot contain special
    characters, such as spaces, `&`, `@`, and so on. Note that underscores are allowed.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会问自己我们是如何知道检查分数不是字段的真实名称的。数据库中的字段名称有特定的限制。首先，它们必须以字符开头，而不是数字。其次，它们不能包含特殊字符，如空格、`&`、`@`等。注意下划线是允许的。
- en: Depending on the type of database, there may be other restrictions as well.
    Since the name displayed was Inspection Score, which contains a space, we know
    this is not the true name but is rather an alias.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 根据数据库的类型，可能会有其他限制。由于显示的名称是检查分数，其中包含空格，我们知道这不是真实名称，而是一个别名。
- en: The Fields window should now be open. Review the information displayed in the
    window.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 字段窗口现在应该已经打开。审查窗口中显示的信息。
- en: 'Question: *What is the true field name for the Inspection Score field? What
    is the data type for the Inspection Score field?*'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 问题：*“Inspection Score”字段的真正字段名称是什么？“Inspection Score”字段的数据类型是什么？*
- en: It is important to know these two things. The true name for the field is what
    you will need to use in the Arcade expression that you will build. The data type
    will also impact the syntax and what you can do with the values contained in the
    field.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 了解这两点很重要。字段的真正名称是您将在构建的Arcade表达式中使用的名称。数据类型也会影响语法以及您可以在字段中使用的值。
- en: Close the Fields window and the `Street_Centerlines` attribute table.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭字段窗口和`Street_Centerlines`属性表。
- en: Now that you know which field you will need to use to build your symbology expression
    and what its data type is, it is time for you to create the expression.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经知道需要使用哪个字段来构建符号表达式以及它的数据类型，是时候创建表达式了。
- en: Step 2 – Creating a symbology expression
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第2步 – 创建符号表达式
- en: 'In this step, you will create an Arcade expression that will generate the symbology
    requested by the street superintendent. This expression will evaluate the score
    for each street segment and place it into the desired categories of poor, fair,
    and good:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在此步骤中，您将创建一个Arcade表达式，该表达式将生成街道管理员请求的符号。此表达式将评估每个街道段落的分数，并将其放入所需的类别：差、一般和好：
- en: In the Catalog pane, select the Street_Centerline layer so that the Feature
    Layer contextual group tab appears, containing the Appearance, Labeling, and Data
    tabs.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在目录面板中，选择“Street_Centerline”图层，以便出现特征层上下文组标签页，其中包含外观、标签和数据标签页。
- en: 'Click on the Appearance tab in the ribbon. Then, click on the Symbology drop-down
    arrow and select Unique Values, as in the following screenshot. This will open
    the Symbology pane:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在功能区中点击“外观”标签。然后，点击“符号”下拉箭头并选择“唯一值”，如图所示。这将打开符号面板：
- en: '![](img/dca24267-af32-4b12-a481-2361ab7666ab.png)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/dca24267-af32-4b12-a481-2361ab7666ab.png)'
- en: 'Next, click on the Set an expression button, located to the far right of the
    Field 1 options, as illustrated in the following screenshot. This will open the
    Expression Builder window:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，点击位于字段1选项最右侧的“设置表达式”按钮，如图所示。这将打开表达式构建器窗口：
- en: '![](img/20695333-1f16-496a-87d5-6a2d34e9f286.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/20695333-1f16-496a-87d5-6a2d34e9f286.png)'
- en: In the cell located to the right of Title, type `Overall Condition`. This will
    be the title that appears in the Contents pane and the legend.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在标题右侧的单元格中，输入`Overall Condition`。这将作为内容面板和图例中显示的标题。
- en: Under the title that you just changed, there are two panels—Fields and Functions.
    The Fields panel contains a list of all the fields present in the attribute table
    for the `Street_Centerlines` layer. The Functions panel contains a list of general
    math, spatial analysis, and other functions that you can use in your expression.
    You will use the Fields panel later in this exercise.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在您刚刚更改的标题下方有两个面板——字段和函数。字段面板包含`Street_Centerlines`图层属性表中所有字段的列表。函数面板包含您可以在表达式中使用的通用数学、空间分析和其他函数的列表。您将在本练习的后面使用字段面板。
- en: Under these two panels is the Expression panel. It is here that you will create
    your expression. This should already contain a simple expression calling on a
    single field. You will need to delete the current expression and build your own
    new one next.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两个面板下方是表达式面板。您将在这里创建表达式。这应该已经包含一个调用单个字段的简单表达式。您需要删除当前表达式并构建自己的新表达式。
- en: Use your mouse to select the current expression displayed in the Expression
    panel. Once selected, press the *Delete* key on your keyboard to erase the current
    expression.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用鼠标选择表达式面板中显示的当前表达式。一旦选中，按下键盘上的*Delete*键来删除当前表达式。
- en: 'Start your new expression by defining a variable that references the inspection
    score for each segment. In the Expression pane, type the following code, and then
    press *Enter*:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以定义一个引用每个段落的检查分数的变量开始您的新表达式。在表达式面板中，输入以下代码，然后按*Enter*：
- en: '[PRE12]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: You have now associated the `score`variable with the inspection score found
    in the database for each street centerline segment. So, when you need to reference
    that field in your expression code, all you need to do is use `score`.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在已将`score`变量与数据库中每个街道中心线段找到的检查分数关联起来。因此，当您需要在表达式代码中引用该字段时，您只需使用`score`即可。
- en: Next, you will use `If` statements to evaluate the inspection score for the
    segment so that they can be placed into the desired symbology categories.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Expression panel, add the following code and press *Enter* to move to
    the next line. This first line will segregate all the street segments that have
    an inspection score of `40` or less:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Next, you will add a line of code to your expression that tells it what to
    do with any street segments with an inspection score less than or equal to `40`.
    Add the following code after the last line of code that you wrote:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Your expression should now look as in the following screenshot:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/563b9485-7a7e-445e-93aa-413783429db9.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
- en: You have created your first `If` statement. You still have more to write, though.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Expression panel, add the following code to your expression:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This `If` statement evaluates all the road segments with an inspection score
    greater than or equal to `41` and less than or equal to `70`. Then, it puts them
    into the `Fair` category. Remember that the `&&` expression is the Arcade syntax
    for *and* in the expression.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: Now, you need to create the code that handles the values that are greater than
    `70`, which will be placed in the `Good` category.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Expression panel, add the following code to your expression for those
    features that have an inspection score that is greater than `70`:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Verify that your expression looks as in the following screenshot, then click
    OK to apply the new expression that you just created:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/db20b8ee-562c-4ec4-ac2e-8e779b2fc312.png)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
- en: Close the Symbology pane so that you can see the map.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your map should now look similar to the one in the following screenshot. Your
    colors may be a bit different, but you should now see the three categories that
    your Arcade expression generated, plus the <all other values> category, which
    appears by default. Also, notice above the symbology categories that the title
    that you entered has appeared as well, as follows:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5176c6d4-34ac-4491-81ec-41fc839ac74f.png)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
- en: Save your project and close ArcGIS Pro.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Congratulations! You have just created your first symbology Arcade expression.
    This will allow you to create more useful maps based on logical statements and
    equations. This further increases the flexibility of your geographical information
    system.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you have learned how Arcade expression can allow you to create
    maps that contain more descriptive labels and logical symbology. This further
    enhances your ability to use your GIS data by allowing you to create even more
    useful and detailed maps.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: As you have seen, Arcade, like Python, has its own syntax. You now have a general
    understanding of this new syntax and what it requires.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: This chapter just touched the surface of what you can do with Arcade in the
    ArcGIS platform. With each new release of ArcGIS Pro, ArcGIS Enterprise, and ArcGIS
    Online, Esri is adding more capability to the Arcade expression language.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For more information about Arcade syntax and capability, go to [https://developers.arcgis.com/arcade/](https://developers.arcgis.com/arcade/).
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 Arcade 语法和功能的信息，请访问 [https://developers.arcgis.com/arcade/](https://developers.arcgis.com/arcade/).
