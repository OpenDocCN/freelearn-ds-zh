["```py\n>>> Point = arcpy.Point(4,5)\n>>> point1  = arcpy.Point(4,5)\n>>> Point.equals(point1)\nTrue\n>>> Point.contains(point1)\nTrue\n>>> Point. crosses(point1)\nFalse\n>>> Point.overlaps(point1)\nFalse\n>>> Point.disjoint(point1)\nFalse\n>>> Point.within(point1)\nTrue\n>>> point.X, Point.Y\n(4.0, 5.0)\n\n```", "```py\n>>> Point = arcpy.Point(4,5)\n>>> point1  = arcpy.Point(7,9)\n>>> Array = arcpy.Array()\n>>> Array.add(point)\n>>> Array.add(point1)\n\n```", "```py\n>>> Point = arcpy.Point(4,5)\n>>> point1 = arcpy.Point(7,9)\n>>> pList = [Point,point1]\n>>> Array = arcpy.Array()\n>>> Array.extend(pList)\n\n```", "```py\n>>> Point  = arcpy.Point(4,5)\n>>> point1  = arcpy.Point(7,9)\n>>> point2  = arcpy.Point(11,13)\n>>> pList = [Point,point1]\n>>> Array = arcpy.Array()\n >>> Array.extend(pList)\n>>> Array.replace(1,point2)\n>>> point3  = arcpy.Point(17,15)\n>>> Array.insert(2,point3)\n\n```", "```py\n>>> Point  = arcpy.Point(4,5)\n>>> point1  = arcpy.Point(7,9)\n>>> pList = [Point,point1]\n>>> Array = arcpy.Array()\n\n>>> Array.extend(pList)\n>>> pLine = arcpy.Polyline(Array)\n\n```", "```py\n>>> pLine.firstPoint\n<Point (4.0, 5.0, #, #)>\n>>> pLine.lastPoint\n<Point (7.0, 9.0, #, #)>\npLine.getPart()\n<Array [<Array [<Point (4.0, 5.0, #, #)>, <Point (7.0, 9.0, #, #)>]>]>\n>>> pLine.trueCentroid\n<Point (5.5, 7.0, #, #)>\n>>> pLine.length\n5.0\n>>> pLine.pointCount\n2\n\n```", "```py\n>>> bufferOfLine = pLine.buffer(10)\n>>> bufferOfLine.area\n413.93744395\n>>> bufferOfLine.contains(pLine)\nTrue\n>>> newPoint = arcpy.Point(25,19)\n>>> pLine.distanceTo(newPoint)\n20.591260281974\n\n```", "```py\n>>> nPoint = pLine.positionAlongLine(3)\n>>> nPoint.firstPoint.X, nPoint.firstPoint.Y\n(5.8, 7.4)>>> pPoint = pLine.positionAlongLine(.5,True)\n >>> pPoint.firstPoint.X,pPoint.firstPoint.Y\n(5.5, 7.0)\n\n```", "```py\n>>> import arcpy\n>>> point1 = arcpy.Point(12,16)\n>>> point2 = arcpy.Point(14, 18)\n>>> point3 = arcpy.Point(11, 20)\n>>> Array = arcpy.Array()\n>>> Points = [point1,point2,point3]\n>>> Array.extend(points)\n>>> Polygon = arcpy.Polygon(array)\n>>> arcpy.CopyFeatures_management(polygon, r'C:\\Projects\\Polygon.shp')\n<Result 'C:\\\\Projects\\\\Polygon.shp'>\n```", "```py\nimport arcpyPoint  = arcpy.Point(6004548.231,2099946.033)\npoint1  = arcpy.Point(6008673.935,2105522.068)\npoint2  = arcpy.Point(6003351.355,2100424.783)Array = arcpy.Array()\nArray.add(point1)\nArray.add(point)\narray.add(point2)\nPolygon = arcpy.Polygon(array, 2227)\nbuffPoly = Polygon.buffer(50)\nfeatures = [Polygon,buffPoly]\narcpy.CopyFeatures_management(features,\n r'C:\\Projects\\Polygons.shp')\nspatialRef = arcpy.SpatialReference(4326)\npolygon4326 = Polygon.projectAs(spatialRef)\narcpy.CopyFeatures_management(polygon4326,\n r'C:\\Projects\\polygon4326.shp')\n\n```", "```py\nbuffPoly = Polygon.buffer(500)\ndonutHole =buffPoly.difference(Polygon)\nfeatures = [Polygon,donutHole]\narcpy.CopyFeatures_management(features,\n                              r\"C:\\Projects\\Polygons2.shp\")\n```", "```py\nimport arcpy\ncen2010 = r'C:\\Projects\\ArcPy.gdb\\SanFrancisco\\CensusBlocks2010'\nblockPolys = arcpy.CopyFeatures_management(cen2010,\n arcpy.Geometry())\n\n```", "```py\n# Generate 400 foot buffers around each bus stop\nimport arcpy,csv\nbusStops = r\"C:\\Projects\\PacktDB.gdb\\SanFrancisco\\Bus_Stops\"\ncensusBlocks2010 = r\"C:\\Projects\\PacktDB.gdb\\SanFrancisco\\CensusBlocks2010\"\n\nsql = \"NAME = '71 IB' AND BUS_SIGNAG = 'Ferry Plaza'\"\ndataDic = {}\nwith arcpy.da.SearchCursor(busStops, ['NAME','STOPID','SHAPE@'], sql) as cursor:\n for row in cursor:\n linename = row[0]\n stopid = row[1]\n shape = row[2]\n dataDic[stopid] = shape.buffer(400), linename\n\n```", "```py\n# Intersect census blocks and bus stop buffers\nprocessedDataDic = {} = {}\nfor stopid in dataDic.keys():\n values = dataDic[stopid]\n busStopBuffer = values[0]\n linename = values[1]\n blocksIntersected = []\n with arcpy.da.SearchCursor(censusBlocks2010, ['BLOCKID10','POP10','SHAPE@']) as cursor:\nfor row in cursor:\n block = row[2]\n population = row[1]\n blockid = row[0] \n if busStopBuffer.overlaps(block) ==True:\n interPoly = busStopBuffer.intersect(block,4)\n data = row[0],row[1],interPoly, block\n blocksIntersected.append(data)\n processedDataDic[stopid] = values, blocksIntersected\n\n```", "```py\n# Create an average population for each bus stop\ndataList = []\nfor stopid in processedDataDic.keys():\n allValues = processedDataDic[stopid]\n popValues = []\n blocksIntersected = allValues[1]\n for blocks in blocksIntersected:\n popValues.append(blocks[1])\n averagePop = sum(popValues)/len(popValues)\n busStopLine = allValues[0][1]\n busStopID = stopid\n finalData = busStopLine, busStopID, averagePop\n dataList.append(finalData)\n\n```", "```py\n# Generate a spreadsheet with the analysis results\ndef createCSV(data, csvname, mode ='ab'):\n with open(csvname, mode) as csvfile:\n csvwriter = csv.writer(csvfile, delimiter=',')\n csvwriter.writerow(data)\n\ncsvname = \"C:\\Projects\\Output\\StationPopulations.csv\"\nheaders = 'Bus Line Name','Bus Stop ID', 'Average Population'\ncreateCSV(headers, csvname, 'wb') \nfor data in dataList:\n createCSV(data, csvname)\n\n```", "```py\ndataList = []\nfor stopid in processedDataDic.keys():\n allValues = processedDataDic[stopid]\n popValues = []\n blocksIntersected = allValues[1]\n for blocks in blocksIntersected:\n pop = blocks[1]\n totalArea = blocks[-1].area\n interArea = blocks[-2].area\n finalPop = pop * (interArea/totalArea)\n popValues.append(finalPop)\n averagePop = round(sum(popValues)/len(popValues),2)\n busStopLine = allValues[0][1]\n busStopID = stopid\n finalData = busStopLine, busStopID, averagePop\n dataList.append(finalData)\n\n```"]