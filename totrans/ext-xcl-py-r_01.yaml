- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Reading Excel Spreadsheets
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取Excel电子表格
- en: In the deep and wide landscape of data analysis, Excel stands tall and by your
    side as a trusted warrior, simplifying the process of organizing, calculating,
    and presenting information. Its intuitive interface and widespread usage have
    cemented its position as a staple in the business world. However, as the volume
    and complexity of data continue to grow exponentially, Excel’s capabilities may
    start to feel constrained. It is precisely at this point that the worlds of Excel,
    R, and Python converge. Extending Excel with R and Python invites you to embark
    on a truly transformative journey. This trip will show you the power of these
    programming languages as they synergize with Excel, expanding its horizons and
    empowering you to conquer data challenges with ease. In this book, we will delve
    into how to integrate Excel with R and Python, uncovering the hidden potential
    that lies beneath the surface and enabling you to extract valuable insights, automate
    processes, and unleash the true power of data analysis.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入和广泛的数据分析领域中，Excel作为一位值得信赖的战士，站在您的身边，简化了组织、计算和展示信息的过程。其直观的界面和广泛的使用使其在商业世界中成为必备品。然而，随着数据量和复杂性的指数级增长，Excel的功能可能会开始感到受限。正是在这一点上，Excel、R和Python的世界交汇。通过R和Python扩展Excel，邀请您踏上真正变革的旅程。这次旅行将向您展示这些编程语言与Excel协同工作的力量，扩展其视野，并使您能够轻松征服数据挑战。在这本书中，我们将深入研究如何将Excel与R和Python集成，揭示隐藏在表面之下的潜力，并使您能够提取有价值的见解，自动化流程，并释放数据分析的真正力量。
- en: Microsoft Excel came to market in 1985 and has remained a popular spreadsheet
    software choice. Excel was originally known as MultiPlan. Microsoft Excel and
    databases in general share some similarities in terms of organizing and managing
    data, although they serve different purposes. Excel is a spreadsheet program that
    allows users to store and manipulate data in a tabular format. It consists of
    rows and columns, where each cell can contain text, numbers, or formulas. Similarly,
    a database is a structured collection of data stored in tables, consisting of
    rows and columns.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 微软Excel于1985年上市，并一直是一种流行的电子表格软件选择。Excel最初被称为MultiPlan。在组织和管理数据方面，Microsoft Excel和数据库在某种程度上具有相似之处，尽管它们服务于不同的目的。Excel是一种电子表格程序，允许用户以表格格式存储和操作数据。它由行和列组成，其中每个单元格可以包含文本、数字或公式。同样，数据库是一个结构化数据集合，以表格形式存储，由行和列组成。
- en: Both Excel and databases provide a way to store and retrieve data. In Excel,
    you can enter data, perform calculations, and create charts and graphs. Similarly,
    databases store and manage large amounts of structured data and enable querying,
    sorting, and filtering. Excel and databases also support the concept of relationships.
    In Excel, you can link cells or ranges across different sheets, creating connections
    between data. Databases use relationships to link tables based on common fields,
    allowing you to retrieve related data from multiple tables.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Excel和数据库都提供了一种存储和检索数据的方式。在Excel中，您可以输入数据，执行计算，并创建图表和图形。同样，数据库存储和管理大量结构化数据，并支持查询、排序和过滤。Excel和数据库也支持关系概念。在Excel中，您可以链接不同工作表中的单元格或范围，创建数据之间的连接。数据库使用关系根据公共字段链接表，允许您从多个表中检索相关数据。
- en: 'This chapter aims to familiarize you with reading Excel files into the R environment
    and performing some manipulation on them. Specifically, in this chapter, we’re
    going to cover the following main topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章旨在使您熟悉将Excel文件读取到R环境中，并对它们进行一些操作。具体来说，在本章中，我们将涵盖以下主要主题：
- en: R packages for Excel manipulation
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于Excel操作的R包
- en: Reading Excel files to manipulate with R
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用R读取Excel文件进行操作
- en: Reading multiple Excel sheets with a custom R function
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用自定义R函数读取多个Excel工作表
- en: Python packages for Excel manipulation
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于Excel操作的Python包
- en: Opening an Excel sheet from Python and reading the data
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从Python打开Excel工作表并读取数据
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'At the time of writing, we are using the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写本文档时，我们使用以下：
- en: R 4.2.1
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: R 4.2.1
- en: The RStudio 2023.03.1+446 “Cherry Blossom” release for Windows
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RStudio 2023.03.1+446“樱花”版本，适用于Windows
- en: 'For this chapter, you will need to install the following packages:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，您需要安装以下包：
- en: '`readxl`'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`readxl`'
- en: '`openxlsx`'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`openxlsx`'
- en: '`xlsx`'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xlsx`'
- en: 'To run the Python code in this chapter, we will be using the following:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行本章中的Python代码，我们将使用以下：
- en: Python 3.11
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 3.11
- en: '`pandas`'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pandas`'
- en: '`openpyxl`'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`openpyxl`'
- en: The `iris.xlsx` Excel file available in this book’s GitHub repository
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本书 GitHub 仓库中提供的 `iris.xlsx` Excel 文件
- en: 'While setting up a Python environment is outside the scope of this book, this
    is easy to do. The necessary packages can be installed by running the following
    commands:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然设置 Python 环境超出了本书的范围，但这很容易做到。可以通过运行以下命令来安装必要的包：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note that these commands have to be run from a terminal and not from within
    a Python script. They need to be run in the folder where `requirements.txt` resides
    or a full path to the `requirements.txt` file has to be included.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这些命令必须在终端中运行，而不是在 Python 脚本内部运行。它们需要在 `requirements.txt` 文件所在的文件夹中运行，或者必须包含
    `requirements.txt` 文件的完整路径。
- en: 'This book’s GitHub repository also contains a `requirements.txt` file that
    you can use to install all dependencies. You can do this by running the following
    command:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 本书 GitHub 仓库还包含一个 `requirements.txt` 文件，你可以使用它来安装所有依赖。你可以通过运行以下命令来完成此操作：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This command installs all the packages that will be used in this chapter so
    that you don’t have to install them one by one. It also guarantees that the whole
    dependency tree (including the dependencies of the dependencies) will be the same
    as what this book’s authors have used.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令安装了本章将使用的所有包，这样你就不必逐个安装它们。它还保证了整个依赖树（包括依赖的依赖）将与本书作者使用的完全相同。
- en: 'Alternatively, when using Jupyter Notebooks, you can use the following magic
    commands:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，当使用 Jupyter Notebooks 时，你可以使用以下魔法命令：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'There is a GitHub account for all of the code examples in this book located
    at this link: [https://github.com/PacktPublishing/Extending-Excel-with-Python-and-R](https://github.com/PacktPublishing/Extending-Excel-with-Python-and-R).
    Each chapter has it’s own folder, with the current one as `Chapter01`.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的所有代码示例的 GitHub 账户位于以下链接：[https://github.com/PacktPublishing/Extending-Excel-with-Python-and-R](https://github.com/PacktPublishing/Extending-Excel-with-Python-and-R)。每个章节都有自己的文件夹，当前文件夹名为
    `Chapter01`。
- en: Note
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Technical requirements for Python throughout the book are conveniently compiled
    in the `requirements.txt` file, accessible on GitHub repository here, [https://github.com/PacktPublishing/Extending-Excel-with-Python-and-R/blob/main/requirements.txt](https://github.com/PacktPublishing/Extending-Excel-with-Python-and-R/blob/main/requirements.txt).
    Installing these dependencies will streamline your coding experience and ensure
    smooth progression through the book. Be sure to install them all before diving
    into the exercises.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 本书对 Python 的技术要求方便地编译在 `requirements.txt` 文件中，可在 GitHub 仓库中找到，[https://github.com/PacktPublishing/Extending-Excel-with-Python-and-R/blob/main/requirements.txt](https://github.com/PacktPublishing/Extending-Excel-with-Python-and-R/blob/main/requirements.txt)。安装这些依赖项将简化你的编码体验，并确保你在本书中的学习过程顺利。在开始练习之前，请确保安装所有这些依赖项。
- en: Working with R packages for Excel manipulation
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 R 包进行 Excel 操作
- en: 'There are several packages available both on CRAN and on GitHub that allow
    for reading and manipulation of Excel files. In this section, we are specifically
    going to focus on the packages: `readxl`, `openxlsx`, and `xlsx` to read Excel
    files. These three packages all have their own functions to read Excel files.
    These functions are as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在 CRAN 和 GitHub 上都有几个包可用于读取和操作 Excel 文件。在本节中，我们将特别关注以下包：`readxl`、`openxlsx`
    和 `xlsx`，用于读取 Excel 文件。这些包都有自己的函数来读取 Excel 文件。这些函数如下：
- en: '`readxl::read_excel()`'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`readxl::read_excel()`'
- en: '`openxlsx::read.xlsx()`'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`openxlsx::read.xlsx()`'
- en: '`xlsx::read.xlsx()`'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xlsx::read.xlsx()`'
- en: Each function has a set of parameters and conventions to follow. Since `readxl`
    is part of the `tidyverse` collection of packages, it follows its conventions
    and returns a `tibble` object upon reading the file. If you do not know what a
    tibble is, it is a modern version of R’s `data.frame`, a sort of spreadsheet in
    the R environment. It is the building block of most analyses. Moving on to `openxlsx`
    and `xlsx`, they both return a base R `data.frame` object, with the latter also
    able to return a `list` object. If you are wondering how this relates to manipulating
    an actual Excel file, I can explain. First, to manipulate something in R, the
    data must be in the R environment, so you cannot manipulate the file unless the
    data is read in. These packages have different functions for manipulating Excel
    or reading data in certain ways that allow for further analysis and or manipulation.
    It is important to note that `xlsx` does require Java to be installed.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 每个函数都有一组参数和遵循的约定。由于 `readxl` 是 `tidyverse` 包集合的一部分，它遵循其约定，并在读取文件时返回一个 `tibble`
    对象。如果你不知道什么是 tibble，它是一种 R 的 `data.frame` 的现代版本，在 R 环境中类似于电子表格。它是大多数分析的基础。接下来是
    `openxlsx` 和 `xlsx`，它们都返回一个基本的 R `data.frame` 对象，后者还能返回一个 `list` 对象。如果你想知道这如何与操作实际的
    Excel 文件相关联，我可以解释。首先，要在 R 中操作某些东西，数据必须位于 R 环境中，因此除非数据被读取，否则你不能操作文件。这些包有不同的函数用于以特定方式操作
    Excel 或读取数据，从而允许进行进一步的分析和或操作。需要注意的是，`xlsx` 需要安装 Java。
- en: As we transition from our exploration of R packages for Excel manipulation,
    we’ll turn our attention to the crucial task of effectively reading Excel files
    into R, thereby unlocking even more possibilities for data analysis and manipulation.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们从对 R 包的 Excel 操作探索过渡，我们将把注意力转向一个关键任务，即有效地将 Excel 文件读入 R，从而解锁数据分析和处理更多的可能性。
- en: Reading Excel files to R
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 Excel 文件读入 R
- en: In this section, we are going to read data from Excel with a few different R
    libraries. We need to do this before we can even consider performing any type
    of manipulation or analysis on the data contained in the sheets of the Excel files.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用几个不同的 R 库从 Excel 中读取数据。在我们考虑对 Excel 文件中的工作表中的数据进行任何类型的操作或分析之前，我们必须这样做。
- en: As mentioned in the Technical requirements section, we are going to be using
    the `readxl`, `openxlsx`, and `xlsx` packages to read data into R.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如技术要求部分所述，我们将使用 `readxl`、`openxlsx` 和 `xlsx` 包将数据读入 R。
- en: Installing and loading libraries
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装和加载库
- en: 'In this section, we are going to install and load the necessary libraries if
    you do not yet have them. We are going to use the `openxlsx`, `xlsx`, `readxl`,
    and `readxlsb` libraries. To install and load them, run the following code block:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，如果你还没有这些库，我们将安装和加载必要的库。我们将使用 `openxlsx`、`xlsx`、`readxl` 和 `readxlsb` 库。要安装和加载它们，请运行以下代码块：
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `lapply()` function in R is a versatile tool for applying a function to
    each element of a list, vector, or `DataFrame`. It takes two arguments, `x` and
    `FUN`, where `x` is the list and `FUN` is the function that is applied to the
    list object, `x`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: R 中的 `lapply()` 函数是一个适用于将函数应用于列表、向量或 `DataFrame` 中每个元素的通用工具。它接受两个参数，`x` 和 `FUN`，其中
    `x` 是列表，`FUN` 是应用于列表对象 `x` 的函数。
- en: Now that the libraries have been installed, we can get to work. To do this,
    we are going to read a spreadsheet built from the Iris dataset that is built into
    base R. We are going to read the file with three different libraries, and then
    we are going to create a custom function to work with the `readxl` library that
    will read all the sheets of an Excel file. We will call this the `read_excel_sheets()`
    function.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在库已经安装好了，我们可以开始工作了。为此，我们将读取由 R 的基础库中构建的 Iris 数据集构建的电子表格。我们将使用三个不同的库来读取文件，然后我们将创建一个自定义函数来使用
    `readxl` 库读取 Excel 文件的全部工作表。我们将把这个函数称为 `read_excel_sheets()`。
- en: Let’s start reading the files. The first library we will use to open an Excel
    file is `openxlsx`. To read the Excel file we are working with, you can run the
    code in the `chapter1` folder of this book’s GitHub repository called `ch1_create_iris_dataset.R`
    Refer to the following screenshot to see how to read the file into R.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始读取文件。我们将使用 `openxlsx` 库来打开 Excel 文件。要读取我们正在处理的 Excel 文件，你可以运行本书 GitHub
    仓库中 `chapter1` 文件夹中的 `ch1_create_iris_dataset.R` 文件中的代码。参考以下截图以了解如何将文件读入 R。
- en: 'You will notice a variable called `f_pat`. This is the path to where the Iris
    dataset was saved as an Excel file – for example, `C:/User/UserName/Documents/iris_data.xlsx`:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到一个名为`f_pat`的变量。这是将Iris数据集保存为Excel文件的路径——例如，`C:/User/UserName/Documents/iris_data.xlsx`：
- en: '![Figure 1.1 – Using the openxlsx package to read the Excel file](img/B19142_01_1.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图1.1 – 使用openxlsx包读取Excel文件](img/B19142_01_1.jpg)'
- en: Figure 1.1 – Using the openxlsx package to read the Excel file
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.1 – 使用openxlsx包读取Excel文件
- en: The preceding screenshot shows how to read an Excel file. This example assumes
    that you have used the `ch1_create_iris_datase.R` file to create the example Excel
    file. In reality, you can read in any Excel file that you would like or need.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 上述截图显示了如何读取Excel文件。这个例子假设你已经使用了`ch1_create_iris_datase.R`文件来创建示例Excel文件。实际上，你可以读取任何你想要或需要的Excel文件。
- en: 'Now, we will perform the same type of operation, but this time with the `xlsx`
    library. Refer to the following screenshot, which uses the same methodology as
    with the `openxlsx` package:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将执行相同类型的操作，但这次使用的是`xlsx`库。参考以下截图，它使用了与`openxlsx`包相同的方法：
- en: '![Figure 1.2 – Using the xlsx library and the read.xlsx() function to open
    the Excel file we’ve created](img/B19142_01_2.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![图1.2 – 使用xlsx库和read.xlsx()函数打开我们创建的Excel文件](img/B19142_01_2.jpg)'
- en: Figure 1.2 – Using the xlsx library and the read.xlsx() function to open the
    Excel file we’ve created
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.2 – 使用xlsx库和read.xlsx()函数打开我们创建的Excel文件
- en: 'Finally, we will use the `readxl` library, which is part of the tidyverse:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将使用`readxl`库，它是tidyverse的一部分：
- en: '![Figure 1.3 – Using the readxl library and the read_excel() function to read
    the Excel file into memory](img/B19142_01_3.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![图1.3 – 使用readxl库和read_excel()函数将Excel文件读入内存](img/B19142_01_3.jpg)'
- en: Figure 1.3 – Using the readxl library and the read_excel() function to read
    the Excel file into memory
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.3 – 使用readxl库和read_excel()函数将Excel文件读入内存
- en: In this section, we learned how to read in an Excel file with a few different
    packages. While these packages can do more than simply read in an Excel file,
    that is what we needed to focus on in this section. You should now be familiar
    with how to use the `readxl::read_excel()`, `xlsx::read.xlsx()`, and `openxlsx::read.xlsx()`
    functions.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了如何使用几个不同的包读取Excel文件。虽然这些包可以完成比简单地读取Excel文件更多的工作，但这是我们本节需要关注的内容。你现在应该熟悉如何使用`readxl::read_excel()`、`xlsx::read.xlsx()`和`openxlsx::read.xlsx()`函数。
- en: 'Building upon our expertise in reading Excel files into R, we’ll now embark
    on the next phase of our journey: unraveling the secrets of efficiently extracting
    data from multiple sheets within an Excel file.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 建立在将Excel文件读入R的专长之上，我们现在将开始旅程的下一阶段：揭示从Excel文件中的多个工作表高效提取数据的秘密。
- en: Reading multiple sheets with readxl and a custom function
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用readxl和自定义函数读取多个工作表
- en: In Excel, we often encounter workbooks that have multiple sheets in them. These
    could be stats for different months of the year, table data that follows a specific
    format month over month, or some other period. The point is that we may want to
    read all the sheets in a file for one reason or another, and we should not call
    the read function from a particular package for each sheet. Instead, we should
    use the power of R to loop through this with `purrr`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在Excel中，我们经常遇到包含多个工作表的电子表格。这些可能是不同月份的统计数据，按月遵循特定格式的表格数据，或者某些其他周期。关键是，我们可能出于某种原因想要读取文件中的所有工作表，并且我们不应该为每个工作表从特定的包中调用读取函数。相反，我们应该使用R的力量通过`purrr`循环遍历：
- en: 'Let’s build a customized function. To do this, we are going to load the `readxl`
    function. If we have it already loaded, then this is not necessary; however, if
    it is already installed and you do not wish to load the library into memory, then
    you can call the `excel_sheets()` function by using `readxl::excel_sheets()`:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们构建一个自定义函数。为此，我们将加载`readxl`函数。如果我们已经加载了它，那么这就不必要了；然而，如果它已经安装并且我们不希望将库加载到内存中，那么我们可以通过使用`readxl::excel_sheets()`来调用`excel_sheets()`函数：
- en: '![Figure 1.4 – Creating a function to read all the sheets into an Excel file
    at once – read_excel_sheets()](img/B19142_01_4.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图1.4 – 创建一个函数，一次性将所有工作表读入Excel文件 – read_excel_sheets()](img/B19142_01_4.jpg)'
- en: Figure 1.4 – Creating a function to read all the sheets into an Excel file at
    once – read_excel_sheets()
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.4 – 创建一个函数，一次性将所有工作表读入Excel文件 – read_excel_sheets()
- en: 'The new code can be broken down as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 新代码可以分解如下：
- en: '[PRE4]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This line defines a function called `read_excel_sheets` that takes two arguments:
    `filename` (the name of the Excel file to be read) and `single_tbl` (a logical
    value indicating whether the function should return a single table or a list of
    tables).'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行定义了一个名为`read_excel_sheets`的函数，它接受两个参数：`filename`（要读取的Excel文件名）和`single_tbl`（一个逻辑值，指示函数是否应返回单个表格或表格列表）。
- en: 'Next, we have the following line:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们有以下行：
- en: '[PRE5]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This line uses the `readxl` package to extract the names of all the sheets in
    the Excel file specified by `filename`. The sheet names are stored in the `sheets`
    variable.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行使用`readxl`包从指定的`filename` Excel文件中提取所有工作表的名称。工作表名称存储在`sheets`变量中。
- en: 'Here’s the next line:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这是下一行：
- en: '[PRE6]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This line starts an `if` statement that checks the value of the `single_tbl`
    argument.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行开始了一个`if`语句，用于检查`single_tbl`参数的值。
- en: 'Now, we have the following:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有以下内容：
- en: '[PRE7]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: If `single_tbl` is `TRUE`, this line uses the `purrr` package’s `map_df` function
    to iterate over each sheet name in `sheets` and read the corresponding sheet using
    the `read_excel` function from the `readxl` package. The resulting `DataFrame`
    are combined into a single table, which is assigned to the `x` variable.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`single_tbl`为`TRUE`，则这一行使用`purrr`包的`map_df`函数遍历`sheets`中的每个工作表名称，并使用`readxl`包的`read_excel`函数读取相应的工作表。结果`DataFrame`合并为一个单独的表格，并分配给`x`变量。
- en: 'Now, we have the following line:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有以下行：
- en: '[PRE8]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This line indicates the start of the `else` block of the `if` statement. If
    `single_tbl` is `FALSE`, the code in this block will be executed.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行表示`if`语句的`else`块的开始。如果`single_tbl`为`FALSE`，则执行此块中的代码。
- en: 'Here’s the next line:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这是下一行：
- en: '[PRE9]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In this line, the `purrr` package’s `map` function is used to iterate over each
    sheet name in `sheets`. For each sheet, the `read_excel` function from the `readxl`
    package is called to read the corresponding sheet from the Excel file specified
    by `filename`. The resulting `DataFrame` are stored in a list assigned to the
    `x` variable.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一行中，使用`purrr`包的`map`函数遍历`sheets`中的每个工作表名称。对于每个工作表，调用`readxl`包中的`read_excel`函数从指定的`filename`
    Excel文件中读取相应的工作表。结果`DataFrame`存储在分配给`x`变量的列表中。
- en: 'Now, we have the following:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有以下内容：
- en: '[PRE10]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This line uses the `set_names` function from the `purrr` package to set the
    names of the elements in the `x` list to the sheet names in sheets.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行使用`purrr`包的`set_names`函数将`x`列表中元素的名字设置为`sheets`中的工作表名称。
- en: 'Finally, we have the following line:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有以下行：
- en: '[PRE11]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This line returns the value of `x` from the function, which will be either a
    single table (`data.frame`) if `single_tbl` is `TRUE`, or a list of tables (`data.frame`)
    if `single_tbl` is `FALSE`.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行返回函数中的`x`值，如果`single_tbl`为`TRUE`，则返回单个表格（`data.frame`），如果`single_tbl`为`FALSE`，则返回表格列表（`data.frame`）。
- en: In summary, the `read_excel_sheets` function takes an Excel filename and a logical
    value indicating whether to return a single table or a list of tables. It uses
    the `readxl` package to extract the sheet names from the Excel file, and then
    reads the corresponding sheets either into a single table (if `single_tbl` is
    `TRUE`) or into a list of tables (if `single_tbl` is `FALSE`). The resulting data
    is returned as the output of the function. To see how this works, let’s look at
    the following example.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，`read_excel_sheets`函数接受一个Excel文件名和一个逻辑值，表示是否返回单个表格或表格列表。它使用`readxl`包从Excel文件中提取工作表名称，然后根据`single_tbl`的值（如果为`TRUE`则将对应的工作表读入单个表格，如果为`FALSE`则读入表格列表）读取相应的工作表。结果数据作为函数的输出返回。为了了解其工作原理，让我们看看以下示例。
- en: We have a spreadsheet that has four tabs in it – one for each species in the
    famous Iris dataset and then one sheet called `iris`, which is the full dataset.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个包含四个标签的工作表——每个标签对应著名的Iris数据集中的每个物种，还有一个名为`iris`的工作表，它包含完整的数据集。
- en: 'As shown in *Figure 1**.5*, the `read_excel_sheets()` function has read all
    four sheets of the Excel file. We can also see that the function has imported
    the sheets as a list object and has named each item in the list after the name
    of the corresponding tab in the Excel file. It is also important to note that
    the sheets must all have the same column names and structure for this to work:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如*图1**.5*所示，`read_excel_sheets()`函数已读取Excel文件中的所有四个工作表。我们还可以看到，该函数已将工作表作为列表对象导入，并且已将列表中的每个项目命名为Excel文件中对应标签的名称。值得注意的是，为了使此操作生效，所有工作表必须具有相同的列名和结构：
- en: '![Figure 1.5 – Excel file read by read_excel_sheets()](img/B19142_01_5.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![图1.5 – read_excel_sheets()读取的Excel文件](img/B19142_01_5.jpg)'
- en: Figure 1.5 – Excel file read by read_excel_sheets()
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.5 – 使用 read_excel_sheets() 读取的 Excel 文件
- en: In this section, we learned how to write a function that will read all of the
    sheets in any Excel file. This function will also return them as a named item
    list, where the names are the names of the tabs in the file itself.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了如何编写一个函数，该函数将读取任何 Excel 文件中的所有工作表。此函数还将它们作为命名项列表返回，其中名称是文件本身中标签页的名称。
- en: Now that we have learned how to read Excel sheets in R, in the next section,
    we will cover Python, where we will revisit the same concepts but from the perspective
    of the Python language.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经学习了如何在 R 中读取 Excel 表格，在下一节中，我们将介绍 Python，我们将从 Python 语言的角度重新审视相同的概念。
- en: Python packages for Excel manipulation
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用于 Excel 操作的 Python 包
- en: In this section, we will explore how to read Excel spreadsheets using Python.
    One of the key aspects of working with Excel files in Python is having the right
    set of packages that provide the necessary functionality. In this section, we
    will discuss some commonly used Python packages for Excel manipulation and highlight
    their advantages and considerations.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨如何使用 Python 读取 Excel 工作表。在 Python 中处理 Excel 文件的一个关键方面是拥有提供必要功能的正确包集。在本节中，我们将讨论一些常用的用于
    Excel 操作的 Python 包，并突出它们的优点和考虑因素。
- en: Python packages for Excel manipulation
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用于 Excel 操作的 Python 包
- en: When it comes to interacting with Excel files in Python, several packages offer
    a range of features and capabilities. These packages allow you to extract data
    from Excel files, manipulate the data, and write it back to Excel files. Let’s
    take a look at some popular Python packages for Excel manipulation.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到在 Python 中与 Excel 文件交互时，有几个包提供了一系列的功能和特性。这些包允许您从 Excel 文件中提取数据，操作数据，并将其写回
    Excel 文件。让我们来看看一些流行的用于 Excel 操作的 Python 包。
- en: pandas
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: pandas
- en: '`pandas` is a powerful data manipulation library that can read Excel files
    using the `read_excel` function. The advantage of using `pandas` is that it provides
    a `DataFrame` object, which allows you to manipulate the data in a tabular form.
    This makes it easy to perform data analysis and manipulation. `pandas` excels
    in handling large datasets efficiently and provides flexible options for data
    filtering, transformation, and aggregation.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`pandas` 是一个强大的数据处理库，它可以通过 `read_excel` 函数读取 Excel 文件。使用 `pandas` 的优点是它提供了一个
    `DataFrame` 对象，这使得您能够以表格形式操作数据。这使得进行数据分析和操作变得容易。`pandas` 在高效处理大型数据集方面表现出色，并提供了灵活的数据过滤、转换和聚合选项。'
- en: openpyxl
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: openpyxl
- en: '`openpyxl` is a widely used library specifically designed for working with
    Excel files. It provides a comprehensive set of features for reading and writing
    Excel spreadsheets, including support for various Excel file formats and compatibility
    with different versions of Excel. In addition, `openpyxl` allows fine-grained
    control over the structure and content of Excel files, enabling tasks such as
    accessing individual cells, creating new worksheets, and applying formatting.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`openpyxl` 是一个广泛使用的库，专门设计用于处理 Excel 文件。它提供了一套全面的特性用于读取和写入 Excel 工作表，包括对各种 Excel
    文件格式的支持以及与不同版本 Excel 的兼容性。此外，`openpyxl` 允许对 Excel 文件的结构和内容进行精细控制，使得访问单个单元格、创建新工作表和应用格式等任务成为可能。'
- en: xlrd and xlwt
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: xlrd 和 xlwt
- en: '`xlrd` and `xlwt` are older libraries that are still in use for reading and
    writing Excel files, particularly with legacy formats such as `.xls`. `xlrd` enables
    reading data from Excel files, while `xlwt` facilitates writing data to Excel
    files. These libraries are lightweight and straightforward to use, but they lack
    some of the advanced features provided by `pandas` and `openpyxl`.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`xlrd` 和 `xlwt` 是一些较老的库，它们仍然被用于读取和写入 Excel 文件，尤其是用于 `.xls` 这样的旧格式。`xlrd` 允许从
    Excel 文件中读取数据，而 `xlwt` 则便于将数据写入 Excel 文件。这些库轻量级且易于使用，但它们缺乏 `pandas` 和 `openpyxl`
    提供的一些高级特性。'
- en: Considerations
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 考虑因素
- en: 'When choosing a Python package for Excel manipulation, it’s essential to consider
    the specific requirements of your project. Here are a few factors to keep in mind:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择用于 Excel 操作的 Python 包时，考虑您项目的具体需求至关重要。以下是一些需要考虑的因素：
- en: '**Functionality**: Evaluate the package’s capabilities and ensure it meets
    your needs for reading Excel files. Consider whether you require advanced data
    manipulation features or if a simpler package will suffice.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**功能**：评估包的功能，并确保它满足您读取 Excel 文件的需求。考虑您是否需要高级数据操作功能，或者一个更简单的包是否足够。'
- en: '`pandas`, which have optimized algorithms, can offer significant performance
    advantages.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pandas` 拥有优化的算法，可以提供显著的性能优势。'
- en: '**Compatibility**: Check the compatibility of the package with different Excel
    file formats and versions. Ensure that it supports the specific format you are
    working with to avoid any compatibility issues.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**兼容性**：检查包与不同 Excel 文件格式和版本的兼容性。确保它支持您正在使用的特定格式，以避免任何兼容性问题。'
- en: '`pandas`, have a more extensive range of functionality, but they may require
    additional time and effort to master.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pandas` 拥有更广泛的功能，但可能需要更多的时间和精力来掌握。'
- en: Each package offers unique features and has its strengths and weaknesses, allowing
    you to read Excel spreadsheets effectively in Python. For example, if you need
    to read and manipulate large amounts of data, `pandas` may be the better choice.
    However, if you need fine-grained control over the Excel file, `openpyxl` will
    likely fit your needs better.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 每个包都提供独特的功能，各有其优势和劣势，使您能够有效地在 Python 中读取 Excel 电子表格。例如，如果您需要读取和操作大量数据，`pandas`
    可能是更好的选择。然而，如果您需要精细控制 Excel 文件，`openpyxl` 可能更适合您的需求。
- en: Consider the specific requirements of your project, such as data size, functionality,
    and compatibility, to choose the most suitable package for your needs. In the
    following sections, we will delve deeper into how to utilize these packages to
    read and extract data from Excel files using Python.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑您项目的具体要求，例如数据大小、功能性和兼容性，以选择最适合您需求的包。在接下来的章节中，我们将深入探讨如何使用这些包通过 Python 读取和提取
    Excel 文件中的数据。
- en: Opening an Excel sheet from Python and reading the data
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 Python 中打开 Excel 工作表并读取数据
- en: When working with Excel files in Python, it’s common to need to open a specific
    sheet and read the data into Python for further analysis. This can be achieved
    using popular libraries such as `pandas` and `openpyxl`, as discussed in the previous
    section.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中处理 Excel 文件时，通常需要打开特定的工作表并将数据读入 Python 进行进一步分析。这可以通过使用前面章节中讨论的流行库，如
    `pandas` 和 `openpyxl` 来实现。
- en: You can most likely use other Python and package versions, but the code in this
    section has not been tested with anything other than what we’ve stated here.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 您很可能会使用其他 Python 和包版本，但本节中的代码尚未与其他任何内容进行测试，除了我们在此处所提到的。
- en: Using pandas
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 pandas
- en: '`pandas` is a powerful data manipulation library that simplifies the process
    of working with structured data, including Excel spreadsheets. To read an Excel
    sheet using `pandas`, you can use the `read_excel` function. Let’s consider an
    example of using the `iris_data.xlsx` file with a sheet named `setosa`:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`pandas` 是一个强大的数据处理库，简化了处理结构化数据的过程，包括 Excel 电子表格。要使用 `pandas` 读取 Excel 工作表，您可以使用
    `read_excel` 函数。让我们考虑使用名为 `setosa` 的工作表来使用 `iris_data.xlsx` 文件的一个示例：'
- en: '[PRE12]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You will need to run this code either with the Python working directory set
    to the location where the Excel file is located, or you will need to provide the
    full path to the file in the `read_excel()` command:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要将此代码运行在 Python 的工作目录设置为 Excel 文件所在的位置，或者您需要在 `read_excel()` 命令中提供文件的完整路径：
- en: '![Figure 1.6 – Using the pandas package to read the Excel file](img/B19142_01_6.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.6 – 使用 pandas 包读取 Excel 文件](img/B19142_01_6.jpg)'
- en: Figure 1.6 – Using the pandas package to read the Excel file
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.6 – 使用 pandas 包读取 Excel 文件
- en: In the preceding code snippet, we imported the `pandas` library and utilized
    the `read_excel` function to read `setosa` from the `iris_data.xlsx` file. The
    resulting data is stored in a `pandas` `DataFrame`, which provides a tabular representation
    of the data. By calling `head()` on the `DataFrame`, we displayed the first few
    rows of the data, giving us a quick preview.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们导入了 `pandas` 库并使用了 `read_excel` 函数从 `iris_data.xlsx` 文件中读取 `setosa`。结果数据存储在
    `pandas` 的 `DataFrame` 中，它提供了数据的表格表示。通过在 `DataFrame` 上调用 `head()`，我们显示了数据的前几行，以便快速预览。
- en: Using openpyxl
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 openpyxl
- en: '`openpyxl` is a powerful library for working with Excel files, offering more
    granular control over individual cells and sheets. To open an Excel sheet and
    access its data using `openpyxl`, we can utilize the `load_workbook` function.
    Please note that `openpyxl` cannot handle `.xls` files, only the more modern `.xlsx`
    and `.``xlsm` versions.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`openpyxl` 是一个强大的库，用于处理 Excel 文件，它提供了对单个单元格和工作表的更细粒度控制。要使用 `openpyxl` 打开 Excel
    工作表并访问其数据，我们可以使用 `load_workbook` 函数。请注意，`openpyxl` 无法处理 `.xls` 文件，只能处理更现代的 `.xlsx`
    和 `.xlsm` 版本。'
- en: 'Let’s consider an example of using the `iris_data.xlsx` file with a sheet named
    `versicolor`:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个使用名为 `versicolor` 的工作表的 `iris_data.xlsx` 文件的例子：
- en: '[PRE13]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The preceding code results in the following output:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码的结果如下：
- en: '![Figure 1.7 – Using the openpyxl package to read the Excel file](img/B19142_01_7.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.7 – 使用 openpyxl 包读取 Excel 文件](img/B19142_01_7.jpg)'
- en: Figure 1.7 – Using the openpyxl package to read the Excel file
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.7 – 使用 openpyxl 包读取 Excel 文件
- en: In this code snippet, we import the `load_workbook` function from the `openpyxl`
    library. Then, we load the workbook by providing the `iris_data.xlsx` filename.
    Next, we select the desired sheet by accessing it using its name – in this case,
    this is `versicolor`. Once we’ve done this, we read the raw data using the `values`
    property of the loaded sheet object. This is a generator and can be accessed via
    a `for` cycle or by converting it into a list or a `DataFrame`, for example. In
    this example, we have converted it into a `pandas` `DataFrame` because it is the
    format that is the most comfortable to work with later.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个代码片段中，我们从 `openpyxl` 库中导入 `load_workbook` 函数。然后，我们通过提供 `iris_data.xlsx` 文件名来加载工作簿。接下来，我们通过访问其名称来选择所需的工作表——在这种情况下，这是
    `versicolor`。一旦我们完成这个操作，我们就使用加载的工作表对象的 `values` 属性来读取原始数据。这是一个生成器，可以通过 `for` 循环或将其转换为列表或
    `DataFrame` 等方式来访问。在这个例子中，我们将其转换为 `pandas` `DataFrame`，因为这是以后最舒适的工作格式。
- en: Both `pandas` and `openpyxl` offer valuable features for working with Excel
    files in Python. While pandas simplifies data manipulation with its `DataFrame`
    structure, `openpyxl` provides more fine-grained control over individual cells
    and sheets. Depending on your specific requirements, you can choose the library
    that best suits your needs.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`pandas` 和 `openpyxl` 都为在 Python 中处理 Excel 文件提供了有价值的特性。虽然 pandas 通过其 `DataFrame`
    结构简化了数据操作，但 `openpyxl` 提供了对单个单元格和工作表的更精细的控制。根据您的具体需求，您可以选择最适合您需求的库。'
- en: By mastering the techniques of opening Excel sheets and reading data into Python,
    you will be able to extract valuable insights from your Excel data, perform various
    data transformations, and prepare it for further analysis or visualization. These
    skills are essential for anyone seeking to leverage the power of Python and Excel
    in their data-driven workflows.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 通过掌握打开 Excel 工作表并将数据读入 Python 的技术，您将能够从 Excel 数据中提取有价值的见解，执行各种数据转换，并为其进一步的分析或可视化做准备。这些技能对于任何寻求利用
    Python 和 Excel 的力量在他们的数据驱动工作流程中的人来说是必不可少的。
- en: Reading in multiple sheets with Python (openpyxl and custom functions)
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Python 读取多个工作表（openpyxl 和自定义函数）
- en: In many Excel files, it’s common to have multiple sheets containing different
    sets of data. Being able to read in multiple sheets and consolidate the data into
    a single data structure can be highly valuable for analysis and processing. In
    this section, we will explore how to achieve this using the `openpyxl` library
    and a custom function.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多 Excel 文件中，常见的情况是包含多个工作表，每个工作表包含不同的数据集。能够读取多个工作表并将数据合并到单一的数据结构中，对于分析和处理来说非常有价值。在本节中，我们将探讨如何使用
    `openpyxl` 库和自定义函数来实现这一点。
- en: The importance of reading multiple sheets
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 读取多个工作表的重要性
- en: When working with complex Excel files, it’s not uncommon to encounter scenarios
    where related data is spread across different sheets. For example, you may have
    one sheet for sales data, another for customer information, and yet another for
    product inventory. By reading in multiple sheets and consolidating the data, you
    can gain a holistic view and perform a comprehensive analysis.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 当处理复杂的 Excel 文件时，遇到相关数据分散在不同工作表中的情况并不少见。例如，您可能有一个用于销售数据的工作表，另一个用于客户信息，还有一个用于产品库存。通过读取多个工作表并合并数据，您可以获得全面的视角并执行全面的分析。
- en: 'Let’s start by examining the basic steps involved in reading in multiple sheets:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先来检查读取多个工作表所涉及的基本步骤：
- en: '`load_workbook` function provided by `openpyxl`.'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由 `openpyxl` 提供的 `load_workbook` 函数。
- en: '`sheetnames` attribute. This allows us to identify the sheets we want to read.'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`sheetnames` 属性。这允许我们识别我们想要读取的工作表。'
- en: '`Openpyxl` provides methods such as `iter_rows` or `iter_cols` to traverse
    the cells of each sheet and retrieve the desired data.'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Openpyxl` 提供了 `iter_rows` 或 `iter_cols` 等方法来遍历每个工作表的单元格并检索所需的数据。'
- en: '`pandas` `DataFrame` or a Python list. As we read the data from each sheet,
    we concatenate or merge it into the consolidated data structure:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`pandas` `DataFrame` 或 Python 列表。当我们从每个工作表读取数据时，我们将它连接或合并到合并的数据结构中：'
- en: If the data in all sheets follows the same format (as is the case in the example
    used in this chapter), we can simply concatenate the datasets
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果所有工作表中的数据都遵循相同的格式（如本章中使用的示例），我们可以简单地连接数据集
- en: However, if the datasets have different structures because they describe different
    aspects of a dataset (for example, one sheet contains product information, the
    next contains customer data, and the third contains the sales of the products
    to the customers), then we can merge these datasets based on unique identifiers
    to create a comprehensive dataset
  id: totrans-147
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然而，如果数据集具有不同的结构，因为它们描述了数据集的不同方面（例如，一个工作表包含产品信息，下一个包含客户数据，第三个包含产品对客户的销售），那么我们可以根据唯一标识符合并这些数据集以创建一个综合数据集
- en: Using openpyxl to access sheets
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 openpyxl 访问工作表
- en: '`openpyxl` is a powerful library that allows us to interact with Excel files
    using Python. It provides a wide range of functionalities, including accessing
    and manipulating multiple sheets. Before we dive into the details, let’s take
    a moment to understand why `openpyxl` is a popular choice for this task.'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '`openpyxl` 是一个强大的库，它允许我们使用 Python 与 Excel 文件交互。它提供了一系列功能，包括访问和操作多个工作表。在我们深入了解细节之前，让我们花点时间了解为什么
    `openpyxl` 是这个任务的流行选择。'
- en: One of the primary advantages of `openpyxl` is its ability to handle various
    Excel file formats, such as `.xlsx` and `.xlsm`. This flexibility allows us to
    work with different versions of Excel files without compatibility issues. Additionally,
    `openpyxl` provides a straightforward and intuitive interface to access sheet
    data, making it easier for us to retrieve the desired information.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '`openpyxl` 的一个主要优点是它能够处理各种 Excel 文件格式，如 `.xlsx` 和 `.xlsm`。这种灵活性允许我们处理不同版本的
    Excel 文件而不会出现兼容性问题。此外，`openpyxl` 提供了一个简单直观的接口来访问工作表数据，这使得我们更容易检索所需的信息。'
- en: Reading data from each sheet
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从每个工作表中读取数据
- en: To begin reading in multiple sheets, we need to load the Excel workbook using
    the `load_workbook` function provided by `openpyxl`. This function takes the file
    path as input and returns a workbook object that represents the entire Excel file.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始读取多个工作表，我们需要使用 `openpyxl` 提供的 `load_workbook` 函数加载 Excel 工作簿。这个函数接受文件路径作为输入，并返回一个表示整个
    Excel 文件的工作簿对象。
- en: Once we have loaded the workbook, we can retrieve the names of all the sheets
    using the sheetnames attribute. This gives us a list of sheet names present in
    the Excel file. We can then iterate over these sheet names to read the data from
    each sheet individually.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们加载了工作簿，我们可以使用 `sheetnames` 属性检索所有工作表的名称。这给我们一个在 Excel 文件中存在的表名列表。然后我们可以遍历这些表名，逐个读取每个工作表中的数据。
- en: Retrieving sheet data with openpyxl
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 openpyxl 获取工作表数据
- en: '`openpyxl` provides various methods to access the data within a sheet.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`openpyxl` 提供了各种方法来访问工作表中的数据。'
- en: Two commonly used methods are `iter_rows` and `iter_cols`. These methods allow
    us to iterate over the rows or columns of a sheet and retrieve the cell values.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 两种常用的方法是 `iter_rows` 和 `iter_cols`。这些方法允许我们遍历工作表的行或列，并检索单元格值。
- en: 'Let’s have a look at how `iter_rows` can be used:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看 `iter_rows` 可以如何使用：
- en: '[PRE14]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Similarly, `iter_cols` can be used like this:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，`iter_cols` 可以这样使用：
- en: '[PRE15]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: When using `iter_rows` or `iter_cols`, we can specify whether we want to retrieve
    the cell values as raw values or as formatted values. Raw values give us the actual
    data stored in the cells, while formatted values include any formatting applied
    to the cells, such as date formatting or number formatting.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 `iter_rows` 或 `iter_cols` 时，我们可以指定我们想要检索单元格值是原始值还是格式化值。原始值给我们实际的单元格数据，而格式化值包括应用于单元格的任何格式，例如日期格式或数字格式。
- en: By iterating over the rows or columns of a sheet, we can retrieve the desired
    data and store it in a suitable data structure. One popular choice is to use `pandas`
    `DataFrame`, which provide a tabular representation of the data and offer convenient
    methods for data manipulation and analysis.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 通过遍历工作表的行或列，我们可以检索所需数据并将其存储在合适的数据结构中。一个流行的选择是使用 `pandas` `DataFrame`，它提供了数据的表格表示，并提供了方便的数据操作和分析方法。
- en: An alternative solution is using the `values` attribute of the sheet object.
    This provides a generator for all values in the sheet (much like `iter_rows` and
    `iter_cols` do for rows and columns, respectively). While generators cannot be
    used directly to access the data, they can be used in `for` cycles to iterate
    over each value. The `pandas` library’s `DataFrame` function also allows direct
    conversion from a suitable generator object to a `DataFrame`.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种解决方案是使用工作表对象的`values`属性。这为工作表中的所有值提供了一个生成器（类似于`iter_rows`和`iter_cols`分别对行和列做的那样）。虽然生成器不能直接用于访问数据，但它们可以在`for`循环中使用以遍历每个值。`pandas`库的`DataFrame`函数还允许直接从合适的生成器对象转换为`DataFrame`。
- en: Combining data from multiple sheets
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从多个工作表中合并数据
- en: As we read the data from each sheet, we can store it in a list or dictionary,
    depending on our needs. Once we have retrieved the data from all the sheets, we
    can combine it into a single consolidated data structure. This step is crucial
    for further analysis and processing.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们从每个工作表中读取数据时，我们可以根据需要将其存储在列表或字典中。一旦我们从所有工作表中检索到数据，我们就可以将其组合成一个单一的综合数据结构。这一步对于进一步的分析和处理至关重要。
- en: To combine the data, we can use `pandas` `DataFrame`. By creating individual
    `DataFrame` for each sheet’s data and then concatenating or merging them into
    a single `DataFrame`, we can obtain a comprehensive dataset that includes all
    the information from multiple sheets.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 为了合并数据，我们可以使用`pandas` `DataFrame`。通过为每个工作表的数据创建单独的`DataFrame`，然后将它们连接或合并成一个单一的`DataFrame`，我们可以获得一个包含多个工作表中所有信息的综合数据集。
- en: Custom function for reading multiple sheets
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 读取多个工作表的自定义函数
- en: To simplify the process of reading in multiple sheets and consolidating the
    data, we can create custom functions tailored to our specific requirements. These
    functions encapsulate the necessary steps and allow us to reuse the code efficiently.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化读取多个工作表和合并数据的过程，我们可以创建针对特定需求的自定义函数。这些函数封装了必要的步骤，并允许我们高效地重用代码。
- en: In our example, we define a function called `read_multiple_sheets` that takes
    the file path as input. Inside the function, we load the workbook using `load_workbook`
    and iterate over the sheet names retrieved with the sheets attribute.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们定义了一个名为`read_multiple_sheets`的函数，该函数接受文件路径作为输入。在函数内部，我们使用`load_workbook`加载工作簿，并遍历通过`sheets`属性检索到的工作表名称。
- en: For each sheet, we access it using the workbook object and retrieve the data
    using the custom read_single_sh`eet` function. We then store the retrieved data
    in a list. Finally, we combine the data from all the sheets into a single `pandas`
    `DataFrame` using the appropriate concatenation method from `pandas`.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个工作表，我们使用工作簿对象访问它，并使用自定义的`read_single_sh`eet`函数检索数据。然后我们将检索到的数据存储在列表中。最后，我们使用`pandas`的适当连接方法将所有工作表的数据合并成一个单一的`pandas`
    `DataFrame`。
- en: By using these custom functions, we can easily read in multiple sheets from
    an Excel file and obtain a consolidated dataset that’s ready for analysis. The
    function provides a reusable and efficient solution, saving us time and effort
    in dealing with complex Excel files.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用这些自定义函数，我们可以轻松地从Excel文件中读取多个工作表，并获取一个准备分析的综合数据集。该函数提供了一个可重用且高效的解决方案，节省了我们处理复杂Excel文件的时间和精力。
- en: Customizing the code
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义代码
- en: 'The provided example is a starting point that you can customize based on your
    specific requirements. Here are a few considerations for customizing the code:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 提供的示例是一个起点，你可以根据具体需求进行自定义。以下是自定义代码的一些考虑因素：
- en: '`iter_cols` method instead of the `values` attribute and using a filtered list
    in a `for` cycle or by filtering the resulting `pandas` `DataFrame` object(s).'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`iter_cols`方法而不是`values`属性，并在`for`循环中使用过滤列表或通过过滤结果`pandas` `DataFrame`对象。
- en: '**Handling missing data**: If the sheets contain missing data, you can incorporate
    appropriate handling techniques, such as filling in missing values or excluding
    incomplete rows.'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**处理缺失数据**：如果工作表包含缺失数据，你可以采用适当的数据处理技术，例如填充缺失值或排除不完整行。'
- en: '**Applying transformations**: Depending on the nature of your data, you might
    need to apply transformations or calculations to the consolidated dataset. The
    custom function can be expanded to accommodate these transformations.'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用转换**：根据数据性质，你可能需要对综合数据集应用转换或计算。自定义函数可以扩展以适应这些转换。'
- en: Remember, the goal is to tailor the code to suit your unique needs and ensure
    it aligns with your data processing requirements.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，目标是使代码适应您独特的需求并确保它与数据处理要求保持一致。
- en: By leveraging the power of `openpyxl` and creating custom functions, you can
    efficiently read in multiple sheets from Excel files, consolidate the data, and
    prepare it for further analysis. This capability enables you to unlock valuable
    insights from complex Excel files and leverage the full potential of your data.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 通过利用`openpyxl`的力量并创建自定义函数，您可以高效地从Excel文件中读取多个工作表，合并数据，并为其进一步分析做好准备。这种能力使您能够从复杂的Excel文件中解锁有价值见解并发挥数据的全部潜力。
- en: 'Now, let’s dive into an example that demonstrates this process:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们深入一个示例，演示这个过程：
- en: '[PRE16]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Let’s have a look at the results:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看结果：
- en: '![Figure 1.8 – Using the openxlsx package to read in the Excel file](img/B19142_01_8.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![图1.8 – 使用openxlsx包读取Excel文件](img/B19142_01_8.jpg)'
- en: Figure 1.8 – Using the openxlsx package to read in the Excel file
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.8 – 使用openxlsx包读取Excel文件
- en: 'In the preceding code, we define two functions:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们定义了两个函数：
- en: '`read_single_sheet`: This reads the data from a single sheet into a `pandas`
    `DataFrame`'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`read_single_sheet`: 这将从单个工作表读取数据到`pandas` `DataFrame`'
- en: '`read_multiple_sheets`: This reads and concatenates the data from all sheets
    in the workbook'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`read_multiple_sheets`: 这将读取并连接工作簿中所有工作表的数据'
- en: Within the `read_multiple_sheets` function, we load the workbook using `load_workbook`
    and iterate over the sheet names. For each sheet, we retrieve the data using the
    `read_single_sheet` helper function, which reads the data from a sheet and creates
    a `pandas` `DataFrame` for each sheet’s data, with the header row used as column
    names. Finally, we use `pd.concat` to combine all the `DataFrame` into a single
    consolidated `DataFrame`.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在`read_multiple_sheets`函数中，我们使用`load_workbook`加载工作簿，并遍历工作表名称。对于每个工作表，我们使用`read_single_sheet`辅助函数检索数据，该函数从工作表读取数据并为每个工作表的数据创建一个`pandas`
    `DataFrame`，使用标题行作为列名。最后，我们使用`pd.concat`将所有`DataFrame`合并成一个单一的综合`DataFrame`。
- en: By utilizing these custom functions, we can easily read in multiple sheets from
    an Excel file and obtain a consolidated dataset. This allows us to perform various
    data manipulations, analyses, or visualizations on the combined data.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 通过利用这些自定义函数，我们可以轻松地从Excel文件中读取多个工作表并获取一个综合数据集。这使我们能够对合并后的数据进行各种数据操作、分析或可视化。
- en: Understanding how to handle multiple sheets efficiently enhances our ability
    to work with complex Excel files and extract valuable insights from diverse datasets.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 理解如何高效地处理多个工作表增强了我们处理复杂Excel文件和从不同数据集中提取有价值见解的能力。
- en: Summary
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we explored the process of importing data from Excel spreadsheets
    into our programming environments. For R users, we delved into the functionalities
    of libraries such as `readxl`, `xlsx`, and `openxlsx`, providing efficient solutions
    for extracting and manipulating data. We also introduced a custom function, `read_excel_sheets`,
    to streamline the process of extracting data from multiple sheets within Excel
    files. On the Python side, we discussed the essential `pandas` and `openpyxl`
    packages for Excel manipulation, demonstrating their features through practical
    examples. At this point, you should have a solid understanding of these tools
    and their capabilities for efficient Excel manipulation and data analysis.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了将数据从Excel工作表导入到我们的编程环境中的过程。对于R用户，我们深入探讨了`readxl`、`xlsx`和`openxlsx`等库的功能，提供了高效的数据提取和操作解决方案。我们还介绍了一个自定义函数`read_excel_sheets`，以简化从Excel文件中的多个工作表提取数据的过程。在Python方面，我们讨论了用于Excel操作的必要`pandas`和`openpyxl`包，并通过实际示例展示了它们的功能。到这一点，你应该对这些工具及其在高效Excel操作和数据分析方面的能力有了坚实的理解。
- en: In the next chapter, we will learn how to write the results to Excel.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何将结果写入Excel。
