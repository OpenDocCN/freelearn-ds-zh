- en: Chapter 12. Know your Map
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 12 章。了解你的地图
- en: 'In this chapter we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Projecting the US map
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 投影美国地图
- en: Projecting the world map
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 投影世界地图
- en: Building a choropleth map
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建渐变色地图
- en: Introduction
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: The ability to project and correlate data points to geographic regions is crucial
    in many types of visualizations. Geographic visualization is a complex topic with
    many competing standards emerging and maturing for today's web technology. D3
    provides few different ways to visualize geographic and cartographic data. In
    this chapter we will introduce basic D3 cartographic visualization techniques
    and how to implement a fully-functional choropleth map (a special purpose colored
    map) in D3.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 能够将数据点投影并关联到地理区域的能力在许多类型的可视化中至关重要。地理可视化是一个复杂的话题，许多标准正在今天的技术中竞争和成熟。D3 提供了几种不同的方式来可视化地理和制图数据。在本章中，我们将介绍基本的
    D3 制图可视化技术以及如何在 D3 中实现一个功能齐全的渐变色地图（一种特殊用途的彩色地图）。
- en: Projecting the US map
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 投影美国地图
- en: In this recipe we are going to start with projecting the US map using D3 geo
    API, while also getting familiar with a few different JSON data formats for describing
    geographic data. Let's first take a look at how geographic data are typically
    presented and consumed in JavaScript.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将从使用 D3 地图 API 投影美国地图开始，同时熟悉描述地理数据的几种不同的 JSON 数据格式。让我们首先看看地理数据通常是如何在
    JavaScript 中表示和消费的。
- en: GeoJSON
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GeoJSON
- en: The first standard JavaScript geographic data format we are going to touch upon
    is called **GeoJSON**. GeoJSON format differs from other GIS standards in that
    it was written and is maintained by an Internet working group of developers.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要接触的第一个标准 JavaScript 地理数据格式被称为 **GeoJSON**。GeoJSON 格式与其他 GIS 标准的不同之处在于，它是由一个开发者的互联网工作组编写和维护的。
- en: 'GeoJSON is a format for encoding a variety of geographic data structure. A
    GeoJSON object may represent geometry, a feature, or a collection of features.
    GeoJSON supports the following geometry types: Point, LineString, Polygon, MultiPoint,
    MultiLineString, MultiPolygon, and GeometryCollection. Features in GeoJSON contain
    a geometry object and additional properties, and a feature collection represents
    a list of features.'
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: GeoJSON 是一种用于编码各种地理数据结构的格式。GeoJSON 对象可以表示几何形状、特征或特征集合。GeoJSON 支持以下几何类型：点（Point）、线字符串（LineString）、多边形（Polygon）、多点（MultiPoint）、多线字符串（MultiLineString）、多边形（MultiPolygon）和几何集合（GeometryCollection）。GeoJSON
    中的特征包含一个几何对象和额外的属性，而特征集合表示特征列表。
- en: ''
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Source: [http://www.geojson.org/](http://www.geojson.org/)'
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://www.geojson.org/](http://www.geojson.org/)
- en: 'GeoJSON format is a very popular standard for encoding GIS information and
    is supported by numerous open source as well as commercial softwares. GeoJSON
    format uses latitude and longitude points as its coordinates, therefore, it requires
    any software, including D3, to find the proper projection, scale and translation
    method in order to visualize its data. The following GeoJSON data describes the
    state of Alabama in feature coordinates:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: GeoJSON 格式是编码 GIS 信息的非常流行的标准，被众多开源和商业软件支持。GeoJSON 格式使用经纬度点作为其坐标，因此，它要求包括 D3
    在内的任何软件找到适当的投影、缩放和转换方法，以便可视化其数据。以下 GeoJSON 数据描述了以特征坐标表示的阿拉巴马州的状态：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: GeoJSON is currently the de facto GIS information standard for JavaScript project
    and is well supported by D3; however, before we jump right into D3 geographic
    visualization using this data format, we want to also introduce you to another
    emerging technology closely related to GeoJSON.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: GeoJSON 目前是 JavaScript 项目中事实上的 GIS 信息标准，并且得到了 D3 的良好支持；然而，在我们直接跳入使用这种数据格式进行
    D3 地理可视化之前，我们还想向您介绍另一种与 GeoJSON 密切相关的正在兴起的科技。
- en: TopoJSON
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: TopoJSON
- en: TopoJSON is an extension of GeoJSON that encodes topology. Rather than representing
    geometries discretely, geometries in TopoJSON files are stitched together from
    shared line segments called arcs. TopoJSON eliminates redundancy, offering much
    more compact representations of geometry than with GeoJSON; typical TopoJSON files
    are 80% smaller than their GeoJSON equivalents. In addition, TopoJSON facilitates
    applications that use topology, such as topology-preserving shape simplification,
    automatic map coloring, and cartograms.
  id: totrans-18
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: TopoJSON 是 GeoJSON 的一个扩展，用于编码拓扑。在 TopoJSON 文件中，几何形状不是离散表示的，而是由称为弧的共享线段拼接而成的。TopoJSON
    消除了冗余，提供了比 GeoJSON 更紧凑的几何形状表示；典型的 TopoJSON 文件比其 GeoJSON 等效文件小 80%。此外，TopoJSON
    促进了使用拓扑的应用，如拓扑保持形状简化、自动地图着色和地图变形。
- en: ''
  id: totrans-19
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: TopoJSON Wiki https://github.com/mbostock/topojson
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: TopoJSON Wiki https://github.com/mbostock/topojson
- en: TopoJSON was created by D3's author *Mike Bostock* and designed to overcome
    some of the drawbacks in GeoJSON while providing a similar feature set when describing
    geographic information. In most cases concerning cartographic visualization TopoJSON
    can be a drop-in replacement for GeoJSON with much smaller footprint and better
    performance. Therefore, in this chapter we will use TopoJSON instead of GeoJSON.
    Nevertheless, all techniques discussed in this chapter will work perfectly fine
    with GeoJSON as well. We will not list TopoJSON example here since its arcs based
    format is not very human readable. However, you can easily convert your **shapefiles**
    (popular open source geographic vector format file) into TopoJSON using `ogr2ogr`
    command line tool provided by GDAL ([http://www.gdal.org/ogr2ogr.html](http://www.gdal.org/ogr2ogr.html)).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: TopoJSON是由D3的作者**Mike Bostock**创建的，旨在克服GeoJSON的一些缺点，同时在描述地理信息时提供类似的功能集。在大多数涉及地图可视化的情况下，TopoJSON可以作为GeoJSON的替代品，具有更小的体积和更好的性能。因此，在本章中，我们将使用TopoJSON而不是GeoJSON。尽管如此，本章中讨论的所有技术也可以与GeoJSON完美配合。我们不会在这里列出TopoJSON的示例，因为其基于弧的格式不太适合人类阅读。然而，您可以使用GDAL提供的命令行工具`ogr2ogr`轻松地将您的**shapefiles**（流行的开源地理矢量格式文件）转换为TopoJSON（[http://www.gdal.org/ogr2ogr.html](http://www.gdal.org/ogr2ogr.html)）。
- en: Now equipped with this background information let's see how we can make a map
    in D3.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了这些背景信息，让我们看看如何在D3中制作地图。
- en: Getting ready
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser hosted on your
    local HTTP server:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的本地HTTP服务器上托管的网络浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter12/usa.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter12/usa.html)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter12/usa.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter12/usa.html)'
- en: How to do it...
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In this recipe we will load US TopoJSON data and render them using D3 Geo API.
    Here is the code sample:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将加载美国TopoJSON数据并使用D3 Geo API进行渲染。以下是代码示例：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This recipe projects US map with Albers USA mode:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方使用Albers USA模式投影美国地图：
- en: '![How to do it...](img/2162OS_12_01.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/2162OS_12_01.jpg)'
- en: US map projected with Albers USA mode
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Albers USA模式投影的美国地图
- en: How it works...
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作...
- en: 'As you can see, the code required to project a US map using TopoJSON and D3
    is quite short, especially the part concerning map projection. This is because
    both D3 geographic API and TopoJSON library are built explicitly to make this
    kind of job as easy as possible for developers. To make a map, first you need
    to load the TopoJSON data file (line A). The following screenshot shows what the
    topology data looks like once loaded:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，使用TopoJSON和D3投影美国地图所需的代码相当简短，尤其是关于地图投影的部分。这是因为D3地理API和TopoJSON库都是专门构建的，以便尽可能简化开发者的工作。要制作地图，首先您需要加载TopoJSON数据文件（行A）。以下截图显示了加载后的拓扑数据的外观：
- en: '![How it works...](img/2162OS_12_02.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/2162OS_12_02.jpg)'
- en: Topology data from TopoJSON
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: TopoJSON拓扑数据
- en: 'Once the topology data is loaded, all we have to do is to use the TopoJSON
    library `topojson.feature` function to convert topology arcs into coordinates
    similar to what GeoJSON format provides as shown in the following screenshot:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦加载了拓扑数据，我们只需使用TopoJSON库的`topojson.feature`函数将拓扑弧转换为类似于GeoJSON格式提供的坐标，如下面的截图所示：
- en: '![How it works...](img/2162OS_12_03.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/2162OS_12_03.jpg)'
- en: Feature collection converted using topojson.feature function
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 使用topojson.feature函数转换的特征集合
- en: 'Then `d3.geo.path` will automatically recognize and use the coordinates to
    generate `svg:path` highlighted in the following code snippet:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 然后`d3.geo.path`将自动识别并使用坐标来生成以下代码片段中突出显示的`svg:path`：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'That''s it! This is all you need to do to project a map in D3 using TopoJSON.
    Additionally, we have also attached a zoom handler to the parent `svg:g` element:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！这就是使用TopoJSON在D3中投影地图所需的所有操作。此外，我们还向父`svg:g`元素附加了一个缩放处理程序：
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This allows the user to perform simple geometric zoom on our map.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许用户在我们的地图上执行简单的几何缩放。
- en: See also
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: 'GeoJSON v1.0 specification: [http://www.geojson.org/geojson-spec.html](http://www.geojson.org/geojson-spec.html)'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GeoJSON v1.0规范：[http://www.geojson.org/geojson-spec.html](http://www.geojson.org/geojson-spec.html)
- en: 'TopoJSON Wiki: [https://github.com/mbostock/topojson/wiki](https://github.com/mbostock/topojson/wiki)'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TopoJSON Wiki：[https://github.com/mbostock/topojson/wiki](https://github.com/mbostock/topojson/wiki)
- en: 'More on making map from shapefiles to TopoJSON: [http://bost.ocks.org/mike/map/](http://bost.ocks.org/mike/map/)'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更多关于从shapefiles制作TopoJSON的信息：[http://bost.ocks.org/mike/map/](http://bost.ocks.org/mike/map/)
- en: '[Chapter 3](ch03.html "Chapter 3. Dealing with Data"), *Dealing with Data*,
    for more information on asynchronous data loading'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第3章](ch03.html "第3章。处理数据"), *处理数据*, 了解异步数据加载的相关信息'
- en: '[Chapter 10](ch10.html "Chapter 10. Interacting with your Visualization"),
    *Interacting with your Visualization*, for more information on how to implement
    zooming'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第10章](ch10.html "第10章。与你的可视化交互"), *与你的可视化交互*, 了解如何实现缩放的相关信息'
- en: Mike Bostock's post on Albers USA projection on which this recipe is based [http://bl.ocks.org/mbostock/4090848](http://bl.ocks.org/mbostock/4090848)
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于本菜谱的Mike Bostock关于Albers USA投影的帖子 [http://bl.ocks.org/mbostock/4090848](http://bl.ocks.org/mbostock/4090848)
- en: Projecting the world map
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 投影世界地图
- en: What if our visualization project is not just about US, but rather concerns
    the whole world? No worries, D3 comes with various built-in projection modes that
    work well with the world map that we will explore in this recipe.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们的可视化项目不仅仅是关于美国，而是涉及整个世界呢？不用担心，D3提供了各种内置的投影模式，这些模式在本菜谱中我们将探讨。
- en: Getting ready
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser hosted on your
    local HTTP server:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的本地HTTP服务器上托管您的网络浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter12/world.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter12/world.html)'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter12/world.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter12/world.html)'
- en: How to do it...
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In this recipe we will project the world map using various different D3 built-in
    projection modes. Here is the code sample:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在本菜谱中，我们将使用不同的D3内置投影模式来投影世界地图。以下是代码示例：
- en: '[PRE4]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This recipe generates world maps with different projection modes as shown in
    the following screenshot:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 本菜谱生成了具有不同投影模式的世界地图，如下面的截图所示：
- en: '![How to do it...](img/2162OS_12_04.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/2162OS_12_04.jpg)'
- en: World Map Projection
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 世界地图投影
- en: How it works...
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe we first define an array containing six different D3 projection
    modes on line A. A world topology data was loaded on line B. Similar to the previous
    recipe we have a `d3.geo.path` generator defined on line C; however, in this recipe
    we customized the projection mode for geo path generator calling its `projection`
    function. The rest of the recipe is almost identical to what we have done in the
    previous recipe. The `topojson.feature` function was used to convert topology
    data into geographic coordinates so `d3.geo.path` can generate `svg:path` required
    for map rendering (line D and E).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在本菜谱中，我们首先在行A上定义了一个包含六个不同D3投影模式的数组。在行B上加载了世界拓扑数据。与之前的菜谱类似，我们在行C上定义了一个`d3.geo.path`生成器；然而，在本菜谱中，我们为地理路径生成器自定义了投影模式，通过调用其`projection`函数。本菜谱的其余部分几乎与之前所做的相同。`topojson.feature`函数被用来将拓扑数据转换为地理坐标，以便`d3.geo.path`可以生成用于地图渲染所需的`svg:path`（行D和E）。
- en: See also
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: D3 wiki Geo Projection page ([https://github.com/mbostock/d3/wiki/Geo-Projections](https://github.com/mbostock/d3/wiki/Geo-Projections))
    for more information on different projection modes as well as on how raw custom
    projection can be implemented
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: D3 wiki 地理投影页面 ([https://github.com/mbostock/d3/wiki/Geo-Projections](https://github.com/mbostock/d3/wiki/Geo-Projections))，了解更多关于不同投影模式以及如何实现原始自定义投影的信息
- en: Building a choropleth map
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建着色图
- en: Choropleth map is a thematic map, in other words, a specially designed map not
    a general purpose one, which is designed to show measurement of statistical variable
    on the map using different color shades or patterns; or sometimes referred as
    geographic heat-map in simpler terms. We have already seen in the previous two
    recipes that geographic projection in D3 consists of a group of `svg:path` elements,
    therefore, they can be manipulated as any other `svg` elements including coloring.
    We will explore this feature in geo-projection and implement a Choropleth map
    in this recipe.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 着色图是一种专题地图，换句话说，它是一种专门设计的地图，而不是通用目的的地图，它通过使用不同的颜色阴影或图案在地图上展示统计变量的测量值；或者有时简单地被称为地理热图。在前两个菜谱中，我们已经看到D3中的地理投影由一组`svg:path`元素组成，因此，它们可以被像其他任何`svg`元素一样操作，包括着色。我们将在本菜谱中探索这个特性，并实现一个着色图。
- en: Getting ready
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser hosted on your
    local HTTP server:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的本地HTTP服务器上托管您的网络浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter12/choropleth.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter12/choropleth.html)'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter12/choropleth.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter12/choropleth.html)'
- en: How to do it...
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In a choropleth map different geographic regions are colored according to their
    corresponding variables, in this case based on 2008 unemployment rate in US by
    county. Now, let''s see how to do it in code:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在渐变地图中，不同的地理区域根据其相应的变量着色，在本例中基于2008年美国各县的失业率。现在，让我们看看如何在代码中实现它：
- en: '[PRE5]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This recipe generates the following choropleth map:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱生成以下渐变地图：
- en: '![How to do it...](img/2162OS_12_05.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/2162OS_12_05.jpg)'
- en: Choropleth Map of 2008 Unemployment Rate
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 2008年失业率渐变地图
- en: How it works...
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'In this recipe we loaded two different data sets: one for the US topology and
    the other containing unemployment rate by county in 2008\. This technique is generally
    considered as layering and is not necessarily limited to only two layers. The
    unemployment data are stitched to counties by their ID (line B and C). Region
    coloring is achieved by using a threshold scale (line A). One last point worth
    mentioning is the `topojson.mesh` function used to render state borders. `topojson.mesh`
    is useful for rendering strokes in complicated objects efficiently since it only
    renders shared edge by multiple features once.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们加载了两个不同的数据集：一个用于美国拓扑结构，另一个包含2008年各县的失业率。这种技术通常被认为是分层，并不一定仅限于两层。失业数据通过其ID（B行和C行）与县连接。区域着色是通过使用阈值刻度（A行）实现的。最后一点值得提的是，用于渲染州边界的`topojson.mesh`函数。`topojson.mesh`在高效渲染复杂对象的线条时非常有用，因为它只渲染多个特征共享的边一次。
- en: See also
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考信息
- en: 'TopoJSON Wiki for more information on mesh function: [https://github.com/mbostock/topojson/wiki/API-Reference#wiki-mesh](https://github.com/mbostock/topojson/wiki/API-Reference#wiki-mesh)'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TopoJSON Wiki，了解更多关于网格函数的信息：[https://github.com/mbostock/topojson/wiki/API-Reference#wiki-mesh](https://github.com/mbostock/topojson/wiki/API-Reference#wiki-mesh)
- en: 'D3 Wiki for more information on threshold scale: [https://github.com/mbostock/d3/wiki/Quantitative-Scales#wiki-threshold](https://github.com/mbostock/d3/wiki/Quantitative-Scales#wiki-threshold)'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: D3 Wiki，了解更多关于阈值刻度的信息：[https://github.com/mbostock/d3/wiki/Quantitative-Scales#wiki-threshold](https://github.com/mbostock/d3/wiki/Quantitative-Scales#wiki-threshold)
- en: 'Mike Bostock''s post on choropleth map which this recipe is based on: [http://bl.ocks.org/mbostock/4090848](http://bl.ocks.org/mbostock/4090848)'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mike Bostock关于渐变地图的帖子，本食谱基于此：[http://bl.ocks.org/mbostock/4090848](http://bl.ocks.org/mbostock/4090848)
