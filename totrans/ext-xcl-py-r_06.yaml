- en: '6'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Inserting ggplot2/matplotlib Graphs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As a programmer, data visualizations are an indispensable tool for analyzing
    and presenting complex information in a more accessible and intuitive manner.
    They play a vital role in various domains, from data analysis and business intelligence
    to scientific research and even everyday decision-making. One of the reasons that
    visuals are beneficial to decision-making is that they help an analyst understand
    data to help communicate items that can help in the decision-making process. Here
    are some other reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Enhanced understanding**: Visualizations provide a clear and concise representation
    of data, making it easier for both technical and non-technical stakeholders to
    grasp complex relationships, trends, and patterns. They help identify outliers,
    correlations, and insights that might otherwise be overlooked in raw data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Effective communication**: Visualizations are a powerful communication tool
    that transcends language barriers and simplifies complex concepts. Presenting
    data in charts, graphs, and interactive dashboards allows for a more compelling
    and persuasive narrative during meetings, presentations, and reports. When data
    is presented visually, it becomes easier to digest and understand. For example,
    a Sankey chart helps to make a visualization of how data flows from a starting
    point to an endpoint easily digestible.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Geospatial analysis**: Geographic data visualizations enable deeper exploration.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examples of popular data visualizations include line charts for time series
    analysis, bar and pie charts for categorical data comparison, scatter plots for
    correlation analysis, bubble charts for multivariate comparisons, and choropleth
    maps for geospatial data representation.
  prefs: []
  type: TYPE_NORMAL
- en: In conclusion, data visualizations are indispensable for programmers, as they
    facilitate data understanding, communication, decision-making, and exploration,
    making them an essential tool in today’s data-driven world.
  prefs: []
  type: TYPE_NORMAL
- en: In the following sections, we are going to explore the use of `ggplot2` and
    `cowplot` to build some visualizations, such as histograms, ordered bar charts,
    and dumbbell charts.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to learn the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing data with `ggplot2`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enhancing your Excel reports with `plotnine2`, `matplotlib`, and `plotly` graphs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enhancing Excel reports with visualizations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An introduction to data visualization libraries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating graphs with `plotnine` (Python’s `ggplot2`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other visualization libraries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Embedding visualizations in Excel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this chapter, you will need to make sure that you have a few different
    R packages installed. These include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ggplot2 3.4.4`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cowplot 1.1.3`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The code for this chapter can be found on GitHub at the following link: [https://github.com/PacktPublishing/Extending-Excel-with-Python-and-R/tree/main/chapter](https://github.com/PacktPublishing/Extending-Excel-with-Python-and-R/tree/main/chapter6)6.'
  prefs: []
  type: TYPE_NORMAL
- en: Some basics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we dive into the core of this chapter, here are some things that it
    will help us understand:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Effective communication**: Visualizations are a powerful communication tool
    that transcends language barriers and simplifies complex concepts. Presenting
    data in charts, graphs, and interactive dashboards allows for a more compelling
    and persuasive narrative during meetings, presentations, and reports.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data-driven decision making**: Visualizations empower decision-makers to
    base their judgments on data evidence. When data is presented visually, it becomes
    easier to identify potential opportunities, risks, and areas for improvement,
    leading to more informed and effective decisions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Identifying trends and anomalies**: Visualization tools enable programmers
    to spot trends, changes, and anomalies in data quickly. This is particularly valuable
    in fields such as finance, where spotting irregularities promptly can prevent
    significant financial losses.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Exploratory Data Analysis** (**EDA**): Data visualizations are essential
    during the exploratory phase of data analysis. By creating scatter plots, histograms,
    box plots, and heatmaps, programmers can explore data’s distribution and relationships
    before diving into more in-depth analysis.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Real-time monitoring**: In applications that deal with constantly changing
    data, real-time visualizations offer a dynamic way to monitor key metrics and
    respond swiftly to emerging situations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Geospatial analysis**: Geographic data visualizations, such as maps and heatmaps,
    are invaluable for analyzing location-based information, such as customer distribution,
    disease outbreaks, or environmental changes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Forecasting and predictive analysis**: Visualizations help in presenting
    predictive models’ results and trends, making it easier for stakeholders to understand
    potential future scenarios and make proactive decisions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Interactive reporting**: Interactive visualizations allow end users to customize
    and interact with data, creating a more personalized experience and enabling deeper
    exploration.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let us now go into the details of these basics.
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing data with ggplot2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`ggplot2` is a powerful and widely used data visualization package in the R
    programming language. Developed by Hadley Wickham, it is part of the `tidyverse`
    ecosystem. With `ggplot2`, users can create high-quality and customizable graphics
    through a declarative approach, where plots are constructed by specifying data,
    mapping aesthetics to variables, and adding layers of geometric shapes, statistics,
    and themes. Its grammar of graphics paradigm allows you to easily create complex
    visualizations, making it a popular choice for exploratory data analysis and presentation
    of insights.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we will make a few graphs using the `ggplot2` library and
    the `iris` dataset that comes with R. The first thing we need to do is install
    it and load it into the current environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have the library installed and loaded, we can first see how the
    graph will look in base R, using the `hist()` function and then looping through
    the `Species` column of data for `Sepal.Width`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see the rest of the script with an explanation to accompany it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The first line of code, `hist(iris$Sepal.Width)`, makes a histogram of the sepal
    width for all species of iris. The iris dataset is built into R, so we don’t need
    to load it with the `data()` function. The `Sepal.Width` column of the iris dataset
    contains the sepal width measurements for each flower. The `hist()` function plots
    a histogram of the data in a specified column.
  prefs: []
  type: TYPE_NORMAL
- en: The second line of code, `par(mfrow = c(2,2))`, tells R to split the plotting
    area into four quadrants. This will allow us to plot four histograms side by side.
  prefs: []
  type: TYPE_NORMAL
- en: The third line of code, `for (species in unique(iris$Species)) {`, starts a
    `for` loop. The `for` loop will iterate over the unique values of the `Species`
    column in the iris dataset. The `unique()` function returns a vector of all the
    unique values in a column.
  prefs: []
  type: TYPE_NORMAL
- en: The body of the `for` loop, `hist(iris$Sepal.Width[iris$Species == species],
    main = species, xlab = species)`, makes a histogram of the sepal width for the
    current species. The `iris$Sepal.Width[iris$Species == species]` expression selects
    the sepal width measurements for the current species. The `main` argument specifies
    the title of the histogram, and the `xlab` argument specifies the label for the
    x axis.
  prefs: []
  type: TYPE_NORMAL
- en: The fourth line of code, `hist(iris$Sepal.Width, main = "All Species")`, makes
    a histogram of the sepal width for all species. This histogram is plotted in the
    last quadrant of the plotting area.
  prefs: []
  type: TYPE_NORMAL
- en: 'The fifth line of code, `par(mfrow = c(1,1))`, tells R to reset the plotting
    area to a single quadrant. Now that we have gone over the code, let’s see what
    the output looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: f
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.1 – Base R histograms](img/B19142_06_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.1 – Base R histograms
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have the base R version done, let’s see what this will look like
    in `ggplot2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The first line of code, `iris |> ggplot(aes(x = Sepal.Width)) + geom_histogram(alpha
    = 0.328) + theme_minimal()`, makes a histogram of the sepal width for all species
    of iris. The iris dataset is built into R, so we don’t need to load it with the
    `data()` function. The `ggplot()` function is a powerful plotting function in
    R that allows us to create customized visualizations. The `aes()` function specifies
    the aesthetic mappings for the plot. In this case, we are mapping the sepal width
    to the *x*-axis. The `geom_histogram()` function plots a histogram of the data
    in the specified column. The alpha argument specifies the transparency of the
    bars in the histogram. The `theme_minimal()` function applies a minimal theme
    to the plot.
  prefs: []
  type: TYPE_NORMAL
- en: The second line of code, `iris |> ggplot(aes(x = Sepal.Width, fill = Species))
    + geom_histogram(alpha = 0.328) + theme_minimal()`, makes a histogram of the sepal
    width for each species. The `fill` argument in the `aes()` function specifies
    the fill color of the bars in the histogram. In this case, we are using the `Species`
    column to color the bars in the histogram. This will allow us to see the distribution
    of sepal width for each species. Now that we have gone over the code, let’s see
    the output.
  prefs: []
  type: TYPE_NORMAL
- en: This will be in two plots, as `ggplot2` objects are not plotted in a similar
    fashion to base R using the `par()` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the first plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.2 – A ggplot2 histogram of Sepal.Width for all species](img/B19142_06_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.2 – A ggplot2 histogram of Sepal.Width for all species
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the second plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.3 – A ggplot2 histogram of Sepal.Width filled by species](img/B19142_06_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.3 – A ggplot2 histogram of Sepal.Width filled by species
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, there is one way in which we can see the histograms side by side in `ggplot2`,
    and that is by using the `facet_wrap()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The `aes()` function specifies the aesthetic mappings for the plot. In this
    case, we are mapping the sepal width to the *x*-axis and the species to the fill
    color of the bars. The `geom_histogram()` function plots a histogram of the data
    in the specified columns. The alpha argument specifies the transparency of the
    bars in the histogram. The `facet_wrap()` function creates a separate plot for
    each value of the `Species` column. The `scales = "free"` argument tells the `facet_wrap()`
    function to allow the x axis and y axis scales to vary for each plot. The `theme_minimal()`
    function applies a minimal theme to the plot. The output of the code is a series
    of three histograms, one for each species of iris. The histograms show the distribution
    of sepal width for each species. The different colors of the bars make it easy
    to see the distribution of sepal width for each species. Here is the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.4 – The ggplot2 histogram of Sepal.Width using facet_wrap](img/B19142_06_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.4 – The ggplot2 histogram of Sepal.Width using facet_wrap
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we learned how to plot some simple histograms using both base
    R and `ggplot2`. We learned how to facet the histogram by species in both situations
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: We have finished working in `ggplot`, and now it is time to see how we can extend
    plots with the use of a cowplot, which can help us build more complex and publication-ready
    graphics.
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing data with the cowplot package
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The R `cowplot` package provides numerous functions for plotting data that
    is of high quality. The `cowplot` package is an R library that provides various
    features to help with creating publication-quality figures. It can be used for
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`plot_grid()` function can be used to arrange multiple plots into a grid, with
    labels and annotations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`align_plots()` function can be used to align the axes and other elements of
    multiple plots so that they look consistent'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`plot_grid()` function can be used to mix plots from different plotting frameworks,
    such as `ggplot2` and base graphics'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ggdraw()` and `draw_*()` functions can be used to add annotations to plots,
    such as text, images, and shapes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cowplot` package includes several themes that are designed for publication-quality
    figures'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now that we understand what `cowplot` is, let’s dive into the first example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we install both the `ggplot2` and `cowplot` libraries;
    this will work even if they are already installed, but we will install the latest
    version.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s use a `for` loop to create a plot for each species of the iris dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Let’s break the code down step by step in simple terms.
  prefs: []
  type: TYPE_NORMAL
- en: The `histograms <- list()` line creates an empty list called `histograms`, where
    we’ll store the histograms for each species.
  prefs: []
  type: TYPE_NORMAL
- en: In the next line, for `(species in unique(iris$Species))` `{ ... }`, the loop
    goes through each unique species in the Iris dataset and performs the following
    steps for each species. Next is `data_subset <- iris[iris$Species == species,
    ]`; this line creates a subset of the Iris dataset, including only the rows where
    the species matches the current species in the loop. It helps us focus on data
    for one species at a time.
  prefs: []
  type: TYPE_NORMAL
- en: The `histogram <- ggplot(data_subset, aes(x = Sepal.Width)) + ...` line is where
    the magic happens. We’re using the `ggplot2` library to create a histogram. It’s
    like drawing a graph that shows how many flowers have a specific sepal width.
    The `aes(x = Sepal.Width)` option tells R that we’re interested in plotting the
    `Sepal.Width` on the *x*-axis.
  prefs: []
  type: TYPE_NORMAL
- en: The fifth line, `geom_histogram(binwidth = 0.1, fill = "lightblue", color =
    "black")`, adds the bars to the histogram. It specifies how the bars should look,
    such as their width and color. It’s like building the columns of the histogram.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `labs(title = paste("Sepal Width Histogram for", species))` line adds a
    title to the histogram, telling us what it’s about. The title changes based on
    the current species in the loop. It’s like writing a name tag for each histogram.
    The next line, `labs(x = "", y = "")`, removes the *x*- and *y*-axis labels, making
    the histogram look cleaner. We then add a theme to the plot using `theme_minimal()`,
    which makes the background of the histogram simple and clean. Finally, the `histograms[[species]]
    <- histogram` line takes the histogram for the current species, and we store it
    in the `histograms` list. We use the species name to access this histogram later.
    The following code is slightly different but produces the same exact plots:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'So, in summary, this code creates histograms for the sepal width of different
    species in the iris dataset. It does this by looping through each species, creating
    a subset of data for that species, and then creating a histogram with appropriate
    formatting and labels. All the histograms are stored in a list called `histograms`,
    so we can use them later. In this list, each species is a histogram object, and
    the object is named after the species it visualizes. Now, we are going to create
    and explain the histogram created on the full dataset and then combine them all,
    using the `plot_grid()` function from cowplot. Here is the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The first line of code that creates the `all_species_hist` variable creates
    a histogram of the `Sepal.Width` column for all species combined. The histogram
    has a binwidth of `0.1`, and the fill color is light blue. The color of the borders
    is black. The title of the histogram is `Sepal Width Histogram for All Species`.
    The theme of the histogram is `theme_minimal()`.
  prefs: []
  type: TYPE_NORMAL
- en: The next line of code, `plot_grid(histograms[["setosa"]], histograms[["versicolor"]],
    histograms[["virginica"]], all_species_hist, ncol = 2, align = "hv")`, uses the
    `cowplot` package to arrange the histograms for each species into a grid. The
    histograms are arranged in two columns, and they are aligned horizontally and
    vertically.
  prefs: []
  type: TYPE_NORMAL
- en: The `plot_grid()` function takes a list of plots as its arguments. The plots
    are arranged in a grid according to the number of columns and rows specified by
    the `ncol` and `nrow` arguments. The `align` argument specifies how the plots
    are aligned with each other. In this case, the plots are aligned horizontally
    and vertically with the `align = "``hv"` argument.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output of the `plot_grid()` function is a grid of plots that can be saved
    to a file or displayed in the R console. Now, let’s see the final output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.5 – Using cowplot to plot four histograms together](img/B19142_06_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.5 – Using cowplot to plot four histograms together
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have seen how to effectively use `cowplot` to combine plots and
    control other parts of the graphic, we can move on to the next type of plot, bar
    charts and dumbbell plots.
  prefs: []
  type: TYPE_NORMAL
- en: Bar charts and dumbbell plots
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A bar chart and dumbbell plot are all types of visualizations used to represent
    data. Here is a description of each and their pros and cons. First up is the bar
    chart. A bar chart, also known as a bar graph, uses rectangular bars to compare
    different categories of data. The length or height of each bar represents the
    value of a particular category. The bars can be plotted vertically or horizontally,
    with the most common type being vertical. Some of the pros of a bar chart are
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Easy to read and interpret**: Bar charts are straightforward and intuitive,
    making them easy to understand even for people without a background in statistics
    or data visualization'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Effective for comparisons**: Bar charts allow for quick and easy comparisons
    between different categories, making them useful for identifying patterns or trends'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Suitable for categorical data**: Bar charts are ideal for representing categorical
    or discrete variables'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here are some of the cons:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Limited for continuous data**: Bar charts are not as effective for representing
    continuous variables or data with many distinct values'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Potential readability issues**: When the number of bars is large or the values
    are close in magnitude, it can be challenging to read the exact values on the
    chart'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A dumbbell plot, also known as a connected dot plot or a range bar chart, compares
    the values of two categories or groups. It consists of two dots or markers connected
    by a line, with each dot representing a value and the line indicating the range
    between them. Here are its pros:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Highlights differences and comparisons**: Dumbbell plots are effective for
    emphasizing the differences or comparisons between two categories or groups'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Shows ranges and variances**: The line connecting the dots in a dumbbell
    plot represents the range or variance between the values, providing additional
    information'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Suitable for categorical or continuous data**: Dumbbell plots can be used
    for both ordinal and continuous variables'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here are the cons:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Limited for multiple comparisons**: Dumbbell plots are best suited for comparing
    two categories or groups. If there are more than two groups, the plot can become
    cluttered and confusing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Less common and familiar**: Dumbbell plots are not as widely used or recognized
    as bar charts or time series charts, which may make them less familiar to some
    viewers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In summary, bar charts are useful for comparing values between groups, and dumbbell
    plots are suitable for comparing two categories or groups. Each visualization
    has its strengths and limitations, and the choice depends on the nature of the
    data and the specific insights you want to convey.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have some information about the different types of plots, along
    with their pros and cons, it’s time to delve into creating them and seeing the
    output.
  prefs: []
  type: TYPE_NORMAL
- en: Bar charts with ggplot2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Bar charts can be plotted vertically or horizontally, with the most common
    type being vertical. The vertical axis on the left or right side of the bar chart
    is called the y axis, while the horizontal axis at the bottom of the chart is
    called the x axis. The height or length of each bar represents the value of a
    particular category of data. Bar charts can be used to compare different sets
    of data among different groups easily, and they can illustrate important changes
    in data throughout a period. They can be of great use when explaining the meaning
    of complex data, as they allow for quick and easy comparisons between different
    categories. Bar charts are particularly useful for showing segments of information
    and are commonly used to present data or concepts involving data visually. Some
    key properties of bar charts include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The bars are rectangular and of equal width, with varying heights
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The gap between one bar and another should be uniform throughout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They can be either horizontal or vertical
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overall, bar charts are a useful tool to convey relational information quickly
    in a visual manner and can be used to compare different sets of data among different
    groups easily. Now that we have a basic understanding of a bar chart and how it
    is useful, let’s go through an example using the `ggplot2` library.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let’s load in the required libraries, of which `healthyR` and `healthyR.data`
    may need to be installed on your machine, as they may not have been already:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Here, we’re loading several packages that provide functions and tools for data
    manipulation (`dplyr`, `forcats`, and `purrr`) and visualization (`ggplot2`).
    These packages extend R’s capabilities for handling data and creating plots. We
    load in the `healthyR.data` library for the dataset to work with and the `healthyR`
    library for the use of the `category_counts_tbl()` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next block of code is used to create the dataset that we are going to plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'In this step, a pipeline (`|>`) is used to perform a series of operations on
    the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '`healthyR_data` is a dataset provided by the `healthyR.data` package.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `filter()` function removes rows where the `payer_grouping` column is not
    equal to ‘`?`’.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `category_counts_tbl()` function is applied, which counts the occurrences
    of each unique value in the `payer_grouping` column within each combination of
    `ip_op_flag` values. The `.count_col` argument specifies the column to count,
    `.arrange` sorts the counts in descending order, and `ip_op_flag` groups the data
    by this column.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The data is grouped by the `ip_op_flag` column using `group_by()`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `mutate()` function adds a new column named `order_var`, which contains
    formatted rank values based on the count column, `n`. This is done using the `sprintf()`
    function to format the rank as a two-digit integer. We then ungroup the data,
    as the groups are no longer necessary.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, let’s make the plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This section creates a bar plot using `ggplot2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ggplot()` initializes the plot, and `aes()` specifies aesthetics (such as
    what goes on the x axis and y axis).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`geom_col()` adds bars to the plot, where the height of each bar represents
    the value of *n*. The alpha parameter controls the transparency of the bars.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`labs()` sets the axis labels to be empty.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`theme()` allows theme adjustments to be made, such as removing the legend
    and using a minimal theme.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`facet_wrap()` is used to create separate panels for each unique value of `ip_op_flag`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`scale_x_discrete()` is used to customize the *x*-axis labels using the `payer_grouping`
    values, indexed by `order_var`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xlab(NULL)` removes the *x*-axis label.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = .5))` adjusts
    the appearance of the *x*-axis text, making it vertical.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`coord_flip()` flips the *x* and *y* axes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`theme_minimal()` applies a minimalistic theme to the plot.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In summary, this code takes a dataset, filters and processes it, and then creates
    a bar plot with multiple facets, each displaying bars based on counts of a categorical
    variable. The plot’s appearance is customized using various `ggplot2` functions
    and settings. Now, after all of that, let’s see the final output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.6 – Using ggplot2 to create bar plots](img/B19142_06_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.6 – Using ggplot2 to create bar plots
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we have learned how to make a fairly sophisticated horizonal
    bar chart. We created an ordered one that allowed us to see information in two
    different groups ordered by the same factor column. It shows us volumes by insurance
    payer group for inpatient and outpatient facets. Now, we will move onto the dumbbell
    plot.
  prefs: []
  type: TYPE_NORMAL
- en: Dumbbell plots with ggplot2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A dumbbell plot, also known as a *dot plot with lines*, is a visualization that
    displays the change between two points for different categories. It often uses
    dots (representing the categories) connected by lines to show the change. In R,
    you can create a dumbbell plot using libraries such as `ggplot2`. Here’s how you
    can do it.
  prefs: []
  type: TYPE_NORMAL
- en: First, make sure you have the `ggplot2` and `dplyr` packages installed and loaded.
    You can install them if needed using `install.packages("ggplot2")` and `install.packages("dplyr")`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s make a data frame; we will make this with two columns for the initial
    and final values, and a categorical variable to group them. Your data might look
    something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let’s create a midpoint of our data before we make the actual plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can go ahead and create the plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This example assumes you have a `Category` column in your data frame that defines
    the groups/categories. The plot will display initial values (blue dots), final
    values (red dots), lines connecting them, and midpoint labels above the lines.
    You can customize the aesthetics, colors, labels, and other elements according
    to your preferences. Now, let’s see what we have created.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.7 – A dumbbell plot with ggplot2](img/B19142_06_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.7 – A dumbbell plot with ggplot2
  prefs: []
  type: TYPE_NORMAL
- en: Remember that this is just a basic example. Depending on your data and requirements,
    you might need to adjust the code to fit your needs. It is now time for some time
    series graphs.
  prefs: []
  type: TYPE_NORMAL
- en: Enhancing your Excel reports with plotnine2, matplotlib, and plotly graphs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Python section of this chapter explores the integration of popular data
    visualization libraries, such as `plotnine`, `matplotlib`, and `plotly`, with
    Microsoft Excel using Python.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll learn how to leverage the strengths of each library to visualize data
    effectively and enhance your Excel reports.
  prefs: []
  type: TYPE_NORMAL
- en: 'This part of the chapter is organized into the following sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Enhancing Excel reports with visualizations*: We’ll provide guidance on effectively
    using visualizations to communicate insights and patterns.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Introduction to visualization libraries*: We’ll provide an overview of the
    key visualization libraries – `plotnine`, `matplotlib`, and `plotly`. Understanding
    these and the use cases is essential for selecting the right library for your
    needs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Creating graphs with* `plotnine`: This section will delve into using the `plotnine`
    library to craft sophisticated graphs. You’ll learn how to generate various plot
    types, customize visual elements, and incorporate additional layers for enhanced
    clarity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Generating graphs with* `matplotlib`: `matplotlib` is a versatile library
    for creating static visualizations. We’ll walk you through the process of generating
    different types of graphs using `matplotlib` and then transferring them into Excel
    for inclusion in your reports.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Embedding visualizations into Excel*: This section covers the practical aspects
    of inserting graphs and charts generated with Python libraries into Excel sheets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you’ll have the skills to seamlessly bridge the
    gap between data visualization in Python and Excel reporting. Whether you’re creating
    static graphs or interactive visualizations, you’ll be equipped to present data
    in a visually compelling and insightful way within Excel, facilitating more engaging
    and impactful reports.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s get plotting! (You can now imagine breaking out in an evil laugh!)
  prefs: []
  type: TYPE_NORMAL
- en: Enhancing Excel reports with visualizations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section of the chapter, we dive into the practical aspect of using visualizations
    to enhance your Excel reports. Beyond the technical aspects of generating and
    embedding visualizations from Python, we will explore the broader significance
    of these visual aids in the context of data-driven decision-making. Visualizations
    in Excel aren’t just about aesthetics; they’re powerful tools for effectively
    communicating insights, patterns, and trends hidden within your data. Whether
    you’re preparing reports for stakeholders, colleagues, or clients, mastering the
    art of incorporating visualizations will elevate your data-driven narratives and
    facilitate more informed decision-making.
  prefs: []
  type: TYPE_NORMAL
- en: The upcoming sections provide guidance on how to strategically use visualizations
    within your Excel reports to maximize their impact. You’ll learn not only how
    to create compelling graphs and charts but also how to interpret and present them
    effectively to convey your data’s story.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating visualizations into Excel reports goes beyond mere aesthetics –
    it’s about transforming data into insights that drive informed decisions. We will
    delve into various strategies to enhance the impact of your reports by effectively
    utilizing visualizations.
  prefs: []
  type: TYPE_NORMAL
- en: The power of visualizations lies not just in their aesthetics but also in their
    ability to tell compelling stories with data. By mastering the art of choosing
    the right visualization type, utilizing annotations, simplifying complex data,
    and adhering to design principles, you’ll be well equipped to elevate your Excel
    reports to new levels of impact and clarity.
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to data visualization libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Data visualization is a fundamental aspect of data analysis, and Python offers
    a rich ecosystem of libraries to create engaging and informative visualizations.
    In this section, we will introduce you to three prominent data visualization libraries
    – `plotnine`, `matplotlib`, and `plotly`. Understanding the strengths and applications
    of each library is crucial for effectively conveying your data’s story in Excel
    reports.
  prefs: []
  type: TYPE_NORMAL
- en: Plotnine – elegant grammar of graphics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `ggplot2` library is a popular data visualization library in the R programming
    language, known for its expressive and declarative syntax. The Python adaptation
    is called `plotnine`.
  prefs: []
  type: TYPE_NORMAL
- en: It is based on the `plotnine` excels in creating intricate, publication-quality
    plots. It offers fine-grained control over aesthetics, enabling you to customize
    every aspect of your visualization.
  prefs: []
  type: TYPE_NORMAL
- en: Plotly – interactive visualizations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`plotly` is a versatile Python library that specializes in creating interactive,
    web-based visualizations. It allows you to build interactive dashboards, scatter
    plots, line charts, and more. Users can hover over data points, zoom in, or filter
    data for a dynamic user experience.'
  prefs: []
  type: TYPE_NORMAL
- en: '`plotly` integrates seamlessly with Jupyter notebooks, making it a favorite
    choice for data scientists and analysts. It is ideal for generating interactive
    visualizations for web applications, reports, and data exploration.'
  prefs: []
  type: TYPE_NORMAL
- en: Matplotlib – classic and customizable plots
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`matplotlib` is a foundational library for creating static, high-quality visualizations
    in Python. It provides a wide range of plotting functions, making it suitable
    for various chart types, such as line plots, bar charts, and scatter plots.'
  prefs: []
  type: TYPE_NORMAL
- en: '`matplotlib` is highly customizable, allowing you to control every detail of
    your plots, from colors and labels to fonts and gridlines. It is the go-to choice
    for generating custom, static plots for research papers, presentations, and Excel
    reports.'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the capabilities and best use cases of these libraries will empower
    you to select the right tool for your data visualization needs. Whether you want
    to create elegant, static plots with `plotnine`, interactive dashboards with `plotly`,
    or highly customized visualizations with `matplotlib`, you’ll have the knowledge
    to choose the library that aligns with your goals.
  prefs: []
  type: TYPE_NORMAL
- en: In the following sections, we’ll delve deeper into each library, providing practical
    examples and insights to help you master the art of data visualization in Python
    for Excel reports.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s dive into `plotnine` first.
  prefs: []
  type: TYPE_NORMAL
- en: Creating graphs with plotnine (Python’s ggplot2)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will explore the powerful capabilities of the `plotnine`
    library in Python, which draws inspiration from R’s `ggplot2`, covered by the
    R section of this chapter. You will see that (other than accounting for differences
    in syntax between R and Python) the code and features are extremely similar –
    `plotnine` and *ggplot2* are truly sister packages.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this section, you’ll be well versed in generating a wide range
    of visualizations, customizing every detail, and incorporating additional layers
    for enhanced clarity.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the grammar of graphics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we dive into creating impressive graphs with `plotnine`, it’s essential
    to understand the grammar of graphics. This structured approach to data visualization
    forms the core of `plotnine` and enables you to build complex plots by combining
    data, aesthetics, and geometric objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s break down some key concepts:'
  prefs: []
  type: TYPE_NORMAL
- en: '`plotnine` links data to visual elements in your plot. You’ll specify which
    variables represent the *x* and *y* axes, color, shape, size, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Aesthetics**: Aesthetics control how data attributes are represented visually.
    You can use aesthetics to encode information such as color, shape, and size.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`plotnine` encourages a layered approach. Each layer adds a new element to
    your plot, such as points, lines, or labels. This allows for intricate, information-rich
    visualizations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating various plot types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the `plotnine` library’s strengths is its versatility. You can create
    numerous plot types, catering to different data visualization needs.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we’ll illustrate the construction of various plot types using
    `plotnine`:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Scatter plots**: Simple yet effective, scatter plots help visualize relationships
    between two numerical variables:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here is the plot the preceding code generates:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.8 – A basic scatter plot](img/B19142_06_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.8 – A basic scatter plot
  prefs: []
  type: TYPE_NORMAL
- en: '**Bar charts**: Ideal for displaying categorical data, bar charts are excellent
    for comparisons:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here is the plot for it:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B19142_06_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.9 – A basic bar chart
  prefs: []
  type: TYPE_NORMAL
- en: '**Histograms**: These are used to explore the distribution of a single variable:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here is the plot for it:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B19142_06_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.10 – A basic histogram
  prefs: []
  type: TYPE_NORMAL
- en: Note how we can use a syntax completely analogue to the R `ggplot2` syntax up
    to and including the alpha parameter to control the transparency. It goes to show
    that R and Python are essentially similar tools with similar syntax in some packages!
  prefs: []
  type: TYPE_NORMAL
- en: '**Box plots**: Box plots provide a summary of the distribution of a dataset,
    including the median, quartiles, and potential outliers:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here is the plot for it:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B19142_06_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.11 – A basic box plot
  prefs: []
  type: TYPE_NORMAL
- en: '`geom_tile()` to achieve this:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here is the plot for it:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.12 – A basic heatmap](img/B19142_06_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.12 – A basic heatmap
  prefs: []
  type: TYPE_NORMAL
- en: '**Violin plots**: Combining box plots and kernel density estimation, violin
    plots showcase data distributions with rich detail:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here is the plot for it:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B19142_06_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.13 – A basic violin plot
  prefs: []
  type: TYPE_NORMAL
- en: Now that the basics are covered, let’s have a look at what makes `plotnine`
    so special – all the customization possibilities!
  prefs: []
  type: TYPE_NORMAL
- en: Customizing the visual elements of a plotnine plot
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `plotnine` library’s strength extends to customization. You can tailor
    every aspect of your visualizations to meet specific requirements. Here’s a detailed
    explanation of how you can customize various aspects of your visualizations:'
  prefs: []
  type: TYPE_NORMAL
- en: '`plotnine`, you can customize labels for the *x* and *y*-axes using the `xlab()`
    and `ylab()` functions, respectively. To add a title and subtitle to your plot,
    use the `ggtitle()` and `labs()` functions:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`scale_x_continuous()` and `scale_y_continuous()` to customize scales and legends:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`theme_minimal()` or `theme_light()` to maintain a clean look throughout your
    reports or presentations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`theme()` function. Adjust parameters such as `text`, `text_size`, `text_family`,
    and `text_align` to achieve the desired text formatting:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The preceding customizations result in the following graph:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B19142_06_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.14 – Custom visual elements
  prefs: []
  type: TYPE_NORMAL
- en: By customizing these elements, you can create visually appealing and highly
    tailored visualizations to effectively communicate your data insights.
  prefs: []
  type: TYPE_NORMAL
- en: Beyond customization, `plotnine` has another trick up its sleeves – layers!
    In the next section, we will have a look at what layers are and how to use them
    to deliver the best visualization possible.
  prefs: []
  type: TYPE_NORMAL
- en: Incorporating additional layers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Layering is a powerful concept in `plotnine`. It allows you to superimpose
    multiple layers on a single plot, each conveying different aspects of your data.
    In this section, we’ll explore some common layers:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Trendlines**: Add trendlines to reveal underlying patterns in your data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Error bars**: Visualize variability and uncertainty by incorporating error
    bars'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Annotations**: Highlight specific data points or regions with text labels
    or geometric shapes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To add error bars, you can use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'This results in the following plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.15 – Error bars added](img/B19142_06_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.15 – Error bars added
  prefs: []
  type: TYPE_NORMAL
- en: 'For trendlines, you can use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'This results in a trendline added to the plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B19142_06_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.16 – A scatter plot with a trendline
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, for annotations, we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'This results in the following plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.17 – An annotated scatter plot](img/B19142_06_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.17 – An annotated scatter plot
  prefs: []
  type: TYPE_NORMAL
- en: Whether you’re communicating insights, comparing datasets, or exploring trends,
    `plotnine` will empower you to create engaging and data-driven narratives for
    your Excel reports.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let’s have a look at similar plots using `matplotlib`!
  prefs: []
  type: TYPE_NORMAL
- en: Generating graphs with matplotlib
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will dive into the versatile world of `matplotlib`, one
    of the most widely used data visualization libraries in Python. With `matplotlib`,
    you have the power to create an array of static visualizations, fine-tune their
    appearance, and tailor them to your specific needs. Whether you’re looking to
    craft scatter plots, bar charts, histograms, or other graphical representations
    of your data, `matplotlib` provides the tools to turn your data into compelling
    visual insights.
  prefs: []
  type: TYPE_NORMAL
- en: Creating diverse plot types with matplotlib
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`matplotlib` is celebrated for its versatility, offering a wide array of plot
    types to meet diverse data visualization requirements. In this section, we’ll
    delve into the construction of various plot types using `matplotlib`, allowing
    you to craft scatter plots, bar charts, histograms, box plots, heatmaps, and violin
    plots. Whether you’re seeking to explore relationships between variables, display
    categorical data, or analyze data distributions, `matplotlib` equips you with
    the tools to create the visualizations you need:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Scatter plots**: Here is the code for them:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This code will create a scatter plot of height versus weight and save it as
    a `.png` image. You can further customize the plot as needed. The result is shown
    as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.18 – A basic scatter plot with matplotlib](img/B19142_06_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.18 – A basic scatter plot with matplotlib
  prefs: []
  type: TYPE_NORMAL
- en: '**Bar charts**: Here is the code for them:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This code creates a simple bar chart with categories on the *x*-axis and corresponding
    values on the *y*-axis, resulting in the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.19 – A basic bar chart with matplotlib](img/B19142_06_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.19 – A basic bar chart with matplotlib
  prefs: []
  type: TYPE_NORMAL
- en: '**Histograms**: Here is the code for them:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This code generates a histogram from random data, showcasing the frequency
    distribution of values. You can adjust the number of bins, colors, labels, and
    other properties to customize the histogram as needed. The histogram generated
    is shown as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.20 – A basic histogram with matplotlib](img/B19142_06_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.20 – A basic histogram with matplotlib
  prefs: []
  type: TYPE_NORMAL
- en: '**Box plots**: Here is the code for them:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This code generates a basic box plot from random data, comparing three different
    datasets. You can adjust various parameters to customize the appearance of the
    box plot as needed. The preceding code results in this visualization:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.21 – A basic box plot with matplotlib](img/B19142_06_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.21 – A basic box plot with matplotlib
  prefs: []
  type: TYPE_NORMAL
- en: '**Heatmaps**: Here is the code for them:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In this code, we generate a random 5x5 matrix of values and create a heatmap
    from it. We will use the `viridis` colormap, but you can choose from various colormaps
    to adjust the color scheme. This example demonstrates how to create a basic heatmap;
    you can further customize it according to your data and preferences. The resulting
    heatmap is shown as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.22 – A basic heatmap with matplotlib](img/B19142_06_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.22 – A basic heatmap with matplotlib
  prefs: []
  type: TYPE_NORMAL
- en: '**Violin plots**: Here is the code for them:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In this code, we generate three sets of random data and create a violin plot
    to visualize their distributions. The `showmedians=True` argument displays the
    median values inside each violin. You can adjust the data, labels, and other plot
    properties to fit your specific dataset and requirements. Let’s have a look at
    the plot generated:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.23 – A basic violin plot with matplotlib](img/B19142_06_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.23 – A basic violin plot with matplotlib
  prefs: []
  type: TYPE_NORMAL
- en: Next, let’s see how to customize the visual elements in a plot of matplotlib.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing visual elements of a matplotlib plot
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The plots created by `matplotlib` can, of course, be customized in many ways,
    just like the plots generated with `plotly`. In this section, we will explore
    the most important aspects and provide some examples along the way.
  prefs: []
  type: TYPE_NORMAL
- en: Labels and titles
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`matplotlib` allows you to customize axis labels, plot titles, and subtitles
    easily. You can set labels for the *x*- and *y*-axes, title your plot for context,
    and even add subtitles to provide additional information or context. Here’s an
    example of how to customize labels and titles in `matplotlib`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the graph for it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.24 – Customizing labels with matplotlib](img/B19142_06_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.24 – Customizing labels with matplotlib
  prefs: []
  type: TYPE_NORMAL
- en: Axes and legends
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`matplotlib` allows you to adjust axis scales, add axis breaks, and fine-tune
    legends. You can change the range, scale, and tick positions on both the *x*-
    and *y*-axes. Additionally, you can customize legends to better represent data
    series or categories.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an example of customizing axes and legends:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the plot for it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.25 – Customizing axes and the legend with matplotlib](img/B19142_06_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.25 – Customizing axes and the legend with matplotlib
  prefs: []
  type: TYPE_NORMAL
- en: Themes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`matplotlib` offers a variety of themes to maintain consistency in your visualizations.
    You can choose from different predefined styles to match your report or presentation’s
    aesthetics. Here’s how you can apply a different theme. As an example, we will
    apply the `ggplot` theme you became familiar with earlier in the chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.26 – Using themes with matplotlib](img/B19142_06_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.26 – Using themes with matplotlib
  prefs: []
  type: TYPE_NORMAL
- en: Text formatting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`matplotlib` allows you to control text size, style, and alignment for a polished
    look. You can adjust the font size, use bold or italic styles, and specify alignment
    for text elements such as titles, labels, and annotations. Here’s an example of
    text formatting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the plot for it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.27 – Text formatting with matplotlib](img/B19142_06_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.27 – Text formatting with matplotlib
  prefs: []
  type: TYPE_NORMAL
- en: These examples showcase how you can achieve various customization aspects in
    your `matplotlib` visualizations.
  prefs: []
  type: TYPE_NORMAL
- en: This concludes our overview of the most popular and powerful visualization libraries
    in Python. The next section covers short descriptions of the other choices available.
  prefs: []
  type: TYPE_NORMAL
- en: Other visualization libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For completeness’s sake, here is a brief description of other popular libraries
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: plotly
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`plotly` is a popular Python library known for creating interactive and visually
    appealing data visualizations. It excels in generating dynamic charts, dashboards,
    and interactive plots. Unfortunately, the full power of the `plotly` library’s
    interactivity does not work seamlessly with the most recent versions of Excel,
    due to security considerations introduced by Microsoft. This limitation can hinder
    its integration into Excel for users who rely on the latest Excel features and
    functionalities. Since the focus of this book is enhancing your Excel-based workflows,
    we will not cover `plotly` in detail.'
  prefs: []
  type: TYPE_NORMAL
- en: seaborn
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`seaborn` is another Python library designed for statistical data visualization.
    While it offers a wide range of customization options and the ability to create
    complex plots, it often requires more code to achieve the same results compared
    to libraries such as `matplotlib` and `plotnine`. Given the focus on simplicity
    and ease of use in the chapter, we chose to emphasize libraries that provide a
    more straightforward and concise approach to data visualization.'
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we primarily focused on `matplotlib` and `plotnine` due to
    their simplicity and compatibility with Excel, ensuring you can quickly generate
    and integrate visualizations into Excel reports without unnecessary complexity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have covered the most popular libraries you can use to create visualizations,
    we can continue with the distribution of the plots: embedding them into Excel!'
  prefs: []
  type: TYPE_NORMAL
- en: Embedding visualizations into Excel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When working with Python libraries such as `matplotlib` and `plotnine` to create
    visualizations, you might want to seamlessly integrate these visualizations into
    your Excel reports or spreadsheets. Embedding these plots and charts into Excel
    can be a valuable addition to your data analysis toolkit. In this section, we’ll
    explore the fundamentals of embedding `matplotlib` and `plotnine` visualizations
    into Excel, helping you leverage the power of Python’s data visualization libraries
    alongside Excel’s reporting capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: A basic embedding process
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The process of embedding `matplotlib` and `plotnine` visualizations into Excel
    typically involves exporting your plots or charts as image files (such as PNG
    or JPEG) and then importing these images into your Excel sheet. While this approach
    doesn’t offer the same level of interactivity as some other methods, it’s a straightforward
    way to enhance your Excel reports with data visualizations generated in Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the basic steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '`matplotlib` or `plcotnine` visualization in your Python script or Jupyter
    notebook. Customize it to meet your data analysis and reporting requirements.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`matplotlib` or `plotnine` to save your visualization as an image file. Common
    image formats such as PNG or JPEG work well for this purpose. Ensure that you
    save the image in a location accessible from your Excel sheet.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`pywin32`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Scheduling a script for updates (optional)**: If your data changes regularly,
    you may want to consider scheduling script-generating the image in Excel and inserting
    it, using the method from the preceding *option 2*. This way, your visualization
    regularly updates automatically. You can do this with what you learned in [*Chapter
    4*](B19142_04.xhtml#_idTextAnchor078).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: While this method provides a static representation of your visualizations, it’s
    a practical way to enhance your Excel reports with Python-generated charts and
    plots.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Embedding visualizations in Excel reports offers a practical way to enhance
    data presentation, customization, and automation. Whether you’re working with
    sales data, financial reports, or any other dataset, this approach empowers you
    to create insightful reports that convey your data-driven insights effectively.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you learned about data visualization techniques in general,
    the ways to extend your Excel workflows and reports with those techniques, and
    how to implement them in R and Python.
  prefs: []
  type: TYPE_NORMAL
- en: We have covered the most popular and powerful R packages and Python libraries
    in detail. You learned about the typical plots used to carry out your analysis
    and how to communicate your findings, along with use cases and examples where
    those data visualizations can be used.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you prepare an Excel report, you will be in a position to dazzle
    your audience with the most beautiful and insightful visualizations they have
    ever seen!
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next chapter, we will look at another way to communicate your findings
    to audiences for whom the details of raw data are too much: automating pivot tables.'
  prefs: []
  type: TYPE_NORMAL
