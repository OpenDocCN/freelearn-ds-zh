- en: '11'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Calling R/Python Locally from Excel Directly or via an API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we are going to discuss calling R and Python from within Excel.
    You may ask yourself why you would want to do that when there are many functions
    inside of Excel that one can use or, if so desired, can write with the VBA portion
    of the application. One reason why you might want to call R or Python from Excel
    is to leverage the power and flexibility of these programming languages for data
    analysis and visualization. Excel is a widely used spreadsheet application that
    can handle large datasets and perform basic calculations and functions. However,
    Excel has some limitations when it comes to more advanced or customized tasks,
    such as statistical modeling, machine learning, web scraping, natural language
    processing, and so on. By calling R or Python from Excel, you can access the rich
    libraries and packages that these languages offer and use them to manipulate,
    transform, and visualize your data in more sophisticated ways. You can also automate
    your workflows and create reproducible reports and dashboards. Calling R or Python
    from Excel can enhance your productivity and efficiency, as well as expand your
    analytical capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will be a bit different here. In this chapter, we will cover two (very)
    different methods for calling R and Python from Excel: local calls, where R or
    Python is installed on the same machine, and running and using API calls, where
    the R or Python functionality is deployed to a server as an API endpoint. For
    the latter, we will have a look at open-source tools and some of the most popular
    commercial solutions.'
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you can find all the code on GitHub at the following link:
    [https://github.com/PacktPublishing/Extending-Excel-with-Python-and-R/tree/main/Chapter%2011](https://github.com/PacktPublishing/Extending-Excel-with-Python-and-R/tree/main/Chapter%2011).'
  prefs: []
  type: TYPE_NORMAL
- en: 'You will need to install the following external software:'
  prefs: []
  type: TYPE_NORMAL
- en: 'BERT, which can be found here: [http://bert-toolkit.com/download-bert](http://bert-toolkit.com/download-bert)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python and `xlwings` (refer to the *Setting up an* *environment* section)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`plumber` for R'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FastAPI for Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s begin with the first part.
  prefs: []
  type: TYPE_NORMAL
- en: Calling R and Python from Excel locally
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this first part of the chapter, we are going to learn about using the +or
    Excel that can interface with R directly, along with `xlwings` to interact with
    Python from Excel. We will also quickly show how one can use a VBA script to call
    R from Excel. In this chapter, we’re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Why you would want to call R/Python from Excel locally
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up an environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calling R/Python directly from Excel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s begin!
  prefs: []
  type: TYPE_NORMAL
- en: Why you would want to call R/Python from Excel locally
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we discussed in the opening, it is possible to do a wide variety of analysis
    and programming in Excel via the use of VBA. However, this can be tedious to write
    and difficult to implement. By harnessing the power of `BERT` and `xlwings`, you
    can use an already rich landscape of functions that are ready to go or write your
    own in those languages and use them in Excel.
  prefs: []
  type: TYPE_NORMAL
- en: 'With `BERT`, you get the power of R in Excel: R is a powerful statistical programming
    language with a wide range of capabilities. `BERT` allows you to use these capabilities
    directly in Excel without having to switch to a separate R environment. This can
    be very convenient if you are already working in Excel and don’t want to leave
    the application.'
  prefs: []
  type: TYPE_NORMAL
- en: '`BERT` allows you to write R functions that can be used as custom Excel functions.
    This can be useful for creating functions that are not available in Excel or for
    improving the performance of existing Excel functions. For example, you can create
    a Brownian motion by using `BERT` to call a function built inside of R, which
    is going to be much easier to code in R than it would in Excel.'
  prefs: []
  type: TYPE_NORMAL
- en: 'What `BERT` is for R, `xlwings` is for Python. The benefits are analogous as
    well: create your solution in Python and call it from Excel directly.'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start with setting up your environment so you can get your hands dirty!
  prefs: []
  type: TYPE_NORMAL
- en: Setting up an environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since setting up an environment for `BERT` and `xlwings` is non-trivial, we
    will walk you through the process in detail in the coming subsections.
  prefs: []
  type: TYPE_NORMAL
- en: Steps to set up BERT for R
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we will cover the installation of `BERT` for Windows so that
    we can utilize `BERT` to manipulate Excel from inside of R. The first thing that
    we will have to do is download the `BERT` installer, which can be obtained from
    here: [https://bert-toolkit.com/download-bert](https://bert-toolkit.com/download-bert).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once this is downloaded, you can then install it as you would any other program.
    Once installed, you can then use the **Add-ins** ribbon from Excel to open the
    **BERT Console**, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.1 – BERT Console from the Add-ins ribbon in Excel](img/B19142_11_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.1 – BERT Console from the Add-ins ribbon in Excel
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you see it, click the button, and the console will open, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.2 – The BERT Console](img/B19142_11_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.2 – The BERT Console
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s move to Python.
  prefs: []
  type: TYPE_NORMAL
- en: Steps to set up xlwings for Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this subsection, we will cover the steps required to set up `xlwings`:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Python
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Ensure that Python is installed on your machine. You can download the latest
    version from the official Python website ([https://www.python.org/downloads/](https://www.python.org/downloads/)).
    During installation, you can check the box that says **Add Python to PATH** for
    easier access.
  prefs: []
  type: TYPE_NORMAL
- en: 'Installing Excel add-ins:'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Follow these simple steps to get started with `xlwings`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a command prompt and run the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To install the add-in, use the command-line client:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 11.3 – xlwings in the ribbon in Excel](img/B19142_11_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.3 – xlwings in the ribbon in Excel
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the Excel and Python environment
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Configure `xlwings` by specifying the Python interpreter path in the Excel add-ins
    settings. However, this is typically done automatically by `xlwings`.
  prefs: []
  type: TYPE_NORMAL
- en: To verify the setup, run any of the examples given in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you encounter issues, refer to the documentation for `xlwings` ([https://docs.xlwings.org/en/stable/](https://docs.xlwings.org/en/stable/)).
    Check for common troubleshooting tips and solutions.
  prefs: []
  type: TYPE_NORMAL
- en: This step-by-step guide ensures a smooth setup of your local environment, enabling
    Excel and Python to work seamlessly together. Following these instructions will
    provide a solid foundation for the subsequent chapters, allowing you to harness
    the combined power of Excel and Python.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have set up, let’s get to the meat of how to actually use these
    tools!
  prefs: []
  type: TYPE_NORMAL
- en: Calling R/Python directly from Excel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will dig into the ways you can call R and Python from Excel
    using the tools set up in the previous section. We will cover several ways of
    achieving this and give examples so that you can try them out as well.
  prefs: []
  type: TYPE_NORMAL
- en: Executing R with VBA and BERT
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Another great way of calling R from Excel is via the VBA macro. This requires
    that a workbook be saved as a macro-enabled workbook. Since BERT is designed to
    work from Excel to R, the syntax of an R expression can be written in the VBA
    console and called with the following in VBA:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s look at an easy example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This will end up producing a plot of the density of a random normal distribution.
    Let’s see the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.4 – Using BERT to call R from VBA](img/B19142_11_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.4 – Using BERT to call R from VBA
  prefs: []
  type: TYPE_NORMAL
- en: Interacting with Excel via BERT
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is possible to manipulate Excel with BERT using the **Excel Scripting Interface**.
    You may ask yourself, “Why would I want to do such a thing”? Well, remember, with
    BERT, you have access to not only Excel but R as well. This means that you can
    use R functions that may not exist in Excel to generate data; let’s see an example.
    This was done in the left pane.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will define a range:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This will define a range in R for the cells `A1:B4` and will place it in the
    global environment as a variable called `rng`. This was typed into BERT’s R interface.
    Now that this range is defined, it is possible to see how many range commands
    are at your fingertips and what some of them are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'So, we see that there are 234 range commands available. By calling `ls(rng)`,
    the R console will print out all of the commands; here, we use `head()` so that
    only the first few are shown. Here, we are going to use the `RAND()` Excel command
    to place random numbers into the defined range:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s take a look at the output in the Excel file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.5 – Using the RAND() function from BERT in Excel](img/B19142_11_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.5 – Using the RAND() function from BERT in Excel
  prefs: []
  type: TYPE_NORMAL
- en: 'If we want to stay inside of BERT and see the values that were sent to Excel,
    we can do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have gone over some basics of how to work with Excel via R, it is
    time to see how we can achieve similar things in Python.
  prefs: []
  type: TYPE_NORMAL
- en: Calling Python from Excel using xlwings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You have three options to call Python from Excel using `xlwings`:'
  prefs: []
  type: TYPE_NORMAL
- en: The `Run` button under the `xlwings` tab of the ribbon
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Macros: These call Python from Excel'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**User Defined Functions** (**UDFs**) (Windows only)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s have a look at the pros and cons of all three, as well as an example!
  prefs: []
  type: TYPE_NORMAL
- en: The Run button
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Run` button expects a function called `main` in a Python module with the
    same name as your workbook. This is a quote from the documentation and a hard
    prerequisite. The main benefit of this method is that there is no VBA and no macros;
    you can use a normal XLSX file, which can be very useful in security-restricted
    situations where XLSM files are not allowed.
  prefs: []
  type: TYPE_NORMAL
- en: 'To try out the `Run` button, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a Python module called `sumitup.py` with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open Excel and fill cell A1 with `2` and cell A2 with `3`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the Excel sheet as `sumitup.xlsx` in the same folder where `sumitup.py`
    is saved.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the `Run` button in the `xlwings` menu in the Ribbon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The cons of this method are the strict naming convention and file placement,
    and the lack of flexibility; only the function `main()` will be called, and the
    Python code needs to encode which fields will be used as input and where the output
    will go, meaning you cannot pass on inputs to the function from the Excel side.
  prefs: []
  type: TYPE_NORMAL
- en: Macros
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you require more flexibility, and you can use a macro (and save your file
    as XLSM), you can use `RunPython` from VBA.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, `RunPython` will import the `world` module and run the `helloworld()`
    function from that module. To run this example, try the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a `.xlsm` file and save it as `world.xlsm`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the VBA editor and try the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `xlwings` is checked:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.6 – Adding the xlwings reference to the VBA project](img/B19142_11_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.6 – Adding the xlwings reference to the VBA project
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new macro in the file with `Sub` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `hello.py` module in the same folder where you saved the `.xlsm`
    file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, you can run the macro in `world.xlsm` and see the results!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As you can see, using macros addresses one of the cons of the `Run` button,
    namely the location and name of the Python module(s) and function(s) used. However,
    you still cannot pass on inputs directly from the Excel file; the inputs have
    to be in pre-determined cells in the Excel file, and the output cell(s) have to
    be pre-determined as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that you can change both the name of the module (to not match the name
    of the Excel file) and the location of the module (i.e., have it saved in a different
    folder than the `.xlsm` file). From the `xlwings` documentation, it reads that
    “*Per default, RunPython expects world.py in the same directory as the Excel file
    with the same name, but you can change both of these things: if your Python file
    is in a different folder, add that folder to the PYTHONPATH in the config. If
    the file has a different name, change the RunPython* *command accordingly*.”'
  prefs: []
  type: TYPE_NORMAL
- en: UDFs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: User-defined functions allow the user to extend Excel to add custom functions
    that can be used in the same way as `SUM()` and `IF()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Writing a UDF in Python with `xlwings` is as easy, as seen here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we specify that the inputs are both `numpy` array
    instances and define the function for matrix addition.
  prefs: []
  type: TYPE_NORMAL
- en: To integrate Python functions into Excel using `xlwings`, you’ll need to set
    up your Python source file in a specific way. By default, `xlwings` expects a
    Python source file to be located in the same directory as your Excel file and
    to have the same name as the Excel file but with a `.py` extension instead of
    `.xlsm`.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, you can specify a specific module via the `xlwings` ribbon.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you’ve prepared your Python source file, you can import the functions
    into Excel by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Save an Excel file with the same name as your Python module and save it as a
    `.xlsm` file in the same folder where the Python module is located.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Excel, go to the `xlwings` tab and click on **Import Python UDFs** to pick
    up the changes made to your Python module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the data into two ranges in your Excel sheet (ensure that the dimensions
    of the ranges are appropriate for matrix multiplication).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In a cell, enter the formula `=matrix_add([range1]`, `[range2])`, where `[range1]`
    and `[range2]` are the ranges where you have entered data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should see the correct result displayed in the cell:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 11.7 – Using the matrix_add function from xlwings to Excel](img/B19142_11_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.7 – Using the matrix_add function from xlwings to Excel
  prefs: []
  type: TYPE_NORMAL
- en: 'The pro of this method is self-evident: the Excel user can determine what inputs
    to use and where the output should go without actually interacting with Python
    (or you, the Python developer).'
  prefs: []
  type: TYPE_NORMAL
- en: The con of the method is the generic one for `xlwings` and all similar solutions;
    for a local Python (or R) installation, all the dependencies must be correctly
    set up and the correct version must be made available to all users.
  prefs: []
  type: TYPE_NORMAL
- en: Please be aware that UDFs do not work with Python, which is available from the
    Microsoft Store.
  prefs: []
  type: TYPE_NORMAL
- en: It is noteworthy that alternatives exist, particularly PyXLL, which is a popular
    alternative to `xlwings`. It provides similar functionality with similar restrictions
    (including but not limited to not working with Python installed from the Microsoft
    Store).
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you have learned about why and how to call R and Python directly
    from Excel using the tools `BERT` and `xlwings`.
  prefs: []
  type: TYPE_NORMAL
- en: In the next part of the chapter, we will look at another way of enacting such
    integration without the need for a local installation and staying in full control
    of the code and its version (which can be handy in enterprise settings) but with
    a need for a server environment instead.
  prefs: []
  type: TYPE_NORMAL
- en: Calling R and Python from Excel via an API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An **API**, or **Application Programming Interface**, serves as a bridge between
    different software applications, allowing them to communicate and share data in
    a standardized way. It’s like a waiter at a restaurant who takes your order and
    conveys it to the kitchen, bringing back the meal once it’s ready.
  prefs: []
  type: TYPE_NORMAL
- en: In the digital world, an API specifies how software components should interact.
    It defines the methods and data formats that applications can use to request and
    exchange information. APIs can be used for various purposes, such as accessing
    web services, databases, or even hardware devices.
  prefs: []
  type: TYPE_NORMAL
- en: One fundamental use of APIs is enabling third-party developers to integrate
    their applications with existing services or platforms. In the context of your
    coding interests in R and Python, APIs can be utilized for data retrieval and
    for exposing your models to other software, including Excel.
  prefs: []
  type: TYPE_NORMAL
- en: The beauty of APIs lies in their versatility. They abstract the complexity of
    underlying systems, providing a standardized way for developers to interact with
    them. This abstraction allows for more straightforward development and integration
    processes, fostering collaboration and innovation.
  prefs: []
  type: TYPE_NORMAL
- en: In essence, APIs are the unsung heroes of the digital world, facilitating seamless
    communication between diverse software components and enabling the creation of
    more powerful and interconnected applications. Whether you’re working with data,
    web services, or other software, understanding and effectively using APIs can
    significantly enhance your capabilities as a programmer.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we’re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Open-source solutions for exposing R and Python as API endpoints
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calling APIs from Excel for integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An introduction to APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can think of APIs as a set of rules that will allow one piece of software
    to interact with another. A quick example of the usage of an API would be the
    weather app on a smartphone connecting with the weather system to get the current
    weather or a forecast of the weather.
  prefs: []
  type: TYPE_NORMAL
- en: An easy way to think of an API, besides a mechanism for different systems to
    communicate, is to think of a contract. The documentation of an API will specify
    how a system can connect with and talk with the system, what it is allowed to
    do, and how often.
  prefs: []
  type: TYPE_NORMAL
- en: 'Systems that maintain an API will often act as a sort of client and server
    type arrangement. A REST API is one of the most popular types of API today. **REST**
    stands for **representational state transfer**. The major pro of this type of
    API is that it is stateless. Statelessness means that servers do not save client
    data between requests. The requests that are sent to the server will remind you
    of a URL. A generic REST API call might look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'You could think of the preceding as obtaining a list of users, and you might
    think that you would obtain a list because this was a `GET` request. Here is a
    generic `POST` request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Here, you have posted (`POST`) data to the server. So, with a REST API, think
    of posting and getting information from and to the server.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand what an API is and some of the types and use cases they
    have, we can now move on to taking a look at open-source solutions for exposing
    R/Python as an API endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: Open source solutions for exposing R as API endpoints
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are going to start off by first showing how to expose R as an API endpoint
    via the plumber package. The plumber package and its associated documentation
    can be found at the following URL: [https://www.rplumber.io/index.html](https://www.rplumber.io/index.html).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we will do is build out a very simple single-argument API to
    obtain the histogram of a standard normal distribution. Let’s take a look at the
    code; we will then discuss what is happening inside of it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The lines starting with `#*` are comments. In the plumber API, these comments
    are special and are used for documentation. They describe what the API endpoint
    does and provide information about the parameters. The first comment introduces
    the purpose of the API endpoint. It states that the API will generate a plot based
    on data from a random normal distribution. The line `#* @param .mean The mean
    of the standard normal deviation` describes a parameter called `.mean`, representing
    the mean of the standard normal distribution. Parameters in plumber APIs are like
    inputs that can be passed to the API when making a request.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following `#* @get /plot` comment specifies that this API endpoint can
    be accessed using an `HTTP GET` request, and the endpoint path is `/plot`. In
    simpler terms, if you want to use this API, you’d request something like [http://your-api-url/plot](http://your-api-url/plot).
    The function is defined as follows: `function(.mean)`; here, the actual R function
    starts. It takes a parameter, `.mean`, which is the mean of the standard normal
    distribution. In order for the argument to be passed to the `rnorm()` function
    itself, we must make sure that we declare it as a numeric data type. We do this
    internally as follows: `mu <- as.numeric(.mean)`, where the parameter `.mean`
    is converted to a numeric value and stored in a variable called `mu`. After we
    convert the argument into a numeric, we can pass it off to `rnorm()` and `hist()`
    in order to create the plot.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we are at the point where we generate and plot the data. This is done
    with the following bit of code: `hist(rnorm(n = 1000, mean = mu, sd = 1))`: This
    line generates `1000` random numbers from a normal distribution with the specified
    mean (`mu`) and standard deviation (`sd = 1`). Then, it creates a histogram of
    these numbers. Essentially, it’s generating random data and plotting a histogram.'
  prefs: []
  type: TYPE_NORMAL
- en: In summary, this plumber API, when deployed, creates an endpoint (`/plot`) that,
    when accessed with a mean value, generates a histogram plot based on random data
    from a normal distribution. The mean is a parameter that you provide when making
    a request to this API. It’s a simple yet powerful example of how you can use R
    and plumber to expose data processing capabilities over the web.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have generated the code that will produce the API, let’s look at
    the output once the code is run. To do so, let’s see the following script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s give a line-by-line explanation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This line loads the `plumber` package, which is required to create plumber
    APIs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'These lines set the directory and file path of the `plumber` API file. The
    `getwd()` function returns the working directory, which is the current directory
    that R is using. The `paste0(`) function is used to concatenate strings, so the
    `sub_dir` variable contains the string `/Chapter11/`, and the `full_dir` variable
    contains the path to the `/Chapter12/` directory. The `f` variable contains the
    filename of the plumber API file, which is `plumber_api.R`. The `f_path` variable
    contains the full path to the plumber API file, which is the combination of the
    `full_dir` and `f` variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'This line initiates the plumber API by calling the `pr()` function with the
    `f_path` variable as the argument. The `pr()` function reads the plumber API file
    and creates a plumber API object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This line simply returns the `root` variable, which is the plumber API object.
    The R code provided creates a plumber API from a file called `plumber_api.R`.
    The plumber API can then be used to expose R functions as web endpoints.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s use a simple analogy: Imagine that you have a restaurant and want to
    offer a delivery service. You could create a simple website that allows customers
    to order food online. The website would need to be able to communicate with your
    restaurant’s kitchen to place orders. In this analogy, the plumber API is like
    the website, and the R functions are like the restaurant’s kitchen. The plumber
    API allows you to expose R functions to the outside world so that other applications
    can communicate with them. Now let’s run the API and see what happens; we do this
    with the following code: `pr_run(root)`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.8 – plumber GET API](img/B19142_11_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.8 – plumber GET API
  prefs: []
  type: TYPE_NORMAL
- en: We see that when we run the preceding code, we get a screen back that will allow
    us to test out the API; so, let’s do just that.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do that, we can click on the **GET** button, as this is a GET API call.
    When we do that, we get the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.9 – Enter arguments for API](img/B19142_11_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.9 – Enter arguments for API
  prefs: []
  type: TYPE_NORMAL
- en: 'We see that we can enter an argument to the parameter of `.mean`; let’s enter
    `10`. First, click the **Try it out** button, and then you can enter a value;
    then, you can hit **Execute**, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.10 – Enter the argument and click Execute](img/B19142_11_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.10 – Enter the argument and click Execute
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s hit that `curl` request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we get the request URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Last but not least, we get the histogram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.11 – The histogram generated by the API call](img/B19142_11_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.11 – The histogram generated by the API call
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have learned how to build and use the API for R, we will learn how
    to do the same for Python in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Open-source solutions for exposing Python as an API endpoint
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`FastAPI` is a modern, fast (high-performance) web framework for building APIs
    with Python 3.7+ based on standard Python-type hints. It’s easy to use and allows
    you to create robust APIs quickly.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can install FastAPI using `pip`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is a simplified example of creating a `FastAPI` endpoint to expose
    a Python function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the `add_numbers` function available at the `/api/add` endpoint
    takes two query parameters (`num1` and `num2`), representing the numbers to be
    added. The `Query` function from FastAPI is used to define these parameters with
    optional descriptions. The result is then calculated, and a JSON response containing
    the result is returned.
  prefs: []
  type: TYPE_NORMAL
- en: With this example, you can now send a `GET` request to /`api/add?num1=3&num2=4`
    to get the result. The `num1` and `num2` parameters are specified in the query
    string of the URL.
  prefs: []
  type: TYPE_NORMAL
- en: '`FastAPI` automatically generates OpenAPI and JSON Schema documentation, making
    it convenient for users to understand and interact with your API.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To run the development server, run the following from the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Replace `your_app_name` with the name of your Python file, keeping in mind that
    the python file name should be different than `fastapi` or similar to the previously
    installed module.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Ensure that your API is secured, especially if it’s accessible over the internet.
    `FastAPI` provides features for handling authentication and authorization.
  prefs: []
  type: TYPE_NORMAL
- en: We have covered creating an API for both R and Python. It is time to call the
    API we have created from Excel!
  prefs: []
  type: TYPE_NORMAL
- en: Calling APIs from Excel VBA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we are going to go over the code that will allow us to use a `curl` request
    to obtain the image from the API that was generated from the `plumber_api.R` file.
    In order to do this, you will have to run the code from the previous section:
    `root |> pr_run()`; this is the portion that will open up the swagger dialogue
    and give you the URL that is running from `plumber`. For me, at the time of this
    writing, it is as follows: `http://127.0.0.1:6855`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we are going to specifically execute the `GET` request via
    a `curl` command in VBA. Here is the code that will run, and the explanation will
    follow:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s break down the code step by step in simple terms:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Define the `curl` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: This part creates a variable (`curlCommand`) to store a command-line instruction.
    The command is essentially telling the computer to use `curl` (a command-line
    tool for making HTTP requests) to get an image from the specified web address
    (`http://127.0.0.1:6855/plot?.mean=0`). All of this goes on a single line in the
    VBA editor. The `-H` flag specifies an HTTP header, in this case, telling the
    server that we accept an image in PNG format. The `-o` flag specifies the output
    file, and it’s set to save the image in the temporary folder with the name `temp_image.png`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `curl` command using `Shell`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'This line executes the `curlCommand` using the Windows Command Prompt (`cmd
    /c`). The `vbHide` at the end means that the command prompt window will not be
    visible while executing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: This part creates a variable (`ws`) to represent a worksheet in Excel. It either
    creates a new worksheet named `"Sheet1"` or refers to an existing one in the active
    workbook.
  prefs: []
  type: TYPE_NORMAL
- en: 'Clear the previous content in `Sheet1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: This line removes any existing content in the specified worksheet (`"Sheet1"`).
  prefs: []
  type: TYPE_NORMAL
- en: 'Insert the image into the worksheet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: This line inserts the image downloaded by the `curl` command into the specified
    worksheet (`"Sheet1"`). `Environ("TEMP")` refers to the system’s temporary folder.
    `"\temp_image.png"` is the name of the image file downloaded by the `curl` command.
  prefs: []
  type: TYPE_NORMAL
- en: In summary, this VBA code automates the process of using the `curl` command
    to download an image from a web address and then inserts that image into an Excel
    worksheet named `Sheet1`. The worksheet is cleared first to ensure no previous
    content remains.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s see the output from the VBA script:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.12 – Histogram generated by R from VBA](img/B19142_11_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.12 – Histogram generated by R from VBA
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you have learned how to create an API via the plumber package
    in R. You have also learned how to call this API via a curl request inside of
    an Excel VBA macro.
  prefs: []
  type: TYPE_NORMAL
- en: The beauty of an API-based solution is that Excel (and, in turn, your end-user)
    does not have to know that the code behind the API is written in R. The same macro
    could call an API written in Python without any changes!
  prefs: []
  type: TYPE_NORMAL
- en: So, what are the pros and cons of this approach?
  prefs: []
  type: TYPE_NORMAL
- en: 'The pros have been spelled out previously: no local installation, no need to
    maintain the R/Python environment for every user, and full control over the code
    running behind the API. Should you need to update anything, from the R/Python
    version via the package dependencies to the code itself, you can do this on the
    server side without involving your end user.'
  prefs: []
  type: TYPE_NORMAL
- en: 'One con is general to all API-based solutions: it requires a server to be set
    up and maintained, which usually is both too difficult and not allowed for data
    analysts and data scientists. This means dedicated IT resources are needed.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A con specific to open source solutions for API hosting is one general to all
    open source solutions: what you save on license fees you pay in having to do more
    yourself. Open-source API solutions expect you to handle security (see the note
    at the end of the FastAPI section), the integration with the enterprise landscape
    (such as user management), and, generally, do everything yourself.'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, a con of both `plumber` and `FastAPI` is the need to write custom code
    to define your API endpoints and functionality. In a single-person team, this
    is not a big issue other than the hours needed, but in larger teams, this often
    leads to a fractured landscape where it is difficult to enforce naming conventions
    and standardization.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section of this chapter, we will have a look at some of the most
    commonly used commercial solutions for hosting R and Python API endpoints and
    see how they address these questions.
  prefs: []
  type: TYPE_NORMAL
- en: Commercial API solutions for R and Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will cover some of the most commonly used commercial API
    solutions for R and Python.
  prefs: []
  type: TYPE_NORMAL
- en: Azure Functions (and similar solutions from the other large cloud providers)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Azure Functions** is a serverless computing service offered by Microsoft
    Azure. It allows you to run event-triggered code without explicitly provisioning
    or managing infrastructure. You can build APIs, respond to events, and perform
    various tasks using a wide range of supported languages, including Python and
    JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Use cases**: Ideal for building lightweight, event-driven APIs or microservices.
    Integration with other Azure services provides scalability and flexibility.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pro**: A “serverless” infrastructure means minimal need for IT involvement.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Con**: Limited flexibility (e.g., choice of R/Python version) and difficulty
    in migrating to other cloud providers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Posit Connect
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Posit Connect** is a commercial solution designed to connect R and Python
    to Excel. It facilitates the integration of analytics and data science directly
    into Excel workbooks, allowing users to leverage the power of R and Python within
    the familiar Excel interface.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Use cases**: Particularly suitable for organizations where Excel is a primary
    tool for data analysis, providing a seamless way to enhance Excel’s capabilities
    with advanced analytics.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pro**: A deeply integrated ecosystem for Posit solutions, including RStudio,
    Quarto, and Shiny Pro.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Con**: It utilizes plumber and FastAPI/Flask, so you will need to write custom
    code to define your API, leading to the drawbacks discussed under the open source
    API solutions. Only Linux servers are supported, both on-premise and in-cloud.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ownR Infinity platform
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**ownR Infinity** is a versatile platform designed to empower R and Python
    functionalities within a user-friendly environment. Enabling the creation of personalized
    functions and models transforms them into accessible APIs, with a particular focus
    on seamless integration within Excel.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Use cases**: Suited for organizations heavily reliant on R and Python for
    advanced data analytics. Perfect for users seeking to augment Excel’s capabilities
    with statistical and data analysis features.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pros**: Provides a user-friendly interface for leveraging the capabilities
    of R and Python without extensive programming knowledge. Enables seamless integration
    of R and Python functionalities across various environments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Con**: Only Linux servers are supported, both on-premises and in-cloud.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For an example of how to use an ownR API from Excel, you can download an example
    workbook from here: [https://bitbucket.org/functionalanalytics/examples/src/master/ccy%20converter%20Excel%20demo%20button.xlsm](https://bitbucket.org/functionalanalytics/examples/src/master/ccy%20converter%20Excel%20demo%20button.xlsm).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The example uses a hosted API for the following code base: [https://bitbucket.org/functionalanalytics/converter/src/master/](https://bitbucket.org/functionalanalytics/converter/src/master/)'
  prefs: []
  type: TYPE_NORMAL
- en: Note that there is no need to write custom code beyond the pure Python code
    (or R code) and no need to add security, deployment, and other considerations
    manually, as these are automatically added by ownR.
  prefs: []
  type: TYPE_NORMAL
- en: These commercial solutions provide high levels of integration and features for
    connecting Python and R with Excel and other frontends, catering to diverse use
    cases and preferences within the analytics and data science community.
  prefs: []
  type: TYPE_NORMAL
- en: The pros of commercial solutions compared to open source ones boil down to the
    level of support and handholding with things such as out-of-the-box security,
    deeper and easier integration with the wider enterprise landscape, and a dedicated
    support organization in case of problems.
  prefs: []
  type: TYPE_NORMAL
- en: 'The con is an obvious one: these solutions have license fees that require a
    dedicated budget. While all these companies aim at pricing in a way that the reduction
    of manual work and increased added value justify the price tag, a discussion with
    the budget holders is never easy.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you have learned ways to call R and Python from Excel instead
    of the other way around to empower your end users even further. We have covered
    the reasons for doing so and two very different approaches: calling R and Python
    locally and via an API endpoint.'
  prefs: []
  type: TYPE_NORMAL
- en: For locally calling R and Python, we covered `BERT` and `xlwings` in detail,
    from setting up and testing the environment via creating R and Python solutions
    up to and including how to call those solutions from Excel using the various methods
    provided by `BERT` and `xlwings`, such as VBA code and UDFs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you learned about API endpoints and the benefits of using an API endpoint
    to connect Python and R to Excel. We discussed the pros and cons of such a setup
    and then delved into the two flavors of API hosting: open source tools and commercial
    solutions. We have covered the two most used open source setups: plumber for R
    and FastAPI for Python. Finally, we had a look at commercial solutions for hosting
    R and Python API endpoints.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The next (and last) chapter will cover a more domain-oriented topic: data analysis
    and visualization with Python and R in Excel.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Part 5: Data Analysis and Visualization with R and Python for Excel Data –
    A Case Study'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Delve into the world of data analysis and visualization within Excel using the
    power of Python and R. Through a captivating case study, you will discover how
    to leverage these versatile programming languages to uncover insights, visualize
    data, and drive informed decision-making directly within Excel.
  prefs: []
  type: TYPE_NORMAL
- en: 'This part has the following chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 12*](B19142_12.xhtml#_idTextAnchor238), *Data Analysis and Visualization
    with R and Python in Excel – A Case Study*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
