- en: '11'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '11'
- en: Calling R/Python Locally from Excel Directly or via an API
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 直接从 Excel 或通过 API 本地调用 R/Python
- en: In this chapter, we are going to discuss calling R and Python from within Excel.
    You may ask yourself why you would want to do that when there are many functions
    inside of Excel that one can use or, if so desired, can write with the VBA portion
    of the application. One reason why you might want to call R or Python from Excel
    is to leverage the power and flexibility of these programming languages for data
    analysis and visualization. Excel is a widely used spreadsheet application that
    can handle large datasets and perform basic calculations and functions. However,
    Excel has some limitations when it comes to more advanced or customized tasks,
    such as statistical modeling, machine learning, web scraping, natural language
    processing, and so on. By calling R or Python from Excel, you can access the rich
    libraries and packages that these languages offer and use them to manipulate,
    transform, and visualize your data in more sophisticated ways. You can also automate
    your workflows and create reproducible reports and dashboards. Calling R or Python
    from Excel can enhance your productivity and efficiency, as well as expand your
    analytical capabilities.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论如何在 Excel 内部调用 R 和 Python。你可能想知道为什么你想要这样做，因为 Excel 内部有许多函数可以使用，或者如果你愿意，可以使用应用程序的
    VBA 部分编写。你可能想要从 Excel 调用 R 或 Python 的一个原因是为了利用这些编程语言在数据分析可视化方面的强大功能和灵活性。Excel
    是一种广泛使用的电子表格应用程序，可以处理大型数据集并执行基本的计算和函数。然而，当涉及到更高级或定制的任务时，例如统计建模、机器学习、网络抓取、自然语言处理等，Excel
    有一些局限性。通过从 Excel 调用 R 或 Python，你可以访问这些语言提供的丰富库和包，并使用它们以更复杂的方式操纵、转换和可视化你的数据。你还可以自动化你的工作流程并创建可重复的报告和仪表板。从
    Excel 调用 R 或 Python 可以提高你的生产力和效率，以及扩展你的分析能力。
- en: 'We will be a bit different here. In this chapter, we will cover two (very)
    different methods for calling R and Python from Excel: local calls, where R or
    Python is installed on the same machine, and running and using API calls, where
    the R or Python functionality is deployed to a server as an API endpoint. For
    the latter, we will have a look at open-source tools and some of the most popular
    commercial solutions.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将有一些不同。在本章中，我们将介绍两种从 Excel 调用 R 和 Python 的（非常）不同的方法：本地调用，其中 R 或 Python
    安装在同一台机器上，以及运行和使用 API 调用，其中 R 或 Python 功能作为 API 端点部署到服务器上。对于后者，我们将探讨开源工具和一些最受欢迎的商业解决方案。
- en: Technical requirements
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'In this chapter, you can find all the code on GitHub at the following link:
    [https://github.com/PacktPublishing/Extending-Excel-with-Python-and-R/tree/main/Chapter%2011](https://github.com/PacktPublishing/Extending-Excel-with-Python-and-R/tree/main/Chapter%2011).'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你可以在以下链接找到所有代码：[https://github.com/PacktPublishing/Extending-Excel-with-Python-and-R/tree/main/Chapter%2011](https://github.com/PacktPublishing/Extending-Excel-with-Python-and-R/tree/main/Chapter%2011).
- en: 'You will need to install the following external software:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要安装以下外部软件：
- en: 'BERT, which can be found here: [http://bert-toolkit.com/download-bert](http://bert-toolkit.com/download-bert)'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BERT，可以在以下位置找到：[http://bert-toolkit.com/download-bert](http://bert-toolkit.com/download-bert)
- en: Python and `xlwings` (refer to the *Setting up an* *environment* section)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 和 `xlwings`（参考 *设置环境* 部分）
- en: '`plumber` for R'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: R 的 `plumber`
- en: FastAPI for Python
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 的 FastAPI
- en: Let’s begin with the first part.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从第一部分开始。
- en: Calling R and Python from Excel locally
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在本地从 Excel 调用 R 和 Python
- en: 'In this first part of the chapter, we are going to learn about using the +or
    Excel that can interface with R directly, along with `xlwings` to interact with
    Python from Excel. We will also quickly show how one can use a VBA script to call
    R from Excel. In this chapter, we’re going to cover the following main topics:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的第一部分，我们将学习如何使用可以直接与 R 接口的 Excel，以及 `xlwings` 从 Excel 交互 Python。我们还将快速展示如何使用
    VBA 脚本从 Excel 调用 R。在本章中，我们将涵盖以下主要主题：
- en: Why you would want to call R/Python from Excel locally
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么你想要在本地从 Excel 调用 R/Python
- en: Setting up an environment
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置环境
- en: Calling R/Python directly from Excel
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直接从 Excel 调用 R/Python
- en: Let’s begin!
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧！
- en: Why you would want to call R/Python from Excel locally
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么你想要在本地从 Excel 调用 R/Python
- en: As we discussed in the opening, it is possible to do a wide variety of analysis
    and programming in Excel via the use of VBA. However, this can be tedious to write
    and difficult to implement. By harnessing the power of `BERT` and `xlwings`, you
    can use an already rich landscape of functions that are ready to go or write your
    own in those languages and use them in Excel.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在开头讨论的那样，通过使用 VBA，你可以在 Excel 中进行各种分析和编程。然而，编写这些代码可能很繁琐，实施起来也困难。通过利用 `BERT`
    和 `xlwings` 的力量，你可以使用现成的丰富功能集，或者在这些语言中编写自己的函数并在 Excel 中使用它们。
- en: 'With `BERT`, you get the power of R in Excel: R is a powerful statistical programming
    language with a wide range of capabilities. `BERT` allows you to use these capabilities
    directly in Excel without having to switch to a separate R environment. This can
    be very convenient if you are already working in Excel and don’t want to leave
    the application.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `BERT`，你可以在 Excel 中获得 R 的力量：R 是一种功能强大的统计编程语言，具有广泛的能力。`BERT` 允许你直接在 Excel
    中使用这些能力，而无需切换到单独的 R 环境。如果你已经在 Excel 中工作，并且不想离开应用程序，这将非常方便。
- en: '`BERT` allows you to write R functions that can be used as custom Excel functions.
    This can be useful for creating functions that are not available in Excel or for
    improving the performance of existing Excel functions. For example, you can create
    a Brownian motion by using `BERT` to call a function built inside of R, which
    is going to be much easier to code in R than it would in Excel.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`BERT` 允许你编写可以在 Excel 中用作自定义函数的 R 函数。这可以用于创建 Excel 中不可用的函数，或者提高现有 Excel 函数的性能。例如，你可以使用
    `BERT` 调用 R 内部构建的函数来创建布朗运动，这在 R 中编码会比在 Excel 中更容易。'
- en: 'What `BERT` is for R, `xlwings` is for Python. The benefits are analogous as
    well: create your solution in Python and call it from Excel directly.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 R，`BERT` 是什么，对于 Python，`xlwings` 就是那个。它们的益处也是相似的：在 Python 中创建你的解决方案，然后直接从
    Excel 中调用它。
- en: Let’s start with setting up your environment so you can get your hands dirty!
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始设置你的环境，这样你就可以动手实践了！
- en: Setting up an environment
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置环境
- en: Since setting up an environment for `BERT` and `xlwings` is non-trivial, we
    will walk you through the process in detail in the coming subsections.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 由于设置 `BERT` 和 `xlwings` 的环境不是一件简单的事情，我们将在接下来的小节中详细说明这个过程。
- en: Steps to set up BERT for R
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置 BERT for R 的步骤
- en: 'In this section, we will cover the installation of `BERT` for Windows so that
    we can utilize `BERT` to manipulate Excel from inside of R. The first thing that
    we will have to do is download the `BERT` installer, which can be obtained from
    here: [https://bert-toolkit.com/download-bert](https://bert-toolkit.com/download-bert).'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍在 Windows 上安装 `BERT`，以便我们可以利用 `BERT` 从 R 内部操作 Excel。我们首先必须做的是下载 `BERT`
    安装程序，可以从这里获得：[https://bert-toolkit.com/download-bert](https://bert-toolkit.com/download-bert)。
- en: 'Once this is downloaded, you can then install it as you would any other program.
    Once installed, you can then use the **Add-ins** ribbon from Excel to open the
    **BERT Console**, as shown here:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 下载完成后，你可以像安装任何其他程序一样安装它。安装后，你可以使用 Excel 的 **添加组件** 工作表来打开 **BERT 控制台**，如下所示：
- en: '![Figure 11.1 – BERT Console from the Add-ins ribbon in Excel](img/B19142_11_01.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.1 – 从 Excel 的添加组件功能区打开的 BERT 控制台](img/B19142_11_01.jpg)'
- en: Figure 11.1 – BERT Console from the Add-ins ribbon in Excel
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.1 – 从 Excel 的添加组件功能区打开的 BERT 控制台
- en: 'Once you see it, click the button, and the console will open, as shown here:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦看到它，点击按钮，控制台就会打开，如下所示：
- en: '![Figure 11.2 – The BERT Console](img/B19142_11_02.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.2 – BERT 控制台](img/B19142_11_02.jpg)'
- en: Figure 11.2 – The BERT Console
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.2 – BERT 控制台
- en: Now, let’s move to Python.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们转向 Python。
- en: Steps to set up xlwings for Python
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置 xlwings for Python 的步骤
- en: 'In this subsection, we will cover the steps required to set up `xlwings`:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在本小节中，我们将介绍设置 `xlwings` 所需的步骤：
- en: Installing Python
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装 Python
- en: Ensure that Python is installed on your machine. You can download the latest
    version from the official Python website ([https://www.python.org/downloads/](https://www.python.org/downloads/)).
    During installation, you can check the box that says **Add Python to PATH** for
    easier access.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你的机器上已安装 Python。你可以从官方 Python 网站下载最新版本（[https://www.python.org/downloads/](https://www.python.org/downloads/)）。在安装过程中，你可以勾选表示
    **将 Python 添加到 PATH** 的复选框，以便更容易访问。
- en: 'Installing Excel add-ins:'
  id: totrans-39
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 安装 Excel 插件：
- en: 'Follow these simple steps to get started with `xlwings`:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下简单步骤开始使用 `xlwings`：
- en: 'Open a command prompt and run the following:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开命令提示符并运行以下命令：
- en: '[PRE0]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To install the add-in, use the command-line client:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要安装插件，请使用命令行客户端：
- en: '[PRE1]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![Figure 11.3 – xlwings in the ribbon in Excel](img/B19142_11_03.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.3 – Excel 中的 xlwings 在功能区](img/B19142_11_03.jpg)'
- en: Figure 11.3 – xlwings in the ribbon in Excel
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.3 – Excel 中的 xlwings 在功能区
- en: Configuring the Excel and Python environment
  id: totrans-47
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 配置 Excel 和 Python 环境
- en: Configure `xlwings` by specifying the Python interpreter path in the Excel add-ins
    settings. However, this is typically done automatically by `xlwings`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Excel 插件设置中指定 Python 解释器路径来配置 `xlwings`。然而，这通常由 `xlwings` 自动完成。
- en: To verify the setup, run any of the examples given in the next section.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 为了验证设置，运行下一节中给出的任何示例。
- en: Troubleshooting
  id: totrans-50
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 故障排除
- en: If you encounter issues, refer to the documentation for `xlwings` ([https://docs.xlwings.org/en/stable/](https://docs.xlwings.org/en/stable/)).
    Check for common troubleshooting tips and solutions.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您遇到问题，请参阅 `xlwings` 的文档（[https://docs.xlwings.org/en/stable/](https://docs.xlwings.org/en/stable/)）。检查常见的故障排除技巧和解决方案。
- en: This step-by-step guide ensures a smooth setup of your local environment, enabling
    Excel and Python to work seamlessly together. Following these instructions will
    provide a solid foundation for the subsequent chapters, allowing you to harness
    the combined power of Excel and Python.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这份逐步指南确保您本地环境的顺利设置，使 Excel 和 Python 能够无缝协同工作。遵循这些说明将为后续章节提供一个坚实的基础，让您能够利用 Excel
    和 Python 的结合力量。
- en: Now that you have set up, let’s get to the meat of how to actually use these
    tools!
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经设置好了，让我们来探讨如何实际使用这些工具！
- en: Calling R/Python directly from Excel
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 直接从 Excel 调用 R/Python
- en: In this section, we will dig into the ways you can call R and Python from Excel
    using the tools set up in the previous section. We will cover several ways of
    achieving this and give examples so that you can try them out as well.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将深入探讨使用上一节中设置的工具从 Excel 调用 R 和 Python 的方法。我们将介绍几种实现方式，并提供示例，以便您可以尝试它们。
- en: Executing R with VBA and BERT
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 VBA 和 BERT 执行 R
- en: 'Another great way of calling R from Excel is via the VBA macro. This requires
    that a workbook be saved as a macro-enabled workbook. Since BERT is designed to
    work from Excel to R, the syntax of an R expression can be written in the VBA
    console and called with the following in VBA:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种从 Excel 调用 R 的好方法是使用 VBA 宏。这要求工作簿以宏启用工作簿保存。由于 BERT 是设计从 Excel 到 R 工作的，R 表达式的语法可以在
    VBA 控制台中编写，并在 VBA 中使用以下方式调用：
- en: '[PRE2]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Let’s look at an easy example:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一个简单的例子：
- en: '[PRE3]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This will end up producing a plot of the density of a random normal distribution.
    Let’s see the output:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这将最终生成一个随机正态分布密度的图表。让我们看看输出结果：
- en: '![Figure 11.4 – Using BERT to call R from VBA](img/B19142_11_04.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.4 – 使用 BERT 从 VBA 调用 R](img/B19142_11_04.jpg)'
- en: Figure 11.4 – Using BERT to call R from VBA
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.4 – 使用 BERT 从 VBA 调用 R
- en: Interacting with Excel via BERT
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过 BERT 与 Excel 交互
- en: It is possible to manipulate Excel with BERT using the **Excel Scripting Interface**.
    You may ask yourself, “Why would I want to do such a thing”? Well, remember, with
    BERT, you have access to not only Excel but R as well. This means that you can
    use R functions that may not exist in Excel to generate data; let’s see an example.
    This was done in the left pane.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 BERT 通过 **Excel 脚本接口** 操作 Excel 是可能的。你可能想知道，“我为什么要做这样的事情”？好吧，记住，有了 BERT，你不仅可以访问
    Excel，还可以访问 R。这意味着你可以使用 R 函数来生成数据，这些函数可能不在 Excel 中；让我们看看一个例子。这是在左侧面板中完成的。
- en: 'First, we will define a range:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将定义一个范围：
- en: '[PRE4]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This will define a range in R for the cells `A1:B4` and will place it in the
    global environment as a variable called `rng`. This was typed into BERT’s R interface.
    Now that this range is defined, it is possible to see how many range commands
    are at your fingertips and what some of them are:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在 R 中定义一个范围，用于单元格 `A1:B4`，并将其作为名为 `rng` 的变量放入全局环境中。这是在 BERT 的 R 接口中输入的。现在这个范围已经定义，就可以看到有多少范围命令在您的指尖，以及其中的一些：
- en: '[PRE5]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'So, we see that there are 234 range commands available. By calling `ls(rng)`,
    the R console will print out all of the commands; here, we use `head()` so that
    only the first few are shown. Here, we are going to use the `RAND()` Excel command
    to place random numbers into the defined range:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们看到有 234 个范围命令可用。通过调用 `ls(rng)`，R 控制台将打印出所有命令；这里，我们使用 `head()` 以仅显示前几个。在这里，我们将使用
    `RAND()` Excel 命令将随机数放入定义的范围中：
- en: '[PRE6]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let’s take a look at the output in the Excel file:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看 Excel 文件中的输出结果：
- en: '![Figure 11.5 – Using the RAND() function from BERT in Excel](img/B19142_11_05.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.5 – 在 Excel 中使用 BERT 的 RAND() 函数](img/B19142_11_05.jpg)'
- en: Figure 11.5 – Using the RAND() function from BERT in Excel
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.5 – 在 Excel 中使用 BERT 的 RAND() 函数
- en: 'If we want to stay inside of BERT and see the values that were sent to Excel,
    we can do the following:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想保持在 BERT 内部并查看发送到 Excel 的值，我们可以执行以下操作：
- en: '[PRE7]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now that we have gone over some basics of how to work with Excel via R, it is
    time to see how we can achieve similar things in Python.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了如何通过 R 与 Excel 交互的一些基础知识，是时候看看我们如何在 Python 中实现类似的功能了。
- en: Calling Python from Excel using xlwings
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 xlwings 从 Excel 调用 Python
- en: 'You have three options to call Python from Excel using `xlwings`:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 `xlwings` 从 Excel 调用 Python 的三种方法：
- en: The `Run` button under the `xlwings` tab of the ribbon
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标题栏 `xlwings` 选项卡下的 `Run` 按钮
- en: 'Macros: These call Python from Excel'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 宏：这些从 Excel 调用 Python
- en: '**User Defined Functions** (**UDFs**) (Windows only)'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户自定义函数**（**UDFs**）（仅限 Windows）'
- en: Let’s have a look at the pros and cons of all three, as well as an example!
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看这三种方法的优缺点，以及一个示例！
- en: The Run button
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行按钮
- en: The `Run` button expects a function called `main` in a Python module with the
    same name as your workbook. This is a quote from the documentation and a hard
    prerequisite. The main benefit of this method is that there is no VBA and no macros;
    you can use a normal XLSX file, which can be very useful in security-restricted
    situations where XLSM files are not allowed.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`Run` 按钮期望在具有与工作簿相同名称的 Python 模块中有一个名为 `main` 的函数。这是文档中的引用，是一个硬性前提。这种方法的主要优点是无需
    VBA 和宏；您可以使用正常的 XLSX 文件，这在不允许 XLSM 文件的安全受限情况下非常有用。'
- en: 'To try out the `Run` button, follow these steps:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 要尝试 `Run` 按钮，请按照以下步骤操作：
- en: 'Create a Python module called `sumitup.py` with the following code:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `sumitup.py` 的 Python 模块，代码如下：
- en: '[PRE8]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Open Excel and fill cell A1 with `2` and cell A2 with `3`.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Excel 并在单元格 A1 中输入 `2`，在单元格 A2 中输入 `3`。
- en: Save the Excel sheet as `sumitup.xlsx` in the same folder where `sumitup.py`
    is saved.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 Excel 表格保存为 `sumitup.xlsx`，与 `sumitup.py` 所在的文件夹相同。
- en: Click the `Run` button in the `xlwings` menu in the Ribbon.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在功能区 `xlwings` 菜单中点击 `Run` 按钮。
- en: The cons of this method are the strict naming convention and file placement,
    and the lack of flexibility; only the function `main()` will be called, and the
    Python code needs to encode which fields will be used as input and where the output
    will go, meaning you cannot pass on inputs to the function from the Excel side.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的缺点是严格的命名约定和文件放置，以及缺乏灵活性；只有 `main()` 函数将被调用，Python 代码需要编码哪些字段将被用作输入以及输出将去哪里，这意味着您不能从
    Excel 端传递输入到函数。
- en: Macros
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 宏
- en: If you require more flexibility, and you can use a macro (and save your file
    as XLSM), you can use `RunPython` from VBA.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要更多的灵活性，并且可以使用宏（并将文件保存为 XLSM），您可以从 VBA 使用 `RunPython`。
- en: 'In this example, `RunPython` will import the `world` module and run the `helloworld()`
    function from that module. To run this example, try the following steps:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`RunPython` 将导入 `world` 模块并运行该模块中的 `helloworld()` 函数。要运行此示例，请尝试以下步骤：
- en: Create a `.xlsm` file and save it as `world.xlsm`.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `.xlsm` 文件并保存为 `world.xlsm`。
- en: 'Open the VBA editor and try the following:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 VBA 编辑器并尝试以下操作：
- en: 'Open `xlwings` is checked:'
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `xlwings` 已被选中：
- en: '![Figure 11.6 – Adding the xlwings reference to the VBA project](img/B19142_11_06.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.6 – 将 xlwings 引用添加到 VBA 项目中](img/B19142_11_06.jpg)'
- en: Figure 11.6 – Adding the xlwings reference to the VBA project
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.6 – 将 xlwings 引用添加到 VBA 项目中
- en: 'Create a new macro in the file with `Sub` as follows:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件中创建一个新的宏，使用 `Sub` 如下所示：
- en: '[PRE9]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Create the `hello.py` module in the same folder where you saved the `.xlsm`
    file with the following content:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在保存 `.xlsm` 文件的同一文件夹中创建 `hello.py` 模块，内容如下：
- en: '[PRE10]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now, you can run the macro in `world.xlsm` and see the results!
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您可以在 `world.xlsm` 中运行宏并查看结果！
- en: As you can see, using macros addresses one of the cons of the `Run` button,
    namely the location and name of the Python module(s) and function(s) used. However,
    you still cannot pass on inputs directly from the Excel file; the inputs have
    to be in pre-determined cells in the Excel file, and the output cell(s) have to
    be pre-determined as well.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，使用宏解决了 `Run` 按钮的一个缺点，即 Python 模块（s）和函数（s）的位置和名称。然而，您仍然不能直接从 Excel 文件传递输入；输入必须在
    Excel 文件中预先确定的单元格中，输出单元格（s）也必须预先确定。
- en: 'Note that you can change both the name of the module (to not match the name
    of the Excel file) and the location of the module (i.e., have it saved in a different
    folder than the `.xlsm` file). From the `xlwings` documentation, it reads that
    “*Per default, RunPython expects world.py in the same directory as the Excel file
    with the same name, but you can change both of these things: if your Python file
    is in a different folder, add that folder to the PYTHONPATH in the config. If
    the file has a different name, change the RunPython* *command accordingly*.”'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，你可以更改模块的名称（以便不与Excel文件名称匹配）以及模块的位置（即，将其保存在与`.xlsm`文件不同的文件夹中）。从`xlwings`文档中，我们看到“*默认情况下，RunPython期望Excel文件目录中的world.py与Excel文件具有相同的名称，但你也可以更改这两者：如果你的Python文件在不同的文件夹中，请将此文件夹添加到config中的PYTHONPATH。如果文件具有不同的名称，请相应地更改RunPython命令*。”
- en: UDFs
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: UDFs
- en: User-defined functions allow the user to extend Excel to add custom functions
    that can be used in the same way as `SUM()` and `IF()`.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 用户自定义函数允许用户扩展Excel，添加可以像`SUM()`和`IF()`一样使用的自定义函数。
- en: 'Writing a UDF in Python with `xlwings` is as easy, as seen here:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如下所示，使用`xlwings`在Python中编写UDF非常简单：
- en: '[PRE11]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In the preceding example, we specify that the inputs are both `numpy` array
    instances and define the function for matrix addition.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们指定输入都是`numpy`数组实例，并定义了矩阵加法函数。
- en: To integrate Python functions into Excel using `xlwings`, you’ll need to set
    up your Python source file in a specific way. By default, `xlwings` expects a
    Python source file to be located in the same directory as your Excel file and
    to have the same name as the Excel file but with a `.py` extension instead of
    `.xlsm`.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用`xlwings`将Python函数集成到Excel中，你需要以特定的方式设置你的Python源文件。默认情况下，`xlwings`期望Python源文件位于Excel文件相同的目录中，并且与Excel文件具有相同的名称，但使用`.py`扩展名而不是`.xlsm`。
- en: Alternatively, you can specify a specific module via the `xlwings` ribbon.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可以通过`xlwings`功能区指定一个特定的模块。
- en: 'Once you’ve prepared your Python source file, you can import the functions
    into Excel by following these steps:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你准备好了你的Python源文件，你可以按照以下步骤将函数导入到Excel中：
- en: Save an Excel file with the same name as your Python module and save it as a
    `.xlsm` file in the same folder where the Python module is located.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Excel文件保存为与你的Python模块相同的名称，并将其保存为与Python模块相同的文件夹中的`.xlsm`文件。
- en: In Excel, go to the `xlwings` tab and click on **Import Python UDFs** to pick
    up the changes made to your Python module.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Excel中，转到`xlwings`选项卡，然后单击**导入Python UDFs**以获取对Python模块所做的更改。
- en: Enter the data into two ranges in your Excel sheet (ensure that the dimensions
    of the ranges are appropriate for matrix multiplication).
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将数据输入到Excel表中的两个范围（确保范围的维度适合矩阵乘法）。
- en: In a cell, enter the formula `=matrix_add([range1]`, `[range2])`, where `[range1]`
    and `[range2]` are the ranges where you have entered data.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在单元格中输入公式 `=matrix_add([range1]`, `[range2])`，其中 `[range1]` 和 `[range2]` 是你已输入数据的数据范围。
- en: 'You should see the correct result displayed in the cell:'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该看到正确的结果显示在单元格中：
- en: '![Figure 11.7 – Using the matrix_add function from xlwings to Excel](img/B19142_11_07.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![图11.7 – 使用xlwings的matrix_add函数从Excel中](img/B19142_11_07.jpg)'
- en: Figure 11.7 – Using the matrix_add function from xlwings to Excel
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.7 – 使用xlwings的matrix_add函数从Excel中
- en: 'The pro of this method is self-evident: the Excel user can determine what inputs
    to use and where the output should go without actually interacting with Python
    (or you, the Python developer).'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的优点是显而易见的：Excel用户可以确定使用哪些输入以及输出应该去哪里，而无需实际与Python（或你，Python开发者）交互。
- en: The con of the method is the generic one for `xlwings` and all similar solutions;
    for a local Python (or R) installation, all the dependencies must be correctly
    set up and the correct version must be made available to all users.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的缺点是`xlwings`及其所有类似解决方案的通用缺点；对于本地Python（或R）安装，所有依赖项都必须正确设置，并且必须为所有用户提供正确的版本。
- en: Please be aware that UDFs do not work with Python, which is available from the
    Microsoft Store.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，UDFs不与Python一起工作，Python可以从Microsoft Store获取。
- en: It is noteworthy that alternatives exist, particularly PyXLL, which is a popular
    alternative to `xlwings`. It provides similar functionality with similar restrictions
    (including but not limited to not working with Python installed from the Microsoft
    Store).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，存在替代方案，尤其是PyXLL，它是`xlwings`的流行替代品。它提供了类似的功能和限制（包括但不限于不与从Microsoft Store安装的Python一起工作）。
- en: In this chapter, you have learned about why and how to call R and Python directly
    from Excel using the tools `BERT` and `xlwings`.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你已经学习了为什么以及如何使用工具`BERT`和`xlwings`直接从Excel调用R和Python。
- en: In the next part of the chapter, we will look at another way of enacting such
    integration without the need for a local installation and staying in full control
    of the code and its version (which can be handy in enterprise settings) but with
    a need for a server environment instead.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的下一部分，我们将探讨另一种实现此类集成的方法，无需本地安装，同时完全控制代码及其版本（这在企业环境中可能很有用），但需要服务器环境。
- en: Calling R and Python from Excel via an API
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过API从Excel调用R和Python
- en: An **API**, or **Application Programming Interface**, serves as a bridge between
    different software applications, allowing them to communicate and share data in
    a standardized way. It’s like a waiter at a restaurant who takes your order and
    conveys it to the kitchen, bringing back the meal once it’s ready.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '**API**，或**应用程序编程接口**，作为不同软件应用之间的桥梁，允许它们以标准化的方式通信和共享数据。它就像餐厅里的服务员，接受你的订单并将其传达给厨房，一旦准备好就带回食物。'
- en: In the digital world, an API specifies how software components should interact.
    It defines the methods and data formats that applications can use to request and
    exchange information. APIs can be used for various purposes, such as accessing
    web services, databases, or even hardware devices.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在数字世界中，API指定了软件组件应该如何交互。它定义了应用程序可以使用的方法和数据格式来请求和交换信息。API可以用于各种目的，例如访问网络服务、数据库，甚至硬件设备。
- en: One fundamental use of APIs is enabling third-party developers to integrate
    their applications with existing services or platforms. In the context of your
    coding interests in R and Python, APIs can be utilized for data retrieval and
    for exposing your models to other software, including Excel.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: API的一个基本用途是允许第三方开发者将他们的应用程序与现有服务或平台集成。在你对R和Python的编码兴趣的背景下，API可以用于数据检索，以及将你的模型暴露给其他软件，包括Excel。
- en: The beauty of APIs lies in their versatility. They abstract the complexity of
    underlying systems, providing a standardized way for developers to interact with
    them. This abstraction allows for more straightforward development and integration
    processes, fostering collaboration and innovation.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: API的美丽之处在于其多功能性。它们抽象了底层系统的复杂性，为开发者提供了一个标准化的方式来与之交互。这种抽象使得开发过程和集成过程更加直接，促进了协作和创新。
- en: In essence, APIs are the unsung heroes of the digital world, facilitating seamless
    communication between diverse software components and enabling the creation of
    more powerful and interconnected applications. Whether you’re working with data,
    web services, or other software, understanding and effectively using APIs can
    significantly enhance your capabilities as a programmer.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 从本质上讲，API是数字世界的隐形英雄，它促进了各种软件组件之间的无缝通信，并使得创建更强大和互联的应用程序成为可能。无论你是在处理数据、网络服务还是其他软件，理解和有效使用API可以显著提升你作为程序员的技能。
- en: 'In this section, we’re going to cover the following main topics:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将涵盖以下主要主题：
- en: An introduction to APIs
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API简介
- en: Open-source solutions for exposing R and Python as API endpoints
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将R和Python作为API端点公开的开源解决方案
- en: Calling APIs from Excel for integration
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从Excel调用API进行集成
- en: An introduction to APIs
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: API简介
- en: You can think of APIs as a set of rules that will allow one piece of software
    to interact with another. A quick example of the usage of an API would be the
    weather app on a smartphone connecting with the weather system to get the current
    weather or a forecast of the weather.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将API想象成一套规则，允许一个软件组件与另一个软件组件交互。一个API使用的快速示例就是智能手机上的天气应用连接到天气系统以获取当前的天气或天气预报。
- en: An easy way to think of an API, besides a mechanism for different systems to
    communicate, is to think of a contract. The documentation of an API will specify
    how a system can connect with and talk with the system, what it is allowed to
    do, and how often.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 将API想象成一种机制，除了是不同系统之间通信的途径之外，还可以将其视为一份合同。API的文档将具体说明一个系统如何连接并与另一个系统进行交流，它被允许做什么，以及频率如何。
- en: 'Systems that maintain an API will often act as a sort of client and server
    type arrangement. A REST API is one of the most popular types of API today. **REST**
    stands for **representational state transfer**. The major pro of this type of
    API is that it is stateless. Statelessness means that servers do not save client
    data between requests. The requests that are sent to the server will remind you
    of a URL. A generic REST API call might look like the following:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 维护API的系统通常会充当一种客户端和服务器类型的安排。REST API是当今最受欢迎的API类型之一。**REST**代表**表示状态转移**。这种类型API的主要优点是它无状态。无状态意味着服务器在请求之间不会保存客户端数据。发送到服务器的请求会让你想起一个URL。一个通用的REST
    API调用可能看起来如下：
- en: '[PRE12]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You could think of the preceding as obtaining a list of users, and you might
    think that you would obtain a list because this was a `GET` request. Here is a
    generic `POST` request:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将前面的操作视为获取用户列表，你可能认为你会获取一个列表，因为这是一个`GET`请求。下面是一个通用的`POST`请求：
- en: '[PRE13]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Here, you have posted (`POST`) data to the server. So, with a REST API, think
    of posting and getting information from and to the server.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你已经向服务器发送了（`POST`）数据。因此，在REST API中，考虑从服务器发送和获取信息。
- en: Now that we understand what an API is and some of the types and use cases they
    have, we can now move on to taking a look at open-source solutions for exposing
    R/Python as an API endpoint.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了API是什么以及它们的一些类型和用例，我们可以继续探讨将R/Python作为API端点暴露的开源解决方案。
- en: Open source solutions for exposing R as API endpoints
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将R作为API端点暴露的开源解决方案
- en: 'We are going to start off by first showing how to expose R as an API endpoint
    via the plumber package. The plumber package and its associated documentation
    can be found at the following URL: [https://www.rplumber.io/index.html](https://www.rplumber.io/index.html).'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先展示如何通过plumber包将R暴露为一个API端点。plumber包及其相关文档可以在以下URL找到：[https://www.rplumber.io/index.html](https://www.rplumber.io/index.html)。
- en: 'The first thing we will do is build out a very simple single-argument API to
    obtain the histogram of a standard normal distribution. Let’s take a look at the
    code; we will then discuss what is happening inside of it:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先要做的是构建一个非常简单的单参数API，以获取标准正态分布的直方图。让我们看看代码；然后我们将讨论其中发生的事情：
- en: '[PRE14]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The lines starting with `#*` are comments. In the plumber API, these comments
    are special and are used for documentation. They describe what the API endpoint
    does and provide information about the parameters. The first comment introduces
    the purpose of the API endpoint. It states that the API will generate a plot based
    on data from a random normal distribution. The line `#* @param .mean The mean
    of the standard normal deviation` describes a parameter called `.mean`, representing
    the mean of the standard normal distribution. Parameters in plumber APIs are like
    inputs that can be passed to the API when making a request.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 以`#*`开头的行是注释。在plumber API中，这些注释是特殊的，用于文档。它们描述了API端点的作用，并提供了有关参数的信息。第一条注释介绍了API端点的目的。它指出API将根据随机正态分布的数据生成一个图表。行`#*
    @param .mean The mean of the standard normal deviation`描述了一个名为`.mean`的参数，代表标准正态分布的均值。plumber
    API中的参数类似于在请求API时可以传递的输入。
- en: 'The following `#* @get /plot` comment specifies that this API endpoint can
    be accessed using an `HTTP GET` request, and the endpoint path is `/plot`. In
    simpler terms, if you want to use this API, you’d request something like [http://your-api-url/plot](http://your-api-url/plot).
    The function is defined as follows: `function(.mean)`; here, the actual R function
    starts. It takes a parameter, `.mean`, which is the mean of the standard normal
    distribution. In order for the argument to be passed to the `rnorm()` function
    itself, we must make sure that we declare it as a numeric data type. We do this
    internally as follows: `mu <- as.numeric(.mean)`, where the parameter `.mean`
    is converted to a numeric value and stored in a variable called `mu`. After we
    convert the argument into a numeric, we can pass it off to `rnorm()` and `hist()`
    in order to create the plot.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 以下`#* @get /plot`注释指定了可以通过`HTTP GET`请求访问此API端点，端点路径是`/plot`。用简单的话说，如果你想使用这个API，你会请求类似[http://your-api-url/plot](http://your-api-url/plot)的东西。函数定义如下：`function(.mean)`；这里，实际的R函数开始。它接受一个参数，`.mean`，这是标准正态分布的均值。为了将参数传递给`rnorm()`函数本身，我们必须确保将其声明为数值数据类型。我们通过以下方式内部声明：`mu
    <- as.numeric(.mean)`，其中参数`.mean`被转换为数值并存储在一个名为`mu`的变量中。在将参数转换为数值后，我们可以将其传递给`rnorm()`和`hist()`以创建图表。
- en: 'Finally, we are at the point where we generate and plot the data. This is done
    with the following bit of code: `hist(rnorm(n = 1000, mean = mu, sd = 1))`: This
    line generates `1000` random numbers from a normal distribution with the specified
    mean (`mu`) and standard deviation (`sd = 1`). Then, it creates a histogram of
    these numbers. Essentially, it’s generating random data and plotting a histogram.'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们到了生成和绘制数据的地方。这是通过以下代码片段完成的：`hist(rnorm(n = 1000, mean = mu, sd = 1))`：这一行生成1000个来自指定均值（`mu`）和标准差（`sd
    = 1`）的正态分布的随机数。然后，它创建这些数字的直方图。本质上，它是在生成随机数据并绘制直方图。
- en: In summary, this plumber API, when deployed, creates an endpoint (`/plot`) that,
    when accessed with a mean value, generates a histogram plot based on random data
    from a normal distribution. The mean is a parameter that you provide when making
    a request to this API. It’s a simple yet powerful example of how you can use R
    and plumber to expose data processing capabilities over the web.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，当部署此plumber API时，它创建了一个端点（`/plot`），当使用平均值访问时，会根据正态分布的随机数据生成直方图。平均值是您在向此API发出请求时提供的参数。这是一个简单而强大的例子，展示了您如何使用R和plumber在网络上公开数据处理能力。
- en: 'Now that we have generated the code that will produce the API, let’s look at
    the output once the code is run. To do so, let’s see the following script:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经生成了将生成API的代码，让我们看一下代码运行后的输出。为此，让我们查看以下脚本：
- en: '[PRE15]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Let’s give a line-by-line explanation:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐行解释：
- en: '[PRE16]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This line loads the `plumber` package, which is required to create plumber
    APIs:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码加载了`plumber`包，这是创建plumber API所必需的：
- en: '[PRE17]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'These lines set the directory and file path of the `plumber` API file. The
    `getwd()` function returns the working directory, which is the current directory
    that R is using. The `paste0(`) function is used to concatenate strings, so the
    `sub_dir` variable contains the string `/Chapter11/`, and the `full_dir` variable
    contains the path to the `/Chapter12/` directory. The `f` variable contains the
    filename of the plumber API file, which is `plumber_api.R`. The `f_path` variable
    contains the full path to the plumber API file, which is the combination of the
    `full_dir` and `f` variables:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 这些行设置了`plumber` API文件的目录和文件路径。`getwd()`函数返回工作目录，即R当前使用当前目录。`paste0(`)函数用于连接字符串，因此`sub_dir`变量包含字符串`/Chapter11/`，而`full_dir`变量包含到`/Chapter12/`目录的路径。`f`变量包含plumber
    API文件的文件名，即`plumber_api.R`。`f_path`变量包含plumber API文件的完整路径，这是`full_dir`和`f`变量的组合：
- en: '[PRE18]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This line initiates the plumber API by calling the `pr()` function with the
    `f_path` variable as the argument. The `pr()` function reads the plumber API file
    and creates a plumber API object:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行通过使用`f_path`变量作为参数调用`pr()`函数来启动plumber API。`pr()`函数读取plumber API文件并创建一个plumber
    API对象：
- en: '[PRE19]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This line simply returns the `root` variable, which is the plumber API object.
    The R code provided creates a plumber API from a file called `plumber_api.R`.
    The plumber API can then be used to expose R functions as web endpoints.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行简单地返回`root`变量，它是plumber API对象。提供的R代码从名为`plumber_api.R`的文件中创建一个plumber API。然后，可以使用plumber
    API将R函数公开为Web端点。
- en: 'Let’s use a simple analogy: Imagine that you have a restaurant and want to
    offer a delivery service. You could create a simple website that allows customers
    to order food online. The website would need to be able to communicate with your
    restaurant’s kitchen to place orders. In this analogy, the plumber API is like
    the website, and the R functions are like the restaurant’s kitchen. The plumber
    API allows you to expose R functions to the outside world so that other applications
    can communicate with them. Now let’s run the API and see what happens; we do this
    with the following code: `pr_run(root)`:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用一个简单的类比：想象一下，你有一家餐厅，并想提供外卖服务。你可以创建一个简单的网站，让客户可以在线订购食物。该网站需要能够与你的餐厅厨房通信以放置订单。在这个类比中，plumber
    API就像网站，而R函数就像餐厅的厨房。plumber API允许你将R函数公开给外界，以便其他应用程序可以与之通信。现在让我们运行API并看看会发生什么；我们用以下代码这样做：`pr_run(root)`：
- en: '![Figure 11.8 – plumber GET API](img/B19142_11_08.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![图11.8 – plumber GET API](img/B19142_11_08.jpg)'
- en: Figure 11.8 – plumber GET API
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.8 – plumber GET API
- en: We see that when we run the preceding code, we get a screen back that will allow
    us to test out the API; so, let’s do just that.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到，当我们运行前面的代码时，我们得到一个屏幕，允许我们测试API；所以，让我们这样做。
- en: 'To do that, we can click on the **GET** button, as this is a GET API call.
    When we do that, we get the following screen:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，我们可以点击 **GET** 按钮，因为这是一个 GET API 调用。当我们这样做时，我们会看到以下屏幕：
- en: '![Figure 11.9 – Enter arguments for API](img/B19142_11_09.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.9 – 输入 API 参数](img/B19142_11_09.jpg)'
- en: Figure 11.9 – Enter arguments for API
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.9 – 输入 API 参数
- en: 'We see that we can enter an argument to the parameter of `.mean`; let’s enter
    `10`. First, click the **Try it out** button, and then you can enter a value;
    then, you can hit **Execute**, as shown in the following screenshot:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们可以向 `.mean` 的参数输入一个参数；让我们输入 `10`。首先，点击 **Try it out** 按钮，然后您可以输入一个值；然后，您可以点击
    **Execute**，如以下截图所示：
- en: '![Figure 11.10 – Enter the argument and click Execute](img/B19142_11_10.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.10 – 输入参数并点击执行](img/B19142_11_10.jpg)'
- en: Figure 11.10 – Enter the argument and click Execute
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.10 – 输入参数并点击执行
- en: 'Now, let’s hit that `curl` request:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们点击那个 `curl` 请求：
- en: '[PRE20]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Next, we get the request URL:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们获取请求 URL：
- en: '[PRE21]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Last but not least, we get the histogram:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，我们得到了直方图：
- en: '![Figure 11.11 – The histogram generated by the API call](img/B19142_11_11.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.11 – 由 API 调用生成的直方图](img/B19142_11_11.jpg)'
- en: Figure 11.11 – The histogram generated by the API call
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.11 – 由 API 调用生成的直方图
- en: Now that we have learned how to build and use the API for R, we will learn how
    to do the same for Python in the next section.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经学习了如何构建和使用 R 的 API，我们将在下一节学习如何为 Python 做同样的事情。
- en: Open-source solutions for exposing Python as an API endpoint
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 Python 作为 API 端点公开的开源解决方案
- en: '`FastAPI` is a modern, fast (high-performance) web framework for building APIs
    with Python 3.7+ based on standard Python-type hints. It’s easy to use and allows
    you to create robust APIs quickly.'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '`FastAPI` 是一个基于 Python 3.7+ 标准Python类型提示的现代、快速（高性能）Web 框架，用于构建 API。它易于使用，并允许您快速创建健壮的
    API。'
- en: 'You can install FastAPI using `pip`:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 `pip` 安装 FastAPI：
- en: '[PRE22]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The following is a simplified example of creating a `FastAPI` endpoint to expose
    a Python function:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个创建 `FastAPI` 端点以公开 Python 函数的简化示例：
- en: '[PRE23]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In this example, the `add_numbers` function available at the `/api/add` endpoint
    takes two query parameters (`num1` and `num2`), representing the numbers to be
    added. The `Query` function from FastAPI is used to define these parameters with
    optional descriptions. The result is then calculated, and a JSON response containing
    the result is returned.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，位于 `/api/add` 端点的 `add_numbers` 函数接受两个查询参数（`num1` 和 `num2`），代表要相加的数字。使用
    FastAPI 的 `Query` 函数定义这些参数，并带有可选的描述。然后计算结果，并返回包含结果的 JSON 响应。
- en: With this example, you can now send a `GET` request to /`api/add?num1=3&num2=4`
    to get the result. The `num1` and `num2` parameters are specified in the query
    string of the URL.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个示例，您现在可以向 `/api/add?num1=3&num2=4` 发送 `GET` 请求以获取结果。`num1` 和 `num2` 参数在
    URL 的查询字符串中指定。
- en: '`FastAPI` automatically generates OpenAPI and JSON Schema documentation, making
    it convenient for users to understand and interact with your API.'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '`FastAPI` 自动生成 OpenAPI 和 JSON Schema 文档，使用户能够方便地理解和交互您的 API。'
- en: 'To run the development server, run the following from the command line:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行开发服务器，请在命令行中运行以下命令：
- en: '[PRE24]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Replace `your_app_name` with the name of your Python file, keeping in mind that
    the python file name should be different than `fastapi` or similar to the previously
    installed module.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `your_app_name` 替换为您的 Python 文件名，同时请注意，Python 文件名应不同于 `fastapi` 或与之前安装的模块类似。
- en: Important note
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Ensure that your API is secured, especially if it’s accessible over the internet.
    `FastAPI` provides features for handling authentication and authorization.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您的 API 安全，特别是如果它可以通过互联网访问。`FastAPI` 提供了处理身份验证和授权的功能。
- en: We have covered creating an API for both R and Python. It is time to call the
    API we have created from Excel!
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经介绍了如何为 R 和 Python 创建 API。现在是时候从 Excel 中调用我们创建的 API 了！
- en: Calling APIs from Excel VBA
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 Excel VBA 调用 API
- en: 'Now, we are going to go over the code that will allow us to use a `curl` request
    to obtain the image from the API that was generated from the `plumber_api.R` file.
    In order to do this, you will have to run the code from the previous section:
    `root |> pr_run()`; this is the portion that will open up the swagger dialogue
    and give you the URL that is running from `plumber`. For me, at the time of this
    writing, it is as follows: `http://127.0.0.1:6855`.'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将回顾代码，该代码将允许我们使用`curl`请求从由`plumber_api.R`文件生成的API中获取图片。为了做到这一点，您必须运行上一节中的代码：`root
    |> pr_run()`；这是将打开swagger对话框并给出`plumber`中运行的URL的部分。对我来说，在撰写本文时，它如下所示：`http://127.0.0.1:6855`。
- en: 'In this section, we are going to specifically execute the `GET` request via
    a `curl` command in VBA. Here is the code that will run, and the explanation will
    follow:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将特别执行VBA中的`curl`命令来发送`GET`请求。以下是将要运行的代码，解释将随后进行：
- en: '[PRE25]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Let’s break down the code step by step in simple terms:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们一步步简单地分解代码：
- en: 'Define the `curl` command:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 定义`curl`命令：
- en: '[PRE26]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This part creates a variable (`curlCommand`) to store a command-line instruction.
    The command is essentially telling the computer to use `curl` (a command-line
    tool for making HTTP requests) to get an image from the specified web address
    (`http://127.0.0.1:6855/plot?.mean=0`). All of this goes on a single line in the
    VBA editor. The `-H` flag specifies an HTTP header, in this case, telling the
    server that we accept an image in PNG format. The `-o` flag specifies the output
    file, and it’s set to save the image in the temporary folder with the name `temp_image.png`.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 这部分创建了一个变量（`curlCommand`），用于存储命令行指令。该命令实际上是在告诉计算机使用`curl`（一个用于发送HTTP请求的命令行工具）从指定的网址（`http://127.0.0.1:6855/plot?.mean=0`）获取图片。所有这些都在VBA编辑器中单行完成。`-H`标志指定了一个HTTP头，在这种情况下，告诉服务器我们接受PNG格式的图片。`-o`标志指定了输出文件，它被设置为将图片保存到临时文件夹中，文件名为`temp_image.png`。
- en: 'Run the `curl` command using `Shell`:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`Shell`运行`curl`命令：
- en: '[PRE27]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'This line executes the `curlCommand` using the Windows Command Prompt (`cmd
    /c`). The `vbHide` at the end means that the command prompt window will not be
    visible while executing:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码使用Windows命令提示符（`cmd /c`）执行`curlCommand`。最后的`vbHide`意味着在执行过程中命令提示符窗口将不可见：
- en: '[PRE28]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This part creates a variable (`ws`) to represent a worksheet in Excel. It either
    creates a new worksheet named `"Sheet1"` or refers to an existing one in the active
    workbook.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 这部分创建了一个变量（`ws`），用于表示Excel中的一个工作表。它要么创建一个名为`"Sheet1"`的新工作表，要么引用活动工作簿中现有的一个。
- en: 'Clear the previous content in `Sheet1`:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 清除`Sheet1`中的先前内容：
- en: '[PRE29]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This line removes any existing content in the specified worksheet (`"Sheet1"`).
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码将指定工作表（`"Sheet1"`）中现有的任何内容清除。
- en: 'Insert the image into the worksheet:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 将图片插入工作表：
- en: '[PRE30]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: This line inserts the image downloaded by the `curl` command into the specified
    worksheet (`"Sheet1"`). `Environ("TEMP")` refers to the system’s temporary folder.
    `"\temp_image.png"` is the name of the image file downloaded by the `curl` command.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码将`curl`命令下载的图片插入指定的工作表（`"Sheet1"`）。`Environ("TEMP")`指的是系统的临时文件夹。`"\temp_image.png"`是`curl`命令下载的图片文件名。
- en: In summary, this VBA code automates the process of using the `curl` command
    to download an image from a web address and then inserts that image into an Excel
    worksheet named `Sheet1`. The worksheet is cleared first to ensure no previous
    content remains.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，这段VBA代码通过使用`curl`命令从网址下载图片，然后将该图片插入名为`Sheet1`的Excel工作表中。首先清除工作表，以确保没有之前的内容残留。
- en: 'Now, let’s see the output from the VBA script:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看VBA脚本的输出：
- en: '![Figure 11.12 – Histogram generated by R from VBA](img/B19142_11_12.jpg)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![图11.12 – 由R从VBA生成的直方图](img/B19142_11_12.jpg)'
- en: Figure 11.12 – Histogram generated by R from VBA
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.12 – 由R从VBA生成的直方图
- en: In this section, you have learned how to create an API via the plumber package
    in R. You have also learned how to call this API via a curl request inside of
    an Excel VBA macro.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您学习了如何通过R中的plumber包创建API。您还学习了如何在Excel VBA宏内部通过curl请求调用此API。
- en: The beauty of an API-based solution is that Excel (and, in turn, your end-user)
    does not have to know that the code behind the API is written in R. The same macro
    could call an API written in Python without any changes!
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 基于API的解决方案之美在于，Excel（以及随之而来的终端用户）无需知道API背后的代码是用R编写的。同一个宏可以调用用Python编写的API，而无需任何更改！
- en: So, what are the pros and cons of this approach?
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，这种方法的优缺点是什么？
- en: 'The pros have been spelled out previously: no local installation, no need to
    maintain the R/Python environment for every user, and full control over the code
    running behind the API. Should you need to update anything, from the R/Python
    version via the package dependencies to the code itself, you can do this on the
    server side without involving your end user.'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 优点已在之前阐明：无需本地安装，无需为每个用户维护R/Python环境，并且对API背后运行的代码拥有完全控制权。如果您需要更新任何内容，从R/Python版本到包依赖，再到代码本身，您都可以在服务器端进行，而无需涉及最终用户。
- en: 'One con is general to all API-based solutions: it requires a server to be set
    up and maintained, which usually is both too difficult and not allowed for data
    analysts and data scientists. This means dedicated IT resources are needed.'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 一个普遍存在的问题是所有基于API的解决方案：它需要设置和维护一个服务器，这对于数据分析师和数据科学家来说通常既困难又不被允许。这意味着需要专门的IT资源。
- en: 'A con specific to open source solutions for API hosting is one general to all
    open source solutions: what you save on license fees you pay in having to do more
    yourself. Open-source API solutions expect you to handle security (see the note
    at the end of the FastAPI section), the integration with the enterprise landscape
    (such as user management), and, generally, do everything yourself.'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 对于API托管的开源解决方案，有一个普遍存在的问题：你在许可证费用上节省的，你需要在更多自己动手上付出代价。开源API解决方案期望你处理安全性（参见FastAPI部分末尾的注释）、与企业环境的集成（如用户管理），以及通常需要你自己完成所有事情。
- en: Finally, a con of both `plumber` and `FastAPI` is the need to write custom code
    to define your API endpoints and functionality. In a single-person team, this
    is not a big issue other than the hours needed, but in larger teams, this often
    leads to a fractured landscape where it is difficult to enforce naming conventions
    and standardization.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`plumber`和`FastAPI`的一个共同缺点是需要编写自定义代码来定义您的API端点和功能。在单人团队中，这除了需要的时间之外，并不是一个大问题，但在大型团队中，这往往导致一个碎片化的环境，在那里很难强制执行命名约定和标准化。
- en: In the next section of this chapter, we will have a look at some of the most
    commonly used commercial solutions for hosting R and Python API endpoints and
    see how they address these questions.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的下一节中，我们将探讨一些最常用的商业解决方案，用于托管R和Python API端点，并了解它们如何解决这些问题。
- en: Commercial API solutions for R and Python
  id: totrans-231
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: R和Python的商业API解决方案
- en: In this section, we will cover some of the most commonly used commercial API
    solutions for R and Python.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍一些最常用的商业API解决方案，用于R和Python。
- en: Azure Functions (and similar solutions from the other large cloud providers)
  id: totrans-233
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Azure Functions（以及其他大型云服务提供商的类似解决方案）
- en: '**Azure Functions** is a serverless computing service offered by Microsoft
    Azure. It allows you to run event-triggered code without explicitly provisioning
    or managing infrastructure. You can build APIs, respond to events, and perform
    various tasks using a wide range of supported languages, including Python and
    JavaScript:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '**Azure Functions** 是由Microsoft Azure提供的一种无服务器计算服务。它允许您在不显式配置或管理基础设施的情况下运行由事件触发的代码。您可以使用包括Python和JavaScript在内的广泛支持的语言构建API、响应事件和执行各种任务：'
- en: '**Use cases**: Ideal for building lightweight, event-driven APIs or microservices.
    Integration with other Azure services provides scalability and flexibility.'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用例**：非常适合构建轻量级、事件驱动的API或微服务。与其他Azure服务的集成提供了可扩展性和灵活性。'
- en: '**Pro**: A “serverless” infrastructure means minimal need for IT involvement.'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**优点**：无服务器基础设施意味着对IT参与的最小需求。'
- en: '**Con**: Limited flexibility (e.g., choice of R/Python version) and difficulty
    in migrating to other cloud providers.'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缺点**：灵活性有限（例如，R/Python版本的选项）和迁移到其他云提供商的难度。'
- en: Posit Connect
  id: totrans-238
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Posit Connect
- en: '**Posit Connect** is a commercial solution designed to connect R and Python
    to Excel. It facilitates the integration of analytics and data science directly
    into Excel workbooks, allowing users to leverage the power of R and Python within
    the familiar Excel interface.'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '**Posit Connect** 是一个商业解决方案，旨在将R和Python连接到Excel。它促进了分析学和数据科学直接集成到Excel工作簿中，使用户能够在熟悉的Excel界面中利用R和Python的力量。'
- en: '**Use cases**: Particularly suitable for organizations where Excel is a primary
    tool for data analysis, providing a seamless way to enhance Excel’s capabilities
    with advanced analytics.'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用例**：特别适合将Excel作为数据分析主要工具的组织，提供了一种无缝的方式，通过高级分析增强Excel的功能。'
- en: '**Pro**: A deeply integrated ecosystem for Posit solutions, including RStudio,
    Quarto, and Shiny Pro.'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**优点**：为Posit解决方案提供深度集成的生态系统，包括RStudio、Quarto和Shiny Pro。'
- en: '**Con**: It utilizes plumber and FastAPI/Flask, so you will need to write custom
    code to define your API, leading to the drawbacks discussed under the open source
    API solutions. Only Linux servers are supported, both on-premise and in-cloud.'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缺点**：它使用 plumber 和 FastAPI/Flask，因此您需要编写自定义代码来定义您的 API，从而导致在开源 API 解决方案下讨论的缺点。仅支持
    Linux 服务器，无论是在本地还是在云端。'
- en: ownR Infinity platform
  id: totrans-243
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ownR Infinity 平台
- en: '**ownR Infinity** is a versatile platform designed to empower R and Python
    functionalities within a user-friendly environment. Enabling the creation of personalized
    functions and models transforms them into accessible APIs, with a particular focus
    on seamless integration within Excel.'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '**ownR Infinity** 是一个多功能的平台，旨在在用户友好的环境中赋予 R 和 Python 功能。通过启用创建个性化函数和模型，它们可以转化为可访问的
    API，特别关注在 Excel 中的无缝集成。'
- en: '**Use cases**: Suited for organizations heavily reliant on R and Python for
    advanced data analytics. Perfect for users seeking to augment Excel’s capabilities
    with statistical and data analysis features.'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用例**：适用于高度依赖 R 和 Python 进行高级数据分析的组织。非常适合寻求通过统计和数据分析功能增强 Excel 功能的用户。'
- en: '**Pros**: Provides a user-friendly interface for leveraging the capabilities
    of R and Python without extensive programming knowledge. Enables seamless integration
    of R and Python functionalities across various environments.'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**优点**：提供了用户友好的界面，无需广泛的编程知识即可利用 R 和 Python 的功能。使 R 和 Python 的功能在各种环境中无缝集成。'
- en: '**Con**: Only Linux servers are supported, both on-premises and in-cloud.'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缺点**：仅支持 Linux 服务器，无论是在本地还是在云端。'
- en: 'For an example of how to use an ownR API from Excel, you can download an example
    workbook from here: [https://bitbucket.org/functionalanalytics/examples/src/master/ccy%20converter%20Excel%20demo%20button.xlsm](https://bitbucket.org/functionalanalytics/examples/src/master/ccy%20converter%20Excel%20demo%20button.xlsm).'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是如何在 Excel 中使用 ownR API 的示例，您可以在此处下载示例工作簿：[https://bitbucket.org/functionalanalytics/examples/src/master/ccy%20converter%20Excel%20demo%20button.xlsm](https://bitbucket.org/functionalanalytics/examples/src/master/ccy%20converter%20Excel%20demo%20button.xlsm)。
- en: 'The example uses a hosted API for the following code base: [https://bitbucket.org/functionalanalytics/converter/src/master/](https://bitbucket.org/functionalanalytics/converter/src/master/)'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码示例使用托管 API：[https://bitbucket.org/functionalanalytics/converter/src/master/](https://bitbucket.org/functionalanalytics/converter/src/master/)
- en: Note that there is no need to write custom code beyond the pure Python code
    (or R code) and no need to add security, deployment, and other considerations
    manually, as these are automatically added by ownR.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，除了纯 Python 代码（或 R 代码）之外，无需编写任何自定义代码，也无需手动添加安全性、部署和其他考虑因素，因为这些由 ownR 自动添加。
- en: These commercial solutions provide high levels of integration and features for
    connecting Python and R with Excel and other frontends, catering to diverse use
    cases and preferences within the analytics and data science community.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 这些商业解决方案提供了高水平的集成和功能，用于连接 Python 和 R 与 Excel 和其他前端，满足分析和数据科学社区内多样化的用例和偏好。
- en: The pros of commercial solutions compared to open source ones boil down to the
    level of support and handholding with things such as out-of-the-box security,
    deeper and easier integration with the wider enterprise landscape, and a dedicated
    support organization in case of problems.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 与开源解决方案相比，商业解决方案的优点在于支持水平和在诸如开箱即用的安全性、与更广泛的企业的深度和易于集成以及出现问题时专门的客户支持等方面的指导。
- en: 'The con is an obvious one: these solutions have license fees that require a
    dedicated budget. While all these companies aim at pricing in a way that the reduction
    of manual work and increased added value justify the price tag, a discussion with
    the budget holders is never easy.'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 缺点很明显：这些解决方案有许可费用，需要专门的预算。虽然所有这些公司都旨在以降低人工工作量并增加附加值来证明价格合理，但与预算持有者的讨论从来都不容易。
- en: Summary
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, you have learned ways to call R and Python from Excel instead
    of the other way around to empower your end users even further. We have covered
    the reasons for doing so and two very different approaches: calling R and Python
    locally and via an API endpoint.'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您已经学习了如何从 Excel 而不是反过来调用 R 和 Python，以进一步增强最终用户的能力。我们涵盖了这样做的原因以及两种非常不同的方法：在本地调用
    R 和 Python 以及通过 API 端点调用。
- en: For locally calling R and Python, we covered `BERT` and `xlwings` in detail,
    from setting up and testing the environment via creating R and Python solutions
    up to and including how to call those solutions from Excel using the various methods
    provided by `BERT` and `xlwings`, such as VBA code and UDFs.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本地调用R和Python，我们详细介绍了`BERT`和`xlwings`，从设置和测试环境，到创建R和Python解决方案，以及如何使用`BERT`和`xlwings`提供的各种方法从Excel中调用这些解决方案，例如VBA代码和UDFs。
- en: 'Next, you learned about API endpoints and the benefits of using an API endpoint
    to connect Python and R to Excel. We discussed the pros and cons of such a setup
    and then delved into the two flavors of API hosting: open source tools and commercial
    solutions. We have covered the two most used open source setups: plumber for R
    and FastAPI for Python. Finally, we had a look at commercial solutions for hosting
    R and Python API endpoints.'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你学习了API端点以及使用API端点将Python和R连接到Excel的好处。我们讨论了这种设置的优缺点，然后深入探讨了两种API托管方式：开源工具和商业解决方案。我们介绍了两种最常用的开源设置：用于R的plumber和用于Python的FastAPI。最后，我们查看了一些商业解决方案，用于托管R和Python
    API端点。
- en: 'The next (and last) chapter will cover a more domain-oriented topic: data analysis
    and visualization with Python and R in Excel.'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章（也是最后一章）将涵盖一个更具领域针对性的主题：在Excel中使用Python和R进行数据分析和可视化。
- en: 'Part 5: Data Analysis and Visualization with R and Python for Excel Data –
    A Case Study'
  id: totrans-259
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5部分：使用R和Python对Excel数据进行数据分析与可视化 – 一个案例研究
- en: Delve into the world of data analysis and visualization within Excel using the
    power of Python and R. Through a captivating case study, you will discover how
    to leverage these versatile programming languages to uncover insights, visualize
    data, and drive informed decision-making directly within Excel.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 利用Python和R的力量深入Excel中的数据分析与可视化世界。通过一个引人入胜的案例研究，你将发现如何利用这些多才多艺的编程语言来揭示洞察力，可视化数据，并在Excel中直接进行明智的决策。
- en: 'This part has the following chapter:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分包含以下章节：
- en: '[*Chapter 12*](B19142_12.xhtml#_idTextAnchor238), *Data Analysis and Visualization
    with R and Python in Excel – A Case Study*'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第12章*](B19142_12.xhtml#_idTextAnchor238)，*在Excel中使用R和Python进行数据分析和可视化 – 一个案例研究*'
