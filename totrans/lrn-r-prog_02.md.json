["```py\n1.5\n## [1] 1.5\n```", "```py\nx <- 1.5\n```", "```py\nx\n## [1] 1.5\n```", "```py\nnumeric (10)\n## [1] 0 0 0 0 0 0 0 0 0 0\n```", "```py\nc(1, 2, 3, 4, 5)\n## [1] 1 2 3 4 5\n```", "```py\nc(1, 2, c(3, 4, 5))\n## [1] 1 2 3 4 5\n```", "```py\n1:5\n## [1] 1 2 3 4 5\n```", "```py\nseq(1, 10, 2)\n## [1] 1 3 5 7 9\n```", "```py\nseq(3, length.out = 10)\n## [1] 3 4 5 6 7 8 9 10 11 12\n```", "```py\n1 + 1:5\n## [1] 2 3 4 5 6\n```", "```py\nTRUE\n## [1] TRUE\n```", "```py\n1 > 2\n## [1] FALSE\n```", "```py\nc(1, 2) > 2\n## [1] FALSE FALSE\n```", "```py\nc(1, 2) > c(2, 1)\n## [1] FALSE TRUE\n```", "```py\nc(2, 3) > c(1, 2, -1, 3)\n## [1] TRUE TRUE TRUE FALSE\n```", "```py\n1 %in% c(1, 2, 3)\n## [1] TRUE\nc(1, 4) %in% c(1, 2, 3)\n## [1] TRUE FALSE\n```", "```py\n\"hello, world!\"\n## [1] \"hello, world!\"\n'hello, world!'\n## [1] \"hello, world!\"\n```", "```py\nc(\"Hello\", \"World\")\n## [1] \"Hello\" \"World\"\n```", "```py\nc(\"Hello\", \"World\") == c('Hello', 'World')\n## [1] TRUE TRUE\n```", "```py\nc(\"Hello\", \"World\") == \"Hello, World\"\n## [1] FALSE FALSE\n```", "```py\ncat(\"Is \"You\" a Chinese name?\")\n## Is \"You\" a Chinese name?\n```", "```py\ncat('Is \"You\" a Chinese name?')\n## Is \"You\" a Chinese name?\n```", "```py\nv1 <- c(1, 2, 3, 4)\n```", "```py\nv1[2]\n## [1] 2\n```", "```py\nv1[2:4]\n## [1] 2 3 4\n```", "```py\nv1[-3]\n## [1] 1 2 4\n```", "```py\na <- c(1, 3)v1[a]\n## [1] 1 3\n```", "```py\nv1[c(1, 2, -3)]\n## Error in v1[c(1, 2, -3)]: only 0's may be mixed with negative subscripts\n```", "```py\nv1[3:6]\n## [1] 3 4 NA NA\n```", "```py\nv1[c(TRUE, FALSE, TRUE, FALSE)]\n## [1] 1 3\n```", "```py\nv1[2] <- 0\n```", "```py\nv1\n## [1] 1 0 3 4\n```", "```py\nv1[2:4] <- c(0, 1, 3)\n```", "```py\nv1\n## [1] 1 0 1 3\n```", "```py\nv1[c(TRUE, FALSE, TRUE, FALSE)] <- c(3, 2)\n```", "```py\nv1\n## [1] 3 0 2 3\n```", "```py\nv1[v1 <= 2]\n## [1] 0 2\n```", "```py\nv1[v1 ^ 2 - v1 + 1 >= 0]\n## [1] 3 0 2 3\n```", "```py\nv1[v1 <= 2] <- 0\n```", "```py\nv1\n## [1] 3 0 0 3\n```", "```py\nv1[10] <- 8\nv1\n## [1] 3 0 0 3 NA NA NA NA NA 8\n```", "```py\nx <- c(a = 1, b = 2, c = 3)\nx\n## a b c\n## 1 2 3\n```", "```py\nx[\"a\"]\n## a\n## 1\n```", "```py\nx[c(\"a\", \"c\")]\n## a c\n## 1 3\n```", "```py\nx[c(\"a\", \"a\", \"c\")]\n## a a c\n## 1 1 3\n```", "```py\nnames(x)\n## [1] \"a\" \"b\" \"c\"\n```", "```py\nnames(x) <- c(\"x\", \"y\", \"z\")\nx[\"z\"]\n## z\n## 3\n```", "```py\nnames(x) <- NULL\nx\n## [1] 1 2 3\n```", "```py\nx <- c(a = 1, b = 2, c = 3)\nx[\"d\"]\n## <NA>\n## NA\n```", "```py\nnames(x[\"d\"])\n## [1] NA\n```", "```py\nx[c(\"a\", \"d\")]\n## a <NA>\n## 1 NA\n```", "```py\nx <- c(a =  1, b = 2, c = 3)\nx[\"a\"]\n## a\n## 1\nx[[\"a\"]]\n## [1] 1\n```", "```py\nx[[c(1, 2)]]\n## Error in x[[c(1, 2)]]: attempt to select more than one element\n```", "```py\nx[[-1]]\n## Error in x[[-1]]: attempt to select more than one element\n```", "```py\nx[[\"d\"]]\n## Error in x[[\"d\"]]: subscript out of bounds\n```", "```py\nclass(c(1, 2, 3))\n## [1] \"numeric\"\nclass(c(TRUE, TRUE, FALSE))\n## [1] \"logical\"\nclass(c(\"Hello\", \"World\"))\n## [1] \"character\"\n```", "```py\nis.numeric(c(1, 2, 3))\n## [1] TRUE\nis.numeric(c(TRUE, TRUE, FALSE))\n## [1] FALSE\nis.numeric(c(\"Hello\", \"World\"))\n## [1] FALSE\n```", "```py\nstrings <- c(\"1\", \"2\", \"3\")\nclass(strings)\n## [1] \"character\"\n```", "```py\nstrings + 10\n## Error in strings + 10: non-numeric argument to binary operator\n```", "```py\nnumbers <- as.numeric(strings)\nnumbers\n## [1] 1 2 3\nclass(numbers)\n## [1] \"numeric\"\n```", "```py\nnumbers + 10\n## [1] 11 12 13\n```", "```py\nas.numeric(c(\"1\", \"2\", \"3\", \"a\"))\n## Warning: NAs introduced by coercion\n## [1] 1 2 3 NA\nas.logical(c(-1, 0, 1, 2))\n## [1] TRUE FALSE TRUE TRUE\nas.character(c(1, 2, 3))\n## [1] \"1\" \"2\" \"3\"\nas.character(c(TRUE, FALSE))\n## [1] \"TRUE\" \"FALSE\"\n```", "```py\nc(2, 3) + as.character(c(1, 2))\n## Error in c(2, 3) + as.character(c(1, 2)): non-numeric argument to binary operator\n```", "```py\nc(1, 2, 3, 4) + 2\n## [1] 3 4 5 6\nc(1, 2, 3) - c(2, 3, 4)\n## [1] -1 -1 -1\nc(1, 2, 3) * c(2, 3, 4)\n## [1] 2 6 12\nc(1, 2, 3) / c(2, 3, 4)\n## [1] 0.5000000 0.6666667 0.7500000\nc(1, 2, 3) ^ 2\n## [1] 1 4 9\nc(1, 2, 3) ^ c(2, 3, 4)\n## [1] 1 8 81\nc(1, 2, 3, 14) %% 2\n## [1] 1 0 1 0\n```", "```py\nc(a = 1, b = 2, c = 3) + c(b = 2, c = 3, d = 4)\n## a b c\n## 3 5 7\nc(a = 1, b = 2, 3) + c(b = 2, c = 3, d = 4)\n## a b\n## 3 5 7\n```", "```py\nmatrix(c(1, 2, 3, 2, 3, 4, 3, 4, 5), ncol = 3)\n##      [,1] [,2] [,3]\n## [1,]   1    2    3\n## [2,]   2    3    4\n## [3,]   3    4    5\n```", "```py\nmatrix(c(1, 2, 3,  4, 5, 6,  7, 8, 9), nrow = 3, byrow = FALSE)\n##     [,1] [,2] [,3]\n## [1,]  1    4    7\n## [2,]  2    5    8\n## [3,]  3    6    9\nmatrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), nrow = 3, byrow = TRUE)\n##      [,1] [,2] [,3]\n## [1,]   1    2    3\n## [2,]   4    5    6\n## [3,]   7    8    9\n```", "```py\ndiag(1, nrow = 5)\n##      [,1] [,2] [,3] [,4] [,5]\n## [1,]   1    0    0    0    0\n## [2,]   0    1    0    0    0\n## [3,]   0    0    1    0    0\n## [4,]   0    0    0    1    0\n## [5,]   0    0    0    0    1\n```", "```py\nmatrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), nrow = 3, byrow = TRUE, dimnames = list(c(\"r1\", \"r2\", \"r3\"), c(\"c1\", \"c2\", \"c3\")))\n##    c1 c2 c3\n## r1  1  2  3\n## r2  4  5  6\n## r3  7  8  9\n```", "```py\nm1 <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), ncol = 3)\nrownames(m1) <- c(\"r1\", \"r2\", \"r3\")\ncolnames(m1) <- c(\"c1\", \"c2\", \"c3\")\n```", "```py\nm1\n##    c1 c2 c3\n## r1  1  4  7\n## r2  2  5  8\n## r3  3  6  9\n```", "```py\nm1[1, 2]\n## [1] 4\n```", "```py\nm1[1:2, 2:3]\n##    c2 c3\n## r1  4  7\n## r2  5  8\n```", "```py\nm1[1,]\n## c1 c2 c3 \n## 1  4  7\nm1[,2]\n## r1 r2 r3 \n## 4  5  6\nm1[1:2,]\n##    c1 c2 c3\n## r1  1  4  7\n## r2  2  5  8\nm1[, 2:3]\n##    c2 c3\n## r1  4  7\n## r2  5  8\n## r3  6  9\n```", "```py\nm1[-1,]\n##    c1 c2 c3\n## r2 2  5  8\n## r3 3  6  9\nm1[,-2]\n##    c1 c3\n## r1  1  7\n## r2  2  8\n## r3  3  9\n```", "```py\nm1[c(\"r1\", \"r3\"), c(\"c1\", \"c3\")]\n##    c1 c3\n## r1  1  7\n## r3  3  9\n```", "```py\nm1[1]\n## [1] 1\nm1[9]\n## [1] 9\nm1[3:7]\n## [1] 3 4 5 6 7\n```", "```py\nm1 > 3\n##       c1   c2   c3\n## r1 FALSE TRUE TRUE\n## r2 FALSE TRUE TRUE\n## r3 FALSE TRUE TRUE\n```", "```py\nm1[m1 > 3]\n## [1] 4 5 6 7 8 9\n```", "```py\nm1 + m1\n##    c1 c2 c3\n## r1  2  8 14\n## r2  4 10 16\n## r3  6 12 18\nm1 - 2 * m1\n##    c1 c2 c3\n## r1 -1 -4 -7\n## r2 -2 -5 -8\n## r3 -3 -6 -9\nm1 * m1\n##   c1 c2 c3\n## r1 1 16 49\n## r2 4 25 64\n## r3 9 36 81\nm1 / m1\n##    c1 c2 c3\n## r1 1  1  1\n## r2 1  1  1\n## r3 1  1  1\nm1 ^ 2\n##    c1 c2 c3\n## r1  1 16 49\n## r2  4 25 64\n## r3  9 36 81\nm1 %*% m1\n##     c1 c2 c3\n## r1  30 66 102\n## r2  36 81 126\n## r3  42 96 150\n```", "```py\nt(m1)\n##    r1 r2 r3\n## c1 1  2  3\n## c2 4  5  6\n## c3 7  8  9\n```", "```py\na1 <- array(c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), dim = c(1, 5, 2))\na1\n## , , 1\n## \n##     [,1] [,2] [,3] [,4] [,5]\n## [1,]  0    1    2    3    4\n## \n## , , 2\n## \n##     [,1] [,2] [,3] [,4] [,5]\n## [1,]  5    6    7    8    9\n```", "```py\na1 <- array(c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), dim = c(1, 5, 2), dimnames = list(c(\"r1\"), c(\"c1\", \"c2\", \"c3\", \"c4\", \"c5\"), c(\"k1\", \"k2\")))\na1\n## , , k1\n## \n##    c1 c2 c3 c4 c5\n## r1  0  1  2  3  4\n## \n## , , k2\n## \n##    c1 c2 c3 c4 c5\n## r1  5  6  7  8  9\n```", "```py\na0 <- array(c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10), dim = c(1, 5, 2))\ndimnames(a0) <- list(c(\"r1\"), c(\"c1\", \"c2\", \"c3\", \"c4\", \"c5\"), c(\"k1\", \"k2\"))\na0\n## , , k1\n## \n##   c1 c2 c3 c4 c5\n## r1 0  1  2  3  4\n## \n## , , k2\n## \n##   c1 c2 c3 c4 c5\n## r1 5  6  7  8  9\n```", "```py\na1[1,,]\n##    k1 k2\n## c1  0 5\n## c2  1 6\n## c3  2 7\n## c4  3 8\n## c5  4 9\na1[, 2,]\n## k1 k2 \n## 1 6\na1[,,1]\n## c1 c2 c3 c4 c5 \n## 0  1  2  3  4\na1[1, 1, 1]\n## [1] 0\na1[1, 2:4, 1:2]\n##    k1 k2\n## c2 1  6\n## c3 2  7\n## c4 3  8\na1[c(\"r1\"), c(\"c1\", \"c3\"), \"k1\"]\n## c1 c3 \n## 0  2\n```", "```py\nl0 <- list(1, c(TRUE, FALSE), c(\"a\", \"b\", \"c\"))\nl0\n## [[1]]\n## [1] 1\n## \n## [[2]]\n## [1] TRUE FALSE\n## \n## [[3]]\n## [1] \"a\" \"b\" \"c\"\n```", "```py\nl1 <- list(x = 1, y = c(TRUE, FALSE), z = c(\"a\", \"b\", \"c\"))\nl1\n## $x\n## [1] 1\n## \n## $y\n## [1] TRUE FALSE\n## \n## $z\n## [1] \"a\" \"b\" \"c\"\n```", "```py\nl1 <- list(x = 1, y = c(TRUE, FALSE), z = c(\"a\", \"b\", \"c\"), m = NULL)\nl1$x\n## [1] 1\nl1$y\n## [1] TRUE FALSE\nl1$z\n## [1] \"a\" \"b\" \"c\"\nl1$m\n## NULL\n```", "```py\nl1[[2]]\n## [1] TRUE FALSE\n```", "```py\nl1[[\"y\"]]\n## [1] TRUE FALSE\n```", "```py\nmember <- \"z\" # you can dynamically determine which member to extract\nl1[[member]]\n## [1] \"a\" \"b\" \"c\"\n```", "```py\nl1[\"x\"]\n## $x\n## [1] 1\nl1[c(\"x\", \"y\")]\n## $x\n## [1] 1\n## \n## $y\n## [1] TRUE FALSE\nl1[1]\n## $x\n## [1] 1\nl1[c(1, 2)]\n## $x\n## [1] 1\n## \n## $y\n## [1] TRUE FALSE\nl1[c(TRUE, FALSE, TRUE)]\n## $x\n## [1] 1\n## \n## $z\n## [1] \"a\" \"b\" \"c\"\n```", "```py\nnames(l1) <- c(\"A\",\"B\",\"C\")\nl1\n## $A\n## [1] 1\n## \n## $B\n## [1] TRUE FALSE\n## \n## $C\n## [1] \"a\" \"b\" \"c\"\n```", "```py\nnames(l1) <- NULL\nl1\n## [[1]]\n## [1] 1\n## \n## [[2]]\n## [1] TRUE FALSE\n## \n## [[3]]\n## [1] \"a\" \"b\" \"c\"\n```", "```py\nl1 <- list(x = 1, y = c(TRUE, FALSE), z = c(\"a\", \"b\", \"c\"))\nl1$x <- 0\n```", "```py\nl1$m <- 4\nl1\n## $x\n## [1] 0\n## \n## $y\n## [1] TRUE FALSE\n## \n## $z\n## [1] \"a\" \"b\" \"c\"\n## \n## $m\n## [1] 4\n```", "```py\nl1[c(\"y\", \"z\")] <- list(y = \"new value for y\", z = c(1, 2))\nl1\n## $x\n## [1] 0\n## \n## $y\n## [1] \"new value for y\"\n## \n## $z\n## [1] 1 2\n## \n## $m\n## [1] 4\n```", "```py\nl1$x <- NULL\nl1\n## $y\n## [1] \"new value for y\"\n## \n## $z\n## [1] 1 2\n## \n## $m\n## [1] 4\n```", "```py\nl1[c(\"z\", \"m\")] <- NULL\nl1\n## $y\n## [1] \"new value for y\"\n```", "```py\nl2 <- list(a = c(1, 2, 3), b = c(\"x\", \"y\", \"z\", \"w\"))\nis.list(l2)\n## [1] TRUE\nis.list(l2$a)\n## [1] FALSE\n```", "```py\nl3 <- as.list(c(a = 1, b =2, c = 3))\nl3\n## $a\n## [1] 1\n## \n## $b\n## [1] 2\n## \n## $c\n## [1] 3\n```", "```py\nl4 <- list(a = 1, b = 2, c = 3)\nunlist(l4)\n## a b c \n## 1 2 3\n```", "```py\nl4 <- list(a = 1, b = 2, c = \"hello\")\nunlist(l4)\n## a b c \n## \"1\" \"2\" \"hello\"\n```", "```py\npersons <- data.frame(Name = c(\"Ken\", \"Ashley\", \"Jennifer\"),\n  Gender = c(\"Male\", \"Female\", \"Female\"),\n  Age = c(24, 25, 23),\n  Major = c(\"Finance\", \"Statistics\", \"Computer Science\"))\npersons\n##   Name     Gender  Age  Major\n## 1 Ken      Male    24   Finance\n## 2 Ashley   Female  25   Statistics\n## 3 Jennifer Female  23   Computer Science\n```", "```py\nl1 <- list(x = c(1, 2, 3), y = c(\"a\", \"b\", \"c\"))\ndata.frame(l1)\n##   x y\n## 1 1 a\n## 2 2 b\n## 3 3 c\nas.data.frame(l1)\n##   x y\n## 1 1 a\n## 2 2 b\n## 3 3 c\n```", "```py\nm1 <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), nrow = 3, byrow = FALSE)\ndata.frame(m1)\n##   X1 X2 X3\n## 1 1  4  7\n## 2 2  5  8\n## 3 3  6  9\nas.data.frame(m1)\n##   V1 V2 V3\n## 1  1  4  7\n## 2  2  5  8\n## 3  3  6  9\n```", "```py\ndf1 <- data.frame(id = 1:5, x = c(0, 2, 1, -1, -3), y = c(0.5, 0.2, 0.1, 0.5, 0.9))\ndf1\n##   id  x   y\n## 1  1  0  0.5\n## 2  2  2  0.2\n## 3  3  1  0.1\n## 4  4 -1  0.5\n## 5  5 -3  0.9\n```", "```py\ncolnames(df1) <- c(\"id\", \"level\", \"score\")\nrownames(df1) <- letters[1:5]\ndf1\n##    id level score\n## a   1    0    0.5\n## b   2    2    0.2\n## c   3    1    0.1\n## d   4   -1    0.5\n## e   5   -3    0.9\n```", "```py\ndf1$id\n## [1] 1 2 3 4 5\ndf1[[1]]\n## [1] 1 2 3 4 5\n```", "```py\ndf1[1]\n##  id\n## a 1\n## b 2\n## c 3\n## d 4\n## e 5\ndf1[1:2]\n##  id level\n## a 1  0\n## b 2  2\n## c 3  1\n## d 4 -1\n## e 5 -3\ndf1[\"level\"]\n##  level\n## a  0\n## b  2\n## c  1\n## d -1\n## e -3\ndf1[c(\"id\", \"score\")]\n##  id score\n## a 1  0.5\n## b 2  0.2\n## c 3  0.1\n## d 4  0.5\n## e 5  0.9\ndf1[c(TRUE, FALSE, TRUE)]\n##   id score\n## a 1  0.5\n## b 2  0.2\n## c 3  0.1\n## d 4  0.5\n## e 5  0.9\n```", "```py\ndf1[, \"level\"]\n## [1] 0 2 1 -1 -3\ndf1[, c(\"id\", \"level\")]\n##  id level\n## a 1  0\n## b 2  2\n## c 3  1\n## d 4 -1\n## e 5 -3\ndf1[, 1:2]\n##  id level\n## a 1  0\n## b 2  2\n## c 3  1\n## d 4 -1\n## e 5 -3\n```", "```py\ndf1[1:4,]\n##   id level score\n## a  1   0    0.5\n## b  2   2    0.2\n## c  3   1    0.1\n## d  4  -1    0.5\ndf1[c(\"c\", \"e\"),]\n##   id level score\n## c  3   1    0.1\n## e  5  -3    0.9\n```", "```py\ndf1[1:4, \"id\"]\n## [1] 1 2 3 4\ndf1[1:3, c(\"id\", \"score\")]\n##   id score\n## a  1  0.5\n## b  2  0.2\n## c  3  0.1\n```", "```py\ndf1[1:4,][\"id\"]\n##   id\n## a 1\n## b 2\n## c 3\n## d 4\n```", "```py\ndf1[1:4, \"id\", drop = FALSE]\n##   id\n## a 1\n## b 2\n## c 3\n## d 4\n```", "```py\ndf1$score >= 0.5\n## [1] TRUE FALSE FALSE TRUE TRUE\ndf1[df1$score >= 0.5, c(\"id\", \"level\")]\n##   id level\n## a  1   0\n## d  4  -1\n## e  5  -3\n```", "```py\nrownames(df1) %in% c(\"a\", \"d\", \"e\")\n## [1] TRUE FALSE FALSE TRUE TRUE\ndf1[rownames(df1) %in% c(\"a\", \"d\", \"e\"), c(\"id\", \"score\")]\n##   id score\n## a  1  0.5\n## d  4  0.5\n## e  5  0.9\n```", "```py\ndf1$score <- c(0.6, 0.3, 0.2, 0.4, 0.8)\ndf1\n##   id level score\n## a 1    0    0.6\n## b 2    2    0.3\n## c 3    1    0.2\n## d 4   -1    0.4\n## e 5   -3    0.8\n```", "```py\ndf1[\"score\"] <- c(0.8, 0.5, 0.2, 0.4, 0.8)\ndf1\n##   id level score\n## a 1   0     0.8\n## b 2   2     0.5\n## c 3   1     0.2\n## d 4  -1     0.4\n## e 5  -3     0.8\ndf1[[\"score\"]] <- c(0.4, 0.5, 0.2, 0.8, 0.4)\ndf1\n##   id level score\n## a 1   0     0.4\n## b 2   2     0.5\n## c 3   1     0.2\n## d 4  -1     0.8\n## e 5  -3     0.4\ndf1[c(\"level\", \"score\")] <- list(level = c(1, 2, 1, 0, 0), score = c(0.1, 0.2, 0.3, 0.4, 0.5))\ndf1\n##   id level score\n## a 1    1    0.1\n## b 2    2    0.2\n## c 3    1    0.3\n## d 4    0    0.4\n## e 5    0    0.5\n```", "```py\ndf1[1:3, \"level\"] <- c(-1, 0, 1)\ndf1\n##   id level score\n## a 1   -1   0.1\n## b 2   0    0.2\n## c 3   1    0.3\n## d 4   0    0.4\n## e 5   0    0.5\ndf1[1:2, c(\"level\", \"score\")] <- list(level = c(0, 0), score = c(0.9, 1.0))\ndf1\n##   id level score\n## a 1   0    0.9\n## b 2   0    1.0\n## c 3   1    0.3\n## d 4   0    0.4\n## e 5   0    0.5\n```", "```py\nstr(persons)\n## 'data.frame': 3 obs. of 4 variables:\n## $ Name : Factor w/ 3 levels \"Ashley\",\"Jennifer\",..: 3 1 2\n## $ Gender: Factor w/ 2 levels \"Female\",\"Male\": 2 1 1\n## $ Age : num 24 25 23\n## $ Major : Factor w/ 3 levels \"Computer Science\",..: 2 3 1\n```", "```py\npersons[1, \"Name\"] <- \"John\"\n## Warning in `[<-.factor`(`*tmp*`, iseq, value = \"John\"): invalid factor\n## level, NA generated\npersons\n##    Name    Gender Age  Major\n## 1 <NA>     Male   24   Finance\n## 2 Ashley   Female 25   Statistics\n## 3 Jennifer Female 23   Computer Science\n```", "```py\npersons <- data.frame(Name = c(\"Ken\", \"Ashley\", \"Jennifer\"),\n  Gender = factor(c(\"Male\", \"Female\", \"Female\")),\n  Age = c(24, 25, 23),\n  Major = c(\"Finance\", \"Statistics\", \"Computer Science\"),\n  stringsAsFactors = FALSE)\nstr(persons)\n## 'data.frame': 3 obs. of 4 variables:\n## $ Name : chr \"Ken\" \"Ashley\" \"Jennifer\"\n## $ Gender: Factor w/ 2 levels \"Female\",\"Male\": 2 1 1\n## $ Age : num 24 25 23\n## $ Major : chr \"Finance\" \"Statistics\" \"Computer Science\"\n```", "```py\nsummary(persons)\n## Name Gender Age Major \n## Length:3 Female:2 Min. :23.0 Length:3 \n## Class :character Male :1 1st Qu.:23.5 Class :character \n## Mode :character Median :24.0 Mode :character \n## Mean :24.0 \n## 3rd Qu.:24.5 \n## Max. :25.0\n```", "```py\nrbind(persons, data.frame(Name = \"John\", Gender = \"Male\", Age = 25, Major = \"Statistics\"))\n##   Name     Gender Age Major\n## 1 Ken      Male    24 Finance\n## 2 Ashley   Female  25 Statistics\n## 3 Jennifer Female  23 Computer Science\n## 4 John     Male    25 Statistics\n```", "```py\ncbind(persons, Registered = c(TRUE, TRUE, FALSE), Projects = c(3, 2, 3))\n##   Name    Gender  Age Major           Registered Projects\n## 1 Ken      Male   24  Finance          TRUE         3\n## 2 Ashley   Female 25  Statistics       TRUE         2\n## 3 Jennifer Female 23  Computer Science FALSE        3\n```", "```py\nexpand.grid(type = c(\"A\", \"B\"), class = c(\"M\", \"L\", \"XL\"))\n##   type class\n## 1  A    M\n## 2  B    M\n## 3  A    L\n## 4  B    L\n## 5  A   XL\n## 6  B   XL\n```", "```py\n Name,Gender,Age,MajorKen,Male,24,FinanceAshley,Female,25,StatisticsJennifer,Female,23,Computer Science\n```", "```py\nread.csv(\"data/persons.csv\")\n##   Name     Gender Age Major\n## 1 Ken      Male   24  Finance\n## 2 Ashley   Female 25  Statistics\n## 3 Jennifer Female 23  Computer Science\n```", "```py\nwrite.csv(persons, \"data/persons.csv\", row.names = FALSE, quote = FALSE)\n```", "```py\nadd <- function(x, y) {  x + y}\n```", "```py\nadd\n## function(x, y) {\n## x + y\n## }\n```", "```py\nadd(2, 3)\n## [1] 5\n```", "```py\nadd(c(2, 3), 4)\n## [1] 6 7\n```", "```py\nadd(as.Date(\"2014-06-01\"), 1)\n## [1] \"2014-06-02\"\n```", "```py\nadd(list(a = 1), list(a = 2))\n## Error in x + y: non-numeric argument to binary operator\n```", "```py\ncalc <- function(x, y, type) {\n  if (type == \"add\") {\n    x + y\n  } else if (type == \"minus\") {\n    x - y\n  } else if (type == \"multiply\") {\n    x * y\n  } else if (type == \"divide\") {\n    x / y\n  } else {\n    stop(\"Unknown type of operation\")\n  }\n}\n```", "```py\ncalc(2, 3, \"minus\")\n## [1] -1\n```", "```py\ncalc(c(2, 5), c(3, 6), \"divide\")\n## [1] 0.6666667 0.8333333\n```", "```py\ncalc(as.Date(\"2014-06-01\"), 3, \"add\")\n## [1] \"2014-06-04\"\n```", "```py\ncalc(1, 2, \"what\")\n## Error in calc(1, 2, \"what\"): Unknown type of operation\n```", "```py\ncalc(1, 2, c(\"add\", \"minue\"))\n## Warning in if (type == \"add\") {: the condition has length > 1 and only the\n## first element will be used\n## [1] 3\n```", "```py\ncalc <- function(x, y, type) {\n\n  if (length(type) > 1L) stop(\"Only a single type is accepted\")\n  if (type == \"add\") {\n  x + y\n  } else if (type == \"minus\") {\n  x - y\n  } else if (type == \"multiply\") {\n  x * y\n  } else if (type == \"divide\") {\n  x / y\n  } else {\n  stop(\"Unknown type of operation\")\n  }\n  }\n```", "```py\ncalc(1, 2, c(\"add\", \"minue\"))\n## Error in calc(1, 2, c(\"add\", \"minue\")): Only a single type is accepted\n```", "```py\nincrease <- function(x, y = 1) {\nx + y\n}\n```", "```py\nincrease(1)\n## [1] 2\nincrease(c(1, 2, 3))\n## [1] 2 3 4\n```"]