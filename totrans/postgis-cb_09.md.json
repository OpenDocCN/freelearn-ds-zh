["```py\n      postgis_cookbook=# create schema chp09;\n```", "```py\n    MapServer version 7.0.7 OUTPUT=GIF OUTPUT=PNG OUTPUT=JPEG SUPPORTS=PROJ \n    SUPPORTS=GD SUPPORTS=AGG SUPPORTS=FREETYPE SUPPORTS=CAIRO \n    SUPPORTS=SVG_SYMBOLS \n    SUPPORTS=ICONV SUPPORTS=FRIBIDI SUPPORTS=WMS_SERVER SUPPORTS=WMS_CLIENT \n    SUPPORTS=WFS_SERVER SUPPORTS=WFS_CLIENT SUPPORTS=WCS_SERVER \n    SUPPORTS=SOS_SERVER SUPPORTS=FASTCGI SUPPORTS=THREADS SUPPORTS=GEOS \n    INPUT=JPEG INPUT=POSTGIS INPUT=OGR INPUT=GDAL INPUT=SHAPEFILE\n```", "```py\n      c:\\ms4w\\Apache\\cgi-bin\\mapserv.exe -v\n```", "```py\n      $ shp2pgsql -s 4326 -W LATIN1 -g the_geom -I TM_WORLD_BORDERS-0.3.shp \n      chp09.countries > countries.sql\n      Shapefile type: Polygon\n      Postgis type: MULTIPOLYGON[2]\n      $ psql -U me -d postgis_cookbook -f countries.sql\n```", "```py\n        MAP # Start of mapfile \n        NAME 'population_per_country_map' \n        IMAGETYPE         PNG \n        EXTENT            -180 -90 180 90 \n        SIZE              800 400 \n        IMAGECOLOR        255 255 255 \n\n        # map projection definition \n        PROJECTION \n          'init=epsg:4326' \n        END \n\n        # web section: here we define the ows services \n        WEB \n          # WMS and WFS server settings \n          METADATA \n            'ows_enable_request'          '*' \n            'ows_title'                   'Mapserver sample map' \n            'ows_abstract'                'OWS services about \n                                          population per \n                                          country map' \n            'wms_onlineresource'          'http://localhost/cgi-\n                                            bin/mapserv?map=/var\n                                            /www/data/\n                                            countries.map&' \n            'ows_srs'                     'EPSG:4326 EPSG:900913 \n                                          EPSG:3857' \n            'wms_enable_request'          'GetCapabilities, \n                                          GetMap, \n                                          GetFeatureInfo' \n            'wms_feature_info_mime_type'  'text/html' \n          END \n        END \n\n        # Start of layers definition \n        LAYER # Countries polygon layer begins here \n          NAME            countries \n          CONNECTIONTYPE  POSTGIS \n          CONNECTION      'host=localhost dbname=postgis_cookbook \n                           user=me password=mypassword port=5432'\n          DATA            'the_geom from chp09.countries' \n          TEMPLATE 'template.html' \n          METADATA \n            'ows_title' 'countries' \n            'ows_abstract' 'OWS service about population per \n              country map in 2005' \n            'gml_include_items' 'all' \n          END \n          STATUS          ON \n          TYPE            POLYGON \n          # layer projection definition \n          PROJECTION \n            'init=epsg:4326' \n          END \n\n          # we define 3 population classes based on the pop2005  \n            attribute \n          CLASSITEM 'pop2005' \n          CLASS # first class \n            NAME '0 - 50M inhabitants' \n            EXPRESSION ( ([pop2005] >= 0) AND ([pop2005] <= \n              50000000) ) \n            STYLE \n              WIDTH 1 \n              OUTLINECOLOR 0 0 0 \n              COLOR 254 240 217 \n            END # end of style \n          END # end of first class \n          CLASS # second class \n            NAME '50M - 200M inhabitants' \n            EXPRESSION ( ([pop2005] > 50000000) AND \n              ([pop2005] <= 200000000) ) \n            STYLE \n              WIDTH 1 \n              OUTLINECOLOR 0 0 0 \n              COLOR 252 141 89 \n            END # end of style \n          END # end of second class \n          CLASS # third class \n            NAME '> 200M inhabitants' \n            EXPRESSION ( ([pop2005] > 200000000) ) \n            STYLE \n              WIDTH 1 \n              OUTLINECOLOR 0 0 0 \n              COLOR 179 0 0 \n            END # end of style \n          END # end of third class \n\n        END # Countries polygon layer ends here \n\n        END # End of mapfile\n```", "```py\n       <!-- MapServer Template --> \n       <ul> \n         <li><strong>Name: </strong>[item name=name]</li> \n         <li><strong>ISO2: </strong>[item name=iso2]</li> \n         <li><strong>ISO3: </strong>[item name=iso3]</li> \n         <li> \n           <strong>Population 2005:</strong> [item name=pop2005] \n         </li> \n        </ul> \n```", "```py\n        <WMT_MS_Capabilities version=\"1.1.1\"> \n          ... \n          <Service> \n            <Name>OGC:WMS</Name> \n            <Title>Population per country map</Title> \n            <Abstract>Map server sample map</Abstract> \n            <OnlineResource \n\n             xlink:href=\"http://localhost/cgi-\n             bin/mapserv?map=/var/www/data/countries.map&amp;\"/> \n            <ContactInformation> </ContactInformation> \n          </Service> \n          <Capability> \n            <Request> \n              <GetCapabilities> \n                ... \n              </GetCapabilities> \n              <GetMap> \n                <Format>image/png</Format> \n                ... \n                <Format>image/tiff</Format> \n                ... \n              </GetMap> \n              <GetFeatureInfo> \n                <Format>text/plain</Format> \n                ... \n              </GetFeatureInfo> \n              ... \n            </Request> \n            ... \n            <Layer> \n              <Name>population_per_country_map</Name> \n              <Title>Population per country map</Title> \n              <Abstract>OWS service about population per country map \n               in 2005</Abstract> \n              <SRS>EPSG:4326</SRS> \n              <SRS>EPSG:3857</SRS> \n              <LatLonBoundingBox minx=\"-180\" miny=\"-90\" maxx=\"180\" \n               maxy=\"90\" /> \n              ... \n            </Layer> \n          </Layer> \n          </Capability> \n        </WMT_MS_Capabilities>\n```", "```py\n      http://localhost/cgi-bin/mapserv?map=/var/www/data/\n      countries.map&layer=countries&REQUEST=GetFeatureInfo&\n      SERVICE=WMS&VERSION=1.1.1&LAYERS=countries&\n      QUERY_LAYERS=countries&SRS=EPSG:4326&BBOX=-122.545074509804, \n      37.6736653056517,-122.35457254902,37.8428758708189&\n      X=652&Y=368&WIDTH=1020&HEIGHT=906&INFO_FORMAT=text/html\n```", "```py\n        <gml:featureMember> \n          <ms:countries> \n            <gml:boundedBy> \n              <gml:Box srsName=\"EPSG:4326\"> \n                <gml:coordinates>-61.891113,16.989719 -\n                 61.666389,17.724998</gml:coordinates> \n              </gml:Box> \n            </gml:boundedBy> \n\n            <ms:msGeometry> \n              <gml:MultiPolygon srsName=\"EPSG:4326\"> \n                <gml:polygonMember> \n                  <gml:Polygon> \n                    <gml:outerBoundaryIs> \n                      <gml:LinearRing> \n                        <gml:coordinates> \n                          -61.686668,17.024441 ... \n                        </gml:coordinates> \n                      </gml:LinearRing> \n                    </gml:outerBoundaryIs> \n                  </gml:Polygon> \n                </gml:polygonMember> \n                ... \n              </gml:MultiPolygon> \n            </ms:msGeometry> \n            <ms:gid>1</ms:gid> \n            <ms:fips>AC</ms:fips> \n            <ms:iso2>AG</ms:iso2> \n            <ms:iso3>ATG</ms:iso3> \n            <ms:un>28</ms:un> \n            <ms:name>Antigua and Barbuda</ms:name> \n            <ms:area>44</ms:area> \n            <ms:pop2005>83039</ms:pop2005> \n            <ms:region>19</ms:region> \n            <ms:subregion>29</ms:subregion> \n            <ms:lon>-61.783</ms:lon> \n            <ms:lat>17.078</ms:lat> \n          </ms:countries> \n        </gml:featureMember> \n```", "```py\nhttp://localhost/cgi-bin/mapserv?map=/var/www/data/countries.map&&SERVICE=WMS&VERSION=1.3.0&REQUEST=GetMap&BBOX=-26,-111,36,-38&CRS=EPSG:4326&WIDTH=806&HEIGHT=688&LAYERS=countries&STYLES=&FORMAT=image/png\n```", "```py\n      $ ogr2ogr -f PostgreSQL -a_srs EPSG:4326 -lco GEOMETRY_NAME=the_geom \n      -nln chp09.counties PG:\"dbname='postgis_cookbook' user='me' \n      password='mypassword'\" countyp020.shp\n```", "```py\n        <?xml version=\"1.0\" encoding=\"UTF-8\"?> \n        <sld:StyledLayerDescriptor  \n\n          version=\"1.0.0\"> \n          <sld:NamedLayer> \n            <sld:Name>county_classification</sld:Name> \n            <sld:UserStyle> \n              <sld:Name>county_classification</sld:Name> \n              <sld:Title>County area classification</sld:Title> \n              <sld:FeatureTypeStyle> \n                <sld:Name>name</sld:Name> \n                <sld:Rule> \n                  <sld:Title>Large counties</sld:Title> \n                  <ogc:Filter> \n                    <ogc:PropertyIsGreaterThanOrEqualTo> \n                      <ogc:PropertyName>square_mil</ogc:PropertyName> \n                      <ogc:Literal>5000</ogc:Literal> \n                    </ogc:PropertyIsGreaterThanOrEqualTo> \n                  </ogc:Filter> \n                  <sld:PolygonSymbolizer> \n                    <sld:Fill> \n                      <sld:CssParameter \n                       name=\"fill\">#FF0000</sld:CssParameter> \n                    </sld:Fill> \n                    <sld:Stroke/> \n                  </sld:PolygonSymbolizer> \n                </sld:Rule> \n                <sld:Rule> \n                  <sld:Title>Small counties</sld:Title>\n                  <ogc:Filter> \n                    <ogc:PropertyIsLessThan> \n                       <ogc:PropertyName>square_mil</ogc:PropertyName> \n                      <ogc:Literal>5000</ogc:Literal> \n                    </ogc:PropertyIsLessThan>\n                  </ogc:Filter> \n                  <sld:PolygonSymbolizer> \n                    <sld:Fill> \n                      <sld:CssParameter \n                       name=\"fill\">#0000FF</sld:CssParameter> \n                    </sld:Fill> \n                    <sld:Stroke/> \n                  </sld:PolygonSymbolizer> \n                </sld:Rule> \n              </sld:FeatureTypeStyle> \n            </sld:UserStyle> \n          </sld:NamedLayer> \n        </sld:StyledLayerDescriptor> \n```", "```py\n        <Layer queryable=\"1\"> \n          <Name>postgis_cookbook:counties</Name> \n          <Title>counties</Title> \n          <Abstract/> \n          <KeywordList> \n            <Keyword>counties</Keyword> \n            <Keyword>features</Keyword> \n          </KeywordList> \n          <CRS>EPSG:4326</CRS> \n          <CRS>CRS:84</CRS> \n          <EX_GeographicBoundingBox> \n            <westBoundLongitude>-179.133392333984\n            </westBoundLongitude>            \n            <eastBoundLongitude>-64.566162109375\n            </eastBoundLongitude> \n            <southBoundLatitude>17.6746921539307\n            </southBoundLatitude> \n            <northBoundLatitude>71.3980484008789\n            </northBoundLatitude> \n          </EX_GeographicBoundingBox> \n          <BoundingBox CRS=\"CRS:84\" minx=\"-179.133392333984\" \n           miny=\"17.6746921539307\" maxx=\"-64.566162109375\" \n           maxy=\"71.3980484008789\"/> \n          <BoundingBox CRS=\"EPSG:4326\" minx=\"17.6746921539307\" \n           miny=\"-179.133392333984\" maxx=\"71.3980484008789\" maxy=\"-\n           64.566162109375\"/> \n          <Style> \n            <Name>Counties classified per size</Name> \n            <Title>County area classification</Title> \n            <Abstract/> \n            <LegendURL width=\"20\" height=\"20\"> \n              <Format>image/png</Format> \n              <OnlineResource \n\n               xlink:type=\"simple\" xlink:href=\n               \"http://localhost:8080/geoserver/\n                ows?service=WMS&amp;request=GetLegendGraphic&amp;\n                 format=image%2Fpng&amp;width=20&amp;height=20&amp;\n                layer=counties\"/> \n            </LegendURL> \n          </Style> \n        </Layer> \n```", "```py\n        <FeatureType> \n          <Name>postgis_cookbook:counties</Name> \n          <Title>counties</Title> \n          <Abstract/> \n          <Keywords>counties, features</Keywords> \n          <SRS>EPSG:4326</SRS> \n          <LatLongBoundingBox minx=\"-179.133392333984\" \n           miny=\"17.6746921539307\" maxx=\"-64.566162109375\" \n           maxy=\"71.3980484008789\"/> \n        </FeatureType>\n```", "```py\n        <gml:featureMember> \n          <postgis_cookbook:counties fid=\"counties.3962\"> \n            <postgis_cookbook:the_geom> \n              <gml:Polygon srsName=\"http://www.opengis.net/\n               gml/srs/epsg.xml#4326\"> \n                <gml:outerBoundaryIs> \n                  <gml:LinearRing> \n                    <gml:coordinates xmlns:gml=\n                     \"http://www.opengis.net/gml\" \n                     decimal=\".\" cs=\",\" ts=\"\"> \n                     -101.62554932,36.50246048 -\n                     101.0908432,36.50032043 ... \n                     ... \n                     ... \n                    </gml:coordinates> \n                  </gml:LinearRing> \n                </gml:outerBoundaryIs> \n              </gml:Polygon> \n            </postgis_cookbook:the_geom> \n             <postgis_cookbook:area>0.240</postgis_cookbook:area> \n            <postgis_cookbook:perimeter>1.967\n            </postgis_cookbook:perimeter> \n            <postgis_cookbook:co2000p020>3963.0\n            </postgis_cookbook:co2000p020> \n             <postgis_cookbook:state>TX</postgis_cookbook:state> \n            <postgis_cookbook:county>Hansford \n             County</postgis_cookbook:county> \n             <postgis_cookbook:fips>48195</postgis_cookbook:fips> \n            <postgis_cookbook:state_fips>48\n            </postgis_cookbook:state_fips> \n            <postgis_cookbook:square_mil>919.801\n            </postgis_cookbook:square_mil> \n          </postgis_cookbook:counties> \n        </gml:featureMember>\n```", "```py\n      $ shp2pgsql -s 4326 -g the_geom -I \n      MODIS_C6_Global_7d.shp chp09.hotspots > hotspots.sql\n      $ psql -U me -d postgis_cookbook -f hotspots.sql\n```", "```py\n      postgis_cookbook=# SELECT acq_date, count(*) AS hotspots_count \n      FROM chp09.hotspots GROUP BY acq_date ORDER BY acq_date;\n```", "```py\n        MAP # Start of mapfile \n          NAME 'hotspots_time_series' \n          IMAGETYPE         PNG \n          EXTENT            -180 -90 180 90 \n          SIZE              800 400 \n          IMAGECOLOR        255 255 255 \n\n          # map projection definition \n          PROJECTION \n            'init=epsg:4326' \n          END \n\n          # a symbol for hotspots \n          SYMBOL \n            NAME \"circle\" \n            TYPE ellipse \n            FILLED true \n            POINTS \n              1 1 \n            END \n          END \n\n          # web section: here we define the ows services \n          WEB \n            # WMS and WFS server settings \n            METADATA \n              'wms_name'                'Hotspots' \n              'wms_title'               'World hotspots time \n                                         series' \n              'wms_abstract'            'Active fire data detected \n                                        by NASA Earth Observing \n                                        System Data and Information \n                                        System (EOSDIS)' \n              'wms_onlineresource'      'http://localhost/cgi-bin/\n                                        mapserv?map=/var/www/data/\n                                        hotspots.map&' \n              'wms_srs'                 'EPSG:4326 EPSG:3857' \n              'wms_enable_request' '*' \n              'wms_feature_info_mime_type'  'text/html' \n            END \n          END \n\n          # Start of layers definition \n          LAYER # Hotspots point layer begins here \n            NAME            hotspots \n            CONNECTIONTYPE  POSTGIS \n            CONNECTION      'host=localhost dbname=postgis_cookbook \n                             user=me \n                             password=mypassword port=5432' \n            DATA            'the_geom from chp09.hotspots' \n            TEMPLATE 'template.html' \n            METADATA \n              'wms_title'                   'World hotspots time \n                                             series' \n              'gml_include_items' 'all' \n            END \n            STATUS          ON \n            TYPE            POINT \n            CLASS \n              SYMBOL 'circle' \n              SIZE 4 \n              COLOR        255 0 0 \n            END # end of class \n\n          END # hotspots layer ends here \n\n        END # End of mapfile \n```", "```py\n        METADATA \n          'wms_title'                   'World hotspots time \n                                         series' \n          'gml_include_items' 'all' \n          'wms_timeextent' '2000-01-01/2020-12-31' # time extent \n            for which the service will give a response \n          'wms_timeitem' 'acq_date' # layer field to use to filter \n            on the TIME parameter \n          'wms_timedefault' '2013-05-30' # default parameter if not \n            added to the request \n        END \n```", "```py\n        <!doctype html> \n        <html> \n          <head> \n            <title>OpenLayers Example</title> \n            <script src=\"img/OpenLayers.js\">\n            </script> \n          </head> \n          <body> \n          </body> \n        </html> \n```", "```py\n        <div style=\"width:900px; height:500px\" id=\"map\"></div>\n```", "```py\n        <script defer=\"defer\" type=\"text/javascript\"> \n          // instantiate the map object \n          var map = new OpenLayers.Map(\"map\", { \n            controls: [], \n            projection: new OpenLayers.Projection(\"EPSG:3857\") \n          }); \n        </script> \n```", "```py\n        // add some controls on the map \n        map.addControl(new OpenLayers.Control.Navigation()); \n        map.addControl(new OpenLayers.Control.PanZoomBar()), \n        map.addControl(new OpenLayers.Control.LayerSwitcher( \n           {\"div\":OpenLayers.Util.getElement(\"layerswitcher\")})); \n        map.addControl(new OpenLayers.Control.MousePosition()); \n```", "```py\n        // set the OSM layer \n        var osm_layer = new OpenLayers.Layer.OSM();\n```", "```py\n                // set the WMS \n                var geoserver_url = \"http://localhost:8080/geoserver/wms\"; \n                var mapserver_url = http://localhost/cgi-\n                bin/mapserv?map=/var/www/data/countries.map& \n```", "```py\n                // set the WMS \n                var geoserver_url = \"http://localhost:8080/geoserver/wms\"; \n                var mapserver_url = http://localhost/cgi-\n                bin/mapserv.exe?map=C:\\\\ms4w\\\\Apache\\\\\n                htdocs\\\\countries.map&\n```", "```py\n               // set the WMS \n               var geoserver_url = \"http://localhost:8080/geoserver/wms\"; \n               var mapserver_url = http://localhost/cgi-\n               bin/mapserv? map=/Library/WebServer/\n               Documents/countries.map& \n```", "```py\n        // set the GeoServer WMS \n        var geoserver_wms = new OpenLayers.Layer.WMS( \"GeoServer WMS\", \n        geoserver_url, \n        { \n          layers: \"postgis_cookbook:counties\", \n          transparent: \"true\", \n          format: \"image/png\", \n        }, \n        { \n          isBaseLayer: false, \n          opacity: 0.4 \n        } ); \n```", "```py\n        // set the MapServer WMS \n        var mapserver_wms = new OpenLayers.Layer.WMS( \"MapServer WMS\", \n        mapserver_url, \n        { \n          layers: \"countries\", \n          transparent: \"true\", \n          format: \"image/png\", \n        }, \n        { \n          isBaseLayer: false \n        } ); \n```", "```py\n        // add all of the layers to the map \n        map.addLayers([mapserver_wms, geoserver_wms, osm_layer]); \n        map.zoomToMaxExtent(); \n        Proxy... \n        // add the WMSGetFeatureInfo control \n        OpenLayers.ProxyHost = \"/cgi-bin/proxy.cgi?url=\"; \n```", "```py\n        var info = new OpenLayers.Control.WMSGetFeatureInfo({ \n          url: geoserver_url, \n          title: 'Identify', \n          queryVisible: true, \n          eventListeners: { \n            getfeatureinfo: function(event) { \n              map.addPopup(new OpenLayers.Popup.FramedCloud( \n                \"WMSIdentify\", \n                map.getLonLatFromPixel(event.xy), \n                null, \n                event.text, \n                null, \n                true \n              )); \n            } \n          } \n        }); \n        map.addControl(info); \n        info.activate(); \n```", "```py\n        // center map \n        var cpoint = new OpenLayers.LonLat(-11000000, 4800000); \n        map.setCenter(cpoint, 3); \n```", "```py\n        <html> \n          <head> \n            <title>Leaflet Example</title> \n            <link rel=\"stylesheet\" \n             href= \"https://unpkg.com/leaflet@1.2.0/dist/leaflet.css\" /> \n            <script src= \"https://unpkg.com/leaflet@1.2.0/dist/leaflet.js\">\n            </script> \n            <script src=\"img/jquery.min.js\">\n            </script> \n          </head> \n          <body> \n          </body> \n        </html> \n```", "```py\n        <div id=\"map\" style=\"width:800px; height:500px\"></div> \n```", "```py\n        <script defer=\"defer\" type=\"text/javascript\"> \n          // osm layer \n          var osm = L.tileLayer('http://{s}.tile.osm.org\n                    /{z}/{x}/{y}.png', { \n            maxZoom: 18, \n            attribution: \"Data by OpenStreetMap\" \n          }); \n        </script>\n```", "```py\n                // mapserver layer \n                var ms_url = \"http://localhost/cgi-bin/mapserv?\n                  map=/var/www/data/countries.map&\"; \n                var countries = L.tileLayer.wms(ms_url, { \n                  layers: 'countries', \n                  format: 'image/png', \n                  transparent: true, \n                  opacity: 0.7 \n                }); \n```", "```py\n                // mapserver layer \n                var ms_url = \"http://localhost\n                  /cgi-bin/mapserv.exe?map=C:%5Cms4w%5CApache%5\n                  Chtdocs%5Ccountries.map&\"; \n                var countries = L.tileLayer.wms(ms_url, { \n                  layers: 'countries', \n                  format: 'image/png', \n                  transparent: true, \n                  opacity: 0.7 \n                }); \n```", "```py\n                // mapserver layer \n                var ms_url = \"http://localhost/cgi-bin/mapserv?\n                  map=/Library/WebServer/Documents/countries.map&\"; \n                var countries = L.tileLayer.wms(ms_url, { \n                  layers: 'countries', \n                  format: 'image/png', \n                  transparent: true, \n                  opacity: 0.7 \n                });\n```", "```py\n        // map creation \n        var map = new L.Map('map', { \n          center: new L.LatLng(15, 0), \n          zoom: 2, \n          layers: [osm, countries], \n          zoomControl: true \n        }); \n```", "```py\n        // getfeatureinfo event \n        map.addEventListener('click', Identify); \n\n        function Identify(e) { \n          // set parameters needed for GetFeatureInfo WMS request \n          var BBOX = map.getBounds().toBBoxString(); \n          var WIDTH = map.getSize().x; \n          var HEIGHT = map.getSize().y; \n          var X = map.layerPointToContainerPoint(e.layerPoint).x; \n          var Y = map.layerPointToContainerPoint(e.layerPoint).y; \n          // compose the URL for the request \n          var URL = ms_url + 'SERVICE=WMS&VERSION=1.1.1&\n          REQUEST=GetFeatureInfo&LAYERS=countries&\n           QUERY_LAYERS=countries&BBOX='+BBOX+'&FEATURE_COUNT=1&\n          HEIGHT='+HEIGHT+'&WIDTH='+WIDTH+'&\n           INFO_FORMAT=text%2Fhtml&SRS=EPSG%3A4326&X='+X+'&Y='+Y; \n          //send the asynchronous HTTP request using \n          jQuery $.ajax \n          $.ajax({ \n            url: URL, \n            dataType: \"html\", \n            type: \"GET\", \n            success: function(data) { \n              var popup = new L.Popup({ \n                maxWidth: 300 \n              }); \n              popup.setContent(data); \n              popup.setLatLng(e.latlng); \n              map.openPopup(popup); \n            } \n          }); \n        }\n```", "```py\n CREATE TABLE chp09.sites \n        ( \n          gid serial NOT NULL, \n          the_geom geometry(Point,4326), \n          CONSTRAINT sites_pkey PRIMARY KEY (gid ) \n        ); \n        CREATE INDEX sites_the_geom_gist ON chp09.sites \n        USING gist (the_geom ); \n```", "```py\n        <html> \n          <head> \n            <title>Consuming a WFS-T with OpenLayers</title> \n            <script \n             src=\"img/OpenLayers.js\">\n            </script> \n          </head> \n          <body> \n          </body> \n        </html> \n```", "```py\n        <div style=\"width:700px; height:400px\" id=\"map\"></div>\n```", "```py\n        <script type=\"text/javascript\"> \n          // set the proxy \n          OpenLayers.ProxyHost = \"/cgi-bin/proxy.cgi?url=\"; \n          // create the map \n          var map = new OpenLayers.Map('map'); \n        </script> \n```", "```py\n       // create an OSM base layer \n       var osm = new OpenLayers.Layer.OSM();\n```", "```py\n        // create the wfs layer \n        var saveStrategy = new OpenLayers.Strategy.Save(); \n        var wfs = new OpenLayers.Layer.Vector(\"Sites\", \n        { \n          strategies: [new OpenLayers.Strategy.BBOX(), saveStrategy], \n          projection: new OpenLayers.Projection(\"EPSG:4326\"), \n                      styleMap: new OpenLayers.StyleMap({ \n            pointRadius: 7, \n            fillColor: \"#FF0000\" \n          }), \n          protocol: new OpenLayers.Protocol.WFS({ \n            version: \"1.1.0\", \n            srsName: \"EPSG:4326\", \n            url: \"http://localhost:8080/geoserver/wfs\", \n            featurePrefix: 'postgis_cookbook', \n            featureType: \"sites\", \n            featureNS: \"https://www.packtpub.com/application-development/\n                        postgis-cookbook-second-edition\", \n            geometryName: \"the_geom\" \n          }) \n        });\n```", "```py\n      // add layers to map and center it \n      map.addLayers([osm, wfs]); \n      var fromProjection = new OpenLayers.Projection(\"EPSG:4326\"); \n      var toProjection   = new OpenLayers.Projection(\"EPSG:900913\"); \n      var cpoint = new OpenLayers.LonLat(12.5, 41.85).transform( \n                   fromProjection, toProjection); \n      map.setCenter(cpoint, 10);\n```", "```py\n        // create a panel for tools \n        var panel = new OpenLayers.Control.Panel({ \n          displayClass: \"olControlEditingToolbar\" \n        }); \n```", "```py\n        // create a draw point tool \n        var draw = new OpenLayers.Control.DrawFeature( \n          wfs, OpenLayers.Handler.Point, \n          { \n            handlerOptions: {freehand: false, multi: false}, \n            displayClass: \"olControlDrawFeaturePoint\" \n          } \n        ); \n```", "```py\n        // create a save tool \n        var save = new OpenLayers.Control.Button({ \n          title: \"Save Features\", \n          trigger: function() { \n            saveStrategy.save(); \n          }, \n          displayClass: \"olControlSaveFeatures\" \n        });\n```", "```py\n       // add tools to panel and add it to map \n       panel.addControls([ \n         new OpenLayers.Control.Navigation(), \n         save, draw \n       ]); \n       map.addControl(panel);\n```", "```py\n<wfs:Transaction  \n service=\"WFS\" version=\"1.1.0\" \n xsi:schemaLocation=\"http://www.opengis.net/wfs \n http://schemas.opengis.net/wfs/1.1.0/wfs.xsd\" \n > \n  <wfs:Insert> \n    <feature:sites > \n      <feature:the_geom> \n <gml:Point  \n         srsName=\"EPSG:4326\"> <gml:pos>12.450561523436999 41.94302128455888</gml:pos> </gml:Point> \n              </feature:the_geom> \n            </feature:sites> \n          </wfs:Insert> \n        </wfs:Transaction> \n```", "```py\n<?xml version=\"1.0\" encoding=\"UTF-8\"?> \n<wfs:TransactionResponse version=\"1.1.0\" ...[CLIP]... > \n <wfs:TransactionSummary> <wfs:totalInserted>1</wfs:totalInserted> <wfs:totalUpdated>0</wfs:totalUpdated> <wfs:totalDeleted>0</wfs:totalDeleted> </wfs:TransactionSummary> \n  <wfs:TransactionResults/> \n  <wfs:InsertResults> \n    <wfs:Feature> \n      <ogc:FeatureId fid=\"sites.17\"/> \n    </wfs:Feature> \n  </wfs:InsertResults> \n</wfs:TransactionResponse> \n```", "```py\n $ cd ~/virtualenvs/\n $ virtualenv --no-site-packages chp09-env\n $ source chp09-env/bin/activate\n```", "```py\n cd c:\\virtualenvs\n                C:\\Python27\\Scripts\\virtualenv.exe \n                -no-site-packages chp09-env\n                chp09-env\\Scripts\\activate\n```", "```py\n (chp09-env)$ pip install django==1.10\n                (chp09-env)$ pip install psycopg2==2.7\n                (chp09-env)$ pip install Pillow\n```", "```py\n                (chp09-env) C:\\virtualenvs> pip install django==1.10\n                (chp09-env) C:\\virtualenvs> pip install psycopg2=2.7\n                (chp09-env) C:\\virtualenvs> easy_install Pillow\n```", "```py\n      (chp09-env)$ cd ~/postgis_cookbook/working/chp09\n      (chp09-env)$ django-admin.py startproject wildlife\n```", "```py\n      (chp09-env)$ cd wildlife/\n      (chp09-env)$ django-admin.py startapp sightings\n```", "```py\n        DATABASES = { \n          'default': { \n            'ENGINE': 'django.contrib.gis.db.backends.postgis', \n            'NAME': 'postgis_cookbook', \n            'USER': 'me', \n            'PASSWORD': 'mypassword', \n            'HOST': 'localhost', \n            'PORT': '', \n          } \n        } \n```", "```py\n        import os \n        PROJECT_PATH = os.path.abspath(os.path.dirname(__file__)) \n```", "```py\n        MEDIA_ROOT = os.path.join(PROJECT_PATH, \"media\") \n        MEDIA_URL = '/media/'\n```", "```py\n        INSTALLED_APPS = ( \n          'django.contrib.admin', \n          'django.contrib.auth', \n          'django.contrib.contenttypes', \n          'django.contrib.sessions', \n          'django.contrib.messages', \n          'django.contrib.staticfiles', \n          'django.contrib.gis', \n          'sightings', \n        ) \n```", "```py\n      (chp09-env)$ python manage.py makemigrations\n      (chp09-env)$ python manage.py migrate\n```", "```py\n        from django.db import models \n        from django.contrib.gis.db import models as gismodels \n\n        class Country(gismodels.Model): \n          \"\"\" \n            Model to represent countries. \n          \"\"\" \n          isocode = gismodels.CharField(max_length=2) \n          name = gismodels.CharField(max_length=255) \n          geometry = gismodels.MultiPolygonField(srid=4326) \n          objects = gismodels.GeoManager() \n\n          def __unicode__(self): \n            return '%s' % (self.name) \n\n        class Animal(models.Model): \n          \"\"\" \n            Model to represent animals. \n          \"\"\" \n          name = models.CharField(max_length=255) \n          image = models.ImageField(upload_to='animals.images') \n\n          def __unicode__(self): \n            return '%s' % (self.name) \n\n          def image_url(self): \n            return u'<img src=\"img/%s\" alt=\"%s\" width=\"80\"></img>' % \n                   (self.image.url, self.name) \n            image_url.allow_tags = True \n\n          class Meta: \n            ordering = ['name'] \n\n        class Sighting(gismodels.Model): \n          \"\"\" \n            Model to represent sightings. \n          \"\"\" \n          RATE_CHOICES = ( \n            (1, '*'), \n            (2, '**'), \n            (3, '***'), \n          ) \n          date = gismodels.DateTimeField() \n          description = gismodels.TextField() \n          rate = gismodels.IntegerField(choices=RATE_CHOICES) \n          animal = gismodels.ForeignKey(Animal) \n          geometry = gismodels.PointField(srid=4326) \n          objects = gismodels.GeoManager() \n\n          def __unicode__(self): \n            return '%s' % (self.date) \n\n          class Meta: \n            ordering = ['date'] \n```", "```py\n        from django.contrib import admin \n        from django.contrib.gis.admin import GeoModelAdmin \n        from models import Country, Animal, Sighting \n\n        class SightingAdmin(GeoModelAdmin): \n          \"\"\" \n            Web admin behavior for the Sighting model. \n          \"\"\" \n          model = Sighting \n          list_display = ['date', 'animal', 'rate'] \n          list_filter = ['date', 'animal', 'rate'] \n          date_hierarchy = 'date' \n\n        class AnimalAdmin(admin.ModelAdmin): \n          \"\"\" \n            Web admin behavior for the Animal model. \n          \"\"\" \n          model = Animal \n          list_display = ['name', 'image_url',] \n\n        class CountryAdmin(GeoModelAdmin): \n          \"\"\" \n            Web admin behavior for the Country model. \n          \"\"\" \n          model = Country \n          list_display = ['isocode', 'name'] \n          ordering = ('name',) \n\n          class Meta: \n            verbose_name_plural = 'countries' \n\n        admin.site.register(Animal, AnimalAdmin) \n        admin.site.register(Sighting, SightingAdmin) \n        admin.site.register(Country, CountryAdmin)\n```", "```py\n (chp09-env)$ python manage.py makemigrations \n      (chp09-env)$ python manage.py migrate\n```", "```py\n        from django.conf.urls import url\n        from django.contrib import admin\n        import settings\n        from django.conf.urls.static import static\n        admin.autodiscover()\n        urlpatterns = [\n          url(r'^admin/', admin.site.urls),\n        ] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n```", "```py\n      (chp09-env)$ python manage.py runserver\n```", "```py\n      $ ogrinfo TM_WORLD_BORDERS-0.3.shp TM_WORLD_BORDERS-0.3 -al -so\n```", "```py\n        \"\"\" \n        Script to load the data for the country model from a shapefile. \n        \"\"\" \n\n        from django.contrib.gis.utils import LayerMapping \n        from models import Country \n\n        country_mapping = { \n          'isocode' : 'ISO2', \n          'name' : 'NAME', \n          'geometry' : 'MULTIPOLYGON', \n        } \n\n        country_shp = 'TM_WORLD_BORDERS-0.3.shp' \n        country_lm =  LayerMapping(Country, country_shp, country_mapping, \n                                   transform=False, encoding='iso-8859-1') \n        country_lm.save(verbose=True, progress=True) \n```", "```py\n (chp09-env)$ python manage.py shell      >>> from sightings import load_countries \n Saved: Antigua and Barbuda \n Saved: Algeria Saved: Azerbaijan \n ... \n Saved: Taiwan\n```", "```py\n (chp09-env)$ python manage.py runserver \n```", "```py\n(chp09-env-bis)$ python manage.py shell \n>>> from django.db import connection \n>>> from datetime import datetime \n>>> from sightings.models import Sighting, Animal \n>>> an_animal = Animal.objects.all()[0] \n>>> an_animal \n<Animal: Lion> \n>>> print connection.queries[-1]['sql'] \nSELECT \"sightings_animal\".\"id\", \"sightings_animal\".\"name\", \"sightings_animal\".\"image\" FROM \"sightings_animal\" ORDER BY \"sightings_animal\".\"name\" ASC LIMIT 1' \nmy_sight = Sighting(date=datetime.now(), description='What a lion I have seen!', rate=1, animal=an_animal, geometry='POINT(10 10)') \n>>> my_sight.save() \nprint connection.queries[-1]['sql'] \nINSERT INTO \"sightings_sighting\" (\"date\", \"description\", \"rate\", \"animal_id\", \"geometry\") VALUES ('2013-06-12 14:37:36.544268-05:00', 'What a lion I have seen!', 1, 2, ST_GeomFromEWKB('\\x0101000020e610000000000000000024400000000000002440'::bytea)) RETURNING \"sightings_sighting\".\"id\" \n>>> my_sight.delete() \n>>> print connection.queries[-1]['sql'] \nDELETE FROM \"sightings_sighting\" WHERE \"id\" IN (5)\n```", "```py\n $ cd ~/virtualenvs/ $ source chp09-env/bin/activate\n```", "```py\n cd c:\\virtualenvs > chp09-env\\Scripts\\activate\n```", "```py\n (chp09-env)$ pip install simplejson \n (chp09-env)$ pip install vectorformats\n```", "```py\n (chp09-env) C:\\virtualenvs> pip install simplejson \n (chp09-env) C:\\virtualenvs> pip install vectorformats\n```", "```py\n        from django.conf.urls import patterns, include, url \n        from django.conf import settings \n        from sightings.views import get_geojson, home \n        from django.contrib import admin \n        admin.autodiscover() \n        urlpatterns = [\n          url(r'^admin/', admin.site.urls), \n          url(r'^geojson/', get_geojson), \n          url(r'^$', home), \n        ] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT) \n          # media files\n```", "```py\n        from django.shortcuts import render \n        from django.http import HttpResponse \n        from  vectorformats.Formats import Django, GeoJSON \n        from models import Sighting \n\n        def home(request): \n          \"\"\"\n            Display the home page with the list and a map of the sightings. \n          \"\"\" \n          sightings = Sighting.objects.all() \n          return render(\"sightings/home.html\", {'sightings' : sightings}) \n\n        def get_geojson(request): \n          \"\"\" \n            Get geojson (needed by the map) for all of the sightings. \n          \"\"\" \n          sightings = Sighting.objects.all() \n          djf = Django.Django(geodjango='geometry',\n            properties=['animal_name', 'animal_image_url', 'description', \n                        'rate', 'date_formatted', 'country_name'])\n          geoj = GeoJSON.GeoJSON() \n          s = geoj.encode(djf.decode(sightings)) \n          return HttpResponse(s)\n```", "```py\n        @property \n        def date_formatted(self): \n          return self.date.strftime('%m/%d/%Y')\n\n        @property \n        def animal_name(self): \n          return self.animal.name \n\n        @property \n        def animal_image_url(self): \n          return self.animal.image_url() \n\n        @property \n        def country_name(self): \n          country = Country.objects.filter\n            (geometry__contains=self.geometry)[0] \n          return country.name\n```", "```py\n        <!DOCTYPE html>\n        <html>\n          <head>\n            <title>Wildlife's Sightings</title> \n            <link rel=\"stylesheet\" \n             href=\"https://unpkg.com/leaflet@1.2.0/dist/leaflet.css\" \n             integrity=\"sha512-M2wvCLH6DSRazYeZRIm1JnYyh\n             22purTM+FDB5CsyxtQJYeKq83arPe5wgbNmcFXGqiSH2XR8dT\n             /fJISVA1r/zQ==\" crossorigin=\"\"/> \n            <script src=\"img/leaflet.js\"\n             integrity=\"sha512-lInM/apFSqyy1o6s89K4iQUKg6ppXEgsVxT35HbzUup\n             EVRh2Eu9Wdl4tHj7dZO0s1uvplcYGmt3498TtHq+log==\" crossorigin=\"\">\n            </script> \n            <script src=\"img/jquery.min.js\">\n            </script> \n          </head> \n          <body> \n            <h1>Wildlife's Sightings</h1> \n            <p>There are {{ sightings.count }} sightings \n               in the database.</p> \n            <div id=\"map\" style=\"width:800px; height:500px\"></div> \n            <ul> \n              {% for s in sightings %} \n              <li><strong>{{ s.animal }}</strong>, \n                seen in {{ s.country_name }} on {{ s.date }} \n                and rated {{ s.rate }}\n              </li> {% endfor %} \n            </ul> \n            <script type=\"text/javascript\"> \n              // OSM layer \n              var osm = L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}\n                                               .png', {\n                maxZoom: 18, \n               attribution: \"Data by OpenStreetMap\" \n              }); \n              // map creation \n              var map = new L.Map('map', { \n                center: new L.LatLng(15, 0), \n                zoom: 2, \n                layers: [osm], \n                zoomControl: true \n              }); \n              // add GeoJSON layer \n              $.ajax({ \n                type: \"GET\", \n                url: \"geojson\", \n                dataType: 'json', \n                success: function (response) {\n                  geojsonLayer = L.geoJson(response, { \n                    style: function (feature) { \n                      return {color: feature.properties.color}; \n                    }, \n                    onEachFeature: function (feature, layer) {\n                      var html = \"<strong>\" +\n                                 feature.properties.animal_name + \n                                 \"</strong><br />\" + \n                                 feature.properties.animal_image_url + \n                                 \"<br /><strong>Description:</strong> \" + \n                                 feature.properties.description + \n                                 \"<br /><strong>Rate:</strong> \" + \n                                 feature.properties.rate + \n                                 \"<br /><strong>Date:</strong> \" + \n                                 feature.properties.date_formatted + \n                                 \"<br /><strong>Country:</strong> \" +\n                                 feature.properties.country_name \n                                 layer.bindPopup(html); \n                    }\n                  }).addTo(map);\n                }\n              }); \n            </script>\n          </body> \n        </html>\n```", "```py\n ogr2ogr -f GeoJSON tracks.json \\\n \"PG:host=localhost dbname=postgis_cookbook user=me\" \\\n -sql \"select * from chp03.tracks\n```", "```py\n      <script src='https://api.mapbox.com/mapbox-gl-js\n             /v0.42.0/mapbox-gl.js'></script>\n      <link href='https://api.mapbox.com/mapbox-gl-js\n            /v0.42.0/mapbox-gl.css' rel='stylesheet' />\n```", "```py\n        <div id='map' style='width: 800px; height: 600px;'></div>\n        <script>\n          mapboxgl.accessToken = YOUR_TOKEN';\n          var map = new mapboxgl.Map({\n            container: 'map',\n            style: 'YOUR_STYLE_URL'\n          });\n          // Add zoom and rotation controls to the map.\n          map.addControl(new mapboxgl.NavigationControl());\n        </script>\n```"]