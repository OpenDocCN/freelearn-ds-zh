- en: Putting It All Together
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 整合所有内容
- en: 'Throughout the book, we have touched all the important aspects of geospatial
    analysis and we''ve used a variety of different techniques in Python to analyze
    different types of geospatial data. In this final chapter, we will draw on nearly
    all of the topics we have covered to produce a real-world product that has become
    very popular: a GPS route analysis report.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在整本书中，我们已经触及了地理空间分析的所有重要方面，并且我们使用了多种不同的 Python 技术来分析不同类型的地理空间数据。在本章的最后，我们将利用我们几乎涵盖的所有主题，来制作一个实际应用且非常受欢迎的产品：GPS
    路线分析报告。
- en: These reports are common to dozens of mobile app services, GPS watches, in-car
    navigation systems, and other GPS-based tools. A GPS typically records location,
    time, and elevation. From these values, we can derive a vast amount of ancillary
    information about what happened along the route on which that data was recorded.
    Fitness apps including RunKeeper, MapMyRun, Strava, and Nike Plus all use similar
    reports to present GPS-tracked exercise data from running, hiking, biking, and
    walking.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这些报告在数十个移动应用服务、GPS 手表、车载导航系统和其他基于 GPS 的工具中很常见。GPS 通常记录位置、时间和海拔。从这些值中，我们可以推导出大量关于记录数据沿途发生事件的辅助信息。包括
    RunKeeper、MapMyRun、Strava 和 Nike Plus 在内的健身应用都使用类似的报告来展示跑步、徒步、骑行和步行的 GPS 追踪运动数据。
- en: 'We will create one of these reports using Python. This program is nearly 500
    lines of code, our longest yet, so we will step through it in pieces. We will
    combine the following techniques:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 Python 创建这样的报告。这个程序将近 500 行代码，是我们迄今为止最长的，因此我们将分部分逐步进行。我们将结合以下技术：
- en: Understanding a typical GPS report
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解典型的 GPS 报告
- en: Building a GPS reporting tool
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建GPS报告工具
- en: As we step through this program, all of the techniques used will be familiar,
    but we will be using them in new ways.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们逐步通过这个程序，我们将使用所有熟悉的技术，但我们将以新的方式使用它们。
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'We''ll be needing the following things for this chapter:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章中需要以下东西：
- en: Python 3.6 or higher
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 3.6 或更高版本
- en: 'RAM: Minimum – 6 GB (Windows), 8 GB (macOS); recommended 8 GB'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存：最低要求 – 6 GB（Windows），8 GB（macOS）；推荐 8 GB
- en: 'Storage: Minimum 7200 RPM SATA with 20 GB of available space, recommended SSD
    with 40 GB of available space'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储：最低要求 7200 RPM SATA，可用空间 20 GB，推荐 SSD，可用空间 40 GB
- en: 'Processor: Minimum Intel Core i3 2.5 GHz, recommended Intel Core i5'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理器：最低要求 Intel Core i3 2.5 GHz，推荐 Intel Core i5
- en: 'PIL: The Python Imaging Library'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PIL：Python 图像库
- en: 'NumPy: A multidimensional and array-processing library'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NumPy：一个多维和数组处理库
- en: '`pygooglechart`: A Python wrapper for the excellent Google Chart API'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pygooglechart`：Google 图表 API 的 Python 封装器'
- en: 'FPDF: A simple and pure-Python PDF writer'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: FPDF：一个简单且纯 Python 的 PDF 编写器
- en: Understanding a typical GPS report
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解典型的 GPS 报告
- en: 'A typical GPS report has common elements including a route map, elevation profile,
    and speed profile. The following screenshot is a report from a typical route logged
    through RunKeeper ([https://runkeeper.com/index](https://runkeeper.com/index)):'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 一个典型的 GPS 报告包括常见的元素，如路线图、海拔剖面图和速度剖面图。以下截图是一个通过 RunKeeper 记录的典型路线的报告（[https://runkeeper.com/index](https://runkeeper.com/index)）：
- en: '![](img/c9ab8e4f-557d-4506-acfe-d5d07f510d3a.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c9ab8e4f-557d-4506-acfe-d5d07f510d3a.png)'
- en: Our report will be similar, but we'll add a twist. We'll include the route map
    and elevation profile like this service, but we'll also add the weather conditions
    that occurred on that route when it was recorded and a geolocated photo taken
    on route.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的报告将与这个服务类似，但我们还会增加一个特色。我们将包括路线图和海拔剖面图，就像这个服务一样，但我们还会添加在记录该路线时发生的天气条件以及沿途拍摄的地理定位照片。
- en: Now that we know what a GPS report is, let's learn how to build it.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经了解了 GPS 报告是什么，那么让我们学习如何构建它。
- en: Building a GPS reporting tool
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建GPS报告工具
- en: The name of our program is `GPX-Reporter.py`. If you remember the *Tag and markup-based
    formats *section in [Chapter 2](a7a60707-fb99-41d3-959c-7ed43a469c55.xhtml), *Learning
    Geospatial Data*, the **GPX** format is the most common way to store GPS route
    information. Nearly every program and device relying on GPS data can convert to
    and from GPX.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们程序的名字是 `GPX-Reporter.py`。如果您还记得 [第 2 章](a7a60707-fb99-41d3-959c-7ed43a469c55.xhtml)
    中关于 *标签和标记格式* 的部分，*学习地理空间数据*，**GPX** 格式是存储 GPS 路线信息最常见的方式。几乎每个依赖 GPS 数据的程序和设备都可以转换为
    GPX 格式。
- en: For this example, you can download a sample GPX file from: [http://git.io/vl7qi](http://git.io/vl7qi).
    Also, you will need to install a few Python libraries from PyPI.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，您可以从以下链接下载一个示例 GPX 文件：[http://git.io/vl7qi](http://git.io/vl7qi)。此外，您还需要从
    PyPI 安装几个 Python 库。
- en: 'You should simply use `easy_install` or `pip` to install these tools. We will
    also be using a module called `SRTM.py`. This module is a utility for working
    with near-global elevation data collected during the 11-day **Shuttle Radar Topography
    Mission** (**SRTM**) in 2000 by the space shuttle Endeavor. Install the SRTM module
    using `pip`:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 您只需使用 `easy_install` 或 `pip` 安装这些工具。我们还将使用一个名为 `SRTM.py` 的模块。此模块是用于处理 2000 年由航天飞机奋进号在
    11 天的 **航天飞机雷达地形测量任务**（**SRTM**）期间收集的近全球高程数据的实用工具。使用 `pip` 安装 SRTM 模块：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Alternatively, you can also download the zipped file, extract it, and copy the
    `srtm` folder to your Python `site-packages` directory or your working directory: [http://git.io/vl5Ls](http://git.io/vl5Ls).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您也可以下载压缩文件，解压后，将 `srtm` 文件夹复制到您的 Python `site-packages` 目录或工作目录：[http://git.io/vl5Ls](http://git.io/vl5Ls)。
- en: You will also need to register for a free Dark Sky API. This free service provides
    unique tools. It is the only service that provides global, historical weather
    data for nearly any point location with up to 1,000 requests per day for free: [https://darksky.net/dev](https://darksky.net/dev).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 您还需要注册一个免费的 Dark Sky API。这项免费服务提供独特的工具。这是唯一提供全球、历史天气数据的服务，对于几乎任何地点，每天最多可免费请求
    1,000 次：[https://darksky.net/dev](https://darksky.net/dev)。
- en: '**Dark Sky** will provide you with a text key that you insert into a variable
    called `api_key` in the GPX-Reporter program before running it. Finally, as per
    Dark Sky''s terms of service, you''ll need to download a logo image to be inserted
    into the report: [https://raw.githubusercontent.com/GeospatialPython/Learn/master/darksky.png](https://raw.githubusercontent.com/GeospatialPython/Learn/master/darksky.png).'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**Dark Sky** 将为您提供一个文本密钥，您需要在运行 GPX-Reporter 程序之前将其插入到名为 `api_key` 的变量中。最后，根据
    Dark Sky 的服务条款，您需要下载一个标志图像并将其插入到报告中：[https://raw.githubusercontent.com/GeospatialPython/Learn/master/darksky.png](https://raw.githubusercontent.com/GeospatialPython/Learn/master/darksky.png)。'
- en: 'You can review the Dark Sky *Terms of Service* here: [https://darksky.net/dev/docs/terms](https://darksky.net/dev/docs/terms).'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在此处查看 Dark Sky 的 *服务条款*：[https://darksky.net/dev/docs/terms](https://darksky.net/dev/docs/terms)。
- en: 'Now, we''re ready to work through the GPX-Reporter program. Like other scripts
    in this book, this program tries to minimize functions so you can mentally trace
    the program better and modify it with less effort. The following list contains
    the major steps in the program:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们准备好通过 GPX-Reporter 程序进行工作。像本书中的其他脚本一样，此程序试图最小化函数，以便您可以更好地在心理上追踪程序并轻松修改它。以下列表包含程序中的主要步骤：
- en: Setting up the Python `logging` module
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置 Python `logging` 模块
- en: Establishing our helper functions
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 建立我们的辅助函数
- en: Parsing the GPX data file
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解析 GPX 数据文件
- en: Calculating the route bounding box
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算路线边界框
- en: Buffering the bounding box
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 缓冲边界框
- en: Converting the box to meters
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将框转换为米
- en: Downloading the basemap
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载底图
- en: Downloading the elevation data
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载高程数据
- en: Hillshading the elevation data
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对高程数据进行阴影处理
- en: Increasing the hillshade contrast
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 增加阴影对比度
- en: Blending the hillshade and basemap
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 混合阴影和高程图
- en: Drawing the GPX track on a separate image
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在单独的图像上绘制 GPX 轨迹
- en: Blending the track image and basemap
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将轨迹图像和底图混合
- en: Drawing the start and finish points
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 绘制起点和终点
- en: Saving the map image
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存地图图像
- en: Calculating the route mile markers
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算路线里程标记
- en: Building the elevation profile chart
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建高程剖面图
- en: Getting the weather data for the route time period
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取路线时间段内的天气数据
- en: Generating the PDF report
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成 PDF 报告
- en: The next subsection takes you through the first step.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个子节将带您了解第一步。
- en: Initial setup
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初始设置
- en: 'The beginning of the program is `import` statements followed by the Python
    `logging` module. The `logging` module provides a more robust way to track and
    log program status than simple `print` statements. In this part of the program,
    we configure it as shown in the following steps:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 程序的开始是 `import` 语句，然后是 Python `logging` 模块。`logging` 模块提供了一种比简单的 `print` 语句更健壮的方式来跟踪和记录程序状态。在这个程序部分，我们按照以下步骤进行配置：
- en: 'We first need to install all the libraries we need, as shown in the following
    code:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先需要安装所有需要的库，如下面的代码所示：
- en: '[PRE1]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now we can configure the Python `logging` module to tell us what''s going on
    throughout the process, as shown here:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以配置 Python `logging` 模块，以在整个过程中告诉我们发生了什么，如下所示：
- en: '[PRE2]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This logger prints to the console, but with a few simple modifications you can
    have it print to a file, or even a database, just by altering the configuration
    in this section. This module is built into Python and is documented here: [https://docs.python.org/3/howto/logging.html](https://docs.python.org/3/howto/logging.html).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 此日志记录器将输出到控制台，但通过简单的修改，你可以将其输出到文件，甚至是一个数据库，只需更改本节中的配置即可。此模块是 Python 内置的，在此处有文档：[https://docs.python.org/3/howto/logging.html](https://docs.python.org/3/howto/logging.html)。
- en: Next, we have several utility functions that are used several times throughout
    the program.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们有几个在程序中多次使用的实用函数。
- en: Working with utility functions
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用实用函数
- en: 'All of the following functions, except the functions related to time, have
    been used in previous chapters in some form. Let''s see how to use utility functions
    in our example:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 所有以下函数（除与时间相关的函数外）已在之前的章节中以某种形式使用过。让我们看看如何在我们的示例中使用实用函数：
- en: 'First, the `ll2m()` function converts latitude and longitude to meters:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，`ll2m()` 函数将纬度和经度转换为米：
- en: '[PRE3]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `world2pixel()` function converts geospatial coordinates to pixel coordinates
    on our output map image:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`world2pixel()` 函数将地理空间坐标转换为输出地图图像上的像素坐标：'
- en: '[PRE4]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then, we have `get_utc_epoch()` and `get_local_time()` to convert the UTC time
    stored in the GPX file to local time along the route:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们有 `get_utc_epoch()` 和 `get_local_time()` 函数将 GPX 文件中存储的 UTC 时间转换为沿路线的本地时间：
- en: '[PRE5]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now we have a haversine distance function and our simple `wms` function to
    retrieve map images:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们有一个 haversine 距离函数和我们的简单 `wms` 函数来检索地图图像：
- en: '[PRE6]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The `wms()` function retrieves map images with the following code:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`wms()` 函数使用以下代码检索地图图像：'
- en: '[PRE7]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next, we have an `exif()` function to extract the metadata from the photo:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们有一个 `exif()` 函数用于从照片中提取元数据：
- en: '[PRE8]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Then we have a `dms2dd()` function to convert degrees/minutes/seconds coordinates
    to decimal degrees because that''s how the photo coordinates are stored:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们有一个 `dms2dd()` 函数将度/分/秒坐标转换为十进制度，因为这是照片坐标的存储方式：
- en: '[PRE9]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'And finally, we have a `gps()` function to extract the coordinates from the
    photo metadata:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们有一个 `gps()` 函数用于从照片元数据中提取坐标：
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Next, we have our program variables. We will be accessing an **OpenStreetMap
    WMS** service provided for free by a company named **Mundalis** as well as the
    SRTM data provided by NASA.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们有我们的程序变量。我们将访问由名为 **Mundalis** 的公司免费提供的 **OpenStreetMap WMS** 服务以及由 NASA
    提供的 SRTM 数据。
- en: 'We access the WMS services in this book using Python''s `urllib` library for
    simplicity, but if you plan to use OGC web services frequently, you should use
    the Python package OWSLib available through PyPI: [https://pypi.python.org/pypi/OWSLib](https://pypi.python.org/pypi/OWSLib).'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们为了简便起见使用 Python 的 `urllib` 库来访问 WMS 服务，但如果你计划频繁使用 OGC 网络服务，你应该使用通过 PyPI
    可用的 Python 包 OWSLib：[https://pypi.python.org/pypi/OWSLib](https://pypi.python.org/pypi/OWSLib)。
- en: 'Now let''s perform the followings steps to set up the WMS web service:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们执行以下步骤来设置 WMS 网络服务：
- en: 'We will output several intermediate products and images. These variables are
    used in those steps. The `route.gpx` file is defined in this section as the `gpx` variable.
    First, we set up some conversion constants for degrees to radians conversion and
    back with the following code:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将输出几个中间产品和图像。这些变量在这些步骤中使用。`route.gpx` 文件在本节中定义为 `gpx` 变量。首先，我们设置一些用于度到弧度转换以及反向转换的转换常量，如下所示：
- en: '[PRE11]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Next, we set up the name of our `.gpx` file as follows:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们设置 `.gpx` 文件的名称如下：
- en: '[PRE12]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now, we begin setting up the WMS web service, which will retrieve the map:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们开始设置 WMS 网络服务，它将检索地图：
- en: '[PRE13]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Next, we set up our hillshade parameters, which will determine the angle and
    direction of our artificial sun:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们设置我们的阴影参数，这将确定人工太阳的角度和方向：
- en: '[PRE14]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Then we set up the `no_data` value where there is no elevation information:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们设置没有海拔信息的地方的 `no_data` 值：
- en: '[PRE15]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Next, we set up the name of our output image as follows:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们设置输出图像的名称如下：
- en: '[PRE16]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now we create the colors for our minimum and maximum elevation values with
    the following code:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们使用以下代码创建我们最小和最大海拔值对应的颜色：
- en: '[PRE17]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Then we set up our output image size, as follows:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们设置我们的输出图像大小，如下所示：
- en: '[PRE18]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Now that we understand how the functions work, let's parse the GPX.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了函数的工作原理，让我们解析 GPX。
- en: Parsing the GPX
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解析 GPX
- en: Now, we'll parse the GPX file, which is just XML, using the `built-in xml.dom.minidom` module.
    We'll extract latitude, longitude, elevation, and timestamps. We'll store them
    in a list for later use. The timestamps are converted to `struct_time` objects
    using Python's `time` module, which makes it easier to work with.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用`内置的xml.dom.minidom`模块解析GPX文件，它只是XML。我们将提取纬度、经度、海拔和时间戳，并将它们存储在列表中以供以后使用。时间戳使用Python的`time`模块转换为`struct_time`对象，这使得处理更加容易。
- en: 'The following steps need to be performed for parsing:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 解析需要执行以下步骤：
- en: 'First, we parse the `gpx` file using the `minidom` module:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们使用`minidom`模块解析`gpx`文件：
- en: '[PRE19]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Next, we get all of the `"trkpt"` tags that contain the elevation information:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们获取所有包含海拔信息的`"trkpt"`标签：
- en: '[PRE20]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now, we set up the lists to store our parsed location and elevation values:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们设置列表以存储我们解析的位置和海拔值：
- en: '[PRE21]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Then, we loop through the GPS entries in the GPX and parse the values:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们遍历GPX中的GPS条目并解析值：
- en: '[PRE22]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The timestamp requires a little bit of extra work because we have to convert
    from GMT time to local time:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 时间戳需要一点额外的工作，因为我们必须将GMT时间转换为本地时间：
- en: '[PRE23]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: After we parse the GPX, we need the bounding box of the route to download data
    from other geospatial services.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 解析GPX后，我们需要路线的边界框以从其他地理空间服务下载数据。
- en: Getting the bounding box
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取边界框
- en: 'When we download data, we want the dataset to cover more area than the route
    so the map is not cropped too closely around the edges of the route. So we''ll
    buffer the bounding box by 20% on each side. Finally, we''ll need the data in
    Eastings and Northings to work with the WMS service. Eastings and Northings are
    the *x* and *y* coordinates of points in the Cartesian coordinate system in meters.
    They are commonly used in the UTM coordinate system:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们下载数据时，我们希望数据集覆盖的区域比路线更广，这样地图就不会在路线的边缘裁剪得太紧。因此，我们将边界框的每侧缓冲20%。最后，我们需要以东西和南北方向的数据来与WMS服务一起工作。东西和南北是笛卡尔坐标系中点的*x*和*y*坐标，以米为单位。它们在UTM坐标系中常用：
- en: 'First, we get the extents from our coordinate lists as follows:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们按照以下方式从坐标列表中获取范围：
- en: '[PRE24]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Next, we buffer the bounding box to ensure the track isn''t taken close to
    the edge:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们缓冲边界框以确保轨迹不会靠近边缘：
- en: '[PRE25]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Finally, we set up our bounding box in a variable and convert our coordinates
    to meters, which the web service requires:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们在变量中设置我们的边界框并将坐标转换为米，这是网络服务所要求的：
- en: '[PRE26]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: With this, we will now download our map and elevation images.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，我们现在将下载我们的地图和海拔图像。
- en: Downloading map and elevation images
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载地图和海拔图像
- en: 'We''ll download the OSM basemap first as our basemap, which has streets and
    labels:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先下载作为底图的OSM底图，它包含街道和标签：
- en: 'First, we''ll download the OSM basemap using `log.info`:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将使用`log.info`下载OSM底图：
- en: '[PRE27]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'This section will produce an intermediate image as shown in the following screenshot:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将生成如下截图所示的中间图像：
- en: '![](img/92c897fd-a697-4824-bf2c-d9d6a46ee256.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/92c897fd-a697-4824-bf2c-d9d6a46ee256.png)'
- en: 'Next, we''ll download some elevation data from the **SRTM** dataset. SRTM is
    nearly global and provides a 30-90 m resolution. The `SRTM.py` Python module makes
    working with this data easy. `SRTM.py` downloads the data and sets it needs to
    make a request. Therefore, if you download data from different areas, you may
    need to clean out the cache located in your home directory (`~/.srtm`). This part
    of the script can also take up to 2-3 minutes to complete, depending on your computer
    and internet connection speeds:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将从**SRTM**数据集中下载一些海拔数据。SRTM几乎覆盖全球，提供30-90米的分辨率。`SRTM.py` Python模块使得处理这些数据变得容易。`SRTM.py`下载数据并设置请求。因此，如果您从不同地区下载数据，您可能需要清理位于您家目录中的缓存（`~/.srtm`）。这部分脚本可能需要2-3分钟才能完成，具体取决于您的计算机和互联网连接速度：
- en: '[PRE28]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'This portion of the script also outputs an intermediate elevation image, as
    shown in the following screenshot:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本的这一部分也会输出中间海拔图像，如下截图所示：
- en: '![](img/2aa4c75f-0071-4a70-8f9d-44bff5d3ca43.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2aa4c75f-0071-4a70-8f9d-44bff5d3ca43.png)'
- en: Now that we have our elevation image, we can turn it into a hillshade.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了海拔图像，我们可以将其转换为阴影图。
- en: Creating the hillshade
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建阴影图
- en: 'We can run this data through the same **hillshade** algorithm used in *Creating
    a shaded-relief* section in [Chapter 7](964b7276-1604-4df5-b549-6d8f61d5e9cb.xhtml),
    *Python and Elevation Data. *For this, let''s follow these steps:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将这些数据通过与[第7章](964b7276-1604-4df5-b549-6d8f61d5e9cb.xhtml)中*创建阴影图*部分相同的**阴影图**算法运行。为此，让我们遵循以下步骤：
- en: 'First, we open our elevation image and read it into a `numpy` array:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们打开我们的高程图像并将其读入一个`numpy`数组：
- en: '[PRE29]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now we set up our processing windows to move through the grid and analyze it
    in small sections for efficiency:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们设置我们的处理窗口以通过网格移动并高效地分析小部分：
- en: '[PRE30]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Then, we break the elevation image into windows as follows:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将高程图像分割成如下窗口：
- en: '[PRE31]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'We will create arrays for our processing windows as follows:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将创建用于处理的窗口数组如下：
- en: '[PRE32]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Finally, we can process them in a single pass thanks to `numpy`:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，由于`numpy`，我们可以一次性处理它们：
- en: '[PRE33]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Now that we have our hillshade layer, we can begin creating maps.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了等高线层，我们可以开始创建地图。
- en: Creating maps
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建地图
- en: 'We have the data we need to begin building the map for our report. Our approach
    will be the following:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经有了开始构建报告地图所需的数据。我们的方法如下：
- en: Enhancing the elevation and basemap images with filters
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用过滤器增强高程和底图图像
- en: Blending the images together to provide a hillshaded OSM map
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将图像混合在一起以提供等高线阴影OSM地图
- en: Creating a translucent layer to draw the street route
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个半透明层来绘制街道路线
- en: Blending the route layer with the hillshaded map
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将路线层与等高线阴影地图混合
- en: 'These tasks will all be accomplished using the PIL `Image` and `ImageDraw`
    modules, as shown in the following steps:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这些任务都将使用PIL `Image`和`ImageDraw`模块完成，如下所示：
- en: 'First, we convert our shaded relief `numpy` array back to an image and smooth
    it:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将阴影高程`numpy`数组转换回图像并平滑它：
- en: '[PRE34]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Now we''ll increase the contrast in the image to make it stand out more:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将增加图像的对比度，使其更加突出：
- en: '[PRE35]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Next, we crop the map image to the same size as our elevation image:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将地图图像裁剪到与高程图像相同的大小：
- en: '[PRE36]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Then we increase the contrast on the map image as well and blend it with the
    hillshade image:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们增加地图图像的对比度，并将其与等高线图像混合：
- en: '[PRE37]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Now we''re ready to draw the GPS tracks on our blended map by first converting
    our points to pixels:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们准备在混合地图上绘制GPS轨迹，首先将我们的点转换为像素：
- en: '[PRE38]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'We also need to subtract the buffer from the edge buffer from the tracks image
    we are about to create:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要从即将创建的轨迹图像的边缘缓冲区中减去缓冲区：
- en: '[PRE39]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Next, we create a transparent image and draw our track as a red line:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们创建一个透明图像，并将我们的轨迹作为红线绘制：
- en: '[PRE40]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Now we can paste the track on our image with the following code:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以使用以下代码将轨迹粘贴到我们的图像上：
- en: '[PRE41]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Now we''ll draw a starting point on the route like so:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将在路线上绘制一个起点，如下所示：
- en: '[PRE42]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Following is the code snippet for the ending point:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下面的代码片段是终点：
- en: '[PRE43]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Now that we have our track drawn, we're ready to place our geotagged photo.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经绘制了轨迹，我们准备放置我们的地理标记照片。
- en: Locating the photo
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定位照片
- en: 'We''ll use a photo taken with a cell phone that adds GPS location coordinates.
    You can download it from:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用带有GPS位置坐标的手机照片。你可以从以下链接下载：
- en: '[https://raw.githubusercontent.com/GeospatialPython/Learn/master/RoutePhoto.jpg](https://raw.githubusercontent.com/GeospatialPython/Learn/master/RoutePhoto.jpg).'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://raw.githubusercontent.com/GeospatialPython/Learn/master/RoutePhoto.jpg](https://raw.githubusercontent.com/GeospatialPython/Learn/master/RoutePhoto.jpg)。'
- en: 'Place the image in a directory named `photos` at the same level as the script.
    We''ll only use one photo but the script can handle as man images as you want.
    We''ll draw and place a photo icon on the map and then save the completed basemap,
    as shown in the following steps:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 将图像放置在与脚本同一级别的名为`photos`的目录中。我们只会使用一张照片，但脚本可以处理你想要的任意多张图片。我们将在地图上绘制并放置一个照片图标，然后按照以下步骤保存完成的底图：
- en: 'First, we get a list of images with the following code:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们使用以下代码获取图像列表：
- en: '[PRE44]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Next, we loop through each image and grab its GPS information:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们遍历每个图像并获取其GPS信息：
- en: '[PRE45]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Then, we parse the location info using our GPS function as follows:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们使用我们的GPS函数如下解析位置信息：
- en: '[PRE46]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Now, we can convert the photo coordinates to image pixel coordinates:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以将照片坐标转换为图像像素坐标：
- en: '[PRE47]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Then we''ll draw an icon for the location of the photo with the following code:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将使用以下代码为照片位置绘制一个图标：
- en: '[PRE48]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'And finally, we''ll save our map like so:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将以如下方式保存我们的地图：
- en: '[PRE49]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'While not saved to the filesystem, the hillshaded elevation looks like the
    following:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管没有保存到文件系统，但等高线高程看起来如下：
- en: '![](img/141f8503-fd68-4964-8328-5bba99f03a99.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/141f8503-fd68-4964-8328-5bba99f03a99.png)'
- en: 'The blended topographic map looks like the following screenshot:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 混合地形地图看起来如下截图：
- en: '![](img/11b32a49-185b-4b05-8516-0f64e779769f.png)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/11b32a49-185b-4b05-8516-0f64e779769f.png)'
- en: While hillshade mapping gives us an idea of the elevation, it doesn't give us
    any quantitative data. To get more detailed, we'll create a simple elevation chart.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然阴影映射可以给我们一个关于海拔的印象，但它不提供任何定量数据。为了更详细，我们将创建一个简单的高程图表。
- en: Measuring elevation
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测量海拔
- en: 'Using the excellent Google Chart API, we can quickly build a nice elevation
    profile chart showing how the elevation changes across the route:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 使用出色的Google Chart API，我们可以快速构建一个很好的高程剖面图表，显示海拔在路线上的变化：
- en: 'First, we''ll create the `chart` object for our elevation profile:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将创建用于高程剖面的`chart`对象：
- en: '[PRE50]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Now, we need to create a line for our minimum value like so:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要创建一个表示最小值的线，如下所示：
- en: '[PRE51]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Next, we can fill in our elevation profile as follows:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们可以按照以下方式填写我们的高程剖面：
- en: '[PRE52]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Then we can set up the elevation labels as follows and assign them to an axis:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们可以按照以下方式设置高程标签并将它们分配给一个轴：
- en: '[PRE53]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Next, we can label the axis itself with the following code:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们可以使用以下代码为轴本身添加标签：
- en: '[PRE54]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Now we can calculate the distance between the track points:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以计算轨迹点之间的距离：
- en: '[PRE55]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: We have the elevation profile, but we need to add the distance markers along
    the *x *axis so we know where along the route the profile changed.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经有了高程剖面，但我们需要在*x*轴上添加距离标记，以便我们知道剖面在路线上的变化位置。
- en: Measuring distance
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测量距离
- en: 'In order to understand the elevation data chart, we need reference points along
    the *x *axis to help us determine the elevation along the route. We will calculate
    the mile splits along the route and place those at the appropriate location on
    the x axis of our charts. Let''s have a look at the following steps:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解海拔数据图表，我们需要*x*轴上的参考点来帮助我们确定路线上的海拔。我们将计算路线上的英里分割，并将它们放置在图表x轴的适当位置。让我们看看以下步骤：
- en: 'First, we locate the mile markers along the axis as follows:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们按照以下方式在轴上定位英里标记：
- en: '[PRE56]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Next, we set up labels for the mile markers:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们设置英里标记的标签：
- en: '[PRE57]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Now we can label the mile markers as follows:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以按照以下方式为英里标记添加标签：
- en: '[PRE58]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Our chart should now look like the following screenshot:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的图表现在应该看起来像以下截图：
- en: '![](img/242e1586-6859-4016-887f-be8b58640ae8.png)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![](img/242e1586-6859-4016-887f-be8b58640ae8.png)'
- en: Our first chart is complete. Now, let's look at weather data along the route.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一张图表已经完成。现在，让我们看看路线上的天气数据。
- en: Retrieving weather data
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取天气数据
- en: 'In this section, we will retrieve our final data element: the weather. As mentioned
    earlier, we will use the Dark Sky service, which allows us to gather historical
    weather reports for any place in the world. The weather API is REST and JSON-based,
    so we''ll use the `urllib` module to request data and the `json` library to parse
    it. Of note in this section is that we cache the data locally, so you can run
    the script offline for testing if need be. Early on in this section is where you
    place your Dark Sky API key that is flagged by the `YOUR KEY HERE` text. Let''s
    have a look at the following steps:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将检索我们的最终数据元素：天气。如前所述，我们将使用Dark Sky服务，该服务允许我们收集世界上任何地方的天气历史报告。天气API是基于REST和JSON的，因此我们将使用`urllib`模块来请求数据，并使用`json`库来解析它。在本节中值得注意的是，我们将在本地缓存数据，这样您就可以在需要时离线运行脚本进行测试。在本节早期，您需要放置您的Dark
    Sky API密钥，该密钥由`YOUR KEY HERE`文本标记。让我们看看以下步骤：
- en: 'First, we need the center of our area of interest:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要我们感兴趣区域的中心：
- en: '[PRE59]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Now, we set up the free Dark API key as follows so we can retrieve weather
    data:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们按照以下方式设置免费的Dark API密钥，以便我们可以检索天气数据：
- en: '[PRE60]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Then, we grab the latest timestamp from our data that we''ll use for our weather
    query:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们获取我们用于天气查询的数据中的最新时间戳：
- en: '[PRE61]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Now we''re ready to do our weather data query as follows:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经准备好按照以下方式执行我们的天气数据查询：
- en: '[PRE62]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'We''ll cache the weather data like so just in case we want to look at it later:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将像这样缓存天气数据，以防我们以后想查看它：
- en: '[PRE63]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Then we parse the weather JSON data as follows:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们按照以下方式解析天气JSON数据：
- en: '[PRE64]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'All we need is the weather summary, which is the first item in the list:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要的只是天气摘要，这是列表中的第一项：
- en: '[PRE65]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Now, we''ll get the specific weather attributes as follows:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将按照以下方式获取特定的天气属性：
- en: '[PRE66]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Now that we have the weather data stored in variables, we can complete the
    final step: adding it all to a PDF report.'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经将天气数据存储在变量中，我们可以完成最后一步：将其全部添加到PDF报告中。
- en: The `fpdf` library has no dependencies except PIL in some cases. For our purposes,
    it will work quite well. We are going to proceed down the page and add the elements.
    `fpdf.ln()` separates rows, while `fpdf.cells` contains text and allows for more
    precise layouts.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，`fpdf`库除了PIL没有其他依赖。就我们的目的而言，它将工作得相当好。我们将继续向下添加页面元素。`fpdf.ln()`用于分隔行，而`fpdf.cells`包含文本，并允许更精确的布局。
- en: 'We''re finally ready to create our PDF report with the following steps:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 我们终于准备好按照以下步骤创建我们的PDF报告：
- en: 'First, we set up our `pdf` object as follows:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们按照以下方式设置我们的`pdf`对象：
- en: '[PRE67]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Then, we''ll add a page for our report and set our font preferences:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将为我们的报告添加一个页面并设置我们的字体偏好：
- en: '[PRE68]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'We''ll create a title for our report with the following code:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用以下代码为我们的报告创建一个标题：
- en: '[PRE69]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Now, we can add the route map like so:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以添加路线图，如下所示：
- en: '[PRE70]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Next, we add the elevation chart as follows:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们添加如下所示的高程图：
- en: '[PRE71]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Then we can write the weather data summary with the following code:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们可以使用以下代码编写天气数据摘要：
- en: '[PRE72]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'The Dark Sky terms require us to add a logo to our report, crediting the excellent
    data source:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 暗黑天空条款要求我们在报告中添加一个标志，以感谢优秀的数据来源：
- en: '[PRE73]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Now we can add the geolocated image with the following code:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以使用以下代码添加地理定位的图片：
- en: '[PRE74]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'And finally, we can save the report and view it:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们可以保存报告并查看它：
- en: '[PRE75]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'You should have a PDF document in your working directory called `report.pdf` containing
    your finished product. It should look like the image shown in the following screenshot:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该在你的工作目录中有一个名为`report.pdf`的PDF文档，其中包含你的成品。它应该看起来像以下截图所示的图片：
- en: '![](img/ccd637ac-85cb-4d2b-937f-c9808a776901.png)'
  id: totrans-260
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ccd637ac-85cb-4d2b-937f-c9808a776901.png)'
- en: With this, we have used all the techniqueswe've learned throughout this book
    and built a GPS reporting tool.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，我们已经使用了本书中学到的所有技术，并构建了一个GPS报告工具。
- en: Summary
  id: totrans-262
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Congratulations! In this book, you pulled together the most essential tools
    and skills needed to be a modern geospatial analyst. Whether you use geospatial
    data occasionally or use it all the time, you will be better equipped to make
    the most of geospatial analysis. This book focuses on using open source tools
    almost entirely found within the PyPI directory for ease of installation and integration.
    But even if you are using Python as a driver for a commercial GIS package or a
    popular library such as GDAL, the ability to test out new concepts in pure Python
    will always come in handy.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！在这本书中，你汇集了成为一名现代地理空间分析师所需的最基本工具和技能。无论你偶尔使用地理空间数据还是一直使用它，你都将更好地利用地理空间分析。本书主要关注使用开源工具，这些工具几乎都可以在PyPI目录中找到，以便于安装和集成。但即使你使用Python作为商业GIS软件包或GDAL等流行库的驱动程序，纯Python测试新概念的能力也总是很有用的。
- en: Further reading
  id: totrans-264
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Python provides a rich set of libraries for visualizing data. One of the most
    prominent is **Matplotlib**, which can produce numerous types of charts and maps
    and save them to PDF. Packt has several books on Matplotlib, including the *Matplotlib
    30 Cookbook*: [https://www.packtpub.com/big-data-and-business-intelligence/matplotlib-30-cookbook](https://www.packtpub.com/big-data-and-business-intelligence/matplotlib-30-cookbook).'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: Python提供了一套丰富的库用于数据可视化。其中最突出的是**Matplotlib**，它可以生成多种类型的图表和地图，并将它们保存到PDF中。Packt有几本关于Matplotlib的书，包括《Matplotlib
    30个食谱》：[https://www.packtpub.com/big-data-and-business-intelligence/matplotlib-30-cookbook](https://www.packtpub.com/big-data-and-business-intelligence/matplotlib-30-cookbook)。
