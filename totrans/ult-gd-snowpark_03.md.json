["```py\n    SELECT distinct package_name\n    FROM information_schema.packages\n    WHERE language = 'python';\n    ```", "```py\n    SELECT *\n    FROM information_schema.packages\n    WHERE (package_name='numpy' AND language = 'python');\n    ```", "```py\n    CALL DATABASE.SCHEMA.MY_STORED_PROCEDURE();\n    ```", "```py\npython –-version\n```", "```py\nfrom platform import python_version\nprint(python_version())\n```", "```py\nconda create --name def_gui_3.8_env --override-channels --channel https://repo.anaconda.com/pkgs/snowflake python=3.8\n```", "```py\nconda activate def_gui_3.8_env\n```", "```py\nconda install --channel https://repo.anaconda.com/pkgs/snowflake Snowflake-snowpark-python\n```", "```py\nconda install --channel https://repo.anaconda.com/pkgs/snowflake numpy pandas\n```", "```py\n    conda activate def_gui_3.8_env\n    ```", "```py\n    jupyter notebook\n    ```", "```py\nfrom snowflake.snowpark.functions import avg\n```", "```py\nfrom snowflake.snowpark import Session\n```", "```py\nconnection_parameters = {\n    \"account\": \"<your snowflake account identifier>\",\n    \"user\": \"<your snowflake username>\",\n    \"password\": \"<your snowflake password>\",\n    \"role\": \"<your snowflake role>\", # optional\n    \"warehouse\": \"<your snowflake warehouse>\",  # optional\n    \"database\": \"<your snowflake database>\",  # optional\n    \"schema\": \"<your snowflake schema>\" # optional\n}\n```", "```py\nsession = Session.builder.configs(connection_parameters).create()\n```", "```py\nprint(\"Session Current Account:\", session.get_current_account())\n```", "```py\nsession.close()\n```", "```py\nfrom cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives import serialization\nprivate_key_plain_text = '''-----BEGIN PRIVATE KEY-----\n< your private key >\n-----END PRIVATE KEY-----'''\nprivate_key_passphrase = '<your private key passphase>'\n```", "```py\nprivate_key_encoded = private_key_plain_text.encode()\nprivate_key_passphrase_encoded = private_key_passphrase.encode()\nprivate_key_loaded = serialization.load_pem_private_key(\n    private_key_encoded,\n    password = private_key_passphrase_encoded,\n    backend = default_backend()\n)\nprivate_key_serialized = private_key_loaded.private_bytes(\n    encoding = serialization.Encoding.DER,\n    format = serialization.PrivateFormat.PKCS8,\n    encryption_algorithm = serialization.NoEncryption()\n)\n```", "```py\nconnection_parameters = {\n    \"account\": \"<your snowflake account identifier>\",\n    \"user\": \"< your snowflake username>\",\n    \"private_key\": private_key_serialized,\n    \"warehouse\": \"<your snowflake warehouse>\",\n    \"database\": \"<your snowflake database>\",\n    \"schema\": \"<your snowflake schema>\"\n}\nsession = Session.builder.configs(connection_parameters).create()\n```", "```py\nsession.sql('CREATE OR REPLACE TABLE SAMPLE_EMPLOYEE_DATA (id INT,name VARCHAR, age INT, email VARCHAR, city VARCHAR,country VARCHAR)').collect()\n```", "```py\nsession.sql(\"\"\"\n    INSERT INTO SAMPLE_EMPLOYEE_DATA VALUES\n    (1,'John Doe',25,'johndoe@example.com','New York','USA'),\n    (2,'Jane Smith',30,'janesmith@example.com','Los Angeles','USA'),\n    (3,'Michael Johnson',35,'michaeljohnson@example.com','London', \n       'UK'),\n    (4,'Sarah Williams',28,'sarahwilliams@example.com','Leeds', \n       'UK'),\n    (5,'David Brown',32,'davidbrown@example.com','Tokyo','Japan'),\n    (6,'Emily Davis',29,'emilydavis@example.com','Sydney',\n       'Australia'),\n    (7,'James Miller',27,'jamesmiller@example.com','Dallas','USA'),\n    (8,'Emma Wilson',33,'emmawilson@example.com','Berlin','Germany'),\n    (9,'Alexander Taylor',31,'alexandertaylor@example.com',\n       'Rome','Italy'),\n    (10,'Olivia Anderson',26,'oliviaanderson@example.com',\n        'Melbourne','Australia')\n\"\"\").collect()\n```", "```py\nsession.sql(\"SELECT count(*) FROM SAMPLE_EMPLOYEE_DATA\").collect()\n```", "```py\nfrom snowflake.snowpark.functions import col\ndf_subset_row = session.table(\n    \"SAMPLE_EMPLOYEE_DATA\").filter(col(\"id\") == 1)\n```", "```py\ndf_subset_row.show()\n```", "```py\ndef <main Python function name>(<arguments>):\n    return <function output>\nfrom snowflake.snowpark.types \\\n    import <specific Snowpark DataType object>\nsnowpark_session.add_packages(\n    'List of native packages in Anaconda Channel')\nsnowpark_session.add_import('Path to Local File')\nsnowpark_session.udf.register(\n    func = <Main Function Name>\n  , return_type = <Return Type of Snowpark DataType object >\n  , input_types = <[Input Types of Snowflake DataType object]>\n  , is_permanent = True\n  , name = '<UDF name>'\n  , replace = True\n  , stage_location = '@<UDF stage name>'\n)\n```", "```py\ndef last_name_finder(input_name:str):\n    last_name = input_name.split()[1]\n    return last_name\nfrom snowflake.snowpark.types \\\n    import StringType,IntegerType,ArrayType\ntest = session.udf.register(\n    func = last_name_finder\n  , return_type = StringType()\n  , input_types = [StringType()]\n  , is_permanent = True\n  , name = 'LAST_NAME_FINDER'\n  , replace = True\n  , stage_location = '@MY_STAGE'\n)\n```", "```py\nsession.sql('''SELECT\n    NAME,\n    LAST_NAME_FINDER(NAME) AS LAST_NAME\n    FROM SAMPLE_EMPLOYEE_DATA\n''').show()\n```", "```py\nfrom snowflake.snowpark.functions import col, call_udf\ndf = session.table(\"SAMPLE_EMPLOYEE_DATA\")\ndf.with_column(\n    \"last_name\",call_udf(\"LAST_NAME_FINDER\", col(\"name\"))).show()\n```", "```py\n# Define Python class locally\n'''\nDefine main Python class which is\nleveraged to process partitions.\nExecutes in the following order:\n- __init__ | Executes once per partition\n- process | Executes once per input row within the partition\n- end_partition | Executes once per partition\n'''\nclass <name of main Python class> :\n    '''\n    Optional __init__ method to\n    execute logic for a partition\n    before breaking out into rows\n    '''\n    def __init__(self) :\n```", "```py\n'''\nMethod to process each input row\nwithin a partition, returning a\ntabular value as tuples.\n'''\ndef process(self, <arguments>) :\n    '''\n    Enter Python code here that\n    executes for each input row.\n    This likely ends with a set of yield\n    clauses that output tuples,\n    for example:\n    '''\n    yield (<field_1_value_1>, <field_2_value_1>, ...)\n    yield (<field_1_value_2>, <field_2_value_2>, ...)\n    '''\n    Alternatively, this may end with\n    a single return clause containing\n    an iterable of tuples, for example:\n    '''\n    return [\n        (<field_1_value_1>, <field_2_value_1>, ...)\n      , (<field_1_value_2>, <field_2_value_2>, ...)\n    ]\n```", "```py\n'''\nOptional end_partition method to\nexecute logic for a partition\nafter processing all input rows\n'''\ndef end_partition(self) :\n    # Python code at the partition level\n    '''\n    This ends with a set of yield\n    clauses that output tuples,\n    for example:\n    '''\n    yield (<field_1_value_1>, <field_2_value_1>, ...)\n    yield (<field_1_value_2>, <field_2_value_2>, ...)\n    '''\n    Alternatively, this ends with\n    a single return clause containing\n    an iterable of tuples, for example:\n    '''\n    return [\n        (<field_1_value_1>, <field_2_value_1>, ...)\n      , (<field_1_value_2>, <field_2_value_2>, ...)\n    ]\n```", "```py\nfrom snowflake.snowpark.types import StructType, StructField\nfrom snowflake.snowpark.types \\\n    import <specific Snowpark DataType objects>\nsnowpark_session.add_packages(\n    '<list of required packages natively available in Snowflake( \n        i.e. included in Anaconda Snowpark channel)>')\nsnowpark_session.add_import('<path\\\\to\\\\local\\\\directory\\\\or\\\\file>')\nsnowpark_session.udtf.register(\n    handler = <name of main Python class>\n  , output_schema = StructType(\n        <list of StructField objects with specific field \\\n        name and Snowpark DataType objects>)\n  , input_types = <list of input DataType() \\\n        objects for input parameters>\n  , is_permanent = True\n  , name = '<UDTF name>'\n  , replace = True\n  , stage_location = '@<UDTF stage name>'\n)\n```", "```py\nclass CalculateAverage:\n    def __init__(self) :\n        self._values = []\n    def process(self, input_measure: int) :\n        self._values.append(input_measure)\n    def end_partition(self) :\n        values_list = self._values\n        average = sum(values_list) / len(values_list)\n        yield(average ,)\n```", "```py\nfrom snowflake.snowpark.types import StructType, StructField\nfrom snowflake.snowpark.types \\\n    import FloatType,IntegerType,StringType\noutput_schema = StructType([\n    StructField(\"Avg_Age\", FloatType())\n])\nsession.udtf.register(\n    handler = CalculateAverage\n  , output_schema = output_schema\n  , input_types = [IntegerType()]\n  , is_permanent = True\n  , name = 'AVERAGE_AGE'\n  , replace = True\n  , stage_location = '@MY_STAGE'\n)\n```", "```py\nsession.sql('''\n    SELECT\n        COUNTRY, Avg_Age\n    FROM\n        SAMPLE_EMPLOYEE_DATA,\n        table(AVERAGE_AGE(AGE) over (partition by COUNTRY))\n''').show()\n```", "```py\nimport pandas as pd\nfrom snowflake.snowpark.functions import pandas_udf\nfrom snowflake.snowpark.types \\\n    import IntegerType, PandasSeriesType,StringType\n@pandas_udf(\n    name='column_adder'\n  , stage_location = '@MY_STAGE'\n  , input_types=[PandasSeriesType(StringType()), \\\n        PandasSeriesType(StringType())]\n  , return_type=PandasSeriesType(StringType())\n  , is_permanent=True\n  , replace=True)\ndef column_adder(\n    column1: pd.Series, column2: pd.Series) -> pd.Series:\n    return column1 + \",\" + column2\ndf = session.table(\"SAMPLE_EMPLOYEE_DATA\")\ndf.withColumn('City_Country', column_adder(col('CITY'), \\\n    col('COUNTRY'))).show()\n```", "```py\n# Define Python function locally\ndef <Python Function Name>(\n    snowpark_session: snowflake.snowpark.Session, <arguments>):\n    return <Output>\n# Imports Required For Stored Procedure\nfrom snowflake.snowpark.types \\\n    import <specific Snowpark DataType object>\n# Optional: Import additional packages or files\nsnowpark_session.add_packages(\n    'List of native packages in Anaconda Channel')\nsnowpark_session.add_import('Path to Local File')\n# Upload Stored Procedure to Snowflake\nsnowpark_session.sproc.register(\n    func = <Function name to register>\n  , return_type = <Return Type of Snowpark DataType object>\n  , input_types = <[Input Types of Snowflake DataType object]>\n  , is_permanent = True\n  , name = '<Stored Procedure name>'\n  , replace = True\n  , stage_location = '@<Stored Procedure stage name>'\n    <optional: , execute_as = 'CALLER'>\n)\n```", "```py\ndef subset_table(snowpark_session:Session):\n    df = snowpark_session.table(\n        'SAMPLE_EMPLOYEE_DATA').select(\"NAME\",\"AGE\")\n    return df.collect()\nfrom snowflake.snowpark.types import StringType\nsession.add_packages('snowflake-snowpark-python')\nsession.sproc.register(\n    func = subset_table\n  , return_type = StringType()\n  , input_types = []\n  , is_permanent = True\n  , name = 'SPROC_SUBSET_TABLE'\n  , replace = True\n  , stage_location = '@MY_STAGE'\n)\n```", "```py\nsession.sql(''' CALL SPROC_SUBSET_TABLE()''').show()\n```", "```py\n    gh repo create <new-repo-name> --template=\"Snowflake-Labs/snowpark-python-template\"\n    ```", "```py\n    SNOWSQL_ACCOUNT=<replace with your account identifier>\n    SNOWSQL_USER=<replace with your username>\n    SNOWSQL_PWD=<replace with your password>\n    SNOWSQL_DATABASE=<replace with your database>\n    SNOWSQL_SCHEMA=<replace with your schema>\n    SNOWSQL_WAREHOUSE=<replace with your warehouse>\n    ```", "```py\n    conda env create -f environment.yml\n    snowpark that can be used for development.\n    ```", "```py\n    python src/procs/app.py\n    ```"]