- en: 'Chapter 5: Variational Quantum Eigensolver (VQE) Algorithm'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章：变分量子本征求解器（VQE）算法
- en: “Not only is the Universe stranger than we think, it is stranger than we can
    think.”
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: “宇宙不仅比我们想象的更奇怪，而且比我们能想象的更奇怪。”
- en: – Werner Heisenberg
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: – 韦纳·海森堡
- en: '![](img/B18268_Figure_5.1.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18268_Figure_5.1.jpg)'
- en: Figure 5.1 – Steepest descent line on a potential energy surface (PES) [authors]
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.1 – 潜在能面（PES）上的最速下降线 [作者]
- en: We introduced the history behind the use of the variational method in *Section
    1.1, Understanding the history of quantum chemistry and mechanics*. It is a mathematical
    construct that can be used computationally. Within the context of quantum chemistry,
    the variational method is used to determine the lowest energy associated with
    an eigenvalue, either the ground state or excited states.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在第1.1节*理解量子化学和力学的历史*中介绍了变分法使用的历史背景。它是一种可以用于计算的数学结构。在量子化学的背景下，变分法用于确定与特征值相关的最低能量，无论是基态还是激发态。
- en: The **Variational Quantum Eigensolver** (**VQE**) algorithm was introduced in
    2014 [VQE_1] and is defined using quantum-based hardware. It is the first of several
    **Variational Quantum Algorithms** (**VQAs**) that are currently being explored
    by the scientific industry.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**变分量子本征求解器**（**VQE**）算法于2014年提出[VQE_1]，并使用基于量子硬件进行定义。它是目前科学工业正在探索的几个**变分量子算法**（**VQAs**）中的第一个。'
- en: 'We use **Unitary Coupled Cluster Singles and Doubles** (**UCCSD**) as a starting
    point to determine a trial wave function for the variational method as it is essential
    that the VQE ansatz is close to the true ground state to make the VQE computations
    successful. To get an accurate energy estimate of 1 milli-Hartree (mHA), the ansatz
    for the VQE must be close to the true ground state by less than one in a million
    [Troyer]. In this chapter, we will focus on calculating only the ground state
    and Born-Oppenheimer potential energy surface (BOPES) for the hydrogen (H2) and
    lithium hydride (LiH) molecules, and a macro molecule. We introduced the BOPES
    in *Section 4.1, Born-Oppenheimer approximation*. We will cover the following
    topics:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用**单位耦合簇单双**（**UCCSD**）作为变分法的起始点来确定一个试探波函数，因为VQE的基必须接近真实基态，这对于VQE计算的成功至关重要。为了获得1毫哈特里（mHA）的准确能量估计，VQE的基必须比真实基态小百万分之一[Troyer]。在本章中，我们将专注于计算氢（H2）和氢化锂（LiH）分子以及一个宏分子的基态和Born-Oppenheimer势能面（BOPES）。我们在*第4.1节，Born-Oppenheimer近似*中介绍了BOPES。我们将涵盖以下主题：
- en: '*Section 5.1, Variational method*'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第5.1节，变分法*'
- en: '*Section 5.2, Example chemical calculations*'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第5.2节，示例化学计算*'
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'A companion Jupyter notebook for this chapter can be downloaded from GitHub
    at [https://github.com/PacktPublishing/Quantum-Chemistry-and-Computing-for-the-Curious](https://github.com/PacktPublishing/Quantum-Chemistry-and-Computing-for-the-Curious),
    which has been tested in the Google Colab environment, which is free and runs
    entirely in the cloud, and in the IBM Quantum Lab environment. Please refer to
    [*Appendix B*](B18268_Appendix_B_ePub.xhtml#_idTextAnchor313) *– Leveraging Jupyter
    Notebooks in the Cloud*, for more information. The companion Jupyter notebook
    automatically installs the following list of libraries:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的配套Jupyter笔记本可以从GitHub下载，网址为[https://github.com/PacktPublishing/Quantum-Chemistry-and-Computing-for-the-Curious](https://github.com/PacktPublishing/Quantum-Chemistry-and-Computing-for-the-Curious)，该笔记本已在Google
    Colab环境中测试，Colab是免费的，完全运行在云端，以及IBM量子实验室环境中。请参阅[*附录B*](B18268_Appendix_B_ePub.xhtml#_idTextAnchor313)
    *– 在云端利用Jupyter笔记本*，获取更多信息。配套的Jupyter笔记本会自动安装以下列表中的库：
- en: '**Numerical Python** (**NumPy**) [NumPy], an open-source Python library that
    is used in almost every field of science and engineering.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数值Python**（**NumPy**）[NumPy]，一个开源的Python库，几乎被应用于科学和工程的各个领域。'
- en: Qiskit [Qiskit], an open-source SDK for working with quantum computers at the
    level of pulses, circuits, and application modules.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Qiskit [Qiskit]，一个开源SDK，用于在脉冲、电路和应用模块级别与量子计算机协同工作。
- en: Qiskit visualization support to enable the use of visualizations and Jupyter
    notebooks.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Qiskit可视化支持，以启用可视化功能和Jupyter笔记本的使用。
- en: Qiskit Nature [Qiskit_Nature] [Qiskit_Nat_0], a unique platform to bridge the
    gap between natural sciences and quantum simulations.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Qiskit Nature [Qiskit_Nature] [Qiskit_Nat_0]，一个独特的平台，用于弥合自然科学与量子模拟之间的差距。
- en: '**Python-based Simulations of Chemistry Framework** (**PySCF**) [PySCF], an
    open-source collection of electronic structure modules powered by Python.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于 Python 的化学模拟框架**（**PySCF**）[PySCF]，一个由 Python 驱动的开源电子结构模块集合。'
- en: '**Quantum Toolbox in Python** (**QuTiP**) [QuTiP], a general framework for
    solving quantum mechanics problems such as systems composed of few-level quantum
    systems and harmonic oscillators.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Python 量子工具箱**（**QuTiP**）[QuTiP]，一个用于解决量子力学问题（如由低能级量子系统和谐振子组成的系统）的通用框架。'
- en: '**Atomic Simulation Environment** (**ASE**) [ASE_0], a set of tools and Python
    modules for setting up, manipulating, running, visualizing, and analyzing atomistic
    simulations. The code is freely available under the GNU LGPL license.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**原子模拟环境**（**ASE**）[ASE_0]，一套用于设置、操作、运行、可视化和分析原子模拟的工具和 Python 模块。代码在 GNU LGPL
    许可下免费提供。'
- en: PyQMC [PyQMC], a Python module that implements real-space quantum Monte Carlo
    techniques. It is primarily meant to interoperate with PySCF.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PyQMC [PyQMC]，一个实现实空间量子蒙特卡罗技术的 Python 模块。它主要用于与 PySCF 交互操作。
- en: h5py [h5py] package, a Pythonic interface to the HDF5 binary data format.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: h5py [h5py] 包，一个 Pythonic 接口，用于 HDF5 二进制数据格式。
- en: SciPy [SciPy], a Python module that contains a large number of probability distributions,
    summary and frequency statistics, correlation functions and statistical tests,
    masked statistics, kernel density estimation, quasi-Monte Carlo functionality,
    and more.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SciPy [SciPy]，一个包含大量概率分布、汇总和频率统计、相关函数和统计测试、掩码统计、核密度估计、准蒙特卡罗功能等的 Python 模块。
- en: Installing NumPy, Qiskit, QuTiP, and importing various modules
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 NumPy、Qiskit、QuTiP 并导入各种模块
- en: 'Install NumPy with the following command:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令安装 NumPy：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Install Qiskit with the following command:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令安装 Qiskit：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Install Qiskit visualization support with the following command:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令安装 Qiskit 可视化支持：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Install Qiskit Nature with the following command:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令安装 Qiskit Nature：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Install PySCF with the following command:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令安装 PySCF：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Install QuTiP with the following command:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令安装 QuTiP：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Install ASE with the following command:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令安装 ASE：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Install PyQMC with the following command:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令安装 PyQMC：
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Install h5py with the following command:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令安装 h5py：
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Install SciPy with the following command:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令安装 SciPy：
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Import NumPy with the following command:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令导入 NumPy：
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Import Matplotlib, a comprehensive library for creating static, animated, and
    interactive visualizations in Python, with the following command:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令导入 Matplotlib，一个用于在 Python 中创建静态、动画和交互式可视化的综合库：
- en: '[PRE11]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Import the required functions and class methods. The `array_to_latex function()`
    returns a LaTeX representation of a complex array with dimension 1 or 2:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 导入所需的函数和类方法。`array_to_latex function()` 返回一个具有 1 或 2 维的复杂数组的 LaTeX 表示形式：
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Import the Qiskit Nature libraries with the following commands:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令导入 Qiskit Nature 库：
- en: '[PRE13]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Import the Qiskit Nature property framework with the following command:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令导入 Qiskit Nature 属性框架：
- en: '[PRE14]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Import the `ElectronicEnergy` property with the following command:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令导入 `ElectronicEnergy` 属性：
- en: '[PRE15]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Import the `ElectronicIntegrals` property with the following command:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令导入 `ElectronicIntegrals` 属性：
- en: '[PRE16]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Import the Qiskit Aer state vector simulator and various algorithms with the
    following commands:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令导入 Qiskit Aer 状态向量模拟器和各种算法：
- en: '[PRE17]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Import the PySCF gto and scf libraries with the following command:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令导入 PySCF gto 和 scf 库：
- en: '[PRE18]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Import the PyQMC API library with the following command:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令导入 PyQMC API 库：
- en: '[PRE19]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Import h5py with the following command:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令导入 h5py：
- en: '[PRE20]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Import the ASE libraries, the `Atoms` object, molecular data, and visualizations
    with the following commands:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令导入 ASE 库、`Atoms` 对象、分子数据和可视化：
- en: '[PRE21]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Import the math libraries with the following commands:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令导入数学库：
- en: '[PRE22]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Import Python''s statistical functions provided by the SciPy package with the
    following command:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令导入 SciPy 包提供的 Python 统计函数：
- en: '[PRE23]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Import QuTiP with the following command:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令导入 QuTiP：
- en: '[PRE24]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Import time and datetime with the following command:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令导入 time 和 datetime：
- en: '[PRE25]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Import pandas and os.path with the following commands:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令导入 pandas 和 os.path：
- en: '[PRE26]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 5.1\. Variational method
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5.1. 变分法
- en: We illustrate the variational method through both classical and hybrid-quantum
    methods. We compare VQE to the variational Monte Carlo method. Further, we also
    compare the results for VQE to the **Quantum Phase Estimation** (**QPE**) algorithm,
    which is not a variational method.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过经典和混合量子方法来展示变分方法。我们比较VQE与变分蒙特卡罗方法。此外，我们还比较了VQE的结果与**量子相位估计**（**QPE**）算法的结果，后者不是变分方法。
- en: 'In this section, we cover the following topics:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们涵盖了以下主题：
- en: '*Section 5.1.1, The Rayleigh-Ritz variational theorem*'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第5.1.1节，Rayleigh-Ritz变分定理*'
- en: '*Section 5.1.2, Variational Monte Carlo methods*'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第5.1.2节，变分蒙特卡罗方法*'
- en: '*Section 5.1.3, Quantum Phase Estimation (QPE)*'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第5.1.3节，量子相位估计（QPE）*'
- en: '*Section 5.1.4, Description of the VQE algorithm*'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第5.1.4节，VQE算法描述*'
- en: 5.1.1\. The Rayleigh-Ritz variational theorem
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5.1.1\. Rayleigh-Ritz变分定理
- en: 'The Rayleigh-Ritz variational theorem states that the expectation value of
    the Hamiltonian ![](img/Formula_05_001.png) of a system with respect to the state
    of an arbitrary wave function (![](img/Formula_05_002.png)) is always an upper
    bound to the exact ground state energy ![](img/Formula_05_003.png) of the system
    it describes:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Rayleigh-Ritz变分定理指出，系统哈密顿量 ![img/Formula_05_001.png] 关于任意波函数状态 (![img/Formula_05_002.png])
    的期望值总是该系统描述的精确基态能量 ![img/Formula_05_003.png] 的上界：
- en: '![](img/Formula_05_004.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![img/Formula_05_004.jpg]'
- en: where ![](img/Formula_05_005.png) generally represents time, spatial, and spin
    variables. This formula is not assuming any particular chemical setup nor reference
    frame.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 ![img/Formula_05_005.png] 通常代表时间、空间和自旋变量。这个公式没有假设任何特定的化学设置或参考系。
- en: 'We now give a proof of this theorem for the general Hamiltonian, which is represented
    by the discretized Hermitian operator ![](img/Formula_05_006.png) [Toulouse].
    Recall that, according to the spectral theorem introduced in *Section 2.3.1, Hermitian
    operator*, ![](img/Formula_05_007.png) must have a set of orthonormal eigenvectors
    ![](img/Formula_05_008.png) with real eigenvalues ![](img/Formula_05_009.png),
    ![](img/Formula_05_010.png) which form an orthonormal basis of the Hilbert space,
    and that ![](img/Formula_05_006.png) has a unique spectral representation in this
    basis:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们给出了一般哈密顿量定理的证明，该哈密顿量由离散厄米算子 ![img/Formula_05_006.png] [Toulouse] 表示。回顾一下，根据在第2.3.1节中引入的谱定理，厄米算子
    ![img/Formula_05_007.png] 必须有一组正交归一的本征向量 ![img/Formula_05_008.png] 以及实本征值 ![img/Formula_05_009.png]，![img/Formula_05_010.png]，这些构成了希尔伯特空间的一个正交归一基，并且在这个基中
    ![img/Formula_05_006.png] 有一个唯一的谱表示：
- en: '![](img/Formula_05_012.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![img/Formula_05_012.jpg]'
- en: 'We can index the orthonormal eigenvectors of ![](img/Formula_05_006.png) in
    increasing order of energy, ![](img/Formula_05_014.png) and decompose any state
    ![](img/Formula_05_015.png) in this basis:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以按能量增加的顺序对 ![img/Formula_05_006.png] 的正交归一本征向量进行索引，![img/Formula_05_014.png]，并将任何状态
    ![img/Formula_05_015.png] 在这个基中分解：
- en: '![](img/Formula_05_016.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![img/Formula_05_016.jpg]'
- en: 'with coefficients ![](img/Formula_05_017.png) and the normalization constraint:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 系数 ![img/Formula_05_017.png] 和归一化约束：
- en: '![](img/Formula_05_018.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![img/Formula_05_018.jpg]'
- en: 'Noting that the complex conjugate transpose is:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到复共轭转置是：
- en: '![](img/Formula_05_019.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![img/Formula_05_019.jpg]'
- en: 'We compute the expectation value:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们计算期望值：
- en: '![](img/Formula_05_020.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![img/Formula_05_020.jpg]'
- en: 'The minimum of this expression ![](img/Formula_05_021.png) is reached for ![](img/Formula_05_022.png)
    and ![](img/Formula_05_023.png) for all ![](img/Formula_05_024.png) that is for
    ![](img/Formula_05_025.png). Hence:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这个表达式 ![img/Formula_05_021.png] 的最小值在 ![img/Formula_05_022.png] 和 ![img/Formula_05_023.png]
    处取得，对于所有 ![img/Formula_05_024.png]，即对于 ![img/Formula_05_025.png]。因此：
- en: '![](img/Formula_05_026.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![img/Formula_05_026.jpg]'
- en: To find the minimum, one can find the first and second derivative of the expression
    with respect to the parameters of the wave function. This setup for the variational
    theorem holds true for the electronic molecular Hamiltonian (![](img/Formula_05_027.png)).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 为了找到最小值，可以找到关于波函数参数的表达式的第一和第二导数。这个变分定理的设置对于电子分子哈密顿量 (![img/Formula_05_027.png])
    是成立的。
- en: 5.1.2\. Variational Monte Carlo methods
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5.1.2\. 变分蒙特卡罗方法
- en: 'The **variational Monte Carlo** (**VMC**) method is based on the Rayleigh-Ritz
    variational theorem [Chen] [Gorelov] [Toulouse_1] [Cao] [Dagrada] and Monte Carlo
    integration methods [Pease], noting that the expectation value can be rewritten
    in the form:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '**变分蒙特卡罗**（**VMC**）方法基于Rayleigh-Ritz变分定理 [Chen] [Gorelov] [Toulouse_1] [Cao]
    [Dagrada] 和蒙特卡罗积分方法 [Pease]，注意到期望值可以重写为以下形式：'
- en: '![](img/Formula_05_028.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Formula_05_028.jpg)'
- en: 'We separate the integral into a probability distribution:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将积分分解为一个概率分布：
- en: '![](img/Formula_05_029.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Formula_05_029.jpg)'
- en: 'and an observable:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 并且一个可观察的：
- en: '![](img/Formula_05_030.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Formula_05_030.jpg)'
- en: 'which enables us to write the energy in the form of an average:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这使我们能够将能量表示为平均值的形式：
- en: '![](img/Formula_05_031.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Formula_05_031.jpg)'
- en: 'Now we apply an approximation to the ![](img/Formula_05_032.png) formula, which
    is called the **Metropolis-Hastings** (**MH**) algorithm [Chen] [Toulouse1]. To
    perform the approximation mathematically, we sample a set of ![](img/Formula_05_033.png)
    points ![](img/Formula_05_034.png) from the probability distribution ![](img/Formula_05_035.png)
    and we evaluate the local energy at each point ![](img/Formula_05_036.png) , hence:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对 ![](img/Formula_05_032.png) 公式进行近似，这被称为**Metropolis-Hastings**（**MH**）算法
    [Chen] [Toulouse1]。为了在数学上进行近似，我们从概率分布 ![](img/Formula_05_033.png) 中采样一组 ![](img/Formula_05_034.png)
    点，并在每个点 ![](img/Formula_05_036.png) 上评估局部能量，因此：
- en: '![](img/Formula_05_037.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Formula_05_037.jpg)'
- en: In practice, we can use a flexible explicitly correlated wave function ![](img/Formula_05_038.png)
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在实践中，我们可以使用灵活的显式相关波函数 ![](img/Formula_05_038.png)
- en: We now give an illustration of the MH algorithm with Python code from Ref. [Stephens].
    The MH algorithm is a **Markov chain Monte Carlo** (**MCMC**) method for producing
    samples from a probability distribution that we will call the target probability
    distribution. It works by simulating a Markov chain, whose stationary distribution
    is the target probability distribution. **Markov chain theory** is used to describe
    polymerization type reactions that are prominent in chemistry, chemical engineering,
    and in biology and medicine, such as the **polymerase chain reaction** (**PCR**)
    [Tamir].
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们用来自 Ref. [Stephens] 的 Python 代码给出 MH 算法的示例。MH 算法是一种用于从概率分布中产生样本的**马尔可夫链蒙特卡罗**（**MCMC**）方法，我们将称之为目标概率分布。它通过模拟一个马尔可夫链来工作，其平稳分布是目标概率分布。**马尔可夫链理论**用于描述在化学、化学工程、生物学和医学中突出的聚合反应类型，例如**聚合酶链反应**（**PCR**）[Tamir]。
- en: 'We want to sample from the following probability distribution:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想从以下概率分布中采样：
- en: '![](img/Formula_05_039.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Formula_05_039.jpg)'
- en: 'We implement the MH algorithm with a “random walk” kernel, ![](img/Formula_05_040.png),
    where ![](img/Formula_02_005.png) is the normal distribution, and the following
    acceptance probability:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用“随机游走”核实现 MH 算法，![](img/Formula_05_040.png)，其中 ![](img/Formula_02_005.png)
    是正态分布，以下接受概率：
- en: '![](img/Formula_05_042.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Formula_05_042.jpg)'
- en: 'Here is the code:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是代码：
- en: '[PRE27]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'We plot the locations visited by the Markov chain ![](img/Formula_05_043.png):'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们绘制了马尔可夫链 ![](img/Formula_05_043.png) 访问的位置：
- en: '[PRE28]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '*Figure 5.2* shows the result:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5.2* 显示了结果：'
- en: '![](img/B18268_Figure_5.2.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18268_Figure_5.2.jpg)'
- en: Figure 5.2 – Plot of the locations visited by the Markov chain ![](img/Formula_05_044.png)
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.2 – 马尔可夫链 ![](img/Formula_05_044.png) 访问的位置图
- en: 'We use the Freedman–Diaconis rule to select the “right” bin width to be used
    in a histogram [Bushmanov] [Freeman]:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 Freedman-Diaconis 规则来选择用于直方图的“正确”的箱宽 [Bushmanov] [Freeman]：
- en: '[PRE29]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Here is the result:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是结果：
- en: '[PRE30]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'We plot the histogram of the Markov chain ![](img/Formula_05_045.png):'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们绘制了马尔可夫链 ![](img/Formula_05_045.png) 的直方图：
- en: '[PRE31]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '*Figure 5.3* shows the result:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5.3* 显示了结果：'
- en: '![](img/B18268_Figure_5.3.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18268_Figure_5.3.jpg)'
- en: Figure 5.3 – Histogram of the Markov chain ![](img/Formula_05_046.png)
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.3 – 马尔可夫链 ![](img/Formula_05_046.png) 的直方图
- en: We see that the histogram of values of the Markov chain ![](img/Formula_05_047.png)
    is a good approximation to the distribution ![](img/Formula_05_048.png) defined
    previously.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到马尔可夫链 ![](img/Formula_05_047.png) 的值直方图是先前定义的分布 ![](img/Formula_05_048.png)
    的良好近似。
- en: 'We now define the `run_PySCF()` function, which computes the energy of the
    ground state with the PySCF RHF method and with the `OPTIMIZE` function in the
    PyQMC Python module that implements real-space variational Monte Carlo techniques
    [PyQMC]. It has the following parameters:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们定义 `run_PySCF()` 函数，该函数使用 PySCF RHF 方法计算基态能量，并使用 PyQMC Python 模块中的 `OPTIMIZE`
    函数实现空间变分蒙特卡罗技术 [PyQMC]。它具有以下参数：
- en: '`molecule`, the geometry of the molecule, defined with the Qiskit `Molecule`
    class'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`molecule`，分子的几何形状，使用 Qiskit 的 `Molecule` 类定义'
- en: '`pyqmc`, set to `True` by default to run the PyQMC Python module'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pyqmc`，默认设置为`True`以运行 PyQMC Python 模块'
- en: '`show`, set to `True` by default to display intermediate results'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`show`，默认设置为`True`以显示中间结果'
- en: 'Here is the definition of the `run_PySCF()` function:'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这里是`run_PySCF()`函数的定义：
- en: '[PRE32]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'We now present the code that is contained in this `run_PySCF()` function. First,
    we reset the files:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们展示包含在`run_PySCF()`函数中的代码。首先，我们重置文件：
- en: '[PRE33]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Then we construct a PySCF molecular geometry from the molecule passed as an
    input parameter:'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后我们从输入参数传递的分子构建PySCF分子几何。
- en: '[PRE34]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'We run the PySCF RHF method:'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们运行了PySCF RHF方法：
- en: '[PRE35]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Next, we run the `OPTIMIZE` function in the PyQMC Python module:'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来，我们在PyQMC Python模块中运行`OPTIMIZE`函数：
- en: '[PRE36]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'We read the content of the HDF5 file, which contains the optimized parameters,
    and if the PyQMC variational Monte Carlo computation converged, then we print
    the energy for each iteration:'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们读取包含优化参数的HDF5文件的内容，如果PyQMC变分蒙特卡洛计算收敛，则打印每次迭代的能量：
- en: '[PRE37]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Finally, we let the `run_PySCF()` function return the following parameters
    to the caller:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们让`run_PySCF()`函数将以下参数返回给调用者：
- en: '`conv`, `Boolean`, set to `True` if the PySCF RHF method converged'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`conv`，`Boolean`，如果PySCF RHF方法收敛则设置为`True`'
- en: '`e`, the energy of the ground state'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`e`，基态能量'
- en: 'Here is the `return` statement:'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这里是`return`语句：
- en: '[PRE38]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 5.1.3\. Quantum Phase Estimation (QPE)
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5.1.3. 量子相位估计 (QPE)
- en: In quantum chemistry, we need very accurate calculations of the total electronic
    energy of each molecule species involved in a chemical reaction [Burg]. The **Quantum
    Phase Estimation** (**QPE**) algorithm has a unique feature that it allows a bounded-error
    simulation of quantum systems, which makes it one of the most promising applications
    of future fault-tolerant quantum computing. Given a unitary operator ![](img/Formula_05_049.png),
    its eigenstate and eigenvalues, ![](img/Formula_05_050.png), the ability to prepare
    a state ![](img/Formula_05_051.png), and the ability to apply ![](img/Formula_05_052.png)
    itself, the QPE algorithm calculates ![](img/Formula_05_053.png), where ![](img/Formula_02_247.png)
    is the number of qubits used to estimate ![](img/Formula_05_055.png) thereby allowing
    measurement of ![](img/Formula_05_055.png) as precisely as we want.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在量子化学中，我们需要对参与化学反应的每种分子物种的总电子能量进行非常精确的计算 [Burg]。**量子相位估计** (**QPE**) 算法具有一个独特的特性，即它允许对量子系统进行有界误差的模拟，这使得它成为未来容错量子计算最有希望的应用之一。给定一个单位算符
    ![](img/Formula_05_049.png)，其本征态和本征值 ![](img/Formula_05_050.png)，准备状态 ![](img/Formula_05_051.png)
    的能力，以及应用 ![](img/Formula_05_052.png) 本身的能力，QPE算法计算 ![](img/Formula_05_053.png)，其中
    ![](img/Formula_02_247.png) 是用于估计 ![](img/Formula_05_055.png) 的量子比特数，从而允许我们将 ![](img/Formula_05_055.png)
    测量得尽可能精确。
- en: 'Recall that in *Section 2.5, Postulate 5 – Time evolution dynamics*, we saw
    that time evolution dynamics of a quantum system is described by Schrödinger''s
    equation:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下，在 *第2.5节，公设5 – 时间演化动力学* 中，我们看到了量子系统的动力学由薛定谔方程描述：
- en: '![](img/Formula_05_057.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Formula_05_057.jpg)'
- en: 'For a time-independent Hamiltonian ![](img/Formula_05_058.png) with initial
    condition ![](img/Formula_05_059.png), the solution is:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 对于具有初始条件 ![](img/Formula_05_059.png) 的时间独立哈密顿量 ![](img/Formula_05_058.png)，解为：
- en: '![](img/Formula_05_060.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Formula_05_060.jpg)'
- en: where ![](img/Formula_05_061.png) is the unitary time-evolution operator. Further
    recall that any unitary matrix has eigenvalues of the form ![](img/Formula_05_062.png).
    An eigenvalue of ![](img/Formula_05_063.png) is also an eigenvalue of ![](img/Formula_05_064.png).
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 ![](img/Formula_05_061.png) 是单位时间演化算符。进一步回忆，任何单位矩阵都有形式为 ![](img/Formula_05_062.png)
    的特征值。![](img/Formula_05_063.png) 的特征值也是 ![](img/Formula_05_064.png) 的特征值。
- en: 'We now illustrate the use of the Qiskit `PhaseEstimation` class. First, we
    define a function ![](img/Formula_05_065.png), which creates a quantum circuit
    with a single qubit ![](img/Formula_05_066.png) and applies the following unitary:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们说明如何使用Qiskit的`PhaseEstimation`类。首先，我们定义一个函数 ![](img/Formula_05_065.png)，它创建一个包含单个量子比特
    ![](img/Formula_05_066.png) 的量子电路，并应用以下单位算符：
- en: '![](img/Formula_05_067.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Formula_05_067.jpg)'
- en: 'where ![](img/Formula_05_068.png) is the gate we introduced in *Section 3.2.1,
    Single qubit quantum gates*, which has the matrix form:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 ![](img/Formula_05_068.png) 是我们在 *第3.2.1节，单量子比特量子门* 中引入的门，其矩阵形式为：
- en: '![](img/Formula_05_069.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Formula_05_069.jpg)'
- en: 'Here is the code:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是代码：
- en: '[PRE39]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'We define the `do_qpe()` function, which illustrates the use of the Qiskit
    Nature `PhaseEstimation` class, and which has three parameters:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了`do_qpe()`函数，它说明了如何使用Qiskit Nature的`PhaseEstimation`类，并且有三个参数：
- en: '`unitary`, a function that implements a unitary'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unitary`，一个实现单位算符的函数'
- en: '`nqubits`, the number of qubits, by default `3`'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nqubits`，量子比特数，默认为`3`'
- en: '`show`, set to `True` by default to display the phase returned by `PhaseEstimation`
    class'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`show`，默认设置为 `True` 以显示 `PhaseEstimation` 类返回的相位'
- en: 'Here is the code:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是代码：
- en: '[PRE40]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'First, we run a test of accuracy with three qubits:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们使用三个量子比特进行准确度测试：
- en: '[PRE41]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Here is the result:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是结果：
- en: '[PRE42]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Next, we run a test of accuracy with eight qubits:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用八个量子比特进行准确度测试：
- en: '[PRE43]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Here is the result:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是结果：
- en: '[PRE44]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: We see that we can get an estimate of the phase with a bounded error from the
    true phase by increasing the number of qubits that the `PhaseEstimation` class
    is allowed to use.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，通过增加 `PhaseEstimation` 类允许使用的量子比特数量，我们可以从真实相位中获得一个有界误差的相位估计。
- en: 5.1.4\. Description of the VQE algorithm
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5.1.4. VQE 算法描述
- en: In a loop, a classical computer optimizes the parameters of a quantum circuit
    with respect to an objective function, such as finding the ground state of a molecule,
    which is the state with the lowest energy. The parameterized quantum circuit prepares
    a trial quantum state as a trial solution (an ansatz). By repeatedly measuring
    qubits at the output of the quantum circuit, we get the expectation value of the
    energy observable with respect to the trial state.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在循环中，经典计算机根据目标函数优化量子电路的参数，例如寻找分子的基态，这是具有最低能量的状态。参数化量子电路准备一个试验量子态作为试验解（一个试探解）。通过反复测量量子电路输出的量子比特，我们得到与试验态相关的能量可观察量的期望值。
- en: 'The VQE algorithm provides an estimate of the ground state of a given quantum
    system encoded as a Hamiltonian ![](img/Formula_05_070.png), the state of the
    system with the lowest energy ![](img/Formula_05_071.png), for instance, the ground
    state energy of a molecule. It involves an iterative minimization of the expectation
    value ![](img/Formula_05_072.png) of the energy observable with respect to the
    parametrized (![](img/Formula_05_073.png)) trial state ![](img/Formula_05_074.png):'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: VQE 算法提供了一个编码为哈密顿量 ![](img/Formula_05_070.png) 的给定量子系统的基态估计，即系统具有最低能量的状态 ![](img/Formula_05_071.png)，例如，分子的基态能量。它涉及对参数化（![](img/Formula_05_073.png)）试验态
    ![](img/Formula_05_074.png) 的能量可观察量的期望值 ![](img/Formula_05_072.png) 进行迭代最小化：
- en: '![](img/Formula_05_075.jpg)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Formula_05_075.jpg)'
- en: 'As shown in *Section 3.1.6, Pauli matrices*, we can decompose the Hamiltonian
    ![](img/Formula_05_006.png) into the weighted sum of ![](img/Formula_05_077.png)
    tensor products ![](img/Formula_05_078.png), where ![](img/Formula_05_079.png)
    with weights ![](img/Formula_05_080.png) and ![](img/Formula_05_081.png) qubits:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 如 *第 3.1.6 节，泡利矩阵* 所示，我们可以将哈密顿量 ![](img/Formula_05_006.png) 分解为 ![](img/Formula_05_077.png)
    张量积 ![](img/Formula_05_078.png) 的加权求和，其中 ![](img/Formula_05_079.png) 具有权重 ![](img/Formula_05_080.png)
    和 ![](img/Formula_05_081.png) 个量子比特：
- en: '![](img/Formula_05_082.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Formula_05_082.jpg)'
- en: 'Hence the expectation value of the energy observable ![](img/Formula_05_083.png)
    can be rewritten as follows:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，能量可观察量的期望值 ![](img/Formula_05_083.png) 可以重新写为以下形式：
- en: '![](img/Formula_05_084.jpg)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Formula_05_084.jpg)'
- en: We prepare a trial state ![](img/Formula_05_085.png) with the set of parameters
    ![](img/Formula_05_086.png) with a quantum circuit initialized in the state ![](img/Formula_05_087.png),
    and represented by ![](img/Formula_05_088.png), which outputs the state ![](img/Formula_05_089.png).
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用量子电路初始化在状态 ![](img/Formula_05_087.png) 并表示为 ![](img/Formula_05_088.png)
    的参数集 ![](img/Formula_05_086.png) 准备一个试验态 ![](img/Formula_05_085.png)，该电路输出状态 ![](img/Formula_05_089.png)。
- en: 'By transposing the complex conjugate, ![](img/Formula_05_090.png), we can rewrite
    the expectation value of the energy observable ![](img/Formula_05_091.png) as
    follows:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 通过转置复共轭 ![](img/Formula_05_090.png)，我们可以将能量可观察量的期望值 ![](img/Formula_05_091.png)
    重新写为以下形式：
- en: '![](img/Formula_05_092.jpg)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Formula_05_092.jpg)'
- en: 'and then by taking the sum out to the front:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将求和项移到前面：
- en: '![](img/Formula_05_093.jpg)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Formula_05_093.jpg)'
- en: For each ![](img/Formula_05_094.png) we run the quantum circuit ![](img/Formula_05_095.png)
    followed by rotations ![](img/Formula_05_096.png) depending on ![](img/Formula_05_097.png)
    before measuring the qubits in the Z basis so that we effectively measure the
    output state in the basis of the eigenvectors of ![](img/Formula_05_098.png) to
    get the expectation value ![](img/Formula_05_099.png) with respect to the output
    state ![](img/Formula_05_100.png).
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个 ![](img/Formula_05_094.png)，我们运行量子电路 ![](img/Formula_05_095.png)，然后根据 ![](img/Formula_05_097.png)
    进行旋转 ![](img/Formula_05_096.png)，在 Z 基础上测量量子比特，从而有效地测量输出态在 ![](img/Formula_05_098.png)
    的特征向量基中的输出态，以获得与输出态 ![](img/Formula_05_100.png) 相关的期望值 ![](img/Formula_05_099.png)。
- en: On a classical computer, we compute the weighted sum of the expectation values
    ![](img/Formula_05_101.png) with weights ![](img/Formula_02_417.png) to get the
    expectation value ![](img/Formula_05_103.png) with respect to the output state
    ![](img/Formula_05_104.png). We update the set of parameters ![](img/Formula_05_105.png)
    using a classical optimization routine, minimizing the expectation value ![](img/Formula_05_106.png)
    until convergence in the value of the energy or the maximum allowable number of
    iterations is reached. The parameters ![](img/Formula_05_107.png) at convergence
    define approximately the ground state ![](img/Formula_05_108.png) of the quantum
    system encoded into a Hamiltonian ![](img/Formula_05_109.png) with the lowest
    energy ![](img/Formula_05_110.png). The algorithm is summarized in *Figure 5.4*.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在经典计算机上，我们计算期望值的加权总和 ![](img/Formula_05_101.png) 与权重 ![](img/Formula_02_417.png)
    相乘，以得到相对于输出状态 ![](img/Formula_05_104.png) 的期望值 ![](img/Formula_05_103.png)。我们使用经典优化算法更新参数集
    ![](img/Formula_05_105.png)，最小化期望值 ![](img/Formula_05_106.png)，直到能量值收敛或达到最大允许迭代次数。收敛时的参数
    ![](img/Formula_05_107.png) 大约定义了编码到哈密顿量 ![](img/Formula_05_109.png) 中的量子系统的基态
    ![](img/Formula_05_108.png) 的最低能量 ![](img/Formula_05_110.png)。算法总结在 *图 5.4* 中。
- en: '![](img/B18268_Figure_5.4.jpg)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18268_Figure_5.4.jpg)'
- en: Figure 5.4 – VQE algorithm
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.4 – VQE 算法
- en: Trial wave functions
  id: totrans-201
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 尝试波函数
- en: 'The **Coupled-Cluster** (**CC**) theory constructs a multi-electron wave function
    (![](img/Formula_05_111.png)) using the exponential cluster operator ![](img/Formula_05_112.png),
    where ![](img/Formula_05_113.png) is the operator for all single excitations,
    ![](img/Formula_05_114.png) is the operator for all double excitations, and so
    on. We start the VQE with the following **unitary Coupled-Cluster** (**UCC**)
    ansatz of the quantum state ![](img/Formula_05_115.png) with variational parameter
    ![](img/Formula_05_116.png) [Panagiotis] [Lolur]:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '**耦合簇**（**CC**）理论使用指数簇算符 ![](img/Formula_05_112.png) 构建多电子波函数 (![](img/Formula_05_111.png))，其中
    ![](img/Formula_05_113.png) 是所有单激发的算符，![](img/Formula_05_114.png) 是所有双激发的算符，等等。我们以以下量子态
    ![](img/Formula_05_115.png) 的**单位ary 耦合簇**（**UCC**）基函数 ![](img/Formula_05_116.png)
    作为变分参数 [Panagiotis] [Lolur] 开始 VQE：'
- en: '![](img/Formula_05_117.jpg)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Formula_05_117.jpg)'
- en: 'where ![](img/Formula_05_118.png) is the Hartree-Fock ground state. In the
    UCC method restricted to the extension to single and double excitations (UCCSD),
    the operators ![](img/Formula_05_119.png) and ![](img/Formula_05_120.png) can
    be expanded as follows:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 ![](img/Formula_05_118.png) 是哈特里-福克基态。在仅限于单、双激发扩展的 UCC 方法（UCCSD）中，算符 ![](img/Formula_05_119.png)
    和 ![](img/Formula_05_120.png) 可以展开如下：
- en: '![](img/Formula_05_121.jpg)![](img/Formula_05_122.jpg)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Formula_05_121.jpg)![](img/Formula_05_122.jpg)'
- en: 'where:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 其中：
- en: '![](img/Formula_05_123.png) is the fermionic creation operator introduced in
    *Section 4.3.1, Fermion creation operator*'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![](img/Formula_05_123.png) 是在第 4.3.1 节“费米子创建算符”中引入的费米子创建算符'
- en: '![](img/Formula_05_124.png) is the fermionic annihilation operator introduced
    in Section *4.3.2, Fermion annihilation operator*'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![](img/Formula_05_124.png) 是在第 4.3.2 节“费米子湮灭算符”中引入的费米子湮灭算符'
- en: '![](img/Formula_05_125.png) is the set of parameters for all expansion coefficients.'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![](img/Formula_05_125.png) 是所有展开系数的参数集。'
- en: The UCCSD ansatz of the quantum state ![](img/Formula_05_126.png) is then mapped
    to qubit operators with the Jordan-Wigner (JW), the Parity, or the Bravyi-Kitaev
    (BK) transformation introduced in *Section 4.7, Fermion to qubit mappings,* resulting
    in an initial qubit state vector for the VQE calculation.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将量子态 ![](img/Formula_05_126.png) 的 UCCSD 基函数映射到量子比特算符，使用第 4.7 节中引入的 Jordan-Wigner（JW）、偶数性或
    Bravyi-Kitaev（BK）变换，从而得到 VQE 计算的初始量子比特状态向量。
- en: Setting up the VQE solver
  id: totrans-211
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置 VQE 求解器
- en: 'We set up a noise-free simulation with the Qiskit Aer state vector simulator
    backend:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 Qiskit Aer 状态向量模拟器后端设置了一个无噪声的模拟：
- en: '[PRE45]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Now we set up solving methods. To learn how to train circuit-based variational
    models, check Ref. [Qiskit_2021_Lab4]. First, we set up the NumPy minimum eigensolver
    as follows:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们设置求解方法。要了解如何训练基于电路的变分模型，请参阅参考文献 [Qiskit_2021_Lab4]。首先，我们按照以下方式设置 NumPy 最小特征值求解器：
- en: '[PRE46]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'We set up the Two-Local circuit [Panagiotis] as follows:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 我们按照 [Panagiotis] 的方法设置双局部电路如下：
- en: '[PRE47]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'We set up the VQE using a heuristic ansatz, the Two-Local circuit with the
    default **Sequential Least Squares Programming (SLSQP)** optimizer:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用启发式基函数，即默认的**顺序最小二乘规划（SLSQP）**优化器设置 VQE，采用双局部电路：
- en: '[PRE48]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Then we set up a solver with the **Unitary Coupled Cluster** (**UCC**) factory.
    It allows a fast initialization of a VQE initializing the qubits in the Hartree-Fock
    state and using the quantum UCC with singles and doubles (q-UCCSD), a popular
    wave function ansatz [VQE_2] [VQE_3]. Here is the code:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用**单位耦合簇**（**UCC**）工厂设置求解器。它允许快速初始化VQE，将量子比特初始化在哈密顿状态，并使用量子UCC单双（q-UCCSD），这是一个流行的波函数近似[VQE_2]
    [VQE_3]。以下是代码：
- en: '[PRE49]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'We set up a callback function, `qnspsa_callback()`, for the `qnspsa_loss`:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为`qnspsa_loss`设置了一个回调函数，`qnspsa_callback()`：
- en: '[PRE50]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Now we are ready to show some examples.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们准备展示一些示例。
- en: 5.2\. Example chemical calculations
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5.2. 示例化学计算
- en: As discussed in [*Chapter 4*](B18268_04_ePub.xhtml#_idTextAnchor153)*, Molecular
    Hamiltonians*, approximating the PES of nuclear motion occurs due to the use of
    the BO approximation. We can use a semi-empirical method of approximating the
    PES through experimental data and/or computer simulations.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 如[*第4章*](B18268_04_ePub.xhtml#_idTextAnchor153)中所述，分子哈密顿量，由于使用了BO近似，近似核运动的PES。我们可以使用半经验方法通过实验数据/或计算机模拟来近似PES。
- en: The PES can be compared to a landscape with mountains and valleys. In practice,
    as chemists, we want to find the global minimum (ocean floor) not local minima
    (mountain meadows) of the PES, as seen in *Figure 5.1*. We use the variational
    method, both classical and quantum, to find the global minimum. This can be compared
    to a ball rolling around the landscape. If we give the ball a nudge in some direction,
    generally downward, the ball will wind up in the minimum. We call this gradient
    descent. The gradient descent can be supplied by numerically changing input values
    or by an analytic formula of the wave function that describes the PES.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: PES可以与有山有谷的地形进行比较。在实践中，作为化学家，我们希望找到PES的全局最小值（海底），而不是局部最小值（山丘草地），如图5.1所示。我们使用经典和量子变分方法来找到全局最小值。这可以与在地形上滚动的球体进行比较。如果我们给球体一个方向上的推力，通常是向下的，球体最终会落在最小值处。我们称这种梯度下降。梯度下降可以通过数值改变输入值或通过描述PES的波函数的解析公式来提供。
- en: To state that calculation of determining the PES we guess a trial wave function,
    which can be optimized in the calculation to enable us to find the global minimum
    of the energy. We call this global minimum the lowest energy possible for a given
    eigenvalue.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明确定PES的计算，我们猜测一个试探波函数，该波函数可以在计算中优化，使我们能够找到能量的全局最小值。我们称这个全局最小值为给定本征值的最低能量。我们称这个全局最小值为给定本征值的最低能量。
- en: We present several implementations of solving for the ground state and plotting
    the BOPES of three molecules with the classical PySCF RHF, PyQMC variational Monte
    Carlo, the QPE, and the VQE with Qiskit Nature using the STO-3G basis with the
    PySCF driver.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 我们展示了使用经典PySCF RHF、PyQMC变分蒙特卡洛、QPE和Qiskit Nature的VQE以及使用PySCF驱动程序的STO-3G基，求解三个分子的基态并绘制BOPES的几种实现。
- en: 'In this section, we cover the following topics:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将涵盖以下主题：
- en: '*Section 5.2.1, Hydrogen molecule*'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第5.2.1节，氢分子*'
- en: '*Section 5.2.2, Lithium hydride molecule*'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第5.2.2节，氢化锂分子*'
- en: '*Section 5.2.3, Macro molecule*'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第5.2.3节，大分子*'
- en: We use the `get_particle_number()` function defined in *Section 4.6.1, Constructing
    a fermionic Hamiltonian operator of the hydrogen molecule*, which gets the particle
    number property of a given electronic structure problem.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用在*第4.6.1节，构建氢分子的费米子哈密顿量算符*中定义的`get_particle_number()`函数，该函数获取给定电子结构问题的粒子数属性。
- en: 'We use the `fermion_to_qubit()` function defined in *Section 4.8, Constructing
    a qubit Hamiltonian with Qiskit Nature,* to convert a fermionic operator to a
    qubit operator. It has the following input parameters:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用在*第4.8节，使用Qiskit Nature构建量子比特哈密顿量*中定义的`fermion_to_qubit()`函数，将费米子算符转换为量子比特算符。它具有以下输入参数：
- en: '`f_op`, a fermionic operator obtained as explained in *Section 4.6, Constructing
    a fermionic Hamiltonian with Qiskit Nature*'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`f_op`，一个费米子算符，如*第4.6节，使用Qiskit Nature构建费米子哈密顿量*中所述获得'
- en: '`mapper`, either `“Jordan-Wigner”` or `“Parity”` or `“Bravyi-Kitaev”`'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mapper`，可以是`“Jordan-Wigner”`、`“Parity”`或`“Bravyi-Kitaev”`'
- en: '`truncate`, an integer to truncate Pauli list by default set to 20 items'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`truncate`，一个用于截断泡利列表的整数，默认设置为20项'
- en: '`two_qubit_reduction`, a Boolean, by default `False`, that determines whether
    to carry out two-qubit reduction when possible'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`two_qubit_reduction`，一个布尔值，默认为`False`，用于确定是否在可能的情况下执行两量子比特简化'
- en: '`z2symmetry_reduction`, by default `None`, that indicates whether a Z2 symmetry
    reduction should be applied to resulting qubit operators that are computed based
    on mathematical symmetries that can be detected in the operator [de Keijzer]'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`z2symmetry_reduction`，默认为`None`，表示是否应将Z2对称性减少应用于基于在算符中可检测到的数学对称性计算出的结果量子比特算符[de
    Keijzer]'
- en: '`show`, set to `True` by default to display the name of the transformation
    and results'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`show`，默认设置为`True`以显示变换名称和结果'
- en: 'Qiskit Nature provides a class called `GroundStateEigensolver` to calculate
    the ground state of a molecule. We define the `run_vqe()` function, which has
    the following input parameters:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: Qiskit Nature提供了一个名为`GroundStateEigensolver`的类，用于计算分子的基态。我们定义了`run_vqe()`函数，它具有以下输入参数：
- en: '`name`, a string of characters to be printed, such as `''NumPy exact solver''`'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`，一个字符串，将被打印出来，例如`''NumPy精确求解器''`'
- en: '`f_op`, a fermionic operator obtained as explained in *Section 4, Constructing
    a fermionic Hamiltonian with Qiskit Nature*'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`f_op`，一个通过*第4节，使用Qiskit Nature构建费米子哈密顿量*中解释的方法获得的费米子算符'
- en: '`qubit_converter`, either `JordanWignerMapper()`, `ParityMapper()`, or `BravyiKitaevMapper()`,
    which is the output of the `fermion_to_qubit()` function'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`qubit_converter`，`JordanWignerMapper()`、`ParityMapper()`或`BravyiKitaevMapper()`之一，这是`fermion_to_qubit()`函数的输出'
- en: '`solver`, either one of the solvers defined in *Section 5.2.3, Setting up the
    VQE solver*, `numpy_solver`, `vqe_ucc_solver`, or `vqe_tl_solver`.'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`solver`，*第5.2.3节，设置VQE求解器*中定义的求解器之一，`numpy_solver`、`vqe_ucc_solver`或`vqe_tl_solver`。'
- en: 'Here is the code:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是代码：
- en: '[PRE51]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'We define the `run_qpe()` function to perform a quantum phase estimation and
    return an eigenvalue of a Hamiltonian as an estimation of the electronic ground
    state energy. It has the following input parameters:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了`run_qpe()`函数以执行量子相位估计，并返回哈密顿量的本征值作为电子基态能量的估计。它具有以下输入参数：
- en: '`particle_number`, the property returned by the `get_particle_number()` function'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`particle_number`，`get_particle_number()`函数返回的属性'
- en: '`qubit_converter`, either `JordanWignerMapper()`, `ParityMapper()`, or `BravyiKitaevMapper()`,
    which is the output of the `fermion_to_qubit()` function'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`qubit_converter`，`JordanWignerMapper()`、`ParityMapper()`或`BravyiKitaevMapper()`之一，这是`fermion_to_qubit()`函数的输出'
- en: '`qubit_op`, a qubit Hamiltonian operator returned the `fermion_to_qubit()`
    function'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`qubit_op`，由`fermion_to_qubit()`函数返回的量子比特哈密顿量算符'
- en: '`n_ancillae`, an integer that defaults to `3`, which is the number of ancillae
    qubits'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`n_ancillae`，一个整数，默认为`3`，表示辅助量子比特的数量'
- en: '`num_time_slices`, an integer that defaults to `1`, which is the number of
    `PauliTrotterEvolution` class'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`num_time_slices`，一个整数，默认为`1`，表示`PauliTrotterEvolution`类的数量'
- en: '`show`, set to `True` by default to display intermediate results'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`show`，默认设置为`True`以显示中间结果'
- en: 'Here is the code:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是代码：
- en: '[PRE52]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'We define the `plot_energy_landscape()` function to plot the energy as a function
    of atomic separation:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了`plot_energy_landscape()`函数，以绘制原子间距作为能量的函数：
- en: '[PRE53]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'We define the `plot_loss()` function, which accepts the following input parameters:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了`plot_loss()`函数，它接受以下输入参数：
- en: '`loss`, an array of floats, optional, generated by the callback function'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`loss`，一个浮点数数组，可选，由回调函数生成'
- en: '`label`, a character string to be displayed by the `plot_loss()` function'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`label`，一个字符串，将由`plot_loss()`函数显示'
- en: '`target`, a float to be displayed by the `plot_loss()` function'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target`，一个浮点数，将由`plot_loss()`函数显示'
- en: 'Here is the code:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是代码：
- en: '[PRE54]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'We now define the `solve_ground_state()` function, which solves for a ground
    state. It accepts as input the following parameters, which define the geometry
    of the molecule:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在定义`solve_ground_state()`函数，该函数用于求解基态。它接受以下参数作为输入，这些参数定义了分子的几何形状：
- en: '`molecule`, the geometry of the molecule, and the output of the `Molecule`
    function.'
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`molecule`，分子的几何形状，以及`Molecule`函数的输出。'
- en: '`mapper`, either `“Jordan-Wigner”` or `“Parity”` or `“Bravyi-Kitaev”`.'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mapper`，`“Jordan-Wigner”`、`“Parity”`或`“Bravyi-Kitaev”`之一。'
- en: '`num_electrons`, an integer, optional, number of electrons for the `ActiveSpaceTransformer`.
    Defaults to `2`.'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`num_electrons`，一个整数，可选，`ActiveSpaceTransformer`的电子数量。默认为`2`。'
- en: '`num_molecular_orbitals`, an integer, optional, number of electron orbitals
    for `ActiveSpaceTransformer`. Defaults to `2`.'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`num_molecular_orbitals`，一个整数，可选，`ActiveSpaceTransformer`的电子轨道数量。默认为`2`。'
- en: 'The following list of input parameters control the whole process:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 以下输入参数列表控制整个流程：
- en: '`transformers`, an optional list of transformers. For example, for lithium
    hydride, we will use the following: `transformers=[FreezeCoreTransformer(freeze_core=True,
    remove_orbitals=[4, 3])]`.'
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`transformers`，一个可选的转换器列表。例如，对于氢化锂，我们将使用以下设置：`transformers=[FreezeCoreTransformer(freeze_core=True,
    remove_orbitals=[4, 3])]`。'
- en: '`two_qubit_reduction`, a Boolean, by default `False`. It determines whether
    to carry out two-qubit reduction when possible.'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`two_qubit_reduction`，一个布尔值，默认为`False`。它决定了是否在可能的情况下执行两比特简化。'
- en: '`z2symmetry_reduction`, by default `None`, this indicates whether a Z2 symmetry
    reduction should be applied to resulting qubit operators that are computed based
    on mathematical symmetries that can be detected in the operator [de Keijzer].'
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`z2symmetry_reduction`，默认为`None`，这表示是否应该将Z2对称性简化应用于基于可以在算子中检测到的数学对称性计算出的结果量子比特算子[de
    Keijzer]。'
- en: '`name_solver`, the name of the solver, which defaults to `''NumPy exact solver''`.'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name_solver`，求解器的名称，默认为`''NumPy exact solver''`。'
- en: '`solver`, either one of the solvers defined in Section *5.2.3, Setting up the
    VQE solver*, `numpy_solver`, `vqe_ucc_solver`, or `vqe_tl_solver`. It defaults
    to `NumPyMinimumEigensolver()`.'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`solver`，可以是第5.2.3节中定义的求解器之一，即`numpy_solver`、`vqe_ucc_solver`或`vqe_tl_solver`。默认为`NumPyMinimumEigensolver()`。'
- en: '`plot_bopes`, a Boolean, set to `True` to compute and plot the BOPES of the
    molecule.'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`plot_bopes`，一个布尔值，设置为`True`以计算和绘制分子的BOPES。'
- en: '`perturbation_steps`, the points along the degrees of freedom to evaluate,
    in this case a distance in angstroms. It defaults to `np.linspace(-1, 1, 3)`.'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`perturbation_steps`，评估自由度的点，在这种情况下是一个以埃为单位的距离。默认为`np.linspace(-1, 1, 3)`。'
- en: '`pyqmc`, set to `True` by default to run the PyQMC Python module.'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pyqmc`，默认设置为`True`以运行PyQMC Python模块。'
- en: '`n_ancillae`, an integer that defaults to `3` that represents the number of
    ancillae qubits used by the `run_qpe()` function.'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`n_ancillae`，一个整数，默认为`3`，代表`run_qpe()`函数使用的辅助量子比特的数量。'
- en: '`num_time_slices`, an integer that defaults to `1`, which is number of `PauliTrotterEvolution`
    class.'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`num_time_slices`，一个整数，默认为`1`，代表`PauliTrotterEvolution`类的数量。'
- en: '`loss`, an optional array of floats that is generated by the callback function.'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`loss`，一个可选的浮点数数组，由回调函数生成。'
- en: '`label`, a character string to be displayed by the `plot_loss()` function.'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`label`，一个字符串，将由`plot_loss()`函数显示。'
- en: '`target`, a float to be displayed by the `plot_loss()` function.'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target`，一个浮点数，将由`plot_loss()`函数显示。'
- en: '`show`, set to `True` by default to display intermediate results.'
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`show`，默认设置为`True`以显示中间结果。'
- en: 'Here is the definition of the `solve_ground_state()` function:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是`solve_ground_state()`函数的定义：
- en: '[PRE55]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: We now present the code that is contained in the `solve_ground_state()` function.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们展示包含在`solve_ground_state()`函数中的代码。
- en: 'We first define the electronic structure molecule driver by selecting the PySCF
    driver type and the basis set `sto3g` in which the molecular orbitals are to be
    expanded into. Here is the code:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先通过选择PySCF驱动类型和分子轨道要展开的基础集`sto3g`来定义电子结构分子驱动程序。以下是代码：
- en: '[PRE56]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Then, if both `num_electrons` and `num_molecular_orbitals` are specified, we
    call the `ActiveSpaceTransformer` function to split the computation into a classical
    and a quantum part:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，如果同时指定了`num_electrons`和`num_molecular_orbitals`，我们调用`ActiveSpaceTransformer`函数将计算分为经典和量子两部分：
- en: '[PRE57]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Next, we create an `ElectronicStructureProblem` that produces the list of fermionic
    operators as follows:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们创建一个`ElectronicStructureProblem`，如下生成费米子算子的列表：
- en: '[PRE58]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'We then use the `second_q_ops()` method [Qiskit_Nat_3], which returns a list
    of second quantized operators: Hamiltonian operator, total particle number operator,
    total angular momentum operator, total magnetization operator, and if available,
    ![](img/Formula_05_045.png), ![](img/Formula_05_128.png), ![](img/Formula_05_129.png)
    dipole operators:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用`second_q_ops()`方法[Qiskit_Nat_3]，它返回一个包含量子化算子的列表：哈密顿算子、总粒子数算子、总角动量算子、总磁化算子，以及如果可用的话，![](img/Formula_05_045.png)，![](img/Formula_05_128.png)，![](img/Formula_05_129.png)偶极算子：
- en: '[PRE59]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'We get the particle number property of the molecule by calling the `particle_number()`
    function:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过调用`particle_number()`函数来获取分子的粒子数属性：
- en: '[PRE60]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'If the input parameter `show` is set to `True`, we set truncation to `1000`
    with the `set_truncation(1000)` method and then we print the fermionic Hamiltonian
    operator of the molecule:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 如果输入参数`show`设置为`True`，我们使用`set_truncation(1000)`方法将截断设置为`1000`，然后打印分子的费米子哈密顿算子：
- en: '[PRE61]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Next, we use the `fermion_to_qubit()` function defined in *Section 4.8, Constructing
    a qubit Hamiltonian with Qiskit Nature,* to convert a fermionic operator to a
    qubit operator:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用在第4.8节*使用Qiskit Nature构建量子比特哈密顿量*中定义的`fermion_to_qubit()`函数将费米子算符转换为量子比特算符：
- en: '[PRE62]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Then we call the `run_PySCF()` function that we defined earlier to run the
    PySCF RHF method:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们调用之前定义的`run_PySCF()`函数来运行PySCF RHF方法：
- en: '[PRE63]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Then we call the `run_qpe()` function to perform a QPE and return the most
    likely eigenvalue of a Hamiltonian as an estimation of the electronic ground state
    energy:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们调用`run_qpe()`函数执行QPE，并将哈密顿量的最可能本征值作为电子基态能量的估计值返回：
- en: '[PRE64]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Next, we call the `run_vqe()` function defined earlier to solve for the ground
    state:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们调用之前定义的`run_vqe()`函数来求解基态：
- en: '[PRE65]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'If the `loss` parameter is not an empty array, we call the `plot_loss()` function
    to plot the evolution of the loss as a function of the number of iterations:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`loss`参数不是一个空数组，我们调用`plot_loss()`函数来绘制损失随迭代次数的变化：
- en: '[PRE66]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Next, if the `plot_bopes` parameter is set to `True`, we use the `BOPESSampler`
    Python class [Qiskit_Nat_6], which manages the process of varying the geometry
    and repeatedly calling the ground state solver, and then we get and plot the BOPES:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，如果`plot_bopes`参数设置为`True`，我们使用`BOPESSampler` Python类[Qiskit_Nat_6]，它管理改变几何形状并重复调用基态求解器的过程，然后我们获取并绘制BOPES：
- en: '[PRE67]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Finally, we let the `solve_ground_state()` function return the following parameters
    to the caller:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们让`solve_ground_state()`函数将以下参数返回给调用者：
- en: '`fermionic hamiltonian`, the Fermionic Hamiltonian operator of the molecule'
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fermionic hamiltonian`，分子的费米子哈密顿量算符'
- en: '`particle number`, the particle number property of the molecule'
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`particle number`，分子的粒子数性质'
- en: '`qubit_op`, the qubit Hamiltonian operator'
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`qubit_op`，量子比特哈密顿量算符'
- en: '`qubit_converter`, either `JordanWignerMapper()`, `ParityMapper()`, or `BravyiKitaevMapper()`,
    which is the output of the `fermion_to_qubit()` function'
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`qubit_converter`，可以是`JordanWignerMapper()`、`ParityMapper()`或`BravyiKitaevMapper()`，这是`fermion_to_qubit()`函数的输出'
- en: '`ground_state`, the ground state of the molecule, if convergence has been achieved'
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ground_state`，分子的基态，如果已经收敛'
- en: 'with the following `return` statement:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下`return`语句：
- en: '[PRE68]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: We now illustrate how to use the `solve_ground_state()` function with different
    molecules, different mappers, and different classical solvers.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们演示如何使用`solve_ground_state()`函数处理不同的分子、不同的映射器和不同的经典求解器。
- en: 5.2.1\. Hydrogen molecule (H2)
  id: totrans-322
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5.2.1. 氢分子（H2）
- en: 'We follow the process described in *Section 4.6.1, Constructing a fermionic
    Hamiltonian operator of the hydrogen molecule*. First, we define the geometry
    of the hydrogen molecule as follows:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 我们遵循*第4.6.1节*中描述的过程，即*构建氢分子的费米子哈密顿量算符*。首先，我们定义氢分子的几何形状如下：
- en: '[PRE69]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: We showed the particle number property of the hydrogen molecule in *Figure 4.9*
    in *Section 4.6.1, Constructing a fermionic Hamiltonian operator of the hydrogen
    molecule,* where we see four **spin orbitals** (**SOs**), one ![](img/Formula_05_130.png)
    electron, and one ![](img/Formula_05_131.png) electron.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在*第4.6.1节*的*图4.9*中展示了氢分子的粒子数性质，其中我们看到四个**自旋轨道**（**SOs**），一个![公式](img/Formula_05_130.png)电子和一个![公式](img/Formula_05_131.png)电子。
- en: We showed the fermionic Hamiltonian operator of the hydrogen molecule in *Figure
    4.13* in *Section 4.6.1, Constructing a fermionic Hamiltonian operator of the
    hydrogen molecule*.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在第4.6.1节*构建氢分子的费米子哈密顿量算符*中展示了氢分子的费米子哈密顿量算符。
- en: Varying the hydrogen molecule
  id: totrans-327
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 变化氢分子
- en: 'We specify the type of molecular variation, `Molecule.absolute_stretching`,
    as follows:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 我们指定分子变体的类型，`Molecule.absolute_stretching`，如下所示：
- en: '[PRE70]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'We specify that the first atom of the specified atom pair is moved closer to
    the second atom. The numbers refer to the index of the atom in the geometric definition
    list. Here is the code:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 我们指定将指定原子对中的第一个原子移动到第二个原子更近的位置。数字指的是几何定义列表中原子的索引。以下是代码：
- en: '[PRE71]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'We alter the original molecular definition as follows:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 我们按如下方式修改原始分子定义：
- en: '[PRE72]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Now we proceed with solving for the ground state.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们继续求解基态。
- en: Solving for the ground state
  id: totrans-335
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 求解基态
- en: 'We now run VQE using the NumPy exact minimum eigensolver:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们使用NumPy精确最小本征值求解器运行VQE：
- en: '[PRE73]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '*Figure 5.5* shows the results of the computation by the `run_PySCF()` and
    `run_QPE()`functions:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '*图5.5*显示了`run_PySCF()`和`run_QPE()`函数的计算结果：'
- en: '![](img/B18268_Figure_5.5.jpg)'
  id: totrans-339
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B18268_Figure_5.5.jpg)'
- en: Figure 5.5 – Ground-state of the H2 molecule with PySCF RHF, PyQMC Monte Carlo,
    and QPE
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.5 – 使用 PySCF RHF、PyQMC 模拟退火和 QPE 的 H2 分子基态
- en: '*Figure 5.6* shows the result of the VQE computation:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5.6* 展示了 VQE 计算的结果：'
- en: '![](img/B18268_Figure_5.6.jpg)'
  id: totrans-342
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18268_Figure_5.6.jpg)'
- en: Figure 5.6 – Ground-state of the H2 molecule with VQE using the NumPy minimum
    eigensolver
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.6 – 使用 NumPy 最小特征值求解器进行 VQE 的 H2 分子基态
- en: 'Next, we run the VQE using the UCC factory ansatz [VQE_2] [VQE_3]:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用 UCC 工厂基组（[VQE_2] [VQE_3]）运行 VQE：
- en: '[PRE74]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '*Figure 5.7* shows the result:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5.7* 展示了结果：'
- en: '![](img/B18268_Figure_5.7.jpg)'
  id: totrans-347
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18268_Figure_5.7.jpg)'
- en: Figure 5.7 – Ground-state of the H2 molecule with VQE using the UCC factory
    ansatz
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.7 – 使用 UCC 工厂基组进行 VQE 的 H2 分子基态
- en: 'Now we run the VQE using a heuristic ansatz, the Two-Local circuit with the
    default SLSQP optimizer [Panagiotis]:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们使用启发式基组，默认的 SLSQP 优化器（[Panagiotis]）运行 VQE：
- en: '[PRE75]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '*Figure 5.8* shows the result:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5.8* 展示了结果：'
- en: '![](img/B18268_Figure_5.8.jpg)'
  id: totrans-352
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18268_Figure_5.8.jpg)'
- en: Figure 5.8 – Ground-state of the H2 molecule with VQE using the Two-Local circuit
    and SLSQP
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.8 – 使用 Two-Local 电路和 SLSQP 进行 VQE 的 H2 分子基态
- en: 'We define the `qnspsa()` function as follows:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义 `qnspsa()` 函数如下：
- en: '[PRE76]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Here is the code that sets up the VQE using a heuristic ansatz and the QN-SPSA
    optimizer:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是设置 VQE 使用启发式基组和 QN-SPSA 优化器的代码：
- en: '[PRE77]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'Now we call `solve_ground_state()` with the heuristic ansatz and the QN-SPSA
    optimizer:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们使用启发式基组和 QN-SPSA 优化器调用 `solve_ground_state()`：
- en: '[PRE78]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '*Figure 5.9* shows the result:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5.9* 展示了结果：'
- en: '![](img/B18268_Figure_5.9.jpg)'
  id: totrans-361
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18268_Figure_5.9.jpg)'
- en: Figure 5.9 – Ground-state of the H2 molecule with VQE using the Two-Local circuit
    and QN-SPSA
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.9 – 使用 Two-Local 电路和 QN-SPSA 进行 VQE 的 H2 分子基态
- en: '*Figure 5.10* shows the plot of the loss function of the QN-SPSA optimizer:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5.10* 展示了 QN-SPSA 优化器的损失函数图：'
- en: '![](img/B18268_Figure_5.10.jpg)'
  id: totrans-364
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18268_Figure_5.10.jpg)'
- en: Figure 5.10 – Plot of the loss function of the VQE using the Two-Local circuit
    and QN-SPSA for the H2 molecule
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.10 – 使用 Two-Local 电路和 QN-SPSA 对 H2 分子进行 VQE 的损失函数图
- en: The table shown in *Figure 5.11* summarizes calculations obtained with the Python
    packages PySCF RHF, PyQMC, and with the Qiskit Nature classes, VQE with NumPy
    exact solver, SLSQP, QN-SPSA, and QPE.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5.11* 中的表格总结了使用 Python 包 PySCF RHF、PyQMC 以及 Qiskit Nature 类（VQE 使用 NumPy
    精确求解器、SLSQP、QN-SPSA 和 QPE）获得的计算结果。'
- en: '![](img/B18268_Figure_5.11.jpg)'
  id: totrans-367
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18268_Figure_5.11.jpg)'
- en: Figure 5.11 – Table summarizing the calculations of the ground state energy
    obtained with the H2 molecule
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.11 – 总结使用 H2 分子获得的基态能量的计算表格
- en: '*Figure 5.11* shows close agreement between the different calculations of the
    electronic ground state and the total ground state energies with the same qubit
    mapper called the `ParityMapper()` with `two_qubit_reduction=True`. The PyQMC
    method gives the lowest total energy -1.162 Ha and is the most accurate. It is
    consistent with the result -1.168 Ha shown in Ref. [Ebomwonyi].'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5.11* 显示了不同电子基态计算和总基态能量与相同量子比特映射器（称为 `ParityMapper()`，`two_qubit_reduction=True`）的紧密一致性。PyQMC
    方法给出了最低的总能量 -1.162 Ha，是最准确的。它与参考文献 [Ebomwonyi] 中显示的 -1.168 Ha 的结果一致。'
- en: Computing the BOPES
  id: totrans-370
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 计算BOPES
- en: 'We now compute and plot the BOPES of the hydrogen molecule as follows:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在计算并绘制氢分子的 BOPES 如下：
- en: '[PRE79]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '*Figure 5.12* shows the plot of the BOPES of the hydrogen molecule:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5.12* 展示了氢分子 BOPES 的图：'
- en: '![](img/B18268_Figure_5.12.jpg)'
  id: totrans-374
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18268_Figure_5.12.jpg)'
- en: Figure 5.12 – Plot of the BOPES of the hydrogen molecule
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.12 – 氢分子 BOPES 的图
- en: 5.2.2\. Lithium hydride molecule
  id: totrans-376
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5.2.2. 锂氢分子
- en: 'We follow the process described in *Section 4.6.2, Constructing a fermionic
    Hamiltonian operator of the lithium hydride molecule*. First, we define the geometry
    of the lithium hydride (LiH) molecule as follows:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 我们遵循 *第 4.6.2 节，构建锂氢分子的费米子哈密顿算符* 中描述的过程。首先，我们定义锂氢（LiH）分子的几何结构如下：
- en: '[PRE80]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: We showed the particle number property in *Figure 4.17* in *Section 4.6.2, Constructing
    a fermionic Hamiltonian operator of the lithium hydride molecule*, where we see
    six SOs, one ![](img/Formula_05_132.png) electron, and one ![](img/Formula_05_133.png)
    electron. We showed the fermionic Hamiltonian operator of the lithium hydride
    molecule in *Figure 4.20* in *Section 4.6.2, Constructing a fermionic Hamiltonian
    operator of the lithium hydride molecule*.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在*第4.6.2节*的*图4.17*中展示了粒数属性，其中我们看到了六个SOs、一个![](img/Formula_05_132.png)电子和一个![](img/Formula_05_133.png)电子。我们在*第4.6.2节*的*图4.20*中展示了锂氢分子的费米子哈密顿算符。
- en: Varying the lithium hydride molecule
  id: totrans-380
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 改变锂氢分子
- en: 'We alter the original molecular definition as follows:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如下修改了原始分子定义：
- en: '[PRE81]'
  id: totrans-382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: Solving for the ground state
  id: totrans-383
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 求解基态
- en: 'We run VQE using the NumPy exact minimum eigensolver:'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用NumPy精确特征值求解器运行VQE：
- en: '[PRE82]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '*Figure 5.13* shows the result of the computation by the `run_PySCF()` and
    `run_QPE()` functions:'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: '*图5.13* 展示了`run_PySCF()`和`run_QPE()`函数的计算结果：'
- en: '![](img/B18268_Figure_5.13.jpg)'
  id: totrans-387
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18268_Figure_5.13.jpg)'
- en: Figure 5.13 – Ground state of the LiH molecule with PySCF RHF, PyQMC Monte Carlo,
    and QPE
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.13 – 使用PySCF RHF、PyQMC蒙特卡洛和QPE得到的LiH分子的基态
- en: '*Figure 5.14* shows the result of the VQE computation:'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: '*图5.14* 展示了VQE计算的成果：'
- en: '![](img/B18268_Figure_5.14.jpg)'
  id: totrans-390
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18268_Figure_5.14.jpg)'
- en: Figure 5.14 – Ground state of the LiH molecule with VQE using the NumPy minimum
    eigensolver
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.14 – 使用NumPy最小特征值求解器的VQE得到的LiH分子的基态
- en: 'We run the VQE using the Two-Local circuit and SLSQP:'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用Two-Local电路和SLSQP运行VQE：
- en: '[PRE83]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '*Figure 5.15* shows the result:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: '*图5.15* 展示了结果：'
- en: '![](img/B18268_Figure_5.15.jpg)'
  id: totrans-395
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18268_Figure_5.15.jpg)'
- en: Figure 5.15 – Ground state of the LiH molecule with VQE using the Two-Local
    circuit and SLSQP
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.15 – 使用Two-Local电路和SLSQP的VQE得到的LiH分子的基态
- en: 'We define the `qnspsa()` function as follows:'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如下定义`qnspsa()`函数：
- en: '[PRE84]'
  id: totrans-398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'Here is the code that sets up the VQE using a heuristic ansatz and the QN-SPSA
    optimizer:'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是使用启发式基和QN-SPSA优化器的VQE设置的代码：
- en: '[PRE85]'
  id: totrans-400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'Now we call `solve_ground_state()` with the heuristic ansatz and the QN-SPSA
    optimizer:'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们使用启发式基和QN-SPSA优化器调用`solve_ground_state()`：
- en: '[PRE86]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '*Figure 5.16* shows the result:'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: '*图5.16* 展示了结果：'
- en: '![](img/B18268_Figure_5.16.jpg)'
  id: totrans-404
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18268_Figure_5.16.jpg)'
- en: Figure 5.16 – Ground state of the LiH molecule with VQE using the Two-Local
    circuit and QN-SPSA
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.16 – 使用Two-Local电路和QN-SPSA的VQE得到的LiH分子的基态
- en: '*Figure 5.17* shows the plot of the loss function of the QN-SPSA optimizer:'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: '*图5.17* 展示了QN-SPSA优化器的损失函数图：'
- en: '![](img/B18268_Figure_5.17.jpg)'
  id: totrans-407
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18268_Figure_5.17.jpg)'
- en: Figure 5.17 – Loss function of the VQE using the Two-Local circuit and QN-SPSA
    for the LiH molecule
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.17 – 使用Two-Local电路和QN-SPSA的VQE对LiH分子的损失函数
- en: 'The table shown in *Figure 5.18* summarizes calculations obtained with the
    Python packages PySCF RHF, PyQMC, and with the Qiskit Nature classes, VQE with
    the NumPy exact solver, SLSQP, QN-SPSA, and QPE:'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: '*图5.18* 中显示的表格总结了使用Python包PySCF RHF、PyQMC以及Qiskit Nature类、使用NumPy精确求解器的VQE、SLSQP、QN-SPSA和QPE得到的计算结果：'
- en: '![](img/B18268_Figure_5.18.jpg)'
  id: totrans-410
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18268_Figure_5.18.jpg)'
- en: Figure 5.18 – Table summarizing the calculations of the ground state energy
    obtained with the LiH molecule
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.18 – 总结使用LiH分子得到的基态能量的计算表格
- en: '*Figure 5.18* shows close agreement between the different calculations of the
    electronic ground state and the total ground state energies. The PyQMC method
    gives the lowest total energy -8.102 Ha and is the most accurate. It is consistent
    with the result -8.07 Ha shown in Ref. [Adamowicz_3].'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: '*图5.18* 显示了不同电子基态计算和总基态能量之间的紧密一致性。PyQMC方法给出了最低的总能量-8.102 Ha，并且是最准确的。它与参考文献[Adamowicz_3]中显示的-8.07
    Ha的结果一致。'
- en: Computing the BOPES
  id: totrans-413
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 计算BOPES
- en: 'We now compute and plot the BOPES of the lithium hydride molecule as follows:'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在如下计算并绘制锂氢分子的BOPES：
- en: '[PRE87]'
  id: totrans-415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '*Figure 5.19* shows the result:'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: '*图5.19* 展示了结果：'
- en: '![](img/B18268_Figure_5.19.jpg)'
  id: totrans-417
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18268_Figure_5.19.jpg)'
- en: Figure 5.19 – Plot of the BOPES of the LiH molecule
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.19 – LiH分子的BOPES图
- en: 5.2.3\. Macro molecule
  id: totrans-419
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5.2.3. 宏分子
- en: We now explore the HIV use case of the IBM Quantum Challenge Africa 2021, Quantum
    Chemistry for HIV [Africa21]. In their challenge they aimed to determine whether
    a toy model of an anti-retroviral molecule can bind with a toy model of a protease
    molecule. Since the anti-retroviral molecule has many atoms, it is approximated
    by using a single carbon atom. The toy model of the protease molecule is represented
    by a component of the formamide molecule (HCONH2); particularly it is the carbon-oxygen-nitrogen
    part of the formamide molecule. In short, the experiment is to determine whether
    a single carbon atom, can bind to the carbon-oxygen-nitrogen component of the
    formamide molecule. We will get the answer to the question posed by IBM by plotting
    the BOPES of a macro molecule, which is the formamide molecule plus the carbon
    atom.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们探索IBM量子挑战非洲2021年HIV的使用案例，量子化学在HIV中的应用 [Africa21]。在他们的挑战中，他们旨在确定一个抗逆转录病毒分子的玩具模型是否能与一个蛋白酶分子的玩具模型结合。由于抗逆转录病毒分子有多个原子，它通过使用单个碳原子进行近似。蛋白酶分子的玩具模型由甲酰胺分子（HCONH2）的一个组成部分表示；特别是它是甲酰胺分子的碳-氧-氮部分。简而言之，实验是确定单个碳原子是否能与甲酰胺分子的碳-氧-氮部分结合。我们将通过绘制宏观分子（甲酰胺分子加上碳原子）的BOPES来得到IBM提出的问题的答案。
- en: 'First, we define the macro molecule with the ASE `Atoms` object [ASE_1]:'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们使用ASE的`Atoms`对象定义宏观分子 [ASE_1]：
- en: '[PRE88]'
  id: totrans-422
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'Then we display a 3D view of the molecule with the ASE viewer X3D for Jupyter
    notebooks [ASE2]:'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用ASE查看器X3D为Jupyter笔记本显示分子的3D视图 [ASE2]：
- en: '[PRE89]'
  id: totrans-424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '*Figure 5.20* shows the result. The nitrogen atom is depicted on the left side
    in blue, the oxygen atom on the right side in red, the carbon atoms in the middle
    in gray, and the three hydrogen atoms are the smallest ones in light gray. The
    carbon atom on the top is not bound to the other atoms.'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: '*图5.20*显示了结果。氮原子在左侧用蓝色表示，氧原子在右侧用红色表示，碳原子在中间用灰色表示，三个氢原子是浅灰色中最小的。顶部的碳原子没有与其他原子结合。'
- en: '![](img/B18268_Figure_5.20.jpg)'
  id: totrans-426
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18268_Figure_5.20.jpg)'
- en: Figure 5.20 – Macro molecule
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.20 – 宏观分子
- en: 'We specify the type of molecular variation, `Molecule.absolute_stretching`,
    as follows:'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 我们指定分子变体的类型，`Molecule.absolute_stretching`，如下所示：
- en: '[PRE90]'
  id: totrans-429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'We specify which atoms the variation applies to. The numbers refer to the index
    of the atom in the geometric definition list. The single carbon atom is moved
    closer to the nitrogen atom:'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 我们指定变体应用于哪些原子。数字指的是几何定义列表中原子的索引。单个碳原子被移动到氮原子更近的位置：
- en: '[PRE91]'
  id: totrans-431
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'We define the molecular geometry of the macro molecule with the Qiskit `Molecule`
    class as follows:'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用Qiskit的`Molecule`类定义宏观分子的分子几何形状，如下所示：
- en: '[PRE92]'
  id: totrans-433
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: Now we can solve for the ground state.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以求解基态。
- en: Solving for the ground state
  id: totrans-435
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 求解基态
- en: 'We reduce the quantum workload by specifying that certain electrons should
    be treated with a quantum computing algorithm, while the remaining electrons should
    be classically approximated with the Qiskit `ActiveSpaceTransformer` class, which
    takes in two arguments:'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 通过指定某些电子应使用量子计算算法处理，而其余电子应使用Qiskit的`ActiveSpaceTransformer`类进行经典近似，从而减少量子工作量，该类接受两个参数：
- en: '`num_electrons`, the number of electrons selected from the outermost electrons,
    counting inwards, to be treated with a quantum computing algorithm.'
  id: totrans-437
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`num_electrons`，从最外层电子中选出的电子数量，从外向内计数，用于量子计算算法处理。'
- en: '`num_molecular_orbitals`, the number of orbitals to allow those electrons to
    roam over (around the so-called Fermi level). It determines how many qubits are
    needed.'
  id: totrans-438
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`num_molecular_orbitals`，允许这些电子在所谓的费米能级周围（漫游）的轨道数量。它决定了需要多少个量子比特。'
- en: 'We print the selection of parameters of the VQE run:'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 我们打印VQE运行的参数选择：
- en: '[PRE93]'
  id: totrans-440
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'Here is the result:'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是结果：
- en: '[PRE94]'
  id: totrans-442
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'We then run the VQE using the NumPy exact minimum eigensolver:'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们使用NumPy精确最小本征值求解器运行VQE：
- en: '[PRE95]'
  id: totrans-444
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '*Figure 5.21* shows the first 20 terms of the fermionic operator of the macro
    molecule:'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: '*图5.21*显示了宏观分子费米子算符的前20项：'
- en: '![](img/B18268_Figure_5.21.jpg)'
  id: totrans-446
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18268_Figure_5.21.jpg)'
- en: Figure 5.21 – First 20 terms of the fermionic Hamiltonian operator of the macro
    molecule
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.21 – 宏观分子费米子哈密顿算符的前20项
- en: '*Figure 5.22* shows the qubit Hamiltonian operator for the outermost two electrons
    of the macro molecule obtained with the parity transformation. Only two qubits
    are needed as expected for a parity mapping of the fermionic Hamiltonian operator
    to the qubit Hamiltonian operator:'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: '*图5.22* 展示了通过偶宇称变换获得的大分子最外层两个电子的量子比特哈密顿算符。正如预期的那样，只需要两个量子比特来将费米子哈密顿算符映射到量子比特哈密顿算符：'
- en: '![](img/B18268_Figure_5.22.jpg)'
  id: totrans-449
  prefs: []
  type: TYPE_IMG
  zh: '![图5.22](img/B18268_Figure_5.22.jpg)'
- en: Figure 5.22 – Qubit Hamiltonian operator of the outermost two electrons of the
    macro molecule
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.22 – 大分子最外层两个电子的量子比特哈密顿算符
- en: '*Figure 5.23* shows the total ground state energy of the molecule computed
    by the PySCF RHF Python package and an estimation of the electronic ground state
    energy of the outermost two electrons of the molecule computed by the Qiskit Nature
    QPE class:'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: '*图5.23* 展示了由PySCF RHF Python软件包计算的分子的总基态能量以及由Qiskit Nature QPE类计算的最外层两个电子的分子电子基态能量的估计：'
- en: '![](img/B18268_Figure_5.23.jpg)'
  id: totrans-452
  prefs: []
  type: TYPE_IMG
  zh: '![图5.23](img/B18268_Figure_5.23.jpg)'
- en: Figure 5.23 – Total and electronic ground state energy of the macro molecule
    by PySCF and QPE respectively
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.23 – 由PySCF和QPE分别计算的大分子的总基态能量和电子基态能量
- en: '*Figure 5.24* shows the result of VQE computation:'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: '*图5.24* 展示了VQE计算的结果：'
- en: '![](img/B18268_Figure_5.24.jpg)'
  id: totrans-455
  prefs: []
  type: TYPE_IMG
  zh: '![图5.24](img/B18268_Figure_5.24.jpg)'
- en: Figure 5.24 – Ground state of macro molecule using the NumPy exact minimum eigensolver
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.24 – 使用NumPy精确最小本征值求解器计算的大分子基态
- en: The electronic ground state energy of the outermost two electrons of the macromolecule
    computed by the QPE, ![](img/Formula_05_134.png) (Hartree), and by the VQE, ![](img/Formula_05_135.png),
    Qiskit Nature classes are in good agreement.
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 通过QPE计算的大分子最外层两个电子的电子基态能量，![](img/Formula_05_134.png)（哈特里），以及通过VQE和Qiskit Nature类计算的大分子电子基态能量，![](img/Formula_05_135.png)，是一致的。
- en: The total ground state energy of the macro molecule computed by the PySCF RHF
    Python package, ![](img/Formula_05_136.png) (Hartree), and by the Qiskit Nature
    VQE class, ![](img/Formula_05_137.png), are in good agreement.
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 由PySCF RHF Python软件包计算的大分子的总基态能量，![](img/Formula_05_136.png)（哈特里），以及由Qiskit
    Nature VQE类计算的大分子的总基态能量，![](img/Formula_05_137.png)，是一致的。
- en: Computing the BOPES
  id: totrans-459
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 计算BOPES
- en: 'We now compute and plot the BOPES of the macro molecule as follows:'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在按照以下方式计算和绘制大分子的BOPES：
- en: '[PRE96]'
  id: totrans-461
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '*Figure 5.25* shows the result:'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: '*图5.25* 展示了结果：'
- en: '![](img/B18268_Figure_5.25.jpg)'
  id: totrans-463
  prefs: []
  type: TYPE_IMG
  zh: '![图5.25](img/B18268_Figure_5.25.jpg)'
- en: Figure 5.25 – Plot of the BOPES of the macro molecule
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.25 – 大分子BOPES的绘图
- en: The plot of the BOPES of the macro molecule shows no clear minimum for any separation.
    We conclude that there is no binding of the single carbon atom to the toy protease
    molecule of formamide.
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 大分子BOPES的绘图显示在任何分离下都没有明显的最小值。我们得出结论，单个碳原子与甲酰胺玩具蛋白酶分子没有结合。
- en: Summary
  id: totrans-466
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have introduced classical and hybrid classical-quantum variational
    methods to find the lowest energy eigenvalue for a quantum system and their implementation
    with a classical PyQMC variational Monte Carlo Python package, which interoperates
    with the PySCF, and Qiskit Nature using the STO-3G basis with the Python-based
    PySCF driver.
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了用于寻找量子系统最低能量本征值的经典和混合经典-量子变分方法，以及使用与PySCF和Qiskit Nature兼容的基于Python的PyQMC变分蒙特卡洛Python软件包的实现，该软件包使用STO-3G基和基于Python的PySCF驱动程序。
- en: We have illustrated these methods, solving for the ground state and plotting
    the BOPES of the hydrogen molecule, the lithium hydride molecule, and the macro
    molecule.
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经展示了这些方法，求解了氢分子、氢化锂分子和宏分子的基态，并绘制了它们的BOPES。
- en: The results we obtained with Qiskit Nature VQE and QPE are in good agreement
    with those obtained with the PyQMC and PySCF RHF packages for several combinations
    of fermionic-to-qubit Hamiltonian mappers and classical gradient descent solvers
    and by reducing the quantum workload to the outermost two electrons of the formamide
    molecule. We hope these results will encourage the reader to replay these experiments
    with different choices of solvers and with other molecules.
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用Qiskit Nature VQE和QPE获得的结果与使用PyQMC和PySCF RHF软件包获得的那些结果在几个费米子到量子比特哈密顿映射器和经典梯度下降求解器的组合中以及通过将量子工作量减少到甲酰胺分子的最外层两个电子的形式中是一致的。我们希望这些结果将鼓励读者用不同的求解器和不同的分子重新进行这些实验。
- en: Questions
  id: totrans-470
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'Please test your understanding of the concepts presented in this chapter with
    the corresponding Google Colab notebook:'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 请使用相应的Google Colab笔记本测试你对本章中提出的概念的理解：
- en: Does the variational theorem apply to excited states?
  id: totrans-472
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 变分定理是否适用于激发态？
- en: 'True or False: The Metropolis-Hastings method is a way to approximate integration
    over spatial coordinates.'
  id: totrans-473
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对或错：Metropolis-Hastings 方法是一种近似空间坐标积分的方法。
- en: 'True or False: VQE is only a quantum computing algorithm and does not require
    the use of classical computing.'
  id: totrans-474
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对或错：VQE 只是一个量子计算算法，不需要使用经典计算。
- en: Answers
  id: totrans-475
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 答案
- en: 'Yes'
  id: totrans-476
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是
- en: 'True'
  id: totrans-477
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对
- en: 'False'
  id: totrans-478
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 错误
- en: References
  id: totrans-479
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[ASE_0] Atomic Simulation Environment (ASE), [https://wiki.fysik.dtu.dk/ase/index.html](https://wiki.fysik.dtu.dk/ase/index.html)'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: '[ASE_0] 原子模拟环境 (ASE)，[https://wiki.fysik.dtu.dk/ase/index.html](https://wiki.fysik.dtu.dk/ase/index.html)'
- en: '[ASE_1] ASE, The Atoms object, [https://wiki.fysik.dtu.dk/ase/ase/atoms.html](https://wiki.fysik.dtu.dk/ase/ase/atoms.html)'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: '[ASE_1] ASE，原子对象，[https://wiki.fysik.dtu.dk/ase/ase/atoms.html](https://wiki.fysik.dtu.dk/ase/ase/atoms.html)'
- en: '[ASE_2] ASE Visualization, [https://wiki.fysik.dtu.dk/ase/ase/visualize/visualize.html#module-ase.visualize](https://wiki.fysik.dtu.dk/ase/ase/visualize/visualize.html#module-ase.visualize)'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: '[ASE_2] ASE 可视化，[https://wiki.fysik.dtu.dk/ase/ase/visualize/visualize.html#module-ase.visualize](https://wiki.fysik.dtu.dk/ase/ase/visualize/visualize.html#module-ase.visualize)'
- en: '[Adamowicz_3] Tung WC, Pavanello M, Adamowicz L., Very accurate potential energy
    curve of the LiH molecule. TABLE I. Comparison of the convergence of the BO energy,
    in Eh, for the ground state of LiH molecule at R = 3.015 bohrs, J Chem Phys. 2011
    Feb 14;134(6):064117\. doi: 10.1063/1.3554211, [https://doi.org/10.1063/1.3554211](https://doi.org/10.1063/1.3554211)'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: '[Adamowicz_3] Tung WC，Pavanello M，Adamowicz L.，LiH 分子的非常精确的势能曲线。表 I. LiH 分子基态在
    R = 3.015 bohr 时的 BO 能量收敛性比较，J Chem Phys. 2011 年 2 月 14 日；134(6)：064117。doi：10.1063/1.3554211，[https://doi.org/10.1063/1.3554211](https://doi.org/10.1063/1.3554211)'
- en: '[Africa21] IBM Quantum Challenge Africa 2021, [https://github.com/qiskit-community/ibm-quantum-challenge-africa-2021](https://github.com/qiskit-community/ibm-quantum-challenge-africa-2021)'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: '[Africa21] IBM 量子挑战非洲 2021，[https://github.com/qiskit-community/ibm-quantum-challenge-africa-2021](https://github.com/qiskit-community/ibm-quantum-challenge-africa-2021)'
- en: '[Burg] Vera von Burg, Guang Hao Low, Thomas Häner, Damian S. Steiger, Markus
    Reiher, Martin Roetteler, Matthias Troyer, Quantum computing enhanced computational
    catalysis, 3 Mar 2021, 10.1103/PhysRevResearch.3.033055, [https://arxiv.org/abs/2007.14460](https://arxiv.org/abs/2007.14460)'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: '[Burg] Vera von Burg，Guang Hao Low，Thomas Häner，Damian S. Steiger，Markus Reiher，Martin
    Roetteler，Matthias Troyer，量子计算增强的计算催化，2021 年 3 月 3 日，10.1103/PhysRevResearch.3.033055，[https://arxiv.org/abs/2007.14460](https://arxiv.org/abs/2007.14460)'
- en: '[Bushmanov] Sergey Bushmanov, How to plot a histogram using Matplotlib in Python
    with a list of data?, Stack Overflow, [https://stackoverflow.com/questions/33203645/how-to-plot-a-histogram-using-matplotlib-in-python-with-a-list-of-data](https://stackoverflow.com/questions/33203645/how-to-plot-a-histogram-using-matplotlib-in-python-with-a-list-of-data)'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: '[Bushmanov] Sergey Bushmanov，如何在 Python 中使用 Matplotlib 和数据列表绘制直方图？，Stack Overflow，[https://stackoverflow.com/questions/33203645/how-to-plot-a-histogram-using-matplotlib-in-python-with-a-list-of-data](https://stackoverflow.com/questions/33203645/how-to-plot-a-histogram-using-matplotlib-in-python-with-a-list-of-data)'
- en: '[Cao] Yudong Cao, Jonathan Romero, Jonathan P. Olson, Matthias Degroote, Peter
    D. Johnson, Mária Kieferová, Ian D. Kivlichan, Tim Menke, Borja Peropadre, Nicolas
    P. D. Sawaya, Sukin Sim, Libor Veis, Alán Aspuru-Guzik, Quantum Chemistry in the
    Age of Quantum Computing, Chem. Rev. 2019, 119, 19, 10856–10915, Aug 30, 2019,
    [https://doi.org/10.1021/acs.chemrev.8b00803](https://doi.org/10.1021/acs.chemrev.8b00803)'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: '[Cao] Yudong Cao，Jonathan Romero，Jonathan P. Olson，Matthias Degroote，Peter
    D. Johnson，Mária Kieferová，Ian D. Kivlichan，Tim Menke，Borja Peropadre，Nicolas
    P. D. Sawaya，Sukin Sim，Libor Veis，Alán Aspuru-Guzik，量子计算时代的量子化学，Chem. Rev. 2019，119，19，10856–10915，2019
    年 8 月 30 日，[https://doi.org/10.1021/acs.chemrev.8b00803](https://doi.org/10.1021/acs.chemrev.8b00803)'
- en: '[Chen] Sija Chen, Quantum Monte Carlo Methods, Maplesoft, [https://fr.maplesoft.com/Applications/Detail.aspx?id=154748](https://fr.maplesoft.com/Applications/Detail.aspx?id=154748)'
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: '[Chen] Sija Chen，量子蒙特卡罗方法，Maplesoft，[https://fr.maplesoft.com/Applications/Detail.aspx?id=154748](https://fr.maplesoft.com/Applications/Detail.aspx?id=154748)'
- en: '[Dagrada] Mario Dagrada, Improved quantum Monte Carlo simulations: from open
    to extended systems, Materials Science [cond-mat.mtrl-sci]. Université Pierre
    et Marie Curie - Paris VI; Universidad Nacional de San Martín, 2016\. English.
    ⟨NNT: 2016PA066349⟩. ⟨tel-01478313⟩, [https://tel.archives-ouvertes.fr/tel-01478313/document](https://tel.archives-ouvertes.fr/tel-01478313/document)'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: '[Dagrada] Mario Dagrada，改进的量子蒙特卡罗模拟：从开放到扩展系统，材料科学 [cond-mat.mtrl-sci]。皮埃尔和玛丽·居里大学
    - 巴黎第六大学；圣马丁国立大学，2016。英语。⟨NNT: 2016PA066349⟩。⟨tel-01478313⟩，[https://tel.archives-ouvertes.fr/tel-01478313/document](https://tel.archives-ouvertes.fr/tel-01478313/document)'
- en: '[Ebomwonyi] Ebomwonyi, Osarodion, A Quantum Monte Carlo Calculation of the
    Ground State Energy for the Hydrogen Molecule Using the CASINO Code, 2013, Table
    3.1: Comparative analysis of the ground state energies for the hydrogen molecule
    by different researchers, https://www.semanticscholar.org/paper/A-Quantum-Monte-Carlo-Calculation-of-the-Ground-for-Ebomwonyi/5316eb86f39cf4fa0a8fd06d136aac4db1105ad4'
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: '[埃博姆沃尼] 埃博姆沃尼，奥萨罗迪翁，使用CASINO代码对氢分子的基态能量进行量子蒙特卡罗计算，2013，表3.1：不同研究者对氢分子基态能量的比较分析，https://www.semanticscholar.org/paper/A-Quantum-Monte-Carlo-Calculation-of-the-Ground-for-Ebomwonyi/5316eb86f39cf4fa0a8fd06d136aac4db1105ad4'
- en: '[Freeman] Freedman–Diaconis rule, Wikipedia, [https://en.wikipedia.org/wiki/Freedman%E2%80%93Diaconis_rule](https://en.wikipedia.org/wiki/Freedman%E2%80%93Diaconis_rule)'
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: '[Freeman] 弗里德曼-迪亚科尼斯规则，维基百科，[https://en.wikipedia.org/wiki/Freedman%E2%80%93Diaconis_rule](https://en.wikipedia.org/wiki/Freedman%E2%80%93Diaconis_rule)'
- en: '[Gorelov] Vitaly Gorelov, Quantum Monte Carlo methods for electronic structure
    calculations: application to hydrogen at extreme conditions, 1.4.1 Variational
    Monte Carlo (VMC), [https://tel.archives-ouvertes.fr/tel-03045954/document](https://tel.archives-ouvertes.fr/tel-03045954/document)'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: '[戈列洛夫] 维塔利·戈列洛夫，电子结构计算的量子蒙特卡罗方法：应用于极端条件下的氢，1.4.1 变分蒙特卡罗（VMC），[https://tel.archives-ouvertes.fr/tel-03045954/document](https://tel.archives-ouvertes.fr/tel-03045954/document)'
- en: '[Grok] Grok the Bloch Sphere, [https://javafxpert.github.io/grok-bloch/](https://javafxpert.github.io/grok-bloch/)'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: '[Grok] 理解布洛赫球，[https://javafxpert.github.io/grok-bloch/](https://javafxpert.github.io/grok-bloch/)'
- en: '[H5py] Quick Start Guide, [https://docs.h5py.org/en/stable/quick.html](https://docs.h5py.org/en/stable/quick.html)'
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: '[H5py] 快速入门指南，[https://docs.h5py.org/en/stable/quick.html](https://docs.h5py.org/en/stable/quick.html)'
- en: '[IBM_CEO] IBM CEO: Quantum computing will take off ''like a rocket ship'' this
    decade, Fast Company, Sept 28, 2021., [https://www.fastcompany.com/90680174/ibm-ceo-quantum-computing-will-take-off-like-a-rocket-ship-this-decade](https://www.fastcompany.com/90680174/ibm-ceo-quantum-computing-will-take-off-like-a-rocket-ship-this-decade)'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: '[IBM_CEO] IBM首席执行官：本世纪量子计算将“像火箭一样”起飞，Fast Company，2021年9月28日，[https://www.fastcompany.com/90680174/ibm-ceo-quantum-computing-will-take-off-like-a-rocket-ship-this-decade](https://www.fastcompany.com/90680174/ibm-ceo-quantum-computing-will-take-off-like-a-rocket-ship-this-decade)'
- en: '[IBM_comp1] Welcome to IBM Quantum Composer, [https://quantum-computing.ibm.com/composer/docs/iqx/](https://quantum-computing.ibm.com/composer/docs/iqx/)'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: '[IBM_comp1] 欢迎使用IBM量子作曲家，[https://quantum-computing.ibm.com/composer/docs/iqx/](https://quantum-computing.ibm.com/composer/docs/iqx/)'
- en: '[IBM_comp2] IBM Quantum Composer, [https://quantum-computing.ibm.com/composer/files/new](https://quantum-computing.ibm.com/composer/files/new)'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: '[IBM_comp2] IBM量子作曲家，[https://quantum-computing.ibm.com/composer/files/new](https://quantum-computing.ibm.com/composer/files/new)'
- en: '[Lolur] Lolur, Phalgun, Magnus Rahm, Marcus Skogh, Laura García-Álvarez and
    Göran Wendin, Benchmarking the Variational Quantum Eigensolver through Simulation
    of the Ground State Energy of Prebiotic Molecules on High-Performance Computers,
    arXiv:2010.13578v2 [quant-ph], 5 Jan 2021, [https://arxiv.org/pdf/2010.13578.pdf](https://arxiv.org/pdf/2010.13578.pdf)'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: '[洛尔] 洛尔，法尔贡，马格努斯·拉姆，马库斯·斯科格，劳拉·加西亚-阿尔瓦雷斯和戈兰·温丁，通过在高性能计算机上模拟原生物分子的基态能量来基准测试变分量子本征求解器，arXiv:2010.13578v2
    [quant-ph]，2021年1月5日，[https://arxiv.org/pdf/2010.13578.pdf](https://arxiv.org/pdf/2010.13578.pdf)'
- en: '[NumPy] NumPy: the absolute basics for beginners, [https://numpy.org/doc/stable/user/absolute_beginners.html](https://numpy.org/doc/stable/user/absolute_beginners.html)'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: '[NumPy] NumPy：初学者的绝对基础，[https://numpy.org/doc/stable/user/absolute_beginners.html](https://numpy.org/doc/stable/user/absolute_beginners.html)'
- en: '[Panagiotis] Panagiotis Kl. Barkoutsos, Jerome F. Gonthier, Igor Sokolov, Nikolaj
    Moll, Gian Salis, Andreas Fuhrer, Marc Ganzhorn, Daniel J. Egger, Matthias Troyer,
    Antonio Mezzacapo, Stefan Filipp, Ivano Tavernelli, Quantum algorithms for electronic
    structure calculations: Particle-hole Hamiltonian and optimized wave-function
    expansions, Phys. Rev. A 98, 022322 – Published 20 August 2018, DOI: 10.1103/PhysRevA.98.022322,
    https://link.aps.org/doi/10.1103/PhysRevA.98.022322, [https://arxiv.org/abs/1805.04340](https://arxiv.org/abs/1805.04340)'
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: '[帕纳吉奥蒂斯] 帕纳吉奥蒂斯·K. 巴科乌索斯，杰罗姆·F. 贡蒂耶尔，伊戈尔·索科洛夫，尼古拉·莫尔，吉安·萨利斯，安德烈亚斯·富赫勒，马克·甘茨霍恩，丹尼尔·J.
    埃格尔，马蒂亚斯·特罗耶，安东尼奥·梅扎卡波，斯特凡·菲利普，伊瓦诺·塔瓦内利，电子结构计算的量子算法：粒子-空穴哈密顿量和优化波函数展开，物理评论A 98，022322
    – 发布于2018年8月20日，DOI：10.1103/PhysRevA.98.022322，[https://link.aps.org/doi/10.1103/PhysRevA.98.022322](https://link.aps.org/doi/10.1103/PhysRevA.98.022322)，[https://arxiv.org/abs/1805.04340](https://arxiv.org/abs/1805.04340)'
- en: '[Pease] Christopher Pease, An Overview of Monte Carlo Methods, Towards Data
    Science, [https://towardsdatascience.com/an-overview-of-monte-carlo-methods-675384eb1694](https://towardsdatascience.com/an-overview-of-monte-carlo-methods-675384eb1694)'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: '[Pease] 克里斯托弗·皮斯，蒙特卡洛方法概述，数据科学之路，[https://towardsdatascience.com/an-overview-of-monte-carlo-methods-675384eb1694](https://towardsdatascience.com/an-overview-of-monte-carlo-methods-675384eb1694)'
- en: '[PyQMC] PyQMC, a python module that implements real-space quantum Monte Carlo
    techniques, [https://github.com/WagnerGroup/pyqmc](https://github.com/WagnerGroup/pyqmc)'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: '[PyQMC] PyQMC，一个实现实空间量子蒙特卡洛技术的Python模块，[https://github.com/WagnerGroup/pyqmc](https://github.com/WagnerGroup/pyqmc)'
- en: '[PySCF] The Python-based Simulations of Chemistry Framework (PySCF), [https://pyscf.org/](https://pyscf.org/)'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: '[PySCF] 基于Python的化学模拟框架（PySCF），[https://pyscf.org/](https://pyscf.org/)'
- en: '[Qiskit] Qiskit, [https://qiskit.org/](https://qiskit.org/)'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: '[Qiskit] Qiskit，[https://qiskit.org/](https://qiskit.org/)'
- en: '[Qiskit_2021_Lab4] Julien Gacon, Lab 4: Introduction to Training Quantum Circuits,
    Qiskit Summer School 2021, [https://learn.qiskit.org/summer-school/2021/lab4-introduction-training-quantum-circuits](https://learn.qiskit.org/summer-school/2021/lab4-introduction-training-quantum-circuits)'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: '[Qiskit_2021_Lab4] 朱利安·加孔，实验4：量子电路训练简介，Qiskit 夏令营 2021，[https://learn.qiskit.org/summer-school/2021/lab4-introduction-training-quantum-circuits](https://learn.qiskit.org/summer-school/2021/lab4-introduction-training-quantum-circuits)'
- en: '[Qiskit_Nat_0] Qiskit_Nature, [https://github.com/Qiskit/qiskit-nature/blob/main/README.md](https://github.com/Qiskit/qiskit-nature/blob/main/README.md)'
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: '[Qiskit_Nat_0] Qiskit_Nature，[https://github.com/Qiskit/qiskit-nature/blob/main/README.md](https://github.com/Qiskit/qiskit-nature/blob/main/README.md)'
- en: '[Qiskit_Nat_3] ElectronicStructureProblem.second_q_ops, [https://qiskit.org/documentation/nature/stubs/qiskit_nature.problems.second_quantization.ElectronicStructureProblem.second_q_ops.html](https://qiskit.org/documentation/nature/stubs/qiskit_nature.problems.second_quantization.ElectronicStructureProblem.second_q_ops.html)'
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: '[Qiskit_Nat_3] ElectronicStructureProblem.second_q_ops，[https://qiskit.org/documentation/nature/stubs/qiskit_nature.problems.second_quantization.ElectronicStructureProblem.second_q_ops.html](https://qiskit.org/documentation/nature/stubs/qiskit_nature.problems.second_quantization.ElectronicStructureProblem.second_q_ops.html)'
- en: '[Qiskit_Nat_4] QubitConverter, [https://qiskit.org/documentation/nature/stubs/qiskit_nature.converters.second_quantization.QubitConverter.html](https://qiskit.org/documentation/nature/stubs/qiskit_nature.converters.second_quantization.QubitConverter.html)'
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: '[Qiskit_Nat_4] QubitConverter，[https://qiskit.org/documentation/nature/stubs/qiskit_nature.converters.second_quantization.QubitConverter.html](https://qiskit.org/documentation/nature/stubs/qiskit_nature.converters.second_quantization.QubitConverter.html)'
- en: '[Qiskit_Nat_5] Qiskit Nature Tutorials, Electronic structure, [https://qiskit.org/documentation/nature/tutorials/01_electronic_structure.html](https://qiskit.org/documentation/nature/tutorials/01_electronic_structure.html)'
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: '[Qiskit_Nat_5] Qiskit Nature 教程，电子结构，[https://qiskit.org/documentation/nature/tutorials/01_electronic_structure.html](https://qiskit.org/documentation/nature/tutorials/01_electronic_structure.html)'
- en: '[Qiskit_Nat_6] Qiskit Nature Tutorials, Sampling the potential energy surface,
    [https://qiskit.org/documentation/nature/_modules/qiskit_nature/algorithms/pes_samplers/bopes_sampler.html](https://qiskit.org/documentation/nature/_modules/qiskit_nature/algorithms/pes_samplers/bopes_sampler.html)'
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: '[Qiskit_Nat_6] Qiskit Nature 教程，采样势能面，[https://qiskit.org/documentation/nature/_modules/qiskit_nature/algorithms/pes_samplers/bopes_sampler.html](https://qiskit.org/documentation/nature/_modules/qiskit_nature/algorithms/pes_samplers/bopes_sampler.html)'
- en: '[Qiskit_Nature] Introducing Qiskit Nature, Qiskit, Medium, April 6, 2021, [https://medium.com/qiskit/introducing-qiskit-nature-cb9e588bb004](https://medium.com/qiskit/introducing-qiskit-nature-cb9e588bb004)'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: '[Qiskit_Nature] 介绍 Qiskit Nature，Qiskit，Medium，2021年4月6日，[https://medium.com/qiskit/introducing-qiskit-nature-cb9e588bb004](https://medium.com/qiskit/introducing-qiskit-nature-cb9e588bb004)'
- en: '[QuTiP] QuTiP, Plotting on the Bloch Sphere, [https://qutip.org/docs/latest/guide/guide-bloch.html](https://qutip.org/docs/latest/guide/guide-bloch.html)'
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: '[QuTiP] QuTiP，在布洛赫球上绘图，[https://qutip.org/docs/latest/guide/guide-bloch.html](https://qutip.org/docs/latest/guide/guide-bloch.html)'
- en: '[SciPy] Statistical functions (scipy.stats), [https://docs.scipy.org/doc/scipy/getting_started.html](https://docs.scipy.org/doc/scipy/getting_started.html)'
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: '[SciPy] 统计函数（scipy.stats），[https://docs.scipy.org/doc/scipy/getting_started.html](https://docs.scipy.org/doc/scipy/getting_started.html)'
- en: '[Stephens] Matthew Stephens, The Metropolis Hastings Algorithm, [https://stephens999.github.io/fiveMinuteStats/MH_intro.html](https://stephens999.github.io/fiveMinuteStats/MH_intro.html)'
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: '[Stephens] 马修·斯蒂芬斯，Metropolis Hastings 算法，[https://stephens999.github.io/fiveMinuteStats/MH_intro.html](https://stephens999.github.io/fiveMinuteStats/MH_intro.html)'
- en: '[Toulouse] Julien Toulouse, Introduction to quantum chemistry, Jan 20, 2021,
    [https://www.lct.jussieu.fr/pagesperso/toulouse/enseignement/introduction_qc.pdf](https://www.lct.jussieu.fr/pagesperso/toulouse/enseignement/introduction_qc.pdf)'
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: '[Toulouse] Julien Toulouse，量子化学导论，2021年1月20日，[https://www.lct.jussieu.fr/pagesperso/toulouse/enseignement/introduction_qc.pdf](https://www.lct.jussieu.fr/pagesperso/toulouse/enseignement/introduction_qc.pdf)'
- en: '[Tamir] Abraham Tamir, Applications of Markov Chains in Chemical Engineering,
    Elsevier, 1998, 9780080527390, 0080527396, [https://www.google.fr/books/edition/Applications_of_Markov_Chains_in_Chemica/X0ivOmHYPoYC](https://www.google.fr/books/edition/Applications_of_Markov_Chains_in_Chemica/X0ivOmHYPoYC)'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: '[Tamir] Abraham Tamir，化学工程中马尔可夫链的应用，Elsevier，1998年，9780080527390，0080527396，[https://www.google.fr/books/edition/Applications_of_Markov_Chains_in_Chemica/X0ivOmHYPoYC](https://www.google.fr/books/edition/Applications_of_Markov_Chains_in_Chemica/X0ivOmHYPoYC)'
- en: '[Toulouse_1] Julien Toulouse, Quantum Monte Carlo wave functions and their
    optimization for quantum chemistry, CEA Saclay, SPhN Orme des Merisiers, April
    2015, [https://www.lct.jussieu.fr/pagesperso/toulouse/presentations/presentation_saclay_15.pdf](https://www.lct.jussieu.fr/pagesperso/toulouse/presentations/presentation_saclay_15.pdf)'
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: '[Toulouse_1] Julien Toulouse，量子蒙特卡洛波函数及其在量子化学中的优化，CEA Saclay，SPhN Orme des
    Merisiers，2015年4月，[https://www.lct.jussieu.fr/pagesperso/toulouse/presentations/presentation_saclay_15.pdf](https://www.lct.jussieu.fr/pagesperso/toulouse/presentations/presentation_saclay_15.pdf)'
- en: '[Troyer] Matthias Troyer, Matthias Troyer: Achieving Practical Quantum Advantage
    in Chemistry Simulations, QuCQC 2021, [https://www.youtube.com/watch?v=2MsfbPlKgyI](https://www.youtube.com/watch?v=2MsfbPlKgyI)'
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: '[Troyer] Matthias Troyer，Matthias Troyer：在化学模拟中实现实用量子优势，QuCQC 2021，[https://www.youtube.com/watch?v=2MsfbPlKgyI](https://www.youtube.com/watch?v=2MsfbPlKgyI)'
- en: '[VQE_1] Peruzzo, A., McClean, J., Shadbolt, P. et al., A variational eigenvalue
    solver on a photonic quantum processor, Nat Commun 5, 4213 (2014), [https://doi.org/10.1038/ncomms5213](https://doi.org/10.1038/ncomms5213)'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: '[VQE_1] Peruzzo, A., McClean, J., Shadbolt, P. 等人，基于光子量子处理器的变分本征值求解器，Nat Commun
    5, 4213 (2014)，[https://doi.org/10.1038/ncomms5213](https://doi.org/10.1038/ncomms5213)'
- en: '[VQE_2] Qiskit Nature, Ground state solvers, [https://qiskit.org/documentation/nature/tutorials/03_ground_state_solvers.html](https://qiskit.org/documentation/nature/tutorials/03_ground_state_solvers.html)'
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: '[VQE_2] Qiskit Nature, 地基态求解器，[https://qiskit.org/documentation/nature/tutorials/03_ground_state_solvers.html](https://qiskit.org/documentation/nature/tutorials/03_ground_state_solvers.html)'
- en: '[VQE_3] Hardware-efficient variational quantum eigensolver for small molecules
    and quantum magnets, Nature 549, 242–246 (2017), [https://doi.org/10.1038/nature23879](https://doi.org/10.1038/nature23879)'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: '[VQE_3] 用于小分子和量子磁体的硬件高效变分量子本征值求解器，Nature 549, 242–246 (2017)，[https://doi.org/10.1038/nature23879](https://doi.org/10.1038/nature23879)'
- en: '[VQE_4] Running VQE on a Statevector Simulator, [https://qiskit.org/textbook/ch-applications/vqe-molecules.html#Running-VQE-on-a-Statevector-Simulator](https://qiskit.org/textbook/ch-applications/vqe-molecules.html#Running-VQE-on-a-Statevector-Simulator)'
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: '[VQE_4] 在状态向量模拟器上运行VQE，[https://qiskit.org/textbook/ch-applications/vqe-molecules.html#Running-VQE-on-a-Statevector-Simulator](https://qiskit.org/textbook/ch-applications/vqe-molecules.html#Running-VQE-on-a-Statevector-Simulator)'
