["```py\n>>>originalList = range(1,11)\n>>>print originalList\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n>>>newList =  [x**2 for x in originalList]\n>>>print newList\n[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\n```", "```py\ndef returnfieldnames(fc):\n import arcpy\n fieldnames = [f.name for f in arcpy.ListFields(fc)]\n del arcpy\n return fieldnames\n\ndef returnfieldalias(fc):\n import arcpy\n fieldalias = [f.aliasName for f in arcpy.ListFields(fc)]\n del arcpy\n return fieldalias\n\ndef returnfieldbasename(fc):\n import arcpy\n fieldtypes = [f.baseName for f in arcpy.ListFields(fc)]\n del arcpy\n return fieldtypes\n\n```", "```py\ndef returnfieldtypes(fc):\n import arcpy\n fieldtypes = [f.type for f in arcpy.ListFields(fc)]\n del arcpy\n return fieldtypes\n\ndef returnfieldlength(fc):\n import arcpy\n fieldlengths = [f.length for f in arcpy.ListFields(fc)]\n del arcpy\n return fieldlengths\n\ndef returnfieldprecision(fc):\n import arcpy\n fieldprecise = [f.precision for f in arcpy.ListFields(fc)]\n del arcpy\n return fieldprecise\n\ndef returnfieldscale(fc):\n import arcpy\n fieldscales = [f.scale for f in arcpy.ListFields(fc)]\n del arcpy\n return fieldscales\n\n```", "```py\ndef returnfielddomain(fc):\n import arcpy\n fielddomains = [f.domain for f in arcpy.ListFields(fc)]\n del arcpy\n return fielddomains\n\n```", "```py\ndef returnfieldsubtypes(fc):\n import arcpy\n fieldsubdic = {}\n subtypes = arcpy.da.ListSubtypes(fc)\n for stcode, stdict in subtypes.iteritems():\n for stkey in stdict.iterkeys():\n if stkey == 'FieldValues':\n fields = stdict[stkey]\n for field, fieldvals in fields.iteritems():\n sub = fieldvals[0]\n desc = fieldvals[1]\n fieldsubdic[field] = sub, desc\n\n del arcpy\n return fieldsubdic\n\n```", "```py\ndef returngeometrytype(fc):\n import arcpy\n arcInfo = arcpy.Describe(fc)\n geomtype = arcInfo.shapeType\n del arcpy\n return str(geomtype)\n\n```", "```py\ndef returngeometryname(fc):\n import arcpy\n arcInfo = arcpy.Describe(fc)\n geomname = arcInfo.shapeFieldName\n del arcpy\n return str(geomname)\n\n```", "```py\ndef returnspatialreference(fc):\n import arcpy\n spatial_reference = arcpy.Describe(fc).spatialReference\n del arcpy\n return spatial_reference\n\n```", "```py\ndef returnprojectioncode(fc):\n import arcpy\n spatial_reference = arcpy.Describe(fc).spatialReference\n proj_code = spatial_reference.projectionCode\n del arcpy\n return  proj_code\n\ndef returnprojectionname(fc):\n import arcpy\n spatial_reference = arcpy.Describe(fc).spatialReference\n proj_name = spatial_reference.name\n del arcpy\n return  proj_name\n\n```", "```py\nimport arcpy\nfolderPath = r\"C:\\Projects\"\ngdbName = \"ArcPy.gdb\"\narcpy.CreateFileGDB_management(folderPath, gdbName)\n\n```", "```py\nspatialReference = arcpy.SpatialReference(2227)\n\n```", "```py\nspatialReference = arcpy.SpatialReference(2227)\nfileGDB = r\"{0}\\{1}\".format(folderPath,gdbName)\nfeatureDataset = \"Chapter12Results\"\narcpy.CreateFeatureDataset_management(fileGDB, featureDataset,   spatialReference) \n\n```", "```py\nfeatureClass = \"BufferArea\"\ngeometryType = \"POLYGON\"\nfeaturePath = r\"{0}\\{1}\".format(fileGDB,featureDataset)\narcpy.CreateFeatureclass_management(featurePath, featureClass,  geometryType) \n\n```", "```py\nfieldName = \"STOPID\"\nfieldAlias = \"Bus Stop Identifier\"\nfieldType = \"LONG\"\nfieldPrecision = 9\nfeatureClassPath = r\"{0}\\{1}\".format(featurePath,featureClass)\narcpy.AddField_management(featureClassPath, fieldName,fieldType, fieldPrecision,\n\"\", \"\", fieldAlias)\n\n```", "```py\nfieldName2 = \"AVEPOP\"\nfieldAlias2 = \"Average Census Population\"\nfieldType2 = \"FLOAT\"\nfeatureClassPath = r\"{0}\\{1}\".format(featurePath,featureClass)\narcpy.AddField_management(featureClassPath, fieldName2, fieldType2, \"\", \"\", \"\", fieldAlias2)\n\n```", "```py\narcpy.AddMessage(\"Beginning Analysis\")\ninsertCursor = arcpy.da.InsertCursor(featureClassPath,['SHAPE@',fieldName, fieldName2])\narcpy.MakeFeatureLayer_management(censusBlocks2010,\"census_lyr\")\n\nwith arcpy.da.SearchCursor(busStops, ['SHAPE@', busStopField],sql) as cursor:\n for row in cursor:\n stop = row[0]\n stopID = row[1]\n busBuffer = stop.buffer(400)\n arcpy.SelectLayerByLocation_management(\"census_lyr\",\"intersect\",busBuffer,'','NEW_SELECTION')\n censusShapes = []\n censusPopList = []\n with arcpy.da.SearchCursor(\"census_lyr\", ['SHAPE@',censusBlockPopField]) as ncursor:\n for nrow in ncursor:\n censusShapes.append(nrow[0])\n censusPopList.append(nrow[1])\n\n censusUnion = censusShapes[0]\n for block in censusShapes[1:]:\n censusUnion = censusUnion.union(block)\n\n censusPop = sum(censusPopList)/len(censusPopList)\n finalData = (censusUnion,stopID, censusPopulation)\n insertCursor.insertRow(finalData)\narcpy.AddMessage(\"Analysis Complete\")\n\n```", "```py\n>>> from arcpy import env\n\n```", "```py\n>>> import arcpy\n>>> arcpy.env.workspace = r\"C:\\Projects\\SanFrancisco.gdb\"\n>>> arcpy.ListDatasets()\n[u'SanFrancisco', u'Chapter3Results', u'Chapter4Results', u'Chapter5Results', u'Chapter7Results', u'Chapter11Results']\n\n```", "```py\nimport arcpy\narcpy.env.MResolution = 0.0005\narcpy.env.MTolerance = 0.005\narcpy.env.ZResolution = \"0.0025 Feet\"\narcpy.env.ZTolerance = \"0.001 Feet\"\narcpy.env.XYResolution = \"0.00025 Feet\"\narcpy.env.XYTolerance = \"0.0005 Feet\"\n\n```"]