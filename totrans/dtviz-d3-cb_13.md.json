["```py\n<head>\n    <meta charset=\"utf-8\">\n    <title>Jasmine Spec Runner</title>\n\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"lib/jasmine-1.3.1/jasmine.css\">\n    <script type=\"text/javascript\" src=\"img/jasmine.js\"></script>\n    <script type=\"text/javascript\" src=\"img/jasmine-html.js\"></script>\n    <script type=\"text/javascript\" src=\"img/d3.js\"></script>\n\n    <!-- include source files here... -->\n    <script type=\"text/javascript\" src=\"img/bar_chart.js\"></script>\n    <!-- include spec files here... -->\n    <script type=\"text/javascript\" src=\"img/spec_helper.js\"></script>\n    <script type=\"text/javascript\" src=\"img/bar_chart_spec.js\"></script>\n\n    <script type=\"text/javascript\">\n        (function () {\n            var jasmineEnv = jasmine.getEnv();\n            jasmineEnv.updateInterval = 1000;\n\n            var htmlReporter = new jasmine.HtmlReporter();\n\n            jasmineEnv.addReporter(htmlReporter);\n\n            jasmineEnv.specFilter = function (spec) {\n                return htmlReporter.specFilter(spec);\n            };\n\n            var currentWindowOnload = window.onload;\n\n            window.onload = function () {\n                if (currentWindowOnload) {\n                    currentWindowOnload();\n                }\n                execJasmine();\n            };\n\n            function execJasmine() {\n                jasmineEnv.execute();\n            }\n\n        })();\n    </script>\n\n</head>\n```", "```py\ndescribe('BarChart', function () {\n    var div,\n        chart,\n        data = [\n            {x: 0, y: 0},\n            {x: 1, y: 3},\n            {x: 2, y: 6}\n        ];\n\n    beforeEach(function () {\n        div = d3.select('body').append('div');\n        chart = BarChart(div);\n    });\n\n    afterEach(function () {\n        div.remove();\n    });\n\n    describe('.data', function () {\n        it('should allow setting and retrieve chart data', function () {\n            expect(chart.data(data).data()).toBe(data);\n        });\n});\n});\n```", "```py\nfunction BarChart(p) {\nvar that = {};\nvar _parent = p, data;\nthat.data = function (d) {\n        if (!arguments.length) return _data;\n        _data = d;\n        return that;\n};\n\nreturn that;\n}\n```", "```py\ndescribe('.render', function () {\n        describe('svg', function () {\n            it('should generate svg', function () {\n                chart.render();\n                expect(svg()).not.toBeEmpty();\n            });\n\n            it('should set default svg height and width', \n              function () {\n                chart.render();\n                expect(svg().attr('width')).toBe('500');\n                expect(svg().attr('height')).toBe('350');\n            });\n\n            it('should allow changing svg height and width', \n              function () {\n                chart.width(200).height(150).render();\n                expect(svg().attr('width')).toBe('200');\n                expect(svg().attr('height')).toBe('150');\n            });\n        });\n});\n\nfunction svg() {\n    return div.select('svg');\n}\n```", "```py\n...\nvar _parent = p, _width = 500, _height = 350\n        _data;\n\n    that.render = function () {\n        var svg = _parent\n            .append(\"svg\")\n            .attr(\"height\", _height)\n            .attr(\"width\", _width);\n    };\n\n    that.width = function (w) {\n        if (!arguments.length) return _width;\n        _width = w;\n        return that;\n    };\n\n    that.height = function (h) {\n        if (!arguments.length) return _height;\n        _height = h;\n        return that;\n};\n...\n```", "```py\ndescribe('chart body', function () {\n        it('should create body g', function () {\n            chart.render();\n            expect(chartBody()).not.toBeEmpty();\n        });\n\n        it('should translate to (left, top)', function () {\n            chart.render();\n             expect(chartBody().attr('transform')).toBe('translate(30,10)')\n        });\n    });\n\n    describe('bars', function () {\n        beforeEach(function () {\n            chart.data(data).width(100).height(100)\n                .x(d3.scale.linear().domain([0, 3]))\n                .y(d3.scale.linear().domain([0, 6]))\n                .render();\n        });\n\n        it('should create 3 svg:rect elements', function () {\n            expect(bars().size()).toBe(3);\n        });\n\n        it('should calculate bar width automatically', \n          function () {\n            bars().each(function () {expect(d3.select(this).attr('width')).toBe('18');\n            });\n        });\n\n       it('should map bar x using x-scale', function () {expect(d3.select(bars()[0][0]).attr('x')).toBe('0');expect(d3.select(bars()[0][1]).attr('x')).toBe('20');expect(d3.select(bars()[0][2]).attr('x')).toBe('40');\n       });\n\n       it('should map bar y using y-scale', function () {expect(d3.select(bars()[0][0]).attr('y')).toBe('60');expect(d3.select(bars()[0][1]).attr('y')).toBe('30');expect(d3.select(bars()[0][2]).attr('y')).toBe('0');\n       });\n\n       it('should calculate bar height based on y', \n          function () {expect(d3.select(bars()[0][0]).\n            attr('height')).toBe('10');expect(d3.select(bars()[0][1]).attr('height')).toBe('40');expect(d3.select(bars()[0][2]).attr('height')).toBe('70');\n        });\n    });\n\n \t function chartBody() {\n        return svg().select('g.body');\n    }\n\n    function bars() {\n        return chartBody().selectAll('rect.bar');\n}\n```", "```py\n...\nvar _parent = p, _width = 500, _height = 350,\n        _margins = {top: 10, left: 30, right: 10, bottom: 30},\n        _data,\n        _x = d3.scale.linear(),\n        _y = d3.scale.linear();\n\nthat.render = function () {\n        var svg = _parent\n            .append(\"svg\")\n            .attr(\"height\", _height)\n            .attr(\"width\", _width);\n\n        var body = svg.append(\"g\")\n            .attr(\"class\", 'body')\n            .attr(\"transform\", \"translate(\" + _margins.left + \",\" + _margins.top + \")\")\n\n        if (_data) {\n            _x.range([0, quadrantWidth()]);\n            _y.range([quadrantHeight(), 0]);\n\n            body.selectAll('rect.bar')\n                .data(_data).enter()\n                .append('rect')\n                .attr(\"class\", 'bar')\n                .attr(\"width\", function () {\n                    return quadrantWidth() / _data.length - BAR_PADDING;\n                })\n                .attr(\"x\", function (d) {return _x(d.x); })\n                .attr(\"y\", function (d) {return _y(d.y); })\n                .attr(\"height\", function (d) {\n                    return _height - _margins.bottom - _y(d.y);\n                });\n        }\n};\n...\n```"]