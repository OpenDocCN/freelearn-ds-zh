- en: 3 Configuring Python with Power BI
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3 配置 Python 与 Power BI
- en: 'Just as in *Chapter 2, Configuring R with Python*, you had to install the R
    engines in order to interact with Power BI, in the same way you will also have
    to install the Python engines on your machine. You''ll also see how to configure
    some IDEs so you can develop and test Python code comfortably before using it
    in Power BI. Therefore, similar to what we have already seen in *Chapter 2*, *Configuring
    R with Python*, the following topics will be discussed in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 正如 *第 2 章，使用 Python 配置 R* 中所述，你必须安装 R 引擎才能与 Power BI 交互，同样，你也将需要在你的机器上安装 Python
    引擎。你还将了解如何配置一些 IDE，以便在将 Python 代码用于 Power BI 之前，你可以舒适地开发和测试 Python 代码。因此，类似于我们在
    *第 2 章，使用 Python 配置 R* 中已经看到的，本章将讨论以下主题：
- en: The available Python engines
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可用的 Python 引擎
- en: Which Python engine should I install?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我应该安装哪个 Python 引擎？
- en: Installing an IDE for Python development
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Python 开发环境的 IDE
- en: Configuring Power BI Desktop to work with Python
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置 Power BI Desktop 以与 Python 一起工作
- en: Configuring the Power BI service to work with Python
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置 Power BI 服务以与 Python 一起工作
- en: Limitations of Python visuals
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 可视化的限制
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'This chapter requires you to have a working internet connection and **Power
    BI Desktop** already installed on your machine. The last part of the chapter also
    requires you to be signed up for the Power BI service (here’s a how-to: [http://bit.ly/signup-powerbiservice](http://bit.ly/signup-powerbiservice)).
    A **Power BI free** license is enough to test all the code in this book, as you
    will share reports only in your personal **workspace**.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章要求你拥有一个正常工作的互联网连接，并且你的机器上已经安装了 **Power BI Desktop**。本章的最后部分还要求你注册 Power BI
    服务（这里有一个教程：[http://bit.ly/signup-powerbiservice](http://bit.ly/signup-powerbiservice))。一个
    **Power BI 免费版** 许可证就足够测试本书中的所有代码，因为你将仅在个人 **工作区** 中共享报告。
- en: The available Python engines
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可用的 Python 引擎
- en: 'As with R, there are several distributions you can install for Python: **standard
    Python**, **ActivePython**, **Anaconda**, and so on. Typically, “pure” developers
    download the latest version of the Python engine from [https://www.python.org/](https://www.python.org/),
    and then install various community-developed packages useful for their projects
    from the **Python Package Index** (**PyPI**). Other vendors, such as ActiveState
    and Anaconda, pre-package a specific version of the Python engine with a set of
    packages for the purpose of accelerating a project''s startup. While the standard
    Python and ActiveState distributions are more aimed at general-purpose developers,
    Anaconda is the distribution preferred by data scientists and by those who work
    more closely with machine learning projects. In turn, Anaconda comes in two distinct
    distributions itself: Anaconda and **Miniconda**.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 与 R 语言一样，你可以为 Python 安装几个发行版：**标准 Python**、**ActivePython**、**Anaconda** 等等。通常，“纯”开发者会从
    [https://www.python.org/](https://www.python.org/) 下载 Python 引擎的最新版本，然后从 **Python
    包索引**（**PyPI**）安装各种社区开发的、对他们的项目有用的包。其他供应商，如 ActiveState 和 Anaconda，会预先打包特定版本的
    Python 引擎和一系列包，以加速项目的启动。虽然标准 Python 和 ActiveState 发行版更针对通用开发者，但 Anaconda 是数据科学家和与机器学习项目紧密合作的人士首选的发行版。反过来，Anaconda
    本身也有两个不同的发行版：Anaconda 和 **Miniconda**。
- en: The Anaconda distribution, with its more than 150 included packages, can be
    considered to be the best do-it-yourself supermarket for data scientists, where
    everything is ready and configured to be used. The Miniconda distribution, on
    the other hand, is considered the minimum indispensable toolbox for the data scientist
    seeking to trim the resources to the right level.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Anaconda 发行版，包含超过 150 个内置包，可以被认为是数据科学家最佳的 DIY 超市，其中所有东西都已准备好并配置好以供使用。另一方面，Miniconda
    发行版被认为是数据科学家寻求将资源削减到适当水平的最小必需工具箱。
- en: 'But there is one fundamental tool that Anaconda and Miniconda have in common:
    it is **Conda**, one of the most popular package managers for Python. Conda provides
    the developer with an easy-to-use system for the management of so-called **virtual
    environments**. A virtual environment, or **environment** for short, aims to encapsulate
    the installation of a Python engine with a set of version-specific packages. The
    goal is to create an isolated environment, often associated with a project or
    task, that can guarantee the **reproducibility of results**. This is a very important
    concept, essential to ensure that Python projects run smoothly when dealing with
    a large community of developers who create and maintain their own packages independently
    of each other.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 但Anaconda和Miniconda有一个共同的基本工具：那就是**Conda**，它是Python最受欢迎的包管理器之一。Conda为开发者提供了一个易于使用的系统来管理所谓的**虚拟环境**。虚拟环境，或简称**环境**，旨在封装一组特定版本的Python引擎和包的安装。目标是创建一个隔离的环境，通常与项目或任务相关联，可以保证**结果的再现性**。这是一个非常重要的概念，对于确保Python项目在处理一个由独立创建和维护自己包的开发者群体时能够顺利运行至关重要。
- en: '**Note**'
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**注意**'
- en: ''
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Contrary to what you saw in *Chapter 2, Configuring R with Power BI*, the Python
    community does not have a "time machine" available that easily references a specific
    version of the Python engine at its release date and a snapshot of the entire
    ecosystem of PyPI packages at the versions they were at on that date. It is up
    to you to build your own "time capsules" using environments in order to ensure
    the reproducibility of your code.
  id: totrans-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 与您在*第二章，使用Power BI配置R*中看到的情况相反，Python社区没有“时间机器”可以轻松引用发布日期的特定Python引擎版本以及PyPI包在那天版本的整个生态系统快照。您需要自己使用环境来构建自己的“时间胶囊”，以确保代码的可再现性。
- en: Conda is a very versatile tool. Besides managing the environments, it can also
    install various packages (regardless of the programming language used, not only
    Python), carefully managing all their dependencies. But the official recommended
    tool for installing Python packages from PyPI is **pip**, which only installs
    packages written in Python and is generally installed together with the Python
    engine.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Conda是一个非常通用的工具。除了管理环境之外，它还可以安装各种包（无论使用的编程语言是什么，而不仅仅是Python），并仔细管理它们的所有依赖关系。但官方推荐的从PyPI安装Python包的工具是**pip**，它只安装用Python编写的包，通常与Python引擎一起安装。
- en: That said, beyond the extent of the "bodywork" mounted around the Python engine,
    the various Python distributions do not add features that dramatically improve
    engine performance, unlike what we saw in *Chapter 2, Configuring R with Power
    BI*, with Microsoft R engines. For this reason, we won't go into detail about
    the features installed by each distribution.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，除了围绕Python引擎安装的“车身”之外，各种Python发行版并没有添加显著提高引擎性能的功能，这与我们在*第二章，使用Power BI配置R*中看到的Microsoft
    R引擎不同。因此，我们不会详细介绍每个发行版安装的功能。
- en: Choosing a Python engine to install
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择要安装的Python引擎
- en: 'Back to our scenario, to develop Python code for use in Power Query or Python
    visuals, what you need for sure is the following:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 回到我们的场景，为了在Power Query或Python可视化中使用Python代码，您肯定需要以下内容：
- en: A Python engine
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个Python引擎
- en: A package manager, to install the minimum number of packages needed to transform
    the data or visualize it appropriately
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包管理器，用于安装转换数据或适当可视化的所需的最小数量的包
- en: To select the products that best suit your needs, you will need to understand
    your Power BI requirements in more detail.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 为了选择最适合您需求的产品，您需要更详细地了解您的Power BI需求。
- en: The Python engines used by Power BI
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Power BI使用的Python引擎
- en: Just as with R visuals in the Power BI service, the following note applies to
    Python visuals.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 正如Power BI服务中的R可视化一样，以下说明也适用于Python可视化。
- en: '**Important note**'
  id: totrans-26
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**重要说明**'
- en: ''
  id: totrans-27
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The Python engine and packages used by the Power BI service for **Python visuals**
    are preinstalled on the cloud and therefore the user must adapt to the versions
    adopted by the service.
  id: totrans-28
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Power BI服务用于**Python可视化**的Python引擎和包是预先安装在云上的，因此用户必须适应服务采用的版本。
- en: As you can imagine, the version of the engine adopted by the Power BI service
    is a bit behind the latest release (now 3.9.1). See the following note for more
    details.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所想，Power BI服务采用的引擎版本略落后于最新发布版（现在为3.9.1）。有关更多详细信息，请参阅以下说明。
- en: '**Important note**'
  id: totrans-30
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**重要说明**'
- en: ''
  id: totrans-31
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'To date, the Power BI service relies on the **Python 3.7.7** runtime when implementing
    a Python visual. It is important to always keep an eye on the version of the Python
    engine and packages provided by the Power BI service with each release to ensure
    that the reports to be published work properly. See the following link for more
    information: [http://bit.ly/powerbi-python-limits](http://bit.ly/powerbi-python-limits).'
  id: totrans-32
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 到目前为止，Power BI 服务在实现 Python 可视化时依赖于 **Python 3.7.7** 运行时。始终关注 Power BI 服务每次发布提供的
    Python 引擎和包的版本非常重要，以确保要发布的报告能够正常工作。更多信息请参阅以下链接：[http://bit.ly/powerbi-python-limits](http://bit.ly/powerbi-python-limits)。
- en: The behavior of the Power BI service is the same as that we’ve already seen
    for the R script in the case of doing data transformation in Power Query.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Power Query 中进行数据转换时，Power BI 服务的表现与我们已经看到的 R 脚本相同。
- en: '**Important note**'
  id: totrans-34
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**重要提示**'
- en: ''
  id: totrans-35
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The Python engine used by the Power BI service during the data refresh phase
    for *Python scripts in Power Query* has to be installed on any machine of your
    choice outside the service, and on that same machine you have to install the **on-premises
    data gateway** in **personal mode**. Note that you must use external engines even
    if the data to be refreshed does not flow through the gateway, but comes from
    data sources not referenced by the gateway itself.
  id: totrans-36
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在数据刷新阶段，Power BI 服务使用的 Python 引擎必须安装在任何您选择的机器上（服务之外），并且在该同一台机器上，您必须以 **个人模式**
    安装 **本地数据网关**。请注意，即使要刷新的数据不通过网关流动，而是来自网关本身未引用的数据源，您也必须使用外部引擎。
- en: As long as the Python environment to be referenced via the data gateway is the
    base one, it is sufficient that both are installed on the same machine. Otherwise,
    the following note applies.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 只要通过数据网关引用的 Python 环境是基本环境，只要两者都安装在同一台机器上就足够了。否则，以下注意事项适用。
- en: '**Important note**'
  id: totrans-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**重要提示**'
- en: ''
  id: totrans-39
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If you need to *use multiple environments* installed on the machine for your
    Power Query transformations, you must *also install Power BI Desktop*. It allows
    you to switch the routing of the data gateway to the selected environment through
    its options, updating the configuration file at `C:\Users\<your-username>\AppData\Local\PowerBIScripting\PythonSettings.xml`.
    This file allows the overriding of the Python environment referenced by the data
    gateway by default.
  id: totrans-40
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果您需要在使用机器上的 Power Query 转换中使用多个已安装的环境，您还必须安装 **Power BI Desktop**。它允许您通过其选项切换数据网关的路由到所选环境，更新位于
    `C:\Users\<your-username>\AppData\Local\PowerBIScripting\PythonSettings.xml` 的配置文件。此文件允许覆盖数据网关默认引用的
    Python 环境。
- en: In a nutshell, regardless of whether you want to run R or Python scripts, the
    infrastructure required by Power BI Desktop and the Power BI service is managed
    in the same way. Therefore, again, if you need to do reports *for personal use
    on your desktop*, you have no limitations on which Python engine to use, so you
    can install the Python versions and packages that suit you best. If, on the other
    hand, you know in advance that the reports you will create *contain Python visuals
    and are intended to be shared with colleagues* on the Power BI service, then there
    are strict limitations on both the version and the packages pre-installed in the
    service.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，无论您是想运行 R 脚本还是 Python 脚本，Power BI Desktop 和 Power BI 服务所需的基础设施都以相同的方式进行管理。因此，再次强调，如果您需要为个人桌面上的使用生成报告，您对使用的
    Python 引擎没有限制，因此您可以安装最适合您的 Python 版本和包。另一方面，如果您事先知道您将创建的报告将包含 Python 可视化并打算在 Power
    BI 服务上与同事共享，那么对版本和预先安装在服务中的包都有严格的限制。
- en: But let's get down to business and start installing the Python stuff!
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 但让我们言归正传，开始安装 Python 相关内容！
- en: Installing the suggested Python engines
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装建议的 Python 引擎
- en: Managing dependencies of Python scripts injected inside reports can be complex
    in the long run. Keeping in mind that it is possible to create multiple environments
    on the same machine, we suggest the following tip.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在长期管理嵌入报告中的 Python 脚本的依赖关系可能会变得复杂。考虑到在同一台机器上可以创建多个环境，我们建议以下技巧。
- en: '**Tip**'
  id: totrans-45
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**技巧**'
- en: ''
  id: totrans-46
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: We recommend that you *dedicate a machine* to run only the Python engines used
    by Power BI reports. Our suggestion is to create a Python environment for each
    possible need that may arise when developing Python scripts in Power Query or
    for Python visuals. If you have already prepared a machine dedicated to running
    R scripts, as seen in *Chapter 2, Configuring R with Power BI*, then you could
    use the same machine to install Python engines on as well. Keep in mind that in
    this case, you need to make sure that the resources of the machine are sufficient
    to run all the engines and to satisfy the various requests coming from the various
    reports.
  id: totrans-47
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我们建议您**专门为Power BI报告使用的Python引擎分配一台机器**。我们的建议是为在Power Query中开发Python脚本或为Python可视化可能出现的每个需求创建一个Python环境。如果您已经为运行R脚本准备了一台专用机器，如*第2章，使用Power
    BI配置R*中所示，那么您也可以使用同一台机器来安装Python引擎。请记住，在这种情况下，您需要确保机器的资源足够运行所有引擎，并满足来自各个报告的各种请求。
- en: Let's first install the latest version of the Python engine, to be used for
    data transformation.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先安装最新版本的Python引擎，用于数据转换。
- en: The Python engine for data transformation
  id: totrans-49
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 数据转换的Python引擎
- en: Surely, to enrich your reports using Python, you won't need 150 pre-installed
    packages. Also, in order to easily manage your environments, Conda is a tool to
    include in your arsenal. Bearing in mind that the engine we are about to install
    will be used as an external Python engine by the Power BI service to transform
    data via Power Query through the on-premises data gateway in personal mode, the
    following tip applies.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，为了使用Python丰富您的报告，您不需要150个预安装的包。此外，为了轻松管理您的环境，Conda是您应该包括在您的工具箱中的工具。考虑到我们即将安装的引擎将被Power
    BI服务用作外部Python引擎，通过Power Query在本地数据网关以个人模式转换数据，以下提示适用。
- en: '**Tip**'
  id: totrans-51
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**提示**'
- en: ''
  id: totrans-52
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: We suggest adopting the latest version of **Miniconda** as the default distribution.
    This is because, besides pre-installing very few packages giving you the possibility
    to choose which packages to install, it also includes Conda in the distribution.
  id: totrans-53
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我们建议采用最新版本的**Miniconda**作为默认发行版。这是因为，除了预安装非常少的包，让您有机会选择要安装的包之外，它还包括了Conda在发行版中。
- en: 'The installation of Miniconda is very simple:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Miniconda的安装非常简单：
- en: Go to [https://docs.conda.io/en/latest/miniconda.html](https://docs.conda.io/en/latest/miniconda.html).
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往[https://docs.conda.io/en/latest/miniconda.html](https://docs.conda.io/en/latest/miniconda.html)。
- en: 'Click on the latest version available for your OS (3.8 as of the time of writing):'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击您操作系统可用的最新版本（截至写作时间为3.8）：
- en: '![Figure 3.1 – Download the latest version available of Miniconda](img/file38.png)'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图3.1 – 下载Miniconda的最新版本](img/file38.png)'
- en: Figure 3.1 – Download the latest version available of Miniconda
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图3.1 – 下载Miniconda的最新版本
- en: Once the file is downloaded, double-click on it, click **Next** on the welcome
    windows that pops up, and then click on **I Agree** to accept the License Agreement.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 文件下载完成后，双击它，在弹出的欢迎窗口中点击**下一步**，然后点击**我同意**以接受许可协议。
- en: In the next window you'll be asked if you want to install Miniconda just for
    you or for other users as well. Leave the default setting (only for you) and click
    **Next**.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个窗口中，您将被询问是否要为仅您或所有用户安装Miniconda。保留默认设置（仅为您）并点击**下一步**。
- en: 'Leave the default folder for the installation on the next screen and click
    **Next**. Keep in mind that the installation route is in this form: `C:\Users\<your-username>\miniconda3`.'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一屏上保留安装的默认文件夹，并点击**下一步**。请记住，安装路径是这样的形式：`C:\Users\<你的用户名>\miniconda3`。
- en: 'In the next window, check **Register Miniconda3 as my default Python 3.8**
    and click **Install**:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个窗口中，勾选**将Miniconda3注册为我的默认Python 3.8**并点击**安装**：
- en: '![Figure 3.2 – Set Miniconda as your default Python 3.8 engine](img/file39.png)'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图3.2 – 将Miniconda设置为默认Python 3.8引擎](img/file39.png)'
- en: Figure 3.2 – Set Miniconda as your default Python 3.8 engine
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图3.2 – 将Miniconda设置为默认Python 3.8引擎
- en: At the end of the installation, an **Installation Complete** window will inform
    you that the installation was completed successfully. Then, click **Next**.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装结束时，一个**安装完成**窗口会通知您安装已成功完成。然后，点击**下一步**。
- en: The last screen gives you the possibility to open documents containing tips
    and resources to start working with Miniconda. You can unflag the two options
    and click **Finish**.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一屏为您提供打开包含提示和资源的文档的可能性，以开始使用Miniconda。您可以取消选中两个选项，然后点击**完成**。
- en: And that's it! Now you are ready to write and run your Python code with Miniconda.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 就这些了！现在你可以使用 Miniconda 编写和运行你的 Python 代码了。
- en: '**Important note**'
  id: totrans-68
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**重要提示**'
- en: ''
  id: totrans-69
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Usually, the Power BI Desktop installation on which you develop reports is located
    on a separate machine from the one selected as the Power BI service Python engine
    machine, where the data gateway is also often installed. In that case, you must
    also install Miniconda on the machine on which your Power BI Desktop is installed.
  id: totrans-70
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 通常，你开发报告的 Power BI Desktop 安装位于与选定的 Power BI 服务 Python 引擎机器不同的机器上，其中数据网关也经常安装。在这种情况下，你必须在安装
    Power BI Desktop 的机器上安装 Miniconda。
- en: 'At the end of the installation, under the **Anaconda3 (64-bit)** folder in
    the Start menu, you will find shortcuts to two command-line interfaces (the standard
    **Command Prompt** and **PowerShell**), which ensure that you can activate **Conda**
    behind the scenes and interact with the tools provided by Miniconda:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，在开始菜单中的 **Anaconda3 (64-bit)** 文件夹下，你会找到两个命令行界面（标准 **命令提示符** 和 **PowerShell**）的快捷方式，这确保了你可以在后台激活
    **Conda** 并与 Miniconda 提供的工具交互：
- en: '![Figure 3.3 – Anaconda prompts that are useful for interacting with Miniconda](img/file40.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.3 – 与 Miniconda 交互的有用 Anaconda 提示](img/file40.png)'
- en: Figure 3.3 – Anaconda prompts that are useful for interacting with Miniconda
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.3 – 与 Miniconda 交互的有用 Anaconda 提示
- en: Our favorite command line is the **Anaconda Prompt** and we'll show you how
    to use it very shortly.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最喜欢的命令行是 **Anaconda Prompt**，我们很快就会向你展示如何使用它。
- en: As we said in the *The available Python engines* section, both **conda** and
    **pip** are very good package managers. As a package dependency solver, conda
    is better, although a bit slower than pip. But the reason pip is often used as
    a package manager is that it pulls packages directly from PyPI, which is a far
    more complete repository than Anaconda’s one. For the same reason, *we will also
    use pip as our default package manager*.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们在 *可用的 Python 引擎* 部分所述，**conda** 和 **pip** 都是很好的包管理器。作为包依赖关系求解器，conda 更好，尽管比
    pip 略慢。但 pip 常用作包管理器的原因是它直接从 PyPI 拉取包，PyPI 是一个比 Anaconda 的更完整的仓库。出于同样的原因，*我们将使用
    pip 作为我们的默认包管理器*。
- en: Creating an environment for data transformations
  id: totrans-76
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建用于数据转换的环境
- en: Contrary to what you have seen for R engines, for which two separate installations
    of two engines with different versions have been done, in the case of Python the
    installation is unique and *only the environments vary*.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 与你看到的 R 引擎不同，对于 R 引擎，已经安装了两个不同版本的独立引擎，在 Python 的情况下，安装是唯一的，*只有环境会变化*。
- en: Here, we will create an environment dedicated to data transformations and containing
    the latest version of Python made available by Miniconda and a small number of
    packages essential to make the first transformations.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将创建一个专门用于数据转换的环境，并包含 Miniconda 提供的最新版本的 Python 和少量对进行首次转换至关重要的包。
- en: 'First of all, you have to find the most recent version of Python present in
    the distribution you just installed:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你必须找到你刚刚安装的分布中存在的最新版本的 Python：
- en: Open Anaconda Prompt from the Start menu as shown previously.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如前所述，从开始菜单打开 Anaconda Prompt。
- en: If the prompt has small fonts, just right click on its title bar, select **Options**
    and then change the fonts as you like in the **Font** tab.The first thing to notice
    is the word **(base)** before the current path. The string before the path indicates
    *the name of the current environment*. The **base** environment is the default
    environment created during the installation of the Miniconda distribution.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果提示符中的字体很小，只需右键单击其标题栏，选择 **选项**，然后在 **字体** 选项卡中更改你喜欢的字体。首先要注意的是当前路径前的单词 **(base)**。路径前的字符串表示
    *当前环境的名称*。**base** 环境是在 Miniconda 分发安装期间创建的默认环境。
- en: Enter the `conda search python` command and press *Enter*.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入 `conda search python` 命令并按 *Enter*。
- en: 'You will see the list of available Python versions:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将看到可用的 Python 版本列表：
- en: '![Figure 3.4 – List of all the available Python versions](img/file41.png)'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图 3.4 – 所有可用的 Python 版本列表](img/file41.png)'
- en: Figure 3.4 – List of all the available Python versions
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 3.4 – 所有可用的 Python 版本列表
- en: The latest version available in our case is **3.9.1**.
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们案例中可用的最新版本是 **3.9.1**。
- en: 'Once we have found the latest version of Python available, we can create our
    environment dedicated to the data transformation in Power Query, which we will
    call `pbi_powerquery_env`:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们找到了可用的最新版本的 Python，我们就可以创建我们的环境，该环境专门用于 Power Query 中的数据转换，我们将称之为 `pbi_powerquery_env`：
- en: 'Enter the following command to create a new environment named `pbi_powerquery_env`
    and containing Python version `3.9.1`:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下命令以创建一个名为`pbi_powerquery_env`并包含Python版本`3.9.1`的新环境：
- en: '[PRE0]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You would have achieved the same thing if, instead of `==3.9.1`, you had used
    the form `=3.9` (with a single `=`), leaving it up to conda to find the latest
    micro-version.
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您使用的是`=3.9`（单个`=`）而不是`==3.9.1`，您将实现相同的效果，让conda找到最新的微版本。
- en: Anaconda Prompt will ask you to install some packages needed to create the environment.
    At the `Proceed ([y]/n)?` prompt, type `y` and press *Enter*.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Anaconda Prompt将要求您安装创建环境所需的某些包。在`Proceed ([y]/n)?`提示下，输入`y`并按*Enter*键。
- en: 'When the package installation is complete, you will still see **(base)** as
    the prompt prefix:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 当包安装完成时，您仍然会看到**(base)**作为提示前缀：
- en: '![Figure 3.5 – After creating the new environment, you are still in the old
    one called “base”](img/file42.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图3.5 – 创建新环境后，您仍然在旧的环境中，名为“base”](img/file42.png)'
- en: Figure 3.5 – After creating the new environment, you are still in the old one
    called “base”
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.5 – 创建新环境后，您仍然在旧的环境中，名为“base”
- en: 'This means that you are still in the base environment. Are you sure you created
    the new environment correctly? Let''s check it:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着您仍然在基础环境中。您确定您正确创建了新环境吗？让我们检查一下：
- en: 'Try to list the environments present on the system by entering the `conda env
    list` command:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过输入`conda env list`命令尝试列出系统上现有的环境：
- en: '![Figure 3.6 – List of conda environments in the system](img/file43.png)'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图3.6 – 系统中conda环境的列表](img/file43.png)'
- en: Figure 3.6 – List of conda environments in the system
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图3.6 – 系统中conda环境的列表
- en: Fortunately, the new environment is listed, but it is not the active one. The
    active environment is identified by an asterisk.
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 幸运的是，新环境被列出来了，但它不是活动环境。活动环境由一个星号标识。
- en: 'In order to install our packages inside the newly created environment, you
    must first **activate** it using the `conda activate pbi_powerquery_env` command:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了在新建的环境中安装我们的包，您必须首先使用`conda activate pbi_powerquery_env`命令**激活**它：
- en: '![Figure 3.7 – Activating the new environment](img/file44.png)'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图3.7 – 激活新环境](img/file44.png)'
- en: Figure 3.7 – Activating the new environment
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图3.7 – 激活新环境
- en: Now your prompt prefix correctly indicates that you are in your new environment.
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在您的提示前缀正确地表明您已进入您的新环境。
- en: 'To be on the safe side, check that the version of Python within the new environment
    is the one you expect with the `python --version` command:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了安全起见，使用`python --version`命令检查新环境中的Python版本是否如您预期：
- en: '![Figure 3.8 – Checking the Python version installed in the new environment](img/file45.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![图3.8 – 检查新环境中安装的Python版本](img/file45.png)'
- en: Figure 3.8 – Checking the Python version installed in the new environment
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.8 – 检查新环境中安装的Python版本
- en: 'You are inside your new environment and Python is correctly installed! You
    can now start installing some of the packages you''ll need later. The packages
    to be installed are as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 您已进入您的新环境，Python已正确安装！您现在可以开始安装您稍后需要的某些包。要安装的包如下：
- en: '**NumPy**: The most widely used library in Python for working with arrays,
    and with functions on linear algebra, Fourier transforms, and matrices.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NumPy**：Python中用于处理数组和线性代数、傅里叶变换和矩阵函数的最广泛使用的库。'
- en: '**SciPy**: Used to solve scientific and mathematical problems; it is built
    on the NumPy extension and allows the user to manipulate and visualize data.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SciPy**：用于解决科学和数学问题；它基于NumPy扩展，并允许用户操作和可视化数据。'
- en: '**Pandas**: A Python package that provides fast, flexible, and expressive tabular,
    multidimensional, and time-series data.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Pandas**：一个Python包，提供快速、灵活和表达式的表格、多维和时间序列数据。'
- en: '**Requests**: Allows you to send HTTP requests extremely easily.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Requests**：允许您极其容易地发送HTTP请求。'
- en: '**BeautifulSoup**: A library that makes it easy to scrape information from
    web pages.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**BeautifulSoup**：一个库，使从网页中抓取信息变得容易。'
- en: '**PyYAML**: Allows you to easily read and write YAML files.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PyYAML**：允许您轻松地读取和写入YAML文件。'
- en: You'll use the last three packages from the preceding list in the next section,
    where you will implicitly use web scraping procedures!
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，您将使用前面列表中的最后三个包，在那里您将隐式地使用网络爬取程序！
- en: 'But let’s get back to it, and proceed with the installation of each package
    via `pip`:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 但让我们回到正题，通过`pip`安装每个包：
- en: 'Enter the following command to install **NumPy**: `pip install numpy`.'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下命令安装**NumPy**：`pip install numpy`。
- en: 'Enter the following command to install **SciPy**: `pip install scipy`.'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下命令安装 **SciPy**：`pip install scipy`。
- en: 'Enter the following command to install **Pandas**: `pip install pandas`.'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下命令安装 **Pandas**：`pip install pandas`。
- en: 'Enter the following command to install **Requests**: `pip install requests`.'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下命令安装 **Requests**：`pip install requests`。
- en: 'Enter the following command to install **BeautifulSoup**: `pip install beautifulsoup4`.'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下命令安装 **BeautifulSoup**：`pip install beautifulsoup4`。
- en: 'Enter the following command to install **PyYAML**: `pip install pyyaml`.'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下命令安装 **PyYAML**：`pip install pyyaml`。
- en: 'Check that all packages have been installed correctly with the `conda list`
    command:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `conda list` 命令检查所有包是否已正确安装：
- en: '![Figure 3.9 – Checking all the selected Python packages are installed](img/file46.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.9 – 检查所有选定的 Python 包是否已安装](img/file46.png)'
- en: Figure 3.9 – Checking all the selected Python packages are installed
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.9 – 检查所有选定的 Python 包是否已安装
- en: Awesome! Your new environment is now properly configured. Let's now configure
    another environment for Python visuals on the Power BI service.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！您的新环境现在已正确配置。现在让我们为 Power BI 服务上的 Python 视觉效果配置另一个环境。
- en: Creating an environment for Python visuals on the Power BI service
  id: totrans-126
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在 Power BI 服务上创建 Python 视觉效果的环境
- en: As already mentioned, Python visual scripts published on the Power BI service
    run on a pre-installed Python engine on the cloud, the version of which may change
    with new releases of the Power BI service itself. Should you need to share a report
    containing a Python visual with colleagues, you need to be sure that your Python
    code works correctly on the pre-installed engine.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Power BI 服务上发布的 Python 视觉脚本在云上预安装的 Python 引擎上运行，其版本可能会随着 Power BI 服务本身的更新而变化。如果您需要与同事共享包含
    Python 视觉效果的报告，您需要确保您的 Python 代码在预安装的引擎上正确运行。
- en: '**Tip**'
  id: totrans-128
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**提示**'
- en: ''
  id: totrans-129
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: We strongly recommend that you also install on your machine the *same version*
    of Python that is used for Python visuals by the Power BI service.
  id: totrans-130
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我们强烈建议您在您的机器上也安装 Power BI 服务用于 Python 视觉效果的 **相同版本** 的 Python。
- en: Keep in mind that these limitations would not be there if your reports using
    Python visuals were not to be shared and that you only used them through Power
    BI Desktop. In this case, it is the engine on your machine that is used by the
    visuals.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，如果您使用 Python 视觉效果的报告不用于共享，并且您仅通过 Power BI Desktop 使用它们，那么这些限制将不会存在。在这种情况下，是您机器上的引擎被视觉效果使用。
- en: 'To create the new environment, you must check which versions of both Python
    and the allowed packages are supported by the Power BI service. You can check
    these requirements at this link: [http://bit.ly/powerbi-python-limits](http://bit.ly/powerbi-python-limits).
    As you can see, to date the supported version of Python is 3.7.7:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建新环境，您必须检查 Power BI 服务支持的 Python 和允许的包的版本。您可以通过此链接检查这些要求：[http://bit.ly/powerbi-python-limits](http://bit.ly/powerbi-python-limits)。如您所见，截至目前，支持的
    Python 版本是 3.7.7：
- en: '![Figure 3.10 – Python version supported for visuals on the Power BI service](img/file47.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.10 – Power BI 服务上用于视觉效果的 Python 版本](img/file47.png)'
- en: Figure 3.10 – Python version supported for visuals on the Power BI service
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.10 – Power BI 服务上用于视觉效果的 Python 版本
- en: 'In addition, to date the only packages allowed are the following ones:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，截至目前，允许的包仅限于以下这些：
- en: '`matplotlib 3.2.1`'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`matplotlib 3.2.1`'
- en: '`numpy 1.18.4`'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy 1.18.4`'
- en: '`pandas 1.0.1`'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pandas 1.0.1`'
- en: '`scikit-learn 0.23.0`'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scikit-learn 0.23.0`'
- en: '`scipy 1.4.1`'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scipy 1.4.1`'
- en: '`seaborn 0.10.1`'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`seaborn 0.10.1`'
- en: '`statsmodels 0.11.1`'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`statsmodels 0.11.1`'
- en: '`xgboost 1.1.0`'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xgboost 1.1.0`'
- en: 'The first thing that jumps out at you is the far smaller number of packages
    compared to the R packages that the Power BI service provides (8 Python packages
    versus more than 900 R packages!). This evident imbalance of available packages
    is primarily due to two causes:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 最引人注目的是，与 Power BI 服务提供的 R 包相比，Python 包的数量要少得多（8 个 Python 包与 900 多个 R 包相比！）。这种明显的包可用性不平衡主要归因于两个原因：
- en: '**Python** was *introduced more recently* than R (February 2019), so the Python
    packages introduced are mostly those essential to transforming and visualizing
    data.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Python** 相比 R（2019 年 2 月引入）较晚被引入，因此引入的 Python 包主要是那些用于数据转换和可视化的基本包。'
- en: '**R** is a language *primarily for data analysis*, and this is immediately
    clear because it provides a variety of packages that are designed for scientific
    visualization. **Python**, on the other hand, *is a general programming language*
    that can also be used for data analysis.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**R** 是一种主要用于数据分析的语言，这一点立即就很明显，因为它提供了各种用于科学可视化的包。另一方面，**Python** 是一种通用编程语言，也可以用于数据分析。'
- en: '**Tip**'
  id: totrans-147
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**提示**'
- en: ''
  id: totrans-148
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Because of the small number of Python packages supported by the Power BI service,
    we suggest creating a dedicated environment for Python scripts to run on the Power
    BI service, directly *installing all the current allowed packages*.
  id: totrans-149
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 由于 Power BI 服务支持的 Python 包数量很少，我们建议创建一个专门的环境来运行 Power BI 服务上的 Python 脚本，直接**安装所有当前允许的包**。
- en: Keep in mind that you can't properly run a Python visual without installing
    some default packages. See the following note.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，不安装一些默认包就无法正确运行 Python 可视化。请参阅以下说明。
- en: '**Important note**'
  id: totrans-151
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**重要提示**'
- en: ''
  id: totrans-152
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In order to properly run a Python visual, regardless of whether you do it on
    Power BI Desktop or the Power BI service, you must necessarily install the **pandas**
    and **Matplotlib** packages.
  id: totrans-153
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 为了正确运行 Python 可视化，无论您是在 Power BI Desktop 上还是在 Power BI 服务上运行，都必须安装 **pandas**
    和 **Matplotlib** 软件包。
- en: That said, you could already proceed to create another environment, satisfying
    the aforementioned version specifications, and following the steps already used
    to create the previous environment. Even though the Power BI service engines are
    updated infrequently, this manual task would still be tedious. Unfortunately,
    there are no ready-made "snapshots" that you can install on-the-fly to reproduce
    the environment, as you have seen in the case of R engines.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，您已经可以继续创建另一个环境，满足上述版本规格，并遵循创建先前环境时使用的步骤。尽管 Power BI 服务引擎更新不频繁，但这项手动任务仍然很繁琐。不幸的是，没有现成的“快照”可以即时安装以重现环境，正如您在
    R 引擎案例中看到的那样。
- en: '**Tip**'
  id: totrans-155
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**提示**'
- en: ''
  id: totrans-156
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: To avoid unnecessary manual work, we created a Python script that *scrapes the
    web page containing the Python engine requirements on the Power BI service* and
    automatically generates a **YAML file** to be used in the creation of the new
    environment.
  id: totrans-157
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 为了避免不必要的手动工作，我们创建了一个 Python 脚本，该脚本可以**抓取 Power BI 服务上包含 Python 引擎要求的网页**，并自动生成用于创建新环境的
    **YAML 文件**。
- en: '**YAML** (defined by some funny guy using the recursive acronym **YAML Ain''t
    Markup Language**) is a language useful for serializing data (it''s a bit of a
    rival to JSON) and is human-readable. It is often used to serialize the contents
    of a computer system’s configuration files.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '**YAML**（由某个使用递归缩写词 **YAML Ain''t Markup Language** 的有趣人物定义）是一种用于序列化数据（它与 JSON
    有点竞争关系）且可读性强的语言。它通常用于序列化计算机系统配置文件的内容。'
- en: 'In our case, a YAML file helps us gather together all the specifications we
    need to create our new environment. We thought about a YAML file because `conda`
    also permits the use of a YAML file as a parameter to create an environment. Our
    new environment, which we will call `pbi_visuals_env`, should have the following:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，一个 YAML 文件帮助我们收集创建新环境所需的所有规格。我们之所以考虑使用 YAML 文件，是因为 `conda` 也允许使用 YAML
    文件作为参数来创建环境。我们将要创建的新环境，我们将称之为 `pbi_visuals_env`，应该具备以下特性：
- en: The Python engine version 3.7.7
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 引擎版本 3.7.7
- en: The pip package manager
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: pip 软件包管理器
- en: All the 8 packages seen previously, each at the required version, installed
    using pip
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有之前看到的 8 个包，每个都安装到所需的版本，使用 pip 安装
- en: 'The preceding requirements can be summarized in a YAML file as follows:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 前述要求可以总结如下 YAML 文件：
- en: '[PRE1]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'So, let''s generate the YAML file using our Python script as follows:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们使用我们的 Python 脚本生成 YAML 文件，如下所示：
- en: Open your **Anaconda Prompt** (if you didn’t close it before, it should still
    be open) and make sure that `pbi_powerquery_env` is the activated environment.
    If not, activate it using the `conda activate pbi_powerquery_env` command.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的 **Anaconda Prompt**（如果您之前没有关闭它，它应该仍然打开），确保 `pbi_powerquery_env` 是激活的环境。如果不是，请使用
    `conda activate pbi_powerquery_env` 命令激活它。
- en: 'Your current path should be in the form of `C:/Users/<your-username>`. In my
    case, I have the following:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的当前路径应该是 `C:/Users/<your-username>` 的形式。在我的情况下，我有以下内容：
- en: '![Figure 3.11 – Our default Anaconda Prompt path](img/file48.png)'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图 3.11 – 我们默认的 Anaconda Prompt 路径](img/file48.png)'
- en: Figure 3.11 – Our default Anaconda Prompt path
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 3.11 – 我们默认的 Anaconda Prompt 路径
- en: 'If not, go to your user name folder using the command: `cd C:/Users/<your-username>`.'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果没有，请使用以下命令转到您的用户名文件夹：`cd C:/Users/<your-username>`。
- en: Let’s create a new folder called `py-environments` (this will contain the Python
    script for web scraping, along with the YAML file) using the `md py-environments`
    command.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们使用 `md py-environments` 命令创建一个名为 `py-environments` 的新文件夹（这将包含用于网络爬取的 Python
    脚本以及 YAML 文件）。
- en: Now, go to the book’s GitHub repository at [https://github.com/PacktPublishing/Extending-Power-BI-with-Python-and-R](https://github.com/PacktPublishing/Extending-Power-BI-with-Python-and-R).
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，前往书籍的 GitHub 仓库 [https://github.com/PacktPublishing/Extending-Power-BI-with-Python-and-R](https://github.com/PacktPublishing/Extending-Power-BI-with-Python-and-R)。
- en: If you have already downloaded the `.zip` file of the whole repository and unzipped
    it on your hard drive, you will find the Python script file that we are interested
    in in the `Chapter03` folder, with the name `01-create-pbi-service-py-packages-env-yaml-file.py`.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你已经下载了整个仓库的 `.zip` 文件并在你的硬盘上解压，你将在 `Chapter03` 文件夹中找到我们感兴趣的 Python 脚本文件，文件名为
    `01-create-pbi-service-py-packages-env-yaml-file.py`。
- en: 'If you haven’t downloaded the entire repository, click **Code** on top right
    of the page at the preceding link, and then click **Download ZIP**:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你还没有下载整个仓库，请点击前一个链接页面右上角的 **Code**，然后点击 **Download ZIP**：
- en: '![Figure 3.12 – Download the entire zipped repository](img/file49.png)'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图 3.12 – 下载整个压缩仓库](img/file49.png)'
- en: Figure 3.12 – Download the entire zipped repository
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 3.12 – 下载整个压缩仓库
- en: After unzipping it, you'll find the file we need in the `Chapter03` folder.
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 解压后，你会在 `Chapter03` 文件夹中找到我们需要的文件。
- en: Now copy the file, `01-create-pbi-service-py-packages-env-yaml-file.py`, into
    the `C:/Users/<your-username>/py-environments` folder using the File Explorer.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在将文件 `01-create-pbi-service-py-packages-env-yaml-file.py` 复制到 `C:/Users/<your-username>/py-environments`
    文件夹中，使用文件资源管理器完成此操作。
- en: 'Go back to Anaconda Prompt and change your current folder to `py-environment`
    using this command: `cd py-environment`.'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回 Anaconda Prompt 并使用此命令将当前文件夹更改为 `py-environment`：`cd py-environment`。
- en: 'Now you can finally run the Python script that does the web scraping and generates
    the YAML file with this command: `python 01-create-pbi-service-py-packages-env-yaml-file.py`.
    You will see the contents of the YAML file printed at the prompt as follows:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以最终运行这个网络爬取并生成 YAML 文件的 Python 脚本，使用以下命令：`python 01-create-pbi-service-py-packages-env-yaml-file.py`。你将在提示符中看到
    YAML 文件的内容，如下所示：
- en: '![Figure 3.13 – Execute the Python script to create the YAML file](img/file50.png)'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图 3.13 – 执行 Python 脚本以创建 YAML 文件](img/file50.png)'
- en: Figure 3.13 – Execute the Python script to create the YAML file
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 3.13 – 执行 Python 脚本以创建 YAML 文件
- en: 'You can also verify that the YAML file was generated correctly by looking again
    at the contents of the folder at `C:/Users/<your-username>/py-environments`:'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你也可以通过再次查看 `C:/Users/<your-username>/py-environments` 文件夹的内容来验证 YAML 文件是否正确生成：
- en: '![Figure 3.14 – The YAML file correctly created](img/file51.png)'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图 3.14 – 正确创建的 YAML 文件](img/file51.png)'
- en: Figure 3.14 – The YAML file correctly created
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 3.14 – 正确创建的 YAML 文件
- en: 'At this point, we can directly create the new environment using the following
    command: `conda env create -f visuals_environment.yaml`.'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此阶段，我们可以直接使用以下命令创建新环境：`conda env create -f visuals_environment.yaml`。
- en: 'When both Python and the packages’ installations are complete, activate the
    newly created environment using this command: `conda activate pbi_visuals_env`.'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当 Python 和包的安装都完成后，使用以下命令激活新创建的环境：`conda activate pbi_visuals_env`。
- en: 'Then check if the Python version is the one defined for this environment in
    the YAML file by entering the `python –version` command. You should see the following
    output:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后通过输入 `python –version` 命令检查 Python 版本是否与 YAML 文件中定义的此环境版本一致。你应该会看到以下输出：
- en: '![Figure 3.15 – The new environment contains the right Python version](img/file52.png)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.15 – 新环境包含正确的 Python 版本](img/file52.png)'
- en: Figure 3.15 – The new environment contains the right Python version
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.15 – 新环境包含正确的 Python 版本
- en: Excellent! You have finally created the new environment that will come in use
    when developing your Python visuals for publishing on the Power BI service. If
    you are interested in understanding in detail how the previous Python script managed
    to capture all the information needed to create the environment, you can open
    it in any code editor and read the very detailed comments on the code.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！你终于创建了一个新环境，这个环境将在你为 Power BI 服务发布 Python 可视化时派上用场。如果你对详细了解之前的 Python 脚本是如何捕获创建环境所需的所有信息感兴趣，你可以在任何代码编辑器中打开它，并阅读代码上的详细注释。
- en: What to do when the Power BI service upgrades the Python engine
  id: totrans-192
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 当 Power BI 服务升级 Python 引擎时该怎么做
- en: As we did in *Chapter 2, Configuring R with Power BI*, let's assume that you
    have already developed and published reports containing Python visuals using the
    new environment you created earlier. Suppose that Microsoft decides to upgrade
    the Python version supported by the Power BI service, and consequently to upgrade
    the versions of currently supported packages as well. As you may have already
    guessed, it is likely that these updates can cause the code to fail (it is a rare
    event as very often, backward compatibility is guaranteed).
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在 *第 2 章，配置 R 与 Power BI* 中所做的那样，让我们假设您已经使用之前创建的新环境开发和发布了包含 Python 可视化的报告。假设微软决定升级
    Power BI 服务支持的 Python 版本，以及相应地升级当前支持的包版本。正如您可能已经猜到的，这些更新可能会使代码失败（这是一个罕见的事件，因为通常向后兼容性是有保证的）。
- en: '**Tip**'
  id: totrans-194
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**提示**'
- en: ''
  id: totrans-195
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In such circumstances, it is often more convenient to *create a new environment
    on the fly*, aligned to the updated requirements from Microsoft, through the Python
    script you have already used previously. Next, you'll need to *test reports on
    the service that contain Python visuals on Power BI Desktop*, making sure that
    it references the newly created environment. You need to fix any code issue in
    those Python visuals that have some problems, after which you can publish those
    reports back to the Power BI service.
  id: totrans-196
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在这种情况下，通常更方便的是在 Python 脚本中**即时创建一个新环境**，以适应微软更新的要求。接下来，您需要**在 Power BI Desktop
    上包含 Python 可视化的服务中进行测试报告**，确保它引用了新创建的环境。您需要修复那些 Python 可视化中存在的任何代码问题，之后您可以将这些报告重新发布到
    Power BI 服务。
- en: Once you've made sure that all of the reports are working properly, it's up
    to you to decide if you want to uninstall the "old" environment to free up disk
    space and avoid confusion in handling these particular reports.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您确认所有报告都运行正常，您就可以决定是否要卸载“旧”环境以释放磁盘空间并避免在处理这些特定报告时产生混淆。
- en: At this point, we can move on to the configuration and installation of some
    IDEs that facilitate the development of Python scripts.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们可以继续配置和安装一些便于 Python 脚本开发的 IDE。
- en: Installing an IDE for Python development
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Python 开发 IDE
- en: In *Chapter 2, Configuring R with Power BI*, you installed RStudio to conveniently
    develop your own R scripts. Did you know that, starting with version 1.4, you
    can write and run Python code directly in RStudio, making use of advanced tools
    for viewing instantiated Python objects?
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *第 2 章，配置 R 与 Power BI* 中，您安装了 RStudio 以方便地开发您自己的 R 脚本。您知道吗？从版本 1.4 开始，您可以直接在
    RStudio 中编写和运行 Python 代码，利用高级工具来查看实例化的 Python 对象。
- en: Let's see how to configure your RStudio installation to also run Python code.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何配置您的 RStudio 安装以运行 Python 代码。
- en: Configuring Python with RStudio
  id: totrans-202
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 RStudio 配置 Python
- en: 'In order to allow RStudio to communicate with the Python world, you need to
    install a package called **reticulate**, which contains a comprehensive set of
    tools for interoperability between Python and R thanks to embedded Python sessions
    within R sessions. After that, it''s a breeze to configure Python within RStudio.
    Let''s see how to do it:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 为了允许 RStudio 与 Python 世界进行通信，您需要安装一个名为 **reticulate** 的包，该包包含了一组用于 Python 和
    R 之间互操作性的工具，这是由于 R 会话中嵌入的 Python 会话。之后，在 RStudio 中配置 Python 就变得非常简单。让我们看看如何操作：
- en: Open RStudio and make sure the referenced engine is the latest one, in our case
    **MRO 4.0.2**. As seen in *Chapter 2, Configuring R with Power BI*, you can set
    up your R engine in RStudio by going to the **Tools** menu and then **Global Options...**.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 RStudio 并确保引用的引擎是最新版本，在我们的例子中是 **MRO 4.0.2**。正如在 *第 2 章，配置 R 与 Power BI*
    中所见，您可以通过访问 **工具** 菜单然后 **全局选项...** 来在 RStudio 中设置您的 R 引擎。
- en: 'Let''s check at which date the current snapshot is frozen by typing `getOption("repos")`
    in the command-line interface:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们通过在命令行界面中输入`getOption("repos")`来检查当前快照被冻结的日期：
- en: '![Figure 3.16 – Current snapshot date with MRO 4.0.2](img/file53.png)'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图 3.16 – 使用 MRO 4.0.2 的当前快照日期](img/file53.png)'
- en: Figure 3.16 – Current snapshot date with MRO 4.0.2
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 3.16 – 使用 MRO 4.0.2 的当前快照日期
- en: As you can see, the snapshot date is not very recent.
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如您所见，快照日期并不十分近期。
- en: 'Since the goal of installing the latest R engine is to develop code using the
    latest packages, we can remove the snapshot limitation by overwriting the package
    repository URL. You can do this by creating a new R script, by clicking on the
    top-left green **+** icon and then choosing **R Script**:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于安装最新 R 引擎的目标是使用最新包来开发代码，我们可以通过覆盖包仓库 URL 来移除快照限制。你可以通过创建一个新的 R 脚本，点击左上角的绿色
    **+** 图标，然后选择 **R Script** 来完成此操作：
- en: '![Figure 3.17 – Reset the repository URL to a CRAN mirror](img/file54.png)'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图 3.17 – 将仓库 URL 重置为 CRAN 镜像](img/file54.png)'
- en: Figure 3.17 – Reset the repository URL to a CRAN mirror
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 3.17 – 将仓库 URL 重置为 CRAN 镜像
- en: 'Then copy the following script into the new script tab that has been added
    by RStudio:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将以下脚本复制到 RStudio 添加的新脚本选项卡中：
- en: '[PRE2]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, just highlight the script and click **Run** at the top right:'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，只需高亮显示脚本，然后在右上角点击 **Run**：
- en: '![Figure 3.18 – Run your first R script into RStudio](img/file55.png)'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图 3.18 – 在 RStudio 中运行你的第一个 R 脚本](img/file55.png)'
- en: Figure 3.18 – Run your first R script into RStudio
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 3.18 – 在 RStudio 中运行你的第一个 R 脚本
- en: 'If you now go to the console at the bottom and enter `getOption("repos")` again,
    you will see the updated repository URL:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你现在去底部的控制台，再次输入 `getOption("repos")`，你会看到更新的仓库 URL：
- en: '![Figure 3.19 – The packages repository has been updated](img/file56.png)'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图 3.19 – 包仓库已更新](img/file56.png)'
- en: Figure 3.19 – The packages repository has been updated
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 3.19 – 包仓库已更新
- en: Now, you are sure to always install the latest versions of the packages on CRAN.
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，你肯定能始终安装 CRAN 上的最新版本的包。
- en: 'You can now install the reticulate package by clicking on the **Packages**
    tab on the bottom-right panel in RStudio, clicking on **Install**, entering the
    `reticulate` string into the textbox, and finally clicking on the **Install**
    button:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以通过点击 RStudio 右下角的 **Packages** 选项卡，然后点击 **Install**，在文本框中输入 `reticulate`
    字符串，并最终点击 **Install** 按钮来安装 reticulate 包：
- en: '![Figure 3.20 – Install the reticulate package](img/file57.png)'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图 3.20 – 安装 reticulate 包](img/file57.png)'
- en: Figure 3.20 – Install the reticulate package
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 3.20 – 安装 reticulate 包
- en: 'After that, go to the **Tools** menu and then **Global Options…**. In the **Options**
    windows that pops up, click on **Python**, then click on **Select…** to choose
    your Python interpreter executable. Note that you will have as many executables
    as the number of environments you have created:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，转到 **Tools** 菜单，然后选择 **Global Options…**。在弹出的 **Options** 窗口中，点击 **Python**，然后点击
    **Select…** 来选择你的 Python 解释器可执行文件。请注意，你将有多少个可执行文件，就有多少个环境你创建了：
- en: '![Figure 3.21 – Set your preferred Python interpreter in RStudio](img/file58.png)'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图 3.21 – 在 RStudio 中设置你的首选 Python 解释器](img/file58.png)'
- en: Figure 3.21 – Set your preferred Python interpreter in RStudio
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 3.21 – 在 RStudio 中设置你的首选 Python 解释器
- en: Choose the Python interpreter with the latest version (in our case 3.9.1). You’ll
    be asked to restart the current R session. Choose **Yes**.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择最新版本的 Python 解释器（在我们的例子中是 3.9.1）。你将被要求重新启动当前的 R 会话。选择 **Yes**。
- en: 'Now you can open a new Python script file by clicking on the green **+** icon
    on the top left and then choosing **Python Script**:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以通过点击左上角的绿色 **+** 图标，然后选择 **Python Script** 来打开一个新的 Python 脚本文件：
- en: '![Figure 3.22 – Create a new Python script in RStudio](img/file59.png)'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图 3.22 – 在 RStudio 中创建一个新的 Python 脚本](img/file59.png)'
- en: Figure 3.22 – Create a new Python script in RStudio
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 3.22 – 在 RStudio 中创建一个新的 Python 脚本
- en: 'Write the code `a = [1, 2]` in the new script file, highlight it, and then
    click the **Run** icon on the top right:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新的脚本文件中编写代码 `a = [1, 2]`，将其高亮显示，然后点击右上角的 **Run** 图标：
- en: '![Figure 3.23 – Run your first Python script in RStudio](img/file60.png)'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图 3.23 – 在 RStudio 中运行你的第一个 Python 脚本](img/file60.png)'
- en: Figure 3.23 – Run your first Python script in RStudio
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 3.23 – 在 RStudio 中运行你的第一个 Python 脚本
- en: You can see from the console that RStudio uses reticulate behind the scenes.
    Moreover, on the top-right panel, you can inspect the Python variables created
    after the execution of your code.
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以从控制台看到，RStudio 在幕后使用 reticulate。此外，在右上角的面板中，你可以检查代码执行后创建的 Python 变量。
- en: Great! You have successfully configured RStudio to run your Python code.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！你已经成功配置了 RStudio 来运行你的 Python 代码。
- en: Configuring Python with Visual Studio Code
  id: totrans-236
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Visual Studio Code 配置 Python
- en: 'If you''re an R language lover, chances are you''d prefer to run both R and
    Python code on RStudio. However, if you have the spirit of a true *Pythonista*,
    you''ll definitely enjoy using one of the advanced editors that has been all the
    rage lately: **Visual Studio Code** (**VSCode**). Let’s install and configure
    it!'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是R语言爱好者，那么您可能会更喜欢在RStudio上运行R和Python代码。然而，如果您有真正的*Pythonista*精神，那么您一定会喜欢使用最近备受追捧的其中一个高级编辑器：**Visual
    Studio Code**（**VSCode**）。让我们来安装和配置它！
- en: Download VSCode from this link ([https://code.visualstudio.com/](https://code.visualstudio.com/))
    by clicking on the **Download for Windows** button.
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击**下载Windows版**按钮，从此链接([https://code.visualstudio.com/](https://code.visualstudio.com/))下载VSCode。
- en: Run the executable and click **OK** when it asks to continue with the User Installer.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行可执行文件，当它询问是否继续使用用户安装程序时点击**确定**。
- en: Accept the agreement and click **Next** on the next window.
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接受协议并在下一个窗口上点击**下一步**。
- en: Then keep the default destination folder and click **Next**.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后保持默认目标文件夹并点击**下一步**。
- en: Also keep the default Start menu folder on the following window and click **Next**.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 还要在下一个窗口中保持默认的启动菜单文件夹并点击**下一步**。
- en: On the **Additional Tasks** window, choose the tasks you prefer and click **Next**.
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**附加任务**窗口中，选择您喜欢的任务并点击**下一步**。
- en: Click **Install** on the recap window.
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在摘要窗口上点击**安装**。
- en: After the installation is completed, keep the **Launch Visual Studio Code**
    checkbox flagged and click **Finish**.
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，保持**启动Visual Studio Code**复选框选中，并点击**完成**。
- en: 'After VSCode has started, click on the **Extensions** icon on the left, then
    start entering the `python` string and click on the **Python** extension:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: VSCode启动后，点击左侧的**扩展**图标，然后开始输入`python`字符串并点击**Python**扩展：
- en: '![Figure 3.24 – Run your first Python script in RStudio](img/file61.png)'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图3.24 – 在RStudio中运行您的第一个Python脚本](img/file61.png)'
- en: Figure 3.24 – Run your first Python script in RStudio
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图3.24 – 在RStudio中运行您的第一个Python脚本
- en: Click on **Install** on the extension’s welcome page on the main panel.
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在扩展的主面板上的欢迎页面上点击**安装**。
- en: Now go to the **File** menu at the top and click **Open Folder…**.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在转到顶部的**文件**菜单并点击**打开文件夹…**。
- en: 'Create a new test folder named **Hello** from the **Open Folder** windows and
    then select that folder:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**打开文件夹**窗口中创建一个名为**Hello**的新测试文件夹，然后选择该文件夹：
- en: '![Figure 3.25 – Create a new folder on the fly and select it in the Open Folder
    window](img/file62.png)'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图3.25 – 在打开文件夹窗口中创建新文件夹并选择它](img/file62.png)'
- en: Figure 3.25 – Create a new folder on the fly and select it in the Open Folder
    window
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图3.25 – 在打开文件夹窗口中创建新文件夹并选择它
- en: 'Now you have to select the Python interpreter accessing the **Command Palette**
    using *Ctrl* + *Shift* + *P*. Then start entering the `interpreter` string and
    click **Python: Select Interpreter**:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您必须通过使用*Ctrl* + *Shift* + *P*访问**命令面板**来选择Python解释器。然后开始输入`interpreter`字符串并点击**Python：选择解释器**：
- en: '![Figure 3.26 – Choose the Python: Select Interpreter option in the Command
    Palette](img/file63.png)'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图3.26 – 在命令面板中选择Python：选择解释器选项](img/file63.png)'
- en: 'Figure 3.26 – Choose the Python: Select Interpreter option in the Command Palette'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图3.26 – 在命令面板中选择Python：选择解释器选项
- en: 'You’ll be prompted to select one of the actual environments you have on your
    machine. Choose the **pbi_powerquery_env** environment:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将被提示选择您机器上实际拥有的其中一个环境。选择**pbi_powerquery_env**环境：
- en: '![Figure 3.27 – Select your preferred environment](img/file64.png)'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图3.27 – 选择您首选的环境](img/file64.png)'
- en: Figure 3.27 – Select your preferred environment
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图3.27 – 选择您首选的环境
- en: 'You can see the selected environment on the status bar on the left:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以在左侧的状态栏上看到所选环境：
- en: '![Figure 3.28 – Check the selected environment on the status bar](img/file65.png)'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图3.28 – 在状态栏上检查所选环境](img/file65.png)'
- en: Figure 3.28 – Check the selected environment on the status bar
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图3.28 – 在状态栏上检查所选环境
- en: 'Go back to your **HELLO** folder in the Explorer panel on the left. Click on
    the *new file* icon next to the **HELLO** label and name the new file `hello.py`:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回左侧的资源管理器面板中的**HELLO**文件夹。点击**HELLO**标签旁边的**新建文件**图标，并将新文件命名为`hello.py`：
- en: '![Figure 3.29 – Create a new file named hello.py in the Hello folder](img/file66.png)'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图3.29 – 在Hello文件夹中创建一个名为hello.py的新文件](img/file66.png)'
- en: Figure 3.29 – Create a new file named hello.py in the Hello folder
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图3.29 – 在Hello文件夹中创建一个名为hello.py的新文件
- en: 'Enter the following code in the new file:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新文件中输入以下代码：
- en: '[PRE3]'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then click the *run* icon (the green triangle) on the top right of the main
    panel:'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后在主面板右上角点击**运行**图标（绿色的三角形）：
- en: '![Figure 3.30 – Enter the sample code and run it](img/file67.png)'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图3.30 – 输入示例代码并运行](img/file67.png)'
- en: Figure 3.30 – Enter the sample code and run it
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图3.30 – 输入示例代码并运行
- en: 'You can see the result in the following Terminal output:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以在以下终端输出中看到结果：
- en: '![Figure 3.31 – Your first Python script run in VSCode](img/file68.png)'
  id: totrans-272
  prefs: []
  type: TYPE_IMG
  zh: '![图3.31 – 在VSCode中运行您的第一个Python脚本](img/file68.png)'
- en: Figure 3.31 – Your first Python script run in VSCode
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.31 – 在VSCode中运行您的第一个Python脚本
- en: Very good! Your VSCode is now configured correctly to run Python scripts.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 很好！您的VSCode现在已正确配置，可以运行Python脚本。
- en: Configuring Power BI Desktop to work with Python
  id: totrans-275
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置Power BI桌面版以与Python协同工作
- en: 'Since you have everything you need installed, you can now configure Power BI
    Desktop to interact with Python engines and IDEs. This is really a very simple
    task:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 由于您已经安装了所有必需的组件，您现在可以配置Power BI桌面版以与Python引擎和IDE交互。这实际上是一个非常简单的任务：
- en: 'In Power BI Desktop, go to the **File** menu, click on the **Options and settings**
    tab, and then click on **Options**:'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Power BI桌面版中，转到**文件**菜单，点击**选项和设置**选项卡，然后点击**选项**：
- en: '![Figure 3.32 – Opening the Power BI Desktop Options and settings window](img/file69.png)'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图3.32 – 打开Power BI桌面版的选项和设置窗口](img/file69.png)'
- en: Figure 3.32 – Opening the Power BI Desktop Options and settings window
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图3.32 – 打开Power BI桌面版的选项和设置窗口
- en: 'In the **Options** window, click on the **Python scripting** link on the left.
    The contents of the panel on the right will update, giving you the option to select
    the Python environment to reference and the Python IDE to use for Python visuals.
    By default, the detected interpreter is the default one installed by Miniconda.
    In order to select a specific environment, you need to choose **Other** and then
    click **Browse** and supply a reference to your environment folder:'
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**选项**窗口中，点击左侧的**Python脚本**链接。右侧面板的内容将更新，您可以选择要引用的Python环境和用于Python可视化的Python
    IDE。默认情况下，检测到的解释器是由Miniconda安装的默认解释器。为了选择特定的环境，您需要选择**其他**，然后点击**浏览**并提供对环境文件夹的引用：
- en: '![Figure 3.33 – Configuring your Python environment and IDE in Power BI](img/file70.png)'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图3.33 – 在Power BI中配置您的Python环境和IDE](img/file70.png)'
- en: Figure 3.33 – Configuring your Python environment and IDE in Power BI
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图3.33 – 在Power BI中配置您的Python环境和IDE
- en: Usually, you can find the default environments folder in `C:\Users\<your-username>\miniconda3\envs\`.
    Then select your `pbi_powerquery_env` subfolder.
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通常，您可以在`C:\Users\<your-username>\miniconda3\envs\`中找到默认的环境文件夹。然后选择您的`pbi_powerquery_env`子文件夹。
- en: By default, Power BI recognizes VSCode as a Python IDE. Keep it as is and click
    **OK**.
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认情况下，Power BI将VSCode识别为Python IDE。保持原样并点击**确定**。
- en: You will see how to interact with the IDE from Power BI Desktop when we introduce
    the R and Python script visuals in *Chapter 12, Exploratory Data Analysis*.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在第12章“探索性数据分析”中介绍R和Python脚本可视化时，您将看到如何从Power BI桌面版与IDE交互。
- en: Configuring the Power BI service to work with R
  id: totrans-286
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置Power BI服务以与R协同工作
- en: As you have already learned from *Chapter 2, Configuring R with Power BI*, in
    order to allow the Power BI service to use R in the data transformation steps
    with Power Query, you must install the **on-premises data gateway** in **personal
    mode** on an external machine, on which an R engine is installed. The same thing
    applies to Python with Power Query in the Power BI service. So, if you have not
    installed the on-premises data gateway yet, do it by following the steps in *Chapter
    2*.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在第2章“配置Power BI中的R”中所学，为了允许Power BI服务在数据转换步骤中使用R和Power Query，您必须在安装了R引擎的外部机器上安装**本地数据网关**，并设置为**个人模式**。同样，Power
    BI服务中的Power Query使用Python也是如此。因此，如果您尚未安装本地数据网关，请按照第2章中的步骤进行安装。
- en: '**Important note**'
  id: totrans-288
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**重要提示**'
- en: ''
  id: totrans-289
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Python engines and R engines can be *installed on the same external machine*
    and *referenced by a single data gateway*. You must make sure, however, that the
    machine's resources are sufficient to handle the load of requests coming from
    the Power BI service.
  id: totrans-290
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Python引擎和R引擎可以**安装在同一外部机器**上，并且可以通过单个数据网关**引用**。然而，您必须确保机器的资源足以处理来自Power BI服务的请求负载。
- en: Sharing reports that use Python scripts in the Power BI service
  id: totrans-291
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Power BI服务中共享使用Python脚本的报告
- en: What was said about how to share reports that use R scripts for data transformations
    in the Power BI service in *Chapter 2, Configuring R with Power BI* also applies
    to reports that use Python scripts. Consider the following tip in summary.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 关于如何在 Power BI 服务中使用 R 脚本进行数据转换的说明，在 *第 2 章，配置 Power BI 中的 R* 中提到，也适用于使用 Python
    脚本的报告。以下是一些总结性的提示。
- en: '**Tip**'
  id: totrans-293
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**提示**'
- en: ''
  id: totrans-294
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: You can use an unofficial architecture that makes use of a personal data gateway
    associated not with a physical person, but with a *fictitious "service" user*.
    The credentials of this user are shared between all those analysts who use Python
    (along with R) code to transform data into their reports. Also, since the machine
    with the Python engines referenced by the gateway is shared, it must remain on
    during periods of scheduled activity. The same machine often hosts the R engines
    too. An *Azure Windows Virtual Machine*, on which the R and Python engines and
    the data gateway run, is often used in this architecture.
  id: totrans-295
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你可以使用一个非官方架构，该架构利用一个与物理人无关，而是与一个 *虚构的“服务”用户* 关联的个人数据网关。此用户的凭证在所有使用 Python（以及
    R）代码将数据转换到其报告中的分析师之间共享。此外，由于网关引用的 Python 引擎所在的机器是共享的，因此必须在计划活动期间保持开启。同一台机器通常也托管
    R 引擎。在这个架构中，经常使用一个 *Azure Windows 虚拟机*，在该虚拟机上运行 R 和 Python 引擎以及数据网关。
- en: 'As a reminder, *Figure 3.34* summarizes the aforementioned architecture:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 作为提醒，*图 3.34* 总结了上述架构：
- en: '![Figure 3.34 – Enterprise architecture for the use of Python and R in data
    transformations](img/file71.png)'
  id: totrans-297
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.34 – 在数据转换中使用 Python 和 R 的企业架构](img/file71.png)'
- en: Figure 3.34 – Enterprise architecture for the use of Python and R in data transformations
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.34 – 在数据转换中使用 Python 和 R 的企业架构
- en: Thanks to this architecture it is possible to allow a group of analysts to be
    able to use Python scripts in their reports, despite the limitations imposed by
    the on-premises data gateway in personal mode.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 多亏了这种架构，才使得一组分析师能够使用 Python 脚本在他们的报告中，尽管个人模式下的本地数据网关施加了限制。
- en: That said, in addition to the limitations seen for Python scripts in Power Query,
    there are some important ones to be aware of for Python visuals as well.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，除了 Power Query 中 Python 脚本的限制之外，还有一些对于 Python 可视化也很重要的限制需要注意。
- en: Limitations of Python visuals
  id: totrans-301
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python 可视化的限制
- en: 'Python visuals have some important limitations regarding the data they can
    handle, both input and output:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: Python 可视化在处理数据方面有一些重要的限制，包括输入和输出：
- en: A Python visual can handle a *dataframe with only 150,000 rows*. If there are
    more than 150,000 rows, only the first 150,000 rows are used.
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 可视化可以处理 *只有 150,000 行的数据框*。如果行数超过 150,000，则只使用前 150,000 行。
- en: Python visuals have an *output size limit of 2MB*.
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 可视化有一个 *输出大小限制为 2MB*。
- en: You must also be careful not to exceed the *5-minute runtime calculation* for
    a Python visual in order to avoid a time-out error. Moreover, in order not to
    run into performance problems, *the resolution of the Python visual plots is fixed
    at 72 DPI*.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 你还必须小心不要超过 Python 可视化的 *5分钟运行时计算*，以避免超时错误。此外，为了避免性能问题，*Python 可视化图表的分辨率固定为 72
    DPI*。
- en: As you can imagine, some limitations of Python visuals are different depending
    on whether you run the visual on Power BI Desktop or the Power BI service.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所想，Python 可视化的某些限制取决于你是在 Power BI Desktop 还是 Power BI 服务上运行该可视化。
- en: 'When creating reports in *Power BI Desktop*, you can do the following:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 *Power BI Desktop* 创建报告时，你可以执行以下操作：
- en: Install any kind of package (PyPI and custom) in your engine for Python visuals.
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在你的 Python 可视化引擎中安装任何类型的包（PyPI 和自定义）。
- en: Access the internet from a Python visual.
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 Python 可视化访问互联网。
- en: 'When creating reports in *the Power BI service*, you can do the following:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *Power BI 服务* 中创建报告时，你可以执行以下操作：
- en: 'You can only use the PyPI packages listed at this link: [https://bit.ly/powerbi-python-limits](https://bit.ly/powerbi-python-limits).'
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你只能使用此链接中列出的 PyPI 包：[https://bit.ly/powerbi-python-limits](https://bit.ly/powerbi-python-limits)。
- en: You cannot access the internet from a Python visual.
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你不能从 Python 可视化访问互联网。
- en: '**Important note**'
  id: totrans-313
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**重要提示**'
- en: ''
  id: totrans-314
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In contrast to the case of R visuals, you **do not** have the option of developing
    a custom Python visual.
  id: totrans-315
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 与 R 可视化的情况相反，你 **没有** 开发自定义 Python 可视化的选项。
- en: Once one of your reports is published on the Power BI service, you can decide
    to share it on your blog, on one of your websites, or on social media via the
    **Publish to web** option. Unfortunately, Python visuals (as well as R visuals)
    *are not usable on reports to be published publicly on the web by design by Microsoft*.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你的报告在 Power BI 服务上发布，你可以选择通过“发布到网络”选项将其分享到你的博客、你的网站之一或社交媒体上。不幸的是，根据微软的设计，Python
    可视化（以及 R 可视化）*在公开发布到网络上的报告中不可用*。
- en: '**Tip**'
  id: totrans-317
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**提示**'
- en: ''
  id: totrans-318
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If you absolutely need to publish a particular visualization to the web, remember
    that *custom R visuals* overcome the limitation on publishing to the web. So,
    you need to switch from Python to R.
  id: totrans-319
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果你绝对需要将特定的可视化发布到网络上，请记住，*自定义 R 可视化*可以克服发布到网络上的限制。因此，你需要从 Python 切换到 R。
- en: Summary
  id: totrans-320
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned about the most popular free Python distributions
    in the community and the best practices for their use.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你了解了社区中最受欢迎的免费 Python 发行版及其使用最佳实践。
- en: Using the unique features of Power BI Desktop and the Power BI service, you
    have learned how to properly create specific Python environments.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用 Power BI Desktop 和 Power BI 服务的独特功能，你学习了如何正确创建特定的 Python 环境。
- en: You also learned that the most popular IDE in the R community (RStudio) can
    also run Python code. In addition, you have installed and configured VSCode, which
    is to date one of the most widely used advanced editors for Python.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 你还了解到在 R 社区中最受欢迎的 IDE（RStudio）也可以运行 Python 代码。此外，你已安装并配置了 VSCode，这是迄今为止最广泛使用的
    Python 高级编辑器之一。
- en: You were also introduced to all of the best practices for properly configuring
    both Power BI Desktop and the Power BI service with Python, whether in a development
    or enterprise environment.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 你还了解了在开发或企业环境中使用 Python 正确配置 Power BI Desktop 和 Power BI 服务的最佳实践。
- en: Finally, you've learned some of the limitations on using Python with Power BI,
    knowledge of which is critical to avoid making mistakes in developing and deploying
    reports.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你了解了一些使用 Python 与 Power BI 相关的限制，这些知识对于避免在开发和部署报告时犯错误至关重要。
- en: In the next chapter, we’ll finally start working with R and Python scripts in
    Power BI, doing data ingestion and data transformation.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将最终开始使用 Power BI 中的 R 和 Python 脚本，进行数据摄取和数据转换。
