- en: Tableau Table Calculations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned how to create some simple calculations in
    Tableau. However, sometimes we might want to use the results of those calculations
    to create new insights. For instance, at this point in the book, we can use the
    knowledge we have gained thus far to create fields to show the total number of
    sales by customer and add calculations to show the average sales for a line item,
    but we can't use the results of the sales by customer to show the average overall
    sales by customer. This is where **table calculations** come in, enabling us to
    use the results of our prior calculations as input for new ones.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: General table calculations and background
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating quick table calculations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing table calculations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up manual table calculations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Practical examples
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter uses the Global Superstore dataset, which can be found at [http://www.tableau.com/sites/default/files/training/global_superstore.zip](http://www.tableau.com/sites/default/files/training/global_superstore.zip).
  prefs: []
  type: TYPE_NORMAL
- en: General table calculations and background
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A table calculation is a way to take the results of usual calculations, as defined
    in the previous chapters, and perform additional calculations based on those results
    (and not on the underlying data).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take an example of a table calculation that looks at the average of `SUM(Profit)`
    by `Year (Order Date)` (we will learn how to create such a calculation later in
    this chapter):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c4ac2c17-3964-474c-9192-e930a93e358d.png)'
  prefs: []
  type: TYPE_IMG
- en: In this instance, the average is calculated by looking at the aggregated marks
    (in this case, ($248,941+$307,415+$406,935+$504,166)/4 = $366,864), not by averaging
    the profits in the underlying data.
  prefs: []
  type: TYPE_NORMAL
- en: There are two main components to a table calculation in Tableau. The first element
    is the calculation that we want to perform on those marks (in this case, a straight
    average on the marks). The second is the **scope** (or **partition**), which we
    will look at in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Structure of a view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A Tableau worksheet view can be broken down into three main levels, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7c033118-9719-4c88-a810-93339c54fc6b.png)'
  prefs: []
  type: TYPE_IMG
- en: While the Table represents the entire view, a Pane is the part of the view corresponding
    to an intersection of dimensions in the rows and columns that is delimited by
    a **dividing line**. For instance, in this example, there are 12 panes because
    there are 4 divided column sections and 3 row sections, and therefore, there are
    12 intersections.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, the Cell is the smallest intersection of dimensions, and there are
    180 of them in the preceding view. In this case, the cell consists of one single
    mark (a text value), but a cell can include multiple marks, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/98cababe-f7c9-4af8-9aba-9d1adb195dcf.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's see how these different partitions interact with table calculations.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the scope of a calculation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Table calculations are always calculated within a particular scope, which is
    usually one of the three options that we looked at in the previous section (a Table,
    Pane, or Cell); this enables Tableau to know when if or when to reset the calculation
    at a certain point.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s use our previous example and introduce `Segment`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/aece3b42-a42c-4c66-9dd4-5d33122fde6d.png)'
  prefs: []
  type: TYPE_IMG
- en: In this case, the same calculation can take one value for the entire table (along
    Table), or be calculated within every pane (along Pane) or every cell (along Cell).
  prefs: []
  type: TYPE_NORMAL
- en: 'Some options also include a direction: Down, Across (which resets when you
    get to the bottom or the right of the partition) or combinations, such as Across,
    then Down (which continues with the next row, rather than stopping at the end
    of the current one, while within the scope).'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, table calculations are sometimes computed relative to another cell. For
    instance, if we are calculating a percentage difference, we have to specify which
    cell is the reference for the calculation. This can be within the scope, the first
    or the last, the previous or the next, or the cell corresponding to a specific
    value of a dimension (for example, relative to the value associated with the year
    2011).
  prefs: []
  type: TYPE_NORMAL
- en: To summarize, table calculations are further computations on the aggregated
    results of our simple calculations, defined within a certain scope. Now that we
    have some context for table calculations, let's start to set some up.
  prefs: []
  type: TYPE_NORMAL
- en: Creating quick table calculations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The easiest way to create a table calculation is to start with the Quick Table
    Calculations options.
  prefs: []
  type: TYPE_NORMAL
- en: 'Every pill representing a measure (including a count or distinct counts of
    dimensions), whether discrete or continuous, holds the Quick Table Calculation option
    in its own menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dae967a3-8566-4af6-b39b-f774c00fbafd.png)'
  prefs: []
  type: TYPE_IMG
- en: Using one of the options presented here will replace the current aggregation
    with a table calculation, and the pill will then include a Δ sign to signify that
    the calculation is now a table calculation. Let's go through the different options
    available.
  prefs: []
  type: TYPE_NORMAL
- en: Different options for quick calculations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are 11 options in total to create quick table calculations:'
  prefs: []
  type: TYPE_NORMAL
- en: Running Total progressively sums the aggregated marks within the partition and
    along a direction (across or down).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Difference is the absolute difference between the mark and a reference mark:
    (Mark - Reference).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Percent Difference states the relative difference: (Mark - Reference) / Reference.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Percent of Total shows the contribution of the current mark to the total aggregation
    of marks within the scope.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Percent of Total calculations can also be turned on via Analysis | Percentage
    Of | ..., although this will affect all measures.
  prefs: []
  type: TYPE_NORMAL
- en: Rank ranks the cells based on their value (with different options for how to
    differentiate between cells with equal values).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Percentile represents how many cells within the scope are lower than the current
    value.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Moving Average averages a set number of previous and next values.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Finally, there are four time-based quick table calculations:'
  prefs: []
  type: TYPE_NORMAL
- en: YTD (Year To Date) Total is a running sum that restarts every year.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compound Growth Rate computes the growth rate *r* relative to the first value
    so that ![](img/c7f0f17b-8f20-4086-9c27-a162697d07d8.png). This is used to decide
    what the growth factor would have been, had the evolution been perfectly steady.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Year Over Year Growth calculates a percentage difference compared to the same
    period in the previous year.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: YTD Growth creates a percentage difference compared to the YTD Total in the
    previous year.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is important to note that YTD calculations require a discrete date field
    with granularity strictly finer than a year (for instance, Year, Quarter, Month,
    or Year, Month), while the Year Over Year Growth requires a discrete date field
    that can be a year or finer.
  prefs: []
  type: TYPE_NORMAL
- en: It is possible to drag a pill that includes a table calculation back into the
    Data pane to create a calculated field based on the current definition of the
    table calculation. Editing a table calculation created this way helps you understand
    how Tableau performs the calculation under the hood.
  prefs: []
  type: TYPE_NORMAL
- en: If at any point you want to revert to the original calculation, you can use
    the Clear Table Calculation option when right-clicking the pill.
  prefs: []
  type: TYPE_NORMAL
- en: Now that a quick calculation has been turned on, let's see how we can change
    the different parameters to take control of this out-of-the-box calculation.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing table calculations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the first things that users want to do after creating a quick table calculation
    is to update the scope of the calculation, as the default choice was not necessarily
    what they had in mind.
  prefs: []
  type: TYPE_NORMAL
- en: Adapting a % Difference Calculation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s plot `Profit` by `Year(Order Date)` in rows and `Quarter(Order Date)`
    in columns, create a quick calculation for % Difference, and add `Profit` back
    into the view by double-clicking on the field in the Data pane (as the table calculation
    will take over the original `Profit` field, and it is not possible to add the
    same calculation twice):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fe18c632-8084-483a-914a-67f2e70913bd.png)'
  prefs: []
  type: TYPE_IMG
- en: Tableau's default choice was to compute this table calculation along Table (across)
    and relative to the Previous value, which shows us quarter-over-quarter growth,
    but not between Q4 and Q1\. When Tableau runs across the table, its instructions
    are only to go across. When it can't go any further, it will reset and restart
    at the next row. If we wanted to see the growth relative to the first quarter
    of 2011 instead, we would need to perform two actions, which we will look at in
    the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Defining a percent difference versus the first cell in the partition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we should change the calculation so that it''s relative to the First
    rather than the Previous. This can be achieved by right-clicking the pill under
    the Relative to option, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f5d9554a-d019-4c7d-899f-2542867cffaf.png)'
  prefs: []
  type: TYPE_IMG
- en: This will make it so that each line compares the current value to the first
    in the line (in this case, the Q1 of the given year). If we want it to compare
    all lines to the first value of the first line (that is, Q1 2011) instead, we
    can change Compute Using to Table (Down then Across) in the same pill menu.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, some of the options for Compute using (for instance Pane (across))
    will not appear. That is because that option is not relevant to your current view,
    and is probably already covered by another choice, for example Table (across).
  prefs: []
  type: TYPE_NORMAL
- en: 'In this instance, you can also choose Down then Across: as we are comparing
    with the first value in the table and not the previous or next, the order is less
    important:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/86ea983a-0eb1-4bed-a76e-c1a8464c54d2.png)'
  prefs: []
  type: TYPE_IMG
- en: All calculations are now relative to Q1 2011, which is what we wanted.
  prefs: []
  type: TYPE_NORMAL
- en: Using a different order
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If we changed the options to Compute Using Table (Down then Across) and Relative
    to Next, we could get drastically different results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cf0956cf-7a67-4dba-b1d4-f2392253a5c0.png)'
  prefs: []
  type: TYPE_IMG
- en: Because we are going Down then Across, we are calculating a percentage difference for
    all quarters compared to the next year (going down takes us through the years
    for a given quarter). The exception is for Q1–Q3 2014, where we would get the
    difference compared to the next quarter in *2011*; because there is no following
    year for the given quarter, we are going across to the first year of the following
    quarter. In this case, we are comparing $85,110 in Q1 2014 to $48,501 in Q2 2011.
  prefs: []
  type: TYPE_NORMAL
- en: We cannot stress enough that the order is very important if we want to get meaningful
    results.
  prefs: []
  type: TYPE_NORMAL
- en: It is also possible to change those options from the Edit Table Calculation
    window, which you can find when right-clicking the pill.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've learned how to create quick table calculations, let's see if
    you can get more depth by creating manual table calculations, which will, for
    instance, allow us to compute an average of all the marks in the view.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up manual table calculations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While it is possible to create some table calculations easily with the quick
    options, there are times when an off-the-shelf calculation cannot fit your needs.
    In this case, you need to create a manual table calculation. This is done by creating
    a calculated field.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a reminder, you can create a calculated field by any one of the following
    three methods:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to Analysis | Create Calculated Field... in the menu bar.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Right-click any field in the Data pane and use the Create | Calculated Field... option.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Click the arrow next to the search icon in the Data pane, close to Dimensions,
    and use Create Calculated Field....
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There, you can define your function manually and choose Default Table Calculation
    options once the calculation is valid. Let's go over the three main types of functions
    that are available to users.
  prefs: []
  type: TYPE_NORMAL
- en: Creating functions similar to quick table calculations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are two ranges of functions available that work in a very similar way
    to some of the quick options.
  prefs: []
  type: TYPE_NORMAL
- en: The first range is the `RUNNING` functions, including `RUNNING_SUM`, `RUNNING_COUNT`,
    and so on. These functions aggregate the results that are in cells in the current
    partition by starting with the first one and running along, updating the calculation
    and aggregating the results for each new cell. While the running sum is the most
    obvious example, and is one of the available quick calculations, it can sometimes
    be useful to use another running function to provide results. For instance, the
    `RUNNING_MAX` function is useful when keeping track of a record, as the function
    will update to the largest value up to the point of the calculation.
  prefs: []
  type: TYPE_NORMAL
- en: When creating a table calculation, it is imperative that you use an aggregation
    inside of the function, as the syntax checker will remind you.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, if we wanted to keep track of our record line profit, we could
    create `Record Line Profit` as `RUNNING_MAX(MAX([Profit])` and add it to a view
    with `MAX(Profit)` by `Year (Order Date)` and `Quarter (Order Date)`. This will
    show the record to date for the largest line profit ($2,939 until Q2 2011, then
    $4,630 until Q3 2013, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: 'The second type of function that should be familiar is the `RANK` functions,
    including `RANK`, `RANK_DENSE`, and so on. These functions will, as their name
    suggests, rank the results in the cells based on a given order (either descending
    (the default) or ascending, as defined by the second argument of the function).
    Here is a quick summary of how the different functions will rank the same set
    of data (10, 10, 15, 20) in ascending order:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Function** | **How 10, 10, 15, 20 are ranked in ascending order** | **Comment**
    |'
  prefs: []
  type: TYPE_TB
- en: '| `RANK` | 1, 1, 3, 4 | Same rank (highest) for equal values |'
  prefs: []
  type: TYPE_TB
- en: '| `RANK_DENSE` | 1, 1, 2, 3 | Same rank (highest) for equal values; no gap
    |'
  prefs: []
  type: TYPE_TB
- en: '| `RANK_MODIFIED` | 2, 2, 3, 4 | Same rank (lowest) for equal values |'
  prefs: []
  type: TYPE_TB
- en: '| `RANK_UNIQUE` | 1, 2, 3, 4 | Unique rank |'
  prefs: []
  type: TYPE_TB
- en: '| `RANK_PERCENTILE` | 50, 50, 75, 100 | Percentile rank (% of values equal
    or below this) |'
  prefs: []
  type: TYPE_TB
- en: Using the Lookup function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When Tableau computes a table calculation for Percent Difference against the
    previous value, it actually uses one base table calculation function inside a
    more complicated calculation. If you wanted to drag and drop a Percent Difference
    calculation into the Dimensions pane and later Edit that calculation, the resulting
    formula would look something like the following (simplified for our purposes):'
  prefs: []
  type: TYPE_NORMAL
- en: '`( (SUM([Sales]) - LOOKUP(SUM([Sales]), -1) ) / LOOKUP(SUM([Sales]), -1)`'
  prefs: []
  type: TYPE_NORMAL
- en: Here, we can see that we are making the most of a function called `LOOKUP(expr,
    offset)`, which returns the value of the calculation specified by `expr` in a
    given cell, and more specifically of `LOOKUP(expr, -1)` to grab the results of
    the expression in the previous cell.
  prefs: []
  type: TYPE_NORMAL
- en: When specifying the offset in the second part of the function to tell Tableau
    which cell to refer to, we can use simple numbers *relative* to the current cell,
    with negative numbers representing previous cells and positive ones representing
    the next cells. In the last example, we used `-1` for the previous cell, but it
    could also be `2` for the cell that is two rows after the current one. If there
    would be no such cells (because they would be out of bounds), the result would
    be `NULL`.
  prefs: []
  type: TYPE_NORMAL
- en: Because the results of these can be `NULL`, Tableau generally uses a function
    called `ZN(expr)`, which returns the results of the expression if it is not `NULL`,
    and `0` otherwise. This would be the case when looking at the Percent Difference
    formula.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we also have the option of using `FIRST()` and `LAST()` for an *absolute*
    position, to specify that we are after the results that are in the first or last
    row of the current partition. For instance, `LOOKUP(SUM([Sales],LAST()-1)` would
    return the sales in the second to last row of the partition.
  prefs: []
  type: TYPE_NORMAL
- en: Defining Window functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The last type of function that is very useful in Tableau, and especially in
    the exam, are `Window` functions. These are a set of functions that includes `WINDOW_SUM`,
    `WINDOW_COUNT`, `WINDOW_AVERAGE`, and so on. These functions all work in a similar
    manner. The basic syntax for these functions is `WINDOW_SUM(expr, [start,end])`.
  prefs: []
  type: TYPE_NORMAL
- en: There are two main ways to use these functions. The first is to use the calculation
    without specifying a `start` or an `end` in the second part. In this case, the
    function will perform the specified aggregation, for instance `SUM`, against all
    rows that are currently in the partition (as defined by the Compute using option
    when right-clicking the pill). We will use this technique in the second practical
    example at the end of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, we can, of course, specify the start and end, which will calculate
    the specified option only within the desired range. For instance, `WINDOW_AVG(expr,-1,1)`
    will average the results of the previous, current, and next cell. We just created
    a moving average for three periods!
  prefs: []
  type: TYPE_NORMAL
- en: As was the case with `LOOKUP`, we can also make the most of the `FIRST()` and
    `LAST()` functions. For example, `WINDOW_SUM(expr,FIRST(),0)` will sum all cells
    between the first and the current cells. We just set up a running sum!
  prefs: []
  type: TYPE_NORMAL
- en: With this last set of useful manual alternatives, our exploration of the different
    options to create table calculations draws to a close. Let's now practice our
    newly acquired talents with some exercises.
  prefs: []
  type: TYPE_NORMAL
- en: Practical examples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before concluding this chapter, let's go over two quick examples that are based
    on questions that were used in real exams.
  prefs: []
  type: TYPE_NORMAL
- en: Moving average
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using Global Superstore, as of June 2012, what is the sum of the sales of the
    previous twelve months and the following twelve months, excluding the current
    month?
  prefs: []
  type: TYPE_NORMAL
- en: To do this, we start by plotting `SUM(Sales)` by `Month(Order Date)`. Then we
    create a quick table calculation for Moving Average by right-clicking the pill.
  prefs: []
  type: TYPE_NORMAL
- en: To add `Month(Order Date)` as shown in the following screenshot, you can drop
    `Order Date` in rows, then click on the pill menu for the second Month option
    (the one that reads a month and year) and change the pill to Discrete (in the
    pill menu).
  prefs: []
  type: TYPE_NORMAL
- en: The default calculation averages the values of the month in focus and the two
    previous ones, but we can go to Edit Table Calculation in the pill menu to specify
    that we want a Sum for the previous 12 values, and the next 12 values and untick
    Current value to exclude it from the calculation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then we add `SUM(Sales)` again alongside the calculation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3ce847b1-d245-43b9-8d93-8012bb0e4e5c.png)'
  prefs: []
  type: TYPE_IMG
- en: From there, we can immediately see that the required sum was $5,481,129 for
    June 2012.
  prefs: []
  type: TYPE_NORMAL
- en: Dropping the calculation in the data pane tells us that we could also have defined
    a manual table calculation that read
  prefs: []
  type: TYPE_NORMAL
- en: '`WINDOW_SUM(SUM([Sales]), -12, -1) + WINDOW_SUM(SUM([Sales]), 1, 12)`,'
  prefs: []
  type: TYPE_NORMAL
- en: which sums `Sales` for the previous 12 values (offset -12 to -1) and the next
    12 values (offset 1 to 12).
  prefs: []
  type: TYPE_NORMAL
- en: Difference in average profit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using Global Superstore, what is the difference between the average profit for Furniture orders
    for customer Aaron Bergman and the lowest average profit worldwide for any customer/category
    combination?
  prefs: []
  type: TYPE_NORMAL
- en: We can first plot the average `Profit`, slicing by `Category` and `Customer`.
    In this case, we want to compare the $79 average profit in Furniture for this
    customer with the lowest average profit in the table. Because of the number of
    marks (more than 2,000), this is not a very easy task if we are just using the
    tools that we have learned about so far. Just showing `MIN([Profit])` will not
    help us, since this will just show us the lowest profit for a line item, not the
    lowest customer average.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s define `Lowest Average Profit` as `WINDOW_MIN(AVG([Profit]))` by creating
    a calculated field and adding it to the view. By default, the calculation shows
    the lowest value for the customer because the Compute using is set as Table (across),
    which means that the calculation restarts for every row. Changing this to Table
    (across then down) will ensure that the calculation encompasses the entire table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a5574eea-4aac-4fbc-9178-9c240ca3162a.png)'
  prefs: []
  type: TYPE_IMG
- en: It is now easy to calculate that the required difference is $79 - ($1,345) =
    $1,424\. Should we not feel in the mood for this simple calculation, we can also
    define `Lowest Average Profit` as `AVG([Profit]) - WINDOW_MIN(AVG([Profit]))` instead,
    which will display the result immediately.
  prefs: []
  type: TYPE_NORMAL
- en: With this, we conclude this chapter on table calculations, having run through
    two examples illustrating some of the simple and more advanced options available.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we covered table calculations, which enable us to use the
    results of our prior calculations as input for new ones. We learned how to create
    simple calculations with the click of a button, how to change their scope and
    customize them, and how to use them to create new and more complex calculations.
    After learning about simple aggregations in the previous chapter, this chapter
    serves as a good introduction to Tableau''s most daunting element when coming
    from Excel or other BI tools: level of detail calculations. These will be covered
    in the next chapter, where we will learn how to make use of information that is
    not visible in the current views.'
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Answer the following questions to test your knowledge of the information in
    this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Q: Is it true that table calculations take into account the underlying data
    and can help create weighted averages?'
  prefs: []
  type: TYPE_NORMAL
- en: 'A: No, table calculations use the results of prior aggregations as input for
    new ones, so a table calculation for an average will do a straight average of
    the results within the scope, not a weighted average. For an example, please refer
    to the first section of this chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q: One of the options for quick table calculations is Total Sum of all values.
    True or False?'
  prefs: []
  type: TYPE_NORMAL
- en: 'A: False. The different options are listed in the chapter, although you could
    use one of the manual `Window` functions to achieve this result.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q: Table calculations can also be created on dimensions. True or False?'
  prefs: []
  type: TYPE_NORMAL
- en: 'A: True. You can create table calculations on counts and distinct counts of
    dimensions.'
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can check out the following links for more information about the topics
    that were
  prefs: []
  type: TYPE_NORMAL
- en: 'covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Different types of addressing**: [https://help.tableau.com/current/pro/desktop/en-us/calculations_tablecalculations.htm#table-across](https://help.tableau.com/current/pro/desktop/en-us/calculations_tablecalculations.htm#table-across)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Using specific dimensions**: [https://help.tableau.com/current/pro/desktop/en-us/calculations_tablecalculations.htm#specific-dimensions](https://help.tableau.com/current/pro/desktop/en-us/calculations_tablecalculations.htm#specific-dimensions)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Top 10 Table Calculations**: [https://www.tableau.com/about/blog/2019/11/top-10-tableau-table-calculations](https://www.tableau.com/about/blog/2019/11/top-10-tableau-table-calculations)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Table Calculations White Paper**: [https://www.tableau.com/sites/default/files/pages/table_calcs_in_tableau_6.pdf](https://www.tableau.com/sites/default/files/pages/table_calcs_in_tableau_6.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
