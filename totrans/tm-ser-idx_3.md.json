["```py\n#!/usr/bin/env python3\n# Date: Monday 19 December 2022\n#\n# This utility outputs the mean values of all\n# (NORMALIZED) subsequences of a time series\nimport sys\nimport numpy as np\nimport pandas as pd\nsys.path.insert(0,'..')\ndef normalize(x):\n    eps = 1e-6\n    mu = np.mean(x)\n    std = np.std(x)\n    if std < eps:\n        return np.zeros(shape=x.shape)\n    else:\n        return (x-mu)/std\ndef main():\n    if len(sys.argv) != 4:\n        print(\"Usage: TS1 sliding_window segments\")\n        sys.exit()\n    file = sys.argv[1]\n    # We prefer values which are powers of 2\n    sliding = int(sys.argv[2])\n    segments = int(sys.argv[3])\n    if sliding <= 0:\n        print(\"Sliding value is not allowed:\", sliding)\n        sys.exit()\n    ts = pd.read_csv(file, names=['values'],\n        compression='gzip')\n    ts_numpy = ts.to_numpy()\n    length = len(ts_numpy)\n    splits = sliding // segments\n    # Split time series into subsequences\n    for i in range(length - sliding + 1):\n        t1_temp = ts_numpy[i:i+sliding]\n        normalized = normalize(t1_temp)\n        for s in range(segments):\n            temp = normalized[splits*s:splits*(s+1)]\n            mValue = np.mean(temp)\n            print(round(mValue,5))\n```", "```py\nif __name__ == '__main__':\n    main()\n```", "```py\n$ ./meanValues.py ts1.gz 16 4\n-0.33294\n-0.00404\n0.10926\n0.22772\n-0.51625\n0.05592\n-0.20672\n. . .\n```", "```py\n#!/usr/bin/env python3\nimport sys\ndef main():\n    if len(sys.argv) != 4:\n        print(\"cardinality segments threshold\")\n        print(\"Suggestion: The window be a power of 2.\")\n        print(\"The cardinality SHOULD be a power of 2.\")\n        sys.exit()\n    cardinality = int(sys.argv[1])\n    segments = int(sys.argv[2])\n    threshold = int(sys.argv[3])\n    terminalNodes = pow(cardinality, segments)\n    print(\"Nodes:\", terminalNodes)\n    subsequences = terminalNodes * threshold\n    print(\"Maximum number of subsequences:\", subsequences)\nif __name__ == '__main__':\n    main()\n```", "```py\n$ ./maximumISAX.py 4 4 100\nNodes: 256\nMaximum number of subsequences: 25600\n```", "```py\n$ ./maximumISAX.py 16 4 100\nNodes: 65536\nMaximum number of subsequences: 6553600\n```", "```py\n$ ../ch02/ts2PAA.py ts1.gz 8 8 2\n[011, 100] [5.22 23.44 14.14 6.75 4.31 27.94 6.61 21.73]\n[011, 100] [23.44 14.14 6.75 4.31 27.94 6.61 21.73 11.43]\n[100, 011] [14.14 6.75 4.31 27.94 6.61 21.73 11.43 7.15]\n[011, 100] [6.75 4.31 27.94 6.61 21.73 11.43 7.15 15.85]\n[011, 100] [4.31 27.94 6.61 21.73 11.43 7.15 15.85 29.96]\n[100, 011] [27.94 6.61 21.73 11.43 7.15 15.85 29.96 6.00]\n[010, 101] [6.61 21.73 11.43 7.15 15.85 29.96 6.00 20.74]\n[011, 100] [21.73 11.43 7.15 15.85 29.96 6.00 20.74 18.39]\n[011, 100] [11.43 7.15 15.85 29.96 6.00 20.74 18.39 23.23]\n[010, 101] [7.15 15.85 29.96 6.00 20.74 18.39 23.23 25.71]\n[011, 100] [15.85 29.96 6.00 20.74 18.39 23.23 25.71 18.74]\n[011, 100] [29.96 6.00 20.74 18.39 23.23 25.71 18.74 15.09]\n[100, 011] [6.00 20.74 18.39 23.23 25.71 18.74 15.09 1.22]\n[101, 010] [20.74 18.39 23.23 25.71 18.74 15.09 1.22 26.61]\n[100, 011] [18.39 23.23 25.71 18.74 15.09 1.22 26.61 28.89]\n[011, 100] [23.23 25.71 18.74 15.09 1.22 26.61 28.89 27.62]\n[010, 101] [25.71 18.74 15.09 1.22 26.61 28.89 27.62 12.12]\n[010, 101] [18.74 15.09 1.22 26.61 28.89 27.62 12.12 16.77]\n[011, 100] [15.09 1.22 26.61 28.89 27.62 12.12 16.77 24.43]\n[100, 011] [1.22 26.61 28.89 27.62 12.12 16.77 24.43 21.37]\n[101, 010] [26.61 28.89 27.62 12.12 16.77 24.43 21.37 7.03]\n[100, 011] [28.89 27.62 12.12 16.77 24.43 21.37 7.03 19.24]\n[101, 010] [27.62 12.12 16.77 24.43 21.37 7.03 19.24 13.14]\n[100, 011] [12.12 16.77 24.43 21.37 7.03 19.24 13.14 24.91]\n[011, 100] [16.77 24.43 21.37 7.03 19.24 13.14 24.91 21.79]\n[100, 011] [24.43 21.37 7.03 19.24 13.14 24.91 21.79 4.53]\n[011, 100] [21.37 7.03 19.24 13.14 24.91 21.79 4.53 10.12]\n[100, 011] [7.03 19.24 13.14 24.91 21.79 4.53 10.12 12.83]\n[110, 001] [19.24 13.14 24.91 21.79 4.53 10.12 12.83 12.42]\n[101, 010] [13.14 24.91 21.79 4.53 10.12 12.83 12.42 1.97]\n[101, 010] [24.91 21.79 4.53 10.12 12.83 12.42 1.97 5.13]\n[100, 011] [21.79 4.53 10.12 12.83 12.42 1.97 5.13 20.26]\n[011, 100] [4.53 10.12 12.83 12.42 1.97 5.13 20.26 25.83]\n[010, 101] [10.12 12.83 12.42 1.97 5.13 20.26 25.83 15.19]\n[001, 110] [12.83 12.42 1.97 5.13 20.26 25.83 15.19 26.59]\n[010, 101] [12.42 1.97 5.13 20.26 25.83 15.19 26.59 7.77]\n[011, 100] [1.97 5.13 20.26 25.83 15.19 26.59 7.77 17.96]\n[100, 011] [5.13 20.26 25.83 15.19 26.59 7.77 17.96 11.07]\n[110, 001] [20.26 25.83 15.19 26.59 7.77 17.96 11.07 12.83]\n[100, 011] [25.83 15.19 26.59 7.77 17.96 11.07 12.83 27.30]\n[100, 011] [15.19 26.59 7.77 17.96 11.07 12.83 27.30 4.29]\n[100, 011] [26.59 7.77 17.96 11.07 12.83 27.30 4.29 5.84]\n[100, 011] [7.77 17.96 11.07 12.83 27.30 4.29 5.84 5.34]\n```", "```py\n#!/usr/bin/env python3\nimport sys\nimport pandas as pd\nfrom sax import sax\ndef calculate(ts_numpy, sliding, segments, cardinality):\n    KEYS = {}\n    length = len(ts_numpy)\n    for i in range(length - sliding + 1):\n        t1_temp = ts_numpy[i:i+sliding]\n        tempSAXword = sax.createPAA(t1_temp, cardinality, segments)\n        tempSAXword = tempSAXword[:-1]\n        if KEYS.get(tempSAXword) == None:\n            KEYS[tempSAXword] = 1\n        else:\n            KEYS[tempSAXword] = KEYS[tempSAXword] + 1\n    return KEYS\n```", "```py\ndef main():\n    if len(sys.argv) != 6:\n        print(\"TS1 sliding_window cardinality segments threshold\")\n        sys.exit()\n    file = sys.argv[1]\n    sliding = int(sys.argv[2])\n    cardinality = int(sys.argv[3])\n    segments = int(sys.argv[4])\n    threshold = int(sys.argv[5])\n    if sliding % segments != 0:\n        print(\"sliding MODULO segments != 0...\")\n        sys.exit()\n    if sliding <= 0:\n        print(\"Sliding value is not allowed:\", sliding)\n        sys.exit()\n    if cardinality <= 0:\n        print(\"Cardinality Value is not allowed:\",\n            cardinality)\n        sys.exit()\n    ts = pd.read_csv(file, names=['values'],\n        compression='gzip')\n    ts_numpy = ts.to_numpy()\n    # See if it fits\n    overflow = False\n    KEYS = calculate(ts_numpy, sliding, segments,\n        cardinality)\n    maxVal = max(KEYS.values())\n    if maxVal > threshold:\n        overflow = True\n```", "```py\n    # See if we can make it fit or reduce the parameters\n    if overflow:\n        i = 2\n        while overflow:\n            # We cannot have more segments than the window\n            if segments * i > sliding:\n                break\n            print(\"Increasing segments to\", i * segments)\n            overflow = False\n            KEYS = calculate(ts_numpy, sliding,\n                segments * i, cardinality)\n            maxVal = max(KEYS.values())\n            if maxVal > threshold:\n                overflow = True\n                print(\"Overflow\")\n                i = 2 * i\n            if overflow == False:\n                print(\"New segments:\", i * segments)\n    else:\n        print(\"Threshold can be\", max(KEYS.values()))\n        print(\"Reducing cardinality to\", cardinality//2)\n        overflow = False\n        KEYS = calculate(ts_numpy, sliding, segments,\n            cardinality//2)\n        maxVal = max(KEYS.values())\n        if maxVal > threshold:\n            print(\"Cannot reduce cardinality\")\n        elif overflow == False:\n            print(\"New cardinality:\", cardinality//2)\n```", "```py\n   # Now let us see whether the iSAX index is going to be\n    # balanced or not using a cardinality value of 2\n    KEYS = calculate(ts_numpy, sliding, segments, 2)\n    minVal = min(KEYS.values())\n    maxVal = max(KEYS.values())\n    print(\"Min:\", minVal, \"Max:\", maxVal)\n    for k in KEYS.keys():\n        print(k, \":\", KEYS[k])\n```", "```py\n$ ./countingv2.py 450k.txt.gz 1024 32 4 1500\nThreshold can be 317\nReducing cardinality to 16\nCannot reduce cardinality\nMin: 11942 Max: 76534\n0_1_1_1 : 26080\n0_0_1_1 : 57549\n0_0_1_0 : 11942\n0_1_1_0 : 53496\n0_1_0_0 : 13154\n1_1_0_0 : 76534\n1_0_0_0 : 19933\n1_0_1_0 : 25430\n1_0_1_1 : 20768\n1_0_0_1 : 56345\n0_1_0_1 : 22142\n1_1_1_0 : 31547\n1_1_0_1 : 20707\n0_0_0_1 : 13850\n```", "```py\n$ ./countingv2.py 450k.txt.gz 1024 128 2 1500\nIncreasing segments to 4\nNew segments: 4\nMin: 207226 Max: 242251\n0_1 : 207226\n1_0 : 242251\n```", "```py\n$ ./countingv2.py 450k.txt.gz 1024 64 4 250\nThreshold can be 105\nReducing cardinality to 32\nCannot reduce cardinality\nMin: 11942 Max: 76534\n0_1_1_1 : 26080\n0_0_1_1 : 57549\n0_0_1_0 : 11942\n0_1_1_0 : 53496\n0_1_0_0 : 13154\n1_1_0_0 : 76534\n1_0_0_0 : 19933\n1_0_1_0 : 25430\n1_0_1_1 : 20768\n1_0_0_1 : 56345\n0_1_0_1 : 22142\n1_1_1_0 : 31547\n1_1_0_1 : 20707\n0_0_0_1 : 13850\n```"]