["```py\nfft(x[, n, axis, overwrite_x])\n```", "```py\n>>> import numpy\n>>> from scipy.fftpack import fft,fft2, fftshift\n>>> import matplotlib.pyplot as plt\n>>> B=numpy.ones((4,4)); W=numpy.zeros((4,4))\n>>> signal = numpy.bmat(\"B,W;W,B\")\n>>> onedimfft = fft(signal,n=16)\n>>> twodimfft = fft2(signal,shape=(16,16))\n>>> plt.figure()\n>>> plt.gray()\n>>> plt.subplot(121,aspect='equal')\n>>> plt.pcolormesh(onedimfft.real)\n>>> plt.colorbar(orientation='horizontal')\n>>> plt.subplot(122,aspect='equal')\n>>> plt.pcolormesh(fftshift(twodimfft.real))\n>>> plt.colorbar(orientation='horizontal')\n>>> plt.show()\n\n```", "```py\n>>> import numpy\n>>> from scipy.signal import chirp, sawtooth, square, gausspulse\n>>> import matplotlib.pyplot as plt\n>>> t=numpy.linspace(-1,1,1000)\n>>> plt.subplot(221); plt.ylim([-2,2])\n>>> plt.plot(t,chirp(t,f0=100,t1=0.5,f1=200))   # plot a chirp\n>>> plt.title(\"Chirp signal\")\n>>> plt.subplot(222); plt.ylim([-2,2])\n>>> plt.plot(t,gausspulse(t,fc=10,bw=0.5))      # Gauss pulse\n>>> plt.title(\"Gauss pulse\")\n>>> plt.subplot(223); plt.ylim([-2,2])\n>>> t*=3*numpy.pi\n>>> plt.plot(t,sawtooth(t))                     # sawtooth\n>>> plt.xlabel(\"Sawtooth signal\")\n>>> plt.subplot(224); plt.ylim([-2,2])\n>>> plt.plot(t,square(t))                       # Square wave\n>>> plt.xlabel(\"Square signal\")\n>>> plt.show()\n\n```", "```py\nfromfile(file, dtype=float, count=-1, sep='')\n```", "```py\nimread(fname, flatten=False)\n```", "```py\n>>> rate,data = scipy.io.wavfile.read(\"audio.wav\")\n\n```", "```py\n>>> scipy.io.wavfile.write(\"filename.wav\",rate,data)\n\n```", "```py\n>>> from numpy import sin, cos, pi, linspace\n>>> f=lambda t: cos(pi*t) + 0.2*sin(5*pi*t+0.1) + 0.2*sin(30*pi*t) + 0.1*sin(32*pi*t+0.1) + 0.1*sin(47* pi*t+0.8)\n>>> t=linspace(0,4,400); signal=f(t)\n\n```", "```py\n>>> from scipy.signal import wiener, medfilt\n>>> import matplotlib.pylab as plt\n>>> plt.plot(t,signal,'k', label='The signal')\n>>> plt.plot(t,wiener(signal,mysize=55),'r',linewidth=3, label='Wiener filtered')\n>>> plt.plot(t,medfilt(signal,kernel_size=55),'b',linewidth=3, label='Medfilt filtered')\n>>> plt.legend()\n>>> plt.show()\n\n```", "```py\n>>> from scipy.stats import norm     # Gaussian distribution\n>>> import matplotlib.pyplot as plt\n>>> import scipy.misc\n>>> import scipy.ndimage\n>>> plt.gray()\n>>> lena=scipy.misc.lena().astype(float)\n>>> plt.subplot(221);\n>>> plt.imshow(lena)\n>>> lena+=norm(loc=0,scale=16).rvs(lena.shape)\n>>> plt.subplot(222);\n>>> plt.imshow(lena)\n>>> denoised_lena = scipy.ndimage.median_filter(lena,3)\n>>> plt.subplot(224); \n>>> plt.imshow(denoised_lena)\n\n```", "```py\nsobel(image, axis=-1, output=None, mode='reflect', cval=0.0)\n```", "```py\n>>> from scipy.ndimage.filters import sobel\n>>> import numpy\n>>> lena=scipy.misc.lena()\n>>> sblX=sobel(lena,axis=0); sblY=sobel(lena,axis=1)\n>>> sbl=numpy.hypot(sblX,sblY)\n>>> plt.subplot(223); \n>>> plt.imshow(sbl) \n>>> plt.show()\n\n```", "```py\n>>> from scipy.signal import boxcar, hamming, nuttall, triang\n>>> import matplotlib.pylab as plt\n>>> windows=['boxcar', 'hamming', 'nuttall', 'triang']\n>>> plt.subplot(121)\n>>> for w in windows:\n eval( 'plt.plot(' + w + '(31))' )\n plt.ylim([-0.5,2]); plt.xlim([-1,32])\n plt.legend(windows)\n\n```", "```py\n>>> plt.subplot(122)\n>>> import numpy\n>>> from numpy import sin, cos, pi, linspace\n>>> f=lambda t: cos(pi*t) + 0.2*sin(5*pi*t+0.1) + 0.2*sin(30*pi*t) + 0.1*sin(32*pi*t+0.1) + 0.1*sin(47* pi*t+0.8)\n>>> t=linspace(0,4,400); signal=f(t)\n>>> extended_signal=numpy.r_[signal[15:0:-1],signal,signal[-1:-15:- 1]]\n>>> plt.plot(extended_signal,'k')\n\n```", "```py\n>>> for w in windows:\n window = eval( w+'(31)')\n output=numpy.convolve(window/window.sum(),signal)\n plt.plot(output,linewidth=2)\n plt.ylim([-2,3]); plt.legend(['original']+windows)\n>>> plt.show()\n\n```", "```py\n>>> import scipy.misc\n>>> import numpy \n>>> import matplotlib.pylab as plt \n>>> from scipy.ndimage.interpolation import affine_transform\n>>> lena=scipy.misc.lena() \n>>> A=numpy.mat(\"0,1;-1,1.25\"); b=[-400,0]\n>>> Ab_Lena=affine_transform(lena,A,b,output_shape=(512*2.2,512*2.2))\n>>> plt.gray() \n>>> plt.subplot(121) \n>>> plt.imshow(Ab_Lena)\n\n```", "```py\ngeometric_transform(input, mapping, output_shape=None, \n                    output=None, order=3, mode='constant',\ncval=0.0, prefilter=True, extra_arguments=(),\nextra_keywords={})\n```", "```py\n>>> def f(z):\n temp = a*(z[0]+1j*z[1]) + b\n temp /= c*(z[0]+1j*z[1])+d\n return (temp.real, temp.imag)\n\n```", "```py\n>>> from scipy.ndimage.interpolation import geometric_transform \n>>> a = 2**15*(1+1j); b = 0; c = -2**8*(1-1j*2); d = 2**18-1j*2**14\n>>> Moebius_Lena = geometric_transform(lena,f,mode='reflect')\n>>> plt.subplot(122); \n>>> plt.imshow(Moebius_Lena) \n>>> plt.show()\n\n```", "```py\nmap_coordinates(input, coordinates, output=None, order=3, \n                mode='constant', cval=0.0, prefilter=True)\n```", "```py\n>>> import scipy.misc \n>>> from scipy.ndimage.interpolation import map_coordinates\n>>> lena=scipy.misc.lena().astype(float)\n>>> coordinates=[[10.5, 12.3], [11.7, 1.4]]\n>>> map_coordinates(lena, coordinates, order=1)\n\n```", "```py\narray([ 157.2 ,  157.42])\n\n```", "```py\n>>> map_coordinates(lena, coordinates, order=2)\n\n```", "```py\narray([ 157.80641507,  157.6741489 ])\n\n```", "```py\nbinary_operation(signal, structuring_element)\n```", "```py\n>>> binary_hit_or_miss(text, letterE)\n\n```", "```py\n>>> import numpy\n>>> import scipy.ndimage\n>>> import matplotlib.pylab as plt\n>>> from scipy.ndimage.morphology import binary_hit_or_miss\n>>> text = scipy.ndimage.imread('CHAP_05_input_textImage.png')\n>>> letterE = text[37:53,275:291]\n>>> HitorMiss = binary_hit_or_miss(text, structure1=letterE, origin1=1) \n>>> eLocation = numpy.where(HitorMiss==True)\n>>> x=eLocation[1]; y=eLocation[0]\n>>> plt.imshow(text, cmap=plt.cm.gray, interpolation='nearest')\n>>> plt.autoscale(False)\n>>> plt.plot(x,y,'wo',markersize=10)\n>>> plt.axis('off')\n>>> plt.show()\n\n```", "```py\ngrey_operation(signal, [structuring_element, footprint, size, ...])\n\n```", "```py\n>>> grey_dilation(lena, size=(15,15))\n\n```", "```py\ndistance_transform_bf(signal, metric='euclidean', sampling=None,\nreturn_distances=True, return_indices=False,\n                      distances=None, indices=None)\n```"]