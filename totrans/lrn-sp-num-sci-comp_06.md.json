["```py\n>>> import scipy.misc \n>>> from scipy.stats import signaltonoise \n>>> from scipy.stats import norm     # Gaussian distribution\n>>> lena=scipy.misc.lena().astype(float)\n>>> lena+= norm.rvs(loc=0,scale=16,size=lena.shape)\n>>> signaltonoise(lena,axis=None)\n\n```", "```py\narray(2.459233897516763)\n\n```", "```py\n>>> import numpy\n>>> from scipy.stats import pareto\n>>> import matplotlib.pyplot as plt\n>>> x=numpy.linspace(1,10,1000)\n>>> plt.subplot(131); plt.plot(pareto.pdf(x,5))\n>>> plt.subplot(132); plt.plot(pareto.cdf(x,5))\n>>> plt.subplot(133); plt.plot(pareto.rvs(5,size=1000))\n>>> plt.show()\n\n```", "```py\nbayes_mvs(data, alpha=0.9)\n```", "```py\n>>> import numpy\n>>> data = numpy.array([[113,105,130,101,138,118,87,116,75,96, \\\n 122,103,116,107,118,103,111,104,111,89,78,100,89,85,88], \\\n [137,105,133,108,115,170,103,145,78,107, \\\n 84,148,147,87,166,146,123,135,112,93,76,116,78,101,123]])\n\n```", "```py\n>>> dataDiff = data[1,:]-data[0,:]\n>>> dataDiff.mean(), dataDiff.std()\n\n```", "```py\n(13.32, 22.472596645692729)\n\n```", "```py\n>>> import matplotlib.pyplot as plt\n>>> plt.hist(dataDiff)\n>>> plt.show()\n\n```", "```py\n>>> from scipy.stats import ttest_1samp\n>>> t_stat,p_value=ttest_1samp(dataDiff,0.0)\n\n```", "```py\n>>> print (p_value/2.0)\n\n```", "```py\n0.00389575522747\n\n```", "```py\n>>> from scipy.stats import norm     # Gaussian distribution\n>>> mean,std=norm.fit(dataDiff)\n\n```", "```py\n>>> plt.hist(dataDiff, normed=1)\n>>> x=numpy.linspace(dataDiff.min(),dataDiff.max(),1000)\n>>> pdf=norm.pdf(x,mean,std)\n>>> plt.plot(x,pdf)\n>>> plt.show()\n\n```", "```py\n>>> from scipy.stats import gaussian_kde\n>>> pdf=gaussian_kde(dataDiff)\n\n```", "```py\n>>> from scipy.stats import gaussian_kde\n>>> pdf = gaussian_kde(dataDiff)\n>>> pdf = pdf.evaluate(x)\n>>> plt.hist(dataDiff, normed=1)\n>>> plt.plot(x,pdf,'k')\n>>> plt.savefig(\"hist2.png\")\n>>> plt.show()\n\n```", "```py\n>>> plt.hist(dataDiff, normed=1)\n>>> plt.plot(x,pdf,'k.-',label='Kernel fit')\n>>> plt.plot(x,norm.pdf(x,mean,std),'r',label='Normal fit')\n>>> plt.legend() \n>>> plt.savefig(\"hist3.png\")\n>>> plt.show()\n\n```", "```py\ndistance_function(first_vector, second_vector)\n```", "```py\n>>> import numpy \n>>> from scipy.spatial.distance import minkowski \n>>> Square=numpy.mgrid[-1.1:1.1:512j,-1.1:1.1:512j]\n>>> X=Square[0]; Y=Square[1]\n>>> f=lambda x,y,p: minkowski([x,y],[0.0,0.0],p)<=1.0\n>>> Ball=lambda p:numpy.vectorize(f)(X,Y,p)\n\n```", "```py\n>>> import matplotlib.pylab as plt\n>>> plt.imshow(Ball(3), cmap = plt.cm.gray)\n>>> plt.axis('off')\n>>> plt.subplots_adjust(left=0.0127,bottom=0.0164,\\\n right=0.987,top=0.984)\n>>> plt.show()\n\n```", "```py\n    >>> import scipy.stats\n    >>> from scipy.spatial.distance import pdist\n    >>> V=scipy.stats.randint.rvs(0.4,3,size=(5,4))-1\n    >>> print (V)\n\n    ```", "```py\n    [[ 1  0  1 -1]\n     [-1  0 -1  0]\n     [ 1  1  1 -1]\n     [ 1  1 -1  0]\n     [ 0  0  1 -1]]\n\n    ```", "```py\n    >>> pdist(V,metric='cityblock')\n\n    ```", "```py\n    array([ 5.,  1.,  4.,  1.,  6.,  3.,  4.,  3.,  2.,  5.])\n\n    ```", "```py\n    >>> from scipy.spatial.distance import cdist\n    >>> V=scipy.stats.randint.rvs(0.4, 2, size=(3,4)).astype(bool)\n    >>> W=scipy.stats.randint.rvs(0.4, 3, size=(2,4)).astype(bool)\n    >>> cdist(V,W,'jaccard')\n    array([[ 0.75      ,  1\\.        ],\n     [ 0.75      ,  1\\.        ],\n     [ 0.33333333,  0.5       ]])\n\n    ```", "```py\n    KDTree(data, leafsize=10)\n    ```", "```py\n    >>> from scipy.spatial import KDTree\n    >>> data=scipy.stats.randint.rvs(0.4,10,size=(10,4))\n    >>> print (data)\n\n    ```", "```py\n    [[8 6 1 1]\n     [2 9 1 5]\n     [4 8 8 9]\n     [2 6 6 4]\n     [4 1 2 1]\n     [3 8 7 2]\n     [1 1 3 6]\n     [5 2 1 5]\n     [2 5 7 3]\n     [6 0 6 9]]\n    >>> tree=KDTree(data)\n    >>> tree.query([0,0,0,0])\n\n    ```", "```py\n    (4.6904157598234297, 4)\n\n    ```", "```py\nkmeans(obs, k_or_guess, iter=20, thresh=1e-05)\n```", "```py\nkmeans2(data, k, iter=10, thresh=1e-05,\nminit='random', missing='warn')\n```", "```py\nvq(obs, centroids)\n```", "```py\n>>> import numpy\n>>> from scipy.stats import norm\n>>> from numpy import array,vstack\n>>> data=norm.rvs(0,0.3,size=(10000,2))\n>>> inside_ball=numpy.hypot(data[:,0],data[:,1])<1.0\n>>> data=data[inside_ball]\n>>> data = vstack((data, data+array([1,1]),data+array([-1,1])))\n\n```", "```py\n>>> from scipy.cluster.vq import *\n>>> centroids, distortion = kmeans(data,3)\n>>> cluster_assignment, distances = vq(data,centroids)\n\n```", "```py\n>>> from matplotlib.pyplot import plot\n>>> import matplotlib.pyplot as plt\n>>> plt.plot(data[cluster_assignment==0,0], \\\n data[cluster_assignment==0,1], 'ro')\n>>> plt.plot(data[cluster_assignment==1,0], \\\n data[cluster_assignment==1,1], 'b+')\n>>> plt.plot(data[cluster_assignment==2,0], \\\n data[cluster_assignment==2,1], 'k.')\n>>> plt.show()\n\n```", "```py\nlinkage(data, method='single', metric='euclidean')\n```", "```py\ndendrogram(Z, p=30, truncate_mode=None, color_threshold=None, \nget_leaves=True, orientation='top', labels=None, \ncount_sort=False, distance_sort=False, \nshow_leaf_counts=True, no_plot=False, no_labels=False, \ncolor_list=None, leaf_font_size=None, \nleaf_rotation=None, leaf_label_func=None, \nno_leaves=False, show_contracted=False,\nlink_color_func=None)\n```", "```py\nOPOSSUM                    54113344\nHAIRY TAIL MOLE            33114433\nCOMMON MOLE              32103333\nSTAR NOSE MOLE            33114433\n```", "```py\n>>> import numpy\n>>> file=open(\"dentitio.dat\",\"r\") # open the file\n>>> lines=file.readlines() # read each line in memory\n>>> file.close() # close the file\n>>> mammals=[] # this stores the names\n>>> dataset=numpy.zeros((len(lines),8)) # this stores the data\n>>> for index,line in enumerate(lines):\n mammals.append( line[0:27].rstrip(\" \").capitalize() )\n for tooth in range(8):\n dataset[index,tooth]=int(line[27+tooth])\n\n```", "```py\n>>> import matplotlib.pyplot as plt\n>>> from scipy.cluster.hierarchy import linkage, dendrogram\n>>> Z=linkage(dataset)\n>>> dendrogram(Z, labels=mammals, orientation=\"right\")\n>>> matplotlib.pyplot.show()\n>>> plt.show()\n\n```"]