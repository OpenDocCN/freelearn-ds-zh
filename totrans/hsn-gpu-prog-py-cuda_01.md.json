["```py\nimport numpy as np\n\ndef simple_mandelbrot(width, height, real_low, real_high, imag_low, imag_high, max_iters):\n\n     real_vals = np.linspace(real_low, real_high, width)\n     imag_vals = np.linspace(imag_low, imag_high, height)\n\n     # we will represent members as 1, non-members as 0.\n\n     mandelbrot_graph = np.ones((height,width), dtype=np.float32)\n\n     for x in range(width):\n\n         for y in range(height):\n\n             c = np.complex64( real_vals[x] + imag_vals[y] * 1j  )           \n             z = np.complex64(0)\n\n             for i in range(max_iters):\n\n                 z = z**2 + c\n\n                 if(np.abs(z) > 2):\n                     mandelbrot_graph[y,x] = 0\n                     break\n\n     return mandelbrot_graph\n```", "```py\nfrom time import time\nimport matplotlib\n# the following will prevent the figure from popping up\nmatplotlib.use('Agg')\nfrom matplotlib import pyplot as plt\n```", "```py\nif __name__ == '__main__':\n\n     t1 = time()\n     mandel = simple_mandelbrot(512,512,-2,2,-2,2,256, 2)\n     t2 = time()\n     mandel_time = t2 - t1\n\n     t1 = time()\n     fig = plt.figure(1)\n     plt.imshow(mandel, extent=(-2, 2, -2, 2))\n     plt.savefig('mandelbrot.png', dpi=fig.dpi)\n     t2 = time()\n\n     dump_time = t2 - t1\n\n     print 'It took {} seconds to calculate the Mandelbrot graph.'.format(mandel_time)\n     print 'It took {} seconds to dump the image.'.format(dump_time)\n```"]