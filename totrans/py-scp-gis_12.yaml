- en: GeoDjango
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GeoDjango
- en: The Django Python web framework was made available in 2005 and has been steadily
    supported and improved throughout the years. One major improvement was additional
    support for spatial data types and queries. This effort produced GeoDjango, allowing
    Django to support geospatial database models and web views that utilize geospatial
    queries.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Django Python 网络框架于 2005 年推出，并在多年来持续得到支持和改进。一个主要改进是增加了对空间数据类型和查询的支持。这一努力产生了
    GeoDjango，使得 Django 能够支持地理空间数据库模型和利用地理空间查询的网页视图。
- en: GeoDjango is now a standard Django component, which can be activated using a
    specific configuration. In December 2017, Django 2 was released as the new long-term
    support version. It currently supports Python 3.4, 3.5, and 3.6.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: GeoDjango 现在是标准的 Django 组件，可以通过特定的配置来激活。2017 年 12 月，Django 2 作为新的长期支持版本发布。它目前支持
    Python 3.4、3.5 和 3.6。
- en: 'In this chapter, we will learn about the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习以下内容：
- en: Installation and configuration of Django and GeoDjango
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Django 和 GeoDjango 的安装和配置
- en: Django admin panel functionality, including map editing
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Django 管理面板功能，包括地图编辑
- en: How to load shapefiles into database tables using LayerMapping
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用 LayerMapping 将 shapefiles 加载到数据库表中
- en: GeoDjango queries
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GeoDjango 查询
- en: Django URL patterns
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Django URL 模式
- en: Django views
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Django 视图
- en: Installing and configuring Django and GeoDjango
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和配置 Django 和 GeoDjango
- en: Django, compared to Flask, is a batteries-included framework. It includes modules
    that allow for database backend support, without requiring a separate database
    code package (unlike Flask, which relies on SQLAlchemy). Django also includes
    an admin panel that allows for easy data editing and management through a web
    interface. This means fewer modules are installed and more code is included to
    handle database interactions and web processing.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Flask 相比，Django 是一个包含电池的框架。它包括允许数据库后端支持的模块，无需单独的数据库代码包（与 Flask 不同，Flask 依赖于
    SQLAlchemy）。Django 还包括一个管理面板，允许通过网页界面轻松地进行数据编辑和管理。这意味着安装的模块更少，包含的代码更多，用于处理数据库交互和网页处理。
- en: There are some major differences between Flask and Django. Django separates
    URLs from views and models in a more structured manner than Flask. Django also
    uses Python classes for databases tables, but it has built-in database support.
    For geospatial databases, no extra module is required. Django also supports geometry
    columns in a wider range of databases, though PostgreSQL and PostGIS are used
    the most often.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Flask 和 Django 之间有一些主要区别。Django 在结构上比 Flask 更好地将 URL 与视图和模型分离。Django 还使用 Python
    类来表示数据库表，但它具有内置的数据库支持。对于地理空间数据库，不需要额外的模块。Django 还支持更广泛数据库中的几何列，尽管 PostgreSQL 和
    PostGIS 使用得最为频繁。
- en: Like many Python 3 modules, Django development is geared towards Linux development
    environments. While it supports Windows installation, it requires a few modifications
    of the environment variables within Windows, requiring administrative control
    of the machine. Administrative-level permissions are required for configurations,
    allowing Django to access **Geospatial Data Abstraction Library** (**GDAL**) and
    **OGR Simple Features **libraries.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 与许多 Python 3 模块一样，Django 开发侧重于 Linux 开发环境。虽然它支持 Windows 安装，但需要在 Windows 中修改环境变量，需要机器的行政控制权限。配置需要行政级别的权限，允许
    Django 访问**地理空间数据抽象库**（**GDAL**）和**OGR 简单特征**库。
- en: Steps from Django to GeoDjango
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 Django 到 GeoDjango 的步骤
- en: 'Within this section, we''ll install Django add GeoDjango configurations, and
    add the required libraries (including the GDAL and OGR) that bring spatial functionality
    to Django. Installing the Django 2 module for Python 3, and configuring the GeoDjango
    components, depends on a number of steps. These include:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将安装 Django 和 GeoDjango 配置，并添加所需的库（包括 GDAL 和 OGR），这些库将空间功能引入 Django。安装
    Django 2 模块（针对 Python 3）和配置 GeoDjango 组件取决于多个步骤。这些包括：
- en: Using `pip` to install Django 2
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `pip` 安装 Django 2
- en: Installing and enabling a spatial database (if not already installed)
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装和启用空间数据库（如果尚未安装）
- en: Installing GDAL/ OGR/PROJ4/GEOS
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 GDAL/OGR/PROJ4/GEOS
- en: Configuring the Windows environment variables
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置 Windows 环境变量
- en: Generating a project
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成项目
- en: Opening `settings.py`
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `settings.py`
- en: Adding `django.contrib.gis` to `INSTALLED_APPS`
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `django.contrib.gis` 添加到 `INSTALLED_APPS`
- en: Configuring database settings to point to the spatial database
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置数据库设置以指向空间数据库
- en: Installing Django
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Django
- en: Django 2 is hosted in **Python Package Index** (**PyPI**), so use `pip` to install
    it. It can also be downloaded and installed manually. Using `pip` to install Django
    will also install the required dependency, `pytz`. Django will be downloaded from
    PyPI as a wheel and installed.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Django 2托管在**Python包索引**（**PyPI**）上，因此请使用`pip`进行安装。它也可以手动下载和安装。使用`pip`安装Django时，也会安装所需的依赖项`pytz`。Django将从PyPI作为wheel下载并安装。
- en: 'Because Django 2 is a major update which has been recently released, we have
    to ensure that `pip` installs the correct version. With this command, we will
    install Django 2.0:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Django 2是一个最近发布的重大更新，我们必须确保`pip`安装正确的版本。使用以下命令，我们将安装Django 2.0：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The module will be installed, along with the supporting modules:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块将安装，以及相关的支持模块：
- en: '![](img/50a55e05-b2b3-4100-bbdb-a0a8feeeb59a.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/50a55e05-b2b3-4100-bbdb-a0a8feeeb59a.png)'
- en: 'Django 2.0 is used in this chapter. Use the latest version of Django 2 available
    to start a project. Check out Django 2.0 documentation (as well as other Django
    versions) here:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 本章使用Django 2.0。使用可用的最新Django 2版本开始项目。在此处查看Django 2.0文档（以及其他Django版本）：
- en: '[https://www.djangoproject.com/](https://www.djangoproject.com/).'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.djangoproject.com/](https://www.djangoproject.com/).'
- en: If you are using virtual environments, you can specify a specific version of
    Django for each environment. If not, and you have multiple versions of Python
    installed, be sure to use the correct `pip` version to install Django within the
    `Python 3` folder structure.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用虚拟环境，你可以为每个环境指定Django的特定版本。如果没有，并且你安装了多个Python版本，请确保使用正确的`pip`版本在`Python
    3`文件夹结构中安装Django。
- en: Installing PostGIS and psycopg2
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装PostGIS和psycopg2
- en: 'This chapter will use PostGIS. Refer to [Chapter 7](4f2388a3-51fc-419f-a827-bbbedbbb6374.xhtml), *Geoprocessing
    with Geodatabases*, if you do not have PostGIS installed on your machine as it
    explains how to install the spatial extension add-on to PostgreSQL. Also, ensure
    that the `psycopg2` module is installed by using the following code:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将使用PostGIS。如果你在机器上没有安装PostGIS，请参阅第7章*使用地理数据库进行地理处理*，因为它解释了如何将空间扩展插件安装到PostgreSQL。同时，确保使用以下代码安装`psycopg2`模块：
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Creating the database
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建数据库
- en: Generating the database table is made possible by the `Chapter12_0.py` script,
    which creates a PostgreSQL database called `chapter12` and adds spatial functionality
    to the new database. Adjust the credentials, host, and port (as needed) in the
    connection configuration below.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`Chapter12_0.py`脚本生成数据库表，该脚本创建一个名为`chapter12`的PostgreSQL数据库，并将空间功能添加到新数据库中。在以下连接配置中调整凭据、主机和端口（如有必要）。
- en: 'Connect to the database server using `psycopg2` and its `connect` function,
    which creates a `connection` class. The class has a `cursor` function that creates
    a `cursor` object, which is able to execute SQL statements. This section creates
    the database for the chapter:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`psycopg2`及其`connect`函数连接到数据库服务器，该函数创建一个`connection`类。该类有一个`cursor`函数，可以创建一个`cursor`对象，该对象能够执行SQL语句。本节创建本章的数据库：
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To make the database geospatial, ensure that the PostGIS spatial add-on has
    been installed. Connect to the new database and pass the following SQL statement,
    which adds the spatial functionality tables to the database:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 要使数据库支持地理空间功能，请确保已经安装了PostGIS空间插件。连接到新数据库，并执行以下SQL语句，该语句将空间功能表添加到数据库中：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The PostGIS database for this chapter is now created and spatially enabled.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的PostGIS数据库现已创建并启用空间功能。
- en: GDAL/OGR
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GDAL/OGR
- en: Django's built-in geospatial support requires the use of code libraries available
    from the **Open Source Geospatial Foundation** (**OSGeo**). The GDAL library,
    which includes OGR, handles vector and raster datasets. It must be installed (see
    [Chapter 5](0b3a2208-3881-479a-83a8-78be85b9c1d6.xhtml), *Vector Data Analysis*,
    and [Chapter 6](a5c9354e-8ea4-45f6-9e69-191375e171c3.xhtml), *Raster Data Processing*,
    for more details on using it for analysis).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 'Django内置的地理空间支持需要使用来自**开源地理空间基金会**（**OSGeo**）的代码库。GDAL库包括OGR，处理矢量数据和栅格数据集。它必须安装（有关使用GDAL进行分析的详细信息，请参阅第5章*矢量数据分析*和第6章*栅格数据处理*）。 '
- en: If it is not already installed, use the OSGeo4W installer available at: [https://trac.osgeo.org/osgeo4w/](https://trac.osgeo.org/osgeo4w/).
    Select the correct installer for your machine. The installer will also install
    QGIS and GRASS and other open source geospatial programs. Download and run the
    installer and place the output files on your local drive. This file path (for
    example: `C:\OSGeo4w`) will be important when modifying the Windows environment
    variables.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果尚未安装，请使用可从以下位置获取的OSGeo4W安装程序：[https://trac.osgeo.org/osgeo4w/](https://trac.osgeo.org/osgeo4w/)。选择适合您机器的正确安装程序。安装程序还将安装QGIS和GRASS以及其他开源地理空间程序。下载并运行安装程序，并将输出文件放置在本地驱动器上。此文件路径（例如：`C:\OSGeo4w`）在修改Windows环境变量时将非常重要。
- en: 'Find installation instructions for configuring GeoDjango for Linux and macOS
    from the Django project documentation here:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在此处从Django项目文档中找到配置GeoDjango的Linux和macOS的安装说明：
- en: '[https://docs.djangoproject.com/en/2.0/ref/contrib/gis/install/](https://docs.djangoproject.com/en/2.0/ref/contrib/gis/install/).'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.djangoproject.com/en/2.0/ref/contrib/gis/install/](https://docs.djangoproject.com/en/2.0/ref/contrib/gis/install/)'
- en: Modifying Windows environment variables
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改Windows环境变量
- en: 'Editing the system path and other environment variables within Windows requires
    administrative permissions. Here are the steps to edit them for our purposes:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows中编辑系统路径和其他环境变量需要管理员权限。以下是编辑它们的步骤：
- en: Log into an account with administrative permissions.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用具有管理员权限的账户登录。
- en: Open Windows Explorer and right-click on the PC icon in the left pane.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Windows资源管理器，在左侧窗格中右键单击PC图标。
- en: Select Properties from the context menu.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从上下文菜单中选择属性。
- en: Click on Advanced system settings.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“高级系统设置”。
- en: In the next menu, click on Environment Variables.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个菜单中，点击环境变量。
- en: Select Path from the system variables and click Edit (or double-click on the
    path value).
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从系统变量中选择路径并点击编辑（或双击路径值）。
- en: 'Add the file path of the `bin` folder in the `OSGeo4W` folder (for example, `C:\OSGeo4W\bin`) to
    the path:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `OSGeo4W` 文件夹中 `bin` 文件夹的文件路径（例如，`C:\OSGeo4W\bin`）添加到路径中：
- en: '![](img/a278951a-3204-4cf5-bd15-c794188c225d.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a278951a-3204-4cf5-bd15-c794188c225d.png)'
- en: The `Python 3.6` folder has also been added to the path in this example, as
    well as `Python 2.7`, which is ordered behind `Python 3.6` because of its position
    in the path environment variable value. This means that when Python is passed
    to a command line, the `Python 3.6` executable will be run.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`Python 3.6` 文件夹也被添加到路径中，以及 `Python 2.7`，由于它在路径环境变量值中的位置，所以排在 `Python
    3.6` 之后。这意味着当Python传递到命令行时，将运行 `Python 3.6` 可执行文件。
- en: Two other variables that may be required are the GDAL_DATA variable and the
    PROJ_LIB variable. If PostGIS has been installed, it will have created a GDAL_DATA
    variable already, but if it is not present, click the New button underneath the
    system variables box. Add the name of the variable (GDAL_DATA) and the variable
    value (for example, `C:\OSGeo4W64\share\gdal`).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 可能还需要两个其他变量：GDAL_DATA 变量和 PROJ_LIB 变量。如果已经安装了PostGIS，它将已经创建了一个GDAL_DATA变量，如果没有，请点击系统变量框下方的“新建”按钮。添加变量的名称（GDAL_DATA）和变量值（例如，`C:\OSGeo4W64\share\gdal`）。
- en: 'Add the PROJ_LIB variable the same way:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 以相同的方式添加 PROJ_LIB 变量：
- en: '![](img/3fc8d73c-8589-4663-bf5e-c480a87e6559.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3fc8d73c-8589-4663-bf5e-c480a87e6559.png)'
- en: Click OK to save the new variables, and OK again to get out of the first settings
    dialog. Close the System Properties menu.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“确定”以保存新变量，然后再次点击“确定”以退出第一个设置对话框。关闭系统属性菜单。
- en: Creating a project and application
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建项目和应用程序
- en: Now that Django is installed, let's create a project. Django has two levels
    that are managed by scripts accepting command-line arguments. These two levels
    are projects and applications. A project can have many applications, and sometimes
    an application has multiple projects as well. This organization allows you to
    reuse of code between related applications, governed by project-level code.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在Django已经安装，让我们创建一个项目。Django有两个级别，由接受命令行参数的脚本管理。这两个级别是项目和应用程序。一个项目可以有多个应用程序，有时一个应用程序也有多个项目。这种组织方式允许你在相关应用程序之间重用项目级别的代码。
- en: Django uses an administration file, `django-admin.py`, to control the creation
    of projects. It is installed in the `Scripts` folder of the `Python 3` folder.
    I usually copy the `django-admin.py` file into a new project folder, and pass
    the required command-line arguments while working in the project folder, but it
    can also be called from the command line if the `Scripts` folder is included in
    the path environment variable.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: Create a folder for your project; something like `C:\Projects`. Copy `django-admin.py`
    into `C:\Projects`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: Command-line argument – startproject
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A command-line argument is used with `django-admin.py` to create the project—`startproject`.
    To create a project, open the command prompt and change directories to the folder
    created earlier. We will create projects in this folder by passing `startproject` and
    the name of our new project (`chapter12`) to `django-admin.py`:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/17c20ecb-1bc4-49bf-b62e-c01e9dff7c98.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
- en: What is created by startproject?
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By passing the two arguments to `django-admin.py`, `startproject`, and `chapter12`
    (the name of the project), a folder is created with a number of scripts and subfolders.
    The outer (`root`) folder is called `chapter12`, and it contains an important
    script called `manage.py`, and a folder also called `chapter12`*,* which is the
    project folder:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2e667b98-8611-4bef-9690-f6a8f6f0bb7e.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
- en: 'Inside the project folder are some important scripts, including `settings.py` and `urls.py`:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0239fb6b-828e-4f0f-ab98-ab98d320a3cd.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
- en: These files are default placeholders, waiting for us to configure our project
    and applications. We will edit `setting.py` and `urls.py` too, with the specifics
    of our project as we go along. The third file, `wsgi.py`, is used for production
    deployment of the web application.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: Creating an application using manage.py
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, the `root` folder, `Projects` folder, and associated scripts have been
    created. Within the `root` folder is the `manage.py` file, which is used for configuration
    and management of the applications and project. In this section, we'll create
    an application using `manage.py` and the command-line argument `startapp`.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: 'With the command prompt, change directories into the `root` folder. Unlike
    `django-admin.py`, we have to run `manage.py` by passing it as an argument to
    the Python executable. In turn, to `manage.py` we pass the argument `startapp`
    and the name of the application, `arenas`. It should look like this:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/117d45fd-a4e0-4e8d-b81e-a9ce0ae91b85.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
- en: What is created by manage.py
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Passing the `startapp arenas` command to `manage.py` created a folder called
    `arenas`. All applications are created within the `root` folder, next to the project
    folder:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/76d4ed13-91b6-4f08-ac26-912e704f2822.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
- en: 'Inside the folder are auto-generated scripts that we will configure and add
    to later. There is also a folder called `migrations`, which is used by Django
    to store scripts describing edits to the database. The scripts `admin.py`, `models.py`,
    and `views.py` will be used in this chapter:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/114bdd5b-898b-416e-8793-812ed7422a98.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
- en: Configuring settings.py
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the project created and a new application, the next step towards using
    GeoDjango is to configure the `settings.py` script contained in the project folder.
    We'll add the specifics about the database connection (user, password, database
    name, and so on), and adjust the `INSTALLED_APPS` setting.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: Adding a new database connection
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using IDLE or another IDE, open `settings.py` from the `chapter12` project folder.
    Scroll down to the variable called `DATABASES`. This variable, which is set to
    a local SQLite database, will be adjusted to the PostgreSQL database with the
    PostGIS extension.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the default:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Change it to the following, substituting the `username` and `password` for
    your PostGIS installation (see [Chapter 3](42c1ea5a-7372-4688-bb7f-fc3822248562.xhtml),
    *Introduction to Geospatial Databases*):'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: An empty string can also be used for the `HOST` option to indicate `localhost`.
    If the PostgreSQL installation is on a different machine, adjust the `HOST` option
    to the IP address of the database server. If it is on a different port, adjust
    the `PORT` option.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: Save the script, but don't close it.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: Adding new installed apps
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Within `settings.py`, scroll to the variable `INSTALLED_APPS`. This lists the
    built-in, core applications used to support our application. To it, we'll add
    `django.contrib.gis`, the built-in Django GIS application, and our own new application,
    Arenas.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '`INSTALLED_APPS` is a list and can be edited. Initially, `INSTALLED_APPS` looks
    like this:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Edit it to look like this:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Save `settings.py` and close the script. Now we've added our custom arenas app
    and Django's GIS library to the installed app package manager, so GeoDjango is
    now configured. Next, we'll use `manage.py` and OGR to read shapefiles and automatically
    generate data models.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: Creating the application
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This application will perform geospatial analysis using the geometry fields
    of database tables. To make this possible, we have to create and populate the
    database tables using shapefiles and a built-in method called `LayerMapping`.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: The completed application will need URL pattern matching to link URLs with the
    views that will process the requests and return the response. Templates will be
    used to pass processed data to the browser. Views will be written to be able to
    handle both `POST` and `GET` requests and to redirect to other views.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: Now that GeoDjango is configured, the NBA Arenas application can be created
    using the Django project management script called `manage.py`.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: manage.py
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The script `manage.py` performs a number of jobs to help set up and manage
    the project. For testing purposes, it can create a local web server (using `runserver`
    as the argument); it manages database schema migrations, generating tables from
    data models (using `makemigration` and `migrate`); it even has a built-in Python
    3 shell (using `shell`) for testing and more:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本`manage.py`执行多项任务以帮助设置和管理项目。出于测试目的，它可以创建一个本地Web服务器（使用`runserver`作为参数）；它管理数据库模式迁移，从数据模型生成表（使用`makemigration`和`migrate`）；它甚至内置了一个Python
    3 shell（使用`shell`），用于测试和其他操作：
- en: '![](img/0e08c8f9-ae5d-484b-b60f-81a06f8a823a.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0e08c8f9-ae5d-484b-b60f-81a06f8a823a.png)'
- en: In this section, we'll use `manage.py` to create and populate database tables,
    using shapefiles as the data and schema source.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用`manage.py`创建和填充数据库表，使用形状文件作为数据和模式源。
- en: Generating data models
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成数据模型
- en: After configuring GeoDjango, a new available function in `manage.py` is available, `ogrinspect`,
    which automatically generates data table models with geometry columns that can
    be placed in `models.py`. By inspecting or reading the shapefile data using OGR,
    Django's built-in functionality creates a Python class data model and a field
    mapping dictionary that maps between the names of shapefile fields and database
    columns.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置GeoDjango后，`manage.py`中新增了一个可用功能，即`ogrinspect`，它可以自动生成具有几何列的数据表模型，这些模型可以放置在`models.py`中。通过使用OGR检查或读取形状文件数据，Django的内置功能创建了一个Python类数据模型和一个字段映射字典，该字典将形状文件字段名和数据库列名之间进行映射。
- en: 'For this section, we will use the shapefiles downloaded in [Chapter 11](e483966e-f5c7-47dd-a40c-9b8b6f807107.xhtml),
    *Flask and GeoAlchemy2*. They are also available in the code package. Copy the
    four shapefiles (and all of the associated files) into a folder called `data`
    within the arenas application folder:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本节，我们将使用在[第11章](e483966e-f5c7-47dd-a40c-9b8b6f807107.xhtml)中下载的形状文件，*Flask和GeoAlchemy2*。它们也包含在代码包中。将四个形状文件（以及所有相关文件）复制到arenas应用程序文件夹中的`data`文件夹内：
- en: '![](img/0c239832-ff10-469c-af8c-fb7754492ac7.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0c239832-ff10-469c-af8c-fb7754492ac7.png)'
- en: 'Open a command prompt, and change the directory to the project folder. The `data` folder
    with the four shapefiles (`Arenas_NBA.shp`, `US_States.shp`, `US_County_Boundaries.shp`,
    and `Congressional_Districts.shp`) will be inspected to generate data models using
    `manage.py`. The results are copied to `models.py`. From these models, the database
    tables will be generated, and then the tables will be populated using the field
    mapping dictionaries:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 打开命令提示符，并将目录切换到项目文件夹。将检查包含四个形状文件（`Arenas_NBA.shp`、`US_States.shp`、`US_County_Boundaries.shp`和`Congressional_Districts.shp`）的`data`文件夹，使用`manage.py`生成数据模型。结果将复制到`models.py`中。从这些模型中，将生成数据库表，然后使用字段映射字典来填充这些表：
- en: '[PRE8]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This command will produce a data model with a geometry column and a `4326` SRID.
    The field mapping dictionary, generated by the `--mapping` option, is a Python
    dictionary that maps between the keys (data model column names) and the values
    (shapefile field names). This is a part of the output:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将生成一个具有几何列和`4326` SRID的数据模型。由`--mapping`选项生成的字段映射字典是一个Python字典，它将键（数据模型列名）和值（形状文件字段名）之间进行映射。这是输出的一部分：
- en: '![](img/d9dc5556-ddbb-494d-bbb2-a8cd113c170c.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d9dc5556-ddbb-494d-bbb2-a8cd113c170c.png)'
- en: Copy the output, including the `import` line, data model, and the field mapping
    dictionary into `arenas`\`models.py`. Copy the `import` line over the data model
    class definition over the auto-generated `import` line in `models.py`.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 将输出（包括`import`行、数据模型和字段映射字典）复制到`arenas`文件夹下的`models.py`中。将`import`行覆盖在数据模型类定义上的自动生成的`import`行。
- en: Copying from the command line is easy when the Quick Edit option is turned on
    in the command prompt defaults. Once it is on, select text by dragging the mouse.
    Push *Enter* when the text block has been selected.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 当在命令提示符默认设置中开启快速编辑选项时，从命令行复制操作变得简单。一旦开启，可以通过拖动鼠标选择文本。当文本块被选中后，按*Enter*键。
- en: Multipolygons
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多边形
- en: For the three other shapefiles with multipolygon geometry types, we'll pass
    the argument—`multi` to `manage.py` and `ogrinspect`. Using this option generates
    a `MultiPolygon` geometry column in the data model.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 对于具有多边形几何类型的其他三个形状文件，我们将传递参数—`multi`到`manage.py`和`ogrinspect`。使用此选项在数据模型中生成一个`MultiPolygon`几何列。
- en: 'This command generates a data model from the US States shapefile:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令从美国州形状文件生成数据模型：
- en: '[PRE9]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The output will look like this:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将看起来像这样：
- en: '[PRE10]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Copy the output to `models.py`, including both the data model and the field
    mapping dictionary. Repeat the process for the counties and districts shapefiles
    by adjusting the arguments to `manage.py`(that is, the shapefile name and the
    table name), and save `models.py` once the models have been added.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 将输出复制到`models.py`中，包括数据模型和字段映射字典。通过调整`manage.py`的参数（即shapefile名称和表名称）重复此过程，并在模型添加完毕后保存`models.py`。
- en: Database migrations
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据库迁移
- en: Django uses a concept of database migrations to record and execute changes to
    the database. These changes include table creation and schema alterations. Now
    that we have generated the data models, we need to migrate the database, which
    involves inspecting `models.py` for changes, calculating the SQL syntax to generate
    the database alterations, and then running the required migrations to make the
    database table columns match their `models.py` code definitions. These migrations
    can also be reverted.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: Django使用数据库迁移的概念来记录和执行对数据库的更改。这些更改包括表创建和模式变更。现在我们已经生成了数据模型，我们需要迁移数据库，这涉及到检查`models.py`中的更改，计算生成数据库变更的SQL语法，然后运行所需的迁移以使数据库表列与`models.py`代码定义匹配。这些迁移也可以回滚。
- en: makemigrations
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: makemigrations
- en: 'To start the migration, pass `makemigrations` to `manage.py`. This argument
    will start the migration process by inspecting the contents of `models.py`. All
    of the Python class data models will be read, and the corresponding SQL is generated:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始迁移，将`makemigrations`传递给`manage.py`。此参数将通过检查`models.py`的内容来启动迁移过程。所有Python类数据模型将被读取，并生成相应的SQL：
- en: '[PRE11]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: A new script has been generated and added to the `migrations` folder. This initial
    database migration script creates a `Migration` class and includes a number of
    migration operations using the `CreateModel` method. Each of these migrations
    creates operations will generate a new (empty) table in the `chapter12` database.
    `Migration` classes also have methods for performing table alterations, when you
    need to add or remove fields.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: A new script has been generated and added to the `migrations` folder. This initial
    database migration script creates a `Migration` class and includes a number of
    migration operations using the `CreateModel` method. Each of these migrations
    creates operations will generate a new (empty) table in the `chapter12` database.
    `Migration` classes also have methods for performing table alterations, when you
    need to add or remove fields.
- en: sqlmigrate
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: sqlmigrate
- en: 'Use the command `sqlmigrate` to see the SQL statements generated from the `makemigration`
    operation. Pass `sqlmigrate`, the application label (`arenas`), and the migration
    name (`0001`) to `manage.py` to generate the output:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`sqlmigrate`命令查看从`makemigration`操作生成的SQL语句。将`sqlmigrate`、应用程序标签（`arenas`）和迁移名称（`0001`）传递给`manage.py`以生成输出：
- en: '![](img/2f0aeaa8-cb7a-41b8-8370-f596c379e116.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2f0aeaa8-cb7a-41b8-8370-f596c379e116.png)'
- en: All of the data models have been translated to SQL, with definitions for primary
    keys and field lengths added automatically.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 所有数据模型都已转换为SQL，并自动添加了主键和字段长度的定义。
- en: migrate
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: migrate
- en: With the migration script generated, we can finally perform the database migration.
    This operation will generate the tables within the database specified in `settings.py`.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 使用生成的迁移脚本，我们最终可以执行数据库迁移。此操作将在`settings.py`中指定的数据库内生成表。
- en: 'Pass the argument `migrate` to `manage.py`:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 将`migrate`参数传递给`manage.py`：
- en: '[PRE12]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The result of the operation should look like this:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 操作的结果应该如下所示：
- en: '![](img/c116e214-f585-4673-8308-7287af23b699.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c116e214-f585-4673-8308-7287af23b699.png)'
- en: The database tables have been created in the database. Open pgAdmin4 (or another
    database GUI tool) to check on the tables within the database, or open psql and
    use the command line interface.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库表已在数据库中创建。打开pgAdmin4（或另一个数据库GUI工具）检查数据库中的表，或打开psql并使用命令行界面。
- en: 'Explore the Django documentation to explore all of the available arguments
    for `django-admin.py` and `manage.py`:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 探索Django文档，了解`django-admin.py`和`manage.py`的所有可用参数：
- en: '[https://docs.djangoproject.com/en/2.0/ref/django-admin/](https://docs.djangoproject.com/en/2.0/ref/django-admin/).'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '[Django官方文档](https://docs.djangoproject.com/en/2.0/ref/django-admin/)'
- en: LayerMapping
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: LayerMapping
- en: To populate the database tables created from the shapefiles, Django has a built-in
    concept called `LayerMapping`. By using the field mapping dictionary generated
    by `manage.py`, along with the `LayerMapping` class from `django.contrib.gis.utils`,
    the data contained in the shapefiles can be extracted and loaded into the database
    tables. To instantiate a `LayerMapping` instance, we will pass the data model,
    the associated field mapping, and the location of the shapefile to the class.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 要填充由 shapefile 创建的数据库表，Django 有一个内置的概念称为 `LayerMapping`。通过使用 `manage.py` 生成的字段映射字典，以及
    `django.contrib.gis.utils` 中的 `LayerMapping` 类，可以从 shapefile 中提取数据并将其加载到数据库表中。要实例化一个
    `LayerMapping` 对象，我们将数据模型、相关的字段映射和 shapefile 的位置传递给该类。
- en: 'Create a new file called `load.py` and save it inside the Arenas application.
    Add this line to the file:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为 `load.py` 的新文件，并将其保存在 Arenas 应用程序中。向文件中添加以下行：
- en: '[PRE13]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Open `models.py` and copy all of the field mapping dictionaries into `load.py`.
    Then, use the `os` module to assign the shapefile path to a variable. Here is
    the dictionary and path variable for `US_County_Boundary.shp`:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 `models.py` 文件，并将所有字段映射字典复制到 `load.py` 文件中。然后，使用 `os` 模块将 shapefile 路径分配给一个变量。以下是
    `US_County_Boundary.shp` 的字典和路径变量：
- en: '[PRE14]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Repeat this step for all of the shapefiles, as demonstrated in the `load.py`
    provided in the code package. These path variables and mapping dictionaries are
    required to perform the layer mapping.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 重复此步骤，对所有 shapefile 进行操作，如代码包中提供的 `load.py` 所示。这些路径变量和映射字典是执行层映射所必需的。
- en: Running the layer mapping
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行层映射
- en: 'At the bottom of `load.py`, create a function called `run` that contains the
    following code. Note that the names of the mappings (for example, `us_states_mapping`)
    will have to match the names of the dictionaries:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `load.py` 的底部创建一个名为 `run` 的函数，包含以下代码。注意，映射的名称（例如，`us_states_mapping`）必须与字典的名称匹配：
- en: '[PRE15]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'To run the script, we will use the `manage.py shell` argument to invoke a Python
    shell, and then import the `load.py` file and execute the `run` function inside
    this local shell:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行脚本，我们将使用 `manage.py shell` 参数来调用 Python shell，然后在此本地 shell 中导入 `load.py`
    文件并执行 `run` 函数：
- en: '[PRE16]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Once the `run` function is called and executed, the rows of data in the shapefiles
    are imported into the database tables:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦调用并执行了 `run` 函数，shapefile 中的数据行将被导入到数据库表中：
- en: '![](img/4b22e3c5-ba3c-43d8-acbd-15607672236b.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4b22e3c5-ba3c-43d8-acbd-15607672236b.png)'
- en: Once the function completes successfully, the database tables will be populated.
    We can now explore a very useful feature of Django—the built-in admin panel.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦函数成功完成，数据库表将被填充。我们现在可以探索 Django 的一个非常有用的功能——内置的行政面板。
- en: Administrative panel
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理面板
- en: The Django framework was developed in a busy newsroom environment, and from
    the beginning, it required a built-in administrative panel that would allow reporters
    and editors to access their stories. This concept has continued to be supported,
    as most websites require an interface for administrative tasks. It's a very useful
    and convenient interface that requires no technical knowledge about the site to
    use.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: Django 框架是在繁忙的新闻编辑室环境中开发的，从一开始就需要一个内置的行政面板，以便记者和编辑可以访问他们的故事。这个概念一直得到支持，因为大多数网站都需要一个用于行政任务的界面。这是一个非常实用和方便的界面，使用它不需要对网站有任何技术知识。
- en: GeoDjango administrative panel
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GeoDjango 行政面板
- en: Websites built with the GeoDjango configuration are no different, and the administrative
    panel for GeoDjango websites even supports the display and editing of geometry
    data. The `OpenLayers` JavaScript library is included in the panel template to
    allow for the data visualizations. It also allows for the normal administrative
    tasks such as editing groups or users and their permissions.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 GeoDjango 配置构建的网站没有不同，GeoDjango 网站的行政面板甚至支持显示和编辑几何数据。`OpenLayers` JavaScript
    库包含在面板模板中，以允许数据可视化。它还允许执行常规的行政任务，例如编辑组或用户及其权限。
- en: admin.py
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: admin.py
- en: 'To access the data models stored in `models.py` through the administrative
    panel, the autogenerated script called `admin.py` inside the Arenas application
    must be updated. Open the file in an IDE and add the following lines, copying
    the original code:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过行政面板访问 `models.py` 中存储的数据模型，必须在 Arenas 应用程序内自动生成的 `admin.py` 脚本中进行更新。在 IDE
    中打开文件，并添加以下行，复制原始代码：
- en: '[PRE17]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Save the script and close it.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 保存脚本并关闭它。
- en: createsuperuser
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建超级用户
- en: 'The first step is to create a superuser. This user will be able to access the
    administrative panel. To do this, we will pass the `createsuperuser` argument
    to `manage.py` and follow the instructions as they appear one by one:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The superuser is now available for logging into the administrative panel, using
    the password and username supplied.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: runserver
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once the superuser has been created, pass the `runserver` argument to `manage.py`
    to start the local development web server:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/50708041-295e-426d-b330-bec34b8afe33.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
- en: 'This will make the `localhost` open at port `8000` by default (`http://127.0.0.1:8000`).
    The administrative panel is available at: `http://127.0.0.1:8000/admin`. Open
    a web browser and navigate to the administrative panel URL. Enter the superuser
    credentials:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/316a4389-9f0b-45c9-a2ae-29affc4fa067.png)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
- en: 'Once they are entered, the administrative panel will list the available models,
    as well as the authentication and authorization section. These models are initially
    shown with an s at the end of their name (pluralizing them by default). This behavior
    can (and should) be overridden, though we won''t focus on that task here:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/236269fb-0033-4657-ace3-6bb5732ad665.png)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
- en: 'Click on the U_s_statess model under ARENAS, and then click on the first object
    in the list of states objects. It should look like this:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/031b3c08-fca8-46a6-8980-b3ab1548b3b1.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
- en: These fields can be edited through this administrative panel, and even the geometry
    of the state (or, in this case, Puerto Rico) can be edited using the `OpenLayers`
    editing plugin included. Click Save after any edits. The data row can also be
    deleted from this interface.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: 'Explore the complete administrative panel documentation here:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.djangoproject.com/en/2.0/ref/contrib/admin/](https://docs.djangoproject.com/en/2.0/ref/contrib/admin/).'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: URLs
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Finally, within the HTML form section, we designate where the description and
    a drop-down list will go and include a hidden token (CSRF), which is required
    for authentication.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: With the models generated and data added to the associated tables, it's time
    to generate some views, which will process our web requests and return the data
    required to complete our request.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: To correctly route our requests, we have to first create some URLs that will
    be paired with a view. This will require both project-level and application-level
    configuration. Unlike Flask, URLs are not attached to views using Python decorators.
    Instead, they are contained in separate scripts that will either map to an application
    or a view.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: URL patterns
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Django URL patterns are very clean and simple and make for nice websites where
    the URLs are short and memorable. To make this possible, there is matching of
    the requested URL with a view (or application-level URL that matches with a view).
    The URLs and their destination are matched inside a list called `urlpatterns`.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: Within the project folder (`C:\Projects\chapter12\chapter12`), there is a script
    called `urls.py` just underneath `settings.py`. This script controls project-level
    URL routing. For this application, we'll also add application-level URLs inside
    the `arenas` folder and will point the project-level URL routing to the application
    URLs.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: 'Open up the project-level `urls.py`, and copy the following code over any existing
    code:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This code will redirect the requests to two different URLs in the application-level
    `urls.py` file, where they can be further sorted. Any requests sent to the admin
    URL are handled by the administrative code. The `path` function accepts two required
    parameters: the URL path (for example, `''arenas/''`, which goes to `http://127.0.0.1:8000/arenas`),
    and the view or application-level code that will accept the request. The `include` function
    is used to add the available URLs from the Arenas application into the project
    level URLs.'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: 'To create the application-level URLs, create a script called `urls.py` inside
    the Arenas application folder. Copy the following code:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This time, the function `path` directs requests to views (that will be) inside
    the `views.py` script. Both the base URL and the arena URL are redirected to a
    view. The optional parameter `name` is also included.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: Note that a major change in Django URL patterns was introduced in Django 2.0\.
    Earlier Django versions do not use the `path` function but use a similar function
    called `url`. Ensure that you are using the newest version of Django to match
    the code here.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: Views
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Views are at the heart of the application, and in Django take the form of Python
    functions. They accept both `GET` and `POST` web requests, allowing for multiple
    actions, with various responses, to occur inside the same function. Within view
    functions, we design how the request is parsed, how database tables are queried,
    how the query results (**QuerySets** in Django) are processed, and which forms
    and templates are sent to the browser along with the processed data.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: Now that the URL patterns are in place, we need to write some views that will
    accept and process the web requests sent to the URLs. These views will query the
    database table model classes in `models.py`to find the location data associated
    with each NBA arena included in the `Arenas` class.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: Required folders and files
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first step is to create the necessary folders with files of forms and templates,
    as web responses from the views require a pre-generated template that can display
    the requested data (in this case, the location of the NBA `arena` requested).
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: forms.py
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A web form is used in Django to capture user input and submit it to a view.
    To make it possible to select an NBA `arena` name from a drop-down list and have
    the web map zoom to that location, a new script, `forms.py`, must be created.
    Open an IDE and copy the following code into a new file:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This section creates a form class by subclassing from `forms.Form`. It has a
    `name` field, a `description` field, and a `ChoiceField`. The `ChoiceField` will
    create a drop-down list, populated by the IDs and names of the `arenas`. Other
    fields will be added to the `ArenaForm` class within the view and are not defined
    here. This form and its fields will be inserted into the template created in the
    next section. Save this file as `forms.py` into the Arenas application folder.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: templates folder
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Copy the `templates` folder from the completed code package into the Arenas
    application folder. Inside the `templates` folder is a folder called `arenas`,
    with a template HTML file called `index.html`. This file contains a JavaScript
    portion that generates a web map. On that map, the location of an NBA `arena` is
    displayed.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: Django templates use placeholders (demarcated with a `{{form.field }}` format) that allow
    for data to be passed at runtime into the template, providing the specifics of
    the request. These placeholders are located throughout `index.html`. Django has
    its own built-in template language, which we will use here, and also includes
    Jinja2, which Flask also uses (see [Chapter 11](e483966e-f5c7-47dd-a40c-9b8b6f807107.xhtml),
    *Flask and GeoAlchemy2*).
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: 'The first portion of `index.html` is to highlight is where the `longitude`
    and `latitude` of the current NBA `arena` have been added to the Leaflet JavaScript,
    which centers the map window on that location at zoom level `13`:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The next portion to highlight is where the `longitude`, `latitude`, and custom
    `popup` about the current NBA `arena` are added to a marker:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Finally, within the HTML `form` section, we designate where the `description`
    and a drop-down list will go and include a hidden token (CSRF), which is required
    for authentication of the `POST` request. The button is generated by the input
    HTML:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: All of these placeholders will be populated when the view is processed and data
    is returned to the requesting browser.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: Writing views
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Everything is finally set to write our views. Open up `views.py` from the Arenas
    application folder within an IDE. Import the required libraries, models, forms,
    and modules:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Next, we will create two views—`index` and `arena`*, *and one non-view function
    called `queryarena`. These match with the URLs we added to `urls.py`. The return
    from the `index` function is very simple—it will redirect to the function `arena`.
    For the views, a decorator is used to determine the HTTP request methods allowed.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: index view
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `index` view is a Python function that accepts the request data and redirects
    it to the `arena` view, with a decorator (`require_http_methods`) prior to restricting
    the HTTP requests allowed:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: queryarena function
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `arena` function below selects a random `arena` for the initial `GET` request,
    getting data from the database model about the selected NBA `arena`. The queries
    themselves are handled by the `queryarena` function.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: 'In this function, the name of the selected `arena` is accepted as a parameter.
    It is used to query (or `filter`) all of the `Arenas` model objects. This **object-relational
    mapping** (**ORM**) `filter` method requires a field as a parameter; in this case,
    the field is called `name1`. As an example of what the `filter` is doing,  if
    the name of the `arena` is *Oracle Arena*, the `filter` translated to English
    would be *find all NBA arenas with the name Oracle Arena*. The results of the
    `filter` method are returned as a list, so the first result is retrieved from
    the list using zero-indexing. A result is an object representing the data row
    from the `Arenas` class that met the `filter` parameters:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Once the `arena` object is instantiated, its geometry field is used in a `filter`
    operation. Instead of using a field to `filter`, however, this `filter` uses geospatial
    analysis. Passing `arena.geom` to the `geom__intersects` method (provided by GeoDjango)
    performs an intersect operation to find the state in which the `arena` resides.
    An `if`/`else` conditional checks to ensure that the `arena` is located in the
    United States (for instance, not Toronto's `arena`) to determine the correct value
    to return.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: If the `arena` is located inside the United States, the `arena` geometry is
    again used to determine the `county` and congressional `district` that contain
    the `arena`. This time, the geospatial operation is `geom_contains`. The `filters`
    return a `county` object and a `district` object. They are used to generate the
    custom `popup` that will be added to the map marker on the leaflet map. This `popup`
    contains the `longitude` and `latitude` of the `arena`, the name of the `arena`,
    and the name of its `county`, `state`, and the number of the congressional `district`
    within its `state`.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: arena view
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `arena` view accepts the `request` object and then instantiates an `ArenaForm`
    object to gather the data needed to respond to the `request`. A query of the `Arenas`
    model objects and its `values_list` method creates a Python list that contains
    tuples with the ID and name of every `arena`. The `request` method (either `GET`
    or `POST`) is used in a conditional to determine the appropriate response.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: If a `GET` request is received (that is, the web page is first opened), a random
    `arena` object is generated and passed to the template, which shows the `arena`
    on the included map. To get a random `arena`, we use the list of `arena` names
    and IDs (values). Once the list is generated, a list comprehension is used to
    generate a new list containing `arena` names.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: Using the `random` module and the `#` of names in the list (`length`) generates
    a random `index` that is used to select an `arena` name from the list. This `name`
    is then passed to the `queryarena` function, which populates the `form` with the
    `arena` `name`, location, and the `popup`.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: 'These values are returned to the browser using the `render` function. This
    function is used to pass `forms` to templates along with the `request`, and knows
    where the `templates` folder is located inside the Arenas application:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 这些值通过`render`函数返回给浏览器。这个函数用于将`forms`与`request`一起传递到模板中，并且知道`templates`文件夹位于Arenas应用程序内部的位置：
- en: '[PRE28]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: If a `POST` request is received (that is, an `arena` was selected), an `ArenaForm`
    class is called by passing the `POST` data to the class, and the `form` is validated.
    The ID of the selected `arena` is used as a conditional in a list comprehension,
    allowing us to retrieve the `name` of the `arena`. The `name` is then passed to
    `queryarena`, and the details of its location are queried and added to the `form`
    before it is returned using `render`.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 如果收到`POST`请求（即选择了`arena`），则通过将`POST`数据传递给类来调用`ArenaForm`类，并验证`form`。所选`arena`的ID用作列表推导中的条件，使我们能够检索`arena`的`name`。然后，将`name`传递给`queryarena`，查询其位置详情，并在使用`render`返回之前将其添加到`form`中。
- en: The views are complete and the script can be saved. The next step is to run
    the application.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 视图已经完成，脚本可以保存。下一步是运行应用程序。
- en: Running the application
  id: totrans-239
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行应用程序
- en: 'Open, the command prompt and change directories to the `root` folder (`C:\Projects\chapter12`).
    Start the local development server with the following command:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 打开命令提示符，切换到`root`文件夹（`C:\Projects\chapter12`）。使用以下命令启动本地开发服务器：
- en: '[PRE29]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The result should look like this:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 结果应该看起来像这样：
- en: '![](img/257c5316-7c47-469e-a9a9-d4858dc1d43a.png)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/257c5316-7c47-469e-a9a9-d4858dc1d43a.png)'
- en: Open a browser and go to: `http://127.0.0.1:8000`. The initial `GET` request
    will be redirected to the `arenas` view and processed, returning a random `arena`.
    Selecting another `arena` from the list and pushing the Find Data button will
    perform a `POST` request and will locate the selected `arena`. Each time an `arena`
    is selected, the text of the `arena` name will change, along with the map location
    and popup displayed.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 打开浏览器并访问：`http://127.0.0.1:8000`。初始的`GET`请求将被重定向到`arenas`视图并处理，返回一个随机的`arena`。从列表中选择另一个`arena`并点击查找数据按钮将执行`POST`请求并定位所选的`arena`。每次选择`arena`时，`arena`名称的文本都会改变，同时地图位置和显示的弹出窗口也会改变。
- en: 'Here is an example of the results of a `POST` request:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个`POST`请求结果的示例：
- en: '![](img/42da4615-1886-44c4-8ac2-9b91e1573145.png)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/42da4615-1886-44c4-8ac2-9b91e1573145.png)'
- en: Test the application by selecting different NBA arenas, and for extra credit,
    change the popup message.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 通过选择不同的NBA场馆来测试应用程序，并且为了加分，可以更改弹出消息。
- en: Summary
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Django, with its batteries-included philosophy, creates complete applications
    with very few outside libraries required. This application performs data management
    and data analysis using only the Django built-in tools and the GDAL/OGR library.
    Enabling the GeoDjango functionality is a relatively seamless experience because
    it is an integral part of the Django project.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: Django以其内置电池的哲学，只需要非常少的第三方库就能创建完整的应用程序。此应用程序仅使用Django内置工具和GDAL/OGR库进行数据管理和数据分析。启用GeoDjango功能是一个相对无缝的过程，因为它本是Django项目的一部分。
- en: Creating web applications with Django allows for a lot of instant functionality,
    including the administrative panel. The `LayerMapping` makes it easy to import
    data from shapefiles. The ORM model makes it easy to perform geospatial filters
    or queries. The templating system makes it easy to add web maps as well as location
    intelligence to a website.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Django创建Web应用程序可以提供很多即时功能，包括管理面板。`LayerMapping`使得从shapefiles导入数据变得容易。ORM模型使得执行地理空间过滤或查询变得容易。模板系统使得添加网络地图以及位置智能到网站变得容易。
- en: In the next chapter, we will use a Python web framework to create a geospatial
    REST API. This API will accept requests and return JSON encoded data representing
    geospatial features.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将使用一个Python网络框架来创建一个地理空间REST API。这个API将接受请求并返回表示地理空间特征的JSON编码数据。
