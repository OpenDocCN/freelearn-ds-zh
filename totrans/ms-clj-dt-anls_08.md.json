["```py\n(defn get-target-sample [rate min-effect]\n  (let [v (* rate (- 1.0 rate))]\n    (* 16.0 (/ v (* min-effect min-effect)))))\n```", "```py\nuser=> (get-target-sample 0.24 0.05)\n1167.36\n\n```", "```py\nlein new luminus web-ab +h2 +cljs\n\n```", "```py\nlein ring server\n\n```", "```py\n{% extends \"web_ab/views/templates/base.html\" %}\n{% block content %}\n<header id=\"banner\" class=\"row\">\n  <div class=\"col-md-12\">\n    <h1 style=\"width: 4.5em;\" class=\"center-block\">Widgets!</h1>\n  </div>\n</header>\n<div id=\"content\" class=\"row\">\n  <div id=\"left-panel\" class=\"col-md-6 jumbotron\">\n    <h1>Fix everything!</h1>\n    <p>These amazing <strong>widgets!</strong> will fix\n      <em>everything</em>.</p>\n    <p>Let <strong>widgets!</strong> work for you.</p>\n  </div>\n  <div id=\"right-panel\" class=\"col-md-6 jumbotron\">\n    <a href=\"/purchase/\" id=\"btn-more\"\n       class=\"btn btn-primary btn-lg center-block\">\n      Learn more!\n    </a>\n  </div>\n</div>\n{% endblock %}\n```", "```py\n(defn purchase-page []\n  (layout/render \"purchase.html\" {}))\n(defroutes home-routes\n  (GET \"/\" [] (home-page))\n  (GET \"/purchase/\" [] (purchase-page)))\n```", "```py\n    (ns web-ab.models.schema\n      (:require [clojure.java.jdbc :as sql]\n                [noir.io :as io]))\n    ```", "```py\n    (defn create-abtracking-table []\n      (sql/with-connection db-spec\n        (sql/create-table :abtracking\n          [:id \"INTEGER IDENTITY\"]\n          [:testgroup \"INT NOT NULL\"]\n          [:startat \"TIMESTAMP NOT NULL DEFAULT NOW()\"]\n          [:succeed \"TIMESTAMP DEFAULT NULL\"])))\n    ```", "```py\n    (ns web-ab.models.db\n      (:use korma.core\n            [korma.db :only (defdb)])\n      (:require [web-ab.models.schema :as schema]\n                [taoensso.timbre :as timbre]))\n    ```", "```py\n    (defn create-abtracking [group]\n      (get (insert abtracking\n                   (values [{:testgroup (group-code group)}]))\n           (keyword \"scope_identity()\")))\n    ```", "```py\n    (defn mark-succeed [id]\n      (update abtracking\n              (set-fields {:succeed (sqlfn :now)})\n              (where {:id id})))\n    ```", "```py\n(ns web-ab.ab-testing\n  (:require [noir.cookies :as c]\n            [taoensso.timbre :as timbre]\n            [web-ab.models.db :as db]\n            [incanter.stats :as s]\n            [clojure.set :as set]\n            [web-ab.util :as util])\n  (:import [java.lang Math]))\n```", "```py\n(defn new-test [test-cases]\n  (let [[group text] (rand-nth (seq test-cases))\n        ab-tracking (db/get-abtracking\n                      (db/create-abtracking group))]\n    (c/put! :abcode (:id ab-tracking))\n    text))\n```", "```py\n(defn get-previous-copy [ab-code test-cases]\n  (-> ab-code\n    db/get-abtracking\n    :testgroup\n    db/code->group\n    test-cases))\n```", "```py\n(defn start-test [counter default test-cases]\n  (let [c (Long/parseLong (c/get counter \"0\"))\n        ab-code (get-abcode-cookie)]\n    (c/put! counter (inc c))\n    (cond\n      (and (>= ab-code 0) (> c 0))\n      (get-previous-copy ab-code test-cases)\n\n      (and (< ab-code 0) (> c 0)) default\n\n      :else (new-test test-cases))))\n```", "```py\n(defn mark-succeed []\n  (let [ab-code (get-abcode-cookie)]\n    (when (> ab-code -1)\n      (db/mark-succeed ab-code))))\n```", "```py\n(defn perform-test\n  ([ab-testing] (perform-test ab-testing 0.05))\n  ([ab-testing p]\n   (let [groups (group-by-group ab-testing)\n         t (-> (s/t-test (to-flags (:test groups))\n                         :y (to-flags (:control groups))\n                         :alternative :less)\n             (select-keys [:p-value :t-stat\n                           :x-mean :y-mean :n1 :n2])\n             (set/rename-keys {:x-mean :test-p,\n                               :y-mean :control-p,\n                               :n1 :test-n,\n                               :n2 :control-n}))]\n     (assoc t\n            :p-target p\n            :significant (<= (:p-value t) p)))))\n```", "```py\n  <div id=\"right-panel\" class=\"col-md-6 jumbotron\">\n    <a href=\"/purchase/\" id=\"btn-more\"\n       class=\"btn btn-primary btn-lg center-block\">\n      {{button}}\n    </a>\n  </div>\n```", "```py\n(defn home-page []\n  (layout/render\n    \"home.html\"\n    {:button (ab/start-test :visits default-button test-cases)}))\n```", "```py\n(defn purchase-page []\n  (ab/mark-succeed)\n  (layout/render \"purchase.html\" {}))\n```", "```py\n(def target-counts {:control 1200, :test 1200})\n```", "```py\n(defn is-over?\n  ([] (is-over? (ab/get-ab-tracking)))\n  ([ab-tracking]\n   (let [{:keys [control test]} (ab/group-by-group ab-tracking)]\n     (and (>= (count control) (:control target-counts))\n          (>= (count test) (:test target-counts))))))\n```", "```py\n(defn when-is-over [ab-tracking f]\n  (if (is-over? ab-tracking)\n    (f ab-tracking)\n    (let [{:keys [control test]} (ab/group-by-group ab-tracking)]\n      (layout/render\n        \"ab-testing-not-done.html\"\n        {:counts {:control (count control)\n                  :test (count test)}\n         :targets target-counts\n         :complete {:control (ab/pct (count control)\n                                     (:control target-counts))\n                    :test (ab/pct (count test)\n                                  (:test target-counts))}}))))\n```", "```py\n(defn grid []\n  (when-is-over\n    (ab/get-ab-tracking)\n    (fn [ab-tracking]\n      (let [by-group-outcome (ab/assoc-grid-totals\n                               (ab/get-results-grid ab-tracking))\n            stats (ab/perform-test ab-tracking 0.05)]\n        (layout/render \"ab-testing-grid.html\"\n                       {:grid by-group-outcome,\n                        :stats (sort (seq stats))\n                        :significant (:significant stats)})))))\n```", "```py\n(defn binomial-mean [coll] (reduce + 0.0 coll))\n```", "```py\n(defn binomial-variance [coll]\n  (let [n (count coll),\n        p (/ (count (remove zero? coll)) n)]\n    (* n p (- 1.0 p))))\n```", "```py\n(defn binomial-se [coll-t coll-c]\n  (Math/sqrt (+ (/ (binomial-variance coll-t) (count coll-t))\n                (/ (binomial-variance coll-c) (count coll-c)))))\n```", "```py\n(defn binomial-t-test [coll-t coll-c]\n  (/ (- (binomial-mean coll-t) (binomial-mean coll-c))\n     (binomial-se coll-t coll-c)))\n```", "```py\n(defn degrees-of-freedom [coll-t coll-c]\n  (let [var-t (binomial-variance coll-t), n-t (count coll-t),\n        var-c (binomial-variance coll-c), n-c (count coll-c)]\n    (/ (Math/pow (+ (/ var-t n-t) (/ var-c n-c)) 2)\n       (+ (/ (* var-t var-t) (* n-t n-t (dec n-t)))\n          (/ (* var-c var-c) (* n-c n-c (dec n-c)))))))\n```", "```py\nuser=> (require '[web-ab.ab-testing :as ab])\nnil\nuser=> (require '[incanter.stats :as s])\nnil\nuser=> (def group-c (take 100 (concat (repeat 53 1) (repeat 0))))\n#'user/group-c\nuser=> (def group-t (take 100 (concat (repeat 58 1) (repeat 0))))\n#'user/group-t\nuser=> (s/cdf-t (ab/binomial-t-test group-t group-c)\n :df (ab/degrees-of-freedom t c))\n9.553337936305223E-12\n\n```", "```py\n    user=> (def c (take 1226 (concat (repeat 252 1.0)\n     (repeat 0.0))))\n    #'user/c\n    user=> (def t (take 1200 (concat (repeat 317 1.0)\n     (repeat 0.0))))\n    #'user/t\n\n    ```", "```py\n    user=> (ab/binomial-mean t)\n    317.0\n    user=> (ab/binomial-variance t)\n    233.25916666666666\n    user=> (ab/binomial-mean c)\n    252.0\n    user=> (ab/binomial-variance c)\n    200.20228384991844\n\n    ```", "```py\n    user=> (ab/binomial-se t c)\n    0.5980633502426848\n\n    ```", "```py\n    user=> (ab/binomial-t-test t c)\n    108.68413851747313\n    user=> (ab/degrees-of-freedom t c)\n    2401.108650831878\n    user=> (s/cdf-t *2 :df *1)\n    1.0\n\n    ```"]