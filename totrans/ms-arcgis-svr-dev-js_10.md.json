["```py\nchai.should();\n\ncountry.should.be.a('string');\ncountry.should.equal('Greece');\ncountry.should.have.length(6);\ntexas.should.have.property('counties')\n  .with.length(253);\n```", "```py\nvar expect = chai.expect;\n\nexpect(country).to.be.a('string');\nexpect(country).to.equal('Greece');\nexpect(country).to.have.length(6);\nexpect(texas).to.have.property('counties')\n  .with.length(253);\n```", "```py\nvar assert = chai.assert;\n\nassert.typeOf(country, 'string');\nassert.equal(country, 'Greece');\nassert.lengthOf(country, 6)\nassert.property(texas, 'counties');\nassert.lengthOf(texas.counties, 253);\n```", "```py\ndefine(function (require) {\n  var registerSuite = require('intern!object');\n  var assert = require('intern/chai!assert');\n\n  registerSuite({\n    'One plus one equals two': function () {\n      Var result = 1 + 1;\n      assert.equal(result, 2, \"1 + 1 should add up to 2\");\n\n    },\n    'Two plus two equals four': function () {\n      Var result = 2 + 2;\n      assert.equal(result, 4, \"2 + 2 should add up to 4\");\n    }\n  });\n});\n```", "```py\ndefine([\"intern!object\", \"intern/chai!expect\", \"esri/map\", \"app/widget\"], \nfunction (registerSuite, expect, Map, Widget) {\n  var map, widget;\n  registerSuite({\n    setup: function () {\n      map = new Map(\"mapdiv\", {});\n    },\n    beforeEach: function () {\n      widget = new Widget({map: map}, \"widget\");\n    },\n    afterEach: function () {\n      widget.destroy();\n    },\n    teardown: function () {\n      map.destroy();\n    },\n    'My first test': function () {\n      // test content goes here.\n    }\n  });\n});\n```", "```py\ndescribe(\"A widget listing the attributes of the U.N.\", \n  function () {\n    it(\"has its headquarters located in New York City.\", \n      function () {\n        //tests go here\n      }\n    );\n  }\n);\n```", "```py\ndescribe(\"A widget listing the attributes of the U.N.\", \n  function () {\n  // unitedNations.countries is a string array of country names.\n  it(\"contains more than 10 countries.\", function () {\n    expect(unitedNations.countries.length).toBeGreaterThan(10);\n  });\n  it(\"should contain France as a member country.\", function () {\n    expect(unitedNations.countries).toContain(\"France\");\n  });\n});\n```", "```py\ndescribe(\"A widget listing the attributes of the U.N.\", \n  function () {\n    var unitedNations;\n\n    beforeEach(function () {\n      unitedNations = new UnitedNations();\n    });\n\n    afterEach(function () { \n      unitedNations.destroy();\n    });\n\n    it(\"should do something important\", function () {\n      //…\n    });\n  }\n);\n```", "```py\nxit(\"Elbownia will join the United Nations next year.\", \n  function () {\n    expect(unitedNations.countries).toContain(\"Elbownia\");\n  }\n);\n```", "```py\n<!DOCTYPE html>\n<html>\n<head>\n  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n  <title>Jasmine Spec Runner</title>\n\n  <link rel=\"stylesheet\" href=\"https://js.arcgis.com/3.13/esri/css/esri.css\" />\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"tests/jasmine/jasmine.css\" />\n\n  <script type=\"text/javascript\" src=\"img/jasmine.js\">\n  </script>\n  <script type=\"text/javascript\" src=\"img/jasmine-html.js\" ></script>\n\n  <script type=\"text/javascript\">var dojoConfig={};</script>\n  <script type=\"text/javascript\" src=\"img/\" ></script>\n</head>\n```", "```py\nVar basePath = location.pathname.replace(/\\/[^\\/]*$/, '');\nvar dojoConfig = {\n  async: true,\n  packages: [\n    {\n      name: 'app',\n      location: basePath + '/js/'\n    }, {\n      name: 'spec',\n      location: basePath + \"/tests/\"\n    }\n  ]\n};\n```", "```py\n<body>\n<script type=\"text/javascript\">\n  require([\n    \"dojo/ready\",\n    \"spec/Widget1\",\n    \"spec/Widget2\",\n    \"spec/Widget3\"\n  ], function (ready) {\n\n    ready(function () {\n      // Set up the HTML reporter - this is responsible for\n      // aggregating the results reported by Jasmine as the\n      // tests and suites are executed.\n      jasmine.getEnv().addReporter(\n        new jasmine.HtmlReporter()\n      );\n      // Run all the loaded test specs.\n      jasmine.getEnv().execute();\n    });\n  });\n</script>\n</body>\n```", "```py\ndefine([\"app/Widget1\", \"esri/geometry/Point\"], \n  function (Widget1, Point) {\n\n});\n```", "```py\ndefine([\"app/Widget1\", \"esri/geometry/Point\"], \n  function (Widget1, Point) {\n\n  describe(\"My widget does some incredible tasks.\", function () {\n    var widget, startingPoint;\n\n    // before each test, make a new widget from a staring point.\n    beforeEach(function () {\n      startingPoint = new Point([-43.5, 87.3]);\n      widget = new Widget({start: startingPoint}); \n    });\n\n    // after each test, destroy the widget.\n    afterEach(function () {\n      widget.destroy();\n    });\n\n    it(\"starts at the starting point\", function () {\n      expect(widget.start.X).toEqual(startingPoint.X);\n      expect(widget.start.Y).toEqual(startingPoint.Y);\n    });\n    //…\n  });\n\n});\n```", "```py\n{\n  \"name\": \"intern-tutorial-esri-jsapi\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/DavidSpriggs/intern-tutorial-esri-jsapi.git\"\n  },\n  \"version\": \"0.2.0\",\n  \"devDependencies\": {\n    \"dojo\": \"^1.10\",\n    \"esrislurp\": \"^1.1.0\",\n    \"grunt\": \"^0.4\",\n    \"grunt-contrib-watch\": \"~0\",\n    \"grunt-esri-slurp\": \"^1.4.7\",\n    \"intern\": \"^2.0.3\",\n    \"selenium-server\": \"2.38.0\"\n  }\n}\n```", "```py\nmodule.exports = function(grunt) {\n    grunt.initConfig({\n        intern: {\n            dev: {\n                options: {\n                    runType: 'runner',\n                    config: 'tests/intern'\n                }\n            }\n        },\n        esri_slurp: {\n      options: {\n        version: '3.13'\n      },\n            dev: {\n                options: {\n                    beautify: false\n                },\n      dest: 'esri'\n            }\n        },\n       esri_slurp_modules:{\n      options: {\n      version: '3.13',\n      src: './',\n      dest: './modules'\n        }\n    },\n        watch: {\n            all: {\n                options: { livereload: true },\n                files: ['src/js/*.js']\n            }\n        }\n    });\n\n    // Loading using a local copy\n    grunt.loadNpmTasks('intern');\n    grunt.loadNpmTasks('grunt-contrib-watch');\n    grunt.loadNpmTasks('grunt-esri-slurp');\n\n    // download Esri JSAPI\n    grunt.registerTask('slurp', ['esri_slurp']);\n    grunt.registerTask('create_modules', ['esri_slurp_modules']);\n\n    // Register a test task\n    grunt.registerTask('test', ['intern']);\n\n    // By default we just test\n    grunt.registerTask('default', ['test']);\n};\n```", "```py\n{\n  \"name\": \"y2k-map-app\",\n  \"version\": \"0.0.1\",\n  \"dependencies\": {\n    \"dijit\": \"#1.10.4\",\n    \"dojo\": \"#1.10.4\",\n    \"dojox\": \"#1.10.4\",\n    \"util\": \"dojo-util#1.10.4\",\n    \"dgrid\": \"#0.3.16\",\n    \"put-selector\": \"#0.3.6\",\n    \"xstyle\": \"#0.1.3\",\n    \"d3\": \"#3.5.6\"\n  },\n  \"devDependencies\": {}\n}\n```", "```py\n{\"directories\": \".\"}\n```", "```py\n// Learn more about configuring this file at <https://github.com/theintern/intern/wiki/Configuring-Intern>.\n// These default settings work OK for most people. The options that *must* be changed below are the\n// packages, suites, excludeInstrumentation, and (if you want functional tests) functionalSuites.\ndefine({\n  // The port on which the instrumenting proxy will listen\n  proxyPort: 9000,\n\n  // A fully qualified URL to the Intern proxy\n  proxyUrl: 'http://localhost:9000/',\n\n  // Default desired capabilities for all environments. Individual capabilities can be overridden by any of the\n  // specified browser environments in the `environments` array below as well. See\n  // https://code.google.com/p/selenium/wiki/DesiredCapabilities for standard Selenium capabilities and\n  // https://saucelabs.com/docs/additional-config#desired-capabilities for Sauce Labs capabilities.\n  // Note that the `build` capability will be filled in with the current commit ID from the Travis CI environment\n  // automatically\n  capabilities: {\n    'selenium-version': '2.38.0'\n  },\n\n  // Browsers to run integration testing against. Note that version numbers must be strings if used with Sauce\n  // OnDemand. Options that will be permutated are browserName, version, platform, and platformVersion; any other\n  // capabilities options specified for an environment will be copied as-is\n  environments: [{\n    browserName: 'internet explorer',\n    version: '10',\n    platform: 'Windows 8'\n  }, {\n    browserName: 'internet explorer',\n    version: '9',\n    platform: 'Windows 7'\n  }, {\n    browserName: 'firefox',\n    version: '23',\n    platform: ['Linux', 'Windows 7']\n  }, {\n    browserName: 'firefox',\n    version: '21',\n    platform: 'Mac 10.6'\n  }, {\n    browserName: 'chrome',\n    platform: ['Linux', 'Mac 10.8', 'Windows 7']\n  }, {\n    browserName: 'safari',\n    version: '6',\n    platform: 'Mac 10.8'\n  }],\n\n  // Maximum number of simultaneous integration tests that should be executed on the remote WebDriver service\n  maxConcurrency: 3,\n\n  // Name of the tunnel class to use for WebDriver tests\n  tunnel: 'SauceLabsTunnel',\n\n  // Connection information for the remote WebDriver service. If using Sauce Labs, keep your username and password\n  // in the SAUCE_USERNAME and SAUCE_ACCESS_KEY environment variables unless you are sure you will NEVER be\n  // publishing this configuration file somewhere\n  webdriver: {\n    host: 'localhost',\n    port: 4444\n  },\n\n  // The desired AMD loader to use when running unit tests (client.html/client.js). Omit to use the default Dojo\n  // loader\n  useLoader: {\n    'host-node': 'dojo/dojo',\n    'host-browser': 'node_modules/dojo/dojo.js'\n  },\n\n  // Configuration options for the module loader; any AMD configuration options supported by the Dojo loader can be\n  // used here\n  loader: {\n    // Packages that should be registered with the loader in each testing environment\n    packages:[]\n  },\n\n  // Non-functional test suite(s) to run in each browser\n  suites: [],\n\n  // A regular expression matching URLs to files that should not be included in code coverage analysis\n  excludeInstrumentation: /^tests\\//\n});\n```", "```py\npackages: [{\n  name: 'tests',\n  location: 'tests'\n}, {\n  name: 'app',\n  location: 'src/js'\n}, {\n  name: 'gis',\n  location: 'gis'\n}, {\n  name: 'esri',\n  location: 'esri'\n}, {\n  name: 'dgrid',\n  location: 'dgrid'\n}, {\n  name: 'put-selector',\n  location: 'put-selector'\n}, {\n  name: 'xstyle',\n  location: 'xstyle'\n}, {\n  name: 'dojo',\n  location: 'dojo'\n}, {\n  name: 'dojox',\n  location: 'dojox'\n}, {\n  name: 'dijit',\n  location: 'dijit'\n}, {\n  name: 'd3',\n  location: 'd3'\n}\n], \n…\n```", "```py\n…\n// Non-functional test suite(s) to run in each browser\n  suites: [\n  'tests/Census'\n],\n…\n```", "```py\nnpm install –g grunt\nnpm install –g grunt-cli\nnpm install –g bower\n\n```", "```py\nnpm install\n\n```", "```py\nnpm install intern-geezer\n\n```", "```py\nbower install\n\n```", "```py\ngrunt slurp\n\n```", "```py\ndefine([\n   'intern!object',\n   'intern/chai!assert',\n   'app/Census',\n   'esri/map',\n   'dojo/dom-construct',\n   'dojo/_base/window'\n], function(registerSuite, assert, Census, Map, domConstruct, win) {\n   //…\n});\n```", "```py\n…\nvar map, census;\n\nregisterSuite({\n  name: 'Census Widget',\n  // before the suite starts\n  setup:function () {},\n  // after all the tests have run\n  teardown: function () {},\n});\n…\n```", "```py\n…\nsetup: function () {\n  // create a map div in the body, load esri css, and create the map for our tests\n  domConstruct.place('<link rel=\"stylesheet\" type=\"text/css\" href=\"//js.arcgis.com/3.13/dijit/themes/claro/claro.css\">', win.doc.getElementsByTagName(\"head\")[0], 'last');\n\n  domConstruct.place('<link rel=\"stylesheet\" type=\"text/css\" href=\"//js.arcgis.com/3.13/esri/css/esri.css\">', win.doc.getElementsByTagName(\"head\")[0], 'last');\n\n  domConstruct.place('<div id=\"map\" style=\"width:300px;height:200px;\" class=\"claro\"><div id=\"census- widget\"></div></div>', win.body(), 'only');\n\n  map = new Map(\"map\", {\n    basemap: \"topo\",\n    center: [-122.45, 37.75],\n    zoom: 13,\n    sliderStyle: \"small\"\n  });\n\n  census = new Census({\n    map: map,\n    mapService: \"http://sampleserver6.arcgisonline.com/arcgis/rest/services/Census/MapServer/\"\n  }, \"census-widget\");\n},\n… \nteardown: function () {\n  map.destroy();\n},\n…\n```", "```py\n…\n'Test Census widget creation': function() {\n  assert.strictEqual(\n    census.baseClass, \n    \"y2k-census\", \n    \"census.baseClass should return a string 'y2k-census'\"\n  );\n},\n…\n```", "```py\n…\n'Test Census query for dropdown data': function () {\n\n  census.queryShapeAndData({\n  url: \"http://sampleserver6.arcgisonline.com/arcgis/rest/services/Census/MapServer/3\",\n  fields: [\"STATE_NAME\", \"STATE_FIPS\"],\n  where: \"1=1\",\n  }).then(function (featureSet) { \n  assert.strictEqual(\n      featureSet.features.length, \n      51, \n      \"There should be 51 states returned, including the District of Columbia\"\n    );\n  });\n},\n…\n```", "```py\n'Test Census Graphing Attributes': function () {\n\n  var ethnicAttributes = {\n    WHITE: 10,\n    BLACK: 20, \n    AMERI_ES: 12,\n    ASIAN: 11,\n    HAWN_PI: 4,\n    HISPANIC: 23,\n    OTHER: 7,\n    MULT_RACE: 17\n  };\n\n  var data = census.ethnicData(ethnicAttributes);\n\n  assert.strictEqual(\n    data.length, \n    8, \n    \"The translation from graphic attributes to d3-based data should have 8 attributes in the ethnicData function\"\n  );\n  assert.strictEqual(\n    data[4].name, \n    \"Hawaiian / Pacific Islander\", \n    \"The item in index 4 should have a name of Hawaiian / Pacific Islander data\"\n  );\n  assert.strictEqual(\n    data[5].population, \n    23, \n    \"Out of the Hispanic column, the data index of 5 should have a population of 23.\"\n  );\n}\n```"]