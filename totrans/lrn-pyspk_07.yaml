- en: Chapter 7. GraphFrames
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章. GraphFrames
- en: Graphs are an interesting way to solve data problems because graph structures
    are a more intuitive approach to many classes of data problems.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 图是解决数据问题的有趣方式，因为图结构是许多数据问题类别的更直观的方法。
- en: 'In this chapter, you will learn about:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将了解：
- en: Why use graphs?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么使用图？
- en: 'Understanding the classic graph problem: the flights dataset'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解经典图问题：航班数据集
- en: Understanding the graph vertices and edges
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解图顶点和边
- en: Simple queries
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单查询
- en: Using motif finding
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用基元发现
- en: Using breadth first search
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用广度优先搜索
- en: Using PageRank
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用PageRank
- en: Visualizing flights using D3
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用D3可视化航班
- en: 'Whether traversing social networks or restaurant recommendations, it is easier
    to understand these data problems within the context of graph structures: vertices,
    edges, and properties:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 无论是在社交网络中还是在餐厅推荐中，在图结构（顶点、边和属性）的背景下理解这些数据问题更容易：
- en: '![GraphFrames](img/B05793_07_01.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![GraphFrames](img/B05793_07_01.jpg)'
- en: For example, within the context of **social networks**, the *vertices* are the
    people while the *edges* are the connections between them. Within the context
    of **restaurant recommendations**, the vertices (for example) involve the location,
    cuisine type, and restaurants while the edges are the connections between them
    (for example, these three restaurants are in **Vancouver, BC**, but only two of
    them serve ramen).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在**社交网络**的背景下，**顶点**是人，而**边**是他们之间的连接。在**餐厅推荐**的背景下，顶点（例如）包括位置、菜系类型和餐厅，而边是他们之间的连接（例如，这三家餐厅都在**温哥华，不列颠哥伦比亚省**，但只有两家提供拉面）。
- en: 'While the two graphs are seemingly disconnected, you can in fact create a social
    network + restaurant recommendation graph based on the reviews of friends within
    a social circle, as noted in the following figure:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这两个图看起来是断开的，但实际上，你可以根据社交圈中朋友的评论创建一个社交网络 + 餐厅推荐图，如下面图所示：
- en: '![GraphFrames](img/B05793_07_02.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![GraphFrames](img/B05793_07_02.jpg)'
- en: 'For example, if **Isabella** wants to find a great ramen restaurant in Vancouver,
    traversing her friends'' reviews, she will most likely choose **Kintaro Ramen**,
    as both **Samantha** and **Juliette** have rated the restaurant favorably:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果**伊莎贝拉**想在温哥华找一家好的拉面餐厅，通过查看她朋友的评论，她很可能会选择**金太郎拉面**，因为**萨曼莎**和**朱丽叶特**都对该餐厅给出了好评：
- en: '![GraphFrames](img/B05793_07_03.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![GraphFrames](img/B05793_07_03.jpg)'
- en: 'Another classic graph problem is the analysis of flight data: airports are
    represented by *vertices* and flights between those airports are represented by
    *edges*. Also, there are numerous *properties* associated with these flights,
    including, but not limited to, departure delays, plane type, and carrier:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个经典的图问题是航班数据的分析：机场由**顶点**表示，而机场之间的航班由**边**表示。此外，与这些航班相关的属性众多，包括但不限于出发延误、飞机类型和航空公司：
- en: '![GraphFrames](img/B05793_07_04.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![GraphFrames](img/B05793_07_04.jpg)'
- en: In this chapter, we will use GraphFrames to quickly and easily analyze flight
    performance data organized in graph structures. Because we're using graph structures,
    we can easily ask many questions that are not as intuitive as tabular structures,
    such as finding structural motifs, airport ranking using PageRank, and shortest
    paths between cities. GraphFrames leverages the distribution and expression capabilities
    of the DataFrame API to both simplify your queries and leverage the performance
    optimizations of the Apache Spark SQL engine.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用GraphFrames快速轻松地分析以图结构组织的数据的航班性能数据。因为我们使用图结构，所以我们可以轻松地提出许多在表格结构中不那么直观的问题，例如找到结构基元、使用PageRank对机场进行排名以及城市之间的最短路径。GraphFrames利用DataFrame
    API的分布和表达式能力，既简化了查询，又利用了Apache Spark SQL引擎的性能优化。
- en: In addition, with GraphFrames, graph analysis is available in Python, Scala,
    and Java. Just as important, you can leverage your existing Apache Spark skills
    to solve graph problems (in addition to machine learning, streaming, and SQL)
    instead of making a paradigm shift to learn a new framework.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，使用GraphFrames，图分析在Python、Scala和Java中都是可用的。同样重要的是，你可以利用现有的Apache Spark技能来解决图问题（除了机器学习、流和SQL），而不是学习新框架进行范式转换。
- en: Introducing GraphFrames
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍GraphFrames
- en: 'GraphFrames utilizes the power of Apache Spark DataFrames to support general
    graph processing. Specifically, the vertices and edges are represented by DataFrames
    allowing us to store arbitrary data with each vertex and edge. While GraphFrames
    is similar to Spark''s GraphX library, there are some key differences, including:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: GraphFrames利用Apache Spark DataFrame的强大功能来支持通用图处理。具体来说，顶点和边由DataFrame表示，允许我们为每个顶点和边存储任意数据。虽然GraphFrames与Spark的GraphX库类似，但有一些关键区别，包括：
- en: GraphFrames leverage the performance optimizations and simplicity of the DataFrame
    API.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GraphFrames利用DataFrame API的性能优化和简洁性。
- en: By using the DataFrame API, GraphFrames now have Python, Java, and Scala APIs.
    GraphX is only accessible through Scala; now all its algorithms are available
    in Python and Java.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过使用DataFrame API，GraphFrames现在拥有Python、Java和Scala API。GraphX仅通过Scala访问；现在所有算法都可在Python和Java中访问。
- en: Note, at the time of writing, there was a bug preventing GraphFrames from working
    with Python3.x, hence we will be using Python2.x.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注意，在撰写本文时，存在一个错误阻止GraphFrames与Python3.x一起工作，因此我们将使用Python2.x。
- en: At the time of writing, GraphFrames is on version 0.3 and available as a Spark
    package ([http://spark-packages.org](http://spark-packages.org)) at [https://spark-packages.org/package/graphframes/graphframes](https://spark-packages.org/package/graphframes/graphframes).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，GraphFrames版本为0.3，作为Spark包在[http://spark-packages.org](http://spark-packages.org)的[https://spark-packages.org/package/graphframes/graphframes](https://spark-packages.org/package/graphframes/graphframes)处可用。
- en: Tip
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: For more information about GraphFrames, please refer to *Introducing GraphFra*
    *mes* at [https://databricks.com/blog/2016/03/03/introducing-graphframes.html](https://databricks.com/blog/2016/03/03/introducing-graphframes.html).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 有关GraphFrames的更多信息，请参阅[https://databricks.com/blog/2016/03/03/introducing-graphframes.html](https://databricks.com/blog/2016/03/03/introducing-graphframes.html)上的*GraphFra*
    *mes*介绍。
- en: Installing GraphFrames
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装GraphFrames
- en: If you are running your job from a Spark CLI (for example, `spark-shell, pyspark,
    spark-sql, spark-submit`), you can use the `–-packages` command, which will extract,
    compile, and execute the necessary code for you to use the GraphFrames package.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您从Spark CLI（例如，`spark-shell, pyspark, spark-sql, spark-submit`）运行作业，您可以使用`–-packages`命令，该命令将为您提取、编译和执行必要的代码，以便使用GraphFrames包。
- en: 'For example, to use the latest GraphFrames package (version 0.3) with Spark
    2.0 and Scala 2.11 with spark-shell, the command is:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要使用与Spark 2.0和Scala 2.11兼容的最新GraphFrames包（版本0.3）和spark-shell，命令如下：
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If you are using a notebook service, you may need to install the package first.
    For example, the following section shows the steps to install the GraphFrames
    library within the free Databricks Community Edition ([http://databricks.com/try-databricks](http://databricks.com/try-databricks)).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是笔记本服务，您可能需要先安装该包。例如，以下部分显示了在免费Databricks社区版([http://databricks.com/try-databricks](http://databricks.com/try-databricks))中安装GraphFrames库的步骤。
- en: Creating a library
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建库
- en: Within Databricks, you can create a library that is comprised of a Scala/Java
    JAR, Python Egg, or Maven Coordinate (including the Spark package).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在Databricks中，您可以使用Scala/Java JAR、Python Egg或Maven坐标（包括Spark包）创建库。
- en: 'To start, go to your **Workspace** within **databricks**, right-click the folder
    you want to create the library in (in this case, **flights**), click **Create**,
    and then click **Library**:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，请转到**databricks**中的**工作区**，右键单击您想要创建库的文件夹（在本例中为**flights**），点击**创建**，然后点击**库**：
- en: '![Creating a library](img/B05793_07_05.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![创建库](img/B05793_07_05.jpg)'
- en: 'In the **Create Library** dialog, choose within the **Source** dropdown, **Maven
    Coordinate** as noted in the following diagram:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在**创建库**对话框中，在**源**下拉菜单中选择，如以下图所示**Maven坐标**：
- en: '![Creating a library](img/B05793_07_06.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![创建库](img/B05793_07_06.jpg)'
- en: Tip
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Maven is a tool that is used to build and manage Java-based projects such as
    the GraphFrames project. Maven coordinates uniquely identify those projects (or
    dependencies or plug-ins) so you can quickly find the project within a Maven repository;
    for example, [https://mvnrepository.com/artifact/graphframes/graphframes](https://mvnrepository.com/artifact/graphframes/graphframes).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Maven是一种用于构建和管理基于Java的项目（如GraphFrames项目）的工具。Maven坐标唯一标识这些项目（或依赖项或插件），以便您可以在Maven仓库中快速找到项目；例如，[https://mvnrepository.com/artifact/graphframes/graphframes](https://mvnrepository.com/artifact/graphframes/graphframes)。
- en: From here, you can click the **Search Spark Packages and Maven Central** button
    and search for the GraphFrames package. Ensure that you match the GraphFrames
    version of Spark (for example, Spark 2.0) and Scala (for example, Scala 2.11)
    with your Spark cluster.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，您可以点击**搜索Spark包和Maven Central**按钮，搜索GraphFrames包。确保您匹配Spark（例如，Spark 2.0）和Scala（例如，Scala
    2.11）的GraphFrames版本与您的Spark集群相匹配。
- en: 'You can also enter the Maven coordinate for the GraphFrames Spark package if
    you already know it. For Spark 2.0 and Scala 2.11, enter the following coordinate:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经知道Maven坐标，您也可以输入GraphFrames Spark包的Maven坐标。对于Spark 2.0和Scala 2.11，输入以下坐标：
- en: '[PRE1]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Once entered, click on **Create Library**, as noted in the following screenshot:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 输入后，点击**创建库**，如以下截图所示：
- en: '![Creating a library](img/B05793_07_07.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![创建库](img/B05793_07_07.jpg)'
- en: 'Note that this is a one-time installation task for the GraphFrames Spark package
    (as part of a library). Once it is installed, you can by default automatically
    auto-attach the package to any Databricks cluster that you create:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这是GraphFrames Spark包的一次性安装任务（作为库的一部分）。一旦安装，您默认可以自动将包附加到您创建的任何Databricks集群：
- en: '![Creating a library](img/B05793_07_08.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![创建库](img/B05793_07_08.jpg)'
- en: Preparing your flights dataset
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备您的航班数据集
- en: 'For this flights sample scenario, we will make use of two sets of data:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个航班示例场景，我们将使用两组数据：
- en: '*Airline On-Time Performance and Causes of Flight Delays*: [[http://bit.ly/2ccJPPM](http://bit.ly/2ccJPPM)]
    This dataset contains scheduled and actual departure and arrival times, and delay
    causes as reported by US air carriers. The data is collected by the Office of
    Airline Information, **Bureau of Transportation Statistics** (**BTS**).'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*航空公司准点率与航班延误原因*：[[http://bit.ly/2ccJPPM](http://bit.ly/2ccJPPM)] 此数据集包含由美国航空公司报告的预定和实际起飞和到达时间，以及延误原因。数据由航空公司信息办公室，**运输统计局**（**BTS**）收集。'
- en: '*Open Flights: Airports and airline data*: [[http://openflights.org/data.html](http://openflights.org/data.html)]
    This dataset contains the list of US airport data including the IATA code, airport
    name, and airport location.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Open Flights：机场和航空公司数据*：[[http://openflights.org/data.html](http://openflights.org/data.html)]
    此数据集包含美国机场数据列表，包括IATA代码、机场名称和机场位置。'
- en: We will create two DataFrames – `airports` and `departureDelays`–which will
    make up our **vertices** and **edges** of our GraphFrame, respectively. We will
    be creating this flights sample application using Python.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建两个DataFrame – `airports`和`departureDelays` – 分别构成我们的GraphFrame的**顶点**和**边**。我们将使用Python创建这个航班示例应用程序。
- en: 'As we are using a Databricks notebook for our example, we can make use of the
    `/databricks-datasets/`location, which contains numerous sample datasets. You
    can also download the data from:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在这个示例中使用Databricks笔记本，我们可以使用`/databricks-datasets/`位置，其中包含许多样本数据集。您也可以从以下链接下载数据：
- en: '`depa``rtureDelays.csv`: [http://bit.ly/2ejPr8k](http://bit.ly/2ejPr8k)'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`departureDelays.csv`: [http://bit.ly/2ejPr8k](http://bit.ly/2ejPr8k)'
- en: '`airportCodes`: [http://bit.ly/2ePAdKT](http://bit.ly/2ePAdKT)'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`airportCodes`: [http://bit.ly/2ePAdKT](http://bit.ly/2ePAdKT)'
- en: 'In this example, we are creating two variables denoting the file paths for
    our Airports and Departure Delays data, respectively. Then we will load these
    datasets and create the respective Spark DataFrames; note for both of these files,
    we can easily infer the schema:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们创建了两个变量，分别表示机场和出发延误数据的文件路径。然后我们将加载这些数据集并创建相应的Spark DataFrame；注意对于这两个文件，我们可以轻松推断其模式：
- en: '[PRE2]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Once we loaded the `departureDelays` DataFrame, we also cache it so we can
    include some additional filtering of the data in a performant manner:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们加载了`departureDelays` DataFrame，我们也会将其缓存，这样我们就可以以高效的方式对数据进行一些额外的过滤：
- en: '[PRE3]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The preceding query allows us to build a distinct list with origin city IATA
    codes (for example, `Seattle = ''SEA'', San Francisco = ''SFO'', New York JFK
    = ''JFK''`, and so on). Next, we only include airports that had a trip occur within
    the `departureDelays` DataFrame:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '前面的查询使我们能够构建一个具有不同出发城市IATA代码的独立列表（例如，`西雅图 = ''SEA''，旧金山 = ''SFO''，纽约JFK = ''JFK''`等）。接下来，我们只包括在`departureDelays`
    DataFrame中发生旅行的机场： '
- en: '[PRE4]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'By building the distinct list of origin airport codes, we can build the airports
    DataFrame to contain only the airport codes that exist in the `departureDelays`
    dataset. The following code snippet generates a new DataFrame (`departureDelays_geo`)
    that is comprised of key attributes including date of flight, delays, distance,
    and airport information (origin, destination):'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 通过构建独特的出发机场代码列表，我们可以构建机场 DataFrame，只包含存在于 `departureDelays` 数据集中的机场代码。以下代码片段生成一个新的
    DataFrame (`departureDelays_geo`)，它包含包括航班日期、延误、距离和机场信息（出发地、目的地）在内的关键属性：
- en: '[PRE5]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To take a quick peek into this data, you can run the `show` method as shown
    here:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 要快速查看这些数据，您可以运行此处所示的方法 `show`：
- en: '[PRE6]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![Preparing your flights dataset](img/B05793_07_09.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![准备您的航班数据集](img/B05793_07_09.jpg)'
- en: Building the graph
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建图
- en: 'Now that we''ve imported our data, let''s build our graph. To do this, we''re
    going to build the structure for our vertices and edges. At the time of writing,
    GraphFrames requires a specific naming convention for vertices and edges:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经导入了数据，让我们构建我们的图。为此，我们将构建顶点和边的结构。在撰写本文时，GraphFrames 需要顶点和边具有特定的命名约定：
- en: The column representing the *vertices* needs to have the name of`id`. In our
    case, the vertices of our flight data are the airports. Therefore, we will need
    to rename the IATA airport code to `id` in our `airports` DataFrame.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代表 *顶点* 的列需要命名为 `id`。在我们的案例中，飞行数据的顶点是机场。因此，我们需要在 `airports` DataFrame 中将 IATA
    机场代码重命名为 `id`。
- en: The columns representing the *edges* need to have a source (`src`) and destination
    (`dst`). For our flight data, the edges are the flights, therefore the `src` and
    `dst` are the origin and destination columns from the `departureDelays_geo` DataFrame.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代表 *边* 的列需要具有源 (`src`) 和目标 (`dst`)。在我们的飞行数据中，边是航班，因此 `src` 和 `dst` 是来自 `departureDelays_geo`
    DataFrame 的出发地和目的地列。
- en: 'To simplify the edges for our graph, we will create the `tripEdges` DataFrame
    with a subset of the columns available within the `departureDelays_Geo` DataFrame.
    As well, we created a `tripVertices` DataFrame that simply renames the `IATA`
    column to `id` to match the GraphFrame naming convention:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化我们的图边，我们将创建一个名为 `tripEdges` 的 DataFrame，它包含 `departureDelays_Geo` DataFrame
    中的一部分列。此外，我们还创建了一个名为 `tripVertices` 的 DataFrame，它只是将 `IATA` 列重命名为 `id` 以匹配 GraphFrame
    命名约定：
- en: '[PRE7]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Within Databricks, you can query the data using the `display` command. For
    example, to view the `tripEdges` DataFrame, the command is as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Databricks 中，您可以使用 `display` 命令查询数据。例如，要查看 `tripEdges` DataFrame，命令如下：
- en: '[PRE8]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The output is as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Building the graph](img/B05793_07_10.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![构建图](img/B05793_07_10.jpg)'
- en: 'Now that we have the two DataFrames, we can create a GraphFrame using the `GraphFrame`
    command:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了这两个 DataFrame，我们可以使用 `GraphFrame` 命令创建一个 GraphFrame：
- en: '[PRE9]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Executing simple queries
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行简单查询
- en: Let's start with a set of simple graph queries to understand flight performance
    and departure delays.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一组简单的图查询开始，以了解飞行性能和出发延误。
- en: Determining the number of airports and trips
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 确定机场和航班数量
- en: 'For example, to determine the number of airports and trips, you can run the
    following commands:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要确定机场和航班的数量，您可以运行以下命令：
- en: '[PRE10]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'As you can see from the results, there are 279 airports with 1.36 million trips:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从结果中看到的，有 279 个机场，有 136 万次航班：
- en: '![Determining the number of airports and trips](img/B05793_07_11.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![确定机场和航班数量](img/B05793_07_11.jpg)'
- en: Determining the longest delay in this dataset
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 确定该数据集中的最长延迟
- en: 'To determine the longest delayed flight in the dataset, you can run the following
    query with the result of 1,642 minutes (that''s more than 27 hours!):'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 要确定数据集中最长延误的航班，您可以运行以下查询，结果为 1,642 分钟（即超过 27 小时！）：
- en: '[PRE11]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Determining the number of delayed versus on-time/early flights
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 确定延误航班与准点/提前航班数量
- en: 'To determine the number of delayed versus on-time (or early) flights, you can
    run the following queries:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 要确定延误航班与准点（或提前）航班的数量，您可以运行以下查询：
- en: '[PRE12]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: with the results nothing that almost 43% of the flights were delayed!
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 结果显示，几乎 43% 的航班延误了！
- en: '![Determining the number of delayed versus on-time/early flights](img/B05793_07_12.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![确定延误航班与准点/提前航班数量](img/B05793_07_12.jpg)'
- en: What flights departing Seattle are most likely to have significant delays?
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从西雅图出发的航班中，哪些最有可能出现重大延误？
- en: 'Digging further in this data, let''s find out the top five destinations for
    flights departing from Seattle that are most likely to have significant delays.
    This can be achieved through the following query:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些数据中进一步挖掘，让我们找出从西雅图出发的航班中，最有可能有显著延误的前五大目的地。这可以通过以下查询实现：
- en: '[PRE13]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'As you can see in the following results: Philadelphia (PHL), Colorado Springs
    (COS), Fresno (FAT), Long Beach (LGB), and Washington D.C (IAD) are the top five
    cities with flights delayed originating from Seattle:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在以下结果中可以看到：费城（PHL）、科罗拉多斯普林斯（COS）、弗雷斯诺（FAT）、长滩（LGB）和华盛顿特区（IAD）是从西雅图出发的航班延误最严重的五大城市：
- en: '![What flights departing Seattle are most likely to have significant delays?](img/B05793_07_13.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![哪些从西雅图出发的航班最有可能有显著的延误？](img/B05793_07_13.jpg)'
- en: What states tend to have significant delays departing from Seattle?
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 哪些州从西雅图出发往往会有显著的延误？
- en: 'Let''s find which states have the longest cumulative delays (with individual
    delays > 100 minutes) originating from Seattle. This time we will use the `display`
    command to review the data:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们找出哪些州从西雅图出发的累积延误最长（个别延误超过100分钟）。这次我们将使用`display`命令来查看数据：
- en: '[PRE14]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![What states tend to have significant delays departing from Seattle?](img/B05793_07_14.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![哪些州从西雅图出发往往会有显著的延误？](img/B05793_07_14.jpg)'
- en: 'Using the Databricks `display` command, we can also quickly change from this
    table view to a map view of the data. As can be seen in the following figure,
    the state with the most cumulative delays originating from Seattle (in this dataset)
    is California:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Databricks的`display`命令，我们也可以快速将数据从表格视图转换为地图视图。如图所示，从西雅图出发（在此数据集中）累积延误最多的州是加利福尼亚州：
- en: '![What states tend to have significant delays departing from Seattle?](img/B05793_07_15.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![哪些州从西雅图出发往往会有显著的延误？](img/B05793_07_15.jpg)'
- en: Understanding vertex degrees
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解顶点度数
- en: 'Within the context of graph theory, the degrees around a vertex are the number
    of edges around the vertex. In our *flights* example, the degrees are then the
    total number of edges (that is, flights) to the vertex (that is, airports). Therefore,
    if we were to obtain the top 20 vertex degrees (in descending order) from our
    graph, then we would be asking for the top 20 busiest airports (most flights in
    and out) from our graph. This can be quickly determined using the following query:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在图论背景下，顶点周围的度数是围绕顶点的边的数量。在我们的*航班*示例中，度数就是到达顶点（即机场）的总边数（即航班）。因此，如果我们从我们的图中获取前20个顶点度数（按降序排列），那么我们就是在请求前20个最繁忙的机场（进出航班最多）的查询。这可以通过以下查询快速确定：
- en: '[PRE15]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Because we''re using the `display` command, we can quickly view a bar graph
    of this data:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们使用了`display`命令，所以我们可以快速查看此数据的条形图：
- en: '![Understanding vertex degrees](img/B05793_07_16.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![理解顶点度数](img/B05793_07_16.jpg)'
- en: 'Diving into more details, here are the top 20 `inDegrees` (that is, incoming
    flights):'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 深入更多细节，以下是前20个`inDegrees`（即进入航班）：
- en: '[PRE16]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![Understanding vertex degrees](img/B05793_07_17.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![理解顶点度数](img/B05793_07_17.jpg)'
- en: 'While here are the top 20 `outDegrees` (that is, outgoing flights):'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这里有前20个`outDegrees`（即出发航班）：
- en: '[PRE17]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '![Understanding vertex degrees](img/B05793_07_18.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![理解顶点度数](img/B05793_07_18.jpg)'
- en: Interestingly, while the top 10 airports (Atlanta/ATL to Charlotte/CLT) are
    ranked the same for incoming and outgoing flights, the ranks of the next 10 airports
    change (for example, Seattle/SEA is 17th for incoming flights, but 18th for outgoing).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，尽管前10个机场（亚特兰大/ATL到夏洛特/CLT）在进出航班中的排名相同，但下一个10个机场的排名发生了变化（例如，西雅图/SEA在进出航班中分别排名第17和第18）。
- en: Determining the top transfer airports
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 确定顶级中转机场
- en: An extension of understanding vertex degrees for airports is to determine the
    top transfer airports. Many airports are used as transfer points instead of being
    the final destination. An easy way to calculate this is by calculating the ratio
    of `inDegrees` (the number of flights to the airport) and / `outDegrees` (the
    number of flights leaving the airport). Values close to `1` may indicate many
    transfers, whereas values <`1` indicate many outgoing flights and values >`1`
    indicate many incoming flights.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 对于机场理解顶点度数的扩展是确定顶级中转机场。许多机场被用作中转点而不是最终目的地。计算这个的一个简单方法是计算`inDegrees`（飞往机场的航班数量）和`outDegrees`（离开机场的航班数量）的比率。接近`1`的值可能表示许多中转，而小于`1`的值表示许多出发航班，大于`1`的值表示许多到达航班。
- en: 'Note that this is a simple calculation that does not consider timing or scheduling
    of flights, just the overall aggregate number within the dataset:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这是一个简单的计算，不考虑航班的时刻或调度，只是数据集中的整体汇总数：
- en: '[PRE18]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The output of this query is a bar chart of the top 10 transfer city airports
    (that is, hub airports):'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 此查询的输出是顶级 10 个中转城市机场（即枢纽机场）的条形图：
- en: '![Determining the top transfer airports](img/B05793_07_22.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![确定顶级中转机场](img/B05793_07_22.jpg)'
- en: This makes sense since these airports are major hubs for national airlines (for
    example, Delta uses **Minneapolis** and **Salt Lake City** as its hub, Frontier
    uses **Denver**, American uses **Dallas** and **Phoenix**, United uses **Houston**,
    **Chicago**, and **San Francisco**, and Hawaiian Airlines uses **Kahului** and
    **Honolulu** as its hubs).
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这是有意义的，因为这些机场是主要的国家航空公司枢纽（例如，达美航空使用明尼阿波利斯和盐湖城作为其枢纽，边疆航空使用丹佛，美国航空使用达拉斯和凤凰城，联合航空使用休斯顿、芝加哥和旧金山，夏威夷航空使用卡胡鲁伊和檀香山作为其枢纽）。
- en: Understanding motifs
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 motifs
- en: To easily understand the complex relationship of city airports and the flights
    between each other, we can use `motifs` to find patterns of airports (for example,
    vertices) connected by flights (that is, edges). The result is a DataFrame in
    which the column names are given by the motif keys. Note that motif finding is
    one of the new graph algorithms supported as part of GraphFrames.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更容易理解城市机场之间以及彼此之间的复杂关系，我们可以使用 `motifs` 来找到由航班连接的机场（例如，顶点）的模式。结果是包含按 motif
    键命名的列的 DataFrame。请注意，motif 寻找是 GraphFrames 作为其一部分支持的新图算法之一。
- en: 'For example, let''s determine the delays that are due to **San Francisco International
    Airport** (**SFO**):'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，让我们确定由于 **旧金山国际机场**（**SFO**）造成的延误：
- en: '[PRE19]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Breaking down the preceding query, the `(x)` represents the vertex (that is,
    airport) while the `[xy]` represents the edge (that is, flights between airports).
    Therefore, to determine the delays that are due to SFO, use the following:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 将前面的查询分解，`(x)` 表示顶点（即机场），而 `[xy]` 表示边（即机场之间的航班）。因此，要确定由于旧金山国际机场（SFO）造成的延误，请使用以下查询：
- en: The vertex `(b)` represents the airport in the middle (that is, SFO)
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 顶点 `(b)` 表示中间机场（即 SFO）
- en: The vertex`(a)`represents the origin airport (within the dataset)
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 顶点 `(a)` 表示原始机场（在数据集中）
- en: The vertex `(c)` represents the destination airport (within the dataset)
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 顶点 `(c)` 表示目的地机场（在数据集中）
- en: The edge `[ab]` represents the flight between `(a)` (that is, origin) and `(b)`
    (that is, SFO)
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 边 `[ab]` 表示 `(a)`（即原始）和 `(b)`（即 SFO）之间的航班
- en: The edge `[bc]` represents the flight between `(b)` (that is, SFO) and `(c)`
    (that is, destination)
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 边 `[bc]` 表示 `(b)`（即 SFO）和 `(c)`（即目的地）之间的航班
- en: 'Within the `filter` statement, we put in some rudimentary constraints (note
    that this is an over simplistic representation of flight paths):'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `filter` 语句中，我们放入了一些基本的约束（请注意，这是航班路径的过于简化的表示）：
- en: '`b.id = ''SFO''` denotes that the middle vertex `(b)` is limited to just SFO
    airport'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`b.id = ''SFO''` 表示中间顶点 `(b)` 仅限于 SFO 机场'
- en: '`(ab.delay > 500 or bc.delay > 500)` denotes that we are limited to flights
    that have delays greater than 500 minutes'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(ab.delay > 500 or bc.delay > 500)` 表示我们仅限于延误超过 500 分钟的航班'
- en: '`(bc.tripid > ab.tripid and bc.tripid < ab.tripid + 10000)` denotes that the
    `(ab)` flight must be before the `(bc)` trip and within the same day. The `tripid`
    was derived from the date time, thus explaining why it could be simplified this
    way'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(bc.tripid > ab.tripid and bc.tripid < ab.tripid + 10000)` 表示 `(ab)` 航班必须在
    `(bc)` 航班之前，并且在同一天内。`tripid` 是从日期时间派生出来的，因此解释了为什么可以以这种方式简化'
- en: 'The output of this query is noted in the following figure:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 此查询的输出在以下图中注明：
- en: '![Understanding motifs](img/B05793_07_19.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![理解 motifs](img/B05793_07_19.jpg)'
- en: 'The following is a simplified abridged subset from this query where the columns
    are the respective motif keys:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是从该查询中提取的简化子集，其中列是相应的 motif 键：
- en: '| a | ab | b | bc | c |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| a | ab | b | bc | c |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| `Houston (IAH)` | `IAH -> SFO (-4)``[1011126]` | `San Francisco (SFO)` |
    `SFO -> JFK (536)``[1021507]` | `New York (JFK)` |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| `休斯顿 (IAH)` | `IAH -> SFO (-4)``[1011126]` | `旧金山 (SFO)` | `SFO -> 纽约肯尼迪机场
    (JFK) (536)``[1021507]` | `纽约 (JFK)` |'
- en: '| `Tuscon (TUS)` | `TUS -> SFO (-5)``[1011126]` | `San Francisco (SFO)` | `SFO
    -> JFK (536)``[1021507]` | `New York (JFK)` |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| `图森 (TUS)` | `TUS -> SFO (-5)``[1011126]` | `旧金山 (SFO)` | `SFO -> 纽约肯尼迪机场
    (JFK) (536)``[1021507]` | `纽约 (JFK)` |'
- en: Referring to the TUS > SFO > JFK flight, you will notice that while the flight
    from Tuscon to San Francisco departed 5 minutes early, the flight from San Francisco
    to New York JFK was delayed by 536 minutes.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 参考TUS > SFO > JFK航班，你会发现，虽然图森到旧金山的航班提前了5分钟起飞，但旧金山到纽约JFK的航班延误了536分钟。
- en: By using motif finding, you can easily search for structural patterns in your
    graph; by using GraphFrames, you are using the power and speed of DataFrames to
    distribute and perform your query.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用模式发现，你可以轻松地在图中搜索结构模式；通过使用GraphFrames，你正在利用DataFrames的强大功能和速度来分发和执行你的查询。
- en: Determining airport ranking using PageRank
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用PageRank确定机场排名
- en: 'Because GraphFrames is built on top of GraphX, there are several algorithms
    that we can immediately leverage. PageRank was popularized by the Google Search
    Engine and created by Larry Page. To quote Wikipedia:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 因为GraphFrames建立在GraphX之上，所以我们可以立即利用几个算法。PageRank是由Google搜索引擎普及并由拉里·佩奇创造的。引用维基百科：
- en: '"PageRank works by counting the number and quality of links to a page to determine
    a rough estimate of how important the website is. The underlying assumption is
    that more important websites are likely to receive more links from other websites."'
  id: totrans-151
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '"PageRank通过计算指向一个页面的链接数量和质量，以确定一个粗略的估计，即该网站的重要性。其基本假设是，更重要的网站更有可能从其他网站获得更多链接。"'
- en: While the preceding example refers to web pages, this concept readily applies
    to any graph structure whether it is created from web pages, bike stations, or
    airports. Yet the interface via GraphFrames is as simple as calling a method.
    `GraphFrames.PageRank` will return the PageRank results as a new column appended
    to the *vertices* DataFrame to simplify our downstream analysis.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然前面的例子提到了网页，但这个概念同样适用于任何图结构，无论它是从网页、自行车站还是机场创建的。然而，通过GraphFrames的接口调用方法非常简单。`GraphFrames.PageRank`将返回PageRank结果，作为附加到*vertices*
    DataFrame的新列，以简化我们的下游分析。
- en: 'As there are many flights and connections through the various airports included
    in this dataset, we can use the PageRank algorithm to have Spark traverse the
    graph iteratively to compute a rough estimate of how important each airport is:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 由于数据集中包含了众多机场的航班和连接，我们可以使用PageRank算法让Spark迭代遍历图，以计算每个机场重要性的粗略估计：
- en: '[PRE20]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Note that `resetProbability = 0.15` represents the probability of resetting
    to a random vertex (this is the default value) while `maxIter = 5` is a set number
    of iterations.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`resetProbability = 0.15`表示重置到随机顶点的概率（这是默认值），而`maxIter = 5`是一个固定的迭代次数。
- en: Tip
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: For more information on PageRank parameters, please refer to Wikipedia > Page
    Rank at [https://en.wikipedia.org/wiki/PageRank](https://en.wikipedia.org/wiki/PageRank).
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于PageRank参数的信息，请参考维基百科 > Page Rank [https://en.wikipedia.org/wiki/PageRank](https://en.wikipedia.org/wiki/PageRank)。
- en: 'The results of the `PageRank` are noted in the following bar graph:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: PageRank的结果如下所示：
- en: '![Determining airport ranking using PageRank](img/B05793_07_20.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![使用PageRank确定机场排名](img/B05793_07_20.jpg)'
- en: In terms of airport ranking, the `PageRank` algorithm has determined that ATL
    (Hartsfield-Jackson Atlanta International Airport) is the most important airport
    in the United States. This observation makes sense as ATL is not only the busiest
    airport in the United States ([http://bit.ly/2eTGHs4](http://bit.ly/2eTGHs4)),
    but it is also the busiest airport in the world (2000-2015) ([http://bit.ly/2eTGDsy](http://bit.ly/2eTGDsy)).
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在机场排名方面，`PageRank`算法确定ATL（哈茨菲尔德-杰克逊亚特兰大国际机场）是美国最重要的机场。这一观察结果是合理的，因为ATL不仅是美国最繁忙的机场([http://bit.ly/2eTGHs4](http://bit.ly/2eTGHs4))，也是2000-2015年世界上最繁忙的机场([http://bit.ly/2eTGDsy](http://bit.ly/2eTGDsy))。
- en: Determining the most popular non-stop flights
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 确定最受欢迎的非直飞航班
- en: 'Expanding upon our `tripGraph` GraphFrame, the following query will allow us
    to find the most popular non-stop flights in the US (for this dataset):'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`tripGraph` GraphFrame的基础上进行扩展，以下查询将允许我们找到美国最受欢迎的非直飞航班（对于这个数据集）：
- en: '[PRE21]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Note, while we are using the `delay` column, we''re just actually doing a `count`
    of the number of trips. Here''s the output:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，虽然我们使用了`delay`列，但我们实际上只是在计算行程数量。以下是输出结果：
- en: '![Determining the most popular non-stop flights](img/B05793_07_21.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![确定最受欢迎的非直飞航班](img/B05793_07_21.jpg)'
- en: As can be observed from this query, the two most frequent non-stop flights are
    between LAX (Los Angeles) and SFO (San Francisco). The fact that these flights
    are so frequent indicates their importance in the airline market. As noted in
    the New York Times article from April 4, 2016, *Alaska Air Sees Virgin America
    as Key to West Coast* ([http://nyti.ms/2ea1uZR](http://nyti.ms/2ea1uZR)), acquiring
    slots at these two airports was one of the reasons why Alaska Airlines purchased
    Virgin Airlines. Graphs are not just fun but also contain potentially powerful
    business insight!
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个查询中可以看出，最频繁的非直飞航班是洛杉矶（LAX）和旧金山（SFO）之间的航班。这些航班如此频繁的事实表明它们在航空市场中的重要性。正如2016年4月4日的《纽约时报》文章中提到的，*阿拉斯加航空视维珍美国航空为西海岸的关键*
    ([http://nyti.ms/2ea1uZR](http://nyti.ms/2ea1uZR))，在这些两个机场获得航班时刻表是阿拉斯加航空公司收购维珍航空的原因之一。图表不仅有趣，而且可能包含潜在的商业洞察力！
- en: Using Breadth-First Search
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用广度优先搜索
- en: 'The **Breadth-first search** (**BFS**) is a new algorithm as part of GraphFrames
    that finds the shortest path from one set of vertices to another. In this section,
    we will use BFS to traverse our `tripGraph` to quickly find the desired vertices
    (that is, airports) and edges (that is, flights). Let''s try to find the shortest
    number of connections between cities based on the dataset. Note that these examples
    do not consider time or distance, just hops between cities. For example, to find
    the number of direct flights between Seattle and San Francisco, you can run the
    following query:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '**广度优先搜索**（**BFS**）是GraphFrames的一部分新算法，它可以从一组顶点找到另一组顶点的最短路径。在本节中，我们将使用BFS遍历我们的`tripGraph`，快速找到所需的顶点（即机场）和边（即航班）。让我们尝试根据数据集找到城市之间最短连接数。请注意，这些示例不考虑时间或距离，只是城市之间的跳数。例如，要找到西雅图和旧金山之间的直飞航班数量，您可以运行以下查询：'
- en: '[PRE22]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '`fromExpr` and `toExpr` are the expressions indicating the origin and destination
    airports (that is, SEA and SFO, respectively). The `maxPathLength = 1` indicates
    that we only want one edge between the two vertices, that is, a non-stop flight
    between Seattle and San Francisco. As noted in the following results, there are
    many direct flights between Seattle and San Francisco:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '`fromExpr`和`toExpr`是表示起点和目的地机场的表达式（即SEA和SFO）。`maxPathLength = 1`表示我们只想在两个顶点之间有一个边，即西雅图和旧金山之间的直飞航班。正如以下结果所示，西雅图和旧金山之间有大量的直飞航班：'
- en: '![Using Breadth-First Search](img/B05793_07_23.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![使用广度优先搜索](img/B05793_07_23.jpg)'
- en: 'But how about if we want to determine the number of direct flights between
    San Francisco and Buffalo? Running the following query will note that there are
    no results, that is, no direct flights between the two cities:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果我们想确定旧金山和布法罗之间的直飞航班数量呢？运行以下查询将显示没有结果，也就是说，两个城市之间没有直飞航班：
- en: '[PRE23]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Once we modify the preceding query to `maxPathLength = 2`, that is, one layover,
    then you will see a lot more flight options:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们将前面的查询修改为 `maxPathLength = 2`，即一次转机，那么您将看到更多的航班选择：
- en: '[PRE24]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The following table provides an abridged version of the output from this query:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 下表提供了此查询输出的简略版本：
- en: '| From | Layover | To |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| 从 | 转机 | 到 |'
- en: '| --- | --- | --- |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `SFO` | **MSP** (**Minneapolis**) | `BUF` |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| `SFO` | **MSP** (**明尼阿波利斯**) | `BUF` |'
- en: '| `SFO` | **EWR** (**Newark**) | `BUF` |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| `SFO` | **EWR** (**纽瓦克**) | `BUF` |'
- en: '| `SFO` | **JFK** (**New York**) | `BUF` |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| `SFO` | **JFK** (**纽约**) | `BUF` |'
- en: '| `SFO` | **ORD** (**Chicago**) | `BUF` |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| `SFO` | **ORD** (**芝加哥**) | `BUF` |'
- en: '| `SFO` | **ATL** (**Atlanta**) | `BUF` |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| `SFO` | **ATL** (**亚特兰大**) | `BUF` |'
- en: '| `SFO` | **LAS** (**Las Vegas**) | `BUF` |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| `SFO` | **LAS** (**拉斯维加斯**) | `BUF` |'
- en: '| `SFO` | **BOS** (**Boston**) | `BUF` |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| `SFO` | **BOS** (**波士顿**) | `BUF` |'
- en: 'But now that I have my list of airports, how can I determine which layover
    airports are more popular between SFO and BUF? To determine this, you can now
    run the following query:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 但现在我已经有了机场列表，我该如何确定哪些转机机场在SFO和BUF之间更受欢迎？为了确定这一点，您现在可以运行以下查询：
- en: '[PRE25]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The output is shown in the following bar chart:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的条形图显示了输出结果：
- en: '![Using Breadth-First Search](img/B05793_07_26.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![使用广度优先搜索](img/B05793_07_26.jpg)'
- en: Visualizing flights using D3
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用D3可视化航班
- en: To get a powerful and fun visualization of the flight paths and connections
    in this dataset, we can leverage the Airports D3 visualization ([https://mbostock.github.io/d3/talk/20111116/airports.html](https://mbostock.github.io/d3/talk/20111116/airports.html))
    within our Databricks notebook. By connecting our GraphFrames, DataFrames, and
    D3 visualizations, we can visualize the scope of all the flight connections as
    noted for all on-time or early departing flights within this dataset.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取此数据集中航班路径和连接的强大且有趣的可视化，我们可以在我们的 Databricks 笔记本中使用 Airports D3 可视化 ([https://mbostock.github.io/d3/talk/20111116/airports.html](https://mbostock.github.io/d3/talk/20111116/airports.html))。通过连接我们的
    GraphFrames、DataFrames 和 D3 可视化，我们可以可视化所有航班连接的范围，正如数据集中所有准时或提前起飞的航班所注明的。
- en: The blue circles represent the vertices (that is, airports) where the size of
    the circle represents the number of edges (that is, flights) in and out of those
    airports. The black lines are the edges themselves (that is, flights) and their
    respective connections to the other vertices (that is, airports). Note for any
    edges that go offscreen, they are representing vertices (that is, airports) in
    the states of Hawaii and Alaska.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 蓝色圆圈代表顶点（即机场），圆圈的大小代表进出这些机场的边的数量。黑色线条是边本身（即航班）以及它们与其他顶点（即机场）的相应连接。注意，对于超出屏幕的任何边，它们代表夏威夷和阿拉斯加州的顶点（即机场）。
- en: 'For this to work, we first create a `scala` package called `d3a` that is embedded
    in our notebook (you can download it from here: [http://bit.ly/2kPkXkc](https://github.com/drabastomek/learningPySpark/blob/master/Chapter08/LearningPySpark_Chapter08.ipynb)).
    Because we''re using Databricks notebooks, we can make `Scala` calls within our
    PySpark notebook:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这可行，我们首先创建一个名为 `d3a` 的 `scala` 包，该包嵌入在我们的笔记本中（你可以从这里下载：[http://bit.ly/2kPkXkc](https://github.com/drabastomek/learningPySpark/blob/master/Chapter08/LearningPySpark_Chapter08.ipynb))。因为我们使用
    Databricks 笔记本，我们可以在 PySpark 笔记本中调用 `Scala`：
- en: '[PRE26]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The results of the preceding query for on-time and early arrivals flights are
    visualized in the following screenshot:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个查询的准时和提前到达航班的结果显示在下述屏幕截图：
- en: '![Visualizing flights using D3](img/B05793_07_24.jpg)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![使用 D3 可视化航班](img/B05793_07_24.jpg)'
- en: 'You can hover over the airports (blue circle, vertex) in the airports D3 visualization
    where the lines are the edges (flights). The preceding visualization is a snapshot
    when hovering over Seattle (SEA) airport; while the following visualization is
    a snapshot when hovering over Los Angeles (LAX) airport:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在机场 D3 可视化中悬停于机场（蓝色圆圈，顶点）上，其中线条代表边（航班）。前一个可视化是悬停在西雅图（SEA）机场时的快照；而下一个可视化是悬停在洛杉矶（LAX）机场时的快照：
- en: '![Visualizing flights using D3](img/B05793_07_25.jpg)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![使用 D3 可视化航班](img/B05793_07_25.jpg)'
- en: Summary
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: As you can see in this chapter, you can easily perform a lot of powerful data
    analysis by executing queries against graph structures. With GraphFrames, you
    can leverage the power, simplicity, and performance of the DataFrame API against
    your graph problems.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 正如本章所示，你可以通过针对图结构执行查询轻松执行大量强大的数据分析。使用 GraphFrames，你可以利用 DataFrame API 的强大、简单和性能来解决你的图问题。
- en: 'For more information on GraphFrames, please refer to the following resources:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 GraphFrames 的更多信息，请参阅以下资源：
- en: '*Introducing GraphFrames* ([http://bit.ly/2dBPhKn](http://bit.ly/2dBPhKn))'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*介绍 GraphFrames* ([http://bit.ly/2dBPhKn](http://bit.ly/2dBPhKn))'
- en: '*On-Time Flight Performance with GraphFrames for Apache Spark* ([http://bit.ly/2c804ZD](http://bit.ly/2c804ZD))'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Apache Spark 中的 GraphFrames 准时航班性能* ([http://bit.ly/2c804ZD](http://bit.ly/2c804ZD))'
- en: '*On-Time Flight Performance with GraphFrames for Apache Spark (Spark 2.0) Notebook*
    ([http://bit.ly/2kPkXkc](https://github.com/drabastomek/learningPySpark/blob/master/Chapter08/LearningPySpark_Chapter08.ipynb))'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Apache Spark（Spark 2.0）中的 GraphFrames 准时航班性能笔记本* ([http://bit.ly/2kPkXkc](https://github.com/drabastomek/learningPySpark/blob/master/Chapter08/LearningPySpark_Chapter08.ipynb))'
- en: '*GraphFrames Overview* ([http://graphframes.github.io/](http://graphframes.github.io/))'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*GraphFrames 概述* ([http://graphframes.github.io/](http://graphframes.github.io/))'
- en: '*Pygraphframes documentation* ([http://graphframes.github.io/api/python/graphframes.html](http://graphframes.github.io/api/python/graphframes.html))'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Pygraphframes 文档* ([http://graphframes.github.io/api/python/graphframes.html](http://graphframes.github.io/api/python/graphframes.html))'
- en: '*GraphX Programming Guide* ([http://spark.apache.org/docs/latest/graphx-programming-guide.html](http://spark.apache.org/docs/latest/graphx-programming-guide.html))'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*GraphX 编程指南* ([http://spark.apache.org/docs/latest/graphx-programming-guide.html](http://spark.apache.org/docs/latest/graphx-programming-guide.html))'
- en: In the next chapter, we will expand our PySpark horizon into the area of Deep
    Learning with the focus on TensorFlow and TensorFrames.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将扩展我们的 PySpark 视野，进入深度学习领域，重点关注 TensorFlow 和 TensorFrames。
