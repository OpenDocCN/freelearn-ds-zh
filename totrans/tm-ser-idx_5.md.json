["```py\n$ ./accessSplit.py -s 8 -c 32 -t 500 -w 16 500k.gz\nMax Cardinality: 32 Segments: 8 Sliding Window: 16 Threshold: 500 Default Promotion: False\nNumber of splits: 1376\nNumber of subsequence accesses: 2776741\n```", "```py\n$ ./accessSplit.py -s 8 -c 32 -t 500 -w 256 500k.gz\nMax Cardinality: 32 Segments: 8 Sliding Window: 256 Threshold: 500 Default Promotion: False\nNumber of splits: 4234\nNumber of subsequence accesses: 10691624\n```", "```py\n$ ./accessSplit.py -s 8 -c 32 -t 500 -w 1024 500k.gz\nMax Cardinality: 32 Segments: 8 Sliding Window: 1024 Threshold: 500 Default Promotion: False\nNumber of splits: 5983\nNumber of subsequence accesses: 15403024\n```", "```py\n$ ./accessSplit.py -s 8 -c 32 -t 500 -w 4096 500k.gz\nMax Cardinality: 32 Segments: 8 Sliding Window: 4096 Threshold: 500 Default Promotion: False\nOVERFLOW: 10000_10000_01111_01111_01111_10000_10000_01111\nNumber of splits: 6480\nNumber of subsequence accesses: 18537820\n```", "```py\n$ ./accessSplit.py -s 8 -c 32 -t 500 -w 16384 500k.gz\nMax Cardinality: 32 Segments: 8 Sliding Window: 16384 Threshold: 500 Default Promotion: False\nOVERFLOW: 01111_10000_10000_01111_10000_01111_10000_01111\nNumber of splits: 6996\nNumber of subsequence accesses: 19201125\n```", "```py\ndef createISAX(file, w, s):\n    # Read Sequence as Pandas\n    ts = pd.read_csv(file, names=['values'],\n        compression='gzip').astype(np.float64)\n    # Convert to NParray\n    ts_numpy = ts.to_numpy()\n    length = len(ts_numpy)\n    ISAX = isax.iSAX()\n    ISAX.length = length\n    # Split sequence into subsequences\n    for i in range(length - w + 1):\n        # Get the subsequence\n        ts = ts_numpy[i:i+w]\n        # Create new TS node based on ts\n        ts_node = isax.TS(ts, s)\n        ISAX.insert(ts_node)\n    return ISAX, ts_numpy\n```", "```py\ndef query(ISAX, q):\n    global totalQueries\n    totalQueries = totalQueries + 1\n    Accesses = 0\n    # Create TS Node\n    qTS = isax.TS(q, variables.segments)\n    segs = [1] * variables.segments\n    #If the relevant child of root is not there, we have a miss\n    lower_cardinality = tools.lowerCardinality(segs, qTS)\n    lower_cardinality_str = \"\"\n    for i in lower_cardinality:\n        lower_cardinality_str = lower_cardinality_str + \"_\"\n            + i\n```", "```py\n    # Remove _ at the beginning\n    Lower_cardinality_str = lower_cardinality_str[1:len(\n        lower_cardinality_str)]\n    if ISAX.ht.get(lower_cardinality_str) == None:\n        return False, 0\n    # Otherwise, we have a hit\n    n = ISAX.ht.get(lower_cardinality_str)\n    while n.terminalNode == False:\n        left = n.left\n        right = n.right\n        leftSegs = left.word.split('_')\n        # Promote\n        tempCard = tools.promote(qTS, leftSegs)\n        if tempCard == left.word:\n            n = left\n        elif tempCard == right.word:\n            n = right\n    # Iterate over the subsequences of the terminal node\n    for i in range(0, variables.threshold):\n        Accesses = Accesses + 1\n        child = n.children[i]\n        if type(child) == isax.TS:\n            # print(\"Shapes:\", child.ts.shape, qTS.ts.shape)\n            if np.allclose(child.ts, qTS.ts):\n                return True, Accesses\n        else:\n            return False, Accesses\n    return False, Accesses\n```", "```py\n    # Build iSAX for TS1\n    i1, ts1 = createISAX(f1, windowSize, segments)\n    totalSplits = totalSplits + variables.nSplits\n    totalAccesses = totalAccesses + variables.nSubsequences\n    # Build iSAX for TS2\n    variables.nSubsequences = 0\n    variables.nSplits = 0\n    i2, ts2 = createISAX(f2, windowSize, segments)\n    totalSplits = totalSplits + variables.nSplits\n    totalAccesses = totalAccesses + variables.nSubsequences\n```", "```py\n    # Query iSAX for TS1\n    for idx in range(0, len(ts1)-windowSize+1):\n        currentQuery = ts1[idx:idx+windowSize]\n        found, ac = query(i1, currentQuery)\n        if found == False:\n            print(\"This cannot be happening!\")\n            return\n        totalAccesses = totalAccesses + ac\n    # Query iSAX for TS1\n    for idx in range(0, len(ts2)-windowSize+1):\n        currentQuery = ts2[idx:idx+windowSize]\n        found, ac = query(i1, currentQuery)\n        totalAccesses = totalAccesses + ac\n```", "```py\n    # Query iSAX for TS2\n    for idx in range(0, len(ts2)-windowSize+1):\n        currentQuery = ts2[idx:idx+windowSize]\n        found, ac = query(i2, currentQuery)\n        if found == False:\n            print(\"This cannot be happening!\")\n            return\n        totalAccesses = totalAccesses + ac\n    # Query iSAX for TS2\n    for idx in range(0, len(ts1)-windowSize+1):\n        currentQuery = ts1[idx:idx+windowSize]\n        found, ac = query(i2, currentQuery)\n        totalAccesses = totalAccesses + ac\n```", "```py\n$ ../ch01/synthetic_data.py 506218 -10 10 > 506k\n$ gzip 506k\n```", "```py\n$ ./speed.py -s 8 500k.gz 506k.gz\nMax Cardinality: 16 Segments: 8 Sliding Window: 16 Threshold: 1000 Default Promotion: False\nTotal subsequence accesses: 1060326778\nTotal splits: 1106\nTotal queries: 2012376\n```", "```py\n$ ./speed.py -s 4 -c 64 500k.gz 506k.gz\nMax Cardinality: 64 Segments: 4 Sliding Window: 16 Threshold: 1000 Default Promotion: False\nTotal subsequence accesses: 1083675402\nTotal splits: 2034\nTotal queries: 2012376\n```", "```py\ndef euclidean(a, b):\n    return np.linalg.norm(a-b)\n```", "```py\n# List of Euclidean distances\nED = []\n```", "```py\nfrom isax import variables\nfrom isax import tools\ndef Join(iSAX1, iSAX2):\n    # Begin with the children of the root node.\n    # That it, the nodes with SAX words\n    # with a Cardinality of 1.\n    for t1 in iSAX1.children:\n        k1 = iSAX1.children[t1]\n        if k1 == None:\n            continue\n        for t2 in iSAX2.children:\n            k2 = iSAX2.children[t2]\n            if k2 == None:\n                continue\n            # J_AB\n            _Join(k1, k2)\n            # J_BA\n            _Join(k2, k1)\n    return\n```", "```py\ndef _Join(t1, t2):\n    if t1.word != t2.word:\n        return\n    # Inner + Inner\n    if t1.terminalNode==False and t2.terminalNode==False:\n        _Join(t1.left, t2.left)\n        _Join(t1.right, t2.left)\n        _Join(t1.left, t2.right)\n        _Join(t1.right, t2.right)\n```", "```py\n    # Terminal + Inner\n    elif t1.terminalNode==True and t2.terminalNode==False:\n        _Join(t1, t2.left)\n        _Join(t1, t2.right)\n```", "```py\n    # Inner + Terminal\n    elif t1.terminalNode == False and t2.terminalNode == True:\n        _Join(t1.left, t2)\n        _Join(t1.right, t2)\n```", "```py\n    # Terminal + Terminal\n    # As both are terminal nodes, calculate\n    # Euclidean Distances between Time Series pairs\n    elif t1.terminalNode==True and t2.terminalNode==True:\n        for i in range(t1.nTimeSeries()):\n            minDistance = None\n            for j in range(t2.nTimeSeries()):\n                distance =round(tools.euclidean\n                (t1.children[i].ts, t2.children[j].ts),\n                variables.precision)\n                # Keeping the smallest Euclidean Distance for each node\n                # of the t1 Terminal node\n                if minDistance == None:\n                    minDistance = distance\n                elif minDistance > distance:\n                    minDistance = distance\n            # Insert distance to PQ\n            if minDistance != None:\n                variables.ED.append(minDistance)\n    else:\n        print(\"This cannot happen!\")\n```", "```py\n#!/usr/bin/env python3\nfrom isax import variables\nfrom isax import isax\nfrom isax import tools\nfrom isax.sax import normalize\nfrom isax.iSAXjoin import Join\nimport sys\nimport pandas as pd\nimport time\nimport argparse\ndef buildISAX(file, windowSize):\n    variables.overflow = 0\n    # Read Sequence as Pandas\n    ts = pd.read_csv(file, names=['values'],\n        compression='gzip', header = None)\n    ts_numpy = ts.to_numpy()\n    length = len(ts_numpy)\n    ISAX = isax.iSAX()\n    ISAX.length = length\n    for i in range(length - windowSize + 1):\n        ts = ts_numpy[i:i+windowSize]\n        # Create new TS node based on ts\n        # Store the normalized version of the subsequence\n        ts_node = isax.TS(normalize(ts),\n            variables.segments)\n        ISAX.insert(ts_node)\n    if variables.overflow != 0:\n        print(\"Number of overflows:\", variables.overflow)\n    return ISAX\n```", "```py\ndef main():\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"-s\", \"--segments\",\n        dest = \"segments\", default = \"16\",\n        help=\"Number of Segments\", type=int)\n    parser.add_argument(\"-c\", \"--cardinality\",\n        dest = \"cardinality\", default = \"256\",\n        help=\"Cardinality\", type=int)\n    parser.add_argument(\"-w\", \"--window\", dest = \"window\",\n        default = \"16\", help=\"Sliding Window Size\",\n        type=int)\n    parser.add_argument(\"-t\", \"--threshold\",\n        dest = \"threshold\", default = \"50\",\n        help=\"Threshold for split\", type=int)\n    parser.add_argument(\"-p\", \"--promotion\",\n        action='store_true',\n        help=\"Define Promotion Strategy\")\n    parser.add_argument(\"TS1\")\n    parser.add_argument(\"TS2\")\n    args = parser.parse_args()\n    variables.segments = args.segments\n    variables.maximumCardinality = args.cardinality\n    variables.slidingWindowSize = args.window\n    variables.threshold = args.threshold\n    variables.defaultPromotion = args.promotion\n    windowSize = variables.slidingWindowSize\n    maxCardinality = variables.maximumCardinality\n    f1 = args.TS1\n    f2 = args.TS2\n    if tools.power_of_two(maxCardinality) == -1:\n        print(\"Not a power of 2:\", maxCardinality)\n        sys.exit()\n    if variables.segments > variables.slidingWindowSize:\n        print(\"Segments:\", variables.segments,\n            \"Sliding window:\", variables.slidingWindowSize)\n        print(\"Sliding window size should be bigger than # of segments.\")\n        sys.exit()\n    print(\"Max Cardinality:\", maxCardinality, \"Segments:\",\n        variables.segments,\n        \"Sliding Window:\", variables.slidingWindowSize,\n        \"Threshold:\", variables.threshold,\n        \"Default Promotion:\", variables.defaultPromotion)\n```", "```py\n    # Build iSAX for TS1\n    start_time = time.time()\n    i1 = buildISAX(f1, windowSize)\n    print(\"i1: %.2f seconds\" % (time.time() - start_time))\n    # Build iSAX for TS2\n    start_time = time.time()\n    i2 = buildISAX(f2, windowSize)\n    print(\"i2: %.2f seconds\" % (time.time() - start_time))\n    # Join the two iSAX indexes\n    Join(i1, i2)\n    variables.ED.sort()\n    print(\"variables.ED length:\", len(variables.ED))\n    maximumLength = i1.length+i2.length - 2*windowSize + 2\n    print(\"Maximum length:\", maximumLength)\nif __name__ == '__main__':\n    main()\n```", "```py\n$ ./join.py -s 8 -c 32 -t 1000 500k.gz 506k.gz\nMax Cardinality: 32 Segments: 8 Sliding Window: 16 Threshold: 1000 Default Promotion: False\ni1: 170.94 seconds\ni2: 179.80 seconds\nvariables.ED length: 970603\nMaximum length: 1006188\n```", "```py\ndef main():\n. . .\n    # Reading command line parameters\n. . .\n    # Build iSAX for TS1\n    start_time = time.time()\n    i1 = buildISAX(f1, windowSize)\n    print(\"i1: %.2f seconds\" % (time.time() - start_time))\n    # Build iSAX for TS2\n    start_time = time.time()\n    i2 = buildISAX(f2, windowSize)\n    print(\"i2: %.2f seconds\" % (time.time() - start_time))\n    # Now, join the two iSAX indexes\n    Join(i1, i2)\n    variables.ED.sort()\n    print(\"variables.ED length:\", len(variables.ED))\n    # Now save it to disk\n    #\n    # Define filename\n    filename = \"List_\" + basename(f1) + \"_\" + basename(f2) + \"_\" + str(maxCardinality) + \"_\" + str(variables.segments) + \"_\" + str(windowSize) + \".txt\"\n    print(\"Output file:\", filename)\n    f = open(filename, \"w\")\n    # Write to disk\n    for item in variables.ED:\n        f.write('%s\\n' %item)\n    f.close()\n```", "```py\n    # Now try to open it\n    f = open(filename, \"r\")\n    PQ = []\n    for item in f.readlines():\n        PQ.append(float(item.rstrip()))\n    f.close()\n    print(\"PQ length:\", len(PQ))\n```", "```py\n$ ./saveLoadList.py -s 8 -c 32 -t 1000 500k.gz 506k.gz\nMax Cardinality: 32 Segments: 8 Sliding Window: 16 Threshold: 1000 Default Promotion: False\ni1: 168.73 seconds\ni2: 172.39 seconds\nvariables.ED length: 970603\nOutput file: List_500k.gz_506k.gz_32_8_16.txt\nPQ length: 970603\n```", "```py\n    # Visit all entries in Dictionary\n    sum = 0\n    for k in i1.ht:\n        t = i1.ht[k]\n        if t.terminalNode:\n            saxWord = t.word\n            # Look for a match in the other iSAX\n            if saxWord in i2.ht.keys():\n                i2Node = i2.ht[saxWord]\n                # Need that to be a terminal node\n                if i2Node.terminalNode == False:\n                    sum = sum + 1\n                    print(saxWord, end=' ')\n    print()\n```", "```py\n    # Look at the other iSAX\n    for k in i2.ht:\n        t = i2.ht[k]\n        if t.terminalNode:\n            saxWord = t.word\n            # Look for a match in the other iSAX\n            if saxWord in i1.ht.keys():\n                i1Node = i1.ht[saxWord]\n                # Sstill need that to be a terminal node\n                if i1Node.terminalNode == False:\n                    sum = sum + 1\n                    print(saxWord, end=' ')\n    print()\n    print(\"Number of iSAX nodes without a match:\", sum)\n```", "```py\n$ ./noMatch.py -s 8 -c 32 -t 1500 -w 128 500k.gz 506k.gz\nMax Cardinality: 32 Segments: 8 Sliding Window: 128 Threshold: 1500 Default Promotion: False\n011_10_10_10_01_10_10_01 011_01_01_10_10_10_10_10 011_01_10_01_10_10_10_10 011_10_01_10_10_10_10_01 100_01_01_10_01_01_01_10 011_10_10_01_01_10_10_10 100_01_01_01_10_10_01_01 011_01_10_10_10_01_10_10 100_100_011_100_01_10_01_01 100_011_100_100_01_01_01_10 100_011_011_011_10_01_10_10 011_011_100_011_10_10_01_10 100_100_011_100_10_01_01_01 100_011_011_011_10_10_10_01 100_011_100_100_10_01_01_01 011_100_011_100_01_01_10_10 100_011_011_011_10_10_01_10 011_011_011_100_01_10_10_10 100_100_011_011_01_01_10_10 011_011_011_100_10_01_10_10 011_100_011_100_10_10_01_01 100_100_100_10_10_01_01_01 011_011_011_10_10_01_01_10 100_100_100_10_01_10_01_01 100_100_100_01_01_01_10_10\n100_10_01_10_01_01_01_01 100_01_01_10_01_10_01_01 100_01_01_01_10_01_10_01 100_01_01_01_10_01_01_10 100_01_10_01_01_01_10_01 011_10_10_10_10_01_01_10 100_011_100_100_01_01_10_01 011_011_100_011_10_01_10_10 011_100_100_100_01_10_01_01 011_100_100_100_10_01_01_01 011_100_011_100_10_01_01_10 011_011_011_100_10_10_01_10 011_011_100_100_10_10_01_01 011_011_011_01_01_10_10_10 011_011_011_01_10_10_10_01 100_100_100_011_01_01_10_01 011_011_011_10_01_10_01_10 011_011_011_100_10_10_10_01 100_100_100_01_01_10_01_10 011_011_011_10_10_01_10_01 100_100_100_10_01_01_10_01\nTotal number of SAX nodes without a match: 46\n```", "```py\n$ ./noMatch.py -s 4 -c 64 -t 1500 -w 128 500k.gz 506k.gz\nMax Cardinality: 64 Segments: 4 Sliding Window: 128 Threshold: 1500 Default Promotion: False\n101_01_01_10 010_10_01_10 1001_0110_0110_100 01100_1001_1000_0111 01100_0111_1000_1001 01100_1001_0111_1000 10011_1000_0110_0111 01100_1000_0111_1001 011110_01111_10000_10000 0101_1000_1000_100 1000_0101_1000_100 0111_0111_011_101 01111_01101_1001_1000 10000_01101_10000_10001 10001_01110_10001_01110 01110_01101_1001_1000 01110_10001_01110_10001 01111_10010_01110_01111 01110_10000_01110_1001 01101_10001_10000_10000 10001_10010_0111_0110 01101_10000_10001_10000 01110_01110_10010_1000\n1001_0110_1001_011 10011_0110_1000_0111 011110_10000_01111_10000 10010_01111_01111_01110 10001_01110_01110_10001 10001_10010_0110_0111 10001_10000_01101_10000 10010_01111_01110_01111 01110_01111_01111_10010 01111_01110_01111_10010 10001_10001_01101_0111\nTotal number of SAX nodes without a match: 34\n```", "```py\n$ pytest\n========================= test session starts ==========\nplatform darwin -- Python 3.10.9, pytest-7.2.1, pluggy-1.0.0\nrootdir: /Users/mtsouk/code/ch05\ncollected 0 items\n================ no tests ran in 0.00s ====================\n```", "```py\ndef test_count_subsequences():\n    variables.nSplits = 0\n    variables.segments = segments\n    variables.maximumCardinality = cardinality\n    variables.slidingWindowSize = slidingWindow\n    variables.threshold = threshold\n    i, ts = createISAX(TS, slidingWindow, segments)\n    sum = 0\n    for k in i.ht:\n        t = i.ht[k]\n        if t.terminalNode:\n            sum += t.nTimeSeries()\n    assert sum == len(ts) - slidingWindow + 1\n```", "```py\ndef test_count_splits():\n    variables.nSplits = 0\n    variables.segments = segments\n    variables.maximumCardinality = cardinality\n    variables.slidingWindowSize = slidingWindow\n    variables.threshold = threshold\n    variables.defaultPromotion = False\n    i, ts = createISAX(TS, slidingWindow, segments)\n    assert variables.nSplits == splits\n```", "```py\ndef test_join_same():\n    variables.nSplits = 0\n    variables.segments = segments\n    variables.maximumCardinality = cardinality\n    variables.slidingWindowSize = slidingWindow\n    variables.threshold = threshold\n    i, _ = createISAX(TS, slidingWindow, segments)\n    Join(i, i)\n    assert np.allclose(variables.ED, np.zeros(len(variables.ED))) == True\n```", "```py\n$ pytest\n================= test session starts =====================\nplatform darwin -- Python 3.10.9, pytest-7.2.1, pluggy-1.0.0\nrootdir: /Users/mtsouk/TSi/code/ch05\ncollected 3 items\ntest_isax.py ...                                    [100%]\n============= 3 passed in 2784.53s (0:46:24) ==============\n```", "```py\n$ pytest\n====================== test session starts ================\nplatform darwin -- Python 3.10.9, pytest-7.2.1, pluggy-1.0.0\nrootdir: /Users/mtsouk/TSi/code/ch05\ncollected 3 items\ntest_isax.py .F.                                  [100%]\n=====================FAILURES ============================\n____________________ test_count_splits ___________________\n    variables.nSplits = 0\n    variables.segments = segments\n    variables.maximumCardinality = cardinality\n    variables.slidingWindowSize = slidingWindow\n    variables.threshold = threshold\n    _, _ = createISAX(TS, slidingWindow, segments)\n>   assert variables.nSplits == splits\nE   assert 5669 == 5983\nE    +  where 5669 = variables.nSplits\ntest_isax.py:58: AssertionError\n================ short test summary info ==================\nFAILED test_isax.py::test_count_splits - assert 5669 == 5983\n=========== 1 failed, 2 passed in 2819.21s (0:46:59) ======\n```"]