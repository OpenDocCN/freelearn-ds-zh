["```py\nadd <- function(x, y) {\n  x + y\n} \n\n```", "```py\naddn <- function(y) {\n  function(x) {\n    x + y\n  }\n} \n\n```", "```py\nadd1 <- addn(1)\nadd2 <- addn(2) \n\n```", "```py\nadd1(10)\n## [1] 11\nadd2(10)\n## [1] 12 \n\n```", "```py\nadd1\n## function(x) {\n## x + y\n## }\n## <environment: 0x00000000139b0e58> \n\n```", "```py\nenvironment(add1)$y\n## [1] 1 \n\n```", "```py\nenvironment(add2)$y\n## [1] 2 \n\n```", "```py\ncolor_line<- function(col) {\n  function(...) {\n plot(..., type = \"l\", lty = 1, col = col)\n  }\n} \n\n```", "```py\nred_line<- color_line(\"red\")\nred_line(rnorm(30), main = \"Red line plot\") \n\n```", "```py\nplot(rnorm(30), type = \"l\", lty = 1, col = \"red\",\n  main = \"Red line plot\") \n\n```", "```py\nnloglik<- function(x) {\n  n <- length(x)\n  function(mean, sd) {\n log(2 * pi) * n / 2 + log(sd ^ 2) * n / 2 + sum((x - mean) ^ 2) / (2 * sd ^ 2)\n  }\n} \n\n```", "```py\ndata <- rnorm(10000, 1, 2) \n\n```", "```py\nfit <- stats4::mle(nloglik(data),\n  start = list(mean = 0, sd = 1), method = \"L-BFGS-B\",\n  lower =c(-5, 0.01), upper = c(5, 10)) \n\n```", "```py\nfit@coef\n## mean sd\n## 1.007548 1.990121 \n\n```", "```py\n(fit@coef - c(1, 2)) / c(1, 2)\n## mean sd\n##  0.007547752 -0.004939595 \n\n```", "```py\nhist(data, freq =FALSE, ylim =c(0, 0.25))\ncurve(dnorm(x, 1, 2), add =TRUE, col =rgb(1, 0, 0, 0.5), lwd =6)\ncurve(dnorm(x, fit@coef[[\"mean\"]], fit@coef[[\"sd\"]]),\n    add =TRUE, col =\"blue\", lwd =2) \n\n```", "```py\nf1 <- function() {\n  cat(\"[f1] executing in \")\n  print(environment())\n  cat(\"[f1] enclosed by \")\n  print(parent.env(environment()))\n  cat(\"[f1] calling from \")\n  print(parent.frame())\n}\nf2 <- function() {\n  cat(\"[f2] executing in \")\n  print(environment())\n  cat(\"[f2] enclosed by \")\n  print(parent.env(environment()))\n  cat(\"[f2] calling from \")\n  print(parent.frame())\n  p <- f1\n  p()\n}\nf1()\n## [f1] executing in <environment: 0x000000001435d700>\n## [f1] enclosed by <environment: R_GlobalEnv>\n## [f1] calling from <environment: R_GlobalEnv>\nf2()\n## [f2] executing in <environment: 0x0000000014eb2200>\n## [f2] enclosed by <environment: R_GlobalEnv>\n## [f2] calling from <environment: R_GlobalEnv>\n## [f1] executing in <environment: 0x0000000014eaedf0>\n## [f1] enclosed by <environment: R_GlobalEnv>\n## [f1] calling from <environment: 0x0000000014eb2200> \n\n```", "```py\nf1 <- function(x, y) {\n  if (x > y) {\n    x + y\n  } else {\n    x - y\n  }\n} \n\n```", "```py\nf2 <- function(x, y) {\n  op <- if (x > y) `+` else `-`\n op(x, y)\n} \n\n```", "```py\nadd <- function(x, y, z) {\n  x + y + z\n}\nproduct <- function(x, y, z) {\n  x * y * z\n} \n\n```", "```py\ncombine <- function(f, x, y, z) {\n f(x, y, z)\n} \n\n```", "```py\ncombine(add, 3, 4, 5)\n## [1] 12\ncombine(product, 3, 4, 5)\n## [1] 60 \n\n```", "```py\nresult<-list()\nfor (i in seq_along(x)) {\n    result[[i]] <-f(x[[i]])\n}\nresult \n\n```", "```py\nlapply(x, f) \n\n```", "```py\nlapply <- function(x, f, ...) {\n  result <- list()\n  for (i in seq_along(x)) {\n      result[[i]] <-f(x[i], ...)\n  }\n} \n\n```", "```py\nlapply(1:3, `+`, 3)\n## [[1]]\n## [1] 4\n##\n## [[2]]\n## [1] 5\n##\n## [[3]]\n## [1] 6 \n\n```", "```py\nlist(1 +3, 2 +3, 3 +3) \n\n```", "```py\nlapply(1:3, addn(3))\n## [[1]]\n## [1] 4\n##\n## [[2]]\n## [1] 5\n##\n## [[3]]\n## [1] 6 \n\n```", "```py\nsapply(1:3, addn(3))\n## [1] 4 5 6 \n\n```", "```py\nvapply(1:3, addn(3), numeric(1))\n## [1] 4 5 6 \n\n```", "```py\nresult <- list()\nfor (i in seq_along(x)) {\n  # heavy computing task\n  result[[i]] <- f(x[[i]])\n}\nresult \n\n```", "```py\nresult <- lapply(x, f) \n\n```", "```py\nresult <- parallel::mclapply(x, f) \n\n```", "```py\niris[iris$Sepal.Length > quantile(iris$Sepal.Length, 0.8) &\n    iris$Sepal.Width > quantile(iris$Sepal.Width, 0.8) &\n    iris$Petal.Length > quantile(iris$Petal.Length, 0.8) &\n    iris$Petal.Width > quantile(iris$Petal.Width, 0.8), ]\n##     Sepal.Length  Sepal.Width  Petal.Length  Petal.Width\n## 110     7.2           3.6          6.1           2.5\n## 118     7.7           3.8          6.7           2.2\n## 132     7.9           3.8          6.4           2.0\n## Species\n## 110 virginica\n## 118 virginica\n## 132 virginica \n\n```", "```py\nsubset(iris,\n    Sepal.Length > quantile(Sepal.Length, 0.8) &\n    Sepal.Width > quantile(Sepal.Width, 0.8) &\n    Petal.Length > quantile(Petal.Length, 0.8) &\n    Petal.Width > quantile(Petal.Width, 0.8))\n##      Sepal.Length Sepal.Width Petal.Length Petal.Width\n## 110      7.2          3.6         6.1          2.5\n## 118      7.7          3.8         6.7          2.2\n## 132      7.9          3.8         6.4          2.0\n## Species\n## 110 virginica \n## 118 virginica\n## 132 virginica \n\n```", "```py\niris[Sepal.Length > quantile(Sepal.Length, 0.8) &\n    Sepal.Width > quantile(Sepal.Width, 0.8) &\n    Petal.Length > quantile(Petal.Length, 0.8) &\n    Petal.Width > quantile(Petal.Width, 0.8), ]\n## Error in `[.data.frame`(iris, Sepal.Length > quantile(Sepal.Length, 0.8) & : object 'Sepal.Length' not found \n\n```", "```py\nsubset(iris,\n    Sepal.Length > quantile(Sepal.Length, 0.8) &\n    Sepal.Width > quantile(Sepal.Width, 0.8) &\n    Petal.Length > quantile(Petal.Length, 0.8) &\n    Petal.Width > quantile(Petal.Width, 0.8),\nselect = c(Sepal.Length, Petal.Length, Species))\n##     Sepal.Length Petal.Length  Species\n## 110     7.2          6.1      virginica\n## 118     7.7          6.7      virginica\n## 132     7.9          6.4      virginica \n\n```", "```py\nrnorm(5)\n## [1] 0.54744813 1.15202065 0.74930997 -0.02514251\n## [5]  0.99714852 \n\n```", "```py\ncall1 <- quote(rnorm(5))\ncall1\n## rnorm(5) \n\n```", "```py\ntypeof(call1)\n## [1] \"language\"\nclass(call1)\n## [1] \"call\" \n\n```", "```py\nname1 <- quote(rnorm)\nname1\n## rnorm\ntypeof(name1)\n## [1] \"symbol\"\nclass(name1)\n## [1] \"name\" \n\n```", "```py\nquote(pvar)\n## pvar\nquote(xfun(a = 1:n))\n## xfun(a = 1:n) \n\n```", "```py\nas.list(call1)\n## [[1]]\n## rnorm\n##\n## [[2]]\n## [1] 5 \n\n```", "```py\ncall1[[1]]\n## rnorm\ntypeof(call1[[1]])\n## [1] \"symbol\"\nclass(call1[[1]])\n## [1] \"name\" \n\n```", "```py\ncall1[[2]]\n## [1] 5\ntypeof(call1[[2]])\n## [1] \"double\"\nclass(call1[[2]])\n## [1] \"numeric\" \n\n```", "```py\nnum1 <- 100\nnum2 <- quote(100) \n\n```", "```py\nnum1\n## [1] 100\nnum2\n## [1] 100 \n\n```", "```py\nidentical(num1, num2) \n## [1] TRUE \n\n```", "```py\ncall2 <- quote(c(\"a\", \"b\")) \ncall2 \n## c(\"a\", \"b\") \n\n```", "```py\nas.list(call2) \n## [[1]] \n## c \n##  \n## [[2]] \n## [1] \"a\" \n##  \n## [[3]] \n## [1] \"b\" \n\n```", "```py\nstr(as.list(call2)) \n## List of 3 \n##  $ : symbol c \n##  $ : chr \"a\" \n##  $ : chr \"b\" \n\n```", "```py\ncall3 <- quote(1 + 1) \ncall3 \n## 1 + 1 \n\n```", "```py\nis.call(call3) \n## [1] TRUE \nstr(as.list(call3)) \n## List of 3 \n##  $ : symbol + \n##  $ : num 1 \n##  $ : num 1 \n\n```", "```py\ncall4 <- quote(sqrt(1 + x ^ 2)) \ncall4 \n## sqrt(1 + x ^ 2) \n\n```", "```py\npryr::call_tree(call4) \n## \\- () \n## \\- `sqrt \n## \\- () \n## \\- `+ \n## \\-  1 \n## \\- () \n## \\- `^ \n## \\- `x \n## \\-  2 \n\n```", "```py\ncall1 \n## rnorm(5) \ncall1[[1]] <- quote(runif) \ncall1 \n## runif(5) \n\n```", "```py\ncall1[[3]] <- -1 \nnames(call1)[[3]] <- \"min\" \ncall1 \n## runif(5, min = -1) \n\n```", "```py\nfun1 <- function(x) { \n  quote(x) \n} \n\n```", "```py\nfun1(rnorm(5)) \n## x \n\n```", "```py\nfun2 <- function(x) { \n  substitute(x) \n} \nfun2(rnorm(5)) \n## rnorm(5) \n\n```", "```py\nsubstitute(x + y + x ^ 2, list(x = 1)) \n## 1 + y + 1 ^ 2 \n\n```", "```py\nsubstitute(f(x + f(y)), list(f = quote(sin))) \n## sin(x + sin(y)) \n\n```", "```py\ncall1 <- quote(rnorm(5, mean = 3)) \ncall1 \n## rnorm(5, mean = 3) \n\n```", "```py\ncall2 <- call(\"rnorm\", 5,  mean = 3) \ncall2 \n## rnorm(5, mean = 3) \n\n```", "```py\ncall3 <- as.call(list(quote(rnorm), 5, mean = 3)) \ncall3 \n## rnorm(5, mean = 3) \n\n```", "```py\nidentical(call1, call2) \n## [1] TRUE \nidentical(call2, call3) \n## [1] TRUE \n\n```", "```py\nsin(1) \n## [1] 0.841471 \n\n```", "```py\ncall1 <- quote(sin(1)) \ncall1 \n## sin(1) \neval(call1) \n## [1] 0.841471 \n\n```", "```py\ncall2 <- quote(sin(x)) \ncall2 \n## sin(x) \n\n```", "```py\neval(call2) \n## Error in eval(expr, envir, enclos): object 'x' not found \n\n```", "```py\nsin(x) \n## Error in eval(expr, envir, enclos): object 'x' not found \n\n```", "```py\neval(call2, list(x = 1)) \n## [1] 0.841471 \n\n```", "```py\ne1 <- new.env() \ne1$x <- 1 \neval(call2, e1) \n## [1] 0.841471 \n\n```", "```py\ncall3 <- quote(x ^ 2 + y ^ 2) \ncall3 \n## x ^ 2 + y ^ 2 \n\n```", "```py\neval(call3) \n## Error in eval(expr, envir, enclos): object 'x' not found \n\n```", "```py\neval(call3, list(x = 2)) \n## Error in eval(expr, envir, enclos): object 'y' not found \n\n```", "```py\neval(call3, list(x = 2, y = 3)) \n## [1] 13 \n\n```", "```py\ne1 <- new.env() \ne1$x <- 2 \neval(call3, e1) \n## Error in eval(expr, envir, enclos): object 'y' not found \n\n```", "```py\ne2 <- new.env(parent = e1) \ne2$y <- 3 \neval(call3, e2) \n## [1] 13 \n\n```", "```py\npryr::call_tree(call3) \n## \\- () \n## \\- `+ \n## \\- () \n## \\- `^ \n## \\- `x \n## \\-  2 \n## \\- () \n## \\- `^ \n## \\- `y \n## \\-  2 \n\n```", "```py\ne3 <- new.env() \ne3$y <- 3 \neval(call3, list(x = 2), e3) \n## [1] 13 \n\n```", "```py\neval(quote(z <- x + y + 1), list(x = 1), e3) \ne3$z \n## NULL \n\n```", "```py\neval(quote(z <- y + 1), e3) \ne3$z \n## [1] 4 \n\n```", "```py\neval(quote(1 + 1), list(`+` = `-`)) \n## [1] 0 \n\n```", "```py\nx <- 1:10 \nx[3:(length(x) -5)] \n## [1] 3 4 5 \n\n```", "```py\nqs <- function(x, range) { \n range <- substitute(range) \n  selector <- eval(range, list(. =length(x))) \n  x[selector] \n} \n\n```", "```py\nqs(x, 3:(. -5)) \n## [1] 3 4 5 \n\n```", "```py\nqs(x, . -1) \n## [1] 9 \n\n```", "```py\ntrim_margin <- function(x, n) { \n  qs(x, (n + 1):(. -n -1)) \n} \n\n```", "```py\ntrim_margin(x, 3) \n## Error in eval(expr, envir, enclos): object 'n' not found \n\n```", "```py\neval \n## function (expr, envir = parent.frame(), enclos = if (is.list(envir) ||  \n## is.pairlist(envir)) parent.frame() else baseenv())  \n## .Internal(eval(expr, envir, enclos)) \n## <bytecode: 0x00000000106722c0> \n## <environment: namespace:base> \n\n```", "```py\nqs <- function(x, range) { \n range <- substitute(range) \n  selector <- eval(range, list(. =length(x)), parent.frame()) \n  x[selector] \n} \n\n```", "```py\ntrim_margin(x, 3) \n## [1] 4 5 6 \n\n```", "```py\nformula1 <- z ~ x ^ 2 + y ^ 2 \n\n```", "```py\ntypeof(formula1) \n## [1] \"language\" \nclass(formula1) \n## [1] \"formula\" \n\n```", "```py\nstr(as.list(formula1)) \n## List of 3 \n##  $ : symbol ~ \n##  $ : symbol z \n##  $ : language x^2 + y^2 \n##  - attr(*, \"class\")= chr \"formula\" \n##  - attr(*, \".Environment\") =< environment: R_GlobalEnv> \n\n```", "```py\nis.call(formula1) \n## [1] TRUE \nlength(formula1) \n## [1] 3 \n\n```", "```py\nformula1[[2]] \n## z \nformula1[[3]] \n## x^2 + y^2 \n\n```", "```py\nenvironment(formula1) \n## <environment: R_GlobalEnv> \n\n```", "```py\nformula2 <- ~x + y \nstr(as.list(formula2)) \n## List of 2 \n##  $ : symbol ~ \n##  $ : language x + y \n##  - attr(*, \"class\")= chr \"formula\" \n##  - attr(*, \".Environment\")=<environment: R_GlobalEnv> \n\n```", "```py\nlength(formula2) \n## [1] 2 \nformula2[[2]] \n## x + y \n\n```", "```py\nqs2 <- function(x, range) { \n selector <- if (inherits(range, \"formula\")) { \neval(range[[2]], list(. = length(x)), environment(range)) \n  } else range \n  x[selector] \n} \n\n```", "```py\nqs2(1:10, ~3:(. -2)) \n## [1] 3 4 5 6 7 8 \n\n```", "```py\nqs2(1:10, 3) \n## [1] 3 \n\n```", "```py\ntrim_margin2 <- function(x, n) { \n  qs2(x, ~ (n + 1):(. -n -1)) \n} \n\n```", "```py\ntrim_margin2(x, 3) \n## [1] 4 5 6 \n\n```", "```py\nsubset2 <- function(x, subset = TRUE, select = TRUE) { \n  enclos <- parent.frame() \n  subset <- substitute(subset) \n  select <- substitute(select) \n  row_selector <- eval(subset, x, enclos) \n  col_envir <- as.list(seq_along(x)) \n  names(col_envir) <- colnames(x) \n  col_selector <- eval(select, col_envir, enclos) \n  x[row_selector, col_selector] \n} \n\n```", "```py\nsubset2(mtcars, mpg >= quantile(mpg, 0.9), c(mpg, cyl, qsec)) \n##                 mpg  cyl  qsec \n## Fiat 128       32.4   4  19.47 \n## Honda Civic    30.4   4  18.52 \n## Toyota Corolla 33.9   4  19.90 \n## Lotus Europa   30.4   4  16.90 \n\n```", "```py\nsubset2(mtcars, mpg >= quantile(mpg, 0.9), mpg:drat) \n##                 mpg   cyl disp  hp  drat \n## Fiat 128       32.4   4   78.7  66  4.08 \n## Honda Civic    30.4   4   75.7  52  4.93 \n## Toyota Corolla 33.9   4   71.1  65  4.22 \n## Lotus Europa   30.4   4   95.1  113 3.77 \n\n```"]