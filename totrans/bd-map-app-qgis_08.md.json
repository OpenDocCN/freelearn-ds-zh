["```py\n    RESOURCE_FILES = resources.py\n\n    default: compile\n\n    compile: $(RESOURCE_FILES)\n\n    %.py : %.qrc\n      pyrcc4 -o $@ $<\n\n    %.py : %.ui\n      pyuic4 -o $@ $<\n\n    clean:\n      rm $(RESOURCE_FILES)\n      rm *.pyc\n    ```", "```py\n    <RCC>\n    <qresource>\n    <file>resources/mActionZoomIn.png</file>\n    <file>resources/mActionZoomOut.png</file>\n    <file>resources/mActionPan.png</file>\n    <file>resources/mActionEdit.svg</file>\n    <file>resources/mActionAddTrack.svg</file>\n    <file>resources/mActionEditTrack.png</file>\n    <file>resources/mActionDeleteTrack.svg</file>\n    <file>resources/mActionGetInfo.svg</file>\n    <file>resources/mActionSetStartPoint.svg</file>\n    <file>resources/mActionSetEndPoint.svg</file>\n    <file>resources/mActionFindShortestPath.svg</file>\n    </qresource>\n    </RCC>\n    ```", "```py\n    #!/bin/sh\n    export PYTHONPATH=\"/path/to/qgis/build/output/python/\"\n    export LD_LIBRARY_PATH=\"/path/to/qgis/build/output/lib/\"\n    export QGIS_PREFIX=\"/path/to/qgis/build/output/\"\n    python forestTrails.py\n    ```", "```py\n    export PYTHONPATH=\"$PYTHONPATH:/Applications/QGIS.app/Contents/Resources/python\"\n    export DYLD_FRAMEWORK_PATH=\"/Applications/QGIS.app/Contents/Frameworks\"\n    export QGIS_PREFIX=\"/Applications/QGIS.app/Contents/Resources\"\n    python forestTrails.py\n    ```", "```py\n    SET OSGEO4W_ROOT=C:\\OSGeo4W\n    SET QGIS_PREFIX=%OSGEO4W_ROOT%\\apps\\qgis\n    SET PATH=%PATH%;%QGIS_PREFIX%\\bin\n    SET PYTHONPATH=%QGIS_PREFIX%\\python;%PYTHONPATH%\n    python forestTrails.py\n    ```", "```py\nTRACK_TYPE_ROAD    = \"ROAD\"\nTRACK_TYPE_WALKING = \"WALKING\"\nTRACK_TYPE_BIKE    = \"BIKE\"\nTRACK_TYPE_HORSE   = \"HORSE\"\n\nTRACK_DIRECTION_BOTH     = \"BOTH\"\nTRACK_DIRECTION_FORWARD  = \"FORWARD\"\nTRACK_DIRECTION_BACKWARD = \"BACKWARD\"\n\nTRACK_STATUS_OPEN   = \"OPEN\"\nTRACK_STATUS_CLOSED = \"CLOSED\"\n```", "```py\nimport os, os.path, sys\n\nfrom qgis.core import *\nfrom qgis.gui import *\nfrom PyQt4.QtGui import *\nfrom PyQt4.QtCore import *\n\nfrom ui_mainWindow import Ui_MainWindow\n\nimport resources\nfrom constants import *\nfrom mapTools import *\n```", "```py\nclass ForestTrailsWindow(QMainWindow, Ui_MainWindow):\n    def __init__(self):\n        QMainWindow.__init__(self)\n\n        self.setupUi(self)\n\n        self.connect(self.actionQuit, SIGNAL(\"triggered()\"),\n                     self.quit)\n        self.connect(self.actionZoomIn, SIGNAL(\"triggered()\"),\n                     self.zoomIn)\n        self.connect(self.actionZoomOut, SIGNAL(\"triggered()\"),\n                     self.zoomOut)\n        self.connect(self.actionPan, SIGNAL(\"triggered()\"),\n                     self.setPanMode)\n        self.connect(self.actionEdit, SIGNAL(\"triggered()\"),\n                     self.setEditMode)\n        self.connect(self.actionAddTrack, SIGNAL(\"triggered()\"),\n                     self.addTrack)\n        self.connect(self.actionEditTrack, SIGNAL(\"triggered()\"),\n                     self.editTrack)\n        self.connect(self.actionDeleteTrack,SIGNAL(\"triggered()\"),\n                     self.deleteTrack)\n        self.connect(self.actionGetInfo, SIGNAL(\"triggered()\"),\n                     self.getInfo)\n        self.connect(self.actionSetStartPoint,\n                     SIGNAL(\"triggered()\"),\n                self.setStartPoint)\n        self.connect(self.actionSetEndPoint,\n                     SIGNAL(\"triggered()\"),\n                  self.setEndPoint)\n        self.connect(self.actionFindShortestPath,\n                     SIGNAL(\"triggered()\"),\n                     self.findShortestPath)\n\n        self.mapCanvas = QgsMapCanvas()\n        self.mapCanvas.useImageToRender(False)\n        self.mapCanvas.setCanvasColor(Qt.white)\n        self.mapCanvas.show()\n\n        layout = QVBoxLayout()\n        layout.setContentsMargins(0, 0, 0, 0)\n        layout.addWidget(self.mapCanvas)\n        self.centralWidget.setLayout(layout)\n```", "```py\n    def zoomIn(self):\n        self.mapCanvas.zoomIn()\n\n    def zoomOut(self):\n        self.mapCanvas.zoomOut()\n```", "```py\n    def quit(self):\n        pass\n\n    def setPanMode(self):\n        pass\n\n    def setEditMode(self):\n        pass\n\n    def addTrack(self):\n        pass\n\n    def editTrack(self):\n        pass\n\n    def deleteTrack(self):\n        pass\n\n    def getInfo(self):\n        pass\n\n    def setStartingPoint(self):\n        pass\n\n    def setEndingPoint(self):\n        pass\n\n    def findShortestPath(self):\n        pass\n```", "```py\ndef main():\n    QgsApplication.setPrefixPath(os.environ['QGIS_PREFIX'], True)\n    QgsApplication.initQgis()\n\n    app = QApplication(sys.argv)\n\n    window = ForestTrailsWindow()\n    window.show()\n    window.raise_()\n    window.setPanMode()\n\n    app.exec_()\n    app.deleteLater()\n    QgsApplication.exitQgis()\n\nif __name__ == \"__main__\":\n    main()\n```", "```py\nfrom qgis.core import *\nfrom qgis.gui import *\nfrom PyQt4.QtGui import *\nfrom PyQt4.QtCore import *\nfrom constants import *\n```", "```py\nfrom PyQt4.QtGui import *\nfrom PyQt4.QtCore import *\nimport resources\n```", "```py\nclass Ui_MainWindow(object):\n    def setupUi(self, window):\n```", "```py\n        window.setWindowTitle(\"Forest Trails\")\n\n        self.centralWidget = QWidget(window)\n        self.centralWidget.setMinimumSize(800, 400)\n        window.setCentralWidget(self.centralWidget)\n\n        self.menubar = window.menuBar()\n        self.fileMenu = self.menubar.addMenu(\"File\")\n        self.mapMenu = self.menubar.addMenu(\"Map\")\n        self.editMenu = self.menubar.addMenu(\"Edit\")\n        self.toolsMenu = self.menubar.addMenu(\"Tools\")\n\n        self.toolBar = QToolBar(window)\n        window.addToolBar(Qt.TopToolBarArea, self.toolBar)\n```", "```py\n        self.actionQuit = QAction(\"Quit\", window)\n        self.actionQuit.setShortcut(QKeySequence.Quit)\n\n        icon = QIcon(\":/resources/mActionZoomIn.png\")\n        self.actionZoomIn = QAction(icon, \"Zoom In\", window)\n        self.actionZoomIn.setShortcut(QKeySequence.ZoomIn)\n\n        icon = QIcon(\":/resources/mActionZoomOut.png\")\n        self.actionZoomOut = QAction(icon, \"Zoom Out\", window)\n        self.actionZoomOut.setShortcut(QKeySequence.ZoomOut)\n\n        icon = QIcon(\":/resources/mActionPan.png\")\n        self.actionPan = QAction(icon, \"Pan\", window)\n        self.actionPan.setShortcut(\"Ctrl+1\")\n        self.actionPan.setCheckable(True)\n\n        icon = QIcon(\":/resources/mActionEdit.svg\")\n        self.actionEdit = QAction(icon, \"Edit\", window)\n        self.actionEdit.setShortcut(\"Ctrl+2\")\n        self.actionEdit.setCheckable(True)\n\n        icon = QIcon(\":/resources/mActionAddTrack.svg\")\n        self.actionAddTrack = QAction(icon, \"Add Track\", window)\n        self.actionAddTrack.setShortcut(\"Ctrl+A\")\n        self.actionAddTrack.setCheckable(True)\n\n        icon = QIcon(\":/resources/mActionEditTrack.png\")\n        self.actionEditTrack = QAction(icon, \"Edit\", window)\n        self.actionEditTrack.setShortcut(\"Ctrl+E\")\n        self.actionEditTrack.setCheckable(True)\n\n        icon = QIcon(\":/resources/mActionDeleteTrack.svg\")\n        self.actionDeleteTrack = QAction(icon, \"Delete\", window)\n        self.actionDeleteTrack.setShortcut(\"Ctrl+D\")\n        self.actionDeleteTrack.setCheckable(True)\n\n        icon = QIcon(\":/resources/mActionGetInfo.svg\")\n        self.actionGetInfo = QAction(icon, \"Get Info\", window)\n        self.actionGetInfo.setShortcut(\"Ctrl+I\")\n        self.actionGetInfo.setCheckable(True)\n\n        icon = QIcon(\":/resources/mActionSetStartPoint.svg\")\n        self.actionSetStartPoint = QAction(\n                icon, \"Set Start Point\", window)\n        self.actionSetStartPoint.setCheckable(True)\n\n        icon = QIcon(\":/resources/mActionSetEndPoint.svg\")\n        self.actionSetEndPoint = QAction(\n                icon, \"Set End Point\", window)\n        self.actionSetEndPoint.setCheckable(True)\n\n        icon = QIcon(\":/resources/mActionFindShortestPath.svg\")\n        self.actionFindShortestPath = QAction(\n                icon, \"Find Shortest Path\", window)\n        self.actionFindShortestPath.setCheckable(True)\n```", "```py\n        self.fileMenu.addAction(self.actionQuit)\n\n        self.mapMenu.addAction(self.actionZoomIn)\n        self.mapMenu.addAction(self.actionZoomOut)\n        self.mapMenu.addAction(self.actionPan)\n        self.mapMenu.addAction(self.actionEdit)\n\n        self.editMenu.addAction(self.actionAddTrack)\n        self.editMenu.addAction(self.actionEditTrack)\n        self.editMenu.addAction(self.actionDeleteTrack)\n        self.editMenu.addAction(self.actionGetInfo)\n\n        self.toolsMenu.addAction(self.actionSetStartPoint)\n        self.toolsMenu.addAction(self.actionSetEndPoint)\n        self.toolsMenu.addAction(self.actionFindShortestPath)\n```", "```py\n        self.toolBar.addAction(self.actionZoomIn)\n        self.toolBar.addAction(self.actionZoomOut)\n        self.toolBar.addAction(self.actionPan)\n        self.toolBar.addAction(self.actionEdit)\n        self.toolBar.addSeparator()\n        self.toolBar.addAction(self.actionAddTrack)\n        self.toolBar.addAction(self.actionEditTrack)\n        self.toolBar.addAction(self.actionDeleteTrack)\n        self.toolBar.addAction(self.actionGetInfo)\n        self.toolBar.addSeparator()\n        self.toolBar.addAction(self.actionSetStartPoint)\n        self.toolBar.addAction(self.actionSetEndPoint)\n        self.toolBar.addAction(self.actionFindShortestPath)\n\n        window.resize(window.sizeHint())\n```", "```py\ngdal_merge.py -o /dst/path/basemap.tif *.tif\n\n```", "```py\ngdalinfo basemap.tif\n\n```", "```py\n    Coordinate System is:\n    PROJCS[\"NZGD2000 / New Zealand Transverse Mercator 2000\",\n        GEOGCS[\"NZGD2000\",\n            DATUM[\"New_Zealand_Geodetic_Datum_2000\",\n                SPHEROID[\"GRS 1980\",6378137,298.2572221010002,\n                    AUTHORITY[\"EPSG\",\"7019\"]],\n                AUTHORITY[\"EPSG\",\"6167\"]],\n            PRIMEM[\"Greenwich\",0],\n            UNIT[\"degree\",0.0174532925199433],\n            AUTHORITY[\"EPSG\",\"4167\"]],\n        ...\n```", "```py\n gdalwarp -t_srs EPSG:4326 basemap.tif basemap_wgs84.tif\n\n```", "```py\n    Coordinate System is:\n    GEOGCS[\"WGS 84\",\n        DATUM[\"WGS_1984\",\n            SPHEROID[\"WGS 84\",6378137,298.257223563,\n                AUTHORITY[\"EPSG\",\"7030\"]],\n            AUTHORITY[\"EPSG\",\"6326\"]],\n        PRIMEM[\"Greenwich\",0],\n        UNIT[\"degree\",0.0174532925199433],\n        AUTHORITY[\"EPSG\",\"4326\"]]\n```", "```py\ngdalwarp -te 176.241 -38.2333 176.325 -38.1557 basemap_wgs84.tif basemap_trimmed.tif\n\n```", "```py\n    def setupDatabase(self):\n        cur_dir = os.path.dirname(os.path.realpath(__file__))\n        dbName = os.path.join(cur_dir, \"data\", \"tracks.sqlite\")\n        if not os.path.exists(dbName):\n            fields = QgsFields()\n            fields.append(QgsField(\"id\", QVariant.Int))\n            fields.append(QgsField(\"type\", QVariant.String))\n            fields.append(QgsField(\"name\", QVariant.String))\n            fields.append(QgsField(\"direction\", QVariant.String))\n            fields.append(QgsField(\"status\", QVariant.String))\n\n            crs = QgsCoordinateReferenceSystem(4326,\n                        QgsCoordinateReferenceSystem.EpsgCrsId)\n\n            writer = QgsVectorFileWriter(dbName, 'utf-8', fields,\n                                         QGis.WKBLineString,\n                                         crs, 'SQLite',\n                                         [\"SPATIALITE=YES\"])\n\n            if writer.hasError() != QgsVectorFileWriter.NoError:\n                print \"Error creating tracks database!\"\n\n            del writer\n```", "```py\n    window.setupDatabase()\n```", "```py\n    def setupMapLayers(self):\n        cur_dir = os.path.dirname(os.path.realpath(__file__))\n        layers = []\n\n        filename = os.path.join(cur_dir, \"data\", \"basemap.tif\")\n        self.baseLayer = QgsRasterLayer(filename, \"basemap\")\n        QgsMapLayerRegistry.instance().addMapLayer(self.baseLayer)\n        layers.append(QgsMapCanvasLayer(self.baseLayer))\n```", "```py\n        uri = QgsDataSourceURI()\n        uri.setDatabase(os.path.join(cur_dir, \"data\",\n \"tracks.sqlite\"))\n        uri.setDataSource('', 'tracks', 'GEOMETRY')\n\n        self.trackLayer = QgsVectorLayer(uri.uri(), \"Tracks\",\n                                         \"spatialite\")\n        QgsMapLayerRegistry.instance().addMapLayer(\n            self.trackLayer)\n        layers.append(QgsMapCanvasLayer(self.trackLayer))\n```", "```py\n        self.shortestPathLayer = QgsVectorLayer(\n            \"LineString?crs=EPSG:4326\",\n            \"shortestPathLayer\", \"memory\")\n        QgsMapLayerRegistry.instance().addMapLayer(\n            self.shortestPathLayer)\n        layers.append(QgsMapCanvasLayer(self.shortestPathLayer))\n```", "```py\n        self.startPointLayer = QgsVectorLayer(\n                                   \"Point?crs=EPSG:4326\",\n                                   \"startPointLayer\", \"memory\")\n        QgsMapLayerRegistry.instance().addMapLayer(\n            self.startPointLayer)\n        layers.append(QgsMapCanvasLayer(self.startPointLayer))\n```", "```py\n        self.endPointLayer = QgsVectorLayer(\n             \"Point?crs=EPSG:4326\",\n             \"endPointLayer\", \"memory\")\n        QgsMapLayerRegistry.instance().addMapLayer(\n            self.endPointLayer)\n        layers.append(QgsMapCanvasLayer(self.endPointLayer))\n```", "```py\n        layers.reverse()\n        self.mapCanvas.setLayerSet(layers)\n        self.mapCanvas.setExtent(self.baseLayer.extent())\n```", "```py\nwindow.setupMapLayers()\n```", "```py\n    def setupRenderers(self):\n        root_rule = QgsRuleBasedRendererV2.Rule(None)\n\n        for track_type in (TRACK_TYPE_ROAD, TRACK_TYPE_WALKING,\n                           TRACK_TYPE_BIKE, TRACK_TYPE_HORSE):\n            if track_type == TRACK_TYPE_ROAD:\n                width = ROAD_WIDTH\n            else:\n                width = TRAIL_WIDTH\n\n            lineColor = \"light gray\"\n            arrowColor = \"dark gray\"\n\n            for track_status in (TRACK_STATUS_OPEN,TRACK_STATUS_CLOSED):\n                for track_direction in (TRACK_DIRECTION_BOTH,\n                                        TRACK_DIRECTION_FORWARD,\n                                        TRACK_DIRECTION_BACKWARD):\n                    symbol = self.createTrackSymbol(width,lineColor, arrowColor,track_status,track_direction)\n                    expression = (\"(type='%s') and \" +\n                                  \"(status='%s') and \" +\n                                  \"(direction='%s')\") % (track_type,track_status,                            track_direction)\n\n                    rule = QgsRuleBasedRendererV2.Rule(symbol,filterExp=expression)\n                    root_rule.appendChild(rule)\n\n        symbol = QgsLineSymbolV2.createSimple({'color' : \"black\"})\n        rule = QgsRuleBasedRendererV2.Rule(symbol, elseRule=True)\n        root_rule.appendChild(rule)\n\n        renderer = QgsRuleBasedRendererV2(root_rule)\n        self.trackLayer.setRendererV2(renderer)\n```", "```py\n        symbol = QgsLineSymbolV2.createSimple({'color' : \"blue\"})\n        symbol.setWidth(ROAD_WIDTH)\n        symbol.setOutputUnit(QgsSymbolV2.MapUnit)\n        renderer = QgsSingleSymbolRendererV2(symbol)\n        self.shortestPathLayer.setRendererV2(renderer)\n\n        symbol = QgsMarkerSymbolV2.createSimple(\n                            {'color' : \"green\"})\n        symbol.setSize(POINT_SIZE)\n        symbol.setOutputUnit(QgsSymbolV2.MapUnit)\n        renderer = QgsSingleSymbolRendererV2(symbol)\n        self.startPointLayer.setRendererV2(renderer)\n\n        symbol = QgsMarkerSymbolV2.createSimple({'color' : \"red\"})\n        symbol.setSize(POINT_SIZE)\n        symbol.setOutputUnit(QgsSymbolV2.MapUnit)\n        renderer = QgsSingleSymbolRendererV2(symbol)\n        self.endPointLayer.setRendererV2(renderer)\n```", "```py\nwindow.setupRenderers()\n```", "```py\n    def createTrackSymbol(self, width, lineColor, arrowColor,\n                          status, direction):\n        symbol = QgsLineSymbolV2.createSimple({})\n        symbol.deleteSymbolLayer(0) # Remove default symbol layer.\n\n        symbolLayer = QgsSimpleLineSymbolLayerV2()\n        symbolLayer.setWidth(width)\n        symbolLayer.setWidthUnit(QgsSymbolV2.MapUnit)\n        symbolLayer.setColor(QColor(lineColor))\n        if status == TRACK_STATUS_CLOSED:\n            symbolLayer.setPenStyle(Qt.DotLine)\n        symbol.appendSymbolLayer(symbolLayer)\n\n        if direction == TRACK_DIRECTION_FORWARD:\n            registry = QgsSymbolLayerV2Registry.instance()\n            markerLineMetadata = registry.symbolLayerMetadata(\n                \"MarkerLine\")\n            markerMetadata     = registry.symbolLayerMetadata(\n                \"SimpleMarker\")\n\n            symbolLayer = markerLineMetadata.createSymbolLayer(\n                                {'width': '0.26',\n                                 'color': arrowColor,\n                                 'rotate': '1',\n                                 'placement': 'interval',\n                                 'interval' : '20',\n                                 'offset': '0'})\n            subSymbol = symbolLayer.subSymbol()\n            subSymbol.deleteSymbolLayer(0)\n            triangle = markerMetadata.createSymbolLayer(\n                                {'name': 'filled_arrowhead',\n                                 'color': arrowColor,\n                                 'color_border': arrowColor,\n                                 'offset': '0,0',\n                                 'size': '3',\n                                 'outline_width': '0.5',\n                                 'output_unit': 'mapunit',\n                                 'angle': '0'})\n            subSymbol.appendSymbolLayer(triangle)\n\n            symbol.appendSymbolLayer(symbolLayer)\n        elif direction == TRACK_DIRECTION_BACKWARD:\n            registry = QgsSymbolLayerV2Registry.instance()\n            markerLineMetadata = registry.symbolLayerMetadata(\n                \"MarkerLine\")\n            markerMetadata     = registry.symbolLayerMetadata(\n                \"SimpleMarker\")\n\n            symbolLayer = markerLineMetadata.createSymbolLayer(\n                                {'width': '0.26',\n                                 'color': arrowColor,\n                                 'rotate': '1',\n                                 'placement': 'interval',\n                                 'interval' : '20',\n                                 'offset': '0'})\n            subSymbol = symbolLayer.subSymbol()\n            subSymbol.deleteSymbolLayer(0)\n            triangle = markerMetadata.createSymbolLayer(\n                                {'name': 'filled_arrowhead',\n                                 'color': arrowColor,\n                                 'color_border': arrowColor,\n                                 'offset': '0,0',\n                                 'size': '3',\n                                 'outline_width': '0.5',\n                                 'output_unit': 'mapunit',\n                                 'angle': '180'})\n            subSymbol.appendSymbolLayer(triangle)\n\n            symbol.appendSymbolLayer(symbolLayer)\n\n        return symbol\n```", "```py\nROAD_WIDTH  = 0.0001\nTRAIL_WIDTH = 0.00003\nPOINT_SIZE  = 0.0004\n```", "```py\nclass PanTool(QgsMapTool):\n    def __init__(self, mapCanvas):\n        QgsMapTool.__init__(self, mapCanvas)\n        self.setCursor(Qt.OpenHandCursor)\n        self.dragging = False\n\n    def canvasMoveEvent(self, event):\n        if event.buttons() == Qt.LeftButton:\n            self.dragging = True\n            self.canvas().panAction(event)\n\n    def canvasReleaseEvent(self, event):\n        if event.button() == Qt.LeftButton and self.dragging:\n            self.canvas().panActionEnd(event.pos())\n            self.dragging = False\n```", "```py\n    def setupMapTools(self):\n        self.panTool = PanTool(self.mapCanvas)\n        self.panTool.setAction(self.actionPan)\n```", "```py\n    window.setupMapTools()\n```", "```py\n    def setPanMode(self):\n        self.mapCanvas.setMapTool(self.panTool)\n```", "```py\n    def setEditMode(self):\n        if self.editing:\n            if self.modified:\n                reply = QMessageBox.question(self, \"Confirm\",\n                                             \"Save Changes?\",\n                                             QMessageBox.Yes |\n                                             QMessageBox.No,\n                                             QMessageBox.Yes)\n                if reply == QMessageBox.Yes:\n                    self.trackLayer.commitChanges()\n                else:\n                    self.trackLayer.rollBack()\n            else:\n                self.trackLayer.commitChanges()\n            self.trackLayer.triggerRepaint()\n            self.editing = False\n            self.setPanMode()\n        else:\n            self.trackLayer.startEditing()\n            self.trackLayer.triggerRepaint()\n            self.editing  = True\n            self.modified = False\n            self.setPanMode()\n        self.adjustActions()\n```", "```py\n        self.editing  = False\n        self.modified= False\n```", "```py\n    def adjustActions(self):\n       if self.editing:\n            self.actionAddTrack.setEnabled(True)\n            self.actionEditTrack.setEnabled(True)\n            self.actionDeleteTrack.setEnabled(True)\n            self.actionGetInfo.setEnabled(True)\n            self.actionSetStartPoint.setEnabled(False)\n            self.actionSetEndPoint.setEnabled(False)\n            self.actionFindShortestPath.setEnabled(False)\n        else:\n            self.actionAddTrack.setEnabled(False)\n            self.actionEditTrack.setEnabled(False)\n            self.actionDeleteTrack.setEnabled(False)\n            self.actionGetInfo.setEnabled(False)\n            self.actionSetStartPoint.setEnabled(True)\n            self.actionSetEndPoint.setEnabled(True)\n            self.actionFindShortestPath.setEnabled(True)\n```", "```py\n    window.adjustActions()\n```", "```py\n    def quit(self):\n        if self.editing and self.modified:\n            reply = QMessageBox.question(self, \"Confirm\",\n                                         \"Save Changes?\",\n                                         QMessageBox.Yes |\n                                         QMessageBox.No |\n                                         QMessageBox.Cancel,\n                                         QMessageBox.Yes)\n            if reply == QMessageBox.Yes:\n                self.curEditedLayer.commitChanges()\n            elif reply == QMessageBox.No:\n                self.curEditedLayer.rollBack()\n\n            if reply != QMessageBox.Cancel:\n                qApp.quit()\n        else:\n            qApp.quit()\n```", "```py\n    def closeEvent(self, event):\n        self.quit()\n```"]