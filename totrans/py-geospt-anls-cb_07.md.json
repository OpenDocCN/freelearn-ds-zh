["```py\n    #!/usr/bin/env python\n    # -*- coding: utf-8 -*-\n    import subprocess\n    import psycopg2\n\n    db_host = \"localhost\"\n    db_user = \"pluto\"\n    db_passwd = \"secret\"\n    db_database = \"py_geoan_cb\"\n    db_port = \"5432\"\n\n    # connect to DB\n    conn = psycopg2.connect(host=db_host, user=db_user,\n                            port=db_port, password=db_passwd,\n                            database=db_database)\n\n    # create a cursor\n    cur = conn.cursor()\n\n    # input USGS ASCII DEM (and CDED)\n    input_dem = \"../geodata/dem_3857.dem\"\n\n    # create an sql file for loading into the PostGIS database raster\n    # command line with options\n    # -c create new table\n    # -I option will create a spatial GiST index on the raster column\n    # -C will apply raster constraints\n    # -M vacuum analyse the raster table\n\n    command = 'raster2pgsql -c -C -I -M ' + input_dem + ' geodata.dem_3857'\n\n    # write the output to a file\n\n    temp_sql_file = \"temp_sql.sql\"\n\n    # open, create new file to write sql statements into\n    with open(temp_sql_file, 'wb') as f:\n        try:\n            result = subprocess.call(command, stdout=f, shell=True)\n            if result != 0:\n                raise Exception('error code %d' % result)\n\n        except Exception as e:\n            print e\n\n    # open the file full of insert statements created by raster2pgsql\n    with open(temp_sql_file, 'r') as r:\n        # run through and execute each line inside the temp sql file\n        for sql_insert in r:\n            cur.execute(sql_insert)\n\n    print \"please open QGIS >= 2.8.x and view your loaded DEM data\"\n    ```", "```py\nWarning Executing shell commands that incorporate unsanitized input from an untrusted source makes a program vulnerable to shell injection, a serious security flaw which can result in arbitrary command execution. For this reason, the use of shell=True is strongly discouraged in cases where the command string is constructed from external input:\n\n```", "```py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nimport sys, gdal, os\nfrom gdalconst import GA_ReadOnly\nfrom os.path import realpath\nfrom shapely.geometry import LineString\n\ndef get_elevation(x_coord, y_coord, raster, bands, gt):\n    \"\"\"\n    get the elevation value of each pixel under\n    location x, y\n    :param x_coord: x coordinate\n    :param y_coord: y coordinate\n    :param raster: gdal raster open object\n    :param bands: number of bands in image\n    :param gt: raster limits\n    :return: elevation value of raster at point x,y\n    \"\"\"\n    elevation = []\n    xOrigin = gt[0]\n    yOrigin = gt[3]\n    pixelWidth = gt[1]\n    pixelHeight = gt[5]\n    px = int((x_coord - xOrigin) / pixelWidth)\n    py = int((y_coord - yOrigin) / pixelHeight)\n    for j in range(bands):\n        band = raster.GetRasterBand(j + 1)\n        data = band.ReadAsArray(px, py, 1, 1)\n        elevation.append(data[0][0])\n    return elevation\n\ndef write_to_csv(csv_out,result_profile_x_z):\n    # check if output file exists on disk if yes delete it\n    if os.path.isfile(csv_out):\n        os.remove(csv_out)\n\n    # create new CSV file containing X (distance) and Z value pairs\n    with open(csv_out, 'a') as outfile:\n        # write first row column names into CSV\n        outfile.write(\"distance,elevation\" + \"\\n\")\n        # loop through each pair and write to CSV\n        for x, z in result_profile_x_z:\n            outfile.write(str(round(x, 2)) + ',' + str(round(z, 2)) + '\\n')\n\nif __name__ == '__main__':\n    # set directory\n    in_dem = realpath(\"../geodata/dem_3857.dem\")\n\n    # open the image\n    ds = gdal.Open(in_dem, GA_ReadOnly)\n\n    if ds is None:\n        print 'Could not open image'\n        sys.exit(1)\n\n    # get raster bands\n    bands = ds.RasterCount\n\n    # get georeference info\n    transform = ds.GetGeoTransform()\n\n    # line defining the the profile\n    line = LineString([(-13659328.8483806, 6450545.73152317), (-13651422.7820022, 6466228.25663444)])\n    # length in meters of profile line\n    length_m = line.length\n\n    # lists of coords and elevations\n    x = []\n    y = []\n    z = []\n    # distance of the topographic profile\n    distance = []\n    for currentdistance in range(0, int(length_m), 20):\n        # creation of the point on the line\n        point = line.interpolate(currentdistance)\n        xp, yp = point.x, point.y\n        x.append(xp)\n        y.append(yp)\n        # extraction of the elevation value from the MNT\n        z.append(get_elevation(xp, yp, ds, bands, transform)[0])\n        distance.append(currentdistance)  \n\n    print (x)\n    print (y)\n    print (z)\n    print (distance)\n\n    # combine distance and elevation vales as pairs\n    profile_x_z = zip(distance,z)\n\n    csv_file = os.path.realpath('../geodata/output_profile.csv')\n    # output final csv data\n    write_to_csv(csv_file, profile_x_z)\n```", "```py\n>> python ch07-03_shaded_relief.py\n\n```", "```py\n    #!/usr/bin/env python\n    # -*- coding: utf-8 -*-\n    from osgeo import gdal\n    from numpy import gradient\n    from numpy import pi\n    from numpy import arctan\n    from numpy import arctan2\n    from numpy import sin\n    from numpy import cos\n    from numpy import sqrt\n    import matplotlib.pyplot as plt\n    import subprocess\n\n    def hillshade(array, azimuth, angle_altitude):\n        \"\"\"\n        :param array: input USGS ASCII DEM / CDED .dem\n        :param azimuth: sun position\n        :param angle_altitude: sun angle\n        :return: numpy array\n        \"\"\"\n\n        x, y = gradient(array)\n        slope = pi/2\\. - arctan(sqrt(x*x + y*y))\n        aspect = arctan2(-x, y)\n        azimuthrad = azimuth * pi / 180.\n        altituderad = angle_altitude * pi / 180.\n\n        shaded = sin(altituderad) * sin(slope)\\\n         + cos(altituderad) * cos(slope)\\\n         * cos(azimuthrad - aspect)\n        return 255*(shaded + 1)/2\n\n    ds = gdal.Open('../geodata/092j02_0200_demw.dem')\n    arr = ds.ReadAsArray()\n\n    hs_array = hillshade(arr, 90, 45)\n    plt.imshow(hs_array,cmap='Greys')\n    plt.savefig('../geodata/hillshade_whistler.png')\n    plt.show()\n\n    # gdal command line tool called gdaldem\n    # link  http://www.gdal.org/gdaldem.html\n    # usage:\n    # gdaldem hillshade input_dem output_hillshade\n    # [-z ZFactor (default=1)] [-s scale* (default=1)]\"\n    # [-az Azimuth (default=315)] [-alt Altitude (default=45)]\n    # [-alg ZevenbergenThorne] [-combined]\n    # [-compute_edges] [-b Band (default=1)] [-of format] [-co \"NAME=VALUE\"]* [-q]\n\n    create_hillshade = '''gdaldem hillshade -az 315 -alt 45 ../geodata/092j02_0200_demw.dem ../geodata/hillshade_3857.tif'''\n\n    subprocess.call(create_hillshade)\n    ```", "```py\n    #!/usr/bin/env python\n    # -*- coding: utf-8 -*-\n    import subprocess\n\n    # SLOPE\n    # - To generate a slope map from any GDAL-supported elevation raster :\n    # gdaldem slope input_dem output_slope_map\"\n    # [-p use percent slope (default=degrees)] [-s scale* (default=1)]\n    # [-alg ZevenbergenThorne]\n    # [-compute_edges] [-b Band (default=1)] [-of format] [-co \"NAME=VALUE\"]* [-q]\n\n    create_slope = '''gdaldem slope ../geodata/092j02_0200_demw.dem ../geodata/slope_w-degrees.tif '''\n\n    subprocess.call(create_slope)\n\n    # ASPECT\n    # - To generate an aspect map from any GDAL-supported elevation raster\n    # Outputs a 32-bit float raster with pixel values from 0-360 indicating azimuth :\n    # gdaldem aspect input_dem output_aspect_map\"\n    # [-trigonometric] [-zero_for_flat]\n    # [-alg ZevenbergenThorne]\n    # [-compute_edges] [-b Band (default=1)] [-of format] [-co \"NAME=VALUE\"]* [-q]\n\n    create_aspect = '''gdaldem aspect ../geodata/092j02_0200_demw.dem ../geodata/aspect_w.tif '''\n\n    subprocess.call(create_aspect)\n    ```", "```py\n    Driver: USGSDEM/USGS Optional ASCII DEM (and CDED)\n    Files: ../geodata/092j02_0200_demw.dem\n           ../geodata/092j02_0200_demw.dem.aux.xml\n    Size is 1201, 1201\n    Coordinate System is:\n    GEOGCS[\"NAD83\",\n        DATUM[\"North_American_Datum_1983\",\n            SPHEROID[\"GRS 1980\",6378137,298.257222101,\n                AUTHORITY[\"EPSG\",\"7019\"]],\n            TOWGS84[0,0,0,0,0,0,0],\n            AUTHORITY[\"EPSG\",\"6269\"]],\n        PRIMEM[\"Greenwich\",0,\n            AUTHORITY[\"EPSG\",\"8901\"]],\n        UNIT[\"degree\",0.0174532925199433,\n            AUTHORITY[\"EPSG\",\"9108\"]],\n        AUTHORITY[\"EPSG\",\"4269\"]]\n    Origin = (-123.000104166666630,50.250104166666667)\n    Pixel Size = (0.000208333333333,-0.000208333333333)\n    Metadata:\n      AREA_OR_POINT=Point\n    Corner Coordinates:\n    Upper Left  (-123.0001042,  50.2501042) (123d 0' 0.37\"W, 50d15' 0.38\"N)\n    Lower Left  (-123.0001042,  49.9998958) (123d 0' 0.37\"W, 49d59'59.63\"N)\n    Upper Right (-122.7498958,  50.2501042) (122d44'59.62\"W, 50d15' 0.38\"N)\n    Lower Right (-122.7498958,  49.9998958) (122d44'59.62\"W, 49d59'59.63\"N)\n    Center      (-122.8750000,  50.1250000) (122d52'30.00\"W, 50d 7'30.00\"N)\n    Band 1 Block=1201x1201 Type=Int16, ColorInterp=Undefined\n      Min=348.000 Max=2885.000\n      Minimum=348.000, Maximum=2885.000, Mean=1481.196, StdDev=564.262\n      NoData Value=-32767\n      Unit Type: m\n      Metadata:\n        STATISTICS_MAXIMUM=2885\n        STATISTICS_MEAN=1481.1960280116\n        STATISTICS_MINIMUM=348\n        STATISTICS_STDDEV=564.26229690401\n    ```", "```py\n    -32767 255 255 255\n    0 46 154 88\n    360 251 255 128\n    750 96 108 31\n    1100 148 130 55\n    2900 255 255 255\n    ```", "```py\n    #!/usr/bin/env python\n    # -*- coding: utf-8 -*-\n    import subprocess\n\n    dem_file = '../geodata/092j02_0200_demw.dem'\n    hillshade_relief = '../geodata/hillshade.tif'\n    relief = '../geodata/relief.tif'\n    final_color_relief = '../geodata/final_color_relief.tif'\n\n    create_hillshade = 'gdaldem hillshade -co compress=lzw -compute_edges ' + dem_file +  ' ' + hillshade_relief\n    subprocess.call(create_hillshade, shell=True)\n    print create_hillshade\n\n    cr = 'gdaldem color-relief -co compress=lzw ' + dem_file + ' ramp.txt ' + relief\n    subprocess.call(cr)\n    print cr\n\n    merge = 'python hsv_merge.py ' + relief + ' ' + hillshade_relief + ' ' + final_color_relief\n    subprocess.call(merge)\n    print merge\n\n    create_slope = '''gdaldem slope -co compress=lzw ../geodata/092j02_0200_demw.dem ../geodata/slope_w-degrees.tif '''\n\n    subprocess.call(create_slope)\n    ```"]