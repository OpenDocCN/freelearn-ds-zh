["```py\n'~A & B'\n```", "```py\n'0010' \n```", "```py\n    from qiskit import Aer, IBMQ\n    from qiskit.aqua.algorithms import Grover\n    from qiskit.aqua.components.oracles import LogicalExpressionOracle, TruthTableOracle\n    from qiskit.tools.visualization import plot_histogram\n    from IPython.core.display import display\n    global oracle_method, oracle_type\n    ```", "```py\n    def log_length(oracle_input,oracle_method):\n        from math import sqrt, pow, pi, log\n        if oracle_method==\"log\":\n            filtered = [c.lower() for c in oracle_input if             c.isalpha()]\n            result = len(filtered)\n            num_iterations=int(pi/4*(sqrt(pow(2,result))))\n        else:\n            num_iterations = int(pi/4*(sqrt(pow(2,\n                log(len(oracle_input),2)))))\n        print(\"Iterations: \", num_iterations)\n        return num_iterations\n    ```", "```py\n    def create_oracle(oracle_method):\n        oracle_text={\"log\":\"~A & ~B & C\",\"bit\":\"00001000\"}\n        # set the input\n        global num_iterations    \n        print(\"Enter the oracle input string, such         as:\"+oracle_text[oracle_method]+\"\\nor enter 'def'        for a default string.\")\n        oracle_input=input('\\nOracle input:\\n ')\n        if oracle_input==\"def\":\n            oracle_type=oracle_text[oracle_method]\n        else:\n            oracle_type = oracle_input\n        num_iterations=log_length(oracle_type, oracle_method)\n        return(oracle_type)\n    ```", "```py\n    def create_grover(oracle_type, oracle_method):\n        # Build the circuit\n        if oracle_method==\"log\":\n            algorithm = Grover(LogicalExpressionOracle(\n                oracle_type),num_iterations=num_iterations)\n            oracle_circuit = Grover(LogicalExpressionOracle(\n                oracle_type)).construct_circuit()\n        else:\n            algorithm = Grover(TruthTableOracle(\n                oracle_type),num_iterations=num_iterations)\n            oracle_circuit = Grover(TruthTableOracle(\n                oracle_type)).construct_circuit()\n        display(oracle_circuit.draw(output=\"mpl\"))\n        display(algorithm)\n        return(algorithm)\n    ```", "```py\n    def run_grover(algorithm,oracle_type,oracle_method):\n        # Run the algorithm on a simulator, printing the most     # frequently occurring result\n        backend = Aer.get_backend('qasm_simulator')\n        result = algorithm.run(backend)\n        print(\"Oracle method:\",oracle_method)\n        print(\"Oracle for:\", oracle_type)\n        print(\"Aer Result:\",result['top_measurement'])\n        display(plot_histogram(result['measurement']))\n        # Run the algorithm on an IBM Q backend, printing the     # most frequently occurring result\n        print(\"Getting provider...\")\n        if not IBMQ.active_account():\n            IBMQ.load_account()\n        provider = IBMQ.get_provider()\n        from qiskit.providers.ibmq import least_busy\n        filtered_backend = least_busy(provider.backends(        n_qubits=5,, operational=True, simulator=False))\n        result = algorithm.run(filtered_backend)\n        print(\"Oracle method:\",oracle_method)\n        print(\"Oracle for:\", oracle_type)\n        print(\"IBMQ \"+filtered_backend.name()+        \" Result:\",,result['top_measurement'])\n        display(plot_histogram(result['measurement']))\n        print(result)\n    ```", "```py\n    def main():\n        oracle_method=\"log\"\n        while oracle_method!=0:\n            print(\"Ch 11: Grover search with Aqua\")\n            print(\"------------------------------\")    \n            # set the oracle method: \"Log\" for logical         # expression or \"Bit\" for bit string. \n            oracle_method = input(\"Select oracle method (log             or bit):\\n\")\n            type=create_oracle(oracle_method)\n            algorithm=create_grover(type, oracle_method)        run_grover(algorithm,type, oracle_method)\n    ```", "```py\n    ~A & B\n    ```", "```py\nIn [1]: from qiskit import Aer\nIn [2]: from qiskit.aqua.algorithms import Grover\nIn [3]: from qiskit.aqua.components.oracles import LogicalExpressionOracle\nIn [4]: Grover(LogicalExpressionOracle(\"~A&B\")).run(backend)[\"top_measurement\"]\nOut[5]: '10'\n```", "```py\n    from qiskit import Aer, IBMQ\n    from qiskit.aqua.algorithms import Shor\n    import time\n    ```", "```py\n    def display_shor(N):\n        print(\"Building Shor circuit...\")\n        shor_circuit = Shor(N=N).construct_circuit()\n        print(shor_circuit)\n        print(\"Circuit data\\n\\nDepth: \",shor_circuit.        depth(),\"\\nWidth: \",shor_circuit.width(),\"\\nSize:        \",shor_circuit.size())\n    ```", "```py\n    def run_shor(N):\n        if N<=64: #Arbitrarily set upper limit for local               #simulator    \n            print(\"Getting local simulator backend...\")\n            backend = Aer.get_backend('qasm_simulator')\n        else:\n            print(\"Getting provider...\")\n            if not IBMQ.active_account():\n                IBMQ.load_account()\n            provider = IBMQ.get_provider()\n            print(\"Getting IBM Q simulator backend...\")\n            backend = provider.get_backend(\n                'ibmq_qasm_simulator')\n        print(\"Running Shor's algorithm for\",str(N),\"on\",        backend,\"...\")\n        results=Shor(N=N).run(backend)\n        print(\"\\nResults:\")\n        if results['factors']==[]:\n            print(\"No prime factors: \",str(N),\"=\",str(N))\n        elif isinstance(results['factors'][0],int):\n            print(\"Prime factors: \",str(N),\"=\",\n                results['factors'][0],\"^ 2\")\n        else:\n            print(\"Prime factors: \",str(N),\"=\",\n                results['factors'][0][0],\"*\",\n                results['factors'][0][1])\n    ```", "```py\n    def main():\n        number=1\n        print(\"\\nCh 11: Shor's algorithm with Aqua\")     \n        print(\"---------------------------------\")   \n        while number!=0:\n            number=int(input(\"\\nEnter an odd number N >1 (0\n                to exit):\\n\"))\n            if number>1 and number % 2>0:\n                type=input(\"Enter R to run the Shor\n                    algorithm, D to display the circuit.\\n\")\n                start_time=time.time()\n                if type.upper()==\"D\":\n                    display_shor(number)\n                elif type.upper()==\"R\":\n                    run_shor(number)\n                elif type.upper() in [\"RD\",\"DR\"]:\n                    display_shor(number)\n                    run_shor(number)\n                end_time=time.time()\n                print(\"Elapsed time: \",\"%.2f\" % (\n                    end_time-start_time), \"s\")\n            else:\n                print(\"The number must be odd \n                    and larger than 1.\")\n    ```", "```py\nIn [1]: from qiskit import Aer\nIn [2]: from qiskit.aqua.algorithms import Shor\nIn [3]: backend = Aer.get_backend('qasm_simulator')\nIn [4]: results=Shor(N=15).run(backend)\nIn [5]: results['factors']\n```", "```py\nOut[5] [[3, 5]]\n```", "```py\nIn [4]: results=Shor(N=15, a=2).run(backend)\n```", "```py\n    import qiskit\n    from qiskit.chemistry import *\n    ```", "```py\n    help(qiskit.chemistry)\n    ```", "```py\n/Users/<your_user_name>/opt/anaconda3/envs/<your_environment>/lib/python3.7/site-packages/qiskit/\n```"]