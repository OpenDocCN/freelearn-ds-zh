["```py\nfor i in list_1 \n```", "```py\nfrom itertools import (permutations, combinations, \\\n                       dropwhile, repeat, zip_longest)\npermutations?\ncombinations?\ndropwhile?\nrepeat?\nzip_longest?\n```", "```py\n    big_list_of_numbers = [1 for x in range (0, 10000000)] \n    big_list_of_numbers\n    ```", "```py\n    [1,\n     1,\n     1,\n     1,\n     1,\n     1,\n     1,\n     1,\n     1,\n     1,\n    ```", "```py\n    from sys import getsizeof\n    getsizeof(big_list_of_numbers)\n    ```", "```py\n    81528056\n    ```", "```py\n    from itertools import repeat\n    small_list_of_numbers = repeat(1, times=10000000)\n    getsizeof(small_list_of_numbers)\n    ```", "```py\n    56\n    ```", "```py\n    for i, x in enumerate(small_list_of_numbers): \n        print(x)\n        if i > 10:\n            break\n    ```", "```py\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    ```", "```py\n    import pandas as pd\n    stack = []\n    ```", "```py\n    stack.append('my_test@test.edu')\n    stack.append('rahul.subhramanian@test.edu')\n    stack.append('sania.test@test.edu')\n    stack.append('alec_baldwin@test.edu')\n    stack.append('albert90@test.edu')\n    stack.append('stewartj@test.edu')\n    stack\n    ```", "```py\n    ['my_test@test.edu',\n     'rahul.subhramanian@test.edu',\n     'sania.test@test.edu',\n     'alec_baldwin@test.edu',\n     'albert90@test.edu',\n     'stewartj@test.edu']\n    ```", "```py\n    tos = stack.pop()\n    tos\n    ```", "```py\n    'stewartj@test.edu'\n    ```", "```py\n    stack.append(\"Hello@test.com\")\n    stack\n    ```", "```py\n    ['my_test@test.edu',\n     'rahul.subhramanian@test.edu',\n     'sania.test@test.edu',\n     'alec_baldwin@test.edu',\n     'albert90@test.edu',\n     'Hello@test.com']\n    ```", "```py\n    def stack_push(s, value):\n        return s + [value]\n    def stack_pop(s):\n        tos = s[-1]\n        del s[-1]\n        return tos\n    url_stack = []\n    url_stack\n    ```", "```py\n    []\n    ```", "```py\n    wikipedia_datascience = \"\"\"Data science is an interdisciplinary field that uses scientific methods, processes, algorithms and systems to extract knowledge [https://en.wikipedia.org/wiki/Knowledge] and insights from data [https://en.wikipedia.org/wiki/Data] in various forms, both structured and unstructured,similar to data mining [https://en.wikipedia.org/wiki/Data_mining]\"\"\" \n    ```", "```py\n    len(wikipedia_datascience) \n    ```", "```py\n    347\n    ```", "```py\n    wd_list = wikipedia_datascience.split()\n    wd_list\n    ```", "```py\n    ['Data',\n     'science',\n     'is',\n     'an',\n     'interdisciplinary',\n     'field',\n     'that',\n     'uses',\n     'scientific',\n     'methods,',\n    ```", "```py\n    len(wd_list)\n    ```", "```py\n    34\n    ```", "```py\n    for word in wd_list:\n        if word.startswith(\"[https://\"):\n            url_stack = stack_push(url_stack, word[1:-1])  \n            print(word[1:-1])\n    ```", "```py\n    https://en.wikipedia.org/wiki/Knowledge\n    https://en.wikipedia.org/wiki/Data\n    https://en.wikipedia.org/wiki/Data_mining\n    ```", "```py\n    print(url_stack) \n    ```", "```py\n    ['https://en.wikipedia.org/wiki/Knowledge',\n     'https://en.wikipedia.org/wiki/Data',\n     'https://en.wikipedia.org/wiki/Data_mining']\n    ```", "```py\n    for i in range(0, len(url_stack)):\n        print(stack_pop(url_stack)) \n    ```", "```py\n    print(url_stack) \n    ```", "```py\n    []\n    ```", "```py\n    import math \n    ```", "```py\n    def my_sine():\n        return lambda x: math.sin(math.radians(x))\n    def my_cosine():\n        return lambda x: math.cos(math.radians(x)) \n    ```", "```py\n    sine = my_sine()\n    cosine = my_cosine()\n    math.pow(sine(30), 2) + math.pow(cosine(30), 2) \n    ```", "```py\n    1.0\n    ```", "```py\nlambda x  :   <do something with x>\n```", "```py\n    capitals = [(\"USA\", \"Washington\"), (\"India\", \"Delhi\"), (\"France\", \"Paris\"), (\"UK\", \"London\")]\n    ```", "```py\n    capitals \n    ```", "```py\n    [('USA', 'Washington'),\n     ('India', 'Delhi'),\n     ('France', 'Paris'),\n     ('UK', 'London')]\n    ```", "```py\n    capitals.sort(key=lambda item: item[1])\n    capitals \n    ```", "```py\n    [('India', 'Delhi'),\n     ('UK', 'London'),\n     ('France', 'Paris'),\n     ('USA', 'Washington')]\n    ```", "```py\n    list_of_words = [\"Hello\", \"there.\", \"How\", \"are\", \"you\", \"doing?\"] \n    list_of_words\n    ```", "```py\n    ['Hello', 'there.', 'How', 'are', 'you', 'doing?']\n    ```", "```py\n    check_for = [\"How\", \"are\"] \n    check_for\n    ```", "```py\n    ['How', 'are']\n    ```", "```py\n    all(w in list_of_words for w in check_for) \n    ```", "```py\n    True\n    ```", "```py\n    %%time\n    queue = []\n    for i in range(0, 100000):\n        queue.append(i)\n    print(\"Queue created\")\n    queue \n    ```", "```py\n    for i in range(0, 100000):\n        queue.pop(0)\n    print(\"Queue emptied\") \n    ```", "```py\n    Queue emptied\n    ```", "```py\n    %%time\n    for i in range(0, 100000):\n        queue.pop(0)\n    print(\"Queue emptied\") \n    queue\n    ```", "```py\n    %%time\n    from collections import deque\n    queue2 = deque()\n    for i in range(0, 100000):\n        queue2.append(i)\n    print(\"Queue created\")\n    for i in range(0, 100000):\n        queue2.popleft()\n    print(\"Queue emptied\") \n    ```", "```py\n    12.0\n    21.0\n    102.0\n    120.0\n    201.0\n    210.0\n    ```", "```py\n    import os \n    ```", "```py\n    os.environ['MY_KEY'] = \"MY_VAL\"\n    os.getenv('MY_KEY') \n    ```", "```py\n    'MY_VAL'\n    ```", "```py\n    print(os.getenv('MY_KEY_NOT_SET')) \n    ```", "```py\n    None\n    ```", "```py\n    print(os.environ) \n    ```", "```py\nfd = open(\"../datasets/data_temporary_files.txt\")\n```", "```py\nfd = open('AA.txt',\"rb\")\nfd\n```", "```py\n<_io.BufferedReader name='../datasets/AA.txt'>\n```", "```py\nfd = open(\"../datasets/data_temporary_files.txt \", \"w\")\nfd\n```", "```py\n<_io.TextIOWrapper name='../datasets/data_temporary_files.txt ' mode='w' encoding='cp1252'>\n```", "```py\n    fd = open(\"../datasets/AA.txt\", \"rb\")\n    ```", "```py\n    fd.close()\n    ```", "```py\nwith open(\"../datasets/AA.txt\") as fd:\n    print(fd.closed)\nprint(fd.closed) \n```", "```py\nFalse\nTrue\n```", "```py\n    with open(\"../datasets/Alice`s Adventures in Wonderland, \"\\\n              \"by Lewis Carroll\", encoding=\"utf8\") as fd: \n        for line in fd: \n            print(line)\n    readline, which reads one line at a time from a file.\n    ```", "```py\n    with open(\"../datasets/Alice`s Adventures in Wonderland, \"\\\n              \"by Lewis Carroll\", encoding=\"utf8\") as fd: \n        for line in fd:\n            print(line)\n        print(\"Ended first loop\")\n        for line in fd:\n            print(line)\n    ```", "```py\n    data_dict = {\"India\": \"Delhi\", \"France\": \"Paris\",\\\n                 \"UK\": \"London\", \"USA\": \"Washington\"}\n    with open(\"../datasets/data_temporary_files.txt\", \"w\") as fd:\n        for country, capital in data_dict.items():\n            fd.write(\"The capital of {} is {}\\n\"\\\n                     .format(country, capital))\n    ```", "```py\n    with open(\"../datasets/data_temporary_files.txt\", \"r\") as fd:\n        for line in fd:\n            print(line)\n    ```", "```py\n    The capital of India is Delhi\n    The capital of France is Paris\n    The capital of UK is London\n    The capital of USA is Washington\n    ```", "```py\n    data_dict_2 = {\"China\": \"Beijing\", \"Japan\": \"Tokyo\"}\n    with open(\"../datasets/data_temporary_files.txt\", \"a\") as fd:\n        for country, capital in data_dict_2.items():\n            print(\"The capital of {} is {}\"\\\n                  .format(country, capital), file=fd)\n    ```", "```py\n    with open(\"\\n, at the end of the string to be written. The print function does that automatically for us.To access the source code for this specific section, please refer to [https://packt.live/2BkVh8j](https://packt.live/2BkVh8j). You can also run this example online at [https://packt.live/3hB7xT0](https://packt.live/3hB7xT0).\n    ```"]