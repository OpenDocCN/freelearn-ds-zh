["```py\n[general]\nname=Select by Radius\ndescription=Select features in the given radius around another one\nabout=Selects features of the specified vector layer which are located within the given radius around reference pre-selected features of the any other layer\ncategory=Vector\nversion=0.1.0\nqgisMinimumVersion=2.8\n\nauthor=enter_your_name_here\nemail=your@email\n\nicon=icons/selectradius.svg\n\ntags=vector,select,selection\n\nhomepage=\ntracker=\nrepository=\n\nexperimental=True\ndeprecated=False\n```", "```py\n(1) def classFactory(iface):\n(2)    from selectradius.selectradius_plugin import SelectRadiusPlugin\n(3)    return SelectRadiusPlugin(iface)\n```", "```py\n( 1) import os\n( 2)\n( 3) from PyQt4.QtCore import (\n( 4)    QLocale, QSettings, QFileInfo, QCoreApplication, QTranslator)\n( 5) from PyQt4.QtGui import (QMessageBox, QAction, QIcon)\n( 6)\n( 7) from qgis.core import QGis\n( 8)\n( 9) pluginPath = os.path.dirname(__file__)\n(10)\n(11)\n(12) class SelectRadiusPlugin:\n(13)    def __init__(self, iface):\n(14)        self.iface = iface\n(15)\n(16)        overrideLocale = QSettings().value('locale/overrideFlag', False, bool)\n(17)        if not overrideLocale:\n(18)          locale = QLocale.system().name()[:2]\n(19)        else:\n(20)          locale = QSettings().value('locale/userLocale', '')\n(21)\n(22)        qmPath = '{}/i18n/selectradius_{}.qm'.format(pluginPath, locale)\n(23)\n(24)        if QFileInfo(qmPath).exists():\n(25)          self.translator = QTranslator()\n(26)          self.translator.load(qmPath)\n(27)          QCoreApplication.installTranslator(self.translator)\n(28)\n(29)    def initGui(self):\n(30)        self.actionRun = QAction(\n(31)            self.tr('Select by Radius'), self.iface.mainWindow())\n(32)        self.actionRun.setIcon(\n(33)            QIcon(os.path.join(pluginPath, 'icons', 'selectradius.svg')))\n(34)        self.actionRun.setWhatsThis(\n(35)           self.tr('Select features within given radius'))\n(36)        self.actionRun.setObjectName('SelectRadiusRun')\n(37)\n(38)        self.actionAbout = QAction(self.tr('About'), self.iface.mainWindow())\n(39)        self.actionAbout.setIcon(\n(40)            QIcon(os.path.join(pluginPath, 'icons', 'about.png')))\n(41)        self.actionAbout.setWhatsThis(self.tr('About Select by Radius'))\n(42)        self.actionAbout.setObjectName('SelectRadiusAbout')\n(43)\n(44)        self.iface.addPluginToVectorMenu(\n(45)            self.tr('Select by Radius'), self.actionRun)\n(46)        self.iface.addPluginToVectorMenu(\n(47)            self.tr('Select by Radius'), self.actionAbout)\n(48)        self.iface.addVectorToolBarIcon(self.actionRun)\n(49)\n(50)        self.actionRun.triggered.connect(self.run)\n(51)        self.actionAbout.triggered.connect(self.about)\n(52)\n(53)    def unload(self):\n(54)        self.iface.removePluginVectorMenu(\n(55)            self.tr('Select by Radius'), self.actionRun)\n(56)        self.iface.removePluginVectorMenu(\n(57)            self.tr('Select by Radius'), self.actionAbout)\n(58)        self.iface.removeVectorToolBarIcon(self.actionRun)\n(59)\n(60)    def run(self):\n(61)        pass\n(62)\n(63)    def about(self):\n(64)        pass\n(65)\n(66)    def tr(self, text):\n(67)        return QCoreApplication.translate('SelectRadius', text)\n```", "```py\n( 1) import os\n( 2) import ConfigParser\n( 3)\n( 4) from PyQt4 import uic\n( 5) from PyQt4.QtCore import QUrl\n( 6) from PyQt4.QtGui import QTextDocument, QDialogButtonBox, QPixmap\n( 7)\n( 8) pluginPath = os.path.split(os.path.dirname(__file__))[0]\n( 9) WIDGET, BASE = uic.loadUiType(\n(10)    os.path.join(pluginPath, 'ui', 'aboutdialogbase.ui'))\n(11)\n(12)\n(13) class AboutDialog(BASE, WIDGET):\n(14)    def __init__(self, parent=None):\n(15)        super(AboutDialog, self).__init__(parent)\n(16)        self.setupUi(self)\n(17)\n(18)        cfg = ConfigParser.SafeConfigParser()\n(19)        cfg.read(os.path.join(pluginPath, 'metadata.txt'))\n(20)        version = cfg.get('general', 'version')\n(21)\n(22)        self.lblLogo.setPixmap(\n(23)            QPixmap(os.path.join(pluginPath, 'icons', 'selectradius.svg')))\n(24)        self.lblVersion.setText(self.tr('Version: %s') % version)\n(25)\n(26)        doc = QTextDocument()\n(27)        doc.setHtml(self.getAboutText())\n(28)        self.textBrowser.setDocument(doc)\n(29)        self.textBrowser.setOpenExternalLinks(True)\n(30)\n(31)    def getAboutText(self):\n(32)        return self.tr(\n(33)            '<p>Select features of the specified vector layer within given '\n(34)            'radius around pre-selected reference features from the another '\n(35)            'vector layer.</p>'\n(36)            '<p>Developed as demo plugin for the \"QGIS By Example\" book by '\n(37)            '<a href=\"https://www.packtpub.com/\">Packt Publishing</a>.</p>')\n```", "```py\nfrom selectradius.gui.aboutdialog import AboutDialog\n```", "```py\n(1)    def about(self):\n(2)        d = AboutDialog()\n(3)        d.exec_()\n```", "```py\n(1) import os\n(2)\n(3) from PyQt4 import uic\n(4) from PyQt4.QtCore import QSettings\n(5) from PyQt4.QtGui import QDialogButtonBox, QDialog\n(6)\n(7) from qgis.core import QgsGeometry, QgsFeatureRequest, QgsSpatialIndex\n(8) from qgis.gui import QgsMessageBar\n```", "```py\n(1) pluginPath = os.path.split(os.path.dirname(__file__))[0]\n(2) WIDGET, BASE = uic.loadUiType(\n(3)    os.path.join(pluginPath, 'ui', 'selectradiusdialogbase.ui'))\n```", "```py\n( 1) class SelectRadiusDialog(BASE, WIDGET):\n( 2)    def __init__(self, iface, parent=None):\n( 3)        super(SelectRadiusDialog, self).__init__(parent)\n( 4)        self.setupUi(self)\n( 5)\n( 6)        self.iface = iface\n( 7)\n( 8)        self.btnOk = self.buttonBox.button(QDialogButtonBox.Ok)\n( 9)        self.btnClose = self.buttonBox.button(QDialogButtonBox.Close)\n(10)\n(11)        self.cmbSelectionMode.clear()\n(12)        self.cmbSelectionMode.addItem(self.tr('Create new selection'))\n(13)        self.cmbSelectionMode.addItem(self.tr('Add to current selection'))\n(14)        self.cmbSelectionMode.addItem(self.tr('Remove from current selection'))\n(15)\n(16)        self.loadSettings()\n```", "```py\n( 1)    def loadSettings(self):\n( 2)        settings = QSettings('PacktPub', 'SelectRadius')\n( 3)\n( 4)        self.spnRadius.setValue(settings.value('radius', 1, float))\n( 5)        self.cmbSelectionMode.setCurrentIndex(\n( 6)            settings.value('selectionMode', 0, int))\n( 7)\n( 8)    def saveSettings(self):\n( 9)        settings = QSettings('PacktPub', 'SelectRadius')\n(10)\n(11)        settings.setValue('radius', self.spnRadius.value())\n(12)        settings.setValue(\n(13)            'selectionMode', self.cmbSelectionMode.currentIndex())\n```", "```py\n( 1)    def reject(self):\n( 2)        self.saveSettings()\n( 3)        QDialog.reject(self)\n( 4)\n( 5)    def accept(self):\n( 6)        self.saveSettings()\n( 7)\n( 8)        targetLayer = self.cmbTargetLayer.currentLayer()\n( 9)        if targetLayer is None:\n(10)            self.showMessage(\n(11)              self.tr('Target layer is not set. '\n(12)                    'Please specify layer and try again,'),\n(13)              QgsMessageBar.WARNING)\n(14)            return\n(15)\n(16)        referenceLayer = self.cmbReferenceLayer.currentLayer()\n(17)        if referenceLayer is None:\n(18)            self.showMessage(\n(19)              self.tr('Reference layer is not set. '\n(20)                    'Please specify layer and try again.'),\n(21)              QgsMessageBar.WARNING)\n(22)            return\n(23)\n(24)        referenceFeatures = referenceLayer.selectedFeatures()\n(25)        if len(referenceFeatures) == 0:\n(26)            self.showMessage(\n(27)              self.tr('There are no reference features selected in the '\n(28)                    'reference layer. Select at least one feature and '\n(29)                    'try again.'),\n(30)              QgsMessageBar.WARNING)\n(31)            return\n```", "```py\n(1)    def showMessage(self, message, level=QgsMessageBar.INFO):\n(2)        self.iface.messageBar().pushMessage(\n(3)            message, level, self.iface.messageTimeout())\n```", "```py\nfrom selectradius.gui.selectradiusdialog import SelectRadiusDialog\n```", "```py\n(1)    def run(self):\n(2)        dlg = SelectRadiusDialog(self.iface)\n(3)        dlg.exec_()\n```", "```py\n( 1)        self.btnOk.setEnabled(False)\n( 2)        self.btnClose.setEnabled(False)\n( 3)\n( 4)        request = QgsFeatureRequest()\n( 5)        request.setFlags(\n( 6)           request.flags() ^ QgsFeatureRequest.SubsetOfAttributes)\n( 7)\n( 8)        index = QgsSpatialIndex(targetLayer.getFeatures(request))\n( 9)\n(10)        selection = []\n(11)        for f in referenceFeatures:\n(12)            geom = QgsGeometry(f.geometry())\n(13)            bufferedGeometry = geom.buffer(self.spnRadius.value(), 5)\n(14)\n(15)            intersectedIds = index.intersects(bufferedGeometry.boundingBox())\n(16)\n(17)           self.progressBar.setRange(0, len(intersectedIds))\n(18)\n(19)           for i in intersectedIds:\n(20)              ft = targetLayer.getFeatures(request.setFilterFid(i)).next()\n(21)              geom = ft.geometry()\n(22)              if geom.within(bufferedGeometry):\n(23)                  selection.append(i)\n(24)\n(25)              self.progressBar.setValue(self.progressBar.value() + 1)\n(26)\n(27)        if self.cmbSelectionMode.currentIndex() == 1:\n(28)            selection = list(\n(29)              set(targetLayer.selectedFeaturesIds()).union(selection))\n(30)        elif self.cmbSelectionMode.currentIndex() == 2:\n(31)            selection = list(\n(32)              set(targetLayer.selectedFeaturesIds()).difference(selection))\n(33)        targetLayer.setSelectedFeatures(selection)\n(34)\n(35)        self.progressBar.reset()\n(36)        self.btnOk.setEnabled(True)\n(37)        self.btnClose.setEnabled(True)\n(38)        self.showMessage(self.tr('Completed.'), QgsMessageBar.SUCCESS)\n```", "```py\n( 1) SOURCES = __init__.py \\\n( 2)          selectradius_plugin.py \\\n( 3)          gui/selectradiusdialog.py \\\n( 4)          gui/aboutdialog.py \\\n( 5)\n( 6) FORMS = ui/selectradiusdialogbase.ui \\\n( 7)        ui/aboutdialogbase.ui\n( 8)\n( 9) TRANSLATIONS = i18n/selectradius_uk.ts \\\n(10)              i18n/selectradius_de.ts\n```", "```py\npylupdate4 -verbose selectradius.pro\n\n```"]