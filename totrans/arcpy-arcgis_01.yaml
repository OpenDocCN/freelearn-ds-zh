- en: Chapter 1. Introduction to Python for ArcGIS
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章：ArcGIS的Python简介
- en: In this chapter, we will discuss the development of Python as a programming
    language, from its beginning in the late 1980s to its current state. We will discuss
    the philosophy of design that spurred its development, and touch on important
    modules that will be used throughout the book, especially focusing on the modules
    built into the Python standard library. This overview of the language and its
    features will help explain what makes Python a great language for ArcGIS automation.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论Python作为编程语言的发展，从20世纪80年代末的起点到现在的状态。我们将讨论推动其发展的设计哲学，并简要介绍本书中将使用的重要模块，特别是关注内置在Python标准库中的模块。这种对语言及其功能的概述将有助于解释是什么让Python成为ArcGIS自动化的优秀语言。
- en: 'This chapter will cover:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖：
- en: 'A quick overview of Python: What it is and does, who created it, and where
    it is now'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python快速概述：它是什么，做什么，谁创建了它，现在在哪里
- en: The ArcPy module and other important modules
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ArcPy**模块和其他重要模块'
- en: Python as a general purpose programming language
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python作为通用编程语言
- en: Overview of Python
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python概述
- en: '**Python**, created by *Guido van Rossum* in 1989, was named after his favorite
    comedy troupe*,* Monty Python. His work group at the time had a tradition of naming
    programs after TV shows, and he wanted something irreverent and different from
    its predecessors - ABC, Pascal, Ada, Eiffel, FORTRAN, and others. So he settled
    on Python, feeling it was a bit edgy and catchy as well. It''s certainly more
    fun to say than C, the language on which Python is based.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**Python**，由*吉多·范罗瑟姆*于1989年创建，以他最喜欢的喜剧团体*蒙提·派森命名。当时他的工作组有一个将程序命名为电视节目的传统，他想要一个不拘一格且与众不同的名字——ABC、Pascal、Ada、Eiffel、FORTRAN和其他。因此，他选择了Python，感觉这个名字有点儿前卫和吸引人。当然，比起Python所基于的语言C来说，这个名字听起来更有趣。'
- en: Today, Python is a major programming language. It is used in web development,
    database administration, and even to program robots. Most importantly to GIS Analysts,
    Python can be used to control ArcGIS tools and Map Documents to produce geospatial
    data and maps in an organized and speedy manner using the excellent **ArcPy**
    module.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，Python是一种主要的编程语言。它被用于网站开发、数据库管理，甚至用于编程机器人。对GIS分析师来说最重要的是，Python可以用来控制ArcGIS工具和地图文档，使用优秀的**ArcPy**模块以有组织和快速的方式产生地理空间数据和地图。
- en: ArcPy is installed with ArcGIS for desktop and ArcGIS for server. ArcPy has
    been the official ArcGIS scripting language since ArcGIS 10.0 and has steadily
    improved in functionality and implementation. This book will target ArcGIS for
    Desktop 10.1 and later, and will demonstrate how to make use of Python and its
    powerful programming libraries (or modules) when crafting complex geospatial analyses.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: ArcPy与ArcGIS桌面版和ArcGIS服务器版一起安装。自ArcGIS 10.0以来，ArcPy一直是官方的ArcGIS脚本语言，并在功能和实现方面稳步改进。本书将针对ArcGIS桌面版10.1及以后的版本，并演示如何利用Python及其强大的编程库（或模块）来构建复杂的地理空间分析。
- en: Python as a programming language
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python作为编程语言
- en: 'Over the past 40 years, programming languages have developed from assembly
    and machine code towards high-level abstracted languages that are much closer
    to English. The Python programming language was designed to overcome many issues
    that programmers were complaining about in the 1980s: slow development time, overly
    complicated syntax, and horrible readability. *Van Rossum* wanted to develop a
    language that could enable rapid code development and testing, have simple or
    at least readable) syntax, and produce results with fewer lines of code, in less
    time. The first version of Python (0.9.0) was released in 1991 and was freely
    obtainable from the start; Python was open source before the term open source
    was invented.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的40年里，编程语言已经从汇编语言和机器代码发展到了更接近英语的高级抽象语言。Python编程语言的设计是为了克服1980年代程序员所抱怨的许多问题：开发速度慢、语法过于复杂、可读性差。*范罗瑟姆*希望开发一种能够实现快速代码开发和测试、具有简单或至少可读的语法，并且用更少的代码行、更短的时间产生结果的编程语言。Python的第一个版本（0.9.0）于1991年发布，并且从一开始就可以免费获取；在“开源”这个术语被发明之前，Python就是开源的。
- en: Interpreted language
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解释型语言
- en: Python is an interpreted language. It is written in C, a compiled language,
    and the code is interpreted from Python into C before it is executed. Practically,
    this means that the code is executed as soon as it is converted and compiled.
    While code interpretation can have speed implications for the execution of Python-based
    programs, the faster development time allowed by Python makes this drawback easy
    to ignore. Testing of code snippets is much faster in an interpretive environment,
    and it is perfect to create scripts to automate basic, repeatable computing tasks.
    Python scripts have the `.py` extentions. Once the code has been interpreted,
    a second Python script (with the `.pyc` extentions) is generated to save the compiled
    code. The `.pyc` script will be automatically recompiled when changes are made
    in the original `.py` script.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Python 是一种解释型语言。它是用 C 语言编写的，C 是一种编译型语言，代码在执行之前从 Python 解释成 C。实际上，这意味着代码在转换和编译后立即执行。虽然代码解释可能会对基于
    Python 的程序的执行速度产生影响，但 Python 允许的快速开发时间使得这个缺点很容易被忽略。在解释型环境中测试代码片段的速度要快得多，非常适合创建自动化基本、可重复的计算任务的脚本。Python
    脚本具有 `.py` 扩展名。一旦代码被解释，就会生成第二个 Python 脚本（具有 `.pyc` 扩展名），以保存编译后的代码。当原始 `.py` 脚本中的更改时，`.pyc`
    脚本将自动重新编译。
- en: Standard (built-in) library
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标准库（内置库）
- en: Python, when installed, has a basic set of functionality that is referred to
    as the standard library. These tools allow Python to perform string manipulations,
    math computations, and HTTP calls and URL parsing, along with many other functions.
    Some of the tool libraries, known to Python programmers as modules, are built-in
    and available as soon as Python is started, while others must be explicitly called
    using the `import` keyword to make their functions and classes available. Other
    modules have been developed by third parties and can be downloaded and installed
    onto the Python installation as needed.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Python，一旦安装，就有一组基本的功能，被称为标准库。这些工具允许 Python 执行字符串操作、数学计算、HTTP 调用和 URL 解析，以及许多其他功能。一些工具库，Python
    程序员称之为模块，是内置的，并且一旦启动 Python 就可用，而其他模块必须使用 `import` 关键字显式调用，以使它们的函数和类可用。其他模块是由第三方开发的，可以根据需要下载并安装到
    Python 安装中。
- en: Many new programmers wonder if Python is a real programming language, which
    is a loaded question. The answer is yes; Python can be used to create complete
    programs, build websites, run computer networks, and much more. The built-in modules
    and add-on modules make Python very powerful, and it can be (and has been) used
    for nearly any part of a computer—operating systems, databases, web servers, desktop
    applications, and so on. It is not always the best choice for the development
    of these tools, but that has not stopped programmers from trying and even succeeding.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 许多新程序员会 wonder 如果 Python 是一种真正的编程语言，这是一个有争议的问题。答案是肯定的；Python 可以用来创建完整的程序，构建网站，运行计算机网络，以及更多。内置模块和附加模块使
    Python 非常强大，它可以（并且已经被）用于计算机的几乎所有部分——操作系统、数据库、网络服务器、桌面应用程序等等。对于这些工具的开发，Python 并非总是最佳选择，但这并没有阻止程序员们尝试，甚至取得成功。
- en: The glue language
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 粘合语言
- en: Python is at its best when it is used as a glue language. This term describes
    the use of Python to control other programs, sending inputs to them and collecting
    outputs, which are then sent to another program or written to disk. An ArcGIS
    example would be to use Python to download zipped shapefiles from a website, unzipping
    the files, processing the files using ArcToolbox, and compiling the results into
    an Excel spreadsheet. All of this is accomplished using freely available modules
    that are either included in Python's standard library, or added when ArcGIS is
    installed.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Python 被用作粘合语言时，它表现得最好。这个术语描述了使用 Python 来控制其他程序，向它们发送输入并收集输出，然后将这些输出发送到另一个程序或写入磁盘的过程。一个
    ArcGIS 的例子是使用 Python 从网站上下载压缩的 shapefile，解压文件，使用 ArcToolbox 处理文件，并将结果编译成 Excel
    电子表格。所有这些都可以使用免费提供的模块完成，这些模块要么包含在 Python 的标准库中，要么在安装 ArcGIS 时添加。
- en: Wrapper modules
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 包装模块
- en: The ArcPy module is a wrapper module. Wrapper modules are common in Python,
    and are so named because they wrap Python onto the tools we will need. They allow
    us to use Python to interface with other programs written in C or other programming
    languages, using the **Application Programming Interface** (**API**) of those
    programs. For example, wrappers make it possible to extract data from an Excel
    spreadsheet and transform or load the data into another program, such as ArcGIS.
    Not all modules are wrappers; some modules are written in pure Python and perform
    their analysis and computations using the Python syntax. Either way, the end result
    is that a computer and its programs are available to be manipulated and controlled
    using Python.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: ArcPy 模块是一个包装模块。在 Python 中，包装模块很常见，之所以这样命名是因为它们将 Python 包装到我们将需要的工具上。它们允许我们使用
    Python 与用 C 或其他编程语言编写的其他程序进行接口，使用这些程序的 **应用程序编程接口**（**API**）。例如，包装器使得从 Excel 电子表格中提取数据并将数据转换或加载到另一个程序（如
    ArcGIS）成为可能。并非所有模块都是包装器；一些模块是用纯 Python 编写的，并使用 Python 语法执行分析和计算。无论如何，最终结果是计算机及其程序都可以通过
    Python 进行操作和控制。
- en: 'The *Zen of Python* was created to be straightforward, readable, and simplified,
    compared to other languages that existed previously. This governing philosophy
    was organized into a poem by *Tim Peters*, an early Python developer called the
    *Zen of Python*; it is an Easter egg (a hidden feature) included in every Python
    installation and is shown when `import this` is typed in the Python interpreter:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '*Python 的禅* 是为了简单、易读和简化而创建的，与之前存在的其他语言相比。这种指导哲学由早期 Python 开发者 *Tim Peters*
    组织成一首诗，称为 *Python 的禅*；它是一个隐藏特性（隐藏功能），包含在每个 Python 安装中，并在输入 `import this` 时在 Python
    解释器中显示：'
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Go to [https://www.python.org/doc/humor/](https://www.python.org/doc/humor/)
    for more information.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 前往 [https://www.python.org/doc/humor/](https://www.python.org/doc/humor/) 获取更多信息。
- en: The basics of Python
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python 的基础知识
- en: Python has a number of language requirements and conventions that allow for
    the control of modules and structuring of code. The following are a number of
    important basic concepts, which will be used throughout this book and when crafting
    scripts for use with geospatial analyses.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Python 有许多语言要求和约定，允许控制模块和代码结构。以下是一些重要的基本概念，这些概念将在本书中以及编写用于地理空间分析的脚本时使用。
- en: Import statements
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 导入语句
- en: Import statements are used to augment the power of Python by calling other modules
    for use in the script. These modules can be part of the standard Python library
    of modules, such as the math module (used to do higher mathematical calculations)
    or, importantly, ArcPy, which will allow us to interact with ArcGIS.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 导入语句用于通过调用其他模块来增强 Python 的功能，以便在脚本中使用。这些模块可以是标准 Python 库的一部分，例如 math 模块（用于进行高级数学计算）或，更重要的是，ArcPy，它将使我们能够与
    ArcGIS 进行交互。
- en: Note
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '`Import` statements can be located anywhere before the module is used, but
    by convention, they are located at the top of a script.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`导入` 语句可以在使用模块之前的位置放置，但按照惯例，它们位于脚本的顶部。'
- en: 'There are three ways to create an `import` statement. The first, and most standard,
    is to import the whole module as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 `导入` 语句有三种方式。第一种，也是最标准的方式，是如下导入整个模块：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Using this method, we can even import more than one module on the same line.
    The following imports three modules: `arcpy`, `os` (the operating system module),
    and `sys` (the Python system module):'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用这种方法，我们甚至可以在同一行导入多个模块。以下导入三个模块：`arcpy`、`os`（操作系统模块）和 `sys`（Python 系统模块）：
- en: '[PRE2]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The next method of importing a script is to import a specific portion of a
    module, instead of importing the entire module, using the `from <module> import
    <submodule>` syntax:'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入脚本的下一个方法是导入模块的特定部分，而不是导入整个模块，使用 `from <module> import <submodule>` 语法：
- en: '[PRE3]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This method is used when only a portion of the code from ArcPy will be needed;
    it has the practical effect of limiting the amount of memory used by the module
    when it is called. We can also import multiple portions of the module in the same
    fashion:'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当只需要 ArcPy 的一部分代码时，使用这种方法；它实际上限制了模块在调用时使用的内存量。我们也可以以相同的方式导入模块的多个部分：
- en: '[PRE4]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The third way to import a module is the `from <module> import <submodule>`
    syntax, but by using an asterisk to import all parts of the module:'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入模块的第三种方式是使用 `from <module> import <submodule>` 语法，但可以通过使用星号来导入模块的所有部分：
- en: '[PRE5]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This last method is still used but it is discouraged as it can have unforeseen
    consequences. For instance, the names of the variables in the module might conflict
    with another variable in another module if they are not explicitly imported. For
    this reason, it is best to avoid this third method. However, lots of existing
    scripts include import statements of this type so be aware of these consequences.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这种最后一种方法仍然在使用，但被劝阻，因为它可能产生不可预见的后果。例如，如果模块中的变量没有明确导入，它们可能与另一个模块中的另一个变量冲突。因此，最好避免这种第三种方法。然而，许多现有的脚本包含这种类型的导入语句，因此请注意这些后果。
- en: Variables
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 变量
- en: Variables are a part of all programming languages. They are used to reference
    data and store it in memory for use later in a script. There are a lot of arguments
    over the best method to name variables. No standard has been developed for Python
    scripting for ArcGIS. The following are some best practices to use when naming
    variables.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 变量是所有编程语言的一部分。它们用于引用数据并在脚本中存储以供以后使用。关于变量命名的最佳方法有很多争议。Python 脚本编写尚未制定标准。以下是一些在命名变量时应该遵循的最佳实践。
- en: '**Make them descriptive**: Don''t just name a variable *x*; that variable will
    be useless later when the script is reviewed and there is no way to know what
    it is used for, or why. They should be longer rather than shorter, and should
    hint at the data they reference or even the data type of the object they reference:'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使它们具有描述性**：不要仅仅给变量命名为 *x*；当脚本被审查时，这个变量将毫无用处，因为无法知道它被用于什么，或者为什么。它们应该更长而不是更短，并且应该暗示它们引用的数据或甚至它们引用的对象的数据类型：'
- en: '[PRE6]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**Use camel case to make the variable readable**: Camel case is a term used
    for variables that start with a lower case letter but have upper case letters
    in the middle, resembling a camel''s hump:'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用驼峰命名法使变量可读**：驼峰命名法是指变量以小写字母开头，中间有大小写字母，类似于骆驼的驼峰：'
- en: '[PRE7]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**Include the data type in the variable name**: If the variable contains a
    string, call it variableString. This is not required, and will not be used dogmatically
    in this book, but it can help organize the script and is helpful for others who
    will read these scripts. Python is *dynamically* typed instead of *statically*.
    A programming language distinction means that a variable does not have to be declared
    before it can be used, unlike Visual Basic or other statically typed languages.
    This improves the speed of writing a script, but it can be problematic in long
    scripts as the data type of a variable will not be obvious.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在变量名中包含数据类型**：如果变量包含字符串，可以称其为 variableString。这不是必需的，本书中也不会教条式地使用，但它可以帮助组织脚本，并且对阅读这些脚本的其他人很有帮助。Python
    是 *动态类型* 而不是 *静态类型*。一种编程语言的区别意味着变量在使用之前不需要声明，这与 Visual Basic 或其他静态类型语言不同。这提高了编写脚本的效率，但在长脚本中可能会出现问题，因为变量的数据类型可能不明显。'
- en: Note
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The ArcGIS does not use camel case when it exports Python scripts, and many
    examples will not include it; nevertheless, it is recommended when writing new
    scripts. Also, variables cannot start with a number.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: ArcGIS 在导出 Python 脚本时不会使用驼峰命名法，许多示例也不会包含它；尽管如此，在编写新脚本时仍然建议使用它。此外，变量不能以数字开头。
- en: For loops
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 循环
- en: Built into programming languages is the ability to iterate, or perform a repeating
    process, over a dataset to transform or extract data that meets specific criteria.
    Python's main iteration tool is known as a `for` loop. The term `for` loop means
    that an operation will loop, or iterate, over the items in a dataset to perform
    the operation on each item. The dataset must be iterable to be used in a `for`
    loop, a distinction discussed further ahead.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 编程语言内置了遍历或执行重复过程的能力，以对数据集进行转换或提取满足特定标准的数据。Python 的主要迭代工具被称为 `for` 循环。`for` 循环这个术语意味着一个操作将循环或迭代数据集中的项目以对每个项目执行操作。数据集必须是可迭代的才能在
    `for` 循环中使用，这一点将在后面进一步讨论。
- en: 'We will be using for loops throughout this book. Here is a simple example that
    uses the Python Interpreter to take string values and print them in an uppercase
    format, using a for loop:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在整本书中使用循环。以下是一个简单的例子，它使用 Python 解释器来获取字符串值并以大写格式打印它们，使用循环：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The output is shown as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下所示：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The variable item is a generic variable assigned to each object as it is entered
    into the for loop, and not a term required by Python. It could have been x or
    value instead. Within the loop, the first object (`a`) is assigned to the generic
    variable item and has the upper string function applied to it to produce the output
    `A`. Once this action has been performed, the next object (`b`) is assigned to
    the generic variable to produce an output. This loop is repeated for all members
    of the dataset newlist; once completed, the variable item will still carry the
    value of the last member of the dataset (`d` in this case).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 变量item是一个通用变量，它在for循环中每个对象被输入时分配给每个对象，而不是Python所要求的术语。它可以是x或value。在循环中，第一个对象（`a`）被分配给通用变量item，并对其应用了字符串函数以产生输出`A`。一旦执行了这个动作，下一个对象（`b`）就被分配给通用变量以产生输出。这个循环会重复进行所有数据集newlist的成员；一旦完成，变量item将仍然携带数据集的最后一个成员的值（在这种情况下是`d`）。
- en: Tip
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Downloading the example code**'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在[http://www.packtpub.com](http://www.packtpub.com)的账户下载您购买的所有Packt书籍的示例代码文件。如果您在其他地方购买了这本书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，以便将文件直接通过电子邮件发送给您。
- en: If/Elif/Else statements
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: If/Elif/Else语句
- en: 'Conditional statements, called if/else statements in Python, are also standard
    in programming languages. They are used when evaluating data; when certain conditions
    are met, one action will be taken (the initial if statement; if another condition
    is met, another action is taken; this is an `elif` statement), and if the data
    does not meet the condition, a final action is assigned to deal with those cases
    (the else statement). These are similar to a where conditional in a SQL statement
    used with the Select tool in ArcToolbox. Here is an example of how to use an if/else
    statement to evaluate data in a list (a data type discussed further ahead) and
    find the remainder when divided using the modulus operator (`%`) and Python''s
    is equal to operator (==):'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 条件语句，在Python中称为if/else语句，在编程语言中也是标准的。它们用于评估数据；当满足某些条件时，将执行一个动作（初始的if语句；如果满足另一个条件，将执行另一个动作；这是一个`elif`语句），如果数据不满足条件，将分配一个最终的动作来处理这些情况（else语句）。这些与在ArcToolbox中与Select工具一起使用的SQL语句中的where条件类似。以下是如何使用if/else语句评估列表中的数据（一个将在后面进一步讨论的数据类型）并使用取模运算符（`%`）和Python的等于运算符（==）找到余数的示例：
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The output is shown as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下所示：
- en: '[PRE11]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: While statements
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: While语句
- en: 'Another important evaluation tool is the `while` statement. It is used to perform
    an action while a condition is true; when the condition is false, the evaluation
    will stop. Note that the condition must become false, or the action will be always
    performed, creating an infinite loop that will not stop until the Python interpreter
    is shut off externally. Here is an example of using a while loop to perform an
    action until a true condition becomes false:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要的评估工具是`while`语句。它用于在条件为真时执行一个动作；当条件为假时，评估将停止。请注意，条件必须变为假，否则动作将始终执行，创建一个无限循环，直到外部关闭Python解释器才会停止。以下是一个使用while循环执行动作直到条件变为假的示例：
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The output is shown as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下所示：
- en: '[PRE13]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Comments
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注释
- en: 'Comments in Python are used to add notes within a script. They are marked by
    a pound sign, and are ignored by the Python interpreter when the script is run.
    Comments are useful to explain what a code block does when it is executed, or
    to add helpful notes that script authors would like future script users to read:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Python中的注释用于在脚本中添加注释。它们由井号标记，当脚本运行时，Python解释器会忽略它们。注释有助于解释代码块在执行时的作用，或者添加有用的注释，供脚本作者希望未来的脚本用户阅读：
- en: '[PRE14]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: While it is a programming truism that good code is well-commented code, many
    programmers skip this valuable step. Also, too many comments can reduce their
    usefulness and the script's readability. If variables are descriptive enough,
    and code is well-organized, comments are less necessary; writing the code as verbose
    and as well-organized as possible will require less time to be spent on comments.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然在编程中有一个常见的真理，即良好的代码是注释良好的代码，但许多程序员会跳过这个有价值的步骤。此外，过多的注释可能会降低其有用性和脚本的可读性。如果变量描述得足够充分，且代码组织得很好，注释就变得不那么必要；尽可能地将代码写得详细且组织得越好，就越不需要花费太多时间在注释上。
- en: Data types
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据类型
- en: '**GIS** uses points, lines, polygons, coverages, and rasters to store data.
    Each of these GIS data types can be used in different ways when performing an
    analysis and have different attributes and traits. Python, similar to GIS, has
    data types that organize data. The main data types in Python are strings, integers,
    floats, lists, tuples, and dictionaries. They each have their own attributes and
    traits (or properties), and are used for specific parts of code automation. There
    are also built-in functions that allow for data types to be converted (or casted)
    from one type to another; for instance, the integer 1 can be converted to the
    string 1 using the `str()` function:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**GIS** 使用点、线、多边形、覆盖和栅格来存储数据。在执行分析时，这些GIS数据类型可以以不同的方式使用，并且具有不同的属性和特征。Python与GIS类似，也有组织数据的数据类型。Python中的主要数据类型包括字符串、整数、浮点数、列表、元组和字典。它们各自具有自己的属性和特征（或属性），并用于代码自动化的特定部分。此外，还有一些内置函数允许将数据类型从一种类型转换为另一种类型；例如，可以使用`str()`函数将整数1转换为字符串1：'
- en: '[PRE15]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The output is shown as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下所示：
- en: '[PRE16]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Strings
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 字符串
- en: 'Strings are used to contain any kind of character. They begin and end with
    quotation marks, with either single or double quotes used, though the string must
    begin and end with the same type of quotation marks. Within a string, quoted text
    can appear; it must use the opposite quotation marks to avoid conflicting with
    the string.Check the following example:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串用于包含任何类型的字符。它们以引号开始和结束，可以使用单引号或双引号，但字符串必须以相同类型的引号开始和结束。在字符串内部，可以出现引号文本；它必须使用相反的引号以避免与字符串冲突。查看以下示例：
- en: '[PRE17]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'A third type of string is also employed, a multiple line string that starts
    and ends with three single quote marks:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一种第三种字符串类型也被使用，即以三个单引号开始和结束的多行字符串：
- en: '[PRE18]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Integers
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 整数
- en: 'Integers are whole numbers that do not have any decimal places. There is a
    special consequence to the use of integers in mathematical operations; if integers
    are used for division, an integer result will be returned. Check out this code
    snippet below to see an example of this:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 整数是没有小数位的整数。在数学运算中使用整数有一些特殊的结果；如果使用整数进行除法，将返回整数结果。查看下面的代码片段以查看此例子的示例：
- en: '[PRE19]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The output is shown as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下所示：
- en: '[PRE20]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Instead of an accurate result of 2.5, Python will return the floor value, or
    the lowest whole integer for any integer division calculation. This can obviously
    be problematic and can cause small bugs in scripts that can have major consequences.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Python不会返回准确的结果2.5，而是返回向下取整的值，即任何整数除法计算中的最低整数。这显然可能是一个问题，并可能导致脚本中的小错误，这些错误可能具有重大后果。
- en: Tip
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Please be aware of this issue when writing scripts and use floats to avoid it
    as described in the following section.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 请在编写脚本时注意此问题，并使用浮点数来避免以下章节中描述的问题。
- en: Floats
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 浮点数
- en: 'Floating point values, or floats, are used by Python to represent decimal values.
    The use of floats when performing division is recommended:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 浮点值或浮点数用于Python表示小数。在执行除法时推荐使用浮点数：
- en: '[PRE21]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The output is shown as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下所示：
- en: '[PRE22]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Because computers store values in a base 2 binary system, there can be issues
    representing a floating value that would normally be represented in a base 10
    system. Read [docs.python.org/2/tutorial/floatingpoint.html](http://docs.python.org/2/tutorial/floatingpoint.html)
    for a further discussion of the ramifications of this limitation.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 由于计算机以2为基数存储值，因此可能存在在基数为10的系统中通常表示的浮点值表示问题。阅读[docs.python.org/2/tutorial/floatingpoint.html](http://docs.python.org/2/tutorial/floatingpoint.html)以进一步讨论此限制的影响。
- en: Lists
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 列表
- en: Lists are ordered sets of data that are contained in square brackets ([]). Lists
    can contain any other type of data, including other lists. Data types can be mixed
    within a single list. Lists also have a set of methods that allow them to be extended,
    reversed, sorted, summed, or extract the maximum or minimum value, along with
    many other methods. Data pieces within a list are separated by commas.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 列表是有序的数据集，包含在方括号([])中。列表可以包含任何其他类型的数据，包括其他列表。单个列表中可以混合不同的数据类型。列表还具有一组方法，允许它们被扩展、反转、排序、求和，或提取最大或最小值，以及许多其他方法。列表中的数据项由逗号分隔。
- en: 'List members are referenced by their index, or position in the list, and the
    index always starts at zero. Look at the following example to understand this
    better:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 列表成员是通过它们的索引或列表中的位置来引用的，索引始终从零开始。查看以下示例以更好地理解这一点：
- en: '[PRE23]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The output is shown as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下所示：
- en: '[PRE24]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'This example shows us how to extract the first value (at the index 0) from
    the list called `alist`. Once a list has been populated, the data within it is
    referenced by its index, which is passed to the list in square brackets. To get
    the second value in a list (the value at index 1), the same method is used:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例展示了如何从名为`alist`的列表中提取第一个值（索引0）。一旦列表被填充，列表内的数据通过其索引引用，该索引传递到方括号中的列表。要获取列表中的第二个值（索引1的值），使用相同的方法：
- en: '[PRE25]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The output is shown as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下所示：
- en: '[PRE26]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'To merge two lists, the `extend` method is used:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 要合并两个列表，使用`extend`方法：
- en: '[PRE27]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The output is shown as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下所示：
- en: '[PRE28]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Tuples
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 元组
- en: '**Tuples** are related to lists and are denoted by parentheses (()). Unlike
    lists, tuples are immutable—they cannot be adjusted or extended once they have
    been created. Data within a tuple is referenced in the same way as a list, using
    index references starting at zero:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '**元组**与列表相关，并用圆括号(())表示。与列表不同，元组是不可变的——一旦创建，就不能调整或扩展。元组内的数据通过索引引用，与列表相同，索引从零开始：'
- en: '[PRE29]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The output is shown as follows:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下所示：
- en: '[PRE30]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Dictionaries
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 字典
- en: 'Dictionaries are denoted by curly brackets ({}) and are used to create `key:value`
    pairs. This allows us to map values from a key to a value, so that the value can
    replace the key and data from the value can be used in processing. Here is a simple
    example:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 字典用花括号({})表示，并用于创建`键:值`对。这允许我们将值从键映射到值，因此值可以替换键，并且可以从值中提取数据用于处理。以下是一个简单的示例：
- en: '[PRE31]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The output is shown as follows:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下所示：
- en: '[PRE32]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Note that instead of referring to an index position, such as lists or tuples,
    the values are referenced using a key. Also, keys can be any other type of data
    except lists (because lists are mutable).
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，与引用索引位置不同，例如列表或元组，值是通过键来引用的。此外，键可以是任何其他类型的数据，除了列表（因为列表是可变的）。
- en: 'This can be very valuable when reading a shapefile or feature class. Using
    an `ObjectID` as a key, the value would be a list of row attributes associated
    with `ObjectID`. Look at the following example to better understand this behavior:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这在读取shapefile或要素类时非常有价值。使用`ObjectID`作为键，值将是一个与`ObjectID`关联的行属性列表。查看以下示例以更好地理解此行为：
- en: '[PRE33]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The output is shown as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下所示：
- en: '[PRE34]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Dictionaries are very valuable for reading in feature classes and easily parsing
    through the data by calling only the rows of interest, among other operations.
    They are great for ordering and reordering data for use later in a script, so
    be sure to pay attention to them moving forward.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 字典在读取要素类和通过仅调用感兴趣的行等操作轻松解析数据时非常有价值。它们非常适合对数据进行排序和重新排序，以便在脚本中稍后使用，因此请确保继续关注它们。
- en: Iterable data types
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 可迭代数据类型
- en: 'Lists, tuples, and strings are all iterable data types that can be used in
    for loops. When entered into a for loop, these data types are operated on in order,
    unless otherwise specified. For lists and tuples, this is easy to understand,
    as they have an obvious order:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 列表、元组和字符串都是可迭代数据类型，可以在for循环中使用。当进入for循环时，除非另有说明，否则这些数据类型按顺序操作。对于列表和元组，这很容易理解，因为它们有明显的顺序：
- en: '[PRE35]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The output is shown as follows:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下所示：
- en: '[PRE36]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'For strings, each character is looped:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 对于字符串，每个字符都会进行循环：
- en: '[PRE37]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The output is shown as follows:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下所示：
- en: '[PRE38]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Dictionaries are also iterable, but with a specific implementation that will
    only allow direct access to the keys of the dictionary (which can then be used
    to access the values). Also, the keys are not returned in a specific order:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 字典也是可迭代的，但具有特定的实现，只允许直接访问字典的键（然后可以用来访问值）。此外，键的返回顺序不是特定的：
- en: '[PRE39]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The output is shown as follows:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下所示：
- en: '[PRE40]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Other important concepts
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他重要概念
- en: The use of Python for programming requires an introduction to a number of concepts
    that are either unique to Python but required or common programming concepts that
    will be invoked repeatedly when creating scripts. Included following are a number
    of these concepts that must be covered to be fluent in Python.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Python进行编程需要介绍许多概念，这些概念要么是Python特有的但必需的，要么是常见的编程概念，在创建脚本时将反复使用。以下是一些必须涵盖的概念，以便在Python中流利地使用。
- en: Indentation
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 缩进
- en: Python, unlike most other programming languages, enforces strict rules on indenting
    lines of code. This concept is derived again from Guido's desire to produce clean,
    readable code. When creating functions or using for loops, or if/else statements,
    indentation is required on the succeeding lines of code. If a for loop is included
    inside an if/else statement, there will be two levels of indentation. Veteran
    programmers of other languages have complained about the strict nature of Python's
    indentation. New programmers generally find it to be helpful as it makes it easy
    to organize code. Note that a lot of programmers new to Python will create an
    indentation error at some point, so make sure to pay attention to the indentation
    levels.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 与大多数其他编程语言不同，Python对代码行的缩进执行严格的规则。这一概念再次源于Guido希望产生干净、可读的代码的愿望。在创建函数或使用for循环、if/else语句时，需要在后续的代码行上进行缩进。如果for循环包含在if/else语句中，将有两层缩进。其他语言的资深程序员曾抱怨Python缩进的严格性。新程序员通常发现这很有帮助，因为它使代码组织变得容易。请注意，许多新接触Python的程序员会在某个时候创建缩进错误，所以请确保注意缩进级别。
- en: Functions
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 函数
- en: '**Functions** are used to take code that is repeated over and over within a
    script, or across scripts, and make formal tools out of them. Using the keyword
    **def**, short for the define function, functions are created with defined inputs
    and outputs. The idea of a function in computing is that it takes data in one
    state and converts it into data in another state, without affecting any other
    part of the script. This can be very valuable to automate a GIS analysis.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '**函数**用于将脚本中反复出现的代码，或跨脚本中的代码，转化为正式的工具。使用关键字**def**（代表定义函数），函数通过定义的输入和输出创建。在计算机科学中，函数的概念是它将数据从一个状态转换为另一个状态，而不影响脚本的其他部分。这对于自动化GIS分析非常有价值。'
- en: 'Here is an example of a function that returns the square of any number supplied:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个函数的示例，该函数返回任何给定数字的平方：
- en: '[PRE41]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The output is shown as follows:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下所示：
- en: '[PRE42]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: While this of course duplicates a similar function built into the math module,
    it shows the basics of a function. A function (generally) accepts data, transforms
    it as needed, and then returns the new state of the data using the return keyword.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这当然与数学模块中内置的类似函数重复，但它展示了函数的基本原理。函数（通常）接受数据，按需转换它，然后使用return关键字返回数据的新状态。
- en: Keywords
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关键字
- en: There are a number of keywords built into Python that should be avoided when
    naming variables. These include `max, min, sum, return, list, tuple, def, del,
    from, not, in, as, if, else, elif, or, while, and, with`, among many others. Using
    these keywords will result in an error.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: Python内置了许多关键字，在命名变量时应避免使用。这些包括`max, min, sum, return, list, tuple, def, del,
    from, not, in, as, if, else, elif, or, while, and, with`等，还有很多。使用这些关键字会导致错误。
- en: Namespaces
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 命名空间
- en: Namespaces are a logical way to organize variable names when a variable inside
    a function (a local variable) shares the same name as a variable outside of the
    function (a global variable). Local variables contained within a function (either
    in the script or within an imported module) and global variables can share a name
    as long as they do not share a namespace.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 当函数内部（局部变量）的变量与函数外部（全局变量）的变量同名时，命名空间是一种逻辑上组织变量名的方法。函数内部（无论是脚本还是导入的模块中）包含的局部变量和全局变量可以同名，只要它们不共享命名空间。
- en: This issue often arises when a variable within an imported module unexpectedly
    has the same name of a variable in the script. Python Interpreter will use namespace
    rules to decide which variable has been called, which can lead to undesirable
    results.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 当导入的模块中的变量意外地与脚本中的变量同名时，这个问题经常出现。Python解释器将使用命名空间规则来决定哪个变量被调用，这可能导致不希望的结果。
- en: Zero-based indexing
  id: totrans-158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基于零的索引
- en: As mentioned in the preceding section that describes lists and tuples, Python
    indexing and counting starts at zero, instead of one. This means that the first
    member of a group of data is at the zero position, and the second member is at
    the first position, and so on till the last position.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 如前文所述，在描述列表和元组的章节中提到，Python的索引和计数从零开始，而不是从一。这意味着一组数据中的第一个成员位于零位置，第二个成员位于第一个位置，依此类推，直到最后一个位置。
- en: This rule also applies when there is a for loop iteration within a script. When
    the iteration starts, the first member of the data being iterated is in the zero
    position.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 当脚本中有for循环迭代时，此规则也适用。当迭代开始时，正在迭代的第一个数据成员位于零位置。
- en: Also, indexing can be performed when counting from the last member of an iterable
    object. In this case, the index of the last member is -1, and the second to last
    is -2, and so on back to the first member of the object.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还可以从可迭代对象的最后一个成员开始计数时进行索引。在这种情况下，最后一个成员的索引是-1，倒数第二个是-2，依此类推，直到对象的第一个成员。
- en: Important Python Modules for GIS Analysis
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重要的GIS分析Python模块
- en: Modules, or code libraries that can be called by a script to increase its programming
    potential, are either built into Python or are created by third parties and added
    later to Python. Most of these are written in Python, but a number of them are
    also written in other programming languages and then wrapped in Python to make
    them available within Python scripts. Modules are also used to make other programs
    available to Python, such as the tools built in Microsoft Word.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 模块，或可以通过脚本调用来增加其编程潜力的代码库，要么是内置在Python中的，要么是由第三方创建并在之后添加到Python中的。其中大部分是用Python编写的，但也有一些是用其他编程语言编写的，然后被封装在Python中以在Python脚本中使用。模块还用于使其他程序对Python可用，例如Microsoft
    Word中内置的工具。
- en: The ArcPy module
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ArcPy模块
- en: 'The ArcPy module is both a wrapper module used to interact with the ArcGIS
    tools, which are then executed by ArcGIS in its internal code format, and a code
    base that allows for additional control of geospatial analyses and map production.
    ArcPy is used to control the tools in ArcToolbox, but the tools have not been
    rewritten in Python; instead, we are able to use the ArcGIS tools using ArcPy.
    ArcPy also gives us the ability to control ArcGIS Map Documents( MXDs) and the
    objects that MXDs include: legends, titles, images, layers, and the map view itself.
    ArcPy also has tools that are not available in ArcToolbox. The most powerful of
    these are the data cursors, especially the new Data Analysis Cursors that create
    a more Pythonic interface with GIS data. The data cursors, covered extensively
    in [Chapters 5](ch05.html "Chapter 5. ArcPy Cursors – Search, Insert, and Update"),
    *ArcPy Cursors: Search, Insert and Update* and [Chapter 6](ch06.html "Chapter 6. Working
    with ArcPy Geometry Objects"), *Working with ArcPy Geometry Objects* are very
    useful to extract rows of data from data sources for analysis.'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: ArcPy模块是一个包装模块，用于与ArcGIS工具交互，这些工具随后由ArcGIS以其内部代码格式执行，同时也是一个允许对地理空间分析和地图制作进行额外控制的代码库。ArcPy用于控制ArcToolbox中的工具，但这些工具并没有用Python重写；相反，我们能够通过ArcPy使用ArcGIS工具。ArcPy还使我们能够控制ArcGIS地图文档（MXDs）及其包含的对象：图例、标题、图像、图层以及地图视图本身。ArcPy还具有ArcToolbox中不可用的工具。其中最强大的是数据游标，特别是新的数据分析游标，它为GIS数据创建了一个更Pythonic的接口。数据游标在[第5章](ch05.html
    "第5章。ArcPy游标 – 搜索、插入和更新") *ArcPy游标：搜索、插入和更新* 和[第6章](ch06.html "第6章。使用ArcPy几何对象")
    *使用ArcPy几何对象* 中有详细的介绍，对于从数据源中提取数据行进行分析非常有用。
- en: The ability to control geospatial analyses using ArcPy allows for the integration
    of ArcGIS tools into workflows that contain other powerful Python modules. Python's
    glue language abilities increase the usefulness of ArcGIS by reducing the need
    to treat geospatial data in a special manner.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 使用ArcPy控制地理空间分析的能力允许将ArcGIS工具集成到包含其他强大Python模块的工作流程中。Python的粘合语言能力通过减少对地理空间数据进行特殊处理的需求，增加了ArcGIS的有用性。
- en: The Operating System (OS) module
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作系统（OS）模块
- en: The OS module, part of the standard library, allows Python to access operating
    system functionality. A common use of the module is to use the `os.path` method
    to control file paths by dividing them into directory paths (that is, folders)
    and base paths (that is, files). There is also a useful method, `os.walk`, which
    will walk-through a directory and return all files within the folders and subfolders.
    The OS module is accessed constantly when performing GIS analysis.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 操作系统模块（OS模块）是标准库的一部分，它允许Python访问操作系统功能。该模块的常见用途是使用`os.path`方法通过将路径分为目录路径（即文件夹）和基本路径（即文件）来控制文件路径。还有一个有用的方法，`os.walk`，它将遍历目录并返回文件夹和子文件夹中的所有文件。在执行GIS分析时，会不断访问OS模块。
- en: The Python System (SYS) module
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python系统（SYS）模块
- en: The sys module, part of the standard library, refers to the Python installation
    itself. It has a number of methods that will get information about the version
    of Python installed, as well as information about the script and any arguments
    (or parameters) supplied to the script, using the `sys.argv` method. The `sys.path`
    method is very useful to append the Python file path; practically, this means
    that folders containing scripts can be referenced by other scripts to make the
    functions they contain importable to other scripts.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 标准库中的sys模块指的是Python安装本身。它有许多方法可以获取已安装Python版本的信息，以及有关脚本和任何提供给脚本（或参数）的信息，使用`sys.argv`方法。`sys.path`方法非常有用，可以追加Python文件路径；实际上，这意味着包含脚本的文件夹可以被其他脚本引用，以便它们包含的函数可以被其他脚本导入。
- en: The XLRD and XLWT modules
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`XLRD`和`XLWT`模块'
- en: The `XLRD` and `XLWT` modules are used to read and write Excel spreadsheets,
    respectively. The modules can be very useful to extract data from legacy spreadsheets
    and convert them into usable data for GIS analysis, or to write analysis results
    when a geospatial analysis is completed. They are not part of the Python standard
    library, but are installed along with ArcGIS 10.2 and Python 2.7.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '`XLRD`和`XLWT`模块分别用于读取和写入Excel电子表格。这些模块在从旧版电子表格中提取数据并将其转换为GIS分析可用的数据，或在完成地理空间分析后写入分析结果时非常有用。它们不是Python标准库的一部分，但与ArcGIS
    10.2和Python 2.7一起安装。'
- en: Commonly used built-in functions
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常用内置函数
- en: 'There are a number of built-in functions that we will use throughout the book.
    The main ones are listed as follows:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将使用许多内置函数。主要列如下：
- en: '`str`: The string function is used to convert any other type of data into a
    string'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`str`：字符串函数用于将任何其他类型的数据转换为字符串'
- en: '`int`: The integer function is used to convert a string or float into an integer.
    To not create an error, any string passed to the integer function must be a number
    such as 1.'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int`：整数函数用于将字符串或浮点数转换为整数。为了避免错误，传递给整数函数的任何字符串都必须是数字，例如1。'
- en: '`float`: The float function is used to convert a string or an integer into
    a float, much like the integer function.'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`float`：浮点函数用于将字符串或整数转换为浮点数，类似于整数函数。'
- en: Commonly used standard library modules
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常用标准库模块
- en: 'The following standard library modules must be imported:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 以下标准库模块必须导入：
- en: '`datetime`: The datetime module is used to get information about the date and
    time, and convert string dates into Python dates.'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`datetime`：datetime模块用于获取有关日期和时间的信息，并将字符串日期转换为Python日期。'
- en: '`math`: The math module is used for higher level math functions that are necessary
    at times, such as getting a value for Pi or calculating the square of a number.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`math`：math模块用于在必要时进行高级数学函数，例如获取π的值或计算数字的平方。'
- en: '`string`: The string module is used for string manipulations.'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string`：字符串模块用于字符串操作。'
- en: '`csv`: The CSV module is used to create and edit comma-separated value type
    files.'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`csv`：CSV模块用于创建和编辑逗号分隔值类型文件。'
- en: Check out [https://docs.python.org/2/library](https://docs.python.org/2/library)
    for a complete list of the built-in modules in the standard library.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 查阅[https://docs.python.org/2/library](https://docs.python.org/2/library)以获取标准库中所有内置模块的完整列表。
- en: Summary
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we discussed about the Zen of Python and covered the basics
    of programming using Python. We began our exploration of ArcPy and how it can
    be integrated with other Python modules to produce complete workflows. We also
    discussed the Python standard library and the basic data types of Python.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了Python的禅意，并介绍了使用Python进行编程的基础知识。我们开始探索ArcPy以及它如何与其他Python模块集成以生成完整的工作流程。我们还讨论了Python标准库和Python的基本数据类型。
- en: Next, we will discuss how to configure Python for use with ArcGIS, and explore
    how to use Integrated Development Environments (IDEs) to write scripts.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将讨论如何配置 Python 以与 ArcGIS 一起使用，并探讨如何使用集成开发环境（IDEs）编写脚本。
