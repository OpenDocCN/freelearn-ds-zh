- en: Appendix A. Building Interactive Analytics in Minutes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录 A. 几分钟内构建交互式分析
- en: 'In this appendix we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本附录中，我们将涵盖以下内容：
- en: The crossfilter.js library
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: crossfilter.js 库
- en: Dimensional charting – dc.js
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维度图表 – dc.js
- en: Introduction
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: 'Congratulations! You have finished an entire book on data visualization with
    D3\. Together we have explored various topics and techniques. At this point you
    will probably agree that building interactive, accurate, and aesthetically appealing
    data visualization is not a trivial matter even with the help of a powerful library
    like D3\. It typically takes days or even weeks to finish a professional data
    visualization project even without counting the effort usually required on the
    backend. What if you need to build an interactive analytics quickly, or a proof-of-concept
    before a full-fledged visualization project can be commenced, and you need to
    do that not in weeks or days, but minutes. In this appendix we will introduce
    you to two JavaScript libraries that allow you to do that: building quick in-browser
    interactive multidimensional data analytics in minutes.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你已经完成了一本关于数据可视化的 D3 整本书。我们一起探讨了各种主题和技术。此时，你可能会同意，即使有了像 D3 这样强大的库的帮助，构建交互式、准确且美观的数据可视化也不是一件简单的事情。即使不考虑通常在后台所需的工作量，完成一个专业的数据可视化项目通常也需要几天甚至几周的时间。那么，如果你需要快速构建交互式分析，或者在一个完整可视化项目开始之前进行一个概念验证，而你需要在几分钟内完成这项工作，那会怎样呢？在本附录中，我们将向你介绍两个
    JavaScript 库，它们允许你在几分钟内完成这些工作：在浏览器中快速构建多维数据交互式分析。
- en: The crossfilter.js library
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: crossfilter.js 库
- en: Crossfilter is also a library created by D3's author *Mike Bostock*, initially
    used to power analytics for Square Register.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Crossfilter 也是一个由 D3 的作者 *Mike Bostock* 创建的库，最初用于为 Square Register 提供分析功能。
- en: Crossfilter is a JavaScript library for exploring large multivariate datasets
    in browser. Crossfilter supports extremely fast (<30ms) interaction with coordinated
    views, even with datasets containing a million or more records.
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Crossfilter 是一个用于在浏览器中探索大型多变量数据的 JavaScript 库。Crossfilter 支持与协调视图进行极快的（<30ms）交互，即使是在包含百万或更多记录的数据集中也是如此。
- en: ''
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: -Crossfilter Wiki (August 2013)
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: -Crossfilter Wiki (2013年8月)
- en: 'In other words, Crossfilter is a library that you can use to generate data
    dimensions on large and typically flat multivariate datasets. So what is a data
    dimension? A data dimension can be considered as a type of data grouping or categorization
    while each dimensional data element is a categorical variable. Since this is still
    a pretty abstract concept, let''s take a look at the following JSON dataset and
    see how it can be transformed into dimensional dataset using Crossfilter. Assume
    that we have the following flat dataset in JSON describing payment transactions
    in a bar:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，Crossfilter 是一个库，你可以用它在大型的通常平坦的多变量数据集上生成数据维度。那么，什么是数据维度呢？数据维度可以被视为一种数据分组或分类，而每个维度的数据元素是一个分类变量。由于这仍然是一个相当抽象的概念，让我们看一下以下
    JSON 数据集，看看它是如何通过 Crossfilter 转换为维度数据集的。假设我们有一个以下扁平的 JSON 数据集，描述了酒吧中的支付交易：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Sample dataset borrowed from Crossfilter Wiki: [https://github.com/square/crossfilter/wiki/API-Reference](https://github.com/square/crossfilter/wiki/API-Reference).'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Crossfilter Wiki 借用的样本数据集：[https://github.com/square/crossfilter/wiki/API-Reference](https://github.com/square/crossfilter/wiki/API-Reference)。
- en: 'How many dimensions do we see here in this sample dataset? The answer is: it
    has as many dimensions as the number of different ways that you can categorize
    the data. For example, since this data is about customer payment, which is observation
    on time series, obviously the "date" is a dimension. Secondly, the payment type
    is naturally a way to categorize data; therefore, "type" is also a dimension.
    The next dimension is bit tricky since technically we can model any of the field
    in the dataset as dimension or its derivatives; however, we don''t want to make
    anything as a dimension which does not help us slice the data more efficiently
    or provide more insight into what the data is trying to say. The total and tip
    fields have very high cardinality, which usually is an indicator for poor dimension
    (though tip/total, that is, tip in percentage could be an interesting dimension);
    however, the "quantity" field is likely to have a relatively small cardinality
    assuming people don''t buy thousands of drinks in this bar, therefore, we choose
    to use quantity as our third dimension. Now, here is what the dimensional logical
    model looks like:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个样本数据集中，我们看到了多少维度？答案是：它有与你可以对数据进行分类的不同方式一样多的维度。例如，由于这些数据是关于客户支付的，这是一种时间序列的观察，显然“日期”是一个维度。其次，支付类型是自然地对数据进行分类的方式；因此，“类型”也是一个维度。下一个维度有点棘手，因为从技术上讲，我们可以将数据集中的任何字段建模为维度或其导数；然而，我们不想将任何不帮助我们更有效地切片数据或提供更多洞察数据试图表达的内容的东西作为维度。总计和小费字段具有非常高的基数，这通常是一个维度较差的指标（尽管小费/总计，即小费百分比可能是一个有趣的维度）；然而，“数量”字段可能具有相对较小的基数，假设人们不会在这个酒吧购买成千上万杯饮料，因此，我们选择使用数量作为我们的第三个维度。现在，这就是维度逻辑模型看起来像什么：
- en: '![The crossfilter.js library](img/2162OS_Appendix_01.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![The crossfilter.js library](img/2162OS_Appendix_01.jpg)'
- en: Dimensional Dataset
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 维度数据集
- en: 'These dimensions allow us to look at the data from a different angle, and if
    combined will allow us to ask some pretty interesting questions, for example:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这些维度使我们能够从不同的角度观察数据，如果结合使用，将允许我们提出一些相当有趣的问题，例如：
- en: Are customers who pay by tab more likely to buy in larger quantity?
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用账单支付的客户更有可能购买大量商品吗？
- en: Are customers more likely to buy larger quantity on Friday night?
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户在周五晚上更有可能购买大量商品吗？
- en: Are customers more likely to tip when using tab versus cash?
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与使用现金相比，客户使用账单支付时更有可能给小费吗？
- en: Now, you can see why dimensional dataset is such a powerful idea. Essentially,
    each dimension gives you a different lens to view your data, and when combined,
    they can quickly turn raw data into knowledge. A good analyst can quickly use
    this kind of tool to formulate a hypothesis, hence gaining knowledge from data.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以看到为什么维度数据集是一个如此强大的想法。本质上，每个维度都为你提供了一个不同的视角来观察你的数据，当它们结合在一起时，它们可以迅速将原始数据转化为知识。一个好的分析师可以快速使用这种工具来制定假设，从而从数据中获得知识。
- en: How to do it...
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Now, we understand why we would want to establish dimensions with our dataset;
    let''s see how this can be done using Crossfilter:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们理解了为什么我们想要使用我们的数据集建立维度；让我们看看如何使用Crossfilter来实现这一点：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How it works...
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'As shown in the preceding section, creating dimensions and groups are quite
    straight-forward in Crossfilter. First step before we can create anything is to
    feed our JSON dataset, loaded using D3, through Crossfilter by calling the `crossfilter`
    function (line A). Once that''s done, you can create your dimension by calling
    the `dimension` function and pass in an accessor function that will retrieve the
    data element that can be used to define the dimension. In the case for `type`
    we will simply pass in `function(d){return d.type;}`. You can also perform data
    formatting or other task in dimension function (for example, date formatting on
    line B). After creating the dimensions, we can perform the categorization or grouping
    by using the dimension, so `totalByHour` is a grouping that sums up total amount
    of the sale for each hour, while `salesByQuantity` is a grouping of counting the
    number of transactions by quantity. To better understand how `group` works, we
    will take a look at what the group object looks like. If you invoke the `all`
    function on the `transactionsByType` group you will get the following objects
    back:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，在Crossfilter中创建维度和组相当直接。在我们能够创建任何内容之前的第一步是，通过调用`crossfilter`函数将使用D3加载的JSON数据集通过Crossfilter进行传递（行A）。一旦完成，你可以通过调用`dimension`函数并传入一个访问器函数来创建你的维度，该函数将检索用于定义维度的数据元素。对于`type`，我们只需传入`function(d){return
    d.type;}`。你还可以在维度函数中执行数据格式化或其他任务（例如，行B上的日期格式化）。在创建维度之后，我们可以使用维度进行分类或分组，因此`totalByHour`是对每个小时的销售额进行求和的分组，而`salesByQuantity`是对按数量计数的交易进行分组的分组。为了更好地理解`group`的工作方式，我们将查看组对象的外观。如果你在`transactionsByType`组上调用`all`函数，你将得到以下对象：
- en: '![How it works...](img/2162OS_Appendix_05.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/2162OS_Appendix_05.jpg)'
- en: Crossfilter Group Objects
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Crossfilter组对象
- en: We can clearly see that `transactionByType` group is essentially a grouping
    of the data element by its type while counting the total number of data elements
    within each group since we had called `reduceCount` function when creating the
    group.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以清楚地看到，`transactionByType`组本质上是对数据元素按其类型进行分组，并在每个组内计数数据元素的总数，因为我们创建组时调用了`reduceCount`函数。
- en: 'The following are the description for functions we used in this example:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们在这个示例中使用的函数的描述：
- en: '`crossfilter`: Creates a new crossfilter with given records if specified. Records
    can be any array of objects or primitives.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`crossfilter`：如果指定，创建一个新的带有给定记录的crossfilter。记录可以是任何对象数组或原始数据类型。'
- en: '`dimension`: Creates a new dimension using the given value accessor function.
    The function must return naturally-ordered values, that is, values that behave
    correctly with respect to JavaScript''s <, <=, >=, and > operators. This typically
    means primitives: Booleans, numbers, or strings.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dimension`：使用给定的值访问器函数创建一个新的维度。该函数必须返回自然排序的值，即，与JavaScript的<、<=、>=和>运算符正确行为的值。这通常意味着原始数据类型：布尔值、数字或字符串。'
- en: '`dimension.group`: Creates a new grouping for the given dimension, based on
    the given `groupValue` function, which takes a dimension value as input and returns
    the corresponding rounded value.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dimension.group`：基于给定的`groupValue`函数创建给定维度的新的分组，该函数接受维度值作为输入并返回相应的舍入值。'
- en: '`group.all`: Returns all groups, in ascending natural order by key.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`group.all`：按键的自然顺序返回所有组。'
- en: '`group.reduceCount`: A shortcut function to count the records; returns this
    group.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`group.reduceCount`：一个用于计数记录的快捷函数；返回此组。'
- en: '`group.reduceSum`: A shortcut function to sum records using the specified value
    accessor function.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`group.reduceSum`：一个用于使用指定的值访问器函数求和记录的快捷函数。'
- en: At this point we have everything we want to analyze. Now, let's see how this
    can be done in minutes instead of hours or days.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，我们已经拥有了想要分析的所有内容。现在，让我们看看如何能在几分钟内而不是几小时或几天内完成这项工作。
- en: There's more...
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'We have only touched a very limited number of Crossfilter functions. Crossfilter
    provides a lot more capability when it comes to how dimension and group can be
    created; for more information please check out its API reference: [https://github.com/square/crossfilter/wiki/API-Reference](https://github.com/square/crossfilter/wiki/API-Reference).'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只接触了Crossfilter函数的一小部分。当涉及到如何创建维度和组时，Crossfilter提供了更多的功能；更多信息请查看其API参考：[https://github.com/square/crossfilter/wiki/API-Reference](https://github.com/square/crossfilter/wiki/API-Reference)。
- en: See also
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'Data Dimension: [http://en.wikipedia.org/wiki/Dimension_(data_warehouse)](http://en.wikipedia.org/wiki/Dimension_(data_warehouse))'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据维度：[http://en.wikipedia.org/wiki/Dimension_(data_warehouse)](http://en.wikipedia.org/wiki/Dimension_(data_warehouse))
- en: 'Cardinality: [http://en.wikipedia.org/wiki/Cardinality](http://en.wikipedia.org/wiki/Cardinality)'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基数：[http://en.wikipedia.org/wiki/Cardinality](http://en.wikipedia.org/wiki/Cardinality)
- en: Dimensional charting – dc.js
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 维度图表 – dc.js
- en: Visualizing Crossfilter dimensions and groups is precisely the reason why `dc.js`
    was created. This handy JavaScript library was created by your humble author and
    is designed to allow you to visualize Crossfilter dimensional dataset easily and
    quickly.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 可视化 Crossfilter 维度和组正是 `dc.js` 被创建的原因。这个方便的 JavaScript 库是由你的谦逊作者创建的，旨在让你轻松快速地可视化
    Crossfilter 维度数据集。
- en: Getting ready
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file as reference:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 打开以下文件的本地副本作为参考：
- en: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/appendix-a/dc.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/appendix-a/dc.html)'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/appendix-a/dc.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/appendix-a/dc.html)'
- en: How to do it...
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In this example we will create three charts:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将创建三个图表：
- en: A line chart for visualizing total amount of transaction on time series
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于可视化时间序列上交易总量的折线图
- en: A pie chart to visualize number of transactions by payment type
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于可视化按支付类型交易数量的饼图
- en: A bar chart showing number of sales by purchase quantity
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 展示按购买数量销售数量的条形图
- en: 'Here is what the code looks like:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是代码的样子：
- en: '[PRE2]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This generates a group of coordinated interactive charts:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这会生成一组协调的交互式图表：
- en: '![How to do it...](img/2162OS_Appendix_02.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/2162OS_Appendix_02.jpg)'
- en: Interactive dc.js charts
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 交互式 dc.js 图表
- en: 'When you click or drag your mouse across these charts you will see the underlying
    Crossfilter dimensions being filtered accordingly on all charts:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当你点击或拖动鼠标穿过这些图表时，你将看到所有图表上相应的 Crossfilter 维度被相应地过滤：
- en: '![How to do it...](img/2162OS_Appendix_03.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/2162OS_Appendix_03.jpg)'
- en: Filtered dc.js charts
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 过滤后的 dc.js 图表
- en: How it works...
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: As we have seen through this example, `dc.js` is designed to generate standard
    chart-based visualization on top of Crossfilter. Each `dc.js` chart is designed
    to be interactive so user can apply dimensional filter by simply interacting with
    the chart. `dc.js` is built entirely on D3, therefore, its API is very D3-like
    and I am sure with the knowledge you have gained from this book you will feel
    quite at home when using `dc.js`. Charts are usually created in the following
    steps.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们通过这个例子所看到的，`dc.js` 是设计在 Crossfilter 上生成标准图表可视化工具的。每个 `dc.js` 图表都设计为交互式的，因此用户可以通过与图表交互来简单地应用维度过滤器。`dc.js`
    完全基于 D3 构建，因此，它的 API 非常类似于 D3，我相信，通过这本书你获得的知识，你会在使用 `dc.js` 时感到非常熟悉。图表通常按照以下步骤创建。
- en: 'First step creates a chart object by calling one of the chart creation functions
    while passing in a D3 selection for its anchor element, which in our example is
    the `div` element to host the chart:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是通过调用一个图表创建函数并传入其锚点元素的 D3 选择来创建一个图表对象，在我们的例子中是用于托管图表的 `div` 元素：
- en: '[PRE3]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then we set the `width`, `height`, `dimension`, and `group` for each chart:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们为每个图表设置 `width`、`height`、`dimension` 和 `group`：
- en: '[PRE4]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'For coordinate charts rendered on a Cartesian plane you also need to set the
    `x` and `y` scale:'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于在笛卡尔平面上渲染的坐标图表，你还需要设置 `x` 和 `y` 尺度：
- en: '[PRE5]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In this first case, we explicitly set the x axis scale while letting the chart
    automatically calculate the y-scale for us. While in the next case we set both
    x and y scale explicitly.
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这个第一种情况下，我们明确设置了 x 轴尺度，同时让图表自动为我们计算 y 尺度。而在下一个例子中，我们明确设置了 x 和 y 尺度。
- en: '[PRE6]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: There's more...
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Different charts have different functions for customizing their look-and-feel
    and you can see the complete API reference at [https://github.com/NickQiZhu/dc.js/wiki/API](https://github.com/NickQiZhu/dc.js/wiki/API).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的图表有不同的自定义外观和感觉的功能，你可以在 [https://github.com/NickQiZhu/dc.js/wiki/API](https://github.com/NickQiZhu/dc.js/wiki/API)
    查看完整的 API 参考文档。
- en: 'Leveraging `crossfilter.js` and `dc.js` allows you to build sophisticated data
    analytics dashboard fairly quickly. The following is a demo dashboard for analyzing
    the NASDAQ 100 Index for the last 20 years [http://nickqizhu.github.io/dc.js/](http://nickqizhu.github.io/dc.js/):'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 利用 `crossfilter.js` 和 `dc.js` 可以让你快速构建复杂的数据分析仪表板。以下是对过去 20 年 NASDAQ 100 指数进行分析的演示仪表板
    [http://nickqizhu.github.io/dc.js/](http://nickqizhu.github.io/dc.js/)：
- en: '![There''s more...](img/2162OS_Appendix_04.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多...](img/2162OS_Appendix_04.jpg)'
- en: dc.js NASDAQ demo
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: dc.js NASDAQ 演示
- en: 'At the time of writing this book, `dc.js` supports the following chart types:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写这本书的时候，`dc.js` 支持以下图表类型：
- en: Bar chart (stackable)
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可堆叠条形图
- en: Line chart (stackable)
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可堆叠折线图
- en: Area chart (stackable)
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 面积图（可堆叠）
- en: Pie chart
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 饼图
- en: Bubble chart
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 气泡图
- en: Composite chart
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组合图
- en: Choropleth map
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 着色地图
- en: Bubble overlay chart
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 气泡叠加图
- en: For more information on the `dc.js` 'library please check out our Wiki page
    at [https://github.com/NickQiZhu/dc.js/wiki](https://github.com/NickQiZhu/dc.js/wiki).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`dc.js`库的更多信息，请查看我们的Wiki页面 [https://github.com/NickQiZhu/dc.js/wiki](https://github.com/NickQiZhu/dc.js/wiki)。
- en: See also
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考阅读
- en: 'The following are some other useful D3 based reusable charting libraries. Although,
    unlike `dc.js` they are not designed to work with Crossfilter natively nevertheless
    they tend to be richer and more flexible when tackling general visualization challenges:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些其他有用的基于D3的可重用图表库。尽管，与`dc.js`不同，它们不是原生设计用于与Crossfilter一起工作，但它们在应对一般的可视化挑战时往往更加丰富和灵活：
- en: 'NVD3: [http://nvd3.org/](http://nvd3.org/)'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'NVD3: [http://nvd3.org/](http://nvd3.org/)'
- en: 'Rickshaw: [http://code.shutterstock.com/rickshaw/](http://code.shutterstock.com/rickshaw/)'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '手推车: [http://code.shutterstock.com/rickshaw/](http://code.shutterstock.com/rickshaw/)'
