["```py\na = 1 \ndiameter = 3.\nheight = 5.\ncylinder = [diameter, height] # reference to a list\n```", "```py\na = b = c = 1   # a, b and c get the same value 1\n```", "```py\na = 1 \na = a + 1 # a gets the value 2 \na = 3 * a   # a gets the value 6\n```", "```py\na += 1  # same as a = a + 1 \na *= 3  # same as a = 3 * a\n```", "```py\n6 // 2  # 3\n7 // 2  # 3\n7 / 2   # 3.5\n```", "```py\n0.4 - 0.3 # returns 0.10000000000000003\n```", "```py\n0.4 - 0.3 == 0.1 # returns False\n```", "```py\nexp(1000.) # inf \na = inf\n3 - a   # -inf\n3 + a   # inf\n```", "```py\na + a # inf\na - a # nan \na / a # nan\n```", "```py\nx = nan \nx < 0 # False\nx > 0 # False\nx == x # False\n```", "```py\n0 < inf     # True \ninf <= inf  # True \ninf == inf  # True \n-inf < inf  # True \ninf - inf   # nan \nexp(-inf)   # 0 \nexp(1 / inf)  # 1\n```", "```py\nseterr(all = 'raise')\n```", "```py\nimport sys \nsys.float_info.epsilon # 2.220446049250313e-16 (something like that)\n```", "```py\na = float('1.356')\n```", "```py\na = pi            # returns 3.141592653589793 \na1 = float64(a)   # returns 3.1415926535897931 \na2 = float32(a)   # returns 3.1415927 \na - a1            # returns 0.0 \na - a2            # returns -8.7422780126189537e-08\n```", "```py\nf32 = finfo(float32) \nf32.precision   # 6 (decimal digits) \nf64 = finfo(float64) \nf64.precision   # 15 (decimal digits) \nf = finfo(float) \nf.precision     # 15 (decimal digits) \nf64.max         # 1.7976931348623157e+308 (largest number) \nf32.max         # 3.4028235e+38 (largest number) \nhelp(finfo)     # Check for more options\n```", "```py\nb = 5.2 \nz = bj   # returns a NameError \nz = b*j  # returns a NameError\nz = b*1j # is correct\n```", "```py\nz = 3.2 + 5.2j \nz.conjugate() # returns (3.2-5.2j)\n```", "```py\nz = 1j \nz.real       # 0.0 \nz.imag       # 1.0 \nz.imag = 2   # AttributeError: readonly attribute\n```", "```py\nz = 1 + 0j \nz == 1     # True \nfloat(z)   # TypeError\n```", "```py\nN = 10\n# the following vector contains the Nth roots of unity: \nunity_roots = array([exp(1j*2*pi*k/N) for k in range(N)])\n# access all the real or imaginary parts with real or imag:\naxes(aspect='equal')\nplot(unity_roots.real, unity_roots.imag, 'o')\nallclose(unity_roots**N, 1) # True\n```", "```py\nz = 3.2+5.2j \n(z + z.conjugate()) / 2\\.   # returns (3.2+0j) \n((z + z.conjugate()) / 2.).real   # returns 3.2 \n(z - z.conjugate()) / 2\\.   # returns 5.2j \n((z - z.conjugate()) / 2.).imag   # returns 5.2 \nsqrt(z * z.conjugate())   # returns (6.1057350089894991+0j)\n```", "```py\na = True \nb = 30 > 45   # b gets the value False\n```", "```py\nif x > 0:\n   print(\"positive\")\nelse:\n   print(\"nonpositive)\n```", "```py\nTrue and False # False\nFalse or True # True\n(30 > 45) or (27 < 30) # True\nnot True # False\nnot (3 > 4) # True\n```", "```py\na < b < c     # same as: a < b and b < c \na == b == c   # same as: a == b and b == c\n```", "```py\nbool([])   # False \nbool(0)   # False \nbool(' ')   # True \nbool('')   # False \nbool('hello')   # True \nbool(1.2)   # True \nbool(array([1]))   # True \nbool(array([1,2]))   # Exception raised!\n```", "```py\nif a:\n   ...\nif bool(a): # exactly the same as above\n   ...\n```", "```py\n# L is a list\nif L:\n    print(\"list not empty\")\nelse:\n    print(\"list is empty\")\n```", "```py\n# n is an integer\nif n % 2:\n    print(\"n is odd\")\nelse:\n    print(\"n is even\")\n```", "```py\ndef and_as_function(x,y):\n    if not x:\n        return x\n    else:\n        return y\n```", "```py\ndef or_as_function(x,y):\n    if x:\n        return x\n    else:\n        return y\n```", "```py\n[1] or 'a' # produces [1] \n'a' or [1] # produces 'a'\n```", "```py\ndef print_ispositive(x):\n    possibilities = ['nonpositive', 'positive']\n    return \"x is {}\".format(possibilities[x>0])\n```", "```py\nname = 'Johan Carlsson'\nchild = \"Åsa is Johan Carlsson's daughter\"\nbook = \"\"\"Aunt Julia \n       and the Scriptwriter\"\"\"\n```", "```py\nbook[-1] # returns 'r' \nbook[-12:] # returns 'Scriptwriter'\n```", "```py\nTypeError: 'str' object does not support item assignment\n```", "```py\nprint('Temperature:\\t20\\tC\\nPressure:\\t5\\tPa')\n```", "```py\na=\"\"\" \nA multiline \nexample\"\"\" \na #  returns '\\nA multiline \\nexample'\n```", "```py\nlatexfontsize=\"\\\\tiny\"\n```", "```py\nlatexfs=r\"\\tiny\"   # returns \"\\tiny\"\nlatexfontsize == latexfs  # returns True\n```", "```py\nr\"\\\"\\\"   # returns  '\\\\\"'\nr\"\\\\\"   # returns  '\\\\\\\\'\nr\"\\\"    # returns an error\n```", "```py\nlast_name = 'Carlsson'\nfirst_name = 'Johanna'\nfull_name = first_name + ' ' + last_name\n                              # returns 'Johanna Carlsson'\n```", "```py\ngame = 2 * 'Yo' # returns 'YoYo'\n```", "```py\n'Anna' > 'Arvi' # returns false \n'ANNA' < 'anna'  # returns true \n'10B' < '11A'    # returns true\n```", "```py\n          text = 'quod erat    demonstrandum'\n          text.split() # returns ['quod', 'erat', 'demonstrandum']\n          table = 'Johan;Carlsson;19890327'\n          table.split(';') # returns ['Johan','Carlsson','19890327']\n          king = 'CarlXVIGustaf'\n          king.split('XVI')  # returns ['Carl','Gustaf']\n\n    ```", "```py\n          sep = ';'\n          sep.join(['Johan','Carlsson','19890327']) \n          # returns 'Johan;Carlsson;19890327'\n\n    ```", "```py\n          birthday = '20101210'\n          birthday.find('10') # returns 2 \n    ```", "```py\ncourse_code = \"NUMA21\"\nprint(\"This course's name is {}\".format(course_code)) \n# This course's name is NUMA21\n```", "```py\nquantity = 33.45\nprint(\"{:f}\".format(quantity)) # 33.450000\nprint(\"{:1.1f}\".format(quantity)) # 33.5\nprint(\"{:.2e}\".format(quantity)) # 3.35e+01\n```", "```py\nprint(\"{name} {value:.1f}\".format(name=\"quantity\",value=quantity))\n# prints \"quantity 33.5\"\n```", "```py\nu = 1.0 # you have to use a float here!\nuold = 10\\. \nfor iteration in range(2000):\n    if not abs(u-uold) > 1.e-8:\n         print('Convergence')\n         break # sequence has converged\n    uold = u\n    u = 2*u\nelse:\n    print('No convergence')\n```", "```py\n          if not abs(u-uold) > 1.e-8\n    ```", "```py\n          if abs(u-uold) < 1.e-8\n    ```"]