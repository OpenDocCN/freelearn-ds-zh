- en: Chapter 3. Finding and Fixing Broken Data Links
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Finding broken data sources in your map document and layer files
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixing broken data sources with MapDocument.findAndReplaceWorkspacePaths()
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixing broken data sources with MapDocument.replaceWorkspaces()
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixing individual layer and table objects with replaceDataSource()
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding broken data sources in all map documents in a folder
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is not uncommon for your GIS data sources to move, migrate to a new data
    format, or be deleted. The result can be broken data sources in many map documents
    or layer files. These broken data sources can't be used until they're fixed, which
    can be an overwhelming process if the same changes need to be made across numerous
    map documents. You can automate the process of finding and fixing these data sources
    using `arcpy.mapping`, without ever having to open the affected map documents.
    Finding broken data sources is a simple process requiring the use of the `ListBrokenDataSources()`
    function, which returns a Python list of all broken data sources in a map document
    or layer file. Typically, this function is used as the first step in a script
    that iterates through the list and fixes the data source. Fixing broken data sources
    can be made in an individual data layer or across all layers in a common workspace.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Finding broken data sources in your map document and layer files
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Broken data sources are a very common problem with map document files. You can
    use `arcpy.mapping` to identify data sources that have moved, been deleted, or
    changed in their format.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In ArcMap, a broken data connection is signified by a red exclamation point
    just before the layer name. This is illustrated in the following screenshot. The
    `ListBrokenDataSources()` function in `arcpy.mapping` returns a list of layer
    objects from a map document or layer file that have a broken data connection:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/B04314_03_1.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
- en: How to do it…
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Follow these steps to learn how to find broken data sources in a map document
    file.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: Open `C:\ArcpyBook\Ch3\Crime_BrokenDataLinks.mxd` in ArcMap.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will see that each of the data sources have been broken. In this case,
    the data has been moved to another folder, but you''d see the same indicator if
    the data had been deleted or migrated to a different format. For example, it is
    not uncommon to convert data from a personal geodatabase to a file geodatabase:'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/B04314_03_2.jpg)'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Close ArcMap.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open **IDLE** and create a new script window.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `arcpy.mapping` module:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Reference the `Crime_BrokenDataLinks.mxd` map document file:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Get a list of the broken data sources:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Iterate the list and print out the layer names:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The output will be printed as follows:'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Save your script as `FindFixBrokenData.py` in the `c:\ArcpyBook\Ch3` folder.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can check your work by examining the `c:\ArcpyBook\code\Ch3\FindFixBrokenData.py`
    solution file.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `ListBrokenDataSources()` function returns a Python list of `Layer` objects
    that have a broken data source. We then use a `for` loop to iterate this list
    and perform some sort of action for each layer. In this case, we printed out the
    layer names simply to illustrate the data returned by this function. In a later
    recipe, we'll build on this code by fixing these broken data sources.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In addition to returning a list of broken data sources from a map document file,
    the `ListBrokenDataSources()` function can also find broken data sources in a
    (`.lyr`) layer file. Simply pass the path to the layer file to have the function
    examine the file for broken data sources. Keep in mind that these functions are
    not needed with `Map` or `Layer` packages, since the data is bundled with these
    files unlike a layer file.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: Fixing broken data sources with MapDocument.findAndReplaceWorkspacePaths()
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `MapDocument.findAndReplaceWorkspacePaths()` method is used to perform global
    find and replace workspace paths for all the layers and tables in a map document.
    You can also replace the paths to multiple workspace types at once. For example,
    you might pass personal and file geodatabase workspace types at the same time.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need to cover some definitions before examining the methods used to fix datasets.
    You'll see these terms used frequently when discussing the methods used to fix
    broken data sources, so you'll need to understand what they mean in this context.
    A **workspace** is simply a container for data. This can be a folder (in the case
    of shapefiles), personal geodatabase, file geodatabase, or an ArcSDE connection.
    A workspace provides the system path to the workspace. In the case of file geodatabases,
    this would include the name of the geodatabase. A **dataset** is simply a feature
    class or table within a workspace, and finally, a **data** **source** is the combination
    of the workspace and dataset names. Don't confuse a dataset with a feature dataset.
    The former is just a generic term for data, while the latter is an object within
    a geodatabase that serves as a container for feature classes and other datasets.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: There are three `arcpy.mapping` classes involved in fixing broken data sources.
    They are `MapDocument`, `Layer`, and `TableView`. Each class contains methods
    that can be used to fix data sources. In this recipe, we'll examine how you can
    use the `findAndReplaceWorkspacePaths()` method in the `MapDocument` class to
    perform global find and replace operations in the layers and tables of a map document.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to fix layers and tables in a map document
    using `findAndReplaceWorkspacePaths()`:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: Open `c:\ArcpyBook\Ch3\Crime_BrokenDataLinks.mxd` in ArcMap.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on any of the layers and select **Properties**.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the **Source** tab and you will notice that the location for the layer
    is `ArcpyBook\Ch3\Data\OldData\CityOfSanAntonio.gdb`. This is a file geodatabase
    but the location no longer exists. It has moved to the `C:\ArcpyBook\data` folder.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open **IDLE** and create a new script window.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `arcpy.mapping` module:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Reference the `Crime_BrokenDataLinks.mxd` map document file:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Use `MapDocument.findAndReplaceWorkspacePaths()` to fix the source path for
    each data source in the map document. The `findAndReplaceWorksapcePaths()` method
    accepts the old path as the first parameter and the new path as the second parameter:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Save the results to a new `.mxd` file:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Save the script as `C:\ArcpyBook\Ch3\MapDocumentFindReplaceWorkspacePath.py`.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can check your work by examining the `c:\ArcpyBook\code\Ch3\MapDocumentFindReplaceWorkspacePath.py`
    solution file.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the script.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In ArcMap, open the `C:\ArcpyBook\Ch3\Crime_DataLinksFixed.mxd` file. You will
    notice that all the data sources get fixed, as shown in the following screenshot:![How
    to do it…](img/B04314_03_3.jpg)
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `MapDocument.findAndReplaceWorkspacePaths()` method performs global find
    and replace workspace paths for all layers and tables in a map document. You can
    replace the paths for multiple workspace types at once.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Layer` and `TableView` objects also have a `findAndReplaceWorkspacePaths()`
    method that performs the same type of operation. The difference is that this method,
    in the `Layer` and `TableView` objects, is used to fix an individual broken data
    source rather than a global find, along with the replacement of all broken data
    sources in a map document.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: Fixing broken data sources with MapDocument.replaceWorkspaces()
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: During the course of normal GIS operations, it is a fairly common practice to
    migrate data from one file type to another. For example, many organizations migrate
    data from older personal geodatabase formats to the new file geodatabase types,
    or perhaps even enterprise ArcSDE geodatabases. You can automate the process of
    updating your datasets to a different format with `MapDocument.replaceWorkspaces()`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`MapDocument.replaceWorkspaces()` is similar to `MapDocument.findAndReplaceWorkspacePaths()`,
    but it also allows you to switch from one workspace type to another. For example,
    you can switch from a file geodatabase to a personal geodatabase. However, it
    only works in one workspace at a time. In this recipe, we''ll use `MapDocument.replaceWorkspaces()`
    to switch our data source from a file geodatabase to a personal geodatabase.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to fix broken data sources using `MapDocument.replaceWorkspaces()`:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: Open `c:\ArcpyBook\Ch3\Crime_DataLinksFixed.mxd` in ArcMap.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Notice that all of the layers and tables are loaded from a file geodatabase
    called `CityOfSanAntonio.gdb`, as shown in the following screenshot:![How to do
    it…](img/B04314_03_4.jpg)
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open **IDLE** and create a new script window.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `arcpy.mapping` module:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Reference the `Crime_DataLinksFixed.mxd` map document file:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Call the `replaceWorkspaces()` method, passing a reference to the old geodatabase
    type as well as the new geodatabase type:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Save a copy of the map document file:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Save the script as `c:\ArcpyBook\Ch3\MapDocumentReplaceWorkspaces.py`.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can check your work by examining the `c:\ArcpyBook\code\Ch3\MapDocumentReplaceWorkspaces.py`
    solution file.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the script.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In ArcMap, open the `c:\ArcpyBook\Ch3\Crime_DataLinksUpdated.mxd` file. As shown
    in the following screenshot, all data sources now reference a personal geodatabase
    (note the `.mdb` extension):![How to do it…](img/B04314_03_5.jpg)
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `MapDocument.replaceWorkspaces()` method accepts several parameters including
    old and new workspace paths along with the old and new workspace types. Paths
    to the workspaces are self-explanatory, but some discussion of the workspace types
    is helpful. The workspace types are passed into the method as string keywords.
    In this case, the old workspace type was a file geodatabase so its keyword is
    `FILEGDB_WORKSPACE`. The new workspace type is `ACCESS_WORKSPACE`, which indicates
    a personal geodatabase. Personal geodatabases are stored in Microsoft Access files.
    There are a number of different workspace types that can store GIS data. Make
    sure you provide the workspace type that is appropriate for your dataset. The
    following is a list of valid workspace types (many people still work with shapefiles
    so, in this case, the workspace type would be `SHAPEFILE_WORKSPACE`):'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '`ACCESS_WORKSPACE`: This is a personal geodatabase or Access workspace'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ARCINFO_WORKSPACE`: This is an ArcInfo coverage workspace'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CAD_WORKSPACE`: This is a CAD file workspace'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`EXCEL_WORKSPACE`: This is an Excel file workspace'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FILEGDB_WORKSPACE`: This is a file geodatabase workspace'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NONE`: This is used to skip a parameter'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OLEDB_WORKSPACE`: This is an OLE database workspace'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PCCOVERAGE_WORKSPACE`: This is a PC ARC/INFO Coverage workspace'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RASTER_WORKSPACE`: This is a raster workspace'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SDE_WORKSPACE`: This is an SDE geodatabase workspace'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SHAPEFILE_WORKSPACE`: This is a shapefile workspace'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TEXT_WORKSPACE`: This is a text file workspace'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TIN_WORKSPACE`: This is a TIN workspace'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`VPF_WORKSPACE`: This is a VPF workspace'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When switching workspaces via the `replaceWorkspaces()` method, the dataset
    names must be identical. For example, a shapefile called `Highways.shp` can be
    redirected to a file geodatabase workspace only if the dataset name in the file
    geodatabase is also called `Highways`. Use the `replaceDataSource()` method on
    the `layer` or `TableView` objects if the dataset name is different.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: Fixing individual layer and table objects with replaceDataSource()
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The previous recipes in this chapter have used various methods on the `MapDocument`
    object to fix broken data links. The `Layer` and `TableView` objects also have
    methods that can be used to fix broken data links at the individual object level
    rather than working on all datasets in a map document file. This recipe discusses
    the repairing of `Layer` and `TableView` objects.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Both the `Layer` and `TableView` classes have a `replaceDataSource()` method.
    This method changes the workspace path, workspace type, and/or dataset name for
    a single layer or table. In this recipe, you'll write a script that changes the
    workspace path and workspace type for a single layer. The `replaceDataSource()`
    method is available for the `Layer` and `TableView` classes. In the case of a
    layer, it can either be in a map document or layer file. For a table, it can refer
    to the map document only, since `TableView` objects can't be contained inside
    a layer file.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to fix individual `Layer` and `TableView` objects
    in a map document using `replaceDataSource()`:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: 'Open c`:\ArcpyBook\Ch3\Crime_DataLinksLayer.mxd` in ArcMap. The Crime data
    frame contains a layer called **Burglary**, which is a feature class in the `CityOfSanAntonio`
    file geodatabase. You''re going to replace this feature class with a shapefile
    layer containing the same data:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/B04314_03_6.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
- en: Open **IDLE** and create a new script window.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `arcpy.mapping` module:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Reference the `Crime_DataLinksLayer.mxd` map document file:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Get a reference to the `Crime` data frame:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Find the **Burglary** layer and store it in a variable:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Call the `replaceDataSource()` method on the `Layer` object and pass the path
    to the shapefile. A keyword will indicate that this will be a shapefile workspace,
    and it also indicates the name of the shapefile:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Save the results to a new map document file:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Save the script as `c:\ArcpyBook\Ch3\LayerReplaceDataSource.py`.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can check your work by examining the `c:\ArcpyBook\code\Ch3\LayerReplaceDataSource.py`
    solution file.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the script.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open `C:\ArcpyBook\Ch3\Crime_DataLinksNewLayer.mxd` in ArcMap. You should see
    that the **Burglary** layer now references a new workspace:![How to do it…](img/B04314_03_7.jpg)
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the **Burglary** layer and select **Properties**.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Source** tab and note the new workspace, workspace type, and
    dataset name:![How to do it…](img/B04314_03_8.jpg)
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `replaceDataSource()` method accepts two required parameters and two optional
    parameters. The first two parameters define the workspace path and workspace type
    for the layer that will be used as the replacement. The third parameter, `dataset_name`,
    is an optional parameter that defines the name of the dataset that will be used
    as the replacement layer. This name must be an exact match. For example, in this
    recipe, we passed in a `dataset_name` attribute as `Burglaries_2009`, which is
    the name of the shapefile that will now be used as the replacement layer in the
    data frame. If a name is not provided, the method will attempt to replace the
    dataset by finding a table with the same name as the current layer's dataset property.
    The final optional parameter is `validate`. By default, this value is set to `True`.
    When set to `True`, a workspace will only be updated if the `workspace_path` value
    is a valid workspace. If it is not a valid workspace, then the workspace will
    not be replaced. If it's set to `False`, the method will set the source to match
    `workspace_path`, regardless of whether it is a valid match or not. This can result
    in a broken data source, but can be useful if you are creating or modifying a
    map document in preparation for data that does not yet exist.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Layer` and `TableView` classes also contain a `findAndReplaceWorkspacePath()`
    method. This method is very similar to the `MapDocument.findAndReplaceWorkspacePaths()`
    method. The only difference is that it works against a single `Layer` or `TableView`
    class instead of iterating the entire map document or layer file.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: Finding broken data sources in all map documents in a folder
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A common scenario in many organizations involves the movement of data from one
    workspace to another or from one workspace type to another. When this happens,
    any map documents or layers that reference these data sources become broken. Finding
    each of these data sources can be a huge task if undertaken manually. Fortunately,
    you can create a geoprocessing script that will find all broken data sources in
    a folder or list of folders.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to recursively search directories for map
    document files, find any broken data sources within these map documents, and write
    the names of the broken data layers to a file.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to find all broken data sources in all map
    documents in a folder:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: Open **IDLE** and create a new script window.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `arcpy` and `os` packages:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Open a file that you will use to write the broken layer names:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Pass a path to the `c:\ArcpyBook` folder to use in the `os.walk()` method along
    with a `for` loop to walk the directory tree:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Inside the `for` loop, create a second `for` loop that loops through all the
    files returned and create a new `filename` variable. Remember to indent the `for`
    loop inside the first `for` loop:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Following the last line of code that you added, test the file extension to
    see if it is a map document file. If so, create a new map document object instance
    using the path, write the map document name, get a list of broken data sources,
    loop through each of the broken data sources, and write to the file:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您添加的最后一行代码之后，测试文件扩展名以查看它是否是地图文档文件。如果是，使用路径创建一个新的地图文档对象实例，写入地图文档名称，获取损坏数据源列表，遍历每个损坏数据源，并将它们写入文件：
- en: '[PRE23]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Add a `print` statement to indicate that you are done and close the file:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个 `print` 语句来指示您已完成并关闭文件：
- en: '[PRE24]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The entire script should appear as follows:![How to do it...](img/B04314_03_10.jpg)
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 整个脚本应如下所示：![如何做...](img/B04314_03_10.jpg)
- en: You can check your work by examining the `c:\ArcpyBook\code\Ch3\ListBrokenDataSources.py`
    solution file.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过检查 `c:\ArcpyBook\code\Ch3\ListBrokenDataSources.py` 解决方案文件来验证您的作品。
- en: Run the script to generate the file.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行脚本以生成文件。
- en: Open the file to see the results. Your output will vary depending upon the path
    you've defined. The following screenshot shows my output file:![How to do it...](img/B04314_03_9.jpg)
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开文件查看结果。您的输出将取决于您定义的路径。以下截图显示了我的输出文件：![如何做...](img/B04314_03_9.jpg)
- en: How it works...
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This script uses a combination of methods from the Python `os` package and the
    `arcpy.mapping` package. The `os.walk()` method walks a directory tree and returns
    the path, a list of directories, and a list of files for each directory starting
    with a root directory that you have defined as the `c:\ArcpyBook` directory. This
    root directory could have been any directory. The `os.walk()` method returns a
    three item tuple consisting of the root directory, a list of directories immediately
    contained within that root, as well as a list of files immediately contained within
    the root. We then loop through this list of files and test each one to see if
    it contains the `.mxd` string, which indicates a map document file. Files identified
    as map documents have their filenames written to a text file, and a new `MapDocument`
    object instance is created. The `ListBrokenDataSources()` method is then used
    with a reference to the map document to generate a list of broken data sources
    within the file, and these broken data sources are written to the file as well.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本结合了来自 Python `os` 包和 `arcpy.mapping` 包的方法。`os.walk()` 方法遍历目录树，并返回从您定义的 `c:\ArcpyBook`
    目录开始的根目录的路径、目录列表和文件列表。这个根目录可以是任何目录。`os.walk()` 方法返回一个包含三个元素的元组，分别是根目录、该根目录内直接包含的目录列表以及该根目录内直接包含的文件列表。然后我们遍历这个文件列表，测试每个文件是否包含
    `.mxd` 字符串，这表示一个地图文档文件。被识别为地图文档的文件将它们的文件名写入一个文本文件，并创建一个新的 `MapDocument` 对象实例。然后使用对地图文档的引用调用
    `ListBrokenDataSources()` 方法，以生成文件内的损坏数据源列表，并将这些损坏数据源也写入文件。
