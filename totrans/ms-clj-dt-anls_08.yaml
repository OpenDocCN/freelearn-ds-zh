- en: Chapter 8. A/B Testing – Statistical Experiments for the Web
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most common uses of statistics on the Internet right now is **A/B
    testing**. This acts as an aid to design and increase interactions with users
    in a data-driven way. It's used all over the Web, and there have been some high-profile
    instances of these techniques being written about in blogs and articles online.
    For instance, there were several descriptions of how Baraka Obama's 2012 US Presidential
    campaign used A/B testing to increase both donations and how many people signed
    up for the e-mail updates.
  prefs: []
  type: TYPE_NORMAL
- en: 'Over the course of this chapter, we''ll look at the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Defining A/B testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conducting an A/B test
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyzing the results
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end, we'll have simulated a small A/B test to measure a click-through
    on two different versions of text for a button.
  prefs: []
  type: TYPE_NORMAL
- en: Defining A/B testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At its most fundamental level, A/B testing just involves creating two different
    versions of a web page. Sometimes, the changes are major redesigns of the site
    or the user experience, but usually, the changes are as simple as changing the
    text on a button. Then, for a short period of time, new visitors are randomly
    shown one of the two versions of the page. The site tracks their behavior, and
    the experiment determines whether one version or the other increases the users'
    interaction with the site. This may mean more click-through, more purchases, or
    any other measurable behavior.
  prefs: []
  type: TYPE_NORMAL
- en: This is similar to other methods in other domains that use different names.
    The basic framework randomly tests two or more groups simultaneously and is sometimes
    called random-controlled experiments or online-controlled experiments. It's also
    sometimes referred to as split testing, as the participants are split into two
    groups.
  prefs: []
  type: TYPE_NORMAL
- en: These are all examples of **between-subjects experiment design**. Experiments
    that use these designs all split the participants into two groups. One group,
    the control group, gets the original environment. The other group, the test group,
    gets the modified environment that those conducting the experiment are interested
    in testing.
  prefs: []
  type: TYPE_NORMAL
- en: Experiments of this sort can be **single-blind** or **double-blind**. In single-blind
    experiments, the subjects don't know which group they belong to. In double-blind
    experiments, those conducting the experiments also don't know which group the
    subjects they're interacting with belong to. This safeguards the experiments against
    biases that can be introduced by participants being aware of which group they
    belong to. For example, participants could get more engaged if they believe they're
    in the test group because this is *newer* in some way. Or, an experimenter could
    treat a subject differently in a subtle way because of the group that they belong
    to.
  prefs: []
  type: TYPE_NORMAL
- en: As the computer is the one that directly conducts the experiment, and because
    those visiting your website aren't aware of which group they belong to, website
    A/B testing is generally an example of double-blind experiments.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, this is an argument for only conducting the test on new visitors.
    Otherwise, the user might recognize that the design has changed and throw the
    experiment away. For example, the users may be more likely to click on a new button
    when they recognize that the button is, in fact, new. However, if they are new
    to the site as a whole, then the button itself may not stand out enough to warrant
    extra attention.
  prefs: []
  type: TYPE_NORMAL
- en: In some cases, these subjects can test more variant sites. This divides the
    test subjects into more groups. There needs to be more subjects available in order
    to compensate for this. Otherwise, the experiment's statistical validity might
    be in jeopardy. If each group doesn't have enough subjects, and therefore observations,
    then there is a larger error rate for the test, and results will need to be more
    extreme to be significant.
  prefs: []
  type: TYPE_NORMAL
- en: In general, though, you'll want to have as many subjects as you reasonably can.
    Of course, this is always a trade-off. Getting 500 or 1000 subjects may take a
    while, given the typical traffic of many websites, but you still need to take
    action within a reasonable amount of time and put the results of the experiment
    into effect. So we'll talk later about how to determine the number of subjects
    that you actually need to get a certain level of significance.
  prefs: []
  type: TYPE_NORMAL
- en: Another wrinkle that is you'll want to know as soon as possible is whether one
    option is clearly better or not so that you can begin to profit from it early.
    In the multi-armed bandit problem, this is a problem of *exploration* versus *exploitation*.
    This refers to the tension in the experiment design (and other domain) between
    exploring the problem space and exploiting the resources you've found in the experiment
    so far. We won't get into this further, but it is a factor to stay aware of as
    you perform A/B tests in the future.
  prefs: []
  type: TYPE_NORMAL
- en: Because of the power and simplicity of A/B testing, it's being widely used in
    a variety of domains. For example, marketing and advertising make extensive use
    of it. Also, it has become a powerful way to test and improve measurable interactions
    between your website and those who visit it online.
  prefs: []
  type: TYPE_NORMAL
- en: The primary requirement is that the interaction be somewhat limited and very
    measurable. Interesting would not make a good metric; the *click-through rate*
    or *pages visited*, however, would. Because of this, A/B tests validate changes
    in the placement or in the text of buttons that call for action from the users.
    For example, a test might compare the performance of **Click for more!** against
    **Learn more now!**. Another test may check whether a button placed in the upper-right
    section increases sales versus one in the center of the page.
  prefs: []
  type: TYPE_NORMAL
- en: These changes are all incremental, and you probably don't want to break a large
    site redesign into pieces and test all of them individually. In a larger redesign,
    several changes may work together and reinforce each other. Testing them incrementally
    and only applying the ones that increase some metric can result in a design that's
    not aesthetically pleasing, is difficult to maintain, and costs you users in the
    long run. In these cases, A/B testing is not recommended.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some other things that are regularly tested in A/B tests include the following
    parts of a web page:'
  prefs: []
  type: TYPE_NORMAL
- en: The wording, size, and placement of a call-to-action button
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The headline and product description
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The length, layout, and fields in a form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The overall layout and style of the website as a larger test, which is not broken
    down
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The pricing and promotional offers of products
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The images on the landing page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The amount of text on a page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we have an understanding of what A/B testing is and what it can do
    for us, let's see what it will take to set up and perform an A/B test.
  prefs: []
  type: TYPE_NORMAL
- en: Conducting an A/B test
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In creating an A/B test, we need to decide several things, and then we need
    to put our plan into action. We'll walk through those decisions here and create
    a simple set of web pages that will test the aspects of design that we are interested
    in changing, based upon the behavior of the user.
  prefs: []
  type: TYPE_NORMAL
- en: Before we start building stuff, though, we need to think through our experiment
    and what we'll need to build.
  prefs: []
  type: TYPE_NORMAL
- en: Planning the experiment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this chapter, we're going to pretend that we have a website to sell widgets
    (or rather, looking at the **Widgets!** website).
  prefs: []
  type: TYPE_NORMAL
- en: '![Planning the experiment](img/4139OS_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The web page in this screenshot is the **control page**. Currently, we're getting
    24 percent click-through on it from the **Learn more!** button.
  prefs: []
  type: TYPE_NORMAL
- en: We're interested in the text of the button. If it read **Order now!** instead
    of **Learn more!**, it might generate more click-through. (Of course, actually
    explaining what the product is and what problems it solves might be more effective,
    but one can't have everything.) This will be the **test page**, and we're hoping
    that we can increase the click-through rate to 29 percent (a five percent absolute
    increase).
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have two versions of the page to experiment with, we can frame the
    experiment statistically and figure out how many subjects we'll need for each
    version of the page in order to achieve a statistically meaningful increase in
    the click-through rate on that button.
  prefs: []
  type: TYPE_NORMAL
- en: Framing the statistics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we need to frame our experiment in terms of the **null-hypothesis test**.
    In this case, the null hypothesis would look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Changing the button copy from **Learn more!** to **Order now!** Would not
    improve the click-through rate.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Remember, this is the statement that we're hoping to disprove (or fail to disprove)
    in the course of this experiment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we need to think about the sample size. This needs to be fixed in advance.
    To find the sample size, we''ll use the standard error formula, which will be
    solved to get the number of observations to make for about a 95 percent confidence
    interval in order to get us in the ballpark of how large our sample should be:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Framing the statistics](img/4139OS_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In this, *δ* is the minimum effect to detect and *σ²* is the sample variance.
    If we are testing for something like a percent increase in the click-through,
    the variance is *σ² = p(1 – p)*, where *p* is the initial click-through rate with
    the control page.
  prefs: []
  type: TYPE_NORMAL
- en: So for this experiment, the variance will be *0.24(1-0.24)* or *0.1824*. This
    would make the sample size for each variable *16(0.1824 / 0.05²)* or almost *1170*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code to compute this in Clojure is fairly simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the code from the prompt gives us the response that we expect:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Part of the reason to calculate the number of participants needed is that monitoring
    the progress of the experiment and stopping it prematurely can invalidate the
    results of the test because it increases the risk of false positives where the
    experiment says it has disproved the null hypothesis when it really hasn't.
  prefs: []
  type: TYPE_NORMAL
- en: This seems counterintuitive, doesn't it? Once we have significant results, we
    should be able to stop the test. Let's work through it.
  prefs: []
  type: TYPE_NORMAL
- en: Let's say that in actuality, there's no difference between the control page
    and the test page. That is, both sets of copy for the button get approximately
    the same click-through rate. If we're attempting to get *p ≤ 0.05*, then it means
    that the test will return a false positive five percent of the time. It will incorrectly
    say that there is a significant difference between the click-through rates of
    the two buttons five percent of the time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s say that we''re running the test and planning to get 3,000 subjects.
    We end up checking the results of every 1,000 participants. Let''s break down
    what might happen:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Run | A | B | C | D | E | F | G | H |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **1000** | No | No | No | No | Yes | Yes | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| **2000** | No | No | Yes | Yes | No | Yes | No | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| **3000** | No | Yes | No | Yes | No | No | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| **Final** | No | Yes | No | Yes | No | No | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| **Stopped** | No | Yes | Yes | Yes | Yes | Yes | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: Let's read this table. Each lettered column represents a scenario for how the
    significance of the results may change over the run of the test. The rows represent
    the number of observations that have been made. The row labeled *Final* represents
    the experiment's true finishing result, and the row labeled *Stopped* represents
    the result if the experiment is stopped as soon as a significant result is seen.
  prefs: []
  type: TYPE_NORMAL
- en: The final results show us that out of eight different scenarios, the final result
    would be significant in four cases (B, D, G, and H). However, if the experiment
    is stopped prematurely, then it will be significant in seven cases (all but A).
    The test could drastically over-generate false positives.
  prefs: []
  type: TYPE_NORMAL
- en: In fact, most statistical tests assume that the sample size is fixed before
    the test is run.
  prefs: []
  type: TYPE_NORMAL
- en: It's exciting to get good results, so we'll design our system so that we can't
    easily stop it prematurely. We'll just take that temptation away.
  prefs: []
  type: TYPE_NORMAL
- en: With this in mind, let's consider how we can implement this test.
  prefs: []
  type: TYPE_NORMAL
- en: Building the experiment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are several options to actually implement the A/B test. We'll consider
    several of them and weigh their pros and cons. Ultimately, the option that works
    best for you really depends on your circumstances. However, we'll pick one for
    this chapter and use it to implement the test for it.
  prefs: []
  type: TYPE_NORMAL
- en: Looking at options to build the site
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The first way to implement A/B testing is to use a server-side implementation.
    In this case, all of the processing and tracking is handled on the server, and
    visitors' actions would be tracked using GET or POST parameters on the URL for
    the resource that the experiment is attempting to drive traffic towards.
  prefs: []
  type: TYPE_NORMAL
- en: 'The steps for this process would go something like the following ones:'
  prefs: []
  type: TYPE_NORMAL
- en: A new user visits the site and requests for the page that contains the button
    or copy that is being tested.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The server recognizes that this is a new user and assigns the user a tracking
    number.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It assigns the user to one of the test groups.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It adds a row in a database that contains the tracking number and the test group
    that the user is part of.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It returns the page to the user with the copy, image, or design that is reflective
    of the control or test group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The user views the returned page and decides whether to click on the button
    or link or not.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the server receives a request for the button's or link's target, it updates
    the user's row in the tracking table to show us that the interaction was a success,
    that is, that the user did a click-through or made a purchase.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This way of handling it keeps everything on the server, so it allows more control
    and configuration over exactly how you want to conduct your experiment.
  prefs: []
  type: TYPE_NORMAL
- en: 'A second way of implementing this would be to do everything using JavaScript
    (or ClojureScript, [https://github.com/clojure/clojurescript](https://github.com/clojure/clojurescript)).
    In this scenario, the code on the page itself would randomly decide whether the
    user belonged to the control or the test group, and it would notify the server
    that a new observation in the experiment was beginning. It would then update the
    page with the appropriate copy or image. Most of the rest of this interaction
    is the same as the one in previous scenario. However, the complete steps are as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: A new user visits the site and requests for the page that contains the button
    or copy being tested.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The server inserts some JavaScript to handle the A/B test into the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As the page is being rendered, the JavaScript library generates a new tracking
    number for the user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It assigns the user to one of the test groups.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It renders that page for the group that the user belongs to, which is either
    the control group or the test group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It notifies the server of the user's tracking number and the group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The server takes this notification and adds a row for the observation in the
    database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The JavaScript in the browser tracks the user's next move either by directly
    notifying the server using an AJAX call or indirectly using a GET parameter in
    the URL for the next page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The server receives the notification whichever way it's sent and updates the
    row in the database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The downside of this is that having JavaScript take care of rendering the experiment
    might take slightly longer and may throw off the experiment. It's also slightly
    more complicated, because there are more parts that have to communicate. However,
    the benefit is that you can create a JavaScript library, easily throw a small
    script tag into the page, and immediately have a new A/B experiment running.
  prefs: []
  type: TYPE_NORMAL
- en: In reality, though, you'll probably just use a service that handles this and
    more for you. However, it still makes sense to understand what they're providing
    for you, and that's what this chapter tries to do by helping you understand how
    to perform an A/B test so that you can be make better use of these A/B testing
    vendors and services.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing A/B testing on the server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For the purposes of this chapter, we'll implement the A/B test on the server.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we''ll create a new project using **Leiningen 2** ([http://leiningen.org/](http://leiningen.org/))
    and the **Luminus web framework** ([http://www.luminusweb.net/](http://www.luminusweb.net/)).
    We''ll include some options to include the **H2 embedded database** ([http://www.h2database.com/](http://www.h2database.com/))
    and **ClojureScript support** ([https://github.com/clojure/clojurescript](https://github.com/clojure/clojurescript)).
    We do this with the following command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This command creates the scaffolding for a website. We'll first get familiar
    with what the scaffolding provides, and then we'll fill in the parts of the site
    with the core site. Next, we'll add the A/B testing, and finally, we'll add a
    couple of pages to view the results.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the scaffolded site
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Luminus is a web framework that is built by combining other libraries and tying
    them together. For database access and models, it uses **Korma** ([http://sqlkorma.com/](http://sqlkorma.com/)).
    For HTML templates, it uses **Selmer** ([https://github.com/yogthos/Selmer](https://github.com/yogthos/Selmer)),
    which is a port of Django-style templates. For routing, controllers, sessions,
    and everything else, it uses **lib-noir** ([http://yogthos.github.io/lib-noir/](http://yogthos.github.io/lib-noir/))
    and **Compojure** ([https://github.com/weavejester/compojure/](https://github.com/weavejester/compojure/)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Everything in the directory that contains a Luminus project will be a consistent
    set of subdirectories named after the project. For instance, in the project that
    we just created for this (`web-ab`), the primary directories would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`resources` is the directory of static resources. It contains the CSS, JavaScript,
    and image files for the site.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`src` is the directory of Clojure files. Several of the subdirectories in this
    directory tree are important too, so I''ll list them separately.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`src/web_ab/models/` is the directory that contain the Clojure files that define
    the model and interact with the database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`src/web_ab/routes/` is the directory that lists the routes in a web application.
    Each module under this defines the routes and handlers for a particular subsection
    of the site.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`src/web_ab/views/templates/` is the directory that contains the Selmer templates.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`test/web_ab/test/` is the directory that contains the `clojure.test` tests
    for the site''s handlers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We'll primarily deal with the directories under `src/web-ab/`. We'll define
    the models, define the routes and handlers, and fill in the templates.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we work, we can view the site as we''re developing it by using the development
    server. You can start this using the following Leiningen command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Once this server is executed, we can view the site by pointing our browser to
    `http://localhost:3000/`.
  prefs: []
  type: TYPE_NORMAL
- en: Building the test site
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we need to add in the content for the main page. The file that we''ll
    want to change will be in `src/web_ab/views/templates/home.html`. We''ll add the
    following HTML content to that page. (There are a lot more CSS and images involved
    in creating the site that we saw in the screenshot earlier. All this is listed
    in the code download for this chapter.) Take a look at the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: When the time comes to add in the A/B testing features, we'll change this a
    little, but most of this is good as it is.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll also need a page to direct the users to if they want to buy a widget.
    We''ll first define a route for this page in the `src/web_ab/routes/home.clj`
    file. The following is the route and the controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The view is defined in the `src/web_ab/views/templates/purchase.html` file.
    This file is very similar to the preceding template file, except that it's considerably
    simpler. It just contains a thank you message for the left panel, and there's
    no button or link on the right-hand side. For more details about this page, see
    the code download.
  prefs: []
  type: TYPE_NORMAL
- en: '![Building the test site](img/4139OS_08_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In fact, this is enough to define the base, control site in this project. Now
    let's look at what we need to do to define the A/B testing features.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing A/B testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Adding A/B testing into the site that we have so far will be pretty straightforward
    web development. We''ll need to define a model and functions that implement the
    test framework''s basic functionality. We can then incorporate them into the site''s
    existing controllers and views:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The code that defines the data and the database settings will go into the `src/web_ab/models/schema.clj`
    file. It will start with the following namespace declaration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The first facet of this section of the site that we''ll define is the model.
    We''ll add a table to the database schema that defines a table to track the A/B
    participants:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, in the `src/web_ab/models/db.clj` file, we''ll define some low-level functions
    to work with the rows in this table. For this file, we''ll use the following namespace
    declaration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The first function in this namespace will take a group keyword (`:control`
    or `:test`) and insert a row into the database with a code that represents that
    group and the default values for the starting time (the current time) and the
    time in which the interaction succeeds (`NULL`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we''ll create a function that sets an `abtracking` object''s succeed
    field to the current time. This will mark the interaction as a success:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: These, along with a few other functions that you can find in the code download
    for this chapter, will form a low-level interface with this data table. Most of
    the time, however, we'll deal with A/B testing using a slightly higher-level interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'This interface will live in the `src/web_ab/ab_testing.clj` file. It will contain
    the following namespace declaration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'To understand the code in this module, we need to first talk about how the
    A/B testing system will work. We have the following number of requirements that
    we need to make sure are implemented:'
  prefs: []
  type: TYPE_NORMAL
- en: If the users have visited the site before the A/B test, they should see the
    control version of the site. We assume that there's a tracking cookie already
    being used for this. In this case, the cookie will be named *visits*, and it will
    simply track the number of times a user has visited the home page of the site.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If this is the users' first visit to the site, they will be randomly assigned
    to the control group or the test group, and they'll be shown the appropriate page
    for that group. Also, they'll receive a tracking cookie for the observation that
    they are, and we'll insert the tracking information for them into the database.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the users have visited the site earlier and are participants in the A/B test,
    they should see the same version of the site that they saw previously.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, when a user who is a participant in the experiment visits the purchase
    page, that observation in the experiment will be marked as a success.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We'll write functions for most of these cases as well as a function to route
    the user to the right branch whenever one visits the front page. We'll write another
    function to handle item number four.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the first function, we''ll implement what''s necessary to start a new observation
    in the experiment. We''ll enter the functions into the database and insert the
    tracking cookie into the session:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The functions in the `db` namespace (aliased from `web-ab.models.db`) are from
    the low-level model interface that we just defined. In fact, the implementation
    for `create-abtracking` is listed on the preceding page.
  prefs: []
  type: TYPE_NORMAL
- en: The `c/put!` function is from the `noir.cookies` namespace. It inserts the cookie
    value into the session. In this case, it inserts the tracking instance's database
    ID under the `abcode` key.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, `new-test` returns the text that should be used on the page.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next function for this level of abstraction is `get-previous-copy`. This
    is used whenever a user who is already a participant in the experiment visits
    the page again. It takes a database ID and the different versions of the site
    that are being used in the current test, and it retrieves the row from the database
    and looks up the right copy text to be used on the page, given whether the observation
    is in the control group or the test group:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This function simply runs the input through a number of conversions. First,
    this function converts it to a full data row tuple based on the database ID. Next,
    it selects the `testgroup` field, and it translates it into a group keyword. This
    is finally translated into the appropriate text for the page, based on the group
    keyword.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next function that we''re going to look at ties the two previous functions
    together with item number one from the preceding list (where the returning visitors
    are shown the control page without being entered into the experiment):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'First, this function expects three parameters: the cookie name for the counter,
    the default text for the control page, and a map from the group keywords to page
    text. This function looks at the value of the counter cookie and the *abtest*
    cookie, both of which will be `-1` or `0` if they''re not set, and it decides
    what should be displayed for the user as well as inserts whatever needs to be
    inserted into the database.'
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding code snippet, we can see that the calls to the two functions
    that we've just looked at are highlighted in the code listing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, here we define a function that looks for the *abtest* cookie and, if
    it''s found, we mark it as having succeeded, shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, once the experiment is over, we need to perform the analysis that
    determines whether the control page performed better or the test page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: To perform the actual analysis, we use the t-test function from `incanter.stats`
    in the **Incanter** library ([http://incanter.org/](http://incanter.org/)). We'll
    get into this analysis in more detail later in the chapter. For now, let's just
    pay attention to how the data flows through this function. The `t-test` function
    returns a map that contains a lot of numbers. For the output, we need to select
    some of this information and rename the keys for some of the data that we will
    use. We use the core `select-keys` function to select only the information that
    we need, and we use `clojure.set`/`rename-keys` to give the rest of the names
    that will fit our current domain in a better manner.
  prefs: []
  type: TYPE_NORMAL
- en: To the results of the analysis, we'll also add a couple of other pieces of data.
    One will be the alpha value, that is, the target value for p that we're trying
    to improve upon. The other depends on whether the results are significant or not.
    This is found by testing the value of p against the significance level that we're
    trying for.
  prefs: []
  type: TYPE_NORMAL
- en: With the low-level and high-level interfaces to the A/B testing process in place,
    we can turn our attention to actually using it. First, we need to update the view
    template for the home page from what we listed in the preceding snippet.
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember, the file is in `src/web_ab/views/templates/home.html`. We want to
    simply change the name of the link to go to the purchase page. It needs to be
    a parameter that we can use to insert a value into the template. For instance,
    the following snippet contains the updated version of the right-hand panel, including
    the highlighted line that we can use to insert the text into the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The controllers will also need to change. They need to trigger the appropriate
    stages in the test participant's lifecycle, and they need to pass the button text
    into the template.
  prefs: []
  type: TYPE_NORMAL
- en: 'The controller for the home page does this as part of one form. It calls `start-test`,
    and builds the template parameters using its output directly. This addition to
    the controller is highlighted as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The controller for the purchase page just incorporates a call to `mark-succeed`
    in its normal flow:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: At this point, everything is in place to actually conduct the test; however,
    we cannot tell when it's over or look at the results. We can add this section
    of the website in the next stage.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing the results
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We'll add the A/B test result's views as separate pages in a separate section
    of the site. It will use the same `abtracking` model as the rest of the A/B testing,
    but we'll define more controllers and views.
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the primary features of this part of the site is that we don''t want
    to display some information before the test is complete. In order to decide this,
    we''ll first define a map that specifies how many observations from each group
    we need:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'We can use these values to define a predicate that tests whether enough participants
    have been registered in order to call the experiment complete. It reads the participants
    from the database and categorizes them by the experiment group. It compares the
    counts of these groups to the target counts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'We can use this to go a step further. We''ll define a function that takes the
    list of rows from the `abtracking` table and a function that renders a page. It
    tests whether the experiment has been performed. If it is complete, it passes
    the on processing to that function. If it''s not, it displays a standard page
    that informs the user that the experiment has not been completed yet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Now, with these utilities in place, we can define a couple of pages. The first
    one will list the participants from the `abtracking` table. You can find the controller
    function and the view template in the code download. Both are relatively straightforward.
  prefs: []
  type: TYPE_NORMAL
- en: 'The other is slightly more interesting for a couple of reasons. First, it uses
    the `when-is-over` function that we just saw, and second, it performs the statistical
    test to determine whether the control page performed better or the test page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: As mentioned, this function uses the `when-is-over` function that we just defined
    in order to bypass this page and display a standard page that just says that the
    experiment has not been finished yet.
  prefs: []
  type: TYPE_NORMAL
- en: The statistical test, which is highlighted, calls the `perform-test` function
    that we talked about earlier.
  prefs: []
  type: TYPE_NORMAL
- en: The template for these primarily displays the results in a grid. It also has
    a colored alert at the top of the page, which indicates whether the control performed
    better or the test groups.
  prefs: []
  type: TYPE_NORMAL
- en: Looking at A/B testing as a user
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that all the parts are together, let's walk through the user's interaction
    with the site. Most people who visit your site won't know that there are two different
    versions of the site, so they should interact with your site as they normally
    would.
  prefs: []
  type: TYPE_NORMAL
- en: When they first visit your site, users should see the following screen. The
    text on the button in the lower-right section might be different, but the rest
    should be the same for everyone.
  prefs: []
  type: TYPE_NORMAL
- en: '![Looking at A/B testing as a user](img/4139OS_08_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the user clicks on **Learn more!** (in this case), they complete the purchase,
    and all the users should see the following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Looking at A/B testing as a user](img/4139OS_08_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: However, the more interesting part of this isn't what happens with the user
    but what happens afterwards when we can look at and analyze the results. We'll
    see some details about this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing the results
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Obviously, we're not going to be able to get a few thousand people to visit
    our website and purchase the widgets. In place of actual participants, I've populated
    the database with random data. This should allow us to see how the analysis section
    of the website works and what it means.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout the experiment, we can get a list of the participants by visiting
    `http://localhost:3000/ab-testing/` on the local development server. This allows
    us to track the experiment's progress without really getting into the results
    and without having direct access to the counts.
  prefs: []
  type: TYPE_NORMAL
- en: '![Analyzing the results](img/4139OS_08_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: While the experiment is running, we don't really want to get more information
    than this page displays. This is where the `when-is-over` function, which we previously
    saw, comes into play. When we visited the page earlier, we had sufficient participants
    in the experiment, and then we got a page that explained that the experiment was
    not done and gave some indication as to how much longer it has to go on for.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the following screenshot has about all the information we want
    to provide at this point in the experiment:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Analyzing the results](img/4139OS_08_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Of course, once the experiment is complete, we'd like to be able to see the
    final results, including whether the results allow us to reject the null hypothesis,
    that is, whether the test group performed better than the control group in a statistically
    significant way or not.
  prefs: []
  type: TYPE_NORMAL
- en: 'So when the experiment is complete, we get the following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Analyzing the results](img/4139OS_08_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There's more information included on this page. The following is a table that
    contains the rest of the data and a short explanation of what they are. We'll
    go into more detail on them in the next section, where we talk about the t-test.
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Value | Explanation |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| :control-mean | 252 | The average of the control group. |'
  prefs: []
  type: TYPE_TB
- en: '| :control-n | 1226 | The number of observations in the control group. |'
  prefs: []
  type: TYPE_TB
- en: '| :control-p | 0.20555 | The conversion rate of the control group. |'
  prefs: []
  type: TYPE_TB
- en: '| :control-variance | 200.20228 | The variance for the control group. |'
  prefs: []
  type: TYPE_TB
- en: '| :df | 2401.10865 | The degrees of freedom. |'
  prefs: []
  type: TYPE_TB
- en: '| :p-target | 0.05 | The alpha value for the test: the maximum p-value for
    the test. |'
  prefs: []
  type: TYPE_TB
- en: '| :p-value | 0.00000 | The actual p value for the t-test. |'
  prefs: []
  type: TYPE_TB
- en: '| :se | 0.59806 | The standard error. |'
  prefs: []
  type: TYPE_TB
- en: '| :significant | TRUE | Checking whether the results statistically significant
    |'
  prefs: []
  type: TYPE_TB
- en: '| :t-value | 108.68414 | The results of the t-test. |'
  prefs: []
  type: TYPE_TB
- en: '| :test-mean | 317.00000 | The mean of the test group. |'
  prefs: []
  type: TYPE_TB
- en: '| :test-n | 1200 | The number of observations in the test group. |'
  prefs: []
  type: TYPE_TB
- en: '| :test-p | 0.26417 | The conversion rate of the test group. |'
  prefs: []
  type: TYPE_TB
- en: '| :test-variance | 233.25917 | The variance for the test group. |'
  prefs: []
  type: TYPE_TB
- en: These values are given in another table further down the page in the preceding
    screenshot. To understand the statistical values in a better manner, let's dig
    more into exactly what test we used.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the t-test
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: First, we need to understand the statistical nature of the test that we're performing.
  prefs: []
  type: TYPE_NORMAL
- en: Fundamentally, the experiment is pretty simple; each observation has one of
    two outcomes. In many ways, this is a series of coin flips. Each flip can be heads
    or tails. Each site interaction can succeed or fail.
  prefs: []
  type: TYPE_NORMAL
- en: 'This kind of value is known as a binomial random variable. It can take one
    of two values, which vary according to a set probability. Binomial random variables
    have a number of assumptions that must be met:'
  prefs: []
  type: TYPE_NORMAL
- en: There are a fixed number of observations (*n*).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each observation will have one of the two possible outcomes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The n observations are independent, that is, the outcome of one observation
    does not in any way influence the probability of any other observation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The probability of the outcomes stays constant over time, that is, the probability
    of the outcome X (*P(X)*) will always be, say, 0.5\. You can easily violate that
    in the design of the experiment by running the control page and the test page
    consecutively instead of running them simultaneously. If they're not run together,
    one page could be used during a busier time to get better results.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A common example of a binomial random variable is testing coin tosses. Let's
    use this as a first example, and then we'll apply what we've learned to our A/B
    test.
  prefs: []
  type: TYPE_NORMAL
- en: Testing coin tosses
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Specifically, we'll have a coin that we know is fair and we'll test another
    coin that we suspect is biased against it. The null hypothesis is that there is
    no difference between the two coins and that both are true.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps show us how this experiment will fulfill the assumptions
    of a binomial test:'
  prefs: []
  type: TYPE_NORMAL
- en: We'll flip each coin 100 times.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Each coin toss (each observation) can be heads or tails.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Each coin toss is independent. Its probability isn't influenced by the probability
    of any other coin toss.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The probability of heads or tails won't change over time. The probability of
    heads (P(heads)) and the probability of tails (P(tails)) will be 0.5 during the
    entire test, or for the true coin, at least.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: First, let's think about what will happen when we flip the true coin. We know
    that P(heads) = 0.5\. Theoretically, every time we flip the coin for 100 times,
    we expect to get 50 heads and 50 tails. Of course, that isn't what happens in
    real life. Sometimes, we'll get 57 heads and 43 tails. Sometimes, we may get 44
    heads and 56 tails. In extremely rare cases, we may get 100 heads and no tails.
    The distribution of coin tosses will form a binomial distribution, which is the
    number of successes in a series of yes/no experiments; however, as the number
    of coin tosses approaches infinity, the probability of all of these cases can
    be approximated by a normal distribution around the theoretical, expected probability
    of 50 heads and 50 tails.
  prefs: []
  type: TYPE_NORMAL
- en: For this experiment, let's say that we flipped a true coin 100 times, and we
    get heads 53 times.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's think about what will happen when we flip the other coin. It may
    be true, or it may be biased. If it is biased, we don't know it's biased by how
    much. So, when we flip it 100 times, and we get heads 58 times, we don't know
    if it's because P(heads) = 0.58 or because P(heads) = 0.5, P(heads) = 0.6, or
    something else, and we're slightly off this result on a normal distribution.
  prefs: []
  type: TYPE_NORMAL
- en: So we're interested in two things here. Primarily, we're interested in the difference
    between the two probabilities. Or, to express it in terms of the experiment, we're
    interested in the difference of means. We want to know whether the difference
    between 0.53 and 0.58 (0.05) is significant. The following graph illustrates the
    relationship that we're looking at in a continuous form. The actual data here
    is discrete, of course, but the continuous graph makes the relationship a little
    more clear.
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing coin tosses](img/4139OS_08_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The expected number of successes of a binomial random variable is given by
    the following formula:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing coin tosses](img/4139OS_08_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The Clojure code for the sample mean of a binomial variable is similarly straightforward:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: So, for the control group (the known true coins), the mean is 53, and for the
    test group (the possibly biased coins), it's 58.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to answer whether the difference is significant, we also have to be
    interested in something else: the possibility that we''re wrong. We can assume
    that the actual means are somewhat different than the actual numbers we''re dealing
    with, but how far off are they?'
  prefs: []
  type: TYPE_NORMAL
- en: To answer this, we need to be able to calculate the standard error for our figures.
    Given a normal distribution, what's the probability that the figures are so far
    off that they'd give us the wrong result? To be able to answer this, we need to
    know something about how much variance the distribution has, that is, how wide
    the curve of the distribution's graph is.
  prefs: []
  type: TYPE_NORMAL
- en: Like the mean, the variance for a binomial random variable is pretty simple.
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing coin tosses](img/4139OS_08_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The Clojure function for this is a little more complicated, but it''s still
    clear:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: This gives us variances of 24.91 and 24.36.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the variance, we can calculate the standard error of the difference. This
    is an estimate of the standard deviation of all sample means, and it gives us
    some idea of how far off our means might be, given how variable the data is and
    how much data we''re looking at. The following is the formula for that:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing coin tosses](img/4139OS_08_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The standard error function in Clojure is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: For the coin flipping experiment, our standard error is 0.702.
  prefs: []
  type: TYPE_NORMAL
- en: We finally get to the **t-value**. This measures the difference between the
    means, scaled by how variable the groups are.
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing coin tosses](img/4139OS_08_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Like the formula, the Clojure function for this builds upon all of the functions
    that we''ve just defined:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: So the t-value of our coin flipping experiment is 7.123.
  prefs: []
  type: TYPE_NORMAL
- en: The output values of this formula follow a t distribution. This is very similar
    to a normal distribution, but the peak is smaller and the tails are heavier. However,
    as the degrees of freedom grow, it comes closer to a normal distribution. You
    can use the cumulative density function for the t-distribution or look in a table
    for the p value of this number.
  prefs: []
  type: TYPE_NORMAL
- en: We'll use Incanter's cumulative distribution functions to look up the probabilities
    of the particular t-values. In order to calculate this, we need to calculate the
    degrees of freedom for the test. When the variances of both the groups are equal,
    the formula is simple. However, for this, that will rarely be the case. For unequal
    variances, we'll use the Welch-Satterthwaite equation. It's a bit complicated,
    but it's what we have to work with.
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing coin tosses](img/4139OS_08_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In this equation, *s²* is the variation, *N* is the sample size, and *v* is
    *N-1*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Clojure code for this is only slightly less complicated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, from REPL, we can test to see whether the coin toss test can reject the
    null hypothesis, that is, whether the second coin is biased:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: So we can see that in the case of the coin flips, the coin is in fact biased
    and significantly so.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the results
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s take this same process and apply it again to the A/B test that we just
    conducted. This will help us see where the statistics in the preceding table came
    from:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we''ll create the data sets by taking the number of observations and
    successes from each group:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we can compute the mean and variance for each group:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This allows us to find the standard error:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Finally, we can get the t-value, degrees of freedom, and the p-value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This gives us the probability that the test results did not occur randomly.
    We're looking for them to be over 0.95, and they clearly are.
  prefs: []
  type: TYPE_NORMAL
- en: If this data occurred naturally, the very high p value makes us suspect that
    we may have a **type one error** or a false positive. However, in this case, the
    data wasn't generated completely randomly. In the code download, I've combined
    all of these into one function that gets called to perform the statistical test.
    This is what is used to generate the data for the table on the results page.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Over the course of this chapter, we've seen how to conceive of, create, and
    analyze the results of an A/B test.
  prefs: []
  type: TYPE_NORMAL
- en: The statistics themselves are really a continuation of the null-hypothesis testing
    that we saw in [Chapter 7](ch07.html "Chapter 7. Null Hypothesis Tests – Analyzing
    Crime Data"), *Null Hypothesis Tests – Analyzing Crime Data*. A/B testing provides
    a nice, complete, useful example of the workflow involved in using null-hypothesis
    testing and of the power and the help in the decision-making that it provides.
  prefs: []
  type: TYPE_NORMAL
- en: This allows us to use a standard and widely used way of testing exactly what
    variations on a website drive more interactions and allow us to identify and serve
    the site's users in a better manner. It allows us to decide on changes to the
    site in structured, testable ways.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, in actuality, we'll probably want to use an existing service. There
    are several services out there, from bare bones but free services such as Google
    Analytics Content Experiments to full-featured for-pay services that cover all
    aspects of A/B testing, such as **Optimizely**, **Visual Website Optimizer**,
    or **Maxymiser**. However, knowing what's involved in A/B testing and what the
    best practices are means that we can evaluate and use these services and get the
    most from them in a better manner.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll look at applying the data analysis to another part
    of the Web; we'll analyze how people participate in social sites by looking at
    patterns of participation in the **Stackoverflow** ([http://stackoverflow.com/](http://stackoverflow.com/))
    data dumps.
  prefs: []
  type: TYPE_NORMAL
