["```py\n> library(hflights)\n> library(data.table)\n> dt <- data.table(hflights)[, list(\n+     N         = .N,\n+     Cancelled = sum(Cancelled),\n+     Distance  = Distance[1],\n+     TimeVar   = sd(ActualElapsedTime, na.rm = TRUE),\n+     ArrDelay  = mean(ArrDelay, na.rm = TRUE)) , by = Dest]\n\n```", "```py\n> str(dt)\nClasses 'data.table' and 'data.frame': 116 obs. of 6 variables:\n $ Dest     : chr  \"DFW\" \"MIA\" \"SEA\" \"JFK\" ...\n $ N        : int  6653 2463 2615 695 402 6823 4893 5022 6064 ...\n $ Cancelled: int  153 24 4 18 1 40 40 27 33 28 ...\n $ Distance : int  224 964 1874 1428 3904 305 191 140 1379 862 ...\n $ TimeVar  : num  10 12.4 16.5 19.2 15.3 ...\n $ ArrDelay : num  5.961 0.649 9.652 9.859 10.927 ...\n - attr(*, \".internal.selfref\")=<externalptr>\n\n```", "```py\n> library(ggmap)\n> (h <- geocode('Houston, TX'))\nInformation from URL : http://maps.googleapis.com/maps/api/geocode/json?address=Houston,+TX&sensor=false\n lon      lat\n1 -95.3698 29.76043\n\n```", "```py\n> dt[, c('lon', 'lat') := geocode(Dest)]\n\n```", "```py\n> str(setDF(dt))\n'data.frame':  116 obs. of  8 variables:\n $ Dest     : chr  \"DFW\" \"MIA\" \"SEA\" \"JFK\" ...\n $ N        : int  6653 2463 2615 695 402 6823 4893 5022 6064 ...\n $ Cancelled: int  153 24 4 18 1 40 40 27 33 28 ...\n $ Distance : int  224 964 1874 1428 3904 305 191 140 1379 862 ...\n $ TimeVar  : num  10 12.4 16.5 19.2 15.3 ...\n $ ArrDelay : num  5.961 0.649 9.652 9.859 10.927 ...\n $ lon      : num  -97 136.5 -122.3 -73.8 -157.9 ...\n $ lat      : num  32.9 34.7 47.5 40.6 21.3 ...\n\n```", "```py\n> library(maps)\n> map('state')\n> title('Flight destinations from Houston,TX')\n> points(h$lon, h$lat, col = 'blue', pch = 13)\n> points(dt$lon, dt$lat, col = 'red', pch = 19)\n\n```", "```py\n> text(dt$lon, dt$lat + 1, labels = dt$Dest, cex = 0.7)\n\n```", "```py\n> map('state')\n> title('Frequent flight destinations from Houston,TX')\n> points(h$lon, h$lat, col = 'blue', pch = 13)\n> points(dt$lon, dt$lat, pch = 19,\n+   col = rgb(1, 0, 0, dt$N / max(dt$N)))\n> legend('bottomright', legend = round(quantile(dt$N)), pch = 19, \n+   col = rgb(1, 0, 0, quantile(dt$N) / max(dt$N)), box.col = NA)\n\n```", "```py\n> str(map_data <- map('state', plot = FALSE, fill = TRUE))\nList of 4\n $ x    : num [1:15599] -87.5 -87.5 -87.5 -87.5 -87.6 ...\n $ y    : num [1:15599] 30.4 30.4 30.4 30.3 30.3 ...\n $ range: num [1:4] -124.7 -67 25.1 49.4\n $ names: chr [1:63] \"alabama\" \"arizona\" \"arkansas\" \"california\" ...\n - attr(*, \"class\")= chr \"map\"\n\n```", "```py\n> grep('^washington', map_data$names, value = TRUE)\n[1] \"washington:san juan island\" \"washington:lopez island\"\n[3] \"washington:orcas island\"    \"washington:whidbey island\"\n[5] \"washington:main\"\n\n```", "```py\n> states <- sapply(strsplit(map_data$names, ':'), '[[', 1)\n\n```", "```py\n> library(maptools)\n> us <- map2SpatialPolygons(map_data, IDs = states,\n+    proj4string = CRS(\"+proj=longlat +datum=WGS84\"))\n\n```", "```py\n> plot(us)\n\n```", "```py\n> library(sp)\n> dtp <- SpatialPointsDataFrame(dt[, c('lon', 'lat')], dt,\n+   proj4string = CRS(\"+proj=longlat +datum=WGS84\"))\n> str(sp::over(us, dtp))\n'data.frame':  49 obs. of  8 variables:\n $ Dest     : chr  \"BHM\" \"PHX\" \"XNA\" \"LAX\" ...\n $ N        : int  2736 5096 1172 6064 164 NA NA 2699 3085 7886 ...\n $ Cancelled: int  39 29 34 33 1 NA NA 35 11 141 ...\n $ Distance : int  562 1009 438 1379 926 NA NA 1208 787 689 ...\n $ TimeVar  : num  10.1 13.61 9.47 15.16 13.82 ...\n $ ArrDelay : num  8.696 2.166 6.896 8.321 -0.451 ...\n $ lon      : num  -86.8 -112.1 -94.3 -118.4 -107.9 ...\n $ lat      : num  33.6 33.4 36.3 33.9 38.5 ...\n\n```", "```py\ngeocode('LAX','all')$results[[1]]$address_components\n\n```", "```py\n> str(sapply(sp::over(us, dtp, returnList = TRUE),\n+   function(x) sum(x$Cancelled)))\n Named int [1:49] 51 44 34 97 23 0 0 35 66 149 ...\n - attr(*, \"names\")= chr [1:49] \"alabama\" \"arizona\" \"arkansas\" ...\n\n```", "```py\n> dtp <- SpatialPointsDataFrame(dt[, c('lon', 'lat')],\n+    dt[, 'Cancelled', drop = FALSE],\n+    proj4string = CRS(\"+proj=longlat +datum=WGS84\"))\n> str(cancels <- sp::over(us, dtp, fn = sum))\n'data.frame':  49 obs. of  1 variable:\n $ Cancelled: int  51 44 34 97 23 NA NA 35 66 149 ...\n\n```", "```py\n> val <- cancels$Cancelled[match(states, row.names(cancels))]\n\n```", "```py\n> val[is.na(val)] <- 0\n\n```", "```py\n> map(\"state\", col = rgb(1, 0, 0, sqrt(val/max(val))), fill = TRUE)\n> title('Number of cancelled flights from Houston to US states')\n> points(h$lon, h$lat, col = 'blue', pch = 13)\n> legend('bottomright', legend = round(quantile(val)),\n+   fill = rgb(1, 0, 0, sqrt(quantile(val)/max(val))), box.col = NA)\n\n```", "```py\n> library(fields)\n> out <- as.image(dt$ArrDelay, x = dt[, c('lon', 'lat')],\n+   nrow = 256, ncol = 256)\n\n```", "```py\n> table(is.na(out$z))\nFALSE  TRUE \n 112 65424\n\n```", "```py\n> image(out)\n\n```", "```py\n> image(out, xlim = base::range(map_data$x, na.rm = TRUE),\n+            ylim = base::range(map_data$y, na.rm = TRUE))\n\n```", "```py\n> look <- image.smooth(out, theta = .5)\n> table(is.na(look$z))\nFALSE  TRUE \n14470 51066\n\n```", "```py\n> image(look)\n\n```", "```py\n> usa_data <- map('usa', plot = FALSE, region = 'main')\n> p <- expand.grid(look$x, look$y)\n> library(sp)\n> n <- which(point.in.polygon(p$Var1, p$Var2,\n+  usa_data$x, usa_data$y) == 0)\n> look$z[n] <- NA\n\n```", "```py\n> map(\"usa\")\n> image(look, add = TRUE)\n> map(\"state\", lwd = 3, add = TRUE)\n> title('Arrival delays of flights from Houston')\n> points(dt$lon, dt$lat, pch = 19, cex = .5)\n> points(h$lon, h$lat, pch = 13)\n\n```", "```py\n> library(deldir)\n> map(\"usa\")\n> plot(deldir(dt$lon, dt$lat), wlines = \"tess\", lwd = 2,\n+   pch = 19, col = c('red', 'darkgray'), add = TRUE)\n\n```", "```py\n> library(OpenStreetMap)\n> map <- openmap(c(max(map_data$y, na.rm = TRUE),\n+                  min(map_data$x, na.rm = TRUE)),\n+                c(min(map_data$y, na.rm = TRUE),\n+                  max(map_data$x, na.rm = TRUE)),\n+                type = 'stamen-terrain')\n\n```", "```py\n> map <- openproj(map,\n+   projection = '+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs')\n\n```", "```py\n> plot(map)\n> plot(deldir(dt$lon, dt$lat), wlines = \"tess\", lwd = 2,\n+   col = c('red', 'black'), pch = 19, cex = 0.5, add = TRUE)\n\n```", "```py\n> cancels$state <- rownames(cancels)\n> cancels$Cancelled[is.na(cancels$Cancelled)] <- 0\n\n```", "```py\n> library(googleVis)\n> plot(gvisGeoChart(cancels, 'state', 'Cancelled',\n+                   options = list(\n+                       region      = 'US',\n+                       displayMode = 'regions', \n+                       resolution  = 'provinces')))\n\n```", "```py\n> dt$LatLong <- paste(dt$lat, dt$lon, sep = ':')\n\n```", "```py\n> dt$tip <- apply(dt, 1, function(x)\n+                  paste(names(dt), x, collapse = '<br/ >'))\n\n```", "```py\n> plot(gvisMap(dt, 'LatLong', tipvar = 'tip'))\n\n```", "```py\n> devtools::install_github('ramnathv/rCharts')\n\n```", "```py\n> library(rCharts)\n> map <- Leaflet$new()\n> map$setView(as.numeric(dt[which(dt$Dest == 'MCI'),\n+   c('lat', 'lon')]), zoom = 4)\n> for (i in 1:nrow(dt))\n+     map$marker(c(dt$lat[i], dt$lon[i]), bindPopup = dt$tip[i])\n> map$show()\n\n```", "```py\n> library(leaflet)\n> leaflet(us) %>%\n+   addProviderTiles(\"Acetate.terrain\") %>%\n+   addPolygons() %>%\n+   addMarkers(lng = dt$lon, lat = dt$lat, popup = dt$tip)\n\n```", "```py\n> dt <- dt[point.in.polygon(dt$lon, dt$lat,\n+                           usa_data$x, usa_data$y) == 1, ]\n\n```", "```py\n> library(diagram)\n> library(scales)\n\n```", "```py\n> map(\"usa\")\n> title('Number of flights, cancellations and delays from Houston')\n> image(look, add = TRUE)\n> map(\"state\", lwd = 3, add = TRUE)\n\n```", "```py\n> for (i in 1:nrow(dt)) {\n+   curvedarrow(\n+     from       = rev(as.numeric(h)),\n+     to         = as.numeric(dt[i, c('lon', 'lat')]),\n+     arr.pos    = 1,\n+     arr.type   = 'circle',\n+     curve      = 0.1,\n+     arr.col    = alpha('black', dt$N[i] / max(dt$N)),\n+     arr.length = dt$N[i] / max(dt$N),\n+     lwd        = dt$Cancelled[i] / max(dt$Cancelled) * 25,\n+     lcol       = alpha('black',\n+                    dt$Cancelled[i] / max(dt$Cancelled)))\n+ }\n\n```", "```py\n> dm <- dist(dt[, c('lon', 'lat')])\n> dm <- as.matrix(dm)\n> idm <- 1 / dm\n> diag(idm) <- 0\n> str(idm)\n num [1:88, 1:88] 0 0.0343 0.1355 0.2733 0.0467 ...\n - attr(*, \"dimnames\")=List of 2\n ..$ : chr [1:88] \"1\" \"3\" \"6\" \"7\" ...\n ..$ : chr [1:88] \"1\" \"3\" \"6\" \"7\" ...\n\n```", "```py\n> dt$TimeVar[is.na(dt$TimeVar)] <- 0\n> library(ape)\n> Moran.I(dt$TimeVar, idm)\n$observed\n[1] 0.1895178\n\n$expected\n[1] -0.01149425\n\n$sd\n[1] 0.02689139\n\n$p.value\n[1] 7.727152e-14\n\n```", "```py\n> library(spdep)\n> idml <- mat2listw(idm)\n> moran.test(dt$TimeVar, idml)\n\n Moran's I test under randomisation\n\ndata:  dt$TimeVar \nweights: idml \n\nMoran I statistic standard deviate = 1.7157, p-value = 0.04311\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n 0.108750656      -0.011494253       0.004911818\n\n```", "```py\n> idml <- mat2listw(idm, style = \"W\")\n> moran.test(dt$TimeVar, idml)\n\n Moran's I test under randomisation\n\ndata:  dt$TimeVar \nweights: idml \nMoran I statistic standard deviate = 7.475, p-value = 3.861e-14\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n 0.1895177587     -0.0114942529      0.0007231471\n\n```"]