["```py\n$ r \nR version 3.2.2 (2015-08-14) -- \"Fire Safety\" \nCopyright (C) 2015 The R Foundation for Statistical Computing \nPlatform: x86_64-apple-darwin13.4.0 (64-bit) \n\nR is free software and comes with ABSOLUTELY NO WARRANTY. \nYou are welcome to redistribute it under certain conditions. \nType 'license()' or 'licence()' for distribution details. \n\n  Natural language support but running in an English locale \n\nR is a collaborative project with many contributors. \nType 'contributors()' for more information and \n'citation()' on how to cite R or R packages in publications. \n\nType 'demo()' for some demos, 'help()' for on-line help, or \n'help.start()' for an HTML browser interface to help. \nType 'q()' to quit R. \n\nWarning: namespace 'SparkR' is not available and has been replaced \nby .GlobalEnv when processing object 'goodTransRecords' \n[Previously saved workspace restored] \n> \n> x <- 5 \n> x \n[1] 5 \n> aNumericVector <- c(10,10.5,31.2,100) \n> aNumericVector \n[1]  10.0  10.5  31.2 100.0 \n> aCharVector <- c(\"apple\", \"orange\", \"mango\") \n> aCharVector \n[1] \"apple\"  \"orange\" \"mango\"  \n> aBooleanVector <- c(TRUE, FALSE, TRUE, FALSE, FALSE) \n> aBooleanVector \n[1]  TRUE FALSE  TRUE FALSE FALSE \n> aList <- list(aNumericVector, aCharVector) \n> aList \n[[1]] \n[1]  10.0  10.5  31.2 100.0 \n[[2]] \n[1] \"apple\"  \"orange\" \"mango\" \n> aMatrix <- matrix(c(100, 210, 76, 65, 34, 45),nrow=3,ncol=2,byrow = TRUE) \n> aMatrix \n     [,1] [,2] \n[1,]  100  210 \n[2,]   76   65 \n[3,]   34   45 \n> bMatrix <- matrix(c(100, 210, 76, 65, 34, 45),nrow=3,ncol=2,byrow = FALSE) \n> bMatrix \n     [,1] [,2] \n[1,]  100   65 \n[2,]  210   34 \n[3,]   76   45 \n> ageVector <- c(21, 35, 52)  \n> nameVector <- c(\"Thomas\", \"Mathew\", \"John\")  \n> marriedVector <- c(FALSE, TRUE, TRUE)  \n> aDataFrame <- data.frame(ageVector, nameVector, marriedVector)  \n> aDataFrame \n  ageVector nameVector marriedVector \n1        21     Thomas         FALSE \n2        35     Mathew          TRUE \n3        52       John          TRUE \n> colnames(aDataFrame) <- c(\"Age\",\"Name\", \"Married\") \n> aDataFrame \n  Age   Name Married \n1  21 Thomas   FALSE \n2  35 Mathew    TRUE \n3  52   John    TRUE \n\n```", "```py\n> # Returns the first part of the data frame and return two rows \n> head(aDataFrame,2) \n  Age   Name Married \n1  21 Thomas   FALSE \n2  35 Mathew    TRUE \n\n> # Returns the last part of the data frame and return two rows \n> tail(aDataFrame,2) \n  Age   Name Married  \n2  35 Mathew    TRUE \n3  52   John    TRUE \n> # Number of rows in a data frame \n> nrow(aDataFrame) \n[1] 3 \n> # Number of columns in a data frame \n> ncol(aDataFrame) \n[1] 3 \n> # Returns the first column of the data frame. The return value is a data frame \n> aDataFrame[1] \n  Age \n1  21 \n2  35 \n3  52 \n> # Returns the second column of the data frame. The return value is a data frame \n> aDataFrame[2] \n    Name \n1 Thomas \n2 Mathew \n3   John \n> # Returns the named columns of the data frame. The return value is a data frame \n> aDataFrame[c(\"Age\", \"Name\")] \n  Age   Name \n1  21 Thomas \n2  35 Mathew \n3  52   John \n> # Returns the contents of the second column of the data frame as a vector.  \n> aDataFrame[[2]] \n[1] Thomas Mathew John   \nLevels: John Mathew Thomas \n> # Returns the slice of the data frame by a row \n> aDataFrame[2,] \n  Age   Name Married \n2  35 Mathew    TRUE \n> # Returns the slice of the data frame by multiple rows \n> aDataFrame[c(1,2),] \n  Age   Name Married \n1  21 Thomas   FALSE \n2  35 Mathew    TRUE \n\n```", "```py\n$ cd $SPARK_HOME \n$ ./bin/sparkR \n\nR version 3.2.2 (2015-08-14) -- \"Fire Safety\" \nCopyright (C) 2015 The R Foundation for Statistical Computing \nPlatform: x86_64-apple-darwin13.4.0 (64-bit) \n\nR is free software and comes with ABSOLUTELY NO WARRANTY. \nYou are welcome to redistribute it under certain conditions. \nType 'license()' or 'licence()' for distribution details. \n\n  Natural language support but running in an English locale \n\nR is a collaborative project with many contributors. \nType 'contributors()' for more information and \n'citation()' on how to cite R or R packages in publications. \n\nType 'demo()' for some demos, 'help()' for on-line help, or \n'help.start()' for an HTML browser interface to help. \nType 'q()' to quit R. \n\n[Previously saved workspace restored] \n\nLaunching java with spark-submit command /Users/RajT/source-code/spark-source/spark-2.0/bin/spark-submit   \"sparkr-shell\" /var/folders/nf/trtmyt9534z03kq8p8zgbnxh0000gn/T//RtmpmuRsTC/backend_port2d121acef4  \nUsing Spark's default log4j profile: org/apache/spark/log4j-defaults.properties \nSetting default log level to \"WARN\". \nTo adjust logging level use sc.setLogLevel(newLevel). \n16/07/16 21:08:50 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable \n\n Welcome to \n    ____              __  \n   / __/__  ___ _____/ /__  \n  _\\ \\/ _ \\/ _ `/ __/  '_/  \n /___/ .__/\\_,_/_/ /_/\\_\\   version  2.0.1-SNAPSHOT  \n    /_/  \n\n Spark context is available as sc, SQL context is available as sqlContext \nDuring startup - Warning messages: \n1: 'SparkR::sparkR.init' is deprecated. \nUse 'sparkR.session' instead. \nSee help(\"Deprecated\")  \n2: 'SparkR::sparkRSQL.init' is deprecated. \nUse 'sparkR.session' instead. \nSee help(\"Deprecated\")  \n> \n> # faithful is a data set and the data frame that comes with base R \n> # Obviously it is an R DataFrame \n> head(faithful) \n  eruptions waiting \n1     3.600      79 \n2     1.800      54 \n3     3.333      74 \n4     2.283      62 \n5     4.533      85 \n6     2.883      55 \n> tail(faithful) \n    eruptions waiting \n267     4.750      75 \n268     4.117      81 \n269     2.150      46 \n270     4.417      90 \n271     1.817      46 \n272     4.467      74 \n> # Convert R DataFrame to Spark DataFrame  \n> sparkFaithful <- createDataFrame(faithful) \n> head(sparkFaithful) \n  eruptions waiting \n1     3.600      79 \n2     1.800      54 \n3     3.333      74 \n4     2.283      62 \n5     4.533      85 \n6     2.883      55 \n> showDF(sparkFaithful) \n+---------+-------+ \n|eruptions|waiting| \n+---------+-------+ \n|      3.6|   79.0| \n|      1.8|   54.0| \n|    3.333|   74.0| \n|    2.283|   62.0| \n|    4.533|   85.0| \n|    2.883|   55.0| \n|      4.7|   88.0| \n|      3.6|   85.0| \n|     1.95|   51.0| \n|     4.35|   85.0| \n|    1.833|   54.0| \n|    3.917|   84.0| \n|      4.2|   78.0| \n|     1.75|   47.0| \n|      4.7|   83.0| \n|    2.167|   52.0| \n|     1.75|   62.0| \n|      4.8|   84.0| \n|      1.6|   52.0| \n|     4.25|   79.0| \n+---------+-------+ \nonly showing top 20 rows \n> # Try calling a SparkR function showDF() on an R DataFrame. The following error message will be shown \n> showDF(faithful) \nError in (function (classes, fdef, mtable)  :  \n  unable to find an inherited method for function 'showDF' for signature '\"data.frame\"' \n> # Convert the Spark DataFrame to an R DataFrame \n> rFaithful <- collect(sparkFaithful) \n> head(rFaithful) \n  eruptions waiting \n1     3.600      79 \n2     1.800      54 \n3     3.333      74 \n4     2.283      62 \n5     4.533      85 \n6     2.883      55 \n\n```", "```py\nhead(faithful) \n  eruptions waiting \n1     3.600      79 \n2     1.800      54 \n3     3.333      74 \n4     2.283      62 \n5     4.533      85 \n6     2.883      55 \n> # Convert the faithful R DataFrame to Spark DataFrame   \n> sparkFaithful <- createDataFrame(faithful) \n> # The Spark DataFrame sparkFaithful NOT producing a histogram \n> hist(sparkFaithful$eruptions,main=\"Distribution of Eruptions\",xlab=\"Eruptions\") \nError in hist.default(sparkFaithful$eruptions, main = \"Distribution of Eruptions\",  :  \n  'x' must be numeric \n> # The R DataFrame faithful producing a histogram \n> hist(faithful$eruptions,main=\"Distribution of Eruptions\",xlab=\"Eruptions\")\n\n```", "```py\n> # TODO - Change the data directory location to the right location in the system in which this program is being run \n> DATA_DIR <- \"/Users/RajT/Documents/CodeAndData/R/\" \n> # Read data from a JSON file to create DataFrame \n>  \n> acTransDF <- read.json(paste(DATA_DIR, \"TransList1.json\", sep = \"\")) \n> # Print the structure of the DataFrame \n> print(acTransDF) \nSparkDataFrame[AccNo:string, TranAmount:bigint] \n> # Show sample records from the DataFrame \n> showDF(acTransDF) \n+-------+----------+ \n|  AccNo|TranAmount| \n+-------+----------+ \n|SB10001|      1000| \n|SB10002|      1200| \n|SB10003|      8000| \n|SB10004|       400| \n|SB10005|       300| \n|SB10006|     10000| \n|SB10007|       500| \n|SB10008|        56| \n|SB10009|        30| \n|SB10010|      7000| \n|CR10001|      7000| \n|SB10002|       -10| \n+-------+----------+ \n> # Register temporary view definition in the DataFrame for SQL queries \n> createOrReplaceTempView(acTransDF, \"trans\") \n> # DataFrame containing good transaction records using SQL \n> goodTransRecords <- sql(\"SELECT AccNo, TranAmount FROM trans WHERE AccNo like 'SB%' AND TranAmount > 0\") \n> # Register temporary table definition in the DataFrame for SQL queries \n\n> createOrReplaceTempView(goodTransRecords, \"goodtrans\") \n> # Show sample records from the DataFrame \n> showDF(goodTransRecords) \n+-------+----------+ \n|  AccNo|TranAmount| \n+-------+----------+ \n|SB10001|      1000| \n|SB10002|      1200| \n|SB10003|      8000| \n|SB10004|       400| \n|SB10005|       300| \n|SB10006|     10000| \n|SB10007|       500| \n|SB10008|        56| \n|SB10009|        30| \n|SB10010|      7000| \n+-------+----------+ \n> # DataFrame containing high value transaction records using SQL \n> highValueTransRecords <- sql(\"SELECT AccNo, TranAmount FROM goodtrans WHERE TranAmount > 1000\") \n> # Show sample records from the DataFrame \n> showDF(highValueTransRecords) \n+-------+----------+ \n|  AccNo|TranAmount| \n+-------+----------+ \n|SB10002|      1200| \n|SB10003|      8000| \n|SB10006|     10000| \n|SB10010|      7000| \n+-------+----------+ \n> # DataFrame containing bad account records using SQL \n> badAccountRecords <- sql(\"SELECT AccNo, TranAmount FROM trans WHERE AccNo NOT like 'SB%'\") \n> # Show sample records from the DataFrame \n> showDF(badAccountRecords) \n+-------+----------+ \n|  AccNo|TranAmount| \n+-------+----------+ \n|CR10001|      7000| \n+-------+----------+ \n> # DataFrame containing bad amount records using SQL \n> badAmountRecords <- sql(\"SELECT AccNo, TranAmount FROM trans WHERE TranAmount < 0\") \n> # Show sample records from the DataFrame \n> showDF(badAmountRecords) \n+-------+----------+ \n|  AccNo|TranAmount| \n+-------+----------+ \n|SB10002|       -10| \n+-------+----------+ \n> # Create a DataFrame by taking the union of two DataFrames \n> badTransRecords <- union(badAccountRecords, badAmountRecords) \n> # Show sample records from the DataFrame \n> showDF(badTransRecords) \n+-------+----------+ \n|  AccNo|TranAmount| \n+-------+----------+ \n|CR10001|      7000| \n|SB10002|       -10| \n+-------+----------+ \n> # DataFrame containing sum amount using SQL \n> sumAmount <- sql(\"SELECT sum(TranAmount) as sum FROM goodtrans\") \n> # Show sample records from the DataFrame \n> showDF(sumAmount) \n+-----+ \n|  sum| \n+-----+ \n|28486| \n+-----+ \n> # DataFrame containing maximum amount using SQL \n> maxAmount <- sql(\"SELECT max(TranAmount) as max FROM goodtrans\") \n> # Show sample records from the DataFrame \n> showDF(maxAmount) \n+-----+ \n|  max| \n+-----+ \n|10000| \n+-----+ \n> # DataFrame containing minimum amount using SQL \n> minAmount <- sql(\"SELECT min(TranAmount)as min FROM goodtrans\") \n> # Show sample records from the DataFrame \n> showDF(minAmount) \n+---+ \n|min| \n+---+ \n| 30| \n+---+ \n> # DataFrame containing good account number records using SQL \n> goodAccNos <- sql(\"SELECT DISTINCT AccNo FROM trans WHERE AccNo like 'SB%' ORDER BY AccNo\") \n> # Show sample records from the DataFrame \n> showDF(goodAccNos) \n+-------+ \n|  AccNo| \n+-------+ \n|SB10001| \n|SB10002| \n|SB10003| \n|SB10004| \n|SB10005| \n|SB10006| \n|SB10007| \n|SB10008| \n|SB10009| \n|SB10010| \n+-------+\n\n```", "```py\n> # Read data from a JSON file to create DataFrame \n> acTransDF <- read.json(paste(DATA_DIR, \"TransList1.json\", sep = \"\")) \n> print(acTransDF) \nSparkDataFrame[AccNo:string, TranAmount:bigint] \n> # Show sample records from the DataFrame \n> showDF(acTransDF) \n+-------+----------+ \n|  AccNo|TranAmount| \n+-------+----------+ \n|SB10001|      1000| \n|SB10002|      1200| \n|SB10003|      8000| \n|SB10004|       400| \n|SB10005|       300| \n|SB10006|     10000| \n|SB10007|       500| \n|SB10008|        56| \n|SB10009|        30| \n|SB10010|      7000| \n|CR10001|      7000| \n|SB10002|       -10| \n+-------+----------+ \n> # DataFrame containing good transaction records using API \n> goodTransRecordsFromAPI <- filter(acTransDF, \"AccNo like 'SB%' AND TranAmount > 0\") \n> # Show sample records from the DataFrame \n> showDF(goodTransRecordsFromAPI) \n+-------+----------+ \n|  AccNo|TranAmount| \n+-------+----------+ \n|SB10001|      1000| \n|SB10002|      1200| \n|SB10003|      8000| \n|SB10004|       400| \n|SB10005|       300| \n|SB10006|     10000| \n|SB10007|       500| \n|SB10008|        56| \n|SB10009|        30| \n|SB10010|      7000| \n+-------+----------+ \n> # DataFrame containing high value transaction records using API \n> highValueTransRecordsFromAPI = filter(goodTransRecordsFromAPI, \"TranAmount > 1000\") \n> # Show sample records from the DataFrame \n> showDF(highValueTransRecordsFromAPI) \n+-------+----------+ \n|  AccNo|TranAmount| \n+-------+----------+ \n|SB10002|      1200| \n|SB10003|      8000| \n|SB10006|     10000| \n|SB10010|      7000| \n+-------+----------+ \n> # DataFrame containing bad account records using API \n> badAccountRecordsFromAPI <- filter(acTransDF, \"AccNo NOT like 'SB%'\") \n> # Show sample records from the DataFrame \n> showDF(badAccountRecordsFromAPI) \n+-------+----------+ \n|  AccNo|TranAmount| \n+-------+----------+ \n|CR10001|      7000| \n+-------+----------+ \n> # DataFrame containing bad amount records using API \n> badAmountRecordsFromAPI <- filter(acTransDF, \"TranAmount < 0\") \n> # Show sample records from the DataFrame \n> showDF(badAmountRecordsFromAPI) \n+-------+----------+ \n|  AccNo|TranAmount| \n+-------+----------+ \n|SB10002|       -10| \n+-------+----------+ \n> # Create a DataFrame by taking the union of two DataFrames \n> badTransRecordsFromAPI <- union(badAccountRecordsFromAPI, badAmountRecordsFromAPI) \n> # Show sample records from the DataFrame \n> showDF(badTransRecordsFromAPI) \n+-------+----------+ \n|  AccNo|TranAmount| \n+-------+----------+ \n|CR10001|      7000| \n|SB10002|       -10| \n+-------+----------+ \n> # DataFrame containing sum amount using API \n> sumAmountFromAPI <- agg(goodTransRecordsFromAPI, sumAmount = sum(goodTransRecordsFromAPI$TranAmount)) \n> # Show sample records from the DataFrame \n> showDF(sumAmountFromAPI) \n+---------+ \n|sumAmount| \n+---------+ \n|    28486| \n+---------+ \n> # DataFrame containing maximum amount using API \n> maxAmountFromAPI <- agg(goodTransRecordsFromAPI, maxAmount = max(goodTransRecordsFromAPI$TranAmount)) \n> # Show sample records from the DataFrame \n> showDF(maxAmountFromAPI) \n+---------+ \n|maxAmount| \n+---------+ \n|    10000| \n+---------+ \n> # DataFrame containing minimum amount using API \n> minAmountFromAPI <- agg(goodTransRecordsFromAPI, minAmount = min(goodTransRecordsFromAPI$TranAmount))  \n> # Show sample records from the DataFrame \n> showDF(minAmountFromAPI) \n+---------+ \n|minAmount| \n+---------+ \n|       30| \n+---------+ \n> # DataFrame containing good account number records using API \n> filteredTransRecordsFromAPI <- filter(goodTransRecordsFromAPI, \"AccNo like 'SB%'\") \n> accNosFromAPI <- select(filteredTransRecordsFromAPI, \"AccNo\") \n> distinctAccNoFromAPI <- distinct(accNosFromAPI) \n> sortedAccNoFromAPI <- arrange(distinctAccNoFromAPI, \"AccNo\") \n> # Show sample records from the DataFrame \n> showDF(sortedAccNoFromAPI) \n+-------+ \n|  AccNo| \n+-------+ \n|SB10001| \n|SB10002| \n|SB10003| \n|SB10004| \n|SB10005| \n|SB10006| \n|SB10007| \n|SB10008| \n|SB10009| \n|SB10010| \n+-------+ \n> # Persist the DataFrame into a Parquet file  \n> write.parquet(acTransDF, \"r.trans.parquet\") \n> # Read the data from the Parquet file \n> acTransDFFromFile <- read.parquet(\"r.trans.parquet\")  \n> # Show sample records from the DataFrame \n> showDF(acTransDFFromFile) \n+-------+----------+ \n|  AccNo|TranAmount| \n+-------+----------+ \n|SB10007|       500| \n|SB10008|        56| \n|SB10009|        30| \n|SB10010|      7000| \n|CR10001|      7000| \n|SB10002|       -10| \n|SB10001|      1000| \n|SB10002|      1200| \n|SB10003|      8000| \n|SB10004|       400| \n|SB10005|       300| \n|SB10006|     10000| \n+-------+----------+ \n\n```", "```py\n> # Read data from a JSON file to create DataFrame \n> acTransDFForAgg <- read.json(paste(DATA_DIR, \"TransList2.json\", sep = \"\")) \n> # Register temporary view definition in the DataFrame for SQL queries \n> createOrReplaceTempView(acTransDFForAgg, \"transnew\") \n> # Show sample records from the DataFrame \n> showDF(acTransDFForAgg) \n+-------+----------+ \n|  AccNo|TranAmount| \n+-------+----------+ \n|SB10001|      1000| \n|SB10002|      1200| \n|SB10001|      8000| \n|SB10002|       400| \n|SB10003|       300| \n|SB10001|     10000| \n|SB10004|       500| \n|SB10005|        56| \n|SB10003|        30| \n|SB10002|      7000| \n|SB10001|      -100| \n|SB10002|       -10| \n+-------+----------+ \n> # DataFrame containing account summary records using SQL \n> acSummary <- sql(\"SELECT AccNo, sum(TranAmount) as TransTotal FROM transnew GROUP BY AccNo\") \n> # Show sample records from the DataFrame \n> showDF(acSummary) \n+-------+----------+ \n|  AccNo|TransTotal| \n+-------+----------+ \n|SB10001|     18900| \n|SB10002|      8590| \n|SB10003|       330| \n|SB10004|       500| \n|SB10005|        56| \n+-------+----------+ \n> # DataFrame containing account summary records using API \n> acSummaryFromAPI <- agg(groupBy(acTransDFForAgg, \"AccNo\"), TranAmount=\"sum\") \n> # Show sample records from the DataFrame \n> showDF(acSummaryFromAPI) \n+-------+---------------+ \n|  AccNo|sum(TranAmount)| \n+-------+---------------+ \n|SB10001|          18900| \n|SB10002|           8590| \n|SB10003|            330| \n|SB10004|            500| \n|SB10005|             56| \n+-------+---------------+ \n\n```", "```py\n> # Read data from JSON file \n> acMasterDF <- read.json(paste(DATA_DIR, \"MasterList.json\", sep = \"\")) \n> # Show sample records from the DataFrame \n> showDF(acMasterDF) \n+-------+---------+--------+ \n|  AccNo|FirstName|LastName| \n+-------+---------+--------+ \n|SB10001|    Roger| Federer| \n|SB10002|     Pete| Sampras| \n|SB10003|   Rafael|   Nadal| \n|SB10004|    Boris|  Becker| \n|SB10005|     Ivan|   Lendl| \n+-------+---------+--------+ \n> # Register temporary view definition in the DataFrame for SQL queries \n> createOrReplaceTempView(acMasterDF, \"master\")  \n> acBalDF <- read.json(paste(DATA_DIR, \"BalList.json\", sep = \"\")) \n> # Show sample records from the DataFrame \n> showDF(acBalDF) \n+-------+---------+ \n|  AccNo|BalAmount| \n+-------+---------+ \n|SB10001|    50000| \n|SB10002|    12000| \n|SB10003|     3000| \n|SB10004|     8500| \n|SB10005|     5000| \n+-------+---------+ \n\n> # Register temporary view definition in the DataFrame for SQL queries \n> createOrReplaceTempView(acBalDF, \"balance\") \n> # DataFrame containing account detail records using SQL by joining multiple DataFrame contents \n> acDetail <- sql(\"SELECT master.AccNo, FirstName, LastName, BalAmount FROM master, balance WHERE master.AccNo = balance.AccNo ORDER BY BalAmount DESC\") \n> # Show sample records from the DataFrame \n> showDF(acDetail) \n+-------+---------+--------+---------+ \n|  AccNo|FirstName|LastName|BalAmount| \n+-------+---------+--------+---------+ \n|SB10001|    Roger| Federer|    50000| \n|SB10002|     Pete| Sampras|    12000| \n|SB10004|    Boris|  Becker|     8500| \n|SB10005|     Ivan|   Lendl|     5000| \n|SB10003|   Rafael|   Nadal|     3000| \n+-------+---------+--------+---------+ \n\n> # Persist data in the DataFrame into Parquet file \n> write.parquet(acDetail, \"r.acdetails.parquet\") \n> # Read data into a DataFrame by reading the contents from a Parquet file \n\n> acDetailFromFile <- read.parquet(\"r.acdetails.parquet\") \n> # Show sample records from the DataFrame \n> showDF(acDetailFromFile) \n+-------+---------+--------+---------+ \n|  AccNo|FirstName|LastName|BalAmount| \n+-------+---------+--------+---------+ \n|SB10002|     Pete| Sampras|    12000| \n|SB10003|   Rafael|   Nadal|     3000| \n|SB10005|     Ivan|   Lendl|     5000| \n|SB10001|    Roger| Federer|    50000| \n|SB10004|    Boris|  Becker|     8500| \n+-------+---------+--------+---------+ \n\n```", "```py\n> # Change the column names \n> acBalDFWithDiffColName <- selectExpr(acBalDF, \"AccNo as AccNoBal\", \"BalAmount\") \n> # Show sample records from the DataFrame \n> showDF(acBalDFWithDiffColName) \n+--------+---------+ \n|AccNoBal|BalAmount| \n+--------+---------+ \n| SB10001|    50000| \n| SB10002|    12000| \n| SB10003|     3000| \n| SB10004|     8500| \n| SB10005|     5000| \n+--------+---------+ \n> # DataFrame containing account detail records using API by joining multiple DataFrame contents \n> acDetailFromAPI <- join(acMasterDF, acBalDFWithDiffColName, acMasterDF$AccNo == acBalDFWithDiffColName$AccNoBal) \n> # Show sample records from the DataFrame \n> showDF(acDetailFromAPI) \n+-------+---------+--------+--------+---------+ \n|  AccNo|FirstName|LastName|AccNoBal|BalAmount| \n+-------+---------+--------+--------+---------+ \n|SB10001|    Roger| Federer| SB10001|    50000| \n|SB10002|     Pete| Sampras| SB10002|    12000| \n|SB10003|   Rafael|   Nadal| SB10003|     3000| \n|SB10004|    Boris|  Becker| SB10004|     8500| \n|SB10005|     Ivan|   Lendl| SB10005|     5000| \n+-------+---------+--------+--------+---------+ \n> # DataFrame containing account detail records using SQL by selecting specific fields \n> acDetailFromAPIRequiredFields <- select(acDetailFromAPI, \"AccNo\", \"FirstName\", \"LastName\", \"BalAmount\") \n> # Show sample records from the DataFrame \n> showDF(acDetailFromAPIRequiredFields) \n+-------+---------+--------+---------+ \n|  AccNo|FirstName|LastName|BalAmount| \n+-------+---------+--------+---------+ \n|SB10001|    Roger| Federer|    50000| \n|SB10002|     Pete| Sampras|    12000| \n|SB10003|   Rafael|   Nadal|     3000| \n|SB10004|    Boris|  Becker|     8500| \n|SB10005|     Ivan|   Lendl|     5000| \n+-------+---------+--------+---------+ \n\n```"]