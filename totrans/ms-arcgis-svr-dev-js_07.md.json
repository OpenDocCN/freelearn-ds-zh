["```py\n<div class=\"${baseClass}\" style=\"display: none;\">\n  <span class=\"${baseClass}-close\" data-dojo-attach-event=\"ondijitclick:hide\">X</span>\n  <b>Census Data</b><br />\n  <p>\n    Click on a location in the United States to view the census  data for that region. You can also use the dropdown tools to  select a State, County, or Blockgroup.\n  </p>\n  <div >\n <b>State Selector: </b>\n <select></select>\n </div>\n <div>\n <b>County Selector: </b>\n <select></select>\n </div>\n <div>\n <b>Block Group Selector: </b>\n <select></select>\n </div>\n</div>\n```", "```py\njQuery(\"#main\"); // selects a node with an id=\"main\"\n$(\"#main\"); // A common shortcut for jQuery; same as above.\n$(\".classy\"); // selects all elements with class=\"classy\"\n$(\"p\"); // selects all paragraphs\n$(\".article p\"); // selects all paragraphs in nodes of\n                 // class=\"article\"\n$(\"input[type='text']\"); // selects all text inputs\n```", "```py\n$(\"ul > li\").css(\"color\", \"green\").text(\"Frog\"); \n$(\"ol > li\").css({\"color\": \"green\", \"font-size\": \"72px\"})\n  .text(\"Toad\"); // totally legal to do this.\n```", "```py\n$(\"form\").show().css(\"width\", \"400px\")\n  .find('input').val('')\n  .find('label').css('color', '#0f0');\n```", "```py\n$(\"form\").show().css(\"width\", \"400px\")\n  .find('input').val('').end()\n  .find('label').css('color', '#0f0');\n```", "```py\ndojoConfig = {\n  async: true,\n  packages: [\n    {\n     name: 'y2k',\n     location: location.pathname.replace(/\\/[^\\/]*$/, '') + '/js'\n    }, {\n      name: \"d3\",\n      location: \"http://cdnjs.cloudflare.com/ajax/libs/d3/3.4.12/\"\n    }, {\n name: \"jquery\",\n location:\"http://ajax.googleapis.com/ajax/libs/jquery/1.11.2\",\n main: \"jquery\"\n }\n  ]\n};\n```", "```py\nrequire([…, \"d3/d3\", \"jquery\"], function (…, d3, $) {\n  …\n});\n```", "```py\n…\n  <p>\n  Click on a location in the United States to view the census data for that region. You can also use the dropdown tools to select a State, County, or Blockgroup.\n  </p>\n  <div >\n    <b>State Selector: </b>\n    <select class=\"stateselect\"></select>\n  </div>\n  <div>\n    <b>County Selector: </b>\n    <select class=\"countyselect\"></select>\n  </div>\n  <div>\n    <b>Block Group Selector: </b>\n    <select class=\"blockgroupselect\"></select>\n  </div>\n…\n```", "```py\nconstructor: function (options, srcNodeRef) {\n  …\n  this.map = options.map || null;\n  this.domNode = srcRefNode;\n\n this.stateSelect = $(\".stateselect\");\n this.countySelect = $(\".countyselect\");\n this.blockGroupSelect = $(\".blockgroupselect\");\n  …\n},\n```", "```py\nconstructor: function (options, srcNodeRef) { \n  …\n  this.domNode = srcRefNode;\n  /* stateSelect, countySelect, and blockGroupSelect removed */\n  …\n},\n\npostCreate: function () {\n this.inherited(arguments);\n\n  this.stateSelect = $(\".stateselect\");\n this.countySelect = $(\".countyselect\");\n this.blockGroupSelect = $(\".blockgroupselect\");\n},\n\n```", "```py\n…\ngetDropDownData: function (args) { },\npopulateDropdown: function (args, featureSet) { },\n…\n```", "```py\nrequire([…, \"esri/tasks/Query\", \"esri/tasks/QueryTask\", …], \n  function (…, Query, QueryTask, …) {\n    …\n  queryDropdownData: function (args) {\n    var queryTask = new QueryTask(/* url */),\n        query = new Query();\n  },\n  …\n});\n```", "```py\nqueryDropdownData: function (args) {\n  var queryTask = new QueryTask(args.url),\n  query = new Query();\n  query.returnGeometry = false;\n  query.outFields = args.fields;\n  query.orderByFields = args.fields;\n  query.where = args.where;\n  query.returnDistinctValues = true;\n\n  return queryTask.execute(query); \n},\n```", "```py\n_populateDropdown: function (args, featureSet) {\n  args.selector.empty();\n  $.each(featureSet.features, function () {\n    args.selector.append($(\"<option />\")\n      .val(this.attributes[args.fieldName])\n      .text(this.attributes[args.fieldName])\n      .attr(\"data-fips\", this.attributes[args.fips]));\n  });\n},\n```", "```py\nqueryShapeAndData: function (args) {\n  var queryTask = new QueryTask(args.url),\n    query = new Query();\n  query.returnGeometry = true;\n  query.outFields = [\"*\"];\n  query.outSpatialReference = this.map.spatialReference;\n  query.where = args.where;\n\n  return queryTask.execute(query);\n},\n```", "```py\n_onQueryComplete: function (title, featureSet) {\n  featureSet.features = arrayUtils.map(\n featureSet.features, \n lang.hitch(this, function (feature) {\n return this._processFeature(feature, title);\n }));\n},\n```", "```py\n  …  \n  return queryTask.execute(query)\n    .addCallback(lang.hitch(\n this, this._onQueryComplete, args.title)\n );\n},\n```", "```py\n_updateInfoWindowFromQuery: function (results) {\n  var resultExtent = graphicsUtils.graphicsExtent(results.features);\n\n  this.map.setExtent(resultExtent)\n    .then(lang.hitch(this, function () {\n       this.map.infoWindow.setFeatures(results.features);\n       this.map.infoWindow.show(resultExtent.getCenter());\n     }));\n},\n```", "```py\npostCreate: function () {\n  this.stateSelect = $(\".stateselect\")\n .on(\"change\", lang.hitch(this, this._stateSelectChanged));\n  this.countySelect = $(\".countyselect\")\n .on(\"change\", lang.hitch(this, this._countySelectChanged));\n  this.blockGroupSelect = $(\".blockgroupselect\")\n .on(\"change\",lang.hitch(this, this._blockGroupSelectChanged));\n},\n…\n_stateSelectChanged: function () {},\n_countySelectChanged: function () {},\n_blockGroupSelectChanged: function () {},\n…\n```", "```py\n_stateSelectChanged: function () {\n  var stateName = this.stateSelect.val();\n  if (value && value.length > 0) {\n    this.queryShapeAndData({\n      title: \"states\",\n      url:  \"http://sampleserver6.arcgisonline.com/arcgis/rest/services/Census/MapServer/3\",\n      where: \"STATE_NAME = '\" + stateName + \"'\"\n    }).then(lang.hitch(this, this._updateInfoWindowFromQuery),\n      function (err) { console.log(err); });\n  }\n},\n…\n```", "```py\n…\n// search for counties in that state.\nthis.queryDropdownData({\n  url: \"http://sampleserver6.arcgisonline.com/arcgis/rest/services/Census/MapServer/2\",\n  fields: [\"NAME\", \"CNTY_FIPS\"],\n  where: \"STATE_NAME = '\" + stateName + \"'\",\n}).then(lang.hitch(this, this._populateDropdown, {\n  selector: this.countySelect,\n  fieldName: \"NAME\",\n  fips: \"CNTY_FIPS\"\n}));\n…\n```", "```py\n_countySelectChanged: function () {\n  var stateName = this.stateSelect.val(),\n    stateFIPS = this.stateSelect.find(\":selected\")\n .attr(\"data-fips\"),\n   countyName = this.countySelect.val(),\n   countyFIPS = this.countySelect.find(\":selected\")\n .attr(\"data-fips\");\n…\n```", "```py\n_blockGroupSelectChanged: function () {\n  var stateFIPS = this.stateSelect.find(\":selected\").attr(\"data- fips\"),\n    countyFIPS = this.countySelect.find(\":selected\").attr(\"data- fips\"),\n    blockGroup = this.blockGroupSelect.val();\n  this.queryShapeAndData({\n     title: \"Census Block Group\",\n     url: \"http://sampleserver6.arcgisonline.com/arcgis/rest/services/Census/MapServer/1\",\n     where: \"STATE_FIPS = '\" + stateFIPS + \"' AND CNTY_FIPS = '\" + countyFIPS + \"' AND BLKGRP = '\" + blockGroup + \"'\"\n  }).then(\n    lang.hitch(this, this._updateInfoWindowFromQuery),\n    function (err) { console.log(err); });\n},\n```", "```py\nthis.queryDropdownData({\n  url: \"http://sampleserver6.arcgisonline.com/arcgis/rest/services/Census/MapServer/3\",\n  fields: [\"STATE_NAME\", \"STATE_FIPS\"],\n  where: \"1=1\",\n}).then(lang.hitch(this, this._populateDropdown, {\n  selector: this.stateSelect,\n  fieldName: \"STATE_NAME\",\n  fips: \"STATE_FIPS\"\n}));\n```", "```py\nvar CardModel = Backbone.Model.extend({\n  defaults: {\n    \"rank\": \"2\",\n    \"suit\": \"heart\"\n  },\n  description: function () {\n    return this.rank + \" of \" + this.suit + \"s\";\n  }\n});\nvar myCard = new CardModel({rank: \"9\", suit: \"spade\"});\nmyCard.description(); // returns \"9 of spades\";\n```", "```py\nvar CardView = Backbone.View.extend({\n  tagName: \"li\"\n  className: \"card\"\n  template: _.template(\"<%= description %> <button>Discard</button>\"),\n  initialize: function () {\n    this.render();\n  }\n  render: function () {\n    this.$el.html(\n      this.template(this.model.toJSON())\n    );\n  }\n});\n```", "```py\nVar CardCollection = Backbone.Collection.extend({\n  model: CardModel,\n  url: \"http://cardjson.com\", // made up for this example\n  deal: function () {\n    return this.shift();\n  }\n});\nvar deck = new CardCollection();\ndeck.fetch(); //load cards from website if it existed.\n```", "```py\n…\nevents: {\n  \"keypress input\": \"stopOnEnter\",\n  \"click #mybutton\": \"itsMine\",\n  \"focus .tinything\": \"bigScare\",\n  \"blur .tinything\": \"makeSmallAgain\"\n}\n…\n```", "```py\ndojoConfig = {\n  async: true,\n  packages: [\n    …\n    {\n      name: \"jquery\",\n      location: \"http://ajax.googleapis.com/ajax/libs/jquery/1.11.2\",\n      main: \"jquery\"\n    }, {\n name: \"underscore\",\n location: \"http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.7.0\",\n main: \"underscore\"\n }, {\n name: \"backbone\",\n location: \"http://cdnjs.cloudflare.com/ajax/libs/backbone.js/1.1.2\",\n main: \"backbone\"\n }\n  ]\n};\n```", "```py\ndefine([…, \"d3/d3\", \"jquery\", \"underscore\", \"backbone\"], \n  function (…, d3, $, _, Backbone), {\n    …\n});\n```", "```py\npostCreate: function () {\n  …\n  // Backbone Models\n  var State = Backbone.Model.extend({\n  defaults: {\n    \"STATE_NAME\": \"\",\n    \"STATE_FIPS\": \"\"\n  }\n  });\n\n  var County = Backbone.Model.extend({\n  defaults: {\n    \"STATE_NAME\": \"\",\n    \"STATE_FIPS\": \"\",\n    \"NAME\": \"\",\n    \"CNTY_FIPS\": \"\"\n  }\n  });\n\n  var BlockGroup = Backbone.Model.extend({\n  defaults: {\n    \"BLKGRP\": \"0\"\n  }\n  });\n},\n```", "```py\npostCreate: function () {\n\n  // Backbone Collections\n  var StateCollection = Backbone.Collection.extend({\n    model: State\n  });\n  var CountyCollection = Backbone.Collection.extend({\n    model: County\n  });\n  var BlockGroupCollection = Backbone.Collection.extend({\n    model: BlockGroup\n  });\n\n  this.stateCollection = new StateCollection([]);\n  this.countyCollection = new CountyCollection([]);\n  this.blockGroupCollection = new BlockGroupCollection([]);\n},\n```", "```py\n// Backbone Views\nvar StateView = Backbone.View.extend({\n  initialize: function () {\n   this.collection.on(\"reset\", this.render, this);\n  },\n  template: _.template( $(\"#stateitemtemplate\").html()),\n  render: function () {\n    // compile the template using underscore\n    var template = this.template,\n      el = this.$el.empty();\n    // load the compiled HTML into the Backbone \"el\"ement\n    _.each(this.collection.models, function (item) {\n       el.append(template(item.toJSON()));\n      });\n  }\n});\n```", "```py\n…\nvar CountyView = Backbone.View.extend({\n  …\n  template: _.template( $(\"#countyitemtemplate\").html()),\n  …\n});\n\nvar BlockGroupView = Backbone.View.extend({\n  …\n  template: _.template( $(\"#blkgrpitemtemplate\").html()), \n  …\n});\n```", "```py\nthis.stateView = new StateView({\n  el: $(\".stateselect\"),\n  collection: this.stateCollection\n});\n\nthis.countyView = new CountyView({\n  el: $(\".countyselect\"),\n  collection: this.countyCollection\n});\n\nthis.blockGroupView = new BlockGroupView({\n  el: $(\".blockgroupselect\"),\n  collection: this.blockGroupCollection\n});\n```", "```py\n<script type=\"text/template\" id=\"stateitemtemplate\">\n  <option value=\"<%= STATE_NAME %>\" data-fips=\"<%= STATE_FIPS %>\">\n    <%= STATE_NAME %>\n  </option>\n</script>\n<script type=\"text/template\" id=\"countyitemtemplate\">\n  <option value=\"<%= NAME %>\" data-fips=\"<%= CNTY_FIPS %>\">\n    <%= NAME %>\n  </option>\n</script>\n<script type=\"text/template\" id=\"blkgrpitemtemplate\">\n  <option value=\"<%= BLKGRP %>\" data-fips=\"<%= BLKGRP %>\">\n    <%= BLKGRP %>\n  </option>\n</script>\n```", "```py\n_stateSelectChanged: function () {\n  var stateName = this.stateView.$el.val();\n  …\n  This.queryDropdownData({\n    …\n  }).then(lang.hitch(this, function (featureSet) {\n this.countyCollection.reset(\n _.pluck(featureSet.features, \"attributes\")\n );\n });\n}, \n\n_countySelectChanged: function () {\n  var stateValue = this.stateView.$el.val(),\n    stateFIPS = this.stateView.$el.find(\":selected\")\n      .attr(\"data-fips\"),\n    countyValue = this.countyView.$el.val(),\n    countyFIPS = this.countyView.$el.find(\":selected\")\n      .attr(\"data-fips\");\n  …\n  This.queryDropdownData({\n    …\n  }).then(lang.hitch(this, function (featureSet) {\n this.blockGroupCollection.reset(\n _.pluck(featureSet.features, \"attributes\")\n );\n });\n},\n\n_blockGroupSelectChanged: function () {\n  var stateFIPS = this.stateView.$el.find(\":selected\")\n      .attr(\"data-fips\"),\n    countyFIPS = this.countyView.$el.find(\":selected\")\n      .attr(\"data-fips\"),\n    blockGroup = this.blockGroupView.$el.val();\n…\n},\n```", "```py\npostCreate: function () {\n  …\n  this.queryDropdownData({\n    url: \"http://sampleserver6.arcgisonline.com/arcgis/rest/services/Census/MapServer/3\",\n    fields: [\"STATE_NAME\", \"STATE_FIPS\"],\n    where: \"1=1\",\n  }).then(lang.hitch(this, function (featureSet) {\n this.stateCollection.reset(\n _.pluck(featureSet.features, \"attributes\")\n );\n }));\n```", "```py\n// note that ko is the global library object for knockout.js\nfunction PersonViewModel (firstName, lastName) {\n  this.firstName = ko.observable(firstName);\n  this.lastName = ko.observable(lastName);\n}\n```", "```py\n<div>\n  <label for='fninput'>First Name:</label>\n  <input type='text' id='fninput' data-bind='value:firstName' />\n  <br />\n  <label for='lninput'>Last Name:</label>\n  <input type='text' id='lninput' data-bind='value:lastName'/>\n  <br />\n  <p>\n    Hello, \n    <span data-bind='text: firstName'></span>&nbsp;\n    <span data-bind='text: lastName></span>!\n  </p>\n</div>\n```", "```py\nfunction PersonViewModel (firstName, lastName) {\n  this.firstName = ko.observable(firstName);\n  this.lastName = ko.observable(lastName);\n this.fullName = ko.computed(function () {\n return this.firstName() + \" \" + this.lastName();\n }, this);\n}\n```", "```py\ndojoConfig = {\n  async: true,\n  packages: [\n    {\n      name: 'y2k',\n      location: location.pathname.replace(/\\/[^\\/]*$/, '') + '/js'\n   }, {\n      name: \"d3\",\n      location: \"http://cdnjs.cloudflare.com/ajax/libs/d3/3.4.12/\"\n    }, {\n     name: \"knockout\",\n     location: \"http://cdnjs.cloudflare.com/ajax/libs/knockout/3.2.0\",\n     main: \"knockout-min\"\n   }\n  ]\n};\n```", "```py\ndefine([…, \"d3/d3\", \"knockout\"], function (…, d3, ko) {\n  …\n});\n```", "```py\n…\nSelectorViewModel: function () {\n  this.stateList = ko.observableArray([]);\n  this.selectedState = ko.observable();\n  this.countyList = ko.observableArray([]);\n  this.selectedCounty = ko.observable();\n  this.blockGroupList = ko.observableArray([]);\n  this.selectedBlockGroup = ko.observable();\n},\n…\n```", "```py\n…\npostCreate: function () {\n  ko.bindingHandlers.stateUpdate = {\n update: function (\n element, valueAccessor, allBindings, viewModel, bindingAccessor\n ) {\n // content will come here shortly.\n }\n };\n\n},\n…\n```", "```py\npostCreate: function () {\n var self = this;\n  ko.bindingHandlers.stateUpdate = {…};\n…\n},\n```", "```py\n… \n// within the postCreate() method.\nvar self = this;\n\nko.bindingHandlers.stateUpdate = {\n  update: function (\n    element, valueAccessor, allBindings, viewModel, \n    bindingAccessor\n  ) {\n    // retrieve the selected state data.\n var stateData = ko.unwrap(valueAccessor()),\n      stateName, stateFIPS;\n\n      // if stateData is valid and has a state name…\n    if (stateData && stateData.STATE_NAME) {\n       // assign state name and FIPS code.\n      stateName = stateData.STATE_NAME;\n stateFIPS = stateData.STATE_FIPS;\n\n       // query for shape and attributes to show on the map.\n       // Replace all \"this\" references with \"self\" variable.\n       self.queryShapeAndData({\n         url: \"http://sampleserver6.arcgisonline.com/arcgis/rest/services/Census/MapServer/3\",\n         where: \"STATE_NAME = '\" + stateName + \"'\"\n       }).then(\n         lang.hitch(self, self._updateInfoWindowFromQuery),\n         function (err) { console.log(err); });\n\n      // search for counties in that state.\n      self.queryDropdownData({\n        url: \"http://sampleserver6.arcgisonline.com/arcgis/rest/services/Census/MapServer/2\",\n        fields: [\"NAME\",\"STATE_NAME\",\"CNTY_FIPS\",\"STATE_FIPS\"],\n        where: \"STATE_NAME = '\" + stateName + \"'\",\n      }).then(function (featureSet) {\n\n         // create an array of county data attributes\n         var theCounties = arrayUtils.map(\n featureSet.features, \n function (feature) {\n return feature.attributes;\n });\n\n        // insert a blank value in the beginning of the array.\n        theCounties.splice(0, 0, {\n NAME:\"\",STATE_NAME:\"\",CNTY_FIPS:\"\",STATE_FIPS:\"\"});\n\n         // assign the list to the countyList in the ViewModel\n         bindingContext.$data.countyList(theCounties);\n       });\n    }\n  }\n };\n```", "```py\n…\n<div >\n  <b>State Selector: </b>\n  <select data-bind=\"options: stateList,\n optionsText: 'STATE_NAME',\n value: selectedState,\n stateUpdate: selectedState\"></select>\n</div>\n<div>\n  <b>County Selector: </b>\n  <select data-bind=\"options: countyList,\n optionsText: 'NAME',\n value: selectedCounty,\n countyUpdate: selectedCounty\"></select>\n</div>\n<div>\n  <b>Block Group Selector: </b>\n  <select data-bind=\"options: blockGroupList,\n optionsText: 'BLKGRP',\n value: selectedBlockGroup,\n blockGroupUpdate: selectedBlockGroup\"></select>\n</div>\n…\n```", "```py\nko.applyBindings(new ViewModel());\n```", "```py\n…\nvar viewModel = new this.SelectorViewModel();\nko.applyBindings(viewModel);\n\nthis.queryDropdownData({\n  url: \"http://sampleserver6.arcgisonline.com/arcgis/rest/services/Census/MapServer/3\",\n  fields: [\"STATE_NAME\", \"STATE_FIPS\"],\n  where: \"1=1\",\n}).then(function (featureSet) {\n  // make a list of the feature attributes of the states\n  var theStates = arrayUtils.map(\n    featureSet.features, \n    function (feature) { return feature.attributes; });\n  // add in a blank value to the beginning of the list\n theStates.splice(0, 0, {STATE_NAME: \"\", STATE_FIPS: \"\"});\n  // apply the list of states to our viewModel\n  viewModel.stateList(theStates);\n\n});\n```"]