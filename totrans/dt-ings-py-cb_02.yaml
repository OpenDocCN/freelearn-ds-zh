- en: '2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Principals of Data Access – Accessing Your Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Data access** is a term that refers to the ability to store, retrieve, transfer,
    and copy data from one system or application to another. It crucially involves
    security, legal, and, in some cases, national matters. In addition to the last
    two, we will also cover some security topics in this chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: As data engineers or scientists, knowing how to retrieve data correctly is necessary.
    Some of it may require **encrypted authentication**, and for this, we need to
    understand how some decrypting libraries work and how to use them without compromising
    or leaking sensitive data. Data access also refers to the levels of authorization
    a system or database have, from administration to read-only roles.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will cover how the levels of data access are defined and
    the most used libraries and authentication methods in the data ingestion process.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will work through the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Implementing governance in a data access workflow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing databases and data warehouses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing **SSH File Transfer Protocol** (**SFTP**) ﬁles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving data using API authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing encrypted files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing data from AWS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing data from GCP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A Google Cloud account can be easily created if you already have a Gmail account,
    and most of the resources can be accessed with a free tier. It also provides $300
    of credit for resources that are not free. It is a good incentive if you want
    to make other tests using the other recipes in this book inside GCP.
  prefs: []
  type: TYPE_NORMAL
- en: To access and enable a Google Cloud account, go to the [https://cloud.google.com/](https://cloud.google.com/)
    page and follow the steps provided on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: All the recipes covered in this chapter are eligible to use the free tier.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also find the code from this chapter in this GitHub repository here:
    [https://github.com/PacktPublishing/Data-Ingestion-with-Python-Cookbook](https://github.com/PacktPublishing/Data-Ingestion-with-Python-Cookbook).'
  prefs: []
  type: TYPE_NORMAL
- en: Implementing governance in a data access workflow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we saw previously, **data access** or **accessibility** is a **governance**
    pillar and is closely related to security. Data safety is not only a concern for
    administrators or managers but also for everyone that is involved with data. Having
    said that, it is essential to know how to design a base workflow to implement
    security layers for our data, allowing only authorized people to read or manipulate
    it.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will create a workflow with essential topics to implement data access
    management.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before designing our workflow, we need to identify the vectors interfering with
    our data access.
  prefs: []
  type: TYPE_NORMAL
- en: So, what are data vectors?
  prefs: []
  type: TYPE_NORMAL
- en: Vectors are paths someone can use to gain unauthorized access to a server, network,
    or database. In this case, we will identify the ones related to data leaks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s explore them in a visual form, as shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.1 – Data governance vectors](img/Figure_2.1_B19453.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.1 – Data governance vectors
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us understand each of these stages in the path here:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Data creation**: In this step, we identify where data is created and by who.
    With this definition, we can ensure only the **accountable** can have access to
    create or update data.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Storage of data**: After creation, it’s important to know where our data
    is or will be stored. Depending on the answer to this question, the methods to
    retrieve data will be different and can require additional steps.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Management of users and services**: Data must be used, and people need access.
    Here, we define the *actors* or the roles we might have, and the common types
    are **administrator**, **write**, and **read-only** roles.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Transferring data**: How will our data be transferred? It is essential to
    decide whether it will be real-time, near real-time, or batch. You can add further
    questions to your workflows, such as how the data will be available for transfers
    via API or any other method.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After identifying our vectors, we can define the implementation workflow for
    data access management.
  prefs: []
  type: TYPE_NORMAL
- en: To make it easy to understand how to implement it, let’s imagine a hypothetical
    scenario of a new application where we want to retrieve medical records from patients.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is how we do it:'
  prefs: []
  type: TYPE_NORMAL
- en: The first step is to document all our data and classify it. If there is confidential
    data, we need to work out how to identify it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, we will start to define who can access the data accordingly with the necessary
    usage. For example, we determine the data administrators and write or read-only
    permissions here.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once levels of access to data are implemented, we start observing how users
    will behave. Implementing logs to a database, data warehouse, or any other system
    with user activity is crucial.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, we examine the whole process to determine whether any change is needed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the end, we will have a flow diagram similar to the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.2 – A flow diagram to start implementing data governance](img/Figure_2.2_B19453.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.2 – A flow diagram to start implementing data governance
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Data access management is an ongoing process. Every day, we ingest and create
    new pipelines to be used by several people on different teams. Here is how it
    goes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Discovering, classifying, and documenting all your data**: The first thing
    to organize is our data. Which patient’s data are we going to retrieve? Does it
    contain **Personally Identifiable Information** (**PII**) or **Protected/Personal
    Health Information** (**PHI**)? Since it’s the first time we are ingesting this
    data, we need to catalog it with flags about PII and who is responsible for the
    source data.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Creating access controls**: Here, we define access based on roles since not
    everybody needs access to patient history. We allocate permissions to data based
    on the roles, responsibilities, and classification.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Examining the users’ behaviors**: In this step, we observe how our users
    behave in their roles. The creation, updates, and deletion actions are logged
    to be monitored and reviewed if needed. If a medical department no longer uses
    a report, we can restrict their access or even stop them from ingesting information
    for them.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Analyzing and reviewing requirements for compliance**: We must ensure our
    access management follows compliance and local regulations. Legal regulations
    apply differently for different types of data, which needs to be considered.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Healthcare Data Breaches* *Statistics*: [https://www.hipaajournal.com/healthcare-data-breach-statistics/](https://www.hipaajournal.com/healthcare-data-breach-statistics/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*European Data Protection Supervisor. Health data in the* *workspace*: [https://edps.europa.eu/data-protection/data-protection/reference-library/health-data-workplace_en](https://edps.europa.eu/data-protection/data-protection/reference-library/health-data-workplace_en)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing databases and data warehouses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Databases** are the foundation of any system or application, no matter your
    architecture. A database is sometimes needed to store logs, user activities or
    information, and system stuff.'
  prefs: []
  type: TYPE_NORMAL
- en: Putting it in a bigger perspective, data warehouses have the same usage but
    are related to analytical data. After ingesting and transforming data, we need
    to load it somewhere where it is easier to retrieve analytic information for use
    on dashboards, reports, etc.
  prefs: []
  type: TYPE_NORMAL
- en: Currently, it is possible to find several types of databases (of the SQL and
    NoSQL types) and data warehouse architectures. However, this recipe aims to cover
    how access control is usually done for both relational structures. The goal is
    to understand how the access levels are defined, even using a generic scenario.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this recipe, we will use MySQL. You can install it following the instructions
    on the MySQL official page here: [https://dev.mysql.com/downloads/installer/](https://dev.mysql.com/downloads/installer/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use any SQL client you choose to execute the queries here. In my case,
    I will use MySQL Workbench:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will create a database using our `root` user. You can name it what
    you like. My recommendation here is to set the charset to `UTF-8`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: My schema will be called `cookbook-data`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is creating tables. Still using the root account, we will create
    a `people_city` table using the **Data Definition Language** (**DDL**) syntax:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'Since the last update from MySQL 8.0, we can’t create users directly using
    the `GRANT` command. An error like this will appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ERROR 1410 (42000): You are not allowed to create a user` `with GRANT`'
  prefs: []
  type: TYPE_NORMAL
- en: To solve this issue, we will take some additional steps. We will also need at
    least two sessions of MySQL open, so keep that in mind if you opt to execute the
    commands directly on your command line.
  prefs: []
  type: TYPE_NORMAL
- en: 'I would like to also thank Lefred’s blog for this solution and contribution
    to the community. You can find more details and other useful information at their
    blog here: [https://lefred.be/content/how-to-grant-privileges-to-users-in-mysql-8-0/](https://lefred.be/content/how-to-grant-privileges-to-users-in-mysql-8-0/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us see the steps to perform this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let’s create the `admin` user. Here, we will start to have problems
    if we do not follow the following steps correctly. We need to create a user to
    be our superuser or administrator, using our `root user`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we log in with the `admin` user. Using the password you defined in *step
    1*, log in to the MySQL console using the `admin` user. We can’t see any databases
    yet on the SQL software client, but we will fix this in the following step. After
    logging in to the console, you can see the SQL command ready to be used:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Keep this session open.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we grant permissions to the `admin` user by role. In the root session,
    let’s create a role called `administration` and grant full access to our database
    to the `admin` user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We then grant permissions to the role:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We then grant the role to our `admin` user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We then set this role as the default:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Next, like in *step 2*, we create another two users, the `write` and `read-only`
    roles.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Repeat *step 3*, giving the new roles names, and for these two roles, my recommendation
    is to grant the following privileges:'
  prefs: []
  type: TYPE_NORMAL
- en: '`alter`, `create`, `index`, `insert`, `select`, `update`, `trigger`, `alter
    routine`, `create routine`, `execute`, and `create` `temporary tables`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`select` and `execute`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Next, we perform the actions. If we try to perform `INSERT` using our `admin`
    or `write` roles, we can see it is viable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'However, the same can’t be done by the `read-only` user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In a real-world project, most of the time, there is a dedicated person (or database
    administrator) to handle and take care of access to databases or data warehouses.
    Nonetheless, any person who needs to access a relational data source needs to
    understand the basic concepts of the access levels to ask for its permissions
    (and justify it).
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we used a `show` `privileges` command.
  prefs: []
  type: TYPE_NORMAL
- en: '`alter`, `create`, `delete`, `drop`, `index`, `insert`, `select`, `update`,
    `trigger`, `alter routine`, `create routine`, `execute`, and `create temporary
    tables` are the common commands used daily, and knowing them makes it easier to
    identify an error. Let’s take, for example, the earlier error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The first line shows precisely the permission we need. The second line shows
    us which user (`reader`) lacks permission, the connection they are using `(@localhost`),
    and the table (`people_city`) they want to access.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, if you are a system administrator, you can also identify behavior
    that is not allowed and help to solve it.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you are interested to know more, it is also possible to find three other
    types of access control for databases and data warehouses:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Discretionary Access** **Control** (**DAC**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mandatory Access** **Control** (**MAC**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Attribute-Based Access** **Control** (**ABAC**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following figure illustrates access control in a summarized version, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.3 – A database access control comparison – source: https://www.cloudradius.com/access-control-paradigms-compared-rbac-vs-pbac-vs-abac/](img/Figure_2.3_B19453.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.3 – A database access control comparison – source: https://www.cloudradius.com/access-control-paradigms-compared-rbac-vs-pbac-vs-abac/'
  prefs: []
  type: TYPE_NORMAL
- en: 'Even though it is not described in the preceding figure, we can also find databases
    that use **row and column-based access control**. You can find out more about
    it here: [https://documentation.datavirtuality.com/23/reference-guide/authentication-access-control-and-security/access-control/data-roles/permissions/row-and-column-based-security](https://documentation.datavirtuality.com/23/reference-guide/authentication-access-control-and-security/access-control/data-roles/permissions/row-and-column-based-security).'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here is an article by *Raimundas Matulevicius* and *Henri Lakk* on RBAC that
    discusses in depth the best approaches in several cases: [https://www.researchgate.net/publication/281479020_A_Model-driven_Role-based_Access_Control_for_SQL_Databases](https://www.researchgate.net/publication/281479020_A_Model-driven_Role-based_Access_Control_for_SQL_Databases)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This article by *Arundhati Singh* offers a perspective on RBAC mode implementation
    in enterprise networks: [https://dspace.mit.edu/bitstream/handle/1721.1/87870/53700676-MIT.pdf?sequence=2](https://dspace.mit.edu/bitstream/handle/1721.1/87870/53700676-MIT.pdf?sequence=2)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing SSH File Transfer Protocol (SFTP) ﬁles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **File Transfer Protocol** (**FTP**) was introduced in the 1970s at **Massachusetts
    Institute of Technology** (**MIT**) and is based on the **Transmission Control
    Protocol/Internet Protocol** (**TCP/IP**) application layer. Since the 1980s,
    it has been widely used to transfer files between computers.
  prefs: []
  type: TYPE_NORMAL
- en: Over the years, and with the increase in computer and internet usage, it became
    necessary to introduce a more secure way to use this solution. An **SSH layer**
    was implemented to improve the security of **FTP transactions**, creating the
    **SSH File Transfer Protocol** (**SFTP**) protocol.
  prefs: []
  type: TYPE_NORMAL
- en: Nowadays, it is common to ingest data from SFTP servers, and in this recipe,
    we will work to retrieve data from a public SFTP server.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will create code with Python, using the `pysftp` library,
    to connect and retrieve sample data from a public SFTP server.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you own an SFTP server, feel free to test the Python code here to exercise
    a little more:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we will get the SFTP credentials. Go to the SFTP.NET address at https://www.sftp.net/public-online-sftp-servers,
    and save the **Hostname** and **Login** (username/password) information on a notepad.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.4 – The SFTP.NET main page](img/Figure_2.4_B19453.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.4 – The SFTP.NET main page
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This SFTP server is intended to be used only for testing and studying purposes.
    Because of that, the credentials are insecure and publicly available, and for
    production purposes, that information needs to be secured in a password vault
    and never shared through code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we install the Python `pysftp` package using the command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps to perform this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let’s create a Python file called `accessing_sftp_files.py`. Then, we
    insert the following code to create our SFTP connection with Python:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can call the file using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the output for it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, a known error might occur – `SSHException: No hostkey for host` `test.rebex.net
    found`.'
  prefs: []
  type: TYPE_NORMAL
- en: This happens because pysftp can’t find hostkey in your KnowHosts.
  prefs: []
  type: TYPE_NORMAL
- en: 'If this error occurs, follow the next steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to your command line and execute `ssh demo@test.rebex.net`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.5 – Adding a host to the known_hosts list](img/Figure_2.5_B19453.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.5 – Adding a host to the known_hosts list
  prefs: []
  type: TYPE_NORMAL
- en: 'Insert the password for the `demo` user and exit Rebex Virtual Shell:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.6 – A welcome message from the Rebex SFTP server](img/Figure_2.6_B19453.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.6 – A welcome message from the Rebex SFTP server
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we list the files in the SFTP server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let’s download the `readme.txt` file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s change the last lines of our code to be able to download `readme.txt`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The output for this is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`pysftp` is a Python library that allows developers to connect, upload, and
    download data from SFTP servers. Its use is straightforward, and the library has
    tons of functionalities.'
  prefs: []
  type: TYPE_NORMAL
- en: Note that most of our code is indented inside `pysftp.Connection`. This happens
    because we create a connection session for that particular credential. The `with`
    statement makes the acquisition and release of the resources, and as you can see,
    it is widely used in file streams, locks, sockets, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: We also used the `sftp.cwd()` method, allowing us to change the directory and
    avoid specifying the path whenever we need to list or retrieve files.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the download was made using `sftp.get()`, where the first parameter
    is the path and the name of the file we want to download, and the second is where
    we will put it. Since we are already inside the file’s directory, we can save
    it in our local `HOME` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Last but not least, `sftp.close()` closes the connection. This is excellent
    practice in ingesting scripts to avoid network concurrency with other pipelines
    or the SFTP server.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you want to go deeper and make other tests, you can also create a local SFTP
    server.
  prefs: []
  type: TYPE_NORMAL
- en: 'For Linux users, it is possible to do this using the `ssh` command line. You
    can see more here: [https://linuxhint.com/setup-sftp-server-ubuntu/](https://linuxhint.com/setup-sftp-server-ubuntu/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'For Windows users, go to the **SFTP Servers** section here: [https://www.sftp.net/servers](https://www.sftp.net/servers).'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.7 – The SFTP.NET page, with a link to a tutorial on how to create
    a small SFTP server](img/Figure_2.7_B19453.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.7 – The SFTP.NET page, with a link to a tutorial on how to create a
    small SFTP server
  prefs: []
  type: TYPE_NORMAL
- en: Select **Rebex Tiny SFTP Server** under **Minimalist SFTP servers**, download
    it, and start the program.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Creating a local SFTP server with Docker: [https://hub.docker.com/r/atmoz/sftp](https://hub.docker.com/r/atmoz/sftp)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving data using API authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An **Application Programming Interface** (**API**) is a set of configurations
    that allows two systems or applications to communicate or transmit data with each
    other. Its concept has been improved in recent years, allowing faster transmissions
    and more security with **OAuth** methods, preventing **Denial of Service** (**DoS**)
    or **Distributed Denial of Service** (**DDoS**) attacks, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Its use is widely applied in data ingesting, whether to retrieve data from an
    application to retrieve the latest logs for analysis or from **BigQuery** using
    a cloud provider such as Google. Most applications nowadays make their data available
    through an API service, from which the data world gets a lot of benefits. The
    critical aspect here is to know how to retrieve data from an API service using
    the most accepted forms of authentication.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will retrieve data from a public API using API key authentication,
    a standard method to gather data.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since we will use two different methods, this section will be split to make
    it easy to understand how to handle them.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this section, we will use the HolidayAPI, a public and free API that provides
    information about holidays worldwide:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the Python `requests` library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, access the Holiday API website. Go to [https://holidayapi.com/](https://holidayapi.com/)
    and click on **Get Your Free API Key**. You should see the following page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.8 – The Holidays API main web page](img/Figure_2.8_B19453.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.8 – The Holidays API main web page
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we create an account and get the API Key. To create an account, you can
    use an email and password or sign up with your GitHub account:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.9 – The Holiday API user authentication page](img/Figure_2.9_B19453.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.9 – The Holiday API user authentication page
  prefs: []
  type: TYPE_NORMAL
- en: After the authentication, you can see and copy your API Key. Note that you can
    also generate a new one at any time.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.10 – The user dashboard page on the Holiday API page](img/Figure_2.10_B19453.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.10 – The user dashboard page on the Holiday API page
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: We will use the free tier of this API, which has limited requests per month.
    It is also prohibited from commercial use.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps to perform the recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We create a Python script using the `requests` library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Ensure you use a `year` value equal to your previous year since we are using
    a free version of the API, which is limited to last year’s historical data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the output for the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: As a best practice, the API key should never be hardcoded in the script. The
    definition here is for educational purposes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we save our API request as a JSON file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Python `requests` library is one of the most downloaded libraries on the
    PyPi servers. This popularity is not surprising, as we will see when we work with
    the library and see its power and versatility.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 1*, we imported both the `requests` and `json` modules at the beginning
    of the Python script. The `params` dictionary is a payload sender to the API,
    so we inserted the API key and the two other mandatory fields.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This API authorization key was sent through a payload request; however, it depends
    on how the API is built. Some request that the authentication is sent via `Header`
    definitions, for instance. Always check the API documentation or developer to
    understand how to authenticate correctly.
  prefs: []
  type: TYPE_NORMAL
- en: The `print()` function in *step 1* served as a test to see whether our calls
    were authenticated.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the API call returning a `200` status code, we proceed to save the `JSON`
    file, and you should have output like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.11 – The downloaded JSON file data](img/Figure_2.11_B19453.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.11 – The downloaded JSON file data
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: API keys are commonly used to authenticate clients, but other security methods
    such as OAuth should be considered, depending on the data sensitivity level.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: API key authentication can only be considered secure if associated with other
    security mechanisms such as HTTPS/SSL.
  prefs: []
  type: TYPE_NORMAL
- en: Authentication using the OAuth method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Open Authorization** (**OAuth**) is an industry-standard protocol to authorize
    websites or applications to communicate and access informa[tion. You can find](https://oauth.net/2/)
    out more about it on the official documentation page here: [https://oauth.net/2/](https://oauth.net/2/).'
  prefs: []
  type: TYPE_NORMAL
- en: You can also test this type of authentication with the **Google Calendar API**.
    To enable the OAuth met[hod, follow these steps:](https://edps.europa.eu/data-protection/data-protection/reference-library/health-data-workplace_en)
  prefs: []
  type: TYPE_NORMAL
- en: '[Enable the Google Calendar API by](https://edps.europa.eu/data-protection/data-protection/reference-library/health-data-workplace_en)
    visiting the page at [https://developers.google.com/calendar/api/quickstart/python](https://developers.google.com/calendar/api/quickstart/python),
    and then go to the **Enable** **APIs** section.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A new tab will open, and **Google Cloud** will ask you to select or create a
    new project. Select the project you want to use.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you opt to create a new project, insert the project name in the **Project’s
    Name** field and leave the **Organization** field with the default value (**No
    Organization**).
  prefs: []
  type: TYPE_NORMAL
- en: 'Select **Next** to confirm your project, and then click on **Activate**; you
    should then see this page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.12 – The GCP page to activate a resource API](img/Figure_2.12_B19453.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.12 – The GCP page to activate a resource API
  prefs: []
  type: TYPE_NORMAL
- en: Now, we are almost ready to get our credentials.
  prefs: []
  type: TYPE_NORMAL
- en: Enable OAuth authentication by returning to the page at [https://developers.google.com/calendar/api/quickstart/python](https://developers.google.com/calendar/api/quickstart/python),
    clicking on **Go to Credentials**, and following the instructions under **Authorize
    credentials for a** **desktop application**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.13 – GCP tutorial page to create the credentials.json file](img/Figure_2.13_B19453.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.13 – GCP tutorial page to create the credentials.json file
  prefs: []
  type: TYPE_NORMAL
- en: At the end of this, you should have a `credentials.json` file for this recipe.
    Keep this file safe, since all calls to the Google API will require it to verify
    your authenticity.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use one of the GCP script examples to test this authentication method.
    Google has a Python script sample to retrieve data from the **Google Calendar
    API**, which can be accessed here: [https://github.com/googleworkspace/python-samples/blob/main/calendar/quickstart/quickstart.py](https://github.com/googleworkspace/python-samples/blob/main/calendar/quickstart/quickstart.py).'
  prefs: []
  type: TYPE_NORMAL
- en: Other authentication methods
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Even though we covered the two most common methods to authenticate to an API,
    a data ingestion pipeline is not limited to In your day-to-day work, you're likely
    to find legacy systems or applications that require other forms of authentication.
  prefs: []
  type: TYPE_NORMAL
- en: 'Methods such as **HTTP Basic and Bearer**, **OpenID Connect**, and **OpenAPI
    security schemes** are also widely used. You can find more details about them
    in this article written by *Guy* *Levin*: [https://blog.restcase.com/4-most-used-rest-api-authentication-methods/](https://blog.restcase.com/4-most-used-rest-api-authentication-methods/).'
  prefs: []
  type: TYPE_NORMAL
- en: SFTP versus API
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You might be wondering, what is the difference between ingesting data from an
    SFTP server and an API? It is clear that they authenticate differently, and the
    code also behaves distinctly. But when should we implement an SFTP or API to make
    data available for ingestion?
  prefs: []
  type: TYPE_NORMAL
- en: FTP or SFTP transactions are designed to use **flat files**, such as **CSV**,
    **XML**, and **JSON** files. These two types of transactions also perform well
    when we need to transfer bulk data, and it is the only method available for older
    systems. An API provides real-time data delivery and a more secure internet-based
    connection, and its integration with several cloud applications has made it popular
    in the data ingestion world. However, API calls are sometimes paid for based on
    the number of requests.
  prefs: []
  type: TYPE_NORMAL
- en: This file transaction architecture discussion is primarily for financial and
    HR systems, which may use some old programming language versions. The system architecture
    discussion is based on flat files or real-time data in more recent and cloud-based
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can find a list of public APIs with different types of auth methods here:
    [https://github.com/public-apis/public-apis](https://github.com/public-apis/public-apis)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Holiday API Python Client: [https://github.com/holidayapi/holidayapi-python](https://github.com/holidayapi/holidayapi-python)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Python `requests` library documentation: [https://requests.readthedocs.io/en/latest/user/quickstart/](https://requests.readthedocs.io/en/latest/user/quickstart/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing encrypted ﬁles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When handling sensitive data is common, some fields or even the entire file
    is encrypted. It is comprehensive when this file security measure is implemented
    since sensitive data can expose the life of users. After all, encryption is the
    process of converting information into code that hides the original content.
  prefs: []
  type: TYPE_NORMAL
- en: Nonetheless, we must still ingest and process these encrypted files in our data
    pipelines. To be able to do so, we need to understand a bit more about how encryption
    works and how it is done.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will decrypt a GnuPG-encrypted (where **GnuPG** stands for
    **GNU Privacy Guard**) file using Python libraries and best practices.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before jumping into the fun part, we must install the GnuPG library on our local
    machine and download the encrypted dataset.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will need two installations for the GnuPG file – one for the **operating
    system** (**OS**) and another for a Python package. This because the Python package
    requires internal resources from the installed OS package:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To use the Python wrapper library, we first need to install the GnuPG on our
    local machine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For Windows users, it is recommended to download the executable file here:
    [https://gnupg.org/download/index.xhtml](https://gnupg.org/download/index.xhtml).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Mac users can install it using Homebrew: [https://formulae.brew.sh/formula/gnupg](https://formulae.brew.sh/formula/gnupg).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we install the Python GnuPG wrapper as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we download the **spotify tracks chart encrypted** dataset. You can use
    this link to download the file: [https://github.com/PacktPublishing/Data-Ingestion-with-Python-Cookbook/tree/main/Chapter_2/managing_encrypted_%EF%AC%81les](https://github.com/PacktPublishing/Data-Ingestion-with-Python-Cookbook/tree/main/Chapter_2/managing_encrypted_%EF%AC%81les).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will need a key to decrypt the file using GnuPG. You can find it in the
    `| Managing encrypted ﬁles` folder. The link to access it is in the *Technical
    requirements* section at the beginning of this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we import our key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we decrypt the ingestion file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Regarding the best practices for encrypting, GnuPG is a security reference
    and widely used, and it is documented in **RFC 4880**. You can find out more here:
    [https://www.rfc-editor.org/rfc/rfc4880](https://www.rfc-editor.org/rfc/rfc4880).'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: A **Request for Comments** (**RFC**) is a technical documentation developed
    and maintained by the **Internet Engineering Task Force** (**IETF**). This institute
    specifies the best practices for protocols, services, and patterns on the internet.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we saw a real-life example of GnuPG application, even though it seems
    simple. Let’s pass through some important lines in the code:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `gpg = gnupg.GPG(gnupghome='gpghome')` line, we instantiated our `GPG`
    class and passed where it can store temporary files, and you can set any path
    you want to. In my case, I created a folder in my home directory called `gpghome`.
  prefs: []
  type: TYPE_NORMAL
- en: In the next lines, the key is imported, and we print its fingerprint just for
    demonstration purposes.
  prefs: []
  type: TYPE_NORMAL
- en: For *step 2*, we open the file we want to decrypt using the `with open` statement
    and decrypt it. You can see that a parameter for `passphrase` was set. This happened
    because the more recent versions of GnuPG require the file to have a passphrase
    set when encrypted. Since this recipe is only for educational matters, the passphrase
    here is simple and hardcoded.
  prefs: []
  type: TYPE_NORMAL
- en: After that, you should be able to open the `.csv` file with no problems.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.14 – The decrypted Spotify CSV file](img/Figure_2.14_B19453.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.14 – The decrypted Spotify CSV file
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Usually, GnuPG is the tool of choice when it comes to encrypting files, but
    there are other market solutions such as the Python `cryptography` library, which
    has a `Fernet` class, a symmetric encryption method. As you can see in the following
    code, its use is very similar to what we did in this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Still, the `Fernet` method is not widely used in the data world. It happens
    because an encrypted file with sensitive data often comes from an application
    or software that uses GnuPG hybrid encryption, which, as we saw in the *How it
    works…* section, complies with RFC 4880.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find more details in the `cryptography` library documentation: [https://cryptography.io/en/latest/fernet/](https://cryptography.io/en/latest/fernet/).'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'How to create and encrypt files using the **Python Wrapper for** **GnuPG**:
    [https://gnupg.readthedocs.io/en/latest/](https://gnupg.readthedocs.io/en/latest/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'GnuPG official page and documentation: [https://gnupg.org/](https://gnupg.org/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you are curious about RFC 4880 and want to understand it deeper, a summarized
    article about it was written by David Steele in his blog: [https://davesteele.github.io/gpg/2014/09/20/anatomy-of-a-gpg-key/](https://davesteele.github.io/gpg/2014/09/20/anatomy-of-a-gpg-key/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Voltage by opentext* is a great tool for data security and recommended by
    many companies. You can find out more here: [https://www.microfocus.com/en-us/cyberres/data-privacy-protection](https://www.microfocus.com/en-us/cyberres/data-privacy-protection).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing data from AWS using S3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AWS is one of the most popular cloud providers, mixing different service architectures
    and allowing easy and fast implementations.
  prefs: []
  type: TYPE_NORMAL
- en: While it has various solutions for relational and non-relational databases,
    in this recipe, we will cover how to manage data access from **S3 buckets**, which
    is an object storage service allowing not only text files to be uploaded, but
    also media and several other types of files used in the IoT and big data fields.
  prefs: []
  type: TYPE_NORMAL
- en: There are two commonly used types of data access management for S3 buckets,
    both used on ingest pipelines – **user control** and **bucket policies**. In this
    recipe, we will learn how to manage access by user control, given that it is the
    most used method among data ingestion pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To do this recipe, having or creating an AWS account is not mandatory. The objective
    is to build a step-by-step **Identity Access Management** (**IAM)** policy to
    retrieve data from an S3 bucket using good data access practices you understand.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, if you want to create a free AWS account to test it, you can follow
    the steps provided by the **AWS official docs** here: [https://docs.aws.amazon.com/accounts/latest/reference/manage-acct-creating](https://docs.aws.amazon.com/accounts/latest/reference/manage-acct-creating).xhtml.
    After creating your AWS account, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s create a user to test our S3 policy. To create a user, check out this
    AWS link: [https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_create.xhtml](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_create.xhtml).
    You don’t need to worry about attaching policies to it, so skip this part of the
    tutorial. The idea is to explore what a user without any policies attached can
    do inside the AWS console.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, let’s create an S3 bucket using our administrator user. On the search
    bar, type `S3` and click on the first link:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.15 – The AWS search bar](img/Figure_2.15_B19453.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.15 – The AWS search bar
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, click the **Create bucket** button and a new page will load as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.16 – The AWS S3 main page](img/Figure_2.16_B19453.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.16 – The AWS S3 main page
  prefs: []
  type: TYPE_NORMAL
- en: 'A new page will load as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.17 – The AWS S3 page to create a new bucket](img/Figure_2.17_B19453.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.17 – The AWS S3 page to create a new bucket
  prefs: []
  type: TYPE_NORMAL
- en: 'On the `Stockholm` in this recipe since it is the nearest region to where I
    live. Skip the other fields for now, scroll down, and press the **Create** **bucket**
    button:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the S3 page, you know should be able to see and select the bucket you created:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.18 – The S3 bucket objects page](img/Figure_2.18_B19453.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.18 – The S3 bucket objects page
  prefs: []
  type: TYPE_NORMAL
- en: You can upload any files here for testing if you want to.
  prefs: []
  type: TYPE_NORMAL
- en: After completing the steps, open another window on your browser and switch to
    the user you created for testing. If possible, try to keep administrator and testing
    users logged on in different browsers so that you can see the changes in real
    time.
  prefs: []
  type: TYPE_NORMAL
- en: We are ready to start creating and applying the access policy.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If we try to list **S3**, we can see the buckets, but when clicking on any
    bucket, this error will happen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.19 – Testing the user view of an S3 bucket with an Insufficient
    permissions message](img/Figure_2.19_B19453.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.19 – Testing the user view of an S3 bucket with an Insufficient permissions
    message
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s fix this by creating and attaching a policy with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will define an access policy for the user. The user will be capable
    of listing, retrieving, and deleting any object inside the S3 bucket we created.
    Let’s start by creating a JSON file with the AWS policy requirements to make it
    possible. See the following file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we allow the user to access the bucket via IAM policies. On the user
    IAM page, click on **Add inline policy** as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.20 – AWS user Permission policy section](img/Figure_2.20_B19453.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.20 – AWS user Permission policy section
  prefs: []
  type: TYPE_NORMAL
- en: 'Insert the previous code into the **JSON** option tab, and click on **Review
    policy**. On the **Review Policy** page, insert the policy’s name and click **Create
    policy** to confirm it, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.21 – The AWS IAM review policy page](img/Figure_2.21_B19453.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.21 – The AWS IAM review policy page
  prefs: []
  type: TYPE_NORMAL
- en: If we check now, we can see that adding but not deleting files is possible.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At the beginning of this recipe, our testing user had no permission to access
    any resources at AWS. For example, when accessing our created bucket, a warning
    appeared on the page. Then we allowed the user to access and upload files or objects
    to the bucket.
  prefs: []
  type: TYPE_NORMAL
- en: 'In *step 1*, we built an inline IAM policy with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we allowed the testing user to list all the buckets inside the respective
    AWS account:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The second statement allows the user to list objects and get the bucket’s location.
    Note that in the **Resource** key, we only specified a target S3 bucket **AWS
    Resource** **Name** (**ARN**):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we create another statement to allow the insertion and retrieval of
    objects. In this case, the resource now also has a `/*` character at the end of
    the ARN. This represents the policy that is going to affect the respective bucket
    objects:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Depending on the AWS resource you want to manage access, the **Action** key
    can be very different and can have different applications. Regarding S3 buckets
    and objects, you find all possible actions in the AWS documentation: [https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-with-s3-actions.xhtml](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-with-s3-actions.xhtml).'
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When ingesting data, the user control method is the most used. It happens because
    an application such use **Airflow** or **Elastic MapReduce** (**EMR**) can usually
    connect to a bucket. Also, from a management control perspective, it is much easier
    to handle, with just a few programmatic accesses instead of one for each user
    in a company.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, there will be scenarios where each data engineer has a user with
    permissions set. Still, the scenario usually is (and should be) a development
    environment with a sample of data.
  prefs: []
  type: TYPE_NORMAL
- en: Bucket policies
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Bucket policies can add a security layer to control the access of external
    resources to internal objects. With these policies, limiting access to specific
    IP addresses, specific resources such as **CloudFront**, or types of **HTTP**
    method requests is possible. In the AWS official documentation, you can see a
    list of practical examples: [https://docs.aws.amazon.com/AmazonS3/latest/userguide/example-bucket-policies.xhtml](https://docs.aws.amazon.com/AmazonS3/latest/userguide/example-bucket-policies.xhtml).'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the AWS official documentation, you can also see other types of access control,
    such as **Access Control Lists** (**ACLs**) and **Cross-Origin Resource Sharing**
    (**CORS**): [https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-access-control.xhtml](https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-access-control.xhtml).'
  prefs: []
  type: TYPE_NORMAL
- en: Accessing data from GCP using Cloud Storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Google Cloud Platform** (**GCP**) is a cloud provider that offers manifold
    services, from cloud computing to **Artificial Intelligence** (**AI**), which
    can be implemented in only a few steps. It also provides broad-spectrum storage
    called **Cloud Storage**.'
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will build step-by-step policies to control access to data
    inside our **Cloud** **Storage buckets**.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe will use the *uniform* method, as defined by the Google Cloud team:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will create a testing user. Go to the **IAM** page ([https://console.cloud.google.com/iam-admin/iam](https://console.cloud.google.com/iam-admin/iam))
    and select **Grant Access**. Add a valid Gmail address in the **New principals**
    field. For now, this user will only have the **Browser** role:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.22 – The GCP IAM page to attach policies to a user](img/Figure_2.22_B19453.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.22 – The GCP IAM page to attach policies to a user
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we will create a Cloud Storage bucket. Go to the **Cloud Storage** page
    and select **Create a** **bucket**: [https://console.cloud.google.com/storage/create-bucket](https://console.cloud.google.com/storage/create-bucket).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.23 – The GCP search bar with Cloud Storage selected](img/Figure_2.23_B19453.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.23 – The GCP search bar with Cloud Storage selected
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a unique name to your bucket and leave the other option as it is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.24 – The GCP page to create a new bucket](img/Figure_2.24_B19453.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.24 – The GCP page to create a new bucket
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps to perform this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will try to access the Cloud Storage objects. First, let’s try to access
    the bucket using the user we just created. An error message should appear:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.25 – An insufficient permission message for the testing user in
    the GCP console](img/Figure_2.25_B19453.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.25 – An insufficient permission message for the testing user in the
    GCP console
  prefs: []
  type: TYPE_NORMAL
- en: Then, we grant **Editor** permissions in Cloud Storage. Go to the **IAM** page
    and select the testing user you created. On the editing user page, select **Editor**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.26 – The GCP IAM page – assigning the Editor role to the testing
    user](img/Figure_2.26_B19453.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.26 – The GCP IAM page – assigning the Editor role to the testing user
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are confused about the roles, use the Policy Simulator in Google Cloud:
    [https://console.cloud.google.com/iam-admin/simulator](https://console.cloud.google.com/iam-admin/simulator).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we access Cloud Storage with a proper role. The user should be able to
    see and upload objects to the bucket:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.27 – The testing user view of the GCP bucket](img/Figure_2.27_B19453.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.27 – The testing user view of the GCP bucket
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In *step 1*, our testing user had only permission to browse, and an error message
    appeared when trying to see the bucket list. However, the **Editor** role for
    Cloud Storage solves this problem by granting access to the bucket (and most of
    the other essential Google Cloud resources). At this point, creating a condition
    to allow only access to this bucket is also possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Google Cloud access hierarchy is based on its organization and projects.
    To provide access to a respective bucket, we need to ensure we also have access
    to the resources of a project. Refer to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.28 – GCP control access hierarchy – source: https://cloud.google.com/resource-manager/docs/cloud-platform-resource-hierarchy#inheritance](img/Figure_2.28_B19453.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.28 – GCP control access hierarchy – source: https://cloud.google.com/resource-manager/docs/cloud-platform-resource-hierarchy#inheritance'
  prefs: []
  type: TYPE_NORMAL
- en: Once the access hierarchy is defined, we can select several built-in user permission
    groups on the IAM page and add conditions if needed. Unlike AWS, Google Cloud
    policies are often created as “roles” and grouped to serve a specific area or
    department. Additional permissions or conditionals can be made for particular
    cases, but they are not shared.
  prefs: []
  type: TYPE_NORMAL
- en: Even though the uniform method seems simple, it can be a powerful way to manage
    access to Google Cloud when properly grouped and revised and uniformly grant permissions.
    In our case, the **Editor** role solved our problem, but a specialist on this
    topic is recommended when working with larger teams and different types of access
    policies.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Like S3, Cloud Storage also has another type of access control called **fine-grained**.
    It consists of a mixture of IAM policies and ACLs and is recommended in cases
    where storage connects to an S3 bucket, for instance. As its name suggests, the
    permission is refined to the bucket and individual object levels. It needs to
    be configured by someone (or a team) with a high level of security knowledge,
    since the data exposure can be elevated if the [**ACL policy** is not set correctly.](https://davesteele.github.io/gpg/2014/09/20/anatomy-of-a-gpg-key/)
  prefs: []
  type: TYPE_NORMAL
- en: '[You can read more about ACLs i](https://davesteele.github.io/gpg/2014/09/20/anatomy-of-a-gpg-key/)n
    Cloud Storage here: [https://cloud.google.com/storage/docs/access-control/lists](https://cloud.google.com/storage/docs/access-control/lists).'
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[https://www.manageengine.com/device-control/data-replication.xhtml](https://www.manageengine.com/device-control/data-replication.xhtml)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.keboola.com/blog/database-replication-techniques](https://www.keboola.com/blog/database-replication-techniques)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://satoricyber.com/access-control/access-control-101-a-comprehensive-guide-to-database-access-control/](https://satoricyber.com/access-control/access-control-101-a-comprehensive-guide-to-database-access-control/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://stackoverflow.com/questions/190257/best-role-based-access-control-rbac-database-model](https://stackoverflow.com/questions/190257/best-role-based-access-control-rbac-database-model)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.researchgate.net/publication/281479020_A_Model-driven_Role-based_Access_Control_for_SQL_Databases](https://www.researchgate.net/publication/281479020_A_Model-driven_Role-based_Access_Control_for_SQL_Databases)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://dspace.mit.edu/bitstream/handle/1721.1/87870/53700676-MIT.pdf?sequence=2](https://dspace.mit.edu/bitstream/handle/1721.1/87870/53700676-MIT.pdf?sequence=2)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://scholarworks.calstate.edu/downloads/sb397840v](https://scholarworks.calstate.edu/downloads/sb397840v)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.sftp.net/public-online-sftp-servers](https://www.sftp.net/public-online-sftp-servers)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.ittsystems.com/how-to-access-sftp-server-in-python/](https://www.ittsystems.com/how-to-access-sftp-server-in-python/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://towardsdatascience.com/encrypt-and-decrypt-files-using-python-python-programming-pyshark-a67774bbf9f4](https://towardsdatascience.com/encrypt-and-decrypt-files-using-python-python-programming-pyshark-a67774bbf9f4)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.geeksforgeeks.org/encrypt-and-decrypt-files-using-python/](https://www.geeksforgeeks.org/encrypt-and-decrypt-files-using-python/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.saltycrane.com/blog/2011/10/python-gnupg-gpg-example/](https://www.saltycrane.com/blog/2011/10/python-gnupg-gpg-example/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.ekransystem.com/en/blog/data-security-best-practices](https://www.ekransystem.com/en/blog/data-security-best-practices)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.ovaledge.com/blog/data-access-management-basics-implementation-strategy](https://www.ovaledge.com/blog/data-access-management-basics-implementation-strategy)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
