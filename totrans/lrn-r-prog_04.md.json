["```py\nx <- 1 \ny <- c(1, 2, 3) \nz <- list(x, y) \n\n```", "```py\n2 -> x1 \n\n```", "```py\nx3 <- x2 <- x1 <- 0 \n\n```", "```py\nx3 <- x2 <- x1 <- rnorm(1)\nc(x1, x2, x3)\n## [1] 1.585697 1.585697 1.585697 \n\n```", "```py\nx2 = c(1, 2, 3) \n\n```", "```py\nf <- function(input, data = NULL) { \n  cat(\"input:\\n\") \n  print(input) \n  cat(\"data:\\n\") \n  print(data) \n} \n\n```", "```py\nx <- c(1, 2, 3)\ny <- c(\"some\", \"text\")\nf(input = x)\n## input: \n## [1] 1 2 3 \n## data: \n## NULL \n\n```", "```py\nx = c(1, 2, 3)\ny = c(\"some\", \"text\")\nf(input = x)\n## input: \n## [1] 1 2 3 \n## data: \n## NULL \n\n```", "```py\nx <- c(1, 2, 3)\ny <- c(\"some\", \"text\")\nf(input <- x)\n## input: \n## [1] 1 2 3 \n## data: \n## NULL \n\n```", "```py\ninput\n## [1] 1 2 3 \n\n```", "```py\nf(input = x, data = y)\n## input: \n## [1] 1 2 3 \n## data: \n## [1] \"some\" \"text\" \n\n```", "```py\nf(input <- x, data <- y)\n## input: \n## [1] 1 2 3 \n## data: \n## [1] \"some\" \"text\" \n\n```", "```py\nf(data = y, input = x)\n## input: \n## [1] 1 2 3 \n## data: \n## [1] \"some\" \"text\" \n\n```", "```py\nf(data <- y, input <- x)\n## input: \n## [1] \"some\" \"text\" \n## data: \n## [1] 1 2 3 \n\n```", "```py\ndata <- y\ninput <- x\nf(y, x)\n## input: \n## [1] \"some\" \"text\" \n## data: \n## [1] 1 2 3 \n\n```", "```py\nstudents <- data.frame() \nus_population <- data.frame() \nsales.2015 <- data.frame() \n\n```", "```py\nsome data <- data.frame() \n## Error: unexpected symbol in \"some data\" \n_data <- data.frame() \n## Error: unexpected input in \"_\" \nPopulation(Millions) <- data.frame() \n## Error in Population(Millions) <- data.frame() :  \n##  object 'Millions' not found \n\n```", "```py\n`some data` <- c(1, 2, 3) \n`_data` <- c(4, 5, 6) \n`Population(Millions)` <- c(city1 = 50, city2 = 60) \n\n```", "```py\n`some data`\n## [1] 1 2 3\n`_data`\n## [1] 4 5 6\n`Population(Millions)`\n## city1city2 \n##    50    60 \n\n```", "```py\n`Tom's secret function` <- function(a, d) { \n  (a ^ 2 - d ^ 2) / (a ^ 2 + d ^ 2)  \n} \n\n```", "```py\nl1 <- list(`Group(A)` = rnorm(10), `Group(B)` = rnorm(10)) \n\n```", "```py\n`Tom's secret function`(1,2)\n## [1] -0.6\nl1$`Group(A)`\n##  [1] -0.8255922 -1.1508127 -0.7093875  0.5977409 -0.5503219 -1.0826915 \n##  [7]  2.8866138  0.6323885 -1.5265957  0.9926590 \n\n```", "```py\nresults <- data.frame(`Group(A)` = rnorm(10), `Group(B)` = rnorm(10))\nresults\n##       Group.A.    Group.B. \n## 1  -1.14318956  1.66262403 \n## 2  -0.54348588  0.08932864 \n## 3   0.95958053 -0.45835235 \n## 4   0.05661183 -1.01670316 \n## 5  -0.03076004  0.11008584 \n## 6  -0.05672594 -2.16722176 \n## 7  -1.31293264  1.69768806 \n## 8  -0.98761119 -0.71073080 \n## 9   2.04856454 -1.41284611 \n## 10  0.09207977 -1.16899586 \n\n```", "```py\ncolnames(results)\n## [1] \"Group.A.\" \"Group.B.\" \n\n```", "```py\nID,Category,Population(before),Population(after) \n0,A,10,12 \n1,A,12,13 \n2,A,13,16 \n3,B,11,12 \n4,C,13,12 \n\n```", "```py\nmake.names(c(\"Population(before)\", \"Population(after)\"))\n## [1] \"Population.before.\" \"Population.after.\"\n```", "```py\nresults <- data.frame(\nID = c(0, 1, 2, 3, 4),\nCategory = c(\"A\", \"A\", \"A\", \"B\", \"C\"),\n`Population(before)` = c(10, 12, 13, 11, 13),\n`Population(after)` = c(12, 13, 16, 12, 12),\nstringsAsFactors = FALSE,\ncheck.names = FALSE)\nresults\n##    ID Category Population(before) Population(after)\n## 1  0     A          10                  12\n## 2  1     A          12                  13\n## 3  2     A          13                  16\n## 4  3     B          11                  12\n## 5  4     C          13                  12\ncolnames(results)\n## [1] \"ID\"    \"Category\"   \"Population(before)\" \n## [4] \"Population(after)\" \n\n```", "```py\nresults$`Population(before)`\n## [1] 10 12 13 11 13\n```", "```py\ncheck_positive <- function(x) { \n  if (x > 0) { \n    return(1) \n  } \n} \n\n```", "```py\ncheck_positive(1)\n## [1] 1\ncheck_positive(0)\n```", "```py\ncheck_sign <- function(x) { \n  if (x > 0) { \n    return(1) \n  } else if (x < 0) { \n    return(-1) \n  } else { \n    return(0) \n  } \n} \n\n```", "```py\ncheck_sign(15)\n## [1] 1\ncheck_sign(-3.5)\n## [1] -1\ncheck_sign(0)\n## [1] 0 \n\n```", "```py\nsay_sign <- function(x) { \n  if (x > 0) { \n    cat(\"The number is greater than 0\") \n  } else if (x < 0) { \n    cat(\"The number is less than 0\") \n  } else { \n    cat(\"The number is 0\") \n  } \n} \n\n```", "```py\nsay_sign(0)\n## The number is 0\nsay_sign(3)\n## The number is greater than 0\nsay_sign(-9)\n## The number is less than 0 \n\n```", "```py\nif (cond1) { \n  # do something \n} \n\n```", "```py\nif (cond1) { \n  # do something \n} else { \n  # do something else \n} \n\n```", "```py\nif (cond1) { \n  expr1 \n} else if (cond2) { \n  expr2 \n} else if (cond3) { \n  expr3 \n} else { \n  expr4 \n} \n\n```", "```py\ngrade <- function(score) {\n  if (score >= 90) {\n    return(\"A\")\n  } else if (score >= 80) {\n    return(\"B\")\n  } else if (score >= 70) {\n    return(\"C\")\n  } else if (score >= 60) {\n    return(\"D\")\n  } else {\n    return(\"F\")\n  }\n}\nc(grade(65), grade(59), grade(87), grade(96))\n## [1] \"D\" \"F\" \"B\" \"A\" \n\n```", "```py\ngrade2 <- function(score) {\n  if (score >= 60) {\n    return(\"D\")\n  } else if (score >= 70) {\n    return(\"C\")\n  } else if (score >= 80) {\n    return(\"B\")\n  } else if (score >= 90) {\n    return(\"A\")\n  } else {\n    return(\"F\")\n  }\n}\nc(grade2(65), grade2(59), grade2(87), grade2(96))\n## [1] \"D\" \"F\" \"D\" \"D\" \n\n```", "```py\ngrade2 <- function(score) {\n  if (score >= 60 && score < 70) {\n    return(\"D\")\n  } else if (score >= 70 && score < 80) {\n    return(\"C\")\n  } else if (score >= 80 && score < 90) {\n    return(\"B\")\n  } else if (score >= 90) {\n    return(\"A\")\n  } else {\n    return(\"F\")\n  }\n}\nc(grade2(65), grade2(59), grade2(87), grade2(96))\n## [1] \"D\" \"F\" \"B\" \"A\" \n\n```", "```py\ncheck_positive <- function(x) { \n  return(if (x > 0) { \n    1 \n  }) \n} \n\n```", "```py\ncheck_positive <- function(x) { \n  return(if (x > 0) 1) \n} \n\n```", "```py\ncheck_positive <- function(x) { \n  if (x > 0) 1 \n} \n\n```", "```py\ncheck_sign <- function(x) { \n  if (x > 0) 1 else if (x < 0) -1 else 0 \n} \n\n```", "```py\nsay_grade <- function(name, score) {\n  grade <- if (score >= 90) \"A\"\n    else if (score >= 80) \"B\"\n    else if (score >= 70) \"C\"\n    else if (score >= 60) \"D\"\n    else \"F\"\n  cat(\"The grade of\", name, \"is\", grade)\n}\nsay_grade(\"Betty\", 86)\n## The grade of Betty is B \n\n```", "```py\nsay_grade <- function(name, score) { \n  if (score >= 90) grade <- \"A\" \n  cat(\"Congratulations!\\n\") \n  else if (score >= 80) grade <- \"B\" \n  else if (score >= 70) grade <- \"C\" \n  else if (score >= 60) grade <- \"D\" \n  else grade <- \"F\" \n  cat(\"What a pity!\\n\") \n  cat(\"The grade of\", name, \"is\", grade) \n} \n\n```", "```py\n>say_grade <- function(name, score) { \n+   if (score >= 90) grade <- \"A\" \n+   cat(\"Congratulations!\\n\") \n+   else if (score >= 80) grade <- \"B\" \nError: unexpected 'else' in: \n\"  cat(\"Congratulations!\\n\") \n  else\" \n>   else if (score >= 70) grade <- \"C\" \nError: unexpected 'else' in \"  else\" \n>   else if (score >= 60) grade <- \"D\" \nError: unexpected 'else' in \"  else\" \n>   else grade <- \"F\" \nError: unexpected 'else' in \"  else\" \n>   cat(\"What a pity!\\n\") \nWhat a pity! \n>   cat(\"The grade of\", name, \"is\", grade) \nError in cat(\"The grade of\", name, \"is\", grade) : object 'name' not found \n> } \nError: unexpected '}' in \"}\" \n\n```", "```py\nsay_grade <- function(name, score) {\n  if (score >= 90) {\n    grade <- \"A\"\n    cat(\"Congratulations!\\n\")\n  } else if (score >= 80) {\n    grade <- \"B\"\n  }\n  else if (score >= 70) {\n    grade <- \"C\"\n  }\n  else if (score >= 60) {\n    grade <- \"D\"\n  } else {\n    grade <- \"F\"\n    cat(\"What a pity!\\n\")\n  }\n  cat(\"The grade of\", name, \"is\", grade)\n}\nsay_grade(\"James\", 93)\n## Congratulations! \n## The grade of James is A \n\n```", "```py\ncheck_positive(c(1, -1, 0))\n## Warning in if (x > 0) 1: the condition has length > 1 and only the first\n## element will be used\n## [1] 1 \n\n```", "```py\nnum <- c(1, 2, 3)\nif (num > 2) {\ncat(\"num > 2!\")\n}\n## Warning in if (num > 2) {: the condition has length > 1 and only the first \n## element will be used \n\n```", "```py\nany(c(TRUE, FALSE, FALSE))\n## [1] TRUE\nany(c(FALSE, FALSE))\n## [1] FALSE \n\n```", "```py\nif (any(num > 2)) {\n  cat(\"num > 2!\")\n}\n## num > 2! \n\n```", "```py\nif (all(num > 2)) {\n  cat(\"num > 2!\")\n} else {\n  cat(\"Not all values are greater than 2!\")\n}\n## Not all values are greater than 2! \n\n```", "```py\ncheck <- function(x) { \n  if (all(x > 0)) { \n    cat(\"All input values are positive!\") \n  } else { \n    cat(\"Some values are not positive!\") \n  } \n} \n\n```", "```py\ncheck(c(1, 2, 3))\n## All input values are positive!\ncheck(c(1, 2, NA, -1))\n## Some values are not positive!\ncheck(c(1, 2, NA))\n## Error in if (all(x > 0)) {: missing value where TRUE/FALSE needed \n\n```", "```py\nifelse(c(TRUE, FALSE, FALSE), c(1, 2, 3), c(4, 5, 6))\n## [1] 1 5 6 \n\n```", "```py\ncheck_positive2 <- function(x) { \n  ifelse(x, 1, 0) \n} \n\n```", "```py\nifelse(TRUE, c(1,2), c(2,3))\n## [1] 1\n```", "```py\nif (TRUE) c(1,2) else c(2,3)\n## [1] 1 2\n```", "```py\nifelse(c(TRUE, FALSE), c(1, 2), c(\"a\", \"b\"))\n## [1] \"1\" \"b\"\n```", "```py\nswitch(1, \"x\", \"y\")\n## [1] \"x\"\nswitch(2, \"x\", \"y\")\n## [1] \"y\" \n\n```", "```py\nswitch(3, \"x\", \"y\") \n\n```", "```py\nswitch(\"a\", a = 1, b = 2)\n## [1] 1\nswitch(\"b\", a = 1, b = 2)\n## [1] 2 \n\n```", "```py\nswitch(\"c\", a = 1, b = 2) \n\n```", "```py\nswitch(\"c\", a = 1, b = 2, 3)\n## [1] 3 \n\n```", "```py\nswitch_test <- function(x) {\n  switch(x,\n    a = c(1, 2, 3),\n    b = list(x = 0, y = 1),\n    c = {\n      cat(\"You choose c!\\n\")\n      list(name = \"c\", value = \"something\")\n    })\n}\nswitch_test(\"a\")\n## [1] 1 2 3\nswitch_test(\"b\")\n## $x\n## [1] 0\n##\n## $y\n## [1] 1\nswitch_test(\"c\")\n## You choose c!\n## $name \n## [1] \"c\" \n##  \n## $value \n## [1] \"something\" \n\n```", "```py\nfor (var in vector) { \n  expr \n} \n\n```", "```py\nvar <- vector[[1]] \nexpr \nvar <- vector[[2]] \nexpr \n... \nvar <- vector[[n]] \nexpr \n\n```", "```py\nfor (i in 1:3) {\ncat(\"The value of i is\", i, \"\\n\")\n}\n## The value of i is 1  \n## The value of i is 2  \n## The value of i is 3 \n\n```", "```py\nfor (word in c(\"hello\",\"new\", \"world\")) {\ncat(\"The current word is\", word, \"\\n\")\n}\n## The current word is hello  \n## The current word is new  \n## The current word is world \n\n```", "```py\nloop_list <- list(\n  a = c(1, 2, 3),\n  b = c(\"a\", \"b\", \"c\", \"d\"))\nfor (item in loop_list) {\n  cat(\"item:\\n length:\", length(item),\n    \"\\n class: \", class(item), \"\\n\")\n}\n## item: \n##   length: 3  \n##   class:  numeric  \n## item: \n##   length: 4  \n##   class:  character \n\n```", "```py\ndf <- data.frame(\n  x = c(1, 2, 3),\n  y = c(\"A\", \"B\", \"C\"),\nstringsAsFactors = FALSE)\nfor (col in df) {\n  str(col)\n}\n##  num [1:3] 1 2 3 \n##  chr [1:3] \"A\" \"B\" \"C\" \n\n```", "```py\nfor (i in 1:nrow(df)) {\n  row <- df[i,]\n  cat(\"row\", i, \"\\n\")\n  str(row)\n  cat(\"\\n\")\n}\n## row 1  \n## 'data.frame':    1 obs. of  2 variables: \n##  $ x: num 1 \n##  $ y: chr \"A\" \n##  \n## row 2  \n## 'data.frame':    1 obs. of  2 variables: \n##  $ x: num 2 \n##  $ y: chr \"B\" \n##  \n## row 3  \n## 'data.frame':    1 obs. of  2 variables: \n##  $ x: num 3 \n##  $ y: chr \"C\" \n\n```", "```py\ns <- 0\nfor (i in 1:100) {\n  s <- s + i\n}\ns\n## [1] 5050 \n\n```", "```py\nset.seed(123) \nx <- numeric(1000) \nfor (t in 1:(length(x) - 1)) { \n  x[[t + 1]] <- x[[t]] + rnorm(1, 0, 0.1) \n} \nplot(x, type = \"s\", main = \"Random walk\", xlab = \"t\") \n\n```", "```py\nsum100 <- sum(1:100) \nrandom_walk <- cumsum(rnorm(1000, 0, 0.1)) \n\n```", "```py\nfor (i in 1:5) {\n  if (i == 3) break\n  cat(\"message \", i, \"\\n\")\n}\n## message 1\n## message 2\n```", "```py\nm <- integer()\nfor (i in 1000:1100) {\n  if ((i ^ 2) %% 11 == (i ^ 3) %% 17) {\n    m <- c(m, i)\n}\n}\nm\n## [1] 1055 1061 1082 1086 1095 \n\n```", "```py\nfor (i in 1000:1100) {\n  if ((i ^ 2) %% 11 == (i ^ 3) %% 17) break\n}\ni\n## [1] 1055 \n\n```", "```py\nfor (i in 1:5) {\n  if (i == 3) next\n  cat(\"message \", i, \"\\n\")\n}\n## message  1  \n## message  2  \n## message  4  \n## message  5 \n\n```", "```py\nx <- c(\"a\", \"b\", \"c\")\ncombx <- character()\nfor (c1 in x) {\n  for (c2 in x) {\n    combx <- c(combx, paste(c1, c2, sep = \",\", collapse = \"\"))\n  }\n}\ncombx\n## [1] \"a,a\" \"a,b\" \"a,c\" \"b,a\" \"b,b\" \"b,c\" \"c,a\" \"c,b\" \"c,c\" \n\n```", "```py\ncombx2 <- character()\nfor (c1 in x) {\n  for (c2 in x) {\n    if (c1 == c2) next\n    combx2 <- c(combx2, paste(c1, c2, sep = \",\", collapse = \"\"))\n  }\n}\ncombx2\n## [1] \"a,b\" \"a,c\" \"b,a\" \"b,c\" \"c,a\" \"c,b\" \n\n```", "```py\nif (c1 != c2) { \ncombx2 <- c(combx2, paste(c1, c2, sep = \",\", collapse = \"\"))\n}\n```", "```py\ncombn(c(\"a\", \"b\", \"c\"), 2)\n##      [,1] [,2] [,3] \n## [1,] \"a\"  \"a\"  \"b\"  \n## [2,] \"b\"  \"c\"  \"c\" \n\n```", "```py\nexpand.grid(n = c(1, 2, 3), x = c(\"a\", \"b\"))\n##   n x \n## 1 1 a \n## 2 2 a \n## 3 3 a \n## 4 1 b \n## 5 2 b \n## 6 3 b \n\n```", "```py\nx <- 0\nwhile (x <= 5) {\n  cat(x, \" \", sep = \"\")\n  x <- x + 1\n}\n## 0 1 2 3 4 5 \n\n```", "```py\nx <- 0\nwhile (TRUE) {\n  x <- x + 1\n  if (x == 4) break\n  else if (x == 2) next\n  else cat(x, '\\n')\n}\n## 1  \n## 3 \n\n```", "```py\nres <- dbSendQuery(con, \"SELECT * FROM table1 WHERE type = 1\") \nwhile (!dbHasCompleted(res)) { \n  chunk <- dbFetch(res, 10000) \n  process(chunk) \n} \n\n```", "```py\nx <- 0\nrepeat {\n  x <- x + 1\n  if (x == 4) break\n  else if (x == 2) next\n  else cat(x, '\\n')\n}\n## 1  \n## 3 \n\n```"]