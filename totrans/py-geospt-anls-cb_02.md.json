["```py\n{\n\"type\": \"FeatureCollection\",\n\"crs\": { \"type\": \"name\", \"properties\": { \"name\": \"urn:ogc:def:crs:OGC:1.3:CRS84\" } },\n…\n```", "```py\n/ch01/\n–------/code\n–------/geodata\n–------/working\n/ch02/\n–------/code\n–------/geodata\n–------/working\n...\n```", "```py\n    #!/usr/bin/env python\n    # -*- coding: utf-8 -*-\n\n    from osgeo import ogr\n    shp_driver = ogr.GetDriverByName('ESRI Shapefile')\n    shp_dataset = shp_driver.Open(r'../geodata/schools.shp')\n    shp_layer = shp_dataset.GetLayer()\n    shp_srs = shp_layer.GetSpatialRef()\n    print shp_srs\n    ```", "```py\n    $ python ch02-01-show_shp_srs.py\n    PROJCS[\"NAD_1983_UTM_Zone_10N\",\n     GEOGCS[\"GCS_North_American_1983\",\n     DATUM[\"North_American_Datum_1983\",\n     SPHEROID[\"GRS_1980\",6378137,298.257222101]],\n     PRIMEM[\"Greenwich\",0],\n     UNIT[\"Degree\",0.017453292519943295]],\n     PROJECTION[\"Transverse_Mercator\"],\n     PARAMETER[\"latitude_of_origin\",0],\n     PARAMETER[\"central_meridian\",-123],\n     PARAMETER[\"scale_factor\",0.9996],\n     PARAMETER[\"false_easting\",500000],\n     PARAMETER[\"false_northing\",0],\n     UNIT[\"Meter\",1]]\n\n    ```", "```py\n    #!/usr/bin/env python\n    # -*- coding: utf-8 -*-\n\n    import json\n\n    geojson_yes_crs = '../geodata/schools.geojson'\n    geojson_no_crs = '../geodata/golfcourses_bc.geojson'\n\n    with open(geojson_no_crs) as my_geojson:    \n        data = json.load(my_geojson)\n\n    # check if crs is in the data python dictionary data\n    # if yes print the crs to screen\n    # else print NO to screen and print geojson data type\n    if 'crs' in data:\n        print \"the crs is : \" + data['crs']['properties']['name']\n    else:\n        print \"++++++ no crs tag in file+++++\"\n        print \"++++++ assume EPSG:4326 ++++++\"\n        if \"type\" in data:\n            print \"current GeoJSON data type is :\" + data['type']\n    ```", "```py\n    $ python ch02_02_show_geojson_crs.py\n    ++++++ no crs tag in file+++++\n     ++++++ assume EPSG:4326 ++++++\n    current GeoJSON data type is :FeatureCollection\n\n    ```", "```py\n    $ python ch02_02_show_geojson_crs.py\n    the crs is : urn:ogc:def:crs:EPSG::26910\n\n    ```", "```py\n    from osgeo import ogr\n\n    ```", "```py\n    shp_driver = ogr.GetDriverByName('ESRI Shapefile')\n\n    ```", "```py\n    shp_dataset = shp_driver.Open(r'../geodata/schools.shp')\n\n    ```", "```py\n    shp_layer = shp_dataset.GetLayer()\n\n    ```", "```py\n    shp_srs = shp_layer.GetSpatialRef()\n\n    ```", "```py\n    print shp_srs\n\n    ```", "```py\n    GEOGCS[\"GCS_WGS_1984\",DATUM[\"D_WGS_1984\",SPHEROID[\"WGS_1984\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"Degree\",0.017453292519943295]]\n    ```", "```py\n    GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.01745329251994328,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]]\n    ```", "```py\n    +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs\n\n    ```", "```py\nPip install owslib\n\n```", "```py\n    #!/usr/bin/env python\n    # -*- coding: utf-8 -*-\n\n    from owslib.wms import WebMapService\n\n    url = \"http://ogc.bgs.ac.uk/cgi-bin/BGS_1GE_Geology/wms\"\n\n    get_wms_url = WebMapService(url)\n\n    crs_list = get_wms_url.contents['GBR_Kilmarnock_BGS_50K_CompressibleGround'].crsOptions\n\n    print crs_list\n    ```", "```py\n    $ python ch02_03_show_wms_srs.py\n    ['EPSG:3857', 'EPSG:3034', 'EPSG:4326', 'EPSG:3031', 'EPSG:27700', 'EPSG:900913', 'EPSG:3413', 'CRS:84', 'EPSG:4258']\n\n    ```", "```py\n    #!/usr/bin/env python\n    # -*- coding: utf-8 -*-\n\n    import urllib\n    import os\n\n    def get_epsg_code(epsg):\n       \"\"\"\n       Get the ESRI formatted .prj definition\n       usage get_epsg_code(4326)\n\n       We use the http://spatialreference.org/ref/epsg/4326/esriwkt/\n       \"\"\"\n\n       f=urllib.urlopen(\"http://spatialreference.org/ref/epsg/{0}/esriwkt/\".format(epsg))\n       return (f.read())\n\n    # Shapefile filename must equal the new .prj filename\n    shp_filename = \"../geodata/UTM_Zone_Boundaries\"\n\n    # Here we write out a new .prj file with the same name\n    # as our Shapefile named \"schools\" in this example\n\n    with open(\"../geodata/{0}.prj\".format(shp_filename), \"w\") as prj:\n        epsg_code = get_epsg_code(4326)\n        prj.write(epsg_code)\n        print \"done writing projection definition to EPSG: \" + epsg_code \n    ```", "```py\n    $ python ch02_04_write_prj_file.py\n\n    ```", "```py\n    done writing projection definition UTM_Zone_Boundaries.prj to EPSG:4326\n\n    ```", "```py\n    #!/usr/bin/env python\n    # -*- coding: utf-8 -*-\n\n    import urllib\n    import os\n    from osgeo import osr\n\n    def create_epsg_wkt_esri(epsg):\n        \"\"\"\n        Get the ESRI formatted .prj definition\n        usage create_epsg_wkt(4326)\n\n        We use the http://spatialreference.org/ref/epsg/4326/esriwkt/\n\n        \"\"\"\n        spatial_ref = osr.SpatialReference()\n        spatial_ref.ImportFromEPSG(epsg)\n\n        # transform projection format to ESRI .prj style\n        spatial_ref.MorphToESRI()\n\n        # export to WKT\n        wkt_epsg = spatial_ref.ExportToWkt()\n\n        return wkt_epsg\n\n    # Optional method to get EPGS as wkt from a web service\n    def get_epsg_code(epsg):\n        \"\"\"\n        Get the ESRI formatted .prj definition\n        usage get_epsg_code(4326)\n\n        We use the http://spatialreference.org/ref/epsg/4326/esriwkt/\n\n        \"\"\"\n        web_url = \"http://spatialreference.org/ref/epsg/{0}/esriwkt/\".format(epsg)\n        f = urllib.urlopen(web_url)\n        return f.read()\n\n    # Here we write out a new .prj file with the same name\n    # as our Shapefile named \"schools\" in this example\n    def write_prj_file(folder_name, shp_filename, epsg):\n        \"\"\"\n        input the name of a Shapefile without the .shp\n        input the EPSG code number as an integer\n\n        usage  write_prj_file(<ShapefileName>,<EPSG CODE>)\n\n        \"\"\"\n\n        in_shp_name = \"/{0}.prj\".format(shp_filename)\n        full_path_name = folder_name + in_shp_name\n\n        with open(full_path_name, \"w\") as prj:\n            epsg_code = create_epsg_wkt_esri(epsg)\n            prj.write(epsg_code)\n            print (\"done writing projection definition : \" + epsg_code)\n\n    def run_batch_define_prj(folder_location, epsg):\n        \"\"\"\n        input path to the folder location containing\n        all of your Shapefiles\n\n        usage  run_batch_define_prj(\"../geodata/no_prj\")\n\n        \"\"\"\n\n        # variable to hold our list of shapefiles\n        shapefile_list = []\n\n        # loop through the directory and find shapefiles\n        # for each found shapefile write it to a list\n        # remove the .shp ending so we do not end up with \n        # file names such as .shp.prj\n        for shp_file in os.listdir(folder_location):\n            if shp_file.endswith('.shp'):\n                filename_no_ext = os.path.splitext(shp_file)[0]\n                shapefile_list.append(filename_no_ext)\n\n        # loop through the list of shapefiles and write\n        # the new .prj for each shapefile\n        for shp in shapefile_list:\n            write_prj_file(folder_location, shp, epsg)\n\n    # Windows users please use the full path\n    # Linux users can also use full path        \n    run_batch_define_prj(\"c:/02_DEV/01_projects/04_packt/ch02/geodata/no_prj/\", 4326)\n    ```", "```py\n    #!/usr/bin/env python\n    # -*- coding: utf-8 -*-\n\n    import ogr\n    import osr\n    import os\n\n    shp_driver = ogr.GetDriverByName('ESRI Shapefile')\n\n    # input SpatialReference\n    input_srs = osr.SpatialReference()\n    input_srs.ImportFromEPSG(4326)\n\n    # output SpatialReference\n    output_srs = osr.SpatialReference()\n    output_srs.ImportFromEPSG(3857)\n\n    # create the CoordinateTransformation\n    coord_trans = osr.CoordinateTransformation(input_srs, output_srs)\n\n    # get the input layer\n    input_shp = shp_driver.Open(r'../geodata/UTM_Zone_Boundaries.shp')\n    in_shp_layer = input_shp.GetLayer()\n\n    # create the output layer\n    output_shp_file = r'../geodata/UTM_Zone_Boundaries_3857.shp'\n    # check if output file exists if yes delete it\n    if os.path.exists(output_shp_file):\n        shp_driver.DeleteDataSource(output_shp_file)\n\n    # create a new Shapefile object\n    output_shp_dataset = shp_driver.CreateDataSource(output_shp_file)\n\n    # create a new layer in output Shapefile and define its geometry type\n    output_shp_layer = output_shp_dataset.CreateLayer(\"basemap_3857\", geom_type=ogr.wkbMultiPolygon)\n\n    # add fields to the new output Shapefile\n    # get list of attribute fields\n    # create new fields for output\n    in_layer_def = in_shp_layer.GetLayerDefn()\n    for i in range(0, in_layer_def.GetFieldCount()):\n        field_def = in_layer_def.GetFieldDefn(i)\n        output_shp_layer.CreateField(field_def)\n\n    # get the output layer's feature definition\n    output_layer_def = output_shp_layer.GetLayerDefn()\n\n    # loop through the input features\n    in_feature = in_shp_layer.GetNextFeature()\n    while in_feature:\n        # get the input geometry\n        geom = in_feature.GetGeometryRef()\n        # reproject the geometry\n        geom.Transform(coord_trans)\n        # create a new feature\n        output_feature = ogr.Feature(output_layer_def)\n        # set the geometry and attribute\n        output_feature.SetGeometry(geom)\n        for i in range(0, output_layer_def.GetFieldCount()):\n            output_feature.SetField(output_layer_def.GetFieldDefn(i).GetNameRef(), in_feature.GetField(i))\n        # add the feature to the shapefile\n        output_shp_layer.CreateFeature(output_feature)\n        # destroy the features and get the next input feature\n        output_feature.Destroy()\n        in_feature.Destroy()\n        in_feature = in_shp_layer.GetNextFeature()\n\n    # close the shapefiles\n    input_shp.Destroy()\n    output_shp_dataset.Destroy()\n\n    spatialRef = osr.SpatialReference()\n    spatialRef.ImportFromEPSG(3857)\n\n    spatialRef.MorphToESRI()\n    prj_file = open('UTM_Zone_Boundaries.prj', 'w')\n    prj_file.write(spatialRef.ExportToWkt())\n    prj_file.close()\n    ```", "```py\n    $ python ch02_06_re_project_shp.py\n\n    ```", "```py\nogr2ogr -t_srs EPSG:4326 outputwith4236.shp input.shp\n\n```"]