["```py\n> library(hlfights)\n> JFK <- hflights[which(hflights$Dest == 'JFK'),\n+                 c('TaxiIn', 'TaxiOut')]\n\n```", "```py\n> JFK <- subset(hflights, Dest == 'JFK', select = c(TaxiIn, TaxiOut))\n\n```", "```py\n> par(mfrow = c(1, 2))\n> qqnorm(JFK$TaxiIn, ylab = 'TaxiIn')\n> qqline(JFK$TaxiIn)\n> qqnorm(JFK$TaxiOut, ylab = 'TaxiOut')\n> qqline(JFK$TaxiOut)\n\n```", "```py\n> shapiro.test(JFK$TaxiIn)\n\n Shapiro-Wilk normality test\n\ndata:  JFK$TaxiIn\nW = 0.8387, p-value < 2.2e-16\n\n```", "```py\n> JFK <- na.omit(JFK)\n> library(MVN)\n> mardiaTest(JFK)\n Mardia's Multivariate Normality Test \n--------------------------------------- \n data : JFK \n\n g1p            : 20.84452 \n chi.skew       : 2351.957 \n p.value.skew   : 0 \n\n g2p            : 46.33207 \n z.kurtosis     : 124.6713 \n p.value.kurt   : 0 \n\n chi.small.skew : 2369.368 \n p.value.small  : 0 \n\n Result          : Data is not multivariate normal. \n---------------------------------------\n\n```", "```py\n> hzTest(JFK)\n Henze-Zirkler's Multivariate Normality Test \n--------------------------------------------- \n data : JFK \n\n HZ      : 42.26252 \n p-value : 0 \n\n Result  : Data is not multivariate normal. \n--------------------------------------------- \n\n> roystonTest(JFK)\n Royston's Multivariate Normality Test \n--------------------------------------------- \n data : JFK \n\n H       : 264.1686 \n p-value : 4.330916e-58 \n\n Result  : Data is not multivariate normal. \n---------------------------------------------\n\n```", "```py\n> mvt <- roystonTest(JFK, qqplot = TRUE)\n\n```", "```py\n> par(mfrow = c(1, 2))\n> mvnPlot(mvt, type = \"contour\", default = TRUE)\n> mvnPlot(mvt, type = \"persp\", default = TRUE)\n\n```", "```py\n> set.seed(42)\n> mvt <- roystonTest(MASS::mvrnorm(100, mu = c(0, 0),\n+          Sigma = matrix(c(10, 3, 3, 2), 2)))\n> mvnPlot(mvt, type = \"contour\", default = TRUE)\n> mvnPlot(mvt, type = \"persp\", default = TRUE)\n\n```", "```py\n> hflights_numeric <- hflights[, which(sapply(hflights, is.numeric))]\n> cor(hflights_numeric, use = \"pairwise.complete.obs\")\n\n```", "```py\n> str(cor(hflights_numeric, use = \"pairwise.complete.obs\"))\n num [1:16, 1:16] NA NA NA NA NA NA NA NA NA NA ...\n - attr(*, \"dimnames\")=List of 2\n ..$ : chr [1:16] \"Year\" \"Month\" \"DayofMonth\" \"DayOfWeek\" ...\n ..$ : chr [1:16] \"Year\" \"Month\" \"DayofMonth\" \"DayOfWeek\" ...\n\n```", "```py\n> hflights_numeric <- hflights[,which(\n+     sapply(hflights, function(x)\n+         is.numeric(x) && var(x, na.rm = TRUE) != 0))]\n\n```", "```py\n> table(is.na(cor(hflights_numeric, use = \"pairwise.complete.obs\")))\nFALSE  TRUE \n 209    16\n\n```", "```py\nWarning message:\nIn cor(hflights_numeric, use = \"pairwise.complete.obs\") :\n the standard deviation is zero\n\n```", "```py\n> library(ellipse)\n> plotcorr(cor(hflights_numeric, use = \"pairwise.complete.obs\"))\n\n```", "```py\n> plotcorr(cor(data.frame(\n+     1:10,\n+     1:10 + runif(10),\n+     1:10 + runif(10) * 5,\n+     runif(10),\n+     10:1,\n+     check.names = FALSE)))\n\n```", "```py\n> cor(hflights$FlightNum, hflights$Month)\n[1] 0.2057641\n\n```", "```py\n> library(psych)\n> KMO(cor(hflights_numeric, use = \"pairwise.complete.obs\"))\nError in solve.default(r) : \n system is computationally singular: reciprocal condition number = 0\nIn addition: Warning message:\nIn cor(hflights_numeric, use = \"pairwise.complete.obs\") :\n the standard deviation is zero\nmatrix is not invertible, image not found\nKaiser-Meyer-Olkin factor adequacy\nCall: KMO(r = cor(hflights_numeric, use = \"pairwise.complete.obs\"))\nOverall MSA = NA\nMSA for each item = \n Month    DayofMonth     DayOfWeek \n 0.5        0.5        0.5 \n DepTime      ArrTime     FlightNum \n 0.5        NA        0.5 \nActualElapsedTime      AirTime     ArrDelay \n NA        NA        NA \n DepDelay     Distance      TaxiIn \n 0.5        0.5        NA \n TaxiOut     Cancelled     Diverted \n 0.5        NA        NA\n\n```", "```py\n> cor(hflights_numeric[, c('Cancelled', 'AirTime')])\n Cancelled AirTime\nCancelled         1      NA\nAirTime          NA       1\n\n```", "```py\n> cancelled <- which(hflights_numeric$Cancelled == 1)\n> table(hflights_numeric$AirTime[cancelled], exclude = NULL)\n<NA> \n2973\n\n```", "```py\n> table(hflights_numeric$Cancelled)\n 0      1 \n224523   2973\n\n```", "```py\n> hflights_numeric <- subset(hflights_numeric, select = -Cancelled)\n\n```", "```py\n> which(is.na(cor(hflights_numeric, use = \"pairwise.complete.obs\")),\n+   arr.ind = TRUE)\n row col\nDiverted           14   7\nDiverted           14   8\nDiverted           14   9\nActualElapsedTime   7  14\nAirTime             8  14\nArrDelay            9  14\n\n```", "```py\n> hflights_numeric <- subset(hflights_numeric, select = -Diverted)\n> KMO(cor(hflights_numeric[, -c(14)], use = \"pairwise.complete.obs\"))\nKaiser-Meyer-Olkin factor adequacy\nCall: KMO(r = cor(hflights_numeric[, -c(14)], use = \"pairwise.complete.obs\"))\nOverall MSA =  0.36\nMSA for each item = \n Month        DayofMonth         DayOfWeek \n 0.42              0.37              0.35 \n DepTime           ArrTime         FlightNum \n 0.51              0.49              0.74 \nActualElapsedTime           AirTime          ArrDelay \n 0.40              0.40              0.39 \n DepDelay          Distance            TaxiIn \n 0.38              0.67              0.06 \n TaxiOut \n 0.06\n\n```", "```py\n> KMO(mtcars)\nKaiser-Meyer-Olkin factor adequacy\nCall: KMO(r = mtcars)\nOverall MSA =  0.83\nMSA for each item = \n mpg  cyl disp   hp drat   wt qsec   vs   am gear carb \n0.93 0.90 0.76 0.84 0.95 0.74 0.74 0.91 0.88 0.85 0.62\n\n```", "```py\n> cortest.bartlett(cor(mtcars))\n$chisq\n[1] 1454.985\n\n$p.value\n[1] 3.884209e-268\n\n$df\n[1] \n55\n\n```", "```py\n> prcomp(mtcars, scale = TRUE)\nStandard deviations:\n [1] 2.57068 1.62803 0.79196 0.51923 0.47271 0.46000 0.36778 0.35057\n [9] 0.27757 0.22811 0.14847\n\nRotation:\n PC1       PC2       PC3        PC4       PC5       PC6\nmpg   -0.36253  0.016124 -0.225744 -0.0225403  0.102845 -0.108797\ncyl    0.37392  0.043744 -0.175311 -0.0025918  0.058484  0.168554\ndisp   0.36819 -0.049324 -0.061484  0.2566079  0.393995 -0.336165\nhp     0.33006  0.248784  0.140015 -0.0676762  0.540047  0.071436\ndrat  -0.29415  0.274694  0.161189  0.8548287  0.077327  0.244497\nwt     0.34610 -0.143038  0.341819  0.2458993 -0.075029 -0.464940\nqsec  -0.20046 -0.463375  0.403169  0.0680765 -0.164666 -0.330480\nvs    -0.30651 -0.231647  0.428815 -0.2148486  0.599540  0.194017\nam    -0.23494  0.429418 -0.205767 -0.0304629  0.089781 -0.570817\ngear  -0.20692  0.462349  0.289780 -0.2646905  0.048330 -0.243563\ncarb   0.21402  0.413571  0.528545 -0.1267892 -0.361319  0.183522\n PC7        PC8       PC9      PC10      PC11\nmpg   0.367724 -0.7540914  0.235702  0.139285 -0.1248956\ncyl   0.057278 -0.2308249  0.054035 -0.846419 -0.1406954\ndisp  0.214303  0.0011421  0.198428  0.049380  0.6606065\nhp   -0.001496 -0.2223584 -0.575830  0.247824 -0.2564921\ndrat  0.021120  0.0321935 -0.046901 -0.101494 -0.0395302\nwt   -0.020668 -0.0085719  0.359498  0.094394 -0.5674487\nqsec  0.050011 -0.2318400 -0.528377 -0.270673  0.1813618\nvs   -0.265781  0.0259351  0.358583 -0.159039  0.0084146\nam   -0.587305 -0.0597470 -0.047404 -0.177785  0.0298235\ngear  0.605098  0.3361502 -0.001735 -0.213825 -0.0535071\ncarb -0.174603 -0.3956291  0.170641  0.072260  0.3195947\n\n```", "```py\n> summary(prcomp(mtcars, scale = TRUE))\nImportance of components:\n PC1   PC2   PC3    PC4    PC5    PC6    PC7\nStandard deviation     2.571 1.628 0.792 0.5192 0.4727 0.4600 0.3678\nProportion of Variance 0.601 0.241 0.057 0.0245 0.0203 0.0192 0.0123\nCumulative Proportion  0.601 0.842 0.899 0.9232 0.9436 0.9628 0.9751\n PC8   PC9    PC10  PC11\nStandard deviation     0.3506 0.278 0.22811 0.148\nProportion of Variance 0.0112 0.007 0.00473 0.002\nCumulative Proportion  0.9863 0.993 0.99800 1.000\n\n```", "```py\n> sum(prcomp(scale(mtcars))$sdev^2)\n[1] 11\n\n```", "```py\n> prcomp(scale(mtcars))$sdev^2\n [1] 6.608400 2.650468 0.627197 0.269597 0.223451 0.211596 0.135262\n [8] 0.122901 0.077047 0.052035 0.022044\n\n```", "```py\n> (6.6 + 2.65) / 11\n[1] 0.8409091\n\n```", "```py\n> VSS.scree(cor(mtcars))\n\n```", "```py\n> scree(cor(mtcars))\n\n```", "```py\n> fa.parallel(mtcars)\n\n```", "```py\nParallel analysis suggests that the number of factors = 2 \nand the number of components =  2\n\n```", "```py\n> pc <- prcomp(mtcars, scale = TRUE)\n> head(pc$x[, 1:2])\n PC1      PC2\nMazda RX4         -0.646863  1.70811\nMazda RX4 Wag     -0.619483  1.52562\nDatsun 710        -2.735624 -0.14415\nHornet 4 Drive    -0.306861 -2.32580\nHornet Sportabout  1.943393 -0.74252\nValiant           -0.055253 -2.74212\n\n```", "```py\n> head(scale(mtcars) %*% pc$rotation[, 1:2])\n PC1      PC2\nMazda RX4         -0.646863  1.70811\nMazda RX4 Wag     -0.619483  1.52562\nDatsun 710        -2.735624 -0.14415\nHornet 4 Drive    -0.306861 -2.32580\nHornet Sportabout  1.943393 -0.74252\nValiant           -0.055253 -2.74212\n\n```", "```py\n> summary(pc$x[, 1:2])\n PC1              PC2 \n Min.   :-4.187   Min.   :-2.742 \n 1st Qu.:-2.284   1st Qu.:-0.826 \n Median :-0.181   Median :-0.305 \n Mean   : 0.000   Mean   : 0.000 \n 3rd Qu.: 2.166   3rd Qu.: 0.672 \n Max.   : 3.892   Max.   : 4.311 \n> apply(pc$x[, 1:2], 2, sd)\n PC1    PC2 \n2.5707 1.6280 \n> pc$sdev[1:2]\n[1] 2.5707 1.6280\n\n```", "```py\n> round(cor(pc$x))\n PC1 PC2 PC3 PC4 PC5 PC6 PC7 PC8 PC9 PC10 PC11\nPC1    1   0   0   0   0   0   0   0   0    0    0\nPC2    0   1   0   0   0   0   0   0   0    0    0\nPC3    0   0   1   0   0   0   0   0   0    0    0\nPC4    0   0   0   1   0   0   0   0   0    0    0\nPC5    0   0   0   0   1   0   0   0   0    0    0\nPC6    0   0   0   0   0   1   0   0   0    0    0\nPC7    0   0   0   0   0   0   1   0   0    0    0\nPC8    0   0   0   0   0   0   0   1   0    0    0\nPC9    0   0   0   0   0   0   0   0   1    0    0\nPC10   0   0   0   0   0   0   0   0   0    1    0\nPC11   0   0   0   0 \n0   0   0   0   0    0    1\n\n```", "```py\n> pc$rotation[, 1:2]\n PC1       PC2\nmpg  -0.36253  0.016124\ncyl   0.37392  0.043744\ndisp  0.36819 -0.049324\nhp    0.33006  0.248784\ndrat -0.29415  0.274694\nwt    0.34610 -0.143038\nqsec -0.20046 -0.463375\nvs   -0.30651 -0.231647\nam   -0.23494  0.429418\ngear -0.20692  0.462349\ncarb  0.21402  0.413571\n\n```", "```py\n> biplot(pc, cex = c(0.8, 1.2))\n> abline(h = 0, v = 0, lty = 'dashed')\n\n```", "```py\n> cor(mtcars, pc$x[, 1:2])\n PC1       PC2\nmpg  -0.93195  0.026251\ncyl   0.96122  0.071216\ndisp  0.94649 -0.080301\nhp    0.84847  0.405027\ndrat -0.75617  0.447209\nwt    0.88972 -0.232870\nqsec -0.51531 -0.754386\nvs   -0.78794 -0.377127\nam   -0.60396  0.699103\ngear -0.53192  0.752715\ncarb  0.55017  0.673304\n\n```", "```py\n> varimax(pc$rotation[, 1:2])\n$loadings\n PC1    PC2 \nmpg  -0.286 -0.223\ncyl   0.256  0.276\ndisp  0.312  0.201\nhp           0.403\ndrat -0.402 \nwt    0.356  0.116\nqsec  0.148 -0.483\nvs          -0.375\nam   -0.457  0.174\ngear -0.458  0.217\ncarb -0.106  0.454\n\n PC1   PC2\nSS loadings    1.000 1.000\nProportion Var 0.091 0.091\nCumulative Var 0.091 0.182\n\n$rotmat\n [,1]    [,2]\n[1,]  0.76067 0.64914\n[2,] -0.64914 0.76067\n\n```", "```py\n> pcv <- varimax(pc$rotation[, 1:2])$loadings\n> plot(scale(mtcars) %*% pcv, type = 'n',\n+     xlab = 'Transmission', ylab = 'Power')\n> text(scale(mtcars) %*% pcv, labels = rownames(mtcars))\n\n```", "```py\n> library(GPArotation)\n> promax(pc$rotation[, 1:2])\n$loadings\n\nLoadings:\n PC1    PC2 \nmpg  -0.252 -0.199\ncyl   0.211  0.258\ndisp  0.282  0.174\nhp           0.408\ndrat -0.416 \nwt    0.344 \nqsec  0.243 -0.517\nvs          -0.380\nam   -0.502  0.232\ngear -0.510  0.276\ncarb -0.194  0.482\n\n PC1   PC2\nSS loadings    1.088 1.088\nProportion Var 0.099 0.099\nCumulative Var 0.099 0.198\n\n$rotmat\n [,1]    [,2]\n[1,]  0.65862 0.58828\n[2,] -0.80871 0.86123\n\n> cor(promax(pc$rotation[, 1:2])$loadings)\n PC1      PC2\nPC1  1.00000 -0.23999\nPC2 -0.23999  1.00000\n\n```", "```py\n>\n library(jpeg)\n> t <- tempfile()\n> download.file('http://bit.ly/nasa-img', t)\ntrying URL 'http://bit.ly/nasa-img'\nContent type 'image/jpeg' length 853981 bytes (833 Kb)\nopened URL\n==================================================\ndownloaded 833 Kb\n\n>\n img <- readJPEG(t)\n> str(img)\n num [1:1009, 1:1345, 1:3] 0.431 0.42 0.463 0.486 0.49 ...\n\n```", "```py\n> h <- dim(img)[1]\n> w <- dim(img)[2]\n> m <- matrix(img, h*w)\n> str(m)\n num [1:1357105, 1:3] 0.431 0.42 0.463 0.486 0.49 ...\n\n```", "```py\n> pca <- prcomp(m)\n\n```", "```py\n> summary(pca)\nImportance of components:\n PC1    PC2     PC3\nStandard deviation     0.277 0.0518 0.00765\nProportion of Variance 0.965 0.0338 0.00074\nCumulative Proportion  0.965 0.9993 1.00000\n\n```", "```py\n> pca$rotation\n PC1      PC2      PC3\n[1,] -0.62188  0.71514  0.31911\n[2,] -0.57409 -0.13919 -0.80687\n[3,] -0.53261 -0.68498  0.49712\n\n```", "```py\n> extractColors <- function(x)\n+     rgb(x[1], x[2], x[3])\n\n```", "```py\n> (colors <- apply(abs(pca$rotation), 2, extractColors))\n PC1       PC2       PC3 \n\"#9F9288\" \"#B623AF\" \"#51CE7F\"\n\n```", "```py\n> pie(pca$sdev, col = colors, labels = colors)\n\n```", "```py\n> par(mfrow = c(1, 2), mar = rep(0, 4))\n> image(matrix(pca$x[, 1], h), col = gray.colors(100))\n> image(matrix(pca$x[, 2], h), col = gray.colors(100), yaxt = 'n')\n\n```", "```py\n> m <- subset(mtcars, select = c(mpg, cyl, hp, carb))\n\n```", "```py\n> (f <- fa(m))\nFactor Analysis using method =  minres\nCall: fa(r = m)\nStandardized loadings (pattern matrix) based upon correlation matrix\n MR1   h2   u2 com\nmpg  -0.87 0.77 0.23   1\ncyl   0.91 0.83 0.17   1\nhp    0.92 0.85 0.15   1\ncarb  0.69 0.48 0.52   1\n\n MR1\nSS loadings    2.93\nProportion Var 0.73\n\nMean item complexity =  1\nTest of the hypothesis that 1 factor is sufficient.\n\nThe degrees of freedom for the null model are  6 \nand the objective function was  3.44 with Chi Square of  99.21\nThe degrees of freedom for the model are 2\nand the objective function was  0.42 \n\nThe root mean square of the residuals (RMSR) is  0.07 \nThe df corrected root mean square of the residuals is  0.12 \n\nThe harmonic number of observations is  32\nwith the empirical chi square  1.92  with prob <  0.38 \nThe total number of observations was  32\nwith MLE Chi Square =  11.78  with prob <  0.0028 \n\nTucker Lewis Index of factoring reliability =  0.677\nRMSEA index =  0.42\nand the 90 % confidence intervals are  0.196 0.619\nBIC =  4.84\nFit based upon off diagonal values = 0.99\nMeasures of factor score adequacy \n MR1\nCorrelation of scores with factors             0.97\nMultiple R square of scores with factors       0.94\nMinimum correlation of possible factor scores  0.87\n\n```", "```py\n> fa.diagram(f)\n\n```", "```py\n> cor(f$scores, mtcars$disp)\n0.87595\n\n```", "```py\n> as.matrix(eurodist)[1:5, 1:5]\n Athens Barcelona Brussels Calais Cherbourg\nAthens         0      3313     2963   3175      3339\nBarcelona   3313         0     1318   1326      1294\nBrussels    2963      1318        0    204       583\nCalais      3175      1326      204      0       460\nCherbourg   3339      1294      583    460         0\n\n```", "```py\n> (mds <- cmdscale(eurodist))\n [,1]      [,2]\nAthens           2290.2747  1798.803\nBarcelona        -825.3828   546.811\nBrussels           59.1833  -367.081\nCalais            -82.8460  -429.915\nCherbourg        -352.4994  -290.908\nCologne           293.6896  -405.312\nCopenhagen        681.9315 -1108.645\nGeneva             -9.4234   240.406\nGibraltar       -2048.4491   642.459\nHamburg           561.1090  -773.369\nHook of Holland   164.9218  -549.367\nLisbon          -1935.0408    49.125\nLyons            -226.4232   187.088\nMadrid          -1423.3537   305.875\nMarseilles       -299.4987   388.807\nMilan             260.8780   416.674\nMunich            587.6757    81.182\nParis            -156.8363  -211.139\nRome              709.4133  1109.367\nStockholm         839.4459 -1836.791\nVienna            911.2305   205.930\n\n```", "```py\n> plot(mds)\n\n```", "```py\n> plot(mds, type = 'n')\n> text(mds[, 1], mds[, 2], labels(eurodist))\n\n```", "```py\n> mds <- cmdscale(dist(mtcars))\n> plot(mds, type = 'n')\n> text(mds[, 1], mds[, 2], rownames(mds))\n\n```"]