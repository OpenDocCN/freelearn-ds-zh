["```py\nN <- 1E5\ndata <- sample(1:30, size=N, replace=T)\nsystem.time({ \n  data_sq1 <- numeric(N)\n  for(j in 1:N) {\n    data_sq1[j] <- data[j]^2\n  } \n})\n##  user  system elapsed \n## 0.144   0.011   0.156 \nsystem.time(data_sq2 <- data^2)\n##  user  system elapsed \n##     0       0       0\n```", "```py\ndata <- rnorm(1E4*1000)\ndim(data) <- c(1E4,1000)\nsystem.time(data_sum1 <- apply(data, 1, sum)) \n##  user  system elapsed \n## 0.241   0.053   0.294 \nsystem.time(data_sum2 <- rowSums(data))\n##  user  system elapsed \n## 0.026   0.000   0.026\n```", "```py\n$ cd /Library/Frameworks/R.framework/Resources/lib\n$ ln -sf /System/Library/Frameworks/Accelerate.framework/Frameworks/vecLib.framework/Versions/Current/libBLAS.dylib libRblas.dylib\n```", "```py\ndata <- rnorm(1E7)\ndim(data) <- c(1E4, 1E3)\nsystem.time(data_mul <- t(data) %*% data)\n##  user  system elapsed \n## 7.123   0.015   7.136\nsystem.time(data_mul <- t(data) %*% data) # with optimized BLAS\n##  user  system elapsed \n## 1.304   0.005   0.726\n```", "```py\nN <- 1E4\ndata_series1 <- 1\nsystem.time({\n  for (j in 2:N) {\n    data_series1 <- c(data_series1,\n                      data_series1[j-1]+sample(-5:5, size=1))\n  }\n})\n##  user  system elapsed \n## 0.254   0.004   0.257 \ndata_series2 <- numeric(N)\ndata_series2[1] <- 1\nsystem.time({\n  for (j in 2:N) {\n    data_series2[j] <- data_series2[j-1]+sample(-5:5, size=1)\n  }\n})\n##  user  system elapsed \n## 0.066   0.003   0.068\n```", "```py\nN <- 1E5\ndata <- sample(1:30, size=N, replace=T)\ndata_rand1 <- list()\nsystem.time(for(i in 1:N) data_rand1[[i]] <- rnorm(data[i]))\n##   user  system elapsed \n## 33.891   1.241  35.120 \nsystem.time(data_rand2 <- lapply(data, rnorm))\n##  user  system elapsed \n## 0.597   0.037   0.633\n```", "```py\ndata_rand3 <- vector(\"list\", N)\nsystem.time(for(i in 1:N) data_rand3[[i]] <- rnorm(data[i]))\n##  user  system elapsed \n## 0.737   0.036   0.773\n```", "```py\nmicrobenchmark(data_rand2 <- lapply(data, rnorm),\n               for(i in 1:N) data_rand3[[i]] <- rnorm(data[i]))\n## Unit: milliseconds\n##                                              expr      min\n##                 data_rand2 <- lapply(data, rnorm) 441.1108\n##  for (i in 1:N) data_rand3[[i]] <- rnorm(data[i]) 531.1212\n##       lq     mean   median       uq      max neval\n## 459.9666 498.1296 477.4583 517.4329 634.7849   100\n## 555.8512 603.7997 581.5236 662.2536 745.4247   100\n```", "```py\ndata <- rnorm(1E4*1000)\ndim(data) <- c(1E4,1000)\nsystem.time(data_rs1 <- rowSums(data))\n##  user  system elapsed \n## 0.026   0.000   0.026 \ndata_df <- data.frame(data)\nsystem.time(data_rs2 <- rowSums(data_df))\n##  user  system elapsed \n## 0.060   0.015   0.076\n```", "```py\ndata <- rnorm(1E5*1000)\ndim(data) <- c(1E5,1000)\ndata_df <- data.frame(data)\nsystem.time(data_df[data_df$X100>0 & data_df$X200<0,])\n##  user  system elapsed \n## 2.436   0.221   2.656\n```", "```py\nsystem.time(data_df[which(data_df$X100>0 & data_df$X200<0),])\n##  user  system elapsed \n## 0.245   0.086   0.331\n```", "```py\ndata <- rnorm(1E6)\ndata_ls <- as.list(data)\nnames(data_ls) <- paste(\"V\", c(1:1E6), sep=\"\")\nindex_rand <- sample(1:1E6, size=1000, replace=T)\nindex <- paste(\"V\", index_rand, sep=\"\")\nlist_comptime <- sapply(index, FUN=function(x){\n  system.time(data_ls[[x]])[3]})\nsum(list_comptime)\n## [1] 6.144\nlibrary(hash)\ndata_h <- hash(names(data_ls), data)\nhash_comptime <- sapply(index, FUN=function(x){\n  system.time(data_h[[x]])[3]})\nsum(hash_comptime)\n## [1] 0.308\n```", "```py\ndata <- rnorm(1E4*100)\ndim(data) <- c(1E4,100)\ndist_data <- dist(data)\nsystem.time(hc_data <- hclust(dist_data))\n##  user  system elapsed \n## 3.488   0.200   4.081 \nlibrary(fastcluster)\nsystem.time(hc_data <- hclust(dist_data))\n##  user  system elapsed \n## 1.972   0.123   2.127\n```", "```py\ndata <- rnorm(1E5*100)\ndim(data) <- c(1E5,100)\nsystem.time(prcomp_data <- prcomp(data))\n##  user  system elapsed \n## 4.101   0.091   4.190 \nsystem.time(princomp_data <- princomp(data))\n##  user  system elapsed \n## 2.505   0.071   2.576 \n```"]