- en: Chapter 3. Editing Vector Data
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 3 章。编辑向量数据
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下配方：
- en: Creating a vector layer in memory
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在内存中创建向量层
- en: Adding a point feature to a vector layer
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向向量层添加点要素
- en: Adding a line feature to a vector layer
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向向量层添加线要素
- en: Adding a polygon feature to a vector layer
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向向量层添加多边形要素
- en: Adding a set of attributes to a vector layer
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向向量层添加一组属性
- en: Adding a field to a vector layer
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向向量层添加字段
- en: Joining a shapefile attribute table to a CSV file
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 shapefile 属性表连接到 CSV 文件
- en: Moving vector layer geometry
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动向量层几何形状
- en: Changing a vector layer attribute
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改向量层属性
- en: Deleting vector layer geometry
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除向量层几何形状
- en: Deleting a vector layer field
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除向量层字段
- en: Deleting vector layer attributes
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除向量层属性
- en: Reprojecting a vector layer
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重投影向量层
- en: Converting a shapefile to Keyhole Markup Language (KML)
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 shapefile 转换为 Keyhole 标记语言 (KML)
- en: Merging shapefiles
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 合并 shapefile
- en: Splitting a shapefile
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分割 shapefile
- en: Generalizing a vector layer
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通用化向量层
- en: Dissolving vector shapes
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 溶解向量形状
- en: Performing a union on vector shapes
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在向量形状上执行联合操作
- en: Rasterizing a vector layer
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向量层栅格化
- en: Introduction
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: This chapter details how to edit QGIS vector data using the Python API. The
    `QgsVectorLayer` object contains the basics of adding, editing, and deleting features.
    All other geospatial operations are accessed through the **Processing Toolbox**
    or even through custom scripts.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 本章详细介绍了如何使用 Python API 编辑 QGIS 向量数据。`QgsVectorLayer` 对象包含了添加、编辑和删除要素的基本功能。所有其他地理空间操作都可以通过
    **处理工具箱** 或甚至通过自定义脚本来访问。
- en: Creating a vector layer in memory
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在内存中创建向量层
- en: Sometimes, you need to create a temporary data set for quick output or as an
    intermediate step in a more complex operation without the overhead of actually
    writing a file to disk. PyQGIS employs **memory layers** that allow you to create
    a complete vector data set, including the geometry, fields, and attributes, virtually.
    Once the memory layer is created, you can work with it in the same way you would
    work with a vector layer loaded from disk.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，你需要创建一个临时数据集以快速输出，或者在更复杂的操作中作为中间步骤，而不需要实际将文件写入磁盘。PyQGIS 使用 **内存层** 允许你创建一个完整的向量数据集，包括几何形状、字段和属性，虚拟地。一旦创建了内存层，你就可以像处理从磁盘加载的向量层一样处理它。
- en: Getting ready
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe entirely runs inside the PyQGIS console, so no preparation or external
    resources are required.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方完全在 PyQGIS 控制台中运行，因此不需要准备或外部资源。
- en: How to do it...
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'We will create a `Point` vector layer, named `Layer 1` with a few fields and
    then validate it:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个名为 `Layer 1` 的 `Point` 向量层，包含一些字段，然后验证它：
- en: Start QGIS.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 QGIS。
- en: From the **Plugins** menu, select **Python Console**.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **插件** 菜单中选择 **Python 控制台**。
- en: 'In the Python console, create a `QgsVectorLayer`, including fields, and specify
    it as a memory data provider:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Python 控制台中创建一个 `QgsVectorLayer`，包括字段，并将其指定为内存数据提供者：
- en: '[PRE0]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, validate the layer and ensure that the console returns `True`:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，验证层并确保控制台返回 `True`：
- en: '[PRE1]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How it works...
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `QgsVectorLayer` requires three arguments. The last argument specifies the
    type, which in this case is `memory`. The second argument specifies the layer
    name. Normally, the first argument is the path to the file on disk, which is used
    to create the layer. In the case of the memory layer, the first argument becomes
    the construction string for the layer. The format uses query parameters that follow
    the convention `key = value`. We first specify the coordinate reference system
    and then specify the fields we want. In this case, we specify the first field,
    a string for city names, and then an integer field for population.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`QgsVectorLayer` 需要三个参数。最后一个参数指定类型，在这种情况下是 `memory`。第二个参数指定图层名称。通常，第一个参数是磁盘上文件的路径，用于创建图层。在内存层的情况下，第一个参数成为图层的构建字符串。该格式使用遵循
    `key = value` 约定的查询参数。我们首先指定坐标参考系统，然后指定我们想要的字段。在这种情况下，我们指定第一个字段，一个用于城市名称的字符串字段，然后是一个用于人口的整数字段。'
- en: There's more…
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: You can easily see how describing a layer's attribute table structure in a string
    can become unwieldy. You can also use a Python-ordered dictionary to build the
    string dynamically, as shown in the following steps.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以很容易地看到如何用字符串描述图层属性表结构可能会变得难以管理。你还可以使用 Python-有序字典动态构建字符串，如下面的步骤所示。
- en: 'First, you need to import the `OrderedDict` container, which remembers the
    order in which keys are inserted:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，你需要导入 `OrderedDict` 容器，它记得键插入的顺序：
- en: '[PRE2]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then, build an ordered dictionary that contains attribute names and types:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，构建一个包含属性名称和类型的有序字典：
- en: '[PRE3]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next, build a string by joining the output of a Python list comprehension that
    loops through the ordered dictionary:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，通过连接一个Python列表推导式的输出构建一个字符串，该列表推导式遍历有序字典：
- en: '[PRE4]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Finally, use this string to define the layer:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，使用此字符串定义图层：
- en: '[PRE5]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Adding a point feature to a vector layer
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向矢量图层添加点要素
- en: This recipe performs the simplest possible edit to a vector layer instantiated
    from a shapefile. We will add a point to an existing point layer.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 此食谱执行了从shapefile实例化的矢量图层可能的最简单编辑。我们将向现有的点图层添加一个点。
- en: Getting ready
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, download the zipped shapefile from [https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip](https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个食谱，请从[https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip](https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip)下载压缩的shapefile。
- en: Extract the `.shp`, `.shx`, and `.dbf` files to the `/qgis_data/nyc` directory.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 将`.shp`、`.shx`和`.dbf`文件提取到`/qgis_data/nyc`目录。
- en: How to do it...
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We will load the vector layer from the shapefile, create a new geometry object
    as a point, create a new feature, set the geometry, and add it to the layer''s
    data provider. Finally, we will update the extent of the layer to make sure that
    the bounding box of the layer encapsulates the new point:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从shapefile加载矢量图层，创建一个新的点几何对象，创建一个新的要素，设置几何形状，并将其添加到图层的数据提供者。最后，我们将更新图层的范围，以确保图层的边界框包含新的点：
- en: Start QGIS.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动QGIS。
- en: From the **Plugins** menu, select **Python Console**.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**插件**菜单中选择**Python控制台**。
- en: 'First, load the layer:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，加载图层：
- en: '[PRE6]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now, will access the layer''s data provider:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将访问图层的数据提供者：
- en: '[PRE7]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next, create a new point using the `QgsGeometry` object:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，使用`QgsGeometry`对象创建一个新的点：
- en: '[PRE8]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, will create a new `QgsFeature` object to house the geometry:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将创建一个新的`QgsFeature`对象来存放几何形状：
- en: '[PRE9]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Next, set the geometry of the feature using our point:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，使用我们的点设置要素的几何形状：
- en: '[PRE10]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then, place the features into the layer''s feature list:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将要素放入图层要素列表中：
- en: '[PRE11]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Finally, update the layer''s extent to complete the addition:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，更新图层的范围以完成添加：
- en: '[PRE12]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: How it works...
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: PyQGIS abstracts the points within a layer into four levels. At the lowest level
    is the `QgsPoint` object, which contains nothing more than the coordinates of
    the point. This object is added to an abstract `QgsGeometry` object. This object
    becomes the geometric part of a `QgsFeature` object, which also has the ability
    to store and manage attributes. All the features are managed by the `QgsDataProvider`
    object. The data provider manages the geospatial aspect of a layer to separate
    that aspect from styling and other presentation-related portions. QGIS has another
    editing approach in Python, which is called an **editing buffer**. When you use
    an editing buffer, the changes can be displayed, but they are not permanent until
    you commit them. The most common use case for this editing method is in GUI applications
    where the user may decide to roll back the changes by cancelling the editing session.
    The *PyQGIS Developer Cookbook* has an example of using and editing buffers in
    Python, and is available at [http://docs.qgis.org/2.6/en/docs/pyqgis_developer_cookbook/vector.html](http://docs.qgis.org/2.6/en/docs/pyqgis_developer_cookbook/vector.html).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: PyQGIS将图层内的点抽象为四个级别。最低级别是`QgsPoint`对象，它包含的不仅仅是点的坐标。此对象被添加到一个抽象的`QgsGeometry`对象中。此对象成为`QgsFeature`对象的几何部分，该对象还具有存储和管理属性的能力。所有要素都由`QgsDataProvider`对象管理。数据提供者管理图层的地理空间方面，以将其与样式和其他与呈现相关的部分分开。QGIS在Python中还有另一种编辑方法，称为**编辑缓冲区**。当你使用编辑缓冲区时，可以显示更改，但除非你提交它们，否则这些更改不是永久的。这种编辑方法最常见的使用场景是在GUI应用程序中，用户可能会选择通过取消编辑会话来回滚更改。"PyQGIS开发者食谱"中有一个使用和编辑缓冲区的Python示例，可在[http://docs.qgis.org/2.6/en/docs/pyqgis_developer_cookbook/vector.html](http://docs.qgis.org/2.6/en/docs/pyqgis_developer_cookbook/vector.html)找到。
- en: Adding a line feature to a vector layer
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向矢量图层添加线要素
- en: Adding a line to a vector layer in QGIS is identical to adding a single point,
    but here you just have to add more points to the `QgsGeometry` object.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在QGIS中向矢量图层添加一行与添加单个点相同，但在这里你只需向`QgsGeometry`对象添加更多点。
- en: Getting ready
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, you will need to download a zipped line shapefile that contains
    two line features from [https://geospatialpython.googlecode.com/svn/paths.zip](https://geospatialpython.googlecode.com/svn/paths.zip).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，您需要下载一个包含两个线特征的压缩线形状文件，您可以从[https://geospatialpython.googlecode.com/svn/paths.zip](https://geospatialpython.googlecode.com/svn/paths.zip)下载。
- en: Extract the ZIP file to a directory named `paths` in your `/qgis_data` directory.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 将ZIP文件解压到您`/qgis_data`目录中名为`paths`的目录中。
- en: How to do it...
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In this recipe, we will load the line layer from the shapefile, build a list
    of points, create a new geometry object, and add the points as a line. We will
    also create a new feature, set the geometry, and add it to the layer''s data provider.
    Finally, we will update the extent of the layer to make sure that the bounding
    box of the layer encapsulates the new feature:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将从形状文件中加载线图层，构建点列表，创建一个新的几何对象，并将点作为线添加。我们还将创建一个新的特征，设置几何形状，并将其添加到图层的数据提供者。最后，我们将更新图层的范围，以确保图层的边界框包含新的特征：
- en: Start QGIS.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动QGIS。
- en: From the **Plugins** menu, select **Python Console**.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**插件**菜单中选择**Python控制台**。
- en: 'First, load the line layer and ensure that it is valid:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，加载线图层并确保它是有效的：
- en: '[PRE13]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Next, access the layer''s data provider:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，访问层的提供者：
- en: '[PRE14]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, build our list of points for a new line:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，构建我们新线的点列表：
- en: '[PRE15]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Then, create a geometry object from the line:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，从线创建一个几何对象：
- en: '[PRE16]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Create a feature and set its geometry to the line:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个特征并将其几何设置为线：
- en: '[PRE17]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Finally, add the feature to the layer data provider and update the extent:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将特征添加到图层数据提供者并更新范围：
- en: '[PRE18]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: How it works...
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: As with all the geometry in QGIS, we use the four-step process of building points,
    geometry, feature, and data provider to add the line. Interestingly, the `QgsGeometry`
    object accepts Python lists for the collection of points instead of creating a
    formal object, as is done with the `QgsPoint` object.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 与QGIS中的所有几何形状一样，我们使用构建点、几何、特征和数据提供者的四步流程来添加线。有趣的是，`QgsGeometry`对象接受Python列表作为点的集合，而不是像`QgsPoint`对象那样创建正式的对象。
- en: Adding a polygon feature to a vector layer
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向矢量层添加多边形特征
- en: In this recipe, we'll add a polygon to a layer. A polygon is the most complex
    kind of geometry. However, in QGIS, the API is very similar to a line.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将向图层添加一个多边形。多边形是最复杂的几何形状之一。然而，在QGIS中，API与线非常相似。
- en: Getting ready
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we'll use a simple polygon shapefile, which you can download
    as a ZIP file from [https://geospatialpython.googlecode.com/files/polygon.zip](https://geospatialpython.googlecode.com/files/polygon.zip).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，我们将使用一个简单的多边形形状文件，您可以从[https://geospatialpython.googlecode.com/files/polygon.zip](https://geospatialpython.googlecode.com/files/polygon.zip)下载为ZIP文件。
- en: Extract this shapefile to a folder called `polygon` in your `/qgis_data` directory.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 将此形状文件解压到您`/qgis_data`目录中名为`polygon`的文件夹中。
- en: How to do it...
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'This recipe will follow the standard PyQGIS process of loading a layer, building
    a feature, and adding it to the layer''s data provider, as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方将遵循标准的PyQGIS流程，加载图层、构建特征并将其添加到图层的数据提供者，如下所示：
- en: Start QGIS.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动QGIS。
- en: From the **Plugins** menu, select **Python Console**.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**插件**菜单中选择**Python控制台**。
- en: 'First, load the layer and validate it:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，加载图层并验证它：
- en: '[PRE19]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Next, access the layer''s data provider:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，访问层的提供者：
- en: '[PRE20]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now, build a list of points for the polygon:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，为多边形构建一个点列表：
- en: '[PRE21]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Next, create a geometry object and ingest the points as a polygon. We nest
    our list of points in another list because a polygon can have inner rings, which
    will consist of additional lists of points being added to this list:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建一个几何对象并将点作为多边形导入。我们将在另一个列表中嵌套我们的点列表，因为多边形可以有内环，这些内环将包含添加到该列表的附加点列表：
- en: '[PRE22]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Next, build the feature object and add the points:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，构建特征对象并添加点：
- en: '[PRE23]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Finally, add the feature to the layer''s data provider and update the extents:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将特征添加到图层的数据提供者并更新范围：
- en: '[PRE24]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: How it works...
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Adding a polygon is very similar to adding a line, with one key difference that
    is a common pitfall. The last point must be identical to the first point in order
    to close the polygon. If you don't repeat the first point, you won't receive any
    errors, but the polygon will not be displayed in QGIS, which can be difficult
    to troubleshoot.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 添加多边形与添加线非常相似，有一个关键的区别是一个常见的陷阱。最后一个点必须与第一个点相同，以便闭合多边形。如果您不重复第一个点，您不会收到任何错误，但多边形将不会在QGIS中显示，这可能会很难调试。
- en: Adding a set of attributes to a vector layer
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向矢量层添加一组属性
- en: Each QGIS feature has two parts, the geometry and the attributes. In this recipe,
    we'll add an attribute for a layer from an existing dataset.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 每个QGIS特征有两个部分，几何形状和属性。在这个菜谱中，我们将为现有数据集的图层添加一个属性。
- en: Getting ready
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will use a point shapefile with museum data for New York City, which you
    can download as a ZIP file from [https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip](https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip).
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用纽约市博物馆数据的点shapefile，你可以从[https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip](https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip)下载ZIP文件。
- en: Extract this shapefile to the `/qgis_data/nyc` directory.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 将此shapefile提取到`/qgis_data/nyc`目录。
- en: How to do it...
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'A feature must have geometry, but it does not require attributes. So, we will
    create a new feature, add some attributes, and then add everything to the layer,
    as follows:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 一个特征必须有几何形状，但不需要属性。因此，我们将创建一个新特征，添加一些属性，然后将所有内容添加到图层中，如下所示：
- en: Start QGIS.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动QGIS。
- en: From the **Plugins** menu, select **Python Console**.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**插件**菜单中选择**Python控制台**。
- en: 'First, load the layer and validate it:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，加载图层并验证它：
- en: '[PRE25]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Next, access the layer''s data provider so that we can get the list of fields:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，访问图层的数据提供者，以便我们可以获取字段列表：
- en: '[PRE26]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now, create a point geometry, which in this case is a new museum:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，创建一个点几何形状，在这个例子中是一个新的博物馆：
- en: '[PRE27]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Next, get the `fields` object for the layer that we''ll need to create a new
    feature for:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，获取我们将需要创建新特征的图层的`fields`对象：
- en: '[PRE28]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Then, create a new feature and initialize the attributes:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，创建一个新特征并初始化属性：
- en: '[PRE29]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now, set the geometry of our new museum feature:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，设置我们新博物馆特征的几何形状：
- en: '[PRE30]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now, we are able to add a new attribute. Adding an attribute is similar to
    updating a Python dictionary, as shown here:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们能够添加一个新属性。添加属性类似于更新Python字典，如下所示：
- en: '[PRE31]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Finally, we add the feature to the layer and update the extents:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将特征添加到图层并更新范围：
- en: '[PRE32]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: How it works...
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: PyQGIS attributes are defined as an ordered `array`. The syntax for referencing
    a field is similar to the syntax for a Python dictionary. We use the layer's data
    provider object to perform the actual editing. When we use this approach, no signals
    are triggered at the layer object level. If we are just trying to edit data on
    the filesystem, that's okay, but if the layer is going to be added to the map
    canvas for display or user interaction, then you should use the editing buffer
    in the `QgsVectorLayer` object. This editing buffer allows you to commit or roll
    back changes and also keeps track of the state of the layer when things are changed.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: PyQGIS属性定义为有序的`array`。引用字段的语法类似于Python字典的语法。我们使用图层的数据提供者对象来执行实际的编辑。当我们使用这种方法时，在图层对象级别不会触发任何信号。如果我们只是尝试在文件系统上编辑数据，那是可以的，但如果图层将被添加到地图画布以显示或用户交互，那么你应该使用`QgsVectorLayer`对象中的编辑缓冲区。这个编辑缓冲区允许你提交或回滚更改，并跟踪更改时的图层状态。
- en: Adding a field to a vector layer
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向矢量图层添加字段
- en: This recipe demonstrates how to add a new field to a layer. Each field represents
    a new column in a dataset for which each feature has a new attribute. When you
    add a new attribute, all the features are set to `NULL` for that field index.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱演示了如何向图层添加新字段。每个字段代表数据集中新列的一个新属性。当你添加一个新属性时，所有特征都将该字段的索引设置为`NULL`。
- en: Getting ready
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will use the New York City museums' shapefile used in other recipes, which
    you can download as a ZIP file from [https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip](https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip).
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用其他菜谱中使用的纽约市博物馆的shapefile，你可以从[https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip](https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip)下载ZIP文件。
- en: Extract this shapefile to `/qgis_data/nyc`.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 将此shapefile提取到`/qgis_data/nyc`。
- en: How to do it...
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'All the data management for a layer is handled through the layer''s data provider
    and the fields are no different. We will load the layer, access the data provider,
    define the new field, and finalize the change, as follows:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 图层的所有数据管理都通过图层的数据提供者来处理，字段也不例外。我们将加载图层，访问数据提供者，定义新字段，并最终完成更改，如下所示：
- en: Start QGIS.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动QGIS。
- en: From the **Plugins** menu, select **Python Console**.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**插件**菜单中选择**Python控制台**。
- en: 'First, you must import the `Qt` library''s data types, which PyQGIS uses to
    specify the layer field''s data types:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，你必须导入`Qt`库的数据类型，PyQGIS使用这些数据类型来指定图层字段的类型：
- en: '[PRE33]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Next, load and validate the layer:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，加载并验证图层：
- en: '[PRE34]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Then, access the layer data provider:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，访问图层数据提供者：
- en: '[PRE35]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Now, add a Python list of `QgsField` objects, which defines the field name
    and type. In this case, we''ll add one field named `Admission` as a `Double`:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，添加一个`QgsField`对象的Python列表，它定义了字段名称和类型。在这种情况下，我们将添加一个名为`Admission`的字段，类型为`Double`：
- en: '[PRE36]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Finally, update the fields to complete the change:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，更新字段以完成更改：
- en: '[PRE37]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: How it works...
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The nomenclature used for the `fields` and `attributes` in QGIS is a little
    inconsistent and can be confusing if you've used other GIS packages. In QGIS,
    a column is a `field` that has a name and a type. The `attribute table` holds
    a value for each `field` column and each `feature` row. However, in the `QgsVectorDataProvider`
    object, you use the `addAttributes()` method to add a new `field` column. Also,
    in other GIS software, you may see the use of the word `field` and `attribute`
    reversed.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: QGIS中`fields`和`attributes`使用的命名约定有些不一致，如果您使用过其他GIS软件包，可能会感到困惑。在QGIS中，一列是一个具有名称和类型的`field`。`attribute
    table`为每个`field`列和每个`feature`行保存一个值。然而，在`QgsVectorDataProvider`对象中，您使用`addAttributes()`方法添加一个新的`field`列。在其他GIS软件中，您可能会看到`field`和`attribute`的使用颠倒。
- en: Joining a shapefile attribute table to a CSV file
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将shapefile属性表连接到CSV文件
- en: Joining attribute tables to other database tables allows you to use a spatial
    dataset in order to reference a dataset without any geometry, using a common key
    between the data tables. A very common use case for this is to join a vector dataset
    of census attributes to a more detailed census attribute dataset. The use case
    we will demonstrate here links a US census track file to a detailed CSV file that
    contains more in-depth information.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 将属性表与其他数据库表连接允许您使用空间数据集来引用没有几何形状的数据集，使用数据表之间的公共键。这种用例的一个非常常见的例子是将人口普查属性向量的数据集与更详细的人口普查属性数据集连接起来。在这里，我们将演示如何将美国人口普查跟踪文件与包含更深入信息的详细CSV文件连接起来。
- en: Getting ready
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, you will need a census `tract` shapefile and a CSV file containing
    the appropriate census data for the shapefile. You can download the sample data
    set from [https://geospatialpython.googlecode.com/svn/census.zip](https://geospatialpython.googlecode.com/svn/census.zip).
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，您需要一个包含适当人口普查数据的`tract` shapefile和一个CSV文件。您可以从[https://geospatialpython.googlecode.com/svn/census.zip](https://geospatialpython.googlecode.com/svn/census.zip)下载示例数据集。
- en: Extract this data to a directory named `/qgis_data/census`.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 将这些数据提取到名为`/qgis_data/census`的目录中。
- en: How to do it...
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The join operation is quite involved. We''ll perform this operation and save
    the layer as a new shapefile with the joined attributes. Then we''ll load the
    new layer and compare the field count to the original layer to ensure that the
    join occurred. We''ll use the terms `target layer` and `join layer`. The `target
    layer` will be the shapefile, and the `join layer` will be a CSV with some additional
    fields we want to add to the shapefile. To do this, perform the following steps:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 连接操作相当复杂。我们将执行此操作，并将具有连接属性的图层保存为新的shapefile。然后我们将加载新的图层，并将字段计数与原始图层进行比较，以确保连接发生。我们将使用术语`目标图层`和`连接图层`。`目标图层`将是shapefile，而`连接图层`将是一个CSV文件，其中包含我们想要添加到shapefile的一些额外字段。为此，请执行以下步骤：
- en: Start QGIS.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动QGIS。
- en: From the **Plugins** menu, select **Python Console**.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**插件**菜单中选择**Python控制台**。
- en: 'First, load the county''s `census` track layer and validate it:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，加载县的人口普查跟踪图层并验证它：
- en: '[PRE38]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Now, load the CSV file as a layer and validate it as well:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将CSV文件作为图层加载并验证它：
- en: '[PRE39]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Once this is done, you must add both the layers to the map registry for the
    two layers to interact for the join. However, set the visibility to `False`, so
    the layers do not appear on the map:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成此操作后，您必须将两个图层添加到地图注册表中，以便两个图层可以交互进行连接。但是，将可见性设置为`False`，以便图层不在地图上显示：
- en: '[PRE40]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Next, you must create a special join object:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，您必须创建一个特殊的连接对象：
- en: '[PRE41]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The join object needs the layer ID of the CSV file:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 连接对象需要CSV文件的图层ID：
- en: '[PRE42]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Next, specify the key field from the CSV file whose values correspond to the
    values in the shapefile:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，指定CSV文件中的关键字段，其值与shapefile中的值相对应：
- en: '[PRE43]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Then, specify the corresponding field in the shapefile:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，指定shapefile中的对应字段：
- en: '[PRE44]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Set the `memoryCache` property to `True` in order to speed up access to the
    joined data:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`memoryCache`属性设置为`True`以加快对连接数据的访问：
- en: '[PRE45]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Add the join to the layer now:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在将连接添加到图层：
- en: '[PRE46]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Next, write out the joined shapefile to a new file on disk:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将连接的shapefile写入磁盘上的新文件：
- en: '[PRE47]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Now, load the new shapefile back in as a layer for verification:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将新的shapefile重新加载为图层以进行验证：
- en: '[PRE48]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Verify that the field count in the original layer is `12`:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证原始图层中的字段数是`12`：
- en: '[PRE49]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Finally, verify that the new layer has a field count of `142` from the join:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，验证新图层从连接中具有`142`个字段数：
- en: '[PRE50]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: How it works...
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This recipe reaches out to the very edge of the PyQGIS API, forcing you to use
    some workarounds. Most recipes for data manipulation can be performed programmatically
    without writing data to disk or loading layers onto the map, but joins are different.
    Because the `QgsVectorJoinInfo` object needs the layer ID of the CSV layer, we
    must add both the layers to the map layer registry. Fortunately, we can do this
    without making them visible, if we are just trying to write a data manipulation
    script. A `join` is designed to be a temporary operation to query a dataset. Oddly,
    PyQGIS lets you create the `join`, but you cannot query it. This limitation is
    the reason why if you want to work with the joined data, you must write it to
    a new shapefile and reload it. Fortunately, PyQGIS allows you to do that.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱触及了PyQGIS API的边缘，迫使你使用一些变通方法。大多数数据操作菜谱可以通过编程方式执行，而无需将数据写入磁盘或加载图层到地图上，但连接操作不同。因为`QgsVectorJoinInfo`对象需要CSV图层的图层ID，我们必须将两个图层都添加到地图图层注册表中。幸运的是，如果我们只是尝试编写数据操作脚本，我们可以不使它们可见。`连接`操作被设计为查询数据集的临时操作。奇怪的是，PyQGIS允许你创建`连接`，但你不能查询它。这种限制是如果你想要处理连接数据，你必须将其写入新的shapefile并重新加载的原因。幸运的是，PyQGIS允许你这样做。
- en: There's more...
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: You can find an alternate method that works around the PyQGIS limitation in
    a Processing Toolbox script, which manually matches the joined data in Python,
    at [https://github.com/rldhont/Quantum-GIS/blob/master/python/plugins/processing/algs/qgis/JoinAttributes.py](https://github.com/rldhont/Quantum-GIS/blob/master/python/plugins/processing/algs/qgis/JoinAttributes.py).
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在处理工具箱脚本中找到一个绕过PyQGIS限制的替代方法，该脚本在Python中手动匹配连接数据，在[https://github.com/rldhont/Quantum-GIS/blob/master/python/plugins/processing/algs/qgis/JoinAttributes.py](https://github.com/rldhont/Quantum-GIS/blob/master/python/plugins/processing/algs/qgis/JoinAttributes.py)。
- en: Moving vector layer geometry
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动矢量图层几何形状
- en: Sometimes, you need to change the location of a feature. You can do this by
    deleting and re-adding the feature, but PyQGIS provides a simple way to change
    the geometry.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，你需要更改特征的位置。你可以通过删除和重新添加特征来完成此操作，但PyQGIS提供了一个简单的方法来更改几何形状。
- en: Getting ready
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will need the New York City museums' shapefile, which you can download as
    a ZIP file from [https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip](https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip).
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要纽约市博物馆的shapefile，你可以从[https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip](https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip)下载ZIP文件。
- en: Extract this shapefile to `/qgis_data/nyc.`
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 将此shapefile提取到`/qgis_data/nyc.`。
- en: How to do it...
  id: totrans-211
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We will load the shapefile as a vector layer, validate it, define the feature
    ID we want to change, create the new geometry, and change the feature in the layer.
    To do this, perform the following steps:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将加载shapefile作为矢量图层，验证它，定义我们想要更改的特征ID，创建新的几何形状，并在图层中更改特征。为此，执行以下步骤：
- en: Start QGIS.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动QGIS。
- en: From the **Plugins** menu, select **Python Console**.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**插件**菜单中选择**Python控制台**。
- en: 'First, load the layer and validate it:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，加载图层并验证它：
- en: '[PRE51]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Next, define the feature ID we are interested in changing:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，定义我们想要更改的特征ID：
- en: '[PRE52]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Now, create the new point geometry, which will become the new location:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，创建新的点几何形状，它将成为新的位置：
- en: '[PRE53]'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Finally, change the geometry and replace it with our new geometry, specifying
    the feature ID:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，更改几何形状并用我们的新几何形状替换它，指定特征ID：
- en: '[PRE54]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: How it works...
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `changeGeometryValues()` method makes editing a snap of the fingers. If
    we had to delete and then re-add the feature, we would have to go through the
    trouble of reading the attributes, preserving them, and then re-adding them with
    the new feature. You must, of course, know the feature ID of the feature you want
    to change. How you determine this ID depends on your application. Typically, you
    will query the attributes to find a specific value, or you can do a spatial operation
    of some sort.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '`changeGeometryValues()`方法使得编辑变得轻而易举。如果我们不得不删除并重新添加特征，我们就必须经历读取属性、保留它们，然后使用新特征重新添加它们的麻烦。你必须当然知道你想要更改的特征ID。你如何确定这个ID取决于你的应用程序。通常，你会查询属性以找到特定的值，或者你可以执行某种空间操作。'
- en: Changing a vector layer feature's attribute
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更改矢量图层特征的属性
- en: The process to change an attribute in a feature is straightforward and well-supported
    by the PyQGIS API. In this recipe, we'll change a single attribute, but you can
    change as many attributes of a feature as desired at once.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在特征中更改属性的过程简单明了，并且得到了PyQGIS API的良好支持。在这个菜谱中，我们将更改单个属性，但您可以一次性更改特征的多个属性。
- en: Getting ready
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will need the New York City museums' shapefile used in other recipes, which
    you can download as a ZIP file from [https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip](https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip).
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要使用其他菜谱中使用的纽约市博物馆的shapefile，您可以从[https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip](https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip)下载ZIP文件。
- en: Extract this shapefile to `/qgis_data/nyc`.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 将此shapefile提取到`/qgis_data/nyc`。
- en: How to do it...
  id: totrans-230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We will load the shapefile as a vector layer, validate it, define the feature
    IDs of the fields we want to change, get the index of the field names that we
    will change, define the new attribute value as an attribute index and value, and
    change the feature in the layer. To do this, we need to perform the following
    steps:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将加载shapefile作为矢量图层，验证它，定义我们想要更改的字段的特征ID，获取我们将更改的字段名称的索引，定义新的属性值作为属性索引和值，并在图层中更改特征。为此，我们需要执行以下步骤：
- en: Start QGIS.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动QGIS。
- en: From the **Plugins** menu, select **Python Console**.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**插件**菜单中选择**Python控制台**。
- en: 'First, load the layer and validate it:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，加载图层并验证它：
- en: '[PRE55]'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Next, define the feature IDs you want to change:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，定义您想要更改的特征ID：
- en: '[PRE56]'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Then, get the index of the fields you want to change, which are the telephone
    number and city name:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，获取您想要更改的字段的索引，即电话号码和城市名称：
- en: '[PRE57]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Now, create the Python dictionary for the attribute index and the new value,
    which in this case is an imaginary phone number:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，创建属性索引和新值的Python字典，在这个例子中是一个虚构的电话号码：
- en: '[PRE58]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Finally, use the layer''s data provider to update the fields:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，使用图层的数据提供者更新字段：
- en: '[PRE59]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: How it works...
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Changing attributes is very similar to changing the geometry within a feature.
    We explicitly name the feature IDs in this example, but in a real-world program,
    you would collect these IDs as a part of some other process output, such as a
    spatial selection. An example of this type of spatial selection is available in
    the *Filtering a layer by Geometry* recipe, in [Chapter 2](part0028_split_000.html#page
    "Chapter 2. Querying Vector Data"), *Querying Vector Data*.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 修改属性与在特征内修改几何形状非常相似。在这个例子中，我们明确命名了特征ID，但在实际程序中，您会收集这些ID作为其他过程输出的部分，例如空间选择。这种类型空间选择的例子可以在[第2章](part0028_split_000.html#page
    "第2章。查询矢量数据")的*通过几何形状过滤图层*菜谱中找到，在*查询矢量数据*部分。
- en: Deleting a vector layer feature
  id: totrans-246
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除矢量图层特征
- en: In this recipe, we'll completely remove a feature, including the geometry and
    attributes, from a layer.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将完全从图层中删除一个特征，包括几何形状和属性。
- en: Getting ready
  id: totrans-248
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will need the New York City museums' shapefile used in other recipes, which
    you can download as a ZIP file from [https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip](https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip).
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要使用其他菜谱中使用的纽约市博物馆的shapefile，您可以从[https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip](https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip)下载ZIP文件。
- en: Extract this shapefile to `/qgis_data/nyc`.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 将此shapefile提取到`/qgis_data/nyc`。
- en: How to do it...
  id: totrans-251
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'All we need to do is load the layer and then delete the desired features by
    ID, using the layer''s data provider:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的只是加载图层，然后通过ID删除所需的特征，使用图层的数据提供者：
- en: Start QGIS.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动QGIS。
- en: From the **Plugins** menu, select **Python Console**.
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**插件**菜单中选择**Python控制台**。
- en: 'First, load and validate the layer:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，加载并验证图层：
- en: '[PRE60]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Next, specify a Python list containing feature IDs. In this case, we have two:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，指定一个包含特征ID的Python列表。在这种情况下，我们有两个：
- en: '[PRE61]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: How it works...
  id: totrans-259
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This operation cannot be simpler or better designed. There are a number of ways
    in which we can programmatically fill a Python list with feature IDs. For example,
    we can use the [Chapter 2](part0028_split_000.html#page "Chapter 2. Querying Vector
    Data"), *Filtering a Layer by Attributes* in this recipe. Then, we just pass this
    list to the layer's data provider and we are done.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 此操作无法更简单或设计得更好。我们可以以多种方式编程地将特征ID填充到Python列表中。例如，我们可以使用这个菜谱中的[第2章](part0028_split_000.html#page
    "第2章。查询矢量数据")的*通过属性过滤图层*。然后，我们只需将此列表传递给图层的数据提供者，任务就完成了。
- en: Deleting a vector layer attribute
  id: totrans-261
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除矢量图层属性
- en: In this recipe, we'll wipe out an entire attribute and all the feature fields
    for a vector layer.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将删除一个矢量层的整个属性以及所有特征字段。
- en: Getting ready
  id: totrans-263
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will need the New York City museums' shapefile used in other recipes, which
    you can download as a ZIP file from [https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip](https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip).
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 你将需要纽约市博物馆在其它菜谱中使用的形状文件，你可以将其作为 ZIP 文件从 [https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip](https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip)
    下载。
- en: Extract this shapefile to `/qgis_data/nyc`.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 将此形状文件解压到 `/qgis_data/nyc`。
- en: How to do it...
  id: totrans-266
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'This operation is straight forward. We''ll load and validate the layer, use
    the layer''s data provider to delete the attribute by index, and finally, we will
    update all the fields to remove the orphaned values. To do this, we need to perform
    the following steps:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 这个操作很简单。我们将加载和验证图层，使用图层的数据提供者通过索引删除属性，最后，我们将更新所有字段以删除孤立值。为此，我们需要执行以下步骤：
- en: Start QGIS.
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 QGIS。
- en: From the **Plugins** menu, select **Python Console**.
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **插件** 菜单中选择 **Python 控制台**。
- en: 'First, load and validate the layer:'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，加载和验证图层：
- en: '[PRE62]'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Then, delete the first attribute:'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，删除第一个属性：
- en: '[PRE63]'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Finally, update the fields:'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，更新字段：
- en: '[PRE64]'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: How it works...
  id: totrans-276
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Because we are changing the actual structure of the layer data, we must call
    the `updateFields()` method of the layer to remove the field values which no longer
    have an attribute.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们正在更改图层数据的实际结构，我们必须调用图层的 `updateFields()` 方法来删除不再具有属性的字段值。
- en: Reprojecting a vector layer
  id: totrans-278
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重新投影矢量层
- en: We will use the Processing Toolbox in QGIS to reproject a layer to a different
    coordinate system.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 QGIS 的处理工具箱来将一个图层重新投影到不同的坐标系。
- en: Getting ready
  id: totrans-280
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we'll need the Mississippi cities' shapefile in the Mississippi
    Trans Mercator projection (EPSG 3814), which can be downloaded as a ZIP file from
    [https://geospatialpython.googlecode.com/files/MSCities_MSTM.zip](https://geospatialpython.googlecode.com/files/MSCities_MSTM.zip).
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个菜谱，我们需要密西西比州城市在密西西比州横墨卡托投影（EPSG 3814）中的形状文件，你可以将其作为 ZIP 文件从 [https://geospatialpython.googlecode.com/files/MSCities_MSTM.zip](https://geospatialpython.googlecode.com/files/MSCities_MSTM.zip)
    下载。
- en: Extract the zipped shapefile to a directory named /`qgis_data/ms`.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 将压缩的形状文件解压到名为 `/qgis_data/ms` 的目录中。
- en: How to do it...
  id: totrans-283
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To reproject the layer, we''ll simply call the `qgis:reprojectlayer` processing
    algorithm, specifying the input shapefile, the new projection, and the output
    file name. To do this, perform the following steps:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 要重新投影图层，我们将简单地调用 `qgis:reprojectlayer` 处理算法，指定输入形状文件、新投影和输出文件名。为此，请执行以下步骤：
- en: Start QGIS.
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 QGIS。
- en: From the **Plugins** menu, select **Python Console**.
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **插件** 菜单中选择 **Python 控制台**。
- en: 'First, you need to import the processing module:'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，你需要导入处理模块：
- en: '[PRE65]'
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Next, run the reprojection alogoritm, as follows:'
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，运行重新投影算法，如下所示：
- en: '[PRE66]'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: How it works...
  id: totrans-291
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The source data starts out in EPSG 3814, but we want to project it to WGS 84
    Geographic, which is commonly used to deal with global datasets and is usually
    the default coordinate reference system for GPS devices. The target EPSG code
    is 4326\. Dealing with map projections can be quite complex. This QGIS tutorial
    has some more examples and explains more about map projections at [http://manual.linfiniti.com/en/vector_analysis/reproject_transform.html](http://manual.linfiniti.com/en/vector_analysis/reproject_transform.html).
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 源数据最初在 EPSG 3814 中，但我们希望将其投影到 WGS 84 地理坐标系，这通常用于处理全球数据集，并且通常是 GPS 设备的默认坐标参考系统。目标
    EPSG 代码是 4326。处理地图投影可能相当复杂。这个 QGIS 教程有一些更多示例，并解释了更多关于地图投影的信息，请参阅 [http://manual.linfiniti.com/en/vector_analysis/reproject_transform.html](http://manual.linfiniti.com/en/vector_analysis/reproject_transform.html)。
- en: Converting a shapefile to KML
  id: totrans-293
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将形状文件转换为 KML
- en: In this recipe, we'll convert a layer to KML. KML is an **Open Geospatial Consortium**
    (**OGC**) standard and is supported by the underlying OGR library used by QGIS.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将把一个图层转换为 KML。KML 是 **开放地理空间联盟** (**OGC**) 标准，并且由 QGIS 所使用的底层 OGR 库支持。
- en: Getting ready
  id: totrans-295
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'For this recipe, download the following zipped shapefile and extract it to
    a directory named `/qgis_data/hancock`:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个菜谱，下载以下压缩形状文件并将其解压到名为 `/qgis_data/hancock` 的目录中：
- en: '[https://geospatialpython.googlecode.com/files/hancock.zip](https://geospatialpython.googlecode.com/files/hancock.zip)'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://geospatialpython.googlecode.com/files/hancock.zip](https://geospatialpython.googlecode.com/files/hancock.zip)'
- en: How to do it...
  id: totrans-298
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To convert a shapefile to the KML XML format, we''ll load the layer and then
    use the `QgsVectorFileWriter` object to save it as KML:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 要将shapefile转换为KML XML格式，我们将加载图层，然后使用`QgsVectorFileWriter`对象将其保存为KML：
- en: Start QGIS.
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动QGIS。
- en: From the **Plugins** menu, select **Python Console**.
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**插件**菜单中选择**Python控制台**。
- en: 'First load the layer and validate it:'
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先加载图层并验证它：
- en: '[PRE67]'
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Then, establish the destination CRS. KML should always be in EPS:4326:'
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，建立目标坐标参考系统。KML始终应在EPS:4326：
- en: '[PRE68]'
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Next, use the file writer to save it as a KML file by specifying the file type
    as KML:'
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，使用文件写入器将其保存为KML文件，指定文件类型为KML：
- en: '[PRE69]'
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: How it works...
  id: totrans-308
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: You will end up with a KML file in the directory next to your shapefile. KML
    supports styling information. QGIS uses some default styling information that
    you can change, either by hand using a text editor, or programmatically using
    an XML library such as Python's ElementTree. KML is one of many standard vector
    formats you can export using this method.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在你的shapefile旁边的目录中结束，得到一个KML文件。KML支持样式信息。QGIS使用一些默认的样式信息，你可以通过手动使用文本编辑器或使用Python的ElementTree等XML库编程方式来更改它们。KML是你可以使用此方法导出的许多标准矢量格式之一。
- en: Merging shapefiles
  id: totrans-310
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 合并shapefile
- en: Merging shapefiles with matching projections and attribute structures is a very
    common operation. In QGIS, the best way to merge vector datasets is to use another
    GIS system included with QGIS on Windows and OSX called **SAGA**. On other platforms,
    you must install SAGA separately and activate it in the Processing Toolbox configuration.
    In PyQGIS, you can access SAGA functions through the Processing Toolbox. **SAGA**
    is yet another open source GIS that is similar to QGIS. However, both packages
    have strengths and weaknesses. By using SAGA through the Processing Toolbox, you
    can have the best of both systems.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 将具有匹配投影和属性结构的shapefile合并是一个非常常见的操作。在QGIS中，合并矢量数据集的最佳方式是使用Windows和OSX上包含的另一个GIS系统**SAGA**。在其他平台上，你必须单独安装SAGA并在处理工具箱配置中激活它。在PyQGIS中，你可以通过处理工具箱访问SAGA函数。**SAGA**是另一个与QGIS类似的开源GIS。然而，这两个包都有优点和缺点。通过处理工具箱使用SAGA，你可以拥有两个系统的最佳之处。
- en: Getting ready
  id: totrans-312
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this recipe, we'll merge some building footprint shapefiles from adjoining
    areas into a single shapefile. You can download the sample dataset from [https://geospatialpython.googlecode.com/files/tiled_footprints.zip](https://geospatialpython.googlecode.com/files/tiled_footprints.zip).
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将合并相邻区域的几个建筑足迹shapefile到一个单独的shapefile中。你可以从[https://geospatialpython.googlecode.com/files/tiled_footprints.zip](https://geospatialpython.googlecode.com/files/tiled_footprints.zip)下载示例数据集。
- en: Extract the zipped shapefiles to a directory named `/qgis_data/tiled_footprints`.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 将压缩的shapefile解压到名为`/qgis_data/tiled_footprints`的目录中。
- en: How to do it...
  id: totrans-315
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: We will locate all the `.shp` files in the data directory and hand them to the
    `saga:mergeshapeslayers object i`n order to merge them.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在数据目录中定位所有`.shp`文件，并将它们交给`saga:mergeshapeslayers`对象以进行合并。
- en: Start QGIS.
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动QGIS。
- en: From the **Plugins** menu, select **Python Console**.
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**插件**菜单中选择**Python控制台**。
- en: 'Import the Python `glob` module for wildcard file matching:'
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入Python的`glob`模块以进行通配符文件匹配：
- en: '[PRE70]'
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Next, import the processing module for the merge algorithm:'
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，导入合并算法的处理模块：
- en: '[PRE71]'
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Now, specify the path of our data directory:'
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，指定我们的数据目录的路径：
- en: '[PRE72]'
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Locate all the .shp files:'
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定位所有`.shp`文件：
- en: '[PRE73]'
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Then, specify the output name of the merged shapefile:'
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，指定合并的shapefile的输出名称：
- en: '[PRE74]'
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Finally, run the algorithm that will load the merged shapefile on to the map:'
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，运行将合并的shapefile加载到地图上的算法：
- en: '[PRE75]'
  id: totrans-330
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: How it works...
  id: totrans-331
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The algorithm accepts a base file and then a semicolon-separated list of additional
    files to be merged, and it finally accepts the output filename. The `glob` module
    creates a list of the files. To get the base file, we use the list `pop()` method
    to get the first filename. Then, we use the Python string's `join()` method to
    make the required delimited list for the rest.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 该算法接受一个基础文件，然后是一个分号分隔的附加文件列表，最后接受输出文件名。`glob`模块创建一个文件列表。为了获取基础文件，我们使用列表的`pop()`方法获取第一个文件名。然后，我们使用Python字符串的`join()`方法来创建所需的分隔列表。
- en: There's more...
  id: totrans-333
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: QGIS has its own merge method available through the `processing` module called
    `qgis:mergevectorlayers`, but it is limited because it only merges two files.
    The SAGA method allows any number of files to be merged.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: QGIS通过`processing`模块提供自己的合并方法，称为`qgis:mergevectorlayers`，但它有限，因为它只能合并两个文件。SAGA方法允许合并任意数量的文件。
- en: Splitting a shapefile
  id: totrans-335
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分割shapefile
- en: Sometimes, you need to split a shapefile in order to break a larger dataset
    into more manageable sizes or to isolate a specific area of interest. There is
    a script in the Processing Toolbox that splits a shapefile by attribute. It is
    very useful, even though it is provided as an example of how to write processing
    scripts.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，您需要分割shapefile，以便将较大的数据集分解成更易于管理的尺寸，或者隔离特定的感兴趣区域。Processing工具箱中有一个脚本可以按属性分割shapefile。尽管它作为编写处理脚本的示例提供，但它非常有用。
- en: Getting ready
  id: totrans-337
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will split a census tract shapefile by county. You can download the sample
    zipped shapefile from [https://geospatialpython.googlecode.com/files/GIS_CensusTract.zip](https://geospatialpython.googlecode.com/files/GIS_CensusTract.zip).
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将按县分割人口普查区shapefile。您可以从[https://geospatialpython.googlecode.com/files/GIS_CensusTract.zip](https://geospatialpython.googlecode.com/files/GIS_CensusTract.zip)下载示例压缩shapefile。
- en: Extract the zipped shapefile to a directory named `/qgis_data/census`.
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将压缩的shapefile提取到名为`/qgis_data/census`的目录中。
- en: 'You also need the following script for the Processing Toolbox:'
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还需要以下脚本用于Processing工具箱：
- en: '[PRE76]'
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Next, use the following steps to add the script to the Processing Toolbox:'
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，使用以下步骤将脚本添加到Processing工具箱中：
- en: Download the script to your `/qgis_data/` directory.
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将脚本下载到您的`/qgis_data/`目录中。
- en: In the QGIS **Processing Toolbox**, open the **Scripts** tree menu and then
    go to the **Tools** submenu.
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在QGIS **Processing工具箱**中，打开**脚本**树菜单，然后转到**工具**子菜单。
- en: Then, double-click on the **Add script from file** command.
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，双击**从文件添加脚本**命令。
- en: In the **File** dialog, navigate to the script. Select the **Script** and click
    on the **Open** button.
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**文件**对话框中，导航到脚本。选择**脚本**并点击**打开**按钮。
- en: The stage is set now. Perform the steps in the next section to split the shapefile.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 现在舞台已经搭建好。执行下一节中的步骤以分割shapefile。
- en: How to do it...
  id: totrans-348
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'This recipe is as simple as running the algorithm and specifying the filename
    and data attribute. Perform the following steps:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 此菜谱与运行算法并指定文件名和数据属性一样简单。执行以下步骤：
- en: Start QGIS.
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动QGIS。
- en: From the **Plugins** menu, select **Python Console**.
  id: totrans-351
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**插件**菜单，选择**Python控制台**。
- en: 'Import the `processing` module:'
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`processing`模块：
- en: '[PRE77]'
  id: totrans-353
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'Define your data directory as a variable to shorten the processing command:'
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将数据目录定义为变量以缩短处理命令：
- en: '[PRE78]'
  id: totrans-355
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Finally, run the algorithm:'
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，运行算法：
- en: '[PRE79]'
  id: totrans-357
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: How it works...
  id: totrans-358
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The algorithm will dump the split files in the data directory, numbered sequentially.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 算法将按顺序将分割的文件存放在数据目录中。
- en: Generalizing a vector layer
  id: totrans-360
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 泛化矢量层
- en: Generalizing the geometry, also known as simplifying, removes points from a
    vector layer to reduce the space required to store the data on disk, the bandwidth
    needed to move it over a network, and the processing power required to perform
    analysis with it or display it in QGIS. In many cases, the geometry of a layer
    contains redundant points along with straight lines that can be removed without
    changing the spatial properties of a layer, with the exception of topology constraints.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 泛化几何形状，也称为简化，通过从矢量层中删除点来减少存储在磁盘上的数据所需的空间、在网络中移动它所需的带宽以及使用它进行分析或显示在QGIS中所需的处理能力。在许多情况下，层的几何形状包含冗余点以及可以删除而不改变层空间属性的直线，除了拓扑约束之外。
- en: Getting ready
  id: totrans-362
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we will use a boundary file for the state of Mississippi, which
    you can download from [https://geospatialpython.googlecode.com/files/Mississippi.zip](https://geospatialpython.googlecode.com/files/Mississippi.zip).
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 对于此菜谱，我们将使用密西西比州的边界文件，您可以从[https://geospatialpython.googlecode.com/files/Mississippi.zip](https://geospatialpython.googlecode.com/files/Mississippi.zip)下载。
- en: Extract the zipped shapefile to a directory named `/qgis_data/ms`.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 将压缩的shapefile提取到名为`/qgis_data/ms`的目录中。
- en: How to do it...
  id: totrans-365
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Generalizing is native to QGIS, but we will access it in PyQGIS through the
    Processing Toolbox using the `qgis:simplifygeometries` algorithm, as follows:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 在QGIS中，泛化是固有的，但我们将通过Processing工具箱使用`qgis:simplifygeometries`算法在PyQGIS中访问它，如下所示：
- en: Start QGIS.
  id: totrans-367
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动QGIS。
- en: From the **Plugins** menu, select **Python Console**.
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**插件**菜单，选择**Python控制台**。
- en: 'Import the `processing` module:'
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`processing`模块：
- en: '[PRE80]'
  id: totrans-370
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'Now, run the `processing` algorithm, specifying the algorithm name, input data,
    tolerance value, spacing between points — which defines how close two points are
    in map units before one is deleted — and the output dataset''s name:'
  id: totrans-371
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，运行`processing`算法，指定算法名称、输入数据、容差值、点之间的间距——这定义了在删除一个点之前两个点在地图单位中的接近程度——以及输出数据集的名称：
- en: '[PRE81]'
  id: totrans-372
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: How it works...
  id: totrans-373
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The simplicity of the `simplifygeometries` command makes the operation look
    simple. However, the simplification is itself quite complex. The same settings
    rarely produce desirable results across multiple datasets.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: '`simplifygeometries`命令的简单性使得操作看起来很简单。然而，简化本身相当复杂。相同的设置很少能在多个数据集中产生理想的结果。'
- en: 'The shapefile in this recipe starts out quite complex with hundreds of points,
    as seen in the following visualization:'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下可视化中，可以看到这个菜谱中的shapefile最初非常复杂，有数百个点：
- en: '![How it works...](img/00022.jpeg)'
  id: totrans-376
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/00022.jpeg)'
- en: 'The simplified version has only `10` points, as seen in the following image:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 简化版本只有`10`个点，如下图所示：
- en: '![How it works...](img/00023.jpeg)'
  id: totrans-378
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/00023.jpeg)'
- en: Dissolving vector shapes
  id: totrans-379
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 溶解矢量形状
- en: Dissolving shapes can take two different forms. You can combine a group of adjoining
    shapes by the outermost boundary of the entire dataset, or you can also group
    the adjoining shapes with the same attribute value.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 溶解形状可以有两种不同的形式。您可以通过整个数据集的外部边界合并一组相邻的形状，或者您也可以通过具有相同属性值的相邻形状进行分组。
- en: Getting ready
  id: totrans-381
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Download the GIS census tract shapefile, which contains tracts for several counties
    from [https://geospatialpython.googlecode.com/files/GIS_CensusTract.zip](https://geospatialpython.googlecode.com/files/GIS_CensusTract.zip).
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 从[https://geospatialpython.googlecode.com/files/GIS_CensusTract.zip](https://geospatialpython.googlecode.com/files/GIS_CensusTract.zip)下载GIS人口普查区shapefile，其中包含几个县的人口普查区。
- en: Extract it to your `/qgis_data` directory, in a directory called `census`.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 将其提取到`/qgis_data`目录下的一个名为`census`的目录中。
- en: How to do it...
  id: totrans-384
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We will use the Processing Toolbox for this recipe and specifically a native
    QGIS algorithm called `dissolve`, as follows:'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用处理工具箱来完成这个菜谱，并特别使用一个本地QGIS算法`dissolve`，如下所示：
- en: Start QGIS.
  id: totrans-386
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动QGIS。
- en: From the **Plugins** menu, select **Python Console**.
  id: totrans-387
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**插件**菜单中选择**Python控制台**。
- en: 'Import the `processing` module:'
  id: totrans-388
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`processing`模块：
- en: '[PRE82]'
  id: totrans-389
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'Next, run the `dissolve` algorithm, specifying the input data—`False` to specify
    that we don''t want to dissolve all the shapes into one but to use an attribute
    instead—the attribute we want to use, and the output filename:'
  id: totrans-390
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，运行`dissolve`算法，指定输入数据——`False`表示我们不想将所有形状溶解为一个，而是使用属性——我们想要使用的属性，以及输出文件名：
- en: '[PRE83]'
  id: totrans-391
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: How it works...
  id: totrans-392
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作...
- en: By only changing the boolean in the statement to `True`, we can dissolve all
    adjoining shapes into one. It is also important to note that QGIS will assign
    the fields of the first shape it encounters in each group to the final shape.
    In most cases, this will make the attributes virtually useless. This operation
    is primarily a spatial task.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 通过仅将语句中的布尔值更改为`True`，我们可以将所有相邻的形状溶解为一个。还重要的是要注意，QGIS将每个组中遇到的第一个形状的字段分配给最终形状。在大多数情况下，这将使属性几乎无用。这项操作主要是空间任务。
- en: 'You can see that each county boundary has a number of census tracts in the
    original layer, as shown in the following image:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，在原始层中，每个县边界都有若干个人口普查区，如下图所示：
- en: '![How it works...](img/00024.jpeg)'
  id: totrans-395
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/00024.jpeg)'
- en: 'Once the shapes are dissolved, you are left with only the county boundaries,
    as shown in this image:'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦形状被溶解，你将只剩下县边界，如下图所示：
- en: '![How it works...](img/00025.jpeg)'
  id: totrans-397
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/00025.jpeg)'
- en: Performing a union on vector shapes
  id: totrans-398
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对矢量形状执行并操作
- en: A union turns two overlapping shapes into one. This task can be easily accomplished
    with the Processing Toolbox. In this recipe, we'll merge the outline of a covered
    building with the footprint of the main building.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 并联将两个重叠的形状合并为一个。这个任务可以通过处理工具箱轻松完成。在这个菜谱中，我们将合并覆盖建筑的轮廓与主建筑的足迹。
- en: Getting ready
  id: totrans-400
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You can download the building files from [https://geospatialpython.googlecode.com/svn/union.zip](https://geospatialpython.googlecode.com/svn/union.zip)
    and extract them to a directory named `/qgis_data/union`.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从[https://geospatialpython.googlecode.com/svn/union.zip](https://geospatialpython.googlecode.com/svn/union.zip)下载建筑文件，并将其提取到名为`/qgis_data/union`的目录中。
- en: How to do it...
  id: totrans-402
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'All we need to do is run the `qgis:union` algorithm, as follows:'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的只是运行`qgis:union`算法，如下所示：
- en: Start QGIS.
  id: totrans-404
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动QGIS。
- en: From the **Plugins** menu, select **Python Console**.
  id: totrans-405
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**插件**菜单中选择**Python控制台**。
- en: 'Import the `processing` module:'
  id: totrans-406
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`processing`模块：
- en: '[PRE84]'
  id: totrans-407
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'Now, run the algorithm by specifying the two input shapes and a single output
    file:'
  id: totrans-408
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，通过指定两个输入形状和一个输出文件来运行算法：
- en: '[PRE85]'
  id: totrans-409
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: How it works...
  id: totrans-410
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作...
- en: As you can tell from the structure of the command, this tool can only combine
    two shapes at once. It finds where the two shapes meet and then removes the overlap,
    joining them at the meeting point.
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从命令的结构中可以看出，此工具一次只能合并两个形状。它找到两个形状相交的地方，然后移除重叠部分，在交点处将它们连接起来。
- en: 'In the original data, the shapefile starts out as two distinct shapes, as shown
    in this image:'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 在原始数据中，形状文件最初是两个不同的形状，如图所示：
- en: '![How it works...](img/00026.jpeg)'
  id: totrans-413
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/00026.jpeg)'
- en: 'Once the union is complete, the shapes are now one shapefile, with the overlap
    being a separate feature, as shown in this image:'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦合并完成，形状现在是一个形状文件，重叠部分是一个单独的特征，如图所示：
- en: '![How it works...](img/00027.jpeg)'
  id: totrans-415
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/00027.jpeg)'
- en: Rasterizing a vector layer
  id: totrans-416
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 栅格化矢量层
- en: Sometimes, a raster dataset is the most efficient way to display a complex vector
    that is merely a backdrop in a map. In these cases, you can rasterize a vector
    layer to turn it into an image.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，栅格数据集是显示复杂矢量数据（在地图中仅作为背景）的最有效方式。在这些情况下，你可以栅格化矢量层将其转换为图像。
- en: Getting ready
  id: totrans-418
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will demonstrate how to rasterize a vector layer using the following contour
    shapefile, which you can download from [https://geospatialpython.googlecode.com/svn/contour.zip](https://geospatialpython.googlecode.com/svn/contour.zip).
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将演示如何使用以下等高线形状文件栅格化矢量层，您可以从[https://geospatialpython.googlecode.com/svn/contour.zip](https://geospatialpython.googlecode.com/svn/contour.zip)下载该文件。
- en: Extract it to your `/qgis_data/rasters` directory.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 将其提取到您的`/qgis_data/rasters`目录中。
- en: How to do it...
  id: totrans-421
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We will run the `gdalogr:rasterize` algorithm to convert this vector data to
    a raster, as follows:'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将运行`gdalogr:rasterize`算法将此矢量数据转换为栅格，如下所示：
- en: Start QGIS.
  id: totrans-423
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动QGIS。
- en: From the **Plugins** menu, select **Python Console**.
  id: totrans-424
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**插件**菜单中选择**Python控制台**。
- en: 'Import the `processing` module:'
  id: totrans-425
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`processing`模块：
- en: '[PRE86]'
  id: totrans-426
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'Run the algorithm, specifying the input data, the attribute from which raster
    values need to be drawn, `0` in order to specify pixel dimensions for the output
    instead of map dimensions, width and height, and finally the output raster name:'
  id: totrans-427
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行算法，指定输入数据、需要绘制栅格值的属性、`0`以指定输出像素维度而不是地图维度、宽度和高度，以及最终的输出栅格名称：
- en: '[PRE87]'
  id: totrans-428
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: How it works...
  id: totrans-429
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: If you want to specify the output dimensions in map units, use `1` instead of
    `0`. Note that the symbology of the layer becomes frozen once you convert it to
    a raster. The raster is also no longer dynamically scalable.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想以地图单位指定输出维度，请使用`1`代替`0`。请注意，一旦您将其转换为栅格，该层的符号就会变得固定。栅格也不再是动态可缩放的。
- en: 'The following image shows the rasterized output of the elevation contour shapefile:'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图像显示了高程等高线形状文件的栅格化输出：
- en: '![How it works...](img/00028.jpeg)'
  id: totrans-432
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/00028.jpeg)'
