- en: Chapter 3. Editing Vector Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a vector layer in memory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a point feature to a vector layer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a line feature to a vector layer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a polygon feature to a vector layer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a set of attributes to a vector layer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a field to a vector layer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Joining a shapefile attribute table to a CSV file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Moving vector layer geometry
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing a vector layer attribute
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting vector layer geometry
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting a vector layer field
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting vector layer attributes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reprojecting a vector layer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Converting a shapefile to Keyhole Markup Language (KML)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Merging shapefiles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Splitting a shapefile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generalizing a vector layer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dissolving vector shapes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing a union on vector shapes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rasterizing a vector layer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter details how to edit QGIS vector data using the Python API. The
    `QgsVectorLayer` object contains the basics of adding, editing, and deleting features.
    All other geospatial operations are accessed through the **Processing Toolbox**
    or even through custom scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a vector layer in memory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, you need to create a temporary data set for quick output or as an
    intermediate step in a more complex operation without the overhead of actually
    writing a file to disk. PyQGIS employs **memory layers** that allow you to create
    a complete vector data set, including the geometry, fields, and attributes, virtually.
    Once the memory layer is created, you can work with it in the same way you would
    work with a vector layer loaded from disk.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe entirely runs inside the PyQGIS console, so no preparation or external
    resources are required.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will create a `Point` vector layer, named `Layer 1` with a few fields and
    then validate it:'
  prefs: []
  type: TYPE_NORMAL
- en: Start QGIS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Plugins** menu, select **Python Console**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Python console, create a `QgsVectorLayer`, including fields, and specify
    it as a memory data provider:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, validate the layer and ensure that the console returns `True`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `QgsVectorLayer` requires three arguments. The last argument specifies the
    type, which in this case is `memory`. The second argument specifies the layer
    name. Normally, the first argument is the path to the file on disk, which is used
    to create the layer. In the case of the memory layer, the first argument becomes
    the construction string for the layer. The format uses query parameters that follow
    the convention `key = value`. We first specify the coordinate reference system
    and then specify the fields we want. In this case, we specify the first field,
    a string for city names, and then an integer field for population.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can easily see how describing a layer's attribute table structure in a string
    can become unwieldy. You can also use a Python-ordered dictionary to build the
    string dynamically, as shown in the following steps.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, you need to import the `OrderedDict` container, which remembers the
    order in which keys are inserted:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, build an ordered dictionary that contains attribute names and types:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, build a string by joining the output of a Python list comprehension that
    loops through the ordered dictionary:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, use this string to define the layer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Adding a point feature to a vector layer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe performs the simplest possible edit to a vector layer instantiated
    from a shapefile. We will add a point to an existing point layer.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, download the zipped shapefile from [https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip](https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip).
  prefs: []
  type: TYPE_NORMAL
- en: Extract the `.shp`, `.shx`, and `.dbf` files to the `/qgis_data/nyc` directory.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will load the vector layer from the shapefile, create a new geometry object
    as a point, create a new feature, set the geometry, and add it to the layer''s
    data provider. Finally, we will update the extent of the layer to make sure that
    the bounding box of the layer encapsulates the new point:'
  prefs: []
  type: TYPE_NORMAL
- en: Start QGIS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Plugins** menu, select **Python Console**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, load the layer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, will access the layer''s data provider:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create a new point using the `QgsGeometry` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, will create a new `QgsFeature` object to house the geometry:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, set the geometry of the feature using our point:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, place the features into the layer''s feature list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, update the layer''s extent to complete the addition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PyQGIS abstracts the points within a layer into four levels. At the lowest level
    is the `QgsPoint` object, which contains nothing more than the coordinates of
    the point. This object is added to an abstract `QgsGeometry` object. This object
    becomes the geometric part of a `QgsFeature` object, which also has the ability
    to store and manage attributes. All the features are managed by the `QgsDataProvider`
    object. The data provider manages the geospatial aspect of a layer to separate
    that aspect from styling and other presentation-related portions. QGIS has another
    editing approach in Python, which is called an **editing buffer**. When you use
    an editing buffer, the changes can be displayed, but they are not permanent until
    you commit them. The most common use case for this editing method is in GUI applications
    where the user may decide to roll back the changes by cancelling the editing session.
    The *PyQGIS Developer Cookbook* has an example of using and editing buffers in
    Python, and is available at [http://docs.qgis.org/2.6/en/docs/pyqgis_developer_cookbook/vector.html](http://docs.qgis.org/2.6/en/docs/pyqgis_developer_cookbook/vector.html).
  prefs: []
  type: TYPE_NORMAL
- en: Adding a line feature to a vector layer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Adding a line to a vector layer in QGIS is identical to adding a single point,
    but here you just have to add more points to the `QgsGeometry` object.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, you will need to download a zipped line shapefile that contains
    two line features from [https://geospatialpython.googlecode.com/svn/paths.zip](https://geospatialpython.googlecode.com/svn/paths.zip).
  prefs: []
  type: TYPE_NORMAL
- en: Extract the ZIP file to a directory named `paths` in your `/qgis_data` directory.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we will load the line layer from the shapefile, build a list
    of points, create a new geometry object, and add the points as a line. We will
    also create a new feature, set the geometry, and add it to the layer''s data provider.
    Finally, we will update the extent of the layer to make sure that the bounding
    box of the layer encapsulates the new feature:'
  prefs: []
  type: TYPE_NORMAL
- en: Start QGIS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Plugins** menu, select **Python Console**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, load the line layer and ensure that it is valid:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, access the layer''s data provider:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, build our list of points for a new line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, create a geometry object from the line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a feature and set its geometry to the line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, add the feature to the layer data provider and update the extent:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As with all the geometry in QGIS, we use the four-step process of building points,
    geometry, feature, and data provider to add the line. Interestingly, the `QgsGeometry`
    object accepts Python lists for the collection of points instead of creating a
    formal object, as is done with the `QgsPoint` object.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a polygon feature to a vector layer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll add a polygon to a layer. A polygon is the most complex
    kind of geometry. However, in QGIS, the API is very similar to a line.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we'll use a simple polygon shapefile, which you can download
    as a ZIP file from [https://geospatialpython.googlecode.com/files/polygon.zip](https://geospatialpython.googlecode.com/files/polygon.zip).
  prefs: []
  type: TYPE_NORMAL
- en: Extract this shapefile to a folder called `polygon` in your `/qgis_data` directory.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe will follow the standard PyQGIS process of loading a layer, building
    a feature, and adding it to the layer''s data provider, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Start QGIS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Plugins** menu, select **Python Console**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, load the layer and validate it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, access the layer''s data provider:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, build a list of points for the polygon:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create a geometry object and ingest the points as a polygon. We nest
    our list of points in another list because a polygon can have inner rings, which
    will consist of additional lists of points being added to this list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, build the feature object and add the points:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, add the feature to the layer''s data provider and update the extents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Adding a polygon is very similar to adding a line, with one key difference that
    is a common pitfall. The last point must be identical to the first point in order
    to close the polygon. If you don't repeat the first point, you won't receive any
    errors, but the polygon will not be displayed in QGIS, which can be difficult
    to troubleshoot.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a set of attributes to a vector layer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each QGIS feature has two parts, the geometry and the attributes. In this recipe,
    we'll add an attribute for a layer from an existing dataset.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will use a point shapefile with museum data for New York City, which you
    can download as a ZIP file from [https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip](https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip).
  prefs: []
  type: TYPE_NORMAL
- en: Extract this shapefile to the `/qgis_data/nyc` directory.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A feature must have geometry, but it does not require attributes. So, we will
    create a new feature, add some attributes, and then add everything to the layer,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Start QGIS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Plugins** menu, select **Python Console**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, load the layer and validate it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, access the layer''s data provider so that we can get the list of fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, create a point geometry, which in this case is a new museum:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, get the `fields` object for the layer that we''ll need to create a new
    feature for:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, create a new feature and initialize the attributes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, set the geometry of our new museum feature:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we are able to add a new attribute. Adding an attribute is similar to
    updating a Python dictionary, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we add the feature to the layer and update the extents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PyQGIS attributes are defined as an ordered `array`. The syntax for referencing
    a field is similar to the syntax for a Python dictionary. We use the layer's data
    provider object to perform the actual editing. When we use this approach, no signals
    are triggered at the layer object level. If we are just trying to edit data on
    the filesystem, that's okay, but if the layer is going to be added to the map
    canvas for display or user interaction, then you should use the editing buffer
    in the `QgsVectorLayer` object. This editing buffer allows you to commit or roll
    back changes and also keeps track of the state of the layer when things are changed.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a field to a vector layer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe demonstrates how to add a new field to a layer. Each field represents
    a new column in a dataset for which each feature has a new attribute. When you
    add a new attribute, all the features are set to `NULL` for that field index.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will use the New York City museums' shapefile used in other recipes, which
    you can download as a ZIP file from [https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip](https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip).
  prefs: []
  type: TYPE_NORMAL
- en: Extract this shapefile to `/qgis_data/nyc`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'All the data management for a layer is handled through the layer''s data provider
    and the fields are no different. We will load the layer, access the data provider,
    define the new field, and finalize the change, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Start QGIS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Plugins** menu, select **Python Console**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, you must import the `Qt` library''s data types, which PyQGIS uses to
    specify the layer field''s data types:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, load and validate the layer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, access the layer data provider:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, add a Python list of `QgsField` objects, which defines the field name
    and type. In this case, we''ll add one field named `Admission` as a `Double`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, update the fields to complete the change:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The nomenclature used for the `fields` and `attributes` in QGIS is a little
    inconsistent and can be confusing if you've used other GIS packages. In QGIS,
    a column is a `field` that has a name and a type. The `attribute table` holds
    a value for each `field` column and each `feature` row. However, in the `QgsVectorDataProvider`
    object, you use the `addAttributes()` method to add a new `field` column. Also,
    in other GIS software, you may see the use of the word `field` and `attribute`
    reversed.
  prefs: []
  type: TYPE_NORMAL
- en: Joining a shapefile attribute table to a CSV file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Joining attribute tables to other database tables allows you to use a spatial
    dataset in order to reference a dataset without any geometry, using a common key
    between the data tables. A very common use case for this is to join a vector dataset
    of census attributes to a more detailed census attribute dataset. The use case
    we will demonstrate here links a US census track file to a detailed CSV file that
    contains more in-depth information.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, you will need a census `tract` shapefile and a CSV file containing
    the appropriate census data for the shapefile. You can download the sample data
    set from [https://geospatialpython.googlecode.com/svn/census.zip](https://geospatialpython.googlecode.com/svn/census.zip).
  prefs: []
  type: TYPE_NORMAL
- en: Extract this data to a directory named `/qgis_data/census`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The join operation is quite involved. We''ll perform this operation and save
    the layer as a new shapefile with the joined attributes. Then we''ll load the
    new layer and compare the field count to the original layer to ensure that the
    join occurred. We''ll use the terms `target layer` and `join layer`. The `target
    layer` will be the shapefile, and the `join layer` will be a CSV with some additional
    fields we want to add to the shapefile. To do this, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Start QGIS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Plugins** menu, select **Python Console**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, load the county''s `census` track layer and validate it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, load the CSV file as a layer and validate it as well:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once this is done, you must add both the layers to the map registry for the
    two layers to interact for the join. However, set the visibility to `False`, so
    the layers do not appear on the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, you must create a special join object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The join object needs the layer ID of the CSV file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, specify the key field from the CSV file whose values correspond to the
    values in the shapefile:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, specify the corresponding field in the shapefile:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the `memoryCache` property to `True` in order to speed up access to the
    joined data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the join to the layer now:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, write out the joined shapefile to a new file on disk:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, load the new shapefile back in as a layer for verification:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify that the field count in the original layer is `12`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, verify that the new layer has a field count of `142` from the join:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe reaches out to the very edge of the PyQGIS API, forcing you to use
    some workarounds. Most recipes for data manipulation can be performed programmatically
    without writing data to disk or loading layers onto the map, but joins are different.
    Because the `QgsVectorJoinInfo` object needs the layer ID of the CSV layer, we
    must add both the layers to the map layer registry. Fortunately, we can do this
    without making them visible, if we are just trying to write a data manipulation
    script. A `join` is designed to be a temporary operation to query a dataset. Oddly,
    PyQGIS lets you create the `join`, but you cannot query it. This limitation is
    the reason why if you want to work with the joined data, you must write it to
    a new shapefile and reload it. Fortunately, PyQGIS allows you to do that.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find an alternate method that works around the PyQGIS limitation in
    a Processing Toolbox script, which manually matches the joined data in Python,
    at [https://github.com/rldhont/Quantum-GIS/blob/master/python/plugins/processing/algs/qgis/JoinAttributes.py](https://github.com/rldhont/Quantum-GIS/blob/master/python/plugins/processing/algs/qgis/JoinAttributes.py).
  prefs: []
  type: TYPE_NORMAL
- en: Moving vector layer geometry
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, you need to change the location of a feature. You can do this by
    deleting and re-adding the feature, but PyQGIS provides a simple way to change
    the geometry.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will need the New York City museums' shapefile, which you can download as
    a ZIP file from [https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip](https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip).
  prefs: []
  type: TYPE_NORMAL
- en: Extract this shapefile to `/qgis_data/nyc.`
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will load the shapefile as a vector layer, validate it, define the feature
    ID we want to change, create the new geometry, and change the feature in the layer.
    To do this, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Start QGIS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Plugins** menu, select **Python Console**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, load the layer and validate it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, define the feature ID we are interested in changing:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, create the new point geometry, which will become the new location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, change the geometry and replace it with our new geometry, specifying
    the feature ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `changeGeometryValues()` method makes editing a snap of the fingers. If
    we had to delete and then re-add the feature, we would have to go through the
    trouble of reading the attributes, preserving them, and then re-adding them with
    the new feature. You must, of course, know the feature ID of the feature you want
    to change. How you determine this ID depends on your application. Typically, you
    will query the attributes to find a specific value, or you can do a spatial operation
    of some sort.
  prefs: []
  type: TYPE_NORMAL
- en: Changing a vector layer feature's attribute
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The process to change an attribute in a feature is straightforward and well-supported
    by the PyQGIS API. In this recipe, we'll change a single attribute, but you can
    change as many attributes of a feature as desired at once.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will need the New York City museums' shapefile used in other recipes, which
    you can download as a ZIP file from [https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip](https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip).
  prefs: []
  type: TYPE_NORMAL
- en: Extract this shapefile to `/qgis_data/nyc`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will load the shapefile as a vector layer, validate it, define the feature
    IDs of the fields we want to change, get the index of the field names that we
    will change, define the new attribute value as an attribute index and value, and
    change the feature in the layer. To do this, we need to perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Start QGIS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Plugins** menu, select **Python Console**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, load the layer and validate it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, define the feature IDs you want to change:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, get the index of the fields you want to change, which are the telephone
    number and city name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, create the Python dictionary for the attribute index and the new value,
    which in this case is an imaginary phone number:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, use the layer''s data provider to update the fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Changing attributes is very similar to changing the geometry within a feature.
    We explicitly name the feature IDs in this example, but in a real-world program,
    you would collect these IDs as a part of some other process output, such as a
    spatial selection. An example of this type of spatial selection is available in
    the *Filtering a layer by Geometry* recipe, in [Chapter 2](part0028_split_000.html#page
    "Chapter 2. Querying Vector Data"), *Querying Vector Data*.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting a vector layer feature
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll completely remove a feature, including the geometry and
    attributes, from a layer.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will need the New York City museums' shapefile used in other recipes, which
    you can download as a ZIP file from [https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip](https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip).
  prefs: []
  type: TYPE_NORMAL
- en: Extract this shapefile to `/qgis_data/nyc`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'All we need to do is load the layer and then delete the desired features by
    ID, using the layer''s data provider:'
  prefs: []
  type: TYPE_NORMAL
- en: Start QGIS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Plugins** menu, select **Python Console**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, load and validate the layer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, specify a Python list containing feature IDs. In this case, we have two:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This operation cannot be simpler or better designed. There are a number of ways
    in which we can programmatically fill a Python list with feature IDs. For example,
    we can use the [Chapter 2](part0028_split_000.html#page "Chapter 2. Querying Vector
    Data"), *Filtering a Layer by Attributes* in this recipe. Then, we just pass this
    list to the layer's data provider and we are done.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting a vector layer attribute
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll wipe out an entire attribute and all the feature fields
    for a vector layer.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will need the New York City museums' shapefile used in other recipes, which
    you can download as a ZIP file from [https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip](https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip).
  prefs: []
  type: TYPE_NORMAL
- en: Extract this shapefile to `/qgis_data/nyc`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This operation is straight forward. We''ll load and validate the layer, use
    the layer''s data provider to delete the attribute by index, and finally, we will
    update all the fields to remove the orphaned values. To do this, we need to perform
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Start QGIS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Plugins** menu, select **Python Console**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, load and validate the layer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, delete the first attribute:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, update the fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Because we are changing the actual structure of the layer data, we must call
    the `updateFields()` method of the layer to remove the field values which no longer
    have an attribute.
  prefs: []
  type: TYPE_NORMAL
- en: Reprojecting a vector layer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will use the Processing Toolbox in QGIS to reproject a layer to a different
    coordinate system.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we'll need the Mississippi cities' shapefile in the Mississippi
    Trans Mercator projection (EPSG 3814), which can be downloaded as a ZIP file from
    [https://geospatialpython.googlecode.com/files/MSCities_MSTM.zip](https://geospatialpython.googlecode.com/files/MSCities_MSTM.zip).
  prefs: []
  type: TYPE_NORMAL
- en: Extract the zipped shapefile to a directory named /`qgis_data/ms`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To reproject the layer, we''ll simply call the `qgis:reprojectlayer` processing
    algorithm, specifying the input shapefile, the new projection, and the output
    file name. To do this, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Start QGIS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Plugins** menu, select **Python Console**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, you need to import the processing module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, run the reprojection alogoritm, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The source data starts out in EPSG 3814, but we want to project it to WGS 84
    Geographic, which is commonly used to deal with global datasets and is usually
    the default coordinate reference system for GPS devices. The target EPSG code
    is 4326\. Dealing with map projections can be quite complex. This QGIS tutorial
    has some more examples and explains more about map projections at [http://manual.linfiniti.com/en/vector_analysis/reproject_transform.html](http://manual.linfiniti.com/en/vector_analysis/reproject_transform.html).
  prefs: []
  type: TYPE_NORMAL
- en: Converting a shapefile to KML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll convert a layer to KML. KML is an **Open Geospatial Consortium**
    (**OGC**) standard and is supported by the underlying OGR library used by QGIS.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this recipe, download the following zipped shapefile and extract it to
    a directory named `/qgis_data/hancock`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://geospatialpython.googlecode.com/files/hancock.zip](https://geospatialpython.googlecode.com/files/hancock.zip)'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To convert a shapefile to the KML XML format, we''ll load the layer and then
    use the `QgsVectorFileWriter` object to save it as KML:'
  prefs: []
  type: TYPE_NORMAL
- en: Start QGIS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Plugins** menu, select **Python Console**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First load the layer and validate it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, establish the destination CRS. KML should always be in EPS:4326:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, use the file writer to save it as a KML file by specifying the file type
    as KML:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will end up with a KML file in the directory next to your shapefile. KML
    supports styling information. QGIS uses some default styling information that
    you can change, either by hand using a text editor, or programmatically using
    an XML library such as Python's ElementTree. KML is one of many standard vector
    formats you can export using this method.
  prefs: []
  type: TYPE_NORMAL
- en: Merging shapefiles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Merging shapefiles with matching projections and attribute structures is a very
    common operation. In QGIS, the best way to merge vector datasets is to use another
    GIS system included with QGIS on Windows and OSX called **SAGA**. On other platforms,
    you must install SAGA separately and activate it in the Processing Toolbox configuration.
    In PyQGIS, you can access SAGA functions through the Processing Toolbox. **SAGA**
    is yet another open source GIS that is similar to QGIS. However, both packages
    have strengths and weaknesses. By using SAGA through the Processing Toolbox, you
    can have the best of both systems.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we'll merge some building footprint shapefiles from adjoining
    areas into a single shapefile. You can download the sample dataset from [https://geospatialpython.googlecode.com/files/tiled_footprints.zip](https://geospatialpython.googlecode.com/files/tiled_footprints.zip).
  prefs: []
  type: TYPE_NORMAL
- en: Extract the zipped shapefiles to a directory named `/qgis_data/tiled_footprints`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will locate all the `.shp` files in the data directory and hand them to the
    `saga:mergeshapeslayers object i`n order to merge them.
  prefs: []
  type: TYPE_NORMAL
- en: Start QGIS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Plugins** menu, select **Python Console**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the Python `glob` module for wildcard file matching:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, import the processing module for the merge algorithm:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, specify the path of our data directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Locate all the .shp files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, specify the output name of the merged shapefile:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, run the algorithm that will load the merged shapefile on to the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The algorithm accepts a base file and then a semicolon-separated list of additional
    files to be merged, and it finally accepts the output filename. The `glob` module
    creates a list of the files. To get the base file, we use the list `pop()` method
    to get the first filename. Then, we use the Python string's `join()` method to
    make the required delimited list for the rest.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: QGIS has its own merge method available through the `processing` module called
    `qgis:mergevectorlayers`, but it is limited because it only merges two files.
    The SAGA method allows any number of files to be merged.
  prefs: []
  type: TYPE_NORMAL
- en: Splitting a shapefile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, you need to split a shapefile in order to break a larger dataset
    into more manageable sizes or to isolate a specific area of interest. There is
    a script in the Processing Toolbox that splits a shapefile by attribute. It is
    very useful, even though it is provided as an example of how to write processing
    scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will split a census tract shapefile by county. You can download the sample
    zipped shapefile from [https://geospatialpython.googlecode.com/files/GIS_CensusTract.zip](https://geospatialpython.googlecode.com/files/GIS_CensusTract.zip).
  prefs: []
  type: TYPE_NORMAL
- en: Extract the zipped shapefile to a directory named `/qgis_data/census`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You also need the following script for the Processing Toolbox:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, use the following steps to add the script to the Processing Toolbox:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the script to your `/qgis_data/` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the QGIS **Processing Toolbox**, open the **Scripts** tree menu and then
    go to the **Tools** submenu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, double-click on the **Add script from file** command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **File** dialog, navigate to the script. Select the **Script** and click
    on the **Open** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The stage is set now. Perform the steps in the next section to split the shapefile.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe is as simple as running the algorithm and specifying the filename
    and data attribute. Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Start QGIS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Plugins** menu, select **Python Console**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `processing` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define your data directory as a variable to shorten the processing command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, run the algorithm:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The algorithm will dump the split files in the data directory, numbered sequentially.
  prefs: []
  type: TYPE_NORMAL
- en: Generalizing a vector layer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Generalizing the geometry, also known as simplifying, removes points from a
    vector layer to reduce the space required to store the data on disk, the bandwidth
    needed to move it over a network, and the processing power required to perform
    analysis with it or display it in QGIS. In many cases, the geometry of a layer
    contains redundant points along with straight lines that can be removed without
    changing the spatial properties of a layer, with the exception of topology constraints.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will use a boundary file for the state of Mississippi, which
    you can download from [https://geospatialpython.googlecode.com/files/Mississippi.zip](https://geospatialpython.googlecode.com/files/Mississippi.zip).
  prefs: []
  type: TYPE_NORMAL
- en: Extract the zipped shapefile to a directory named `/qgis_data/ms`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Generalizing is native to QGIS, but we will access it in PyQGIS through the
    Processing Toolbox using the `qgis:simplifygeometries` algorithm, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Start QGIS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Plugins** menu, select **Python Console**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `processing` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, run the `processing` algorithm, specifying the algorithm name, input data,
    tolerance value, spacing between points — which defines how close two points are
    in map units before one is deleted — and the output dataset''s name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The simplicity of the `simplifygeometries` command makes the operation look
    simple. However, the simplification is itself quite complex. The same settings
    rarely produce desirable results across multiple datasets.
  prefs: []
  type: TYPE_NORMAL
- en: 'The shapefile in this recipe starts out quite complex with hundreds of points,
    as seen in the following visualization:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/00022.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The simplified version has only `10` points, as seen in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/00023.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Dissolving vector shapes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dissolving shapes can take two different forms. You can combine a group of adjoining
    shapes by the outermost boundary of the entire dataset, or you can also group
    the adjoining shapes with the same attribute value.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Download the GIS census tract shapefile, which contains tracts for several counties
    from [https://geospatialpython.googlecode.com/files/GIS_CensusTract.zip](https://geospatialpython.googlecode.com/files/GIS_CensusTract.zip).
  prefs: []
  type: TYPE_NORMAL
- en: Extract it to your `/qgis_data` directory, in a directory called `census`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will use the Processing Toolbox for this recipe and specifically a native
    QGIS algorithm called `dissolve`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Start QGIS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Plugins** menu, select **Python Console**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `processing` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, run the `dissolve` algorithm, specifying the input data—`False` to specify
    that we don''t want to dissolve all the shapes into one but to use an attribute
    instead—the attribute we want to use, and the output filename:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By only changing the boolean in the statement to `True`, we can dissolve all
    adjoining shapes into one. It is also important to note that QGIS will assign
    the fields of the first shape it encounters in each group to the final shape.
    In most cases, this will make the attributes virtually useless. This operation
    is primarily a spatial task.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see that each county boundary has a number of census tracts in the
    original layer, as shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/00024.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the shapes are dissolved, you are left with only the county boundaries,
    as shown in this image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/00025.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Performing a union on vector shapes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A union turns two overlapping shapes into one. This task can be easily accomplished
    with the Processing Toolbox. In this recipe, we'll merge the outline of a covered
    building with the footprint of the main building.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can download the building files from [https://geospatialpython.googlecode.com/svn/union.zip](https://geospatialpython.googlecode.com/svn/union.zip)
    and extract them to a directory named `/qgis_data/union`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'All we need to do is run the `qgis:union` algorithm, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Start QGIS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Plugins** menu, select **Python Console**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `processing` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, run the algorithm by specifying the two input shapes and a single output
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you can tell from the structure of the command, this tool can only combine
    two shapes at once. It finds where the two shapes meet and then removes the overlap,
    joining them at the meeting point.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the original data, the shapefile starts out as two distinct shapes, as shown
    in this image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/00026.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the union is complete, the shapes are now one shapefile, with the overlap
    being a separate feature, as shown in this image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/00027.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Rasterizing a vector layer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, a raster dataset is the most efficient way to display a complex vector
    that is merely a backdrop in a map. In these cases, you can rasterize a vector
    layer to turn it into an image.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will demonstrate how to rasterize a vector layer using the following contour
    shapefile, which you can download from [https://geospatialpython.googlecode.com/svn/contour.zip](https://geospatialpython.googlecode.com/svn/contour.zip).
  prefs: []
  type: TYPE_NORMAL
- en: Extract it to your `/qgis_data/rasters` directory.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will run the `gdalogr:rasterize` algorithm to convert this vector data to
    a raster, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Start QGIS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Plugins** menu, select **Python Console**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `processing` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the algorithm, specifying the input data, the attribute from which raster
    values need to be drawn, `0` in order to specify pixel dimensions for the output
    instead of map dimensions, width and height, and finally the output raster name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you want to specify the output dimensions in map units, use `1` instead of
    `0`. Note that the symbology of the layer becomes frozen once you convert it to
    a raster. The raster is also no longer dynamically scalable.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following image shows the rasterized output of the elevation contour shapefile:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/00028.jpeg)'
  prefs: []
  type: TYPE_IMG
