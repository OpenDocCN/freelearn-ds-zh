- en: Cloud Geodatabase Analysis and Visualization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will cover **CARTOframes**, a Python package released by location
    intelligence software company CARTO in November 2017\. It offers a Python interface
    for working with the CARTO stack, enabling integration of CARTO maps, analysis,
    and data services into data science workflows.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The specifics of the CARTOframes Python library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting familiar with the CARTO stack and how CARTOframes interacts with different
    parts of it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to install CARTOframes, its package requirements, and documentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The different package dependencies of CARTOframes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to get a CARTO API key
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a CARTO Builder account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Virtual environments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Jupyter Notebook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing GeoPandas
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Python package created with data scientists in mind, CARTOframes is a data
    science tool that combines CARTO's SaaS offerings and web mapping tools with Python
    data science workflows. Released in late 2017 by CARTO ([www.carto.com)](https://carto.com),
    it is available for download through GitHub and the **Python Package Index** (**PyPI**)
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: The package can be seen as a way to integrate CARTO elements with data science
    workflows, using Jupyter Notebooks as a working environment. This not only makes
    it attractive to use for data scientists, but also allows you to save and distribute
    code and workflows through Jupyter Notebooks. These data science workflows can
    be extended by using CARTO's services, such as hosted, dynamic, or static maps
    and datasets from CARTO's Data Observatory—all available through CARTO's cloud
    platform. This platform is accessed through an API key, which needs to be used
    when using CARTOframes in a Jupyter Notebook. We'll describe how to get an API
    key and how to install the CARTOframes package shortly.
  prefs: []
  type: TYPE_NORMAL
- en: The package offers functionality to read and write different types of spatial
    data. For instance, you can write `pandas` dataframes to CARTO tables, as well
    as read CARTO tables and queries into `pandas` dataframes. The CARTOframes package
    brings external data location data services from CARTO into the Jupyter Notebook,
    such as location data services, cloud-based data storage, CARTOColors (a set of
    custom color palettes built on top of well-known standards for color use on maps),
    PostGIS, and animated maps.
  prefs: []
  type: TYPE_NORMAL
- en: One good reason for using CARTOframes is because of its plotting capabilities.
    It is a good alternative to other map-plotting packages such as GeoPandas, `matplotlib`,
    Folio, and GeoNotebook. All these packages have their advantages and disadvantages.
    For example, `matplotlib` is not an easy package to learn and requires a lot of
    code for basic maps. This is not the case with CARTOframes, and the results look
    impressive, especially because of the use of colors, combined with dynamic images
    (time-lapses) and easy commands to read, write, query, plot and delete data.
  prefs: []
  type: TYPE_NORMAL
- en: How to install CARTOframes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The CARTOframes library can be best installed by starting Anaconda Navigator
    and creating a new environment. From there, you can open a terminal and use `pip`
    install, which will install the library for you. This is currently the only way
    to install it (there''s no `conda` support yet). Use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Additional resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CARTOframes documentation can be found, at: [http://CARTOframes.readthedocs.io/en/latest/](http://cartoframes.readthedocs.io/en/latest/).
  prefs: []
  type: TYPE_NORMAL
- en: 'The current version of CARTOframes is 0.5.5\. The PyPi repository for CARTOframes
    can be accessed here: [https://pypi.python.org/pypi/CARTOframes](https://pypi.python.org/pypi/cartoframes).'
  prefs: []
  type: TYPE_NORMAL
- en: 'There''s also a GitHub repository with additional information, as one of the
    many CARTO GitHub repositories: [https://github.com/CARTODB/CARTOframes.](https://github.com/CartoDB/cartoframes)'
  prefs: []
  type: TYPE_NORMAL
- en: Jupyter Notebooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is recommended to use CARTOframes in Jupyter Notebooks. In the example scripts
    later in this chapter, we''ll be using the CARTOframes package with other geospatial
    packages, so you might want to install it in a virtual environment together with
    GeoPandas, so that you''ll have access to its dependencies as well. Consult the
    installation guides for GeoPandas and other libraries in [Chapter 2](757a81a6-cc47-4f08-88d2-b50480eb32e6.xhtml),
    *Introduction to Geospatial Code Libraries*. You can install the Jupyter Notebook
    app in a separate Python environment with the following command, in a terminal
    window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The CARTO API key
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After installing CARTOframes, we need to create a CARTO API key in order to
    be able to use the functionality from the library. The library interacts with
    the CARTO infrastructure, similarly to the ArcGIS API for Python in [Chapter 9](399c3041-569f-400a-83f0-e13020a177cf.xhtml),
    *ArcGIS API for Python and ArcGIS Online*. The API key can be used for writing
    dataframes to an account, reading from private tables, and visualizing data on
    maps. CARTO provides API keys for education and nonprofit uses, among others.
    If you''re a student, you can get access to an API key by signing up to GitHub''s
    student developer pack: [https://education.github.com/pack. ](https://education.github.com/pack)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Another option is to become a CARTO ambassador:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://carto.com/community/ambassadors/.](https://CARTO.com/community/ambassadors/)'
  prefs: []
  type: TYPE_NORMAL
- en: Package dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'CARTOframes depends on a number of Python libraries that are installed automatically
    once you run the `pip` install command. The following Python libraries are installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ipython`: Provides a rich toolkit for using Python interactively'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`appdirs`: A small Python module for determining appropriate platform-specific
    directories'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`carto`: Provides an SDK around CARTO''s APIs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`chardet`: A universal encoding detector for Python 2 and 3'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`colorama`: Enables colored terminal text and cursor positioning in MS Windows'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`decorator`: Preserves the signature of decorated functions consistently across
    Python releases'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`future`: Offers a compatibility layer between Python 2 and Python 3'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`idna`: Offers support for **Internationalized Domain Names in Applications**
    (**IDNA**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ipython-genutils`: Vestigial utilities from IPython'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jedi`: An autocompletion tool for Python that can be used for text editors'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`numpy`: Performs array processing for numbers, strings, records, and objects'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pandas`: Offers powerful data structures for data analysis, time series, and
    statistics'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`parso`: A Python parser that supports error recovery for different Python
    versions, and more'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pickleshare`: A small shelve-like datastore with concurrency support'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`prompt-toolkit`: A library for building powerful interactive command lines
    in Python'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pygments`: A syntax highlighting package written in Python'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pyrestcli`: A generic REST client for Python'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`python-dateutil`: Offers extensions to the standard Python `datetime` module'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pytz`: Provides modern and historical world timezone definitions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`requests`: An HTTP `requests` library'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`simplegeneric`: Lets you define simple single-dispatch generic functions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`six`: A Python 2 and 3 compatibility library'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tqdm`: Offers a fast, extensible progress meter'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`traitlets`: A configuration system for Python applications'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`urllib3`: An HTTP library with thread-safe connection pooling, file post,
    and more'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wcwidth`: Measures the number of terminal column cells of wide-character codes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`webcolors`: A library for working with color names and color value formats
    defined by HTML and CSS'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The CARTO Data Observatory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can augment the CARTOframes library by using the CARTO Data Observatory,
    an online data service from CARTO. It provides three things—out-of-the-box location
    data, access to a catalog of analyzed data methods, and the opportunity to build
    location intelligence apps on top of fast APIs. This data service was created
    with the idea in mind that data available on the web has to be searchable, and
    therefore labeled well. To be able to find this data, provide a context to your
    data, and use it for spatial analysis is what is possible with this service.
  prefs: []
  type: TYPE_NORMAL
- en: The CARTO Data Observatory is available for CARTO enterprise users, which requires
    a paid subscription. In this chapter, we won't cover this option, but we mention
    it here as to give you an idea of what is possible with the CARTOframes library.
  prefs: []
  type: TYPE_NORMAL
- en: Signing up for a CARTO account
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To be able to use CARTOframes, and to interact with data stored in the cloud-based
    PostGIS database service that CARTO offers, it is necessary to sign up for a CARTO
    account. While free accounts are available, with limited storage capacity and
    access to existing data resources, it is necessary to have a paid account to use
    CARTOframes, as these accounts are provided API keys. The API key will be used
    by CARTOframes to identify the account, with each data request sent to the user's
    cloud geodatabase.
  prefs: []
  type: TYPE_NORMAL
- en: A free trial of CARTO
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By signing up, the account is initially a paid account with access to all CARTO
    features. The paid account offers a free 30-day trial that can be used to for
    evaluation purposes. Go to the site [https://carto.com/signup](http://carto.com/signup)
    and create an account:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9dd2dcdb-9ab0-4a3d-9c24-bbf172f2b1c9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the account has been created, the 30-day trial period begins. This will
    allow you to add data to the cloud database, or to access publicly available data
    from the CARTO library. It also allows you to easily publish a map. Click on the
    NEW MAP button to get started:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/72034ea5-69c4-483f-b163-1be4c3f298f5.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding a dataset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using the DATA LIBRARY tab, add the Portland building footprints to the map.
    Select the data set from the list, and then push Create Map. The dataset will
    be added to the account datasets tab, and to the map creation interface called
    Builder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d1ab5f89-5baa-4c17-8e10-a7b56944b76a.png)'
  prefs: []
  type: TYPE_IMG
- en: The dataset is added as a layer to the map. All aspects of the layer can be
    manipulated in the map editor, including the color of the layer, the attributes
    shown, the pop-up window, and more. The basemap can also be adjusted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Widgets, representing live data from attributes, can be added as well. I''ve
    added the US Census Tracts layer from the DATA LIBRARY to the map, and added a
    graphing widget that will display values from a selected attribute field. This
    graph is dynamic, and will adjust the values displayed based on the specific census
    tracts which are shown in the map window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/27049833-8a32-455e-97a9-2bcad929301f.png)'
  prefs: []
  type: TYPE_IMG
- en: Check out the other tabs in Builder, including DATA, ANALYSIS, STYLE, POP-UP, and LEGEND,
    to further customize the map. There are a number of adjustments and widgets that
    will make the data interactive. The map can also be made either public or private,
    and can be published to the web by pushing the PUBLISH button. CARTO's editors
    and data ingestion interface make it really easy to create and share maps.
  prefs: []
  type: TYPE_NORMAL
- en: The API key
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To connect to the CARTO account using CARTOframes, an API key is required.
    To access it, go to the account dashboard, click on the image in the upper right,
    and select the Your API keys link from the drop-down menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4c3e11e3-b0e6-4aeb-92b8-404730089c84.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The API key is a long string of text used to ensure that the scripts we will
    write can have access to the account and the datasets associated with it. When
    it is time to write scripts, copy the key text and assign it to a variable as
    a Python string within the script:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a0c47392-c9d3-4715-83d2-f9451d440ed4.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding a dataset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There is a handy method for adding data from your computer to the account.
    However, when adding shapefiles, all of the data files that make up the shapefile
    must be in a ZIP file. We''ll add the NBA arenas shapefile from [Chapter 11](e483966e-f5c7-47dd-a40c-9b8b6f807107.xhtml), *Flask
    and GeoAlchemy2*, as a ZIP file to the account. Click on the NEW DATASET button
    in the DATASETS area of your dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d07aa76d-d9d7-432a-a995-e141a3ba494b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the NEW DATASET button is pushed, and the CONNECT DATASET interface appears,
    click on BROWSE and navigate to the zipped file to upload it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d141f6df-1a86-432f-9824-72c5c031b29b.png)'
  prefs: []
  type: TYPE_IMG
- en: Upon completion of the upload process, the data will be given a URL and can
    be edited using Builder. It can also be edited using CARTOframes.
  prefs: []
  type: TYPE_NORMAL
- en: Now that the account is set up, and a dataset has been added from a local file
    as well as from the DATA LIBRARY, we need to set up the Python environment on
    our local machine to be able to connect to the data stored in the account.
  prefs: []
  type: TYPE_NORMAL
- en: Virtual environments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To manage the installation of CARTOframes and the other associated Python 3
    modules, we will be using the virtual environments package `virtualenv`. This
    Python module makes it easy to set up completely separate Python installations
    on the same computer. Using `virtualenv`, a copy of Python is created, and when
    activated, all modules that are installed are separate from the main Python installation
    (in other words, the modules installed inside a virtual environment will not be
    added to the main `site-packages` folder). This allows for a lot less package
    management headaches.
  prefs: []
  type: TYPE_NORMAL
- en: Installing virtualenv
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Installation of the `virtualenv` package is easy when using `pip` from PyPI
    ([pypi.org](http://pypi.org)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This command will add `virtualenv` and its supporting modules. Make sure that
    the main Python installation has been added to the path Windows environment variables
    so that `virtualenv` can be called from the command line.
  prefs: []
  type: TYPE_NORMAL
- en: Running virtualenv
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create the virtual environment, open a command line and enter the following
    command structure, `virtualenv {environment name}`*.* In this case, the name of
    the environment is `cartoenv`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b9f8c0a8-f588-40ac-85d4-0d419eae77cb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Inside the folder where `virtualenv` is created, a series of folders are generated
    with the code files necessary to support Python. There is also a `Lib` folder,
    which contains the `site-packages` folder that will hold all of the modules installed
    inside this virtual version of Python:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bb44e0fd-ef8d-4500-86cf-51804eaf0c00.png)'
  prefs: []
  type: TYPE_IMG
- en: Activating the virtual environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To start using the new virtual environment from the command line, pass the
    following argument inside the folder that holds the virtual environment. This
    will run the `activate` batch file, and will start the virtual environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the virtual environment is activated, the name of the environment will
    appear before the folder name, indicating that the commands are being run inside
    the environment and any changes that are performed (such as installing modules)
    will not affect the main Python installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In a Linux environment, the command source `{environment}/bin/activate` is
    used instead. When programming in Linux, the commands in the terminal would look
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'In either OS, to deactivate the virtual environment, pass the `deactivate`
    command. This will end the virtual session:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Installing modules in virtualenv
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Because each virtual environment is separate from the main Python installation,
    each environment must have the required modules installed. While this can seem
    like a pain, `pip` makes it quite easy. After setting up the first virtual environment,
    a `pip` command called `freeze` allows you to generate a file called `requirements.txt`.
    This file can be copied into a new virtual environment and using `pip` install,
    all of the listed modules will be added from PyPI.
  prefs: []
  type: TYPE_NORMAL
- en: 'To generate a `requirements.txt` file in the current folder, use this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'After the file has been copied into a new virtual environment folder, activate
    the environment and pass the following command to read from the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Modules to use
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this virtual environment, we will install the two modules CARTOframes and
    Jupyter. The second module will allow us to run Jupyter Notebooks, which are specialized
    browser-based coding environments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activate the virtual environment, and install the modules within the virtual
    environment with the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: All of the required modules will also be downloaded and installed, along with
    the two that we are installing directly. Using `pip` and `virtualenv` makes package
    installation and management simple and quick.
  prefs: []
  type: TYPE_NORMAL
- en: Using Jupyter Notebook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have covered the basic installation of Jupyter Notebook in [Chapter 1](23e9b6f4-e43b-4bf7-bc80-2c1537d5f760.xhtml), *Package
    Installation and Management* and in the previous chapter at various instances
    to run code and get the desired output.
  prefs: []
  type: TYPE_NORMAL
- en: Here, we will be using Jupyter Notebook for CARTOframes to connect to an account
    and analyze geospatial data and display it.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to an account
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the first code box, we will import the CARTOframes module, and pass the
    API key string along with the base URL, which is generated from your CARTO username
    as `https://{username}.carto.com`. In this case, the URL is `https://lokiintelligent.carto.com`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/591ae76b-2dd4-4178-8394-4f798f245af0.png)'
  prefs: []
  type: TYPE_IMG
- en: In this code block, the API key and the URL are passed to the `CartoContext`
    class, and a `CartoContext` connect object is returned and assigned to the variable
    `cc`. With this object, we can now interact with the datasets associated with
    our account, load datasets into the account, and even generate maps directly in
    the Jupyter Notebook.
  prefs: []
  type: TYPE_NORMAL
- en: Once the code has been entered into the section, push the Run button to execute
    the code in the current section. Any output will appear in an Out section, underneath
    the code run. This section can include maps, tables, and even graphs—Jupyter Notebooks
    are often used in scientific computing because of this ability to instantly produce
    graphs and to save them within the Notebook.
  prefs: []
  type: TYPE_NORMAL
- en: Saving credentials
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The CARTO account credentials can be saved and accessed later by using the
    `Credentials` library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Accessing a dataset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To access the NBA arenas dataset that we loaded into the account, we are going
    to use the `CartoContext` `read` method, passing the name of the dataset we want
    to interact with as a string. In a Jupyter Notebook In section, run the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Using `CartoContext`, the account is accessed. With the `cc` object, the `read`
    method creates a `DataFrame` object from the NBA `arenas` dataset. The `DataFrame`
    object is what is queried or updated.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `print` statement will produce a table with values from the NBA `arenas`
    dataset, which has been loaded into a CARTOframe object:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/117be600-7f09-4f7d-a4f1-deef661e8c40.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Individual columns can be access using dot notation (for example, `df.address1`)
    or using keys (for example, `df[''address1'']`):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/75f11b12-f0e7-4df9-aad7-a5323119f728.png)'
  prefs: []
  type: TYPE_IMG
- en: Selecting individual rows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To select a specific row within the Pandas dataframe derived from the CARTO
    account dataset, a conditional statement can be passed to the object in brackets.
    Here, the NBA `arenas` dataset''s team column is queried by passing the name of
    an NBA team as a parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Loading a CSV dataset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To load a dataset into the account using CARTOframes, we will use the `pandas` library
    again, which is installed with the Jupyter modules. Pandas allow us to read data
    from a CSV (and other file formats), loading it into a Pandas dataframe (a special
    data object that allows for a multitude of data-manipulation methods, as well
    as producing output). Then, using `CartoContext`, the dataframe is written (as
    a table) to the account:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This will write the CSV table, imported as a dataframe, into the CARTO account
    DATASETS section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/30feff43-aea0-466e-9788-d380d7aa3c60.png)'
  prefs: []
  type: TYPE_IMG
- en: The imported dataset will not be a geospatial table, but is instead a table
    that can be queried and joined to spatial data.
  prefs: []
  type: TYPE_NORMAL
- en: Loading a shapefile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Loading geospatial data manually into CARTO is easy, as we explored earlier.
    It's even easier when using CARTOframes, as it makes automated data management
    possible. New, updated data files or data from REST APIs can be converted into
    dataframes and written into the CARTO account.
  prefs: []
  type: TYPE_NORMAL
- en: Shapefiles require the installation of the GeoPandas library, as the geometry
    requires a GeoPandas `DataFrame` object for data management.
  prefs: []
  type: TYPE_NORMAL
- en: Installing GeoPandas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'GeoPandas, as discussed in [Chapter 5](0b3a2208-3881-479a-83a8-78be85b9c1d6.xhtml), *Vector
    Data Analysis*, is the geospatial compliment to Pandas. To be able to create dataframes
    objects from shapefiles, we have to make sure that GeoPandas is installed and
    added to the virtual environment. Use `pip install` to add the GeoPandas library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'If there are installation issues on Windows, pre-built binaries for GeoPandas
    and Fiona (which powers GeoPandas) are available here, along with many other Python
    libraries: [https://www.lfd.uci.edu/~gohlke/pythonlibs](https://www.lfd.uci.edu/~gohlke/pythonlibs).
    Install Fiona and GeoPandas from the wheels by downloading them, copying them
    into a folder, and using `pip install` to install from the wheel. For example,
    here, Fiona is installed from the wheel file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Writing to CARTO
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Writing the shapefile to the CARTO account requires only a `CartoContext` object,
    a file path, and the usual URL and API key combination. With GeoPandas now installed,
    the MLB Stadiums shapefile can be loaded into a GeoPandas `DataFrame`, and then
    written to the CARTO account using the `CartoContext` `write` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Log in to the CARTO account to confirm that the dataset has been added.
  prefs: []
  type: TYPE_NORMAL
- en: Loading CSV with geometry
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To ensure that a table (address data from OpenAddresses in this case) with
    latitude and longitude columns is imported as a geospatial dataset, we have to
    use the Shapely library''s `Point` class. Each `Point` geometry is generated from
    the `LON` and `LAT` fields of the address dataset which has been imported:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Ensure that the GeoPandas library is imported before CARTOframes to avoid import
    errors from the Fiona library.
  prefs: []
  type: TYPE_NORMAL
- en: Geospatial analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To perform geospatial analysis, using the cloud datasets, we can connect using
    CARTOframes and perform spatial queries using a combination of GeoPandas and Shapely.
    In this example, the NBA `arenas` dataset is compared against a US States shapefile
    using an intersects spatial query. If the `arena` object intersects with a state
    object, the name of the `arena` and the state are printed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Editing and updating datasets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Because CARTOframes incorporates the Pandas dataframes objects, which can be
    edited in memory, and writes to the datasets stored in the CARTO account, we can
    create scripts that will automate the upload of geospatial data. Datasets can
    be updated entirely, or individual rows and values can be updated using Pandas
    data methods such as `replace`. This, coupled with Builder, the CARTO web-map
    deployment tool, makes it easy to create GIS with a web-map frontend and cloud
    data storage that can be managed using scripting.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example code, the name of the state that contains the NBA `arena` is
    found using the `intersect` query. The names are added to a list, and the list
    is added to the `arena` dataframe as a new column called states. The geometry
    data stored in the `arenas` dataset are required to be converted into Shapely
    objects, using the `loads` module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: overwrite=True
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With each update to the datasets, the changes must be written to the CARTO
    account. To overwrite data in the cloud database with new data, the `overwrite`
    parameter must be set to `True`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Creating a map
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Because of the interactivity of Jupyter Notebooks, code and code output exist
    together. This is great when dealing with geospatial data, as it makes it easy
    to create a map of the data. In this example, the NBA `arenas` and MLB stadiums
    datasets are added to a map over a `BaseMap` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The output produced is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3a2534bd-e1eb-40d7-90bd-e46c4e72b82d.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covered the following topics. First, we introduced the CARTOframes
    Python library and discussed how it relates to other parts of the CARTO stack,
    such as CARTO Builder and CARTO Data Observatory. Next, we explained how to install
    the CARTOframes library, what other Python packages it depends on, and where to
    look for documentation. Because CARTOframes uses data from CARTO Builder, we explained
    how to set up a CARTO Builder account. In the example scripts that make up the
    rest of the chapter, we saw how the library integrates `pandas` dataframes, how
    to work with tables, and how to make maps and combine them with other geospatial
    libraries, such as Shapely and GeoPandas.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will cover another module that utilizes Jupyter Notebooks
    and cartographic visualizations, MapboxGL—Jupyter.
  prefs: []
  type: TYPE_NORMAL
