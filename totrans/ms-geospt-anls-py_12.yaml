- en: GeoDjango
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GeoDjango
- en: The Django Python web framework was made available in 2005 and has been steadily
    supported and improved throughout the years. One major improvement was additional
    support for spatial data types and queries. This effort produced GeoDjango, allowing
    Django to support geospatial database models and web views that utilize geospatial
    queries.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Django Python Web 框架于 2005 年推出，并在多年来持续得到支持和改进。一个主要改进是增加了对空间数据类型和查询的支持。这一努力产生了
    GeoDjango，使得 Django 能够支持地理空间数据库模型和利用地理空间查询的 Web 视图。
- en: GeoDjango is now a standard Django component, which can be activated using a
    specific configuration. In December 2017, Django 2 was released as the new long-term
    support version. It currently supports Python 3.4, 3.5, and 3.6.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: GeoDjango 现在是标准的 Django 组件，可以通过特定的配置来激活。2017 年 12 月，Django 2 作为新的长期支持版本发布。它目前支持
    Python 3.4、3.5 和 3.6。
- en: 'In this chapter, we will learn about the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习以下内容：
- en: Installation and configuration of Django and GeoDjango
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Django 和 GeoDjango 的安装和配置
- en: Django admin panel functionality, including map editing
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Django 管理面板功能，包括地图编辑
- en: How to load shapefiles into database tables using LayerMapping
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用 LayerMapping 将 shapefiles 加载到数据库表中
- en: GeoDjango queries
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GeoDjango 查询
- en: Django URL patterns
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Django URL 模式
- en: Django views
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Django 视图
- en: Installing and configuring Django and GeoDjango
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和配置 Django 和 GeoDjango
- en: Django, compared to Flask, is a batteries-included framework. It includes modules
    that allow for database backend support, without requiring a separate database
    code package (unlike Flask, which relies on SQLAlchemy). Django also includes
    an admin panel that allows for easy data editing and management through a web
    interface. This means fewer modules are installed and more code is included to
    handle database interactions and web processing.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Flask 相比，Django 是一个包含电池的框架。它包括允许数据库后端支持的模块，无需单独的数据库代码包（与 Flask 不同，Flask 依赖于
    SQLAlchemy）。Django 还包括一个管理面板，允许通过 Web 界面轻松编辑和管理数据。这意味着安装的模块更少，包含的代码更多，用于处理数据库交互和
    Web 处理。
- en: There are some major differences between Flask and Django. Django separates
    URLs from views and models in a more structured manner than Flask. Django also
    uses Python classes for databases tables, but it has built-in database support.
    For geospatial databases, no extra module is required. Django also supports geometry
    columns in a wider range of databases, though PostgreSQL and PostGIS are used
    the most often.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Flask 和 Django 之间有一些主要区别。Django 在结构上比 Flask 更好地将 URL 与视图和模型分离。Django 还使用 Python
    类来表示数据库表，但它具有内置的数据库支持。对于地理空间数据库，无需额外模块。Django 还支持更多数据库中的几何列，尽管 PostgreSQL 和 PostGIS
    使用得最为频繁。
- en: Like many Python 3 modules, Django development is geared towards Linux development
    environments. While it supports Windows installation, it requires a few modifications
    of the environment variables within Windows, requiring administrative control
    of the machine. Administrative-level permissions are required for configurations,
    allowing Django to access **Geospatial Data Abstraction Library** (**GDAL**) and
    **OGR Simple Features **libraries.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 与许多 Python 3 模块一样，Django 开发侧重于 Linux 开发环境。虽然它支持 Windows 安装，但需要在 Windows 中对环境变量进行一些修改，需要机器的行政控制权。配置需要行政级别的权限，允许
    Django 访问 **地理空间数据抽象库**（**GDAL**）和 **OGR 简单特征**库。
- en: Steps from Django to GeoDjango
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 Django 到 GeoDjango 的步骤
- en: 'Within this section, we''ll install Django add GeoDjango configurations, and
    add the required libraries (including the GDAL and OGR) that bring spatial functionality
    to Django. Installing the Django 2 module for Python 3, and configuring the GeoDjango
    components, depends on a number of steps. These include:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将安装 Django 并配置 GeoDjango，并添加所需的库（包括 GDAL 和 OGR），这些库将空间功能引入 Django。安装
    Django 2 模块（针对 Python 3）和配置 GeoDjango 组件取决于多个步骤。这些包括：
- en: Using `pip` to install Django 2
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `pip` 安装 Django 2
- en: Installing and enabling a spatial database (if not already installed)
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装和启用空间数据库（如果尚未安装）
- en: Installing GDAL/ OGR/PROJ4/GEOS
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 GDAL/OGR/PROJ4/GEOS
- en: Configuring the Windows environment variables
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置 Windows 环境变量
- en: Generating a project
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成项目
- en: Opening `settings.py`
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `settings.py`
- en: Adding `django.contrib.gis` to `INSTALLED_APPS`
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `django.contrib.gis` 添加到 `INSTALLED_APPS`
- en: Configuring database settings to point to the spatial database
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置数据库设置以指向空间数据库
- en: Installing Django
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Django
- en: Django 2 is hosted in **Python Package Index** (**PyPI**), so use `pip` to install
    it. It can also be downloaded and installed manually. Using `pip` to install Django
    will also install the required dependency, `pytz`. Django will be downloaded from
    PyPI as a wheel and installed.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Django 2 存放在 **Python 包索引** (**PyPI**)，因此使用 `pip` 安装它。它也可以手动下载和安装。使用 `pip` 安装
    Django 也会安装所需的依赖项 `pytz`。Django 将从 PyPI 下载为 wheel 文件并安装。
- en: 'Because Django 2 is a major update which has been recently released, we have
    to ensure that `pip` installs the correct version. With this command, we will
    install Django 2.0:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Django 2 是最近发布的重大更新，我们必须确保 `pip` 安装正确的版本。使用此命令，我们将安装 Django 2.0：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The module will be installed, along with the supporting modules:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块将被安装，包括支持模块：
- en: '![](img/50a55e05-b2b3-4100-bbdb-a0a8feeeb59a.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/50a55e05-b2b3-4100-bbdb-a0a8feeeb59a.png)'
- en: 'Django 2.0 is used in this chapter. Use the latest version of Django 2 available
    to start a project. Check out Django 2.0 documentation (as well as other Django
    versions) here:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 本章使用 Django 2.0。使用可用的最新 Django 2 版本开始项目。在此处查看 Django 2.0 文档（以及其他 Django 版本）：
- en: '[https://www.djangoproject.com/](https://www.djangoproject.com/).'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.djangoproject.com/](https://www.djangoproject.com/).'
- en: If you are using virtual environments, you can specify a specific version of
    Django for each environment. If not, and you have multiple versions of Python
    installed, be sure to use the correct `pip` version to install Django within the
    `Python 3` folder structure.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用虚拟环境，可以为每个环境指定 Django 的特定版本。如果不使用虚拟环境，并且安装了多个 Python 版本，请确保使用正确的 `pip`
    版本在 `Python 3` 文件夹结构中安装 Django。
- en: Installing PostGIS and psycopg2
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 PostGIS 和 psycopg2
- en: 'This chapter will use PostGIS. Refer to [Chapter 7](4f2388a3-51fc-419f-a827-bbbedbbb6374.xhtml), *Geoprocessing
    with Geodatabases*, if you do not have PostGIS installed on your machine as it
    explains how to install the spatial extension add-on to PostgreSQL. Also, ensure
    that the `psycopg2` module is installed by using the following code:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将使用 PostGIS。如果你在机器上没有安装 PostGIS，请参阅第 7 章 [Geoprocessing with Geodatabases](4f2388a3-51fc-419f-a827-bbbedbbb6374.xhtml)，其中解释了如何将空间扩展附加组件安装到
    PostgreSQL。此外，请确保使用以下代码安装 `psycopg2` 模块：
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Creating the database
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建数据库
- en: Generating the database table is made possible by the `Chapter12_0.py` script,
    which creates a PostgreSQL database called `chapter12` and adds spatial functionality
    to the new database. Adjust the credentials, host, and port (as needed) in the
    connection configuration below.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 `Chapter12_0.py` 脚本生成数据库表，该脚本创建一个名为 `chapter12` 的 PostgreSQL 数据库，并为新数据库添加空间功能。在以下连接配置中调整凭据、主机和端口（如有必要）。
- en: 'Connect to the database server using `psycopg2` and its `connect` function,
    which creates a `connection` class. The class has a `cursor` function that creates
    a `cursor` object, which is able to execute SQL statements. This section creates
    the database for the chapter:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `psycopg2` 和其 `connect` 函数连接到数据库服务器，该函数创建一个 `connection` 类。该类有一个 `cursor`
    函数，用于创建一个 `cursor` 对象，该对象能够执行 SQL 语句。本节将创建用于本章的数据库：
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To make the database geospatial, ensure that the PostGIS spatial add-on has
    been installed. Connect to the new database and pass the following SQL statement,
    which adds the spatial functionality tables to the database:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 要使数据库成为地理空间数据库，请确保已安装 PostGIS 空间附加组件。连接到新数据库并传递以下 SQL 语句，该语句将空间功能表添加到数据库中：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The PostGIS database for this chapter is now created and spatially enabled.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的 PostGIS 数据库现在已创建并启用空间功能。
- en: GDAL/OGR
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GDAL/OGR
- en: Django's built-in geospatial support requires the use of code libraries available
    from the **Open Source Geospatial Foundation** (**OSGeo**). The GDAL library,
    which includes OGR, handles vector and raster datasets. It must be installed (see
    [Chapter 5](0b3a2208-3881-479a-83a8-78be85b9c1d6.xhtml), *Vector Data Analysis*,
    and [Chapter 6](a5c9354e-8ea4-45f6-9e69-191375e171c3.xhtml), *Raster Data Processing*,
    for more details on using it for analysis).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Django 内置的地理空间支持需要使用来自 **开源地理空间基金会** (**OSGeo**) 的代码库。GDAL 库，包括 OGR，处理矢量数据和栅格数据集。它必须被安装（有关如何使用它进行分析的更多详细信息，请参阅第
    5 章 [Vector Data Analysis](0b3a2208-3881-479a-83a8-78be85b9c1d6.xhtml) 和第 6 章
    [Raster Data Processing](a5c9354e-8ea4-45f6-9e69-191375e171c3.xhtml)）。
- en: If it is not already installed, use the OSGeo4W installer available at: [https://trac.osgeo.org/osgeo4w/](https://trac.osgeo.org/osgeo4w/).
    Select the correct installer for your machine. The installer will also install
    QGIS and GRASS and other open source geospatial programs. Download and run the
    installer and place the output files on your local drive. This file path (for
    example: `C:\OSGeo4w`) will be important when modifying the Windows environment
    variables.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果尚未安装，请使用以下网址提供的OSGeo4W安装程序：[https://trac.osgeo.org/osgeo4w/](https://trac.osgeo.org/osgeo4w/)。选择适合您机器的正确安装程序。安装程序还将安装QGIS、GRASS和其他开源地理空间程序。下载并运行安装程序，并将输出文件放置在您的本地驱动器上。此文件路径（例如：`C:\OSGeo4w`）在修改Windows环境变量时将非常重要。
- en: 'Find installation instructions for configuring GeoDjango for Linux and macOS
    from the Django project documentation here:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在Django项目文档中查找配置GeoDjango的Linux和macOS的安装说明：
- en: '[https://docs.djangoproject.com/en/2.0/ref/contrib/gis/install/](https://docs.djangoproject.com/en/2.0/ref/contrib/gis/install/).'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.djangoproject.com/en/2.0/ref/contrib/gis/install/](https://docs.djangoproject.com/en/2.0/ref/contrib/gis/install/)。'
- en: Modifying Windows environment variables
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改Windows环境变量
- en: 'Editing the system path and other environment variables within Windows requires
    administrative permissions. Here are the steps to edit them for our purposes:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows中编辑系统路径和其他环境变量需要管理员权限。以下是编辑它们的步骤：
- en: Log into an account with administrative permissions.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用具有管理员权限的账户登录。
- en: Open Windows Explorer and right-click on the PC icon in the left pane.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Windows资源管理器，在左侧窗格中右键单击PC图标。
- en: Select Properties from the context menu.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从上下文菜单中选择“属性”。
- en: Click on Advanced system settings.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“高级系统设置”。
- en: In the next menu, click on Environment Variables.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个菜单中，点击“环境变量”。
- en: Select Path from the system variables and click Edit (or double-click on the
    path value).
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从系统变量中选择“路径”并点击“编辑”（或双击路径值）。
- en: 'Add the file path of the `bin` folder in the `OSGeo4W` folder (for example, `C:\OSGeo4W\bin`) to
    the path:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`OSGeo4W`文件夹中`bin`文件夹的文件路径（例如，`C:\OSGeo4W\bin`）添加到路径中：
- en: '![](img/a278951a-3204-4cf5-bd15-c794188c225d.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a278951a-3204-4cf5-bd15-c794188c225d.png)'
- en: The `Python 3.6` folder has also been added to the path in this example, as
    well as `Python 2.7`, which is ordered behind `Python 3.6` because of its position
    in the path environment variable value. This means that when Python is passed
    to a command line, the `Python 3.6` executable will be run.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，`Python 3.6`文件夹也已添加到路径中，以及`Python 2.7`，它位于路径环境变量值中的`Python 3.6`之后，因为它的位置。这意味着当传递Python到命令行时，将运行`Python
    3.6`可执行文件。
- en: Two other variables that may be required are the GDAL_DATA variable and the
    PROJ_LIB variable. If PostGIS has been installed, it will have created a GDAL_DATA
    variable already, but if it is not present, click the New button underneath the
    system variables box. Add the name of the variable (GDAL_DATA) and the variable
    value (for example, `C:\OSGeo4W64\share\gdal`).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 可能还需要两个其他变量：GDAL_DATA变量和PROJ_LIB变量。如果已安装PostGIS，它将已经创建了一个GDAL_DATA变量，但如果它不存在，请点击系统变量框下方的“新建”按钮。添加变量的名称（GDAL_DATA）和变量值（例如，`C:\OSGeo4W64\share\gdal`）。
- en: 'Add the PROJ_LIB variable the same way:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 以相同的方式添加PROJ_LIB变量：
- en: '![](img/3fc8d73c-8589-4663-bf5e-c480a87e6559.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3fc8d73c-8589-4663-bf5e-c480a87e6559.png)'
- en: Click OK to save the new variables, and OK again to get out of the first settings
    dialog. Close the System Properties menu.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“确定”以保存新变量，然后再次点击“确定”以退出第一个设置对话框。关闭系统属性菜单。
- en: Creating a project and application
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建项目和应用程序
- en: Now that Django is installed, let's create a project. Django has two levels
    that are managed by scripts accepting command-line arguments. These two levels
    are projects and applications. A project can have many applications, and sometimes
    an application has multiple projects as well. This organization allows you to
    reuse of code between related applications, governed by project-level code.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在Django已经安装，让我们创建一个项目。Django有两个级别，由接受命令行参数的脚本管理。这两个级别是项目和应用程序。一个项目可以有多个应用程序，有时一个应用程序也有多个项目。这种组织方式允许您在相关应用程序之间重用代码，这些代码受项目级别代码的约束。
- en: Django uses an administration file, `django-admin.py`, to control the creation
    of projects. It is installed in the `Scripts` folder of the `Python 3` folder.
    I usually copy the `django-admin.py` file into a new project folder, and pass
    the required command-line arguments while working in the project folder, but it
    can also be called from the command line if the `Scripts` folder is included in
    the path environment variable.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Django 使用一个管理文件 `django-admin.py` 来控制项目的创建。它安装在 `Python 3` 文件夹的 `Scripts` 文件夹中。我通常将
    `django-admin.py` 文件复制到一个新的项目文件夹中，并在项目文件夹中工作的时候传递所需的命令行参数，但如果 `Scripts` 文件夹包含在路径环境变量中，它也可以从命令行调用。
- en: Create a folder for your project; something like `C:\Projects`. Copy `django-admin.py`
    into `C:\Projects`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 为你的项目创建一个文件夹；例如 `C:\Projects`。将 `django-admin.py` 复制到 `C:\Projects`。
- en: Command-line argument – startproject
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命令行参数 - startproject
- en: 'A command-line argument is used with `django-admin.py` to create the project—`startproject`.
    To create a project, open the command prompt and change directories to the folder
    created earlier. We will create projects in this folder by passing `startproject` and
    the name of our new project (`chapter12`) to `django-admin.py`:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `django-admin.py` 的命令行参数来创建项目——`startproject`。要创建一个项目，打开命令提示符并切换到之前创建的文件夹。我们将通过传递
    `startproject` 和我们新项目的名称 (`chapter12`) 到 `django-admin.py` 来在这个文件夹中创建项目：
- en: '![](img/17c20ecb-1bc4-49bf-b62e-c01e9dff7c98.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/17c20ecb-1bc4-49bf-b62e-c01e9dff7c98.png)'
- en: What is created by startproject?
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: startproject 创建了什么？
- en: 'By passing the two arguments to `django-admin.py`, `startproject`, and `chapter12`
    (the name of the project), a folder is created with a number of scripts and subfolders.
    The outer (`root`) folder is called `chapter12`, and it contains an important
    script called `manage.py`, and a folder also called `chapter12`*,* which is the
    project folder:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将两个参数传递给 `django-admin.py`，`startproject` 和 `chapter12`（项目的名称），创建了一个包含多个脚本和子文件夹的文件夹。外部的
    (`root`) 文件夹被称为 `chapter12`，它包含一个重要的脚本 `manage.py`，以及一个也称为 `chapter12` 的文件夹，这是项目文件夹：
- en: '![](img/2e667b98-8611-4bef-9690-f6a8f6f0bb7e.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2e667b98-8611-4bef-9690-f6a8f6f0bb7e.png)'
- en: 'Inside the project folder are some important scripts, including `settings.py` and `urls.py`:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目文件夹中包含一些重要的脚本，包括 `settings.py` 和 `urls.py`：
- en: '![](img/0239fb6b-828e-4f0f-ab98-ab98d320a3cd.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0239fb6b-828e-4f0f-ab98-ab98d320a3cd.png)'
- en: These files are default placeholders, waiting for us to configure our project
    and applications. We will edit `setting.py` and `urls.py` too, with the specifics
    of our project as we go along. The third file, `wsgi.py`, is used for production
    deployment of the web application.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这些文件是默认的占位符，等待我们配置项目和应用程序。随着项目的进行，我们还将编辑 `setting.py` 和 `urls.py`，以包含我们项目的具体信息。第三个文件
    `wsgi.py` 用于生产部署网络应用程序。
- en: Creating an application using manage.py
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 manage.py 创建应用程序
- en: Now, the `root` folder, `Projects` folder, and associated scripts have been
    created. Within the `root` folder is the `manage.py` file, which is used for configuration
    and management of the applications and project. In this section, we'll create
    an application using `manage.py` and the command-line argument `startapp`.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '现在，`root` 文件夹、`Projects` 文件夹和相关脚本已经创建。在 `root` 文件夹中是 `manage.py` 文件，它用于配置和管理应用程序和项目。在本节中，我们将使用
    `manage.py` 和命令行参数 `startapp` 创建一个应用程序。 '
- en: 'With the command prompt, change directories into the `root` folder. Unlike
    `django-admin.py`, we have to run `manage.py` by passing it as an argument to
    the Python executable. In turn, to `manage.py` we pass the argument `startapp`
    and the name of the application, `arenas`. It should look like this:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 使用命令提示符，切换到 `root` 文件夹。与 `django-admin.py` 不同，我们必须通过将 `manage.py` 作为参数传递给 Python
    可执行文件来运行它。反过来，我们将 `startapp` 参数和应用程序的名称 `arenas` 传递给 `manage.py`。它应该看起来像这样：
- en: '![](img/117d45fd-a4e0-4e8d-b81e-a9ce0ae91b85.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/117d45fd-a4e0-4e8d-b81e-a9ce0ae91b85.png)'
- en: What is created by manage.py
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: manage.py 创建了什么？
- en: 'Passing the `startapp arenas` command to `manage.py` created a folder called
    `arenas`. All applications are created within the `root` folder, next to the project
    folder:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `startapp arenas` 命令传递给 `manage.py` 创建了一个名为 `arenas` 的文件夹。所有应用程序都创建在 `root`
    文件夹中，紧挨着项目文件夹旁边：
- en: '![](img/76d4ed13-91b6-4f08-ac26-912e704f2822.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/76d4ed13-91b6-4f08-ac26-912e704f2822.png)'
- en: 'Inside the folder are auto-generated scripts that we will configure and add
    to later. There is also a folder called `migrations`, which is used by Django
    to store scripts describing edits to the database. The scripts `admin.py`, `models.py`,
    and `views.py` will be used in this chapter:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在文件夹中是自动生成的脚本，我们将在稍后配置和添加。还有一个名为`migrations`的文件夹，用于存储Django用于描述数据库编辑的脚本。本章将使用`admin.py`、`models.py`和`views.py`脚本：
- en: '![](img/114bdd5b-898b-416e-8793-812ed7422a98.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/114bdd5b-898b-416e-8793-812ed7422a98.png)'
- en: Configuring settings.py
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置settings.py
- en: With the project created and a new application, the next step towards using
    GeoDjango is to configure the `settings.py` script contained in the project folder.
    We'll add the specifics about the database connection (user, password, database
    name, and so on), and adjust the `INSTALLED_APPS` setting.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建项目和新的应用程序后，使用GeoDjango的下一步是配置项目文件夹中包含的`settings.py`脚本。我们将添加有关数据库连接（用户、密码、数据库名称等）的详细信息，并调整`INSTALLED_APPS`设置。
- en: Adding a new database connection
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加新的数据库连接
- en: Using IDLE or another IDE, open `settings.py` from the `chapter12` project folder.
    Scroll down to the variable called `DATABASES`. This variable, which is set to
    a local SQLite database, will be adjusted to the PostgreSQL database with the
    PostGIS extension.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 使用IDLE或另一个IDE，从`chapter12`项目文件夹中打开`settings.py`。滚动到名为`DATABASES`的变量。此变量设置为本地SQLite数据库，将被调整为带有PostGIS扩展的PostgreSQL数据库。
- en: 'This is the default:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这是默认设置：
- en: '[PRE4]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Change it to the following, substituting the `username` and `password` for
    your PostGIS installation (see [Chapter 3](42c1ea5a-7372-4688-bb7f-fc3822248562.xhtml),
    *Introduction to Geospatial Databases*):'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 更改为以下内容，用你的PostGIS安装的`username`和`password`替换（见[第3章](42c1ea5a-7372-4688-bb7f-fc3822248562.xhtml)，*地理空间数据库简介*）：
- en: '[PRE5]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: An empty string can also be used for the `HOST` option to indicate `localhost`.
    If the PostgreSQL installation is on a different machine, adjust the `HOST` option
    to the IP address of the database server. If it is on a different port, adjust
    the `PORT` option.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 空字符串也可以用于`HOST`选项，表示`localhost`。如果PostgreSQL安装在不同的机器上，调整`HOST`选项到数据库服务器的IP地址。如果它在不同的端口上，调整`PORT`选项。
- en: Save the script, but don't close it.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 保存脚本，但不要关闭它。
- en: Adding new installed apps
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加新的已安装应用程序
- en: Within `settings.py`, scroll to the variable `INSTALLED_APPS`. This lists the
    built-in, core applications used to support our application. To it, we'll add
    `django.contrib.gis`, the built-in Django GIS application, and our own new application,
    Arenas.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在`settings.py`中，滚动到变量`INSTALLED_APPS`。此变量列出了用于支持我们的应用程序的内置、核心应用程序。我们将向其中添加`django.contrib.gis`，内置的Django
    GIS应用程序，以及我们自己的新应用程序，竞技场。
- en: '`INSTALLED_APPS` is a list and can be edited. Initially, `INSTALLED_APPS` looks
    like this:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`INSTALLED_APPS`是一个列表，可以编辑。最初，`INSTALLED_APPS`看起来像这样：'
- en: '[PRE6]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Edit it to look like this:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑它，使其看起来像这样：
- en: '[PRE7]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Save `settings.py` and close the script. Now we've added our custom arenas app
    and Django's GIS library to the installed app package manager, so GeoDjango is
    now configured. Next, we'll use `manage.py` and OGR to read shapefiles and automatically
    generate data models.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 保存`settings.py`并关闭脚本。现在我们已经将我们的自定义竞技场应用程序和Django的GIS库添加到已安装的应用程序包管理器中，因此GeoDjango现在已配置。接下来，我们将使用`manage.py`和OGR读取shapefiles并自动生成数据模型。
- en: Creating the application
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建应用程序
- en: This application will perform geospatial analysis using the geometry fields
    of database tables. To make this possible, we have to create and populate the
    database tables using shapefiles and a built-in method called `LayerMapping`.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 此应用程序将使用数据库表的几何字段执行地理空间分析。为了实现这一点，我们必须使用shapefiles和一个称为`LayerMapping`的内置方法创建和填充数据库表。
- en: The completed application will need URL pattern matching to link URLs with the
    views that will process the requests and return the response. Templates will be
    used to pass processed data to the browser. Views will be written to be able to
    handle both `POST` and `GET` requests and to redirect to other views.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 完成的应用程序将需要URL模式匹配来将URL与处理请求并返回响应的视图关联起来。模板将用于将处理后的数据传递到浏览器。视图将被编写以处理`POST`和`GET`请求，并将重定向到其他视图。
- en: Now that GeoDjango is configured, the NBA Arenas application can be created
    using the Django project management script called `manage.py`.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在GeoDjango已配置，可以使用名为`manage.py`的Django项目管理脚本创建NBA竞技场应用程序。
- en: manage.py
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: manage.py
- en: 'The script `manage.py` performs a number of jobs to help set up and manage
    the project. For testing purposes, it can create a local web server (using `runserver`
    as the argument); it manages database schema migrations, generating tables from
    data models (using `makemigration` and `migrate`); it even has a built-in Python
    3 shell (using `shell`) for testing and more:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`manage.py` 脚本执行多项任务以帮助设置和管理项目。出于测试目的，它可以创建本地 Web 服务器（使用 `runserver` 作为参数）；它管理数据库模式迁移，从数据模型生成表（使用
    `makemigration` 和 `migrate`）；甚至内置了 Python 3 shell（使用 `shell`），用于测试和其他操作：'
- en: '![](img/0e08c8f9-ae5d-484b-b60f-81a06f8a823a.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0e08c8f9-ae5d-484b-b60f-81a06f8a823a.png)'
- en: In this section, we'll use `manage.py` to create and populate database tables,
    using shapefiles as the data and schema source.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用 `manage.py` 来创建和填充数据库表，使用 shapefile 作为数据和模式源。
- en: Generating data models
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成数据模型
- en: After configuring GeoDjango, a new available function in `manage.py` is available, `ogrinspect`,
    which automatically generates data table models with geometry columns that can
    be placed in `models.py`. By inspecting or reading the shapefile data using OGR,
    Django's built-in functionality creates a Python class data model and a field
    mapping dictionary that maps between the names of shapefile fields and database
    columns.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置 GeoDjango 后，`manage.py` 中出现了一个新的可用功能，即 `ogrinspect`，它可以自动生成具有几何列的数据表模型，这些模型可以放置在
    `models.py` 中。通过使用 OGR 检查或读取 shapefile 数据，Django 的内置功能创建了一个 Python 类数据模型和一个字段映射字典，该字典将
    shapefile 字段名称与数据库列名称映射起来。
- en: 'For this section, we will use the shapefiles downloaded in [Chapter 11](e483966e-f5c7-47dd-a40c-9b8b6f807107.xhtml),
    *Flask and GeoAlchemy2*. They are also available in the code package. Copy the
    four shapefiles (and all of the associated files) into a folder called `data`
    within the arenas application folder:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本节，我们将使用在 [第 11 章](e483966e-f5c7-47dd-a40c-9b8b6f807107.xhtml) 中下载的 shapefile，即
    *Flask 和 GeoAlchemy2*。它们也包含在代码包中。将四个 shapefile（以及所有相关文件）复制到 arenas 应用程序文件夹中的 `data`
    文件夹内：
- en: '![](img/0c239832-ff10-469c-af8c-fb7754492ac7.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0c239832-ff10-469c-af8c-fb7754492ac7.png)'
- en: 'Open a command prompt, and change the directory to the project folder. The `data` folder
    with the four shapefiles (`Arenas_NBA.shp`, `US_States.shp`, `US_County_Boundaries.shp`,
    and `Congressional_Districts.shp`) will be inspected to generate data models using
    `manage.py`. The results are copied to `models.py`. From these models, the database
    tables will be generated, and then the tables will be populated using the field
    mapping dictionaries:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 打开命令提示符，将目录更改为项目文件夹。将包含四个 shapefile（`Arenas_NBA.shp`、`US_States.shp`、`US_County_Boundaries.shp`
    和 `Congressional_Districts.shp`）的 `data` 文件夹检查以使用 `manage.py` 生成数据模型。结果将复制到 `models.py`
    中。从这些模型中，将生成数据库表，然后使用字段映射字典填充这些表：
- en: '[PRE8]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This command will produce a data model with a geometry column and a `4326` SRID.
    The field mapping dictionary, generated by the `--mapping` option, is a Python
    dictionary that maps between the keys (data model column names) and the values
    (shapefile field names). This is a part of the output:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将生成具有几何列和 `4326` SRID 的数据模型。由 `--mapping` 选项生成的字段映射字典是一个 Python 字典，它将键（数据模型列名称）与值（shapefile
    字段名称）映射起来。以下是输出的一部分：
- en: '![](img/d9dc5556-ddbb-494d-bbb2-a8cd113c170c.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d9dc5556-ddbb-494d-bbb2-a8cd113c170c.png)'
- en: Copy the output, including the `import` line, data model, and the field mapping
    dictionary into `arenas`\`models.py`. Copy the `import` line over the data model
    class definition over the auto-generated `import` line in `models.py`.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 将输出（包括 `import` 行、数据模型和字段映射字典）复制到 `arenas` 目录下的 `models.py` 中。将 `import` 行复制到自动生成的
    `models.py` 中的数据模型类定义上方。
- en: Copying from the command line is easy when the Quick Edit option is turned on
    in the command prompt defaults. Once it is on, select text by dragging the mouse.
    Push *Enter* when the text block has been selected.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 当在命令提示符默认设置中开启快速编辑选项时，从命令行复制内容变得容易。一旦开启，通过拖动鼠标选择文本。当文本块被选中时，按 *Enter* 键。
- en: Multipolygons
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多边形
- en: For the three other shapefiles with multipolygon geometry types, we'll pass
    the argument—`multi` to `manage.py` and `ogrinspect`. Using this option generates
    a `MultiPolygon` geometry column in the data model.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 对于具有多边形几何类型的其他三个 shapefile，我们将传递参数 `multi` 给 `manage.py` 和 `ogrinspect`。使用此选项在数据模型中生成
    `MultiPolygon` 几何列。
- en: 'This command generates a data model from the US States shapefile:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令从美国州 shapefile 生成数据模型：
- en: '[PRE9]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The output will look like this:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '[PRE10]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Copy the output to `models.py`, including both the data model and the field
    mapping dictionary. Repeat the process for the counties and districts shapefiles
    by adjusting the arguments to `manage.py`(that is, the shapefile name and the
    table name), and save `models.py` once the models have been added.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 将输出复制到 `models.py` 中，包括数据模型和字段映射字典。通过调整 `manage.py` 的参数（即形状文件名和表名）对县和区形状文件重复此过程，并在模型添加后保存
    `models.py`。
- en: Database migrations
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据库迁移
- en: Django uses a concept of database migrations to record and execute changes to
    the database. These changes include table creation and schema alterations. Now
    that we have generated the data models, we need to migrate the database, which
    involves inspecting `models.py` for changes, calculating the SQL syntax to generate
    the database alterations, and then running the required migrations to make the
    database table columns match their `models.py` code definitions. These migrations
    can also be reverted.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: Django 使用数据库迁移的概念来记录和执行对数据库的更改。这些更改包括表创建和模式变更。现在我们已经生成了数据模型，我们需要迁移数据库，这涉及到检查
    `models.py` 中的更改，计算生成数据库变更的 SQL 语法，然后运行所需的迁移以使数据库表列与 `models.py` 代码定义匹配。这些迁移也可以回滚。
- en: makemigrations
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: makemigrations
- en: 'To start the migration, pass `makemigrations` to `manage.py`. This argument
    will start the migration process by inspecting the contents of `models.py`. All
    of the Python class data models will be read, and the corresponding SQL is generated:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始迁移，将 `makemigrations` 传递给 `manage.py`。此参数将通过检查 `models.py` 的内容来启动迁移过程。所有
    Python 类数据模型将被读取，并生成相应的 SQL 语句：
- en: '[PRE11]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: A new script has been generated and added to the `migrations` folder. This initial
    database migration script creates a `Migration` class and includes a number of
    migration operations using the `CreateModel` method. Each of these migrations
    creates operations will generate a new (empty) table in the `chapter12` database.
    `Migration` classes also have methods for performing table alterations, when you
    need to add or remove fields.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 已生成并添加到 `migrations` 文件夹中的新脚本。此初始数据库迁移脚本创建了一个 `Migration` 类，并包含了一系列使用 `CreateModel`
    方法进行的迁移操作。每个迁移操作都会在 `chapter12` 数据库中生成一个新的（空）表。`Migration` 类还有执行表变更的方法，当你需要添加或删除字段时。
- en: sqlmigrate
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: sqlmigrate
- en: 'Use the command `sqlmigrate` to see the SQL statements generated from the `makemigration`
    operation. Pass `sqlmigrate`, the application label (`arenas`), and the migration
    name (`0001`) to `manage.py` to generate the output:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `sqlmigrate` 命令来查看从 `makemigration` 操作生成的 SQL 语句。将 `sqlmigrate`、应用标签（`arenas`）和迁移名称（`0001`）传递给
    `manage.py` 以生成输出：
- en: '![](img/2f0aeaa8-cb7a-41b8-8370-f596c379e116.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2f0aeaa8-cb7a-41b8-8370-f596c379e116.png)'
- en: All of the data models have been translated to SQL, with definitions for primary
    keys and field lengths added automatically.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 所有数据模型都已转换为 SQL，并自动添加了主键和字段长度的定义。
- en: migrate
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: migrate
- en: With the migration script generated, we can finally perform the database migration.
    This operation will generate the tables within the database specified in `settings.py`.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 使用生成的迁移脚本，我们最终可以执行数据库迁移。此操作将在 `settings.py` 中指定的数据库内生成表。
- en: 'Pass the argument `migrate` to `manage.py`:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `migrate` 参数传递给 `manage.py`：
- en: '[PRE12]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The result of the operation should look like this:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 操作的结果应该看起来像这样：
- en: '![](img/c116e214-f585-4673-8308-7287af23b699.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c116e214-f585-4673-8308-7287af23b699.png)'
- en: The database tables have been created in the database. Open pgAdmin4 (or another
    database GUI tool) to check on the tables within the database, or open psql and
    use the command line interface.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库表已在数据库中创建。打开 pgAdmin4（或另一个数据库 GUI 工具）以检查数据库中的表，或打开 psql 并使用命令行界面。
- en: 'Explore the Django documentation to explore all of the available arguments
    for `django-admin.py` and `manage.py`:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 探索 Django 文档以了解 `django-admin.py` 和 `manage.py` 的所有可用参数：
- en: '[https://docs.djangoproject.com/en/2.0/ref/django-admin/](https://docs.djangoproject.com/en/2.0/ref/django-admin/).'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.djangoproject.com/en/2.0/ref/django-admin/](https://docs.djangoproject.com/en/2.0/ref/django-admin/).'
- en: LayerMapping
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: LayerMapping
- en: To populate the database tables created from the shapefiles, Django has a built-in
    concept called `LayerMapping`. By using the field mapping dictionary generated
    by `manage.py`, along with the `LayerMapping` class from `django.contrib.gis.utils`,
    the data contained in the shapefiles can be extracted and loaded into the database
    tables. To instantiate a `LayerMapping` instance, we will pass the data model,
    the associated field mapping, and the location of the shapefile to the class.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 为了填充由shapefiles创建的数据库表，Django有一个内置的概念称为`LayerMapping`。通过使用由`manage.py`生成的字段映射字典，以及来自`django.contrib.gis.utils`的`LayerMapping`类，可以从shapefiles中提取并加载到数据库表中。要实例化一个`LayerMapping`实例，我们将数据模型、相关的字段映射和shapefile的位置传递给类。
- en: 'Create a new file called `load.py` and save it inside the Arenas application.
    Add this line to the file:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`load.py`的新文件，并将其保存在Arenas应用程序中。向文件中添加以下行：
- en: '[PRE13]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Open `models.py` and copy all of the field mapping dictionaries into `load.py`.
    Then, use the `os` module to assign the shapefile path to a variable. Here is
    the dictionary and path variable for `US_County_Boundary.shp`:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`models.py`并将所有字段映射字典复制到`load.py`中。然后，使用`os`模块将shapefile路径分配给一个变量。以下是`US_County_Boundary.shp`的字典和路径变量：
- en: '[PRE14]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Repeat this step for all of the shapefiles, as demonstrated in the `load.py`
    provided in the code package. These path variables and mapping dictionaries are
    required to perform the layer mapping.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 如代码包中提供的`load.py`所示，重复此步骤以处理所有shapefiles。这些路径变量和映射字典是执行层映射所必需的。
- en: Running the layer mapping
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行层映射
- en: 'At the bottom of `load.py`, create a function called `run` that contains the
    following code. Note that the names of the mappings (for example, `us_states_mapping`)
    will have to match the names of the dictionaries:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在`load.py`的底部创建一个名为`run`的函数，包含以下代码。注意，映射的名称（例如，`us_states_mapping`）必须与字典的名称匹配：
- en: '[PRE15]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'To run the script, we will use the `manage.py shell` argument to invoke a Python
    shell, and then import the `load.py` file and execute the `run` function inside
    this local shell:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行脚本，我们将使用`manage.py shell`参数调用Python shell，然后导入`load.py`文件，并在该本地shell中执行`run`函数：
- en: '[PRE16]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Once the `run` function is called and executed, the rows of data in the shapefiles
    are imported into the database tables:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦调用并执行了`run`函数，shapefiles中的数据行将被导入到数据库表中：
- en: '![](img/4b22e3c5-ba3c-43d8-acbd-15607672236b.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4b22e3c5-ba3c-43d8-acbd-15607672236b.png)'
- en: Once the function completes successfully, the database tables will be populated.
    We can now explore a very useful feature of Django—the built-in admin panel.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦函数成功完成，数据库表将被填充。我们现在可以探索Django的一个非常有用的内置功能——内置的行政面板。
- en: Administrative panel
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行政面板
- en: The Django framework was developed in a busy newsroom environment, and from
    the beginning, it required a built-in administrative panel that would allow reporters
    and editors to access their stories. This concept has continued to be supported,
    as most websites require an interface for administrative tasks. It's a very useful
    and convenient interface that requires no technical knowledge about the site to
    use.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: Django框架是在一个繁忙的新闻编辑室环境中开发的，从一开始就需要一个内置的行政面板，以便记者和编辑可以访问他们的故事。这个概念一直得到支持，因为大多数网站都需要一个用于行政任务的界面。这是一个非常实用且方便的界面，使用它不需要对网站有任何技术知识。
- en: GeoDjango administrative panel
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GeoDjango行政面板
- en: Websites built with the GeoDjango configuration are no different, and the administrative
    panel for GeoDjango websites even supports the display and editing of geometry
    data. The `OpenLayers` JavaScript library is included in the panel template to
    allow for the data visualizations. It also allows for the normal administrative
    tasks such as editing groups or users and their permissions.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 使用GeoDjango配置构建的网站并无不同，GeoDjango网站的行政面板甚至支持显示和编辑几何数据。`OpenLayers` JavaScript库包含在面板模板中，以允许数据可视化。它还允许执行常规的行政任务，例如编辑组或用户及其权限。
- en: admin.py
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: admin.py
- en: 'To access the data models stored in `models.py` through the administrative
    panel, the autogenerated script called `admin.py` inside the Arenas application
    must be updated. Open the file in an IDE and add the following lines, copying
    the original code:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过行政面板访问存储在`models.py`中的数据模型，Arenas应用程序内自动生成的脚本`admin.py`必须更新。在IDE中打开文件，并添加以下行，复制原始代码：
- en: '[PRE17]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Save the script and close it.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 保存脚本并关闭它。
- en: createsuperuser
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: createsuperuser
- en: 'The first step is to create a superuser. This user will be able to access the
    administrative panel. To do this, we will pass the `createsuperuser` argument
    to `manage.py` and follow the instructions as they appear one by one:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是创建一个超级用户。此用户将能够访问管理面板。为此，我们将传递`createsuperuser`参数给`manage.py`并逐条遵循出现的说明：
- en: '[PRE18]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The superuser is now available for logging into the administrative panel, using
    the password and username supplied.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 现在超级用户可以使用提供的用户名和密码登录管理面板。
- en: runserver
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行服务器
- en: 'Once the superuser has been created, pass the `runserver` argument to `manage.py`
    to start the local development web server:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 超级用户创建后，将`runserver`参数传递给`manage.py`以启动本地开发网络服务器：
- en: '![](img/50708041-295e-426d-b330-bec34b8afe33.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/50708041-295e-426d-b330-bec34b8afe33.png)'
- en: 'This will make the `localhost` open at port `8000` by default (`http://127.0.0.1:8000`).
    The administrative panel is available at: `http://127.0.0.1:8000/admin`. Open
    a web browser and navigate to the administrative panel URL. Enter the superuser
    credentials:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`localhost`将在端口`8000`上打开（`http://127.0.0.1:8000`）。管理面板位于：`http://127.0.0.1:8000/admin`。打开网页浏览器并导航到管理面板的URL。输入超级用户凭据：
- en: '![](img/316a4389-9f0b-45c9-a2ae-29affc4fa067.png)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/316a4389-9f0b-45c9-a2ae-29affc4fa067.png)'
- en: 'Once they are entered, the administrative panel will list the available models,
    as well as the authentication and authorization section. These models are initially
    shown with an s at the end of their name (pluralizing them by default). This behavior
    can (and should) be overridden, though we won''t focus on that task here:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 输入后，管理面板将列出可用的模型，以及认证和授权部分。这些模型最初以复数形式显示（默认情况下在名称末尾添加s）。虽然可以（并且应该）覆盖这种行为，但在此我们不会关注这项任务：
- en: '![](img/236269fb-0033-4657-ace3-6bb5732ad665.png)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/236269fb-0033-4657-ace3-6bb5732ad665.png)'
- en: 'Click on the U_s_statess model under ARENAS, and then click on the first object
    in the list of states objects. It should look like this:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在“场”下的U_s_statess模型上单击，然后单击状态对象列表中的第一个对象。它应该看起来像这样：
- en: '![](img/031b3c08-fca8-46a6-8980-b3ab1548b3b1.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/031b3c08-fca8-46a6-8980-b3ab1548b3b1.png)'
- en: These fields can be edited through this administrative panel, and even the geometry
    of the state (or, in this case, Puerto Rico) can be edited using the `OpenLayers`
    editing plugin included. Click Save after any edits. The data row can also be
    deleted from this interface.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 这些字段可以通过此管理面板进行编辑，甚至可以使用包含的`OpenLayers`编辑插件编辑州的几何形状（或在此情况下，波多黎各）。编辑后点击保存。也可以从该界面删除数据行。
- en: 'Explore the complete administrative panel documentation here:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在此处探索完整的管理面板文档：
- en: '[https://docs.djangoproject.com/en/2.0/ref/contrib/admin/](https://docs.djangoproject.com/en/2.0/ref/contrib/admin/).'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.djangoproject.com/en/2.0/ref/contrib/admin/](https://docs.djangoproject.com/en/2.0/ref/contrib/admin/).'
- en: URLs
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网址
- en: Finally, within the HTML form section, we designate where the description and
    a drop-down list will go and include a hidden token (CSRF), which is required
    for authentication.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在HTML表单部分，我们指定描述和下拉列表的位置，并包括一个隐藏的令牌（CSRF），这是认证所必需的。
- en: With the models generated and data added to the associated tables, it's time
    to generate some views, which will process our web requests and return the data
    required to complete our request.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在生成模型并将数据添加到相关表后，是时候生成一些视图了，这些视图将处理我们的网络请求并返回完成请求所需的数据。
- en: To correctly route our requests, we have to first create some URLs that will
    be paired with a view. This will require both project-level and application-level
    configuration. Unlike Flask, URLs are not attached to views using Python decorators.
    Instead, they are contained in separate scripts that will either map to an application
    or a view.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 为了正确路由我们的请求，我们首先需要创建一些将与视图配对的URL。这需要项目级别和应用级别配置。与Flask不同，URL不是通过Python装饰器附加到视图上的。相反，它们包含在单独的脚本中，这些脚本将映射到应用程序或视图。
- en: URL patterns
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: URL模式
- en: Django URL patterns are very clean and simple and make for nice websites where
    the URLs are short and memorable. To make this possible, there is matching of
    the requested URL with a view (or application-level URL that matches with a view).
    The URLs and their destination are matched inside a list called `urlpatterns`.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: Django URL模式非常干净和简单，使得网址短小且易于记忆。为了实现这一点，请求的URL与视图（或与应用程序级别的URL匹配的视图）进行匹配。URL及其目的地在名为`urlpatterns`的列表中进行匹配。
- en: Within the project folder (`C:\Projects\chapter12\chapter12`), there is a script
    called `urls.py` just underneath `settings.py`. This script controls project-level
    URL routing. For this application, we'll also add application-level URLs inside
    the `arenas` folder and will point the project-level URL routing to the application
    URLs.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目文件夹（`C:\Projects\chapter12\chapter12`）中，有一个名为 `urls.py` 的脚本位于 `settings.py`
    下方。此脚本控制项目级别的URL路由。对于此应用程序，我们还将添加 `arenas` 文件夹内的应用级别URL，并将项目级别的URL路由指向应用URL。
- en: 'Open up the project-level `urls.py`, and copy the following code over any existing
    code:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 打开项目级别的 `urls.py` 文件，并将以下代码复制到任何现有代码之上：
- en: '[PRE19]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This code will redirect the requests to two different URLs in the application-level
    `urls.py` file, where they can be further sorted. Any requests sent to the admin
    URL are handled by the administrative code. The `path` function accepts two required
    parameters: the URL path (for example, `''arenas/''`, which goes to `http://127.0.0.1:8000/arenas`),
    and the view or application-level code that will accept the request. The `include` function
    is used to add the available URLs from the Arenas application into the project
    level URLs.'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码会将请求重定向到应用级别的 `urls.py` 文件中的两个不同URL，在那里它们可以进一步排序。任何发送到管理URL的请求都由管理代码处理。`path`
    函数接受两个必需参数：URL路径（例如，`'arenas/'`，它指向 `http://127.0.0.1:8000/arenas`），以及将接受请求的视图或应用级别的代码。`include`
    函数用于将来自 `Arenas` 应用的可用URL添加到项目级别的URL中。
- en: 'To create the application-level URLs, create a script called `urls.py` inside
    the Arenas application folder. Copy the following code:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建应用级别的URL，在 `Arenas` 应用文件夹内创建一个名为 `urls.py` 的脚本。复制以下代码：
- en: '[PRE20]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This time, the function `path` directs requests to views (that will be) inside
    the `views.py` script. Both the base URL and the arena URL are redirected to a
    view. The optional parameter `name` is also included.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，函数 `path` 将请求重定向到 `views.py` 脚本内的视图（将）。基本URL和场馆URL都重定向到一个视图。还包含可选参数 `name`。
- en: Note that a major change in Django URL patterns was introduced in Django 2.0\.
    Earlier Django versions do not use the `path` function but use a similar function
    called `url`. Ensure that you are using the newest version of Django to match
    the code here.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，Django URL模式的一个主要变化是在Django 2.0中引入的。早期的Django版本不使用 `path` 函数，而是使用一个类似的功能
    `url`。请确保您使用的是最新版本的Django，以匹配这里的代码。
- en: Views
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 视图
- en: Views are at the heart of the application, and in Django take the form of Python
    functions. They accept both `GET` and `POST` web requests, allowing for multiple
    actions, with various responses, to occur inside the same function. Within view
    functions, we design how the request is parsed, how database tables are queried,
    how the query results (**QuerySets** in Django) are processed, and which forms
    and templates are sent to the browser along with the processed data.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 视图是应用程序的核心，在Django中表现为Python函数。它们接受 `GET` 和 `POST` Web请求，允许在同一个函数内发生多个动作，并产生各种响应。在视图函数中，我们设计如何解析请求，如何查询数据库表，如何处理查询结果（Django中的**QuerySets**），以及将哪些表单和模板与处理后的数据一起发送到浏览器。
- en: Now that the URL patterns are in place, we need to write some views that will
    accept and process the web requests sent to the URLs. These views will query the
    database table model classes in `models.py`to find the location data associated
    with each NBA arena included in the `Arenas` class.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 现在URL模式已经就绪，我们需要编写一些视图来接受和处理发送到URL的Web请求。这些视图将查询 `models.py` 中的数据库表模型类，以找到与
    `Arenas` 类中包含的每个NBA场馆相关的位置数据。
- en: Required folders and files
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 必需的文件夹和文件
- en: The first step is to create the necessary folders with files of forms and templates,
    as web responses from the views require a pre-generated template that can display
    the requested data (in this case, the location of the NBA `arena` requested).
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是创建必要的文件夹，包含表单和模板的文件，因为视图的Web响应需要预先生成的模板来显示请求的数据（在这种情况下，请求的NBA `arena`的位置）。
- en: forms.py
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: forms.py
- en: 'A web form is used in Django to capture user input and submit it to a view.
    To make it possible to select an NBA `arena` name from a drop-down list and have
    the web map zoom to that location, a new script, `forms.py`, must be created.
    Open an IDE and copy the following code into a new file:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在Django中，Web表单用于捕获用户输入并将其提交到视图。为了能够从下拉列表中选择NBA `arena`名称，并使Web地图缩放到该位置，必须创建一个新的脚本
    `forms.py`。打开IDE，并将以下代码复制到一个新文件中：
- en: '[PRE21]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This section creates a form class by subclassing from `forms.Form`. It has a
    `name` field, a `description` field, and a `ChoiceField`. The `ChoiceField` will
    create a drop-down list, populated by the IDs and names of the `arenas`. Other
    fields will be added to the `ArenaForm` class within the view and are not defined
    here. This form and its fields will be inserted into the template created in the
    next section. Save this file as `forms.py` into the Arenas application folder.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 本节通过从`forms.Form`派生创建一个表单类。它有一个`name`字段，一个`description`字段，以及一个`ChoiceField`。`ChoiceField`将创建一个下拉列表，由`arenas`的ID和名称填充。其他字段将在视图中的`ArenaForm`类中添加，此处未定义。此表单及其字段将插入到下一节中创建的模板中。将此文件保存为`forms.py`到Arenas应用程序文件夹中。
- en: templates folder
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: templates文件夹
- en: Copy the `templates` folder from the completed code package into the Arenas
    application folder. Inside the `templates` folder is a folder called `arenas`,
    with a template HTML file called `index.html`. This file contains a JavaScript
    portion that generates a web map. On that map, the location of an NBA `arena` is
    displayed.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 将完成代码包中的`templates`文件夹复制到Arenas应用程序文件夹中。在`templates`文件夹中有一个名为`arenas`的文件夹，里面有一个名为`index.html`的模板HTML文件。此文件包含一个JavaScript部分，用于生成一个网络地图。在该地图上，NBA
    `arena`的位置被显示出来。
- en: Django templates use placeholders (demarcated with a `{{form.field }}` format) that allow
    for data to be passed at runtime into the template, providing the specifics of
    the request. These placeholders are located throughout `index.html`. Django has
    its own built-in template language, which we will use here, and also includes
    Jinja2, which Flask also uses (see [Chapter 11](e483966e-f5c7-47dd-a40c-9b8b6f807107.xhtml),
    *Flask and GeoAlchemy2*).
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: Django模板使用占位符（以`{{form.field }}`格式分隔）允许在运行时将数据传递到模板中，提供请求的详细信息。这些占位符位于`index.html`的各个部分。Django有自己的内置模板语言，我们在这里将使用它，还包括Jinja2，Flask也使用（见第11章，*Flask和GeoAlchemy2*）。
- en: 'The first portion of `index.html` is to highlight is where the `longitude`
    and `latitude` of the current NBA `arena` have been added to the Leaflet JavaScript,
    which centers the map window on that location at zoom level `13`:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '`index.html`的第一部分需要突出显示的是，当前NBA `arena`的`longitude`和`latitude`已经被添加到Leaflet
    JavaScript中，在`13`级别缩放时将地图窗口中心定位在该位置：'
- en: '[PRE22]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The next portion to highlight is where the `longitude`, `latitude`, and custom
    `popup` about the current NBA `arena` are added to a marker:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个需要突出显示的部分是，将当前NBA `arena`的`longitude`、`latitude`和自定义`popup`添加到一个标记中：
- en: '[PRE23]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Finally, within the HTML `form` section, we designate where the `description`
    and a drop-down list will go and include a hidden token (CSRF), which is required
    for authentication of the `POST` request. The button is generated by the input
    HTML:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在HTML `form`部分中，我们指定`description`和下拉列表的位置，并包括一个隐藏的令牌（CSRF），这是`POST`请求认证所必需的。按钮由输入HTML生成：
- en: '[PRE24]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: All of these placeholders will be populated when the view is processed and data
    is returned to the requesting browser.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 当视图处理并返回数据到请求浏览器时，所有这些占位符都将被填充。
- en: Writing views
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写视图
- en: 'Everything is finally set to write our views. Open up `views.py` from the Arenas
    application folder within an IDE. Import the required libraries, models, forms,
    and modules:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将设置编写我们的视图。在IDE中打开Arenas应用程序文件夹中的`views.py`。导入所需的库、模型、表单和模块：
- en: '[PRE25]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Next, we will create two views—`index` and `arena`*, *and one non-view function
    called `queryarena`. These match with the URLs we added to `urls.py`. The return
    from the `index` function is very simple—it will redirect to the function `arena`.
    For the views, a decorator is used to determine the HTTP request methods allowed.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建两个视图——`index`和`arena`*，以及一个非视图函数`queryarena`。这些与我们在`urls.py`中添加的URL相匹配。`index`函数的返回值非常简单——它将重定向到`arena`函数。对于视图，使用装饰器来确定允许的HTTP请求方法。
- en: index view
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: index视图
- en: 'The `index` view is a Python function that accepts the request data and redirects
    it to the `arena` view, with a decorator (`require_http_methods`) prior to restricting
    the HTTP requests allowed:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '`index`视图是一个Python函数，它接受请求数据并将其重定向到`arena`视图，在限制允许的HTTP请求之前有一个装饰器（`require_http_methods`）：'
- en: '[PRE26]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: queryarena function
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: queryarena函数
- en: The `arena` function below selects a random `arena` for the initial `GET` request,
    getting data from the database model about the selected NBA `arena`. The queries
    themselves are handled by the `queryarena` function.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的`arena`函数选择一个随机的`arena`用于初始`GET`请求，从数据库模型中获取所选NBA `arena`的数据。查询本身由`queryarena`函数处理。
- en: 'In this function, the name of the selected `arena` is accepted as a parameter.
    It is used to query (or `filter`) all of the `Arenas` model objects. This **object-relational
    mapping** (**ORM**) `filter` method requires a field as a parameter; in this case,
    the field is called `name1`. As an example of what the `filter` is doing,  if
    the name of the `arena` is *Oracle Arena*, the `filter` translated to English
    would be *find all NBA arenas with the name Oracle Arena*. The results of the
    `filter` method are returned as a list, so the first result is retrieved from
    the list using zero-indexing. A result is an object representing the data row
    from the `Arenas` class that met the `filter` parameters:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个函数中，接受所选 `arena` 的名称作为参数。它用于查询（或 `filter`）所有的 `Arenas` 模型对象。这个对象关系映射（ORM）`filter`
    方法需要一个字段作为参数；在这种情况下，该字段称为 `name1`。作为一个 `filter` 所做事情的例子，如果 `arena` 的名称是 *Oracle
    Arena*，则 `filter` 翻译成英文将是 *查找所有名称为 Oracle Arena 的 NBA 场馆*。`filter` 方法的返回结果作为列表返回，因此使用零索引从列表中检索第一个结果。一个结果是表示从
    `Arenas` 类中满足 `filter` 参数的数据行的对象：
- en: '[PRE27]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Once the `arena` object is instantiated, its geometry field is used in a `filter`
    operation. Instead of using a field to `filter`, however, this `filter` uses geospatial
    analysis. Passing `arena.geom` to the `geom__intersects` method (provided by GeoDjango)
    performs an intersect operation to find the state in which the `arena` resides.
    An `if`/`else` conditional checks to ensure that the `arena` is located in the
    United States (for instance, not Toronto's `arena`) to determine the correct value
    to return.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦实例化了 `arena` 对象，就使用其几何字段进行 `filter` 操作。然而，这个 `filter` 不是使用字段进行 `filter`，而是使用地理空间分析。将
    `arena.geom` 传递给 GeoDjango 提供的 `geom__intersects` 方法执行交集操作以找到 `arena` 所在的州。一个
    `if`/`else` 条件语句检查以确保 `arena` 位于美国境内（例如，不是多伦多的 `arena`），以确定返回的正确值。
- en: If the `arena` is located inside the United States, the `arena` geometry is
    again used to determine the `county` and congressional `district` that contain
    the `arena`. This time, the geospatial operation is `geom_contains`. The `filters`
    return a `county` object and a `district` object. They are used to generate the
    custom `popup` that will be added to the map marker on the leaflet map. This `popup`
    contains the `longitude` and `latitude` of the `arena`, the name of the `arena`,
    and the name of its `county`, `state`, and the number of the congressional `district`
    within its `state`.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `arena` 位于美国境内，则再次使用 `arena` 几何形状来确定包含 `arena` 的 `county` 和国会 `district`。这次，地理空间操作是
    `geom_contains`。`filters` 返回一个 `county` 对象和一个 `district` 对象。它们被用来生成将添加到 leaflet
    地图上的地图标记上的自定义 `popup`。这个 `popup` 包含 `arena` 的经纬度、`arena` 的名称、其 `county`、`state`
    的名称以及其 `state` 内的国会 `district` 的编号。
- en: arena view
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`arena` 视图'
- en: The `arena` view accepts the `request` object and then instantiates an `ArenaForm`
    object to gather the data needed to respond to the `request`. A query of the `Arenas`
    model objects and its `values_list` method creates a Python list that contains
    tuples with the ID and name of every `arena`. The `request` method (either `GET`
    or `POST`) is used in a conditional to determine the appropriate response.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '`arena` 视图接受 `request` 对象，然后实例化一个 `ArenaForm` 对象以收集响应 `request` 所需的数据。对 `Arenas`
    模型对象及其 `values_list` 方法的查询创建了一个包含每个 `arena` 的 ID 和名称的元组的 Python 列表。在条件语句中使用 `request`
    方法（无论是 `GET` 还是 `POST`）来确定适当的响应。'
- en: If a `GET` request is received (that is, the web page is first opened), a random
    `arena` object is generated and passed to the template, which shows the `arena`
    on the included map. To get a random `arena`, we use the list of `arena` names
    and IDs (values). Once the list is generated, a list comprehension is used to
    generate a new list containing `arena` names.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 如果收到一个 `GET` 请求（即，网页首次打开），则会生成一个随机的 `arena` 对象并将其传递给模板，模板会在包含的地图上显示 `arena`。要获取一个随机的
    `arena`，我们使用 `arena` 名称和 ID（值）的列表。一旦生成了列表，就使用列表推导式生成一个新的列表，其中包含 `arena` 名称。
- en: Using the `random` module and the `#` of names in the list (`length`) generates
    a random `index` that is used to select an `arena` name from the list. This `name`
    is then passed to the `queryarena` function, which populates the `form` with the
    `arena` `name`, location, and the `popup`.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `random` 模块和列表中名称的 `#`（长度）生成一个随机 `index`，用于从列表中选择一个 `arena` 名称。然后，将此 `name`
    传递给 `queryarena` 函数，该函数用 `arena` `name`、位置和 `popup` 填充 `form`。
- en: 'These values are returned to the browser using the `render` function. This
    function is used to pass `forms` to templates along with the `request`, and knows
    where the `templates` folder is located inside the Arenas application:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 这些值通过 `render` 函数返回给浏览器。此函数用于将 `forms` 与 `request` 一起传递到模板中，并知道 `templates`
    文件夹位于 Arenas 应用程序内部的位置：
- en: '[PRE28]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: If a `POST` request is received (that is, an `arena` was selected), an `ArenaForm`
    class is called by passing the `POST` data to the class, and the `form` is validated.
    The ID of the selected `arena` is used as a conditional in a list comprehension,
    allowing us to retrieve the `name` of the `arena`. The `name` is then passed to
    `queryarena`, and the details of its location are queried and added to the `form`
    before it is returned using `render`.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 如果收到 `POST` 请求（即选择了 `arena`），则通过将 `POST` 数据传递给类来调用 `ArenaForm` 类，并对 `form` 进行验证。所选
    `arena` 的 ID 被用作列表推导式中的条件，使我们能够检索 `arena` 的 `name`。然后，将 `name` 传递给 `queryarena`，查询其位置详情并将其添加到
    `form` 中，在通过 `render` 返回之前。
- en: The views are complete and the script can be saved. The next step is to run
    the application.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 视图已完整，脚本可以保存。下一步是运行应用程序。
- en: Running the application
  id: totrans-239
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行应用程序
- en: 'Open, the command prompt and change directories to the `root` folder (`C:\Projects\chapter12`).
    Start the local development server with the following command:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 打开命令提示符并切换到 `root` 文件夹（`C:\Projects\chapter12`）。使用以下命令启动本地开发服务器：
- en: '[PRE29]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The result should look like this:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 结果应该看起来像这样：
- en: '![](img/257c5316-7c47-469e-a9a9-d4858dc1d43a.png)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![](img/257c5316-7c47-469e-a9a9-d4858dc1d43a.png)'
- en: Open a browser and go to: `http://127.0.0.1:8000`. The initial `GET` request
    will be redirected to the `arenas` view and processed, returning a random `arena`.
    Selecting another `arena` from the list and pushing the Find Data button will
    perform a `POST` request and will locate the selected `arena`. Each time an `arena`
    is selected, the text of the `arena` name will change, along with the map location
    and popup displayed.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 打开浏览器并访问：`http://127.0.0.1:8000`。初始的 `GET` 请求将被重定向到 `arenas` 视图并处理，返回一个随机的 `arena`。从列表中选择另一个
    `arena` 并点击查找数据按钮将执行 `POST` 请求并定位所选的 `arena`。每次选择 `arena` 时，`arena` 名称的文本将改变，同时地图位置和弹窗也会显示。
- en: 'Here is an example of the results of a `POST` request:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个 `POST` 请求结果的示例：
- en: '![](img/42da4615-1886-44c4-8ac2-9b91e1573145.png)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
  zh: '![](img/42da4615-1886-44c4-8ac2-9b91e1573145.png)'
- en: Test the application by selecting different NBA arenas, and for extra credit,
    change the popup message.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 通过选择不同的 NBA 场馆来测试应用程序，并且作为额外加分项，可以更改弹窗信息。
- en: Summary
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Django, with its batteries-included philosophy, creates complete applications
    with very few outside libraries required. This application performs data management
    and data analysis using only the Django built-in tools and the GDAL/OGR library.
    Enabling the GeoDjango functionality is a relatively seamless experience because
    it is an integral part of the Django project.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: Django，凭借其“内置电池”的哲学，只需要极少的第三方库就能创建完整的应用程序。此应用程序仅使用 Django 内置工具和 GDAL/OGR 库进行数据管理和数据分析。启用
    GeoDjango 功能是一个相对无缝的过程，因为它 Django 项目的组成部分。
- en: Creating web applications with Django allows for a lot of instant functionality,
    including the administrative panel. The `LayerMapping` makes it easy to import
    data from shapefiles. The ORM model makes it easy to perform geospatial filters
    or queries. The templating system makes it easy to add web maps as well as location
    intelligence to a website.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Django 创建网络应用程序允许实现许多即时功能，包括管理面板。`LayerMapping` 使得从 shapefiles 导入数据变得容易。ORM
    模型使得执行地理空间过滤或查询变得容易。模板系统使得添加网络地图以及位置智能到网站变得容易。
- en: In the next chapter, we will use a Python web framework to create a geospatial
    REST API. This API will accept requests and return JSON encoded data representing
    geospatial features.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将使用 Python 网络框架创建地理空间 REST API。此 API 将接受请求并返回表示地理空间特征的 JSON 编码数据。
