["```py\npip install numpy\n```", "```py\npip install sympy\n```", "```py\npip install qiskit\n```", "```py\npip install 'qiskit[visualization]'\n```", "```py\nimport cmath\nimport math\n```", "```py\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec\nfrom scipy.special import sph_harm\n```", "```py\ndef setup_grid(num=100):\n  theta = np.linspace(0, np.pi, num)\n  phi = np.linspace(0, 2*np.pi, num)\n  # Create a 2D meshgrid from two 1D arrays of theta, phi coordinates\n  theta, phi = np.meshgrid(theta, phi)\n  # Compute cartesian coordinates with radius r = 1\n  xyz = np.array([np.sin(theta) * np.sin(phi),\n                np.sin(theta) * np.cos(phi),\n                np.cos(theta)])\n  return (theta, phi, xyz)\n```", "```py\n(theta, phi, xyz) = setup_grid()\nprint(\"Shape of meshgrid arrays, theta: {}, phi: {}, xyz: {}\".format(theta.shape, phi.shape, xyz.shape))\n```", "```py\nShape of meshgrid arrays, theta: (100, 100), phi: (100, 100), xyz: (3, 100, 100)\n```", "```py\ndef colour_plot(ax, Y, Yx, Yy, Yz, cmap):\n  # Colour the plotted surface according to the sign of Y.real\n  # https://matplotlib.org/stable/gallery/mplot3d/surface3d.html?highlight=surface%20plots\n  # https://matplotlib.org/stable/tutorials/colors/colormaps.html\n  cmap = plt.cm.ScalarMappable(cmap=plt.get_cmap(cmap))\n  cmap.set_clim(-0.5, 0.5)\n  ax.plot_surface(Yx, Yy, Yz,\n                  facecolors=cmap.to_rgba(Y.real),\n                  rstride=2, cstride=2)\n  return\n```", "```py\ndef draw_axes(ax, ax_lim, title):\n  ax.plot([-ax_lim, ax_lim], [0,0], [0,0], c='0.5', lw=1, zorder=10)\n  ax.plot([0,0], [-ax_lim, ax_lim], [0,0], c='0.5', lw=1, zorder=10)\n  ax.plot([0,0], [0,0], [-ax_lim, ax_lim], c='0.5', lw=1, zorder=10)\n  # Set the limits, set the title and then turn off the axes frame\n  ax.set_title(title)\n  ax.set_xlim(-ax_lim, ax_lim)\n  ax.set_ylim(-ax_lim, ax_lim)\n  ax.set_zlim(-ax_lim, ax_lim)\n  ax.axis('off')\n  return\n```", "```py\ndef comb_Y(l, m, theta, phi):\n  Y = sph_harm(abs(m), l, phi, theta)\n  if m < 0:\n    Y = np.sqrt(2) * (-1)**m * Y.imag\n  elif m > 0:\n    Y = np.sqrt(2) * (-1)**m * Y.real\n  return Y\n```", "```py\ndef plot_orbitals(k, cmap = 'autumn'):\n  for l in range(0, k+1):\n    for m in range(-l, l+1):\n      fig = plt.figure(figsize=plt.figaspect(1.))\n      (theta, phi, xyz) = setup_grid()\n      ax = fig.add_subplot(projection='3d')\n      Y = comb_Y(l, m, theta, phi)\n      title = r'$l={{{}}}, m={{{}}}$'.format(l, m)\n      Yx, Yy, Yz = np.abs(Y) * xyz\n      colour_plot(ax, Y, Yx, Yy, Yz, cmap)\n      draw_axes(ax, 0.5, title)\n      fig_name = 'Hydrogen_l'+str(l)+'_m'+str(m)\n      plt.savefig(fig_name)\n      plt.show()\n  return\n```", "```py\nplot_orbitals(2)\n```", "```py\nimport sympy\nfrom sympy import S\nfrom sympy.physics.quantum.cg import CG, cg_simp\n```", "```py\nCG(S(1)/2, S(1)/2, S(1)/2, -S(1)/2, 1, 0).doit()\nCG(S(1)/2, -S(1)/2, S(1)/2, S(1)/2, 1, 0).doit()\n```", "```py\nCG(S(1)/2, S(1)/2, S(1)/2, -S(1)/2, 0, 0).doit()\nCG(S(1)/2, -S(1)/2, S(1)/2, S(1)/2, 0, 0).doit()\n```", "```py\nCG(1, 0, S(1)/2, S(1)/2, S(1)/2, S(1)/2).doit()\nCG(1, 1, S(1)/2, -S(1)/2, S(1)/2, S(1)/2).doit()\nCG(1, -1, S(1)/2, S(1)/2, S(1)/2, S(1)/2).doit()\n```", "```py\nT00 = {0: (1,-1, 1,0,  1,-1, 1,1,  0,0), \n       1: (1,-1, 1,1,  1,0,  1,0,  0,0),\n       2: (1,0,  1,-1, 1,-1, 1,1,  0,0),\n       3: (1,0,  1,1,  1,1,  1,-1, 0,0),\n       4: (1,1,  1,-1, 1,0,  1,0,  0,0),\n       5: (1,1,  1,0,  1,1,  1,-1, 0,0)}\n```", "```py\ndef comp_CG(T, k, display = None):\n  CGk = CG(*T[k][0:6]) * CG(*T[k][4:10])\n  if display:\n    print('CG(', *T[k][0:6], ') = ', CG(*T[k][0:6]).doit())\n    print('CG(', *T[k][4:10], ') = ', CG(*T[k][4:10]).doit())\n    print(\"CG{} =\".format(k), 'CG(', *T[k][0:6], ') * CG(', *T[k][4:10], ') = ', CGk.doit())\n  return CGk\n```", "```py\nCG0 = comp_CG(T00, 0, display=True)\n```", "```py\nfor k in range(0, len(T00)):\n  s = 'CG' + str(k) +' = comp_CG(T00, ' + str(k) + ')'\n  exec(s)\ns00 = [\"CG0: {}, CG1: {}, CG2: {}, CG3: {}, CG4: {}, CG5: {}\".\n     format(CG0.doit(), CG1.doit(), CG2.doit(), CG3.doit(), CG4.doit(), CG5.doit())]\nprint(s00)\n```", "```py\ndef Y_phase(theta, phi):\n  Y10a = comb_Y(1, 0, theta, phi)\n  Y11a = comb_Y(1, 1, theta, phi)\n  Y1m1a = comb_Y(1, -1, theta, phi)\n  Y10b = comb_Y(1, 0, theta, phi+1*np.pi/3)\n  Y11b = comb_Y(1, 1, theta, phi+1*np.pi/3)\n  Y1m1b = comb_Y(1, -1, theta, phi+1*np.pi/3)\n  Y10c = comb_Y(1, 0, theta, phi+2*np.pi/3)\n  Y11c = comb_Y(1, 1, theta, phi+2*np.pi/3)\n  Y1m1c = comb_Y(1, -1, theta, phi+2*np.pi/3)\n  return(Y10a, Y11a, Y1m1a, Y10b, Y11b, Y1m1b, Y10c, Y11c, Y1m1c)\n```", "```py\ndef compute_00_Y(ax_lim, cmap, title,  fig_name):\n  fig = plt.figure(figsize=plt.figaspect(1.))\n  (theta, phi, xyz) = setup_grid()\n  ax = fig.add_subplot(projection='3d')\n  (Y10a, Y11a, Y1m1a, Y10b, Y11b, Y1m1b, Y10c, Y11c, Y1m1c) = Y_phase(theta, phi)\n  Y_00 = float(CG0.doit()) * Y1m1a * Y10b * Y11c\n  Y_01 = float(CG1.doit()) * Y1m1a * Y11b * Y10c\n  Y_02 = float(CG2.doit()) * Y10a * Y1m1b * Y11c\n  Y_03 = float(CG3.doit()) * Y10a * Y11b * Y1m1c\n  Y_04 = float(CG4.doit()) * Y11a * Y1m1b * Y10c\n  Y_05 = float(CG5.doit()) * Y11a * Y10b * Y1m1c\n  Y = Y_00 + Y_01 + Y_02 + Y_03 + Y_04 + Y_05\n  Yx, Yy, Yz = np.abs(Y) * xyz\n  colour_plot(ax, Y, Yx, Yy, Yz, cmap)\n  draw_axes(ax, ax_lim, title)\n  plt.savefig(fig_name)\n  plt.show()\n  return\n```", "```py\ntitle = '$Nitrogen\\ with\\ 3p\\ electrons\\ (L=0,\\ M=0)$'\nfig_name ='Nitrogen_3p_L0_M0.png'\ncompute_00_Y(0.01, 'autumn', title, fig_name)\n```", "```py\ndef frame(mu):\n  a = 0\n  b = 0\n  f = {}\n  for k, v in mu.items():\n    for c in range(v):\n      f[a] = list(range(b+1, b+k+1))\n      a += 1\n      b += k\n  return f\n```", "```py\nprint(\"F_21_10 =\", frame({2: 1, 1:0}))\n```", "```py\nprint(\"F_21_11 =\", frame{2: 1, 1:1}))\n```", "```py\na0 = 5.29177210903e-11\n```", "```py\ndef comp_ak(n):\n  n = max(n,1)\n  # Create a dictionary with integer keys, starting with a0\n  dict = {0: a0}\n  for l in range (n-1):\n    for k in range(n-l-1):\n      ak = dict.get(k)\n      #display(\"l: {}, k: {}, ak: {}\".format(l, k, ak))\n      dict[k+1] = ak*(k+l+1-n)/((k+1)*(k+2*l+2))\n  return dict\n```", "```py\nd = comp_ak(10)\nfor k, v in d.items():\n  print(\"{}, {}\".format(k,v))\n```", "```py\nfrom sympy.physics.hydrogen import R_nl\nfrom sympy.abc import r, Z\n```", "```py\nR_nl(1, 0, r, Z)\n```", "```py\nR_nl(2, 0, r, Z)\n```", "```py\nR_nl(2, 1, r, Z)\n```", "```py\nfrom sympy import symbols, integrate, exp, oo\nx = symbols('x')\nintegrate(x**2 *exp(-2*x),(x,0,oo))\n```", "```py\nfrom sympy import symbols, sin, pi\nx = symbols('x')\nintegrate(sin(x),(x,0,pi))\n```", "```py\nintegrate(1,(x,0,2*pi))\n```", "```py\nfrom sympy import symbols, sin, cos\nx = symbols('x')\nintegrate(cos(x)*sin(x),(x,0,pi))\n```", "```py\nfrom sympy import symbols, integrate, exp, DiracDelta, oo\nx, y = symbols('x y')\nintegrate(x**2 * exp(-2*x) * integrate(y**2 * exp(-2*y)*DiracDelta(x - y),(y,0,oo)),(x,0,oo))\n```", "```py\nfrom sympy import symbols, integrate, exp, DiracDelta, oo\nx, y = symbols('x y')\nintegrate(x**2 * exp(-2*x) * integrate(DiracDelta(x - y),(y,0,oo)),(x,0,oo))\n```"]