- en: Introduction to Geospatial Code Libraries
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will introduce the major code libraries used to process and analyze
    geospatial data. You will learn the characteristics of each library, how they
    are related to each other, how to install them, where to find additional documentation,
    and typical use cases. These instructions assume that the user has a recent (2.7
    or later) version of Python on their machine, and do not cover installing Python.
    Next, we'll discuss how all of these packages fit together and how they are covered
    in the rest of this book.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'The following libraries will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: GDAL/OGR
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GEOS
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shapely
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fiona
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python Shapefile Library (`pyshp`)
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pyproj`'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rasterio
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GeoPandas
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Geospatial Data Abstraction Library (GDAL) and the OGR Simple Features Library
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Geospatial Data Abstraction Library** (**GDAL**)/**OGR Simple Features
    Library **combines two separate libraries that are generally downloaded together
    as a GDAL. This means that installing the GDAL package also gives access to OGR
    functionality, which is why they're covered together here. The reason GDAL is
    covered first is that other packages were written after GDAL, so chronologically,
    it comes first. As you will notice, some of the packages covered in this chapter
    extend GDAL's functionality or use it under the hood.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: GDAL was created in the 1990s by Frank Warmerdam and saw its first release in
    June 2000\. Later, the development of GDAL was transferred to the **Open Source
    Geospatial Foundation **(**OSGeo**). Technically, GDAL is a little different than
    your average Python package as the GDAL package itself was written in C and C++,
    meaning that in order to be able to use it in Python, you need to compile GDAL
    and its associated Python bindings. However, using `conda` and Anaconda makes
    it relatively easy to get started quickly. Because it was written in C and C++,
    the online GDAL documentation is written in the C++ version of the libraries.
    For Python developers, this can be challenging, but many functions are documented
    and can be consulted with the built-in `pydoc` utility, or by using the `help`
    function within Python.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Because of its history, working with GDAL in Python also feels a lot like working
    in C++ rather than pure Python. For example, a naming convention in OGR is different
    than Python's since you use uppercase for functions instead of lowercase. These
    differences explain the choice for some of the other Python libraries such as
    Rasterio and Shapely, which are also covered in this chapter, that has been written
    from a Python developer's perspective but offer the same GDAL functionality.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: GDAL is a massive and widely used data library for raster data. It supports
    the reading and writing of many raster file formats, with the latest version counting
    up to 200 different file formats that are supported. Because of this, it is indispensable
    for geospatial data management and analysis. Used together with other Python libraries,
    GDAL enables some powerful remote sensing functionalities. It's also an industry
    standard and is present in commercial and open source GIS software.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: The OGR library is used to read and write vector-format geospatial data, supporting
    reading and writing data in many different formats. OGR uses a consistent model
    to be able to manage many different vector data formats. We'll discuss this model
    when working with vector data in [Chapter 5](0b3a2208-3881-479a-83a8-78be85b9c1d6.xhtml),
    *Vector Data Analysis*. You can use OGR to do vector reprojection, vector data
    format conversion, vector attribute data filtering, and more.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: GDAL/OGR libraries are not only useful for Python programmers but are also used
    by many GIS vendors and open source projects. The latest GDAL version at the time
    of writing is 2.2.4, which was released in March 2018.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: Installing GDAL
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The installation of GDAL for Python used to be quite complicated, requiring
    you to fiddle with system settings and path variables. It is still possible to
    install GDAL in various ways, however, we recommend that you use either Anaconda3
    or `conda`, as this is the quickest and easiest way to get started. Other options
    are using `pip` install, or using an online repository such as [http://gdal.org](http://gdal.org)
    or Tamas Szekeres Windows binaries ([http://www.gisinternals.com/release.php](http://www.gisinternals.com/release.php)).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: However, this might be a little more involved than the options described here.
    The catch with installing GDAL is that a particular version of the library (that
    comes in the C language and is installed in a separate system directory from your
    local Python files) has an accompanying Python version, and needs to be compiled
    in order for you to use it in Python. In addition, GDAL for Python is dependent
    on some extra Python libraries that come with an installation. While it is possible
    to use multiple versions of GDAL on the same machine, the recommended approach
    here is to install it in a virtual environment, using Anaconda3, `conda`, or `pip`
    installations. This will keep your system settings clean of additional path variables
    or stop things from working.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: Installing GDAL using Anaconda3
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you're using Anaconda3, the easiest way to install GDAL is to create a virtual
    environment through Anaconda Navigator, choosing Python 3.6 as the preferred version.
    Then, choose `gdal` from the list of uninstalled Python packages. This will install
    `gdal` version 2.1.0.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: 'After installation, you can check if everything works OK by entering a Python
    shell and typing:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You can check GDAL''s version number as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This means you're running GDAL version 2.1.3.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: Installing GDAL using conda
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using `conda` to install GDAL gives you more flexibility in choosing a preferred
    Python version than Anaconda3\. If you open up a terminal, you can use the `conda
    search gdal` command to print a list of available `gdal` versions and the corresponding
    Python version. If you want to know the dependencies for each package, type `conda
    info gdal`. Particular versions of GDAL depend on a specific package version,
    which can be a problem if you have these already installed, for example, NumPy.
    Then, you can create a virtual environment to install and run GDAL and their dependencies
    with the accompanying Python version, for example:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You will be asked to proceed or not. If you confirm with `y` and hit *Enter*,
    a set of additional packages will be installed. These are called **dependencies**,
    which are packages that GDAL requires in order to function.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, `conda` does not list the latest GDAL version, 2.2.2, when you
    type in `conda search gdal`. Remember that in [Chapter 1](23e9b6f4-e43b-4bf7-bc80-2c1537d5f760.xhtml), *Package
    Installation and Management, *we stated that `conda` does not always have the
    latest test versions of packages available for installation that are available
    in other ways. This is one such case.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: Installing GDAL using pip
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Python Package Index** (PyPI) also offers GDAL, meaning you can use `pip` to
    install it on your machine. The installation is similar to the `conda` installation
    procedure described earlier, but this time using the `pip install` command. Again,
    it is recommended to use a virtual environment when installing GDAL instead of
    a root installation that requires you to create path variables in your system
    environment setting if you're using Windows.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: Installing a second GDAL version using pip
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you have a Windows machine and already have a working version of GDAL on
    your machine, but would like to install an extra one using `pip`, you can use
    the following link to install the GDAL version of your choice and then run the
    following command from your activated virtual environment to install it correctly:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: 'GDAL download repository: [https://www.lfd.uci.edu/~gohlke/pythonlibs/#gdal](https://www.lfd.uci.edu/~gohlke/pythonlibs/#gdal)'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`GDAL-2.1.3-cp27m-win32.whl` is the name of the downloaded GDAL repository.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: Other recommended GDAL resources
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The full documentation of the GDAL/OGR Python API is available at: [http://gdal.org/python/](http://gdal.org/python/).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: The homepage, [http://gdal.org](http://gdal.org), also offers download links
    to GDAL as well as extensive documentation for developers and users.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: GEOS
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Geometry Engine Open Source** (**GEOS**) is the C/C++ port of a subset
    of the **Java Topology Suite** (**JTS**) and selected functions. GEOS aims to
    contain the complete functionality of JTS in C++. It can be compiled on many platforms,
    including Python. As you will see later on, the Shapely library uses functions
    from the GEOS library. In fact, there are many applications using GEOS, including
    PostGIS and QGIS. GeoDjango, covered in [Chapter 12](a91ad85f-494d-4cc3-952f-d39a8933758e.xhtml), *GeoDjango*,
    also uses GEOS, as well as GDAL, among other geospatial libraries. GEOS can also
    be compiled with GDAL, giving OGR all of its capabilities.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: The JTS is an open source geospatial computational geometry library written
    in Java. It provides various functionalities, including a geometry model, geometric
    functions, spatial structures and algorithms, and i/o capabilities. Using GEOS,
    you have access to the following capabilities—geospatial functions (such as `within`
    and `contains`), geospatial operations (union, intersection, and many more), spatial
    indexing, **Open Geospatial Consortium** (**OGC**) **well-known text** (**WKT**) and
    **w****ell-known binary** (**WKB**) input/output, the C and C++ APIs, and thread
    safety.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: Installing GEOS
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'GEOS can be installed using `pip` install, `conda`, and Anaconda3:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Detailed installation info about GEOS and other documentation is available
    here: [https://trac.osgeo.org/geos/](https://trac.osgeo.org/geos/)'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: Shapely
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Shapely is a Python package for manipulation and analysis of planar features,
    using functions from the GEOS library (the engine of PostGIS) and a port of the
    JTS. Shapely is not concerned with data formats or coordinate systems but can
    be readily integrated with packages that are. Shapely only deals with analyzing
    geometries and offers no capabilities for reading and writing geospatial files.
    It was developed by Sean Gillies, who was also the person behind Fiona and Rasterio.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: Shapely supports eight fundamental geometry types that are implemented as a
    class in the `shapely.geometry` module—points, multipoints, linestrings, multilinestrings,
    linearrings, multipolygons, polygons, and geometrycollections. Apart from representing
    these geometries, Shapely can be used to manipulate and analyze geometries through
    a number of methods and attributes.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: Shapely has mainly the same classes and functions as OGR while dealing with
    geometries. The difference between Shapely and OGR is that Shapely has a more
    Pythonic and very intuitive interface, is better optimized, and has a well-developed
    documentation. With Shapely, you're writing pure Python, whereas with GEOS, you're
    writing C++ in Python. For **data munging**, a term used for data management and
    analysis, you're better off writing in pure Python rather than C++, which explains
    why these libraries were created.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: For more information on Shapely, consult the documentation at [https://toblerity.org/shapely/manual.html](https://toblerity.org/shapely/manual.html).
    This page also has detailed information on installing Shapely for different platforms
    and how to build Shapely from the source for compatibility with other modules
    that depend on GEOS. This refers to the fact that installing Shapely will require
    you to upgrade NumPy and GEOS if these are already installed.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: Installing Shapely
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Shapely can be installed using `pip` install, `conda`, and Anaconda3:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Windows users can also get the wheels at [http://www.lfd.uci.edu/~gohlke/pythonlibs/#shapely](http://www.lfd.uci.edu/~gohlke/pythonlibs/#shapely).
    A wheel is a built-package format for Python, containing a ZIP format archive
    with a specially formatted filename and the `.whl` extension. Shapely 1.6 requires
    a Python version higher than 2.6 and a GEOS version higher or equal to 3.3.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: Also look at [https://pypi.python.org/pypi/Shapely](https://pypi.python.org/pypi/Shapely)
    for more information on installing and using Shapely.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: Fiona
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Fiona is the API of OGR. It can be used for reading and writing data formats.
    The main reason for using it instead of OGR is that it's closer to Python than
    OGR as well as more dependable and less error-prone. It makes use of two markup
    languages, WKT and WKB, for representing spatial information with regards to vector
    data. As such, it can be combined well with other Python libraries such as Shapely,
    you would use Fiona for input and output, and Shapely for creating and manipulating
    geospatial data.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: While Fiona is Python compatible and our recommendation, users should also be
    aware of some of the disadvantages. It is more dependable than OGR because it
    uses Python objects for copying vector data instead of C pointers, which also
    means that they use more memory, which affects the performance.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: Installing Fiona
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can use `pip` install, `conda`, or Anaconda3 to install Fiona:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Fiona requires Python 2.6, 2.7, 3.3, or 3.4 and GDAL/OGR 1.8+. Fiona depends
    on the modules `six`, `cligj`, `munch`, `argparse`, and `ordereddict` (the two
    latter modules are standard in Python 2.7+).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: Consult Fiona's readme page for more download info [https://toblerity.org/fiona/README.html](https://toblerity.org/fiona/README.html).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: Python shapefile library (pyshp)
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Python shapefile library** (**pyshp**) is a pure Python library and is
    used to read and write shapefiles. The `pyshp` library's sole purpose is to work
    with shapefiles—it only uses the Python standard library. You cannot use it for
    geometric operations. If you're only working with shapefiles, this one-file-only
    library is simpler than using GDAL.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: Installing pyshp
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can use `pip` install, `conda`, and Anaconda3 to install `pyshp`:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'More documentation is available at PyPi: [https://pypi.python.org/pypi/pyshp/1.2.3](https://pypi.python.org/pypi/pyshp/1.2.3)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: The source code for `pyshp` is available at [https://github.com/GeospatialPython/pyshp](https://github.com/GeospatialPython/pyshp).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: pyproj
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `pyproj` is a Python package that performs cartographic transformations
    and geodetic computations. It is a Cython wrapper to provide Python interfaces
    to PROJ.4 functions, meaning you can access an existing library of C code in Python.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: 'PROJ.4 is a projection library that transforms data among many coordinate systems
    and is also available through GDAL and OGR. The reason that PROJ.4 is still popular
    and widely used is two-fold:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: Firstly, because it supports so many different coordinate systems
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Secondly, because of the routes it provides to do this—Rasterio and GeoPandas,
    two Python libraries covered next, both use `pyproj` and thus PROJ.4 functionality
    under the hood
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The difference between using PROJ.4 separately instead of using it with a package
    such as GDAL is that it enables you to re-project individual points, and packages
    using PROJ.4 do not offer this functionality.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: The `pyproj` package offers two classes—the `Proj` class and the `Geod` class.
    The `Proj` class performs cartographic computations, while the `Geod` class performs
    geodetic computations.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: Installing pyproj
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Installation of `pyproj` can be done with `pip` install, `conda`, and Anaconda3:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The following link contains more information on `pyproj`: [https://jswhit.github.io/pyproj/](https://jswhit.github.io/pyproj/)'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: You can find more about PROJ.4 at [http://proj4.org/](http://proj4.org/).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: Rasterio
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Rasterio is a GDAL and NumPy-based Python library for raster data, written with
    the Python developer in mind instead of C, using Python language types, protocols,
    and idioms. Rasterio aims to make GIS data more accessible to Python programmers
    and helps GIS analysts learn important Python standards. Rasterio relies on concepts
    of Python rather than GIS.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: Rasterio is an open source project from the satellite team of Mapbox, a provider
    of custom online maps for websites and applications. The name of this library
    should be pronounced as *raster-i-o* rather than *ras-te-rio*. Rasterio came into
    being as a result of a project called the **Mapbox Cloudless Atlas**, which aimed
    to create a pretty-looking basemap from satellite imagery.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: One of the software requirements was to use open source software and a high-level
    language with handy multi-dimensional array syntax. Although GDAL offers proven
    algorithms and drivers, developing with GDAL's Python bindings feels a lot like
    C++.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, Rasterio was designed to be a Python package at the top, with extension
    modules (using Cython) in the middle, and a GDAL shared library on the bottom.
    Other requirements for the raster library were being able to read and write NumPy
    ndarrays to and from data files, use Python types, protocols, and idioms instead
    of C or C++ to free programmers from having to code in two languages.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: For georeferencing, Rasterio follows the lead of `pyproj`. There are a couple
    of capabilities added on top of reading and writing, one of them being a features
    module. Reprojection of geospatial data can be done with the `rasterio.warp` module.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: 'Rasterio''s project homepage can be found here: [https://github.com/mapbox/rasterio](https://github.com/mapbox/rasterio)'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: Rasterio dependencies
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As stated earlier, Rasterio uses GDAL, meaning it's one of its dependencies.
    Python package dependencies are `affine`, `cligj`, `click`, `enum34`, and `numpy`.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: 'The documentation for Rasterio can be found here: [https://mapbox.github.io/rasterio/](https://mapbox.github.io/rasterio/)'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: Installation of Rasterio
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To install Rasterio on a Windows machine, you need to download the `rasterio`
    and GDAL binaries for your system and run:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Using `conda`, you can install `rasterio` this way:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '`conda-forge` is an additional channel from which packages may be installed.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: 'Detailed installation instructions for different platforms are available here:
    [https://mapbox.github.io/rasterio/installation.html](https://mapbox.github.io/rasterio/installation.html)'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: GeoPandas
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GeoPandas is a Python library for working with vector data. It is based on the
    `pandas` library that is part of the SciPy stack. SciPy is a popular library for
    data inspection and analysis, but unfortunately, it cannot read spatial data.
    GeoPandas was created to fill this gap, taking `pandas` data objects as a starting
    point. The library also adds functionality from geographical Python packages.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: GeoPandas offers two data objects—a GeoSeries object that is based on a `pandas`
    Series object and a GeoDataFrame, based on a `pandas` DataFrame object, but adding
    a geometry column for each row. Both GeoSeries and GeoDataFrame objects can be
    used for spatial data processing, similar to spatial databases. Read and write
    functionality is provided for almost every vector data format. Also, because both
    Series and DataFrame objects are subclasses from pandas data objects, you can
    use the same properties to select or subset data, for example `.loc` or `.iloc`.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: GeoPandas is a library that employs the capabilities of newer tools, such as
    Jupyter Notebooks, pretty well, whereas GDAL enables you to interact with data
    records inside of vector and raster datasets through Python code. GeoPandas takes
    a more visual approach by loading all records into a GeoDataFrame so that you
    can see them all together on your screen. The same goes for plotting data. These
    functionalities were lacking in Python 2 as developers were dependent on IDEs
    without extensive data visualization capabilities which are now available with
    Jupyter Notebooks.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: GeoPandas installation
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are various ways to install GeoPandas. You can use `pip` install, `conda` install,
    Anaconda3, or GitHub. Using a terminal window, you can install it as follows:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Detailed installation info is available here: [http://geopandas.org/install.html](http://geopandas.org/install.html)'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: 'GeoPandas is also available through PyPi: [https://pypi.python.org/pypi/geopandas/0.3.0](https://pypi.python.org/pypi/geopandas/0.3.0)'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: 'GeoPandas is also available through Anaconda Cloud: [https://anaconda.org/IOOS/geopandas](https://anaconda.org/IOOS/geopandas)'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: GeoPandas dependencies
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GeoPandas depends on the following Python libraries, `pandas`, Shapely, Fiona,
    `pyproj`, NumPy, and `six`. These are either updated or installed when you install
    `GeoPandas`.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: The `Geopandas` documentation is available at [http://geopandas.org](http://geopandas.org).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: How it all works together
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've provided an overview of the most important open source packages for processing
    and analyzing geospatial data**.** The question then becomes when to use a certain
    package and why. GDAL, OGR, and GEOS are indispensable for geospatial processing
    and analyzing, but were not written in Python, and so they require Python binaries
    for Python developers. Fiona, Shapely, and `pyproj` were written to solve these
    problems, as well as the newer Rasterio library. For a more Pythonic approach,
    these newer packages are preferable to the older C++ packages with Python binaries
    (although they're used under the hood).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: However, it's good to know the origins and history of all of these packages
    as they're all so widely used (and for good reason). The next chapter, which will
    be discussing geospatial databases, will build on information from this chapter.
    [Chapter 5](0b3a2208-3881-479a-83a8-78be85b9c1d6.xhtml), *Vector Data Analysis*,
    and [Chapter 6](a5c9354e-8ea4-45f6-9e69-191375e171c3.xhtml), *Raster Data Processing,* will
    specifically deal with the libraries discussed here, getting deeper into the details
    of both raster and vector data processing using these libraries.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you should have a global overview of the most important packages
    for processing and analyzing, their history, and how they relate to each other.
    You should have an idea of what options are available for a certain use case and
    why one package is preferable over another. However, as is often the way in programming,
    there might be multiple solutions for one particular problem. For example, when
    dealing with shapefiles, you could use `pyshp`, GDAL, Shapely, or GeoPandas, depending
    on your preference and the problem at hand.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we introduced the major code libraries used to process and
    analyze geospatial data. You learned the characteristics of each library, how
    they are related or are distinct to each other, how to install them, where to
    find additional documentation, and typical use cases. GDAL is a major library
    that includes two separate libraries, OGR and GDAL. Many other libraries and software
    applications use GDAL functionality under the hood, examples are Fiona and Rasterio,
    which were both covered in this chapter. These were created to make it easier
    to work with GDAL and OGR in a more Pythonic way.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will introduce spatial databases. These are used for data storage
    and analysis, with examples being SpatiaLite and PostGIS. You will also learn
    how to use different Python libraries to connect to these databases.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将介绍空间数据库。这些数据库用于数据存储和分析，例如SpatiaLite和PostGIS。你还将学习如何使用不同的Python库来连接这些数据库。
