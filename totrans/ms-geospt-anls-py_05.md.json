["```py\nIn: %run \"C:\\Users\\Eric\\Anaconda3\\pkgs\\gdal-2.2.2-                        \n    py36_1\\Scripts\\ogrmerge.py\" -f GPKG -o\n    merged.gpkg \"C:\\data\\gdal\\NE\\10m_cultural\\*.shp\"\n```", "```py\nIn: from osgeo import ogr\n    r = ogr.Geometry(ogr.wkbLinearRing)\n    r.AddPoint(1,1)\n    r.AddPoint(5,1)\n    r.AddPoint(5,5)\n    r.AddPoint(1,5)\n    r.AddPoint(1,1)\n    poly = ogr.Geometry(ogr.wkbPolygon)\n    poly.AddGeometry(r)\n    print(poly.ExportToWkt())\nOut: POLYGON ((1 1 0,5 1 0,5 5 0,1 5 0,1 1 0))\n```", "```py\nIn: from osgeo import ogr\n    geojson = \"\"\"{\"type\":\"Polygon\",\"coordinates\":[[[1,1],[5,1],\n    [5,5],[1,5], [1,1]]]}\"\"\"\n    polygon = ogr.CreateGeometryFromJson(geojson)\n    print(polygon)  \nOut: POLYGON ((1 1,5 1,5 5,1 5,1 1))\n```", "```py\n# 1 create area\nIn: print(\"The area of our polygon is %d\" % polygon.Area())\nOut: The area of our polygon is 16\n\n# 2 calculate centroid of polygon\nIn: cen = polygon.Centroid()\nprint(cen)\nOut: POINT (3 3)\n\n# 3 Get the boundary\nIn: b = polygon.GetBoundary()\nprint(b)\nOut: LINESTRING (1 1,5 1,5 5,1 5,1 1)\n# 4 convex hull does the same in this case as boundary, as our polygon is a square:\nIn: ch = polygon.ConvexHull() \nprint(ch)\nOut: POLYGON ((1 1,1 5,5 5,5 1,1 1))\n# 5 buffer. A buffer value of 0 (zero) returns the same values as boundary and convex hull in this example:\nIn: buffer = polygon.Buffer(0) \nprint(buffer)\nOut: POLYGON ((1 1,1 5,5 5,5 1,1 1))# 6 check if a point is inside our polygon\nIn: point = ogr.Geometry(ogr.wkbPoint)\npoint.AddPoint(10, 10)\npolygon.Contains(point)\nOut: False\n```", "```py\nIn:  import osgeo.ogr, osgeo.osr\n    # 1 set the spatial reference\n    spatialReference = osgeo.osr.SpatialReference()\n    spatialReference.ImportFromProj4('+proj=longlat +ellps=WGS84                 \n    +datum=WGS84 +no_defs')\n\n    # 2 create a new shapefile\n    driver = osgeo.ogr.GetDriverByName('ESRI Shapefile')\n    shapeData = driver.CreateDataSource('my_polygon.shp')\n\n    # 3 create the layer\n    layer = shapeData.CreateLayer('polygon_layer', spatialReference,             \n    osgeo.ogr.wkbPolygon)\n    layerDefinition = layer.GetLayerDefn()\n\n    # 4 geometry is put inside feature\n    featureIndex = 0\n    feature = osgeo.ogr.Feature(layerDefinition)\n    feature.SetGeometry(polygon)\n    feature.SetFID(featureIndex)\n\n    # 5 feature is put into layer\n    layer.CreateFeature(feature)\n```", "```py\nIn: !ogrinfo my_polygon.shp\nOut: INFO: Open of `my_polygon.shp'\n     using driver `ESRI Shapefile' successful.\n     1: my_polygon (Polygon)\n```", "```py\nIn: # import the modules\n    from osgeo import ogr\n    import os\n    # reference the shapefile and specify driver type\n    shapefile =                                              \n    r\"C:\\data\\gdal\\NE\\10m_cultural\\ne_10m_populated_places.shp\"\n    driver = ogr.GetDriverByName(\"ESRI Shapefile\")\n    # open the data source with driver, zero means open in read-only \n    mode\n    dataSource = driver.Open(shapefile, 0)\n    # use the GetLayer() function for referencing the layer that holds \n    the data\n    layer = dataSource.GetLayer()\n    # pass in the coordinates for the data frame to the                     \n    SetSpatialFilterRect() function. This filter creates a rectangular     \n    extent and selects the features\n      inside the extent\n      layer.SetSpatialFilterRect(-102, 26, -94, 36)\n      for feature in layer:\n      # select only the cities inside of the USA\n      # we can do this through a SQL query:\n      # we skip the cities that are not in the USA,\n      # and print the names of the cities that are\n          if feature.GetField(\"ADM0NAME\") != \"United States of                              \n      America\":\n              continue\n          else:\n              print(feature.GetField(\"NAME\"))\n\nOut:    Ardmore\n        McAlester\n        Bryan\n        San Marcos\n        Longview\n        …\n```", "```py\nIn:   from shapely.geometry import Polygon\n      p1 = Polygon(((1, 2), (5, 3), (5, 7), (1, 9), (1, 2)))\n      p2 = Polygon(((6,6), (7,6), (10,4), (11,8), (6,6)))\n      p1 \n      # A new command line is required for printing the second polygon:\nIn:   p2\n\n      # Point takes tuples as well as positional coordinate values\nIn:   from shapely.geometry import Point\n      point = Point(2.0, 2.0)\n      q = Point((2.0, 2.0))\n      q\n\n       # line geometry\nIn:    from shapely.geometry import LineString\n       line = LineString([(0, 0), (10,10)])\n       line\n\n       # linear rings\nIn:    from shapely.geometry.polygon import LinearRing\n       ring = LinearRing([(0,0), (3,3), (3,0)])\n       ring\n\n       # collection of points\nIn:    from shapely.geometry import MultiPoint\n       points = MultiPoint([(0.0, 0.0), (3.0, 3.0)])\n       points\n\n       # collection of lines\nIn:    from shapely.geometry import MultiLineString\n       coords = [((0, 0), (1, 1)), ((-1, 0), (1, 0))]\n       coords\n\n       # collection of polygons\nIn:    from shapely.geometry import MultiPolygon\n       polygons = MultiPolygon([p1, p2,])\n       polygons\n```", "```py\nIn:    print(p1.area)\n       print(p1.bounds)\n       print(p1.length)\n       print(p1.geom_type)\n\nOut:   22.0\n       (1.0, 2.0, 5.0, 9.0)\n       19.59524158061724\n       Polygon\n```", "```py\nIn:    import json\n       from shapely.geometry import mapping, shape\n       p = shape(json.loads('{\"type\": \"Polygon\", \"coordinates\":                                     \n       [[[1,1], [1,3 ], [3,3]]]}'))\n       print(json.dumps(mapping(p)))\n       p.area\n\nOut:   {\"type\": \"Polygon\", \"coordinates\": [[[1.0, 1.0], [1.0, 3.0],                             \n       [3.0, 3.0], [1.0, 1.0]]]}\n       2.0        # result of p.area\n```", "```py\nIn:   import fiona\n      c = fiona.open(r\"C:\\data\\gdal\\NE\\\n      110m_cultural\\ne_110m_admin_1_states_provinces.shp\")\n      rec = next(iter(c))\n      rec.keys()\n\nOut:  dict_keys(['type', 'id', 'geometry', 'properties'])\n```", "```py\nIn:   import pprint\n      pprint.pprint(rec['type'])\n      pprint.pprint(rec['id'])\n      pprint.pprint(rec['properties'])\n      pprint.pprint(rec['geometry'])\n\nOut:  'Feature'\n      '0'\n      OrderedDict([('adm1_code', 'USA-3514'),\n                  ('diss_me', 3514),\n                  ('iso_3166_2', 'US-MN'),\n                  ('wikipedia',                                               \n      'http://en.wikipedia.org/wiki/Minnesota'),\n                  ('iso_a2', 'US'),\n                  ('adm0_sr', 1),\n                  ('name', 'Minnesota'), ….\n```", "```py\nIn:   print(len(c))        # prints total amount of features     \n      print(c.driver)      # prints driver name\n      print(c.crs)         # prints coordinate reference system of data                                                                                  file\n\nOut:  51\n      ESRI Shapefile\n      {'init': 'epsg:4326'}\n```", "```py\nIn:   import pprint, fiona\n      with fiona.open\\              \n     (r\"C:\\data\\gdal\\NE\\110m_cultural\\ne_110m_admin_1_states_provinc        \n     es.shp\") as src:\n      pprint.pprint(src[0])\n```", "```py\nIn:   from shapely.geometry import shape\n      minnesota = {'type': 'Polygon', 'coordinates': \n      [[(-89.61369767938538, 47.81925202085796), (-89.72800594761503, \n      47.641976019880644), (-89.84283098016755, 47.464725857119504), \n      (-89.95765601272012, 47.286907253603175),....]]}\n```", "```py\nIn: import geopandas as gpd\n    %matplotlib inline\n    df = gpd.read_file\\\n (r\"C:\\data\\gdal\\NE\\110m_cultural\\ne_110m_admin_1_states_provinces.shp\" )\n    df\n```", "```py\nIn:        type(df)\nOut:       geopandas.geodataframe.GeoDataFrame\n\nIn:        df.shape\nOut:       (51, 61)\n\nIn:        df.columns\nOut:       Index(['adm1_code', 'diss_me', 'iso_3166_2', 'wikipedia', ...\n```", "```py\nIn:        df.loc[0]\n\nOut:       adm1_code       USA-3514\n           diss_me         3514\n           iso_3166_2      US-MN\n           Wikipedia       http://en.wikipedia.org/wiki/Minnesota\n           iso_a2          US\n           adm0_sr         1\n           name            Minnesota\n           …               …\n```", "```py\nIn:    df['name']\n\nOut:   0    Minnesota\n       1    Montana\n       2    North Dakota\n       3    Hawaii\n       4    Idaho\n       5    Washington\n       …    …\n```", "```py\nIn:    california = df.loc[df['name'] == \"California\"]\n       california\n```", "```py\nIn:    california.plot(figsize=(7,7))\n```", "```py\nIn:   multipl = df.iloc[[5,7,9,11]]\n      multipl.plot(cmap=\"Set1\", figsize=(7,7))\n```", "```py\nIn:  exp = df.cx[-124:-118,30:50]\n     exp.plot(cmap=\"Set1\", figsize=(7,7))\n```", "```py\nIn:   import geopandas\n```", "```py\nIn:  states =              \n     geopandas.read_file(r\"C:\\data\\gdal\\NE\\110m_cultural\\ne_110m_admin_          \n     1_states_provinces.shp\")\n```", "```py\nIn:   states\n```", "```py\nIn: %matplotlib inline\n    states.plot(figsize=(10,10))\n```", "```py\nIn: fires =                                                                     \n    geopandas.read_file(r\"C:\\data\\mtbs_fod_pts_data\\mtbs_fod_pts_201705        \n    01.shp\") \n    fires\nIn: fires.plot(markersize=1, figsize=(17,17))\n```", "```py\nIn:    fires.crs\nOut:   {'init': 'epsg:4269'}\n\nIn:    states.crs\nOut:   {'init': 'epsg:4326'}\n```", "```py\nIn: fires = fires.to_crs({'init': 'epsg:4326'})\n```", "```py\nIn: state_fires =                                                    \n   geopandas.sjoin(fires,states[['name','geometry']].copy(),op='within'    )\n    state_fires\n```", "```py\nIn:   counts_per_state = state_fires.groupby('name').size()\n      counts_per_state.sort_values(axis=0, ascending=False)\n```", "```py\nIn: states =        \n    states.merge(counts_per_state.reset_index(name='number_of_fires'))\n    states.head()\n```", "```py\nIn: ax = states.plot(column='number_of_fires', figsize=(15, 6),                       \n    cmap='OrRd', legend=True)\n```", "```py\nIn: ax = states.plot(column='number_of_fires', figsize=(15, 6),\n    cmap='Accent', legend=True)\n```", "```py\nIn: import matplotlib.pyplot as plt\n    f, ax = plt.subplots(1, figsize=(18,6))\n    ax = states.plot(column='number_of_fires', cmap='Accent',                 \n    legend=True, ax=ax)\n    lims = plt.axis('equal')\n    f.suptitle('US Wildfire count per state in 1984-2015')                     \n    ax.set_axis_off()\n    plt.show()\n```", "```py\nIn:        len(fires.index)\n\nOut:       20340\n```", "```py\nIn:        counts_per_state.sum()\n\nOut:       20266\n```", "```py\nIn:        fires.empty   #checks if there are empty fields in the                             \n                         dataframe\n\nOut:       False\n```", "```py\nIn:        fires['geometry'].empty\n\nOut:       False\n```"]