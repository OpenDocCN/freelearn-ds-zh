- en: PostGIS and the Web
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PostGIS 和网络
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Creating WMS and WFS services with MapServer
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 MapServer 创建 WMS 和 WFS 服务
- en: Creating WMS and WFS services with GeoServer
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 GeoServer 创建 WMS 和 WFS 服务
- en: Creating a WMS Time service with MapServer
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 MapServer 创建 WMS 时间服务
- en: Consuming WMS services with OpenLayers
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 OpenLayers 消费 WMS 服务
- en: Consuming WMS services with Leaflet
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Leaflet 消费 WMS 服务
- en: Consuming WFS-T services with OpenLayers
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 OpenLayers 消费 WFS-T 服务
- en: Developing web applications with GeoDjango – part 1
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 GeoDjango 开发网络应用程序 – 第 1 部分
- en: Developing web applications with GeoDjango – part 2
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 GeoDjango 开发网络应用程序 – 第 2 部分
- en: Developing a web GPX viewer with Mapbox
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Mapbox 开发网络 GPX 查看器
- en: Introduction
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In this chapter, we will try to give you an overview of how you can use PostGIS
    to develop powerful GIS web applications, using **Open Geospatial Consortium**
    (**OGC**) web standards such as **Web Map Service** (**WMS**) and **Web Feature
    Service** (**WFS**).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将尝试为您概述如何使用 PostGIS 开发强大的 GIS 网络应用程序，利用 **开放地理空间联盟** (**OGC**) 网络标准，如
    **网络地图服务** (**WMS**) 和 **网络要素服务** (**WFS**)。
- en: In the first two recipes, you will get an overview of two very popular open
    source web-mapping engines, **MapServer** and **GeoServer**. In both these recipes,
    you will see how to implement WMS and WFS services using PostGIS layers.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在前两个食谱中，您将概述两个非常流行的开源网络地图引擎，**MapServer** 和 **GeoServer**。在这两个食谱中，您将了解如何使用 PostGIS
    层实现 WMS 和 WFS 服务。
- en: In the third recipe, you will implement a **WMS Time** service using MapServer
    to expose time-series data.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在第三个食谱中，您将使用 MapServer 实现 **WMS 时间**服务，以公开时间序列数据。
- en: In the next two recipes, you will learn how to consume these web services to
    create web map viewers with two very popular JavaScript clients. In the fourth
    recipe, you will use a WMS service with **OpenLayers**, while in the fifth recipe,
    you will do the same thing using **Leaflet**.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的两个食谱中，您将学习如何使用两个非常流行的 JavaScript 客户端来创建网络地图查看器。在第四个食谱中，您将使用 OpenLayers
    来使用 WMS 服务，而在第五个食谱中，您将使用 Leaflet 来做同样的事情。
- en: In the sixth recipe, you will explore the power of transactional WFS to create
    web-mapping applications to enable editing data.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在第六个食谱中，您将探索事务性 WFS 的力量，以创建允许编辑数据的网络地图应用程序。
- en: In the next two recipes, you will unleash the power of the popular **Django**
    web framework, which is based on Python, and its nice **GeoDjango** library, and
    see how it is possible to implement a powerful **CRUD** GIS web application. In
    the seventh recipe, you will create the back office for this application using
    the Django Admin site, and in the last recipe of the chapter, you will develop
    a frontend for users to display data from the application in a web map based on
    Leaflet.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的两个食谱中，您将释放流行的基于 Python 的 **Django** 网络框架及其优秀的 **GeoDjango** 库的力量，并了解如何实现一个强大的
    **CRUD** GIS 网络应用程序。在第七个食谱中，您将使用 Django Admin 站点为该应用程序创建后台，而在本章的最后一个食谱中，您将为用户提供一个前端，以便在基于
    Leaflet 的网络地图中显示应用程序中的数据。
- en: Finally, in the last recipe, you will learn how to import your PostGIS data
    into Mapbox using **OGR** to create a custom web GPX viewer.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在本章的最后一个食谱中，您将学习如何使用 **OGR** 将您的 PostGIS 数据导入 Mapbox，以创建一个定制的网络 GPX 查看器。
- en: Creating WMS and WFS services with MapServer
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 MapServer 创建 WMS 和 WFS 服务
- en: In this recipe, you will see how to create a WMS and WFS from a PostGIS layer,
    using the popular MapServer open source web-mapping engine.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，您将了解如何使用流行的开源网络地图引擎 MapServer，从 PostGIS 层创建 WMS 和 WFS。
- en: You will then use the services, testing their exposed requests, using first
    a browser and then a desktop tool such as QGIS (you could do this using other
    software, such as uDig, gvSIG, and OpenJUMP GIS).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您将使用这些服务，通过首先使用浏览器然后使用桌面工具（如 QGIS）来测试它们公开的请求（您可以使用其他软件，如 uDig、gvSIG 和 OpenJUMP
    GIS 来完成此操作）。
- en: Getting ready
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Follow these steps before getting ready:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在准备工作之前，请遵循以下步骤：
- en: 'Create a schema for this chapter within the `postgis_cookbook` database using
    the following command:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令在 `postgis_cookbook` 数据库中为本章创建一个模式：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Be sure to have Apache HTTP installed (MapServer will run on it as a CGI) and
    check whether it is working by visiting its home page at `http://localhost` (typically,
    an `It works!` message will be displayed if you still have not customized any
    features).
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保已安装 Apache HTTP（MapServer 将作为 CGI 在其上运行）并检查其是否正常工作，通过访问其主页 `http://localhost`（通常，如果您尚未自定义任何功能，将显示
    `It works!` 消息）。
- en: Install MapServer as per its installation guide ([http://mapserver.org/installation/index.html](http://mapserver.org/installation/index.html)).
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照其安装指南 ([http://mapserver.org/installation/index.html](http://mapserver.org/installation/index.html))
    安装 MapServer。
- en: A handy way to have MapServer up and running in Apache for Windows is to install
    the OSGeo4W ([http://trac.osgeo.org/osgeo4w/](http://trac.osgeo.org/osgeo4w/))
    or MS4W ([http://www.maptools.org/ms4w/](http://www.maptools.org/ms4w/)) packages.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 上为 Apache 安装 MapServer 并使其运行的一个便捷方法是安装 OSGeo4W ([http://trac.osgeo.org/osgeo4w/](http://trac.osgeo.org/osgeo4w/))
    或 MS4W ([http://www.maptools.org/ms4w/](http://www.maptools.org/ms4w/)) 软件包。
- en: For Linux, there are packages for almost any kind of distribution.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Linux，几乎任何类型的发行版都有相应的软件包。
- en: 'For macOS, you can use again the CMake app to build the installation or use
    Homebrew with the following command (note the flags needed to compile it with
    Postgres support):'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 macOS，您可以使用 CMake 应用程序来构建安装，或者使用 Homebrew 并使用以下命令（注意编译时需要使用的标志以支持 Postgres）：
- en: '`brew install mapserver --with-postgresql --with-geos`'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`brew install mapserver --with-postgresql --with-geos`'
- en: Check whether MapServer has been installed correctly and has `POSTGIS`, `WMS_SERVER`,
    and `WFS_SERVER` support enabled, by running it as a command-line tool with the
    `-v` option.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过以命令行工具运行并使用 `-v` 选项来检查 MapServer 是否已正确安装，并且已启用 `POSTGIS`、`WMS_SERVER` 和 `WFS_SERVER`
    支持。
- en: 'On Linux, run the `$ /usr/lib/cgi-bin/mapserv -v` command and check for the
    following output:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 上，运行 `$ /usr/lib/cgi-bin/mapserv -v` 命令并检查以下输出：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'On Windows, run the following command:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 上，运行以下命令：
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'On macOS, use the `$ mapserv -v` command:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在 macOS 上，使用 `$ mapserv -v` 命令：
- en: '![](img/9605c5be-1509-4b2b-814f-cbaa205e7f41.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9605c5be-1509-4b2b-814f-cbaa205e7f41.png)'
- en: Now check whether MapServer is working from within HTTPD, using `http://localhost/cgi-bin/mapserv`
    (`http://localhost/cgi-bin/mapserv.exe` for Windows). If you get a `No query information
    to decode. QUERY_STRING is set, but empty` response message, MapServer is correctly
    working as a CGI script in Apache and is ready to accept HTTP requests.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，通过使用 `http://localhost/cgi-bin/mapserv` (`http://localhost/cgi-bin/mapserv.exe`
    对于 Windows）检查 MapServer 是否在 HTTPD 中运行。如果您收到 `No query information to decode. QUERY_STRING
    is set, but empty` 的响应消息，则 MapServer 正确作为 Apache 中的 CGI 脚本运行，并准备好接受 HTTP 请求。
- en: 'Download the world countries shapefile from [http://thematicmapping.org/downloads/TM_WORLD_BORDERS-0.3.zip](http://thematicmapping.org/downloads/TM_WORLD_BORDERS-0.3.zip).
    A copy of this shapefile is included in the book dataset for [Chapter 1](38f20dd1-ca55-47e8-80cd-21670bcb32b2.xhtml),
    *Moving Data In and Out of PostGIS*. Extract the shapefile to the `working/chp09`
    directory and import it in PostGIS using the **shp2pgsql** tool (be sure to specify
    the spatial reference system, *EPSG:4326*, with the `-s` option), as follows:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [http://thematicmapping.org/downloads/TM_WORLD_BORDERS-0.3.zip](http://thematicmapping.org/downloads/TM_WORLD_BORDERS-0.3.zip)
    下载世界国家形状文件。本书数据集中包含此形状文件的副本，用于 [第 1 章](38f20dd1-ca55-47e8-80cd-21670bcb32b2.xhtml)，*将数据导入和导出
    PostGIS*。将形状文件提取到 `working/chp09` 目录，并使用 **shp2pgsql** 工具将其导入 PostGIS（确保使用 `-s`
    选项指定空间参考系统，*EPSG:4326*），如下所示：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How to do it...
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点……
- en: 'Carry out the following steps:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: 'MapServer exposes its map services using `mapfile`, a text file format, with
    which it is possible to define the PostGIS layers on the web, enable any vector
    and raster format supported by GDAL, and specify which services (WMS/WFS/WCS)
    to expose per layer. Create a new text file named `countries.map` and add the
    following code:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: MapServer 通过 `mapfile` 文本文件格式公开其地图服务，该格式可以用来在网络上定义 PostGIS 层，启用 GDAL 支持的任何矢量或栅格格式，并指定每个图层要公开的服务（WMS/WFS/WCS）。创建一个名为
    `countries.map` 的新文本文件，并添加以下代码：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Save the file we just created in a location that is accessible to the Apache
    user. For example, in Debian, it is `/var/www/data`, while in Windows, it can
    be `C:\ms4w\Apache\htdocs`; for macOS, you should use `/Library/WebServer/Documents`.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将我们刚刚创建的文件保存在 Apache 用户可访问的位置。例如，在 Debian 上是 `/var/www/data`，在 Windows 上可以是
    `C:\ms4w\Apache\htdocs`；对于 macOS，您应该使用 `/Library/WebServer/Documents`。
- en: Be sure that both the file and the directory containing it are accessible to
    the Apache user.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 确保文件及其所在的目录对 Apache 用户可访问。
- en: 'Create a file named `template.html` in the same location as the `mapfile` and
    enter the following code in it (this file is used by the `GetFeatureInfo` WMS
    request to output an HTML response to the client):'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在与 `mapfile` 相同的位置创建一个名为 `template.html` 的文件，并在其中输入以下代码（此文件由 `GetFeatureInfo`
    WMS 请求用于向客户端输出 HTML 响应）：
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'With the `mapfile` you just created, you exposed the `countries` PostGIS layer,
    both as a WMS and WFS service. Both of these services expose to the user a series
    of requests and you will now test them using a browser. First, without invoking
    any services, test whether the `mapfile` is working correctly by typing the following
    URL in the browser:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用你刚刚创建的`mapfile`，你已将`countries` PostGIS图层暴露为WMS和WFS服务。这两个服务都向用户暴露了一系列请求，你现在将使用浏览器来测试它们。首先，不调用任何服务，通过在浏览器中输入以下URL来测试`mapfile`是否正确工作：
- en: '`http://localhost/cgi-bin/mapserv?map=/var/www/data/countries.map&layer=countries&mode=map`
    (for Linux)'
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http://localhost/cgi-bin/mapserv?map=/var/www/data/countries.map&layer=countries&mode=map`（适用于Linux）'
- en: '`http://localhost/cgi-bin/mapserv.exe?map=C:\ms4w\Apache\htdocs\countries.map&layer=countries&mode=map`
    (for Windows)'
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http://localhost/cgi-bin/mapserv.exe?map=C:\ms4w\Apache\htdocs\countries.map&layer=countries&mode=map`（适用于Windows）'
- en: '`http://localhost/cgi-bin/mapserv?map=/Library/WebServer/Documents/countries.map&layer=countries&mode=map`
    [(for macOS)](http://localhost/cgi-bin/mapserv?map=/Library/WebServer/Documents/countries.map&layer=countries&mode=map)'
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http://localhost/cgi-bin/mapserv?map=/Library/WebServer/Documents/countries.map&layer=countries&mode=map`
    [(适用于macOS)](http://localhost/cgi-bin/mapserv?map=/Library/WebServer/Documents/countries.map&layer=countries&mode=map)'
- en: 'You should see the `countries` layer rendered with the three symbology classes
    defined in the `mapfile`, as shown in the following screenshot:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到`countries`图层以`mapfile`中定义的三个符号类渲染，如下面的截图所示：
- en: '![](img/e3f45c7a-ea25-4f2e-8ebd-c67a78a640d4.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e3f45c7a-ea25-4f2e-8ebd-c67a78a640d4.png)'
- en: As you can see, there is a small difference between the URLs used in Windows,
    Linux, and macOS. We will refer to Linux from now on, but you can easily adapt
    the URLs to Windows or macOS.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，Windows、Linux和macOS中使用的URL之间有一个小的差异。我们现在将参考Linux，但你很容易将这些URL适配到Windows或macOS。
- en: 'Now you will start testing the WMS service; you will try running the `GetCapabilities`,
    `GetMap`, and `GetFeatureInfo` requests. To test the `GetCapabilities` request,
    type the URL in the browser: `http://localhost/cgi-bin/mapserv?map=/var/www/data/countries.map&SERVICE=WMS&VERSION=1.1.1&REQUEST=GetCapabilities`.
    You should receive a long XML response (as follows) from the server, where the
    more important fragments are the WMS service definitions in the `<Service>` section,
    the requests are enabled in the `<Capability>` section, and the layers exposed
    and their main details (for example, name, abstract, projection, and extent) are
    in the `<Layer>` section of each of the layers:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你将开始测试WMS服务；你将尝试运行`GetCapabilities`、`GetMap`和`GetFeatureInfo`请求。要测试`GetCapabilities`请求，在浏览器中输入URL：`http://localhost/cgi-bin/mapserv?map=/var/www/data/countries.map&SERVICE=WMS&VERSION=1.1.1&REQUEST=GetCapabilities`。你应该从服务器收到一个长的XML响应（如下所示），其中更重要的片段是`<Service>`部分中的WMS服务定义，请求在`<Capability>`部分中启用，暴露的图层及其主要细节（例如，名称、摘要、投影和范围）在每个图层的`<Layer>`部分中：
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now test the WMS service with its typical `GetMap` WMS request, used on many
    clients to display a map to the user. Type the URL `http://localhost//cgi-bin/mapserv?map=/var/www/data/countries.map&SERVICE=WMS&VERSION=1.3.0&REQUEST=GetMap&BBOX=-26,-111,36,-38&CRS=EPSG:4326&WIDTH=1000&HEIGHT=800&LAYERS=countries&STYLES=&FORMAT=image/png`
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在测试WMS服务，使用其典型的`GetMap` WMS请求，许多客户端使用它来向用户显示地图。输入URL `http://localhost//cgi-bin/mapserv?map=/var/www/data/countries.map&SERVICE=WMS&VERSION=1.3.0&REQUEST=GetMap&BBOX=-26,-111,36,-38&CRS=EPSG:4326&WIDTH=1000&HEIGHT=800&LAYERS=countries&STYLES=&FORMAT=image/png`
- en: 'Into the browser and check the image that is sent back in response by the MapServer
    `GetMap` request, as shown in the following screenshot:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中检查MapServer `GetMap`请求返回的图像，如下面的截图所示：
- en: '![](img/45ee2c30-3a5b-4464-b702-215b62607c43.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/45ee2c30-3a5b-4464-b702-215b62607c43.png)'
- en: 'Another typical WMS request is `GetFeatureInfo`, used by clients to query the
    map layer at the given coordinates (points). Type the following URL and you should
    see the field values for a given feature as the output (the output is built using
    the `template.html` file):'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 另一个典型的WMS请求是`GetFeatureInfo`，客户端使用它来查询给定坐标（点）的地图图层。输入以下URL，你应该看到给定特征的字段值作为输出（输出是使用`template.html`文件构建的）：
- en: '[PRE7]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The output should be as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该如下所示：
- en: '![](img/6bf9f74b-7418-4290-9160-1652f97e6b55.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6bf9f74b-7418-4290-9160-1652f97e6b55.png)'
- en: 'Now, you will use QGIS to use the WMS service. Launch QGIS, click on the Add
    WMS layer button (alternatively, navigate to Layer | Add WMS Layer or use the
    QGIS browser), and create a new WMS connection, as shown in the following screenshot.
    Type something such as `MapServer on localhost` in the Name field and `http://localhost/cgi-bin/mapserv?map=/var/www/data/countries.map&SERVICE=WMS&VERSION=1.1.1&REQUEST=GetCapabilities`
    in the URL field, and click on the OK button (remember to adjust the Apache URL
    according to the configuration of your OS; check step 4):'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您将使用QGIS来使用WMS服务。启动QGIS，点击添加WMS图层按钮（或者，导航到图层 | 添加WMS图层或使用QGIS浏览器），并创建一个新的WMS连接，如下面的截图所示。在名称字段中输入类似`MapServer
    on localhost`的内容，并在URL字段中输入`http://localhost/cgi-bin/mapserv?map=/var/www/data/countries.map&SERVICE=WMS&VERSION=1.1.1&REQUEST=GetCapabilities`，然后点击确定按钮（请记住根据您操作系统的配置调整Apache
    URL；检查第4步）：
- en: '![](img/641af38a-fedf-49ae-b089-371abd584fe3.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/641af38a-fedf-49ae-b089-371abd584fe3.png)'
- en: 'Now click on the Connect button, as shown in the following screenshot. Then,
    select the countries layer and add it to the QGIS map window using the Add button,
    making sure to select the coordinate system EPSG:4326:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击以下截图所示的连接按钮。然后，选择国家图层，并使用添加按钮将其添加到QGIS地图窗口中，确保选择坐标系统EPSG:4326：
- en: '![](img/06b1e728-cc8e-45e9-8820-3bb239f38d5a.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/06b1e728-cc8e-45e9-8820-3bb239f38d5a.png)'
- en: 'Now browse to your WMS countries layer and try to perform some identification
    operations. QGIS will raise the needed `GetMap` and `GetFeatureInfo` WMS requests
    for you behind the scenes to give the following output:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，浏览到您的WMS国家图层，并尝试执行一些识别操作。QGIS将在幕后为您生成所需的`GetMap`和`GetFeatureInfo` WMS请求，以产生以下输出：
- en: '![](img/33ad34f9-2943-40dc-8188-b3e8ab039c41.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/33ad34f9-2943-40dc-8188-b3e8ab039c41.png)'
- en: Having seen how the WMS service works, you will now start using WFS. Like WMS,
    WFS offers the user a `GetCapabilities` request as well, resulting in a similar
    output to the `GetCapabilities` request of WMS. Type the URL `http://localhost/cgi-bin/mapserv?map=/var/www/data/countries.map&SERVICE=WFS&VERSION=1.0.0&REQUEST=GetCapabilities`
    into the browser window to inspect the XML response.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您已经了解了WMS服务的工作原理，您现在将开始使用WFS。与WMS类似，WFS也向用户提供了一个`GetCapabilities`请求，从而产生了与WMS的`GetCapabilities`请求类似的输出。将URL
    `http://localhost/cgi-bin/mapserv?map=/var/www/data/countries.map&SERVICE=WFS&VERSION=1.0.0&REQUEST=GetCapabilities`输入到浏览器窗口中，以检查XML响应。
- en: 'The main WFS request is `GetFeature`. It lets you query the map layer using
    several criteria, returning a collection of features in response as **Geography
    Markup Language** (**GML**) output. Test the request by typing this URL in the
    browser: `http://localhost/cgi-bin/mapserv?map=/var/www/data/countries.map&SERVICE=WFS&VERSION=1.0.0&REQUEST=getfeature&TYPENAME=countries&MAXFEATURES=5`.'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 主要的WFS请求是`GetFeature`。它允许您使用多个标准查询地图图层，并以**地理标记语言**（**GML**）输出返回一个特征集合。通过在浏览器中输入以下URL来测试请求：`http://localhost/cgi-bin/mapserv?map=/var/www/data/countries.map&SERVICE=WFS&VERSION=1.0.0&REQUEST=getfeature&TYPENAME=countries&MAXFEATURES=5`。
- en: 'You should get an XML (GML) response from the browser, as shown in the following
    code, with a `<wfs:FeatureCollection>` element composed of five `<gml:featureMember>`
    elements (as indicated in the `MAXFEATURES` parameter of the request), each representing
    one country. For each feature, the WFS returns the geometry and all of the field
    values (this behavior was specified by setting the `gml_include_items` variable
    in the `METADATA` layer directive in the `mapfile`). You will see a geometry as
    follows:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该从浏览器中获得一个XML（GML）响应，如下面的代码所示，其中包含一个由五个`<gml:featureMember>`元素组成的`<wfs:FeatureCollection>`元素（如请求中的`MAXFEATURES`参数所示），每个元素代表一个国家。对于每个特征，WFS返回几何形状和所有字段值（这种行为是通过在`mapfile`中的`METADATA`图层指令中设置`gml_include_items`变量来指定的）。您将看到以下几何形状：
- en: '[PRE8]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As a result of the WFS `GetFeature` request executed in the previous step, MapServer
    has returned only the first five features of the `countries` layers. Now, use
    the `GetFeature` request to make a query to the layer using a filter and get back
    the corresponding features. By typing the URL `http://localhost/cgi-bin/mapserv?map=/var/www/data/countries.map&SERVICE=WFS&VERSION=1.0.0&REQUEST=getfeature&TYPENAME=countries&MAXFEATURES=5&Filter=<Filter>
    <PropertyIsEqualTo><PropertyName>name</PropertyName> <Literal>Italy</Literal></PropertyIsEqualTo></Filter>`,
    you will get the feature in the database that has the `name` field set to `Italy`.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于在上一步骤中执行了WFS `GetFeature`请求，MapServer只返回了`countries`图层的前五个特征。现在，使用`GetFeature`请求通过过滤器对图层进行查询，并获取相应的特征。通过输入URL
    `http://localhost/cgi-bin/mapserv?map=/var/www/data/countries.map&SERVICE=WFS&VERSION=1.0.0&REQUEST=getfeature&TYPENAME=countries&MAXFEATURES=5&Filter=<Filter>
    <PropertyIsEqualTo><PropertyName>name</PropertyName> <Literal>Italy</Literal></PropertyIsEqualTo></Filter>`，你可以获取数据库中`name`字段设置为`Italy`的特征。
- en: 'After testing the WFS requests in a browser, try to open the WFS service in
    QGIS using the Add WFS Layer button (alternatively, navigate to Layer | Add WFS
    Layer or use the QGIS browser). You should see the same MapServer on Localhost
    connection you created a few steps earlier. Click on the Connect button and select
    the countries layer, add it to the QGIS project, and browse through it by zooming,
    panning, and identifying some features. The biggest difference when compared to
    WMS is that, with WFS, you receive the feature geometries from the server and
    not just an image, so you can even export the layer to a different format, such
    as a shapefile or spatialite! The Add WFS layer from a Server window is as shown
    in the following screenshot:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中测试WFS请求后，尝试使用QGIS中的“添加WFS图层”按钮打开WFS服务（或者导航到“图层”|“添加WFS图层”或使用QGIS浏览器）。你应该看到你之前创建的相同的MapServer
    on Localhost连接。点击“连接”按钮，选择countries图层，将其添加到QGIS项目中，并通过缩放、平移和识别一些特征来浏览它。与WMS相比，最大的不同是，使用WFS，你从服务器接收的是特征几何形状，而不仅仅是图像，因此你甚至可以将图层导出为不同的格式，如shapefile或spatialite！从服务器添加WFS图层的窗口截图如下：
- en: '![](img/b33d2e02-85a1-4451-9fed-b784d1b40722.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b33d2e02-85a1-4451-9fed-b784d1b40722.png)'
- en: 'You should now be able to see the vector map in QGIS and inspect the features:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你应该能够在QGIS中看到矢量地图并检查其特征：
- en: '![](img/c1a28131-5c43-4291-8664-9b3c5a6019b3.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c1a28131-5c43-4291-8664-9b3c5a6019b3.png)'
- en: How it works...
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, you implemented WMS and WFS services for a PostGIS layer using
    the MapServer open source web-mapping engine. WMS and WFS are the two core concepts
    to consider when you want to develop a web GIS that is interoperable across many
    organizations. **Open Geospatial Consortium** (**OGC**) defined these two standards
    (and many others) to make web-mapping services exposed in an open, standard way.
    This way these services can be used by different applications; for example, you
    have seen in this recipe that a GIS Desktop tool such as QGIS can browse and query
    those services because it understands these OGC standards (you can get exactly
    the same results with other tools, such as gvSIG, uDig, OpenJUMP, and ArcGIS Desktop,
    among others). In the same way, Javascript API libraries, most notably OpenLayers
    and Leaflet (you will be using these in the other recipes in this chapter), can
    use these services in a standard way to provide web-mapping features to web applications.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，你使用MapServer开源网络地图引擎为PostGIS图层实现了WMS和WFS服务。当你想要开发一个跨多个组织互操作的网络GIS时，WMS和WFS是两个需要考虑的核心概念。**开放地理空间联盟**（**OGC**）定义了这两个标准（以及许多其他标准），以便以开放和标准的方式公开网络地图服务。这样，这些服务就可以被不同的应用程序使用；例如，你在这个示例中看到，一个GIS桌面工具，如QGIS，可以浏览和查询这些服务，因为它理解这些OGC标准（你可以用其他工具，如gvSIG、uDig、OpenJUMP和ArcGIS
    Desktop等，得到相同的结果）。同样，JavaScript API库，尤其是OpenLayers和Leaflet（你将在本章的其他示例中使用这些库），可以以标准方式使用这些服务，为网络应用程序提供网络地图功能。
- en: 'WMS is a service that is used to generate the maps to be displayed by clients.
    Those maps are generated using image formats, such as PNG, JPEG, and many others.
    Some of the most typical WMS requests are as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: WMS是一种服务，用于生成客户端显示的地图。这些地图使用图像格式生成，例如PNG、JPEG以及许多其他格式。以下是一些最典型的WMS请求：
- en: '`GetCapabilities`: This offers an overview of the services offered by WMS,
    particularly a list of the available layers and some of the details of each layer
    (layer extent, coordinate reference systems, URI of the data, and so on).'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GetCapabilities`: 这提供了WMS提供的服务概述，特别是可用图层列表以及每个图层的某些详细信息（图层范围、坐标参考系统、数据URI等）。'
- en: '`GetMap`: This returns a map image representing one or more layers for a specified
    extent and spatial reference, in a specified image file format and size.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GetMap`: 这返回一个地图图像，表示一个或多个图层，对于指定的范围和空间参考，以指定的图像文件格式和大小。'
- en: '`GetFeatureInfo`: This is an optional request by WMS that returns, in different
    formats, the attribute values for the features of a given point in the map. You
    have seen how to customize the response by introducing a template file that must
    be set in the `mapfile`.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GetFeatureInfo`: 这是WMS的一个可选请求，它以不同的格式返回给定地图点上的功能属性值。您已经看到了如何通过引入一个必须设置在`mapfile`中的模板文件来自定义响应。'
- en: WFS provides a convenient, standard way to access the features of a vector layer
    with a web request. The service response streams to the client the requested features
    using GML (an XML markup defined by OGC to define geographical features).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: WFS提供了一种方便、标准的方式来通过Web请求访问矢量图层的功能。服务将请求的功能以GML（由OGC定义的XML标记）的形式流式传输到客户端，GML用于定义地理特征。
- en: 'Some WFS requests are as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 一些WFS请求如下：
- en: '`GetCapabilities`: This gives a description of the services and layers offered
    by the WFS service'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GetCapabilities`: 这提供了WFS服务提供的服务和图层的描述。'
- en: '`GetFeature`: This allows the client to get a set of features of a given layer,
    corresponding to a given criteria'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GetFeature`: 这允许客户端获取给定图层的一组功能，对应于给定的标准。'
- en: 'These WMS and WFS requests can be consumed by the client using the HTTP protocol.
    You have seen how to query and get a response from the client by typing a URL
    in a browser with several parameters appended to it. As an example, the following
    WMS `GetMap` request will return a map image of the layers (using the `LAYERS`
    parameter) in a specified format (using the `FORMAT` parameter), size (using the
    `WIDTH` and `HEIGHT` parameters), extent (using the `BBOX` parameter), and spatial
    reference system (using `CRS`):'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这些WMS和WFS请求可以通过HTTP协议由客户端消费。您已经看到了如何通过在浏览器中输入带有多个附加参数的URL来查询并从客户端获取响应。例如，以下WMS
    `GetMap`请求将返回一个地图图像，该图像包含使用`LAYERS`参数指定的图层，以使用`FORMAT`参数指定的格式，使用`WIDTH`和`HEIGHT`参数指定的大小，使用`BBOX`参数指定的范围，以及使用`CRS`参数指定的空间参考系统。
- en: '[PRE9]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In MapServer, you can create WMS and WFS services in the `mapfile` using its
    directives. The `mapfile` is a text file that is composed of several sections
    and is the heart of MapServer. In the beginning of the `mapfile`, it is necessary
    to define general properties for the map, such as its title, extent, spatial reference,
    output-image formats, and dimensions to be returned to the user.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在MapServer中，您可以使用其指令在`mapfile`中创建WMS和WFS服务。`mapfile`是一个由几个部分组成的文本文件，是MapServer的核心。在`mapfile`的开始部分，需要定义地图的一般属性，如标题、范围、空间参考、输出图像格式以及要返回给用户的维度。
- en: Then, it is possible to define which OWS (OGC web services such as WMS, WFS,
    and WCS) requests to expose.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，可以定义要公开哪些OWS（如WMS、WFS和WCS等OGC网络服务）请求。
- en: Then there is the main section of the `mapfile`, where the layers are defined
    (every layer is defined in the `LAYER` directive). You have seen how to define
    a PostGIS layer. It is necessary to define its connection information (database,
    user, password, and so on), the SQL definition in the database (it is possible
    to use just a PostGIS table name, but you could eventually use a query to define
    the set of features and attributes defining the layer), the geometric type, and
    the projection.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 然后是`mapfile`的主要部分，其中定义了图层（每个图层都在`LAYER`指令中定义）。您已经看到了如何定义一个PostGIS图层。需要定义其连接信息（数据库、用户、密码等），数据库中的SQL定义（可以使用仅PostGIS表名，但最终可以使用查询来定义定义图层的功能集和属性），几何类型和投影。
- en: A whole directive (`CLASS`) is used to define how the layer features will be
    rendered. You may use different classes, as you did in this recipe, to render
    features differently, based on an attribute defined with the `CLASSITEM` setting.
    In this recipe, you defined three different classes, each representing a population
    class, using different colors.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 使用整个指令（`CLASS`）来定义图层功能如何渲染。您可以使用不同的类，就像在这个菜谱中做的那样，根据使用`CLASSITEM`设置定义的属性来以不同的方式渲染功能。在这个菜谱中，您定义了三个不同的类，每个类代表一个人口类别，使用不同的颜色。
- en: See also
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考信息
- en: You can find more information about using MapServer by using its extensive documentation
    at its project home page ([http://mapserver.org/it/index.html](http://mapserver.org/it/index.html)).
    You will find the mapfile documentation at [http://www.mapserver.org/mapfile/](http://www.mapserver.org/mapfile/)
    very useful to read.
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以通过访问其项目主页上的详细文档（[http://mapserver.org/it/index.html](http://mapserver.org/it/index.html)）来获取更多关于使用MapServer的信息。您会发现[http://www.mapserver.org/mapfile/](http://www.mapserver.org/mapfile/)上的mapfile文档非常有助于阅读。
- en: A good tutorial to understand how to generate mapfiles can be found at [http://mapserver.org/tutorial/example1-1.html](http://mapserver.org/tutorial/example1-1.html).
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在[http://mapserver.org/tutorial/example1-1.html](http://mapserver.org/tutorial/example1-1.html)找到一篇很好的教程，了解如何生成mapfiles。
- en: In case you want to gain a better understanding of the WMS and WFS standards,
    check their specifications at the OGC website. For the WMS service, go to [http://www.opengeospatial.org/standards/wms](http://www.opengeospatial.org/standards/wms),
    whereas for WFS, go to [http://www.opengeospatial.org/standards/wfs](http://www.opengeospatial.org/standards/wfs).
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您想更好地理解WMS和WFS标准，请查看OGC网站上的规范。对于WMS服务，请访问[http://www.opengeospatial.org/standards/wms](http://www.opengeospatial.org/standards/wms)，而对于WFS，请访问[http://www.opengeospatial.org/standards/wfs](http://www.opengeospatial.org/standards/wfs)。
- en: Creating WMS and WFS services with GeoServer
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用GeoServer创建WMS和WFS服务
- en: In the previous recipe, you created WMS and WFS from a PostGIS layer using MapServer.
    In this recipe, you will do it using another popular open source web-mapping engine-GeoServer.
    You will then use the created services as you did with MapServer, testing their
    exposed requests, first using a browser and then the QGIS desktop tool (you can
    do this with other software, such as uDig, gvSIG, OpenJUMP GIS, and ArcGIS Desktop).
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个食谱中，您使用MapServer从PostGIS层创建了WMS和WFS。在这个食谱中，您将使用另一个流行的开源网络地图引擎-GeoServer来完成这项工作。然后，您将像使用MapServer一样使用创建的服务，测试其暴露的请求，首先使用浏览器，然后使用QGIS桌面工具（您可以使用其他软件，如uDig、gvSIG、OpenJUMP
    GIS和ArcGIS Desktop）。
- en: Getting ready
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'While MapServer is written in the C language and uses Apache as its web server,
    GeoServer is written in Java and you therefore need to install the **Java Virtual
    Machine** (**JVM**) in your system; it must be used from a servlet container,
    such as *Jetty* and *Tomcat*. After installing the servlet container, you will
    be able to deploy the GeoServer application to it. For example, in Tomcat, you
    can deploy GeoServer by copying the GeoServer **WAR** (**web archive**) file to
    Tomcat''s `webapps` directory. For this recipe, we will suppose that you have
    a working GeoServer in your system; if this is not the case, follow the detailed
    GeoServer installation steps for your OS at the GeoServer website ([http://docs.geoserver.org/stable/en/user/installation/](http://docs.geoserver.org/stable/en/user/installation/))
    and then return to this recipe. Follow these steps:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 MapServer是用C语言编写的，并使用Apache作为其web服务器，但GeoServer是用Java编写的，因此您需要在系统中安装**Java虚拟机**（**JVM**）；它必须从一个servlet容器中使用，例如*Jetty*和*Tomcat*。在安装servlet容器后，您将能够将GeoServer应用程序部署到其中。例如，在Tomcat中，您可以通过将GeoServer的**WAR**（**web
    archive**）文件复制到Tomcat的`webapps`目录中来部署GeoServer。对于这个食谱，我们假设您系统中已经有一个正在运行的GeoServer；如果不是这种情况，请按照GeoServer网站上的详细安装步骤（[http://docs.geoserver.org/stable/en/user/installation/](http://docs.geoserver.org/stable/en/user/installation/））进行安装，然后返回到这个食谱。按照以下步骤操作：
- en: 'Download the USA counties shapefile from the [https://nationalmap.gov/](https://nationalmap.gov/)
    website at [http://dds.cr.usgs.gov/pub/data/nationalatlas/countyp020_nt00009.tar.gz](http://dds.cr.usgs.gov/pub/data/nationalatlas/countyp020_nt00009.tar.gz)
    (this archive is included in the book''s code bundle). Extract the archive from
    `working/chp09` and import it to PostGIS using the `ogr2ogr` command, as follows:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[https://nationalmap.gov/](https://nationalmap.gov/)网站下载美国县级行政区划的shapefile（[http://dds.cr.usgs.gov/pub/data/nationalatlas/countyp020_nt00009.tar.gz](http://dds.cr.usgs.gov/pub/data/nationalatlas/countyp020_nt00009.tar.gz)），（这个存档包含在本书的代码包中）。从`working/chp09`中提取存档，并使用`ogr2ogr`命令将其导入PostGIS，如下所示：
- en: '[PRE10]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: How to do it...
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Carry out the following steps:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: 'Open the GeoServer administrative interface, which is typically located at
    `http://localhost:8080/geoserver`, in your favorite browser and log in using your
    credentials (`admin` as the username and `geoserver` as the password) if you are
    just using the GeoServer default installation and have not customized things.
    After starting GeoServer, you should see the following:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的浏览器中打开GeoServer管理界面，通常位于`http://localhost:8080/geoserver`，并使用您的凭据（用户名为`admin`，密码为`geoserver`）登录，如果您只是使用GeoServer默认安装且未进行任何自定义。启动GeoServer后，您应该看到以下内容：
- en: '![](img/0c14f51e-d987-4f22-b69d-1007285368fc.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0c14f51e-d987-4f22-b69d-1007285368fc.png)'
- en: GeoServer welcome screen viewed in a browser
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中查看的GeoServer欢迎屏幕
- en: 'After successfully logging in, create a workspace by clicking on the Workspace
    link under Work (in the left-hand-side panel of the GeoServer application''s main
    menu) and then click on the Add new workspace link. In the text boxes of the form
    that appears, specify the following values and then click on the Submit button:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 成功登录后，通过点击GeoServer应用程序主菜单左侧面板中的“工作”下的“工作空间”链接，然后点击“添加新工作空间”链接来创建一个工作空间。在出现的表单文本框中指定以下值，然后点击“提交”按钮：
- en: Enter `postgis_cookbook` in the Name field
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在名称字段中输入`postgis_cookbook`
- en: Enter the URL [https://www.packtpub.com/big-data-and-business-intelligence/postgis-cookbook](https://www.packtpub.com/big-data-and-business-intelligence/postgis-cookbook) in
    the Namespace URI field
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在命名空间URI字段中输入URL [https://www.packtpub.com/big-data-and-business-intelligence/postgis-cookbook](https://www.packtpub.com/big-data-and-business-intelligence/postgis-cookbook)
- en: 'Now, to create a PostGIS store, click on the Stores link under Data (in the
    left-hand-side panel of the GeoServer application''s main menu). Now, click on
    the Add new store link, and then on the PostGIS link under Vector Data Sources,
    as shown in the following screenshot:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，要创建PostGIS存储，点击“数据”下左侧面板中的“存储”链接。现在，点击“添加新存储”链接，然后在矢量数据源下的“PostGIS”链接，如图所示：
- en: '![](img/d9d4876a-99c6-4371-bf25-bd379f7640fc.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d9d4876a-99c6-4371-bf25-bd379f7640fc.png)'
- en: GeoServer screen to configure new data sources
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: GeoServer屏幕配置新数据源
- en: 'In the New Vector Data Source page, complete the form''s fields, as follows:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“新矢量数据源”页面，按照以下方式填写表单的字段：
- en: Select postgis_cookbook from the Workspace drop-down list.
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从工作空间下拉列表中选择postgis_cookbook。
- en: Enter `postgis_cookbook` in the Data Source Name field.
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在数据源名称字段中输入`postgis_cookbook`
- en: Enter `localhost` in the host field.
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主机字段中输入`localhost`
- en: Enter `5432` in the port field.
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在端口字段中输入`5432`
- en: Enter `postgis_cookbook` in the database field.
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在数据库字段中输入`postgis_cookbook`
- en: Enter `chp09` in the schema field.
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模式字段中输入`chp09`
- en: Enter `me` in the user field.
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在用户字段中输入`me`
- en: Enter `mypassword` in the passwd field.
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在passwd字段中输入`mypassword`
- en: 'The New Vector Data Source page is shown in the following screenshot:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 新矢量数据源页面如图所示：
- en: '![](img/86b686de-bf22-4356-86fb-84a3b231b629.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/86b686de-bf22-4356-86fb-84a3b231b629.png)'
- en: Now, click on the Save button to successfully create your PostGIS store.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击“保存”按钮以成功创建您的PostGIS存储。
- en: Now, you are ready to publish the PostGIS `counties` layer as WMS and WFS. On
    the Layers page, click on the Add a new resource link. Now, select postgis_cookbook
    from the Add layer from drop-down list. Click on the Publish link to the right
    of the `counties` layer.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您已准备好将PostGIS的`counties`图层作为WMS和WFS发布。在“图层”页面，点击“添加新资源”链接。现在，从“从下拉列表添加图层”中选择postgis_cookbook。点击`counties`图层右侧的“发布”链接。
- en: 'On the Edit Layer page, shown in the following screenshot, click on the links
    Compute from data and Compute from native bounds, and then click on the Save button:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在以下截图所示的“编辑图层”页面，点击“从数据计算”和“从原生边界计算”链接，然后点击“保存”按钮：
- en: '![](img/1bc14616-fcaf-4d05-a931-8d36b0609e04.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1bc14616-fcaf-4d05-a931-8d36b0609e04.png)'
- en: GeoServer screen to edit the countries layer for publishing
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: GeoServer屏幕编辑用于发布的国家图层
- en: 'Now, you need to define the style used to display the layer to the user. Unlike
    MapServer, GeoServer uses the OGC-standard **Styled Layer Descriptor** (**SLD**)
    notation. Click on the Styles link under Data and then on the Add new style link.
    Fill the text fields in the form, as follows:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您需要定义用于向用户显示图层的样式。与MapServer不同，GeoServer使用OGC标准的**样式图层描述符**（**SLD**）符号。在“数据”下点击“样式”链接，然后点击“添加新样式”链接。按照以下方式填写表单中的文本字段：
- en: Enter `Counties classified per size` in the Name field.
  id: totrans-135
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在名称字段中输入`Counties classified per size`
- en: Enter `postgis_cookbook` in the Workspace field
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在工作空间字段中输入`postgis_cookbook`
- en: 'In the text area for the SLD, add the following XML code defining the style
    for the `counties` layer. Then, click on the Validate button to check whether
    your SLD definition is correct and then click on the Submit button to save the
    new style:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 SLD 的文本区域中，添加以下定义 `counties` 层样式的 XML 代码。然后，点击验证按钮检查您的 SLD 定义是否正确，然后点击提交按钮保存新的样式：
- en: '[PRE11]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The following screenshot shows how the new style looks on the New style GeoServer
    page:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了新样式在“新样式 GeoServer”页面上的外观：
- en: '![](img/8ebe49df-a1fc-495d-8c51-ba5b77fa79dc.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8ebe49df-a1fc-495d-8c51-ba5b77fa79dc.png)'
- en: GeoServer screen for creating a new style as an SLD document
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: GeoServer 创建新样式作为 SLD 文档的屏幕截图
- en: Now you need to associate the created style with the `counties` layer. Go back
    to the layer page (Data | Layers), click on the `counties` layer link, and then,
    on the Edit Layer page, click on the Publishing section. Select Counties classified
    per size in the Default style drop-down list and then click on the Save button.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您需要将创建的样式与 `counties` 层关联起来。返回到层页面（数据 | 层），点击 `counties` 层链接，然后在编辑层页面，点击发布部分。在默认样式下拉列表中选择按大小分类的县，然后点击保存按钮。
- en: Now that your WMS and WFS services for the PostGIS `counties` layer are ready,
    it is time to start using them! First, test the `GetCapabilities` WMS request.
    To do this, you can click on one of the links on the right-hand-side panel on
    the GeoServer web application home page. You can click on the link for either
    WMS version 1.1.1 or WMS version 1.3.0\. Click on one of the links or type the
    `GetCapabilities` request directly in the browser as `http://localhost:8080/geoserver/ows?service=wms&version=1.3.0&request=GetCapabilities`.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您的 PostGIS `counties` 层的 WMS 和 WFS 服务已经准备好了，是时候开始使用它们了！首先，测试 `GetCapabilities`
    WMS 请求。为此，您可以在 GeoServer 网页应用程序主页的右侧面板上点击其中一个链接。您可以点击 WMS 版本 1.1.1 或 WMS 版本 1.3.0
    的链接。点击其中一个链接或直接在浏览器中输入 `GetCapabilities` 请求，格式为 `http://localhost:8080/geoserver/ows?service=wms&version=1.3.0&request=GetCapabilities`。
- en: 'Now, we will investigate the `GetCapabilities` response, shown as follows.
    You will find a lot of information about WMS is available on your GeoServer instance,
    such as the WMS-supported requests, projections, and a lot of other information
    about each published layer. In the case of the `counties` layer, the following
    code is an extract from the `GetCapabilities` document. Note the main layer information,
    such as the name, title, abstract (you could redefine all of these using the GeoServer
    web application), the supported **Coordinate Reference Systems** (**CRS**), the
    geographic extent, and the associated style:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将调查以下所示的 `GetCapabilities` 响应。您将发现有关 WMS 的许多信息都可在您的 GeoServer 实例上找到，例如
    WMS 支持的请求、投影以及每个发布的层的大量其他信息。在 `counties` 层的情况下，以下代码是从 `GetCapabilities` 文档中提取的。注意主要层信息，如名称、标题、摘要（您可以使用
    GeoServer 网页应用程序重新定义所有这些），支持的**坐标参考系统**（**CRS**）、地理范围以及关联的样式：
- en: '[PRE12]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: To test the `GetMap` and `GetFeatureInfo` WMS requests, the GeoServer web application
    offers you a very handy way with the Layer Preview page. Navigate to Data | Layer
    Preview and then click on the OpenLayers link next to the `counties` layer. The
    Layer Preview page is based on the OpenLayers JavaScript library and lets you
    experiment with the `GetMap` and `GetFeatureInfo` requests.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要测试 `GetMap` 和 `GetFeatureInfo` WMS 请求，GeoServer 网页应用程序提供了一个非常方便的方法，即层预览页面。导航到数据
    | 层预览，然后点击 `counties` 层旁边的 OpenLayers 链接。层预览页面基于 OpenLayers JavaScript 库，并允许您对
    `GetMap` 和 `GetFeatureInfo` 请求进行实验。
- en: 'Try to navigate the map; at each zoom and pan action, GeoServer will stream
    out a new image provided by the response output to a `GetMap` request. By clicking
    on the map, you can perform a `GetFeatureInfo` request and the user interface
    will display the feature''s attributes corresponding to the point on the map on
    which you clicked. A very effective way to check how the requests are sent to
    GeoServer as you navigate the map is by using the Firefox Firebug plugin or the
    Chrome (or Chromium if you are using Linux) Developer Tools. With these tools,
    you will be able to identify the `GetMap` and `GetFeatureInfo` requests that are
    being sent behind the scenes from the OpenLayers viewer to GeoServer. One such
    map is shown in the following screenshot:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试在地图中导航；在每次缩放和平移操作时，GeoServer 都会根据响应输出向 `GetMap` 请求提供新的图像。通过点击地图，您可以执行 `GetFeatureInfo`
    请求，用户界面将显示您点击的地图上的点的特征属性。在导航地图时检查请求发送到 GeoServer 的方式，使用 Firefox Firebug 插件或 Chrome（或如果您使用
    Linux，则使用 Chromium）开发者工具是非常有效的方法。使用这些工具，您将能够识别从 OpenLayers 观察器到 GeoServer 后台发送的
    `GetMap` 和 `GetFeatureInfo` 请求。以下是一个这样的地图的截图：
- en: '![](img/5af96157-29eb-4046-b8ba-ca8c21ea9618.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5af96157-29eb-4046-b8ba-ca8c21ea9618.png)'
- en: 'Here is what you get when inspecting the requests with any in-browser developer
    tool, check the request URL, and verify the parameters sent to geoserver; this
    is how it looks with Firefox:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用任何浏览器开发者工具检查请求时，检查请求 URL 并验证发送到 GeoServer 的参数；以下是使用 Firefox 的样子：
- en: '![](img/216a52c9-ba61-47a8-8eb9-4d553da53aac.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](img/216a52c9-ba61-47a8-8eb9-4d553da53aac.png)'
- en: Now, try a WMS `GetMap` request by typing the URL `http://localhost:8080/geoserver/postgis_cookbook/wms?LAYERS=postgis_cookbook%3Acounties&STYLES=&FORMAT=image%2Fpng&SERVICE=WMS&VERSION=1.1.1&REQUEST=GetMap&SRS=EPSG%3A4326&BBOX=-200.50286594033,7.6152902245522,-43.196688503029,81.457450330258&WIDTH=703&HEIGHT=330`
    in your browser.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，尝试通过在浏览器中输入 URL `http://localhost:8080/geoserver/postgis_cookbook/wms?LAYERS=postgis_cookbook%3Acounties&STYLES=&FORMAT=image%2Fpng&SERVICE=WMS&VERSION=1.1.1&REQUEST=GetMap&SRS=EPSG%3A4326&BBOX=-200.50286594033,7.6152902245522,-43.196688503029,81.457450330258&WIDTH=703&HEIGHT=330`
    来执行 WMS `GetMap` 请求。
- en: Try a WMS `GetFeatureInfo` request, as well, by typing the URL `http://localhost:8080/geoserver/postgis_cookbook/wms?REQUEST=GetFeatureInfo&EXCEPTIONS=application%2Fvnd.ogc.se_xml&BBOX=-126.094303%2C37.16812%2C-116.262667%2C41.783255&SERVICE=WMS&INFO_FORMAT=text%2Fhtml&QUERY_LAYERS=postgis_cookbook%3Acounties&FEATURE_COUNT=50&Layers=postgis_cookbook%3Acounties&WIDTH=703&HEIGHT=330&format=image%2Fpng&styles=&srs=EPSG%3A4326&version=1.1.1&x=330&y=158.`
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 也尝试使用 WMS `GetFeatureInfo` 请求，通过输入 URL `http://localhost:8080/geoserver/postgis_cookbook/wms?REQUEST=GetFeatureInfo&EXCEPTIONS=application%2Fvnd.ogc.se_xml&BBOX=-126.094303%2C37.16812%2C-116.262667%2C41.783255&SERVICE=WMS&INFO_FORMAT=text%2Fhtml&QUERY_LAYERS=postgis_cookbook%3Acounties&FEATURE_COUNT=50&Layers=postgis_cookbook%3Acounties&WIDTH=703&HEIGHT=330&format=image%2Fpng&styles=&srs=EPSG%3A4326&version=1.1.1&x=330&y=158.`
- en: 'This will be displayed by prompting the previous URL:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这将通过提示前面的 URL 来显示：
- en: '![](img/5f347c04-adad-4a07-acf2-794521794387.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5f347c04-adad-4a07-acf2-794521794387.png)'
- en: 'Now, as you did for the MapService WMS, test the GeoServer WMS in QGIS. Create
    a WMS connection named `GeoServer on localhost`, pointing to the GeoServer `GetCapabilities`
    document (`http://localhost:8080/geoserver/ows?service=wms&version=1.3.0&request=GetCapabilities`).
    Then, connect to the WMS server (for example, from the QGIS browser), select `counties`
    from the Layers list, and add it to the map, as shown in the following screenshot;
    then navigate the layer and try to identify some of the features:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，就像您为 MapService WMS 所做的那样，在 QGIS 中测试 GeoServer WMS。创建一个名为 `GeoServer on localhost`
    的 WMS 连接，指向 GeoServer 的 `GetCapabilities` 文档（`http://localhost:8080/geoserver/ows?service=wms&version=1.3.0&request=GetCapabilities`）。然后，连接到
    WMS 服务器（例如，从 QGIS 浏览器），从图层列表中选择 `counties`，并将其添加到地图中，如图所示；然后导航图层并尝试识别一些特征：
- en: '![](img/9f2dcd78-4399-4edf-ad1c-8e72aa855614.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9f2dcd78-4399-4edf-ad1c-8e72aa855614.png)'
- en: Having used WMS, try to test a couple of WFS requests. A typical WFS `GetCapability`
    request can be executed by typing the URL `http://localhost:8080/geoserver/wfs?service=wfs&version=1.1.0&request=GetCapabilities`.
    You could also click on one of the WFS links on the home page of the GeoServer
    web interface.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在使用 WMS 之后，尝试测试几个 WFS 请求。一个典型的 WFS `GetCapability` 请求可以通过输入 URL `http://localhost:8080/geoserver/wfs?service=wfs&version=1.1.0&request=GetCapabilities`
    来执行。您也可以点击 GeoServer 网页界面的首页上的 WFS 链接之一。
- en: 'Investigate the XML `GetCapabilities` response and try to identify the information
    about your layer. You should have a `<FeatureType>` element, such as the following,
    corresponding to the `counties` layer:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调查 XML 的 `GetCapabilities` 响应，并尝试识别有关您图层的信息。您应该有一个 `<FeatureType>` 元素，如下所示，对应于
    `counties` 图层：
- en: '[PRE13]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'As shown in the previous recipe, a typical WFS request is `GetFeature`, which
    will result in a GML response. Try it by typing the URL `http://localhost:8080/geoserver/wfs?service=wfs&version=1.0.0&request=GetFeature&typeName=postgis_cookbook:counties&maxFeatures=5`
    in your browser. You will receive a GML output composed of a `<wfs:FeatureCollection>`
    element and a collection of `<gml:featureMember>` elements (possibly five elements,
    as specified in the `maxFeatures` request''s parameter). You will get an output
    that is similar to the following code:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如前一个菜谱所示，典型的 WFS 请求是 `GetFeature`，这将导致 GML 响应。在您的浏览器中输入 URL `http://localhost:8080/geoserver/wfs?service=wfs&version=1.0.0&request=GetFeature&typeName=postgis_cookbook:counties&maxFeatures=5`
    尝试。您将收到一个由 `<wfs:FeatureCollection>` 元素和一系列 `<gml:featureMember>` 元素（可能五个元素，如
    `maxFeatures` 请求参数中指定的）组成的 GML 输出。您将得到一个类似于以下代码的输出：
- en: '[PRE14]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Now, as you did with WMS, try the counties WFS in QGIS (or in your favorite
    desktop GIS client). Create a new WFS connection by using either the QGIS browser
    or the Add WFS Layer button and then clicking on the New Connection button. In
    the Create a new WFS connection dialog box, type `GeoServer on localhost` in the
    Name field and add the WFS `GetCapabilities` URL (`http://localhost:8080/geoserver/wfs?service=wfs&version=1.1.0&request=GetCapabilities`)
    in the URL field.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，就像您使用 WMS 一样，尝试在 QGIS（或您喜欢的桌面 GIS 客户端）中使用 counties WFS。通过使用 QGIS 浏览器或添加 WFS
    图层按钮，然后点击“新建连接”按钮来创建一个新的 WFS 连接。在创建新的 WFS 连接对话框中，在“名称”字段中输入 `GeoServer on localhost`，并在“URL”字段中添加
    WFS `GetCapabilities` URL (`http://localhost:8080/geoserver/wfs?service=wfs&version=1.1.0&request=GetCapabilities`)。
- en: 'Add the WFS `counties` layer from the previous dialog box and, as a test, select
    some of the counties and export them to a new shapefile using the Save As command
    from the layer''s context menu, as shown in the following screenshot:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从上一个对话框中添加 WFS `counties` 图层，并作为一个测试，选择一些县并使用图层上下文菜单中的“另存为”命令将它们导出到一个新的 shapefile，如图下所示：
- en: '![](img/febf1b0e-d10c-4b74-83b0-f53424461ea6.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/febf1b0e-d10c-4b74-83b0-f53424461ea6.png)'
- en: How it works...
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In the previous recipe, you were introduced to the basic concepts of the OGC
    WMS and WFS standards using MapServer. In this recipe, you have done the same
    using another popular open source web-mapping engine, GeoServer.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个菜谱中，您通过 MapServer 介绍了 OGC WMS 和 WFS 标准的基本概念。在本菜谱中，您使用了另一个流行的开源网络地图引擎 GeoServer
    来完成同样的任务。
- en: Unlike MapServer, which is written in C and can be used from web servers such
    as Apache HTTP (HTTPD) or Microsoft **Internet Information Server** (**IIS**)
    as a CGI program, GeoServer is written in Java and needs a servlet container such
    as Apache Tomcat or Eclipse Jetty to work.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 与用 C 语言编写的 MapServer 不同，MapServer 可以作为 CGI 程序在 Apache HTTP（HTTPD）或 Microsoft
    **Internet Information Server**（**IIS**）等 Web 服务器上使用，GeoServer 是用 Java 编写的，并且需要一个如
    Apache Tomcat 或 Eclipse Jetty 之类的 Servlet 容器才能运行。
- en: GeoServer not only offers the user a highly scalable and standard web-mapping
    engine implementation, but does so with a nice user interface, the Web Administration
    interface. Therefore, it is generally easier for a beginner to create WMS and
    WFS services compared to MapServer, where it is necessary to master the mapfile
    syntax.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: GeoServer 不仅为用户提供了一个高度可扩展和标准的网络地图引擎实现，而且还提供了一个良好的用户界面，即 Web 管理界面。因此，与需要掌握 mapfile
    语法才能使用 MapServer 相比，初学者通常更容易创建 WMS 和 WFS 服务。
- en: The GeoServer workflow to create WMS and WFS services for a PostGIS layer is
    to first create a PostGIS store, where you need to associate the main PostGIS
    connection parameters (server name, schema, user, and so on). After the store
    is correctly created, you can publish the layers that are available for that PostGIS
    store. You have seen in this recipe how easy the whole process is using the GeoServer
    Web Administration interface.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: GeoServer 为 PostGIS 图层创建 WMS 和 WFS 服务的流程是首先创建一个 PostGIS 存储库，在那里您需要关联主要的 PostGIS
    连接参数（服务器名称、模式、用户等）。存储库创建正确后，您可以发布该 PostGIS 存储库可用的图层。您在本菜谱中已经看到，使用 GeoServer 网络管理界面整个过程是多么简单。
- en: To define the layer style to render features, GeoServer uses the SLD schema,
    an OGC standard based on XML. We have written two distinct rules in this recipe
    to render the counties that have an area greater than 5,000 square miles an area
    greater than 5,000 square miles in a different way from the others. For the purpose
    of rendering the counties in a different way, we have used two `<ogc:Rule>` SLD
    elements in which you have defined an `<ogc:Filter>` element. For each of these
    elements, you have defined the criteria to filter the layer features, using the
    `<ogc:PropertyIsGreaterThanOrEqualTo>` and `<ogc:PropertyIsLessThan>` elements.
    A very handy way to generate an SLD for a layer is using desktop GIS tools that
    are able to export an SLD file for a layer (QGIS can do this). After exporting
    the file, you can upload it to GeoServer by copying the SLD file content to the
    Add a new style page.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 为了定义渲染特性的图层样式，GeoServer 使用基于 XML 的 SLD 架构，这是一个 OGC 标准。在本食谱中，我们编写了两个不同的规则来渲染面积大于
    5,000 平方英里的县，以与其他县不同的方式渲染。为了以不同的方式渲染县，我们使用了两个 `<ogc:Rule>` SLD 元素，在其中您定义了一个 `<ogc:Filter>`
    元素。对于这些元素中的每一个，您都定义了过滤图层特性的标准，使用了 `<ogc:PropertyIsGreaterThanOrEqualTo>` 和 `<ogc:PropertyIsLessThan>`
    元素。生成图层 SLD 的一个非常方便的方法是使用能够导出图层 SLD 文件的桌面 GIS 工具（QGIS 可以做到这一点）。导出文件后，您可以通过将 SLD
    文件内容复制到“添加新样式”页面来上传它到 GeoServer。
- en: Having created the WMS and WFS services for the counties layer, you have been
    testing them by generating the requests using the handy Layer Preview GeoServer
    interface (based on OpenLayers) and then typing the requests directly in a browser.
    You can modify each service request's parameters from the Layer Preview interface
    or just by changing them in the URL query string.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在为县图层创建了 WMS 和 WFS 服务后，您通过使用便捷的图层预览 GeoServer 界面（基于 OpenLayers）生成请求，然后在浏览器中直接输入请求来测试它们。您可以从图层预览界面或直接在
    URL 查询字符串中更改每个服务请求的参数。
- en: Finally, you tested the services using QGIS and have seen how it is possible
    to export some of the layer's features using the WFS service.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您使用 QGIS 测试了服务，并看到了如何使用 WFS 服务导出图层的一些特性。
- en: See also
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: If you want more information about GeoServer, you can check out its excellent
    documentation at [http://docs.geoserver.org/](http://docs.geoserver.org/) or get
    the wonderful *GeoServer Beginner's Guide* book by Packt Publishing ([http://www.packtpub.com/geoserver-share-edit-geospatial-data-beginners-guide/book](http://www.packtpub.com/geoserver-share-edit-geospatial-data-beginners-guide/book)).
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想了解更多关于 GeoServer 的信息，您可以查看其优秀的文档[http://docs.geoserver.org/](http://docs.geoserver.org/)，或者阅读
    Packt Publishing 出版的精彩的《GeoServer 初学者指南》一书([http://www.packtpub.com/geoserver-share-edit-geospatial-data-beginners-guide/book](http://www.packtpub.com/geoserver-share-edit-geospatial-data-beginners-guide/book))。
- en: Creating a WMS Time service with MapServer
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 MapServer 创建 WMS 时间服务
- en: In this recipe, you will implement a WMS Time with MapServer. For time-series
    data, and whenever you have geographic data that is updated continuously and you
    need to expose it as a WMS in a Web GIS, WMS Time is the way to go. This is possible
    by providing the `TIME` parameter a time value in the WMS requests, typically
    in the `GetMap` request.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，您将实现一个带有 MapServer 的 WMS 时间服务。对于时间序列数据，以及当您有持续更新的地理数据并且需要将其作为 Web GIS
    中的 WMS 公开时，WMS 时间是最佳选择。这是通过在 WMS 请求中提供 `TIME` 参数一个时间值来实现的，通常在 `GetMap` 请求中。
- en: Here, you will implement a WMS Time service for the hotspots, representing possible
    fire data acquired by NASA's **Earth Observing System Data and Information System**
    (**EOSDIS**). This excellent system provides data derived from MODIS images from
    the last 24 hours, 48 hours, and 7 days, which can be downloaded in shapefile,
    KML, WMS, or text file formats. You will load a bunch of this data to PostGIS,
    create a WMS Time service with MapServer, and test the WMS `GetCapabilities` and
    `GetMap` requests using a common browser.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您将为热点实现一个 WMS 时间服务，代表由 NASA 的**地球观测系统数据和信息系统**（**EOSDIS**）获取的可能火灾数据。这个优秀的系统提供了来自
    MODIS 图像的过去 24 小时、48 小时和 7 天的数据，这些数据可以下载为 shapefile、KML、WMS 或文本文件格式。您将加载大量此类数据到
    PostGIS，使用 MapServer 创建一个 WMS 时间服务，并使用通用浏览器测试 WMS 的 `GetCapabilities` 和 `GetMap`
    请求。
- en: If you are new to the WMS standard, please check the previous two recipes to
    get more information.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对 WMS 标准不熟悉，请查看前面的两个食谱以获取更多信息。
- en: Getting ready
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: First, download one week's worth of active fire data (hotspots) from the EOSDIS
    website. For example, Firedata from EOSDIS can be found in this link: [https://earthdata.nasa.gov/earth-observation-data/near-real-time/firms/active-fire-data](https://earthdata.nasa.gov/earth-observation-data/near-real-time/firms/active-fire-data).
    A copy of this shapefile is included in the book code bundle. Use that if you
    want to use the SQL and WMS parameters that have been used in the following steps.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，从 EOSDIS 网站下载一周的活跃火灾数据（热点）。例如，EOSDIS 的 Firedata 可以在这个链接中找到：[https://earthdata.nasa.gov/earth-observation-data/near-real-time/firms/active-fire-data](https://earthdata.nasa.gov/earth-observation-data/near-real-time/firms/active-fire-data)。本书代码包中包含此
    shapefile 的副本。如果您想使用以下步骤中使用的 SQL 和 WMS 参数，请使用它。
- en: 'Extract the shapefile from the `Global_7d.zip` archive to the `working/chp09`
    directory and import this shapefile in PostGIS using the `shp2pgsql` command,
    as follows:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `Global_7d.zip` 归档中的 shapefile 提取到 `working/chp09` 目录，并使用 `shp2pgsql` 命令将此
    shapefile 导入 PostGIS，如下所示：
- en: '[PRE15]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'When the import is completed, check the point fire data (hotspots) you just
    imported in PostGIS. Each hotspot contains a bunch of useful information, most
    notably the geometry and the acquisition date and time stored in the `acq_date`
    and `acq_time` fields. You can easily see that the features loaded from the shapefile
    span eight consecutive days using the following command:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入完成后，检查您刚刚导入到 PostGIS 中的点火灾数据（热点）。每个热点都包含大量有用的信息，最值得注意的是存储在 `acq_date` 和 `acq_time`
    字段中的几何形状和采集日期和时间。您可以使用以下命令轻松地看到从 shapefile 加载的特征跨越了连续的八天：
- en: '[PRE16]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The previous command will produce the following output:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的命令将产生以下输出：
- en: '![](img/b4076998-8aa8-4191-a0e4-d675f64a9e67.png)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b4076998-8aa8-4191-a0e4-d675f64a9e67.png)'
- en: How to do it...
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Carry out the following steps:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: 'We will first create a WMS for the PostGIS hotspot layer. Create a `mapfile`
    named `hotspots.map` in a directory accessible to the HTTPD (or IIS) user (for
    example, `/var/www/data` in Linux, `/Library/WebServer/Documents/` for macOS,
    and `C:\ms4w\Apache\htdocs` in Windows), by executing the following code after
    adjusting the database connection settings:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先将为 PostGIS 热点层创建一个 WMS。在 HTTPD（或 IIS）用户可访问的目录中创建一个名为 `hotspots.map` 的 `mapfile`（例如，在
    Linux 中为 `/var/www/data`，在 macOS 中为 `/Library/WebServer/Documents/`，在 Windows
    中为 `C:\ms4w\Apache\htdocs`），在调整数据库连接设置后执行以下代码：
- en: '[PRE17]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Check whether the WMS GetCapabilities request for this mapfile is working well
    by typing the following URLs in the browser:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在浏览器中输入以下 URL 检查此 mapfile 的 WMS GetCapabilities 请求是否正常工作：
- en: '`http://localhost/cgi-bin/mapserv?map=/var/www/data/hotspots.map&SERVICE=WMS&VERSION=1.0.0&REQUEST=GetCapabilities`
    (in Linux)'
  id: totrans-192
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http://localhost/cgi-bin/mapserv?map=/var/www/data/hotspots.map&SERVICE=WMS&VERSION=1.0.0&REQUEST=GetCapabilities`
    (在 Linux 系统中)'
- en: '`http://localhost/cgi-bin/mapserv.exe?map=C:\ms4w\Apache\htdoc\shotspots.map&SERVICE=WMS&VERSION=1.0.0&REQUEST=GetCapabilities`
    (in Windows)'
  id: totrans-193
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http://localhost/cgi-bin/mapserv.exe?map=C:\ms4w\Apache\htdoc\shotspots.map&SERVICE=WMS&VERSION=1.0.0&REQUEST=GetCapabilities`
    (在 Windows 系统中)'
- en: '`http://localhost/cgi-bin/mapserv?map=/Library/WebServer/Documents/hotspots.map&
    SERVICE=WMS&VERSION=1.0.0&REQUEST=GetCapabilities` (in macOS)'
  id: totrans-194
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http://localhost/cgi-bin/mapserv?map=/Library/WebServer/Documents/hotspots.map&
    SERVICE=WMS&VERSION=1.0.0&REQUEST=GetCapabilities` (在 macOS 系统中)'
- en: 'In the following steps, we will be referring to Linux. If you are using Windows,
    you just need to replace `http://localhost/cgi-bin/mapserv?map=/var/www/data/hotspots.map`
    with `http://localhost/cgi-bin/mapserv.exe?map=C:\ms4w\Apache\htdoc\shotspots.map`;
    or if using macOS, replace it with `http://localhost/cgi-bin/mapserv?map=/Library/WebServer/Documents/hotsposts.map`
    in every request:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下步骤中，我们将参考 Linux。如果您使用的是 Windows，只需将 `http://localhost/cgi-bin/mapserv?map=/var/www/data/hotspots.map`
    替换为 `http://localhost/cgi-bin/mapserv.exe?map=C:\ms4w\Apache\htdoc\shotspots.map`；或者如果您使用的是
    macOS，则在每个请求中将它替换为 `http://localhost/cgi-bin/mapserv?map=/Library/WebServer/Documents/hotsposts.map`：
- en: Now query the WMS service with a `GetMap` request. Type the following URL in
    the browser. If everything is correct, MapServer should return an image with some
    hotspots as a response. The URL is `http://localhost/cgi-bin/mapserv?map=/var/www/data/hotspots.map&&SERVICE=WMS&VERSION=1.3.0&REQUEST=GetMap&BBOX=-25,-100,35,-35&CRS=EPSG:4326&WIDTH=1000&HEIGHT=800&LAYERS=hotspots&STYLES=&FORMAT=image/png`.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用 `GetMap` 请求查询 WMS 服务。在浏览器中输入以下 URL。如果一切正常，MapServer 应该返回一个包含一些热点的图像作为响应。URL
    是 `http://localhost/cgi-bin/mapserv?map=/var/www/data/hotspots.map&&SERVICE=WMS&VERSION=1.3.0&REQUEST=GetMap&BBOX=-25,-100,35,-35&CRS=EPSG:4326&WIDTH=1000&HEIGHT=800&LAYERS=hotspots&STYLES=&FORMAT=image/png`。
- en: 'The map displayed on your browser will look as follows:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器上显示的地图将如下所示：
- en: '![](img/e87157b9-e037-468c-96d7-d43bf066454b.png)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e87157b9-e037-468c-96d7-d43bf066454b.png)'
- en: 'Until now, you have implemented a simple WMS service. Now, to make the `TIME`
    parameter available for WMS Time requests, add the `wms_timeextent`, `wms_timeitem`
    and `wms_timedefault` variables in the `LAYER METADATA` section, as follows:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 到目前为止，你已经实现了一个简单的WMS服务。现在，为了使`TIME`参数可用于WMS时间请求，在`LAYER METADATA`部分添加`wms_timeextent`、`wms_timeitem`和`wms_timedefault`变量，如下所示：
- en: '[PRE18]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Having added these parameters in the `LAYER METADATA` mapfile section, the
    WMS `GetCapabilities` response should change. Now, the hotspots layer definition
    includes the time dimension, defined by the `<Dimension>` and `<Extent>` elements.
    You will get a response, as follows:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`LAYER METADATA`地图文件部分添加了这些参数后，WMS `GetCapabilities`响应应该会改变。现在，热点图层定义包括由`<Dimension>`和`<Extent>`元素定义的时间维度。你将得到如下响应：
- en: '![](img/e238ef42-eef4-4b4e-b1ab-9d837b6dadb7.png)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e238ef42-eef4-4b4e-b1ab-9d837b6dadb7.png)'
- en: You can finally test the WMS service with time support. You only need to remember
    to add the `TIME` parameter in the `GetMap` request (otherwise, `GetMap` will
    filter out the data using the default date, which is `2017-12-12` in this example)
    using the URL `http://localhost/cgi-bin/mapserv?map=/var/www/data/hotspots.map&&SERVICE=WMS&VERSION=1.3.0&REQUEST=GetMap&BBOX=-25,-100,35,-35&CRS=EPSG:4326&WIDTH=1000&HEIGHT=800&LAYERS=hotspots&STYLES=&FORMAT=image/png&TIME=2017-12-10`.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你最终可以测试具有时间支持的WMS服务。你只需要记住在`GetMap`请求中添加`TIME`参数（否则，`GetMap`将使用默认日期过滤数据，在这个例子中是`2017-12-12`）使用URL
    `http://localhost/cgi-bin/mapserv?map=/var/www/data/hotspots.map&&SERVICE=WMS&VERSION=1.3.0&REQUEST=GetMap&BBOX=-25,-100,35,-35&CRS=EPSG:4326&WIDTH=1000&HEIGHT=800&LAYERS=hotspots&STYLES=&FORMAT=image/png&TIME=2017-12-10`。
- en: Play for a while with the `TIME` parameter in the preceding URL and try to see
    how the GetMap image response changes day by day. Remember that, for the dataset
    we imported, the `acq_date` range is from `2017-12-07` to `2017-12-14`; but in
    your case, if you didn't use the hostpots shapefile included in the book dataset,
    the time range will be different!
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在前面的URL中玩一下`TIME`参数，看看GetMap图像响应是如何一天天变化的。记住，对于我们导入的数据集，`acq_date`的范围是从`2017-12-07`到`2017-12-14`；但如果你没有使用书中数据集包含的hostpots
    shapefile，时间范围将不同！
- en: 'The following are different outputs for the mentioned dates and the full URLs
    used to query the service:'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下是在提到的日期和用于查询服务的完整URL的不同输出：
- en: '`http://localhost/cgi-bin/mapserv?map=/var/www/data/hotspots.map&&SERVICE=WMS&VERSION=1.3.0&REQUEST=GetMap&BBOX=-25,-100,35,-35&CRS=EPSG:4326&WIDTH=1000&HEIGHT=800&LAYERS=hotspots&STYLES=&FORMAT=image/png&TIME=2017-12-14`.
    The output is as follows (2017-12-14):'
  id: totrans-206
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http://localhost/cgi-bin/mapserv?map=/var/www/data/hotspots.map&&SERVICE=WMS&VERSION=1.3.0&REQUEST=GetMap&BBOX=-25,-100,35,-35&CRS=EPSG:4326&WIDTH=1000&HEIGHT=800&LAYERS=hotspots&STYLES=&FORMAT=image/png&TIME=2017-12-14`.
    输出如下（2017-12-14）：'
- en: '![](img/04511f88-e1af-4723-82cf-036066eea89f.png)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![](img/04511f88-e1af-4723-82cf-036066eea89f.png)'
- en: '`http://localhost/cgi-bin/mapserv?map=/var/www/data/hotspots.map&&SERVICE=WMS&VERSION=1.3.0&REQUEST=GetMap&BBOX=-25,-100,35,-35&CRS=EPSG:4326&WIDTH=1000&HEIGHT=800&LAYERS=hotspots&STYLES=&FORMAT=image/png&TIME=2017-12-07`.
    The output is as follows (2017-12-07):'
  id: totrans-208
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http://localhost/cgi-bin/mapserv?map=/var/www/data/hotspots.map&&SERVICE=WMS&VERSION=1.3.0&REQUEST=GetMap&BBOX=-25,-100,35,-35&CRS=EPSG:4326&WIDTH=1000&HEIGHT=800&LAYERS=hotspots&STYLES=&FORMAT=image/png&TIME=2017-12-07`.
    输出如下（2017-12-07）：'
- en: '![](img/d25c2dbd-3f54-4402-8524-366b585e7519.png)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d25c2dbd-3f54-4402-8524-366b585e7519.png)'
- en: How it works...
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, you have seen how to create a WMS Time service using the MapServer
    open source web-mapping engine. A WMS Time service is useful for whenever you
    have temporal series and geographic data varying in the time. WMS Time lets the
    user filter the requested data by providing a `TIME` parameter with a time value
    in the WMS requests.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，你看到了如何使用MapServer开源网络地图引擎创建WMS时间服务。WMS时间服务在您有随时间变化的时空序列和地理数据时非常有用。WMS时间服务允许用户通过在WMS请求中提供包含时间值的`TIME`参数来过滤请求的数据。
- en: For this purpose, you first created a plain WMS; if you are new to the WMS standard,
    mapfile, and MapServer, you can check out the first recipe in this chapter. You
    have imported in PostGIS a points shapefile with one week's worth of hotspots
    derived from the MODIS satellite and created a simple WMS for this layer.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 为了这个目的，你首先创建了一个简单的WMS；如果你对WMS标准、mapfile和MapServer不熟悉，可以查看本章的第一个食谱。你已经在PostGIS中导入了一个包含一周热点数据的点shapefile，并为此图层创建了一个简单的WMS。
- en: 'After verifying that this WMS works well by testing the WMS `GetCapabilities`
    and `GetMap` requests, you have time enabled the WMS by adding three parameters
    in the `LAYER METADATA` mapfile section: `wms_timeextent`, `wms_timeitem`, and
    `wms_timedefault`.'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在通过测试 WMS `GetCapabilities` 和 `GetMap` 请求验证此 WMS 工作良好后，您可以通过在 `LAYER METADATA`
    地图文件部分添加三个参数来启用 WMS 的时间功能：`wms_timeextent`、`wms_timeitem` 和 `wms_timedefault`。
- en: The `wms_timeextent` parameter is the duration of time in which the service
    will give a response. It defines the PostGIS `table` field to be used to filter
    the `TIME` parameter (the `acq_date` field in this case). The `wms_timedefault`
    parameter specifies a default time value to be used when the request to the WMS
    service does not provide the `TIME` parameter.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '`wms_timeextent` 参数表示服务将给出响应的时间段。它定义了用于过滤 `TIME` 参数（在本例中为 `acq_date` 字段）的 PostGIS
    `table` 字段。`wms_timedefault` 参数指定了当请求 WMS 服务未提供 `TIME` 参数时使用的默认时间值。'
- en: At this point, the WMS is time enabled; this means that the WMS GetCapabilities
    request now includes the time-dimension definition for the PostGIS hotspots layer
    and, more importantly, the GetMap WMS request lets the user add the `TIME` parameter
    to query the layer for a specific date.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，WMS 已启用时间；这意味着 WMS GetCapabilities 请求现在包括 PostGIS 热点层的时间维度定义，更重要的是，GetMap
    WMS 请求允许用户添加 `TIME` 参数以查询特定日期的图层。
- en: Consuming WMS services with OpenLayers
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 OpenLayers 消费 WMS 服务
- en: In this recipe, you will use the MapServer and Geoserver WMS you created in
    the first two recipes of this chapter using the OpenLayers open source JavaScript
    API.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在本菜谱中，你将使用 MapServer 和 Geoserver WMS，这些是在本章前两个菜谱中创建的，并使用 OpenLayers 开源 JavaScript
    API。
- en: This excellent library helps developers quickly assemble web pages using mapping
    viewers and features. In this recipe, you will create an HTML page, add an OpenLayers
    map in it and a bunch of controls in that map for navigation, switch the layers,
    and identify features of the layers. We will also look at two WMS layers pointing
    to the PostGIS tables, implemented with MapServer and GeoServer.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 这个优秀的库帮助开发者快速使用地图查看器和功能构建网页。在本菜谱中，你将创建一个 HTML 页面，在其中添加一个 OpenLayers 地图以及该地图的一组控件用于导航、切换图层和识别图层特征。我们还将查看两个指向
    PostGIS 表的 WMS 图层，这些图层由 MapServer 和 GeoServer 实现。
- en: Getting ready
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: MapServer uses *PROJ.4* ([https://trac.osgeo.org/proj/)](https://trac.osgeo.org/proj/))
    for projection management. This library does not exist by default with the *Spherical
    Mercator* projection (*EPSG:900913*) defined. Such a projection is commonly used
    by commercial map API providers, such as GoogleMaps, Yahoo! Maps, and Microsoft
    Bing, and can provide excellent base layers for your maps.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: MapServer 使用 *PROJ.4* ([https://trac.osgeo.org/proj/](https://trac.osgeo.org/proj/))
    进行投影管理。这个库默认不包含定义了 *Spherical Mercator* 投影 (*EPSG:900913*)。这种投影通常由商业地图 API 提供商使用，如
    GoogleMaps、Yahoo! Maps 和 Microsoft Bing，并且可以为您的地图提供优秀的基础图层。
- en: 'For this recipe, we need to have under consideration the following:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个菜谱，我们需要考虑以下内容：
- en: Due to security restrictions in JavaScript, it is not possible to retrieve information
    from remote domains using `XMLHttpRequest`. You will encounter this issue in the
    recipe when you send a WMS `GetFeatureInfo` request to a GeoServer that is typically
    running on Tomcat at port 8080 and also send a request from an HTML page running
    on Apache or ISS at port 80\. Therefore, unless you run your GeoServer instance
    using HTTPD URL rewriting, the solution is to create a proxy script.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于 JavaScript 的安全限制，无法使用 `XMLHttpRequest` 从远程域检索信息。在菜谱中，当你向通常在端口 8080 上运行的 Tomcat
    上的 GeoServer 发送 WMS `GetFeatureInfo` 请求时，以及从运行在 Apache 或 ISS 端口 80 上的 HTML 页面发送请求时，你将遇到这个问题。因此，除非你使用
    HTTPD URL 转写运行你的 GeoServer 实例，否则解决方案是创建一个代理脚本。
- en: Copy the proxy script included in the book dataset to the web `cgi` directory
    of your computer (in Linux, at `/usr/lib/cgi-bin`/, in macOS, at `/Library/WebServer/CGI-Executables,`
    and in Windows, at `C:\ms4w\Apache\cgi-bin`), open the proxy.`cgi` file, and add
    `localhost:8080` to the `allowedHosts` list.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将书中数据集包含的代理脚本复制到您计算机的 Web `cgi` 目录中（在 Linux 中为 `/usr/lib/cgi-bin`/，在 macOS 中为
    `/Library/WebServer/CGI-Executables`，在 Windows 中为 `C:\ms4w\Apache\cgi-bin`），打开代理
    `.cgi` 文件，并将 `localhost:8080` 添加到 `allowedHosts` 列表中。
- en: How to do it...
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Carry out the following steps:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: 'Create the `openlayers.html` file and add the `<head>` and `<body>` tags. In
    the `<head>` tag, import the OpenLayers JavaScript library by executing the following
    code:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `openlayers.html` 文件并添加 `<head>` 和 `<body>` 标签。在 `<head>` 标签中，通过执行以下代码导入
    OpenLayers JavaScript 库：
- en: '[PRE19]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'First, add a `<div>` element in the `<body>` tag that will contain the OpenLayers
    map. The map should be given a width of 900 pixels and a height of 500 pixels,
    using the following code:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在`<body>`标签中添加一个`<div>`元素，该元素将包含OpenLayers地图。地图应设置为900像素宽和500像素高，使用以下代码：
- en: '[PRE20]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Just after the map is placed in `<div>`, add a JavaScript script and create
    an OpenLayers `map` object. In the map constructor parameters, you will add an
    empty `controls` array and declare that the map has a Spherical Mercator''s projection,
    as shown in the following code:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在地图放置在`<div>`之后，添加一个JavaScript脚本并创建一个OpenLayers `map`对象。在地图构造函数参数中，您将添加一个空的`controls`数组并声明地图具有球面墨卡托投影，如下所示：
- en: '[PRE21]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Right after the `map` variable is declared, add some OpenLayers controls to
    the map. For the web GIS viewer you are creating, you will add the `Navigation`
    control (which handles map browsing with mouse events, such as dragging, double-clicking,
    and scrolling the wheel), the `PanZoomBar` control (a four-direction navigation
    using the arrows present above the zooming vertical slider), the `LayerSwitcher`
    control (which handles the switching on and off of layers added to the map), and
    the `MousePosition` control (which displays the map coordinates as they change
    while the user is moving the mouse), using the following code:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`map`变量声明后立即，向地图添加一些OpenLayers控件。对于您正在创建的Web GIS查看器，您将添加`Navigation`控件（它通过鼠标事件处理地图浏览，例如拖动、双击和滚动鼠标滚轮）、`PanZoomBar`控件（使用位于缩放垂直滑块上方的箭头进行四个方向的导航）、`LayerSwitcher`控件（它处理添加到地图的图层的开关）和`MousePosition`控件（它显示地图坐标，当用户移动鼠标时坐标会变化），使用以下代码：
- en: '[PRE22]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now create an OSM base layer, using the following code:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在创建一个OSM基础图层，使用以下代码：
- en: '[PRE23]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Set two variables for the WMS GeoServer and the MapServer URL that you will
    use (they are the URLs of the services you created in the first two recipes of
    this chapter):'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为WMS GeoServer和MapServer URL设置两个变量，您将使用这些URL（它们是您在本章前两个菜谱中创建的服务URL）：
- en: 'For Linux, add the following code:'
  id: totrans-237
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于Linux，添加以下代码：
- en: '[PRE24]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'For Windows, add the following code:'
  id: totrans-239
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于Windows，添加以下代码：
- en: '[PRE25]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'For macOS, add the following code:'
  id: totrans-241
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于macOS，添加以下代码：
- en: '[PRE26]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now, create a WMS GeoServer layer to display the OpenLayers map the counties
    from the PostGIS layer. You will set an opacity for this layer, so that it is
    possible to see the other layer (counties) behind it. The `isBaseLayer` property
    is set to `false`, since you want to have this layer over the Google Maps base
    layers and not as an alternative to them (by default, all of the WMS layers in
    OpenLayers are considered to be base layers). Create the WMS GeoServer layer,
    using the following code:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，创建一个WMS GeoServer图层以显示OpenLayers地图中的PostGIS图层县。您将为该图层设置不透明度，以便可以看到其后面的其他图层（县）。`isBaseLayer`属性设置为`false`，因为您希望这个图层位于Google
    Maps基础图层之上，而不是作为它们的替代品（默认情况下，OpenLayers中的所有WMS图层都被视为基础图层）。使用以下代码创建WMS GeoServer图层：
- en: '[PRE27]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now, create a WMS MapServer layer to display the countries from the PostGIS
    layer in the OpenLayers map, using the following code:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，创建一个WMS MapServer图层以在OpenLayers地图中显示来自PostGIS图层的国家，使用以下代码：
- en: '[PRE28]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'After creating the OSM and WMS layers, you need to add all of them to the map,
    using the following code:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建OSM和WMS图层后，您需要使用以下代码将所有这些图层添加到地图中：
- en: '[PRE29]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'You want to provide the user the possibility to identify features of the counties
    WMS. Add the `WMSGetFeatureInfo` OpenLayers control (which will send `GetFeatureInfo`
    requests to the WMS behind the scenes) that points to the counties PostGIS layer
    served by the GeoServer WMS, using the following code:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您希望为用户提供识别县WMS中特征的可能性。添加`WMSGetFeatureInfo` OpenLayers控件（它将在幕后发送`GetFeatureInfo`请求到GeoServer
    WMS），指向由GeoServer WMS提供的县PostGIS图层，使用以下代码：
- en: '[PRE30]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Finally, set the center of the map and its initial zoom level, using the following
    code:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，设置地图的中心和其初始缩放级别，使用以下代码：
- en: '[PRE31]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Your HTML file should now look like the `openlayers.html` file contained in
    `data/chp09`. You can finally deploy this file to your web server (Apache HTTPD
    or IIS). If you are using Apache HTTPD in Linux, you could copy the file to the
    `data` directory under `/var/www`, and if you are using Windows, you could copy
    it to the data directory under `C:\ms4w\Apache\htdocs` (create the `data` directory
    if it does not already exist). Then, access it using the URL `http://localhost/data/openlayers.html`.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 您的 HTML 文件现在应该看起来像 `data/chp09` 中包含的 `openlayers.html` 文件。您现在可以将此文件部署到您的网络服务器（Apache
    HTTPD 或 IIS）。如果您在 Linux 上使用 Apache HTTPD，可以将文件复制到 `/var/www` 下的 `data` 目录，如果您使用
    Windows，可以将它复制到 `C:\ms4w\Apache\htdocs` 下的数据目录（如果尚未存在，请创建 `data` 目录）。然后，使用 URL
    `http://localhost/data/openlayers.html` 访问它。
- en: 'Now, access the `openlayers` web page using your favorite browser. Start browsing
    the map: zoom, pan, try to switch the base and overlays layers on and off using
    the layer switcher control, and try to click on a point to identify one feature
    from the counties PostGIS layer. A map is shown in the following screenshot:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用您喜欢的浏览器访问 `openlayers` 网页。开始浏览地图：缩放、平移，尝试使用图层切换控件打开和关闭基础图层和叠加图层，并尝试点击一个点以从县
    PostGIS 图层中识别一个要素。以下截图显示了地图：
- en: '![](img/85867693-84b9-4bb5-a267-ea322c71b098.png)'
  id: totrans-255
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/85867693-84b9-4bb5-a267-ea322c71b098.png)'
- en: How it works..
  id: totrans-256
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: You have seen how to create a web map viewer with the *OpenLayers* JavaScript
    library. This library lets the developer define the various map components, using
    JavaScript in an HTML page. The core object is a map that is composed of *controls*
    and *layers*.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经看到了如何使用 *OpenLayers* JavaScript 库创建一个网络地图查看器。这个库允许开发者使用 JavaScript 在 HTML
    页面中定义各种地图组件。核心对象是一个由 *控件* 和 *图层* 组成的地图。
- en: OpenLayers comes with a great number of controls ([http://dev.openlayers.org/docs/files/OpenLayers/Control-js.html](http://dev.openlayers.org/docs/files/OpenLayers/Control-js.html)),
    and it is even possible to create custom ones.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: OpenLayers 提供了大量的控件（[http://dev.openlayers.org/docs/files/OpenLayers/Control-js.html](http://dev.openlayers.org/docs/files/OpenLayers/Control-js.html)），甚至可以创建自定义的控件。
- en: Another great OpenLayers feature is the ability to add a good number of geographic
    data sources as layers in the map (you added just a couple of its types to the
    map, such as OpenStreetMap and WMS) and you could add sources, such as WFS, GML,
    KML, GeoRSS, OSM data, ArcGIS Rest, TMS, WMTS, and WorldWind, just to name a few.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: OpenLayers 的另一个出色功能是能够在地图中添加大量地理数据源作为图层（您只添加了其中几种类型到地图中，例如 OpenStreetMap 和 WMS），并且您可以添加来源，如
    WFS、GML、KML、GeoRSS、OSM 数据、ArcGIS Rest、TMS、WMTS 和 WorldWind，仅举几例。
- en: Consuming WMS services with Leaflet
  id: totrans-260
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Leaflet 消费 WMS 服务
- en: In the previous recipe, you have seen how to create a webGIS using the OpenLayers
    JavaScript API and then added the WMS PostGIS layers served from MapServer and
    GeoServer .
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的菜谱中，您已经看到了如何使用 OpenLayers JavaScript API 创建一个网络 GIS，然后添加了从 MapServer 和 GeoServer
    服务的 WMS PostGIS 图层。
- en: A lighter alternative to the widespread OpenLayers JavaScript API was created,
    named **Leaflet**. In this recipe, you will see how to use this JavaScript API
    to create a webGIS, add a WMS layer from PostGIS to this map, and implement an
    *identify tool,* sending a `GetFeatureInfo` request to the MapServer WMS. However,
    unlike OpenLayers, Leaflet does not come with a `WMSGetFeatureInfo` control, so
    we will see in this recipe how to create this functionality.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 为了替代广泛使用的 OpenLayers JavaScript API，创建了一个更轻量级的替代品，名为 **Leaflet**。在本菜谱中，您将看到如何使用此
    JavaScript API 创建一个网络 GIS，将来自 PostGIS 的 WMS 图层添加到该地图中，并实现一个 *识别工具*，向 MapServer
    WMS 发送 `GetFeatureInfo` 请求。然而，与 OpenLayers 不同，Leaflet 不自带 `WMSGetFeatureInfo`
    控件，因此在本菜谱中我们将看到如何创建此功能。
- en: How to do it...
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Carry out the following steps:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: 'Create a new HTML file and name it `leaflet.html` (available in the book source
    code package). Open it and add the `<head>` and `<body>` tags. In the `<head>`
    section, import the Leaflet CSS and JavaScript libraries and the jQuery JavaScript
    library (you will use jQuery to send an AJAX request to the `GetFeatureInfo` from
    the MapServer WMS):'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的 HTML 文件，并将其命名为 `leaflet.html`（可在本书源代码包中找到）。打开它并添加 `<head>` 和 `<body>`
    标签。在 `<head>` 部分，导入 Leaflet CSS 和 JavaScript 库以及 jQuery JavaScript 库（您将使用 jQuery
    向 MapServer WMS 发送 AJAX 请求到 `GetFeatureInfo`）：
- en: '[PRE32]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Start adding a `<div>` tag in the `<body>` element to include the Leaflet map
    in your file, as shown in the following code; the map will have a width of 800
    pixels and a height of 500 pixels:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `<body>` 元素中开始添加 `<div>` 标签以将 Leaflet 地图包含到您的文件中，如下面的代码所示；地图的宽度为 800 像素，高度为
    500 像素：
- en: '[PRE33]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Just after the `<div>` element containing the map, add the following JavaScript
    code. Create a Leaflet `tileLayer` object using the `tile.osm.org` service based
    on `OpenStreetMap` data:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在包含地图的 `<div>` 元素之后，添加以下 JavaScript 代码。使用基于 `OpenStreetMap` 数据的 `tile.osm.org`
    服务创建一个 Leaflet `tileLayer` 对象：
- en: '[PRE34]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Create a second layer that will use the MapServer WMS you created a few recipes
    ago in this chapter. You will need to set the `ms_url` variable differently if
    you''re using Linux, Windows, or macOS:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建第二个图层，该图层将使用你在这个章节的几个菜谱中创建的 MapServer WMS。如果你使用 Linux、Windows 或 macOS，需要设置不同的
    `ms_url` 变量：
- en: 'For Linux, use the following code:'
  id: totrans-272
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 Linux，使用以下代码：
- en: '[PRE35]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'For Windows, use the following code:'
  id: totrans-274
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 Windows，使用以下代码：
- en: '[PRE36]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'For macOS, use the following code:'
  id: totrans-276
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 macOS，使用以下代码：
- en: '[PRE37]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Create the Leaflet `map` and add layers to it, as shown in the following code:'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 Leaflet `map` 并向其中添加层，如下面的代码所示：
- en: '[PRE38]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Now, associate the mouse-click event with a function that will perform the
    `GetFeatureInfo` WMS request on the `countries` layer, by executing the following
    code:'
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，通过执行以下代码将鼠标点击事件与一个函数关联起来，该函数将在 `countries` 层上执行 `GetFeatureInfo` WMS 请求：
- en: '[PRE39]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Your HTML file should now look like the `leaflet.html` file contained in `data/chp09`.
    You can now deploy this file to your web server (that is, Apache HTTPD or IIS).
    If you are using Apache HTTPD in Linux, you could copy the file to the `/var/www/data
    directory`; if you are running macOS, copy it to `/Library/WebServer/Documents/data` ;and
    if you are using Windows, you could copy it to `C:\ms4w\Apache\htdocs\data` (create
    the data directory if it does not already exist). Then, access it with the URL
    `http://localhost/data/leaflet.html`.
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的 HTML 文件现在应该看起来像 `data/chp09` 中包含的 `leaflet.html` 文件。你现在可以将这个文件部署到你的 web 服务器上（即
    Apache HTTPD 或 IIS）。如果你在 Linux 上使用 Apache HTTPD，可以将文件复制到 `/var/www/data` 目录；如果你运行
    macOS，可以复制到 `/Library/WebServer/Documents/data`；如果你使用 Windows，可以复制到 `C:\ms4w\Apache\htdocs\data`（如果该目录不存在，则需要创建它）。然后，通过
    URL `http://localhost/data/leaflet.html` 访问它。
- en: 'Open the web page using your favorite browser, and start navigating the map;
    zoom, pan, and try to click on a point to identify one feature from the `countries`
    PostGIS layer, as shown in the following screenshot:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用你喜欢的浏览器打开网页，并开始导航地图；缩放、平移，并尝试点击一个点以从 `countries` PostGIS 层中识别一个要素，如下面的截图所示：
- en: '![](img/a8a53d0f-03f9-4596-a63c-8a45d3ed0927.png)'
  id: totrans-284
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a8a53d0f-03f9-4596-a63c-8a45d3ed0927.png)'
- en: How it works...
  id: totrans-285
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, you have seen how to use the Leaflet JavaScript API library
    to add a map in an HTML page. First, you created one layer from an external server
    to use as the base map. Then, you created another layer using the MapServer WMS
    you implemented in a previous recipe to expose a PostGIS layer to the web. Then,
    you created a new map object and added it to these two layers. Finally, using
    jQuery, you implemented an AJAX call to the `GetFeatureInfo` WMS request and displayed
    the results in a Leaflet `Popup` object.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，你看到了如何使用 Leaflet JavaScript API 库在 HTML 页面中添加地图。首先，你从一个外部服务器创建了一个图层作为基础地图。然后，你使用之前菜谱中实现的
    MapServer WMS 创建了另一个图层，以将 PostGIS 层暴露给网络。然后，你创建了一个新的地图对象并将其添加到这两个图层中。最后，使用 jQuery，你实现了对
    `GetFeatureInfo` WMS 请求的 AJAX 调用，并在 Leaflet `Popup` 对象中显示结果。
- en: Leaflet is a very nice and compact alternative to the OpenLayers library and
    gives very good results when your webGIS service needs to be used from mobile
    devices, such as tablets and smart phones. Additionally, it has a plethora of
    plugins and can be easily integrated with JavaScript libraries, such as Raphael
    and JS3D.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: Leaflet 是 OpenLayers 库的一个非常不错且紧凑的替代品，当你的 webGIS 服务需要从移动设备（如平板电脑和智能手机）使用时，它能够给出非常好的结果。此外，它拥有大量的插件，并且可以轻松地与
    JavaScript 库（如 Raphael 和 JS3D）集成。
- en: Consuming WFS-T services with OpenLayers
  id: totrans-288
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 OpenLayers 消费 WFS-T 服务
- en: In this recipe, you will create the **Transactional Web Feature Service** (**WFS-T**)
    from a PostGIS layer with the GeoServer open source web-mapping engine and then
    an OpenLayers basic application that will be able to use this service.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，你将使用 GeoServer 开源网络地图引擎从 PostGIS 层创建 **事务性 Web 要素服务**（**WFS-T**），然后创建一个能够使用此服务的
    OpenLayers 基本应用程序。
- en: This way, the user of the application will be able to manage transactions on
    the remote PostGIS layer. WFS-T allows for the creation, deletion, and updating
    of features. In this recipe, you will allow the user to only to add features,
    but this recipe should put you on your way to creating more composite use cases.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，应用程序的用户将能够管理远程 PostGIS 层上的事务。WFS-T 允许创建、删除和更新要素。在这个菜谱中，你将允许用户仅添加要素，但这个菜谱应该能让你开始创建更复杂的用例。
- en: If you are new to GeoServer and OpenLayers, you should first read the *Creating
    WMS and WFS services with GeoServer* and *Consuming WMS services with OpenLayers*
    recipes and then return to this one.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是GeoServer和OpenLayers的新手，您应该首先阅读 *使用GeoServer创建WMS和WFS服务* 和 *使用OpenLayers消费WMS服务*
    菜谱，然后返回此菜谱。
- en: Getting ready
  id: totrans-292
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create the proxy script and deploy it to your web server (that is, HTTPD or
    IIS), as indicated in the *Getting ready* section of the *Consuming WMS services
    with OpenLayers* recipe.
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建代理脚本并将其部署到您的Web服务器（即HTTPD或IIS），如 *使用OpenLayers消费WMS服务* 菜谱中的 *准备工作* 部分所示。
- en: 'Create the following PostGIS points layer named `sites`:'
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建以下名为 `sites` 的PostGIS点图层：
- en: '[PRE40]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Now create a PostGIS layer in GeoServer for the `chp09.sites` table. For more
    information on this, refer to the *Creating WMS and WFS services with GeoServer*
    recipe in this chapter.
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在GeoServer中为 `chp09.sites` 表创建一个PostGIS图层。有关更多信息，请参阅本章中的 *使用GeoServer创建WMS和WFS服务*
    菜谱。
- en: How to do it...
  id: totrans-297
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Carry out the following steps:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: 'Create a new file named `wfst.html`. Open it and add the `<head>` and `<body>`
    tags. In the `<head>` tag, import the following `OpenLayers` library:'
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `wfst.html` 的新文件。打开它并添加 `<head>` 和 `<body>` 标签。在 `<head>` 标签中，导入以下 `OpenLayers`
    库：
- en: '[PRE41]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Add a `<div>` tag in the `<body>` tag to contain the OpenLayers map, as shown
    in the following code; the map will have a width of 700 pixels and a height of
    400 pixels:'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `<body>` 标签中添加一个 `<div>` 标签以包含OpenLayers地图，如下面的代码所示；地图的宽度为700像素，高度为400像素：
- en: '[PRE42]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Just after the `<div>` tag is made to contain the map, add a JavaScript script.
    Inside the script, start setting `ProxyHost` to the web location where you deployed
    your proxy script. Then create a new OpenLayers map, as shown in the following
    code:'
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建用于包含地图的 `<div>` 标签之后，添加一个JavaScript脚本。在脚本内部，将 `ProxyHost` 设置为部署代理脚本的网络位置。然后创建一个新的OpenLayers地图，如下面的代码所示：
- en: '[PRE43]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Now, in the script, after creating the map, create an `OpenStreetMap` layer
    that you will use in the map as the base layer, using the following code:'
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在脚本中，在创建地图之后，创建一个 `OpenStreetMap` 图层，您将在地图中使用它作为基础图层，如下面的代码所示：
- en: '[PRE44]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Now, create the WFS-T layer''s `OpenLayers` object using the `StyleMap` object
    to render the PostGIS layer features with red points, as shown in the following
    screenshot:'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用 `StyleMap` 对象创建WFS-T图层的 `OpenLayers` 对象，以使用红色点渲染PostGIS图层功能，如下面的截图所示：
- en: '[PRE45]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Add the WFS layer to the map, center align the map, and set the initial zoom.
    You can use the `geometry` transform method to convert a point from `EPSG:4326`,
    in which the layer is stored, to `ESPG:900913`, which is used by the viewer, as
    shown in the following code:'
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将WFS图层添加到地图中，使地图居中，并设置初始缩放。您可以使用 `geometry` 转换方法将点从存储图层的 `EPSG:4326` 转换为 `ESPG:900913`，这是查看器使用的坐标系统，如下面的代码所示：
- en: '[PRE46]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Now, you will create a panel with a *Draw Point* tool (to add new features)
    and a *Save Features* tool (to save the features to the underlying WFS-T). We
    first create the panel, as shown in the following code:'
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您将创建一个包含 *Draw Point* 工具（用于添加新功能）和 *Save Features* 工具（用于将功能保存到底层的WFS-T）的面板。我们首先创建面板，如下面的代码所示：
- en: '[PRE47]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Now, we will create the *Draw Point* tool, as shown in the following code:'
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将创建名为 *Draw Point* 的工具，如下面的代码所示：
- en: '[PRE48]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Then, we will create the *Save Features* tool, using the following code:'
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将创建名为 *Save Features* 的工具，使用以下代码：
- en: '[PRE49]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Finally, add the tools to the panel, including a navigation control, and the
    panel as a control to the map, using the following code:'
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将工具添加到面板中，包括导航控件，并将面板作为地图的控件，使用以下代码：
- en: '[PRE50]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Your HTML file should now look like the `wfst.html` file contained in the `chp09`
    directory. Deploy this file to your web server (that is, Apache HTTPD or IIS).
    If you are using Apache HTTPD in Linux, you could copy the file to the `data`
    directory under `/var/www`, whereas if you are using Windows, you could copy it
    to the data directory under `C:\ms4w\Apache\htdocs` (create the `data` directory
    if it does not already exist). Then, access it using `http://localhost/data/wfst.html`.
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的HTML文件现在应该看起来像 `chp09` 目录中包含的 `wfst.html` 文件。将其部署到您的Web服务器（即Apache HTTPD或IIS）。如果您在Linux上使用Apache
    HTTPD，可以将文件复制到 `/var/www` 下的 `data` 目录，而如果您使用Windows，则可以将其复制到 `C:\ms4w\Apache\htdocs`
    下的数据目录（如果尚不存在，则创建该目录）。然后，使用 `http://localhost/data/wfst.html` 访问它。
- en: 'Open the web page using your favorite browser and start adding some points
    to the map. Now, click on the Save button and reload the page; the previously
    added points should still be there, as they had been stored in the underlying
    `PostGIS` table by WFS-T, as shown in the following screenshot:'
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用你喜欢的浏览器打开网页，并开始向地图添加一些点。现在，点击保存按钮并重新加载页面；之前添加的点应该仍然在那里，因为它们已经被 WFS-T 存储在底层的
    `PostGIS` 表中，如下面的截图所示：
- en: '![](img/abea301e-c5df-4a8b-8187-b7265c629b58.png)'
  id: totrans-321
  prefs: []
  type: TYPE_IMG
  zh: '![](img/abea301e-c5df-4a8b-8187-b7265c629b58.png)'
- en: Added points using OpenLayers controls viewed on a browser
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 使用浏览器上的 OpenLayers 控件添加的点
- en: How it works...
  id: totrans-323
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, you first created a point `PostGIS` table and then published
    it as WFS-T, using GeoServer. You then created a basic OpenLayers application,
    using the WFS-T layer, allowing the user to add features to the underlying PostGIS
    layer.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，你首先创建了一个点 `PostGIS` 表，然后使用 GeoServer 将其发布为 WFS-T。然后你创建了一个基本的 OpenLayers
    应用程序，使用 WFS-T 图层，允许用户向底层的 PostGIS 图层添加要素。
- en: In OpenLayers, the core object needed to implement such a service is the vector
    layer by defining a WFS protocol. When defining the WFS protocol, you have to
    provide the WFS version that is using the spatial reference system of the dataset,
    the URI of the service, the name of the layer (for GeoServer, the name is a combination
    of the layer workspace, `FeaturePrefix`, and the layer name, `FeatureType`), and
    the name of the `geometry` field that will be modified. You also can pass to the
    Vector layer constructor a `StyleMap` value to define the layer's rendering behavior.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 在 OpenLayers 中，实现此类服务所需的核心对象是通过定义 WFS 协议的矢量图层。当定义 WFS 协议时，你必须提供使用数据集空间参考系统的
    WFS 版本，服务的 URI，图层的名称（对于 GeoServer，名称是图层工作区、`FeaturePrefix` 和图层名称 `FeatureType`
    的组合），以及将要修改的 `geometry` 字段的名称。你还可以向矢量图层构造函数传递一个 `StyleMap` 值来定义图层的渲染行为。
- en: You then tested the application by adding some points to the OpenLayers map
    and checked that those points were effectively stored in PostGIS. When adding
    the points using the WFS-T layer, with the help of tools such as Firefox Firebug
    or Chrome (Chromium) Developer Tools, you could dig in detail into the requests
    that you are making to the WFS-T and its responses.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 你然后通过向 OpenLayers 地图添加一些点来测试应用程序，并检查这些点是否确实存储在 PostGIS 中。当使用 WFS-T 图层添加点时，借助
    Firefox Firebug 或 Chrome（Chromium）开发者工具，你可以详细调查你对 WFS-T 发出的请求及其响应。
- en: 'For example, when adding a point, you will see that an `Insert` request is
    sent to WFS-T. The following XML is sent to the service (note how the point geometry
    is inserted in the body of the `<wfs:Insert>` element):'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，当添加一个点时，你会看到发送了一个 `Insert` 请求到 WFS-T。以下 XML 被发送到服务（注意点几何形状是如何插入到 `<wfs:Insert>`
    元素的主体中的）：
- en: '[PRE51]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'The `<wfs:TransactionResponse>` response, as shown in the following code, will
    be sent from WFS-T if the process has transpired smoothly and the features have
    been stored (note that the `<wfs:totalInserted>` element value in this case is
    set to `1`, as only one feature was stored):'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 如以下代码所示，如果过程顺利进行并且要素已存储，WFS-T 将发送 `<wfs:TransactionResponse>` 响应（注意在这种情况下，`<wfs:totalInserted>`
    元素的值设置为 `1`，因为只存储了一个要素）：
- en: '[PRE52]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Developing web applications with GeoDjango – part 1
  id: totrans-331
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 GeoDjango 开发网络应用程序 - 第 1 部分
- en: In this recipe and the next, you will use the **Django** web framework to create
    a web application to manage wildlife sightings using a PostGIS data store. In
    this recipe, you will build the back office of the web application, based on the
    Django admin site.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱和下一个食谱中，你将使用 **Django** 网络框架创建一个使用 PostGIS 数据存储来管理野生动物目击事件的网络应用程序。在这个食谱中，你将构建网络应用程序的后端，基于
    Django 管理站点。
- en: Upon accessing the back office, an administrative user will be able to, after
    authentication, manage (insert, update, and delete) the main entities (animals
    and sightings) of the database. In the next part of the recipe, you will build
    a front office that displays the sightings on a map based on the **Leaflet** JavaScript
    library.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 在访问后台办公室后，经过身份验证，管理员用户将能够管理（插入、更新和删除）数据库的主要实体（动物和目击事件）。在食谱的下一部分，你将构建一个前端，它基于
    **Leaflet** JavaScript 库在地图上显示目击事件。
- en: You can find a copy of the whole project that you are going to build in the
    code bundle under `chp09/wildlife`. Refer to it if a concept is not clear or if
    you want to copy and paste the code as you go through the steps of the recipe,
    rather than typing code from scratch.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`chp09/wildlife`目录下的代码包中找到一个您将要构建的整个项目的副本。如果某个概念不清楚或您在执行食谱步骤时想复制粘贴代码，而不是从头开始编写代码，请参考它。
- en: Getting ready
  id: totrans-335
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: If you are new to Django, check out the official Django tutorial at [https://docs.djangoproject.com/en/dev/intro/tutorial01/](https://docs.djangoproject.com/en/dev/intro/tutorial01/)
    and then return to this recipe.
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您是Django的新手，请查看官方Django教程[https://docs.djangoproject.com/en/dev/intro/tutorial01/](https://docs.djangoproject.com/en/dev/intro/tutorial01/)，然后返回到本食谱。
- en: 'Create a Python *virtualenv* ([http://www.virtualenv.org/en/latest/](http://www.virtualenv.org/en/latest/))
    to create an isolated Python environment to use with the web application you will
    build in this recipe and the next. Then, activate the environment as follows:'
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个Python *virtualenv* ([http://www.virtualenv.org/en/latest/](http://www.virtualenv.org/en/latest/))，以创建一个用于您将在本食谱和下一个食谱中构建的Web应用的隔离Python环境。然后，按照以下方式激活环境：
- en: 'Use the following commands in Linux:'
  id: totrans-338
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Linux中使用以下命令：
- en: '[PRE53]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Type the following commands in Windows (for steps to install `virtualenv` on
    Windows, refer to [https://zignar.net/2012/06/17/install-python-on-windows/](https://zignar.net/2012/06/17/install-python-on-windows/)):'
  id: totrans-340
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Windows中输入以下命令（有关在Windows上安装`virtualenv`的步骤，请参阅[https://zignar.net/2012/06/17/install-python-on-windows/](https://zignar.net/2012/06/17/install-python-on-windows/)）：
- en: '[PRE54]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Once activated, you can install the Python packages that you will use for this
    recipe as well as the next, using the `pip` tool ([http://www.pip-installer.org/en/latest/](http://www.pip-installer.org/en/latest/)).
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦激活，您可以使用`pip`工具（[http://www.pip-installer.org/en/latest/](http://www.pip-installer.org/en/latest/)）安装您将为这个食谱以及下一个食谱使用的Python包。
- en: 'In Linux, the command would be as follows:'
  id: totrans-343
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Linux中，命令如下：
- en: '[PRE55]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'In Windows, the command would be as follows:'
  id: totrans-345
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Windows中，命令如下：
- en: '[PRE56]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: If you haven't done it so far, download the world countries shapefile from [http://thematicmapping.org/downloads/TM_WORLD_BORDERS-0.3.zip](http://thematicmapping.org/downloads/TM_WORLD_BORDERS-0.3.zip).
    A copy of this shapefile is included in the code bundle of this book. Extract
    the shapefile to the `working/chp09` directory.
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您之前还没有这样做，请从[http://thematicmapping.org/downloads/TM_WORLD_BORDERS-0.3.zip](http://thematicmapping.org/downloads/TM_WORLD_BORDERS-0.3.zip)下载世界国家形状文件。本书的代码包中也包含了这个形状文件的副本。将形状文件提取到`working/chp09`目录下。
- en: How to do it...
  id: totrans-348
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Carry out the following steps:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: 'Create a Django project using the `django-admin` command with the `startproject`
    option. Name the project `wildlife`. The command for creating the project will
    be as follows:'
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`django-admin`命令的`startproject`选项创建一个Django项目。将项目命名为`wildlife`。创建项目的命令如下：
- en: '[PRE57]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Create a Django application using the `django-admin` command with the `startapp`
    option. Name the application `sightings`. The command will be as follows:'
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`django-admin`命令的`startapp`选项创建一个Django应用。将应用命名为`sightings`。命令如下：
- en: '[PRE58]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Now you should have the following directory structure:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您应该有以下目录结构：
- en: '![](img/13f78c11-6d72-4453-8a85-771f9cb472cb.png)'
  id: totrans-355
  prefs: []
  type: TYPE_IMG
  zh: '![](img/13f78c11-6d72-4453-8a85-771f9cb472cb.png)'
- en: 'You will need to edit some files. Open your favorite editor (**Sublime Text**
    does the job) and go to the settings in the `settings.py` file in the code bundle
    under `chp09/wildlife/wildlife`. First, the `DATABASES` settings should be as
    shown in the following code, in order to use the `postgis_cookbook` PostGIS database
    for your application data:'
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要编辑一些文件。打开您喜欢的编辑器（**Sublime Text**可以完成这项工作）并转到代码包中`chp09/wildlife/wildlife`目录下的`settings.py`文件中的设置。首先，`DATABASES`设置应如下所示，以便为您的应用程序数据使用`postgis_cookbook`
    PostGIS数据库：
- en: '[PRE59]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Add the following two lines of code at the top of the `wildlife/settings.py`
    file (`PROJECT_PATH` is the variable in which you will enter the project''s path
    in the settings menu):'
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`wildlife/settings.py`文件的顶部添加以下两行代码（`PROJECT_PATH`是您将在设置菜单中输入项目路径的变量）：
- en: '[PRE60]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Make sure that in the `settings.py` file under `chp09/wildlife/wildlife`, `MEDIA_ROOT`,
    and `MEDIA_URL` are correctly set, as shown the following code (this is to set
    the media files'' path and URLs for the images that the administrative user will
    upload):'
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保在`chp09/wildlife/wildlife`目录下的`settings.py`文件中，`MEDIA_ROOT`和`MEDIA_URL`设置正确，如下所示（这是为了设置媒体文件的路径和URL，以便上传图像的管理员用户使用）：
- en: '[PRE61]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Make sure that the `INSTALLED_APPS` setting looks as shown in the following
    code in the `settings.py` file. You will use the Django admin site (`django.contrib.admin`),
    the GeoDjango core library (`django.contrib.gis`), and the sightings application
    you are creating in this recipe and the next. For this purpose, add the last three
    lines:'
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保在`settings.py`文件中的`INSTALLED_APPS`设置看起来如下所示。你将使用Django管理站点（`django.contrib.admin`）、GeoDjango核心库（`django.contrib.gis`）以及你在此配方和下一个配方中创建的
    sightings 应用程序。为此，添加最后三行：
- en: '[PRE62]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Now, synchronize the database using the Django `migrations` management commands.
    When prompted to create a *superuser*, answer `yes` and choose a preferred administrative
    username and password:'
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用Django的`migrations`管理命令同步数据库。当提示创建一个 *超级用户* 时，回答 `yes` 并选择一个首选的管理员用户名和密码：
- en: '[PRE63]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Now you will add the models needed by the application. Edit the `models.py`
    file under `chp09/wildlife/sightings` and add the following code:'
  id: totrans-366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你将添加应用程序需要的模型。编辑位于`chp09/wildlife/sightings`下的`models.py`文件，并添加以下代码：
- en: '[PRE64]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Each model will become a table in the database with the corresponding fields
    defined using the `models` and `gismodels` class. Note that the `geometry` variable
    in the `county` and `sighting` layers will become the `MultiPolygon` and `Point`
    PostGIS geometry columns, thanks to the GeoDjango library.
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个模型都将成为数据库中的一个表，使用`models`和`gismodels`类定义相应的字段。请注意，`county`和`sighting`层中的`geometry`变量将变成`MultiPolygon`和`Point`
    PostGIS几何列，这要归功于GeoDjango库。
- en: 'Create an `admin.py` file under `chp09/wildlife/sightings` and add the following
    code to it. The classes in this file will define and customize the behavior of
    the Django admin site when browsing the application models or tables (fields to
    display, fields to be used to filter records, and fields to order records). Create
    the file by executing the following code:'
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`chp09/wildlife/sightings`下创建一个`admin.py`文件，并将其中的以下代码添加到该文件中。该文件中的类将定义和自定义Django管理站点在浏览应用程序模型或表时的行为（要显示的字段、用于过滤记录的字段以及用于排序记录的字段）。通过执行以下代码创建该文件：
- en: '[PRE65]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Now, to synchronize the database, execute the following commands in the Django
    project folder:'
  id: totrans-371
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，为了同步数据库，请在Django项目文件夹中执行以下命令：
- en: '[PRE66]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'The output should be as follows:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果应如下所示：
- en: '![](img/be6bc8f8-9be1-40b2-b90f-4a246c4bda3b.png)'
  id: totrans-374
  prefs: []
  type: TYPE_IMG
  zh: '![](img/be6bc8f8-9be1-40b2-b90f-4a246c4bda3b.png)'
- en: Now, for each model in `models.py`, a PostgreSQL table should have been created.
    Check whether your PostgreSQL database effectively contains the three tables created
    in the preceding commands using your favorite client (that is, `psql` or `pgAdmin`)
    and whether or not the `sightings_sighting` and `sightings_country` tables contain
    PostGIS geometric fields.
  id: totrans-375
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，对于`models.py`中的每个模型，应该已经创建了一个PostgreSQL表。请使用你喜欢的客户端（即`psql`或`pgAdmin`）检查你的PostgreSQL数据库是否确实包含了前面命令中创建的三个表，以及`sightings_sighting`和`sightings_country`表是否包含PostGIS几何字段。
- en: 'Any web application needs the definition of URLs where the pages can be accessed.
    Therefore, edit your `urls.py` file under `chp09/wildlife/wildlife` by adding
    the following code:'
  id: totrans-376
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 任何网络应用都需要定义可以访问页面的URL。因此，请编辑位于`chp09/wildlife/wildlife`下的`urls.py`文件，并添加以下代码：
- en: '[PRE67]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'In the `urls.py` file, you basically defined the location of the back office
    (which was built using the Django admin application) and the media (images) files''
    location uploaded by the Django administrator when adding new animal entities
    in the database. Now run the Django development server, using the following `runserver`
    management command:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 在`urls.py`文件中，你基本上定义了后台位置（使用Django管理应用程序构建）以及由Django管理员上传的媒体（图像）文件的位置，当在数据库中添加新的动物实体时。现在运行Django开发服务器，使用以下`runserver`管理命令：
- en: '[PRE68]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Access the Django admin site at `http://localhost:8000/admin/` and log in with
    the superuser credentials you furnished in an earlier step in this recipe (*step
    7*).
  id: totrans-380
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过`http://localhost:8000/admin/`访问Django管理站点，并使用在之前步骤中提供的超级用户凭据登录（*步骤7*）。
- en: 'Now, navigate to `http://localhost:8000/admin/sightings/animal/` and add some
    animals using the Add animal button. For each animal, define a name and an image
    that will be used by the frontend that you will build in the next recipe. You
    created this page with almost no code, thanks to the Django admin! The following
    screenshot shows what the Animals list page will look like after adding some entities:'
  id: totrans-381
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，导航到`http://localhost:8000/admin/sightings/animal/`，并使用添加动物按钮添加一些动物。对于每个动物，定义一个名称和一个将被前端使用的图像，你将在下一个配方中构建该前端。多亏了Django管理，你几乎不需要写代码就创建了此页面。以下截图显示了添加了一些实体后动物列表页面将看起来是什么样子：
- en: '![](img/57846f01-681a-4a75-b4f7-d3d22e44efab.png)'
  id: totrans-382
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/57846f01-681a-4a75-b4f7-d3d22e44efab.png)'
- en: 'Navigate to `http://localhost:8000/admin/sightings/sighting/` and add some
    sightings using the Add sighting button. For each sighting, define the Date, Time,
    the name of the animal that was spotted, Rate, and the location. GeoDjango has
    added the map widget to the Django Admin site for you, based on the OpenLayers
    JavaScript library, to add or modify geometric features. The Sightings page is
    shown in the following screenshot:'
  id: totrans-383
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 `http://localhost:8000/admin/sightings/sighting/` 并使用“添加观测”按钮添加一些观测。对于每个观测，定义日期、时间、观测到的动物名称、评分和位置。GeoDjango已为您在Django管理站点中添加了基于OpenLayers
    JavaScript库的地图小部件，以便添加或修改几何特征。以下截图显示了观测页面：
- en: '![](img/d8f11d04-1b65-4d87-a88d-9474a4ab206c.png)'
  id: totrans-384
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d8f11d04-1b65-4d87-a88d-9474a4ab206c.png)'
- en: 'The Sightings list page, thanks to the Django admin''s efficiency, will provide
    the administrative user with useful features to sort, filter, and navigate the
    date hierarchy of all of the sightings in the system, as shown in the following
    screenshot:'
  id: totrans-385
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于Django管理的高效性，观测列表页面将为管理用户提供有用的功能来排序、过滤和导航系统中所有观测的日期层次结构，如下面的截图所示：
- en: '![](img/faf66318-a650-40a0-9434-b1a6bb618a5f.png)'
  id: totrans-386
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/faf66318-a650-40a0-9434-b1a6bb618a5f.png)'
- en: 'Now, you will import the `countries` shapefile to its model. In the next recipe,
    you will use this model to find the country where each sighting occurred. Before
    going ahead in this recipe, investigate the shapefile structure; you will need
    to import just the `NAME` and `ISO2` attributes to the model as the `name` and
    `isocode` attributes, using the following command:'
  id: totrans-387
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您将导入`countries`形状文件到其模型中。在下一个食谱中，您将使用此模型来查找每个观测发生的国家。在继续本食谱之前，调查形状文件结构；您需要使用以下命令将`NAME`和`ISO2`属性导入模型作为`name`和`isocode`属性：
- en: '[PRE69]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '****![](img/9f3be64f-4aa1-4522-9dee-479df76c3b7f.png)****'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: '****![图片](img/9f3be64f-4aa1-4522-9dee-479df76c3b7f.png)****'
- en: 'Add a `load_countries.py` file under `chp09/wildlife/sightings` and import
    the shapefile to PostGIS, using the `LayerMapping` GeoDjango utility, using the
    following code:'
  id: totrans-390
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`chp09/wildlife/sightings`目录下添加一个`load_countries.py`文件，并使用`LayerMapping` GeoDjango实用工具将形状文件导入PostGIS，使用以下代码：
- en: '[PRE70]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'You should have the `TM_WORLD_BORDERS-0.3.shp` file placed under `chp09/wildlife`
    for this code to work. Enter the Python Django shell and run the `utils.py` script.
    Then, check whether the countries have been correctly inserted in the `sightings_country`
    table in your PostgreSQL database, using the following command:'
  id: totrans-392
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使此代码正常工作，您应该在`chp09/wildlife`目录下放置`TM_WORLD_BORDERS-0.3.shp`文件。进入Python Django
    shell并运行`utils.py`脚本。然后，使用以下命令检查国家是否已正确插入到您的PostgreSQL数据库中的`sightings_country`表中：
- en: '[PRE71]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Now, you should see the countries in the administrative interface at `http://localhost:8000/admin/sightings/country/`,
    while running the Django server with:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当使用以下命令运行Django服务器时，您应该在`http://localhost:8000/admin/sightings/country/`的管理界面中看到国家：
- en: '[PRE72]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '**![](img/be44025b-b8a3-48cc-aec5-d67ba8ff1dbe.png)**'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '**![图片](img/be44025b-b8a3-48cc-aec5-d67ba8ff1dbe.png)**'
- en: How it works...
  id: totrans-397
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, you have seen how quick and efficient it is to assemble a back
    office application using **Django**, one of the most popular Python web frameworks;
    this is thanks to its object-relational mapper, which automatically created the
    database tables needed by your application and an automatic API to manage (insert,
    update, and delete) and query the entities without using SQL.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，您已经看到了如何快速高效地使用**Django**（最受欢迎的Python网络框架之一）组装后台应用程序；这要归功于其对象关系映射器，它可以自动创建应用程序所需的数据库表，并提供自动API来管理（插入、更新和删除）以及查询实体，而无需使用SQL。
- en: Thanks to the **GeoDjango** library, two of the application models, County and
    Sighting, have been geo-enabled with their introduction in the database tables
    of `geometric` PostGIS fields.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢**GeoDjango**库，两个应用程序模型（县和观测）在引入数据库表中的`geometric` PostGIS字段时被地理启用。
- en: You have customized the powerful **automatic administrative interface** to quickly
    assemble the back-office pages of your application. Using the **Django URL Dispatcher**,
    you have defined the URL routes for your application in a concise manner.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 您已自定义了强大的**自动管理界面**，可以快速组装应用程序的后台页面。使用**Django URL分发器**，您以简洁的方式定义了应用程序的URL路由。
- en: 'As you may have noticed, what is extremely nice about the Django abstraction
    is the automatic implementation of the data-access layer API using the models.
    You can now add, update, delete, and query records using Python code, without
    having any knowledge of SQL. Try this yourself, using the Django Python shell;
    you will select an animal from the database, add a new sighting for that animal,
    and then finally delete the sighting. You can investigate the SQL generated by
    Django, behind the scenes, any time, using the `django.db`.connection class with
    the following command:'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所注意到的，Django 抽象的一个极好的特点是自动实现数据访问层 API，使用模型。你现在可以使用 Python 代码添加、更新、删除和查询记录，而不需要任何
    SQL 知识。尝试使用 Django Python shell 做这件事；你将从数据库中选择一个动物，为该动物添加一个新的观测，然后最终删除该观测。你可以使用以下命令，在任何时候调查
    Django 后台生成的 SQL，使用 `django.db.connection` 类：
- en: '[PRE73]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Do you like Django as much as we do? In the next recipe, you will create the
    frontend of the application. The user will be able to browse the sightings in
    a map, implemented with the Leaflet JavaScript library. So keep reading!
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否和我们一样喜欢 Django？在下一个菜谱中，你将创建应用程序的前端。用户将能够使用 Leaflet JavaScript 库实现的地图浏览观测。所以继续阅读！
- en: Developing web applications with GeoDjango – part 2
  id: totrans-404
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Developing web applications with GeoDjango – part 2
- en: In this recipe, you will create the front office for the web application you
    created using **Django** in the previous recipe.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，你将创建之前菜谱中使用的 **Django** 创建的 Web 应用程序的前端。
- en: Using HTML and the **Django template language**, you will create a web page
    displaying a map, implemented with Leaflet, and a list for the user containing
    all of the sightings available in the system. The user will be able to navigate
    the map and identify the sightings to get more information.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 HTML 和 **Django 模板语言**，你将创建一个显示地图的网页，该地图使用 Leaflet 实现，并为用户提供一个包含系统中所有可用观测的列表。用户将能够导航地图并识别观测以获取更多信息。
- en: Getting ready
  id: totrans-407
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure you have gone through every single step of the previous recipe and
    have kept the back office of the web application working and its database populated
    with some entities.
  id: totrans-408
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保你已经完成了上一个菜谱中的每一个步骤，并且 Web 应用程序的后端正在运行，其数据库已用一些实体填充。
- en: 'Activate the `virtualenv` you created in the *Developing web applications with
    GeoDjango –Part 1)* recipe, as follows:'
  id: totrans-409
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 激活你在 *Developing web applications with GeoDjango –Part 1)* 菜谱中创建的 `virtualenv`，如下所示：
- en: 'Use the following command for Linux:'
  id: totrans-410
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Linux 上使用以下命令：
- en: '[PRE74]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Use the following command for Windows:'
  id: totrans-412
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Windows 上使用以下命令：
- en: '[PRE75]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Install the libraries that you will use in this recipe; you will need the `simplejson`
    and `vectorformats` Python libraries to produce a GeoJSON ([http://www.geojson.org/](http://www.geojson.org/))
    response that will feed the sighting layer in Leaflet:'
  id: totrans-414
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装你将在本菜谱中使用的库；你需要 `simplejson` 和 `vectorformats` Python 库来生成 GeoJSON ([http://www.geojson.org/](http://www.geojson.org/))
    响应，该响应将用于填充 Leaflet 中的观测层：
- en: 'Use the following command for Linux:'
  id: totrans-415
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Linux 上使用以下命令：
- en: '[PRE76]'
  id: totrans-416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Use the following command for Windows:'
  id: totrans-417
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Windows 上使用以下命令：
- en: '[PRE77]'
  id: totrans-418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: How to do it...
  id: totrans-419
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'You will now create the front page of your web application, as follows:'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在将创建你的 Web 应用程序的首页，如下所示：
- en: 'Go to the directory containing the Django wildlife web application and add
    the following lines to the `urls.py` file under `chp09/wildlife/wildlife`:'
  id: totrans-421
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往包含 Django 野生动物 Web 应用程序的目录，并将以下行添加到 `chp09/wildlife/wildlife` 文件夹下的 `urls.py`
    文件中：
- en: '[PRE78]'
  id: totrans-422
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Open the `views.py` file under `chp09/wildlife/sightings` and add the following
    code. The `home` view will return the home page of your application, with the
    list of sightings and the Leaflet map. The `sighting` layer in the map will display
    the GeoJSON response given by the `get_geojson` view:'
  id: totrans-423
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `chp09/wildlife/sightings` 文件夹下的 `views.py` 文件，并添加以下代码。`home` 视图将返回你的应用程序的首页，包含观测列表和
    Leaflet 地图。地图中的 `sighting` 层将显示由 `get_geojson` 视图给出的 GeoJSON 响应：
- en: '[PRE79]'
  id: totrans-424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Add the following `@property` definitions to the `Sighting` class in the `models.py`
    file under `chp09/wildlife/sightings`. The `get_geojson` view will need to use
    these properties to compose the GeoJSON view needed from the Leaflet map and the
    information popup. Note how in the `country_name` property, you are using GeoDjango,
    which contains a spatial lookup `QuerySet` operator to detect the country where
    the sighting happened:'
  id: totrans-425
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 `@property` 定义添加到 `chp09/wildlife/sightings` 文件夹下的 `models.py` 文件中的 `Sighting`
    类。`get_geojson` 视图将需要使用这些属性来组合从 Leaflet 地图和信息弹出窗口中需要的 GeoJSON 视图。注意在 `country_name`
    属性中，你使用了 GeoDjango，它包含一个空间查找 `QuerySet` 操作符来检测观测发生的国家：
- en: '[PRE80]'
  id: totrans-426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'Add a `home.html` file, containing the following code, under `sightings/templates/sightings`.
    Using the Django template language, you will display the number of sightings in
    the system, a list of these sightings with the main information for each of them,
    and the Leaflet map. Using the Leaflet JavaScript API, you add a base OpenStreetMap
    layer to the map. Then, you make an asynchronous call, using jQuery, to the `get_geojson`
    view (accessed by adding `/geojson` to the request URL). If the query is successful,
    it will feed a Leaflet GeoJSON layer with the features from the sighting PostGIS
    layer and associate with each feature an informative popup. This popup will open
    any time the user clicks on a point on the map representing a sighting, displaying
    the main information for that entity:'
  id: totrans-427
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `sightings/templates/sightings` 下添加一个 `home.html` 文件，包含以下代码。使用 Django 模板语言，您将显示系统中的目击事件数量，以及这些目击事件的列表，其中包含每个事件的主要信息，以及
    Leaflet 地图。使用 Leaflet JavaScript API，您将基础 OpenStreetMap 层添加到地图中。然后，您使用 jQuery
    进行异步调用，调用 `get_geojson` 视图（通过在请求 URL 中添加 `/geojson` 来访问）。如果查询成功，它将使用来自目击 PostGIS
    层的功能填充 Leaflet GeoJSON 层，并将每个功能与一个信息弹出窗口关联。此弹出窗口将在用户点击代表目击事件的地图上的点时打开，显示该实体的主要信息：
- en: '[PRE81]'
  id: totrans-428
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'Now that your frontend page is completed, you can finally access it at `http://localhost:8000/`.
    Navigate the map and try to identify some of the displayed sightings to check
    whether the popup opens, as shown in the following screenshot:'
  id: totrans-429
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您的前端页面已完成，您最终可以在 `http://localhost:8000/` 访问它。导航地图并尝试识别一些显示的目击事件，以检查弹出窗口是否打开，如下面的截图所示：
- en: '![](img/29b9fe1f-aa0b-47a1-82ce-ddc3da0b476c.png)'
  id: totrans-430
  prefs: []
  type: TYPE_IMG
  zh: '![](img/29b9fe1f-aa0b-47a1-82ce-ddc3da0b476c.png)'
- en: How it works...
  id: totrans-431
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: You created an HTML front page for the web application you developed in the
    previous recipe. The HTML is dynamically created using the Django template language
    ([https://docs.djangoproject.com/en/dev/topics/templates/](https://docs.djangoproject.com/en/dev/topics/templates/))
    and the map was implemented with the Leaflet JavaScript library.
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 你为之前菜谱中开发的 Web 应用程序创建了一个 HTML 前端页面。该 HTML 是使用 Django 模板语言([https://docs.djangoproject.com/en/dev/topics/templates/](https://docs.djangoproject.com/en/dev/topics/templates/))动态创建的，并且地图是通过
    Leaflet JavaScript 库实现的。
- en: The Django template language uses the response from the home view to generate
    a list of all of the sightings in the system.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: Django 模板语言使用主页视图的响应来生成系统中所有目击事件的列表。
- en: The map was created using Leaflet. First, an OpenStreetMap layer was used as
    a base map. Then, using jQuery, you fed a GeoJSON layer that displays all of the
    features generated by the `get_geojson` view. You associated a popup with the
    layer that opens every time the user clicks on a sighting entity. The popup displays
    the main information for that sighting, including a picture of the sighted animal.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 该地图使用 Leaflet 创建。首先，使用 OpenStreetMap 层作为基础地图。然后，使用 jQuery，你提供了一个 GeoJSON 层，该层显示由
    `get_geojson` 视图生成的所有功能。你将一个弹出窗口与该层关联，每次用户点击一个目击实体时都会打开。该弹出窗口显示该目击事件的主要信息，包括被目击动物的图片。
- en: Developing a web GPX viewer with Mapbox
  id: totrans-435
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Mapbox 开发 Web GPX 查看器
- en: For this recipe, we will use the way points dataset from [Chapter 3](68d3e400-24be-4757-ab79-5b395dd79f3c.xhtml),
    *Working with Vector Data – The Basics*. Refer to the script in the recipe named
    *Working with GPS data* to learn how to import `.gpx` files tracks into PostGIS.
    You will also need a Mapbox token; for this, go to their site ([https://www.mapbox.com](https://www.mapbox.com))
    and sign up for one.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个菜谱，我们将使用来自[第 3 章](68d3e400-24be-4757-ab79-5b395dd79f3c.xhtml)，*处理矢量数据 -
    基础*的航点数据集。参考菜谱中名为*处理 GPS 数据*的脚本，了解如何将 `.gpx` 文件轨迹导入到 PostGIS 中。你还需要一个 Mapbox 令牌；为此，请访问他们的网站([https://www.mapbox.com](https://www.mapbox.com))并注册一个。
- en: How to do it...
  id: totrans-437
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'To prepare the data for Mapbox''s GeoJSON format, export the table tracks from
    [Chapter 3](68d3e400-24be-4757-ab79-5b395dd79f3c.xhtml), *Working with Vector
    Data – The Basics* using `ogr2ogr` with the following code:'
  id: totrans-438
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了准备 Mapbox 的 GeoJSON 格式的数据，使用 `ogr2ogr` 从[第 3 章](68d3e400-24be-4757-ab79-5b395dd79f3c.xhtml)，*处理矢量数据
    - 基础*导出 tracks 表格，以下代码：
- en: '[PRE82]'
  id: totrans-439
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'Remove the `crs` definition line on the new `.json` with your favorite editor:'
  id: totrans-440
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用你喜欢的编辑器在新 `.json` 文件上删除 `crs` 定义行：
- en: '![](img/44c050ce-b50e-4725-96c5-cea5247a64c5.png)'
  id: totrans-441
  prefs: []
  type: TYPE_IMG
  zh: '![](img/44c050ce-b50e-4725-96c5-cea5247a64c5.png)'
- en: 'Go to your Mapbox account and upload in the Datasets menu the `tracks.json`
    file. After a successful upload, you will see the following message:'
  id: totrans-442
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往你的 Mapbox 账户，在数据集菜单中上传 `tracks.json` 文件。上传成功后，你将看到以下消息：
- en: '![](img/93df2e72-9f49-495c-a719-308c9219b476.png)'
  id: totrans-443
  prefs: []
  type: TYPE_IMG
  zh: '![](img/93df2e72-9f49-495c-a719-308c9219b476.png)'
- en: 'Create the dataset and export it to a tileset:'
  id: totrans-444
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建数据集并将其导出为瓦片集：
- en: '![](img/f8d5f46a-768a-439a-97f6-a552775ec5aa.png)'
  id: totrans-445
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f8d5f46a-768a-439a-97f6-a552775ec5aa.png)'
- en: 'Now, create a new style with the outdoors template:'
  id: totrans-446
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用户外模板创建一个新的样式：
- en: '![](img/50901ea0-7a5d-492c-8229-dc9cf0a9ca66.png)'
  id: totrans-447
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/50901ea0-7a5d-492c-8229-dc9cf0a9ca66.png)'
- en: Add the tracks layer and publish it. Note the style URL that you can use to
    share or further develop your map; copy it to use it in your code.
  id: totrans-448
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加轨道层并发布它。注意你可以使用的样式URL，你可以用它来分享或进一步开发你的地图；复制它以便在代码中使用。
- en: 'Now we are ready to create a mapbox.html file; add the following in the head
    section to use Mapbox JS and CSS libraries:'
  id: totrans-449
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们准备创建一个mapbox.html文件；在head部分添加以下内容以使用Mapbox JS和CSS库：
- en: '[PRE83]'
  id: totrans-450
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'Insert a `map` with your token and the style we''ve just created in the body:'
  id: totrans-451
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在正文插入一个`map`，使用你的令牌和我们刚刚创建的样式：
- en: '[PRE84]'
  id: totrans-452
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'That''s it, you can double-click and open the HTML with your favorite browser
    and the Mapbox API will serve your map:'
  id: totrans-453
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就这样，你可以双击并使用你喜欢的浏览器打开HTML文件，Mapbox API将为你提供地图：
- en: '![](img/b21495be-2867-4e35-87f6-48be916877f6.png)'
  id: totrans-454
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b21495be-2867-4e35-87f6-48be916877f6.png)'
- en: How it works...
  id: totrans-455
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: To quickly publish and visualize data in a webGIS, you can use the Mapbox API
    to create beautiful maps with your own data; you will have to keep a GeoJSON format
    and not exceed the offered bandwidth capacity. In this recipe, you've learned
    how to export your PostGIS data to publish it in Mapbox as a JS.
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 要快速发布和可视化webGIS中的数据，你可以使用Mapbox API使用你自己的数据创建美丽的地图；你将需要保持GeoJSON格式，并且不要超过提供的带宽容量。在这个菜谱中，你学习了如何将你的PostGIS数据导出，以便在Mapbox中以JS的形式发布。
