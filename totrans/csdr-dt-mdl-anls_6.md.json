["```py\n# -*- coding: utf-8 -*-\n# program: chapter06_001.py\n\n## import Cassandra driver library\nfrom cassandra.cluster import Cluster\n\n## function to create watchlist\ndef create_watchlist(ss):\n    ## create watchlist table if not exists\n    ss.execute('CREATE TABLE IF NOT EXISTS watchlist (' + \\\n               'watch_list_code varchar,' + \\\n               'symbol varchar,' + \\\n               'PRIMARY KEY (watch_list_code, symbol))')\n\n    ## insert AAPL, AMZN, and GS into watchlist\n    ss.execute(\"INSERT INTO watchlist (watch_list_code, \" + \\\n               \"symbol) VALUES ('WS01', 'AAPL')\")\n    ss.execute(\"INSERT INTO watchlist (watch_list_code, \" + \\\n               \"symbol) VALUES ('WS01', 'AMZN')\")\n    ss.execute(\"INSERT INTO watchlist (watch_list_code, \" + \\\n               \"symbol) VALUES ('WS01', 'GS')\")\n\n## create Cassandra instance\ncluster = Cluster()\n\n## establish Cassandra connection, using local default\nsession = cluster.connect()\n\n## use packtcdma keyspace\nsession.set_keyspace('packtcdma')\n\n## create watchlist table\ncreate_watchlist(session)\n\n## close Cassandra connection\ncluster.shutdown()\n```", "```py\n# -*- coding: utf-8 -*-\n# program: chapter06_002.py\n\n## import Cassandra driver library\nfrom cassandra.cluster import Cluster\n\n## function to create alertlist\ndef create_alertlist(ss):\n    ## execute CQL statement to create alertlist table if not exists\n    ss.execute('CREATE TABLE IF NOT EXISTS alertlist (' + \\\n               'symbol varchar,' + \\\n               'price_time timestamp,' + \\\n               'stock_name varchar,' + \\\n               'signal_price float,' + \\\n               'PRIMARY KEY (symbol, price_time))')\n\n## create Cassandra instance\ncluster = Cluster()\n\n## establish Cassandra connection, using local default\nsession = cluster.connect()\n\n## use packtcdma keyspace\nsession.set_keyspace('packtcdma')\n\n## create alertlist table\ncreate_alertlist(session)\n\n## close Cassandra connection\ncluster.shutdown()\n```", "```py\n# -*- coding: utf-8 -*-\n# program: chapter06_003.py\n\n## import Cassandra driver library\nfrom cassandra.cluster import Cluster\n\n## function to add stock_name column\ndef add_stockname_to_quote(ss):\n    ## add stock_name to quote\n    ss.execute('ALTER TABLE quote ' + \\\n               'ADD stock_name varchar')\n\n## create Cassandra instance\ncluster = Cluster()\n\n## establish Cassandra connection, using local default\nsession = cluster.connect()\n\n## use packtcdma keyspace\nsession.set_keyspace('packtcdma')\n\n## add stock_name column\nadd_stockname_to_quote(session)\n\n## close Cassandra connection\ncluster.shutdown()\n```", "```py\n# -*- coding: utf-8 -*-\n# program: chapter06_004.py\n\n## import Cassandra driver library\nfrom cassandra.cluster import Cluster\n\n## function to create alert_by_date table\ndef create_alertbydate(ss):\n    ## create alert_by_date table if not exists\n    ss.execute('CREATE TABLE IF NOT EXISTS alert_by_date (' + \\\n               'symbol varchar,' + \\\n               'price_time timestamp,' + \\\n               'stock_name varchar,' + \\\n               'signal_price float,' + \\\n               'PRIMARY KEY (price_time, symbol))')\n\n## create Cassandra instance\ncluster = Cluster()\n\n## establish Cassandra connection, using local default\nsession = cluster.connect()\n\n## use packtcdma keyspace\nsession.set_keyspace('packtcdma')\n\n## create alert_by_date table\ncreate_alertbydate(session)\n\n## close Cassandra connection\ncluster.shutdown()\n```", "```py\n# -*- coding: utf-8 -*-\n# program: chapter06_005.py\n\n## import Cassandra driver library\nfrom cassandra.cluster import Cluster\nfrom decimal import *\n\n## web is the shorthand alias of pandas.io.data\nimport pandas.io.data as web\nimport datetime\n\n## import BeautifulSoup and requests\nfrom bs4 import BeautifulSoup\nimport requests\n\n## function to insert historical data into table quote\n## ss: Cassandra session\n## sym: stock symbol\n## d: standardized DataFrame containing historical data\n## sn: stock name\ndef insert_quote(ss, sym, d, sn):\n    ## CQL to insert data, ? is the placeholder for parameters\n    insert_cql = \"INSERT INTO quote (\" + \\\n                 \"symbol, price_time, open_price, high_price,\" + \\\n                 \"low_price, close_price, volume, stock_name\" + \\\n                 \") VALUES (?, ?, ?, ?, ?, ?, ?, ?)\"\n    ## prepare the insert CQL as it will run repeatedly\n    insert_stmt = ss.prepare(insert_cql)\n\n    ## set decimal places to 4 digits\n    getcontext().prec = 4\n\n    ## loop thru the DataFrame and insert records\n    for index, row in d.iterrows():\n        ss.execute(insert_stmt, \\\n                   [sym, index, \\\n                   Decimal(row['open_price']), \\\n                   Decimal(row['high_price']), \\\n                   Decimal(row['low_price']), \\\n                   Decimal(row['close_price']), \\\n                   Decimal(row['volume']), \\\n                   sn])\n```", "```py\n## retrieve the historical daily stock quote from Yahoo! Finance\n## Parameters\n## sym: stock symbol\n## sd: start date\n## ed: end date\ndef collect_data(sym, sd, ed):\n    ## data is a DataFrame holding the daily stock quote\n    data = web.DataReader(sym, 'yahoo', sd, ed)\n    return data\n\n## transform received data into standardized format\n## Parameter\n## d: DataFrame containing Yahoo! Finance stock quote\ndef transform_yahoo(d):\n    ## drop extra column 'Adj Close'\n    d1 = d.drop(['Adj Close'], axis=1)\n\n    ## standardize the column names\n    ## rename index column to price_date\n    d1.index.names=['price_date']\n\n    ## rename the columns to match the respective columns\n    d1 = d1.rename(columns={'Open':'open_price', \\\n                            'High':'high_price', \\\n                            'Low':'low_price', \\\n                            'Close':'close_price', \\\n                            'Volume':'volume'})\n    return d1\n\n## function to retrieve watchlist\n## ss: Cassandra session\n## ws: watchlist code\ndef load_watchlist(ss, ws):\n    ## CQL to select data, ? is the placeholder for parameters\n    select_cql = \"SELECT symbol FROM watchlist \" + \\\n                 \"WHERE watch_list_code=?\"\n\n    ## prepare select CQL\n    select_stmt = ss.prepare(select_cql)\n\n    ## execute the select CQL\n    result = ss.execute(select_stmt, [ws])\n\n    ## initialize the stock array\n    stw = []\n\n    ## loop thru the query resultset to make up the DataFrame\n    for r in result:\n        stw.append(r.symbol)\n\n    return stw\n```", "```py\n## function to retrieve stock name from Yahoo!Finance\n## sym: stock symbol\ndef get_stock_name(sym):\n  url = 'http://finance.yahoo.com/q/hp?s=' + sym + \\\n  '+Historical+Prices'\n  r = requests.get(url)\n  soup = BeautifulSoup(r.text)\n  data = soup.findAll('h2')\n  return data[2].text\n\ndef testcase001():\n    ## create Cassandra instance\n    cluster = Cluster()\n\n    ## establish Cassandra connection, using local default\n    session = cluster.connect('packtcdma')\n\n    start_date = datetime.datetime(2012, 1, 1)\n    end_date = datetime.datetime(2014, 6, 28)\n\n    ## load the watchlist\n    stocks_watched = load_watchlist(session, \"WS01\")\n\n    ## iterate the watchlist\n    for symbol in stocks_watched:\n        ## get stock name\n        stock_name = get_stock_name(symbol)\n\n        ## collect data\n        data = collect_data(symbol, start_date, end_date)\n\n        ## transform Yahoo! Finance data\n        data = transform_yahoo(data)\n\n        ## insert historical data\n        insert_quote(session, symbol, data, stock_name)\n\n    ## close Cassandra connection\n    cluster.shutdown()\n\ntestcase001()\n```", "```py\n# -*- coding: utf-8 -*-\n# program: chapter06_006.py\n\n## import Cassandra driver library\nfrom cassandra.cluster import Cluster\n\nimport pandas as pd\nimport numpy as np\nimport datetime\n\n## import Cassandra BatchStatement library\nfrom cassandra.query import BatchStatement\nfrom decimal import *\n\n## function to insert historical data into table quote\n## ss: Cassandra session\n## sym: stock symbol\n## sd: start date\n## ed: end date\n## return a DataFrame of stock quote\ndef retrieve_data(ss, sym, sd, ed):\n    ## CQL to select data, ? is the placeholder for parameters\n    select_cql = \"SELECT * FROM quote WHERE symbol=? \" + \\\n                 \"AND price_time >= ? AND price_time <= ?\"\n\n    ## prepare select CQL\n    select_stmt = ss.prepare(select_cql)\n\n    ## execute the select CQL\n    result = ss.execute(select_stmt, [sym, sd, ed])\n\n    ## initialize an index array\n    idx = np.asarray([])\n\n    ## initialize an array for columns\n    cols = np.asarray([])\n\n    ## loop thru the query resultset to make up the DataFrame\n    for r in result:\n        idx = np.append(idx, [r.price_time])\n        cols = np.append(cols, [r.open_price, r.high_price, \\\n                         r.low_price, r.close_price, \\\n                         r.volume, r.stock_name])\n\n    ## reshape the 1-D array into a 2-D array for each day\n    cols = cols.reshape(idx.shape[0], 6)\n\n    ## convert the arrays into a pandas DataFrame\n    df = pd.DataFrame(cols, index=idx, \\\n                      columns=['open_price', 'high_price', \\\n                      'low_price', 'close_price', \\\n                      'volume', 'stock_name'])\n    return df\n```", "```py\n## function to compute a Simple Moving Average on a DataFrame\n## d: DataFrame\n## prd: period of SMA\n## return a DataFrame with an additional column of SMA\ndef sma(d, prd):\n    d['sma'] = pd.rolling_mean(d.close_price, prd)\n    return d\n\n## function to apply screening rule to generate buy signals\n## screening rule, Close > 10-Day SMA\n## d: DataFrame\n## return a DataFrame containing buy signals\ndef signal_close_higher_than_sma10(d):\n    return d[d.close_price > d.sma]\n\n## function to retrieve watchlist\n## ss: Cassandra session\n## ws: watchlist code\ndef load_watchlist(ss, ws):\n    ## CQL to select data, ? is the placeholder for parameters\n    select_cql = \"SELECT symbol FROM watchlist \" + \\\n                 \"WHERE watch_list_code=?\"\n\n    ## prepare select CQL\n    select_stmt = ss.prepare(select_cql)\n\n    ## execute the select CQL\n    result = ss.execute(select_stmt, [ws])\n\n    ## initialize the stock array\n    stw = []\n\n    ## loop thru the query resultset to make up the DataFrame\n    for r in result:\n        stw.append(r.symbol)\n\n    return stw\n\n## function to insert historical data into table quote\n## ss: Cassandra session\n## sym: stock symbol\n## d: standardized DataFrame containing historical data\n## sn: stock name\ndef insert_alert(ss, sym, sd, cp, sn):\n    ## CQL to insert data, ? is the placeholder for parameters\n    insert_cql1 = \"INSERT INTO alertlist (\" + \\\n                 \"symbol, price_time, signal_price, stock_name\" +\\\n                 \") VALUES (?, ?, ?, ?)\"\n\n    ## CQL to insert data, ? is the placeholder for parameters\n    insert_cql2 = \"INSERT INTO alert_by_date (\" + \\\n                 \"symbol, price_time, signal_price, stock_name\" +\\\n                 \") VALUES (?, ?, ?, ?)\"\n\n    ## prepare the insert CQL as it will run repeatedly\n    insert_stmt1 = ss.prepare(insert_cql1)\n    insert_stmt2 = ss.prepare(insert_cql2)\n\n    ## set decimal places to 4 digits\n    getcontext().prec = 4\n\n    ## begin a batch\n    batch = BatchStatement()\n\n    ## add insert statements into the batch\n    batch.add(insert_stmt1, [sym, sd, cp, sn])\n    batch.add(insert_stmt2, [sym, sd, cp, sn])\n\n    ## execute the batch\n    ss.execute(batch)\n\ndef testcase002():\n    ## create Cassandra instance\n    cluster = Cluster()\n\n    ## establish Cassandra connection, using local default\n    session = cluster.connect('packtcdma')\n\n    start_date = datetime.datetime(2012, 6, 28)\n    end_date = datetime.datetime(2012, 7, 28)\n\n    ## load the watch list\n    stocks_watched = load_watchlist(session, \"WS01\")\n\n    for symbol in stocks_watched:\n        ## retrieve data\n        data = retrieve_data(session, symbol, start_date, end_date)\n\n        ## compute 10-Day SMA\n        data = sma(data, 10)\n\n        ## generate the buy-and-hold signals\n        alerts = signal_close_higher_than_sma10(data)\n\n        ## save the alert list\n        for index, r in alerts.iterrows():\n            insert_alert(session, symbol, index, \\\n                         Decimal(r['close_price']), \\\n                         r['stock_name'])\n\n    ## close Cassandra connection\n    cluster.shutdown()\n\ntestcase002()\n```", "```py\n# -*- coding: utf-8 -*-\n# program: chapter06_007.py\n\n## import Cassandra driver library\nfrom cassandra.cluster import Cluster\n\nimport pandas as pd\nimport numpy as np\nimport datetime\n\n## execute CQL statement to retrieve rows of\n## How many alerts were generated on a particular stock over\n## a specified period of time?\ndef alert_over_daterange(ss, sym, sd, ed):\n    ## CQL to select data, ? is the placeholder for parameters\n    select_cql = \"SELECT * FROM alertlist WHERE symbol=? \" + \\\n                 \"AND price_time >= ? AND price_time <= ?\"\n\n    ## prepare select CQL\n    select_stmt = ss.prepare(select_cql)\n\n    ## execute the select CQL\n    result = ss.execute(select_stmt, [sym, sd, ed])\n\n     ## initialize an index array\n    idx = np.asarray([])\n\n    ## initialize an array for columns\n    cols = np.asarray([])\n\n    ## loop thru the query resultset to make up the DataFrame\n    for r in result:\n        idx = np.append(idx, [r.price_time])\n        cols = np.append(cols, [r.symbol, r.stock_name, \\\n                         r.signal_price])\n\n    ## reshape the 1-D array into a 2-D array for each day\n    cols = cols.reshape(idx.shape[0], 3)\n\n    ## convert the arrays into a pandas DataFrame\n    df = pd.DataFrame(cols, index=idx, \\\n                      columns=['symbol', 'stock_name', \\\n                      'signal_price'])\n    return df\n\ndef testcase001():\n    ## create Cassandra instance\n    cluster = Cluster()\n\n    ## establish Cassandra connection, using local default\n    session = cluster.connect()\n\n    ## use packtcdma keyspace\n    session.set_keyspace('packtcdma')\n\n    ## scan buy-and-hold signals for GS\n    ## over 1 month since 28-Jun-2012\n    symbol = 'GS'\n    start_date = datetime.datetime(2012, 6, 28)\n    end_date = datetime.datetime(2012, 7, 28)\n\n    ## retrieve alerts\n    alerts = alert_over_daterange(session, symbol, \\\n                                  start_date, end_date)\n\n    for index, r in alerts.iterrows():\n        print index.date(), '\\t', \\\n            r['symbol'], '\\t', \\\n            r['stock_name'], '\\t', \\\n            r['signal_price']\n\n    ## close Cassandra connection\n    cluster.shutdown()\n\ntestcase001()\n```", "```py\n# -*- coding: utf-8 -*-\n# program: chapter06_008.py\n\n## import Cassandra driver library\nfrom cassandra.cluster import Cluster\n\nimport pandas as pd\nimport numpy as np\nimport datetime\n\n## execute CQL statement to retrieve rows of\n## How many alerts were generated on a particular stock over\n## a specified period of time?\ndef alert_on_date(ss, dd):\n    ## CQL to select data, ? is the placeholder for parameters\n    select_cql = \"SELECT * FROM alert_by_date WHERE \" + \\\n                 \"price_time=?\"\n\n    ## prepare select CQL\n    select_stmt = ss.prepare(select_cql)\n\n    ## execute the select CQL\n    result = ss.execute(select_stmt, [dd])\n\n     ## initialize an index array\n    idx = np.asarray([])\n\n    ## initialize an array for columns\n    cols = np.asarray([])\n\n    ## loop thru the query resultset to make up the DataFrame\n    for r in result:\n        idx = np.append(idx, [r.symbol])\n        cols = np.append(cols, [r.stock_name, r.price_time, \\\n                         r.signal_price])\n\n    ## reshape the 1-D array into a 2-D array for each day\n    cols = cols.reshape(idx.shape[0], 3)\n\n    ## convert the arrays into a pandas DataFrame\n    df = pd.DataFrame(cols, index=idx, \\\n                      columns=['stock_name', 'price_time', \\\n                      'signal_price'])\n    return df\n\ndef testcase001():\n    ## create Cassandra instance\n    cluster = Cluster()\n\n    ## establish Cassandra connection, using local default\n    session = cluster.connect()\n\n    ## use packtcdma keyspace\n    session.set_keyspace('packtcdma')\n\n    ## scan buy-and-hold signals for GS over 1 month since 28-Jun-2012\n    on_date = datetime.datetime(2012, 7, 13)\n\n    ## retrieve alerts\n    alerts = alert_on_date(session, on_date)\n\n    ## print out alerts\n    for index, r in alerts.iterrows():\n        print index, '\\t', \\\n              r['stock_name'], '\\t', \\\n              r['signal_price']\n\n    ## close Cassandra connection\n    cluster.shutdown()\n\ntestcase001()\n```"]