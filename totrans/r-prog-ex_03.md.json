["```py\ndata <- adjust_data(prepare_data(\"./data_brexit_referendum.csv\"))\n\ndata_incomplete     <- data[!complete.cases(data), ]\ndata                <- data[ complete.cases(data), ]\nnumerical_variables <- get_numerical_variable_names(data)\n```", "```py\nset.seed(12345)\n\nn          <- nrow(data)\nsample     <- sample(1:n, size = round(0.7 * n), replace = FALSE)\ndata_train <- data[ sample, ]\ndata_test  <- data[-sample, ]\n```", "```py\nfit <- lm(Proportion ~ Students, data_train)\n```", "```py\nfit <- lm(Proportion ~ Students + Age_18to44, data_train)\n```", "```py\n# Manually\nfit <- lm(Proportion ~ ID + RegionName + NVotes + Leave + Residents + Households + White + \n          Owned + OwnedOutright + SocialRent + PrivateRent + Students + Unemp + UnempRate_EA + \n          HigherOccup + Density + Deprived + MultiDepriv + Age_18to44 + Age_45plus + NonWhite + \n          HighEducationLevel + LowEducationLevel, data_train)\n\n# R's shortcut\nfit <- lm(Proportion ~ ., data_train)\n```", "```py\nfit <- lm(Proportion ~ Residents + Households + White + Owned + OwnedOutright + SocialRent + PrivateRent + Students + Unemp + UnempRate_EA + HigherOccup + Density + Deprived + MultiDepriv + Age_18to44 + Age_45plus + NonWhite + HighEducationLevel + LowEducationLevel, data_train)\n```", "```py\nsummary(fit)\n#>\n#> Call:\n#> lm(formula = Proportion ~ Residents + Households + White + Owned +\n#>    OwnedOutright + SocialRent + PrivateRent + Students + Unemp +\n#>    UnempRate_EA + HigherOccup + Density + Deprived + MultiDepriv +\n#>    Age_18to44 + Age_45plus + NonWhite + HighEducationLevel +\n#>    LowEducationLevel, data = data_train)\n#>\n#> Residuals:\n#>      Min       1Q  Median      3Q     Max\n#> -0.21606 -0.03189 0.00155 0.03393 0.26753\n#>\n#> Coefficients:\n#>                     Estimate Std. Error  t value  Pr(>|t|)\n#> (Intercept)         3.30e-02   3.38e-01  0.10      0.92222\n#> Residents           7.17e-07   2.81e-06  0.26      0.79842\n#> Households         -4.93e-06   6.75e-06 -0.73      0.46570\n#> White               4.27e-03   7.23e-04  5.91      6.1e-09 ***\n#> Owned              -2.24e-03   3.40e-03 -0.66      0.51071\n#> OwnedOutright      -3.24e-03   1.08e-03 -2.99      0.00293 **\n#> SocialRent         -4.08e-03   3.60e-03 -1.13      0.25847\n#> PrivateRent        -3.17e-03   3.59e-03 -0.89      0.37629\n#> Students           -8.34e-04   8.67e-04 -0.96      0.33673\n#> Unemp               5.29e-02   1.06e-02  5.01      7.3e-07 ***\n#> UnempRate_EA       -3.13e-02   6.74e-03 -4.65      4.1e-06 ***\n#> HigherOccup         5.21e-03   1.24e-03  4.21      2.9e-05 ***\n#> Density            -4.84e-04   1.18e-04 -4.11      4.6e-05 ***\n#> Deprived            5.10e-03   1.52e-03  3.35      0.00087 ***\n#> MultiDepriv        -6.26e-03   1.67e-03 -3.75      0.00019 ***\n#> Age_18to44          3.46e-03   1.36e-03  2.55      0.01117 *\n#> Age_45plus          4.78e-03   1.27e-03  3.75      0.00019 ***\n#> NonWhite            2.59e-03   4.47e-04  5.80      1.1e-08 ***\n#> HighEducationLevel -1.14e-02   1.14e-03 -9.93      < 2e-16 ***\n#> LowEducationLevel   4.92e-03   1.28e-03  3.85      0.00013 ***\n#> ---\n#> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#> Residual standard error: 0.0523 on 542 degrees of freedom\n#> Multiple R-squared: 0.868, Adjusted R-squared: 0.863\n#> F-statistic: 187 on 19 and 542 DF, p-value: <2e-16\n\n```", "```py\npredictions <- predict(fit, data_test)\n```", "```py\nplot_scatterplot(\n    data = data,\n    var_x = \"Age_18to44\",\n    var_y = \"Proportion\",\n    var_color = FALSE,\n    regression = TRUE\n)\nplot_scatterplot(\n    data = data,\n    var_x = \"Students\",\n    var_y = \"Proportion\",\n    var_color = FALSE,\n    regression = TRUE\n)\n```", "```py\nsave_png <- function(data, variable, save_to, function_to_create_image) {\n    if (not_empty(save_to)) png(save_to)\n    function_to_create_image(data, variable)\n    if (not_empty(save_to)) dev.off()\n}\n```", "```py\nvariable_histogram <- function(data, variable, save_to = \"\") {\n    save_png(data, variable, save_to, histogram)\n}\n\nhistogram <- function(data, variable) {\n    hist(data[, variable], main = \"Histogram\", xlab = \"Proportion\")\n}\n\nvariable_qqplot <- function(data, variable, save_to = \"\") {\n    save_png(data, variable, save_to, quantile_quantile)\n}\n\nquantile_quantile <- function(data, variable) {\n    qqnorm(data[, variable], main = \"Normal QQ-Plot for Proportion\")\n    qqline(data[, variable])\n}\n```", "```py\nquantile_quantile <- function(data, variable) {\n    qqnorm(data[, variable], main = \"Normal QQ-Plot for Proportion\")\n    qqline(data[, variable])\n}\n```", "```py\nvariable_histogram(data = data, variable = \"Proportion\")\nvariable_qqplot(data = data, variable = \"Proportion\")\n```", "```py\nfit_plot <- function(fit, save_to = \"\") {\n    if (not_empty(save_to)) png(save_to)\n    par(mfrow = c(2, 2))\n    plot(fit)\n    if (not_empty(save_to)) dev.off()\n}\n```", "```py\nfit_plot(fit)\n```", "```py\nlibrary(corrplot)\ncorrplot(corr = cor(data[, numerical_variables]), tl.col = \"black\", tl.cex = 0.6)\n```", "```py\nscore_proportions <- function(data_test, predictions) {\n    # se := standard errors\n    se <- predictions$se.fit\n    real <- data_test$Proportion\n    predicted <- predictions$fit\n    return(sum((real - predicted)^2 / se^2) / nrow(data))\n}\n```", "```py\nscore_votes <- function(data_test, predictions) {\n    real <- data_test$Vote\n    predicted <- ifelse(predictions$fit > 0.5, \"Leave\", \"Remain\")\n    return(sum(real == predicted))\n}\n```", "```py\npredictions <- predict(fit, data_test, se.fit = TRUE)\n\nscore_proportions(data_test, predictions)\n#> [1] 10.66\nscore_votes(data_test, predictions)\n#> [1] 216\nnrow(data_test)\n#> [1] 241\n```", "```py\nlibrary(progress)\n\ngenerate_combinations_unvectorized <- function(variables, min_percentage, max_percentage) {\n    variables[[\"Proportion\"]] <- FALSE\n    variables                 <- names(variables[variables == TRUE])\n    n                         <- length(variables)\n    n_min                     <- floor(n * min_percentage)\n    n_max                     <- ceiling(n * max_percentage)\n    all_combinations          <- NULL\n\n    progress_bar <- progress_bar$new(\n        format = \"Progress [:bar] :percent ETA: :eta\",\n        total = length(n_min:n_max)\n    )\n\n    for (k in n_min:n_max) {\n        progress_bar$tick()\n        combinations <- combn(variables, k)\n        for (column in 1:ncol(combinations)) {\n            new_list <- list(combinations[, column])\n            all_combinations <- c(all_combinations, list(new_list))\n        }\n    }\n    return(unlist(all_combinations, recursive = FALSE))\n}\n```", "```py\ncombinations <- generate_combinations_unvectorized(\n    numerical_variables, 0.9, 1.0\n)\n\ncombinations\n[[1]]\n [1] \"Residents\"     \"Households\"    \"White\"         \"Owned\"\n [5] \"OwnedOutright\" \"SocialRent\"    \"PrivateRent\"   \"Students\"\n [9] \"Unemp\"         \"UnempRate_EA\"  \"HigherOccup\"   \"Density\"\n[13] \"Deprived\"      \"MultiDepriv\"   \"Age_18to44\"    \"Age_45plus\"\n[17] \"NonWhite\"\n\n...\n\n[[191]]\n [1] \"Residents\"          \"Households\"         \"White\"\n [4] \"Owned\"              \"OwnedOutright\"      \"SocialRent\"\n [7] \"PrivateRent\"        \"Students\"           \"Unemp\"\n[10] \"UnempRate_EA\"       \"HigherOccup\"        \"Density\"\n[13] \"Deprived\"           \"MultiDepriv\"        \"Age_18to44\"\n[16] \"Age_45plus\"         \"NonWhite\"           \"HighEducationLevel\"\n[19] \"LowEducationLevel\"\n```", "```py\nfind_best_fit <- function(measure, data_train, data_test, combinations) {\n    n_cases <- length(combinations)\n    progress_bar <- progress_bar$new(\n        format = \"Progress [:bar] :percent ETA: :eta\",\n        total = n_cases\n    )\n    scores <- lapply(1:n_cases, function(i) {\n        progress_bar$tick()\n        results <- compute_model_and_fit(combinations[[i]], data_train)\n        score <- compute_score(measure, results[[\"fit\"]], data_test)\n        return(score)\n    })\n    i <- ifelse(measure == \"Proportion\", which.min(scores), which.max(scores))\n    best_results <- compute_model_and_fit(combinations[[i]], data_train)\n    best_score <- compute_score(measure, best_results[[\"fit\"]], data_test)\n    print_best_model_info(i, best_results[[\"model\"]], best_score, measure)\n    return(best_results[[\"fit\"]])\n}\n```", "```py\ncompute_model_and_fit <- function(combination, data_train) {\n    model <- generate_model(combination)\n    return(list(model = model, fit = lm(model, data_train)))\n}\n\ngenerate_model <- function(combination) {\n    sum <- paste(combination, collapse = \" + \")\n    return(formula(paste(\"Proportion\", \"~\", sum)))\n}\n```", "```py\ncompute_score <- function(measure, fit, data_test) {\n    if (measure == \"Proportion\") {\n        score <- score_proportions\n    } else {\n        score <- score_votes\n    }\n    predictions <- predict(fit, data_test, se.fit = TRUE)\n    return(score(data_test, predictions))\n}\n```", "```py\nprint_best_model_info <- function(i, model, best_score, measure){\n    print(\"*************************************\")\n    print(paste(\"Best model number:\", i))\n    print(paste(\"Best score:       \", best_score))\n    print(paste(\"Score measure:    \", measure))\n    print(\"Best model:\")\n    print(strsplit(toString(model), \"\\\\+\"))\n    print(\"*************************************\")\n}\n```", "```py\nbest_lm_fit_by_proportions <- find_best_fit(\n    measure = \"Proportion\",\n    data_train = data_train,\n    data_test = data_test,\n    combinations = combinations\n)\n#> [1] \"*************************************\"\n#> [1] \"Best model number: 3\"\n#> [1] \"Best score:        10.2362983528259\"\n#> [1] \"Score measure:     Proportion\"\n#> [1] \"Best model:\"\n#> [[1]]\n#>  [1] \"~, Proportion, Residents \" \" Households \"\n#>  [3] \" White \"                   \" Owned \"\n#>  [5] \" OwnedOutright \"           \" SocialRent \"\n#>  [7] \" PrivateRent \"             \" Students \"\n#>  [9] \" Unemp \"                   \" UnempRate_EA \"\n#> [11] \" HigherOccup \"             \" Density \"\n#> [13] \" Deprived \"                \" MultiDepriv \"\n#> [15] \" Age_18to44 \"              \" Age_45plus \"\n#> [17] \" LowEducationLevel\"\n#> [1] \"*************************************\"\n\n```", "```py\nbest_lm_fit_by_votes <- find_best_fit(\n    measure = \"Vote\",\n    data_train = data_train,\n    data_test = data_test,\n    combinations = combinations\n)\n#> [1] \"*************************************\"\n#> [1] \"Best model number: 7\"\n#> [1] \"Best score:        220\"\n#> [1] \"Score measure:     Vote\"\n#> [1] \"Best model:\"\n#> [[1]]\n#>  [1] \"~, Proportion, Residents \" \" Households \"\n#>  [3] \" White \"                   \" Owned \"\n#>  [5] \" OwnedOutright \"           \" SocialRent \"\n#>  [7] \" PrivateRent \"             \" Students \"\n#>  [9] \" Unemp \"                   \" UnempRate_EA \"\n#> [11] \" HigherOccup \"             \" Density \"\n#> [13] \" Deprived \"                \" MultiDepriv \"\n#> [15] \" Age_45plus \"              \" NonWhite \"104\n#> [17] \" HighEducationLevel\"\n#> [1] \"*************************************\"\n\n```", "```py\npredictions <- predict(best_lm_fit_by_votes, data_incomplete)\n\npredictions\n#>    804    805    806    807    808    809    810    811    812    813\n#> 0.6845 0.6238 0.5286 0.4092 0.5236 0.6727 0.6322 0.6723 0.6891 0.6004\n#>    814    815    816    817    818    819    820    821    822    823\n#> 0.6426 0.5854 0.6966 0.6073 0.4869 0.5974 0.5611 0.4784 0.5534 0.6151\n(Truncated output)\n\n```"]