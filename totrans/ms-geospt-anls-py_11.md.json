["```py\n C:\\Python36\\Scripts>pip -V\n pip 9.0.1 from c:\\python36\\lib\\site-packages (python 3.6)\n```", "```py\nC:\\Python36\\Scripts>pip install flask\n```", "```py\nC:\\Python36\\Scripts>pip install flask-sqlalchemy\n```", "```py\nC:\\Python36\\Scripts>pip install GeoAlchemy2\n```", "```py\nC:\\Python36\\Scripts>pip install flask-wtf\n```", "```py\nC:\\Python36\\Scripts>pip install psycopg2\n```", "```py\nC:\\Python36\\Scripts>pip install sqlalchemy-utils\n```", "```py\nC:\\Python36\\Scripts>pip install pyshp\n```", "```py\nC:\\Python36\\Scripts>pip install pygeoif\n```", "```py\nfrom sqlalchemy import create_engine\nfrom sqlalchemy_utils import database_exists, create_database,\n                             drop_database\nfrom sqlalchemy import Column, Integer, String, ForeignKey, Float\nfrom sqlalchemy.orm import relationship\nfrom geoalchemy2 import Geometry\nfrom sqlalchemy.ext.declarative import declarative_base\n```", "```py\nconn_string = '{DBtype}://{user}:{pword}@{instancehost}:{port}/{database}'\nengine = create_engine(conn_string, echo=True)\n```", "```py\nconnstring = 'postgresql://postgres:bond007@localhost:5432/chapter11'\nengine = create_engine(connstring, echo=True)\n```", "```py\nconn_string ='postgresql://{user}:{pword}@localhost:5432/chapter11'\nengine = create_engine(conn_string, echo=True)\n```", "```py\n# Uncomment the line below if you need to recreate the database.\n#drop_database(engine.url)\n```", "```py\n# Check to ensure that the database doesn't exist\n# If it doesn't, create it and generate the PostGIS extention and tables\nif not database_exists(engine.url):\n    create_database(engine.url)\n```", "```py\n    # Create a direct connection to the database using the engine.\n    # This will allow the new database to use the PostGIS extension.\n    conn = engine.connect()\n    conn.execute(\"commit\")\n    try:\n         conn.execute(\"CREATE EXTENSION postgis\")\n     except Exception as e:\n         print(e)\n         print(\"extension postgis already exists\")\n     conn.close()\n```", "```py\n    # Define the model Base\n    Base = declarative_base()\n```", "```py\n    # Define the Arena class, which will model the Arena database table\n    class Arena(Base):\n        __tablename__ = 'arena'\n       id = Column(Integer, primary_key=True)\n       name = Column(String)\n       longitude = Column(Float)\n       latitude = Column(Float)\n       geom = Column(Geometry(geometry_type='POINT', srid=4326))\n```", "```py\n    # Define the County class\n    class County(Base):\n        __tablename__ = 'county'\n        id = Column(Integer, primary_key=True)\n        name = Column(String)\n        state_id = Column(Integer, ForeignKey('state.id'))\n        state_ref = relationship(\"State\",backref='county')\n        geom =   Column(Geometry(geometry_type='MULTIPOLYGON',srid=4326))\n\n    # Define the District class\n    class District(Base):\n        __tablename__ = 'district'\n        id = Column(Integer, primary_key=True)\n        district = Column(String)\n        name = Column(String)\n        state_id = Column(Integer, ForeignKey('state.id'))\n        state_ref = relationship(\"State\",backref='district')\n        geom = Column(Geometry(geometry_type='MULTIPOLYGON',srid=4326))\n\n```", "```py\n    # Define the State class\n    class State(Base):\n        __tablename__ = 'state'\n        id = Column(Integer, primary_key=True)\n        name = Column(String)\n        statefips = Column(String)\n        stpostal = Column(String)\n        counties = relationship('County', backref='state')\n        districts = relationship('District', backref='state')\n        geom =         \n        Column(Geometry(geometry_type='MULTIPOLYGON',srid=4326))\n```", "```py\n    # Generate the State table from the State class.\n    # If it already exists, drop it and regenerate it\n    try:\n        State.__table__.create(engine)\n    except:\n        State.__table__.drop(engine)\n        State.__table__.create(engine)\n```", "```py\n    Base.metadata.create_all(engine)\n```", "```py\n# The pyshapefile module is used to read shapefiles and\n# the pygeoif module is used to convert between geometry types\nimport shapefile\nimport pygeoif\n```", "```py\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy import Column, Integer, String, ForeignKey, Float\nfrom sqlalchemy.orm import sessionmaker\nfrom sqlalchemy.orm import relationship\n```", "```py\n# The Geometry columns from GeoAlchemy2 extend the SQLAlchemy ORM \nfrom geoalchemy2 import Geometry\n```", "```py\n# The built-in Tkinter GUI module allows for file dialogs\nfrom tkinter import filedialog\nfrom tkinter import Tk\n```", "```py\n# Connect to the database called chapter11 using SQLAlchemy functions\nconn_string = 'postgresql://postgres:password@localhost/chapter11'\nengine = create_engine(conn_string)\nSession = sessionmaker(bind=engine)\nsession = Session()\n```", "```py\n# Initiate the Tkinter module and withdraw the console it generates\nroot = Tk()\nroot.withdraw()\n```", "```py\n# Navigate to the Arena shapefile using the Tkinter file dialog\nroot.arenafile = filedialog.askopenfilename(initialdir = \"/\",\n                              title = \"Select Arena Shapefile\",\n                              filetypes = ((\"shapefiles\",\"*.shp\"),\n                              (\"all files\", \"*.*\")))\n```", "```py\n# Read the Arena shapefile using the Reader class of the pyshp module\nimport shapefile\narena_shapefile = shapefile.Reader(root.arenafile)\narena_shapes = arena_shapefile.shapes()\narena_records = arena_shapefile.records()\n```", "```py\n# Iterate through the Arena data read from the shapefile\nfor count, record in enumerate(arena_records):\n    arena = Arena()\n    arena.name = record[6]\n    print(arena.name)\n    point = arena_shapes[count].points[0]\n    arena.longitude = point[0]\n    arena.latitude = point[1]\n    arena.geom = 'SRID=4326;POINT({0} {1})'.format(point[0],     \n    point[1])\n session.add(arena)\nsession.commit()\n```", "```py\n# Iterate through the State data read from the shapefile\nfor count, record in enumerate(state_records):\n    state = State()\n    state.name = record[1]\n    state.statefips = record[0]\n    state.stpostal = record[2]\n    state_geo = state_shapes[count]\n gshape =     \n    pygeoif.MultiPolygon(pygeoif.geometry.as_shape(state_geo))\n state.geom = 'SRID=4326;{0}'.format(gshape.wkt)\n    session.add(state)\n    if count % 10 == 0:\n session.commit()\nsession.commit()\n```", "```py\n# This uses the STFIPS data to query the State table and find the state\nfor count, record in enumerate(district_records):\n    district = District()\n    district.district = record[0]\n    district.name = record[1]\n    state = session.query(State).filter_by(statefips=record[4]).first()\n    district.state_id = state.id\n    dist_geo = district_shapes[count]\n\n   gshape=pygeoif.MultiPolygon(pygeoif.geometry.as_shape(dist_geo))\n    district.geom = 'SRID=4326;{0}'.format(gshape.wkt)\n    session.add(district)\n    if count % 50 == 0:\n        session.commit()\nsession.commit()\n```", "```py\n session.close()\n engine.dispose()\n```", "```py\nfrom application import app\napp.run()\n```", "```py\nimport flask\napp = flask.Flask(__name__)\nconn_string = 'postgresql://postgres:password@localhost:5432/chapter11'\napp.config['SQLALCHEMY_DATABASE_URI'] = conn_string \napp.config['SECRET_KEY'] = \"SECRET_KEY\"\napp.config['DEBUG'] = True\nimport application.views\n```", "```py\nfrom application import app\n# The database connections and session management are managed with SQLAlchemy functions\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy import Column, Integer, String, ForeignKey, Float\nfrom sqlalchemy.orm import sessionmaker\nfrom sqlalchemy.orm import relationship\nfrom geoalchemy2 import Geometry\nengine = create_engine(app.config['SQLALCHEMY_DATABASE_URI'])\nSession = sessionmaker(bind=engine)\nsession = Session()\nBase = declarative_base()\n```", "```py\nfrom flask_wtf import FlaskForm\nfrom wtforms import SelectField\nclass ArenaForm(FlaskForm):\n    description  = \"Use the dropdown to select an arena.\"\n    selections = SelectField('Select an Arena',choices=[])\n```", "```py\nfrom application import app\nfrom flask import render_template,jsonify, redirect, url_for, request\nfrom .forms import * \nfrom .models import *\n```", "```py\n@app.route('/', methods=[\"GET\"])\ndef home():\n return redirect(url_for('arenas'))\n```", "```py\n@app.route('/arenas', methods=[\"GET\",\"POST\"])\ndef arenas():\n    form = ArenaForm(request.form)\n    arenas = session.query(Arena).all()\n    form.selections.choices = [(arena.id, \n                                arena.name) for arena in arenas]\n    form.popup = \"Select an Arena\"\n    form.latitude = 38.89517\n    form.longitude = -77.03682    \n    if request.method == \"POST\":\n        arena_id = form.selections.data\n        arena = session.query(Arena).get(arena_id)\n        form.longitude = round(arena.longitude,4)\n        form.latitude = round(arena.latitude,4)\n        county=session.query(County).filter(\n                        County.geom.ST_Contains(arena.geom)).first()\n        if county != None:\n            district=session.query(District).filter(\n                       District.geom.ST_Intersects(arena.geom)).first()\n            state = county.state_ref\n            form.popup = \"\"\"The {0} is located at {4}, {5}, which is in \n            {1} County, {3}, and in {3} Congressional District         \n            {2}.\"\"\".format(arena.name,county.name, district.district, \n            state.name,                                          \n            form.longitude, form.latitude)\n\n        else:\n                 form.popup = \"\"\"The county, district, and state could                                                             \n                 not be located using point in polygon analysis\"\"\"\n\n        return render_template('index.html',form=form)\n    return render_template('index.html',form=form)\n```", "```py\n@app.route('/arenas', methods=[\"GET\",\"POST\"])\ndef arenas():\n```", "```py\n    form = ArenaForm(request.form)\n    arenas = session.query(Arena).all()\n    form.selections.choices = [(arena.id, \n                                arena.name) for arena in arenas]\n    form.popup = \"Select an Arena\"\n    form.latitude = 38.89517\n    form.longitude = -77.03682  \n```", "```py\nif request.method == \"POST\":\n```", "```py\nreturn render_template('index.html',form=form)\n```", "```py\n  if request.method == \"POST\":\n       arena_id = form.selections.data\n       arena = session.query(Arena).get(arena_id)\n       form.longitude = round(arena.longitude,4)\n       form.latitude = round(arena.latitude,4)\n```", "```py\n        county=session.query(County).filter(\n                        County.geom.ST_Contains(arena.geom)).first()\n        if county != None:\n            district=session.query(District).filter(\n                       District.geom.ST_Intersects(arena.geom)).first()\n```", "```py\n        state = county.state_ref\n```", "```py\n    return render_template('index.html',form=form)\n```", "```py\n var themap = L.map('map').setView([{{form.latitude}},                                                   {{form.longitude}}], 13);\n```", "```py\n  L.marker([{{form.latitude}},{{form.longitude}}]).addTo(themap)\n    .bindPopup(\"{{form.popup}}\").openPopup();\n```", "```py\n  <form method=\"post\" class=\"form\">\n    <h3>{{form.description}}</h3>\n    {{form.selections(class_='form-control',placeholder=\"\")}}\n    <br>\n    <input type=\"submit\" value=\"Find Data\">\n  </form>\n```", "```py\nC:\\Python36>python C:\\GeospatialPy3\\Chapter11\\Scripts\\arenaapp\\app.py\n```"]