- en: Chapter 9. Unsupervised Learning with MLlib
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。使用MLlib的无监督学习
- en: This chapter will cover how we can do unsupervised learning using MLlib, Spark's
    machine learning library.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍如何使用MLlib进行无监督学习，MLlib是Spark的机器学习库。
- en: 'This chapter is divided into the following recipes:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章分为以下食谱：
- en: Clustering using k-means
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用k-means进行聚类
- en: Dimensionality reduction with principal component analysis
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主成分分析进行降维
- en: Dimensionality reduction with singular value decomposition
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用奇异值分解进行降维
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: 'The following is Wikipedia''s definition of unsupervised learning:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是维基百科对无监督学习的定义：
- en: '*"In machine learning, the problem of unsupervised learning is that of trying
    to find hidden structure in unlabeled data."*'
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*"在机器学习中，无监督学习的问题在于试图在未标记的数据中找到隐藏的结构。"*'
- en: 'In contrast to supervised learning where we have labeled data to train an algorithm,
    in unsupervised learning we ask the algorithm to find a structure on its own.
    Let''s take a look at the following sample dataset:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 与有监督学习不同，在有监督学习中，我们有标记数据来训练算法，在无监督学习中，我们要求算法自己找到结构。让我们看看以下示例数据集：
- en: '![Introduction](img/3056_09_01.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![介绍](img/3056_09_01.jpg)'
- en: 'As you can see from the preceding graph, the data points are forming two clusters
    as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如前图所示，数据点正在形成以下两个簇：
- en: '![Introduction](img/3056_09_02.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![介绍](img/3056_09_02.jpg)'
- en: In fact, clustering is the most common type of unsupervised learning algorithm.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，聚类是最常见的无监督学习算法。
- en: Clustering using k-means
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用k-means进行聚类
- en: Cluster analysis or clustering is the process of grouping data into multiple
    groups so that the data in one group is similar to the data in other groups.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 聚类分析或聚类是将数据分组到多个组的过程，使得一个组中的数据与其他组中的数据相似。
- en: 'The following are a few examples where clustering is used:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些聚类应用的例子：
- en: '**Market segmentation**: Dividing the target market into multiple segments
    so that the needs of each segment can be served better'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**市场细分**：将目标市场细分为多个细分市场，以便更好地满足每个细分市场的需求'
- en: '**Social network analysis**: Finding a coherent group of people in the social
    network for ad targeting through a social networking site such as Facebook'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**社交网络分析**：在社交网络中找到一组有组织的人群，通过社交网站如Facebook进行广告定位'
- en: '**Data center computing clusters**: Putting a set of computers together to
    improve performance'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据中心计算集群**：将一组计算机组合起来以提高性能'
- en: '**Astronomical data analysis**: Understanding astronomical data and events
    such as galaxy formations'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**天文数据分析**：理解天文数据以及如星系形成的事件'
- en: '**Real estate**: Identifying neighborhoods based on similar features'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**房地产**：根据相似特征识别社区'
- en: '**Text analysis**: Dividing text documents, such as novels or essays, into
    genres'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文本分析**：将小说或论文等文本文档分为不同类型'
- en: 'The k-means algorithm is best illustrated using imagery, so let''s look at
    our sample figure again:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: k-means算法最好通过图像来展示，让我们再次看看我们的示例图：
- en: '![Clustering using k-means](img/3056_09_01.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![使用k-means进行聚类](img/3056_09_01.jpg)'
- en: 'The first step in k-means is to randomly select two points called **cluster
    centroids**:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: k-means的第一步是随机选择两个称为**簇质心**的点：
- en: '![Clustering using k-means](img/3056_09_03.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![使用k-means进行聚类](img/3056_09_03.jpg)'
- en: 'The k-means algorithm is an iterative algorithm and works in two steps:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: k-means算法是一个迭代算法，分为两个步骤：
- en: '**Cluster assignment step**: This algorithm will go through each data point
    and, depending upon which centroid it is nearer to, it will be assigned that centroid
    and, in turn, the cluster it represents'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**簇分配步骤**：此算法将遍历每个数据点，根据它更接近哪个质心，将其分配给该质心，进而分配给它所代表的簇'
- en: '**Move centroid step**: This algorithm will take each centroid and move it
    to the mean of the data points in the cluster'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**移动质心步骤**：此算法将每个质心移动到簇中数据点的平均值'
- en: 'Let''s see how our data looks after the cluster assignment:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看聚类分配后我们的数据看起来如何：
- en: '![Clustering using k-means](img/3056_09_04.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![使用k-means进行聚类](img/3056_09_04.jpg)'
- en: 'Now let''s move the cluster centroids to the mean value of the data points
    in a cluster, as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们将簇质心移动到簇中数据点的平均值，如下所示：
- en: '![Clustering using k-means](img/3056_09_05.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![使用k-means进行聚类](img/3056_09_05.jpg)'
- en: In this case, one iteration is enough and further iterations will not move the
    cluster centroids. For most real data, multiple iterations are required to move
    the centroid to the final position.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，一次迭代就足够了，进一步的迭代不会移动聚类中心。对于大多数真实数据，需要多次迭代才能将中心移动到最终位置。
- en: The k-means algorithm takes a number of clusters as input.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: k-means 算法接受多个聚类作为输入。
- en: Getting ready
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中
- en: 'Let''s use some different housing data from the City of Saratoga, CA. This
    time, we are going to take lot size and house price:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用来自加利福尼亚州萨拉托加市的不同的住房数据。这次，我们将使用占地面积和房屋价格：
- en: '| Lot size | House price (in $1,000) |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| 占地面积 | 房屋价格（以 1000 美元为单位） |'
- en: '| --- | --- |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| 12839 | 2405 |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| 12839 | 2405 |'
- en: '| 10000 | 2200 |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| 10000 | 2200 |'
- en: '| 8040 | 1400 |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| 8040 | 1400 |'
- en: '| 13104 | 1800 |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| 13104 | 1800 |'
- en: '| 10000 | 2351 |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| 10000 | 2351 |'
- en: '| 3049 | 795 |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| 3049 | 795 |'
- en: '| 38768 | 2725 |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| 38768 | 2725 |'
- en: '| 16250 | 2150 |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| 16250 | 2150 |'
- en: '| 43026 | 2724 |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| 43026 | 2724 |'
- en: '| 44431 | 2675 |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| 44431 | 2675 |'
- en: '| 40000 | 2930 |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| 40000 | 2930 |'
- en: '| 1260 | 870 |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| 1260 | 870 |'
- en: '| 15000 | 2210 |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| 15000 | 2210'
- en: '| 10032 | 1145 |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| 10032 | 1145 |'
- en: '| 12420 | 2419 |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| 12420 | 2419 |'
- en: '| 69696 | 2750 |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| 69696 | 2750 |'
- en: '| 12600 | 2035 |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| 12600 | 2035 |'
- en: '| 10240 | 1150 |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| 10240 | 1150 |'
- en: '| 876 | 665 |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| 876 | 665 |'
- en: '| 8125 | 1430 |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| 8125 | 1430 |'
- en: '| 11792 | 1920 |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| 11792 | 1920 |'
- en: '| 1512 | 1230 |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| 1512 | 1230 |'
- en: '| 1276 | 975 |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| 1276 | 975 |'
- en: '| 67518 | 2400 |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| 67518 | 2400 |'
- en: '| 9810 | 1725 |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| 9810 | 1725 |'
- en: '| 6324 | 2300 |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| 6324 | 2300 |'
- en: '| 12510 | 1700 |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| 12510 | 1700 |'
- en: '| 15616 | 1915 |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| 15616 | 1915 |'
- en: '| 15476 | 2278 |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| 15476 | 2278 |'
- en: '| 13390 | 2497.5 |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| 13390 | 2497.5 |'
- en: '| 1158 | 725 |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| 1158 | 725 |'
- en: '| 2000 | 870 |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| 2000 | 870 |'
- en: '| 2614 | 730 |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| 2614 | 730 |'
- en: '| 13433 | 2050 |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| 13433 | 2050 |'
- en: '| 12500 | 3330 |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| 12500 | 3330 |'
- en: '| 15750 | 1120 |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| 15750 | 1120 |'
- en: '| 13996 | 4100 |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| 13996 | 4100 |'
- en: '| 10450 | 1655 |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| 10450 | 1655 |'
- en: '| 7500 | 1550 |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| 7500 | 1550 |'
- en: '| 12125 | 2100 |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| 12125 | 2100 |'
- en: '| 14500 | 2100 |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| 14500 | 2100 |'
- en: '| 10000 | 1175 |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| 10000 | 1175 |'
- en: '| 10019 | 2047.5 |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| 10019 | 2047.5 |'
- en: '| 48787 | 3998 |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| 48787 | 3998 |'
- en: '| 53579 | 2688 |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| 53579 | 2688 |'
- en: '| 10788 | 2251 |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| 10788 | 2251 |'
- en: '| 11865 | 1906 |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| 11865 | 1906 |'
- en: 'Let''s convert this data into a **comma-separated value** (**CSV**) file called
    `saratoga.c` `sv` and draw it as a scatter plot:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将这些数据转换为名为 `saratoga.c` 的 **逗号分隔值** (**CSV**) 文件，并将其绘制成散点图：
- en: '![Getting ready](img/3056_09_06.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![准备中](img/3056_09_06.jpg)'
- en: 'Finding a number of clusters is a tricky task. Here, we have the advantage
    of visual inspection, which is not available for data on hyperplanes (more than
    three dimensions). Let''s roughly divide the data into four clusters as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 找到合适的聚类数量是一个棘手的问题。在这里，我们有视觉检查的优势，这在超平面（超过三个维度）的数据中是不存在的。让我们大致将数据分为四个聚类，如下所示：
- en: '![Getting ready](img/3056_09_07.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![准备中](img/3056_09_07.jpg)'
- en: We will run the k-means algorithm to do the same and see how close our results
    come.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将运行 k-means 算法来完成同样的任务，并看看我们的结果有多接近。
- en: How to do it…
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'Load `sarataga.csv` to HDFS:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `saratoga.csv` 加载到 HDFS：
- en: '[PRE0]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Start the Spark shell:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 Spark shell：
- en: '[PRE1]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Import statistics and related classes:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入统计和相关类：
- en: '[PRE2]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Load `saratoga.csv` as an RDD:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `saratoga.csv` 加载为 RDD：
- en: '[PRE3]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Transform the data into an RDD of dense vectors:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将数据转换为密集向量的 RDD：
- en: '[PRE4]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Train the model for four clusters and five iterations:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 训练模型以四个聚类和五个迭代：
- en: '[PRE5]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Collect `parsedData` as a local scala collection:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `parsedData` 收集为本地 Scala 集合：
- en: '[PRE6]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Predict the cluster for the 0th element:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 预测第 0 个元素的聚类：
- en: '[PRE7]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now let''s compare the cluster assignments by k-means versus the ones we have
    done individually. The k-means algorithm gives the cluster IDs starting from 0\.
    Once you inspect the data, you find out the following mapping between the A to
    D cluster IDs we gave versus k-means: A=>3, B=>1, C=>0, D=>2.'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们比较 k-means 算法与我们所做的单个聚类分配。k-means 算法从 0 开始给出聚类 ID。一旦检查数据，你就会发现我们给出的 A
    到 D 聚类 ID 与 k-means 之间的以下映射：A=>3, B=>1, C=>0, D=>2。
- en: Now, let's pick some of the data from different parts of the chart and predict
    which cluster it belongs to.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们从图表的不同部分选取一些数据，并预测它属于哪个聚类。
- en: 'Let''s look at the house (18) data, which has a lot size of 876 sq ft and is
    priced at $665K:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们看看房屋（18）的数据，其占地面积为 876 平方英尺，价格为 66.5 万美元：
- en: '[PRE8]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, look at the data for house (35) with a lot size of 15,750 sq ft and a
    price of $1.12 million:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，看看房屋（35）的数据，其占地面积为 15,750 平方英尺，价格为 112 万美元：
- en: '[PRE9]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now look at the house (6) data, which has a lot size of 38,768 sq ft and is
    priced at $2.725 million:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，看看房屋（6）的数据，其占地面积为 38,768 平方英尺，价格为 2.725 百万美元：
- en: '[PRE10]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now look at the house (15) data, which has a lot size of 69,696 sq ft and is
    priced at $2.75 million:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，看看房屋（15）的数据，其占地面积为 69,696 平方英尺，价格为 275 万美元：
- en: '[PRE11]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You can test the prediction capability with more data. Let's do some neighborhood
    analysis to see what meaning these clusters carry. Most of the houses in cluster
    3 are near downtown. The cluster 2 houses are on hilly terrain.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以用更多的数据来测试预测能力。让我们做一些邻里分析，看看这些聚类有什么含义。大多数属于第3个聚类的房屋都靠近市中心。第2个聚类的房屋位于丘陵地带。
- en: In this example, we dealt with a very small set of features; common sense and
    visual inspection would also lead us to the same conclusions. The beauty of the
    k-means algorithm is that it does the clustering on the data with an unlimited
    number of features. It is a great tool to use when you have a raw data and would
    like to know the patterns in that data.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们处理了一个非常小的特征集；常识和视觉检查也会得出相同的结论。k-means算法的美丽之处在于，它可以在具有无限数量特征的数据上进行聚类。当你有一堆原始数据并想了解其中的模式时，这是一个非常棒的工具。
- en: Dimensionality reduction with principal component analysis
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主成分分析进行降维
- en: Dimensionality reduction is the process of reducing the number of dimensions
    or features. A lot of real data contains a very high number of features. It is
    not uncommon to have thousands of features. Now, we need to drill down to features
    that matter.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 降维是将维度或特征数量减少的过程。许多真实数据包含非常高的特征数量。拥有数千个特征并不罕见。现在，我们需要深入挖掘那些重要的特征。
- en: 'Dimensionality reduction serves several purposes such as:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 降维有几个用途，例如：
- en: Data compression
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据压缩
- en: Visualization
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可视化
- en: When the number of dimensions is reduced, it reduces the disk footprint and
    memory footprint. Last but not least; it helps algorithms to run much faster.
    It also helps reduce highly correlated dimensions to one.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 当维度数量减少时，它减少了磁盘占用和内存占用。最后但同样重要的是；它帮助算法运行得更快。它还有助于将高度相关的维度减少到一个。
- en: Humans can only visualize three dimensions, but data can have a much higher
    number of dimensions. Visualization can help find hidden patterns in the data.
    Dimensionality reduction helps visualization by compacting multiple features into
    one.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 人类只能可视化三维，但数据可以具有许多更高的维度。可视化可以帮助发现数据中的隐藏模式。降维通过将多个特征压缩成一个来帮助可视化。
- en: The most popular algorithm for dimensionality reduction is **principal component
    analysis** (**PCA**).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 降维最流行的算法是**主成分分析**（**PCA**）。
- en: 'Let''s look at the following dataset:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看以下数据集：
- en: '![Dimensionality reduction with principal component analysis](img/3056_09_08.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![主成分分析进行降维](img/3056_09_08.jpg)'
- en: 'Let''s say the goal is to divide this two-dimensional data into one dimension.
    The way to do that would be to find a line on which we can project this data.
    Let''s find a line that is good for projecting this data on:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 假设目标是把这二维数据分成一维。实现这一目标的方法是找到一个可以投影这些数据的直线。让我们找到一个适合投影这些数据的直线：
- en: '![Dimensionality reduction with principal component analysis](img/3056_09_09.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![主成分分析进行降维](img/3056_09_09.jpg)'
- en: 'This is the line that has the shortest projected distance from the data points.
    Let''s explain it further by dropping the shortest lines from each data point
    to this projected line:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这是离数据点最近投影距离的直线。让我们通过从每个数据点到这个投影线的最短线来进一步解释它：
- en: '![Dimensionality reduction with principal component analysis](img/3056_09_10.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![主成分分析进行降维](img/3056_09_10.jpg)'
- en: Another way to look at it is that we have to find a line to project the data
    on so that the sum of the square distances of the data points from this line is
    minimized. These gray line segments are also called **projection errors**.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种看待方式是，我们需要找到一个可以投影数据的直线，使得数据点到这条直线的平方距离之和最小化。这些灰色线段也被称为**投影误差**。
- en: Getting ready
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Let's look at the three features of the housing data of the City of Saratoga,
    CA—that is, house size, lot size, and price. Using PCA, we will merge the house
    size and lot size features into one feature— *z*. Let's call this feature **z
    density of a house**.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看加利福尼亚州萨拉托加市住房数据的三个特征——即房屋大小、地块大小和价格。使用PCA，我们将房屋大小和地块大小特征合并为一个特征——*z*。让我们称这个特征为**房屋z密度**。
- en: It is worth noting that it is not always possible to give meaning to the new
    feature created. In this case, it is easy as we have only two features to combine
    and we can use our common sense to combine the effect of the two. In a more practical
    case, you may have 1,000 features that you are trying to project to 100 features.
    It may not be possible to give real-life meaning to each of those 100 features.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，并不总是可能为新创建的特征赋予意义。在这种情况下，这很容易，因为我们只有两个特征要组合，我们可以用我们的常识来组合这两个特征的效果。在更实际的案例中，你可能有一千个特征，你试图将它们投影到100个特征。可能无法为那100个特征中的每一个赋予现实生活的意义。
- en: In this exercise, we will derive the housing density using PCA and then we will
    do linear regression to see how this density affects the house price.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将使用PCA推导住房密度，然后我们将进行线性回归以查看这种密度如何影响房价。
- en: 'There is a preprocessing stage before we delve into PCA: **feature scaling**.
    Feature scaling comes into the picture when two features have ranges that are
    at very different scales. Here, house size varies in the range of 800 sq ft to
    7,000 sq ft, while the lot size varies between 800 sq ft to a few acres.'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入研究PCA之前，有一个预处理阶段：**特征缩放**。当两个特征的量级相差很大时，特征缩放就会变得重要。在这里，房屋面积在800平方英尺到7000平方英尺的范围内变化，而地块面积在800平方英尺到几英亩之间变化。
- en: Why did we not have to do feature scaling before? The answer is that we really
    did not have to put features on a level playing field. Gradient descent is another
    area where feature scaling is very useful.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么我们之前不需要进行特征缩放？答案是，我们真的不需要将特征放在同一起跑线上。梯度下降是另一个特征缩放非常有用的领域。
- en: 'There are different ways of doing feature scaling:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 特征缩放有不同的方法：
- en: Dividing a feature value with a maximum value that will put every feature in
    the ![Getting ready](img/3056_09_22.jpg) range
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将特征值除以一个最大值，使得每个特征值都在![准备中](img/3056_09_22.jpg)范围内
- en: Dividing a feature value with the range, that is, maximum value - minimum value
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将特征值除以范围，即最大值减去最小值
- en: Subtracting a feature value by its mean and then dividing by the range
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从特征值中减去其均值，然后除以范围
- en: Subtracting a feature value by its mean and then dividing by the standard deviation
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从特征值中减去其均值，然后除以标准差
- en: 'We are going to use the fourth choice to scale in the best way possible. The
    following is the data we are going to use for this recipe:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用第四种方法以最佳方式缩放。以下是我们将用于此菜谱的数据：
- en: '| House size | Lot size | Scaled house size | Scaled lot size | House price
    (in $1,000) |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| 房屋面积 | 地块面积 | 缩放后的房屋面积 | 缩放后的地块面积 | 房屋价格（以1000美元为单位） |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| 2524 | 12839 | -0.025 | -0.231 | 2405 |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| 2524 | 12839 | -0.025 | -0.231 | 2405 |'
- en: '| 2937 | 10000 | 0.323 | -0.4 | 2200 |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| 2937 | 10000 | 0.323 | -0.4 | 2200 |'
- en: '| 1778 | 8040 | -0.654 | -0.517 | 1400 |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| 1778 | 8040 | -0.654 | -0.517 | 1400 |'
- en: '| 1242 | 13104 | -1.105 | -0.215 | 1800 |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| 1242 | 13104 | -1.105 | -0.215 | 1800 |'
- en: '| 2900 | 10000 | 0.291 | -0.4 | 2351 |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| 2900 | 10000 | 0.291 | -0.4 | 2351 |'
- en: '| 1218 | 3049 | -1.126 | -0.814 | 795 |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| 1218 | 3049 | -1.126 | -0.814 | 795 |'
- en: '| 2722 | 38768 | 0.142 | 1.312 | 2725 |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| 2722 | 38768 | 0.142 | 1.312 | 2725 |'
- en: '| 2553 | 16250 | -0.001 | -0.028 | 2150 |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| 2553 | 16250 | -0.001 | -0.028 | 2150 |'
- en: '| 3681 | 43026 | 0.949 | 1.566 | 2724 |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| 3681 | 43026 | 0.949 | 1.566 | 2724 |'
- en: '| 3032 | 44431 | 0.403 | 1.649 | 2675 |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| 3032 | 44431 | 0.403 | 1.649 | 2675 |'
- en: '| 3437 | 40000 | 0.744 | 1.385 | 2930 |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| 3437 | 40000 | 0.744 | 1.385 | 2930 |'
- en: '| 1680 | 1260 | -0.736 | -0.92 | 870 |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| 1680 | 1260 | -0.736 | -0.92 | 870 |'
- en: '| 2260 | 15000 | -0.248 | -0.103 | 2210 |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| 2260 | 15000 | -0.248 | -0.103 | 2210 |'
- en: '| 1660 | 10032 | -0.753 | -0.398 | 1145 |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| 1660 | 10032 | -0.753 | -0.398 | 1145 |'
- en: '| 3251 | 12420 | 0.587 | -0.256 | 2419 |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| 3251 | 12420 | 0.587 | -0.256 | 2419 |'
- en: '| 3039 | 69696 | 0.409 | 3.153 | 2750 |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| 3039 | 69696 | 0.409 | 3.153 | 2750 |'
- en: '| 3401 | 12600 | 0.714 | -0.245 | 2035 |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| 3401 | 12600 | 0.714 | -0.245 | 2035 |'
- en: '| 1620 | 10240 | -0.787 | -0.386 | 1150 |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| 1620 | 10240 | -0.787 | -0.386 | 1150 |'
- en: '| 876 | 876 | -1.414 | -0.943 | 665 |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| 876 | 876 | -1.414 | -0.943 | 665 |'
- en: '| 1889 | 8125 | -0.56 | -0.512 | 1430 |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| 1889 | 8125 | -0.56 | -0.512 | 1430 |'
- en: '| 4406 | 11792 | 1.56 | -0.294 | 1920 |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| 4406 | 11792 | 1.56 | -0.294 | 1920 |'
- en: '| 1885 | 1512 | -0.564 | -0.905 | 1230 |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| 1885 | 1512 | -0.564 | -0.905 | 1230 |'
- en: '| 1276 | 1276 | -1.077 | -0.92 | 975 |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| 1276 | 1276 | -1.077 | -0.92 | 975 |'
- en: '| 3053 | 67518 | 0.42 | 3.023 | 2400 |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| 3053 | 67518 | 0.42 | 3.023 | 2400 |'
- en: '| 2323 | 9810 | -0.195 | -0.412 | 1725 |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| 2323 | 9810 | -0.195 | -0.412 | 1725 |'
- en: '| 3139 | 6324 | 0.493 | -0.619 | 2300 |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| 3139 | 6324 | 0.493 | -0.619 | 2300 |'
- en: '| 2293 | 12510 | -0.22 | -0.251 | 1700 |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| 2293 | 12510 | -0.22 | -0.251 | 1700 |'
- en: '| 2635 | 15616 | 0.068 | -0.066 | 1915 |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| 2635 | 15616 | 0.068 | -0.066 | 1915 |'
- en: '| 2298 | 15476 | -0.216 | -0.074 | 2278 |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| 2298 | 15476 | -0.216 | -0.074 | 2278 |'
- en: '| 2656 | 13390 | 0.086 | -0.198 | 2497.5 |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| 2656 | 13390 | 0.086 | -0.198 | 2497.5 |'
- en: '| 1158 | 1158 | -1.176 | -0.927 | 725 |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| 1158 | 1158 | -1.176 | -0.927 | 725 |'
- en: '| 1511 | 2000 | -0.879 | -0.876 | 870 |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| 1511 | 2000 | -0.879 | -0.876 | 870 |'
- en: '| 1252 | 2614 | -1.097 | -0.84 | 730 |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| 1252 | 2614 | -1.097 | -0.84 | 730 |'
- en: '| 2141 | 13433 | -0.348 | -0.196 | 2050 |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| 2141 | 13433 | -0.348 | -0.196 | 2050 |'
- en: '| 3565 | 12500 | 0.852 | -0.251 | 3330 |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| 3565 | 12500 | 0.852 | -0.251 | 3330 |'
- en: '| 1368 | 15750 | -0.999 | -0.058 | 1120 |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| 1368 | 15750 | -0.999 | -0.058 | 1120 |'
- en: '| 5726 | 13996 | 2.672 | -0.162 | 4100 |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| 5726 | 13996 | 2.672 | -0.162 | 4100 |'
- en: '| 2563 | 10450 | 0.008 | -0.373 | 1655 |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| 2563 | 10450 | 0.008 | -0.373 | 1655 |'
- en: '| 1551 | 7500 | -0.845 | -0.549 | 1550 |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| 1551 | 7500 | -0.845 | -0.549 | 1550 |'
- en: '| 1993 | 12125 | -0.473 | -0.274 | 2100 |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
  zh: '| 1993 | 12125 | -0.473 | -0.274 | 2100 |'
- en: '| 2555 | 14500 | 0.001 | -0.132 | 2100 |'
  id: totrans-190
  prefs: []
  type: TYPE_TB
  zh: '| 2555 | 14500 | 0.001 | -0.132 | 2100 |'
- en: '| 1572 | 10000 | -0.827 | -0.4 | 1175 |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
  zh: '| 1572 | 10000 | -0.827 | -0.4 | 1175 |'
- en: '| 2764 | 10019 | 0.177 | -0.399 | 2047.5 |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '| 2764 | 10019 | 0.177 | -0.399 | 2047.5 |'
- en: '| 7168 | 48787 | 3.887 | 1.909 | 3998 |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '| 7168 | 48787 | 3.887 | 1.909 | 3998 |'
- en: '| 4392 | 53579 | 1.548 | 2.194 | 2688 |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '| 4392 | 53579 | 1.548 | 2.194 | 2688 |'
- en: '| 3096 | 10788 | 0.457 | -0.353 | 2251 |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| 3096 | 10788 | 0.457 | -0.353 | 2251 |'
- en: '| 2003 | 11865 | -0.464 | -0.289 | 1906 |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| 2003 | 11865 | -0.464 | -0.289 | 1906 |'
- en: Let's take the scaled house size and scaled house price data and save it as
    `scaledhousedata.csv`.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将缩放后的房屋大小和缩放后的房屋价格数据保存为 `scaledhousedata.csv`。
- en: How to do it…
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Load `scaledhousedata.csv` to HDFS:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `scaledhousedata.csv` 加载到 HDFS：
- en: '[PRE12]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Start the Spark shell:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 Spark shell：
- en: '[PRE13]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Import statistics and related classes:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入统计和相关类：
- en: '[PRE14]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Load `saratoga.csv` as an RDD:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `saratoga.csv` 加载为 RDD：
- en: '[PRE15]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Transform the data into an RDD of dense vectors:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将数据转换为密集向量的 RDD：
- en: '[PRE16]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Create a `RowMatrix` from `parsedData`:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `parsedData` 创建一个 `RowMatrix`：
- en: '[PRE17]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Compute one principal component:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算一个主成分：
- en: '[PRE18]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Project the rows to the linear space spanned by the principal component:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将行投影到由主成分张成的线性空间：
- en: '[PRE19]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Convert the projected `RowMatrix` back to the RDD:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将投影的 `RowMatrix` 转换回 RDD：
- en: '[PRE20]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Save `projectedRDD` back to HDFS:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `projectedRDD` 保存回 HDFS：
- en: '[PRE21]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now we will use this projected feature, which we decided to call housing density,
    plot it against the house price, and see whether any new pattern emerges:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用这个投影特征，我们决定称之为住房密度，将其与房价对比，看看是否会出现任何新的模式：
- en: 'Download the HDFS directory `phdata` to the local directory `phdata`:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 HDFS 目录 `phdata` 下载到本地目录 `phdata`：
- en: '[PRE22]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Trim start and end brackets in the data and load the data into MS Excel, next
    to the house price.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在数据中修剪起始和结束括号，并将数据加载到 MS Excel 中，紧邻房价。
- en: 'The following is the plot of the house price versus the housing density:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的图是房价与住房密度的对比图：
- en: '![How to do it…](img/3056_09_11.jpg)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![如何做…](img/3056_09_11.jpg)'
- en: 'Let''s draw some patterns in this data as follows:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下方式绘制一些数据模式：
- en: '![How to do it…](img/3056_09_12.jpg)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![如何做…](img/3056_09_12.jpg)'
- en: What patterns do we see here? For moving from a very high-density to low-density
    housing, people are ready to pay a heavy premium. As the housing density reduces,
    this premium flattens out. For example, people will pay a heavy premium to move
    from condominiums and town-homes to a single-family home, but the premium on a
    single- family home with a 3-acre lot size is not going to be much different from
    a single-family house with a 2-acre lot size in a comparable built-up area.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里看到了什么模式？从高密度住房到低密度住房，人们愿意支付高额溢价。随着住房密度的降低，这种溢价趋于平稳。例如，人们愿意支付高额溢价从公寓和联排别墅搬到独立住宅，但拥有
    3 英亩地块的独立住宅的溢价与在相似建成区域拥有 2 英亩地块的独立住宅的溢价不会有太大差异。
- en: Dimensionality reduction with singular value decomposition
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用奇异值分解进行降维
- en: Often, the original dimensions do not represent data in the best way possible.
    As we saw in PCA, you can, sometimes, project the data to fewer dimensions and
    still retain most of the useful information.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 原始维度通常不能以最佳方式表示数据。正如我们在 PCA 中所看到的，有时可以将数据投影到更少的维度，同时仍然保留大部分有用的信息。
- en: Sometimes, the best approach is to align dimensions along the features that
    exhibit most of the variations. This approach helps to eliminate dimensions that
    are not representative of the data.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，最好的方法是将维度沿着表现出最多变化的特征对齐。这种方法有助于消除不代表数据的维度。
- en: 'Let''s look at the following figure again, which shows the best-fit line on
    two dimensions:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次看看以下图形，它显示了两个维度上的最佳拟合线：
- en: '![Dimensionality reduction with singular value decomposition](img/3056_09_10.jpg)'
  id: totrans-232
  prefs: []
  type: TYPE_IMG
  zh: '![使用奇异值分解进行降维](img/3056_09_10.jpg)'
- en: 'The projection line shows the best approximation of the original data with
    one dimension. If we take the points where the gray line is intersecting with
    the black line and isolates the black line, we will have a reduced representation
    of the original data with as much variation retained as possible, as shown in
    the following figure:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 投影线显示了原始数据的一维最佳近似。如果我们取灰色线与黑色线相交的点，并隔离黑色线，我们将得到尽可能保留变化的原始数据的降维表示，如图所示：
- en: '![Dimensionality reduction with singular value decomposition](img/3056_09_13.jpg)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![奇异值分解的降维](img/3056_09_13.jpg)'
- en: 'Let''s draw a line perpendicular to the first projection line, as shown in
    the following figure:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们画一条垂直于第一条投影线的线，如图所示：
- en: '![Dimensionality reduction with singular value decomposition](img/3056_09_14.jpg)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![奇异值分解的降维](img/3056_09_14.jpg)'
- en: This line captures as much variation as possible along the second dimension
    of the original dataset. It does a bad job at approximating the original data
    as this dimension exhibits less variation to start with. It is possible to use
    these projection lines to generate a set of uncorrelated data points that will
    show subgroupings in the original data, not visible at first glance.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 这条线尽可能多地捕捉原始数据集的第二维度的变化。它在这个维度上近似原始数据的效果不佳，因为这个维度一开始就表现出较少的变化。可以使用这些投影线生成一组不相关的数据点，这些数据点将显示原始数据中的子分组，而这些子分组在第一眼看来是不可见的。
- en: This is the basic idea behind SVD. Take a high dimension, a highly variable
    set of data points, and reduce it to a lower dimensional space that exposes the
    structure of the original data more clearly and orders it from the most variation
    to the least. What makes SVD very useful, especially for NLP application, is that
    you can simply ignore variation below a certain threshold to massively reduce
    the original data, making sure that the original relationship interests are retained.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是奇异值分解（SVD）背后的基本思想。将一个高维、高度可变的数据点集降低到较低维度的空间，可以更清晰地展示原始数据的结构，并按从最大变化到最小变化的顺序排列。奇异值分解之所以非常实用，尤其是在自然语言处理（NLP）应用中，是因为你可以简单地忽略低于某个阈值的变异，从而大量减少原始数据，同时确保原始关系的兴趣得到保留。
- en: 'Let''s get slightly into the theory now. SVD is based on a theorem from linear
    algebra that a rectangular matrix A can be broken down into a product of three
    matrices—an orthogonal matrix U, a diagonal matrix S, and the transpose of an
    orthogonal matrix V. We can show it as follows:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们稍微深入理论。奇异值分解基于线性代数中的一个定理，即一个矩形矩阵 A 可以分解为三个矩阵的乘积——一个正交矩阵 U、一个对角矩阵 S 和一个正交矩阵
    V 的转置。我们可以如下表示：
- en: '![Dimensionality reduction with singular value decomposition](img/3056_09_15.jpg)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![奇异值分解的降维](img/3056_09_15.jpg)'
- en: '*U* and *V* are orthogonal matrices:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '*U* 和 *V* 是正交矩阵：'
- en: '![Dimensionality reduction with singular value decomposition](img/3056_09_16.jpg)![Dimensionality
    reduction with singular value decomposition](img/3056_09_17.jpg)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![奇异值分解的降维](img/3056_09_16.jpg)![奇异值分解的降维](img/3056_09_17.jpg)'
- en: The columns of *U* are orthonormal eigenvectors of ![Dimensionality reduction
    with singular value decomposition](img/3056_09_18.jpg) and the columns of *V*
    are orthonormal eigenvectors of ![Dimensionality reduction with singular value
    decomposition](img/3056_09_19.jpg). *S* is a diagonal matrix containing the square
    roots of eigenvalues from *U* or *V* in descending order.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '*U* 的列是 ![奇异值分解的降维](img/3056_09_18.jpg) 的正交特征向量，而 *V* 的列是 ![奇异值分解的降维](img/3056_09_19.jpg)
    的正交特征向量。*S* 是一个对角矩阵，包含从 *U* 或 *V* 中按降序排列的特征值的平方根。'
- en: Getting ready
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Let''s look at an example of a term-document matrix. We are going to look at
    two new items about the US presidential elections. The following are the links
    to the two documents:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一个术语-文档矩阵的例子。我们将探讨关于美国总统选举的两个新项目。以下是两个文档的链接：
- en: '**Fox**: [http://www.foxnews.com/politics/2015/03/08/top-2016-gop-presidential-hopefuls-return-to-iowa-to-hone-message-including/](http://www.foxnews.com/politics/2015/03/08/top-2016-gop-presidential-hopefuls-return-to-iowa-to-hone-message-including/)'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**福克斯**：[http://www.foxnews.com/politics/2015/03/08/top-2016-gop-presidential-hopefuls-return-to-iowa-to-hone-message-including/](http://www.foxnews.com/politics/2015/03/08/top-2016-gop-presidential-hopefuls-return-to-iowa-to-hone-message-including/)'
- en: '**Npr**: [http://www.npr.org/blogs/itsallpolitics/2015/03/09/391704815/in-iowa-2016-has-begun-at-least-for-the-republican-party](http://www.npr.org/blogs/itsallpolitics/2015/03/09/391704815/in-iowa-2016-has-begun-at-least-for-the-republican-party)'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Npr**: [http://www.npr.org/blogs/itsallpolitics/2015/03/09/391704815/in-iowa-2016-has-begun-at-least-for-the-republican-party](http://www.npr.org/blogs/itsallpolitics/2015/03/09/391704815/in-iowa-2016-has-begun-at-least-for-the-republican-party)'
- en: 'Let''s build the presidential candidate matrix out of these two news items:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们利用这两条新闻构建总统候选人矩阵：
- en: '![Getting ready](img/3056_09_20.jpg)![Getting ready](img/3056_09_21.jpg)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
  zh: '![准备中](img/3056_09_20.jpg)![准备中](img/3056_09_21.jpg)'
- en: Let's put this matrix in a CSV file and then put it in HDFS. We will apply SVD
    to this matrix and analyze the results.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将这个矩阵放入CSV文件中，然后将其放入HDFS。我们将对此矩阵应用奇异值分解（SVD）并分析结果。
- en: How to do it…
  id: totrans-251
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点……
- en: 'Load `scaledhousedata.csv` to HDFS:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`scaledhousedata.csv`加载到HDFS：
- en: '[PRE23]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Start the Spark shell:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Spark shell：
- en: '[PRE24]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Import statistics and related classes:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入统计和相关类：
- en: '[PRE25]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Load `pres.csv` as an RDD:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`pres.csv`加载为RDD：
- en: '[PRE26]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Transform data into an RDD of dense vectors:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将数据转换为一个密集向量的RDD：
- en: '[PRE27]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Create a `RowMatrix` from `parsedData`:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`parsedData`创建一个`RowMatrix`：
- en: '[PRE28]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Compute `svd`:'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算`svd`：
- en: '[PRE29]'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Calculate the `U` factor (eigenvector):'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算特征向量`U`因子：
- en: '[PRE30]'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Calculate the matrix of singular values (eigenvalues):'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算奇异值（特征值）矩阵：
- en: '[PRE31]'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Calculate the `V` factor (eigenvector):'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算特征向量`V`因子：
- en: '[PRE32]'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: If you look at `s`, you will realize that it gave a much higher score to the
    Npr article than to the Fox article.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看`s`，你会意识到它给Npr文章的评分远高于Fox文章。
