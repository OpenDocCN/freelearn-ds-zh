["```py\nre.search('test', 'TeSt', re.IGNORECASE)\nre.match('test', 'TeSt', re.IGNORECASE)\nre.sub('test', 'xxxx', 'TesTing', flags=re.IGNORECASE)\n```", "```py\nstr_detect('tEsT this', regex('test', ignore_case=TRUE))\n```", "```py\nstr_detect('tEsT this', regex(\"(?i)test\"))\n```", "```py\n^(([^<>()[\\]\\\\.,;:\\s@\\\"\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"\"]+)*)|(\\\"\".+\\\"\"))@((\\[?[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\]?)|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$\n```", "```py\n^(?:(?:31[\\-\\/](?:(?:0?[13578])|(1[02]))[\\-\\/](19|20)?\\d\\d)|(?:(?:29|30)[\\-\\/](?:(?:0?[13-9])|(?:1[0-2]))[\\-\\/](?:19|20)?\\d\\d)|(?:29[\\-\\/]0?2[\\-\\/](?:19|20)(?:(?:[02468][048])|(?:[13579][26])))|(?:(?:(?:0?[1-9])|(?:1\\d)|(?:2[0-8]))[\\-\\/](?:(?:0?[1-9])|(?:1[0-2]))[\\-\\/](?:19|20)?\\d\\d))$\n```", "```py\n    import pandas as pd\n    import re\n    df = dataset\n    regex_local_part = r'([^<>()[\\]\\\\.,;:\\s@\\\"\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"\"]+)*)|(\\\"\".+\\\"\")'\n    regex_domain_name = r'(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,})'\n    regex_domain_ip_address = r'(\\[?[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\]?)'\n    pattern = r'^({0})@({1}|{2})$'.format(regex_local_part, regex_domain_name, regex_domain_ip_address)\n    df['isEmailValidFromRegex'] = df['Email'].str.match(pattern).astype(int)\n    ```", "```py\n    library(dplyr)\n    library(stringr)\n    regex_local_part <- r'(([^<>()\\[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))'\n    regex_domain_name <- r'((([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))'\n    regex_domain_ip_address <- r'((\\[?[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\]?))'\n    pattern <- str_glue(\n      '^({regex_local_part})@({regex_domain_name}|{regex_domain_ip_address})$'\n    )\n    df <- df %>% \n      mutate( isEmailValidFromRegex = as.integer(str_detect(Email, pattern)) )\n    ```", "```py\n    import pandas as pd\n    import re\n    df = dataset\n    regex_dates_having_day_31 = r'(?:(?:(?:0?[13578])|(?:1[02]))[\\-\\/]31[\\-\\/](?:19|20)?\\d\\d)'\n        regex_non_leap_dates_having_days_29_30 = r'(?:(?:(?:0?[13-9])|(?:1[0-2]))[\\-\\/](?:29|30)[\\-\\/](?:19|20)?\\d\\d)'\n        regex_leap_dates_having_day_29 = r'(?:0?2[\\-\\/]29[\\-\\/](?:19|20)?(?:(?:[02468][048])|(?:[13579][26])))'\n        regex_remaining_dates = r'(?:(?:(?:0?[1-9])|(?:1[0-2]))[\\-\\/](?:(?:1\\d)|(?:0?[1-9])|(?:2[0-8]))[\\-\\/](?:19|20)?\\d\\d)'\n    pattern = r'^(?:{0}|{1}|{2}|{3})$'.format(regex_dates_having_day_31, regex_non_leap_dates_having_days_29_30, regex_leap_dates_having_day_29, regex_remaining_dates)\n    df['isValidDateFromRegex'] = df['BannedDate'].str.match(pattern).astype(int)\n    ```", "```py\n    library(dplyr)\n    library(stringr)\n    df <- dataset\n    regex_dates_having_day_31 <- r'((?:(?:(?:0?[13578])|(?:1[02]))[\\-\\/]31[\\-\\/](?:19|20)?\\d\\d))'\n    regex_non_leap_dates_having_days_29_30 <- r'((?:(?:(?:0?[13-9])|(?:1[0-2]))[\\-\\/](?:29|30)[\\-\\/](?:19|20)?\\d\\d))'\n    regex_leap_dates_having_day_29 <- r'((?:0?2[\\-\\/]29[\\-\\/](?:19|20)?(?:(?:[02468][048])|(?:[13579][26]))))'\n    regex_remaining_dates <- r'((?:(?:(?:0?[1-9])|(?:1[0-2]))[\\-\\/](?:(?:1\\d)|(?:0?[1-9])|(?:2[0-8]))[\\-\\/](?:19|20)?\\d\\d))'\n    pattern <- str_glue(\n      '^(?:{regex_dates_having_day_31}|{regex_non_leap_dates_having_days_29_30}|{regex_leap_dates_having_day_29}|{regex_remaining_dates})$'\n    )\n    df <- df %>% \n      mutate( isDateValidFromRegex = as.integer(str_detect(BannedDate, pattern)) )\n    ```", "```py\n    regex_parts = [\n        r'(?P<hostName>\\S+)',\n        r'\\S+',\n        r'(?P<userName>\\S+)',\n        r'\\[(?P<requestDateTime>[\\w:/]+\\s[+\\-]\\d{4})\\]',\n        r'\"(?P<requestContent>\\S+\\s?\\S+?\\s?\\S+?)\"',\n        r'(?P<requestStatus>\\d{3}|-)',\n        r'(?P<responseSizeBytes>\\d+|-)',\n        r'\"(?P<requestReferrer>[^\"]*)\"',\n        r'\"(?P<requestAgent>[^\"]*)?\"',\n    ]\n    pattern = re.compile(r'\\s+'.join(regex_parts) + r'$')\n    ```", "```py\n    for line in access_log_lines:    \n        log_data.append(pattern.match(line).groupdict())\n    ```", "```py\n    regex_parts <- c(\n        r'{(?P<hostName>\\S+)}'\n      , r'{\\S+}'\n      , r'{(?P<userName>\\S+)}'\n      , r'{\\[(?P<requestDateTime>[\\w:/]+\\s[+\\-]\\d{4})\\]}'\n      , r'{\"(?P<requestContent>\\S+\\s?\\S+?\\s?\\S+?)\"}'\n      , r'{(?P<requestStatus>\\d{3}|-)}'\n      , r'{(?P<responseSizeBytes>\\d+|-)}'\n      , r'{\"(?P<requestReferrer>[^\"]*)\"}'\n      , r'{\"(?P<requestAgent>[^\"]*)?\"}'\n    )\n    pattern <- paste0( paste(regex_parts, collapse = r'{\\s+}'), '$' )\n    ```", "```py\n    df <- as.data.frame( str_match_named( access_log_lines, pattern = pattern ) )\n    ```", "```py\n    local({\n      r <- getOption(\"repos\")\n      r[\"CRAN\"] <- \"https://cloud.r-project.org/\"\n      options(repos = r)\n    })\n    ```", "```py\n    install.packages(\"namedCapture\")\n    ```", "```py\n^(?:(?:(?:EUR|€)(?:\\s+)?-?(?:\\s+)?(?P<RefundAmount>\\d{1,}\\.?\\d{0,2})(?:\\s+)?-?(?:\\s+)?(?P<RefundReason>.*?)(?:\\s+)?-?(?:\\s+)?(?P<RefundDate>\\d{2}[\\-\\/]\\d{2}[\\-\\/]\\d{4})(?:\\s+)?-?(?:\\s+)?)|(?:(?P<RefundAmount>\\d{1,}\\.?\\d{0,2})(?:\\s+)?-?(?:\\s+)?(?:EUR|€)(?:\\s+)?-?(?:\\s+)?(?P<RefundReason>.*?)(?:\\s+)?-?(?:\\s+)?(?P<RefundDate>\\d{2}[\\-\\/]\\d{2}[\\-\\/]\\d{4})(?:\\s+)?-?(?:\\s+)?)|(?:(?P<RefundDate>\\d{2}[\\-\\/]\\d{2}[\\-\\/]\\d{4})(?:\\s+)?-?(?:\\s+)?(?:EUR|€)(?:\\s+)?-?(?:\\s+)?(?P<RefundAmount>\\d{1,}\\.?\\d{0,2})(?:\\s+)?-?(?:\\s+)?(?P<RefundReason>.*?)(?:\\s+)?-?(?:\\s+)?)|(?:(?P<RefundDate>\\d{2}[\\-\\/]\\d{2}[\\-\\/]\\d{4})(?:\\s+)?-?(?:\\s+)?(?P<RefundAmount>\\d{1,}\\.?\\d{0,2})(?:\\s+)?-?(?:\\s+)?(?:EUR|€)(?:\\s+)?-?(?:\\s+)?(?P<RefundReason>.*?)(?:\\s+)?-?(?:\\s+)?))$\n```"]