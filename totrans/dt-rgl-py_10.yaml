- en: '*Appendix*'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: About
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section is included to assist the students to perform the activities in
    the book. It includes detailed steps that are to be performed by the students
    to achieve the objectives of the activities.
  prefs: []
  type: TYPE_NORMAL
- en: 'Solution of Activity 1: Handling Lists'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'These are the steps to complete this activity:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the `random` library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the maximum number of random numbers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the `randint` function from the `random` library to create 100 random numbers.
    Tip: try getting a list with the least number of duplicates:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print `random_number_list`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The sample output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.16: Section of output for random_number_list](img/C11065_01_16.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 1.16: Section of output for random_number_list'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Create a `list_with_divisible_by_3` list from `random_number_list`, which will
    contain only numbers that are divisible by `3`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The sample output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.17: Section of output for random_number_list divisible by 3](img/C11065_01_17.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 1.17: Section of output for random_number_list divisible by 3'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Use the `len` function to measure the length of the first list and the second
    list, and store them in two different variables, `length_of_random_list` and `length_of_3_divisible_list`.
    Calculate the difference in length in a variable called `difference`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The sample output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Combine the tasks we have performed so far and add a while loop to it. Run
    the loop 10 times and add the values of the difference variables to a list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The sample output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, calculate the arithmetic mean (common average) for the differences in
    the lengths that you have:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The sample output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Solution of Activity 2: Analyze a Multiline String and Generate the Unique
    Word Count'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'These are the steps to complete this activity:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a string called `multiline_text` and copy the text present in the first
    chapter of *Pride and Prejudice*. Use *Ctrl* *+* *A* to select the entire text
    and then *Ctrl* *+* *C* to copy it and paste the text you just copied into it:![Figure
    1.18: Initializing the mutliline_text string](img/C11065_01_18.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 1.18: Initializing the mutliline_text string'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Find the type of the string using the `type` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, find the length of the string, using the `len` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use string methods to get rid of all the new lines (`\n` or `\r`),and symbols.
    Remove all new lines by replacing them with this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we will print and check the output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.19: The multiline_text string after removing the new lines](img/C11065_01_19.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 1.19: The multiline_text string after removing the new lines'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Removing the special characters and punctuation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check the content of `cleaned_multiline_text`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.20: The cleaned_multiline_text string](img/C11065_01_20.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 1.20: The cleaned_multiline_text string'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Generate a list of all the words from the cleaned string using the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.21: The section of output displaying the list_of_words](img/C11065_01_21.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 1.21: The section of output displaying the list_of_words'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Find the number of words:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The output is `852`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a list from the list you just created, which includes only unique words:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The output is `340`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Count the number of times each of the unique words appeared in the cleaned
    text:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.22: Section of output showing unique_words_as_dict](img/C11065_01_22.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 1.22: Section of output showing unique_words_as_dict'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: You just created, step by step, a unique word counter using all the neat tricks
    that you just learned.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Find the top 25 words from the `unique_words_as_dict`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'These are the steps to complete this activity:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.23: Top 25 unique words from multiline_text](img/C11065_01_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.23: Top 25 unique words from multiline_text'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Solution of Activity 3: Permutation, Iterator, Lambda, List'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'These are the steps to solve this activity:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Look up the definition of `permutations` and `dropwhile` from `itertools`.
    There is a way to look up the definition of a function inside Jupyter itself.
    Just type the function name, followed by *?*, and press *Shift +* *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You will see a long list of definitions after each `?`. We will skip it here.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Write an expression to generate all the possible three-digit numbers using
    1, 2, and 3:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Loop over the iterator expression you generated before. Use print to print
    each element returned by the iterator. Use `assert` and `isinstance` to make sure
    that the elements are tuples:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Write the loop again. But this time, use `dropwhile` with a lambda expression
    to drop any leading zeros from the tuples. As an example, `(0, 1, 2)` will become
    `[0, 2]`. Also, cast the output of the `dropwhile` to a list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'An extra task can be to check the actual type that `dropwhile` returns without
    casting:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Write all the logic you wrote before, but this time write a separate function
    where you will be passing the list generated from `dropwhile`, and the function
    will return the whole number contained in the list. As an example, if you pass
    `[1, 2]` to the function, it will return `12`. Make sure that the return type
    is indeed a number and not a string. Although this task can be achieved using
    other tricks, we require that you treat the incoming list as a stack in the function
    and generate the number there:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Solution of Activity 4: Design Your Own CSV Parser'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'These are the steps to complete this activity:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import `zip_longest` from `itertools`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the `return_dict_from_csv_line` function so that it contains `header`,
    `line`, and `fillvalue` as `None`, and add it to a `dict`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the accompanying `sales_record.csv` file using `r` mode inside a with
    block. First, check that it is opened, read the first line, and use string methods
    to generate a list of all the column names with `open("sales_record.csv", "r")
    as fd`. When you read each line, pass that line to a function along with the list
    of the headers. The work of the function is to construct a dict out of these two
    and fill up the `key:values`. Keep in mind that a missing value should result
    in a `None`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.10: Section of code](img/C11065_02_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.10: Section of output'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Solution of Activity 5: Generating Statistics from a CSV File'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'These are the steps to complete this activity:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Load the necessary libraries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Read in the Boston housing dataset (given as a `.csv` file) from the local
    direction:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check the first 10 records:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.23: Output displaying the first 10 records](img/C11065_03_23.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 3.23: Output displaying the first 10 records'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Find the total number of records:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a smaller DataFrame with columns that do not include `CHAS`, `NOX`,
    `B`, and `LSTAT`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check the last 7 records of the new DataFrame you just created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.24: Last seven records of the DataFrame](img/C11065_03_24.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 3.24: Last seven records of the DataFrame'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Plot histograms of all the variables (columns) in the new DataFrame by using
    a `for` loop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.25: Plot of all variables using a for loop](img/C11065_03_25.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 3.25: Plot of all variables using a for loop'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Crime rate could be an indicator of house price (people don''t want to live
    in high-crime areas). Create a scatter plot of crime rate versus price:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.26: Scatter plot of crime rate versus price](img/C11065_03_26.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 3.26: Scatter plot of crime rate versus price'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: We can understand the relationship better if we plot log10(crime) versus price.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create that plot of log10(crime) versus price:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.27: Scatter plot of crime rate (Log) versus price](img/C11065_03_27.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 3.27: Scatter plot of crime rate (Log) versus price'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Calculate the mean rooms per dwelling:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The output is `6.284634387351788`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Calculate the median age:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The output is `77.5`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Calculate the average (mean) distances to five Boston employment centers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The output is `3.795042687747034`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Calculate the percentage of houses with low price *(< $20,000):*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Solution of Activity 6: Working with the Adult Income Dataset (UCI)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'These are the steps to complete this activity:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Load the necessary libraries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Read in the adult income dataset (given as a `.csv` file) from the local directory
    and check the first 5 records:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.61: DataFrame displaying the first five records from the .csv file](img/C11065_04_61.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 4.61: DataFrame displaying the first five records from the .csv file'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Create a script that will read a text file line by line and extracts the first
    line, which is the header of the .csv file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.62: Names of the columns in the database](img/C11065_04_62.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 4.62: Names of the columns in the database'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Add a name of `Income` for the response variable (last column) to the dataset
    by using the `append` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Read the new file again using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/C11065_04_63.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 4.63: DataFrame with the income column added'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Use the `describe` command to get the statistical summary of the dataset:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/C11065_04_64.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 4.64: Statistical summary of the dataset'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: Note that only a small number of columns are included. Many variables in the
    dataset have multiple factors or classes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Make a list of all the variables in the classes by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a loop to count and print them by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.65: Output of different factors or classes](img/C11065_04_65.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 4.65: Output of different factors or classes'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Find the missing values by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.66: Finding the missing values](img/C11065_04_66.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 4.66: Finding the missing values'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Create a DataFrame with only age, education, and occupation by using subsetting:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Fig 4.67: Subset DataFrame](img/C11065_04_67.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 4.67: Subset DataFrame'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Plot a histogram of age with a bin size of 20:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 4.68: Histogram of age with a bin size of 20](img/C11065_04_68.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 4.68: Histogram of age with a bin size of 20'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Plot boxplots for `age` grouped by `education` (use a long figure size 25x10
    and make x ticks font size 15):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.69: Boxplot of age grouped by education](img/C11065_04_69.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 4.69: Boxplot of age grouped by education'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: Before doing any further operations, we need to use the `apply` method we learned
    in this chapter. It turns out that when reading the dataset from the CSV file,
    all the strings came with a whitespace character in front. So, we need to remove
    that whitespace from all the strings.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a function to strip the whitespace characters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the `apply` method to apply this function to all the columns with string
    values, create a new column, copy the values from this new column to the old column,
    and drop the new column. This is the preferred method so that you don''t accidentally
    delete valuable data. Most of the time, you will need to create a new column with
    a desired operation and then copy it back to the old column if necessary. Ignore
    any warning messages that are printed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This is the sample warning message, which you should ignore:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.70: Warning message to be ignored](img/C11065_04_70.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 4.70: Warning message to be ignored'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Find the number of people who are aged between 30 and 50 (inclusive) by using
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check the contents of the new dataset:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.71: Contents of new DataFrame](img/C11065_04_71.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 4.71: Contents of new DataFrame'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Find the `shape` of the filtered DataFrame and specify the index of the tuple
    as 0 to return the first element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print the number of black people aged between 30 and 50 using the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Group the records based on occupation to find how the mean age is distributed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.72: DataFrame with data grouped by age and education](img/C11065_04_72.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 4.72: DataFrame with data grouped by age and education'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: The code returns `79 rows × 1 columns.`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Group by occupation and show the summary statistics of age. Find which profession
    has the oldest workers on average and which profession has its largest share of
    workforce above the 75th percentile:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.73: DataFrame showing summary statistics of age](img/C11065_04_73.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 4.73: DataFrame showing summary statistics of age'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: Is there a particular occupation group that has very low representation? Perhaps
    we should remove those pieces of data because with very low data, the group won't
    be useful in analysis. Actually, just by looking at the preceding table, you should
    be able to see that the `barh` function is the index of the DataFrame, which is
    the summary stats of the occupation groups. We can see that the **Armed-Forces**
    group has almost no data. This exercise teaches you that, sometimes, the outlier
    is not just a value, but can be a whole group. The data of this group is fine,
    but it is too small to be useful for any analysis. So, it can be treated as an
    outlier in this case. But always use your business knowledge and engineering judgement
    for such outlier detection and how to process them.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Use subset and groupby to find the outliers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Plot the values on a bar chart:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.74: Bar chart displaying occupation statistics](img/C11065_04_74.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 4.74: Bar chart displaying occupation statistics'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Practice merging by common keys. Suppose you are given two datasets where the
    common key is `occupation`. First, create two such disjoint datasets by taking
    random samples from the full dataset and then try merging. Include at least two
    other columns, along with the common key column for each dataset. Notice how the
    resulting dataset, after merging, may have more data points than either of the
    two starting datasets if your common key is not unique:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/C11065_04_75.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.75: Output after merging the common keys'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The second dataset is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/C11065_04_76.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.76: Output after merging the common keys'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Merging the two datasets together:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/C11065_04_77.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.77: Output of distinct occupation values'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Solution of Activity 7: Reading Tabular Data from a Web Page and Creating DataFrames'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'These are the steps to complete this activity:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import BeautifulSoup and load the data by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the Wikipedia file by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Calculate the tables by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There are 9 tables in total.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Find the right table using the class attribute by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Separate the source and the actual data by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use `findAll` function to find the data from the `data_table`''s `body` tag,
    using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the `findAll` function to find the data from the `data_table` `td` tag
    by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Find the length of `data_tables` by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check how to get the source names by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Separate the header and data for the first source:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Find the rows from `data_tables` using `findAll`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Find the data from `rows1` using the `strip` function for each `td` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Find the DataFrame:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.35: DataFrame](img/C11065_05_351.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 5.35: DataFrame created from Web page'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Do the same for the other two sources by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Find the rows from `data_tables` using `findAll` by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define `find_right_text` using the `strip` function by using the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Find the rows from `data_rows` using `find_right_text` by using the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Calculate the `df2` DataFrame by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.36: Output of the DataFrame'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C11065_05_44.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 5.36: Output of the DataFrame'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Now, perform the same operations for the third DataFrame by using the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Find the rows from `data_tables` using `findAll` by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Find the rows from `data_rows3` by using `find_right_text`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Calculate the `df3` DataFrame by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.37: The third DataFrame'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C11065_05_55.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 5.37: The third DataFrame'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Solution of Activity 8: Handling Outliers and Missing Data'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'These are the steps to complete this activity:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Load the data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Read the .csv file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print the data from the DataFrame:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.10: The contents of the CSV file](img/C11065_06_10.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 6.10: The contents of the CSV file'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: As we can see, there is data where some values are missing, and if we examine
    this, we will see some outliers.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Check for duplicates by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There are duplicates in both the first and last names, which is normal. However,
    as we can see, there is no duplicate in email. That's good.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Check if any essential column contains `NaN`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The column visit contains some None values. Given that the final task at hand
    will probably be predicting the number of visits, we cannot do anything with rows
    that do not have that information. They are a type of outlier. Let's get rid of
    them.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Get rid of the outliers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Report the size difference:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Plot a boxplot to find if the data has outliers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The boxplot is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.43: Boxplot using the data](img/C11065_06_43.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 6.43: Boxplot using the data'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: As we can see, we have data in this column in the interval (0, 3000). However,
    the main concentration of the data is between ~700 and ~2300\.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Get rid of values beyond 2900 and below 100 – these are outliers for us. We
    need to get rid of them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After getting rid of the outliers, the new size of the data is `923.`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This is the end of the activity for this chapter.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Solution of Activity 9: Extracting the Top 100 eBooks from Gutenberg'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'These are the steps to complete this activity:'
  prefs: []
  type: TYPE_NORMAL
- en: Import the necessary libraries, including `regex` and `beautifulsoup:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check the SSL certificate:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Read the HTML from the URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Write a small function to check the status of the web request:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check the status of `response`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Decode the response and pass it on to `BeautifulSoup` for HTML parsing:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Find all the `href` tags and store them in the list of links. Check what the
    list looks like – print the first 30 elements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print the links by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use a regular expression to find the numeric digits in these links. These are
    the file numbers for the top 100 books. Initialize the empty list to hold the
    file numbers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Numbers 19 to 118 in the original list of links have the top 100 eBooks'' numbers.
    Loop over the appropriate range and use a regex to find the numeric digits in
    the link (href) string. Use the `findall()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print the file numbers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: What does the soup object's text look like? Use the .`text` method and print
    only the first 2,000 characters (do not print the whole thing as it is too long).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will notice a lot of empty spaces/blanks here and there. Ignore them. They
    are part of the HTML page''s markup and its whimsical nature:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Search the extracted text (using regular expression) from the soup object to
    find the names of top 100 eBooks (yesterday''s rank):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a starting index. It should point at the text `splitlines` method of
    `soup.text`. It splits the lines of the text of the soup object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Loop 1-100 to add the strings of the next 100 lines to this temporary list.
    Hint: use the `splitlines` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use a regular expression to extract only text from the name strings and append
    them to an empty list. Use match and span to find the indices and use them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print the list of titles:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE141]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Solution of Activity 10: Extracting the top 100 eBooks from Gutenberg.org'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'These are the steps to complete this activity:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import `urllib.request`, `urllib.parse`, `urllib.error`, and `json`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Load the secret API key (you have to get one from the OMDB website and use
    that; it has a 1,000 daily limit) from a JSON file, stored in the same folder
    into a variable, by using `json.loads()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
- en: The following cell will not be executed in the solution notebook because the
    author cannot give out their private API key.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The students/users/instructor will need to obtain a key and store it in a JSON
    file. We are calling this file `APIkeys.json`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `APIkeys.json` file by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The final URL to be passed should look like this: [http://www.omdbapi.com/?t=movie_name&apikey=secretapikey](http://www.omdbapi.com/?t=movie_name&apikey=secretapikey).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Assign the OMDB portal ([http://www.omdbapi.com/?](http://www.omdbapi.com/?))
    as a string to a variable called `serviceurl` by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a variable called `apikey` with the last portion of the URL (`&apikey=secretapikey`),
    where `secretapikey` is your own API key. The movie name portion is `t=movie_name`,
    and will be addressed later:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Write a utility function called `print_json` to print the movie data from a
    JSON file (which we will get from the portal). Here are the keys of a JSON file:
    ''Title'', ''Year'', ''Rated'', ''Released'', ''Runtime'', ''Genre'', ''Director'',
    ''Writer'', ''Actors'', ''Plot'', ''Language'',''Country'', ''Awards'', ''Ratings'',
    ''Metascore'', ''imdbRating'', ''imdbVotes'', and ''imdbID'':'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Write a utility function to download a poster of the movie based on the information
    from the JSON dataset and save it in your local folder. Use the `os` module. The
    poster data is stored in the JSON key `Poster`. You may want to split the name
    of the `Poster` file and extract the file extension only. Let''s say that the
    extension is `jpg`. We would later join this extension to the movie name and create
    a filename such as `movie.jpg`. Use the open Python command open to open a file
    and write the poster data. Close the file after you''re done. This function may
    not return anything. It just saves the poster data as an image file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Write a utility function called `search_movie` to search a movie by its name,
    print the downloaded JSON data (use the `print_json` function for this), and save
    the movie poster in the local folder (use the `save_poster` function for this).
    Use a `try-except` loop for this, that is, try to connect to the web portal. If
    successful, proceed, but if not (that is, if an exception is raised), then just
    print an error message. Use the previously created variables `serviceurl` and
    `apikey`. You have to pass on a dictionary with a key, `t`, and the movie name
    as the corresponding value to the `urllib.parse.urlencode` function and then add
    the `serviceurl` and `apikey` to the output of the function to construct the full
    URL. This URL will be used for accessing the data. The JSON data has a key called
    `Response`. If it is `True`, that means that the read was successful. Check this
    before processing the data. If it was not successful, then print the JSON key
    `Error`, which will contain the appropriate error message that''s returned by
    the movie database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Test the `search_movie` function by entering `Titanic`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following is the retrieved data for `Titanic`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Test the `search_movie` function by entering `"Random_error"` (obviously, this
    will not be found, and you should be able to check whether your error catching
    code is working properly):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE152]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Retrieve the data of `"Random_error"`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE153]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Look for a folder called `Posters` in the same directory you are working in.
    It should contain a file called `Titanic.jpg`. Check the file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Solution of Activity 11: Retrieving Data Correctly from Databases'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'These are the steps to complete this activity:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Connect to the supplied `petsDB` database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE154]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Write a function to check whether the connection has been successful:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE155]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE156]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Close the connection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE157]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check whether the connection is open or closed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE158]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE159]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Find out the different age groups are in the `persons` database. Connect to
    the supplied `petsDB` database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE160]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE161]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 8.17: Section of output grouped by age](img/C11065_08_17.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 8.17: Section of output grouped by age'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'To find out which age group has the highest number of people, execute the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE162]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE163]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To find out how many people do not have a full name (the last name is blank/null),
    execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE164]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE165]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To find out how many people have more than one pet, execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE166]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE167]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To find out how many pets have received treatment, execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE168]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE169]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To find out how many pets have received treatment and the type of pet is known,
    execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE170]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE171]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To find out how many pets are from the city called "east port", execute the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE172]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE173]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To find out how many pets are from the city called "east port" and who received
    treatment, execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE174]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE175]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Solution of Activity 12: Data Wrangling Task – Fixing UN Data'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'These are the steps to complete this activity:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the required libraries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE176]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save the URL of the dataset and use the pandas `read_csv` method to directly
    pass this link and create a DataFrame:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE177]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print the data in the DataFrame:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE178]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.4: DataFrame after removing the first row](img/C11065_9_3.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 9.3: DataFrame from the UN data'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'As the first row does not contain useful information, use the `skiprows` parameter
    to remove the first row:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE179]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print the data in the DataFrame:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE180]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.4: DataFrame after removing the first row](img/C11065_9_4.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 9.4: DataFrame after removing the first row'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Drop the column Region/Country/Area and Source as they will not be very helpful:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE181]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Assign the following names as the columns of the DataFrame: `[''Region/Country/Area'',''Year'',''Data'',''Value'',''Footnotes'']`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE182]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print the data in the DataFrame:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE183]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.5: DataFrame after dropping Region/Country/Area and Source columns](img/C11065_9_5.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 9.5: DataFrame after dropping Region/Country/Area and Source columns'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Check how many unique values the `Footnotes` column contains:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE184]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.6: Unique values of the Footnotes column](img/C11065_9_6.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 9.6: Unique values of the Footnotes column'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Convert the `Value` column data into a numeric one for further processing:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE185]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE186]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a utility function to convert the strings in the Value column into floating-point
    numbers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE187]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the `apply` method to apply this function to the `Value` column data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE188]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print the unique types of data in the `Data` column:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE189]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/C11065_9_7.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 9.7:Unique values in a column
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Create three DataFrames by filtering and selecting them from the original DataFrame:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**df_primary**: Only students enrolled in primary education (thousands)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**df_secondary**: Only students enrolled in secondary education (thousands)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**df_tertiary**: Only students enrolled in tertiary education (thousands):'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE190]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Compare them using bar charts of the primary students'' enrollment of a low-income
    country and a high-income country:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE191]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print the `primary_enrollment_india` data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE192]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.8: Data for the enrollment in primary education in India](img/C11065_9_8.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 9.8: Data for the enrollment in primary education in India'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Print the `primary_enrollment_USA` data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE193]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.9: Data for the enrollment in primary education in USA](img/C11065_9_9.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 9.9: Data for the enrollment in primary education in USA'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Plot the data for India:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE194]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.10: Bar plot for the enrollment in primary education in India](img/C11065_9_10.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 9.10: Bar plot for the enrollment in primary education in India'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Plot the data for the USA:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE195]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.11: Bar plot for the enrollment in primary education in the USA](img/C11065_9_11.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 9.11: Bar plot for the enrollment in primary education in the USA'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Data imputation: Clearly, we are missing some data. Let''s say we decide to
    impute these data points by simple linear interpolation between the available
    data points. We can take out a pen and paper or a calculator and compute those
    values and manually create a dataset somehow. But being a data wrangler, we will
    of course take advantage of Python programming, and use pandas imputation methods
    for this task. But to do that, we first need to create a DataFrame with missing
    values inserted – that is, we need to append another DataFrame with missing values
    to the current DataFrame.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**(For India) Append the rows corresponding to missing the years** – **2004
    - 2009, 2011 – 2013.**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Find the missing years:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE196]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Print the value in the `missing_years variable:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE197]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE198]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a dictionary of values with `np.nan`. Note that there are 9 missing
    data points, so we need to create a list with identical values repeated 9 times:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE199]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a DataFrame of missing values (from the preceding dictionary) that we
    can `append`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE200]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Append the new DataFrames to previously existing ones:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE201]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print the data in `primary_enrollment_india`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE202]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.12: Data for the enrollment in primary education in India after
    appending the data](img/C11065_9_12.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 9.12: Data for the enrollment in primary education in India after appending
    the data'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Sort by `year` and reset the indices using `reset_index`. Use `inplace=True`
    to execute the changes on the DataFrame itself:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE203]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print the data in `primary_enrollment_india`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE204]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.13: Data for the enrollment in primary education in India after
    sorting the data](img/C11065_9_13.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 9.13: Data for the enrollment in primary education in India after sorting
    the data'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Use the `interpolate` method for linear interpolation. It fills all the `NaN`
    by linearly interpolated values. Check out this link for more details about this
    method: [http://pandas.pydata.org/pandas-docs/version/0.17/generated/pandas.DataFrame.interpolate.html](http://pandas.pydata.org/pandas-docs/version/0.17/generated/pandas.DataFrame.interpolate.html):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE205]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print the data in `primary_enrollment_india`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE206]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/C11065_9_14.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 9.14: Data for the enrollment in primary education in India after interpolating
    the data'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Plot the data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE207]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.15: Bar plot for the enrollment in primary education in India](img/C11065_9_15.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 9.15: Bar plot for the enrollment in primary education in India'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Repeat the same steps for the USA:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE208]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Print the value in `missing_years`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE209]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE210]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create `dict_missing`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE211]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the DataFrame fpr `df_missing`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE212]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Append this to the `primary_enrollment_USA` variable, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE213]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Sort the values in the `primary_enrollment_USA` variable, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE214]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reset the index of the `primary_enrollment_USA` variable, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE215]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Interpolate the `primary_enrollment_USA` variable, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE216]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print the `primary_enrollment_USA` variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE217]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.16: Data for the enrollment in primary education in USA after all
    operations have been completed](img/C11065_9_16.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 9.16: Data for the enrollment in primary education in USA after all
    operations have been completed'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Still, the first value is unfilled. We can use the `limit` and `limit_direction`
    parameters with the interpolate method to fill that. How did we know this? By
    searching on Google and looking at this StackOverflow page. Always search for
    the solution to your problem and look for what has already been done and try to
    implement it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE218]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.17: Data for the enrollment in primary education in the USA after
    limiting the data](img/C11065_9_17.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 9.17: Data for the enrollment in primary education in the USA after
    limiting the data'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Print the data in primary_enrollment_USA:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE219]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.18: Data for the enrollment in primary education in USA](img/C11065_9_18.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 9.18: Data for the enrollment in primary education in USA'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Plot the data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE220]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.19: Bar plot for the enrollment in primary education in the USA](img/C11065_9_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.19: Bar plot for the enrollment in primary education in the USA'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Activity 13: Data Wrangling Task – Cleaning GDP Data'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'These are the steps to complete this activity:'
  prefs: []
  type: TYPE_NORMAL
- en: 'GDP data for India: We will try to read the GDP data for India from a CSV file
    that was found in a World Bank portal. It is given to you and also hosted on the
    Packt GitHub repository. But the Pandas `read_csv` method will throw an error
    in we try to read it normally. Let''s look at a step-by-step guide on how we can
    read useful information from it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE221]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE222]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We can try and use the `error_bad_lines=False` option in this kind of situation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Read the India World Bank Information `.csv` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE223]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.20: DataFrame from the India World Bank Information](img/C11065_9_20.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 9.20: DataFrame from the India World Bank Information'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Note:'
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
- en: At times, the output may not found because there are three rows instead of the
    expected one row.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Clearly, the delimiter in this file is tab (`\t`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE224]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.21: DataFrame from the India World Bank Information after using
    a delimiter](img/C11065_9_21.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 9.21: DataFrame from the India World Bank Information after using a
    delimiter'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Use the `skiprows` parameter to skip the first 4 rows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE225]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.22: DataFrame from the India World Bank Information after using
    skiprows](img/C11065_9_22.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 9.22: DataFrame from the India World Bank Information after using skiprows'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Closely examine the dataset: In this file, the columns are the yearly data
    and rows are the various types of information. Upon examining the file with Excel,
    we find that the column `Indicator Name` is the one with the name of the particular
    data type. We filter the dataset with the information we are interested in and
    also transpose (the rows and columns are interchanged) it to make it a similar
    format as our previous education dataset:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE226]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.23: DataFrame focusing on GDP per capita](img/C11065_9_23.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 9.23: DataFrame focusing on GDP per capita'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'There is no index, so let''s use `reset_index` again:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE227]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.24: DataFrame from the India World Bank Information using reset_index](img/C11065_9_24.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 9.24: DataFrame from the India World Bank Information using reset_index'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The first 3 rows aren''t useful. We can redefine the DataFrame without them.
    Then, we re-index again:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE228]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.25: DataFrame from the India World Bank Information after dropping
    and resetting the index](img/C11065_9_25.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 9.25: DataFrame from the India World Bank Information after dropping
    and resetting the index'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Let''s rename the columns properly (this is necessary for merging, which we
    will look at shortly):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE229]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.26: DataFrame focusing on Year and GDP](img/C11065_9_26.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 9.26: DataFrame focusing on Year and GDP'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'It looks like that we have GDP data from 1960 onward. But we are interested
    in 2003 - 2016\. Let''s examine the last 20 rows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE230]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.27: DataFrame from the India World Bank Information](img/C11065_9_27.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 9.27: DataFrame from the India World Bank Information'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: So, we should be good with rows 43-56\. Let's create a DataFrame called `df_gdp:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE231]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.28: DataFrame from the India World Bank Information](img/C11065_9_28.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 9.28: DataFrame from the India World Bank Information'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'We need to reset the index again (for merging):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE232]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.29: DataFrame from the India World Bank Information](img/C11065_9_29.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 9.29: DataFrame from the India World Bank Information'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The year in this DataFrame is not of the `int` type. So, it will have problems
    merging with the education DataFrame:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE233]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/C11065_9_30.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 9.30: DataFrame focusing on year'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Use the `apply` method with Python''s built-in `int` function. Ignore any warnings
    that are thrown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE234]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Solution of Activity 14: Data Wrangling Task – Merging UN Data and GDP Data'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'These are the steps to complete this activity:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, merge the two DataFrames, that is, `primary_enrollment_india` and `df_gdp`,
    on the `Year` column:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE235]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/C11065_9_31.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 9.31: Merged data'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Now, we can drop the `Data`, `Footnotes`, and `Region/Country/Area` columns:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE236]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.32: Merged data after dropping the Data, Footnotes, and Region/Country/Area
    columns](img/C11065_9_32.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 9.32: Merged data after dropping the Data, Footnotes, and Region/Country/Area
    columns'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Rearrange the columns for proper viewing and presentation to a data scientist:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE237]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.33: Merged data after rearranging the columns](img/C11065_9_33.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 9.33: Merged data after rearranging the columns'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Plot the data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE238]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.34: Scatter plot of merged data](img/C11065_9_34.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.34: Scatter plot of merged data'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Activity 15: Data Wrangling Task – Connecting the New Data to a Database'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'These are the steps to complete this activity:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Connect to a database and writing values it. We start by importing the `sqlite3`
    module of Python and then use the connect function to connect to a database. Designate
    `Year` as the `PRIMARY` `KEY` of this table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE239]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run a loop with the dataset rows one by one to insert them in the table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE240]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If we look at the current folder, we should see a file called `Education_GDP.db`,
    and if we can examine that using a database viewer program, we can see the data
    transferred there.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In these activities, we have examined a complete data wrangling flow, including
    reading data from the web and a local drive, filtering, cleaning, quick visualization,
    imputation, indexing, merging, and writing back to a database table. We also wrote
    custom functions to transform some of the data and saw how to handle situations
    where we may get errors upon reading the file.
  prefs: []
  type: TYPE_NORMAL
