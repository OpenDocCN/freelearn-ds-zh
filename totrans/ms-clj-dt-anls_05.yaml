- en: Chapter 5. Benford's Law – Detecting Natural Progressions of Numbers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we'll look at **Benford's Law**; an interesting set of properties
    that are inherent in many naturally occurring sequences of numbers. For these
    sets of numbers, this observation predicts the distribution of initial digits.
  prefs: []
  type: TYPE_NORMAL
- en: The odd rule captures an interesting observation about the way numbers are distributed,
    and it's useful too. Benford's Law has been used as an evidence of fraud. If a
    sequence of numbers should be naturally occurring but Benford's Law indicates
    that they are not, then the sequence is likely to be fraudulent. For example,
    the daily balances in your bank account should follow Benford's Law, but if they
    don't, that may be evidence that someone is cooking the books.
  prefs: []
  type: TYPE_NORMAL
- en: Learning about Benford's Law
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Originally, Benford's Law was observed by the astronomer Simon Newcomb in 1881\.
    He was referencing the logarithm tables, which were tomes listing the values for
    logarithms of different numbers. He noticed that the pages of the books were more
    worn out and discolored at the beginning than they were at the end. In fact, the
    pages that deal with numbers that begin with *1* were significantly more worn
    out than pages that begin with *9*. As the initial digits climbed, the pages were
    less and less worn.
  prefs: []
  type: TYPE_NORMAL
- en: This phenomenon was noticed again in 1938 by the physicist Frank Benford. He
    tested this against data in a number of domains, and the principle now bears his
    name.
  prefs: []
  type: TYPE_NORMAL
- en: 'In practical terms, this means that about one-third of the numbers in the sequence
    begin with the digit *1*, a little more than 15 percent begin with *2*, about
    12 percent begin with *3*, and the rest until the digit *9* are all below 10 percent.
    Five percent of the numbers begin with *9*. The following is a graphical representation
    of Benford''s law:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Learning about Benford''s Law](img/4139OS_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: So what's the logic behind this? Although the observation itself is surprising,
    understanding it is really not that difficult. Let's walk through an example to
    see what we can learn.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we''ll take the example of putting a 100 dollars in the bank and earning
    an unheard-of 10 percent interest per year, compounded monthly, where the annual
    interest rate is divided evenly by the number of times it is compounded (in this
    case, 12), and that is the effective interest rate used each for compounding period.
    This behavior is evident in more typical interest rates too, but it takes a longer
    span of time. Let''s look at a table of the end-of-year reports for this account:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Year | Amount in dollars |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 0 | 100.00 |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | 110.47 |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | 122.04 |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | 134.82 |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | 148.94 |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | 164.53 |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | 181.76 |'
  prefs: []
  type: TYPE_TB
- en: '| 7 | 200.79 |'
  prefs: []
  type: TYPE_TB
- en: '| 8 | 221.82 |'
  prefs: []
  type: TYPE_TB
- en: '| 9 | 245.04 |'
  prefs: []
  type: TYPE_TB
- en: '| 10 | 270.70 |'
  prefs: []
  type: TYPE_TB
- en: '| 11 | 299.05 |'
  prefs: []
  type: TYPE_TB
- en: '| 12 | 330.36 |'
  prefs: []
  type: TYPE_TB
- en: '| 13 | 364.96 |'
  prefs: []
  type: TYPE_TB
- en: '| 14 | 403.17 |'
  prefs: []
  type: TYPE_TB
- en: '| 15 | 445.39 |'
  prefs: []
  type: TYPE_TB
- en: '| 16 | 492.03 |'
  prefs: []
  type: TYPE_TB
- en: '| 17 | 543.55 |'
  prefs: []
  type: TYPE_TB
- en: '| 18 | 600.47 |'
  prefs: []
  type: TYPE_TB
- en: '| 19 | 663.35 |'
  prefs: []
  type: TYPE_TB
- en: '| 20 | 732.81 |'
  prefs: []
  type: TYPE_TB
- en: '| 21 | 809.54 |'
  prefs: []
  type: TYPE_TB
- en: '| 22 | 894.31 |'
  prefs: []
  type: TYPE_TB
- en: '| 23 | 987.96 |'
  prefs: []
  type: TYPE_TB
- en: '| 24 | 1,091.41 |'
  prefs: []
  type: TYPE_TB
- en: When the money in a bank account is compounded, the amount of money increases
    nonlinearly. That is, as the 0.30 dollars of interest that I accrued last month
    is now earning interest, this month, I'll earn 0.32 dollars. As each month's interest
    is rolled back into the balance, the amount increases faster and faster.
  prefs: []
  type: TYPE_NORMAL
- en: '![Learning about Benford''s Law](img/4139OS_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Looking at the balances, we can see that the amount stays in the 100s longer
    than it does in any other number (seven years). It only stays five years in the
    200s. Finally, it stays in the 900s for only one year, at which point it rolls
    over, and the process starts all over again. Because there is less to work with
    and grow on, the lower the number (that is, in the 100s), the longer the graph
    will take to grow out of that range.
  prefs: []
  type: TYPE_NORMAL
- en: This pattern is common in any geometrically increasing amounts. Populations
    increase in this way, as do many other sequences.
  prefs: []
  type: TYPE_NORMAL
- en: However, concrete examples are always good. In this chapter, we'll work through
    several concrete examples. Then, we'll see what a failure of Benford's Law looks
    like, and finally, we'll look at an example of its use in life.
  prefs: []
  type: TYPE_NORMAL
- en: Applying Benford's law to compound interest
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For the first illustration, let's keep working with the example we just started
    with.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are good implementations of analyses using Benford''s Law already in
    a number of libraries—we''ll use **Incanter** ([http://incanter.org/](http://incanter.org/))
    for the examples later in the chapter—but to better understand what''s going on,
    we''ll write our own implementation first. To get started, the project.clj file
    for this chapter is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The namespace declaration is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: First, we need a way to take a sequence of numbers and pull the first digit
    out of each. There are a couple of ways to do this. We could do this mathematically
    by repeatedly dividing by ten until the value is less than ten. At that point,
    we take the integer portion of the result.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, we''ll do something simpler for this. We''ll convert the number to
    a string and use a simple regular expression to skip over any signs or prefixes
    and just take the first digit. We''ll convert that single digit back into an integer
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, extracting the first digits for each item in a sequence of numbers becomes
    simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Let's use these to pull the first digit from the yearly balances of the compound
    interest data, and we can graph them against the expected probabilities for Benford's
    Law.
  prefs: []
  type: TYPE_NORMAL
- en: The graph that is the result of this analysis is shown as follows. It looks
    at 25 years of accumulated interest, which is enough to go from 100 dollars to
    more than 1,000 dollars.
  prefs: []
  type: TYPE_NORMAL
- en: '![Applying Benford''s law to compound interest](img/4139OS_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This gives us an idea of just how close the number sequence is. However, while
    the bars appear to match the line, they don't quite match. Are they close enough?
    We need to apply a simple statistical test to find out the answer.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we''ll need a function that computes the expected value for sequences
    that conform to Benford''s Law. This will take a digit and return the expected
    proportion for the number of times that digit starts the sequence:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We can use this to produce the full sequence of ratios for Benford''s Law.
    We can see that the blue line in the preceding graph tracks the following values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Next, we'll need a statistical function to test whether the frequencies of digits
    in a sequence match these values or not. As this is categorical data, Pearson's
    **Χ²** (**chi-squared**) test is commonly used to test for conformance with Benford's
    Law.
  prefs: []
  type: TYPE_NORMAL
- en: The formula for the Χ² test is simple. This uses `O` for the observed data and
    `E` for the expected data. `N` is the number of the categories of data. For example,
    numbers that begin with 1 are one category. In the case of testing against Benford's
    law, `N` will always be `9`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The formula for an Χ² test looks like what is shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Applying Benford''s law to compound interest](img/4139OS_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This translates directly into Clojure. The only wrinkle here is that we need
    to compare the same quantities. This uses ratios for the expected values but raw
    frequencies for the observed data. So we take the total number of observations
    and scale the expected ratios to match it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We can tie together the Χ² function to the expected values from Benford''s
    Law:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s see what kind of results it gives out:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: What does this number mean? The way this test is set up, values close to zero
    indicate that the sequence conforms to Benford's Law.
  prefs: []
  type: TYPE_NORMAL
- en: The value we obtained here, `1.8`, is fairly close to zero, given the range
    of this function, so this looks good. However, we still need to know whether it's
    statistically significant or not. To find that, we need to find the `p-value`
    for this Χ². There is the probability that this would happen by chance.
  prefs: []
  type: TYPE_NORMAL
- en: However, before we can find that information for an Χ² test, we have to know
    the degrees of freedom in our experiment. This is the number of variables that
    are free to vary. Generally, for Χ², the degree of freedom is one less than the
    number of cells in the test, so for Benford's Law, the degrees of freedom will
    be eight.
  prefs: []
  type: TYPE_NORMAL
- en: 'We use this information to find the value''s probability of occurring in a
    Χ² cumulative distribution. A cumulative distribution is the probability that
    a value or lesser value would occur. While a probability distribution gives the
    probability of x having a given value, a cumulative distribution gives the probability
    that x is less than or equal to that value. Incanter has a CDF for Χ² in `incanter.stats/cdf-chisq`.
    We can use this to find `p` for any output of the Χ² test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This is a very high p-value. We'd like it to be above 0.05; any value below
    that would indicate that this data did not follow Benford's law. (We'll get into
    the reasons for this in [Chapter 7](ch07.html "Chapter 7. Null Hypothesis Tests
    – Analyzing Crime Data"), *Null Hypothesis Tests – Analyzing Crime Data* when
    we discuss the null-hypothesis testing.) As it's higher, it's clear that this
    sequence of numbers tracks the predications of Benford's Law. There is no evidence
    of tampering here.
  prefs: []
  type: TYPE_NORMAL
- en: Looking at the world population data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For the next example, let''s look at the world population data. I downloaded
    this from **World DataBank** ([http://databank.worldbank.org/](http://databank.worldbank.org/)).
    To download it to your computer, use the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the **World Development Indicators** database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select all countries.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Population (Total)**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select all years.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Download** and download the data as a CSV file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To make it easier to reference later, I moved and renamed this file `data/population.csv`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Looking at the world population data](img/4139OS_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s read in this data. To make this easier, we''ll write a function
    that reads in a CSV file, and from each row, create a map that uses the values
    from the header row as keys. The data for this looks like the following code snippet,
    which lists the header row and one data row:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The first function for this is `read-csv`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'From this, we can create another function that reads in the population file
    and pulls out all the year columns and returns all the populations for all countries
    for all years in one long sequence:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'One of the problems with the Χ² test is that it is very sensitive to the sample
    size. Small samples (less than 50) will almost always have a high `p-value`. Likewise,
    large samples incline toward low `p-values`. In general, samples between 100 and
    2,500 observations are a good range, but even in this range, we can see some variance.
    It''s easy to create a function that returns a random subset of a collection.
    The only problem with using it is that the value of the statistical tests is dependent
    on the nature of the sample returned. However, that is always the problem with
    samples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can put all of this together. For the last example, we used our own
    functions to perform the Benford''s test and the Χ² on the output. This time,
    we''ll use Incanter''s function for this purpose from `incanter.stats`. This also
    looks up the p-value from the Χ² distribution, so it''s a bit handier than doing
    it in two steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'As the value of *p* is greater than 0.05, this appears to conform to Benford''s
    Law. Graphing this makes the p-Benford''s Law relationship clearer. If anything,
    this seems a better fit than the preceding compounding interest data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Looking at the world population data](img/4139OS_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Again, it appears that this data also conforms to Benford's Law.
  prefs: []
  type: TYPE_NORMAL
- en: Failing Benford's Law
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we've seen several datasets, all of which conform to Benford's Law,
    most of them quite strongly. We haven't yet seen a dataset that does not conform
    to this distribution of initial digits. What would a failing dataset look like?
  prefs: []
  type: TYPE_NORMAL
- en: There are many ways in which we could get data that doesn't conform. Any linear
    data, for example, would have a more uniform distribution of the initial digits.
    However, we can also simulate fraudulent data easily, and in the process, we can
    learn just how much noise a dataset can handle before Benford's Law begins to
    have trouble with it.
  prefs: []
  type: TYPE_NORMAL
- en: We'll start this experiment with the population data that we looked at earlier.
    We'll progressively introduce more and more junk into the dataset. We'll randomly
    replace items in the dataset with a random value and re-run `incanter.stats/benford-test`
    on it. When it finally fails, we can note how many items we've replaced and how
    far off the new distribution is.
  prefs: []
  type: TYPE_NORMAL
- en: 'The primary function is shown as follows. There are a few utilities, and you
    can look into the code download for their definitions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This function is primarily a loop. At each step, it checks whether the `p-value`
    is low enough to declare the job as finished. If so, it returns the information
    it has collected so far.
  prefs: []
  type: TYPE_NORMAL
- en: If this isn't done, it swaps out `block` indexes, recomputes a new `p-value`,
    and stores the information it tracks.
  prefs: []
  type: TYPE_NORMAL
- en: This isn't a particularly efficient process. It is essentially a random walk
    over the data space. Sometimes, it actually improves the sequence's fit. However,
    because there's more space that isn't close to the probabilities that Benford's
    Law predicates for the digits, the values eventually wander off into areas with
    worse fit and lower `p-values`. The following is a graph from one run that began
    with a `p-value` around 0.05\. Instead of immediately dropping below 0.05, it
    goes up to about 0.17 before finally and gradually, dropping below 0.05 around
    the iteration number 160.
  prefs: []
  type: TYPE_NORMAL
- en: '![Failing Benford''s Law](img/4139OS_05_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Looking at the final data from this process is also interesting. It's really
    not as different from the regular Benford's curve as you might expect it to be.
    It appears that the problem has too few twos and too many eights and nines.
  prefs: []
  type: TYPE_NORMAL
- en: '![Failing Benford''s Law](img/4139OS_05_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Case studies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This has all been very interesting but not exactly useful. So, can Benford's
    Law be useful? The answer is *yes*. In fact, analyses using Benford's Law is admissible
    in the United States courts. To get an idea for some uses of this analysis, let's
    take a look at a moderately well-publicized case where Benford's law was used.
  prefs: []
  type: TYPE_NORMAL
- en: The 2009 Iranian presidential election committee gathered analyses into whether
    the elections were fraudulent or not. Some of these used Benford's Law. One major
    article on this was *A first-digit anomaly in the 2009 Iranian presidential election*
    by Boudewijn F. Roukema ([http://arxiv.org/abs/0906.2789](http://arxiv.org/abs/0906.2789)).
    In this study, the author analyzes the first digit of vote counts in the election
    results publicized by the Iranian Ministry of the Interior on June 14, 2009\.
    First, he analyzed first-round results for elections in immediately preceding
    years in other countries. This established a baseline or control to compare with.
    He also took into account the pre-election polls. This allowed him to establish
    the immediate political landscape in which the election was conducted.
  prefs: []
  type: TYPE_NORMAL
- en: Roukema then used a bootstrap to obtain a sample of the votes. In applying an
    analysis of the votes using Benford's Law, he found that there was a significant
    number of more vote counts beginning with the digit *7* than could be predicated
    by Benford's Law. In fact, the frequency of *7* was more in line with the frequency
    of the digit *3*.
  prefs: []
  type: TYPE_NORMAL
- en: In another study of the 2009 Iranian elections, Walter R. Mebane, a forensics
    expert, used Benford's Law to analyze the first and second digits of the vote
    counts. Based particularly on the second digits, he also found evidence of fraud,
    especially in the counts of two of the candidates.
  prefs: []
  type: TYPE_NORMAL
- en: This seems like it should be clear-cut. However, several other people looked
    at this situation with varying degrees of thoroughness and failed to find anything.
    Several people wrote blog posts about doing cursory inspections of the data using
    Benford's Law, without finding evidence of any problems.
  prefs: []
  type: TYPE_NORMAL
- en: The Carter Center also questioned whether Benford's Law applied to election
    data at all, and in *The Irrelevance of Benford's Law for Detecting Fraud in Elections*,
    Joseph Deckert, Mikhail Myagkov, and Peter C. Ordenshook looked at election data
    from Ohio, Massachusetts, and Ukraine as well as at simulations of elections and
    concluded that Benford's Law does not, in fact, indicate election fraud well.
    Deviations in the frequencies of first and second digits do not reliably indicate
    fraud, and actual fraud may push the distributions into more compliance with Benford's
    Law. Thus, for a number of reasons, Benford's Law may not work well with the election
    data.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In many ways, Benford's Law seems like the perfect test for fraud and other
    misdeeds. It's intriguing, simple, and computationally cheap. However, as we've
    seen, it's not always reliable; Χ² tests can be finicky, and as evidence, it doesn't
    stand on its own. It really needs to be buttressed by other data and helps to
    support cases of fraud.
  prefs: []
  type: TYPE_NORMAL
- en: However, it is a piece of evidence. It provides a distribution that is difficult
    to mimic, and it describes a wide class of number sequences accurately. In combination
    with other information and evidences, it can provide support in the cases of misdeed.
  prefs: []
  type: TYPE_NORMAL
- en: We've also learned about Χ² tests, a very useful statistical procedure. Although
    they are sensitive to the sample size, these tests still have a lot to offer and
    are highly recommended. They're cheap to perform., and they work well with the
    categorical data or data that counts a limited, fixed number possibilities, such
    as sex or color. When used with appropriate sample sizes, they're straightforward
    to interpret.
  prefs: []
  type: TYPE_NORMAL
- en: In the end, we're again reminded that working with data is messy. Having a wide
    range of tools and techniques that we can apply to our researches and questions
    is critical to being able to successfully track down the information and analyses
    that we need.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll look at using sentiment analysis to find positive
    and negative hotel reviews automatically. This turns out to be a more problematic
    and a more interesting problem than you might suspect at first.
  prefs: []
  type: TYPE_NORMAL
