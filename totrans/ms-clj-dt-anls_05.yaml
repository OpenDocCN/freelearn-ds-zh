- en: Chapter 5. Benford's Law – Detecting Natural Progressions of Numbers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we'll look at **Benford's Law**; an interesting set of properties
    that are inherent in many naturally occurring sequences of numbers. For these
    sets of numbers, this observation predicts the distribution of initial digits.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: The odd rule captures an interesting observation about the way numbers are distributed,
    and it's useful too. Benford's Law has been used as an evidence of fraud. If a
    sequence of numbers should be naturally occurring but Benford's Law indicates
    that they are not, then the sequence is likely to be fraudulent. For example,
    the daily balances in your bank account should follow Benford's Law, but if they
    don't, that may be evidence that someone is cooking the books.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Learning about Benford's Law
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Originally, Benford's Law was observed by the astronomer Simon Newcomb in 1881\.
    He was referencing the logarithm tables, which were tomes listing the values for
    logarithms of different numbers. He noticed that the pages of the books were more
    worn out and discolored at the beginning than they were at the end. In fact, the
    pages that deal with numbers that begin with *1* were significantly more worn
    out than pages that begin with *9*. As the initial digits climbed, the pages were
    less and less worn.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: This phenomenon was noticed again in 1938 by the physicist Frank Benford. He
    tested this against data in a number of domains, and the principle now bears his
    name.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: 'In practical terms, this means that about one-third of the numbers in the sequence
    begin with the digit *1*, a little more than 15 percent begin with *2*, about
    12 percent begin with *3*, and the rest until the digit *9* are all below 10 percent.
    Five percent of the numbers begin with *9*. The following is a graphical representation
    of Benford''s law:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: '![Learning about Benford''s Law](img/4139OS_05_01.jpg)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
- en: So what's the logic behind this? Although the observation itself is surprising,
    understanding it is really not that difficult. Let's walk through an example to
    see what we can learn.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we''ll take the example of putting a 100 dollars in the bank and earning
    an unheard-of 10 percent interest per year, compounded monthly, where the annual
    interest rate is divided evenly by the number of times it is compounded (in this
    case, 12), and that is the effective interest rate used each for compounding period.
    This behavior is evident in more typical interest rates too, but it takes a longer
    span of time. Let''s look at a table of the end-of-year reports for this account:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '| Year | Amount in dollars |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
- en: '| 0 | 100.00 |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
- en: '| 1 | 110.47 |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
- en: '| 2 | 122.04 |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
- en: '| 3 | 134.82 |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
- en: '| 4 | 148.94 |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
- en: '| 5 | 164.53 |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
- en: '| 6 | 181.76 |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
- en: '| 7 | 200.79 |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
- en: '| 8 | 221.82 |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
- en: '| 9 | 245.04 |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
- en: '| 10 | 270.70 |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
- en: '| 11 | 299.05 |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
- en: '| 12 | 330.36 |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
- en: '| 13 | 364.96 |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
- en: '| 14 | 403.17 |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
- en: '| 15 | 445.39 |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
- en: '| 16 | 492.03 |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
- en: '| 17 | 543.55 |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
- en: '| 18 | 600.47 |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
- en: '| 19 | 663.35 |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
- en: '| 20 | 732.81 |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
- en: '| 21 | 809.54 |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
- en: '| 22 | 894.31 |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
- en: '| 23 | 987.96 |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
- en: '| 24 | 1,091.41 |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
- en: When the money in a bank account is compounded, the amount of money increases
    nonlinearly. That is, as the 0.30 dollars of interest that I accrued last month
    is now earning interest, this month, I'll earn 0.32 dollars. As each month's interest
    is rolled back into the balance, the amount increases faster and faster.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当银行账户中的资金复利增长时，资金的增加是非线性的。也就是说，我上个月累积的0.30美元利息现在在本月会赚取0.32美元。随着每个月的利息被滚入余额，金额会越来越快地增加。
- en: '![Learning about Benford''s Law](img/4139OS_05_02.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![了解贝叶斯定律](img/4139OS_05_02.jpg)'
- en: Looking at the balances, we can see that the amount stays in the 100s longer
    than it does in any other number (seven years). It only stays five years in the
    200s. Finally, it stays in the 900s for only one year, at which point it rolls
    over, and the process starts all over again. Because there is less to work with
    and grow on, the lower the number (that is, in the 100s), the longer the graph
    will take to grow out of that range.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 观察余额，我们可以看到金额在100s中停留的时间比在任何其他数字中都要长（七年）。它只在200s中停留五年。最后，它在900s中只停留一年，然后翻滚，整个过程重新开始。因为可供工作和增长的东西更少，所以数字（即100s）越低，图表将需要更长的时间才能从这个范围中增长出来。
- en: This pattern is common in any geometrically increasing amounts. Populations
    increase in this way, as do many other sequences.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这种模式在任何几何增长量中都很常见。人口以这种方式增长，许多其他序列也是如此。
- en: However, concrete examples are always good. In this chapter, we'll work through
    several concrete examples. Then, we'll see what a failure of Benford's Law looks
    like, and finally, we'll look at an example of its use in life.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，具体的例子总是好的。在本章中，我们将通过几个具体的例子来工作。然后，我们将看到贝叶斯定律失败的样子，最后，我们将看看它在生活中的一个应用例子。
- en: Applying Benford's law to compound interest
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用贝叶斯定律于复利
- en: For the first illustration, let's keep working with the example we just started
    with.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 对于第一个插图，让我们继续使用我们刚才开始的例子。
- en: 'There are good implementations of analyses using Benford''s Law already in
    a number of libraries—we''ll use **Incanter** ([http://incanter.org/](http://incanter.org/))
    for the examples later in the chapter—but to better understand what''s going on,
    we''ll write our own implementation first. To get started, the project.clj file
    for this chapter is as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 已经有一些库中实现了使用贝叶斯定律的分析，我们将使用**Incanter** ([http://incanter.org/](http://incanter.org/))在章节后面的例子中，但为了更好地理解正在发生的事情，我们首先将编写自己的实现。为了开始，本章的项目.clj文件如下：
- en: '[PRE0]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The namespace declaration is as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 命名空间声明如下：
- en: '[PRE1]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: First, we need a way to take a sequence of numbers and pull the first digit
    out of each. There are a couple of ways to do this. We could do this mathematically
    by repeatedly dividing by ten until the value is less than ten. At that point,
    we take the integer portion of the result.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要一种方法来提取一系列数字中的每个首位数字。有几种方法可以做到这一点。我们可以通过反复除以10，直到值小于10，然后取结果的整数部分来数学化地完成这个操作。
- en: 'However, we''ll do something simpler for this. We''ll convert the number to
    a string and use a simple regular expression to skip over any signs or prefixes
    and just take the first digit. We''ll convert that single digit back into an integer
    as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们将对此进行简化。我们将数字转换为字符串，并使用一个简单的正则表达式来跳过任何符号或前缀，只取首位数字。我们将这个单个数字转换回整数，如下所示：
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, extracting the first digits for each item in a sequence of numbers becomes
    simple:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，从一系列数字中提取每个项目的首位数字变得简单：
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Let's use these to pull the first digit from the yearly balances of the compound
    interest data, and we can graph them against the expected probabilities for Benford's
    Law.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用这些方法从复利数据的年度余额中提取首位数字，并将它们与贝叶斯定律的预期概率进行对比绘图。
- en: The graph that is the result of this analysis is shown as follows. It looks
    at 25 years of accumulated interest, which is enough to go from 100 dollars to
    more than 1,000 dollars.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这份分析的结果图如下所示。它考察了25年的累积利息，这足以让100美元增加到超过1000美元。
- en: '![Applying Benford''s law to compound interest](img/4139OS_05_03.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![应用贝叶斯定律于复利](img/4139OS_05_03.jpg)'
- en: This gives us an idea of just how close the number sequence is. However, while
    the bars appear to match the line, they don't quite match. Are they close enough?
    We need to apply a simple statistical test to find out the answer.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这让我们对数字序列的接近程度有了概念。然而，尽管柱状图看起来与线匹配，但它们并不完全匹配。它们足够接近吗？我们需要应用一个简单的统计测试来找出答案。
- en: 'First, we''ll need a function that computes the expected value for sequences
    that conform to Benford''s Law. This will take a digit and return the expected
    proportion for the number of times that digit starts the sequence:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要一个函数来计算符合本福特定律的序列的预期值。这个函数将接受一个数字并返回该数字作为序列起始的预期比例：
- en: '[PRE4]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We can use this to produce the full sequence of ratios for Benford''s Law.
    We can see that the blue line in the preceding graph tracks the following values:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以利用这个函数来生成本福特定律的完整比率序列。我们可以看到，前一个图中蓝色的线追踪以下值：
- en: '[PRE5]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Next, we'll need a statistical function to test whether the frequencies of digits
    in a sequence match these values or not. As this is categorical data, Pearson's
    **Χ²** (**chi-squared**) test is commonly used to test for conformance with Benford's
    Law.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要一个统计函数来测试一个序列中数字的频率是否与这些值相匹配。由于这是分类数据，通常使用皮尔逊的**χ²**（**卡方**）测试来检验是否符合本福特定律。
- en: The formula for the Χ² test is simple. This uses `O` for the observed data and
    `E` for the expected data. `N` is the number of the categories of data. For example,
    numbers that begin with 1 are one category. In the case of testing against Benford's
    law, `N` will always be `9`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: χ²测试的公式很简单。这里使用`O`表示观察数据，`E`表示预期数据。`N`是数据类别的数量。例如，以1开头的数字是一个类别。在测试本福特定律的情况下，`N`总是`9`。
- en: 'The formula for an Χ² test looks like what is shown in the following figure:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: χ²测试的公式看起来如下所示：
- en: '![Applying Benford''s law to compound interest](img/4139OS_05_04.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![将本福特定律应用于复利](img/4139OS_05_04.jpg)'
- en: 'This translates directly into Clojure. The only wrinkle here is that we need
    to compare the same quantities. This uses ratios for the expected values but raw
    frequencies for the observed data. So we take the total number of observations
    and scale the expected ratios to match it:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这直接翻译成Clojure。这里唯一的麻烦是我们需要比较相同的数量。这里使用比率来表示预期值，但使用原始频率来表示观察数据。因此，我们取总的观察次数并将预期比率缩放以匹配它：
- en: '[PRE6]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We can tie together the Χ² function to the expected values from Benford''s
    Law:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将χ²函数与本福特定律的预期值联系起来：
- en: '[PRE7]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Let''s see what kind of results it gives out:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看它给出的结果：
- en: '[PRE8]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: What does this number mean? The way this test is set up, values close to zero
    indicate that the sequence conforms to Benford's Law.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这个数字意味着什么？这个测试的设置方式是，接近零的值表明序列符合本福特定律。
- en: The value we obtained here, `1.8`, is fairly close to zero, given the range
    of this function, so this looks good. However, we still need to know whether it's
    statistically significant or not. To find that, we need to find the `p-value`
    for this Χ². There is the probability that this would happen by chance.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到这里的值`1.8`，考虑到这个函数的范围，这个值相当接近零，所以看起来是好的。然而，我们仍然需要知道它是否具有统计学意义。为了找到这一点，我们需要找到这个χ²的`p-value`。这是这种事情偶然发生的概率。
- en: However, before we can find that information for an Χ² test, we have to know
    the degrees of freedom in our experiment. This is the number of variables that
    are free to vary. Generally, for Χ², the degree of freedom is one less than the
    number of cells in the test, so for Benford's Law, the degrees of freedom will
    be eight.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在我们能够找到χ²测试的这些信息之前，我们必须知道实验的自由度。这是可以自由变化的变量的数量。通常，对于χ²，自由度是测试中单元格数减一，所以对于本福特定律，自由度将是八。
- en: 'We use this information to find the value''s probability of occurring in a
    Χ² cumulative distribution. A cumulative distribution is the probability that
    a value or lesser value would occur. While a probability distribution gives the
    probability of x having a given value, a cumulative distribution gives the probability
    that x is less than or equal to that value. Incanter has a CDF for Χ² in `incanter.stats/cdf-chisq`.
    We can use this to find `p` for any output of the Χ² test:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用这个信息来找到该值在χ²累积分布中的概率。累积分布是值或更小值发生的概率。Incanter在`incanter.stats/cdf-chisq`中有一个χ²的CDF。我们可以用它来找到χ²测试任何输出的`p`值：
- en: '[PRE9]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This is a very high p-value. We'd like it to be above 0.05; any value below
    that would indicate that this data did not follow Benford's law. (We'll get into
    the reasons for this in [Chapter 7](ch07.html "Chapter 7. Null Hypothesis Tests
    – Analyzing Crime Data"), *Null Hypothesis Tests – Analyzing Crime Data* when
    we discuss the null-hypothesis testing.) As it's higher, it's clear that this
    sequence of numbers tracks the predications of Benford's Law. There is no evidence
    of tampering here.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常高的p值。我们希望它高于0.05；任何低于这个值的数值都表明这些数据没有遵循本福特定律。（我们将在[第7章](ch07.html "第7章。零假设检验
    – 分析犯罪数据")中讨论这个原因，*零假设检验 – 分析犯罪数据*，当我们讨论零假设检验时。）由于它更高，很明显这个数字序列符合本福特定律的预测。这里没有篡改的证据。
- en: Looking at the world population data
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看世界人口数据
- en: 'For the next example, let''s look at the world population data. I downloaded
    this from **World DataBank** ([http://databank.worldbank.org/](http://databank.worldbank.org/)).
    To download it to your computer, use the following steps:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 对于下一个例子，让我们看看世界人口数据。我从**世界数据银行**([http://databank.worldbank.org/](http://databank.worldbank.org/))下载了这些数据。要将数据下载到您的计算机上，请按照以下步骤操作：
- en: Navigate to the **World Development Indicators** database.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**世界发展指标**数据库。
- en: Select all countries.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择所有国家。
- en: Select **Population (Total)**.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**总人口（总计）**。
- en: Select all years.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择所有年份。
- en: Click on **Download** and download the data as a CSV file.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下载**并下载数据为CSV文件。
- en: To make it easier to reference later, I moved and renamed this file `data/population.csv`.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了便于以后引用，我将此文件移动并重命名为`data/population.csv`。
- en: '![Looking at the world population data](img/4139OS_05_05.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![查看世界人口数据](img/4139OS_05_05.jpg)'
- en: 'Now, let''s read in this data. To make this easier, we''ll write a function
    that reads in a CSV file, and from each row, create a map that uses the values
    from the header row as keys. The data for this looks like the following code snippet,
    which lists the header row and one data row:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们读取这些数据。为了使这个过程更简单，我们将编写一个函数来读取CSV文件，并从每一行创建一个映射，使用标题行的值作为键。这个数据看起来像以下代码片段，列出了标题行和一行数据：
- en: '[PRE10]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The first function for this is `read-csv`:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这个功能的第一步是`read-csv`：
- en: '[PRE11]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'From this, we can create another function that reads in the population file
    and pulls out all the year columns and returns all the populations for all countries
    for all years in one long sequence:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个，我们可以创建另一个函数来读取人口文件，并提取所有年份列，并返回所有国家所有年份的总人口序列：
- en: '[PRE12]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'One of the problems with the Χ² test is that it is very sensitive to the sample
    size. Small samples (less than 50) will almost always have a high `p-value`. Likewise,
    large samples incline toward low `p-values`. In general, samples between 100 and
    2,500 observations are a good range, but even in this range, we can see some variance.
    It''s easy to create a function that returns a random subset of a collection.
    The only problem with using it is that the value of the statistical tests is dependent
    on the nature of the sample returned. However, that is always the problem with
    samples:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Χ²测试的一个问题是它对样本大小非常敏感。小样本（小于50）几乎总是会有一个高的`p-value`。同样，大样本倾向于低`p-value`。一般来说，样本大小在100到2,500个观测值之间是一个好的范围，但即使在范围内，我们也可以看到一些变化。很容易创建一个函数来返回集合的随机子集。使用它的唯一问题是统计测试的值取决于返回的样本的性质。然而，这始终是样本的问题：
- en: '[PRE13]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now we can put all of this together. For the last example, we used our own
    functions to perform the Benford''s test and the Χ² on the output. This time,
    we''ll use Incanter''s function for this purpose from `incanter.stats`. This also
    looks up the p-value from the Χ² distribution, so it''s a bit handier than doing
    it in two steps:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以把这些放在一起。对于最后一个例子，我们使用自己的函数来执行本福特定律测试和输出上的Χ²测试。这次，我们将使用Incanter的`incanter.stats`中的函数来完成这个目的。这也从Χ²分布中查找p值，所以它比分两步做更方便：
- en: '[PRE14]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'As the value of *p* is greater than 0.05, this appears to conform to Benford''s
    Law. Graphing this makes the p-Benford''s Law relationship clearer. If anything,
    this seems a better fit than the preceding compounding interest data:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 由于*p*值大于0.05，这似乎符合本福特定律。绘图使p-Benford's Law关系更清晰。如果有什么不同的话，这似乎比前面的复利数据更合适：
- en: '![Looking at the world population data](img/4139OS_05_06.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![查看世界人口数据](img/4139OS_05_06.jpg)'
- en: Again, it appears that this data also conforms to Benford's Law.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，这些数据似乎也符合本福特定律。
- en: Failing Benford's Law
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 违反本福特定律
- en: So far, we've seen several datasets, all of which conform to Benford's Law,
    most of them quite strongly. We haven't yet seen a dataset that does not conform
    to this distribution of initial digits. What would a failing dataset look like?
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了几个数据集，它们都符合贝纳德定律，其中大多数相当强烈。我们还没有看到不符合这种初始数字分布的数据集。一个失败的数据集会是什么样子？
- en: There are many ways in which we could get data that doesn't conform. Any linear
    data, for example, would have a more uniform distribution of the initial digits.
    However, we can also simulate fraudulent data easily, and in the process, we can
    learn just how much noise a dataset can handle before Benford's Law begins to
    have trouble with it.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过许多方式获取不符合规范的数据。例如，任何线性数据都会有更均匀的初始数字分布。然而，我们也可以轻松地模拟欺诈数据，在这个过程中，我们可以了解数据集在贝纳德定律开始对其产生问题之前可以处理多少噪声。
- en: We'll start this experiment with the population data that we looked at earlier.
    We'll progressively introduce more and more junk into the dataset. We'll randomly
    replace items in the dataset with a random value and re-run `incanter.stats/benford-test`
    on it. When it finally fails, we can note how many items we've replaced and how
    far off the new distribution is.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从这个我们之前查看的人口数据开始这个实验。我们将逐渐向数据集中引入越来越多的垃圾数据。我们将随机用随机值替换数据集中的项目，并重新运行`incanter.stats/benford-test`。当它最终失败时，我们可以记录我们替换了多少个项目以及新的分布偏离了多少。
- en: 'The primary function is shown as follows. There are a few utilities, and you
    can look into the code download for their definitions:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 主要函数如下所示。有几个实用工具，你可以查看代码下载以了解它们的定义：
- en: '[PRE15]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This function is primarily a loop. At each step, it checks whether the `p-value`
    is low enough to declare the job as finished. If so, it returns the information
    it has collected so far.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数主要是一个循环。在每一步，它会检查`p-value`是否足够低，以至于可以宣布任务完成。如果是这样，它将返回到目前为止收集到的信息。
- en: If this isn't done, it swaps out `block` indexes, recomputes a new `p-value`,
    and stores the information it tracks.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有这样做，它会交换`block`索引，重新计算一个新的`p-value`，并存储它跟踪的信息。
- en: This isn't a particularly efficient process. It is essentially a random walk
    over the data space. Sometimes, it actually improves the sequence's fit. However,
    because there's more space that isn't close to the probabilities that Benford's
    Law predicates for the digits, the values eventually wander off into areas with
    worse fit and lower `p-values`. The following is a graph from one run that began
    with a `p-value` around 0.05\. Instead of immediately dropping below 0.05, it
    goes up to about 0.17 before finally and gradually, dropping below 0.05 around
    the iteration number 160.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是一个特别有效的过程。它本质上是在数据空间上的随机漫步。有时，它实际上会改善序列的拟合度。然而，由于有更多空间远离贝纳德定律对数字预测的概率，值最终会偏离到拟合度更差、`p-values`更低的区域。以下是从一个`p-value`大约为0.05的运行中得到的图表。它并没有立即下降到0.05以下，而是在大约0.17之前上升，最终在迭代编号160左右逐渐下降到0.05以下。
- en: '![Failing Benford''s Law](img/4139OS_05_08.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![贝纳德定律失败](img/4139OS_05_08.jpg)'
- en: Looking at the final data from this process is also interesting. It's really
    not as different from the regular Benford's curve as you might expect it to be.
    It appears that the problem has too few twos and too many eights and nines.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 观察这个过程的最终数据也很有趣。它实际上并不像你预期的那样与常规贝纳德曲线有很大不同。看起来问题在于数字2太少，而数字8和9太多。
- en: '![Failing Benford''s Law](img/4139OS_05_09.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![贝纳德定律失败](img/4139OS_05_09.jpg)'
- en: Case studies
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 案例研究
- en: This has all been very interesting but not exactly useful. So, can Benford's
    Law be useful? The answer is *yes*. In fact, analyses using Benford's Law is admissible
    in the United States courts. To get an idea for some uses of this analysis, let's
    take a look at a moderately well-publicized case where Benford's law was used.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这一切都非常有趣，但并不特别有用。那么，贝纳德定律有用吗？答案是*是的*。实际上，使用贝纳德定律的分析在美国法庭上是可接受的。为了了解这种分析的一些用途，让我们看看一个适度公开的案件，其中使用了贝纳德定律。
- en: The 2009 Iranian presidential election committee gathered analyses into whether
    the elections were fraudulent or not. Some of these used Benford's Law. One major
    article on this was *A first-digit anomaly in the 2009 Iranian presidential election*
    by Boudewijn F. Roukema ([http://arxiv.org/abs/0906.2789](http://arxiv.org/abs/0906.2789)).
    In this study, the author analyzes the first digit of vote counts in the election
    results publicized by the Iranian Ministry of the Interior on June 14, 2009\.
    First, he analyzed first-round results for elections in immediately preceding
    years in other countries. This established a baseline or control to compare with.
    He also took into account the pre-election polls. This allowed him to establish
    the immediate political landscape in which the election was conducted.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 2009年伊朗总统选举委员会收集了关于选举是否欺诈的分析。其中一些使用了贝德福定律。关于这一主题的主要文章是布杜温·F·罗克马撰写的《2009年伊朗总统选举中的首位数字异常》（[http://arxiv.org/abs/0906.2789](http://arxiv.org/abs/0906.2789)）。在这项研究中，作者分析了伊朗内政部于2009年6月14日公布的选举结果中的选票首位数字。首先，他分析了其他国家在选举前一年的选举第一轮结果。这建立了一个基线或控制组以进行比较。他还考虑了选举前的民意调查。这使他能够确定选举进行的即时政治环境。
- en: Roukema then used a bootstrap to obtain a sample of the votes. In applying an
    analysis of the votes using Benford's Law, he found that there was a significant
    number of more vote counts beginning with the digit *7* than could be predicated
    by Benford's Law. In fact, the frequency of *7* was more in line with the frequency
    of the digit *3*.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 罗克马随后使用自助法获取了选票的样本。在应用贝德福定律对选票进行分析时，他发现，以数字*7*开头的选票数量比贝德福定律所能预测的要多出显著的数量。事实上，数字*7*的频率与数字*3*的频率更为一致。
- en: In another study of the 2009 Iranian elections, Walter R. Mebane, a forensics
    expert, used Benford's Law to analyze the first and second digits of the vote
    counts. Based particularly on the second digits, he also found evidence of fraud,
    especially in the counts of two of the candidates.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在对2009年伊朗选举的另一项研究中，法医专家沃尔特·R·梅班使用贝德福定律分析了选票的第一位和第二位数字。特别是在第二位数字的基础上，他也发现了欺诈的证据，尤其是在两位候选人的计票中。
- en: This seems like it should be clear-cut. However, several other people looked
    at this situation with varying degrees of thoroughness and failed to find anything.
    Several people wrote blog posts about doing cursory inspections of the data using
    Benford's Law, without finding evidence of any problems.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来应该很明确。然而，有几个人以不同程度的彻底性审视了这种情况，但都没有找到任何问题。有几个人写了博客文章，关于使用贝德福定律对数据进行粗略检查，但没有发现任何问题的证据。
- en: The Carter Center also questioned whether Benford's Law applied to election
    data at all, and in *The Irrelevance of Benford's Law for Detecting Fraud in Elections*,
    Joseph Deckert, Mikhail Myagkov, and Peter C. Ordenshook looked at election data
    from Ohio, Massachusetts, and Ukraine as well as at simulations of elections and
    concluded that Benford's Law does not, in fact, indicate election fraud well.
    Deviations in the frequencies of first and second digits do not reliably indicate
    fraud, and actual fraud may push the distributions into more compliance with Benford's
    Law. Thus, for a number of reasons, Benford's Law may not work well with the election
    data.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 卡特中心也质疑贝德福定律是否适用于选举数据，在《贝德福定律在检测选举欺诈中的不相关性》一文中，约瑟夫·德克特、米哈伊尔·米亚戈科夫和彼得·C·奥登舒克研究了俄亥俄州、马萨诸塞州和乌克兰的选举数据以及选举的模拟，并得出结论，贝德福定律实际上并不能很好地指示选举欺诈。首位和第二位数字频率的偏差并不能可靠地指示欺诈，实际的欺诈可能使分布更符合贝德福定律。因此，出于许多原因，贝德福定律可能不适合与选举数据一起使用。
- en: Summary
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In many ways, Benford's Law seems like the perfect test for fraud and other
    misdeeds. It's intriguing, simple, and computationally cheap. However, as we've
    seen, it's not always reliable; Χ² tests can be finicky, and as evidence, it doesn't
    stand on its own. It really needs to be buttressed by other data and helps to
    support cases of fraud.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多方面，贝德福定律似乎是对欺诈和其他不当行为的完美测试。它引人入胜，简单，计算成本低。然而，正如我们所看到的，它并不总是可靠的；χ²测试可能会很挑剔，而且作为证据，它本身并不能站得住脚。它实际上需要其他数据的支持，并有助于支持欺诈案例。
- en: However, it is a piece of evidence. It provides a distribution that is difficult
    to mimic, and it describes a wide class of number sequences accurately. In combination
    with other information and evidences, it can provide support in the cases of misdeed.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，它是一份证据。它提供了一个难以模仿的分布，并且准确地描述了一类数字序列。结合其他信息和证据，它可以在犯罪案件提供支持。
- en: We've also learned about Χ² tests, a very useful statistical procedure. Although
    they are sensitive to the sample size, these tests still have a lot to offer and
    are highly recommended. They're cheap to perform., and they work well with the
    categorical data or data that counts a limited, fixed number possibilities, such
    as sex or color. When used with appropriate sample sizes, they're straightforward
    to interpret.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还学习了 Χ² 测试，这是一种非常有用的统计程序。尽管它们对样本大小敏感，但这些测试仍然有很多可提供的内容，并且非常推荐。它们执行成本低，并且与分类数据或计数有限、固定可能性的数据（如性别或颜色）配合得很好。当使用适当的样本大小时，它们易于解释。
- en: In the end, we're again reminded that working with data is messy. Having a wide
    range of tools and techniques that we can apply to our researches and questions
    is critical to being able to successfully track down the information and analyses
    that we need.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们再次被提醒，与数据打交道是混乱的。拥有广泛的应用于我们研究和问题的工具和技术，对于成功追踪所需的信息和分析至关重要。
- en: In the next chapter, we'll look at using sentiment analysis to find positive
    and negative hotel reviews automatically. This turns out to be a more problematic
    and a more interesting problem than you might suspect at first.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨如何使用情感分析自动找到正面和负面的酒店评论。这实际上比你最初想象的要复杂和有趣得多。
