["```py\ntest0 <- function(x, y) {\n  if (x > 0) x else y\n} \n\n```", "```py\ntest0(1)\n## [1] 1 \n\n```", "```py\ntest0(-1)\n## Error in test0(-1): argument \"y\" is missing, with no default \n\n```", "```py\ntest0(1, stop(\"Stop now\"))\n## [1] 1 \n\n```", "```py\ntest0(-1, stop(\"Stop now\"))\n## Error in test0(-1, stop(\"Stop now\")): Stop now \n\n```", "```py\nsystem.time(rnorm(10000000))\n## user system elapsed\n## 0.91  0.01   0.92 \n\n```", "```py\nsystem.time(1)\n## user system elapsed\n##  0     0      0 \n\n```", "```py\nsystem.time(test0(1, rnorm(10000000)))\n## user system elapsed\n##  0     0      0 \n\n```", "```py\ntest1 <- function(x, y = stop(\"Stop now\")) {\n  if (x > 0) x else y\n} \n\n```", "```py\ntest1(1)\n## [1] 1 \n\n```", "```py\ntest1(-1)\n## Error in test1(-1): Stop now \n\n```", "```py\ntest2 <- function(x, n = floor(length(x) / 2)) {\n  x[1:n]\n} \n\n```", "```py\ntest2(1:10)\n## [1] 1 2 3 4 5 \n\n```", "```py\ntest2(1:10, 3)\n## [1] 1 2 3 \n\n```", "```py\ntest3 <- function(x, n = floor(length(m) / 2)) {\n  x[1:n]\n} \n\n```", "```py\ntest3(1:10)\n## Error in test3(1:10): object 'm' not found \n\n```", "```py\nm <- c(1, 2, 3)\ntest3(1:10)\n## [1] 1 \n\n```", "```py\ntest4 <- function(x, y = p) {\n  p <- x + 1\n  c(x, y)\n} \n\n```", "```py\ntest4(1)\n## [1] 1 2 \n\n```", "```py\ncheck_input <- function(x) {\n  switch(x,\n    y = message(\"yes\"),\n    n = message(\"no\"),\n    stop(\"Invalid input\"))\n} \n\n```", "```py\ncheck_input(\"y\")\n## yes \n\n```", "```py\ncheck_input(\"n\")\n## no \n\n```", "```py\ncheck_input(\"what\")\n## Error in check_input(\"what\"): Invalid input \n\n```", "```py\nx1 <- c(1, 2, 3) \n\n```", "```py\nx2 <- x1 \n\n```", "```py\nx1[1] <- 0\nx1\n## [1] 0 2 3\nx2\n## [1] 1 2 3 \n\n```", "```py\nx1 <- c(1, 2, 3)\nx2 <- x1 \n\n```", "```py\ntracemem(x1)\n## [1] \"<0000000013597028>\"\ntracemem(x2)\n## [1] \"<0000000013597028>\" \n\n```", "```py\nx1[1] <- 0\n## tracemem[0x0000000013597028 -> 0x00000000170c7968] \n\n```", "```py\nmodify_first <- function(x) {\n  x[1] <- 0\n  x\n} \n\n```", "```py\nv1 <- c(1, 2, 3)\nmodify_first(v1)\n## [1] 0 2 3\nv1\n## [1] 1 2 3 \n\n```", "```py\nv2 <- list(x = 1, y = 2)\nmodify_first(v2)\n## $x\n## [1] 0\n##\n## $y\n## [1] 2\nv2\n## $x\n## [1] 1\n##\n## $y\n## [1] 2 \n\n```", "```py\nv1[1] <- 0\nv1\n## [1] 0 2 3\nv2[1] <- 0\nv2\n## $x\n## [1] 0\n##\n## $y\n## [1] 2 \n\n```", "```py\nv3 <- 1:5\nv3 <- modify_first(v3)\nv3\n## [1] 0 2 3 4 5 \n\n```", "```py\nchange_names <- function(x) {\n  if (is.data.frame(x)) {\n    rownames(x) <- NULL\n    if (ncol(x) <= length(LETTERS)) {\n      colnames(x) <- LETTERS[1:ncol(x)]\n    } else {\n      stop(\"Too many columns to rename\")\n    }\n  } else {\n    stop(\"x must be a data frame\")\n  }\n  x\n} \n\n```", "```py\nsmall_df <- data.frame(\n  id = 1:3,\n  width = runif(3, 5, 10),\n  height = runif(3, 5, 10))\nsmall_df\n##   id    width   height\n## 1  1  7.605076 9.991836\n## 2  2  8.763025 7.360011\n## 3  3  9.689882 8.550459 \n\n```", "```py\nchange_names(small_df)\n##   A     B        C\n## 1 1 7.605076 9.991836\n## 2 2 8.763025 7.360011\n## 3 3 9.689882 8.550459 \n\n```", "```py\nsmall_df\n##   id   width   height\n## 1  1 7.605076 9.991836\n## 2  2 8.763025 7.360011\n## 3  3 9.689882 8.550459 \n\n```", "```py\nx <- 0\nmodify_x <- function(value) {\n  x <<- value\n} \n\n```", "```py\nmodify_x(3)\nx\n## [1] 3 \n\n```", "```py\ncount <- 0\nlapply(1:3, function(x) {\n  result <- 1:x\n  count <<- count + length(result)\n  result\n})\n## [[1]]\n## [1] 1\n##\n## [[2]]\n## [1] 1 2\n##\n## [[3]]\n## [1] 1 2 3\ncount\n## [1] 6 \n\n```", "```py\nnested_list <- list(\n  a = c(1, 2, 3),\n  b = list(\n    x = c(\"a\", \"b\", \"c\"),\n    y = list(\n      z = c(TRUE, FALSE),\n      w = c(2, 3, 4))\n  )\n)\nstr(nested_list)\n## List of 2\n## $ a: num [1:3] 1 2 3\n## $ b:List of 2\n## ..$ x: chr [1:3] \"a\" \"b\" \"c\"\n## ..$ y:List of 2\n## .. ..$ z: logi [1:2] TRUE FALSE\n##   .. ..$ w: num [1:3] 2 3 4 \n\n```", "```py\nf(c(1, 2, 3))\nf(c(\"a\", \"b\", \"c\"))\nf(c(TRUE, FALSE))\nf(c(2, 3, 4)) \n\n```", "```py\nflat_list <- list()\ni <- 1 \n\n```", "```py\nres <- rapply(nested_list, function(x) {\nflat_list[[i]] <<- x\ni <<- i + 1\n}) \n\n```", "```py\nres\n## a  b.x b.y.z b.y.w\n## 2   3   4     5 \n\n```", "```py\nnames(flat_list) <- names(res)\nstr(flat_list)\n## List of 4\n## $ a : num [1:3] 1 2 3\n## $ b.x : chr [1:3] \"a\" \"b\" \"c\"\n## $ b.y.z: logi [1:2] TRUE FALSE\n## $ b.y.w: num [1:3] 2 3 4 \n\n```", "```py\nstart_num <- 1\nend_num <- 10\nfun1 <- function(x) {\n  c(start_num, x, end_num)\n} \n\n```", "```py\nfun1(c(4, 5, 6))\n## [1]  1  4  5  6 10 \n\n```", "```py\nrm(start_num, end_num)\nfun1(c(4, 5, 6))\n## Error in fun1(c(4, 5, 6)): object 'start_num' not found \n\n```", "```py\nrm(fun1, start_num, end_num)\n## Warning in rm(fun1, start_num, end_num): object 'start_num'\n## not found\n## Warning in rm(fun1, start_num, end_num): object 'end_num'\n## not found\nfun1 <- function(x) {\nc(start_num, x, end_num)\n} \n\n```", "```py\nfun1(c(4, 5, 6))\n## Error in fun1(c(4, 5, 6)): object 'start_num' not found \n\n```", "```py\nstart_num <- 1\nend_num <- 10\nfun1(c(4, 5, 6))\n## [1]  1  4  5  6 10 \n\n```", "```py\np <- 0\nfun2 <- function(x) {\n  p <- 1\n  x + p\n} \n\n```", "```py\nfun2(1)\n## [1] 2 \n\n```", "```py\nf1 <- function(x) {\n  x + p\n}\ng1 <- function(x) {\n  p <- 1\n  f1(x)\n} \n\n```", "```py\ng1(0)\n## [1] 0 \n\n```", "```py\np <- 1\ng1(0)\n## [1] 1 \n\n```", "```py\nm <- 1\nf2 <- function(x) {\n  m <<- 2\n  x\n}\ng2 <- function(x) {\n  m <- 1\n  f2(x)\n  cat(sprintf(\"[g2] m: %d\\n\", m))\n} \n\n```", "```py\ng2(1)\n## [g2] m: 1 \n\n```", "```py\nm\n## [1] 2 \n\n```", "```py\nf <- function(x) {\n  p <- 1\n  q <- 2\n  cat(sprintf(\"1\\. [f1] p: %d, q: %d\\n\", p, q))\n  f2 <- function(x) {\n    p <- 3\n    cat(sprintf(\"2\\. [f2] p: %d, q: %d\\n\", p, q))\n    c(x = x, p = p, q = q)\n  }\n  cat(sprintf(\"3\\. [f1] p: %d, q: %d\\n\", p, q))\n  f2(x)\n} \n\n```", "```py\nf(0)\n## 1\\. [f1] p: 1, q: 2\n## 3\\. [f1] p: 1, q: 2\n## 2\\. [f2] p: 3, q: 2\n## x p q\n## 0 3 2 \n\n```", "```py\ng <- function(x) {\n  p <- 1\n  q <- 2\n  cat(sprintf(\"1\\. [f1] p: %d, q: %d\\n\", p, q))\n  g2 <- function(x) {\n    p <<- 3\n    p <- 2\n    cat(sprintf(\"2\\. [f2] p: %d, q: %d\\n\", p, q))\n    c(x = x, p = p, q = q)\n  }\n  cat(sprintf(\"3\\. [f1] p: %d, q: %d\\n\", p, q))\n  result <- g2(x)\n  cat(sprintf(\"4\\. [f1] p: %d, q: %d\\n\", p, q))\n  result\n} \n\n```", "```py\ng(0)\n## 1\\. [f1] p: 1, q: 2\n## 3\\. [f1] p: 1, q: 2\n## 2\\. [f2] p: 2, q: 2\n## 4\\. [f1] p: 3, q: 2\n## x p q\n## 0 2 2 \n\n```", "```py\ne1 <- new.env() \n\n```", "```py\ne1\n## <environment: 0x0000000014a45748> \n\n```", "```py\ne1$x <- 1\ne1[[\"x\"]]\n## [1] 1 \n\n```", "```py\ne1[1:3]\n## Error in e1[1:3]: object of type 'environment' is not subsettable \n\n```", "```py\ne1[[1]]\n## Error in e1[[1]]: wrong arguments for subsetting an environment \n\n```", "```py\nexists(\"x\", e1)\n## [1] TRUE \n\n```", "```py\nget(\"x\", e1)\n## [1] 1 \n\n```", "```py\nls(e1)\n## [1] \"x\" \n\n```", "```py\ne1$y\n## NULL\ne1[[\"y\"]]\n## NULL \n\n```", "```py\nget(\"y\", e1)\n## Error in get(\"y\", e1): object 'y' not found \n\n```", "```py\nexists(\"y\", e1)\n## [1] FALSE \n\n```", "```py\ne2 <- new.env(parent = e1) \n\n```", "```py\ne2\n## <environment: 0x000000001772ef70>\ne1\n## <environment: 0x0000000014a45748> \n\n```", "```py\nparent.env(e2)\n## <environment: 0x0000000014a45748> \n\n```", "```py\ne2$y <- 2 \n\n```", "```py\nls(e2)\n## [1] \"y\" \n\n```", "```py\ne2$y\n## [1] 2\ne2[[\"y\"]]\n## [1] 2\nexists(\"y\", e2)\n## [1] TRUE\nget(\"y\", e2)\n## [1] 2 \n\n```", "```py\ne2$x\n## NULL\ne2[[\"x\"]]\n## NULL \n\n```", "```py\nexists(\"x\", e2)\n## [1] TRUE\nget(\"x\", e1)\n## [1] 1 \n\n```", "```py\nexists(\"x\", e2, inherits = FALSE)\n## [1] FALSE \n\n```", "```py\nget(\"x\", e2, inherits = FALSE)\n## Error in get(\"x\", e2, inherits = FALSE): object 'x' not found \n\n```", "```py\nls(e1)\n## [1] \"x\"\ne3 <- e1 \n\n```", "```py\ne3$y\n## NULL\ne1$y <- 2\ne3$y\n## [1] 2 \n\n```", "```py\nmodify <- function(e) {\n  e$z <- 10\n} \n\n```", "```py\nlist1 <- list(x = 1, y = 2)\nlist1$z\n## NULL\nmodify(list1)\nlist1$z\n## NULL \n\n```", "```py\ne1$z\n## NULL\nmodify(e1)\ne1$z\n## [1] 10 \n\n```", "```py\nenvironment()\n## <environment: R_GlobalEnv> \n\n```", "```py\nglobal <- environment()\nglobal$some_obj <- 1 \n\n```", "```py\nsome_obj\n## [1] 1 \n\n```", "```py\nglobalenv()\n## <environment: R_GlobalEnv>\n.GlobalEnv\n## <environment: R_GlobalEnv> \n\n```", "```py\nbaseenv()\n## <environment: base> \n\n```", "```py\nparents <- function(env) {\n  while (TRUE) {\n    name <- environmentName(env)\n    txt <- if (nzchar(name)) name else format(env)\n    cat(txt, \"\\n\")\n    env <- parent.env(env)\n  }\n} \n\n```", "```py\nparents(globalenv())\n## R_GlobalEnv\n## package:stats\n## package:graphics\n## package:grDevices\n## package:utils\n## package:datasets\n## package:methods\n## Autoloads\n## base\n## R_EmptyEnv\n## Error in parent.env(env): the empty environment has no parent \n\n```", "```py\nsearch()\n## [1] \".GlobalEnv\" \"package:stats\"\n## [3] \"package:graphics\" \"package:grDevices\"\n## [5] \"package:utils\" \"package:datasets\"\n## [7] \"package:methods\" \"Autoloads\"\n## [9] \"package:base\" \n\n```", "```py\nmedian(c(1, 2, 1 + 3)) \n\n```", "```py\nsimple_fun <- function() {\n  cat(\"Executing environment: \")\n  print(environment())\n  cat(\"Enclosing environment: \")\n  print(parent.env(environment()))\n} \n\n```", "```py\nsimple_fun()\n## Executing environment: <environment: 0x0000000014955db0>\n## Enclosing environment: <environment: R_GlobalEnv>\nsimple_fun()\n## Executing environment: <environment: 0x000000001488f430>\n## Enclosing environment: <environment: R_GlobalEnv>\nsimple_fun()\n## Executing environment: <environment: 0x00000000146a23c8>\n## Enclosing environment: <environment: R_GlobalEnv> \n\n```", "```py\nenvironment(simple_fun)\n## <environment: R_GlobalEnv> \n\n```", "```py\nf1 <- function() {\n  cat(\"[f1] Executing in \")\n  print(environment())\n  cat(\"[f1] Enclosed by \")\n  print(parent.env(environment()))\n  cat(\"[f1] Calling from \")\n  print(parent.frame())\n  f2 <- function() {\n    cat(\"[f2] Executing in \")\n    print(environment())\n    cat(\"[f2] Enclosed by \")\n    print(parent.env(environment()))\n    cat(\"[f2] Calling from \")\n    print(parent.frame())\n  }\n  f3 <- function() {\n    cat(\"[f3] Executing in \")\n    print(environment())\n    cat(\"[f3] Enclosed by \")\n    print(parent.env(environment()))\n    cat(\"[f3] Calling from \")\n    print(parent.frame())\n    f2()\n  }\n  f3()\n} \n\n```", "```py\nf1()\n## [f1] Executing in <environment: 0x0000000016a39fe8> *A\n## [f1] Enclosed by <environment: R_GlobalEnv>\n## [f1] Calling from <environment: R_GlobalEnv> \n\n```", "```py\n## [f3] Executing in <environment: 0x0000000016a3def8> *B\n## [f3] Enclosed by <environment: 0x0000000016a39fe8> *A\n## [f3] Calling from <environment: 0x0000000016a39fe8> *A \n\n```", "```py\n## [f2] Executing in <environment: 0x0000000016a41f90> *C\n## [f2] Enclosed by <environment: 0x0000000016a39fe8> *A\n## [f2] Calling from <environment: 0x0000000016a3def8> *B \n\n```"]