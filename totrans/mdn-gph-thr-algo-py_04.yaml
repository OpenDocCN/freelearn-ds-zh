- en: '2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Wrangling Data into Networks with NetworkX and igraph
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will introduce many types of data that are common in analytics
    projects, including `NetworkX` and `igraph` packages.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll consider many real-world problems in this chapter and the remaining chapters
    to build intuition around data that can be reformatted and analyzed as a network
    science problem. Oftentimes, network-based algorithms have lower computational
    costs than algorithms designed for time series analytics or spatial data. By the
    end of this chapter, you’ll be able to recognize many types of problems that work
    well with network analytics, and you’ll walk away equipped to dive into the problems
    in later chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifically, we will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to different data sources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wrangling data into networks with igraph
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Social network examples with NetworkX
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To run the practical examples in this chapter, you need to be familiar with
    Python programming and must install the `igraph` and `NetworkX` Python packages.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code for this chapter is available here: [https://github.com/PacktPublishing/Modern-Graph-Theory-Algorithms-with-Python](https://github.com/PacktPublishing/Modern-Graph-Theory-Algorithms-with-Python)'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to different data sources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In practice, we’ll rarely create a network from scratch or come across a data
    source that naturally occurs as a network. We often must create a network from
    different data sources, including survey or sensor data, geographic data, time
    series data, demographic data, or even output data from machine learning models.
    In this section, we’ll overview some common data sources before diving into two
    practical examples of data wrangling with igraph and NetworkX. Let’s dive into
    our first data source, social interaction data.
  prefs: []
  type: TYPE_NORMAL
- en: Social interaction data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Much of network science originated with social networks, which capture relationships
    or interactions between individuals. Marketing campaigns often recruit individuals
    with many connections to others within a demographic group of interest, as well
    as those whose connections also have many connections within a demographic group.
    For instance, a toy manufacturer might have a new toy coming out for the Christmas
    season, perhaps a *steampunk nutcracker ballet mouse king doll* (shown in *Figure
    2**.1*), that they would like to market to European girls between the ages of
    5 and 11 based on market research about which age and gender groups are most likely
    to see the Nutcracker ballet:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.1 – Marketing advertisement for the new Mouse King doll debuting
    at Christmas](img/B21087_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.1 – Marketing advertisement for the new Mouse King doll debuting at
    Christmas
  prefs: []
  type: TYPE_NORMAL
- en: The toy manufacturer may look for social media influencers (individuals with
    many subscribers on YouTube or followers on TikTok) whose network of viewers includes
    mostly girls between 5 and 11 years old who are viewing the influencer’s content
    from Europe. Sometimes, this data is readily available by scraping influencers’
    content. Other times, this data needs to be collected in pieces and analyzed first
    to narrow down influencers among the demographic groups of interest through content
    curation and the scraping of related content metrics.
  prefs: []
  type: TYPE_NORMAL
- en: Another common source of data for social network construction is **survey data**,
    in which individuals rank friendships or interaction patterns with others in a
    social group. For instance, students might indicate other students with whom they
    study, socialize, or attend classes. Students who interact with each other in
    many settings share stronger social interactions, while students who interact
    infrequently or only in certain settings share weaker social interactions. Weighted
    social networks can visualize not only interactions that exist but also their
    strengths. In social science settings, stronger ties often play an important role
    in the transmission of information or the adoption of products or behaviors. For
    instance, when an adolescent begins smoking or drinking alcohol, individuals with
    strong ties to that individual are at higher risk of starting those behaviors
    themselves. Within highly connected groups of adolescents, the risk of behavior
    spreading is high among the group when one individual adopts a risky behavior.
  prefs: []
  type: TYPE_NORMAL
- en: Weaker social ties can be just as important as strong social ties (or even more
    important!), and within the field of sociology, these ties form the basis of an
    individual’s social capital. Social capital measures the resources upon which
    an individual can draw when needed from those with whom the individual has connected
    or those connected to an individual’s connections. Within the context of job searches,
    a job seeker’s strongest and most-lasting ties may not be what is needed to find
    a new job. However, it is likely that friends-of-friends and acquaintances form
    a much larger social network, and these ties may present new employment opportunities
    to the job seeker. Larger networks of friends-of-friends and casual acquaintances
    often provide more opportunities to find that next job through word-of-mouth or
    job ad posts on social media.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll return to survey-based social network data in this chapter’s *Wrangling
    data into networks with igraph* section where we construct a network of students
    based on endorsement interactions across social contexts.
  prefs: []
  type: TYPE_NORMAL
- en: Spatial data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another common source of network data is data collected from geographic information
    systems or organized by geography. **Spatial data analytics** is a branch of data
    science that analyzes geography-based data; however, when data covers large geographic
    regions or involves complex statistical calculations, it can be easier to formulate
    the data and problem in terms of network science. Network algorithms are often
    faster than spatial data algorithms, and it is easy to store large networks in
    graph databases such as Neo4j.
  prefs: []
  type: TYPE_NORMAL
- en: Consider the worldwide spread of COVID-19 through travel networks. The pandemic
    originated in China but quickly spread to other parts of Asia, as well as the
    rest of the world, through the travel of infected but not terribly sick individuals
    on airplanes, trains, and other means of transportation (such as flights from
    Beijing to Paris, as shown in *Figure 2**.2*). Air travel also allowed new variants
    to spread from one continent to another during the pandemic. Fortunately, COVID-19
    had a low case fatality rate and did not cause severe disease in most people who
    were infected. However, a highly infectious disease similar to COVID-19, but with
    a high fatality rate and a long incubation period from infection to the display
    of symptoms (such as a more infectious version of Ebola) spreading through the
    same travel networks would create a very severe global health crisis before it
    was detected. As we’ll see in later chapters, epidemic threats with spatial and
    social components can be modeled and simulated through network science.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.2 – A flight from Beijing to Paris during the initial transmission
    period of COVID-19](img/B21087_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.2 – A flight from Beijing to Paris during the initial transmission
    period of COVID-19
  prefs: []
  type: TYPE_NORMAL
- en: Health-related networks aren’t the only spatial data sources useful in data
    science. One common source of spatial data is retail data, where stores exist
    in different locations and may carry different products, sell products at different
    rates, and adjust prices to match regional norms. Customer demographics may also
    vary significantly across locations and produce very different buying patterns.
    For instance, consider customers‘ buying behavior at a store near a university
    versus customers’ buying behavior at a store in the suburbs. The store near a
    university may have more late-night purchases, sell a lot of snacks, and rarely
    need to stock diapers relative to the store in the suburbs. Analysis of customers’
    buying behavior, goods pricing, or out-of-stock frequency across products and
    geographies of stores can yield valuable strategic insight for individual stores
    and their parent chains interested in optimizing stocks, prices, and timing of
    promotions. We’ll wrangle data related to millet prices at local markets into
    a network later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Temporal data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Networks are rarely static. Social networks evolve over time as connections
    forge and break. Sales patterns change as new items are added, needs for specific
    items change over seasons, or changes in the economy spur changes in consumer
    behavior. Stock market trading volumes and industry/regional correlations change
    over time as political and business climates change.
  prefs: []
  type: TYPE_NORMAL
- en: All these changes involve a time component in the data. There are a few ways
    to model time trends in networks, and we’ll start with two use cases and build
    out more uses in *Part 3* of this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let’s return to our example of a job seeker leveraging his or her social
    network to find a new job. As this individual begins a job search, they may add
    suggested professional connections on LinkedIn, attend local networking events,
    or connect with a few recruiters looking to hire; all these actions add connections
    to their social network (and increase the likelihood of finding a new job). *Figure
    2**.3* shows women meeting at a networking event, forging new professional connections
    to leverage in their job searches:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.3 – A changing social network over 8 weeks](img/B21087_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.3 – A changing social network over 8 weeks
  prefs: []
  type: TYPE_NORMAL
- en: We can represent changes over time as a series of networks, each denoting a
    specific time when we capture the job seeker’s social network. We may collect
    the data daily or weekly or even monthly for the period we are interested in analyzing.
    Let’s say we capture data weekly for two months. This will give us roughly eight
    social networks, which we can analyze and summarize to track changes in network
    size and density of connections over time. Perhaps we also have data related to
    interviews our job seeker obtained, which we can examine along with the changes
    in their social network to gain insight into how social network growth has helped
    our job seeker obtain a new job.
  prefs: []
  type: TYPE_NORMAL
- en: To study how social ties and specific activities increase the likelihood of
    job interviews and offers, we could recruit a few hundred job seekers, collect
    information on interviews/offers and their current social network each week for
    eight weeks, and build a regression model to predict job interviews or job offers
    based on prior weeks’ social network metrics. In a more sophisticated analysis,
    we could use a type of regression model that includes time series components to
    account for time effects, as well as social network metrics and initial data on
    job seekers (such as demographic data, career information, educational history…).
    We’ll consider this type of model in [*Chapter 13*](B21087_13.xhtml#_idTextAnchor167).
  prefs: []
  type: TYPE_NORMAL
- en: Spatial data can also include time components, where new flights are added between
    countries or where stores’ management structure changes over time to create different
    connections between stores within a retail chain. We’ve already seen how we can
    wrangle spatial data into networks. For **spatiotemporal data**, we can build
    networks at an instant in time where we sample the data (as in our job networking
    example), or we can chunk our data into time periods, create networks for each
    time period, and then consider the full series of networks in our analysis. In
    the retail store example, we might have real-time purchase behavior to parse into
    weekly trend networks, where stores are connected based on the similarity of sales
    across the full inventory of store pairs. We might be interested in analyzing
    how buying trends change over the month of December, when people celebrate New
    Year’s, Christmas, Hanukkah, Kwanzaa, and end-of-year business deals. We’ll consider
    examples of this in the *Wrangling data into networks with* *igraph* section.
  prefs: []
  type: TYPE_NORMAL
- en: Biological networks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Network science plays a prominent role in modern genomics research. Environmental
    factors, such as stress or eating habits, can modify which genes are expressed
    within a cell or tissue by making transcription of **deoxyribonucleic acid** (**DNA**)
    more or less likely for a set of genes, leading to higher or lower levels of proteins
    produced by translating the genetic code to **ribonucleic acid** (**RNA**) and
    then to proteins (*Figure 2**.4*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.4 – A diagram showing the processes by which genes are expressed,
    transcribed, and translated into proteins](img/B21087_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.4 – A diagram showing the processes by which genes are expressed, transcribed,
    and translated into proteins
  prefs: []
  type: TYPE_NORMAL
- en: Let’s consider a concrete example. Cobras are venomous snakes, and their DNA
    encodes genes related to venom production. Transcription of these genes happens
    in the venom glands that produce venom and store it until the snake strikes a
    target. The DNA encoding these genes is transcribed into RNA, which is then translated
    into a protein.
  prefs: []
  type: TYPE_NORMAL
- en: Gene sets transcribed together are said to be **coexpressed**; **coexpression
    networks** are useful in understanding the relationship between genetic factors
    and diseases or physical traits. In our snake venom example, genes encoding venom
    would be coexpressed in the venom gland, as all of the venom is produced in that
    part of the snake’s body. Environmental factors can indirectly influence the expression
    patterns of genes by modifying the DNA structures to upregulate or downregulate
    transcription. For instance, when our snake bites in self-defense, it may empty
    its venom gland completely with the bite. This will cause DNA related to venom
    genes to be upregulated, allowing for more venom production to replenish the snake’s
    supply so that it can eat and defend itself.
  prefs: []
  type: TYPE_NORMAL
- en: The field of **epigenetics** studies these gene-environment interactions, particularly
    in the development of complex diseases such as cancer or mental health disorders.
    Typically, gene expression within or across tissues is measured through protein
    binding on genes of interest using some sort of microarray chip. Many human diseases
    involve a more complex interplay of environment and genes than the regulation
    of venom levels in a snake’s venom gland; some of these diseases involve many
    parts of the body.
  prefs: []
  type: TYPE_NORMAL
- en: For example, some people face higher risks of alcohol use disorders based on
    their aggregation of genetic risk factors; when a person at risk of alcohol use
    disorder begins drinking, alcohol crosses the blood-brain barrier and produces
    epigenetic changes in gene expression, including changes in expression of the
    genes that put the person at risk for the disorder. Microarrays measure the level
    of gene expression experimentally. Microarray studies of coexpression of genes
    in those with alcohol use disorders and those without alcohol use disorders provide
    insight into genetic risk and the epigenetic differences that occur because of
    alcohol consumption. Networks provide a convenient way to summarize expression
    similarity relationships and can be mined for subnetworks related to modules of
    related genes that perform a similar task (such as producing neurotransmitter
    binding sites related to serotonin or dopamine binding at synapses).
  prefs: []
  type: TYPE_NORMAL
- en: A related phenomenon in genetic studies is the regulation of gene expression,
    typically through epigenetic pathways, as well. As we’ve discussed, external environmental
    factors can influence gene expression; often, proteins created from gene transcription
    and translation regulate their own transcription, turning expression up or down
    based on the levels of proteins that exist. For instance, disruptions in gene
    regulation related to serotonin receptors in the frontal cortex are thought to
    underlie major depressive disorder, and disruptions to downregulation of cell
    growth genes are thought to underlie a lot of common cancer pathways, leading
    to uncontrolled growth and mitosis (tumors).
  prefs: []
  type: TYPE_NORMAL
- en: Directed networks provide an ideal way to summarize gene regulation pathways.
    Different biological and environmental mechanisms upregulate or downregulate the
    genes of interest. Genes may cluster into similar regulatory patterns within the
    mechanisms of study (protein expression, external exposures in the environment…).
    This gives insight into specific pathologies of interest or the impacts of environmental
    factors like stress.
  prefs: []
  type: TYPE_NORMAL
- en: Genomic studies sometimes leverage network science to map gene ontologies (networks
    that summarize hierarchical relationships of individual genes or genetic modules)
    to disease ontologies (networks that summarize categories of disorders). We’ll
    dive deeper into ontology research in [*Chapter 11*](B21087_11.xhtml#_idTextAnchor145),
    but let’s review some basics here. The mapping between ontologies allows researchers
    to formulate hypotheses regarding unknown genetic links to disorders based on
    known links between genes and similar diseases. Returning to substance abuse disorders,
    many genetic risk factors are known and shared across addictions; it is likely
    that newer behavioral addictions, such as video game addiction, share at least
    some of these genetic factors with other addictive disorders. Ontology mapping
    between genes and diseases provides a starting point for studying these new disorders.
  prefs: []
  type: TYPE_NORMAL
- en: '**Genomics** is one of many types of data where network solutions aren’t an
    obvious toolset for solving data problems. Let’s look at some other examples where
    network science has provided insight not possible with other analytics tools.'
  prefs: []
  type: TYPE_NORMAL
- en: Other types of data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Many other sources of data exist, and most can be wrangled into network form.
    Let’s return to our discussion of **deep learning**. In the training process of
    deep learning, nodes in each layer of the neural network forge and break connections
    with nodes in other layers based on fit metrics in each iteration of the training.
    Let’s consider a training process with four training epochs of a very small feedforward
    neural network with an input layer of two nodes, a hidden layer of three nodes,
    and an output layer of two nodes that originates as a fully-connected network,
    undergoes two epochs of pruning, and then adds back one of the pruned connections
    between the hidden and output layers, shown in *Figure 2**.5*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.5 – The evolution of a simple deep learning model across training
    epochs](img/B21087_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.5 – The evolution of a simple deep learning model across training epochs
  prefs: []
  type: TYPE_NORMAL
- en: In *Figure 2**.5*, we can see how each epoch has a different network structure
    across the deep learning model. Typically, we calculate fit statistics for each
    epoch, and perhaps we are interested in how properties of the deep learning network
    structure influence training accuracy on training and test sets across epochs.
    While this model is quite simple, deep learning models in practice may have several
    layers, directed edges between vertices (nodes in deep learning parlance), and
    many epochs of training. This creates a rich set of networks and network metrics
    across training to relate to model accuracy, which may be of use when tuning the
    model or changing initial parameters (perhaps adjusting pruning parameters when
    fine-tuning a pre-trained transformer model).
  prefs: []
  type: TYPE_NORMAL
- en: Fine-tuning pre-trained models is a common approach in *computer vision* and
    *large language modeling*. New training data to cover domain-specific use cases
    may be added, and model parameters need adjusting to incorporate the new training
    data into the full model. For instance, a large language model housed on HuggingFace
    might work well for embedding most scientific papers for cluster analysis but
    require fine-tuning to work well when plasma physics papers are included in the
    sample of scientific papers. Understanding the network structure of the original
    large language model and its training evolution can help researchers set optimal
    parameters in the fine-tuning process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another example of data that can be wrangled into network form to study is
    **linguistics data**. Many languages that exist today evolved from much older
    languages. For instance, the Semitic languages that exist today, including Hebrew
    and Arabic, originated from a Proto-Semitic language, which split into different
    regional branches as proto-Semitic speakers migrated and settled across the Middle
    East. One language, East Semitic (Akkadian) did not further branch to other languages;
    the other language, West Semitic, broke into South Semitic and Central South Semitic
    (which further broke into new languages over time). *Figure 2**.6* shows the initial
    evolution of Proto-Semitic into new language groups:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.6 – A diagram of early language evolution from Proto-Semitic](img/B21087_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.6 – A diagram of early language evolution from Proto-Semitic
  prefs: []
  type: TYPE_NORMAL
- en: Network science can help us compare language evolutions from original proto-languages
    to modern languages through the analysis of language family hierarchies. Comparing
    the structure of language evolution can illuminate ancient migration and trading
    patterns that can be difficult to discern from ancient records or archaeological
    sites. In addition, this comparison allows us to forecast future language splits
    based on the past behavior of the language family, similar evolution patterns
    seen in other language families, sociolinguistic data on language usage patterns,
    and the usage extent of current pidgins or dialects. We’ll return to linguistic
    applications in [*Chapter 11*](B21087_11.xhtml#_idTextAnchor145), where we consider
    language ontologies of languages spoken in Africa and their evolutions over time.
  prefs: []
  type: TYPE_NORMAL
- en: 'For now, let’s turn our attention to network creation in igraph and NetworkX
    from raw data files. This will equip us to create networks to analyze with tools
    we’ll introduce in the coming chapters. First, we’ll consider an example involving
    spatiotemporal data: quarterly millet prices across provincial markets in Burkina
    Faso.'
  prefs: []
  type: TYPE_NORMAL
- en: Wrangling data into networks with igraph
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Understanding trends in goods pricing is critical in many applications. For
    instance, a chain of gas stations may want to understand the differences in pricing
    across its locations. Often, local laws require gas stations within a certain
    distance of each other to be priced within a certain range of each other, creating
    local distributions of pricing across chains and within chains. Understanding
    this can help optimize prices regionally given constraints in each area or tie
    the data back to regional sales data to see how price distributions impact sales.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consumers can also benefit from analyses of goods pricing across geographic
    areas. Consider local food markets in the developing world. Prices are rarely
    fixed within a country or region. They are dictated by supply, demand, and cost
    to the merchant selling the goods. Grains may need to be imported from other countries,
    whose prices will fluctuate with economic and climate conditions. Fruit prices
    may vary with season and local growing conditions. Clothing may increase in price
    as dyes become scarcer in the local area. For instance, consider a grocery store,
    shown in *Figure 2**.7*, with supplier contracts and the financial backing of
    a parent chain. It may experience fluctuations in goods availability or price
    but will likely have the same goods at prices that don’t fluctuate a lot:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 2.7 – \uFEFFAn illustration of a grocery store, part of a larger chain](img/B21087_02_07.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 2.7 – An illustration of a grocery store, part of a larger chain
  prefs: []
  type: TYPE_NORMAL
- en: Contrast this with a local market comprised of different vendors who may or
    may not be at the market on a given day and whose goods’ availability and prices
    might fluctuate on the days they sell at the market. Larger markets, such as the
    one shown in *Figure 2**.8*, with more established vendors and peak hours might
    show less variation than the more informal markets that line the streets throughout
    the day.
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 2.8 – \uFEFFAn illustration of a large, formal marketplace in Burkina\
    \ Faso, where there is some commonality from day to day in vendors and their goods](img/B21087_02_08.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 2.8 – An illustration of a large, formal marketplace in Burkina Faso,
    where there is some commonality from day to day in vendors and their goods
  prefs: []
  type: TYPE_NORMAL
- en: When considering geography, we often want to consider not only the variable(s)
    of interest but also how close together the locations are relative to each other.
    Prices, sales, and goods availability in regions near each other likely reflect
    local conditions that aren’t observed in the dataset, such as local weather, the
    local political context, and the number of competing local merchants. We’ll discuss
    this topic further in *Chapters 3*, *4*, and *5*, but for now, it suffices to
    know that we can assign weights to different locations according to their relative
    distances.
  prefs: []
  type: TYPE_NORMAL
- en: Another factor to consider when wrangling spatial data is the metric of choice.
    Many spatial statistical metrics exist, and those of you familiar with spatial
    data analytics may want to use more sophisticated metrics than the ones we’ll
    consider in this text. The **local Moran statistic**, a common metric in spatial
    data analytics, sums the weights between spatial areas and a function defined
    on the data in a pairwise manner; here, we construct the statistic using weight
    matrices we define and the correlation function, which should be familiar to readers
    as a summary statistic of likeness between data points.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s dive into our example dataset, derived from Humanitarian Data Exchange’s
    Burkina Faso – Food Prices dataset from the World Food Programme Price Database
    ([https://data.humdata.org/dataset/wfp-food-prices-for-burkina-faso](https://data.humdata.org/dataset/wfp-food-prices-for-burkina-faso);
    accessed July 15, 2022). In this dataset, we have pre-selected millet prices across
    45 Burkina Faso province markets and aggregated data by quarter, starting in Quarter
    2 of 2015 and ending in Quarter 2 of 2022\. This period covers the COVID-19 pandemic
    and the beginning of the Ukraine War, both of which influenced supply chains.
    Given that markets in neighboring provinces may be impacted by the same local
    factors and supply chains, we have created a spatial weight matrix of 1’s and
    0’s, representing adjacent provinces and non-adjacent provinces respectively.
  prefs: []
  type: TYPE_NORMAL
- en: To run all of the code, it may be necessary to install other packages that are
    dependencies of `igraph` or `NetworkX`, such as `pycairo` for visualizations.
    Each machine may function differently or have other packages already installed
    if you are using a cloud platform; if you run into any difficulties, please consult
    the igraph or NetworkX help guides’ suggestions for running the packages on your
    operating system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s first import the needed packages to construct our network in igraph with
    `Script 2.1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When importing data, you’ll need to specify your own file path after you download
    the dataset. We import both the pricing data and the weight matrix from a local
    machine by adding to `Script 2.1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have our data imported, we can construct our local Moran statistic
    by computing the correlation coefficient across markets (ignoring the time indicator
    column) and multiplying the result by the weight matrix:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have our local Moran statistic constructed as `cor_weighted`, we
    can turn our data into a network with igraph. Our graph does not have any directionality
    of relationship, so we can set the mode to `undirected`. However, because our
    correlations include autocorrelations within individual markets, we need to remove
    loops from our network. We’ll do this by defining possible self-loops and removing
    them from our edge list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can visualize our network to see which markets are isolated by plotting
    our results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This should give you a plot that shows one isolated market and several regionally-connected
    markets:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.9 – A plot of Burkina Faso markets connected by local Moran statistics](img/B21087_02_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.9 – A plot of Burkina Faso markets connected by local Moran statistics
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 2**.9* shows that many markets form regional clusters, where prices
    are correlated within adjacent provinces. One market is isolated. Most markets
    connect into groups of three or four markets. One region contains six markets
    that are regionally connected and connected with pricing trends. Likely, this
    network visualizes regional connectivity rather than a mix of price correlation
    and region. We can visualize highly correlated regions by applying a threshold
    to the correlation calculations before computing the local Moran statistic.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s set the correlation threshold to `0.9` (very high correlation of prices)
    by modifying `Script 2.1` to include thresholding in the local Moran statistic
    calculation piece:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This should yield many more isolated markets that are not highly correlated
    over our time period:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.10 – A plot of Burkina Faso markets connected by local Moran statistics
    over the selected threshold of 0.9](img/B21087_02_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.10 – A plot of Burkina Faso markets connected by local Moran statistics
    over the selected threshold of 0.9
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 2**.10* shows a much sparser network, where many markets are isolated.
    Some markets that were regionally connected still show connections among markets;
    however, many are not mutually connected anymore. Interestingly, our group of
    six regional markets is still connected with most connections intact after the
    thresholding. Indeed, only one market in that region shows a difference in connectivity
    relative to our non-thresholded version.'
  prefs: []
  type: TYPE_NORMAL
- en: While this example considers correlations across the entire time period, it
    is possible to slice spatiotemporal data into overlapping time slices, create
    time-aware metrics like the local Moran statistic (with or without thresholding),
    and visualize the metrics’ changes over time by plotting a series of networks
    created from these time slices and their network-defining metrics. We’ll explore
    this notion further in [*Chapter 7*](B21087_07.xhtml#_idTextAnchor088) when we
    break our Burkina Faso millet dataset into time slices to analyze changing graph
    metrics over time and space.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know how to wrangle data into an igraph network, let’s see how this
    is done in NetworkX with another example.
  prefs: []
  type: TYPE_NORMAL
- en: Social network examples with NetworkX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here, we’ll consider a social network of **African Institute of Mathematical
    Sciences** (**AIMS**) students collected from a 2022 cohort in Cameroon. Students
    in this program live together in the same building, interact during class, eat
    meals together, and study together. However, students who share a country, come
    from the same undergraduate university, and speak the same language tend to interact
    more frequently than those who come from different backgrounds. Interactions such
    as those shown in *Figure 2**.11* thus happen either organically as a function
    of background or artificially through shared programs and living arrangements:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 2.11 – \uFEFFAn illustration of a classroom setting, where students\
    \ share courses within a program](img/B21087_02_11.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 2.11 – An illustration of a classroom setting, where students share courses
    within a program
  prefs: []
  type: TYPE_NORMAL
- en: 'To understand these interactions within our cohort of students, we administered
    a questionnaire about interactions with other students in various settings. The
    data was collected between November and December of 2022\. The following are some
    example questions:'
  prefs: []
  type: TYPE_NORMAL
- en: Whom do you like to sit with during lunch or dinner?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Who do you like to ask questions when you are having difficulty with a subject
    or course?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: From these questions, students’ perceptions of their networks could be examined
    to see the degree to which they agree. Upon looking at the data, we realized most
    interactions were reciprocated. If *Student A* endorsed survey items of closeness
    to *Student B*, *Student B* was likely to endorse those items, as well. Thus,
    the data form an undirected network of mutual interactions.
  prefs: []
  type: TYPE_NORMAL
- en: The dataset we’ll use includes several fields. In the first column, we have
    the name of the surveyed student. In the next four fields, we have demographic
    factors (to which we’ll return in later chapters), including country of origin,
    age, field of study, and undergraduate background. In the remaining five columns,
    we have five friends that the student most strongly endorsed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start by importing the packages we’ll need to wrangle this dataset into
    a network with `Script 2.2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let’s import the dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'To turn this data into a social network with NetworkX, we’ll need to populate
    our network with vertices and edges, which we can do through loops. We’ll first
    add vertices that include metadata including students’ names and demographic characteristics.
    Then, we’ll add edges that connect vertices based on the five closest relationships
    a particular student endorsed in our survey by adding to `Script 2.2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This gives us our initial network of AIMS students and their closest friends
    within the program. Let’s plot this data to visualize our AIMS student social
    network. Because we want to show the names of students in our plot, we’ll first
    compute the degree of each vertex, a centrality metric that we’ll revisit in later
    chapters. Here, it suffices to show the importance of different students to the
    network and allow vertices to be large enough to visualize the names of students.
    Let’s do this by adding to `Script 2.2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This script should show an image similar to *Figure 2**.12*, which plots the
    social connections between AIMS students:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.12 – Plot of AIMS Cameroon 2022 students’ social interaction network](img/B21087_02_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.12 – Plot of AIMS Cameroon 2022 students’ social interaction network
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 2**.12* shows the network of AIMS students we created from our survey
    data. Note that some students only have the five closest friends as connections
    while others have many more close friends. This is typical of a social network,
    even one created from survey data. Some individuals have more connections than
    others. Some connect to different parts of a network, linking separated communities.
    Some highly connected individuals connect to other highly connected individuals,
    forming dense regions within the larger network. These properties play an important
    role in network analytics, and we’ll dive deeper into their meanings and computation
    in later chapters.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we’ve explored use cases of networks in more depth, wrangled
    a spatial market dataset into a network based on regional connectivity and millet
    price correlation in igraph, and constructed a survey-based social network in
    NetworkX. Now that we have the basic tools needed to construct networks in Python
    from real data sources, in the next chapter, we can turn our attention to some
    real-world applications of network science, where we not only construct a network
    but analyze it for insights that solve important problems in science today.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Berger, S. L., Kouzarides, T., Shiekhattar, R., & Shilatifard, A. (2009). An
    Operational Definition Of Epigenetics. *Genes & development,* *23*(7), 781-783.
  prefs: []
  type: TYPE_NORMAL
- en: 'Caballero, J. (2015). Banking crises and financial integration: Insights from
    networks science. Journal of International Financial Markets, Institutions and
    Money, 34, 127-146.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Christakis, N. A., & Fowler, J. H. (2013). Social contagion theory: examining
    dynamic social networks and human behavior. Statistics in medicine, 32(4), 556-577.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Dubos, R. (2017). Social capital: Theory and research. Routledge.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Ducruet, C., & Beauguitte, L. (2014). Spatial science and network science:
    review and outcomes of a complex relationship. Networks and Spatial Economics,
    14(3-4), 297-316.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Kiss, I. Z., Miller, J. C., & Simon, P. L. (2017). Mathematics of epidemics
    on networks. Cham: Springer, 598, 31.'
  prefs: []
  type: TYPE_NORMAL
- en: Krishnan, H. R., Sakharkar, A. J., Teppen, T. L., Berkel, T. D., & Pandey, S.
    C. (2014). The epigenetic landscape of alcoholism. International Review of Neurobiology,
    115, 75-116.
  prefs: []
  type: TYPE_NORMAL
- en: Moyano, L. G. (2017). Learning network representations. The European Physical
    Journal Special Topics, 226(3), 499-518.
  prefs: []
  type: TYPE_NORMAL
- en: Sharma, S., Kelly, T. K., & Jones, P. A. (2010). Epigenetics in cancer. Carcinogenesis,
    31(1), 27-36.
  prefs: []
  type: TYPE_NORMAL
- en: Sorrells, T. R., & Johnson, A. D. (2015). Making sense of transcription networks.
    Cell, 161(4), 714-723.
  prefs: []
  type: TYPE_NORMAL
