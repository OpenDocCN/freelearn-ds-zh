["```py\nL = ['a' 20.0, 5]\nM = [3,['a', -3.0, 5]]\n```", "```py\nL[1] # returns 20.0\nL[0] # returns 'a'\nM[1] # returns ['a',-3.0,5]\nM[1][2] # returns 5\n```", "```py\nL=list(range(4)) # generates a list with four elements: [0, 1, 2 ,3]\n```", "```py\nL=list(range(17,29,4)) # generates [17, 21, 25]\n```", "```py\nlen(L) # returns 3\n```", "```py\nL = ['C', 'l', 'o', 'u', 'd', 's']\nL[1:5] # remove one element and take four from there:\n# returns ['l', 'o', 'u', 'd']\n```", "```py\nL = ['C', 'l', 'o', 'u','d', 's']\nL[1:] # ['l', 'o', 'u', 'd','s']\nL[:5] # ['C', 'l', 'o','u','d']\nL[:] # the entire list\n```", "```py\nL = ['C', 'l', 'o', 'u', 'd', 's']\nL[-2:] # ['d', 's']\nL[:-2] # ['C', 'l', 'o','u']\n```", "```py\nL = list(range(4)) # [0, 1, 2, 3]\nL[4] # IndexError: list index out of range\nL[1:100] # same as L[1:]\nL[-100:-1] # same as L[:-1]\nL[-100:100] # same as L[:]\nL[5:0] # empty list []\nL[-2:2] # empty list []\n```", "```py\na = [1,2,3]\n for iteration in range(4): \n     print(sum(a[0:iteration-1]))\n```", "```py\nL = list(range(100))\nL[:10:2] # [0, 2, 4, 6, 8]\nL[::20] # [0, 20, 40, 60, 80]\nL[10:20:3] # [10, 13, 16, 19]\n```", "```py\nL[20:10:-3] # [20, 17, 14, 11]\n```", "```py\nL = [1, 2, 3]\nR = L[::-1] # L is not modified\nR # [3, 2, 1]\n```", "```py\nL = ['a', 1, 2, 3, 4]\nL[2:3] = [] # ['a', 1, 3, 4]\nL[3:] = [] # ['a', 1, 3]\n```", "```py\nL[1:1] = [1000, 2000] # ['a', 1000, 2000, 1, 3]\n```", "```py\nL = [1, -17]\nM = [-23.5, 18.3, 5.0]\nL + M # gives [1, -17, 23.5, 18.3, 5.0]\n```", "```py\nn = 3\nn * [1.,17,3] # gives [1., 17, 3, 1., 17, 3, 1., 17, 3]\n[0] * 5 # gives [0,0,0,0,0]\n```", "```py\nL = ['a', 1, 'b', 2]\n'a' in L # True\n3 in L # False\n4 not in L # True\n```", "```py\nL = [1, 2, 3]\nL.reverse() # the list\nL is now reversed\nL # [3, 2, 1]\n```", "```py\nL=[3, 4, 4, 5]\nnewL = L.sort()\n```", "```py\nL = [0, 1, 2, 3, 4]\nL.append(5) # [0, 1, 2, 3, 4, 5]\nL.reverse() # [5, 4, 3, 2, 1, 0]\nL.sort() # [0, 1, 2, 3, 4, 5]\nL.remove(0) # [1, 2, 3, 4, 5]\nL.pop() # [1, 2, 3, 4]\nL.pop() # [1, 2, 3]\nL.extend(['a','b','c']) # [1, 2, 3, 'a', 'b', 'c']\n```", "```py\nL.count(2) # returns 1\n```", "```py\nind = [0,1,2,3,4]\ncolor = [\"red\", \"green\", \"blue\", \"alpha\"]\nlist(zip(color,ind)) # gives [('red', 0), ('green', 1), \n                                          ('blue', 2), ('alpha', 3)]\n```", "```py\n[<expr> for <variable> in <list>]\n```", "```py\n[<expr> for <variable> in <list> if <condition>]\n```", "```py\nL = [2, 3, 10, 1, 5]\nL2 = [x*2 for x in L] # [4, 6, 20, 2, 10]\nL3 = [x*2 for x in L if 4 < x <= 10] # [20, 10]\n```", "```py\nM = [[1,2,3],[4,5,6]]\nflat = [M[i][j] for i in range(2) for j in range(3)] \n# returns [1, 2, 3, 4, 5, 6]\n```", "```py\nv = array([1.,2.,3.])\nA = array([[1.,2.,3.],[4.,5.,6.]])\n```", "```py\nv[2]     # returns 3.0\nA[1,2]   # returns 6.0\n```", "```py\n            M = array([[1.,2.],[3.,4.]])\n            v = array([1., 2., 3.])\n            v[0] # 1\n            v[:2] # array([1.,2.])\n            M[0,1] # 2\n            v[:2] = [10, 20] # v is now array([10., 20., 3.])\n    ```", "```py\n            len(v) # 3\n    ```", "```py\nmy_tuple = 1, 2, 3     # our first tuple\nmy_tuple = (1, 2, 3)   # the same\nmy_tuple = 1, 2, 3,    # again the same\nlen(my_tuple) # 3, same as for lists\nmy_tuple[0] = 'a'   # error! tuples are immutable\n```", "```py\nsingleton = 1,   # note the comma\nlen(singleton)   # 1\n```", "```py\na, b = 0, 1 # a gets 0 and b gets 1\na, b = [0, 1] # exactly the same effect\n(a, b) = 0, 1 # same\n[a,b] = [0,1] # same thing\n```", "```py\n      a, b = b, a # the swap trick; equivalent to:\n      (a, b) = (b, a)\n      # but\n      1, 2 == 3, 4 # returns (1, False, 4) \n      (1, 2) == (3, 4) # returns False\n```", "```py\ntruck_wheel = {'name':'wheel','mass':5.7,\n               'Ix':20.0,'Iy':1.,'Iz':17.,\n               'center of mass':[0.,0.,0.]}\n```", "```py\ntruck_wheel['name']   # returns 'wheel'\ntruck_wheel['mass']   # returns 5.7\n```", "```py\ntruck_wheel['Ixy'] = 0.0\n```", "```py\ntruck_wheel = dict([('name','wheel'),('mass',5.7),('Ix',20.0), \n                    ('Iy',1.), ('Iz',17.), \n                    ('center of mass',[0.,0.,0.])])\n```", "```py\n        for key in truck_wheel.keys():\n            print(key) # prints (in any order) 'Ix', 'Iy', 'name',...\n```", "```py\n        for key in truck_wheel:\n            print(key) # prints (in any order) 'Ix', 'Iy', 'name',...\n```", "```py\n        for value in truck_wheel.value():\n            print(value) \n               # prints (in any order) 1.0, 20.0, 17.0, 'wheel', ...\n```", "```py\n        for item in truck_wheel.items():\n            print(item) \n               # prints (in any order) ('Iy', 1.0), ('Ix, 20.0),...\n```", "```py\nA = {1,2,3,4}\nB = {5}\nC = A.union(B)   # returns set([1,2,3,4,5])\nD = A.intersection(C)   # returns set([1,2,3,4])\nE = C.difference(A)   # returns set([5])\n5 in C   # returns True\n```", "```py\nA = {1,2,3,3,3}\nB = {1,2,3}\nA == B # returns True\n```", "```py\nA = {1,2,3}\nB = {1,3,2}\nA == B # returns True\n```", "```py\nA={1,2,3,4}\nA.union({5})\nA.intersection({2,4,6}) # returns set([2, 4])\n```", "```py\n{2,4}.issubset({1,2,3,4,5}) # returns True\n{1,2,3,4,5}.issuperset({2,4}) # returns True\n```", "```py\nlabel = 'local error'\ntype(label) # returns str\nx = [1, 2] # list\ntype(x) # returns list\n```", "```py\nisinstance(x, list) # True\n```", "```py\ntest = True\nisinstance(test, bool) # True\nisinstance(test, int) # True\ntype(test) == int # False\ntype(test) == bool # True\n```", "```py\nif isinstance(test, int):\n    print(\"The variable is an integer\")\n```", "```py\n    L = [1, 2]\n    L3 = 3*L\n```", "```py\n          L3[0]\n          L3[-1]\n          L3[10]\n    ```", "```py\n           L4 = [k**2 for k in L3]\n    ```", "```py\n    L = [0,1,2,1,0,-1,-2,-1,0]\n```", "```py\nL[0]\nL[-1]\nL[:-1]\nL + L[1:-1] + L\nL[2:2] = [-3]\nL[3:4] = []\nL[2:5] = [-5]\n```", "```py\nL = [n-m/2 for n in range(m)]\nans = 1 + L[0] + L[-1]\n```", "```py\nA.symmetric_difference(B).\n```"]