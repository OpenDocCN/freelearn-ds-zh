- en: 15 Advanced Visualizations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you have already seen in *Chapter 14*, *Exploratory Data Analysis*, thanks
    to the `ggplot2` package and its extensions, you can create very professional-looking
    charts. In this chapter, you''ll see how you can create a very advanced and attractive
    custom chart. You will learn about the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Choosing a circular barplot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing a circular barplot in R
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing a circular barplot in Power BI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This chapter requires you to have a working internet connection and **Power
    BI Desktop** already installed on your machine. You must have properly configured
    the R and Python engines and IDEs as outlined in *Chapter 2*, *Configuring R with
    Power BI*, and *Chapter 3*, *Configuring Python with Power BI*.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing a circular barplot
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Very often, it happens that we need to represent the measures associated with
    various categorical entities using a **bar chart** (or **barplot**). However,
    when the number of entities to be represented exceeds 15 or 20, the graph starts
    to become unreadable, even though you arrange it vertically:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.1 – A barplot of worldwide weapons sellers](img/file390.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.1 – A barplot of worldwide weapons sellers
  prefs: []
  type: TYPE_NORMAL
- en: In this case, as you have already seen in *Chapter 14*, *Exploratory Data Analysis*,
    it is often a good idea to represent a maximum number of entities, after which
    the subsequent individual entities are grouped into a single category (in our
    case, the *Others* category). In this way, the readability of the graph is preserved,
    but part of the information you want to represent is lost.
  prefs: []
  type: TYPE_NORMAL
- en: 'If it is strictly necessary to display all entities with their measure, we
    often resort to a more eye-catching organization of the space occupied by the
    barplot, wrapping it in a circular shape, thus obtaining a **circular barplot**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.2 – Circular barplot of worldwide weapons sellers](img/file391.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.2 – Circular barplot of worldwide weapons sellers
  prefs: []
  type: TYPE_NORMAL
- en: 'The graph becomes more interesting when you need not only to represent all
    entities but also to group them appropriately. Consider having a list of 24 speakers
    at an event, each of whom has received feedback (1 to 5) from viewers on some
    of their characteristics shown during the speech (*Expectation*, *Interesting*,
    *Useful*, and *Oral Presentation*). So, in the end, you have *24 x 4 = 96* entities
    to show. The grouped circular barplot describing this situation is very illustrative:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.3 – A circular barplot with groups of speaker feedback](img/file392.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.3 – A circular barplot with groups of speaker feedback
  prefs: []
  type: TYPE_NORMAL
- en: The circular barplot in *Figure 15.3* is the one we're going to implement using
    R and the `ggplot2` package in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing a circular barplot in R
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The R code you will find in this section is inspired by the code shared with
    the entire R community by the **R Graph Gallery** website ([https://www.r-graph-gallery.com/index.html](https://www.r-graph-gallery.com/index.html)).
    In addition to a few very small additions, we refactored and generalized the code
    into the `circular_grouped_barplot()` function using the `tidy evaluation` framework
    (check the references for further details) so that it can be used with any dataset.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you remember correctly, in R functions you saw in previous chapters, you
    passed column names to functions as strings. Thanks to `tidy evaluation`, you
    can pass them to functions using *tidyverse grammar*, that is, passing them directly
    through a pipeline. Take the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Instead of having that call for the previous function, you will have the following
    one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Note how in the last script, the quotes identifying the strings have disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s take a step-by-step look at what this function does. The code you will
    find here is excerpted from the `01-circular-grouped-barplot.R` file you can find
    in the `Chapter15` folder. Let’s proceed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: First, make sure the `scales` package is already installed in your CRAN R dedicated
    to R visuals (in our case, version 3.4.4). Just check whether its name is in the
    list you can find in the bottom-right **Packages** tab in RStudio. If not, install
    it as always, using the `install.packages('scales')` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The dataset you will use is taken from the `Scores.csv` file you can find in
    the `Chapter15` folder. As mentioned in the previous section, it contains the
    average feedback obtained by 24 speakers from attendees at a conference on some
    of their characteristics shown during the speech. The tibble looks like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 15.4 – The speakers tibble](img/file393.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 15.4 – The speakers tibble
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Immediately after the call to the `circular_grouped_barplot()` function, the
    internal `rescale100()` function is defined, which is used to rescale the values
    of the entire dataset (in our case, the votes) on a scale of 0 to 100.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The execution of the arguments passed to the function via the `enquo()` function
    is then delayed (for more details, see the references):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The categorical variables of the input dataset are transformed into factors,
    and the values are scaled thanks to the function defined previously, all using
    `tidy evaluation`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In order to separate each group of bars, a few empty bars are added at the
    end of each group. First, an empty bars DataFrame is defined:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'It has the following shape:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 15.5 – The empty bars DataFrame](img/file394.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 15.5 – The empty bars DataFrame
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Then, the empty DataFrame is added to the source DataFrame (the `data` one).
    Once the resulting DataFrame is reordered for the grouping variable and values,
    the rows of the empty bars DataFrame are automatically distributed at the end
    of each group:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'A bar identifier is added:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'It is used to calculate the angle at which each label has to be displayed:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We define the DataFrame of the labels, starting from the `data` one, considering
    the correct alignment of the labels with the bars and the correct angle they must
    have to be readable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'A DataFrame for base lines of groups is defined. It contains the start and
    end IDs (bars) of each group, the mean ID of each group (used as a base point
    for group text labels), and the angle at which each text label has to be rotated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'An `if` clause determines whether to initially define a barplot with only one
    group or with multiple groups, depending on the content of the source dataset.
    In our case, since there are four groups, the code is the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The barplot representation is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 15.6 – The representation of the first draft of the barplot](img/file395.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 15.6 – The representation of the first draft of the barplot
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After defining a text justification vector, the previous plot is cleaned of
    unnecessary graphical frills, and it is magically wrapped into a circular shape
    simply by using the `coord_polar()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'What you get is the following first draft:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 15.7 – The first draft of the circular barplot](img/file396.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 15.7 – The first draft of the circular barplot
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Unfortunately, the `coord_polar()` function does not rotate or curve the labels.
    So, you have to add them separately, rotating them manually when needed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Finally, let’s add bar labels appropriately rotated, base lines of groups,
    and group text labels appropriately rotated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The result can be seen in *Figure 15.3*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This is just one demonstration of how effective it is to make complex graphs
    with `ggplot2` by taking advantage of the *grammar of graphics*. As you have seen,
    this framework allows you to approach the creation of a complex chart by adding
    modular logic pieces one at a time, testing the result intuitively.
  prefs: []
  type: TYPE_NORMAL
- en: '**Important Note**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The code used in this section uses an old version of `tidy evaluation`, tied
    to older versions of `rlang`, `dplyr`, and `ggplot2`. This choice is forced by
    the fact that the Power BI service uses an older version of the R engine (3.4.4)
    with older versions of the previous packages.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Starting with versions 4.0 of `rlang`, 3.0.0 of `ggplot2`, and 1.0.0 of `dplyr`,
    the syntaxes used for `tidy evaluation` have been simplified and standardized.
    You can find an example of the same function that draws a circular barplot translated
    for the new versions of the previous packages in the `02-circular-grouped-barplot-new-tidy-eval.R`
    file.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Let’s see now how to implement the circular barplot in Power BI.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing a circular barplot in Power BI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you have already seen in the previous chapters, Power BI is capable of rendering
    graphs developed with `ggplot2` using R visuals. Therefore, whatever the complexity
    of the graph created using `ggplot2`, you can be sure that Power BI handles it
    well.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a circular barplot in Power BI, proceed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure that Power BI Desktop is referencing the version of CRAN R dedicated
    to R visuals in **Options**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Get Data**,  **Text/CSV**, and then  **Connect**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `Scores.csv` file found in the `Chapter15` folder and click **Open**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will see a preview of the CSV file. Make sure to select `65001: Unicode
    (UTF-8)` as **File Origin**. This way, special characters in speaker names will
    be displayed correctly. Then, click on **Load**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **R Visual** icon in the **Visualizations** panel, enable it, and
    then resize the visual as all the available canvas.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Keeping the R visual selected, expand the `Scores` table under the **Fields**
    panel and check all its fields.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the R visual’s **Format** tab and switch off **Title**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the code of the `01-circular-grouped-barplot.R` file into the `Chapter15`
    folder and paste it into the R visual script editor. Then, click on the **Run
    script** arrow icon in the top right of the R script editor (enable the R visual
    every time it’s requested). You’ll get the circular barplot into it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on an empty spot in the report canvas first and then click on the slicer
    visual icon. Then, expand the `Scores` table under the **Fields** panel and check
    the `Characteristic` measure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the downward-pointing arrow at the top right of the slicer to select
    the **Dropdown** slicer type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Resize the bottom and right edges of the slicer, move it to the center of the
    circular barplot, click on its **Format** options, and switch on **Show Select
    All option** under **Selection controls**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can now filter multiple characteristics (using the *Ctrl* key) and the
    circular barplot will update accordingly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.8 – The circular barplot filtered by a slicer in Power BI](img/file397.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.8 – The circular barplot filtered by a slicer in Power BI
  prefs: []
  type: TYPE_NORMAL
- en: Very impressive, huh? By practicing a little bit with `ggplot2` and R, you can
    get as many impressive charts as you want to enrich your analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, you learned how to implement a circular barplot using R and
    `ggplot2`. You also had your first experience with `tidy evaluation` in refactoring
    the code that implements the circular barplot into a function.
  prefs: []
  type: TYPE_NORMAL
- en: After that, you implemented a circular barplot in Power BI.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you'll learn how to develop interactive custom visuals
    in R and Power BI.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For additional reading, check out the following books and articles:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Who Sells More Weapons?* ([https://www.data-to-viz.com/story/OneNumOneCat.html](https://www.data-to-viz.com/story/OneNumOneCat.html))'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Circular barplot with groups* ([https://www.r-graph-gallery.com/297-circular-barplot-with-groups.html](https://www.r-graph-gallery.com/297-circular-barplot-with-groups.html))'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Down the rabbit hole with tidy eval — Part 1 (the old tidy eval way)* ([https://colinfay.me/tidyeval-1/)](https://colinfay.me/tidyeval-1/))'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Tidy evaluation (the new tidy eval way)* ([https://tidyeval.tidyverse.org/)](https://tidyeval.tidyverse.org/))'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
