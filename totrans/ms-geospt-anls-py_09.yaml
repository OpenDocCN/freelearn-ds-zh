- en: ArcGIS API for Python and ArcGIS Online
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will introduce the ArcGIS **Application Program Interface** (**API**)
    for Python and ArcGIS Online. The ArcGIS API for Python is a Python library for
    working with maps and geospatial data. This API can be installed locally using
    `conda` and interacts with Esri's cloud GIS, whether that's ArcGIS Online (SaaS)
    or Portal for ArcGIS, a server product that offers on-premises cloud GIS deployment
    for organizations. The API offers a modern solution to scripting for web mapping
    with Python and works well with Jupyter Notebooks.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the ArcGIS API for Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing the API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the API with different Esri user accounts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing some modules of the API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interacting with the API's map widget
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Searching and displaying vector data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying and geoprocessing of raster data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a personalized account for using ArcGIS Online
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publishing and managing content in ArcGIS Online
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing the ArcGIS API for Python and ArcGIS Online
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Esri, the geospatial software company known for its ArcGIS platform, adopted
    and integrated Python into their ArcGIS desktop software, as well as its successor
    ArcGIS Pro. The first Python site package developed by Esri was the `ArcPy` site
    package, which is a collection of Python modules that offers all existing, as
    well as extended, ArcMap and ArcGIS Pro functionality. Python can now be used
    as a scripting and programming language to automate repetitive tasks that involve
    a lot of interaction with the **Graphical User Interface** (**GUI**). With `ArcPy`,
    these tasks could be carried out through a Python script, add-on, or toolbox.
  prefs: []
  type: TYPE_NORMAL
- en: Python was introduced successfully with ArcGIS desktop, while GIS itself was
    moving into the cloud—not only geospatial data but also the software itself. Esri
    offered organizations the possibility to do this through a variety of cloud environment
    offerings, using either public, private, or hybrid cloud services. In this chapter,
    we'll be using ArcGIS Online, the **Software as a Service** (**SaaS**) offering
    that allows users to create, store, and manage maps, applications, and data. Over
    the last few years, ArcGIS Online has become a key component and an integral part
    of Esri's ArcGIS system. Its users can share maps within an organization or the
    world, through ready-to-use tools that are available for the web, smartphones,
    and tablets.
  prefs: []
  type: TYPE_NORMAL
- en: A Pythonic web API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For users to be able to interact with their GIS data, services, and more, Esri
    developed a completely new Pythonic web API called the **ArcGIS API** for Python,
    which consists of a set of subroutine definitions, protocols, and tools for building
    software and applications. It is built on top of the ArcGIS **REpresentational
    State Transfer** (**REST**) API, along with the ArcGIS API for JavaScript. This
    same API is also used (in the background) within the Python API for displaying
    2D and 3D web maps.
  prefs: []
  type: TYPE_NORMAL
- en: GIS users can download the freely available ArcGIS API for Python and use it
    to manage their cloud GIS environment, whether that's ArcGIS Online, ArcGIS Portal,
    or ArcGIS Enterprise (the product family formerly known as ArcGIS Server). The
    API requires Python 3.5 or higher. It's possible to use the API together with
    the `ArcPy` site package, but this is optional, the API also works without `ArcPy`
    (or any desktop-based GIS product), or even an ArcGIS Online or Portal environment.
  prefs: []
  type: TYPE_NORMAL
- en: The API has been written for a larger audience in mind than the current Python
    user, who would use it for data processing or map design—apart from the scripting
    capabilities, the API allows for GIS visualization and analysis, spatial data/content
    management, as well as organization administration. The API is a work-in-progress,
    since its first release in December of 2006, the API has seen a number of updates
    and the current version is 1.4 at the time of writing. Each new release introduces
    new features. Using the API is similar to working with any other Python library—you
    import the API with an `import` statement and can start using it right away, applying
    standard Python syntax and commands. As you're using it in a web environment to
    access a web GIS, it's best to use the browser-based Jupyter Notebook app.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The API can be installed in different ways. The easiest way is to use `conda`.
    If this is your first install of the API, you might want to create a separate
    virtual environment through Anaconda3 for the API because of its many dependencies.
    It is important that you install the latest available version of the API, as it
    will also ensure you have the latest available `conda` version installed and the
    API’s dependencies. To install the API using `conda`, run the following command
    in a terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The `-c` in the command refers to a channel (which is an online repository).
    When running this command in a terminal, you will be asked to install a list of
    dependencies. A partial list is displayed in the following screenshot. Notice
    that `NumPy` and `pandas` are also installed, two libraries from the `SciPy` stack
    that are used for data science. The API itself is the first package of the list,
    called `arcgis`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ac31cc90-316e-4bc9-8e34-0978aac7160f.png)'
  prefs: []
  type: TYPE_IMG
- en: Testing the API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After the installation, the ArcGIS package can be found in a separate folder
    named `arcgis` followed by the version number inside of the `C:\UserName\Anaconda3\pkgs`
    folder. If you have the API already installed on your computer, you might need
    to update it to the most recent version to ensure everything is working correctly,
    such as the map widget:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The most recent version of the API at the time of writing is 1.4 and requires
    Python 3.5 or higher. You can test your installation by opening the Jupyter Notebook
    app, as follows, from a terminal or run the application directly from Anaconda3:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, run the following code and check to see if a map window opens up and
    you receive no error messages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: If you have ArcGIS Pro installed, then you can install the API by using the
    `conda` environment inside Pro, using the Python package manager. Look for the
    Python tab and click on the Add Packages button. Search for `arcgis`, click Install,
    and accept the terms and conditions.
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If for some reason, you are not able to install and use the API locally, you
    can also try the sandbox version of the API that runs in the cloud [https://notebooks.esri.com/](https://notebooks.esri.com/).
    By clicking this URL, a browser window will open with the Jupyter Notebook, where
    you can create your own Notebooks, run code examples, and use all of the functionality
    of the API.
  prefs: []
  type: TYPE_NORMAL
- en: For an online API reference showing all modules, classes with descriptions,
    and examples see [http://esri.github.io/arcgis-python-api/apidoc/html/index.html](http://esri.github.io/arcgis-python-api/apidoc/html/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: For API updates, release notes, and more, refer to [https://developers.arcgis.com/python/guide/release-notes/](https://developers.arcgis.com/python/guide/release-notes/).
  prefs: []
  type: TYPE_NORMAL
- en: The main page for all info about the API can be found here. It´s an excellent
    source with lots of documentation, a user guide and API reference: [https://developers.arcgis.com/python/](https://developers.arcgis.com/python/).
  prefs: []
  type: TYPE_NORMAL
- en: Authenticating your Esri user accounts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we've installed the API on our machine, it's time to discuss how we
    can use it in combination with different Esri user accounts. As we've said before,
    the API has been created to manage and interact with a web GIS that can be located
    in a cloud environment. To be able to use the API and interact with this web or
    cloud GIS, we need some kind of additional Esri user account to make a connection
    with this web GIS. You can compare this to connecting to an FTP server or remote
    web server from your computer and performing a login procedure using a username
    and password (or token). This procedure ensures a secure connection between server
    and client and access to the right content.
  prefs: []
  type: TYPE_NORMAL
- en: Different Esri user accounts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following Esri user accounts give access to ArcGIS Online using the ArcGIS
    API for Python:'
  prefs: []
  type: TYPE_NORMAL
- en: An anonymous user account that gives you access to ArcGIS Online without passing
    in any user information. This is a quick solution for testing some basic functionality
    but doesn't offer any advanced functionality that comes with a personalized account.
    We'll cover this option as we proceed further in two of the three hands-on exercises
    in this chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An ArcGIS Online organizational account (or Portal for ArcGIS account). This
    requires a (paid) subscription to ArcGIS Online or Portal for ArcGIS. This option
    gives you the most functionality possible but is not covered here.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An ArcGIS Enterprise trial account. This option is free and provides you with
    service credits that are required for creating maps and publishing content. This
    trial account only lasts for 21 days and after that has to be transferred to a
    paid account in order to be continued. Setting up a trial account is covered as
    we proceed further.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A free Esri developer account. This account is part of the ArcGIS Developer
    program that gives you 50 service credits for developing and testing personal
    apps, as well as using ArcGIS Online, among others. This option is covered as
    we proceed further.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, there's the option to create a public ArcGIS account and log in to
    ArcGIS Online using a web browser. Using these login details, you can now connect
    to ArcGIS Online with the API, but with limited functionality. This option was
    added in the 1.3 version of the API and is not covered here.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summarizing the previously mentioned points, we have covered a number of different
    user accounts to access ArcGIS Online with the API. A personalized account gives
    you added functionality over an anonymous one. We'll use both types for the exercises
    later in this chapter. Let's now look at how the API is organized into different
    modules and what functionality they offer.
  prefs: []
  type: TYPE_NORMAL
- en: Different modules of the ArcGIS API for Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Just like other Python libraries, the API has Python modules, classes, functions,
    and types that can be used for managing and working with elements of the ArcGIS
    platform information model. Because the API is meant for different user groups
    that require their own unique tools, the API has been organized into 13 different
    modules. It''s not necessary to cover them all here, but the most important ones
    for this chapter are mentioned as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The GIS module: This is the most important module and is the entry point to
    a GIS that is hosted in ArcGIS Online or ArcGIS Portal. The GIS module lets you
    manage users, groups, and content in a GIS. The term GIS refers in this context
    to a collaborative environment for creating, visualizing, and sharing maps, scenes,
    apps, layers, analytics, and data.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The features module: This module represents the vector data part of the API.
    Vector data is represented through this module as feature data, feature layers,
    or collections of feature layers. Individual data elements are represented by
    feature objects, while classes such as `FeatureSet`, `FeatureLayer`, and `FeatureCollection`
    represent different groupings of feature data.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The raster module: This module contains classes and raster analysis functions
    for working with raster data and imagery layers. Whereas the features module represents
    the vector data component of the API, the raster module is the raster data component.
    This module uses the `Imagerylayer` class for displaying data from imagery services
    and offers raster functions for on-the-fly image processing. Imagery layers can
    be visualized using the map widget.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The geoprocessing module: This module is required for importing toolboxes with
    geoprocessing capabilities that are not part of the API but are available through
    ArcGIS Online. These geoprocessing toolboxes are imported as native Python modules
    so that you can call the functions available in the imported module to invoke
    these tools. The API itself also includes a rich collection of geoprocessing tools,
    that are available through other modules defined by spatial data type.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A geoprocessing tool is a function that performs an operation on GIS data, starting
    with an input dataset. Then, an operation is performed on that dataset, and finally
    the result of the operation is returned as an output dataset.
  prefs: []
  type: TYPE_NORMAL
- en: 'The widgets module: It provides components for visualizing GIS data and analysis
    and includes the MapView Jupyter Notebook widget. We''ll use this widget next
    for visualizing maps and layers. This is not the only visualization module—the
    separate mapping module offers different mapping layers and 2D/3D mapping and
    visualization components.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As you can see, the API offers a broad range of modules for different tasks
    and users, ranging from publishing mapping data, performing geospatial analysis,
    and data manipulation. All modules use Python as the scripting language to manage
    GIS data and functionality. Let's now start using the API and explore some of
    the basic functionality before moving on to more advanced tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 1 – importing the API and using the map widget
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It''s now time to start using the API. Follow the instructions as mentioned,
    open a new Notebook in the Jupyter Notebook application where you can access the
    API. Type and run the following code. We''ll start by importing the API so that
    we can use its modules, functions, and classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The second line of the code can be broken down as follows—`arcgis.gis` refers
    to a submodule (`gis`) in the `arcgis` module. What''s being imported (`GIS`),
    is a `GIS` object that includes a map widget for displaying geographic locations,
    visualizing GIS content, as well as the analysis results. Next, we''ll create
    a `GIS` object by assigning it to a variable with the same name, but spelled in
    lowercase:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This is an example of an anonymous login as we don''t pass in any login details
    between the parentheses of `GIS()`. Now we''ll use the map widget by creating
    a map object and assigning it to a variable that can then be queried to bring
    up the widget in the Notebook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that you have to repeat and run the variable name on a separate, new line
    to have a map displayed. A map window will be opened in your Jupyter Notebook
    application showing a 2D color map of the city of San Francisco:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d3761169-f2b8-4498-b431-c9d4d8c6d780.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can adjust the zoom level of the map through the `zoom` property and passing
    in an integer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'A map display without a zoom-level value gives you a default zoom value of
    2\. A larger value will give you a smaller area showing more details, using a
    larger scale. This map is one of the several basemaps that ArcGIS Online offers
    as a backdrop for mapping data. We can query which type of basemap we''re displaying
    currently:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'You might want to know how to access all of the object properties. This can
    be done by typing the object name, followed by a dot and pressing *Tab*. Then,
    a window with a drop-down list containing all available properties will be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/89d04b73-9663-4b96-b7f5-60b21eb1d20e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see the `basemap` property being listed in the previously mentioned
    screenshot. For more information on a given property, select the property of your
    choice followed by a question mark. Then, an information window will open at the
    bottom of your screen displaying more information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The `basemaps` property can also be queried directly and returns a list object
    including new lines for each value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We can use the information from this window by changing our basemap, by passing
    in one of the available options in the basemap property (note the singular) as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see that our basemap now shows a satellite image of San Francisco:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/299420fd-018f-4881-8dfe-b2b59f24f411.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we''ll query the **coordinate reference system** (**CRS**) of the map
    that is displayed in our map widget. This information can be queried with the
    extent property, which also shows the four coordinates of our `extent`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Let's have a look at the output. Our basemap is an example of a web map, which
    comes in **JavaScript Object Notation** (**JSON**) format for sharing 2D maps.
    Web maps are an example of an Esri specification that allows different applications,
    APIs, and SDKs to create, edit, and display maps. These web maps can be used for
    different Esri applications, such as ArcGIS Online in this particular example.
    The web map specification is in JSON**,** which is indeed the case with our output
    by looking at how it is structured using brackets and using key-value pairs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Back to the spatial reference, this information is stored in the `spatialReference`
    object, located at the top-level of the web map JSON hierarchy. In our example,
    we can see the spatial reference being set as `latestWKid: 3857` and `wkid: 102100`.
    Consulting Esri''s online web map specification available at [http://developers.arcgis.com](http://developers.arcgis.com),
    we can see that both refer to a Web Mercator projection, the de facto standard
    for web mapping applications and used by most major online map providers.'
  prefs: []
  type: TYPE_NORMAL
- en: This concludes our first hands-on exercise of the API in which we learned how
    to import the API, create a map object, display information on properties of an
    object, and use the map widget. In our next exercise, we'll start working with
    content from ArcGIS Online and add it to our map widget. We'll use a personalized
    account, which enables us to create our own web maps and host them online. Before
    we can do this, you'll need to create a personalized ArcGIS Online account, which
    we'll cover next.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a personalized ArcGIS Online account
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For the following exercise, you'll need a named user account for ArcGIS Online.
    This will enable you to create your own map content, save web maps in your own
    content folder in ArcGIS Online, share content with others, and more. We'll cover
    two free options to do this. The easiest and quickest way is to create a free
    ArcGIS developer account, which comes with the service credits required to use
    some of the capabilities of ArcGIS Online. It's also possible to create a free
    organizational trial account for ArcGIS Online, which has more options. Both options
    are covered here.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create an ArcGIS Developer account, open a browser window and navigate to
    [https://developers.arcgis.com/sign-up](https://developers.arcgis.com/sign-up).
    Fill in the fields on the left (First Name, Last Name, and Email):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e4280b8a-e20b-4699-92b1-731122faac93.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, you'll receive a confirmation email that is sent to the email address
    you entered online. The email contains a URL that you need to click on to active
    your account. After that, you can set up your account and choose a username and
    password. This username and password can be used to log in to ArcGIS Online using
    the ArcGIS API for Python. You will also be assigned an account URL path, something
    like `http://firstname-lastname.maps.arcgis.com`. This URL path is also required
    for logging into ArcGIS Online using the ArcGIS API for Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we''ll explain how to create a public ArcGIS account. Navigate to [www.arcgis.com](http://www.arcgis.com)
    and click the orange Free trial -> button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/14072f4a-9935-4ebd-abd8-e14e0bd13397.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, you will be directed to a new page with a form that needs to be filled
    in with your personal details. After that, you can create an ArcGIS Online account.
    The username and password can be used as login details for ArcGIS Online.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 2 – searching, displaying, and describing geospatial content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the following exercise, we'll search for online content, add it to our map,
    and describe the data. We'll finish by saving your map widget directly into a
    web map that is stored in your personal content folder in ArcGIS Online. This
    is a new feature that comes with the 1.3 version of the API, which makes it really
    easy to create web maps. The content we'll be using is a feature layer file containing
    bike trails in Solano County in California. This content is available through
    ArcGIS Online. We can use the API to search the content, reference it, and add
    it to our map widget in our Jupyter Notebook app.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we''ll log into ArcGIS Online using a personal account. Read the code
    and follow the instructions as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: In the previous code, you are required to type your own personal details between
    the brackets following the capitalized `GIS` in the third line, starting with
    a personal URL, username, and password. If you've created a free ArcGIS developer
    account, this will look something like `gis` = `GIS(“https://firstname-lastname.maps.arcgis.com”,
    “username”, “password”)`. If you've signed up for a trial period for ArcGIS Online,
    the first URL will be [https://www.arcgis.com](https://www.arcgis.com), followed
    by your username and password.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we''ll open up a map of Solano County, our area of interest:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'To search for specific content outside of our own organization, use the following
    code that includes a query with specific search terms. Here, we''ve used trails
    in and near San Francisco:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'In the previous code, we''re using the content property of the GIS object to
    search for content. Using a personalized account, we specify we want to search
    for data outside of our own organization. Our query is looking for trails near
    San Francisco of the type `"Feature Layer"`. Next, the results are returned by
    repeating the variable name. The output in this case looks like the following
    list but could be different for the reader. For brevity, only the first three
    search results are shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The items are returned as a list, with each item consisting of its title, type,
    and owner name. We can also show this items list in a different way if we use
    the Jupyter Notebook application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, our search results are returned with a thumbnail picture, a title, and
    description. The title is also a hyperlink that will take you to an ArcGIS Online
    web page where you can display the content in a viewer and consult the metadata.
    We are interested in the following item showing bike trails in Solano County in
    a feature collection. This is a collection of feature layers and a table, meaning
    we have to find a way to access the right feature layer and add it to our map
    widget:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/44a025b9-ebd7-4acb-9f40-542630c09d89.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We now want to display the bike trail data from this feature collection on
    the map. To do this, we need to reference the data source in our code. We can
    do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The code works as follows, the first line creates a variable that references
    the item from our search results list that contains the Bike Trails service layer.
    Next, we'll use the layers property on this item to see how many layers the item
    contains, in this case two layers, indexed `0` and `1`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we want the names of both layers. Using a `for` loop, we can `print`
    the layer names:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see that the bike trails are stored in the first layer. Next, we''ll
    reference this layer within the service layer by assigning it the `name bike_trails_layer` variable.
    We''ll also print the feature layer URL by repeating our newly created variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Using a `pandas` dataframe, we can visualize the attribute table that comes
    with the layer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Limiting the output to the first five rows using the `head()` function, we
    get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d8fda3a7-75e1-43e5-bd21-bfcce1c5d574.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can now add the layer to the map and look at the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The bike trails will be displayed on top of our basemap in the map widget.
    If you don''t see the trails, you may need to zoom in and out a few times, as
    well as pan the map to the right until you see the following result, showing the
    different bike trails as line segments on top of the basemap:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/48bb0741-6acc-4abc-a7c6-02c6eb5752b8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We''ll now create our own web map from this map widget. This is a recent feature
    of the API, which is very powerful for creating and hosting your own web maps
    in ArcGIS Online. This is not the only way to create web maps, but serves as an
    example of how you can use the API to do this. By importing the `WebMap` class,
    we can create an instance of this class through a variable called `wm`, which
    will store our web map. Using the `save` function, we can simply save this map
    widget as a web map in our own organization''s content folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Python returns our item that we can immediately visit online by clicking the
    URL underlined in blue, after providing our login credentials to access our organizational
    page of ArcGIS Online:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/36720b69-491e-4356-9404-f0735b11b5eb.png)'
  prefs: []
  type: TYPE_IMG
- en: We can edit the metadata in the overview tab, while we can delete it in the
    Settings tab (scroll down to see this option marked in red).
  prefs: []
  type: TYPE_NORMAL
- en: 'Returning to our Jupyter Notebook, we can display the information from the
    service URL using Python, returning output in JSON format, showing only the first
    three results here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'By using a `for` loop, we can display the field names:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also access individual properties of the feature layer, for example
    the `extent`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: This concludes the second exercise, in which we learned how to search for content,
    add it to our map widget, and describe the data we're working with. We'll now
    have a look at the raster module to see how we can visualize and process raster
    imagery.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 3 – working with raster data and the API's geoprocessing functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this exercise, we''ll have a look at the raster module. We''ll work with
    raster data in the form of Landsat 8 satellite images and look at ways to describe
    the data and use geoprocessing functionality from ArcGIS Online. As always, we''ll
    start with importing the `arcgis` package and `gis` module, this time using an
    anonymous login:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we''ll search for content—we''ll specify that we''re looking for imagery
    layers, the data type for imagery used for the raster module. We limit the results
    to a maximum of `2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we''ll display the items as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The output shows the following two items:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c634707a-8be2-4d92-a456-b7f1a0a51ccf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We''re interested in the first item of the results. We can reference it as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s now investigate this item a little more by clicking the blue Landsat
    8 Views URL. It takes you to a web page with a description of the dataset. Have
    a look at the band numbers and their description. The API offers raster functions
    available on this landsat layer, which we''ll get to in a minute. First, we''ll
    access the imagery layer through the layers property of the item:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we can reference and visualize the layer as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The output shows the layer, covering the whole earth:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0bc10ec9-1cd2-4e64-88e3-fa1991e4220b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Having the image layer available as a Python object we can print all of available
    properties, returned, as before, in JSON:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'A more visually attractive imagery layer item description can be printed using
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Using a `pandas` dataframe, we can explore the different wavelength bands in
    more detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is now presented in a `pandas` dataframe object:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/70c48a35-0ede-47d2-908e-00bfcff984ff.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we''ll get to the raster functions part. The API provides a set of raster
    functions to be used on the imagery layer that are rendered server-side and returned
    to the user. To minimize the output, the user needs to specify a location or area,
    whose screen extent will be used as input for a raster function. Raster functions
    can also be chained together and work on large datasets too. The following `for`
    loop displays all of the available raster functions available for this particular
    dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'The output shows all of the available raster functions on a separate line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3eabc582-d027-4456-a89d-6d5edb8a620e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This information is also present in the full properties list we printed out
    earlier. Next, we''ll try out some of these raster functions on a map showing
    the area of Madrid, Spain. We''ll start by creating an instance of the map:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we''ll add our satellite image to the map widget, which we can use for
    various raster functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f8c5c752-f5ca-43ac-899e-ae2075fc3d14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We''ll now need to import the `apply` function from the raster module in order
    to apply the raster functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'First, we''ll create a natural color image with dynamic range adjustment, using
    bands 4, 3, and 2:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the map as follows and see how it is different than before:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/14851948-bf1b-483b-ad14-91049c238d94.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We''ll repeat the procedure, but this time we''ll visualize the agricultural
    map:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'This raster function uses the bands 6, 5 and 2, referring to shortwave IR-1,
    near-IR and blue, respectively.  We can see that our study area shows all of the
    three following categories—vigorous vegetation is bright green, stressed vegetation
    dull green, and bare areas as brown. We can verify the results in our map widget:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0046dab1-8ba3-40a2-bb42-b2a44719f1ea.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the raster module enables quick geoprocessing of raster imagery
    in the cloud, and returns and displays the results on your screen quickly. This
    is just one of the many raster functions of the module, and there is much more
    to discover. This concludes this exercise where we looked at how we search for
    raster imagery, display it, and use geoprocessing capabilities of ArcGIS Online
    using the ArcGIS API for Python’s raster module.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter introduced the brand new ArcGIS API for Python, which is built
    on Python 3.5\. You learned how to make use of the API, Jupyter Notebooks, and
    data processing with data stored in the cloud-based ArcGIS Online system. We covered
    how the API is organized into different modules, how to install the API, how to
    use the map widget, how to log in to ArcGIS Online using different user accounts,
    and working with vector and raster data. Using some of the API modules, we learned
    how to use the API for Python to perform basic geospatial analysis and to create
    ArcGIS Online web maps.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will introduce Python tools for interacting with cloud-based
    data for search and fast data processing. In particular, it focuses on the use
    of Elasticsearch and MapD GPU databases, both of which are based on the AWS cloud
    infrastructure. The reader will learn to create cloud services for geospatial
    search, geolocated data processing, geolocated data, and learn how to use Python
    libraries to interact with these services.
  prefs: []
  type: TYPE_NORMAL
