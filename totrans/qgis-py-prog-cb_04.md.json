["```py\n    rasterLyr = QgsRasterLayer(\"/qgis_data/rasters/SatImage.tif\", \"Gulf Coast\")\n\n    ```", "```py\n    rasterLyr.isValid()\n\n    ```", "```py\n    QgsMapLayerRegistry.instance().addMapLayers([rasterLyr])\n\n    ```", "```py\n    rasterLyr = QgsRasterLayer(\"/qgis_data/rasters/satimage.tif\", \"Sat Image\")\n    rasterLyr.isValid()\n\n    ```", "```py\n    rasterLyr.rasterUnitsPerPixelX()\n\n    ```", "```py\n    rasterLyr.rasterUnitsPerPixelY()\n\n    ```", "```py\n    rasterLyr = QgsRasterLayer(\"/qgis_data/rasters/satimage.tif\", \"satimage\")\n    rasterLyr.isValid()\n\n    ```", "```py\n    rasterLyr.width()\n\n    ```", "```py\n    rasterLyr.height()\n\n    ```", "```py\n    rasterLyr = QgsRasterLayer(\"/qgis_data/rasters/satimage.tif\", \"Sat Image\")\n    rasterLyr.isValid()\n\n    ```", "```py\n    rasterLyr.bandCount()\n\n    ```", "```py\n    rasterLyr = QgsRasterLayer(\"/qgis_data/rasters/FalseColor.tif\", \"Band Swap\")\n    rasterLyr.isValid()\n\n    ```", "```py\n    ren = rasterLyr.renderer()\n\n    ```", "```py\n    ren.setRedBand(2)\n\n    ```", "```py\n    ren.setGreenBand(1)\n\n    ```", "```py\n    QgsMapLayerRegistry.instance().addMapLayers([rasterLyr])\n\n    ```", "```py\n    rasterLyr = QgsRasterLayer(\"/qgis_data/rasters/satimage.tif\", \"Sat Image\")\n    rasterLyr.isValid()\n\n    ```", "```py\n    c = rasterLyr.extent().center()\n\n    ```", "```py\n    qry = rasterLyr.dataProvider().identify(c, QgsRaster.IdentifyFormatValue)\n\n    ```", "```py\n    qry.isValid()\n\n    ```", "```py\n    qry.results()\n\n    ```", "```py\n    {1: 17.0, 2: 66.0, 3: 56.0}\n\n    ```", "```py\n    import processing\n\n    ```", "```py\n    rasterLyr = QgsRasterLayer(\"/qgis_data/rasters/SatImage.tif\", \"Reproject\")\n    rasterLyr.isValid()\n\n    ```", "```py\n    processing.runalg(\"gdalogr:warpreproject\", rasterLyr, \"EPSG:4326\", \"EPSG:3722\", None, 0, None, \"/0, qgis_data/rasters/warped.tif\")\n\n    ```", "```py\n    import processing\n\n    ```", "```py\n    rasterLyr = QgsRasterLayer(\"/qgis_data/rasters/dem.asc\", \"Hillshade\")\n    rasterLyr.isValid()\n\n    ```", "```py\n    processing.runandload(\"gdalogr:hillshade\", rasterLyr, 1, False, False, 1.0, 1.0, 315.0, 45.0, \"/qgis_data/rasters/hillshade.tif\")\n\n    ```", "```py\n    import processing\n\n    ```", "```py\n    rasterLyr = QgsRasterLayer(\"/qgis_data/rasters/dem.asc\", \"DEM\")\n    rasterLyr.isValid()\n\n    ```", "```py\n    QgsMapLayerRegistry.instance().addMapLayers([rasterLyr])\n\n    ```", "```py\n    processing.runandload(\"gdalogr:contour\", rasterLyr, 50.0, \"Elv\", None, \"/qgis_data/rasters/contours.shp\")\n\n    ```", "```py\n    import numpy\n    from PyQt4.QtCore import *\n\n    ```", "```py\n    spacing = .1\n\n    ```", "```py\n    inset = .04\n\n    ```", "```py\n    rasterLyr = QgsRasterLayer(\"/qgis_data/rasters/satimage.tif\", \"Sat Image\")\n    rasterLyr.isValid()\n\n    ```", "```py\n    rpr = rasterLyr.dataProvider()\n    epsg = rasterLyr.crs().postgisSrid()\n    ext = rasterLyr.extent()\n\n    ```", "```py\n    vectorLyr = QgsVectorLayer('Point?crs=epsg:%s' % epsg, 'Grid' , \"memory\")\n\n    ```", "```py\n    vpr = vectorLyr.dataProvider()\n    qd = QVariant.Double\n\n    ```", "```py\n    vpr.addAttributes([QgsField(\"Red\", qd), QgsField(\"Green\", qd), QgsField(\"Blue\", qd)])\n    vectorLyr.updateFields()\n\n    ```", "```py\n    xmin = ext.xMinimum() + inset\n    xmax = ext.xMaximum()\n    ymin = ext.yMinimum() + inset\n    ymax = ext.yMaximum() â€“ inset\n\n    ```", "```py\n    pts = [(x,y) for x in (i for i in numpy.arange(xmin, xmax, spacing)) for y in (j for j in numpy.arange(ymin, ymax, spacing))]\n\n    ```", "```py\n    feats = []\n\n    ```", "```py\n    for x,y in pts:\n     f = QgsFeature()\n     f.initAttributes(3)\n     p = QgsPoint(x,y)\n     qry = rasterLyr.dataProvider().identify(p, QgsRaster.IdentifyFormatValue)\n     r = qry.results()\n     f.setAttribute(0, r[1])\n     f.setAttribute(1, r[2])\n     f.setAttribute(2, r[3])\n     f.setGeometry(QgsGeometry.fromPoint(p))\n     feats.append(f)\n\n    ```", "```py\n    vpr.addFeatures(feats)\n\n    ```", "```py\n    vectorLyr.updateExtents()\n\n    ```", "```py\n    QgsMapLayerRegistry.instance().addMapLayers([rasterLyr,vectoryr])\n\n    ```", "```py\n    canvas = iface.mapCanvas()\n    canvas.setExtent(rasterLyr.extent())\n    canvas.refresh()\n\n    ```", "```py\n    import processing\n\n    ```", "```py\n    pth = \"/qgis_data/rasters/path/\"\n    rasterPth = pth + \"elevation.asc\"\n    vectorPth = pth + \"path.shp\"\n    pointsPth = pth + \"points.shp\"\n    elvPointsPth = pth + \"elvPoints.shp\"\n\n    ```", "```py\n    rasterLyr = QgsRasterLayer(rasterPth, \"Elevation\")\n    rasterLyr.isValid()\n    vectorLyr = QgsVectorLayer(vectorPth, \"Path\", \"ogr\")\n    vectorLyr.isValid()\n\n    ```", "```py\n    QgsMapLayerRegistry.instance().addMapLayers([vectorLyr, rasterLyr])\n\n    ```", "```py\n    processing.runalg(\"saga:convertlinestopoints\", vectorLyr, False, 1, pointsPth)\n\n    ```", "```py\n    processing.runandload(\"saga:addgridvaluestopoints\", pointsPth, rasterPth, 0, elvPointsPth)\n\n    ```", "```py\n    import processing\n\n    ```", "```py\n    processing.runalg(\"script:unifyextentandresolution\",\"/qgis_data/rasters/Image2.tif;/qgis_data/rasters/Image1.tif\",-9999,\"/qgis_data/rasters\",True)\n\n    ```", "```py\n    Image1_unified.tif\n    Image2_unfied.tif\n\n    ```", "```py\n    import processing\n\n    ```", "```py\n    rasterLyr = QgsRasterLayer(\"/qgis_data/rasters/SatImage.tif\", \"Resample\")\n    rasterLyr.isValid()\n\n    ```", "```py\n    epsg = rasterLyr.crs().postgisSrid()\n    srs = \"EPSG:%s\" % epsg\n\n    ```", "```py\n    res = rasterLyr.rasterUnitsPerPixelX() * 2\n\n    ```", "```py\n    processing.runalg(\"gdalogr:warpreproject\", rasterLyr, srs, srs, res, 0, None, 0,  \"/qgis_data/rasters/resampled.tif\")\n\n    ```", "```py\n    import gdalnumeric\n\n    ```", "```py\n    a = gdalnumeric.LoadFile(\"/qgis_data/rasters/satimage.tif\")\n\n    ```", "```py\n    b = a.T.ravel()\n    c=b.reshape((b.size/3,3))\n    order = gdalnumeric.numpy.lexsort(c.T)\n    c = c[order]\n    diff = gdalnumeric.numpy.diff(c, axis=0)\n    ui = gdalnumeric.numpy.ones(len(c), 'bool')\n    ui[1:] = (diff != 0).any(axis=1)\n    u = c[ui]\n\n    ```", "```py\n    u.size\n\n    ```", "```py\n    processing.runalg(\"gdalogr:merge\",\"C:/qgis_data/rasters/Image2.tif;C:/qgis_data/rasters/Image1.tif\",False,False,\"/qgis_data/rasters/merged.tif\")\n\n    ```", "```py\n    from osgeo import gdal\n\n    ```", "```py\n    drv = gdal.GetDriverByName(\"JP2OpenJPEG\")\n\n    ```", "```py\n    src = gdal.Open(\"/qgis_data/rasters/satimage.tif\")\n\n    ```", "```py\n    tgt = drv.CreateCopy(\"/qgis_data/rasters/satimage.jp2\", src)\n\n    ```", "```py\n    import processing\n\n    ```", "```py\n    processing.runalg(\"gdalogr:overviews\",\"/qgis_data/rasters/FalseColor.tif\",\"2 4 8 16\",True,0,1)\n\n    ```", "```py\n    from osgeo import gdal\n\n    ```", "```py\n    def Pixel2world(geoMatrix, x, y):\n     ulX = geoMatrix[0]\n     ulY = geoMatrix[3]\n     xDist = geoMatrix[1]\n     yDist = geoMatrix[5]\n     coorX = (ulX + (x * xDist))\n     coorY = (ulY + (y * yDist))\n     return (coorX, coorY)\n\n    ```", "```py\n    src = gdal.Open(\"/qgis_data/rasters/Satimage.tif\")\n\n    ```", "```py\n    geoTrans = src.GetGeoTransform()\n\n    ```", "```py\n    centerX = src.RasterXSize/2\n    centerY = src.RasterYSize/2\n\n    ```", "```py\n    Pixel2world(geoTrans, centerX, centerY)\n\n    ```", "```py\n    (-89.59486002580364, 30.510227817850406)\n\n    ```", "```py\n    from osgeo import gdal\n\n    ```", "```py\n    def world2Pixel(geoMatrix, x, y):\n     ulX = geoMatrix[0]\n     ulY = geoMatrix[3]\n     xDist = geoMatrix[1]\n     yDist = geoMatrix[5]\n     rtnX = geoMatrix[2]\n     rtnY = geoMatrix[4]\n     pixel = int((x - ulX) / xDist)\n     line = int((y - ulY) / yDist)\n     return (pixel, line)\n\n    ```", "```py\n    src = gdal.Open(\"/qgis_data/rasters/satimage.tif\")\n\n    ```", "```py\n    geoTrans = src.GetGeoTransform()\n\n    ```", "```py\n    world2Pixel(geoTrans, -89.59486002580364, 30.510227817850406)\n\n    ```", "```py\n    (1296, 1346)\n\n    ```", "```py\n    from osgeo import gdal\n    import zipfile\n\n    ```", "```py\n    srcf = \"/qgis_data/rasters/Satimage.tif\"\n\n    ```", "```py\n    vfn = \"/vsimem/satimage.jpg\"\n\n    ```", "```py\n    drv = gdal.GetDriverByName('JPEG')\n\n    ```", "```py\n    src = gdal.Open(srcf)\n\n    ```", "```py\n    tgt = drv.CreateCopy(vfn, src)\n\n    ```", "```py\n    rasterLyr = QgsRasterLayer(srcf, \"SatImage\")\n\n    ```", "```py\n    e = rasterLyr.extent()\n\n    ```", "```py\n    kml = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <kml >\n      <Document>\n        <name>QGIS KML Example</name>\n        <GroundOverlay>\n            <name>SatImage</name>\n            <drawOrder>30</drawOrder>\n            <Icon>\n              <href>SatImage.jpg</href>\n            </Icon>\n            <LatLonBox>\n              <north>%s</north>\n              <south>%s</south>\n              <east>%s</east>\n              <west>%s</west>\n            </LatLonBox>\n        </GroundOverlay>\n      </Document>\n    </kml>\"\"\" %(e.yMaximum(), e.yMinimum(), e.xMaximum(), e.xMinimum())\n    ```", "```py\n    vsifile = gdal.VSIFOpenL(vfn,'r')\n    gdal.VSIFSeekL(vsifile, 0, 2)\n    vsileng = gdal.VSIFTellL(vsifile)\n    gdal.VSIFSeekL(vsifile, 0, 0)\n\n    ```", "```py\n    z = zipfile.ZipFile(\"/qgis_data/rasters/satimage.kmz\", \"w\", zipfile.ZIP_DEFLATED)\n    z.writestr(\"doc.kml\", kml)\n    z.writestr(\"SatImage.jpg\", gdal.VSIFReadL(1, vsileng, vsifile))\n    z.close()\n\n    ```", "```py\n    import processing\n\n    ```", "```py\n    processing.runandload(\"otb:unsupervisedkmeansimageclassification\",\"/qgis_data/rasters/FalseColor.tif\",768,None,10000,3,1000,0.95,\"/qgis_data/rasters/classify.tif\",None)\n\n    ```", "```py\n    import processing\n\n    ```", "```py\n    processing.runalg(\"gdalogr:polygonize\",\"C:/qgis_data/rasters/landuse_bay.tif\",\"DN\",None)\n\n    ```", "```py\n    from processing.algs.gdal.GdalUtils import GdalUtils\n\n    ```", "```py\n    src = \"/qgis_data/rasters/georef/1853survey.jpg\"\n    points = \"/qgis_data/rasters/georef/1853Survey.points\"\n    trans = \"/qgis_data/rasters/georef/1835survey_trans.tif\"\n    final = \"/qgis_data/rasters/georef/1835survey_georef.tif\"\n\n    ```", "```py\n    gcp = open(points, \"rb\")\n    hdr = gcp.readline()\n\n    ```", "```py\n    command = [\"gdal_translate\"]\n\n    ```", "```py\n    for line in gcp:\n     x,y,col,row,e = line.split(\",\")\n     command.append(\"-gcp\")\n     command.append(\"%s\" % col)\n     command.append(\"%s\" % abs(float(row)))\n     command.append(\"%s\" % x)\n     command.append(\"%s\" % y)\n\n    ```", "```py\n    command.append(src)\n    command.append(trans)\n\n    ```", "```py\n    GdalUtils.runGdal(command, None)\n\n    ```", "```py\n    command = [\"gdalwarp\"]\n    command.extend([\"-r\", \"near\", \"-order\", \"3\", \"-co\", \"COMPRESS=NONE\", \"-dstalpha\"])\n\n    ```", "```py\n    command.append(trans)\n    command.append(final)\n\n    ```", "```py\n    GdalUtils.runGdal(command, None)\n\n    ```", "```py\n    import processing\n\n    ```", "```py\n    processing.runandload(\"gdalogr:cliprasterbymasklayer\",\"/qgis_data/rasters/SatImage.tif\",\"/qgis_data/hancock/hancock.shp\",\"none\",False,False,\"\",\"/qgis_data/rasters/clipped.tif\")\n\n    ```"]