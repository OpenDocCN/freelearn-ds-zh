- en: Chapter 11. The Future of ArcGIS Development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What does the future hold for those who want to develop map applications for
    ArcGIS Server? After all, the direction of the Internet changes with each new
    technology, and what is popular today might not be popular tomorrow. The Flex
    and Silverlight APIs were quite popular at one point, and now they're only being
    maintained. What does the future hold for ArcGIS Server development with JavaScript?
  prefs: []
  type: TYPE_NORMAL
- en: If the latest releases from ESRI are any indication, JavaScript is still the
    development language of choice for the web. However, instead of letting users
    build applications from scratch, the ArcGIS platform has released new features
    that can jump start application development. Two of them, ArcGIS Online and Web
    AppBuilder, are based on the ArcGIS JavaScript API. We'll take a look at these
    technologies, and develop an application using a map created with ArcGIS Online.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: How to use ArcGIS Online to create web maps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What Web AppBuilder is and how it relates to ArcGIS Online
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use an ArcGIS Online web map in your ArcGIS JavaScript API application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ArcGIS Online
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'ArcGIS Online is ESRI''s online tool for creating web maps in the cloud. ArcGIS
    Online provides a way for users to create web maps, mix and match map services
    and other data sources, modify popups, and share the resulting web maps, either
    with the general public or within their organizations. This is a screenshot of
    the ArcGIS Online page where you can add data from different sources into custom
    maps:'
  prefs: []
  type: TYPE_NORMAL
- en: '![ArcGIS Online](img/6459OT_11_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Besides referencing data through web maps, ArcGIS Online subscriptions allow
    you to upload and store data. Tiled map services can be created with tiled map
    packages generated through ArcGIS Server. Feature services can be created to store,
    update, and retrieve feature data. You can also use other ArcGIS Server extensions,
    such as geocoding and routing through ArcGIS Online. This means that you don't
    have to use your own hardware to host your data. You can maintain your feature
    data and tiled maps in the ArcGIS Online cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Now, I'm sure you're wondering how ESRI can afford to offer these features.
    The more advanced services cost credits, which can be purchased through ESRI.
    Each simple transaction can cost a fraction of a credit, but repeated use can
    add up. Tiled and feature services also cost credits, and are charged by gigabytes
    of storage per month. Depending on the size of your organization, you get an allotted
    number of credits per year, with the option to purchase more. However, if you
    have a developer account, ArcGIS Online currently offers 50 credits a month for
    testing your applications.
  prefs: []
  type: TYPE_NORMAL
- en: ArcGIS Portal
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you work for an enterprise organization that doesn't want its data hosted
    through a public platform such as ArcGIS Online, there is a private version as
    well. ArcGIS Portal is an organization-centered version of ArcGIS Online that
    can work within a private or secured network. Logins can be verified through a
    number of common secure protocols such as SAML and oAuth2.
  prefs: []
  type: TYPE_NORMAL
- en: ArcGIS Portal has many of the same features as ArcGIS Online. You can create
    and share web maps. You can upload, catalog, and search for data sources in your
    organization and, using administrator access, you can set user roles and permissions.
    The primary difference is that the data you create and share is kept within the
    company network. What happens in ArcGIS Portal stays in ArcGIS Portal.
  prefs: []
  type: TYPE_NORMAL
- en: Web AppBuilder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Developers have made the same map tools over and over for different sites.
    Almost all generic web mapping applications have a drawing tool, a measuring tool,
    a print tool, a legend, and so on. The developers at ESRI China have implemented
    an idea to create an application that builds JavaScript web mapping apps that
    use ArcGIS Online web maps. They call the tool **Web AppBuilder**, that is shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Web AppBuilder](img/6459OT_11_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Web AppBuilder creates full-page web mapping applications using the ArcGIS JavaScript
    API. The applications use responsive design elements and fit any screen. Publishers
    have a choice of color scheme, title text, logos, and an assortment of widgets.
    Web AppBuilder applications are published and hosted through ArcGIS Online, so
    you don't need your own hosting environment to create a web map application.
  prefs: []
  type: TYPE_NORMAL
- en: You can create generic Web Appbuilder applications straight from ArcGIS Online.
    Using an existing AGOL webmap, you can create an application, add several default
    widgets, such as printing, measuring, and queries. You can define titles, color
    schemes (from a list), and parameters for each of the widgets you use.
  prefs: []
  type: TYPE_NORMAL
- en: Developer Edition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One issue with the default Web AppBuilder is that there is no room for custom
    development. If you don't like the way the **Query** widget searches for results,
    you don't have anything better. ESRI recognized this, and released a developer
    edition for custom development.
  prefs: []
  type: TYPE_NORMAL
- en: The Web AppBuilder Developer Edition is a Node.js application that lets you
    generate web mapping applications using default widgets and any custom widgets
    you create. Widgets are based on Dojo's `dijit` system, and are easily added to
    the system. Web AppBuilder and the applications created with it are tied to an
    ArcGIS Online account.
  prefs: []
  type: TYPE_NORMAL
- en: Web AppBuilder Developer Edition generates the HTML, style sheets, and JavaScript
    necessary to run a freestanding website. Configuration data is stored in JSON
    files. Along with creating custom widgets, it is possible to create custom themes,
    modifying the style and position of elements to match your requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Widgets made for the Web AppBuilder Developer Edition are highly extensible.
    Widget components can be written for international markets using **i18n** (internationalization)
    and localization principals. Configurations can store label names in the widget
    in multiple languages, which will be loaded correctly with the application. Widget
    configurations can also be modified prior to application deployment. Settings
    for the widgets can be written using dijit form elements, much like the application
    itself, to modify the configuration.
  prefs: []
  type: TYPE_NORMAL
- en: As of the time of writing, ArcGIS Online will not host applications created
    with the Developer Edition. Applications generated with the Developer Edition
    are hosted on the developer's own platform. Since the files generated through
    the Developer Edition are static HTML, JavaScript, CSS, and image files, they
    can be hosted with little or no server-side processing.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information regarding Web AppBuilder, refer to the ESRI website at
    [http://doc.arcgis.com/en/web-appbuilder/](http://doc.arcgis.com/en/web-appbuilder/).
    For more information about Web AppBuilder Developer Edition, including download
    instructions and tutorials, visit [https://developers.arcgis.com/web-appbuilder/](https://developers.arcgis.com/web-appbuilder/).
  prefs: []
  type: TYPE_NORMAL
- en: More Node.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Speaking of Node.js, there are a number of tools for the ArcGIS JavaScript API
    that rely on Node.js. The ArcGIS API for JavaScript Web Optimizer is a Node.js
    project hosted by ESRI, which packages your custom modules along with a minimum
    set of ESRI and Dojo modules for a simplified build process. You can host through
    ESRI's **content delivery network** (**CDN**), or download and host it yourself.
  prefs: []
  type: TYPE_NORMAL
- en: If you decide to focus more on the Web AppBuilder Developer Edition, there's
    a Node.js project for that, too. The `generator-esri-appbuilder-js` project generates
    a template Web AppBuilder widget with all the necessary files. It asks you for
    basic information, such as the widget name and author information, as well as
    what kinds of files the widget will require. The project is based on Yeoman, a
    Node.js template-generating tool.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information on the ArcGIS API for JavaScript Web Optimizer, visit [https://developers.arcgis.com/javascript/jshelp/inside_web_optimizer.html](https://developers.arcgis.com/javascript/jshelp/inside_web_optimizer.html).
    For the `generator-esri-appbuilder-js` project, you can find it on NPM at [https://www.npmjs.com/package/generator-esri-appbuilder-js](https://www.npmjs.com/package/generator-esri-appbuilder-js),
    or view the source code at [https://github.com/Esri/generator-esri-appbuilder-js](https://github.com/Esri/generator-esri-appbuilder-js).
  prefs: []
  type: TYPE_NORMAL
- en: Our application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we're up to speed on the latest and greatest from ESRI, let's return
    to our story. The Y2K society called and they love the work we've done with our
    application. They can't wait to share all that information with the general public.
  prefs: []
  type: TYPE_NORMAL
- en: The interesting thing is that the Y2K society has purchased a few ArcGIS Online
    licenses. Now they want you to store the web map data in that format, so they
    can manage and add new data about the year 2000 as they come across it.
  prefs: []
  type: TYPE_NORMAL
- en: Our goal is to create an ArcGIS Online webmap for the Y2K society and add it
    to our existing application. We will add the map layers, popup templates, and
    charts into the webmap. We'll then load the webmap into our existing application,
    cut out unnecessary features, and make the rest of the custom features work with
    the webmap.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a webmap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We need to create a webmap to use in our application. If you haven't already
    set up a developer account for ArcGIS Online, go to [https://developers.arcgis.com/en/sign-up/](https://developers.arcgis.com/en/sign-up/)
    to sign up for a developer account. Once you've signed in, click on **Map** in
    the top menu. It will load an empty map much like the image at the beginning of
    the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can start by saving a copy of our map. This will allow us to name the map,
    write descriptions, search terms, and so on. In the toolbar toward the top, click
    on the **Save** dropdown and select **Save**. This will create a dialog popup
    that will let us enter the name of our map, write a summary, and add tags that
    make it easier to search for our map. We can put the map in our base folder, or
    make a new one for the application. Add `Y2K Census Map` to the title, and give
    a brief description. It should look similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a webmap](img/6459OT_11_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once you've clicked **SAVE MAP**, the map should have a new name. If you look
    in the URL, you'll also notice some strange characters. Your webmap has now been
    assigned a new webmap ID (`?webmap=XXXXXXXXXXXXXXXXX`), which is a unique string
    that ArcGIS Online uses to reference your map. Keep this webmap ID handy, because
    we'll use it later in our application.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the basemap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the best features of using ArcGIS Online to host your webmap is all the
    basemap backgrounds that are available. From satellite and aerial photos to simple
    grayscale maps, there's a good background available for your data.
  prefs: []
  type: TYPE_NORMAL
- en: 'In previous versions of our application, we used the national geographic basemap
    to frame our data. We can do the same for this webmap. Click **Basemap** in the
    upper left-hand corner of the toolbar, and you''ll be able to view a number of
    web map thumbnail images. Select the **National Geographic** basemap, and the
    map should update. The basemap selector should look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Changing the basemap](img/6459OT_11_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding the census map service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ArcGIS Online provides a number of ways to add layers to maps. Whether we have
    an ArcGIS Server map service or a simple CSV file, ArcGIS Online can accommodate
    a wide variety of data. To add layers to the map, click on the **Add** button
    in the upper left-hand corner and select from the drop-down choices. Some of the
    different ways to add layers to webmaps are discussed in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Searching for layers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: ArcGIS Online catalogs a wide variety of map layers for both public and organizational
    use. ArcGIS Online provides a search blank and a list of matching maps and layers
    to add to your webmap. If layers and services have been shared within your organization,
    you can search for keywords and tags to add that layer into your map. You can
    also add map services and layers that other people have marked as public data.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If your web map contains layers that are restricted to either your organization,
    or to specific groups within your organization, anyone who views the webmap will
    be prompted to log in to prove they can view the layers. If login fails, the webmap
    may load, but the restricted data will not be loaded on the map.
  prefs: []
  type: TYPE_NORMAL
- en: Browsing for ESRI layers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'ESRI has a large collection of its own map data available for public use. The
    data covers a wide range of topics and interests. You can filter by category,
    and click to add the map layer to your existing map. Currently, major categories
    include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Imagery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basemaps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Historical maps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Demographics and lifestyles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Landscapes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Earth observations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Urban systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transportation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Boundaries and places
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While you might be tempted to grab census data from this location, remember
    that this shows more current data. Since we're using the Year 2000 data in this
    case, we'll ignore this option. However, we'll remember this, because it could
    be useful in other projects.
  prefs: []
  type: TYPE_NORMAL
- en: Adding layers from the web
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This option allows us to add from a number of web map services. While it''s
    expected that we can add ArcGIS Server map services, some of the other choices
    may surprise you. Besides ArcGIS Server map and feature services, other layer
    types we can add include:'
  prefs: []
  type: TYPE_NORMAL
- en: WMS Service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WMTS Service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tiled Service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: KML file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GeoRSS file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CSV file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that the CSV file refers to one available online, more than likely through
    another service. If you have a CSV file to upload, you would select the next option.
  prefs: []
  type: TYPE_NORMAL
- en: Adding layer from a file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here, we get to upload a file and have ArcGIS Online render it for us. The
    dialog asks for a file to upload and, based on the file format, it will also ask
    for information to determine geographical locations. Acceptable files for adding
    geographical data include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A shape file with up to 1,000 features stored in a `.zip` folder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A tab or comma delimited text or CSV file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A **GPS Exchange Format** (**GPX**), which is available from many GPS units
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding map notes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This option allows you to draw custom points, lines, and polygons on the map
    as notes for other users or applications. You can select from a number of predefined
    feature types with unique renderers. Based on the note template you pick, you
    can add points, lines, and polygons with custom symbols.
  prefs: []
  type: TYPE_NORMAL
- en: Our application data source
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For our application data source, we''ll add a layer from the web. After you
    choose to add a layer from the web, select the ArcGIS web service from the drop-down
    list, and either type or paste the 2000 census map service URL in the blank. Leave
    the **Use as Basemap** checkbox unchecked. Finally, click **ADD LAYER** to add
    it to the map. You can see a screenshot of the prompt in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Our application data source](img/6459OT_11_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Styling
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: ArcGIS Online allows you to restyle many dynamic and feature layers, even if
    they weren't styled that way on the original map. You can add custom renderers
    to alter the color, transparency, and picture symbology of each layer. You can
    turn a simple map with no style into a custom map with unique value symbology,
    telling the story you want to tell.
  prefs: []
  type: TYPE_NORMAL
- en: For our web map, we see the simple black outlines of the states and counties
    on our map. We're going to change the style to make them look more appealing,
    and to blend them in with the National Geographic basemap background.
  prefs: []
  type: TYPE_NORMAL
- en: First, click on the census map service layer under **Contents** to expand the
    map layer. You'll see the different sublayers that make up the layer, such as
    **States**, **Counties**, **Block Groups**, and **Block Points**. By clicking
    on each one, you can see the symbols for each layer.
  prefs: []
  type: TYPE_NORMAL
- en: We'll start changing the symbology for the **States**. Click the little downward-pointing
    triangle to the right of **States** and select **Change Style**. The first menu
    will appear on the left, and let you select a label and symbol. Between the basemap
    and our popups, we'll have a good idea of what state we're in, so we'll leave
    the labels alone. Click on the **Options** button in the **Single Symbol** drawing
    under **Select a drawing style**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next prompt lets you change the symbol and the visibility range of the
    layer on the map. If the layers are already set with minimum and maximum visibilities,
    this will not make those more lenient, but it can make them stricter. Click on
    the **Symbol** link to get a color prompt. From here, you can set the color of
    the outline and the inside filling of the polygons. It should look something like
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Styling](img/6459OT_11_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Change the color of the outline to a darker orange, and click **OK**. We'll
    leave a transparent fill in the states. Repeat the same processes with the **Counties**
    and **Block Groups**, picking a lighter shade of orange each time.
  prefs: []
  type: TYPE_NORMAL
- en: Creating popups
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that we've adjusted our layers, let's look at the popups. ArcGIS Online
    lets you create and configure popups for map layers and feature services on your
    webmap. They provide a number of popup configurations, including a list of feature
    attributes and a **What You See Is What You Get** (**WYSIWYG**) rich text editor.
    Both allow some value formatting, such as thousand separators for numbers, or
    date formatting for dates. The WYSIWYG editor also allows you to use text colors
    and add links based on value attributes.
  prefs: []
  type: TYPE_NORMAL
- en: For our application, we're going to stick with displaying the list of attributes.
    Click on the **Options** button for the **States** (the little downward-pointing
    triangle), and select **Configure Popup**. In the next menu on the left-hand side,
    we can modify the title and the contents. Remember that, in any of the blanks,
    field names are surrounded by brackets and will be replaced with values.
  prefs: []
  type: TYPE_NORMAL
- en: Next to the **Display** dropdown, select **A list of field attributes**. This
    will create a long list of all the field attributes. We don't want to see all
    of them, or even most of them, so we'll configure which fields we see. Click on
    the **Configure Attributes** link under the list of fields.
  prefs: []
  type: TYPE_NORMAL
- en: 'You''ll see a dialog with a list of fields available for viewing. Each field
    has a checkbox for visibility, a field name shown with brackets, and a field alias.
    Field aliases can be altered by clicking on them and typing in a different value.
    Unchecking a box here means that it won''t appear in the popup. For numeric and
    date fields, extra formatting prompts appear to the right of the list when such
    a field is selected. Look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating popups](img/6459OT_11_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Since we see the state name in the title, we can uncheck everything but **Population
    for 2000**, **Square Miles**, and **Population per Square mile**. We'll rename
    the aliases to make them more appealing. Finally, we'll click **OK**. The list
    of attributes should reflect the three fields we've made visible at this point.
  prefs: []
  type: TYPE_NORMAL
- en: Adding charts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The popup configuration controls on ArcGIS Online also allow you to add images,
    charts, and graphs based on feature attributes. The images and graphs appear in
    the popups under the content we've displayed. These graphics are drawn using the
    `dojox/charting` libraries.
  prefs: []
  type: TYPE_NORMAL
- en: Going back to the **States** layer, we'll add the graphs for the ethnicities,
    genders, and ages in the states. In the lower left, under **Popup Media**, click
    on the **Add** button. A dropdown will appear, letting you choose the image or
    chart you would like to see. For our ethnic graph, we'll select a pie graph.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next prompt, we''re given the parameters required to configure the pie
    chart. It requires a title, a caption, and selected fields to add to the chart.
    We''re also given the option to normalize the data against another field in our
    data. If we were comparing relative population levels between areas, it would
    be beneficial to normalize against the entire population, but since we''re making
    pie charts, and the populations of each ethnic group should add up to 100 percent,
    we''ll skip normalization. You can see an example of the prompt in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding charts](img/6459OT_11_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For the **State** popup, we'll give the graph a name of `Ethnic Graph`. We'll
    then add a caption to explain what the chart is all about. Finally, we'll make
    sure that the **WHITE**, **BLACK**, **AMERI_ES**, **ASIAN**, **HISPANIC**, **MULT_RACE**,
    **HAWN_PI**, and **OTHER** fields are checked. Note that, if you didn't reformat
    the names of the fields when configuring the popup field name attributes in the
    previous section, the attributes will appear just as you left them. You can edit
    the field aliases here as well. You don't necessarily have to make them visible
    in the popup to make them chartable (and format their aliases) here. Finally,
    click **OK**, and you should see your **Ethnic Chart** in the list of **Popup
    Media**.
  prefs: []
  type: TYPE_NORMAL
- en: We'll repeat the steps for adding the gender and age charts. For the gender
    pie chart, we'll repeat the preceding steps to add another pie chart. We'll label
    it `Gender Chart`, and make sure that the `MALES` and `FEMALES` fields are checked.
    For the age bar chart, we'll select **Bar Chart** from the first menu. In the
    second prompt, we'll title the chart `Age Chart` and add the `AGE_UNDER5`, `AGE_5_17`,
    `AGE_18_21`, `AGE_22_29`, `AGE_30_39`, `AGE_40_49`, `AGE_50_64`, and `AGE_65_UP`
    fields.
  prefs: []
  type: TYPE_NORMAL
- en: Once the charts have been configured, be sure to click on **SAVE POPUP** on
    the bottom of the popup menu. This will reload the map with the new popup configurations.
    Click on a state to test that the popups appear. You should see the fields we
    added, and **Ethnic Chart** in the **State** popup. Arrows are also added to the
    right and left of the charts so that the user can view the gender and age graphs
    as well. Hovering over the graphs with your mouse will show the labels and numbers
    behind the graphs. They should appear like the popups shown in the following pictures.
  prefs: []
  type: TYPE_NORMAL
- en: 'This screenshot shows the **Ethnic Graph**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding charts](img/6459OT_11_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This screenshot shows the **Gender Chart**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding charts](img/6459OT_11_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This screenshot shows the **Age Chart**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding charts](img/6459OT_11_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Uses for an ArcGIS Online webmap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ArcGIS Online not only provides maps, but also tools with which you can perform
    analysis, collect data, and share maps with others. Some of the other features
    available in the preceding toolbar are as follows.
  prefs: []
  type: TYPE_NORMAL
- en: Sharing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Sharing** lets you control who has access to your webmap. You can share the
    map with the world, with those in your organization, or keep it to yourself. You
    can give other people access to the map by sharing the URL for it. You can also
    imbed the webmap in any website as an iframe, or create a web application using
    one of the web app templates.'
  prefs: []
  type: TYPE_NORMAL
- en: Printing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **Print** control in the toolbar opens a printable copy of the webmap in
    a new tab on your browser. The printable copy shows the title, the map in its
    current extent, and the attribution data. The page is formatted to be printed
    on an ANSI (A letter-sized) piece of paper.
  prefs: []
  type: TYPE_NORMAL
- en: Directions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By clicking on **Directions**, you'll get a Directions widget in the left-hand
    portion of the screen. The Directions widget lets you get directions from a starting
    point to a finishing point, with any number of stops in between. Directions and
    time can be calculated for a car, truck, or walking. You can also collect return
    trip data, as well as traffic data, on the route. Remember that directions and
    traffic routing cost credits to use.
  prefs: []
  type: TYPE_NORMAL
- en: Measurements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The measurement widget here mimics the measurement `dijit` in `esri/dijit/Measurement`.
    You can draw points, lines, and polygons to collect coordinates, lengths, and
    areas respectively. You can also change the units of measurement into metric or
    English units. When collecting latitude and longitude with points, it displays
    them in decimal degrees, as well as degrees-minutes-seconds.
  prefs: []
  type: TYPE_NORMAL
- en: Bookmarks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **Bookmarks** tool allows you to save locations on the webmap. The bookmarks
    widget captures the current map extent and gives it a name. When creating multiple
    bookmarks of areas on the map, you can quickly navigate to them by clicking on
    the bookmark names. You can also edit the names and delete unwanted bookmarks.
    Bookmark data is saved along with other features of the webmap.
  prefs: []
  type: TYPE_NORMAL
- en: Developing against an ArcGIS Online webmap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If your organization is happy with the webmaps and tools offered by ArcGIS Online,
    you could potentially run your public facing GIS from the website and never develop
    another tool. Sometimes you need custom functionality. Sometimes you need an application
    that makes custom requests from other data sources when you click on a map. Maybe
    you need a complicated query page or a query builder to collect results. Whatever
    your specialized needs, you can bring the ArcGIS Online webmap to your custom
    app.
  prefs: []
  type: TYPE_NORMAL
- en: What does using an AGOL webmap do for your application? It cuts out many of
    the map configuration steps. All the tiled, dynamic, and feature layers we would
    normally hardcode in the application can now be mashed together in a webmap and
    loaded in our app. All the popups and `infoTemplate` that we had to assign through
    code can now be carried over from the we map. Whenever changes to the map service
    layers and popups are required, they can be made through ArcGIS Online, instead
    of changing the code and hoping that users aren't still running a cached copy
    of your configuration script. Configurations can be handled by someone else, giving
    you more time to code.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the webmap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to bring in the webmap we created earlier, we need to update our `app.js`
    file. In the list of modules in the `app.js` file''s `require()` method, we need
    to add a reference to the `esri/arcgis/utils` module. This will give us the tools
    we need to add the webmap to our application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Typically, we would use the `arcgisUtils.createMap()` method to construct our
    new webmap. It requires parameters similar to the `esri/map` constructor, including
    a reference to the HTML element `id` where the map should go, and an `options`
    object. However, the `arcgisUtils.createMap()` method also requires an ArcGIS
    Online webmap `id`. You can get this `id` by opening your webmap in ArcGIS Online
    to edit. If you look at the URL, you''ll see the search parameter `webmap=XXXXXXXXXXXXXXX`,
    where those *X*''s are replaced by alphanumeric characters. You can copy and paste
    the `id` numbers into your application to create a webmap, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Options for the `arcgisUtils.createMap()` method include, but are not limited
    to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`bingMapKey`: The unique key string provided in your subscription to Bing Maps.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`editable`: A `Boolean` value that you can use to disable any feature layer
    editing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`geometryServiceURL`: URL link to ArcGIS Server geometry service.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ignorePopups`: A `Boolean` that will disable all popups if true.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mapOptions`: The normal options you would pass to create a normal map.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`usePopupManager`: A `Boolean` value that, when true, tells `InfoWindow` to
    retrieve all clicked features that have popup templates. When true, it also handles
    the popups visibility of map service sublayers whether the parent layer is visible
    or not. If false, popups on sublayers may or may not load if the parent layer
    is not turned on, and you will have to manually control popup visibility for complicated
    maps.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `arcgisUtils.createMap()` method will return a `dojo/Deferred` promise,
    which will fire a success callback using `then()` once the webmap data has been
    downloaded and the map has been created. The callback will return a response object
    that contains the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`map`: The `esri/map` object created'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`itemInfo`: An object containing:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`item`: An object that contains the map title, a snippet to describe it, and
    the extent in a nested array form'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`itemInfo`: A JSON object containing data about the map services, renderers,
    popups, bookmarks, and other map data used to create the web map'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`errors`: An array of errors encountered when loading data and creating the
    map services'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`clickEventHandler` and `clickEventListener`: When populated, these control
    the map click events that show popups. If you ever need to turn off popups, you
    can run the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To restore the popups, run the following line of code (assuming that you''ve
    loaded the `dojo/on` module:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When creating the webmap, if you set the `usePopupManager` parameter to `true`
    (the default is `false`), the `clickEventHandler` and `clickEventListener` parameters
    will be null. In that case, popup visibility will be controlled through the `map.setInfoWindowOnClick(boolean)`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we incorporated the ESRI Bootstrap back in [Chapter 8](ch08.html "Chapter 8. Styling
    Your Map"), *Styling Your Map*, we need to use the ESRI Bootstrap version of the
    `createMap()` constructor in the `esri/arcgis/utils` module. Since the map may
    take time to load, we''ll move the census widget loading inside the deferred callback.
    The code should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In our census widget
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have defined many parts of our map in the webmap, we can remove
    a lot of the widget code that handled the same information. In the module reference
    of our census''s `define` statement, we can remove references to the following
    modules:'
  prefs: []
  type: TYPE_NORMAL
- en: The **State**, **County**, **Block Group**, and **Block Point** templates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`IdentifyTask` and `IdentifyParameter`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`InfoTemplates`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`D3/d3`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remember to delete the module references as well as their corresponding variables.
  prefs: []
  type: TYPE_NORMAL
- en: In the body of our widget, we can remove any references to the `identifytask`
    or map clicking, or `infowindow` selection events, since that controlled the popups.
    We can also remove all the methods that created the charts on our popups. All
    we're left with is a widget that populates the drop-down menus for states, counties,
    and block groups, to let us see that data.
  prefs: []
  type: TYPE_NORMAL
- en: Don't feel bad about deleting so much code. One of the joys of a developer's
    life is to delete lines of code, since they are possible sources of errors.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing webmap in our app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What would we do if we needed something from the ArcGIS Online webmap configuration?
    If we want that information, the ArcGIS JavaScript API gives us the tools to retrieve
    it. By using the `esri/arcgis/utils` and `esri/request` modules, we can retrieve
    and work with our web map data.
  prefs: []
  type: TYPE_NORMAL
- en: 'To access our web map configuration data, we need two pieces of information:
    the URL of the site hosting the data and the web map ID. The URL of the service
    hosting the webmap data can be found in the `arcgisUrl` property of the `esri/arcgis/utils`
    module. By default, it points to [http://www.arcgis.com/sharing/rest/content/items](http://www.arcgis.com/sharing/rest/content/items),
    but if your webmaps are hosted in a private enterprise network in the ArcGIS portal,
    this URL string should be replaced with the appropriate URL for your portal service.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In our JavaScript code, we can combine the URL hosting the webmap data, along
    with the webmap ID, into a URL to access JSON data for our webmap. We can use
    the `esri/request` module to request the data from the URL and use it wherever
    we need in our application. A bit of sample code is shown in the following snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: If you look at the JSON results from our webmap, using either the map console
    or a JSON viewing plugin for the browser, you can see that the webmap data for
    our application includes map service layers, a background basemap, and even details
    about the configuration of our popups. There's a lot of potentially useful information
    in this response, should we need it.
  prefs: []
  type: TYPE_NORMAL
- en: Interacting with the map through code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In our previous version, we loaded `InfoTemplates` for each layer to define
    the format of the content displayed in the popups. Now that we have all that information
    defined through ArcGIS Online, we don't need to make the extra HTTP requests to
    load the HTML templates. You can click on the map and the popups will be ready
    to be used.
  prefs: []
  type: TYPE_NORMAL
- en: However, we run into a problem when we try to use our custom drop-down selectors
    to bring up the popups. In the older version, we would query the data, add an
    appropriate template, and insert it in the `InfoWindow`. Now, a user click pulls
    the appropriate data for us. But how can we click on the map without clicking
    on the map?
  prefs: []
  type: TYPE_NORMAL
- en: Using an undocumented trick, we can trigger a map-click event with our data.
    We could zoom to the feature extent on the map and trigger the map click event
    when it's done. This trick has been successfully deployed on a number of websites
    that use ArcGIS Online webmaps.
  prefs: []
  type: TYPE_NORMAL
- en: 'Look for the `_updateInfoWindowFromQuery()` method in the `Census.js` widget.
    It currently contains steps that set the map extent and fill in the contents of
    the map''s `InfoWindow`. We''ll keep the extent setting, but remove any references
    to `map.infoWindow`. Instead, inside the asynchronous callback function called
    after the map has changed extents, we''ll add code to call the `map.onClick()`
    method to trigger the click event:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The `map.onClick()` function requires an object with three properties: a graphic,
    a `mapPoint`, and a `screenPoint` that contains the coordinates of the point on
    the screen. We can use the first of our query results for the graphic that has
    been clicked. For a quick and dirty click location, we can use the center of the
    current extent, which we get from `resultExtent.getCenter()`. As for the corresponding
    `screenPoint` for our map point, the map has methods for converting geographic
    points to screen points and the other way around. We''ll use the `map.toScreen()`
    method with the center point to get its coordinates on the screen. We''ll then
    feed the results into the `map.onClick()` method, and test the application. The
    function should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We can test the code by loading our application and clicking the **Census**
    button. It should show our drop-down modals for the state, county, and block group
    data. When we select a state like California, it should query, zoom, and the popup
    should appear momentarily with the popups we configured earlier. Now, we have
    a fully functioning census application, while letting ArcGIS Online handle most
    of the work:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Interacting with the map through code](img/6459OT_11_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we have looked at the newest tools provided by ESRI for the
    ArcGIS platform: ArcGIS Online and Web AppBuilder. We have created a webmap using
    ArcGIS Online, adding layers, formatting them, and creating popups. We added the
    webmap to our own application.'
  prefs: []
  type: TYPE_NORMAL
- en: Throughout this book, we've dived deep into the ArcGIS JavaScript API. We started
    by creating a simple webmap application, complete with click events and geographical
    data. You have learned how to use to tools provided by the API and the Dojo framework
    to build custom controls and modules that you could reuse from project to project.
    You then experimented with adding other JavaScript libraries, so that developers
    not so familiar with dojo could contribute. You learned how to edit geographical
    data through web applications. You also learned how to style your map applications
    for desktop and mobile use. You even learned how to unit test your code. Finally,
    you learned how ESRI is simplifying webmap development through ArcGIS Online and
    Web AppBuilder, bringing applications to the public faster. You have definitely
    come a long way.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Where do you go from here? There are a number of great books, blogs, and other
    resources. You can find out about current trends in ArcGIS development through
    ESRI's forums at [http://geonet.esri.com](http://geonet.esri.com), or find support
    for the latest ArcGIS APIs at [http://developers.arcgis.com](http://developers.arcgis.com).
    For blogs, you can check out Dave Bouwman's blog at [http://blog.davebouwman.com](http://blog.davebouwman.com),
    or Rene Rubalcava at [http://odoe.net](http://odoe.net). For books, you may want
    learn about how to manage ArcGIS Server to serve your web maps with *Managing
    ArcGIS for Server* by Hussein Nasser. You may also want to check out *ArcGIS Web
    Development* by Rene Rubalcava, *Developing Web and Mobile ArcGIS Server Applications
    with JavaScript* by Eric Pimpler, or *Developing Mobile Web Applications* by Matthew
    Sheehan.
  prefs: []
  type: TYPE_NORMAL
