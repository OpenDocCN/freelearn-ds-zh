["```py\ncode\n¦   ch06-01_sym_diff.py\n¦   foldertree.txt\n¦   utils.py\n¦\n+---ol3\n    +---build\n    ¦       ol-debug.js\n    ¦       ol-deps.js\n    ¦       ol.js\n    ¦\n    +---css\n    ¦       layout.css\n    ¦       ol.css\n    ¦\n    +---data\n    ¦       my_polys.js\n    ¦\n    +---html\n    ¦       ch06-01_sym_diff.html\n    ¦\n    +---js\n    ¦       map_sym_diff.js\n    ¦\n    +---resources\n        ¦   jquery.min.js\n        ¦   logo-32x32-optimized.png\n        ¦   logo-32x32.png\n        ¦   logo.png\n        ¦   textured_paper.jpeg\n        ¦\n        +---bootstrap\n            +---css\n            ¦       bootstrap-responsive.css\n            ¦       bootstrap-responsive.min.css\n            ¦       bootstrap.css\n            ¦       bootstrap.min.css\n            ¦\n            +---img\n            ¦       glyphicons-halflings-white.png\n            ¦       glyphicons-halflings.png\n            ¦\n            +---js\n                    bootstrap.js\n                    bootstrap.min.js\n\ngeodata\n    pebble-beach-fairways-3857.geojson\n    pebble-beach-greens-3857.geojson\n    results_sym_diff.js\n```", "```py\n    >> python Ch06-01_sym_diff.py\n\n    ```", "```py\n    #!/usr/bin/env python\n    # -*- coding: utf-8 -*-\n\n    import json\n    from os.path import realpath\n    from shapely.geometry import MultiPolygon\n    from shapely.geometry import asShape\n    from shapely.wkt import dumps\n\n    # define our files input and output locations\n    input_fairways = realpath(\"../geodata/pebble-beach-fairways-3857.geojson\")\n    input_greens = realpath(\"../geodata/pebble-beach-greens-3857.geojson\")\n    output_wkt_sym_diff = realpath(\"ol3/data/results_sym_diff.js\")\n\n    # open and load our geojson files as python dictionary\n    with open(input_fairways) as fairways:\n        fairways_data = json.load(fairways)\n\n    with open(input_greens) as greens:\n        greens_data = json.load(greens)\n\n    # create storage list for our new shapely objects\n    fairways_multiply = []\n    green_multply = []\n\n    # create shapely geometry objects for fairways\n    for feature in fairways_data['features']:\n        shape = asShape(feature['geometry'])\n        fairways_multiply.append(shape)\n\n    # create shapely geometry objects for greens\n    for green in greens_data['features']:\n        green_shape = asShape(green['geometry'])\n        green_multply.append(green_shape)\n\n    # create shapely MultiPolygon objects for input analysis\n    fairway_plys = MultiPolygon(fairways_multiply)\n    greens_plys = MultiPolygon(green_multply)\n\n    # run the symmetric difference function creating a new Multipolygon\n    result = fairway_plys.symmetric_difference(greens_plys)\n\n    # write the results out to well known text (wkt) with shapely dump\n    def write_wkt(filepath, features):\n        with open(filepath, \"w\") as f:\n            # create a js variable called ply_data used in html\n            # Shapely dumps geometry out to WKT\n            f.write(\"var ply_data = '\" + dumps(features) + \"'\")\n\n    # write to our output js file the new polygon as wkt\n    write_wkt(output_wkt_sym_diff, result)\n    ```", "```py\n$ source venvs/pygeo_analysis_cookbook/bin/activate\n\n```", "```py\n    >> python ch06-02_union.py\n\n    ```", "```py\n    #!/usr/bin/env python\n    # -*- coding: utf-8 -*-\n    import json\n    from os.path import realpath\n    import shapefile  # pyshp\n    from geojson import Feature, FeatureCollection\n    from shapely.geometry import asShape, MultiPolygon\n    from shapely.ops import polygonize\n    from shapely.wkt import dumps\n\n    def create_shapes(shapefile_path):\n        \"\"\"\n        Convert Shapefile Geometry to Shapely MultiPolygon\n        :param shapefile_path: path to a shapefile on disk\n        :return: shapely MultiPolygon\n        \"\"\"\n        in_ply = shapefile.Reader(shapefile_path)\n\n        # using pyshp reading geometry\n        ply_shp = in_ply.shapes()\n        ply_records = in_ply.records()\n        ply_fields = in_ply.fields\n        print ply_records\n        print ply_fields\n\n        if len(ply_shp) > 1:\n            # using python list comprehension syntax\n            # shapely asShape to convert to shapely geom\n            ply_list = [asShape(feature) for feature in ply_shp]\n\n            # create new shapely multipolygon\n            out_multi_ply = MultiPolygon(ply_list)\n\n            # # equivalent to the 2 lines above without using list comprehension\n            # new_feature_list = []\n            # for feature in features:\n            #     temp = asShape(feature)\n            #     new_feature_list.append(temp)\n            # out_multi_ply = MultiPolygon(new_feature_list)\n\n            print \"converting to MultiPolygon: \" + str(out_multi_ply)\n        else:\n            print \"one or no features found\"\n            shply_ply = asShape(ply_shp)\n            out_multi_ply = MultiPolygon(shply_ply)\n\n        return out_multi_ply\n\n    def create_union(in_ply1, in_ply2, result_geojson):\n        \"\"\"\n        Create union polygon\n        :param in_ply1: first input shapely polygon\n        :param in_ply2: second input shapely polygon\n        :param result_geojson: output geojson file including full file path\n        :return: shapely MultiPolygon\n        \"\"\"\n        # union the polygon outer linestrings together\n        outer_bndry = in_ply1.boundary.union(in_ply2.boundary)\n\n        # rebuild linestrings into polygons\n        output_poly_list = polygonize(outer_bndry)\n\n        out_geojson = dict(type='FeatureCollection', features=[])\n\n        # generate geojson file output\n        for (index_num, ply) in enumerate(output_poly_list):\n            feature = dict(type='Feature', properties=dict(id=index_num))\n            feature['geometry'] = ply.__geo_interface__\n            out_geojson['features'].append(feature)\n\n        # create geojson file on disk\n        json.dump(out_geojson, open(result_geojson, 'w'))\n\n        # create shapely MultiPolygon\n        ply_list = []\n        for fp in polygonize(outer_bndry):\n            ply_list.append(fp)\n\n        out_multi_ply = MultiPolygon(ply_list)\n\n        return out_multi_ply\n\n    def write_wkt(filepath, features):\n        \"\"\"\n\n        :param filepath: output path for new JavaScript file\n        :param features: shapely geometry features\n        :return:\n        \"\"\"\n        with open(filepath, \"w\") as f:\n            # create a JavaScript variable called ply_data used in html\n            # Shapely dumps geometry out to WKT\n            f.write(\"var ply_data = '\" + dumps(features) + \"'\")\n\n    def output_geojson_fc(shply_features, outpath):\n        \"\"\"\n        Create valid GeoJSON python dictionary\n        :param shply_features: shapely geometries\n        :param outpath:\n        :return: GeoJSON FeatureCollection File\n        \"\"\"\n\n        new_geojson = []\n        for feature in shply_features:\n            feature_geom_geojson = feature.__geo_interface__\n            myfeat = Feature(geometry=feature_geom_geojson,\n                             properties={'name': \"mojo\"})\n            new_geojson.append(myfeat)\n\n        out_feat_collect = FeatureCollection(new_geojson)\n\n        with open(outpath, \"w\") as f:\n            f.write(json.dumps(out_feat_collect))\n\n    if __name__ == \"__main__\":\n\n        # define our inputs\n        shp1 = realpath(\"../geodata/temp1-ply.shp\")\n        shp2 = realpath(\"../geodata/temp2-ply.shp\")\n\n        # define outputs\n        out_geojson_file = realpath(\"../geodata/res_union.geojson\")\n        output_union = realpath(\"../geodata/output_union.geojson\")\n        out_wkt_js = realpath(\"ol3/data/results_union.js\")\n\n        # create our shapely multipolygons for geoprocessing\n        in_ply_1_shape = create_shapes(shp1)\n        in_ply_2_shape = create_shapes(shp2)\n\n        # run generate union function\n        result_union = create_union(in_ply_1_shape, in_ply_2_shape, out_geojson_file)\n\n        # write to our output js file the new polygon as wkt\n        write_wkt(out_wkt_js, result_union)\n\n        # write the results out to well known text (wkt) with shapely dump\n        geojson_fc = output_geojson_fc(result_union, output_union)\n    ```", "```py\n# #!/usr/bin/env python\n# -*- coding: utf-8 -*-\nfrom shapely.geometry import MultiPolygon\nfrom shapely.ops import cascaded_union\nfrom os.path import realpath\nfrom utils import create_shapes\nfrom utils import out_geoj\nfrom utils import write_wkt\n\ndef check_geom(in_geom):\n    \"\"\"\n    :param in_geom: input valid Shapely geometry objects\n    :return: Shapely MultiPolygon cleaned\n    \"\"\"\n    plys = []\n    for g in in_geom:\n        # if geometry is NOT valid\n        if not g.is_valid:\n            print \"Oh no invalid geometry\"\n            # clean polygon with buffer 0 distance trick\n            new_ply = g.buffer(0)\n            print \"now lets make it valid\"\n            # add new geometry to list\n            plys.append(new_ply)\n        else:\n            # add valid geometry to list\n            plys.append(g)\n    # convert new polygons into a new MultiPolygon\n    out_new_valid_multi = MultiPolygon(plys)\n    return out_new_valid_multi\n\nif __name__ == \"__main__\":\n\n    # input NOAA Shapefile\n    shp = realpath(\"../geodata/temp-all-warn-week.shp\")\n\n    # output union_dissolve results as GeoJSON\n    out_geojson_file = realpath(\"../geodata/ch06-03_union_dissolve.geojson\")\n\n    out_wkt_js = realpath(\"ol3/data/ch06-03_results_union.js\")\n\n    # input Shapefile and convert to Shapely geometries\n    shply_geom = create_shapes(shp)\n\n    # Check the Shapely geometries if they are valid if not fix them\n    new_valid_geom = check_geom(shply_geom)\n\n    # run our union with dissolve\n    dissolve_result = cascaded_union(new_valid_geom)\n\n    # output the resulting union dissolved polygons to GeoJSON file\n    out_geoj(dissolve_result, out_geojson_file)\n\n    write_wkt(out_wkt_js, dissolve_result)\n```", "```py\n (input feature – intersection) + intersection = result\n\n```", "```py\n    ##!/usr/bin/env python\n    # -*- coding: utf-8 -*-\n    from shapely.geometry import asShape, MultiPolygon\n    from utils import shp2_geojson_obj, out_geoj, write_wkt\n    from os.path import realpath\n\n    def create_polys(shp_data):\n        \"\"\"\n        :param shp_data: input GeoJSON\n        :return: MultiPolygon Shapely geometry\n        \"\"\"\n        plys = []\n        for feature in shp_data['features']:\n            shape = asShape(feature['geometry'])\n            plys.append(shape)\n\n        new_multi = MultiPolygon(plys)\n        return new_multi\n\n    def create_out(res1, res2):\n        \"\"\"\n\n        :param res1: input feature\n        :param res2: identity feature\n        :return: MultiPolygon identity results\n        \"\"\"\n        identity_geoms = []\n\n        for g1 in res1:\n            identity_geoms.append(g1)\n        for g2 in res2:\n            identity_geoms.append(g2)\n\n        out_identity = MultiPolygon(identity_geoms)\n        return out_identity\n\n    if __name__ == \"__main__\":\n        # out two input test Shapefiles\n        shp1 = realpath(\"../geodata/temp1-ply.shp\")\n        shp2 = realpath(\"../geodata/temp2-ply.shp\")\n\n        # output resulting GeoJSON file\n        out_geojson_file = realpath(\"../geodata/result_identity.geojson\")\n\n        output_wkt_identity = realpath(\"ol3/data/ch06-04_results_identity.js\")\n\n        # convert our Shapefiles to GeoJSON\n        # then to python dictionaries\n        shp1_data = shp2_geojson_obj(shp1)\n        shp2_data = shp2_geojson_obj(shp2)\n\n        # transform our GeoJSON data into Shapely geom objects\n        shp1_polys = create_polys(shp1_data)\n        shp2_polys = create_polys(shp2_data)\n\n        # run the difference and intersection\n        res_difference = shp1_polys.difference(shp2_polys)\n        res_intersection = shp1_polys.intersection(shp2_polys)\n\n        # combine the difference and intersection polygons into results\n        result_identity = create_out(res_difference, res_intersection)\n\n        # export identity results to a GeoJSON\n        out_geoj(result_identity, out_geojson_file)\n\n        # write out new JavaScript variable with wkt geometry\n        write_wkt(output_wkt_identity, result_identity )\n    ```", "```py\ndef shp2_geojson_obj(shapefile_path):\n    # open shapefile\n    in_ply = shapefile.Reader(shapefile_path)\n    # get a list of geometry and records\n    shp_records = in_ply.shapeRecords()\n    # get list of fields excluding first list object\n    fc_fields = in_ply.fields[1:]\n\n    # using list comprehension to create list of field names\n    field_names = [field_name[0] for field_name in fc_fields ]\n    my_fc_list = []\n    # run through each shape geometry and attribute\n    for x in shp_records:\n        field_attributes = dict(zip(field_names, x.record))\n        geom_j = x.shape.__geo_interface__\n        my_fc_list.append(dict(type='Feature', geometry=geom_j,\n                               properties=field_attributes))\n\n    geoj_json_obj = {'type': 'FeatureCollection',\n                    'features': my_fc_list}\n\n    return geoj_json_obj\ndef out_geoj(list_geom, out_geoj_file):\n    out_geojson = dict(type='FeatureCollection', features=[])\n\n    # generate geojson file output\n    for (index_num, ply) in enumerate(list_geom):\n        feature = dict(type='Feature', properties=dict(id=index_num))\n        feature['geometry'] = ply.__geo_interface__\n        out_geojson['features'].append(feature)\n\n    # create geojson file on disk\n    json.dump(out_geojson, open(out_geoj_file, 'w'))\n```"]