["```py\nadd_profits <- function(data) {\n    unprofitable <- c(\"RETURNED\", \"CANCELLED\", \"PENDING\")\n    data$PROFIT <- data$PRICE - data$COST - data$DISCOUNT\n    data$PROFIT[data$STATUS %in% unprofitable] <- 0\n    data$PROFIT[data$PAID == \"NO\"] <- 0\n    data$PROFIT_RATIO <- data$PROFIT / data$COST\n    return(data)\n}\n```", "```py\nsales <- add_profits(sales)\n```", "```py\ngraph_1 <- a_function_that_returns_a_graph_object(\n    data_1, other_parameters_1)\nprint(graph_1)\n\ngraph_2 <- a_function_that_returns_a_graph_object(\n    data_2, other_parameters_2)\nprint(graph_2)\n```", "```py\nsave_png <- function(graph, save_to, width = 480, height = 480) {\n    png(save_to, width = width, height = height)\n    print(graph)\n    dev.off()\n}\n```", "```py\ngraph < a_function_that_returns_a_graph_object(data, parameters)\nsave_png(graph, 1024, 768)\n```", "```py\ngraph <- ggplot(sales, aes(QUANTITY)) +\n    geom_bar() +\n    ggtitle(\"QUANTITY Frequency\") +\n    scale_x_continuous(\n        breaks = seq(min(sales[, \"QUANTITY\"]), \n        max(sales[, \"QUANTITY\"]))\n    )\n```", "```py\ngraph_bars <- function(data, x, y = NULL) {\n    if (is.null(y)) {\n        graph <- ggplot(data, aes_string(x)) +\n            geom_bar() +\n            ggtitle(paste(x, \"Frequency\")) +\n            ylab(\"Frequency\")\n    } else {\n        aggregation <- get_aggregation(y)\n            graph <- ggplot(data, aes_string(x, y)) +\n            geom_bar(fun.y = aggregation, stat = \"summary\") + \n            ggtitle(paste(y, \"by\", x))\n   }\n   if (class(data[, x]) == \"numeric\") {\n        graph <- graph +\n            scale_x_continuous(\n                breaks = seq(min(data[, x]), max(data[, x])))\n   }\n   return(graph)\n}\n```", "```py\nget_aggregation <- function(y) {\n    if (y == \"PROFIT\") {\n        return(\"sum\")\n    }\n    return(\"mean\")\n}\n```", "```py\ngraph_bars(sales, \"CONTINENT\")\ngraph_bars(sales, \"CONTINENT\", \"PROFIT\")\ngraph_bars(sales, \"CONTINENT\", \"PROFIT_RATIO\")\n\ngraph_bars(sales, \"PROTEIN_SOURCE\")\ngraph_bars(sales, \"PROTEIN_SOURCE\", \"PROFIT\")\ngraph_bars(sales, \"PROTEIN_SOURCE\", \"PROFIT_RATIO\")\n```", "```py\ngraph_bars <- function(data, x, y = NULL, color = NULL) {\n    if (is.null(y)) {\n        graph <- ggplot(data, aes_string(x, fill = color)) +\n            geom_bar(position = \"dodge\") +\n            ggtitle(paste(x, \"Frequency\")) +\n            ylab(\"Frequency\")\n    } else {\n        aggregation <- get_aggregation(y)\n        graph <- ggplot(data, aes_string(x, y, fill = color)) +\n                 geom_bar(\n                     fun.y = aggregation, \n                     stat = \"summary\", position = \"dodge\") +\n                     ggtitle(paste(y, \"by\", x)\n                 )\n    }\n    if (class(data[, x]) == \"numeric\") {\n        graph <- graph +\n            scale_x_continuous(\n                breaks = seq(min(data[, x]), \n                max(data[, x]))\n            )\n    }\n    return(graph)\n}\n```", "```py\ngraph_bars(sales, \"QUANTITY\", color = \"PROTEIN_SOURCE\")\ngraph_bars(sales, \"CONTINENT\", \"PROFIT\", \"PROTEIN_SOURCE\")\ngraph_bars(sales, \"CONTINENT\", \"PROFIT_RATIO\", \"PROTEIN_SOURCE\")\n```", "```py\ngraph_top_n_bars(sales, \"CLIENT_ID\", 10)\ngraph_top_n_bars(sales, \"CLIENT_ID\", 10, TRUE)\n```", "```py\ngraph_top_n_boxplots <- \n    function(data, x, y, n, f = \"#2196F3\", c = \"#0D47A1\") {\n    data <- filter_n_top(sales, n, x)\n    return(\n        ggplot(data, aes_string(x, y)) +\n        geom_boxplot(fill = f, color = c) +\n        ggtitle(paste(y, \"by\", x, \"( Top\", n, \")\"))\n    )\n}\n```", "```py\nfilter_n_top <- function(data, n, by) {\n    aggr <- aggregate(data$PROFIT, list(data[, by]), sum)\n    top <- aggr[order(-aggr[, 2])[1:n], 1]\n    data <- data[data[, by] %in% top, ]\n    return(data)\n}\n```", "```py\ngraph_top_n_boxplots(sales, \"CLIENT_ID\", \"PROFIT\", 10)\n```", "```py\ngraph_marginal_distributions <- \nfunction(data, x, y, color = NULL, shape = NULL) {\n    if (is.null(color)) {\n        if (is.null(shape)) {\n            graph <- ggplot(data, aes_string(x, y))\n        } else {\n            graph <- ggplot(data, aes_string(x, y, shape = shape))\n        }\n    } else {\n        if (is.null(shape)) {\n            graph <- ggplot(data, aes_string(x, y, color = color))\n        } else {\n            graph <- ggplot(data, aes_string(x, y, \n                            color = color, \n                            shape = shape))\n        }\n    }\n    return(ggMarginal(graph + geom_point(), type = \"histogram\"))\n}\n```", "```py\ngraph_marginal_distributions(sales, \n       \"COST\", \"PRICE\", \"PROTEIN_SOURCE\", \"CONTINENT\")\n```", "```py\ngraph_marginal_distributions_client_birth_dates <- function(data) {\n    x <- \"BD_YEAR\"\n    y <- \"BD_MONTH\"\n    x_noise <- \"BD_YEAR_NOISE\"\n    y_noise <- \"BD_MONTH_NOISE\"\n    data <- disaggregate_dates(data)\n    data <- add_dates_noise(data)\n    graph <- ggplot(data, aes_string(x_noise, \n                                     y_noise,\n                                     size = \"STARS\",\n                                     color = \"GENDER\")) +\n        scale_x_continuous(breaks = seq(min(data[, x]),\n                                    max(data[, x]), by = 5)) +\n        scale_y_continuous(breaks = seq(min(data[, y]),  \n                                    max(data[, y]))) +\n                                    geom_point() +\n                                    ylab(\"MONTH\") +\n                                    xlab(\"YEAR\")\n    return(ggMarginal(graph, type = \"histogram\"))\n}\ndisaggregate_dates <- function(data) {\n    data$BD_YEAR <- as.numeric(format(data$BIRTH_DATE, \"%Y\"))\n    data$BD_MONTH <- as.numeric(format(data$BIRTH_DATE, \"%m\"))\n    return(data)\n}\n```", "```py\nadd_dates_noise <- function(data) {\n    year_noise <- rnorm(nrow(data), sd = 0.5)\n    month_noise <- rnorm(nrow(data), sd = 0.5)\n    data$BD_YEAR_NOISE <- data$BD_YEAR + year_noise\n    data$BD_MONTH_NOISE <- data$BD_MONTH + month_noise\n    return(data)\n}\n```", "```py\ngraph_marginal_distributions_client_birth_dates(clients)\n```", "```py\ngraph_radar <- function(data, by) {\n    data <- tidyr::gather(\n                   data, MACRO, PERCENTAGE, \n                   PROTEIN:FAT, factor_key = TRUE)\n    data$CLIENT_ID <- paste(\n        data$CLIENT_ID, \" ($\", data$PROFIT, \")\", sep = \"\"\n    )\n    return(\n        ggplot(data, aes(MACRO, PERCENTAGE)) +\n        geom_polygon(\n            aes_string(group = by, color = by, fill = by),\n            alpha = 0.4,\n            size = 2\n        ) +\n       facet_wrap(as.formula(paste(\"~\", by)), nrow = 1) +\n       guides(color = \"none\", fill = \"none\") +\n       coord_radar() +\n       xlab(\"\") +\n       ylab(\"\")\n   )\n}\n```", "```py\ncoord_radar <- function(theta = \"x\", start = 0, direction = 1) {\n    if (theta == \"x\") {\n        r <- \"y\"\n    } else {\n        r <- \"x\"\n    }\n    return(ggproto(\n        \"CordRadar\", \n        CoordPolar, \n        theta = theta, \n        r = r, \n        start = start, \n        direction = sign(direction),\n        is_linear = function(coord) { return(TRUE) }\n    ))\n}\n```", "```py\nfilter_data <- function(data, n_days, n_top, aggregate_by, static = TRUE) {\n    data <- filter_n_days_back(data, n_days)\n    data <- filter_n_top(data, n_top, aggregate_by)\n    if (static) {\n        aggr_profit <- aggregate(\n            data[, c(\"PROFIT\", \"PROFIT_RATIO\")],\n            list(data[, aggregate_by]),\n            sum\n        )\n        aggr_profit$CLIENT_ID <- aggr_profit$Group.1\n        aggr_macros <- aggregate(\n            data[, c(\"PROTEIN\", \"CARBS\", \"FAT\")],\n            list(data[, aggregate_by]),\n            mean\n        )\n        aggr_macros$CLIENT_ID <- aggr_macros$Group.1\n        data <- merge(aggr_profit, aggr_macros, by = aggregate_by)\n        drop_columns <- c(\"Group.1.x\", \"Group.1.y\", \"PROFIT_RATIO\")\n        data <- data[, !(names(data) %in% drop_columns)]\n        data <- data[order(-data$PROFIT), ]\n    }\n    return(data)\n}\n```", "```py\nfilter_n_days_back <- function(data, n) {\n    if (is.null(n)) {\n        return(data)\n    }\n    n_days_back <- Sys.Date() - n\n    return(data[data[, \"DATE\"] >= n_days_back, ])\n}\n```", "```py\nfilter_data(sales, 30, 5, \"CLIENT_ID\")\n#>    CLIENT_ID PROFIT   PROTEIN     CARBS       FAT\n#> 2 BAWHQ69720 74.298 0.3855850 0.3050690 0.3093460\n#> 3 CFWSY56410 73.378 0.4732115 0.3460788 0.1807097\n#> 4 CQNQB52245 61.468 0.1544217 0.3274938 0.5180846\n#> 1 AHTSR81362 58.252 0.3301151 0.3326516 0.3372332\n#> 5 VJAQG30905 53.104 0.2056474 0.5909554 0.2033972\n```", "```py\ngraph_radar(filter_data(sales, 30, 5, \"CLIENT_ID\"), \"CLIENT_ID\")\n```", "```py\nlibrary(rgl)\nplot3d(sales$PROTEIN, sales$CARBS, sales$FAT)\nplot3d(sales$PROFIT_RATIO, sales$PRICE, sales$QUANTITY)\n```", "```py\ngraph_last_n_days <- function(data, n, y = NULL, color = NULL) {\n    subset <- filter_n_days_back(data, n)\n    days_range <- paste(\"(last \", n, \" days)\", sep = \"\")\n    date_sequence <- seq(min(subset[, \"DATE\"]), \n                         max(subset[, \"DATE\"]), by = \"day\")\n    if (is.null(y)) {\n        graph <- \n            ggplot(subset, aes_string(x = \"DATE\", color = color)) +\n            ggtitle(paste(\"Frequency\", days_range))+\n            geom_point(stat = \"count\", size = 3) +\n            geom_line(stat = \"count\", size = 1)\n    } else {\n        aggregation <- get_aggregation(y)\n        graph <- ggplot(subset, aes_string(\n                            x = \"DATE\", \n                            y = y, \n                            color = color)) +\n            ggtitle(paste(y, days_range)) +\n            geom_point(\n                fun.y = aggregation, \n                stat = \"summary\", size = 3) +\n            geom_line(\n                fun.y = aggregation, \n                 stat = \"summary\", size = 1)\n    }\n    graph <- graph +\n        ylab(y) +\n        scale_x_date(\n        breaks = date_sequence,\n        date_labels = \"%B %d, %Y\"\n    )\n    return(graph)\n}\n```", "```py\ngraph_last_n_days(sales, 30)\ngraph_last_n_days(sales, 30, \"PROFIT\")\ngraph_last_n_days(sales, 30, \"PROFIT_RATIO\")\n```", "```py\ngraph_last_n_days(sales, 30, color = \"PROTEIN_SOURCE\")\ngraph_last_n_days(sales, 30, \"PROFIT\", \"PROTEIN_SOURCE\")\ngraph_last_n_days(sales, 30, \"PROFIT_RATIO\", \"PROTEIN_SOURCE\")\n```", "```py\naux <- client_messages\naux$STARS <- as.numeric(aux$STARS)\ngraph_last_n_days(aux, 30, \"STARS\")\n```", "```py\ngraph_client_messages_static <- function(client_messages, sales) {\n    data <- merge(\n                  client_messages, sales, \n                  \"SALE_ID\", all.x = TRUE, \n                  all.y = FALSE\n                 )\n    world_map <- filter(map_data(\"world\"), region != \"Antarctica\")\n    return(\n        ggplot() +\n        geom_polygon(\n            data = world_map,\n            aes(long, lat, group = group),\n            color = \"grey60\",\n            fill = \"grey50\"\n        ) +\n        geom_point(\n            data = data,\n            aes(LNG, LAT, color = PRICE, size = PROFIT_RATIO)\n        ) +\n        scale_color_viridis(option = \"inferno\") +\n        ylab(\"Latitude\") +\n        xlab(\"Longitude\") +\n        coord_fixed()\n    )\n}\n```", "```py\ngraph_client_messages_static(client_messages, sales)\n```", "```py\ngraph_client_messages_interactive <- function(client_messages, sales) {\n    data <- merge(\n                  client_messages, \n                  sales, \n                  \"SALE_ID\", \n                  all.x = TRUE, \n                  all.y = FALSE)\n    data$ICON <- awesomeIcons(\n        markerColor = get_icon_color(data),\n        icon = get_icon(data),\n        iconColor = 'white',\n        library = 'ion'\n    )\n    return(\n        addProviderTiles(addAwesomeMarkers(\n            leaflet(data),\n           ~LNG, ~LAT,\n           icon = ~ICON,\n           label = ~paste(\"Profit:\", PROFIT)\n        ), providers$OpenStreetMap)\n    )\n}\n```", "```py\nget_icon_color <- function(data) {\n    return(sapply(\n        as.numeric(data$STARS),\n        function(stars) {\n            if (stars >= 4) {\n                return(\"green\")\n            } else {\n                return(\"red\")\n            }\n        }\n    ))\n}\n```", "```py\nget_icon <- function(data) {\n    return(sapply(\n        as.numeric(data$STARS),\n        function(stars) {\n            if (stars >= 4) {\n                return(\"ion-android-happy\")\n            } else {\n                return(\"ion-android-sad\")\n            }\n        }\n    ))\n}\n```", "```py\ngraph <- graph_client_messages_interactive(client_messages, sales)\nprint(graph)\n```", "```py\ngraph_client_messages_in_globe <- function(client_messages, sales) {\n    data <- setup_globe_data(client_messages, sales)\n    world_map <- get_world_map_data()\n    data <- rbind.fill(data, world_map)\n    return(globejs(\n        lat = data$LAT,\n        long = data$LNG,\n        val = data$PROFIT^1.2,\n        color = data$COLOR,\n        pointsize = 1,\n        atmosphere = TRUE\n    ))\n}\n```", "```py\nsetup_globe_data <- function(client_messages, sales) {\n    data <- merge(\n        client_messages,\n        sales,\n        \"SALE_ID\",\n        all.x = TRUE,\n        all.y = FALSE\n    )\n    data$COLOR <- NA\n    data[data$PROTEIN_SOURCE == \"BEEF\", \"COLOR\"] <- \"#aaff00\"\n    data[data$PROTEIN_SOURCE == \"FISH\", \"COLOR\"] <- \"#00ffaa\"\n    data[data$PROTEIN_SOURCE == \"CHICKEN\", \"COLOR\"] <- \"#00aaff\"\n    data[data$PROTEIN_SOURCE == \"VEGETARIAN\", \"COLOR\"] <- \"#0055ff\"\n    return(data)\n}\n```", "```py\nget_world_map_data <- function() {\n    cache <- tempfile()\n    writeBin(readBin(url(\n\"http://illposed.net/nycr2015/MOD13A2_E_NDVI_2014-05-25_rgb_360x180.TIFF\",\n        open = \"rb\"), \n        what = \"raw\", n = 1e6), con = cache)\n\n    world_map <- readGDAL(cache)\n    world_map <- as.data.frame(cbind(\n                     coordinates(world_map), \n                     world_map@data[,1]))\n    names(world_map) <- c(\"LNG\", \"LAT\", \"PROFIT\")\n\n    world_map <- world_map[world_map$PROFIT < 255,]\n    world_map <- na.exclude(world_map)\n\n    world_map$PROFIT <- 1\n    world_map$COLOR <- \"#0055ff\"\n\n    return(world_map)\n}\n```", "```py\ngraph_client_messages_in_globe(client_messages, sales)\n```"]