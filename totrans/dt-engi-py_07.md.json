["```py\n    import java.io\n    from org.apache.commons.io import IOUtils\n    from java.nio.charset import StandardCharsets\n    from org.apache.nifi.processor.io import StreamCallback\n    from org.python.core.util import StringUtil\n    ```", "```py\n    class ModJSON(StreamCallback):\n      def __init__(self):\n            pass\n      def process(self, inputStream, outputStream):\n        # Task Goes Here\n    ```", "```py\n    errorOccurred=False\n    flowFile = session.get()\n    if (flowFile != None):\n      flowFile = session.write(flowFile, ModJSON())\n      #flowFile = session.putAttribute(flowFile)\n      if(errorOccurred):\n        session.transfer(flowFile, REL_FAILURE)\n     else:\n        session.transfer(flowFile, REL_SUCCESS)\n    ```", "```py\n    import urllib\n    import urllib2\n    import json\n    ```", "```py\n        try:\n            param = {'place_url':'bernalillo-county',\n                    'per_page':'100'}\n            url = 'https://seeclickfix.com/api/v2/issues?' + \n                   urllib.urlencode(param)\n            rawreply = urllib2.urlopen(url).read()\n            reply = json.loads(rawreply)\n            outputStream.write(bytearray(json.dumps(reply,\n                   indent=4).encode('utf-8')))\n        except:\n            global errorOccurred\n            errorOccurred=True\n\n            outputStream.write(bytearray(json.dumps(reply,\n                   indent=4).encode('utf-8'))) \n    ```", "```py\n    def process(self, inputStream, outputStream):\n        try:\n            text = IOUtils.toString(inputStream,\n                                    StandardCharsets.UTF_8)\n            reply=json.loads(text)\n            reply['coords']=str(reply['lat'])+',                           '+str(reply['lng'])\n            d=reply['created_at'].split('T')\n            reply['opendate']=d[0]\n            outputStream.write(bytearray(json.dumps(reply, \n                               indent=4).encode('utf-8')))\n        except:\n            global errorOccurred\n            errorOccurred=True        \n            outputStream.write(bytearray(json.dumps(reply,\n                               indent=4).encode('utf-8')))\n    ```", "```py\ntry:\n        text = IOUtils.toString(inputStream, \n                                StandardCharsets.UTF_8)\n        asjson=json.loads(text)\n        if asjson['metadata']['pagination']\n        ['page']<=asjson['metadata']['pagination']['pages']:\n          url = asjson['metadata']['pagination']\n                                  ['next_page_url']\n          rawreply = urllib2.urlopen(url).read()\n          reply = json.loads(rawreply)\n          outputStream.write(bytearray(json.dumps(reply,\n                             indent=4).encode('utf-8')))\n        else:\n          global errorOccurred\n          errorOccurred=True        \n          outputStream.write(bytearray(json.dumps(asjson,\n                             indent=4).encode('utf-8')))        \n    except:\n        global errorOccurred\n        errorOccurred=True       \n        outputStream.write(bytearray(json.dumps(asjson, \n                           indent=4).encode('utf-8')))\n```", "```py\nparam = {'place_url':'bernalillo-county', 'per_page': '100', 'status':'Archived'}\n```"]